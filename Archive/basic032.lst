00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 33
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 74 29 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 68 13 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 60 10 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 70 8A 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 40 03 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 98 FE 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 A8 6B 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 80 0A 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 10 9D 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C0 C4 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 78 C2 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 50 D4 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 90 2F 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     28 3A B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     BC 4E B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     FC 51 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     50 59 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     48 53 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     0C 51 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     FC 1E B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     F4 1C B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     94 1C B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     24 1C B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     70 34 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     8C 37 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     38 4E B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     8C 55 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     88 4F B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     AD 01 00 FF 
00ccc     E2 50 06 F6 | 	mov	local22, ##@LR__5377
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     B8 1A B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     6C 74 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     78 52 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     DC 3B B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     0C 3E B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     C4 4C B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     18 54 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     14 4E B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     54 19 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     4C 33 B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     40 33 B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     D0 32 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     9C 32 B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     BC 32 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     AC 32 B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     F8 17 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     A4 17 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     74 17 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     0C 17 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     58 2F B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     34 30 B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     F4 15 B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     A0 15 B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     70 15 B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     08 15 B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     54 2D B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     AD 01 00 FF 
01328     E3 50 06 F6 | 	mov	local22, ##@LR__5378
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     7C 2E B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     1C 2E B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     70 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     14 2D B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     60 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     50 1B B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     CC 4C B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     A4 4C B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     7C 4C B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     8C 41 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     DC 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     CC 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     BC 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     FC 41 B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     9C 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     8C 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     7C 41 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     50 40 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     31 4A 05 F6 | 	mov	COUNT_, #49
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     00 6C B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     38 6B B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     AD 01 00 FF 
018e0     E4 16 06 F6 | 	mov	arg03, ##@LR__5379
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     28 6B B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     60 6A B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     AD 01 00 FF 
01940     E5 2C 06 F6 | 	mov	local04, ##@LR__5380
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     7C 27 90 AD |  if_e	jmp	#LR__0207
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     E0 66 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     AD 01 00 FF 
01a00     E6 14 06 F6 | 	mov	arg02, ##@LR__5381
01a04     60 45 B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     A0 66 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     AD 01 00 FF 
01a40     E8 14 06 F6 | 	mov	arg02, ##@LR__5382
01a44     20 45 B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     30 66 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     AD 01 00 FF 
01ab0     EA 38 06 F6 | 	mov	local10, ##@LR__5383
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     AC 44 B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     CC 64 B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     CC 68 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     04 68 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     08 64 B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     90 68 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     C8 67 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     AD 01 00 FF 
01be4     EC 2C 06 F6 | 	mov	local04, ##@LR__5384
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     AD 01 00 FF 
01c34     ED 30 06 F6 | 	mov	local06, ##@LR__5385
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     28 43 B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     AD 01 00 FF 
01c94     EE 14 06 F6 | 	mov	arg02, ##@LR__5386
01c98     CC 42 B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     AD 01 00 FF 
01cec     EF 14 06 F6 | 	mov	arg02, ##@LR__5387
01cf0     74 42 B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     AD 01 00 FF 
01d44     F0 14 06 F6 | 	mov	arg02, ##@LR__5388
01d48     1C 42 B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     3C 63 B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     D0 2B B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     3C 62 B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     AD 01 00 FF 
01ea4     F1 14 06 F6 | 	mov	arg02, ##@LR__5389
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     B8 40 B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     B8 61 B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     AD 01 00 FF 
01f28     F2 14 06 F6 | 	mov	arg02, ##@LR__5390
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     34 40 B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     68 4C B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     AD 01 00 FF 
0203c     F3 2C 06 F6 | 	mov	local04, ##@LR__5391
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     AD 01 00 FF 
02070     F5 14 06 F6 | 	mov	arg02, ##@LR__5392
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     E8 3E B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     BC 3E B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     AD 01 00 FF 
02178     F7 14 06 F6 | 	mov	arg02, ##@LR__5393
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     E4 3D B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     AD 01 00 FF 
02194     F9 14 06 F6 | 	mov	arg02, ##@LR__5394
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     C8 3D B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     64 5E B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     AD 01 00 FF 
021ec     FB 14 06 F6 | 	mov	arg02, ##@LR__5395
021f0     74 3D B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     94 5D B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     AD 01 00 FF 
02234     FD 14 06 F6 | 	mov	arg02, ##@LR__5396
02238     2C 3D B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     7C 5D B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     C0 3C B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     AD 01 00 FF 
023b8     FF 14 06 F6 | 	mov	arg02, ##@LR__5397
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     9C 3B B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     AD 01 00 FF 
023d8     01 15 06 F6 | 	mov	arg02, ##@LR__5398
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     84 3B B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     AD 01 00 FF 
023f0     03 31 06 F6 | 	mov	local06, ##@LR__5399
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     68 3B B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     AD 01 00 FF 
0240c     05 3D 06 F6 | 	mov	local12, ##@LR__5400
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     4C 3B B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     AD 01 00 FF 
02428     07 3B 06 F6 | 	mov	local11, ##@LR__5401
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     2C 3B B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     AD 01 00 FF 
02448     09 3B 06 F6 | 	mov	local11, ##@LR__5402
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     10 3B B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     AD 01 00 FF 
02464     0B 41 06 F6 | 	mov	local14, ##@LR__5403
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     F4 3A B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     AD 01 00 FF 
02480     0D 5D 06 F6 | 	mov	local28, ##@LR__5404
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     D4 3A B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     AD 01 00 FF 
024a0     0F 5D 06 F6 | 	mov	local28, ##@LR__5405
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     B8 3A B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     AD 01 00 FF 
024bc     11 53 06 F6 | 	mov	local23, ##@LR__5406
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     98 3A B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     AD 01 00 FF 
024dc     13 53 06 F6 | 	mov	local23, ##@LR__5407
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     7C 3A B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     AD 01 00 FF 
024f8     15 5F 06 F6 | 	mov	local29, ##@LR__5408
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     5C 3A B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     AD 01 00 FF 
02518     17 61 06 F6 | 	mov	local30, ##@LR__5409
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     3C 3A B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     AD 01 00 FF 
02538     19 63 06 F6 | 	mov	local31, ##@LR__5410
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     1C 3A B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     1C 3A B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     D0 5D B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     08 5D B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     DC 57 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     AD 01 00 FF 
027ec     1B 15 06 F6 | 	mov	arg02, ##@LR__5411
027f0     74 37 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     20 58 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     AD 01 00 FF 
02830     1D 15 06 F6 | 	mov	arg02, ##@LR__5412
02834     30 37 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     54 5A B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     34 43 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     AD 01 00 FF 
0290c     1F 15 06 F6 | 	mov	arg02, ##@LR__5413
02910     54 36 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     AD 01 00 FF 
0293c     24 15 06 F6 | 	mov	arg02, ##@LR__5414
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     1C 36 B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | '  							' then found
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     2C 56 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     AD 01 00 FF 
0299c     29 15 06 F6 | 	mov	arg02, ##@LR__5415
029a0     C4 35 B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     6C 55 B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     AD 01 00 FF 
02af8     2B 31 06 F6 | 	mov	local06, ##@LR__5416
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     AD 01 00 FF 
02b2c     2D 17 06 F6 | 	mov	arg03, ##@LR__5417
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     C8 59 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     DC 53 B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     10 53 B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     AD 01 00 FF 
02cd0     2F 15 06 F6 | 	mov	arg02, ##@LR__5418
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     84 32 B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     AD 01 00 FF 
02cf0     35 15 06 F6 | 	mov	arg02, ##@LR__5419
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     6C 32 B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     AD 01 00 FF 
02d08     3C 15 06 F6 | 	mov	arg02, ##@LR__5420
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     54 32 B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     AD 01 00 FF 
02d3c     42 15 06 F6 | 	mov	arg02, ##@LR__5421
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     1C 32 B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     AD 01 00 FF 
02d70     45 31 06 F6 | 	mov	local06, ##@LR__5422
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     AD 01 00 FF 
02dac     47 15 06 F6 | 	mov	arg02, ##@LR__5423
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     AC 31 B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     AD 01 00 FF 
02de0     4B 31 06 F6 | 	mov	local06, ##@LR__5424
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     AD 01 00 FF 
02e00     4D 15 06 F6 | 	mov	arg02, ##@LR__5425
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     5C 31 B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     AD 01 00 FF 
02e18     52 15 06 F6 | 	mov	arg02, ##@LR__5426
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     44 31 B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     AD 01 00 FF 
02e4c     55 15 06 F6 | 	mov	arg02, ##@LR__5427
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     0C 31 B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     AD 01 00 FF 
02e80     5B 31 06 F6 | 	mov	local06, ##@LR__5428
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     AD 01 00 FF 
02eb0     5D 15 06 F6 | 	mov	arg02, ##@LR__5429
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     A8 30 B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     AD 01 00 FF 
02ee4     66 31 06 F6 | 	mov	local06, ##@LR__5430
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     AD 01 00 FF 
02f14     68 15 06 F6 | 	mov	arg02, ##@LR__5431
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     44 30 B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     AD 01 00 FF 
02f48     71 31 06 F6 | 	mov	local06, ##@LR__5432
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     AD 01 00 FF 
02f78     73 15 06 F6 | 	mov	arg02, ##@LR__5433
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     E0 2F B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     AD 01 00 FF 
02fac     7C 31 06 F6 | 	mov	local06, ##@LR__5434
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     AD 01 00 FF 
02fdc     7E 15 06 F6 | 	mov	arg02, ##@LR__5435
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     7C 2F B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     AD 01 00 FF 
03010     81 31 06 F6 | 	mov	local06, ##@LR__5436
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     10 19 B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     EC 10 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     AE 01 00 FF 
03148     74 14 06 F6 | 	mov	arg02, ##@LR__5521
0314c     18 2E B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     AC 19 B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     18 2A B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     5C 13 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     30 3A B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     80 4E B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     04 11 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     34 4C B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     0C 11 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     B4 54 B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     A8 4C B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     20 30 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     E4 33 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     60 36 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     20 36 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     74 49 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     84 2B B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     AD 01 00 FF 
03800     83 31 06 F6 | 	mov	local06, ##@LR__5437
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
0381c     AD 01 00 FF 
03820     84 15 06 F6 | 	mov	arg02, ##@LR__5438
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     3C 27 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     AD 01 00 FF 
03838     89 15 06 F6 | 	mov	arg02, ##@LR__5439
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     24 27 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     AD 01 00 FF 
03850     8E 31 06 F6 | 	mov	local06, ##@LR__5440
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     08 27 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     AD 01 00 FF 
0386c     93 3D 06 F6 | 	mov	local12, ##@LR__5441
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     E8 26 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     AD 01 00 FF 
0388c     97 3B 06 F6 | 	mov	local11, ##@LR__5442
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     C8 26 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     AD 01 00 FF 
038ac     9B 41 06 F6 | 	mov	local14, ##@LR__5443
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     A8 26 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     AD 01 00 FF 
038cc     9E 3F 06 F6 | 	mov	local13, ##@LR__5444
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     88 26 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     AD 01 00 FF 
038ec     A2 3F 06 F6 | 	mov	local13, ##@LR__5445
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     6C 26 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     AD 01 00 FF 
03908     A8 51 06 F6 | 	mov	local22, ##@LR__5446
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     4C 26 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     7C 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     34 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 39 02 F6 | 	mov	local10, local37
03970     01 38 06 F1 | 	add	local10, #1
03974     03 38 66 F0 | 	shl	local10, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 38 02 F1 | 	add	local10, objptr
03984     01 00 00 FF 
03988     03 30 06 F6 | 	mov	local06, ##515
0398c     04 38 06 F1 | 	add	local10, #4
03990     01 00 80 FF 
03994     1C 07 68 FC | 	wrlong	##515, local10
03998     35 00 00 FF 
0399c     0C E4 85 F1 | 	sub	objptr, ##27148
039a0                 | LR__0186
039a0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
039a0     AD 01 00 FF 
039a4     AB 15 06 F6 | 	mov	arg02, ##@LR__5447
039a8     3B 13 02 F6 | 	mov	arg01, local41
039ac     B8 25 B2 FD | 	call	#__system___string_cmp
039b0     00 FA 0D F2 | 	cmp	result1, #0 wz
039b4     1C 00 90 AD |  if_e	jmp	#LR__0187
039b8     AD 01 00 FF 
039bc     B2 2F 06 F6 | 	mov	local05, ##@LR__5448
039c0     3B 13 02 F6 | 	mov	arg01, local41
039c4     17 15 02 F6 | 	mov	arg02, local05
039c8     9C 25 B2 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     7C 00 90 5D |  if_ne	jmp	#LR__0188
039d4                 | LR__0187
039d4     37 2F 02 F6 | 	mov	local05, local37
039d8     01 2E 06 F1 | 	add	local05, #1
039dc     17 31 02 F6 | 	mov	local06, local05
039e0     03 30 66 F0 | 	shl	local06, #3
039e4     35 00 00 FF 
039e8     0C E4 05 F1 | 	add	objptr, ##27148
039ec     F2 3C 02 F6 | 	mov	local12, objptr
039f0     F2 30 02 F1 | 	add	local06, objptr
039f4     04 30 06 F1 | 	add	local06, #4
039f8     18 41 02 FB | 	rdlong	local14, local06
039fc     04 30 86 F1 | 	sub	local06, #4
03a00     20 3B 02 F6 | 	mov	local11, local14
03a04     01 00 00 FF 
03a08     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a0c     35 00 00 FF 
03a10     0C E4 85 F1 | 	sub	objptr, ##27148
03a14     38 00 90 5D |  if_ne	jmp	#LR__0188
03a18     37 39 02 F6 | 	mov	local10, local37
03a1c     01 38 06 F1 | 	add	local10, #1
03a20     03 38 66 F0 | 	shl	local10, #3
03a24     35 00 00 FF 
03a28     0C E4 05 F1 | 	add	objptr, ##27148
03a2c     F2 2E 02 F6 | 	mov	local05, objptr
03a30     F2 38 02 F1 | 	add	local10, objptr
03a34     01 00 00 FF 
03a38     03 30 06 F6 | 	mov	local06, ##515
03a3c     04 38 06 F1 | 	add	local10, #4
03a40     01 00 80 FF 
03a44     1C 07 68 FC | 	wrlong	##515, local10
03a48     35 00 00 FF 
03a4c     0C E4 85 F1 | 	sub	objptr, ##27148
03a50                 | LR__0188
03a50                 | ' 
03a50                 | ' ' cd needs special treatment..
03a50                 | ' 
03a50                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03a50     AD 01 00 FF 
03a54     B8 15 06 F6 | 	mov	arg02, ##@LR__5449
03a58     3B 13 02 F6 | 	mov	arg01, local41
03a5c     08 25 B2 FD | 	call	#__system___string_cmp
03a60     00 FA 0D F2 | 	cmp	result1, #0 wz
03a64     38 00 90 5D |  if_ne	jmp	#LR__0189
03a68     37 39 02 F6 | 	mov	local10, local37
03a6c     01 38 06 F1 | 	add	local10, #1
03a70     03 38 66 F0 | 	shl	local10, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 2E 02 F6 | 	mov	local05, objptr
03a80     F2 38 02 F1 | 	add	local10, objptr
03a84     01 00 00 FF 
03a88     03 30 06 F6 | 	mov	local06, ##515
03a8c     04 38 06 F1 | 	add	local10, #4
03a90     01 00 80 FF 
03a94     1C 07 68 FC | 	wrlong	##515, local10
03a98     35 00 00 FF 
03a9c     0C E4 85 F1 | 	sub	objptr, ##27148
03aa0                 | LR__0189
03aa0                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03aa0     AD 01 00 FF 
03aa4     BB 15 06 F6 | 	mov	arg02, ##@LR__5450
03aa8     3B 13 02 F6 | 	mov	arg01, local41
03aac     B8 24 B2 FD | 	call	#__system___string_cmp
03ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ab4     A4 00 90 5D |  if_ne	jmp	#LR__0190
03ab8     37 31 02 F6 | 	mov	local06, local37
03abc     01 30 06 F1 | 	add	local06, #1
03ac0     03 30 66 F0 | 	shl	local06, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 3C 02 F6 | 	mov	local12, objptr
03ad0     F2 30 02 F1 | 	add	local06, objptr
03ad4     18 13 02 FB | 	rdlong	arg01, local06
03ad8     AD 01 00 FF 
03adc     BF 2F 06 F6 | 	mov	local05, ##@LR__5451
03ae0     17 15 02 F6 | 	mov	arg02, local05
03ae4     35 00 00 FF 
03ae8     0C E4 85 F1 | 	sub	objptr, ##27148
03aec     78 24 B2 FD | 	call	#__system___string_cmp
03af0     00 FA 0D F2 | 	cmp	result1, #0 wz
03af4     64 00 90 5D |  if_ne	jmp	#LR__0190
03af8     37 39 02 F6 | 	mov	local10, local37
03afc     01 38 06 F1 | 	add	local10, #1
03b00     03 38 66 F0 | 	shl	local10, #3
03b04     35 00 00 FF 
03b08     0C E4 05 F1 | 	add	objptr, ##27148
03b0c     F2 38 02 F1 | 	add	local10, objptr
03b10     04 38 06 F1 | 	add	local10, #4
03b14     01 00 80 FF 
03b18     1C 07 68 FC | 	wrlong	##515, local10
03b1c     37 39 02 F6 | 	mov	local10, local37
03b20     01 38 06 F1 | 	add	local10, #1
03b24     03 38 66 F0 | 	shl	local10, #3
03b28     F2 38 02 F1 | 	add	local10, objptr
03b2c     AD 01 00 FF 
03b30     C1 31 06 F6 | 	mov	local06, ##@LR__5452
03b34     1C 31 62 FC | 	wrlong	local06, local10
03b38     37 39 02 F6 | 	mov	local10, local37
03b3c     03 38 66 F0 | 	shl	local10, #3
03b40     F2 2E 02 F6 | 	mov	local05, objptr
03b44     F2 38 02 F1 | 	add	local10, objptr
03b48     C3 30 06 F6 | 	mov	local06, #195
03b4c     04 38 06 F1 | 	add	local10, #4
03b50     1C 87 69 FC | 	wrlong	#195, local10
03b54     35 00 00 FF 
03b58     0C E4 85 F1 | 	sub	objptr, ##27148
03b5c                 | LR__0190
03b5c                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03b5c     AD 01 00 FF 
03b60     C4 39 06 F6 | 	mov	local10, ##@LR__5453
03b64     3B 13 02 F6 | 	mov	arg01, local41
03b68     1C 15 02 F6 | 	mov	arg02, local10
03b6c     F8 23 B2 FD | 	call	#__system___string_cmp
03b70     00 FA 0D F2 | 	cmp	result1, #0 wz
03b74     04 01 90 5D |  if_ne	jmp	#LR__0193
03b78     37 31 02 F6 | 	mov	local06, local37
03b7c     01 30 06 F1 | 	add	local06, #1
03b80     03 30 66 F0 | 	shl	local06, #3
03b84     35 00 00 FF 
03b88     0C E4 05 F1 | 	add	objptr, ##27148
03b8c     F2 3C 02 F6 | 	mov	local12, objptr
03b90     F2 30 02 F1 | 	add	local06, objptr
03b94     18 13 02 FB | 	rdlong	arg01, local06
03b98     AD 01 00 FF 
03b9c     C7 2F 06 F6 | 	mov	local05, ##@LR__5454
03ba0     17 39 02 F6 | 	mov	local10, local05
03ba4     1C 15 02 F6 | 	mov	arg02, local10
03ba8     35 00 00 FF 
03bac     0C E4 85 F1 | 	sub	objptr, ##27148
03bb0     B4 23 B2 FD | 	call	#__system___string_cmp
03bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb8     C0 00 90 5D |  if_ne	jmp	#LR__0193
03bbc     37 39 02 F6 | 	mov	local10, local37
03bc0     01 38 06 F1 | 	add	local10, #1
03bc4     03 38 66 F0 | 	shl	local10, #3
03bc8     35 00 00 FF 
03bcc     0C E4 05 F1 | 	add	objptr, ##27148
03bd0     F2 2E 02 F6 | 	mov	local05, objptr
03bd4     F2 38 02 F1 | 	add	local10, objptr
03bd8     01 00 00 FF 
03bdc     03 30 06 F6 | 	mov	local06, ##515
03be0     04 38 06 F1 | 	add	local10, #4
03be4     01 00 80 FF 
03be8     1C 07 68 FC | 	wrlong	##515, local10
03bec     04 38 86 F1 | 	sub	local10, #4
03bf0     37 29 02 F6 | 	mov	local02, local37
03bf4     02 28 06 F1 | 	add	local02, #2
03bf8     23 85 02 F6 | 	mov	local48, local17
03bfc     01 84 06 F1 | 	add	local48, #1
03c00     35 00 00 FF 
03c04     0C E4 85 F1 | 	sub	objptr, ##27148
03c08                 | LR__0191
03c08     42 29 52 F2 | 	cmps	local02, local48 wc
03c0c     6C 00 90 3D |  if_ae	jmp	#LR__0192
03c10     14 39 02 F6 | 	mov	local10, local02
03c14     03 38 66 F0 | 	shl	local10, #3
03c18     35 00 00 FF 
03c1c     0C E4 05 F1 | 	add	objptr, ##27148
03c20     F2 38 02 F1 | 	add	local10, objptr
03c24     1C 87 02 FB | 	rdlong	local49, local10
03c28     37 39 02 F6 | 	mov	local10, local37
03c2c     01 38 06 F1 | 	add	local10, #1
03c30     03 38 66 F0 | 	shl	local10, #3
03c34     F2 2E 02 F6 | 	mov	local05, objptr
03c38     F2 38 02 F1 | 	add	local10, objptr
03c3c     37 3B 02 F6 | 	mov	local11, local37
03c40     01 3A 06 F1 | 	add	local11, #1
03c44     1D 41 02 F6 | 	mov	local14, local11
03c48     03 40 66 F0 | 	shl	local14, #3
03c4c     F2 3E 02 F6 | 	mov	local13, objptr
03c50     F2 40 02 F1 | 	add	local14, objptr
03c54     20 13 02 FB | 	rdlong	arg01, local14
03c58     43 3D 02 F6 | 	mov	local12, local49
03c5c     1E 15 02 F6 | 	mov	arg02, local12
03c60     35 00 00 FF 
03c64     0C E4 85 F1 | 	sub	objptr, ##27148
03c68     30 23 B2 FD | 	call	#__system___string_concat
03c6c     FD 30 02 F6 | 	mov	local06, result1
03c70     1C 31 62 FC | 	wrlong	local06, local10
03c74     01 28 06 F1 | 	add	local02, #1
03c78     8C FF 9F FD | 	jmp	#LR__0191
03c7c                 | LR__0192
03c7c                 | LR__0193
03c7c                 | ' 
03c7c                 | ' ' determine a type of the line and compile it
03c7c                 | ' 
03c7c                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03c7c     35 00 00 FF 
03c80     0C E4 05 F1 | 	add	objptr, ##27148
03c84     F2 12 02 FB | 	rdlong	arg01, objptr
03c88     35 00 00 FF 
03c8c     0C E4 85 F1 | 	sub	objptr, ##27148
03c90     88 2F B0 FD | 	call	#_isdec
03c94     00 FA 0D F2 | 	cmp	result1, #0 wz
03c98     30 00 90 AD |  if_e	jmp	#LR__0194
03c9c     35 00 00 FF 
03ca0     0C E4 05 F1 | 	add	objptr, ##27148
03ca4     F2 12 02 FB | 	rdlong	arg01, objptr
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0     00 14 06 F6 | 	mov	arg02, #0
03cb4     7C 57 B2 FD | 	call	#__system____builtin_atoi
03cb8     52 00 00 FF 
03cbc     B0 E4 05 F1 | 	add	objptr, ##42160
03cc0     F2 FA 61 FC | 	wrlong	result1, objptr
03cc4     52 00 00 FF 
03cc8     B0 E4 85 F1 | 	sub	objptr, ##42160
03ccc                 | LR__0194
03ccc                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03ccc     52 00 00 FF 
03cd0     B0 E4 05 F1 | 	add	objptr, ##42160
03cd4     F2 2C 02 FB | 	rdlong	local04, objptr
03cd8     52 00 00 FF 
03cdc     B0 E4 85 F1 | 	sub	objptr, ##42160
03ce0     01 2C 16 F2 | 	cmp	local04, #1 wc
03ce4     40 00 90 CD |  if_b	jmp	#LR__0195
03ce8     01 46 0E F2 | 	cmp	local17, #1 wz
03cec     37 00 00 AF 
03cf0     24 E4 05 A1 |  if_e	add	objptr, ##28196
03cf4     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03cf8     37 00 00 AF 
03cfc     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03d00     17 39 02 A6 |  if_e	mov	local10, local05
03d04     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03d08     1C 00 90 5D |  if_ne	jmp	#LR__0195
03d0c     52 00 00 FF 
03d10     B0 E4 05 F1 | 	add	objptr, ##42160
03d14     F2 12 02 FB | 	rdlong	arg01, objptr
03d18     52 00 00 FF 
03d1c     B0 E4 85 F1 | 	sub	objptr, ##42160
03d20     A4 30 B0 FD | 	call	#_deleteline
03d24     C8 03 90 FD | 	jmp	#LR__0206
03d28                 | LR__0195
03d28                 | ' 
03d28                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03d28     37 00 00 FF 
03d2c     24 E4 05 F1 | 	add	objptr, ##28196
03d30     F2 2C 0A FB | 	rdlong	local04, objptr wz
03d34     37 00 00 FF 
03d38     24 E4 85 F1 | 	sub	objptr, ##28196
03d3c     20 00 90 AD |  if_e	jmp	#LR__0196
03d40     37 00 00 FF 
03d44     24 E4 05 F1 | 	add	objptr, ##28196
03d48     F2 2E 02 FB | 	rdlong	local05, objptr
03d4c     37 00 00 FF 
03d50     24 E4 85 F1 | 	sub	objptr, ##28196
03d54     17 39 02 F6 | 	mov	local10, local05
03d58     03 38 0E F2 | 	cmp	local10, #3 wz
03d5c     C0 00 90 5D |  if_ne	jmp	#LR__0198
03d60                 | LR__0196
03d60     35 00 00 FF 
03d64     20 E4 05 F1 | 	add	objptr, ##27168
03d68     F2 3C 02 FB | 	rdlong	local12, objptr
03d6c     35 00 00 FF 
03d70     20 E4 85 F1 | 	sub	objptr, ##27168
03d74     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d78     A4 00 90 AD |  if_e	jmp	#LR__0198
03d7c     52 00 00 FF 
03d80     B0 E4 05 F1 | 	add	objptr, ##42160
03d84     F2 12 02 FB | 	rdlong	arg01, objptr
03d88     1B 00 00 FF 
03d8c     8C E4 85 F1 | 	sub	objptr, ##13964
03d90     F2 16 02 FB | 	rdlong	arg03, objptr
03d94     37 00 00 FF 
03d98     24 E4 85 F1 | 	sub	objptr, ##28196
03d9c     00 14 06 F6 | 	mov	arg02, #0
03da0     5C 44 B0 FD | 	call	#_compile
03da4     FD 26 0A F6 | 	mov	local01, result1 wz
03da8                 | '   err=compile(linenum,0,cont) 
03da8                 | '   if err<>0 then printerror(err,linenum): goto 101
03da8     20 00 90 AD |  if_e	jmp	#LR__0197
03dac     52 00 00 FF 
03db0     B0 E4 05 F1 | 	add	objptr, ##42160
03db4     F2 14 02 FB | 	rdlong	arg02, objptr
03db8     52 00 00 FF 
03dbc     B0 E4 85 F1 | 	sub	objptr, ##42160
03dc0     13 13 02 F6 | 	mov	arg01, local01
03dc4     88 E7 B1 FD | 	call	#_printerror
03dc8     44 03 90 FD | 	jmp	#LR__0207
03dcc                 | LR__0197
03dcc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03dcc     52 00 00 FF 
03dd0     F4 E4 05 F1 | 	add	objptr, ##42228
03dd4     F2 12 02 FB | 	rdlong	arg01, objptr
03dd8     52 00 00 FF 
03ddc     F4 E4 85 F1 | 	sub	objptr, ##42228
03de0     AD 01 00 FF 
03de4     C9 15 06 F6 | 	mov	arg02, ##@LR__5455
03de8     7C 21 B2 FD | 	call	#__system___string_cmp
03dec     00 FA 0D F2 | 	cmp	result1, #0 wz
03df0     FC 02 90 AD |  if_e	jmp	#LR__0206
03df4     52 00 00 FF 
03df8     F4 E4 05 F1 | 	add	objptr, ##42228
03dfc     F2 2C 02 FB | 	rdlong	local04, objptr
03e00     1B 00 00 FF 
03e04     D8 E4 85 F1 | 	sub	objptr, ##14040
03e08     F2 2C 62 FC | 	wrlong	local04, objptr
03e0c     08 E4 05 F1 | 	add	objptr, #8
03e10     F2 08 68 FC | 	wrlong	#4, objptr
03e14     37 00 00 FF 
03e18     24 E4 85 F1 | 	sub	objptr, ##28196
03e1c     74 DA 9F FD | 	jmp	#LR__0070
03e20                 | LR__0198
03e20                 | '       							
03e20                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03e20     37 00 00 FF 
03e24     24 E4 05 F1 | 	add	objptr, ##28196
03e28     F2 2C 02 FB | 	rdlong	local04, objptr
03e2c     37 00 00 FF 
03e30     24 E4 85 F1 | 	sub	objptr, ##28196
03e34     01 2C 0E F2 | 	cmp	local04, #1 wz
03e38     37 00 00 5F 
03e3c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e40     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e44     37 00 00 5F 
03e48     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e4c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03e50     C0 00 90 5D |  if_ne	jmp	#LR__0200
03e54     35 00 00 FF 
03e58     18 E4 05 F1 | 	add	objptr, ##27160
03e5c     F2 3C 02 FB | 	rdlong	local12, objptr
03e60     35 00 00 FF 
03e64     18 E4 85 F1 | 	sub	objptr, ##27160
03e68     1B 3C 0E F2 | 	cmp	local12, #27 wz
03e6c     A4 00 90 AD |  if_e	jmp	#LR__0200
03e70     52 00 00 FF 
03e74     B0 E4 05 F1 | 	add	objptr, ##42160
03e78     F2 12 02 FB | 	rdlong	arg01, objptr
03e7c     1B 00 00 FF 
03e80     8C E4 85 F1 | 	sub	objptr, ##13964
03e84     F2 16 02 FB | 	rdlong	arg03, objptr
03e88     37 00 00 FF 
03e8c     24 E4 85 F1 | 	sub	objptr, ##28196
03e90     00 14 06 F6 | 	mov	arg02, #0
03e94     68 43 B0 FD | 	call	#_compile
03e98     FD 26 0A F6 | 	mov	local01, result1 wz
03e9c                 | '   err=compile(linenum,0,cont) 
03e9c                 | '   if err<>0 then printerror(err,linenum): goto 101
03e9c     20 00 90 AD |  if_e	jmp	#LR__0199
03ea0     52 00 00 FF 
03ea4     B0 E4 05 F1 | 	add	objptr, ##42160
03ea8     F2 14 02 FB | 	rdlong	arg02, objptr
03eac     52 00 00 FF 
03eb0     B0 E4 85 F1 | 	sub	objptr, ##42160
03eb4     13 13 02 F6 | 	mov	arg01, local01
03eb8     94 E6 B1 FD | 	call	#_printerror
03ebc     50 02 90 FD | 	jmp	#LR__0207
03ec0                 | LR__0199
03ec0                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ec0     52 00 00 FF 
03ec4     F4 E4 05 F1 | 	add	objptr, ##42228
03ec8     F2 12 02 FB | 	rdlong	arg01, objptr
03ecc     52 00 00 FF 
03ed0     F4 E4 85 F1 | 	sub	objptr, ##42228
03ed4     AD 01 00 FF 
03ed8     CA 15 06 F6 | 	mov	arg02, ##@LR__5456
03edc     88 20 B2 FD | 	call	#__system___string_cmp
03ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ee4     08 02 90 AD |  if_e	jmp	#LR__0206
03ee8     52 00 00 FF 
03eec     F4 E4 05 F1 | 	add	objptr, ##42228
03ef0     F2 2C 02 FB | 	rdlong	local04, objptr
03ef4     1B 00 00 FF 
03ef8     D8 E4 85 F1 | 	sub	objptr, ##14040
03efc     F2 2C 62 FC | 	wrlong	local04, objptr
03f00     08 E4 05 F1 | 	add	objptr, #8
03f04     F2 08 68 FC | 	wrlong	#4, objptr
03f08     37 00 00 FF 
03f0c     24 E4 85 F1 | 	sub	objptr, ##28196
03f10     80 D9 9F FD | 	jmp	#LR__0070
03f14                 | LR__0200
03f14                 | ' 							 
03f14                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03f14     37 00 00 FF 
03f18     24 E4 05 F1 | 	add	objptr, ##28196
03f1c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f20     37 00 00 FF 
03f24     24 E4 85 F1 | 	sub	objptr, ##28196
03f28     37 00 00 5F 
03f2c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f30     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f34     37 00 00 5F 
03f38     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f3c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03f40     35 00 00 AF 
03f44     20 E4 05 A1 |  if_e	add	objptr, ##27168
03f48     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f4c     35 00 00 AF 
03f50     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03f54     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f58     A4 00 90 5D |  if_ne	jmp	#LR__0202
03f5c     52 00 00 FF 
03f60     B0 E4 05 F1 | 	add	objptr, ##42160
03f64     F2 12 02 FB | 	rdlong	arg01, objptr
03f68     1B 00 00 FF 
03f6c     8C E4 85 F1 | 	sub	objptr, ##13964
03f70     F2 16 02 FB | 	rdlong	arg03, objptr
03f74     37 00 00 FF 
03f78     24 E4 85 F1 | 	sub	objptr, ##28196
03f7c     00 14 06 F6 | 	mov	arg02, #0
03f80     44 43 B0 FD | 	call	#_compile_assign
03f84     FD 26 0A F6 | 	mov	local01, result1 wz
03f88                 | '   err=compile_assign(linenum,0,cont)
03f88                 | '   if err<>0 then printerror(err,linenum): goto 101
03f88     20 00 90 AD |  if_e	jmp	#LR__0201
03f8c     52 00 00 FF 
03f90     B0 E4 05 F1 | 	add	objptr, ##42160
03f94     F2 14 02 FB | 	rdlong	arg02, objptr
03f98     52 00 00 FF 
03f9c     B0 E4 85 F1 | 	sub	objptr, ##42160
03fa0     13 13 02 F6 | 	mov	arg01, local01
03fa4     A8 E5 B1 FD | 	call	#_printerror
03fa8     64 01 90 FD | 	jmp	#LR__0207
03fac                 | LR__0201
03fac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03fac     52 00 00 FF 
03fb0     F4 E4 05 F1 | 	add	objptr, ##42228
03fb4     F2 12 02 FB | 	rdlong	arg01, objptr
03fb8     52 00 00 FF 
03fbc     F4 E4 85 F1 | 	sub	objptr, ##42228
03fc0     AD 01 00 FF 
03fc4     CB 15 06 F6 | 	mov	arg02, ##@LR__5457
03fc8     9C 1F B2 FD | 	call	#__system___string_cmp
03fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03fd0     1C 01 90 AD |  if_e	jmp	#LR__0206
03fd4     52 00 00 FF 
03fd8     F4 E4 05 F1 | 	add	objptr, ##42228
03fdc     F2 2C 02 FB | 	rdlong	local04, objptr
03fe0     1B 00 00 FF 
03fe4     D8 E4 85 F1 | 	sub	objptr, ##14040
03fe8     F2 2C 62 FC | 	wrlong	local04, objptr
03fec     08 E4 05 F1 | 	add	objptr, #8
03ff0     F2 08 68 FC | 	wrlong	#4, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     94 D8 9F FD | 	jmp	#LR__0070
04000                 | LR__0202
04000                 | '     							 
04000                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04000     37 00 00 FF 
04004     24 E4 05 F1 | 	add	objptr, ##28196
04008     F2 2C 02 FB | 	rdlong	local04, objptr
0400c     37 00 00 FF 
04010     24 E4 85 F1 | 	sub	objptr, ##28196
04014     01 2C 0E F2 | 	cmp	local04, #1 wz
04018     37 00 00 5F 
0401c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04020     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04024     37 00 00 5F 
04028     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0402c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04030     35 00 00 AF 
04034     18 E4 05 A1 |  if_e	add	objptr, ##27160
04038     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0403c     35 00 00 AF 
04040     18 E4 85 A1 |  if_e	sub	objptr, ##27160
04044     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
04048     A4 00 90 5D |  if_ne	jmp	#LR__0205
0404c     52 00 00 FF 
04050     B0 E4 05 F1 | 	add	objptr, ##42160
04054     F2 12 02 FB | 	rdlong	arg01, objptr
04058     1B 00 00 FF 
0405c     8C E4 85 F1 | 	sub	objptr, ##13964
04060     F2 16 02 FB | 	rdlong	arg03, objptr
04064     37 00 00 FF 
04068     24 E4 85 F1 | 	sub	objptr, ##28196
0406c     00 14 06 F6 | 	mov	arg02, #0
04070     54 42 B0 FD | 	call	#_compile_assign
04074     FD 26 0A F6 | 	mov	local01, result1 wz
04078                 | '   err=compile_assign(linenum,0,cont) 
04078                 | '   if err<>0 then printerror(err,linenum): goto 101
04078     20 00 90 AD |  if_e	jmp	#LR__0203
0407c     52 00 00 FF 
04080     B0 E4 05 F1 | 	add	objptr, ##42160
04084     F2 14 02 FB | 	rdlong	arg02, objptr
04088     52 00 00 FF 
0408c     B0 E4 85 F1 | 	sub	objptr, ##42160
04090     13 13 02 F6 | 	mov	arg01, local01
04094     B8 E4 B1 FD | 	call	#_printerror
04098     74 00 90 FD | 	jmp	#LR__0207
0409c                 | LR__0203
0409c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
0409c     52 00 00 FF 
040a0     F4 E4 05 F1 | 	add	objptr, ##42228
040a4     F2 12 02 FB | 	rdlong	arg01, objptr
040a8     52 00 00 FF 
040ac     F4 E4 85 F1 | 	sub	objptr, ##42228
040b0     AD 01 00 FF 
040b4     CC 15 06 F6 | 	mov	arg02, ##@LR__5458
040b8     AC 1E B2 FD | 	call	#__system___string_cmp
040bc     00 FA 4D F2 | 	cmps	result1, #0 wz
040c0     2C 00 90 AD |  if_e	jmp	#LR__0204
040c4     52 00 00 FF 
040c8     F4 E4 05 F1 | 	add	objptr, ##42228
040cc     F2 2C 02 FB | 	rdlong	local04, objptr
040d0     1B 00 00 FF 
040d4     D8 E4 85 F1 | 	sub	objptr, ##14040
040d8     F2 2C 62 FC | 	wrlong	local04, objptr
040dc     08 E4 05 F1 | 	add	objptr, #8
040e0     F2 08 68 FC | 	wrlong	#4, objptr
040e4     37 00 00 FF 
040e8     24 E4 85 F1 | 	sub	objptr, ##28196
040ec     A4 D7 9F FD | 	jmp	#LR__0070
040f0                 | LR__0204
040f0                 | LR__0205
040f0                 | LR__0206
040f0                 | ' 
040f0                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
040f0     52 00 00 FF 
040f4     B0 E4 05 F1 | 	add	objptr, ##42160
040f8     F2 2C 0A FB | 	rdlong	local04, objptr wz
040fc     52 00 00 FF 
04100     B0 E4 85 F1 | 	sub	objptr, ##42160
04104     B0 00 90 5D |  if_ne	jmp	#LR__0210
04108     02 12 06 F6 | 	mov	arg01, #2
0410c     CC 90 B0 FD | 	call	#_execute_line
04110                 | LR__0207
04110                 | '   execute_line(2)
04110                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04110     52 00 00 FF 
04114     D4 E4 05 F1 | 	add	objptr, ##42196
04118     F2 2C 0A FB | 	rdlong	local04, objptr wz
0411c     52 00 00 FF 
04120     D4 E4 85 F1 | 	sub	objptr, ##42196
04124     20 00 90 5D |  if_ne	jmp	#LR__0208
04128     AD 01 00 FF 
0412c     CD 13 06 F6 | 	mov	arg01, ##@LR__5459
04130                 | ' 
04130                 | ' write(text)
04130     48 05 B2 FD | 	call	#_hg010b_spin2_write
04134                 | ' crlf
04134     44 0A B2 FD | 	call	#_hg010b_spin2_crlf
04138     AD 01 00 FF 
0413c     CE 13 06 F6 | 	mov	arg01, ##@LR__5460
04140                 | ' 
04140                 | ' write(text)
04140     38 05 B2 FD | 	call	#_hg010b_spin2_write
04144                 | ' crlf
04144     34 0A B2 FD | 	call	#_hg010b_spin2_crlf
04148                 | LR__0208
04148                 | '     if inload=1 andalso err>0 then print fullline$
04148     52 00 00 FF 
0414c     D4 E4 05 F1 | 	add	objptr, ##42196
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     52 00 00 FF 
04158     D4 E4 85 F1 | 	sub	objptr, ##42196
0415c     01 2C 0E F2 | 	cmp	local04, #1 wz
04160     54 00 90 5D |  if_ne	jmp	#LR__0209
04164     01 26 56 F2 | 	cmps	local01, #1 wc
04168     4C 00 90 CD |  if_b	jmp	#LR__0209
0416c     00 12 06 F6 | 	mov	arg01, #0
04170     70 7A B2 FD | 	call	#__system___getiolock_0600
04174     FD 12 02 F6 | 	mov	arg01, result1
04178     C4 1D B2 FD | 	call	#__system___lockmem
0417c     37 00 00 FF 
04180     20 E4 05 F1 | 	add	objptr, ##28192
04184     F2 14 02 FB | 	rdlong	arg02, objptr
04188     37 00 00 FF 
0418c     20 E4 85 F1 | 	sub	objptr, ##28192
04190     00 12 06 F6 | 	mov	arg01, #0
04194     00 16 06 F6 | 	mov	arg03, #0
04198     9C 2A B2 FD | 	call	#__system___basic_print_string
0419c     00 12 06 F6 | 	mov	arg01, #0
041a0     0A 14 06 F6 | 	mov	arg02, #10
041a4     00 16 06 F6 | 	mov	arg03, #0
041a8     34 2A B2 FD | 	call	#__system___basic_print_char
041ac     00 12 06 F6 | 	mov	arg01, #0
041b0     30 7A B2 FD | 	call	#__system___getiolock_0600
041b4     FD 00 68 FC | 	wrlong	#0, result1
041b8                 | LR__0209
041b8                 | LR__0210
041b8     A7 F0 03 F6 | 	mov	ptra, fp
041bc     B2 00 A0 FD | 	call	#popregs_
041c0                 | _interpret_ret
041c0     2D 00 64 FD | 	ret
041c4                 | 
041c4                 | ' 
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' '
041c4                 | ' '                          END OF TOKENIZER MAIN CODE
041c4                 | ' '
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' 
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
041c4                 | ' '---------------------------------------------------------------------------------------------------------------------
041c4                 | ' 
041c4                 | ' ' Check if the part is an operator, return a token or 0 if not found
041c4                 | ' 
041c4                 | ' function isoperator(s as string) as ubyte
041c4                 | _isoperator
041c4     01 4A 05 F6 | 	mov	COUNT_, #1
041c8     A8 00 A0 FD | 	call	#pushregs_
041cc                 | ' 
041cc                 | ' select case s
041cc     09 27 02 F6 | 	mov	local01, arg01
041d0     AD 01 00 FF 
041d4     D4 15 06 F6 | 	mov	arg02, ##@LR__5461
041d8     13 13 02 F6 | 	mov	arg01, local01
041dc     88 1D B2 FD | 	call	#__system___string_cmp
041e0     00 FA 0D F2 | 	cmp	result1, #0 wz
041e4     FC 01 90 AD |  if_e	jmp	#LR__0220
041e8     AD 01 00 FF 
041ec     D6 15 06 F6 | 	mov	arg02, ##@LR__5462
041f0     13 13 02 F6 | 	mov	arg01, local01
041f4     70 1D B2 FD | 	call	#__system___string_cmp
041f8     00 FA 0D F2 | 	cmp	result1, #0 wz
041fc     EC 01 90 AD |  if_e	jmp	#LR__0221
04200     AD 01 00 FF 
04204     D8 15 06 F6 | 	mov	arg02, ##@LR__5463
04208     13 13 02 F6 | 	mov	arg01, local01
0420c     58 1D B2 FD | 	call	#__system___string_cmp
04210     00 FA 0D F2 | 	cmp	result1, #0 wz
04214     DC 01 90 AD |  if_e	jmp	#LR__0222
04218     AD 01 00 FF 
0421c     DB 15 06 F6 | 	mov	arg02, ##@LR__5464
04220     13 13 02 F6 | 	mov	arg01, local01
04224     40 1D B2 FD | 	call	#__system___string_cmp
04228     00 FA 0D F2 | 	cmp	result1, #0 wz
0422c     CC 01 90 AD |  if_e	jmp	#LR__0223
04230     AD 01 00 FF 
04234     DF 15 06 F6 | 	mov	arg02, ##@LR__5465
04238     13 13 02 F6 | 	mov	arg01, local01
0423c     28 1D B2 FD | 	call	#__system___string_cmp
04240     00 FA 0D F2 | 	cmp	result1, #0 wz
04244     BC 01 90 AD |  if_e	jmp	#LR__0224
04248     AD 01 00 FF 
0424c     E1 15 06 F6 | 	mov	arg02, ##@LR__5466
04250     13 13 02 F6 | 	mov	arg01, local01
04254     10 1D B2 FD | 	call	#__system___string_cmp
04258     00 FA 0D F2 | 	cmp	result1, #0 wz
0425c     AC 01 90 AD |  if_e	jmp	#LR__0225
04260     AD 01 00 FF 
04264     E3 15 06 F6 | 	mov	arg02, ##@LR__5467
04268     13 13 02 F6 | 	mov	arg01, local01
0426c     F8 1C B2 FD | 	call	#__system___string_cmp
04270     00 FA 0D F2 | 	cmp	result1, #0 wz
04274     9C 01 90 AD |  if_e	jmp	#LR__0226
04278     AD 01 00 FF 
0427c     E7 15 06 F6 | 	mov	arg02, ##@LR__5468
04280     13 13 02 F6 | 	mov	arg01, local01
04284     E0 1C B2 FD | 	call	#__system___string_cmp
04288     00 FA 0D F2 | 	cmp	result1, #0 wz
0428c     8C 01 90 AD |  if_e	jmp	#LR__0227
04290     AD 01 00 FF 
04294     EB 15 06 F6 | 	mov	arg02, ##@LR__5469
04298     13 13 02 F6 | 	mov	arg01, local01
0429c     C8 1C B2 FD | 	call	#__system___string_cmp
042a0     00 FA 0D F2 | 	cmp	result1, #0 wz
042a4     7C 01 90 AD |  if_e	jmp	#LR__0228
042a8     AD 01 00 FF 
042ac     EF 15 06 F6 | 	mov	arg02, ##@LR__5470
042b0     13 13 02 F6 | 	mov	arg01, local01
042b4     B0 1C B2 FD | 	call	#__system___string_cmp
042b8     00 FA 0D F2 | 	cmp	result1, #0 wz
042bc     6C 01 90 AD |  if_e	jmp	#LR__0229
042c0     AD 01 00 FF 
042c4     F3 15 06 F6 | 	mov	arg02, ##@LR__5471
042c8     13 13 02 F6 | 	mov	arg01, local01
042cc     98 1C B2 FD | 	call	#__system___string_cmp
042d0     00 FA 0D F2 | 	cmp	result1, #0 wz
042d4     5C 01 90 AD |  if_e	jmp	#LR__0230
042d8     AD 01 00 FF 
042dc     F7 15 06 F6 | 	mov	arg02, ##@LR__5472
042e0     13 13 02 F6 | 	mov	arg01, local01
042e4     80 1C B2 FD | 	call	#__system___string_cmp
042e8     00 FA 0D F2 | 	cmp	result1, #0 wz
042ec     4C 01 90 AD |  if_e	jmp	#LR__0231
042f0     AD 01 00 FF 
042f4     F9 15 06 F6 | 	mov	arg02, ##@LR__5473
042f8     13 13 02 F6 | 	mov	arg01, local01
042fc     68 1C B2 FD | 	call	#__system___string_cmp
04300     00 FA 0D F2 | 	cmp	result1, #0 wz
04304     3C 01 90 AD |  if_e	jmp	#LR__0232
04308     AD 01 00 FF 
0430c     FD 15 06 F6 | 	mov	arg02, ##@LR__5474
04310     13 13 02 F6 | 	mov	arg01, local01
04314     50 1C B2 FD | 	call	#__system___string_cmp
04318     00 FA 0D F2 | 	cmp	result1, #0 wz
0431c     2C 01 90 AD |  if_e	jmp	#LR__0233
04320     AD 01 00 FF 
04324     FF 15 06 F6 | 	mov	arg02, ##@LR__5475
04328     13 13 02 F6 | 	mov	arg01, local01
0432c     38 1C B2 FD | 	call	#__system___string_cmp
04330     00 FA 0D F2 | 	cmp	result1, #0 wz
04334     1C 01 90 AD |  if_e	jmp	#LR__0234
04338     AE 01 00 FF 
0433c     01 14 06 F6 | 	mov	arg02, ##@LR__5476
04340     13 13 02 F6 | 	mov	arg01, local01
04344     20 1C B2 FD | 	call	#__system___string_cmp
04348     00 FA 0D F2 | 	cmp	result1, #0 wz
0434c     0C 01 90 AD |  if_e	jmp	#LR__0235
04350     AE 01 00 FF 
04354     04 14 06 F6 | 	mov	arg02, ##@LR__5477
04358     13 13 02 F6 | 	mov	arg01, local01
0435c     08 1C B2 FD | 	call	#__system___string_cmp
04360     00 FA 0D F2 | 	cmp	result1, #0 wz
04364     FC 00 90 AD |  if_e	jmp	#LR__0236
04368     AE 01 00 FF 
0436c     07 14 06 F6 | 	mov	arg02, ##@LR__5478
04370     13 13 02 F6 | 	mov	arg01, local01
04374     F0 1B B2 FD | 	call	#__system___string_cmp
04378     00 FA 0D F2 | 	cmp	result1, #0 wz
0437c     EC 00 90 AD |  if_e	jmp	#LR__0237
04380     AE 01 00 FF 
04384     09 14 06 F6 | 	mov	arg02, ##@LR__5479
04388     13 13 02 F6 | 	mov	arg01, local01
0438c     D8 1B B2 FD | 	call	#__system___string_cmp
04390     00 FA 0D F2 | 	cmp	result1, #0 wz
04394     DC 00 90 AD |  if_e	jmp	#LR__0238
04398     AE 01 00 FF 
0439c     0B 14 06 F6 | 	mov	arg02, ##@LR__5480
043a0     13 13 02 F6 | 	mov	arg01, local01
043a4     C0 1B B2 FD | 	call	#__system___string_cmp
043a8     00 FA 0D F2 | 	cmp	result1, #0 wz
043ac     CC 00 90 AD |  if_e	jmp	#LR__0239
043b0     AE 01 00 FF 
043b4     0E 14 06 F6 | 	mov	arg02, ##@LR__5481
043b8     13 13 02 F6 | 	mov	arg01, local01
043bc     A8 1B B2 FD | 	call	#__system___string_cmp
043c0     00 FA 0D F2 | 	cmp	result1, #0 wz
043c4     BC 00 90 AD |  if_e	jmp	#LR__0240
043c8     AE 01 00 FF 
043cc     11 14 06 F6 | 	mov	arg02, ##@LR__5482
043d0     13 13 02 F6 | 	mov	arg01, local01
043d4     90 1B B2 FD | 	call	#__system___string_cmp
043d8     00 FA 0D F2 | 	cmp	result1, #0 wz
043dc     AC 00 90 AD |  if_e	jmp	#LR__0241
043e0     B0 00 90 FD | 	jmp	#LR__0242
043e4                 | LR__0220
043e4     01 FA 05 F6 | 	mov	result1, #1
043e8     AC 00 90 FD | 	jmp	#LR__0243
043ec                 | LR__0221
043ec     02 FA 05 F6 | 	mov	result1, #2
043f0     A4 00 90 FD | 	jmp	#LR__0243
043f4                 | LR__0222
043f4     03 FA 05 F6 | 	mov	result1, #3
043f8     9C 00 90 FD | 	jmp	#LR__0243
043fc                 | LR__0223
043fc     04 FA 05 F6 | 	mov	result1, #4
04400     94 00 90 FD | 	jmp	#LR__0243
04404                 | LR__0224
04404     05 FA 05 F6 | 	mov	result1, #5
04408     8C 00 90 FD | 	jmp	#LR__0243
0440c                 | LR__0225
0440c     06 FA 05 F6 | 	mov	result1, #6
04410     84 00 90 FD | 	jmp	#LR__0243
04414                 | LR__0226
04414     07 FA 05 F6 | 	mov	result1, #7
04418     7C 00 90 FD | 	jmp	#LR__0243
0441c                 | LR__0227
0441c     08 FA 05 F6 | 	mov	result1, #8
04420     74 00 90 FD | 	jmp	#LR__0243
04424                 | LR__0228
04424     09 FA 05 F6 | 	mov	result1, #9
04428     6C 00 90 FD | 	jmp	#LR__0243
0442c                 | LR__0229
0442c     0A FA 05 F6 | 	mov	result1, #10
04430     64 00 90 FD | 	jmp	#LR__0243
04434                 | LR__0230
04434     0B FA 05 F6 | 	mov	result1, #11
04438     5C 00 90 FD | 	jmp	#LR__0243
0443c                 | LR__0231
0443c     0C FA 05 F6 | 	mov	result1, #12
04440     54 00 90 FD | 	jmp	#LR__0243
04444                 | LR__0232
04444     0D FA 05 F6 | 	mov	result1, #13
04448     4C 00 90 FD | 	jmp	#LR__0243
0444c                 | LR__0233
0444c     0E FA 05 F6 | 	mov	result1, #14
04450     44 00 90 FD | 	jmp	#LR__0243
04454                 | LR__0234
04454     1B FA 05 F6 | 	mov	result1, #27
04458     3C 00 90 FD | 	jmp	#LR__0243
0445c                 | LR__0235
0445c     27 FA 05 F6 | 	mov	result1, #39
04460     34 00 90 FD | 	jmp	#LR__0243
04464                 | LR__0236
04464     26 FA 05 F6 | 	mov	result1, #38
04468     2C 00 90 FD | 	jmp	#LR__0243
0446c                 | LR__0237
0446c     10 FA 05 F6 | 	mov	result1, #16
04470     24 00 90 FD | 	jmp	#LR__0243
04474                 | LR__0238
04474     0F FA 05 F6 | 	mov	result1, #15
04478     1C 00 90 FD | 	jmp	#LR__0243
0447c                 | LR__0239
0447c     2A FA 05 F6 | 	mov	result1, #42
04480     14 00 90 FD | 	jmp	#LR__0243
04484                 | LR__0240
04484     28 FA 05 F6 | 	mov	result1, #40
04488     0C 00 90 FD | 	jmp	#LR__0243
0448c                 | LR__0241
0448c     29 FA 05 F6 | 	mov	result1, #41
04490     04 00 90 FD | 	jmp	#LR__0243
04494                 | LR__0242
04494     00 FA 05 F6 | 	mov	result1, #0
04498                 | LR__0243
04498     A7 F0 03 F6 | 	mov	ptra, fp
0449c     B2 00 A0 FD | 	call	#popregs_
044a0                 | _isoperator_ret
044a0     2D 00 64 FD | 	ret
044a4                 | 
044a4                 | ' 
044a4                 | ' ' Check if the part is a channel#, return a token or 0 if not found
044a4                 | ' 
044a4                 | ' function ischannel(s as string) as ulong
044a4                 | _ischannel
044a4     02 4A 05 F6 | 	mov	COUNT_, #2
044a8     A8 00 A0 FD | 	call	#pushregs_
044ac                 | ' if left$(s,1)<>"#" then return 0
044ac     09 27 02 F6 | 	mov	local01, arg01
044b0     01 14 06 F6 | 	mov	arg02, #1
044b4     08 3B B2 FD | 	call	#__system__Left_S
044b8     FD 12 02 F6 | 	mov	arg01, result1
044bc     AE 01 00 FF 
044c0     14 14 06 F6 | 	mov	arg02, ##@LR__5483
044c4     A0 1A B2 FD | 	call	#__system___string_cmp
044c8     00 FA 0D F2 | 	cmp	result1, #0 wz
044cc     00 FA 05 56 |  if_ne	mov	result1, #0
044d0     AC 00 90 5D |  if_ne	jmp	#LR__0254
044d4                 | ' if len(s)<>2 then return 0
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     09 29 02 F6 | 	mov	local02, arg01
044dc     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
044e0                 | LR__0250
044e0     14 FB C9 FA | 	rdbyte	result1, local02 wz
044e4     01 28 06 51 |  if_ne	add	local02, #1
044e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
044ec                 | LR__0251
044ec     09 29 82 F1 | 	sub	local02, arg01
044f0     14 FB 01 F6 | 	mov	result1, local02
044f4     02 FA 0D F2 | 	cmp	result1, #2 wz
044f8     00 FA 05 56 |  if_ne	mov	result1, #0
044fc     80 00 90 5D |  if_ne	jmp	#LR__0254
04500                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04500     13 13 02 F6 | 	mov	arg01, local01
04504     01 14 06 F6 | 	mov	arg02, #1
04508     3C 3B B2 FD | 	call	#__system__Right_S
0450c     FD 12 02 F6 | 	mov	arg01, result1
04510     AE 01 00 FF 
04514     16 14 06 F6 | 	mov	arg02, ##@LR__5484
04518     4C 1A B2 FD | 	call	#__system___string_cmp
0451c     00 FA 55 F2 | 	cmps	result1, #0 wc
04520     24 00 90 CD |  if_b	jmp	#LR__0252
04524     13 13 02 F6 | 	mov	arg01, local01
04528     01 14 06 F6 | 	mov	arg02, #1
0452c     18 3B B2 FD | 	call	#__system__Right_S
04530     FD 12 02 F6 | 	mov	arg01, result1
04534     AE 01 00 FF 
04538     18 14 06 F6 | 	mov	arg02, ##@LR__5485
0453c     28 1A B2 FD | 	call	#__system___string_cmp
04540     01 FA 55 F2 | 	cmps	result1, #1 wc
04544     08 00 90 CD |  if_b	jmp	#LR__0253
04548                 | LR__0252
04548     00 FA 05 F6 | 	mov	result1, #0
0454c     30 00 90 FD | 	jmp	#LR__0254
04550                 | LR__0253
04550                 | ' return token_channel+val(right$(s,1))
04550     13 13 02 F6 | 	mov	arg01, local01
04554     01 14 06 F6 | 	mov	arg02, #1
04558     EC 3A B2 FD | 	call	#__system__Right_S
0455c     FD 12 02 F6 | 	mov	arg01, result1
04560     64 50 B2 FD | 	call	#__system____builtin_atof
04564     FD 14 02 F6 | 	mov	arg02, result1
04568     00 18 21 FF 
0456c     00 12 06 F6 | 	mov	arg01, ##1110441984
04570     78 44 B2 FD | 	call	#__system___float_add
04574     FD 12 02 F6 | 	mov	arg01, result1
04578     00 14 06 F6 | 	mov	arg02, #0
0457c     04 4D B2 FD | 	call	#__system___float_tointeger
04580                 | LR__0254
04580     A7 F0 03 F6 | 	mov	ptra, fp
04584     B2 00 A0 FD | 	call	#popregs_
04588                 | _ischannel_ret
04588     2D 00 64 FD | 	ret
0458c                 | 
0458c                 | ' 
0458c                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
0458c                 | ' ' todo: add spin2/pasm constants for pin control
0458c                 | ' 
0458c                 | ' function isconstant(s as string) as integer
0458c                 | _isconstant
0458c     01 4A 05 F6 | 	mov	COUNT_, #1
04590     A8 00 A0 FD | 	call	#pushregs_
04594                 | ' 
04594                 | ' select case s
04594     09 27 02 F6 | 	mov	local01, arg01
04598     AE 01 00 FF 
0459c     1A 14 06 F6 | 	mov	arg02, ##@LR__5486
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     C0 19 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     34 00 90 AD |  if_e	jmp	#LR__0260
045b0     AE 01 00 FF 
045b4     20 14 06 F6 | 	mov	arg02, ##@LR__5487
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     A8 19 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     24 00 90 AD |  if_e	jmp	#LR__0261
045c8     AE 01 00 FF 
045cc     27 14 06 F6 | 	mov	arg02, ##@LR__5488
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     90 19 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     14 00 90 AD |  if_e	jmp	#LR__0262
045e0     18 00 90 FD | 	jmp	#LR__0263
045e4                 | LR__0260
045e4     01 FA 05 F6 | 	mov	result1, #1
045e8     14 00 90 FD | 	jmp	#LR__0264
045ec                 | LR__0261
045ec     02 FA 05 F6 | 	mov	result1, #2
045f0     0C 00 90 FD | 	jmp	#LR__0264
045f4                 | LR__0262
045f4     04 FA 05 F6 | 	mov	result1, #4
045f8     04 00 90 FD | 	jmp	#LR__0264
045fc                 | LR__0263
045fc     00 FA 05 F6 | 	mov	result1, #0
04600                 | LR__0264
04600     A7 F0 03 F6 | 	mov	ptra, fp
04604     B2 00 A0 FD | 	call	#popregs_
04608                 | _isconstant_ret
04608     2D 00 64 FD | 	ret
0460c                 | 
0460c                 | ' 
0460c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0460c                 | ' 
0460c                 | ' function isnotename(s as string) as ulong
0460c                 | _isnotename
0460c     07 4A 05 F6 | 	mov	COUNT_, #7
04610     A8 00 A0 FD | 	call	#pushregs_
04614                 | ' if left$(s,1)<>"#" then return 0
04614     09 27 02 F6 | 	mov	local01, arg01
04618     01 14 06 F6 | 	mov	arg02, #1
0461c     A0 39 B2 FD | 	call	#__system__Left_S
04620     FD 12 02 F6 | 	mov	arg01, result1
04624     AE 01 00 FF 
04628     2F 14 06 F6 | 	mov	arg02, ##@LR__5489
0462c     38 19 B2 FD | 	call	#__system___string_cmp
04630     00 FA 0D F2 | 	cmp	result1, #0 wz
04634     00 FA 05 56 |  if_ne	mov	result1, #0
04638     30 03 90 5D |  if_ne	jmp	#LR__0293
0463c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0463c     13 13 02 F6 | 	mov	arg01, local01
04640     03 14 06 F6 | 	mov	arg02, #3
04644     01 16 06 F6 | 	mov	arg03, #1
04648     8C 3A B2 FD | 	call	#__system__Mid_S
0464c     FD 12 02 F6 | 	mov	arg01, result1
04650     AE 01 00 FF 
04654     31 14 06 F6 | 	mov	arg02, ##@LR__5490
04658     0C 19 B2 FD | 	call	#__system___string_cmp
0465c     00 FA 0D F2 | 	cmp	result1, #0 wz
04660     18 00 90 5D |  if_ne	jmp	#LR__0270
04664     13 13 02 F6 | 	mov	arg01, local01
04668     02 14 06 F6 | 	mov	arg02, #2
0466c     02 16 06 F6 | 	mov	arg03, #2
04670     64 3A B2 FD | 	call	#__system__Mid_S
04674     FD 28 02 F6 | 	mov	local02, result1
04678     14 00 90 FD | 	jmp	#LR__0271
0467c                 | LR__0270
0467c     13 13 02 F6 | 	mov	arg01, local01
04680     02 14 06 F6 | 	mov	arg02, #2
04684     01 16 06 F6 | 	mov	arg03, #1
04688     4C 3A B2 FD | 	call	#__system__Mid_S
0468c     FD 28 02 F6 | 	mov	local02, result1
04690                 | LR__0271
04690                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
04690     13 13 02 F6 | 	mov	arg01, local01
04694     09 2B 02 F6 | 	mov	local03, arg01
04698     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
0469c                 | LR__0272
0469c     15 FB C9 FA | 	rdbyte	result1, local03 wz
046a0     01 2A 06 51 |  if_ne	add	local03, #1
046a4     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
046a8                 | LR__0273
046a8     09 2B 82 F1 | 	sub	local03, arg01
046ac     15 15 02 F6 | 	mov	arg02, local03
046b0     01 14 86 F1 | 	sub	arg02, #1
046b4     13 13 02 F6 | 	mov	arg01, local01
046b8     01 16 06 F6 | 	mov	arg03, #1
046bc     18 3A B2 FD | 	call	#__system__Mid_S
046c0     FD 12 02 F6 | 	mov	arg01, result1
046c4     AE 01 00 FF 
046c8     33 14 06 F6 | 	mov	arg02, ##@LR__5491
046cc     98 18 B2 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     28 00 90 AD |  if_e	jmp	#LR__0274
046d8     13 13 02 F6 | 	mov	arg01, local01
046dc     01 14 06 F6 | 	mov	arg02, #1
046e0     64 39 B2 FD | 	call	#__system__Right_S
046e4     FD 12 02 F6 | 	mov	arg01, result1
046e8     DC 4E B2 FD | 	call	#__system____builtin_atof
046ec     FD 12 02 F6 | 	mov	arg01, result1
046f0     00 14 06 F6 | 	mov	arg02, #0
046f4     8C 4B B2 FD | 	call	#__system___float_tointeger
046f8     FD 2C 02 F6 | 	mov	local04, result1
046fc     34 00 90 FD | 	jmp	#LR__0275
04700                 | LR__0274
04700     13 13 02 F6 | 	mov	arg01, local01
04704     01 14 06 F6 | 	mov	arg02, #1
04708     3C 39 B2 FD | 	call	#__system__Right_S
0470c     FD 12 02 F6 | 	mov	arg01, result1
04710     B4 4E B2 FD | 	call	#__system____builtin_atof
04714     FD 14 02 F6 | 	mov	arg02, result1
04718     00 C0 5F FF 
0471c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04720     98 46 B2 FD | 	call	#__system___float_mul
04724     FD 12 02 F6 | 	mov	arg01, result1
04728     00 14 06 F6 | 	mov	arg02, #0
0472c     54 4B B2 FD | 	call	#__system___float_tointeger
04730     FD 2C 02 F6 | 	mov	local04, result1
04734                 | LR__0275
04734                 | ' 
04734                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04734     00 2C 0E F2 | 	cmp	local04, #0 wz
04738     24 00 90 5D |  if_ne	jmp	#LR__0276
0473c     13 13 02 F6 | 	mov	arg01, local01
04740     01 14 06 F6 | 	mov	arg02, #1
04744     00 39 B2 FD | 	call	#__system__Right_S
04748     FD 12 02 F6 | 	mov	arg01, result1
0474c     AE 01 00 FF 
04750     35 14 06 F6 | 	mov	arg02, ##@LR__5492
04754     10 18 B2 FD | 	call	#__system___string_cmp
04758     00 FA 0D F2 | 	cmp	result1, #0 wz
0475c     04 2C 06 56 |  if_ne	mov	local04, #4
04760                 | LR__0276
04760                 | ' 
04760                 | ' select case s1
04760     14 2F 02 F6 | 	mov	local05, local02
04764     AE 01 00 FF 
04768     37 14 06 F6 | 	mov	arg02, ##@LR__5493
0476c     17 13 02 F6 | 	mov	arg01, local05
04770     F4 17 B2 FD | 	call	#__system___string_cmp
04774     00 FA 0D F2 | 	cmp	result1, #0 wz
04778     24 01 90 AD |  if_e	jmp	#LR__0277
0477c     AE 01 00 FF 
04780     39 14 06 F6 | 	mov	arg02, ##@LR__5494
04784     17 13 02 F6 | 	mov	arg01, local05
04788     DC 17 B2 FD | 	call	#__system___string_cmp
0478c     00 FA 0D F2 | 	cmp	result1, #0 wz
04790     18 01 90 AD |  if_e	jmp	#LR__0278
04794     AE 01 00 FF 
04798     3C 14 06 F6 | 	mov	arg02, ##@LR__5495
0479c     17 13 02 F6 | 	mov	arg01, local05
047a0     C4 17 B2 FD | 	call	#__system___string_cmp
047a4     00 FA 0D F2 | 	cmp	result1, #0 wz
047a8     0C 01 90 AD |  if_e	jmp	#LR__0279
047ac     AE 01 00 FF 
047b0     3E 14 06 F6 | 	mov	arg02, ##@LR__5496
047b4     17 13 02 F6 | 	mov	arg01, local05
047b8     AC 17 B2 FD | 	call	#__system___string_cmp
047bc     00 FA 0D F2 | 	cmp	result1, #0 wz
047c0     00 01 90 AD |  if_e	jmp	#LR__0280
047c4     AE 01 00 FF 
047c8     41 14 06 F6 | 	mov	arg02, ##@LR__5497
047cc     17 13 02 F6 | 	mov	arg01, local05
047d0     94 17 B2 FD | 	call	#__system___string_cmp
047d4     00 FA 0D F2 | 	cmp	result1, #0 wz
047d8     F4 00 90 AD |  if_e	jmp	#LR__0281
047dc     AE 01 00 FF 
047e0     43 14 06 F6 | 	mov	arg02, ##@LR__5498
047e4     17 13 02 F6 | 	mov	arg01, local05
047e8     7C 17 B2 FD | 	call	#__system___string_cmp
047ec     00 FA 0D F2 | 	cmp	result1, #0 wz
047f0     E8 00 90 AD |  if_e	jmp	#LR__0282
047f4     AE 01 00 FF 
047f8     45 14 06 F6 | 	mov	arg02, ##@LR__5499
047fc     17 13 02 F6 | 	mov	arg01, local05
04800     64 17 B2 FD | 	call	#__system___string_cmp
04804     00 FA 0D F2 | 	cmp	result1, #0 wz
04808     DC 00 90 AD |  if_e	jmp	#LR__0283
0480c     AE 01 00 FF 
04810     48 14 06 F6 | 	mov	arg02, ##@LR__5500
04814     17 13 02 F6 | 	mov	arg01, local05
04818     4C 17 B2 FD | 	call	#__system___string_cmp
0481c     00 FA 0D F2 | 	cmp	result1, #0 wz
04820     D0 00 90 AD |  if_e	jmp	#LR__0284
04824     AE 01 00 FF 
04828     4A 14 06 F6 | 	mov	arg02, ##@LR__5501
0482c     17 13 02 F6 | 	mov	arg01, local05
04830     34 17 B2 FD | 	call	#__system___string_cmp
04834     00 FA 0D F2 | 	cmp	result1, #0 wz
04838     C4 00 90 AD |  if_e	jmp	#LR__0285
0483c     AE 01 00 FF 
04840     4D 14 06 F6 | 	mov	arg02, ##@LR__5502
04844     17 13 02 F6 | 	mov	arg01, local05
04848     1C 17 B2 FD | 	call	#__system___string_cmp
0484c     00 FA 0D F2 | 	cmp	result1, #0 wz
04850     B8 00 90 AD |  if_e	jmp	#LR__0286
04854     AE 01 00 FF 
04858     4F 14 06 F6 | 	mov	arg02, ##@LR__5503
0485c     17 13 02 F6 | 	mov	arg01, local05
04860     04 17 B2 FD | 	call	#__system___string_cmp
04864     00 FA 0D F2 | 	cmp	result1, #0 wz
04868     AC 00 90 AD |  if_e	jmp	#LR__0287
0486c     AE 01 00 FF 
04870     52 14 06 F6 | 	mov	arg02, ##@LR__5504
04874     17 13 02 F6 | 	mov	arg01, local05
04878     EC 16 B2 FD | 	call	#__system___string_cmp
0487c     00 FA 0D F2 | 	cmp	result1, #0 wz
04880     A0 00 90 AD |  if_e	jmp	#LR__0288
04884     AE 01 00 FF 
04888     54 14 06 F6 | 	mov	arg02, ##@LR__5505
0488c     17 13 02 F6 | 	mov	arg01, local05
04890     D4 16 B2 FD | 	call	#__system___string_cmp
04894     00 FA 0D F2 | 	cmp	result1, #0 wz
04898     94 00 90 AD |  if_e	jmp	#LR__0289
0489c     9C 00 90 FD | 	jmp	#LR__0290
048a0                 | LR__0277
048a0     01 00 00 FF 
048a4     00 31 06 F6 | 	mov	local06, ##768
048a8     98 00 90 FD | 	jmp	#LR__0291
048ac                 | LR__0278
048ac     01 00 00 FF 
048b0     01 31 06 F6 | 	mov	local06, ##769
048b4     8C 00 90 FD | 	jmp	#LR__0291
048b8                 | LR__0279
048b8     01 00 00 FF 
048bc     02 31 06 F6 | 	mov	local06, ##770
048c0     80 00 90 FD | 	jmp	#LR__0291
048c4                 | LR__0280
048c4     01 00 00 FF 
048c8     03 31 06 F6 | 	mov	local06, ##771
048cc     74 00 90 FD | 	jmp	#LR__0291
048d0                 | LR__0281
048d0     01 00 00 FF 
048d4     04 31 06 F6 | 	mov	local06, ##772
048d8     68 00 90 FD | 	jmp	#LR__0291
048dc                 | LR__0282
048dc     01 00 00 FF 
048e0     05 31 06 F6 | 	mov	local06, ##773
048e4     5C 00 90 FD | 	jmp	#LR__0291
048e8                 | LR__0283
048e8     01 00 00 FF 
048ec     06 31 06 F6 | 	mov	local06, ##774
048f0     50 00 90 FD | 	jmp	#LR__0291
048f4                 | LR__0284
048f4     01 00 00 FF 
048f8     07 31 06 F6 | 	mov	local06, ##775
048fc     44 00 90 FD | 	jmp	#LR__0291
04900                 | LR__0285
04900     01 00 00 FF 
04904     08 31 06 F6 | 	mov	local06, ##776
04908     38 00 90 FD | 	jmp	#LR__0291
0490c                 | LR__0286
0490c     01 00 00 FF 
04910     09 31 06 F6 | 	mov	local06, ##777
04914     2C 00 90 FD | 	jmp	#LR__0291
04918                 | LR__0287
04918     01 00 00 FF 
0491c     0A 31 06 F6 | 	mov	local06, ##778
04920     20 00 90 FD | 	jmp	#LR__0291
04924                 | LR__0288
04924     01 00 00 FF 
04928     0B 31 06 F6 | 	mov	local06, ##779
0492c     14 00 90 FD | 	jmp	#LR__0291
04930                 | LR__0289
04930     01 00 00 FF 
04934     0B 31 06 F6 | 	mov	local06, ##779
04938     08 00 90 FD | 	jmp	#LR__0291
0493c                 | LR__0290
0493c     00 FA 05 F6 | 	mov	result1, #0
04940     28 00 90 FD | 	jmp	#LR__0293
04944                 | LR__0291
04944                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04944     FF FF 7F FF 
04948     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
0494c     18 00 90 CD |  if_b	jmp	#LR__0292
04950     0A 2C 56 F2 | 	cmps	local04, #10 wc
04954     16 33 02 C6 |  if_b	mov	local07, local04
04958     01 32 66 C0 |  if_b	shl	local07, #1
0495c     16 33 02 C1 |  if_b	add	local07, local04
04960     02 32 66 C0 |  if_b	shl	local07, #2
04964     19 31 02 C1 |  if_b	add	local06, local07
04968                 | LR__0292
04968                 | ' return token
04968     18 FB 01 F6 | 	mov	result1, local06
0496c                 | LR__0293
0496c     A7 F0 03 F6 | 	mov	ptra, fp
04970     B2 00 A0 FD | 	call	#popregs_
04974                 | _isnotename_ret
04974     2D 00 64 FD | 	ret
04978                 | 
04978                 | ' 
04978                 | ' ' Check if the part is a separator, return a token or 0 if not found
04978                 | ' 
04978                 | ' function isseparator(s as string) as ubyte
04978                 | _isseparator
04978     01 4A 05 F6 | 	mov	COUNT_, #1
0497c     A8 00 A0 FD | 	call	#pushregs_
04980                 | ' 
04980                 | ' select case s
04980     09 27 02 F6 | 	mov	local01, arg01
04984     AE 01 00 FF 
04988     56 14 06 F6 | 	mov	arg02, ##@LR__5506
0498c     13 13 02 F6 | 	mov	arg01, local01
04990     D4 15 B2 FD | 	call	#__system___string_cmp
04994     00 FA 0D F2 | 	cmp	result1, #0 wz
04998     54 01 90 AD |  if_e	jmp	#LR__0300
0499c     AE 01 00 FF 
049a0     58 14 06 F6 | 	mov	arg02, ##@LR__5507
049a4     13 13 02 F6 | 	mov	arg01, local01
049a8     BC 15 B2 FD | 	call	#__system___string_cmp
049ac     00 FA 0D F2 | 	cmp	result1, #0 wz
049b0     44 01 90 AD |  if_e	jmp	#LR__0301
049b4     AE 01 00 FF 
049b8     5A 14 06 F6 | 	mov	arg02, ##@LR__5508
049bc     13 13 02 F6 | 	mov	arg01, local01
049c0     A4 15 B2 FD | 	call	#__system___string_cmp
049c4     00 FA 0D F2 | 	cmp	result1, #0 wz
049c8     34 01 90 AD |  if_e	jmp	#LR__0302
049cc     AE 01 00 FF 
049d0     5C 14 06 F6 | 	mov	arg02, ##@LR__5509
049d4     13 13 02 F6 | 	mov	arg01, local01
049d8     8C 15 B2 FD | 	call	#__system___string_cmp
049dc     00 FA 0D F2 | 	cmp	result1, #0 wz
049e0     24 01 90 AD |  if_e	jmp	#LR__0303
049e4     AE 01 00 FF 
049e8     5E 14 06 F6 | 	mov	arg02, ##@LR__5510
049ec     13 13 02 F6 | 	mov	arg01, local01
049f0     74 15 B2 FD | 	call	#__system___string_cmp
049f4     00 FA 0D F2 | 	cmp	result1, #0 wz
049f8     14 01 90 AD |  if_e	jmp	#LR__0304
049fc     AE 01 00 FF 
04a00     60 14 06 F6 | 	mov	arg02, ##@LR__5511
04a04     13 13 02 F6 | 	mov	arg01, local01
04a08     5C 15 B2 FD | 	call	#__system___string_cmp
04a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a10     04 01 90 AD |  if_e	jmp	#LR__0305
04a14     AE 01 00 FF 
04a18     62 14 06 F6 | 	mov	arg02, ##@LR__5512
04a1c     13 13 02 F6 | 	mov	arg01, local01
04a20     44 15 B2 FD | 	call	#__system___string_cmp
04a24     00 FA 0D F2 | 	cmp	result1, #0 wz
04a28     F4 00 90 AD |  if_e	jmp	#LR__0306
04a2c     AE 01 00 FF 
04a30     64 14 06 F6 | 	mov	arg02, ##@LR__5513
04a34     13 13 02 F6 | 	mov	arg01, local01
04a38     2C 15 B2 FD | 	call	#__system___string_cmp
04a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a40     E4 00 90 AD |  if_e	jmp	#LR__0307
04a44     AE 01 00 FF 
04a48     66 14 06 F6 | 	mov	arg02, ##@LR__5514
04a4c     13 13 02 F6 | 	mov	arg01, local01
04a50     14 15 B2 FD | 	call	#__system___string_cmp
04a54     00 FA 0D F2 | 	cmp	result1, #0 wz
04a58     D4 00 90 AD |  if_e	jmp	#LR__0308
04a5c     AE 01 00 FF 
04a60     68 14 06 F6 | 	mov	arg02, ##@LR__5515
04a64     13 13 02 F6 | 	mov	arg01, local01
04a68     FC 14 B2 FD | 	call	#__system___string_cmp
04a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a70     C4 00 90 AD |  if_e	jmp	#LR__0309
04a74     AE 01 00 FF 
04a78     6A 14 06 F6 | 	mov	arg02, ##@LR__5516
04a7c     13 13 02 F6 | 	mov	arg01, local01
04a80     E4 14 B2 FD | 	call	#__system___string_cmp
04a84     00 FA 0D F2 | 	cmp	result1, #0 wz
04a88     B4 00 90 AD |  if_e	jmp	#LR__0310
04a8c     AE 01 00 FF 
04a90     6C 14 06 F6 | 	mov	arg02, ##@LR__5517
04a94     13 13 02 F6 | 	mov	arg01, local01
04a98     CC 14 B2 FD | 	call	#__system___string_cmp
04a9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04aa0     A4 00 90 AD |  if_e	jmp	#LR__0311
04aa4     AE 01 00 FF 
04aa8     6E 14 06 F6 | 	mov	arg02, ##@LR__5518
04aac     13 13 02 F6 | 	mov	arg01, local01
04ab0     B4 14 B2 FD | 	call	#__system___string_cmp
04ab4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab8     94 00 90 AD |  if_e	jmp	#LR__0312
04abc     AE 01 00 FF 
04ac0     70 14 06 F6 | 	mov	arg02, ##@LR__5519
04ac4     13 13 02 F6 | 	mov	arg01, local01
04ac8     9C 14 B2 FD | 	call	#__system___string_cmp
04acc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ad0     84 00 90 AD |  if_e	jmp	#LR__0313
04ad4     AE 01 00 FF 
04ad8     72 14 06 F6 | 	mov	arg02, ##@LR__5520
04adc     13 13 02 F6 | 	mov	arg01, local01
04ae0     84 14 B2 FD | 	call	#__system___string_cmp
04ae4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae8     74 00 90 AD |  if_e	jmp	#LR__0314
04aec     78 00 90 FD | 	jmp	#LR__0315
04af0                 | LR__0300
04af0     01 FA 05 F6 | 	mov	result1, #1
04af4     74 00 90 FD | 	jmp	#LR__0316
04af8                 | LR__0301
04af8     02 FA 05 F6 | 	mov	result1, #2
04afc     6C 00 90 FD | 	jmp	#LR__0316
04b00                 | LR__0302
04b00     1B FA 05 F6 | 	mov	result1, #27
04b04     64 00 90 FD | 	jmp	#LR__0316
04b08                 | LR__0303
04b08     11 FA 05 F6 | 	mov	result1, #17
04b0c     5C 00 90 FD | 	jmp	#LR__0316
04b10                 | LR__0304
04b10     05 FA 05 F6 | 	mov	result1, #5
04b14     54 00 90 FD | 	jmp	#LR__0316
04b18                 | LR__0305
04b18     06 FA 05 F6 | 	mov	result1, #6
04b1c     4C 00 90 FD | 	jmp	#LR__0316
04b20                 | LR__0306
04b20     12 FA 05 F6 | 	mov	result1, #18
04b24     44 00 90 FD | 	jmp	#LR__0316
04b28                 | LR__0307
04b28     13 FA 05 F6 | 	mov	result1, #19
04b2c     3C 00 90 FD | 	jmp	#LR__0316
04b30                 | LR__0308
04b30     0C FA 05 F6 | 	mov	result1, #12
04b34     34 00 90 FD | 	jmp	#LR__0316
04b38                 | LR__0309
04b38     14 FA 05 F6 | 	mov	result1, #20
04b3c     2C 00 90 FD | 	jmp	#LR__0316
04b40                 | LR__0310
04b40     15 FA 05 F6 | 	mov	result1, #21
04b44     24 00 90 FD | 	jmp	#LR__0316
04b48                 | LR__0311
04b48     16 FA 05 F6 | 	mov	result1, #22
04b4c     1C 00 90 FD | 	jmp	#LR__0316
04b50                 | LR__0312
04b50     FF FB 05 F6 | 	mov	result1, #511
04b54     14 00 90 FD | 	jmp	#LR__0316
04b58                 | LR__0313
04b58     0F FA 05 F6 | 	mov	result1, #15
04b5c     0C 00 90 FD | 	jmp	#LR__0316
04b60                 | LR__0314
04b60     10 FA 05 F6 | 	mov	result1, #16
04b64     04 00 90 FD | 	jmp	#LR__0316
04b68                 | LR__0315
04b68     00 FA 05 F6 | 	mov	result1, #0
04b6c                 | LR__0316
04b6c     A7 F0 03 F6 | 	mov	ptra, fp
04b70     B2 00 A0 FD | 	call	#popregs_
04b74                 | _isseparator_ret
04b74     2D 00 64 FD | 	ret
04b78                 | 
04b78                 | ' 
04b78                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04b78                 | ' 
04b78                 | ' function iscommand(s as string) as ubyte
04b78                 | _iscommand
04b78     01 4A 05 F6 | 	mov	COUNT_, #1
04b7c     A8 00 A0 FD | 	call	#pushregs_
04b80                 | ' 
04b80                 | ' select case s
04b80     09 27 02 F6 | 	mov	local01, arg01
04b84     AE 01 00 FF 
04b88     76 14 06 F6 | 	mov	arg02, ##@LR__5522
04b8c     13 13 02 F6 | 	mov	arg01, local01
04b90     D4 13 B2 FD | 	call	#__system___string_cmp
04b94     00 FA 0D F2 | 	cmp	result1, #0 wz
04b98     7C 0C 90 AD |  if_e	jmp	#LR__0320
04b9c     AE 01 00 FF 
04ba0     7B 14 06 F6 | 	mov	arg02, ##@LR__5523
04ba4     13 13 02 F6 | 	mov	arg01, local01
04ba8     BC 13 B2 FD | 	call	#__system___string_cmp
04bac     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb0     6C 0C 90 AD |  if_e	jmp	#LR__0321
04bb4     AE 01 00 FF 
04bb8     7E 14 06 F6 | 	mov	arg02, ##@LR__5524
04bbc     13 13 02 F6 | 	mov	arg01, local01
04bc0     A4 13 B2 FD | 	call	#__system___string_cmp
04bc4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bc8     5C 0C 90 AD |  if_e	jmp	#LR__0322
04bcc     AE 01 00 FF 
04bd0     83 14 06 F6 | 	mov	arg02, ##@LR__5525
04bd4     13 13 02 F6 | 	mov	arg01, local01
04bd8     8C 13 B2 FD | 	call	#__system___string_cmp
04bdc     00 FA 0D F2 | 	cmp	result1, #0 wz
04be0     4C 0C 90 AD |  if_e	jmp	#LR__0323
04be4     AE 01 00 FF 
04be8     87 14 06 F6 | 	mov	arg02, ##@LR__5526
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     74 13 B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     3C 0C 90 AD |  if_e	jmp	#LR__0324
04bfc     AE 01 00 FF 
04c00     8C 14 06 F6 | 	mov	arg02, ##@LR__5527
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     5C 13 B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     2C 0C 90 AD |  if_e	jmp	#LR__0325
04c14     AE 01 00 FF 
04c18     90 14 06 F6 | 	mov	arg02, ##@LR__5528
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     44 13 B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     1C 0C 90 AD |  if_e	jmp	#LR__0326
04c2c     AE 01 00 FF 
04c30     93 14 06 F6 | 	mov	arg02, ##@LR__5529
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     2C 13 B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     0C 0C 90 AD |  if_e	jmp	#LR__0327
04c44     AE 01 00 FF 
04c48     9E 14 06 F6 | 	mov	arg02, ##@LR__5530
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     14 13 B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     FC 0B 90 AD |  if_e	jmp	#LR__0328
04c5c     AE 01 00 FF 
04c60     A2 14 06 F6 | 	mov	arg02, ##@LR__5531
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     FC 12 B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     EC 0B 90 AD |  if_e	jmp	#LR__0329
04c74     AE 01 00 FF 
04c78     AC 14 06 F6 | 	mov	arg02, ##@LR__5532
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     E4 12 B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     DC 0B 90 AD |  if_e	jmp	#LR__0330
04c8c     AE 01 00 FF 
04c90     B0 14 06 F6 | 	mov	arg02, ##@LR__5533
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     CC 12 B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     CC 0B 90 AD |  if_e	jmp	#LR__0331
04ca4     AE 01 00 FF 
04ca8     BA 14 06 F6 | 	mov	arg02, ##@LR__5534
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     B4 12 B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     BC 0B 90 AD |  if_e	jmp	#LR__0332
04cbc     AE 01 00 FF 
04cc0     BE 14 06 F6 | 	mov	arg02, ##@LR__5535
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     9C 12 B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     AC 0B 90 AD |  if_e	jmp	#LR__0333
04cd4     AE 01 00 FF 
04cd8     C9 14 06 F6 | 	mov	arg02, ##@LR__5536
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     84 12 B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     9C 0B 90 AD |  if_e	jmp	#LR__0334
04cec     AE 01 00 FF 
04cf0     CD 14 06 F6 | 	mov	arg02, ##@LR__5537
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     6C 12 B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     8C 0B 90 AD |  if_e	jmp	#LR__0335
04d04     AE 01 00 FF 
04d08     D4 14 06 F6 | 	mov	arg02, ##@LR__5538
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     54 12 B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     7C 0B 90 AD |  if_e	jmp	#LR__0336
04d1c     AE 01 00 FF 
04d20     D8 14 06 F6 | 	mov	arg02, ##@LR__5539
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     3C 12 B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     6C 0B 90 AD |  if_e	jmp	#LR__0337
04d34     AE 01 00 FF 
04d38     DE 14 06 F6 | 	mov	arg02, ##@LR__5540
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     24 12 B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     5C 0B 90 AD |  if_e	jmp	#LR__0338
04d4c     AE 01 00 FF 
04d50     E4 14 06 F6 | 	mov	arg02, ##@LR__5541
04d54     13 13 02 F6 | 	mov	arg01, local01
04d58     0C 12 B2 FD | 	call	#__system___string_cmp
04d5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d60     4C 0B 90 AD |  if_e	jmp	#LR__0339
04d64     AE 01 00 FF 
04d68     E8 14 06 F6 | 	mov	arg02, ##@LR__5542
04d6c     13 13 02 F6 | 	mov	arg01, local01
04d70     F4 11 B2 FD | 	call	#__system___string_cmp
04d74     00 FA 0D F2 | 	cmp	result1, #0 wz
04d78     3C 0B 90 AD |  if_e	jmp	#LR__0340
04d7c     AE 01 00 FF 
04d80     F0 14 06 F6 | 	mov	arg02, ##@LR__5543
04d84     13 13 02 F6 | 	mov	arg01, local01
04d88     DC 11 B2 FD | 	call	#__system___string_cmp
04d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d90     2C 0B 90 AD |  if_e	jmp	#LR__0341
04d94     AE 01 00 FF 
04d98     F6 14 06 F6 | 	mov	arg02, ##@LR__5544
04d9c     13 13 02 F6 | 	mov	arg01, local01
04da0     C4 11 B2 FD | 	call	#__system___string_cmp
04da4     00 FA 0D F2 | 	cmp	result1, #0 wz
04da8     1C 0B 90 AD |  if_e	jmp	#LR__0342
04dac     AE 01 00 FF 
04db0     F9 14 06 F6 | 	mov	arg02, ##@LR__5545
04db4     13 13 02 F6 | 	mov	arg01, local01
04db8     AC 11 B2 FD | 	call	#__system___string_cmp
04dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc0     0C 0B 90 AD |  if_e	jmp	#LR__0343
04dc4     AE 01 00 FF 
04dc8     FE 14 06 F6 | 	mov	arg02, ##@LR__5546
04dcc     13 13 02 F6 | 	mov	arg01, local01
04dd0     94 11 B2 FD | 	call	#__system___string_cmp
04dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04dd8     FC 0A 90 AD |  if_e	jmp	#LR__0344
04ddc     AE 01 00 FF 
04de0     05 15 06 F6 | 	mov	arg02, ##@LR__5547
04de4     13 13 02 F6 | 	mov	arg01, local01
04de8     7C 11 B2 FD | 	call	#__system___string_cmp
04dec     00 FA 0D F2 | 	cmp	result1, #0 wz
04df0     EC 0A 90 AD |  if_e	jmp	#LR__0345
04df4     AE 01 00 FF 
04df8     0A 15 06 F6 | 	mov	arg02, ##@LR__5548
04dfc     13 13 02 F6 | 	mov	arg01, local01
04e00     64 11 B2 FD | 	call	#__system___string_cmp
04e04     00 FA 0D F2 | 	cmp	result1, #0 wz
04e08     DC 0A 90 AD |  if_e	jmp	#LR__0346
04e0c     AE 01 00 FF 
04e10     11 15 06 F6 | 	mov	arg02, ##@LR__5549
04e14     13 13 02 F6 | 	mov	arg01, local01
04e18     4C 11 B2 FD | 	call	#__system___string_cmp
04e1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e20     CC 0A 90 AD |  if_e	jmp	#LR__0347
04e24     AE 01 00 FF 
04e28     18 15 06 F6 | 	mov	arg02, ##@LR__5550
04e2c     13 13 02 F6 | 	mov	arg01, local01
04e30     34 11 B2 FD | 	call	#__system___string_cmp
04e34     00 FA 0D F2 | 	cmp	result1, #0 wz
04e38     BC 0A 90 AD |  if_e	jmp	#LR__0348
04e3c     AE 01 00 FF 
04e40     22 15 06 F6 | 	mov	arg02, ##@LR__5551
04e44     13 13 02 F6 | 	mov	arg01, local01
04e48     1C 11 B2 FD | 	call	#__system___string_cmp
04e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e50     AC 0A 90 AD |  if_e	jmp	#LR__0349
04e54     AE 01 00 FF 
04e58     26 15 06 F6 | 	mov	arg02, ##@LR__5552
04e5c     13 13 02 F6 | 	mov	arg01, local01
04e60     04 11 B2 FD | 	call	#__system___string_cmp
04e64     00 FA 0D F2 | 	cmp	result1, #0 wz
04e68     9C 0A 90 AD |  if_e	jmp	#LR__0350
04e6c     AE 01 00 FF 
04e70     2A 15 06 F6 | 	mov	arg02, ##@LR__5553
04e74     13 13 02 F6 | 	mov	arg01, local01
04e78     EC 10 B2 FD | 	call	#__system___string_cmp
04e7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e80     8C 0A 90 AD |  if_e	jmp	#LR__0351
04e84     AE 01 00 FF 
04e88     31 15 06 F6 | 	mov	arg02, ##@LR__5554
04e8c     13 13 02 F6 | 	mov	arg01, local01
04e90     D4 10 B2 FD | 	call	#__system___string_cmp
04e94     00 FA 0D F2 | 	cmp	result1, #0 wz
04e98     7C 0A 90 AD |  if_e	jmp	#LR__0352
04e9c     AE 01 00 FF 
04ea0     35 15 06 F6 | 	mov	arg02, ##@LR__5555
04ea4     13 13 02 F6 | 	mov	arg01, local01
04ea8     BC 10 B2 FD | 	call	#__system___string_cmp
04eac     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb0     6C 0A 90 AD |  if_e	jmp	#LR__0353
04eb4     AE 01 00 FF 
04eb8     39 15 06 F6 | 	mov	arg02, ##@LR__5556
04ebc     13 13 02 F6 | 	mov	arg01, local01
04ec0     A4 10 B2 FD | 	call	#__system___string_cmp
04ec4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ec8     5C 0A 90 AD |  if_e	jmp	#LR__0354
04ecc     AE 01 00 FF 
04ed0     3F 15 06 F6 | 	mov	arg02, ##@LR__5557
04ed4     13 13 02 F6 | 	mov	arg01, local01
04ed8     8C 10 B2 FD | 	call	#__system___string_cmp
04edc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee0     4C 0A 90 AD |  if_e	jmp	#LR__0355
04ee4     AE 01 00 FF 
04ee8     44 15 06 F6 | 	mov	arg02, ##@LR__5558
04eec     13 13 02 F6 | 	mov	arg01, local01
04ef0     74 10 B2 FD | 	call	#__system___string_cmp
04ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ef8     3C 0A 90 AD |  if_e	jmp	#LR__0356
04efc     AE 01 00 FF 
04f00     4B 15 06 F6 | 	mov	arg02, ##@LR__5559
04f04     13 13 02 F6 | 	mov	arg01, local01
04f08     5C 10 B2 FD | 	call	#__system___string_cmp
04f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f10     2C 0A 90 AD |  if_e	jmp	#LR__0357
04f14     AE 01 00 FF 
04f18     4F 15 06 F6 | 	mov	arg02, ##@LR__5560
04f1c     13 13 02 F6 | 	mov	arg01, local01
04f20     44 10 B2 FD | 	call	#__system___string_cmp
04f24     00 FA 0D F2 | 	cmp	result1, #0 wz
04f28     1C 0A 90 AD |  if_e	jmp	#LR__0358
04f2c     AE 01 00 FF 
04f30     54 15 06 F6 | 	mov	arg02, ##@LR__5561
04f34     13 13 02 F6 | 	mov	arg01, local01
04f38     2C 10 B2 FD | 	call	#__system___string_cmp
04f3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f40     0C 0A 90 AD |  if_e	jmp	#LR__0359
04f44     AE 01 00 FF 
04f48     58 15 06 F6 | 	mov	arg02, ##@LR__5562
04f4c     13 13 02 F6 | 	mov	arg01, local01
04f50     14 10 B2 FD | 	call	#__system___string_cmp
04f54     00 FA 0D F2 | 	cmp	result1, #0 wz
04f58     FC 09 90 AD |  if_e	jmp	#LR__0360
04f5c     AE 01 00 FF 
04f60     5E 15 06 F6 | 	mov	arg02, ##@LR__5563
04f64     13 13 02 F6 | 	mov	arg01, local01
04f68     FC 0F B2 FD | 	call	#__system___string_cmp
04f6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f70     EC 09 90 AD |  if_e	jmp	#LR__0361
04f74     AE 01 00 FF 
04f78     61 15 06 F6 | 	mov	arg02, ##@LR__5564
04f7c     13 13 02 F6 | 	mov	arg01, local01
04f80     E4 0F B2 FD | 	call	#__system___string_cmp
04f84     00 FA 0D F2 | 	cmp	result1, #0 wz
04f88     DC 09 90 AD |  if_e	jmp	#LR__0362
04f8c     AE 01 00 FF 
04f90     69 15 06 F6 | 	mov	arg02, ##@LR__5565
04f94     13 13 02 F6 | 	mov	arg01, local01
04f98     CC 0F B2 FD | 	call	#__system___string_cmp
04f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa0     CC 09 90 AD |  if_e	jmp	#LR__0363
04fa4     AE 01 00 FF 
04fa8     6D 15 06 F6 | 	mov	arg02, ##@LR__5566
04fac     13 13 02 F6 | 	mov	arg01, local01
04fb0     B4 0F B2 FD | 	call	#__system___string_cmp
04fb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fb8     BC 09 90 AD |  if_e	jmp	#LR__0364
04fbc     AE 01 00 FF 
04fc0     72 15 06 F6 | 	mov	arg02, ##@LR__5567
04fc4     13 13 02 F6 | 	mov	arg01, local01
04fc8     9C 0F B2 FD | 	call	#__system___string_cmp
04fcc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd0     AC 09 90 AD |  if_e	jmp	#LR__0365
04fd4     AE 01 00 FF 
04fd8     76 15 06 F6 | 	mov	arg02, ##@LR__5568
04fdc     13 13 02 F6 | 	mov	arg01, local01
04fe0     84 0F B2 FD | 	call	#__system___string_cmp
04fe4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fe8     9C 09 90 AD |  if_e	jmp	#LR__0366
04fec     AE 01 00 FF 
04ff0     7B 15 06 F6 | 	mov	arg02, ##@LR__5569
04ff4     13 13 02 F6 | 	mov	arg01, local01
04ff8     6C 0F B2 FD | 	call	#__system___string_cmp
04ffc     00 FA 0D F2 | 	cmp	result1, #0 wz
05000     8C 09 90 AD |  if_e	jmp	#LR__0367
05004     AE 01 00 FF 
05008     7F 15 06 F6 | 	mov	arg02, ##@LR__5570
0500c     13 13 02 F6 | 	mov	arg01, local01
05010     54 0F B2 FD | 	call	#__system___string_cmp
05014     00 FA 0D F2 | 	cmp	result1, #0 wz
05018     7C 09 90 AD |  if_e	jmp	#LR__0368
0501c     AE 01 00 FF 
05020     82 15 06 F6 | 	mov	arg02, ##@LR__5571
05024     13 13 02 F6 | 	mov	arg01, local01
05028     3C 0F B2 FD | 	call	#__system___string_cmp
0502c     00 FA 0D F2 | 	cmp	result1, #0 wz
05030     6C 09 90 AD |  if_e	jmp	#LR__0369
05034     AE 01 00 FF 
05038     88 15 06 F6 | 	mov	arg02, ##@LR__5572
0503c     13 13 02 F6 | 	mov	arg01, local01
05040     24 0F B2 FD | 	call	#__system___string_cmp
05044     00 FA 0D F2 | 	cmp	result1, #0 wz
05048     5C 09 90 AD |  if_e	jmp	#LR__0370
0504c     AE 01 00 FF 
05050     8C 15 06 F6 | 	mov	arg02, ##@LR__5573
05054     13 13 02 F6 | 	mov	arg01, local01
05058     0C 0F B2 FD | 	call	#__system___string_cmp
0505c     00 FA 0D F2 | 	cmp	result1, #0 wz
05060     4C 09 90 AD |  if_e	jmp	#LR__0371
05064     AE 01 00 FF 
05068     90 15 06 F6 | 	mov	arg02, ##@LR__5574
0506c     13 13 02 F6 | 	mov	arg01, local01
05070     F4 0E B2 FD | 	call	#__system___string_cmp
05074     00 FA 0D F2 | 	cmp	result1, #0 wz
05078     3C 09 90 AD |  if_e	jmp	#LR__0372
0507c     AE 01 00 FF 
05080     96 15 06 F6 | 	mov	arg02, ##@LR__5575
05084     13 13 02 F6 | 	mov	arg01, local01
05088     DC 0E B2 FD | 	call	#__system___string_cmp
0508c     00 FA 0D F2 | 	cmp	result1, #0 wz
05090     2C 09 90 AD |  if_e	jmp	#LR__0373
05094     AE 01 00 FF 
05098     9B 15 06 F6 | 	mov	arg02, ##@LR__5576
0509c     13 13 02 F6 | 	mov	arg01, local01
050a0     C4 0E B2 FD | 	call	#__system___string_cmp
050a4     00 FA 0D F2 | 	cmp	result1, #0 wz
050a8     1C 09 90 AD |  if_e	jmp	#LR__0374
050ac     AE 01 00 FF 
050b0     9E 15 06 F6 | 	mov	arg02, ##@LR__5577
050b4     13 13 02 F6 | 	mov	arg01, local01
050b8     AC 0E B2 FD | 	call	#__system___string_cmp
050bc     00 FA 0D F2 | 	cmp	result1, #0 wz
050c0     0C 09 90 AD |  if_e	jmp	#LR__0375
050c4     AE 01 00 FF 
050c8     A1 15 06 F6 | 	mov	arg02, ##@LR__5578
050cc     13 13 02 F6 | 	mov	arg01, local01
050d0     94 0E B2 FD | 	call	#__system___string_cmp
050d4     00 FA 0D F2 | 	cmp	result1, #0 wz
050d8     FC 08 90 AD |  if_e	jmp	#LR__0376
050dc     AE 01 00 FF 
050e0     A5 15 06 F6 | 	mov	arg02, ##@LR__5579
050e4     13 13 02 F6 | 	mov	arg01, local01
050e8     7C 0E B2 FD | 	call	#__system___string_cmp
050ec     00 FA 0D F2 | 	cmp	result1, #0 wz
050f0     EC 08 90 AD |  if_e	jmp	#LR__0377
050f4     AE 01 00 FF 
050f8     A8 15 06 F6 | 	mov	arg02, ##@LR__5580
050fc     13 13 02 F6 | 	mov	arg01, local01
05100     64 0E B2 FD | 	call	#__system___string_cmp
05104     00 FA 0D F2 | 	cmp	result1, #0 wz
05108     DC 08 90 AD |  if_e	jmp	#LR__0378
0510c     AE 01 00 FF 
05110     AE 15 06 F6 | 	mov	arg02, ##@LR__5581
05114     13 13 02 F6 | 	mov	arg01, local01
05118     4C 0E B2 FD | 	call	#__system___string_cmp
0511c     00 FA 0D F2 | 	cmp	result1, #0 wz
05120     CC 08 90 AD |  if_e	jmp	#LR__0379
05124     AE 01 00 FF 
05128     B3 15 06 F6 | 	mov	arg02, ##@LR__5582
0512c     13 13 02 F6 | 	mov	arg01, local01
05130     34 0E B2 FD | 	call	#__system___string_cmp
05134     00 FA 0D F2 | 	cmp	result1, #0 wz
05138     BC 08 90 AD |  if_e	jmp	#LR__0380
0513c     AE 01 00 FF 
05140     B6 15 06 F6 | 	mov	arg02, ##@LR__5583
05144     13 13 02 F6 | 	mov	arg01, local01
05148     1C 0E B2 FD | 	call	#__system___string_cmp
0514c     00 FA 0D F2 | 	cmp	result1, #0 wz
05150     AC 08 90 AD |  if_e	jmp	#LR__0381
05154     AE 01 00 FF 
05158     BB 15 06 F6 | 	mov	arg02, ##@LR__5584
0515c     13 13 02 F6 | 	mov	arg01, local01
05160     04 0E B2 FD | 	call	#__system___string_cmp
05164     00 FA 0D F2 | 	cmp	result1, #0 wz
05168     9C 08 90 AD |  if_e	jmp	#LR__0382
0516c     AE 01 00 FF 
05170     BF 15 06 F6 | 	mov	arg02, ##@LR__5585
05174     13 13 02 F6 | 	mov	arg01, local01
05178     EC 0D B2 FD | 	call	#__system___string_cmp
0517c     00 FA 0D F2 | 	cmp	result1, #0 wz
05180     8C 08 90 AD |  if_e	jmp	#LR__0383
05184     AE 01 00 FF 
05188     C5 15 06 F6 | 	mov	arg02, ##@LR__5586
0518c     13 13 02 F6 | 	mov	arg01, local01
05190     D4 0D B2 FD | 	call	#__system___string_cmp
05194     00 FA 0D F2 | 	cmp	result1, #0 wz
05198     7C 08 90 AD |  if_e	jmp	#LR__0384
0519c     AE 01 00 FF 
051a0     CB 15 06 F6 | 	mov	arg02, ##@LR__5587
051a4     13 13 02 F6 | 	mov	arg01, local01
051a8     BC 0D B2 FD | 	call	#__system___string_cmp
051ac     00 FA 0D F2 | 	cmp	result1, #0 wz
051b0     6C 08 90 AD |  if_e	jmp	#LR__0385
051b4     AE 01 00 FF 
051b8     D0 15 06 F6 | 	mov	arg02, ##@LR__5588
051bc     13 13 02 F6 | 	mov	arg01, local01
051c0     A4 0D B2 FD | 	call	#__system___string_cmp
051c4     00 FA 0D F2 | 	cmp	result1, #0 wz
051c8     5C 08 90 AD |  if_e	jmp	#LR__0386
051cc     AE 01 00 FF 
051d0     D3 15 06 F6 | 	mov	arg02, ##@LR__5589
051d4     13 13 02 F6 | 	mov	arg01, local01
051d8     8C 0D B2 FD | 	call	#__system___string_cmp
051dc     00 FA 0D F2 | 	cmp	result1, #0 wz
051e0     4C 08 90 AD |  if_e	jmp	#LR__0387
051e4     AE 01 00 FF 
051e8     D9 15 06 F6 | 	mov	arg02, ##@LR__5590
051ec     13 13 02 F6 | 	mov	arg01, local01
051f0     74 0D B2 FD | 	call	#__system___string_cmp
051f4     00 FA 0D F2 | 	cmp	result1, #0 wz
051f8     3C 08 90 AD |  if_e	jmp	#LR__0388
051fc     AE 01 00 FF 
05200     DD 15 06 F6 | 	mov	arg02, ##@LR__5591
05204     13 13 02 F6 | 	mov	arg01, local01
05208     5C 0D B2 FD | 	call	#__system___string_cmp
0520c     00 FA 0D F2 | 	cmp	result1, #0 wz
05210     2C 08 90 AD |  if_e	jmp	#LR__0389
05214     AE 01 00 FF 
05218     E2 15 06 F6 | 	mov	arg02, ##@LR__5592
0521c     13 13 02 F6 | 	mov	arg01, local01
05220     44 0D B2 FD | 	call	#__system___string_cmp
05224     00 FA 0D F2 | 	cmp	result1, #0 wz
05228     1C 08 90 AD |  if_e	jmp	#LR__0390
0522c     AE 01 00 FF 
05230     E5 15 06 F6 | 	mov	arg02, ##@LR__5593
05234     13 13 02 F6 | 	mov	arg01, local01
05238     2C 0D B2 FD | 	call	#__system___string_cmp
0523c     00 FA 0D F2 | 	cmp	result1, #0 wz
05240     0C 08 90 AD |  if_e	jmp	#LR__0391
05244     AE 01 00 FF 
05248     E8 15 06 F6 | 	mov	arg02, ##@LR__5594
0524c     13 13 02 F6 | 	mov	arg01, local01
05250     14 0D B2 FD | 	call	#__system___string_cmp
05254     00 FA 0D F2 | 	cmp	result1, #0 wz
05258     FC 07 90 AD |  if_e	jmp	#LR__0392
0525c     AE 01 00 FF 
05260     ED 15 06 F6 | 	mov	arg02, ##@LR__5595
05264     13 13 02 F6 | 	mov	arg01, local01
05268     FC 0C B2 FD | 	call	#__system___string_cmp
0526c     00 FA 0D F2 | 	cmp	result1, #0 wz
05270     EC 07 90 AD |  if_e	jmp	#LR__0393
05274     AE 01 00 FF 
05278     F3 15 06 F6 | 	mov	arg02, ##@LR__5596
0527c     13 13 02 F6 | 	mov	arg01, local01
05280     E4 0C B2 FD | 	call	#__system___string_cmp
05284     00 FA 0D F2 | 	cmp	result1, #0 wz
05288     DC 07 90 AD |  if_e	jmp	#LR__0394
0528c     AE 01 00 FF 
05290     F7 15 06 F6 | 	mov	arg02, ##@LR__5597
05294     13 13 02 F6 | 	mov	arg01, local01
05298     CC 0C B2 FD | 	call	#__system___string_cmp
0529c     00 FA 0D F2 | 	cmp	result1, #0 wz
052a0     CC 07 90 AD |  if_e	jmp	#LR__0395
052a4     AF 01 00 FF 
052a8     00 14 06 F6 | 	mov	arg02, ##@LR__5598
052ac     13 13 02 F6 | 	mov	arg01, local01
052b0     B4 0C B2 FD | 	call	#__system___string_cmp
052b4     00 FA 0D F2 | 	cmp	result1, #0 wz
052b8     BC 07 90 AD |  if_e	jmp	#LR__0396
052bc     AF 01 00 FF 
052c0     06 14 06 F6 | 	mov	arg02, ##@LR__5599
052c4     13 13 02 F6 | 	mov	arg01, local01
052c8     9C 0C B2 FD | 	call	#__system___string_cmp
052cc     00 FA 0D F2 | 	cmp	result1, #0 wz
052d0     AC 07 90 AD |  if_e	jmp	#LR__0397
052d4     AF 01 00 FF 
052d8     0C 14 06 F6 | 	mov	arg02, ##@LR__5600
052dc     13 13 02 F6 | 	mov	arg01, local01
052e0     84 0C B2 FD | 	call	#__system___string_cmp
052e4     00 FA 0D F2 | 	cmp	result1, #0 wz
052e8     9C 07 90 AD |  if_e	jmp	#LR__0398
052ec     AF 01 00 FF 
052f0     15 14 06 F6 | 	mov	arg02, ##@LR__5601
052f4     13 13 02 F6 | 	mov	arg01, local01
052f8     6C 0C B2 FD | 	call	#__system___string_cmp
052fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05300     8C 07 90 AD |  if_e	jmp	#LR__0399
05304     AF 01 00 FF 
05308     1F 14 06 F6 | 	mov	arg02, ##@LR__5602
0530c     13 13 02 F6 | 	mov	arg01, local01
05310     54 0C B2 FD | 	call	#__system___string_cmp
05314     00 FA 0D F2 | 	cmp	result1, #0 wz
05318     7C 07 90 AD |  if_e	jmp	#LR__0400
0531c     AF 01 00 FF 
05320     28 14 06 F6 | 	mov	arg02, ##@LR__5603
05324     13 13 02 F6 | 	mov	arg01, local01
05328     3C 0C B2 FD | 	call	#__system___string_cmp
0532c     00 FA 0D F2 | 	cmp	result1, #0 wz
05330     6C 07 90 AD |  if_e	jmp	#LR__0401
05334     AF 01 00 FF 
05338     2D 14 06 F6 | 	mov	arg02, ##@LR__5604
0533c     13 13 02 F6 | 	mov	arg01, local01
05340     24 0C B2 FD | 	call	#__system___string_cmp
05344     00 FA 0D F2 | 	cmp	result1, #0 wz
05348     5C 07 90 AD |  if_e	jmp	#LR__0402
0534c     AF 01 00 FF 
05350     30 14 06 F6 | 	mov	arg02, ##@LR__5605
05354     13 13 02 F6 | 	mov	arg01, local01
05358     0C 0C B2 FD | 	call	#__system___string_cmp
0535c     00 FA 0D F2 | 	cmp	result1, #0 wz
05360     4C 07 90 AD |  if_e	jmp	#LR__0403
05364     AF 01 00 FF 
05368     3B 14 06 F6 | 	mov	arg02, ##@LR__5606
0536c     13 13 02 F6 | 	mov	arg01, local01
05370     F4 0B B2 FD | 	call	#__system___string_cmp
05374     00 FA 0D F2 | 	cmp	result1, #0 wz
05378     3C 07 90 AD |  if_e	jmp	#LR__0404
0537c     AF 01 00 FF 
05380     40 14 06 F6 | 	mov	arg02, ##@LR__5607
05384     13 13 02 F6 | 	mov	arg01, local01
05388     DC 0B B2 FD | 	call	#__system___string_cmp
0538c     00 FA 0D F2 | 	cmp	result1, #0 wz
05390     2C 07 90 AD |  if_e	jmp	#LR__0405
05394     AF 01 00 FF 
05398     44 14 06 F6 | 	mov	arg02, ##@LR__5608
0539c     13 13 02 F6 | 	mov	arg01, local01
053a0     C4 0B B2 FD | 	call	#__system___string_cmp
053a4     00 FA 0D F2 | 	cmp	result1, #0 wz
053a8     1C 07 90 AD |  if_e	jmp	#LR__0406
053ac     AF 01 00 FF 
053b0     49 14 06 F6 | 	mov	arg02, ##@LR__5609
053b4     13 13 02 F6 | 	mov	arg01, local01
053b8     AC 0B B2 FD | 	call	#__system___string_cmp
053bc     00 FA 0D F2 | 	cmp	result1, #0 wz
053c0     0C 07 90 AD |  if_e	jmp	#LR__0407
053c4     AF 01 00 FF 
053c8     4D 14 06 F6 | 	mov	arg02, ##@LR__5610
053cc     13 13 02 F6 | 	mov	arg01, local01
053d0     94 0B B2 FD | 	call	#__system___string_cmp
053d4     00 FA 0D F2 | 	cmp	result1, #0 wz
053d8     FC 06 90 AD |  if_e	jmp	#LR__0408
053dc     AF 01 00 FF 
053e0     56 14 06 F6 | 	mov	arg02, ##@LR__5611
053e4     13 13 02 F6 | 	mov	arg01, local01
053e8     7C 0B B2 FD | 	call	#__system___string_cmp
053ec     00 FA 0D F2 | 	cmp	result1, #0 wz
053f0     EC 06 90 AD |  if_e	jmp	#LR__0409
053f4     AF 01 00 FF 
053f8     5B 14 06 F6 | 	mov	arg02, ##@LR__5612
053fc     13 13 02 F6 | 	mov	arg01, local01
05400     64 0B B2 FD | 	call	#__system___string_cmp
05404     00 FA 0D F2 | 	cmp	result1, #0 wz
05408     DC 06 90 AD |  if_e	jmp	#LR__0410
0540c     AF 01 00 FF 
05410     61 14 06 F6 | 	mov	arg02, ##@LR__5613
05414     13 13 02 F6 | 	mov	arg01, local01
05418     4C 0B B2 FD | 	call	#__system___string_cmp
0541c     00 FA 0D F2 | 	cmp	result1, #0 wz
05420     CC 06 90 AD |  if_e	jmp	#LR__0411
05424     AF 01 00 FF 
05428     63 14 06 F6 | 	mov	arg02, ##@LR__5614
0542c     13 13 02 F6 | 	mov	arg01, local01
05430     34 0B B2 FD | 	call	#__system___string_cmp
05434     00 FA 0D F2 | 	cmp	result1, #0 wz
05438     BC 06 90 AD |  if_e	jmp	#LR__0412
0543c     AF 01 00 FF 
05440     67 14 06 F6 | 	mov	arg02, ##@LR__5615
05444     13 13 02 F6 | 	mov	arg01, local01
05448     1C 0B B2 FD | 	call	#__system___string_cmp
0544c     00 FA 0D F2 | 	cmp	result1, #0 wz
05450     AC 06 90 AD |  if_e	jmp	#LR__0413
05454     AF 01 00 FF 
05458     6B 14 06 F6 | 	mov	arg02, ##@LR__5616
0545c     13 13 02 F6 | 	mov	arg01, local01
05460     04 0B B2 FD | 	call	#__system___string_cmp
05464     00 FA 0D F2 | 	cmp	result1, #0 wz
05468     9C 06 90 AD |  if_e	jmp	#LR__0414
0546c     AF 01 00 FF 
05470     70 14 06 F6 | 	mov	arg02, ##@LR__5617
05474     13 13 02 F6 | 	mov	arg01, local01
05478     EC 0A B2 FD | 	call	#__system___string_cmp
0547c     00 FA 0D F2 | 	cmp	result1, #0 wz
05480     8C 06 90 AD |  if_e	jmp	#LR__0415
05484     AF 01 00 FF 
05488     78 14 06 F6 | 	mov	arg02, ##@LR__5618
0548c     13 13 02 F6 | 	mov	arg01, local01
05490     D4 0A B2 FD | 	call	#__system___string_cmp
05494     00 FA 0D F2 | 	cmp	result1, #0 wz
05498     7C 06 90 AD |  if_e	jmp	#LR__0416
0549c     AF 01 00 FF 
054a0     7C 14 06 F6 | 	mov	arg02, ##@LR__5619
054a4     13 13 02 F6 | 	mov	arg01, local01
054a8     BC 0A B2 FD | 	call	#__system___string_cmp
054ac     00 FA 0D F2 | 	cmp	result1, #0 wz
054b0     6C 06 90 AD |  if_e	jmp	#LR__0417
054b4     AF 01 00 FF 
054b8     7E 14 06 F6 | 	mov	arg02, ##@LR__5620
054bc     13 13 02 F6 | 	mov	arg01, local01
054c0     A4 0A B2 FD | 	call	#__system___string_cmp
054c4     00 FA 0D F2 | 	cmp	result1, #0 wz
054c8     5C 06 90 AD |  if_e	jmp	#LR__0418
054cc     AF 01 00 FF 
054d0     86 14 06 F6 | 	mov	arg02, ##@LR__5621
054d4     13 13 02 F6 | 	mov	arg01, local01
054d8     8C 0A B2 FD | 	call	#__system___string_cmp
054dc     00 FA 0D F2 | 	cmp	result1, #0 wz
054e0     4C 06 90 AD |  if_e	jmp	#LR__0419
054e4     AF 01 00 FF 
054e8     8D 14 06 F6 | 	mov	arg02, ##@LR__5622
054ec     13 13 02 F6 | 	mov	arg01, local01
054f0     74 0A B2 FD | 	call	#__system___string_cmp
054f4     00 FA 0D F2 | 	cmp	result1, #0 wz
054f8     3C 06 90 AD |  if_e	jmp	#LR__0420
054fc     AF 01 00 FF 
05500     91 14 06 F6 | 	mov	arg02, ##@LR__5623
05504     13 13 02 F6 | 	mov	arg01, local01
05508     5C 0A B2 FD | 	call	#__system___string_cmp
0550c     00 FA 0D F2 | 	cmp	result1, #0 wz
05510     2C 06 90 AD |  if_e	jmp	#LR__0421
05514     AF 01 00 FF 
05518     96 14 06 F6 | 	mov	arg02, ##@LR__5624
0551c     13 13 02 F6 | 	mov	arg01, local01
05520     44 0A B2 FD | 	call	#__system___string_cmp
05524     00 FA 0D F2 | 	cmp	result1, #0 wz
05528     1C 06 90 AD |  if_e	jmp	#LR__0422
0552c     AF 01 00 FF 
05530     99 14 06 F6 | 	mov	arg02, ##@LR__5625
05534     13 13 02 F6 | 	mov	arg01, local01
05538     2C 0A B2 FD | 	call	#__system___string_cmp
0553c     00 FA 0D F2 | 	cmp	result1, #0 wz
05540     0C 06 90 AD |  if_e	jmp	#LR__0423
05544     AF 01 00 FF 
05548     A2 14 06 F6 | 	mov	arg02, ##@LR__5626
0554c     13 13 02 F6 | 	mov	arg01, local01
05550     14 0A B2 FD | 	call	#__system___string_cmp
05554     00 FA 0D F2 | 	cmp	result1, #0 wz
05558     FC 05 90 AD |  if_e	jmp	#LR__0424
0555c     AF 01 00 FF 
05560     A6 14 06 F6 | 	mov	arg02, ##@LR__5627
05564     13 13 02 F6 | 	mov	arg01, local01
05568     FC 09 B2 FD | 	call	#__system___string_cmp
0556c     00 FA 0D F2 | 	cmp	result1, #0 wz
05570     EC 05 90 AD |  if_e	jmp	#LR__0425
05574     AF 01 00 FF 
05578     AD 14 06 F6 | 	mov	arg02, ##@LR__5628
0557c     13 13 02 F6 | 	mov	arg01, local01
05580     E4 09 B2 FD | 	call	#__system___string_cmp
05584     00 FA 0D F2 | 	cmp	result1, #0 wz
05588     DC 05 90 AD |  if_e	jmp	#LR__0426
0558c     AF 01 00 FF 
05590     B1 14 06 F6 | 	mov	arg02, ##@LR__5629
05594     13 13 02 F6 | 	mov	arg01, local01
05598     CC 09 B2 FD | 	call	#__system___string_cmp
0559c     00 FA 0D F2 | 	cmp	result1, #0 wz
055a0     CC 05 90 AD |  if_e	jmp	#LR__0427
055a4     AF 01 00 FF 
055a8     B8 14 06 F6 | 	mov	arg02, ##@LR__5630
055ac     13 13 02 F6 | 	mov	arg01, local01
055b0     B4 09 B2 FD | 	call	#__system___string_cmp
055b4     00 FA 0D F2 | 	cmp	result1, #0 wz
055b8     BC 05 90 AD |  if_e	jmp	#LR__0428
055bc     AF 01 00 FF 
055c0     BC 14 06 F6 | 	mov	arg02, ##@LR__5631
055c4     13 13 02 F6 | 	mov	arg01, local01
055c8     9C 09 B2 FD | 	call	#__system___string_cmp
055cc     00 FA 0D F2 | 	cmp	result1, #0 wz
055d0     AC 05 90 AD |  if_e	jmp	#LR__0429
055d4     AF 01 00 FF 
055d8     C3 14 06 F6 | 	mov	arg02, ##@LR__5632
055dc     13 13 02 F6 | 	mov	arg01, local01
055e0     84 09 B2 FD | 	call	#__system___string_cmp
055e4     00 FA 0D F2 | 	cmp	result1, #0 wz
055e8     9C 05 90 AD |  if_e	jmp	#LR__0430
055ec     AF 01 00 FF 
055f0     C7 14 06 F6 | 	mov	arg02, ##@LR__5633
055f4     13 13 02 F6 | 	mov	arg01, local01
055f8     6C 09 B2 FD | 	call	#__system___string_cmp
055fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05600     8C 05 90 AD |  if_e	jmp	#LR__0431
05604     AF 01 00 FF 
05608     D2 14 06 F6 | 	mov	arg02, ##@LR__5634
0560c     13 13 02 F6 | 	mov	arg01, local01
05610     54 09 B2 FD | 	call	#__system___string_cmp
05614     00 FA 0D F2 | 	cmp	result1, #0 wz
05618     7C 05 90 AD |  if_e	jmp	#LR__0432
0561c     AF 01 00 FF 
05620     D6 14 06 F6 | 	mov	arg02, ##@LR__5635
05624     13 13 02 F6 | 	mov	arg01, local01
05628     3C 09 B2 FD | 	call	#__system___string_cmp
0562c     00 FA 0D F2 | 	cmp	result1, #0 wz
05630     6C 05 90 AD |  if_e	jmp	#LR__0433
05634     AF 01 00 FF 
05638     DD 14 06 F6 | 	mov	arg02, ##@LR__5636
0563c     13 13 02 F6 | 	mov	arg01, local01
05640     24 09 B2 FD | 	call	#__system___string_cmp
05644     00 FA 0D F2 | 	cmp	result1, #0 wz
05648     5C 05 90 AD |  if_e	jmp	#LR__0434
0564c     AF 01 00 FF 
05650     E1 14 06 F6 | 	mov	arg02, ##@LR__5637
05654     13 13 02 F6 | 	mov	arg01, local01
05658     0C 09 B2 FD | 	call	#__system___string_cmp
0565c     00 FA 0D F2 | 	cmp	result1, #0 wz
05660     4C 05 90 AD |  if_e	jmp	#LR__0435
05664     AF 01 00 FF 
05668     E9 14 06 F6 | 	mov	arg02, ##@LR__5638
0566c     13 13 02 F6 | 	mov	arg01, local01
05670     F4 08 B2 FD | 	call	#__system___string_cmp
05674     00 FA 0D F2 | 	cmp	result1, #0 wz
05678     3C 05 90 AD |  if_e	jmp	#LR__0436
0567c     AF 01 00 FF 
05680     ED 14 06 F6 | 	mov	arg02, ##@LR__5639
05684     13 13 02 F6 | 	mov	arg01, local01
05688     DC 08 B2 FD | 	call	#__system___string_cmp
0568c     00 FA 0D F2 | 	cmp	result1, #0 wz
05690     2C 05 90 AD |  if_e	jmp	#LR__0437
05694     AF 01 00 FF 
05698     F4 14 06 F6 | 	mov	arg02, ##@LR__5640
0569c     13 13 02 F6 | 	mov	arg01, local01
056a0     C4 08 B2 FD | 	call	#__system___string_cmp
056a4     00 FA 0D F2 | 	cmp	result1, #0 wz
056a8     1C 05 90 AD |  if_e	jmp	#LR__0438
056ac     AF 01 00 FF 
056b0     FB 14 06 F6 | 	mov	arg02, ##@LR__5641
056b4     13 13 02 F6 | 	mov	arg01, local01
056b8     AC 08 B2 FD | 	call	#__system___string_cmp
056bc     00 FA 0D F2 | 	cmp	result1, #0 wz
056c0     0C 05 90 AD |  if_e	jmp	#LR__0439
056c4     AF 01 00 FF 
056c8     FF 14 06 F6 | 	mov	arg02, ##@LR__5642
056cc     13 13 02 F6 | 	mov	arg01, local01
056d0     94 08 B2 FD | 	call	#__system___string_cmp
056d4     00 FA 0D F2 | 	cmp	result1, #0 wz
056d8     FC 04 90 AD |  if_e	jmp	#LR__0440
056dc     AF 01 00 FF 
056e0     05 15 06 F6 | 	mov	arg02, ##@LR__5643
056e4     13 13 02 F6 | 	mov	arg01, local01
056e8     7C 08 B2 FD | 	call	#__system___string_cmp
056ec     00 FA 0D F2 | 	cmp	result1, #0 wz
056f0     EC 04 90 AD |  if_e	jmp	#LR__0441
056f4     AF 01 00 FF 
056f8     09 15 06 F6 | 	mov	arg02, ##@LR__5644
056fc     13 13 02 F6 | 	mov	arg01, local01
05700     64 08 B2 FD | 	call	#__system___string_cmp
05704     00 FA 0D F2 | 	cmp	result1, #0 wz
05708     DC 04 90 AD |  if_e	jmp	#LR__0442
0570c     AF 01 00 FF 
05710     10 15 06 F6 | 	mov	arg02, ##@LR__5645
05714     13 13 02 F6 | 	mov	arg01, local01
05718     4C 08 B2 FD | 	call	#__system___string_cmp
0571c     00 FA 0D F2 | 	cmp	result1, #0 wz
05720     CC 04 90 AD |  if_e	jmp	#LR__0443
05724     AF 01 00 FF 
05728     15 15 06 F6 | 	mov	arg02, ##@LR__5646
0572c     13 13 02 F6 | 	mov	arg01, local01
05730     34 08 B2 FD | 	call	#__system___string_cmp
05734     00 FA 0D F2 | 	cmp	result1, #0 wz
05738     BC 04 90 AD |  if_e	jmp	#LR__0444
0573c     AF 01 00 FF 
05740     1A 15 06 F6 | 	mov	arg02, ##@LR__5647
05744     13 13 02 F6 | 	mov	arg01, local01
05748     1C 08 B2 FD | 	call	#__system___string_cmp
0574c     00 FA 0D F2 | 	cmp	result1, #0 wz
05750     AC 04 90 AD |  if_e	jmp	#LR__0445
05754     AF 01 00 FF 
05758     21 15 06 F6 | 	mov	arg02, ##@LR__5648
0575c     13 13 02 F6 | 	mov	arg01, local01
05760     04 08 B2 FD | 	call	#__system___string_cmp
05764     00 FA 0D F2 | 	cmp	result1, #0 wz
05768     9C 04 90 AD |  if_e	jmp	#LR__0446
0576c     AF 01 00 FF 
05770     24 15 06 F6 | 	mov	arg02, ##@LR__5649
05774     13 13 02 F6 | 	mov	arg01, local01
05778     EC 07 B2 FD | 	call	#__system___string_cmp
0577c     00 FA 0D F2 | 	cmp	result1, #0 wz
05780     8C 04 90 AD |  if_e	jmp	#LR__0447
05784     AF 01 00 FF 
05788     2E 15 06 F6 | 	mov	arg02, ##@LR__5650
0578c     13 13 02 F6 | 	mov	arg01, local01
05790     D4 07 B2 FD | 	call	#__system___string_cmp
05794     00 FA 0D F2 | 	cmp	result1, #0 wz
05798     7C 04 90 AD |  if_e	jmp	#LR__0448
0579c     AF 01 00 FF 
057a0     32 15 06 F6 | 	mov	arg02, ##@LR__5651
057a4     13 13 02 F6 | 	mov	arg01, local01
057a8     BC 07 B2 FD | 	call	#__system___string_cmp
057ac     00 FA 0D F2 | 	cmp	result1, #0 wz
057b0     6C 04 90 AD |  if_e	jmp	#LR__0449
057b4     AF 01 00 FF 
057b8     3A 15 06 F6 | 	mov	arg02, ##@LR__5652
057bc     13 13 02 F6 | 	mov	arg01, local01
057c0     A4 07 B2 FD | 	call	#__system___string_cmp
057c4     00 FA 0D F2 | 	cmp	result1, #0 wz
057c8     5C 04 90 AD |  if_e	jmp	#LR__0450
057cc     AF 01 00 FF 
057d0     3E 15 06 F6 | 	mov	arg02, ##@LR__5653
057d4     13 13 02 F6 | 	mov	arg01, local01
057d8     8C 07 B2 FD | 	call	#__system___string_cmp
057dc     00 FA 0D F2 | 	cmp	result1, #0 wz
057e0     4C 04 90 AD |  if_e	jmp	#LR__0451
057e4     AF 01 00 FF 
057e8     44 15 06 F6 | 	mov	arg02, ##@LR__5654
057ec     13 13 02 F6 | 	mov	arg01, local01
057f0     74 07 B2 FD | 	call	#__system___string_cmp
057f4     00 FA 0D F2 | 	cmp	result1, #0 wz
057f8     3C 04 90 AD |  if_e	jmp	#LR__0452
057fc     AF 01 00 FF 
05800     4A 15 06 F6 | 	mov	arg02, ##@LR__5655
05804     13 13 02 F6 | 	mov	arg01, local01
05808     5C 07 B2 FD | 	call	#__system___string_cmp
0580c     00 FA 0D F2 | 	cmp	result1, #0 wz
05810     2C 04 90 AD |  if_e	jmp	#LR__0453
05814     30 04 90 FD | 	jmp	#LR__0454
05818                 | LR__0320
05818     5C FA 05 F6 | 	mov	result1, #92
0581c     2C 04 90 FD | 	jmp	#LR__0455
05820                 | LR__0321
05820     5C FA 05 F6 | 	mov	result1, #92
05824     24 04 90 FD | 	jmp	#LR__0455
05828                 | LR__0322
05828     B9 FA 05 F6 | 	mov	result1, #185
0582c     1C 04 90 FD | 	jmp	#LR__0455
05830                 | LR__0323
05830     47 FA 05 F6 | 	mov	result1, #71
05834     14 04 90 FD | 	jmp	#LR__0455
05838                 | LR__0324
05838     59 FA 05 F6 | 	mov	result1, #89
0583c     0C 04 90 FD | 	jmp	#LR__0455
05840                 | LR__0325
05840     59 FA 05 F6 | 	mov	result1, #89
05844     04 04 90 FD | 	jmp	#LR__0455
05848                 | LR__0326
05848     C3 FA 05 F6 | 	mov	result1, #195
0584c     FC 03 90 FD | 	jmp	#LR__0455
05850                 | LR__0327
05850     AE FA 05 F6 | 	mov	result1, #174
05854     F4 03 90 FD | 	jmp	#LR__0455
05858                 | LR__0328
05858     AE FA 05 F6 | 	mov	result1, #174
0585c     EC 03 90 FD | 	jmp	#LR__0455
05860                 | LR__0329
05860     B1 FA 05 F6 | 	mov	result1, #177
05864     E4 03 90 FD | 	jmp	#LR__0455
05868                 | LR__0330
05868     B1 FA 05 F6 | 	mov	result1, #177
0586c     DC 03 90 FD | 	jmp	#LR__0455
05870                 | LR__0331
05870     AF FA 05 F6 | 	mov	result1, #175
05874     D4 03 90 FD | 	jmp	#LR__0455
05878                 | LR__0332
05878     AF FA 05 F6 | 	mov	result1, #175
0587c     CC 03 90 FD | 	jmp	#LR__0455
05880                 | LR__0333
05880     B0 FA 05 F6 | 	mov	result1, #176
05884     C4 03 90 FD | 	jmp	#LR__0455
05888                 | LR__0334
05888     B0 FA 05 F6 | 	mov	result1, #176
0588c     BC 03 90 FD | 	jmp	#LR__0455
05890                 | LR__0335
05890     45 FA 05 F6 | 	mov	result1, #69
05894     B4 03 90 FD | 	jmp	#LR__0455
05898                 | LR__0336
05898     45 FA 05 F6 | 	mov	result1, #69
0589c     AC 03 90 FD | 	jmp	#LR__0455
058a0                 | LR__0337
058a0     69 FA 05 F6 | 	mov	result1, #105
058a4     A4 03 90 FD | 	jmp	#LR__0455
058a8                 | LR__0338
058a8     B4 FA 05 F6 | 	mov	result1, #180
058ac     9C 03 90 FD | 	jmp	#LR__0455
058b0                 | LR__0339
058b0     40 FA 05 F6 | 	mov	result1, #64
058b4     94 03 90 FD | 	jmp	#LR__0455
058b8                 | LR__0340
058b8     C0 FA 05 F6 | 	mov	result1, #192
058bc     8C 03 90 FD | 	jmp	#LR__0455
058c0                 | LR__0341
058c0     49 FA 05 F6 | 	mov	result1, #73
058c4     84 03 90 FD | 	jmp	#LR__0455
058c8                 | LR__0342
058c8     49 FA 05 F6 | 	mov	result1, #73
058cc     7C 03 90 FD | 	jmp	#LR__0455
058d0                 | LR__0343
058d0     C4 FA 05 F6 | 	mov	result1, #196
058d4     74 03 90 FD | 	jmp	#LR__0455
058d8                 | LR__0344
058d8     68 FA 05 F6 | 	mov	result1, #104
058dc     6C 03 90 FD | 	jmp	#LR__0455
058e0                 | LR__0345
058e0     B7 FA 05 F6 | 	mov	result1, #183
058e4     64 03 90 FD | 	jmp	#LR__0455
058e8                 | LR__0346
058e8     73 FA 05 F6 | 	mov	result1, #115
058ec     5C 03 90 FD | 	jmp	#LR__0455
058f0                 | LR__0347
058f0     74 FA 05 F6 | 	mov	result1, #116
058f4     54 03 90 FD | 	jmp	#LR__0455
058f8                 | LR__0348
058f8     6C FA 05 F6 | 	mov	result1, #108
058fc     4C 03 90 FD | 	jmp	#LR__0455
05900                 | LR__0349
05900     6C FA 05 F6 | 	mov	result1, #108
05904     44 03 90 FD | 	jmp	#LR__0455
05908                 | LR__0350
05908     89 FA 05 F6 | 	mov	result1, #137
0590c     3C 03 90 FD | 	jmp	#LR__0455
05910                 | LR__0351
05910     C2 FA 05 F6 | 	mov	result1, #194
05914     34 03 90 FD | 	jmp	#LR__0455
05918                 | LR__0352
05918     72 FA 05 F6 | 	mov	result1, #114
0591c     2C 03 90 FD | 	jmp	#LR__0455
05920                 | LR__0353
05920     5D FA 05 F6 | 	mov	result1, #93
05924     24 03 90 FD | 	jmp	#LR__0455
05928                 | LR__0354
05928     96 FA 05 F6 | 	mov	result1, #150
0592c     1C 03 90 FD | 	jmp	#LR__0455
05930                 | LR__0355
05930     43 FA 05 F6 | 	mov	result1, #67
05934     14 03 90 FD | 	jmp	#LR__0455
05938                 | LR__0356
05938     43 FA 05 F6 | 	mov	result1, #67
0593c     0C 03 90 FD | 	jmp	#LR__0455
05940                 | LR__0357
05940     43 FA 05 F6 | 	mov	result1, #67
05944     04 03 90 FD | 	jmp	#LR__0455
05948                 | LR__0358
05948     5A FA 05 F6 | 	mov	result1, #90
0594c     FC 02 90 FD | 	jmp	#LR__0455
05950                 | LR__0359
05950     AB FA 05 F6 | 	mov	result1, #171
05954     F4 02 90 FD | 	jmp	#LR__0455
05958                 | LR__0360
05958     BD FA 05 F6 | 	mov	result1, #189
0595c     EC 02 90 FD | 	jmp	#LR__0455
05960                 | LR__0361
05960     BD FA 05 F6 | 	mov	result1, #189
05964     E4 02 90 FD | 	jmp	#LR__0455
05968                 | LR__0362
05968     46 FA 05 F6 | 	mov	result1, #70
0596c     DC 02 90 FD | 	jmp	#LR__0455
05970                 | LR__0363
05970     46 FA 05 F6 | 	mov	result1, #70
05974     D4 02 90 FD | 	jmp	#LR__0455
05978                 | LR__0364
05978     71 FA 05 F6 | 	mov	result1, #113
0597c     CC 02 90 FD | 	jmp	#LR__0455
05980                 | LR__0365
05980     71 FA 05 F6 | 	mov	result1, #113
05984     C4 02 90 FD | 	jmp	#LR__0455
05988                 | LR__0366
05988     60 FA 05 F6 | 	mov	result1, #96
0598c     BC 02 90 FD | 	jmp	#LR__0455
05990                 | LR__0367
05990     4A FA 05 F6 | 	mov	result1, #74
05994     B4 02 90 FD | 	jmp	#LR__0455
05998                 | LR__0368
05998     4A FA 05 F6 | 	mov	result1, #74
0599c     AC 02 90 FD | 	jmp	#LR__0455
059a0                 | LR__0369
059a0     48 FA 05 F6 | 	mov	result1, #72
059a4     A4 02 90 FD | 	jmp	#LR__0455
059a8                 | LR__0370
059a8     48 FA 05 F6 | 	mov	result1, #72
059ac     9C 02 90 FD | 	jmp	#LR__0455
059b0                 | LR__0371
059b0     BB FA 05 F6 | 	mov	result1, #187
059b4     94 02 90 FD | 	jmp	#LR__0455
059b8                 | LR__0372
059b8     A9 FA 05 F6 | 	mov	result1, #169
059bc     8C 02 90 FD | 	jmp	#LR__0455
059c0                 | LR__0373
059c0     4E FA 05 F6 | 	mov	result1, #78
059c4     84 02 90 FD | 	jmp	#LR__0455
059c8                 | LR__0374
059c8     4E FA 05 F6 | 	mov	result1, #78
059cc     7C 02 90 FD | 	jmp	#LR__0455
059d0                 | LR__0375
059d0     58 FA 05 F6 | 	mov	result1, #88
059d4     74 02 90 FD | 	jmp	#LR__0455
059d8                 | LR__0376
059d8     5F FA 05 F6 | 	mov	result1, #95
059dc     6C 02 90 FD | 	jmp	#LR__0455
059e0                 | LR__0377
059e0     5F FA 05 F6 | 	mov	result1, #95
059e4     64 02 90 FD | 	jmp	#LR__0455
059e8                 | LR__0378
059e8     B5 FA 05 F6 | 	mov	result1, #181
059ec     5C 02 90 FD | 	jmp	#LR__0455
059f0                 | LR__0379
059f0     4C FA 05 F6 | 	mov	result1, #76
059f4     54 02 90 FD | 	jmp	#LR__0455
059f8                 | LR__0380
059f8     4C FA 05 F6 | 	mov	result1, #76
059fc     4C 02 90 FD | 	jmp	#LR__0455
05a00                 | LR__0381
05a00     52 FA 05 F6 | 	mov	result1, #82
05a04     44 02 90 FD | 	jmp	#LR__0455
05a08                 | LR__0382
05a08     52 FA 05 F6 | 	mov	result1, #82
05a0c     3C 02 90 FD | 	jmp	#LR__0455
05a10                 | LR__0383
05a10     97 FA 05 F6 | 	mov	result1, #151
05a14     34 02 90 FD | 	jmp	#LR__0455
05a18                 | LR__0384
05a18     C6 FA 05 F6 | 	mov	result1, #198
05a1c     2C 02 90 FD | 	jmp	#LR__0455
05a20                 | LR__0385
05a20     61 FA 05 F6 | 	mov	result1, #97
05a24     24 02 90 FD | 	jmp	#LR__0455
05a28                 | LR__0386
05a28     61 FA 05 F6 | 	mov	result1, #97
05a2c     1C 02 90 FD | 	jmp	#LR__0455
05a30                 | LR__0387
05a30     63 FA 05 F6 | 	mov	result1, #99
05a34     14 02 90 FD | 	jmp	#LR__0455
05a38                 | LR__0388
05a38     41 FA 05 F6 | 	mov	result1, #65
05a3c     0C 02 90 FD | 	jmp	#LR__0455
05a40                 | LR__0389
05a40     4B FA 05 F6 | 	mov	result1, #75
05a44     04 02 90 FD | 	jmp	#LR__0455
05a48                 | LR__0390
05a48     4B FA 05 F6 | 	mov	result1, #75
05a4c     FC 01 90 FD | 	jmp	#LR__0455
05a50                 | LR__0391
05a50     C1 FA 05 F6 | 	mov	result1, #193
05a54     F4 01 90 FD | 	jmp	#LR__0455
05a58                 | LR__0392
05a58     B3 FA 05 F6 | 	mov	result1, #179
05a5c     EC 01 90 FD | 	jmp	#LR__0455
05a60                 | LR__0393
05a60     5E FA 05 F6 | 	mov	result1, #94
05a64     E4 01 90 FD | 	jmp	#LR__0455
05a68                 | LR__0394
05a68     5E FA 05 F6 | 	mov	result1, #94
05a6c     DC 01 90 FD | 	jmp	#LR__0455
05a70                 | LR__0395
05a70     7C FA 05 F6 | 	mov	result1, #124
05a74     D4 01 90 FD | 	jmp	#LR__0455
05a78                 | LR__0396
05a78     7E FA 05 F6 | 	mov	result1, #126
05a7c     CC 01 90 FD | 	jmp	#LR__0455
05a80                 | LR__0397
05a80     7D FA 05 F6 | 	mov	result1, #125
05a84     C4 01 90 FD | 	jmp	#LR__0455
05a88                 | LR__0398
05a88     7F FA 05 F6 | 	mov	result1, #127
05a8c     BC 01 90 FD | 	jmp	#LR__0455
05a90                 | LR__0399
05a90     80 FA 05 F6 | 	mov	result1, #128
05a94     B4 01 90 FD | 	jmp	#LR__0455
05a98                 | LR__0400
05a98     55 FA 05 F6 | 	mov	result1, #85
05a9c     AC 01 90 FD | 	jmp	#LR__0455
05aa0                 | LR__0401
05aa0     75 FA 05 F6 | 	mov	result1, #117
05aa4     A4 01 90 FD | 	jmp	#LR__0455
05aa8                 | LR__0402
05aa8     75 FA 05 F6 | 	mov	result1, #117
05aac     9C 01 90 FD | 	jmp	#LR__0455
05ab0                 | LR__0403
05ab0     BA FA 05 F6 | 	mov	result1, #186
05ab4     94 01 90 FD | 	jmp	#LR__0455
05ab8                 | LR__0404
05ab8     42 FA 05 F6 | 	mov	result1, #66
05abc     8C 01 90 FD | 	jmp	#LR__0455
05ac0                 | LR__0405
05ac0     42 FA 05 F6 | 	mov	result1, #66
05ac4     84 01 90 FD | 	jmp	#LR__0455
05ac8                 | LR__0406
05ac8     95 FA 05 F6 | 	mov	result1, #149
05acc     7C 01 90 FD | 	jmp	#LR__0455
05ad0                 | LR__0407
05ad0     AC FA 05 F6 | 	mov	result1, #172
05ad4     74 01 90 FD | 	jmp	#LR__0455
05ad8                 | LR__0408
05ad8     81 FA 05 F6 | 	mov	result1, #129
05adc     6C 01 90 FD | 	jmp	#LR__0455
05ae0                 | LR__0409
05ae0     81 FA 05 F6 | 	mov	result1, #129
05ae4     64 01 90 FD | 	jmp	#LR__0455
05ae8                 | LR__0410
05ae8     44 FA 05 F6 | 	mov	result1, #68
05aec     5C 01 90 FD | 	jmp	#LR__0455
05af0                 | LR__0411
05af0     44 FA 05 F6 | 	mov	result1, #68
05af4     54 01 90 FD | 	jmp	#LR__0455
05af8                 | LR__0412
05af8     BC FA 05 F6 | 	mov	result1, #188
05afc     4C 01 90 FD | 	jmp	#LR__0455
05b00                 | LR__0413
05b00     88 FA 05 F6 | 	mov	result1, #136
05b04     44 01 90 FD | 	jmp	#LR__0455
05b08                 | LR__0414
05b08     B6 FA 05 F6 | 	mov	result1, #182
05b0c     3C 01 90 FD | 	jmp	#LR__0455
05b10                 | LR__0415
05b10     92 FA 05 F6 | 	mov	result1, #146
05b14     34 01 90 FD | 	jmp	#LR__0455
05b18                 | LR__0416
05b18     BE FA 05 F6 | 	mov	result1, #190
05b1c     2C 01 90 FD | 	jmp	#LR__0455
05b20                 | LR__0417
05b20     BE FA 05 F6 | 	mov	result1, #190
05b24     24 01 90 FD | 	jmp	#LR__0455
05b28                 | LR__0418
05b28     C7 FA 05 F6 | 	mov	result1, #199
05b2c     1C 01 90 FD | 	jmp	#LR__0455
05b30                 | LR__0419
05b30     AA FA 05 F6 | 	mov	result1, #170
05b34     14 01 90 FD | 	jmp	#LR__0455
05b38                 | LR__0420
05b38     4D FA 05 F6 | 	mov	result1, #77
05b3c     0C 01 90 FD | 	jmp	#LR__0455
05b40                 | LR__0421
05b40     51 FA 05 F6 | 	mov	result1, #81
05b44     04 01 90 FD | 	jmp	#LR__0455
05b48                 | LR__0422
05b48     51 FA 05 F6 | 	mov	result1, #81
05b4c     FC 00 90 FD | 	jmp	#LR__0455
05b50                 | LR__0423
05b50     8E FA 05 F6 | 	mov	result1, #142
05b54     F4 00 90 FD | 	jmp	#LR__0455
05b58                 | LR__0424
05b58     8E FA 05 F6 | 	mov	result1, #142
05b5c     EC 00 90 FD | 	jmp	#LR__0455
05b60                 | LR__0425
05b60     90 FA 05 F6 | 	mov	result1, #144
05b64     E4 00 90 FD | 	jmp	#LR__0455
05b68                 | LR__0426
05b68     90 FA 05 F6 | 	mov	result1, #144
05b6c     DC 00 90 FD | 	jmp	#LR__0455
05b70                 | LR__0427
05b70     8D FA 05 F6 | 	mov	result1, #141
05b74     D4 00 90 FD | 	jmp	#LR__0455
05b78                 | LR__0428
05b78     8D FA 05 F6 | 	mov	result1, #141
05b7c     CC 00 90 FD | 	jmp	#LR__0455
05b80                 | LR__0429
05b80     8C FA 05 F6 | 	mov	result1, #140
05b84     C4 00 90 FD | 	jmp	#LR__0455
05b88                 | LR__0430
05b88     8C FA 05 F6 | 	mov	result1, #140
05b8c     BC 00 90 FD | 	jmp	#LR__0455
05b90                 | LR__0431
05b90     91 FA 05 F6 | 	mov	result1, #145
05b94     B4 00 90 FD | 	jmp	#LR__0455
05b98                 | LR__0432
05b98     91 FA 05 F6 | 	mov	result1, #145
05b9c     AC 00 90 FD | 	jmp	#LR__0455
05ba0                 | LR__0433
05ba0     8B FA 05 F6 | 	mov	result1, #139
05ba4     A4 00 90 FD | 	jmp	#LR__0455
05ba8                 | LR__0434
05ba8     8B FA 05 F6 | 	mov	result1, #139
05bac     9C 00 90 FD | 	jmp	#LR__0455
05bb0                 | LR__0435
05bb0     8F FA 05 F6 | 	mov	result1, #143
05bb4     94 00 90 FD | 	jmp	#LR__0455
05bb8                 | LR__0436
05bb8     8F FA 05 F6 | 	mov	result1, #143
05bbc     8C 00 90 FD | 	jmp	#LR__0455
05bc0                 | LR__0437
05bc0     8F FA 05 F6 | 	mov	result1, #143
05bc4     84 00 90 FD | 	jmp	#LR__0455
05bc8                 | LR__0438
05bc8     B2 FA 05 F6 | 	mov	result1, #178
05bcc     7C 00 90 FD | 	jmp	#LR__0455
05bd0                 | LR__0439
05bd0     B2 FA 05 F6 | 	mov	result1, #178
05bd4     74 00 90 FD | 	jmp	#LR__0455
05bd8                 | LR__0440
05bd8     75 FA 05 F6 | 	mov	result1, #117
05bdc     6C 00 90 FD | 	jmp	#LR__0455
05be0                 | LR__0441
05be0     75 FA 05 F6 | 	mov	result1, #117
05be4     64 00 90 FD | 	jmp	#LR__0455
05be8                 | LR__0442
05be8     6D FA 05 F6 | 	mov	result1, #109
05bec     5C 00 90 FD | 	jmp	#LR__0455
05bf0                 | LR__0443
05bf0     6D FA 05 F6 | 	mov	result1, #109
05bf4     54 00 90 FD | 	jmp	#LR__0455
05bf8                 | LR__0444
05bf8     5B FA 05 F6 | 	mov	result1, #91
05bfc     4C 00 90 FD | 	jmp	#LR__0455
05c00                 | LR__0445
05c00     56 FA 05 F6 | 	mov	result1, #86
05c04     44 00 90 FD | 	jmp	#LR__0455
05c08                 | LR__0446
05c08     56 FA 05 F6 | 	mov	result1, #86
05c0c     3C 00 90 FD | 	jmp	#LR__0455
05c10                 | LR__0447
05c10     70 FA 05 F6 | 	mov	result1, #112
05c14     34 00 90 FD | 	jmp	#LR__0455
05c18                 | LR__0448
05c18     70 FA 05 F6 | 	mov	result1, #112
05c1c     2C 00 90 FD | 	jmp	#LR__0455
05c20                 | LR__0449
05c20     57 FA 05 F6 | 	mov	result1, #87
05c24     24 00 90 FD | 	jmp	#LR__0455
05c28                 | LR__0450
05c28     57 FA 05 F6 | 	mov	result1, #87
05c2c     1C 00 90 FD | 	jmp	#LR__0455
05c30                 | LR__0451
05c30     79 FA 05 F6 | 	mov	result1, #121
05c34     14 00 90 FD | 	jmp	#LR__0455
05c38                 | LR__0452
05c38     77 FA 05 F6 | 	mov	result1, #119
05c3c     0C 00 90 FD | 	jmp	#LR__0455
05c40                 | LR__0453
05c40     78 FA 05 F6 | 	mov	result1, #120
05c44     04 00 90 FD | 	jmp	#LR__0455
05c48                 | LR__0454
05c48     00 FA 05 F6 | 	mov	result1, #0
05c4c                 | LR__0455
05c4c     A7 F0 03 F6 | 	mov	ptra, fp
05c50     B2 00 A0 FD | 	call	#popregs_
05c54                 | _iscommand_ret
05c54     2D 00 64 FD | 	ret
05c58                 | 
05c58                 | ' 
05c58                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05c58                 | ' 
05c58                 | ' function isfunction(s as string) as ubyte
05c58                 | _isfunction
05c58     01 4A 05 F6 | 	mov	COUNT_, #1
05c5c     A8 00 A0 FD | 	call	#pushregs_
05c60                 | ' 
05c60                 | ' select case s
05c60     09 27 02 F6 | 	mov	local01, arg01
05c64     AF 01 00 FF 
05c68     50 15 06 F6 | 	mov	arg02, ##@LR__5656
05c6c     13 13 02 F6 | 	mov	arg01, local01
05c70     F4 02 B2 FD | 	call	#__system___string_cmp
05c74     00 FA 0D F2 | 	cmp	result1, #0 wz
05c78     E4 04 90 AD |  if_e	jmp	#LR__0460
05c7c     AF 01 00 FF 
05c80     54 15 06 F6 | 	mov	arg02, ##@LR__5657
05c84     13 13 02 F6 | 	mov	arg01, local01
05c88     DC 02 B2 FD | 	call	#__system___string_cmp
05c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05c90     D4 04 90 AD |  if_e	jmp	#LR__0461
05c94     AF 01 00 FF 
05c98     59 15 06 F6 | 	mov	arg02, ##@LR__5658
05c9c     13 13 02 F6 | 	mov	arg01, local01
05ca0     C4 02 B2 FD | 	call	#__system___string_cmp
05ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca8     C4 04 90 AD |  if_e	jmp	#LR__0462
05cac     AF 01 00 FF 
05cb0     5D 15 06 F6 | 	mov	arg02, ##@LR__5659
05cb4     13 13 02 F6 | 	mov	arg01, local01
05cb8     AC 02 B2 FD | 	call	#__system___string_cmp
05cbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc0     B4 04 90 AD |  if_e	jmp	#LR__0463
05cc4     AF 01 00 FF 
05cc8     62 15 06 F6 | 	mov	arg02, ##@LR__5660
05ccc     13 13 02 F6 | 	mov	arg01, local01
05cd0     94 02 B2 FD | 	call	#__system___string_cmp
05cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05cd8     A4 04 90 AD |  if_e	jmp	#LR__0464
05cdc     AF 01 00 FF 
05ce0     66 15 06 F6 | 	mov	arg02, ##@LR__5661
05ce4     13 13 02 F6 | 	mov	arg01, local01
05ce8     7C 02 B2 FD | 	call	#__system___string_cmp
05cec     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf0     94 04 90 AD |  if_e	jmp	#LR__0465
05cf4     AF 01 00 FF 
05cf8     6B 15 06 F6 | 	mov	arg02, ##@LR__5662
05cfc     13 13 02 F6 | 	mov	arg01, local01
05d00     64 02 B2 FD | 	call	#__system___string_cmp
05d04     00 FA 0D F2 | 	cmp	result1, #0 wz
05d08     84 04 90 AD |  if_e	jmp	#LR__0466
05d0c     AF 01 00 FF 
05d10     6F 15 06 F6 | 	mov	arg02, ##@LR__5663
05d14     13 13 02 F6 | 	mov	arg01, local01
05d18     4C 02 B2 FD | 	call	#__system___string_cmp
05d1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d20     74 04 90 AD |  if_e	jmp	#LR__0467
05d24     AF 01 00 FF 
05d28     74 15 06 F6 | 	mov	arg02, ##@LR__5664
05d2c     13 13 02 F6 | 	mov	arg01, local01
05d30     34 02 B2 FD | 	call	#__system___string_cmp
05d34     00 FA 0D F2 | 	cmp	result1, #0 wz
05d38     64 04 90 AD |  if_e	jmp	#LR__0468
05d3c     AF 01 00 FF 
05d40     79 15 06 F6 | 	mov	arg02, ##@LR__5665
05d44     13 13 02 F6 | 	mov	arg01, local01
05d48     1C 02 B2 FD | 	call	#__system___string_cmp
05d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d50     54 04 90 AD |  if_e	jmp	#LR__0469
05d54     AF 01 00 FF 
05d58     7D 15 06 F6 | 	mov	arg02, ##@LR__5666
05d5c     13 13 02 F6 | 	mov	arg01, local01
05d60     04 02 B2 FD | 	call	#__system___string_cmp
05d64     00 FA 0D F2 | 	cmp	result1, #0 wz
05d68     44 04 90 AD |  if_e	jmp	#LR__0470
05d6c     AF 01 00 FF 
05d70     83 15 06 F6 | 	mov	arg02, ##@LR__5667
05d74     13 13 02 F6 | 	mov	arg01, local01
05d78     EC 01 B2 FD | 	call	#__system___string_cmp
05d7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05d80     34 04 90 AD |  if_e	jmp	#LR__0471
05d84     AF 01 00 FF 
05d88     8C 15 06 F6 | 	mov	arg02, ##@LR__5668
05d8c     13 13 02 F6 | 	mov	arg01, local01
05d90     D4 01 B2 FD | 	call	#__system___string_cmp
05d94     00 FA 0D F2 | 	cmp	result1, #0 wz
05d98     24 04 90 AD |  if_e	jmp	#LR__0472
05d9c     AF 01 00 FF 
05da0     90 15 06 F6 | 	mov	arg02, ##@LR__5669
05da4     13 13 02 F6 | 	mov	arg01, local01
05da8     BC 01 B2 FD | 	call	#__system___string_cmp
05dac     00 FA 0D F2 | 	cmp	result1, #0 wz
05db0     14 04 90 AD |  if_e	jmp	#LR__0473
05db4     AF 01 00 FF 
05db8     94 15 06 F6 | 	mov	arg02, ##@LR__5670
05dbc     13 13 02 F6 | 	mov	arg01, local01
05dc0     A4 01 B2 FD | 	call	#__system___string_cmp
05dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05dc8     04 04 90 AD |  if_e	jmp	#LR__0474
05dcc     AF 01 00 FF 
05dd0     9D 15 06 F6 | 	mov	arg02, ##@LR__5671
05dd4     13 13 02 F6 | 	mov	arg01, local01
05dd8     8C 01 B2 FD | 	call	#__system___string_cmp
05ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
05de0     F4 03 90 AD |  if_e	jmp	#LR__0475
05de4     AF 01 00 FF 
05de8     A1 15 06 F6 | 	mov	arg02, ##@LR__5672
05dec     13 13 02 F6 | 	mov	arg01, local01
05df0     74 01 B2 FD | 	call	#__system___string_cmp
05df4     00 FA 0D F2 | 	cmp	result1, #0 wz
05df8     E4 03 90 AD |  if_e	jmp	#LR__0476
05dfc     AF 01 00 FF 
05e00     AF 15 06 F6 | 	mov	arg02, ##@LR__5673
05e04     13 13 02 F6 | 	mov	arg01, local01
05e08     5C 01 B2 FD | 	call	#__system___string_cmp
05e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e10     D4 03 90 AD |  if_e	jmp	#LR__0477
05e14     AF 01 00 FF 
05e18     BC 15 06 F6 | 	mov	arg02, ##@LR__5674
05e1c     13 13 02 F6 | 	mov	arg01, local01
05e20     44 01 B2 FD | 	call	#__system___string_cmp
05e24     00 FA 0D F2 | 	cmp	result1, #0 wz
05e28     C4 03 90 AD |  if_e	jmp	#LR__0478
05e2c     AF 01 00 FF 
05e30     C4 15 06 F6 | 	mov	arg02, ##@LR__5675
05e34     13 13 02 F6 | 	mov	arg01, local01
05e38     2C 01 B2 FD | 	call	#__system___string_cmp
05e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e40     B4 03 90 AD |  if_e	jmp	#LR__0479
05e44     AF 01 00 FF 
05e48     C9 15 06 F6 | 	mov	arg02, ##@LR__5676
05e4c     13 13 02 F6 | 	mov	arg01, local01
05e50     14 01 B2 FD | 	call	#__system___string_cmp
05e54     00 FA 0D F2 | 	cmp	result1, #0 wz
05e58     A4 03 90 AD |  if_e	jmp	#LR__0480
05e5c     AF 01 00 FF 
05e60     D0 15 06 F6 | 	mov	arg02, ##@LR__5677
05e64     13 13 02 F6 | 	mov	arg01, local01
05e68     FC 00 B2 FD | 	call	#__system___string_cmp
05e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05e70     94 03 90 AD |  if_e	jmp	#LR__0481
05e74     AF 01 00 FF 
05e78     D4 15 06 F6 | 	mov	arg02, ##@LR__5678
05e7c     13 13 02 F6 | 	mov	arg01, local01
05e80     E4 00 B2 FD | 	call	#__system___string_cmp
05e84     00 FA 0D F2 | 	cmp	result1, #0 wz
05e88     84 03 90 AD |  if_e	jmp	#LR__0482
05e8c     AF 01 00 FF 
05e90     DA 15 06 F6 | 	mov	arg02, ##@LR__5679
05e94     13 13 02 F6 | 	mov	arg01, local01
05e98     CC 00 B2 FD | 	call	#__system___string_cmp
05e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05ea0     74 03 90 AD |  if_e	jmp	#LR__0483
05ea4     AF 01 00 FF 
05ea8     DE 15 06 F6 | 	mov	arg02, ##@LR__5680
05eac     13 13 02 F6 | 	mov	arg01, local01
05eb0     B4 00 B2 FD | 	call	#__system___string_cmp
05eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb8     64 03 90 AD |  if_e	jmp	#LR__0484
05ebc     AF 01 00 FF 
05ec0     E2 15 06 F6 | 	mov	arg02, ##@LR__5681
05ec4     13 13 02 F6 | 	mov	arg01, local01
05ec8     9C 00 B2 FD | 	call	#__system___string_cmp
05ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed0     54 03 90 AD |  if_e	jmp	#LR__0485
05ed4     AF 01 00 FF 
05ed8     E8 15 06 F6 | 	mov	arg02, ##@LR__5682
05edc     13 13 02 F6 | 	mov	arg01, local01
05ee0     84 00 B2 FD | 	call	#__system___string_cmp
05ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee8     44 03 90 AD |  if_e	jmp	#LR__0486
05eec     AF 01 00 FF 
05ef0     ED 15 06 F6 | 	mov	arg02, ##@LR__5683
05ef4     13 13 02 F6 | 	mov	arg01, local01
05ef8     6C 00 B2 FD | 	call	#__system___string_cmp
05efc     00 FA 0D F2 | 	cmp	result1, #0 wz
05f00     34 03 90 AD |  if_e	jmp	#LR__0487
05f04     AF 01 00 FF 
05f08     F4 15 06 F6 | 	mov	arg02, ##@LR__5684
05f0c     13 13 02 F6 | 	mov	arg01, local01
05f10     54 00 B2 FD | 	call	#__system___string_cmp
05f14     00 FA 0D F2 | 	cmp	result1, #0 wz
05f18     24 03 90 AD |  if_e	jmp	#LR__0488
05f1c     AF 01 00 FF 
05f20     FB 15 06 F6 | 	mov	arg02, ##@LR__5685
05f24     13 13 02 F6 | 	mov	arg01, local01
05f28     3C 00 B2 FD | 	call	#__system___string_cmp
05f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f30     14 03 90 AD |  if_e	jmp	#LR__0489
05f34     B0 01 00 FF 
05f38     02 14 06 F6 | 	mov	arg02, ##@LR__5686
05f3c     13 13 02 F6 | 	mov	arg01, local01
05f40     24 00 B2 FD | 	call	#__system___string_cmp
05f44     00 FA 0D F2 | 	cmp	result1, #0 wz
05f48     04 03 90 AD |  if_e	jmp	#LR__0490
05f4c     B0 01 00 FF 
05f50     09 14 06 F6 | 	mov	arg02, ##@LR__5687
05f54     13 13 02 F6 | 	mov	arg01, local01
05f58     0C 00 B2 FD | 	call	#__system___string_cmp
05f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f60     F4 02 90 AD |  if_e	jmp	#LR__0491
05f64     B0 01 00 FF 
05f68     0E 14 06 F6 | 	mov	arg02, ##@LR__5688
05f6c     13 13 02 F6 | 	mov	arg01, local01
05f70     F4 FF B1 FD | 	call	#__system___string_cmp
05f74     00 FA 0D F2 | 	cmp	result1, #0 wz
05f78     E4 02 90 AD |  if_e	jmp	#LR__0492
05f7c     B0 01 00 FF 
05f80     13 14 06 F6 | 	mov	arg02, ##@LR__5689
05f84     13 13 02 F6 | 	mov	arg01, local01
05f88     DC FF B1 FD | 	call	#__system___string_cmp
05f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f90     D4 02 90 AD |  if_e	jmp	#LR__0493
05f94     B0 01 00 FF 
05f98     18 14 06 F6 | 	mov	arg02, ##@LR__5690
05f9c     13 13 02 F6 | 	mov	arg01, local01
05fa0     C4 FF B1 FD | 	call	#__system___string_cmp
05fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa8     C4 02 90 AD |  if_e	jmp	#LR__0494
05fac     B0 01 00 FF 
05fb0     1E 14 06 F6 | 	mov	arg02, ##@LR__5691
05fb4     13 13 02 F6 | 	mov	arg01, local01
05fb8     AC FF B1 FD | 	call	#__system___string_cmp
05fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc0     B4 02 90 AD |  if_e	jmp	#LR__0495
05fc4     B0 01 00 FF 
05fc8     24 14 06 F6 | 	mov	arg02, ##@LR__5692
05fcc     13 13 02 F6 | 	mov	arg01, local01
05fd0     94 FF B1 FD | 	call	#__system___string_cmp
05fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fd8     A4 02 90 AD |  if_e	jmp	#LR__0496
05fdc     B0 01 00 FF 
05fe0     2A 14 06 F6 | 	mov	arg02, ##@LR__5693
05fe4     13 13 02 F6 | 	mov	arg01, local01
05fe8     7C FF B1 FD | 	call	#__system___string_cmp
05fec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff0     94 02 90 AD |  if_e	jmp	#LR__0497
05ff4     B0 01 00 FF 
05ff8     2F 14 06 F6 | 	mov	arg02, ##@LR__5694
05ffc     13 13 02 F6 | 	mov	arg01, local01
06000     64 FF B1 FD | 	call	#__system___string_cmp
06004     00 FA 0D F2 | 	cmp	result1, #0 wz
06008     84 02 90 AD |  if_e	jmp	#LR__0498
0600c     B0 01 00 FF 
06010     34 14 06 F6 | 	mov	arg02, ##@LR__5695
06014     13 13 02 F6 | 	mov	arg01, local01
06018     4C FF B1 FD | 	call	#__system___string_cmp
0601c     00 FA 0D F2 | 	cmp	result1, #0 wz
06020     74 02 90 AD |  if_e	jmp	#LR__0499
06024     B0 01 00 FF 
06028     3C 14 06 F6 | 	mov	arg02, ##@LR__5696
0602c     13 13 02 F6 | 	mov	arg01, local01
06030     34 FF B1 FD | 	call	#__system___string_cmp
06034     00 FA 0D F2 | 	cmp	result1, #0 wz
06038     64 02 90 AD |  if_e	jmp	#LR__0500
0603c     B0 01 00 FF 
06040     42 14 06 F6 | 	mov	arg02, ##@LR__5697
06044     13 13 02 F6 | 	mov	arg01, local01
06048     1C FF B1 FD | 	call	#__system___string_cmp
0604c     00 FA 0D F2 | 	cmp	result1, #0 wz
06050     54 02 90 AD |  if_e	jmp	#LR__0501
06054     B0 01 00 FF 
06058     49 14 06 F6 | 	mov	arg02, ##@LR__5698
0605c     13 13 02 F6 | 	mov	arg01, local01
06060     04 FF B1 FD | 	call	#__system___string_cmp
06064     00 FA 0D F2 | 	cmp	result1, #0 wz
06068     44 02 90 AD |  if_e	jmp	#LR__0502
0606c     B0 01 00 FF 
06070     4F 14 06 F6 | 	mov	arg02, ##@LR__5699
06074     13 13 02 F6 | 	mov	arg01, local01
06078     EC FE B1 FD | 	call	#__system___string_cmp
0607c     00 FA 0D F2 | 	cmp	result1, #0 wz
06080     34 02 90 AD |  if_e	jmp	#LR__0503
06084     B0 01 00 FF 
06088     55 14 06 F6 | 	mov	arg02, ##@LR__5700
0608c     13 13 02 F6 | 	mov	arg01, local01
06090     D4 FE B1 FD | 	call	#__system___string_cmp
06094     00 FA 0D F2 | 	cmp	result1, #0 wz
06098     24 02 90 AD |  if_e	jmp	#LR__0504
0609c     B0 01 00 FF 
060a0     59 14 06 F6 | 	mov	arg02, ##@LR__5701
060a4     13 13 02 F6 | 	mov	arg01, local01
060a8     BC FE B1 FD | 	call	#__system___string_cmp
060ac     00 FA 0D F2 | 	cmp	result1, #0 wz
060b0     14 02 90 AD |  if_e	jmp	#LR__0505
060b4     B0 01 00 FF 
060b8     5D 14 06 F6 | 	mov	arg02, ##@LR__5702
060bc     13 13 02 F6 | 	mov	arg01, local01
060c0     A4 FE B1 FD | 	call	#__system___string_cmp
060c4     00 FA 0D F2 | 	cmp	result1, #0 wz
060c8     04 02 90 AD |  if_e	jmp	#LR__0506
060cc     B0 01 00 FF 
060d0     61 14 06 F6 | 	mov	arg02, ##@LR__5703
060d4     13 13 02 F6 | 	mov	arg01, local01
060d8     8C FE B1 FD | 	call	#__system___string_cmp
060dc     00 FA 0D F2 | 	cmp	result1, #0 wz
060e0     F4 01 90 AD |  if_e	jmp	#LR__0507
060e4     B0 01 00 FF 
060e8     67 14 06 F6 | 	mov	arg02, ##@LR__5704
060ec     13 13 02 F6 | 	mov	arg01, local01
060f0     74 FE B1 FD | 	call	#__system___string_cmp
060f4     00 FA 0D F2 | 	cmp	result1, #0 wz
060f8     E4 01 90 AD |  if_e	jmp	#LR__0508
060fc     B0 01 00 FF 
06100     6D 14 06 F6 | 	mov	arg02, ##@LR__5705
06104     13 13 02 F6 | 	mov	arg01, local01
06108     5C FE B1 FD | 	call	#__system___string_cmp
0610c     00 FA 0D F2 | 	cmp	result1, #0 wz
06110     D4 01 90 AD |  if_e	jmp	#LR__0509
06114     B0 01 00 FF 
06118     72 14 06 F6 | 	mov	arg02, ##@LR__5706
0611c     13 13 02 F6 | 	mov	arg01, local01
06120     44 FE B1 FD | 	call	#__system___string_cmp
06124     00 FA 0D F2 | 	cmp	result1, #0 wz
06128     C4 01 90 AD |  if_e	jmp	#LR__0510
0612c     B0 01 00 FF 
06130     76 14 06 F6 | 	mov	arg02, ##@LR__5707
06134     13 13 02 F6 | 	mov	arg01, local01
06138     2C FE B1 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     B4 01 90 AD |  if_e	jmp	#LR__0511
06144     B0 01 00 FF 
06148     7A 14 06 F6 | 	mov	arg02, ##@LR__5708
0614c     13 13 02 F6 | 	mov	arg01, local01
06150     14 FE B1 FD | 	call	#__system___string_cmp
06154     00 FA 0D F2 | 	cmp	result1, #0 wz
06158     A4 01 90 AD |  if_e	jmp	#LR__0512
0615c     A8 01 90 FD | 	jmp	#LR__0513
06160                 | LR__0460
06160     9E FA 05 F6 | 	mov	result1, #158
06164     A4 01 90 FD | 	jmp	#LR__0514
06168                 | LR__0461
06168     85 FA 05 F6 | 	mov	result1, #133
0616c     9C 01 90 FD | 	jmp	#LR__0514
06170                 | LR__0462
06170     9B FA 05 F6 | 	mov	result1, #155
06174     94 01 90 FD | 	jmp	#LR__0514
06178                 | LR__0463
06178     9B FA 05 F6 | 	mov	result1, #155
0617c     8C 01 90 FD | 	jmp	#LR__0514
06180                 | LR__0464
06180     A7 FA 05 F6 | 	mov	result1, #167
06184     84 01 90 FD | 	jmp	#LR__0514
06188                 | LR__0465
06188     84 FA 05 F6 | 	mov	result1, #132
0618c     7C 01 90 FD | 	jmp	#LR__0514
06190                 | LR__0466
06190     86 FA 05 F6 | 	mov	result1, #134
06194     74 01 90 FD | 	jmp	#LR__0514
06198                 | LR__0467
06198     A2 FA 05 F6 | 	mov	result1, #162
0619c     6C 01 90 FD | 	jmp	#LR__0514
061a0                 | LR__0468
061a0     9F FA 05 F6 | 	mov	result1, #159
061a4     64 01 90 FD | 	jmp	#LR__0514
061a8                 | LR__0469
061a8     82 FA 05 F6 | 	mov	result1, #130
061ac     5C 01 90 FD | 	jmp	#LR__0514
061b0                 | LR__0470
061b0     99 FA 05 F6 | 	mov	result1, #153
061b4     54 01 90 FD | 	jmp	#LR__0514
061b8                 | LR__0471
061b8     C5 FA 05 F6 | 	mov	result1, #197
061bc     4C 01 90 FD | 	jmp	#LR__0514
061c0                 | LR__0472
061c0     C5 FA 05 F6 | 	mov	result1, #197
061c4     44 01 90 FD | 	jmp	#LR__0514
061c8                 | LR__0473
061c8     9C FA 05 F6 | 	mov	result1, #156
061cc     3C 01 90 FD | 	jmp	#LR__0514
061d0                 | LR__0474
061d0     6F FA 05 F6 | 	mov	result1, #111
061d4     34 01 90 FD | 	jmp	#LR__0514
061d8                 | LR__0475
061d8     6F FA 05 F6 | 	mov	result1, #111
061dc     2C 01 90 FD | 	jmp	#LR__0514
061e0                 | LR__0476
061e0     93 FA 05 F6 | 	mov	result1, #147
061e4     24 01 90 FD | 	jmp	#LR__0514
061e8                 | LR__0477
061e8     94 FA 05 F6 | 	mov	result1, #148
061ec     1C 01 90 FD | 	jmp	#LR__0514
061f0                 | LR__0478
061f0     62 FA 05 F6 | 	mov	result1, #98
061f4     14 01 90 FD | 	jmp	#LR__0514
061f8                 | LR__0479
061f8     A3 FA 05 F6 | 	mov	result1, #163
061fc     0C 01 90 FD | 	jmp	#LR__0514
06200                 | LR__0480
06200     9D FA 05 F6 | 	mov	result1, #157
06204     04 01 90 FD | 	jmp	#LR__0514
06208                 | LR__0481
06208     8A FA 05 F6 | 	mov	result1, #138
0620c     FC 00 90 FD | 	jmp	#LR__0514
06210                 | LR__0482
06210     A4 FA 05 F6 | 	mov	result1, #164
06214     F4 00 90 FD | 	jmp	#LR__0514
06218                 | LR__0483
06218     A8 FA 05 F6 | 	mov	result1, #168
0621c     EC 00 90 FD | 	jmp	#LR__0514
06220                 | LR__0484
06220     AD FA 05 F6 | 	mov	result1, #173
06224     E4 00 90 FD | 	jmp	#LR__0514
06228                 | LR__0485
06228     9A FA 05 F6 | 	mov	result1, #154
0622c     DC 00 90 FD | 	jmp	#LR__0514
06230                 | LR__0486
06230     A6 FA 05 F6 | 	mov	result1, #166
06234     D4 00 90 FD | 	jmp	#LR__0514
06238                 | LR__0487
06238     66 FA 05 F6 | 	mov	result1, #102
0623c     CC 00 90 FD | 	jmp	#LR__0514
06240                 | LR__0488
06240     67 FA 05 F6 | 	mov	result1, #103
06244     C4 00 90 FD | 	jmp	#LR__0514
06248                 | LR__0489
06248     64 FA 05 F6 | 	mov	result1, #100
0624c     BC 00 90 FD | 	jmp	#LR__0514
06250                 | LR__0490
06250     65 FA 05 F6 | 	mov	result1, #101
06254     B4 00 90 FD | 	jmp	#LR__0514
06258                 | LR__0491
06258     C8 FA 05 F6 | 	mov	result1, #200
0625c     AC 00 90 FD | 	jmp	#LR__0514
06260                 | LR__0492
06260     C9 FA 05 F6 | 	mov	result1, #201
06264     A4 00 90 FD | 	jmp	#LR__0514
06268                 | LR__0493
06268     CA FA 05 F6 | 	mov	result1, #202
0626c     9C 00 90 FD | 	jmp	#LR__0514
06270                 | LR__0494
06270     CC FA 05 F6 | 	mov	result1, #204
06274     94 00 90 FD | 	jmp	#LR__0514
06278                 | LR__0495
06278     CD FA 05 F6 | 	mov	result1, #205
0627c     8C 00 90 FD | 	jmp	#LR__0514
06280                 | LR__0496
06280     CE FA 05 F6 | 	mov	result1, #206
06284     84 00 90 FD | 	jmp	#LR__0514
06288                 | LR__0497
06288     CB FA 05 F6 | 	mov	result1, #203
0628c     7C 00 90 FD | 	jmp	#LR__0514
06290                 | LR__0498
06290     98 FA 05 F6 | 	mov	result1, #152
06294     74 00 90 FD | 	jmp	#LR__0514
06298                 | LR__0499
06298     7B FA 05 F6 | 	mov	result1, #123
0629c     6C 00 90 FD | 	jmp	#LR__0514
062a0                 | LR__0500
062a0     76 FA 05 F6 | 	mov	result1, #118
062a4     64 00 90 FD | 	jmp	#LR__0514
062a8                 | LR__0501
062a8     A5 FA 05 F6 | 	mov	result1, #165
062ac     5C 00 90 FD | 	jmp	#LR__0514
062b0                 | LR__0502
062b0     7A FA 05 F6 | 	mov	result1, #122
062b4     54 00 90 FD | 	jmp	#LR__0514
062b8                 | LR__0503
062b8     BF FA 05 F6 | 	mov	result1, #191
062bc     4C 00 90 FD | 	jmp	#LR__0514
062c0                 | LR__0504
062c0     54 FA 05 F6 | 	mov	result1, #84
062c4     44 00 90 FD | 	jmp	#LR__0514
062c8                 | LR__0505
062c8     6B FA 05 F6 | 	mov	result1, #107
062cc     3C 00 90 FD | 	jmp	#LR__0514
062d0                 | LR__0506
062d0     87 FA 05 F6 | 	mov	result1, #135
062d4     34 00 90 FD | 	jmp	#LR__0514
062d8                 | LR__0507
062d8     6A FA 05 F6 | 	mov	result1, #106
062dc     2C 00 90 FD | 	jmp	#LR__0514
062e0                 | LR__0508
062e0     6E FA 05 F6 | 	mov	result1, #110
062e4     24 00 90 FD | 	jmp	#LR__0514
062e8                 | LR__0509
062e8     A1 FA 05 F6 | 	mov	result1, #161
062ec     1C 00 90 FD | 	jmp	#LR__0514
062f0                 | LR__0510
062f0     83 FA 05 F6 | 	mov	result1, #131
062f4     14 00 90 FD | 	jmp	#LR__0514
062f8                 | LR__0511
062f8     A0 FA 05 F6 | 	mov	result1, #160
062fc     0C 00 90 FD | 	jmp	#LR__0514
06300                 | LR__0512
06300     9B FA 05 F6 | 	mov	result1, #155
06304     04 00 90 FD | 	jmp	#LR__0514
06308                 | LR__0513
06308     00 FA 05 F6 | 	mov	result1, #0
0630c                 | LR__0514
0630c     A7 F0 03 F6 | 	mov	ptra, fp
06310     B2 00 A0 FD | 	call	#popregs_
06314                 | _isfunction_ret
06314     2D 00 64 FD | 	ret
06318                 | 
06318                 | ' 
06318                 | ' ' Check if the part is a name
06318                 | ' 
06318                 | ' function isname(s as string) as boolean
06318                 | _isname
06318     0D 4A 05 F6 | 	mov	COUNT_, #13
0631c     A8 00 A0 FD | 	call	#pushregs_
06320     09 27 02 F6 | 	mov	local01, arg01
06324     09 29 02 F6 | 	mov	local02, arg01
06328     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
0632c                 | LR__0520
0632c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06330     01 28 06 51 |  if_ne	add	local02, #1
06334     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06338                 | LR__0521
06338     09 29 82 F1 | 	sub	local02, arg01
0633c     14 FB 01 F6 | 	mov	result1, local02
06340     FD 2A 0A F6 | 	mov	local03, result1 wz
06344     00 FA 05 A6 |  if_e	mov	result1, #0
06348     34 02 90 AD |  if_e	jmp	#LR__0533
0634c     13 13 02 F6 | 	mov	arg01, local01
06350     01 14 06 F6 | 	mov	arg02, #1
06354     01 16 06 F6 | 	mov	arg03, #1
06358     7C 1D B2 FD | 	call	#__system__Mid_S
0635c     FD 2C 02 F6 | 	mov	local04, result1
06360                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
06360     B0 01 00 FF 
06364     81 14 06 F6 | 	mov	arg02, ##@LR__5709
06368     16 13 02 F6 | 	mov	arg01, local04
0636c     F8 FB B1 FD | 	call	#__system___string_cmp
06370     00 FA 55 F2 | 	cmps	result1, #0 wc
06374     18 00 90 CD |  if_b	jmp	#LR__0522
06378     B0 01 00 FF 
0637c     83 14 06 F6 | 	mov	arg02, ##@LR__5710
06380     16 13 02 F6 | 	mov	arg01, local04
06384     E0 FB B1 FD | 	call	#__system___string_cmp
06388     01 FA 55 F2 | 	cmps	result1, #1 wc
0638c     1C 00 90 CD |  if_b	jmp	#LR__0523
06390                 | LR__0522
06390     B0 01 00 FF 
06394     85 14 06 F6 | 	mov	arg02, ##@LR__5711
06398     16 13 02 F6 | 	mov	arg01, local04
0639c     C8 FB B1 FD | 	call	#__system___string_cmp
063a0     00 FA 0D F2 | 	cmp	result1, #0 wz
063a4     00 FA 05 56 |  if_ne	mov	result1, #0
063a8     D4 01 90 5D |  if_ne	jmp	#LR__0533
063ac                 | LR__0523
063ac                 | ' if l>2 then 
063ac     03 2A 56 F2 | 	cmps	local03, #3 wc
063b0     C8 01 90 CD |  if_b	jmp	#LR__0532
063b4                 | '   for i=2 to l
063b4     02 2E 06 F6 | 	mov	local05, #2
063b8     15 31 02 F6 | 	mov	local06, local03
063bc     01 30 06 F1 | 	add	local06, #1
063c0                 | LR__0524
063c0     18 2F 52 F2 | 	cmps	local05, local06 wc
063c4     B4 01 90 3D |  if_ae	jmp	#LR__0531
063c8     13 13 02 F6 | 	mov	arg01, local01
063cc     17 15 02 F6 | 	mov	arg02, local05
063d0     01 16 06 F6 | 	mov	arg03, #1
063d4     00 1D B2 FD | 	call	#__system__Mid_S
063d8     FD 2C 02 F6 | 	mov	local04, result1
063dc                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
063dc     15 2F 52 F2 | 	cmps	local05, local03 wc
063e0     9C 00 90 3D |  if_ae	jmp	#LR__0527
063e4     B0 01 00 FF 
063e8     87 14 06 F6 | 	mov	arg02, ##@LR__5712
063ec     16 13 02 F6 | 	mov	arg01, local04
063f0     74 FB B1 FD | 	call	#__system___string_cmp
063f4     00 FA 55 F2 | 	cmps	result1, #0 wc
063f8     18 00 90 CD |  if_b	jmp	#LR__0525
063fc     B0 01 00 FF 
06400     89 14 06 F6 | 	mov	arg02, ##@LR__5713
06404     16 13 02 F6 | 	mov	arg01, local04
06408     5C FB B1 FD | 	call	#__system___string_cmp
0640c     01 FA 55 F2 | 	cmps	result1, #1 wc
06410     6C 00 90 CD |  if_b	jmp	#LR__0527
06414                 | LR__0525
06414     B0 01 00 FF 
06418     8B 14 06 F6 | 	mov	arg02, ##@LR__5714
0641c     16 13 02 F6 | 	mov	arg01, local04
06420     44 FB B1 FD | 	call	#__system___string_cmp
06424     00 FA 55 F2 | 	cmps	result1, #0 wc
06428     18 00 90 CD |  if_b	jmp	#LR__0526
0642c     B0 01 00 FF 
06430     8D 14 06 F6 | 	mov	arg02, ##@LR__5715
06434     16 13 02 F6 | 	mov	arg01, local04
06438     2C FB B1 FD | 	call	#__system___string_cmp
0643c     01 FA 55 F2 | 	cmps	result1, #1 wc
06440     3C 00 90 CD |  if_b	jmp	#LR__0527
06444                 | LR__0526
06444     B0 01 00 FF 
06448     8F 32 06 F6 | 	mov	local07, ##@LR__5716
0644c     16 13 02 F6 | 	mov	arg01, local04
06450     19 15 02 F6 | 	mov	arg02, local07
06454     10 FB B1 FD | 	call	#__system___string_cmp
06458     00 FA 0D F2 | 	cmp	result1, #0 wz
0645c     20 00 90 AD |  if_e	jmp	#LR__0527
06460     B0 01 00 FF 
06464     91 34 06 F6 | 	mov	local08, ##@LR__5717
06468     16 13 02 F6 | 	mov	arg01, local04
0646c     1A 15 02 F6 | 	mov	arg02, local08
06470     F4 FA B1 FD | 	call	#__system___string_cmp
06474     FD 36 0A F6 | 	mov	local09, result1 wz
06478     00 FA 05 56 |  if_ne	mov	result1, #0
0647c     00 01 90 5D |  if_ne	jmp	#LR__0533
06480                 | LR__0527
06480                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06480     15 2F 0A F2 | 	cmp	local05, local03 wz
06484     EC 00 90 5D |  if_ne	jmp	#LR__0530
06488     B0 01 00 FF 
0648c     93 38 06 F6 | 	mov	local10, ##@LR__5718
06490     16 13 02 F6 | 	mov	arg01, local04
06494     1C 15 02 F6 | 	mov	arg02, local10
06498     CC FA B1 FD | 	call	#__system___string_cmp
0649c     FD 3A 02 F6 | 	mov	local11, result1
064a0     00 3A 56 F2 | 	cmps	local11, #0 wc
064a4     1C 00 90 CD |  if_b	jmp	#LR__0528
064a8     B0 01 00 FF 
064ac     95 14 06 F6 | 	mov	arg02, ##@LR__5719
064b0     16 13 02 F6 | 	mov	arg01, local04
064b4     B0 FA B1 FD | 	call	#__system___string_cmp
064b8     FD 38 02 F6 | 	mov	local10, result1
064bc     01 38 56 F2 | 	cmps	local10, #1 wc
064c0     B0 00 90 CD |  if_b	jmp	#LR__0530
064c4                 | LR__0528
064c4     B0 01 00 FF 
064c8     97 14 06 F6 | 	mov	arg02, ##@LR__5720
064cc     16 13 02 F6 | 	mov	arg01, local04
064d0     94 FA B1 FD | 	call	#__system___string_cmp
064d4     00 FA 55 F2 | 	cmps	result1, #0 wc
064d8     1C 00 90 CD |  if_b	jmp	#LR__0529
064dc     B0 01 00 FF 
064e0     99 36 06 F6 | 	mov	local09, ##@LR__5721
064e4     16 13 02 F6 | 	mov	arg01, local04
064e8     1B 15 02 F6 | 	mov	arg02, local09
064ec     78 FA B1 FD | 	call	#__system___string_cmp
064f0     01 FA 55 F2 | 	cmps	result1, #1 wc
064f4     7C 00 90 CD |  if_b	jmp	#LR__0530
064f8                 | LR__0529
064f8     B0 01 00 FF 
064fc     9B 36 06 F6 | 	mov	local09, ##@LR__5722
06500     16 13 02 F6 | 	mov	arg01, local04
06504     1B 15 02 F6 | 	mov	arg02, local09
06508     5C FA B1 FD | 	call	#__system___string_cmp
0650c     00 FA 4D F2 | 	cmps	result1, #0 wz
06510     60 00 90 AD |  if_e	jmp	#LR__0530
06514     B0 01 00 FF 
06518     9D 34 06 F6 | 	mov	local08, ##@LR__5723
0651c     16 13 02 F6 | 	mov	arg01, local04
06520     1A 15 02 F6 | 	mov	arg02, local08
06524     40 FA B1 FD | 	call	#__system___string_cmp
06528     FD 36 0A F6 | 	mov	local09, result1 wz
0652c     44 00 90 AD |  if_e	jmp	#LR__0530
06530     B0 01 00 FF 
06534     9F 3C 06 F6 | 	mov	local12, ##@LR__5724
06538     1E 35 02 F6 | 	mov	local08, local12
0653c     16 13 02 F6 | 	mov	arg01, local04
06540     1A 15 02 F6 | 	mov	arg02, local08
06544     20 FA B1 FD | 	call	#__system___string_cmp
06548     FD 32 0A F6 | 	mov	local07, result1 wz
0654c     24 00 90 AD |  if_e	jmp	#LR__0530
06550     B0 01 00 FF 
06554     A1 3E 06 F6 | 	mov	local13, ##@LR__5725
06558     1F 3D 02 F6 | 	mov	local12, local13
0655c     16 13 02 F6 | 	mov	arg01, local04
06560     1E 15 02 F6 | 	mov	arg02, local12
06564     00 FA B1 FD | 	call	#__system___string_cmp
06568     FD 34 0A F6 | 	mov	local08, result1 wz
0656c     00 FA 05 56 |  if_ne	mov	result1, #0
06570     0C 00 90 5D |  if_ne	jmp	#LR__0533
06574                 | LR__0530
06574     01 2E 06 F1 | 	add	local05, #1
06578     44 FE 9F FD | 	jmp	#LR__0524
0657c                 | LR__0531
0657c                 | LR__0532
0657c                 | ' return true
0657c     01 FA 65 F6 | 	neg	result1, #1
06580                 | LR__0533
06580     A7 F0 03 F6 | 	mov	ptra, fp
06584     B2 00 A0 FD | 	call	#popregs_
06588                 | _isname_ret
06588     2D 00 64 FD | 	ret
0658c                 | 
0658c                 | ' 
0658c                 | ' ' Check if the part is a number.  
0658c                 | ' 
0658c                 | ' function isnum(s as string) as boolean 
0658c                 | _isnum
0658c     13 4A 05 F6 | 	mov	COUNT_, #19
06590     A8 00 A0 FD | 	call	#pushregs_
06594     09 27 02 F6 | 	mov	local01, arg01
06598     00 28 06 F6 | 	mov	local02, #0
0659c     00 2A 06 F6 | 	mov	local03, #0
065a0     13 13 02 F6 | 	mov	arg01, local01
065a4     09 2D 02 F6 | 	mov	local04, arg01
065a8     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
065ac                 | LR__0540
065ac     16 FB C9 FA | 	rdbyte	result1, local04 wz
065b0     01 2C 06 51 |  if_ne	add	local04, #1
065b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
065b8                 | LR__0541
065b8     09 2D 82 F1 | 	sub	local04, arg01
065bc     16 FB 01 F6 | 	mov	result1, local04
065c0     FD 2E 0A F6 | 	mov	local05, result1 wz
065c4     00 FA 05 A6 |  if_e	mov	result1, #0
065c8     A0 03 90 AD |  if_e	jmp	#LR__0556
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     01 14 06 F6 | 	mov	arg02, #1
065d4     01 16 06 F6 | 	mov	arg03, #1
065d8     FC 1A B2 FD | 	call	#__system__Mid_S
065dc     FD 30 02 F6 | 	mov	local06, result1
065e0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
065e0     B0 01 00 FF 
065e4     A3 14 06 F6 | 	mov	arg02, ##@LR__5726
065e8     18 13 02 F6 | 	mov	arg01, local06
065ec     78 F9 B1 FD | 	call	#__system___string_cmp
065f0     00 FA 55 F2 | 	cmps	result1, #0 wc
065f4     1C 00 90 CD |  if_b	jmp	#LR__0542
065f8     B0 01 00 FF 
065fc     A5 32 06 F6 | 	mov	local07, ##@LR__5727
06600     18 13 02 F6 | 	mov	arg01, local06
06604     19 15 02 F6 | 	mov	arg02, local07
06608     5C F9 B1 FD | 	call	#__system___string_cmp
0660c     01 FA 55 F2 | 	cmps	result1, #1 wc
06610     84 00 90 CD |  if_b	jmp	#LR__0543
06614                 | LR__0542
06614     B0 01 00 FF 
06618     A7 34 06 F6 | 	mov	local08, ##@LR__5728
0661c     1A 33 02 F6 | 	mov	local07, local08
06620     18 13 02 F6 | 	mov	arg01, local06
06624     19 15 02 F6 | 	mov	arg02, local07
06628     3C F9 B1 FD | 	call	#__system___string_cmp
0662c     00 FA 0D F2 | 	cmp	result1, #0 wz
06630     64 00 90 AD |  if_e	jmp	#LR__0543
06634     B0 01 00 FF 
06638     A9 36 06 F6 | 	mov	local09, ##@LR__5729
0663c     1B 35 02 F6 | 	mov	local08, local09
06640     18 13 02 F6 | 	mov	arg01, local06
06644     1A 15 02 F6 | 	mov	arg02, local08
06648     1C F9 B1 FD | 	call	#__system___string_cmp
0664c     FD 32 0A F6 | 	mov	local07, result1 wz
06650     44 00 90 AD |  if_e	jmp	#LR__0543
06654     B0 01 00 FF 
06658     AB 38 06 F6 | 	mov	local10, ##@LR__5730
0665c     1C 37 02 F6 | 	mov	local09, local10
06660     18 13 02 F6 | 	mov	arg01, local06
06664     1B 15 02 F6 | 	mov	arg02, local09
06668     FC F8 B1 FD | 	call	#__system___string_cmp
0666c     FD 34 0A F6 | 	mov	local08, result1 wz
06670     24 00 90 AD |  if_e	jmp	#LR__0543
06674     B0 01 00 FF 
06678     AD 3A 06 F6 | 	mov	local11, ##@LR__5731
0667c     1D 39 02 F6 | 	mov	local10, local11
06680     18 13 02 F6 | 	mov	arg01, local06
06684     1C 15 02 F6 | 	mov	arg02, local10
06688     DC F8 B1 FD | 	call	#__system___string_cmp
0668c     FD 36 0A F6 | 	mov	local09, result1 wz
06690     00 FA 05 56 |  if_ne	mov	result1, #0
06694     D4 02 90 5D |  if_ne	jmp	#LR__0556
06698                 | LR__0543
06698                 | ' if m$="." then ds=1
06698     B0 01 00 FF 
0669c     AF 14 06 F6 | 	mov	arg02, ##@LR__5732
066a0     18 13 02 F6 | 	mov	arg01, local06
066a4     C0 F8 B1 FD | 	call	#__system___string_cmp
066a8     00 FA 0D F2 | 	cmp	result1, #0 wz
066ac     01 28 06 A6 |  if_e	mov	local02, #1
066b0                 | ' if m$="$" then hex=1 else hex=0
066b0     B0 01 00 FF 
066b4     B1 14 06 F6 | 	mov	arg02, ##@LR__5733
066b8     18 13 02 F6 | 	mov	arg01, local06
066bc     A8 F8 B1 FD | 	call	#__system___string_cmp
066c0     00 FA 0D F2 | 	cmp	result1, #0 wz
066c4     01 3C 06 A6 |  if_e	mov	local12, #1
066c8     00 3C 06 56 |  if_ne	mov	local12, #0
066cc                 | ' if m$="%" then bin=1 else bin=0
066cc     B0 01 00 FF 
066d0     B3 14 06 F6 | 	mov	arg02, ##@LR__5734
066d4     18 13 02 F6 | 	mov	arg01, local06
066d8     8C F8 B1 FD | 	call	#__system___string_cmp
066dc     00 FA 0D F2 | 	cmp	result1, #0 wz
066e0     01 3E 06 A6 |  if_e	mov	local13, #1
066e4     00 3E 06 56 |  if_ne	mov	local13, #0
066e8                 | ' if l>1 then 
066e8     02 2E 56 F2 | 	cmps	local05, #2 wc
066ec     78 02 90 CD |  if_b	jmp	#LR__0555
066f0                 | '   for i=2 to l
066f0     02 40 06 F6 | 	mov	local14, #2
066f4     17 43 02 F6 | 	mov	local15, local05
066f8     01 42 06 F1 | 	add	local15, #1
066fc                 | LR__0544
066fc     21 41 52 F2 | 	cmps	local14, local15 wc
06700     64 02 90 3D |  if_ae	jmp	#LR__0554
06704     13 13 02 F6 | 	mov	arg01, local01
06708     20 15 02 F6 | 	mov	arg02, local14
0670c     01 16 06 F6 | 	mov	arg03, #1
06710     C4 19 B2 FD | 	call	#__system__Mid_S
06714     FD 30 02 F6 | 	mov	local06, result1
06718     00 44 06 F6 | 	mov	local16, #0
0671c                 | '     m$=mid$(s,i,1) : b=false
0671c                 | '     if m$>="0" andalso m$<="9" then b=true  
0671c     B0 01 00 FF 
06720     B5 14 06 F6 | 	mov	arg02, ##@LR__5735
06724     18 13 02 F6 | 	mov	arg01, local06
06728     3C F8 B1 FD | 	call	#__system___string_cmp
0672c     00 FA 55 F2 | 	cmps	result1, #0 wc
06730     1C 00 90 CD |  if_b	jmp	#LR__0545
06734     B0 01 00 FF 
06738     B7 32 06 F6 | 	mov	local07, ##@LR__5736
0673c     18 13 02 F6 | 	mov	arg01, local06
06740     19 15 02 F6 | 	mov	arg02, local07
06744     20 F8 B1 FD | 	call	#__system___string_cmp
06748     01 FA 55 F2 | 	cmps	result1, #1 wc
0674c     01 44 66 C6 |  if_b	neg	local16, #1
06750                 | LR__0545
06750                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
06750     B0 01 00 FF 
06754     B9 14 06 F6 | 	mov	arg02, ##@LR__5737
06758     18 13 02 F6 | 	mov	arg01, local06
0675c     08 F8 B1 FD | 	call	#__system___string_cmp
06760     00 FA 0D F2 | 	cmp	result1, #0 wz
06764     7C 00 90 AD |  if_e	jmp	#LR__0546
06768     B0 01 00 FF 
0676c     BB 32 06 F6 | 	mov	local07, ##@LR__5738
06770     18 13 02 F6 | 	mov	arg01, local06
06774     19 15 02 F6 | 	mov	arg02, local07
06778     EC F7 B1 FD | 	call	#__system___string_cmp
0677c     00 FA 0D F2 | 	cmp	result1, #0 wz
06780     60 00 90 AD |  if_e	jmp	#LR__0546
06784     B0 01 00 FF 
06788     BD 34 06 F6 | 	mov	local08, ##@LR__5739
0678c     1A 33 02 F6 | 	mov	local07, local08
06790     18 13 02 F6 | 	mov	arg01, local06
06794     19 15 02 F6 | 	mov	arg02, local07
06798     CC F7 B1 FD | 	call	#__system___string_cmp
0679c     00 FA 0D F2 | 	cmp	result1, #0 wz
067a0     40 00 90 AD |  if_e	jmp	#LR__0546
067a4     B0 01 00 FF 
067a8     BF 36 06 F6 | 	mov	local09, ##@LR__5740
067ac     1B 35 02 F6 | 	mov	local08, local09
067b0     18 13 02 F6 | 	mov	arg01, local06
067b4     1A 15 02 F6 | 	mov	arg02, local08
067b8     AC F7 B1 FD | 	call	#__system___string_cmp
067bc     FD 32 0A F6 | 	mov	local07, result1 wz
067c0     20 00 90 AD |  if_e	jmp	#LR__0546
067c4     B0 01 00 FF 
067c8     C1 38 06 F6 | 	mov	local10, ##@LR__5741
067cc     1C 37 02 F6 | 	mov	local09, local10
067d0     18 13 02 F6 | 	mov	arg01, local06
067d4     1B 15 02 F6 | 	mov	arg02, local09
067d8     8C F7 B1 FD | 	call	#__system___string_cmp
067dc     FD 34 0A F6 | 	mov	local08, result1 wz
067e0     04 00 90 5D |  if_ne	jmp	#LR__0547
067e4                 | LR__0546
067e4     01 44 66 F6 | 	neg	local16, #1
067e8                 | LR__0547
067e8                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
067e8     01 3C 0E F2 | 	cmp	local12, #1 wz
067ec     34 00 90 5D |  if_ne	jmp	#LR__0548
067f0     B0 01 00 FF 
067f4     C3 14 06 F6 | 	mov	arg02, ##@LR__5742
067f8     18 13 02 F6 | 	mov	arg01, local06
067fc     68 F7 B1 FD | 	call	#__system___string_cmp
06800     00 FA 55 F2 | 	cmps	result1, #0 wc
06804     1C 00 90 CD |  if_b	jmp	#LR__0548
06808     B0 01 00 FF 
0680c     C5 32 06 F6 | 	mov	local07, ##@LR__5743
06810     18 13 02 F6 | 	mov	arg01, local06
06814     19 15 02 F6 | 	mov	arg02, local07
06818     4C F7 B1 FD | 	call	#__system___string_cmp
0681c     01 FA 55 F2 | 	cmps	result1, #1 wc
06820     01 44 66 C6 |  if_b	neg	local16, #1
06824                 | LR__0548
06824                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06824     01 3E 0E F2 | 	cmp	local13, #1 wz
06828     58 00 90 5D |  if_ne	jmp	#LR__0550
0682c     B0 01 00 FF 
06830     C7 14 06 F6 | 	mov	arg02, ##@LR__5744
06834     18 13 02 F6 | 	mov	arg01, local06
06838     2C F7 B1 FD | 	call	#__system___string_cmp
0683c     00 FA 55 F2 | 	cmps	result1, #0 wc
06840     1C 00 90 CD |  if_b	jmp	#LR__0549
06844     B0 01 00 FF 
06848     C9 32 06 F6 | 	mov	local07, ##@LR__5745
0684c     18 13 02 F6 | 	mov	arg01, local06
06850     19 15 02 F6 | 	mov	arg02, local07
06854     10 F7 B1 FD | 	call	#__system___string_cmp
06858     01 FA 55 F2 | 	cmps	result1, #1 wc
0685c     24 00 90 CD |  if_b	jmp	#LR__0550
06860                 | LR__0549
06860     B0 01 00 FF 
06864     CB 34 06 F6 | 	mov	local08, ##@LR__5746
06868     1A 33 02 F6 | 	mov	local07, local08
0686c     18 13 02 F6 | 	mov	arg01, local06
06870     19 15 02 F6 | 	mov	arg02, local07
06874     F0 F6 B1 FD | 	call	#__system___string_cmp
06878     00 FA 0D F2 | 	cmp	result1, #0 wz
0687c     00 FA 05 56 |  if_ne	mov	result1, #0
06880     E8 00 90 5D |  if_ne	jmp	#LR__0556
06884                 | LR__0550
06884                 | '     if not b then return false
06884     22 45 22 F6 | 	not	local16, local16
06888     00 44 0E F2 | 	cmp	local16, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     D8 00 90 5D |  if_ne	jmp	#LR__0556
06894                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06894     B0 01 00 FF 
06898     CD 14 06 F6 | 	mov	arg02, ##@LR__5747
0689c     18 13 02 F6 | 	mov	arg01, local06
068a0     C4 F6 B1 FD | 	call	#__system___string_cmp
068a4     00 FA 0D F2 | 	cmp	result1, #0 wz
068a8     3C 00 90 5D |  if_ne	jmp	#LR__0551
068ac     20 15 02 F6 | 	mov	arg02, local14
068b0     01 14 86 F1 | 	sub	arg02, #1
068b4     13 13 02 F6 | 	mov	arg01, local01
068b8     01 16 06 F6 | 	mov	arg03, #1
068bc     18 18 B2 FD | 	call	#__system__Mid_S
068c0     FD 12 02 F6 | 	mov	arg01, result1
068c4     08 1A B2 FD | 	call	#__system__LCase_S
068c8     FD 12 02 F6 | 	mov	arg01, result1
068cc     B0 01 00 FF 
068d0     CF 32 06 F6 | 	mov	local07, ##@LR__5748
068d4     19 15 02 F6 | 	mov	arg02, local07
068d8     8C F6 B1 FD | 	call	#__system___string_cmp
068dc     00 FA 0D F2 | 	cmp	result1, #0 wz
068e0     00 FA 05 56 |  if_ne	mov	result1, #0
068e4     84 00 90 5D |  if_ne	jmp	#LR__0556
068e8                 | LR__0551
068e8                 | '     if m$="." then ds+=1: if ds>1 then return false
068e8     B0 01 00 FF 
068ec     D1 14 06 F6 | 	mov	arg02, ##@LR__5749
068f0     18 13 02 F6 | 	mov	arg01, local06
068f4     70 F6 B1 FD | 	call	#__system___string_cmp
068f8     00 FA 0D F2 | 	cmp	result1, #0 wz
068fc     01 28 06 A1 |  if_e	add	local02, #1
06900     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06904     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06908     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
0690c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
0690c     B0 01 00 FF 
06910     D3 46 06 F6 | 	mov	local17, ##@LR__5750
06914     23 49 02 F6 | 	mov	local18, local17
06918     18 13 02 F6 | 	mov	arg01, local06
0691c     24 15 02 F6 | 	mov	arg02, local18
06920     44 F6 B1 FD | 	call	#__system___string_cmp
06924     FD 4A 0A F6 | 	mov	local19, result1 wz
06928     20 00 90 AD |  if_e	jmp	#LR__0552
0692c     B0 01 00 FF 
06930     D5 32 06 F6 | 	mov	local07, ##@LR__5751
06934     19 47 02 F6 | 	mov	local17, local07
06938     18 13 02 F6 | 	mov	arg01, local06
0693c     23 15 02 F6 | 	mov	arg02, local17
06940     24 F6 B1 FD | 	call	#__system___string_cmp
06944     FD 48 0A F6 | 	mov	local18, result1 wz
06948     14 00 90 5D |  if_ne	jmp	#LR__0553
0694c                 | LR__0552
0694c     01 2A 06 F1 | 	add	local03, #1
06950     00 3C 0E F2 | 	cmp	local12, #0 wz
06954     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06958     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
0695c     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06960                 | LR__0553
06960     01 40 06 F1 | 	add	local14, #1
06964     94 FD 9F FD | 	jmp	#LR__0544
06968                 | LR__0554
06968                 | LR__0555
06968                 | ' return true
06968     01 FA 65 F6 | 	neg	result1, #1
0696c                 | LR__0556
0696c     A7 F0 03 F6 | 	mov	ptra, fp
06970     B2 00 A0 FD | 	call	#popregs_
06974                 | _isnum_ret
06974     2D 00 64 FD | 	ret
06978                 | 
06978                 | '   
06978                 | ' ' Check if the part is an integer number.    
06978                 | '   
06978                 | ' function isint(s as string) as boolean
06978                 | _isint
06978     0E 4A 05 F6 | 	mov	COUNT_, #14
0697c     A8 00 A0 FD | 	call	#pushregs_
06980     09 27 02 F6 | 	mov	local01, arg01
06984     09 29 02 F6 | 	mov	local02, arg01
06988     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
0698c                 | LR__0560
0698c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06990     01 28 06 51 |  if_ne	add	local02, #1
06994     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06998                 | LR__0561
06998     09 29 82 F1 | 	sub	local02, arg01
0699c     14 FB 01 F6 | 	mov	result1, local02
069a0     FD 2A 0A F6 | 	mov	local03, result1 wz
069a4     00 FA 05 A6 |  if_e	mov	result1, #0
069a8     64 02 90 AD |  if_e	jmp	#LR__0574
069ac     13 13 02 F6 | 	mov	arg01, local01
069b0     01 14 06 F6 | 	mov	arg02, #1
069b4     01 16 06 F6 | 	mov	arg03, #1
069b8     1C 17 B2 FD | 	call	#__system__Mid_S
069bc     FD 2C 02 F6 | 	mov	local04, result1
069c0                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
069c0     B0 01 00 FF 
069c4     D7 14 06 F6 | 	mov	arg02, ##@LR__5752
069c8     16 13 02 F6 | 	mov	arg01, local04
069cc     98 F5 B1 FD | 	call	#__system___string_cmp
069d0     00 FA 55 F2 | 	cmps	result1, #0 wc
069d4     1C 00 90 CD |  if_b	jmp	#LR__0562
069d8     B0 01 00 FF 
069dc     D9 2E 06 F6 | 	mov	local05, ##@LR__5753
069e0     16 13 02 F6 | 	mov	arg01, local04
069e4     17 15 02 F6 | 	mov	arg02, local05
069e8     7C F5 B1 FD | 	call	#__system___string_cmp
069ec     01 FA 55 F2 | 	cmps	result1, #1 wc
069f0     64 00 90 CD |  if_b	jmp	#LR__0563
069f4                 | LR__0562
069f4     B0 01 00 FF 
069f8     DB 30 06 F6 | 	mov	local06, ##@LR__5754
069fc     18 2F 02 F6 | 	mov	local05, local06
06a00     16 13 02 F6 | 	mov	arg01, local04
06a04     17 15 02 F6 | 	mov	arg02, local05
06a08     5C F5 B1 FD | 	call	#__system___string_cmp
06a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a10     44 00 90 AD |  if_e	jmp	#LR__0563
06a14     B0 01 00 FF 
06a18     DD 32 06 F6 | 	mov	local07, ##@LR__5755
06a1c     19 31 02 F6 | 	mov	local06, local07
06a20     16 13 02 F6 | 	mov	arg01, local04
06a24     18 15 02 F6 | 	mov	arg02, local06
06a28     3C F5 B1 FD | 	call	#__system___string_cmp
06a2c     FD 2E 0A F6 | 	mov	local05, result1 wz
06a30     24 00 90 AD |  if_e	jmp	#LR__0563
06a34     B0 01 00 FF 
06a38     DF 34 06 F6 | 	mov	local08, ##@LR__5756
06a3c     1A 33 02 F6 | 	mov	local07, local08
06a40     16 13 02 F6 | 	mov	arg01, local04
06a44     19 15 02 F6 | 	mov	arg02, local07
06a48     1C F5 B1 FD | 	call	#__system___string_cmp
06a4c     FD 30 0A F6 | 	mov	local06, result1 wz
06a50     00 FA 05 56 |  if_ne	mov	result1, #0
06a54     B8 01 90 5D |  if_ne	jmp	#LR__0574
06a58                 | LR__0563
06a58                 | ' if m$="$" then hex=1 else hex=0
06a58     B0 01 00 FF 
06a5c     E1 14 06 F6 | 	mov	arg02, ##@LR__5757
06a60     16 13 02 F6 | 	mov	arg01, local04
06a64     00 F5 B1 FD | 	call	#__system___string_cmp
06a68     00 FA 0D F2 | 	cmp	result1, #0 wz
06a6c     01 36 06 A6 |  if_e	mov	local09, #1
06a70     00 36 06 56 |  if_ne	mov	local09, #0
06a74                 | ' if m$="%" then bin=1 else bin=0
06a74     B0 01 00 FF 
06a78     E3 14 06 F6 | 	mov	arg02, ##@LR__5758
06a7c     16 13 02 F6 | 	mov	arg01, local04
06a80     E4 F4 B1 FD | 	call	#__system___string_cmp
06a84     00 FA 0D F2 | 	cmp	result1, #0 wz
06a88     01 38 06 A6 |  if_e	mov	local10, #1
06a8c     00 38 06 56 |  if_ne	mov	local10, #0
06a90                 | ' if l>1 then 
06a90     02 2A 56 F2 | 	cmps	local03, #2 wc
06a94     74 01 90 CD |  if_b	jmp	#LR__0573
06a98                 | '   for i=2 to l
06a98     02 3A 06 F6 | 	mov	local11, #2
06a9c     15 3D 02 F6 | 	mov	local12, local03
06aa0     01 3C 06 F1 | 	add	local12, #1
06aa4                 | LR__0564
06aa4     1E 3B 52 F2 | 	cmps	local11, local12 wc
06aa8     60 01 90 3D |  if_ae	jmp	#LR__0572
06aac     13 13 02 F6 | 	mov	arg01, local01
06ab0     1D 15 02 F6 | 	mov	arg02, local11
06ab4     01 16 06 F6 | 	mov	arg03, #1
06ab8     1C 16 B2 FD | 	call	#__system__Mid_S
06abc     FD 2C 02 F6 | 	mov	local04, result1
06ac0                 | '     m$=mid$(s,i,1) 
06ac0                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ac0     00 36 0E F2 | 	cmp	local09, #0 wz
06ac4     50 00 90 5D |  if_ne	jmp	#LR__0566
06ac8     B0 01 00 FF 
06acc     E5 14 06 F6 | 	mov	arg02, ##@LR__5759
06ad0     16 13 02 F6 | 	mov	arg01, local04
06ad4     90 F4 B1 FD | 	call	#__system___string_cmp
06ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
06adc     18 00 90 CD |  if_b	jmp	#LR__0565
06ae0     B0 01 00 FF 
06ae4     E7 14 06 F6 | 	mov	arg02, ##@LR__5760
06ae8     16 13 02 F6 | 	mov	arg01, local04
06aec     78 F4 B1 FD | 	call	#__system___string_cmp
06af0     01 FA 55 F2 | 	cmps	result1, #1 wc
06af4     20 00 90 CD |  if_b	jmp	#LR__0566
06af8                 | LR__0565
06af8     B0 01 00 FF 
06afc     E9 30 06 F6 | 	mov	local06, ##@LR__5761
06b00     16 13 02 F6 | 	mov	arg01, local04
06b04     18 15 02 F6 | 	mov	arg02, local06
06b08     5C F4 B1 FD | 	call	#__system___string_cmp
06b0c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b10     00 FA 05 56 |  if_ne	mov	result1, #0
06b14     F8 00 90 5D |  if_ne	jmp	#LR__0574
06b18                 | LR__0566
06b18                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06b18     01 36 0E F2 | 	cmp	local09, #1 wz
06b1c     90 00 90 5D |  if_ne	jmp	#LR__0569
06b20     B0 01 00 FF 
06b24     EB 14 06 F6 | 	mov	arg02, ##@LR__5762
06b28     16 13 02 F6 | 	mov	arg01, local04
06b2c     38 F4 B1 FD | 	call	#__system___string_cmp
06b30     00 FA 55 F2 | 	cmps	result1, #0 wc
06b34     1C 00 90 CD |  if_b	jmp	#LR__0567
06b38     B0 01 00 FF 
06b3c     ED 14 06 F6 | 	mov	arg02, ##@LR__5763
06b40     16 13 02 F6 | 	mov	arg01, local04
06b44     20 F4 B1 FD | 	call	#__system___string_cmp
06b48     FD 3E 02 F6 | 	mov	local13, result1
06b4c     01 3E 56 F2 | 	cmps	local13, #1 wc
06b50     5C 00 90 CD |  if_b	jmp	#LR__0569
06b54                 | LR__0567
06b54     B0 01 00 FF 
06b58     EF 2E 06 F6 | 	mov	local05, ##@LR__5764
06b5c     16 13 02 F6 | 	mov	arg01, local04
06b60     17 15 02 F6 | 	mov	arg02, local05
06b64     00 F4 B1 FD | 	call	#__system___string_cmp
06b68     FD 40 02 F6 | 	mov	local14, result1
06b6c     00 40 56 F2 | 	cmps	local14, #0 wc
06b70     1C 00 90 CD |  if_b	jmp	#LR__0568
06b74     B0 01 00 FF 
06b78     F1 32 06 F6 | 	mov	local07, ##@LR__5765
06b7c     16 13 02 F6 | 	mov	arg01, local04
06b80     19 15 02 F6 | 	mov	arg02, local07
06b84     E0 F3 B1 FD | 	call	#__system___string_cmp
06b88     01 FA 55 F2 | 	cmps	result1, #1 wc
06b8c     20 00 90 CD |  if_b	jmp	#LR__0569
06b90                 | LR__0568
06b90     B0 01 00 FF 
06b94     F3 34 06 F6 | 	mov	local08, ##@LR__5766
06b98     16 13 02 F6 | 	mov	arg01, local04
06b9c     1A 15 02 F6 | 	mov	arg02, local08
06ba0     C4 F3 B1 FD | 	call	#__system___string_cmp
06ba4     00 FA 0D F2 | 	cmp	result1, #0 wz
06ba8     00 FA 05 56 |  if_ne	mov	result1, #0
06bac     60 00 90 5D |  if_ne	jmp	#LR__0574
06bb0                 | LR__0569
06bb0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06bb0     01 38 0E F2 | 	cmp	local10, #1 wz
06bb4     4C 00 90 5D |  if_ne	jmp	#LR__0571
06bb8     B0 01 00 FF 
06bbc     F5 14 06 F6 | 	mov	arg02, ##@LR__5767
06bc0     16 13 02 F6 | 	mov	arg01, local04
06bc4     A0 F3 B1 FD | 	call	#__system___string_cmp
06bc8     00 FA 55 F2 | 	cmps	result1, #0 wc
06bcc     18 00 90 CD |  if_b	jmp	#LR__0570
06bd0     B0 01 00 FF 
06bd4     F7 14 06 F6 | 	mov	arg02, ##@LR__5768
06bd8     16 13 02 F6 | 	mov	arg01, local04
06bdc     88 F3 B1 FD | 	call	#__system___string_cmp
06be0     01 FA 55 F2 | 	cmps	result1, #1 wc
06be4     1C 00 90 CD |  if_b	jmp	#LR__0571
06be8                 | LR__0570
06be8     B0 01 00 FF 
06bec     F9 14 06 F6 | 	mov	arg02, ##@LR__5769
06bf0     16 13 02 F6 | 	mov	arg01, local04
06bf4     70 F3 B1 FD | 	call	#__system___string_cmp
06bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
06bfc     00 FA 05 56 |  if_ne	mov	result1, #0
06c00     0C 00 90 5D |  if_ne	jmp	#LR__0574
06c04                 | LR__0571
06c04     01 3A 06 F1 | 	add	local11, #1
06c08     98 FE 9F FD | 	jmp	#LR__0564
06c0c                 | LR__0572
06c0c                 | LR__0573
06c0c                 | ' return true
06c0c     01 FA 65 F6 | 	neg	result1, #1
06c10                 | LR__0574
06c10     A7 F0 03 F6 | 	mov	ptra, fp
06c14     B2 00 A0 FD | 	call	#popregs_
06c18                 | _isint_ret
06c18     2D 00 64 FD | 	ret
06c1c                 | 
06c1c                 | ' 
06c1c                 | ' ' Check if the part is a positive decimal number.  
06c1c                 | ' 
06c1c                 | ' function isdec(s as string) as boolean
06c1c                 | _isdec
06c1c     05 4A 05 F6 | 	mov	COUNT_, #5
06c20     A8 00 A0 FD | 	call	#pushregs_
06c24     09 27 02 F6 | 	mov	local01, arg01
06c28     09 29 02 F6 | 	mov	local02, arg01
06c2c     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06c30                 | LR__0580
06c30     14 FB C9 FA | 	rdbyte	result1, local02 wz
06c34     01 28 06 51 |  if_ne	add	local02, #1
06c38     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06c3c                 | LR__0581
06c3c     09 29 82 F1 | 	sub	local02, arg01
06c40     14 FB 01 F6 | 	mov	result1, local02
06c44     FD 28 0A F6 | 	mov	local02, result1 wz
06c48     00 FA 05 A6 |  if_e	mov	result1, #0
06c4c     80 00 90 AD |  if_e	jmp	#LR__0586
06c50                 | ' for i=1 to l
06c50     01 2A 06 F6 | 	mov	local03, #1
06c54     14 2D 02 F6 | 	mov	local04, local02
06c58     01 2C 06 F1 | 	add	local04, #1
06c5c                 | LR__0582
06c5c     16 2B 52 F2 | 	cmps	local03, local04 wc
06c60     68 00 90 3D |  if_ae	jmp	#LR__0585
06c64     13 13 02 F6 | 	mov	arg01, local01
06c68     15 15 02 F6 | 	mov	arg02, local03
06c6c     01 16 06 F6 | 	mov	arg03, #1
06c70     64 14 B2 FD | 	call	#__system__Mid_S
06c74     FD 2E 02 F6 | 	mov	local05, result1
06c78                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06c78     B0 01 00 FF 
06c7c     FB 14 06 F6 | 	mov	arg02, ##@LR__5770
06c80     17 13 02 F6 | 	mov	arg01, local05
06c84     E0 F2 B1 FD | 	call	#__system___string_cmp
06c88     00 FA 55 F2 | 	cmps	result1, #0 wc
06c8c     18 00 90 CD |  if_b	jmp	#LR__0583
06c90     B0 01 00 FF 
06c94     FD 14 06 F6 | 	mov	arg02, ##@LR__5771
06c98     17 13 02 F6 | 	mov	arg01, local05
06c9c     C8 F2 B1 FD | 	call	#__system___string_cmp
06ca0     01 FA 55 F2 | 	cmps	result1, #1 wc
06ca4     1C 00 90 CD |  if_b	jmp	#LR__0584
06ca8                 | LR__0583
06ca8     B0 01 00 FF 
06cac     FF 14 06 F6 | 	mov	arg02, ##@LR__5772
06cb0     17 13 02 F6 | 	mov	arg01, local05
06cb4     B0 F2 B1 FD | 	call	#__system___string_cmp
06cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
06cbc     00 FA 05 56 |  if_ne	mov	result1, #0
06cc0     0C 00 90 5D |  if_ne	jmp	#LR__0586
06cc4                 | LR__0584
06cc4     01 2A 06 F1 | 	add	local03, #1
06cc8     90 FF 9F FD | 	jmp	#LR__0582
06ccc                 | LR__0585
06ccc                 | ' return true
06ccc     01 FA 65 F6 | 	neg	result1, #1
06cd0                 | LR__0586
06cd0     A7 F0 03 F6 | 	mov	ptra, fp
06cd4     B2 00 A0 FD | 	call	#popregs_
06cd8                 | _isdec_ret
06cd8     2D 00 64 FD | 	ret
06cdc                 | 
06cdc                 | ' 
06cdc                 | ' ' Check if the part is a string.  
06cdc                 | ' 
06cdc                 | ' function isstring(s as string) as boolean
06cdc                 | _isstring
06cdc     01 4A 05 F6 | 	mov	COUNT_, #1
06ce0     A8 00 A0 FD | 	call	#pushregs_
06ce4                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06ce4     09 27 02 F6 | 	mov	local01, arg01
06ce8     01 14 06 F6 | 	mov	arg02, #1
06cec     D0 12 B2 FD | 	call	#__system__Left_S
06cf0     FD 12 02 F6 | 	mov	arg01, result1
06cf4     B0 01 00 FF 
06cf8     01 15 06 F6 | 	mov	arg02, ##@LR__5773
06cfc     68 F2 B1 FD | 	call	#__system___string_cmp
06d00     00 FA 4D F2 | 	cmps	result1, #0 wz
06d04     28 00 90 5D |  if_ne	jmp	#LR__0590
06d08     13 13 02 F6 | 	mov	arg01, local01
06d0c     01 14 06 F6 | 	mov	arg02, #1
06d10     34 13 B2 FD | 	call	#__system__Right_S
06d14     FD 12 02 F6 | 	mov	arg01, result1
06d18     B0 01 00 FF 
06d1c     03 15 06 F6 | 	mov	arg02, ##@LR__5774
06d20     44 F2 B1 FD | 	call	#__system___string_cmp
06d24     00 FA 4D F2 | 	cmps	result1, #0 wz
06d28     01 FA 65 A6 |  if_e	neg	result1, #1
06d2c     04 00 90 AD |  if_e	jmp	#LR__0591
06d30                 | LR__0590
06d30     00 FA 05 F6 | 	mov	result1, #0
06d34                 | LR__0591
06d34     A7 F0 03 F6 | 	mov	ptra, fp
06d38     B2 00 A0 FD | 	call	#popregs_
06d3c                 | _isstring_ret
06d3c     2D 00 64 FD | 	ret
06d40                 | 
06d40                 | ' 
06d40                 | ' ' getnoteval. Returns the frequency of note token
06d40                 | ' 
06d40                 | ' function getnoteval(token) as single
06d40                 | _getnoteval
06d40     02 4A 05 F6 | 	mov	COUNT_, #2
06d44     A8 00 A0 FD | 	call	#pushregs_
06d48     01 00 00 FF 
06d4c     00 13 86 F1 | 	sub	arg01, ##768
06d50     09 15 52 F6 | 	abs	arg02, arg01 wc
06d54     0C 14 16 FD | 	qdiv	arg02, #12
06d58     14 00 00 FF 
06d5c     D8 E4 05 F1 | 	add	objptr, ##10456
06d60     19 14 62 FD | 	getqy	arg02
06d64     0A 15 82 F6 | 	negc	arg02, arg02
06d68     02 14 66 F0 | 	shl	arg02, #2
06d6c     F2 14 02 F1 | 	add	arg02, objptr
06d70     0A 27 02 FB | 	rdlong	local01, arg02
06d74     09 15 52 F6 | 	abs	arg02, arg01 wc
06d78     0C 14 16 FD | 	qdiv	arg02, #12
06d7c     14 00 00 FF 
06d80     D8 E4 85 F1 | 	sub	objptr, ##10456
06d84     01 12 06 F6 | 	mov	arg01, #1
06d88                 | ' noteexp=1+(note/12) 
06d88                 | ' return (2.0^noteexp)*notebase
06d88     18 14 62 FD | 	getqx	arg02
06d8c     0A 13 82 F3 | 	sumc	arg01, arg02
06d90     09 13 52 F6 | 	abs	arg01, arg01 wc
06d94     1F 28 C6 C9 |  if_b	decod	local02, #31
06d98     00 28 06 36 |  if_ae	mov	local02, #0
06d9c     18 1C B2 FD | 	call	#__system___float_fromuns
06da0     14 FB 61 F5 | 	xor	result1, local02
06da4     FD 14 02 F6 | 	mov	arg02, result1
06da8     1E 12 C6 F9 | 	decod	arg01, #30
06dac     14 2F B2 FD | 	call	#__system____builtin_powf
06db0     FD 12 02 F6 | 	mov	arg01, result1
06db4     13 15 02 F6 | 	mov	arg02, local01
06db8     00 20 B2 FD | 	call	#__system___float_mul
06dbc     A7 F0 03 F6 | 	mov	ptra, fp
06dc0     B2 00 A0 FD | 	call	#popregs_
06dc4                 | _getnoteval_ret
06dc4     2D 00 64 FD | 	ret
06dc8                 | 
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' '
06dc8                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06dc8                 | ' '
06dc8                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06dc8                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06dc8                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06dc8                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06dc8                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06dc8                 | ' ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' ' Helper functions to manage program lines
06dc8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06dc8                 | ' 
06dc8                 | ' '----- delete a line from a program
06dc8                 | ' 
06dc8                 | ' function deleteline(aline as ulong) as integer
06dc8                 | _deleteline
06dc8     02 4A 05 F6 | 	mov	COUNT_, #2
06dcc     A8 00 A0 FD | 	call	#pushregs_
06dd0     2C F0 07 F1 | 	add	ptra, #44
06dd4     04 4E 05 F1 | 	add	fp, #4
06dd8     A7 12 62 FC | 	wrlong	arg01, fp
06ddc     4A 00 00 FF 
06de0     88 E4 05 F1 | 	add	objptr, ##38024
06de4     F2 26 02 FB | 	rdlong	local01, objptr
06de8     0C 4E 05 F1 | 	add	fp, #12
06dec     A7 26 62 FC | 	wrlong	local01, fp
06df0     10 4E 85 F1 | 	sub	fp, #16
06df4                 | ' 
06df4                 | ' searchptr=programstart
06df4                 | ' do
06df4     3E 00 00 FF 
06df8     BC E5 85 F1 | 	sub	objptr, ##32188
06dfc                 | LR__0600
06dfc     14 4E 05 F1 | 	add	fp, #20
06e00     A7 12 02 F6 | 	mov	arg01, fp
06e04     04 4E 85 F1 | 	sub	fp, #4
06e08     A7 14 02 FB | 	rdlong	arg02, fp
06e0c     10 4E 85 F1 | 	sub	fp, #16
06e10     18 16 06 F6 | 	mov	arg03, #24
06e14     A0 E4 B1 FD | 	call	#_psram_spin2_read1
06e18     10 4E 05 F1 | 	add	fp, #16
06e1c     A7 26 02 FB | 	rdlong	local01, fp
06e20     08 4E 85 F1 | 	sub	fp, #8
06e24     A7 26 62 FC | 	wrlong	local01, fp
06e28     20 4E 05 F1 | 	add	fp, #32
06e2c     A7 26 02 FB | 	rdlong	local01, fp
06e30     18 4E 85 F1 | 	sub	fp, #24
06e34     A7 26 62 FC | 	wrlong	local01, fp
06e38     04 4E 05 F1 | 	add	fp, #4
06e3c     A7 26 02 FB | 	rdlong	local01, fp
06e40     10 4E 85 F1 | 	sub	fp, #16
06e44     A7 16 02 FB | 	rdlong	arg03, fp
06e48     04 4E 85 F1 | 	sub	fp, #4
06e4c     0B 27 12 F2 | 	cmp	local01, arg03 wc
06e50     28 4E 05 C1 |  if_b	add	fp, #40
06e54     A7 28 02 CB |  if_b	rdlong	local02, fp
06e58     28 4E 85 C1 |  if_b	sub	fp, #40
06e5c     FF FF 3F CF 
06e60     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06e64     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
06e68     0B 00 00 FF 
06e6c     CC E4 85 F1 | 	sub	objptr, ##5836
06e70                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06e70     14 4E 05 F1 | 	add	fp, #20
06e74     A7 26 02 FB | 	rdlong	local01, fp
06e78     10 4E 85 F1 | 	sub	fp, #16
06e7c     A7 28 02 FB | 	rdlong	local02, fp
06e80     04 4E 85 F1 | 	sub	fp, #4
06e84     14 27 0A F2 | 	cmp	local01, local02 wz
06e88     01 FA 65 56 |  if_ne	neg	result1, #1
06e8c     34 02 90 5D |  if_ne	jmp	#LR__0605
06e90     08 4E 05 F1 | 	add	fp, #8
06e94     A7 12 02 FB | 	rdlong	arg01, fp
06e98     08 4E 85 F1 | 	sub	fp, #8
06e9c     01 14 66 F6 | 	neg	arg02, #1
06ea0     4C B8 B1 FD | 	call	#_pslpoke
06ea4                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06ea4                 | ' 
06ea4                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06ea4     28 4E 05 F1 | 	add	fp, #40
06ea8     A7 26 02 FB | 	rdlong	local01, fp
06eac     28 4E 85 F1 | 	sub	fp, #40
06eb0     FF FF 3F FF 
06eb4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06eb8     24 4E 05 A1 |  if_e	add	fp, #36
06ebc     A7 28 02 AB |  if_e	rdlong	local02, fp
06ec0     24 4E 85 A1 |  if_e	sub	fp, #36
06ec4     FF FF 7F AF 
06ec8     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06ecc     88 00 90 5D |  if_ne	jmp	#LR__0601
06ed0     4A 00 00 FF 
06ed4     88 E4 05 F1 | 	add	objptr, ##38024
06ed8     00 04 80 FF 
06edc     F2 00 68 FC | 	wrlong	##524288, objptr
06ee0     07 00 00 FF 
06ee4     2C E4 85 F1 | 	sub	objptr, ##3628
06ee8     00 04 80 FF 
06eec     F2 00 68 FC | 	wrlong	##524288, objptr
06ef0     07 00 00 FF 
06ef4     30 E4 05 F1 | 	add	objptr, ##3632
06ef8     F2 00 68 FC | 	wrlong	#0, objptr
06efc     04 E4 05 F1 | 	add	objptr, #4
06f00     FF FF FF FF 
06f04     F2 FE 6B FC | 	wrlong	##-1, objptr
06f08     4A 00 00 FF 
06f0c     90 E4 85 F1 | 	sub	objptr, ##38032
06f10     00 12 06 F6 | 	mov	arg01, #0
06f14     01 14 66 F6 | 	neg	arg02, #1
06f18     D4 B7 B1 FD | 	call	#_pslpoke
06f1c     10 12 06 F6 | 	mov	arg01, #16
06f20     01 14 66 F6 | 	neg	arg02, #1
06f24     C8 B7 B1 FD | 	call	#_pslpoke
06f28     14 12 06 F6 | 	mov	arg01, #20
06f2c     1E 14 CE F9 | 	bmask	arg02, #30
06f30     BC B7 B1 FD | 	call	#_pslpoke
06f34     50 00 00 FF 
06f38     B8 E4 05 F1 | 	add	objptr, ##41144
06f3c     00 04 80 FF 
06f40     F2 00 68 FC | 	wrlong	##524288, objptr
06f44     04 E4 05 F1 | 	add	objptr, #4
06f48     00 04 80 FF 
06f4c     F2 00 68 FC | 	wrlong	##524288, objptr
06f50     50 00 00 FF 
06f54     BC E4 85 F1 | 	sub	objptr, ##41148
06f58                 | LR__0601
06f58                 | ' 
06f58                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06f58     28 4E 05 F1 | 	add	fp, #40
06f5c     A7 26 02 FB | 	rdlong	local01, fp
06f60     28 4E 85 F1 | 	sub	fp, #40
06f64     FF FF 3F FF 
06f68     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06f6c     74 00 90 5D |  if_ne	jmp	#LR__0602
06f70     24 4E 05 F1 | 	add	fp, #36
06f74     A7 28 02 FB | 	rdlong	local02, fp
06f78     24 4E 85 F1 | 	sub	fp, #36
06f7c     FF FF 7F FF 
06f80     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06f84     5C 00 90 AD |  if_e	jmp	#LR__0602
06f88     24 4E 05 F1 | 	add	fp, #36
06f8c     A7 12 02 FB | 	rdlong	arg01, fp
06f90     24 4E 85 F1 | 	sub	fp, #36
06f94     14 12 06 F1 | 	add	arg01, #20
06f98     1E 14 CE F9 | 	bmask	arg02, #30
06f9c     50 B7 B1 FD | 	call	#_pslpoke
06fa0     24 4E 05 F1 | 	add	fp, #36
06fa4     A7 26 02 FB | 	rdlong	local01, fp
06fa8     4A 00 00 FF 
06fac     90 E4 05 F1 | 	add	objptr, ##38032
06fb0     F2 26 62 FC | 	wrlong	local01, objptr
06fb4     4A 00 00 FF 
06fb8     90 E4 85 F1 | 	sub	objptr, ##38032
06fbc     A7 12 02 FB | 	rdlong	arg01, fp
06fc0     24 4E 85 F1 | 	sub	fp, #36
06fc4     58 B8 B1 FD | 	call	#_pslpeek
06fc8     4A 00 00 FF 
06fcc     8C E4 05 F1 | 	add	objptr, ##38028
06fd0     F2 FA 61 FC | 	wrlong	result1, objptr
06fd4     4A 00 00 FF 
06fd8     8C E4 85 F1 | 	sub	objptr, ##38028
06fdc                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06fdc                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06fdc                 | '   lastline=pslpeek(header(4))
06fdc                 | '   return 0
06fdc     00 FA 05 F6 | 	mov	result1, #0
06fe0     E0 00 90 FD | 	jmp	#LR__0605
06fe4                 | LR__0602
06fe4                 | ' 
06fe4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06fe4     28 4E 05 F1 | 	add	fp, #40
06fe8     A7 26 02 FB | 	rdlong	local01, fp
06fec     28 4E 85 F1 | 	sub	fp, #40
06ff0     FF FF 3F FF 
06ff4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06ff8     58 00 90 AD |  if_e	jmp	#LR__0603
06ffc     24 4E 05 F1 | 	add	fp, #36
07000     A7 28 02 FB | 	rdlong	local02, fp
07004     24 4E 85 F1 | 	sub	fp, #36
07008     FF FF 7F FF 
0700c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07010     40 00 90 5D |  if_ne	jmp	#LR__0603
07014     28 4E 05 F1 | 	add	fp, #40
07018     A7 12 02 FB | 	rdlong	arg01, fp
0701c     28 4E 85 F1 | 	sub	fp, #40
07020     10 12 06 F1 | 	add	arg01, #16
07024     01 14 66 F6 | 	neg	arg02, #1
07028     C4 B6 B1 FD | 	call	#_pslpoke
0702c     28 4E 05 F1 | 	add	fp, #40
07030     A7 26 02 FB | 	rdlong	local01, fp
07034     28 4E 85 F1 | 	sub	fp, #40
07038     4A 00 00 FF 
0703c     88 E4 05 F1 | 	add	objptr, ##38024
07040     F2 26 62 FC | 	wrlong	local01, objptr
07044     4A 00 00 FF 
07048     88 E4 85 F1 | 	sub	objptr, ##38024
0704c                 | ' '   print "deleted first line"
0704c                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
0704c                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
0704c                 | '   return 0
0704c     00 FA 05 F6 | 	mov	result1, #0
07050     70 00 90 FD | 	jmp	#LR__0605
07054                 | LR__0603
07054                 | ' 
07054                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
07054     28 4E 05 F1 | 	add	fp, #40
07058     A7 26 02 FB | 	rdlong	local01, fp
0705c     28 4E 85 F1 | 	sub	fp, #40
07060     FF FF 3F FF 
07064     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07068     24 4E 05 51 |  if_ne	add	fp, #36
0706c     A7 28 02 5B |  if_ne	rdlong	local02, fp
07070     24 4E 85 51 |  if_ne	sub	fp, #36
07074     FF FF 7F 5F 
07078     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
0707c     40 00 90 AD |  if_e	jmp	#LR__0604
07080     28 4E 05 F1 | 	add	fp, #40
07084     A7 12 02 FB | 	rdlong	arg01, fp
07088     10 12 06 F1 | 	add	arg01, #16
0708c     04 4E 85 F1 | 	sub	fp, #4
07090     A7 14 02 FB | 	rdlong	arg02, fp
07094     24 4E 85 F1 | 	sub	fp, #36
07098     54 B6 B1 FD | 	call	#_pslpoke
0709c     24 4E 05 F1 | 	add	fp, #36
070a0     A7 12 02 FB | 	rdlong	arg01, fp
070a4     14 12 06 F1 | 	add	arg01, #20
070a8     04 4E 05 F1 | 	add	fp, #4
070ac     A7 14 02 FB | 	rdlong	arg02, fp
070b0     28 4E 85 F1 | 	sub	fp, #40
070b4     38 B6 B1 FD | 	call	#_pslpoke
070b8                 | '    pslpoke(header(5)+16,header(4))  
070b8                 | '    pslpoke(header(4)+20, header(5))
070b8                 | '    return 0
070b8     00 FA 05 F6 | 	mov	result1, #0
070bc     04 00 90 FD | 	jmp	#LR__0605
070c0                 | LR__0604
070c0     00 FA 05 F6 | 	mov	result1, #0
070c4                 | LR__0605
070c4     A7 F0 03 F6 | 	mov	ptra, fp
070c8     B2 00 A0 FD | 	call	#popregs_
070cc                 | _deleteline_ret
070cc     2D 00 64 FD | 	ret
070d0                 | 
070d0                 | ' 
070d0                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
070d0                 | ' 
070d0                 | ' sub save_line
070d0                 | _save_line
070d0     03 4A 05 F6 | 	mov	COUNT_, #3
070d4     A8 00 A0 FD | 	call	#pushregs_
070d8     4A 00 00 FF 
070dc     7C E4 05 F1 | 	add	objptr, ##38012
070e0     F2 16 02 FB | 	rdlong	arg03, objptr
070e4     01 16 06 F1 | 	add	arg03, #1
070e8     05 00 00 FF 
070ec     18 E4 85 F1 | 	sub	objptr, ##2584
070f0     F2 14 02 FB | 	rdlong	arg02, objptr
070f4     0B 15 02 FD | 	qmul	arg02, arg03
070f8     0E 00 00 FF 
070fc     44 E4 85 F1 | 	sub	objptr, ##7236
07100     F2 12 02 FB | 	rdlong	arg01, objptr
07104     37 00 00 FF 
07108     20 E4 85 F1 | 	sub	objptr, ##28192
0710c     09 27 02 F6 | 	mov	local01, arg01
07110     18 28 62 FD | 	getqx	local02
07114     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07118                 | LR__0610
07118     13 FB C9 FA | 	rdbyte	result1, local01 wz
0711c     01 26 06 51 |  if_ne	add	local01, #1
07120     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
07124                 | LR__0611
07124     09 27 82 F1 | 	sub	local01, arg01
07128     03 26 CE F7 | 	test	local01, #3 wz
0712c     02 26 46 50 |  if_ne	shr	local01, #2
07130     01 26 06 51 |  if_ne	add	local01, #1
07134     02 26 66 50 |  if_ne	shl	local01, #2
07138     14 2B 02 F6 | 	mov	local03, local02
0713c     13 2B 02 F1 | 	add	local03, local01
07140     43 00 00 FF 
07144     5C E4 05 F1 | 	add	objptr, ##34396
07148     F2 16 02 FB | 	rdlong	arg03, objptr
0714c     14 17 02 F1 | 	add	arg03, local02
07150     04 00 00 FF 
07154     28 E4 05 F1 | 	add	objptr, ##2088
07158     F2 16 62 FC | 	wrlong	arg03, objptr
0715c     04 E4 05 F1 | 	add	objptr, #4
07160     F2 26 62 FC | 	wrlong	local01, objptr
07164     0C E4 85 F1 | 	sub	objptr, #12
07168     F2 12 02 F6 | 	mov	arg01, objptr
0716c     04 00 00 FF 
07170     20 E4 85 F1 | 	sub	objptr, ##2080
07174     F2 14 02 FB | 	rdlong	arg02, objptr
07178     14 17 02 F6 | 	mov	arg03, local02
0717c     37 00 00 FF 
07180     90 E5 85 F1 | 	sub	objptr, ##28560
07184     CC E1 B1 FD | 	call	#_psram_spin2_write
07188     2B 00 00 FF 
0718c     54 E5 05 F1 | 	add	objptr, ##22356
07190     F2 12 02 FB | 	rdlong	arg01, objptr
07194     0C 00 00 FF 
07198     3C E4 05 F1 | 	add	objptr, ##6204
0719c     F2 14 02 FB | 	rdlong	arg02, objptr
071a0     14 15 02 F1 | 	add	arg02, local02
071a4     13 17 02 F6 | 	mov	arg03, local01
071a8     37 00 00 FF 
071ac     90 E5 85 F1 | 	sub	objptr, ##28560
071b0     A0 E1 B1 FD | 	call	#_psram_spin2_write
071b4     37 00 00 FF 
071b8     90 E5 05 F1 | 	add	objptr, ##28560
071bc     F2 26 02 FB | 	rdlong	local01, objptr
071c0     15 27 02 F1 | 	add	local01, local03
071c4     F2 26 62 FC | 	wrlong	local01, objptr
071c8     43 00 00 FF 
071cc     5C E4 85 F1 | 	sub	objptr, ##34396
071d0     A7 F0 03 F6 | 	mov	ptra, fp
071d4     B2 00 A0 FD | 	call	#popregs_
071d8                 | _save_line_ret
071d8     2D 00 64 FD | 	ret
071dc                 | 
071dc                 | ' 
071dc                 | ' '----- Insert a new line into the middle of the program
071dc                 | ' 
071dc                 | ' function insertline(aline as ulong) as integer
071dc                 | _insertline
071dc     02 4A 05 F6 | 	mov	COUNT_, #2
071e0     A8 00 A0 FD | 	call	#pushregs_
071e4     28 F0 07 F1 | 	add	ptra, #40
071e8     04 4E 05 F1 | 	add	fp, #4
071ec     A7 12 62 FC | 	wrlong	arg01, fp
071f0     4A 00 00 FF 
071f4     88 E4 05 F1 | 	add	objptr, ##38024
071f8     F2 26 02 FB | 	rdlong	local01, objptr
071fc     04 4E 05 F1 | 	add	fp, #4
07200     A7 26 62 FC | 	wrlong	local01, fp
07204     08 4E 85 F1 | 	sub	fp, #8
07208                 | ' 
07208                 | ' do
07208     3E 00 00 FF 
0720c     BC E5 85 F1 | 	sub	objptr, ##32188
07210                 | LR__0620
07210     10 4E 05 F1 | 	add	fp, #16
07214     A7 12 02 F6 | 	mov	arg01, fp
07218     08 4E 85 F1 | 	sub	fp, #8
0721c     A7 14 02 FB | 	rdlong	arg02, fp
07220     08 4E 85 F1 | 	sub	fp, #8
07224     18 16 06 F6 | 	mov	arg03, #24
07228     8C E0 B1 FD | 	call	#_psram_spin2_read1
0722c     08 4E 05 F1 | 	add	fp, #8
07230     A7 26 02 FB | 	rdlong	local01, fp
07234     04 4E 05 F1 | 	add	fp, #4
07238     A7 26 62 FC | 	wrlong	local01, fp
0723c     18 4E 05 F1 | 	add	fp, #24
07240     A7 26 02 FB | 	rdlong	local01, fp
07244     1C 4E 85 F1 | 	sub	fp, #28
07248     A7 26 62 FC | 	wrlong	local01, fp
0724c     08 4E 05 F1 | 	add	fp, #8
07250     A7 26 02 FB | 	rdlong	local01, fp
07254     0C 4E 85 F1 | 	sub	fp, #12
07258     A7 16 02 FB | 	rdlong	arg03, fp
0725c     04 4E 85 F1 | 	sub	fp, #4
07260     0B 27 12 F2 | 	cmp	local01, arg03 wc
07264     24 4E 05 C1 |  if_b	add	fp, #36
07268     A7 28 02 CB |  if_b	rdlong	local02, fp
0726c     24 4E 85 C1 |  if_b	sub	fp, #36
07270     FF FF 3F CF 
07274     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07278     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
0727c     0B 00 00 FF 
07280     CC E4 85 F1 | 	sub	objptr, ##5836
07284                 | ' 
07284                 | ' if header(0)=aline then return -1 				' delete it first
07284     10 4E 05 F1 | 	add	fp, #16
07288     A7 26 02 FB | 	rdlong	local01, fp
0728c     0C 4E 85 F1 | 	sub	fp, #12
07290     A7 28 02 FB | 	rdlong	local02, fp
07294     04 4E 85 F1 | 	sub	fp, #4
07298     14 27 0A F2 | 	cmp	local01, local02 wz
0729c     01 FA 65 A6 |  if_e	neg	result1, #1
072a0     48 01 90 AD |  if_e	jmp	#LR__0623
072a4                 | ' if header(0)<aline then return -2 				' end of program reached
072a4     10 4E 05 F1 | 	add	fp, #16
072a8     A7 26 02 FB | 	rdlong	local01, fp
072ac     0C 4E 85 F1 | 	sub	fp, #12
072b0     A7 16 02 FB | 	rdlong	arg03, fp
072b4     04 4E 85 F1 | 	sub	fp, #4
072b8     0B 27 12 F2 | 	cmp	local01, arg03 wc
072bc     02 FA 65 C6 |  if_b	neg	result1, #2
072c0     28 01 90 CD |  if_b	jmp	#LR__0623
072c4                 | ' 
072c4                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
072c4     20 4E 05 F1 | 	add	fp, #32
072c8     A7 26 02 FB | 	rdlong	local01, fp
072cc     20 4E 85 F1 | 	sub	fp, #32
072d0     FF FF 7F FF 
072d4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
072d8     78 00 90 5D |  if_ne	jmp	#LR__0621
072dc     43 00 00 FF 
072e0     5C E4 05 F1 | 	add	objptr, ##34396
072e4     F2 26 02 FB | 	rdlong	local01, objptr
072e8     07 00 00 FF 
072ec     2C E4 05 F1 | 	add	objptr, ##3628
072f0     F2 26 62 FC | 	wrlong	local01, objptr
072f4     0C 4E 05 F1 | 	add	fp, #12
072f8     A7 12 02 FB | 	rdlong	arg01, fp
072fc     0C 4E 85 F1 | 	sub	fp, #12
07300     10 12 06 F1 | 	add	arg01, #16
07304     07 00 00 FF 
07308     2C E4 85 F1 | 	sub	objptr, ##3628
0730c     F2 14 02 FB | 	rdlong	arg02, objptr
07310     43 00 00 FF 
07314     5C E4 85 F1 | 	sub	objptr, ##34396
07318     D4 B3 B1 FD | 	call	#_pslpoke
0731c     47 00 00 FF 
07320     8C E4 05 F1 | 	add	objptr, ##36492
07324     FF FF FF FF 
07328     F2 FE 6B FC | 	wrlong	##-1, objptr
0732c     0C 4E 05 F1 | 	add	fp, #12
07330     A7 26 02 FB | 	rdlong	local01, fp
07334     0C 4E 85 F1 | 	sub	fp, #12
07338     04 E4 05 F1 | 	add	objptr, #4
0733c     F2 26 62 FC | 	wrlong	local01, objptr
07340     47 00 00 FF 
07344     90 E4 85 F1 | 	sub	objptr, ##36496
07348     84 FD BF FD | 	call	#_save_line
0734c                 | '   programstart=programptr
0734c                 | '   pslpoke(lineptr2+16,programptr)
0734c                 | '   ucompiledline(4)=$FFFF_FFFF
0734c                 | '   ucompiledline(5)=lineptr2
0734c                 | '   save_line
0734c                 | '   return 0
0734c     00 FA 05 F6 | 	mov	result1, #0
07350     98 00 90 FD | 	jmp	#LR__0623
07354                 | LR__0621
07354                 | ' 
07354                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
07354     20 4E 05 F1 | 	add	fp, #32
07358     A7 26 02 FB | 	rdlong	local01, fp
0735c     20 4E 85 F1 | 	sub	fp, #32
07360     FF FF 7F FF 
07364     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07368     7C 00 90 AD |  if_e	jmp	#LR__0622
0736c     20 4E 05 F1 | 	add	fp, #32
07370     A7 26 02 FB | 	rdlong	local01, fp
07374     47 00 00 FF 
07378     8C E4 05 F1 | 	add	objptr, ##36492
0737c     F2 26 62 FC | 	wrlong	local01, objptr
07380     14 4E 85 F1 | 	sub	fp, #20
07384     A7 26 02 FB | 	rdlong	local01, fp
07388     04 E4 05 F1 | 	add	objptr, #4
0738c     F2 26 62 FC | 	wrlong	local01, objptr
07390     A7 12 02 FB | 	rdlong	arg01, fp
07394     0C 4E 85 F1 | 	sub	fp, #12
07398     10 12 06 F1 | 	add	arg01, #16
0739c     04 00 00 FF 
073a0     34 E4 85 F1 | 	sub	objptr, ##2100
073a4     F2 14 02 FB | 	rdlong	arg02, objptr
073a8     43 00 00 FF 
073ac     5C E4 85 F1 | 	sub	objptr, ##34396
073b0     3C B3 B1 FD | 	call	#_pslpoke
073b4     20 4E 05 F1 | 	add	fp, #32
073b8     A7 12 02 FB | 	rdlong	arg01, fp
073bc     20 4E 85 F1 | 	sub	fp, #32
073c0     14 12 06 F1 | 	add	arg01, #20
073c4     43 00 00 FF 
073c8     5C E4 05 F1 | 	add	objptr, ##34396
073cc     F2 14 02 FB | 	rdlong	arg02, objptr
073d0     43 00 00 FF 
073d4     5C E4 85 F1 | 	sub	objptr, ##34396
073d8     14 B3 B1 FD | 	call	#_pslpoke
073dc     F0 FC BF FD | 	call	#_save_line
073e0                 | '   ucompiledline(4)=header(4)
073e0                 | '   ucompiledline(5)=lineptr2
073e0                 | '   pslpoke(lineptr2+16,programptr)
073e0                 | '   pslpoke(header(4)+20,programptr)
073e0                 | '   save_line
073e0                 | '   return 0
073e0     00 FA 05 F6 | 	mov	result1, #0
073e4     04 00 90 FD | 	jmp	#LR__0623
073e8                 | LR__0622
073e8     00 FA 05 F6 | 	mov	result1, #0
073ec                 | LR__0623
073ec     A7 F0 03 F6 | 	mov	ptra, fp
073f0     B2 00 A0 FD | 	call	#popregs_
073f4                 | _insertline_ret
073f4     2D 00 64 FD | 	ret
073f8                 | 
073f8                 | ' 
073f8                 | ' '----- Adds a new line at the end of the program
073f8                 | ' 
073f8                 | ' sub add_line_at_end(aline) 
073f8                 | _add_line_at_end
073f8     4A 00 00 FF 
073fc     8C E4 05 F1 | 	add	objptr, ##38028
07400     F2 12 62 FC | 	wrlong	arg01, objptr
07404     04 E4 05 F1 | 	add	objptr, #4
07408     F2 14 02 FB | 	rdlong	arg02, objptr
0740c     03 00 00 FF 
07410     04 E4 85 F1 | 	sub	objptr, ##1540
07414     F2 14 62 FC | 	wrlong	arg02, objptr
07418     03 00 00 FF 
0741c     04 E4 05 F1 | 	add	objptr, ##1540
07420     F2 12 02 FB | 	rdlong	arg01, objptr
07424     14 12 06 F1 | 	add	arg01, #20
07428     07 00 00 FF 
0742c     34 E4 85 F1 | 	sub	objptr, ##3636
07430     F2 14 02 FB | 	rdlong	arg02, objptr
07434     43 00 00 FF 
07438     5C E4 85 F1 | 	sub	objptr, ##34396
0743c     B0 B2 B1 FD | 	call	#_pslpoke
07440     43 00 00 FF 
07444     5C E4 05 F1 | 	add	objptr, ##34396
07448     F2 14 02 FB | 	rdlong	arg02, objptr
0744c     07 00 00 FF 
07450     34 E4 05 F1 | 	add	objptr, ##3636
07454     F2 14 62 FC | 	wrlong	arg02, objptr
07458     03 00 00 FF 
0745c     00 E4 85 F1 | 	sub	objptr, ##1536
07460     FF FF BF FF 
07464     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07468                 | ' 
07468                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07468                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07468     04 00 00 FF 
0746c     34 E4 85 F1 | 	sub	objptr, ##2100
07470     F2 14 02 FB | 	rdlong	arg02, objptr
07474     43 00 00 FF 
07478     5C E4 85 F1 | 	sub	objptr, ##34396
0747c     00 04 00 FF 
07480     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07484     47 00 00 AF 
07488     8C E4 05 A1 |  if_e	add	objptr, ##36492
0748c     FF FF FF AF 
07490     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07494     47 00 00 AF 
07498     8C E4 85 A1 |  if_e	sub	objptr, ##36492
0749c     30 FC BF FD | 	call	#_save_line
074a0     43 00 00 FF 
074a4     5C E4 05 F1 | 	add	objptr, ##34396
074a8     F2 12 02 FB | 	rdlong	arg01, objptr
074ac     43 00 00 FF 
074b0     5C E4 85 F1 | 	sub	objptr, ##34396
074b4     01 14 66 F6 | 	neg	arg02, #1
074b8     34 B2 B1 FD | 	call	#_pslpoke
074bc                 | _add_line_at_end_ret
074bc     2D 00 64 FD | 	ret
074c0                 | 
074c0                 | ' 
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' 
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
074c0                 | ' '--------------------------------------------------------------------------------------------------------------------------
074c0                 | ' 
074c0                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
074c0                 | ' 
074c0                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
074c0                 | _compile_immediate
074c0     0A 4A 05 F6 | 	mov	COUNT_, #10
074c4     A8 00 A0 FD | 	call	#pushregs_
074c8                 | _compile_immediate_enter
074c8     09 2D 02 F6 | 	mov	local04, arg01
074cc     0A 2F 02 F6 | 	mov	local05, arg02
074d0     00 30 06 F6 | 	mov	local06, #0
074d4     00 32 06 F6 | 	mov	local07, #0
074d8     00 34 06 F6 | 	mov	local08, #0
074dc                 | ' 
074dc                 | ' ' linetype=cont+1
074dc                 | ' ' 1 : this is the first part of the line that will continue
074dc                 | ' ' 2 - this is the continuation of the line
074dc                 | ' ' 3 - this is the last continued line
074dc                 | ' ' 4 - this is the one and only part
074dc                 | ' ' 5 - continued after if/else
074dc                 | ' 
074dc                 | ' err=0
074dc                 | ' cmd=0
074dc                 | ' vars=0
074dc                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
074dc     02 2C 0E F2 | 	cmp	local04, #2 wz
074e0     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
074e4     24 00 90 5D |  if_ne	jmp	#LR__0630
074e8     35 00 00 FF 
074ec     10 E4 05 F1 | 	add	objptr, ##27152
074f0     F2 32 02 FB | 	rdlong	local07, objptr
074f4     01 36 06 F6 | 	mov	local09, #1
074f8     02 00 00 FF 
074fc     34 E4 05 F1 | 	add	objptr, ##1076
07500     F2 02 68 FC | 	wrlong	#1, objptr
07504     37 00 00 FF 
07508     44 E4 85 F1 | 	sub	objptr, ##28228
0750c                 | LR__0630
0750c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0750c     04 2C 0E F2 | 	cmp	local04, #4 wz
07510     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07514     30 00 90 5D |  if_ne	jmp	#LR__0631
07518     35 00 00 FF 
0751c     18 E4 05 F1 | 	add	objptr, ##27160
07520     F2 32 02 FB | 	rdlong	local07, objptr
07524     02 36 06 F6 | 	mov	local09, #2
07528     02 00 00 FF 
0752c     2C E4 05 F1 | 	add	objptr, ##1068
07530     F2 04 68 FC | 	wrlong	#2, objptr
07534     13 00 00 FF 
07538     38 E4 05 F1 | 	add	objptr, ##9784
0753c     F2 04 68 FC | 	wrlong	#2, objptr
07540     4A 00 00 FF 
07544     7C E4 85 F1 | 	sub	objptr, ##38012
07548                 | LR__0631
07548                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07548     05 2C 0E F2 | 	cmp	local04, #5 wz
0754c     40 00 90 5D |  if_ne	jmp	#LR__0632
07550     37 00 00 FF 
07554     44 E4 05 F1 | 	add	objptr, ##28228
07558     F2 FC 01 FB | 	rdlong	result2, objptr
0755c     FE 36 02 F6 | 	mov	local09, result2
07560     03 36 66 F0 | 	shl	local09, #3
07564     02 00 00 FF 
07568     38 E4 85 F1 | 	sub	objptr, ##1080
0756c     F2 36 02 F1 | 	add	local09, objptr
07570     04 36 06 F1 | 	add	local09, #4
07574     1B 33 02 FB | 	rdlong	local07, local09
07578     01 FC 05 F1 | 	add	result2, #1
0757c     02 00 00 FF 
07580     38 E4 05 F1 | 	add	objptr, ##1080
07584     F2 FC 61 FC | 	wrlong	result2, objptr
07588     37 00 00 FF 
0758c     44 E4 85 F1 | 	sub	objptr, ##28228
07590                 | LR__0632
07590                 | ' 
07590                 | ' 'print  "In compile_immediate cmd=:", cmd
07590                 | ' 451 select case cmd
07590     5C 32 0E F2 | 	cmp	local07, #92 wz
07594     BC 02 90 AD |  if_e	jmp	#LR__0633
07598     B9 32 0E F2 | 	cmp	local07, #185 wz
0759c     C0 02 90 AD |  if_e	jmp	#LR__0634
075a0     47 32 0E F2 | 	cmp	local07, #71 wz
075a4     C8 02 90 AD |  if_e	jmp	#LR__0635
075a8     59 32 0E F2 | 	cmp	local07, #89 wz
075ac     D0 02 90 AD |  if_e	jmp	#LR__0636
075b0     C3 32 0E F2 | 	cmp	local07, #195 wz
075b4     D8 02 90 AD |  if_e	jmp	#LR__0637
075b8     45 32 0E F2 | 	cmp	local07, #69 wz
075bc     DC 02 90 AD |  if_e	jmp	#LR__0638
075c0     69 32 0E F2 | 	cmp	local07, #105 wz
075c4     E4 02 90 AD |  if_e	jmp	#LR__0639
075c8     40 32 0E F2 | 	cmp	local07, #64 wz
075cc     AC 06 90 AD |  if_e	jmp	#LR__0711
075d0     B4 32 0E F2 | 	cmp	local07, #180 wz
075d4     E0 02 90 AD |  if_e	jmp	#LR__0640
075d8     49 32 0E F2 | 	cmp	local07, #73 wz
075dc     E4 02 90 AD |  if_e	jmp	#LR__0641
075e0     AE 32 0E F2 | 	cmp	local07, #174 wz
075e4     E8 02 90 AD |  if_e	jmp	#LR__0642
075e8     B0 32 0E F2 | 	cmp	local07, #176 wz
075ec     EC 02 90 AD |  if_e	jmp	#LR__0643
075f0     AF 32 0E F2 | 	cmp	local07, #175 wz
075f4     F0 02 90 AD |  if_e	jmp	#LR__0644
075f8     B1 32 0E F2 | 	cmp	local07, #177 wz
075fc     F4 02 90 AD |  if_e	jmp	#LR__0645
07600     68 32 0E F2 | 	cmp	local07, #104 wz
07604     F8 02 90 AD |  if_e	jmp	#LR__0646
07608     B7 32 0E F2 | 	cmp	local07, #183 wz
0760c     6C 06 90 AD |  if_e	jmp	#LR__0711
07610     74 32 0E F2 | 	cmp	local07, #116 wz
07614     F4 02 90 AD |  if_e	jmp	#LR__0647
07618     73 32 0E F2 | 	cmp	local07, #115 wz
0761c     FC 02 90 AD |  if_e	jmp	#LR__0648
07620     6C 32 0E F2 | 	cmp	local07, #108 wz
07624     04 03 90 AD |  if_e	jmp	#LR__0649
07628     89 32 0E F2 | 	cmp	local07, #137 wz
0762c     4C 06 90 AD |  if_e	jmp	#LR__0711
07630     C2 32 0E F2 | 	cmp	local07, #194 wz
07634     04 03 90 AD |  if_e	jmp	#LR__0650
07638     72 32 0E F2 | 	cmp	local07, #114 wz
0763c     08 03 90 AD |  if_e	jmp	#LR__0651
07640     5D 32 0E F2 | 	cmp	local07, #93 wz
07644     0C 03 90 AD |  if_e	jmp	#LR__0652
07648     96 32 0E F2 | 	cmp	local07, #150 wz
0764c     14 03 90 AD |  if_e	jmp	#LR__0653
07650     43 32 0E F2 | 	cmp	local07, #67 wz
07654     18 03 90 AD |  if_e	jmp	#LR__0654
07658     5A 32 0E F2 | 	cmp	local07, #90 wz
0765c     20 03 90 AD |  if_e	jmp	#LR__0655
07660     AB 32 0E F2 | 	cmp	local07, #171 wz
07664     14 06 90 AD |  if_e	jmp	#LR__0711
07668     BD 32 0E F2 | 	cmp	local07, #189 wz
0766c     20 03 90 AD |  if_e	jmp	#LR__0656
07670     BB 32 0E F2 | 	cmp	local07, #187 wz
07674     28 03 90 AD |  if_e	jmp	#LR__0657
07678     4E 32 0E F2 | 	cmp	local07, #78 wz
0767c     30 03 90 AD |  if_e	jmp	#LR__0658
07680     A9 32 0E F2 | 	cmp	local07, #169 wz
07684     48 03 90 AD |  if_e	jmp	#LR__0660
07688     46 32 0E F2 | 	cmp	local07, #70 wz
0768c     60 03 90 AD |  if_e	jmp	#LR__0662
07690     71 32 0E F2 | 	cmp	local07, #113 wz
07694     68 03 90 AD |  if_e	jmp	#LR__0663
07698     60 32 0E F2 | 	cmp	local07, #96 wz
0769c     6C 03 90 AD |  if_e	jmp	#LR__0664
076a0     4A 32 0E F2 | 	cmp	local07, #74 wz
076a4     70 03 90 AD |  if_e	jmp	#LR__0665
076a8     48 32 0E F2 | 	cmp	local07, #72 wz
076ac     74 03 90 AD |  if_e	jmp	#LR__0666
076b0     58 32 0E F2 | 	cmp	local07, #88 wz
076b4     7C 03 90 AD |  if_e	jmp	#LR__0667
076b8     5F 32 0E F2 | 	cmp	local07, #95 wz
076bc     84 03 90 AD |  if_e	jmp	#LR__0668
076c0     B5 32 0E F2 | 	cmp	local07, #181 wz
076c4     88 03 90 AD |  if_e	jmp	#LR__0669
076c8     8A 32 0E F2 | 	cmp	local07, #138 wz
076cc     90 03 90 AD |  if_e	jmp	#LR__0670
076d0     4C 32 0E F2 | 	cmp	local07, #76 wz
076d4     94 03 90 AD |  if_e	jmp	#LR__0671
076d8     52 32 0E F2 | 	cmp	local07, #82 wz
076dc     9C 03 90 AD |  if_e	jmp	#LR__0672
076e0     97 32 0E F2 | 	cmp	local07, #151 wz
076e4     A4 03 90 AD |  if_e	jmp	#LR__0673
076e8     C6 32 0E F2 | 	cmp	local07, #198 wz
076ec     A8 03 90 AD |  if_e	jmp	#LR__0674
076f0     61 32 0E F2 | 	cmp	local07, #97 wz
076f4     AC 03 90 AD |  if_e	jmp	#LR__0675
076f8     63 32 0E F2 | 	cmp	local07, #99 wz
076fc     B0 03 90 AD |  if_e	jmp	#LR__0676
07700     41 32 0E F2 | 	cmp	local07, #65 wz
07704     74 05 90 AD |  if_e	jmp	#LR__0711
07708     4B 32 0E F2 | 	cmp	local07, #75 wz
0770c     AC 03 90 AD |  if_e	jmp	#LR__0677
07710     C1 32 0E F2 | 	cmp	local07, #193 wz
07714     B0 03 90 AD |  if_e	jmp	#LR__0678
07718     B3 32 0E F2 | 	cmp	local07, #179 wz
0771c     B4 03 90 AD |  if_e	jmp	#LR__0679
07720     5E 32 0E F2 | 	cmp	local07, #94 wz
07724     B8 03 90 AD |  if_e	jmp	#LR__0680
07728     7C 32 0E F2 | 	cmp	local07, #124 wz
0772c     BC 03 90 AD |  if_e	jmp	#LR__0681
07730     7D 32 0E F2 | 	cmp	local07, #125 wz
07734     C0 03 90 AD |  if_e	jmp	#LR__0682
07738     7E 32 0E F2 | 	cmp	local07, #126 wz
0773c     C4 03 90 AD |  if_e	jmp	#LR__0683
07740     7F 32 0E F2 | 	cmp	local07, #127 wz
07744     C8 03 90 AD |  if_e	jmp	#LR__0684
07748     80 32 0E F2 | 	cmp	local07, #128 wz
0774c     CC 03 90 AD |  if_e	jmp	#LR__0685
07750     55 32 0E F2 | 	cmp	local07, #85 wz
07754     D0 03 90 AD |  if_e	jmp	#LR__0686
07758     75 32 0E F2 | 	cmp	local07, #117 wz
0775c     D4 03 90 AD |  if_e	jmp	#LR__0687
07760     42 32 0E F2 | 	cmp	local07, #66 wz
07764     DC 03 90 AD |  if_e	jmp	#LR__0688
07768     95 32 0E F2 | 	cmp	local07, #149 wz
0776c     E4 03 90 AD |  if_e	jmp	#LR__0689
07770     AC 32 0E F2 | 	cmp	local07, #172 wz
07774     04 05 90 AD |  if_e	jmp	#LR__0711
07778     81 32 0E F2 | 	cmp	local07, #129 wz
0777c     E0 03 90 AD |  if_e	jmp	#LR__0690
07780     44 32 0E F2 | 	cmp	local07, #68 wz
07784     E4 03 90 AD |  if_e	jmp	#LR__0691
07788     BC 32 0E F2 | 	cmp	local07, #188 wz
0778c     E8 03 90 AD |  if_e	jmp	#LR__0692
07790     88 32 0E F2 | 	cmp	local07, #136 wz
07794     E4 04 90 AD |  if_e	jmp	#LR__0711
07798     B6 32 0E F2 | 	cmp	local07, #182 wz
0779c     E8 03 90 AD |  if_e	jmp	#LR__0693
077a0     92 32 0E F2 | 	cmp	local07, #146 wz
077a4     F0 03 90 AD |  if_e	jmp	#LR__0694
077a8     BE 32 0E F2 | 	cmp	local07, #190 wz
077ac     88 05 90 AD |  if_e	jmp	#LR__0712
077b0     C7 32 0E F2 | 	cmp	local07, #199 wz
077b4     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
077b8     C0 04 90 AD |  if_e	jmp	#LR__0711
077bc     4D 32 0E F2 | 	cmp	local07, #77 wz
077c0     E0 03 90 AD |  if_e	jmp	#LR__0695
077c4     51 32 0E F2 | 	cmp	local07, #81 wz
077c8     E8 03 90 AD |  if_e	jmp	#LR__0696
077cc     8E 32 0E F2 | 	cmp	local07, #142 wz
077d0     F0 03 90 AD |  if_e	jmp	#LR__0697
077d4     90 32 0E F2 | 	cmp	local07, #144 wz
077d8     F4 03 90 AD |  if_e	jmp	#LR__0698
077dc     8D 32 0E F2 | 	cmp	local07, #141 wz
077e0     F8 03 90 AD |  if_e	jmp	#LR__0699
077e4     8C 32 0E F2 | 	cmp	local07, #140 wz
077e8     FC 03 90 AD |  if_e	jmp	#LR__0700
077ec     91 32 0E F2 | 	cmp	local07, #145 wz
077f0     00 04 90 AD |  if_e	jmp	#LR__0701
077f4     8B 32 0E F2 | 	cmp	local07, #139 wz
077f8     04 04 90 AD |  if_e	jmp	#LR__0702
077fc     8F 32 0E F2 | 	cmp	local07, #143 wz
07800     08 04 90 AD |  if_e	jmp	#LR__0703
07804     B2 32 0E F2 | 	cmp	local07, #178 wz
07808     0C 04 90 AD |  if_e	jmp	#LR__0704
0780c     6D 32 0E F2 | 	cmp	local07, #109 wz
07810     14 04 90 AD |  if_e	jmp	#LR__0705
07814     70 32 0E F2 | 	cmp	local07, #112 wz
07818     60 04 90 AD |  if_e	jmp	#LR__0711
0781c     56 32 0E F2 | 	cmp	local07, #86 wz
07820     10 04 90 AD |  if_e	jmp	#LR__0706
07824     57 32 0E F2 | 	cmp	local07, #87 wz
07828     50 04 90 AD |  if_e	jmp	#LR__0711
0782c     79 32 0E F2 | 	cmp	local07, #121 wz
07830     0C 04 90 AD |  if_e	jmp	#LR__0707
07834     77 32 0E F2 | 	cmp	local07, #119 wz
07838     10 04 90 AD |  if_e	jmp	#LR__0708
0783c     78 32 0E F2 | 	cmp	local07, #120 wz
07840     14 04 90 AD |  if_e	jmp	#LR__0709
07844     01 00 00 FF 
07848     04 32 0E F2 | 	cmp	local07, ##516 wz
0784c     14 04 90 AD |  if_e	jmp	#LR__0710
07850     E4 04 90 FD | 	jmp	#LR__0712
07854                 | LR__0633
07854     30 0B B0 FD | 	call	#_compile_fun_2p
07858     FD 30 02 F6 | 	mov	local06, result1
0785c     1C 04 90 FD | 	jmp	#LR__0711
07860                 | LR__0634
07860     F4 0D B0 FD | 	call	#_compile_fun_varp
07864     FD 34 02 F6 | 	mov	local08, result1
07868     FE 30 02 F6 | 	mov	local06, result2
0786c     0C 04 90 FD | 	jmp	#LR__0711
07870                 | LR__0635
07870     E4 0D B0 FD | 	call	#_compile_fun_varp
07874     FD 34 02 F6 | 	mov	local08, result1
07878     FE 30 02 F6 | 	mov	local06, result2
0787c     FC 03 90 FD | 	jmp	#LR__0711
07880                 | LR__0636
07880     D4 0D B0 FD | 	call	#_compile_fun_varp
07884     FD 34 02 F6 | 	mov	local08, result1
07888     FE 30 02 F6 | 	mov	local06, result2
0788c     EC 03 90 FD | 	jmp	#LR__0711
07890                 | LR__0637
07890                 | ' return expr()
07890     30 42 B0 FD | 	call	#_expr
07894     FD 30 02 F6 | 	mov	local06, result1
07898     E0 03 90 FD | 	jmp	#LR__0711
0789c                 | LR__0638
0789c     B8 0D B0 FD | 	call	#_compile_fun_varp
078a0     FD 34 02 F6 | 	mov	local08, result1
078a4     FE 30 02 F6 | 	mov	local06, result2
078a8     D0 03 90 FD | 	jmp	#LR__0711
078ac                 | LR__0639
078ac                 | ' return expr()
078ac     14 42 B0 FD | 	call	#_expr
078b0     FD 30 02 F6 | 	mov	local06, result1
078b4     C4 03 90 FD | 	jmp	#LR__0711
078b8                 | LR__0640
078b8                 | ' return expr()
078b8     08 42 B0 FD | 	call	#_expr
078bc     FD 30 02 F6 | 	mov	local06, result1
078c0     B8 03 90 FD | 	jmp	#LR__0711
078c4                 | LR__0641
078c4                 | ' return expr()
078c4     FC 41 B0 FD | 	call	#_expr
078c8     FD 30 02 F6 | 	mov	local06, result1
078cc     AC 03 90 FD | 	jmp	#LR__0711
078d0                 | LR__0642
078d0     B4 0A B0 FD | 	call	#_compile_fun_2p
078d4     FD 30 02 F6 | 	mov	local06, result1
078d8     A0 03 90 FD | 	jmp	#LR__0711
078dc                 | LR__0643
078dc     A8 0A B0 FD | 	call	#_compile_fun_2p
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     94 03 90 FD | 	jmp	#LR__0711
078e8                 | LR__0644
078e8     9C 0A B0 FD | 	call	#_compile_fun_2p
078ec     FD 30 02 F6 | 	mov	local06, result1
078f0     88 03 90 FD | 	jmp	#LR__0711
078f4                 | LR__0645
078f4     90 0A B0 FD | 	call	#_compile_fun_2p
078f8     FD 30 02 F6 | 	mov	local06, result1
078fc     7C 03 90 FD | 	jmp	#LR__0711
07900                 | LR__0646
07900                 | ' return expr()
07900     C0 41 B0 FD | 	call	#_expr
07904     FD 30 02 F6 | 	mov	local06, result1
07908     70 03 90 FD | 	jmp	#LR__0711
0790c                 | LR__0647
0790c     48 0D B0 FD | 	call	#_compile_fun_varp
07910     FD 34 02 F6 | 	mov	local08, result1
07914     FE 30 02 F6 | 	mov	local06, result2
07918     60 03 90 FD | 	jmp	#LR__0711
0791c                 | LR__0648
0791c     38 0D B0 FD | 	call	#_compile_fun_varp
07920     FD 34 02 F6 | 	mov	local08, result1
07924     FE 30 02 F6 | 	mov	local06, result2
07928     50 03 90 FD | 	jmp	#LR__0711
0792c                 | LR__0649
0792c     28 0D B0 FD | 	call	#_compile_fun_varp
07930     FD 34 02 F6 | 	mov	local08, result1
07934     FE 30 02 F6 | 	mov	local06, result2
07938     40 03 90 FD | 	jmp	#LR__0711
0793c                 | LR__0650
0793c                 | ' return expr()
0793c     84 41 B0 FD | 	call	#_expr
07940     FD 30 02 F6 | 	mov	local06, result1
07944     34 03 90 FD | 	jmp	#LR__0711
07948                 | LR__0651
07948     30 22 B0 FD | 	call	#_compile_dim
0794c     FD 30 02 F6 | 	mov	local06, result1
07950     E4 03 90 FD | 	jmp	#LR__0712
07954                 | LR__0652
07954     00 0D B0 FD | 	call	#_compile_fun_varp
07958     FD 34 02 F6 | 	mov	local08, result1
0795c     FE 30 02 F6 | 	mov	local06, result2
07960     18 03 90 FD | 	jmp	#LR__0711
07964                 | LR__0653
07964     20 0A B0 FD | 	call	#_compile_fun_2p
07968     FD 30 02 F6 | 	mov	local06, result1
0796c     0C 03 90 FD | 	jmp	#LR__0711
07970                 | LR__0654
07970     E4 0C B0 FD | 	call	#_compile_fun_varp
07974     FD 34 02 F6 | 	mov	local08, result1
07978     FE 30 02 F6 | 	mov	local06, result2
0797c     FC 02 90 FD | 	jmp	#LR__0711
07980                 | LR__0655
07980     17 13 02 F6 | 	mov	arg01, local05
07984     BC 20 B0 FD | 	call	#_compile_else
07988     FD 30 02 F6 | 	mov	local06, result1
0798c     A8 03 90 FD | 	jmp	#LR__0712
07990                 | LR__0656
07990     C4 0C B0 FD | 	call	#_compile_fun_varp
07994     FD 34 02 F6 | 	mov	local08, result1
07998     FE 30 02 F6 | 	mov	local06, result2
0799c     DC 02 90 FD | 	jmp	#LR__0711
079a0                 | LR__0657
079a0     B4 0C B0 FD | 	call	#_compile_fun_varp
079a4     FD 34 02 F6 | 	mov	local08, result1
079a8     FE 30 02 F6 | 	mov	local06, result2
079ac     CC 02 90 FD | 	jmp	#LR__0711
079b0                 | LR__0658
079b0     01 2E 16 F2 | 	cmp	local05, #1 wc
079b4     08 00 90 CD |  if_b	jmp	#LR__0659
079b8     5C 33 B0 FD | 	call	#_compile_goto
079bc     78 03 90 FD | 	jmp	#LR__0712
079c0                 | LR__0659
079c0     19 12 06 F6 | 	mov	arg01, #25
079c4     00 14 06 F6 | 	mov	arg02, #0
079c8     84 AB B1 FD | 	call	#_printerror
079cc     68 03 90 FD | 	jmp	#LR__0712
079d0                 | LR__0660
079d0     01 2E 16 F2 | 	cmp	local05, #1 wc
079d4     08 00 90 CD |  if_b	jmp	#LR__0661
079d8     D8 32 B0 FD | 	call	#_compile_gosub
079dc     58 03 90 FD | 	jmp	#LR__0712
079e0                 | LR__0661
079e0     19 12 06 F6 | 	mov	arg01, #25
079e4     00 14 06 F6 | 	mov	arg02, #0
079e8     64 AB B1 FD | 	call	#_printerror
079ec     48 03 90 FD | 	jmp	#LR__0712
079f0                 | LR__0662
079f0     64 0C B0 FD | 	call	#_compile_fun_varp
079f4     FD 34 02 F6 | 	mov	local08, result1
079f8     FE 30 02 F6 | 	mov	local06, result2
079fc     7C 02 90 FD | 	jmp	#LR__0711
07a00                 | LR__0663
07a00     FC 0A B0 FD | 	call	#_compile_fun_4p
07a04     FD 30 02 F6 | 	mov	local06, result1
07a08     70 02 90 FD | 	jmp	#LR__0711
07a0c                 | LR__0664
07a0c                 | ' return expr()
07a0c     B4 40 B0 FD | 	call	#_expr
07a10     FD 30 02 F6 | 	mov	local06, result1
07a14     64 02 90 FD | 	jmp	#LR__0711
07a18                 | LR__0665
07a18     34 28 B0 FD | 	call	#_compile_for
07a1c     FD 30 02 F6 | 	mov	local06, result1
07a20     14 03 90 FD | 	jmp	#LR__0712
07a24                 | LR__0666
07a24     30 0C B0 FD | 	call	#_compile_fun_varp
07a28     FD 34 02 F6 | 	mov	local08, result1
07a2c     FE 30 02 F6 | 	mov	local06, result2
07a30     48 02 90 FD | 	jmp	#LR__0711
07a34                 | LR__0667
07a34     17 13 02 F6 | 	mov	arg01, local05
07a38     80 1E B0 FD | 	call	#_compile_if
07a3c     FD 30 02 F6 | 	mov	local06, result1
07a40     F4 02 90 FD | 	jmp	#LR__0712
07a44                 | LR__0668
07a44                 | ' return expr()
07a44     7C 40 B0 FD | 	call	#_expr
07a48     FD 30 02 F6 | 	mov	local06, result1
07a4c     2C 02 90 FD | 	jmp	#LR__0711
07a50                 | LR__0669
07a50     D0 0D B0 FD | 	call	#_compile_input
07a54     FD 34 02 F6 | 	mov	local08, result1
07a58     FE 30 02 F6 | 	mov	local06, result2
07a5c     1C 02 90 FD | 	jmp	#LR__0711
07a60                 | LR__0670
07a60                 | ' return expr()
07a60     60 40 B0 FD | 	call	#_expr
07a64     FD 30 02 F6 | 	mov	local06, result1
07a68     10 02 90 FD | 	jmp	#LR__0711
07a6c                 | LR__0671
07a6c     E8 0B B0 FD | 	call	#_compile_fun_varp
07a70     FD 34 02 F6 | 	mov	local08, result1
07a74     FE 30 02 F6 | 	mov	local06, result2
07a78     00 02 90 FD | 	jmp	#LR__0711
07a7c                 | LR__0672
07a7c     D8 0B B0 FD | 	call	#_compile_fun_varp
07a80     FD 34 02 F6 | 	mov	local08, result1
07a84     FE 30 02 F6 | 	mov	local06, result2
07a88     F0 01 90 FD | 	jmp	#LR__0711
07a8c                 | LR__0673
07a8c     F8 08 B0 FD | 	call	#_compile_fun_2p
07a90     FD 30 02 F6 | 	mov	local06, result1
07a94     E4 01 90 FD | 	jmp	#LR__0711
07a98                 | LR__0674
07a98                 | ' return expr()
07a98     28 40 B0 FD | 	call	#_expr
07a9c     FD 30 02 F6 | 	mov	local06, result1
07aa0     D8 01 90 FD | 	jmp	#LR__0711
07aa4                 | LR__0675
07aa4                 | ' return expr()
07aa4     1C 40 B0 FD | 	call	#_expr
07aa8     FD 30 02 F6 | 	mov	local06, result1
07aac     CC 01 90 FD | 	jmp	#LR__0711
07ab0                 | LR__0676
07ab0                 | ' return expr()
07ab0     10 40 B0 FD | 	call	#_expr
07ab4     FD 30 02 F6 | 	mov	local06, result1
07ab8     C0 01 90 FD | 	jmp	#LR__0711
07abc                 | LR__0677
07abc     5C 30 B0 FD | 	call	#_compile_next
07ac0     FD 30 02 F6 | 	mov	local06, result1
07ac4     70 02 90 FD | 	jmp	#LR__0712
07ac8                 | LR__0678
07ac8     3C 36 B0 FD | 	call	#_compile_on
07acc     FD 30 02 F6 | 	mov	local06, result1
07ad0     64 02 90 FD | 	jmp	#LR__0712
07ad4                 | LR__0679
07ad4     38 09 B0 FD | 	call	#_compile_fun_3p
07ad8     FD 30 02 F6 | 	mov	local06, result1
07adc     9C 01 90 FD | 	jmp	#LR__0711
07ae0                 | LR__0680
07ae0                 | ' return expr()
07ae0     E0 3F B0 FD | 	call	#_expr
07ae4     FD 30 02 F6 | 	mov	local06, result1
07ae8     90 01 90 FD | 	jmp	#LR__0711
07aec                 | LR__0681
07aec                 | ' return expr()
07aec     D4 3F B0 FD | 	call	#_expr
07af0     FD 30 02 F6 | 	mov	local06, result1
07af4     84 01 90 FD | 	jmp	#LR__0711
07af8                 | LR__0682
07af8                 | ' return expr()
07af8     C8 3F B0 FD | 	call	#_expr
07afc     FD 30 02 F6 | 	mov	local06, result1
07b00     78 01 90 FD | 	jmp	#LR__0711
07b04                 | LR__0683
07b04                 | ' return expr()
07b04     BC 3F B0 FD | 	call	#_expr
07b08     FD 30 02 F6 | 	mov	local06, result1
07b0c     6C 01 90 FD | 	jmp	#LR__0711
07b10                 | LR__0684
07b10     EC 09 B0 FD | 	call	#_compile_fun_4p
07b14     FD 30 02 F6 | 	mov	local06, result1
07b18     60 01 90 FD | 	jmp	#LR__0711
07b1c                 | LR__0685
07b1c                 | ' return expr()
07b1c     A4 3F B0 FD | 	call	#_expr
07b20     FD 30 02 F6 | 	mov	local06, result1
07b24     54 01 90 FD | 	jmp	#LR__0711
07b28                 | LR__0686
07b28     5C 08 B0 FD | 	call	#_compile_fun_2p
07b2c     FD 30 02 F6 | 	mov	local06, result1
07b30     48 01 90 FD | 	jmp	#LR__0711
07b34                 | LR__0687
07b34     20 0B B0 FD | 	call	#_compile_fun_varp
07b38     FD 34 02 F6 | 	mov	local08, result1
07b3c     FE 30 02 F6 | 	mov	local06, result2
07b40     38 01 90 FD | 	jmp	#LR__0711
07b44                 | LR__0688
07b44     10 0B B0 FD | 	call	#_compile_fun_varp
07b48     FD 34 02 F6 | 	mov	local08, result1
07b4c     FE 30 02 F6 | 	mov	local06, result2
07b50     28 01 90 FD | 	jmp	#LR__0711
07b54                 | LR__0689
07b54     30 08 B0 FD | 	call	#_compile_fun_2p
07b58     FD 30 02 F6 | 	mov	local06, result1
07b5c     1C 01 90 FD | 	jmp	#LR__0711
07b60                 | LR__0690
07b60     24 08 B0 FD | 	call	#_compile_fun_2p
07b64     FD 30 02 F6 | 	mov	local06, result1
07b68     10 01 90 FD | 	jmp	#LR__0711
07b6c                 | LR__0691
07b6c     74 16 B0 FD | 	call	#_compile_print
07b70     FD 30 02 F6 | 	mov	local06, result1
07b74     C0 01 90 FD | 	jmp	#LR__0712
07b78                 | LR__0692
07b78     DC 0A B0 FD | 	call	#_compile_fun_varp
07b7c     FD 34 02 F6 | 	mov	local08, result1
07b80     FE 30 02 F6 | 	mov	local06, result2
07b84     F4 00 90 FD | 	jmp	#LR__0711
07b88                 | LR__0693
07b88     A8 0B B0 FD | 	call	#_compile_read
07b8c     FD 34 02 F6 | 	mov	local08, result1
07b90     FE 30 02 F6 | 	mov	local06, result2
07b94     E4 00 90 FD | 	jmp	#LR__0711
07b98                 | LR__0694
07b98                 | ' return expr()
07b98     28 3F B0 FD | 	call	#_expr
07b9c     FD 30 02 F6 | 	mov	local06, result1
07ba0     D8 00 90 FD | 	jmp	#LR__0711
07ba4                 | LR__0695
07ba4     B0 0A B0 FD | 	call	#_compile_fun_varp
07ba8     FD 34 02 F6 | 	mov	local08, result1
07bac     FE 30 02 F6 | 	mov	local06, result2
07bb0     C8 00 90 FD | 	jmp	#LR__0711
07bb4                 | LR__0696
07bb4     A0 0A B0 FD | 	call	#_compile_fun_varp
07bb8     FD 34 02 F6 | 	mov	local08, result1
07bbc     FE 30 02 F6 | 	mov	local06, result2
07bc0     B8 00 90 FD | 	jmp	#LR__0711
07bc4                 | LR__0697
07bc4     C0 07 B0 FD | 	call	#_compile_fun_2p
07bc8     FD 30 02 F6 | 	mov	local06, result1
07bcc     AC 00 90 FD | 	jmp	#LR__0711
07bd0                 | LR__0698
07bd0     B4 07 B0 FD | 	call	#_compile_fun_2p
07bd4     FD 30 02 F6 | 	mov	local06, result1
07bd8     A0 00 90 FD | 	jmp	#LR__0711
07bdc                 | LR__0699
07bdc     A8 07 B0 FD | 	call	#_compile_fun_2p
07be0     FD 30 02 F6 | 	mov	local06, result1
07be4     94 00 90 FD | 	jmp	#LR__0711
07be8                 | LR__0700
07be8     9C 07 B0 FD | 	call	#_compile_fun_2p
07bec     FD 30 02 F6 | 	mov	local06, result1
07bf0     88 00 90 FD | 	jmp	#LR__0711
07bf4                 | LR__0701
07bf4     90 07 B0 FD | 	call	#_compile_fun_2p
07bf8     FD 30 02 F6 | 	mov	local06, result1
07bfc     7C 00 90 FD | 	jmp	#LR__0711
07c00                 | LR__0702
07c00     84 07 B0 FD | 	call	#_compile_fun_2p
07c04     FD 30 02 F6 | 	mov	local06, result1
07c08     70 00 90 FD | 	jmp	#LR__0711
07c0c                 | LR__0703
07c0c     78 07 B0 FD | 	call	#_compile_fun_2p
07c10     FD 30 02 F6 | 	mov	local06, result1
07c14     64 00 90 FD | 	jmp	#LR__0711
07c18                 | LR__0704
07c18     3C 0A B0 FD | 	call	#_compile_fun_varp
07c1c     FD 34 02 F6 | 	mov	local08, result1
07c20     FE 30 02 F6 | 	mov	local06, result2
07c24     54 00 90 FD | 	jmp	#LR__0711
07c28                 | LR__0705
07c28     E4 07 B0 FD | 	call	#_compile_fun_3p
07c2c     FD 30 02 F6 | 	mov	local06, result1
07c30     48 00 90 FD | 	jmp	#LR__0711
07c34                 | LR__0706
07c34                 | ' return expr()
07c34     8C 3E B0 FD | 	call	#_expr
07c38     FD 30 02 F6 | 	mov	local06, result1
07c3c     3C 00 90 FD | 	jmp	#LR__0711
07c40                 | LR__0707
07c40     44 07 B0 FD | 	call	#_compile_fun_2p
07c44     FD 30 02 F6 | 	mov	local06, result1
07c48     30 00 90 FD | 	jmp	#LR__0711
07c4c                 | LR__0708
07c4c     38 07 B0 FD | 	call	#_compile_fun_2p
07c50     FD 30 02 F6 | 	mov	local06, result1
07c54     24 00 90 FD | 	jmp	#LR__0711
07c58                 | LR__0709
07c58     2C 07 B0 FD | 	call	#_compile_fun_2p
07c5c     FD 30 02 F6 | 	mov	local06, result1
07c60     18 00 90 FD | 	jmp	#LR__0711
07c64                 | LR__0710
07c64     1C 13 B0 FD | 	call	#_compile_array_assign
07c68     FD 30 02 F6 | 	mov	local06, result1
07c6c     0E 30 0E F2 | 	cmp	local06, #14 wz
07c70     C4 00 90 5D |  if_ne	jmp	#LR__0712
07c74                 | ' return 23
07c74     17 30 06 F6 | 	mov	local06, #23
07c78     BC 00 90 FD | 	jmp	#LR__0712
07c7c                 | ' return 23
07c7c                 | LR__0711
07c7c     19 2B 02 F6 | 	mov	local03, local07
07c80     1A 27 02 F6 | 	mov	local01, local08
07c84     13 37 02 F6 | 	mov	local09, local01
07c88     14 39 02 F6 | 	mov	local10, local02
07c8c     15 33 02 F6 | 	mov	local07, local03
07c90     4A 00 00 FF 
07c94     7C E4 05 F1 | 	add	objptr, ##38012
07c98     F2 26 02 FB | 	rdlong	local01, objptr
07c9c     13 35 02 F6 | 	mov	local08, local01
07ca0     01 34 66 F0 | 	shl	local08, #1
07ca4     13 35 02 F1 | 	add	local08, local01
07ca8     02 34 66 F0 | 	shl	local08, #2
07cac     03 00 00 FF 
07cb0     00 E4 85 F1 | 	sub	objptr, ##1536
07cb4     F2 34 02 F1 | 	add	local08, objptr
07cb8     1A 37 62 FC | 	wrlong	local09, local08
07cbc     03 00 00 FF 
07cc0     00 E4 05 F1 | 	add	objptr, ##1536
07cc4     F2 26 02 FB | 	rdlong	local01, objptr
07cc8     13 37 02 F6 | 	mov	local09, local01
07ccc     01 36 66 F0 | 	shl	local09, #1
07cd0     13 37 02 F1 | 	add	local09, local01
07cd4     02 36 66 F0 | 	shl	local09, #2
07cd8     03 00 00 FF 
07cdc     00 E4 85 F1 | 	sub	objptr, ##1536
07ce0     F2 36 02 F1 | 	add	local09, objptr
07ce4     04 36 06 F1 | 	add	local09, #4
07ce8     1B 39 62 FC | 	wrlong	local10, local09
07cec     03 00 00 FF 
07cf0     00 E4 05 F1 | 	add	objptr, ##1536
07cf4     F2 26 02 FB | 	rdlong	local01, objptr
07cf8     13 39 02 F6 | 	mov	local10, local01
07cfc     01 38 66 F0 | 	shl	local10, #1
07d00     13 39 02 F1 | 	add	local10, local01
07d04     02 38 66 F0 | 	shl	local10, #2
07d08     03 00 00 FF 
07d0c     00 E4 85 F1 | 	sub	objptr, ##1536
07d10     F2 38 02 F1 | 	add	local10, objptr
07d14     08 38 06 F1 | 	add	local10, #8
07d18     1C 33 62 FC | 	wrlong	local07, local10
07d1c     03 00 00 FF 
07d20     00 E4 05 F1 | 	add	objptr, ##1536
07d24     F2 36 02 FB | 	rdlong	local09, objptr
07d28     01 36 06 F1 | 	add	local09, #1
07d2c     F2 36 62 FC | 	wrlong	local09, objptr
07d30     4A 00 00 FF 
07d34     7C E4 85 F1 | 	sub	objptr, ##38012
07d38                 | LR__0712
07d38                 | ' 
07d38                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07d38                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07d38     03 2C 0E F2 | 	cmp	local04, #3 wz
07d3c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07d40     38 00 90 5D |  if_ne	jmp	#LR__0713
07d44     4A 00 00 FF 
07d48     7C E4 05 F1 | 	add	objptr, ##38012
07d4c     F2 38 02 FB | 	rdlong	local10, objptr
07d50     1C 27 02 F6 | 	mov	local01, local10
07d54     01 26 66 F0 | 	shl	local01, #1
07d58     1C 27 02 F1 | 	add	local01, local10
07d5c     02 26 66 F0 | 	shl	local01, #2
07d60     03 00 00 FF 
07d64     00 E4 85 F1 | 	sub	objptr, ##1536
07d68     F2 26 02 F1 | 	add	local01, objptr
07d6c     08 26 06 F1 | 	add	local01, #8
07d70     13 FD 6B FC | 	wrlong	#510, local01
07d74     47 00 00 FF 
07d78     7C E4 85 F1 | 	sub	objptr, ##36476
07d7c                 | LR__0713
07d7c                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07d7c                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07d7c     4A 00 00 FF 
07d80     7C E4 05 F1 | 	add	objptr, ##38012
07d84     F2 26 02 FB | 	rdlong	local01, objptr
07d88     4A 00 00 FF 
07d8c     7C E4 85 F1 | 	sub	objptr, ##38012
07d90     97 58 48 FB | 	callpa	#(@LR__0716-@LR__0714)>>2,fcache_load_ptr_
07d94                 | LR__0714
07d94     13 39 02 F6 | 	mov	local10, local01
07d98     01 38 66 F0 | 	shl	local10, #1
07d9c     13 39 02 F1 | 	add	local10, local01
07da0     02 38 66 F0 | 	shl	local10, #2
07da4     47 00 00 FF 
07da8     7C E4 05 F1 | 	add	objptr, ##36476
07dac     F2 38 02 F1 | 	add	local10, objptr
07db0     08 38 06 F1 | 	add	local10, #8
07db4     1C 39 02 FB | 	rdlong	local10, local10
07db8     9B 38 0E F2 | 	cmp	local10, #155 wz
07dbc     47 00 00 FF 
07dc0     7C E4 85 F1 | 	sub	objptr, ##36476
07dc4     70 00 90 5D |  if_ne	jmp	#LR__0715
07dc8     13 37 02 F6 | 	mov	local09, local01
07dcc     01 36 86 F1 | 	sub	local09, #1
07dd0     1B 39 02 F6 | 	mov	local10, local09
07dd4     01 38 66 F0 | 	shl	local10, #1
07dd8     1B 39 02 F1 | 	add	local10, local09
07ddc     02 38 66 F0 | 	shl	local10, #2
07de0     47 00 00 FF 
07de4     7C E4 05 F1 | 	add	objptr, ##36476
07de8     F2 38 02 F1 | 	add	local10, objptr
07dec     08 38 06 F1 | 	add	local10, #8
07df0     1C 39 02 FB | 	rdlong	local10, local10
07df4     11 38 0E F2 | 	cmp	local10, #17 wz
07df8     47 00 00 FF 
07dfc     7C E4 85 F1 | 	sub	objptr, ##36476
07e00     34 00 90 5D |  if_ne	jmp	#LR__0715
07e04     13 37 02 F6 | 	mov	local09, local01
07e08     01 36 86 F1 | 	sub	local09, #1
07e0c     1B 39 02 F6 | 	mov	local10, local09
07e10     01 38 66 F0 | 	shl	local10, #1
07e14     1B 39 02 F1 | 	add	local10, local09
07e18     02 38 66 F0 | 	shl	local10, #2
07e1c     47 00 00 FF 
07e20     7C E4 05 F1 | 	add	objptr, ##36476
07e24     F2 38 02 F1 | 	add	local10, objptr
07e28     08 38 06 F1 | 	add	local10, #8
07e2c     1C 25 68 FC | 	wrlong	#18, local10
07e30     47 00 00 FF 
07e34     7C E4 85 F1 | 	sub	objptr, ##36476
07e38                 | LR__0715
07e38     01 26 86 F1 | 	sub	local01, #1
07e3c     01 26 56 F2 | 	cmps	local01, #1 wc
07e40     50 FF 9F 3D |  if_ae	jmp	#LR__0714
07e44                 | LR__0716
07e44                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07e44                 | ' return err
07e44     18 FB 01 F6 | 	mov	result1, local06
07e48     A7 F0 03 F6 | 	mov	ptra, fp
07e4c     B2 00 A0 FD | 	call	#popregs_
07e50                 | _compile_immediate_ret
07e50     2D 00 64 FD | 	ret
07e54                 | 
07e54                 | ' 
07e54                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07e54                 | ' 
07e54                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07e54                 | _compile_immediate_assign
07e54     0C 4A 05 F6 | 	mov	COUNT_, #12
07e58     A8 00 A0 FD | 	call	#pushregs_
07e5c     09 2D 02 F6 | 	mov	local04, arg01
07e60     FF 2A 06 F6 | 	mov	local03, #255
07e64     01 2E 66 F6 | 	neg	local05, #1
07e68     00 30 06 F6 | 	mov	local06, #0
07e6c                 | ' 
07e6c                 | ' t1.result_type=result_error : t1.result.uresult=0
07e6c                 | ' i=-1: j=-1 : err=0
07e6c                 | ' 
07e6c                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07e6c     02 2C 0E F2 | 	cmp	local04, #2 wz
07e70     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07e74     35 00 00 AF 
07e78     0C E4 05 A1 |  if_e	add	objptr, ##27148
07e7c     F2 32 02 AB |  if_e	rdlong	local07, objptr
07e80     02 00 00 AF 
07e84     38 E4 05 A1 |  if_e	add	objptr, ##1080
07e88     F2 04 68 AC |  if_e	wrlong	#2, objptr
07e8c     37 00 00 AF 
07e90     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07e94                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07e94     04 2C 0E F2 | 	cmp	local04, #4 wz
07e98     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07e9c     2C 00 90 5D |  if_ne	jmp	#LR__0720
07ea0     35 00 00 FF 
07ea4     14 E4 05 F1 | 	add	objptr, ##27156
07ea8     F2 32 02 FB | 	rdlong	local07, objptr
07eac     02 00 00 FF 
07eb0     30 E4 05 F1 | 	add	objptr, ##1072
07eb4     F2 06 68 FC | 	wrlong	#3, objptr
07eb8     13 00 00 FF 
07ebc     38 E4 05 F1 | 	add	objptr, ##9784
07ec0     F2 04 68 FC | 	wrlong	#2, objptr
07ec4     4A 00 00 FF 
07ec8     7C E4 85 F1 | 	sub	objptr, ##38012
07ecc                 | LR__0720
07ecc                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07ecc     05 2C 0E F2 | 	cmp	local04, #5 wz
07ed0     3C 00 90 5D |  if_ne	jmp	#LR__0721
07ed4     37 00 00 FF 
07ed8     44 E4 05 F1 | 	add	objptr, ##28228
07edc     F2 FA 01 FB | 	rdlong	result1, objptr
07ee0     FD 32 02 F6 | 	mov	local07, result1
07ee4     03 32 66 F0 | 	shl	local07, #3
07ee8     02 00 00 FF 
07eec     38 E4 85 F1 | 	sub	objptr, ##1080
07ef0     F2 32 02 F1 | 	add	local07, objptr
07ef4     19 33 02 FB | 	rdlong	local07, local07
07ef8     02 FA 05 F1 | 	add	result1, #2
07efc     02 00 00 FF 
07f00     38 E4 05 F1 | 	add	objptr, ##1080
07f04     F2 FA 61 FC | 	wrlong	result1, objptr
07f08     37 00 00 FF 
07f0c     44 E4 85 F1 | 	sub	objptr, ##28228
07f10                 | LR__0721
07f10     19 13 02 F6 | 	mov	arg01, local07
07f14     01 14 06 F6 | 	mov	arg02, #1
07f18     2C 01 B2 FD | 	call	#__system__Right_S
07f1c     FD 34 02 F6 | 	mov	local08, result1
07f20     A0 3B B0 FD | 	call	#_expr
07f24                 | ' 
07f24                 | ' suffix2$=right$(varname2$,1)
07f24                 | ' expr()
07f24                 | ' if varnum>0 then					' try to find a variable
07f24     35 00 00 FF 
07f28     08 E4 05 F1 | 	add	objptr, ##27144
07f2c     F2 36 02 FB | 	rdlong	local09, objptr
07f30     35 00 00 FF 
07f34     08 E4 85 F1 | 	sub	objptr, ##27144
07f38     01 36 56 F2 | 	cmps	local09, #1 wc
07f3c     58 00 90 CD |  if_b	jmp	#LR__0724
07f40                 | '   for i=0 to varnum-1
07f40     00 38 06 F6 | 	mov	local10, #0
07f44     35 00 00 FF 
07f48     08 E4 05 F1 | 	add	objptr, ##27144
07f4c     F2 3A 02 FB | 	rdlong	local11, objptr
07f50     35 00 00 FF 
07f54     08 E4 85 F1 | 	sub	objptr, ##27144
07f58                 | LR__0722
07f58     1D 39 52 F2 | 	cmps	local10, local11 wc
07f5c     38 00 90 3D |  if_ae	jmp	#LR__0723
07f60                 | '     if variables(i).name=varname2$ then j=i : exit
07f60     1C 37 02 F6 | 	mov	local09, local10
07f64     04 36 66 F0 | 	shl	local09, #4
07f68     14 00 00 FF 
07f6c     F8 E5 05 F1 | 	add	objptr, ##10744
07f70     F2 36 02 F1 | 	add	local09, objptr
07f74     1B 13 02 FB | 	rdlong	arg01, local09
07f78     19 15 02 F6 | 	mov	arg02, local07
07f7c     14 00 00 FF 
07f80     F8 E5 85 F1 | 	sub	objptr, ##10744
07f84     E0 DF B1 FD | 	call	#__system___string_cmp
07f88     00 FA 0D F2 | 	cmp	result1, #0 wz
07f8c     1C 2F 02 A6 |  if_e	mov	local05, local10
07f90     01 38 06 51 |  if_ne	add	local10, #1
07f94     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
07f98                 | LR__0723
07f98                 | LR__0724
07f98                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07f98     FF FF 7F FF 
07f9c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07fa0     60 00 90 5D |  if_ne	jmp	#LR__0725
07fa4     35 00 00 FF 
07fa8     08 E4 05 F1 | 	add	objptr, ##27144
07fac     F2 36 02 FB | 	rdlong	local09, objptr
07fb0     35 00 00 FF 
07fb4     08 E4 85 F1 | 	sub	objptr, ##27144
07fb8     02 00 00 FF 
07fbc     00 36 56 F2 | 	cmps	local09, ##1024 wc
07fc0     40 00 90 3D |  if_ae	jmp	#LR__0725
07fc4     35 00 00 FF 
07fc8     08 E4 05 F1 | 	add	objptr, ##27144
07fcc     F2 3A 02 FB | 	rdlong	local11, objptr
07fd0     04 3A 66 F0 | 	shl	local11, #4
07fd4     20 00 00 FF 
07fd8     10 E4 85 F1 | 	sub	objptr, ##16400
07fdc     F2 3A 02 F1 | 	add	local11, objptr
07fe0     1D 33 62 FC | 	wrlong	local07, local11
07fe4     20 00 00 FF 
07fe8     10 E4 05 F1 | 	add	objptr, ##16400
07fec     F2 36 02 FB | 	rdlong	local09, objptr
07ff0     1B 2F 02 F6 | 	mov	local05, local09
07ff4     01 36 06 F1 | 	add	local09, #1
07ff8     F2 36 62 FC | 	wrlong	local09, objptr
07ffc     35 00 00 FF 
08000     08 E4 85 F1 | 	sub	objptr, ##27144
08004                 | LR__0725
08004                 | ' if varnum>=maxvars then
08004     35 00 00 FF 
08008     08 E4 05 F1 | 	add	objptr, ##27144
0800c     F2 36 02 FB | 	rdlong	local09, objptr
08010     35 00 00 FF 
08014     08 E4 85 F1 | 	sub	objptr, ##27144
08018     02 00 00 FF 
0801c     00 36 56 F2 | 	cmps	local09, ##1024 wc
08020     2D 30 06 36 |  if_ae	mov	local06, #45
08024     C8 01 90 3D |  if_ae	jmp	#LR__0730
08028     17 27 02 F6 | 	mov	local01, local05
0802c     17 2A 06 F6 | 	mov	local03, #23
08030     13 37 02 F6 | 	mov	local09, local01
08034     14 3D 02 F6 | 	mov	local12, local02
08038     15 27 02 F6 | 	mov	local01, local03
0803c     4A 00 00 FF 
08040     7C E4 05 F1 | 	add	objptr, ##38012
08044     F2 3A 02 FB | 	rdlong	local11, objptr
08048     1D 39 02 F6 | 	mov	local10, local11
0804c     01 38 66 F0 | 	shl	local10, #1
08050     1D 39 02 F1 | 	add	local10, local11
08054     02 38 66 F0 | 	shl	local10, #2
08058     03 00 00 FF 
0805c     00 E4 85 F1 | 	sub	objptr, ##1536
08060     F2 38 02 F1 | 	add	local10, objptr
08064     1C 37 62 FC | 	wrlong	local09, local10
08068     03 00 00 FF 
0806c     00 E4 05 F1 | 	add	objptr, ##1536
08070     F2 36 02 FB | 	rdlong	local09, objptr
08074     1B 3B 02 F6 | 	mov	local11, local09
08078     01 3A 66 F0 | 	shl	local11, #1
0807c     1B 3B 02 F1 | 	add	local11, local09
08080     02 3A 66 F0 | 	shl	local11, #2
08084     03 00 00 FF 
08088     00 E4 85 F1 | 	sub	objptr, ##1536
0808c     F2 3A 02 F1 | 	add	local11, objptr
08090     04 3A 06 F1 | 	add	local11, #4
08094     1D 3D 62 FC | 	wrlong	local12, local11
08098     03 00 00 FF 
0809c     00 E4 05 F1 | 	add	objptr, ##1536
080a0     F2 36 02 FB | 	rdlong	local09, objptr
080a4     1B 3D 02 F6 | 	mov	local12, local09
080a8     01 3C 66 F0 | 	shl	local12, #1
080ac     1B 3D 02 F1 | 	add	local12, local09
080b0     02 3C 66 F0 | 	shl	local12, #2
080b4     03 00 00 FF 
080b8     00 E4 85 F1 | 	sub	objptr, ##1536
080bc     F2 3C 02 F1 | 	add	local12, objptr
080c0     08 3C 06 F1 | 	add	local12, #8
080c4     1E 27 62 FC | 	wrlong	local01, local12
080c8     03 00 00 FF 
080cc     00 E4 05 F1 | 	add	objptr, ##1536
080d0     F2 36 02 FB | 	rdlong	local09, objptr
080d4     01 36 06 F1 | 	add	local09, #1
080d8     F2 36 62 FC | 	wrlong	local09, objptr
080dc     4A 00 00 FF 
080e0     7C E4 85 F1 | 	sub	objptr, ##38012
080e4                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
080e4                 | '   compiledline(lineptr)=t1:  lineptr+=1 
080e4                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
080e4     03 2C 0E F2 | 	cmp	local04, #3 wz
080e8     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
080ec     38 00 90 5D |  if_ne	jmp	#LR__0726
080f0     4A 00 00 FF 
080f4     7C E4 05 F1 | 	add	objptr, ##38012
080f8     F2 3C 02 FB | 	rdlong	local12, objptr
080fc     1E 27 02 F6 | 	mov	local01, local12
08100     01 26 66 F0 | 	shl	local01, #1
08104     1E 27 02 F1 | 	add	local01, local12
08108     02 26 66 F0 | 	shl	local01, #2
0810c     03 00 00 FF 
08110     00 E4 85 F1 | 	sub	objptr, ##1536
08114     F2 26 02 F1 | 	add	local01, objptr
08118     08 26 06 F1 | 	add	local01, #8
0811c     13 FD 6B FC | 	wrlong	#510, local01
08120     47 00 00 FF 
08124     7C E4 85 F1 | 	sub	objptr, ##36476
08128                 | LR__0726
08128                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08128     4A 00 00 FF 
0812c     7C E4 05 F1 | 	add	objptr, ##38012
08130     F2 38 02 FB | 	rdlong	local10, objptr
08134     4A 00 00 FF 
08138     7C E4 85 F1 | 	sub	objptr, ##38012
0813c     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
08140                 | LR__0727
08140     1C 3D 02 F6 | 	mov	local12, local10
08144     01 3C 66 F0 | 	shl	local12, #1
08148     1C 3D 02 F1 | 	add	local12, local10
0814c     02 3C 66 F0 | 	shl	local12, #2
08150     47 00 00 FF 
08154     7C E4 05 F1 | 	add	objptr, ##36476
08158     F2 3C 02 F1 | 	add	local12, objptr
0815c     08 3C 06 F1 | 	add	local12, #8
08160     1E 3D 02 FB | 	rdlong	local12, local12
08164     9B 3C 0E F2 | 	cmp	local12, #155 wz
08168     47 00 00 FF 
0816c     7C E4 85 F1 | 	sub	objptr, ##36476
08170     70 00 90 5D |  if_ne	jmp	#LR__0728
08174     1C 3D 02 F6 | 	mov	local12, local10
08178     01 3C 86 F1 | 	sub	local12, #1
0817c     1E 27 02 F6 | 	mov	local01, local12
08180     01 26 66 F0 | 	shl	local01, #1
08184     1E 27 02 F1 | 	add	local01, local12
08188     02 26 66 F0 | 	shl	local01, #2
0818c     47 00 00 FF 
08190     7C E4 05 F1 | 	add	objptr, ##36476
08194     F2 26 02 F1 | 	add	local01, objptr
08198     08 26 06 F1 | 	add	local01, #8
0819c     13 27 02 FB | 	rdlong	local01, local01
081a0     11 26 0E F2 | 	cmp	local01, #17 wz
081a4     47 00 00 FF 
081a8     7C E4 85 F1 | 	sub	objptr, ##36476
081ac     34 00 90 5D |  if_ne	jmp	#LR__0728
081b0     1C 3D 02 F6 | 	mov	local12, local10
081b4     01 3C 86 F1 | 	sub	local12, #1
081b8     1E 27 02 F6 | 	mov	local01, local12
081bc     01 26 66 F0 | 	shl	local01, #1
081c0     1E 27 02 F1 | 	add	local01, local12
081c4     02 26 66 F0 | 	shl	local01, #2
081c8     47 00 00 FF 
081cc     7C E4 05 F1 | 	add	objptr, ##36476
081d0     F2 26 02 F1 | 	add	local01, objptr
081d4     08 26 06 F1 | 	add	local01, #8
081d8     13 25 68 FC | 	wrlong	#18, local01
081dc     47 00 00 FF 
081e0     7C E4 85 F1 | 	sub	objptr, ##36476
081e4                 | LR__0728
081e4     01 38 86 F1 | 	sub	local10, #1
081e8     01 38 56 F2 | 	cmps	local10, #1 wc
081ec     50 FF 9F 3D |  if_ae	jmp	#LR__0727
081f0                 | LR__0729
081f0                 | LR__0730
081f0                 | ' return err
081f0     18 FB 01 F6 | 	mov	result1, local06
081f4     A7 F0 03 F6 | 	mov	ptra, fp
081f8     B2 00 A0 FD | 	call	#popregs_
081fc                 | _compile_immediate_assign_ret
081fc     2D 00 64 FD | 	ret
08200                 | 
08200                 | ' 
08200                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
08200                 | ' 
08200                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
08200                 | _compile
08200     03 4A 05 F6 | 	mov	COUNT_, #3
08204     A8 00 A0 FD | 	call	#pushregs_
08208     09 27 02 F6 | 	mov	local01, arg01
0820c     0B 29 02 F6 | 	mov	local02, arg03
08210     47 00 00 FF 
08214     7C E4 05 F1 | 	add	objptr, ##36476
08218     F2 26 62 FC | 	wrlong	local01, objptr
0821c     04 E4 05 F1 | 	add	objptr, #4
08220     F2 14 62 FC | 	wrlong	arg02, objptr
08224     47 00 00 FF 
08228     80 E4 85 F1 | 	sub	objptr, ##36480
0822c     14 13 02 F6 | 	mov	arg01, local02
08230     01 12 06 F1 | 	add	arg01, #1
08234     13 15 02 F6 | 	mov	arg02, local01
08238     84 F2 BF FD | 	call	#_compile_immediate
0823c     FD 2A 0A F6 | 	mov	local03, result1 wz
08240                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
08240                 | ' ucompiledline(0)=alinemajor
08240                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
08240                 | ' 
08240                 | ' ' cont: 
08240                 | ' ' 0 - this is the first part of the line that will continue
08240                 | ' ' 1 - this is the continuation of the line
08240                 | ' ' 2 - this is the last continued line
08240                 | ' ' 3 - this is the one and only part
08240                 | ' 
08240                 | ' err=compile_immediate(cont+1,alinemajor) 
08240                 | ' if err=0 andalso alinemajor>0 then
08240     74 00 90 5D |  if_ne	jmp	#LR__0745
08244     01 26 16 F2 | 	cmp	local01, #1 wc
08248     6C 00 90 CD |  if_b	jmp	#LR__0745
0824c                 | '   if cont=3 orelse cont=2 then 
0824c     03 28 0E F2 | 	cmp	local02, #3 wz
08250     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08254     60 00 90 5D |  if_ne	jmp	#LR__0744
08258                 | '     if alinemajor >lastline then 
08258     4A 00 00 FF 
0825c     8C E4 05 F1 | 	add	objptr, ##38028
08260     F2 14 02 FB | 	rdlong	arg02, objptr
08264     4A 00 00 FF 
08268     8C E4 85 F1 | 	sub	objptr, ##38028
0826c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08270     0C 00 90 ED |  if_be	jmp	#LR__0740
08274     13 13 02 F6 | 	mov	arg01, local01
08278     7C F1 BF FD | 	call	#_add_line_at_end
0827c     38 00 90 FD | 	jmp	#LR__0743
08280                 | LR__0740
08280     13 13 02 F6 | 	mov	arg01, local01
08284     40 EB BF FD | 	call	#_deleteline
08288                 | '       deleteline(alinemajor)  
08288                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08288     4A 00 00 FF 
0828c     8C E4 05 F1 | 	add	objptr, ##38028
08290     F2 14 02 FB | 	rdlong	arg02, objptr
08294     4A 00 00 FF 
08298     8C E4 85 F1 | 	sub	objptr, ##38028
0829c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
082a0     0C 00 90 ED |  if_be	jmp	#LR__0741
082a4     13 13 02 F6 | 	mov	arg01, local01
082a8     4C F1 BF FD | 	call	#_add_line_at_end
082ac     08 00 90 FD | 	jmp	#LR__0742
082b0                 | LR__0741
082b0     13 13 02 F6 | 	mov	arg01, local01
082b4     24 EF BF FD | 	call	#_insertline
082b8                 | LR__0742
082b8                 | LR__0743
082b8                 | LR__0744
082b8                 | LR__0745
082b8                 | ' return err
082b8     15 FB 01 F6 | 	mov	result1, local03
082bc     A7 F0 03 F6 | 	mov	ptra, fp
082c0     B2 00 A0 FD | 	call	#popregs_
082c4                 | _compile_ret
082c4     2D 00 64 FD | 	ret
082c8                 | 
082c8                 | ' 
082c8                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
082c8                 | ' 
082c8                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
082c8                 | _compile_assign
082c8     03 4A 05 F6 | 	mov	COUNT_, #3
082cc     A8 00 A0 FD | 	call	#pushregs_
082d0     09 27 02 F6 | 	mov	local01, arg01
082d4     0B 29 02 F6 | 	mov	local02, arg03
082d8     47 00 00 FF 
082dc     7C E4 05 F1 | 	add	objptr, ##36476
082e0     F2 26 62 FC | 	wrlong	local01, objptr
082e4     04 E4 05 F1 | 	add	objptr, #4
082e8     F2 14 62 FC | 	wrlong	arg02, objptr
082ec     47 00 00 FF 
082f0     80 E4 85 F1 | 	sub	objptr, ##36480
082f4     14 13 02 F6 | 	mov	arg01, local02
082f8     01 12 06 F1 | 	add	arg01, #1
082fc     54 FB BF FD | 	call	#_compile_immediate_assign
08300     FD 2A 02 F6 | 	mov	local03, result1
08304                 | ' 
08304                 | ' ucompiledline(0)=alinemajor
08304                 | ' ucompiledline(1)=alineminor
08304                 | ' 
08304                 | ' err=compile_immediate_assign(cont+1) 
08304                 | ' if alinemajor>0 then
08304     01 26 16 F2 | 	cmp	local01, #1 wc
08308     6C 00 90 CD |  if_b	jmp	#LR__0755
0830c                 | '   if cont=3 orelse cont=2 then 
0830c     03 28 0E F2 | 	cmp	local02, #3 wz
08310     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08314     60 00 90 5D |  if_ne	jmp	#LR__0754
08318                 | '     if alinemajor >lastline then 
08318     4A 00 00 FF 
0831c     8C E4 05 F1 | 	add	objptr, ##38028
08320     F2 14 02 FB | 	rdlong	arg02, objptr
08324     4A 00 00 FF 
08328     8C E4 85 F1 | 	sub	objptr, ##38028
0832c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08330     0C 00 90 ED |  if_be	jmp	#LR__0750
08334     13 13 02 F6 | 	mov	arg01, local01
08338     BC F0 BF FD | 	call	#_add_line_at_end
0833c     38 00 90 FD | 	jmp	#LR__0753
08340                 | LR__0750
08340     13 13 02 F6 | 	mov	arg01, local01
08344     80 EA BF FD | 	call	#_deleteline
08348                 | '       deleteline(alinemajor)  
08348                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
08348     4A 00 00 FF 
0834c     8C E4 05 F1 | 	add	objptr, ##38028
08350     F2 14 02 FB | 	rdlong	arg02, objptr
08354     4A 00 00 FF 
08358     8C E4 85 F1 | 	sub	objptr, ##38028
0835c     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08360     0C 00 90 ED |  if_be	jmp	#LR__0751
08364     13 13 02 F6 | 	mov	arg01, local01
08368     8C F0 BF FD | 	call	#_add_line_at_end
0836c     08 00 90 FD | 	jmp	#LR__0752
08370                 | LR__0751
08370     13 13 02 F6 | 	mov	arg01, local01
08374     64 EE BF FD | 	call	#_insertline
08378                 | LR__0752
08378                 | LR__0753
08378                 | LR__0754
08378                 | LR__0755
08378                 | ' return err
08378     15 FB 01 F6 | 	mov	result1, local03
0837c     A7 F0 03 F6 | 	mov	ptra, fp
08380     B2 00 A0 FD | 	call	#popregs_
08384                 | _compile_assign_ret
08384     2D 00 64 FD | 	ret
08388                 | 
08388                 | ' 
08388                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08388                 | ' 
08388                 | ' function compile_fun_2p() as ulong
08388                 | _compile_fun_2p
08388     01 4A 05 F6 | 	mov	COUNT_, #1
0838c     A8 00 A0 FD | 	call	#pushregs_
08390     30 37 B0 FD | 	call	#_expr
08394     FD 26 02 F6 | 	mov	local01, result1
08398                 | ' err=expr() : if err>0 then return err
08398     01 26 16 F2 | 	cmp	local01, #1 wc
0839c     13 FB 01 36 |  if_ae	mov	result1, local01
083a0     60 00 90 3D |  if_ae	jmp	#LR__0760
083a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
083a4     37 00 00 FF 
083a8     44 E4 05 F1 | 	add	objptr, ##28228
083ac     F2 26 02 FB | 	rdlong	local01, objptr
083b0     03 26 66 F0 | 	shl	local01, #3
083b4     02 00 00 FF 
083b8     38 E4 85 F1 | 	sub	objptr, ##1080
083bc     F2 26 02 F1 | 	add	local01, objptr
083c0     04 26 06 F1 | 	add	local01, #4
083c4     13 27 02 FB | 	rdlong	local01, local01
083c8     11 26 0E F2 | 	cmp	local01, #17 wz
083cc     35 00 00 FF 
083d0     0C E4 85 F1 | 	sub	objptr, ##27148
083d4     15 FA 05 56 |  if_ne	mov	result1, #21
083d8     28 00 90 5D |  if_ne	jmp	#LR__0760
083dc     37 00 00 FF 
083e0     44 E4 05 F1 | 	add	objptr, ##28228
083e4     F2 26 02 FB | 	rdlong	local01, objptr
083e8     01 26 06 F1 | 	add	local01, #1
083ec     F2 26 62 FC | 	wrlong	local01, objptr
083f0     37 00 00 FF 
083f4     44 E4 85 F1 | 	sub	objptr, ##28228
083f8     C8 36 B0 FD | 	call	#_expr
083fc                 | ' err=expr() : if err>0 then return err
083fc     01 FA 15 F2 | 	cmp	result1, #1 wc
08400                 | ' return 0
08400     00 FA 05 C6 |  if_b	mov	result1, #0
08404                 | LR__0760
08404     A7 F0 03 F6 | 	mov	ptra, fp
08408     B2 00 A0 FD | 	call	#popregs_
0840c                 | _compile_fun_2p_ret
0840c     2D 00 64 FD | 	ret
08410                 | 
08410                 | ' 
08410                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08410                 | ' 
08410                 | ' function compile_fun_3p() as ulong
08410                 | _compile_fun_3p
08410     01 4A 05 F6 | 	mov	COUNT_, #1
08414     A8 00 A0 FD | 	call	#pushregs_
08418     A8 36 B0 FD | 	call	#_expr
0841c     FD 26 02 F6 | 	mov	local01, result1
08420                 | ' err=expr() : if err>0 then return err
08420     01 26 16 F2 | 	cmp	local01, #1 wc
08424     13 FB 01 36 |  if_ae	mov	result1, local01
08428     C8 00 90 3D |  if_ae	jmp	#LR__0770
0842c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0842c     37 00 00 FF 
08430     44 E4 05 F1 | 	add	objptr, ##28228
08434     F2 26 02 FB | 	rdlong	local01, objptr
08438     03 26 66 F0 | 	shl	local01, #3
0843c     02 00 00 FF 
08440     38 E4 85 F1 | 	sub	objptr, ##1080
08444     F2 26 02 F1 | 	add	local01, objptr
08448     04 26 06 F1 | 	add	local01, #4
0844c     13 27 02 FB | 	rdlong	local01, local01
08450     11 26 0E F2 | 	cmp	local01, #17 wz
08454     35 00 00 FF 
08458     0C E4 85 F1 | 	sub	objptr, ##27148
0845c     15 FA 05 56 |  if_ne	mov	result1, #21
08460     90 00 90 5D |  if_ne	jmp	#LR__0770
08464     37 00 00 FF 
08468     44 E4 05 F1 | 	add	objptr, ##28228
0846c     F2 26 02 FB | 	rdlong	local01, objptr
08470     01 26 06 F1 | 	add	local01, #1
08474     F2 26 62 FC | 	wrlong	local01, objptr
08478     37 00 00 FF 
0847c     44 E4 85 F1 | 	sub	objptr, ##28228
08480     40 36 B0 FD | 	call	#_expr
08484     FD 26 02 F6 | 	mov	local01, result1
08488                 | ' err=expr() : if err>0 then return err
08488     01 26 16 F2 | 	cmp	local01, #1 wc
0848c     13 FB 01 36 |  if_ae	mov	result1, local01
08490     60 00 90 3D |  if_ae	jmp	#LR__0770
08494                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08494     37 00 00 FF 
08498     44 E4 05 F1 | 	add	objptr, ##28228
0849c     F2 26 02 FB | 	rdlong	local01, objptr
084a0     03 26 66 F0 | 	shl	local01, #3
084a4     02 00 00 FF 
084a8     38 E4 85 F1 | 	sub	objptr, ##1080
084ac     F2 26 02 F1 | 	add	local01, objptr
084b0     04 26 06 F1 | 	add	local01, #4
084b4     13 27 02 FB | 	rdlong	local01, local01
084b8     11 26 0E F2 | 	cmp	local01, #17 wz
084bc     35 00 00 FF 
084c0     0C E4 85 F1 | 	sub	objptr, ##27148
084c4     15 FA 05 56 |  if_ne	mov	result1, #21
084c8     28 00 90 5D |  if_ne	jmp	#LR__0770
084cc     37 00 00 FF 
084d0     44 E4 05 F1 | 	add	objptr, ##28228
084d4     F2 26 02 FB | 	rdlong	local01, objptr
084d8     01 26 06 F1 | 	add	local01, #1
084dc     F2 26 62 FC | 	wrlong	local01, objptr
084e0     37 00 00 FF 
084e4     44 E4 85 F1 | 	sub	objptr, ##28228
084e8     D8 35 B0 FD | 	call	#_expr
084ec                 | ' err=expr() : if err>0 then return err
084ec     01 FA 15 F2 | 	cmp	result1, #1 wc
084f0                 | ' return 0
084f0     00 FA 05 C6 |  if_b	mov	result1, #0
084f4                 | LR__0770
084f4     A7 F0 03 F6 | 	mov	ptra, fp
084f8     B2 00 A0 FD | 	call	#popregs_
084fc                 | _compile_fun_3p_ret
084fc     2D 00 64 FD | 	ret
08500                 | 
08500                 | ' 
08500                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08500                 | ' 
08500                 | ' function compile_fun_4p() as ulong
08500                 | _compile_fun_4p
08500     01 4A 05 F6 | 	mov	COUNT_, #1
08504     A8 00 A0 FD | 	call	#pushregs_
08508     B8 35 B0 FD | 	call	#_expr
0850c     FD 26 02 F6 | 	mov	local01, result1
08510                 | ' err=expr() : if err>0 then return err
08510     01 26 16 F2 | 	cmp	local01, #1 wc
08514     13 FB 01 36 |  if_ae	mov	result1, local01
08518     30 01 90 3D |  if_ae	jmp	#LR__0780
0851c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
0851c     37 00 00 FF 
08520     44 E4 05 F1 | 	add	objptr, ##28228
08524     F2 26 02 FB | 	rdlong	local01, objptr
08528     03 26 66 F0 | 	shl	local01, #3
0852c     02 00 00 FF 
08530     38 E4 85 F1 | 	sub	objptr, ##1080
08534     F2 26 02 F1 | 	add	local01, objptr
08538     04 26 06 F1 | 	add	local01, #4
0853c     13 27 02 FB | 	rdlong	local01, local01
08540     11 26 0E F2 | 	cmp	local01, #17 wz
08544     35 00 00 FF 
08548     0C E4 85 F1 | 	sub	objptr, ##27148
0854c     15 FA 05 56 |  if_ne	mov	result1, #21
08550     F8 00 90 5D |  if_ne	jmp	#LR__0780
08554     37 00 00 FF 
08558     44 E4 05 F1 | 	add	objptr, ##28228
0855c     F2 26 02 FB | 	rdlong	local01, objptr
08560     01 26 06 F1 | 	add	local01, #1
08564     F2 26 62 FC | 	wrlong	local01, objptr
08568     37 00 00 FF 
0856c     44 E4 85 F1 | 	sub	objptr, ##28228
08570     50 35 B0 FD | 	call	#_expr
08574     FD 26 02 F6 | 	mov	local01, result1
08578                 | ' err=expr() : if err>0 then return err
08578     01 26 16 F2 | 	cmp	local01, #1 wc
0857c     13 FB 01 36 |  if_ae	mov	result1, local01
08580     C8 00 90 3D |  if_ae	jmp	#LR__0780
08584                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08584     37 00 00 FF 
08588     44 E4 05 F1 | 	add	objptr, ##28228
0858c     F2 26 02 FB | 	rdlong	local01, objptr
08590     03 26 66 F0 | 	shl	local01, #3
08594     02 00 00 FF 
08598     38 E4 85 F1 | 	sub	objptr, ##1080
0859c     F2 26 02 F1 | 	add	local01, objptr
085a0     04 26 06 F1 | 	add	local01, #4
085a4     13 27 02 FB | 	rdlong	local01, local01
085a8     11 26 0E F2 | 	cmp	local01, #17 wz
085ac     35 00 00 FF 
085b0     0C E4 85 F1 | 	sub	objptr, ##27148
085b4     15 FA 05 56 |  if_ne	mov	result1, #21
085b8     90 00 90 5D |  if_ne	jmp	#LR__0780
085bc     37 00 00 FF 
085c0     44 E4 05 F1 | 	add	objptr, ##28228
085c4     F2 26 02 FB | 	rdlong	local01, objptr
085c8     01 26 06 F1 | 	add	local01, #1
085cc     F2 26 62 FC | 	wrlong	local01, objptr
085d0     37 00 00 FF 
085d4     44 E4 85 F1 | 	sub	objptr, ##28228
085d8     E8 34 B0 FD | 	call	#_expr
085dc     FD 26 02 F6 | 	mov	local01, result1
085e0                 | ' err=expr() : if err>0 then return err
085e0     01 26 16 F2 | 	cmp	local01, #1 wc
085e4     13 FB 01 36 |  if_ae	mov	result1, local01
085e8     60 00 90 3D |  if_ae	jmp	#LR__0780
085ec                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
085ec     37 00 00 FF 
085f0     44 E4 05 F1 | 	add	objptr, ##28228
085f4     F2 26 02 FB | 	rdlong	local01, objptr
085f8     03 26 66 F0 | 	shl	local01, #3
085fc     02 00 00 FF 
08600     38 E4 85 F1 | 	sub	objptr, ##1080
08604     F2 26 02 F1 | 	add	local01, objptr
08608     04 26 06 F1 | 	add	local01, #4
0860c     13 27 02 FB | 	rdlong	local01, local01
08610     11 26 0E F2 | 	cmp	local01, #17 wz
08614     35 00 00 FF 
08618     0C E4 85 F1 | 	sub	objptr, ##27148
0861c     15 FA 05 56 |  if_ne	mov	result1, #21
08620     28 00 90 5D |  if_ne	jmp	#LR__0780
08624     37 00 00 FF 
08628     44 E4 05 F1 | 	add	objptr, ##28228
0862c     F2 26 02 FB | 	rdlong	local01, objptr
08630     01 26 06 F1 | 	add	local01, #1
08634     F2 26 62 FC | 	wrlong	local01, objptr
08638     37 00 00 FF 
0863c     44 E4 85 F1 | 	sub	objptr, ##28228
08640     80 34 B0 FD | 	call	#_expr
08644                 | ' err=expr() : if err>0 then return err
08644     01 FA 15 F2 | 	cmp	result1, #1 wc
08648                 | ' return 0
08648     00 FA 05 C6 |  if_b	mov	result1, #0
0864c                 | LR__0780
0864c     A7 F0 03 F6 | 	mov	ptra, fp
08650     B2 00 A0 FD | 	call	#popregs_
08654                 | _compile_fun_4p_ret
08654     2D 00 64 FD | 	ret
08658                 | 
08658                 | ' 
08658                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08658                 | ' 
08658                 | ' function compile_fun_varp() as ulong,ulong 
08658                 | _compile_fun_varp
08658     03 4A 05 F6 | 	mov	COUNT_, #3
0865c     A8 00 A0 FD | 	call	#pushregs_
08660     00 26 06 F6 | 	mov	local01, #0
08664                 | ' 
08664                 | ' i=0 : err=0
08664                 | ' if lparts(ct).token<>token_end then
08664     37 00 00 FF 
08668     44 E4 05 F1 | 	add	objptr, ##28228
0866c     F2 28 02 FB | 	rdlong	local02, objptr
08670     03 28 66 F0 | 	shl	local02, #3
08674     02 00 00 FF 
08678     38 E4 85 F1 | 	sub	objptr, ##1080
0867c     F2 28 02 F1 | 	add	local02, objptr
08680     04 28 06 F1 | 	add	local02, #4
08684     14 29 02 FB | 	rdlong	local02, local02
08688     FE 29 0E F2 | 	cmp	local02, #510 wz
0868c     35 00 00 FF 
08690     0C E4 85 F1 | 	sub	objptr, ##27148
08694     88 00 90 AD |  if_e	jmp	#LR__0791
08698                 | '   do
08698                 | LR__0790
08698     28 34 B0 FD | 	call	#_expr
0869c     01 26 06 F1 | 	add	local01, #1
086a0                 | '     expr()
086a0                 | '     i+=1
086a0                 | '     if lparts(ct).token=token_comma then ct+=1
086a0     37 00 00 FF 
086a4     44 E4 05 F1 | 	add	objptr, ##28228
086a8     F2 28 02 FB | 	rdlong	local02, objptr
086ac     03 28 66 F0 | 	shl	local02, #3
086b0     02 00 00 FF 
086b4     38 E4 85 F1 | 	sub	objptr, ##1080
086b8     F2 28 02 F1 | 	add	local02, objptr
086bc     04 28 06 F1 | 	add	local02, #4
086c0     14 29 02 FB | 	rdlong	local02, local02
086c4     11 28 0E F2 | 	cmp	local02, #17 wz
086c8     35 00 00 FF 
086cc     0C E4 85 F1 | 	sub	objptr, ##27148
086d0     37 00 00 AF 
086d4     44 E4 05 A1 |  if_e	add	objptr, ##28228
086d8     F2 2A 02 AB |  if_e	rdlong	local03, objptr
086dc     01 2A 06 A1 |  if_e	add	local03, #1
086e0     F2 2A 62 AC |  if_e	wrlong	local03, objptr
086e4     37 00 00 AF 
086e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
086ec                 | '     if lparts(ct).token=token_end then exit loop
086ec     37 00 00 FF 
086f0     44 E4 05 F1 | 	add	objptr, ##28228
086f4     F2 28 02 FB | 	rdlong	local02, objptr
086f8     03 28 66 F0 | 	shl	local02, #3
086fc     02 00 00 FF 
08700     38 E4 85 F1 | 	sub	objptr, ##1080
08704     F2 28 02 F1 | 	add	local02, objptr
08708     04 28 06 F1 | 	add	local02, #4
0870c     14 29 02 FB | 	rdlong	local02, local02
08710     FE 29 0E F2 | 	cmp	local02, #510 wz
08714     35 00 00 FF 
08718     0C E4 85 F1 | 	sub	objptr, ##27148
0871c     78 FF 9F 5D |  if_ne	jmp	#LR__0790
08720                 | LR__0791
08720                 | ' return i,err
08720     13 FB 01 F6 | 	mov	result1, local01
08724     00 FC 05 F6 | 	mov	result2, #0
08728     A7 F0 03 F6 | 	mov	ptra, fp
0872c     B2 00 A0 FD | 	call	#popregs_
08730                 | _compile_fun_varp_ret
08730     2D 00 64 FD | 	ret
08734                 | 
08734                 | ' 
08734                 | ' '----  Compile read. The same as compile_input() except printing a prompt
08734                 | ' 
08734                 | ' function compile_read() as ulong,ulong 
08734                 | _compile_read
08734     04 4A 05 F6 | 	mov	COUNT_, #4
08738     A8 00 A0 FD | 	call	#pushregs_
0873c     00 26 06 F6 | 	mov	local01, #0
08740                 | ' 
08740                 | ' i=0 : err=0
08740                 | ' if lparts(ct).token<>token_end then
08740     37 00 00 FF 
08744     44 E4 05 F1 | 	add	objptr, ##28228
08748     F2 28 02 FB | 	rdlong	local02, objptr
0874c     03 28 66 F0 | 	shl	local02, #3
08750     02 00 00 FF 
08754     38 E4 85 F1 | 	sub	objptr, ##1080
08758     F2 28 02 F1 | 	add	local02, objptr
0875c     04 28 06 F1 | 	add	local02, #4
08760     14 29 02 FB | 	rdlong	local02, local02
08764     FE 29 0E F2 | 	cmp	local02, #510 wz
08768     35 00 00 FF 
0876c     0C E4 85 F1 | 	sub	objptr, ##27148
08770     98 00 90 AD |  if_e	jmp	#LR__0801
08774                 | '   do
08774                 | LR__0800
08774     B8 2F B0 FD | 	call	#_getaddr
08778     FD 2A 02 F6 | 	mov	local03, result1
0877c     37 00 00 FF 
08780     44 E4 05 F1 | 	add	objptr, ##28228
08784     F2 28 02 FB | 	rdlong	local02, objptr
08788     01 28 06 F1 | 	add	local02, #1
0878c     F2 28 62 FC | 	wrlong	local02, objptr
08790     01 26 06 F1 | 	add	local01, #1
08794                 | '     err=getaddr() :ct+=1
08794                 | '     i+=1 
08794                 | '     if lparts(ct).token=token_comma then ct+=1 
08794     03 28 66 F0 | 	shl	local02, #3
08798     02 00 00 FF 
0879c     38 E4 85 F1 | 	sub	objptr, ##1080
087a0     F2 28 02 F1 | 	add	local02, objptr
087a4     04 28 06 F1 | 	add	local02, #4
087a8     14 29 02 FB | 	rdlong	local02, local02
087ac     11 28 0E F2 | 	cmp	local02, #17 wz
087b0     35 00 00 FF 
087b4     0C E4 85 F1 | 	sub	objptr, ##27148
087b8     37 00 00 AF 
087bc     44 E4 05 A1 |  if_e	add	objptr, ##28228
087c0     F2 2C 02 AB |  if_e	rdlong	local04, objptr
087c4     01 2C 06 A1 |  if_e	add	local04, #1
087c8     F2 2C 62 AC |  if_e	wrlong	local04, objptr
087cc     37 00 00 AF 
087d0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
087d4                 | '     if lparts(ct).token=token_end then exit loop
087d4     37 00 00 FF 
087d8     44 E4 05 F1 | 	add	objptr, ##28228
087dc     F2 28 02 FB | 	rdlong	local02, objptr
087e0     03 28 66 F0 | 	shl	local02, #3
087e4     02 00 00 FF 
087e8     38 E4 85 F1 | 	sub	objptr, ##1080
087ec     F2 28 02 F1 | 	add	local02, objptr
087f0     04 28 06 F1 | 	add	local02, #4
087f4     14 29 02 FB | 	rdlong	local02, local02
087f8     FE 29 0E F2 | 	cmp	local02, #510 wz
087fc     35 00 00 FF 
08800     0C E4 85 F1 | 	sub	objptr, ##27148
08804     08 00 90 AD |  if_e	jmp	#LR__0802
08808     68 FF 9F FD | 	jmp	#LR__0800
0880c                 | LR__0801
0880c     36 2A 06 F6 | 	mov	local03, #54
08810                 | LR__0802
08810                 | ' return i,err
08810     13 FB 01 F6 | 	mov	result1, local01
08814     15 FD 01 F6 | 	mov	result2, local03
08818     A7 F0 03 F6 | 	mov	ptra, fp
0881c     B2 00 A0 FD | 	call	#popregs_
08820                 | _compile_read_ret
08820     2D 00 64 FD | 	ret
08824                 | 
08824                 | ' 
08824                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08824                 | ' 
08824                 | ' function compile_input() as ulong,ulong 
08824                 | _compile_input
08824     0F 4A 05 F6 | 	mov	COUNT_, #15
08828     A8 00 A0 FD | 	call	#pushregs_
0882c                 | ' 
0882c                 | ' if lparts(ct).token=token_string then
0882c     37 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##28228
08834     F2 16 02 FB | 	rdlong	arg03, objptr
08838     03 16 66 F0 | 	shl	arg03, #3
0883c     02 00 00 FF 
08840     38 E4 85 F1 | 	sub	objptr, ##1080
08844     F2 16 02 F1 | 	add	arg03, objptr
08848     04 16 06 F1 | 	add	arg03, #4
0884c     0B FD 01 FB | 	rdlong	result2, arg03
08850     01 00 00 FF 
08854     03 FC 0D F2 | 	cmp	result2, ##515 wz
08858     35 00 00 FF 
0885c     0C E4 85 F1 | 	sub	objptr, ##27148
08860     38 06 90 5D |  if_ne	jmp	#LR__0817
08864     37 00 00 FF 
08868     44 E4 05 F1 | 	add	objptr, ##28228
0886c     F2 14 02 FB | 	rdlong	arg02, objptr
08870     03 14 66 F0 | 	shl	arg02, #3
08874     02 00 00 FF 
08878     38 E4 85 F1 | 	sub	objptr, ##1080
0887c     F2 14 02 F1 | 	add	arg02, objptr
08880     0A 13 02 FB | 	rdlong	arg01, arg02
08884     35 00 00 FF 
08888     0C E4 85 F1 | 	sub	objptr, ##27148
0888c     09 2D 02 F6 | 	mov	local04, arg01
08890     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08894                 | LR__0810
08894     16 FB C9 FA | 	rdbyte	result1, local04 wz
08898     01 2C 06 51 |  if_ne	add	local04, #1
0889c     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
088a0                 | LR__0811
088a0     09 2D 82 F1 | 	sub	local04, arg01
088a4     16 FB 01 F6 | 	mov	result1, local04
088a8     52 00 00 FF 
088ac     F0 E4 05 F1 | 	add	objptr, ##42224
088b0     F2 FA 61 FC | 	wrlong	result1, objptr
088b4     58 E4 85 F1 | 	sub	objptr, #88
088b8     F2 12 02 FB | 	rdlong	arg01, objptr
088bc     FD 12 82 F1 | 	sub	arg01, result1
088c0     04 12 86 F1 | 	sub	arg01, #4
088c4     03 12 26 F5 | 	andn	arg01, #3
088c8     F2 12 62 FC | 	wrlong	arg01, objptr
088cc     58 E4 05 F1 | 	add	objptr, #88
088d0     F2 14 02 FB | 	rdlong	arg02, objptr
088d4     52 00 00 FF 
088d8     F0 E4 85 F1 | 	sub	objptr, ##42224
088dc     10 9E B1 FD | 	call	#_pslpoke
088e0                 | '   pslpoke memtop,l
088e0                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
088e0     01 2E 06 F6 | 	mov	local05, #1
088e4     52 00 00 FF 
088e8     F0 E4 05 F1 | 	add	objptr, ##42224
088ec     F2 30 02 FB | 	rdlong	local06, objptr
088f0     52 00 00 FF 
088f4     F0 E4 85 F1 | 	sub	objptr, ##42224
088f8     01 30 06 F1 | 	add	local06, #1
088fc                 | LR__0812
088fc     18 2F 52 F2 | 	cmps	local05, local06 wc
08900     5C 00 90 3D |  if_ae	jmp	#LR__0813
08904     52 00 00 FF 
08908     98 E4 05 F1 | 	add	objptr, ##42136
0890c     F2 32 02 FB | 	rdlong	local07, objptr
08910     03 32 06 F1 | 	add	local07, #3
08914     17 33 02 F1 | 	add	local07, local05
08918     1B 00 00 FF 
0891c     54 E4 85 F1 | 	sub	objptr, ##13908
08920     F2 14 02 FB | 	rdlong	arg02, objptr
08924     03 14 66 F0 | 	shl	arg02, #3
08928     02 00 00 FF 
0892c     38 E4 85 F1 | 	sub	objptr, ##1080
08930     F2 14 02 F1 | 	add	arg02, objptr
08934     0A 13 02 FB | 	rdlong	arg01, arg02
08938     17 15 02 F6 | 	mov	arg02, local05
0893c     01 16 06 F6 | 	mov	arg03, #1
08940     35 00 00 FF 
08944     0C E4 85 F1 | 	sub	objptr, ##27148
08948     8C F7 B1 FD | 	call	#__system__Mid_S
0894c     FD 14 C2 FA | 	rdbyte	arg02, result1
08950     19 13 02 F6 | 	mov	arg01, local07
08954     28 9E B1 FD | 	call	#_pspoke
08958     01 2E 06 F1 | 	add	local05, #1
0895c     9C FF 9F FD | 	jmp	#LR__0812
08960                 | LR__0813
08960     52 00 00 FF 
08964     98 E4 05 F1 | 	add	objptr, ##42136
08968     F2 26 02 FB | 	rdlong	local01, objptr
0896c     2B 2A 06 F6 | 	mov	local03, #43
08970     13 35 02 F6 | 	mov	local08, local01
08974     14 33 02 F6 | 	mov	local07, local02
08978     15 37 02 F6 | 	mov	local09, local03
0897c     08 00 00 FF 
08980     1C E4 85 F1 | 	sub	objptr, ##4124
08984     F2 30 02 FB | 	rdlong	local06, objptr
08988     18 2F 02 F6 | 	mov	local05, local06
0898c     01 2E 66 F0 | 	shl	local05, #1
08990     18 2F 02 F1 | 	add	local05, local06
08994     02 2E 66 F0 | 	shl	local05, #2
08998     03 00 00 FF 
0899c     00 E4 85 F1 | 	sub	objptr, ##1536
089a0     F2 2E 02 F1 | 	add	local05, objptr
089a4     17 35 62 FC | 	wrlong	local08, local05
089a8     03 00 00 FF 
089ac     00 E4 05 F1 | 	add	objptr, ##1536
089b0     F2 34 02 FB | 	rdlong	local08, objptr
089b4     1A 31 02 F6 | 	mov	local06, local08
089b8     01 30 66 F0 | 	shl	local06, #1
089bc     1A 31 02 F1 | 	add	local06, local08
089c0     02 30 66 F0 | 	shl	local06, #2
089c4     03 00 00 FF 
089c8     00 E4 85 F1 | 	sub	objptr, ##1536
089cc     F2 30 02 F1 | 	add	local06, objptr
089d0     04 30 06 F1 | 	add	local06, #4
089d4     18 33 62 FC | 	wrlong	local07, local06
089d8     03 00 00 FF 
089dc     00 E4 05 F1 | 	add	objptr, ##1536
089e0     F2 34 02 FB | 	rdlong	local08, objptr
089e4     1A 33 02 F6 | 	mov	local07, local08
089e8     01 32 66 F0 | 	shl	local07, #1
089ec     1A 33 02 F1 | 	add	local07, local08
089f0     02 32 66 F0 | 	shl	local07, #2
089f4     03 00 00 FF 
089f8     00 E4 85 F1 | 	sub	objptr, ##1536
089fc     F2 32 02 F1 | 	add	local07, objptr
08a00     08 32 06 F1 | 	add	local07, #8
08a04     19 37 62 FC | 	wrlong	local09, local07
08a08     03 00 00 FF 
08a0c     00 E4 05 F1 | 	add	objptr, ##1536
08a10     F2 34 02 FB | 	rdlong	local08, objptr
08a14     01 34 06 F1 | 	add	local08, #1
08a18     F2 34 62 FC | 	wrlong	local08, objptr
08a1c     13 00 00 FF 
08a20     38 E4 85 F1 | 	sub	objptr, ##9784
08a24     F2 34 02 FB | 	rdlong	local08, objptr
08a28     01 34 06 F1 | 	add	local08, #1
08a2c     F2 34 62 FC | 	wrlong	local08, objptr
08a30                 | '   t1.result.uresult=memtop
08a30                 | '   t1.result_type=result_string2  
08a30                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08a30                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a30     03 34 66 F0 | 	shl	local08, #3
08a34     02 00 00 FF 
08a38     38 E4 85 F1 | 	sub	objptr, ##1080
08a3c     F2 34 02 F1 | 	add	local08, objptr
08a40     04 34 06 F1 | 	add	local08, #4
08a44     1A 35 02 FB | 	rdlong	local08, local08
08a48     11 34 0E F2 | 	cmp	local08, #17 wz
08a4c     35 00 00 FF 
08a50     0C E4 85 F1 | 	sub	objptr, ##27148
08a54     60 01 90 5D |  if_ne	jmp	#LR__0814
08a58     21 2A 06 F6 | 	mov	local03, #33
08a5c     13 35 02 F6 | 	mov	local08, local01
08a60     14 33 02 F6 | 	mov	local07, local02
08a64     15 39 02 F6 | 	mov	local10, local03
08a68     4A 00 00 FF 
08a6c     7C E4 05 F1 | 	add	objptr, ##38012
08a70     F2 3A 02 FB | 	rdlong	local11, objptr
08a74     1D 3D 02 F6 | 	mov	local12, local11
08a78     01 3C 66 F0 | 	shl	local12, #1
08a7c     1D 3D 02 F1 | 	add	local12, local11
08a80     02 3C 66 F0 | 	shl	local12, #2
08a84     03 00 00 FF 
08a88     00 E4 85 F1 | 	sub	objptr, ##1536
08a8c     F2 3C 02 F1 | 	add	local12, objptr
08a90     1E 35 62 FC | 	wrlong	local08, local12
08a94     03 00 00 FF 
08a98     00 E4 05 F1 | 	add	objptr, ##1536
08a9c     F2 3E 02 FB | 	rdlong	local13, objptr
08aa0     1F 35 02 F6 | 	mov	local08, local13
08aa4     01 34 66 F0 | 	shl	local08, #1
08aa8     1F 35 02 F1 | 	add	local08, local13
08aac     02 34 66 F0 | 	shl	local08, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 34 02 F1 | 	add	local08, objptr
08abc     04 34 06 F1 | 	add	local08, #4
08ac0     1A 33 62 FC | 	wrlong	local07, local08
08ac4     03 00 00 FF 
08ac8     00 E4 05 F1 | 	add	objptr, ##1536
08acc     F2 34 02 FB | 	rdlong	local08, objptr
08ad0     1A 41 02 F6 | 	mov	local14, local08
08ad4     01 40 66 F0 | 	shl	local14, #1
08ad8     1A 41 02 F1 | 	add	local14, local08
08adc     02 40 66 F0 | 	shl	local14, #2
08ae0     03 00 00 FF 
08ae4     00 E4 85 F1 | 	sub	objptr, ##1536
08ae8     F2 40 02 F1 | 	add	local14, objptr
08aec     08 40 06 F1 | 	add	local14, #8
08af0     20 39 62 FC | 	wrlong	local10, local14
08af4     03 00 00 FF 
08af8     00 E4 05 F1 | 	add	objptr, ##1536
08afc     F2 34 02 FB | 	rdlong	local08, objptr
08b00     01 34 06 F1 | 	add	local08, #1
08b04     F2 34 62 FC | 	wrlong	local08, objptr
08b08     44 2A 06 F6 | 	mov	local03, #68
08b0c     13 35 02 F6 | 	mov	local08, local01
08b10     14 33 02 F6 | 	mov	local07, local02
08b14     15 39 02 F6 | 	mov	local10, local03
08b18     F2 40 02 FB | 	rdlong	local14, objptr
08b1c     20 3F 02 F6 | 	mov	local13, local14
08b20     01 3E 66 F0 | 	shl	local13, #1
08b24     20 3F 02 F1 | 	add	local13, local14
08b28     02 3E 66 F0 | 	shl	local13, #2
08b2c     03 00 00 FF 
08b30     00 E4 85 F1 | 	sub	objptr, ##1536
08b34     F2 3E 02 F1 | 	add	local13, objptr
08b38     1F 35 62 FC | 	wrlong	local08, local13
08b3c     03 00 00 FF 
08b40     00 E4 05 F1 | 	add	objptr, ##1536
08b44     F2 40 02 FB | 	rdlong	local14, objptr
08b48     20 3F 02 F6 | 	mov	local13, local14
08b4c     01 3E 66 F0 | 	shl	local13, #1
08b50     20 3F 02 F1 | 	add	local13, local14
08b54     02 3E 66 F0 | 	shl	local13, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 3E 02 F1 | 	add	local13, objptr
08b64     04 3E 06 F1 | 	add	local13, #4
08b68     1F 33 62 FC | 	wrlong	local07, local13
08b6c     03 00 00 FF 
08b70     00 E4 05 F1 | 	add	objptr, ##1536
08b74     F2 3E 02 FB | 	rdlong	local13, objptr
08b78     1F 41 02 F6 | 	mov	local14, local13
08b7c     01 40 66 F0 | 	shl	local14, #1
08b80     1F 41 02 F1 | 	add	local14, local13
08b84     02 40 66 F0 | 	shl	local14, #2
08b88     03 00 00 FF 
08b8c     00 E4 85 F1 | 	sub	objptr, ##1536
08b90     F2 40 02 F1 | 	add	local14, objptr
08b94     08 40 06 F1 | 	add	local14, #8
08b98     20 39 62 FC | 	wrlong	local10, local14
08b9c     03 00 00 FF 
08ba0     00 E4 05 F1 | 	add	objptr, ##1536
08ba4     F2 34 02 FB | 	rdlong	local08, objptr
08ba8     01 34 06 F1 | 	add	local08, #1
08bac     F2 34 62 FC | 	wrlong	local08, objptr
08bb0     4A 00 00 FF 
08bb4     7C E4 85 F1 | 	sub	objptr, ##38012
08bb8                 | LR__0814
08bb8                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08bb8     37 00 00 FF 
08bbc     44 E4 05 F1 | 	add	objptr, ##28228
08bc0     F2 34 02 FB | 	rdlong	local08, objptr
08bc4     03 34 66 F0 | 	shl	local08, #3
08bc8     02 00 00 FF 
08bcc     38 E4 85 F1 | 	sub	objptr, ##1080
08bd0     F2 34 02 F1 | 	add	local08, objptr
08bd4     04 34 06 F1 | 	add	local08, #4
08bd8     1A 41 02 FB | 	rdlong	local14, local08
08bdc     12 40 0E F2 | 	cmp	local14, #18 wz
08be0     35 00 00 FF 
08be4     0C E4 85 F1 | 	sub	objptr, ##27148
08be8     60 01 90 5D |  if_ne	jmp	#LR__0815
08bec     22 2A 06 F6 | 	mov	local03, #34
08bf0     13 35 02 F6 | 	mov	local08, local01
08bf4     14 33 02 F6 | 	mov	local07, local02
08bf8     15 39 02 F6 | 	mov	local10, local03
08bfc     4A 00 00 FF 
08c00     7C E4 05 F1 | 	add	objptr, ##38012
08c04     F2 40 02 FB | 	rdlong	local14, objptr
08c08     20 3F 02 F6 | 	mov	local13, local14
08c0c     01 3E 66 F0 | 	shl	local13, #1
08c10     20 3F 02 F1 | 	add	local13, local14
08c14     02 3E 66 F0 | 	shl	local13, #2
08c18     03 00 00 FF 
08c1c     00 E4 85 F1 | 	sub	objptr, ##1536
08c20     F2 3E 02 F1 | 	add	local13, objptr
08c24     1F 35 62 FC | 	wrlong	local08, local13
08c28     03 00 00 FF 
08c2c     00 E4 05 F1 | 	add	objptr, ##1536
08c30     F2 40 02 FB | 	rdlong	local14, objptr
08c34     20 35 02 F6 | 	mov	local08, local14
08c38     01 34 66 F0 | 	shl	local08, #1
08c3c     20 35 02 F1 | 	add	local08, local14
08c40     02 34 66 F0 | 	shl	local08, #2
08c44     03 00 00 FF 
08c48     00 E4 85 F1 | 	sub	objptr, ##1536
08c4c     F2 34 02 F1 | 	add	local08, objptr
08c50     04 34 06 F1 | 	add	local08, #4
08c54     1A 33 62 FC | 	wrlong	local07, local08
08c58     03 00 00 FF 
08c5c     00 E4 05 F1 | 	add	objptr, ##1536
08c60     F2 34 02 FB | 	rdlong	local08, objptr
08c64     1A 41 02 F6 | 	mov	local14, local08
08c68     01 40 66 F0 | 	shl	local14, #1
08c6c     1A 41 02 F1 | 	add	local14, local08
08c70     02 40 66 F0 | 	shl	local14, #2
08c74     03 00 00 FF 
08c78     00 E4 85 F1 | 	sub	objptr, ##1536
08c7c     F2 40 02 F1 | 	add	local14, objptr
08c80     08 40 06 F1 | 	add	local14, #8
08c84     20 39 62 FC | 	wrlong	local10, local14
08c88     03 00 00 FF 
08c8c     00 E4 05 F1 | 	add	objptr, ##1536
08c90     F2 34 02 FB | 	rdlong	local08, objptr
08c94     01 34 06 F1 | 	add	local08, #1
08c98     F2 34 62 FC | 	wrlong	local08, objptr
08c9c     44 2A 06 F6 | 	mov	local03, #68
08ca0     13 35 02 F6 | 	mov	local08, local01
08ca4     14 33 02 F6 | 	mov	local07, local02
08ca8     15 39 02 F6 | 	mov	local10, local03
08cac     F2 40 02 FB | 	rdlong	local14, objptr
08cb0     20 3F 02 F6 | 	mov	local13, local14
08cb4     01 3E 66 F0 | 	shl	local13, #1
08cb8     20 3F 02 F1 | 	add	local13, local14
08cbc     02 3E 66 F0 | 	shl	local13, #2
08cc0     03 00 00 FF 
08cc4     00 E4 85 F1 | 	sub	objptr, ##1536
08cc8     F2 3E 02 F1 | 	add	local13, objptr
08ccc     1F 35 62 FC | 	wrlong	local08, local13
08cd0     03 00 00 FF 
08cd4     00 E4 05 F1 | 	add	objptr, ##1536
08cd8     F2 40 02 FB | 	rdlong	local14, objptr
08cdc     20 3F 02 F6 | 	mov	local13, local14
08ce0     01 3E 66 F0 | 	shl	local13, #1
08ce4     20 3F 02 F1 | 	add	local13, local14
08ce8     02 3E 66 F0 | 	shl	local13, #2
08cec     03 00 00 FF 
08cf0     00 E4 85 F1 | 	sub	objptr, ##1536
08cf4     F2 3E 02 F1 | 	add	local13, objptr
08cf8     04 3E 06 F1 | 	add	local13, #4
08cfc     1F 33 62 FC | 	wrlong	local07, local13
08d00     03 00 00 FF 
08d04     00 E4 05 F1 | 	add	objptr, ##1536
08d08     F2 3E 02 FB | 	rdlong	local13, objptr
08d0c     1F 41 02 F6 | 	mov	local14, local13
08d10     01 40 66 F0 | 	shl	local14, #1
08d14     1F 41 02 F1 | 	add	local14, local13
08d18     02 40 66 F0 | 	shl	local14, #2
08d1c     03 00 00 FF 
08d20     00 E4 85 F1 | 	sub	objptr, ##1536
08d24     F2 40 02 F1 | 	add	local14, objptr
08d28     08 40 06 F1 | 	add	local14, #8
08d2c     20 39 62 FC | 	wrlong	local10, local14
08d30     03 00 00 FF 
08d34     00 E4 05 F1 | 	add	objptr, ##1536
08d38     F2 34 02 FB | 	rdlong	local08, objptr
08d3c     01 34 06 F1 | 	add	local08, #1
08d40     F2 34 62 FC | 	wrlong	local08, objptr
08d44     4A 00 00 FF 
08d48     7C E4 85 F1 | 	sub	objptr, ##38012
08d4c                 | LR__0815
08d4c                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08d4c     37 00 00 FF 
08d50     44 E4 05 F1 | 	add	objptr, ##28228
08d54     F2 34 02 FB | 	rdlong	local08, objptr
08d58     03 34 66 F0 | 	shl	local08, #3
08d5c     02 00 00 FF 
08d60     38 E4 85 F1 | 	sub	objptr, ##1080
08d64     F2 34 02 F1 | 	add	local08, objptr
08d68     04 34 06 F1 | 	add	local08, #4
08d6c     1A 41 02 FB | 	rdlong	local14, local08
08d70     12 40 0E F2 | 	cmp	local14, #18 wz
08d74     35 00 00 FF 
08d78     0C E4 85 F1 | 	sub	objptr, ##27148
08d7c     00 01 90 AD |  if_e	jmp	#LR__0816
08d80     37 00 00 FF 
08d84     44 E4 05 F1 | 	add	objptr, ##28228
08d88     F2 34 02 FB | 	rdlong	local08, objptr
08d8c     03 34 66 F0 | 	shl	local08, #3
08d90     02 00 00 FF 
08d94     38 E4 85 F1 | 	sub	objptr, ##1080
08d98     F2 34 02 F1 | 	add	local08, objptr
08d9c     04 34 06 F1 | 	add	local08, #4
08da0     1A 41 02 FB | 	rdlong	local14, local08
08da4     11 40 0E F2 | 	cmp	local14, #17 wz
08da8     35 00 00 FF 
08dac     0C E4 85 F1 | 	sub	objptr, ##27148
08db0     CC 00 90 AD |  if_e	jmp	#LR__0816
08db4     44 2A 06 F6 | 	mov	local03, #68
08db8     13 35 02 F6 | 	mov	local08, local01
08dbc     14 33 02 F6 | 	mov	local07, local02
08dc0     15 39 02 F6 | 	mov	local10, local03
08dc4     4A 00 00 FF 
08dc8     7C E4 05 F1 | 	add	objptr, ##38012
08dcc     F2 40 02 FB | 	rdlong	local14, objptr
08dd0     20 3F 02 F6 | 	mov	local13, local14
08dd4     01 3E 66 F0 | 	shl	local13, #1
08dd8     20 3F 02 F1 | 	add	local13, local14
08ddc     02 3E 66 F0 | 	shl	local13, #2
08de0     03 00 00 FF 
08de4     00 E4 85 F1 | 	sub	objptr, ##1536
08de8     F2 3E 02 F1 | 	add	local13, objptr
08dec     1F 35 62 FC | 	wrlong	local08, local13
08df0     03 00 00 FF 
08df4     00 E4 05 F1 | 	add	objptr, ##1536
08df8     F2 40 02 FB | 	rdlong	local14, objptr
08dfc     20 3F 02 F6 | 	mov	local13, local14
08e00     01 3E 66 F0 | 	shl	local13, #1
08e04     20 3F 02 F1 | 	add	local13, local14
08e08     02 3E 66 F0 | 	shl	local13, #2
08e0c     03 00 00 FF 
08e10     00 E4 85 F1 | 	sub	objptr, ##1536
08e14     F2 3E 02 F1 | 	add	local13, objptr
08e18     04 3E 06 F1 | 	add	local13, #4
08e1c     1F 33 62 FC | 	wrlong	local07, local13
08e20     03 00 00 FF 
08e24     00 E4 05 F1 | 	add	objptr, ##1536
08e28     F2 3E 02 FB | 	rdlong	local13, objptr
08e2c     1F 41 02 F6 | 	mov	local14, local13
08e30     01 40 66 F0 | 	shl	local14, #1
08e34     1F 41 02 F1 | 	add	local14, local13
08e38     02 40 66 F0 | 	shl	local14, #2
08e3c     03 00 00 FF 
08e40     00 E4 85 F1 | 	sub	objptr, ##1536
08e44     F2 40 02 F1 | 	add	local14, objptr
08e48     08 40 06 F1 | 	add	local14, #8
08e4c     20 39 62 FC | 	wrlong	local10, local14
08e50     03 00 00 FF 
08e54     00 E4 05 F1 | 	add	objptr, ##1536
08e58     F2 34 02 FB | 	rdlong	local08, objptr
08e5c     01 34 06 F1 | 	add	local08, #1
08e60     F2 34 62 FC | 	wrlong	local08, objptr
08e64     13 00 00 FF 
08e68     38 E4 85 F1 | 	sub	objptr, ##9784
08e6c     F2 34 02 FB | 	rdlong	local08, objptr
08e70     01 34 86 F1 | 	sub	local08, #1
08e74     F2 34 62 FC | 	wrlong	local08, objptr
08e78     37 00 00 FF 
08e7c     44 E4 85 F1 | 	sub	objptr, ##28228
08e80                 | LR__0816
08e80     37 00 00 FF 
08e84     44 E4 05 F1 | 	add	objptr, ##28228
08e88     F2 34 02 FB | 	rdlong	local08, objptr
08e8c     01 34 06 F1 | 	add	local08, #1
08e90     F2 34 62 FC | 	wrlong	local08, objptr
08e94     37 00 00 FF 
08e98     44 E4 85 F1 | 	sub	objptr, ##28228
08e9c                 | LR__0817
08e9c     00 2E 06 F6 | 	mov	local05, #0
08ea0                 | ' i=0 : err=0
08ea0                 | ' if lparts(ct).token<>token_end then
08ea0     37 00 00 FF 
08ea4     44 E4 05 F1 | 	add	objptr, ##28228
08ea8     F2 40 02 FB | 	rdlong	local14, objptr
08eac     03 40 66 F0 | 	shl	local14, #3
08eb0     02 00 00 FF 
08eb4     38 E4 85 F1 | 	sub	objptr, ##1080
08eb8     F2 40 02 F1 | 	add	local14, objptr
08ebc     04 40 06 F1 | 	add	local14, #4
08ec0     20 41 02 FB | 	rdlong	local14, local14
08ec4     FE 41 0E F2 | 	cmp	local14, #510 wz
08ec8     35 00 00 FF 
08ecc     0C E4 85 F1 | 	sub	objptr, ##27148
08ed0     98 00 90 AD |  if_e	jmp	#LR__0819
08ed4                 | '   do
08ed4                 | LR__0818
08ed4     58 28 B0 FD | 	call	#_getaddr
08ed8     FD 42 02 F6 | 	mov	local15, result1
08edc     37 00 00 FF 
08ee0     44 E4 05 F1 | 	add	objptr, ##28228
08ee4     F2 40 02 FB | 	rdlong	local14, objptr
08ee8     01 40 06 F1 | 	add	local14, #1
08eec     F2 40 62 FC | 	wrlong	local14, objptr
08ef0     01 2E 06 F1 | 	add	local05, #1
08ef4                 | '     err=getaddr() :ct+=1
08ef4                 | '     i+=1 
08ef4                 | '     if lparts(ct).token=token_comma then ct+=1 
08ef4     03 40 66 F0 | 	shl	local14, #3
08ef8     02 00 00 FF 
08efc     38 E4 85 F1 | 	sub	objptr, ##1080
08f00     F2 40 02 F1 | 	add	local14, objptr
08f04     04 40 06 F1 | 	add	local14, #4
08f08     20 41 02 FB | 	rdlong	local14, local14
08f0c     11 40 0E F2 | 	cmp	local14, #17 wz
08f10     35 00 00 FF 
08f14     0C E4 85 F1 | 	sub	objptr, ##27148
08f18     37 00 00 AF 
08f1c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08f20     F2 34 02 AB |  if_e	rdlong	local08, objptr
08f24     01 34 06 A1 |  if_e	add	local08, #1
08f28     F2 34 62 AC |  if_e	wrlong	local08, objptr
08f2c     37 00 00 AF 
08f30     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08f34                 | '     if lparts(ct).token=token_end then exit loop
08f34     37 00 00 FF 
08f38     44 E4 05 F1 | 	add	objptr, ##28228
08f3c     F2 40 02 FB | 	rdlong	local14, objptr
08f40     03 40 66 F0 | 	shl	local14, #3
08f44     02 00 00 FF 
08f48     38 E4 85 F1 | 	sub	objptr, ##1080
08f4c     F2 40 02 F1 | 	add	local14, objptr
08f50     04 40 06 F1 | 	add	local14, #4
08f54     20 41 02 FB | 	rdlong	local14, local14
08f58     FE 41 0E F2 | 	cmp	local14, #510 wz
08f5c     35 00 00 FF 
08f60     0C E4 85 F1 | 	sub	objptr, ##27148
08f64     08 00 90 AD |  if_e	jmp	#LR__0820
08f68     68 FF 9F FD | 	jmp	#LR__0818
08f6c                 | LR__0819
08f6c     36 42 06 F6 | 	mov	local15, #54
08f70                 | LR__0820
08f70                 | ' return i,err
08f70     17 FB 01 F6 | 	mov	result1, local05
08f74     21 FD 01 F6 | 	mov	result2, local15
08f78     A7 F0 03 F6 | 	mov	ptra, fp
08f7c     B2 00 A0 FD | 	call	#popregs_
08f80                 | _compile_input_ret
08f80     2D 00 64 FD | 	ret
08f84                 | 
08f84                 | ' 
08f84                 | ' '----- compile assign to an array element
08f84                 | ' 
08f84                 | ' function compile_array_assign() as ulong 
08f84                 | _compile_array_assign
08f84     0B 4A 05 F6 | 	mov	COUNT_, #11
08f88     A8 00 A0 FD | 	call	#pushregs_
08f8c     00 2C 06 F6 | 	mov	local04, #0
08f90     00 2E 06 F6 | 	mov	local05, #0
08f94     37 00 00 FF 
08f98     44 E4 05 F1 | 	add	objptr, ##28228
08f9c     F2 30 02 FB | 	rdlong	local06, objptr
08fa0     18 FB 01 F6 | 	mov	result1, local06
08fa4     01 FA 85 F1 | 	sub	result1, #1
08fa8     03 FA 65 F0 | 	shl	result1, #3
08fac     02 00 00 FF 
08fb0     38 E4 85 F1 | 	sub	objptr, ##1080
08fb4     F2 FA 01 F1 | 	add	result1, objptr
08fb8     FD 32 02 FB | 	rdlong	local07, result1
08fbc                 | ' numpar=0 : err=0
08fbc                 | ' varname$=lparts(ct-1).part$
08fbc                 | ' if lparts(ct).token=token_lpar then
08fbc     03 30 66 F0 | 	shl	local06, #3
08fc0     F2 30 02 F1 | 	add	local06, objptr
08fc4     04 30 06 F1 | 	add	local06, #4
08fc8     18 31 02 FB | 	rdlong	local06, local06
08fcc     15 30 0E F2 | 	cmp	local06, #21 wz
08fd0     35 00 00 FF 
08fd4     0C E4 85 F1 | 	sub	objptr, ##27148
08fd8     F4 01 90 5D |  if_ne	jmp	#LR__0834
08fdc     37 00 00 FF 
08fe0     44 E4 05 F1 | 	add	objptr, ##28228
08fe4     F2 34 02 FB | 	rdlong	local08, objptr
08fe8     01 34 06 F1 | 	add	local08, #1
08fec     F2 34 62 FC | 	wrlong	local08, objptr
08ff0     37 00 00 FF 
08ff4     44 E4 85 F1 | 	sub	objptr, ##28228
08ff8                 | '   ct+=1 											' omit this lpar, this is for expr list
08ff8                 | '   do
08ff8                 | LR__0830
08ff8     C8 2A B0 FD | 	call	#_expr
08ffc     37 00 00 FF 
09000     44 E4 05 F1 | 	add	objptr, ##28228
09004     F2 30 02 FB | 	rdlong	local06, objptr
09008     01 30 06 F1 | 	add	local06, #1
0900c     F2 30 62 FC | 	wrlong	local06, objptr
09010     01 2C 06 F1 | 	add	local04, #1
09014     01 30 86 F1 | 	sub	local06, #1
09018     03 30 66 F0 | 	shl	local06, #3
0901c     02 00 00 FF 
09020     38 E4 85 F1 | 	sub	objptr, ##1080
09024     F2 30 02 F1 | 	add	local06, objptr
09028     04 30 06 F1 | 	add	local06, #4
0902c     18 35 02 FB | 	rdlong	local08, local06
09030     14 34 0E F2 | 	cmp	local08, #20 wz
09034     35 00 00 FF 
09038     0C E4 85 F1 | 	sub	objptr, ##27148
0903c     34 00 90 AD |  if_e	jmp	#LR__0831
09040     37 00 00 FF 
09044     44 E4 05 F1 | 	add	objptr, ##28228
09048     F2 34 02 FB | 	rdlong	local08, objptr
0904c     03 34 66 F0 | 	shl	local08, #3
09050     02 00 00 FF 
09054     38 E4 85 F1 | 	sub	objptr, ##1080
09058     F2 34 02 F1 | 	add	local08, objptr
0905c     04 34 06 F1 | 	add	local08, #4
09060     1A 35 02 FB | 	rdlong	local08, local08
09064     FE 35 0E F2 | 	cmp	local08, #510 wz
09068     35 00 00 FF 
0906c     0C E4 85 F1 | 	sub	objptr, ##27148
09070     84 FF 9F 5D |  if_ne	jmp	#LR__0830
09074                 | LR__0831
09074     37 00 00 FF 
09078     44 E4 05 F1 | 	add	objptr, ##28228
0907c     F2 34 02 FB | 	rdlong	local08, objptr
09080     01 34 06 F1 | 	add	local08, #1
09084     F2 34 62 FC | 	wrlong	local08, objptr
09088     37 00 00 FF 
0908c     44 E4 85 F1 | 	sub	objptr, ##28228
09090     30 2A B0 FD | 	call	#_expr
09094     01 36 66 F6 | 	neg	local09, #1
09098     00 38 06 F6 | 	mov	local10, #0
0909c                 | '   ct+=1 : expr()
0909c                 | '   j=-1 : i=0 
0909c                 | '   do 
0909c                 | LR__0832
0909c                 | '     if variables(i).name=varname$ then j=i: exit loop
0909c     1C 31 02 F6 | 	mov	local06, local10
090a0     04 30 66 F0 | 	shl	local06, #4
090a4     14 00 00 FF 
090a8     F8 E5 05 F1 | 	add	objptr, ##10744
090ac     F2 30 02 F1 | 	add	local06, objptr
090b0     18 13 02 FB | 	rdlong	arg01, local06
090b4     19 15 02 F6 | 	mov	arg02, local07
090b8     14 00 00 FF 
090bc     F8 E5 85 F1 | 	sub	objptr, ##10744
090c0     A4 CE B1 FD | 	call	#__system___string_cmp
090c4     00 FA 0D F2 | 	cmp	result1, #0 wz
090c8     1C 37 02 A6 |  if_e	mov	local09, local10
090cc     20 00 90 AD |  if_e	jmp	#LR__0833
090d0     01 38 06 F1 | 	add	local10, #1
090d4     35 00 00 FF 
090d8     08 E4 05 F1 | 	add	objptr, ##27144
090dc     F2 34 02 FB | 	rdlong	local08, objptr
090e0     35 00 00 FF 
090e4     08 E4 85 F1 | 	sub	objptr, ##27144
090e8     1A 39 5A F2 | 	cmps	local10, local08 wcz
090ec     AC FF 9F ED |  if_be	jmp	#LR__0832
090f0                 | LR__0833
090f0     1B 27 02 F6 | 	mov	local01, local09
090f4     16 29 02 F6 | 	mov	local02, local04
090f8     17 2A 06 F6 | 	mov	local03, #23
090fc     13 35 02 F6 | 	mov	local08, local01
09100     14 3B 02 F6 | 	mov	local11, local02
09104     15 33 02 F6 | 	mov	local07, local03
09108     4A 00 00 FF 
0910c     7C E4 05 F1 | 	add	objptr, ##38012
09110     F2 26 02 FB | 	rdlong	local01, objptr
09114     13 37 02 F6 | 	mov	local09, local01
09118     01 36 66 F0 | 	shl	local09, #1
0911c     13 37 02 F1 | 	add	local09, local01
09120     02 36 66 F0 | 	shl	local09, #2
09124     03 00 00 FF 
09128     00 E4 85 F1 | 	sub	objptr, ##1536
0912c     F2 36 02 F1 | 	add	local09, objptr
09130     1B 35 62 FC | 	wrlong	local08, local09
09134     03 00 00 FF 
09138     00 E4 05 F1 | 	add	objptr, ##1536
0913c     F2 26 02 FB | 	rdlong	local01, objptr
09140     13 37 02 F6 | 	mov	local09, local01
09144     01 36 66 F0 | 	shl	local09, #1
09148     13 37 02 F1 | 	add	local09, local01
0914c     02 36 66 F0 | 	shl	local09, #2
09150     03 00 00 FF 
09154     00 E4 85 F1 | 	sub	objptr, ##1536
09158     F2 36 02 F1 | 	add	local09, objptr
0915c     04 36 06 F1 | 	add	local09, #4
09160     1B 3B 62 FC | 	wrlong	local11, local09
09164     03 00 00 FF 
09168     00 E4 05 F1 | 	add	objptr, ##1536
0916c     F2 3A 02 FB | 	rdlong	local11, objptr
09170     1D 27 02 F6 | 	mov	local01, local11
09174     01 26 66 F0 | 	shl	local01, #1
09178     1D 27 02 F1 | 	add	local01, local11
0917c     02 26 66 F0 | 	shl	local01, #2
09180     03 00 00 FF 
09184     00 E4 85 F1 | 	sub	objptr, ##1536
09188     F2 26 02 F1 | 	add	local01, objptr
0918c     08 26 06 F1 | 	add	local01, #8
09190     13 33 62 FC | 	wrlong	local07, local01
09194     03 00 00 FF 
09198     00 E4 05 F1 | 	add	objptr, ##1536
0919c     F2 34 02 FB | 	rdlong	local08, objptr
091a0     01 34 06 F1 | 	add	local08, #1
091a4     F2 34 62 FC | 	wrlong	local08, objptr
091a8                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
091a8                 | '   if numpar>3 then err=45
091a8     04 2C 16 F2 | 	cmp	local04, #4 wc
091ac     2D 2E 06 36 |  if_ae	mov	local05, #45
091b0                 | '   if i>varnum then err=20
091b0     15 00 00 FF 
091b4     74 E4 85 F1 | 	sub	objptr, ##10868
091b8     F2 34 02 FB | 	rdlong	local08, objptr
091bc     35 00 00 FF 
091c0     08 E4 85 F1 | 	sub	objptr, ##27144
091c4     1A 39 5A F2 | 	cmps	local10, local08 wcz
091c8     14 2E 06 16 |  if_a	mov	local05, #20
091cc     04 00 90 FD | 	jmp	#LR__0835
091d0                 | LR__0834
091d0     0E 2E 06 F6 | 	mov	local05, #14
091d4                 | LR__0835
091d4                 | ' return err
091d4     17 FB 01 F6 | 	mov	result1, local05
091d8     A7 F0 03 F6 | 	mov	ptra, fp
091dc     B2 00 A0 FD | 	call	#popregs_
091e0                 | _compile_array_assign_ret
091e0     2D 00 64 FD | 	ret
091e4                 | 
091e4                 | ' 
091e4                 | ' '----- compile print command with its ";" and "," modifiers
091e4                 | ' 
091e4                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
091e4                 | _compile_print
091e4     0B 4A 05 F6 | 	mov	COUNT_, #11
091e8     A8 00 A0 FD | 	call	#pushregs_
091ec     00 26 06 F6 | 	mov	local01, #0
091f0     1D 2A 06 F6 | 	mov	local03, #29
091f4                 | ' t1.result.uresult=0 : t1.result_type=result_uint
091f4                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
091f4     37 00 00 FF 
091f8     44 E4 05 F1 | 	add	objptr, ##28228
091fc     F2 2C 02 FB | 	rdlong	local04, objptr
09200     03 2C 66 F0 | 	shl	local04, #3
09204     02 00 00 FF 
09208     38 E4 85 F1 | 	sub	objptr, ##1080
0920c     F2 2C 02 F1 | 	add	local04, objptr
09210     04 2C 06 F1 | 	add	local04, #4
09214     16 2D 02 FB | 	rdlong	local04, local04
09218     FE 2D 0E F2 | 	cmp	local04, #510 wz
0921c     35 00 00 FF 
09220     0C E4 85 F1 | 	sub	objptr, ##27148
09224     68 01 90 5D |  if_ne	jmp	#LR__0840
09228     20 2A 06 F6 | 	mov	local03, #32
0922c     13 2F 02 F6 | 	mov	local05, local01
09230     14 31 02 F6 | 	mov	local06, local02
09234     15 33 02 F6 | 	mov	local07, local03
09238     4A 00 00 FF 
0923c     7C E4 05 F1 | 	add	objptr, ##38012
09240     F2 34 02 FB | 	rdlong	local08, objptr
09244     1A 37 02 F6 | 	mov	local09, local08
09248     01 36 66 F0 | 	shl	local09, #1
0924c     1A 37 02 F1 | 	add	local09, local08
09250     02 36 66 F0 | 	shl	local09, #2
09254     03 00 00 FF 
09258     00 E4 85 F1 | 	sub	objptr, ##1536
0925c     F2 36 02 F1 | 	add	local09, objptr
09260     1B 2F 62 FC | 	wrlong	local05, local09
09264     03 00 00 FF 
09268     00 E4 05 F1 | 	add	objptr, ##1536
0926c     F2 2E 02 FB | 	rdlong	local05, objptr
09270     17 39 02 F6 | 	mov	local10, local05
09274     01 38 66 F0 | 	shl	local10, #1
09278     17 39 02 F1 | 	add	local10, local05
0927c     02 38 66 F0 | 	shl	local10, #2
09280     03 00 00 FF 
09284     00 E4 85 F1 | 	sub	objptr, ##1536
09288     F2 38 02 F1 | 	add	local10, objptr
0928c     04 38 06 F1 | 	add	local10, #4
09290     1C 31 62 FC | 	wrlong	local06, local10
09294     03 00 00 FF 
09298     00 E4 05 F1 | 	add	objptr, ##1536
0929c     F2 2E 02 FB | 	rdlong	local05, objptr
092a0     17 3B 02 F6 | 	mov	local11, local05
092a4     01 3A 66 F0 | 	shl	local11, #1
092a8     17 3B 02 F1 | 	add	local11, local05
092ac     02 3A 66 F0 | 	shl	local11, #2
092b0     03 00 00 FF 
092b4     00 E4 85 F1 | 	sub	objptr, ##1536
092b8     F2 3A 02 F1 | 	add	local11, objptr
092bc     08 3A 06 F1 | 	add	local11, #8
092c0     1D 33 62 FC | 	wrlong	local07, local11
092c4     03 00 00 FF 
092c8     00 E4 05 F1 | 	add	objptr, ##1536
092cc     F2 2E 02 FB | 	rdlong	local05, objptr
092d0     01 2E 06 F1 | 	add	local05, #1
092d4     F2 2E 62 FC | 	wrlong	local05, objptr
092d8     44 2A 06 F6 | 	mov	local03, #68
092dc     13 2F 02 F6 | 	mov	local05, local01
092e0     14 31 02 F6 | 	mov	local06, local02
092e4     15 33 02 F6 | 	mov	local07, local03
092e8     F2 34 02 FB | 	rdlong	local08, objptr
092ec     1A 37 02 F6 | 	mov	local09, local08
092f0     01 36 66 F0 | 	shl	local09, #1
092f4     1A 37 02 F1 | 	add	local09, local08
092f8     02 36 66 F0 | 	shl	local09, #2
092fc     03 00 00 FF 
09300     00 E4 85 F1 | 	sub	objptr, ##1536
09304     F2 36 02 F1 | 	add	local09, objptr
09308     1B 2F 62 FC | 	wrlong	local05, local09
0930c     03 00 00 FF 
09310     00 E4 05 F1 | 	add	objptr, ##1536
09314     F2 3A 02 FB | 	rdlong	local11, objptr
09318     1D 39 02 F6 | 	mov	local10, local11
0931c     01 38 66 F0 | 	shl	local10, #1
09320     1D 39 02 F1 | 	add	local10, local11
09324     02 38 66 F0 | 	shl	local10, #2
09328     03 00 00 FF 
0932c     00 E4 85 F1 | 	sub	objptr, ##1536
09330     F2 38 02 F1 | 	add	local10, objptr
09334     04 38 06 F1 | 	add	local10, #4
09338     1C 31 62 FC | 	wrlong	local06, local10
0933c     03 00 00 FF 
09340     00 E4 05 F1 | 	add	objptr, ##1536
09344     F2 38 02 FB | 	rdlong	local10, objptr
09348     1C 3B 02 F6 | 	mov	local11, local10
0934c     01 3A 66 F0 | 	shl	local11, #1
09350     1C 3B 02 F1 | 	add	local11, local10
09354     02 3A 66 F0 | 	shl	local11, #2
09358     03 00 00 FF 
0935c     00 E4 85 F1 | 	sub	objptr, ##1536
09360     F2 3A 02 F1 | 	add	local11, objptr
09364     08 3A 06 F1 | 	add	local11, #8
09368     1D 33 62 FC | 	wrlong	local07, local11
0936c     03 00 00 FF 
09370     00 E4 05 F1 | 	add	objptr, ##1536
09374     F2 2E 02 FB | 	rdlong	local05, objptr
09378     01 2E 06 F1 | 	add	local05, #1
0937c     F2 2E 62 FC | 	wrlong	local05, objptr
09380     4A 00 00 FF 
09384     7C E4 85 F1 | 	sub	objptr, ##38012
09388     00 FA 05 F6 | 	mov	result1, #0
0938c     20 05 90 FD | 	jmp	#LR__0847
09390                 | LR__0840
09390                 | ' do
09390                 | LR__0841
09390     30 27 B0 FD | 	call	#_expr
09394                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
09394                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09394     37 00 00 FF 
09398     44 E4 05 F1 | 	add	objptr, ##28228
0939c     F2 2C 02 FB | 	rdlong	local04, objptr
093a0     03 2C 66 F0 | 	shl	local04, #3
093a4     02 00 00 FF 
093a8     38 E4 85 F1 | 	sub	objptr, ##1080
093ac     F2 2C 02 F1 | 	add	local04, objptr
093b0     04 2C 06 F1 | 	add	local04, #4
093b4     16 35 02 FB | 	rdlong	local08, local04
093b8     11 34 0E F2 | 	cmp	local08, #17 wz
093bc     35 00 00 FF 
093c0     0C E4 85 F1 | 	sub	objptr, ##27148
093c4     60 01 90 5D |  if_ne	jmp	#LR__0842
093c8     21 2A 06 F6 | 	mov	local03, #33
093cc     13 2F 02 F6 | 	mov	local05, local01
093d0     14 31 02 F6 | 	mov	local06, local02
093d4     15 33 02 F6 | 	mov	local07, local03
093d8     4A 00 00 FF 
093dc     7C E4 05 F1 | 	add	objptr, ##38012
093e0     F2 34 02 FB | 	rdlong	local08, objptr
093e4     1A 37 02 F6 | 	mov	local09, local08
093e8     01 36 66 F0 | 	shl	local09, #1
093ec     1A 37 02 F1 | 	add	local09, local08
093f0     02 36 66 F0 | 	shl	local09, #2
093f4     03 00 00 FF 
093f8     00 E4 85 F1 | 	sub	objptr, ##1536
093fc     F2 36 02 F1 | 	add	local09, objptr
09400     1B 2F 62 FC | 	wrlong	local05, local09
09404     03 00 00 FF 
09408     00 E4 05 F1 | 	add	objptr, ##1536
0940c     F2 3A 02 FB | 	rdlong	local11, objptr
09410     1D 39 02 F6 | 	mov	local10, local11
09414     01 38 66 F0 | 	shl	local10, #1
09418     1D 39 02 F1 | 	add	local10, local11
0941c     02 38 66 F0 | 	shl	local10, #2
09420     03 00 00 FF 
09424     00 E4 85 F1 | 	sub	objptr, ##1536
09428     F2 38 02 F1 | 	add	local10, objptr
0942c     04 38 06 F1 | 	add	local10, #4
09430     1C 31 62 FC | 	wrlong	local06, local10
09434     03 00 00 FF 
09438     00 E4 05 F1 | 	add	objptr, ##1536
0943c     F2 2E 02 FB | 	rdlong	local05, objptr
09440     17 3B 02 F6 | 	mov	local11, local05
09444     01 3A 66 F0 | 	shl	local11, #1
09448     17 3B 02 F1 | 	add	local11, local05
0944c     02 3A 66 F0 | 	shl	local11, #2
09450     03 00 00 FF 
09454     00 E4 85 F1 | 	sub	objptr, ##1536
09458     F2 3A 02 F1 | 	add	local11, objptr
0945c     08 3A 06 F1 | 	add	local11, #8
09460     1D 33 62 FC | 	wrlong	local07, local11
09464     03 00 00 FF 
09468     00 E4 05 F1 | 	add	objptr, ##1536
0946c     F2 2E 02 FB | 	rdlong	local05, objptr
09470     01 2E 06 F1 | 	add	local05, #1
09474     F2 2E 62 FC | 	wrlong	local05, objptr
09478     44 2A 06 F6 | 	mov	local03, #68
0947c     13 2F 02 F6 | 	mov	local05, local01
09480     14 31 02 F6 | 	mov	local06, local02
09484     15 33 02 F6 | 	mov	local07, local03
09488     F2 34 02 FB | 	rdlong	local08, objptr
0948c     1A 37 02 F6 | 	mov	local09, local08
09490     01 36 66 F0 | 	shl	local09, #1
09494     1A 37 02 F1 | 	add	local09, local08
09498     02 36 66 F0 | 	shl	local09, #2
0949c     03 00 00 FF 
094a0     00 E4 85 F1 | 	sub	objptr, ##1536
094a4     F2 36 02 F1 | 	add	local09, objptr
094a8     1B 2F 62 FC | 	wrlong	local05, local09
094ac     03 00 00 FF 
094b0     00 E4 05 F1 | 	add	objptr, ##1536
094b4     F2 3A 02 FB | 	rdlong	local11, objptr
094b8     1D 39 02 F6 | 	mov	local10, local11
094bc     01 38 66 F0 | 	shl	local10, #1
094c0     1D 39 02 F1 | 	add	local10, local11
094c4     02 38 66 F0 | 	shl	local10, #2
094c8     03 00 00 FF 
094cc     00 E4 85 F1 | 	sub	objptr, ##1536
094d0     F2 38 02 F1 | 	add	local10, objptr
094d4     04 38 06 F1 | 	add	local10, #4
094d8     1C 31 62 FC | 	wrlong	local06, local10
094dc     03 00 00 FF 
094e0     00 E4 05 F1 | 	add	objptr, ##1536
094e4     F2 38 02 FB | 	rdlong	local10, objptr
094e8     1C 3B 02 F6 | 	mov	local11, local10
094ec     01 3A 66 F0 | 	shl	local11, #1
094f0     1C 3B 02 F1 | 	add	local11, local10
094f4     02 3A 66 F0 | 	shl	local11, #2
094f8     03 00 00 FF 
094fc     00 E4 85 F1 | 	sub	objptr, ##1536
09500     F2 3A 02 F1 | 	add	local11, objptr
09504     08 3A 06 F1 | 	add	local11, #8
09508     1D 33 62 FC | 	wrlong	local07, local11
0950c     03 00 00 FF 
09510     00 E4 05 F1 | 	add	objptr, ##1536
09514     F2 2E 02 FB | 	rdlong	local05, objptr
09518     01 2E 06 F1 | 	add	local05, #1
0951c     F2 2E 62 FC | 	wrlong	local05, objptr
09520     4A 00 00 FF 
09524     7C E4 85 F1 | 	sub	objptr, ##38012
09528                 | LR__0842
09528                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09528     37 00 00 FF 
0952c     44 E4 05 F1 | 	add	objptr, ##28228
09530     F2 2C 02 FB | 	rdlong	local04, objptr
09534     03 2C 66 F0 | 	shl	local04, #3
09538     02 00 00 FF 
0953c     38 E4 85 F1 | 	sub	objptr, ##1080
09540     F2 2C 02 F1 | 	add	local04, objptr
09544     04 2C 06 F1 | 	add	local04, #4
09548     16 35 02 FB | 	rdlong	local08, local04
0954c     12 34 0E F2 | 	cmp	local08, #18 wz
09550     35 00 00 FF 
09554     0C E4 85 F1 | 	sub	objptr, ##27148
09558     60 01 90 5D |  if_ne	jmp	#LR__0843
0955c     22 2A 06 F6 | 	mov	local03, #34
09560     13 2F 02 F6 | 	mov	local05, local01
09564     14 31 02 F6 | 	mov	local06, local02
09568     15 33 02 F6 | 	mov	local07, local03
0956c     4A 00 00 FF 
09570     7C E4 05 F1 | 	add	objptr, ##38012
09574     F2 34 02 FB | 	rdlong	local08, objptr
09578     1A 37 02 F6 | 	mov	local09, local08
0957c     01 36 66 F0 | 	shl	local09, #1
09580     1A 37 02 F1 | 	add	local09, local08
09584     02 36 66 F0 | 	shl	local09, #2
09588     03 00 00 FF 
0958c     00 E4 85 F1 | 	sub	objptr, ##1536
09590     F2 36 02 F1 | 	add	local09, objptr
09594     1B 2F 62 FC | 	wrlong	local05, local09
09598     03 00 00 FF 
0959c     00 E4 05 F1 | 	add	objptr, ##1536
095a0     F2 3A 02 FB | 	rdlong	local11, objptr
095a4     1D 39 02 F6 | 	mov	local10, local11
095a8     01 38 66 F0 | 	shl	local10, #1
095ac     1D 39 02 F1 | 	add	local10, local11
095b0     02 38 66 F0 | 	shl	local10, #2
095b4     03 00 00 FF 
095b8     00 E4 85 F1 | 	sub	objptr, ##1536
095bc     F2 38 02 F1 | 	add	local10, objptr
095c0     04 38 06 F1 | 	add	local10, #4
095c4     1C 31 62 FC | 	wrlong	local06, local10
095c8     03 00 00 FF 
095cc     00 E4 05 F1 | 	add	objptr, ##1536
095d0     F2 2E 02 FB | 	rdlong	local05, objptr
095d4     17 3B 02 F6 | 	mov	local11, local05
095d8     01 3A 66 F0 | 	shl	local11, #1
095dc     17 3B 02 F1 | 	add	local11, local05
095e0     02 3A 66 F0 | 	shl	local11, #2
095e4     03 00 00 FF 
095e8     00 E4 85 F1 | 	sub	objptr, ##1536
095ec     F2 3A 02 F1 | 	add	local11, objptr
095f0     08 3A 06 F1 | 	add	local11, #8
095f4     1D 33 62 FC | 	wrlong	local07, local11
095f8     03 00 00 FF 
095fc     00 E4 05 F1 | 	add	objptr, ##1536
09600     F2 2E 02 FB | 	rdlong	local05, objptr
09604     01 2E 06 F1 | 	add	local05, #1
09608     F2 2E 62 FC | 	wrlong	local05, objptr
0960c     44 2A 06 F6 | 	mov	local03, #68
09610     13 2F 02 F6 | 	mov	local05, local01
09614     14 31 02 F6 | 	mov	local06, local02
09618     15 33 02 F6 | 	mov	local07, local03
0961c     F2 34 02 FB | 	rdlong	local08, objptr
09620     1A 37 02 F6 | 	mov	local09, local08
09624     01 36 66 F0 | 	shl	local09, #1
09628     1A 37 02 F1 | 	add	local09, local08
0962c     02 36 66 F0 | 	shl	local09, #2
09630     03 00 00 FF 
09634     00 E4 85 F1 | 	sub	objptr, ##1536
09638     F2 36 02 F1 | 	add	local09, objptr
0963c     1B 2F 62 FC | 	wrlong	local05, local09
09640     03 00 00 FF 
09644     00 E4 05 F1 | 	add	objptr, ##1536
09648     F2 3A 02 FB | 	rdlong	local11, objptr
0964c     1D 39 02 F6 | 	mov	local10, local11
09650     01 38 66 F0 | 	shl	local10, #1
09654     1D 39 02 F1 | 	add	local10, local11
09658     02 38 66 F0 | 	shl	local10, #2
0965c     03 00 00 FF 
09660     00 E4 85 F1 | 	sub	objptr, ##1536
09664     F2 38 02 F1 | 	add	local10, objptr
09668     04 38 06 F1 | 	add	local10, #4
0966c     1C 31 62 FC | 	wrlong	local06, local10
09670     03 00 00 FF 
09674     00 E4 05 F1 | 	add	objptr, ##1536
09678     F2 38 02 FB | 	rdlong	local10, objptr
0967c     1C 3B 02 F6 | 	mov	local11, local10
09680     01 3A 66 F0 | 	shl	local11, #1
09684     1C 3B 02 F1 | 	add	local11, local10
09688     02 3A 66 F0 | 	shl	local11, #2
0968c     03 00 00 FF 
09690     00 E4 85 F1 | 	sub	objptr, ##1536
09694     F2 3A 02 F1 | 	add	local11, objptr
09698     08 3A 06 F1 | 	add	local11, #8
0969c     1D 33 62 FC | 	wrlong	local07, local11
096a0     03 00 00 FF 
096a4     00 E4 05 F1 | 	add	objptr, ##1536
096a8     F2 2E 02 FB | 	rdlong	local05, objptr
096ac     01 2E 06 F1 | 	add	local05, #1
096b0     F2 2E 62 FC | 	wrlong	local05, objptr
096b4     4A 00 00 FF 
096b8     7C E4 85 F1 | 	sub	objptr, ##38012
096bc                 | LR__0843
096bc                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
096bc     37 00 00 FF 
096c0     44 E4 05 F1 | 	add	objptr, ##28228
096c4     F2 2C 02 FB | 	rdlong	local04, objptr
096c8     03 2C 66 F0 | 	shl	local04, #3
096cc     02 00 00 FF 
096d0     38 E4 85 F1 | 	sub	objptr, ##1080
096d4     F2 2C 02 F1 | 	add	local04, objptr
096d8     04 2C 06 F1 | 	add	local04, #4
096dc     16 35 02 FB | 	rdlong	local08, local04
096e0     FE 35 0E F2 | 	cmp	local08, #510 wz
096e4     35 00 00 FF 
096e8     0C E4 85 F1 | 	sub	objptr, ##27148
096ec     B8 00 90 5D |  if_ne	jmp	#LR__0844
096f0     44 2A 06 F6 | 	mov	local03, #68
096f4     13 2F 02 F6 | 	mov	local05, local01
096f8     14 31 02 F6 | 	mov	local06, local02
096fc     15 33 02 F6 | 	mov	local07, local03
09700     4A 00 00 FF 
09704     7C E4 05 F1 | 	add	objptr, ##38012
09708     F2 34 02 FB | 	rdlong	local08, objptr
0970c     1A 37 02 F6 | 	mov	local09, local08
09710     01 36 66 F0 | 	shl	local09, #1
09714     1A 37 02 F1 | 	add	local09, local08
09718     02 36 66 F0 | 	shl	local09, #2
0971c     03 00 00 FF 
09720     00 E4 85 F1 | 	sub	objptr, ##1536
09724     F2 36 02 F1 | 	add	local09, objptr
09728     1B 2F 62 FC | 	wrlong	local05, local09
0972c     03 00 00 FF 
09730     00 E4 05 F1 | 	add	objptr, ##1536
09734     F2 3A 02 FB | 	rdlong	local11, objptr
09738     1D 39 02 F6 | 	mov	local10, local11
0973c     01 38 66 F0 | 	shl	local10, #1
09740     1D 39 02 F1 | 	add	local10, local11
09744     02 38 66 F0 | 	shl	local10, #2
09748     03 00 00 FF 
0974c     00 E4 85 F1 | 	sub	objptr, ##1536
09750     F2 38 02 F1 | 	add	local10, objptr
09754     04 38 06 F1 | 	add	local10, #4
09758     1C 31 62 FC | 	wrlong	local06, local10
0975c     03 00 00 FF 
09760     00 E4 05 F1 | 	add	objptr, ##1536
09764     F2 38 02 FB | 	rdlong	local10, objptr
09768     1C 3B 02 F6 | 	mov	local11, local10
0976c     01 3A 66 F0 | 	shl	local11, #1
09770     1C 3B 02 F1 | 	add	local11, local10
09774     02 3A 66 F0 | 	shl	local11, #2
09778     03 00 00 FF 
0977c     00 E4 85 F1 | 	sub	objptr, ##1536
09780     F2 3A 02 F1 | 	add	local11, objptr
09784     08 3A 06 F1 | 	add	local11, #8
09788     1D 33 62 FC | 	wrlong	local07, local11
0978c     03 00 00 FF 
09790     00 E4 05 F1 | 	add	objptr, ##1536
09794     F2 2E 02 FB | 	rdlong	local05, objptr
09798     01 2E 06 F1 | 	add	local05, #1
0979c     F2 2E 62 FC | 	wrlong	local05, objptr
097a0     4A 00 00 FF 
097a4     7C E4 85 F1 | 	sub	objptr, ##38012
097a8                 | LR__0844
097a8                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
097a8     37 00 00 FF 
097ac     44 E4 05 F1 | 	add	objptr, ##28228
097b0     F2 2C 02 FB | 	rdlong	local04, objptr
097b4     03 2C 66 F0 | 	shl	local04, #3
097b8     02 00 00 FF 
097bc     38 E4 85 F1 | 	sub	objptr, ##1080
097c0     F2 2C 02 F1 | 	add	local04, objptr
097c4     04 2C 06 F1 | 	add	local04, #4
097c8     16 35 02 FB | 	rdlong	local08, local04
097cc     11 34 0E F2 | 	cmp	local08, #17 wz
097d0     35 00 00 FF 
097d4     0C E4 85 F1 | 	sub	objptr, ##27148
097d8     6C 00 90 AD |  if_e	jmp	#LR__0845
097dc     37 00 00 FF 
097e0     44 E4 05 F1 | 	add	objptr, ##28228
097e4     F2 34 02 FB | 	rdlong	local08, objptr
097e8     03 34 66 F0 | 	shl	local08, #3
097ec     02 00 00 FF 
097f0     38 E4 85 F1 | 	sub	objptr, ##1080
097f4     F2 34 02 F1 | 	add	local08, objptr
097f8     04 34 06 F1 | 	add	local08, #4
097fc     1A 35 02 FB | 	rdlong	local08, local08
09800     12 34 0E F2 | 	cmp	local08, #18 wz
09804     35 00 00 FF 
09808     0C E4 85 F1 | 	sub	objptr, ##27148
0980c     38 00 90 AD |  if_e	jmp	#LR__0845
09810     37 00 00 FF 
09814     44 E4 05 F1 | 	add	objptr, ##28228
09818     F2 3A 02 FB | 	rdlong	local11, objptr
0981c     03 3A 66 F0 | 	shl	local11, #3
09820     02 00 00 FF 
09824     38 E4 85 F1 | 	sub	objptr, ##1080
09828     F2 3A 02 F1 | 	add	local11, objptr
0982c     04 3A 06 F1 | 	add	local11, #4
09830     1D 3B 02 FB | 	rdlong	local11, local11
09834     FE 3B 0E F2 | 	cmp	local11, #510 wz
09838     35 00 00 FF 
0983c     0C E4 85 F1 | 	sub	objptr, ##27148
09840     16 FA 05 56 |  if_ne	mov	result1, #22
09844     68 00 90 5D |  if_ne	jmp	#LR__0847
09848                 | LR__0845
09848     37 00 00 FF 
0984c     44 E4 05 F1 | 	add	objptr, ##28228
09850     F2 2C 02 FB | 	rdlong	local04, objptr
09854     01 2C 06 F1 | 	add	local04, #1
09858     F2 2C 62 FC | 	wrlong	local04, objptr
0985c     03 2C 66 F0 | 	shl	local04, #3
09860     02 00 00 FF 
09864     38 E4 85 F1 | 	sub	objptr, ##1080
09868     F2 2C 02 F1 | 	add	local04, objptr
0986c     04 2C 06 F1 | 	add	local04, #4
09870     16 35 02 FB | 	rdlong	local08, local04
09874     FE 35 0E F2 | 	cmp	local08, #510 wz
09878     35 00 00 FF 
0987c     0C E4 85 F1 | 	sub	objptr, ##27148
09880     28 00 90 AD |  if_e	jmp	#LR__0846
09884     37 00 00 FF 
09888     44 E4 05 F1 | 	add	objptr, ##28228
0988c     F2 3A 02 FB | 	rdlong	local11, objptr
09890     0E 00 00 FF 
09894     1C E4 05 F1 | 	add	objptr, ##7196
09898     F2 38 02 FB | 	rdlong	local10, objptr
0989c     45 00 00 FF 
098a0     60 E4 85 F1 | 	sub	objptr, ##35424
098a4     1C 3B 52 F2 | 	cmps	local11, local10 wc
098a8     E4 FA 9F CD |  if_b	jmp	#LR__0841
098ac                 | LR__0846
098ac                 | ' return 0
098ac     00 FA 05 F6 | 	mov	result1, #0
098b0                 | LR__0847
098b0     A7 F0 03 F6 | 	mov	ptra, fp
098b4     B2 00 A0 FD | 	call	#popregs_
098b8                 | _compile_print_ret
098b8     2D 00 64 FD | 	ret
098bc                 | 
098bc                 | ' 
098bc                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
098bc                 | ' 
098bc                 | ' function compile_if(aline as ulong) as ulong  
098bc                 | _compile_if
098bc     09 4A 05 F6 | 	mov	COUNT_, #9
098c0     A8 00 A0 FD | 	call	#pushregs_
098c4                 | _compile_if_enter
098c4     09 2D 02 F6 | 	mov	local04, arg01
098c8                 | ' return expr()
098c8     F8 21 B0 FD | 	call	#_expr
098cc     37 00 00 FF 
098d0     44 E4 05 F1 | 	add	objptr, ##28228
098d4     F2 14 02 FB | 	rdlong	arg02, objptr
098d8     0A 2F 02 F6 | 	mov	local05, arg02
098dc     03 2E 66 F0 | 	shl	local05, #3
098e0     02 00 00 FF 
098e4     38 E4 85 F1 | 	sub	objptr, ##1080
098e8     F2 2E 02 F1 | 	add	local05, objptr
098ec     04 2E 06 F1 | 	add	local05, #4
098f0     17 2F 02 FB | 	rdlong	local05, local05
098f4     01 14 06 F1 | 	add	arg02, #1
098f8     02 00 00 FF 
098fc     38 E4 05 F1 | 	add	objptr, ##1080
09900     F2 14 62 FC | 	wrlong	arg02, objptr
09904     37 00 00 FF 
09908     44 E4 85 F1 | 	sub	objptr, ##28228
0990c                 | ' 
0990c                 | ' err=compile_fun_1p()
0990c                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
0990c     5B 2E 0E F2 | 	cmp	local05, #91 wz
09910     34 FA 05 56 |  if_ne	mov	result1, #52
09914     20 01 90 5D |  if_ne	jmp	#LR__0852
09918     58 2A 06 F6 | 	mov	local03, #88
0991c     13 31 02 F6 | 	mov	local06, local01
09920     14 33 02 F6 | 	mov	local07, local02
09924     15 15 02 F6 | 	mov	arg02, local03
09928     4A 00 00 FF 
0992c     7C E4 05 F1 | 	add	objptr, ##38012
09930     F2 12 02 FB | 	rdlong	arg01, objptr
09934     09 35 02 F6 | 	mov	local08, arg01
09938     01 34 66 F0 | 	shl	local08, #1
0993c     09 35 02 F1 | 	add	local08, arg01
09940     02 34 66 F0 | 	shl	local08, #2
09944     03 00 00 FF 
09948     00 E4 85 F1 | 	sub	objptr, ##1536
0994c     F2 34 02 F1 | 	add	local08, objptr
09950     1A 31 62 FC | 	wrlong	local06, local08
09954     03 00 00 FF 
09958     00 E4 05 F1 | 	add	objptr, ##1536
0995c     F2 30 02 FB | 	rdlong	local06, objptr
09960     18 13 02 F6 | 	mov	arg01, local06
09964     01 12 66 F0 | 	shl	arg01, #1
09968     18 13 02 F1 | 	add	arg01, local06
0996c     02 12 66 F0 | 	shl	arg01, #2
09970     03 00 00 FF 
09974     00 E4 85 F1 | 	sub	objptr, ##1536
09978     F2 12 02 F1 | 	add	arg01, objptr
0997c     04 12 06 F1 | 	add	arg01, #4
09980     09 33 62 FC | 	wrlong	local07, arg01
09984     03 00 00 FF 
09988     00 E4 05 F1 | 	add	objptr, ##1536
0998c     F2 30 02 FB | 	rdlong	local06, objptr
09990     18 13 02 F6 | 	mov	arg01, local06
09994     01 12 66 F0 | 	shl	arg01, #1
09998     18 13 02 F1 | 	add	arg01, local06
0999c     02 12 66 F0 | 	shl	arg01, #2
099a0     03 00 00 FF 
099a4     00 E4 85 F1 | 	sub	objptr, ##1536
099a8     F2 12 02 F1 | 	add	arg01, objptr
099ac     08 12 06 F1 | 	add	arg01, #8
099b0     09 15 62 FC | 	wrlong	arg02, arg01
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 30 02 FB | 	rdlong	local06, objptr
099c0     01 30 06 F1 | 	add	local06, #1
099c4     F2 30 62 FC | 	wrlong	local06, objptr
099c8                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
099c8                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
099c8     13 00 00 FF 
099cc     38 E4 85 F1 | 	sub	objptr, ##9784
099d0     F2 14 02 FB | 	rdlong	arg02, objptr
099d4     01 14 06 F1 | 	add	arg02, #1
099d8     03 14 66 F0 | 	shl	arg02, #3
099dc     02 00 00 FF 
099e0     38 E4 85 F1 | 	sub	objptr, ##1080
099e4     F2 14 02 F1 | 	add	arg02, objptr
099e8     0A 13 02 FB | 	rdlong	arg01, arg02
099ec     35 00 00 FF 
099f0     0C E4 85 F1 | 	sub	objptr, ##27148
099f4                 | ' 
099f4                 | ' select case s
099f4     AE 01 00 FF 
099f8     74 14 06 F6 | 	mov	arg02, ##@LR__5521
099fc     68 C5 B1 FD | 	call	#__system___string_cmp
09a00     00 FA 0D F2 | 	cmp	result1, #0 wz
09a04     1B FA 05 A6 |  if_e	mov	result1, #27
09a08     00 FA 05 56 |  if_ne	mov	result1, #0
09a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09a10     10 00 90 AD |  if_e	jmp	#LR__0850
09a14     05 12 06 F6 | 	mov	arg01, #5
09a18     38 E4 BF FD | 	call	#_compile_immediate_assign
09a1c     FD 36 02 F6 | 	mov	local09, result1
09a20     10 00 90 FD | 	jmp	#LR__0851
09a24                 | LR__0850
09a24     05 12 06 F6 | 	mov	arg01, #5
09a28     16 15 02 F6 | 	mov	arg02, local04
09a2c     90 DA BF FD | 	call	#_compile_immediate
09a30     FD 36 02 F6 | 	mov	local09, result1
09a34                 | LR__0851
09a34                 | ' return err
09a34     1B FB 01 F6 | 	mov	result1, local09
09a38                 | LR__0852
09a38     A7 F0 03 F6 | 	mov	ptra, fp
09a3c     B2 00 A0 FD | 	call	#popregs_
09a40                 | _compile_if_ret
09a40     2D 00 64 FD | 	ret
09a44                 | 
09a44                 | ' 
09a44                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09a44                 | ' 
09a44                 | ' function compile_else(aline as ulong) as ulong  
09a44                 | _compile_else
09a44     07 4A 05 F6 | 	mov	COUNT_, #7
09a48     A8 00 A0 FD | 	call	#pushregs_
09a4c                 | _compile_else_enter
09a4c     09 2D 02 F6 | 	mov	local04, arg01
09a50     5A 2A 06 F6 | 	mov	local03, #90
09a54     13 2F 02 F6 | 	mov	local05, local01
09a58     14 31 02 F6 | 	mov	local06, local02
09a5c     15 27 02 F6 | 	mov	local01, local03
09a60     4A 00 00 FF 
09a64     7C E4 05 F1 | 	add	objptr, ##38012
09a68     F2 14 02 FB | 	rdlong	arg02, objptr
09a6c     0A 13 02 F6 | 	mov	arg01, arg02
09a70     01 12 66 F0 | 	shl	arg01, #1
09a74     0A 13 02 F1 | 	add	arg01, arg02
09a78     02 12 66 F0 | 	shl	arg01, #2
09a7c     03 00 00 FF 
09a80     00 E4 85 F1 | 	sub	objptr, ##1536
09a84     F2 12 02 F1 | 	add	arg01, objptr
09a88     09 2F 62 FC | 	wrlong	local05, arg01
09a8c     03 00 00 FF 
09a90     00 E4 05 F1 | 	add	objptr, ##1536
09a94     F2 2E 02 FB | 	rdlong	local05, objptr
09a98     17 15 02 F6 | 	mov	arg02, local05
09a9c     01 14 66 F0 | 	shl	arg02, #1
09aa0     17 15 02 F1 | 	add	arg02, local05
09aa4     02 14 66 F0 | 	shl	arg02, #2
09aa8     03 00 00 FF 
09aac     00 E4 85 F1 | 	sub	objptr, ##1536
09ab0     F2 14 02 F1 | 	add	arg02, objptr
09ab4     04 14 06 F1 | 	add	arg02, #4
09ab8     0A 31 62 FC | 	wrlong	local06, arg02
09abc     03 00 00 FF 
09ac0     00 E4 05 F1 | 	add	objptr, ##1536
09ac4     F2 30 02 FB | 	rdlong	local06, objptr
09ac8     18 2F 02 F6 | 	mov	local05, local06
09acc     01 2E 66 F0 | 	shl	local05, #1
09ad0     18 2F 02 F1 | 	add	local05, local06
09ad4     02 2E 66 F0 | 	shl	local05, #2
09ad8     03 00 00 FF 
09adc     00 E4 85 F1 | 	sub	objptr, ##1536
09ae0     F2 2E 02 F1 | 	add	local05, objptr
09ae4     08 2E 06 F1 | 	add	local05, #8
09ae8     17 27 62 FC | 	wrlong	local01, local05
09aec     03 00 00 FF 
09af0     00 E4 05 F1 | 	add	objptr, ##1536
09af4     F2 2E 02 FB | 	rdlong	local05, objptr
09af8     01 2E 06 F1 | 	add	local05, #1
09afc     F2 2E 62 FC | 	wrlong	local05, objptr
09b00                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09b00                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09b00     13 00 00 FF 
09b04     38 E4 85 F1 | 	sub	objptr, ##9784
09b08     F2 30 02 FB | 	rdlong	local06, objptr
09b0c     01 30 06 F1 | 	add	local06, #1
09b10     03 30 66 F0 | 	shl	local06, #3
09b14     02 00 00 FF 
09b18     38 E4 85 F1 | 	sub	objptr, ##1080
09b1c     F2 30 02 F1 | 	add	local06, objptr
09b20     18 13 02 FB | 	rdlong	arg01, local06
09b24     35 00 00 FF 
09b28     0C E4 85 F1 | 	sub	objptr, ##27148
09b2c                 | ' 
09b2c                 | ' select case s
09b2c     AE 01 00 FF 
09b30     74 14 06 F6 | 	mov	arg02, ##@LR__5521
09b34     30 C4 B1 FD | 	call	#__system___string_cmp
09b38     00 FA 0D F2 | 	cmp	result1, #0 wz
09b3c     1B FA 05 A6 |  if_e	mov	result1, #27
09b40     00 FA 05 56 |  if_ne	mov	result1, #0
09b44     00 FA 0D F2 | 	cmp	result1, #0 wz
09b48     10 00 90 AD |  if_e	jmp	#LR__0860
09b4c     05 12 06 F6 | 	mov	arg01, #5
09b50     00 E3 BF FD | 	call	#_compile_immediate_assign
09b54     FD 32 02 F6 | 	mov	local07, result1
09b58     10 00 90 FD | 	jmp	#LR__0861
09b5c                 | LR__0860
09b5c     05 12 06 F6 | 	mov	arg01, #5
09b60     16 15 02 F6 | 	mov	arg02, local04
09b64     58 D9 BF FD | 	call	#_compile_immediate
09b68     FD 32 02 F6 | 	mov	local07, result1
09b6c                 | LR__0861
09b6c                 | ' return err
09b6c     19 FB 01 F6 | 	mov	result1, local07
09b70     A7 F0 03 F6 | 	mov	ptra, fp
09b74     B2 00 A0 FD | 	call	#popregs_
09b78                 | _compile_else_ret
09b78     2D 00 64 FD | 	ret
09b7c                 | 
09b7c                 | ' 
09b7c                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09b7c                 | ' 
09b7c                 | ' function compile_dim() as ulong  
09b7c                 | _compile_dim
09b7c     11 4A 05 F6 | 	mov	COUNT_, #17
09b80     A8 00 A0 FD | 	call	#pushregs_
09b84     01 26 06 F6 | 	mov	local01, #1
09b88     01 28 06 F6 | 	mov	local02, #1
09b8c     01 2A 06 F6 | 	mov	local03, #1
09b90                 | ' 
09b90                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09b90                 | ' if isname(lparts(ct).part$) then 
09b90     37 00 00 FF 
09b94     44 E4 05 F1 | 	add	objptr, ##28228
09b98     F2 18 02 FB | 	rdlong	arg04, objptr
09b9c     03 18 66 F0 | 	shl	arg04, #3
09ba0     02 00 00 FF 
09ba4     38 E4 85 F1 | 	sub	objptr, ##1080
09ba8     F2 18 02 F1 | 	add	arg04, objptr
09bac     0C 13 02 FB | 	rdlong	arg01, arg04
09bb0     35 00 00 FF 
09bb4     0C E4 85 F1 | 	sub	objptr, ##27148
09bb8     5C C7 BF FD | 	call	#_isname
09bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
09bc0     78 05 90 AD |  if_e	jmp	#LR__0893
09bc4     37 00 00 FF 
09bc8     44 E4 05 F1 | 	add	objptr, ##28228
09bcc     F2 2C 02 FB | 	rdlong	local04, objptr
09bd0     03 2C 66 F0 | 	shl	local04, #3
09bd4     02 00 00 FF 
09bd8     38 E4 85 F1 | 	sub	objptr, ##1080
09bdc     F2 2C 02 F1 | 	add	local04, objptr
09be0     16 2F 02 FB | 	rdlong	local05, local04
09be4     01 30 66 F6 | 	neg	local06, #1
09be8                 | '   varname2$=lparts(ct).part$ 
09be8                 | '   j=-1
09be8                 | '   if varnum>0 then
09be8     04 E4 85 F1 | 	sub	objptr, #4
09bec     F2 32 02 FB | 	rdlong	local07, objptr
09bf0     35 00 00 FF 
09bf4     08 E4 85 F1 | 	sub	objptr, ##27144
09bf8     01 32 56 F2 | 	cmps	local07, #1 wc
09bfc     58 00 90 CD |  if_b	jmp	#LR__0872
09c00                 | '     for i=0 to varnum-1
09c00     00 34 06 F6 | 	mov	local08, #0
09c04     35 00 00 FF 
09c08     08 E4 05 F1 | 	add	objptr, ##27144
09c0c     F2 36 02 FB | 	rdlong	local09, objptr
09c10     35 00 00 FF 
09c14     08 E4 85 F1 | 	sub	objptr, ##27144
09c18                 | LR__0870
09c18     1B 35 52 F2 | 	cmps	local08, local09 wc
09c1c     38 00 90 3D |  if_ae	jmp	#LR__0871
09c20                 | '       if variables(i).name=varname2$ then j=i : exit
09c20     1A 2D 02 F6 | 	mov	local04, local08
09c24     04 2C 66 F0 | 	shl	local04, #4
09c28     14 00 00 FF 
09c2c     F8 E5 05 F1 | 	add	objptr, ##10744
09c30     F2 2C 02 F1 | 	add	local04, objptr
09c34     16 13 02 FB | 	rdlong	arg01, local04
09c38     17 15 02 F6 | 	mov	arg02, local05
09c3c     14 00 00 FF 
09c40     F8 E5 85 F1 | 	sub	objptr, ##10744
09c44     20 C3 B1 FD | 	call	#__system___string_cmp
09c48     00 FA 0D F2 | 	cmp	result1, #0 wz
09c4c     1A 31 02 A6 |  if_e	mov	local06, local08
09c50     01 34 06 51 |  if_ne	add	local08, #1
09c54     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09c58                 | LR__0871
09c58                 | LR__0872
09c58                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09c58     FF FF 7F FF 
09c5c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09c60     35 00 00 AF 
09c64     08 E4 05 A1 |  if_e	add	objptr, ##27144
09c68     F2 30 02 AB |  if_e	rdlong	local06, objptr
09c6c     35 00 00 AF 
09c70     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09c74     78 00 90 AD |  if_e	jmp	#LR__0873
09c78     00 12 06 F6 | 	mov	arg01, #0
09c7c     64 1F B2 FD | 	call	#__system___getiolock_0600
09c80     FD 12 02 F6 | 	mov	arg01, result1
09c84     B8 C2 B1 FD | 	call	#__system___lockmem
09c88     B0 01 00 FF 
09c8c     05 15 06 F6 | 	mov	arg02, ##@LR__5775
09c90     00 12 06 F6 | 	mov	arg01, #0
09c94     00 16 06 F6 | 	mov	arg03, #0
09c98     9C CF B1 FD | 	call	#__system___basic_print_string
09c9c     52 00 00 FF 
09ca0     B0 E4 05 F1 | 	add	objptr, ##42160
09ca4     F2 14 02 FB | 	rdlong	arg02, objptr
09ca8     52 00 00 FF 
09cac     B0 E4 85 F1 | 	sub	objptr, ##42160
09cb0     00 12 06 F6 | 	mov	arg01, #0
09cb4     00 16 06 F6 | 	mov	arg03, #0
09cb8     0A 18 06 F6 | 	mov	arg04, #10
09cbc     FC CF B1 FD | 	call	#__system___basic_print_unsigned
09cc0     B0 01 00 FF 
09cc4     13 15 06 F6 | 	mov	arg02, ##@LR__5776
09cc8     00 12 06 F6 | 	mov	arg01, #0
09ccc     00 16 06 F6 | 	mov	arg03, #0
09cd0     64 CF B1 FD | 	call	#__system___basic_print_string
09cd4     00 12 06 F6 | 	mov	arg01, #0
09cd8     0A 14 06 F6 | 	mov	arg02, #10
09cdc     00 16 06 F6 | 	mov	arg03, #0
09ce0     FC CE B1 FD | 	call	#__system___basic_print_char
09ce4     00 12 06 F6 | 	mov	arg01, #0
09ce8     F8 1E B2 FD | 	call	#__system___getiolock_0600
09cec     FD 00 68 FC | 	wrlong	#0, result1
09cf0                 | LR__0873
09cf0                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09cf0     37 00 00 FF 
09cf4     44 E4 05 F1 | 	add	objptr, ##28228
09cf8     F2 14 02 FB | 	rdlong	arg02, objptr
09cfc     01 14 06 F1 | 	add	arg02, #1
09d00     03 14 66 F0 | 	shl	arg02, #3
09d04     02 00 00 FF 
09d08     38 E4 85 F1 | 	sub	objptr, ##1080
09d0c     F2 14 02 F1 | 	add	arg02, objptr
09d10     0A 13 02 FB | 	rdlong	arg01, arg02
09d14     B0 01 00 FF 
09d18     34 15 06 F6 | 	mov	arg02, ##@LR__5777
09d1c     35 00 00 FF 
09d20     0C E4 85 F1 | 	sub	objptr, ##27148
09d24     40 C2 B1 FD | 	call	#__system___string_cmp
09d28     00 FA 0D F2 | 	cmp	result1, #0 wz
09d2c     44 00 90 AD |  if_e	jmp	#LR__0874
09d30     37 00 00 FF 
09d34     44 E4 05 F1 | 	add	objptr, ##28228
09d38     F2 36 02 FB | 	rdlong	local09, objptr
09d3c     01 36 06 F1 | 	add	local09, #1
09d40     03 36 66 F0 | 	shl	local09, #3
09d44     02 00 00 FF 
09d48     38 E4 85 F1 | 	sub	objptr, ##1080
09d4c     F2 36 02 F1 | 	add	local09, objptr
09d50     1B 13 02 FB | 	rdlong	arg01, local09
09d54     B0 01 00 FF 
09d58     36 15 06 F6 | 	mov	arg02, ##@LR__5778
09d5c     35 00 00 FF 
09d60     0C E4 85 F1 | 	sub	objptr, ##27148
09d64     00 C2 B1 FD | 	call	#__system___string_cmp
09d68     00 FA 0D F2 | 	cmp	result1, #0 wz
09d6c     2B FA 05 56 |  if_ne	mov	result1, #43
09d70     D0 04 90 5D |  if_ne	jmp	#LR__0895
09d74                 | LR__0874
09d74                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09d74     37 00 00 FF 
09d78     44 E4 05 F1 | 	add	objptr, ##28228
09d7c     F2 14 02 FB | 	rdlong	arg02, objptr
09d80     01 14 06 F1 | 	add	arg02, #1
09d84     03 14 66 F0 | 	shl	arg02, #3
09d88     02 00 00 FF 
09d8c     38 E4 85 F1 | 	sub	objptr, ##1080
09d90     F2 14 02 F1 | 	add	arg02, objptr
09d94     0A 13 02 FB | 	rdlong	arg01, arg02
09d98     B0 01 00 FF 
09d9c     39 15 06 F6 | 	mov	arg02, ##@LR__5779
09da0     35 00 00 FF 
09da4     0C E4 85 F1 | 	sub	objptr, ##27148
09da8     BC C1 B1 FD | 	call	#__system___string_cmp
09dac     00 FA 0D F2 | 	cmp	result1, #0 wz
09db0     37 00 00 AF 
09db4     44 E4 05 A1 |  if_e	add	objptr, ##28228
09db8     F2 38 02 AB |  if_e	rdlong	local10, objptr
09dbc     37 00 00 AF 
09dc0     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09dc4     01 38 06 A1 |  if_e	add	local10, #1
09dc8     5C 01 90 AD |  if_e	jmp	#LR__0879
09dcc     37 00 00 FF 
09dd0     44 E4 05 F1 | 	add	objptr, ##28228
09dd4     F2 38 02 FB | 	rdlong	local10, objptr
09dd8     37 00 00 FF 
09ddc     44 E4 85 F1 | 	sub	objptr, ##28228
09de0     02 38 06 F1 | 	add	local10, #2
09de4     00 3A 06 F6 | 	mov	local11, #0
09de8                 | '   l=ct+2 : m=0 : do
09de8                 | LR__0875
09de8                 | '   if isdec(lparts(l).part$) then 
09de8     1C 2D 02 F6 | 	mov	local04, local10
09dec     03 2C 66 F0 | 	shl	local04, #3
09df0     35 00 00 FF 
09df4     0C E4 05 F1 | 	add	objptr, ##27148
09df8     F2 2C 02 F1 | 	add	local04, objptr
09dfc     16 13 02 FB | 	rdlong	arg01, local04
09e00     35 00 00 FF 
09e04     0C E4 85 F1 | 	sub	objptr, ##27148
09e08     10 CE BF FD | 	call	#_isdec
09e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
09e10     44 00 90 AD |  if_e	jmp	#LR__0876
09e14     1D 3D 02 F6 | 	mov	local12, local11
09e18     13 3D 06 F1 | 	add	local12, #local01
09e1c     1C 37 02 F6 | 	mov	local09, local10
09e20     03 36 66 F0 | 	shl	local09, #3
09e24     35 00 00 FF 
09e28     0C E4 05 F1 | 	add	objptr, ##27148
09e2c     F2 36 02 F1 | 	add	local09, objptr
09e30     1B 13 02 FB | 	rdlong	arg01, local09
09e34     00 14 06 F6 | 	mov	arg02, #0
09e38     35 00 00 FF 
09e3c     0C E4 85 F1 | 	sub	objptr, ##27148
09e40     F0 F5 B1 FD | 	call	#__system____builtin_atoi
09e44     FD 3E 02 F6 | 	mov	local13, result1
09e48                 | 	'.live	local13
09e48                 | 	'.live	local12
09e48     00 3C 8E F9 | 	altd	local12, #0
09e4c     1F 3D 02 F6 | 	mov	local12, local13
09e50     01 3A 06 F1 | 	add	local11, #1
09e54     08 00 90 FD | 	jmp	#LR__0877
09e58                 | LR__0876
09e58                 | '     return(17)
09e58     11 FA 05 F6 | 	mov	result1, #17
09e5c     E4 03 90 FD | 	jmp	#LR__0895
09e60                 | LR__0877
09e60                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09e60     1C 2D 02 F6 | 	mov	local04, local10
09e64     01 2C 06 F1 | 	add	local04, #1
09e68     03 2C 66 F0 | 	shl	local04, #3
09e6c     35 00 00 FF 
09e70     0C E4 05 F1 | 	add	objptr, ##27148
09e74     F2 2C 02 F1 | 	add	local04, objptr
09e78     16 13 02 FB | 	rdlong	arg01, local04
09e7c     B0 01 00 FF 
09e80     3C 15 06 F6 | 	mov	arg02, ##@LR__5780
09e84     35 00 00 FF 
09e88     0C E4 85 F1 | 	sub	objptr, ##27148
09e8c     D8 C0 B1 FD | 	call	#__system___string_cmp
09e90     00 FA 0D F2 | 	cmp	result1, #0 wz
09e94     3C 00 90 AD |  if_e	jmp	#LR__0878
09e98     1C 3F 02 F6 | 	mov	local13, local10
09e9c     01 3E 06 F1 | 	add	local13, #1
09ea0     03 3E 66 F0 | 	shl	local13, #3
09ea4     35 00 00 FF 
09ea8     0C E4 05 F1 | 	add	objptr, ##27148
09eac     F2 3E 02 F1 | 	add	local13, objptr
09eb0     1F 13 02 FB | 	rdlong	arg01, local13
09eb4     B0 01 00 FF 
09eb8     3E 15 06 F6 | 	mov	arg02, ##@LR__5781
09ebc     35 00 00 FF 
09ec0     0C E4 85 F1 | 	sub	objptr, ##27148
09ec4     A0 C0 B1 FD | 	call	#__system___string_cmp
09ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
09ecc     2C FA 05 56 |  if_ne	mov	result1, #44
09ed0     70 03 90 5D |  if_ne	jmp	#LR__0895
09ed4                 | LR__0878
09ed4     02 38 06 F1 | 	add	local10, #2
09ed8     1C 2D 02 F6 | 	mov	local04, local10
09edc     01 2C 86 F1 | 	sub	local04, #1
09ee0     03 2C 66 F0 | 	shl	local04, #3
09ee4     35 00 00 FF 
09ee8     0C E4 05 F1 | 	add	objptr, ##27148
09eec     F2 2C 02 F1 | 	add	local04, objptr
09ef0     16 13 02 FB | 	rdlong	arg01, local04
09ef4     B0 01 00 FF 
09ef8     40 15 06 F6 | 	mov	arg02, ##@LR__5782
09efc     35 00 00 FF 
09f00     0C E4 85 F1 | 	sub	objptr, ##27148
09f04     60 C0 B1 FD | 	call	#__system___string_cmp
09f08     00 FA 0D F2 | 	cmp	result1, #0 wz
09f0c     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09f10     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
09f14                 | '   if m>3 then return 45
09f14     04 3A 56 F2 | 	cmps	local11, #4 wc
09f18     2D FA 05 36 |  if_ae	mov	result1, #45
09f1c     24 03 90 3D |  if_ae	jmp	#LR__0895
09f20     00 41 06 F6 | 	mov	local14, #256
09f24     0C 42 06 F6 | 	mov	local15, #12
09f28                 | LR__0879
09f28                 | '   arraytype=array_no_type : esize=12
09f28                 | ' 1350 
09f28                 | '   if lparts(l).part$="as" then
09f28     1C 2D 02 F6 | 	mov	local04, local10
09f2c     03 2C 66 F0 | 	shl	local04, #3
09f30     35 00 00 FF 
09f34     0C E4 05 F1 | 	add	objptr, ##27148
09f38     F2 2C 02 F1 | 	add	local04, objptr
09f3c     16 13 02 FB | 	rdlong	arg01, local04
09f40     B0 01 00 FF 
09f44     42 15 06 F6 | 	mov	arg02, ##@LR__5783
09f48     35 00 00 FF 
09f4c     0C E4 85 F1 | 	sub	objptr, ##27148
09f50     14 C0 B1 FD | 	call	#__system___string_cmp
09f54     00 FA 0D F2 | 	cmp	result1, #0 wz
09f58     E8 01 90 5D |  if_ne	jmp	#LR__0894
09f5c                 | '     select case lparts(l+1).part$
09f5c     1C 3D 02 F6 | 	mov	local12, local10
09f60     01 3C 06 F1 | 	add	local12, #1
09f64     03 3C 66 F0 | 	shl	local12, #3
09f68     35 00 00 FF 
09f6c     0C E4 05 F1 | 	add	objptr, ##27148
09f70     F2 3C 02 F1 | 	add	local12, objptr
09f74     1E 45 02 FB | 	rdlong	local16, local12
09f78     B0 01 00 FF 
09f7c     45 15 06 F6 | 	mov	arg02, ##@LR__5784
09f80     22 13 02 F6 | 	mov	arg01, local16
09f84     35 00 00 FF 
09f88     0C E4 85 F1 | 	sub	objptr, ##27148
09f8c     D8 BF B1 FD | 	call	#__system___string_cmp
09f90     00 FA 0D F2 | 	cmp	result1, #0 wz
09f94     0C 01 90 AD |  if_e	jmp	#LR__0880
09f98     B0 01 00 FF 
09f9c     4A 15 06 F6 | 	mov	arg02, ##@LR__5785
09fa0     22 13 02 F6 | 	mov	arg01, local16
09fa4     C0 BF B1 FD | 	call	#__system___string_cmp
09fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fac     00 01 90 AD |  if_e	jmp	#LR__0881
09fb0     B0 01 00 FF 
09fb4     50 15 06 F6 | 	mov	arg02, ##@LR__5786
09fb8     22 13 02 F6 | 	mov	arg01, local16
09fbc     A8 BF B1 FD | 	call	#__system___string_cmp
09fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fc4     F4 00 90 AD |  if_e	jmp	#LR__0882
09fc8     B0 01 00 FF 
09fcc     56 15 06 F6 | 	mov	arg02, ##@LR__5787
09fd0     22 13 02 F6 | 	mov	arg01, local16
09fd4     90 BF B1 FD | 	call	#__system___string_cmp
09fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
09fdc     E8 00 90 AD |  if_e	jmp	#LR__0883
09fe0     B0 01 00 FF 
09fe4     5D 15 06 F6 | 	mov	arg02, ##@LR__5788
09fe8     22 13 02 F6 | 	mov	arg01, local16
09fec     78 BF B1 FD | 	call	#__system___string_cmp
09ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ff4     DC 00 90 AD |  if_e	jmp	#LR__0884
09ff8     B0 01 00 FF 
09ffc     62 15 06 F6 | 	mov	arg02, ##@LR__5789
0a000     22 13 02 F6 | 	mov	arg01, local16
0a004     60 BF B1 FD | 	call	#__system___string_cmp
0a008     00 FA 0D F2 | 	cmp	result1, #0 wz
0a00c     D0 00 90 AD |  if_e	jmp	#LR__0885
0a010     B0 01 00 FF 
0a014     6A 15 06 F6 | 	mov	arg02, ##@LR__5790
0a018     22 13 02 F6 | 	mov	arg01, local16
0a01c     48 BF B1 FD | 	call	#__system___string_cmp
0a020     00 FA 0D F2 | 	cmp	result1, #0 wz
0a024     C4 00 90 AD |  if_e	jmp	#LR__0886
0a028     B0 01 00 FF 
0a02c     70 15 06 F6 | 	mov	arg02, ##@LR__5791
0a030     22 13 02 F6 | 	mov	arg01, local16
0a034     30 BF B1 FD | 	call	#__system___string_cmp
0a038     00 FA 0D F2 | 	cmp	result1, #0 wz
0a03c     B8 00 90 AD |  if_e	jmp	#LR__0887
0a040     B0 01 00 FF 
0a044     76 15 06 F6 | 	mov	arg02, ##@LR__5792
0a048     22 13 02 F6 | 	mov	arg01, local16
0a04c     18 BF B1 FD | 	call	#__system___string_cmp
0a050     00 FA 0D F2 | 	cmp	result1, #0 wz
0a054     AC 00 90 AD |  if_e	jmp	#LR__0888
0a058     B0 01 00 FF 
0a05c     7D 15 06 F6 | 	mov	arg02, ##@LR__5793
0a060     22 13 02 F6 | 	mov	arg01, local16
0a064     00 BF B1 FD | 	call	#__system___string_cmp
0a068     00 FA 0D F2 | 	cmp	result1, #0 wz
0a06c     A0 00 90 AD |  if_e	jmp	#LR__0889
0a070     B0 01 00 FF 
0a074     84 15 06 F6 | 	mov	arg02, ##@LR__5794
0a078     22 13 02 F6 | 	mov	arg01, local16
0a07c     E8 BE B1 FD | 	call	#__system___string_cmp
0a080     00 FA 0D F2 | 	cmp	result1, #0 wz
0a084     94 00 90 AD |  if_e	jmp	#LR__0890
0a088     B0 01 00 FF 
0a08c     8B 15 06 F6 | 	mov	arg02, ##@LR__5795
0a090     22 13 02 F6 | 	mov	arg01, local16
0a094     D0 BE B1 FD | 	call	#__system___string_cmp
0a098     00 FA 0D F2 | 	cmp	result1, #0 wz
0a09c     88 00 90 AD |  if_e	jmp	#LR__0891
0a0a0     90 00 90 FD | 	jmp	#LR__0892
0a0a4                 | LR__0880
0a0a4     01 41 06 F6 | 	mov	local14, #257
0a0a8     01 42 06 F6 | 	mov	local15, #1
0a0ac     94 00 90 FD | 	jmp	#LR__0894
0a0b0                 | LR__0881
0a0b0     02 41 06 F6 | 	mov	local14, #258
0a0b4     01 42 06 F6 | 	mov	local15, #1
0a0b8     88 00 90 FD | 	jmp	#LR__0894
0a0bc                 | LR__0882
0a0bc     03 41 06 F6 | 	mov	local14, #259
0a0c0     02 42 06 F6 | 	mov	local15, #2
0a0c4     7C 00 90 FD | 	jmp	#LR__0894
0a0c8                 | LR__0883
0a0c8     04 41 06 F6 | 	mov	local14, #260
0a0cc     02 42 06 F6 | 	mov	local15, #2
0a0d0     70 00 90 FD | 	jmp	#LR__0894
0a0d4                 | LR__0884
0a0d4     05 41 06 F6 | 	mov	local14, #261
0a0d8     04 42 06 F6 | 	mov	local15, #4
0a0dc     64 00 90 FD | 	jmp	#LR__0894
0a0e0                 | LR__0885
0a0e0     05 41 06 F6 | 	mov	local14, #261
0a0e4     04 42 06 F6 | 	mov	local15, #4
0a0e8     58 00 90 FD | 	jmp	#LR__0894
0a0ec                 | LR__0886
0a0ec     06 41 06 F6 | 	mov	local14, #262
0a0f0     04 42 06 F6 | 	mov	local15, #4
0a0f4     4C 00 90 FD | 	jmp	#LR__0894
0a0f8                 | LR__0887
0a0f8     07 41 06 F6 | 	mov	local14, #263
0a0fc     08 42 06 F6 | 	mov	local15, #8
0a100     40 00 90 FD | 	jmp	#LR__0894
0a104                 | LR__0888
0a104     08 41 06 F6 | 	mov	local14, #264
0a108     08 42 06 F6 | 	mov	local15, #8
0a10c     34 00 90 FD | 	jmp	#LR__0894
0a110                 | LR__0889
0a110     09 41 06 F6 | 	mov	local14, #265
0a114     04 42 06 F6 | 	mov	local15, #4
0a118     28 00 90 FD | 	jmp	#LR__0894
0a11c                 | LR__0890
0a11c     0A 41 06 F6 | 	mov	local14, #266
0a120     08 42 06 F6 | 	mov	local15, #8
0a124     1C 00 90 FD | 	jmp	#LR__0894
0a128                 | LR__0891
0a128     0B 41 06 F6 | 	mov	local14, #267
0a12c     04 42 06 F6 | 	mov	local15, #4
0a130     10 00 90 FD | 	jmp	#LR__0894
0a134                 | LR__0892
0a134     2F FA 05 F6 | 	mov	result1, #47
0a138     08 01 90 FD | 	jmp	#LR__0895
0a13c                 | LR__0893
0a13c                 | '   return 46
0a13c     2E FA 05 F6 | 	mov	result1, #46
0a140     00 01 90 FD | 	jmp	#LR__0895
0a144                 | LR__0894
0a144     13 43 02 FD | 	qmul	local15, local01
0a148     18 32 62 FD | 	getqx	local07
0a14c     14 33 02 FD | 	qmul	local07, local02
0a150     18 44 62 FD | 	getqx	local16
0a154     15 45 02 FD | 	qmul	local16, local03
0a158     52 00 00 FF 
0a15c     98 E4 05 F1 | 	add	objptr, ##42136
0a160     F2 46 02 FB | 	rdlong	local17, objptr
0a164     20 15 02 F6 | 	mov	arg02, local14
0a168     18 44 62 FD | 	getqx	local16
0a16c     22 47 82 F1 | 	sub	local17, local16
0a170     10 46 86 F1 | 	sub	local17, #16
0a174     0F 46 26 F5 | 	andn	local17, #15
0a178     F2 46 62 FC | 	wrlong	local17, objptr
0a17c     52 00 00 FF 
0a180     98 E4 85 F1 | 	sub	objptr, ##42136
0a184     23 13 02 F6 | 	mov	arg01, local17
0a188     AC 85 B1 FD | 	call	#_psdpoke
0a18c     23 13 02 F6 | 	mov	arg01, local17
0a190     02 12 06 F1 | 	add	arg01, #2
0a194     21 15 02 F6 | 	mov	arg02, local15
0a198     9C 85 B1 FD | 	call	#_psdpoke
0a19c     23 13 02 F6 | 	mov	arg01, local17
0a1a0     04 12 06 F1 | 	add	arg01, #4
0a1a4     13 15 02 F6 | 	mov	arg02, local01
0a1a8     44 85 B1 FD | 	call	#_pslpoke
0a1ac     23 13 02 F6 | 	mov	arg01, local17
0a1b0     08 12 06 F1 | 	add	arg01, #8
0a1b4     14 15 02 F6 | 	mov	arg02, local02
0a1b8     34 85 B1 FD | 	call	#_pslpoke
0a1bc     23 13 02 F6 | 	mov	arg01, local17
0a1c0     0C 12 06 F1 | 	add	arg01, #12
0a1c4     15 15 02 F6 | 	mov	arg02, local03
0a1c8     24 85 B1 FD | 	call	#_pslpoke
0a1cc     18 3D 02 F6 | 	mov	local12, local06
0a1d0     04 3C 66 F0 | 	shl	local12, #4
0a1d4     14 00 00 FF 
0a1d8     F8 E5 05 F1 | 	add	objptr, ##10744
0a1dc     F2 3C 02 F1 | 	add	local12, objptr
0a1e0     1E 2F 62 FC | 	wrlong	local05, local12
0a1e4     18 3D 02 F6 | 	mov	local12, local06
0a1e8     04 3C 66 F0 | 	shl	local12, #4
0a1ec     F2 3C 02 F1 | 	add	local12, objptr
0a1f0     04 3C 06 F1 | 	add	local12, #4
0a1f4     1E 47 62 FC | 	wrlong	local17, local12
0a1f8     18 3D 02 F6 | 	mov	local12, local06
0a1fc     04 3C 66 F0 | 	shl	local12, #4
0a200     F2 3C 02 F1 | 	add	local12, objptr
0a204     0C 3C 06 F1 | 	add	local12, #12
0a208     1E 41 62 FC | 	wrlong	local14, local12
0a20c                 | ' memtop=arrayptr
0a20c                 | ' psdpoke arrayptr,arraytype 
0a20c                 | ' psdpoke arrayptr+2,esize 
0a20c                 | ' pslpoke arrayptr+4,dims(0)
0a20c                 | ' pslpoke arrayptr+8,dims(1)
0a20c                 | ' pslpoke arrayptr+12,dims(2)
0a20c                 | ' variables(j).name=varname2$
0a20c                 | ' variables(j).value.uresult=arrayptr
0a20c                 | ' variables(j).vartype=arraytype
0a20c                 | ' if j=varnum then varnum+=1
0a20c     20 00 00 FF 
0a210     10 E4 05 F1 | 	add	objptr, ##16400
0a214     F2 32 02 FB | 	rdlong	local07, objptr
0a218     35 00 00 FF 
0a21c     08 E4 85 F1 | 	sub	objptr, ##27144
0a220     19 31 0A F2 | 	cmp	local06, local07 wz
0a224     35 00 00 AF 
0a228     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a22c     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a230     01 32 06 A1 |  if_e	add	local07, #1
0a234     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a238     35 00 00 AF 
0a23c     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a240                 | ' return 0
0a240     00 FA 05 F6 | 	mov	result1, #0
0a244                 | LR__0895
0a244     A7 F0 03 F6 | 	mov	ptra, fp
0a248     B2 00 A0 FD | 	call	#popregs_
0a24c                 | _compile_dim_ret
0a24c     2D 00 64 FD | 	ret
0a250                 | 
0a250                 | ' 
0a250                 | ' '----- compile 'for' command. 
0a250                 | ' 
0a250                 | ' function compile_for() as ulong  
0a250                 | _compile_for
0a250     0E 4A 05 F6 | 	mov	COUNT_, #14
0a254     A8 00 A0 FD | 	call	#pushregs_
0a258                 | ' 
0a258                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a258     37 00 00 FF 
0a25c     44 E4 05 F1 | 	add	objptr, ##28228
0a260     F2 14 02 FB | 	rdlong	arg02, objptr
0a264     01 14 06 F1 | 	add	arg02, #1
0a268     03 14 66 F0 | 	shl	arg02, #3
0a26c     02 00 00 FF 
0a270     38 E4 85 F1 | 	sub	objptr, ##1080
0a274     F2 14 02 F1 | 	add	arg02, objptr
0a278     0A 13 02 FB | 	rdlong	arg01, arg02
0a27c     35 00 00 FF 
0a280     0C E4 85 F1 | 	sub	objptr, ##27148
0a284                 | ' 
0a284                 | ' select case s
0a284     AE 01 00 FF 
0a288     74 14 06 F6 | 	mov	arg02, ##@LR__5521
0a28c     D8 BC B1 FD | 	call	#__system___string_cmp
0a290     00 FA 0D F2 | 	cmp	result1, #0 wz
0a294     1B FA 05 A6 |  if_e	mov	result1, #27
0a298     00 FA 05 56 |  if_ne	mov	result1, #0
0a29c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2a0     0C 00 90 AD |  if_e	jmp	#LR__0900
0a2a4     05 12 06 F6 | 	mov	arg01, #5
0a2a8     A8 DB BF FD | 	call	#_compile_immediate_assign
0a2ac     08 00 90 FD | 	jmp	#LR__0901
0a2b0                 | LR__0900
0a2b0     20 FA 05 F6 | 	mov	result1, #32
0a2b4     58 08 90 FD | 	jmp	#LR__0917
0a2b8                 | LR__0901
0a2b8     4A 00 00 FF 
0a2bc     7C E4 05 F1 | 	add	objptr, ##38012
0a2c0     F2 14 02 FB | 	rdlong	arg02, objptr
0a2c4     0A 13 02 F6 | 	mov	arg01, arg02
0a2c8     01 12 86 F1 | 	sub	arg01, #1
0a2cc     09 2D 02 F6 | 	mov	local04, arg01
0a2d0     01 2C 66 F0 | 	shl	local04, #1
0a2d4     09 2D 02 F1 | 	add	local04, arg01
0a2d8     02 2C 66 F0 | 	shl	local04, #2
0a2dc     03 00 00 FF 
0a2e0     00 E4 85 F1 | 	sub	objptr, ##1536
0a2e4     F2 2C 02 F1 | 	add	local04, objptr
0a2e8     16 27 02 FB | 	rdlong	local01, local04
0a2ec     04 2C 06 F1 | 	add	local04, #4
0a2f0     16 2F 02 FB | 	rdlong	local05, local04
0a2f4     01 14 86 F1 | 	sub	arg02, #1
0a2f8     0A 2D 02 F6 | 	mov	local04, arg02
0a2fc     01 2C 66 F0 | 	shl	local04, #1
0a300     0A 2D 02 F1 | 	add	local04, arg02
0a304     02 2C 66 F0 | 	shl	local04, #2
0a308     F2 30 02 F6 | 	mov	local06, objptr
0a30c     F2 2C 02 F1 | 	add	local04, objptr
0a310     08 2C 06 F1 | 	add	local04, #8
0a314     16 2D 02 FB | 	rdlong	local04, local04
0a318     17 29 02 F6 | 	mov	local02, local05
0a31c     16 2B 02 F6 | 	mov	local03, local04
0a320                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a320     17 2A 0E F2 | 	cmp	local03, #23 wz
0a324     47 00 00 FF 
0a328     7C E4 85 F1 | 	sub	objptr, ##36476
0a32c     22 FA 05 56 |  if_ne	mov	result1, #34
0a330     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a334     13 33 02 F6 | 	mov	local07, local01
0a338                 | ' varnum=t1.result.uresult
0a338                 | ' if lparts(ct).part$<>"to" then return 33
0a338     37 00 00 FF 
0a33c     44 E4 05 F1 | 	add	objptr, ##28228
0a340     F2 2C 02 FB | 	rdlong	local04, objptr
0a344     03 2C 66 F0 | 	shl	local04, #3
0a348     02 00 00 FF 
0a34c     38 E4 85 F1 | 	sub	objptr, ##1080
0a350     F2 2C 02 F1 | 	add	local04, objptr
0a354     16 13 02 FB | 	rdlong	arg01, local04
0a358     B0 01 00 FF 
0a35c     92 15 06 F6 | 	mov	arg02, ##@LR__5796
0a360     35 00 00 FF 
0a364     0C E4 85 F1 | 	sub	objptr, ##27148
0a368     FC BB B1 FD | 	call	#__system___string_cmp
0a36c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a370     21 FA 05 56 |  if_ne	mov	result1, #33
0a374     98 07 90 5D |  if_ne	jmp	#LR__0917
0a378     37 00 00 FF 
0a37c     44 E4 05 F1 | 	add	objptr, ##28228
0a380     F2 34 02 FB | 	rdlong	local08, objptr
0a384     01 34 06 F1 | 	add	local08, #1
0a388     F2 34 62 FC | 	wrlong	local08, objptr
0a38c     37 00 00 FF 
0a390     44 E4 85 F1 | 	sub	objptr, ##28228
0a394     2C 17 B0 FD | 	call	#_expr
0a398                 | ' ct+=1
0a398                 | ' expr()  										' there is "to" value pushed on the stack
0a398                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a398     37 00 00 FF 
0a39c     44 E4 05 F1 | 	add	objptr, ##28228
0a3a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a3a4     03 2C 66 F0 | 	shl	local04, #3
0a3a8     02 00 00 FF 
0a3ac     38 E4 85 F1 | 	sub	objptr, ##1080
0a3b0     F2 2C 02 F1 | 	add	local04, objptr
0a3b4     16 13 02 FB | 	rdlong	arg01, local04
0a3b8     B0 01 00 FF 
0a3bc     95 15 06 F6 | 	mov	arg02, ##@LR__5797
0a3c0     35 00 00 FF 
0a3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0a3c8     9C BB B1 FD | 	call	#__system___string_cmp
0a3cc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a3d0     48 00 90 AD |  if_e	jmp	#LR__0902
0a3d4     37 00 00 FF 
0a3d8     44 E4 05 F1 | 	add	objptr, ##28228
0a3dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a3e0     03 2C 66 F0 | 	shl	local04, #3
0a3e4     02 00 00 FF 
0a3e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a3ec     F2 2C 02 F1 | 	add	local04, objptr
0a3f0     16 13 02 FB | 	rdlong	arg01, local04
0a3f4     02 14 06 F6 | 	mov	arg02, #2
0a3f8     35 00 00 FF 
0a3fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a400     BC DB B1 FD | 	call	#__system__Left_S
0a404     FD 12 02 F6 | 	mov	arg01, result1
0a408     B0 01 00 FF 
0a40c     9A 15 06 F6 | 	mov	arg02, ##@LR__5798
0a410     54 BB B1 FD | 	call	#__system___string_cmp
0a414     00 FA 0D F2 | 	cmp	result1, #0 wz
0a418     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a41c                 | LR__0902
0a41c                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a41c     37 00 00 FF 
0a420     44 E4 05 F1 | 	add	objptr, ##28228
0a424     F2 2C 02 FB | 	rdlong	local04, objptr
0a428     03 2C 66 F0 | 	shl	local04, #3
0a42c     02 00 00 FF 
0a430     38 E4 85 F1 | 	sub	objptr, ##1080
0a434     F2 2C 02 F1 | 	add	local04, objptr
0a438     16 13 02 FB | 	rdlong	arg01, local04
0a43c     02 14 06 F6 | 	mov	arg02, #2
0a440     35 00 00 FF 
0a444     0C E4 85 F1 | 	sub	objptr, ##27148
0a448     74 DB B1 FD | 	call	#__system__Left_S
0a44c     FD 12 02 F6 | 	mov	arg01, result1
0a450     B0 01 00 FF 
0a454     9D 15 06 F6 | 	mov	arg02, ##@LR__5799
0a458     0C BB B1 FD | 	call	#__system___string_cmp
0a45c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a460     30 05 90 5D |  if_ne	jmp	#LR__0914
0a464     37 00 00 FF 
0a468     44 E4 05 F1 | 	add	objptr, ##28228
0a46c     F2 2C 02 FB | 	rdlong	local04, objptr
0a470     03 2C 66 F0 | 	shl	local04, #3
0a474     02 00 00 FF 
0a478     38 E4 85 F1 | 	sub	objptr, ##1080
0a47c     F2 2C 02 F1 | 	add	local04, objptr
0a480     16 13 02 FB | 	rdlong	arg01, local04
0a484     35 00 00 FF 
0a488     0C E4 85 F1 | 	sub	objptr, ##27148
0a48c     09 37 02 F6 | 	mov	local09, arg01
0a490     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a494                 | LR__0903
0a494     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a498     01 36 06 51 |  if_ne	add	local09, #1
0a49c     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a4a0                 | LR__0904
0a4a0     09 37 82 F1 | 	sub	local09, arg01
0a4a4     03 36 56 F2 | 	cmps	local09, #3 wc
0a4a8     E8 04 90 CD |  if_b	jmp	#LR__0914
0a4ac     37 00 00 FF 
0a4b0     44 E4 05 F1 | 	add	objptr, ##28228
0a4b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a4b8     16 39 02 F6 | 	mov	local10, local04
0a4bc     03 38 66 F0 | 	shl	local10, #3
0a4c0     02 00 00 FF 
0a4c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a4c8     F2 38 02 F1 | 	add	local10, objptr
0a4cc     03 2C 66 F0 | 	shl	local04, #3
0a4d0     F2 2C 02 F1 | 	add	local04, objptr
0a4d4     16 2D 02 FB | 	rdlong	local04, local04
0a4d8     02 00 00 FF 
0a4dc     38 E4 05 F1 | 	add	objptr, ##1080
0a4e0     F2 12 02 FB | 	rdlong	arg01, objptr
0a4e4     03 12 66 F0 | 	shl	arg01, #3
0a4e8     02 00 00 FF 
0a4ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a4f0     F2 12 02 F1 | 	add	arg01, objptr
0a4f4     09 13 02 FB | 	rdlong	arg01, arg01
0a4f8     35 00 00 FF 
0a4fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a500     09 37 02 F6 | 	mov	local09, arg01
0a504     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a508                 | LR__0905
0a508     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a50c     01 36 06 51 |  if_ne	add	local09, #1
0a510     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a514                 | LR__0906
0a514     09 37 82 F1 | 	sub	local09, arg01
0a518     1B 15 02 F6 | 	mov	arg02, local09
0a51c     02 14 86 F1 | 	sub	arg02, #2
0a520     16 13 02 F6 | 	mov	arg01, local04
0a524     20 DB B1 FD | 	call	#__system__Right_S
0a528     1C FB 61 FC | 	wrlong	result1, local10
0a52c     37 00 00 FF 
0a530     44 E4 05 F1 | 	add	objptr, ##28228
0a534     F2 2C 02 FB | 	rdlong	local04, objptr
0a538     16 39 02 F6 | 	mov	local10, local04
0a53c     03 38 66 F0 | 	shl	local10, #3
0a540     02 00 00 FF 
0a544     38 E4 85 F1 | 	sub	objptr, ##1080
0a548     F2 38 02 F1 | 	add	local10, objptr
0a54c     03 2C 66 F0 | 	shl	local04, #3
0a550     F2 2C 02 F1 | 	add	local04, objptr
0a554     16 13 02 FB | 	rdlong	arg01, local04
0a558     35 00 00 FF 
0a55c     0C E4 85 F1 | 	sub	objptr, ##27148
0a560     F4 B6 BF FD | 	call	#_isfunction
0a564     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a568     04 38 06 F1 | 	add	local10, #4
0a56c     1C FB 61 FC | 	wrlong	result1, local10
0a570                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a570     37 00 00 FF 
0a574     44 E4 05 F1 | 	add	objptr, ##28228
0a578     F2 38 02 FB | 	rdlong	local10, objptr
0a57c     03 38 66 F0 | 	shl	local10, #3
0a580     02 00 00 FF 
0a584     38 E4 85 F1 | 	sub	objptr, ##1080
0a588     F2 38 02 F1 | 	add	local10, objptr
0a58c     04 38 06 F1 | 	add	local10, #4
0a590     1C 2D 02 FB | 	rdlong	local04, local10
0a594     01 2C 56 F2 | 	cmps	local04, #1 wc
0a598     35 00 00 FF 
0a59c     0C E4 85 F1 | 	sub	objptr, ##27148
0a5a0     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a5a4     37 00 00 FF 
0a5a8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a5b0     16 39 02 F6 | 	mov	local10, local04
0a5b4     03 38 66 F0 | 	shl	local10, #3
0a5b8     02 00 00 FF 
0a5bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a5c0     F2 38 02 F1 | 	add	local10, objptr
0a5c4     03 2C 66 F0 | 	shl	local04, #3
0a5c8     F2 2C 02 F1 | 	add	local04, objptr
0a5cc     16 13 02 FB | 	rdlong	arg01, local04
0a5d0     35 00 00 FF 
0a5d4     0C E4 85 F1 | 	sub	objptr, ##27148
0a5d8     30 A0 BF FD | 	call	#_isnotename
0a5dc     04 38 06 F1 | 	add	local10, #4
0a5e0     1C FB 61 FC | 	wrlong	result1, local10
0a5e4                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a5e4                 | '     if lparts(ct).token>0 then 
0a5e4     37 00 00 FF 
0a5e8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ec     F2 38 02 FB | 	rdlong	local10, objptr
0a5f0     03 38 66 F0 | 	shl	local10, #3
0a5f4     02 00 00 FF 
0a5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5fc     F2 38 02 F1 | 	add	local10, objptr
0a600     04 38 06 F1 | 	add	local10, #4
0a604     1C 2D 02 FB | 	rdlong	local04, local10
0a608     01 2C 56 F2 | 	cmps	local04, #1 wc
0a60c     35 00 00 FF 
0a610     0C E4 85 F1 | 	sub	objptr, ##27148
0a614     94 00 90 CD |  if_b	jmp	#LR__0907
0a618     37 00 00 FF 
0a61c     44 E4 05 F1 | 	add	objptr, ##28228
0a620     F2 38 02 FB | 	rdlong	local10, objptr
0a624     03 38 66 F0 | 	shl	local10, #3
0a628     02 00 00 FF 
0a62c     38 E4 85 F1 | 	sub	objptr, ##1080
0a630     F2 38 02 F1 | 	add	local10, objptr
0a634     04 38 06 F1 | 	add	local10, #4
0a638     1C 13 02 FB | 	rdlong	arg01, local10
0a63c     35 00 00 FF 
0a640     0C E4 85 F1 | 	sub	objptr, ##27148
0a644     F8 C6 BF FD | 	call	#_getnoteval
0a648     FD 12 02 F6 | 	mov	arg01, result1
0a64c     37 00 00 FF 
0a650     44 E4 05 F1 | 	add	objptr, ##28228
0a654     F2 38 02 FB | 	rdlong	local10, objptr
0a658     03 38 66 F0 | 	shl	local10, #3
0a65c     02 00 00 FF 
0a660     38 E4 85 F1 | 	sub	objptr, ##1080
0a664     F2 38 02 F1 | 	add	local10, objptr
0a668     35 00 00 FF 
0a66c     0C E4 85 F1 | 	sub	objptr, ##27148
0a670     44 DB B1 FD | 	call	#__system__str_S
0a674     1C FB 61 FC | 	wrlong	result1, local10
0a678     37 00 00 FF 
0a67c     44 E4 05 F1 | 	add	objptr, ##28228
0a680     F2 38 02 FB | 	rdlong	local10, objptr
0a684     03 38 66 F0 | 	shl	local10, #3
0a688     02 00 00 FF 
0a68c     38 E4 85 F1 | 	sub	objptr, ##1080
0a690     F2 38 02 F1 | 	add	local10, objptr
0a694     04 38 06 F1 | 	add	local10, #4
0a698     01 00 80 FF 
0a69c     1C 05 68 FC | 	wrlong	##514, local10
0a6a0     35 00 00 FF 
0a6a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a8     CC 02 90 FD | 	jmp	#LR__0913
0a6ac                 | LR__0907
0a6ac     37 00 00 FF 
0a6b0     44 E4 05 F1 | 	add	objptr, ##28228
0a6b4     F2 2C 02 FB | 	rdlong	local04, objptr
0a6b8     16 39 02 F6 | 	mov	local10, local04
0a6bc     03 38 66 F0 | 	shl	local10, #3
0a6c0     02 00 00 FF 
0a6c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c8     F2 38 02 F1 | 	add	local10, objptr
0a6cc     03 2C 66 F0 | 	shl	local04, #3
0a6d0     F2 2C 02 F1 | 	add	local04, objptr
0a6d4     16 13 02 FB | 	rdlong	arg01, local04
0a6d8     35 00 00 FF 
0a6dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a6e0     A8 9E BF FD | 	call	#_isconstant
0a6e4     04 38 06 F1 | 	add	local10, #4
0a6e8     1C FB 61 FC | 	wrlong	result1, local10
0a6ec                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a6ec     37 00 00 FF 
0a6f0     44 E4 05 F1 | 	add	objptr, ##28228
0a6f4     F2 38 02 FB | 	rdlong	local10, objptr
0a6f8     03 38 66 F0 | 	shl	local10, #3
0a6fc     02 00 00 FF 
0a700     38 E4 85 F1 | 	sub	objptr, ##1080
0a704     F2 38 02 F1 | 	add	local10, objptr
0a708     04 38 06 F1 | 	add	local10, #4
0a70c     1C 2D 02 FB | 	rdlong	local04, local10
0a710     01 2C 56 F2 | 	cmps	local04, #1 wc
0a714     35 00 00 FF 
0a718     0C E4 85 F1 | 	sub	objptr, ##27148
0a71c     8C 00 90 CD |  if_b	jmp	#LR__0908
0a720     37 00 00 FF 
0a724     44 E4 05 F1 | 	add	objptr, ##28228
0a728     F2 34 02 FB | 	rdlong	local08, objptr
0a72c     1A 39 02 F6 | 	mov	local10, local08
0a730     03 38 66 F0 | 	shl	local10, #3
0a734     02 00 00 FF 
0a738     38 E4 85 F1 | 	sub	objptr, ##1080
0a73c     F2 38 02 F1 | 	add	local10, objptr
0a740     03 34 66 F0 | 	shl	local08, #3
0a744     F2 34 02 F1 | 	add	local08, objptr
0a748     04 34 06 F1 | 	add	local08, #4
0a74c     1A 13 02 FB | 	rdlong	arg01, local08
0a750     35 00 00 FF 
0a754     0C E4 85 F1 | 	sub	objptr, ##27148
0a758     09 13 52 F6 | 	abs	arg01, arg01 wc
0a75c     1F 3A C6 C9 |  if_b	decod	local11, #31
0a760     00 3A 06 36 |  if_ae	mov	local11, #0
0a764     50 E2 B1 FD | 	call	#__system___float_fromuns
0a768     1D FB 61 F5 | 	xor	result1, local11
0a76c     FD 12 02 F6 | 	mov	arg01, result1
0a770     44 DA B1 FD | 	call	#__system__str_S
0a774     1C FB 61 FC | 	wrlong	result1, local10
0a778     37 00 00 FF 
0a77c     44 E4 05 F1 | 	add	objptr, ##28228
0a780     F2 38 02 FB | 	rdlong	local10, objptr
0a784     03 38 66 F0 | 	shl	local10, #3
0a788     02 00 00 FF 
0a78c     38 E4 85 F1 | 	sub	objptr, ##1080
0a790     F2 38 02 F1 | 	add	local10, objptr
0a794     04 38 06 F1 | 	add	local10, #4
0a798     01 00 80 FF 
0a79c     1C 03 68 FC | 	wrlong	##513, local10
0a7a0     35 00 00 FF 
0a7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7a8     CC 01 90 FD | 	jmp	#LR__0913
0a7ac                 | LR__0908
0a7ac     37 00 00 FF 
0a7b0     44 E4 05 F1 | 	add	objptr, ##28228
0a7b4     F2 38 02 FB | 	rdlong	local10, objptr
0a7b8     03 38 66 F0 | 	shl	local10, #3
0a7bc     02 00 00 FF 
0a7c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7c4     F2 38 02 F1 | 	add	local10, objptr
0a7c8     1C 13 02 FB | 	rdlong	arg01, local10
0a7cc     35 00 00 FF 
0a7d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a7d4     B4 BD BF FD | 	call	#_isnum
0a7d8     FD 3C 02 F6 | 	mov	local12, result1
0a7dc     37 00 00 FF 
0a7e0     44 E4 05 F1 | 	add	objptr, ##28228
0a7e4     F2 38 02 FB | 	rdlong	local10, objptr
0a7e8     03 38 66 F0 | 	shl	local10, #3
0a7ec     02 00 00 FF 
0a7f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a7f4     F2 38 02 F1 | 	add	local10, objptr
0a7f8     1C 13 02 FB | 	rdlong	arg01, local10
0a7fc     35 00 00 FF 
0a800     0C E4 85 F1 | 	sub	objptr, ##27148
0a804     70 C1 BF FD | 	call	#_isint
0a808     FD 3E 02 F6 | 	mov	local13, result1
0a80c     37 00 00 FF 
0a810     44 E4 05 F1 | 	add	objptr, ##28228
0a814     F2 38 02 FB | 	rdlong	local10, objptr
0a818     03 38 66 F0 | 	shl	local10, #3
0a81c     02 00 00 FF 
0a820     38 E4 85 F1 | 	sub	objptr, ##1080
0a824     F2 38 02 F1 | 	add	local10, objptr
0a828     1C 13 02 FB | 	rdlong	arg01, local10
0a82c     35 00 00 FF 
0a830     0C E4 85 F1 | 	sub	objptr, ##27148
0a834     E4 C3 BF FD | 	call	#_isdec
0a838     FD 40 02 F6 | 	mov	local14, result1
0a83c                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0a83c                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0a83c     00 3C 0E F2 | 	cmp	local12, #0 wz
0a840     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a844     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0a848     34 00 90 AD |  if_e	jmp	#LR__0909
0a84c     37 00 00 FF 
0a850     44 E4 05 F1 | 	add	objptr, ##28228
0a854     F2 38 02 FB | 	rdlong	local10, objptr
0a858     03 38 66 F0 | 	shl	local10, #3
0a85c     02 00 00 FF 
0a860     38 E4 85 F1 | 	sub	objptr, ##1080
0a864     F2 38 02 F1 | 	add	local10, objptr
0a868     04 38 06 F1 | 	add	local10, #4
0a86c     01 00 80 FF 
0a870     1C 01 68 FC | 	wrlong	##512, local10
0a874     35 00 00 FF 
0a878     0C E4 85 F1 | 	sub	objptr, ##27148
0a87c     F8 00 90 FD | 	jmp	#LR__0913
0a880                 | LR__0909
0a880                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0a880     00 3C 0E F2 | 	cmp	local12, #0 wz
0a884     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a888     20 35 22 56 |  if_ne	not	local08, local14
0a88c     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0a890     34 00 90 AD |  if_e	jmp	#LR__0910
0a894     37 00 00 FF 
0a898     44 E4 05 F1 | 	add	objptr, ##28228
0a89c     F2 38 02 FB | 	rdlong	local10, objptr
0a8a0     03 38 66 F0 | 	shl	local10, #3
0a8a4     02 00 00 FF 
0a8a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ac     F2 38 02 F1 | 	add	local10, objptr
0a8b0     04 38 06 F1 | 	add	local10, #4
0a8b4     01 00 80 FF 
0a8b8     1C 03 68 FC | 	wrlong	##513, local10
0a8bc     35 00 00 FF 
0a8c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a8c4     B0 00 90 FD | 	jmp	#LR__0913
0a8c8                 | LR__0910
0a8c8                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0a8c8     00 3C 0E F2 | 	cmp	local12, #0 wz
0a8cc     1F 3F 22 56 |  if_ne	not	local13, local13
0a8d0     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0a8d4     20 41 22 56 |  if_ne	not	local14, local14
0a8d8     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0a8dc     34 00 90 AD |  if_e	jmp	#LR__0911
0a8e0     37 00 00 FF 
0a8e4     44 E4 05 F1 | 	add	objptr, ##28228
0a8e8     F2 38 02 FB | 	rdlong	local10, objptr
0a8ec     03 38 66 F0 | 	shl	local10, #3
0a8f0     02 00 00 FF 
0a8f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8f8     F2 38 02 F1 | 	add	local10, objptr
0a8fc     04 38 06 F1 | 	add	local10, #4
0a900     01 00 80 FF 
0a904     1C 05 68 FC | 	wrlong	##514, local10
0a908     35 00 00 FF 
0a90c     0C E4 85 F1 | 	sub	objptr, ##27148
0a910     64 00 90 FD | 	jmp	#LR__0913
0a914                 | LR__0911
0a914                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0a914     37 00 00 FF 
0a918     44 E4 05 F1 | 	add	objptr, ##28228
0a91c     F2 38 02 FB | 	rdlong	local10, objptr
0a920     03 38 66 F0 | 	shl	local10, #3
0a924     02 00 00 FF 
0a928     38 E4 85 F1 | 	sub	objptr, ##1080
0a92c     F2 38 02 F1 | 	add	local10, objptr
0a930     1C 13 02 FB | 	rdlong	arg01, local10
0a934     35 00 00 FF 
0a938     0C E4 85 F1 | 	sub	objptr, ##27148
0a93c     D8 B9 BF FD | 	call	#_isname
0a940     00 FA 0D F2 | 	cmp	result1, #0 wz
0a944     30 00 90 AD |  if_e	jmp	#LR__0912
0a948     37 00 00 FF 
0a94c     44 E4 05 F1 | 	add	objptr, ##28228
0a950     F2 38 02 FB | 	rdlong	local10, objptr
0a954     03 38 66 F0 | 	shl	local10, #3
0a958     02 00 00 FF 
0a95c     38 E4 85 F1 | 	sub	objptr, ##1080
0a960     F2 38 02 F1 | 	add	local10, objptr
0a964     04 38 06 F1 | 	add	local10, #4
0a968     01 00 80 FF 
0a96c     1C 09 68 FC | 	wrlong	##516, local10
0a970     35 00 00 FF 
0a974     0C E4 85 F1 | 	sub	objptr, ##27148
0a978                 | LR__0912
0a978                 | LR__0913
0a978     37 00 00 FF 
0a97c     44 E4 05 F1 | 	add	objptr, ##28228
0a980     F2 34 02 FB | 	rdlong	local08, objptr
0a984     01 34 86 F1 | 	sub	local08, #1
0a988     F2 34 62 FC | 	wrlong	local08, objptr
0a98c     37 00 00 FF 
0a990     44 E4 85 F1 | 	sub	objptr, ##28228
0a994                 | LR__0914
0a994     37 00 00 FF 
0a998     44 E4 05 F1 | 	add	objptr, ##28228
0a99c     F2 34 02 FB | 	rdlong	local08, objptr
0a9a0     01 34 06 F1 | 	add	local08, #1
0a9a4     F2 34 62 FC | 	wrlong	local08, objptr
0a9a8     37 00 00 FF 
0a9ac     44 E4 85 F1 | 	sub	objptr, ##28228
0a9b0     10 11 B0 FD | 	call	#_expr
0a9b4     78 00 90 FD | 	jmp	#LR__0916
0a9b8                 | LR__0915
0a9b8     4A 00 00 FF 
0a9bc     7C E4 05 F1 | 	add	objptr, ##38012
0a9c0     F2 40 02 FB | 	rdlong	local14, objptr
0a9c4     20 39 02 F6 | 	mov	local10, local14
0a9c8     01 38 66 F0 | 	shl	local10, #1
0a9cc     20 39 02 F1 | 	add	local10, local14
0a9d0     02 38 66 F0 | 	shl	local10, #2
0a9d4     03 00 00 FF 
0a9d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a9dc     F2 38 02 F1 | 	add	local10, objptr
0a9e0     08 38 06 F1 | 	add	local10, #8
0a9e4     1C 39 68 FC | 	wrlong	#28, local10
0a9e8     03 00 00 FF 
0a9ec     00 E4 05 F1 | 	add	objptr, ##1536
0a9f0     F2 40 02 FB | 	rdlong	local14, objptr
0a9f4     20 39 02 F6 | 	mov	local10, local14
0a9f8     01 38 66 F0 | 	shl	local10, #1
0a9fc     20 39 02 F1 | 	add	local10, local14
0aa00     02 38 66 F0 | 	shl	local10, #2
0aa04     03 00 00 FF 
0aa08     00 E4 85 F1 | 	sub	objptr, ##1536
0aa0c     F2 38 02 F1 | 	add	local10, objptr
0aa10     1C 03 68 FC | 	wrlong	#1, local10
0aa14     03 00 00 FF 
0aa18     00 E4 05 F1 | 	add	objptr, ##1536
0aa1c     F2 34 02 FB | 	rdlong	local08, objptr
0aa20     01 34 06 F1 | 	add	local08, #1
0aa24     F2 34 62 FC | 	wrlong	local08, objptr
0aa28     4A 00 00 FF 
0aa2c     7C E4 85 F1 | 	sub	objptr, ##38012
0aa30                 | LR__0916
0aa30     4A 00 00 FF 
0aa34     7C E4 05 F1 | 	add	objptr, ##38012
0aa38     F2 40 02 FB | 	rdlong	local14, objptr
0aa3c     20 39 02 F6 | 	mov	local10, local14
0aa40     01 38 66 F0 | 	shl	local10, #1
0aa44     20 39 02 F1 | 	add	local10, local14
0aa48     02 38 66 F0 | 	shl	local10, #2
0aa4c     03 00 00 FF 
0aa50     00 E4 85 F1 | 	sub	objptr, ##1536
0aa54     F2 38 02 F1 | 	add	local10, objptr
0aa58     08 38 06 F1 | 	add	local10, #8
0aa5c     1C 39 68 FC | 	wrlong	#28, local10
0aa60     03 00 00 FF 
0aa64     00 E4 05 F1 | 	add	objptr, ##1536
0aa68     F2 40 02 FB | 	rdlong	local14, objptr
0aa6c     20 39 02 F6 | 	mov	local10, local14
0aa70     01 38 66 F0 | 	shl	local10, #1
0aa74     20 39 02 F1 | 	add	local10, local14
0aa78     02 38 66 F0 | 	shl	local10, #2
0aa7c     03 00 00 FF 
0aa80     00 E4 85 F1 | 	sub	objptr, ##1536
0aa84     F2 38 02 F1 | 	add	local10, objptr
0aa88     1C 33 62 FC | 	wrlong	local07, local10
0aa8c     03 00 00 FF 
0aa90     00 E4 05 F1 | 	add	objptr, ##1536
0aa94     F2 40 02 FB | 	rdlong	local14, objptr
0aa98     01 40 06 F1 | 	add	local14, #1
0aa9c     F2 40 62 FC | 	wrlong	local14, objptr
0aaa0     20 39 02 F6 | 	mov	local10, local14
0aaa4     01 38 66 F0 | 	shl	local10, #1
0aaa8     20 39 02 F1 | 	add	local10, local14
0aaac     02 38 66 F0 | 	shl	local10, #2
0aab0     03 00 00 FF 
0aab4     00 E4 85 F1 | 	sub	objptr, ##1536
0aab8     F2 38 02 F1 | 	add	local10, objptr
0aabc     08 38 06 F1 | 	add	local10, #8
0aac0     1C 95 68 FC | 	wrlong	#74, local10
0aac4     03 00 00 FF 
0aac8     00 E4 05 F1 | 	add	objptr, ##1536
0aacc     F2 40 02 FB | 	rdlong	local14, objptr
0aad0     20 39 02 F6 | 	mov	local10, local14
0aad4     01 38 66 F0 | 	shl	local10, #1
0aad8     20 39 02 F1 | 	add	local10, local14
0aadc     02 38 66 F0 | 	shl	local10, #2
0aae0     03 00 00 FF 
0aae4     00 E4 85 F1 | 	sub	objptr, ##1536
0aae8     F2 38 02 F1 | 	add	local10, objptr
0aaec     1C 01 68 FC | 	wrlong	#0, local10
0aaf0     03 00 00 FF 
0aaf4     00 E4 05 F1 | 	add	objptr, ##1536
0aaf8     F2 34 02 FB | 	rdlong	local08, objptr
0aafc     01 34 06 F1 | 	add	local08, #1
0ab00     F2 34 62 FC | 	wrlong	local08, objptr
0ab04     4A 00 00 FF 
0ab08     7C E4 85 F1 | 	sub	objptr, ##38012
0ab0c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0ab0c                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0ab0c                 | ' return 0
0ab0c     00 FA 05 F6 | 	mov	result1, #0
0ab10                 | LR__0917
0ab10     A7 F0 03 F6 | 	mov	ptra, fp
0ab14     B2 00 A0 FD | 	call	#popregs_
0ab18                 | _compile_for_ret
0ab18     2D 00 64 FD | 	ret
0ab1c                 | 
0ab1c                 | ' 
0ab1c                 | ' '----- compile 'next' command. 
0ab1c                 | ' 
0ab1c                 | ' function compile_next() as ulong
0ab1c                 | _compile_next
0ab1c     04 4A 05 F6 | 	mov	COUNT_, #4
0ab20     A8 00 A0 FD | 	call	#pushregs_
0ab24     37 00 00 FF 
0ab28     44 E4 05 F1 | 	add	objptr, ##28228
0ab2c     F2 14 02 FB | 	rdlong	arg02, objptr
0ab30     03 14 66 F0 | 	shl	arg02, #3
0ab34     02 00 00 FF 
0ab38     38 E4 85 F1 | 	sub	objptr, ##1080
0ab3c     F2 14 02 F1 | 	add	arg02, objptr
0ab40     0A 27 02 FB | 	rdlong	local01, arg02
0ab44                 | ' 
0ab44                 | ' varname$=lparts(ct).part$ 
0ab44                 | ' if varnum=0 then return 35
0ab44     04 E4 85 F1 | 	sub	objptr, #4
0ab48     F2 14 0A FB | 	rdlong	arg02, objptr wz
0ab4c     35 00 00 FF 
0ab50     08 E4 85 F1 | 	sub	objptr, ##27144
0ab54     23 FA 05 A6 |  if_e	mov	result1, #35
0ab58     4C 01 90 AD |  if_e	jmp	#LR__0922
0ab5c     01 28 66 F6 | 	neg	local02, #1
0ab60                 | ' j=-1
0ab60                 | ' for i=0 to varnum-1
0ab60     00 2A 06 F6 | 	mov	local03, #0
0ab64     35 00 00 FF 
0ab68     08 E4 05 F1 | 	add	objptr, ##27144
0ab6c     F2 2C 02 FB | 	rdlong	local04, objptr
0ab70     35 00 00 FF 
0ab74     08 E4 85 F1 | 	sub	objptr, ##27144
0ab78                 | LR__0920
0ab78     16 2B 12 F2 | 	cmp	local03, local04 wc
0ab7c     38 00 90 3D |  if_ae	jmp	#LR__0921
0ab80                 | '   if variables(i).name=varname$ then j=i : exit
0ab80     15 15 02 F6 | 	mov	arg02, local03
0ab84     04 14 66 F0 | 	shl	arg02, #4
0ab88     14 00 00 FF 
0ab8c     F8 E5 05 F1 | 	add	objptr, ##10744
0ab90     F2 14 02 F1 | 	add	arg02, objptr
0ab94     0A 13 02 FB | 	rdlong	arg01, arg02
0ab98     13 15 02 F6 | 	mov	arg02, local01
0ab9c     14 00 00 FF 
0aba0     F8 E5 85 F1 | 	sub	objptr, ##10744
0aba4     C0 B3 B1 FD | 	call	#__system___string_cmp
0aba8     00 FA 0D F2 | 	cmp	result1, #0 wz
0abac     15 29 02 A6 |  if_e	mov	local02, local03
0abb0     01 2A 06 51 |  if_ne	add	local03, #1
0abb4     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0abb8                 | LR__0921
0abb8                 | ' if j=-1 then return 35
0abb8     FF FF 7F FF 
0abbc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0abc0     23 FA 05 A6 |  if_e	mov	result1, #35
0abc4     E0 00 90 AD |  if_e	jmp	#LR__0922
0abc8     4A 00 00 FF 
0abcc     7C E4 05 F1 | 	add	objptr, ##38012
0abd0     F2 2C 02 FB | 	rdlong	local04, objptr
0abd4     16 2B 02 F6 | 	mov	local03, local04
0abd8     01 2A 66 F0 | 	shl	local03, #1
0abdc     16 2B 02 F1 | 	add	local03, local04
0abe0     02 2A 66 F0 | 	shl	local03, #2
0abe4     03 00 00 FF 
0abe8     00 E4 85 F1 | 	sub	objptr, ##1536
0abec     F2 2A 02 F1 | 	add	local03, objptr
0abf0     08 2A 06 F1 | 	add	local03, #8
0abf4     15 39 68 FC | 	wrlong	#28, local03
0abf8     03 00 00 FF 
0abfc     00 E4 05 F1 | 	add	objptr, ##1536
0ac00     F2 2C 02 FB | 	rdlong	local04, objptr
0ac04     16 2B 02 F6 | 	mov	local03, local04
0ac08     01 2A 66 F0 | 	shl	local03, #1
0ac0c     16 2B 02 F1 | 	add	local03, local04
0ac10     02 2A 66 F0 | 	shl	local03, #2
0ac14     03 00 00 FF 
0ac18     00 E4 85 F1 | 	sub	objptr, ##1536
0ac1c     F2 2A 02 F1 | 	add	local03, objptr
0ac20     15 29 62 FC | 	wrlong	local02, local03
0ac24     03 00 00 FF 
0ac28     00 E4 05 F1 | 	add	objptr, ##1536
0ac2c     F2 2C 02 FB | 	rdlong	local04, objptr
0ac30     01 2C 06 F1 | 	add	local04, #1
0ac34     F2 2C 62 FC | 	wrlong	local04, objptr
0ac38     16 2B 02 F6 | 	mov	local03, local04
0ac3c     01 2A 66 F0 | 	shl	local03, #1
0ac40     16 2B 02 F1 | 	add	local03, local04
0ac44     02 2A 66 F0 | 	shl	local03, #2
0ac48     03 00 00 FF 
0ac4c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac50     F2 2A 02 F1 | 	add	local03, objptr
0ac54     08 2A 06 F1 | 	add	local03, #8
0ac58     15 97 68 FC | 	wrlong	#75, local03
0ac5c     03 00 00 FF 
0ac60     00 E4 05 F1 | 	add	objptr, ##1536
0ac64     F2 2C 02 FB | 	rdlong	local04, objptr
0ac68     16 2B 02 F6 | 	mov	local03, local04
0ac6c     01 2A 66 F0 | 	shl	local03, #1
0ac70     16 2B 02 F1 | 	add	local03, local04
0ac74     02 2A 66 F0 | 	shl	local03, #2
0ac78     03 00 00 FF 
0ac7c     00 E4 85 F1 | 	sub	objptr, ##1536
0ac80     F2 2A 02 F1 | 	add	local03, objptr
0ac84     15 01 68 FC | 	wrlong	#0, local03
0ac88     03 00 00 FF 
0ac8c     00 E4 05 F1 | 	add	objptr, ##1536
0ac90     F2 2C 02 FB | 	rdlong	local04, objptr
0ac94     01 2C 06 F1 | 	add	local04, #1
0ac98     F2 2C 62 FC | 	wrlong	local04, objptr
0ac9c     4A 00 00 FF 
0aca0     7C E4 85 F1 | 	sub	objptr, ##38012
0aca4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0aca4                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0aca4                 | ' return 0
0aca4     00 FA 05 F6 | 	mov	result1, #0
0aca8                 | LR__0922
0aca8     A7 F0 03 F6 | 	mov	ptra, fp
0acac     B2 00 A0 FD | 	call	#popregs_
0acb0                 | _compile_next_ret
0acb0     2D 00 64 FD | 	ret
0acb4                 | 
0acb4                 | ' 
0acb4                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0acb4                 | ' 
0acb4                 | ' function compile_gosub() as ulong
0acb4                 | _compile_gosub
0acb4     02 4A 05 F6 | 	mov	COUNT_, #2
0acb8     A8 00 A0 FD | 	call	#pushregs_
0acbc     4A 00 00 FF 
0acc0     7C E4 05 F1 | 	add	objptr, ##38012
0acc4     F2 26 02 FB | 	rdlong	local01, objptr
0acc8     13 29 02 F6 | 	mov	local02, local01
0accc     01 28 66 F0 | 	shl	local02, #1
0acd0     13 29 02 F1 | 	add	local02, local01
0acd4     02 28 66 F0 | 	shl	local02, #2
0acd8     03 00 00 FF 
0acdc     00 E4 85 F1 | 	sub	objptr, ##1536
0ace0     F2 28 02 F1 | 	add	local02, objptr
0ace4     08 28 06 F1 | 	add	local02, #8
0ace8     14 53 69 FC | 	wrlong	#169, local02
0acec     03 00 00 FF 
0acf0     00 E4 05 F1 | 	add	objptr, ##1536
0acf4     F2 28 02 FB | 	rdlong	local02, objptr
0acf8     01 28 06 F1 | 	add	local02, #1
0acfc     F2 28 62 FC | 	wrlong	local02, objptr
0ad00     4A 00 00 FF 
0ad04     7C E4 85 F1 | 	sub	objptr, ##38012
0ad08     0C 00 B0 FD | 	call	#_compile_goto
0ad0c                 | ' compiledline(lineptr).result_type=token_gosub
0ad0c                 | ' lineptr+=1
0ad0c                 | ' err=compile_goto()
0ad0c                 | ' return err
0ad0c     A7 F0 03 F6 | 	mov	ptra, fp
0ad10     B2 00 A0 FD | 	call	#popregs_
0ad14                 | _compile_gosub_ret
0ad14     2D 00 64 FD | 	ret
0ad18                 | 
0ad18                 | ' 
0ad18                 | ' '----- compile 'goto' 
0ad18                 | ' 
0ad18                 | ' function compile_goto() as ulong
0ad18                 | _compile_goto
0ad18     03 4A 05 F6 | 	mov	COUNT_, #3
0ad1c     A8 00 A0 FD | 	call	#pushregs_
0ad20     34 F0 07 F1 | 	add	ptra, #52
0ad24                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0ad24     37 00 00 FF 
0ad28     44 E4 05 F1 | 	add	objptr, ##28228
0ad2c     F2 16 02 FB | 	rdlong	arg03, objptr
0ad30     03 16 66 F0 | 	shl	arg03, #3
0ad34     02 00 00 FF 
0ad38     38 E4 85 F1 | 	sub	objptr, ##1080
0ad3c     F2 16 02 F1 | 	add	arg03, objptr
0ad40     04 16 06 F1 | 	add	arg03, #4
0ad44     0B 17 02 FB | 	rdlong	arg03, arg03
0ad48     01 00 00 FF 
0ad4c     00 16 0E F2 | 	cmp	arg03, ##512 wz
0ad50     35 00 00 FF 
0ad54     0C E4 85 F1 | 	sub	objptr, ##27148
0ad58     CC 02 90 5D |  if_ne	jmp	#LR__0935
0ad5c     37 00 00 FF 
0ad60     44 E4 05 F1 | 	add	objptr, ##28228
0ad64     F2 16 02 FB | 	rdlong	arg03, objptr
0ad68     01 16 06 F1 | 	add	arg03, #1
0ad6c     03 16 66 F0 | 	shl	arg03, #3
0ad70     02 00 00 FF 
0ad74     38 E4 85 F1 | 	sub	objptr, ##1080
0ad78     F2 16 02 F1 | 	add	arg03, objptr
0ad7c     04 16 06 F1 | 	add	arg03, #4
0ad80     0B 17 02 FB | 	rdlong	arg03, arg03
0ad84     FE 17 0E F2 | 	cmp	arg03, #510 wz
0ad88     35 00 00 FF 
0ad8c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad90     94 02 90 5D |  if_ne	jmp	#LR__0935
0ad94     37 00 00 FF 
0ad98     44 E4 05 F1 | 	add	objptr, ##28228
0ad9c     F2 16 02 FB | 	rdlong	arg03, objptr
0ada0     03 16 66 F0 | 	shl	arg03, #3
0ada4     02 00 00 FF 
0ada8     38 E4 85 F1 | 	sub	objptr, ##1080
0adac     F2 16 02 F1 | 	add	arg03, objptr
0adb0     0B 13 02 FB | 	rdlong	arg01, arg03
0adb4     00 14 06 F6 | 	mov	arg02, #0
0adb8     35 00 00 FF 
0adbc     0C E4 85 F1 | 	sub	objptr, ##27148
0adc0     70 E6 B1 FD | 	call	#__system____builtin_atoi
0adc4     04 4E 05 F1 | 	add	fp, #4
0adc8     A7 FA 61 FC | 	wrlong	result1, fp
0adcc     4A 00 00 FF 
0add0     7C E4 05 F1 | 	add	objptr, ##38012
0add4     F2 26 02 FB | 	rdlong	local01, objptr
0add8     13 29 02 F6 | 	mov	local02, local01
0addc     01 28 66 F0 | 	shl	local02, #1
0ade0     13 29 02 F1 | 	add	local02, local01
0ade4     02 28 66 F0 | 	shl	local02, #2
0ade8     03 00 00 FF 
0adec     00 E4 85 F1 | 	sub	objptr, ##1536
0adf0     F2 28 02 F1 | 	add	local02, objptr
0adf4     08 28 06 F1 | 	add	local02, #8
0adf8     14 9D 68 FC | 	wrlong	#78, local02
0adfc     03 00 00 FF 
0ae00     0C E4 05 F1 | 	add	objptr, ##1548
0ae04     F2 2A 02 FB | 	rdlong	local03, objptr
0ae08     4A 00 00 FF 
0ae0c     88 E4 85 F1 | 	sub	objptr, ##38024
0ae10     04 4E 05 F1 | 	add	fp, #4
0ae14     A7 2A 62 FC | 	wrlong	local03, fp
0ae18     08 4E 85 F1 | 	sub	fp, #8
0ae1c                 | '   gotoline=val%(lparts(ct).part$) 
0ae1c                 | '   compiledline(lineptr).result_type=token_fast_goto
0ae1c                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0ae1c                 | '   do
0ae1c                 | LR__0930
0ae1c     10 4E 05 F1 | 	add	fp, #16
0ae20     A7 12 02 F6 | 	mov	arg01, fp
0ae24     08 4E 85 F1 | 	sub	fp, #8
0ae28     A7 14 02 FB | 	rdlong	arg02, fp
0ae2c     08 4E 85 F1 | 	sub	fp, #8
0ae30     18 16 06 F6 | 	mov	arg03, #24
0ae34     0B 00 00 FF 
0ae38     CC E4 05 F1 | 	add	objptr, ##5836
0ae3c     78 A4 B1 FD | 	call	#_psram_spin2_read1
0ae40     0B 00 00 FF 
0ae44     CC E4 85 F1 | 	sub	objptr, ##5836
0ae48                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0ae48                 | '     if gotoheader(0)<>$FFFFFFFF then
0ae48     10 4E 05 F1 | 	add	fp, #16
0ae4c     A7 2A 02 FB | 	rdlong	local03, fp
0ae50     10 4E 85 F1 | 	sub	fp, #16
0ae54     FF FF 7F FF 
0ae58     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0ae5c     24 00 90 AD |  if_e	jmp	#LR__0931
0ae60     08 4E 05 F1 | 	add	fp, #8
0ae64     A7 2A 02 FB | 	rdlong	local03, fp
0ae68     04 4E 05 F1 | 	add	fp, #4
0ae6c     A7 2A 62 FC | 	wrlong	local03, fp
0ae70     18 4E 05 F1 | 	add	fp, #24
0ae74     A7 2A 02 FB | 	rdlong	local03, fp
0ae78     1C 4E 85 F1 | 	sub	fp, #28
0ae7c     A7 2A 62 FC | 	wrlong	local03, fp
0ae80     08 4E 85 F1 | 	sub	fp, #8
0ae84                 | LR__0931
0ae84     24 4E 05 F1 | 	add	fp, #36
0ae88     A7 2A 02 FB | 	rdlong	local03, fp
0ae8c     24 4E 85 F1 | 	sub	fp, #36
0ae90     FF FF 3F FF 
0ae94     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0ae98     10 4E 05 51 |  if_ne	add	fp, #16
0ae9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0aea0     10 4E 85 51 |  if_ne	sub	fp, #16
0aea4     FF FF 7F 5F 
0aea8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0aeac     1C 00 90 AD |  if_e	jmp	#LR__0932
0aeb0     10 4E 05 F1 | 	add	fp, #16
0aeb4     A7 2A 02 FB | 	rdlong	local03, fp
0aeb8     0C 4E 85 F1 | 	sub	fp, #12
0aebc     A7 28 02 FB | 	rdlong	local02, fp
0aec0     04 4E 85 F1 | 	sub	fp, #4
0aec4     14 2B 0A F2 | 	cmp	local03, local02 wz
0aec8     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0aecc                 | LR__0932
0aecc                 | '   if gotoheader(0)=gotoline then
0aecc     10 4E 05 F1 | 	add	fp, #16
0aed0     A7 2A 02 FB | 	rdlong	local03, fp
0aed4     0C 4E 85 F1 | 	sub	fp, #12
0aed8     A7 26 02 FB | 	rdlong	local01, fp
0aedc     04 4E 85 F1 | 	sub	fp, #4
0aee0     13 2B 0A F2 | 	cmp	local03, local01 wz
0aee4     7C 00 90 5D |  if_ne	jmp	#LR__0933
0aee8     4A 00 00 FF 
0aeec     7C E4 05 F1 | 	add	objptr, ##38012
0aef0     F2 26 02 FB | 	rdlong	local01, objptr
0aef4     13 29 02 F6 | 	mov	local02, local01
0aef8     01 28 66 F0 | 	shl	local02, #1
0aefc     13 29 02 F1 | 	add	local02, local01
0af00     02 28 66 F0 | 	shl	local02, #2
0af04     03 00 00 FF 
0af08     00 E4 85 F1 | 	sub	objptr, ##1536
0af0c     F2 28 02 F1 | 	add	local02, objptr
0af10     0C 4E 05 F1 | 	add	fp, #12
0af14     A7 2A 02 FB | 	rdlong	local03, fp
0af18     14 2B 62 FC | 	wrlong	local03, local02
0af1c     03 00 00 FF 
0af20     00 E4 05 F1 | 	add	objptr, ##1536
0af24     F2 26 02 FB | 	rdlong	local01, objptr
0af28     13 29 02 F6 | 	mov	local02, local01
0af2c     01 28 66 F0 | 	shl	local02, #1
0af30     13 29 02 F1 | 	add	local02, local01
0af34     02 28 66 F0 | 	shl	local02, #2
0af38     03 00 00 FF 
0af3c     00 E4 85 F1 | 	sub	objptr, ##1536
0af40     F2 28 02 F1 | 	add	local02, objptr
0af44     08 4E 85 F1 | 	sub	fp, #8
0af48     A7 2A 02 FB | 	rdlong	local03, fp
0af4c     04 4E 85 F1 | 	sub	fp, #4
0af50     04 28 06 F1 | 	add	local02, #4
0af54     14 2B 62 FC | 	wrlong	local03, local02
0af58     47 00 00 FF 
0af5c     7C E4 85 F1 | 	sub	objptr, ##36476
0af60     A4 00 90 FD | 	jmp	#LR__0934
0af64                 | LR__0933
0af64     4A 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##38012
0af6c     F2 26 02 FB | 	rdlong	local01, objptr
0af70     13 29 02 F6 | 	mov	local02, local01
0af74     01 28 66 F0 | 	shl	local02, #1
0af78     13 29 02 F1 | 	add	local02, local01
0af7c     02 28 66 F0 | 	shl	local02, #2
0af80     03 00 00 FF 
0af84     00 E4 85 F1 | 	sub	objptr, ##1536
0af88     F2 28 02 F1 | 	add	local02, objptr
0af8c     00 00 C0 FF 
0af90     14 01 68 FC | 	wrlong	##-2147483648, local02
0af94     03 00 00 FF 
0af98     00 E4 05 F1 | 	add	objptr, ##1536
0af9c     F2 26 02 FB | 	rdlong	local01, objptr
0afa0     13 29 02 F6 | 	mov	local02, local01
0afa4     01 28 66 F0 | 	shl	local02, #1
0afa8     13 29 02 F1 | 	add	local02, local01
0afac     02 28 66 F0 | 	shl	local02, #2
0afb0     03 00 00 FF 
0afb4     00 E4 85 F1 | 	sub	objptr, ##1536
0afb8     F2 28 02 F1 | 	add	local02, objptr
0afbc     04 4E 05 F1 | 	add	fp, #4
0afc0     A7 2A 02 FB | 	rdlong	local03, fp
0afc4     04 4E 85 F1 | 	sub	fp, #4
0afc8     04 28 06 F1 | 	add	local02, #4
0afcc     14 2B 62 FC | 	wrlong	local03, local02
0afd0     03 00 00 FF 
0afd4     00 E4 05 F1 | 	add	objptr, ##1536
0afd8     F2 26 02 FB | 	rdlong	local01, objptr
0afdc     13 29 02 F6 | 	mov	local02, local01
0afe0     01 28 66 F0 | 	shl	local02, #1
0afe4     13 29 02 F1 | 	add	local02, local01
0afe8     02 28 66 F0 | 	shl	local02, #2
0afec     03 00 00 FF 
0aff0     00 E4 85 F1 | 	sub	objptr, ##1536
0aff4     F2 28 02 F1 | 	add	local02, objptr
0aff8     08 28 06 F1 | 	add	local02, #8
0affc     14 A7 68 FC | 	wrlong	#83, local02
0b000     47 00 00 FF 
0b004     7C E4 85 F1 | 	sub	objptr, ##36476
0b008                 | LR__0934
0b008     4A 00 00 FF 
0b00c     7C E4 05 F1 | 	add	objptr, ##38012
0b010     F2 2A 02 FB | 	rdlong	local03, objptr
0b014     01 2A 06 F1 | 	add	local03, #1
0b018     F2 2A 62 FC | 	wrlong	local03, objptr
0b01c     4A 00 00 FF 
0b020     7C E4 85 F1 | 	sub	objptr, ##38012
0b024     D0 00 90 FD | 	jmp	#LR__0936
0b028                 | LR__0935
0b028     98 0A B0 FD | 	call	#_expr
0b02c     30 4E 05 F1 | 	add	fp, #48
0b030     A7 9E 68 FC | 	wrlong	#79, fp
0b034     08 4E 85 F1 | 	sub	fp, #8
0b038     A7 00 68 FC | 	wrlong	#0, fp
0b03c     04 4E 05 F1 | 	add	fp, #4
0b040     A7 2A 02 FB | 	rdlong	local03, fp
0b044     04 4E 05 F1 | 	add	fp, #4
0b048     A7 26 02 FB | 	rdlong	local01, fp
0b04c     30 4E 85 F1 | 	sub	fp, #48
0b050     4A 00 00 FF 
0b054     7C E4 05 F1 | 	add	objptr, ##38012
0b058     F2 28 02 FB | 	rdlong	local02, objptr
0b05c     14 17 02 F6 | 	mov	arg03, local02
0b060     01 16 66 F0 | 	shl	arg03, #1
0b064     14 17 02 F1 | 	add	arg03, local02
0b068     02 16 66 F0 | 	shl	arg03, #2
0b06c     03 00 00 FF 
0b070     00 E4 85 F1 | 	sub	objptr, ##1536
0b074     F2 16 02 F1 | 	add	arg03, objptr
0b078     0B 01 68 FC | 	wrlong	#0, arg03
0b07c     03 00 00 FF 
0b080     00 E4 05 F1 | 	add	objptr, ##1536
0b084     F2 28 02 FB | 	rdlong	local02, objptr
0b088     14 17 02 F6 | 	mov	arg03, local02
0b08c     01 16 66 F0 | 	shl	arg03, #1
0b090     14 17 02 F1 | 	add	arg03, local02
0b094     02 16 66 F0 | 	shl	arg03, #2
0b098     03 00 00 FF 
0b09c     00 E4 85 F1 | 	sub	objptr, ##1536
0b0a0     F2 16 02 F1 | 	add	arg03, objptr
0b0a4     04 16 06 F1 | 	add	arg03, #4
0b0a8     0B 2B 62 FC | 	wrlong	local03, arg03
0b0ac     03 00 00 FF 
0b0b0     00 E4 05 F1 | 	add	objptr, ##1536
0b0b4     F2 2A 02 FB | 	rdlong	local03, objptr
0b0b8     15 29 02 F6 | 	mov	local02, local03
0b0bc     01 28 66 F0 | 	shl	local02, #1
0b0c0     15 29 02 F1 | 	add	local02, local03
0b0c4     02 28 66 F0 | 	shl	local02, #2
0b0c8     03 00 00 FF 
0b0cc     00 E4 85 F1 | 	sub	objptr, ##1536
0b0d0     F2 28 02 F1 | 	add	local02, objptr
0b0d4     08 28 06 F1 | 	add	local02, #8
0b0d8     14 27 62 FC | 	wrlong	local01, local02
0b0dc     03 00 00 FF 
0b0e0     00 E4 05 F1 | 	add	objptr, ##1536
0b0e4     F2 2A 02 FB | 	rdlong	local03, objptr
0b0e8     01 2A 06 F1 | 	add	local03, #1
0b0ec     F2 2A 62 FC | 	wrlong	local03, objptr
0b0f0     4A 00 00 FF 
0b0f4     7C E4 85 F1 | 	sub	objptr, ##38012
0b0f8                 | LR__0936
0b0f8                 | ' return 0
0b0f8     00 FA 05 F6 | 	mov	result1, #0
0b0fc     A7 F0 03 F6 | 	mov	ptra, fp
0b100     B2 00 A0 FD | 	call	#popregs_
0b104                 | _compile_goto_ret
0b104     2D 00 64 FD | 	ret
0b108                 | 
0b108                 | ' 
0b108                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b108                 | ' 
0b108                 | ' function compile_on() as ulong
0b108                 | _compile_on
0b108     04 4A 05 F6 | 	mov	COUNT_, #4
0b10c     A8 00 A0 FD | 	call	#pushregs_
0b110     B0 09 B0 FD | 	call	#_expr
0b114     00 26 06 F6 | 	mov	local01, #0
0b118     4A 00 00 FF 
0b11c     7C E4 05 F1 | 	add	objptr, ##38012
0b120     F2 14 02 FB | 	rdlong	arg02, objptr
0b124     0A 13 02 F6 | 	mov	arg01, arg02
0b128     01 12 66 F0 | 	shl	arg01, #1
0b12c     0A 13 02 F1 | 	add	arg01, arg02
0b130     02 12 66 F0 | 	shl	arg01, #2
0b134     03 00 00 FF 
0b138     00 E4 85 F1 | 	sub	objptr, ##1536
0b13c     F2 12 02 F1 | 	add	arg01, objptr
0b140     08 12 06 F1 | 	add	arg01, #8
0b144     09 83 69 FC | 	wrlong	#193, arg01
0b148     03 00 00 FF 
0b14c     00 E4 05 F1 | 	add	objptr, ##1536
0b150     F2 14 02 FB | 	rdlong	arg02, objptr
0b154     0A 29 02 F6 | 	mov	local02, arg02
0b158     01 14 06 F1 | 	add	arg02, #1
0b15c     F2 14 62 FC | 	wrlong	arg02, objptr
0b160                 | ' expr()
0b160                 | ' 'print lparts(ct).part$ 'ok
0b160                 | ' numpar=0
0b160                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b160                 | ' if lparts(ct).part$="goto" then
0b160     13 00 00 FF 
0b164     38 E4 85 F1 | 	sub	objptr, ##9784
0b168     F2 14 02 FB | 	rdlong	arg02, objptr
0b16c     03 14 66 F0 | 	shl	arg02, #3
0b170     02 00 00 FF 
0b174     38 E4 85 F1 | 	sub	objptr, ##1080
0b178     F2 14 02 F1 | 	add	arg02, objptr
0b17c     0A 13 02 FB | 	rdlong	arg01, arg02
0b180     B0 01 00 FF 
0b184     A0 15 06 F6 | 	mov	arg02, ##@LR__5800
0b188     35 00 00 FF 
0b18c     0C E4 85 F1 | 	sub	objptr, ##27148
0b190     D4 AD B1 FD | 	call	#__system___string_cmp
0b194     00 FA 0D F2 | 	cmp	result1, #0 wz
0b198     14 02 90 5D |  if_ne	jmp	#LR__0945
0b19c     37 00 00 FF 
0b1a0     44 E4 05 F1 | 	add	objptr, ##28228
0b1a4     F2 2A 02 FB | 	rdlong	local03, objptr
0b1a8     37 00 00 FF 
0b1ac     44 E4 85 F1 | 	sub	objptr, ##28228
0b1b0     01 2A 06 F1 | 	add	local03, #1
0b1b4                 | '   i=ct+1
0b1b4                 | '   do
0b1b4                 | LR__0940
0b1b4                 | '     if lparts(i).token=token_decimal then
0b1b4     15 FB 01 F6 | 	mov	result1, local03
0b1b8     03 FA 65 F0 | 	shl	result1, #3
0b1bc     35 00 00 FF 
0b1c0     0C E4 05 F1 | 	add	objptr, ##27148
0b1c4     F2 FA 01 F1 | 	add	result1, objptr
0b1c8     04 FA 05 F1 | 	add	result1, #4
0b1cc     FD FA 01 FB | 	rdlong	result1, result1
0b1d0     01 00 00 FF 
0b1d4     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b1d8     35 00 00 FF 
0b1dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b1e0     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b1e4     4A 00 00 FF 
0b1e8     7C E4 05 F1 | 	add	objptr, ##38012
0b1ec     F2 FA 01 FB | 	rdlong	result1, objptr
0b1f0     FD 14 02 F6 | 	mov	arg02, result1
0b1f4     01 14 66 F0 | 	shl	arg02, #1
0b1f8     FD 14 02 F1 | 	add	arg02, result1
0b1fc     02 14 66 F0 | 	shl	arg02, #2
0b200     03 00 00 FF 
0b204     00 E4 85 F1 | 	sub	objptr, ##1536
0b208     F2 14 02 F1 | 	add	arg02, objptr
0b20c     00 00 C0 FF 
0b210     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b214     03 00 00 FF 
0b218     00 E4 05 F1 | 	add	objptr, ##1536
0b21c     F2 14 02 FB | 	rdlong	arg02, objptr
0b220     0A 2D 02 F6 | 	mov	local04, arg02
0b224     01 2C 66 F0 | 	shl	local04, #1
0b228     0A 2D 02 F1 | 	add	local04, arg02
0b22c     02 2C 66 F0 | 	shl	local04, #2
0b230     03 00 00 FF 
0b234     00 E4 85 F1 | 	sub	objptr, ##1536
0b238     F2 2C 02 F1 | 	add	local04, objptr
0b23c     15 15 02 F6 | 	mov	arg02, local03
0b240     03 14 66 F0 | 	shl	arg02, #3
0b244     12 00 00 FF 
0b248     70 E4 85 F1 | 	sub	objptr, ##9328
0b24c     F2 14 02 F1 | 	add	arg02, objptr
0b250     0A 13 02 FB | 	rdlong	arg01, arg02
0b254     00 14 06 F6 | 	mov	arg02, #0
0b258     35 00 00 FF 
0b25c     0C E4 85 F1 | 	sub	objptr, ##27148
0b260     D0 E1 B1 FD | 	call	#__system____builtin_atoi
0b264     04 2C 06 F1 | 	add	local04, #4
0b268     16 FB 61 FC | 	wrlong	result1, local04
0b26c     4A 00 00 FF 
0b270     7C E4 05 F1 | 	add	objptr, ##38012
0b274     F2 14 02 FB | 	rdlong	arg02, objptr
0b278     0A 2D 02 F6 | 	mov	local04, arg02
0b27c     01 2C 66 F0 | 	shl	local04, #1
0b280     0A 2D 02 F1 | 	add	local04, arg02
0b284     02 2C 66 F0 | 	shl	local04, #2
0b288     03 00 00 FF 
0b28c     00 E4 85 F1 | 	sub	objptr, ##1536
0b290     F2 2C 02 F1 | 	add	local04, objptr
0b294     08 2C 06 F1 | 	add	local04, #8
0b298     16 A7 68 FC | 	wrlong	#83, local04
0b29c     03 00 00 FF 
0b2a0     00 E4 05 F1 | 	add	objptr, ##1536
0b2a4     F2 2C 02 FB | 	rdlong	local04, objptr
0b2a8     01 2C 06 F1 | 	add	local04, #1
0b2ac     F2 2C 62 FC | 	wrlong	local04, objptr
0b2b0     4A 00 00 FF 
0b2b4     7C E4 85 F1 | 	sub	objptr, ##38012
0b2b8     01 26 06 F1 | 	add	local01, #1
0b2bc     08 00 90 FD | 	jmp	#LR__0942
0b2c0                 | LR__0941
0b2c0                 | '       return 17
0b2c0     11 FA 05 F6 | 	mov	result1, #17
0b2c4     5C 04 90 FD | 	jmp	#LR__0955
0b2c8                 | LR__0942
0b2c8     01 2A 06 F1 | 	add	local03, #1
0b2cc                 | '     i+=1
0b2cc                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b2cc     15 2D 02 F6 | 	mov	local04, local03
0b2d0     03 2C 66 F0 | 	shl	local04, #3
0b2d4     35 00 00 FF 
0b2d8     0C E4 05 F1 | 	add	objptr, ##27148
0b2dc     F2 2C 02 F1 | 	add	local04, objptr
0b2e0     04 2C 06 F1 | 	add	local04, #4
0b2e4     16 2D 02 FB | 	rdlong	local04, local04
0b2e8     11 2C 0E F2 | 	cmp	local04, #17 wz
0b2ec     35 00 00 FF 
0b2f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b2f4     30 00 90 AD |  if_e	jmp	#LR__0943
0b2f8     15 2D 02 F6 | 	mov	local04, local03
0b2fc     03 2C 66 F0 | 	shl	local04, #3
0b300     35 00 00 FF 
0b304     0C E4 05 F1 | 	add	objptr, ##27148
0b308     F2 2C 02 F1 | 	add	local04, objptr
0b30c     04 2C 06 F1 | 	add	local04, #4
0b310     16 2D 02 FB | 	rdlong	local04, local04
0b314     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b318     35 00 00 FF 
0b31c     0C E4 85 F1 | 	sub	objptr, ##27148
0b320     15 FA 05 56 |  if_ne	mov	result1, #21
0b324     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b328                 | LR__0943
0b328                 | '     if lparts(i).token=token_end then exit loop
0b328     15 2D 02 F6 | 	mov	local04, local03
0b32c     03 2C 66 F0 | 	shl	local04, #3
0b330     35 00 00 FF 
0b334     0C E4 05 F1 | 	add	objptr, ##27148
0b338     F2 2C 02 F1 | 	add	local04, objptr
0b33c     04 2C 06 F1 | 	add	local04, #4
0b340     16 2D 02 FB | 	rdlong	local04, local04
0b344     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b348     35 00 00 FF 
0b34c     0C E4 85 F1 | 	sub	objptr, ##27148
0b350     30 00 90 AD |  if_e	jmp	#LR__0944
0b354     01 2A 06 F1 | 	add	local03, #1
0b358     15 2D 02 F6 | 	mov	local04, local03
0b35c     03 2C 66 F0 | 	shl	local04, #3
0b360     35 00 00 FF 
0b364     0C E4 05 F1 | 	add	objptr, ##27148
0b368     F2 2C 02 F1 | 	add	local04, objptr
0b36c     04 2C 06 F1 | 	add	local04, #4
0b370     16 2D 02 FB | 	rdlong	local04, local04
0b374     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b378     35 00 00 FF 
0b37c     0C E4 85 F1 | 	sub	objptr, ##27148
0b380     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b384                 | LR__0944
0b384     14 2D 02 F6 | 	mov	local04, local02
0b388     01 2C 66 F0 | 	shl	local04, #1
0b38c     14 2D 02 F1 | 	add	local04, local02
0b390     02 2C 66 F0 | 	shl	local04, #2
0b394     47 00 00 FF 
0b398     7C E4 05 F1 | 	add	objptr, ##36476
0b39c     F2 2C 02 F1 | 	add	local04, objptr
0b3a0     04 2C 06 F1 | 	add	local04, #4
0b3a4     16 03 68 FC | 	wrlong	#1, local04
0b3a8     47 00 00 FF 
0b3ac     7C E4 85 F1 | 	sub	objptr, ##36476
0b3b0                 | LR__0945
0b3b0                 | ' 
0b3b0                 | ' if lparts(ct).part$="gosub" then
0b3b0     37 00 00 FF 
0b3b4     44 E4 05 F1 | 	add	objptr, ##28228
0b3b8     F2 2A 02 FB | 	rdlong	local03, objptr
0b3bc     03 2A 66 F0 | 	shl	local03, #3
0b3c0     02 00 00 FF 
0b3c4     38 E4 85 F1 | 	sub	objptr, ##1080
0b3c8     F2 2A 02 F1 | 	add	local03, objptr
0b3cc     15 13 02 FB | 	rdlong	arg01, local03
0b3d0     B0 01 00 FF 
0b3d4     A5 15 06 F6 | 	mov	arg02, ##@LR__5801
0b3d8     35 00 00 FF 
0b3dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b3e0     84 AB B1 FD | 	call	#__system___string_cmp
0b3e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b3e8     84 02 90 5D |  if_ne	jmp	#LR__0951
0b3ec     37 00 00 FF 
0b3f0     44 E4 05 F1 | 	add	objptr, ##28228
0b3f4     F2 2A 02 FB | 	rdlong	local03, objptr
0b3f8     37 00 00 FF 
0b3fc     44 E4 85 F1 | 	sub	objptr, ##28228
0b400     01 2A 06 F1 | 	add	local03, #1
0b404                 | '   i=ct+1
0b404                 | '   do
0b404                 | LR__0946
0b404                 | '     if lparts(i).token=token_decimal then
0b404     15 2D 02 F6 | 	mov	local04, local03
0b408     03 2C 66 F0 | 	shl	local04, #3
0b40c     35 00 00 FF 
0b410     0C E4 05 F1 | 	add	objptr, ##27148
0b414     F2 2C 02 F1 | 	add	local04, objptr
0b418     04 2C 06 F1 | 	add	local04, #4
0b41c     16 2D 02 FB | 	rdlong	local04, local04
0b420     01 00 00 FF 
0b424     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b428     35 00 00 FF 
0b42c     0C E4 85 F1 | 	sub	objptr, ##27148
0b430     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b434     4A 00 00 FF 
0b438     7C E4 05 F1 | 	add	objptr, ##38012
0b43c     F2 FA 01 FB | 	rdlong	result1, objptr
0b440     FD 2C 02 F6 | 	mov	local04, result1
0b444     01 2C 66 F0 | 	shl	local04, #1
0b448     FD 2C 02 F1 | 	add	local04, result1
0b44c     02 2C 66 F0 | 	shl	local04, #2
0b450     03 00 00 FF 
0b454     00 E4 85 F1 | 	sub	objptr, ##1536
0b458     F2 2C 02 F1 | 	add	local04, objptr
0b45c     08 2C 06 F1 | 	add	local04, #8
0b460     16 53 69 FC | 	wrlong	#169, local04
0b464     03 00 00 FF 
0b468     00 E4 05 F1 | 	add	objptr, ##1536
0b46c     F2 FA 01 FB | 	rdlong	result1, objptr
0b470     01 FA 05 F1 | 	add	result1, #1
0b474     F2 FA 61 FC | 	wrlong	result1, objptr
0b478     FD 2C 02 F6 | 	mov	local04, result1
0b47c     01 2C 66 F0 | 	shl	local04, #1
0b480     FD 2C 02 F1 | 	add	local04, result1
0b484     02 2C 66 F0 | 	shl	local04, #2
0b488     03 00 00 FF 
0b48c     00 E4 85 F1 | 	sub	objptr, ##1536
0b490     F2 2C 02 F1 | 	add	local04, objptr
0b494     00 00 C0 FF 
0b498     16 01 68 FC | 	wrlong	##-2147483648, local04
0b49c     03 00 00 FF 
0b4a0     00 E4 05 F1 | 	add	objptr, ##1536
0b4a4     F2 FA 01 FB | 	rdlong	result1, objptr
0b4a8     FD 2C 02 F6 | 	mov	local04, result1
0b4ac     01 2C 66 F0 | 	shl	local04, #1
0b4b0     FD 2C 02 F1 | 	add	local04, result1
0b4b4     02 2C 66 F0 | 	shl	local04, #2
0b4b8     03 00 00 FF 
0b4bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c0     F2 2C 02 F1 | 	add	local04, objptr
0b4c4     15 13 02 F6 | 	mov	arg01, local03
0b4c8     03 12 66 F0 | 	shl	arg01, #3
0b4cc     12 00 00 FF 
0b4d0     70 E4 85 F1 | 	sub	objptr, ##9328
0b4d4     F2 12 02 F1 | 	add	arg01, objptr
0b4d8     09 13 02 FB | 	rdlong	arg01, arg01
0b4dc     00 14 06 F6 | 	mov	arg02, #0
0b4e0     35 00 00 FF 
0b4e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4e8     48 DF B1 FD | 	call	#__system____builtin_atoi
0b4ec     04 2C 06 F1 | 	add	local04, #4
0b4f0     16 FB 61 FC | 	wrlong	result1, local04
0b4f4     4A 00 00 FF 
0b4f8     7C E4 05 F1 | 	add	objptr, ##38012
0b4fc     F2 12 02 FB | 	rdlong	arg01, objptr
0b500     09 2D 02 F6 | 	mov	local04, arg01
0b504     01 2C 66 F0 | 	shl	local04, #1
0b508     09 2D 02 F1 | 	add	local04, arg01
0b50c     02 2C 66 F0 | 	shl	local04, #2
0b510     03 00 00 FF 
0b514     00 E4 85 F1 | 	sub	objptr, ##1536
0b518     F2 2C 02 F1 | 	add	local04, objptr
0b51c     08 2C 06 F1 | 	add	local04, #8
0b520     16 A7 68 FC | 	wrlong	#83, local04
0b524     03 00 00 FF 
0b528     00 E4 05 F1 | 	add	objptr, ##1536
0b52c     F2 12 02 FB | 	rdlong	arg01, objptr
0b530     01 12 06 F1 | 	add	arg01, #1
0b534     F2 12 62 FC | 	wrlong	arg01, objptr
0b538     01 26 06 F1 | 	add	local01, #1
0b53c     09 2D 02 F6 | 	mov	local04, arg01
0b540     01 2C 66 F0 | 	shl	local04, #1
0b544     09 2D 02 F1 | 	add	local04, arg01
0b548     02 2C 66 F0 | 	shl	local04, #2
0b54c     03 00 00 FF 
0b550     00 E4 85 F1 | 	sub	objptr, ##1536
0b554     F2 2C 02 F1 | 	add	local04, objptr
0b558     08 2C 06 F1 | 	add	local04, #8
0b55c     16 5B 68 FC | 	wrlong	#45, local04
0b560     03 00 00 FF 
0b564     00 E4 05 F1 | 	add	objptr, ##1536
0b568     F2 2C 02 FB | 	rdlong	local04, objptr
0b56c     01 2C 06 F1 | 	add	local04, #1
0b570     F2 2C 62 FC | 	wrlong	local04, objptr
0b574     4A 00 00 FF 
0b578     7C E4 85 F1 | 	sub	objptr, ##38012
0b57c     08 00 90 FD | 	jmp	#LR__0948
0b580                 | LR__0947
0b580                 | '       return 17
0b580     11 FA 05 F6 | 	mov	result1, #17
0b584     9C 01 90 FD | 	jmp	#LR__0955
0b588                 | LR__0948
0b588     01 2A 06 F1 | 	add	local03, #1
0b58c                 | '     i+=1
0b58c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b58c     15 2D 02 F6 | 	mov	local04, local03
0b590     03 2C 66 F0 | 	shl	local04, #3
0b594     35 00 00 FF 
0b598     0C E4 05 F1 | 	add	objptr, ##27148
0b59c     F2 2C 02 F1 | 	add	local04, objptr
0b5a0     04 2C 06 F1 | 	add	local04, #4
0b5a4     16 2D 02 FB | 	rdlong	local04, local04
0b5a8     11 2C 0E F2 | 	cmp	local04, #17 wz
0b5ac     35 00 00 FF 
0b5b0     0C E4 85 F1 | 	sub	objptr, ##27148
0b5b4     30 00 90 AD |  if_e	jmp	#LR__0949
0b5b8     15 2D 02 F6 | 	mov	local04, local03
0b5bc     03 2C 66 F0 | 	shl	local04, #3
0b5c0     35 00 00 FF 
0b5c4     0C E4 05 F1 | 	add	objptr, ##27148
0b5c8     F2 2C 02 F1 | 	add	local04, objptr
0b5cc     04 2C 06 F1 | 	add	local04, #4
0b5d0     16 2D 02 FB | 	rdlong	local04, local04
0b5d4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5d8     35 00 00 FF 
0b5dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b5e0     15 FA 05 56 |  if_ne	mov	result1, #21
0b5e4     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b5e8                 | LR__0949
0b5e8                 | '     if lparts(i).token=token_end then exit loop
0b5e8     15 2D 02 F6 | 	mov	local04, local03
0b5ec     03 2C 66 F0 | 	shl	local04, #3
0b5f0     35 00 00 FF 
0b5f4     0C E4 05 F1 | 	add	objptr, ##27148
0b5f8     F2 2C 02 F1 | 	add	local04, objptr
0b5fc     04 2C 06 F1 | 	add	local04, #4
0b600     16 2D 02 FB | 	rdlong	local04, local04
0b604     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b608     35 00 00 FF 
0b60c     0C E4 85 F1 | 	sub	objptr, ##27148
0b610     30 00 90 AD |  if_e	jmp	#LR__0950
0b614     01 2A 06 F1 | 	add	local03, #1
0b618     15 2D 02 F6 | 	mov	local04, local03
0b61c     03 2C 66 F0 | 	shl	local04, #3
0b620     35 00 00 FF 
0b624     0C E4 05 F1 | 	add	objptr, ##27148
0b628     F2 2C 02 F1 | 	add	local04, objptr
0b62c     04 2C 06 F1 | 	add	local04, #4
0b630     16 2D 02 FB | 	rdlong	local04, local04
0b634     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b638     35 00 00 FF 
0b63c     0C E4 85 F1 | 	sub	objptr, ##27148
0b640     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b644                 | LR__0950
0b644     14 2D 02 F6 | 	mov	local04, local02
0b648     01 2C 66 F0 | 	shl	local04, #1
0b64c     14 2D 02 F1 | 	add	local04, local02
0b650     02 2C 66 F0 | 	shl	local04, #2
0b654     47 00 00 FF 
0b658     7C E4 05 F1 | 	add	objptr, ##36476
0b65c     F2 2C 02 F1 | 	add	local04, objptr
0b660     04 2C 06 F1 | 	add	local04, #4
0b664     16 07 68 FC | 	wrlong	#3, local04
0b668     47 00 00 FF 
0b66c     7C E4 85 F1 | 	sub	objptr, ##36476
0b670                 | LR__0951
0b670     14 2B 02 F6 | 	mov	local03, local02
0b674     01 2A 66 F0 | 	shl	local03, #1
0b678     14 2B 02 F1 | 	add	local03, local02
0b67c     02 2A 66 F0 | 	shl	local03, #2
0b680     47 00 00 FF 
0b684     7C E4 05 F1 | 	add	objptr, ##36476
0b688     F2 2A 02 F1 | 	add	local03, objptr
0b68c     15 27 62 FC | 	wrlong	local01, local03
0b690                 | ' compiledline(onlineptr).result.uresult=numpar
0b690                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b690     03 00 00 FF 
0b694     00 E4 05 F1 | 	add	objptr, ##1536
0b698     F2 2A 02 FB | 	rdlong	local03, objptr
0b69c     4A 00 00 FF 
0b6a0     7C E4 85 F1 | 	sub	objptr, ##38012
0b6a4     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b6a8                 | LR__0952
0b6a8     15 2D 02 F6 | 	mov	local04, local03
0b6ac     01 2C 66 F0 | 	shl	local04, #1
0b6b0     15 2D 02 F1 | 	add	local04, local03
0b6b4     02 2C 66 F0 | 	shl	local04, #2
0b6b8     47 00 00 FF 
0b6bc     7C E4 05 F1 | 	add	objptr, ##36476
0b6c0     F2 2C 02 F1 | 	add	local04, objptr
0b6c4     08 2C 06 F1 | 	add	local04, #8
0b6c8     16 2D 02 FB | 	rdlong	local04, local04
0b6cc     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b6d0     47 00 00 FF 
0b6d4     7C E4 85 F1 | 	sub	objptr, ##36476
0b6d8     38 00 90 5D |  if_ne	jmp	#LR__0953
0b6dc     15 2D 02 F6 | 	mov	local04, local03
0b6e0     01 2C 66 F0 | 	shl	local04, #1
0b6e4     15 2D 02 F1 | 	add	local04, local03
0b6e8     02 2C 66 F0 | 	shl	local04, #2
0b6ec     47 00 00 FF 
0b6f0     7C E4 05 F1 | 	add	objptr, ##36476
0b6f4     F2 2C 02 F1 | 	add	local04, objptr
0b6f8     03 00 00 FF 
0b6fc     00 E4 05 F1 | 	add	objptr, ##1536
0b700     F2 26 02 FB | 	rdlong	local01, objptr
0b704     4A 00 00 FF 
0b708     7C E4 85 F1 | 	sub	objptr, ##38012
0b70c     02 26 86 F1 | 	sub	local01, #2
0b710     16 27 62 FC | 	wrlong	local01, local04
0b714                 | LR__0953
0b714     01 2A 86 F1 | 	sub	local03, #1
0b718     14 2B 52 F2 | 	cmps	local03, local02 wc
0b71c     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0b720                 | LR__0954
0b720                 | ' return 0
0b720     00 FA 05 F6 | 	mov	result1, #0
0b724                 | LR__0955
0b724     A7 F0 03 F6 | 	mov	ptra, fp
0b728     B2 00 A0 FD | 	call	#popregs_
0b72c                 | _compile_on_ret
0b72c     2D 00 64 FD | 	ret
0b730                 | 
0b730                 | ' 
0b730                 | ' '----- A helper for compile_input and compile_read
0b730                 | '  
0b730                 | ' function getaddr() as ulong
0b730                 | _getaddr
0b730     0B 4A 05 F6 | 	mov	COUNT_, #11
0b734     A8 00 A0 FD | 	call	#pushregs_
0b738     37 00 00 FF 
0b73c     44 E4 05 F1 | 	add	objptr, ##28228
0b740     F2 2C 02 FB | 	rdlong	local04, objptr
0b744     03 2C 66 F0 | 	shl	local04, #3
0b748     02 00 00 FF 
0b74c     38 E4 85 F1 | 	sub	objptr, ##1080
0b750     F2 2C 02 F1 | 	add	local04, objptr
0b754     16 2F 02 FB | 	rdlong	local05, local04
0b758     01 30 66 F6 | 	neg	local06, #1
0b75c                 | ' 
0b75c                 | ' varname$=lparts(ct).part$
0b75c                 | ' j=-1
0b75c                 | ' 
0b75c                 | ' for i=0 to varnum-1
0b75c     00 32 06 F6 | 	mov	local07, #0
0b760     04 E4 85 F1 | 	sub	objptr, #4
0b764     F2 34 02 FB | 	rdlong	local08, objptr
0b768     35 00 00 FF 
0b76c     08 E4 85 F1 | 	sub	objptr, ##27144
0b770                 | LR__0960
0b770     1A 33 52 F2 | 	cmps	local07, local08 wc
0b774     38 00 90 3D |  if_ae	jmp	#LR__0961
0b778                 | '   if variables(i).name=varname$ then j=i : exit
0b778     19 2D 02 F6 | 	mov	local04, local07
0b77c     04 2C 66 F0 | 	shl	local04, #4
0b780     14 00 00 FF 
0b784     F8 E5 05 F1 | 	add	objptr, ##10744
0b788     F2 2C 02 F1 | 	add	local04, objptr
0b78c     16 13 02 FB | 	rdlong	arg01, local04
0b790     17 15 02 F6 | 	mov	arg02, local05
0b794     14 00 00 FF 
0b798     F8 E5 85 F1 | 	sub	objptr, ##10744
0b79c     C8 A7 B1 FD | 	call	#__system___string_cmp
0b7a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0b7a4     19 31 02 A6 |  if_e	mov	local06, local07
0b7a8     01 32 06 51 |  if_ne	add	local07, #1
0b7ac     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0b7b0                 | LR__0961
0b7b0                 | ' if  j=-1 andalso varnum<maxvars then   
0b7b0     FF FF 7F FF 
0b7b4     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0b7b8     A8 00 90 5D |  if_ne	jmp	#LR__0962
0b7bc     35 00 00 FF 
0b7c0     08 E4 05 F1 | 	add	objptr, ##27144
0b7c4     F2 34 02 FB | 	rdlong	local08, objptr
0b7c8     35 00 00 FF 
0b7cc     08 E4 85 F1 | 	sub	objptr, ##27144
0b7d0     02 00 00 FF 
0b7d4     00 34 56 F2 | 	cmps	local08, ##1024 wc
0b7d8     88 00 90 3D |  if_ae	jmp	#LR__0962
0b7dc     35 00 00 FF 
0b7e0     08 E4 05 F1 | 	add	objptr, ##27144
0b7e4     F2 2C 02 FB | 	rdlong	local04, objptr
0b7e8     04 2C 66 F0 | 	shl	local04, #4
0b7ec     20 00 00 FF 
0b7f0     10 E4 85 F1 | 	sub	objptr, ##16400
0b7f4     F2 2C 02 F1 | 	add	local04, objptr
0b7f8     16 2F 62 FC | 	wrlong	local05, local04
0b7fc     20 00 00 FF 
0b800     10 E4 05 F1 | 	add	objptr, ##16400
0b804     F2 2C 02 FB | 	rdlong	local04, objptr
0b808     04 2C 66 F0 | 	shl	local04, #4
0b80c     20 00 00 FF 
0b810     10 E4 85 F1 | 	sub	objptr, ##16400
0b814     F2 2C 02 F1 | 	add	local04, objptr
0b818     04 2C 06 F1 | 	add	local04, #4
0b81c     16 01 68 FC | 	wrlong	#0, local04
0b820     20 00 00 FF 
0b824     10 E4 05 F1 | 	add	objptr, ##16400
0b828     F2 2C 02 FB | 	rdlong	local04, objptr
0b82c     04 2C 66 F0 | 	shl	local04, #4
0b830     20 00 00 FF 
0b834     10 E4 85 F1 | 	sub	objptr, ##16400
0b838     F2 2C 02 F1 | 	add	local04, objptr
0b83c     0C 2C 06 F1 | 	add	local04, #12
0b840     16 39 68 FC | 	wrlong	#28, local04
0b844     20 00 00 FF 
0b848     10 E4 05 F1 | 	add	objptr, ##16400
0b84c     F2 34 02 FB | 	rdlong	local08, objptr
0b850     1A 31 02 F6 | 	mov	local06, local08
0b854     01 34 06 F1 | 	add	local08, #1
0b858     F2 34 62 FC | 	wrlong	local08, objptr
0b85c     35 00 00 FF 
0b860     08 E4 85 F1 | 	sub	objptr, ##27144
0b864                 | LR__0962
0b864     00 34 06 F6 | 	mov	local08, #0
0b868                 | ' numpar=0
0b868                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b868     37 00 00 FF 
0b86c     44 E4 05 F1 | 	add	objptr, ##28228
0b870     F2 2C 02 FB | 	rdlong	local04, objptr
0b874     01 2C 06 F1 | 	add	local04, #1
0b878     03 2C 66 F0 | 	shl	local04, #3
0b87c     02 00 00 FF 
0b880     38 E4 85 F1 | 	sub	objptr, ##1080
0b884     F2 2C 02 F1 | 	add	local04, objptr
0b888     04 2C 06 F1 | 	add	local04, #4
0b88c     16 33 02 FB | 	rdlong	local07, local04
0b890     15 32 0E F2 | 	cmp	local07, #21 wz
0b894     35 00 00 FF 
0b898     0C E4 85 F1 | 	sub	objptr, ##27148
0b89c     54 01 90 5D |  if_ne	jmp	#LR__0967
0b8a0     37 00 00 FF 
0b8a4     44 E4 05 F1 | 	add	objptr, ##28228
0b8a8     F2 36 02 FB | 	rdlong	local09, objptr
0b8ac     01 36 06 F1 | 	add	local09, #1
0b8b0     F2 36 62 FC | 	wrlong	local09, objptr
0b8b4     37 00 00 FF 
0b8b8     44 E4 85 F1 | 	sub	objptr, ##28228
0b8bc                 | '   ct+=1 											' omit this lpar, this is for expr list
0b8bc                 | '   do
0b8bc                 | LR__0963
0b8bc     37 00 00 FF 
0b8c0     44 E4 05 F1 | 	add	objptr, ##28228
0b8c4     F2 2C 02 FB | 	rdlong	local04, objptr
0b8c8     01 2C 06 F1 | 	add	local04, #1
0b8cc     F2 2C 62 FC | 	wrlong	local04, objptr
0b8d0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b8d0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b8d0     03 2C 66 F0 | 	shl	local04, #3
0b8d4     02 00 00 FF 
0b8d8     38 E4 85 F1 | 	sub	objptr, ##1080
0b8dc     F2 2C 02 F1 | 	add	local04, objptr
0b8e0     04 2C 06 F1 | 	add	local04, #4
0b8e4     16 37 02 FB | 	rdlong	local09, local04
0b8e8     15 36 0E F2 | 	cmp	local09, #21 wz
0b8ec     35 00 00 FF 
0b8f0     0C E4 85 F1 | 	sub	objptr, ##27148
0b8f4     44 00 90 5D |  if_ne	jmp	#LR__0964
0b8f8     37 00 00 FF 
0b8fc     44 E4 05 F1 | 	add	objptr, ##28228
0b900     F2 36 02 FB | 	rdlong	local09, objptr
0b904     01 36 06 F1 | 	add	local09, #1
0b908     F2 36 62 FC | 	wrlong	local09, objptr
0b90c     37 00 00 FF 
0b910     44 E4 85 F1 | 	sub	objptr, ##28228
0b914     AC 01 B0 FD | 	call	#_expr
0b918     FD 38 02 F6 | 	mov	local10, result1
0b91c     37 00 00 FF 
0b920     44 E4 05 F1 | 	add	objptr, ##28228
0b924     F2 36 02 FB | 	rdlong	local09, objptr
0b928     01 36 06 F1 | 	add	local09, #1
0b92c     F2 36 62 FC | 	wrlong	local09, objptr
0b930     37 00 00 FF 
0b934     44 E4 85 F1 | 	sub	objptr, ##28228
0b938     08 00 90 FD | 	jmp	#LR__0965
0b93c                 | LR__0964
0b93c     84 01 B0 FD | 	call	#_expr
0b940     FD 38 02 F6 | 	mov	local10, result1
0b944                 | LR__0965
0b944                 | '     if err>0 then return err
0b944     01 38 56 F2 | 	cmps	local10, #1 wc
0b948     1C FB 01 36 |  if_ae	mov	result1, local10
0b94c     68 01 90 3D |  if_ae	jmp	#LR__0968
0b950     01 34 06 F1 | 	add	local08, #1
0b954     37 00 00 FF 
0b958     44 E4 05 F1 | 	add	objptr, ##28228
0b95c     F2 2C 02 FB | 	rdlong	local04, objptr
0b960     03 2C 66 F0 | 	shl	local04, #3
0b964     02 00 00 FF 
0b968     38 E4 85 F1 | 	sub	objptr, ##1080
0b96c     F2 2C 02 F1 | 	add	local04, objptr
0b970     04 2C 06 F1 | 	add	local04, #4
0b974     16 39 02 FB | 	rdlong	local10, local04
0b978     14 38 0E F2 | 	cmp	local10, #20 wz
0b97c     35 00 00 FF 
0b980     0C E4 85 F1 | 	sub	objptr, ##27148
0b984     34 00 90 AD |  if_e	jmp	#LR__0966
0b988     37 00 00 FF 
0b98c     44 E4 05 F1 | 	add	objptr, ##28228
0b990     F2 38 02 FB | 	rdlong	local10, objptr
0b994     03 38 66 F0 | 	shl	local10, #3
0b998     02 00 00 FF 
0b99c     38 E4 85 F1 | 	sub	objptr, ##1080
0b9a0     F2 38 02 F1 | 	add	local10, objptr
0b9a4     04 38 06 F1 | 	add	local10, #4
0b9a8     1C 39 02 FB | 	rdlong	local10, local10
0b9ac     FE 39 0E F2 | 	cmp	local10, #510 wz
0b9b0     35 00 00 FF 
0b9b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b9b8     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0b9bc                 | LR__0966
0b9bc                 | '     if lparts(ct).token=token_end then return 14
0b9bc     37 00 00 FF 
0b9c0     44 E4 05 F1 | 	add	objptr, ##28228
0b9c4     F2 2C 02 FB | 	rdlong	local04, objptr
0b9c8     03 2C 66 F0 | 	shl	local04, #3
0b9cc     02 00 00 FF 
0b9d0     38 E4 85 F1 | 	sub	objptr, ##1080
0b9d4     F2 2C 02 F1 | 	add	local04, objptr
0b9d8     04 2C 06 F1 | 	add	local04, #4
0b9dc     16 39 02 FB | 	rdlong	local10, local04
0b9e0     FE 39 0E F2 | 	cmp	local10, #510 wz
0b9e4     35 00 00 FF 
0b9e8     0C E4 85 F1 | 	sub	objptr, ##27148
0b9ec     0E FA 05 A6 |  if_e	mov	result1, #14
0b9f0     C4 00 90 AD |  if_e	jmp	#LR__0968
0b9f4                 | LR__0967
0b9f4     1A 29 02 F6 | 	mov	local02, local08
0b9f8     12 2A 06 F6 | 	mov	local03, #18
0b9fc     18 27 02 F6 | 	mov	local01, local06
0ba00     13 37 02 F6 | 	mov	local09, local01
0ba04     14 3B 02 F6 | 	mov	local11, local02
0ba08     15 27 02 F6 | 	mov	local01, local03
0ba0c     4A 00 00 FF 
0ba10     7C E4 05 F1 | 	add	objptr, ##38012
0ba14     F2 38 02 FB | 	rdlong	local10, objptr
0ba18     1C 35 02 F6 | 	mov	local08, local10
0ba1c     01 34 66 F0 | 	shl	local08, #1
0ba20     1C 35 02 F1 | 	add	local08, local10
0ba24     02 34 66 F0 | 	shl	local08, #2
0ba28     03 00 00 FF 
0ba2c     00 E4 85 F1 | 	sub	objptr, ##1536
0ba30     F2 34 02 F1 | 	add	local08, objptr
0ba34     1A 37 62 FC | 	wrlong	local09, local08
0ba38     03 00 00 FF 
0ba3c     00 E4 05 F1 | 	add	objptr, ##1536
0ba40     F2 38 02 FB | 	rdlong	local10, objptr
0ba44     1C 37 02 F6 | 	mov	local09, local10
0ba48     01 36 66 F0 | 	shl	local09, #1
0ba4c     1C 37 02 F1 | 	add	local09, local10
0ba50     02 36 66 F0 | 	shl	local09, #2
0ba54     03 00 00 FF 
0ba58     00 E4 85 F1 | 	sub	objptr, ##1536
0ba5c     F2 36 02 F1 | 	add	local09, objptr
0ba60     04 36 06 F1 | 	add	local09, #4
0ba64     1B 3B 62 FC | 	wrlong	local11, local09
0ba68     03 00 00 FF 
0ba6c     00 E4 05 F1 | 	add	objptr, ##1536
0ba70     F2 3A 02 FB | 	rdlong	local11, objptr
0ba74     1D 39 02 F6 | 	mov	local10, local11
0ba78     01 38 66 F0 | 	shl	local10, #1
0ba7c     1D 39 02 F1 | 	add	local10, local11
0ba80     02 38 66 F0 | 	shl	local10, #2
0ba84     03 00 00 FF 
0ba88     00 E4 85 F1 | 	sub	objptr, ##1536
0ba8c     F2 38 02 F1 | 	add	local10, objptr
0ba90     08 38 06 F1 | 	add	local10, #8
0ba94     1C 27 62 FC | 	wrlong	local01, local10
0ba98     03 00 00 FF 
0ba9c     00 E4 05 F1 | 	add	objptr, ##1536
0baa0     F2 36 02 FB | 	rdlong	local09, objptr
0baa4     01 36 06 F1 | 	add	local09, #1
0baa8     F2 36 62 FC | 	wrlong	local09, objptr
0baac     4A 00 00 FF 
0bab0     7C E4 85 F1 | 	sub	objptr, ##38012
0bab4                 | ' t2.result.twowords(1)=numpar
0bab4                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bab4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bab4                 | ' return 0
0bab4     00 FA 05 F6 | 	mov	result1, #0
0bab8                 | LR__0968
0bab8     A7 F0 03 F6 | 	mov	ptra, fp
0babc     B2 00 A0 FD | 	call	#popregs_
0bac0                 | _getaddr_ret
0bac0     2D 00 64 FD | 	ret
0bac4                 | 
0bac4                 | ' 
0bac4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '--------------------------------------------- 
0bac4                 | ' 
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' 
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' '
0bac4                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bac4                 | ' '
0bac4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bac4                 | ' 
0bac4                 | ' function expr() as ulong 
0bac4                 | _expr
0bac4     07 4A 05 F6 | 	mov	COUNT_, #7
0bac8     A8 00 A0 FD | 	call	#pushregs_
0bacc                 | _expr_enter
0bacc     37 00 00 FF 
0bad0     44 E4 05 F1 | 	add	objptr, ##28228
0bad4     F2 2C 02 FB | 	rdlong	local04, objptr
0bad8     03 2C 66 F0 | 	shl	local04, #3
0badc     02 00 00 FF 
0bae0     38 E4 85 F1 | 	sub	objptr, ##1080
0bae4     F2 2C 02 F1 | 	add	local04, objptr
0bae8     04 2C 06 F1 | 	add	local04, #4
0baec     16 2F 02 FB | 	rdlong	local05, local04
0baf0                 | ' 
0baf0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0baf0     FE 2F 0E F2 | 	cmp	local05, #510 wz
0baf4     35 00 00 FF 
0baf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bafc     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bb00     1D 26 06 F6 | 	mov	local01, #29
0bb04     FF 2A 06 F6 | 	mov	local03, #255
0bb08     13 31 02 F6 | 	mov	local06, local01
0bb0c     14 33 02 F6 | 	mov	local07, local02
0bb10     15 27 02 F6 | 	mov	local01, local03
0bb14     4A 00 00 FF 
0bb18     7C E4 05 F1 | 	add	objptr, ##38012
0bb1c     F2 2E 02 FB | 	rdlong	local05, objptr
0bb20     17 2D 02 F6 | 	mov	local04, local05
0bb24     01 2C 66 F0 | 	shl	local04, #1
0bb28     17 2D 02 F1 | 	add	local04, local05
0bb2c     02 2C 66 F0 | 	shl	local04, #2
0bb30     03 00 00 FF 
0bb34     00 E4 85 F1 | 	sub	objptr, ##1536
0bb38     F2 2C 02 F1 | 	add	local04, objptr
0bb3c     16 31 62 FC | 	wrlong	local06, local04
0bb40     03 00 00 FF 
0bb44     00 E4 05 F1 | 	add	objptr, ##1536
0bb48     F2 30 02 FB | 	rdlong	local06, objptr
0bb4c     18 2F 02 F6 | 	mov	local05, local06
0bb50     01 2E 66 F0 | 	shl	local05, #1
0bb54     18 2F 02 F1 | 	add	local05, local06
0bb58     02 2E 66 F0 | 	shl	local05, #2
0bb5c     03 00 00 FF 
0bb60     00 E4 85 F1 | 	sub	objptr, ##1536
0bb64     F2 2E 02 F1 | 	add	local05, objptr
0bb68     04 2E 06 F1 | 	add	local05, #4
0bb6c     17 33 62 FC | 	wrlong	local07, local05
0bb70     03 00 00 FF 
0bb74     00 E4 05 F1 | 	add	objptr, ##1536
0bb78     F2 32 02 FB | 	rdlong	local07, objptr
0bb7c     19 31 02 F6 | 	mov	local06, local07
0bb80     01 30 66 F0 | 	shl	local06, #1
0bb84     19 31 02 F1 | 	add	local06, local07
0bb88     02 30 66 F0 | 	shl	local06, #2
0bb8c     03 00 00 FF 
0bb90     00 E4 85 F1 | 	sub	objptr, ##1536
0bb94     F2 30 02 F1 | 	add	local06, objptr
0bb98     08 30 06 F1 | 	add	local06, #8
0bb9c     18 27 62 FC | 	wrlong	local01, local06
0bba0     03 00 00 FF 
0bba4     00 E4 05 F1 | 	add	objptr, ##1536
0bba8     F2 30 02 FB | 	rdlong	local06, objptr
0bbac     01 30 06 F1 | 	add	local06, #1
0bbb0     F2 30 62 FC | 	wrlong	local06, objptr
0bbb4     4A 00 00 FF 
0bbb8     7C E4 85 F1 | 	sub	objptr, ##38012
0bbbc     1D FA 05 F6 | 	mov	result1, #29
0bbc0     64 01 90 FD | 	jmp	#LR__0973
0bbc4                 | LR__0970
0bbc4     00 26 06 F6 | 	mov	local01, #0
0bbc8     68 01 B0 FD | 	call	#_addsub
0bbcc                 | ' t3.result.uresult=0
0bbcc                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0bbcc                 | ' if err>0 then return err
0bbcc     01 FA 15 F2 | 	cmp	result1, #1 wc
0bbd0     54 01 90 3D |  if_ae	jmp	#LR__0973
0bbd4     37 00 00 FF 
0bbd8     44 E4 05 F1 | 	add	objptr, ##28228
0bbdc     F2 2C 02 FB | 	rdlong	local04, objptr
0bbe0     03 2C 66 F0 | 	shl	local04, #3
0bbe4     02 00 00 FF 
0bbe8     38 E4 85 F1 | 	sub	objptr, ##1080
0bbec     F2 2C 02 F1 | 	add	local04, objptr
0bbf0     04 2C 06 F1 | 	add	local04, #4
0bbf4     16 2F 02 FB | 	rdlong	local05, local04
0bbf8                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bbf8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bbf8     35 00 00 FF 
0bbfc     0C E4 85 F1 | 	sub	objptr, ##27148
0bc00                 | LR__0971
0bc00     1B 2E 0E F2 | 	cmp	local05, #27 wz
0bc04     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0bc08     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0bc0c     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0bc10     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bc14     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bc18     08 01 90 5D |  if_ne	jmp	#LR__0972
0bc1c     37 00 00 FF 
0bc20     44 E4 05 F1 | 	add	objptr, ##28228
0bc24     F2 30 02 FB | 	rdlong	local06, objptr
0bc28     01 30 06 F1 | 	add	local06, #1
0bc2c     F2 30 62 FC | 	wrlong	local06, objptr
0bc30     37 00 00 FF 
0bc34     44 E4 85 F1 | 	sub	objptr, ##28228
0bc38     F8 00 B0 FD | 	call	#_addsub
0bc3c                 | '   ct+=1
0bc3c                 | '   err=addsub() : if err>0 then return err
0bc3c     01 FA 15 F2 | 	cmp	result1, #1 wc
0bc40     E4 00 90 3D |  if_ae	jmp	#LR__0973
0bc44     17 2B 02 F6 | 	mov	local03, local05
0bc48     13 31 02 F6 | 	mov	local06, local01
0bc4c     14 33 02 F6 | 	mov	local07, local02
0bc50     15 2F 02 F6 | 	mov	local05, local03
0bc54     4A 00 00 FF 
0bc58     7C E4 05 F1 | 	add	objptr, ##38012
0bc5c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc60     16 FB 01 F6 | 	mov	result1, local04
0bc64     01 FA 65 F0 | 	shl	result1, #1
0bc68     16 FB 01 F1 | 	add	result1, local04
0bc6c     02 FA 65 F0 | 	shl	result1, #2
0bc70     03 00 00 FF 
0bc74     00 E4 85 F1 | 	sub	objptr, ##1536
0bc78     F2 FA 01 F1 | 	add	result1, objptr
0bc7c     FD 30 62 FC | 	wrlong	local06, result1
0bc80     03 00 00 FF 
0bc84     00 E4 05 F1 | 	add	objptr, ##1536
0bc88     F2 30 02 FB | 	rdlong	local06, objptr
0bc8c     18 2D 02 F6 | 	mov	local04, local06
0bc90     01 2C 66 F0 | 	shl	local04, #1
0bc94     18 2D 02 F1 | 	add	local04, local06
0bc98     02 2C 66 F0 | 	shl	local04, #2
0bc9c     03 00 00 FF 
0bca0     00 E4 85 F1 | 	sub	objptr, ##1536
0bca4     F2 2C 02 F1 | 	add	local04, objptr
0bca8     04 2C 06 F1 | 	add	local04, #4
0bcac     16 33 62 FC | 	wrlong	local07, local04
0bcb0     03 00 00 FF 
0bcb4     00 E4 05 F1 | 	add	objptr, ##1536
0bcb8     F2 32 02 FB | 	rdlong	local07, objptr
0bcbc     19 31 02 F6 | 	mov	local06, local07
0bcc0     01 30 66 F0 | 	shl	local06, #1
0bcc4     19 31 02 F1 | 	add	local06, local07
0bcc8     02 30 66 F0 | 	shl	local06, #2
0bccc     03 00 00 FF 
0bcd0     00 E4 85 F1 | 	sub	objptr, ##1536
0bcd4     F2 30 02 F1 | 	add	local06, objptr
0bcd8     08 30 06 F1 | 	add	local06, #8
0bcdc     18 2F 62 FC | 	wrlong	local05, local06
0bce0     03 00 00 FF 
0bce4     00 E4 05 F1 | 	add	objptr, ##1536
0bce8     F2 30 02 FB | 	rdlong	local06, objptr
0bcec     01 30 06 F1 | 	add	local06, #1
0bcf0     F2 30 62 FC | 	wrlong	local06, objptr
0bcf4     13 00 00 FF 
0bcf8     38 E4 85 F1 | 	sub	objptr, ##9784
0bcfc     F2 2C 02 FB | 	rdlong	local04, objptr
0bd00     03 2C 66 F0 | 	shl	local04, #3
0bd04     02 00 00 FF 
0bd08     38 E4 85 F1 | 	sub	objptr, ##1080
0bd0c     F2 2C 02 F1 | 	add	local04, objptr
0bd10     04 2C 06 F1 | 	add	local04, #4
0bd14     16 2F 02 FB | 	rdlong	local05, local04
0bd18     35 00 00 FF 
0bd1c     0C E4 85 F1 | 	sub	objptr, ##27148
0bd20     DC FE 9F FD | 	jmp	#LR__0971
0bd24                 | LR__0972
0bd24                 | ' return 0  
0bd24     00 FA 05 F6 | 	mov	result1, #0
0bd28                 | LR__0973
0bd28     A7 F0 03 F6 | 	mov	ptra, fp
0bd2c     B2 00 A0 FD | 	call	#popregs_
0bd30                 | _expr_ret
0bd30     2D 00 64 FD | 	ret
0bd34                 | 
0bd34                 | ' 
0bd34                 | ' ' Second level operators : add, sub, logic
0bd34                 | ' 
0bd34                 | ' function addsub() as ulong
0bd34                 | _addsub
0bd34     07 4A 05 F6 | 	mov	COUNT_, #7
0bd38     A8 00 A0 FD | 	call	#pushregs_
0bd3c                 | _addsub_enter
0bd3c     00 26 06 F6 | 	mov	local01, #0
0bd40     60 01 B0 FD | 	call	#_muldiv
0bd44                 | ' 
0bd44                 | ' t3.result.uresult=0
0bd44                 | ' err=muldiv() : if err>0 then return err           			 
0bd44     01 FA 15 F2 | 	cmp	result1, #1 wc
0bd48     4C 01 90 3D |  if_ae	jmp	#LR__0982
0bd4c     37 00 00 FF 
0bd50     44 E4 05 F1 | 	add	objptr, ##28228
0bd54     F2 2C 02 FB | 	rdlong	local04, objptr
0bd58     03 2C 66 F0 | 	shl	local04, #3
0bd5c     02 00 00 FF 
0bd60     38 E4 85 F1 | 	sub	objptr, ##1080
0bd64     F2 2C 02 F1 | 	add	local04, objptr
0bd68     04 2C 06 F1 | 	add	local04, #4
0bd6c     16 2F 02 FB | 	rdlong	local05, local04
0bd70                 | ' op = lparts(ct).token				 
0bd70                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0bd70     35 00 00 FF 
0bd74     0C E4 85 F1 | 	sub	objptr, ##27148
0bd78                 | LR__0980
0bd78     01 2E 0E F2 | 	cmp	local05, #1 wz
0bd7c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0bd80     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0bd84     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0bd88     08 01 90 5D |  if_ne	jmp	#LR__0981
0bd8c     37 00 00 FF 
0bd90     44 E4 05 F1 | 	add	objptr, ##28228
0bd94     F2 2C 02 FB | 	rdlong	local04, objptr
0bd98     01 2C 06 F1 | 	add	local04, #1
0bd9c     F2 2C 62 FC | 	wrlong	local04, objptr
0bda0     37 00 00 FF 
0bda4     44 E4 85 F1 | 	sub	objptr, ##28228
0bda8     F8 00 B0 FD | 	call	#_muldiv
0bdac                 | '   ct+=1
0bdac                 | '   err=muldiv() : if err>0 then return err   
0bdac     01 FA 15 F2 | 	cmp	result1, #1 wc
0bdb0     E4 00 90 3D |  if_ae	jmp	#LR__0982
0bdb4     17 2B 02 F6 | 	mov	local03, local05
0bdb8     13 31 02 F6 | 	mov	local06, local01
0bdbc     14 33 02 F6 | 	mov	local07, local02
0bdc0     15 2F 02 F6 | 	mov	local05, local03
0bdc4     4A 00 00 FF 
0bdc8     7C E4 05 F1 | 	add	objptr, ##38012
0bdcc     F2 2C 02 FB | 	rdlong	local04, objptr
0bdd0     16 FB 01 F6 | 	mov	result1, local04
0bdd4     01 FA 65 F0 | 	shl	result1, #1
0bdd8     16 FB 01 F1 | 	add	result1, local04
0bddc     02 FA 65 F0 | 	shl	result1, #2
0bde0     03 00 00 FF 
0bde4     00 E4 85 F1 | 	sub	objptr, ##1536
0bde8     F2 FA 01 F1 | 	add	result1, objptr
0bdec     FD 30 62 FC | 	wrlong	local06, result1
0bdf0     03 00 00 FF 
0bdf4     00 E4 05 F1 | 	add	objptr, ##1536
0bdf8     F2 30 02 FB | 	rdlong	local06, objptr
0bdfc     18 2D 02 F6 | 	mov	local04, local06
0be00     01 2C 66 F0 | 	shl	local04, #1
0be04     18 2D 02 F1 | 	add	local04, local06
0be08     02 2C 66 F0 | 	shl	local04, #2
0be0c     03 00 00 FF 
0be10     00 E4 85 F1 | 	sub	objptr, ##1536
0be14     F2 2C 02 F1 | 	add	local04, objptr
0be18     04 2C 06 F1 | 	add	local04, #4
0be1c     16 33 62 FC | 	wrlong	local07, local04
0be20     03 00 00 FF 
0be24     00 E4 05 F1 | 	add	objptr, ##1536
0be28     F2 32 02 FB | 	rdlong	local07, objptr
0be2c     19 31 02 F6 | 	mov	local06, local07
0be30     01 30 66 F0 | 	shl	local06, #1
0be34     19 31 02 F1 | 	add	local06, local07
0be38     02 30 66 F0 | 	shl	local06, #2
0be3c     03 00 00 FF 
0be40     00 E4 85 F1 | 	sub	objptr, ##1536
0be44     F2 30 02 F1 | 	add	local06, objptr
0be48     08 30 06 F1 | 	add	local06, #8
0be4c     18 2F 62 FC | 	wrlong	local05, local06
0be50     03 00 00 FF 
0be54     00 E4 05 F1 | 	add	objptr, ##1536
0be58     F2 30 02 FB | 	rdlong	local06, objptr
0be5c     01 30 06 F1 | 	add	local06, #1
0be60     F2 30 62 FC | 	wrlong	local06, objptr
0be64     13 00 00 FF 
0be68     38 E4 85 F1 | 	sub	objptr, ##9784
0be6c     F2 2C 02 FB | 	rdlong	local04, objptr
0be70     03 2C 66 F0 | 	shl	local04, #3
0be74     02 00 00 FF 
0be78     38 E4 85 F1 | 	sub	objptr, ##1080
0be7c     F2 2C 02 F1 | 	add	local04, objptr
0be80     04 2C 06 F1 | 	add	local04, #4
0be84     16 2F 02 FB | 	rdlong	local05, local04
0be88     35 00 00 FF 
0be8c     0C E4 85 F1 | 	sub	objptr, ##27148
0be90     E4 FE 9F FD | 	jmp	#LR__0980
0be94                 | LR__0981
0be94                 | ' return 0
0be94     00 FA 05 F6 | 	mov	result1, #0
0be98                 | LR__0982
0be98     A7 F0 03 F6 | 	mov	ptra, fp
0be9c     B2 00 A0 FD | 	call	#popregs_
0bea0                 | _addsub_ret
0bea0     2D 00 64 FD | 	ret
0bea4                 | 
0bea4                 | ' 
0bea4                 | ' ' Third level operators : mul,div,shift,power
0bea4                 | ' 
0bea4                 | ' function muldiv() as ulong
0bea4                 | _muldiv
0bea4     07 4A 05 F6 | 	mov	COUNT_, #7
0bea8     A8 00 A0 FD | 	call	#pushregs_
0beac                 | _muldiv_enter
0beac     00 26 06 F6 | 	mov	local01, #0
0beb0     6C 01 B0 FD | 	call	#_getvalue
0beb4                 | ' 
0beb4                 | ' t3.result.uresult=0
0beb4                 | ' err=getvalue() : if err>0 then return err     
0beb4     01 FA 15 F2 | 	cmp	result1, #1 wc
0beb8     58 01 90 3D |  if_ae	jmp	#LR__0992
0bebc     37 00 00 FF 
0bec0     44 E4 05 F1 | 	add	objptr, ##28228
0bec4     F2 2C 02 FB | 	rdlong	local04, objptr
0bec8     03 2C 66 F0 | 	shl	local04, #3
0becc     02 00 00 FF 
0bed0     38 E4 85 F1 | 	sub	objptr, ##1080
0bed4     F2 2C 02 F1 | 	add	local04, objptr
0bed8     04 2C 06 F1 | 	add	local04, #4
0bedc     16 2F 02 FB | 	rdlong	local05, local04
0bee0                 | ' op = lparts(ct).token
0bee0                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0bee0     35 00 00 FF 
0bee4     0C E4 85 F1 | 	sub	objptr, ##27148
0bee8                 | LR__0990
0bee8     05 2E 0E F2 | 	cmp	local05, #5 wz
0beec     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0bef0     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0bef4     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0bef8     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0befc     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0bf00     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0bf04     08 01 90 5D |  if_ne	jmp	#LR__0991
0bf08     37 00 00 FF 
0bf0c     44 E4 05 F1 | 	add	objptr, ##28228
0bf10     F2 2C 02 FB | 	rdlong	local04, objptr
0bf14     01 2C 06 F1 | 	add	local04, #1
0bf18     F2 2C 62 FC | 	wrlong	local04, objptr
0bf1c     37 00 00 FF 
0bf20     44 E4 85 F1 | 	sub	objptr, ##28228
0bf24     F8 00 B0 FD | 	call	#_getvalue
0bf28                 | '   ct+=1
0bf28                 | '   err=getvalue() :if err>0 then return err   
0bf28     01 FA 15 F2 | 	cmp	result1, #1 wc
0bf2c     E4 00 90 3D |  if_ae	jmp	#LR__0992
0bf30     17 2B 02 F6 | 	mov	local03, local05
0bf34     13 31 02 F6 | 	mov	local06, local01
0bf38     14 33 02 F6 | 	mov	local07, local02
0bf3c     15 2F 02 F6 | 	mov	local05, local03
0bf40     4A 00 00 FF 
0bf44     7C E4 05 F1 | 	add	objptr, ##38012
0bf48     F2 2C 02 FB | 	rdlong	local04, objptr
0bf4c     16 FB 01 F6 | 	mov	result1, local04
0bf50     01 FA 65 F0 | 	shl	result1, #1
0bf54     16 FB 01 F1 | 	add	result1, local04
0bf58     02 FA 65 F0 | 	shl	result1, #2
0bf5c     03 00 00 FF 
0bf60     00 E4 85 F1 | 	sub	objptr, ##1536
0bf64     F2 FA 01 F1 | 	add	result1, objptr
0bf68     FD 30 62 FC | 	wrlong	local06, result1
0bf6c     03 00 00 FF 
0bf70     00 E4 05 F1 | 	add	objptr, ##1536
0bf74     F2 30 02 FB | 	rdlong	local06, objptr
0bf78     18 2D 02 F6 | 	mov	local04, local06
0bf7c     01 2C 66 F0 | 	shl	local04, #1
0bf80     18 2D 02 F1 | 	add	local04, local06
0bf84     02 2C 66 F0 | 	shl	local04, #2
0bf88     03 00 00 FF 
0bf8c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf90     F2 2C 02 F1 | 	add	local04, objptr
0bf94     04 2C 06 F1 | 	add	local04, #4
0bf98     16 33 62 FC | 	wrlong	local07, local04
0bf9c     03 00 00 FF 
0bfa0     00 E4 05 F1 | 	add	objptr, ##1536
0bfa4     F2 32 02 FB | 	rdlong	local07, objptr
0bfa8     19 31 02 F6 | 	mov	local06, local07
0bfac     01 30 66 F0 | 	shl	local06, #1
0bfb0     19 31 02 F1 | 	add	local06, local07
0bfb4     02 30 66 F0 | 	shl	local06, #2
0bfb8     03 00 00 FF 
0bfbc     00 E4 85 F1 | 	sub	objptr, ##1536
0bfc0     F2 30 02 F1 | 	add	local06, objptr
0bfc4     08 30 06 F1 | 	add	local06, #8
0bfc8     18 2F 62 FC | 	wrlong	local05, local06
0bfcc     03 00 00 FF 
0bfd0     00 E4 05 F1 | 	add	objptr, ##1536
0bfd4     F2 30 02 FB | 	rdlong	local06, objptr
0bfd8     01 30 06 F1 | 	add	local06, #1
0bfdc     F2 30 62 FC | 	wrlong	local06, objptr
0bfe0     13 00 00 FF 
0bfe4     38 E4 85 F1 | 	sub	objptr, ##9784
0bfe8     F2 2C 02 FB | 	rdlong	local04, objptr
0bfec     03 2C 66 F0 | 	shl	local04, #3
0bff0     02 00 00 FF 
0bff4     38 E4 85 F1 | 	sub	objptr, ##1080
0bff8     F2 2C 02 F1 | 	add	local04, objptr
0bffc     04 2C 06 F1 | 	add	local04, #4
0c000     16 2F 02 FB | 	rdlong	local05, local04
0c004     35 00 00 FF 
0c008     0C E4 85 F1 | 	sub	objptr, ##27148
0c00c     D8 FE 9F FD | 	jmp	#LR__0990
0c010                 | LR__0991
0c010                 | ' return 0
0c010     00 FA 05 F6 | 	mov	result1, #0
0c014                 | LR__0992
0c014     A7 F0 03 F6 | 	mov	ptra, fp
0c018     B2 00 A0 FD | 	call	#popregs_
0c01c                 | _muldiv_ret
0c01c     2D 00 64 FD | 	ret
0c020                 | 
0c020                 | ' 
0c020                 | ' ' Get a value for operations
0c020                 | ' 
0c020                 | ' function getvalue()  as ulong
0c020                 | _getvalue
0c020     0B 4A 05 F6 | 	mov	COUNT_, #11
0c024     A8 00 A0 FD | 	call	#pushregs_
0c028                 | _getvalue_enter
0c028     01 2C 06 F6 | 	mov	local04, #1
0c02c     00 26 06 F6 | 	mov	local01, #0
0c030     1D 2A 06 F6 | 	mov	local03, #29
0c034     37 00 00 FF 
0c038     44 E4 05 F1 | 	add	objptr, ##28228
0c03c     F2 16 02 FB | 	rdlong	arg03, objptr
0c040     03 16 66 F0 | 	shl	arg03, #3
0c044     02 00 00 FF 
0c048     38 E4 85 F1 | 	sub	objptr, ##1080
0c04c     F2 16 02 F1 | 	add	arg03, objptr
0c050     04 16 06 F1 | 	add	arg03, #4
0c054     0B 2F 02 FB | 	rdlong	local05, arg03
0c058                 | ' 
0c058                 | ' m=1											' for negative numbers
0c058                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c058                 | ' op=lparts(ct).token
0c058                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c058     02 2E 0E F2 | 	cmp	local05, #2 wz
0c05c     35 00 00 FF 
0c060     0C E4 85 F1 | 	sub	objptr, ##27148
0c064     38 00 90 5D |  if_ne	jmp	#LR__1000
0c068     01 2C 66 F6 | 	neg	local04, #1
0c06c     37 00 00 FF 
0c070     44 E4 05 F1 | 	add	objptr, ##28228
0c074     F2 2E 02 FB | 	rdlong	local05, objptr
0c078     01 2E 06 F1 | 	add	local05, #1
0c07c     F2 2E 62 FC | 	wrlong	local05, objptr
0c080     03 2E 66 F0 | 	shl	local05, #3
0c084     02 00 00 FF 
0c088     38 E4 85 F1 | 	sub	objptr, ##1080
0c08c     F2 2E 02 F1 | 	add	local05, objptr
0c090     04 2E 06 F1 | 	add	local05, #4
0c094     17 2F 02 FB | 	rdlong	local05, local05
0c098     35 00 00 FF 
0c09c     0C E4 85 F1 | 	sub	objptr, ##27148
0c0a0                 | LR__1000
0c0a0                 | ' select case op
0c0a0     01 00 00 FF 
0c0a4     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c0a8     44 00 90 AD |  if_e	jmp	#LR__1001
0c0ac     01 00 00 FF 
0c0b0     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c0b4     90 01 90 AD |  if_e	jmp	#LR__1004
0c0b8     01 00 00 FF 
0c0bc     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c0c0     44 04 90 AD |  if_e	jmp	#LR__1011
0c0c4     01 00 00 FF 
0c0c8     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c0cc     A8 05 90 AD |  if_e	jmp	#LR__1014
0c0d0     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c0d4     78 07 90 AD |  if_e	jmp	#LR__1019
0c0d8     01 00 00 FF 
0c0dc     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c0e0     70 08 90 AD |  if_e	jmp	#LR__1020
0c0e4     15 2E 0E F2 | 	cmp	local05, #21 wz
0c0e8     98 08 90 AD |  if_e	jmp	#LR__1021
0c0ec     10 09 90 FD | 	jmp	#LR__1022
0c0f0                 | LR__1001
0c0f0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c0f0     01 2C 0E F2 | 	cmp	local04, #1 wz
0c0f4     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c0f8     37 00 00 FF 
0c0fc     44 E4 05 F1 | 	add	objptr, ##28228
0c100     F2 2E 02 FB | 	rdlong	local05, objptr
0c104     03 2E 66 F0 | 	shl	local05, #3
0c108     02 00 00 FF 
0c10c     38 E4 85 F1 | 	sub	objptr, ##1080
0c110     F2 2E 02 F1 | 	add	local05, objptr
0c114     17 13 02 FB | 	rdlong	arg01, local05
0c118     00 14 06 F6 | 	mov	arg02, #0
0c11c     35 00 00 FF 
0c120     0C E4 85 F1 | 	sub	objptr, ##27148
0c124     0C D3 B1 FD | 	call	#__system____builtin_atoi
0c128     FD 2C 02 FD | 	qmul	local04, result1
0c12c     18 26 62 FD | 	getqx	local01
0c130     1C 2A 06 F6 | 	mov	local03, #28
0c134                 | LR__1002
0c134                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c134     FF FF 7F FF 
0c138     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c13c     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c140     37 00 00 FF 
0c144     44 E4 05 F1 | 	add	objptr, ##28228
0c148     F2 2E 02 FB | 	rdlong	local05, objptr
0c14c     03 2E 66 F0 | 	shl	local05, #3
0c150     02 00 00 FF 
0c154     38 E4 85 F1 | 	sub	objptr, ##1080
0c158     F2 2E 02 F1 | 	add	local05, objptr
0c15c     17 13 02 FB | 	rdlong	arg01, local05
0c160     00 14 06 F6 | 	mov	arg02, #0
0c164     35 00 00 FF 
0c168     0C E4 85 F1 | 	sub	objptr, ##27148
0c16c     C4 D2 B1 FD | 	call	#__system____builtin_atoi
0c170     FD 2C 02 FD | 	qmul	local04, result1
0c174     18 26 62 FD | 	getqx	local01
0c178     1C 2A 06 F6 | 	mov	local03, #28
0c17c                 | LR__1003
0c17c     13 31 02 F6 | 	mov	local06, local01
0c180     14 33 02 F6 | 	mov	local07, local02
0c184     15 2F 02 F6 | 	mov	local05, local03
0c188     4A 00 00 FF 
0c18c     7C E4 05 F1 | 	add	objptr, ##38012
0c190     F2 26 02 FB | 	rdlong	local01, objptr
0c194     13 2D 02 F6 | 	mov	local04, local01
0c198     01 2C 66 F0 | 	shl	local04, #1
0c19c     13 2D 02 F1 | 	add	local04, local01
0c1a0     02 2C 66 F0 | 	shl	local04, #2
0c1a4     03 00 00 FF 
0c1a8     00 E4 85 F1 | 	sub	objptr, ##1536
0c1ac     F2 2C 02 F1 | 	add	local04, objptr
0c1b0     16 31 62 FC | 	wrlong	local06, local04
0c1b4     03 00 00 FF 
0c1b8     00 E4 05 F1 | 	add	objptr, ##1536
0c1bc     F2 30 02 FB | 	rdlong	local06, objptr
0c1c0     18 27 02 F6 | 	mov	local01, local06
0c1c4     01 26 66 F0 | 	shl	local01, #1
0c1c8     18 27 02 F1 | 	add	local01, local06
0c1cc     02 26 66 F0 | 	shl	local01, #2
0c1d0     03 00 00 FF 
0c1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0c1d8     F2 26 02 F1 | 	add	local01, objptr
0c1dc     04 26 06 F1 | 	add	local01, #4
0c1e0     13 33 62 FC | 	wrlong	local07, local01
0c1e4     03 00 00 FF 
0c1e8     00 E4 05 F1 | 	add	objptr, ##1536
0c1ec     F2 32 02 FB | 	rdlong	local07, objptr
0c1f0     19 31 02 F6 | 	mov	local06, local07
0c1f4     01 30 66 F0 | 	shl	local06, #1
0c1f8     19 31 02 F1 | 	add	local06, local07
0c1fc     02 30 66 F0 | 	shl	local06, #2
0c200     03 00 00 FF 
0c204     00 E4 85 F1 | 	sub	objptr, ##1536
0c208     F2 30 02 F1 | 	add	local06, objptr
0c20c     08 30 06 F1 | 	add	local06, #8
0c210     18 2F 62 FC | 	wrlong	local05, local06
0c214     03 00 00 FF 
0c218     00 E4 05 F1 | 	add	objptr, ##1536
0c21c     F2 30 02 FB | 	rdlong	local06, objptr
0c220     01 30 06 F1 | 	add	local06, #1
0c224     F2 30 62 FC | 	wrlong	local06, objptr
0c228     13 00 00 FF 
0c22c     38 E4 85 F1 | 	sub	objptr, ##9784
0c230     F2 30 02 FB | 	rdlong	local06, objptr
0c234     01 30 06 F1 | 	add	local06, #1
0c238     F2 30 62 FC | 	wrlong	local06, objptr
0c23c     37 00 00 FF 
0c240     44 E4 85 F1 | 	sub	objptr, ##28228
0c244     E4 07 90 FD | 	jmp	#LR__1023
0c248                 | LR__1004
0c248                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c248     37 00 00 FF 
0c24c     44 E4 05 F1 | 	add	objptr, ##28228
0c250     F2 16 02 FB | 	rdlong	arg03, objptr
0c254     03 16 66 F0 | 	shl	arg03, #3
0c258     02 00 00 FF 
0c25c     38 E4 85 F1 | 	sub	objptr, ##1080
0c260     F2 16 02 F1 | 	add	arg03, objptr
0c264     0B 13 02 FB | 	rdlong	arg01, arg03
0c268     01 14 06 F6 | 	mov	arg02, #1
0c26c     35 00 00 FF 
0c270     0C E4 85 F1 | 	sub	objptr, ##27148
0c274     48 BD B1 FD | 	call	#__system__Left_S
0c278     FD 12 02 F6 | 	mov	arg01, result1
0c27c     B0 01 00 FF 
0c280     AB 15 06 F6 | 	mov	arg02, ##@LR__5802
0c284     E0 9C B1 FD | 	call	#__system___string_cmp
0c288     00 FA 0D F2 | 	cmp	result1, #0 wz
0c28c     94 00 90 5D |  if_ne	jmp	#LR__1007
0c290     37 00 00 FF 
0c294     44 E4 05 F1 | 	add	objptr, ##28228
0c298     F2 32 02 FB | 	rdlong	local07, objptr
0c29c     19 31 02 F6 | 	mov	local06, local07
0c2a0     03 30 66 F0 | 	shl	local06, #3
0c2a4     02 00 00 FF 
0c2a8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2ac     F2 30 02 F1 | 	add	local06, objptr
0c2b0     B0 01 00 FF 
0c2b4     AD 2F 06 F6 | 	mov	local05, ##@LR__5803
0c2b8     03 32 66 F0 | 	shl	local07, #3
0c2bc     F2 32 02 F1 | 	add	local07, objptr
0c2c0     19 33 02 FB | 	rdlong	local07, local07
0c2c4     02 00 00 FF 
0c2c8     38 E4 05 F1 | 	add	objptr, ##1080
0c2cc     F2 26 02 FB | 	rdlong	local01, objptr
0c2d0     03 26 66 F0 | 	shl	local01, #3
0c2d4     02 00 00 FF 
0c2d8     38 E4 85 F1 | 	sub	objptr, ##1080
0c2dc     F2 26 02 F1 | 	add	local01, objptr
0c2e0     13 13 02 FB | 	rdlong	arg01, local01
0c2e4     35 00 00 FF 
0c2e8     0C E4 85 F1 | 	sub	objptr, ##27148
0c2ec     09 35 02 F6 | 	mov	local08, arg01
0c2f0     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c2f4                 | LR__1005
0c2f4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c2f8     01 34 06 51 |  if_ne	add	local08, #1
0c2fc     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c300                 | LR__1006
0c300     09 35 82 F1 | 	sub	local08, arg01
0c304     1A 15 02 F6 | 	mov	arg02, local08
0c308     01 14 86 F1 | 	sub	arg02, #1
0c30c     19 13 02 F6 | 	mov	arg01, local07
0c310     34 BD B1 FD | 	call	#__system__Right_S
0c314     FD 14 02 F6 | 	mov	arg02, result1
0c318     17 13 02 F6 | 	mov	arg01, local05
0c31c     7C 9C B1 FD | 	call	#__system___string_concat
0c320     18 FB 61 FC | 	wrlong	result1, local06
0c324                 | LR__1007
0c324                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c324     37 00 00 FF 
0c328     44 E4 05 F1 | 	add	objptr, ##28228
0c32c     F2 16 02 FB | 	rdlong	arg03, objptr
0c330     03 16 66 F0 | 	shl	arg03, #3
0c334     02 00 00 FF 
0c338     38 E4 85 F1 | 	sub	objptr, ##1080
0c33c     F2 16 02 F1 | 	add	arg03, objptr
0c340     0B 13 02 FB | 	rdlong	arg01, arg03
0c344     01 14 06 F6 | 	mov	arg02, #1
0c348     35 00 00 FF 
0c34c     0C E4 85 F1 | 	sub	objptr, ##27148
0c350     6C BC B1 FD | 	call	#__system__Left_S
0c354     FD 12 02 F6 | 	mov	arg01, result1
0c358     B0 01 00 FF 
0c35c     B0 15 06 F6 | 	mov	arg02, ##@LR__5804
0c360     04 9C B1 FD | 	call	#__system___string_cmp
0c364     00 FA 0D F2 | 	cmp	result1, #0 wz
0c368     94 00 90 5D |  if_ne	jmp	#LR__1010
0c36c     37 00 00 FF 
0c370     44 E4 05 F1 | 	add	objptr, ##28228
0c374     F2 32 02 FB | 	rdlong	local07, objptr
0c378     19 31 02 F6 | 	mov	local06, local07
0c37c     03 30 66 F0 | 	shl	local06, #3
0c380     02 00 00 FF 
0c384     38 E4 85 F1 | 	sub	objptr, ##1080
0c388     F2 30 02 F1 | 	add	local06, objptr
0c38c     B0 01 00 FF 
0c390     B2 2F 06 F6 | 	mov	local05, ##@LR__5805
0c394     03 32 66 F0 | 	shl	local07, #3
0c398     F2 32 02 F1 | 	add	local07, objptr
0c39c     19 33 02 FB | 	rdlong	local07, local07
0c3a0     02 00 00 FF 
0c3a4     38 E4 05 F1 | 	add	objptr, ##1080
0c3a8     F2 26 02 FB | 	rdlong	local01, objptr
0c3ac     03 26 66 F0 | 	shl	local01, #3
0c3b0     02 00 00 FF 
0c3b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c3b8     F2 26 02 F1 | 	add	local01, objptr
0c3bc     13 13 02 FB | 	rdlong	arg01, local01
0c3c0     35 00 00 FF 
0c3c4     0C E4 85 F1 | 	sub	objptr, ##27148
0c3c8     09 35 02 F6 | 	mov	local08, arg01
0c3cc     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c3d0                 | LR__1008
0c3d0     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c3d4     01 34 06 51 |  if_ne	add	local08, #1
0c3d8     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c3dc                 | LR__1009
0c3dc     09 35 82 F1 | 	sub	local08, arg01
0c3e0     1A 15 02 F6 | 	mov	arg02, local08
0c3e4     01 14 86 F1 | 	sub	arg02, #1
0c3e8     19 13 02 F6 | 	mov	arg01, local07
0c3ec     58 BC B1 FD | 	call	#__system__Right_S
0c3f0     FD 14 02 F6 | 	mov	arg02, result1
0c3f4     17 13 02 F6 | 	mov	arg01, local05
0c3f8     A0 9B B1 FD | 	call	#__system___string_concat
0c3fc     18 FB 61 FC | 	wrlong	result1, local06
0c400                 | LR__1010
0c400     37 00 00 FF 
0c404     44 E4 05 F1 | 	add	objptr, ##28228
0c408     F2 30 02 FB | 	rdlong	local06, objptr
0c40c     03 30 66 F0 | 	shl	local06, #3
0c410     02 00 00 FF 
0c414     38 E4 85 F1 | 	sub	objptr, ##1080
0c418     F2 30 02 F1 | 	add	local06, objptr
0c41c     18 13 02 FB | 	rdlong	arg01, local06
0c420     00 14 06 F6 | 	mov	arg02, #0
0c424     35 00 00 FF 
0c428     0C E4 85 F1 | 	sub	objptr, ##27148
0c42c     04 D0 B1 FD | 	call	#__system____builtin_atoi
0c430     FD 2C 02 FD | 	qmul	local04, result1
0c434     4A 00 00 FF 
0c438     7C E4 05 F1 | 	add	objptr, ##38012
0c43c     F2 30 02 FB | 	rdlong	local06, objptr
0c440     18 37 02 F6 | 	mov	local09, local06
0c444     01 36 66 F0 | 	shl	local09, #1
0c448     18 37 02 F1 | 	add	local09, local06
0c44c     02 36 66 F0 | 	shl	local09, #2
0c450     03 00 00 FF 
0c454     00 E4 85 F1 | 	sub	objptr, ##1536
0c458     F2 36 02 F1 | 	add	local09, objptr
0c45c     03 00 00 FF 
0c460     00 E4 05 F1 | 	add	objptr, ##1536
0c464     18 26 62 FD | 	getqx	local01
0c468     1C 2A 06 F6 | 	mov	local03, #28
0c46c     13 31 02 F6 | 	mov	local06, local01
0c470     14 33 02 F6 | 	mov	local07, local02
0c474     1B 31 62 FC | 	wrlong	local06, local09
0c478     15 37 02 F6 | 	mov	local09, local03
0c47c     F2 30 02 FB | 	rdlong	local06, objptr
0c480     18 2F 02 F6 | 	mov	local05, local06
0c484     01 2E 66 F0 | 	shl	local05, #1
0c488     18 2F 02 F1 | 	add	local05, local06
0c48c     02 2E 66 F0 | 	shl	local05, #2
0c490     03 00 00 FF 
0c494     00 E4 85 F1 | 	sub	objptr, ##1536
0c498     F2 2E 02 F1 | 	add	local05, objptr
0c49c     04 2E 06 F1 | 	add	local05, #4
0c4a0     17 33 62 FC | 	wrlong	local07, local05
0c4a4     03 00 00 FF 
0c4a8     00 E4 05 F1 | 	add	objptr, ##1536
0c4ac     F2 32 02 FB | 	rdlong	local07, objptr
0c4b0     19 31 02 F6 | 	mov	local06, local07
0c4b4     01 30 66 F0 | 	shl	local06, #1
0c4b8     19 31 02 F1 | 	add	local06, local07
0c4bc     02 30 66 F0 | 	shl	local06, #2
0c4c0     03 00 00 FF 
0c4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0c4c8     F2 30 02 F1 | 	add	local06, objptr
0c4cc     08 30 06 F1 | 	add	local06, #8
0c4d0     18 37 62 FC | 	wrlong	local09, local06
0c4d4     03 00 00 FF 
0c4d8     00 E4 05 F1 | 	add	objptr, ##1536
0c4dc     F2 30 02 FB | 	rdlong	local06, objptr
0c4e0     01 30 06 F1 | 	add	local06, #1
0c4e4     F2 30 62 FC | 	wrlong	local06, objptr
0c4e8     13 00 00 FF 
0c4ec     38 E4 85 F1 | 	sub	objptr, ##9784
0c4f0     F2 30 02 FB | 	rdlong	local06, objptr
0c4f4     01 30 06 F1 | 	add	local06, #1
0c4f8     F2 30 62 FC | 	wrlong	local06, objptr
0c4fc     37 00 00 FF 
0c500     44 E4 85 F1 | 	sub	objptr, ##28228
0c504     24 05 90 FD | 	jmp	#LR__1023
0c508                 | LR__1011
0c508                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c508     01 2C 0E F2 | 	cmp	local04, #1 wz
0c50c     48 00 90 5D |  if_ne	jmp	#LR__1012
0c510     00 C0 1F FF 
0c514     00 30 06 F6 | 	mov	local06, ##1065353216
0c518     37 00 00 FF 
0c51c     44 E4 05 F1 | 	add	objptr, ##28228
0c520     F2 36 02 FB | 	rdlong	local09, objptr
0c524     03 36 66 F0 | 	shl	local09, #3
0c528     02 00 00 FF 
0c52c     38 E4 85 F1 | 	sub	objptr, ##1080
0c530     F2 36 02 F1 | 	add	local09, objptr
0c534     1B 13 02 FB | 	rdlong	arg01, local09
0c538     35 00 00 FF 
0c53c     0C E4 85 F1 | 	sub	objptr, ##27148
0c540     84 D0 B1 FD | 	call	#__system____builtin_atof
0c544     FD 14 02 F6 | 	mov	arg02, result1
0c548     18 13 02 F6 | 	mov	arg01, local06
0c54c     6C C8 B1 FD | 	call	#__system___float_mul
0c550     FD 26 02 F6 | 	mov	local01, result1
0c554     1E 2A 06 F6 | 	mov	local03, #30
0c558                 | LR__1012
0c558                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c558     FF FF 7F FF 
0c55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c560     48 00 90 5D |  if_ne	jmp	#LR__1013
0c564     00 C0 5F FF 
0c568     00 30 06 F6 | 	mov	local06, ##-1082130432
0c56c     37 00 00 FF 
0c570     44 E4 05 F1 | 	add	objptr, ##28228
0c574     F2 36 02 FB | 	rdlong	local09, objptr
0c578     03 36 66 F0 | 	shl	local09, #3
0c57c     02 00 00 FF 
0c580     38 E4 85 F1 | 	sub	objptr, ##1080
0c584     F2 36 02 F1 | 	add	local09, objptr
0c588     1B 13 02 FB | 	rdlong	arg01, local09
0c58c     35 00 00 FF 
0c590     0C E4 85 F1 | 	sub	objptr, ##27148
0c594     30 D0 B1 FD | 	call	#__system____builtin_atof
0c598     FD 14 02 F6 | 	mov	arg02, result1
0c59c     18 13 02 F6 | 	mov	arg01, local06
0c5a0     18 C8 B1 FD | 	call	#__system___float_mul
0c5a4     FD 26 02 F6 | 	mov	local01, result1
0c5a8     1E 2A 06 F6 | 	mov	local03, #30
0c5ac                 | LR__1013
0c5ac     13 31 02 F6 | 	mov	local06, local01
0c5b0     14 33 02 F6 | 	mov	local07, local02
0c5b4     15 2F 02 F6 | 	mov	local05, local03
0c5b8     4A 00 00 FF 
0c5bc     7C E4 05 F1 | 	add	objptr, ##38012
0c5c0     F2 26 02 FB | 	rdlong	local01, objptr
0c5c4     13 37 02 F6 | 	mov	local09, local01
0c5c8     01 36 66 F0 | 	shl	local09, #1
0c5cc     13 37 02 F1 | 	add	local09, local01
0c5d0     02 36 66 F0 | 	shl	local09, #2
0c5d4     03 00 00 FF 
0c5d8     00 E4 85 F1 | 	sub	objptr, ##1536
0c5dc     F2 36 02 F1 | 	add	local09, objptr
0c5e0     1B 31 62 FC | 	wrlong	local06, local09
0c5e4     03 00 00 FF 
0c5e8     00 E4 05 F1 | 	add	objptr, ##1536
0c5ec     F2 36 02 FB | 	rdlong	local09, objptr
0c5f0     1B 31 02 F6 | 	mov	local06, local09
0c5f4     01 30 66 F0 | 	shl	local06, #1
0c5f8     1B 31 02 F1 | 	add	local06, local09
0c5fc     02 30 66 F0 | 	shl	local06, #2
0c600     03 00 00 FF 
0c604     00 E4 85 F1 | 	sub	objptr, ##1536
0c608     F2 30 02 F1 | 	add	local06, objptr
0c60c     04 30 06 F1 | 	add	local06, #4
0c610     18 33 62 FC | 	wrlong	local07, local06
0c614     03 00 00 FF 
0c618     00 E4 05 F1 | 	add	objptr, ##1536
0c61c     F2 36 02 FB | 	rdlong	local09, objptr
0c620     1B 33 02 F6 | 	mov	local07, local09
0c624     01 32 66 F0 | 	shl	local07, #1
0c628     1B 33 02 F1 | 	add	local07, local09
0c62c     02 32 66 F0 | 	shl	local07, #2
0c630     03 00 00 FF 
0c634     00 E4 85 F1 | 	sub	objptr, ##1536
0c638     F2 32 02 F1 | 	add	local07, objptr
0c63c     08 32 06 F1 | 	add	local07, #8
0c640     19 2F 62 FC | 	wrlong	local05, local07
0c644     03 00 00 FF 
0c648     00 E4 05 F1 | 	add	objptr, ##1536
0c64c     F2 30 02 FB | 	rdlong	local06, objptr
0c650     01 30 06 F1 | 	add	local06, #1
0c654     F2 30 62 FC | 	wrlong	local06, objptr
0c658     13 00 00 FF 
0c65c     38 E4 85 F1 | 	sub	objptr, ##9784
0c660     F2 30 02 FB | 	rdlong	local06, objptr
0c664     01 30 06 F1 | 	add	local06, #1
0c668     F2 30 62 FC | 	wrlong	local06, objptr
0c66c     37 00 00 FF 
0c670     44 E4 85 F1 | 	sub	objptr, ##28228
0c674     B4 03 90 FD | 	jmp	#LR__1023
0c678                 | LR__1014
0c678     37 00 00 FF 
0c67c     44 E4 05 F1 | 	add	objptr, ##28228
0c680     F2 16 02 FB | 	rdlong	arg03, objptr
0c684     03 16 66 F0 | 	shl	arg03, #3
0c688     02 00 00 FF 
0c68c     38 E4 85 F1 | 	sub	objptr, ##1080
0c690     F2 16 02 F1 | 	add	arg03, objptr
0c694     0B 13 02 FB | 	rdlong	arg01, arg03
0c698     35 00 00 FF 
0c69c     0C E4 85 F1 | 	sub	objptr, ##27148
0c6a0     09 35 02 F6 | 	mov	local08, arg01
0c6a4     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c6a8                 | LR__1015
0c6a8     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c6ac     01 34 06 51 |  if_ne	add	local08, #1
0c6b0     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c6b4                 | LR__1016
0c6b4     09 35 82 F1 | 	sub	local08, arg01
0c6b8     1A FB 01 F6 | 	mov	result1, local08
0c6bc     52 00 00 FF 
0c6c0     F0 E4 05 F1 | 	add	objptr, ##42224
0c6c4     F2 FA 61 FC | 	wrlong	result1, objptr
0c6c8     58 E4 85 F1 | 	sub	objptr, #88
0c6cc     F2 12 02 FB | 	rdlong	arg01, objptr
0c6d0     FD 12 82 F1 | 	sub	arg01, result1
0c6d4     04 12 86 F1 | 	sub	arg01, #4
0c6d8     03 12 26 F5 | 	andn	arg01, #3
0c6dc     F2 12 62 FC | 	wrlong	arg01, objptr
0c6e0     58 E4 05 F1 | 	add	objptr, #88
0c6e4     F2 14 02 FB | 	rdlong	arg02, objptr
0c6e8     52 00 00 FF 
0c6ec     F0 E4 85 F1 | 	sub	objptr, ##42224
0c6f0     FC 5F B1 FD | 	call	#_pslpoke
0c6f4                 | '     pslpoke memtop,l
0c6f4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c6f4     01 38 06 F6 | 	mov	local10, #1
0c6f8     52 00 00 FF 
0c6fc     F0 E4 05 F1 | 	add	objptr, ##42224
0c700     F2 3A 02 FB | 	rdlong	local11, objptr
0c704     52 00 00 FF 
0c708     F0 E4 85 F1 | 	sub	objptr, ##42224
0c70c     01 3A 06 F1 | 	add	local11, #1
0c710                 | LR__1017
0c710     1D 39 52 F2 | 	cmps	local10, local11 wc
0c714     5C 00 90 3D |  if_ae	jmp	#LR__1018
0c718     52 00 00 FF 
0c71c     98 E4 05 F1 | 	add	objptr, ##42136
0c720     F2 32 02 FB | 	rdlong	local07, objptr
0c724     03 32 06 F1 | 	add	local07, #3
0c728     1C 33 02 F1 | 	add	local07, local10
0c72c     1B 00 00 FF 
0c730     54 E4 85 F1 | 	sub	objptr, ##13908
0c734     F2 36 02 FB | 	rdlong	local09, objptr
0c738     03 36 66 F0 | 	shl	local09, #3
0c73c     02 00 00 FF 
0c740     38 E4 85 F1 | 	sub	objptr, ##1080
0c744     F2 36 02 F1 | 	add	local09, objptr
0c748     1B 13 02 FB | 	rdlong	arg01, local09
0c74c     1C 15 02 F6 | 	mov	arg02, local10
0c750     01 16 06 F6 | 	mov	arg03, #1
0c754     35 00 00 FF 
0c758     0C E4 85 F1 | 	sub	objptr, ##27148
0c75c     78 B9 B1 FD | 	call	#__system__Mid_S
0c760     FD 14 C2 FA | 	rdbyte	arg02, result1
0c764     19 13 02 F6 | 	mov	arg01, local07
0c768     14 60 B1 FD | 	call	#_pspoke
0c76c     01 38 06 F1 | 	add	local10, #1
0c770     9C FF 9F FD | 	jmp	#LR__1017
0c774                 | LR__1018
0c774     52 00 00 FF 
0c778     98 E4 05 F1 | 	add	objptr, ##42136
0c77c     F2 26 02 FB | 	rdlong	local01, objptr
0c780     2B 2A 06 F6 | 	mov	local03, #43
0c784     13 31 02 F6 | 	mov	local06, local01
0c788     14 33 02 F6 | 	mov	local07, local02
0c78c     15 3B 02 F6 | 	mov	local11, local03
0c790     08 00 00 FF 
0c794     1C E4 85 F1 | 	sub	objptr, ##4124
0c798     F2 38 02 FB | 	rdlong	local10, objptr
0c79c     1C 37 02 F6 | 	mov	local09, local10
0c7a0     01 36 66 F0 | 	shl	local09, #1
0c7a4     1C 37 02 F1 | 	add	local09, local10
0c7a8     02 36 66 F0 | 	shl	local09, #2
0c7ac     03 00 00 FF 
0c7b0     00 E4 85 F1 | 	sub	objptr, ##1536
0c7b4     F2 36 02 F1 | 	add	local09, objptr
0c7b8     1B 31 62 FC | 	wrlong	local06, local09
0c7bc     03 00 00 FF 
0c7c0     00 E4 05 F1 | 	add	objptr, ##1536
0c7c4     F2 38 02 FB | 	rdlong	local10, objptr
0c7c8     1C 37 02 F6 | 	mov	local09, local10
0c7cc     01 36 66 F0 | 	shl	local09, #1
0c7d0     1C 37 02 F1 | 	add	local09, local10
0c7d4     02 36 66 F0 | 	shl	local09, #2
0c7d8     03 00 00 FF 
0c7dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c7e0     F2 36 02 F1 | 	add	local09, objptr
0c7e4     04 36 06 F1 | 	add	local09, #4
0c7e8     1B 33 62 FC | 	wrlong	local07, local09
0c7ec     03 00 00 FF 
0c7f0     00 E4 05 F1 | 	add	objptr, ##1536
0c7f4     F2 38 02 FB | 	rdlong	local10, objptr
0c7f8     1C 37 02 F6 | 	mov	local09, local10
0c7fc     01 36 66 F0 | 	shl	local09, #1
0c800     1C 37 02 F1 | 	add	local09, local10
0c804     02 36 66 F0 | 	shl	local09, #2
0c808     03 00 00 FF 
0c80c     00 E4 85 F1 | 	sub	objptr, ##1536
0c810     F2 36 02 F1 | 	add	local09, objptr
0c814     08 36 06 F1 | 	add	local09, #8
0c818     1B 3B 62 FC | 	wrlong	local11, local09
0c81c     03 00 00 FF 
0c820     00 E4 05 F1 | 	add	objptr, ##1536
0c824     F2 30 02 FB | 	rdlong	local06, objptr
0c828     01 30 06 F1 | 	add	local06, #1
0c82c     F2 30 62 FC | 	wrlong	local06, objptr
0c830     13 00 00 FF 
0c834     38 E4 85 F1 | 	sub	objptr, ##9784
0c838     F2 30 02 FB | 	rdlong	local06, objptr
0c83c     01 30 06 F1 | 	add	local06, #1
0c840     F2 30 62 FC | 	wrlong	local06, objptr
0c844     37 00 00 FF 
0c848     44 E4 85 F1 | 	sub	objptr, ##28228
0c84c     DC 01 90 FD | 	jmp	#LR__1023
0c850                 | LR__1019
0c850     2C 2A 06 F6 | 	mov	local03, #44
0c854     37 00 00 FF 
0c858     44 E4 05 F1 | 	add	objptr, ##28228
0c85c     F2 30 02 FB | 	rdlong	local06, objptr
0c860     03 30 66 F0 | 	shl	local06, #3
0c864     02 00 00 FF 
0c868     38 E4 85 F1 | 	sub	objptr, ##1080
0c86c     F2 30 02 F1 | 	add	local06, objptr
0c870     18 13 02 FB | 	rdlong	arg01, local06
0c874     00 14 06 F6 | 	mov	arg02, #0
0c878     35 00 00 FF 
0c87c     0C E4 85 F1 | 	sub	objptr, ##27148
0c880     B0 CB B1 FD | 	call	#__system____builtin_atoi
0c884     FD 26 02 F6 | 	mov	local01, result1
0c888     13 31 02 F6 | 	mov	local06, local01
0c88c     14 33 02 F6 | 	mov	local07, local02
0c890     15 3B 02 F6 | 	mov	local11, local03
0c894     4A 00 00 FF 
0c898     7C E4 05 F1 | 	add	objptr, ##38012
0c89c     F2 38 02 FB | 	rdlong	local10, objptr
0c8a0     1C 37 02 F6 | 	mov	local09, local10
0c8a4     01 36 66 F0 | 	shl	local09, #1
0c8a8     1C 37 02 F1 | 	add	local09, local10
0c8ac     02 36 66 F0 | 	shl	local09, #2
0c8b0     03 00 00 FF 
0c8b4     00 E4 85 F1 | 	sub	objptr, ##1536
0c8b8     F2 36 02 F1 | 	add	local09, objptr
0c8bc     1B 31 62 FC | 	wrlong	local06, local09
0c8c0     03 00 00 FF 
0c8c4     00 E4 05 F1 | 	add	objptr, ##1536
0c8c8     F2 38 02 FB | 	rdlong	local10, objptr
0c8cc     1C 37 02 F6 | 	mov	local09, local10
0c8d0     01 36 66 F0 | 	shl	local09, #1
0c8d4     1C 37 02 F1 | 	add	local09, local10
0c8d8     02 36 66 F0 | 	shl	local09, #2
0c8dc     03 00 00 FF 
0c8e0     00 E4 85 F1 | 	sub	objptr, ##1536
0c8e4     F2 36 02 F1 | 	add	local09, objptr
0c8e8     04 36 06 F1 | 	add	local09, #4
0c8ec     1B 33 62 FC | 	wrlong	local07, local09
0c8f0     03 00 00 FF 
0c8f4     00 E4 05 F1 | 	add	objptr, ##1536
0c8f8     F2 38 02 FB | 	rdlong	local10, objptr
0c8fc     1C 37 02 F6 | 	mov	local09, local10
0c900     01 36 66 F0 | 	shl	local09, #1
0c904     1C 37 02 F1 | 	add	local09, local10
0c908     02 36 66 F0 | 	shl	local09, #2
0c90c     03 00 00 FF 
0c910     00 E4 85 F1 | 	sub	objptr, ##1536
0c914     F2 36 02 F1 | 	add	local09, objptr
0c918     08 36 06 F1 | 	add	local09, #8
0c91c     1B 3B 62 FC | 	wrlong	local11, local09
0c920     03 00 00 FF 
0c924     00 E4 05 F1 | 	add	objptr, ##1536
0c928     F2 30 02 FB | 	rdlong	local06, objptr
0c92c     01 30 06 F1 | 	add	local06, #1
0c930     F2 30 62 FC | 	wrlong	local06, objptr
0c934     13 00 00 FF 
0c938     38 E4 85 F1 | 	sub	objptr, ##9784
0c93c     F2 30 02 FB | 	rdlong	local06, objptr
0c940     01 30 06 F1 | 	add	local06, #1
0c944     F2 30 62 FC | 	wrlong	local06, objptr
0c948     37 00 00 FF 
0c94c     44 E4 85 F1 | 	sub	objptr, ##28228
0c950     D8 00 90 FD | 	jmp	#LR__1023
0c954                 | LR__1020
0c954     16 13 02 F6 | 	mov	arg01, local04
0c958     24 04 B0 FD | 	call	#_getvar
0c95c     37 00 00 FF 
0c960     44 E4 05 F1 | 	add	objptr, ##28228
0c964     F2 30 02 FB | 	rdlong	local06, objptr
0c968     01 30 06 F1 | 	add	local06, #1
0c96c     F2 30 62 FC | 	wrlong	local06, objptr
0c970     37 00 00 FF 
0c974     44 E4 85 F1 | 	sub	objptr, ##28228
0c978                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0c978     01 FA 55 F2 | 	cmps	result1, #1 wc
0c97c     B0 00 90 3D |  if_ae	jmp	#LR__1024
0c980     A8 00 90 FD | 	jmp	#LR__1023
0c984                 | LR__1021
0c984     37 00 00 FF 
0c988     44 E4 05 F1 | 	add	objptr, ##28228
0c98c     F2 30 02 FB | 	rdlong	local06, objptr
0c990     01 30 06 F1 | 	add	local06, #1
0c994     F2 30 62 FC | 	wrlong	local06, objptr
0c998     37 00 00 FF 
0c99c     44 E4 85 F1 | 	sub	objptr, ##28228
0c9a0     20 F1 BF FD | 	call	#_expr
0c9a4                 | '     ct+=1
0c9a4                 | '     err=expr() : if err>0 then return err 
0c9a4     01 FA 55 F2 | 	cmps	result1, #1 wc
0c9a8     84 00 90 3D |  if_ae	jmp	#LR__1024
0c9ac                 | '     if lparts(ct).token=token_rpar then ct+=1
0c9ac     37 00 00 FF 
0c9b0     44 E4 05 F1 | 	add	objptr, ##28228
0c9b4     F2 3A 02 FB | 	rdlong	local11, objptr
0c9b8     03 3A 66 F0 | 	shl	local11, #3
0c9bc     02 00 00 FF 
0c9c0     38 E4 85 F1 | 	sub	objptr, ##1080
0c9c4     F2 3A 02 F1 | 	add	local11, objptr
0c9c8     04 3A 06 F1 | 	add	local11, #4
0c9cc     1D 3B 02 FB | 	rdlong	local11, local11
0c9d0     14 3A 0E F2 | 	cmp	local11, #20 wz
0c9d4     35 00 00 FF 
0c9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0c9dc     4C 00 90 5D |  if_ne	jmp	#LR__1023
0c9e0     37 00 00 FF 
0c9e4     44 E4 05 F1 | 	add	objptr, ##28228
0c9e8     F2 30 02 FB | 	rdlong	local06, objptr
0c9ec     01 30 06 F1 | 	add	local06, #1
0c9f0     F2 30 62 FC | 	wrlong	local06, objptr
0c9f4     37 00 00 FF 
0c9f8     44 E4 85 F1 | 	sub	objptr, ##28228
0c9fc     2C 00 90 FD | 	jmp	#LR__1023
0ca00                 | LR__1022
0ca00     16 13 02 F6 | 	mov	arg01, local04
0ca04     34 00 B0 FD | 	call	#_getfun
0ca08     37 00 00 FF 
0ca0c     44 E4 05 F1 | 	add	objptr, ##28228
0ca10     F2 30 02 FB | 	rdlong	local06, objptr
0ca14     01 30 06 F1 | 	add	local06, #1
0ca18     F2 30 62 FC | 	wrlong	local06, objptr
0ca1c     37 00 00 FF 
0ca20     44 E4 85 F1 | 	sub	objptr, ##28228
0ca24                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ca24     01 FA 55 F2 | 	cmps	result1, #1 wc
0ca28     04 00 90 3D |  if_ae	jmp	#LR__1024
0ca2c                 | LR__1023
0ca2c                 | ' return 0  
0ca2c     00 FA 05 F6 | 	mov	result1, #0
0ca30                 | LR__1024
0ca30     A7 F0 03 F6 | 	mov	ptra, fp
0ca34     B2 00 A0 FD | 	call	#popregs_
0ca38                 | _getvalue_ret
0ca38     2D 00 64 FD | 	ret
0ca3c                 | 
0ca3c                 | ' 
0ca3c                 | ' ' Get a function result 
0ca3c                 | ' 
0ca3c                 | ' function getfun(m as integer) as ulong
0ca3c                 | _getfun
0ca3c     0F 4A 05 F6 | 	mov	COUNT_, #15
0ca40     A8 00 A0 FD | 	call	#pushregs_
0ca44                 | _getfun_enter
0ca44     09 2D 02 F6 | 	mov	local04, arg01
0ca48     37 00 00 FF 
0ca4c     44 E4 05 F1 | 	add	objptr, ##28228
0ca50     F2 2E 02 FB | 	rdlong	local05, objptr
0ca54     17 31 02 F6 | 	mov	local06, local05
0ca58     00 32 06 F6 | 	mov	local07, #0
0ca5c                 | ' oldct=ct
0ca5c                 | ' numpar=0
0ca5c                 | ' if lparts(ct+1).token=token_lpar then
0ca5c     01 2E 06 F1 | 	add	local05, #1
0ca60     03 2E 66 F0 | 	shl	local05, #3
0ca64     02 00 00 FF 
0ca68     38 E4 85 F1 | 	sub	objptr, ##1080
0ca6c     F2 2E 02 F1 | 	add	local05, objptr
0ca70     04 2E 06 F1 | 	add	local05, #4
0ca74     17 2F 02 FB | 	rdlong	local05, local05
0ca78     15 2E 0E F2 | 	cmp	local05, #21 wz
0ca7c     35 00 00 FF 
0ca80     0C E4 85 F1 | 	sub	objptr, ##27148
0ca84     54 01 90 5D |  if_ne	jmp	#LR__1034
0ca88     37 00 00 FF 
0ca8c     44 E4 05 F1 | 	add	objptr, ##28228
0ca90     F2 34 02 FB | 	rdlong	local08, objptr
0ca94     01 34 06 F1 | 	add	local08, #1
0ca98     F2 34 62 FC | 	wrlong	local08, objptr
0ca9c     37 00 00 FF 
0caa0     44 E4 85 F1 | 	sub	objptr, ##28228
0caa4                 | '   ct+=1 											' omit this lpar, this is for expr list
0caa4                 | '   do
0caa4                 | LR__1030
0caa4     37 00 00 FF 
0caa8     44 E4 05 F1 | 	add	objptr, ##28228
0caac     F2 2E 02 FB | 	rdlong	local05, objptr
0cab0     01 2E 06 F1 | 	add	local05, #1
0cab4     F2 2E 62 FC | 	wrlong	local05, objptr
0cab8                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cab8                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cab8     03 2E 66 F0 | 	shl	local05, #3
0cabc     02 00 00 FF 
0cac0     38 E4 85 F1 | 	sub	objptr, ##1080
0cac4     F2 2E 02 F1 | 	add	local05, objptr
0cac8     04 2E 06 F1 | 	add	local05, #4
0cacc     17 35 02 FB | 	rdlong	local08, local05
0cad0     15 34 0E F2 | 	cmp	local08, #21 wz
0cad4     35 00 00 FF 
0cad8     0C E4 85 F1 | 	sub	objptr, ##27148
0cadc     44 00 90 5D |  if_ne	jmp	#LR__1031
0cae0     37 00 00 FF 
0cae4     44 E4 05 F1 | 	add	objptr, ##28228
0cae8     F2 34 02 FB | 	rdlong	local08, objptr
0caec     01 34 06 F1 | 	add	local08, #1
0caf0     F2 34 62 FC | 	wrlong	local08, objptr
0caf4     37 00 00 FF 
0caf8     44 E4 85 F1 | 	sub	objptr, ##28228
0cafc     C4 EF BF FD | 	call	#_expr
0cb00     FD 36 02 F6 | 	mov	local09, result1
0cb04     37 00 00 FF 
0cb08     44 E4 05 F1 | 	add	objptr, ##28228
0cb0c     F2 34 02 FB | 	rdlong	local08, objptr
0cb10     01 34 06 F1 | 	add	local08, #1
0cb14     F2 34 62 FC | 	wrlong	local08, objptr
0cb18     37 00 00 FF 
0cb1c     44 E4 85 F1 | 	sub	objptr, ##28228
0cb20     08 00 90 FD | 	jmp	#LR__1032
0cb24                 | LR__1031
0cb24     9C EF BF FD | 	call	#_expr
0cb28     FD 36 02 F6 | 	mov	local09, result1
0cb2c                 | LR__1032
0cb2c                 | '     if err>0 then return err
0cb2c     01 36 16 F2 | 	cmp	local09, #1 wc
0cb30     1B FB 01 36 |  if_ae	mov	result1, local09
0cb34     3C 02 90 3D |  if_ae	jmp	#LR__1036
0cb38     01 32 06 F1 | 	add	local07, #1
0cb3c     37 00 00 FF 
0cb40     44 E4 05 F1 | 	add	objptr, ##28228
0cb44     F2 2E 02 FB | 	rdlong	local05, objptr
0cb48     03 2E 66 F0 | 	shl	local05, #3
0cb4c     02 00 00 FF 
0cb50     38 E4 85 F1 | 	sub	objptr, ##1080
0cb54     F2 2E 02 F1 | 	add	local05, objptr
0cb58     04 2E 06 F1 | 	add	local05, #4
0cb5c     17 37 02 FB | 	rdlong	local09, local05
0cb60     14 36 0E F2 | 	cmp	local09, #20 wz
0cb64     35 00 00 FF 
0cb68     0C E4 85 F1 | 	sub	objptr, ##27148
0cb6c     34 00 90 AD |  if_e	jmp	#LR__1033
0cb70     37 00 00 FF 
0cb74     44 E4 05 F1 | 	add	objptr, ##28228
0cb78     F2 36 02 FB | 	rdlong	local09, objptr
0cb7c     03 36 66 F0 | 	shl	local09, #3
0cb80     02 00 00 FF 
0cb84     38 E4 85 F1 | 	sub	objptr, ##1080
0cb88     F2 36 02 F1 | 	add	local09, objptr
0cb8c     04 36 06 F1 | 	add	local09, #4
0cb90     1B 37 02 FB | 	rdlong	local09, local09
0cb94     FE 37 0E F2 | 	cmp	local09, #510 wz
0cb98     35 00 00 FF 
0cb9c     0C E4 85 F1 | 	sub	objptr, ##27148
0cba0     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0cba4                 | LR__1033
0cba4                 | '   if lparts(ct).token=token_end then return 14
0cba4     37 00 00 FF 
0cba8     44 E4 05 F1 | 	add	objptr, ##28228
0cbac     F2 2E 02 FB | 	rdlong	local05, objptr
0cbb0     03 2E 66 F0 | 	shl	local05, #3
0cbb4     02 00 00 FF 
0cbb8     38 E4 85 F1 | 	sub	objptr, ##1080
0cbbc     F2 2E 02 F1 | 	add	local05, objptr
0cbc0     04 2E 06 F1 | 	add	local05, #4
0cbc4     17 37 02 FB | 	rdlong	local09, local05
0cbc8     FE 37 0E F2 | 	cmp	local09, #510 wz
0cbcc     35 00 00 FF 
0cbd0     0C E4 85 F1 | 	sub	objptr, ##27148
0cbd4     0E FA 05 A6 |  if_e	mov	result1, #14
0cbd8     98 01 90 AD |  if_e	jmp	#LR__1036
0cbdc                 | LR__1034
0cbdc     19 27 02 F6 | 	mov	local01, local07
0cbe0     03 30 66 F0 | 	shl	local06, #3
0cbe4     35 00 00 FF 
0cbe8     0C E4 05 F1 | 	add	objptr, ##27148
0cbec     F2 30 02 F1 | 	add	local06, objptr
0cbf0     04 30 06 F1 | 	add	local06, #4
0cbf4     18 2B 02 FB | 	rdlong	local03, local06
0cbf8     13 35 02 F6 | 	mov	local08, local01
0cbfc     14 39 02 F6 | 	mov	local10, local02
0cc00     15 3B 02 F6 | 	mov	local11, local03
0cc04     15 00 00 FF 
0cc08     70 E4 05 F1 | 	add	objptr, ##10864
0cc0c     F2 3C 02 FB | 	rdlong	local12, objptr
0cc10     1E 3F 02 F6 | 	mov	local13, local12
0cc14     01 3E 66 F0 | 	shl	local13, #1
0cc18     1E 3F 02 F1 | 	add	local13, local12
0cc1c     02 3E 66 F0 | 	shl	local13, #2
0cc20     03 00 00 FF 
0cc24     00 E4 85 F1 | 	sub	objptr, ##1536
0cc28     F2 3E 02 F1 | 	add	local13, objptr
0cc2c     1F 35 62 FC | 	wrlong	local08, local13
0cc30     03 00 00 FF 
0cc34     00 E4 05 F1 | 	add	objptr, ##1536
0cc38     F2 34 02 FB | 	rdlong	local08, objptr
0cc3c     1A 41 02 F6 | 	mov	local14, local08
0cc40     01 40 66 F0 | 	shl	local14, #1
0cc44     1A 41 02 F1 | 	add	local14, local08
0cc48     02 40 66 F0 | 	shl	local14, #2
0cc4c     03 00 00 FF 
0cc50     00 E4 85 F1 | 	sub	objptr, ##1536
0cc54     F2 40 02 F1 | 	add	local14, objptr
0cc58     04 40 06 F1 | 	add	local14, #4
0cc5c     20 39 62 FC | 	wrlong	local10, local14
0cc60     03 00 00 FF 
0cc64     00 E4 05 F1 | 	add	objptr, ##1536
0cc68     F2 34 02 FB | 	rdlong	local08, objptr
0cc6c     1A 43 02 F6 | 	mov	local15, local08
0cc70     01 42 66 F0 | 	shl	local15, #1
0cc74     1A 43 02 F1 | 	add	local15, local08
0cc78     02 42 66 F0 | 	shl	local15, #2
0cc7c     03 00 00 FF 
0cc80     00 E4 85 F1 | 	sub	objptr, ##1536
0cc84     F2 42 02 F1 | 	add	local15, objptr
0cc88     08 42 06 F1 | 	add	local15, #8
0cc8c     21 3B 62 FC | 	wrlong	local11, local15
0cc90     03 00 00 FF 
0cc94     00 E4 05 F1 | 	add	objptr, ##1536
0cc98     F2 34 02 FB | 	rdlong	local08, objptr
0cc9c     01 34 06 F1 | 	add	local08, #1
0cca0     F2 34 62 FC | 	wrlong	local08, objptr
0cca4     4A 00 00 FF 
0cca8     7C E4 85 F1 | 	sub	objptr, ##38012
0ccac                 | ' t2.result.uresult=numpar
0ccac                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0ccac                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0ccac                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0ccac     FF FF 7F FF 
0ccb0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ccb4     B8 00 90 5D |  if_ne	jmp	#LR__1035
0ccb8     15 2A 06 F6 | 	mov	local03, #21
0ccbc     13 35 02 F6 | 	mov	local08, local01
0ccc0     14 39 02 F6 | 	mov	local10, local02
0ccc4     15 3B 02 F6 | 	mov	local11, local03
0ccc8     4A 00 00 FF 
0cccc     7C E4 05 F1 | 	add	objptr, ##38012
0ccd0     F2 3C 02 FB | 	rdlong	local12, objptr
0ccd4     1E 3F 02 F6 | 	mov	local13, local12
0ccd8     01 3E 66 F0 | 	shl	local13, #1
0ccdc     1E 3F 02 F1 | 	add	local13, local12
0cce0     02 3E 66 F0 | 	shl	local13, #2
0cce4     03 00 00 FF 
0cce8     00 E4 85 F1 | 	sub	objptr, ##1536
0ccec     F2 3E 02 F1 | 	add	local13, objptr
0ccf0     1F 35 62 FC | 	wrlong	local08, local13
0ccf4     03 00 00 FF 
0ccf8     00 E4 05 F1 | 	add	objptr, ##1536
0ccfc     F2 42 02 FB | 	rdlong	local15, objptr
0cd00     21 41 02 F6 | 	mov	local14, local15
0cd04     01 40 66 F0 | 	shl	local14, #1
0cd08     21 41 02 F1 | 	add	local14, local15
0cd0c     02 40 66 F0 | 	shl	local14, #2
0cd10     03 00 00 FF 
0cd14     00 E4 85 F1 | 	sub	objptr, ##1536
0cd18     F2 40 02 F1 | 	add	local14, objptr
0cd1c     04 40 06 F1 | 	add	local14, #4
0cd20     20 39 62 FC | 	wrlong	local10, local14
0cd24     03 00 00 FF 
0cd28     00 E4 05 F1 | 	add	objptr, ##1536
0cd2c     F2 40 02 FB | 	rdlong	local14, objptr
0cd30     20 43 02 F6 | 	mov	local15, local14
0cd34     01 42 66 F0 | 	shl	local15, #1
0cd38     20 43 02 F1 | 	add	local15, local14
0cd3c     02 42 66 F0 | 	shl	local15, #2
0cd40     03 00 00 FF 
0cd44     00 E4 85 F1 | 	sub	objptr, ##1536
0cd48     F2 42 02 F1 | 	add	local15, objptr
0cd4c     08 42 06 F1 | 	add	local15, #8
0cd50     21 3B 62 FC | 	wrlong	local11, local15
0cd54     03 00 00 FF 
0cd58     00 E4 05 F1 | 	add	objptr, ##1536
0cd5c     F2 34 02 FB | 	rdlong	local08, objptr
0cd60     01 34 06 F1 | 	add	local08, #1
0cd64     F2 34 62 FC | 	wrlong	local08, objptr
0cd68     4A 00 00 FF 
0cd6c     7C E4 85 F1 | 	sub	objptr, ##38012
0cd70                 | LR__1035
0cd70                 | ' return 0
0cd70     00 FA 05 F6 | 	mov	result1, #0
0cd74                 | LR__1036
0cd74     A7 F0 03 F6 | 	mov	ptra, fp
0cd78     B2 00 A0 FD | 	call	#popregs_
0cd7c                 | _getfun_ret
0cd7c     2D 00 64 FD | 	ret
0cd80                 | 
0cd80                 | '   
0cd80                 | '   
0cd80                 | ' function getvar(m as integer) as ulong
0cd80                 | _getvar
0cd80     11 4A 05 F6 | 	mov	COUNT_, #17
0cd84     A8 00 A0 FD | 	call	#pushregs_
0cd88                 | _getvar_enter
0cd88     09 2D 02 F6 | 	mov	local04, arg01
0cd8c     37 00 00 FF 
0cd90     44 E4 05 F1 | 	add	objptr, ##28228
0cd94     F2 2E 02 FB | 	rdlong	local05, objptr
0cd98     03 2E 66 F0 | 	shl	local05, #3
0cd9c     02 00 00 FF 
0cda0     38 E4 85 F1 | 	sub	objptr, ##1080
0cda4     F2 2E 02 F1 | 	add	local05, objptr
0cda8     17 31 02 FB | 	rdlong	local06, local05
0cdac     01 32 66 F6 | 	neg	local07, #1
0cdb0                 | ' 
0cdb0                 | ' varname$=lparts(ct).part$
0cdb0                 | ' j=-1
0cdb0                 | ' 
0cdb0                 | ' for i=0 to varnum-1
0cdb0     00 34 06 F6 | 	mov	local08, #0
0cdb4     04 E4 85 F1 | 	sub	objptr, #4
0cdb8     F2 36 02 FB | 	rdlong	local09, objptr
0cdbc     35 00 00 FF 
0cdc0     08 E4 85 F1 | 	sub	objptr, ##27144
0cdc4                 | LR__1040
0cdc4     1B 35 52 F2 | 	cmps	local08, local09 wc
0cdc8     38 00 90 3D |  if_ae	jmp	#LR__1041
0cdcc                 | '   if variables(i).name=varname$ then j=i : exit
0cdcc     1A 2F 02 F6 | 	mov	local05, local08
0cdd0     04 2E 66 F0 | 	shl	local05, #4
0cdd4     14 00 00 FF 
0cdd8     F8 E5 05 F1 | 	add	objptr, ##10744
0cddc     F2 2E 02 F1 | 	add	local05, objptr
0cde0     17 13 02 FB | 	rdlong	arg01, local05
0cde4     18 15 02 F6 | 	mov	arg02, local06
0cde8     14 00 00 FF 
0cdec     F8 E5 85 F1 | 	sub	objptr, ##10744
0cdf0     74 91 B1 FD | 	call	#__system___string_cmp
0cdf4     00 FA 0D F2 | 	cmp	result1, #0 wz
0cdf8     1A 33 02 A6 |  if_e	mov	local07, local08
0cdfc     01 34 06 51 |  if_ne	add	local08, #1
0ce00     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0ce04                 | LR__1041
0ce04                 | ' if  j=-1 andalso varnum<maxvars then   
0ce04     FF FF 7F FF 
0ce08     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0ce0c     A8 00 90 5D |  if_ne	jmp	#LR__1042
0ce10     35 00 00 FF 
0ce14     08 E4 05 F1 | 	add	objptr, ##27144
0ce18     F2 36 02 FB | 	rdlong	local09, objptr
0ce1c     35 00 00 FF 
0ce20     08 E4 85 F1 | 	sub	objptr, ##27144
0ce24     02 00 00 FF 
0ce28     00 36 56 F2 | 	cmps	local09, ##1024 wc
0ce2c     88 00 90 3D |  if_ae	jmp	#LR__1042
0ce30     35 00 00 FF 
0ce34     08 E4 05 F1 | 	add	objptr, ##27144
0ce38     F2 2E 02 FB | 	rdlong	local05, objptr
0ce3c     04 2E 66 F0 | 	shl	local05, #4
0ce40     20 00 00 FF 
0ce44     10 E4 85 F1 | 	sub	objptr, ##16400
0ce48     F2 2E 02 F1 | 	add	local05, objptr
0ce4c     17 31 62 FC | 	wrlong	local06, local05
0ce50     20 00 00 FF 
0ce54     10 E4 05 F1 | 	add	objptr, ##16400
0ce58     F2 2E 02 FB | 	rdlong	local05, objptr
0ce5c     04 2E 66 F0 | 	shl	local05, #4
0ce60     20 00 00 FF 
0ce64     10 E4 85 F1 | 	sub	objptr, ##16400
0ce68     F2 2E 02 F1 | 	add	local05, objptr
0ce6c     04 2E 06 F1 | 	add	local05, #4
0ce70     17 01 68 FC | 	wrlong	#0, local05
0ce74     20 00 00 FF 
0ce78     10 E4 05 F1 | 	add	objptr, ##16400
0ce7c     F2 2E 02 FB | 	rdlong	local05, objptr
0ce80     04 2E 66 F0 | 	shl	local05, #4
0ce84     20 00 00 FF 
0ce88     10 E4 85 F1 | 	sub	objptr, ##16400
0ce8c     F2 2E 02 F1 | 	add	local05, objptr
0ce90     0C 2E 06 F1 | 	add	local05, #12
0ce94     17 39 68 FC | 	wrlong	#28, local05
0ce98     20 00 00 FF 
0ce9c     10 E4 05 F1 | 	add	objptr, ##16400
0cea0     F2 36 02 FB | 	rdlong	local09, objptr
0cea4     1B 33 02 F6 | 	mov	local07, local09
0cea8     01 36 06 F1 | 	add	local09, #1
0ceac     F2 36 62 FC | 	wrlong	local09, objptr
0ceb0     35 00 00 FF 
0ceb4     08 E4 85 F1 | 	sub	objptr, ##27144
0ceb8                 | LR__1042
0ceb8     00 36 06 F6 | 	mov	local09, #0
0cebc                 | ' numpar=0
0cebc                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0cebc     37 00 00 FF 
0cec0     44 E4 05 F1 | 	add	objptr, ##28228
0cec4     F2 2E 02 FB | 	rdlong	local05, objptr
0cec8     01 2E 06 F1 | 	add	local05, #1
0cecc     03 2E 66 F0 | 	shl	local05, #3
0ced0     02 00 00 FF 
0ced4     38 E4 85 F1 | 	sub	objptr, ##1080
0ced8     F2 2E 02 F1 | 	add	local05, objptr
0cedc     04 2E 06 F1 | 	add	local05, #4
0cee0     17 35 02 FB | 	rdlong	local08, local05
0cee4     15 34 0E F2 | 	cmp	local08, #21 wz
0cee8     35 00 00 FF 
0ceec     0C E4 85 F1 | 	sub	objptr, ##27148
0cef0     54 01 90 5D |  if_ne	jmp	#LR__1047
0cef4     37 00 00 FF 
0cef8     44 E4 05 F1 | 	add	objptr, ##28228
0cefc     F2 38 02 FB | 	rdlong	local10, objptr
0cf00     01 38 06 F1 | 	add	local10, #1
0cf04     F2 38 62 FC | 	wrlong	local10, objptr
0cf08     37 00 00 FF 
0cf0c     44 E4 85 F1 | 	sub	objptr, ##28228
0cf10                 | '   ct+=1 											' omit this lpar, this is for expr list
0cf10                 | '   do
0cf10                 | LR__1043
0cf10     37 00 00 FF 
0cf14     44 E4 05 F1 | 	add	objptr, ##28228
0cf18     F2 2E 02 FB | 	rdlong	local05, objptr
0cf1c     01 2E 06 F1 | 	add	local05, #1
0cf20     F2 2E 62 FC | 	wrlong	local05, objptr
0cf24                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cf24                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cf24     03 2E 66 F0 | 	shl	local05, #3
0cf28     02 00 00 FF 
0cf2c     38 E4 85 F1 | 	sub	objptr, ##1080
0cf30     F2 2E 02 F1 | 	add	local05, objptr
0cf34     04 2E 06 F1 | 	add	local05, #4
0cf38     17 39 02 FB | 	rdlong	local10, local05
0cf3c     15 38 0E F2 | 	cmp	local10, #21 wz
0cf40     35 00 00 FF 
0cf44     0C E4 85 F1 | 	sub	objptr, ##27148
0cf48     44 00 90 5D |  if_ne	jmp	#LR__1044
0cf4c     37 00 00 FF 
0cf50     44 E4 05 F1 | 	add	objptr, ##28228
0cf54     F2 38 02 FB | 	rdlong	local10, objptr
0cf58     01 38 06 F1 | 	add	local10, #1
0cf5c     F2 38 62 FC | 	wrlong	local10, objptr
0cf60     37 00 00 FF 
0cf64     44 E4 85 F1 | 	sub	objptr, ##28228
0cf68     58 EB BF FD | 	call	#_expr
0cf6c     FD 3A 02 F6 | 	mov	local11, result1
0cf70     37 00 00 FF 
0cf74     44 E4 05 F1 | 	add	objptr, ##28228
0cf78     F2 38 02 FB | 	rdlong	local10, objptr
0cf7c     01 38 06 F1 | 	add	local10, #1
0cf80     F2 38 62 FC | 	wrlong	local10, objptr
0cf84     37 00 00 FF 
0cf88     44 E4 85 F1 | 	sub	objptr, ##28228
0cf8c     08 00 90 FD | 	jmp	#LR__1045
0cf90                 | LR__1044
0cf90     30 EB BF FD | 	call	#_expr
0cf94     FD 3A 02 F6 | 	mov	local11, result1
0cf98                 | LR__1045
0cf98                 | '     if err>0 then return err
0cf98     01 3A 56 F2 | 	cmps	local11, #1 wc
0cf9c     1D FB 01 36 |  if_ae	mov	result1, local11
0cfa0     2C 02 90 3D |  if_ae	jmp	#LR__1049
0cfa4     01 36 06 F1 | 	add	local09, #1
0cfa8     37 00 00 FF 
0cfac     44 E4 05 F1 | 	add	objptr, ##28228
0cfb0     F2 2E 02 FB | 	rdlong	local05, objptr
0cfb4     03 2E 66 F0 | 	shl	local05, #3
0cfb8     02 00 00 FF 
0cfbc     38 E4 85 F1 | 	sub	objptr, ##1080
0cfc0     F2 2E 02 F1 | 	add	local05, objptr
0cfc4     04 2E 06 F1 | 	add	local05, #4
0cfc8     17 3B 02 FB | 	rdlong	local11, local05
0cfcc     14 3A 0E F2 | 	cmp	local11, #20 wz
0cfd0     35 00 00 FF 
0cfd4     0C E4 85 F1 | 	sub	objptr, ##27148
0cfd8     34 00 90 AD |  if_e	jmp	#LR__1046
0cfdc     37 00 00 FF 
0cfe0     44 E4 05 F1 | 	add	objptr, ##28228
0cfe4     F2 3A 02 FB | 	rdlong	local11, objptr
0cfe8     03 3A 66 F0 | 	shl	local11, #3
0cfec     02 00 00 FF 
0cff0     38 E4 85 F1 | 	sub	objptr, ##1080
0cff4     F2 3A 02 F1 | 	add	local11, objptr
0cff8     04 3A 06 F1 | 	add	local11, #4
0cffc     1D 3B 02 FB | 	rdlong	local11, local11
0d000     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d004     35 00 00 FF 
0d008     0C E4 85 F1 | 	sub	objptr, ##27148
0d00c     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d010                 | LR__1046
0d010                 | '     if lparts(ct).token=token_end then return 14
0d010     37 00 00 FF 
0d014     44 E4 05 F1 | 	add	objptr, ##28228
0d018     F2 2E 02 FB | 	rdlong	local05, objptr
0d01c     03 2E 66 F0 | 	shl	local05, #3
0d020     02 00 00 FF 
0d024     38 E4 85 F1 | 	sub	objptr, ##1080
0d028     F2 2E 02 F1 | 	add	local05, objptr
0d02c     04 2E 06 F1 | 	add	local05, #4
0d030     17 3B 02 FB | 	rdlong	local11, local05
0d034     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d038     35 00 00 FF 
0d03c     0C E4 85 F1 | 	sub	objptr, ##27148
0d040     0E FA 05 A6 |  if_e	mov	result1, #14
0d044     88 01 90 AD |  if_e	jmp	#LR__1049
0d048                 | LR__1047
0d048     1B 29 02 F6 | 	mov	local02, local09
0d04c     11 2A 06 F6 | 	mov	local03, #17
0d050     19 27 02 F6 | 	mov	local01, local07
0d054     13 39 02 F6 | 	mov	local10, local01
0d058     14 3D 02 F6 | 	mov	local12, local02
0d05c     15 3F 02 F6 | 	mov	local13, local03
0d060     4A 00 00 FF 
0d064     7C E4 05 F1 | 	add	objptr, ##38012
0d068     F2 40 02 FB | 	rdlong	local14, objptr
0d06c     20 43 02 F6 | 	mov	local15, local14
0d070     01 42 66 F0 | 	shl	local15, #1
0d074     20 43 02 F1 | 	add	local15, local14
0d078     02 42 66 F0 | 	shl	local15, #2
0d07c     03 00 00 FF 
0d080     00 E4 85 F1 | 	sub	objptr, ##1536
0d084     F2 42 02 F1 | 	add	local15, objptr
0d088     21 39 62 FC | 	wrlong	local10, local15
0d08c     03 00 00 FF 
0d090     00 E4 05 F1 | 	add	objptr, ##1536
0d094     F2 38 02 FB | 	rdlong	local10, objptr
0d098     1C 45 02 F6 | 	mov	local16, local10
0d09c     01 44 66 F0 | 	shl	local16, #1
0d0a0     1C 45 02 F1 | 	add	local16, local10
0d0a4     02 44 66 F0 | 	shl	local16, #2
0d0a8     03 00 00 FF 
0d0ac     00 E4 85 F1 | 	sub	objptr, ##1536
0d0b0     F2 44 02 F1 | 	add	local16, objptr
0d0b4     04 44 06 F1 | 	add	local16, #4
0d0b8     22 3D 62 FC | 	wrlong	local12, local16
0d0bc     03 00 00 FF 
0d0c0     00 E4 05 F1 | 	add	objptr, ##1536
0d0c4     F2 38 02 FB | 	rdlong	local10, objptr
0d0c8     1C 47 02 F6 | 	mov	local17, local10
0d0cc     01 46 66 F0 | 	shl	local17, #1
0d0d0     1C 47 02 F1 | 	add	local17, local10
0d0d4     02 46 66 F0 | 	shl	local17, #2
0d0d8     03 00 00 FF 
0d0dc     00 E4 85 F1 | 	sub	objptr, ##1536
0d0e0     F2 46 02 F1 | 	add	local17, objptr
0d0e4     08 46 06 F1 | 	add	local17, #8
0d0e8     23 3F 62 FC | 	wrlong	local13, local17
0d0ec     03 00 00 FF 
0d0f0     00 E4 05 F1 | 	add	objptr, ##1536
0d0f4     F2 38 02 FB | 	rdlong	local10, objptr
0d0f8     01 38 06 F1 | 	add	local10, #1
0d0fc     F2 38 62 FC | 	wrlong	local10, objptr
0d100     4A 00 00 FF 
0d104     7C E4 85 F1 | 	sub	objptr, ##38012
0d108                 | ' t2.result.twowords(1)=numpar
0d108                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d108                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d108                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d108     FF FF 7F FF 
0d10c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d110     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d114     15 2A 06 F6 | 	mov	local03, #21
0d118     13 39 02 F6 | 	mov	local10, local01
0d11c     14 3D 02 F6 | 	mov	local12, local02
0d120     15 3F 02 F6 | 	mov	local13, local03
0d124     4A 00 00 FF 
0d128     7C E4 05 F1 | 	add	objptr, ##38012
0d12c     F2 40 02 FB | 	rdlong	local14, objptr
0d130     20 43 02 F6 | 	mov	local15, local14
0d134     01 42 66 F0 | 	shl	local15, #1
0d138     20 43 02 F1 | 	add	local15, local14
0d13c     02 42 66 F0 | 	shl	local15, #2
0d140     03 00 00 FF 
0d144     00 E4 85 F1 | 	sub	objptr, ##1536
0d148     F2 42 02 F1 | 	add	local15, objptr
0d14c     21 39 62 FC | 	wrlong	local10, local15
0d150     03 00 00 FF 
0d154     00 E4 05 F1 | 	add	objptr, ##1536
0d158     F2 46 02 FB | 	rdlong	local17, objptr
0d15c     23 45 02 F6 | 	mov	local16, local17
0d160     01 44 66 F0 | 	shl	local16, #1
0d164     23 45 02 F1 | 	add	local16, local17
0d168     02 44 66 F0 | 	shl	local16, #2
0d16c     03 00 00 FF 
0d170     00 E4 85 F1 | 	sub	objptr, ##1536
0d174     F2 44 02 F1 | 	add	local16, objptr
0d178     04 44 06 F1 | 	add	local16, #4
0d17c     22 3D 62 FC | 	wrlong	local12, local16
0d180     03 00 00 FF 
0d184     00 E4 05 F1 | 	add	objptr, ##1536
0d188     F2 44 02 FB | 	rdlong	local16, objptr
0d18c     22 47 02 F6 | 	mov	local17, local16
0d190     01 46 66 F0 | 	shl	local17, #1
0d194     22 47 02 F1 | 	add	local17, local16
0d198     02 46 66 F0 | 	shl	local17, #2
0d19c     03 00 00 FF 
0d1a0     00 E4 85 F1 | 	sub	objptr, ##1536
0d1a4     F2 46 02 F1 | 	add	local17, objptr
0d1a8     08 46 06 F1 | 	add	local17, #8
0d1ac     23 3F 62 FC | 	wrlong	local13, local17
0d1b0     03 00 00 FF 
0d1b4     00 E4 05 F1 | 	add	objptr, ##1536
0d1b8     F2 38 02 FB | 	rdlong	local10, objptr
0d1bc     01 38 06 F1 | 	add	local10, #1
0d1c0     F2 38 62 FC | 	wrlong	local10, objptr
0d1c4     4A 00 00 FF 
0d1c8     7C E4 85 F1 | 	sub	objptr, ##38012
0d1cc                 | LR__1048
0d1cc                 | ' return 0
0d1cc     00 FA 05 F6 | 	mov	result1, #0
0d1d0                 | LR__1049
0d1d0     A7 F0 03 F6 | 	mov	ptra, fp
0d1d4     B2 00 A0 FD | 	call	#popregs_
0d1d8                 | _getvar_ret
0d1d8     2D 00 64 FD | 	ret
0d1dc                 | 
0d1dc                 | ' 
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' 
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '                                                                                                                                       -
0d1dc                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d1dc                 | ' '                                                                                                                                       -
0d1dc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d1dc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d1dc                 | ' 
0d1dc                 | ' function execute_line (astart=0 as integer) as integer
0d1dc                 | _execute_line
0d1dc     04 4A 05 F6 | 	mov	COUNT_, #4
0d1e0     A8 00 A0 FD | 	call	#pushregs_
0d1e4     50 00 00 FF 
0d1e8     BC E4 05 F1 | 	add	objptr, ##41148
0d1ec     F2 00 68 FC | 	wrlong	#0, objptr
0d1f0                 | ' 
0d1f0                 | ' runptr2=0
0d1f0                 | ' for lineptr_e=astart to lineptr-1
0d1f0     06 00 00 FF 
0d1f4     3C E4 85 F1 | 	sub	objptr, ##3132
0d1f8     F2 12 62 FC | 	wrlong	arg01, objptr
0d1fc     04 E4 85 F1 | 	sub	objptr, #4
0d200     F2 26 02 FB | 	rdlong	local01, objptr
0d204     4A 00 00 FF 
0d208     7C E4 85 F1 | 	sub	objptr, ##38012
0d20c                 | LR__1050
0d20c     4A 00 00 FF 
0d210     80 E4 05 F1 | 	add	objptr, ##38016
0d214     F2 FA 01 FB | 	rdlong	result1, objptr
0d218     4A 00 00 FF 
0d21c     80 E4 85 F1 | 	sub	objptr, ##38016
0d220     13 FB 51 F2 | 	cmps	result1, local01 wc
0d224     98 00 90 3D |  if_ae	jmp	#LR__1051
0d228     4A 00 00 FF 
0d22c     80 E4 05 F1 | 	add	objptr, ##38016
0d230     F2 FA 01 FB | 	rdlong	result1, objptr
0d234     FD 28 02 F6 | 	mov	local02, result1
0d238     01 28 66 F0 | 	shl	local02, #1
0d23c     FD 28 02 F1 | 	add	local02, result1
0d240     02 28 66 F0 | 	shl	local02, #2
0d244     03 00 00 FF 
0d248     04 E4 85 F1 | 	sub	objptr, ##1540
0d24c     F2 28 02 F1 | 	add	local02, objptr
0d250     08 28 06 F1 | 	add	local02, #8
0d254     14 29 02 FB | 	rdlong	local02, local02
0d258     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d25c     02 28 66 F0 | 	shl	local02, #2
0d260     04 00 00 FF 
0d264     1C E4 85 F1 | 	sub	objptr, ##2076
0d268     F2 28 02 F1 | 	add	local02, objptr
0d26c     14 29 02 FB | 	rdlong	local02, local02
0d270     14 2B 02 F6 | 	mov	local03, local02
0d274     13 28 46 F7 | 	zerox	local02, #19
0d278     14 2A 46 F0 | 	shr	local03, #20
0d27c     02 2A 66 F0 | 	shl	local03, #2
0d280     ED 2A 02 F1 | 	add	local03, __methods__
0d284     15 2B 02 FB | 	rdlong	local03, local03
0d288     43 00 00 FF 
0d28c     60 E4 85 F1 | 	sub	objptr, ##34400
0d290     F2 2C 02 F6 | 	mov	local04, objptr
0d294     14 E5 01 F6 | 	mov	objptr, local02
0d298     2D 2A 62 FD | 	call	local03
0d29c     16 E5 01 F6 | 	mov	objptr, local04
0d2a0     4A 00 00 FF 
0d2a4     80 E4 05 F1 | 	add	objptr, ##38016
0d2a8     F2 2C 02 FB | 	rdlong	local04, objptr
0d2ac     01 2C 06 F1 | 	add	local04, #1
0d2b0     F2 2C 62 FC | 	wrlong	local04, objptr
0d2b4     4A 00 00 FF 
0d2b8     80 E4 85 F1 | 	sub	objptr, ##38016
0d2bc     4C FF 9F FD | 	jmp	#LR__1050
0d2c0                 | LR__1051
0d2c0                 | ' return runptr2
0d2c0     50 00 00 FF 
0d2c4     BC E4 05 F1 | 	add	objptr, ##41148
0d2c8     F2 FA 01 FB | 	rdlong	result1, objptr
0d2cc     50 00 00 FF 
0d2d0     BC E4 85 F1 | 	sub	objptr, ##41148
0d2d4     A7 F0 03 F6 | 	mov	ptra, fp
0d2d8     B2 00 A0 FD | 	call	#popregs_
0d2dc                 | _execute_line_ret
0d2dc     2D 00 64 FD | 	ret
0d2e0                 | 
0d2e0                 | ' 
0d2e0                 | ' 
0d2e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d2e0                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d2e0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d2e0                 | ' 
0d2e0                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d2e0                 | ' 
0d2e0                 | ' function pop() as expr_result
0d2e0                 | _pop
0d2e0                 | ' if stackpointer=0 then
0d2e0     43 00 00 FF 
0d2e4     58 E4 05 F1 | 	add	objptr, ##34392
0d2e8     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d2ec     43 00 00 FF 
0d2f0     58 E4 85 F1 | 	sub	objptr, ##34392
0d2f4     FF 04 06 A6 |  if_e	mov	_var03, #255
0d2f8     18 00 06 A6 |  if_e	mov	_var01, #24
0d2fc     68 00 90 AD |  if_e	jmp	#LR__1060
0d300     43 00 00 FF 
0d304     58 E4 05 F1 | 	add	objptr, ##34392
0d308     F2 FA 01 FB | 	rdlong	result1, objptr
0d30c     01 FA 85 F1 | 	sub	result1, #1
0d310     F2 FA 61 FC | 	wrlong	result1, objptr
0d314     FD FE 01 F6 | 	mov	result3, result1
0d318     01 FE 65 F0 | 	shl	result3, #1
0d31c     FD FE 01 F1 | 	add	result3, result1
0d320     02 FE 65 F0 | 	shl	result3, #2
0d324     0C 00 00 FF 
0d328     0C E4 85 F1 | 	sub	objptr, ##6156
0d32c     F2 FE 01 F1 | 	add	result3, objptr
0d330     FF 00 02 FB | 	rdlong	_var01, result3
0d334     04 FE 05 F1 | 	add	result3, #4
0d338     FF FE 01 FB | 	rdlong	result3, result3
0d33c     FD FC 01 F6 | 	mov	result2, result1
0d340     01 FC 65 F0 | 	shl	result2, #1
0d344     FD FC 01 F1 | 	add	result2, result1
0d348     02 FC 65 F0 | 	shl	result2, #2
0d34c     F2 FC 01 F1 | 	add	result2, objptr
0d350     08 FC 05 F1 | 	add	result2, #8
0d354     FE FA 01 FB | 	rdlong	result1, result2
0d358     FF 02 02 F6 | 	mov	_var02, result3
0d35c     FD 04 02 F6 | 	mov	_var03, result1
0d360     37 00 00 FF 
0d364     4C E4 85 F1 | 	sub	objptr, ##28236
0d368                 | LR__1060
0d368                 | ' return t1
0d368     01 FD 01 F6 | 	mov	result2, _var02
0d36c     02 FF 01 F6 | 	mov	result3, _var03
0d370     00 FB 01 F6 | 	mov	result1, _var01
0d374                 | _pop_ret
0d374     2D 00 64 FD | 	ret
0d378                 | 
0d378                 | ' 
0d378                 | ' sub push(t1 as expr_result )
0d378                 | _push
0d378                 | ' if stackpointer<maxstack then 
0d378     43 00 00 FF 
0d37c     58 E4 05 F1 | 	add	objptr, ##34392
0d380     F2 00 02 FB | 	rdlong	_var01, objptr
0d384     43 00 00 FF 
0d388     58 E4 85 F1 | 	sub	objptr, ##34392
0d38c     01 00 00 FF 
0d390     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d394     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d398     09 01 02 FB | 	rdlong	_var01, arg01
0d39c     04 12 06 F1 | 	add	arg01, #4
0d3a0     09 03 02 FB | 	rdlong	_var02, arg01
0d3a4     04 12 06 F1 | 	add	arg01, #4
0d3a8     09 13 02 FB | 	rdlong	arg01, arg01
0d3ac     43 00 00 FF 
0d3b0     58 E4 05 F1 | 	add	objptr, ##34392
0d3b4     F2 04 02 FB | 	rdlong	_var03, objptr
0d3b8     02 07 02 F6 | 	mov	_var04, _var03
0d3bc     01 06 66 F0 | 	shl	_var04, #1
0d3c0     02 07 02 F1 | 	add	_var04, _var03
0d3c4     02 06 66 F0 | 	shl	_var04, #2
0d3c8     0C 00 00 FF 
0d3cc     0C E4 85 F1 | 	sub	objptr, ##6156
0d3d0     F2 06 02 F1 | 	add	_var04, objptr
0d3d4     03 01 62 FC | 	wrlong	_var01, _var04
0d3d8     0C 00 00 FF 
0d3dc     0C E4 05 F1 | 	add	objptr, ##6156
0d3e0     F2 06 02 FB | 	rdlong	_var04, objptr
0d3e4     03 05 02 F6 | 	mov	_var03, _var04
0d3e8     01 04 66 F0 | 	shl	_var03, #1
0d3ec     03 05 02 F1 | 	add	_var03, _var04
0d3f0     02 04 66 F0 | 	shl	_var03, #2
0d3f4     0C 00 00 FF 
0d3f8     0C E4 85 F1 | 	sub	objptr, ##6156
0d3fc     F2 04 02 F1 | 	add	_var03, objptr
0d400     04 04 06 F1 | 	add	_var03, #4
0d404     02 03 62 FC | 	wrlong	_var02, _var03
0d408     0C 00 00 FF 
0d40c     0C E4 05 F1 | 	add	objptr, ##6156
0d410     F2 06 02 FB | 	rdlong	_var04, objptr
0d414     03 05 02 F6 | 	mov	_var03, _var04
0d418     01 04 66 F0 | 	shl	_var03, #1
0d41c     03 05 02 F1 | 	add	_var03, _var04
0d420     02 04 66 F0 | 	shl	_var03, #2
0d424     0C 00 00 FF 
0d428     0C E4 85 F1 | 	sub	objptr, ##6156
0d42c     F2 04 02 F1 | 	add	_var03, objptr
0d430     08 04 06 F1 | 	add	_var03, #8
0d434     02 13 62 FC | 	wrlong	arg01, _var03
0d438     0C 00 00 FF 
0d43c     0C E4 05 F1 | 	add	objptr, ##6156
0d440     F2 00 02 FB | 	rdlong	_var01, objptr
0d444     01 00 06 F1 | 	add	_var01, #1
0d448     F2 00 62 FC | 	wrlong	_var01, objptr
0d44c     43 00 00 FF 
0d450     58 E4 85 F1 | 	sub	objptr, ##34392
0d454                 | LR__1070
0d454                 | _push_ret
0d454     2D 00 64 FD | 	ret
0d458                 | 
0d458                 | ' 
0d458                 | ' ' -------------------------------- Runtime converting functions
0d458                 | ' 
0d458                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d458                 | ' 
0d458                 | ' function  convertstring(psaddr as ulong) as string
0d458                 | _convertstring
0d458     04 4A 05 F6 | 	mov	COUNT_, #4
0d45c     A8 00 A0 FD | 	call	#pushregs_
0d460     09 27 02 F6 | 	mov	local01, arg01
0d464     B8 53 B1 FD | 	call	#_pslpeek
0d468     FD 28 02 F6 | 	mov	local02, result1
0d46c     B0 01 00 FF 
0d470     B5 2B 06 F6 | 	mov	local03, ##@LR__5806
0d474                 | ' l=pslpeek(psaddr) 
0d474                 | ' s="" 
0d474                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d474     01 2C 06 F6 | 	mov	local04, #1
0d478     01 28 06 F1 | 	add	local02, #1
0d47c                 | LR__1080
0d47c     14 2D 52 F2 | 	cmps	local04, local02 wc
0d480     30 00 90 3D |  if_ae	jmp	#LR__1081
0d484     13 13 02 F6 | 	mov	arg01, local01
0d488     03 12 06 F1 | 	add	arg01, #3
0d48c     16 13 02 F1 | 	add	arg01, local04
0d490     34 53 B1 FD | 	call	#_pspeek
0d494     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d498     E8 AC B1 FD | 	call	#__system__Chr_S
0d49c     FD 14 02 F6 | 	mov	arg02, result1
0d4a0     15 13 02 F6 | 	mov	arg01, local03
0d4a4     F4 8A B1 FD | 	call	#__system___string_concat
0d4a8     FD 2A 02 F6 | 	mov	local03, result1
0d4ac     01 2C 06 F1 | 	add	local04, #1
0d4b0     C8 FF 9F FD | 	jmp	#LR__1080
0d4b4                 | LR__1081
0d4b4                 | ' return s
0d4b4     15 FB 01 F6 | 	mov	result1, local03
0d4b8     A7 F0 03 F6 | 	mov	ptra, fp
0d4bc     B2 00 A0 FD | 	call	#popregs_
0d4c0                 | _convertstring_ret
0d4c0     2D 00 64 FD | 	ret
0d4c4                 | 
0d4c4                 | ' 
0d4c4                 | ' ' converts a variable to an integer
0d4c4                 | ' 
0d4c4                 | ' function converttoint (t1 as expr_result) as integer 
0d4c4                 | _converttoint
0d4c4     02 4A 05 F6 | 	mov	COUNT_, #2
0d4c8     A8 00 A0 FD | 	call	#pushregs_
0d4cc     09 27 02 F6 | 	mov	local01, arg01
0d4d0                 | ' 
0d4d0                 | ' select case t1.result_type
0d4d0     08 26 06 F1 | 	add	local01, #8
0d4d4     13 29 02 FB | 	rdlong	local02, local01
0d4d8     08 26 86 F1 | 	sub	local01, #8
0d4dc     1C 28 0E F2 | 	cmp	local02, #28 wz
0d4e0     2C 00 90 AD |  if_e	jmp	#LR__1090
0d4e4     1D 28 0E F2 | 	cmp	local02, #29 wz
0d4e8     2C 00 90 AD |  if_e	jmp	#LR__1091
0d4ec     1E 28 0E F2 | 	cmp	local02, #30 wz
0d4f0     2C 00 90 AD |  if_e	jmp	#LR__1092
0d4f4     1F 28 0E F2 | 	cmp	local02, #31 wz
0d4f8     34 00 90 AD |  if_e	jmp	#LR__1093
0d4fc     2B 28 0E F2 | 	cmp	local02, #43 wz
0d500     44 00 90 AD |  if_e	jmp	#LR__1094
0d504     2C 28 0E F2 | 	cmp	local02, #44 wz
0d508     5C 00 90 AD |  if_e	jmp	#LR__1095
0d50c     60 00 90 FD | 	jmp	#LR__1096
0d510                 | LR__1090
0d510     13 FB 01 FB | 	rdlong	result1, local01
0d514     5C 00 90 FD | 	jmp	#LR__1097
0d518                 | LR__1091
0d518     13 FB 01 FB | 	rdlong	result1, local01
0d51c     54 00 90 FD | 	jmp	#LR__1097
0d520                 | LR__1092
0d520     13 13 02 FB | 	rdlong	arg01, local01
0d524     01 14 06 F6 | 	mov	arg02, #1
0d528     58 BD B1 FD | 	call	#__system___float_tointeger
0d52c     44 00 90 FD | 	jmp	#LR__1097
0d530                 | LR__1093
0d530     13 13 02 FB | 	rdlong	arg01, local01
0d534     90 C0 B1 FD | 	call	#__system____builtin_atof
0d538     FD 12 02 F6 | 	mov	arg01, result1
0d53c     01 14 06 F6 | 	mov	arg02, #1
0d540     40 BD B1 FD | 	call	#__system___float_tointeger
0d544     2C 00 90 FD | 	jmp	#LR__1097
0d548                 | LR__1094
0d548     13 13 02 FB | 	rdlong	arg01, local01
0d54c     08 FF BF FD | 	call	#_convertstring
0d550     FD 12 02 F6 | 	mov	arg01, result1
0d554     70 C0 B1 FD | 	call	#__system____builtin_atof
0d558     FD 12 02 F6 | 	mov	arg01, result1
0d55c     01 14 06 F6 | 	mov	arg02, #1
0d560     20 BD B1 FD | 	call	#__system___float_tointeger
0d564     0C 00 90 FD | 	jmp	#LR__1097
0d568                 | LR__1095
0d568     13 FB 01 FB | 	rdlong	result1, local01
0d56c     04 00 90 FD | 	jmp	#LR__1097
0d570                 | LR__1096
0d570     00 FA 05 F6 | 	mov	result1, #0
0d574                 | LR__1097
0d574     A7 F0 03 F6 | 	mov	ptra, fp
0d578     B2 00 A0 FD | 	call	#popregs_
0d57c                 | _converttoint_ret
0d57c     2D 00 64 FD | 	ret
0d580                 | 
0d580                 | ' 
0d580                 | ' ' converts a variable to float
0d580                 | ' 
0d580                 | ' function converttofloat (t1 as expr_result) as single
0d580                 | _converttofloat
0d580     03 4A 05 F6 | 	mov	COUNT_, #3
0d584     A8 00 A0 FD | 	call	#pushregs_
0d588     09 27 02 F6 | 	mov	local01, arg01
0d58c                 | ' 
0d58c                 | ' select case t1.result_type
0d58c     08 26 06 F1 | 	add	local01, #8
0d590     13 29 02 FB | 	rdlong	local02, local01
0d594     08 26 86 F1 | 	sub	local01, #8
0d598     1C 28 0E F2 | 	cmp	local02, #28 wz
0d59c     24 00 90 AD |  if_e	jmp	#LR__1100
0d5a0     1D 28 0E F2 | 	cmp	local02, #29 wz
0d5a4     38 00 90 AD |  if_e	jmp	#LR__1101
0d5a8     1E 28 0E F2 | 	cmp	local02, #30 wz
0d5ac     3C 00 90 AD |  if_e	jmp	#LR__1102
0d5b0     1F 28 0E F2 | 	cmp	local02, #31 wz
0d5b4     3C 00 90 AD |  if_e	jmp	#LR__1103
0d5b8     2B 28 0E F2 | 	cmp	local02, #43 wz
0d5bc     40 00 90 AD |  if_e	jmp	#LR__1104
0d5c0     50 00 90 FD | 	jmp	#LR__1105
0d5c4                 | LR__1100
0d5c4     13 13 02 FB | 	rdlong	arg01, local01
0d5c8     09 13 52 F6 | 	abs	arg01, arg01 wc
0d5cc     1F 2A C6 C9 |  if_b	decod	local03, #31
0d5d0     00 2A 06 36 |  if_ae	mov	local03, #0
0d5d4     E0 B3 B1 FD | 	call	#__system___float_fromuns
0d5d8     15 FB 61 F5 | 	xor	result1, local03
0d5dc     38 00 90 FD | 	jmp	#LR__1106
0d5e0                 | LR__1101
0d5e0     13 13 02 FB | 	rdlong	arg01, local01
0d5e4     D0 B3 B1 FD | 	call	#__system___float_fromuns
0d5e8     2C 00 90 FD | 	jmp	#LR__1106
0d5ec                 | LR__1102
0d5ec     13 FB 01 FB | 	rdlong	result1, local01
0d5f0     24 00 90 FD | 	jmp	#LR__1106
0d5f4                 | LR__1103
0d5f4     13 13 02 FB | 	rdlong	arg01, local01
0d5f8     CC BF B1 FD | 	call	#__system____builtin_atof
0d5fc     18 00 90 FD | 	jmp	#LR__1106
0d600                 | LR__1104
0d600     13 13 02 FB | 	rdlong	arg01, local01
0d604     50 FE BF FD | 	call	#_convertstring
0d608     FD 12 02 F6 | 	mov	arg01, result1
0d60c     B8 BF B1 FD | 	call	#__system____builtin_atof
0d610     04 00 90 FD | 	jmp	#LR__1106
0d614                 | LR__1105
0d614     00 FA 05 F6 | 	mov	result1, #0
0d618                 | LR__1106
0d618     A7 F0 03 F6 | 	mov	ptra, fp
0d61c     B2 00 A0 FD | 	call	#popregs_
0d620                 | _converttofloat_ret
0d620     2D 00 64 FD | 	ret
0d624                 | 
0d624                 | ' 
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' 
0d624                 | ' 
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d624                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d624                 | ' 
0d624                 | ' '-------------------- abs
0d624                 | ' 
0d624                 | ' sub do_abs
0d624                 | _do_abs
0d624     01 4A 05 F6 | 	mov	COUNT_, #1
0d628     A8 00 A0 FD | 	call	#pushregs_
0d62c     0C F0 07 F1 | 	add	ptra, #12
0d630     AC FC BF FD | 	call	#_pop
0d634     FF 26 02 F6 | 	mov	local01, result3
0d638     A7 FA 61 FC | 	wrlong	result1, fp
0d63c     04 4E 05 F1 | 	add	fp, #4
0d640     A7 FC 61 FC | 	wrlong	result2, fp
0d644     04 4E 05 F1 | 	add	fp, #4
0d648     A7 26 62 FC | 	wrlong	local01, fp
0d64c                 | ' 
0d64c                 | ' t1=pop()
0d64c                 | ' if t1.result_type=result_int then 
0d64c     08 4E 85 F1 | 	sub	fp, #8
0d650     1C 26 0E F2 | 	cmp	local01, #28 wz
0d654     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d658     09 27 42 A6 |  if_e	abs	local01, arg01
0d65c     A7 26 62 AC |  if_e	wrlong	local01, fp
0d660     2C 00 90 AD |  if_e	jmp	#LR__1110
0d664     08 4E 05 F1 | 	add	fp, #8
0d668     A7 26 02 FB | 	rdlong	local01, fp
0d66c     08 4E 85 F1 | 	sub	fp, #8
0d670     1E 26 0E F2 | 	cmp	local01, #30 wz
0d674     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d678     1F FA 05 A4 |  if_e	bitl	result1, #31
0d67c     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d680     08 4E 05 51 |  if_ne	add	fp, #8
0d684     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d688     08 4E 85 51 |  if_ne	sub	fp, #8
0d68c     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d690                 | LR__1110
0d690     A7 12 02 F6 | 	mov	arg01, fp
0d694     E0 FC BF FD | 	call	#_push
0d698     A7 F0 03 F6 | 	mov	ptra, fp
0d69c     B2 00 A0 FD | 	call	#popregs_
0d6a0                 | _do_abs_ret
0d6a0     2D 00 64 FD | 	ret
0d6a4                 | 
0d6a4                 | ' 
0d6a4                 | ' '-------------------- acos
0d6a4                 | ' 
0d6a4                 | ' sub do_acos
0d6a4                 | _do_acos
0d6a4     01 4A 05 F6 | 	mov	COUNT_, #1
0d6a8     A8 00 A0 FD | 	call	#pushregs_
0d6ac     10 F0 07 F1 | 	add	ptra, #16
0d6b0     4A 00 00 FF 
0d6b4     80 E4 05 F1 | 	add	objptr, ##38016
0d6b8     F2 26 02 FB | 	rdlong	local01, objptr
0d6bc     13 17 02 F6 | 	mov	arg03, local01
0d6c0     01 16 66 F0 | 	shl	arg03, #1
0d6c4     13 17 02 F1 | 	add	arg03, local01
0d6c8     02 16 66 F0 | 	shl	arg03, #2
0d6cc     03 00 00 FF 
0d6d0     04 E4 85 F1 | 	sub	objptr, ##1540
0d6d4     F2 16 02 F1 | 	add	arg03, objptr
0d6d8     0B 17 02 FB | 	rdlong	arg03, arg03
0d6dc     0C 4E 05 F1 | 	add	fp, #12
0d6e0     A7 16 62 FC | 	wrlong	arg03, fp
0d6e4                 | ' 
0d6e4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d6e4                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d6e4     0C 4E 85 F1 | 	sub	fp, #12
0d6e8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d6ec     47 00 00 FF 
0d6f0     7C E4 85 F1 | 	sub	objptr, ##36476
0d6f4     0C 4E 05 C1 |  if_b	add	fp, #12
0d6f8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d6fc     0C 4E 85 C1 |  if_b	sub	fp, #12
0d700     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0d704     00 12 06 F6 | 	mov	arg01, #0
0d708     D8 E4 B1 FD | 	call	#__system___getiolock_0600
0d70c     FD 12 02 F6 | 	mov	arg01, result1
0d710     2C 88 B1 FD | 	call	#__system___lockmem
0d714     B0 01 00 FF 
0d718     B6 15 06 F6 | 	mov	arg02, ##@LR__5807
0d71c     00 12 06 F6 | 	mov	arg01, #0
0d720     00 16 06 F6 | 	mov	arg03, #0
0d724     10 95 B1 FD | 	call	#__system___basic_print_string
0d728     00 12 06 F6 | 	mov	arg01, #0
0d72c     B4 E4 B1 FD | 	call	#__system___getiolock_0600
0d730     FD 00 68 FC | 	wrlong	#0, result1
0d734     27 12 06 F6 | 	mov	arg01, #39
0d738     00 14 06 F6 | 	mov	arg02, #0
0d73c     10 4E B1 FD | 	call	#_printerror
0d740     64 00 90 FD | 	jmp	#LR__1121
0d744                 | LR__1120
0d744     98 FB BF FD | 	call	#_pop
0d748     FF 26 02 F6 | 	mov	local01, result3
0d74c     A7 FA 61 FC | 	wrlong	result1, fp
0d750     04 4E 05 F1 | 	add	fp, #4
0d754     A7 FC 61 FC | 	wrlong	result2, fp
0d758     04 4E 05 F1 | 	add	fp, #4
0d75c     A7 26 62 FC | 	wrlong	local01, fp
0d760     08 4E 85 F1 | 	sub	fp, #8
0d764     A7 12 02 F6 | 	mov	arg01, fp
0d768     14 FE BF FD | 	call	#_converttofloat
0d76c     FD 12 02 F6 | 	mov	arg01, result1
0d770     88 C1 B1 FD | 	call	#__system____builtin_acosf
0d774     FD 12 02 F6 | 	mov	arg01, result1
0d778     52 00 00 FF 
0d77c     AC E4 05 F1 | 	add	objptr, ##42156
0d780     F2 14 02 FB | 	rdlong	arg02, objptr
0d784     52 00 00 FF 
0d788     AC E4 85 F1 | 	sub	objptr, ##42156
0d78c     2C B6 B1 FD | 	call	#__system___float_mul
0d790     A7 FA 61 FC | 	wrlong	result1, fp
0d794     08 4E 05 F1 | 	add	fp, #8
0d798     A7 3C 68 FC | 	wrlong	#30, fp
0d79c     08 4E 85 F1 | 	sub	fp, #8
0d7a0     A7 12 02 F6 | 	mov	arg01, fp
0d7a4     D0 FB BF FD | 	call	#_push
0d7a8                 | LR__1121
0d7a8     A7 F0 03 F6 | 	mov	ptra, fp
0d7ac     B2 00 A0 FD | 	call	#popregs_
0d7b0                 | _do_acos_ret
0d7b0     2D 00 64 FD | 	ret
0d7b4                 | 
0d7b4                 | ' 
0d7b4                 | ' '-------------------- asc
0d7b4                 | ' 
0d7b4                 | ' sub do_asc
0d7b4                 | _do_asc
0d7b4     01 4A 05 F6 | 	mov	COUNT_, #1
0d7b8     A8 00 A0 FD | 	call	#pushregs_
0d7bc     14 F0 07 F1 | 	add	ptra, #20
0d7c0     4A 00 00 FF 
0d7c4     80 E4 05 F1 | 	add	objptr, ##38016
0d7c8     F2 26 02 FB | 	rdlong	local01, objptr
0d7cc     13 17 02 F6 | 	mov	arg03, local01
0d7d0     01 16 66 F0 | 	shl	arg03, #1
0d7d4     13 17 02 F1 | 	add	arg03, local01
0d7d8     02 16 66 F0 | 	shl	arg03, #2
0d7dc     03 00 00 FF 
0d7e0     04 E4 85 F1 | 	sub	objptr, ##1540
0d7e4     F2 16 02 F1 | 	add	arg03, objptr
0d7e8     0B 17 02 FB | 	rdlong	arg03, arg03
0d7ec     0C 4E 05 F1 | 	add	fp, #12
0d7f0     A7 16 62 FC | 	wrlong	arg03, fp
0d7f4                 | ' 
0d7f4                 | ' numpar=compiledline(lineptr_e).result.uresult
0d7f4                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0d7f4     0C 4E 85 F1 | 	sub	fp, #12
0d7f8     02 16 16 F2 | 	cmp	arg03, #2 wc
0d7fc     47 00 00 FF 
0d800     7C E4 85 F1 | 	sub	objptr, ##36476
0d804     0C 4E 05 C1 |  if_b	add	fp, #12
0d808     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d80c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d810     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0d814     00 12 06 F6 | 	mov	arg01, #0
0d818     C8 E3 B1 FD | 	call	#__system___getiolock_0600
0d81c     FD 12 02 F6 | 	mov	arg01, result1
0d820     1C 87 B1 FD | 	call	#__system___lockmem
0d824     B0 01 00 FF 
0d828     BD 15 06 F6 | 	mov	arg02, ##@LR__5808
0d82c     00 12 06 F6 | 	mov	arg01, #0
0d830     00 16 06 F6 | 	mov	arg03, #0
0d834     00 94 B1 FD | 	call	#__system___basic_print_string
0d838     00 12 06 F6 | 	mov	arg01, #0
0d83c     A4 E3 B1 FD | 	call	#__system___getiolock_0600
0d840     FD 00 68 FC | 	wrlong	#0, result1
0d844     27 12 06 F6 | 	mov	arg01, #39
0d848     00 14 06 F6 | 	mov	arg02, #0
0d84c     00 4D B1 FD | 	call	#_printerror
0d850     B4 00 90 FD | 	jmp	#LR__1133
0d854                 | LR__1130
0d854     88 FA BF FD | 	call	#_pop
0d858     FF 16 02 F6 | 	mov	arg03, result3
0d85c     A7 FA 61 FC | 	wrlong	result1, fp
0d860     04 4E 05 F1 | 	add	fp, #4
0d864     A7 FC 61 FC | 	wrlong	result2, fp
0d868     04 4E 05 F1 | 	add	fp, #4
0d86c     A7 16 62 FC | 	wrlong	arg03, fp
0d870                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d870     08 4E 85 F1 | 	sub	fp, #8
0d874     2B 16 0E F2 | 	cmp	arg03, #43 wz
0d878     18 00 90 5D |  if_ne	jmp	#LR__1131
0d87c     A7 12 02 FB | 	rdlong	arg01, fp
0d880     D4 FB BF FD | 	call	#_convertstring
0d884     A7 FA 61 FC | 	wrlong	result1, fp
0d888     08 4E 05 F1 | 	add	fp, #8
0d88c     A7 3E 68 FC | 	wrlong	#31, fp
0d890     08 4E 85 F1 | 	sub	fp, #8
0d894                 | LR__1131
0d894                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0d894     08 4E 05 F1 | 	add	fp, #8
0d898     A7 16 02 FB | 	rdlong	arg03, fp
0d89c     08 4E 85 F1 | 	sub	fp, #8
0d8a0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0d8a4     40 00 90 AD |  if_e	jmp	#LR__1132
0d8a8     00 12 06 F6 | 	mov	arg01, #0
0d8ac     34 E3 B1 FD | 	call	#__system___getiolock_0600
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     88 86 B1 FD | 	call	#__system___lockmem
0d8b8     B0 01 00 FF 
0d8bc     C3 15 06 F6 | 	mov	arg02, ##@LR__5809
0d8c0     00 12 06 F6 | 	mov	arg01, #0
0d8c4     00 16 06 F6 | 	mov	arg03, #0
0d8c8     6C 93 B1 FD | 	call	#__system___basic_print_string
0d8cc     00 12 06 F6 | 	mov	arg01, #0
0d8d0     10 E3 B1 FD | 	call	#__system___getiolock_0600
0d8d4     FD 00 68 FC | 	wrlong	#0, result1
0d8d8     0F 12 06 F6 | 	mov	arg01, #15
0d8dc     00 14 06 F6 | 	mov	arg02, #0
0d8e0     6C 4C B1 FD | 	call	#_printerror
0d8e4     20 00 90 FD | 	jmp	#LR__1133
0d8e8                 | LR__1132
0d8e8     A7 26 02 FB | 	rdlong	local01, fp
0d8ec     13 27 C2 FA | 	rdbyte	local01, local01
0d8f0     A7 26 62 FC | 	wrlong	local01, fp
0d8f4     08 4E 05 F1 | 	add	fp, #8
0d8f8     A7 38 68 FC | 	wrlong	#28, fp
0d8fc     08 4E 85 F1 | 	sub	fp, #8
0d900     A7 12 02 F6 | 	mov	arg01, fp
0d904     70 FA BF FD | 	call	#_push
0d908                 | LR__1133
0d908     A7 F0 03 F6 | 	mov	ptra, fp
0d90c     B2 00 A0 FD | 	call	#popregs_
0d910                 | _do_asc_ret
0d910     2D 00 64 FD | 	ret
0d914                 | 
0d914                 | ' 
0d914                 | ' '-------------------- asin
0d914                 | ' 
0d914                 | ' sub do_asin
0d914                 | _do_asin
0d914     01 4A 05 F6 | 	mov	COUNT_, #1
0d918     A8 00 A0 FD | 	call	#pushregs_
0d91c     10 F0 07 F1 | 	add	ptra, #16
0d920     4A 00 00 FF 
0d924     80 E4 05 F1 | 	add	objptr, ##38016
0d928     F2 26 02 FB | 	rdlong	local01, objptr
0d92c     13 17 02 F6 | 	mov	arg03, local01
0d930     01 16 66 F0 | 	shl	arg03, #1
0d934     13 17 02 F1 | 	add	arg03, local01
0d938     02 16 66 F0 | 	shl	arg03, #2
0d93c     03 00 00 FF 
0d940     04 E4 85 F1 | 	sub	objptr, ##1540
0d944     F2 16 02 F1 | 	add	arg03, objptr
0d948     0B 17 02 FB | 	rdlong	arg03, arg03
0d94c     0C 4E 05 F1 | 	add	fp, #12
0d950     A7 16 62 FC | 	wrlong	arg03, fp
0d954                 | ' 
0d954                 | ' numpar=compiledline(lineptr_e).result.uresult
0d954                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0d954     0C 4E 85 F1 | 	sub	fp, #12
0d958     02 16 16 F2 | 	cmp	arg03, #2 wc
0d95c     47 00 00 FF 
0d960     7C E4 85 F1 | 	sub	objptr, ##36476
0d964     0C 4E 05 C1 |  if_b	add	fp, #12
0d968     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d96c     0C 4E 85 C1 |  if_b	sub	fp, #12
0d970     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0d974     00 12 06 F6 | 	mov	arg01, #0
0d978     68 E2 B1 FD | 	call	#__system___getiolock_0600
0d97c     FD 12 02 F6 | 	mov	arg01, result1
0d980     BC 85 B1 FD | 	call	#__system___lockmem
0d984     B0 01 00 FF 
0d988     C9 15 06 F6 | 	mov	arg02, ##@LR__5810
0d98c     00 12 06 F6 | 	mov	arg01, #0
0d990     00 16 06 F6 | 	mov	arg03, #0
0d994     A0 92 B1 FD | 	call	#__system___basic_print_string
0d998     00 12 06 F6 | 	mov	arg01, #0
0d99c     44 E2 B1 FD | 	call	#__system___getiolock_0600
0d9a0     FD 00 68 FC | 	wrlong	#0, result1
0d9a4     27 12 06 F6 | 	mov	arg01, #39
0d9a8     00 14 06 F6 | 	mov	arg02, #0
0d9ac     A0 4B B1 FD | 	call	#_printerror
0d9b0     64 00 90 FD | 	jmp	#LR__1141
0d9b4                 | LR__1140
0d9b4     28 F9 BF FD | 	call	#_pop
0d9b8     FF 26 02 F6 | 	mov	local01, result3
0d9bc     A7 FA 61 FC | 	wrlong	result1, fp
0d9c0     04 4E 05 F1 | 	add	fp, #4
0d9c4     A7 FC 61 FC | 	wrlong	result2, fp
0d9c8     04 4E 05 F1 | 	add	fp, #4
0d9cc     A7 26 62 FC | 	wrlong	local01, fp
0d9d0     08 4E 85 F1 | 	sub	fp, #8
0d9d4     A7 12 02 F6 | 	mov	arg01, fp
0d9d8     A4 FB BF FD | 	call	#_converttofloat
0d9dc     FD 12 02 F6 | 	mov	arg01, result1
0d9e0     CC BE B1 FD | 	call	#__system____builtin_asinf
0d9e4     FD 12 02 F6 | 	mov	arg01, result1
0d9e8     52 00 00 FF 
0d9ec     AC E4 05 F1 | 	add	objptr, ##42156
0d9f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d9f4     52 00 00 FF 
0d9f8     AC E4 85 F1 | 	sub	objptr, ##42156
0d9fc     BC B3 B1 FD | 	call	#__system___float_mul
0da00     A7 FA 61 FC | 	wrlong	result1, fp
0da04     08 4E 05 F1 | 	add	fp, #8
0da08     A7 3C 68 FC | 	wrlong	#30, fp
0da0c     08 4E 85 F1 | 	sub	fp, #8
0da10     A7 12 02 F6 | 	mov	arg01, fp
0da14     60 F9 BF FD | 	call	#_push
0da18                 | LR__1141
0da18     A7 F0 03 F6 | 	mov	ptra, fp
0da1c     B2 00 A0 FD | 	call	#popregs_
0da20                 | _do_asin_ret
0da20     2D 00 64 FD | 	ret
0da24                 | 
0da24                 | ' 
0da24                 | ' '-------------------- atn
0da24                 | ' 
0da24                 | ' sub do_atn
0da24                 | _do_atn
0da24     01 4A 05 F6 | 	mov	COUNT_, #1
0da28     A8 00 A0 FD | 	call	#pushregs_
0da2c     10 F0 07 F1 | 	add	ptra, #16
0da30     4A 00 00 FF 
0da34     80 E4 05 F1 | 	add	objptr, ##38016
0da38     F2 26 02 FB | 	rdlong	local01, objptr
0da3c     13 17 02 F6 | 	mov	arg03, local01
0da40     01 16 66 F0 | 	shl	arg03, #1
0da44     13 17 02 F1 | 	add	arg03, local01
0da48     02 16 66 F0 | 	shl	arg03, #2
0da4c     03 00 00 FF 
0da50     04 E4 85 F1 | 	sub	objptr, ##1540
0da54     F2 16 02 F1 | 	add	arg03, objptr
0da58     0B 17 02 FB | 	rdlong	arg03, arg03
0da5c     0C 4E 05 F1 | 	add	fp, #12
0da60     A7 16 62 FC | 	wrlong	arg03, fp
0da64                 | ' 
0da64                 | ' numpar=compiledline(lineptr_e).result.uresult
0da64                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0da64     0C 4E 85 F1 | 	sub	fp, #12
0da68     02 16 16 F2 | 	cmp	arg03, #2 wc
0da6c     47 00 00 FF 
0da70     7C E4 85 F1 | 	sub	objptr, ##36476
0da74     0C 4E 05 C1 |  if_b	add	fp, #12
0da78     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0da7c     0C 4E 85 C1 |  if_b	sub	fp, #12
0da80     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0da84     00 12 06 F6 | 	mov	arg01, #0
0da88     58 E1 B1 FD | 	call	#__system___getiolock_0600
0da8c     FD 12 02 F6 | 	mov	arg01, result1
0da90     AC 84 B1 FD | 	call	#__system___lockmem
0da94     B0 01 00 FF 
0da98     D0 15 06 F6 | 	mov	arg02, ##@LR__5811
0da9c     00 12 06 F6 | 	mov	arg01, #0
0daa0     00 16 06 F6 | 	mov	arg03, #0
0daa4     90 91 B1 FD | 	call	#__system___basic_print_string
0daa8     00 12 06 F6 | 	mov	arg01, #0
0daac     34 E1 B1 FD | 	call	#__system___getiolock_0600
0dab0     FD 00 68 FC | 	wrlong	#0, result1
0dab4     27 12 06 F6 | 	mov	arg01, #39
0dab8     00 14 06 F6 | 	mov	arg02, #0
0dabc     90 4A B1 FD | 	call	#_printerror
0dac0     6C 00 90 FD | 	jmp	#LR__1151
0dac4                 | LR__1150
0dac4     18 F8 BF FD | 	call	#_pop
0dac8     FF 26 02 F6 | 	mov	local01, result3
0dacc     A7 FA 61 FC | 	wrlong	result1, fp
0dad0     04 4E 05 F1 | 	add	fp, #4
0dad4     A7 FC 61 FC | 	wrlong	result2, fp
0dad8     04 4E 05 F1 | 	add	fp, #4
0dadc     A7 26 62 FC | 	wrlong	local01, fp
0dae0     08 4E 85 F1 | 	sub	fp, #8
0dae4     A7 12 02 F6 | 	mov	arg01, fp
0dae8     94 FA BF FD | 	call	#_converttofloat
0daec     FD 12 02 F6 | 	mov	arg01, result1
0daf0     00 C0 1F FF 
0daf4     00 14 06 F6 | 	mov	arg02, ##1065353216
0daf8     4C BE B1 FD | 	call	#__system____builtin_atan2f
0dafc     FD 12 02 F6 | 	mov	arg01, result1
0db00     52 00 00 FF 
0db04     AC E4 05 F1 | 	add	objptr, ##42156
0db08     F2 14 02 FB | 	rdlong	arg02, objptr
0db0c     52 00 00 FF 
0db10     AC E4 85 F1 | 	sub	objptr, ##42156
0db14     A4 B2 B1 FD | 	call	#__system___float_mul
0db18     A7 FA 61 FC | 	wrlong	result1, fp
0db1c     08 4E 05 F1 | 	add	fp, #8
0db20     A7 3C 68 FC | 	wrlong	#30, fp
0db24     08 4E 85 F1 | 	sub	fp, #8
0db28     A7 12 02 F6 | 	mov	arg01, fp
0db2c     48 F8 BF FD | 	call	#_push
0db30                 | LR__1151
0db30     A7 F0 03 F6 | 	mov	ptra, fp
0db34     B2 00 A0 FD | 	call	#popregs_
0db38                 | _do_atn_ret
0db38     2D 00 64 FD | 	ret
0db3c                 | 
0db3c                 | ' 
0db3c                 | ' '-------------------- beep
0db3c                 | ' 
0db3c                 | ' sub do_beep
0db3c                 | _do_beep
0db3c     02 4A 05 F6 | 	mov	COUNT_, #2
0db40     A8 00 A0 FD | 	call	#pushregs_
0db44     20 F0 07 F1 | 	add	ptra, #32
0db48     94 F7 BF FD | 	call	#_pop
0db4c     FD 26 02 F6 | 	mov	local01, result1
0db50     FE 1C 02 F6 | 	mov	arg06, result2
0db54     FF 28 02 F6 | 	mov	local02, result3
0db58     0C 4E 05 F1 | 	add	fp, #12
0db5c     A7 26 62 FC | 	wrlong	local01, fp
0db60     04 4E 05 F1 | 	add	fp, #4
0db64     A7 1C 62 FC | 	wrlong	arg06, fp
0db68     04 4E 05 F1 | 	add	fp, #4
0db6c     A7 28 62 FC | 	wrlong	local02, fp
0db70     14 4E 85 F1 | 	sub	fp, #20
0db74     68 F7 BF FD | 	call	#_pop
0db78     A7 FA 61 FC | 	wrlong	result1, fp
0db7c     04 4E 05 F1 | 	add	fp, #4
0db80     A7 FC 61 FC | 	wrlong	result2, fp
0db84     04 4E 05 F1 | 	add	fp, #4
0db88     A7 FE 61 FC | 	wrlong	result3, fp
0db8c                 | ' 
0db8c                 | ' t2=pop()
0db8c                 | ' t1=pop()
0db8c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0db8c     08 4E 85 F1 | 	sub	fp, #8
0db90     1C FE 0D F2 | 	cmp	result3, #28 wz
0db94     08 4E 05 51 |  if_ne	add	fp, #8
0db98     A7 28 02 5B |  if_ne	rdlong	local02, fp
0db9c     08 4E 85 51 |  if_ne	sub	fp, #8
0dba0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0dba4     A7 26 02 AB |  if_e	rdlong	local01, fp
0dba8     18 4E 05 A1 |  if_e	add	fp, #24
0dbac     A7 26 62 AC |  if_e	wrlong	local01, fp
0dbb0     18 4E 85 A1 |  if_e	sub	fp, #24
0dbb4     14 00 90 AD |  if_e	jmp	#LR__1160
0dbb8     A7 12 02 F6 | 	mov	arg01, fp
0dbbc     04 F9 BF FD | 	call	#_converttoint
0dbc0     18 4E 05 F1 | 	add	fp, #24
0dbc4     A7 FA 61 FC | 	wrlong	result1, fp
0dbc8     18 4E 85 F1 | 	sub	fp, #24
0dbcc                 | LR__1160
0dbcc     1C 4E 05 F1 | 	add	fp, #28
0dbd0     A7 FE 48 FC | 	wrbyte	#127, fp
0dbd4     01 4E 05 F1 | 	add	fp, #1
0dbd8     A7 00 49 FC | 	wrbyte	#128, fp
0dbdc     01 4E 85 F1 | 	sub	fp, #1
0dbe0     A7 14 02 F6 | 	mov	arg02, fp
0dbe4     04 4E 85 F1 | 	sub	fp, #4
0dbe8     A7 16 02 FB | 	rdlong	arg03, fp
0dbec     18 4E 85 F1 | 	sub	fp, #24
0dbf0     01 16 66 F0 | 	shl	arg03, #1
0dbf4     07 12 06 F6 | 	mov	arg01, #7
0dbf8     0E 18 C6 F9 | 	decod	arg04, #14
0dbfc     02 1A 06 F6 | 	mov	arg05, #2
0dc00     00 1C 06 F6 | 	mov	arg06, #0
0dc04     0B 00 00 FF 
0dc08     CC E4 05 F1 | 	add	objptr, ##5836
0dc0c     8C 7F B1 FD | 	call	#_audio096_spin2_play8
0dc10     0B 00 00 FF 
0dc14     CC E4 85 F1 | 	sub	objptr, ##5836
0dc18     0C 4E 05 F1 | 	add	fp, #12
0dc1c     A7 12 02 F6 | 	mov	arg01, fp
0dc20     0C 4E 85 F1 | 	sub	fp, #12
0dc24     50 F7 BF FD | 	call	#_push
0dc28     18 DF B0 FD | 	call	#_do_waitms
0dc2c     07 12 06 F6 | 	mov	arg01, #7
0dc30     0B 00 00 FF 
0dc34     CC E4 05 F1 | 	add	objptr, ##5836
0dc38     04 80 B1 FD | 	call	#_audio096_spin2_stop
0dc3c     0B 00 00 FF 
0dc40     CC E4 85 F1 | 	sub	objptr, ##5836
0dc44     A7 F0 03 F6 | 	mov	ptra, fp
0dc48     B2 00 A0 FD | 	call	#popregs_
0dc4c                 | _do_beep_ret
0dc4c     2D 00 64 FD | 	ret
0dc50                 | 
0dc50                 | ' 
0dc50                 | ' '-------------------- blit
0dc50                 | ' 
0dc50                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0dc50                 | ' sub do_blit
0dc50                 | _do_blit
0dc50     02 4A 05 F6 | 	mov	COUNT_, #2
0dc54     A8 00 A0 FD | 	call	#pushregs_
0dc58     3C F0 07 F1 | 	add	ptra, #60
0dc5c     4A 00 00 FF 
0dc60     80 E4 05 F1 | 	add	objptr, ##38016
0dc64     F2 26 02 FB | 	rdlong	local01, objptr
0dc68     13 25 02 F6 | 	mov	arg10, local01
0dc6c     01 24 66 F0 | 	shl	arg10, #1
0dc70     13 25 02 F1 | 	add	arg10, local01
0dc74     02 24 66 F0 | 	shl	arg10, #2
0dc78     03 00 00 FF 
0dc7c     04 E4 85 F1 | 	sub	objptr, ##1540
0dc80     F2 24 02 F1 | 	add	arg10, objptr
0dc84     12 25 02 FB | 	rdlong	arg10, arg10
0dc88     38 4E 05 F1 | 	add	fp, #56
0dc8c     A7 24 62 FC | 	wrlong	arg10, fp
0dc90                 | ' 
0dc90                 | ' numpar=compiledline(lineptr_e).result.uresult
0dc90                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0dc90     38 4E 85 F1 | 	sub	fp, #56
0dc94     0A 24 0E F2 | 	cmp	arg10, #10 wz
0dc98     47 00 00 FF 
0dc9c     7C E4 85 F1 | 	sub	objptr, ##36476
0dca0     38 4E 05 51 |  if_ne	add	fp, #56
0dca4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0dca8     38 4E 85 51 |  if_ne	sub	fp, #56
0dcac     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0dcb0     50 00 90 AD |  if_e	jmp	#LR__1170
0dcb4     00 12 06 F6 | 	mov	arg01, #0
0dcb8     28 DF B1 FD | 	call	#__system___getiolock_0600
0dcbc     FD 12 02 F6 | 	mov	arg01, result1
0dcc0     7C 82 B1 FD | 	call	#__system___lockmem
0dcc4     B0 01 00 FF 
0dcc8     D6 15 06 F6 | 	mov	arg02, ##@LR__5812
0dccc     00 12 06 F6 | 	mov	arg01, #0
0dcd0     00 16 06 F6 | 	mov	arg03, #0
0dcd4     60 8F B1 FD | 	call	#__system___basic_print_string
0dcd8     00 12 06 F6 | 	mov	arg01, #0
0dcdc     04 DF B1 FD | 	call	#__system___getiolock_0600
0dce0     FD 00 68 FC | 	wrlong	#0, result1
0dce4     50 00 00 FF 
0dce8     F0 E4 05 F1 | 	add	objptr, ##41200
0dcec     F2 14 02 FB | 	rdlong	arg02, objptr
0dcf0     50 00 00 FF 
0dcf4     F0 E4 85 F1 | 	sub	objptr, ##41200
0dcf8     27 12 06 F6 | 	mov	arg01, #39
0dcfc     50 48 B1 FD | 	call	#_printerror
0dd00     44 01 90 FD | 	jmp	#LR__1175
0dd04                 | LR__1170
0dd04                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0dd04     38 4E 05 F1 | 	add	fp, #56
0dd08     A7 28 02 FB | 	rdlong	local02, fp
0dd0c     01 28 86 F1 | 	sub	local02, #1
0dd10     04 4E 85 F1 | 	sub	fp, #4
0dd14     A7 28 62 FC | 	wrlong	local02, fp
0dd18     34 4E 85 F1 | 	sub	fp, #52
0dd1c                 | LR__1171
0dd1c     38 4E 05 F1 | 	add	fp, #56
0dd20     A7 26 02 FB | 	rdlong	local01, fp
0dd24     01 26 86 F1 | 	sub	local01, #1
0dd28     04 4E 85 F1 | 	sub	fp, #4
0dd2c     A7 24 02 FB | 	rdlong	arg10, fp
0dd30     34 4E 85 F1 | 	sub	fp, #52
0dd34     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dd38     54 00 90 1D |  if_a	jmp	#LR__1172
0dd3c     A0 F5 BF FD | 	call	#_pop
0dd40     A7 FA 61 FC | 	wrlong	result1, fp
0dd44     04 4E 05 F1 | 	add	fp, #4
0dd48     A7 FC 61 FC | 	wrlong	result2, fp
0dd4c     04 4E 05 F1 | 	add	fp, #4
0dd50     A7 FE 61 FC | 	wrlong	result3, fp
0dd54     2C 4E 05 F1 | 	add	fp, #44
0dd58     A7 28 02 FB | 	rdlong	local02, fp
0dd5c     02 28 66 F0 | 	shl	local02, #2
0dd60     28 4E 85 F1 | 	sub	fp, #40
0dd64     A7 28 02 F1 | 	add	local02, fp
0dd68     0C 4E 85 F1 | 	sub	fp, #12
0dd6c     A7 12 02 F6 | 	mov	arg01, fp
0dd70     50 F7 BF FD | 	call	#_converttoint
0dd74     14 FB 61 FC | 	wrlong	result1, local02
0dd78     34 4E 05 F1 | 	add	fp, #52
0dd7c     A7 28 02 FB | 	rdlong	local02, fp
0dd80     01 28 86 F1 | 	sub	local02, #1
0dd84     A7 28 62 FC | 	wrlong	local02, fp
0dd88     34 4E 85 F1 | 	sub	fp, #52
0dd8c     8C FF 9F FD | 	jmp	#LR__1171
0dd90                 | LR__1172
0dd90                 | ' if numpar=10 then 
0dd90     38 4E 05 F1 | 	add	fp, #56
0dd94     A7 28 02 FB | 	rdlong	local02, fp
0dd98     38 4E 85 F1 | 	sub	fp, #56
0dd9c     0A 28 0E F2 | 	cmp	local02, #10 wz
0dda0     5C 00 90 5D |  if_ne	jmp	#LR__1173
0dda4     0C 4E 05 F1 | 	add	fp, #12
0dda8     A7 12 02 FB | 	rdlong	arg01, fp
0ddac     04 4E 05 F1 | 	add	fp, #4
0ddb0     A7 14 02 FB | 	rdlong	arg02, fp
0ddb4     04 4E 05 F1 | 	add	fp, #4
0ddb8     A7 16 02 FB | 	rdlong	arg03, fp
0ddbc     04 4E 05 F1 | 	add	fp, #4
0ddc0     A7 18 02 FB | 	rdlong	arg04, fp
0ddc4     04 4E 05 F1 | 	add	fp, #4
0ddc8     A7 1A 02 FB | 	rdlong	arg05, fp
0ddcc     04 4E 05 F1 | 	add	fp, #4
0ddd0     A7 1C 02 FB | 	rdlong	arg06, fp
0ddd4     04 4E 05 F1 | 	add	fp, #4
0ddd8     A7 1E 02 FB | 	rdlong	arg07, fp
0dddc     04 4E 05 F1 | 	add	fp, #4
0dde0     A7 20 02 FB | 	rdlong	arg08, fp
0dde4     04 4E 05 F1 | 	add	fp, #4
0dde8     A7 22 02 FB | 	rdlong	arg09, fp
0ddec     04 4E 05 F1 | 	add	fp, #4
0ddf0     A7 24 02 FB | 	rdlong	arg10, fp
0ddf4     30 4E 85 F1 | 	sub	fp, #48
0ddf8     30 6F B1 FD | 	call	#_hg010b_spin2_blit
0ddfc     48 00 90 FD | 	jmp	#LR__1174
0de00                 | LR__1173
0de00     F2 1E 02 FB | 	rdlong	arg07, objptr
0de04     0C 4E 05 F1 | 	add	fp, #12
0de08     A7 14 02 FB | 	rdlong	arg02, fp
0de0c     04 4E 05 F1 | 	add	fp, #4
0de10     A7 16 02 FB | 	rdlong	arg03, fp
0de14     04 4E 05 F1 | 	add	fp, #4
0de18     A7 18 02 FB | 	rdlong	arg04, fp
0de1c     04 4E 05 F1 | 	add	fp, #4
0de20     A7 1A 02 FB | 	rdlong	arg05, fp
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 20 02 FB | 	rdlong	arg08, fp
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 22 02 FB | 	rdlong	arg09, fp
0de34     20 4E 85 F1 | 	sub	fp, #32
0de38     0F 13 02 F6 | 	mov	arg01, arg07
0de3c     0A 1C C6 F9 | 	decod	arg06, #10
0de40     0A 24 C6 F9 | 	decod	arg10, #10
0de44     E4 6E B1 FD | 	call	#_hg010b_spin2_blit
0de48                 | LR__1174
0de48                 | LR__1175
0de48     A7 F0 03 F6 | 	mov	ptra, fp
0de4c     B2 00 A0 FD | 	call	#popregs_
0de50                 | _do_blit_ret
0de50     2D 00 64 FD | 	ret
0de54                 | 
0de54                 | ' 
0de54                 | ' 
0de54                 | ' '-------------------- bin$
0de54                 | ' 
0de54                 | ' sub do_bin
0de54                 | _do_bin
0de54     01 4A 05 F6 | 	mov	COUNT_, #1
0de58     A8 00 A0 FD | 	call	#pushregs_
0de5c     18 F0 07 F1 | 	add	ptra, #24
0de60     4A 00 00 FF 
0de64     80 E4 05 F1 | 	add	objptr, ##38016
0de68     F2 26 02 FB | 	rdlong	local01, objptr
0de6c     13 17 02 F6 | 	mov	arg03, local01
0de70     01 16 66 F0 | 	shl	arg03, #1
0de74     13 17 02 F1 | 	add	arg03, local01
0de78     02 16 66 F0 | 	shl	arg03, #2
0de7c     03 00 00 FF 
0de80     04 E4 85 F1 | 	sub	objptr, ##1540
0de84     F2 16 02 F1 | 	add	arg03, objptr
0de88     0B 17 02 FB | 	rdlong	arg03, arg03
0de8c     0C 4E 05 F1 | 	add	fp, #12
0de90     A7 16 62 FC | 	wrlong	arg03, fp
0de94                 | ' 
0de94                 | ' numpar=compiledline(lineptr_e).result.uresult
0de94                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0de94     0C 4E 85 F1 | 	sub	fp, #12
0de98     03 16 16 F2 | 	cmp	arg03, #3 wc
0de9c     47 00 00 FF 
0dea0     7C E4 85 F1 | 	sub	objptr, ##36476
0dea4     0C 4E 05 C1 |  if_b	add	fp, #12
0dea8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0deac     0C 4E 85 C1 |  if_b	sub	fp, #12
0deb0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0deb4     00 12 06 F6 | 	mov	arg01, #0
0deb8     28 DD B1 FD | 	call	#__system___getiolock_0600
0debc     FD 12 02 F6 | 	mov	arg01, result1
0dec0     7C 80 B1 FD | 	call	#__system___lockmem
0dec4     B0 01 00 FF 
0dec8     DD 15 06 F6 | 	mov	arg02, ##@LR__5813
0decc     00 12 06 F6 | 	mov	arg01, #0
0ded0     00 16 06 F6 | 	mov	arg03, #0
0ded4     60 8D B1 FD | 	call	#__system___basic_print_string
0ded8     00 12 06 F6 | 	mov	arg01, #0
0dedc     04 DD B1 FD | 	call	#__system___getiolock_0600
0dee0     FD 00 68 FC | 	wrlong	#0, result1
0dee4     27 12 06 F6 | 	mov	arg01, #39
0dee8     00 14 06 F6 | 	mov	arg02, #0
0deec     60 46 B1 FD | 	call	#_printerror
0def0     B8 00 90 FD | 	jmp	#LR__1183
0def4                 | LR__1180
0def4                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0def4     0C 4E 05 F1 | 	add	fp, #12
0def8     A7 26 02 FB | 	rdlong	local01, fp
0defc     0C 4E 85 F1 | 	sub	fp, #12
0df00     02 26 0E F2 | 	cmp	local01, #2 wz
0df04     38 00 90 5D |  if_ne	jmp	#LR__1181
0df08     D4 F3 BF FD | 	call	#_pop
0df0c     FF 26 02 F6 | 	mov	local01, result3
0df10     A7 FA 61 FC | 	wrlong	result1, fp
0df14     04 4E 05 F1 | 	add	fp, #4
0df18     A7 FC 61 FC | 	wrlong	result2, fp
0df1c     04 4E 05 F1 | 	add	fp, #4
0df20     A7 26 62 FC | 	wrlong	local01, fp
0df24     08 4E 85 F1 | 	sub	fp, #8
0df28     A7 12 02 F6 | 	mov	arg01, fp
0df2c     94 F5 BF FD | 	call	#_converttoint
0df30     14 4E 05 F1 | 	add	fp, #20
0df34     A7 FA 61 FC | 	wrlong	result1, fp
0df38     14 4E 85 F1 | 	sub	fp, #20
0df3c     0C 00 90 FD | 	jmp	#LR__1182
0df40                 | LR__1181
0df40     14 4E 05 F1 | 	add	fp, #20
0df44     A7 00 68 FC | 	wrlong	#0, fp
0df48     14 4E 85 F1 | 	sub	fp, #20
0df4c                 | LR__1182
0df4c     90 F3 BF FD | 	call	#_pop
0df50     FF 26 02 F6 | 	mov	local01, result3
0df54     A7 FA 61 FC | 	wrlong	result1, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 FC 61 FC | 	wrlong	result2, fp
0df60     04 4E 05 F1 | 	add	fp, #4
0df64     A7 26 62 FC | 	wrlong	local01, fp
0df68     08 4E 85 F1 | 	sub	fp, #8
0df6c     A7 12 02 F6 | 	mov	arg01, fp
0df70     50 F5 BF FD | 	call	#_converttoint
0df74     10 4E 05 F1 | 	add	fp, #16
0df78     A7 FA 61 FC | 	wrlong	result1, fp
0df7c     FD 12 02 F6 | 	mov	arg01, result1
0df80     04 4E 05 F1 | 	add	fp, #4
0df84     A7 14 02 FB | 	rdlong	arg02, fp
0df88     14 4E 85 F1 | 	sub	fp, #20
0df8c     02 16 06 F6 | 	mov	arg03, #2
0df90     80 A2 B1 FD | 	call	#__system__Number_S
0df94     A7 FA 61 FC | 	wrlong	result1, fp
0df98     08 4E 05 F1 | 	add	fp, #8
0df9c     A7 3E 68 FC | 	wrlong	#31, fp
0dfa0     08 4E 85 F1 | 	sub	fp, #8
0dfa4     A7 12 02 F6 | 	mov	arg01, fp
0dfa8     CC F3 BF FD | 	call	#_push
0dfac                 | LR__1183
0dfac     A7 F0 03 F6 | 	mov	ptra, fp
0dfb0     B2 00 A0 FD | 	call	#popregs_
0dfb4                 | _do_bin_ret
0dfb4     2D 00 64 FD | 	ret
0dfb8                 | 
0dfb8                 | ' 
0dfb8                 | ' '-------------------- box
0dfb8                 | ' 
0dfb8                 | ' sub do_box
0dfb8                 | _do_box
0dfb8     03 4A 05 F6 | 	mov	COUNT_, #3
0dfbc     A8 00 A0 FD | 	call	#pushregs_
0dfc0     30 F0 07 F1 | 	add	ptra, #48
0dfc4     18 F3 BF FD | 	call	#_pop
0dfc8     FD 1A 02 F6 | 	mov	arg05, result1
0dfcc     FE 18 02 F6 | 	mov	arg04, result2
0dfd0     FF 16 02 F6 | 	mov	arg03, result3
0dfd4     24 4E 05 F1 | 	add	fp, #36
0dfd8     A7 1A 62 FC | 	wrlong	arg05, fp
0dfdc     04 4E 05 F1 | 	add	fp, #4
0dfe0     A7 18 62 FC | 	wrlong	arg04, fp
0dfe4     04 4E 05 F1 | 	add	fp, #4
0dfe8     A7 16 62 FC | 	wrlong	arg03, fp
0dfec     2C 4E 85 F1 | 	sub	fp, #44
0dff0     EC F2 BF FD | 	call	#_pop
0dff4     FD 1A 02 F6 | 	mov	arg05, result1
0dff8     FE 18 02 F6 | 	mov	arg04, result2
0dffc     FF 16 02 F6 | 	mov	arg03, result3
0e000     18 4E 05 F1 | 	add	fp, #24
0e004     A7 1A 62 FC | 	wrlong	arg05, fp
0e008     04 4E 05 F1 | 	add	fp, #4
0e00c     A7 18 62 FC | 	wrlong	arg04, fp
0e010     04 4E 05 F1 | 	add	fp, #4
0e014     A7 16 62 FC | 	wrlong	arg03, fp
0e018     20 4E 85 F1 | 	sub	fp, #32
0e01c     C0 F2 BF FD | 	call	#_pop
0e020     FD 1A 02 F6 | 	mov	arg05, result1
0e024     FE 18 02 F6 | 	mov	arg04, result2
0e028     FF 26 02 F6 | 	mov	local01, result3
0e02c     0C 4E 05 F1 | 	add	fp, #12
0e030     A7 1A 62 FC | 	wrlong	arg05, fp
0e034     04 4E 05 F1 | 	add	fp, #4
0e038     A7 18 62 FC | 	wrlong	arg04, fp
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 26 62 FC | 	wrlong	local01, fp
0e044     14 4E 85 F1 | 	sub	fp, #20
0e048     94 F2 BF FD | 	call	#_pop
0e04c     A7 FA 61 FC | 	wrlong	result1, fp
0e050     04 4E 05 F1 | 	add	fp, #4
0e054     A7 FC 61 FC | 	wrlong	result2, fp
0e058     04 4E 05 F1 | 	add	fp, #4
0e05c     A7 FE 61 FC | 	wrlong	result3, fp
0e060                 | ' 
0e060                 | ' t4=pop()
0e060                 | ' t3=pop()
0e060                 | ' t2=pop()
0e060                 | ' t1=pop()
0e060                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e060     FF 1A 02 F6 | 	mov	arg05, result3
0e064     08 4E 85 F1 | 	sub	fp, #8
0e068     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e06c     08 4E 05 51 |  if_ne	add	fp, #8
0e070     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e074     08 4E 85 51 |  if_ne	sub	fp, #8
0e078     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e07c     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e080     14 4E 05 F1 | 	add	fp, #20
0e084     A7 26 02 FB | 	rdlong	local01, fp
0e088     14 4E 85 F1 | 	sub	fp, #20
0e08c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e090     14 4E 05 51 |  if_ne	add	fp, #20
0e094     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e098     14 4E 85 51 |  if_ne	sub	fp, #20
0e09c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0a0     84 00 90 5D |  if_ne	jmp	#LR__1190
0e0a4     20 4E 05 F1 | 	add	fp, #32
0e0a8     A7 26 02 FB | 	rdlong	local01, fp
0e0ac     20 4E 85 F1 | 	sub	fp, #32
0e0b0     1C 26 0E F2 | 	cmp	local01, #28 wz
0e0b4     20 4E 05 51 |  if_ne	add	fp, #32
0e0b8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e0bc     20 4E 85 51 |  if_ne	sub	fp, #32
0e0c0     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0c4     60 00 90 5D |  if_ne	jmp	#LR__1190
0e0c8     2C 4E 05 F1 | 	add	fp, #44
0e0cc     A7 26 02 FB | 	rdlong	local01, fp
0e0d0     2C 4E 85 F1 | 	sub	fp, #44
0e0d4     1C 26 0E F2 | 	cmp	local01, #28 wz
0e0d8     2C 4E 05 51 |  if_ne	add	fp, #44
0e0dc     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e0e0     2C 4E 85 51 |  if_ne	sub	fp, #44
0e0e4     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e0e8     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e0ec     A7 12 02 FB | 	rdlong	arg01, fp
0e0f0     0C 4E 05 F1 | 	add	fp, #12
0e0f4     A7 14 02 FB | 	rdlong	arg02, fp
0e0f8     0C 4E 05 F1 | 	add	fp, #12
0e0fc     A7 16 02 FB | 	rdlong	arg03, fp
0e100     0C 4E 05 F1 | 	add	fp, #12
0e104     A7 18 02 FB | 	rdlong	arg04, fp
0e108     24 4E 85 F1 | 	sub	fp, #36
0e10c     37 00 00 FF 
0e110     28 E4 05 F1 | 	add	objptr, ##28200
0e114     F2 1A 02 FB | 	rdlong	arg05, objptr
0e118     37 00 00 FF 
0e11c     28 E4 85 F1 | 	sub	objptr, ##28200
0e120     D0 5E B1 FD | 	call	#_hg010b_spin2_box
0e124                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e124     6C 00 90 FD | 	jmp	#LR__1191
0e128                 | LR__1190
0e128     A7 12 02 F6 | 	mov	arg01, fp
0e12c     94 F3 BF FD | 	call	#_converttoint
0e130     FD 28 02 F6 | 	mov	local02, result1
0e134     0C 4E 05 F1 | 	add	fp, #12
0e138     A7 12 02 F6 | 	mov	arg01, fp
0e13c     0C 4E 85 F1 | 	sub	fp, #12
0e140     80 F3 BF FD | 	call	#_converttoint
0e144     FD 2A 02 F6 | 	mov	local03, result1
0e148     18 4E 05 F1 | 	add	fp, #24
0e14c     A7 12 02 F6 | 	mov	arg01, fp
0e150     18 4E 85 F1 | 	sub	fp, #24
0e154     6C F3 BF FD | 	call	#_converttoint
0e158     FD 26 02 F6 | 	mov	local01, result1
0e15c     24 4E 05 F1 | 	add	fp, #36
0e160     A7 12 02 F6 | 	mov	arg01, fp
0e164     24 4E 85 F1 | 	sub	fp, #36
0e168     58 F3 BF FD | 	call	#_converttoint
0e16c     FD 18 02 F6 | 	mov	arg04, result1
0e170     37 00 00 FF 
0e174     28 E4 05 F1 | 	add	objptr, ##28200
0e178     F2 1A 02 FB | 	rdlong	arg05, objptr
0e17c     37 00 00 FF 
0e180     28 E4 85 F1 | 	sub	objptr, ##28200
0e184     14 13 02 F6 | 	mov	arg01, local02
0e188     15 15 02 F6 | 	mov	arg02, local03
0e18c     13 17 02 F6 | 	mov	arg03, local01
0e190     60 5E B1 FD | 	call	#_hg010b_spin2_box
0e194                 | LR__1191
0e194     A7 F0 03 F6 | 	mov	ptra, fp
0e198     B2 00 A0 FD | 	call	#popregs_
0e19c                 | _do_box_ret
0e19c     2D 00 64 FD | 	ret
0e1a0                 | 
0e1a0                 | ' 
0e1a0                 | ' '-------------------- brun
0e1a0                 | ' 
0e1a0                 | ' sub do_brun
0e1a0                 | _do_brun
0e1a0     08 4A 05 F6 | 	mov	COUNT_, #8
0e1a4     A8 00 A0 FD | 	call	#pushregs_
0e1a8     34 F1 BF FD | 	call	#_pop
0e1ac     FE 1A 02 F6 | 	mov	arg05, result2
0e1b0     FF 18 02 F6 | 	mov	arg04, result3
0e1b4     FD 26 02 F6 | 	mov	local01, result1
0e1b8     0D 29 02 F6 | 	mov	local02, arg05
0e1bc     0C 2B 02 F6 | 	mov	local03, arg04
0e1c0                 | ' 
0e1c0                 | ' t1=pop() 
0e1c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e1c0     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e1c4     10 00 90 5D |  if_ne	jmp	#LR__1200
0e1c8     13 13 02 F6 | 	mov	arg01, local01
0e1cc     88 F2 BF FD | 	call	#_convertstring
0e1d0     FD 26 02 F6 | 	mov	local01, result1
0e1d4     1F 2A 06 F6 | 	mov	local03, #31
0e1d8                 | LR__1200
0e1d8                 | ' if t1.result_type=result_string then
0e1d8     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e1dc     F0 01 90 5D |  if_ne	jmp	#LR__1204
0e1e0     13 2D 02 F6 | 	mov	local04, local01
0e1e4                 | '   filename=t1.result.sresult
0e1e4                 | '   if left$(filename,1)="/" then 
0e1e4     16 13 02 F6 | 	mov	arg01, local04
0e1e8     01 14 06 F6 | 	mov	arg02, #1
0e1ec     D0 9D B1 FD | 	call	#__system__Left_S
0e1f0     FD 12 02 F6 | 	mov	arg01, result1
0e1f4     B0 01 00 FF 
0e1f8     E4 15 06 F6 | 	mov	arg02, ##@LR__5814
0e1fc     68 7D B1 FD | 	call	#__system___string_cmp
0e200     00 FA 0D F2 | 	cmp	result1, #0 wz
0e204     16 2F 02 A6 |  if_e	mov	local05, local04
0e208     14 00 90 AD |  if_e	jmp	#LR__1201
0e20c     B0 01 00 FF 
0e210     E6 13 06 F6 | 	mov	arg01, ##@LR__5815
0e214     16 15 02 F6 | 	mov	arg02, local04
0e218     80 7D B1 FD | 	call	#__system___string_concat
0e21c     FD 2E 02 F6 | 	mov	local05, result1
0e220                 | LR__1201
0e220                 | '   open fullfilename for input as #9
0e220     09 12 06 F6 | 	mov	arg01, #9
0e224     17 15 02 F6 | 	mov	arg02, local05
0e228     00 16 06 F6 | 	mov	arg03, #0
0e22c     14 89 B1 FD | 	call	#__system___basic_open_string
0e230     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e234     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e238     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e23c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e240     FD 30 0A F6 | 	mov	local06, result1 wz
0e244                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e244     8C 00 90 AD |  if_e	jmp	#LR__1202
0e248     00 12 06 F6 | 	mov	arg01, #0
0e24c     94 D9 B1 FD | 	call	#__system___getiolock_0600
0e250     FD 12 02 F6 | 	mov	arg01, result1
0e254     E8 7C B1 FD | 	call	#__system___lockmem
0e258     B0 01 00 FF 
0e25c     EF 15 06 F6 | 	mov	arg02, ##@LR__5816
0e260     00 12 06 F6 | 	mov	arg01, #0
0e264     00 16 06 F6 | 	mov	arg03, #0
0e268     CC 89 B1 FD | 	call	#__system___basic_print_string
0e26c     00 12 06 F6 | 	mov	arg01, #0
0e270     18 15 02 F6 | 	mov	arg02, local06
0e274     00 16 06 F6 | 	mov	arg03, #0
0e278     0A 18 06 F6 | 	mov	arg04, #10
0e27c     FC 89 B1 FD | 	call	#__system___basic_print_integer
0e280     B0 01 00 FF 
0e284     FD 15 06 F6 | 	mov	arg02, ##@LR__5817
0e288     00 12 06 F6 | 	mov	arg01, #0
0e28c     00 16 06 F6 | 	mov	arg03, #0
0e290     A4 89 B1 FD | 	call	#__system___basic_print_string
0e294     18 13 02 F6 | 	mov	arg01, local06
0e298     34 A6 B1 FD | 	call	#__system___strerror
0e29c     FD 14 02 F6 | 	mov	arg02, result1
0e2a0     00 12 06 F6 | 	mov	arg01, #0
0e2a4     00 16 06 F6 | 	mov	arg03, #0
0e2a8     8C 89 B1 FD | 	call	#__system___basic_print_string
0e2ac     00 12 06 F6 | 	mov	arg01, #0
0e2b0     0A 14 06 F6 | 	mov	arg02, #10
0e2b4     00 16 06 F6 | 	mov	arg03, #0
0e2b8     24 89 B1 FD | 	call	#__system___basic_print_char
0e2bc     00 12 06 F6 | 	mov	arg01, #0
0e2c0     20 D9 B1 FD | 	call	#__system___getiolock_0600
0e2c4     FD 00 68 FC | 	wrlong	#0, result1
0e2c8     09 12 06 F6 | 	mov	arg01, #9
0e2cc     CC CF B1 FD | 	call	#__system__close
0e2d0     FC 00 90 FD | 	jmp	#LR__1205
0e2d4                 | LR__1202
0e2d4     01 32 06 F6 | 	mov	local07, #1
0e2d8     00 34 06 F6 | 	mov	local08, #0
0e2dc                 | '   do
0e2dc                 | LR__1203
0e2dc                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e2dc     4E 00 00 FF 
0e2e0     B4 E4 05 F1 | 	add	objptr, ##40116
0e2e4     F2 16 02 F6 | 	mov	arg03, objptr
0e2e8     4E 00 00 FF 
0e2ec     B4 E4 85 F1 | 	sub	objptr, ##40116
0e2f0     09 12 06 F6 | 	mov	arg01, #9
0e2f4     19 15 02 F6 | 	mov	arg02, local07
0e2f8     0A 18 C6 F9 | 	decod	arg04, #10
0e2fc     01 1A 06 F6 | 	mov	arg05, #1
0e300     B0 8A B1 FD | 	call	#__system___basic_get
0e304     FD 30 02 F6 | 	mov	local06, result1
0e308     FD 32 02 F1 | 	add	local07, result1
0e30c     4E 00 00 FF 
0e310     B4 E4 05 F1 | 	add	objptr, ##40116
0e314     F2 12 02 F6 | 	mov	arg01, objptr
0e318     1A 15 02 F6 | 	mov	arg02, local08
0e31c     0A 16 C6 F9 | 	decod	arg03, #10
0e320     42 00 00 FF 
0e324     E8 E5 85 F1 | 	sub	objptr, ##34280
0e328     28 70 B1 FD | 	call	#_psram_spin2_write
0e32c     0B 00 00 FF 
0e330     CC E4 85 F1 | 	sub	objptr, ##5836
0e334     18 35 02 F1 | 	add	local08, local06
0e338     02 00 00 FF 
0e33c     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e340     E0 03 00 AF 
0e344     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e348     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e34c     36 00 00 FF 
0e350     FC E5 05 F1 | 	add	objptr, ##28156
0e354     F2 12 02 FB | 	rdlong	arg01, objptr
0e358     03 12 62 FD | 	cogstop	arg01
0e35c     04 E4 05 F1 | 	add	objptr, #4
0e360     F2 12 02 FB | 	rdlong	arg01, objptr
0e364     03 12 62 FD | 	cogstop	arg01
0e368     04 E4 05 F1 | 	add	objptr, #4
0e36c     F2 12 02 FB | 	rdlong	arg01, objptr
0e370     03 12 62 FD | 	cogstop	arg01
0e374     19 00 00 FF 
0e378     3C E5 05 F1 | 	add	objptr, ##13116
0e37c     F2 12 02 FB | 	rdlong	arg01, objptr
0e380     03 12 62 FD | 	cogstop	arg01
0e384     18 00 00 FF 
0e388     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e38c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e390     18 00 00 FF 
0e394     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e398     19 00 00 FF 
0e39c     34 E5 85 F1 | 	sub	objptr, ##13108
0e3a0     1E 34 06 F6 | 	mov	local08, #30
0e3a4     28 E4 61 FD | 	setq	objptr
0e3a8     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e3ac     01 34 66 C6 |  if_b	neg	local08, #1
0e3b0     1B 00 00 FF 
0e3b4     0C E5 05 F1 | 	add	objptr, ##14092
0e3b8     F2 34 62 FC | 	wrlong	local08, objptr
0e3bc     52 00 00 FF 
0e3c0     18 E5 85 F1 | 	sub	objptr, ##42264
0e3c4     00 12 06 F6 | 	mov	arg01, #0
0e3c8     01 12 62 FD | 	cogid	arg01
0e3cc     03 12 62 FD | 	cogstop	arg01
0e3d0                 | LR__1204
0e3d0                 | LR__1205
0e3d0     A7 F0 03 F6 | 	mov	ptra, fp
0e3d4     B2 00 A0 FD | 	call	#popregs_
0e3d8                 | _do_brun_ret
0e3d8     2D 00 64 FD | 	ret
0e3dc                 | 
0e3dc                 | ' 
0e3dc                 | ' '-------------------- cd
0e3dc                 | ' 
0e3dc                 | ' sub do_cd
0e3dc                 | _do_cd
0e3dc     06 4A 05 F6 | 	mov	COUNT_, #6
0e3e0     A8 00 A0 FD | 	call	#pushregs_
0e3e4     B1 01 00 FF 
0e3e8     00 12 06 F6 | 	mov	arg01, ##@LR__5818
0e3ec     31 14 06 F6 | 	mov	arg02, #49
0e3f0     B0 D9 B1 FD | 	call	#__system___basic_dir
0e3f4     E8 EE BF FD | 	call	#_pop
0e3f8     FE 18 02 F6 | 	mov	arg04, result2
0e3fc     FF 16 02 F6 | 	mov	arg03, result3
0e400     FD 26 02 F6 | 	mov	local01, result1
0e404     0C 29 02 F6 | 	mov	local02, arg04
0e408     0B 2B 02 F6 | 	mov	local03, arg03
0e40c                 | ' t1=pop()
0e40c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e40c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e410     10 00 90 5D |  if_ne	jmp	#LR__1210
0e414     13 13 02 F6 | 	mov	arg01, local01
0e418     3C F0 BF FD | 	call	#_convertstring
0e41c     FD 26 02 F6 | 	mov	local01, result1
0e420     1F 2A 06 F6 | 	mov	local03, #31
0e424                 | LR__1210
0e424                 | ' if t1.result_type<>result_string then printerror(15): return
0e424     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e428     10 00 90 AD |  if_e	jmp	#LR__1211
0e42c     0F 12 06 F6 | 	mov	arg01, #15
0e430     00 14 06 F6 | 	mov	arg02, #0
0e434     18 41 B1 FD | 	call	#_printerror
0e438     54 05 90 FD | 	jmp	#LR__1229
0e43c                 | LR__1211
0e43c     13 2D 02 F6 | 	mov	local04, local01
0e440                 | ' newdir$=t1.result.sresult
0e440                 | ' if newdir$=".." then 
0e440     B1 01 00 FF 
0e444     02 14 06 F6 | 	mov	arg02, ##@LR__5819
0e448     16 13 02 F6 | 	mov	arg01, local04
0e44c     18 7B B1 FD | 	call	#__system___string_cmp
0e450     00 FA 0D F2 | 	cmp	result1, #0 wz
0e454     C8 01 90 5D |  if_ne	jmp	#LR__1218
0e458     4A 00 00 FF 
0e45c     94 E4 05 F1 | 	add	objptr, ##38036
0e460     F2 12 02 FB | 	rdlong	arg01, objptr
0e464     4A 00 00 FF 
0e468     94 E4 85 F1 | 	sub	objptr, ##38036
0e46c     09 2F 02 F6 | 	mov	local05, arg01
0e470     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e474                 | LR__1212
0e474     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e478     01 2E 06 51 |  if_ne	add	local05, #1
0e47c     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e480                 | LR__1213
0e480     17 13 C2 F2 | 	subr	arg01, local05
0e484     4A 00 00 FF 
0e488     94 E4 05 F1 | 	add	objptr, ##38036
0e48c     F2 14 02 FB | 	rdlong	arg02, objptr
0e490     4A 00 00 FF 
0e494     94 E4 85 F1 | 	sub	objptr, ##38036
0e498     B1 01 00 FF 
0e49c     05 16 06 F6 | 	mov	arg03, ##@LR__5820
0e4a0     68 A1 B1 FD | 	call	#__system__InstrRev
0e4a4     FD 2C 02 F6 | 	mov	local04, result1
0e4a8                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e4a8     02 2C 56 F2 | 	cmps	local04, #2 wc
0e4ac     28 00 90 CD |  if_b	jmp	#LR__1214
0e4b0     4A 00 00 FF 
0e4b4     94 E4 05 F1 | 	add	objptr, ##38036
0e4b8     F2 12 02 FB | 	rdlong	arg01, objptr
0e4bc     4A 00 00 FF 
0e4c0     94 E4 85 F1 | 	sub	objptr, ##38036
0e4c4     01 2C 86 F1 | 	sub	local04, #1
0e4c8     16 15 02 F6 | 	mov	arg02, local04
0e4cc     F0 9A B1 FD | 	call	#__system__Left_S
0e4d0     FD 2C 02 F6 | 	mov	local04, result1
0e4d4     08 00 90 FD | 	jmp	#LR__1215
0e4d8                 | LR__1214
0e4d8     B1 01 00 FF 
0e4dc     07 2C 06 F6 | 	mov	local04, ##@LR__5821
0e4e0                 | LR__1215
0e4e0     16 13 02 F6 | 	mov	arg01, local04
0e4e4     E4 80 B1 FD | 	call	#__system___chdir
0e4e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4ec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4f0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e4f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4f8     FD 30 0A F6 | 	mov	local06, result1 wz
0e4fc                 | '   chdir newdir$
0e4fc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e4fc     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e500     A4 00 90 AD |  if_e	jmp	#LR__1216
0e504     00 12 06 F6 | 	mov	arg01, #0
0e508     D8 D6 B1 FD | 	call	#__system___getiolock_0600
0e50c     FD 12 02 F6 | 	mov	arg01, result1
0e510     2C 7A B1 FD | 	call	#__system___lockmem
0e514     B1 01 00 FF 
0e518     09 14 06 F6 | 	mov	arg02, ##@LR__5822
0e51c     00 12 06 F6 | 	mov	arg01, #0
0e520     00 16 06 F6 | 	mov	arg03, #0
0e524     10 87 B1 FD | 	call	#__system___basic_print_string
0e528     00 12 06 F6 | 	mov	arg01, #0
0e52c     18 15 02 F6 | 	mov	arg02, local06
0e530     00 16 06 F6 | 	mov	arg03, #0
0e534     0A 18 06 F6 | 	mov	arg04, #10
0e538     40 87 B1 FD | 	call	#__system___basic_print_integer
0e53c     B1 01 00 FF 
0e540     17 14 06 F6 | 	mov	arg02, ##@LR__5823
0e544     00 12 06 F6 | 	mov	arg01, #0
0e548     00 16 06 F6 | 	mov	arg03, #0
0e54c     E8 86 B1 FD | 	call	#__system___basic_print_string
0e550     45 00 00 FF 
0e554     50 E5 05 F1 | 	add	objptr, ##35664
0e558     F2 14 02 FB | 	rdlong	arg02, objptr
0e55c     45 00 00 FF 
0e560     50 E5 85 F1 | 	sub	objptr, ##35664
0e564     00 12 06 F6 | 	mov	arg01, #0
0e568     00 16 06 F6 | 	mov	arg03, #0
0e56c     C8 86 B1 FD | 	call	#__system___basic_print_string
0e570     00 12 06 F6 | 	mov	arg01, #0
0e574     0A 14 06 F6 | 	mov	arg02, #10
0e578     00 16 06 F6 | 	mov	arg03, #0
0e57c     60 86 B1 FD | 	call	#__system___basic_print_char
0e580     00 12 06 F6 | 	mov	arg01, #0
0e584     5C D6 B1 FD | 	call	#__system___getiolock_0600
0e588     FD 00 68 FC | 	wrlong	#0, result1
0e58c     4A 00 00 FF 
0e590     94 E4 05 F1 | 	add	objptr, ##38036
0e594     F2 12 02 FB | 	rdlong	arg01, objptr
0e598     4A 00 00 FF 
0e59c     94 E4 85 F1 | 	sub	objptr, ##38036
0e5a0     28 80 B1 FD | 	call	#__system___chdir
0e5a4     14 00 90 FD | 	jmp	#LR__1217
0e5a8                 | LR__1216
0e5a8     4A 00 00 FF 
0e5ac     94 E4 05 F1 | 	add	objptr, ##38036
0e5b0     F2 2C 62 FC | 	wrlong	local04, objptr
0e5b4     4A 00 00 FF 
0e5b8     94 E4 85 F1 | 	sub	objptr, ##38036
0e5bc                 | LR__1217
0e5bc                 | '   print "Current directory: ";currentdir$
0e5bc     00 12 06 F6 | 	mov	arg01, #0
0e5c0     20 D6 B1 FD | 	call	#__system___getiolock_0600
0e5c4     FD 12 02 F6 | 	mov	arg01, result1
0e5c8     74 79 B1 FD | 	call	#__system___lockmem
0e5cc     B1 01 00 FF 
0e5d0     1A 14 06 F6 | 	mov	arg02, ##@LR__5824
0e5d4     00 12 06 F6 | 	mov	arg01, #0
0e5d8     00 16 06 F6 | 	mov	arg03, #0
0e5dc     58 86 B1 FD | 	call	#__system___basic_print_string
0e5e0     4A 00 00 FF 
0e5e4     94 E4 05 F1 | 	add	objptr, ##38036
0e5e8     F2 14 02 FB | 	rdlong	arg02, objptr
0e5ec     4A 00 00 FF 
0e5f0     94 E4 85 F1 | 	sub	objptr, ##38036
0e5f4     00 12 06 F6 | 	mov	arg01, #0
0e5f8     00 16 06 F6 | 	mov	arg03, #0
0e5fc     38 86 B1 FD | 	call	#__system___basic_print_string
0e600     00 12 06 F6 | 	mov	arg01, #0
0e604     0A 14 06 F6 | 	mov	arg02, #10
0e608     00 16 06 F6 | 	mov	arg03, #0
0e60c     D0 85 B1 FD | 	call	#__system___basic_print_char
0e610     00 12 06 F6 | 	mov	arg01, #0
0e614     CC D5 B1 FD | 	call	#__system___getiolock_0600
0e618     FD 00 68 FC | 	wrlong	#0, result1
0e61c                 | '   return
0e61c     70 03 90 FD | 	jmp	#LR__1229
0e620                 | LR__1218
0e620                 | ' if left$(newdir$,1)="/" then 
0e620     16 13 02 F6 | 	mov	arg01, local04
0e624     01 14 06 F6 | 	mov	arg02, #1
0e628     94 99 B1 FD | 	call	#__system__Left_S
0e62c     FD 12 02 F6 | 	mov	arg01, result1
0e630     B1 01 00 FF 
0e634     2E 14 06 F6 | 	mov	arg02, ##@LR__5825
0e638     2C 79 B1 FD | 	call	#__system___string_cmp
0e63c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e640     40 01 90 5D |  if_ne	jmp	#LR__1221
0e644     16 13 02 F6 | 	mov	arg01, local04
0e648     80 7F B1 FD | 	call	#__system___chdir
0e64c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e650     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e654     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e658     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e65c     FD 30 0A F6 | 	mov	local06, result1 wz
0e660                 | '   chdir(newdir$)
0e660                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e660     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e664     A4 00 90 AD |  if_e	jmp	#LR__1219
0e668     00 12 06 F6 | 	mov	arg01, #0
0e66c     74 D5 B1 FD | 	call	#__system___getiolock_0600
0e670     FD 12 02 F6 | 	mov	arg01, result1
0e674     C8 78 B1 FD | 	call	#__system___lockmem
0e678     B1 01 00 FF 
0e67c     30 14 06 F6 | 	mov	arg02, ##@LR__5826
0e680     00 12 06 F6 | 	mov	arg01, #0
0e684     00 16 06 F6 | 	mov	arg03, #0
0e688     AC 85 B1 FD | 	call	#__system___basic_print_string
0e68c     00 12 06 F6 | 	mov	arg01, #0
0e690     18 15 02 F6 | 	mov	arg02, local06
0e694     00 16 06 F6 | 	mov	arg03, #0
0e698     0A 18 06 F6 | 	mov	arg04, #10
0e69c     DC 85 B1 FD | 	call	#__system___basic_print_integer
0e6a0     B1 01 00 FF 
0e6a4     3E 14 06 F6 | 	mov	arg02, ##@LR__5827
0e6a8     00 12 06 F6 | 	mov	arg01, #0
0e6ac     00 16 06 F6 | 	mov	arg03, #0
0e6b0     84 85 B1 FD | 	call	#__system___basic_print_string
0e6b4     45 00 00 FF 
0e6b8     50 E5 05 F1 | 	add	objptr, ##35664
0e6bc     F2 14 02 FB | 	rdlong	arg02, objptr
0e6c0     45 00 00 FF 
0e6c4     50 E5 85 F1 | 	sub	objptr, ##35664
0e6c8     00 12 06 F6 | 	mov	arg01, #0
0e6cc     00 16 06 F6 | 	mov	arg03, #0
0e6d0     64 85 B1 FD | 	call	#__system___basic_print_string
0e6d4     00 12 06 F6 | 	mov	arg01, #0
0e6d8     0A 14 06 F6 | 	mov	arg02, #10
0e6dc     00 16 06 F6 | 	mov	arg03, #0
0e6e0     FC 84 B1 FD | 	call	#__system___basic_print_char
0e6e4     00 12 06 F6 | 	mov	arg01, #0
0e6e8     F8 D4 B1 FD | 	call	#__system___getiolock_0600
0e6ec     FD 00 68 FC | 	wrlong	#0, result1
0e6f0     4A 00 00 FF 
0e6f4     94 E4 05 F1 | 	add	objptr, ##38036
0e6f8     F2 12 02 FB | 	rdlong	arg01, objptr
0e6fc     4A 00 00 FF 
0e700     94 E4 85 F1 | 	sub	objptr, ##38036
0e704     C4 7E B1 FD | 	call	#__system___chdir
0e708     14 00 90 FD | 	jmp	#LR__1220
0e70c                 | LR__1219
0e70c     4A 00 00 FF 
0e710     94 E4 05 F1 | 	add	objptr, ##38036
0e714     F2 2C 62 FC | 	wrlong	local04, objptr
0e718     4A 00 00 FF 
0e71c     94 E4 85 F1 | 	sub	objptr, ##38036
0e720                 | LR__1220
0e720                 | '   print "Current directory: ";currentdir$
0e720     00 12 06 F6 | 	mov	arg01, #0
0e724     BC D4 B1 FD | 	call	#__system___getiolock_0600
0e728     FD 12 02 F6 | 	mov	arg01, result1
0e72c     10 78 B1 FD | 	call	#__system___lockmem
0e730     B1 01 00 FF 
0e734     41 14 06 F6 | 	mov	arg02, ##@LR__5828
0e738     00 12 06 F6 | 	mov	arg01, #0
0e73c     00 16 06 F6 | 	mov	arg03, #0
0e740     F4 84 B1 FD | 	call	#__system___basic_print_string
0e744     4A 00 00 FF 
0e748     94 E4 05 F1 | 	add	objptr, ##38036
0e74c     F2 14 02 FB | 	rdlong	arg02, objptr
0e750     4A 00 00 FF 
0e754     94 E4 85 F1 | 	sub	objptr, ##38036
0e758     00 12 06 F6 | 	mov	arg01, #0
0e75c     00 16 06 F6 | 	mov	arg03, #0
0e760     D4 84 B1 FD | 	call	#__system___basic_print_string
0e764     00 12 06 F6 | 	mov	arg01, #0
0e768     0A 14 06 F6 | 	mov	arg02, #10
0e76c     00 16 06 F6 | 	mov	arg03, #0
0e770     6C 84 B1 FD | 	call	#__system___basic_print_char
0e774     00 12 06 F6 | 	mov	arg01, #0
0e778     68 D4 B1 FD | 	call	#__system___getiolock_0600
0e77c     FD 00 68 FC | 	wrlong	#0, result1
0e780                 | '   return
0e780     0C 02 90 FD | 	jmp	#LR__1229
0e784                 | LR__1221
0e784                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0e784     4A 00 00 FF 
0e788     94 E4 05 F1 | 	add	objptr, ##38036
0e78c     F2 12 02 FB | 	rdlong	arg01, objptr
0e790     4A 00 00 FF 
0e794     94 E4 85 F1 | 	sub	objptr, ##38036
0e798     B1 01 00 FF 
0e79c     55 14 06 F6 | 	mov	arg02, ##@LR__5829
0e7a0     C4 77 B1 FD | 	call	#__system___string_cmp
0e7a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e7a8     34 00 90 AD |  if_e	jmp	#LR__1222
0e7ac     4A 00 00 FF 
0e7b0     94 E4 05 F1 | 	add	objptr, ##38036
0e7b4     F2 12 02 FB | 	rdlong	arg01, objptr
0e7b8     4A 00 00 FF 
0e7bc     94 E4 85 F1 | 	sub	objptr, ##38036
0e7c0     B1 01 00 FF 
0e7c4     57 14 06 F6 | 	mov	arg02, ##@LR__5830
0e7c8     D0 77 B1 FD | 	call	#__system___string_concat
0e7cc     FD 12 02 F6 | 	mov	arg01, result1
0e7d0     16 15 02 F6 | 	mov	arg02, local04
0e7d4     C4 77 B1 FD | 	call	#__system___string_concat
0e7d8     FD 2C 02 F6 | 	mov	local04, result1
0e7dc     20 00 90 FD | 	jmp	#LR__1223
0e7e0                 | LR__1222
0e7e0     4A 00 00 FF 
0e7e4     94 E4 05 F1 | 	add	objptr, ##38036
0e7e8     F2 12 02 FB | 	rdlong	arg01, objptr
0e7ec     4A 00 00 FF 
0e7f0     94 E4 85 F1 | 	sub	objptr, ##38036
0e7f4     16 15 02 F6 | 	mov	arg02, local04
0e7f8     A0 77 B1 FD | 	call	#__system___string_concat
0e7fc     FD 2C 02 F6 | 	mov	local04, result1
0e800                 | LR__1223
0e800                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0e800     16 13 02 F6 | 	mov	arg01, local04
0e804     01 14 06 F6 | 	mov	arg02, #1
0e808     3C 98 B1 FD | 	call	#__system__Right_S
0e80c     FD 12 02 F6 | 	mov	arg01, result1
0e810     B1 01 00 FF 
0e814     59 14 06 F6 | 	mov	arg02, ##@LR__5831
0e818     4C 77 B1 FD | 	call	#__system___string_cmp
0e81c     00 FA 0D F2 | 	cmp	result1, #0 wz
0e820     30 00 90 5D |  if_ne	jmp	#LR__1226
0e824     16 13 02 F6 | 	mov	arg01, local04
0e828     09 2F 02 F6 | 	mov	local05, arg01
0e82c     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0e830                 | LR__1224
0e830     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e834     01 2E 06 51 |  if_ne	add	local05, #1
0e838     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0e83c                 | LR__1225
0e83c     09 2F 82 F1 | 	sub	local05, arg01
0e840     17 15 02 F6 | 	mov	arg02, local05
0e844     01 14 86 F1 | 	sub	arg02, #1
0e848     16 13 02 F6 | 	mov	arg01, local04
0e84c     70 97 B1 FD | 	call	#__system__Left_S
0e850     FD 2C 02 F6 | 	mov	local04, result1
0e854                 | LR__1226
0e854     16 13 02 F6 | 	mov	arg01, local04
0e858     70 7D B1 FD | 	call	#__system___chdir
0e85c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e860     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e864     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e868     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e86c     FD 30 0A F6 | 	mov	local06, result1 wz
0e870                 | '   chdir(newdir$)
0e870                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e870     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e874     A4 00 90 AD |  if_e	jmp	#LR__1227
0e878     00 12 06 F6 | 	mov	arg01, #0
0e87c     64 D3 B1 FD | 	call	#__system___getiolock_0600
0e880     FD 12 02 F6 | 	mov	arg01, result1
0e884     B8 76 B1 FD | 	call	#__system___lockmem
0e888     B1 01 00 FF 
0e88c     5B 14 06 F6 | 	mov	arg02, ##@LR__5832
0e890     00 12 06 F6 | 	mov	arg01, #0
0e894     00 16 06 F6 | 	mov	arg03, #0
0e898     9C 83 B1 FD | 	call	#__system___basic_print_string
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     18 15 02 F6 | 	mov	arg02, local06
0e8a4     00 16 06 F6 | 	mov	arg03, #0
0e8a8     0A 18 06 F6 | 	mov	arg04, #10
0e8ac     CC 83 B1 FD | 	call	#__system___basic_print_integer
0e8b0     B1 01 00 FF 
0e8b4     69 14 06 F6 | 	mov	arg02, ##@LR__5833
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     00 16 06 F6 | 	mov	arg03, #0
0e8c0     74 83 B1 FD | 	call	#__system___basic_print_string
0e8c4     45 00 00 FF 
0e8c8     50 E5 05 F1 | 	add	objptr, ##35664
0e8cc     F2 14 02 FB | 	rdlong	arg02, objptr
0e8d0     45 00 00 FF 
0e8d4     50 E5 85 F1 | 	sub	objptr, ##35664
0e8d8     00 12 06 F6 | 	mov	arg01, #0
0e8dc     00 16 06 F6 | 	mov	arg03, #0
0e8e0     54 83 B1 FD | 	call	#__system___basic_print_string
0e8e4     00 12 06 F6 | 	mov	arg01, #0
0e8e8     0A 14 06 F6 | 	mov	arg02, #10
0e8ec     00 16 06 F6 | 	mov	arg03, #0
0e8f0     EC 82 B1 FD | 	call	#__system___basic_print_char
0e8f4     00 12 06 F6 | 	mov	arg01, #0
0e8f8     E8 D2 B1 FD | 	call	#__system___getiolock_0600
0e8fc     FD 00 68 FC | 	wrlong	#0, result1
0e900     4A 00 00 FF 
0e904     94 E4 05 F1 | 	add	objptr, ##38036
0e908     F2 12 02 FB | 	rdlong	arg01, objptr
0e90c     4A 00 00 FF 
0e910     94 E4 85 F1 | 	sub	objptr, ##38036
0e914     B4 7C B1 FD | 	call	#__system___chdir
0e918     14 00 90 FD | 	jmp	#LR__1228
0e91c                 | LR__1227
0e91c     4A 00 00 FF 
0e920     94 E4 05 F1 | 	add	objptr, ##38036
0e924     F2 2C 62 FC | 	wrlong	local04, objptr
0e928     4A 00 00 FF 
0e92c     94 E4 85 F1 | 	sub	objptr, ##38036
0e930                 | LR__1228
0e930                 | '   print "Current directory: ";currentdir$
0e930     00 12 06 F6 | 	mov	arg01, #0
0e934     AC D2 B1 FD | 	call	#__system___getiolock_0600
0e938     FD 12 02 F6 | 	mov	arg01, result1
0e93c     00 76 B1 FD | 	call	#__system___lockmem
0e940     B1 01 00 FF 
0e944     6C 14 06 F6 | 	mov	arg02, ##@LR__5834
0e948     00 12 06 F6 | 	mov	arg01, #0
0e94c     00 16 06 F6 | 	mov	arg03, #0
0e950     E4 82 B1 FD | 	call	#__system___basic_print_string
0e954     4A 00 00 FF 
0e958     94 E4 05 F1 | 	add	objptr, ##38036
0e95c     F2 14 02 FB | 	rdlong	arg02, objptr
0e960     4A 00 00 FF 
0e964     94 E4 85 F1 | 	sub	objptr, ##38036
0e968     00 12 06 F6 | 	mov	arg01, #0
0e96c     00 16 06 F6 | 	mov	arg03, #0
0e970     C4 82 B1 FD | 	call	#__system___basic_print_string
0e974     00 12 06 F6 | 	mov	arg01, #0
0e978     0A 14 06 F6 | 	mov	arg02, #10
0e97c     00 16 06 F6 | 	mov	arg03, #0
0e980     5C 82 B1 FD | 	call	#__system___basic_print_char
0e984     00 12 06 F6 | 	mov	arg01, #0
0e988     58 D2 B1 FD | 	call	#__system___getiolock_0600
0e98c     FD 00 68 FC | 	wrlong	#0, result1
0e990                 | LR__1229
0e990     A7 F0 03 F6 | 	mov	ptra, fp
0e994     B2 00 A0 FD | 	call	#popregs_
0e998                 | _do_cd_ret
0e998     2D 00 64 FD | 	ret
0e99c                 | 
0e99c                 | ' 
0e99c                 | ' '-------------------- changefreq
0e99c                 | ' 
0e99c                 | ' sub do_changefreq
0e99c                 | _do_changefreq
0e99c     04 4A 05 F6 | 	mov	COUNT_, #4
0e9a0     A8 00 A0 FD | 	call	#pushregs_
0e9a4     28 F0 07 F1 | 	add	ptra, #40
0e9a8     34 E9 BF FD | 	call	#_pop
0e9ac     FF 14 02 F6 | 	mov	arg02, result3
0e9b0     A7 FA 61 FC | 	wrlong	result1, fp
0e9b4     04 4E 05 F1 | 	add	fp, #4
0e9b8     A7 FC 61 FC | 	wrlong	result2, fp
0e9bc     04 4E 05 F1 | 	add	fp, #4
0e9c0     A7 14 62 FC | 	wrlong	arg02, fp
0e9c4     08 4E 85 F1 | 	sub	fp, #8
0e9c8     A7 12 02 F6 | 	mov	arg01, fp
0e9cc     B0 EB BF FD | 	call	#_converttofloat
0e9d0     24 4E 05 F1 | 	add	fp, #36
0e9d4     A7 FA 61 FC | 	wrlong	result1, fp
0e9d8     24 4E 85 F1 | 	sub	fp, #36
0e9dc     FD 14 02 F6 | 	mov	arg02, result1
0e9e0     FC 16 20 FF 
0e9e4     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9e8     A0 B3 B1 FD | 	call	#__system____builtin_logbase
0e9ec     FD 26 02 F6 | 	mov	local01, result1
0e9f0     1E 14 C6 F9 | 	decod	arg02, #30
0e9f4     FC 16 20 FF 
0e9f8     54 12 06 F6 | 	mov	arg01, ##1076754516
0e9fc     8C B3 B1 FD | 	call	#__system____builtin_logbase
0ea00     FD 14 02 F6 | 	mov	arg02, result1
0ea04     13 13 02 F6 | 	mov	arg01, local01
0ea08     B4 A5 B1 FD | 	call	#__system___float_div
0ea0c     FD 12 02 F6 | 	mov	arg01, result1
0ea10     00 14 06 F6 | 	mov	arg02, #0
0ea14     6C A8 B1 FD | 	call	#__system___float_tointeger
0ea18     10 4E 05 F1 | 	add	fp, #16
0ea1c     A7 FA 61 FC | 	wrlong	result1, fp
0ea20     1E 26 C6 F9 | 	decod	local01, #30
0ea24     FD 12 02 F6 | 	mov	arg01, result1
0ea28     10 4E 85 F1 | 	sub	fp, #16
0ea2c     05 12 06 F1 | 	add	arg01, #5
0ea30     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea34     1F 28 C6 C9 |  if_b	decod	local02, #31
0ea38     00 28 06 36 |  if_ae	mov	local02, #0
0ea3c     78 9F B1 FD | 	call	#__system___float_fromuns
0ea40     14 FB 61 F5 | 	xor	result1, local02
0ea44     FD 14 02 F6 | 	mov	arg02, result1
0ea48     13 13 02 F6 | 	mov	arg01, local01
0ea4c     74 B2 B1 FD | 	call	#__system____builtin_powf
0ea50     FD 12 02 F6 | 	mov	arg01, result1
0ea54     01 14 06 F6 | 	mov	arg02, #1
0ea58     28 A8 B1 FD | 	call	#__system___float_tointeger
0ea5c     14 4E 05 F1 | 	add	fp, #20
0ea60     A7 FA 61 FC | 	wrlong	result1, fp
0ea64                 | ' skip=round(2^(lfreq+5))
0ea64                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ea64     14 4E 85 F1 | 	sub	fp, #20
0ea68     40 00 00 FF 
0ea6c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ea70     30 00 90 CD |  if_b	jmp	#LR__1230
0ea74     14 4E 05 F1 | 	add	fp, #20
0ea78     A7 26 02 FB | 	rdlong	local01, fp
0ea7c     13 27 52 F6 | 	abs	local01, local01 wc
0ea80     0F 26 46 F0 | 	shr	local01, #15
0ea84     13 27 82 F6 | 	negc	local01, local01
0ea88     04 4E 05 F1 | 	add	fp, #4
0ea8c     A7 26 62 FC | 	wrlong	local01, fp
0ea90     04 4E 85 F1 | 	sub	fp, #4
0ea94     40 00 80 FF 
0ea98     A7 00 68 FC | 	wrlong	##32768, fp
0ea9c     14 4E 85 F1 | 	sub	fp, #20
0eaa0     0C 00 90 FD | 	jmp	#LR__1231
0eaa4                 | LR__1230
0eaa4     18 4E 05 F1 | 	add	fp, #24
0eaa8     A7 02 68 FC | 	wrlong	#1, fp
0eaac     18 4E 85 F1 | 	sub	fp, #24
0eab0                 | LR__1231
0eab0     24 4E 05 F1 | 	add	fp, #36
0eab4     A7 14 02 FB | 	rdlong	arg02, fp
0eab8     24 4E 85 F1 | 	sub	fp, #36
0eabc     3E 2C 25 FF 
0eac0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0eac4     F8 A4 B1 FD | 	call	#__system___float_div
0eac8     FD 26 02 F6 | 	mov	local01, result1
0eacc     18 4E 05 F1 | 	add	fp, #24
0ead0     A7 12 02 FB | 	rdlong	arg01, fp
0ead4     18 4E 85 F1 | 	sub	fp, #24
0ead8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eadc     1F 28 C6 C9 |  if_b	decod	local02, #31
0eae0     00 28 06 36 |  if_ae	mov	local02, #0
0eae4     D0 9E B1 FD | 	call	#__system___float_fromuns
0eae8     14 FB 61 F5 | 	xor	result1, local02
0eaec     FD 2A 02 F6 | 	mov	local03, result1
0eaf0     1E 2C C6 F9 | 	decod	local04, #30
0eaf4     0D 12 06 F6 | 	mov	arg01, #13
0eaf8     10 4E 05 F1 | 	add	fp, #16
0eafc     A7 14 02 FB | 	rdlong	arg02, fp
0eb00     10 4E 85 F1 | 	sub	fp, #16
0eb04     0A 13 82 F1 | 	sub	arg01, arg02
0eb08     09 13 52 F6 | 	abs	arg01, arg01 wc
0eb0c     1F 28 C6 C9 |  if_b	decod	local02, #31
0eb10     00 28 06 36 |  if_ae	mov	local02, #0
0eb14     A0 9E B1 FD | 	call	#__system___float_fromuns
0eb18     14 FB 61 F5 | 	xor	result1, local02
0eb1c     FD 14 02 F6 | 	mov	arg02, result1
0eb20     16 13 02 F6 | 	mov	arg01, local04
0eb24     9C B1 B1 FD | 	call	#__system____builtin_powf
0eb28     FD 14 02 F6 | 	mov	arg02, result1
0eb2c     15 13 02 F6 | 	mov	arg01, local03
0eb30     88 A2 B1 FD | 	call	#__system___float_mul
0eb34     FD 14 02 F6 | 	mov	arg02, result1
0eb38     13 13 02 F6 | 	mov	arg01, local01
0eb3c     80 A4 B1 FD | 	call	#__system___float_div
0eb40     FD 12 02 F6 | 	mov	arg01, result1
0eb44     01 14 06 F6 | 	mov	arg02, #1
0eb48     38 A7 B1 FD | 	call	#__system___float_tointeger
0eb4c     FD 26 02 F6 | 	mov	local01, result1
0eb50     1C 4E 05 F1 | 	add	fp, #28
0eb54     A7 26 62 FC | 	wrlong	local01, fp
0eb58     1C 4E 85 F1 | 	sub	fp, #28
0eb5c     80 E7 BF FD | 	call	#_pop
0eb60     FF 2C 02 F6 | 	mov	local04, result3
0eb64     A7 FA 61 FC | 	wrlong	result1, fp
0eb68     04 4E 05 F1 | 	add	fp, #4
0eb6c     A7 FC 61 FC | 	wrlong	result2, fp
0eb70     04 4E 05 F1 | 	add	fp, #4
0eb74     A7 2C 62 FC | 	wrlong	local04, fp
0eb78     08 4E 85 F1 | 	sub	fp, #8
0eb7c     A7 12 02 F6 | 	mov	arg01, fp
0eb80     40 E9 BF FD | 	call	#_converttoint
0eb84     FD 2A 52 F6 | 	abs	local03, result1 wc
0eb88     07 2A 06 F5 | 	and	local03, #7
0eb8c     15 2B 82 F6 | 	negc	local03, local03
0eb90     0C 4E 05 F1 | 	add	fp, #12
0eb94     A7 2A 62 FC | 	wrlong	local03, fp
0eb98     08 4E 05 F1 | 	add	fp, #8
0eb9c     A7 26 02 FB | 	rdlong	local01, fp
0eba0     10 26 66 F0 | 	shl	local01, #16
0eba4     08 4E 05 F1 | 	add	fp, #8
0eba8     A7 2C 02 FB | 	rdlong	local04, fp
0ebac     16 27 02 F1 | 	add	local01, local04
0ebb0     04 4E 05 F1 | 	add	fp, #4
0ebb4     A7 26 62 FC | 	wrlong	local01, fp
0ebb8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ebb8     37 00 00 FF 
0ebbc     10 E4 05 F1 | 	add	objptr, ##28176
0ebc0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebc4     37 00 00 FF 
0ebc8     10 E4 85 F1 | 	sub	objptr, ##28176
0ebcc     14 4E 85 F1 | 	sub	fp, #20
0ebd0     A7 2C 02 FB | 	rdlong	local04, fp
0ebd4     0C 4E 85 F1 | 	sub	fp, #12
0ebd8     06 2C 66 F0 | 	shl	local04, #6
0ebdc     16 13 02 F1 | 	add	arg01, local04
0ebe0     08 12 06 F1 | 	add	arg01, #8
0ebe4     09 FB 01 FB | 	rdlong	result1, arg01
0ebe8     1B FA 2D F4 | 	testbn	result1, #27 wz
0ebec     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ebf0     37 00 00 FF 
0ebf4     10 E4 05 F1 | 	add	objptr, ##28176
0ebf8     F2 12 02 FB | 	rdlong	arg01, objptr
0ebfc     37 00 00 FF 
0ec00     10 E4 85 F1 | 	sub	objptr, ##28176
0ec04     0C 4E 05 F1 | 	add	fp, #12
0ec08     A7 2C 02 FB | 	rdlong	local04, fp
0ec0c     06 2C 66 F0 | 	shl	local04, #6
0ec10     16 13 02 F1 | 	add	arg01, local04
0ec14     18 12 06 F1 | 	add	arg01, #24
0ec18     14 4E 05 F1 | 	add	fp, #20
0ec1c     A7 14 02 FB | 	rdlong	arg02, fp
0ec20     20 4E 85 F1 | 	sub	fp, #32
0ec24     09 15 62 FC | 	wrlong	arg02, arg01
0ec28     80 00 90 FD | 	jmp	#LR__1233
0ec2c                 | LR__1232
0ec2c     37 00 00 FF 
0ec30     10 E4 05 F1 | 	add	objptr, ##28176
0ec34     F2 26 02 FB | 	rdlong	local01, objptr
0ec38     37 00 00 FF 
0ec3c     10 E4 85 F1 | 	sub	objptr, ##28176
0ec40     0C 4E 05 F1 | 	add	fp, #12
0ec44     A7 2C 02 FB | 	rdlong	local04, fp
0ec48     06 2C 66 F0 | 	shl	local04, #6
0ec4c     16 27 02 F1 | 	add	local01, local04
0ec50     18 26 06 F1 | 	add	local01, #24
0ec54     18 4E 05 F1 | 	add	fp, #24
0ec58     A7 14 02 FB | 	rdlong	arg02, fp
0ec5c     24 4E 85 F1 | 	sub	fp, #36
0ec60     3E 2C 25 FF 
0ec64     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ec68     54 A3 B1 FD | 	call	#__system___float_div
0ec6c     FD 12 02 F6 | 	mov	arg01, result1
0ec70     01 14 06 F6 | 	mov	arg02, #1
0ec74     0C A6 B1 FD | 	call	#__system___float_tointeger
0ec78     13 FB 51 FC | 	wrword	result1, local01
0ec7c     37 00 00 FF 
0ec80     10 E4 05 F1 | 	add	objptr, ##28176
0ec84     F2 12 02 FB | 	rdlong	arg01, objptr
0ec88     37 00 00 FF 
0ec8c     10 E4 85 F1 | 	sub	objptr, ##28176
0ec90     0C 4E 05 F1 | 	add	fp, #12
0ec94     A7 2C 02 FB | 	rdlong	local04, fp
0ec98     0C 4E 85 F1 | 	sub	fp, #12
0ec9c     06 2C 66 F0 | 	shl	local04, #6
0eca0     16 13 02 F1 | 	add	arg01, local04
0eca4     1A 12 06 F1 | 	add	arg01, #26
0eca8     09 01 5A FC | 	wrword	#256, arg01
0ecac                 | LR__1233
0ecac     A7 F0 03 F6 | 	mov	ptra, fp
0ecb0     B2 00 A0 FD | 	call	#popregs_
0ecb4                 | _do_changefreq_ret
0ecb4     2D 00 64 FD | 	ret
0ecb8                 | 
0ecb8                 | ' 
0ecb8                 | ' '-------------------- changepan
0ecb8                 | ' 
0ecb8                 | ' sub do_changepan
0ecb8                 | _do_changepan
0ecb8     01 4A 05 F6 | 	mov	COUNT_, #1
0ecbc     A8 00 A0 FD | 	call	#pushregs_
0ecc0     14 F0 07 F1 | 	add	ptra, #20
0ecc4     18 E6 BF FD | 	call	#_pop
0ecc8     A7 FA 61 FC | 	wrlong	result1, fp
0eccc     04 4E 05 F1 | 	add	fp, #4
0ecd0     A7 FC 61 FC | 	wrlong	result2, fp
0ecd4     04 4E 05 F1 | 	add	fp, #4
0ecd8     A7 FE 61 FC | 	wrlong	result3, fp
0ecdc     08 4E 85 F1 | 	sub	fp, #8
0ece0     00 00 23 FF 
0ece4     00 26 06 F6 | 	mov	local01, ##1174405120
0ece8     A7 12 02 F6 | 	mov	arg01, fp
0ecec     90 E8 BF FD | 	call	#_converttofloat
0ecf0     FD 14 02 F6 | 	mov	arg02, result1
0ecf4     13 13 02 F6 | 	mov	arg01, local01
0ecf8     C0 A0 B1 FD | 	call	#__system___float_mul
0ecfc     FD 12 02 F6 | 	mov	arg01, result1
0ed00     01 14 06 F6 | 	mov	arg02, #1
0ed04     7C A5 B1 FD | 	call	#__system___float_tointeger
0ed08     0D 26 C6 F9 | 	decod	local01, #13
0ed0c     FD 26 02 F1 | 	add	local01, result1
0ed10     10 4E 05 F1 | 	add	fp, #16
0ed14     A7 26 62 FC | 	wrlong	local01, fp
0ed18                 | ' 
0ed18                 | ' t1=pop()
0ed18                 | ' pan=8192+round(8192*converttofloat(t1)) 
0ed18                 | ' if pan<0 then pan=0
0ed18     10 4E 85 F1 | 	sub	fp, #16
0ed1c     00 26 56 F2 | 	cmps	local01, #0 wc
0ed20     10 4E 05 C1 |  if_b	add	fp, #16
0ed24     A7 00 68 CC |  if_b	wrlong	#0, fp
0ed28     10 4E 85 C1 |  if_b	sub	fp, #16
0ed2c                 | ' if pan>16384 then pan=16384
0ed2c     10 4E 05 F1 | 	add	fp, #16
0ed30     A7 26 02 FB | 	rdlong	local01, fp
0ed34     10 4E 85 F1 | 	sub	fp, #16
0ed38     20 00 00 FF 
0ed3c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0ed40     10 4E 05 31 |  if_ae	add	fp, #16
0ed44     20 00 80 3F 
0ed48     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0ed4c     10 4E 85 31 |  if_ae	sub	fp, #16
0ed50     8C E5 BF FD | 	call	#_pop
0ed54     FF 26 02 F6 | 	mov	local01, result3
0ed58     A7 FA 61 FC | 	wrlong	result1, fp
0ed5c     04 4E 05 F1 | 	add	fp, #4
0ed60     A7 FC 61 FC | 	wrlong	result2, fp
0ed64     04 4E 05 F1 | 	add	fp, #4
0ed68     A7 26 62 FC | 	wrlong	local01, fp
0ed6c     08 4E 85 F1 | 	sub	fp, #8
0ed70     A7 12 02 F6 | 	mov	arg01, fp
0ed74     4C E7 BF FD | 	call	#_converttoint
0ed78     FD 26 52 F6 | 	abs	local01, result1 wc
0ed7c     07 26 06 F5 | 	and	local01, #7
0ed80     13 27 82 F6 | 	negc	local01, local01
0ed84     0C 4E 05 F1 | 	add	fp, #12
0ed88     A7 26 62 FC | 	wrlong	local01, fp
0ed8c     37 00 00 FF 
0ed90     10 E4 05 F1 | 	add	objptr, ##28176
0ed94     F2 12 02 FB | 	rdlong	arg01, objptr
0ed98     37 00 00 FF 
0ed9c     10 E4 85 F1 | 	sub	objptr, ##28176
0eda0     06 26 66 F0 | 	shl	local01, #6
0eda4     13 13 02 F1 | 	add	arg01, local01
0eda8     16 12 06 F1 | 	add	arg01, #22
0edac     04 4E 05 F1 | 	add	fp, #4
0edb0     A7 14 02 FB | 	rdlong	arg02, fp
0edb4     10 4E 85 F1 | 	sub	fp, #16
0edb8     09 15 52 FC | 	wrword	arg02, arg01
0edbc     A7 F0 03 F6 | 	mov	ptra, fp
0edc0     B2 00 A0 FD | 	call	#popregs_
0edc4                 | _do_changepan_ret
0edc4     2D 00 64 FD | 	ret
0edc8                 | 
0edc8                 | ' 
0edc8                 | ' '-------------------- changevol
0edc8                 | ' 
0edc8                 | ' sub do_changevol
0edc8                 | _do_changevol
0edc8     00 4A 05 F6 | 	mov	COUNT_, #0
0edcc     A8 00 A0 FD | 	call	#pushregs_
0edd0     14 F0 07 F1 | 	add	ptra, #20
0edd4     08 E5 BF FD | 	call	#_pop
0edd8     FF 14 02 F6 | 	mov	arg02, result3
0eddc     A7 FA 61 FC | 	wrlong	result1, fp
0ede0     04 4E 05 F1 | 	add	fp, #4
0ede4     A7 FC 61 FC | 	wrlong	result2, fp
0ede8     04 4E 05 F1 | 	add	fp, #4
0edec     A7 14 62 FC | 	wrlong	arg02, fp
0edf0     08 4E 85 F1 | 	sub	fp, #8
0edf4     A7 12 02 F6 | 	mov	arg01, fp
0edf8     84 E7 BF FD | 	call	#_converttofloat
0edfc     FD 12 02 F6 | 	mov	arg01, result1
0ee00     00 3D 22 FF 
0ee04     00 14 06 F6 | 	mov	arg02, ##1148846080
0ee08     B0 9F B1 FD | 	call	#__system___float_mul
0ee0c     FD 12 02 F6 | 	mov	arg01, result1
0ee10     01 14 06 F6 | 	mov	arg02, #1
0ee14     6C A4 B1 FD | 	call	#__system___float_tointeger
0ee18     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee1c     0D 14 46 F7 | 	zerox	arg02, #13
0ee20     0A 15 82 F6 | 	negc	arg02, arg02
0ee24     10 4E 05 F1 | 	add	fp, #16
0ee28     A7 14 62 FC | 	wrlong	arg02, fp
0ee2c     10 4E 85 F1 | 	sub	fp, #16
0ee30     AC E4 BF FD | 	call	#_pop
0ee34     FF 14 02 F6 | 	mov	arg02, result3
0ee38     A7 FA 61 FC | 	wrlong	result1, fp
0ee3c     04 4E 05 F1 | 	add	fp, #4
0ee40     A7 FC 61 FC | 	wrlong	result2, fp
0ee44     04 4E 05 F1 | 	add	fp, #4
0ee48     A7 14 62 FC | 	wrlong	arg02, fp
0ee4c     08 4E 85 F1 | 	sub	fp, #8
0ee50     A7 12 02 F6 | 	mov	arg01, fp
0ee54     6C E6 BF FD | 	call	#_converttoint
0ee58     FD 14 52 F6 | 	abs	arg02, result1 wc
0ee5c     07 14 06 F5 | 	and	arg02, #7
0ee60     0A 15 82 F6 | 	negc	arg02, arg02
0ee64     0C 4E 05 F1 | 	add	fp, #12
0ee68     A7 14 62 FC | 	wrlong	arg02, fp
0ee6c     37 00 00 FF 
0ee70     10 E4 05 F1 | 	add	objptr, ##28176
0ee74     F2 12 02 FB | 	rdlong	arg01, objptr
0ee78     37 00 00 FF 
0ee7c     10 E4 85 F1 | 	sub	objptr, ##28176
0ee80     06 14 66 F0 | 	shl	arg02, #6
0ee84     0A 13 02 F1 | 	add	arg01, arg02
0ee88     14 12 06 F1 | 	add	arg01, #20
0ee8c     04 4E 05 F1 | 	add	fp, #4
0ee90     A7 14 02 FB | 	rdlong	arg02, fp
0ee94     10 4E 85 F1 | 	sub	fp, #16
0ee98     09 15 52 FC | 	wrword	arg02, arg01
0ee9c     A7 F0 03 F6 | 	mov	ptra, fp
0eea0     B2 00 A0 FD | 	call	#popregs_
0eea4                 | _do_changevol_ret
0eea4     2D 00 64 FD | 	ret
0eea8                 | 
0eea8                 | ' 
0eea8                 | ' '-------------------- changewav
0eea8                 | ' 
0eea8                 | ' sub do_changewav
0eea8                 | _do_changewav
0eea8     00 4A 05 F6 | 	mov	COUNT_, #0
0eeac     A8 00 A0 FD | 	call	#pushregs_
0eeb0     14 F0 07 F1 | 	add	ptra, #20
0eeb4     28 E4 BF FD | 	call	#_pop
0eeb8     FF 14 02 F6 | 	mov	arg02, result3
0eebc     A7 FA 61 FC | 	wrlong	result1, fp
0eec0     04 4E 05 F1 | 	add	fp, #4
0eec4     A7 FC 61 FC | 	wrlong	result2, fp
0eec8     04 4E 05 F1 | 	add	fp, #4
0eecc     A7 14 62 FC | 	wrlong	arg02, fp
0eed0     08 4E 85 F1 | 	sub	fp, #8
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     E8 E5 BF FD | 	call	#_converttoint
0eedc     10 4E 05 F1 | 	add	fp, #16
0eee0     A7 FA 61 FC | 	wrlong	result1, fp
0eee4                 | ' 
0eee4                 | ' t1=pop()
0eee4                 | ' wave=converttoint(t1)
0eee4                 | ' if wave<0 then wave=0
0eee4     FD 14 02 F6 | 	mov	arg02, result1
0eee8     10 4E 85 F1 | 	sub	fp, #16
0eeec     00 14 56 F2 | 	cmps	arg02, #0 wc
0eef0     10 4E 05 C1 |  if_b	add	fp, #16
0eef4     A7 00 68 CC |  if_b	wrlong	#0, fp
0eef8     10 4E 85 C1 |  if_b	sub	fp, #16
0eefc     E0 E3 BF FD | 	call	#_pop
0ef00     FF 14 02 F6 | 	mov	arg02, result3
0ef04     A7 FA 61 FC | 	wrlong	result1, fp
0ef08     04 4E 05 F1 | 	add	fp, #4
0ef0c     A7 FC 61 FC | 	wrlong	result2, fp
0ef10     04 4E 05 F1 | 	add	fp, #4
0ef14     A7 14 62 FC | 	wrlong	arg02, fp
0ef18     08 4E 85 F1 | 	sub	fp, #8
0ef1c     A7 12 02 F6 | 	mov	arg01, fp
0ef20     A0 E5 BF FD | 	call	#_converttoint
0ef24     FD 14 52 F6 | 	abs	arg02, result1 wc
0ef28     07 14 06 F5 | 	and	arg02, #7
0ef2c     0A 15 82 F6 | 	negc	arg02, arg02
0ef30     0C 4E 05 F1 | 	add	fp, #12
0ef34     A7 14 62 FC | 	wrlong	arg02, fp
0ef38                 | ' if wave <32 then 
0ef38     04 4E 05 F1 | 	add	fp, #4
0ef3c     A7 14 02 FB | 	rdlong	arg02, fp
0ef40     10 4E 85 F1 | 	sub	fp, #16
0ef44     20 14 56 F2 | 	cmps	arg02, #32 wc
0ef48     48 00 90 3D |  if_ae	jmp	#LR__1240
0ef4c     37 00 00 FF 
0ef50     10 E4 05 F1 | 	add	objptr, ##28176
0ef54     F2 12 02 FB | 	rdlong	arg01, objptr
0ef58     37 00 00 FF 
0ef5c     10 E4 85 F1 | 	sub	objptr, ##28176
0ef60     0C 4E 05 F1 | 	add	fp, #12
0ef64     A7 14 02 FB | 	rdlong	arg02, fp
0ef68     06 14 66 F0 | 	shl	arg02, #6
0ef6c     0A 13 02 F1 | 	add	arg01, arg02
0ef70     08 12 06 F1 | 	add	arg01, #8
0ef74     04 4E 05 F1 | 	add	fp, #4
0ef78     A7 14 02 FB | 	rdlong	arg02, fp
0ef7c     10 4E 85 F1 | 	sub	fp, #16
0ef80     0B 14 66 F0 | 	shl	arg02, #11
0ef84     00 00 40 FF 
0ef88     00 14 06 F1 | 	add	arg02, ##-2147483648
0ef8c     09 15 62 FC | 	wrlong	arg02, arg01
0ef90     34 00 90 FD | 	jmp	#LR__1241
0ef94                 | LR__1240
0ef94     37 00 00 FF 
0ef98     10 E4 05 F1 | 	add	objptr, ##28176
0ef9c     F2 12 02 FB | 	rdlong	arg01, objptr
0efa0     37 00 00 FF 
0efa4     10 E4 85 F1 | 	sub	objptr, ##28176
0efa8     0C 4E 05 F1 | 	add	fp, #12
0efac     A7 14 02 FB | 	rdlong	arg02, fp
0efb0     0C 4E 85 F1 | 	sub	fp, #12
0efb4     06 14 66 F0 | 	shl	arg02, #6
0efb8     0A 13 02 F1 | 	add	arg01, arg02
0efbc     08 12 06 F1 | 	add	arg01, #8
0efc0     00 00 C4 FF 
0efc4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0efc8                 | LR__1241
0efc8     A7 F0 03 F6 | 	mov	ptra, fp
0efcc     B2 00 A0 FD | 	call	#popregs_
0efd0                 | _do_changewav_ret
0efd0     2D 00 64 FD | 	ret
0efd4                 | 
0efd4                 | ' 
0efd4                 | ' '-------------------- chr$
0efd4                 | ' 
0efd4                 | ' sub do_chr
0efd4                 | _do_chr
0efd4     01 4A 05 F6 | 	mov	COUNT_, #1
0efd8     A8 00 A0 FD | 	call	#pushregs_
0efdc     14 F0 07 F1 | 	add	ptra, #20
0efe0     4A 00 00 FF 
0efe4     80 E4 05 F1 | 	add	objptr, ##38016
0efe8     F2 26 02 FB | 	rdlong	local01, objptr
0efec     13 17 02 F6 | 	mov	arg03, local01
0eff0     01 16 66 F0 | 	shl	arg03, #1
0eff4     13 17 02 F1 | 	add	arg03, local01
0eff8     02 16 66 F0 | 	shl	arg03, #2
0effc     03 00 00 FF 
0f000     04 E4 85 F1 | 	sub	objptr, ##1540
0f004     F2 16 02 F1 | 	add	arg03, objptr
0f008     0B 17 02 FB | 	rdlong	arg03, arg03
0f00c     0C 4E 05 F1 | 	add	fp, #12
0f010     A7 16 62 FC | 	wrlong	arg03, fp
0f014                 | ' 
0f014                 | ' numpar=compiledline(lineptr_e).result.uresult
0f014                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f014     0C 4E 85 F1 | 	sub	fp, #12
0f018     02 16 16 F2 | 	cmp	arg03, #2 wc
0f01c     47 00 00 FF 
0f020     7C E4 85 F1 | 	sub	objptr, ##36476
0f024     0C 4E 05 C1 |  if_b	add	fp, #12
0f028     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f02c     0C 4E 85 C1 |  if_b	sub	fp, #12
0f030     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f034     00 12 06 F6 | 	mov	arg01, #0
0f038     A8 CB B1 FD | 	call	#__system___getiolock_0600
0f03c     FD 12 02 F6 | 	mov	arg01, result1
0f040     FC 6E B1 FD | 	call	#__system___lockmem
0f044     B1 01 00 FF 
0f048     80 14 06 F6 | 	mov	arg02, ##@LR__5835
0f04c     00 12 06 F6 | 	mov	arg01, #0
0f050     00 16 06 F6 | 	mov	arg03, #0
0f054     E0 7B B1 FD | 	call	#__system___basic_print_string
0f058     00 12 06 F6 | 	mov	arg01, #0
0f05c     84 CB B1 FD | 	call	#__system___getiolock_0600
0f060     FD 00 68 FC | 	wrlong	#0, result1
0f064     27 12 06 F6 | 	mov	arg01, #39
0f068     00 14 06 F6 | 	mov	arg02, #0
0f06c     E0 34 B1 FD | 	call	#_printerror
0f070     54 00 90 FD | 	jmp	#LR__1251
0f074                 | LR__1250
0f074     68 E2 BF FD | 	call	#_pop
0f078     FF 26 02 F6 | 	mov	local01, result3
0f07c     A7 FA 61 FC | 	wrlong	result1, fp
0f080     04 4E 05 F1 | 	add	fp, #4
0f084     A7 FC 61 FC | 	wrlong	result2, fp
0f088     04 4E 05 F1 | 	add	fp, #4
0f08c     A7 26 62 FC | 	wrlong	local01, fp
0f090     08 4E 85 F1 | 	sub	fp, #8
0f094     A7 12 02 F6 | 	mov	arg01, fp
0f098     28 E4 BF FD | 	call	#_converttoint
0f09c     10 4E 05 F1 | 	add	fp, #16
0f0a0     A7 FA 61 FC | 	wrlong	result1, fp
0f0a4     FD 12 02 F6 | 	mov	arg01, result1
0f0a8     10 4E 85 F1 | 	sub	fp, #16
0f0ac     D4 90 B1 FD | 	call	#__system__Chr_S
0f0b0     A7 FA 61 FC | 	wrlong	result1, fp
0f0b4     08 4E 05 F1 | 	add	fp, #8
0f0b8     A7 3E 68 FC | 	wrlong	#31, fp
0f0bc     08 4E 85 F1 | 	sub	fp, #8
0f0c0     A7 12 02 F6 | 	mov	arg01, fp
0f0c4     B0 E2 BF FD | 	call	#_push
0f0c8                 | LR__1251
0f0c8     A7 F0 03 F6 | 	mov	ptra, fp
0f0cc     B2 00 A0 FD | 	call	#popregs_
0f0d0                 | _do_chr_ret
0f0d0     2D 00 64 FD | 	ret
0f0d4                 | 
0f0d4                 | ' 
0f0d4                 | ' '-------------------- circle
0f0d4                 | ' 
0f0d4                 | ' sub do_circle
0f0d4                 | _do_circle
0f0d4     02 4A 05 F6 | 	mov	COUNT_, #2
0f0d8     A8 00 A0 FD | 	call	#pushregs_
0f0dc     24 F0 07 F1 | 	add	ptra, #36
0f0e0     FC E1 BF FD | 	call	#_pop
0f0e4     FD 18 02 F6 | 	mov	arg04, result1
0f0e8     FE 16 02 F6 | 	mov	arg03, result2
0f0ec     FF 14 02 F6 | 	mov	arg02, result3
0f0f0     18 4E 05 F1 | 	add	fp, #24
0f0f4     A7 18 62 FC | 	wrlong	arg04, fp
0f0f8     04 4E 05 F1 | 	add	fp, #4
0f0fc     A7 16 62 FC | 	wrlong	arg03, fp
0f100     04 4E 05 F1 | 	add	fp, #4
0f104     A7 14 62 FC | 	wrlong	arg02, fp
0f108     20 4E 85 F1 | 	sub	fp, #32
0f10c     D0 E1 BF FD | 	call	#_pop
0f110     FD 18 02 F6 | 	mov	arg04, result1
0f114     FE 16 02 F6 | 	mov	arg03, result2
0f118     FF 26 02 F6 | 	mov	local01, result3
0f11c     0C 4E 05 F1 | 	add	fp, #12
0f120     A7 18 62 FC | 	wrlong	arg04, fp
0f124     04 4E 05 F1 | 	add	fp, #4
0f128     A7 16 62 FC | 	wrlong	arg03, fp
0f12c     04 4E 05 F1 | 	add	fp, #4
0f130     A7 26 62 FC | 	wrlong	local01, fp
0f134     14 4E 85 F1 | 	sub	fp, #20
0f138     A4 E1 BF FD | 	call	#_pop
0f13c     A7 FA 61 FC | 	wrlong	result1, fp
0f140     04 4E 05 F1 | 	add	fp, #4
0f144     A7 FC 61 FC | 	wrlong	result2, fp
0f148     04 4E 05 F1 | 	add	fp, #4
0f14c     A7 FE 61 FC | 	wrlong	result3, fp
0f150                 | ' 
0f150                 | ' t3=pop()
0f150                 | ' t2=pop()
0f150                 | ' t1=pop()
0f150                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f150     FF 18 02 F6 | 	mov	arg04, result3
0f154     08 4E 85 F1 | 	sub	fp, #8
0f158     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f15c     08 4E 05 51 |  if_ne	add	fp, #8
0f160     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f164     08 4E 85 51 |  if_ne	sub	fp, #8
0f168     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f16c     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f170     14 4E 05 F1 | 	add	fp, #20
0f174     A7 26 02 FB | 	rdlong	local01, fp
0f178     14 4E 85 F1 | 	sub	fp, #20
0f17c     1C 26 0E F2 | 	cmp	local01, #28 wz
0f180     14 4E 05 51 |  if_ne	add	fp, #20
0f184     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f188     14 4E 85 51 |  if_ne	sub	fp, #20
0f18c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f190     58 00 90 5D |  if_ne	jmp	#LR__1260
0f194     20 4E 05 F1 | 	add	fp, #32
0f198     A7 26 02 FB | 	rdlong	local01, fp
0f19c     20 4E 85 F1 | 	sub	fp, #32
0f1a0     1C 26 0E F2 | 	cmp	local01, #28 wz
0f1a4     20 4E 05 51 |  if_ne	add	fp, #32
0f1a8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f1ac     20 4E 85 51 |  if_ne	sub	fp, #32
0f1b0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f1b4     34 00 90 5D |  if_ne	jmp	#LR__1260
0f1b8     A7 12 02 FB | 	rdlong	arg01, fp
0f1bc     0C 4E 05 F1 | 	add	fp, #12
0f1c0     A7 14 02 FB | 	rdlong	arg02, fp
0f1c4     0C 4E 05 F1 | 	add	fp, #12
0f1c8     A7 16 02 FB | 	rdlong	arg03, fp
0f1cc     18 4E 85 F1 | 	sub	fp, #24
0f1d0     37 00 00 FF 
0f1d4     28 E4 05 F1 | 	add	objptr, ##28200
0f1d8     F2 18 02 FB | 	rdlong	arg04, objptr
0f1dc     37 00 00 FF 
0f1e0     28 E4 85 F1 | 	sub	objptr, ##28200
0f1e4     40 4C B1 FD | 	call	#_hg010b_spin2_circle
0f1e8                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f1e8     54 00 90 FD | 	jmp	#LR__1261
0f1ec                 | LR__1260
0f1ec     A7 12 02 F6 | 	mov	arg01, fp
0f1f0     D0 E2 BF FD | 	call	#_converttoint
0f1f4     FD 26 02 F6 | 	mov	local01, result1
0f1f8     0C 4E 05 F1 | 	add	fp, #12
0f1fc     A7 12 02 F6 | 	mov	arg01, fp
0f200     0C 4E 85 F1 | 	sub	fp, #12
0f204     BC E2 BF FD | 	call	#_converttoint
0f208     FD 28 02 F6 | 	mov	local02, result1
0f20c     18 4E 05 F1 | 	add	fp, #24
0f210     A7 12 02 F6 | 	mov	arg01, fp
0f214     18 4E 85 F1 | 	sub	fp, #24
0f218     A8 E2 BF FD | 	call	#_converttoint
0f21c     FD 16 02 F6 | 	mov	arg03, result1
0f220     37 00 00 FF 
0f224     28 E4 05 F1 | 	add	objptr, ##28200
0f228     F2 18 02 FB | 	rdlong	arg04, objptr
0f22c     37 00 00 FF 
0f230     28 E4 85 F1 | 	sub	objptr, ##28200
0f234     13 13 02 F6 | 	mov	arg01, local01
0f238     14 15 02 F6 | 	mov	arg02, local02
0f23c     E8 4B B1 FD | 	call	#_hg010b_spin2_circle
0f240                 | LR__1261
0f240     A7 F0 03 F6 | 	mov	ptra, fp
0f244     B2 00 A0 FD | 	call	#popregs_
0f248                 | _do_circle_ret
0f248     2D 00 64 FD | 	ret
0f24c                 | 
0f24c                 | ' 
0f24c                 | ' '-------------------- click
0f24c                 | ' 
0f24c                 | ' sub do_click
0f24c                 | _do_click
0f24c     90 E0 BF FD | 	call	#_pop
0f250     00 FA 4D F2 | 	cmps	result1, #0 wz
0f254                 | ' 
0f254                 | ' t1=pop()
0f254                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f254     50 00 00 AF 
0f258     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f25c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f260     50 00 00 FF 
0f264     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f268     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f26c     50 00 00 5F 
0f270     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f274                 | _do_click_ret
0f274     2D 00 64 FD | 	ret
0f278                 | 
0f278                 | ' 
0f278                 | ' '-------------------- close
0f278                 | ' 
0f278                 | ' sub do_close
0f278                 | _do_close
0f278     03 4A 05 F6 | 	mov	COUNT_, #3
0f27c     A8 00 A0 FD | 	call	#pushregs_
0f280     5C E0 BF FD | 	call	#_pop
0f284     FD 26 02 F6 | 	mov	local01, result1
0f288     FF 16 02 F6 | 	mov	arg03, result3
0f28c     FE 28 02 F6 | 	mov	local02, result2
0f290     0B 2B 02 F6 | 	mov	local03, arg03
0f294                 | ' 
0f294                 | ' numpar=compiledline(lineptr_e).result.uresult
0f294                 | ' t1=pop()
0f294                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f294     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f298     44 00 90 AD |  if_e	jmp	#LR__1270
0f29c     00 12 06 F6 | 	mov	arg01, #0
0f2a0     40 C9 B1 FD | 	call	#__system___getiolock_0600
0f2a4     FD 12 02 F6 | 	mov	arg01, result1
0f2a8     94 6C B1 FD | 	call	#__system___lockmem
0f2ac     B1 01 00 FF 
0f2b0     87 14 06 F6 | 	mov	arg02, ##@LR__5836
0f2b4     00 12 06 F6 | 	mov	arg01, #0
0f2b8     00 16 06 F6 | 	mov	arg03, #0
0f2bc     78 79 B1 FD | 	call	#__system___basic_print_string
0f2c0     00 12 06 F6 | 	mov	arg01, #0
0f2c4     0A 14 06 F6 | 	mov	arg02, #10
0f2c8     00 16 06 F6 | 	mov	arg03, #0
0f2cc     10 79 B1 FD | 	call	#__system___basic_print_char
0f2d0     00 12 06 F6 | 	mov	arg01, #0
0f2d4     0C C9 B1 FD | 	call	#__system___getiolock_0600
0f2d8     FD 00 68 FC | 	wrlong	#0, result1
0f2dc     08 00 90 FD | 	jmp	#LR__1271
0f2e0                 | LR__1270
0f2e0                 | ' channel  = t1.result.iresult
0f2e0                 | ' close #channel
0f2e0     13 13 02 F6 | 	mov	arg01, local01
0f2e4     B4 BF B1 FD | 	call	#__system__close
0f2e8                 | LR__1271
0f2e8     A7 F0 03 F6 | 	mov	ptra, fp
0f2ec     B2 00 A0 FD | 	call	#popregs_
0f2f0                 | _do_close_ret
0f2f0     2D 00 64 FD | 	ret
0f2f4                 | 
0f2f4                 | ' 
0f2f4                 | ' '-------------------- cls
0f2f4                 | ' 
0f2f4                 | ' sub do_cls
0f2f4                 | _do_cls
0f2f4     37 00 00 FF 
0f2f8     3C E4 05 F1 | 	add	objptr, ##28220
0f2fc     F2 12 02 FB | 	rdlong	arg01, objptr
0f300     04 E4 85 F1 | 	sub	objptr, #4
0f304     F2 14 02 FB | 	rdlong	arg02, objptr
0f308     37 00 00 FF 
0f30c     38 E4 85 F1 | 	sub	objptr, ##28216
0f310     A8 4F B1 FD | 	call	#_hg010b_spin2_cls
0f314     37 00 00 FF 
0f318     3C E4 05 F1 | 	add	objptr, ##28220
0f31c     F2 14 02 FB | 	rdlong	arg02, objptr
0f320     14 E4 85 F1 | 	sub	objptr, #20
0f324     F2 14 62 FC | 	wrlong	arg02, objptr
0f328     37 00 00 FF 
0f32c     28 E4 85 F1 | 	sub	objptr, ##28200
0f330                 | _do_cls_ret
0f330     2D 00 64 FD | 	ret
0f334                 | 
0f334                 | ' 
0f334                 | ' '-------------------- color
0f334                 | ' 
0f334                 | ' sub do_color
0f334                 | _do_color
0f334     03 4A 05 F6 | 	mov	COUNT_, #3
0f338     A8 00 A0 FD | 	call	#pushregs_
0f33c     A0 DF BF FD | 	call	#_pop
0f340     FD 26 02 F6 | 	mov	local01, result1
0f344     FE 28 02 F6 | 	mov	local02, result2
0f348     FF 2A 02 F6 | 	mov	local03, result3
0f34c     37 00 00 FF 
0f350     28 E4 05 F1 | 	add	objptr, ##28200
0f354     F2 26 62 FC | 	wrlong	local01, objptr
0f358     37 00 00 FF 
0f35c     28 E4 85 F1 | 	sub	objptr, ##28200
0f360     A7 F0 03 F6 | 	mov	ptra, fp
0f364     B2 00 A0 FD | 	call	#popregs_
0f368                 | _do_color_ret
0f368     2D 00 64 FD | 	ret
0f36c                 | 
0f36c                 | ' 
0f36c                 | ' '-------------------- cos
0f36c                 | ' 
0f36c                 | ' sub do_cos
0f36c                 | _do_cos
0f36c     01 4A 05 F6 | 	mov	COUNT_, #1
0f370     A8 00 A0 FD | 	call	#pushregs_
0f374     10 F0 07 F1 | 	add	ptra, #16
0f378     4A 00 00 FF 
0f37c     80 E4 05 F1 | 	add	objptr, ##38016
0f380     F2 26 02 FB | 	rdlong	local01, objptr
0f384     13 17 02 F6 | 	mov	arg03, local01
0f388     01 16 66 F0 | 	shl	arg03, #1
0f38c     13 17 02 F1 | 	add	arg03, local01
0f390     02 16 66 F0 | 	shl	arg03, #2
0f394     03 00 00 FF 
0f398     04 E4 85 F1 | 	sub	objptr, ##1540
0f39c     F2 16 02 F1 | 	add	arg03, objptr
0f3a0     0B 17 02 FB | 	rdlong	arg03, arg03
0f3a4     0C 4E 05 F1 | 	add	fp, #12
0f3a8     A7 16 62 FC | 	wrlong	arg03, fp
0f3ac                 | ' 
0f3ac                 | ' numpar=compiledline(lineptr_e).result.uresult
0f3ac                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0f3ac     0C 4E 85 F1 | 	sub	fp, #12
0f3b0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f3b4     47 00 00 FF 
0f3b8     7C E4 85 F1 | 	sub	objptr, ##36476
0f3bc     0C 4E 05 C1 |  if_b	add	fp, #12
0f3c0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f3c4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f3c8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1280
0f3cc     00 12 06 F6 | 	mov	arg01, #0
0f3d0     10 C8 B1 FD | 	call	#__system___getiolock_0600
0f3d4     FD 12 02 F6 | 	mov	arg01, result1
0f3d8     64 6B B1 FD | 	call	#__system___lockmem
0f3dc     B1 01 00 FF 
0f3e0     99 14 06 F6 | 	mov	arg02, ##@LR__5837
0f3e4     00 12 06 F6 | 	mov	arg01, #0
0f3e8     00 16 06 F6 | 	mov	arg03, #0
0f3ec     48 78 B1 FD | 	call	#__system___basic_print_string
0f3f0     00 12 06 F6 | 	mov	arg01, #0
0f3f4     EC C7 B1 FD | 	call	#__system___getiolock_0600
0f3f8     FD 00 68 FC | 	wrlong	#0, result1
0f3fc     27 12 06 F6 | 	mov	arg01, #39
0f400     00 14 06 F6 | 	mov	arg02, #0
0f404     48 31 B1 FD | 	call	#_printerror
0f408     78 00 90 FD | 	jmp	#LR__1281
0f40c                 | LR__1280
0f40c     D0 DE BF FD | 	call	#_pop
0f410     A7 FA 61 FC | 	wrlong	result1, fp
0f414     04 4E 05 F1 | 	add	fp, #4
0f418     A7 FC 61 FC | 	wrlong	result2, fp
0f41c     04 4E 05 F1 | 	add	fp, #4
0f420     A7 FE 61 FC | 	wrlong	result3, fp
0f424     08 4E 85 F1 | 	sub	fp, #8
0f428     52 00 00 FF 
0f42c     A8 E4 05 F1 | 	add	objptr, ##42152
0f430     F2 26 02 FB | 	rdlong	local01, objptr
0f434     52 00 00 FF 
0f438     A8 E4 85 F1 | 	sub	objptr, ##42152
0f43c     A7 12 02 F6 | 	mov	arg01, fp
0f440     3C E1 BF FD | 	call	#_converttofloat
0f444     FD 14 02 F6 | 	mov	arg02, result1
0f448     13 13 02 F6 | 	mov	arg01, local01
0f44c     6C 99 B1 FD | 	call	#__system___float_mul
0f450     FD 14 02 F6 | 	mov	arg02, result1
0f454     87 E4 1F FF 
0f458     DB 13 06 F6 | 	mov	arg01, ##1070141403
0f45c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f460     88 95 B1 FD | 	call	#__system___float_add
0f464     FD 12 02 F6 | 	mov	arg01, result1
0f468     B0 A2 B1 FD | 	call	#__system____builtin_sinf
0f46c     A7 FA 61 FC | 	wrlong	result1, fp
0f470     08 4E 05 F1 | 	add	fp, #8
0f474     A7 3C 68 FC | 	wrlong	#30, fp
0f478     08 4E 85 F1 | 	sub	fp, #8
0f47c     A7 12 02 F6 | 	mov	arg01, fp
0f480     F4 DE BF FD | 	call	#_push
0f484                 | LR__1281
0f484     A7 F0 03 F6 | 	mov	ptra, fp
0f488     B2 00 A0 FD | 	call	#popregs_
0f48c                 | _do_cos_ret
0f48c     2D 00 64 FD | 	ret
0f490                 | 
0f490                 | ' 
0f490                 | ' '-------------------- cursor
0f490                 | ' 
0f490                 | ' sub do_cursor
0f490                 | _do_cursor
0f490     4C DE BF FD | 	call	#_pop
0f494     00 FA 4D F2 | 	cmps	result1, #0 wz
0f498                 | ' t1=pop()
0f498                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0f498     14 00 90 5D |  if_ne	jmp	#LR__1290
0f49c     11 12 06 F6 | 	mov	arg01, #17
0f4a0     00 14 06 F6 | 	mov	arg02, #0
0f4a4     00 16 06 F6 | 	mov	arg03, #0
0f4a8     F0 40 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f4ac     10 00 90 FD | 	jmp	#LR__1291
0f4b0                 | LR__1290
0f4b0     11 12 06 F6 | 	mov	arg01, #17
0f4b4     08 14 06 F6 | 	mov	arg02, #8
0f4b8     10 16 06 F6 | 	mov	arg03, #16
0f4bc     DC 40 B1 FD | 	call	#_hg010b_spin2_setspritesize
0f4c0                 | LR__1291
0f4c0                 | _do_cursor_ret
0f4c0     2D 00 64 FD | 	ret
0f4c4                 | 
0f4c4                 | ' 
0f4c4                 | ' '-------------------- defenv
0f4c4                 | ' 
0f4c4                 | ' sub do_defenv
0f4c4                 | _do_defenv
0f4c4     08 4A 05 F6 | 	mov	COUNT_, #8
0f4c8     A8 00 A0 FD | 	call	#pushregs_
0f4cc     58 F0 07 F1 | 	add	ptra, #88
0f4d0     4A 00 00 FF 
0f4d4     80 E4 05 F1 | 	add	objptr, ##38016
0f4d8     F2 26 02 FB | 	rdlong	local01, objptr
0f4dc     13 1B 02 F6 | 	mov	arg05, local01
0f4e0     01 1A 66 F0 | 	shl	arg05, #1
0f4e4     13 1B 02 F1 | 	add	arg05, local01
0f4e8     02 1A 66 F0 | 	shl	arg05, #2
0f4ec     03 00 00 FF 
0f4f0     04 E4 85 F1 | 	sub	objptr, ##1540
0f4f4     F2 1A 02 F1 | 	add	arg05, objptr
0f4f8     0D 1B 02 FB | 	rdlong	arg05, arg05
0f4fc     10 4E 05 F1 | 	add	fp, #16
0f500     A7 1A 62 FC | 	wrlong	arg05, fp
0f504                 | ' 
0f504                 | ' numpar=compiledline(lineptr_e).result.uresult
0f504                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0f504     10 4E 85 F1 | 	sub	fp, #16
0f508     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f50c     47 00 00 FF 
0f510     7C E4 85 F1 | 	sub	objptr, ##36476
0f514     10 4E 05 51 |  if_ne	add	fp, #16
0f518     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f51c     10 4E 85 51 |  if_ne	sub	fp, #16
0f520     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0f524     90 0A 90 5D |  if_ne	jmp	#LR__1321
0f528                 | ' 
0f528                 | ' if numpar=2 then						' env from .h2 or from a pointer
0f528     10 4E 05 F1 | 	add	fp, #16
0f52c     A7 26 02 FB | 	rdlong	local01, fp
0f530     10 4E 85 F1 | 	sub	fp, #16
0f534     02 26 0E F2 | 	cmp	local01, #2 wz
0f538     28 04 90 5D |  if_ne	jmp	#LR__1313
0f53c     A0 DD BF FD | 	call	#_pop
0f540     FF 1A 02 F6 | 	mov	arg05, result3
0f544     40 4E 05 F1 | 	add	fp, #64
0f548     A7 FA 61 FC | 	wrlong	result1, fp
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 FC 61 FC | 	wrlong	result2, fp
0f554     04 4E 05 F1 | 	add	fp, #4
0f558     A7 1A 62 FC | 	wrlong	arg05, fp
0f55c                 | '   t1=pop()
0f55c                 | '   if t1.result_type=result_string2 then 
0f55c     48 4E 85 F1 | 	sub	fp, #72
0f560     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f564     20 00 90 5D |  if_ne	jmp	#LR__1300
0f568     40 4E 05 F1 | 	add	fp, #64
0f56c     A7 12 02 FB | 	rdlong	arg01, fp
0f570     40 4E 85 F1 | 	sub	fp, #64
0f574     E0 DE BF FD | 	call	#_convertstring
0f578     4C 4E 05 F1 | 	add	fp, #76
0f57c     A7 FA 61 FC | 	wrlong	result1, fp
0f580     4C 4E 85 F1 | 	sub	fp, #76
0f584     58 00 90 FD | 	jmp	#LR__1303
0f588                 | LR__1300
0f588     48 4E 05 F1 | 	add	fp, #72
0f58c     A7 26 02 FB | 	rdlong	local01, fp
0f590     48 4E 85 F1 | 	sub	fp, #72
0f594     1F 26 0E F2 | 	cmp	local01, #31 wz
0f598     18 00 90 5D |  if_ne	jmp	#LR__1301
0f59c     40 4E 05 F1 | 	add	fp, #64
0f5a0     A7 26 02 FB | 	rdlong	local01, fp
0f5a4     0C 4E 05 F1 | 	add	fp, #12
0f5a8     A7 26 62 FC | 	wrlong	local01, fp
0f5ac     4C 4E 85 F1 | 	sub	fp, #76
0f5b0     2C 00 90 FD | 	jmp	#LR__1302
0f5b4                 | LR__1301
0f5b4     B1 01 00 FF 
0f5b8     9F 26 06 F6 | 	mov	local01, ##@LR__5838
0f5bc     4C 4E 05 F1 | 	add	fp, #76
0f5c0     A7 26 62 FC | 	wrlong	local01, fp
0f5c4     0C 4E 85 F1 | 	sub	fp, #12
0f5c8     A7 12 02 F6 | 	mov	arg01, fp
0f5cc     40 4E 85 F1 | 	sub	fp, #64
0f5d0     F0 DE BF FD | 	call	#_converttoint
0f5d4     1C 4E 05 F1 | 	add	fp, #28
0f5d8     A7 FA 61 FC | 	wrlong	result1, fp
0f5dc     1C 4E 85 F1 | 	sub	fp, #28
0f5e0                 | LR__1302
0f5e0                 | LR__1303
0f5e0                 | '   if s1<>"" then 
0f5e0     4C 4E 05 F1 | 	add	fp, #76
0f5e4     A7 12 02 FB | 	rdlong	arg01, fp
0f5e8     4C 4E 85 F1 | 	sub	fp, #76
0f5ec     B1 01 00 FF 
0f5f0     A0 14 06 F6 | 	mov	arg02, ##@LR__5839
0f5f4     70 69 B1 FD | 	call	#__system___string_cmp
0f5f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0f5fc     28 02 90 AD |  if_e	jmp	#LR__1307
0f600     DC DC BF FD | 	call	#_pop
0f604     FF 26 02 F6 | 	mov	local01, result3
0f608     40 4E 05 F1 | 	add	fp, #64
0f60c     A7 FA 61 FC | 	wrlong	result1, fp
0f610     04 4E 05 F1 | 	add	fp, #4
0f614     A7 FC 61 FC | 	wrlong	result2, fp
0f618     04 4E 05 F1 | 	add	fp, #4
0f61c     A7 26 62 FC | 	wrlong	local01, fp
0f620     08 4E 85 F1 | 	sub	fp, #8
0f624     A7 12 02 F6 | 	mov	arg01, fp
0f628     40 4E 85 F1 | 	sub	fp, #64
0f62c     94 DE BF FD | 	call	#_converttoint
0f630     18 4E 05 F1 | 	add	fp, #24
0f634     A7 FA 61 FC | 	wrlong	result1, fp
0f638     18 4E 85 F1 | 	sub	fp, #24
0f63c                 | '     t1=pop()
0f63c                 | '     channel=converttoint(t1) 
0f63c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0f63c     09 12 06 F6 | 	mov	arg01, #9
0f640     58 BC B1 FD | 	call	#__system__close
0f644     09 26 06 F6 | 	mov	local01, #9
0f648     B1 01 00 FF 
0f64c     A1 12 06 F6 | 	mov	arg01, ##@LR__5840
0f650     4C 4E 05 F1 | 	add	fp, #76
0f654     A7 14 02 FB | 	rdlong	arg02, fp
0f658     4C 4E 85 F1 | 	sub	fp, #76
0f65c     3C 69 B1 FD | 	call	#__system___string_concat
0f660     FD 14 02 F6 | 	mov	arg02, result1
0f664     13 13 02 F6 | 	mov	arg01, local01
0f668     00 16 06 F6 | 	mov	arg03, #0
0f66c     D4 74 B1 FD | 	call	#__system___basic_open_string
0f670     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f674     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f678     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f67c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f680     0C 4E 05 F1 | 	add	fp, #12
0f684     A7 FA 61 FC | 	wrlong	result1, fp
0f688                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f688     0C 4E 85 F1 | 	sub	fp, #12
0f68c     A0 00 90 AD |  if_e	jmp	#LR__1304
0f690     00 12 06 F6 | 	mov	arg01, #0
0f694     4C C5 B1 FD | 	call	#__system___getiolock_0600
0f698     FD 12 02 F6 | 	mov	arg01, result1
0f69c     A0 68 B1 FD | 	call	#__system___lockmem
0f6a0     B1 01 00 FF 
0f6a4     AE 14 06 F6 | 	mov	arg02, ##@LR__5841
0f6a8     00 12 06 F6 | 	mov	arg01, #0
0f6ac     00 16 06 F6 | 	mov	arg03, #0
0f6b0     84 75 B1 FD | 	call	#__system___basic_print_string
0f6b4     0C 4E 05 F1 | 	add	fp, #12
0f6b8     A7 14 02 FB | 	rdlong	arg02, fp
0f6bc     0C 4E 85 F1 | 	sub	fp, #12
0f6c0     00 12 06 F6 | 	mov	arg01, #0
0f6c4     00 16 06 F6 | 	mov	arg03, #0
0f6c8     0A 18 06 F6 | 	mov	arg04, #10
0f6cc     AC 75 B1 FD | 	call	#__system___basic_print_integer
0f6d0     B1 01 00 FF 
0f6d4     BC 14 06 F6 | 	mov	arg02, ##@LR__5842
0f6d8     00 12 06 F6 | 	mov	arg01, #0
0f6dc     00 16 06 F6 | 	mov	arg03, #0
0f6e0     54 75 B1 FD | 	call	#__system___basic_print_string
0f6e4     00 26 06 F6 | 	mov	local01, #0
0f6e8     0C 4E 05 F1 | 	add	fp, #12
0f6ec     A7 12 02 FB | 	rdlong	arg01, fp
0f6f0     0C 4E 85 F1 | 	sub	fp, #12
0f6f4     D8 91 B1 FD | 	call	#__system___strerror
0f6f8     FD 14 02 F6 | 	mov	arg02, result1
0f6fc     13 13 02 F6 | 	mov	arg01, local01
0f700     00 16 06 F6 | 	mov	arg03, #0
0f704     30 75 B1 FD | 	call	#__system___basic_print_string
0f708     00 12 06 F6 | 	mov	arg01, #0
0f70c     0A 14 06 F6 | 	mov	arg02, #10
0f710     00 16 06 F6 | 	mov	arg03, #0
0f714     C8 74 B1 FD | 	call	#__system___basic_print_char
0f718     00 12 06 F6 | 	mov	arg01, #0
0f71c     C4 C4 B1 FD | 	call	#__system___getiolock_0600
0f720     FD 00 68 FC | 	wrlong	#0, result1
0f724     09 12 06 F6 | 	mov	arg01, #9
0f728     70 BB B1 FD | 	call	#__system__close
0f72c     88 08 90 FD | 	jmp	#LR__1321
0f730                 | LR__1304
0f730                 | '     get #9,17,envbuf8(channel,0),256
0f730     18 4E 05 F1 | 	add	fp, #24
0f734     A7 1A 02 FB | 	rdlong	arg05, fp
0f738     18 4E 85 F1 | 	sub	fp, #24
0f73c     0D 17 02 F6 | 	mov	arg03, arg05
0f740     09 16 66 F0 | 	shl	arg03, #9
0f744     0D 17 02 F1 | 	add	arg03, arg05
0f748     0C 00 00 FF 
0f74c     D8 E4 05 F1 | 	add	objptr, ##6360
0f750     F2 16 02 F1 | 	add	arg03, objptr
0f754     09 12 06 F6 | 	mov	arg01, #9
0f758     11 14 06 F6 | 	mov	arg02, #17
0f75c     00 19 06 F6 | 	mov	arg04, #256
0f760     01 1A 06 F6 | 	mov	arg05, #1
0f764     0C 00 00 FF 
0f768     D8 E4 85 F1 | 	sub	objptr, ##6360
0f76c     44 76 B1 FD | 	call	#__system___basic_get
0f770                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0f770     14 4E 05 F1 | 	add	fp, #20
0f774     A7 FE 69 FC | 	wrlong	#255, fp
0f778     14 4E 85 F1 | 	sub	fp, #20
0f77c     0C 00 00 FF 
0f780     D8 E4 05 F1 | 	add	objptr, ##6360
0f784     97 30 48 FB | 	callpa	#(@LR__1306-@LR__1305)>>2,fcache_load_ptr_
0f788                 | LR__1305
0f788     18 4E 05 F1 | 	add	fp, #24
0f78c     A7 16 02 FB | 	rdlong	arg03, fp
0f790     0B 27 02 F6 | 	mov	local01, arg03
0f794     09 26 66 F0 | 	shl	local01, #9
0f798     F2 26 02 F1 | 	add	local01, objptr
0f79c     04 4E 85 F1 | 	sub	fp, #4
0f7a0     A7 1A 02 FB | 	rdlong	arg05, fp
0f7a4     0D 19 02 F6 | 	mov	arg04, arg05
0f7a8     01 18 66 F0 | 	shl	arg04, #1
0f7ac     13 19 02 F1 | 	add	arg04, local01
0f7b0     0B 27 02 F6 | 	mov	local01, arg03
0f7b4     09 26 66 F0 | 	shl	local01, #9
0f7b8     0B 27 02 F1 | 	add	local01, arg03
0f7bc     F2 26 02 F1 | 	add	local01, objptr
0f7c0     13 1B 02 F1 | 	add	arg05, local01
0f7c4     0D 27 C2 FA | 	rdbyte	local01, arg05
0f7c8     00 27 06 FA | 	mul	local01, #256
0f7cc     0C 27 52 FC | 	wrword	local01, arg04
0f7d0     A7 26 02 FB | 	rdlong	local01, fp
0f7d4     01 26 86 F1 | 	sub	local01, #1
0f7d8     A7 26 62 FC | 	wrlong	local01, fp
0f7dc     14 4E 85 F1 | 	sub	fp, #20
0f7e0     00 26 56 F2 | 	cmps	local01, #0 wc
0f7e4     A0 FF 9F 3D |  if_ae	jmp	#LR__1305
0f7e8                 | LR__1306
0f7e8     0C 00 00 FF 
0f7ec     D8 E4 85 F1 | 	sub	objptr, ##6360
0f7f0                 | '     close #9
0f7f0     09 12 06 F6 | 	mov	arg01, #9
0f7f4     A4 BA B1 FD | 	call	#__system__close
0f7f8     18 4E 05 F1 | 	add	fp, #24
0f7fc     A7 26 02 FB | 	rdlong	local01, fp
0f800     18 4E 85 F1 | 	sub	fp, #24
0f804     09 26 66 F0 | 	shl	local01, #9
0f808     0C 00 00 FF 
0f80c     D8 E4 05 F1 | 	add	objptr, ##6360
0f810     F2 26 02 F1 | 	add	local01, objptr
0f814     FE 27 06 F1 | 	add	local01, #510
0f818     13 01 58 FC | 	wrword	#0, local01
0f81c                 | '     envbuf(channel,255)=0                                                              
0f81c                 | '     return
0f81c     0C 00 00 FF 
0f820     D8 E4 85 F1 | 	sub	objptr, ##6360
0f824     90 07 90 FD | 	jmp	#LR__1321
0f828                 | LR__1307
0f828                 | '     if wptr < $80000 then 
0f828     1C 4E 05 F1 | 	add	fp, #28
0f82c     A7 28 02 FB | 	rdlong	local02, fp
0f830     1C 4E 85 F1 | 	sub	fp, #28
0f834     00 04 00 FF 
0f838     00 28 56 F2 | 	cmps	local02, ##524288 wc
0f83c     7C 00 90 3D |  if_ae	jmp	#LR__1310
0f840                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0f840     14 4E 05 F1 | 	add	fp, #20
0f844     A7 00 68 FC | 	wrlong	#0, fp
0f848     14 4E 85 F1 | 	sub	fp, #20
0f84c     0C 00 00 FF 
0f850     D8 E4 05 F1 | 	add	objptr, ##6360
0f854     97 2C 48 FB | 	callpa	#(@LR__1309-@LR__1308)>>2,fcache_load_ptr_
0f858                 | LR__1308
0f858     18 4E 05 F1 | 	add	fp, #24
0f85c     A7 28 02 FB | 	rdlong	local02, fp
0f860     09 28 66 F0 | 	shl	local02, #9
0f864     F2 28 02 F1 | 	add	local02, objptr
0f868     04 4E 85 F1 | 	sub	fp, #4
0f86c     A7 26 02 FB | 	rdlong	local01, fp
0f870     13 1B 02 F6 | 	mov	arg05, local01
0f874     01 1A 66 F0 | 	shl	arg05, #1
0f878     14 1B 02 F1 | 	add	arg05, local02
0f87c     08 4E 05 F1 | 	add	fp, #8
0f880     A7 12 02 FB | 	rdlong	arg01, fp
0f884     01 26 66 F0 | 	shl	local01, #1
0f888     13 13 02 F1 | 	add	arg01, local01
0f88c     09 FB E1 FA | 	rdword	result1, arg01
0f890     0D FB 51 FC | 	wrword	result1, arg05
0f894     08 4E 85 F1 | 	sub	fp, #8
0f898     A7 28 02 FB | 	rdlong	local02, fp
0f89c     01 28 06 F1 | 	add	local02, #1
0f8a0     A7 28 62 FC | 	wrlong	local02, fp
0f8a4     14 4E 85 F1 | 	sub	fp, #20
0f8a8     00 29 56 F2 | 	cmps	local02, #256 wc
0f8ac     A8 FF 9F CD |  if_b	jmp	#LR__1308
0f8b0                 | LR__1309
0f8b0     0C 00 00 FF 
0f8b4     D8 E4 85 F1 | 	sub	objptr, ##6360
0f8b8     78 00 90 FD | 	jmp	#LR__1312
0f8bc                 | LR__1310
0f8bc                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0f8bc     14 4E 05 F1 | 	add	fp, #20
0f8c0     A7 00 68 FC | 	wrlong	#0, fp
0f8c4     14 4E 85 F1 | 	sub	fp, #20
0f8c8                 | LR__1311
0f8c8     18 4E 05 F1 | 	add	fp, #24
0f8cc     A7 28 02 FB | 	rdlong	local02, fp
0f8d0     09 28 66 F0 | 	shl	local02, #9
0f8d4     0C 00 00 FF 
0f8d8     D8 E4 05 F1 | 	add	objptr, ##6360
0f8dc     F2 28 02 F1 | 	add	local02, objptr
0f8e0     04 4E 85 F1 | 	sub	fp, #4
0f8e4     A7 26 02 FB | 	rdlong	local01, fp
0f8e8     13 2B 02 F6 | 	mov	local03, local01
0f8ec     01 2A 66 F0 | 	shl	local03, #1
0f8f0     14 2B 02 F1 | 	add	local03, local02
0f8f4     08 4E 05 F1 | 	add	fp, #8
0f8f8     A7 12 02 FB | 	rdlong	arg01, fp
0f8fc     1C 4E 85 F1 | 	sub	fp, #28
0f900     01 26 66 F0 | 	shl	local01, #1
0f904     13 13 02 F1 | 	add	arg01, local01
0f908     0C 00 00 FF 
0f90c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f910     64 2F B1 FD | 	call	#_psdpeek
0f914     15 FB 51 FC | 	wrword	result1, local03
0f918     14 4E 05 F1 | 	add	fp, #20
0f91c     A7 2A 02 FB | 	rdlong	local03, fp
0f920     01 2A 06 F1 | 	add	local03, #1
0f924     A7 2A 62 FC | 	wrlong	local03, fp
0f928     14 4E 85 F1 | 	sub	fp, #20
0f92c     00 2B 56 F2 | 	cmps	local03, #256 wc
0f930     94 FF 9F CD |  if_b	jmp	#LR__1311
0f934                 | LR__1312
0f934     18 4E 05 F1 | 	add	fp, #24
0f938     A7 2A 02 FB | 	rdlong	local03, fp
0f93c     18 4E 85 F1 | 	sub	fp, #24
0f940     09 2A 66 F0 | 	shl	local03, #9
0f944     0C 00 00 FF 
0f948     D8 E4 05 F1 | 	add	objptr, ##6360
0f94c     F2 2A 02 F1 | 	add	local03, objptr
0f950     FE 2B 06 F1 | 	add	local03, #510
0f954     15 01 58 FC | 	wrword	#0, local03
0f958                 | '     envbuf(channel,255)=0
0f958                 | '     return   
0f958     0C 00 00 FF 
0f95c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f960     54 06 90 FD | 	jmp	#LR__1321
0f964                 | LR__1313
0f964                 | ' 
0f964                 | ' if numpar=5 then   						 'simple adsr
0f964     10 4E 05 F1 | 	add	fp, #16
0f968     A7 28 02 FB | 	rdlong	local02, fp
0f96c     10 4E 85 F1 | 	sub	fp, #16
0f970     05 28 0E F2 | 	cmp	local02, #5 wz
0f974     14 06 90 5D |  if_ne	jmp	#LR__1320
0f978     64 D9 BF FD | 	call	#_pop
0f97c     FF 26 02 F6 | 	mov	local01, result3
0f980     40 4E 05 F1 | 	add	fp, #64
0f984     A7 FA 61 FC | 	wrlong	result1, fp
0f988     04 4E 05 F1 | 	add	fp, #4
0f98c     A7 FC 61 FC | 	wrlong	result2, fp
0f990     04 4E 05 F1 | 	add	fp, #4
0f994     A7 26 62 FC | 	wrlong	local01, fp
0f998     08 4E 85 F1 | 	sub	fp, #8
0f99c     A7 12 02 F6 | 	mov	arg01, fp
0f9a0     40 4E 85 F1 | 	sub	fp, #64
0f9a4     D8 DB BF FD | 	call	#_converttofloat
0f9a8     FD 28 02 F6 | 	mov	local02, result1
0f9ac     2C 4E 05 F1 | 	add	fp, #44
0f9b0     A7 28 62 FC | 	wrlong	local02, fp
0f9b4     2C 4E 85 F1 | 	sub	fp, #44
0f9b8     24 D9 BF FD | 	call	#_pop
0f9bc     FF 26 02 F6 | 	mov	local01, result3
0f9c0     40 4E 05 F1 | 	add	fp, #64
0f9c4     A7 FA 61 FC | 	wrlong	result1, fp
0f9c8     04 4E 05 F1 | 	add	fp, #4
0f9cc     A7 FC 61 FC | 	wrlong	result2, fp
0f9d0     04 4E 05 F1 | 	add	fp, #4
0f9d4     A7 26 62 FC | 	wrlong	local01, fp
0f9d8     08 4E 85 F1 | 	sub	fp, #8
0f9dc     A7 12 02 F6 | 	mov	arg01, fp
0f9e0     40 4E 85 F1 | 	sub	fp, #64
0f9e4     98 DB BF FD | 	call	#_converttofloat
0f9e8     FD 28 02 F6 | 	mov	local02, result1
0f9ec     28 4E 05 F1 | 	add	fp, #40
0f9f0     A7 28 62 FC | 	wrlong	local02, fp
0f9f4     28 4E 85 F1 | 	sub	fp, #40
0f9f8     E4 D8 BF FD | 	call	#_pop
0f9fc     FF 26 02 F6 | 	mov	local01, result3
0fa00     40 4E 05 F1 | 	add	fp, #64
0fa04     A7 FA 61 FC | 	wrlong	result1, fp
0fa08     04 4E 05 F1 | 	add	fp, #4
0fa0c     A7 FC 61 FC | 	wrlong	result2, fp
0fa10     04 4E 05 F1 | 	add	fp, #4
0fa14     A7 26 62 FC | 	wrlong	local01, fp
0fa18     08 4E 85 F1 | 	sub	fp, #8
0fa1c     A7 12 02 F6 | 	mov	arg01, fp
0fa20     40 4E 85 F1 | 	sub	fp, #64
0fa24     58 DB BF FD | 	call	#_converttofloat
0fa28     FD 28 02 F6 | 	mov	local02, result1
0fa2c     24 4E 05 F1 | 	add	fp, #36
0fa30     A7 28 62 FC | 	wrlong	local02, fp
0fa34     24 4E 85 F1 | 	sub	fp, #36
0fa38     A4 D8 BF FD | 	call	#_pop
0fa3c     FF 26 02 F6 | 	mov	local01, result3
0fa40     40 4E 05 F1 | 	add	fp, #64
0fa44     A7 FA 61 FC | 	wrlong	result1, fp
0fa48     04 4E 05 F1 | 	add	fp, #4
0fa4c     A7 FC 61 FC | 	wrlong	result2, fp
0fa50     04 4E 05 F1 | 	add	fp, #4
0fa54     A7 26 62 FC | 	wrlong	local01, fp
0fa58     08 4E 85 F1 | 	sub	fp, #8
0fa5c     A7 12 02 F6 | 	mov	arg01, fp
0fa60     40 4E 85 F1 | 	sub	fp, #64
0fa64     18 DB BF FD | 	call	#_converttofloat
0fa68     FD 28 02 F6 | 	mov	local02, result1
0fa6c     20 4E 05 F1 | 	add	fp, #32
0fa70     A7 28 62 FC | 	wrlong	local02, fp
0fa74     20 4E 85 F1 | 	sub	fp, #32
0fa78     64 D8 BF FD | 	call	#_pop
0fa7c     FF 26 02 F6 | 	mov	local01, result3
0fa80     40 4E 05 F1 | 	add	fp, #64
0fa84     A7 FA 61 FC | 	wrlong	result1, fp
0fa88     04 4E 05 F1 | 	add	fp, #4
0fa8c     A7 FC 61 FC | 	wrlong	result2, fp
0fa90     04 4E 05 F1 | 	add	fp, #4
0fa94     A7 26 62 FC | 	wrlong	local01, fp
0fa98     08 4E 85 F1 | 	sub	fp, #8
0fa9c     A7 12 02 F6 | 	mov	arg01, fp
0faa0     40 4E 85 F1 | 	sub	fp, #64
0faa4     1C DA BF FD | 	call	#_converttoint
0faa8     18 4E 05 F1 | 	add	fp, #24
0faac     A7 FA 61 FC | 	wrlong	result1, fp
0fab0                 | '   t1=pop() : rr=converttofloat(t1)
0fab0                 | '   t1=pop() : ss=converttofloat(t1) 
0fab0                 | '   t1=pop() : dd=converttofloat(t1)
0fab0                 | '   t1=pop() : aa=converttofloat(t1)
0fab0                 | '   t1=pop() : channel=converttoint(t1)
0fab0                 | '   if ss<0.0 then ss=0.0 
0fab0     10 4E 05 F1 | 	add	fp, #16
0fab4     A7 12 02 FB | 	rdlong	arg01, fp
0fab8     28 4E 85 F1 | 	sub	fp, #40
0fabc     00 14 06 F6 | 	mov	arg02, #0
0fac0     01 16 06 F6 | 	mov	arg03, #1
0fac4     28 97 B1 FD | 	call	#__system___float_cmp
0fac8     00 FA 55 F2 | 	cmps	result1, #0 wc
0facc     28 4E 05 C1 |  if_b	add	fp, #40
0fad0     A7 00 68 CC |  if_b	wrlong	#0, fp
0fad4     28 4E 85 C1 |  if_b	sub	fp, #40
0fad8                 | '   if ss>1.0 then ss=1.0
0fad8     28 4E 05 F1 | 	add	fp, #40
0fadc     A7 12 02 FB | 	rdlong	arg01, fp
0fae0     28 4E 85 F1 | 	sub	fp, #40
0fae4     00 C0 1F FF 
0fae8     00 14 06 F6 | 	mov	arg02, ##1065353216
0faec     01 16 66 F6 | 	neg	arg03, #1
0faf0     FC 96 B1 FD | 	call	#__system___float_cmp
0faf4     01 FA 55 F2 | 	cmps	result1, #1 wc
0faf8     28 4E 05 31 |  if_ae	add	fp, #40
0fafc     00 C0 9F 3F 
0fb00     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0fb04     28 4E 85 31 |  if_ae	sub	fp, #40
0fb08     20 4E 05 F1 | 	add	fp, #32
0fb0c     A7 12 02 FB | 	rdlong	arg01, fp
0fb10     04 4E 05 F1 | 	add	fp, #4
0fb14     A7 14 02 FB | 	rdlong	arg02, fp
0fb18     24 4E 85 F1 | 	sub	fp, #36
0fb1c     CC 8E B1 FD | 	call	#__system___float_add
0fb20     FD 12 02 F6 | 	mov	arg01, result1
0fb24     2C 4E 05 F1 | 	add	fp, #44
0fb28     A7 14 02 FB | 	rdlong	arg02, fp
0fb2c     2C 4E 85 F1 | 	sub	fp, #44
0fb30     B8 8E B1 FD | 	call	#__system___float_add
0fb34     30 4E 05 F1 | 	add	fp, #48
0fb38     A7 FA 61 FC | 	wrlong	result1, fp
0fb3c     FD 14 02 F6 | 	mov	arg02, result1
0fb40     30 4E 85 F1 | 	sub	fp, #48
0fb44     00 C0 21 FF 
0fb48     00 12 06 F6 | 	mov	arg01, ##1132462080
0fb4c     70 94 B1 FD | 	call	#__system___float_div
0fb50     34 4E 05 F1 | 	add	fp, #52
0fb54     A7 FA 61 FC | 	wrlong	result1, fp
0fb58     14 4E 85 F1 | 	sub	fp, #20
0fb5c     A7 12 02 FB | 	rdlong	arg01, fp
0fb60     FD 14 02 F6 | 	mov	arg02, result1
0fb64     20 4E 85 F1 | 	sub	fp, #32
0fb68     50 92 B1 FD | 	call	#__system___float_mul
0fb6c     FD 12 02 F6 | 	mov	arg01, result1
0fb70     01 14 06 F6 | 	mov	arg02, #1
0fb74     0C 97 B1 FD | 	call	#__system___float_tointeger
0fb78     A7 FA 61 FC | 	wrlong	result1, fp
0fb7c     24 4E 05 F1 | 	add	fp, #36
0fb80     A7 12 02 FB | 	rdlong	arg01, fp
0fb84     10 4E 05 F1 | 	add	fp, #16
0fb88     A7 14 02 FB | 	rdlong	arg02, fp
0fb8c     34 4E 85 F1 | 	sub	fp, #52
0fb90     28 92 B1 FD | 	call	#__system___float_mul
0fb94     FD 12 02 F6 | 	mov	arg01, result1
0fb98     01 14 06 F6 | 	mov	arg02, #1
0fb9c     E4 96 B1 FD | 	call	#__system___float_tointeger
0fba0     04 4E 05 F1 | 	add	fp, #4
0fba4     A7 FA 61 FC | 	wrlong	result1, fp
0fba8     28 4E 05 F1 | 	add	fp, #40
0fbac     A7 12 02 FB | 	rdlong	arg01, fp
0fbb0     08 4E 05 F1 | 	add	fp, #8
0fbb4     A7 14 02 FB | 	rdlong	arg02, fp
0fbb8     34 4E 85 F1 | 	sub	fp, #52
0fbbc     FC 91 B1 FD | 	call	#__system___float_mul
0fbc0     FD 12 02 F6 | 	mov	arg01, result1
0fbc4     01 14 06 F6 | 	mov	arg02, #1
0fbc8     B8 96 B1 FD | 	call	#__system___float_tointeger
0fbcc     0C 4E 05 F1 | 	add	fp, #12
0fbd0     A7 FA 61 FC | 	wrlong	result1, fp
0fbd4     0C 4E 85 F1 | 	sub	fp, #12
0fbd8     F8 BF 23 FF 
0fbdc     00 28 06 F6 | 	mov	local02, ##1199566848
0fbe0     A7 12 02 FB | 	rdlong	arg01, fp
0fbe4     09 13 52 F6 | 	abs	arg01, arg01 wc
0fbe8     1F 2C C6 C9 |  if_b	decod	local04, #31
0fbec     00 2C 06 36 |  if_ae	mov	local04, #0
0fbf0     C4 8D B1 FD | 	call	#__system___float_fromuns
0fbf4     16 FB 61 F5 | 	xor	result1, local04
0fbf8     FD 14 02 F6 | 	mov	arg02, result1
0fbfc     14 13 02 F6 | 	mov	arg01, local02
0fc00     BC 93 B1 FD | 	call	#__system___float_div
0fc04     38 4E 05 F1 | 	add	fp, #56
0fc08     A7 FA 61 FC | 	wrlong	result1, fp
0fc0c     F8 BF 23 FF 
0fc10     00 28 06 F6 | 	mov	local02, ##1199566848
0fc14     10 4E 85 F1 | 	sub	fp, #16
0fc18     A7 14 02 FB | 	rdlong	arg02, fp
0fc1c     28 4E 85 F1 | 	sub	fp, #40
0fc20     F8 BF 23 FF 
0fc24     00 12 06 F6 | 	mov	arg01, ##1199566848
0fc28     90 91 B1 FD | 	call	#__system___float_mul
0fc2c     FD 14 02 F6 | 	mov	arg02, result1
0fc30     14 13 02 F6 | 	mov	arg01, local02
0fc34     1F 14 E6 F4 | 	bitnot	arg02, #31
0fc38     B0 8D B1 FD | 	call	#__system___float_add
0fc3c     FD 28 02 F6 | 	mov	local02, result1
0fc40     04 4E 05 F1 | 	add	fp, #4
0fc44     A7 12 02 FB | 	rdlong	arg01, fp
0fc48     04 4E 85 F1 | 	sub	fp, #4
0fc4c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc50     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc54     00 2C 06 36 |  if_ae	mov	local04, #0
0fc58     5C 8D B1 FD | 	call	#__system___float_fromuns
0fc5c     16 FB 61 F5 | 	xor	result1, local04
0fc60     FD 14 02 F6 | 	mov	arg02, result1
0fc64     14 13 02 F6 | 	mov	arg01, local02
0fc68     54 93 B1 FD | 	call	#__system___float_div
0fc6c     24 4E 05 F1 | 	add	fp, #36
0fc70     A7 FA 61 FC | 	wrlong	result1, fp
0fc74     04 4E 05 F1 | 	add	fp, #4
0fc78     A7 14 02 FB | 	rdlong	arg02, fp
0fc7c     28 4E 85 F1 | 	sub	fp, #40
0fc80     F8 BF 23 FF 
0fc84     00 12 06 F6 | 	mov	arg01, ##1199566848
0fc88     30 91 B1 FD | 	call	#__system___float_mul
0fc8c     FD 28 02 F6 | 	mov	local02, result1
0fc90     0C 4E 05 F1 | 	add	fp, #12
0fc94     A7 12 02 FB | 	rdlong	arg01, fp
0fc98     0C 4E 85 F1 | 	sub	fp, #12
0fc9c     09 13 52 F6 | 	abs	arg01, arg01 wc
0fca0     1F 2C C6 C9 |  if_b	decod	local04, #31
0fca4     00 2C 06 36 |  if_ae	mov	local04, #0
0fca8     0C 8D B1 FD | 	call	#__system___float_fromuns
0fcac     16 FB 61 F5 | 	xor	result1, local04
0fcb0     FD 14 02 F6 | 	mov	arg02, result1
0fcb4     14 13 02 F6 | 	mov	arg01, local02
0fcb8     04 93 B1 FD | 	call	#__system___float_div
0fcbc     3C 4E 05 F1 | 	add	fp, #60
0fcc0     A7 FA 61 FC | 	wrlong	result1, fp
0fcc4     24 4E 85 F1 | 	sub	fp, #36
0fcc8     A7 2E 02 FB | 	rdlong	local05, fp
0fccc     18 4E 85 F1 | 	sub	fp, #24
0fcd0     01 2E 66 F0 | 	shl	local05, #1
0fcd4     52 00 00 FF 
0fcd8     B4 E4 05 F1 | 	add	objptr, ##42164
0fcdc     F2 2E 02 F1 | 	add	local05, objptr
0fce0     A7 30 02 FB | 	rdlong	local06, fp
0fce4     04 4E 05 F1 | 	add	fp, #4
0fce8     A7 2A 02 FB | 	rdlong	local03, fp
0fcec     15 31 02 F1 | 	add	local06, local03
0fcf0     17 31 52 FC | 	wrword	local06, local05
0fcf4     1C 4E 05 F1 | 	add	fp, #28
0fcf8     A7 00 68 FC | 	wrlong	#0, fp
0fcfc                 | '   fulltime=aa+dd+rr
0fcfc                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0fcfc                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0fcfc                 | '   suspoints(channel)=a+d
0fcfc                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0fcfc     0C 4E 85 F1 | 	sub	fp, #12
0fd00     A7 00 68 FC | 	wrlong	#0, fp
0fd04     14 4E 85 F1 | 	sub	fp, #20
0fd08     A7 32 02 FB | 	rdlong	local07, fp
0fd0c     52 00 00 FF 
0fd10     B4 E4 85 F1 | 	sub	objptr, ##42164
0fd14                 | LR__1314
0fd14     14 4E 05 F1 | 	add	fp, #20
0fd18     A7 28 02 FB | 	rdlong	local02, fp
0fd1c     14 4E 85 F1 | 	sub	fp, #20
0fd20     19 29 52 F2 | 	cmps	local02, local07 wc
0fd24     80 00 90 3D |  if_ae	jmp	#LR__1315
0fd28     18 4E 05 F1 | 	add	fp, #24
0fd2c     A7 30 02 FB | 	rdlong	local06, fp
0fd30     09 30 66 F0 | 	shl	local06, #9
0fd34     0C 00 00 FF 
0fd38     D8 E4 05 F1 | 	add	objptr, ##6360
0fd3c     F2 30 02 F1 | 	add	local06, objptr
0fd40     04 4E 85 F1 | 	sub	fp, #4
0fd44     A7 2E 02 FB | 	rdlong	local05, fp
0fd48     01 2E 66 F0 | 	shl	local05, #1
0fd4c     18 2F 02 F1 | 	add	local05, local06
0fd50     0C 4E 05 F1 | 	add	fp, #12
0fd54     A7 12 02 FB | 	rdlong	arg01, fp
0fd58     20 4E 85 F1 | 	sub	fp, #32
0fd5c     0C 00 00 FF 
0fd60     D8 E4 85 F1 | 	sub	objptr, ##6360
0fd64     01 14 06 F6 | 	mov	arg02, #1
0fd68     18 95 B1 FD | 	call	#__system___float_tointeger
0fd6c     17 FB 51 FC | 	wrword	result1, local05
0fd70     20 4E 05 F1 | 	add	fp, #32
0fd74     A7 12 02 FB | 	rdlong	arg01, fp
0fd78     18 4E 05 F1 | 	add	fp, #24
0fd7c     A7 14 02 FB | 	rdlong	arg02, fp
0fd80     38 4E 85 F1 | 	sub	fp, #56
0fd84     64 8C B1 FD | 	call	#__system___float_add
0fd88     20 4E 05 F1 | 	add	fp, #32
0fd8c     A7 FA 61 FC | 	wrlong	result1, fp
0fd90     0C 4E 85 F1 | 	sub	fp, #12
0fd94     A7 30 02 FB | 	rdlong	local06, fp
0fd98     01 30 06 F1 | 	add	local06, #1
0fd9c     A7 30 62 FC | 	wrlong	local06, fp
0fda0     14 4E 85 F1 | 	sub	fp, #20
0fda4     6C FF 9F FD | 	jmp	#LR__1314
0fda8                 | LR__1315
0fda8                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0fda8     A7 28 02 FB | 	rdlong	local02, fp
0fdac     14 4E 05 F1 | 	add	fp, #20
0fdb0     A7 28 62 FC | 	wrlong	local02, fp
0fdb4     14 4E 85 F1 | 	sub	fp, #20
0fdb8     A7 34 02 FB | 	rdlong	local08, fp
0fdbc     04 4E 05 F1 | 	add	fp, #4
0fdc0     A7 28 02 FB | 	rdlong	local02, fp
0fdc4     04 4E 85 F1 | 	sub	fp, #4
0fdc8     14 35 02 F1 | 	add	local08, local02
0fdcc                 | LR__1316
0fdcc     14 4E 05 F1 | 	add	fp, #20
0fdd0     A7 28 02 FB | 	rdlong	local02, fp
0fdd4     14 4E 85 F1 | 	sub	fp, #20
0fdd8     1A 29 52 F2 | 	cmps	local02, local08 wc
0fddc     A8 00 90 3D |  if_ae	jmp	#LR__1317
0fde0     18 4E 05 F1 | 	add	fp, #24
0fde4     A7 32 02 FB | 	rdlong	local07, fp
0fde8     09 32 66 F0 | 	shl	local07, #9
0fdec     0C 00 00 FF 
0fdf0     D8 E4 05 F1 | 	add	objptr, ##6360
0fdf4     F2 32 02 F1 | 	add	local07, objptr
0fdf8     04 4E 85 F1 | 	sub	fp, #4
0fdfc     A7 30 02 FB | 	rdlong	local06, fp
0fe00     01 30 66 F0 | 	shl	local06, #1
0fe04     19 31 02 F1 | 	add	local06, local07
0fe08     0C 4E 05 F1 | 	add	fp, #12
0fe0c     A7 12 02 FB | 	rdlong	arg01, fp
0fe10     20 4E 85 F1 | 	sub	fp, #32
0fe14     0C 00 00 FF 
0fe18     D8 E4 85 F1 | 	sub	objptr, ##6360
0fe1c     01 14 06 F6 | 	mov	arg02, #1
0fe20     60 94 B1 FD | 	call	#__system___float_tointeger
0fe24     18 FB 51 FC | 	wrword	result1, local06
0fe28     20 4E 05 F1 | 	add	fp, #32
0fe2c     A7 12 02 FB | 	rdlong	arg01, fp
0fe30     04 4E 05 F1 | 	add	fp, #4
0fe34     A7 14 02 FB | 	rdlong	arg02, fp
0fe38     24 4E 85 F1 | 	sub	fp, #36
0fe3c     1F 14 E6 F4 | 	bitnot	arg02, #31
0fe40     A8 8B B1 FD | 	call	#__system___float_add
0fe44     20 4E 05 F1 | 	add	fp, #32
0fe48     A7 FA 61 FC | 	wrlong	result1, fp
0fe4c     20 4E 85 F1 | 	sub	fp, #32
0fe50     FD 12 02 F6 | 	mov	arg01, result1
0fe54     00 14 06 F6 | 	mov	arg02, #0
0fe58     01 16 06 F6 | 	mov	arg03, #1
0fe5c     90 93 B1 FD | 	call	#__system___float_cmp
0fe60     00 FA 55 F2 | 	cmps	result1, #0 wc
0fe64     20 4E 05 C1 |  if_b	add	fp, #32
0fe68     A7 00 68 CC |  if_b	wrlong	#0, fp
0fe6c     20 4E 85 C1 |  if_b	sub	fp, #32
0fe70     14 4E 05 F1 | 	add	fp, #20
0fe74     A7 32 02 FB | 	rdlong	local07, fp
0fe78     01 32 06 F1 | 	add	local07, #1
0fe7c     A7 32 62 FC | 	wrlong	local07, fp
0fe80     14 4E 85 F1 | 	sub	fp, #20
0fe84     44 FF 9F FD | 	jmp	#LR__1316
0fe88                 | LR__1317
0fe88                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0fe88     A7 28 02 FB | 	rdlong	local02, fp
0fe8c     04 4E 05 F1 | 	add	fp, #4
0fe90     A7 34 02 FB | 	rdlong	local08, fp
0fe94     1A 29 02 F1 | 	add	local02, local08
0fe98     10 4E 05 F1 | 	add	fp, #16
0fe9c     A7 28 62 FC | 	wrlong	local02, fp
0fea0     14 4E 85 F1 | 	sub	fp, #20
0fea4                 | LR__1318
0fea4     14 4E 05 F1 | 	add	fp, #20
0fea8     A7 2E 02 FB | 	rdlong	local05, fp
0feac     14 4E 85 F1 | 	sub	fp, #20
0feb0     00 2F 56 F2 | 	cmps	local05, #256 wc
0feb4     A8 00 90 3D |  if_ae	jmp	#LR__1319
0feb8     18 4E 05 F1 | 	add	fp, #24
0febc     A7 34 02 FB | 	rdlong	local08, fp
0fec0     09 34 66 F0 | 	shl	local08, #9
0fec4     0C 00 00 FF 
0fec8     D8 E4 05 F1 | 	add	objptr, ##6360
0fecc     F2 34 02 F1 | 	add	local08, objptr
0fed0     04 4E 85 F1 | 	sub	fp, #4
0fed4     A7 32 02 FB | 	rdlong	local07, fp
0fed8     01 32 66 F0 | 	shl	local07, #1
0fedc     1A 33 02 F1 | 	add	local07, local08
0fee0     0C 4E 05 F1 | 	add	fp, #12
0fee4     A7 12 02 FB | 	rdlong	arg01, fp
0fee8     20 4E 85 F1 | 	sub	fp, #32
0feec     0C 00 00 FF 
0fef0     D8 E4 85 F1 | 	sub	objptr, ##6360
0fef4     01 14 06 F6 | 	mov	arg02, #1
0fef8     88 93 B1 FD | 	call	#__system___float_tointeger
0fefc     19 FB 51 FC | 	wrword	result1, local07
0ff00     20 4E 05 F1 | 	add	fp, #32
0ff04     A7 12 02 FB | 	rdlong	arg01, fp
0ff08     1C 4E 05 F1 | 	add	fp, #28
0ff0c     A7 14 02 FB | 	rdlong	arg02, fp
0ff10     3C 4E 85 F1 | 	sub	fp, #60
0ff14     1F 14 E6 F4 | 	bitnot	arg02, #31
0ff18     D0 8A B1 FD | 	call	#__system___float_add
0ff1c     20 4E 05 F1 | 	add	fp, #32
0ff20     A7 FA 61 FC | 	wrlong	result1, fp
0ff24     20 4E 85 F1 | 	sub	fp, #32
0ff28     FD 12 02 F6 | 	mov	arg01, result1
0ff2c     00 14 06 F6 | 	mov	arg02, #0
0ff30     01 16 06 F6 | 	mov	arg03, #1
0ff34     B8 92 B1 FD | 	call	#__system___float_cmp
0ff38     00 FA 55 F2 | 	cmps	result1, #0 wc
0ff3c     20 4E 05 C1 |  if_b	add	fp, #32
0ff40     A7 00 68 CC |  if_b	wrlong	#0, fp
0ff44     20 4E 85 C1 |  if_b	sub	fp, #32
0ff48     14 4E 05 F1 | 	add	fp, #20
0ff4c     A7 34 02 FB | 	rdlong	local08, fp
0ff50     01 34 06 F1 | 	add	local08, #1
0ff54     A7 34 62 FC | 	wrlong	local08, fp
0ff58     14 4E 85 F1 | 	sub	fp, #20
0ff5c     44 FF 9F FD | 	jmp	#LR__1318
0ff60                 | LR__1319
0ff60     18 4E 05 F1 | 	add	fp, #24
0ff64     A7 2E 02 FB | 	rdlong	local05, fp
0ff68     18 4E 85 F1 | 	sub	fp, #24
0ff6c     09 2E 66 F0 | 	shl	local05, #9
0ff70     0C 00 00 FF 
0ff74     D8 E4 05 F1 | 	add	objptr, ##6360
0ff78     F2 2E 02 F1 | 	add	local05, objptr
0ff7c     FE 2F 06 F1 | 	add	local05, #510
0ff80     17 01 58 FC | 	wrword	#0, local05
0ff84     0C 00 00 FF 
0ff88     D8 E4 85 F1 | 	sub	objptr, ##6360
0ff8c                 | LR__1320
0ff8c     18 4E 05 F1 | 	add	fp, #24
0ff90     A7 2E 02 FB | 	rdlong	local05, fp
0ff94     18 4E 85 F1 | 	sub	fp, #24
0ff98     09 2E 66 F0 | 	shl	local05, #9
0ff9c     0C 00 00 FF 
0ffa0     D8 E4 05 F1 | 	add	objptr, ##6360
0ffa4     F2 2E 02 F1 | 	add	local05, objptr
0ffa8     FE 2F 06 F1 | 	add	local05, #510
0ffac     17 01 58 FC | 	wrword	#0, local05
0ffb0     0C 00 00 FF 
0ffb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0ffb8                 | LR__1321
0ffb8     A7 F0 03 F6 | 	mov	ptra, fp
0ffbc     B2 00 A0 FD | 	call	#popregs_
0ffc0                 | _do_defenv_ret
0ffc0     2D 00 64 FD | 	ret
0ffc4                 | 
0ffc4                 | ' 
0ffc4                 | ' '-------------------- defsnd
0ffc4                 | ' 
0ffc4                 | ' sub do_defsnd
0ffc4                 | _do_defsnd
0ffc4     04 4A 05 F6 | 	mov	COUNT_, #4
0ffc8     A8 00 A0 FD | 	call	#pushregs_
0ffcc     88 F0 07 F1 | 	add	ptra, #136
0ffd0     4A 00 00 FF 
0ffd4     80 E4 05 F1 | 	add	objptr, ##38016
0ffd8     F2 1A 02 FB | 	rdlong	arg05, objptr
0ffdc     0D 19 02 F6 | 	mov	arg04, arg05
0ffe0     01 18 66 F0 | 	shl	arg04, #1
0ffe4     0D 19 02 F1 | 	add	arg04, arg05
0ffe8     02 18 66 F0 | 	shl	arg04, #2
0ffec     03 00 00 FF 
0fff0     04 E4 85 F1 | 	sub	objptr, ##1540
0fff4     F2 18 02 F1 | 	add	arg04, objptr
0fff8     0C 1B 02 FB | 	rdlong	arg05, arg04
0fffc     A7 1A 62 FC | 	wrlong	arg05, fp
10000                 | ' 
10000                 | ' numpar=compiledline(lineptr_e).result.uresult
10000                 | ' 
10000                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10000                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10000                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10000                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10000                 | ' 
10000                 | ' if numpar<2 then return
10000     02 1A 56 F2 | 	cmps	arg05, #2 wc
10004     47 00 00 FF 
10008     7C E4 85 F1 | 	sub	objptr, ##36476
1000c     98 08 90 CD |  if_b	jmp	#LR__1353
10010                 | '  
10010                 | ' if numpar=2 then
10010     A7 1A 02 FB | 	rdlong	arg05, fp
10014     02 1A 0E F2 | 	cmp	arg05, #2 wz
10018     A4 03 90 5D |  if_ne	jmp	#LR__1340
1001c     C0 D2 BF FD | 	call	#_pop
10020     FF 1A 02 F6 | 	mov	arg05, result3
10024     2C 4E 05 F1 | 	add	fp, #44
10028     A7 FA 61 FC | 	wrlong	result1, fp
1002c     04 4E 05 F1 | 	add	fp, #4
10030     A7 FC 61 FC | 	wrlong	result2, fp
10034     04 4E 05 F1 | 	add	fp, #4
10038     A7 1A 62 FC | 	wrlong	arg05, fp
1003c                 | '   t1=pop()
1003c                 | '   if t1.result_type=result_string2 then 
1003c     34 4E 85 F1 | 	sub	fp, #52
10040     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10044     20 00 90 5D |  if_ne	jmp	#LR__1330
10048     2C 4E 05 F1 | 	add	fp, #44
1004c     A7 12 02 FB | 	rdlong	arg01, fp
10050     2C 4E 85 F1 | 	sub	fp, #44
10054     00 D4 BF FD | 	call	#_convertstring
10058     38 4E 05 F1 | 	add	fp, #56
1005c     A7 FA 61 FC | 	wrlong	result1, fp
10060     38 4E 85 F1 | 	sub	fp, #56
10064     58 00 90 FD | 	jmp	#LR__1333
10068                 | LR__1330
10068     34 4E 05 F1 | 	add	fp, #52
1006c     A7 1A 02 FB | 	rdlong	arg05, fp
10070     34 4E 85 F1 | 	sub	fp, #52
10074     1F 1A 0E F2 | 	cmp	arg05, #31 wz
10078     18 00 90 5D |  if_ne	jmp	#LR__1331
1007c     2C 4E 05 F1 | 	add	fp, #44
10080     A7 1A 02 FB | 	rdlong	arg05, fp
10084     0C 4E 05 F1 | 	add	fp, #12
10088     A7 1A 62 FC | 	wrlong	arg05, fp
1008c     38 4E 85 F1 | 	sub	fp, #56
10090     2C 00 90 FD | 	jmp	#LR__1332
10094                 | LR__1331
10094     B1 01 00 FF 
10098     BF 1A 06 F6 | 	mov	arg05, ##@LR__5843
1009c     38 4E 05 F1 | 	add	fp, #56
100a0     A7 1A 62 FC | 	wrlong	arg05, fp
100a4     0C 4E 85 F1 | 	sub	fp, #12
100a8     A7 12 02 F6 | 	mov	arg01, fp
100ac     2C 4E 85 F1 | 	sub	fp, #44
100b0     10 D4 BF FD | 	call	#_converttoint
100b4     14 4E 05 F1 | 	add	fp, #20
100b8     A7 FA 61 FC | 	wrlong	result1, fp
100bc     14 4E 85 F1 | 	sub	fp, #20
100c0                 | LR__1332
100c0                 | LR__1333
100c0                 | '   if s<>"" then 
100c0     38 4E 05 F1 | 	add	fp, #56
100c4     A7 12 02 FB | 	rdlong	arg01, fp
100c8     38 4E 85 F1 | 	sub	fp, #56
100cc     B1 01 00 FF 
100d0     C0 14 06 F6 | 	mov	arg02, ##@LR__5844
100d4     90 5E B1 FD | 	call	#__system___string_cmp
100d8     00 FA 0D F2 | 	cmp	result1, #0 wz
100dc     E4 01 90 AD |  if_e	jmp	#LR__1336
100e0     FC D1 BF FD | 	call	#_pop
100e4     FF 1A 02 F6 | 	mov	arg05, result3
100e8     2C 4E 05 F1 | 	add	fp, #44
100ec     A7 FA 61 FC | 	wrlong	result1, fp
100f0     04 4E 05 F1 | 	add	fp, #4
100f4     A7 FC 61 FC | 	wrlong	result2, fp
100f8     04 4E 05 F1 | 	add	fp, #4
100fc     A7 1A 62 FC | 	wrlong	arg05, fp
10100     08 4E 85 F1 | 	sub	fp, #8
10104     A7 12 02 F6 | 	mov	arg01, fp
10108     2C 4E 85 F1 | 	sub	fp, #44
1010c     B4 D3 BF FD | 	call	#_converttoint
10110     10 4E 05 F1 | 	add	fp, #16
10114     A7 FA 61 FC | 	wrlong	result1, fp
10118                 | '     t1=pop()
10118                 | '     channel=converttoint(t1) : if channel>31 then return
10118     FD 1A 02 F6 | 	mov	arg05, result1
1011c     10 4E 85 F1 | 	sub	fp, #16
10120     20 1A 56 F2 | 	cmps	arg05, #32 wc
10124     80 07 90 3D |  if_ae	jmp	#LR__1353
10128                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10128     09 12 06 F6 | 	mov	arg01, #9
1012c     6C B1 B1 FD | 	call	#__system__close
10130     09 26 06 F6 | 	mov	local01, #9
10134     B1 01 00 FF 
10138     C1 12 06 F6 | 	mov	arg01, ##@LR__5845
1013c     38 4E 05 F1 | 	add	fp, #56
10140     A7 14 02 FB | 	rdlong	arg02, fp
10144     38 4E 85 F1 | 	sub	fp, #56
10148     50 5E B1 FD | 	call	#__system___string_concat
1014c     FD 14 02 F6 | 	mov	arg02, result1
10150     13 13 02 F6 | 	mov	arg01, local01
10154     00 16 06 F6 | 	mov	arg03, #0
10158     E8 69 B1 FD | 	call	#__system___basic_open_string
1015c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10160     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10164     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10168     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1016c     52 00 00 FF 
10170     10 E5 05 F1 | 	add	objptr, ##42256
10174     F2 FA 61 FC | 	wrlong	result1, objptr
10178                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10178     52 00 00 FF 
1017c     10 E5 85 F1 | 	sub	objptr, ##42256
10180     B0 00 90 AD |  if_e	jmp	#LR__1334
10184     00 12 06 F6 | 	mov	arg01, #0
10188     58 BA B1 FD | 	call	#__system___getiolock_0600
1018c     FD 12 02 F6 | 	mov	arg01, result1
10190     AC 5D B1 FD | 	call	#__system___lockmem
10194     B1 01 00 FF 
10198     CE 14 06 F6 | 	mov	arg02, ##@LR__5846
1019c     00 12 06 F6 | 	mov	arg01, #0
101a0     00 16 06 F6 | 	mov	arg03, #0
101a4     90 6A B1 FD | 	call	#__system___basic_print_string
101a8     52 00 00 FF 
101ac     10 E5 05 F1 | 	add	objptr, ##42256
101b0     F2 14 02 FB | 	rdlong	arg02, objptr
101b4     52 00 00 FF 
101b8     10 E5 85 F1 | 	sub	objptr, ##42256
101bc     00 12 06 F6 | 	mov	arg01, #0
101c0     00 16 06 F6 | 	mov	arg03, #0
101c4     0A 18 06 F6 | 	mov	arg04, #10
101c8     B0 6A B1 FD | 	call	#__system___basic_print_integer
101cc     B1 01 00 FF 
101d0     DC 14 06 F6 | 	mov	arg02, ##@LR__5847
101d4     00 12 06 F6 | 	mov	arg01, #0
101d8     00 16 06 F6 | 	mov	arg03, #0
101dc     58 6A B1 FD | 	call	#__system___basic_print_string
101e0     00 26 06 F6 | 	mov	local01, #0
101e4     52 00 00 FF 
101e8     10 E5 05 F1 | 	add	objptr, ##42256
101ec     F2 12 02 FB | 	rdlong	arg01, objptr
101f0     52 00 00 FF 
101f4     10 E5 85 F1 | 	sub	objptr, ##42256
101f8     D4 86 B1 FD | 	call	#__system___strerror
101fc     FD 14 02 F6 | 	mov	arg02, result1
10200     13 13 02 F6 | 	mov	arg01, local01
10204     00 16 06 F6 | 	mov	arg03, #0
10208     2C 6A B1 FD | 	call	#__system___basic_print_string
1020c     00 12 06 F6 | 	mov	arg01, #0
10210     0A 14 06 F6 | 	mov	arg02, #10
10214     00 16 06 F6 | 	mov	arg03, #0
10218     C4 69 B1 FD | 	call	#__system___basic_print_char
1021c     00 12 06 F6 | 	mov	arg01, #0
10220     C0 B9 B1 FD | 	call	#__system___getiolock_0600
10224     FD 00 68 FC | 	wrlong	#0, result1
10228     09 12 06 F6 | 	mov	arg01, #9
1022c     6C B0 B1 FD | 	call	#__system__close
10230     74 06 90 FD | 	jmp	#LR__1353
10234                 | LR__1334
10234                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10234     04 4E 05 F1 | 	add	fp, #4
10238     A7 00 68 FC | 	wrlong	#0, fp
1023c                 | LR__1335
1023c     A7 26 02 FB | 	rdlong	local01, fp
10240     01 26 66 F0 | 	shl	local01, #1
10244     11 14 06 F6 | 	mov	arg02, #17
10248     13 15 02 F1 | 	add	arg02, local01
1024c     78 4E 05 F1 | 	add	fp, #120
10250     A7 16 02 F6 | 	mov	arg03, fp
10254     7C 4E 85 F1 | 	sub	fp, #124
10258     09 12 06 F6 | 	mov	arg01, #9
1025c     01 18 06 F6 | 	mov	arg04, #1
10260     02 1A 06 F6 | 	mov	arg05, #2
10264     4C 6B B1 FD | 	call	#__system___basic_get
10268     10 4E 05 F1 | 	add	fp, #16
1026c     A7 12 02 FB | 	rdlong	arg01, fp
10270     0B 12 66 F0 | 	shl	arg01, #11
10274     0C 4E 85 F1 | 	sub	fp, #12
10278     A7 26 02 FB | 	rdlong	local01, fp
1027c     01 26 66 F0 | 	shl	local01, #1
10280     13 13 02 F1 | 	add	arg01, local01
10284     78 4E 05 F1 | 	add	fp, #120
10288     A7 14 E2 FA | 	rdword	arg02, fp
1028c     7C 4E 85 F1 | 	sub	fp, #124
10290     0F 14 66 F7 | 	signx	arg02, #15
10294     A0 24 B1 FD | 	call	#_psdpoke
10298     04 4E 05 F1 | 	add	fp, #4
1029c     A7 26 02 FB | 	rdlong	local01, fp
102a0     01 26 06 F1 | 	add	local01, #1
102a4     A7 26 62 FC | 	wrlong	local01, fp
102a8     02 00 00 FF 
102ac     01 26 56 F2 | 	cmps	local01, ##1025 wc
102b0     88 FF 9F CD |  if_b	jmp	#LR__1335
102b4     04 4E 85 F1 | 	sub	fp, #4
102b8                 | '     close #9
102b8     09 12 06 F6 | 	mov	arg01, #9
102bc     DC AF B1 FD | 	call	#__system__close
102c0                 | '     return
102c0     E4 05 90 FD | 	jmp	#LR__1353
102c4                 | LR__1336
102c4                 | '     if wptr < ($80000 - 2048) then 
102c4     14 4E 05 F1 | 	add	fp, #20
102c8     A7 26 02 FB | 	rdlong	local01, fp
102cc     14 4E 85 F1 | 	sub	fp, #20
102d0     FC 03 00 FF 
102d4     00 26 56 F2 | 	cmps	local01, ##522240 wc
102d8     70 00 90 3D |  if_ae	jmp	#LR__1338
102dc                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
102dc     04 4E 05 F1 | 	add	fp, #4
102e0     A7 00 68 FC | 	wrlong	#0, fp
102e4     04 4E 85 F1 | 	sub	fp, #4
102e8                 | LR__1337
102e8     10 4E 05 F1 | 	add	fp, #16
102ec     A7 26 02 FB | 	rdlong	local01, fp
102f0     0B 26 66 F0 | 	shl	local01, #11
102f4     0C 4E 85 F1 | 	sub	fp, #12
102f8     A7 1A 02 FB | 	rdlong	arg05, fp
102fc     0D 19 02 F6 | 	mov	arg04, arg05
10300     01 18 66 F0 | 	shl	arg04, #1
10304     0C 27 02 F1 | 	add	local01, arg04
10308     10 4E 05 F1 | 	add	fp, #16
1030c     A7 12 02 FB | 	rdlong	arg01, fp
10310     14 4E 85 F1 | 	sub	fp, #20
10314     01 1A 66 F0 | 	shl	arg05, #1
10318     0D 13 02 F1 | 	add	arg01, arg05
1031c     09 15 E2 FA | 	rdword	arg02, arg01
10320     13 13 02 F6 | 	mov	arg01, local01
10324     10 24 B1 FD | 	call	#_psdpoke
10328     04 4E 05 F1 | 	add	fp, #4
1032c     A7 26 02 FB | 	rdlong	local01, fp
10330     01 26 06 F1 | 	add	local01, #1
10334     A7 26 62 FC | 	wrlong	local01, fp
10338     04 4E 85 F1 | 	sub	fp, #4
1033c     02 00 00 FF 
10340     00 26 56 F2 | 	cmps	local01, ##1024 wc
10344     A0 FF 9F CD |  if_b	jmp	#LR__1337
10348     5C 05 90 FD | 	jmp	#LR__1353
1034c                 | LR__1338
1034c                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
1034c     04 4E 05 F1 | 	add	fp, #4
10350     A7 00 68 FC | 	wrlong	#0, fp
10354     04 4E 85 F1 | 	sub	fp, #4
10358                 | LR__1339
10358     10 4E 05 F1 | 	add	fp, #16
1035c     A7 26 02 FB | 	rdlong	local01, fp
10360     0B 26 66 F0 | 	shl	local01, #11
10364     0C 4E 85 F1 | 	sub	fp, #12
10368     A7 1A 02 FB | 	rdlong	arg05, fp
1036c     0D 19 02 F6 | 	mov	arg04, arg05
10370     01 18 66 F0 | 	shl	arg04, #1
10374     0C 27 02 F1 | 	add	local01, arg04
10378     10 4E 05 F1 | 	add	fp, #16
1037c     A7 12 02 FB | 	rdlong	arg01, fp
10380     14 4E 85 F1 | 	sub	fp, #20
10384     01 1A 66 F0 | 	shl	arg05, #1
10388     0D 13 02 F1 | 	add	arg01, arg05
1038c     E8 24 B1 FD | 	call	#_psdpeek
10390     FD 14 02 F6 | 	mov	arg02, result1
10394     13 13 02 F6 | 	mov	arg01, local01
10398     9C 23 B1 FD | 	call	#_psdpoke
1039c     04 4E 05 F1 | 	add	fp, #4
103a0     A7 26 02 FB | 	rdlong	local01, fp
103a4     01 26 06 F1 | 	add	local01, #1
103a8     A7 26 62 FC | 	wrlong	local01, fp
103ac     04 4E 85 F1 | 	sub	fp, #4
103b0     02 00 00 FF 
103b4     00 26 56 F2 | 	cmps	local01, ##1024 wc
103b8     9C FF 9F CD |  if_b	jmp	#LR__1339
103bc                 | '     return 
103bc     E8 04 90 FD | 	jmp	#LR__1353
103c0                 | '   return
103c0                 | LR__1340
103c0                 | ' for i=0 to 15 : harm(i)=0: next i  
103c0     04 4E 05 F1 | 	add	fp, #4
103c4     A7 00 68 FC | 	wrlong	#0, fp
103c8     97 16 48 FB | 	callpa	#(@LR__1342-@LR__1341)>>2,fcache_load_ptr_
103cc                 | LR__1341
103cc     A7 26 02 FB | 	rdlong	local01, fp
103d0     02 26 66 F0 | 	shl	local01, #2
103d4     38 4E 05 F1 | 	add	fp, #56
103d8     A7 26 02 F1 | 	add	local01, fp
103dc     13 01 68 FC | 	wrlong	#0, local01
103e0     38 4E 85 F1 | 	sub	fp, #56
103e4     A7 26 02 FB | 	rdlong	local01, fp
103e8     01 26 06 F1 | 	add	local01, #1
103ec     A7 26 62 FC | 	wrlong	local01, fp
103f0     10 26 56 F2 | 	cmps	local01, #16 wc
103f4     D4 FF 9F CD |  if_b	jmp	#LR__1341
103f8                 | LR__1342
103f8     04 4E 85 F1 | 	sub	fp, #4
103fc                 | ' for i=numpar to 2 step -1 
103fc     A7 26 02 FB | 	rdlong	local01, fp
10400     04 4E 05 F1 | 	add	fp, #4
10404     A7 26 62 FC | 	wrlong	local01, fp
10408     04 4E 85 F1 | 	sub	fp, #4
1040c                 | LR__1343
1040c     D0 CE BF FD | 	call	#_pop
10410     2C 4E 05 F1 | 	add	fp, #44
10414     A7 FA 61 FC | 	wrlong	result1, fp
10418     04 4E 05 F1 | 	add	fp, #4
1041c     A7 FC 61 FC | 	wrlong	result2, fp
10420     04 4E 05 F1 | 	add	fp, #4
10424     A7 FE 61 FC | 	wrlong	result3, fp
10428     30 4E 85 F1 | 	sub	fp, #48
1042c     A7 26 02 FB | 	rdlong	local01, fp
10430     02 26 86 F1 | 	sub	local01, #2
10434     02 26 66 F0 | 	shl	local01, #2
10438     38 4E 05 F1 | 	add	fp, #56
1043c     A7 26 02 F1 | 	add	local01, fp
10440     10 4E 85 F1 | 	sub	fp, #16
10444     A7 12 02 F6 | 	mov	arg01, fp
10448     2C 4E 85 F1 | 	sub	fp, #44
1044c     30 D1 BF FD | 	call	#_converttofloat
10450     13 FB 61 FC | 	wrlong	result1, local01
10454     04 4E 05 F1 | 	add	fp, #4
10458     A7 26 02 FB | 	rdlong	local01, fp
1045c     01 26 86 F1 | 	sub	local01, #1
10460     A7 26 62 FC | 	wrlong	local01, fp
10464     04 4E 85 F1 | 	sub	fp, #4
10468     02 26 56 F2 | 	cmps	local01, #2 wc
1046c     9C FF 9F 3D |  if_ae	jmp	#LR__1343
10470     6C CE BF FD | 	call	#_pop
10474     FF 26 02 F6 | 	mov	local01, result3
10478     2C 4E 05 F1 | 	add	fp, #44
1047c     A7 FA 61 FC | 	wrlong	result1, fp
10480     04 4E 05 F1 | 	add	fp, #4
10484     A7 FC 61 FC | 	wrlong	result2, fp
10488     04 4E 05 F1 | 	add	fp, #4
1048c     A7 26 62 FC | 	wrlong	local01, fp
10490     08 4E 85 F1 | 	sub	fp, #8
10494     A7 12 02 F6 | 	mov	arg01, fp
10498     2C 4E 85 F1 | 	sub	fp, #44
1049c     24 D0 BF FD | 	call	#_converttoint
104a0     10 4E 05 F1 | 	add	fp, #16
104a4     A7 FA 61 FC | 	wrlong	result1, fp
104a8                 | ' t1=pop()
104a8                 | ' channel=converttoint(t1) : : if channel>31 then return
104a8     FD 26 02 F6 | 	mov	local01, result1
104ac     10 4E 85 F1 | 	sub	fp, #16
104b0     20 26 56 F2 | 	cmps	local01, #32 wc
104b4     F0 03 90 3D |  if_ae	jmp	#LR__1353
104b8     20 4E 05 F1 | 	add	fp, #32
104bc     A7 00 68 FC | 	wrlong	#0, fp
104c0                 | ' max=0
104c0                 | ' if harm(0)<0 then
104c0     1C 4E 05 F1 | 	add	fp, #28
104c4     A7 12 02 FB | 	rdlong	arg01, fp
104c8     3C 4E 85 F1 | 	sub	fp, #60
104cc     00 14 06 F6 | 	mov	arg02, #0
104d0     01 16 06 F6 | 	mov	arg03, #1
104d4     18 8D B1 FD | 	call	#__system___float_cmp
104d8     00 FA 55 F2 | 	cmps	result1, #0 wc
104dc     04 01 90 3D |  if_ae	jmp	#LR__1346
104e0     3C 4E 05 F1 | 	add	fp, #60
104e4     A7 FA 01 FB | 	rdlong	result1, fp
104e8     1F FA 05 F4 | 	bitl	result1, #31
104ec     24 4E 85 F1 | 	sub	fp, #36
104f0     A7 FA 61 FC | 	wrlong	result1, fp
104f4     28 4E 05 F1 | 	add	fp, #40
104f8     A7 FA 01 FB | 	rdlong	result1, fp
104fc     1F FA 05 F4 | 	bitl	result1, #31
10500     24 4E 85 F1 | 	sub	fp, #36
10504     A7 FA 61 FC | 	wrlong	result1, fp
10508     20 4E 05 F1 | 	add	fp, #32
1050c     00 C0 9F FF 
10510     A7 00 68 FC | 	wrlong	##1065353216, fp
10514     24 4E 85 F1 | 	sub	fp, #36
10518     A7 26 02 FB | 	rdlong	local01, fp
1051c     28 4E 05 F1 | 	add	fp, #40
10520     A7 26 62 FC | 	wrlong	local01, fp
10524     24 4E 85 F1 | 	sub	fp, #36
10528     A7 26 02 FB | 	rdlong	local01, fp
1052c     28 4E 05 F1 | 	add	fp, #40
10530     A7 26 62 FC | 	wrlong	local01, fp
10534                 | '   harm(0)=1
10534                 | '   harm(1)=even
10534                 | '   harm(2)=odd
10534                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10534     40 4E 85 F1 | 	sub	fp, #64
10538     A7 06 68 FC | 	wrlong	#3, fp
1053c                 | LR__1344
1053c     A7 1A 02 FB | 	rdlong	arg05, fp
10540     0D 29 02 F6 | 	mov	local02, arg05
10544     02 28 66 F0 | 	shl	local02, #2
10548     38 4E 05 F1 | 	add	fp, #56
1054c     A7 28 02 F1 | 	add	local02, fp
10550     02 1A 86 F1 | 	sub	arg05, #2
10554     02 1A 66 F0 | 	shl	arg05, #2
10558     A7 1A 02 F1 | 	add	arg05, fp
1055c     0D 13 02 FB | 	rdlong	arg01, arg05
10560     24 4E 85 F1 | 	sub	fp, #36
10564     A7 14 02 FB | 	rdlong	arg02, fp
10568     18 4E 85 F1 | 	sub	fp, #24
1056c     4C 88 B1 FD | 	call	#__system___float_mul
10570     14 FB 61 FC | 	wrlong	result1, local02
10574     04 4E 05 F1 | 	add	fp, #4
10578     A7 2A 02 FB | 	rdlong	local03, fp
1057c     02 2A 06 F1 | 	add	local03, #2
10580     A7 2A 62 FC | 	wrlong	local03, fp
10584     10 2A 56 F2 | 	cmps	local03, #16 wc
10588     B0 FF 9F CD |  if_b	jmp	#LR__1344
1058c                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
1058c     A7 08 68 FC | 	wrlong	#4, fp
10590                 | LR__1345
10590     A7 2A 02 FB | 	rdlong	local03, fp
10594     15 29 02 F6 | 	mov	local02, local03
10598     02 28 66 F0 | 	shl	local02, #2
1059c     38 4E 05 F1 | 	add	fp, #56
105a0     A7 28 02 F1 | 	add	local02, fp
105a4     02 2A 86 F1 | 	sub	local03, #2
105a8     02 2A 66 F0 | 	shl	local03, #2
105ac     A7 2A 02 F1 | 	add	local03, fp
105b0     15 13 02 FB | 	rdlong	arg01, local03
105b4     20 4E 85 F1 | 	sub	fp, #32
105b8     A7 14 02 FB | 	rdlong	arg02, fp
105bc     1C 4E 85 F1 | 	sub	fp, #28
105c0     F8 87 B1 FD | 	call	#__system___float_mul
105c4     14 FB 61 FC | 	wrlong	result1, local02
105c8     04 4E 05 F1 | 	add	fp, #4
105cc     A7 2A 02 FB | 	rdlong	local03, fp
105d0     02 2A 06 F1 | 	add	local03, #2
105d4     A7 2A 62 FC | 	wrlong	local03, fp
105d8     0F 2A 56 F2 | 	cmps	local03, #15 wc
105dc     B0 FF 9F CD |  if_b	jmp	#LR__1345
105e0     04 4E 85 F1 | 	sub	fp, #4
105e4                 | LR__1346
105e4                 | ' if harm(0)>=0 then ' synthesize with harmonics
105e4     3C 4E 05 F1 | 	add	fp, #60
105e8     A7 12 02 FB | 	rdlong	arg01, fp
105ec     3C 4E 85 F1 | 	sub	fp, #60
105f0     00 14 06 F6 | 	mov	arg02, #0
105f4     01 16 66 F6 | 	neg	arg03, #1
105f8     F4 8B B1 FD | 	call	#__system___float_cmp
105fc     00 FA 55 F2 | 	cmps	result1, #0 wc
10600     A4 02 90 CD |  if_b	jmp	#LR__1352
10604                 | '   for i=0 to 1023
10604     04 4E 05 F1 | 	add	fp, #4
10608     A7 00 68 FC | 	wrlong	#0, fp
1060c     04 4E 85 F1 | 	sub	fp, #4
10610                 | LR__1347
10610     24 4E 05 F1 | 	add	fp, #36
10614     A7 00 68 FC | 	wrlong	#0, fp
10618                 | '     spl=0
10618                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10618     1C 4E 85 F1 | 	sub	fp, #28
1061c     A7 00 68 FC | 	wrlong	#0, fp
10620                 | LR__1348
10620     A7 28 02 FB | 	rdlong	local02, fp
10624     02 28 66 F0 | 	shl	local02, #2
10628     34 4E 05 F1 | 	add	fp, #52
1062c     A7 28 02 F1 | 	add	local02, fp
10630     14 2B 02 FB | 	rdlong	local03, local02
10634     87 E4 1D FF 
10638     DB 29 06 F6 | 	mov	local02, ##1003032539
1063c     38 4E 85 F1 | 	sub	fp, #56
10640     A7 12 02 FB | 	rdlong	arg01, fp
10644     04 4E 85 F1 | 	sub	fp, #4
10648     09 13 52 F6 | 	abs	arg01, arg01 wc
1064c     1F 2C C6 C9 |  if_b	decod	local04, #31
10650     00 2C 06 36 |  if_ae	mov	local04, #0
10654     60 83 B1 FD | 	call	#__system___float_fromuns
10658     16 FB 61 F5 | 	xor	result1, local04
1065c     FD 14 02 F6 | 	mov	arg02, result1
10660     14 13 02 F6 | 	mov	arg01, local02
10664     54 87 B1 FD | 	call	#__system___float_mul
10668     FD 28 02 F6 | 	mov	local02, result1
1066c     08 4E 05 F1 | 	add	fp, #8
10670     A7 12 02 FB | 	rdlong	arg01, fp
10674     08 4E 85 F1 | 	sub	fp, #8
10678     01 12 06 F1 | 	add	arg01, #1
1067c     09 13 52 F6 | 	abs	arg01, arg01 wc
10680     1F 2C C6 C9 |  if_b	decod	local04, #31
10684     00 2C 06 36 |  if_ae	mov	local04, #0
10688     2C 83 B1 FD | 	call	#__system___float_fromuns
1068c     16 FB 61 F5 | 	xor	result1, local04
10690     FD 14 02 F6 | 	mov	arg02, result1
10694     14 13 02 F6 | 	mov	arg01, local02
10698     20 87 B1 FD | 	call	#__system___float_mul
1069c     FD 12 02 F6 | 	mov	arg01, result1
106a0     78 90 B1 FD | 	call	#__system____builtin_sinf
106a4     FD 14 02 F6 | 	mov	arg02, result1
106a8     15 13 02 F6 | 	mov	arg01, local03
106ac     0C 87 B1 FD | 	call	#__system___float_mul
106b0     FD 14 02 F6 | 	mov	arg02, result1
106b4     24 4E 05 F1 | 	add	fp, #36
106b8     A7 12 02 FB | 	rdlong	arg01, fp
106bc     24 4E 85 F1 | 	sub	fp, #36
106c0     28 83 B1 FD | 	call	#__system___float_add
106c4     24 4E 05 F1 | 	add	fp, #36
106c8     A7 FA 61 FC | 	wrlong	result1, fp
106cc     1C 4E 85 F1 | 	sub	fp, #28
106d0     A7 16 02 FB | 	rdlong	arg03, fp
106d4     01 16 06 F1 | 	add	arg03, #1
106d8     A7 16 62 FC | 	wrlong	arg03, fp
106dc     10 16 56 F2 | 	cmps	arg03, #16 wc
106e0     3C FF 9F CD |  if_b	jmp	#LR__1348
106e4                 | '     if abs(spl)>max then max=abs(spl)  
106e4     1C 4E 05 F1 | 	add	fp, #28
106e8     A7 12 02 FB | 	rdlong	arg01, fp
106ec     1F 12 06 F4 | 	bitl	arg01, #31
106f0     04 4E 85 F1 | 	sub	fp, #4
106f4     A7 14 02 FB | 	rdlong	arg02, fp
106f8     20 4E 85 F1 | 	sub	fp, #32
106fc     01 16 66 F6 | 	neg	arg03, #1
10700     EC 8A B1 FD | 	call	#__system___float_cmp
10704     01 FA 55 F2 | 	cmps	result1, #1 wc
10708     18 00 90 CD |  if_b	jmp	#LR__1349
1070c     24 4E 05 F1 | 	add	fp, #36
10710     A7 FA 01 FB | 	rdlong	result1, fp
10714     1F FA 05 F4 | 	bitl	result1, #31
10718     04 4E 85 F1 | 	sub	fp, #4
1071c     A7 FA 61 FC | 	wrlong	result1, fp
10720     20 4E 85 F1 | 	sub	fp, #32
10724                 | LR__1349
10724     04 4E 05 F1 | 	add	fp, #4
10728     A7 2A 02 FB | 	rdlong	local03, fp
1072c     01 2A 06 F1 | 	add	local03, #1
10730     A7 2A 62 FC | 	wrlong	local03, fp
10734     04 4E 85 F1 | 	sub	fp, #4
10738     02 00 00 FF 
1073c     00 2A 56 F2 | 	cmps	local03, ##1024 wc
10740     CC FE 9F CD |  if_b	jmp	#LR__1347
10744                 | '   for i=0 to 1023
10744     04 4E 05 F1 | 	add	fp, #4
10748     A7 00 68 FC | 	wrlong	#0, fp
1074c     04 4E 85 F1 | 	sub	fp, #4
10750                 | LR__1350
10750     24 4E 05 F1 | 	add	fp, #36
10754     A7 00 68 FC | 	wrlong	#0, fp
10758                 | '     spl=0
10758                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
10758     1C 4E 85 F1 | 	sub	fp, #28
1075c     A7 00 68 FC | 	wrlong	#0, fp
10760                 | LR__1351
10760     A7 2A 02 FB | 	rdlong	local03, fp
10764     02 2A 66 F0 | 	shl	local03, #2
10768     34 4E 05 F1 | 	add	fp, #52
1076c     A7 2A 02 F1 | 	add	local03, fp
10770     15 2B 02 FB | 	rdlong	local03, local03
10774     1C 4E 85 F1 | 	sub	fp, #28
10778     A7 14 02 FB | 	rdlong	arg02, fp
1077c     20 4E 85 F1 | 	sub	fp, #32
10780     58 7F 23 FF 
10784     00 12 06 F6 | 	mov	arg01, ##1191096320
10788     34 88 B1 FD | 	call	#__system___float_div
1078c     FD 14 02 F6 | 	mov	arg02, result1
10790     15 13 02 F6 | 	mov	arg01, local03
10794     24 86 B1 FD | 	call	#__system___float_mul
10798     FD 2A 02 F6 | 	mov	local03, result1
1079c     87 E4 1D FF 
107a0     DB 29 06 F6 | 	mov	local02, ##1003032539
107a4     04 4E 05 F1 | 	add	fp, #4
107a8     A7 12 02 FB | 	rdlong	arg01, fp
107ac     04 4E 85 F1 | 	sub	fp, #4
107b0     09 13 52 F6 | 	abs	arg01, arg01 wc
107b4     1F 2C C6 C9 |  if_b	decod	local04, #31
107b8     00 2C 06 36 |  if_ae	mov	local04, #0
107bc     F8 81 B1 FD | 	call	#__system___float_fromuns
107c0     16 FB 61 F5 | 	xor	result1, local04
107c4     FD 14 02 F6 | 	mov	arg02, result1
107c8     14 13 02 F6 | 	mov	arg01, local02
107cc     EC 85 B1 FD | 	call	#__system___float_mul
107d0     FD 28 02 F6 | 	mov	local02, result1
107d4     08 4E 05 F1 | 	add	fp, #8
107d8     A7 12 02 FB | 	rdlong	arg01, fp
107dc     08 4E 85 F1 | 	sub	fp, #8
107e0     01 12 06 F1 | 	add	arg01, #1
107e4     09 13 52 F6 | 	abs	arg01, arg01 wc
107e8     1F 2C C6 C9 |  if_b	decod	local04, #31
107ec     00 2C 06 36 |  if_ae	mov	local04, #0
107f0     C4 81 B1 FD | 	call	#__system___float_fromuns
107f4     16 FB 61 F5 | 	xor	result1, local04
107f8     FD 14 02 F6 | 	mov	arg02, result1
107fc     14 13 02 F6 | 	mov	arg01, local02
10800     B8 85 B1 FD | 	call	#__system___float_mul
10804     FD 12 02 F6 | 	mov	arg01, result1
10808     10 8F B1 FD | 	call	#__system____builtin_sinf
1080c     FD 14 02 F6 | 	mov	arg02, result1
10810     15 13 02 F6 | 	mov	arg01, local03
10814     A4 85 B1 FD | 	call	#__system___float_mul
10818     FD 14 02 F6 | 	mov	arg02, result1
1081c     24 4E 05 F1 | 	add	fp, #36
10820     A7 12 02 FB | 	rdlong	arg01, fp
10824     24 4E 85 F1 | 	sub	fp, #36
10828     C0 81 B1 FD | 	call	#__system___float_add
1082c     24 4E 05 F1 | 	add	fp, #36
10830     A7 FA 61 FC | 	wrlong	result1, fp
10834     1C 4E 85 F1 | 	sub	fp, #28
10838     A7 2A 02 FB | 	rdlong	local03, fp
1083c     01 2A 06 F1 | 	add	local03, #1
10840     A7 2A 62 FC | 	wrlong	local03, fp
10844     10 2A 56 F2 | 	cmps	local03, #16 wc
10848     14 FF 9F CD |  if_b	jmp	#LR__1351
1084c     08 4E 05 F1 | 	add	fp, #8
10850     A7 2A 02 FB | 	rdlong	local03, fp
10854     0B 2A 66 F0 | 	shl	local03, #11
10858     0C 4E 85 F1 | 	sub	fp, #12
1085c     A7 28 02 FB | 	rdlong	local02, fp
10860     01 28 66 F0 | 	shl	local02, #1
10864     14 2B 02 F1 | 	add	local03, local02
10868     20 4E 05 F1 | 	add	fp, #32
1086c     A7 12 02 FB | 	rdlong	arg01, fp
10870     24 4E 85 F1 | 	sub	fp, #36
10874     01 14 06 F6 | 	mov	arg02, #1
10878     08 8A B1 FD | 	call	#__system___float_tointeger
1087c     FD 14 02 F6 | 	mov	arg02, result1
10880     15 13 02 F6 | 	mov	arg01, local03
10884     B0 1E B1 FD | 	call	#_psdpoke
10888     04 4E 05 F1 | 	add	fp, #4
1088c     A7 2A 02 FB | 	rdlong	local03, fp
10890     01 2A 06 F1 | 	add	local03, #1
10894     A7 2A 62 FC | 	wrlong	local03, fp
10898     04 4E 85 F1 | 	sub	fp, #4
1089c     02 00 00 FF 
108a0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
108a4     A8 FE 9F CD |  if_b	jmp	#LR__1350
108a8                 | LR__1352
108a8                 | LR__1353
108a8     A7 F0 03 F6 | 	mov	ptra, fp
108ac     B2 00 A0 FD | 	call	#popregs_
108b0                 | _do_defsnd_ret
108b0     2D 00 64 FD | 	ret
108b4                 | 
108b4                 | ' 
108b4                 | ' '-------------------- defsprite
108b4                 | ' 
108b4                 | ' sub do_defsprite
108b4                 | _do_defsprite
108b4     07 4A 05 F6 | 	mov	COUNT_, #7
108b8     A8 00 A0 FD | 	call	#pushregs_
108bc     60 F0 07 F1 | 	add	ptra, #96
108c0     1C CA BF FD | 	call	#_pop
108c4     FD 16 02 F6 | 	mov	arg03, result1
108c8     FE 14 02 F6 | 	mov	arg02, result2
108cc     FF 12 02 F6 | 	mov	arg01, result3
108d0     30 4E 05 F1 | 	add	fp, #48
108d4     A7 16 62 FC | 	wrlong	arg03, fp
108d8     04 4E 05 F1 | 	add	fp, #4
108dc     A7 14 62 FC | 	wrlong	arg02, fp
108e0     04 4E 05 F1 | 	add	fp, #4
108e4     A7 12 62 FC | 	wrlong	arg01, fp
108e8     38 4E 85 F1 | 	sub	fp, #56
108ec     F0 C9 BF FD | 	call	#_pop
108f0     FD 16 02 F6 | 	mov	arg03, result1
108f4     FE 14 02 F6 | 	mov	arg02, result2
108f8     FF 12 02 F6 | 	mov	arg01, result3
108fc     24 4E 05 F1 | 	add	fp, #36
10900     A7 16 62 FC | 	wrlong	arg03, fp
10904     04 4E 05 F1 | 	add	fp, #4
10908     A7 14 62 FC | 	wrlong	arg02, fp
1090c     04 4E 05 F1 | 	add	fp, #4
10910     A7 12 62 FC | 	wrlong	arg01, fp
10914     2C 4E 85 F1 | 	sub	fp, #44
10918     C4 C9 BF FD | 	call	#_pop
1091c     FD 16 02 F6 | 	mov	arg03, result1
10920     FE 14 02 F6 | 	mov	arg02, result2
10924     FF 12 02 F6 | 	mov	arg01, result3
10928     18 4E 05 F1 | 	add	fp, #24
1092c     A7 16 62 FC | 	wrlong	arg03, fp
10930     04 4E 05 F1 | 	add	fp, #4
10934     A7 14 62 FC | 	wrlong	arg02, fp
10938     04 4E 05 F1 | 	add	fp, #4
1093c     A7 12 62 FC | 	wrlong	arg01, fp
10940     20 4E 85 F1 | 	sub	fp, #32
10944     98 C9 BF FD | 	call	#_pop
10948     FD 16 02 F6 | 	mov	arg03, result1
1094c     FE 14 02 F6 | 	mov	arg02, result2
10950     FF 12 02 F6 | 	mov	arg01, result3
10954     0C 4E 05 F1 | 	add	fp, #12
10958     A7 16 62 FC | 	wrlong	arg03, fp
1095c     04 4E 05 F1 | 	add	fp, #4
10960     A7 14 62 FC | 	wrlong	arg02, fp
10964     04 4E 05 F1 | 	add	fp, #4
10968     A7 12 62 FC | 	wrlong	arg01, fp
1096c     14 4E 85 F1 | 	sub	fp, #20
10970     6C C9 BF FD | 	call	#_pop
10974     FF 16 02 F6 | 	mov	arg03, result3
10978     A7 FA 61 FC | 	wrlong	result1, fp
1097c     04 4E 05 F1 | 	add	fp, #4
10980     A7 FC 61 FC | 	wrlong	result2, fp
10984     04 4E 05 F1 | 	add	fp, #4
10988     A7 16 62 FC | 	wrlong	arg03, fp
1098c     08 4E 85 F1 | 	sub	fp, #8
10990     A7 12 02 F6 | 	mov	arg01, fp
10994     2C CB BF FD | 	call	#_converttoint
10998     3C 4E 05 F1 | 	add	fp, #60
1099c     A7 FA 61 FC | 	wrlong	result1, fp
109a0     30 4E 85 F1 | 	sub	fp, #48
109a4     A7 12 02 F6 | 	mov	arg01, fp
109a8     0C 4E 85 F1 | 	sub	fp, #12
109ac     14 CB BF FD | 	call	#_converttoint
109b0     40 4E 05 F1 | 	add	fp, #64
109b4     A7 FA 61 FC | 	wrlong	result1, fp
109b8     28 4E 85 F1 | 	sub	fp, #40
109bc     A7 12 02 F6 | 	mov	arg01, fp
109c0     18 4E 85 F1 | 	sub	fp, #24
109c4     FC CA BF FD | 	call	#_converttoint
109c8     44 4E 05 F1 | 	add	fp, #68
109cc     A7 FA 61 FC | 	wrlong	result1, fp
109d0     20 4E 85 F1 | 	sub	fp, #32
109d4     A7 12 02 F6 | 	mov	arg01, fp
109d8     24 4E 85 F1 | 	sub	fp, #36
109dc     E4 CA BF FD | 	call	#_converttoint
109e0     48 4E 05 F1 | 	add	fp, #72
109e4     A7 FA 61 FC | 	wrlong	result1, fp
109e8     18 4E 85 F1 | 	sub	fp, #24
109ec     A7 12 02 F6 | 	mov	arg01, fp
109f0     30 4E 85 F1 | 	sub	fp, #48
109f4     CC CA BF FD | 	call	#_converttoint
109f8     4C 4E 05 F1 | 	add	fp, #76
109fc     A7 FA 61 FC | 	wrlong	result1, fp
10a00                 | ' 
10a00                 | ' t5=pop()
10a00                 | ' t4=pop()
10a00                 | ' t3=pop()
10a00                 | ' t2=pop()
10a00                 | ' t1=pop()
10a00                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
10a00                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
10a00     10 4E 85 F1 | 	sub	fp, #16
10a04     A7 16 02 FB | 	rdlong	arg03, fp
10a08     3C 4E 85 F1 | 	sub	fp, #60
10a0c     02 16 66 F0 | 	shl	arg03, #2
10a10     52 00 00 FF 
10a14     54 E4 05 F1 | 	add	objptr, ##42068
10a18     F2 16 02 F1 | 	add	arg03, objptr
10a1c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
10a20     52 00 00 FF 
10a24     54 E4 85 F1 | 	sub	objptr, ##42068
10a28     2C 00 90 AD |  if_e	jmp	#LR__1360
10a2c     3C 4E 05 F1 | 	add	fp, #60
10a30     A7 16 02 FB | 	rdlong	arg03, fp
10a34     3C 4E 85 F1 | 	sub	fp, #60
10a38     02 16 66 F0 | 	shl	arg03, #2
10a3c     52 00 00 FF 
10a40     54 E4 05 F1 | 	add	objptr, ##42068
10a44     F2 16 02 F1 | 	add	arg03, objptr
10a48     0B 13 02 FB | 	rdlong	arg01, arg03
10a4c     52 00 00 FF 
10a50     54 E4 85 F1 | 	sub	objptr, ##42068
10a54     C8 97 B1 FD | 	call	#__system___gc_free
10a58                 | LR__1360
10a58     3C 4E 05 F1 | 	add	fp, #60
10a5c     A7 26 02 FB | 	rdlong	local01, fp
10a60     0C 4E 05 F1 | 	add	fp, #12
10a64     A7 16 02 FB | 	rdlong	arg03, fp
10a68     04 4E 05 F1 | 	add	fp, #4
10a6c     A7 14 02 FB | 	rdlong	arg02, fp
10a70     0A 17 02 FD | 	qmul	arg03, arg02
10a74     02 26 66 F0 | 	shl	local01, #2
10a78     52 00 00 FF 
10a7c     54 E4 05 F1 | 	add	objptr, ##42068
10a80     F2 26 02 F1 | 	add	local01, objptr
10a84     4C 4E 85 F1 | 	sub	fp, #76
10a88     52 00 00 FF 
10a8c     54 E4 85 F1 | 	sub	objptr, ##42068
10a90     18 12 62 FD | 	getqx	arg01
10a94     4C 96 B1 FD | 	call	#__system___gc_alloc_managed
10a98     13 FB 61 FC | 	wrlong	result1, local01
10a9c                 | ' for y=a3 to a3+a5-1
10a9c     44 4E 05 F1 | 	add	fp, #68
10aa0     A7 28 02 FB | 	rdlong	local02, fp
10aa4     0C 4E 05 F1 | 	add	fp, #12
10aa8     A7 28 62 FC | 	wrlong	local02, fp
10aac     0C 4E 85 F1 | 	sub	fp, #12
10ab0     A7 2A 02 FB | 	rdlong	local03, fp
10ab4     08 4E 05 F1 | 	add	fp, #8
10ab8     A7 2C 02 FB | 	rdlong	local04, fp
10abc     4C 4E 85 F1 | 	sub	fp, #76
10ac0     16 2B 02 F1 | 	add	local03, local04
10ac4                 | LR__1361
10ac4     50 4E 05 F1 | 	add	fp, #80
10ac8     A7 28 02 FB | 	rdlong	local02, fp
10acc     50 4E 85 F1 | 	sub	fp, #80
10ad0     15 29 52 F2 | 	cmps	local02, local03 wc
10ad4     F4 00 90 3D |  if_ae	jmp	#LR__1364
10ad8                 | '   for x=a2 to a4+a2-1
10ad8     40 4E 05 F1 | 	add	fp, #64
10adc     A7 26 02 FB | 	rdlong	local01, fp
10ae0     14 4E 05 F1 | 	add	fp, #20
10ae4     A7 26 62 FC | 	wrlong	local01, fp
10ae8     0C 4E 85 F1 | 	sub	fp, #12
10aec     A7 2E 02 FB | 	rdlong	local05, fp
10af0     08 4E 85 F1 | 	sub	fp, #8
10af4     A7 30 02 FB | 	rdlong	local06, fp
10af8     40 4E 85 F1 | 	sub	fp, #64
10afc     18 2F 02 F1 | 	add	local05, local06
10b00                 | LR__1362
10b00     54 4E 05 F1 | 	add	fp, #84
10b04     A7 26 02 FB | 	rdlong	local01, fp
10b08     54 4E 85 F1 | 	sub	fp, #84
10b0c     17 27 52 F2 | 	cmps	local01, local05 wc
10b10     A0 00 90 3D |  if_ae	jmp	#LR__1363
10b14     3C 4E 05 F1 | 	add	fp, #60
10b18     A7 30 02 FB | 	rdlong	local06, fp
10b1c     18 4E 05 F1 | 	add	fp, #24
10b20     A7 2C 02 FB | 	rdlong	local04, fp
10b24     14 4E 85 F1 | 	sub	fp, #20
10b28     A7 28 02 FB | 	rdlong	local02, fp
10b2c     10 4E 05 F1 | 	add	fp, #16
10b30     A7 26 02 FB | 	rdlong	local01, fp
10b34     13 17 02 F6 | 	mov	arg03, local01
10b38     0C 4E 85 F1 | 	sub	fp, #12
10b3c     A7 14 02 FB | 	rdlong	arg02, fp
10b40     0A 17 82 F1 | 	sub	arg03, arg02
10b44     04 4E 05 F1 | 	add	fp, #4
10b48     A7 14 02 FB | 	rdlong	arg02, fp
10b4c     0A 17 02 FD | 	qmul	arg03, arg02
10b50     02 30 66 F0 | 	shl	local06, #2
10b54     52 00 00 FF 
10b58     54 E4 05 F1 | 	add	objptr, ##42068
10b5c     F2 30 02 F1 | 	add	local06, objptr
10b60     18 31 02 FB | 	rdlong	local06, local06
10b64     16 33 02 F6 | 	mov	local07, local04
10b68     14 33 82 F1 | 	sub	local07, local02
10b6c     52 00 00 FF 
10b70     54 E4 85 F1 | 	sub	objptr, ##42068
10b74     F2 12 02 FB | 	rdlong	arg01, objptr
10b78     16 13 02 F1 | 	add	arg01, local04
10b7c     48 4E 85 F1 | 	sub	fp, #72
10b80     0A 26 66 F0 | 	shl	local01, #10
10b84     13 13 02 F1 | 	add	arg01, local01
10b88     18 2C 62 FD | 	getqx	local04
10b8c     16 33 02 F1 | 	add	local07, local04
10b90     18 33 02 F1 | 	add	local07, local06
10b94     30 1C B1 FD | 	call	#_pspeek
10b98     19 FB 41 FC | 	wrbyte	result1, local07
10b9c     54 4E 05 F1 | 	add	fp, #84
10ba0     A7 32 02 FB | 	rdlong	local07, fp
10ba4     01 32 06 F1 | 	add	local07, #1
10ba8     A7 32 62 FC | 	wrlong	local07, fp
10bac     54 4E 85 F1 | 	sub	fp, #84
10bb0     4C FF 9F FD | 	jmp	#LR__1362
10bb4                 | LR__1363
10bb4     50 4E 05 F1 | 	add	fp, #80
10bb8     A7 32 02 FB | 	rdlong	local07, fp
10bbc     01 32 06 F1 | 	add	local07, #1
10bc0     A7 32 62 FC | 	wrlong	local07, fp
10bc4     50 4E 85 F1 | 	sub	fp, #80
10bc8     F8 FE 9F FD | 	jmp	#LR__1361
10bcc                 | LR__1364
10bcc     3C 4E 05 F1 | 	add	fp, #60
10bd0     A7 32 02 FB | 	rdlong	local07, fp
10bd4     19 13 02 F6 | 	mov	arg01, local07
10bd8     3C 4E 85 F1 | 	sub	fp, #60
10bdc     02 32 66 F0 | 	shl	local07, #2
10be0     52 00 00 FF 
10be4     54 E4 05 F1 | 	add	objptr, ##42068
10be8     F2 32 02 F1 | 	add	local07, objptr
10bec     19 15 02 FB | 	rdlong	arg02, local07
10bf0     52 00 00 FF 
10bf4     54 E4 85 F1 | 	sub	objptr, ##42068
10bf8     10 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
10bfc     3C 4E 05 F1 | 	add	fp, #60
10c00     A7 12 02 FB | 	rdlong	arg01, fp
10c04     0C 4E 05 F1 | 	add	fp, #12
10c08     A7 14 02 FB | 	rdlong	arg02, fp
10c0c     04 4E 05 F1 | 	add	fp, #4
10c10     A7 16 02 FB | 	rdlong	arg03, fp
10c14     4C 4E 85 F1 | 	sub	fp, #76
10c18     80 29 B1 FD | 	call	#_hg010b_spin2_setspritesize
10c1c     A7 F0 03 F6 | 	mov	ptra, fp
10c20     B2 00 A0 FD | 	call	#popregs_
10c24                 | _do_defsprite_ret
10c24     2D 00 64 FD | 	ret
10c28                 | 
10c28                 | ' 
10c28                 | ' '-------------------- deg
10c28                 | ' 
10c28                 | ' sub do_deg
10c28                 | _do_deg
10c28     52 00 00 FF 
10c2c     A8 E4 05 F1 | 	add	objptr, ##42152
10c30     7D 47 9E FF 
10c34     F2 6A 68 FC | 	wrlong	##1016003125, objptr
10c38     04 E4 05 F1 | 	add	objptr, #4
10c3c     97 32 A1 FF 
10c40     F2 C2 69 FC | 	wrlong	##1113927393, objptr
10c44     52 00 00 FF 
10c48     AC E4 85 F1 | 	sub	objptr, ##42156
10c4c                 | _do_deg_ret
10c4c     2D 00 64 FD | 	ret
10c50                 | 
10c50                 | ' 
10c50                 | ' '-------------------- delete
10c50                 | ' 
10c50                 | ' sub do_delete
10c50                 | _do_delete
10c50     05 4A 05 F6 | 	mov	COUNT_, #5
10c54     A8 00 A0 FD | 	call	#pushregs_
10c58     84 C6 BF FD | 	call	#_pop
10c5c     FE 18 02 F6 | 	mov	arg04, result2
10c60     FF 16 02 F6 | 	mov	arg03, result3
10c64     FD 26 02 F6 | 	mov	local01, result1
10c68     0C 29 02 F6 | 	mov	local02, arg04
10c6c     0B 2B 02 F6 | 	mov	local03, arg03
10c70                 | ' 
10c70                 | ' t1=pop()
10c70                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
10c70     2B 2A 0E F2 | 	cmp	local03, #43 wz
10c74     10 00 90 5D |  if_ne	jmp	#LR__1370
10c78     13 13 02 F6 | 	mov	arg01, local01
10c7c     D8 C7 BF FD | 	call	#_convertstring
10c80     FD 26 02 F6 | 	mov	local01, result1
10c84     1F 2A 06 F6 | 	mov	local03, #31
10c88                 | LR__1370
10c88                 | ' if t1.result_type<>result_string then printerror(15): return
10c88     1F 2A 0E F2 | 	cmp	local03, #31 wz
10c8c     10 00 90 AD |  if_e	jmp	#LR__1371
10c90     0F 12 06 F6 | 	mov	arg01, #15
10c94     00 14 06 F6 | 	mov	arg02, #0
10c98     B4 18 B1 FD | 	call	#_printerror
10c9c     E4 00 90 FD | 	jmp	#LR__1375
10ca0                 | LR__1371
10ca0                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10ca0     4A 00 00 FF 
10ca4     94 E4 05 F1 | 	add	objptr, ##38036
10ca8     F2 12 02 FB | 	rdlong	arg01, objptr
10cac     4A 00 00 FF 
10cb0     94 E4 85 F1 | 	sub	objptr, ##38036
10cb4     B1 01 00 FF 
10cb8     DF 14 06 F6 | 	mov	arg02, ##@LR__5848
10cbc     A8 52 B1 FD | 	call	#__system___string_cmp
10cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
10cc4     34 00 90 AD |  if_e	jmp	#LR__1372
10cc8     4A 00 00 FF 
10ccc     94 E4 05 F1 | 	add	objptr, ##38036
10cd0     F2 12 02 FB | 	rdlong	arg01, objptr
10cd4     4A 00 00 FF 
10cd8     94 E4 85 F1 | 	sub	objptr, ##38036
10cdc     B1 01 00 FF 
10ce0     E1 14 06 F6 | 	mov	arg02, ##@LR__5849
10ce4     B4 52 B1 FD | 	call	#__system___string_concat
10ce8     FD 12 02 F6 | 	mov	arg01, result1
10cec     13 15 02 F6 | 	mov	arg02, local01
10cf0     A8 52 B1 FD | 	call	#__system___string_concat
10cf4     FD 2C 02 F6 | 	mov	local04, result1
10cf8     14 00 90 FD | 	jmp	#LR__1373
10cfc                 | LR__1372
10cfc     B1 01 00 FF 
10d00     E3 12 06 F6 | 	mov	arg01, ##@LR__5850
10d04     13 15 02 F6 | 	mov	arg02, local01
10d08     90 52 B1 FD | 	call	#__system___string_concat
10d0c     FD 2C 02 F6 | 	mov	local04, result1
10d10                 | LR__1373
10d10     16 13 02 F6 | 	mov	arg01, local04
10d14     F8 79 B1 FD | 	call	#__system___remove
10d18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10d1c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
10d20     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10d24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10d28     FD 2E 0A F6 | 	mov	local05, result1 wz
10d2c                 | ' kill filename$
10d2c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
10d2c     54 00 90 AD |  if_e	jmp	#LR__1374
10d30     00 12 06 F6 | 	mov	arg01, #0
10d34     AC AE B1 FD | 	call	#__system___getiolock_0600
10d38     FD 12 02 F6 | 	mov	arg01, result1
10d3c     00 52 B1 FD | 	call	#__system___lockmem
10d40     B1 01 00 FF 
10d44     E5 14 06 F6 | 	mov	arg02, ##@LR__5851
10d48     00 12 06 F6 | 	mov	arg01, #0
10d4c     00 16 06 F6 | 	mov	arg03, #0
10d50     E4 5E B1 FD | 	call	#__system___basic_print_string
10d54     00 12 06 F6 | 	mov	arg01, #0
10d58     17 15 02 F6 | 	mov	arg02, local05
10d5c     00 16 06 F6 | 	mov	arg03, #0
10d60     0A 18 06 F6 | 	mov	arg04, #10
10d64     14 5F B1 FD | 	call	#__system___basic_print_integer
10d68     00 12 06 F6 | 	mov	arg01, #0
10d6c     0A 14 06 F6 | 	mov	arg02, #10
10d70     00 16 06 F6 | 	mov	arg03, #0
10d74     68 5E B1 FD | 	call	#__system___basic_print_char
10d78     00 12 06 F6 | 	mov	arg01, #0
10d7c     64 AE B1 FD | 	call	#__system___getiolock_0600
10d80     FD 00 68 FC | 	wrlong	#0, result1
10d84                 | LR__1374
10d84                 | LR__1375
10d84     A7 F0 03 F6 | 	mov	ptra, fp
10d88     B2 00 A0 FD | 	call	#popregs_
10d8c                 | _do_delete_ret
10d8c     2D 00 64 FD | 	ret
10d90                 | 
10d90                 | ' 
10d90                 | ' '-------------------- dir
10d90                 | ' 
10d90                 | ' sub do_dir
10d90                 | _do_dir
10d90     13 4A 05 F6 | 	mov	COUNT_, #19
10d94     A8 00 A0 FD | 	call	#pushregs_
10d98     01 00 00 FF 
10d9c     38 F0 07 F1 | 	add	ptra, ##568
10da0                 | ' 
10da0                 | ' print "Current directory: "; currentdir$ 
10da0     00 12 06 F6 | 	mov	arg01, #0
10da4     3C AE B1 FD | 	call	#__system___getiolock_0600
10da8     FD 12 02 F6 | 	mov	arg01, result1
10dac     90 51 B1 FD | 	call	#__system___lockmem
10db0     B1 01 00 FF 
10db4     1D 15 06 F6 | 	mov	arg02, ##@LR__5852
10db8     00 12 06 F6 | 	mov	arg01, #0
10dbc     00 16 06 F6 | 	mov	arg03, #0
10dc0     74 5E B1 FD | 	call	#__system___basic_print_string
10dc4     4A 00 00 FF 
10dc8     94 E4 05 F1 | 	add	objptr, ##38036
10dcc     F2 14 02 FB | 	rdlong	arg02, objptr
10dd0     4A 00 00 FF 
10dd4     94 E4 85 F1 | 	sub	objptr, ##38036
10dd8     00 12 06 F6 | 	mov	arg01, #0
10ddc     00 16 06 F6 | 	mov	arg03, #0
10de0     54 5E B1 FD | 	call	#__system___basic_print_string
10de4     00 12 06 F6 | 	mov	arg01, #0
10de8     0A 14 06 F6 | 	mov	arg02, #10
10dec     00 16 06 F6 | 	mov	arg03, #0
10df0     EC 5D B1 FD | 	call	#__system___basic_print_char
10df4     01 26 06 F6 | 	mov	local01, #1
10df8     00 12 06 F6 | 	mov	arg01, #0
10dfc     E4 AD B1 FD | 	call	#__system___getiolock_0600
10e00     FD 00 68 FC | 	wrlong	#0, result1
10e04     00 28 06 F6 | 	mov	local02, #0
10e08     00 2A 06 F6 | 	mov	local03, #0
10e0c                 | ' px=0
10e0c                 | ' for i=0 to 127: filelist(i)="" : next i
10e0c     00 2C 06 F6 | 	mov	local04, #0
10e10     1C 4E 05 F1 | 	add	fp, #28
10e14     97 12 48 FB | 	callpa	#(@LR__1381-@LR__1380)>>2,fcache_load_ptr_
10e18                 | LR__1380
10e18     16 2F 02 F6 | 	mov	local05, local04
10e1c     02 2E 66 F0 | 	shl	local05, #2
10e20     A7 2E 02 F1 | 	add	local05, fp
10e24     B1 01 00 FF 
10e28     31 31 06 F6 | 	mov	local06, ##@LR__5853
10e2c     17 31 62 FC | 	wrlong	local06, local05
10e30     01 2C 06 F1 | 	add	local04, #1
10e34     80 2C 56 F2 | 	cmps	local04, #128 wc
10e38     DC FF 9F CD |  if_b	jmp	#LR__1380
10e3c                 | LR__1381
10e3c     1C 4E 85 F1 | 	sub	fp, #28
10e40     B1 01 00 FF 
10e44     32 13 06 F6 | 	mov	arg01, ##@LR__5854
10e48     10 14 06 F6 | 	mov	arg02, #16
10e4c     54 AF B1 FD | 	call	#__system___basic_dir
10e50     FD 32 02 F6 | 	mov	local07, result1
10e54     00 34 06 F6 | 	mov	local08, #0
10e58                 | ' filename=dir$("*", fbDirectory)
10e58                 | ' n=0
10e58                 | ' while filename <> "" andalso filename <> nil andalso n<128
10e58                 | LR__1382
10e58     B1 01 00 FF 
10e5c     34 37 06 F6 | 	mov	local09, ##@LR__5855
10e60     19 13 02 F6 | 	mov	arg01, local07
10e64     1B 15 02 F6 | 	mov	arg02, local09
10e68     FC 50 B1 FD | 	call	#__system___string_cmp
10e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
10e70     68 00 90 AD |  if_e	jmp	#LR__1383
10e74     00 36 06 F6 | 	mov	local09, #0
10e78     19 13 02 F6 | 	mov	arg01, local07
10e7c     00 14 06 F6 | 	mov	arg02, #0
10e80     E4 50 B1 FD | 	call	#__system___string_cmp
10e84     00 FA 0D F2 | 	cmp	result1, #0 wz
10e88     50 00 90 AD |  if_e	jmp	#LR__1383
10e8c     80 34 56 F2 | 	cmps	local08, #128 wc
10e90     48 00 90 3D |  if_ae	jmp	#LR__1383
10e94     B1 01 00 FF 
10e98     35 13 06 F6 | 	mov	arg01, ##@LR__5856
10e9c     19 15 02 F6 | 	mov	arg02, local07
10ea0     F8 50 B1 FD | 	call	#__system___string_concat
10ea4     FD 32 02 F6 | 	mov	local07, result1
10ea8     1A 2F 02 F6 | 	mov	local05, local08
10eac     02 2E 66 F0 | 	shl	local05, #2
10eb0     1C 4E 05 F1 | 	add	fp, #28
10eb4     A7 2E 02 F1 | 	add	local05, fp
10eb8     17 33 62 FC | 	wrlong	local07, local05
10ebc     01 34 06 F1 | 	add	local08, #1
10ec0     00 2E 06 F6 | 	mov	local05, #0
10ec4     00 12 06 F6 | 	mov	arg01, #0
10ec8     00 14 06 F6 | 	mov	arg02, #0
10ecc     1C 4E 85 F1 | 	sub	fp, #28
10ed0     D0 AE B1 FD | 	call	#__system___basic_dir
10ed4     FD 32 02 F6 | 	mov	local07, result1
10ed8     7C FF 9F FD | 	jmp	#LR__1382
10edc                 | LR__1383
10edc                 | ' for i=0 to n-1			' now sort this
10edc     00 2C 06 F6 | 	mov	local04, #0
10ee0     1A 39 02 F6 | 	mov	local10, local08
10ee4                 | LR__1384
10ee4     1C 2D 52 F2 | 	cmps	local04, local10 wc
10ee8     DC 00 90 3D |  if_ae	jmp	#LR__1388
10eec     00 3A 06 F6 | 	mov	local11, #0
10ef0                 | '   swapped=false
10ef0                 | '   for j=0 to n-i-2
10ef0     00 3C 06 F6 | 	mov	local12, #0
10ef4     1A 3F 02 F6 | 	mov	local13, local08
10ef8     16 3F 82 F1 | 	sub	local13, local04
10efc     01 3E 86 F1 | 	sub	local13, #1
10f00                 | LR__1385
10f00     1F 3D 52 F2 | 	cmps	local12, local13 wc
10f04     B0 00 90 3D |  if_ae	jmp	#LR__1387
10f08                 | '     if filelist(j) > filelist(j+1) then
10f08     1E 37 02 F6 | 	mov	local09, local12
10f0c     02 36 66 F0 | 	shl	local09, #2
10f10     1C 4E 05 F1 | 	add	fp, #28
10f14     A7 36 02 F1 | 	add	local09, fp
10f18     1B 13 02 FB | 	rdlong	arg01, local09
10f1c     1E 37 02 F6 | 	mov	local09, local12
10f20     01 36 06 F1 | 	add	local09, #1
10f24     1B 31 02 F6 | 	mov	local06, local09
10f28     02 30 66 F0 | 	shl	local06, #2
10f2c     A7 26 02 F6 | 	mov	local01, fp
10f30     A7 30 02 F1 | 	add	local06, fp
10f34     18 2F 02 FB | 	rdlong	local05, local06
10f38     17 15 02 F6 | 	mov	arg02, local05
10f3c     1C 4E 85 F1 | 	sub	fp, #28
10f40     24 50 B1 FD | 	call	#__system___string_cmp
10f44     01 FA 55 F2 | 	cmps	result1, #1 wc
10f48     64 00 90 CD |  if_b	jmp	#LR__1386
10f4c     1E 37 02 F6 | 	mov	local09, local12
10f50     01 36 06 F1 | 	add	local09, #1
10f54     02 36 66 F0 | 	shl	local09, #2
10f58     1C 4E 05 F1 | 	add	fp, #28
10f5c     A7 36 02 F1 | 	add	local09, fp
10f60     1B 3B 02 FB | 	rdlong	local11, local09
10f64     1E 31 02 F6 | 	mov	local06, local12
10f68     02 30 66 F0 | 	shl	local06, #2
10f6c     A7 30 02 F1 | 	add	local06, fp
10f70     18 2F 02 FB | 	rdlong	local05, local06
10f74     1E 37 02 F6 | 	mov	local09, local12
10f78     1B 31 02 F6 | 	mov	local06, local09
10f7c     02 30 66 F0 | 	shl	local06, #2
10f80     A7 26 02 F6 | 	mov	local01, fp
10f84     A7 30 02 F1 | 	add	local06, fp
10f88     18 3B 62 FC | 	wrlong	local11, local06
10f8c     1E 29 02 F6 | 	mov	local02, local12
10f90     01 28 06 F1 | 	add	local02, #1
10f94     14 41 02 F6 | 	mov	local14, local02
10f98     02 40 66 F0 | 	shl	local14, #2
10f9c     A7 42 02 F6 | 	mov	local15, fp
10fa0     A7 40 02 F1 | 	add	local14, fp
10fa4     20 2F 62 FC | 	wrlong	local05, local14
10fa8     01 3A 66 F6 | 	neg	local11, #1
10fac     1C 4E 85 F1 | 	sub	fp, #28
10fb0                 | LR__1386
10fb0     01 3C 06 F1 | 	add	local12, #1
10fb4     48 FF 9F FD | 	jmp	#LR__1385
10fb8                 | LR__1387
10fb8                 | ' if not swapped then exit for
10fb8     1D 45 22 F6 | 	not	local16, local11
10fbc     00 44 0E F2 | 	cmp	local16, #0 wz
10fc0     01 2C 06 A1 |  if_e	add	local04, #1
10fc4     1C FF 9F AD |  if_e	jmp	#LR__1384
10fc8                 | LR__1388
10fc8                 | ' for i=0 to n-1
10fc8     00 2C 06 F6 | 	mov	local04, #0
10fcc     1A 47 02 F6 | 	mov	local17, local08
10fd0                 | LR__1389
10fd0     23 2D 52 F2 | 	cmps	local04, local17 wc
10fd4     94 00 90 3D |  if_ae	jmp	#LR__1391
10fd8                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10fd8     00 12 06 F6 | 	mov	arg01, #0
10fdc     04 AC B1 FD | 	call	#__system___getiolock_0600
10fe0     FD 12 02 F6 | 	mov	arg01, result1
10fe4     58 4F B1 FD | 	call	#__system___lockmem
10fe8     16 29 02 F6 | 	mov	local02, local04
10fec     02 28 66 F0 | 	shl	local02, #2
10ff0     1C 4E 05 F1 | 	add	fp, #28
10ff4     A7 40 02 F6 | 	mov	local14, fp
10ff8     A7 28 02 F1 | 	add	local02, fp
10ffc     14 15 02 FB | 	rdlong	arg02, local02
11000     00 26 06 F6 | 	mov	local01, #0
11004     00 12 06 F6 | 	mov	arg01, #0
11008     00 16 06 F6 | 	mov	arg03, #0
1100c     1C 4E 85 F1 | 	sub	fp, #28
11010     24 5C B1 FD | 	call	#__system___basic_print_string
11014     00 12 06 F6 | 	mov	arg01, #0
11018     C8 AB B1 FD | 	call	#__system___getiolock_0600
1101c     FD 00 68 FC | 	wrlong	#0, result1
11020     40 2A 06 F1 | 	add	local03, #64
11024     15 13 02 F6 | 	mov	arg01, local03
11028     BC 31 B1 FD | 	call	#_hg010b_spin2_setcursorx
1102c     00 2B 56 F2 | 	cmps	local03, #256 wc
11030     30 00 90 CD |  if_b	jmp	#LR__1390
11034     00 2A 06 F6 | 	mov	local03, #0
11038     00 12 06 F6 | 	mov	arg01, #0
1103c     A4 AB B1 FD | 	call	#__system___getiolock_0600
11040     FD 12 02 F6 | 	mov	arg01, result1
11044     F8 4E B1 FD | 	call	#__system___lockmem
11048     00 12 06 F6 | 	mov	arg01, #0
1104c     0A 14 06 F6 | 	mov	arg02, #10
11050     00 16 06 F6 | 	mov	arg03, #0
11054     88 5B B1 FD | 	call	#__system___basic_print_char
11058     00 12 06 F6 | 	mov	arg01, #0
1105c     84 AB B1 FD | 	call	#__system___getiolock_0600
11060     FD 00 68 FC | 	wrlong	#0, result1
11064                 | LR__1390
11064     01 2C 06 F1 | 	add	local04, #1
11068     64 FF 9F FD | 	jmp	#LR__1389
1106c                 | LR__1391
1106c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1106c     80 34 56 F2 | 	cmps	local08, #128 wc
11070     44 00 90 CD |  if_b	jmp	#LR__1392
11074     00 12 06 F6 | 	mov	arg01, #0
11078     68 AB B1 FD | 	call	#__system___getiolock_0600
1107c     FD 12 02 F6 | 	mov	arg01, result1
11080     BC 4E B1 FD | 	call	#__system___lockmem
11084     B1 01 00 FF 
11088     3C 15 06 F6 | 	mov	arg02, ##@LR__5857
1108c     00 12 06 F6 | 	mov	arg01, #0
11090     00 16 06 F6 | 	mov	arg03, #0
11094     A0 5B B1 FD | 	call	#__system___basic_print_string
11098     00 12 06 F6 | 	mov	arg01, #0
1109c     0A 14 06 F6 | 	mov	arg02, #10
110a0     00 16 06 F6 | 	mov	arg03, #0
110a4     38 5B B1 FD | 	call	#__system___basic_print_char
110a8     00 12 06 F6 | 	mov	arg01, #0
110ac     34 AB B1 FD | 	call	#__system___getiolock_0600
110b0     FD 00 68 FC | 	wrlong	#0, result1
110b4     00 26 06 F6 | 	mov	local01, #0
110b8                 | LR__1392
110b8                 | ' print
110b8     00 12 06 F6 | 	mov	arg01, #0
110bc     24 AB B1 FD | 	call	#__system___getiolock_0600
110c0     FD 12 02 F6 | 	mov	arg01, result1
110c4     78 4E B1 FD | 	call	#__system___lockmem
110c8     00 12 06 F6 | 	mov	arg01, #0
110cc     0A 14 06 F6 | 	mov	arg02, #10
110d0     00 16 06 F6 | 	mov	arg03, #0
110d4     08 5B B1 FD | 	call	#__system___basic_print_char
110d8     00 12 06 F6 | 	mov	arg01, #0
110dc     04 AB B1 FD | 	call	#__system___getiolock_0600
110e0     FD 00 68 FC | 	wrlong	#0, result1
110e4     00 30 06 F6 | 	mov	local06, #0
110e8     00 34 06 F6 | 	mov	local08, #0
110ec     00 2A 06 F6 | 	mov	local03, #0
110f0                 | ' return cursor_y
110f0     3E E4 05 F1 | 	add	objptr, #62
110f4     F2 48 C2 FA | 	rdbyte	local18, objptr
110f8     3E E4 85 F1 | 	sub	objptr, #62
110fc     B1 01 00 FF 
11100     6E 13 06 F6 | 	mov	arg01, ##@LR__5858
11104     21 14 06 F6 | 	mov	arg02, #33
11108     98 AC B1 FD | 	call	#__system___basic_dir
1110c     FD 32 02 F6 | 	mov	local07, result1
11110                 | ' n=0
11110                 | ' px=0: py=v.getcursory()
11110                 | ' filename = dir$("*", fbNormal )   
11110                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11110                 | LR__1393
11110     B1 01 00 FF 
11114     70 37 06 F6 | 	mov	local09, ##@LR__5859
11118     19 13 02 F6 | 	mov	arg01, local07
1111c     1B 15 02 F6 | 	mov	arg02, local09
11120     44 4E B1 FD | 	call	#__system___string_cmp
11124     00 FA 0D F2 | 	cmp	result1, #0 wz
11128     54 00 90 AD |  if_e	jmp	#LR__1394
1112c     00 36 06 F6 | 	mov	local09, #0
11130     19 13 02 F6 | 	mov	arg01, local07
11134     00 14 06 F6 | 	mov	arg02, #0
11138     2C 4E B1 FD | 	call	#__system___string_cmp
1113c     00 FA 0D F2 | 	cmp	result1, #0 wz
11140     3C 00 90 AD |  if_e	jmp	#LR__1394
11144     80 34 56 F2 | 	cmps	local08, #128 wc
11148     34 00 90 3D |  if_ae	jmp	#LR__1394
1114c     1A 2F 02 F6 | 	mov	local05, local08
11150     02 2E 66 F0 | 	shl	local05, #2
11154     1C 4E 05 F1 | 	add	fp, #28
11158     A7 2E 02 F1 | 	add	local05, fp
1115c     17 33 62 FC | 	wrlong	local07, local05
11160     01 34 06 F1 | 	add	local08, #1
11164     00 2E 06 F6 | 	mov	local05, #0
11168     00 12 06 F6 | 	mov	arg01, #0
1116c     00 14 06 F6 | 	mov	arg02, #0
11170     1C 4E 85 F1 | 	sub	fp, #28
11174     2C AC B1 FD | 	call	#__system___basic_dir
11178     FD 32 02 F6 | 	mov	local07, result1
1117c     90 FF 9F FD | 	jmp	#LR__1393
11180                 | LR__1394
11180                 | ' for i =0 to n-1
11180     00 2C 06 F6 | 	mov	local04, #0
11184                 | LR__1395
11184     1A 2D 52 F2 | 	cmps	local04, local08 wc
11188     D8 00 90 3D |  if_ae	jmp	#LR__1399
1118c     00 3A 06 F6 | 	mov	local11, #0
11190                 | '   swapped=false
11190                 | '   for j=0 to n-i-2
11190     00 3C 06 F6 | 	mov	local12, #0
11194     1A 4B 02 F6 | 	mov	local19, local08
11198     16 4B 82 F1 | 	sub	local19, local04
1119c     01 4A 86 F1 | 	sub	local19, #1
111a0                 | LR__1396
111a0     25 3D 52 F2 | 	cmps	local12, local19 wc
111a4     AC 00 90 3D |  if_ae	jmp	#LR__1398
111a8                 | '     if filelist(j) > filelist(j+1) then
111a8     1E 37 02 F6 | 	mov	local09, local12
111ac     02 36 66 F0 | 	shl	local09, #2
111b0     1C 4E 05 F1 | 	add	fp, #28
111b4     A7 36 02 F1 | 	add	local09, fp
111b8     1B 13 02 FB | 	rdlong	arg01, local09
111bc     1E 37 02 F6 | 	mov	local09, local12
111c0     01 36 06 F1 | 	add	local09, #1
111c4     1B 31 02 F6 | 	mov	local06, local09
111c8     02 30 66 F0 | 	shl	local06, #2
111cc     A7 26 02 F6 | 	mov	local01, fp
111d0     A7 30 02 F1 | 	add	local06, fp
111d4     18 2F 02 FB | 	rdlong	local05, local06
111d8     17 15 02 F6 | 	mov	arg02, local05
111dc     1C 4E 85 F1 | 	sub	fp, #28
111e0     84 4D B1 FD | 	call	#__system___string_cmp
111e4     01 FA 55 F2 | 	cmps	result1, #1 wc
111e8     60 00 90 CD |  if_b	jmp	#LR__1397
111ec     1E 37 02 F6 | 	mov	local09, local12
111f0     01 36 06 F1 | 	add	local09, #1
111f4     02 36 66 F0 | 	shl	local09, #2
111f8     1C 4E 05 F1 | 	add	fp, #28
111fc     A7 36 02 F1 | 	add	local09, fp
11200     1B 45 02 FB | 	rdlong	local16, local09
11204     1E 31 02 F6 | 	mov	local06, local12
11208     02 30 66 F0 | 	shl	local06, #2
1120c     A7 30 02 F1 | 	add	local06, fp
11210     18 2F 02 FB | 	rdlong	local05, local06
11214     1E 37 02 F6 | 	mov	local09, local12
11218     1B 31 02 F6 | 	mov	local06, local09
1121c     02 30 66 F0 | 	shl	local06, #2
11220     A7 26 02 F6 | 	mov	local01, fp
11224     A7 30 02 F1 | 	add	local06, fp
11228     18 45 62 FC | 	wrlong	local16, local06
1122c     1E 41 02 F6 | 	mov	local14, local12
11230     01 40 06 F1 | 	add	local14, #1
11234     02 40 66 F0 | 	shl	local14, #2
11238     A7 42 02 F6 | 	mov	local15, fp
1123c     A7 40 02 F1 | 	add	local14, fp
11240     20 2F 62 FC | 	wrlong	local05, local14
11244     01 3A 66 F6 | 	neg	local11, #1
11248     1C 4E 85 F1 | 	sub	fp, #28
1124c                 | LR__1397
1124c     01 3C 06 F1 | 	add	local12, #1
11250     4C FF 9F FD | 	jmp	#LR__1396
11254                 | LR__1398
11254                 | ' if not swapped then exit for
11254     1D 45 22 F6 | 	not	local16, local11
11258     00 44 0E F2 | 	cmp	local16, #0 wz
1125c     01 2C 06 A1 |  if_e	add	local04, #1
11260     20 FF 9F AD |  if_e	jmp	#LR__1395
11264                 | LR__1399
11264                 | ' for i=0 to n-1
11264     00 2C 06 F6 | 	mov	local04, #0
11268                 | LR__1400
11268     1A 2D 52 F2 | 	cmps	local04, local08 wc
1126c     8C 00 90 3D |  if_ae	jmp	#LR__1402
11270                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11270     00 12 06 F6 | 	mov	arg01, #0
11274     6C A9 B1 FD | 	call	#__system___getiolock_0600
11278     FD 12 02 F6 | 	mov	arg01, result1
1127c     C0 4C B1 FD | 	call	#__system___lockmem
11280     16 29 02 F6 | 	mov	local02, local04
11284     02 28 66 F0 | 	shl	local02, #2
11288     1C 4E 05 F1 | 	add	fp, #28
1128c     A7 28 02 F1 | 	add	local02, fp
11290     14 15 02 FB | 	rdlong	arg02, local02
11294     00 12 06 F6 | 	mov	arg01, #0
11298     00 16 06 F6 | 	mov	arg03, #0
1129c     1C 4E 85 F1 | 	sub	fp, #28
112a0     94 59 B1 FD | 	call	#__system___basic_print_string
112a4     00 12 06 F6 | 	mov	arg01, #0
112a8     38 A9 B1 FD | 	call	#__system___getiolock_0600
112ac     FD 00 68 FC | 	wrlong	#0, result1
112b0     40 2A 06 F1 | 	add	local03, #64
112b4     15 13 02 F6 | 	mov	arg01, local03
112b8     2C 2F B1 FD | 	call	#_hg010b_spin2_setcursorx
112bc     00 2B 56 F2 | 	cmps	local03, #256 wc
112c0     30 00 90 CD |  if_b	jmp	#LR__1401
112c4     00 2A 06 F6 | 	mov	local03, #0
112c8     00 12 06 F6 | 	mov	arg01, #0
112cc     14 A9 B1 FD | 	call	#__system___getiolock_0600
112d0     FD 12 02 F6 | 	mov	arg01, result1
112d4     68 4C B1 FD | 	call	#__system___lockmem
112d8     00 12 06 F6 | 	mov	arg01, #0
112dc     0A 14 06 F6 | 	mov	arg02, #10
112e0     00 16 06 F6 | 	mov	arg03, #0
112e4     F8 58 B1 FD | 	call	#__system___basic_print_char
112e8     00 12 06 F6 | 	mov	arg01, #0
112ec     F4 A8 B1 FD | 	call	#__system___getiolock_0600
112f0     FD 00 68 FC | 	wrlong	#0, result1
112f4                 | LR__1401
112f4     01 2C 06 F1 | 	add	local04, #1
112f8     6C FF 9F FD | 	jmp	#LR__1400
112fc                 | LR__1402
112fc                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
112fc     80 34 56 F2 | 	cmps	local08, #128 wc
11300     40 00 90 CD |  if_b	jmp	#LR__1403
11304     00 12 06 F6 | 	mov	arg01, #0
11308     D8 A8 B1 FD | 	call	#__system___getiolock_0600
1130c     FD 12 02 F6 | 	mov	arg01, result1
11310     2C 4C B1 FD | 	call	#__system___lockmem
11314     B1 01 00 FF 
11318     71 15 06 F6 | 	mov	arg02, ##@LR__5860
1131c     00 12 06 F6 | 	mov	arg01, #0
11320     00 16 06 F6 | 	mov	arg03, #0
11324     10 59 B1 FD | 	call	#__system___basic_print_string
11328     00 12 06 F6 | 	mov	arg01, #0
1132c     0A 14 06 F6 | 	mov	arg02, #10
11330     00 16 06 F6 | 	mov	arg03, #0
11334     A8 58 B1 FD | 	call	#__system___basic_print_char
11338     00 12 06 F6 | 	mov	arg01, #0
1133c     A4 A8 B1 FD | 	call	#__system___getiolock_0600
11340     FD 00 68 FC | 	wrlong	#0, result1
11344                 | LR__1403
11344                 | ' print
11344     00 12 06 F6 | 	mov	arg01, #0
11348     98 A8 B1 FD | 	call	#__system___getiolock_0600
1134c     FD 12 02 F6 | 	mov	arg01, result1
11350     EC 4B B1 FD | 	call	#__system___lockmem
11354     00 12 06 F6 | 	mov	arg01, #0
11358     0A 14 06 F6 | 	mov	arg02, #10
1135c     00 16 06 F6 | 	mov	arg03, #0
11360     7C 58 B1 FD | 	call	#__system___basic_print_char
11364     00 12 06 F6 | 	mov	arg01, #0
11368     78 A8 B1 FD | 	call	#__system___getiolock_0600
1136c     FD 00 68 FC | 	wrlong	#0, result1
11370     A7 F0 03 F6 | 	mov	ptra, fp
11374     B2 00 A0 FD | 	call	#popregs_
11378                 | _do_dir_ret
11378     2D 00 64 FD | 	ret
1137c                 | 
1137c                 | ' 
1137c                 | ' '-------------------- dpeek
1137c                 | ' 
1137c                 | ' sub do_dpeek
1137c                 | _do_dpeek
1137c     00 4A 05 F6 | 	mov	COUNT_, #0
11380     A8 00 A0 FD | 	call	#pushregs_
11384     14 F0 07 F1 | 	add	ptra, #20
11388     54 BF BF FD | 	call	#_pop
1138c     A7 FA 61 FC | 	wrlong	result1, fp
11390     04 4E 05 F1 | 	add	fp, #4
11394     A7 FC 61 FC | 	wrlong	result2, fp
11398     04 4E 05 F1 | 	add	fp, #4
1139c     A7 FE 61 FC | 	wrlong	result3, fp
113a0     08 4E 85 F1 | 	sub	fp, #8
113a4     A7 12 02 F6 | 	mov	arg01, fp
113a8     18 C1 BF FD | 	call	#_converttoint
113ac     0C 4E 05 F1 | 	add	fp, #12
113b0     A7 FA 61 FC | 	wrlong	result1, fp
113b4                 | ' 
113b4                 | ' t1=pop()
113b4                 | ' a=converttoint(t1)
113b4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
113b4     0C 4E 85 F1 | 	sub	fp, #12
113b8     00 04 00 FF 
113bc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
113c0     1C 00 90 3D |  if_ae	jmp	#LR__1410
113c4     0C 4E 05 F1 | 	add	fp, #12
113c8     A7 12 02 FB | 	rdlong	arg01, fp
113cc     09 FB E1 FA | 	rdword	result1, arg01
113d0     04 4E 05 F1 | 	add	fp, #4
113d4     A7 FA 61 FC | 	wrlong	result1, fp
113d8     10 4E 85 F1 | 	sub	fp, #16
113dc     1C 00 90 FD | 	jmp	#LR__1411
113e0                 | LR__1410
113e0     0C 4E 05 F1 | 	add	fp, #12
113e4     A7 12 02 FB | 	rdlong	arg01, fp
113e8     0C 4E 85 F1 | 	sub	fp, #12
113ec     88 14 B1 FD | 	call	#_psdpeek
113f0     10 4E 05 F1 | 	add	fp, #16
113f4     A7 FA 61 FC | 	wrlong	result1, fp
113f8     10 4E 85 F1 | 	sub	fp, #16
113fc                 | LR__1411
113fc     08 4E 05 F1 | 	add	fp, #8
11400     A7 3A 68 FC | 	wrlong	#29, fp
11404     08 4E 05 F1 | 	add	fp, #8
11408     A7 12 02 FB | 	rdlong	arg01, fp
1140c     10 4E 85 F1 | 	sub	fp, #16
11410     A7 12 62 FC | 	wrlong	arg01, fp
11414     A7 12 02 F6 | 	mov	arg01, fp
11418     5C BF BF FD | 	call	#_push
1141c     A7 F0 03 F6 | 	mov	ptra, fp
11420     B2 00 A0 FD | 	call	#popregs_
11424                 | _do_dpeek_ret
11424     2D 00 64 FD | 	ret
11428                 | 
11428                 | ' 
11428                 | ' '-------------------- dpoke
11428                 | ' 
11428                 | ' sub do_dpoke
11428                 | _do_dpoke
11428     01 4A 05 F6 | 	mov	COUNT_, #1
1142c     A8 00 A0 FD | 	call	#pushregs_
11430     20 F0 07 F1 | 	add	ptra, #32
11434     A8 BE BF FD | 	call	#_pop
11438     FD 14 02 F6 | 	mov	arg02, result1
1143c     FE 12 02 F6 | 	mov	arg01, result2
11440     FF 26 02 F6 | 	mov	local01, result3
11444     A7 14 62 FC | 	wrlong	arg02, fp
11448     04 4E 05 F1 | 	add	fp, #4
1144c     A7 12 62 FC | 	wrlong	arg01, fp
11450     04 4E 05 F1 | 	add	fp, #4
11454     A7 26 62 FC | 	wrlong	local01, fp
11458     08 4E 85 F1 | 	sub	fp, #8
1145c     80 BE BF FD | 	call	#_pop
11460     FF 26 02 F6 | 	mov	local01, result3
11464     0C 4E 05 F1 | 	add	fp, #12
11468     A7 FA 61 FC | 	wrlong	result1, fp
1146c     04 4E 05 F1 | 	add	fp, #4
11470     A7 FC 61 FC | 	wrlong	result2, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 26 62 FC | 	wrlong	local01, fp
1147c     08 4E 85 F1 | 	sub	fp, #8
11480     A7 12 02 F6 | 	mov	arg01, fp
11484     0C 4E 85 F1 | 	sub	fp, #12
11488     38 C0 BF FD | 	call	#_converttoint
1148c     18 4E 05 F1 | 	add	fp, #24
11490     A7 FA 61 FC | 	wrlong	result1, fp
11494     18 4E 85 F1 | 	sub	fp, #24
11498     A7 12 02 F6 | 	mov	arg01, fp
1149c     24 C0 BF FD | 	call	#_converttoint
114a0     1C 4E 05 F1 | 	add	fp, #28
114a4     A7 FA 61 FC | 	wrlong	result1, fp
114a8                 | ' 
114a8                 | ' t1=pop() 'value
114a8                 | ' t2=pop() 
114a8                 | ' a=converttoint(t2) : v=converttoint(t1)
114a8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
114a8     04 4E 85 F1 | 	sub	fp, #4
114ac     A7 26 02 FB | 	rdlong	local01, fp
114b0     18 4E 85 F1 | 	sub	fp, #24
114b4     00 04 00 FF 
114b8     00 26 16 F2 | 	cmp	local01, ##524288 wc
114bc     1C 00 90 3D |  if_ae	jmp	#LR__1420
114c0     18 4E 05 F1 | 	add	fp, #24
114c4     A7 12 02 FB | 	rdlong	arg01, fp
114c8     04 4E 05 F1 | 	add	fp, #4
114cc     A7 14 02 FB | 	rdlong	arg02, fp
114d0     1C 4E 85 F1 | 	sub	fp, #28
114d4     09 15 52 FC | 	wrword	arg02, arg01
114d8     18 00 90 FD | 	jmp	#LR__1421
114dc                 | LR__1420
114dc     18 4E 05 F1 | 	add	fp, #24
114e0     A7 12 02 FB | 	rdlong	arg01, fp
114e4     04 4E 05 F1 | 	add	fp, #4
114e8     A7 14 02 FB | 	rdlong	arg02, fp
114ec     1C 4E 85 F1 | 	sub	fp, #28
114f0     44 12 B1 FD | 	call	#_psdpoke
114f4                 | LR__1421
114f4     A7 F0 03 F6 | 	mov	ptra, fp
114f8     B2 00 A0 FD | 	call	#popregs_
114fc                 | _do_dpoke_ret
114fc     2D 00 64 FD | 	ret
11500                 | 
11500                 | ' '-------------------- draw
11500                 | ' 
11500                 | ' sub do_draw
11500                 | _do_draw
11500     00 4A 05 F6 | 	mov	COUNT_, #0
11504     A8 00 A0 FD | 	call	#pushregs_
11508     20 F0 07 F1 | 	add	ptra, #32
1150c     D0 BD BF FD | 	call	#_pop
11510     FD 1A 02 F6 | 	mov	arg05, result1
11514     FE 18 02 F6 | 	mov	arg04, result2
11518     FF 16 02 F6 | 	mov	arg03, result3
1151c     0C 4E 05 F1 | 	add	fp, #12
11520     A7 1A 62 FC | 	wrlong	arg05, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 18 62 FC | 	wrlong	arg04, fp
1152c     04 4E 05 F1 | 	add	fp, #4
11530     A7 16 62 FC | 	wrlong	arg03, fp
11534     14 4E 85 F1 | 	sub	fp, #20
11538     A4 BD BF FD | 	call	#_pop
1153c     FF 1A 02 F6 | 	mov	arg05, result3
11540     A7 FA 61 FC | 	wrlong	result1, fp
11544     04 4E 05 F1 | 	add	fp, #4
11548     A7 FC 61 FC | 	wrlong	result2, fp
1154c     04 4E 05 F1 | 	add	fp, #4
11550     A7 1A 62 FC | 	wrlong	arg05, fp
11554     08 4E 85 F1 | 	sub	fp, #8
11558     A7 12 02 F6 | 	mov	arg01, fp
1155c     64 BF BF FD | 	call	#_converttoint
11560     18 4E 05 F1 | 	add	fp, #24
11564     A7 FA 61 FC | 	wrlong	result1, fp
11568     0C 4E 85 F1 | 	sub	fp, #12
1156c     A7 12 02 F6 | 	mov	arg01, fp
11570     0C 4E 85 F1 | 	sub	fp, #12
11574     4C BF BF FD | 	call	#_converttoint
11578     1C 4E 05 F1 | 	add	fp, #28
1157c     A7 FA 61 FC | 	wrlong	result1, fp
11580     37 00 00 FF 
11584     2C E4 05 F1 | 	add	objptr, ##28204
11588     F2 12 02 FB | 	rdlong	arg01, objptr
1158c     04 E4 05 F1 | 	add	objptr, #4
11590     F2 14 02 FB | 	rdlong	arg02, objptr
11594     04 4E 85 F1 | 	sub	fp, #4
11598     A7 16 02 FB | 	rdlong	arg03, fp
1159c     FD 18 02 F6 | 	mov	arg04, result1
115a0     18 4E 85 F1 | 	sub	fp, #24
115a4     08 E4 85 F1 | 	sub	objptr, #8
115a8     F2 1A 02 FB | 	rdlong	arg05, objptr
115ac     37 00 00 FF 
115b0     28 E4 85 F1 | 	sub	objptr, ##28200
115b4     E0 22 B1 FD | 	call	#_hg010b_spin2_draw
115b8     18 4E 05 F1 | 	add	fp, #24
115bc     A7 1A 02 FB | 	rdlong	arg05, fp
115c0     37 00 00 FF 
115c4     2C E4 05 F1 | 	add	objptr, ##28204
115c8     F2 1A 62 FC | 	wrlong	arg05, objptr
115cc     04 4E 05 F1 | 	add	fp, #4
115d0     A7 1A 02 FB | 	rdlong	arg05, fp
115d4     1C 4E 85 F1 | 	sub	fp, #28
115d8     04 E4 05 F1 | 	add	objptr, #4
115dc     F2 1A 62 FC | 	wrlong	arg05, objptr
115e0     37 00 00 FF 
115e4     30 E4 85 F1 | 	sub	objptr, ##28208
115e8     A7 F0 03 F6 | 	mov	ptra, fp
115ec     B2 00 A0 FD | 	call	#popregs_
115f0                 | _do_draw_ret
115f0     2D 00 64 FD | 	ret
115f4                 | 
115f4                 | ' 
115f4                 | ' '-------------------- else
115f4                 | ' 
115f4                 | ' sub do_else
115f4                 | _do_else
115f4     4A 00 00 FF 
115f8     7C E4 05 F1 | 	add	objptr, ##38012
115fc     F2 00 02 FB | 	rdlong	_var01, objptr
11600     01 00 86 F1 | 	sub	_var01, #1
11604     04 E4 05 F1 | 	add	objptr, #4
11608     F2 00 62 FC | 	wrlong	_var01, objptr
1160c     4A 00 00 FF 
11610     80 E4 85 F1 | 	sub	objptr, ##38016
11614                 | _do_else_ret
11614     2D 00 64 FD | 	ret
11618                 | 
11618                 | ' 
11618                 | ' '-------------------- end
11618                 | ' 
11618                 | ' sub do_end
11618                 | _do_end
11618     4A 00 00 FF 
1161c     7C E4 05 F1 | 	add	objptr, ##38012
11620     F2 00 02 FB | 	rdlong	_var01, objptr
11624     01 00 86 F1 | 	sub	_var01, #1
11628     04 E4 05 F1 | 	add	objptr, #4
1162c     F2 00 62 FC | 	wrlong	_var01, objptr
11630     06 00 00 FF 
11634     38 E4 05 F1 | 	add	objptr, ##3128
11638     FF FF BF FF 
1163c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11640     50 00 00 FF 
11644     B8 E4 85 F1 | 	sub	objptr, ##41144
11648                 | _do_end_ret
11648     2D 00 64 FD | 	ret
1164c                 | 
1164c                 | ' 
1164c                 | ' '-------------------- enter
1164c                 | ' 
1164c                 | ' sub do_enter
1164c                 | _do_enter
1164c     02 00 00 FF 
11650     D2 12 06 F6 | 	mov	arg01, ##1234
11654     A0 2E B0 FD | 	call	#_do_load
11658                 | _do_enter_ret
11658     2D 00 64 FD | 	ret
1165c                 | 
1165c                 | ' 
1165c                 | ' '------------------- error processing
1165c                 | ' 
1165c                 | ' sub do_error
1165c                 | _do_error
1165c     01 4A 05 F6 | 	mov	COUNT_, #1
11660     A8 00 A0 FD | 	call	#pushregs_
11664     4A 00 00 FF 
11668     80 E4 05 F1 | 	add	objptr, ##38016
1166c     F2 18 02 FB | 	rdlong	arg04, objptr
11670     0C 17 02 F6 | 	mov	arg03, arg04
11674     01 16 66 F0 | 	shl	arg03, #1
11678     0C 17 02 F1 | 	add	arg03, arg04
1167c     02 16 66 F0 | 	shl	arg03, #2
11680     03 00 00 FF 
11684     04 E4 85 F1 | 	sub	objptr, ##1540
11688     F2 16 02 F1 | 	add	arg03, objptr
1168c     0B 27 02 FB | 	rdlong	local01, arg03
11690                 | ' r=compiledline(lineptr_e).result.uresult
11690                 | ' print "Error ";r;": ";errors$(r)
11690     00 12 06 F6 | 	mov	arg01, #0
11694     47 00 00 FF 
11698     7C E4 85 F1 | 	sub	objptr, ##36476
1169c     44 A5 B1 FD | 	call	#__system___getiolock_0600
116a0     FD 12 02 F6 | 	mov	arg01, result1
116a4     98 48 B1 FD | 	call	#__system___lockmem
116a8     B1 01 00 FF 
116ac     A3 15 06 F6 | 	mov	arg02, ##@LR__5861
116b0     00 12 06 F6 | 	mov	arg01, #0
116b4     00 16 06 F6 | 	mov	arg03, #0
116b8     7C 55 B1 FD | 	call	#__system___basic_print_string
116bc     00 12 06 F6 | 	mov	arg01, #0
116c0     13 15 02 F6 | 	mov	arg02, local01
116c4     00 16 06 F6 | 	mov	arg03, #0
116c8     0A 18 06 F6 | 	mov	arg04, #10
116cc     EC 55 B1 FD | 	call	#__system___basic_print_unsigned
116d0     B1 01 00 FF 
116d4     AA 15 06 F6 | 	mov	arg02, ##@LR__5862
116d8     00 12 06 F6 | 	mov	arg01, #0
116dc     00 16 06 F6 | 	mov	arg03, #0
116e0     54 55 B1 FD | 	call	#__system___basic_print_string
116e4     02 26 66 F0 | 	shl	local01, #2
116e8     45 00 00 FF 
116ec     7C E4 05 F1 | 	add	objptr, ##35452
116f0     F2 26 02 F1 | 	add	local01, objptr
116f4     13 15 02 FB | 	rdlong	arg02, local01
116f8     00 12 06 F6 | 	mov	arg01, #0
116fc     00 16 06 F6 | 	mov	arg03, #0
11700     45 00 00 FF 
11704     7C E4 85 F1 | 	sub	objptr, ##35452
11708     2C 55 B1 FD | 	call	#__system___basic_print_string
1170c     00 12 06 F6 | 	mov	arg01, #0
11710     0A 14 06 F6 | 	mov	arg02, #10
11714     00 16 06 F6 | 	mov	arg03, #0
11718     C4 54 B1 FD | 	call	#__system___basic_print_char
1171c     00 12 06 F6 | 	mov	arg01, #0
11720     C0 A4 B1 FD | 	call	#__system___getiolock_0600
11724     FD 00 68 FC | 	wrlong	#0, result1
11728     A7 F0 03 F6 | 	mov	ptra, fp
1172c     B2 00 A0 FD | 	call	#popregs_
11730                 | _do_error_ret
11730     2D 00 64 FD | 	ret
11734                 | 
11734                 | ' 
11734                 | ' '-------------------- fcircle
11734                 | ' 
11734                 | ' sub do_fcircle
11734                 | _do_fcircle
11734     02 4A 05 F6 | 	mov	COUNT_, #2
11738     A8 00 A0 FD | 	call	#pushregs_
1173c     24 F0 07 F1 | 	add	ptra, #36
11740     9C BB BF FD | 	call	#_pop
11744     FD 14 02 F6 | 	mov	arg02, result1
11748     FE 18 02 F6 | 	mov	arg04, result2
1174c     FF 16 02 F6 | 	mov	arg03, result3
11750     18 4E 05 F1 | 	add	fp, #24
11754     A7 14 62 FC | 	wrlong	arg02, fp
11758     04 4E 05 F1 | 	add	fp, #4
1175c     A7 18 62 FC | 	wrlong	arg04, fp
11760     04 4E 05 F1 | 	add	fp, #4
11764     A7 16 62 FC | 	wrlong	arg03, fp
11768     20 4E 85 F1 | 	sub	fp, #32
1176c     70 BB BF FD | 	call	#_pop
11770     FD 14 02 F6 | 	mov	arg02, result1
11774     FE 18 02 F6 | 	mov	arg04, result2
11778     FF 16 02 F6 | 	mov	arg03, result3
1177c     0C 4E 05 F1 | 	add	fp, #12
11780     A7 14 62 FC | 	wrlong	arg02, fp
11784     04 4E 05 F1 | 	add	fp, #4
11788     A7 18 62 FC | 	wrlong	arg04, fp
1178c     04 4E 05 F1 | 	add	fp, #4
11790     A7 16 62 FC | 	wrlong	arg03, fp
11794     14 4E 85 F1 | 	sub	fp, #20
11798     44 BB BF FD | 	call	#_pop
1179c     FF 14 02 F6 | 	mov	arg02, result3
117a0     A7 FA 61 FC | 	wrlong	result1, fp
117a4     04 4E 05 F1 | 	add	fp, #4
117a8     A7 FC 61 FC | 	wrlong	result2, fp
117ac     04 4E 05 F1 | 	add	fp, #4
117b0     A7 14 62 FC | 	wrlong	arg02, fp
117b4     08 4E 85 F1 | 	sub	fp, #8
117b8     A7 12 02 F6 | 	mov	arg01, fp
117bc     04 BD BF FD | 	call	#_converttoint
117c0     FD 26 02 F6 | 	mov	local01, result1
117c4     0C 4E 05 F1 | 	add	fp, #12
117c8     A7 12 02 F6 | 	mov	arg01, fp
117cc     0C 4E 85 F1 | 	sub	fp, #12
117d0     F0 BC BF FD | 	call	#_converttoint
117d4     FD 28 02 F6 | 	mov	local02, result1
117d8     18 4E 05 F1 | 	add	fp, #24
117dc     A7 12 02 F6 | 	mov	arg01, fp
117e0     18 4E 85 F1 | 	sub	fp, #24
117e4     DC BC BF FD | 	call	#_converttoint
117e8     FD 16 02 F6 | 	mov	arg03, result1
117ec     37 00 00 FF 
117f0     28 E4 05 F1 | 	add	objptr, ##28200
117f4     F2 18 02 FB | 	rdlong	arg04, objptr
117f8     37 00 00 FF 
117fc     28 E4 85 F1 | 	sub	objptr, ##28200
11800     13 13 02 F6 | 	mov	arg01, local01
11804     14 15 02 F6 | 	mov	arg02, local02
11808     10 25 B1 FD | 	call	#_hg010b_spin2_fcircle
1180c     A7 F0 03 F6 | 	mov	ptra, fp
11810     B2 00 A0 FD | 	call	#popregs_
11814                 | _do_fcircle_ret
11814     2D 00 64 FD | 	ret
11818                 | 
11818                 | ' 
11818                 | ' '-------------------- fill
11818                 | ' 
11818                 | ' sub do_fill
11818                 | _do_fill
11818     03 4A 05 F6 | 	mov	COUNT_, #3
1181c     A8 00 A0 FD | 	call	#pushregs_
11820     30 F0 07 F1 | 	add	ptra, #48
11824     B8 BA BF FD | 	call	#_pop
11828     FD 16 02 F6 | 	mov	arg03, result1
1182c     FE 14 02 F6 | 	mov	arg02, result2
11830     FF 18 02 F6 | 	mov	arg04, result3
11834     24 4E 05 F1 | 	add	fp, #36
11838     A7 16 62 FC | 	wrlong	arg03, fp
1183c     04 4E 05 F1 | 	add	fp, #4
11840     A7 14 62 FC | 	wrlong	arg02, fp
11844     04 4E 05 F1 | 	add	fp, #4
11848     A7 18 62 FC | 	wrlong	arg04, fp
1184c     2C 4E 85 F1 | 	sub	fp, #44
11850     8C BA BF FD | 	call	#_pop
11854     FD 16 02 F6 | 	mov	arg03, result1
11858     FE 14 02 F6 | 	mov	arg02, result2
1185c     FF 18 02 F6 | 	mov	arg04, result3
11860     18 4E 05 F1 | 	add	fp, #24
11864     A7 16 62 FC | 	wrlong	arg03, fp
11868     04 4E 05 F1 | 	add	fp, #4
1186c     A7 14 62 FC | 	wrlong	arg02, fp
11870     04 4E 05 F1 | 	add	fp, #4
11874     A7 18 62 FC | 	wrlong	arg04, fp
11878     20 4E 85 F1 | 	sub	fp, #32
1187c     60 BA BF FD | 	call	#_pop
11880     FD 16 02 F6 | 	mov	arg03, result1
11884     FE 14 02 F6 | 	mov	arg02, result2
11888     FF 18 02 F6 | 	mov	arg04, result3
1188c     0C 4E 05 F1 | 	add	fp, #12
11890     A7 16 62 FC | 	wrlong	arg03, fp
11894     04 4E 05 F1 | 	add	fp, #4
11898     A7 14 62 FC | 	wrlong	arg02, fp
1189c     04 4E 05 F1 | 	add	fp, #4
118a0     A7 18 62 FC | 	wrlong	arg04, fp
118a4     14 4E 85 F1 | 	sub	fp, #20
118a8     34 BA BF FD | 	call	#_pop
118ac     FF 16 02 F6 | 	mov	arg03, result3
118b0     A7 FA 61 FC | 	wrlong	result1, fp
118b4     04 4E 05 F1 | 	add	fp, #4
118b8     A7 FC 61 FC | 	wrlong	result2, fp
118bc     04 4E 05 F1 | 	add	fp, #4
118c0     A7 16 62 FC | 	wrlong	arg03, fp
118c4     08 4E 85 F1 | 	sub	fp, #8
118c8     A7 12 02 F6 | 	mov	arg01, fp
118cc     F4 BB BF FD | 	call	#_converttoint
118d0     FD 26 02 F6 | 	mov	local01, result1
118d4     0C 4E 05 F1 | 	add	fp, #12
118d8     A7 12 02 F6 | 	mov	arg01, fp
118dc     0C 4E 85 F1 | 	sub	fp, #12
118e0     E0 BB BF FD | 	call	#_converttoint
118e4     FD 28 02 F6 | 	mov	local02, result1
118e8     18 4E 05 F1 | 	add	fp, #24
118ec     A7 12 02 F6 | 	mov	arg01, fp
118f0     18 4E 85 F1 | 	sub	fp, #24
118f4     CC BB BF FD | 	call	#_converttoint
118f8     FD 2A 02 F6 | 	mov	local03, result1
118fc     24 4E 05 F1 | 	add	fp, #36
11900     A7 12 02 F6 | 	mov	arg01, fp
11904     24 4E 85 F1 | 	sub	fp, #36
11908     B8 BB BF FD | 	call	#_converttoint
1190c     FD 18 02 F6 | 	mov	arg04, result1
11910     13 13 02 F6 | 	mov	arg01, local01
11914     14 15 02 F6 | 	mov	arg02, local02
11918     15 17 02 F6 | 	mov	arg03, local03
1191c     68 21 B1 FD | 	call	#_hg010b_spin2_fill
11920     A7 F0 03 F6 | 	mov	ptra, fp
11924     B2 00 A0 FD | 	call	#popregs_
11928                 | _do_fill_ret
11928     2D 00 64 FD | 	ret
1192c                 | 
1192c                 | ' 
1192c                 | ' '-------------------- font
1192c                 | ' 
1192c                 | ' sub do_font
1192c                 | _do_font
1192c     03 4A 05 F6 | 	mov	COUNT_, #3
11930     A8 00 A0 FD | 	call	#pushregs_
11934     A8 B9 BF FD | 	call	#_pop
11938     FD 26 02 F6 | 	mov	local01, result1
1193c     FE 28 02 F6 | 	mov	local02, result2
11940     FF 2A 02 F6 | 	mov	local03, result3
11944                 | ' 
11944                 | ' t1=pop() 
11944                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
11944     1E 2A 0E F2 | 	cmp	local03, #30 wz
11948     10 00 90 5D |  if_ne	jmp	#LR__1430
1194c     13 13 02 F6 | 	mov	arg01, local01
11950     00 14 06 F6 | 	mov	arg02, #0
11954     2C 79 B1 FD | 	call	#__system___float_tointeger
11958     FD 26 02 F6 | 	mov	local01, result1
1195c                 | LR__1430
1195c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1195c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11960     18 00 90 5D |  if_ne	jmp	#LR__1431
11964     13 13 02 F6 | 	mov	arg01, local01
11968     5C 7C B1 FD | 	call	#__system____builtin_atof
1196c     FD 12 02 F6 | 	mov	arg01, result1
11970     00 14 06 F6 | 	mov	arg02, #0
11974     0C 79 B1 FD | 	call	#__system___float_tointeger
11978     FD 26 02 F6 | 	mov	local01, result1
1197c                 | LR__1431
1197c     37 00 00 FF 
11980     40 E4 05 F1 | 	add	objptr, ##28224
11984     F2 26 62 FC | 	wrlong	local01, objptr
11988     37 00 00 FF 
1198c     40 E4 85 F1 | 	sub	objptr, ##28224
11990     02 26 66 F0 | 	shl	local01, #2
11994     13 13 02 F6 | 	mov	arg01, local01
11998     D0 27 B1 FD | 	call	#_hg010b_spin2_setfontfamily
1199c     A7 F0 03 F6 | 	mov	ptra, fp
119a0     B2 00 A0 FD | 	call	#popregs_
119a4                 | _do_font_ret
119a4     2D 00 64 FD | 	ret
119a8                 | 
119a8                 | ' 
119a8                 | ' '-------------------- for
119a8                 | ' 
119a8                 | ' sub do_for()
119a8                 | _do_for
119a8     01 4A 05 F6 | 	mov	COUNT_, #1
119ac     A8 00 A0 FD | 	call	#pushregs_
119b0     10 F0 07 F1 | 	add	ptra, #16
119b4     50 00 00 FF 
119b8     30 E5 05 F1 | 	add	objptr, ##41264
119bc     F2 12 02 FB | 	rdlong	arg01, objptr
119c0     01 12 06 F1 | 	add	arg01, #1
119c4     F2 12 62 FC | 	wrlong	arg01, objptr
119c8     50 00 00 FF 
119cc     30 E5 85 F1 | 	sub	objptr, ##41264
119d0     0C B9 BF FD | 	call	#_pop
119d4     A7 FA 61 FC | 	wrlong	result1, fp
119d8     04 4E 05 F1 | 	add	fp, #4
119dc     A7 FC 61 FC | 	wrlong	result2, fp
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 FE 61 FC | 	wrlong	result3, fp
119e8     08 4E 85 F1 | 	sub	fp, #8
119ec     50 00 00 FF 
119f0     30 E5 05 F1 | 	add	objptr, ##41264
119f4     F2 12 02 FB | 	rdlong	arg01, objptr
119f8     09 27 02 F6 | 	mov	local01, arg01
119fc     02 26 66 F0 | 	shl	local01, #2
11a00     09 27 02 F1 | 	add	local01, arg01
11a04     02 26 66 F0 | 	shl	local01, #2
11a08     06 00 00 FF 
11a0c     98 E4 85 F1 | 	sub	objptr, ##3224
11a10     F2 26 02 F1 | 	add	local01, objptr
11a14     A7 12 02 FB | 	rdlong	arg01, fp
11a18     08 26 06 F1 | 	add	local01, #8
11a1c     13 13 62 FC | 	wrlong	arg01, local01
11a20     4A 00 00 FF 
11a24     98 E4 85 F1 | 	sub	objptr, ##38040
11a28     B4 B8 BF FD | 	call	#_pop
11a2c     A7 FA 61 FC | 	wrlong	result1, fp
11a30     04 4E 05 F1 | 	add	fp, #4
11a34     A7 FC 61 FC | 	wrlong	result2, fp
11a38     04 4E 05 F1 | 	add	fp, #4
11a3c     A7 FE 61 FC | 	wrlong	result3, fp
11a40     08 4E 85 F1 | 	sub	fp, #8
11a44     50 00 00 FF 
11a48     30 E5 05 F1 | 	add	objptr, ##41264
11a4c     F2 12 02 FB | 	rdlong	arg01, objptr
11a50     09 27 02 F6 | 	mov	local01, arg01
11a54     02 26 66 F0 | 	shl	local01, #2
11a58     09 27 02 F1 | 	add	local01, arg01
11a5c     02 26 66 F0 | 	shl	local01, #2
11a60     06 00 00 FF 
11a64     98 E4 85 F1 | 	sub	objptr, ##3224
11a68     F2 26 02 F1 | 	add	local01, objptr
11a6c     A7 12 02 F6 | 	mov	arg01, fp
11a70     4A 00 00 FF 
11a74     98 E4 85 F1 | 	sub	objptr, ##38040
11a78     48 BA BF FD | 	call	#_converttoint
11a7c     FD 12 02 F6 | 	mov	arg01, result1
11a80     0C 26 06 F1 | 	add	local01, #12
11a84     13 13 62 FC | 	wrlong	arg01, local01
11a88     54 B8 BF FD | 	call	#_pop
11a8c     A7 FA 61 FC | 	wrlong	result1, fp
11a90     04 4E 05 F1 | 	add	fp, #4
11a94     A7 FC 61 FC | 	wrlong	result2, fp
11a98     04 4E 05 F1 | 	add	fp, #4
11a9c     A7 FE 61 FC | 	wrlong	result3, fp
11aa0     08 4E 85 F1 | 	sub	fp, #8
11aa4     50 00 00 FF 
11aa8     30 E5 05 F1 | 	add	objptr, ##41264
11aac     F2 12 02 FB | 	rdlong	arg01, objptr
11ab0     09 27 02 F6 | 	mov	local01, arg01
11ab4     02 26 66 F0 | 	shl	local01, #2
11ab8     09 27 02 F1 | 	add	local01, arg01
11abc     02 26 66 F0 | 	shl	local01, #2
11ac0     06 00 00 FF 
11ac4     98 E4 85 F1 | 	sub	objptr, ##3224
11ac8     F2 26 02 F1 | 	add	local01, objptr
11acc     A7 12 02 F6 | 	mov	arg01, fp
11ad0     4A 00 00 FF 
11ad4     98 E4 85 F1 | 	sub	objptr, ##38040
11ad8     E8 B9 BF FD | 	call	#_converttoint
11adc     10 26 06 F1 | 	add	local01, #16
11ae0     13 FB 61 FC | 	wrlong	result1, local01
11ae4                 | ' fortop+=1
11ae4                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
11ae4                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
11ae4                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
11ae4                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
11ae4     4A 00 00 FF 
11ae8     80 E4 05 F1 | 	add	objptr, ##38016
11aec     F2 12 02 FB | 	rdlong	arg01, objptr
11af0     09 27 02 F6 | 	mov	local01, arg01
11af4     01 26 66 F0 | 	shl	local01, #1
11af8     09 27 02 F1 | 	add	local01, arg01
11afc     02 26 66 F0 | 	shl	local01, #2
11b00     03 00 00 FF 
11b04     04 E4 85 F1 | 	sub	objptr, ##1540
11b08     F2 26 02 F1 | 	add	local01, objptr
11b0c     08 26 06 F1 | 	add	local01, #8
11b10     13 27 02 FB | 	rdlong	local01, local01
11b14     FE 27 0E F2 | 	cmp	local01, #510 wz
11b18     47 00 00 FF 
11b1c     7C E4 85 F1 | 	sub	objptr, ##36476
11b20     70 00 90 5D |  if_ne	jmp	#LR__1440
11b24     50 00 00 FF 
11b28     30 E5 05 F1 | 	add	objptr, ##41264
11b2c     F2 12 02 FB | 	rdlong	arg01, objptr
11b30     09 27 02 F6 | 	mov	local01, arg01
11b34     02 26 66 F0 | 	shl	local01, #2
11b38     09 27 02 F1 | 	add	local01, arg01
11b3c     02 26 66 F0 | 	shl	local01, #2
11b40     06 00 00 FF 
11b44     98 E4 85 F1 | 	sub	objptr, ##3224
11b48     F2 26 02 F1 | 	add	local01, objptr
11b4c     06 00 00 FF 
11b50     20 E4 05 F1 | 	add	objptr, ##3104
11b54     F2 12 02 FB | 	rdlong	arg01, objptr
11b58     13 13 62 FC | 	wrlong	arg01, local01
11b5c     78 E4 05 F1 | 	add	objptr, #120
11b60     F2 12 02 FB | 	rdlong	arg01, objptr
11b64     09 27 02 F6 | 	mov	local01, arg01
11b68     02 26 66 F0 | 	shl	local01, #2
11b6c     09 27 02 F1 | 	add	local01, arg01
11b70     02 26 66 F0 | 	shl	local01, #2
11b74     06 00 00 FF 
11b78     98 E4 85 F1 | 	sub	objptr, ##3224
11b7c     F2 26 02 F1 | 	add	local01, objptr
11b80     04 26 06 F1 | 	add	local01, #4
11b84     13 01 68 FC | 	wrlong	#0, local01
11b88     4A 00 00 FF 
11b8c     98 E4 85 F1 | 	sub	objptr, ##38040
11b90     78 00 90 FD | 	jmp	#LR__1441
11b94                 | LR__1440
11b94     50 00 00 FF 
11b98     30 E5 05 F1 | 	add	objptr, ##41264
11b9c     F2 12 02 FB | 	rdlong	arg01, objptr
11ba0     09 27 02 F6 | 	mov	local01, arg01
11ba4     02 26 66 F0 | 	shl	local01, #2
11ba8     09 27 02 F1 | 	add	local01, arg01
11bac     02 26 66 F0 | 	shl	local01, #2
11bb0     06 00 00 FF 
11bb4     98 E4 85 F1 | 	sub	objptr, ##3224
11bb8     F2 26 02 F1 | 	add	local01, objptr
11bbc     06 00 00 FF 
11bc0     28 E4 05 F1 | 	add	objptr, ##3112
11bc4     F2 12 02 FB | 	rdlong	arg01, objptr
11bc8     13 13 62 FC | 	wrlong	arg01, local01
11bcc     70 E4 05 F1 | 	add	objptr, #112
11bd0     F2 12 02 FB | 	rdlong	arg01, objptr
11bd4     09 27 02 F6 | 	mov	local01, arg01
11bd8     02 26 66 F0 | 	shl	local01, #2
11bdc     09 27 02 F1 | 	add	local01, arg01
11be0     02 26 66 F0 | 	shl	local01, #2
11be4     06 00 00 FF 
11be8     98 E4 85 F1 | 	sub	objptr, ##3224
11bec     F2 26 02 F1 | 	add	local01, objptr
11bf0     18 E4 85 F1 | 	sub	objptr, #24
11bf4     F2 12 02 FB | 	rdlong	arg01, objptr
11bf8     4A 00 00 FF 
11bfc     80 E4 85 F1 | 	sub	objptr, ##38016
11c00     01 12 06 F1 | 	add	arg01, #1
11c04     04 26 06 F1 | 	add	local01, #4
11c08     13 13 62 FC | 	wrlong	arg01, local01
11c0c                 | LR__1441
11c0c     A7 F0 03 F6 | 	mov	ptra, fp
11c10     B2 00 A0 FD | 	call	#popregs_
11c14                 | _do_for_ret
11c14     2D 00 64 FD | 	ret
11c18                 | 
11c18                 | ' 
11c18                 | ' '-------------------- frame
11c18                 | ' 
11c18                 | ' sub do_frame
11c18                 | _do_frame
11c18     03 4A 05 F6 | 	mov	COUNT_, #3
11c1c     A8 00 A0 FD | 	call	#pushregs_
11c20     30 F0 07 F1 | 	add	ptra, #48
11c24     B8 B6 BF FD | 	call	#_pop
11c28     FD 16 02 F6 | 	mov	arg03, result1
11c2c     FE 14 02 F6 | 	mov	arg02, result2
11c30     FF 1A 02 F6 | 	mov	arg05, result3
11c34     24 4E 05 F1 | 	add	fp, #36
11c38     A7 16 62 FC | 	wrlong	arg03, fp
11c3c     04 4E 05 F1 | 	add	fp, #4
11c40     A7 14 62 FC | 	wrlong	arg02, fp
11c44     04 4E 05 F1 | 	add	fp, #4
11c48     A7 1A 62 FC | 	wrlong	arg05, fp
11c4c     2C 4E 85 F1 | 	sub	fp, #44
11c50     8C B6 BF FD | 	call	#_pop
11c54     FD 16 02 F6 | 	mov	arg03, result1
11c58     FE 14 02 F6 | 	mov	arg02, result2
11c5c     FF 1A 02 F6 | 	mov	arg05, result3
11c60     18 4E 05 F1 | 	add	fp, #24
11c64     A7 16 62 FC | 	wrlong	arg03, fp
11c68     04 4E 05 F1 | 	add	fp, #4
11c6c     A7 14 62 FC | 	wrlong	arg02, fp
11c70     04 4E 05 F1 | 	add	fp, #4
11c74     A7 1A 62 FC | 	wrlong	arg05, fp
11c78     20 4E 85 F1 | 	sub	fp, #32
11c7c     60 B6 BF FD | 	call	#_pop
11c80     FD 16 02 F6 | 	mov	arg03, result1
11c84     FE 14 02 F6 | 	mov	arg02, result2
11c88     FF 1A 02 F6 | 	mov	arg05, result3
11c8c     0C 4E 05 F1 | 	add	fp, #12
11c90     A7 16 62 FC | 	wrlong	arg03, fp
11c94     04 4E 05 F1 | 	add	fp, #4
11c98     A7 14 62 FC | 	wrlong	arg02, fp
11c9c     04 4E 05 F1 | 	add	fp, #4
11ca0     A7 1A 62 FC | 	wrlong	arg05, fp
11ca4     14 4E 85 F1 | 	sub	fp, #20
11ca8     34 B6 BF FD | 	call	#_pop
11cac     FF 16 02 F6 | 	mov	arg03, result3
11cb0     A7 FA 61 FC | 	wrlong	result1, fp
11cb4     04 4E 05 F1 | 	add	fp, #4
11cb8     A7 FC 61 FC | 	wrlong	result2, fp
11cbc     04 4E 05 F1 | 	add	fp, #4
11cc0     A7 16 62 FC | 	wrlong	arg03, fp
11cc4     08 4E 85 F1 | 	sub	fp, #8
11cc8     A7 12 02 F6 | 	mov	arg01, fp
11ccc     F4 B7 BF FD | 	call	#_converttoint
11cd0     FD 26 02 F6 | 	mov	local01, result1
11cd4     0C 4E 05 F1 | 	add	fp, #12
11cd8     A7 12 02 F6 | 	mov	arg01, fp
11cdc     0C 4E 85 F1 | 	sub	fp, #12
11ce0     E0 B7 BF FD | 	call	#_converttoint
11ce4     FD 28 02 F6 | 	mov	local02, result1
11ce8     18 4E 05 F1 | 	add	fp, #24
11cec     A7 12 02 F6 | 	mov	arg01, fp
11cf0     18 4E 85 F1 | 	sub	fp, #24
11cf4     CC B7 BF FD | 	call	#_converttoint
11cf8     FD 2A 02 F6 | 	mov	local03, result1
11cfc     24 4E 05 F1 | 	add	fp, #36
11d00     A7 12 02 F6 | 	mov	arg01, fp
11d04     24 4E 85 F1 | 	sub	fp, #36
11d08     B8 B7 BF FD | 	call	#_converttoint
11d0c     FD 18 02 F6 | 	mov	arg04, result1
11d10     37 00 00 FF 
11d14     28 E4 05 F1 | 	add	objptr, ##28200
11d18     F2 1A 02 FB | 	rdlong	arg05, objptr
11d1c     37 00 00 FF 
11d20     28 E4 85 F1 | 	sub	objptr, ##28200
11d24     13 13 02 F6 | 	mov	arg01, local01
11d28     14 15 02 F6 | 	mov	arg02, local02
11d2c     15 17 02 F6 | 	mov	arg03, local03
11d30     40 22 B1 FD | 	call	#_hg010b_spin2_frame
11d34     A7 F0 03 F6 | 	mov	ptra, fp
11d38     B2 00 A0 FD | 	call	#popregs_
11d3c                 | _do_frame_ret
11d3c     2D 00 64 FD | 	ret
11d40                 | 
11d40                 | ' 
11d40                 | ' '-------------------- framebuf
11d40                 | ' 
11d40                 | ' sub do_framebuf
11d40                 | _do_framebuf
11d40     00 4A 05 F6 | 	mov	COUNT_, #0
11d44     A8 00 A0 FD | 	call	#pushregs_
11d48     0C F0 07 F1 | 	add	ptra, #12
11d4c     08 4E 05 F1 | 	add	fp, #8
11d50     A7 3A 68 FC | 	wrlong	#29, fp
11d54     F2 12 02 FB | 	rdlong	arg01, objptr
11d58     08 4E 85 F1 | 	sub	fp, #8
11d5c     A7 12 62 FC | 	wrlong	arg01, fp
11d60     A7 12 02 F6 | 	mov	arg01, fp
11d64     10 B6 BF FD | 	call	#_push
11d68     A7 F0 03 F6 | 	mov	ptra, fp
11d6c     B2 00 A0 FD | 	call	#popregs_
11d70                 | _do_framebuf_ret
11d70     2D 00 64 FD | 	ret
11d74                 | 
11d74                 | ' '-------------------- fre
11d74                 | ' 
11d74                 | ' sub do_fre
11d74                 | _do_fre
11d74     01 4A 05 F6 | 	mov	COUNT_, #1
11d78     A8 00 A0 FD | 	call	#pushregs_
11d7c     0C F0 07 F1 | 	add	ptra, #12
11d80     52 00 00 FF 
11d84     98 E4 05 F1 | 	add	objptr, ##42136
11d88     F2 12 02 FB | 	rdlong	arg01, objptr
11d8c     0F 00 00 FF 
11d90     3C E4 85 F1 | 	sub	objptr, ##7740
11d94     F2 26 02 FB | 	rdlong	local01, objptr
11d98     13 13 82 F1 | 	sub	arg01, local01
11d9c     0F 00 00 FF 
11da0     B4 E4 05 F1 | 	add	objptr, ##7860
11da4     F2 12 62 FC | 	wrlong	arg01, objptr
11da8     08 4E 05 F1 | 	add	fp, #8
11dac     A7 3A 68 FC | 	wrlong	#29, fp
11db0     08 4E 85 F1 | 	sub	fp, #8
11db4     F2 26 02 FB | 	rdlong	local01, objptr
11db8     52 00 00 FF 
11dbc     10 E5 85 F1 | 	sub	objptr, ##42256
11dc0     A7 26 62 FC | 	wrlong	local01, fp
11dc4     A7 12 02 F6 | 	mov	arg01, fp
11dc8     AC B5 BF FD | 	call	#_push
11dcc     A7 F0 03 F6 | 	mov	ptra, fp
11dd0     B2 00 A0 FD | 	call	#popregs_
11dd4                 | _do_fre_ret
11dd4     2D 00 64 FD | 	ret
11dd8                 | 
11dd8                 | ' 
11dd8                 | ' '-------------------- get
11dd8                 | ' 
11dd8                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11dd8                 | _do_get
11dd8     09 4A 05 F6 | 	mov	COUNT_, #9
11ddc     A8 00 A0 FD | 	call	#pushregs_
11de0     40 F0 07 F1 | 	add	ptra, #64
11de4     4A 00 00 FF 
11de8     80 E4 05 F1 | 	add	objptr, ##38016
11dec     F2 1A 02 FB | 	rdlong	arg05, objptr
11df0     0D 19 02 F6 | 	mov	arg04, arg05
11df4     01 18 66 F0 | 	shl	arg04, #1
11df8     0D 19 02 F1 | 	add	arg04, arg05
11dfc     02 18 66 F0 | 	shl	arg04, #2
11e00     03 00 00 FF 
11e04     04 E4 85 F1 | 	sub	objptr, ##1540
11e08     F2 18 02 F1 | 	add	arg04, objptr
11e0c     0C 1B 02 FB | 	rdlong	arg05, arg04
11e10     A7 1A 62 FC | 	wrlong	arg05, fp
11e14                 | ' 
11e14                 | ' numpar=compiledline(lineptr_e).result.uresult
11e14                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11e14     04 1A 0E F2 | 	cmp	arg05, #4 wz
11e18     47 00 00 FF 
11e1c     7C E4 85 F1 | 	sub	objptr, ##36476
11e20     48 00 90 5D |  if_ne	jmp	#LR__1450
11e24     B8 B4 BF FD | 	call	#_pop
11e28     FF 1A 02 F6 | 	mov	arg05, result3
11e2c     1C 4E 05 F1 | 	add	fp, #28
11e30     A7 FA 61 FC | 	wrlong	result1, fp
11e34     04 4E 05 F1 | 	add	fp, #4
11e38     A7 FC 61 FC | 	wrlong	result2, fp
11e3c     04 4E 05 F1 | 	add	fp, #4
11e40     A7 1A 62 FC | 	wrlong	arg05, fp
11e44     08 4E 85 F1 | 	sub	fp, #8
11e48     A7 12 02 F6 | 	mov	arg01, fp
11e4c     1C 4E 85 F1 | 	sub	fp, #28
11e50     70 B6 BF FD | 	call	#_converttoint
11e54     52 00 00 FF 
11e58     0C E5 05 F1 | 	add	objptr, ##42252
11e5c     F2 FA 61 FC | 	wrlong	result1, objptr
11e60     52 00 00 FF 
11e64     0C E5 85 F1 | 	sub	objptr, ##42252
11e68     18 00 90 FD | 	jmp	#LR__1451
11e6c                 | LR__1450
11e6c     52 00 00 FF 
11e70     0C E5 05 F1 | 	add	objptr, ##42252
11e74     FF FF FF FF 
11e78     F2 FE 6B FC | 	wrlong	##-1, objptr
11e7c     52 00 00 FF 
11e80     0C E5 85 F1 | 	sub	objptr, ##42252
11e84                 | LR__1451
11e84                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11e84     A7 16 02 FB | 	rdlong	arg03, fp
11e88     03 16 56 F2 | 	cmps	arg03, #3 wc
11e8c     40 00 90 CD |  if_b	jmp	#LR__1452
11e90     4C B4 BF FD | 	call	#_pop
11e94     FF 16 02 F6 | 	mov	arg03, result3
11e98     1C 4E 05 F1 | 	add	fp, #28
11e9c     A7 FA 61 FC | 	wrlong	result1, fp
11ea0     04 4E 05 F1 | 	add	fp, #4
11ea4     A7 FC 61 FC | 	wrlong	result2, fp
11ea8     04 4E 05 F1 | 	add	fp, #4
11eac     A7 16 62 FC | 	wrlong	arg03, fp
11eb0     08 4E 85 F1 | 	sub	fp, #8
11eb4     A7 12 02 F6 | 	mov	arg01, fp
11eb8     1C 4E 85 F1 | 	sub	fp, #28
11ebc     04 B6 BF FD | 	call	#_converttoint
11ec0     08 4E 05 F1 | 	add	fp, #8
11ec4     A7 FA 61 FC | 	wrlong	result1, fp
11ec8     08 4E 85 F1 | 	sub	fp, #8
11ecc     0C 00 90 FD | 	jmp	#LR__1453
11ed0                 | LR__1452
11ed0     08 4E 05 F1 | 	add	fp, #8
11ed4     A7 02 68 FC | 	wrlong	#1, fp
11ed8     08 4E 85 F1 | 	sub	fp, #8
11edc                 | LR__1453
11edc                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
11edc     A7 16 02 FB | 	rdlong	arg03, fp
11ee0     02 16 56 F2 | 	cmps	arg03, #2 wc
11ee4     3C 00 90 CD |  if_b	jmp	#LR__1454
11ee8     F4 B3 BF FD | 	call	#_pop
11eec     FF 16 02 F6 | 	mov	arg03, result3
11ef0     1C 4E 05 F1 | 	add	fp, #28
11ef4     A7 FA 61 FC | 	wrlong	result1, fp
11ef8     04 4E 05 F1 | 	add	fp, #4
11efc     A7 FC 61 FC | 	wrlong	result2, fp
11f00     04 4E 05 F1 | 	add	fp, #4
11f04     A7 16 62 FC | 	wrlong	arg03, fp
11f08     08 4E 85 F1 | 	sub	fp, #8
11f0c     A7 12 02 F6 | 	mov	arg01, fp
11f10     1C 4E 85 F1 | 	sub	fp, #28
11f14     AC B5 BF FD | 	call	#_converttoint
11f18     0C 4E 05 F1 | 	add	fp, #12
11f1c     A7 FA 61 FC | 	wrlong	result1, fp
11f20     0C 4E 85 F1 | 	sub	fp, #12
11f24                 | LR__1454
11f24     B8 B3 BF FD | 	call	#_pop
11f28     FF 16 02 F6 | 	mov	arg03, result3
11f2c     1C 4E 05 F1 | 	add	fp, #28
11f30     A7 FA 61 FC | 	wrlong	result1, fp
11f34     04 4E 05 F1 | 	add	fp, #4
11f38     A7 FC 61 FC | 	wrlong	result2, fp
11f3c     04 4E 05 F1 | 	add	fp, #4
11f40     A7 16 62 FC | 	wrlong	arg03, fp
11f44     08 4E 85 F1 | 	sub	fp, #8
11f48     A7 12 02 F6 | 	mov	arg01, fp
11f4c     1C 4E 85 F1 | 	sub	fp, #28
11f50     70 B5 BF FD | 	call	#_converttoint
11f54     04 4E 05 F1 | 	add	fp, #4
11f58     A7 FA 61 FC | 	wrlong	result1, fp
11f5c     10 4E 05 F1 | 	add	fp, #16
11f60     A7 16 02 FB | 	rdlong	arg03, fp
11f64     14 4E 85 F1 | 	sub	fp, #20
11f68     02 16 66 F0 | 	shl	arg03, #2
11f6c     50 00 00 FF 
11f70     C4 E4 05 F1 | 	add	objptr, ##41156
11f74     F2 26 02 F6 | 	mov	local01, objptr
11f78     F2 16 02 F1 | 	add	arg03, objptr
11f7c     0B 01 68 FC | 	wrlong	#0, arg03
11f80                 | ' t1=pop() : channel=converttoint(t1)
11f80                 | ' getres(j)=0
11f80                 | ' if pos>=0 then
11f80     02 00 00 FF 
11f84     48 E4 05 F1 | 	add	objptr, ##1096
11f88     F2 28 02 FB | 	rdlong	local02, objptr
11f8c     52 00 00 FF 
11f90     0C E5 85 F1 | 	sub	objptr, ##42252
11f94     00 28 56 F2 | 	cmps	local02, #0 wc
11f98     F0 01 90 CD |  if_b	jmp	#LR__1461
11f9c                 | '   for i=0 to  amount/1024
11f9c     10 4E 05 F1 | 	add	fp, #16
11fa0     A7 00 68 FC | 	wrlong	#0, fp
11fa4     08 4E 85 F1 | 	sub	fp, #8
11fa8     A7 2A 02 FB | 	rdlong	local03, fp
11fac     08 4E 85 F1 | 	sub	fp, #8
11fb0     15 2D 52 F6 | 	abs	local04, local03 wc
11fb4     0A 2C 46 F0 | 	shr	local04, #10
11fb8     16 2D 82 F6 | 	negc	local04, local04
11fbc     01 2C 06 F1 | 	add	local04, #1
11fc0                 | LR__1455
11fc0     10 4E 05 F1 | 	add	fp, #16
11fc4     A7 2A 02 FB | 	rdlong	local03, fp
11fc8     10 4E 85 F1 | 	sub	fp, #16
11fcc     16 2B 52 F2 | 	cmps	local03, local04 wc
11fd0     9C 03 90 3D |  if_ae	jmp	#LR__1469
11fd4                 | '     get #channel,pos+1,block(0),amount,r
11fd4     04 4E 05 F1 | 	add	fp, #4
11fd8     A7 12 02 FB | 	rdlong	arg01, fp
11fdc     52 00 00 FF 
11fe0     0C E5 05 F1 | 	add	objptr, ##42252
11fe4     F2 14 02 FB | 	rdlong	arg02, objptr
11fe8     01 14 06 F1 | 	add	arg02, #1
11fec     04 00 00 FF 
11ff0     58 E4 85 F1 | 	sub	objptr, ##2136
11ff4     F2 16 02 F6 | 	mov	arg03, objptr
11ff8     4E 00 00 FF 
11ffc     B4 E4 85 F1 | 	sub	objptr, ##40116
12000     04 4E 05 F1 | 	add	fp, #4
12004     A7 18 02 FB | 	rdlong	arg04, fp
12008     08 4E 85 F1 | 	sub	fp, #8
1200c     01 1A 06 F6 | 	mov	arg05, #1
12010     A0 4D B1 FD | 	call	#__system___basic_get
12014     18 4E 05 F1 | 	add	fp, #24
12018     A7 FA 61 FC | 	wrlong	result1, fp
1201c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1201c     0C 4E 85 F1 | 	sub	fp, #12
12020     A7 28 02 FB | 	rdlong	local02, fp
12024     0C 4E 85 F1 | 	sub	fp, #12
12028     00 04 00 FF 
1202c     00 28 56 F2 | 	cmps	local02, ##524288 wc
12030     7C 00 90 3D |  if_ae	jmp	#LR__1457
12034     14 4E 05 F1 | 	add	fp, #20
12038     A7 00 68 FC | 	wrlong	#0, fp
1203c     04 4E 05 F1 | 	add	fp, #4
12040     A7 2E 02 FB | 	rdlong	local05, fp
12044     18 4E 85 F1 | 	sub	fp, #24
12048                 | LR__1456
12048     14 4E 05 F1 | 	add	fp, #20
1204c     A7 28 02 FB | 	rdlong	local02, fp
12050     14 4E 85 F1 | 	sub	fp, #20
12054     17 29 52 F2 | 	cmps	local02, local05 wc
12058     D8 00 90 3D |  if_ae	jmp	#LR__1460
1205c     0C 4E 05 F1 | 	add	fp, #12
12060     A7 12 02 FB | 	rdlong	arg01, fp
12064     04 4E 05 F1 | 	add	fp, #4
12068     A7 2A 02 FB | 	rdlong	local03, fp
1206c     0A 2A 66 F0 | 	shl	local03, #10
12070     15 13 02 F1 | 	add	arg01, local03
12074     04 4E 05 F1 | 	add	fp, #4
12078     A7 2A 02 FB | 	rdlong	local03, fp
1207c     15 13 02 F1 | 	add	arg01, local03
12080     4E 00 00 FF 
12084     B4 E4 05 F1 | 	add	objptr, ##40116
12088     F2 2A 02 F1 | 	add	local03, objptr
1208c     15 15 C2 FA | 	rdbyte	arg02, local03
12090     09 15 42 FC | 	wrbyte	arg02, arg01
12094     4E 00 00 FF 
12098     B4 E4 85 F1 | 	sub	objptr, ##40116
1209c     A7 2A 02 FB | 	rdlong	local03, fp
120a0     01 2A 06 F1 | 	add	local03, #1
120a4     A7 2A 62 FC | 	wrlong	local03, fp
120a8     14 4E 85 F1 | 	sub	fp, #20
120ac     98 FF 9F FD | 	jmp	#LR__1456
120b0                 | LR__1457
120b0     14 4E 05 F1 | 	add	fp, #20
120b4     A7 00 68 FC | 	wrlong	#0, fp
120b8     04 4E 05 F1 | 	add	fp, #4
120bc     A7 30 02 FB | 	rdlong	local06, fp
120c0     18 4E 85 F1 | 	sub	fp, #24
120c4                 | LR__1458
120c4     14 4E 05 F1 | 	add	fp, #20
120c8     A7 28 02 FB | 	rdlong	local02, fp
120cc     14 4E 85 F1 | 	sub	fp, #20
120d0     18 29 52 F2 | 	cmps	local02, local06 wc
120d4     5C 00 90 3D |  if_ae	jmp	#LR__1459
120d8     0C 4E 05 F1 | 	add	fp, #12
120dc     A7 12 02 FB | 	rdlong	arg01, fp
120e0     04 4E 05 F1 | 	add	fp, #4
120e4     A7 2E 02 FB | 	rdlong	local05, fp
120e8     0A 2E 66 F0 | 	shl	local05, #10
120ec     17 13 02 F1 | 	add	arg01, local05
120f0     04 4E 05 F1 | 	add	fp, #4
120f4     A7 2E 02 FB | 	rdlong	local05, fp
120f8     17 13 02 F1 | 	add	arg01, local05
120fc     14 4E 85 F1 | 	sub	fp, #20
12100     4E 00 00 FF 
12104     B4 E4 05 F1 | 	add	objptr, ##40116
12108     F2 2E 02 F1 | 	add	local05, objptr
1210c     17 15 C2 FA | 	rdbyte	arg02, local05
12110     4E 00 00 FF 
12114     B4 E4 85 F1 | 	sub	objptr, ##40116
12118     64 06 B1 FD | 	call	#_pspoke
1211c     14 4E 05 F1 | 	add	fp, #20
12120     A7 2E 02 FB | 	rdlong	local05, fp
12124     01 2E 06 F1 | 	add	local05, #1
12128     A7 2E 62 FC | 	wrlong	local05, fp
1212c     14 4E 85 F1 | 	sub	fp, #20
12130     90 FF 9F FD | 	jmp	#LR__1458
12134                 | LR__1459
12134                 | LR__1460
12134     14 4E 05 F1 | 	add	fp, #20
12138     A7 30 02 FB | 	rdlong	local06, fp
1213c     18 2B 02 F6 | 	mov	local03, local06
12140     02 2A 66 F0 | 	shl	local03, #2
12144     50 00 00 FF 
12148     C4 E4 05 F1 | 	add	objptr, ##41156
1214c     F2 2A 02 F1 | 	add	local03, objptr
12150     02 30 66 F0 | 	shl	local06, #2
12154     F2 30 02 F1 | 	add	local06, objptr
12158     18 31 02 FB | 	rdlong	local06, local06
1215c     04 4E 05 F1 | 	add	fp, #4
12160     A7 2E 02 FB | 	rdlong	local05, fp
12164     17 31 02 F1 | 	add	local06, local05
12168     15 31 62 FC | 	wrlong	local06, local03
1216c     08 4E 85 F1 | 	sub	fp, #8
12170     A7 30 02 FB | 	rdlong	local06, fp
12174     01 30 06 F1 | 	add	local06, #1
12178     A7 30 62 FC | 	wrlong	local06, fp
1217c     10 4E 85 F1 | 	sub	fp, #16
12180     50 00 00 FF 
12184     C4 E4 85 F1 | 	sub	objptr, ##41156
12188     34 FE 9F FD | 	jmp	#LR__1455
1218c                 | LR__1461
1218c                 | '   for i=0 to  amount/1024
1218c     10 4E 05 F1 | 	add	fp, #16
12190     A7 00 68 FC | 	wrlong	#0, fp
12194     08 4E 85 F1 | 	sub	fp, #8
12198     A7 2A 02 FB | 	rdlong	local03, fp
1219c     08 4E 85 F1 | 	sub	fp, #8
121a0     15 33 52 F6 | 	abs	local07, local03 wc
121a4     0A 32 46 F0 | 	shr	local07, #10
121a8     19 33 82 F6 | 	negc	local07, local07
121ac     01 32 06 F1 | 	add	local07, #1
121b0                 | LR__1462
121b0     10 4E 05 F1 | 	add	fp, #16
121b4     A7 2A 02 FB | 	rdlong	local03, fp
121b8     10 4E 85 F1 | 	sub	fp, #16
121bc     19 2B 52 F2 | 	cmps	local03, local07 wc
121c0     AC 01 90 3D |  if_ae	jmp	#LR__1468
121c4                 | '     get #channel,,block(0),amount,r
121c4     04 4E 05 F1 | 	add	fp, #4
121c8     A7 12 02 FB | 	rdlong	arg01, fp
121cc     4E 00 00 FF 
121d0     B4 E4 05 F1 | 	add	objptr, ##40116
121d4     F2 16 02 F6 | 	mov	arg03, objptr
121d8     4E 00 00 FF 
121dc     B4 E4 85 F1 | 	sub	objptr, ##40116
121e0     04 4E 05 F1 | 	add	fp, #4
121e4     A7 18 02 FB | 	rdlong	arg04, fp
121e8     08 4E 85 F1 | 	sub	fp, #8
121ec     00 14 06 F6 | 	mov	arg02, #0
121f0     01 1A 06 F6 | 	mov	arg05, #1
121f4     BC 4B B1 FD | 	call	#__system___basic_get
121f8     18 4E 05 F1 | 	add	fp, #24
121fc     A7 FA 61 FC | 	wrlong	result1, fp
12200                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12200     0C 4E 85 F1 | 	sub	fp, #12
12204     A7 28 02 FB | 	rdlong	local02, fp
12208     0C 4E 85 F1 | 	sub	fp, #12
1220c     00 04 00 FF 
12210     00 28 56 F2 | 	cmps	local02, ##524288 wc
12214     7C 00 90 3D |  if_ae	jmp	#LR__1464
12218     14 4E 05 F1 | 	add	fp, #20
1221c     A7 00 68 FC | 	wrlong	#0, fp
12220     04 4E 05 F1 | 	add	fp, #4
12224     A7 34 02 FB | 	rdlong	local08, fp
12228     18 4E 85 F1 | 	sub	fp, #24
1222c                 | LR__1463
1222c     14 4E 05 F1 | 	add	fp, #20
12230     A7 28 02 FB | 	rdlong	local02, fp
12234     14 4E 85 F1 | 	sub	fp, #20
12238     1A 29 52 F2 | 	cmps	local02, local08 wc
1223c     D8 00 90 3D |  if_ae	jmp	#LR__1467
12240     0C 4E 05 F1 | 	add	fp, #12
12244     A7 12 02 FB | 	rdlong	arg01, fp
12248     04 4E 05 F1 | 	add	fp, #4
1224c     A7 30 02 FB | 	rdlong	local06, fp
12250     0A 30 66 F0 | 	shl	local06, #10
12254     18 13 02 F1 | 	add	arg01, local06
12258     04 4E 05 F1 | 	add	fp, #4
1225c     A7 30 02 FB | 	rdlong	local06, fp
12260     18 13 02 F1 | 	add	arg01, local06
12264     4E 00 00 FF 
12268     B4 E4 05 F1 | 	add	objptr, ##40116
1226c     F2 30 02 F1 | 	add	local06, objptr
12270     18 15 C2 FA | 	rdbyte	arg02, local06
12274     09 15 42 FC | 	wrbyte	arg02, arg01
12278     4E 00 00 FF 
1227c     B4 E4 85 F1 | 	sub	objptr, ##40116
12280     A7 30 02 FB | 	rdlong	local06, fp
12284     01 30 06 F1 | 	add	local06, #1
12288     A7 30 62 FC | 	wrlong	local06, fp
1228c     14 4E 85 F1 | 	sub	fp, #20
12290     98 FF 9F FD | 	jmp	#LR__1463
12294                 | LR__1464
12294     14 4E 05 F1 | 	add	fp, #20
12298     A7 00 68 FC | 	wrlong	#0, fp
1229c     04 4E 05 F1 | 	add	fp, #4
122a0     A7 36 02 FB | 	rdlong	local09, fp
122a4     18 4E 85 F1 | 	sub	fp, #24
122a8                 | LR__1465
122a8     14 4E 05 F1 | 	add	fp, #20
122ac     A7 28 02 FB | 	rdlong	local02, fp
122b0     14 4E 85 F1 | 	sub	fp, #20
122b4     1B 29 52 F2 | 	cmps	local02, local09 wc
122b8     5C 00 90 3D |  if_ae	jmp	#LR__1466
122bc     0C 4E 05 F1 | 	add	fp, #12
122c0     A7 12 02 FB | 	rdlong	arg01, fp
122c4     04 4E 05 F1 | 	add	fp, #4
122c8     A7 34 02 FB | 	rdlong	local08, fp
122cc     0A 34 66 F0 | 	shl	local08, #10
122d0     1A 13 02 F1 | 	add	arg01, local08
122d4     04 4E 05 F1 | 	add	fp, #4
122d8     A7 34 02 FB | 	rdlong	local08, fp
122dc     1A 13 02 F1 | 	add	arg01, local08
122e0     14 4E 85 F1 | 	sub	fp, #20
122e4     4E 00 00 FF 
122e8     B4 E4 05 F1 | 	add	objptr, ##40116
122ec     F2 34 02 F1 | 	add	local08, objptr
122f0     1A 15 C2 FA | 	rdbyte	arg02, local08
122f4     4E 00 00 FF 
122f8     B4 E4 85 F1 | 	sub	objptr, ##40116
122fc     80 04 B1 FD | 	call	#_pspoke
12300     14 4E 05 F1 | 	add	fp, #20
12304     A7 34 02 FB | 	rdlong	local08, fp
12308     01 34 06 F1 | 	add	local08, #1
1230c     A7 34 62 FC | 	wrlong	local08, fp
12310     14 4E 85 F1 | 	sub	fp, #20
12314     90 FF 9F FD | 	jmp	#LR__1465
12318                 | LR__1466
12318                 | LR__1467
12318     14 4E 05 F1 | 	add	fp, #20
1231c     A7 36 02 FB | 	rdlong	local09, fp
12320     1B 31 02 F6 | 	mov	local06, local09
12324     02 30 66 F0 | 	shl	local06, #2
12328     50 00 00 FF 
1232c     C4 E4 05 F1 | 	add	objptr, ##41156
12330     F2 30 02 F1 | 	add	local06, objptr
12334     02 36 66 F0 | 	shl	local09, #2
12338     F2 36 02 F1 | 	add	local09, objptr
1233c     1B 37 02 FB | 	rdlong	local09, local09
12340     04 4E 05 F1 | 	add	fp, #4
12344     A7 34 02 FB | 	rdlong	local08, fp
12348     1A 37 02 F1 | 	add	local09, local08
1234c     18 37 62 FC | 	wrlong	local09, local06
12350     08 4E 85 F1 | 	sub	fp, #8
12354     A7 36 02 FB | 	rdlong	local09, fp
12358     01 36 06 F1 | 	add	local09, #1
1235c     A7 36 62 FC | 	wrlong	local09, fp
12360     10 4E 85 F1 | 	sub	fp, #16
12364     50 00 00 FF 
12368     C4 E4 85 F1 | 	sub	objptr, ##41156
1236c     40 FE 9F FD | 	jmp	#LR__1462
12370                 | LR__1468
12370                 | LR__1469
12370     A7 F0 03 F6 | 	mov	ptra, fp
12374     B2 00 A0 FD | 	call	#popregs_
12378                 | _do_get_ret
12378     2D 00 64 FD | 	ret
1237c                 | 
1237c                 | ' 
1237c                 | ' '-------------------- getenvsustain
1237c                 | ' 
1237c                 | ' sub do_getenvsustain
1237c                 | _do_getenvsustain
1237c     01 4A 05 F6 | 	mov	COUNT_, #1
12380     A8 00 A0 FD | 	call	#pushregs_
12384     10 F0 07 F1 | 	add	ptra, #16
12388     4A 00 00 FF 
1238c     80 E4 05 F1 | 	add	objptr, ##38016
12390     F2 26 02 FB | 	rdlong	local01, objptr
12394     13 17 02 F6 | 	mov	arg03, local01
12398     01 16 66 F0 | 	shl	arg03, #1
1239c     13 17 02 F1 | 	add	arg03, local01
123a0     02 16 66 F0 | 	shl	arg03, #2
123a4     03 00 00 FF 
123a8     04 E4 85 F1 | 	sub	objptr, ##1540
123ac     F2 16 02 F1 | 	add	arg03, objptr
123b0     0B 17 02 FB | 	rdlong	arg03, arg03
123b4     0C 4E 05 F1 | 	add	fp, #12
123b8     A7 16 62 FC | 	wrlong	arg03, fp
123bc                 | ' 
123bc                 | ' numpar=compiledline(lineptr_e).result.uresult
123bc                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
123bc     0C 4E 85 F1 | 	sub	fp, #12
123c0     02 16 16 F2 | 	cmp	arg03, #2 wc
123c4     47 00 00 FF 
123c8     7C E4 85 F1 | 	sub	objptr, ##36476
123cc     0C 4E 05 C1 |  if_b	add	fp, #12
123d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
123d4     0C 4E 85 C1 |  if_b	sub	fp, #12
123d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1470
123dc     00 12 06 F6 | 	mov	arg01, #0
123e0     00 98 B1 FD | 	call	#__system___getiolock_0600
123e4     FD 12 02 F6 | 	mov	arg01, result1
123e8     54 3B B1 FD | 	call	#__system___lockmem
123ec     B1 01 00 FF 
123f0     AD 15 06 F6 | 	mov	arg02, ##@LR__5863
123f4     00 12 06 F6 | 	mov	arg01, #0
123f8     00 16 06 F6 | 	mov	arg03, #0
123fc     38 48 B1 FD | 	call	#__system___basic_print_string
12400     00 12 06 F6 | 	mov	arg01, #0
12404     DC 97 B1 FD | 	call	#__system___getiolock_0600
12408     FD 00 68 FC | 	wrlong	#0, result1
1240c     27 12 06 F6 | 	mov	arg01, #39
12410     00 14 06 F6 | 	mov	arg02, #0
12414     38 01 B1 FD | 	call	#_printerror
12418     64 00 90 FD | 	jmp	#LR__1471
1241c                 | LR__1470
1241c     C0 AE BF FD | 	call	#_pop
12420     FD 26 02 F6 | 	mov	local01, result1
12424     FE 16 02 F6 | 	mov	arg03, result2
12428     A7 26 62 FC | 	wrlong	local01, fp
1242c     04 4E 05 F1 | 	add	fp, #4
12430     A7 16 62 FC | 	wrlong	arg03, fp
12434     04 4E 05 F1 | 	add	fp, #4
12438     A7 FE 61 FC | 	wrlong	result3, fp
1243c     08 4E 85 F1 | 	sub	fp, #8
12440     A7 12 02 F6 | 	mov	arg01, fp
12444     7C B0 BF FD | 	call	#_converttoint
12448     FD 26 02 F6 | 	mov	local01, result1
1244c     01 26 66 F0 | 	shl	local01, #1
12450     52 00 00 FF 
12454     B4 E4 05 F1 | 	add	objptr, ##42164
12458     F2 26 02 F1 | 	add	local01, objptr
1245c     13 27 E2 FA | 	rdword	local01, local01
12460     A7 26 62 FC | 	wrlong	local01, fp
12464     08 4E 05 F1 | 	add	fp, #8
12468     A7 38 68 FC | 	wrlong	#28, fp
1246c     08 4E 85 F1 | 	sub	fp, #8
12470     A7 12 02 F6 | 	mov	arg01, fp
12474     52 00 00 FF 
12478     B4 E4 85 F1 | 	sub	objptr, ##42164
1247c     F8 AE BF FD | 	call	#_push
12480                 | LR__1471
12480     A7 F0 03 F6 | 	mov	ptra, fp
12484     B2 00 A0 FD | 	call	#popregs_
12488                 | _do_getenvsustain_ret
12488     2D 00 64 FD | 	ret
1248c                 | 
1248c                 | ' 
1248c                 | ' '-------------------- getnotevalue
1248c                 | ' 
1248c                 | ' sub do_getnotevalue
1248c                 | _do_getnotevalue
1248c     01 4A 05 F6 | 	mov	COUNT_, #1
12490     A8 00 A0 FD | 	call	#pushregs_
12494     1C F0 07 F1 | 	add	ptra, #28
12498     44 AE BF FD | 	call	#_pop
1249c     FF 14 02 F6 | 	mov	arg02, result3
124a0     10 4E 05 F1 | 	add	fp, #16
124a4     A7 FA 61 FC | 	wrlong	result1, fp
124a8     04 4E 05 F1 | 	add	fp, #4
124ac     A7 FC 61 FC | 	wrlong	result2, fp
124b0     04 4E 05 F1 | 	add	fp, #4
124b4     A7 14 62 FC | 	wrlong	arg02, fp
124b8     08 4E 85 F1 | 	sub	fp, #8
124bc     A7 12 02 F6 | 	mov	arg01, fp
124c0     10 4E 85 F1 | 	sub	fp, #16
124c4     FC AF BF FD | 	call	#_converttoint
124c8     FD 14 52 F6 | 	abs	arg02, result1 wc
124cc     0C 14 16 FD | 	qdiv	arg02, #12
124d0     0C 4E 05 F1 | 	add	fp, #12
124d4     A7 FA 61 FC | 	wrlong	result1, fp
124d8     14 00 00 FF 
124dc     D8 E4 05 F1 | 	add	objptr, ##10456
124e0     08 4E 85 F1 | 	sub	fp, #8
124e4     19 14 62 FD | 	getqy	arg02
124e8     0A 15 82 F6 | 	negc	arg02, arg02
124ec     02 14 66 F0 | 	shl	arg02, #2
124f0     F2 14 02 F1 | 	add	arg02, objptr
124f4     0A 15 02 FB | 	rdlong	arg02, arg02
124f8     A7 14 62 FC | 	wrlong	arg02, fp
124fc     08 4E 05 F1 | 	add	fp, #8
12500     A7 14 02 FB | 	rdlong	arg02, fp
12504     0A 15 52 F6 | 	abs	arg02, arg02 wc
12508     0C 14 16 FD | 	qdiv	arg02, #12
1250c     0C 4E 85 F1 | 	sub	fp, #12
12510     14 00 00 FF 
12514     D8 E4 85 F1 | 	sub	objptr, ##10456
12518     18 14 62 FD | 	getqx	arg02
1251c     0A 13 82 F6 | 	negc	arg01, arg02
12520     09 13 52 F6 | 	abs	arg01, arg01 wc
12524     1F 26 C6 C9 |  if_b	decod	local01, #31
12528     00 26 06 36 |  if_ae	mov	local01, #0
1252c     88 64 B1 FD | 	call	#__system___float_fromuns
12530     13 FB 61 F5 | 	xor	result1, local01
12534     08 4E 05 F1 | 	add	fp, #8
12538     A7 FA 61 FC | 	wrlong	result1, fp
1253c     FD 14 02 F6 | 	mov	arg02, result1
12540     08 4E 85 F1 | 	sub	fp, #8
12544     1E 12 C6 F9 | 	decod	arg01, #30
12548     78 77 B1 FD | 	call	#__system____builtin_powf
1254c     FD 12 02 F6 | 	mov	arg01, result1
12550     04 4E 05 F1 | 	add	fp, #4
12554     A7 14 02 FB | 	rdlong	arg02, fp
12558     04 4E 85 F1 | 	sub	fp, #4
1255c     5C 68 B1 FD | 	call	#__system___float_mul
12560     A7 FA 61 FC | 	wrlong	result1, fp
12564     10 4E 05 F1 | 	add	fp, #16
12568     A7 FA 61 FC | 	wrlong	result1, fp
1256c     08 4E 05 F1 | 	add	fp, #8
12570     A7 3C 68 FC | 	wrlong	#30, fp
12574     08 4E 85 F1 | 	sub	fp, #8
12578     A7 12 02 F6 | 	mov	arg01, fp
1257c     10 4E 85 F1 | 	sub	fp, #16
12580     F4 AD BF FD | 	call	#_push
12584     A7 F0 03 F6 | 	mov	ptra, fp
12588     B2 00 A0 FD | 	call	#popregs_
1258c                 | _do_getnotevalue_ret
1258c     2D 00 64 FD | 	ret
12590                 | 
12590                 | ' 
12590                 | ' '-------------------- getpixel
12590                 | ' 
12590                 | ' sub do_getpixel
12590                 | _do_getpixel
12590     00 4A 05 F6 | 	mov	COUNT_, #0
12594     A8 00 A0 FD | 	call	#pushregs_
12598     24 F0 07 F1 | 	add	ptra, #36
1259c     4A 00 00 FF 
125a0     80 E4 05 F1 | 	add	objptr, ##38016
125a4     F2 16 02 FB | 	rdlong	arg03, objptr
125a8     0B 15 02 F6 | 	mov	arg02, arg03
125ac     01 14 66 F0 | 	shl	arg02, #1
125b0     0B 15 02 F1 | 	add	arg02, arg03
125b4     02 14 66 F0 | 	shl	arg02, #2
125b8     03 00 00 FF 
125bc     04 E4 85 F1 | 	sub	objptr, ##1540
125c0     F2 14 02 F1 | 	add	arg02, objptr
125c4     0A 17 02 FB | 	rdlong	arg03, arg02
125c8     18 4E 05 F1 | 	add	fp, #24
125cc     A7 16 62 FC | 	wrlong	arg03, fp
125d0                 | ' 
125d0                 | ' numpar=compiledline(lineptr_e).result.uresult
125d0                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
125d0     18 4E 85 F1 | 	sub	fp, #24
125d4     02 16 0E F2 | 	cmp	arg03, #2 wz
125d8     47 00 00 FF 
125dc     7C E4 85 F1 | 	sub	objptr, ##36476
125e0     40 00 90 AD |  if_e	jmp	#LR__1480
125e4     00 12 06 F6 | 	mov	arg01, #0
125e8     F8 95 B1 FD | 	call	#__system___getiolock_0600
125ec     FD 12 02 F6 | 	mov	arg01, result1
125f0     4C 39 B1 FD | 	call	#__system___lockmem
125f4     B1 01 00 FF 
125f8     BD 15 06 F6 | 	mov	arg02, ##@LR__5864
125fc     00 12 06 F6 | 	mov	arg01, #0
12600     00 16 06 F6 | 	mov	arg03, #0
12604     30 46 B1 FD | 	call	#__system___basic_print_string
12608     00 12 06 F6 | 	mov	arg01, #0
1260c     D4 95 B1 FD | 	call	#__system___getiolock_0600
12610     FD 00 68 FC | 	wrlong	#0, result1
12614     27 12 06 F6 | 	mov	arg01, #39
12618     00 14 06 F6 | 	mov	arg02, #0
1261c     30 FF B0 FD | 	call	#_printerror
12620     B4 00 90 FD | 	jmp	#LR__1481
12624                 | LR__1480
12624     B8 AC BF FD | 	call	#_pop
12628     FD 16 02 F6 | 	mov	arg03, result1
1262c     FE 14 02 F6 | 	mov	arg02, result2
12630     FF 12 02 F6 | 	mov	arg01, result3
12634     0C 4E 05 F1 | 	add	fp, #12
12638     A7 16 62 FC | 	wrlong	arg03, fp
1263c     04 4E 05 F1 | 	add	fp, #4
12640     A7 14 62 FC | 	wrlong	arg02, fp
12644     04 4E 05 F1 | 	add	fp, #4
12648     A7 12 62 FC | 	wrlong	arg01, fp
1264c     14 4E 85 F1 | 	sub	fp, #20
12650     8C AC BF FD | 	call	#_pop
12654     FF 16 02 F6 | 	mov	arg03, result3
12658     A7 FA 61 FC | 	wrlong	result1, fp
1265c     04 4E 05 F1 | 	add	fp, #4
12660     A7 FC 61 FC | 	wrlong	result2, fp
12664     04 4E 05 F1 | 	add	fp, #4
12668     A7 16 62 FC | 	wrlong	arg03, fp
1266c     08 4E 85 F1 | 	sub	fp, #8
12670     A7 12 02 F6 | 	mov	arg01, fp
12674     4C AE BF FD | 	call	#_converttoint
12678     1C 4E 05 F1 | 	add	fp, #28
1267c     A7 FA 61 FC | 	wrlong	result1, fp
12680     10 4E 85 F1 | 	sub	fp, #16
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     0C 4E 85 F1 | 	sub	fp, #12
1268c     34 AE BF FD | 	call	#_converttoint
12690     FD 16 02 F6 | 	mov	arg03, result1
12694     20 4E 05 F1 | 	add	fp, #32
12698     A7 16 62 FC | 	wrlong	arg03, fp
1269c     F2 12 02 FB | 	rdlong	arg01, objptr
126a0     04 4E 85 F1 | 	sub	fp, #4
126a4     A7 FE 01 FB | 	rdlong	result3, fp
126a8     FF 12 02 F1 | 	add	arg01, result3
126ac     1C 4E 85 F1 | 	sub	fp, #28
126b0     0A 16 66 F0 | 	shl	arg03, #10
126b4     0B 13 02 F1 | 	add	arg01, arg03
126b8     0C 01 B1 FD | 	call	#_pspeek
126bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
126c0     A7 FA 61 FC | 	wrlong	result1, fp
126c4     08 4E 05 F1 | 	add	fp, #8
126c8     A7 3A 68 FC | 	wrlong	#29, fp
126cc     08 4E 85 F1 | 	sub	fp, #8
126d0     A7 12 02 F6 | 	mov	arg01, fp
126d4     A0 AC BF FD | 	call	#_push
126d8                 | LR__1481
126d8     A7 F0 03 F6 | 	mov	ptra, fp
126dc     B2 00 A0 FD | 	call	#popregs_
126e0                 | _do_getpixel_ret
126e0     2D 00 64 FD | 	ret
126e4                 | 
126e4                 | ' 
126e4                 | ' '-------------------- gettime
126e4                 | ' 
126e4                 | ' sub do_gettime
126e4                 | _do_gettime
126e4     02 4A 05 F6 | 	mov	COUNT_, #2
126e8     A8 00 A0 FD | 	call	#pushregs_
126ec     14 F0 07 F1 | 	add	ptra, #20
126f0                 | ' 
126f0                 | ' const asm 
126f0     1A 26 72 FD | 	getct	local01 wc
126f4     1A 28 62 FD | 	getct	local02
126f8                 | ' return hi1, lo1
126f8     14 FD 01 F6 | 	mov	result2, local02
126fc     A7 26 62 FC | 	wrlong	local01, fp
12700     04 4E 05 F1 | 	add	fp, #4
12704     A7 FC 61 FC | 	wrlong	result2, fp
12708     0C 4E 05 F1 | 	add	fp, #12
1270c     A7 3A 68 FC | 	wrlong	#29, fp
12710     0C 4E 85 F1 | 	sub	fp, #12
12714     A7 12 02 FB | 	rdlong	arg01, fp
12718     04 4E 05 F1 | 	add	fp, #4
1271c     A7 12 62 FC | 	wrlong	arg01, fp
12720     08 4E 85 F1 | 	sub	fp, #8
12724     A7 12 02 FB | 	rdlong	arg01, fp
12728     0C 4E 05 F1 | 	add	fp, #12
1272c     A7 12 62 FC | 	wrlong	arg01, fp
12730     04 4E 85 F1 | 	sub	fp, #4
12734     A7 12 02 F6 | 	mov	arg01, fp
12738     08 4E 85 F1 | 	sub	fp, #8
1273c     38 AC BF FD | 	call	#_push
12740     A7 F0 03 F6 | 	mov	ptra, fp
12744     B2 00 A0 FD | 	call	#popregs_
12748                 | _do_gettime_ret
12748     2D 00 64 FD | 	ret
1274c                 | 
1274c                 | ' 
1274c                 | ' '-------------------- gosub
1274c                 | ' 
1274c                 | ' sub do_gosub()
1274c                 | _do_gosub
1274c     50 00 00 FF 
12750     34 E5 05 F1 | 	add	objptr, ##41268
12754     F2 00 02 FB | 	rdlong	_var01, objptr
12758     01 00 06 F1 | 	add	_var01, #1
1275c     F2 00 62 FC | 	wrlong	_var01, objptr
12760                 | ' gosubtop+=1
12760                 | ' if compiledline(lineptr_e+1).result_type=token_end then
12760     06 00 00 FF 
12764     B4 E4 85 F1 | 	sub	objptr, ##3252
12768     F2 00 02 FB | 	rdlong	_var01, objptr
1276c     01 00 06 F1 | 	add	_var01, #1
12770     00 03 02 F6 | 	mov	_var02, _var01
12774     01 02 66 F0 | 	shl	_var02, #1
12778     00 03 02 F1 | 	add	_var02, _var01
1277c     02 02 66 F0 | 	shl	_var02, #2
12780     03 00 00 FF 
12784     04 E4 85 F1 | 	sub	objptr, ##1540
12788     F2 02 02 F1 | 	add	_var02, objptr
1278c     08 02 06 F1 | 	add	_var02, #8
12790     01 03 02 FB | 	rdlong	_var02, _var02
12794     FE 03 0E F2 | 	cmp	_var02, #510 wz
12798     47 00 00 FF 
1279c     7C E4 85 F1 | 	sub	objptr, ##36476
127a0     58 00 90 5D |  if_ne	jmp	#LR__1490
127a4     50 00 00 FF 
127a8     34 E5 05 F1 | 	add	objptr, ##41268
127ac     F2 02 02 FB | 	rdlong	_var02, objptr
127b0     03 02 66 F0 | 	shl	_var02, #3
127b4     03 00 00 FF 
127b8     88 E5 85 F1 | 	sub	objptr, ##1928
127bc     F2 02 02 F1 | 	add	_var02, objptr
127c0     03 00 00 FF 
127c4     0C E5 05 F1 | 	add	objptr, ##1804
127c8     F2 00 02 FB | 	rdlong	_var01, objptr
127cc     01 01 62 FC | 	wrlong	_var01, _var02
127d0     7C E4 05 F1 | 	add	objptr, #124
127d4     F2 02 02 FB | 	rdlong	_var02, objptr
127d8     03 02 66 F0 | 	shl	_var02, #3
127dc     03 00 00 FF 
127e0     88 E5 85 F1 | 	sub	objptr, ##1928
127e4     F2 02 02 F1 | 	add	_var02, objptr
127e8     04 02 06 F1 | 	add	_var02, #4
127ec     01 01 68 FC | 	wrlong	#0, _var02
127f0     4C 00 00 FF 
127f4     AC E5 85 F1 | 	sub	objptr, ##39340
127f8     64 00 90 FD | 	jmp	#LR__1491
127fc                 | LR__1490
127fc     50 00 00 FF 
12800     34 E5 05 F1 | 	add	objptr, ##41268
12804     F2 02 02 FB | 	rdlong	_var02, objptr
12808     03 02 66 F0 | 	shl	_var02, #3
1280c     03 00 00 FF 
12810     88 E5 85 F1 | 	sub	objptr, ##1928
12814     F2 02 02 F1 | 	add	_var02, objptr
12818     03 00 00 FF 
1281c     14 E5 05 F1 | 	add	objptr, ##1812
12820     F2 00 02 FB | 	rdlong	_var01, objptr
12824     01 01 62 FC | 	wrlong	_var01, _var02
12828     74 E4 05 F1 | 	add	objptr, #116
1282c     F2 02 02 FB | 	rdlong	_var02, objptr
12830     03 02 66 F0 | 	shl	_var02, #3
12834     03 00 00 FF 
12838     88 E5 85 F1 | 	sub	objptr, ##1928
1283c     F2 02 02 F1 | 	add	_var02, objptr
12840     02 00 00 FF 
12844     2C E5 85 F1 | 	sub	objptr, ##1324
12848     F2 00 02 FB | 	rdlong	_var01, objptr
1284c     4A 00 00 FF 
12850     80 E4 85 F1 | 	sub	objptr, ##38016
12854     02 00 06 F1 | 	add	_var01, #2
12858     04 02 06 F1 | 	add	_var02, #4
1285c     01 01 62 FC | 	wrlong	_var01, _var02
12860                 | LR__1491
12860                 | _do_gosub_ret
12860     2D 00 64 FD | 	ret
12864                 | 
12864                 | ' 
12864                 | ' '--------------------- goto
12864                 | ' 
12864                 | ' '------- fast goto
12864                 | ' 
12864                 | ' sub do_fast_goto
12864                 | _do_fast_goto
12864     02 4A 05 F6 | 	mov	COUNT_, #2
12868     A8 00 A0 FD | 	call	#pushregs_
1286c                 | _do_fast_goto_enter
1286c     4A 00 00 FF 
12870     80 E4 05 F1 | 	add	objptr, ##38016
12874     F2 12 02 FB | 	rdlong	arg01, objptr
12878     09 27 02 F6 | 	mov	local01, arg01
1287c     01 26 66 F0 | 	shl	local01, #1
12880     09 27 02 F1 | 	add	local01, arg01
12884     02 26 66 F0 | 	shl	local01, #2
12888     03 00 00 FF 
1288c     04 E4 85 F1 | 	sub	objptr, ##1540
12890     F2 26 02 F1 | 	add	local01, objptr
12894     13 29 02 FB | 	rdlong	local02, local01
12898     14 13 02 F6 | 	mov	arg01, local02
1289c     47 00 00 FF 
128a0     7C E4 85 F1 | 	sub	objptr, ##36476
128a4     78 FF B0 FD | 	call	#_pslpeek
128a8     FD 12 02 F6 | 	mov	arg01, result1
128ac                 | ' 
128ac                 | ' testptr=compiledline(lineptr_e).result.uresult
128ac                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
128ac                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
128ac     4A 00 00 FF 
128b0     80 E4 05 F1 | 	add	objptr, ##38016
128b4     F2 FA 01 FB | 	rdlong	result1, objptr
128b8     FD 26 02 F6 | 	mov	local01, result1
128bc     01 26 66 F0 | 	shl	local01, #1
128c0     FD 26 02 F1 | 	add	local01, result1
128c4     02 26 66 F0 | 	shl	local01, #2
128c8     03 00 00 FF 
128cc     04 E4 85 F1 | 	sub	objptr, ##1540
128d0     F2 26 02 F1 | 	add	local01, objptr
128d4     04 26 06 F1 | 	add	local01, #4
128d8     13 27 02 FB | 	rdlong	local01, local01
128dc     13 13 0A F2 | 	cmp	arg01, local01 wz
128e0     47 00 00 FF 
128e4     7C E4 85 F1 | 	sub	objptr, ##36476
128e8     58 00 90 5D |  if_ne	jmp	#LR__1500
128ec     50 00 00 FF 
128f0     B8 E4 05 F1 | 	add	objptr, ##41144
128f4     F2 28 62 FC | 	wrlong	local02, objptr
128f8     06 00 00 FF 
128fc     3C E4 85 F1 | 	sub	objptr, ##3132
12900     F2 28 02 FB | 	rdlong	local02, objptr
12904     01 28 86 F1 | 	sub	local02, #1
12908     04 E4 05 F1 | 	add	objptr, #4
1290c     F2 28 62 FC | 	wrlong	local02, objptr
12910                 | '   runptr=testptr
12910                 | '   lineptr_e=lineptr-1
12910                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
12910     06 00 00 FF 
12914     84 E4 05 F1 | 	add	objptr, ##3204
12918     F2 28 02 FB | 	rdlong	local02, objptr
1291c     50 00 00 FF 
12920     04 E5 85 F1 | 	sub	objptr, ##41220
12924     FF FF 3F FF 
12928     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
1292c     50 00 00 AF 
12930     04 E5 05 A1 |  if_e	add	objptr, ##41220
12934     F2 00 68 AC |  if_e	wrlong	#0, objptr
12938     50 00 00 AF 
1293c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12940     04 00 90 FD | 	jmp	#LR__1501
12944                 | LR__1500
12944     0C 00 B0 FD | 	call	#_do_find_goto
12948                 | LR__1501
12948     A7 F0 03 F6 | 	mov	ptra, fp
1294c     B2 00 A0 FD | 	call	#popregs_
12950                 | _do_fast_goto_ret
12950     2D 00 64 FD | 	ret
12954                 | 
12954                 | ' 
12954                 | ' '------- find goto  
12954                 | ' 
12954                 | ' sub do_find_goto
12954                 | _do_find_goto
12954     03 4A 05 F6 | 	mov	COUNT_, #3
12958     A8 00 A0 FD | 	call	#pushregs_
1295c     24 F0 07 F1 | 	add	ptra, #36
12960                 | _do_find_goto_enter
12960     4A 00 00 FF 
12964     80 E4 05 F1 | 	add	objptr, ##38016
12968     F2 26 02 FB | 	rdlong	local01, objptr
1296c     13 29 02 F6 | 	mov	local02, local01
12970     01 28 66 F0 | 	shl	local02, #1
12974     13 29 02 F1 | 	add	local02, local01
12978     02 28 66 F0 | 	shl	local02, #2
1297c     03 00 00 FF 
12980     04 E4 85 F1 | 	sub	objptr, ##1540
12984     F2 28 02 F1 | 	add	local02, objptr
12988     04 28 06 F1 | 	add	local02, #4
1298c     14 29 02 FB | 	rdlong	local02, local02
12990     A7 28 62 FC | 	wrlong	local02, fp
12994     03 00 00 FF 
12998     0C E4 05 F1 | 	add	objptr, ##1548
1299c     F2 2A 02 FB | 	rdlong	local03, objptr
129a0     4A 00 00 FF 
129a4     88 E4 85 F1 | 	sub	objptr, ##38024
129a8     04 4E 05 F1 | 	add	fp, #4
129ac     A7 2A 62 FC | 	wrlong	local03, fp
129b0     04 4E 85 F1 | 	sub	fp, #4
129b4                 | ' 
129b4                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
129b4                 | ' gotoptr=programstart
129b4                 | ' do
129b4                 | LR__1510
129b4     0C 4E 05 F1 | 	add	fp, #12
129b8     A7 12 02 F6 | 	mov	arg01, fp
129bc     08 4E 85 F1 | 	sub	fp, #8
129c0     A7 14 02 FB | 	rdlong	arg02, fp
129c4     04 4E 85 F1 | 	sub	fp, #4
129c8     18 16 06 F6 | 	mov	arg03, #24
129cc     0B 00 00 FF 
129d0     CC E4 05 F1 | 	add	objptr, ##5836
129d4     E0 28 B1 FD | 	call	#_psram_spin2_read1
129d8     0B 00 00 FF 
129dc     CC E4 85 F1 | 	sub	objptr, ##5836
129e0                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
129e0                 | '   if gotoheader(0)<>$FFFFFFFF then
129e0     0C 4E 05 F1 | 	add	fp, #12
129e4     A7 2A 02 FB | 	rdlong	local03, fp
129e8     0C 4E 85 F1 | 	sub	fp, #12
129ec     FF FF 7F FF 
129f0     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
129f4     24 00 90 AD |  if_e	jmp	#LR__1511
129f8     04 4E 05 F1 | 	add	fp, #4
129fc     A7 2A 02 FB | 	rdlong	local03, fp
12a00     04 4E 05 F1 | 	add	fp, #4
12a04     A7 2A 62 FC | 	wrlong	local03, fp
12a08     18 4E 05 F1 | 	add	fp, #24
12a0c     A7 2A 02 FB | 	rdlong	local03, fp
12a10     1C 4E 85 F1 | 	sub	fp, #28
12a14     A7 2A 62 FC | 	wrlong	local03, fp
12a18     04 4E 85 F1 | 	sub	fp, #4
12a1c                 | LR__1511
12a1c     20 4E 05 F1 | 	add	fp, #32
12a20     A7 2A 02 FB | 	rdlong	local03, fp
12a24     20 4E 85 F1 | 	sub	fp, #32
12a28     FF FF 3F FF 
12a2c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
12a30     0C 4E 05 51 |  if_ne	add	fp, #12
12a34     A7 26 02 5B |  if_ne	rdlong	local01, fp
12a38     0C 4E 85 51 |  if_ne	sub	fp, #12
12a3c     FF FF 7F 5F 
12a40     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12a44     18 00 90 AD |  if_e	jmp	#LR__1512
12a48     0C 4E 05 F1 | 	add	fp, #12
12a4c     A7 2A 02 FB | 	rdlong	local03, fp
12a50     0C 4E 85 F1 | 	sub	fp, #12
12a54     A7 28 02 FB | 	rdlong	local02, fp
12a58     14 2B 0A F2 | 	cmp	local03, local02 wz
12a5c     54 FF 9F 5D |  if_ne	jmp	#LR__1510
12a60                 | LR__1512
12a60                 | ' 
12a60                 | ' if gotoheader(0)=gotoline then
12a60     0C 4E 05 F1 | 	add	fp, #12
12a64     A7 2A 02 FB | 	rdlong	local03, fp
12a68     0C 4E 85 F1 | 	sub	fp, #12
12a6c     A7 26 02 FB | 	rdlong	local01, fp
12a70     13 2B 0A F2 | 	cmp	local03, local01 wz
12a74     D8 00 90 5D |  if_ne	jmp	#LR__1513
12a78     4A 00 00 FF 
12a7c     80 E4 05 F1 | 	add	objptr, ##38016
12a80     F2 26 02 FB | 	rdlong	local01, objptr
12a84     13 29 02 F6 | 	mov	local02, local01
12a88     01 28 66 F0 | 	shl	local02, #1
12a8c     13 29 02 F1 | 	add	local02, local01
12a90     02 28 66 F0 | 	shl	local02, #2
12a94     03 00 00 FF 
12a98     04 E4 85 F1 | 	sub	objptr, ##1540
12a9c     F2 28 02 F1 | 	add	local02, objptr
12aa0     08 4E 05 F1 | 	add	fp, #8
12aa4     A7 2A 02 FB | 	rdlong	local03, fp
12aa8     14 2B 62 FC | 	wrlong	local03, local02
12aac     03 00 00 FF 
12ab0     04 E4 05 F1 | 	add	objptr, ##1540
12ab4     F2 26 02 FB | 	rdlong	local01, objptr
12ab8     13 29 02 F6 | 	mov	local02, local01
12abc     01 28 66 F0 | 	shl	local02, #1
12ac0     13 29 02 F1 | 	add	local02, local01
12ac4     02 28 66 F0 | 	shl	local02, #2
12ac8     03 00 00 FF 
12acc     04 E4 85 F1 | 	sub	objptr, ##1540
12ad0     F2 28 02 F1 | 	add	local02, objptr
12ad4     08 28 06 F1 | 	add	local02, #8
12ad8     14 9D 68 FC | 	wrlong	#78, local02
12adc     03 00 00 FF 
12ae0     04 E4 05 F1 | 	add	objptr, ##1540
12ae4     F2 28 02 FB | 	rdlong	local02, objptr
12ae8     14 13 02 F6 | 	mov	arg01, local02
12aec     01 12 66 F0 | 	shl	arg01, #1
12af0     14 13 02 F1 | 	add	arg01, local02
12af4     02 12 66 F0 | 	shl	arg01, #2
12af8     03 00 00 FF 
12afc     04 E4 85 F1 | 	sub	objptr, ##1540
12b00     F2 12 02 F1 | 	add	arg01, objptr
12b04     09 00 00 FF 
12b08     44 E4 05 F1 | 	add	objptr, ##4676
12b0c     F2 14 02 FB | 	rdlong	arg02, objptr
12b10     02 2A 06 F6 | 	mov	local03, #2
12b14     14 2B 02 F1 | 	add	local03, local02
12b18     0B 00 00 FF 
12b1c     5C E4 85 F1 | 	sub	objptr, ##5724
12b20     F2 16 02 FB | 	rdlong	arg03, objptr
12b24     0B 2B 02 FD | 	qmul	local03, arg03
12b28     08 4E 85 F1 | 	sub	fp, #8
12b2c     39 00 00 FF 
12b30     98 E5 85 F1 | 	sub	objptr, ##29592
12b34     18 2A 62 FD | 	getqx	local03
12b38     15 15 02 F1 | 	add	arg02, local03
12b3c     14 28 B1 FD | 	call	#_psram_spin2_write
12b40     0B 00 00 FF 
12b44     CC E4 85 F1 | 	sub	objptr, ##5836
12b48     18 FD BF FD | 	call	#_do_fast_goto
12b4c     0C 00 90 FD | 	jmp	#LR__1514
12b50                 | LR__1513
12b50     26 12 06 F6 | 	mov	arg01, #38
12b54     00 14 06 F6 | 	mov	arg02, #0
12b58     F4 F9 B0 FD | 	call	#_printerror
12b5c                 | LR__1514
12b5c     A7 F0 03 F6 | 	mov	ptra, fp
12b60     B2 00 A0 FD | 	call	#popregs_
12b64                 | _do_find_goto_ret
12b64     2D 00 64 FD | 	ret
12b68                 | 
12b68                 | ' 
12b68                 | ' '------- slow goto  
12b68                 | ' 
12b68                 | ' sub do_slow_goto
12b68                 | _do_slow_goto
12b68     02 4A 05 F6 | 	mov	COUNT_, #2
12b6c     A8 00 A0 FD | 	call	#pushregs_
12b70     30 F0 07 F1 | 	add	ptra, #48
12b74     68 A7 BF FD | 	call	#_pop
12b78     FF 26 02 F6 | 	mov	local01, result3
12b7c     24 4E 05 F1 | 	add	fp, #36
12b80     A7 FA 61 FC | 	wrlong	result1, fp
12b84     04 4E 05 F1 | 	add	fp, #4
12b88     A7 FC 61 FC | 	wrlong	result2, fp
12b8c     04 4E 05 F1 | 	add	fp, #4
12b90     A7 26 62 FC | 	wrlong	local01, fp
12b94     08 4E 85 F1 | 	sub	fp, #8
12b98     A7 12 02 F6 | 	mov	arg01, fp
12b9c     24 4E 85 F1 | 	sub	fp, #36
12ba0     20 A9 BF FD | 	call	#_converttoint
12ba4     A7 FA 61 FC | 	wrlong	result1, fp
12ba8     4A 00 00 FF 
12bac     88 E4 05 F1 | 	add	objptr, ##38024
12bb0     F2 28 02 FB | 	rdlong	local02, objptr
12bb4     4A 00 00 FF 
12bb8     88 E4 85 F1 | 	sub	objptr, ##38024
12bbc     04 4E 05 F1 | 	add	fp, #4
12bc0     A7 28 62 FC | 	wrlong	local02, fp
12bc4     04 4E 85 F1 | 	sub	fp, #4
12bc8                 | ' 
12bc8                 | ' t1=pop() : gotoline=converttoint(t1)
12bc8                 | ' gotoptr=programstart
12bc8                 | ' do
12bc8                 | LR__1520
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 12 02 F6 | 	mov	arg01, fp
12bd0     08 4E 85 F1 | 	sub	fp, #8
12bd4     A7 14 02 FB | 	rdlong	arg02, fp
12bd8     04 4E 85 F1 | 	sub	fp, #4
12bdc     18 16 06 F6 | 	mov	arg03, #24
12be0     0B 00 00 FF 
12be4     CC E4 05 F1 | 	add	objptr, ##5836
12be8     CC 26 B1 FD | 	call	#_psram_spin2_read1
12bec     0B 00 00 FF 
12bf0     CC E4 85 F1 | 	sub	objptr, ##5836
12bf4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12bf4                 | '   if gotoheader(0)<>$FFFFFFFF then
12bf4     0C 4E 05 F1 | 	add	fp, #12
12bf8     A7 28 02 FB | 	rdlong	local02, fp
12bfc     0C 4E 85 F1 | 	sub	fp, #12
12c00     FF FF 7F FF 
12c04     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12c08     24 00 90 AD |  if_e	jmp	#LR__1521
12c0c     04 4E 05 F1 | 	add	fp, #4
12c10     A7 28 02 FB | 	rdlong	local02, fp
12c14     04 4E 05 F1 | 	add	fp, #4
12c18     A7 28 62 FC | 	wrlong	local02, fp
12c1c     18 4E 05 F1 | 	add	fp, #24
12c20     A7 28 02 FB | 	rdlong	local02, fp
12c24     1C 4E 85 F1 | 	sub	fp, #28
12c28     A7 28 62 FC | 	wrlong	local02, fp
12c2c     04 4E 85 F1 | 	sub	fp, #4
12c30                 | LR__1521
12c30     20 4E 05 F1 | 	add	fp, #32
12c34     A7 28 02 FB | 	rdlong	local02, fp
12c38     20 4E 85 F1 | 	sub	fp, #32
12c3c     FF FF 3F FF 
12c40     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12c44     0C 4E 05 51 |  if_ne	add	fp, #12
12c48     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c4c     0C 4E 85 51 |  if_ne	sub	fp, #12
12c50     FF FF 7F 5F 
12c54     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12c58     18 00 90 AD |  if_e	jmp	#LR__1522
12c5c     0C 4E 05 F1 | 	add	fp, #12
12c60     A7 28 02 FB | 	rdlong	local02, fp
12c64     0C 4E 85 F1 | 	sub	fp, #12
12c68     A7 16 02 FB | 	rdlong	arg03, fp
12c6c     0B 29 0A F2 | 	cmp	local02, arg03 wz
12c70     54 FF 9F 5D |  if_ne	jmp	#LR__1520
12c74                 | LR__1522
12c74                 | ' if gotoheader(0)=gotoline then  
12c74     0C 4E 05 F1 | 	add	fp, #12
12c78     A7 28 02 FB | 	rdlong	local02, fp
12c7c     0C 4E 85 F1 | 	sub	fp, #12
12c80     A7 26 02 FB | 	rdlong	local01, fp
12c84     13 29 0A F2 | 	cmp	local02, local01 wz
12c88     60 00 90 5D |  if_ne	jmp	#LR__1523
12c8c     08 4E 05 F1 | 	add	fp, #8
12c90     A7 28 02 FB | 	rdlong	local02, fp
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     50 00 00 FF 
12c9c     B8 E4 05 F1 | 	add	objptr, ##41144
12ca0     F2 28 62 FC | 	wrlong	local02, objptr
12ca4     06 00 00 FF 
12ca8     3C E4 85 F1 | 	sub	objptr, ##3132
12cac     F2 28 02 FB | 	rdlong	local02, objptr
12cb0     01 28 86 F1 | 	sub	local02, #1
12cb4     04 E4 05 F1 | 	add	objptr, #4
12cb8     F2 28 62 FC | 	wrlong	local02, objptr
12cbc                 | '    runptr=oldgotoptr
12cbc                 | '    lineptr_e=lineptr-1
12cbc                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
12cbc     06 00 00 FF 
12cc0     84 E4 05 F1 | 	add	objptr, ##3204
12cc4     F2 28 02 FB | 	rdlong	local02, objptr
12cc8     50 00 00 FF 
12ccc     04 E5 85 F1 | 	sub	objptr, ##41220
12cd0     FF FF 3F FF 
12cd4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12cd8     50 00 00 AF 
12cdc     04 E5 05 A1 |  if_e	add	objptr, ##41220
12ce0     F2 00 68 AC |  if_e	wrlong	#0, objptr
12ce4     50 00 00 AF 
12ce8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
12cec                 | LR__1523
12cec     A7 F0 03 F6 | 	mov	ptra, fp
12cf0     B2 00 A0 FD | 	call	#popregs_
12cf4                 | _do_slow_goto_ret
12cf4     2D 00 64 FD | 	ret
12cf8                 | 
12cf8                 | ' 
12cf8                 | ' ' ----------------  hex$
12cf8                 | ' 
12cf8                 | ' sub do_hex
12cf8                 | _do_hex
12cf8     01 4A 05 F6 | 	mov	COUNT_, #1
12cfc     A8 00 A0 FD | 	call	#pushregs_
12d00     18 F0 07 F1 | 	add	ptra, #24
12d04     4A 00 00 FF 
12d08     80 E4 05 F1 | 	add	objptr, ##38016
12d0c     F2 26 02 FB | 	rdlong	local01, objptr
12d10     13 17 02 F6 | 	mov	arg03, local01
12d14     01 16 66 F0 | 	shl	arg03, #1
12d18     13 17 02 F1 | 	add	arg03, local01
12d1c     02 16 66 F0 | 	shl	arg03, #2
12d20     03 00 00 FF 
12d24     04 E4 85 F1 | 	sub	objptr, ##1540
12d28     F2 16 02 F1 | 	add	arg03, objptr
12d2c     0B 17 02 FB | 	rdlong	arg03, arg03
12d30     0C 4E 05 F1 | 	add	fp, #12
12d34     A7 16 62 FC | 	wrlong	arg03, fp
12d38                 | ' 
12d38                 | ' numpar=compiledline(lineptr_e).result.uresult
12d38                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
12d38     0C 4E 85 F1 | 	sub	fp, #12
12d3c     03 16 16 F2 | 	cmp	arg03, #3 wc
12d40     47 00 00 FF 
12d44     7C E4 85 F1 | 	sub	objptr, ##36476
12d48     0C 4E 05 C1 |  if_b	add	fp, #12
12d4c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12d50     0C 4E 85 C1 |  if_b	sub	fp, #12
12d54     40 00 90 4D |  if_c_and_nz	jmp	#LR__1530
12d58     00 12 06 F6 | 	mov	arg01, #0
12d5c     84 8E B1 FD | 	call	#__system___getiolock_0600
12d60     FD 12 02 F6 | 	mov	arg01, result1
12d64     D8 31 B1 FD | 	call	#__system___lockmem
12d68     B1 01 00 FF 
12d6c     C8 15 06 F6 | 	mov	arg02, ##@LR__5865
12d70     00 12 06 F6 | 	mov	arg01, #0
12d74     00 16 06 F6 | 	mov	arg03, #0
12d78     BC 3E B1 FD | 	call	#__system___basic_print_string
12d7c     00 12 06 F6 | 	mov	arg01, #0
12d80     60 8E B1 FD | 	call	#__system___getiolock_0600
12d84     FD 00 68 FC | 	wrlong	#0, result1
12d88     27 12 06 F6 | 	mov	arg01, #39
12d8c     00 14 06 F6 | 	mov	arg02, #0
12d90     BC F7 B0 FD | 	call	#_printerror
12d94     B8 00 90 FD | 	jmp	#LR__1533
12d98                 | LR__1530
12d98                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12d98     0C 4E 05 F1 | 	add	fp, #12
12d9c     A7 26 02 FB | 	rdlong	local01, fp
12da0     0C 4E 85 F1 | 	sub	fp, #12
12da4     02 26 0E F2 | 	cmp	local01, #2 wz
12da8     38 00 90 5D |  if_ne	jmp	#LR__1531
12dac     30 A5 BF FD | 	call	#_pop
12db0     FF 26 02 F6 | 	mov	local01, result3
12db4     A7 FA 61 FC | 	wrlong	result1, fp
12db8     04 4E 05 F1 | 	add	fp, #4
12dbc     A7 FC 61 FC | 	wrlong	result2, fp
12dc0     04 4E 05 F1 | 	add	fp, #4
12dc4     A7 26 62 FC | 	wrlong	local01, fp
12dc8     08 4E 85 F1 | 	sub	fp, #8
12dcc     A7 12 02 F6 | 	mov	arg01, fp
12dd0     F0 A6 BF FD | 	call	#_converttoint
12dd4     14 4E 05 F1 | 	add	fp, #20
12dd8     A7 FA 61 FC | 	wrlong	result1, fp
12ddc     14 4E 85 F1 | 	sub	fp, #20
12de0     0C 00 90 FD | 	jmp	#LR__1532
12de4                 | LR__1531
12de4     14 4E 05 F1 | 	add	fp, #20
12de8     A7 10 68 FC | 	wrlong	#8, fp
12dec     14 4E 85 F1 | 	sub	fp, #20
12df0                 | LR__1532
12df0     EC A4 BF FD | 	call	#_pop
12df4     FF 26 02 F6 | 	mov	local01, result3
12df8     A7 FA 61 FC | 	wrlong	result1, fp
12dfc     04 4E 05 F1 | 	add	fp, #4
12e00     A7 FC 61 FC | 	wrlong	result2, fp
12e04     04 4E 05 F1 | 	add	fp, #4
12e08     A7 26 62 FC | 	wrlong	local01, fp
12e0c     08 4E 85 F1 | 	sub	fp, #8
12e10     A7 12 02 F6 | 	mov	arg01, fp
12e14     AC A6 BF FD | 	call	#_converttoint
12e18     10 4E 05 F1 | 	add	fp, #16
12e1c     A7 FA 61 FC | 	wrlong	result1, fp
12e20     FD 12 02 F6 | 	mov	arg01, result1
12e24     04 4E 05 F1 | 	add	fp, #4
12e28     A7 14 02 FB | 	rdlong	arg02, fp
12e2c     14 4E 85 F1 | 	sub	fp, #20
12e30     10 16 06 F6 | 	mov	arg03, #16
12e34     DC 53 B1 FD | 	call	#__system__Number_S
12e38     A7 FA 61 FC | 	wrlong	result1, fp
12e3c     08 4E 05 F1 | 	add	fp, #8
12e40     A7 3E 68 FC | 	wrlong	#31, fp
12e44     08 4E 85 F1 | 	sub	fp, #8
12e48     A7 12 02 F6 | 	mov	arg01, fp
12e4c     28 A5 BF FD | 	call	#_push
12e50                 | LR__1533
12e50     A7 F0 03 F6 | 	mov	ptra, fp
12e54     B2 00 A0 FD | 	call	#popregs_
12e58                 | _do_hex_ret
12e58     2D 00 64 FD | 	ret
12e5c                 | 
12e5c                 | ' 
12e5c                 | ' ' ----------------  if
12e5c                 | ' 
12e5c                 | ' sub do_if
12e5c                 | _do_if
12e5c     05 4A 05 F6 | 	mov	COUNT_, #5
12e60     A8 00 A0 FD | 	call	#pushregs_
12e64     78 A4 BF FD | 	call	#_pop
12e68     FD 26 0A F6 | 	mov	local01, result1 wz
12e6c     FE 28 02 F6 | 	mov	local02, result2
12e70     FF 2A 02 F6 | 	mov	local03, result3
12e74                 | ' t1=pop()
12e74                 | ' ' if uresult=0, jump over else
12e74                 | ' if t1.result.uresult = 0 then 
12e74     BC 00 90 5D |  if_ne	jmp	#LR__1542
12e78                 | '   for i=lineptr_e to lineptr-1
12e78     4A 00 00 FF 
12e7c     80 E4 05 F1 | 	add	objptr, ##38016
12e80     F2 2C 02 FB | 	rdlong	local04, objptr
12e84     04 E4 85 F1 | 	sub	objptr, #4
12e88     F2 2E 02 FB | 	rdlong	local05, objptr
12e8c     4A 00 00 FF 
12e90     7C E4 85 F1 | 	sub	objptr, ##38012
12e94                 | LR__1540
12e94     17 2D 52 F2 | 	cmps	local04, local05 wc
12e98     78 00 90 3D |  if_ae	jmp	#LR__1541
12e9c     16 FF 01 F6 | 	mov	result3, local04
12ea0     01 FE 65 F0 | 	shl	result3, #1
12ea4     16 FF 01 F1 | 	add	result3, local04
12ea8     02 FE 65 F0 | 	shl	result3, #2
12eac     47 00 00 FF 
12eb0     7C E4 05 F1 | 	add	objptr, ##36476
12eb4     F2 FE 01 F1 | 	add	result3, objptr
12eb8     FF 26 02 FB | 	rdlong	local01, result3
12ebc     04 FE 05 F1 | 	add	result3, #4
12ec0     FF FC 01 FB | 	rdlong	result2, result3
12ec4     16 FF 01 F6 | 	mov	result3, local04
12ec8     01 FE 65 F0 | 	shl	result3, #1
12ecc     16 FF 01 F1 | 	add	result3, local04
12ed0     02 FE 65 F0 | 	shl	result3, #2
12ed4     F2 FE 01 F1 | 	add	result3, objptr
12ed8     08 FE 05 F1 | 	add	result3, #8
12edc     FF FE 01 FB | 	rdlong	result3, result3
12ee0     FE 28 02 F6 | 	mov	local02, result2
12ee4     FF 2A 02 F6 | 	mov	local03, result3
12ee8                 | '     t1=compiledline(i)
12ee8                 | '     if t1.result_type=token_else then lineptr_e=i : return
12ee8     5A 2A 0E F2 | 	cmp	local03, #90 wz
12eec     47 00 00 FF 
12ef0     7C E4 85 F1 | 	sub	objptr, ##36476
12ef4     4A 00 00 AF 
12ef8     80 E4 05 A1 |  if_e	add	objptr, ##38016
12efc     F2 2C 62 AC |  if_e	wrlong	local04, objptr
12f00     4A 00 00 AF 
12f04     80 E4 85 A1 |  if_e	sub	objptr, ##38016
12f08     28 00 90 AD |  if_e	jmp	#LR__1543
12f0c     01 2C 06 F1 | 	add	local04, #1
12f10     80 FF 9F FD | 	jmp	#LR__1540
12f14                 | LR__1541
12f14     4A 00 00 FF 
12f18     7C E4 05 F1 | 	add	objptr, ##38012
12f1c     F2 2E 02 FB | 	rdlong	local05, objptr
12f20     01 2E 86 F1 | 	sub	local05, #1
12f24     04 E4 05 F1 | 	add	objptr, #4
12f28     F2 2E 62 FC | 	wrlong	local05, objptr
12f2c     4A 00 00 FF 
12f30     80 E4 85 F1 | 	sub	objptr, ##38016
12f34                 | LR__1542
12f34                 | LR__1543
12f34     A7 F0 03 F6 | 	mov	ptra, fp
12f38     B2 00 A0 FD | 	call	#popregs_
12f3c                 | _do_if_ret
12f3c     2D 00 64 FD | 	ret
12f40                 | 
12f40                 | ' 
12f40                 | ' ' ----------------  inkey$
12f40                 | ' 
12f40                 | ' sub do_inkey
12f40                 | _do_inkey
12f40     02 4A 05 F6 | 	mov	COUNT_, #2
12f44     A8 00 A0 FD | 	call	#pushregs_
12f48     0C F0 07 F1 | 	add	ptra, #12
12f4c     94 27 B1 FD | 	call	#_usbnew_spin2_get_key
12f50     45 00 00 FF 
12f54     74 E4 05 F1 | 	add	objptr, ##35444
12f58     F2 FA 61 FC | 	wrlong	result1, objptr
12f5c                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
12f5c     45 00 00 FF 
12f60     74 E4 85 F1 | 	sub	objptr, ##35444
12f64     00 FA 0D F2 | 	cmp	result1, #0 wz
12f68     94 00 90 AD |  if_e	jmp	#LR__1551
12f6c     45 00 00 FF 
12f70     74 E4 05 F1 | 	add	objptr, ##35444
12f74     F2 1C 02 FB | 	rdlong	arg06, objptr
12f78     45 00 00 FF 
12f7c     74 E4 85 F1 | 	sub	objptr, ##35444
12f80     00 00 40 FF 
12f84     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12f88     45 00 00 CF 
12f8c     74 E4 05 C1 |  if_b	add	objptr, ##35444
12f90     F2 26 02 CB |  if_b	rdlong	local01, objptr
12f94     45 00 00 CF 
12f98     74 E4 85 C1 |  if_b	sub	objptr, ##35444
12f9c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12fa0     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12fa4     58 00 90 3D |  if_ae	jmp	#LR__1551
12fa8                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12fa8     50 00 00 FF 
12fac     3C E5 05 F1 | 	add	objptr, ##41276
12fb0     F2 1C 02 FB | 	rdlong	arg06, objptr
12fb4     50 00 00 FF 
12fb8     3C E5 85 F1 | 	sub	objptr, ##41276
12fbc     01 1C 0E F2 | 	cmp	arg06, #1 wz
12fc0     3C 00 90 5D |  if_ne	jmp	#LR__1550
12fc4     52 00 00 FF 
12fc8     A4 E4 05 F1 | 	add	objptr, ##42148
12fcc     F2 14 02 FB | 	rdlong	arg02, objptr
12fd0     04 E4 85 F1 | 	sub	objptr, #4
12fd4     F2 1A 02 FB | 	rdlong	arg05, objptr
12fd8     07 12 06 F6 | 	mov	arg01, #7
12fdc     56 00 00 FF 
12fe0     44 16 06 F6 | 	mov	arg03, ##44100
12fe4     0C 18 C6 F9 | 	decod	arg04, #12
12fe8     01 1C 66 F6 | 	neg	arg06, #1
12fec     46 00 00 FF 
12ff0     D4 E5 85 F1 | 	sub	objptr, ##36308
12ff4     D8 2A B1 FD | 	call	#_audio096_spin2_play
12ff8     0B 00 00 FF 
12ffc     CC E4 85 F1 | 	sub	objptr, ##5836
13000                 | LR__1550
13000                 | LR__1551
13000                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13000     45 00 00 FF 
13004     74 E4 05 F1 | 	add	objptr, ##35444
13008     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1300c     45 00 00 FF 
13010     74 E4 85 F1 | 	sub	objptr, ##35444
13014     D4 01 90 AD |  if_e	jmp	#LR__1560
13018     45 00 00 FF 
1301c     74 E4 05 F1 | 	add	objptr, ##35444
13020     F2 1C 02 FB | 	rdlong	arg06, objptr
13024     45 00 00 FF 
13028     74 E4 85 F1 | 	sub	objptr, ##35444
1302c     00 00 40 FF 
13030     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13034     45 00 00 CF 
13038     74 E4 05 C1 |  if_b	add	objptr, ##35444
1303c     F2 26 02 CB |  if_b	rdlong	local01, objptr
13040     45 00 00 CF 
13044     74 E4 85 C1 |  if_b	sub	objptr, ##35444
13048     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
1304c     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13050     98 01 90 3D |  if_ae	jmp	#LR__1560
13054                 | '   if leds and 2 = 2 then 
13054     52 00 00 FF 
13058     E0 E4 05 F1 | 	add	objptr, ##42208
1305c     F2 26 0A FB | 	rdlong	local01, objptr wz
13060     52 00 00 FF 
13064     E0 E4 85 F1 | 	sub	objptr, ##42208
13068     58 01 90 AD |  if_e	jmp	#LR__1559
1306c                 | '     if key>96 andalso key<123 then
1306c     45 00 00 FF 
13070     74 E4 05 F1 | 	add	objptr, ##35444
13074     F2 26 02 FB | 	rdlong	local01, objptr
13078     45 00 00 FF 
1307c     74 E4 85 F1 | 	sub	objptr, ##35444
13080     61 26 16 F2 | 	cmp	local01, #97 wc
13084     3C 00 90 CD |  if_b	jmp	#LR__1552
13088     45 00 00 FF 
1308c     74 E4 05 F1 | 	add	objptr, ##35444
13090     F2 26 02 FB | 	rdlong	local01, objptr
13094     45 00 00 FF 
13098     74 E4 85 F1 | 	sub	objptr, ##35444
1309c     7B 26 16 F2 | 	cmp	local01, #123 wc
130a0     20 00 90 3D |  if_ae	jmp	#LR__1552
130a4     45 00 00 FF 
130a8     74 E4 05 F1 | 	add	objptr, ##35444
130ac     F2 26 02 FB | 	rdlong	local01, objptr
130b0     20 26 86 F1 | 	sub	local01, #32
130b4     F2 26 62 FC | 	wrlong	local01, objptr
130b8     45 00 00 FF 
130bc     74 E4 85 F1 | 	sub	objptr, ##35444
130c0     00 01 90 FD | 	jmp	#LR__1558
130c4                 | LR__1552
130c4     45 00 00 FF 
130c8     74 E4 05 F1 | 	add	objptr, ##35444
130cc     F2 26 02 FB | 	rdlong	local01, objptr
130d0     45 00 00 FF 
130d4     74 E4 85 F1 | 	sub	objptr, ##35444
130d8     41 26 16 F2 | 	cmp	local01, #65 wc
130dc     3C 00 90 CD |  if_b	jmp	#LR__1553
130e0     45 00 00 FF 
130e4     74 E4 05 F1 | 	add	objptr, ##35444
130e8     F2 26 02 FB | 	rdlong	local01, objptr
130ec     45 00 00 FF 
130f0     74 E4 85 F1 | 	sub	objptr, ##35444
130f4     5B 26 16 F2 | 	cmp	local01, #91 wc
130f8     20 00 90 3D |  if_ae	jmp	#LR__1553
130fc     45 00 00 FF 
13100     74 E4 05 F1 | 	add	objptr, ##35444
13104     F2 26 02 FB | 	rdlong	local01, objptr
13108     20 26 06 F1 | 	add	local01, #32
1310c     F2 26 62 FC | 	wrlong	local01, objptr
13110     45 00 00 FF 
13114     74 E4 85 F1 | 	sub	objptr, ##35444
13118     A8 00 90 FD | 	jmp	#LR__1557
1311c                 | LR__1553
1311c     45 00 00 FF 
13120     74 E4 05 F1 | 	add	objptr, ##35444
13124     F2 26 02 FB | 	rdlong	local01, objptr
13128     45 00 00 FF 
1312c     74 E4 85 F1 | 	sub	objptr, ##35444
13130     17 26 16 F2 | 	cmp	local01, #23 wc
13134     3C 00 90 CD |  if_b	jmp	#LR__1554
13138     45 00 00 FF 
1313c     74 E4 05 F1 | 	add	objptr, ##35444
13140     F2 26 02 FB | 	rdlong	local01, objptr
13144     45 00 00 FF 
13148     74 E4 85 F1 | 	sub	objptr, ##35444
1314c     20 26 16 F2 | 	cmp	local01, #32 wc
13150     20 00 90 3D |  if_ae	jmp	#LR__1554
13154     45 00 00 FF 
13158     74 E4 05 F1 | 	add	objptr, ##35444
1315c     F2 26 02 FB | 	rdlong	local01, objptr
13160     09 26 86 F1 | 	sub	local01, #9
13164     F2 26 62 FC | 	wrlong	local01, objptr
13168     45 00 00 FF 
1316c     74 E4 85 F1 | 	sub	objptr, ##35444
13170     50 00 90 FD | 	jmp	#LR__1556
13174                 | LR__1554
13174     45 00 00 FF 
13178     74 E4 05 F1 | 	add	objptr, ##35444
1317c     F2 28 02 FB | 	rdlong	local02, objptr
13180     45 00 00 FF 
13184     74 E4 85 F1 | 	sub	objptr, ##35444
13188     0E 28 16 F2 | 	cmp	local02, #14 wc
1318c     34 00 90 CD |  if_b	jmp	#LR__1555
13190     45 00 00 FF 
13194     74 E4 05 F1 | 	add	objptr, ##35444
13198     F2 26 02 FB | 	rdlong	local01, objptr
1319c     45 00 00 FF 
131a0     74 E4 85 F1 | 	sub	objptr, ##35444
131a4     17 26 16 F2 | 	cmp	local01, #23 wc
131a8     52 00 00 CF 
131ac     E4 E4 05 C1 |  if_b	add	objptr, ##42212
131b0     F2 28 02 CB |  if_b	rdlong	local02, objptr
131b4     27 28 06 C1 |  if_b	add	local02, #39
131b8     F2 28 62 CC |  if_b	wrlong	local02, objptr
131bc     52 00 00 CF 
131c0     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
131c4                 | LR__1555
131c4                 | LR__1556
131c4                 | LR__1557
131c4                 | LR__1558
131c4                 | LR__1559
131c4     45 00 00 FF 
131c8     74 E4 05 F1 | 	add	objptr, ##35444
131cc     F2 12 02 FB | 	rdlong	arg01, objptr
131d0     45 00 00 FF 
131d4     74 E4 85 F1 | 	sub	objptr, ##35444
131d8     F4 F6 B0 FD | 	call	#_scantochar
131dc     FD 12 02 F6 | 	mov	arg01, result1
131e0     A0 4F B1 FD | 	call	#__system__Chr_S
131e4     A7 FA 61 FC | 	wrlong	result1, fp
131e8     0C 00 90 FD | 	jmp	#LR__1561
131ec                 | LR__1560
131ec     B1 01 00 FF 
131f0     CF 29 06 F6 | 	mov	local02, ##@LR__5866
131f4     A7 28 62 FC | 	wrlong	local02, fp
131f8                 | LR__1561
131f8     08 4E 05 F1 | 	add	fp, #8
131fc     A7 3E 68 FC | 	wrlong	#31, fp
13200     08 4E 85 F1 | 	sub	fp, #8
13204     A7 12 02 F6 | 	mov	arg01, fp
13208     6C A1 BF FD | 	call	#_push
1320c     A7 F0 03 F6 | 	mov	ptra, fp
13210     B2 00 A0 FD | 	call	#popregs_
13214                 | _do_inkey_ret
13214     2D 00 64 FD | 	ret
13218                 | 
13218                 | ' 
13218                 | ' ' ----------------  ink
13218                 | ' 
13218                 | ' sub do_ink
13218                 | _do_ink
13218     00 4A 05 F6 | 	mov	COUNT_, #0
1321c     A8 00 A0 FD | 	call	#pushregs_
13220     0C F0 07 F1 | 	add	ptra, #12
13224     B8 A0 BF FD | 	call	#_pop
13228     FF 14 02 F6 | 	mov	arg02, result3
1322c     A7 FA 61 FC | 	wrlong	result1, fp
13230     04 4E 05 F1 | 	add	fp, #4
13234     A7 FC 61 FC | 	wrlong	result2, fp
13238     04 4E 05 F1 | 	add	fp, #4
1323c     A7 14 62 FC | 	wrlong	arg02, fp
13240     08 4E 85 F1 | 	sub	fp, #8
13244     A7 12 02 F6 | 	mov	arg01, fp
13248     78 A2 BF FD | 	call	#_converttoint
1324c     37 00 00 FF 
13250     3C E4 05 F1 | 	add	objptr, ##28220
13254     F2 FA 61 FC | 	wrlong	result1, objptr
13258     04 E4 85 F1 | 	sub	objptr, #4
1325c     F2 14 02 FB | 	rdlong	arg02, objptr
13260                 | ' 
13260                 | ' write_color:=ff
13260     36 00 00 FF 
13264     F7 E5 85 F1 | 	sub	objptr, ##28151
13268     F2 FA 61 FC | 	wrlong	result1, objptr
1326c                 | ' write_background:=bb
1326c     04 E4 05 F1 | 	add	objptr, #4
13270     F2 14 62 FC | 	wrlong	arg02, objptr
13274     36 00 00 FF 
13278     F7 E5 05 F1 | 	add	objptr, ##28151
1327c     F2 12 02 FB | 	rdlong	arg01, objptr
13280     37 00 00 FF 
13284     3C E4 85 F1 | 	sub	objptr, ##28220
13288     9C FE B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1328c     A7 F0 03 F6 | 	mov	ptra, fp
13290     B2 00 A0 FD | 	call	#popregs_
13294                 | _do_ink_ret
13294     2D 00 64 FD | 	ret
13298                 | 
13298                 | ' 
13298                 | ' ' ----------------  int
13298                 | ' 
13298                 | ' sub do_int
13298                 | _do_int
13298     02 4A 05 F6 | 	mov	COUNT_, #2
1329c     A8 00 A0 FD | 	call	#pushregs_
132a0     10 F0 07 F1 | 	add	ptra, #16
132a4     38 A0 BF FD | 	call	#_pop
132a8     FE 26 02 F6 | 	mov	local01, result2
132ac     FF 28 02 F6 | 	mov	local02, result3
132b0     A7 FA 61 FC | 	wrlong	result1, fp
132b4     04 4E 05 F1 | 	add	fp, #4
132b8     A7 26 62 FC | 	wrlong	local01, fp
132bc     04 4E 05 F1 | 	add	fp, #4
132c0     A7 28 62 FC | 	wrlong	local02, fp
132c4                 | ' 
132c4                 | ' t1=pop()
132c4                 | ' select case t1.result_type
132c4     08 4E 85 F1 | 	sub	fp, #8
132c8     1E 28 0E F2 | 	cmp	local02, #30 wz
132cc     14 00 90 AD |  if_e	jmp	#LR__1570
132d0     1F 28 0E F2 | 	cmp	local02, #31 wz
132d4     20 00 90 AD |  if_e	jmp	#LR__1571
132d8     2B 28 0E F2 | 	cmp	local02, #43 wz
132dc     34 00 90 AD |  if_e	jmp	#LR__1572
132e0     50 00 90 FD | 	jmp	#LR__1573
132e4                 | LR__1570
132e4     A7 12 02 FB | 	rdlong	arg01, fp
132e8     00 14 06 F6 | 	mov	arg02, #0
132ec     94 5F B1 FD | 	call	#__system___float_tointeger
132f0     A7 FA 61 FC | 	wrlong	result1, fp
132f4     3C 00 90 FD | 	jmp	#LR__1573
132f8                 | LR__1571
132f8     A7 12 02 FB | 	rdlong	arg01, fp
132fc     C8 62 B1 FD | 	call	#__system____builtin_atof
13300     FD 12 02 F6 | 	mov	arg01, result1
13304     00 14 06 F6 | 	mov	arg02, #0
13308     78 5F B1 FD | 	call	#__system___float_tointeger
1330c     A7 FA 61 FC | 	wrlong	result1, fp
13310     20 00 90 FD | 	jmp	#LR__1573
13314                 | LR__1572
13314     A7 12 02 FB | 	rdlong	arg01, fp
13318     3C A1 BF FD | 	call	#_convertstring
1331c     FD 12 02 F6 | 	mov	arg01, result1
13320     A4 62 B1 FD | 	call	#__system____builtin_atof
13324     FD 12 02 F6 | 	mov	arg01, result1
13328     00 14 06 F6 | 	mov	arg02, #0
1332c     54 5F B1 FD | 	call	#__system___float_tointeger
13330     A7 FA 61 FC | 	wrlong	result1, fp
13334                 | LR__1573
13334     08 4E 05 F1 | 	add	fp, #8
13338     A7 38 68 FC | 	wrlong	#28, fp
1333c     08 4E 85 F1 | 	sub	fp, #8
13340     A7 12 02 F6 | 	mov	arg01, fp
13344     30 A0 BF FD | 	call	#_push
13348     A7 F0 03 F6 | 	mov	ptra, fp
1334c     B2 00 A0 FD | 	call	#popregs_
13350                 | _do_int_ret
13350     2D 00 64 FD | 	ret
13354                 | 
13354                 | ' 
13354                 | ' ' ----------------  input
13354                 | ' 
13354                 | ' sub do_input
13354                 | _do_input
13354     11 4A 05 F6 | 	mov	COUNT_, #17
13358     A8 00 A0 FD | 	call	#pushregs_
1335c     50 F1 07 F1 | 	add	ptra, #336
13360     4A 00 00 FF 
13364     80 E4 05 F1 | 	add	objptr, ##38016
13368     F2 FE 01 FB | 	rdlong	result3, objptr
1336c     FF FC 01 F6 | 	mov	result2, result3
13370     01 FC 65 F0 | 	shl	result2, #1
13374     FF FC 01 F1 | 	add	result2, result3
13378     02 FC 65 F0 | 	shl	result2, #2
1337c     03 00 00 FF 
13380     04 E4 85 F1 | 	sub	objptr, ##1540
13384     F2 FC 01 F1 | 	add	result2, objptr
13388     FE FC 01 FB | 	rdlong	result2, result2
1338c     08 4E 05 F1 | 	add	fp, #8
13390     A7 FC 61 FC | 	wrlong	result2, fp
13394                 | ' 
13394                 | ' numpar=compiledline(lineptr_e).result.uresult
13394                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13394     08 4E 85 F1 | 	sub	fp, #8
13398     01 FC 15 F2 | 	cmp	result2, #1 wc
1339c     47 00 00 FF 
133a0     7C E4 85 F1 | 	sub	objptr, ##36476
133a4     14 00 90 CD |  if_b	jmp	#LR__1580
133a8     08 4E 05 F1 | 	add	fp, #8
133ac     A7 FC 01 FB | 	rdlong	result2, fp
133b0     08 4E 85 F1 | 	sub	fp, #8
133b4     41 FC 15 F2 | 	cmp	result2, #65 wc
133b8     50 00 90 CD |  if_b	jmp	#LR__1581
133bc                 | LR__1580
133bc     00 12 06 F6 | 	mov	arg01, #0
133c0     20 88 B1 FD | 	call	#__system___getiolock_0600
133c4     FD 12 02 F6 | 	mov	arg01, result1
133c8     74 2B B1 FD | 	call	#__system___lockmem
133cc     B1 01 00 FF 
133d0     D0 15 06 F6 | 	mov	arg02, ##@LR__5867
133d4     00 12 06 F6 | 	mov	arg01, #0
133d8     00 16 06 F6 | 	mov	arg03, #0
133dc     58 38 B1 FD | 	call	#__system___basic_print_string
133e0     00 12 06 F6 | 	mov	arg01, #0
133e4     FC 87 B1 FD | 	call	#__system___getiolock_0600
133e8     FD 00 68 FC | 	wrlong	#0, result1
133ec     50 00 00 FF 
133f0     F0 E4 05 F1 | 	add	objptr, ##41200
133f4     F2 14 02 FB | 	rdlong	arg02, objptr
133f8     50 00 00 FF 
133fc     F0 E4 85 F1 | 	sub	objptr, ##41200
13400     27 12 06 F6 | 	mov	arg01, #39
13404     48 F1 B0 FD | 	call	#_printerror
13408     44 0B 90 FD | 	jmp	#LR__1630
1340c                 | LR__1581
1340c     08 4E 05 F1 | 	add	fp, #8
13410     A7 FC 01 FB | 	rdlong	result2, fp
13414     01 FC 85 F1 | 	sub	result2, #1
13418     28 4F 05 F1 | 	add	fp, #296
1341c     A7 FC 61 FC | 	wrlong	result2, fp
13420     3C E4 05 F1 | 	add	objptr, #60
13424     F2 FC E1 FA | 	rdword	result2, objptr
13428     FE FC 51 F6 | 	abs	result2, result2 wc
1342c     01 FC 45 F0 | 	shr	result2, #1
13430     FE FC 81 F6 | 	negc	result2, result2
13434     0C 4E 05 F1 | 	add	fp, #12
13438     A7 FC 61 FC | 	wrlong	result2, fp
1343c     02 E4 05 F1 | 	add	objptr, #2
13440     F2 26 C2 FA | 	rdbyte	local01, objptr
13444     3E E4 85 F1 | 	sub	objptr, #62
13448     04 4E 05 F1 | 	add	fp, #4
1344c     A7 26 62 FC | 	wrlong	local01, fp
13450     40 4F 85 F1 | 	sub	fp, #320
13454                 | ' i=numpar-1
13454                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13454                 | ' do
13454                 | LR__1582
13454     AC D3 BE FD | 	call	#_edit
13458     A7 FA 61 FC | 	wrlong	result1, fp
1345c                 | ' 
1345c                 | '   line$=edit()
1345c                 | ' 
1345c                 | '   if v.cursor_y=cpy+1 then
1345c     3E E4 05 F1 | 	add	objptr, #62
13460     F2 26 C2 FA | 	rdbyte	local01, objptr
13464     3E E4 85 F1 | 	sub	objptr, #62
13468     40 4F 05 F1 | 	add	fp, #320
1346c     A7 16 02 FB | 	rdlong	arg03, fp
13470     40 4F 85 F1 | 	sub	fp, #320
13474     01 16 06 F1 | 	add	arg03, #1
13478     0B 27 0A F2 | 	cmp	local01, arg03 wz
1347c     6C 00 90 5D |  if_ne	jmp	#LR__1585
13480     A7 26 02 FB | 	rdlong	local01, fp
13484     13 13 02 F6 | 	mov	arg01, local01
13488     09 29 02 F6 | 	mov	local02, arg01
1348c     97 06 48 FB | 	callpa	#(@LR__1584-@LR__1583)>>2,fcache_load_ptr_
13490                 | LR__1583
13490     14 FB C9 FA | 	rdbyte	result1, local02 wz
13494     01 28 06 51 |  if_ne	add	local02, #1
13498     F4 FF 9F 5D |  if_ne	jmp	#LR__1583
1349c                 | LR__1584
1349c     09 29 82 F1 | 	sub	local02, arg01
134a0     14 15 02 F6 | 	mov	arg02, local02
134a4     3C 4F 05 F1 | 	add	fp, #316
134a8     A7 16 02 FB | 	rdlong	arg03, fp
134ac     3C 4F 85 F1 | 	sub	fp, #316
134b0     0B 15 82 F1 | 	sub	arg02, arg03
134b4     37 00 00 FF 
134b8     34 E4 05 F1 | 	add	objptr, ##28212
134bc     F2 16 02 FB | 	rdlong	arg03, objptr
134c0     37 00 00 FF 
134c4     34 E4 85 F1 | 	sub	objptr, ##28212
134c8     0B 15 02 F1 | 	add	arg02, arg03
134cc     13 13 02 F6 | 	mov	arg01, local01
134d0     74 4B B1 FD | 	call	#__system__Right_S
134d4     FD 12 02 F6 | 	mov	arg01, result1
134d8     74 4F B1 FD | 	call	#__system__RTrim_S
134dc     FD 12 02 F6 | 	mov	arg01, result1
134e0     AC 4E B1 FD | 	call	#__system__LTrim_S
134e4     A7 FA 61 FC | 	wrlong	result1, fp
134e8     14 00 90 FD | 	jmp	#LR__1586
134ec                 | LR__1585
134ec     A7 12 02 FB | 	rdlong	arg01, fp
134f0     5C 4F B1 FD | 	call	#__system__RTrim_S
134f4     FD 12 02 F6 | 	mov	arg01, result1
134f8     94 4E B1 FD | 	call	#__system__LTrim_S
134fc     A7 FA 61 FC | 	wrlong	result1, fp
13500                 | LR__1586
13500                 | '   do
13500                 | LR__1587
13500     A7 14 02 FB | 	rdlong	arg02, fp
13504     B1 01 00 FF 
13508     DB 17 06 F6 | 	mov	arg03, ##@LR__5868
1350c     01 12 06 F6 | 	mov	arg01, #1
13510     F4 4F B1 FD | 	call	#__system__Instr
13514     0C 4E 05 F1 | 	add	fp, #12
13518     A7 FA 61 FC | 	wrlong	result1, fp
1351c                 | '    comma=instr(1,line$,",")  
1351c                 | '    if comma>0  then 
1351c     0C 4E 85 F1 | 	sub	fp, #12
13520     01 FA 15 F2 | 	cmp	result1, #1 wc
13524     68 00 90 CD |  if_b	jmp	#LR__1590
13528     A7 12 02 FB | 	rdlong	arg01, fp
1352c     0C 4E 05 F1 | 	add	fp, #12
13530     A7 14 02 FB | 	rdlong	arg02, fp
13534     0C 4E 85 F1 | 	sub	fp, #12
13538     01 14 86 F1 | 	sub	arg02, #1
1353c     80 4A B1 FD | 	call	#__system__Left_S
13540     04 4E 05 F1 | 	add	fp, #4
13544     A7 FA 61 FC | 	wrlong	result1, fp
13548     04 4E 85 F1 | 	sub	fp, #4
1354c     A7 26 02 FB | 	rdlong	local01, fp
13550     13 13 02 F6 | 	mov	arg01, local01
13554     09 29 02 F6 | 	mov	local02, arg01
13558     97 06 48 FB | 	callpa	#(@LR__1589-@LR__1588)>>2,fcache_load_ptr_
1355c                 | LR__1588
1355c     14 FB C9 FA | 	rdbyte	result1, local02 wz
13560     01 28 06 51 |  if_ne	add	local02, #1
13564     F4 FF 9F 5D |  if_ne	jmp	#LR__1588
13568                 | LR__1589
13568     09 29 82 F1 | 	sub	local02, arg01
1356c     14 15 02 F6 | 	mov	arg02, local02
13570     0C 4E 05 F1 | 	add	fp, #12
13574     A7 16 02 FB | 	rdlong	arg03, fp
13578     0C 4E 85 F1 | 	sub	fp, #12
1357c     0B 15 82 F1 | 	sub	arg02, arg03
13580     13 13 02 F6 | 	mov	arg01, local01
13584     C0 4A B1 FD | 	call	#__system__Right_S
13588     A7 FA 61 FC | 	wrlong	result1, fp
1358c     28 00 90 FD | 	jmp	#LR__1591
13590                 | LR__1590
13590     A7 12 02 FB | 	rdlong	arg01, fp
13594     B8 4E B1 FD | 	call	#__system__RTrim_S
13598     FD 12 02 F6 | 	mov	arg01, result1
1359c     F0 4D B1 FD | 	call	#__system__LTrim_S
135a0     04 4E 05 F1 | 	add	fp, #4
135a4     A7 FA 61 FC | 	wrlong	result1, fp
135a8     04 4E 85 F1 | 	sub	fp, #4
135ac     B1 01 00 FF 
135b0     DD 27 06 F6 | 	mov	local01, ##@LR__5869
135b4     A7 26 62 FC | 	wrlong	local01, fp
135b8                 | LR__1591
135b8     30 4F 05 F1 | 	add	fp, #304
135bc     A7 26 02 FB | 	rdlong	local01, fp
135c0     02 26 66 F0 | 	shl	local01, #2
135c4     04 4F 85 F1 | 	sub	fp, #260
135c8     A7 26 02 F1 | 	add	local01, fp
135cc     28 4E 85 F1 | 	sub	fp, #40
135d0     A7 FA 01 FB | 	rdlong	result1, fp
135d4     13 FB 61 FC | 	wrlong	result1, local01
135d8     2C 4F 05 F1 | 	add	fp, #300
135dc     A7 26 02 FB | 	rdlong	local01, fp
135e0     01 26 86 F1 | 	sub	local01, #1
135e4     A7 26 62 FC | 	wrlong	local01, fp
135e8     30 4F 85 F1 | 	sub	fp, #304
135ec     00 26 56 F2 | 	cmps	local01, #0 wc
135f0     18 00 90 CD |  if_b	jmp	#LR__1592
135f4     A7 12 02 FB | 	rdlong	arg01, fp
135f8     B1 01 00 FF 
135fc     DE 15 06 F6 | 	mov	arg02, ##@LR__5870
13600     64 29 B1 FD | 	call	#__system___string_cmp
13604     00 FA 0D F2 | 	cmp	result1, #0 wz
13608     F4 FE 9F 5D |  if_ne	jmp	#LR__1587
1360c                 | LR__1592
1360c     30 4F 05 F1 | 	add	fp, #304
13610     A7 26 02 FB | 	rdlong	local01, fp
13614     30 4F 85 F1 | 	sub	fp, #304
13618     00 26 56 F2 | 	cmps	local01, #0 wc
1361c     34 FE 9F 3D |  if_ae	jmp	#LR__1582
13620                 | ' 
13620                 | ' for i=0 to numpar-1
13620     30 4F 05 F1 | 	add	fp, #304
13624     A7 00 68 FC | 	wrlong	#0, fp
13628     28 4F 85 F1 | 	sub	fp, #296
1362c     A7 2A 02 FB | 	rdlong	local03, fp
13630     08 4E 85 F1 | 	sub	fp, #8
13634                 | LR__1593
13634     30 4F 05 F1 | 	add	fp, #304
13638     A7 2C 02 FB | 	rdlong	local04, fp
1363c     30 4F 85 F1 | 	sub	fp, #304
13640     16 27 02 F6 | 	mov	local01, local04
13644     15 27 52 F2 | 	cmps	local01, local03 wc
13648     04 09 90 3D |  if_ae	jmp	#LR__1629
1364c                 | ' 
1364c                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
1364c     30 4F 05 F1 | 	add	fp, #304
13650     A7 16 02 FB | 	rdlong	arg03, fp
13654     02 16 66 F0 | 	shl	arg03, #2
13658     04 4F 85 F1 | 	sub	fp, #260
1365c     A7 16 02 F1 | 	add	arg03, fp
13660     0B 13 02 FB | 	rdlong	arg01, arg03
13664     2C 4E 85 F1 | 	sub	fp, #44
13668     20 2F BF FD | 	call	#_isnum
1366c     FD 2E 02 F6 | 	mov	local05, result1
13670     30 4F 05 F1 | 	add	fp, #304
13674     A7 16 02 FB | 	rdlong	arg03, fp
13678     02 16 66 F0 | 	shl	arg03, #2
1367c     04 4F 85 F1 | 	sub	fp, #260
13680     A7 30 02 F6 | 	mov	local06, fp
13684     A7 16 02 F1 | 	add	arg03, fp
13688     0B 13 02 FB | 	rdlong	arg01, arg03
1368c     2C 4E 85 F1 | 	sub	fp, #44
13690     E4 32 BF FD | 	call	#_isint
13694     FD 2E 2A F5 | 	andn	local05, result1 wz
13698     52 00 00 5F 
1369c     10 E5 05 51 |  if_ne	add	objptr, ##42256
136a0     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
136a4     52 00 00 5F 
136a8     10 E5 85 51 |  if_ne	sub	objptr, ##42256
136ac                 | '   if isint(args(i)) then r=result_int 
136ac     30 4F 05 F1 | 	add	fp, #304
136b0     A7 2E 02 FB | 	rdlong	local05, fp
136b4     02 2E 66 F0 | 	shl	local05, #2
136b8     04 4F 85 F1 | 	sub	fp, #260
136bc     A7 2E 02 F1 | 	add	local05, fp
136c0     17 13 02 FB | 	rdlong	arg01, local05
136c4     2C 4E 85 F1 | 	sub	fp, #44
136c8     AC 32 BF FD | 	call	#_isint
136cc     00 FA 0D F2 | 	cmp	result1, #0 wz
136d0     52 00 00 5F 
136d4     10 E5 05 51 |  if_ne	add	objptr, ##42256
136d8     F2 38 68 5C |  if_ne	wrlong	#28, objptr
136dc     52 00 00 5F 
136e0     10 E5 85 51 |  if_ne	sub	objptr, ##42256
136e4                 | '   if isdec(args(i)) then r=result_uint 
136e4     30 4F 05 F1 | 	add	fp, #304
136e8     A7 2E 02 FB | 	rdlong	local05, fp
136ec     02 2E 66 F0 | 	shl	local05, #2
136f0     04 4F 85 F1 | 	sub	fp, #260
136f4     A7 2E 02 F1 | 	add	local05, fp
136f8     17 13 02 FB | 	rdlong	arg01, local05
136fc     2C 4E 85 F1 | 	sub	fp, #44
13700     18 35 BF FD | 	call	#_isdec
13704     00 FA 0D F2 | 	cmp	result1, #0 wz
13708     52 00 00 5F 
1370c     10 E5 05 51 |  if_ne	add	objptr, ##42256
13710     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
13714     52 00 00 5F 
13718     10 E5 85 51 |  if_ne	sub	objptr, ##42256
1371c                 | '   if not isnum(args(i)) then 
1371c     30 4F 05 F1 | 	add	fp, #304
13720     A7 32 02 FB | 	rdlong	local07, fp
13724     19 35 02 F6 | 	mov	local08, local07
13728     02 34 66 F0 | 	shl	local08, #2
1372c     04 4F 85 F1 | 	sub	fp, #260
13730     A7 36 02 F6 | 	mov	local09, fp
13734     A7 34 02 F1 | 	add	local08, fp
13738     1A 13 02 FB | 	rdlong	arg01, local08
1373c     2C 4E 85 F1 | 	sub	fp, #44
13740     48 2E BF FD | 	call	#_isnum
13744     FD 2E 22 F6 | 	not	local05, result1
13748     00 2E 0E F2 | 	cmp	local05, #0 wz
1374c     44 01 90 AD |  if_e	jmp	#LR__1598
13750     52 00 00 FF 
13754     10 E5 05 F1 | 	add	objptr, ##42256
13758     F2 56 68 FC | 	wrlong	#43, objptr
1375c     52 00 00 FF 
13760     10 E5 85 F1 | 	sub	objptr, ##42256
13764     04 4E 05 F1 | 	add	fp, #4
13768     A7 12 02 FB | 	rdlong	arg01, fp
1376c     04 4E 85 F1 | 	sub	fp, #4
13770     09 29 02 F6 | 	mov	local02, arg01
13774     97 06 48 FB | 	callpa	#(@LR__1595-@LR__1594)>>2,fcache_load_ptr_
13778                 | LR__1594
13778     14 FB C9 FA | 	rdbyte	result1, local02 wz
1377c     01 28 06 51 |  if_ne	add	local02, #1
13780     F4 FF 9F 5D |  if_ne	jmp	#LR__1594
13784                 | LR__1595
13784     09 29 82 F1 | 	sub	local02, arg01
13788     14 33 02 F6 | 	mov	local07, local02
1378c     38 4F 05 F1 | 	add	fp, #312
13790     A7 32 62 FC | 	wrlong	local07, fp
13794     52 00 00 FF 
13798     98 E4 05 F1 | 	add	objptr, ##42136
1379c     F2 12 02 FB | 	rdlong	arg01, objptr
137a0     19 13 82 F1 | 	sub	arg01, local07
137a4     04 12 86 F1 | 	sub	arg01, #4
137a8     03 12 26 F5 | 	andn	arg01, #3
137ac     F2 12 62 FC | 	wrlong	arg01, objptr
137b0     52 00 00 FF 
137b4     98 E4 85 F1 | 	sub	objptr, ##42136
137b8     A7 14 02 FB | 	rdlong	arg02, fp
137bc     38 4F 85 F1 | 	sub	fp, #312
137c0     2C EF B0 FD | 	call	#_pslpoke
137c4                 | '     pslpoke memtop,l
137c4                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
137c4     34 4F 05 F1 | 	add	fp, #308
137c8     A7 02 68 FC | 	wrlong	#1, fp
137cc     04 4E 05 F1 | 	add	fp, #4
137d0     A7 38 02 FB | 	rdlong	local10, fp
137d4     38 4F 85 F1 | 	sub	fp, #312
137d8     01 38 06 F1 | 	add	local10, #1
137dc                 | LR__1596
137dc     34 4F 05 F1 | 	add	fp, #308
137e0     A7 2E 02 FB | 	rdlong	local05, fp
137e4     34 4F 85 F1 | 	sub	fp, #308
137e8     1C 2F 52 F2 | 	cmps	local05, local10 wc
137ec     84 00 90 3D |  if_ae	jmp	#LR__1597
137f0     52 00 00 FF 
137f4     98 E4 05 F1 | 	add	objptr, ##42136
137f8     F2 32 02 FB | 	rdlong	local07, objptr
137fc     52 00 00 FF 
13800     98 E4 85 F1 | 	sub	objptr, ##42136
13804     03 32 06 F1 | 	add	local07, #3
13808     34 4F 05 F1 | 	add	fp, #308
1380c     A7 3A 02 FB | 	rdlong	local11, fp
13810     1D 33 02 F1 | 	add	local07, local11
13814     04 4E 85 F1 | 	sub	fp, #4
13818     A7 3C 02 FB | 	rdlong	local12, fp
1381c     02 3C 66 F0 | 	shl	local12, #2
13820     04 4F 85 F1 | 	sub	fp, #260
13824     A7 3E 02 F6 | 	mov	local13, fp
13828     A7 3C 02 F1 | 	add	local12, fp
1382c     1E 13 02 FB | 	rdlong	arg01, local12
13830     2C 4E 85 F1 | 	sub	fp, #44
13834     01 40 06 F6 | 	mov	local14, #1
13838     1D 15 02 F6 | 	mov	arg02, local11
1383c     01 16 06 F6 | 	mov	arg03, #1
13840     94 48 B1 FD | 	call	#__system__Mid_S
13844     FD 14 C2 FA | 	rdbyte	arg02, result1
13848     19 13 02 F6 | 	mov	arg01, local07
1384c     30 EF B0 FD | 	call	#_pspoke
13850     34 4F 05 F1 | 	add	fp, #308
13854     A7 34 02 FB | 	rdlong	local08, fp
13858     1A 33 02 F6 | 	mov	local07, local08
1385c     1A 31 02 F6 | 	mov	local06, local08
13860     18 37 02 F6 | 	mov	local09, local06
13864     01 36 06 F1 | 	add	local09, #1
13868     A7 36 62 FC | 	wrlong	local09, fp
1386c     34 4F 85 F1 | 	sub	fp, #308
13870     68 FF 9F FD | 	jmp	#LR__1596
13874                 | LR__1597
13874     52 00 00 FF 
13878     98 E4 05 F1 | 	add	objptr, ##42136
1387c     F2 2E 02 FB | 	rdlong	local05, objptr
13880     52 00 00 FF 
13884     98 E4 85 F1 | 	sub	objptr, ##42136
13888     10 4E 05 F1 | 	add	fp, #16
1388c     A7 2E 62 FC | 	wrlong	local05, fp
13890     10 4E 85 F1 | 	sub	fp, #16
13894                 | LR__1598
13894     48 9A BF FD | 	call	#_pop
13898     FE 2E 02 F6 | 	mov	local05, result2
1389c     FF 42 02 F6 | 	mov	local15, result3
138a0     1C 4E 05 F1 | 	add	fp, #28
138a4     A7 FA 61 FC | 	wrlong	result1, fp
138a8     04 4E 05 F1 | 	add	fp, #4
138ac     A7 2E 62 FC | 	wrlong	local05, fp
138b0     04 4E 05 F1 | 	add	fp, #4
138b4     A7 42 62 FC | 	wrlong	local15, fp
138b8     04 4E 85 F1 | 	sub	fp, #4
138bc     A7 44 02 FB | 	rdlong	local16, fp
138c0     0C 4E 85 F1 | 	sub	fp, #12
138c4     A7 44 62 FC | 	wrlong	local16, fp
138c8                 | '   t1=pop() : vartype=t1.result.twowords(1)
138c8                 | '   select case vartype
138c8     14 4E 85 F1 | 	sub	fp, #20
138cc     22 47 0A F6 | 	mov	local17, local16 wz
138d0     64 00 90 AD |  if_e	jmp	#LR__1599
138d4     00 47 0E F2 | 	cmp	local17, #256 wz
138d8     6C 00 90 AD |  if_e	jmp	#LR__1600
138dc     01 47 0E F2 | 	cmp	local17, #257 wz
138e0     74 00 90 AD |  if_e	jmp	#LR__1601
138e4     02 47 0E F2 | 	cmp	local17, #258 wz
138e8     7C 00 90 AD |  if_e	jmp	#LR__1602
138ec     03 47 0E F2 | 	cmp	local17, #259 wz
138f0     84 00 90 AD |  if_e	jmp	#LR__1603
138f4     04 47 0E F2 | 	cmp	local17, #260 wz
138f8     8C 00 90 AD |  if_e	jmp	#LR__1604
138fc     05 47 0E F2 | 	cmp	local17, #261 wz
13900     94 00 90 AD |  if_e	jmp	#LR__1605
13904     06 47 0E F2 | 	cmp	local17, #262 wz
13908     9C 00 90 AD |  if_e	jmp	#LR__1606
1390c     07 47 0E F2 | 	cmp	local17, #263 wz
13910     A4 00 90 AD |  if_e	jmp	#LR__1607
13914     08 47 0E F2 | 	cmp	local17, #264 wz
13918     AC 00 90 AD |  if_e	jmp	#LR__1608
1391c     09 47 0E F2 | 	cmp	local17, #265 wz
13920     B4 00 90 AD |  if_e	jmp	#LR__1609
13924     0A 47 0E F2 | 	cmp	local17, #266 wz
13928     BC 00 90 AD |  if_e	jmp	#LR__1610
1392c     0B 47 0E F2 | 	cmp	local17, #267 wz
13930     C4 00 90 AD |  if_e	jmp	#LR__1611
13934     D0 00 90 FD | 	jmp	#LR__1612
13938                 | LR__1599
13938     18 4E 05 F1 | 	add	fp, #24
1393c     A7 18 68 FC | 	wrlong	#12, fp
13940     18 4E 85 F1 | 	sub	fp, #24
13944     CC 00 90 FD | 	jmp	#LR__1613
13948                 | LR__1600
13948     18 4E 05 F1 | 	add	fp, #24
1394c     A7 18 68 FC | 	wrlong	#12, fp
13950     18 4E 85 F1 | 	sub	fp, #24
13954     BC 00 90 FD | 	jmp	#LR__1613
13958                 | LR__1601
13958     18 4E 05 F1 | 	add	fp, #24
1395c     A7 02 68 FC | 	wrlong	#1, fp
13960     18 4E 85 F1 | 	sub	fp, #24
13964     AC 00 90 FD | 	jmp	#LR__1613
13968                 | LR__1602
13968     18 4E 05 F1 | 	add	fp, #24
1396c     A7 02 68 FC | 	wrlong	#1, fp
13970     18 4E 85 F1 | 	sub	fp, #24
13974     9C 00 90 FD | 	jmp	#LR__1613
13978                 | LR__1603
13978     18 4E 05 F1 | 	add	fp, #24
1397c     A7 04 68 FC | 	wrlong	#2, fp
13980     18 4E 85 F1 | 	sub	fp, #24
13984     8C 00 90 FD | 	jmp	#LR__1613
13988                 | LR__1604
13988     18 4E 05 F1 | 	add	fp, #24
1398c     A7 04 68 FC | 	wrlong	#2, fp
13990     18 4E 85 F1 | 	sub	fp, #24
13994     7C 00 90 FD | 	jmp	#LR__1613
13998                 | LR__1605
13998     18 4E 05 F1 | 	add	fp, #24
1399c     A7 08 68 FC | 	wrlong	#4, fp
139a0     18 4E 85 F1 | 	sub	fp, #24
139a4     6C 00 90 FD | 	jmp	#LR__1613
139a8                 | LR__1606
139a8     18 4E 05 F1 | 	add	fp, #24
139ac     A7 08 68 FC | 	wrlong	#4, fp
139b0     18 4E 85 F1 | 	sub	fp, #24
139b4     5C 00 90 FD | 	jmp	#LR__1613
139b8                 | LR__1607
139b8     18 4E 05 F1 | 	add	fp, #24
139bc     A7 10 68 FC | 	wrlong	#8, fp
139c0     18 4E 85 F1 | 	sub	fp, #24
139c4     4C 00 90 FD | 	jmp	#LR__1613
139c8                 | LR__1608
139c8     18 4E 05 F1 | 	add	fp, #24
139cc     A7 10 68 FC | 	wrlong	#8, fp
139d0     18 4E 85 F1 | 	sub	fp, #24
139d4     3C 00 90 FD | 	jmp	#LR__1613
139d8                 | LR__1609
139d8     18 4E 05 F1 | 	add	fp, #24
139dc     A7 0C 68 FC | 	wrlong	#6, fp
139e0     18 4E 85 F1 | 	sub	fp, #24
139e4     2C 00 90 FD | 	jmp	#LR__1613
139e8                 | LR__1610
139e8     18 4E 05 F1 | 	add	fp, #24
139ec     A7 10 68 FC | 	wrlong	#8, fp
139f0     18 4E 85 F1 | 	sub	fp, #24
139f4     1C 00 90 FD | 	jmp	#LR__1613
139f8                 | LR__1611
139f8     18 4E 05 F1 | 	add	fp, #24
139fc     A7 0A 68 FC | 	wrlong	#5, fp
13a00     18 4E 85 F1 | 	sub	fp, #24
13a04     0C 00 90 FD | 	jmp	#LR__1613
13a08                 | LR__1612
13a08     18 4E 05 F1 | 	add	fp, #24
13a0c     A7 18 68 FC | 	wrlong	#12, fp
13a10     18 4E 85 F1 | 	sub	fp, #24
13a14                 | LR__1613
13a14                 | '   if esize=12 andalso t1.result.uresult<$80000 then
13a14     18 4E 05 F1 | 	add	fp, #24
13a18     A7 44 02 FB | 	rdlong	local16, fp
13a1c     18 4E 85 F1 | 	sub	fp, #24
13a20     0C 44 0E F2 | 	cmp	local16, #12 wz
13a24     74 01 90 5D |  if_ne	jmp	#LR__1618
13a28     1C 4E 05 F1 | 	add	fp, #28
13a2c     A7 32 02 FB | 	rdlong	local07, fp
13a30     1C 4E 85 F1 | 	sub	fp, #28
13a34     00 04 00 FF 
13a38     00 32 16 F2 | 	cmp	local07, ##524288 wc
13a3c     5C 01 90 3D |  if_ae	jmp	#LR__1618
13a40                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
13a40     52 00 00 FF 
13a44     10 E5 05 F1 | 	add	objptr, ##42256
13a48     F2 44 02 FB | 	rdlong	local16, objptr
13a4c     52 00 00 FF 
13a50     10 E5 85 F1 | 	sub	objptr, ##42256
13a54     1C 44 0E F2 | 	cmp	local16, #28 wz
13a58     38 00 90 5D |  if_ne	jmp	#LR__1614
13a5c     1C 4E 05 F1 | 	add	fp, #28
13a60     A7 44 02 FB | 	rdlong	local16, fp
13a64     14 4F 05 F1 | 	add	fp, #276
13a68     A7 32 02 FB | 	rdlong	local07, fp
13a6c     19 35 02 F6 | 	mov	local08, local07
13a70     02 34 66 F0 | 	shl	local08, #2
13a74     04 4F 85 F1 | 	sub	fp, #260
13a78     A7 36 02 F6 | 	mov	local09, fp
13a7c     A7 34 02 F1 | 	add	local08, fp
13a80     1A 13 02 FB | 	rdlong	arg01, local08
13a84     00 14 06 F6 | 	mov	arg02, #0
13a88     2C 4E 85 F1 | 	sub	fp, #44
13a8c     A4 59 B1 FD | 	call	#__system____builtin_atoi
13a90     22 FB 61 FC | 	wrlong	result1, local16
13a94                 | LR__1614
13a94                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
13a94     52 00 00 FF 
13a98     10 E5 05 F1 | 	add	objptr, ##42256
13a9c     F2 44 02 FB | 	rdlong	local16, objptr
13aa0     52 00 00 FF 
13aa4     10 E5 85 F1 | 	sub	objptr, ##42256
13aa8     1D 44 0E F2 | 	cmp	local16, #29 wz
13aac     38 00 90 5D |  if_ne	jmp	#LR__1615
13ab0     1C 4E 05 F1 | 	add	fp, #28
13ab4     A7 44 02 FB | 	rdlong	local16, fp
13ab8     14 4F 05 F1 | 	add	fp, #276
13abc     A7 32 02 FB | 	rdlong	local07, fp
13ac0     19 35 02 F6 | 	mov	local08, local07
13ac4     02 34 66 F0 | 	shl	local08, #2
13ac8     04 4F 85 F1 | 	sub	fp, #260
13acc     A7 36 02 F6 | 	mov	local09, fp
13ad0     A7 34 02 F1 | 	add	local08, fp
13ad4     1A 13 02 FB | 	rdlong	arg01, local08
13ad8     00 14 06 F6 | 	mov	arg02, #0
13adc     2C 4E 85 F1 | 	sub	fp, #44
13ae0     50 59 B1 FD | 	call	#__system____builtin_atoi
13ae4     22 FB 61 FC | 	wrlong	result1, local16
13ae8                 | LR__1615
13ae8                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
13ae8     52 00 00 FF 
13aec     10 E5 05 F1 | 	add	objptr, ##42256
13af0     F2 44 02 FB | 	rdlong	local16, objptr
13af4     52 00 00 FF 
13af8     10 E5 85 F1 | 	sub	objptr, ##42256
13afc     1E 44 0E F2 | 	cmp	local16, #30 wz
13b00     3C 00 90 5D |  if_ne	jmp	#LR__1616
13b04     30 4F 05 F1 | 	add	fp, #304
13b08     A7 32 02 FB | 	rdlong	local07, fp
13b0c     02 32 66 F0 | 	shl	local07, #2
13b10     04 4F 85 F1 | 	sub	fp, #260
13b14     A7 34 02 F6 | 	mov	local08, fp
13b18     A7 32 02 F1 | 	add	local07, fp
13b1c     19 13 02 FB | 	rdlong	arg01, local07
13b20     2C 4E 85 F1 | 	sub	fp, #44
13b24     A0 5A B1 FD | 	call	#__system____builtin_atof
13b28     28 4E 05 F1 | 	add	fp, #40
13b2c     A7 FA 61 FC | 	wrlong	result1, fp
13b30     0C 4E 85 F1 | 	sub	fp, #12
13b34     A7 44 02 FB | 	rdlong	local16, fp
13b38     1C 4E 85 F1 | 	sub	fp, #28
13b3c     22 FB 61 FC | 	wrlong	result1, local16
13b40                 | LR__1616
13b40                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
13b40     52 00 00 FF 
13b44     10 E5 05 F1 | 	add	objptr, ##42256
13b48     F2 44 02 FB | 	rdlong	local16, objptr
13b4c     52 00 00 FF 
13b50     10 E5 85 F1 | 	sub	objptr, ##42256
13b54     2B 44 0E F2 | 	cmp	local16, #43 wz
13b58     18 00 90 5D |  if_ne	jmp	#LR__1617
13b5c     1C 4E 05 F1 | 	add	fp, #28
13b60     A7 12 02 FB | 	rdlong	arg01, fp
13b64     0C 4E 85 F1 | 	sub	fp, #12
13b68     A7 14 02 FB | 	rdlong	arg02, fp
13b6c     10 4E 85 F1 | 	sub	fp, #16
13b70     09 15 62 FC | 	wrlong	arg02, arg01
13b74                 | LR__1617
13b74     1C 4E 05 F1 | 	add	fp, #28
13b78     A7 12 02 FB | 	rdlong	arg01, fp
13b7c     1C 4E 85 F1 | 	sub	fp, #28
13b80     08 12 06 F1 | 	add	arg01, #8
13b84     52 00 00 FF 
13b88     10 E5 05 F1 | 	add	objptr, ##42256
13b8c     F2 14 02 FB | 	rdlong	arg02, objptr
13b90     52 00 00 FF 
13b94     10 E5 85 F1 | 	sub	objptr, ##42256
13b98     09 15 62 FC | 	wrlong	arg02, arg01
13b9c                 | LR__1618
13b9c                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
13b9c     18 4E 05 F1 | 	add	fp, #24
13ba0     A7 44 02 FB | 	rdlong	local16, fp
13ba4     18 4E 85 F1 | 	sub	fp, #24
13ba8     0C 44 0E F2 | 	cmp	local16, #12 wz
13bac     94 01 90 5D |  if_ne	jmp	#LR__1623
13bb0     1C 4E 05 F1 | 	add	fp, #28
13bb4     A7 32 02 FB | 	rdlong	local07, fp
13bb8     1C 4E 85 F1 | 	sub	fp, #28
13bbc     00 04 00 FF 
13bc0     00 32 16 F2 | 	cmp	local07, ##524288 wc
13bc4     7C 01 90 CD |  if_b	jmp	#LR__1623
13bc8                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
13bc8     52 00 00 FF 
13bcc     10 E5 05 F1 | 	add	objptr, ##42256
13bd0     F2 44 02 FB | 	rdlong	local16, objptr
13bd4     52 00 00 FF 
13bd8     10 E5 85 F1 | 	sub	objptr, ##42256
13bdc     1C 44 0E F2 | 	cmp	local16, #28 wz
13be0     40 00 90 5D |  if_ne	jmp	#LR__1619
13be4     1C 4E 05 F1 | 	add	fp, #28
13be8     A7 44 02 FB | 	rdlong	local16, fp
13bec     14 4F 05 F1 | 	add	fp, #276
13bf0     A7 32 02 FB | 	rdlong	local07, fp
13bf4     19 35 02 F6 | 	mov	local08, local07
13bf8     02 34 66 F0 | 	shl	local08, #2
13bfc     04 4F 85 F1 | 	sub	fp, #260
13c00     A7 36 02 F6 | 	mov	local09, fp
13c04     A7 34 02 F1 | 	add	local08, fp
13c08     1A 13 02 FB | 	rdlong	arg01, local08
13c0c     00 14 06 F6 | 	mov	arg02, #0
13c10     2C 4E 85 F1 | 	sub	fp, #44
13c14     1C 58 B1 FD | 	call	#__system____builtin_atoi
13c18     FD 14 02 F6 | 	mov	arg02, result1
13c1c     22 13 02 F6 | 	mov	arg01, local16
13c20     CC EA B0 FD | 	call	#_pslpoke
13c24                 | LR__1619
13c24                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
13c24     52 00 00 FF 
13c28     10 E5 05 F1 | 	add	objptr, ##42256
13c2c     F2 44 02 FB | 	rdlong	local16, objptr
13c30     52 00 00 FF 
13c34     10 E5 85 F1 | 	sub	objptr, ##42256
13c38     1D 44 0E F2 | 	cmp	local16, #29 wz
13c3c     40 00 90 5D |  if_ne	jmp	#LR__1620
13c40     1C 4E 05 F1 | 	add	fp, #28
13c44     A7 44 02 FB | 	rdlong	local16, fp
13c48     14 4F 05 F1 | 	add	fp, #276
13c4c     A7 32 02 FB | 	rdlong	local07, fp
13c50     19 35 02 F6 | 	mov	local08, local07
13c54     02 34 66 F0 | 	shl	local08, #2
13c58     04 4F 85 F1 | 	sub	fp, #260
13c5c     A7 36 02 F6 | 	mov	local09, fp
13c60     A7 34 02 F1 | 	add	local08, fp
13c64     1A 13 02 FB | 	rdlong	arg01, local08
13c68     00 14 06 F6 | 	mov	arg02, #0
13c6c     2C 4E 85 F1 | 	sub	fp, #44
13c70     C0 57 B1 FD | 	call	#__system____builtin_atoi
13c74     FD 14 02 F6 | 	mov	arg02, result1
13c78     22 13 02 F6 | 	mov	arg01, local16
13c7c     70 EA B0 FD | 	call	#_pslpoke
13c80                 | LR__1620
13c80                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13c80     52 00 00 FF 
13c84     10 E5 05 F1 | 	add	objptr, ##42256
13c88     F2 44 02 FB | 	rdlong	local16, objptr
13c8c     52 00 00 FF 
13c90     10 E5 85 F1 | 	sub	objptr, ##42256
13c94     1E 44 0E F2 | 	cmp	local16, #30 wz
13c98     4C 00 90 5D |  if_ne	jmp	#LR__1621
13c9c     30 4F 05 F1 | 	add	fp, #304
13ca0     A7 32 02 FB | 	rdlong	local07, fp
13ca4     02 32 66 F0 | 	shl	local07, #2
13ca8     04 4F 85 F1 | 	sub	fp, #260
13cac     A7 34 02 F6 | 	mov	local08, fp
13cb0     A7 32 02 F1 | 	add	local07, fp
13cb4     19 13 02 FB | 	rdlong	arg01, local07
13cb8     2C 4E 85 F1 | 	sub	fp, #44
13cbc     08 59 B1 FD | 	call	#__system____builtin_atof
13cc0     28 4E 05 F1 | 	add	fp, #40
13cc4     A7 FA 61 FC | 	wrlong	result1, fp
13cc8     0C 4E 85 F1 | 	sub	fp, #12
13ccc     A7 44 02 FB | 	rdlong	local16, fp
13cd0     0C 4E 05 F1 | 	add	fp, #12
13cd4     A7 12 02 F6 | 	mov	arg01, fp
13cd8     28 4E 85 F1 | 	sub	fp, #40
13cdc     09 15 02 FB | 	rdlong	arg02, arg01
13ce0     22 13 02 F6 | 	mov	arg01, local16
13ce4     08 EA B0 FD | 	call	#_pslpoke
13ce8                 | LR__1621
13ce8                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
13ce8     52 00 00 FF 
13cec     10 E5 05 F1 | 	add	objptr, ##42256
13cf0     F2 44 02 FB | 	rdlong	local16, objptr
13cf4     52 00 00 FF 
13cf8     10 E5 85 F1 | 	sub	objptr, ##42256
13cfc     2B 44 0E F2 | 	cmp	local16, #43 wz
13d00     18 00 90 5D |  if_ne	jmp	#LR__1622
13d04     1C 4E 05 F1 | 	add	fp, #28
13d08     A7 12 02 FB | 	rdlong	arg01, fp
13d0c     0C 4E 85 F1 | 	sub	fp, #12
13d10     A7 14 02 FB | 	rdlong	arg02, fp
13d14     10 4E 85 F1 | 	sub	fp, #16
13d18     D4 E9 B0 FD | 	call	#_pslpoke
13d1c                 | LR__1622
13d1c     1C 4E 05 F1 | 	add	fp, #28
13d20     A7 12 02 FB | 	rdlong	arg01, fp
13d24     1C 4E 85 F1 | 	sub	fp, #28
13d28     08 12 06 F1 | 	add	arg01, #8
13d2c     52 00 00 FF 
13d30     10 E5 05 F1 | 	add	objptr, ##42256
13d34     F2 14 02 FB | 	rdlong	arg02, objptr
13d38     52 00 00 FF 
13d3c     10 E5 85 F1 | 	sub	objptr, ##42256
13d40     AC E9 B0 FD | 	call	#_pslpoke
13d44                 | LR__1623
13d44                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
13d44     18 4E 05 F1 | 	add	fp, #24
13d48     A7 44 02 FB | 	rdlong	local16, fp
13d4c     18 4E 85 F1 | 	sub	fp, #24
13d50     05 44 0E F2 | 	cmp	local16, #5 wz
13d54     52 00 00 AF 
13d58     10 E5 05 A1 |  if_e	add	objptr, ##42256
13d5c     F2 42 02 AB |  if_e	rdlong	local15, objptr
13d60     52 00 00 AF 
13d64     10 E5 85 A1 |  if_e	sub	objptr, ##42256
13d68     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
13d6c     18 00 90 5D |  if_ne	jmp	#LR__1624
13d70     1C 4E 05 F1 | 	add	fp, #28
13d74     A7 12 02 FB | 	rdlong	arg01, fp
13d78     0C 4E 85 F1 | 	sub	fp, #12
13d7c     A7 14 02 FB | 	rdlong	arg02, fp
13d80     10 4E 85 F1 | 	sub	fp, #16
13d84     68 E9 B0 FD | 	call	#_pslpoke
13d88                 | LR__1624
13d88                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
13d88     18 4E 05 F1 | 	add	fp, #24
13d8c     A7 44 02 FB | 	rdlong	local16, fp
13d90     18 4E 85 F1 | 	sub	fp, #24
13d94     04 44 0E F2 | 	cmp	local16, #4 wz
13d98     54 00 90 5D |  if_ne	jmp	#LR__1625
13d9c     52 00 00 FF 
13da0     10 E5 05 F1 | 	add	objptr, ##42256
13da4     F2 42 02 FB | 	rdlong	local15, objptr
13da8     52 00 00 FF 
13dac     10 E5 85 F1 | 	sub	objptr, ##42256
13db0     2B 42 0E F2 | 	cmp	local15, #43 wz
13db4     38 00 90 AD |  if_e	jmp	#LR__1625
13db8     1C 4E 05 F1 | 	add	fp, #28
13dbc     A7 44 02 FB | 	rdlong	local16, fp
13dc0     14 4F 05 F1 | 	add	fp, #276
13dc4     A7 34 02 FB | 	rdlong	local08, fp
13dc8     02 34 66 F0 | 	shl	local08, #2
13dcc     04 4F 85 F1 | 	sub	fp, #260
13dd0     A7 34 02 F1 | 	add	local08, fp
13dd4     1A 13 02 FB | 	rdlong	arg01, local08
13dd8     00 14 06 F6 | 	mov	arg02, #0
13ddc     2C 4E 85 F1 | 	sub	fp, #44
13de0     50 56 B1 FD | 	call	#__system____builtin_atoi
13de4     FD 14 02 F6 | 	mov	arg02, result1
13de8     22 13 02 F6 | 	mov	arg01, local16
13dec     00 E9 B0 FD | 	call	#_pslpoke
13df0                 | LR__1625
13df0                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
13df0     18 4E 05 F1 | 	add	fp, #24
13df4     A7 44 02 FB | 	rdlong	local16, fp
13df8     18 4E 85 F1 | 	sub	fp, #24
13dfc     02 44 0E F2 | 	cmp	local16, #2 wz
13e00     54 00 90 5D |  if_ne	jmp	#LR__1626
13e04     52 00 00 FF 
13e08     10 E5 05 F1 | 	add	objptr, ##42256
13e0c     F2 42 02 FB | 	rdlong	local15, objptr
13e10     52 00 00 FF 
13e14     10 E5 85 F1 | 	sub	objptr, ##42256
13e18     2B 42 0E F2 | 	cmp	local15, #43 wz
13e1c     38 00 90 AD |  if_e	jmp	#LR__1626
13e20     1C 4E 05 F1 | 	add	fp, #28
13e24     A7 44 02 FB | 	rdlong	local16, fp
13e28     14 4F 05 F1 | 	add	fp, #276
13e2c     A7 34 02 FB | 	rdlong	local08, fp
13e30     02 34 66 F0 | 	shl	local08, #2
13e34     04 4F 85 F1 | 	sub	fp, #260
13e38     A7 34 02 F1 | 	add	local08, fp
13e3c     1A 13 02 FB | 	rdlong	arg01, local08
13e40     00 14 06 F6 | 	mov	arg02, #0
13e44     2C 4E 85 F1 | 	sub	fp, #44
13e48     E8 55 B1 FD | 	call	#__system____builtin_atoi
13e4c     FD 14 02 F6 | 	mov	arg02, result1
13e50     22 13 02 F6 | 	mov	arg01, local16
13e54     E0 E8 B0 FD | 	call	#_psdpoke
13e58                 | LR__1626
13e58                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
13e58     18 4E 05 F1 | 	add	fp, #24
13e5c     A7 44 02 FB | 	rdlong	local16, fp
13e60     18 4E 85 F1 | 	sub	fp, #24
13e64     01 44 0E F2 | 	cmp	local16, #1 wz
13e68     54 00 90 5D |  if_ne	jmp	#LR__1627
13e6c     52 00 00 FF 
13e70     10 E5 05 F1 | 	add	objptr, ##42256
13e74     F2 42 02 FB | 	rdlong	local15, objptr
13e78     52 00 00 FF 
13e7c     10 E5 85 F1 | 	sub	objptr, ##42256
13e80     2B 42 0E F2 | 	cmp	local15, #43 wz
13e84     38 00 90 AD |  if_e	jmp	#LR__1627
13e88     1C 4E 05 F1 | 	add	fp, #28
13e8c     A7 44 02 FB | 	rdlong	local16, fp
13e90     14 4F 05 F1 | 	add	fp, #276
13e94     A7 34 02 FB | 	rdlong	local08, fp
13e98     02 34 66 F0 | 	shl	local08, #2
13e9c     04 4F 85 F1 | 	sub	fp, #260
13ea0     A7 34 02 F1 | 	add	local08, fp
13ea4     1A 13 02 FB | 	rdlong	arg01, local08
13ea8     00 14 06 F6 | 	mov	arg02, #0
13eac     2C 4E 85 F1 | 	sub	fp, #44
13eb0     80 55 B1 FD | 	call	#__system____builtin_atoi
13eb4     FD 14 02 F6 | 	mov	arg02, result1
13eb8     22 13 02 F6 | 	mov	arg01, local16
13ebc     C0 E8 B0 FD | 	call	#_pspoke
13ec0                 | LR__1627
13ec0                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
13ec0     18 4E 05 F1 | 	add	fp, #24
13ec4     A7 44 02 FB | 	rdlong	local16, fp
13ec8     18 4E 85 F1 | 	sub	fp, #24
13ecc     06 44 0E F2 | 	cmp	local16, #6 wz
13ed0     64 00 90 5D |  if_ne	jmp	#LR__1628
13ed4     52 00 00 FF 
13ed8     10 E5 05 F1 | 	add	objptr, ##42256
13edc     F2 42 02 FB | 	rdlong	local15, objptr
13ee0     52 00 00 FF 
13ee4     10 E5 85 F1 | 	sub	objptr, ##42256
13ee8     2B 42 0E F2 | 	cmp	local15, #43 wz
13eec     48 00 90 AD |  if_e	jmp	#LR__1628
13ef0     30 4F 05 F1 | 	add	fp, #304
13ef4     A7 32 02 FB | 	rdlong	local07, fp
13ef8     02 32 66 F0 | 	shl	local07, #2
13efc     04 4F 85 F1 | 	sub	fp, #260
13f00     A7 32 02 F1 | 	add	local07, fp
13f04     19 13 02 FB | 	rdlong	arg01, local07
13f08     2C 4E 85 F1 | 	sub	fp, #44
13f0c     B8 56 B1 FD | 	call	#__system____builtin_atof
13f10     28 4E 05 F1 | 	add	fp, #40
13f14     A7 FA 61 FC | 	wrlong	result1, fp
13f18     0C 4E 85 F1 | 	sub	fp, #12
13f1c     A7 44 02 FB | 	rdlong	local16, fp
13f20     0C 4E 05 F1 | 	add	fp, #12
13f24     A7 12 02 F6 | 	mov	arg01, fp
13f28     28 4E 85 F1 | 	sub	fp, #40
13f2c     09 15 02 FB | 	rdlong	arg02, arg01
13f30     22 13 02 F6 | 	mov	arg01, local16
13f34     B8 E7 B0 FD | 	call	#_pslpoke
13f38                 | LR__1628
13f38     30 4F 05 F1 | 	add	fp, #304
13f3c     A7 42 02 FB | 	rdlong	local15, fp
13f40     01 42 06 F1 | 	add	local15, #1
13f44     A7 42 62 FC | 	wrlong	local15, fp
13f48     30 4F 85 F1 | 	sub	fp, #304
13f4c     E4 F6 9F FD | 	jmp	#LR__1593
13f50                 | LR__1629
13f50                 | LR__1630
13f50     A7 F0 03 F6 | 	mov	ptra, fp
13f54     B2 00 A0 FD | 	call	#popregs_
13f58                 | _do_input_ret
13f58     2D 00 64 FD | 	ret
13f5c                 | 
13f5c                 | ' 
13f5c                 | ' ' ----------------  left$
13f5c                 | ' 
13f5c                 | ' sub do_left
13f5c                 | _do_left
13f5c     00 4A 05 F6 | 	mov	COUNT_, #0
13f60     A8 00 A0 FD | 	call	#pushregs_
13f64     14 F0 07 F1 | 	add	ptra, #20
13f68     4A 00 00 FF 
13f6c     80 E4 05 F1 | 	add	objptr, ##38016
13f70     F2 16 02 FB | 	rdlong	arg03, objptr
13f74     0B 15 02 F6 | 	mov	arg02, arg03
13f78     01 14 66 F0 | 	shl	arg02, #1
13f7c     0B 15 02 F1 | 	add	arg02, arg03
13f80     02 14 66 F0 | 	shl	arg02, #2
13f84     03 00 00 FF 
13f88     04 E4 85 F1 | 	sub	objptr, ##1540
13f8c     F2 14 02 F1 | 	add	arg02, objptr
13f90     0A 17 02 FB | 	rdlong	arg03, arg02
13f94     0C 4E 05 F1 | 	add	fp, #12
13f98     A7 16 62 FC | 	wrlong	arg03, fp
13f9c                 | ' 
13f9c                 | ' numpar=compiledline(lineptr_e).result.uresult
13f9c                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
13f9c     0C 4E 85 F1 | 	sub	fp, #12
13fa0     02 16 0E F2 | 	cmp	arg03, #2 wz
13fa4     47 00 00 FF 
13fa8     7C E4 85 F1 | 	sub	objptr, ##36476
13fac     40 00 90 AD |  if_e	jmp	#LR__1640
13fb0     00 12 06 F6 | 	mov	arg01, #0
13fb4     2C 7C B1 FD | 	call	#__system___getiolock_0600
13fb8     FD 12 02 F6 | 	mov	arg01, result1
13fbc     80 1F B1 FD | 	call	#__system___lockmem
13fc0     B1 01 00 FF 
13fc4     DF 15 06 F6 | 	mov	arg02, ##@LR__5871
13fc8     00 12 06 F6 | 	mov	arg01, #0
13fcc     00 16 06 F6 | 	mov	arg03, #0
13fd0     64 2C B1 FD | 	call	#__system___basic_print_string
13fd4     00 12 06 F6 | 	mov	arg01, #0
13fd8     08 7C B1 FD | 	call	#__system___getiolock_0600
13fdc     FD 00 68 FC | 	wrlong	#0, result1
13fe0     27 12 06 F6 | 	mov	arg01, #39
13fe4     00 14 06 F6 | 	mov	arg02, #0
13fe8     64 E5 B0 FD | 	call	#_printerror
13fec     EC 00 90 FD | 	jmp	#LR__1643
13ff0                 | LR__1640
13ff0     EC 92 BF FD | 	call	#_pop
13ff4     FF 16 02 F6 | 	mov	arg03, result3
13ff8     A7 FA 61 FC | 	wrlong	result1, fp
13ffc     04 4E 05 F1 | 	add	fp, #4
14000     A7 FC 61 FC | 	wrlong	result2, fp
14004     04 4E 05 F1 | 	add	fp, #4
14008     A7 16 62 FC | 	wrlong	arg03, fp
1400c     08 4E 85 F1 | 	sub	fp, #8
14010     A7 12 02 F6 | 	mov	arg01, fp
14014     AC 94 BF FD | 	call	#_converttoint
14018     FD 16 02 F6 | 	mov	arg03, result1
1401c     10 4E 05 F1 | 	add	fp, #16
14020     A7 16 62 FC | 	wrlong	arg03, fp
14024     10 4E 85 F1 | 	sub	fp, #16
14028     B4 92 BF FD | 	call	#_pop
1402c     FF 16 02 F6 | 	mov	arg03, result3
14030     A7 FA 61 FC | 	wrlong	result1, fp
14034     04 4E 05 F1 | 	add	fp, #4
14038     A7 FC 61 FC | 	wrlong	result2, fp
1403c     04 4E 05 F1 | 	add	fp, #4
14040     A7 16 62 FC | 	wrlong	arg03, fp
14044                 | ' t1=pop() : arg=converttoint(t1)
14044                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14044     08 4E 85 F1 | 	sub	fp, #8
14048     2B 16 0E F2 | 	cmp	arg03, #43 wz
1404c     18 00 90 5D |  if_ne	jmp	#LR__1641
14050     A7 12 02 FB | 	rdlong	arg01, fp
14054     00 94 BF FD | 	call	#_convertstring
14058     A7 FA 61 FC | 	wrlong	result1, fp
1405c     08 4E 05 F1 | 	add	fp, #8
14060     A7 3E 68 FC | 	wrlong	#31, fp
14064     08 4E 85 F1 | 	sub	fp, #8
14068                 | LR__1641
14068                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
14068     08 4E 05 F1 | 	add	fp, #8
1406c     A7 16 02 FB | 	rdlong	arg03, fp
14070     08 4E 85 F1 | 	sub	fp, #8
14074     1F 16 0E F2 | 	cmp	arg03, #31 wz
14078     40 00 90 AD |  if_e	jmp	#LR__1642
1407c     00 12 06 F6 | 	mov	arg01, #0
14080     60 7B B1 FD | 	call	#__system___getiolock_0600
14084     FD 12 02 F6 | 	mov	arg01, result1
14088     B4 1E B1 FD | 	call	#__system___lockmem
1408c     B1 01 00 FF 
14090     E7 15 06 F6 | 	mov	arg02, ##@LR__5872
14094     00 12 06 F6 | 	mov	arg01, #0
14098     00 16 06 F6 | 	mov	arg03, #0
1409c     98 2B B1 FD | 	call	#__system___basic_print_string
140a0     00 12 06 F6 | 	mov	arg01, #0
140a4     3C 7B B1 FD | 	call	#__system___getiolock_0600
140a8     FD 00 68 FC | 	wrlong	#0, result1
140ac     0F 12 06 F6 | 	mov	arg01, #15
140b0     00 14 06 F6 | 	mov	arg02, #0
140b4     98 E4 B0 FD | 	call	#_printerror
140b8     20 00 90 FD | 	jmp	#LR__1643
140bc                 | LR__1642
140bc     A7 12 02 FB | 	rdlong	arg01, fp
140c0     10 4E 05 F1 | 	add	fp, #16
140c4     A7 14 02 FB | 	rdlong	arg02, fp
140c8     10 4E 85 F1 | 	sub	fp, #16
140cc     F0 3E B1 FD | 	call	#__system__Left_S
140d0     A7 FA 61 FC | 	wrlong	result1, fp
140d4     A7 12 02 F6 | 	mov	arg01, fp
140d8     9C 92 BF FD | 	call	#_push
140dc                 | LR__1643
140dc     A7 F0 03 F6 | 	mov	ptra, fp
140e0     B2 00 A0 FD | 	call	#popregs_
140e4                 | _do_left_ret
140e4     2D 00 64 FD | 	ret
140e8                 | 
140e8                 | ' 
140e8                 | ' ' ----------------  len
140e8                 | ' 
140e8                 | ' sub do_len
140e8                 | _do_len
140e8     02 4A 05 F6 | 	mov	COUNT_, #2
140ec     A8 00 A0 FD | 	call	#pushregs_
140f0     14 F0 07 F1 | 	add	ptra, #20
140f4     4A 00 00 FF 
140f8     80 E4 05 F1 | 	add	objptr, ##38016
140fc     F2 26 02 FB | 	rdlong	local01, objptr
14100     13 17 02 F6 | 	mov	arg03, local01
14104     01 16 66 F0 | 	shl	arg03, #1
14108     13 17 02 F1 | 	add	arg03, local01
1410c     02 16 66 F0 | 	shl	arg03, #2
14110     03 00 00 FF 
14114     04 E4 85 F1 | 	sub	objptr, ##1540
14118     F2 16 02 F1 | 	add	arg03, objptr
1411c     0B 17 02 FB | 	rdlong	arg03, arg03
14120     0C 4E 05 F1 | 	add	fp, #12
14124     A7 16 62 FC | 	wrlong	arg03, fp
14128                 | ' 
14128                 | ' numpar=compiledline(lineptr_e).result.uresult
14128                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14128     0C 4E 85 F1 | 	sub	fp, #12
1412c     02 16 16 F2 | 	cmp	arg03, #2 wc
14130     47 00 00 FF 
14134     7C E4 85 F1 | 	sub	objptr, ##36476
14138     0C 4E 05 C1 |  if_b	add	fp, #12
1413c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14140     0C 4E 85 C1 |  if_b	sub	fp, #12
14144     40 00 90 4D |  if_c_and_nz	jmp	#LR__1650
14148     00 12 06 F6 | 	mov	arg01, #0
1414c     94 7A B1 FD | 	call	#__system___getiolock_0600
14150     FD 12 02 F6 | 	mov	arg01, result1
14154     E8 1D B1 FD | 	call	#__system___lockmem
14158     B1 01 00 FF 
1415c     EF 15 06 F6 | 	mov	arg02, ##@LR__5873
14160     00 12 06 F6 | 	mov	arg01, #0
14164     00 16 06 F6 | 	mov	arg03, #0
14168     CC 2A B1 FD | 	call	#__system___basic_print_string
1416c     00 12 06 F6 | 	mov	arg01, #0
14170     70 7A B1 FD | 	call	#__system___getiolock_0600
14174     FD 00 68 FC | 	wrlong	#0, result1
14178     27 12 06 F6 | 	mov	arg01, #39
1417c     00 14 06 F6 | 	mov	arg02, #0
14180     CC E3 B0 FD | 	call	#_printerror
14184     C8 00 90 FD | 	jmp	#LR__1655
14188                 | LR__1650
14188     54 91 BF FD | 	call	#_pop
1418c     FF 16 02 F6 | 	mov	arg03, result3
14190     A7 FA 61 FC | 	wrlong	result1, fp
14194     04 4E 05 F1 | 	add	fp, #4
14198     A7 FC 61 FC | 	wrlong	result2, fp
1419c     04 4E 05 F1 | 	add	fp, #4
141a0     A7 16 62 FC | 	wrlong	arg03, fp
141a4                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
141a4     08 4E 85 F1 | 	sub	fp, #8
141a8     2B 16 0E F2 | 	cmp	arg03, #43 wz
141ac     18 00 90 5D |  if_ne	jmp	#LR__1651
141b0     A7 12 02 FB | 	rdlong	arg01, fp
141b4     A0 92 BF FD | 	call	#_convertstring
141b8     A7 FA 61 FC | 	wrlong	result1, fp
141bc     08 4E 05 F1 | 	add	fp, #8
141c0     A7 3E 68 FC | 	wrlong	#31, fp
141c4     08 4E 85 F1 | 	sub	fp, #8
141c8                 | LR__1651
141c8                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
141c8     08 4E 05 F1 | 	add	fp, #8
141cc     A7 16 02 FB | 	rdlong	arg03, fp
141d0     08 4E 85 F1 | 	sub	fp, #8
141d4     1F 16 0E F2 | 	cmp	arg03, #31 wz
141d8     40 00 90 AD |  if_e	jmp	#LR__1652
141dc     00 12 06 F6 | 	mov	arg01, #0
141e0     00 7A B1 FD | 	call	#__system___getiolock_0600
141e4     FD 12 02 F6 | 	mov	arg01, result1
141e8     54 1D B1 FD | 	call	#__system___lockmem
141ec     B1 01 00 FF 
141f0     F5 15 06 F6 | 	mov	arg02, ##@LR__5874
141f4     00 12 06 F6 | 	mov	arg01, #0
141f8     00 16 06 F6 | 	mov	arg03, #0
141fc     38 2A B1 FD | 	call	#__system___basic_print_string
14200     00 12 06 F6 | 	mov	arg01, #0
14204     DC 79 B1 FD | 	call	#__system___getiolock_0600
14208     FD 00 68 FC | 	wrlong	#0, result1
1420c     0F 12 06 F6 | 	mov	arg01, #15
14210     00 14 06 F6 | 	mov	arg02, #0
14214     38 E3 B0 FD | 	call	#_printerror
14218     34 00 90 FD | 	jmp	#LR__1655
1421c                 | LR__1652
1421c     A7 12 02 FB | 	rdlong	arg01, fp
14220     09 29 02 F6 | 	mov	local02, arg01
14224     97 06 48 FB | 	callpa	#(@LR__1654-@LR__1653)>>2,fcache_load_ptr_
14228                 | LR__1653
14228     14 FB C9 FA | 	rdbyte	result1, local02 wz
1422c     01 28 06 51 |  if_ne	add	local02, #1
14230     F4 FF 9F 5D |  if_ne	jmp	#LR__1653
14234                 | LR__1654
14234     09 29 82 F1 | 	sub	local02, arg01
14238     A7 28 62 FC | 	wrlong	local02, fp
1423c     08 4E 05 F1 | 	add	fp, #8
14240     A7 38 68 FC | 	wrlong	#28, fp
14244     08 4E 85 F1 | 	sub	fp, #8
14248     A7 12 02 F6 | 	mov	arg01, fp
1424c     28 91 BF FD | 	call	#_push
14250                 | LR__1655
14250     A7 F0 03 F6 | 	mov	ptra, fp
14254     B2 00 A0 FD | 	call	#popregs_
14258                 | _do_len_ret
14258     2D 00 64 FD | 	ret
1425c                 | 
1425c                 | ' 
1425c                 | ' ' ----------------  list
1425c                 | ' 
1425c                 | ' sub do_list
1425c                 | _do_list
1425c     02 4A 05 F6 | 	mov	COUNT_, #2
14260     A8 00 A0 FD | 	call	#pushregs_
14264     B8 F0 07 F1 | 	add	ptra, #184
14268     04 4E 05 F1 | 	add	fp, #4
1426c     A7 00 68 FC | 	wrlong	#0, fp
14270     04 4E 05 F1 | 	add	fp, #4
14274     FF FF BF FF 
14278     A7 FE 6B FC | 	wrlong	##2147483647, fp
1427c     08 4E 85 F1 | 	sub	fp, #8
14280     4A 00 00 FF 
14284     80 E4 05 F1 | 	add	objptr, ##38016
14288     F2 26 02 FB | 	rdlong	local01, objptr
1428c     13 17 02 F6 | 	mov	arg03, local01
14290     01 16 66 F0 | 	shl	arg03, #1
14294     13 17 02 F1 | 	add	arg03, local01
14298     02 16 66 F0 | 	shl	arg03, #2
1429c     03 00 00 FF 
142a0     04 E4 85 F1 | 	sub	objptr, ##1540
142a4     F2 16 02 F1 | 	add	arg03, objptr
142a8     0B 17 02 FB | 	rdlong	arg03, arg03
142ac     A7 16 62 FC | 	wrlong	arg03, fp
142b0                 | ' 
142b0                 | ' startline=0 : endline=$7FFFFFFF
142b0                 | ' numpar=compiledline(lineptr_e).result.uresult
142b0                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
142b0     01 16 0E F2 | 	cmp	arg03, #1 wz
142b4     47 00 00 FF 
142b8     7C E4 85 F1 | 	sub	objptr, ##36476
142bc     3C 00 90 5D |  if_ne	jmp	#LR__1660
142c0     1C 90 BF FD | 	call	#_pop
142c4     FF 26 02 F6 | 	mov	local01, result3
142c8     0C 4E 05 F1 | 	add	fp, #12
142cc     A7 FA 61 FC | 	wrlong	result1, fp
142d0     04 4E 05 F1 | 	add	fp, #4
142d4     A7 FC 61 FC | 	wrlong	result2, fp
142d8     04 4E 05 F1 | 	add	fp, #4
142dc     A7 26 62 FC | 	wrlong	local01, fp
142e0     08 4E 85 F1 | 	sub	fp, #8
142e4     A7 12 02 F6 | 	mov	arg01, fp
142e8     0C 4E 85 F1 | 	sub	fp, #12
142ec     D4 91 BF FD | 	call	#_converttoint
142f0     04 4E 05 F1 | 	add	fp, #4
142f4     A7 FA 61 FC | 	wrlong	result1, fp
142f8     04 4E 85 F1 | 	sub	fp, #4
142fc                 | LR__1660
142fc                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
142fc     A7 16 02 FB | 	rdlong	arg03, fp
14300     02 16 0E F2 | 	cmp	arg03, #2 wz
14304     7C 00 90 5D |  if_ne	jmp	#LR__1661
14308     D4 8F BF FD | 	call	#_pop
1430c     FF 26 02 F6 | 	mov	local01, result3
14310     0C 4E 05 F1 | 	add	fp, #12
14314     A7 FA 61 FC | 	wrlong	result1, fp
14318     04 4E 05 F1 | 	add	fp, #4
1431c     A7 FC 61 FC | 	wrlong	result2, fp
14320     04 4E 05 F1 | 	add	fp, #4
14324     A7 26 62 FC | 	wrlong	local01, fp
14328     08 4E 85 F1 | 	sub	fp, #8
1432c     A7 12 02 F6 | 	mov	arg01, fp
14330     0C 4E 85 F1 | 	sub	fp, #12
14334     8C 91 BF FD | 	call	#_converttoint
14338     FD 26 02 F6 | 	mov	local01, result1
1433c     08 4E 05 F1 | 	add	fp, #8
14340     A7 26 62 FC | 	wrlong	local01, fp
14344     08 4E 85 F1 | 	sub	fp, #8
14348     94 8F BF FD | 	call	#_pop
1434c     FF 26 02 F6 | 	mov	local01, result3
14350     0C 4E 05 F1 | 	add	fp, #12
14354     A7 FA 61 FC | 	wrlong	result1, fp
14358     04 4E 05 F1 | 	add	fp, #4
1435c     A7 FC 61 FC | 	wrlong	result2, fp
14360     04 4E 05 F1 | 	add	fp, #4
14364     A7 26 62 FC | 	wrlong	local01, fp
14368     08 4E 85 F1 | 	sub	fp, #8
1436c     A7 12 02 F6 | 	mov	arg01, fp
14370     0C 4E 85 F1 | 	sub	fp, #12
14374     4C 91 BF FD | 	call	#_converttoint
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 FA 61 FC | 	wrlong	result1, fp
14380     04 4E 85 F1 | 	sub	fp, #4
14384                 | LR__1661
14384                 | ' 
14384                 | ' 
14384                 | ' print
14384     00 12 06 F6 | 	mov	arg01, #0
14388     58 78 B1 FD | 	call	#__system___getiolock_0600
1438c     FD 12 02 F6 | 	mov	arg01, result1
14390     AC 1B B1 FD | 	call	#__system___lockmem
14394     00 12 06 F6 | 	mov	arg01, #0
14398     0A 14 06 F6 | 	mov	arg02, #10
1439c     00 16 06 F6 | 	mov	arg03, #0
143a0     3C 28 B1 FD | 	call	#__system___basic_print_char
143a4     00 12 06 F6 | 	mov	arg01, #0
143a8     38 78 B1 FD | 	call	#__system___getiolock_0600
143ac     FD 00 68 FC | 	wrlong	#0, result1
143b0     4A 00 00 FF 
143b4     88 E4 05 F1 | 	add	objptr, ##38024
143b8     F2 28 02 FB | 	rdlong	local02, objptr
143bc     08 00 00 FF 
143c0     94 E4 05 F1 | 	add	objptr, ##4244
143c4     F2 28 62 FC | 	wrlong	local02, objptr
143c8     52 00 00 FF 
143cc     1C E5 85 F1 | 	sub	objptr, ##42268
143d0                 | ' do 
143d0                 | LR__1662
143d0     20 4E 05 F1 | 	add	fp, #32
143d4     A7 12 02 F6 | 	mov	arg01, fp
143d8     20 4E 85 F1 | 	sub	fp, #32
143dc     52 00 00 FF 
143e0     1C E5 05 F1 | 	add	objptr, ##42268
143e4     F2 14 02 FB | 	rdlong	arg02, objptr
143e8     18 16 06 F6 | 	mov	arg03, #24
143ec     47 00 00 FF 
143f0     50 E4 85 F1 | 	sub	objptr, ##36432
143f4     C0 0E B1 FD | 	call	#_psram_spin2_read1
143f8     0B 00 00 FF 
143fc     CC E4 85 F1 | 	sub	objptr, ##5836
14400                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14400                 | '   
14400                 | '   if header(0)<> $FFFFFFFF then
14400     20 4E 05 F1 | 	add	fp, #32
14404     A7 28 02 FB | 	rdlong	local02, fp
14408     20 4E 85 F1 | 	sub	fp, #32
1440c     FF FF 7F FF 
14410     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14414     A8 00 90 AD |  if_e	jmp	#LR__1664
14418     38 4E 05 F1 | 	add	fp, #56
1441c     3F 16 06 F6 | 	mov	arg03, #63
14420     28 16 62 FD | 	setq	arg03
14424     A7 00 68 FC | 	wrlong	#0, fp
14428     A7 12 02 F6 | 	mov	arg01, fp
1442c     10 4E 85 F1 | 	sub	fp, #16
14430     A7 14 02 FB | 	rdlong	arg02, fp
14434     04 4E 05 F1 | 	add	fp, #4
14438     A7 16 02 FB | 	rdlong	arg03, fp
1443c     2C 4E 85 F1 | 	sub	fp, #44
14440     0B 00 00 FF 
14444     CC E4 05 F1 | 	add	objptr, ##5836
14448     6C 0E B1 FD | 	call	#_psram_spin2_read1
1444c     0B 00 00 FF 
14450     CC E4 85 F1 | 	sub	objptr, ##5836
14454                 | '     longfill(linebuf,0,64)
14454                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14454                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14454     20 4E 05 F1 | 	add	fp, #32
14458     A7 28 02 FB | 	rdlong	local02, fp
1445c     1C 4E 85 F1 | 	sub	fp, #28
14460     A7 26 02 FB | 	rdlong	local01, fp
14464     04 4E 85 F1 | 	sub	fp, #4
14468     13 29 52 F2 | 	cmps	local02, local01 wc
1446c     30 00 90 CD |  if_b	jmp	#LR__1663
14470     20 4E 05 F1 | 	add	fp, #32
14474     A7 28 02 FB | 	rdlong	local02, fp
14478     18 4E 85 F1 | 	sub	fp, #24
1447c     A7 16 02 FB | 	rdlong	arg03, fp
14480     08 4E 85 F1 | 	sub	fp, #8
14484     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14488     14 00 90 1D |  if_a	jmp	#LR__1663
1448c     38 4E 05 F1 | 	add	fp, #56
14490     A7 12 02 F6 | 	mov	arg01, fp
14494     38 4E 85 F1 | 	sub	fp, #56
14498                 | ' 
14498                 | ' write(text)
14498     E0 01 B1 FD | 	call	#_hg010b_spin2_write
1449c                 | ' crlf
1449c     DC 06 B1 FD | 	call	#_hg010b_spin2_crlf
144a0                 | LR__1663
144a0     34 4E 05 F1 | 	add	fp, #52
144a4     A7 28 02 FB | 	rdlong	local02, fp
144a8     34 4E 85 F1 | 	sub	fp, #52
144ac     52 00 00 FF 
144b0     1C E5 05 F1 | 	add	objptr, ##42268
144b4     F2 28 62 FC | 	wrlong	local02, objptr
144b8     52 00 00 FF 
144bc     1C E5 85 F1 | 	sub	objptr, ##42268
144c0                 | LR__1664
144c0     34 4E 05 F1 | 	add	fp, #52
144c4     A7 28 02 FB | 	rdlong	local02, fp
144c8     34 4E 85 F1 | 	sub	fp, #52
144cc     FF FF 3F FF 
144d0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
144d4     20 4E 05 51 |  if_ne	add	fp, #32
144d8     A7 26 02 5B |  if_ne	rdlong	local01, fp
144dc     20 4E 85 51 |  if_ne	sub	fp, #32
144e0     FF FF 7F 5F 
144e4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
144e8     E4 FE 9F 5D |  if_ne	jmp	#LR__1662
144ec     A7 F0 03 F6 | 	mov	ptra, fp
144f0     B2 00 A0 FD | 	call	#popregs_
144f4                 | _do_list_ret
144f4     2D 00 64 FD | 	ret
144f8                 | 
144f8                 | ' 
144f8                 | ' '-------------------- load
144f8                 | ' 
144f8                 | ' sub do_load(amode=0 as integer)  
144f8                 | _do_load
144f8     01 4A 05 F6 | 	mov	COUNT_, #1
144fc     A8 00 A0 FD | 	call	#pushregs_
14500     AC F0 07 F1 | 	add	ptra, #172
14504     A7 12 62 FC | 	wrlong	arg01, fp
14508     52 00 00 FF 
1450c     D4 E4 05 F1 | 	add	objptr, ##42196
14510     F2 02 68 FC | 	wrlong	#1, objptr
14514     08 00 00 FF 
14518     54 E4 85 F1 | 	sub	objptr, ##4180
1451c     F2 14 02 FB | 	rdlong	arg02, objptr
14520     0A 13 02 F6 | 	mov	arg01, arg02
14524     01 12 66 F0 | 	shl	arg01, #1
14528     0A 13 02 F1 | 	add	arg01, arg02
1452c     02 12 66 F0 | 	shl	arg01, #2
14530     03 00 00 FF 
14534     04 E4 85 F1 | 	sub	objptr, ##1540
14538     F2 12 02 F1 | 	add	arg01, objptr
1453c     09 15 02 FB | 	rdlong	arg02, arg01
14540     1C 4E 05 F1 | 	add	fp, #28
14544     A7 14 62 FC | 	wrlong	arg02, fp
14548     8C 4E 05 F1 | 	add	fp, #140
1454c     A7 12 02 F6 | 	mov	arg01, fp
14550     47 00 00 FF 
14554     7C E4 85 F1 | 	sub	objptr, ##36476
14558     80 4E 85 F1 | 	sub	fp, #128
1455c     09 4F 61 FC | 	wrlong	fp, arg01
14560                 | ' 
14560                 | ' inload=1
14560                 | ' numpar=compiledline(lineptr_e).result.uresult
14560                 | ' lpoke varptr(line2$),varptr(line2)
14560                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14560     0C 4E 85 F1 | 	sub	fp, #12
14564     A7 26 02 FB | 	rdlong	local01, fp
14568     1C 4E 85 F1 | 	sub	fp, #28
1456c     01 26 56 F2 | 	cmps	local01, #1 wc
14570     24 00 90 CD |  if_b	jmp	#LR__1670
14574     68 8D BF FD | 	call	#_pop
14578     04 4E 05 F1 | 	add	fp, #4
1457c     A7 FA 61 FC | 	wrlong	result1, fp
14580     04 4E 05 F1 | 	add	fp, #4
14584     A7 FC 61 FC | 	wrlong	result2, fp
14588     04 4E 05 F1 | 	add	fp, #4
1458c     A7 FE 61 FC | 	wrlong	result3, fp
14590     0C 4E 85 F1 | 	sub	fp, #12
14594     28 00 90 FD | 	jmp	#LR__1671
14598                 | LR__1670
14598     52 00 00 FF 
1459c     C4 E4 05 F1 | 	add	objptr, ##42180
145a0     F2 26 02 FB | 	rdlong	local01, objptr
145a4     52 00 00 FF 
145a8     C4 E4 85 F1 | 	sub	objptr, ##42180
145ac     04 4E 05 F1 | 	add	fp, #4
145b0     A7 26 62 FC | 	wrlong	local01, fp
145b4     08 4E 05 F1 | 	add	fp, #8
145b8     A7 3E 68 FC | 	wrlong	#31, fp
145bc     0C 4E 85 F1 | 	sub	fp, #12
145c0                 | LR__1671
145c0                 | ' 'print "popped "; t1.result.uresult, t1.result_type
145c0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
145c0     0C 4E 05 F1 | 	add	fp, #12
145c4     A7 26 02 FB | 	rdlong	local01, fp
145c8     0C 4E 85 F1 | 	sub	fp, #12
145cc     2B 26 0E F2 | 	cmp	local01, #43 wz
145d0     24 00 90 5D |  if_ne	jmp	#LR__1672
145d4     04 4E 05 F1 | 	add	fp, #4
145d8     A7 12 02 FB | 	rdlong	arg01, fp
145dc     04 4E 85 F1 | 	sub	fp, #4
145e0     74 8E BF FD | 	call	#_convertstring
145e4     04 4E 05 F1 | 	add	fp, #4
145e8     A7 FA 61 FC | 	wrlong	result1, fp
145ec     08 4E 05 F1 | 	add	fp, #8
145f0     A7 3E 68 FC | 	wrlong	#31, fp
145f4     0C 4E 85 F1 | 	sub	fp, #12
145f8                 | LR__1672
145f8                 | ' if t1.result_type=result_string then
145f8     0C 4E 05 F1 | 	add	fp, #12
145fc     A7 26 02 FB | 	rdlong	local01, fp
14600     0C 4E 85 F1 | 	sub	fp, #12
14604     1F 26 0E F2 | 	cmp	local01, #31 wz
14608     E8 02 90 5D |  if_ne	jmp	#LR__1678
1460c                 | '   if amode<>1234 then do_new
1460c     A7 26 02 FB | 	rdlong	local01, fp
14610     02 00 00 FF 
14614     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14618     10 0E B0 5D |  if_ne	call	#_do_new
1461c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1461c     04 4E 05 F1 | 	add	fp, #4
14620     A7 12 02 FB | 	rdlong	arg01, fp
14624     04 4E 85 F1 | 	sub	fp, #4
14628     B1 01 00 FF 
1462c     FB 15 06 F6 | 	mov	arg02, ##@LR__5875
14630     34 19 B1 FD | 	call	#__system___string_cmp
14634     00 FA 0D F2 | 	cmp	result1, #0 wz
14638     24 00 90 5D |  if_ne	jmp	#LR__1673
1463c     52 00 00 FF 
14640     C4 E4 05 F1 | 	add	objptr, ##42180
14644     F2 26 02 FB | 	rdlong	local01, objptr
14648     52 00 00 FF 
1464c     C4 E4 85 F1 | 	sub	objptr, ##42180
14650     04 4E 05 F1 | 	add	fp, #4
14654     A7 26 62 FC | 	wrlong	local01, fp
14658     04 4E 85 F1 | 	sub	fp, #4
1465c     20 00 90 FD | 	jmp	#LR__1674
14660                 | LR__1673
14660     04 4E 05 F1 | 	add	fp, #4
14664     A7 26 02 FB | 	rdlong	local01, fp
14668     04 4E 85 F1 | 	sub	fp, #4
1466c     52 00 00 FF 
14670     C4 E4 05 F1 | 	add	objptr, ##42180
14674     F2 26 62 FC | 	wrlong	local01, objptr
14678     52 00 00 FF 
1467c     C4 E4 85 F1 | 	sub	objptr, ##42180
14680                 | LR__1674
14680                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14680     09 12 06 F6 | 	mov	arg01, #9
14684     14 6C B1 FD | 	call	#__system__close
14688     09 26 06 F6 | 	mov	local01, #9
1468c     4A 00 00 FF 
14690     94 E4 05 F1 | 	add	objptr, ##38036
14694     F2 12 02 FB | 	rdlong	arg01, objptr
14698     4A 00 00 FF 
1469c     94 E4 85 F1 | 	sub	objptr, ##38036
146a0     B1 01 00 FF 
146a4     FC 15 06 F6 | 	mov	arg02, ##@LR__5876
146a8     F0 18 B1 FD | 	call	#__system___string_concat
146ac     FD 12 02 F6 | 	mov	arg01, result1
146b0     04 4E 05 F1 | 	add	fp, #4
146b4     A7 14 02 FB | 	rdlong	arg02, fp
146b8     04 4E 85 F1 | 	sub	fp, #4
146bc     DC 18 B1 FD | 	call	#__system___string_concat
146c0     FD 14 02 F6 | 	mov	arg02, result1
146c4     13 13 02 F6 | 	mov	arg01, local01
146c8     00 16 06 F6 | 	mov	arg03, #0
146cc     74 24 B1 FD | 	call	#__system___basic_open_string
146d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
146d4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
146d8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
146dc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
146e0     14 4E 05 F1 | 	add	fp, #20
146e4     A7 FA 61 FC | 	wrlong	result1, fp
146e8                 | '   r=geterr() 
146e8                 | '   if r then 
146e8     14 4E 85 F1 | 	sub	fp, #20
146ec     54 01 90 AD |  if_e	jmp	#LR__1676
146f0                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
146f0     09 12 06 F6 | 	mov	arg01, #9
146f4     A4 6B B1 FD | 	call	#__system__close
146f8     09 26 06 F6 | 	mov	local01, #9
146fc     4A 00 00 FF 
14700     94 E4 05 F1 | 	add	objptr, ##38036
14704     F2 12 02 FB | 	rdlong	arg01, objptr
14708     4A 00 00 FF 
1470c     94 E4 85 F1 | 	sub	objptr, ##38036
14710     B1 01 00 FF 
14714     FE 15 06 F6 | 	mov	arg02, ##@LR__5877
14718     80 18 B1 FD | 	call	#__system___string_concat
1471c     FD 12 02 F6 | 	mov	arg01, result1
14720     04 4E 05 F1 | 	add	fp, #4
14724     A7 14 02 FB | 	rdlong	arg02, fp
14728     04 4E 85 F1 | 	sub	fp, #4
1472c     6C 18 B1 FD | 	call	#__system___string_concat
14730     FD 12 02 F6 | 	mov	arg01, result1
14734     B2 01 00 FF 
14738     00 14 06 F6 | 	mov	arg02, ##@LR__5878
1473c     5C 18 B1 FD | 	call	#__system___string_concat
14740     FD 14 02 F6 | 	mov	arg02, result1
14744     13 13 02 F6 | 	mov	arg01, local01
14748     00 16 06 F6 | 	mov	arg03, #0
1474c     F4 23 B1 FD | 	call	#__system___basic_open_string
14750     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14754     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14758     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
1475c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14760     14 4E 05 F1 | 	add	fp, #20
14764     A7 FA 61 FC | 	wrlong	result1, fp
14768                 | '     r=geterr() 
14768                 | '     if r then 
14768     14 4E 85 F1 | 	sub	fp, #20
1476c     A0 00 90 AD |  if_e	jmp	#LR__1675
14770                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
14770     00 12 06 F6 | 	mov	arg01, #0
14774     6C 74 B1 FD | 	call	#__system___getiolock_0600
14778     FD 12 02 F6 | 	mov	arg01, result1
1477c     C0 17 B1 FD | 	call	#__system___lockmem
14780     B2 01 00 FF 
14784     05 14 06 F6 | 	mov	arg02, ##@LR__5879
14788     00 12 06 F6 | 	mov	arg01, #0
1478c     00 16 06 F6 | 	mov	arg03, #0
14790     A4 24 B1 FD | 	call	#__system___basic_print_string
14794     14 4E 05 F1 | 	add	fp, #20
14798     A7 14 02 FB | 	rdlong	arg02, fp
1479c     14 4E 85 F1 | 	sub	fp, #20
147a0     00 12 06 F6 | 	mov	arg01, #0
147a4     00 16 06 F6 | 	mov	arg03, #0
147a8     0A 18 06 F6 | 	mov	arg04, #10
147ac     CC 24 B1 FD | 	call	#__system___basic_print_integer
147b0     B2 01 00 FF 
147b4     13 14 06 F6 | 	mov	arg02, ##@LR__5880
147b8     00 12 06 F6 | 	mov	arg01, #0
147bc     00 16 06 F6 | 	mov	arg03, #0
147c0     74 24 B1 FD | 	call	#__system___basic_print_string
147c4     00 26 06 F6 | 	mov	local01, #0
147c8     14 4E 05 F1 | 	add	fp, #20
147cc     A7 12 02 FB | 	rdlong	arg01, fp
147d0     14 4E 85 F1 | 	sub	fp, #20
147d4     F8 40 B1 FD | 	call	#__system___strerror
147d8     FD 14 02 F6 | 	mov	arg02, result1
147dc     13 13 02 F6 | 	mov	arg01, local01
147e0     00 16 06 F6 | 	mov	arg03, #0
147e4     50 24 B1 FD | 	call	#__system___basic_print_string
147e8     00 12 06 F6 | 	mov	arg01, #0
147ec     0A 14 06 F6 | 	mov	arg02, #10
147f0     00 16 06 F6 | 	mov	arg03, #0
147f4     E8 23 B1 FD | 	call	#__system___basic_print_char
147f8     00 12 06 F6 | 	mov	arg01, #0
147fc     E4 73 B1 FD | 	call	#__system___getiolock_0600
14800     FD 00 68 FC | 	wrlong	#0, result1
14804     09 12 06 F6 | 	mov	arg01, #9
14808     90 6A B1 FD | 	call	#__system__close
1480c     94 01 90 FD | 	jmp	#LR__1680
14810                 | LR__1675
14810     52 00 00 FF 
14814     C4 E4 05 F1 | 	add	objptr, ##42180
14818     F2 12 02 FB | 	rdlong	arg01, objptr
1481c     52 00 00 FF 
14820     C4 E4 85 F1 | 	sub	objptr, ##42180
14824     B2 01 00 FF 
14828     16 14 06 F6 | 	mov	arg02, ##@LR__5881
1482c     6C 17 B1 FD | 	call	#__system___string_concat
14830     52 00 00 FF 
14834     C4 E4 05 F1 | 	add	objptr, ##42180
14838     F2 FA 61 FC | 	wrlong	result1, objptr
1483c     52 00 00 FF 
14840     C4 E4 85 F1 | 	sub	objptr, ##42180
14844                 | LR__1676
14844                 | '   close #9: open currentdir$+"/"+loadname for input as #9
14844     09 12 06 F6 | 	mov	arg01, #9
14848     50 6A B1 FD | 	call	#__system__close
1484c     09 26 06 F6 | 	mov	local01, #9
14850     4A 00 00 FF 
14854     94 E4 05 F1 | 	add	objptr, ##38036
14858     F2 12 02 FB | 	rdlong	arg01, objptr
1485c     4A 00 00 FF 
14860     94 E4 85 F1 | 	sub	objptr, ##38036
14864     B2 01 00 FF 
14868     1B 14 06 F6 | 	mov	arg02, ##@LR__5882
1486c     2C 17 B1 FD | 	call	#__system___string_concat
14870     FD 12 02 F6 | 	mov	arg01, result1
14874     52 00 00 FF 
14878     C4 E4 05 F1 | 	add	objptr, ##42180
1487c     F2 14 02 FB | 	rdlong	arg02, objptr
14880     52 00 00 FF 
14884     C4 E4 85 F1 | 	sub	objptr, ##42180
14888     10 17 B1 FD | 	call	#__system___string_concat
1488c     FD 14 02 F6 | 	mov	arg02, result1
14890     13 13 02 F6 | 	mov	arg01, local01
14894     00 16 06 F6 | 	mov	arg03, #0
14898     A8 22 B1 FD | 	call	#__system___basic_open_string
1489c                 | '   do
1489c                 | LR__1677
1489c     09 12 06 F6 | 	mov	arg01, #9
148a0     A8 18 B1 FD | 	call	#__system___basic_read_line
148a4     FD 26 02 F6 | 	mov	local01, result1
148a8     37 00 00 FF 
148ac     1C E4 05 F1 | 	add	objptr, ##28188
148b0     F2 26 62 FC | 	wrlong	local01, objptr
148b4     37 00 00 FF 
148b8     1C E4 85 F1 | 	sub	objptr, ##28188
148bc     68 CF BE FD | 	call	#_interpret
148c0     37 00 00 FF 
148c4     1C E4 05 F1 | 	add	objptr, ##28188
148c8     F2 12 02 FB | 	rdlong	arg01, objptr
148cc     37 00 00 FF 
148d0     1C E4 85 F1 | 	sub	objptr, ##28188
148d4     B2 01 00 FF 
148d8     1D 14 06 F6 | 	mov	arg02, ##@LR__5883
148dc     88 16 B1 FD | 	call	#__system___string_cmp
148e0     00 FA 0D F2 | 	cmp	result1, #0 wz
148e4     B4 FF 9F 5D |  if_ne	jmp	#LR__1677
148e8                 | '   close #9   
148e8     09 12 06 F6 | 	mov	arg01, #9
148ec     AC 69 B1 FD | 	call	#__system__close
148f0     0C 00 90 FD | 	jmp	#LR__1679
148f4                 | LR__1678
148f4     1E 12 06 F6 | 	mov	arg01, #30
148f8     00 14 06 F6 | 	mov	arg02, #0
148fc     50 DC B0 FD | 	call	#_printerror
14900                 | LR__1679
14900                 | ' print "Loaded ";currentdir$+"/"+loadname
14900     00 12 06 F6 | 	mov	arg01, #0
14904     DC 72 B1 FD | 	call	#__system___getiolock_0600
14908     FD 12 02 F6 | 	mov	arg01, result1
1490c     30 16 B1 FD | 	call	#__system___lockmem
14910     B2 01 00 FF 
14914     1E 14 06 F6 | 	mov	arg02, ##@LR__5884
14918     00 12 06 F6 | 	mov	arg01, #0
1491c     00 16 06 F6 | 	mov	arg03, #0
14920     14 23 B1 FD | 	call	#__system___basic_print_string
14924     00 26 06 F6 | 	mov	local01, #0
14928     4A 00 00 FF 
1492c     94 E4 05 F1 | 	add	objptr, ##38036
14930     F2 12 02 FB | 	rdlong	arg01, objptr
14934     4A 00 00 FF 
14938     94 E4 85 F1 | 	sub	objptr, ##38036
1493c     B2 01 00 FF 
14940     26 14 06 F6 | 	mov	arg02, ##@LR__5885
14944     54 16 B1 FD | 	call	#__system___string_concat
14948     FD 12 02 F6 | 	mov	arg01, result1
1494c     52 00 00 FF 
14950     C4 E4 05 F1 | 	add	objptr, ##42180
14954     F2 14 02 FB | 	rdlong	arg02, objptr
14958     52 00 00 FF 
1495c     C4 E4 85 F1 | 	sub	objptr, ##42180
14960     38 16 B1 FD | 	call	#__system___string_concat
14964     FD 14 02 F6 | 	mov	arg02, result1
14968     13 13 02 F6 | 	mov	arg01, local01
1496c     00 16 06 F6 | 	mov	arg03, #0
14970     C4 22 B1 FD | 	call	#__system___basic_print_string
14974     00 12 06 F6 | 	mov	arg01, #0
14978     0A 14 06 F6 | 	mov	arg02, #10
1497c     00 16 06 F6 | 	mov	arg03, #0
14980     5C 22 B1 FD | 	call	#__system___basic_print_char
14984     00 12 06 F6 | 	mov	arg01, #0
14988     58 72 B1 FD | 	call	#__system___getiolock_0600
1498c     FD 00 68 FC | 	wrlong	#0, result1
14990     52 00 00 FF 
14994     D4 E4 05 F1 | 	add	objptr, ##42196
14998     F2 00 68 FC | 	wrlong	#0, objptr
1499c     52 00 00 FF 
149a0     D4 E4 85 F1 | 	sub	objptr, ##42196
149a4                 | LR__1680
149a4     A7 F0 03 F6 | 	mov	ptra, fp
149a8     B2 00 A0 FD | 	call	#popregs_
149ac                 | _do_load_ret
149ac     2D 00 64 FD | 	ret
149b0                 | 
149b0                 | ' 
149b0                 | ' '-------------------- log
149b0                 | ' 
149b0                 | ' sub do_log
149b0                 | _do_log
149b0     01 4A 05 F6 | 	mov	COUNT_, #1
149b4     A8 00 A0 FD | 	call	#pushregs_
149b8     14 F0 07 F1 | 	add	ptra, #20
149bc     4A 00 00 FF 
149c0     80 E4 05 F1 | 	add	objptr, ##38016
149c4     F2 26 02 FB | 	rdlong	local01, objptr
149c8     13 17 02 F6 | 	mov	arg03, local01
149cc     01 16 66 F0 | 	shl	arg03, #1
149d0     13 17 02 F1 | 	add	arg03, local01
149d4     02 16 66 F0 | 	shl	arg03, #2
149d8     03 00 00 FF 
149dc     04 E4 85 F1 | 	sub	objptr, ##1540
149e0     F2 16 02 F1 | 	add	arg03, objptr
149e4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
149e8     0C 4E 05 F1 | 	add	fp, #12
149ec     A7 16 62 FC | 	wrlong	arg03, fp
149f0                 | ' 
149f0                 | ' numpar=compiledline(lineptr_e).result.uresult
149f0                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
149f0     0C 4E 85 F1 | 	sub	fp, #12
149f4     47 00 00 FF 
149f8     7C E4 85 F1 | 	sub	objptr, ##36476
149fc     0C 4E 05 51 |  if_ne	add	fp, #12
14a00     A7 26 02 5B |  if_ne	rdlong	local01, fp
14a04     0C 4E 85 51 |  if_ne	sub	fp, #12
14a08     03 26 16 52 |  if_ne	cmp	local01, #3 wc
14a0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1690
14a10     00 12 06 F6 | 	mov	arg01, #0
14a14     CC 71 B1 FD | 	call	#__system___getiolock_0600
14a18     FD 12 02 F6 | 	mov	arg01, result1
14a1c     20 15 B1 FD | 	call	#__system___lockmem
14a20     B2 01 00 FF 
14a24     28 14 06 F6 | 	mov	arg02, ##@LR__5886
14a28     00 12 06 F6 | 	mov	arg01, #0
14a2c     00 16 06 F6 | 	mov	arg03, #0
14a30     04 22 B1 FD | 	call	#__system___basic_print_string
14a34     00 12 06 F6 | 	mov	arg01, #0
14a38     A8 71 B1 FD | 	call	#__system___getiolock_0600
14a3c     FD 00 68 FC | 	wrlong	#0, result1
14a40     27 12 06 F6 | 	mov	arg01, #39
14a44     00 14 06 F6 | 	mov	arg02, #0
14a48     04 DB B0 FD | 	call	#_printerror
14a4c     D0 00 90 FD | 	jmp	#LR__1693
14a50                 | LR__1690
14a50                 | ' if numpar=2 then 
14a50     0C 4E 05 F1 | 	add	fp, #12
14a54     A7 26 02 FB | 	rdlong	local01, fp
14a58     0C 4E 85 F1 | 	sub	fp, #12
14a5c     02 26 0E F2 | 	cmp	local01, #2 wz
14a60     48 00 90 5D |  if_ne	jmp	#LR__1691
14a64     78 88 BF FD | 	call	#_pop
14a68     FF 26 02 F6 | 	mov	local01, result3
14a6c     A7 FA 61 FC | 	wrlong	result1, fp
14a70     04 4E 05 F1 | 	add	fp, #4
14a74     A7 FC 61 FC | 	wrlong	result2, fp
14a78     04 4E 05 F1 | 	add	fp, #4
14a7c     A7 26 62 FC | 	wrlong	local01, fp
14a80     08 4E 85 F1 | 	sub	fp, #8
14a84     A7 12 02 F6 | 	mov	arg01, fp
14a88     F4 8A BF FD | 	call	#_converttofloat
14a8c     FD 14 02 F6 | 	mov	arg02, result1
14a90     FC 16 20 FF 
14a94     54 12 06 F6 | 	mov	arg01, ##1076754516
14a98     F0 52 B1 FD | 	call	#__system____builtin_logbase
14a9c     10 4E 05 F1 | 	add	fp, #16
14aa0     A7 FA 61 FC | 	wrlong	result1, fp
14aa4     10 4E 85 F1 | 	sub	fp, #16
14aa8     10 00 90 FD | 	jmp	#LR__1692
14aac                 | LR__1691
14aac     10 4E 05 F1 | 	add	fp, #16
14ab0     00 C0 9F FF 
14ab4     A7 00 68 FC | 	wrlong	##1065353216, fp
14ab8     10 4E 85 F1 | 	sub	fp, #16
14abc                 | LR__1692
14abc     20 88 BF FD | 	call	#_pop
14ac0     FF 26 02 F6 | 	mov	local01, result3
14ac4     A7 FA 61 FC | 	wrlong	result1, fp
14ac8     04 4E 05 F1 | 	add	fp, #4
14acc     A7 FC 61 FC | 	wrlong	result2, fp
14ad0     04 4E 05 F1 | 	add	fp, #4
14ad4     A7 26 62 FC | 	wrlong	local01, fp
14ad8     08 4E 85 F1 | 	sub	fp, #8
14adc     A7 12 02 F6 | 	mov	arg01, fp
14ae0     9C 8A BF FD | 	call	#_converttofloat
14ae4     FD 14 02 F6 | 	mov	arg02, result1
14ae8     FC 16 20 FF 
14aec     54 12 06 F6 | 	mov	arg01, ##1076754516
14af0     98 52 B1 FD | 	call	#__system____builtin_logbase
14af4     FD 12 02 F6 | 	mov	arg01, result1
14af8     10 4E 05 F1 | 	add	fp, #16
14afc     A7 14 02 FB | 	rdlong	arg02, fp
14b00     10 4E 85 F1 | 	sub	fp, #16
14b04     B8 44 B1 FD | 	call	#__system___float_div
14b08     A7 FA 61 FC | 	wrlong	result1, fp
14b0c     08 4E 05 F1 | 	add	fp, #8
14b10     A7 3C 68 FC | 	wrlong	#30, fp
14b14     08 4E 85 F1 | 	sub	fp, #8
14b18     A7 12 02 F6 | 	mov	arg01, fp
14b1c     58 88 BF FD | 	call	#_push
14b20                 | LR__1693
14b20     A7 F0 03 F6 | 	mov	ptra, fp
14b24     B2 00 A0 FD | 	call	#popregs_
14b28                 | _do_log_ret
14b28     2D 00 64 FD | 	ret
14b2c                 | 
14b2c                 | ' 
14b2c                 | ' '-------------------- lpeek
14b2c                 | ' 
14b2c                 | ' sub do_lpeek
14b2c                 | _do_lpeek
14b2c     00 4A 05 F6 | 	mov	COUNT_, #0
14b30     A8 00 A0 FD | 	call	#pushregs_
14b34     14 F0 07 F1 | 	add	ptra, #20
14b38     A4 87 BF FD | 	call	#_pop
14b3c     A7 FA 61 FC | 	wrlong	result1, fp
14b40     04 4E 05 F1 | 	add	fp, #4
14b44     A7 FC 61 FC | 	wrlong	result2, fp
14b48     04 4E 05 F1 | 	add	fp, #4
14b4c     A7 FE 61 FC | 	wrlong	result3, fp
14b50     08 4E 85 F1 | 	sub	fp, #8
14b54     A7 12 02 F6 | 	mov	arg01, fp
14b58     68 89 BF FD | 	call	#_converttoint
14b5c     0C 4E 05 F1 | 	add	fp, #12
14b60     A7 FA 61 FC | 	wrlong	result1, fp
14b64                 | ' 
14b64                 | ' t1=pop()
14b64                 | ' a=converttoint(t1)
14b64                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
14b64     0C 4E 85 F1 | 	sub	fp, #12
14b68     00 04 00 FF 
14b6c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14b70     1C 00 90 3D |  if_ae	jmp	#LR__1700
14b74     0C 4E 05 F1 | 	add	fp, #12
14b78     A7 12 02 FB | 	rdlong	arg01, fp
14b7c     09 FB 01 FB | 	rdlong	result1, arg01
14b80     04 4E 05 F1 | 	add	fp, #4
14b84     A7 FA 61 FC | 	wrlong	result1, fp
14b88     10 4E 85 F1 | 	sub	fp, #16
14b8c     1C 00 90 FD | 	jmp	#LR__1701
14b90                 | LR__1700
14b90     0C 4E 05 F1 | 	add	fp, #12
14b94     A7 12 02 FB | 	rdlong	arg01, fp
14b98     0C 4E 85 F1 | 	sub	fp, #12
14b9c     80 DC B0 FD | 	call	#_pslpeek
14ba0     10 4E 05 F1 | 	add	fp, #16
14ba4     A7 FA 61 FC | 	wrlong	result1, fp
14ba8     10 4E 85 F1 | 	sub	fp, #16
14bac                 | LR__1701
14bac     08 4E 05 F1 | 	add	fp, #8
14bb0     A7 3A 68 FC | 	wrlong	#29, fp
14bb4     08 4E 05 F1 | 	add	fp, #8
14bb8     A7 12 02 FB | 	rdlong	arg01, fp
14bbc     10 4E 85 F1 | 	sub	fp, #16
14bc0     A7 12 62 FC | 	wrlong	arg01, fp
14bc4     A7 12 02 F6 | 	mov	arg01, fp
14bc8     AC 87 BF FD | 	call	#_push
14bcc     A7 F0 03 F6 | 	mov	ptra, fp
14bd0     B2 00 A0 FD | 	call	#popregs_
14bd4                 | _do_lpeek_ret
14bd4     2D 00 64 FD | 	ret
14bd8                 | 
14bd8                 | ' 
14bd8                 | ' '-------------------- lpoke
14bd8                 | ' 
14bd8                 | ' sub do_lpoke
14bd8                 | _do_lpoke
14bd8     01 4A 05 F6 | 	mov	COUNT_, #1
14bdc     A8 00 A0 FD | 	call	#pushregs_
14be0     20 F0 07 F1 | 	add	ptra, #32
14be4     F8 86 BF FD | 	call	#_pop
14be8     FD 14 02 F6 | 	mov	arg02, result1
14bec     FE 12 02 F6 | 	mov	arg01, result2
14bf0     FF 26 02 F6 | 	mov	local01, result3
14bf4     A7 14 62 FC | 	wrlong	arg02, fp
14bf8     04 4E 05 F1 | 	add	fp, #4
14bfc     A7 12 62 FC | 	wrlong	arg01, fp
14c00     04 4E 05 F1 | 	add	fp, #4
14c04     A7 26 62 FC | 	wrlong	local01, fp
14c08     08 4E 85 F1 | 	sub	fp, #8
14c0c     D0 86 BF FD | 	call	#_pop
14c10     FF 26 02 F6 | 	mov	local01, result3
14c14     0C 4E 05 F1 | 	add	fp, #12
14c18     A7 FA 61 FC | 	wrlong	result1, fp
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 FC 61 FC | 	wrlong	result2, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 26 62 FC | 	wrlong	local01, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     0C 4E 85 F1 | 	sub	fp, #12
14c38     88 88 BF FD | 	call	#_converttoint
14c3c     18 4E 05 F1 | 	add	fp, #24
14c40     A7 FA 61 FC | 	wrlong	result1, fp
14c44     18 4E 85 F1 | 	sub	fp, #24
14c48     A7 12 02 F6 | 	mov	arg01, fp
14c4c     74 88 BF FD | 	call	#_converttoint
14c50     1C 4E 05 F1 | 	add	fp, #28
14c54     A7 FA 61 FC | 	wrlong	result1, fp
14c58                 | ' 
14c58                 | ' t1=pop() 'value
14c58                 | ' t2=pop() 
14c58                 | ' a=converttoint(t2) : v=converttoint(t1)
14c58                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
14c58     04 4E 85 F1 | 	sub	fp, #4
14c5c     A7 26 02 FB | 	rdlong	local01, fp
14c60     18 4E 85 F1 | 	sub	fp, #24
14c64     00 04 00 FF 
14c68     00 26 16 F2 | 	cmp	local01, ##524288 wc
14c6c     1C 00 90 3D |  if_ae	jmp	#LR__1710
14c70     18 4E 05 F1 | 	add	fp, #24
14c74     A7 12 02 FB | 	rdlong	arg01, fp
14c78     04 4E 05 F1 | 	add	fp, #4
14c7c     A7 14 02 FB | 	rdlong	arg02, fp
14c80     1C 4E 85 F1 | 	sub	fp, #28
14c84     09 15 62 FC | 	wrlong	arg02, arg01
14c88     18 00 90 FD | 	jmp	#LR__1711
14c8c                 | LR__1710
14c8c     18 4E 05 F1 | 	add	fp, #24
14c90     A7 12 02 FB | 	rdlong	arg01, fp
14c94     04 4E 05 F1 | 	add	fp, #4
14c98     A7 14 02 FB | 	rdlong	arg02, fp
14c9c     1C 4E 85 F1 | 	sub	fp, #28
14ca0     4C DA B0 FD | 	call	#_pslpoke
14ca4                 | LR__1711
14ca4     A7 F0 03 F6 | 	mov	ptra, fp
14ca8     B2 00 A0 FD | 	call	#popregs_
14cac                 | _do_lpoke_ret
14cac     2D 00 64 FD | 	ret
14cb0                 | 
14cb0                 | ' 
14cb0                 | ' '-------------------- mid$
14cb0                 | ' 
14cb0                 | ' sub do_mid
14cb0                 | _do_mid
14cb0     00 4A 05 F6 | 	mov	COUNT_, #0
14cb4     A8 00 A0 FD | 	call	#pushregs_
14cb8     18 F0 07 F1 | 	add	ptra, #24
14cbc     4A 00 00 FF 
14cc0     80 E4 05 F1 | 	add	objptr, ##38016
14cc4     F2 16 02 FB | 	rdlong	arg03, objptr
14cc8     0B 15 02 F6 | 	mov	arg02, arg03
14ccc     01 14 66 F0 | 	shl	arg02, #1
14cd0     0B 15 02 F1 | 	add	arg02, arg03
14cd4     02 14 66 F0 | 	shl	arg02, #2
14cd8     03 00 00 FF 
14cdc     04 E4 85 F1 | 	sub	objptr, ##1540
14ce0     F2 14 02 F1 | 	add	arg02, objptr
14ce4     0A 17 02 FB | 	rdlong	arg03, arg02
14ce8     0C 4E 05 F1 | 	add	fp, #12
14cec     A7 16 62 FC | 	wrlong	arg03, fp
14cf0                 | ' 
14cf0                 | ' numpar=compiledline(lineptr_e).result.uresult
14cf0                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
14cf0     0C 4E 85 F1 | 	sub	fp, #12
14cf4     03 16 0E F2 | 	cmp	arg03, #3 wz
14cf8     47 00 00 FF 
14cfc     7C E4 85 F1 | 	sub	objptr, ##36476
14d00     40 00 90 AD |  if_e	jmp	#LR__1720
14d04     00 12 06 F6 | 	mov	arg01, #0
14d08     D8 6E B1 FD | 	call	#__system___getiolock_0600
14d0c     FD 12 02 F6 | 	mov	arg01, result1
14d10     2C 12 B1 FD | 	call	#__system___lockmem
14d14     B2 01 00 FF 
14d18     2E 14 06 F6 | 	mov	arg02, ##@LR__5887
14d1c     00 12 06 F6 | 	mov	arg01, #0
14d20     00 16 06 F6 | 	mov	arg03, #0
14d24     10 1F B1 FD | 	call	#__system___basic_print_string
14d28     00 12 06 F6 | 	mov	arg01, #0
14d2c     B4 6E B1 FD | 	call	#__system___getiolock_0600
14d30     FD 00 68 FC | 	wrlong	#0, result1
14d34     27 12 06 F6 | 	mov	arg01, #39
14d38     00 14 06 F6 | 	mov	arg02, #0
14d3c     10 D8 B0 FD | 	call	#_printerror
14d40     2C 01 90 FD | 	jmp	#LR__1723
14d44                 | LR__1720
14d44     98 85 BF FD | 	call	#_pop
14d48     FF 16 02 F6 | 	mov	arg03, result3
14d4c     A7 FA 61 FC | 	wrlong	result1, fp
14d50     04 4E 05 F1 | 	add	fp, #4
14d54     A7 FC 61 FC | 	wrlong	result2, fp
14d58     04 4E 05 F1 | 	add	fp, #4
14d5c     A7 16 62 FC | 	wrlong	arg03, fp
14d60     08 4E 85 F1 | 	sub	fp, #8
14d64     A7 12 02 F6 | 	mov	arg01, fp
14d68     58 87 BF FD | 	call	#_converttoint
14d6c     FD 16 02 F6 | 	mov	arg03, result1
14d70     14 4E 05 F1 | 	add	fp, #20
14d74     A7 16 62 FC | 	wrlong	arg03, fp
14d78     14 4E 85 F1 | 	sub	fp, #20
14d7c     60 85 BF FD | 	call	#_pop
14d80     FF 16 02 F6 | 	mov	arg03, result3
14d84     A7 FA 61 FC | 	wrlong	result1, fp
14d88     04 4E 05 F1 | 	add	fp, #4
14d8c     A7 FC 61 FC | 	wrlong	result2, fp
14d90     04 4E 05 F1 | 	add	fp, #4
14d94     A7 16 62 FC | 	wrlong	arg03, fp
14d98     08 4E 85 F1 | 	sub	fp, #8
14d9c     A7 12 02 F6 | 	mov	arg01, fp
14da0     20 87 BF FD | 	call	#_converttoint
14da4     FD 16 02 F6 | 	mov	arg03, result1
14da8     10 4E 05 F1 | 	add	fp, #16
14dac     A7 16 62 FC | 	wrlong	arg03, fp
14db0     10 4E 85 F1 | 	sub	fp, #16
14db4     28 85 BF FD | 	call	#_pop
14db8     FF 16 02 F6 | 	mov	arg03, result3
14dbc     A7 FA 61 FC | 	wrlong	result1, fp
14dc0     04 4E 05 F1 | 	add	fp, #4
14dc4     A7 FC 61 FC | 	wrlong	result2, fp
14dc8     04 4E 05 F1 | 	add	fp, #4
14dcc     A7 16 62 FC | 	wrlong	arg03, fp
14dd0                 | ' t1=pop() : arg2=converttoint(t1)
14dd0                 | ' t1=pop() : arg1=converttoint(t1)
14dd0                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14dd0     08 4E 85 F1 | 	sub	fp, #8
14dd4     2B 16 0E F2 | 	cmp	arg03, #43 wz
14dd8     18 00 90 5D |  if_ne	jmp	#LR__1721
14ddc     A7 12 02 FB | 	rdlong	arg01, fp
14de0     74 86 BF FD | 	call	#_convertstring
14de4     A7 FA 61 FC | 	wrlong	result1, fp
14de8     08 4E 05 F1 | 	add	fp, #8
14dec     A7 3E 68 FC | 	wrlong	#31, fp
14df0     08 4E 85 F1 | 	sub	fp, #8
14df4                 | LR__1721
14df4                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
14df4     08 4E 05 F1 | 	add	fp, #8
14df8     A7 16 02 FB | 	rdlong	arg03, fp
14dfc     08 4E 85 F1 | 	sub	fp, #8
14e00     1F 16 0E F2 | 	cmp	arg03, #31 wz
14e04     40 00 90 AD |  if_e	jmp	#LR__1722
14e08     00 12 06 F6 | 	mov	arg01, #0
14e0c     D4 6D B1 FD | 	call	#__system___getiolock_0600
14e10     FD 12 02 F6 | 	mov	arg01, result1
14e14     28 11 B1 FD | 	call	#__system___lockmem
14e18     B2 01 00 FF 
14e1c     35 14 06 F6 | 	mov	arg02, ##@LR__5888
14e20     00 12 06 F6 | 	mov	arg01, #0
14e24     00 16 06 F6 | 	mov	arg03, #0
14e28     0C 1E B1 FD | 	call	#__system___basic_print_string
14e2c     00 12 06 F6 | 	mov	arg01, #0
14e30     B0 6D B1 FD | 	call	#__system___getiolock_0600
14e34     FD 00 68 FC | 	wrlong	#0, result1
14e38     0F 12 06 F6 | 	mov	arg01, #15
14e3c     00 14 06 F6 | 	mov	arg02, #0
14e40     0C D7 B0 FD | 	call	#_printerror
14e44     28 00 90 FD | 	jmp	#LR__1723
14e48                 | LR__1722
14e48     A7 12 02 FB | 	rdlong	arg01, fp
14e4c     10 4E 05 F1 | 	add	fp, #16
14e50     A7 14 02 FB | 	rdlong	arg02, fp
14e54     04 4E 05 F1 | 	add	fp, #4
14e58     A7 16 02 FB | 	rdlong	arg03, fp
14e5c     14 4E 85 F1 | 	sub	fp, #20
14e60     74 32 B1 FD | 	call	#__system__Mid_S
14e64     A7 FA 61 FC | 	wrlong	result1, fp
14e68     A7 12 02 F6 | 	mov	arg01, fp
14e6c     08 85 BF FD | 	call	#_push
14e70                 | LR__1723
14e70     A7 F0 03 F6 | 	mov	ptra, fp
14e74     B2 00 A0 FD | 	call	#popregs_
14e78                 | _do_mid_ret
14e78     2D 00 64 FD | 	ret
14e7c                 | 
14e7c                 | ' 
14e7c                 | ' '-------------------- mkdir
14e7c                 | ' 
14e7c                 | ' sub do_mkdir
14e7c                 | _do_mkdir
14e7c     04 4A 05 F6 | 	mov	COUNT_, #4
14e80     A8 00 A0 FD | 	call	#pushregs_
14e84     58 84 BF FD | 	call	#_pop
14e88     FE 18 02 F6 | 	mov	arg04, result2
14e8c     FF 16 02 F6 | 	mov	arg03, result3
14e90     FD 26 02 F6 | 	mov	local01, result1
14e94     0C 29 02 F6 | 	mov	local02, arg04
14e98     0B 2B 02 F6 | 	mov	local03, arg03
14e9c                 | ' 
14e9c                 | ' t1=pop()
14e9c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14e9c     2B 2A 0E F2 | 	cmp	local03, #43 wz
14ea0     10 00 90 5D |  if_ne	jmp	#LR__1730
14ea4     13 13 02 F6 | 	mov	arg01, local01
14ea8     AC 85 BF FD | 	call	#_convertstring
14eac     FD 26 02 F6 | 	mov	local01, result1
14eb0     1F 2A 06 F6 | 	mov	local03, #31
14eb4                 | LR__1730
14eb4                 | ' if t1.result_type<>result_string then printerror(15): return
14eb4     1F 2A 0E F2 | 	cmp	local03, #31 wz
14eb8     10 00 90 AD |  if_e	jmp	#LR__1731
14ebc     0F 12 06 F6 | 	mov	arg01, #15
14ec0     00 14 06 F6 | 	mov	arg02, #0
14ec4     88 D6 B0 FD | 	call	#_printerror
14ec8     64 00 90 FD | 	jmp	#LR__1733
14ecc                 | LR__1731
14ecc     13 13 02 F6 | 	mov	arg01, local01
14ed0     40 39 B1 FD | 	call	#__system___mkdir
14ed4     FD 2C 0A F6 | 	mov	local04, result1 wz
14ed8                 | ' filename$=t1.result.sresult
14ed8                 | ' err=mkdir(filename$)
14ed8                 | ' 'err=geterr() : 
14ed8                 | ' if err<>0 then print "Cannot create a directory: system error "; err
14ed8     54 00 90 AD |  if_e	jmp	#LR__1732
14edc     00 12 06 F6 | 	mov	arg01, #0
14ee0     00 6D B1 FD | 	call	#__system___getiolock_0600
14ee4     FD 12 02 F6 | 	mov	arg01, result1
14ee8     54 10 B1 FD | 	call	#__system___lockmem
14eec     B2 01 00 FF 
14ef0     3C 14 06 F6 | 	mov	arg02, ##@LR__5889
14ef4     00 12 06 F6 | 	mov	arg01, #0
14ef8     00 16 06 F6 | 	mov	arg03, #0
14efc     38 1D B1 FD | 	call	#__system___basic_print_string
14f00     00 12 06 F6 | 	mov	arg01, #0
14f04     16 15 02 F6 | 	mov	arg02, local04
14f08     00 16 06 F6 | 	mov	arg03, #0
14f0c     0A 18 06 F6 | 	mov	arg04, #10
14f10     68 1D B1 FD | 	call	#__system___basic_print_integer
14f14     00 12 06 F6 | 	mov	arg01, #0
14f18     0A 14 06 F6 | 	mov	arg02, #10
14f1c     00 16 06 F6 | 	mov	arg03, #0
14f20     BC 1C B1 FD | 	call	#__system___basic_print_char
14f24     00 12 06 F6 | 	mov	arg01, #0
14f28     B8 6C B1 FD | 	call	#__system___getiolock_0600
14f2c     FD 00 68 FC | 	wrlong	#0, result1
14f30                 | LR__1732
14f30                 | LR__1733
14f30     A7 F0 03 F6 | 	mov	ptra, fp
14f34     B2 00 A0 FD | 	call	#popregs_
14f38                 | _do_mkdir_ret
14f38     2D 00 64 FD | 	ret
14f3c                 | 
14f3c                 | ' 
14f3c                 | ' '-------------------- mode
14f3c                 | ' 
14f3c                 | ' sub do_mode
14f3c                 | _do_mode
14f3c     05 4A 05 F6 | 	mov	COUNT_, #5
14f40     A8 00 A0 FD | 	call	#pushregs_
14f44     98 83 BF FD | 	call	#_pop
14f48     FD 26 02 F6 | 	mov	local01, result1
14f4c     FE 28 02 F6 | 	mov	local02, result2
14f50     FF 2A 02 F6 | 	mov	local03, result3
14f54                 | ' t1=pop() 
14f54                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14f54     1E 2A 0E F2 | 	cmp	local03, #30 wz
14f58     10 00 90 5D |  if_ne	jmp	#LR__1740
14f5c     13 13 02 F6 | 	mov	arg01, local01
14f60     00 14 06 F6 | 	mov	arg02, #0
14f64     1C 43 B1 FD | 	call	#__system___float_tointeger
14f68     FD 26 02 F6 | 	mov	local01, result1
14f6c                 | LR__1740
14f6c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14f6c     1F 2A 0E F2 | 	cmp	local03, #31 wz
14f70     18 00 90 5D |  if_ne	jmp	#LR__1741
14f74     13 13 02 F6 | 	mov	arg01, local01
14f78     4C 46 B1 FD | 	call	#__system____builtin_atof
14f7c     FD 12 02 F6 | 	mov	arg01, result1
14f80     00 14 06 F6 | 	mov	arg02, #0
14f84     FC 42 B1 FD | 	call	#__system___float_tointeger
14f88     FD 26 02 F6 | 	mov	local01, result1
14f8c                 | LR__1741
14f8c                 | ' select case t1.result.iresult
14f8c     13 2D 02 F6 | 	mov	local04, local01
14f90     05 2C 26 F3 | 	fle	local04, #5
14f94     30 2C 62 FD | 	jmprel	local04
14f98                 | LR__1742
14f98     14 00 90 FD | 	jmp	#LR__1743
14f9c     A8 00 90 FD | 	jmp	#LR__1744
14fa0     10 01 90 FD | 	jmp	#LR__1745
14fa4     78 01 90 FD | 	jmp	#LR__1746
14fa8     E0 01 90 FD | 	jmp	#LR__1747
14fac     70 02 90 FD | 	jmp	#LR__1748
14fb0                 | LR__1743
14fb0     37 00 00 FF 
14fb4     40 E4 05 F1 | 	add	objptr, ##28224
14fb8     F2 02 68 FC | 	wrlong	#1, objptr
14fbc     04 E4 85 F1 | 	sub	objptr, #4
14fc0     F2 34 69 FC | 	wrlong	#154, objptr
14fc4     19 00 00 FF 
14fc8     00 E5 05 F1 | 	add	objptr, ##13056
14fcc     F2 02 68 FC | 	wrlong	#1, objptr
14fd0     19 00 00 FF 
14fd4     04 E5 85 F1 | 	sub	objptr, ##13060
14fd8     F2 26 69 FC | 	wrlong	#147, objptr
14fdc     37 00 00 FF 
14fe0     38 E4 85 F1 | 	sub	objptr, ##28216
14fe4     04 12 06 F6 | 	mov	arg01, #4
14fe8     80 F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
14fec     37 00 00 FF 
14ff0     3C E4 05 F1 | 	add	objptr, ##28220
14ff4     F2 12 02 FB | 	rdlong	arg01, objptr
14ff8     04 E4 85 F1 | 	sub	objptr, #4
14ffc     F2 14 02 FB | 	rdlong	arg02, objptr
15000                 | ' 
15000                 | ' write_color:=ff
15000     36 00 00 FF 
15004     F7 E5 85 F1 | 	sub	objptr, ##28151
15008     F2 12 62 FC | 	wrlong	arg01, objptr
1500c                 | ' write_background:=bb
1500c     04 E4 05 F1 | 	add	objptr, #4
15010     F2 14 62 FC | 	wrlong	arg02, objptr
15014     01 00 00 FF 
15018     00 EA 05 F1 | 	add	ptr__dat__, ##512
1501c     52 00 00 FF 
15020     5F E4 05 F1 | 	add	objptr, ##42079
15024     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15028     04 E4 85 F1 | 	sub	objptr, #4
1502c     03 00 80 FF 
15030     F2 30 69 FC | 	wrlong	##1688, objptr
15034     52 00 00 FF 
15038     A0 E4 85 F1 | 	sub	objptr, ##42144
1503c     01 00 00 FF 
15040     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15044     D8 01 90 FD | 	jmp	#LR__1748
15048                 | LR__1744
15048     37 00 00 FF 
1504c     40 E4 05 F1 | 	add	objptr, ##28224
15050     F2 00 68 FC | 	wrlong	#0, objptr
15054     04 E4 85 F1 | 	sub	objptr, #4
15058     F2 2E 68 FC | 	wrlong	#23, objptr
1505c     19 00 00 FF 
15060     00 E5 05 F1 | 	add	objptr, ##13056
15064     F2 00 68 FC | 	wrlong	#0, objptr
15068     19 00 00 FF 
1506c     04 E5 85 F1 | 	sub	objptr, ##13060
15070     F2 00 68 FC | 	wrlong	#0, objptr
15074     37 00 00 FF 
15078     38 E4 85 F1 | 	sub	objptr, ##28216
1507c     00 12 06 F6 | 	mov	arg01, #0
15080     E8 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15084     37 00 00 FF 
15088     3C E4 05 F1 | 	add	objptr, ##28220
1508c     F2 12 02 FB | 	rdlong	arg01, objptr
15090     04 E4 85 F1 | 	sub	objptr, #4
15094     F2 14 02 FB | 	rdlong	arg02, objptr
15098                 | ' 
15098                 | ' write_color:=ff
15098     36 00 00 FF 
1509c     F7 E5 85 F1 | 	sub	objptr, ##28151
150a0     F2 12 62 FC | 	wrlong	arg01, objptr
150a4                 | ' write_background:=bb
150a4     04 E4 05 F1 | 	add	objptr, #4
150a8     F2 14 62 FC | 	wrlong	arg02, objptr
150ac     45 E4 85 F1 | 	sub	objptr, #69
150b0     6C 01 90 FD | 	jmp	#LR__1748
150b4                 | LR__1745
150b4     37 00 00 FF 
150b8     40 E4 05 F1 | 	add	objptr, ##28224
150bc     F2 00 68 FC | 	wrlong	#0, objptr
150c0     04 E4 85 F1 | 	sub	objptr, #4
150c4     F2 6A 69 FC | 	wrlong	#181, objptr
150c8     19 00 00 FF 
150cc     00 E5 05 F1 | 	add	objptr, ##13056
150d0     F2 00 68 FC | 	wrlong	#0, objptr
150d4     19 00 00 FF 
150d8     04 E5 85 F1 | 	sub	objptr, ##13060
150dc     F2 00 68 FC | 	wrlong	#0, objptr
150e0     37 00 00 FF 
150e4     38 E4 85 F1 | 	sub	objptr, ##28216
150e8     00 12 06 F6 | 	mov	arg01, #0
150ec     7C F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
150f0     37 00 00 FF 
150f4     3C E4 05 F1 | 	add	objptr, ##28220
150f8     F2 12 02 FB | 	rdlong	arg01, objptr
150fc     04 E4 85 F1 | 	sub	objptr, #4
15100     F2 14 02 FB | 	rdlong	arg02, objptr
15104                 | ' 
15104                 | ' write_color:=ff
15104     36 00 00 FF 
15108     F7 E5 85 F1 | 	sub	objptr, ##28151
1510c     F2 12 62 FC | 	wrlong	arg01, objptr
15110                 | ' write_background:=bb
15110     04 E4 05 F1 | 	add	objptr, #4
15114     F2 14 62 FC | 	wrlong	arg02, objptr
15118     45 E4 85 F1 | 	sub	objptr, #69
1511c     00 01 90 FD | 	jmp	#LR__1748
15120                 | LR__1746
15120     37 00 00 FF 
15124     40 E4 05 F1 | 	add	objptr, ##28224
15128     F2 00 68 FC | 	wrlong	#0, objptr
1512c     04 E4 85 F1 | 	sub	objptr, #4
15130     F2 1E 68 FC | 	wrlong	#15, objptr
15134     19 00 00 FF 
15138     00 E5 05 F1 | 	add	objptr, ##13056
1513c     F2 00 68 FC | 	wrlong	#0, objptr
15140     19 00 00 FF 
15144     04 E5 85 F1 | 	sub	objptr, ##13060
15148     F2 00 68 FC | 	wrlong	#0, objptr
1514c     37 00 00 FF 
15150     38 E4 85 F1 | 	sub	objptr, ##28216
15154     00 12 06 F6 | 	mov	arg01, #0
15158     10 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1515c     37 00 00 FF 
15160     3C E4 05 F1 | 	add	objptr, ##28220
15164     F2 12 02 FB | 	rdlong	arg01, objptr
15168     04 E4 85 F1 | 	sub	objptr, #4
1516c     F2 14 02 FB | 	rdlong	arg02, objptr
15170                 | ' 
15170                 | ' write_color:=ff
15170     36 00 00 FF 
15174     F7 E5 85 F1 | 	sub	objptr, ##28151
15178     F2 12 62 FC | 	wrlong	arg01, objptr
1517c                 | ' write_background:=bb
1517c     04 E4 05 F1 | 	add	objptr, #4
15180     F2 14 62 FC | 	wrlong	arg02, objptr
15184     45 E4 85 F1 | 	sub	objptr, #69
15188     94 00 90 FD | 	jmp	#LR__1748
1518c                 | LR__1747
1518c     37 00 00 FF 
15190     40 E4 05 F1 | 	add	objptr, ##28224
15194     F2 02 68 FC | 	wrlong	#1, objptr
15198     04 E4 85 F1 | 	sub	objptr, #4
1519c     F2 02 68 FC | 	wrlong	#1, objptr
151a0     19 00 00 FF 
151a4     00 E5 05 F1 | 	add	objptr, ##13056
151a8     F2 02 68 FC | 	wrlong	#1, objptr
151ac     19 00 00 FF 
151b0     04 E5 85 F1 | 	sub	objptr, ##13060
151b4     F2 1C 68 FC | 	wrlong	#14, objptr
151b8     37 00 00 FF 
151bc     38 E4 85 F1 | 	sub	objptr, ##28216
151c0     04 12 06 F6 | 	mov	arg01, #4
151c4     A4 EF B0 FD | 	call	#_hg010b_spin2_setfontfamily
151c8     37 00 00 FF 
151cc     3C E4 05 F1 | 	add	objptr, ##28220
151d0     F2 12 02 FB | 	rdlong	arg01, objptr
151d4     04 E4 85 F1 | 	sub	objptr, #4
151d8     F2 14 02 FB | 	rdlong	arg02, objptr
151dc                 | ' 
151dc                 | ' write_color:=ff
151dc     36 00 00 FF 
151e0     F7 E5 85 F1 | 	sub	objptr, ##28151
151e4     F2 12 62 FC | 	wrlong	arg01, objptr
151e8                 | ' write_background:=bb
151e8     04 E4 05 F1 | 	add	objptr, #4
151ec     F2 14 62 FC | 	wrlong	arg02, objptr
151f0     07 00 00 FF 
151f4     82 EB 05 F1 | 	add	ptr__dat__, ##3970
151f8     52 00 00 FF 
151fc     5F E4 05 F1 | 	add	objptr, ##42079
15200     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15204     04 E4 85 F1 | 	sub	objptr, #4
15208     03 00 80 FF 
1520c     F2 30 69 FC | 	wrlong	##1688, objptr
15210     52 00 00 FF 
15214     A0 E4 85 F1 | 	sub	objptr, ##42144
15218     07 00 00 FF 
1521c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15220                 | LR__1748
15220     52 00 00 FF 
15224     9C E4 05 F1 | 	add	objptr, ##42140
15228     F2 26 62 FC | 	wrlong	local01, objptr
1522c     04 E4 85 F1 | 	sub	objptr, #4
15230     F2 12 02 FB | 	rdlong	arg01, objptr
15234     0F 00 00 FF 
15238     3C E4 85 F1 | 	sub	objptr, ##7740
1523c     F2 2E 02 FB | 	rdlong	local05, objptr
15240     43 00 00 FF 
15244     5C E4 85 F1 | 	sub	objptr, ##34396
15248     17 13 82 F1 | 	sub	arg01, local05
1524c     00 14 06 F6 | 	mov	arg02, #0
15250     0A 16 06 F6 | 	mov	arg03, #10
15254     BC 2F B1 FD | 	call	#__system__Number_S
15258     FD 12 02 F6 | 	mov	arg01, result1
1525c     B2 01 00 FF 
15260     65 14 06 F6 | 	mov	arg02, ##@LR__5890
15264     34 0D B1 FD | 	call	#__system___string_concat
15268     50 00 00 FF 
1526c     38 E5 05 F1 | 	add	objptr, ##41272
15270     F2 FA 61 FC | 	wrlong	result1, objptr
15274     19 00 00 FF 
15278     FC E4 85 F1 | 	sub	objptr, ##13052
1527c     F2 12 02 FB | 	rdlong	arg01, objptr
15280     04 E4 85 F1 | 	sub	objptr, #4
15284     F2 14 02 FB | 	rdlong	arg02, objptr
15288     37 00 00 FF 
1528c     38 E4 85 F1 | 	sub	objptr, ##28216
15290     28 F0 B0 FD | 	call	#_hg010b_spin2_cls
15294     B2 01 00 FF 
15298     77 12 06 F6 | 	mov	arg01, ##@LR__5891
1529c                 | ' 
1529c                 | ' write(text)
1529c     DC F3 B0 FD | 	call	#_hg010b_spin2_write
152a0                 | ' crlf
152a0     D8 F8 B0 FD | 	call	#_hg010b_spin2_crlf
152a4     18 00 00 FF 
152a8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
152ac     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
152b0     18 00 00 FF 
152b4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
152b8                 | ' 
152b8                 | ' write(text)
152b8     C0 F3 B0 FD | 	call	#_hg010b_spin2_write
152bc                 | ' crlf
152bc     BC F8 B0 FD | 	call	#_hg010b_spin2_crlf
152c0     50 00 00 FF 
152c4     38 E5 05 F1 | 	add	objptr, ##41272
152c8     F2 12 02 FB | 	rdlong	arg01, objptr
152cc     50 00 00 FF 
152d0     38 E5 85 F1 | 	sub	objptr, ##41272
152d4                 | ' 
152d4                 | ' write(text)
152d4     A4 F3 B0 FD | 	call	#_hg010b_spin2_write
152d8                 | ' crlf
152d8     A0 F8 B0 FD | 	call	#_hg010b_spin2_crlf
152dc     A7 F0 03 F6 | 	mov	ptra, fp
152e0     B2 00 A0 FD | 	call	#popregs_
152e4                 | _do_mode_ret
152e4     2D 00 64 FD | 	ret
152e8                 | 
152e8                 | ' 
152e8                 | ' '-------------------- mouse
152e8                 | ' 
152e8                 | ' sub do_mouse
152e8                 | _do_mouse
152e8     F4 7F BF FD | 	call	#_pop
152ec     00 FA 4D F2 | 	cmps	result1, #0 wz
152f0                 | ' 
152f0                 | ' t1=pop()
152f0                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
152f0     14 00 90 5D |  if_ne	jmp	#LR__1750
152f4     10 12 06 F6 | 	mov	arg01, #16
152f8     00 14 06 F6 | 	mov	arg02, #0
152fc     00 16 06 F6 | 	mov	arg03, #0
15300     98 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
15304     10 00 90 FD | 	jmp	#LR__1751
15308                 | LR__1750
15308     10 12 06 F6 | 	mov	arg01, #16
1530c     20 14 06 F6 | 	mov	arg02, #32
15310     20 16 06 F6 | 	mov	arg03, #32
15314     84 E2 B0 FD | 	call	#_hg010b_spin2_setspritesize
15318                 | LR__1751
15318                 | _do_mouse_ret
15318     2D 00 64 FD | 	ret
1531c                 | 
1531c                 | ' 
1531c                 | ' '-------------------- mousek
1531c                 | ' 
1531c                 | ' sub do_mousek
1531c                 | _do_mousek
1531c     00 4A 05 F6 | 	mov	COUNT_, #0
15320     A8 00 A0 FD | 	call	#pushregs_
15324     0C F0 07 F1 | 	add	ptra, #12
15328     08 4E 05 F1 | 	add	fp, #8
1532c     A7 3A 68 FC | 	wrlong	#29, fp
15330     08 4E 85 F1 | 	sub	fp, #8
15334     51 00 00 FF 
15338     50 E5 05 F1 | 	add	objptr, ##41808
1533c     F2 12 02 FB | 	rdlong	arg01, objptr
15340     51 00 00 FF 
15344     50 E5 85 F1 | 	sub	objptr, ##41808
15348     A7 12 62 FC | 	wrlong	arg01, fp
1534c     A7 12 02 F6 | 	mov	arg01, fp
15350     24 80 BF FD | 	call	#_push
15354     A7 F0 03 F6 | 	mov	ptra, fp
15358     B2 00 A0 FD | 	call	#popregs_
1535c                 | _do_mousek_ret
1535c     2D 00 64 FD | 	ret
15360                 | 
15360                 | ' 
15360                 | ' '-------------------- mousew
15360                 | ' 
15360                 | ' sub do_mousew
15360                 | _do_mousew
15360     00 4A 05 F6 | 	mov	COUNT_, #0
15364     A8 00 A0 FD | 	call	#pushregs_
15368     0C F0 07 F1 | 	add	ptra, #12
1536c     08 4E 05 F1 | 	add	fp, #8
15370     A7 38 68 FC | 	wrlong	#28, fp
15374     08 4E 85 F1 | 	sub	fp, #8
15378     51 00 00 FF 
1537c     54 E5 05 F1 | 	add	objptr, ##41812
15380     F2 12 02 FB | 	rdlong	arg01, objptr
15384     51 00 00 FF 
15388     54 E5 85 F1 | 	sub	objptr, ##41812
1538c     A7 12 62 FC | 	wrlong	arg01, fp
15390     A7 12 02 F6 | 	mov	arg01, fp
15394     E0 7F BF FD | 	call	#_push
15398     A7 F0 03 F6 | 	mov	ptra, fp
1539c     B2 00 A0 FD | 	call	#popregs_
153a0                 | _do_mousew_ret
153a0     2D 00 64 FD | 	ret
153a4                 | 
153a4                 | ' 
153a4                 | ' '-------------------- mousex
153a4                 | ' 
153a4                 | ' sub do_mousex
153a4                 | _do_mousex
153a4     00 4A 05 F6 | 	mov	COUNT_, #0
153a8     A8 00 A0 FD | 	call	#pushregs_
153ac     0C F0 07 F1 | 	add	ptra, #12
153b0     08 4E 05 F1 | 	add	fp, #8
153b4     A7 3A 68 FC | 	wrlong	#29, fp
153b8     08 4E 85 F1 | 	sub	fp, #8
153bc     51 00 00 FF 
153c0     48 E5 05 F1 | 	add	objptr, ##41800
153c4     F2 12 02 FB | 	rdlong	arg01, objptr
153c8     51 00 00 FF 
153cc     48 E5 85 F1 | 	sub	objptr, ##41800
153d0     A7 12 62 FC | 	wrlong	arg01, fp
153d4     A7 12 02 F6 | 	mov	arg01, fp
153d8     9C 7F BF FD | 	call	#_push
153dc     A7 F0 03 F6 | 	mov	ptra, fp
153e0     B2 00 A0 FD | 	call	#popregs_
153e4                 | _do_mousex_ret
153e4     2D 00 64 FD | 	ret
153e8                 | 
153e8                 | ' 
153e8                 | ' '-------------------- mousey
153e8                 | ' 
153e8                 | ' sub do_mousey
153e8                 | _do_mousey
153e8     00 4A 05 F6 | 	mov	COUNT_, #0
153ec     A8 00 A0 FD | 	call	#pushregs_
153f0     0C F0 07 F1 | 	add	ptra, #12
153f4     08 4E 05 F1 | 	add	fp, #8
153f8     A7 3A 68 FC | 	wrlong	#29, fp
153fc     08 4E 85 F1 | 	sub	fp, #8
15400     51 00 00 FF 
15404     4C E5 05 F1 | 	add	objptr, ##41804
15408     F2 12 02 FB | 	rdlong	arg01, objptr
1540c     51 00 00 FF 
15410     4C E5 85 F1 | 	sub	objptr, ##41804
15414     A7 12 62 FC | 	wrlong	arg01, fp
15418     A7 12 02 F6 | 	mov	arg01, fp
1541c     58 7F BF FD | 	call	#_push
15420     A7 F0 03 F6 | 	mov	ptra, fp
15424     B2 00 A0 FD | 	call	#popregs_
15428                 | _do_mousey_ret
15428     2D 00 64 FD | 	ret
1542c                 | 
1542c                 | ' 
1542c                 | ' '------------------ new
1542c                 | ' 
1542c                 | ' sub do_new
1542c                 | _do_new
1542c     03 4A 05 F6 | 	mov	COUNT_, #3
15430     A8 00 A0 FD | 	call	#pushregs_
15434                 | ' 
15434                 | ' if inrun=1 then inrun=2
15434     50 00 00 FF 
15438     EC E4 05 F1 | 	add	objptr, ##41196
1543c     F2 16 02 FB | 	rdlong	arg03, objptr
15440     50 00 00 FF 
15444     EC E4 85 F1 | 	sub	objptr, ##41196
15448     01 16 0E F2 | 	cmp	arg03, #1 wz
1544c     50 00 00 AF 
15450     EC E4 05 A1 |  if_e	add	objptr, ##41196
15454     F2 04 68 AC |  if_e	wrlong	#2, objptr
15458     50 00 00 AF 
1545c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15460     13 12 C6 F9 | 	decod	arg01, #19
15464     01 14 66 F6 | 	neg	arg02, #1
15468     84 D2 B0 FD | 	call	#_pslpoke
1546c     35 00 00 FF 
15470     08 E4 05 F1 | 	add	objptr, ##27144
15474     F2 00 68 FC | 	wrlong	#0, objptr
15478                 | ' pslpoke(memlo,$FFFFFFFF)
15478                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15478     00 26 06 F6 | 	mov	local01, #0
1547c     20 00 00 FF 
15480     10 E4 85 F1 | 	sub	objptr, ##16400
15484     97 1E 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
15488                 | LR__1760
15488     13 17 02 F6 | 	mov	arg03, local01
1548c     04 16 66 F0 | 	shl	arg03, #4
15490     F2 16 02 F1 | 	add	arg03, objptr
15494     B2 01 00 FF 
15498     78 14 06 F6 | 	mov	arg02, ##@LR__5892
1549c     0B 15 62 FC | 	wrlong	arg02, arg03
154a0     13 29 02 F6 | 	mov	local02, local01
154a4     04 28 66 F0 | 	shl	local02, #4
154a8     F2 28 02 F1 | 	add	local02, objptr
154ac     0C 28 06 F1 | 	add	local02, #12
154b0     14 01 68 FC | 	wrlong	#0, local02
154b4     01 26 06 F1 | 	add	local01, #1
154b8     02 00 00 FF 
154bc     01 26 56 F2 | 	cmps	local01, ##1025 wc
154c0     C4 FF 9F CD |  if_b	jmp	#LR__1760
154c4                 | LR__1761
154c4     35 00 00 FF 
154c8     90 E4 05 F1 | 	add	objptr, ##27280
154cc     00 04 80 FF 
154d0     F2 00 68 FC | 	wrlong	##524288, objptr
154d4     06 00 00 FF 
154d8     30 E4 05 F1 | 	add	objptr, ##3120
154dc     00 04 80 FF 
154e0     F2 00 68 FC | 	wrlong	##524288, objptr
154e4     04 E4 05 F1 | 	add	objptr, #4
154e8     00 04 80 FF 
154ec     F2 00 68 FC | 	wrlong	##524288, objptr
154f0     0D 00 00 FF 
154f4     64 E4 85 F1 | 	sub	objptr, ##6756
154f8     F2 00 68 FC | 	wrlong	#0, objptr
154fc     07 00 00 FF 
15500     24 E4 05 F1 | 	add	objptr, ##3620
15504     F2 00 68 FC | 	wrlong	#0, objptr
15508     07 00 00 FF 
1550c     20 E4 85 F1 | 	sub	objptr, ##3616
15510     00 04 80 FF 
15514     F2 00 68 FC | 	wrlong	##524288, objptr
15518     0D 00 00 FF 
1551c     D0 E4 05 F1 | 	add	objptr, ##6864
15520     F2 00 68 FC | 	wrlong	#0, objptr
15524     B2 01 00 FF 
15528     79 2A 06 F6 | 	mov	local03, ##@LR__5893
1552c     01 00 00 FF 
15530     B0 E5 05 F1 | 	add	objptr, ##944
15534     F2 2A 62 FC | 	wrlong	local03, objptr
15538     08 00 00 FF 
1553c     50 E4 85 F1 | 	sub	objptr, ##4176
15540     F2 00 68 FC | 	wrlong	#0, objptr
15544     04 E4 05 F1 | 	add	objptr, #4
15548     FF FF FF FF 
1554c     F2 FE 6B FC | 	wrlong	##-1, objptr
15550     06 00 00 FF 
15554     A0 E4 05 F1 | 	add	objptr, ##3232
15558     F2 00 68 FC | 	wrlong	#0, objptr
1555c     04 E4 05 F1 | 	add	objptr, #4
15560     F2 00 68 FC | 	wrlong	#0, objptr
15564                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15564                 | ' stackpointer=0
15564                 | ' lineptr=0 
15564                 | ' programptr=memlo ': stringptr=0
15564                 | ' dataptr=0 : readline=""
15564                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15564                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15564     00 26 06 F6 | 	mov	local01, #0
15568     06 00 00 FF 
1556c     9C E4 85 F1 | 	sub	objptr, ##3228
15570     97 16 48 FB | 	callpa	#(@LR__1763-@LR__1762)>>2,fcache_load_ptr_
15574                 | LR__1762
15574     13 29 02 F6 | 	mov	local02, local01
15578     02 28 66 F0 | 	shl	local02, #2
1557c     13 29 02 F1 | 	add	local02, local01
15580     02 28 66 F0 | 	shl	local02, #2
15584     F2 28 02 F1 | 	add	local02, objptr
15588     08 28 06 F1 | 	add	local02, #8
1558c     FF FF FF FF 
15590     14 FF 6B FC | 	wrlong	##-1, local02
15594     01 26 06 F1 | 	add	local01, #1
15598     41 26 56 F2 | 	cmps	local01, #65 wc
1559c     D4 FF 9F CD |  if_b	jmp	#LR__1762
155a0                 | LR__1763
155a0     4A 00 00 FF 
155a4     98 E4 85 F1 | 	sub	objptr, ##38040
155a8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
155a8     00 26 06 F6 | 	mov	local01, #0
155ac                 | LR__1764
155ac     13 29 02 F6 | 	mov	local02, local01
155b0     02 28 66 F0 | 	shl	local02, #2
155b4     52 00 00 FF 
155b8     54 E4 05 F1 | 	add	objptr, ##42068
155bc     F2 28 02 F1 | 	add	local02, objptr
155c0     14 2B 0A FB | 	rdlong	local03, local02 wz
155c4     52 00 00 FF 
155c8     54 E4 85 F1 | 	sub	objptr, ##42068
155cc     34 00 90 AD |  if_e	jmp	#LR__1765
155d0     13 13 02 F6 | 	mov	arg01, local01
155d4     00 14 06 F6 | 	mov	arg02, #0
155d8     00 16 06 F6 | 	mov	arg03, #0
155dc     BC DF B0 FD | 	call	#_hg010b_spin2_setspritesize
155e0     13 29 02 F6 | 	mov	local02, local01
155e4     02 28 66 F0 | 	shl	local02, #2
155e8     52 00 00 FF 
155ec     54 E4 05 F1 | 	add	objptr, ##42068
155f0     F2 28 02 F1 | 	add	local02, objptr
155f4     14 13 02 FB | 	rdlong	arg01, local02
155f8     52 00 00 FF 
155fc     54 E4 85 F1 | 	sub	objptr, ##42068
15600     1C 4C B1 FD | 	call	#__system___gc_free
15604                 | LR__1765
15604     01 26 06 F1 | 	add	local01, #1
15608     10 26 56 F2 | 	cmps	local01, #16 wc
1560c     9C FF 9F CD |  if_b	jmp	#LR__1764
15610     52 00 00 FF 
15614     A8 E4 05 F1 | 	add	objptr, ##42152
15618     00 C0 9F FF 
1561c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15620     04 E4 05 F1 | 	add	objptr, #4
15624     00 C0 9F FF 
15628     F2 00 68 FC | 	wrlong	##1065353216, objptr
1562c     52 00 00 FF 
15630     A8 E4 85 F1 | 	sub	objptr, ##42152
15634     F2 2A 02 FB | 	rdlong	local03, objptr
15638     52 00 00 FF 
1563c     94 E4 05 F1 | 	add	objptr, ##42132
15640     F2 2A 62 FC | 	wrlong	local03, objptr
15644     52 00 00 FF 
15648     98 E4 85 F1 | 	sub	objptr, ##42136
1564c     11 12 06 F6 | 	mov	arg01, #17
15650     08 14 06 F6 | 	mov	arg02, #8
15654     10 16 06 F6 | 	mov	arg03, #16
15658     40 DF B0 FD | 	call	#_hg010b_spin2_setspritesize
1565c     10 12 06 F6 | 	mov	arg01, #16
15660     20 14 06 F6 | 	mov	arg02, #32
15664     20 16 06 F6 | 	mov	arg03, #32
15668     30 DF B0 FD | 	call	#_hg010b_spin2_setspritesize
1566c     B2 01 00 FF 
15670     7A 2A 06 F6 | 	mov	local03, ##@LR__5894
15674     52 00 00 FF 
15678     C4 E4 05 F1 | 	add	objptr, ##42180
1567c     F2 2A 62 FC | 	wrlong	local03, objptr
15680     52 00 00 FF 
15684     C4 E4 85 F1 | 	sub	objptr, ##42180
15688     BC C2 B0 FD | 	call	#_init_audio
1568c     A7 F0 03 F6 | 	mov	ptra, fp
15690     B2 00 A0 FD | 	call	#popregs_
15694                 | _do_new_ret
15694     2D 00 64 FD | 	ret
15698                 | 
15698                 | ' 
15698                 | ' '-------------------- next
15698                 | ' 
15698                 | ' sub do_next()
15698                 | _do_next
15698     04 4A 05 F6 | 	mov	COUNT_, #4
1569c     A8 00 A0 FD | 	call	#pushregs_
156a0     3C 7C BF FD | 	call	#_pop
156a4     FD 26 02 F6 | 	mov	local01, result1
156a8     FE 28 02 F6 | 	mov	local02, result2
156ac     FF 2A 02 F6 | 	mov	local03, result3
156b0                 | ' t1=pop() :varnum=t1.result.uresult
156b0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
156b0     50 00 00 FF 
156b4     30 E5 05 F1 | 	add	objptr, ##41264
156b8     F2 14 02 FB | 	rdlong	arg02, objptr
156bc     0A 13 02 F6 | 	mov	arg01, arg02
156c0     02 12 66 F0 | 	shl	arg01, #2
156c4     0A 13 02 F1 | 	add	arg01, arg02
156c8     02 12 66 F0 | 	shl	arg01, #2
156cc     06 00 00 FF 
156d0     98 E4 85 F1 | 	sub	objptr, ##3224
156d4     F2 12 02 F1 | 	add	arg01, objptr
156d8     08 12 06 F1 | 	add	arg01, #8
156dc     09 15 02 FB | 	rdlong	arg02, arg01
156e0     13 15 0A F2 | 	cmp	arg02, local01 wz
156e4     4A 00 00 FF 
156e8     98 E4 85 F1 | 	sub	objptr, ##38040
156ec     10 00 90 AD |  if_e	jmp	#LR__1770
156f0     25 12 06 F6 | 	mov	arg01, #37
156f4     00 14 06 F6 | 	mov	arg02, #0
156f8     54 CE B0 FD | 	call	#_printerror
156fc     54 03 90 FD | 	jmp	#LR__1777
15700                 | LR__1770
15700                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
15700     13 15 02 F6 | 	mov	arg02, local01
15704     04 14 66 F0 | 	shl	arg02, #4
15708     14 00 00 FF 
1570c     F8 E5 05 F1 | 	add	objptr, ##10744
15710     F2 14 02 F1 | 	add	arg02, objptr
15714     0C 14 06 F1 | 	add	arg02, #12
15718     0A 15 02 FB | 	rdlong	arg02, arg02
1571c     1E 14 0E F2 | 	cmp	arg02, #30 wz
15720     14 00 00 FF 
15724     F8 E5 85 F1 | 	sub	objptr, ##10744
15728     54 00 90 5D |  if_ne	jmp	#LR__1771
1572c     13 15 02 F6 | 	mov	arg02, local01
15730     04 14 66 F0 | 	shl	arg02, #4
15734     14 00 00 FF 
15738     F8 E5 05 F1 | 	add	objptr, ##10744
1573c     F2 14 02 F1 | 	add	arg02, objptr
15740     0C 14 06 F1 | 	add	arg02, #12
15744     0A 39 68 FC | 	wrlong	#28, arg02
15748     13 2D 02 F6 | 	mov	local04, local01
1574c     04 2C 66 F0 | 	shl	local04, #4
15750     F2 2C 02 F1 | 	add	local04, objptr
15754     13 15 02 F6 | 	mov	arg02, local01
15758     04 14 66 F0 | 	shl	arg02, #4
1575c     F2 14 02 F1 | 	add	arg02, objptr
15760     04 14 06 F1 | 	add	arg02, #4
15764     0A 13 02 FB | 	rdlong	arg01, arg02
15768     14 00 00 FF 
1576c     F8 E5 85 F1 | 	sub	objptr, ##10744
15770     01 14 06 F6 | 	mov	arg02, #1
15774     0C 3B B1 FD | 	call	#__system___float_tointeger
15778     04 2C 06 F1 | 	add	local04, #4
1577c     16 FB 61 FC | 	wrlong	result1, local04
15780                 | LR__1771
15780     50 00 00 FF 
15784     30 E5 05 F1 | 	add	objptr, ##41264
15788     F2 2C 02 FB | 	rdlong	local04, objptr
1578c     16 15 02 F6 | 	mov	arg02, local04
15790     02 14 66 F0 | 	shl	arg02, #2
15794     16 15 02 F1 | 	add	arg02, local04
15798     02 14 66 F0 | 	shl	arg02, #2
1579c     06 00 00 FF 
157a0     98 E4 85 F1 | 	sub	objptr, ##3224
157a4     F2 14 02 F1 | 	add	arg02, objptr
157a8     0C 14 06 F1 | 	add	arg02, #12
157ac     0A FF 01 FB | 	rdlong	result3, arg02
157b0     13 2D 02 F6 | 	mov	local04, local01
157b4     04 2C 66 F0 | 	shl	local04, #4
157b8     35 00 00 FF 
157bc     A0 E4 85 F1 | 	sub	objptr, ##27296
157c0     F2 2C 02 F1 | 	add	local04, objptr
157c4     13 15 02 F6 | 	mov	arg02, local01
157c8     04 14 66 F0 | 	shl	arg02, #4
157cc     F2 14 02 F1 | 	add	arg02, objptr
157d0     04 14 06 F1 | 	add	arg02, #4
157d4     0A 13 02 FB | 	rdlong	arg01, arg02
157d8     FF 12 02 F1 | 	add	arg01, result3
157dc     04 2C 06 F1 | 	add	local04, #4
157e0     16 13 62 FC | 	wrlong	arg01, local04
157e4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
157e4                 | ' if fortable(fortop).stepval>=0 then
157e4     3B 00 00 FF 
157e8     38 E5 05 F1 | 	add	objptr, ##30520
157ec     F2 2C 02 FB | 	rdlong	local04, objptr
157f0     16 13 02 F6 | 	mov	arg01, local04
157f4     02 12 66 F0 | 	shl	arg01, #2
157f8     16 13 02 F1 | 	add	arg01, local04
157fc     02 12 66 F0 | 	shl	arg01, #2
15800     06 00 00 FF 
15804     98 E4 85 F1 | 	sub	objptr, ##3224
15808     F2 12 02 F1 | 	add	arg01, objptr
1580c     0C 12 06 F1 | 	add	arg01, #12
15810     09 13 02 FB | 	rdlong	arg01, arg01
15814     00 12 56 F2 | 	cmps	arg01, #0 wc
15818     4A 00 00 FF 
1581c     98 E4 85 F1 | 	sub	objptr, ##38040
15820     78 00 90 CD |  if_b	jmp	#LR__1772
15824                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
15824     04 26 66 F0 | 	shl	local01, #4
15828     14 00 00 FF 
1582c     F8 E5 05 F1 | 	add	objptr, ##10744
15830     F2 26 02 F1 | 	add	local01, objptr
15834     3B 00 00 FF 
15838     38 E5 05 F1 | 	add	objptr, ##30520
1583c     F2 12 02 FB | 	rdlong	arg01, objptr
15840     09 2D 02 F6 | 	mov	local04, arg01
15844     02 2C 66 F0 | 	shl	local04, #2
15848     09 2D 02 F1 | 	add	local04, arg01
1584c     02 2C 66 F0 | 	shl	local04, #2
15850     06 00 00 FF 
15854     98 E4 85 F1 | 	sub	objptr, ##3224
15858     F2 2C 02 F1 | 	add	local04, objptr
1585c     04 26 06 F1 | 	add	local01, #4
15860     13 27 02 FB | 	rdlong	local01, local01
15864     10 2C 06 F1 | 	add	local04, #16
15868     16 2D 02 FB | 	rdlong	local04, local04
1586c     16 27 5A F2 | 	cmps	local01, local04 wcz
15870     4A 00 00 FF 
15874     98 E4 85 F1 | 	sub	objptr, ##38040
15878     9C 00 90 ED |  if_be	jmp	#LR__1774
1587c     50 00 00 FF 
15880     30 E5 05 F1 | 	add	objptr, ##41264
15884     F2 2C 02 FB | 	rdlong	local04, objptr
15888     01 2C 86 F1 | 	sub	local04, #1
1588c     F2 2C 62 FC | 	wrlong	local04, objptr
15890     50 00 00 FF 
15894     30 E5 85 F1 | 	sub	objptr, ##41264
15898     B8 01 90 FD | 	jmp	#LR__1777
1589c                 | LR__1772
1589c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
1589c     13 2D 02 F6 | 	mov	local04, local01
158a0     04 2C 66 F0 | 	shl	local04, #4
158a4     14 00 00 FF 
158a8     F8 E5 05 F1 | 	add	objptr, ##10744
158ac     F2 2C 02 F1 | 	add	local04, objptr
158b0     3B 00 00 FF 
158b4     38 E5 05 F1 | 	add	objptr, ##30520
158b8     F2 26 02 FB | 	rdlong	local01, objptr
158bc     13 13 02 F6 | 	mov	arg01, local01
158c0     02 12 66 F0 | 	shl	arg01, #2
158c4     13 13 02 F1 | 	add	arg01, local01
158c8     02 12 66 F0 | 	shl	arg01, #2
158cc     06 00 00 FF 
158d0     98 E4 85 F1 | 	sub	objptr, ##3224
158d4     F2 12 02 F1 | 	add	arg01, objptr
158d8     04 2C 06 F1 | 	add	local04, #4
158dc     16 2D 02 FB | 	rdlong	local04, local04
158e0     10 12 06 F1 | 	add	arg01, #16
158e4     09 13 02 FB | 	rdlong	arg01, arg01
158e8     09 2D 52 F2 | 	cmps	local04, arg01 wc
158ec     4A 00 00 FF 
158f0     98 E4 85 F1 | 	sub	objptr, ##38040
158f4     20 00 90 3D |  if_ae	jmp	#LR__1773
158f8     50 00 00 FF 
158fc     30 E5 05 F1 | 	add	objptr, ##41264
15900     F2 2C 02 FB | 	rdlong	local04, objptr
15904     01 2C 86 F1 | 	sub	local04, #1
15908     F2 2C 62 FC | 	wrlong	local04, objptr
1590c     50 00 00 FF 
15910     30 E5 85 F1 | 	sub	objptr, ##41264
15914     3C 01 90 FD | 	jmp	#LR__1777
15918                 | LR__1773
15918                 | LR__1774
15918                 | ' ' if not returned, goto pointer 
15918                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
15918     50 00 00 FF 
1591c     EC E4 05 F1 | 	add	objptr, ##41196
15920     F2 2C 02 FB | 	rdlong	local04, objptr
15924     50 00 00 FF 
15928     EC E4 85 F1 | 	sub	objptr, ##41196
1592c     01 2C 16 F2 | 	cmp	local04, #1 wc
15930     DC 00 90 CD |  if_b	jmp	#LR__1775
15934     50 00 00 FF 
15938     30 E5 05 F1 | 	add	objptr, ##41264
1593c     F2 2C 02 FB | 	rdlong	local04, objptr
15940     16 27 02 F6 | 	mov	local01, local04
15944     02 26 66 F0 | 	shl	local01, #2
15948     16 27 02 F1 | 	add	local01, local04
1594c     02 26 66 F0 | 	shl	local01, #2
15950     06 00 00 FF 
15954     98 E4 85 F1 | 	sub	objptr, ##3224
15958     F2 26 02 F1 | 	add	local01, objptr
1595c     06 00 00 FF 
15960     20 E4 05 F1 | 	add	objptr, ##3104
15964     F2 2C 02 FB | 	rdlong	local04, objptr
15968     50 00 00 FF 
1596c     B8 E4 85 F1 | 	sub	objptr, ##41144
15970     13 27 02 FB | 	rdlong	local01, local01
15974     13 2D 0A F2 | 	cmp	local04, local01 wz
15978     94 00 90 AD |  if_e	jmp	#LR__1775
1597c     50 00 00 FF 
15980     30 E5 05 F1 | 	add	objptr, ##41264
15984     F2 2C 02 FB | 	rdlong	local04, objptr
15988     16 27 02 F6 | 	mov	local01, local04
1598c     02 26 66 F0 | 	shl	local01, #2
15990     16 27 02 F1 | 	add	local01, local04
15994     02 26 66 F0 | 	shl	local01, #2
15998     06 00 00 FF 
1599c     98 E4 85 F1 | 	sub	objptr, ##3224
159a0     F2 26 02 F1 | 	add	local01, objptr
159a4     13 27 02 FB | 	rdlong	local01, local01
159a8     06 00 00 FF 
159ac     20 E4 05 F1 | 	add	objptr, ##3104
159b0     F2 26 62 FC | 	wrlong	local01, objptr
159b4     78 E4 05 F1 | 	add	objptr, #120
159b8     F2 2C 02 FB | 	rdlong	local04, objptr
159bc     16 27 02 F6 | 	mov	local01, local04
159c0     02 26 66 F0 | 	shl	local01, #2
159c4     16 27 02 F1 | 	add	local01, local04
159c8     02 26 66 F0 | 	shl	local01, #2
159cc     06 00 00 FF 
159d0     98 E4 85 F1 | 	sub	objptr, ##3224
159d4     F2 26 02 F1 | 	add	local01, objptr
159d8     04 26 06 F1 | 	add	local01, #4
159dc     13 27 02 FB | 	rdlong	local01, local01
159e0     06 00 00 FF 
159e4     24 E4 05 F1 | 	add	objptr, ##3108
159e8     F2 26 62 FC | 	wrlong	local01, objptr
159ec     06 00 00 FF 
159f0     40 E4 85 F1 | 	sub	objptr, ##3136
159f4     F2 2C 02 FB | 	rdlong	local04, objptr
159f8     01 2C 86 F1 | 	sub	local04, #1
159fc     04 E4 05 F1 | 	add	objptr, #4
15a00     F2 2C 62 FC | 	wrlong	local04, objptr
15a04     4A 00 00 FF 
15a08     80 E4 85 F1 | 	sub	objptr, ##38016
15a0c     44 00 90 FD | 	jmp	#LR__1776
15a10                 | LR__1775
15a10     50 00 00 FF 
15a14     30 E5 05 F1 | 	add	objptr, ##41264
15a18     F2 2C 02 FB | 	rdlong	local04, objptr
15a1c     16 27 02 F6 | 	mov	local01, local04
15a20     02 26 66 F0 | 	shl	local01, #2
15a24     16 27 02 F1 | 	add	local01, local04
15a28     02 26 66 F0 | 	shl	local01, #2
15a2c     06 00 00 FF 
15a30     98 E4 85 F1 | 	sub	objptr, ##3224
15a34     F2 26 02 F1 | 	add	local01, objptr
15a38     04 26 06 F1 | 	add	local01, #4
15a3c     13 27 02 FB | 	rdlong	local01, local01
15a40     01 26 86 F1 | 	sub	local01, #1
15a44     18 E4 85 F1 | 	sub	objptr, #24
15a48     F2 26 62 FC | 	wrlong	local01, objptr
15a4c     4A 00 00 FF 
15a50     80 E4 85 F1 | 	sub	objptr, ##38016
15a54                 | LR__1776
15a54                 | LR__1777
15a54     A7 F0 03 F6 | 	mov	ptra, fp
15a58     B2 00 A0 FD | 	call	#popregs_
15a5c                 | _do_next_ret
15a5c     2D 00 64 FD | 	ret
15a60                 | 
15a60                 | ' 
15a60                 | ' '-------------------- no command (print "Unknown command")
15a60                 | ' 
15a60                 | ' sub do_no_command
15a60                 | _do_no_command
15a60     50 00 00 FF 
15a64     F0 E4 05 F1 | 	add	objptr, ##41200
15a68     F2 14 02 FB | 	rdlong	arg02, objptr
15a6c     50 00 00 FF 
15a70     F0 E4 85 F1 | 	sub	objptr, ##41200
15a74     17 12 06 F6 | 	mov	arg01, #23
15a78     D4 CA B0 FD | 	call	#_printerror
15a7c                 | _do_no_command_ret
15a7c     2D 00 64 FD | 	ret
15a80                 | 
15a80                 | ' 
15a80                 | ' '-------------------- nothing
15a80                 | ' 
15a80                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
15a80                 | _do_nothing
15a80                 | _do_nothing_ret
15a80     2D 00 64 FD | 	ret
15a84                 | 
15a84                 | ' 
15a84                 | ' '-------------------- on
15a84                 | ' 
15a84                 | ' sub do_on
15a84                 | _do_on
15a84     01 4A 05 F6 | 	mov	COUNT_, #1
15a88     A8 00 A0 FD | 	call	#pushregs_
15a8c     18 F0 07 F1 | 	add	ptra, #24
15a90     4A 00 00 FF 
15a94     80 E4 05 F1 | 	add	objptr, ##38016
15a98     F2 12 02 FB | 	rdlong	arg01, objptr
15a9c     09 FD 01 F6 | 	mov	result2, arg01
15aa0     01 FC 65 F0 | 	shl	result2, #1
15aa4     09 FD 01 F1 | 	add	result2, arg01
15aa8     02 FC 65 F0 | 	shl	result2, #2
15aac     03 00 00 FF 
15ab0     04 E4 85 F1 | 	sub	objptr, ##1540
15ab4     F2 FC 01 F1 | 	add	result2, objptr
15ab8     FE 12 02 FB | 	rdlong	arg01, result2
15abc     14 4E 05 F1 | 	add	fp, #20
15ac0     A7 12 62 FC | 	wrlong	arg01, fp
15ac4     03 00 00 FF 
15ac8     04 E4 05 F1 | 	add	objptr, ##1540
15acc     F2 12 02 FB | 	rdlong	arg01, objptr
15ad0     09 27 02 F6 | 	mov	local01, arg01
15ad4     01 26 66 F0 | 	shl	local01, #1
15ad8     09 27 02 F1 | 	add	local01, arg01
15adc     02 26 66 F0 | 	shl	local01, #2
15ae0     03 00 00 FF 
15ae4     04 E4 85 F1 | 	sub	objptr, ##1540
15ae8     F2 26 02 F1 | 	add	local01, objptr
15aec     04 26 06 F1 | 	add	local01, #4
15af0     13 27 02 FB | 	rdlong	local01, local01
15af4     08 4E 85 F1 | 	sub	fp, #8
15af8     A7 26 62 FC | 	wrlong	local01, fp
15afc     0C 4E 85 F1 | 	sub	fp, #12
15b00     47 00 00 FF 
15b04     7C E4 85 F1 | 	sub	objptr, ##36476
15b08     D4 77 BF FD | 	call	#_pop
15b0c     FF 26 02 F6 | 	mov	local01, result3
15b10     A7 FA 61 FC | 	wrlong	result1, fp
15b14     04 4E 05 F1 | 	add	fp, #4
15b18     A7 FC 61 FC | 	wrlong	result2, fp
15b1c     04 4E 05 F1 | 	add	fp, #4
15b20     A7 26 62 FC | 	wrlong	local01, fp
15b24     08 4E 85 F1 | 	sub	fp, #8
15b28     A7 12 02 F6 | 	mov	arg01, fp
15b2c     94 79 BF FD | 	call	#_converttoint
15b30     10 4E 05 F1 | 	add	fp, #16
15b34     A7 FA 61 FC | 	wrlong	result1, fp
15b38                 | ' 
15b38                 | ' numpar=compiledline(lineptr_e).result.uresult
15b38                 | ' skip=compiledline(lineptr_e).result.twowords(1)
15b38                 | ' t1=pop()
15b38                 | ' t=converttoint(t1)
15b38                 | ' if t<1 orelse t>numpar then return
15b38     10 4E 85 F1 | 	sub	fp, #16
15b3c     01 FA 55 F2 | 	cmps	result1, #1 wc
15b40     58 00 90 CD |  if_b	jmp	#LR__1780
15b44     10 4E 05 F1 | 	add	fp, #16
15b48     A7 26 02 FB | 	rdlong	local01, fp
15b4c     04 4E 05 F1 | 	add	fp, #4
15b50     A7 12 02 FB | 	rdlong	arg01, fp
15b54     14 4E 85 F1 | 	sub	fp, #20
15b58     09 27 5A F2 | 	cmps	local01, arg01 wcz
15b5c     3C 00 90 1D |  if_a	jmp	#LR__1780
15b60     10 4E 05 F1 | 	add	fp, #16
15b64     A7 26 02 FB | 	rdlong	local01, fp
15b68     01 26 86 F1 | 	sub	local01, #1
15b6c     04 4E 85 F1 | 	sub	fp, #4
15b70     A7 12 02 FB | 	rdlong	arg01, fp
15b74     13 13 02 FD | 	qmul	arg01, local01
15b78     4A 00 00 FF 
15b7c     80 E4 05 F1 | 	add	objptr, ##38016
15b80     F2 26 02 FB | 	rdlong	local01, objptr
15b84     0C 4E 85 F1 | 	sub	fp, #12
15b88     18 12 62 FD | 	getqx	arg01
15b8c     09 27 02 F1 | 	add	local01, arg01
15b90     F2 26 62 FC | 	wrlong	local01, objptr
15b94     4A 00 00 FF 
15b98     80 E4 85 F1 | 	sub	objptr, ##38016
15b9c                 | LR__1780
15b9c     A7 F0 03 F6 | 	mov	ptra, fp
15ba0     B2 00 A0 FD | 	call	#popregs_
15ba4                 | _do_on_ret
15ba4     2D 00 64 FD | 	ret
15ba8                 | 
15ba8                 | ' 
15ba8                 | ' '-------------------- open
15ba8                 | ' 
15ba8                 | ' sub do_open
15ba8                 | _do_open
15ba8     02 4A 05 F6 | 	mov	COUNT_, #2
15bac     A8 00 A0 FD | 	call	#pushregs_
15bb0     20 F0 07 F1 | 	add	ptra, #32
15bb4     4A 00 00 FF 
15bb8     80 E4 05 F1 | 	add	objptr, ##38016
15bbc     F2 16 02 FB | 	rdlong	arg03, objptr
15bc0     0B 15 02 F6 | 	mov	arg02, arg03
15bc4     01 14 66 F0 | 	shl	arg02, #1
15bc8     0B 15 02 F1 | 	add	arg02, arg03
15bcc     02 14 66 F0 | 	shl	arg02, #2
15bd0     03 00 00 FF 
15bd4     04 E4 85 F1 | 	sub	objptr, ##1540
15bd8     F2 14 02 F1 | 	add	arg02, objptr
15bdc     0A 17 02 FB | 	rdlong	arg03, arg02
15be0     10 4E 05 F1 | 	add	fp, #16
15be4     A7 16 62 FC | 	wrlong	arg03, fp
15be8     10 4E 85 F1 | 	sub	fp, #16
15bec     47 00 00 FF 
15bf0     7C E4 85 F1 | 	sub	objptr, ##36476
15bf4     E8 76 BF FD | 	call	#_pop
15bf8     FF 16 02 F6 | 	mov	arg03, result3
15bfc     A7 FA 61 FC | 	wrlong	result1, fp
15c00     04 4E 05 F1 | 	add	fp, #4
15c04     A7 FC 61 FC | 	wrlong	result2, fp
15c08     04 4E 05 F1 | 	add	fp, #4
15c0c     A7 16 62 FC | 	wrlong	arg03, fp
15c10                 | ' 
15c10                 | ' numpar=compiledline(lineptr_e).result.uresult
15c10                 | ' 
15c10                 | ' t1=pop()
15c10                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15c10     08 4E 85 F1 | 	sub	fp, #8
15c14     2B 16 0E F2 | 	cmp	arg03, #43 wz
15c18     18 00 90 5D |  if_ne	jmp	#LR__1790
15c1c     A7 12 02 FB | 	rdlong	arg01, fp
15c20     34 78 BF FD | 	call	#_convertstring
15c24     A7 FA 61 FC | 	wrlong	result1, fp
15c28     08 4E 05 F1 | 	add	fp, #8
15c2c     A7 3E 68 FC | 	wrlong	#31, fp
15c30     08 4E 85 F1 | 	sub	fp, #8
15c34                 | LR__1790
15c34                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
15c34     08 4E 05 F1 | 	add	fp, #8
15c38     A7 16 02 FB | 	rdlong	arg03, fp
15c3c     08 4E 85 F1 | 	sub	fp, #8
15c40     1F 16 0E F2 | 	cmp	arg03, #31 wz
15c44     44 00 90 AD |  if_e	jmp	#LR__1791
15c48     00 12 06 F6 | 	mov	arg01, #0
15c4c     94 5F B1 FD | 	call	#__system___getiolock_0600
15c50     FD 12 02 F6 | 	mov	arg01, result1
15c54     E8 02 B1 FD | 	call	#__system___lockmem
15c58     B2 01 00 FF 
15c5c     85 14 06 F6 | 	mov	arg02, ##@LR__5895
15c60     00 12 06 F6 | 	mov	arg01, #0
15c64     00 16 06 F6 | 	mov	arg03, #0
15c68     CC 0F B1 FD | 	call	#__system___basic_print_string
15c6c     00 12 06 F6 | 	mov	arg01, #0
15c70     0A 14 06 F6 | 	mov	arg02, #10
15c74     00 16 06 F6 | 	mov	arg03, #0
15c78     64 0F B1 FD | 	call	#__system___basic_print_char
15c7c     00 12 06 F6 | 	mov	arg01, #0
15c80     60 5F B1 FD | 	call	#__system___getiolock_0600
15c84     FD 00 68 FC | 	wrlong	#0, result1
15c88     28 02 90 FD | 	jmp	#LR__1802
15c8c                 | LR__1791
15c8c     A7 16 02 FB | 	rdlong	arg03, fp
15c90     0C 4E 05 F1 | 	add	fp, #12
15c94     A7 16 62 FC | 	wrlong	arg03, fp
15c98     0C 4E 85 F1 | 	sub	fp, #12
15c9c     40 76 BF FD | 	call	#_pop
15ca0     FF 16 02 F6 | 	mov	arg03, result3
15ca4     A7 FA 61 FC | 	wrlong	result1, fp
15ca8     04 4E 05 F1 | 	add	fp, #4
15cac     A7 FC 61 FC | 	wrlong	result2, fp
15cb0     04 4E 05 F1 | 	add	fp, #4
15cb4     A7 16 62 FC | 	wrlong	arg03, fp
15cb8                 | ' filename=t1.result.sresult
15cb8                 | ' t1=pop()
15cb8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15cb8     08 4E 85 F1 | 	sub	fp, #8
15cbc     2B 16 0E F2 | 	cmp	arg03, #43 wz
15cc0     18 00 90 5D |  if_ne	jmp	#LR__1792
15cc4     A7 12 02 FB | 	rdlong	arg01, fp
15cc8     8C 77 BF FD | 	call	#_convertstring
15ccc     A7 FA 61 FC | 	wrlong	result1, fp
15cd0     08 4E 05 F1 | 	add	fp, #8
15cd4     A7 3E 68 FC | 	wrlong	#31, fp
15cd8     08 4E 85 F1 | 	sub	fp, #8
15cdc                 | LR__1792
15cdc     14 4E 05 F1 | 	add	fp, #20
15ce0     A7 00 68 FC | 	wrlong	#0, fp
15ce4                 | ' mode=0
15ce4                 | ' if t1.result_type=result_string then
15ce4     0C 4E 85 F1 | 	sub	fp, #12
15ce8     A7 14 02 FB | 	rdlong	arg02, fp
15cec     08 4E 85 F1 | 	sub	fp, #8
15cf0     1F 14 0E F2 | 	cmp	arg02, #31 wz
15cf4     64 00 90 5D |  if_ne	jmp	#LR__1793
15cf8                 | '   if t1.result.sresult="read" then mode=1
15cf8     A7 12 02 FB | 	rdlong	arg01, fp
15cfc     B2 01 00 FF 
15d00     97 14 06 F6 | 	mov	arg02, ##@LR__5896
15d04     60 02 B1 FD | 	call	#__system___string_cmp
15d08     00 FA 0D F2 | 	cmp	result1, #0 wz
15d0c     14 4E 05 A1 |  if_e	add	fp, #20
15d10     A7 02 68 AC |  if_e	wrlong	#1, fp
15d14     14 4E 85 A1 |  if_e	sub	fp, #20
15d18                 | '   if t1.result.sresult="write" then mode=2
15d18     A7 12 02 FB | 	rdlong	arg01, fp
15d1c     B2 01 00 FF 
15d20     9C 14 06 F6 | 	mov	arg02, ##@LR__5897
15d24     40 02 B1 FD | 	call	#__system___string_cmp
15d28     00 FA 0D F2 | 	cmp	result1, #0 wz
15d2c     14 4E 05 A1 |  if_e	add	fp, #20
15d30     A7 04 68 AC |  if_e	wrlong	#2, fp
15d34     14 4E 85 A1 |  if_e	sub	fp, #20
15d38                 | '   if t1.result.sresult="append" then mode=4
15d38     A7 12 02 FB | 	rdlong	arg01, fp
15d3c     B2 01 00 FF 
15d40     A2 14 06 F6 | 	mov	arg02, ##@LR__5898
15d44     20 02 B1 FD | 	call	#__system___string_cmp
15d48     00 FA 0D F2 | 	cmp	result1, #0 wz
15d4c     14 4E 05 A1 |  if_e	add	fp, #20
15d50     A7 08 68 AC |  if_e	wrlong	#4, fp
15d54     14 4E 85 A1 |  if_e	sub	fp, #20
15d58     14 00 90 FD | 	jmp	#LR__1794
15d5c                 | LR__1793
15d5c     A7 12 02 F6 | 	mov	arg01, fp
15d60     60 77 BF FD | 	call	#_converttoint
15d64     14 4E 05 F1 | 	add	fp, #20
15d68     A7 FA 61 FC | 	wrlong	result1, fp
15d6c     14 4E 85 F1 | 	sub	fp, #20
15d70                 | LR__1794
15d70     6C 75 BF FD | 	call	#_pop
15d74     FF 16 02 F6 | 	mov	arg03, result3
15d78     A7 FA 61 FC | 	wrlong	result1, fp
15d7c     04 4E 05 F1 | 	add	fp, #4
15d80     A7 FC 61 FC | 	wrlong	result2, fp
15d84     04 4E 05 F1 | 	add	fp, #4
15d88     A7 16 62 FC | 	wrlong	arg03, fp
15d8c                 | ' t1=pop()
15d8c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
15d8c     08 4E 85 F1 | 	sub	fp, #8
15d90     2C 16 0E F2 | 	cmp	arg03, #44 wz
15d94     44 00 90 AD |  if_e	jmp	#LR__1795
15d98     00 12 06 F6 | 	mov	arg01, #0
15d9c     44 5E B1 FD | 	call	#__system___getiolock_0600
15da0     FD 12 02 F6 | 	mov	arg01, result1
15da4     98 01 B1 FD | 	call	#__system___lockmem
15da8     B2 01 00 FF 
15dac     A9 14 06 F6 | 	mov	arg02, ##@LR__5899
15db0     00 12 06 F6 | 	mov	arg01, #0
15db4     00 16 06 F6 | 	mov	arg03, #0
15db8     7C 0E B1 FD | 	call	#__system___basic_print_string
15dbc     00 12 06 F6 | 	mov	arg01, #0
15dc0     0A 14 06 F6 | 	mov	arg02, #10
15dc4     00 16 06 F6 | 	mov	arg03, #0
15dc8     14 0E B1 FD | 	call	#__system___basic_print_char
15dcc     00 12 06 F6 | 	mov	arg01, #0
15dd0     10 5E B1 FD | 	call	#__system___getiolock_0600
15dd4     FD 00 68 FC | 	wrlong	#0, result1
15dd8     D8 00 90 FD | 	jmp	#LR__1802
15ddc                 | LR__1795
15ddc     A7 26 02 FB | 	rdlong	local01, fp
15de0     18 4E 05 F1 | 	add	fp, #24
15de4     A7 26 62 FC | 	wrlong	local01, fp
15de8                 | ' channel  = t1.result.iresult
15de8                 | ' select case  mode
15de8     04 4E 85 F1 | 	sub	fp, #4
15dec     A7 28 02 FB | 	rdlong	local02, fp
15df0     14 4E 85 F1 | 	sub	fp, #20
15df4     01 28 86 F1 | 	sub	local02, #1
15df8     04 28 26 F3 | 	fle	local02, #4
15dfc     30 28 62 FD | 	jmprel	local02
15e00                 | LR__1796
15e00     10 00 90 FD | 	jmp	#LR__1797
15e04     2C 00 90 FD | 	jmp	#LR__1798
15e08     68 00 90 FD | 	jmp	#LR__1800
15e0c     44 00 90 FD | 	jmp	#LR__1799
15e10     60 00 90 FD | 	jmp	#LR__1800
15e14                 | LR__1797
15e14     18 4E 05 F1 | 	add	fp, #24
15e18     A7 12 02 FB | 	rdlong	arg01, fp
15e1c     0C 4E 85 F1 | 	sub	fp, #12
15e20     A7 14 02 FB | 	rdlong	arg02, fp
15e24     0C 4E 85 F1 | 	sub	fp, #12
15e28     00 16 06 F6 | 	mov	arg03, #0
15e2c     14 0D B1 FD | 	call	#__system___basic_open_string
15e30     80 00 90 FD | 	jmp	#LR__1801
15e34                 | LR__1798
15e34     18 4E 05 F1 | 	add	fp, #24
15e38     A7 12 02 FB | 	rdlong	arg01, fp
15e3c     0C 4E 85 F1 | 	sub	fp, #12
15e40     A7 14 02 FB | 	rdlong	arg02, fp
15e44     0C 4E 85 F1 | 	sub	fp, #12
15e48     0D 16 06 F6 | 	mov	arg03, #13
15e4c     F4 0C B1 FD | 	call	#__system___basic_open_string
15e50     60 00 90 FD | 	jmp	#LR__1801
15e54                 | LR__1799
15e54     18 4E 05 F1 | 	add	fp, #24
15e58     A7 12 02 FB | 	rdlong	arg01, fp
15e5c     0C 4E 85 F1 | 	sub	fp, #12
15e60     A7 14 02 FB | 	rdlong	arg02, fp
15e64     0C 4E 85 F1 | 	sub	fp, #12
15e68     25 16 06 F6 | 	mov	arg03, #37
15e6c     D4 0C B1 FD | 	call	#__system___basic_open_string
15e70     40 00 90 FD | 	jmp	#LR__1801
15e74                 | LR__1800
15e74     00 12 06 F6 | 	mov	arg01, #0
15e78     68 5D B1 FD | 	call	#__system___getiolock_0600
15e7c     FD 12 02 F6 | 	mov	arg01, result1
15e80     BC 00 B1 FD | 	call	#__system___lockmem
15e84     B2 01 00 FF 
15e88     BB 14 06 F6 | 	mov	arg02, ##@LR__5900
15e8c     00 12 06 F6 | 	mov	arg01, #0
15e90     00 16 06 F6 | 	mov	arg03, #0
15e94     A0 0D B1 FD | 	call	#__system___basic_print_string
15e98     00 12 06 F6 | 	mov	arg01, #0
15e9c     0A 14 06 F6 | 	mov	arg02, #10
15ea0     00 16 06 F6 | 	mov	arg03, #0
15ea4     38 0D B1 FD | 	call	#__system___basic_print_char
15ea8     00 12 06 F6 | 	mov	arg01, #0
15eac     34 5D B1 FD | 	call	#__system___getiolock_0600
15eb0     FD 00 68 FC | 	wrlong	#0, result1
15eb4                 | LR__1801
15eb4                 | LR__1802
15eb4     A7 F0 03 F6 | 	mov	ptra, fp
15eb8     B2 00 A0 FD | 	call	#popregs_
15ebc                 | _do_open_ret
15ebc     2D 00 64 FD | 	ret
15ec0                 | 
15ec0                 | ' 
15ec0                 | ' ' ------------------ padx
15ec0                 | ' 
15ec0                 | ' sub do_padh
15ec0                 | _do_padh
15ec0     01 4A 05 F6 | 	mov	COUNT_, #1
15ec4     A8 00 A0 FD | 	call	#pushregs_
15ec8     14 F0 07 F1 | 	add	ptra, #20
15ecc     4A 00 00 FF 
15ed0     80 E4 05 F1 | 	add	objptr, ##38016
15ed4     F2 26 02 FB | 	rdlong	local01, objptr
15ed8     13 17 02 F6 | 	mov	arg03, local01
15edc     01 16 66 F0 | 	shl	arg03, #1
15ee0     13 17 02 F1 | 	add	arg03, local01
15ee4     02 16 66 F0 | 	shl	arg03, #2
15ee8     03 00 00 FF 
15eec     04 E4 85 F1 | 	sub	objptr, ##1540
15ef0     F2 16 02 F1 | 	add	arg03, objptr
15ef4     0B 17 02 FB | 	rdlong	arg03, arg03
15ef8     0C 4E 05 F1 | 	add	fp, #12
15efc     A7 16 62 FC | 	wrlong	arg03, fp
15f00                 | ' 
15f00                 | ' numpar=compiledline(lineptr_e).result.uresult
15f00                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
15f00     0C 4E 85 F1 | 	sub	fp, #12
15f04     02 16 16 F2 | 	cmp	arg03, #2 wc
15f08     47 00 00 FF 
15f0c     7C E4 85 F1 | 	sub	objptr, ##36476
15f10     40 00 90 CD |  if_b	jmp	#LR__1810
15f14     00 12 06 F6 | 	mov	arg01, #0
15f18     C8 5C B1 FD | 	call	#__system___getiolock_0600
15f1c     FD 12 02 F6 | 	mov	arg01, result1
15f20     1C 00 B1 FD | 	call	#__system___lockmem
15f24     B2 01 00 FF 
15f28     CE 14 06 F6 | 	mov	arg02, ##@LR__5901
15f2c     00 12 06 F6 | 	mov	arg01, #0
15f30     00 16 06 F6 | 	mov	arg03, #0
15f34     00 0D B1 FD | 	call	#__system___basic_print_string
15f38     00 12 06 F6 | 	mov	arg01, #0
15f3c     A4 5C B1 FD | 	call	#__system___getiolock_0600
15f40     FD 00 68 FC | 	wrlong	#0, result1
15f44     27 12 06 F6 | 	mov	arg01, #39
15f48     00 14 06 F6 | 	mov	arg02, #0
15f4c     00 C6 B0 FD | 	call	#_printerror
15f50     F0 00 90 FD | 	jmp	#LR__1814
15f54                 | LR__1810
15f54                 | ' if numpar=0 then 
15f54     0C 4E 05 F1 | 	add	fp, #12
15f58     A7 FE 09 FB | 	rdlong	result3, fp wz
15f5c     0C 4E 85 F1 | 	sub	fp, #12
15f60     30 00 90 5D |  if_ne	jmp	#LR__1811
15f64     51 00 00 FF 
15f68     AC E5 05 F1 | 	add	objptr, ##41900
15f6c     F2 26 02 FB | 	rdlong	local01, objptr
15f70     51 00 00 FF 
15f74     AC E5 85 F1 | 	sub	objptr, ##41900
15f78     A7 26 62 FC | 	wrlong	local01, fp
15f7c     08 4E 05 F1 | 	add	fp, #8
15f80     A7 38 68 FC | 	wrlong	#28, fp
15f84     08 4E 85 F1 | 	sub	fp, #8
15f88     A7 12 02 F6 | 	mov	arg01, fp
15f8c     E8 73 BF FD | 	call	#_push
15f90                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
15f90     B0 00 90 FD | 	jmp	#LR__1814
15f94                 | LR__1811
15f94     48 73 BF FD | 	call	#_pop
15f98     A7 FA 61 FC | 	wrlong	result1, fp
15f9c     04 4E 05 F1 | 	add	fp, #4
15fa0     A7 FC 61 FC | 	wrlong	result2, fp
15fa4     04 4E 05 F1 | 	add	fp, #4
15fa8     A7 FE 61 FC | 	wrlong	result3, fp
15fac                 | ' t1=pop()
15fac                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
15fac     08 4E 85 F1 | 	sub	fp, #8
15fb0     1C FE 0D F2 | 	cmp	result3, #28 wz
15fb4     08 4E 05 51 |  if_ne	add	fp, #8
15fb8     A7 26 02 5B |  if_ne	rdlong	local01, fp
15fbc     08 4E 85 51 |  if_ne	sub	fp, #8
15fc0     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
15fc4     70 00 90 5D |  if_ne	jmp	#LR__1813
15fc8     A7 26 02 FB | 	rdlong	local01, fp
15fcc     52 00 00 FF 
15fd0     08 E5 05 F1 | 	add	objptr, ##42248
15fd4     F2 26 62 FC | 	wrlong	local01, objptr
15fd8                 | '   q=t1.result.uresult
15fd8                 | '   if q<7 then 
15fd8     52 00 00 FF 
15fdc     08 E5 85 F1 | 	sub	objptr, ##42248
15fe0     07 26 56 F2 | 	cmps	local01, #7 wc
15fe4     40 00 90 3D |  if_ae	jmp	#LR__1812
15fe8     52 00 00 FF 
15fec     08 E5 05 F1 | 	add	objptr, ##42248
15ff0     F2 26 02 FB | 	rdlong	local01, objptr
15ff4     02 26 66 F0 | 	shl	local01, #2
15ff8     5C E5 85 F1 | 	sub	objptr, #348
15ffc     F2 26 02 F1 | 	add	local01, objptr
16000     13 27 02 FB | 	rdlong	local01, local01
16004     A7 26 62 FC | 	wrlong	local01, fp
16008     08 4E 05 F1 | 	add	fp, #8
1600c     A7 38 68 FC | 	wrlong	#28, fp
16010     08 4E 85 F1 | 	sub	fp, #8
16014     A7 12 02 F6 | 	mov	arg01, fp
16018     51 00 00 FF 
1601c     AC E5 85 F1 | 	sub	objptr, ##41900
16020     54 73 BF FD | 	call	#_push
16024                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16024     1C 00 90 FD | 	jmp	#LR__1814
16028                 | LR__1812
16028     29 12 06 F6 | 	mov	arg01, #41
1602c     00 14 06 F6 | 	mov	arg02, #0
16030     1C C5 B0 FD | 	call	#_printerror
16034                 | '      printerror(41) : return
16034     0C 00 90 FD | 	jmp	#LR__1814
16038                 | LR__1813
16038     29 12 06 F6 | 	mov	arg01, #41
1603c     00 14 06 F6 | 	mov	arg02, #0
16040     0C C5 B0 FD | 	call	#_printerror
16044                 | LR__1814
16044     A7 F0 03 F6 | 	mov	ptra, fp
16048     B2 00 A0 FD | 	call	#popregs_
1604c                 | _do_padh_ret
1604c     2D 00 64 FD | 	ret
16050                 | 
16050                 | ' 
16050                 | ' ' ------------------ padrx
16050                 | ' 
16050                 | ' sub do_padrx
16050                 | _do_padrx
16050     02 4A 05 F6 | 	mov	COUNT_, #2
16054     A8 00 A0 FD | 	call	#pushregs_
16058     14 F0 07 F1 | 	add	ptra, #20
1605c     4A 00 00 FF 
16060     80 E4 05 F1 | 	add	objptr, ##38016
16064     F2 26 02 FB | 	rdlong	local01, objptr
16068     13 17 02 F6 | 	mov	arg03, local01
1606c     01 16 66 F0 | 	shl	arg03, #1
16070     13 17 02 F1 | 	add	arg03, local01
16074     02 16 66 F0 | 	shl	arg03, #2
16078     03 00 00 FF 
1607c     04 E4 85 F1 | 	sub	objptr, ##1540
16080     F2 16 02 F1 | 	add	arg03, objptr
16084     0B 17 02 FB | 	rdlong	arg03, arg03
16088     0C 4E 05 F1 | 	add	fp, #12
1608c     A7 16 62 FC | 	wrlong	arg03, fp
16090                 | ' 
16090                 | ' numpar=compiledline(lineptr_e).result.uresult
16090                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16090     0C 4E 85 F1 | 	sub	fp, #12
16094     02 16 16 F2 | 	cmp	arg03, #2 wc
16098     47 00 00 FF 
1609c     7C E4 85 F1 | 	sub	objptr, ##36476
160a0     40 00 90 CD |  if_b	jmp	#LR__1820
160a4     00 12 06 F6 | 	mov	arg01, #0
160a8     38 5B B1 FD | 	call	#__system___getiolock_0600
160ac     FD 12 02 F6 | 	mov	arg01, result1
160b0     8C FE B0 FD | 	call	#__system___lockmem
160b4     B2 01 00 FF 
160b8     D5 14 06 F6 | 	mov	arg02, ##@LR__5902
160bc     00 12 06 F6 | 	mov	arg01, #0
160c0     00 16 06 F6 | 	mov	arg03, #0
160c4     70 0B B1 FD | 	call	#__system___basic_print_string
160c8     00 12 06 F6 | 	mov	arg01, #0
160cc     14 5B B1 FD | 	call	#__system___getiolock_0600
160d0     FD 00 68 FC | 	wrlong	#0, result1
160d4     27 12 06 F6 | 	mov	arg01, #39
160d8     00 14 06 F6 | 	mov	arg02, #0
160dc     70 C4 B0 FD | 	call	#_printerror
160e0     E0 01 90 FD | 	jmp	#LR__1824
160e4                 | LR__1820
160e4                 | ' if numpar=0 then 
160e4     0C 4E 05 F1 | 	add	fp, #12
160e8     A7 FE 09 FB | 	rdlong	result3, fp wz
160ec     0C 4E 85 F1 | 	sub	fp, #12
160f0     A8 00 90 5D |  if_ne	jmp	#LR__1821
160f4     00 C0 1B FF 
160f8     00 26 06 F6 | 	mov	local01, ##931135488
160fc     51 00 00 FF 
16100     C8 E5 05 F1 | 	add	objptr, ##41928
16104     F2 12 02 FB | 	rdlong	arg01, objptr
16108     51 00 00 FF 
1610c     C8 E5 85 F1 | 	sub	objptr, ##41928
16110     09 13 52 F6 | 	abs	arg01, arg01 wc
16114     1F 28 C6 C9 |  if_b	decod	local02, #31
16118     00 28 06 36 |  if_ae	mov	local02, #0
1611c     98 28 B1 FD | 	call	#__system___float_fromuns
16120     14 FB 61 F5 | 	xor	result1, local02
16124     FD 12 02 F6 | 	mov	arg01, result1
16128     FF 7F 23 FF 
1612c     00 14 06 F6 | 	mov	arg02, ##1191181824
16130     8C 2E B1 FD | 	call	#__system___float_div
16134     FD 14 02 F6 | 	mov	arg02, result1
16138     13 13 02 F6 | 	mov	arg01, local01
1613c     AC 28 B1 FD | 	call	#__system___float_add
16140     10 4E 05 F1 | 	add	fp, #16
16144     A7 FA 61 FC | 	wrlong	result1, fp
16148                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16148     10 4E 85 F1 | 	sub	fp, #16
1614c     1F FA 05 F4 | 	bitl	result1, #31
16150     FD 12 02 F6 | 	mov	arg01, result1
16154     89 41 1D FF 
16158     6F 14 06 F6 | 	mov	arg02, ##981668463
1615c     01 16 06 F6 | 	mov	arg03, #1
16160     8C 30 B1 FD | 	call	#__system___float_cmp
16164     00 FA 55 F2 | 	cmps	result1, #0 wc
16168     10 4E 05 C1 |  if_b	add	fp, #16
1616c     A7 00 68 CC |  if_b	wrlong	#0, fp
16170     10 4E 85 C1 |  if_b	sub	fp, #16
16174     10 4E 05 F1 | 	add	fp, #16
16178     A7 26 02 FB | 	rdlong	local01, fp
1617c     10 4E 85 F1 | 	sub	fp, #16
16180     A7 26 62 FC | 	wrlong	local01, fp
16184     08 4E 05 F1 | 	add	fp, #8
16188     A7 3C 68 FC | 	wrlong	#30, fp
1618c     08 4E 85 F1 | 	sub	fp, #8
16190     A7 12 02 F6 | 	mov	arg01, fp
16194     E0 71 BF FD | 	call	#_push
16198                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16198     28 01 90 FD | 	jmp	#LR__1824
1619c                 | LR__1821
1619c     40 71 BF FD | 	call	#_pop
161a0     A7 FA 61 FC | 	wrlong	result1, fp
161a4     04 4E 05 F1 | 	add	fp, #4
161a8     A7 FC 61 FC | 	wrlong	result2, fp
161ac     04 4E 05 F1 | 	add	fp, #4
161b0     A7 FE 61 FC | 	wrlong	result3, fp
161b4                 | ' t1=pop()
161b4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
161b4     08 4E 85 F1 | 	sub	fp, #8
161b8     1C FE 0D F2 | 	cmp	result3, #28 wz
161bc     08 4E 05 51 |  if_ne	add	fp, #8
161c0     A7 26 02 5B |  if_ne	rdlong	local01, fp
161c4     08 4E 85 51 |  if_ne	sub	fp, #8
161c8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
161cc     E8 00 90 5D |  if_ne	jmp	#LR__1823
161d0     A7 26 02 FB | 	rdlong	local01, fp
161d4     52 00 00 FF 
161d8     08 E5 05 F1 | 	add	objptr, ##42248
161dc     F2 26 62 FC | 	wrlong	local01, objptr
161e0                 | '   q=t1.result.uresult
161e0                 | '   if q<7 then 
161e0     52 00 00 FF 
161e4     08 E5 85 F1 | 	sub	objptr, ##42248
161e8     07 26 56 F2 | 	cmps	local01, #7 wc
161ec     B8 00 90 3D |  if_ae	jmp	#LR__1822
161f0     00 C0 1B FF 
161f4     00 26 06 F6 | 	mov	local01, ##931135488
161f8     52 00 00 FF 
161fc     08 E5 05 F1 | 	add	objptr, ##42248
16200     F2 16 02 FB | 	rdlong	arg03, objptr
16204     02 16 66 F0 | 	shl	arg03, #2
16208     40 E5 85 F1 | 	sub	objptr, #320
1620c     F2 16 02 F1 | 	add	arg03, objptr
16210     0B 13 02 FB | 	rdlong	arg01, arg03
16214     51 00 00 FF 
16218     C8 E5 85 F1 | 	sub	objptr, ##41928
1621c     09 13 52 F6 | 	abs	arg01, arg01 wc
16220     1F 28 C6 C9 |  if_b	decod	local02, #31
16224     00 28 06 36 |  if_ae	mov	local02, #0
16228     8C 27 B1 FD | 	call	#__system___float_fromuns
1622c     14 FB 61 F5 | 	xor	result1, local02
16230     FD 12 02 F6 | 	mov	arg01, result1
16234     FF 7F 23 FF 
16238     00 14 06 F6 | 	mov	arg02, ##1191181824
1623c     80 2D B1 FD | 	call	#__system___float_div
16240     FD 14 02 F6 | 	mov	arg02, result1
16244     13 13 02 F6 | 	mov	arg01, local01
16248     A0 27 B1 FD | 	call	#__system___float_add
1624c     10 4E 05 F1 | 	add	fp, #16
16250     A7 FA 61 FC | 	wrlong	result1, fp
16254                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16254     10 4E 85 F1 | 	sub	fp, #16
16258     1F FA 05 F4 | 	bitl	result1, #31
1625c     FD 12 02 F6 | 	mov	arg01, result1
16260     89 41 1D FF 
16264     6F 14 06 F6 | 	mov	arg02, ##981668463
16268     01 16 06 F6 | 	mov	arg03, #1
1626c     80 2F B1 FD | 	call	#__system___float_cmp
16270     00 FA 55 F2 | 	cmps	result1, #0 wc
16274     10 4E 05 C1 |  if_b	add	fp, #16
16278     A7 00 68 CC |  if_b	wrlong	#0, fp
1627c     10 4E 85 C1 |  if_b	sub	fp, #16
16280     10 4E 05 F1 | 	add	fp, #16
16284     A7 26 02 FB | 	rdlong	local01, fp
16288     10 4E 85 F1 | 	sub	fp, #16
1628c     A7 26 62 FC | 	wrlong	local01, fp
16290     08 4E 05 F1 | 	add	fp, #8
16294     A7 3C 68 FC | 	wrlong	#30, fp
16298     08 4E 85 F1 | 	sub	fp, #8
1629c     A7 12 02 F6 | 	mov	arg01, fp
162a0     D4 70 BF FD | 	call	#_push
162a4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
162a4     1C 00 90 FD | 	jmp	#LR__1824
162a8                 | LR__1822
162a8     29 12 06 F6 | 	mov	arg01, #41
162ac     00 14 06 F6 | 	mov	arg02, #0
162b0     9C C2 B0 FD | 	call	#_printerror
162b4                 | '      printerror(41) : return
162b4     0C 00 90 FD | 	jmp	#LR__1824
162b8                 | LR__1823
162b8     29 12 06 F6 | 	mov	arg01, #41
162bc     00 14 06 F6 | 	mov	arg02, #0
162c0     8C C2 B0 FD | 	call	#_printerror
162c4                 | LR__1824
162c4     A7 F0 03 F6 | 	mov	ptra, fp
162c8     B2 00 A0 FD | 	call	#popregs_
162cc                 | _do_padrx_ret
162cc     2D 00 64 FD | 	ret
162d0                 | 
162d0                 | ' 
162d0                 | ' ' ------------------ padry
162d0                 | ' 
162d0                 | ' sub do_padry
162d0                 | _do_padry
162d0     02 4A 05 F6 | 	mov	COUNT_, #2
162d4     A8 00 A0 FD | 	call	#pushregs_
162d8     14 F0 07 F1 | 	add	ptra, #20
162dc     4A 00 00 FF 
162e0     80 E4 05 F1 | 	add	objptr, ##38016
162e4     F2 26 02 FB | 	rdlong	local01, objptr
162e8     13 17 02 F6 | 	mov	arg03, local01
162ec     01 16 66 F0 | 	shl	arg03, #1
162f0     13 17 02 F1 | 	add	arg03, local01
162f4     02 16 66 F0 | 	shl	arg03, #2
162f8     03 00 00 FF 
162fc     04 E4 85 F1 | 	sub	objptr, ##1540
16300     F2 16 02 F1 | 	add	arg03, objptr
16304     0B 17 02 FB | 	rdlong	arg03, arg03
16308     0C 4E 05 F1 | 	add	fp, #12
1630c     A7 16 62 FC | 	wrlong	arg03, fp
16310                 | ' 
16310                 | ' numpar=compiledline(lineptr_e).result.uresult
16310                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16310     0C 4E 85 F1 | 	sub	fp, #12
16314     02 16 16 F2 | 	cmp	arg03, #2 wc
16318     47 00 00 FF 
1631c     7C E4 85 F1 | 	sub	objptr, ##36476
16320     40 00 90 CD |  if_b	jmp	#LR__1830
16324     00 12 06 F6 | 	mov	arg01, #0
16328     B8 58 B1 FD | 	call	#__system___getiolock_0600
1632c     FD 12 02 F6 | 	mov	arg01, result1
16330     0C FC B0 FD | 	call	#__system___lockmem
16334     B2 01 00 FF 
16338     DD 14 06 F6 | 	mov	arg02, ##@LR__5903
1633c     00 12 06 F6 | 	mov	arg01, #0
16340     00 16 06 F6 | 	mov	arg03, #0
16344     F0 08 B1 FD | 	call	#__system___basic_print_string
16348     00 12 06 F6 | 	mov	arg01, #0
1634c     94 58 B1 FD | 	call	#__system___getiolock_0600
16350     FD 00 68 FC | 	wrlong	#0, result1
16354     27 12 06 F6 | 	mov	arg01, #39
16358     00 14 06 F6 | 	mov	arg02, #0
1635c     F0 C1 B0 FD | 	call	#_printerror
16360     E0 01 90 FD | 	jmp	#LR__1834
16364                 | LR__1830
16364                 | ' if numpar=0 then 
16364     0C 4E 05 F1 | 	add	fp, #12
16368     A7 FE 09 FB | 	rdlong	result3, fp wz
1636c     0C 4E 85 F1 | 	sub	fp, #12
16370     A8 00 90 5D |  if_ne	jmp	#LR__1831
16374     00 C0 1B FF 
16378     00 26 06 F6 | 	mov	local01, ##931135488
1637c     51 00 00 FF 
16380     E4 E5 05 F1 | 	add	objptr, ##41956
16384     F2 12 02 FB | 	rdlong	arg01, objptr
16388     51 00 00 FF 
1638c     E4 E5 85 F1 | 	sub	objptr, ##41956
16390     09 13 52 F6 | 	abs	arg01, arg01 wc
16394     1F 28 C6 C9 |  if_b	decod	local02, #31
16398     00 28 06 36 |  if_ae	mov	local02, #0
1639c     18 26 B1 FD | 	call	#__system___float_fromuns
163a0     14 FB 61 F5 | 	xor	result1, local02
163a4     FD 12 02 F6 | 	mov	arg01, result1
163a8     FF 7F 23 FF 
163ac     00 14 06 F6 | 	mov	arg02, ##1191181824
163b0     0C 2C B1 FD | 	call	#__system___float_div
163b4     FD 14 02 F6 | 	mov	arg02, result1
163b8     13 13 02 F6 | 	mov	arg01, local01
163bc     2C 26 B1 FD | 	call	#__system___float_add
163c0     10 4E 05 F1 | 	add	fp, #16
163c4     A7 FA 61 FC | 	wrlong	result1, fp
163c8                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
163c8     10 4E 85 F1 | 	sub	fp, #16
163cc     1F FA 05 F4 | 	bitl	result1, #31
163d0     FD 12 02 F6 | 	mov	arg01, result1
163d4     89 41 1D FF 
163d8     6F 14 06 F6 | 	mov	arg02, ##981668463
163dc     01 16 06 F6 | 	mov	arg03, #1
163e0     0C 2E B1 FD | 	call	#__system___float_cmp
163e4     00 FA 55 F2 | 	cmps	result1, #0 wc
163e8     10 4E 05 C1 |  if_b	add	fp, #16
163ec     A7 00 68 CC |  if_b	wrlong	#0, fp
163f0     10 4E 85 C1 |  if_b	sub	fp, #16
163f4     10 4E 05 F1 | 	add	fp, #16
163f8     A7 26 02 FB | 	rdlong	local01, fp
163fc     10 4E 85 F1 | 	sub	fp, #16
16400     A7 26 62 FC | 	wrlong	local01, fp
16404     08 4E 05 F1 | 	add	fp, #8
16408     A7 3C 68 FC | 	wrlong	#30, fp
1640c     08 4E 85 F1 | 	sub	fp, #8
16410     A7 12 02 F6 | 	mov	arg01, fp
16414     60 6F BF FD | 	call	#_push
16418                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16418     28 01 90 FD | 	jmp	#LR__1834
1641c                 | LR__1831
1641c     C0 6E BF FD | 	call	#_pop
16420     A7 FA 61 FC | 	wrlong	result1, fp
16424     04 4E 05 F1 | 	add	fp, #4
16428     A7 FC 61 FC | 	wrlong	result2, fp
1642c     04 4E 05 F1 | 	add	fp, #4
16430     A7 FE 61 FC | 	wrlong	result3, fp
16434                 | ' t1=pop()
16434                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16434     08 4E 85 F1 | 	sub	fp, #8
16438     1C FE 0D F2 | 	cmp	result3, #28 wz
1643c     08 4E 05 51 |  if_ne	add	fp, #8
16440     A7 26 02 5B |  if_ne	rdlong	local01, fp
16444     08 4E 85 51 |  if_ne	sub	fp, #8
16448     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1644c     E8 00 90 5D |  if_ne	jmp	#LR__1833
16450     A7 26 02 FB | 	rdlong	local01, fp
16454     52 00 00 FF 
16458     08 E5 05 F1 | 	add	objptr, ##42248
1645c     F2 26 62 FC | 	wrlong	local01, objptr
16460                 | '   q=t1.result.uresult
16460                 | '   if q<7 then 
16460     52 00 00 FF 
16464     08 E5 85 F1 | 	sub	objptr, ##42248
16468     07 26 56 F2 | 	cmps	local01, #7 wc
1646c     B8 00 90 3D |  if_ae	jmp	#LR__1832
16470     00 C0 1B FF 
16474     00 26 06 F6 | 	mov	local01, ##931135488
16478     52 00 00 FF 
1647c     08 E5 05 F1 | 	add	objptr, ##42248
16480     F2 16 02 FB | 	rdlong	arg03, objptr
16484     02 16 66 F0 | 	shl	arg03, #2
16488     24 E5 85 F1 | 	sub	objptr, #292
1648c     F2 16 02 F1 | 	add	arg03, objptr
16490     0B 13 02 FB | 	rdlong	arg01, arg03
16494     51 00 00 FF 
16498     E4 E5 85 F1 | 	sub	objptr, ##41956
1649c     09 13 52 F6 | 	abs	arg01, arg01 wc
164a0     1F 28 C6 C9 |  if_b	decod	local02, #31
164a4     00 28 06 36 |  if_ae	mov	local02, #0
164a8     0C 25 B1 FD | 	call	#__system___float_fromuns
164ac     14 FB 61 F5 | 	xor	result1, local02
164b0     FD 12 02 F6 | 	mov	arg01, result1
164b4     FF 7F 23 FF 
164b8     00 14 06 F6 | 	mov	arg02, ##1191181824
164bc     00 2B B1 FD | 	call	#__system___float_div
164c0     FD 14 02 F6 | 	mov	arg02, result1
164c4     13 13 02 F6 | 	mov	arg01, local01
164c8     20 25 B1 FD | 	call	#__system___float_add
164cc     10 4E 05 F1 | 	add	fp, #16
164d0     A7 FA 61 FC | 	wrlong	result1, fp
164d4                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
164d4     10 4E 85 F1 | 	sub	fp, #16
164d8     1F FA 05 F4 | 	bitl	result1, #31
164dc     FD 12 02 F6 | 	mov	arg01, result1
164e0     89 41 1D FF 
164e4     6F 14 06 F6 | 	mov	arg02, ##981668463
164e8     01 16 06 F6 | 	mov	arg03, #1
164ec     00 2D B1 FD | 	call	#__system___float_cmp
164f0     00 FA 55 F2 | 	cmps	result1, #0 wc
164f4     10 4E 05 C1 |  if_b	add	fp, #16
164f8     A7 00 68 CC |  if_b	wrlong	#0, fp
164fc     10 4E 85 C1 |  if_b	sub	fp, #16
16500     10 4E 05 F1 | 	add	fp, #16
16504     A7 26 02 FB | 	rdlong	local01, fp
16508     10 4E 85 F1 | 	sub	fp, #16
1650c     A7 26 62 FC | 	wrlong	local01, fp
16510     08 4E 05 F1 | 	add	fp, #8
16514     A7 3C 68 FC | 	wrlong	#30, fp
16518     08 4E 85 F1 | 	sub	fp, #8
1651c     A7 12 02 F6 | 	mov	arg01, fp
16520     54 6E BF FD | 	call	#_push
16524                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16524     1C 00 90 FD | 	jmp	#LR__1834
16528                 | LR__1832
16528     29 12 06 F6 | 	mov	arg01, #41
1652c     00 14 06 F6 | 	mov	arg02, #0
16530     1C C0 B0 FD | 	call	#_printerror
16534                 | '      printerror(41) : return
16534     0C 00 90 FD | 	jmp	#LR__1834
16538                 | LR__1833
16538     29 12 06 F6 | 	mov	arg01, #41
1653c     00 14 06 F6 | 	mov	arg02, #0
16540     0C C0 B0 FD | 	call	#_printerror
16544                 | LR__1834
16544     A7 F0 03 F6 | 	mov	ptra, fp
16548     B2 00 A0 FD | 	call	#popregs_
1654c                 | _do_padry_ret
1654c     2D 00 64 FD | 	ret
16550                 | 
16550                 | ' 
16550                 | ' ' ------------------ padrz
16550                 | ' 
16550                 | ' sub do_padrz
16550                 | _do_padrz
16550     02 4A 05 F6 | 	mov	COUNT_, #2
16554     A8 00 A0 FD | 	call	#pushregs_
16558     14 F0 07 F1 | 	add	ptra, #20
1655c     4A 00 00 FF 
16560     80 E4 05 F1 | 	add	objptr, ##38016
16564     F2 26 02 FB | 	rdlong	local01, objptr
16568     13 17 02 F6 | 	mov	arg03, local01
1656c     01 16 66 F0 | 	shl	arg03, #1
16570     13 17 02 F1 | 	add	arg03, local01
16574     02 16 66 F0 | 	shl	arg03, #2
16578     03 00 00 FF 
1657c     04 E4 85 F1 | 	sub	objptr, ##1540
16580     F2 16 02 F1 | 	add	arg03, objptr
16584     0B 17 02 FB | 	rdlong	arg03, arg03
16588     0C 4E 05 F1 | 	add	fp, #12
1658c     A7 16 62 FC | 	wrlong	arg03, fp
16590                 | ' 
16590                 | ' numpar=compiledline(lineptr_e).result.uresult
16590                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16590     0C 4E 85 F1 | 	sub	fp, #12
16594     02 16 16 F2 | 	cmp	arg03, #2 wc
16598     47 00 00 FF 
1659c     7C E4 85 F1 | 	sub	objptr, ##36476
165a0     40 00 90 CD |  if_b	jmp	#LR__1840
165a4     00 12 06 F6 | 	mov	arg01, #0
165a8     38 56 B1 FD | 	call	#__system___getiolock_0600
165ac     FD 12 02 F6 | 	mov	arg01, result1
165b0     8C F9 B0 FD | 	call	#__system___lockmem
165b4     B2 01 00 FF 
165b8     E5 14 06 F6 | 	mov	arg02, ##@LR__5904
165bc     00 12 06 F6 | 	mov	arg01, #0
165c0     00 16 06 F6 | 	mov	arg03, #0
165c4     70 06 B1 FD | 	call	#__system___basic_print_string
165c8     00 12 06 F6 | 	mov	arg01, #0
165cc     14 56 B1 FD | 	call	#__system___getiolock_0600
165d0     FD 00 68 FC | 	wrlong	#0, result1
165d4     27 12 06 F6 | 	mov	arg01, #39
165d8     00 14 06 F6 | 	mov	arg02, #0
165dc     70 BF B0 FD | 	call	#_printerror
165e0     E0 01 90 FD | 	jmp	#LR__1844
165e4                 | LR__1840
165e4                 | ' if numpar=0 then 
165e4     0C 4E 05 F1 | 	add	fp, #12
165e8     A7 FE 09 FB | 	rdlong	result3, fp wz
165ec     0C 4E 85 F1 | 	sub	fp, #12
165f0     A8 00 90 5D |  if_ne	jmp	#LR__1841
165f4     00 C0 1B FF 
165f8     00 26 06 F6 | 	mov	local01, ##931135488
165fc     52 00 00 FF 
16600     00 E4 05 F1 | 	add	objptr, ##41984
16604     F2 12 02 FB | 	rdlong	arg01, objptr
16608     52 00 00 FF 
1660c     00 E4 85 F1 | 	sub	objptr, ##41984
16610     09 13 52 F6 | 	abs	arg01, arg01 wc
16614     1F 28 C6 C9 |  if_b	decod	local02, #31
16618     00 28 06 36 |  if_ae	mov	local02, #0
1661c     98 23 B1 FD | 	call	#__system___float_fromuns
16620     14 FB 61 F5 | 	xor	result1, local02
16624     FD 12 02 F6 | 	mov	arg01, result1
16628     FF 7F 23 FF 
1662c     00 14 06 F6 | 	mov	arg02, ##1191181824
16630     8C 29 B1 FD | 	call	#__system___float_div
16634     FD 14 02 F6 | 	mov	arg02, result1
16638     13 13 02 F6 | 	mov	arg01, local01
1663c     AC 23 B1 FD | 	call	#__system___float_add
16640     10 4E 05 F1 | 	add	fp, #16
16644     A7 FA 61 FC | 	wrlong	result1, fp
16648                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16648     10 4E 85 F1 | 	sub	fp, #16
1664c     1F FA 05 F4 | 	bitl	result1, #31
16650     FD 12 02 F6 | 	mov	arg01, result1
16654     89 41 1D FF 
16658     6F 14 06 F6 | 	mov	arg02, ##981668463
1665c     01 16 06 F6 | 	mov	arg03, #1
16660     8C 2B B1 FD | 	call	#__system___float_cmp
16664     00 FA 55 F2 | 	cmps	result1, #0 wc
16668     10 4E 05 C1 |  if_b	add	fp, #16
1666c     A7 00 68 CC |  if_b	wrlong	#0, fp
16670     10 4E 85 C1 |  if_b	sub	fp, #16
16674     10 4E 05 F1 | 	add	fp, #16
16678     A7 26 02 FB | 	rdlong	local01, fp
1667c     10 4E 85 F1 | 	sub	fp, #16
16680     A7 26 62 FC | 	wrlong	local01, fp
16684     08 4E 05 F1 | 	add	fp, #8
16688     A7 3C 68 FC | 	wrlong	#30, fp
1668c     08 4E 85 F1 | 	sub	fp, #8
16690     A7 12 02 F6 | 	mov	arg01, fp
16694     E0 6C BF FD | 	call	#_push
16698                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16698     28 01 90 FD | 	jmp	#LR__1844
1669c                 | LR__1841
1669c     40 6C BF FD | 	call	#_pop
166a0     A7 FA 61 FC | 	wrlong	result1, fp
166a4     04 4E 05 F1 | 	add	fp, #4
166a8     A7 FC 61 FC | 	wrlong	result2, fp
166ac     04 4E 05 F1 | 	add	fp, #4
166b0     A7 FE 61 FC | 	wrlong	result3, fp
166b4                 | ' t1=pop()
166b4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
166b4     08 4E 85 F1 | 	sub	fp, #8
166b8     1C FE 0D F2 | 	cmp	result3, #28 wz
166bc     08 4E 05 51 |  if_ne	add	fp, #8
166c0     A7 26 02 5B |  if_ne	rdlong	local01, fp
166c4     08 4E 85 51 |  if_ne	sub	fp, #8
166c8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
166cc     E8 00 90 5D |  if_ne	jmp	#LR__1843
166d0     A7 26 02 FB | 	rdlong	local01, fp
166d4     52 00 00 FF 
166d8     08 E5 05 F1 | 	add	objptr, ##42248
166dc     F2 26 62 FC | 	wrlong	local01, objptr
166e0                 | '   q=t1.result.uresult
166e0                 | '   if q<7 then 
166e0     52 00 00 FF 
166e4     08 E5 85 F1 | 	sub	objptr, ##42248
166e8     07 26 56 F2 | 	cmps	local01, #7 wc
166ec     B8 00 90 3D |  if_ae	jmp	#LR__1842
166f0     00 C0 1B FF 
166f4     00 26 06 F6 | 	mov	local01, ##931135488
166f8     52 00 00 FF 
166fc     08 E5 05 F1 | 	add	objptr, ##42248
16700     F2 16 02 FB | 	rdlong	arg03, objptr
16704     02 16 66 F0 | 	shl	arg03, #2
16708     08 E5 85 F1 | 	sub	objptr, #264
1670c     F2 16 02 F1 | 	add	arg03, objptr
16710     0B 13 02 FB | 	rdlong	arg01, arg03
16714     52 00 00 FF 
16718     00 E4 85 F1 | 	sub	objptr, ##41984
1671c     09 13 52 F6 | 	abs	arg01, arg01 wc
16720     1F 28 C6 C9 |  if_b	decod	local02, #31
16724     00 28 06 36 |  if_ae	mov	local02, #0
16728     8C 22 B1 FD | 	call	#__system___float_fromuns
1672c     14 FB 61 F5 | 	xor	result1, local02
16730     FD 12 02 F6 | 	mov	arg01, result1
16734     FF 7F 23 FF 
16738     00 14 06 F6 | 	mov	arg02, ##1191181824
1673c     80 28 B1 FD | 	call	#__system___float_div
16740     FD 14 02 F6 | 	mov	arg02, result1
16744     13 13 02 F6 | 	mov	arg01, local01
16748     A0 22 B1 FD | 	call	#__system___float_add
1674c     10 4E 05 F1 | 	add	fp, #16
16750     A7 FA 61 FC | 	wrlong	result1, fp
16754                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16754     10 4E 85 F1 | 	sub	fp, #16
16758     1F FA 05 F4 | 	bitl	result1, #31
1675c     FD 12 02 F6 | 	mov	arg01, result1
16760     89 41 1D FF 
16764     6F 14 06 F6 | 	mov	arg02, ##981668463
16768     01 16 06 F6 | 	mov	arg03, #1
1676c     80 2A B1 FD | 	call	#__system___float_cmp
16770     00 FA 55 F2 | 	cmps	result1, #0 wc
16774     10 4E 05 C1 |  if_b	add	fp, #16
16778     A7 00 68 CC |  if_b	wrlong	#0, fp
1677c     10 4E 85 C1 |  if_b	sub	fp, #16
16780     10 4E 05 F1 | 	add	fp, #16
16784     A7 26 02 FB | 	rdlong	local01, fp
16788     10 4E 85 F1 | 	sub	fp, #16
1678c     A7 26 62 FC | 	wrlong	local01, fp
16790     08 4E 05 F1 | 	add	fp, #8
16794     A7 3C 68 FC | 	wrlong	#30, fp
16798     08 4E 85 F1 | 	sub	fp, #8
1679c     A7 12 02 F6 | 	mov	arg01, fp
167a0     D4 6B BF FD | 	call	#_push
167a4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
167a4     1C 00 90 FD | 	jmp	#LR__1844
167a8                 | LR__1842
167a8     29 12 06 F6 | 	mov	arg01, #41
167ac     00 14 06 F6 | 	mov	arg02, #0
167b0     9C BD B0 FD | 	call	#_printerror
167b4                 | '      printerror(41) : return
167b4     0C 00 90 FD | 	jmp	#LR__1844
167b8                 | LR__1843
167b8     29 12 06 F6 | 	mov	arg01, #41
167bc     00 14 06 F6 | 	mov	arg02, #0
167c0     8C BD B0 FD | 	call	#_printerror
167c4                 | LR__1844
167c4     A7 F0 03 F6 | 	mov	ptra, fp
167c8     B2 00 A0 FD | 	call	#popregs_
167cc                 | _do_padrz_ret
167cc     2D 00 64 FD | 	ret
167d0                 | 
167d0                 | ' ' ------------------ padx
167d0                 | ' 
167d0                 | ' sub do_padx
167d0                 | _do_padx
167d0     02 4A 05 F6 | 	mov	COUNT_, #2
167d4     A8 00 A0 FD | 	call	#pushregs_
167d8     14 F0 07 F1 | 	add	ptra, #20
167dc     4A 00 00 FF 
167e0     80 E4 05 F1 | 	add	objptr, ##38016
167e4     F2 26 02 FB | 	rdlong	local01, objptr
167e8     13 17 02 F6 | 	mov	arg03, local01
167ec     01 16 66 F0 | 	shl	arg03, #1
167f0     13 17 02 F1 | 	add	arg03, local01
167f4     02 16 66 F0 | 	shl	arg03, #2
167f8     03 00 00 FF 
167fc     04 E4 85 F1 | 	sub	objptr, ##1540
16800     F2 16 02 F1 | 	add	arg03, objptr
16804     0B 17 02 FB | 	rdlong	arg03, arg03
16808     0C 4E 05 F1 | 	add	fp, #12
1680c     A7 16 62 FC | 	wrlong	arg03, fp
16810                 | ' 
16810                 | ' numpar=compiledline(lineptr_e).result.uresult
16810                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
16810     0C 4E 85 F1 | 	sub	fp, #12
16814     02 16 16 F2 | 	cmp	arg03, #2 wc
16818     47 00 00 FF 
1681c     7C E4 85 F1 | 	sub	objptr, ##36476
16820     40 00 90 CD |  if_b	jmp	#LR__1850
16824     00 12 06 F6 | 	mov	arg01, #0
16828     B8 53 B1 FD | 	call	#__system___getiolock_0600
1682c     FD 12 02 F6 | 	mov	arg01, result1
16830     0C F7 B0 FD | 	call	#__system___lockmem
16834     B2 01 00 FF 
16838     ED 14 06 F6 | 	mov	arg02, ##@LR__5905
1683c     00 12 06 F6 | 	mov	arg01, #0
16840     00 16 06 F6 | 	mov	arg03, #0
16844     F0 03 B1 FD | 	call	#__system___basic_print_string
16848     00 12 06 F6 | 	mov	arg01, #0
1684c     94 53 B1 FD | 	call	#__system___getiolock_0600
16850     FD 00 68 FC | 	wrlong	#0, result1
16854     27 12 06 F6 | 	mov	arg01, #39
16858     00 14 06 F6 | 	mov	arg02, #0
1685c     F0 BC B0 FD | 	call	#_printerror
16860     E0 01 90 FD | 	jmp	#LR__1854
16864                 | LR__1850
16864                 | ' if numpar=0 then 
16864     0C 4E 05 F1 | 	add	fp, #12
16868     A7 FE 09 FB | 	rdlong	result3, fp wz
1686c     0C 4E 85 F1 | 	sub	fp, #12
16870     A8 00 90 5D |  if_ne	jmp	#LR__1851
16874     00 C0 1B FF 
16878     00 26 06 F6 | 	mov	local01, ##931135488
1687c     51 00 00 FF 
16880     58 E5 05 F1 | 	add	objptr, ##41816
16884     F2 12 02 FB | 	rdlong	arg01, objptr
16888     51 00 00 FF 
1688c     58 E5 85 F1 | 	sub	objptr, ##41816
16890     09 13 52 F6 | 	abs	arg01, arg01 wc
16894     1F 28 C6 C9 |  if_b	decod	local02, #31
16898     00 28 06 36 |  if_ae	mov	local02, #0
1689c     18 21 B1 FD | 	call	#__system___float_fromuns
168a0     14 FB 61 F5 | 	xor	result1, local02
168a4     FD 12 02 F6 | 	mov	arg01, result1
168a8     FF 7F 23 FF 
168ac     00 14 06 F6 | 	mov	arg02, ##1191181824
168b0     0C 27 B1 FD | 	call	#__system___float_div
168b4     FD 14 02 F6 | 	mov	arg02, result1
168b8     13 13 02 F6 | 	mov	arg01, local01
168bc     2C 21 B1 FD | 	call	#__system___float_add
168c0     10 4E 05 F1 | 	add	fp, #16
168c4     A7 FA 61 FC | 	wrlong	result1, fp
168c8                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
168c8     10 4E 85 F1 | 	sub	fp, #16
168cc     1F FA 05 F4 | 	bitl	result1, #31
168d0     FD 12 02 F6 | 	mov	arg01, result1
168d4     89 41 1D FF 
168d8     6F 14 06 F6 | 	mov	arg02, ##981668463
168dc     01 16 06 F6 | 	mov	arg03, #1
168e0     0C 29 B1 FD | 	call	#__system___float_cmp
168e4     00 FA 55 F2 | 	cmps	result1, #0 wc
168e8     10 4E 05 C1 |  if_b	add	fp, #16
168ec     A7 00 68 CC |  if_b	wrlong	#0, fp
168f0     10 4E 85 C1 |  if_b	sub	fp, #16
168f4     10 4E 05 F1 | 	add	fp, #16
168f8     A7 26 02 FB | 	rdlong	local01, fp
168fc     10 4E 85 F1 | 	sub	fp, #16
16900     A7 26 62 FC | 	wrlong	local01, fp
16904     08 4E 05 F1 | 	add	fp, #8
16908     A7 3C 68 FC | 	wrlong	#30, fp
1690c     08 4E 85 F1 | 	sub	fp, #8
16910     A7 12 02 F6 | 	mov	arg01, fp
16914     60 6A BF FD | 	call	#_push
16918                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16918     28 01 90 FD | 	jmp	#LR__1854
1691c                 | LR__1851
1691c     C0 69 BF FD | 	call	#_pop
16920     A7 FA 61 FC | 	wrlong	result1, fp
16924     04 4E 05 F1 | 	add	fp, #4
16928     A7 FC 61 FC | 	wrlong	result2, fp
1692c     04 4E 05 F1 | 	add	fp, #4
16930     A7 FE 61 FC | 	wrlong	result3, fp
16934                 | ' t1=pop()
16934                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16934     08 4E 85 F1 | 	sub	fp, #8
16938     1C FE 0D F2 | 	cmp	result3, #28 wz
1693c     08 4E 05 51 |  if_ne	add	fp, #8
16940     A7 26 02 5B |  if_ne	rdlong	local01, fp
16944     08 4E 85 51 |  if_ne	sub	fp, #8
16948     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1694c     E8 00 90 5D |  if_ne	jmp	#LR__1853
16950     A7 26 02 FB | 	rdlong	local01, fp
16954     52 00 00 FF 
16958     08 E5 05 F1 | 	add	objptr, ##42248
1695c     F2 26 62 FC | 	wrlong	local01, objptr
16960                 | '   q=t1.result.uresult
16960                 | '   if q<7 then 
16960     52 00 00 FF 
16964     08 E5 85 F1 | 	sub	objptr, ##42248
16968     07 26 56 F2 | 	cmps	local01, #7 wc
1696c     B8 00 90 3D |  if_ae	jmp	#LR__1852
16970     00 C0 1B FF 
16974     00 26 06 F6 | 	mov	local01, ##931135488
16978     52 00 00 FF 
1697c     08 E5 05 F1 | 	add	objptr, ##42248
16980     F2 16 02 FB | 	rdlong	arg03, objptr
16984     02 16 66 F0 | 	shl	arg03, #2
16988     B0 E5 85 F1 | 	sub	objptr, #432
1698c     F2 16 02 F1 | 	add	arg03, objptr
16990     0B 13 02 FB | 	rdlong	arg01, arg03
16994     51 00 00 FF 
16998     58 E5 85 F1 | 	sub	objptr, ##41816
1699c     09 13 52 F6 | 	abs	arg01, arg01 wc
169a0     1F 28 C6 C9 |  if_b	decod	local02, #31
169a4     00 28 06 36 |  if_ae	mov	local02, #0
169a8     0C 20 B1 FD | 	call	#__system___float_fromuns
169ac     14 FB 61 F5 | 	xor	result1, local02
169b0     FD 12 02 F6 | 	mov	arg01, result1
169b4     FF 7F 23 FF 
169b8     00 14 06 F6 | 	mov	arg02, ##1191181824
169bc     00 26 B1 FD | 	call	#__system___float_div
169c0     FD 14 02 F6 | 	mov	arg02, result1
169c4     13 13 02 F6 | 	mov	arg01, local01
169c8     20 20 B1 FD | 	call	#__system___float_add
169cc     10 4E 05 F1 | 	add	fp, #16
169d0     A7 FA 61 FC | 	wrlong	result1, fp
169d4                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
169d4     10 4E 85 F1 | 	sub	fp, #16
169d8     1F FA 05 F4 | 	bitl	result1, #31
169dc     FD 12 02 F6 | 	mov	arg01, result1
169e0     89 41 1D FF 
169e4     6F 14 06 F6 | 	mov	arg02, ##981668463
169e8     01 16 06 F6 | 	mov	arg03, #1
169ec     00 28 B1 FD | 	call	#__system___float_cmp
169f0     00 FA 55 F2 | 	cmps	result1, #0 wc
169f4     10 4E 05 C1 |  if_b	add	fp, #16
169f8     A7 00 68 CC |  if_b	wrlong	#0, fp
169fc     10 4E 85 C1 |  if_b	sub	fp, #16
16a00     10 4E 05 F1 | 	add	fp, #16
16a04     A7 26 02 FB | 	rdlong	local01, fp
16a08     10 4E 85 F1 | 	sub	fp, #16
16a0c     A7 26 62 FC | 	wrlong	local01, fp
16a10     08 4E 05 F1 | 	add	fp, #8
16a14     A7 3C 68 FC | 	wrlong	#30, fp
16a18     08 4E 85 F1 | 	sub	fp, #8
16a1c     A7 12 02 F6 | 	mov	arg01, fp
16a20     54 69 BF FD | 	call	#_push
16a24                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16a24     1C 00 90 FD | 	jmp	#LR__1854
16a28                 | LR__1852
16a28     29 12 06 F6 | 	mov	arg01, #41
16a2c     00 14 06 F6 | 	mov	arg02, #0
16a30     1C BB B0 FD | 	call	#_printerror
16a34                 | '      printerror(41) : return
16a34     0C 00 90 FD | 	jmp	#LR__1854
16a38                 | LR__1853
16a38     29 12 06 F6 | 	mov	arg01, #41
16a3c     00 14 06 F6 | 	mov	arg02, #0
16a40     0C BB B0 FD | 	call	#_printerror
16a44                 | LR__1854
16a44     A7 F0 03 F6 | 	mov	ptra, fp
16a48     B2 00 A0 FD | 	call	#popregs_
16a4c                 | _do_padx_ret
16a4c     2D 00 64 FD | 	ret
16a50                 | 
16a50                 | ' 
16a50                 | ' ' ------------------ pady
16a50                 | ' 
16a50                 | ' sub do_pady
16a50                 | _do_pady
16a50     02 4A 05 F6 | 	mov	COUNT_, #2
16a54     A8 00 A0 FD | 	call	#pushregs_
16a58     14 F0 07 F1 | 	add	ptra, #20
16a5c     4A 00 00 FF 
16a60     80 E4 05 F1 | 	add	objptr, ##38016
16a64     F2 26 02 FB | 	rdlong	local01, objptr
16a68     13 17 02 F6 | 	mov	arg03, local01
16a6c     01 16 66 F0 | 	shl	arg03, #1
16a70     13 17 02 F1 | 	add	arg03, local01
16a74     02 16 66 F0 | 	shl	arg03, #2
16a78     03 00 00 FF 
16a7c     04 E4 85 F1 | 	sub	objptr, ##1540
16a80     F2 16 02 F1 | 	add	arg03, objptr
16a84     0B 17 02 FB | 	rdlong	arg03, arg03
16a88     0C 4E 05 F1 | 	add	fp, #12
16a8c     A7 16 62 FC | 	wrlong	arg03, fp
16a90                 | ' 
16a90                 | ' numpar=compiledline(lineptr_e).result.uresult
16a90                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
16a90     0C 4E 85 F1 | 	sub	fp, #12
16a94     02 16 16 F2 | 	cmp	arg03, #2 wc
16a98     47 00 00 FF 
16a9c     7C E4 85 F1 | 	sub	objptr, ##36476
16aa0     40 00 90 CD |  if_b	jmp	#LR__1860
16aa4     00 12 06 F6 | 	mov	arg01, #0
16aa8     38 51 B1 FD | 	call	#__system___getiolock_0600
16aac     FD 12 02 F6 | 	mov	arg01, result1
16ab0     8C F4 B0 FD | 	call	#__system___lockmem
16ab4     B2 01 00 FF 
16ab8     F4 14 06 F6 | 	mov	arg02, ##@LR__5906
16abc     00 12 06 F6 | 	mov	arg01, #0
16ac0     00 16 06 F6 | 	mov	arg03, #0
16ac4     70 01 B1 FD | 	call	#__system___basic_print_string
16ac8     00 12 06 F6 | 	mov	arg01, #0
16acc     14 51 B1 FD | 	call	#__system___getiolock_0600
16ad0     FD 00 68 FC | 	wrlong	#0, result1
16ad4     27 12 06 F6 | 	mov	arg01, #39
16ad8     00 14 06 F6 | 	mov	arg02, #0
16adc     70 BA B0 FD | 	call	#_printerror
16ae0     E0 01 90 FD | 	jmp	#LR__1864
16ae4                 | LR__1860
16ae4                 | ' if numpar=0 then 
16ae4     0C 4E 05 F1 | 	add	fp, #12
16ae8     A7 FE 09 FB | 	rdlong	result3, fp wz
16aec     0C 4E 85 F1 | 	sub	fp, #12
16af0     A8 00 90 5D |  if_ne	jmp	#LR__1861
16af4     00 C0 1B FF 
16af8     00 26 06 F6 | 	mov	local01, ##931135488
16afc     51 00 00 FF 
16b00     74 E5 05 F1 | 	add	objptr, ##41844
16b04     F2 12 02 FB | 	rdlong	arg01, objptr
16b08     51 00 00 FF 
16b0c     74 E5 85 F1 | 	sub	objptr, ##41844
16b10     09 13 52 F6 | 	abs	arg01, arg01 wc
16b14     1F 28 C6 C9 |  if_b	decod	local02, #31
16b18     00 28 06 36 |  if_ae	mov	local02, #0
16b1c     98 1E B1 FD | 	call	#__system___float_fromuns
16b20     14 FB 61 F5 | 	xor	result1, local02
16b24     FD 12 02 F6 | 	mov	arg01, result1
16b28     FF 7F 23 FF 
16b2c     00 14 06 F6 | 	mov	arg02, ##1191181824
16b30     8C 24 B1 FD | 	call	#__system___float_div
16b34     FD 14 02 F6 | 	mov	arg02, result1
16b38     13 13 02 F6 | 	mov	arg01, local01
16b3c     AC 1E B1 FD | 	call	#__system___float_add
16b40     10 4E 05 F1 | 	add	fp, #16
16b44     A7 FA 61 FC | 	wrlong	result1, fp
16b48                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b48     10 4E 85 F1 | 	sub	fp, #16
16b4c     1F FA 05 F4 | 	bitl	result1, #31
16b50     FD 12 02 F6 | 	mov	arg01, result1
16b54     89 41 1D FF 
16b58     6F 14 06 F6 | 	mov	arg02, ##981668463
16b5c     01 16 06 F6 | 	mov	arg03, #1
16b60     8C 26 B1 FD | 	call	#__system___float_cmp
16b64     00 FA 55 F2 | 	cmps	result1, #0 wc
16b68     10 4E 05 C1 |  if_b	add	fp, #16
16b6c     A7 00 68 CC |  if_b	wrlong	#0, fp
16b70     10 4E 85 C1 |  if_b	sub	fp, #16
16b74     10 4E 05 F1 | 	add	fp, #16
16b78     A7 26 02 FB | 	rdlong	local01, fp
16b7c     10 4E 85 F1 | 	sub	fp, #16
16b80     A7 26 62 FC | 	wrlong	local01, fp
16b84     08 4E 05 F1 | 	add	fp, #8
16b88     A7 3C 68 FC | 	wrlong	#30, fp
16b8c     08 4E 85 F1 | 	sub	fp, #8
16b90     A7 12 02 F6 | 	mov	arg01, fp
16b94     E0 67 BF FD | 	call	#_push
16b98                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16b98     28 01 90 FD | 	jmp	#LR__1864
16b9c                 | LR__1861
16b9c     40 67 BF FD | 	call	#_pop
16ba0     A7 FA 61 FC | 	wrlong	result1, fp
16ba4     04 4E 05 F1 | 	add	fp, #4
16ba8     A7 FC 61 FC | 	wrlong	result2, fp
16bac     04 4E 05 F1 | 	add	fp, #4
16bb0     A7 FE 61 FC | 	wrlong	result3, fp
16bb4                 | ' t1=pop()
16bb4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16bb4     08 4E 85 F1 | 	sub	fp, #8
16bb8     1C FE 0D F2 | 	cmp	result3, #28 wz
16bbc     08 4E 05 51 |  if_ne	add	fp, #8
16bc0     A7 26 02 5B |  if_ne	rdlong	local01, fp
16bc4     08 4E 85 51 |  if_ne	sub	fp, #8
16bc8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16bcc     E8 00 90 5D |  if_ne	jmp	#LR__1863
16bd0     A7 26 02 FB | 	rdlong	local01, fp
16bd4     52 00 00 FF 
16bd8     08 E5 05 F1 | 	add	objptr, ##42248
16bdc     F2 26 62 FC | 	wrlong	local01, objptr
16be0                 | '   q=t1.result.uresult
16be0                 | '   if q<7 then 
16be0     52 00 00 FF 
16be4     08 E5 85 F1 | 	sub	objptr, ##42248
16be8     07 26 56 F2 | 	cmps	local01, #7 wc
16bec     B8 00 90 3D |  if_ae	jmp	#LR__1862
16bf0     00 C0 1B FF 
16bf4     00 26 06 F6 | 	mov	local01, ##931135488
16bf8     52 00 00 FF 
16bfc     08 E5 05 F1 | 	add	objptr, ##42248
16c00     F2 16 02 FB | 	rdlong	arg03, objptr
16c04     02 16 66 F0 | 	shl	arg03, #2
16c08     94 E5 85 F1 | 	sub	objptr, #404
16c0c     F2 16 02 F1 | 	add	arg03, objptr
16c10     0B 13 02 FB | 	rdlong	arg01, arg03
16c14     51 00 00 FF 
16c18     74 E5 85 F1 | 	sub	objptr, ##41844
16c1c     09 13 52 F6 | 	abs	arg01, arg01 wc
16c20     1F 28 C6 C9 |  if_b	decod	local02, #31
16c24     00 28 06 36 |  if_ae	mov	local02, #0
16c28     8C 1D B1 FD | 	call	#__system___float_fromuns
16c2c     14 FB 61 F5 | 	xor	result1, local02
16c30     FD 12 02 F6 | 	mov	arg01, result1
16c34     FF 7F 23 FF 
16c38     00 14 06 F6 | 	mov	arg02, ##1191181824
16c3c     80 23 B1 FD | 	call	#__system___float_div
16c40     FD 14 02 F6 | 	mov	arg02, result1
16c44     13 13 02 F6 | 	mov	arg01, local01
16c48     A0 1D B1 FD | 	call	#__system___float_add
16c4c     10 4E 05 F1 | 	add	fp, #16
16c50     A7 FA 61 FC | 	wrlong	result1, fp
16c54                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16c54     10 4E 85 F1 | 	sub	fp, #16
16c58     1F FA 05 F4 | 	bitl	result1, #31
16c5c     FD 12 02 F6 | 	mov	arg01, result1
16c60     89 41 1D FF 
16c64     6F 14 06 F6 | 	mov	arg02, ##981668463
16c68     01 16 06 F6 | 	mov	arg03, #1
16c6c     80 25 B1 FD | 	call	#__system___float_cmp
16c70     00 FA 55 F2 | 	cmps	result1, #0 wc
16c74     10 4E 05 C1 |  if_b	add	fp, #16
16c78     A7 00 68 CC |  if_b	wrlong	#0, fp
16c7c     10 4E 85 C1 |  if_b	sub	fp, #16
16c80     10 4E 05 F1 | 	add	fp, #16
16c84     A7 26 02 FB | 	rdlong	local01, fp
16c88     10 4E 85 F1 | 	sub	fp, #16
16c8c     A7 26 62 FC | 	wrlong	local01, fp
16c90     08 4E 05 F1 | 	add	fp, #8
16c94     A7 3C 68 FC | 	wrlong	#30, fp
16c98     08 4E 85 F1 | 	sub	fp, #8
16c9c     A7 12 02 F6 | 	mov	arg01, fp
16ca0     D4 66 BF FD | 	call	#_push
16ca4                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16ca4     1C 00 90 FD | 	jmp	#LR__1864
16ca8                 | LR__1862
16ca8     29 12 06 F6 | 	mov	arg01, #41
16cac     00 14 06 F6 | 	mov	arg02, #0
16cb0     9C B8 B0 FD | 	call	#_printerror
16cb4                 | '      printerror(41) : return
16cb4     0C 00 90 FD | 	jmp	#LR__1864
16cb8                 | LR__1863
16cb8     29 12 06 F6 | 	mov	arg01, #41
16cbc     00 14 06 F6 | 	mov	arg02, #0
16cc0     8C B8 B0 FD | 	call	#_printerror
16cc4                 | LR__1864
16cc4     A7 F0 03 F6 | 	mov	ptra, fp
16cc8     B2 00 A0 FD | 	call	#popregs_
16ccc                 | _do_pady_ret
16ccc     2D 00 64 FD | 	ret
16cd0                 | 
16cd0                 | ' 
16cd0                 | ' ' ------------------ padz
16cd0                 | ' 
16cd0                 | ' sub do_padz
16cd0                 | _do_padz
16cd0     02 4A 05 F6 | 	mov	COUNT_, #2
16cd4     A8 00 A0 FD | 	call	#pushregs_
16cd8     14 F0 07 F1 | 	add	ptra, #20
16cdc     4A 00 00 FF 
16ce0     80 E4 05 F1 | 	add	objptr, ##38016
16ce4     F2 26 02 FB | 	rdlong	local01, objptr
16ce8     13 17 02 F6 | 	mov	arg03, local01
16cec     01 16 66 F0 | 	shl	arg03, #1
16cf0     13 17 02 F1 | 	add	arg03, local01
16cf4     02 16 66 F0 | 	shl	arg03, #2
16cf8     03 00 00 FF 
16cfc     04 E4 85 F1 | 	sub	objptr, ##1540
16d00     F2 16 02 F1 | 	add	arg03, objptr
16d04     0B 17 02 FB | 	rdlong	arg03, arg03
16d08     0C 4E 05 F1 | 	add	fp, #12
16d0c     A7 16 62 FC | 	wrlong	arg03, fp
16d10                 | ' 
16d10                 | ' numpar=compiledline(lineptr_e).result.uresult
16d10                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
16d10     0C 4E 85 F1 | 	sub	fp, #12
16d14     02 16 16 F2 | 	cmp	arg03, #2 wc
16d18     47 00 00 FF 
16d1c     7C E4 85 F1 | 	sub	objptr, ##36476
16d20     40 00 90 CD |  if_b	jmp	#LR__1870
16d24     00 12 06 F6 | 	mov	arg01, #0
16d28     B8 4E B1 FD | 	call	#__system___getiolock_0600
16d2c     FD 12 02 F6 | 	mov	arg01, result1
16d30     0C F2 B0 FD | 	call	#__system___lockmem
16d34     B2 01 00 FF 
16d38     FB 14 06 F6 | 	mov	arg02, ##@LR__5907
16d3c     00 12 06 F6 | 	mov	arg01, #0
16d40     00 16 06 F6 | 	mov	arg03, #0
16d44     F0 FE B0 FD | 	call	#__system___basic_print_string
16d48     00 12 06 F6 | 	mov	arg01, #0
16d4c     94 4E B1 FD | 	call	#__system___getiolock_0600
16d50     FD 00 68 FC | 	wrlong	#0, result1
16d54     27 12 06 F6 | 	mov	arg01, #39
16d58     00 14 06 F6 | 	mov	arg02, #0
16d5c     F0 B7 B0 FD | 	call	#_printerror
16d60     E0 01 90 FD | 	jmp	#LR__1874
16d64                 | LR__1870
16d64                 | ' if numpar=0 then 
16d64     0C 4E 05 F1 | 	add	fp, #12
16d68     A7 FE 09 FB | 	rdlong	result3, fp wz
16d6c     0C 4E 85 F1 | 	sub	fp, #12
16d70     A8 00 90 5D |  if_ne	jmp	#LR__1871
16d74     00 C0 1B FF 
16d78     00 26 06 F6 | 	mov	local01, ##931135488
16d7c     51 00 00 FF 
16d80     90 E5 05 F1 | 	add	objptr, ##41872
16d84     F2 12 02 FB | 	rdlong	arg01, objptr
16d88     51 00 00 FF 
16d8c     90 E5 85 F1 | 	sub	objptr, ##41872
16d90     09 13 52 F6 | 	abs	arg01, arg01 wc
16d94     1F 28 C6 C9 |  if_b	decod	local02, #31
16d98     00 28 06 36 |  if_ae	mov	local02, #0
16d9c     18 1C B1 FD | 	call	#__system___float_fromuns
16da0     14 FB 61 F5 | 	xor	result1, local02
16da4     FD 12 02 F6 | 	mov	arg01, result1
16da8     FF 7F 23 FF 
16dac     00 14 06 F6 | 	mov	arg02, ##1191181824
16db0     0C 22 B1 FD | 	call	#__system___float_div
16db4     FD 14 02 F6 | 	mov	arg02, result1
16db8     13 13 02 F6 | 	mov	arg01, local01
16dbc     2C 1C B1 FD | 	call	#__system___float_add
16dc0     10 4E 05 F1 | 	add	fp, #16
16dc4     A7 FA 61 FC | 	wrlong	result1, fp
16dc8                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16dc8     10 4E 85 F1 | 	sub	fp, #16
16dcc     1F FA 05 F4 | 	bitl	result1, #31
16dd0     FD 12 02 F6 | 	mov	arg01, result1
16dd4     89 41 1D FF 
16dd8     6F 14 06 F6 | 	mov	arg02, ##981668463
16ddc     01 16 06 F6 | 	mov	arg03, #1
16de0     0C 24 B1 FD | 	call	#__system___float_cmp
16de4     00 FA 55 F2 | 	cmps	result1, #0 wc
16de8     10 4E 05 C1 |  if_b	add	fp, #16
16dec     A7 00 68 CC |  if_b	wrlong	#0, fp
16df0     10 4E 85 C1 |  if_b	sub	fp, #16
16df4     10 4E 05 F1 | 	add	fp, #16
16df8     A7 26 02 FB | 	rdlong	local01, fp
16dfc     10 4E 85 F1 | 	sub	fp, #16
16e00     A7 26 62 FC | 	wrlong	local01, fp
16e04     08 4E 05 F1 | 	add	fp, #8
16e08     A7 3C 68 FC | 	wrlong	#30, fp
16e0c     08 4E 85 F1 | 	sub	fp, #8
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     60 65 BF FD | 	call	#_push
16e18                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16e18     28 01 90 FD | 	jmp	#LR__1874
16e1c                 | LR__1871
16e1c     C0 64 BF FD | 	call	#_pop
16e20     A7 FA 61 FC | 	wrlong	result1, fp
16e24     04 4E 05 F1 | 	add	fp, #4
16e28     A7 FC 61 FC | 	wrlong	result2, fp
16e2c     04 4E 05 F1 | 	add	fp, #4
16e30     A7 FE 61 FC | 	wrlong	result3, fp
16e34                 | ' t1=pop()
16e34                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16e34     08 4E 85 F1 | 	sub	fp, #8
16e38     1C FE 0D F2 | 	cmp	result3, #28 wz
16e3c     08 4E 05 51 |  if_ne	add	fp, #8
16e40     A7 26 02 5B |  if_ne	rdlong	local01, fp
16e44     08 4E 85 51 |  if_ne	sub	fp, #8
16e48     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16e4c     E8 00 90 5D |  if_ne	jmp	#LR__1873
16e50     A7 26 02 FB | 	rdlong	local01, fp
16e54     52 00 00 FF 
16e58     08 E5 05 F1 | 	add	objptr, ##42248
16e5c     F2 26 62 FC | 	wrlong	local01, objptr
16e60                 | '   q=t1.result.uresult
16e60                 | '   if q<7 then 
16e60     52 00 00 FF 
16e64     08 E5 85 F1 | 	sub	objptr, ##42248
16e68     07 26 56 F2 | 	cmps	local01, #7 wc
16e6c     B8 00 90 3D |  if_ae	jmp	#LR__1872
16e70     00 C0 1B FF 
16e74     00 26 06 F6 | 	mov	local01, ##931135488
16e78     52 00 00 FF 
16e7c     08 E5 05 F1 | 	add	objptr, ##42248
16e80     F2 16 02 FB | 	rdlong	arg03, objptr
16e84     02 16 66 F0 | 	shl	arg03, #2
16e88     78 E5 85 F1 | 	sub	objptr, #376
16e8c     F2 16 02 F1 | 	add	arg03, objptr
16e90     0B 13 02 FB | 	rdlong	arg01, arg03
16e94     51 00 00 FF 
16e98     90 E5 85 F1 | 	sub	objptr, ##41872
16e9c     09 13 52 F6 | 	abs	arg01, arg01 wc
16ea0     1F 28 C6 C9 |  if_b	decod	local02, #31
16ea4     00 28 06 36 |  if_ae	mov	local02, #0
16ea8     0C 1B B1 FD | 	call	#__system___float_fromuns
16eac     14 FB 61 F5 | 	xor	result1, local02
16eb0     FD 12 02 F6 | 	mov	arg01, result1
16eb4     FF 7F 23 FF 
16eb8     00 14 06 F6 | 	mov	arg02, ##1191181824
16ebc     00 21 B1 FD | 	call	#__system___float_div
16ec0     FD 14 02 F6 | 	mov	arg02, result1
16ec4     13 13 02 F6 | 	mov	arg01, local01
16ec8     20 1B B1 FD | 	call	#__system___float_add
16ecc     10 4E 05 F1 | 	add	fp, #16
16ed0     A7 FA 61 FC | 	wrlong	result1, fp
16ed4                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ed4     10 4E 85 F1 | 	sub	fp, #16
16ed8     1F FA 05 F4 | 	bitl	result1, #31
16edc     FD 12 02 F6 | 	mov	arg01, result1
16ee0     89 41 1D FF 
16ee4     6F 14 06 F6 | 	mov	arg02, ##981668463
16ee8     01 16 06 F6 | 	mov	arg03, #1
16eec     00 23 B1 FD | 	call	#__system___float_cmp
16ef0     00 FA 55 F2 | 	cmps	result1, #0 wc
16ef4     10 4E 05 C1 |  if_b	add	fp, #16
16ef8     A7 00 68 CC |  if_b	wrlong	#0, fp
16efc     10 4E 85 C1 |  if_b	sub	fp, #16
16f00     10 4E 05 F1 | 	add	fp, #16
16f04     A7 26 02 FB | 	rdlong	local01, fp
16f08     10 4E 85 F1 | 	sub	fp, #16
16f0c     A7 26 62 FC | 	wrlong	local01, fp
16f10     08 4E 05 F1 | 	add	fp, #8
16f14     A7 3C 68 FC | 	wrlong	#30, fp
16f18     08 4E 85 F1 | 	sub	fp, #8
16f1c     A7 12 02 F6 | 	mov	arg01, fp
16f20     54 64 BF FD | 	call	#_push
16f24                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16f24     1C 00 90 FD | 	jmp	#LR__1874
16f28                 | LR__1872
16f28     29 12 06 F6 | 	mov	arg01, #41
16f2c     00 14 06 F6 | 	mov	arg02, #0
16f30     1C B6 B0 FD | 	call	#_printerror
16f34                 | '      printerror(41) : return
16f34     0C 00 90 FD | 	jmp	#LR__1874
16f38                 | LR__1873
16f38     29 12 06 F6 | 	mov	arg01, #41
16f3c     00 14 06 F6 | 	mov	arg02, #0
16f40     0C B6 B0 FD | 	call	#_printerror
16f44                 | LR__1874
16f44     A7 F0 03 F6 | 	mov	ptra, fp
16f48     B2 00 A0 FD | 	call	#popregs_
16f4c                 | _do_padz_ret
16f4c     2D 00 64 FD | 	ret
16f50                 | 
16f50                 | ' 
16f50                 | ' '-------------------- paper
16f50                 | ' 
16f50                 | ' sub do_paper
16f50                 | _do_paper
16f50     03 4A 05 F6 | 	mov	COUNT_, #3
16f54     A8 00 A0 FD | 	call	#pushregs_
16f58     84 63 BF FD | 	call	#_pop
16f5c     FD 26 02 F6 | 	mov	local01, result1
16f60     FE 28 02 F6 | 	mov	local02, result2
16f64     FF 2A 02 F6 | 	mov	local03, result3
16f68                 | ' t1=pop() 
16f68                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
16f68     1E 2A 0E F2 | 	cmp	local03, #30 wz
16f6c     10 00 90 5D |  if_ne	jmp	#LR__1880
16f70     13 13 02 F6 | 	mov	arg01, local01
16f74     00 14 06 F6 | 	mov	arg02, #0
16f78     08 23 B1 FD | 	call	#__system___float_tointeger
16f7c     FD 26 02 F6 | 	mov	local01, result1
16f80                 | LR__1880
16f80                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
16f80     1F 2A 0E F2 | 	cmp	local03, #31 wz
16f84     18 00 90 5D |  if_ne	jmp	#LR__1881
16f88     13 13 02 F6 | 	mov	arg01, local01
16f8c     38 26 B1 FD | 	call	#__system____builtin_atof
16f90     FD 12 02 F6 | 	mov	arg01, result1
16f94     00 14 06 F6 | 	mov	arg02, #0
16f98     E8 22 B1 FD | 	call	#__system___float_tointeger
16f9c     FD 26 02 F6 | 	mov	local01, result1
16fa0                 | LR__1881
16fa0     37 00 00 FF 
16fa4     38 E4 05 F1 | 	add	objptr, ##28216
16fa8     F2 26 62 FC | 	wrlong	local01, objptr
16fac     04 E4 05 F1 | 	add	objptr, #4
16fb0     F2 12 02 FB | 	rdlong	arg01, objptr
16fb4                 | ' 
16fb4                 | ' write_color:=ff
16fb4     36 00 00 FF 
16fb8     FB E5 85 F1 | 	sub	objptr, ##28155
16fbc     F2 12 62 FC | 	wrlong	arg01, objptr
16fc0                 | ' write_background:=bb
16fc0     04 E4 05 F1 | 	add	objptr, #4
16fc4     F2 26 62 FC | 	wrlong	local01, objptr
16fc8     45 E4 85 F1 | 	sub	objptr, #69
16fcc     A7 F0 03 F6 | 	mov	ptra, fp
16fd0     B2 00 A0 FD | 	call	#popregs_
16fd4                 | _do_paper_ret
16fd4     2D 00 64 FD | 	ret
16fd8                 | 
16fd8                 | ' 
16fd8                 | ' '-------------------- peek
16fd8                 | ' 
16fd8                 | ' sub do_peek
16fd8                 | _do_peek
16fd8     00 4A 05 F6 | 	mov	COUNT_, #0
16fdc     A8 00 A0 FD | 	call	#pushregs_
16fe0     14 F0 07 F1 | 	add	ptra, #20
16fe4     F8 62 BF FD | 	call	#_pop
16fe8     A7 FA 61 FC | 	wrlong	result1, fp
16fec     04 4E 05 F1 | 	add	fp, #4
16ff0     A7 FC 61 FC | 	wrlong	result2, fp
16ff4     04 4E 05 F1 | 	add	fp, #4
16ff8     A7 FE 61 FC | 	wrlong	result3, fp
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     A7 12 02 F6 | 	mov	arg01, fp
17004     BC 64 BF FD | 	call	#_converttoint
17008     0C 4E 05 F1 | 	add	fp, #12
1700c     A7 FA 61 FC | 	wrlong	result1, fp
17010                 | ' 
17010                 | ' t1=pop()
17010                 | ' a=converttoint(t1)
17010                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17010     0C 4E 85 F1 | 	sub	fp, #12
17014     00 04 00 FF 
17018     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1701c     1C 00 90 3D |  if_ae	jmp	#LR__1890
17020     0C 4E 05 F1 | 	add	fp, #12
17024     A7 12 02 FB | 	rdlong	arg01, fp
17028     09 FB C1 FA | 	rdbyte	result1, arg01
1702c     04 4E 05 F1 | 	add	fp, #4
17030     A7 FA 61 FC | 	wrlong	result1, fp
17034     10 4E 85 F1 | 	sub	fp, #16
17038     20 00 90 FD | 	jmp	#LR__1891
1703c                 | LR__1890
1703c     0C 4E 05 F1 | 	add	fp, #12
17040     A7 12 02 FB | 	rdlong	arg01, fp
17044     0C 4E 85 F1 | 	sub	fp, #12
17048     7C B7 B0 FD | 	call	#_pspeek
1704c     FD FA E1 F8 | 	getbyte	result1, result1, #0
17050     10 4E 05 F1 | 	add	fp, #16
17054     A7 FA 61 FC | 	wrlong	result1, fp
17058     10 4E 85 F1 | 	sub	fp, #16
1705c                 | LR__1891
1705c     08 4E 05 F1 | 	add	fp, #8
17060     A7 3A 68 FC | 	wrlong	#29, fp
17064     08 4E 05 F1 | 	add	fp, #8
17068     A7 12 02 FB | 	rdlong	arg01, fp
1706c     10 4E 85 F1 | 	sub	fp, #16
17070     A7 12 62 FC | 	wrlong	arg01, fp
17074     A7 12 02 F6 | 	mov	arg01, fp
17078     FC 62 BF FD | 	call	#_push
1707c     A7 F0 03 F6 | 	mov	ptra, fp
17080     B2 00 A0 FD | 	call	#popregs_
17084                 | _do_peek_ret
17084     2D 00 64 FD | 	ret
17088                 | 
17088                 | ' 
17088                 | ' '-------------------- pinfloat
17088                 | ' 
17088                 | ' sub do_pinfloat
17088                 | _do_pinfloat
17088     00 4A 05 F6 | 	mov	COUNT_, #0
1708c     A8 00 A0 FD | 	call	#pushregs_
17090     0C F0 07 F1 | 	add	ptra, #12
17094     48 62 BF FD | 	call	#_pop
17098     A7 FA 61 FC | 	wrlong	result1, fp
1709c     04 4E 05 F1 | 	add	fp, #4
170a0     A7 FC 61 FC | 	wrlong	result2, fp
170a4     04 4E 05 F1 | 	add	fp, #4
170a8     A7 FE 61 FC | 	wrlong	result3, fp
170ac     08 4E 85 F1 | 	sub	fp, #8
170b0     A7 12 02 F6 | 	mov	arg01, fp
170b4     0C 64 BF FD | 	call	#_converttoint
170b8     50 FA 61 FD | 	fltl	result1
170bc     A7 F0 03 F6 | 	mov	ptra, fp
170c0     B2 00 A0 FD | 	call	#popregs_
170c4                 | _do_pinfloat_ret
170c4     2D 00 64 FD | 	ret
170c8                 | 
170c8                 | ' 
170c8                 | ' '-------------------- pinhi
170c8                 | ' 
170c8                 | ' sub do_pinhi
170c8                 | _do_pinhi
170c8     00 4A 05 F6 | 	mov	COUNT_, #0
170cc     A8 00 A0 FD | 	call	#pushregs_
170d0     0C F0 07 F1 | 	add	ptra, #12
170d4     08 62 BF FD | 	call	#_pop
170d8     A7 FA 61 FC | 	wrlong	result1, fp
170dc     04 4E 05 F1 | 	add	fp, #4
170e0     A7 FC 61 FC | 	wrlong	result2, fp
170e4     04 4E 05 F1 | 	add	fp, #4
170e8     A7 FE 61 FC | 	wrlong	result3, fp
170ec     08 4E 85 F1 | 	sub	fp, #8
170f0     A7 12 02 F6 | 	mov	arg01, fp
170f4     CC 63 BF FD | 	call	#_converttoint
170f8     59 FA 61 FD | 	drvh	result1
170fc     A7 F0 03 F6 | 	mov	ptra, fp
17100     B2 00 A0 FD | 	call	#popregs_
17104                 | _do_pinhi_ret
17104     2D 00 64 FD | 	ret
17108                 | 
17108                 | ' 
17108                 | ' '-------------------- pinlo
17108                 | ' 
17108                 | ' sub do_pinlo
17108                 | _do_pinlo
17108     00 4A 05 F6 | 	mov	COUNT_, #0
1710c     A8 00 A0 FD | 	call	#pushregs_
17110     0C F0 07 F1 | 	add	ptra, #12
17114     C8 61 BF FD | 	call	#_pop
17118     A7 FA 61 FC | 	wrlong	result1, fp
1711c     04 4E 05 F1 | 	add	fp, #4
17120     A7 FC 61 FC | 	wrlong	result2, fp
17124     04 4E 05 F1 | 	add	fp, #4
17128     A7 FE 61 FC | 	wrlong	result3, fp
1712c     08 4E 85 F1 | 	sub	fp, #8
17130     A7 12 02 F6 | 	mov	arg01, fp
17134     8C 63 BF FD | 	call	#_converttoint
17138     58 FA 61 FD | 	drvl	result1
1713c     A7 F0 03 F6 | 	mov	ptra, fp
17140     B2 00 A0 FD | 	call	#popregs_
17144                 | _do_pinlo_ret
17144     2D 00 64 FD | 	ret
17148                 | 
17148                 | ' 
17148                 | ' '-------------------- pinread
17148                 | ' 
17148                 | ' sub do_pinread
17148                 | _do_pinread
17148     00 4A 05 F6 | 	mov	COUNT_, #0
1714c     A8 00 A0 FD | 	call	#pushregs_
17150     0C F0 07 F1 | 	add	ptra, #12
17154     88 61 BF FD | 	call	#_pop
17158     A7 FA 61 FC | 	wrlong	result1, fp
1715c     04 4E 05 F1 | 	add	fp, #4
17160     A7 FC 61 FC | 	wrlong	result2, fp
17164     04 4E 05 F1 | 	add	fp, #4
17168     A7 FE 61 FC | 	wrlong	result3, fp
1716c     08 4E 85 F1 | 	sub	fp, #8
17170     A7 12 02 F6 | 	mov	arg01, fp
17174     4C 63 BF FD | 	call	#_converttoint
17178     FD 12 02 F6 | 	mov	arg01, result1
1717c     20 12 CE F7 | 	test	arg01, #32 wz
17180     FF FB 01 56 |  if_ne	mov	result1, inb
17184     FE FB 01 A6 |  if_e	mov	result1, ina
17188     09 FB 41 F0 | 	shr	result1, arg01
1718c     06 12 46 F0 | 	shr	arg01, #6
17190     09 FB 41 F7 | 	zerox	result1, arg01
17194     52 00 00 FF 
17198     10 E5 05 F1 | 	add	objptr, ##42256
1719c     F2 FA 61 FC | 	wrlong	result1, objptr
171a0     52 00 00 FF 
171a4     10 E5 85 F1 | 	sub	objptr, ##42256
171a8     08 4E 05 F1 | 	add	fp, #8
171ac     A7 3A 68 FC | 	wrlong	#29, fp
171b0     08 4E 85 F1 | 	sub	fp, #8
171b4     A7 08 68 FC | 	wrlong	#4, fp
171b8     A7 12 02 F6 | 	mov	arg01, fp
171bc     B8 61 BF FD | 	call	#_push
171c0     A7 F0 03 F6 | 	mov	ptra, fp
171c4     B2 00 A0 FD | 	call	#popregs_
171c8                 | _do_pinread_ret
171c8     2D 00 64 FD | 	ret
171cc                 | 
171cc                 | ' 
171cc                 | ' '-------------------- pinstart
171cc                 | ' 
171cc                 | ' sub do_pinstart
171cc                 | _do_pinstart
171cc     03 4A 05 F6 | 	mov	COUNT_, #3
171d0     A8 00 A0 FD | 	call	#pushregs_
171d4     30 F0 07 F1 | 	add	ptra, #48
171d8     04 61 BF FD | 	call	#_pop
171dc     FD 16 02 F6 | 	mov	arg03, result1
171e0     FE 14 02 F6 | 	mov	arg02, result2
171e4     FF 18 02 F6 | 	mov	arg04, result3
171e8     A7 16 62 FC | 	wrlong	arg03, fp
171ec     04 4E 05 F1 | 	add	fp, #4
171f0     A7 14 62 FC | 	wrlong	arg02, fp
171f4     04 4E 05 F1 | 	add	fp, #4
171f8     A7 18 62 FC | 	wrlong	arg04, fp
171fc     08 4E 85 F1 | 	sub	fp, #8
17200     DC 60 BF FD | 	call	#_pop
17204     FD 16 02 F6 | 	mov	arg03, result1
17208     FE 14 02 F6 | 	mov	arg02, result2
1720c     FF 18 02 F6 | 	mov	arg04, result3
17210     0C 4E 05 F1 | 	add	fp, #12
17214     A7 16 62 FC | 	wrlong	arg03, fp
17218     04 4E 05 F1 | 	add	fp, #4
1721c     A7 14 62 FC | 	wrlong	arg02, fp
17220     04 4E 05 F1 | 	add	fp, #4
17224     A7 18 62 FC | 	wrlong	arg04, fp
17228     14 4E 85 F1 | 	sub	fp, #20
1722c     B0 60 BF FD | 	call	#_pop
17230     FD 16 02 F6 | 	mov	arg03, result1
17234     FE 14 02 F6 | 	mov	arg02, result2
17238     FF 18 02 F6 | 	mov	arg04, result3
1723c     18 4E 05 F1 | 	add	fp, #24
17240     A7 16 62 FC | 	wrlong	arg03, fp
17244     04 4E 05 F1 | 	add	fp, #4
17248     A7 14 62 FC | 	wrlong	arg02, fp
1724c     04 4E 05 F1 | 	add	fp, #4
17250     A7 18 62 FC | 	wrlong	arg04, fp
17254     20 4E 85 F1 | 	sub	fp, #32
17258     84 60 BF FD | 	call	#_pop
1725c     FF 16 02 F6 | 	mov	arg03, result3
17260     24 4E 05 F1 | 	add	fp, #36
17264     A7 FA 61 FC | 	wrlong	result1, fp
17268     04 4E 05 F1 | 	add	fp, #4
1726c     A7 FC 61 FC | 	wrlong	result2, fp
17270     04 4E 05 F1 | 	add	fp, #4
17274     A7 16 62 FC | 	wrlong	arg03, fp
17278     08 4E 85 F1 | 	sub	fp, #8
1727c     A7 12 02 F6 | 	mov	arg01, fp
17280     24 4E 85 F1 | 	sub	fp, #36
17284     3C 62 BF FD | 	call	#_converttoint
17288     FD 26 02 F6 | 	mov	local01, result1
1728c     18 4E 05 F1 | 	add	fp, #24
17290     A7 12 02 F6 | 	mov	arg01, fp
17294     18 4E 85 F1 | 	sub	fp, #24
17298     28 62 BF FD | 	call	#_converttoint
1729c     FD 28 02 F6 | 	mov	local02, result1
172a0     0C 4E 05 F1 | 	add	fp, #12
172a4     A7 12 02 F6 | 	mov	arg01, fp
172a8     0C 4E 85 F1 | 	sub	fp, #12
172ac     14 62 BF FD | 	call	#_converttoint
172b0     FD 2A 02 F6 | 	mov	local03, result1
172b4     A7 12 02 F6 | 	mov	arg01, fp
172b8     08 62 BF FD | 	call	#_converttoint
172bc     40 26 62 FD | 	dirl	local01
172c0     13 29 02 FC | 	wrpin	local02, local01
172c4     13 2B 12 FC | 	wxpin	local03, local01
172c8     13 FB 21 FC | 	wypin	result1, local01
172cc     41 26 62 FD | 	dirh	local01
172d0     A7 F0 03 F6 | 	mov	ptra, fp
172d4     B2 00 A0 FD | 	call	#popregs_
172d8                 | _do_pinstart_ret
172d8     2D 00 64 FD | 	ret
172dc                 | 
172dc                 | ' 
172dc                 | ' '-------------------- pintoggle
172dc                 | ' 
172dc                 | ' sub do_pintoggle
172dc                 | _do_pintoggle
172dc     00 4A 05 F6 | 	mov	COUNT_, #0
172e0     A8 00 A0 FD | 	call	#pushregs_
172e4     0C F0 07 F1 | 	add	ptra, #12
172e8     F4 5F BF FD | 	call	#_pop
172ec     A7 FA 61 FC | 	wrlong	result1, fp
172f0     04 4E 05 F1 | 	add	fp, #4
172f4     A7 FC 61 FC | 	wrlong	result2, fp
172f8     04 4E 05 F1 | 	add	fp, #4
172fc     A7 FE 61 FC | 	wrlong	result3, fp
17300     08 4E 85 F1 | 	sub	fp, #8
17304     A7 12 02 F6 | 	mov	arg01, fp
17308     B8 61 BF FD | 	call	#_converttoint
1730c     5F FA 61 FD | 	drvnot	result1
17310     A7 F0 03 F6 | 	mov	ptra, fp
17314     B2 00 A0 FD | 	call	#popregs_
17318                 | _do_pintoggle_ret
17318     2D 00 64 FD | 	ret
1731c                 | 
1731c                 | ' 
1731c                 | ' '-------------------- pinwrite
1731c                 | ' 
1731c                 | ' sub do_pinwrite
1731c                 | _do_pinwrite
1731c     01 4A 05 F6 | 	mov	COUNT_, #1
17320     A8 00 A0 FD | 	call	#pushregs_
17324     18 F0 07 F1 | 	add	ptra, #24
17328     B4 5F BF FD | 	call	#_pop
1732c     FD 14 02 F6 | 	mov	arg02, result1
17330     FE 12 02 F6 | 	mov	arg01, result2
17334     FF 26 02 F6 | 	mov	local01, result3
17338     A7 14 62 FC | 	wrlong	arg02, fp
1733c     04 4E 05 F1 | 	add	fp, #4
17340     A7 12 62 FC | 	wrlong	arg01, fp
17344     04 4E 05 F1 | 	add	fp, #4
17348     A7 26 62 FC | 	wrlong	local01, fp
1734c     08 4E 85 F1 | 	sub	fp, #8
17350     8C 5F BF FD | 	call	#_pop
17354     FF 26 02 F6 | 	mov	local01, result3
17358     0C 4E 05 F1 | 	add	fp, #12
1735c     A7 FA 61 FC | 	wrlong	result1, fp
17360     04 4E 05 F1 | 	add	fp, #4
17364     A7 FC 61 FC | 	wrlong	result2, fp
17368     04 4E 05 F1 | 	add	fp, #4
1736c     A7 26 62 FC | 	wrlong	local01, fp
17370     08 4E 85 F1 | 	sub	fp, #8
17374     A7 12 02 F6 | 	mov	arg01, fp
17378     0C 4E 85 F1 | 	sub	fp, #12
1737c     44 61 BF FD | 	call	#_converttoint
17380     FD 26 02 F6 | 	mov	local01, result1
17384     A7 12 02 F6 | 	mov	arg01, fp
17388     38 61 BF FD | 	call	#_converttoint
1738c     FD 14 02 F6 | 	mov	arg02, result1
17390     13 13 02 F6 | 	mov	arg01, local01
17394     5C ED B0 FD | 	call	#__system___pinwrite
17398     A7 F0 03 F6 | 	mov	ptra, fp
1739c     B2 00 A0 FD | 	call	#popregs_
173a0                 | _do_pinwrite_ret
173a0     2D 00 64 FD | 	ret
173a4                 | 
173a4                 | ' 
173a4                 | ' '-------------------- play
173a4                 | ' 
173a4                 | ' sub do_play
173a4                 | _do_play
173a4     08 4A 05 F6 | 	mov	COUNT_, #8
173a8     A8 00 A0 FD | 	call	#pushregs_
173ac     7C F0 07 F1 | 	add	ptra, #124
173b0     68 4E 05 F1 | 	add	fp, #104
173b4     77 CC A1 FF 
173b8     A7 7C 6B FC | 	wrlong	##1134096318, fp
173bc                 | ' speed_coeff=305.873
173bc                 | ' 
173bc                 | ' for i=0 to 8 : params(i)=-2.0 : next i
173bc     64 4E 85 F1 | 	sub	fp, #100
173c0     A7 00 68 FC | 	wrlong	#0, fp
173c4     97 18 48 FB | 	callpa	#(@LR__1901-@LR__1900)>>2,fcache_load_ptr_
173c8                 | LR__1900
173c8     A7 16 02 FB | 	rdlong	arg03, fp
173cc     02 16 66 F0 | 	shl	arg03, #2
173d0     34 4E 05 F1 | 	add	fp, #52
173d4     A7 16 02 F1 | 	add	arg03, fp
173d8     00 00 E0 FF 
173dc     0B 01 68 FC | 	wrlong	##-1073741824, arg03
173e0     34 4E 85 F1 | 	sub	fp, #52
173e4     A7 26 02 FB | 	rdlong	local01, fp
173e8     01 26 06 F1 | 	add	local01, #1
173ec     A7 26 62 FC | 	wrlong	local01, fp
173f0     09 26 56 F2 | 	cmps	local01, #9 wc
173f4     D0 FF 9F CD |  if_b	jmp	#LR__1900
173f8                 | LR__1901
173f8     04 4E 85 F1 | 	sub	fp, #4
173fc     4A 00 00 FF 
17400     80 E4 05 F1 | 	add	objptr, ##38016
17404     F2 28 02 FB | 	rdlong	local02, objptr
17408     14 2B 02 F6 | 	mov	local03, local02
1740c     01 2A 66 F0 | 	shl	local03, #1
17410     14 2B 02 F1 | 	add	local03, local02
17414     02 2A 66 F0 | 	shl	local03, #2
17418     03 00 00 FF 
1741c     04 E4 85 F1 | 	sub	objptr, ##1540
17420     F2 2A 02 F1 | 	add	local03, objptr
17424     15 2D 02 FB | 	rdlong	local04, local03
17428     A7 2C 62 FC | 	wrlong	local04, fp
1742c                 | ' numpar=compiledline(lineptr_e).result.uresult
1742c                 | ' for i=numpar to 1 step -1 
1742c     04 4E 05 F1 | 	add	fp, #4
17430     A7 2C 62 FC | 	wrlong	local04, fp
17434     04 4E 85 F1 | 	sub	fp, #4
17438     47 00 00 FF 
1743c     7C E4 85 F1 | 	sub	objptr, ##36476
17440                 | LR__1902
17440     9C 5E BF FD | 	call	#_pop
17444     5C 4E 05 F1 | 	add	fp, #92
17448     A7 FA 61 FC | 	wrlong	result1, fp
1744c     04 4E 05 F1 | 	add	fp, #4
17450     A7 FC 61 FC | 	wrlong	result2, fp
17454     04 4E 05 F1 | 	add	fp, #4
17458     A7 FE 61 FC | 	wrlong	result3, fp
1745c     60 4E 85 F1 | 	sub	fp, #96
17460     A7 2A 02 FB | 	rdlong	local03, fp
17464     01 2A 86 F1 | 	sub	local03, #1
17468     02 2A 66 F0 | 	shl	local03, #2
1746c     34 4E 05 F1 | 	add	fp, #52
17470     A7 2A 02 F1 | 	add	local03, fp
17474     24 4E 05 F1 | 	add	fp, #36
17478     A7 2E 02 F6 | 	mov	local05, fp
1747c     17 13 02 F6 | 	mov	arg01, local05
17480     5C 4E 85 F1 | 	sub	fp, #92
17484     F8 60 BF FD | 	call	#_converttofloat
17488     15 FB 61 FC | 	wrlong	result1, local03
1748c     04 4E 05 F1 | 	add	fp, #4
17490     A7 26 02 FB | 	rdlong	local01, fp
17494     01 26 86 F1 | 	sub	local01, #1
17498     A7 26 62 FC | 	wrlong	local01, fp
1749c     04 4E 85 F1 | 	sub	fp, #4
174a0     01 26 56 F2 | 	cmps	local01, #1 wc
174a4     98 FF 9F 3D |  if_ae	jmp	#LR__1902
174a8                 | ' 
174a8                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
174a8     38 4E 05 F1 | 	add	fp, #56
174ac     A7 12 02 FB | 	rdlong	arg01, fp
174b0     38 4E 85 F1 | 	sub	fp, #56
174b4     00 14 06 F6 | 	mov	arg02, #0
174b8     01 16 06 F6 | 	mov	arg03, #1
174bc     30 1D B1 FD | 	call	#__system___float_cmp
174c0     00 FA 55 F2 | 	cmps	result1, #0 wc
174c4     0C 4E 05 C1 |  if_b	add	fp, #12
174c8     A7 00 68 CC |  if_b	wrlong	#0, fp
174cc     0C 4E 85 C1 |  if_b	sub	fp, #12
174d0     2C 00 90 CD |  if_b	jmp	#LR__1903
174d4     38 4E 05 F1 | 	add	fp, #56
174d8     A7 12 02 FB | 	rdlong	arg01, fp
174dc     38 4E 85 F1 | 	sub	fp, #56
174e0     01 14 06 F6 | 	mov	arg02, #1
174e4     9C 1D B1 FD | 	call	#__system___float_tointeger
174e8     FD 26 52 F6 | 	abs	local01, result1 wc
174ec     07 26 06 F5 | 	and	local01, #7
174f0     13 27 82 F6 | 	negc	local01, local01
174f4     0C 4E 05 F1 | 	add	fp, #12
174f8     A7 26 62 FC | 	wrlong	local01, fp
174fc     0C 4E 85 F1 | 	sub	fp, #12
17500                 | LR__1903
17500                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17500     3C 4E 05 F1 | 	add	fp, #60
17504     A7 12 02 FB | 	rdlong	arg01, fp
17508     3C 4E 85 F1 | 	sub	fp, #60
1750c     00 14 06 F6 | 	mov	arg02, #0
17510     01 16 06 F6 | 	mov	arg03, #1
17514     D8 1C B1 FD | 	call	#__system___float_cmp
17518     00 FA 55 F2 | 	cmps	result1, #0 wc
1751c     40 00 90 3D |  if_ae	jmp	#LR__1904
17520     0C 4E 05 F1 | 	add	fp, #12
17524     A7 28 02 FB | 	rdlong	local02, fp
17528     14 2B 02 F6 | 	mov	local03, local02
1752c     01 2A 66 F0 | 	shl	local03, #1
17530     14 2B 02 F1 | 	add	local03, local02
17534     03 2A 66 F0 | 	shl	local03, #3
17538     14 00 00 FF 
1753c     38 E5 05 F1 | 	add	objptr, ##10552
17540     F2 2A 02 F1 | 	add	local03, objptr
17544     15 31 02 FB | 	rdlong	local06, local03
17548     60 4E 05 F1 | 	add	fp, #96
1754c     A7 30 62 FC | 	wrlong	local06, fp
17550     6C 4E 85 F1 | 	sub	fp, #108
17554     14 00 00 FF 
17558     38 E5 85 F1 | 	sub	objptr, ##10552
1755c     44 00 90 FD | 	jmp	#LR__1905
17560                 | LR__1904
17560     3C 4E 05 F1 | 	add	fp, #60
17564     A7 2C 02 FB | 	rdlong	local04, fp
17568     30 4E 05 F1 | 	add	fp, #48
1756c     A7 2C 62 FC | 	wrlong	local04, fp
17570     60 4E 85 F1 | 	sub	fp, #96
17574     A7 28 02 FB | 	rdlong	local02, fp
17578     14 2B 02 F6 | 	mov	local03, local02
1757c     01 2A 66 F0 | 	shl	local03, #1
17580     14 2B 02 F1 | 	add	local03, local02
17584     03 2A 66 F0 | 	shl	local03, #3
17588     14 00 00 FF 
1758c     38 E5 05 F1 | 	add	objptr, ##10552
17590     F2 2A 02 F1 | 	add	local03, objptr
17594     0C 4E 85 F1 | 	sub	fp, #12
17598     15 2D 62 FC | 	wrlong	local04, local03
1759c     14 00 00 FF 
175a0     38 E5 85 F1 | 	sub	objptr, ##10552
175a4                 | LR__1905
175a4                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
175a4     40 4E 05 F1 | 	add	fp, #64
175a8     A7 12 02 FB | 	rdlong	arg01, fp
175ac     40 4E 85 F1 | 	sub	fp, #64
175b0     00 14 06 F6 | 	mov	arg02, #0
175b4     01 16 06 F6 | 	mov	arg03, #1
175b8     34 1C B1 FD | 	call	#__system___float_cmp
175bc     00 FA 55 F2 | 	cmps	result1, #0 wc
175c0     24 00 90 CD |  if_b	jmp	#LR__1906
175c4     40 4E 05 F1 | 	add	fp, #64
175c8     A7 12 02 FB | 	rdlong	arg01, fp
175cc     40 4E 85 F1 | 	sub	fp, #64
175d0     20 0E 23 FF 
175d4     00 14 06 F6 | 	mov	arg02, ##1176256512
175d8     01 16 66 F6 | 	neg	arg03, #1
175dc     10 1C B1 FD | 	call	#__system___float_cmp
175e0     01 FA 55 F2 | 	cmps	result1, #1 wc
175e4     48 00 90 CD |  if_b	jmp	#LR__1907
175e8                 | LR__1906
175e8     0C 4E 05 F1 | 	add	fp, #12
175ec     A7 2A 02 FB | 	rdlong	local03, fp
175f0     15 33 02 F6 | 	mov	local07, local03
175f4     01 32 66 F0 | 	shl	local07, #1
175f8     15 33 02 F1 | 	add	local07, local03
175fc     03 32 66 F0 | 	shl	local07, #3
17600     14 00 00 FF 
17604     38 E5 05 F1 | 	add	objptr, ##10552
17608     F2 32 02 F1 | 	add	local07, objptr
1760c     06 32 06 F1 | 	add	local07, #6
17610     19 2F E2 FA | 	rdword	local05, local07
17614     17 2D 32 F9 | 	getword	local04, local05, #0
17618     1C 4E 05 F1 | 	add	fp, #28
1761c     A7 2C 62 FC | 	wrlong	local04, fp
17620     28 4E 85 F1 | 	sub	fp, #40
17624     14 00 00 FF 
17628     38 E5 85 F1 | 	sub	objptr, ##10552
1762c     54 00 90 FD | 	jmp	#LR__1908
17630                 | LR__1907
17630     40 4E 05 F1 | 	add	fp, #64
17634     A7 12 02 FB | 	rdlong	arg01, fp
17638     40 4E 85 F1 | 	sub	fp, #64
1763c     01 14 06 F6 | 	mov	arg02, #1
17640     40 1C B1 FD | 	call	#__system___float_tointeger
17644     28 4E 05 F1 | 	add	fp, #40
17648     A7 FA 61 FC | 	wrlong	result1, fp
1764c     1C 4E 85 F1 | 	sub	fp, #28
17650     A7 28 02 FB | 	rdlong	local02, fp
17654     14 2B 02 F6 | 	mov	local03, local02
17658     01 2A 66 F0 | 	shl	local03, #1
1765c     14 2B 02 F1 | 	add	local03, local02
17660     03 2A 66 F0 | 	shl	local03, #3
17664     14 00 00 FF 
17668     38 E5 05 F1 | 	add	objptr, ##10552
1766c     F2 2A 02 F1 | 	add	local03, objptr
17670     0C 4E 85 F1 | 	sub	fp, #12
17674     06 2A 06 F1 | 	add	local03, #6
17678     15 FB 51 FC | 	wrword	result1, local03
1767c     14 00 00 FF 
17680     38 E5 85 F1 | 	sub	objptr, ##10552
17684                 | LR__1908
17684                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17684     44 4E 05 F1 | 	add	fp, #68
17688     A7 12 02 FB | 	rdlong	arg01, fp
1768c     44 4E 85 F1 | 	sub	fp, #68
17690     00 14 06 F6 | 	mov	arg02, #0
17694     01 16 06 F6 | 	mov	arg03, #1
17698     54 1B B1 FD | 	call	#__system___float_cmp
1769c     00 FA 55 F2 | 	cmps	result1, #0 wc
176a0     24 00 90 CD |  if_b	jmp	#LR__1909
176a4     44 4E 05 F1 | 	add	fp, #68
176a8     A7 12 02 FB | 	rdlong	arg01, fp
176ac     44 4E 85 F1 | 	sub	fp, #68
176b0     89 C1 20 FF 
176b4     6F 14 06 F6 | 	mov	arg02, ##1099108975
176b8     01 16 66 F6 | 	neg	arg03, #1
176bc     30 1B B1 FD | 	call	#__system___float_cmp
176c0     01 FA 55 F2 | 	cmps	result1, #1 wc
176c4     44 00 90 CD |  if_b	jmp	#LR__1910
176c8                 | LR__1909
176c8     0C 4E 05 F1 | 	add	fp, #12
176cc     A7 28 02 FB | 	rdlong	local02, fp
176d0     14 2B 02 F6 | 	mov	local03, local02
176d4     01 2A 66 F0 | 	shl	local03, #1
176d8     14 2B 02 F1 | 	add	local03, local02
176dc     03 2A 66 F0 | 	shl	local03, #3
176e0     14 00 00 FF 
176e4     38 E5 05 F1 | 	add	objptr, ##10552
176e8     F2 2A 02 F1 | 	add	local03, objptr
176ec     0C 2A 06 F1 | 	add	local03, #12
176f0     15 31 02 FB | 	rdlong	local06, local03
176f4     68 4E 05 F1 | 	add	fp, #104
176f8     A7 30 62 FC | 	wrlong	local06, fp
176fc     74 4E 85 F1 | 	sub	fp, #116
17700     14 00 00 FF 
17704     38 E5 85 F1 | 	sub	objptr, ##10552
17708     48 00 90 FD | 	jmp	#LR__1911
1770c                 | LR__1910
1770c     44 4E 05 F1 | 	add	fp, #68
17710     A7 2C 02 FB | 	rdlong	local04, fp
17714     30 4E 05 F1 | 	add	fp, #48
17718     A7 2C 62 FC | 	wrlong	local04, fp
1771c     68 4E 85 F1 | 	sub	fp, #104
17720     A7 28 02 FB | 	rdlong	local02, fp
17724     14 2B 02 F6 | 	mov	local03, local02
17728     01 2A 66 F0 | 	shl	local03, #1
1772c     14 2B 02 F1 | 	add	local03, local02
17730     03 2A 66 F0 | 	shl	local03, #3
17734     14 00 00 FF 
17738     38 E5 05 F1 | 	add	objptr, ##10552
1773c     F2 2A 02 F1 | 	add	local03, objptr
17740     0C 4E 85 F1 | 	sub	fp, #12
17744     0C 2A 06 F1 | 	add	local03, #12
17748     15 2D 62 FC | 	wrlong	local04, local03
1774c     14 00 00 FF 
17750     38 E5 85 F1 | 	sub	objptr, ##10552
17754                 | LR__1911
17754                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
17754     48 4E 05 F1 | 	add	fp, #72
17758     A7 12 02 FB | 	rdlong	arg01, fp
1775c     48 4E 85 F1 | 	sub	fp, #72
17760     00 14 06 F6 | 	mov	arg02, #0
17764     01 16 06 F6 | 	mov	arg03, #1
17768     84 1A B1 FD | 	call	#__system___float_cmp
1776c     00 FA 55 F2 | 	cmps	result1, #0 wc
17770     24 00 90 CD |  if_b	jmp	#LR__1912
17774     48 4E 05 F1 | 	add	fp, #72
17778     A7 12 02 FB | 	rdlong	arg01, fp
1777c     48 4E 85 F1 | 	sub	fp, #72
17780     00 00 21 FF 
17784     00 14 06 F6 | 	mov	arg02, ##1107296256
17788     01 16 66 F6 | 	neg	arg03, #1
1778c     60 1A B1 FD | 	call	#__system___float_cmp
17790     01 FA 55 F2 | 	cmps	result1, #1 wc
17794     48 00 90 CD |  if_b	jmp	#LR__1913
17798                 | LR__1912
17798     0C 4E 05 F1 | 	add	fp, #12
1779c     A7 2A 02 FB | 	rdlong	local03, fp
177a0     15 33 02 F6 | 	mov	local07, local03
177a4     01 32 66 F0 | 	shl	local07, #1
177a8     15 33 02 F1 | 	add	local07, local03
177ac     03 32 66 F0 | 	shl	local07, #3
177b0     14 00 00 FF 
177b4     38 E5 05 F1 | 	add	objptr, ##10552
177b8     F2 32 02 F1 | 	add	local07, objptr
177bc     04 32 06 F1 | 	add	local07, #4
177c0     19 2F C2 FA | 	rdbyte	local05, local07
177c4     17 2D E2 F8 | 	getbyte	local04, local05, #0
177c8     14 4E 05 F1 | 	add	fp, #20
177cc     A7 2C 62 FC | 	wrlong	local04, fp
177d0     20 4E 85 F1 | 	sub	fp, #32
177d4     14 00 00 FF 
177d8     38 E5 85 F1 | 	sub	objptr, ##10552
177dc     54 00 90 FD | 	jmp	#LR__1914
177e0                 | LR__1913
177e0     48 4E 05 F1 | 	add	fp, #72
177e4     A7 12 02 FB | 	rdlong	arg01, fp
177e8     48 4E 85 F1 | 	sub	fp, #72
177ec     01 14 06 F6 | 	mov	arg02, #1
177f0     90 1A B1 FD | 	call	#__system___float_tointeger
177f4     20 4E 05 F1 | 	add	fp, #32
177f8     A7 FA 61 FC | 	wrlong	result1, fp
177fc     14 4E 85 F1 | 	sub	fp, #20
17800     A7 28 02 FB | 	rdlong	local02, fp
17804     14 2B 02 F6 | 	mov	local03, local02
17808     01 2A 66 F0 | 	shl	local03, #1
1780c     14 2B 02 F1 | 	add	local03, local02
17810     03 2A 66 F0 | 	shl	local03, #3
17814     14 00 00 FF 
17818     38 E5 05 F1 | 	add	objptr, ##10552
1781c     F2 2A 02 F1 | 	add	local03, objptr
17820     0C 4E 85 F1 | 	sub	fp, #12
17824     04 2A 06 F1 | 	add	local03, #4
17828     15 FB 41 FC | 	wrbyte	result1, local03
1782c     14 00 00 FF 
17830     38 E5 85 F1 | 	sub	objptr, ##10552
17834                 | LR__1914
17834                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
17834     4C 4E 05 F1 | 	add	fp, #76
17838     A7 12 02 FB | 	rdlong	arg01, fp
1783c     4C 4E 85 F1 | 	sub	fp, #76
17840     00 14 06 F6 | 	mov	arg02, #0
17844     01 16 06 F6 | 	mov	arg03, #1
17848     A4 19 B1 FD | 	call	#__system___float_cmp
1784c     00 FA 55 F2 | 	cmps	result1, #0 wc
17850     24 00 90 CD |  if_b	jmp	#LR__1915
17854     4C 4E 05 F1 | 	add	fp, #76
17858     A7 12 02 FB | 	rdlong	arg01, fp
1785c     4C 4E 85 F1 | 	sub	fp, #76
17860     00 80 20 FF 
17864     00 14 06 F6 | 	mov	arg02, ##1090519040
17868     01 16 66 F6 | 	neg	arg03, #1
1786c     80 19 B1 FD | 	call	#__system___float_cmp
17870     01 FA 55 F2 | 	cmps	result1, #1 wc
17874     48 00 90 CD |  if_b	jmp	#LR__1916
17878                 | LR__1915
17878     0C 4E 05 F1 | 	add	fp, #12
1787c     A7 2A 02 FB | 	rdlong	local03, fp
17880     15 33 02 F6 | 	mov	local07, local03
17884     01 32 66 F0 | 	shl	local07, #1
17888     15 33 02 F1 | 	add	local07, local03
1788c     03 32 66 F0 | 	shl	local07, #3
17890     14 00 00 FF 
17894     38 E5 05 F1 | 	add	objptr, ##10552
17898     F2 32 02 F1 | 	add	local07, objptr
1789c     05 32 06 F1 | 	add	local07, #5
178a0     19 2F C2 FA | 	rdbyte	local05, local07
178a4     17 2D E2 F8 | 	getbyte	local04, local05, #0
178a8     18 4E 05 F1 | 	add	fp, #24
178ac     A7 2C 62 FC | 	wrlong	local04, fp
178b0     24 4E 85 F1 | 	sub	fp, #36
178b4     14 00 00 FF 
178b8     38 E5 85 F1 | 	sub	objptr, ##10552
178bc     54 00 90 FD | 	jmp	#LR__1917
178c0                 | LR__1916
178c0     4C 4E 05 F1 | 	add	fp, #76
178c4     A7 12 02 FB | 	rdlong	arg01, fp
178c8     4C 4E 85 F1 | 	sub	fp, #76
178cc     01 14 06 F6 | 	mov	arg02, #1
178d0     B0 19 B1 FD | 	call	#__system___float_tointeger
178d4     24 4E 05 F1 | 	add	fp, #36
178d8     A7 FA 61 FC | 	wrlong	result1, fp
178dc     18 4E 85 F1 | 	sub	fp, #24
178e0     A7 28 02 FB | 	rdlong	local02, fp
178e4     14 2B 02 F6 | 	mov	local03, local02
178e8     01 2A 66 F0 | 	shl	local03, #1
178ec     14 2B 02 F1 | 	add	local03, local02
178f0     03 2A 66 F0 | 	shl	local03, #3
178f4     14 00 00 FF 
178f8     38 E5 05 F1 | 	add	objptr, ##10552
178fc     F2 2A 02 F1 | 	add	local03, objptr
17900     0C 4E 85 F1 | 	sub	fp, #12
17904     05 2A 06 F1 | 	add	local03, #5
17908     15 FB 41 FC | 	wrbyte	result1, local03
1790c     14 00 00 FF 
17910     38 E5 85 F1 | 	sub	objptr, ##10552
17914                 | LR__1917
17914                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
17914     50 4E 05 F1 | 	add	fp, #80
17918     A7 12 02 FB | 	rdlong	arg01, fp
1791c     50 4E 85 F1 | 	sub	fp, #80
17920     00 14 06 F6 | 	mov	arg02, #0
17924     01 16 06 F6 | 	mov	arg03, #1
17928     C4 18 B1 FD | 	call	#__system___float_cmp
1792c     00 FA 55 F2 | 	cmps	result1, #0 wc
17930     24 00 90 CD |  if_b	jmp	#LR__1918
17934     50 4E 05 F1 | 	add	fp, #80
17938     A7 12 02 FB | 	rdlong	arg01, fp
1793c     50 4E 85 F1 | 	sub	fp, #80
17940     00 3D 22 FF 
17944     00 14 06 F6 | 	mov	arg02, ##1148846080
17948     01 16 66 F6 | 	neg	arg03, #1
1794c     A0 18 B1 FD | 	call	#__system___float_cmp
17950     01 FA 55 F2 | 	cmps	result1, #1 wc
17954     44 00 90 CD |  if_b	jmp	#LR__1919
17958                 | LR__1918
17958     0C 4E 05 F1 | 	add	fp, #12
1795c     A7 28 02 FB | 	rdlong	local02, fp
17960     14 2B 02 F6 | 	mov	local03, local02
17964     01 2A 66 F0 | 	shl	local03, #1
17968     14 2B 02 F1 | 	add	local03, local02
1796c     03 2A 66 F0 | 	shl	local03, #3
17970     14 00 00 FF 
17974     38 E5 05 F1 | 	add	objptr, ##10552
17978     F2 2A 02 F1 | 	add	local03, objptr
1797c     08 2A 06 F1 | 	add	local03, #8
17980     15 31 02 FB | 	rdlong	local06, local03
17984     6C 4E 05 F1 | 	add	fp, #108
17988     A7 30 62 FC | 	wrlong	local06, fp
1798c     78 4E 85 F1 | 	sub	fp, #120
17990     14 00 00 FF 
17994     38 E5 85 F1 | 	sub	objptr, ##10552
17998     48 00 90 FD | 	jmp	#LR__1920
1799c                 | LR__1919
1799c     50 4E 05 F1 | 	add	fp, #80
179a0     A7 30 02 FB | 	rdlong	local06, fp
179a4     28 4E 05 F1 | 	add	fp, #40
179a8     A7 30 62 FC | 	wrlong	local06, fp
179ac     6C 4E 85 F1 | 	sub	fp, #108
179b0     A7 28 02 FB | 	rdlong	local02, fp
179b4     14 2B 02 F6 | 	mov	local03, local02
179b8     01 2A 66 F0 | 	shl	local03, #1
179bc     14 2B 02 F1 | 	add	local03, local02
179c0     03 2A 66 F0 | 	shl	local03, #3
179c4     14 00 00 FF 
179c8     38 E5 05 F1 | 	add	objptr, ##10552
179cc     F2 2A 02 F1 | 	add	local03, objptr
179d0     0C 4E 85 F1 | 	sub	fp, #12
179d4     08 2A 06 F1 | 	add	local03, #8
179d8     15 31 62 FC | 	wrlong	local06, local03
179dc     14 00 00 FF 
179e0     38 E5 85 F1 | 	sub	objptr, ##10552
179e4                 | LR__1920
179e4                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
179e4     54 4E 05 F1 | 	add	fp, #84
179e8     A7 12 02 FB | 	rdlong	arg01, fp
179ec     54 4E 85 F1 | 	sub	fp, #84
179f0     00 C0 5F FF 
179f4     00 14 06 F6 | 	mov	arg02, ##-1082130432
179f8     01 16 06 F6 | 	mov	arg03, #1
179fc     F0 17 B1 FD | 	call	#__system___float_cmp
17a00     00 FA 55 F2 | 	cmps	result1, #0 wc
17a04     24 00 90 CD |  if_b	jmp	#LR__1921
17a08     54 4E 05 F1 | 	add	fp, #84
17a0c     A7 12 02 FB | 	rdlong	arg01, fp
17a10     54 4E 85 F1 | 	sub	fp, #84
17a14     00 C0 1F FF 
17a18     00 14 06 F6 | 	mov	arg02, ##1065353216
17a1c     01 16 66 F6 | 	neg	arg03, #1
17a20     CC 17 B1 FD | 	call	#__system___float_cmp
17a24     01 FA 55 F2 | 	cmps	result1, #1 wc
17a28     44 00 90 CD |  if_b	jmp	#LR__1922
17a2c                 | LR__1921
17a2c     0C 4E 05 F1 | 	add	fp, #12
17a30     A7 28 02 FB | 	rdlong	local02, fp
17a34     14 2B 02 F6 | 	mov	local03, local02
17a38     01 2A 66 F0 | 	shl	local03, #1
17a3c     14 2B 02 F1 | 	add	local03, local02
17a40     03 2A 66 F0 | 	shl	local03, #3
17a44     14 00 00 FF 
17a48     38 E5 05 F1 | 	add	objptr, ##10552
17a4c     F2 2A 02 F1 | 	add	local03, objptr
17a50     10 2A 06 F1 | 	add	local03, #16
17a54     15 31 02 FB | 	rdlong	local06, local03
17a58     64 4E 05 F1 | 	add	fp, #100
17a5c     A7 30 62 FC | 	wrlong	local06, fp
17a60     70 4E 85 F1 | 	sub	fp, #112
17a64     14 00 00 FF 
17a68     38 E5 85 F1 | 	sub	objptr, ##10552
17a6c     48 00 90 FD | 	jmp	#LR__1923
17a70                 | LR__1922
17a70     54 4E 05 F1 | 	add	fp, #84
17a74     A7 30 02 FB | 	rdlong	local06, fp
17a78     1C 4E 05 F1 | 	add	fp, #28
17a7c     A7 30 62 FC | 	wrlong	local06, fp
17a80     64 4E 85 F1 | 	sub	fp, #100
17a84     A7 28 02 FB | 	rdlong	local02, fp
17a88     14 2B 02 F6 | 	mov	local03, local02
17a8c     01 2A 66 F0 | 	shl	local03, #1
17a90     14 2B 02 F1 | 	add	local03, local02
17a94     03 2A 66 F0 | 	shl	local03, #3
17a98     14 00 00 FF 
17a9c     38 E5 05 F1 | 	add	objptr, ##10552
17aa0     F2 2A 02 F1 | 	add	local03, objptr
17aa4     0C 4E 85 F1 | 	sub	fp, #12
17aa8     10 2A 06 F1 | 	add	local03, #16
17aac     15 31 62 FC | 	wrlong	local06, local03
17ab0     14 00 00 FF 
17ab4     38 E5 85 F1 | 	sub	objptr, ##10552
17ab8                 | LR__1923
17ab8                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
17ab8     58 4E 05 F1 | 	add	fp, #88
17abc     A7 12 02 FB | 	rdlong	arg01, fp
17ac0     58 4E 85 F1 | 	sub	fp, #88
17ac4     00 14 06 F6 | 	mov	arg02, #0
17ac8     01 16 06 F6 | 	mov	arg03, #1
17acc     20 17 B1 FD | 	call	#__system___float_cmp
17ad0     00 FA 55 F2 | 	cmps	result1, #0 wc
17ad4     24 00 90 CD |  if_b	jmp	#LR__1924
17ad8     58 4E 05 F1 | 	add	fp, #88
17adc     A7 12 02 FB | 	rdlong	arg01, fp
17ae0     58 4E 85 F1 | 	sub	fp, #88
17ae4     80 BF 21 FF 
17ae8     00 14 06 F6 | 	mov	arg02, ##1132396544
17aec     01 16 66 F6 | 	neg	arg03, #1
17af0     FC 16 B1 FD | 	call	#__system___float_cmp
17af4     01 FA 55 F2 | 	cmps	result1, #1 wc
17af8     44 00 90 CD |  if_b	jmp	#LR__1925
17afc                 | LR__1924
17afc     0C 4E 05 F1 | 	add	fp, #12
17b00     A7 2A 02 FB | 	rdlong	local03, fp
17b04     15 33 02 F6 | 	mov	local07, local03
17b08     01 32 66 F0 | 	shl	local07, #1
17b0c     15 33 02 F1 | 	add	local07, local03
17b10     03 32 66 F0 | 	shl	local07, #3
17b14     14 00 00 FF 
17b18     38 E5 05 F1 | 	add	objptr, ##10552
17b1c     F2 32 02 F1 | 	add	local07, objptr
17b20     14 32 06 F1 | 	add	local07, #20
17b24     19 2D E2 FA | 	rdword	local04, local07
17b28     20 4E 05 F1 | 	add	fp, #32
17b2c     A7 2C 62 FC | 	wrlong	local04, fp
17b30     2C 4E 85 F1 | 	sub	fp, #44
17b34     14 00 00 FF 
17b38     38 E5 85 F1 | 	sub	objptr, ##10552
17b3c     54 00 90 FD | 	jmp	#LR__1926
17b40                 | LR__1925
17b40     58 4E 05 F1 | 	add	fp, #88
17b44     A7 12 02 FB | 	rdlong	arg01, fp
17b48     58 4E 85 F1 | 	sub	fp, #88
17b4c     01 14 06 F6 | 	mov	arg02, #1
17b50     30 17 B1 FD | 	call	#__system___float_tointeger
17b54     2C 4E 05 F1 | 	add	fp, #44
17b58     A7 FA 61 FC | 	wrlong	result1, fp
17b5c     20 4E 85 F1 | 	sub	fp, #32
17b60     A7 28 02 FB | 	rdlong	local02, fp
17b64     14 2B 02 F6 | 	mov	local03, local02
17b68     01 2A 66 F0 | 	shl	local03, #1
17b6c     14 2B 02 F1 | 	add	local03, local02
17b70     03 2A 66 F0 | 	shl	local03, #3
17b74     14 00 00 FF 
17b78     38 E5 05 F1 | 	add	objptr, ##10552
17b7c     F2 2A 02 F1 | 	add	local03, objptr
17b80     0C 4E 85 F1 | 	sub	fp, #12
17b84     14 2A 06 F1 | 	add	local03, #20
17b88     15 FB 51 FC | 	wrword	result1, local03
17b8c     14 00 00 FF 
17b90     38 E5 85 F1 | 	sub	objptr, ##10552
17b94                 | LR__1926
17b94     6C 4E 05 F1 | 	add	fp, #108
17b98     A7 14 02 FB | 	rdlong	arg02, fp
17b9c     6C 4E 85 F1 | 	sub	fp, #108
17ba0     FC 16 20 FF 
17ba4     54 12 06 F6 | 	mov	arg01, ##1076754516
17ba8     E0 21 B1 FD | 	call	#__system____builtin_logbase
17bac     FD 2C 02 F6 | 	mov	local04, result1
17bb0     1E 14 C6 F9 | 	decod	arg02, #30
17bb4     FC 16 20 FF 
17bb8     54 12 06 F6 | 	mov	arg01, ##1076754516
17bbc     CC 21 B1 FD | 	call	#__system____builtin_logbase
17bc0     FD 14 02 F6 | 	mov	arg02, result1
17bc4     16 13 02 F6 | 	mov	arg01, local04
17bc8     F4 13 B1 FD | 	call	#__system___float_div
17bcc     FD 12 02 F6 | 	mov	arg01, result1
17bd0     00 14 06 F6 | 	mov	arg02, #0
17bd4     AC 16 B1 FD | 	call	#__system___float_tointeger
17bd8     30 4E 05 F1 | 	add	fp, #48
17bdc     A7 FA 61 FC | 	wrlong	result1, fp
17be0     1E 2C C6 F9 | 	decod	local04, #30
17be4     FD 12 02 F6 | 	mov	arg01, result1
17be8     30 4E 85 F1 | 	sub	fp, #48
17bec     05 12 06 F1 | 	add	arg01, #5
17bf0     09 13 52 F6 | 	abs	arg01, arg01 wc
17bf4     1F 34 C6 C9 |  if_b	decod	local08, #31
17bf8     00 34 06 36 |  if_ae	mov	local08, #0
17bfc     B8 0D B1 FD | 	call	#__system___float_fromuns
17c00     1A FB 61 F5 | 	xor	result1, local08
17c04     FD 14 02 F6 | 	mov	arg02, result1
17c08     16 13 02 F6 | 	mov	arg01, local04
17c0c     B4 20 B1 FD | 	call	#__system____builtin_powf
17c10     FD 12 02 F6 | 	mov	arg01, result1
17c14     01 14 06 F6 | 	mov	arg02, #1
17c18     68 16 B1 FD | 	call	#__system___float_tointeger
17c1c     10 4E 05 F1 | 	add	fp, #16
17c20     A7 FA 61 FC | 	wrlong	result1, fp
17c24                 | ' skip=round(2^(lfreq+5))
17c24                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
17c24     10 4E 85 F1 | 	sub	fp, #16
17c28     40 00 00 FF 
17c2c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
17c30     30 00 90 CD |  if_b	jmp	#LR__1927
17c34     10 4E 05 F1 | 	add	fp, #16
17c38     A7 26 02 FB | 	rdlong	local01, fp
17c3c     13 2D 52 F6 | 	abs	local04, local01 wc
17c40     0F 2C 46 F0 | 	shr	local04, #15
17c44     16 2D 82 F6 | 	negc	local04, local04
17c48     0C 4E 85 F1 | 	sub	fp, #12
17c4c     A7 2C 62 FC | 	wrlong	local04, fp
17c50     0C 4E 05 F1 | 	add	fp, #12
17c54     40 00 80 FF 
17c58     A7 00 68 FC | 	wrlong	##32768, fp
17c5c     10 4E 85 F1 | 	sub	fp, #16
17c60     0C 00 90 FD | 	jmp	#LR__1928
17c64                 | LR__1927
17c64     04 4E 05 F1 | 	add	fp, #4
17c68     A7 02 68 FC | 	wrlong	#1, fp
17c6c     04 4E 85 F1 | 	sub	fp, #4
17c70                 | LR__1928
17c70     6C 4E 05 F1 | 	add	fp, #108
17c74     A7 14 02 FB | 	rdlong	arg02, fp
17c78     6C 4E 85 F1 | 	sub	fp, #108
17c7c     3E 2C 25 FF 
17c80     3C 12 06 F6 | 	mov	arg01, ##1247312956
17c84     38 13 B1 FD | 	call	#__system___float_div
17c88     FD 2C 02 F6 | 	mov	local04, result1
17c8c     04 4E 05 F1 | 	add	fp, #4
17c90     A7 12 02 FB | 	rdlong	arg01, fp
17c94     04 4E 85 F1 | 	sub	fp, #4
17c98     09 13 52 F6 | 	abs	arg01, arg01 wc
17c9c     1F 34 C6 C9 |  if_b	decod	local08, #31
17ca0     00 34 06 36 |  if_ae	mov	local08, #0
17ca4     10 0D B1 FD | 	call	#__system___float_fromuns
17ca8     1A FB 61 F5 | 	xor	result1, local08
17cac     FD 26 02 F6 | 	mov	local01, result1
17cb0     1E 28 C6 F9 | 	decod	local02, #30
17cb4     0D 12 06 F6 | 	mov	arg01, #13
17cb8     30 4E 05 F1 | 	add	fp, #48
17cbc     A7 30 02 FB | 	rdlong	local06, fp
17cc0     30 4E 85 F1 | 	sub	fp, #48
17cc4     18 13 82 F1 | 	sub	arg01, local06
17cc8     09 13 52 F6 | 	abs	arg01, arg01 wc
17ccc     1F 34 C6 C9 |  if_b	decod	local08, #31
17cd0     00 34 06 36 |  if_ae	mov	local08, #0
17cd4     E0 0C B1 FD | 	call	#__system___float_fromuns
17cd8     1A FB 61 F5 | 	xor	result1, local08
17cdc     FD 14 02 F6 | 	mov	arg02, result1
17ce0     14 13 02 F6 | 	mov	arg01, local02
17ce4     DC 1F B1 FD | 	call	#__system____builtin_powf
17ce8     FD 14 02 F6 | 	mov	arg02, result1
17cec     13 13 02 F6 | 	mov	arg01, local01
17cf0     C8 10 B1 FD | 	call	#__system___float_mul
17cf4     FD 14 02 F6 | 	mov	arg02, result1
17cf8     16 13 02 F6 | 	mov	arg01, local04
17cfc     C0 12 B1 FD | 	call	#__system___float_div
17d00     FD 12 02 F6 | 	mov	arg01, result1
17d04     01 14 06 F6 | 	mov	arg02, #1
17d08     78 15 B1 FD | 	call	#__system___float_tointeger
17d0c     34 4E 05 F1 | 	add	fp, #52
17d10     A7 FA 61 FC | 	wrlong	result1, fp
17d14     34 4E 05 F1 | 	add	fp, #52
17d18     A7 12 02 FB | 	rdlong	arg01, fp
17d1c     10 4E 05 F1 | 	add	fp, #16
17d20     A7 14 02 FB | 	rdlong	arg02, fp
17d24     78 4E 85 F1 | 	sub	fp, #120
17d28     94 12 B1 FD | 	call	#__system___float_div
17d2c     FD 12 02 F6 | 	mov	arg01, result1
17d30     01 14 06 F6 | 	mov	arg02, #1
17d34     4C 15 B1 FD | 	call	#__system___float_tointeger
17d38     FD 2C 02 F6 | 	mov	local04, result1
17d3c     14 4E 05 F1 | 	add	fp, #20
17d40     A7 2C 62 FC | 	wrlong	local04, fp
17d44     5C 4E 05 F1 | 	add	fp, #92
17d48     A7 14 02 FB | 	rdlong	arg02, fp
17d4c     70 4E 85 F1 | 	sub	fp, #112
17d50     00 00 23 FF 
17d54     00 12 06 F6 | 	mov	arg01, ##1174405120
17d58     60 10 B1 FD | 	call	#__system___float_mul
17d5c     FD 12 02 F6 | 	mov	arg01, result1
17d60     01 14 06 F6 | 	mov	arg02, #1
17d64     1C 15 B1 FD | 	call	#__system___float_tointeger
17d68     0D 2C C6 F9 | 	decod	local04, #13
17d6c     FD 2C 02 F1 | 	add	local04, result1
17d70     18 4E 05 F1 | 	add	fp, #24
17d74     A7 2C 62 FC | 	wrlong	local04, fp
17d78     5C 4E 05 F1 | 	add	fp, #92
17d7c     A7 14 02 FB | 	rdlong	arg02, fp
17d80     74 4E 85 F1 | 	sub	fp, #116
17d84     00 3D 22 FF 
17d88     00 12 06 F6 | 	mov	arg01, ##1148846080
17d8c     2C 10 B1 FD | 	call	#__system___float_mul
17d90     FD 12 02 F6 | 	mov	arg01, result1
17d94     01 14 06 F6 | 	mov	arg02, #1
17d98     E8 14 B1 FD | 	call	#__system___float_tointeger
17d9c     1C 4E 05 F1 | 	add	fp, #28
17da0     A7 FA 61 FC | 	wrlong	result1, fp
17da4     37 00 00 FF 
17da8     10 E4 05 F1 | 	add	objptr, ##28176
17dac     F2 2C 02 FB | 	rdlong	local04, objptr
17db0     37 00 00 FF 
17db4     10 E4 85 F1 | 	sub	objptr, ##28176
17db8     10 4E 85 F1 | 	sub	fp, #16
17dbc     A7 28 02 FB | 	rdlong	local02, fp
17dc0     06 28 66 F0 | 	shl	local02, #6
17dc4     14 2D 02 F1 | 	add	local04, local02
17dc8     04 4E 85 F1 | 	sub	fp, #4
17dcc     A7 2C 62 FC | 	wrlong	local04, fp
17dd0                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
17dd0                 | ' speed=round(speed_coeff/slen)
17dd0                 | ' ipan=8192+round(8192*pan)
17dd0                 | ' ivol=round(1000.0*vol)
17dd0                 | ' base2=base+64*channel
17dd0                 | ' if wave <32 then 
17dd0     18 4E 05 F1 | 	add	fp, #24
17dd4     A7 2C 02 FB | 	rdlong	local04, fp
17dd8     20 4E 85 F1 | 	sub	fp, #32
17ddc     20 2C 56 F2 | 	cmps	local04, #32 wc
17de0     2C 00 90 3D |  if_ae	jmp	#LR__1929
17de4     08 4E 05 F1 | 	add	fp, #8
17de8     A7 12 02 FB | 	rdlong	arg01, fp
17dec     08 12 06 F1 | 	add	arg01, #8
17df0     18 4E 05 F1 | 	add	fp, #24
17df4     A7 14 02 FB | 	rdlong	arg02, fp
17df8     20 4E 85 F1 | 	sub	fp, #32
17dfc     0B 14 66 F0 | 	shl	arg02, #11
17e00     00 00 60 FF 
17e04     00 14 06 F1 | 	add	arg02, ##-1073741824
17e08     09 15 62 FC | 	wrlong	arg02, arg01
17e0c     18 00 90 FD | 	jmp	#LR__1930
17e10                 | LR__1929
17e10     08 4E 05 F1 | 	add	fp, #8
17e14     A7 12 02 FB | 	rdlong	arg01, fp
17e18     08 4E 85 F1 | 	sub	fp, #8
17e1c     08 12 06 F1 | 	add	arg01, #8
17e20     00 00 E4 FF 
17e24     09 01 68 FC | 	wrlong	##-939524096, arg01
17e28                 | LR__1930
17e28     08 4E 05 F1 | 	add	fp, #8
17e2c     A7 12 02 FB | 	rdlong	arg01, fp
17e30     10 12 06 F1 | 	add	arg01, #16
17e34     04 00 80 FF 
17e38     09 01 68 FC | 	wrlong	##2048, arg01
17e3c     A7 12 02 FB | 	rdlong	arg01, fp
17e40     0C 12 06 F1 | 	add	arg01, #12
17e44     09 01 68 FC | 	wrlong	#0, arg01
17e48     A7 12 02 FB | 	rdlong	arg01, fp
17e4c     14 12 06 F1 | 	add	arg01, #20
17e50     14 4E 05 F1 | 	add	fp, #20
17e54     A7 14 02 FB | 	rdlong	arg02, fp
17e58     09 15 52 FC | 	wrword	arg02, arg01
17e5c     14 4E 85 F1 | 	sub	fp, #20
17e60     A7 12 02 FB | 	rdlong	arg01, fp
17e64     16 12 06 F1 | 	add	arg01, #22
17e68     10 4E 05 F1 | 	add	fp, #16
17e6c     A7 14 02 FB | 	rdlong	arg02, fp
17e70     09 15 52 FC | 	wrword	arg02, arg01
17e74                 | ' lpoke base2+16,2048
17e74                 | ' lpoke base2+12,0
17e74                 | ' dpoke base2+20,ivol 
17e74                 | ' dpoke base2+22,ipan 
17e74                 | ' if wave<32 then
17e74     08 4E 05 F1 | 	add	fp, #8
17e78     A7 2C 02 FB | 	rdlong	local04, fp
17e7c     20 4E 85 F1 | 	sub	fp, #32
17e80     20 2C 56 F2 | 	cmps	local04, #32 wc
17e84     38 00 90 3D |  if_ae	jmp	#LR__1931
17e88     08 4E 05 F1 | 	add	fp, #8
17e8c     A7 12 02 FB | 	rdlong	arg01, fp
17e90     18 12 06 F1 | 	add	arg01, #24
17e94     2C 4E 05 F1 | 	add	fp, #44
17e98     A7 14 02 FB | 	rdlong	arg02, fp
17e9c     09 15 52 FC | 	wrword	arg02, arg01
17ea0     2C 4E 85 F1 | 	sub	fp, #44
17ea4     A7 12 02 FB | 	rdlong	arg01, fp
17ea8     1A 12 06 F1 | 	add	arg01, #26
17eac     08 4E 05 F1 | 	add	fp, #8
17eb0     A7 14 02 FB | 	rdlong	arg02, fp
17eb4     10 4E 85 F1 | 	sub	fp, #16
17eb8     09 15 52 FC | 	wrword	arg02, arg01
17ebc     48 00 90 FD | 	jmp	#LR__1932
17ec0                 | LR__1931
17ec0     08 4E 05 F1 | 	add	fp, #8
17ec4     A7 2C 02 FB | 	rdlong	local04, fp
17ec8     18 2C 06 F1 | 	add	local04, #24
17ecc     64 4E 05 F1 | 	add	fp, #100
17ed0     A7 14 02 FB | 	rdlong	arg02, fp
17ed4     6C 4E 85 F1 | 	sub	fp, #108
17ed8     3E 2C 25 FF 
17edc     3C 12 06 F6 | 	mov	arg01, ##1247312956
17ee0     DC 10 B1 FD | 	call	#__system___float_div
17ee4     FD 12 02 F6 | 	mov	arg01, result1
17ee8     01 14 06 F6 | 	mov	arg02, #1
17eec     94 13 B1 FD | 	call	#__system___float_tointeger
17ef0     16 FB 51 FC | 	wrword	result1, local04
17ef4     08 4E 05 F1 | 	add	fp, #8
17ef8     A7 12 02 FB | 	rdlong	arg01, fp
17efc     08 4E 85 F1 | 	sub	fp, #8
17f00     1A 12 06 F1 | 	add	arg01, #26
17f04     09 01 5A FC | 	wrword	#256, arg01
17f08                 | LR__1932
17f08     08 4E 05 F1 | 	add	fp, #8
17f0c     A7 12 02 FB | 	rdlong	arg01, fp
17f10     1C 12 06 F1 | 	add	arg01, #28
17f14     09 01 68 FC | 	wrlong	#0, arg01
17f18     A7 12 02 FB | 	rdlong	arg01, fp
17f1c     20 12 06 F1 | 	add	arg01, #32
17f20     09 01 68 FC | 	wrlong	#0, arg01
17f24                 | ' lpoke base2+28,$0000_0000
17f24                 | ' lpoke base2+32,0 
17f24                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
17f24     1C 4E 05 F1 | 	add	fp, #28
17f28     A7 2C 02 FB | 	rdlong	local04, fp
17f2c     24 4E 85 F1 | 	sub	fp, #36
17f30     08 2C 0E F2 | 	cmp	local04, #8 wz
17f34     18 00 90 5D |  if_ne	jmp	#LR__1933
17f38     08 4E 05 F1 | 	add	fp, #8
17f3c     A7 12 02 FB | 	rdlong	arg01, fp
17f40     08 4E 85 F1 | 	sub	fp, #8
17f44     24 12 06 F1 | 	add	arg01, #36
17f48     09 01 68 FC | 	wrlong	#0, arg01
17f4c     34 00 90 FD | 	jmp	#LR__1934
17f50                 | LR__1933
17f50     08 4E 05 F1 | 	add	fp, #8
17f54     A7 12 02 FB | 	rdlong	arg01, fp
17f58     24 12 06 F1 | 	add	arg01, #36
17f5c     1C 4E 05 F1 | 	add	fp, #28
17f60     A7 14 02 FB | 	rdlong	arg02, fp
17f64     24 4E 85 F1 | 	sub	fp, #36
17f68     09 14 66 F0 | 	shl	arg02, #9
17f6c     0C 00 00 FF 
17f70     D8 E4 05 F1 | 	add	objptr, ##6360
17f74     F2 14 02 F1 | 	add	arg02, objptr
17f78     0C 00 00 FF 
17f7c     D8 E4 85 F1 | 	sub	objptr, ##6360
17f80     09 15 62 FC | 	wrlong	arg02, arg01
17f84                 | LR__1934
17f84     08 4E 05 F1 | 	add	fp, #8
17f88     A7 12 02 FB | 	rdlong	arg01, fp
17f8c     28 12 06 F1 | 	add	arg01, #40
17f90     0C 4E 05 F1 | 	add	fp, #12
17f94     A7 14 02 FB | 	rdlong	arg02, fp
17f98     09 15 62 FC | 	wrlong	arg02, arg01
17f9c     0C 4E 85 F1 | 	sub	fp, #12
17fa0     A7 12 02 FB | 	rdlong	arg01, fp
17fa4     2C 12 06 F1 | 	add	arg01, #44
17fa8     24 4E 05 F1 | 	add	fp, #36
17fac     A7 14 02 FB | 	rdlong	arg02, fp
17fb0     09 15 62 FC | 	wrlong	arg02, arg01
17fb4                 | ' lpoke base2+40,speed 
17fb4                 | ' lpoke base2+44,sus 
17fb4                 | ' if delay>0 then waitms(delay) 
17fb4     04 4E 85 F1 | 	sub	fp, #4
17fb8     A7 2C 02 FB | 	rdlong	local04, fp
17fbc     28 4E 85 F1 | 	sub	fp, #40
17fc0     01 2C 56 F2 | 	cmps	local04, #1 wc
17fc4     28 4E 05 31 |  if_ae	add	fp, #40
17fc8     A7 12 02 3B |  if_ae	rdlong	arg01, fp
17fcc     28 4E 85 31 |  if_ae	sub	fp, #40
17fd0     60 E2 B0 3D |  if_ae	call	#__system___waitms
17fd4     A7 F0 03 F6 | 	mov	ptra, fp
17fd8     B2 00 A0 FD | 	call	#popregs_
17fdc                 | _do_play_ret
17fdc     2D 00 64 FD | 	ret
17fe0                 | 
17fe0                 | ' 
17fe0                 | ' '-------------------- plot
17fe0                 | ' 
17fe0                 | ' sub do_plot
17fe0                 | _do_plot
17fe0     00 4A 05 F6 | 	mov	COUNT_, #0
17fe4     A8 00 A0 FD | 	call	#pushregs_
17fe8     20 F0 07 F1 | 	add	ptra, #32
17fec     F0 52 BF FD | 	call	#_pop
17ff0     FD 16 02 F6 | 	mov	arg03, result1
17ff4     FE 14 02 F6 | 	mov	arg02, result2
17ff8     FF 12 02 F6 | 	mov	arg01, result3
17ffc     0C 4E 05 F1 | 	add	fp, #12
18000     A7 16 62 FC | 	wrlong	arg03, fp
18004     04 4E 05 F1 | 	add	fp, #4
18008     A7 14 62 FC | 	wrlong	arg02, fp
1800c     04 4E 05 F1 | 	add	fp, #4
18010     A7 12 62 FC | 	wrlong	arg01, fp
18014     14 4E 85 F1 | 	sub	fp, #20
18018     C4 52 BF FD | 	call	#_pop
1801c     FF 16 02 F6 | 	mov	arg03, result3
18020     A7 FA 61 FC | 	wrlong	result1, fp
18024     04 4E 05 F1 | 	add	fp, #4
18028     A7 FC 61 FC | 	wrlong	result2, fp
1802c     04 4E 05 F1 | 	add	fp, #4
18030     A7 16 62 FC | 	wrlong	arg03, fp
18034     08 4E 85 F1 | 	sub	fp, #8
18038     A7 12 02 F6 | 	mov	arg01, fp
1803c     84 54 BF FD | 	call	#_converttoint
18040     18 4E 05 F1 | 	add	fp, #24
18044     A7 FA 61 FC | 	wrlong	result1, fp
18048     0C 4E 85 F1 | 	sub	fp, #12
1804c     A7 12 02 F6 | 	mov	arg01, fp
18050     0C 4E 85 F1 | 	sub	fp, #12
18054     6C 54 BF FD | 	call	#_converttoint
18058     1C 4E 05 F1 | 	add	fp, #28
1805c     A7 FA 61 FC | 	wrlong	result1, fp
18060     04 4E 85 F1 | 	sub	fp, #4
18064     A7 16 02 FB | 	rdlong	arg03, fp
18068     37 00 00 FF 
1806c     2C E4 05 F1 | 	add	objptr, ##28204
18070     F2 16 62 FC | 	wrlong	arg03, objptr
18074     04 4E 05 F1 | 	add	fp, #4
18078     A7 14 02 FB | 	rdlong	arg02, fp
1807c     1C 4E 85 F1 | 	sub	fp, #28
18080     04 E4 05 F1 | 	add	objptr, #4
18084     F2 14 62 FC | 	wrlong	arg02, objptr
18088     04 E4 85 F1 | 	sub	objptr, #4
1808c     F2 12 02 FB | 	rdlong	arg01, objptr
18090     04 E4 85 F1 | 	sub	objptr, #4
18094     F2 16 02 FB | 	rdlong	arg03, objptr
18098     37 00 00 FF 
1809c     28 E4 85 F1 | 	sub	objptr, ##28200
180a0     44 B5 B0 FD | 	call	#_hg010b_spin2_putpixel
180a4     A7 F0 03 F6 | 	mov	ptra, fp
180a8     B2 00 A0 FD | 	call	#popregs_
180ac                 | _do_plot_ret
180ac     2D 00 64 FD | 	ret
180b0                 | 
180b0                 | ' 
180b0                 | ' '-------------------- poke
180b0                 | ' 
180b0                 | ' sub do_poke
180b0                 | _do_poke
180b0     01 4A 05 F6 | 	mov	COUNT_, #1
180b4     A8 00 A0 FD | 	call	#pushregs_
180b8     20 F0 07 F1 | 	add	ptra, #32
180bc     20 52 BF FD | 	call	#_pop
180c0     FD 14 02 F6 | 	mov	arg02, result1
180c4     FE 12 02 F6 | 	mov	arg01, result2
180c8     FF 26 02 F6 | 	mov	local01, result3
180cc     A7 14 62 FC | 	wrlong	arg02, fp
180d0     04 4E 05 F1 | 	add	fp, #4
180d4     A7 12 62 FC | 	wrlong	arg01, fp
180d8     04 4E 05 F1 | 	add	fp, #4
180dc     A7 26 62 FC | 	wrlong	local01, fp
180e0     08 4E 85 F1 | 	sub	fp, #8
180e4     F8 51 BF FD | 	call	#_pop
180e8     FF 26 02 F6 | 	mov	local01, result3
180ec     0C 4E 05 F1 | 	add	fp, #12
180f0     A7 FA 61 FC | 	wrlong	result1, fp
180f4     04 4E 05 F1 | 	add	fp, #4
180f8     A7 FC 61 FC | 	wrlong	result2, fp
180fc     04 4E 05 F1 | 	add	fp, #4
18100     A7 26 62 FC | 	wrlong	local01, fp
18104     08 4E 85 F1 | 	sub	fp, #8
18108     A7 12 02 F6 | 	mov	arg01, fp
1810c     0C 4E 85 F1 | 	sub	fp, #12
18110     B0 53 BF FD | 	call	#_converttoint
18114     18 4E 05 F1 | 	add	fp, #24
18118     A7 FA 61 FC | 	wrlong	result1, fp
1811c     18 4E 85 F1 | 	sub	fp, #24
18120     A7 12 02 F6 | 	mov	arg01, fp
18124     9C 53 BF FD | 	call	#_converttoint
18128     1C 4E 05 F1 | 	add	fp, #28
1812c     A7 FA 61 FC | 	wrlong	result1, fp
18130                 | ' t1=pop() 'value
18130                 | ' t2=pop() 
18130                 | ' a=converttoint(t2) : v=converttoint(t1)
18130                 | ' if a<$80000 then poke a,v else pspoke a,v
18130     04 4E 85 F1 | 	sub	fp, #4
18134     A7 26 02 FB | 	rdlong	local01, fp
18138     18 4E 85 F1 | 	sub	fp, #24
1813c     00 04 00 FF 
18140     00 26 16 F2 | 	cmp	local01, ##524288 wc
18144     1C 00 90 3D |  if_ae	jmp	#LR__1940
18148     18 4E 05 F1 | 	add	fp, #24
1814c     A7 12 02 FB | 	rdlong	arg01, fp
18150     04 4E 05 F1 | 	add	fp, #4
18154     A7 14 02 FB | 	rdlong	arg02, fp
18158     1C 4E 85 F1 | 	sub	fp, #28
1815c     09 15 42 FC | 	wrbyte	arg02, arg01
18160     18 00 90 FD | 	jmp	#LR__1941
18164                 | LR__1940
18164     18 4E 05 F1 | 	add	fp, #24
18168     A7 12 02 FB | 	rdlong	arg01, fp
1816c     04 4E 05 F1 | 	add	fp, #4
18170     A7 14 02 FB | 	rdlong	arg02, fp
18174     1C 4E 85 F1 | 	sub	fp, #28
18178     04 A6 B0 FD | 	call	#_pspoke
1817c                 | LR__1941
1817c     A7 F0 03 F6 | 	mov	ptra, fp
18180     B2 00 A0 FD | 	call	#popregs_
18184                 | _do_poke_ret
18184     2D 00 64 FD | 	ret
18188                 | 
18188                 | ' 
18188                 | ' '-------------------- pop
18188                 | ' 
18188                 | ' sub do_pop()
18188                 | _do_pop
18188                 | ' if gosubtop>0 then  gosubtop -=1 
18188     50 00 00 FF 
1818c     34 E5 05 F1 | 	add	objptr, ##41268
18190     F2 00 02 FB | 	rdlong	_var01, objptr
18194     50 00 00 FF 
18198     34 E5 85 F1 | 	sub	objptr, ##41268
1819c     01 00 56 F2 | 	cmps	_var01, #1 wc
181a0     50 00 00 3F 
181a4     34 E5 05 31 |  if_ae	add	objptr, ##41268
181a8     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
181ac     01 00 86 31 |  if_ae	sub	_var01, #1
181b0     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
181b4     50 00 00 3F 
181b8     34 E5 85 31 |  if_ae	sub	objptr, ##41268
181bc                 | _do_pop_ret
181bc     2D 00 64 FD | 	ret
181c0                 | 
181c0                 | ' 
181c0                 | ' '-------------------- position
181c0                 | ' 
181c0                 | ' sub do_position
181c0                 | _do_position
181c0     01 4A 05 F6 | 	mov	COUNT_, #1
181c4     A8 00 A0 FD | 	call	#pushregs_
181c8     18 F0 07 F1 | 	add	ptra, #24
181cc     10 51 BF FD | 	call	#_pop
181d0     FD 14 02 F6 | 	mov	arg02, result1
181d4     FE 12 02 F6 | 	mov	arg01, result2
181d8     FF 26 02 F6 | 	mov	local01, result3
181dc     A7 14 62 FC | 	wrlong	arg02, fp
181e0     04 4E 05 F1 | 	add	fp, #4
181e4     A7 12 62 FC | 	wrlong	arg01, fp
181e8     04 4E 05 F1 | 	add	fp, #4
181ec     A7 26 62 FC | 	wrlong	local01, fp
181f0     08 4E 85 F1 | 	sub	fp, #8
181f4     E8 50 BF FD | 	call	#_pop
181f8     FF 26 02 F6 | 	mov	local01, result3
181fc     0C 4E 05 F1 | 	add	fp, #12
18200     A7 FA 61 FC | 	wrlong	result1, fp
18204     04 4E 05 F1 | 	add	fp, #4
18208     A7 FC 61 FC | 	wrlong	result2, fp
1820c     04 4E 05 F1 | 	add	fp, #4
18210     A7 26 62 FC | 	wrlong	local01, fp
18214     08 4E 85 F1 | 	sub	fp, #8
18218     A7 12 02 F6 | 	mov	arg01, fp
1821c     0C 4E 85 F1 | 	sub	fp, #12
18220     A0 52 BF FD | 	call	#_converttoint
18224     FD 26 02 F6 | 	mov	local01, result1
18228     A7 12 02 F6 | 	mov	arg01, fp
1822c     94 52 BF FD | 	call	#_converttoint
18230     FD 14 02 F6 | 	mov	arg02, result1
18234     13 13 02 F6 | 	mov	arg01, local01
18238     70 BF B0 FD | 	call	#_hg010b_spin2_setcursorpos
1823c     A7 F0 03 F6 | 	mov	ptra, fp
18240     B2 00 A0 FD | 	call	#popregs_
18244                 | _do_position_ret
18244     2D 00 64 FD | 	ret
18248                 | 
18248                 | ' 
18248                 | ' '-------------------- print
18248                 | ' 
18248                 | ' sub do_print  
18248                 | _do_print
18248     0B 4A 05 F6 | 	mov	COUNT_, #11
1824c     A8 00 A0 FD | 	call	#pushregs_
18250     00 2C 06 F6 | 	mov	local04, #0
18254     88 50 BF FD | 	call	#_pop
18258     FD 2E 02 F6 | 	mov	local05, result1
1825c     FE 30 02 F6 | 	mov	local06, result2
18260     FF 32 02 F6 | 	mov	local07, result3
18264     17 27 02 F6 | 	mov	local01, local05
18268     18 29 02 F6 | 	mov	local02, local06
1826c     19 2B 02 F6 | 	mov	local03, local07
18270                 | '  
18270                 | ' r=0
18270                 | ' t1=pop() 
18270                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18270     21 2A 0E F2 | 	cmp	local03, #33 wz
18274     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18278     20 00 90 5D |  if_ne	jmp	#LR__1950
1827c     15 2D 02 F6 | 	mov	local04, local03
18280     5C 50 BF FD | 	call	#_pop
18284     FD 2E 02 F6 | 	mov	local05, result1
18288     FE 30 02 F6 | 	mov	local06, result2
1828c     FF 32 02 F6 | 	mov	local07, result3
18290     17 27 02 F6 | 	mov	local01, local05
18294     18 29 02 F6 | 	mov	local02, local06
18298     19 2B 02 F6 | 	mov	local03, local07
1829c                 | LR__1950
1829c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
1829c     20 2A 0E F2 | 	cmp	local03, #32 wz
182a0     15 2D 02 A6 |  if_e	mov	local04, local03
182a4                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
182a4     FF 2A 0E F2 | 	cmp	local03, #255 wz
182a8     10 00 90 5D |  if_ne	jmp	#LR__1951
182ac     13 13 02 F6 | 	mov	arg01, local01
182b0     00 14 06 F6 | 	mov	arg02, #0
182b4     98 A2 B0 FD | 	call	#_printerror
182b8     D4 04 90 FD | 	jmp	#LR__1970
182bc                 | LR__1951
182bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
182bc     2B 2A 0E F2 | 	cmp	local03, #43 wz
182c0     14 00 90 5D |  if_ne	jmp	#LR__1952
182c4     13 13 02 F6 | 	mov	arg01, local01
182c8     8C 51 BF FD | 	call	#_convertstring
182cc     FD 2E 02 F6 | 	mov	local05, result1
182d0     17 27 02 F6 | 	mov	local01, local05
182d4     1F 2A 06 F6 | 	mov	local03, #31
182d8                 | LR__1952
182d8                 | ' 
182d8                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
182d8     2C 2A 0E F2 | 	cmp	local03, #44 wz
182dc     80 00 90 5D |  if_ne	jmp	#LR__1953
182e0     00 12 06 F6 | 	mov	arg01, #0
182e4     FC 38 B1 FD | 	call	#__system___getiolock_0600
182e8     FD 12 02 F6 | 	mov	arg01, result1
182ec     50 DC B0 FD | 	call	#__system___lockmem
182f0     B2 01 00 FF 
182f4     02 15 06 F6 | 	mov	arg02, ##@LR__5908
182f8     00 12 06 F6 | 	mov	arg01, #0
182fc     00 16 06 F6 | 	mov	arg03, #0
18300     34 E9 B0 FD | 	call	#__system___basic_print_string
18304     0A 34 06 F6 | 	mov	local08, #10
18308     00 12 06 F6 | 	mov	arg01, #0
1830c     13 15 02 F6 | 	mov	arg02, local01
18310     00 16 06 F6 | 	mov	arg03, #0
18314     0A 18 06 F6 | 	mov	arg04, #10
18318     60 E9 B0 FD | 	call	#__system___basic_print_integer
1831c     FD 36 02 F6 | 	mov	local09, result1
18320     00 12 06 F6 | 	mov	arg01, #0
18324     0A 14 06 F6 | 	mov	arg02, #10
18328     00 16 06 F6 | 	mov	arg03, #0
1832c     B0 E8 B0 FD | 	call	#__system___basic_print_char
18330     01 38 06 F6 | 	mov	local10, #1
18334     00 12 06 F6 | 	mov	arg01, #0
18338     A8 38 B1 FD | 	call	#__system___getiolock_0600
1833c     FD 00 68 FC | 	wrlong	#0, result1
18340     00 3A 06 F6 | 	mov	local11, #0
18344     98 4F BF FD | 	call	#_pop
18348     FD 2E 02 F6 | 	mov	local05, result1
1834c     FE 30 02 F6 | 	mov	local06, result2
18350     FF 32 02 F6 | 	mov	local07, result3
18354     17 27 02 F6 | 	mov	local01, local05
18358     18 29 02 F6 | 	mov	local02, local06
1835c     19 2B 02 F6 | 	mov	local03, local07
18360                 | LR__1953
18360                 | ' 
18360                 | ' if r=print_mod_comma  then
18360     21 2C 0E F2 | 	cmp	local04, #33 wz
18364     AC 01 90 5D |  if_ne	jmp	#LR__1958
18368                 | '   if t1.result_type=result_int then print t1.result.iresult,
18368     1C 2A 0E F2 | 	cmp	local03, #28 wz
1836c     64 00 90 5D |  if_ne	jmp	#LR__1954
18370     00 12 06 F6 | 	mov	arg01, #0
18374     6C 38 B1 FD | 	call	#__system___getiolock_0600
18378     FD 12 02 F6 | 	mov	arg01, result1
1837c     C0 DB B0 FD | 	call	#__system___lockmem
18380     00 30 06 F6 | 	mov	local06, #0
18384     00 12 06 F6 | 	mov	arg01, #0
18388     13 15 02 F6 | 	mov	arg02, local01
1838c     00 16 06 F6 | 	mov	arg03, #0
18390     0A 18 06 F6 | 	mov	arg04, #10
18394     E4 E8 B0 FD | 	call	#__system___basic_print_integer
18398     FD 32 02 F6 | 	mov	local07, result1
1839c     18 2F 02 F6 | 	mov	local05, local06
183a0     19 2F 02 F1 | 	add	local05, local07
183a4     00 3A 06 F6 | 	mov	local11, #0
183a8     00 12 06 F6 | 	mov	arg01, #0
183ac     09 14 06 F6 | 	mov	arg02, #9
183b0     00 16 06 F6 | 	mov	arg03, #0
183b4     28 E8 B0 FD | 	call	#__system___basic_print_char
183b8     FD 36 02 F6 | 	mov	local09, result1
183bc     FD 2E 02 F1 | 	add	local05, result1
183c0     00 12 06 F6 | 	mov	arg01, #0
183c4     1C 38 B1 FD | 	call	#__system___getiolock_0600
183c8     FD 00 68 FC | 	wrlong	#0, result1
183cc     00 FA 05 F6 | 	mov	result1, #0
183d0     00 38 06 F6 | 	mov	local10, #0
183d4                 | LR__1954
183d4                 | '   if t1.result_type=result_uint then print t1.result.uresult,
183d4     1D 2A 0E F2 | 	cmp	local03, #29 wz
183d8     64 00 90 5D |  if_ne	jmp	#LR__1955
183dc     00 12 06 F6 | 	mov	arg01, #0
183e0     00 38 B1 FD | 	call	#__system___getiolock_0600
183e4     FD 12 02 F6 | 	mov	arg01, result1
183e8     54 DB B0 FD | 	call	#__system___lockmem
183ec     00 30 06 F6 | 	mov	local06, #0
183f0     00 12 06 F6 | 	mov	arg01, #0
183f4     13 15 02 F6 | 	mov	arg02, local01
183f8     00 16 06 F6 | 	mov	arg03, #0
183fc     0A 18 06 F6 | 	mov	arg04, #10
18400     B8 E8 B0 FD | 	call	#__system___basic_print_unsigned
18404     FD 32 02 F6 | 	mov	local07, result1
18408     18 2F 02 F6 | 	mov	local05, local06
1840c     19 2F 02 F1 | 	add	local05, local07
18410     00 3A 06 F6 | 	mov	local11, #0
18414     00 12 06 F6 | 	mov	arg01, #0
18418     09 14 06 F6 | 	mov	arg02, #9
1841c     00 16 06 F6 | 	mov	arg03, #0
18420     BC E7 B0 FD | 	call	#__system___basic_print_char
18424     FD 36 02 F6 | 	mov	local09, result1
18428     FD 2E 02 F1 | 	add	local05, result1
1842c     00 12 06 F6 | 	mov	arg01, #0
18430     B0 37 B1 FD | 	call	#__system___getiolock_0600
18434     FD 00 68 FC | 	wrlong	#0, result1
18438     00 FA 05 F6 | 	mov	result1, #0
1843c     00 38 06 F6 | 	mov	local10, #0
18440                 | LR__1955
18440                 | '   if t1.result_type=result_float then print t1.result.fresult,
18440     1E 2A 0E F2 | 	cmp	local03, #30 wz
18444     64 00 90 5D |  if_ne	jmp	#LR__1956
18448     00 12 06 F6 | 	mov	arg01, #0
1844c     94 37 B1 FD | 	call	#__system___getiolock_0600
18450     FD 12 02 F6 | 	mov	arg01, result1
18454     E8 DA B0 FD | 	call	#__system___lockmem
18458     00 30 06 F6 | 	mov	local06, #0
1845c     00 12 06 F6 | 	mov	arg01, #0
18460     13 15 02 F6 | 	mov	arg02, local01
18464     00 16 06 F6 | 	mov	arg03, #0
18468     23 18 06 F6 | 	mov	arg04, #35
1846c     64 0F B1 FD | 	call	#__system___basic_print_float
18470     FD 32 02 F6 | 	mov	local07, result1
18474     18 2F 02 F6 | 	mov	local05, local06
18478     19 2F 02 F1 | 	add	local05, local07
1847c     00 3A 06 F6 | 	mov	local11, #0
18480     00 12 06 F6 | 	mov	arg01, #0
18484     09 14 06 F6 | 	mov	arg02, #9
18488     00 16 06 F6 | 	mov	arg03, #0
1848c     50 E7 B0 FD | 	call	#__system___basic_print_char
18490     FD 36 02 F6 | 	mov	local09, result1
18494     FD 2E 02 F1 | 	add	local05, result1
18498     00 12 06 F6 | 	mov	arg01, #0
1849c     44 37 B1 FD | 	call	#__system___getiolock_0600
184a0     FD 00 68 FC | 	wrlong	#0, result1
184a4     00 FA 05 F6 | 	mov	result1, #0
184a8     00 38 06 F6 | 	mov	local10, #0
184ac                 | LR__1956
184ac                 | '   if t1.result_type=result_string then print t1.result.sresult,
184ac     1F 2A 0E F2 | 	cmp	local03, #31 wz
184b0     60 00 90 5D |  if_ne	jmp	#LR__1957
184b4     00 12 06 F6 | 	mov	arg01, #0
184b8     28 37 B1 FD | 	call	#__system___getiolock_0600
184bc     FD 12 02 F6 | 	mov	arg01, result1
184c0     7C DA B0 FD | 	call	#__system___lockmem
184c4     00 30 06 F6 | 	mov	local06, #0
184c8     00 12 06 F6 | 	mov	arg01, #0
184cc     13 15 02 F6 | 	mov	arg02, local01
184d0     00 16 06 F6 | 	mov	arg03, #0
184d4     60 E7 B0 FD | 	call	#__system___basic_print_string
184d8     FD 32 02 F6 | 	mov	local07, result1
184dc     18 2F 02 F6 | 	mov	local05, local06
184e0     19 2F 02 F1 | 	add	local05, local07
184e4     00 3A 06 F6 | 	mov	local11, #0
184e8     00 12 06 F6 | 	mov	arg01, #0
184ec     09 14 06 F6 | 	mov	arg02, #9
184f0     00 16 06 F6 | 	mov	arg03, #0
184f4     E8 E6 B0 FD | 	call	#__system___basic_print_char
184f8     FD 36 02 F6 | 	mov	local09, result1
184fc     FD 2E 02 F1 | 	add	local05, result1
18500     00 12 06 F6 | 	mov	arg01, #0
18504     DC 36 B1 FD | 	call	#__system___getiolock_0600
18508     FD 00 68 FC | 	wrlong	#0, result1
1850c     00 FA 05 F6 | 	mov	result1, #0
18510     00 38 06 F6 | 	mov	local10, #0
18514                 | LR__1957
18514                 | LR__1958
18514                 | ' if r=print_mod_semicolon then 
18514     22 2C 0E F2 | 	cmp	local04, #34 wz
18518     1C 01 90 5D |  if_ne	jmp	#LR__1963
1851c                 | '   if t1.result_type=result_int then print t1.result.iresult;
1851c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18520     50 00 90 5D |  if_ne	jmp	#LR__1959
18524     00 12 06 F6 | 	mov	arg01, #0
18528     B8 36 B1 FD | 	call	#__system___getiolock_0600
1852c     FD 12 02 F6 | 	mov	arg01, result1
18530     0C DA B0 FD | 	call	#__system___lockmem
18534     00 30 06 F6 | 	mov	local06, #0
18538     00 38 06 F6 | 	mov	local10, #0
1853c     0A 3A 06 F6 | 	mov	local11, #10
18540     00 12 06 F6 | 	mov	arg01, #0
18544     13 15 02 F6 | 	mov	arg02, local01
18548     00 16 06 F6 | 	mov	arg03, #0
1854c     0A 18 06 F6 | 	mov	arg04, #10
18550     28 E7 B0 FD | 	call	#__system___basic_print_integer
18554     FD 32 02 F6 | 	mov	local07, result1
18558     18 2F 02 F6 | 	mov	local05, local06
1855c     19 2F 02 F1 | 	add	local05, local07
18560     00 12 06 F6 | 	mov	arg01, #0
18564     7C 36 B1 FD | 	call	#__system___getiolock_0600
18568     FD 00 68 FC | 	wrlong	#0, result1
1856c     00 FA 05 F6 | 	mov	result1, #0
18570     00 36 06 F6 | 	mov	local09, #0
18574                 | LR__1959
18574                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18574     1D 2A 0E F2 | 	cmp	local03, #29 wz
18578     50 00 90 5D |  if_ne	jmp	#LR__1960
1857c     00 12 06 F6 | 	mov	arg01, #0
18580     60 36 B1 FD | 	call	#__system___getiolock_0600
18584     FD 12 02 F6 | 	mov	arg01, result1
18588     B4 D9 B0 FD | 	call	#__system___lockmem
1858c     00 30 06 F6 | 	mov	local06, #0
18590     00 38 06 F6 | 	mov	local10, #0
18594     0A 3A 06 F6 | 	mov	local11, #10
18598     00 12 06 F6 | 	mov	arg01, #0
1859c     13 15 02 F6 | 	mov	arg02, local01
185a0     00 16 06 F6 | 	mov	arg03, #0
185a4     0A 18 06 F6 | 	mov	arg04, #10
185a8     10 E7 B0 FD | 	call	#__system___basic_print_unsigned
185ac     FD 32 02 F6 | 	mov	local07, result1
185b0     18 2F 02 F6 | 	mov	local05, local06
185b4     19 2F 02 F1 | 	add	local05, local07
185b8     00 12 06 F6 | 	mov	arg01, #0
185bc     24 36 B1 FD | 	call	#__system___getiolock_0600
185c0     FD 00 68 FC | 	wrlong	#0, result1
185c4     00 FA 05 F6 | 	mov	result1, #0
185c8     00 36 06 F6 | 	mov	local09, #0
185cc                 | LR__1960
185cc                 | '   if t1.result_type=result_float then print t1.result.fresult;
185cc     1E 2A 0E F2 | 	cmp	local03, #30 wz
185d0     30 00 90 5D |  if_ne	jmp	#LR__1961
185d4     00 12 06 F6 | 	mov	arg01, #0
185d8     08 36 B1 FD | 	call	#__system___getiolock_0600
185dc     FD 12 02 F6 | 	mov	arg01, result1
185e0     5C D9 B0 FD | 	call	#__system___lockmem
185e4     00 12 06 F6 | 	mov	arg01, #0
185e8     13 15 02 F6 | 	mov	arg02, local01
185ec     00 16 06 F6 | 	mov	arg03, #0
185f0     23 18 06 F6 | 	mov	arg04, #35
185f4     DC 0D B1 FD | 	call	#__system___basic_print_float
185f8     00 12 06 F6 | 	mov	arg01, #0
185fc     E4 35 B1 FD | 	call	#__system___getiolock_0600
18600     FD 00 68 FC | 	wrlong	#0, result1
18604                 | LR__1961
18604                 | '   if t1.result_type=result_string then print t1.result.sresult;
18604     1F 2A 0E F2 | 	cmp	local03, #31 wz
18608     2C 00 90 5D |  if_ne	jmp	#LR__1962
1860c     00 12 06 F6 | 	mov	arg01, #0
18610     D0 35 B1 FD | 	call	#__system___getiolock_0600
18614     FD 12 02 F6 | 	mov	arg01, result1
18618     24 D9 B0 FD | 	call	#__system___lockmem
1861c     00 12 06 F6 | 	mov	arg01, #0
18620     13 15 02 F6 | 	mov	arg02, local01
18624     00 16 06 F6 | 	mov	arg03, #0
18628     0C E6 B0 FD | 	call	#__system___basic_print_string
1862c     00 12 06 F6 | 	mov	arg01, #0
18630     B0 35 B1 FD | 	call	#__system___getiolock_0600
18634     FD 00 68 FC | 	wrlong	#0, result1
18638                 | LR__1962
18638                 | LR__1963
18638                 | ' if r=0 then 
18638     00 2C 0E F2 | 	cmp	local04, #0 wz
1863c     1C 01 90 5D |  if_ne	jmp	#LR__1968
18640                 | '   if t1.result_type=result_int then print t1.result.iresult
18640     1C 2A 0E F2 | 	cmp	local03, #28 wz
18644     40 00 90 5D |  if_ne	jmp	#LR__1964
18648     00 12 06 F6 | 	mov	arg01, #0
1864c     94 35 B1 FD | 	call	#__system___getiolock_0600
18650     FD 12 02 F6 | 	mov	arg01, result1
18654     E8 D8 B0 FD | 	call	#__system___lockmem
18658     00 12 06 F6 | 	mov	arg01, #0
1865c     13 15 02 F6 | 	mov	arg02, local01
18660     00 16 06 F6 | 	mov	arg03, #0
18664     0A 18 06 F6 | 	mov	arg04, #10
18668     10 E6 B0 FD | 	call	#__system___basic_print_integer
1866c     00 12 06 F6 | 	mov	arg01, #0
18670     0A 14 06 F6 | 	mov	arg02, #10
18674     00 16 06 F6 | 	mov	arg03, #0
18678     64 E5 B0 FD | 	call	#__system___basic_print_char
1867c     00 12 06 F6 | 	mov	arg01, #0
18680     60 35 B1 FD | 	call	#__system___getiolock_0600
18684     FD 00 68 FC | 	wrlong	#0, result1
18688                 | LR__1964
18688                 | '   if t1.result_type=result_uint then print t1.result.uresult
18688     1D 2A 0E F2 | 	cmp	local03, #29 wz
1868c     40 00 90 5D |  if_ne	jmp	#LR__1965
18690     00 12 06 F6 | 	mov	arg01, #0
18694     4C 35 B1 FD | 	call	#__system___getiolock_0600
18698     FD 12 02 F6 | 	mov	arg01, result1
1869c     A0 D8 B0 FD | 	call	#__system___lockmem
186a0     00 12 06 F6 | 	mov	arg01, #0
186a4     13 15 02 F6 | 	mov	arg02, local01
186a8     00 16 06 F6 | 	mov	arg03, #0
186ac     0A 18 06 F6 | 	mov	arg04, #10
186b0     08 E6 B0 FD | 	call	#__system___basic_print_unsigned
186b4     00 12 06 F6 | 	mov	arg01, #0
186b8     0A 14 06 F6 | 	mov	arg02, #10
186bc     00 16 06 F6 | 	mov	arg03, #0
186c0     1C E5 B0 FD | 	call	#__system___basic_print_char
186c4     00 12 06 F6 | 	mov	arg01, #0
186c8     18 35 B1 FD | 	call	#__system___getiolock_0600
186cc     FD 00 68 FC | 	wrlong	#0, result1
186d0                 | LR__1965
186d0                 | '   if t1.result_type=result_float then print t1.result.fresult
186d0     1E 2A 0E F2 | 	cmp	local03, #30 wz
186d4     40 00 90 5D |  if_ne	jmp	#LR__1966
186d8     00 12 06 F6 | 	mov	arg01, #0
186dc     04 35 B1 FD | 	call	#__system___getiolock_0600
186e0     FD 12 02 F6 | 	mov	arg01, result1
186e4     58 D8 B0 FD | 	call	#__system___lockmem
186e8     00 12 06 F6 | 	mov	arg01, #0
186ec     13 15 02 F6 | 	mov	arg02, local01
186f0     00 16 06 F6 | 	mov	arg03, #0
186f4     23 18 06 F6 | 	mov	arg04, #35
186f8     D8 0C B1 FD | 	call	#__system___basic_print_float
186fc     00 12 06 F6 | 	mov	arg01, #0
18700     0A 14 06 F6 | 	mov	arg02, #10
18704     00 16 06 F6 | 	mov	arg03, #0
18708     D4 E4 B0 FD | 	call	#__system___basic_print_char
1870c     00 12 06 F6 | 	mov	arg01, #0
18710     D0 34 B1 FD | 	call	#__system___getiolock_0600
18714     FD 00 68 FC | 	wrlong	#0, result1
18718                 | LR__1966
18718                 | '   if t1.result_type=result_string then print t1.result.sresult
18718     1F 2A 0E F2 | 	cmp	local03, #31 wz
1871c     3C 00 90 5D |  if_ne	jmp	#LR__1967
18720     00 12 06 F6 | 	mov	arg01, #0
18724     BC 34 B1 FD | 	call	#__system___getiolock_0600
18728     FD 12 02 F6 | 	mov	arg01, result1
1872c     10 D8 B0 FD | 	call	#__system___lockmem
18730     00 12 06 F6 | 	mov	arg01, #0
18734     13 15 02 F6 | 	mov	arg02, local01
18738     00 16 06 F6 | 	mov	arg03, #0
1873c     F8 E4 B0 FD | 	call	#__system___basic_print_string
18740     00 12 06 F6 | 	mov	arg01, #0
18744     0A 14 06 F6 | 	mov	arg02, #10
18748     00 16 06 F6 | 	mov	arg03, #0
1874c     90 E4 B0 FD | 	call	#__system___basic_print_char
18750     00 12 06 F6 | 	mov	arg01, #0
18754     8C 34 B1 FD | 	call	#__system___getiolock_0600
18758     FD 00 68 FC | 	wrlong	#0, result1
1875c                 | LR__1967
1875c                 | LR__1968
1875c                 | ' if r=print_mod_empty then print
1875c     20 2C 0E F2 | 	cmp	local04, #32 wz
18760     2C 00 90 5D |  if_ne	jmp	#LR__1969
18764     00 12 06 F6 | 	mov	arg01, #0
18768     78 34 B1 FD | 	call	#__system___getiolock_0600
1876c     FD 12 02 F6 | 	mov	arg01, result1
18770     CC D7 B0 FD | 	call	#__system___lockmem
18774     00 12 06 F6 | 	mov	arg01, #0
18778     0A 14 06 F6 | 	mov	arg02, #10
1877c     00 16 06 F6 | 	mov	arg03, #0
18780     5C E4 B0 FD | 	call	#__system___basic_print_char
18784     00 12 06 F6 | 	mov	arg01, #0
18788     58 34 B1 FD | 	call	#__system___getiolock_0600
1878c     FD 00 68 FC | 	wrlong	#0, result1
18790                 | LR__1969
18790                 | LR__1970
18790     A7 F0 03 F6 | 	mov	ptra, fp
18794     B2 00 A0 FD | 	call	#popregs_
18798                 | _do_print_ret
18798     2D 00 64 FD | 	ret
1879c                 | 
1879c                 | ' 
1879c                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
1879c                 | ' 
1879c                 | ' sub do_push
1879c                 | _do_push
1879c                 | ' if stackpointer<maxstack then 
1879c     43 00 00 FF 
187a0     58 E4 05 F1 | 	add	objptr, ##34392
187a4     F2 00 02 FB | 	rdlong	_var01, objptr
187a8     43 00 00 FF 
187ac     58 E4 85 F1 | 	sub	objptr, ##34392
187b0     01 00 00 FF 
187b4     00 00 56 F2 | 	cmps	_var01, ##512 wc
187b8     F8 00 90 3D |  if_ae	jmp	#LR__1980
187bc     4A 00 00 FF 
187c0     80 E4 05 F1 | 	add	objptr, ##38016
187c4     F2 02 02 FB | 	rdlong	_var02, objptr
187c8     01 05 02 F6 | 	mov	_var03, _var02
187cc     01 04 66 F0 | 	shl	_var03, #1
187d0     01 05 02 F1 | 	add	_var03, _var02
187d4     02 04 66 F0 | 	shl	_var03, #2
187d8     03 00 00 FF 
187dc     04 E4 85 F1 | 	sub	objptr, ##1540
187e0     F2 04 02 F1 | 	add	_var03, objptr
187e4     02 01 02 FB | 	rdlong	_var01, _var03
187e8     04 04 06 F1 | 	add	_var03, #4
187ec     02 07 02 FB | 	rdlong	_var04, _var03
187f0     01 05 02 F6 | 	mov	_var03, _var02
187f4     01 04 66 F0 | 	shl	_var03, #1
187f8     01 05 02 F1 | 	add	_var03, _var02
187fc     02 04 66 F0 | 	shl	_var03, #2
18800     F2 04 02 F1 | 	add	_var03, objptr
18804     08 04 06 F1 | 	add	_var03, #8
18808     02 03 02 FB | 	rdlong	_var02, _var03
1880c     04 00 00 FF 
18810     24 E4 85 F1 | 	sub	objptr, ##2084
18814     F2 04 02 FB | 	rdlong	_var03, objptr
18818     02 09 02 F6 | 	mov	_var05, _var03
1881c     01 08 66 F0 | 	shl	_var05, #1
18820     02 09 02 F1 | 	add	_var05, _var03
18824     02 08 66 F0 | 	shl	_var05, #2
18828     0C 00 00 FF 
1882c     0C E4 85 F1 | 	sub	objptr, ##6156
18830     F2 08 02 F1 | 	add	_var05, objptr
18834     04 01 62 FC | 	wrlong	_var01, _var05
18838     0C 00 00 FF 
1883c     0C E4 05 F1 | 	add	objptr, ##6156
18840     F2 08 02 FB | 	rdlong	_var05, objptr
18844     04 05 02 F6 | 	mov	_var03, _var05
18848     01 04 66 F0 | 	shl	_var03, #1
1884c     04 05 02 F1 | 	add	_var03, _var05
18850     02 04 66 F0 | 	shl	_var03, #2
18854     0C 00 00 FF 
18858     0C E4 85 F1 | 	sub	objptr, ##6156
1885c     F2 04 02 F1 | 	add	_var03, objptr
18860     04 04 06 F1 | 	add	_var03, #4
18864     02 07 62 FC | 	wrlong	_var04, _var03
18868     0C 00 00 FF 
1886c     0C E4 05 F1 | 	add	objptr, ##6156
18870     F2 08 02 FB | 	rdlong	_var05, objptr
18874     04 07 02 F6 | 	mov	_var04, _var05
18878     01 06 66 F0 | 	shl	_var04, #1
1887c     04 07 02 F1 | 	add	_var04, _var05
18880     02 06 66 F0 | 	shl	_var04, #2
18884     0C 00 00 FF 
18888     0C E4 85 F1 | 	sub	objptr, ##6156
1888c     F2 06 02 F1 | 	add	_var04, objptr
18890     08 06 06 F1 | 	add	_var04, #8
18894     03 03 62 FC | 	wrlong	_var02, _var04
18898     0C 00 00 FF 
1889c     0C E4 05 F1 | 	add	objptr, ##6156
188a0     F2 00 02 FB | 	rdlong	_var01, objptr
188a4     01 00 06 F1 | 	add	_var01, #1
188a8     F2 00 62 FC | 	wrlong	_var01, objptr
188ac     43 00 00 FF 
188b0     58 E4 85 F1 | 	sub	objptr, ##34392
188b4                 | LR__1980
188b4                 | _do_push_ret
188b4     2D 00 64 FD | 	ret
188b8                 | 
188b8                 | ' 
188b8                 | ' '-------------------- put
188b8                 | ' 
188b8                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
188b8                 | _do_put
188b8     03 4A 05 F6 | 	mov	COUNT_, #3
188bc     A8 00 A0 FD | 	call	#pushregs_
188c0     28 F0 07 F1 | 	add	ptra, #40
188c4     4A 00 00 FF 
188c8     80 E4 05 F1 | 	add	objptr, ##38016
188cc     F2 1A 02 FB | 	rdlong	arg05, objptr
188d0     0D 19 02 F6 | 	mov	arg04, arg05
188d4     01 18 66 F0 | 	shl	arg04, #1
188d8     0D 19 02 F1 | 	add	arg04, arg05
188dc     02 18 66 F0 | 	shl	arg04, #2
188e0     03 00 00 FF 
188e4     04 E4 85 F1 | 	sub	objptr, ##1540
188e8     F2 18 02 F1 | 	add	arg04, objptr
188ec     0C 1B 02 FB | 	rdlong	arg05, arg04
188f0     A7 1A 62 FC | 	wrlong	arg05, fp
188f4                 | ' 
188f4                 | ' numpar=compiledline(lineptr_e).result.uresult
188f4                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
188f4     04 1A 0E F2 | 	cmp	arg05, #4 wz
188f8     47 00 00 FF 
188fc     7C E4 85 F1 | 	sub	objptr, ##36476
18900     48 00 90 5D |  if_ne	jmp	#LR__1990
18904     D8 49 BF FD | 	call	#_pop
18908     FF 1A 02 F6 | 	mov	arg05, result3
1890c     1C 4E 05 F1 | 	add	fp, #28
18910     A7 FA 61 FC | 	wrlong	result1, fp
18914     04 4E 05 F1 | 	add	fp, #4
18918     A7 FC 61 FC | 	wrlong	result2, fp
1891c     04 4E 05 F1 | 	add	fp, #4
18920     A7 1A 62 FC | 	wrlong	arg05, fp
18924     08 4E 85 F1 | 	sub	fp, #8
18928     A7 12 02 F6 | 	mov	arg01, fp
1892c     1C 4E 85 F1 | 	sub	fp, #28
18930     90 4B BF FD | 	call	#_converttoint
18934     52 00 00 FF 
18938     0C E5 05 F1 | 	add	objptr, ##42252
1893c     F2 FA 61 FC | 	wrlong	result1, objptr
18940     52 00 00 FF 
18944     0C E5 85 F1 | 	sub	objptr, ##42252
18948     18 00 90 FD | 	jmp	#LR__1991
1894c                 | LR__1990
1894c     52 00 00 FF 
18950     0C E5 05 F1 | 	add	objptr, ##42252
18954     FF FF FF FF 
18958     F2 FE 6B FC | 	wrlong	##-1, objptr
1895c     52 00 00 FF 
18960     0C E5 85 F1 | 	sub	objptr, ##42252
18964                 | LR__1991
18964                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
18964     A7 1A 02 FB | 	rdlong	arg05, fp
18968     03 1A 56 F2 | 	cmps	arg05, #3 wc
1896c     40 00 90 CD |  if_b	jmp	#LR__1992
18970     6C 49 BF FD | 	call	#_pop
18974     FF 1A 02 F6 | 	mov	arg05, result3
18978     1C 4E 05 F1 | 	add	fp, #28
1897c     A7 FA 61 FC | 	wrlong	result1, fp
18980     04 4E 05 F1 | 	add	fp, #4
18984     A7 FC 61 FC | 	wrlong	result2, fp
18988     04 4E 05 F1 | 	add	fp, #4
1898c     A7 1A 62 FC | 	wrlong	arg05, fp
18990     08 4E 85 F1 | 	sub	fp, #8
18994     A7 12 02 F6 | 	mov	arg01, fp
18998     1C 4E 85 F1 | 	sub	fp, #28
1899c     24 4B BF FD | 	call	#_converttoint
189a0     08 4E 05 F1 | 	add	fp, #8
189a4     A7 FA 61 FC | 	wrlong	result1, fp
189a8     08 4E 85 F1 | 	sub	fp, #8
189ac     0C 00 90 FD | 	jmp	#LR__1993
189b0                 | LR__1992
189b0     08 4E 05 F1 | 	add	fp, #8
189b4     A7 02 68 FC | 	wrlong	#1, fp
189b8     08 4E 85 F1 | 	sub	fp, #8
189bc                 | LR__1993
189bc                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
189bc     A7 18 02 FB | 	rdlong	arg04, fp
189c0     02 18 56 F2 | 	cmps	arg04, #2 wc
189c4     3C 00 90 CD |  if_b	jmp	#LR__1994
189c8     14 49 BF FD | 	call	#_pop
189cc     FF 18 02 F6 | 	mov	arg04, result3
189d0     1C 4E 05 F1 | 	add	fp, #28
189d4     A7 FA 61 FC | 	wrlong	result1, fp
189d8     04 4E 05 F1 | 	add	fp, #4
189dc     A7 FC 61 FC | 	wrlong	result2, fp
189e0     04 4E 05 F1 | 	add	fp, #4
189e4     A7 18 62 FC | 	wrlong	arg04, fp
189e8     08 4E 85 F1 | 	sub	fp, #8
189ec     A7 12 02 F6 | 	mov	arg01, fp
189f0     1C 4E 85 F1 | 	sub	fp, #28
189f4     CC 4A BF FD | 	call	#_converttoint
189f8     0C 4E 05 F1 | 	add	fp, #12
189fc     A7 FA 61 FC | 	wrlong	result1, fp
18a00     0C 4E 85 F1 | 	sub	fp, #12
18a04                 | LR__1994
18a04     D8 48 BF FD | 	call	#_pop
18a08     FF 18 02 F6 | 	mov	arg04, result3
18a0c     1C 4E 05 F1 | 	add	fp, #28
18a10     A7 FA 61 FC | 	wrlong	result1, fp
18a14     04 4E 05 F1 | 	add	fp, #4
18a18     A7 FC 61 FC | 	wrlong	result2, fp
18a1c     04 4E 05 F1 | 	add	fp, #4
18a20     A7 18 62 FC | 	wrlong	arg04, fp
18a24     08 4E 85 F1 | 	sub	fp, #8
18a28     A7 12 02 F6 | 	mov	arg01, fp
18a2c     1C 4E 85 F1 | 	sub	fp, #28
18a30     90 4A BF FD | 	call	#_converttoint
18a34     04 4E 05 F1 | 	add	fp, #4
18a38     A7 FA 61 FC | 	wrlong	result1, fp
18a3c     10 4E 05 F1 | 	add	fp, #16
18a40     A7 26 02 FB | 	rdlong	local01, fp
18a44     14 4E 85 F1 | 	sub	fp, #20
18a48     02 26 66 F0 | 	shl	local01, #2
18a4c     50 00 00 FF 
18a50     C4 E4 05 F1 | 	add	objptr, ##41156
18a54     F2 26 02 F1 | 	add	local01, objptr
18a58     13 01 68 FC | 	wrlong	#0, local01
18a5c                 | ' t1=pop() : channel=converttoint(t1)
18a5c                 | ' getres(j)=0
18a5c                 | ' if pos>=0 then
18a5c     02 00 00 FF 
18a60     48 E4 05 F1 | 	add	objptr, ##1096
18a64     F2 28 02 FB | 	rdlong	local02, objptr
18a68     52 00 00 FF 
18a6c     0C E5 85 F1 | 	sub	objptr, ##42252
18a70     00 28 56 F2 | 	cmps	local02, #0 wc
18a74     C0 01 90 CD |  if_b	jmp	#LR__2000
18a78     10 4E 05 F1 | 	add	fp, #16
18a7c     A7 00 68 FC | 	wrlong	#0, fp
18a80     10 4E 85 F1 | 	sub	fp, #16
18a84                 | '    i=0: do
18a84                 | LR__1995
18a84     14 4E 05 F1 | 	add	fp, #20
18a88     A7 00 68 FC | 	wrlong	#0, fp
18a8c     14 4E 85 F1 | 	sub	fp, #20
18a90                 | '    j=0: do    
18a90                 | LR__1996
18a90                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18a90     0C 4E 05 F1 | 	add	fp, #12
18a94     A7 28 02 FB | 	rdlong	local02, fp
18a98     0C 4E 85 F1 | 	sub	fp, #12
18a9c     00 04 00 FF 
18aa0     00 28 56 F2 | 	cmps	local02, ##524288 wc
18aa4     4C 00 90 3D |  if_ae	jmp	#LR__1997
18aa8     14 4E 05 F1 | 	add	fp, #20
18aac     A7 28 02 FB | 	rdlong	local02, fp
18ab0     14 27 02 F6 | 	mov	local01, local02
18ab4     4E 00 00 FF 
18ab8     B4 E4 05 F1 | 	add	objptr, ##40116
18abc     F2 26 02 F1 | 	add	local01, objptr
18ac0     08 4E 85 F1 | 	sub	fp, #8
18ac4     A7 12 02 FB | 	rdlong	arg01, fp
18ac8     04 4E 05 F1 | 	add	fp, #4
18acc     A7 18 02 FB | 	rdlong	arg04, fp
18ad0     0A 18 66 F0 | 	shl	arg04, #10
18ad4     0C 13 02 F1 | 	add	arg01, arg04
18ad8     10 4E 85 F1 | 	sub	fp, #16
18adc     14 13 02 F1 | 	add	arg01, local02
18ae0     09 FB C1 FA | 	rdbyte	result1, arg01
18ae4     4E 00 00 FF 
18ae8     B4 E4 85 F1 | 	sub	objptr, ##40116
18aec     13 FB 41 FC | 	wrbyte	result1, local01
18af0     48 00 90 FD | 	jmp	#LR__1998
18af4                 | LR__1997
18af4     14 4E 05 F1 | 	add	fp, #20
18af8     A7 28 02 FB | 	rdlong	local02, fp
18afc     14 27 02 F6 | 	mov	local01, local02
18b00     4E 00 00 FF 
18b04     B4 E4 05 F1 | 	add	objptr, ##40116
18b08     F2 26 02 F1 | 	add	local01, objptr
18b0c     08 4E 85 F1 | 	sub	fp, #8
18b10     A7 12 02 FB | 	rdlong	arg01, fp
18b14     04 4E 05 F1 | 	add	fp, #4
18b18     A7 18 02 FB | 	rdlong	arg04, fp
18b1c     0A 18 66 F0 | 	shl	arg04, #10
18b20     0C 13 02 F1 | 	add	arg01, arg04
18b24     10 4E 85 F1 | 	sub	fp, #16
18b28     14 13 02 F1 | 	add	arg01, local02
18b2c     4E 00 00 FF 
18b30     B4 E4 85 F1 | 	sub	objptr, ##40116
18b34     90 9C B0 FD | 	call	#_pspeek
18b38     13 FB 41 FC | 	wrbyte	result1, local01
18b3c                 | LR__1998
18b3c     14 4E 05 F1 | 	add	fp, #20
18b40     A7 28 02 FB | 	rdlong	local02, fp
18b44     01 28 06 F1 | 	add	local02, #1
18b48     A7 28 62 FC | 	wrlong	local02, fp
18b4c     14 4E 85 F1 | 	sub	fp, #20
18b50     02 00 00 FF 
18b54     00 28 56 F2 | 	cmps	local02, ##1024 wc
18b58     2C 00 90 3D |  if_ae	jmp	#LR__1999
18b5c     10 4E 05 F1 | 	add	fp, #16
18b60     A7 26 02 FB | 	rdlong	local01, fp
18b64     0A 26 66 F0 | 	shl	local01, #10
18b68     04 4E 05 F1 | 	add	fp, #4
18b6c     A7 28 02 FB | 	rdlong	local02, fp
18b70     14 27 02 F1 | 	add	local01, local02
18b74     0C 4E 85 F1 | 	sub	fp, #12
18b78     A7 28 02 FB | 	rdlong	local02, fp
18b7c     08 4E 85 F1 | 	sub	fp, #8
18b80     14 27 5A F2 | 	cmps	local01, local02 wcz
18b84     08 FF 9F ED |  if_be	jmp	#LR__1996
18b88                 | LR__1999
18b88                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
18b88     04 4E 05 F1 | 	add	fp, #4
18b8c     A7 12 02 FB | 	rdlong	arg01, fp
18b90     52 00 00 FF 
18b94     0C E5 05 F1 | 	add	objptr, ##42252
18b98     F2 14 02 FB | 	rdlong	arg02, objptr
18b9c     01 14 06 F1 | 	add	arg02, #1
18ba0     04 00 00 FF 
18ba4     58 E4 85 F1 | 	sub	objptr, ##2136
18ba8     F2 16 02 F6 | 	mov	arg03, objptr
18bac     4E 00 00 FF 
18bb0     B4 E4 85 F1 | 	sub	objptr, ##40116
18bb4     04 4E 05 F1 | 	add	fp, #4
18bb8     A7 18 02 FB | 	rdlong	arg04, fp
18bbc     08 4E 85 F1 | 	sub	fp, #8
18bc0     01 1A 06 F6 | 	mov	arg05, #1
18bc4     80 E1 B0 FD | 	call	#__system___basic_put
18bc8     18 4E 05 F1 | 	add	fp, #24
18bcc     A7 FA 61 FC | 	wrlong	result1, fp
18bd0     14 4E 85 F1 | 	sub	fp, #20
18bd4     A7 26 02 FB | 	rdlong	local01, fp
18bd8     02 26 66 F0 | 	shl	local01, #2
18bdc     50 00 00 FF 
18be0     C4 E4 05 F1 | 	add	objptr, ##41156
18be4     F2 26 02 F1 | 	add	local01, objptr
18be8     13 FB 61 FC | 	wrlong	result1, local01
18bec                 | '    if 1024*i+j>amount then exit loop
18bec     0C 4E 05 F1 | 	add	fp, #12
18bf0     A7 28 02 FB | 	rdlong	local02, fp
18bf4     0A 28 66 F0 | 	shl	local02, #10
18bf8     04 4E 05 F1 | 	add	fp, #4
18bfc     A7 26 02 FB | 	rdlong	local01, fp
18c00     13 29 02 F1 | 	add	local02, local01
18c04     0C 4E 85 F1 | 	sub	fp, #12
18c08     A7 26 02 FB | 	rdlong	local01, fp
18c0c     08 4E 85 F1 | 	sub	fp, #8
18c10     13 29 5A F2 | 	cmps	local02, local01 wcz
18c14     50 00 00 FF 
18c18     C4 E4 85 F1 | 	sub	objptr, ##41156
18c1c     CC 01 90 1D |  if_a	jmp	#LR__2007
18c20     10 4E 05 F1 | 	add	fp, #16
18c24     A7 28 02 FB | 	rdlong	local02, fp
18c28     01 28 06 F1 | 	add	local02, #1
18c2c     A7 28 62 FC | 	wrlong	local02, fp
18c30     10 4E 85 F1 | 	sub	fp, #16
18c34     4C FE 9F FD | 	jmp	#LR__1995
18c38                 | LR__2000
18c38     10 4E 05 F1 | 	add	fp, #16
18c3c     A7 00 68 FC | 	wrlong	#0, fp
18c40     10 4E 85 F1 | 	sub	fp, #16
18c44                 | '    i=0: do
18c44                 | LR__2001
18c44     14 4E 05 F1 | 	add	fp, #20
18c48     A7 00 68 FC | 	wrlong	#0, fp
18c4c     14 4E 85 F1 | 	sub	fp, #20
18c50                 | '    j=0: do  
18c50                 | LR__2002
18c50                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
18c50     0C 4E 05 F1 | 	add	fp, #12
18c54     A7 28 02 FB | 	rdlong	local02, fp
18c58     0C 4E 85 F1 | 	sub	fp, #12
18c5c     00 04 00 FF 
18c60     00 28 56 F2 | 	cmps	local02, ##524288 wc
18c64     4C 00 90 3D |  if_ae	jmp	#LR__2003
18c68     14 4E 05 F1 | 	add	fp, #20
18c6c     A7 28 02 FB | 	rdlong	local02, fp
18c70     14 27 02 F6 | 	mov	local01, local02
18c74     4E 00 00 FF 
18c78     B4 E4 05 F1 | 	add	objptr, ##40116
18c7c     F2 26 02 F1 | 	add	local01, objptr
18c80     08 4E 85 F1 | 	sub	fp, #8
18c84     A7 12 02 FB | 	rdlong	arg01, fp
18c88     04 4E 05 F1 | 	add	fp, #4
18c8c     A7 18 02 FB | 	rdlong	arg04, fp
18c90     0A 18 66 F0 | 	shl	arg04, #10
18c94     0C 13 02 F1 | 	add	arg01, arg04
18c98     10 4E 85 F1 | 	sub	fp, #16
18c9c     14 13 02 F1 | 	add	arg01, local02
18ca0     09 FB C1 FA | 	rdbyte	result1, arg01
18ca4     4E 00 00 FF 
18ca8     B4 E4 85 F1 | 	sub	objptr, ##40116
18cac     13 FB 41 FC | 	wrbyte	result1, local01
18cb0     48 00 90 FD | 	jmp	#LR__2004
18cb4                 | LR__2003
18cb4     14 4E 05 F1 | 	add	fp, #20
18cb8     A7 28 02 FB | 	rdlong	local02, fp
18cbc     14 27 02 F6 | 	mov	local01, local02
18cc0     4E 00 00 FF 
18cc4     B4 E4 05 F1 | 	add	objptr, ##40116
18cc8     F2 26 02 F1 | 	add	local01, objptr
18ccc     08 4E 85 F1 | 	sub	fp, #8
18cd0     A7 12 02 FB | 	rdlong	arg01, fp
18cd4     04 4E 05 F1 | 	add	fp, #4
18cd8     A7 18 02 FB | 	rdlong	arg04, fp
18cdc     0A 18 66 F0 | 	shl	arg04, #10
18ce0     0C 13 02 F1 | 	add	arg01, arg04
18ce4     10 4E 85 F1 | 	sub	fp, #16
18ce8     14 13 02 F1 | 	add	arg01, local02
18cec     4E 00 00 FF 
18cf0     B4 E4 85 F1 | 	sub	objptr, ##40116
18cf4     D0 9A B0 FD | 	call	#_pspeek
18cf8     13 FB 41 FC | 	wrbyte	result1, local01
18cfc                 | LR__2004
18cfc     14 4E 05 F1 | 	add	fp, #20
18d00     A7 28 02 FB | 	rdlong	local02, fp
18d04     01 28 06 F1 | 	add	local02, #1
18d08     A7 28 62 FC | 	wrlong	local02, fp
18d0c     14 4E 85 F1 | 	sub	fp, #20
18d10     02 00 00 FF 
18d14     00 28 56 F2 | 	cmps	local02, ##1024 wc
18d18     2C 00 90 3D |  if_ae	jmp	#LR__2005
18d1c     10 4E 05 F1 | 	add	fp, #16
18d20     A7 26 02 FB | 	rdlong	local01, fp
18d24     0A 26 66 F0 | 	shl	local01, #10
18d28     04 4E 05 F1 | 	add	fp, #4
18d2c     A7 28 02 FB | 	rdlong	local02, fp
18d30     14 27 02 F1 | 	add	local01, local02
18d34     0C 4E 85 F1 | 	sub	fp, #12
18d38     A7 28 02 FB | 	rdlong	local02, fp
18d3c     08 4E 85 F1 | 	sub	fp, #8
18d40     14 27 5A F2 | 	cmps	local01, local02 wcz
18d44     08 FF 9F ED |  if_be	jmp	#LR__2002
18d48                 | LR__2005
18d48                 | '    put #channel,,block(0),amount, r : getres(channel)=r
18d48     04 4E 05 F1 | 	add	fp, #4
18d4c     A7 12 02 FB | 	rdlong	arg01, fp
18d50     4E 00 00 FF 
18d54     B4 E4 05 F1 | 	add	objptr, ##40116
18d58     F2 16 02 F6 | 	mov	arg03, objptr
18d5c     4E 00 00 FF 
18d60     B4 E4 85 F1 | 	sub	objptr, ##40116
18d64     04 4E 05 F1 | 	add	fp, #4
18d68     A7 18 02 FB | 	rdlong	arg04, fp
18d6c     08 4E 85 F1 | 	sub	fp, #8
18d70     00 14 06 F6 | 	mov	arg02, #0
18d74     01 1A 06 F6 | 	mov	arg05, #1
18d78     CC DF B0 FD | 	call	#__system___basic_put
18d7c     18 4E 05 F1 | 	add	fp, #24
18d80     A7 FA 61 FC | 	wrlong	result1, fp
18d84     14 4E 85 F1 | 	sub	fp, #20
18d88     A7 26 02 FB | 	rdlong	local01, fp
18d8c     02 26 66 F0 | 	shl	local01, #2
18d90     50 00 00 FF 
18d94     C4 E4 05 F1 | 	add	objptr, ##41156
18d98     F2 26 02 F1 | 	add	local01, objptr
18d9c     13 FB 61 FC | 	wrlong	result1, local01
18da0                 | '    if 1024*i+j>amount then exit loop
18da0     0C 4E 05 F1 | 	add	fp, #12
18da4     A7 28 02 FB | 	rdlong	local02, fp
18da8     0A 28 66 F0 | 	shl	local02, #10
18dac     04 4E 05 F1 | 	add	fp, #4
18db0     A7 26 02 FB | 	rdlong	local01, fp
18db4     13 29 02 F1 | 	add	local02, local01
18db8     0C 4E 85 F1 | 	sub	fp, #12
18dbc     A7 2A 02 FB | 	rdlong	local03, fp
18dc0     08 4E 85 F1 | 	sub	fp, #8
18dc4     15 29 5A F2 | 	cmps	local02, local03 wcz
18dc8     50 00 00 FF 
18dcc     C4 E4 85 F1 | 	sub	objptr, ##41156
18dd0     18 00 90 1D |  if_a	jmp	#LR__2006
18dd4     10 4E 05 F1 | 	add	fp, #16
18dd8     A7 28 02 FB | 	rdlong	local02, fp
18ddc     01 28 06 F1 | 	add	local02, #1
18de0     A7 28 62 FC | 	wrlong	local02, fp
18de4     10 4E 85 F1 | 	sub	fp, #16
18de8     58 FE 9F FD | 	jmp	#LR__2001
18dec                 | LR__2006
18dec                 | LR__2007
18dec     A7 F0 03 F6 | 	mov	ptra, fp
18df0     B2 00 A0 FD | 	call	#popregs_
18df4                 | _do_put_ret
18df4     2D 00 64 FD | 	ret
18df8                 | 
18df8                 | ' 
18df8                 | ' '-------------------- rad
18df8                 | ' 
18df8                 | ' sub do_rad
18df8                 | _do_rad
18df8     52 00 00 FF 
18dfc     A8 E4 05 F1 | 	add	objptr, ##42152
18e00     00 C0 9F FF 
18e04     F2 00 68 FC | 	wrlong	##1065353216, objptr
18e08     04 E4 05 F1 | 	add	objptr, #4
18e0c     00 C0 9F FF 
18e10     F2 00 68 FC | 	wrlong	##1065353216, objptr
18e14     52 00 00 FF 
18e18     AC E4 85 F1 | 	sub	objptr, ##42156
18e1c                 | _do_rad_ret
18e1c     2D 00 64 FD | 	ret
18e20                 | 
18e20                 | ' 
18e20                 | ' '-------------------- rdpin
18e20                 | ' 
18e20                 | ' sub do_rdpin
18e20                 | _do_rdpin
18e20     00 4A 05 F6 | 	mov	COUNT_, #0
18e24     A8 00 A0 FD | 	call	#pushregs_
18e28     0C F0 07 F1 | 	add	ptra, #12
18e2c     B0 44 BF FD | 	call	#_pop
18e30     A7 FA 61 FC | 	wrlong	result1, fp
18e34     04 4E 05 F1 | 	add	fp, #4
18e38     A7 FC 61 FC | 	wrlong	result2, fp
18e3c     04 4E 05 F1 | 	add	fp, #4
18e40     A7 FE 61 FC | 	wrlong	result3, fp
18e44     08 4E 85 F1 | 	sub	fp, #8
18e48     A7 12 02 F6 | 	mov	arg01, fp
18e4c     74 46 BF FD | 	call	#_converttoint
18e50     FD FA 89 FA | 	rdpin	result1, result1
18e54     52 00 00 FF 
18e58     10 E5 05 F1 | 	add	objptr, ##42256
18e5c     F2 FA 61 FC | 	wrlong	result1, objptr
18e60     52 00 00 FF 
18e64     10 E5 85 F1 | 	sub	objptr, ##42256
18e68     08 4E 05 F1 | 	add	fp, #8
18e6c     A7 3A 68 FC | 	wrlong	#29, fp
18e70     08 4E 85 F1 | 	sub	fp, #8
18e74     A7 08 68 FC | 	wrlong	#4, fp
18e78     A7 12 02 F6 | 	mov	arg01, fp
18e7c     F8 44 BF FD | 	call	#_push
18e80     A7 F0 03 F6 | 	mov	ptra, fp
18e84     B2 00 A0 FD | 	call	#popregs_
18e88                 | _do_rdpin_ret
18e88     2D 00 64 FD | 	ret
18e8c                 | 
18e8c                 | ' 
18e8c                 | ' ' ----------------  read
18e8c                 | ' 
18e8c                 | ' function read_next_line() as string
18e8c                 | _read_next_line
18e8c     07 4A 05 F6 | 	mov	COUNT_, #7
18e90     A8 00 A0 FD | 	call	#pushregs_
18e94                 | ' if dataptr=$7FFFFFFF then return("")
18e94     50 00 00 FF 
18e98     2C E5 05 F1 | 	add	objptr, ##41260
18e9c     F2 26 02 FB | 	rdlong	local01, objptr
18ea0     50 00 00 FF 
18ea4     2C E5 85 F1 | 	sub	objptr, ##41260
18ea8     FF FF 3F FF 
18eac     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
18eb0     B2 01 00 AF 
18eb4     29 FB 05 A6 |  if_e	mov	result1, ##@LR__5909
18eb8     BC 01 90 AD |  if_e	jmp	#LR__2017
18ebc                 | ' do
18ebc                 | LR__2010
18ebc     50 00 00 FF 
18ec0     08 E5 05 F1 | 	add	objptr, ##41224
18ec4     F2 12 02 F6 | 	mov	arg01, objptr
18ec8     24 E4 05 F1 | 	add	objptr, #36
18ecc     F2 14 02 FB | 	rdlong	arg02, objptr
18ed0     24 16 06 F6 | 	mov	arg03, #36
18ed4     45 00 00 FF 
18ed8     60 E4 85 F1 | 	sub	objptr, ##35424
18edc     D8 C3 B0 FD | 	call	#_psram_spin2_read1
18ee0                 | '  ' print dataptr
18ee0                 | '   psram.read1(varptr(dataheader),dataptr,36) 
18ee0                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
18ee0     45 00 00 FF 
18ee4     3C E4 05 F1 | 	add	objptr, ##35388
18ee8     F2 26 02 FB | 	rdlong	local01, objptr
18eec     50 00 00 FF 
18ef0     08 E5 85 F1 | 	sub	objptr, ##41224
18ef4     FF FF 7F FF 
18ef8     FF 27 0E F2 | 	cmp	local01, ##-1 wz
18efc     50 00 00 5F 
18f00     1C E5 05 51 |  if_ne	add	objptr, ##41244
18f04     F2 26 02 5B |  if_ne	rdlong	local01, objptr
18f08     10 E4 05 51 |  if_ne	add	objptr, #16
18f0c     F2 26 62 5C |  if_ne	wrlong	local01, objptr
18f10     50 00 00 5F 
18f14     2C E5 85 51 |  if_ne	sub	objptr, ##41260
18f18     50 00 00 FF 
18f1c     1C E5 05 F1 | 	add	objptr, ##41244
18f20     F2 26 02 FB | 	rdlong	local01, objptr
18f24     50 00 00 FF 
18f28     1C E5 85 F1 | 	sub	objptr, ##41244
18f2c     FF FF 3F FF 
18f30     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
18f34     50 00 00 5F 
18f38     08 E5 05 51 |  if_ne	add	objptr, ##41224
18f3c     F2 28 02 5B |  if_ne	rdlong	local02, objptr
18f40     50 00 00 5F 
18f44     08 E5 85 51 |  if_ne	sub	objptr, ##41224
18f48     FF FF 7F 5F 
18f4c     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
18f50     50 00 00 5F 
18f54     28 E5 05 51 |  if_ne	add	objptr, ##41256
18f58     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
18f5c     50 00 00 5F 
18f60     28 E5 85 51 |  if_ne	sub	objptr, ##41256
18f64     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
18f68     50 FF 9F 5D |  if_ne	jmp	#LR__2010
18f6c                 | ' if dataheader(8)=token_data then 
18f6c     50 00 00 FF 
18f70     28 E5 05 F1 | 	add	objptr, ##41256
18f74     F2 26 02 FB | 	rdlong	local01, objptr
18f78     50 00 00 FF 
18f7c     28 E5 85 F1 | 	sub	objptr, ##41256
18f80     B7 26 0E F2 | 	cmp	local01, #183 wz
18f84     E0 00 90 5D |  if_ne	jmp	#LR__2015
18f88     50 00 00 FF 
18f8c     10 E5 05 F1 | 	add	objptr, ##41232
18f90     F2 26 02 FB | 	rdlong	local01, objptr
18f94     01 00 00 FF 
18f98     E0 E5 05 F1 | 	add	objptr, ##992
18f9c     F2 26 62 FC | 	wrlong	local01, objptr
18fa0     01 00 00 FF 
18fa4     DC E5 85 F1 | 	sub	objptr, ##988
18fa8     F2 2C 02 FB | 	rdlong	local04, objptr
18fac     01 00 00 FF 
18fb0     D4 E5 05 F1 | 	add	objptr, ##980
18fb4     F2 2C 62 FC | 	wrlong	local04, objptr
18fb8                 | '  'print "data found at line "; dataheader(0)
18fb8                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
18fb8     00 2E 06 F6 | 	mov	local05, #0
18fbc     52 00 00 FF 
18fc0     E8 E4 85 F1 | 	sub	objptr, ##42216
18fc4                 | LR__2011
18fc4     16 2F 52 F2 | 	cmps	local05, local04 wc
18fc8     3C 00 90 3D |  if_ae	jmp	#LR__2012
18fcc     52 00 00 FF 
18fd0     F0 E4 05 F1 | 	add	objptr, ##42224
18fd4     F2 12 02 FB | 	rdlong	arg01, objptr
18fd8     52 00 00 FF 
18fdc     F0 E4 85 F1 | 	sub	objptr, ##42224
18fe0     17 13 02 F1 | 	add	arg01, local05
18fe4     E0 97 B0 FD | 	call	#_pspeek
18fe8     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
18fec     94 F1 B0 FD | 	call	#__system__Chr_S
18ff0     FD 14 02 F6 | 	mov	arg02, result1
18ff4     18 13 02 F6 | 	mov	arg01, local06
18ff8     A0 CF B0 FD | 	call	#__system___string_concat
18ffc     FD 30 02 F6 | 	mov	local06, result1
19000     01 2E 06 F1 | 	add	local05, #1
19004     BC FF 9F FD | 	jmp	#LR__2011
19008                 | LR__2012
19008     B2 01 00 FF 
1900c     2A 17 06 F6 | 	mov	arg03, ##@LR__5910
19010     01 12 06 F6 | 	mov	arg01, #1
19014     18 15 02 F6 | 	mov	arg02, local06
19018     EC F4 B0 FD | 	call	#__system__Instr
1901c     FD 2E 02 F6 | 	mov	local05, result1
19020     18 13 02 F6 | 	mov	arg01, local06
19024     09 33 02 F6 | 	mov	local07, arg01
19028     97 06 48 FB | 	callpa	#(@LR__2014-@LR__2013)>>2,fcache_load_ptr_
1902c                 | LR__2013
1902c     19 FB C9 FA | 	rdbyte	result1, local07 wz
19030     01 32 06 51 |  if_ne	add	local07, #1
19034     F4 FF 9F 5D |  if_ne	jmp	#LR__2013
19038                 | LR__2014
19038     09 33 82 F1 | 	sub	local07, arg01
1903c     19 15 02 F6 | 	mov	arg02, local07
19040     17 15 82 F1 | 	sub	arg02, local05
19044     04 14 86 F1 | 	sub	arg02, #4
19048     18 13 02 F6 | 	mov	arg01, local06
1904c     F8 EF B0 FD | 	call	#__system__Right_S
19050     FD 12 02 F6 | 	mov	arg01, result1
19054     F8 F3 B0 FD | 	call	#__system__RTrim_S
19058     FD 12 02 F6 | 	mov	arg01, result1
1905c     30 F3 B0 FD | 	call	#__system__LTrim_S
19060     FD 30 02 F6 | 	mov	local06, result1
19064     0C 00 90 FD | 	jmp	#LR__2016
19068                 | LR__2015
19068                 | '   return ("") 'todo proper err
19068     B2 01 00 FF 
1906c     2F FB 05 F6 | 	mov	result1, ##@LR__5911
19070     04 00 90 FD | 	jmp	#LR__2017
19074                 | LR__2016
19074                 | ' return readline
19074     18 FB 01 F6 | 	mov	result1, local06
19078                 | LR__2017
19078     A7 F0 03 F6 | 	mov	ptra, fp
1907c     B2 00 A0 FD | 	call	#popregs_
19080                 | _read_next_line_ret
19080     2D 00 64 FD | 	ret
19084                 | 
19084                 | ' 
19084                 | ' sub do_read
19084                 | _do_read
19084     11 4A 05 F6 | 	mov	COUNT_, #17
19088     A8 00 A0 FD | 	call	#pushregs_
1908c     58 F1 07 F1 | 	add	ptra, #344
19090     4A 00 00 FF 
19094     80 E4 05 F1 | 	add	objptr, ##38016
19098     F2 FE 01 FB | 	rdlong	result3, objptr
1909c     FF FC 01 F6 | 	mov	result2, result3
190a0     01 FC 65 F0 | 	shl	result2, #1
190a4     FF FC 01 F1 | 	add	result2, result3
190a8     02 FC 65 F0 | 	shl	result2, #2
190ac     03 00 00 FF 
190b0     04 E4 85 F1 | 	sub	objptr, ##1540
190b4     F2 FC 01 F1 | 	add	result2, objptr
190b8     FE FC 01 FB | 	rdlong	result2, result2
190bc     08 4E 05 F1 | 	add	fp, #8
190c0     A7 FC 61 FC | 	wrlong	result2, fp
190c4                 | ' 
190c4                 | ' 
190c4                 | ' numpar=compiledline(lineptr_e).result.uresult
190c4                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8     01 FC 15 F2 | 	cmp	result2, #1 wc
190cc     47 00 00 FF 
190d0     7C E4 85 F1 | 	sub	objptr, ##36476
190d4     14 00 90 CD |  if_b	jmp	#LR__2020
190d8     08 4E 05 F1 | 	add	fp, #8
190dc     A7 FC 01 FB | 	rdlong	result2, fp
190e0     08 4E 85 F1 | 	sub	fp, #8
190e4     41 FC 15 F2 | 	cmp	result2, #65 wc
190e8     50 00 90 CD |  if_b	jmp	#LR__2021
190ec                 | LR__2020
190ec     00 12 06 F6 | 	mov	arg01, #0
190f0     F0 2A B1 FD | 	call	#__system___getiolock_0600
190f4     FD 12 02 F6 | 	mov	arg01, result1
190f8     44 CE B0 FD | 	call	#__system___lockmem
190fc     B2 01 00 FF 
19100     30 15 06 F6 | 	mov	arg02, ##@LR__5912
19104     00 12 06 F6 | 	mov	arg01, #0
19108     00 16 06 F6 | 	mov	arg03, #0
1910c     28 DB B0 FD | 	call	#__system___basic_print_string
19110     00 12 06 F6 | 	mov	arg01, #0
19114     CC 2A B1 FD | 	call	#__system___getiolock_0600
19118     FD 00 68 FC | 	wrlong	#0, result1
1911c     50 00 00 FF 
19120     F0 E4 05 F1 | 	add	objptr, ##41200
19124     F2 14 02 FB | 	rdlong	arg02, objptr
19128     50 00 00 FF 
1912c     F0 E4 85 F1 | 	sub	objptr, ##41200
19130     27 12 06 F6 | 	mov	arg01, #39
19134     18 94 B0 FD | 	call	#_printerror
19138     5C 0C 90 FD | 	jmp	#LR__2070
1913c                 | LR__2021
1913c     08 4E 05 F1 | 	add	fp, #8
19140     A7 16 02 FB | 	rdlong	arg03, fp
19144     01 16 86 F1 | 	sub	arg03, #1
19148     28 4F 05 F1 | 	add	fp, #296
1914c     A7 16 62 FC | 	wrlong	arg03, fp
19150     30 4F 85 F1 | 	sub	fp, #304
19154                 | ' i=numpar-1
19154                 | ' if readline="" then readline=read_next_line() ': print readline
19154     52 00 00 FF 
19158     DC E4 05 F1 | 	add	objptr, ##42204
1915c     F2 12 02 FB | 	rdlong	arg01, objptr
19160     52 00 00 FF 
19164     DC E4 85 F1 | 	sub	objptr, ##42204
19168     B2 01 00 FF 
1916c     3A 15 06 F6 | 	mov	arg02, ##@LR__5913
19170     F4 CD B0 FD | 	call	#__system___string_cmp
19174     00 FA 0D F2 | 	cmp	result1, #0 wz
19178     18 00 90 5D |  if_ne	jmp	#LR__2022
1917c     0C FD BF FD | 	call	#_read_next_line
19180     52 00 00 FF 
19184     DC E4 05 F1 | 	add	objptr, ##42204
19188     F2 FA 61 FC | 	wrlong	result1, objptr
1918c     52 00 00 FF 
19190     DC E4 85 F1 | 	sub	objptr, ##42204
19194                 | LR__2022
19194                 | ' if readline="" then printerror(55,runheader(0)) :return
19194     52 00 00 FF 
19198     DC E4 05 F1 | 	add	objptr, ##42204
1919c     F2 12 02 FB | 	rdlong	arg01, objptr
191a0     52 00 00 FF 
191a4     DC E4 85 F1 | 	sub	objptr, ##42204
191a8     B2 01 00 FF 
191ac     3B 15 06 F6 | 	mov	arg02, ##@LR__5914
191b0     B4 CD B0 FD | 	call	#__system___string_cmp
191b4     00 FA 0D F2 | 	cmp	result1, #0 wz
191b8     20 00 90 5D |  if_ne	jmp	#LR__2023
191bc     50 00 00 FF 
191c0     F0 E4 05 F1 | 	add	objptr, ##41200
191c4     F2 14 02 FB | 	rdlong	arg02, objptr
191c8     50 00 00 FF 
191cc     F0 E4 85 F1 | 	sub	objptr, ##41200
191d0     37 12 06 F6 | 	mov	arg01, #55
191d4     78 93 B0 FD | 	call	#_printerror
191d8     BC 0B 90 FD | 	jmp	#LR__2070
191dc                 | LR__2023
191dc     34 4F 05 F1 | 	add	fp, #308
191e0     A7 00 68 FC | 	wrlong	#0, fp
191e4     2C 4F 85 F1 | 	sub	fp, #300
191e8     A7 26 02 FB | 	rdlong	local01, fp
191ec     01 26 86 F1 | 	sub	local01, #1
191f0     28 4F 05 F1 | 	add	fp, #296
191f4     A7 26 62 FC | 	wrlong	local01, fp
191f8     30 4F 85 F1 | 	sub	fp, #304
191fc                 | ' j=0
191fc                 | ' i=numpar-1
191fc                 | ' do
191fc                 | LR__2024
191fc                 | '   do
191fc                 | LR__2025
191fc     52 00 00 FF 
19200     DC E4 05 F1 | 	add	objptr, ##42204
19204     F2 14 02 FB | 	rdlong	arg02, objptr
19208     52 00 00 FF 
1920c     DC E4 85 F1 | 	sub	objptr, ##42204
19210     B2 01 00 FF 
19214     3C 17 06 F6 | 	mov	arg03, ##@LR__5915
19218     01 12 06 F6 | 	mov	arg01, #1
1921c     E8 F2 B0 FD | 	call	#__system__Instr
19220     0C 4E 05 F1 | 	add	fp, #12
19224     A7 FA 61 FC | 	wrlong	result1, fp
19228                 | '     comma=instr(1,readline,",")  
19228                 | '       if comma>0  then 
19228     0C 4E 85 F1 | 	sub	fp, #12
1922c     01 FA 15 F2 | 	cmp	result1, #1 wc
19230     98 00 90 CD |  if_b	jmp	#LR__2028
19234     52 00 00 FF 
19238     DC E4 05 F1 | 	add	objptr, ##42204
1923c     F2 12 02 FB | 	rdlong	arg01, objptr
19240     52 00 00 FF 
19244     DC E4 85 F1 | 	sub	objptr, ##42204
19248     0C 4E 05 F1 | 	add	fp, #12
1924c     A7 14 02 FB | 	rdlong	arg02, fp
19250     0C 4E 85 F1 | 	sub	fp, #12
19254     01 14 86 F1 | 	sub	arg02, #1
19258     64 ED B0 FD | 	call	#__system__Left_S
1925c     04 4E 05 F1 | 	add	fp, #4
19260     A7 FA 61 FC | 	wrlong	result1, fp
19264     04 4E 85 F1 | 	sub	fp, #4
19268     52 00 00 FF 
1926c     DC E4 05 F1 | 	add	objptr, ##42204
19270     F2 12 02 FB | 	rdlong	arg01, objptr
19274     09 27 02 F6 | 	mov	local01, arg01
19278     52 00 00 FF 
1927c     DC E4 85 F1 | 	sub	objptr, ##42204
19280     09 29 02 F6 | 	mov	local02, arg01
19284     97 06 48 FB | 	callpa	#(@LR__2027-@LR__2026)>>2,fcache_load_ptr_
19288                 | LR__2026
19288     14 FB C9 FA | 	rdbyte	result1, local02 wz
1928c     01 28 06 51 |  if_ne	add	local02, #1
19290     F4 FF 9F 5D |  if_ne	jmp	#LR__2026
19294                 | LR__2027
19294     09 29 82 F1 | 	sub	local02, arg01
19298     14 15 02 F6 | 	mov	arg02, local02
1929c     0C 4E 05 F1 | 	add	fp, #12
192a0     A7 16 02 FB | 	rdlong	arg03, fp
192a4     0C 4E 85 F1 | 	sub	fp, #12
192a8     0B 15 82 F1 | 	sub	arg02, arg03
192ac     13 13 02 F6 | 	mov	arg01, local01
192b0     94 ED B0 FD | 	call	#__system__Right_S
192b4     52 00 00 FF 
192b8     DC E4 05 F1 | 	add	objptr, ##42204
192bc     F2 FA 61 FC | 	wrlong	result1, objptr
192c0     52 00 00 FF 
192c4     DC E4 85 F1 | 	sub	objptr, ##42204
192c8     48 00 90 FD | 	jmp	#LR__2029
192cc                 | LR__2028
192cc     52 00 00 FF 
192d0     DC E4 05 F1 | 	add	objptr, ##42204
192d4     F2 12 02 FB | 	rdlong	arg01, objptr
192d8     52 00 00 FF 
192dc     DC E4 85 F1 | 	sub	objptr, ##42204
192e0     6C F1 B0 FD | 	call	#__system__RTrim_S
192e4     FD 12 02 F6 | 	mov	arg01, result1
192e8     A4 F0 B0 FD | 	call	#__system__LTrim_S
192ec     04 4E 05 F1 | 	add	fp, #4
192f0     A7 FA 61 FC | 	wrlong	result1, fp
192f4     04 4E 85 F1 | 	sub	fp, #4
192f8     B2 01 00 FF 
192fc     3E 27 06 F6 | 	mov	local01, ##@LR__5916
19300     52 00 00 FF 
19304     DC E4 05 F1 | 	add	objptr, ##42204
19308     F2 26 62 FC | 	wrlong	local01, objptr
1930c     52 00 00 FF 
19310     DC E4 85 F1 | 	sub	objptr, ##42204
19314                 | LR__2029
19314                 | '      if part$<>"" then j=j+1
19314     04 4E 05 F1 | 	add	fp, #4
19318     A7 12 02 FB | 	rdlong	arg01, fp
1931c     04 4E 85 F1 | 	sub	fp, #4
19320     B2 01 00 FF 
19324     3F 15 06 F6 | 	mov	arg02, ##@LR__5917
19328     3C CC B0 FD | 	call	#__system___string_cmp
1932c     00 FA 0D F2 | 	cmp	result1, #0 wz
19330     34 4F 05 51 |  if_ne	add	fp, #308
19334     A7 26 02 5B |  if_ne	rdlong	local01, fp
19338     01 26 06 51 |  if_ne	add	local01, #1
1933c     A7 26 62 5C |  if_ne	wrlong	local01, fp
19340     34 4F 85 51 |  if_ne	sub	fp, #308
19344     30 4F 05 F1 | 	add	fp, #304
19348     A7 26 02 FB | 	rdlong	local01, fp
1934c     02 26 66 F0 | 	shl	local01, #2
19350     04 4F 85 F1 | 	sub	fp, #260
19354     A7 26 02 F1 | 	add	local01, fp
19358     28 4E 85 F1 | 	sub	fp, #40
1935c     A7 FA 01 FB | 	rdlong	result1, fp
19360     13 FB 61 FC | 	wrlong	result1, local01
19364     2C 4F 05 F1 | 	add	fp, #300
19368     A7 26 02 FB | 	rdlong	local01, fp
1936c     01 26 86 F1 | 	sub	local01, #1
19370     A7 26 62 FC | 	wrlong	local01, fp
19374     30 4F 85 F1 | 	sub	fp, #304
19378                 | '      args(i)=part$  
19378                 | '      i=i-1
19378                 | '     if readline="" then readline=read_next_line() 
19378     52 00 00 FF 
1937c     DC E4 05 F1 | 	add	objptr, ##42204
19380     F2 12 02 FB | 	rdlong	arg01, objptr
19384     52 00 00 FF 
19388     DC E4 85 F1 | 	sub	objptr, ##42204
1938c     B2 01 00 FF 
19390     40 15 06 F6 | 	mov	arg02, ##@LR__5918
19394     D0 CB B0 FD | 	call	#__system___string_cmp
19398     00 FA 0D F2 | 	cmp	result1, #0 wz
1939c     18 00 90 5D |  if_ne	jmp	#LR__2030
193a0     E8 FA BF FD | 	call	#_read_next_line
193a4     52 00 00 FF 
193a8     DC E4 05 F1 | 	add	objptr, ##42204
193ac     F2 FA 61 FC | 	wrlong	result1, objptr
193b0     52 00 00 FF 
193b4     DC E4 85 F1 | 	sub	objptr, ##42204
193b8                 | LR__2030
193b8     30 4F 05 F1 | 	add	fp, #304
193bc     A7 26 02 FB | 	rdlong	local01, fp
193c0     30 4F 85 F1 | 	sub	fp, #304
193c4     00 26 56 F2 | 	cmps	local01, #0 wc
193c8     28 00 90 CD |  if_b	jmp	#LR__2031
193cc     52 00 00 FF 
193d0     DC E4 05 F1 | 	add	objptr, ##42204
193d4     F2 12 02 FB | 	rdlong	arg01, objptr
193d8     52 00 00 FF 
193dc     DC E4 85 F1 | 	sub	objptr, ##42204
193e0     B2 01 00 FF 
193e4     41 15 06 F6 | 	mov	arg02, ##@LR__5919
193e8     7C CB B0 FD | 	call	#__system___string_cmp
193ec     00 FA 0D F2 | 	cmp	result1, #0 wz
193f0     08 FE 9F 5D |  if_ne	jmp	#LR__2025
193f4                 | LR__2031
193f4     30 4F 05 F1 | 	add	fp, #304
193f8     A7 26 02 FB | 	rdlong	local01, fp
193fc     30 4F 85 F1 | 	sub	fp, #304
19400     00 26 56 F2 | 	cmps	local01, #0 wc
19404     F4 FD 9F 3D |  if_ae	jmp	#LR__2024
19408                 | ' if j<numpar then printerror(55,runheader(0))
19408     34 4F 05 F1 | 	add	fp, #308
1940c     A7 26 02 FB | 	rdlong	local01, fp
19410     2C 4F 85 F1 | 	sub	fp, #300
19414     A7 16 02 FB | 	rdlong	arg03, fp
19418     08 4E 85 F1 | 	sub	fp, #8
1941c     0B 27 52 F2 | 	cmps	local01, arg03 wc
19420     50 00 00 CF 
19424     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19428     F2 14 02 CB |  if_b	rdlong	arg02, objptr
1942c     50 00 00 CF 
19430     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19434     37 12 06 C6 |  if_b	mov	arg01, #55
19438     14 91 B0 CD |  if_b	call	#_printerror
1943c                 | ' 
1943c                 | ' for i=0 to numpar-1
1943c     30 4F 05 F1 | 	add	fp, #304
19440     A7 00 68 FC | 	wrlong	#0, fp
19444     28 4F 85 F1 | 	sub	fp, #296
19448     A7 2A 02 FB | 	rdlong	local03, fp
1944c     08 4E 85 F1 | 	sub	fp, #8
19450                 | LR__2032
19450     30 4F 05 F1 | 	add	fp, #304
19454     A7 2C 02 FB | 	rdlong	local04, fp
19458     30 4F 85 F1 | 	sub	fp, #304
1945c     16 27 02 F6 | 	mov	local01, local04
19460     15 27 52 F2 | 	cmps	local01, local03 wc
19464     30 09 90 3D |  if_ae	jmp	#LR__2069
19468                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19468     30 4F 05 F1 | 	add	fp, #304
1946c     A7 16 02 FB | 	rdlong	arg03, fp
19470     02 16 66 F0 | 	shl	arg03, #2
19474     04 4F 85 F1 | 	sub	fp, #260
19478     A7 16 02 F1 | 	add	arg03, fp
1947c     0B 13 02 FB | 	rdlong	arg01, arg03
19480     2C 4E 85 F1 | 	sub	fp, #44
19484     04 D1 BE FD | 	call	#_isnum
19488     FD 2E 02 F6 | 	mov	local05, result1
1948c     30 4F 05 F1 | 	add	fp, #304
19490     A7 16 02 FB | 	rdlong	arg03, fp
19494     02 16 66 F0 | 	shl	arg03, #2
19498     04 4F 85 F1 | 	sub	fp, #260
1949c     A7 30 02 F6 | 	mov	local06, fp
194a0     A7 16 02 F1 | 	add	arg03, fp
194a4     0B 13 02 FB | 	rdlong	arg01, arg03
194a8     2C 4E 85 F1 | 	sub	fp, #44
194ac     C8 D4 BE FD | 	call	#_isint
194b0     FD 2E 2A F5 | 	andn	local05, result1 wz
194b4     52 00 00 5F 
194b8     10 E5 05 51 |  if_ne	add	objptr, ##42256
194bc     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
194c0     52 00 00 5F 
194c4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
194c8                 | '   if isint(args(i)) then r=result_int 
194c8     30 4F 05 F1 | 	add	fp, #304
194cc     A7 2E 02 FB | 	rdlong	local05, fp
194d0     02 2E 66 F0 | 	shl	local05, #2
194d4     04 4F 85 F1 | 	sub	fp, #260
194d8     A7 2E 02 F1 | 	add	local05, fp
194dc     17 13 02 FB | 	rdlong	arg01, local05
194e0     2C 4E 85 F1 | 	sub	fp, #44
194e4     90 D4 BE FD | 	call	#_isint
194e8     00 FA 0D F2 | 	cmp	result1, #0 wz
194ec     52 00 00 5F 
194f0     10 E5 05 51 |  if_ne	add	objptr, ##42256
194f4     F2 38 68 5C |  if_ne	wrlong	#28, objptr
194f8     52 00 00 5F 
194fc     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19500                 | '   if isdec(args(i)) then r=result_uint 
19500     30 4F 05 F1 | 	add	fp, #304
19504     A7 2E 02 FB | 	rdlong	local05, fp
19508     02 2E 66 F0 | 	shl	local05, #2
1950c     04 4F 85 F1 | 	sub	fp, #260
19510     A7 2E 02 F1 | 	add	local05, fp
19514     17 13 02 FB | 	rdlong	arg01, local05
19518     2C 4E 85 F1 | 	sub	fp, #44
1951c     FC D6 BE FD | 	call	#_isdec
19520     00 FA 0D F2 | 	cmp	result1, #0 wz
19524     52 00 00 5F 
19528     10 E5 05 51 |  if_ne	add	objptr, ##42256
1952c     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19530     52 00 00 5F 
19534     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19538                 | '   if not isnum(args(i)) then 
19538     30 4F 05 F1 | 	add	fp, #304
1953c     A7 2E 02 FB | 	rdlong	local05, fp
19540     02 2E 66 F0 | 	shl	local05, #2
19544     04 4F 85 F1 | 	sub	fp, #260
19548     A7 2E 02 F1 | 	add	local05, fp
1954c     17 13 02 FB | 	rdlong	arg01, local05
19550     2C 4E 85 F1 | 	sub	fp, #44
19554     34 D0 BE FD | 	call	#_isnum
19558     FD 2E 22 F6 | 	not	local05, result1
1955c     00 2E 0E F2 | 	cmp	local05, #0 wz
19560     4C 01 90 AD |  if_e	jmp	#LR__2037
19564     52 00 00 FF 
19568     10 E5 05 F1 | 	add	objptr, ##42256
1956c     F2 56 68 FC | 	wrlong	#43, objptr
19570     52 00 00 FF 
19574     10 E5 85 F1 | 	sub	objptr, ##42256
19578     30 4F 05 F1 | 	add	fp, #304
1957c     A7 16 02 FB | 	rdlong	arg03, fp
19580     02 16 66 F0 | 	shl	arg03, #2
19584     04 4F 85 F1 | 	sub	fp, #260
19588     A7 16 02 F1 | 	add	arg03, fp
1958c     0B 13 02 FB | 	rdlong	arg01, arg03
19590     2C 4E 85 F1 | 	sub	fp, #44
19594     09 29 02 F6 | 	mov	local02, arg01
19598     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
1959c                 | LR__2033
1959c     14 FB C9 FA | 	rdbyte	result1, local02 wz
195a0     01 28 06 51 |  if_ne	add	local02, #1
195a4     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
195a8                 | LR__2034
195a8     09 29 82 F1 | 	sub	local02, arg01
195ac     14 FB 01 F6 | 	mov	result1, local02
195b0     38 4F 05 F1 | 	add	fp, #312
195b4     A7 FA 61 FC | 	wrlong	result1, fp
195b8     52 00 00 FF 
195bc     98 E4 05 F1 | 	add	objptr, ##42136
195c0     F2 12 02 FB | 	rdlong	arg01, objptr
195c4     FD 12 82 F1 | 	sub	arg01, result1
195c8     04 12 86 F1 | 	sub	arg01, #4
195cc     03 12 26 F5 | 	andn	arg01, #3
195d0     F2 12 62 FC | 	wrlong	arg01, objptr
195d4     52 00 00 FF 
195d8     98 E4 85 F1 | 	sub	objptr, ##42136
195dc     A7 14 02 FB | 	rdlong	arg02, fp
195e0     38 4F 85 F1 | 	sub	fp, #312
195e4     08 91 B0 FD | 	call	#_pslpoke
195e8                 | '     pslpoke memtop,l
195e8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
195e8     34 4F 05 F1 | 	add	fp, #308
195ec     A7 02 68 FC | 	wrlong	#1, fp
195f0     04 4E 05 F1 | 	add	fp, #4
195f4     A7 32 02 FB | 	rdlong	local07, fp
195f8     38 4F 85 F1 | 	sub	fp, #312
195fc     01 32 06 F1 | 	add	local07, #1
19600                 | LR__2035
19600     34 4F 05 F1 | 	add	fp, #308
19604     A7 2E 02 FB | 	rdlong	local05, fp
19608     34 4F 85 F1 | 	sub	fp, #308
1960c     19 2F 52 F2 | 	cmps	local05, local07 wc
19610     7C 00 90 3D |  if_ae	jmp	#LR__2036
19614     52 00 00 FF 
19618     98 E4 05 F1 | 	add	objptr, ##42136
1961c     F2 30 02 FB | 	rdlong	local06, objptr
19620     52 00 00 FF 
19624     98 E4 85 F1 | 	sub	objptr, ##42136
19628     03 30 06 F1 | 	add	local06, #3
1962c     34 4F 05 F1 | 	add	fp, #308
19630     A7 34 02 FB | 	rdlong	local08, fp
19634     1A 31 02 F1 | 	add	local06, local08
19638     04 4E 85 F1 | 	sub	fp, #4
1963c     A7 36 02 FB | 	rdlong	local09, fp
19640     02 36 66 F0 | 	shl	local09, #2
19644     04 4F 85 F1 | 	sub	fp, #260
19648     A7 38 02 F6 | 	mov	local10, fp
1964c     A7 36 02 F1 | 	add	local09, fp
19650     1B 13 02 FB | 	rdlong	arg01, local09
19654     2C 4E 85 F1 | 	sub	fp, #44
19658     01 3A 06 F6 | 	mov	local11, #1
1965c     1A 15 02 F6 | 	mov	arg02, local08
19660     01 16 06 F6 | 	mov	arg03, #1
19664     70 EA B0 FD | 	call	#__system__Mid_S
19668     FD 14 C2 FA | 	rdbyte	arg02, result1
1966c     18 13 02 F6 | 	mov	arg01, local06
19670     0C 91 B0 FD | 	call	#_pspoke
19674     34 4F 05 F1 | 	add	fp, #308
19678     A7 30 02 FB | 	rdlong	local06, fp
1967c     18 2F 02 F6 | 	mov	local05, local06
19680     01 2E 06 F1 | 	add	local05, #1
19684     A7 2E 62 FC | 	wrlong	local05, fp
19688     34 4F 85 F1 | 	sub	fp, #308
1968c     70 FF 9F FD | 	jmp	#LR__2035
19690                 | LR__2036
19690     52 00 00 FF 
19694     98 E4 05 F1 | 	add	objptr, ##42136
19698     F2 2E 02 FB | 	rdlong	local05, objptr
1969c     52 00 00 FF 
196a0     98 E4 85 F1 | 	sub	objptr, ##42136
196a4     10 4E 05 F1 | 	add	fp, #16
196a8     A7 2E 62 FC | 	wrlong	local05, fp
196ac     10 4E 85 F1 | 	sub	fp, #16
196b0                 | LR__2037
196b0     2C 3C BF FD | 	call	#_pop
196b4     1C 4E 05 F1 | 	add	fp, #28
196b8     A7 FA 61 FC | 	wrlong	result1, fp
196bc     04 4E 05 F1 | 	add	fp, #4
196c0     A7 FC 61 FC | 	wrlong	result2, fp
196c4     04 4E 05 F1 | 	add	fp, #4
196c8     A7 FE 61 FC | 	wrlong	result3, fp
196cc                 | '   t1=pop() 
196cc                 | '   if i>=numpar-j then
196cc     1C 4E 85 F1 | 	sub	fp, #28
196d0     A7 2E 02 FB | 	rdlong	local05, fp
196d4     17 3D 02 F6 | 	mov	local12, local05
196d8     2C 4F 05 F1 | 	add	fp, #300
196dc     A7 3E 02 FB | 	rdlong	local13, fp
196e0     1F 41 02 F6 | 	mov	local14, local13
196e4     20 3D 82 F1 | 	sub	local12, local14
196e8     04 4E 85 F1 | 	sub	fp, #4
196ec     A7 42 02 FB | 	rdlong	local15, fp
196f0     30 4F 85 F1 | 	sub	fp, #304
196f4     21 45 02 F6 | 	mov	local16, local15
196f8     1E 45 52 F2 | 	cmps	local16, local12 wc
196fc     80 06 90 CD |  if_b	jmp	#LR__2068
19700     20 4E 05 F1 | 	add	fp, #32
19704     A7 3C 02 FB | 	rdlong	local12, fp
19708     0C 4E 85 F1 | 	sub	fp, #12
1970c     A7 3C 62 FC | 	wrlong	local12, fp
19710                 | '     vartype=t1.result.twowords(1)
19710                 | '     select case vartype
19710     14 4E 85 F1 | 	sub	fp, #20
19714     1E 47 0A F6 | 	mov	local17, local12 wz
19718     64 00 90 AD |  if_e	jmp	#LR__2038
1971c     00 47 0E F2 | 	cmp	local17, #256 wz
19720     6C 00 90 AD |  if_e	jmp	#LR__2039
19724     01 47 0E F2 | 	cmp	local17, #257 wz
19728     74 00 90 AD |  if_e	jmp	#LR__2040
1972c     02 47 0E F2 | 	cmp	local17, #258 wz
19730     7C 00 90 AD |  if_e	jmp	#LR__2041
19734     03 47 0E F2 | 	cmp	local17, #259 wz
19738     84 00 90 AD |  if_e	jmp	#LR__2042
1973c     04 47 0E F2 | 	cmp	local17, #260 wz
19740     8C 00 90 AD |  if_e	jmp	#LR__2043
19744     05 47 0E F2 | 	cmp	local17, #261 wz
19748     94 00 90 AD |  if_e	jmp	#LR__2044
1974c     06 47 0E F2 | 	cmp	local17, #262 wz
19750     9C 00 90 AD |  if_e	jmp	#LR__2045
19754     07 47 0E F2 | 	cmp	local17, #263 wz
19758     A4 00 90 AD |  if_e	jmp	#LR__2046
1975c     08 47 0E F2 | 	cmp	local17, #264 wz
19760     AC 00 90 AD |  if_e	jmp	#LR__2047
19764     09 47 0E F2 | 	cmp	local17, #265 wz
19768     B4 00 90 AD |  if_e	jmp	#LR__2048
1976c     0A 47 0E F2 | 	cmp	local17, #266 wz
19770     BC 00 90 AD |  if_e	jmp	#LR__2049
19774     0B 47 0E F2 | 	cmp	local17, #267 wz
19778     C4 00 90 AD |  if_e	jmp	#LR__2050
1977c     D0 00 90 FD | 	jmp	#LR__2051
19780                 | LR__2038
19780     18 4E 05 F1 | 	add	fp, #24
19784     A7 18 68 FC | 	wrlong	#12, fp
19788     18 4E 85 F1 | 	sub	fp, #24
1978c     CC 00 90 FD | 	jmp	#LR__2052
19790                 | LR__2039
19790     18 4E 05 F1 | 	add	fp, #24
19794     A7 18 68 FC | 	wrlong	#12, fp
19798     18 4E 85 F1 | 	sub	fp, #24
1979c     BC 00 90 FD | 	jmp	#LR__2052
197a0                 | LR__2040
197a0     18 4E 05 F1 | 	add	fp, #24
197a4     A7 02 68 FC | 	wrlong	#1, fp
197a8     18 4E 85 F1 | 	sub	fp, #24
197ac     AC 00 90 FD | 	jmp	#LR__2052
197b0                 | LR__2041
197b0     18 4E 05 F1 | 	add	fp, #24
197b4     A7 02 68 FC | 	wrlong	#1, fp
197b8     18 4E 85 F1 | 	sub	fp, #24
197bc     9C 00 90 FD | 	jmp	#LR__2052
197c0                 | LR__2042
197c0     18 4E 05 F1 | 	add	fp, #24
197c4     A7 04 68 FC | 	wrlong	#2, fp
197c8     18 4E 85 F1 | 	sub	fp, #24
197cc     8C 00 90 FD | 	jmp	#LR__2052
197d0                 | LR__2043
197d0     18 4E 05 F1 | 	add	fp, #24
197d4     A7 04 68 FC | 	wrlong	#2, fp
197d8     18 4E 85 F1 | 	sub	fp, #24
197dc     7C 00 90 FD | 	jmp	#LR__2052
197e0                 | LR__2044
197e0     18 4E 05 F1 | 	add	fp, #24
197e4     A7 08 68 FC | 	wrlong	#4, fp
197e8     18 4E 85 F1 | 	sub	fp, #24
197ec     6C 00 90 FD | 	jmp	#LR__2052
197f0                 | LR__2045
197f0     18 4E 05 F1 | 	add	fp, #24
197f4     A7 08 68 FC | 	wrlong	#4, fp
197f8     18 4E 85 F1 | 	sub	fp, #24
197fc     5C 00 90 FD | 	jmp	#LR__2052
19800                 | LR__2046
19800     18 4E 05 F1 | 	add	fp, #24
19804     A7 10 68 FC | 	wrlong	#8, fp
19808     18 4E 85 F1 | 	sub	fp, #24
1980c     4C 00 90 FD | 	jmp	#LR__2052
19810                 | LR__2047
19810     18 4E 05 F1 | 	add	fp, #24
19814     A7 10 68 FC | 	wrlong	#8, fp
19818     18 4E 85 F1 | 	sub	fp, #24
1981c     3C 00 90 FD | 	jmp	#LR__2052
19820                 | LR__2048
19820     18 4E 05 F1 | 	add	fp, #24
19824     A7 0C 68 FC | 	wrlong	#6, fp
19828     18 4E 85 F1 | 	sub	fp, #24
1982c     2C 00 90 FD | 	jmp	#LR__2052
19830                 | LR__2049
19830     18 4E 05 F1 | 	add	fp, #24
19834     A7 10 68 FC | 	wrlong	#8, fp
19838     18 4E 85 F1 | 	sub	fp, #24
1983c     1C 00 90 FD | 	jmp	#LR__2052
19840                 | LR__2050
19840     18 4E 05 F1 | 	add	fp, #24
19844     A7 0A 68 FC | 	wrlong	#5, fp
19848     18 4E 85 F1 | 	sub	fp, #24
1984c     0C 00 90 FD | 	jmp	#LR__2052
19850                 | LR__2051
19850     18 4E 05 F1 | 	add	fp, #24
19854     A7 18 68 FC | 	wrlong	#12, fp
19858     18 4E 85 F1 | 	sub	fp, #24
1985c                 | LR__2052
1985c                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1985c     18 4E 05 F1 | 	add	fp, #24
19860     A7 3C 02 FB | 	rdlong	local12, fp
19864     18 4E 85 F1 | 	sub	fp, #24
19868     0C 3C 0E F2 | 	cmp	local12, #12 wz
1986c     74 01 90 5D |  if_ne	jmp	#LR__2057
19870     1C 4E 05 F1 | 	add	fp, #28
19874     A7 3E 02 FB | 	rdlong	local13, fp
19878     1C 4E 85 F1 | 	sub	fp, #28
1987c     00 04 00 FF 
19880     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19884     5C 01 90 3D |  if_ae	jmp	#LR__2057
19888                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
19888     52 00 00 FF 
1988c     10 E5 05 F1 | 	add	objptr, ##42256
19890     F2 3C 02 FB | 	rdlong	local12, objptr
19894     52 00 00 FF 
19898     10 E5 85 F1 | 	sub	objptr, ##42256
1989c     1C 3C 0E F2 | 	cmp	local12, #28 wz
198a0     38 00 90 5D |  if_ne	jmp	#LR__2053
198a4     1C 4E 05 F1 | 	add	fp, #28
198a8     A7 3C 02 FB | 	rdlong	local12, fp
198ac     14 4F 05 F1 | 	add	fp, #276
198b0     A7 3E 02 FB | 	rdlong	local13, fp
198b4     1F 45 02 F6 | 	mov	local16, local13
198b8     02 44 66 F0 | 	shl	local16, #2
198bc     04 4F 85 F1 | 	sub	fp, #260
198c0     A7 42 02 F6 | 	mov	local15, fp
198c4     A7 44 02 F1 | 	add	local16, fp
198c8     22 13 02 FB | 	rdlong	arg01, local16
198cc     00 14 06 F6 | 	mov	arg02, #0
198d0     2C 4E 85 F1 | 	sub	fp, #44
198d4     5C FB B0 FD | 	call	#__system____builtin_atoi
198d8     1E FB 61 FC | 	wrlong	result1, local12
198dc                 | LR__2053
198dc                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
198dc     52 00 00 FF 
198e0     10 E5 05 F1 | 	add	objptr, ##42256
198e4     F2 3C 02 FB | 	rdlong	local12, objptr
198e8     52 00 00 FF 
198ec     10 E5 85 F1 | 	sub	objptr, ##42256
198f0     1D 3C 0E F2 | 	cmp	local12, #29 wz
198f4     38 00 90 5D |  if_ne	jmp	#LR__2054
198f8     1C 4E 05 F1 | 	add	fp, #28
198fc     A7 3C 02 FB | 	rdlong	local12, fp
19900     14 4F 05 F1 | 	add	fp, #276
19904     A7 3E 02 FB | 	rdlong	local13, fp
19908     1F 45 02 F6 | 	mov	local16, local13
1990c     02 44 66 F0 | 	shl	local16, #2
19910     04 4F 85 F1 | 	sub	fp, #260
19914     A7 42 02 F6 | 	mov	local15, fp
19918     A7 44 02 F1 | 	add	local16, fp
1991c     22 13 02 FB | 	rdlong	arg01, local16
19920     00 14 06 F6 | 	mov	arg02, #0
19924     2C 4E 85 F1 | 	sub	fp, #44
19928     08 FB B0 FD | 	call	#__system____builtin_atoi
1992c     1E FB 61 FC | 	wrlong	result1, local12
19930                 | LR__2054
19930                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
19930     52 00 00 FF 
19934     10 E5 05 F1 | 	add	objptr, ##42256
19938     F2 3C 02 FB | 	rdlong	local12, objptr
1993c     52 00 00 FF 
19940     10 E5 85 F1 | 	sub	objptr, ##42256
19944     1E 3C 0E F2 | 	cmp	local12, #30 wz
19948     3C 00 90 5D |  if_ne	jmp	#LR__2055
1994c     30 4F 05 F1 | 	add	fp, #304
19950     A7 3E 02 FB | 	rdlong	local13, fp
19954     02 3E 66 F0 | 	shl	local13, #2
19958     04 4F 85 F1 | 	sub	fp, #260
1995c     A7 44 02 F6 | 	mov	local16, fp
19960     A7 3E 02 F1 | 	add	local13, fp
19964     1F 13 02 FB | 	rdlong	arg01, local13
19968     2C 4E 85 F1 | 	sub	fp, #44
1996c     58 FC B0 FD | 	call	#__system____builtin_atof
19970     28 4E 05 F1 | 	add	fp, #40
19974     A7 FA 61 FC | 	wrlong	result1, fp
19978     0C 4E 85 F1 | 	sub	fp, #12
1997c     A7 3C 02 FB | 	rdlong	local12, fp
19980     1C 4E 85 F1 | 	sub	fp, #28
19984     1E FB 61 FC | 	wrlong	result1, local12
19988                 | LR__2055
19988                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
19988     52 00 00 FF 
1998c     10 E5 05 F1 | 	add	objptr, ##42256
19990     F2 3C 02 FB | 	rdlong	local12, objptr
19994     52 00 00 FF 
19998     10 E5 85 F1 | 	sub	objptr, ##42256
1999c     2B 3C 0E F2 | 	cmp	local12, #43 wz
199a0     18 00 90 5D |  if_ne	jmp	#LR__2056
199a4     1C 4E 05 F1 | 	add	fp, #28
199a8     A7 12 02 FB | 	rdlong	arg01, fp
199ac     0C 4E 85 F1 | 	sub	fp, #12
199b0     A7 14 02 FB | 	rdlong	arg02, fp
199b4     10 4E 85 F1 | 	sub	fp, #16
199b8     09 15 62 FC | 	wrlong	arg02, arg01
199bc                 | LR__2056
199bc     1C 4E 05 F1 | 	add	fp, #28
199c0     A7 12 02 FB | 	rdlong	arg01, fp
199c4     1C 4E 85 F1 | 	sub	fp, #28
199c8     08 12 06 F1 | 	add	arg01, #8
199cc     52 00 00 FF 
199d0     10 E5 05 F1 | 	add	objptr, ##42256
199d4     F2 14 02 FB | 	rdlong	arg02, objptr
199d8     52 00 00 FF 
199dc     10 E5 85 F1 | 	sub	objptr, ##42256
199e0     09 15 62 FC | 	wrlong	arg02, arg01
199e4                 | LR__2057
199e4                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
199e4     18 4E 05 F1 | 	add	fp, #24
199e8     A7 3C 02 FB | 	rdlong	local12, fp
199ec     18 4E 85 F1 | 	sub	fp, #24
199f0     0C 3C 0E F2 | 	cmp	local12, #12 wz
199f4     94 01 90 5D |  if_ne	jmp	#LR__2062
199f8     1C 4E 05 F1 | 	add	fp, #28
199fc     A7 3E 02 FB | 	rdlong	local13, fp
19a00     1C 4E 85 F1 | 	sub	fp, #28
19a04     00 04 00 FF 
19a08     00 3E 16 F2 | 	cmp	local13, ##524288 wc
19a0c     7C 01 90 CD |  if_b	jmp	#LR__2062
19a10                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
19a10     52 00 00 FF 
19a14     10 E5 05 F1 | 	add	objptr, ##42256
19a18     F2 3C 02 FB | 	rdlong	local12, objptr
19a1c     52 00 00 FF 
19a20     10 E5 85 F1 | 	sub	objptr, ##42256
19a24     1C 3C 0E F2 | 	cmp	local12, #28 wz
19a28     40 00 90 5D |  if_ne	jmp	#LR__2058
19a2c     1C 4E 05 F1 | 	add	fp, #28
19a30     A7 3C 02 FB | 	rdlong	local12, fp
19a34     14 4F 05 F1 | 	add	fp, #276
19a38     A7 3E 02 FB | 	rdlong	local13, fp
19a3c     1F 45 02 F6 | 	mov	local16, local13
19a40     02 44 66 F0 | 	shl	local16, #2
19a44     04 4F 85 F1 | 	sub	fp, #260
19a48     A7 42 02 F6 | 	mov	local15, fp
19a4c     A7 44 02 F1 | 	add	local16, fp
19a50     22 13 02 FB | 	rdlong	arg01, local16
19a54     00 14 06 F6 | 	mov	arg02, #0
19a58     2C 4E 85 F1 | 	sub	fp, #44
19a5c     D4 F9 B0 FD | 	call	#__system____builtin_atoi
19a60     FD 14 02 F6 | 	mov	arg02, result1
19a64     1E 13 02 F6 | 	mov	arg01, local12
19a68     84 8C B0 FD | 	call	#_pslpoke
19a6c                 | LR__2058
19a6c                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
19a6c     52 00 00 FF 
19a70     10 E5 05 F1 | 	add	objptr, ##42256
19a74     F2 3C 02 FB | 	rdlong	local12, objptr
19a78     52 00 00 FF 
19a7c     10 E5 85 F1 | 	sub	objptr, ##42256
19a80     1D 3C 0E F2 | 	cmp	local12, #29 wz
19a84     40 00 90 5D |  if_ne	jmp	#LR__2059
19a88     1C 4E 05 F1 | 	add	fp, #28
19a8c     A7 3C 02 FB | 	rdlong	local12, fp
19a90     14 4F 05 F1 | 	add	fp, #276
19a94     A7 3E 02 FB | 	rdlong	local13, fp
19a98     1F 45 02 F6 | 	mov	local16, local13
19a9c     02 44 66 F0 | 	shl	local16, #2
19aa0     04 4F 85 F1 | 	sub	fp, #260
19aa4     A7 42 02 F6 | 	mov	local15, fp
19aa8     A7 44 02 F1 | 	add	local16, fp
19aac     22 13 02 FB | 	rdlong	arg01, local16
19ab0     00 14 06 F6 | 	mov	arg02, #0
19ab4     2C 4E 85 F1 | 	sub	fp, #44
19ab8     78 F9 B0 FD | 	call	#__system____builtin_atoi
19abc     FD 14 02 F6 | 	mov	arg02, result1
19ac0     1E 13 02 F6 | 	mov	arg01, local12
19ac4     28 8C B0 FD | 	call	#_pslpoke
19ac8                 | LR__2059
19ac8                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19ac8     52 00 00 FF 
19acc     10 E5 05 F1 | 	add	objptr, ##42256
19ad0     F2 3C 02 FB | 	rdlong	local12, objptr
19ad4     52 00 00 FF 
19ad8     10 E5 85 F1 | 	sub	objptr, ##42256
19adc     1E 3C 0E F2 | 	cmp	local12, #30 wz
19ae0     4C 00 90 5D |  if_ne	jmp	#LR__2060
19ae4     30 4F 05 F1 | 	add	fp, #304
19ae8     A7 3E 02 FB | 	rdlong	local13, fp
19aec     02 3E 66 F0 | 	shl	local13, #2
19af0     04 4F 85 F1 | 	sub	fp, #260
19af4     A7 44 02 F6 | 	mov	local16, fp
19af8     A7 3E 02 F1 | 	add	local13, fp
19afc     1F 13 02 FB | 	rdlong	arg01, local13
19b00     2C 4E 85 F1 | 	sub	fp, #44
19b04     C0 FA B0 FD | 	call	#__system____builtin_atof
19b08     28 4E 05 F1 | 	add	fp, #40
19b0c     A7 FA 61 FC | 	wrlong	result1, fp
19b10     0C 4E 85 F1 | 	sub	fp, #12
19b14     A7 3C 02 FB | 	rdlong	local12, fp
19b18     0C 4E 05 F1 | 	add	fp, #12
19b1c     A7 12 02 F6 | 	mov	arg01, fp
19b20     28 4E 85 F1 | 	sub	fp, #40
19b24     09 15 02 FB | 	rdlong	arg02, arg01
19b28     1E 13 02 F6 | 	mov	arg01, local12
19b2c     C0 8B B0 FD | 	call	#_pslpoke
19b30                 | LR__2060
19b30                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
19b30     52 00 00 FF 
19b34     10 E5 05 F1 | 	add	objptr, ##42256
19b38     F2 3C 02 FB | 	rdlong	local12, objptr
19b3c     52 00 00 FF 
19b40     10 E5 85 F1 | 	sub	objptr, ##42256
19b44     2B 3C 0E F2 | 	cmp	local12, #43 wz
19b48     18 00 90 5D |  if_ne	jmp	#LR__2061
19b4c     1C 4E 05 F1 | 	add	fp, #28
19b50     A7 12 02 FB | 	rdlong	arg01, fp
19b54     0C 4E 85 F1 | 	sub	fp, #12
19b58     A7 14 02 FB | 	rdlong	arg02, fp
19b5c     10 4E 85 F1 | 	sub	fp, #16
19b60     8C 8B B0 FD | 	call	#_pslpoke
19b64                 | LR__2061
19b64     1C 4E 05 F1 | 	add	fp, #28
19b68     A7 12 02 FB | 	rdlong	arg01, fp
19b6c     1C 4E 85 F1 | 	sub	fp, #28
19b70     08 12 06 F1 | 	add	arg01, #8
19b74     52 00 00 FF 
19b78     10 E5 05 F1 | 	add	objptr, ##42256
19b7c     F2 14 02 FB | 	rdlong	arg02, objptr
19b80     52 00 00 FF 
19b84     10 E5 85 F1 | 	sub	objptr, ##42256
19b88     64 8B B0 FD | 	call	#_pslpoke
19b8c                 | LR__2062
19b8c                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
19b8c     18 4E 05 F1 | 	add	fp, #24
19b90     A7 3C 02 FB | 	rdlong	local12, fp
19b94     18 4E 85 F1 | 	sub	fp, #24
19b98     05 3C 0E F2 | 	cmp	local12, #5 wz
19b9c     52 00 00 AF 
19ba0     10 E5 05 A1 |  if_e	add	objptr, ##42256
19ba4     F2 40 02 AB |  if_e	rdlong	local14, objptr
19ba8     52 00 00 AF 
19bac     10 E5 85 A1 |  if_e	sub	objptr, ##42256
19bb0     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
19bb4     18 00 90 5D |  if_ne	jmp	#LR__2063
19bb8     1C 4E 05 F1 | 	add	fp, #28
19bbc     A7 12 02 FB | 	rdlong	arg01, fp
19bc0     0C 4E 85 F1 | 	sub	fp, #12
19bc4     A7 14 02 FB | 	rdlong	arg02, fp
19bc8     10 4E 85 F1 | 	sub	fp, #16
19bcc     20 8B B0 FD | 	call	#_pslpoke
19bd0                 | LR__2063
19bd0                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
19bd0     18 4E 05 F1 | 	add	fp, #24
19bd4     A7 3C 02 FB | 	rdlong	local12, fp
19bd8     18 4E 85 F1 | 	sub	fp, #24
19bdc     04 3C 0E F2 | 	cmp	local12, #4 wz
19be0     54 00 90 5D |  if_ne	jmp	#LR__2064
19be4     52 00 00 FF 
19be8     10 E5 05 F1 | 	add	objptr, ##42256
19bec     F2 40 02 FB | 	rdlong	local14, objptr
19bf0     52 00 00 FF 
19bf4     10 E5 85 F1 | 	sub	objptr, ##42256
19bf8     2B 40 0E F2 | 	cmp	local14, #43 wz
19bfc     38 00 90 AD |  if_e	jmp	#LR__2064
19c00     1C 4E 05 F1 | 	add	fp, #28
19c04     A7 3C 02 FB | 	rdlong	local12, fp
19c08     14 4F 05 F1 | 	add	fp, #276
19c0c     A7 44 02 FB | 	rdlong	local16, fp
19c10     02 44 66 F0 | 	shl	local16, #2
19c14     04 4F 85 F1 | 	sub	fp, #260
19c18     A7 44 02 F1 | 	add	local16, fp
19c1c     22 13 02 FB | 	rdlong	arg01, local16
19c20     00 14 06 F6 | 	mov	arg02, #0
19c24     2C 4E 85 F1 | 	sub	fp, #44
19c28     08 F8 B0 FD | 	call	#__system____builtin_atoi
19c2c     FD 14 02 F6 | 	mov	arg02, result1
19c30     1E 13 02 F6 | 	mov	arg01, local12
19c34     B8 8A B0 FD | 	call	#_pslpoke
19c38                 | LR__2064
19c38                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
19c38     18 4E 05 F1 | 	add	fp, #24
19c3c     A7 3C 02 FB | 	rdlong	local12, fp
19c40     18 4E 85 F1 | 	sub	fp, #24
19c44     02 3C 0E F2 | 	cmp	local12, #2 wz
19c48     54 00 90 5D |  if_ne	jmp	#LR__2065
19c4c     52 00 00 FF 
19c50     10 E5 05 F1 | 	add	objptr, ##42256
19c54     F2 40 02 FB | 	rdlong	local14, objptr
19c58     52 00 00 FF 
19c5c     10 E5 85 F1 | 	sub	objptr, ##42256
19c60     2B 40 0E F2 | 	cmp	local14, #43 wz
19c64     38 00 90 AD |  if_e	jmp	#LR__2065
19c68     1C 4E 05 F1 | 	add	fp, #28
19c6c     A7 3C 02 FB | 	rdlong	local12, fp
19c70     14 4F 05 F1 | 	add	fp, #276
19c74     A7 44 02 FB | 	rdlong	local16, fp
19c78     02 44 66 F0 | 	shl	local16, #2
19c7c     04 4F 85 F1 | 	sub	fp, #260
19c80     A7 44 02 F1 | 	add	local16, fp
19c84     22 13 02 FB | 	rdlong	arg01, local16
19c88     00 14 06 F6 | 	mov	arg02, #0
19c8c     2C 4E 85 F1 | 	sub	fp, #44
19c90     A0 F7 B0 FD | 	call	#__system____builtin_atoi
19c94     FD 14 02 F6 | 	mov	arg02, result1
19c98     1E 13 02 F6 | 	mov	arg01, local12
19c9c     98 8A B0 FD | 	call	#_psdpoke
19ca0                 | LR__2065
19ca0                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
19ca0     18 4E 05 F1 | 	add	fp, #24
19ca4     A7 3C 02 FB | 	rdlong	local12, fp
19ca8     18 4E 85 F1 | 	sub	fp, #24
19cac     01 3C 0E F2 | 	cmp	local12, #1 wz
19cb0     54 00 90 5D |  if_ne	jmp	#LR__2066
19cb4     52 00 00 FF 
19cb8     10 E5 05 F1 | 	add	objptr, ##42256
19cbc     F2 40 02 FB | 	rdlong	local14, objptr
19cc0     52 00 00 FF 
19cc4     10 E5 85 F1 | 	sub	objptr, ##42256
19cc8     2B 40 0E F2 | 	cmp	local14, #43 wz
19ccc     38 00 90 AD |  if_e	jmp	#LR__2066
19cd0     1C 4E 05 F1 | 	add	fp, #28
19cd4     A7 3C 02 FB | 	rdlong	local12, fp
19cd8     14 4F 05 F1 | 	add	fp, #276
19cdc     A7 44 02 FB | 	rdlong	local16, fp
19ce0     02 44 66 F0 | 	shl	local16, #2
19ce4     04 4F 85 F1 | 	sub	fp, #260
19ce8     A7 44 02 F1 | 	add	local16, fp
19cec     22 13 02 FB | 	rdlong	arg01, local16
19cf0     00 14 06 F6 | 	mov	arg02, #0
19cf4     2C 4E 85 F1 | 	sub	fp, #44
19cf8     38 F7 B0 FD | 	call	#__system____builtin_atoi
19cfc     FD 14 02 F6 | 	mov	arg02, result1
19d00     1E 13 02 F6 | 	mov	arg01, local12
19d04     78 8A B0 FD | 	call	#_pspoke
19d08                 | LR__2066
19d08                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
19d08     18 4E 05 F1 | 	add	fp, #24
19d0c     A7 3C 02 FB | 	rdlong	local12, fp
19d10     18 4E 85 F1 | 	sub	fp, #24
19d14     06 3C 0E F2 | 	cmp	local12, #6 wz
19d18     64 00 90 5D |  if_ne	jmp	#LR__2067
19d1c     52 00 00 FF 
19d20     10 E5 05 F1 | 	add	objptr, ##42256
19d24     F2 40 02 FB | 	rdlong	local14, objptr
19d28     52 00 00 FF 
19d2c     10 E5 85 F1 | 	sub	objptr, ##42256
19d30     2B 40 0E F2 | 	cmp	local14, #43 wz
19d34     48 00 90 AD |  if_e	jmp	#LR__2067
19d38     30 4F 05 F1 | 	add	fp, #304
19d3c     A7 3E 02 FB | 	rdlong	local13, fp
19d40     02 3E 66 F0 | 	shl	local13, #2
19d44     04 4F 85 F1 | 	sub	fp, #260
19d48     A7 3E 02 F1 | 	add	local13, fp
19d4c     1F 13 02 FB | 	rdlong	arg01, local13
19d50     2C 4E 85 F1 | 	sub	fp, #44
19d54     70 F8 B0 FD | 	call	#__system____builtin_atof
19d58     28 4E 05 F1 | 	add	fp, #40
19d5c     A7 FA 61 FC | 	wrlong	result1, fp
19d60     0C 4E 85 F1 | 	sub	fp, #12
19d64     A7 3C 02 FB | 	rdlong	local12, fp
19d68     0C 4E 05 F1 | 	add	fp, #12
19d6c     A7 12 02 F6 | 	mov	arg01, fp
19d70     28 4E 85 F1 | 	sub	fp, #40
19d74     09 15 02 FB | 	rdlong	arg02, arg01
19d78     1E 13 02 F6 | 	mov	arg01, local12
19d7c     70 89 B0 FD | 	call	#_pslpoke
19d80                 | LR__2067
19d80                 | LR__2068
19d80     30 4F 05 F1 | 	add	fp, #304
19d84     A7 40 02 FB | 	rdlong	local14, fp
19d88     01 40 06 F1 | 	add	local14, #1
19d8c     A7 40 62 FC | 	wrlong	local14, fp
19d90     30 4F 85 F1 | 	sub	fp, #304
19d94     B8 F6 9F FD | 	jmp	#LR__2032
19d98                 | LR__2069
19d98                 | LR__2070
19d98     A7 F0 03 F6 | 	mov	ptra, fp
19d9c     B2 00 A0 FD | 	call	#popregs_
19da0                 | _do_read_ret
19da0     2D 00 64 FD | 	ret
19da4                 | 
19da4                 | ' 
19da4                 | ' '------------------- release
19da4                 | ' 
19da4                 | ' sub do_release
19da4                 | _do_release
19da4     00 4A 05 F6 | 	mov	COUNT_, #0
19da8     A8 00 A0 FD | 	call	#pushregs_
19dac     10 F0 07 F1 | 	add	ptra, #16
19db0     2C 35 BF FD | 	call	#_pop
19db4     FF 14 02 F6 | 	mov	arg02, result3
19db8     A7 FA 61 FC | 	wrlong	result1, fp
19dbc     04 4E 05 F1 | 	add	fp, #4
19dc0     A7 FC 61 FC | 	wrlong	result2, fp
19dc4     04 4E 05 F1 | 	add	fp, #4
19dc8     A7 14 62 FC | 	wrlong	arg02, fp
19dcc     08 4E 85 F1 | 	sub	fp, #8
19dd0     A7 12 02 F6 | 	mov	arg01, fp
19dd4     EC 36 BF FD | 	call	#_converttoint
19dd8     0C 4E 05 F1 | 	add	fp, #12
19ddc     A7 FA 61 FC | 	wrlong	result1, fp
19de0                 | ' 
19de0                 | ' t1=pop()
19de0                 | ' channel=converttoint(t1)
19de0                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
19de0     0C 4E 85 F1 | 	sub	fp, #12
19de4     00 FA 55 F2 | 	cmps	result1, #0 wc
19de8     44 00 90 CD |  if_b	jmp	#LR__2080
19dec     0C 4E 05 F1 | 	add	fp, #12
19df0     A7 14 02 FB | 	rdlong	arg02, fp
19df4     0C 4E 85 F1 | 	sub	fp, #12
19df8     08 14 56 F2 | 	cmps	arg02, #8 wc
19dfc     30 00 90 3D |  if_ae	jmp	#LR__2080
19e00     37 00 00 FF 
19e04     10 E4 05 F1 | 	add	objptr, ##28176
19e08     F2 12 02 FB | 	rdlong	arg01, objptr
19e0c     37 00 00 FF 
19e10     10 E4 85 F1 | 	sub	objptr, ##28176
19e14     0C 4E 05 F1 | 	add	fp, #12
19e18     A7 14 02 FB | 	rdlong	arg02, fp
19e1c     0C 4E 85 F1 | 	sub	fp, #12
19e20     06 14 66 F0 | 	shl	arg02, #6
19e24     0A 13 02 F1 | 	add	arg01, arg02
19e28     2C 12 06 F1 | 	add	arg01, #44
19e2c     09 FF 69 FC | 	wrlong	#255, arg01
19e30                 | LR__2080
19e30     A7 F0 03 F6 | 	mov	ptra, fp
19e34     B2 00 A0 FD | 	call	#popregs_
19e38                 | _do_release_ret
19e38     2D 00 64 FD | 	ret
19e3c                 | 
19e3c                 | ' 
19e3c                 | ' '------------------- restore
19e3c                 | ' 
19e3c                 | ' sub do_restore()
19e3c                 | _do_restore
19e3c     4A 00 00 FF 
19e40     88 E4 05 F1 | 	add	objptr, ##38024
19e44     F2 00 02 FB | 	rdlong	_var01, objptr
19e48     06 00 00 FF 
19e4c     A4 E4 05 F1 | 	add	objptr, ##3236
19e50     F2 00 62 FC | 	wrlong	_var01, objptr
19e54     B2 01 00 FF 
19e58     42 01 06 F6 | 	mov	_var01, ##@LR__5920
19e5c     01 00 00 FF 
19e60     B0 E5 05 F1 | 	add	objptr, ##944
19e64     F2 00 62 FC | 	wrlong	_var01, objptr
19e68     52 00 00 FF 
19e6c     DC E4 85 F1 | 	sub	objptr, ##42204
19e70                 | _do_restore_ret
19e70     2D 00 64 FD | 	ret
19e74                 | 
19e74                 | ' 
19e74                 | ' '------------------- return
19e74                 | ' 
19e74                 | ' sub do_return()
19e74                 | _do_return
19e74                 | ' if gosubtop>0 then
19e74     50 00 00 FF 
19e78     34 E5 05 F1 | 	add	objptr, ##41268
19e7c     F2 00 02 FB | 	rdlong	_var01, objptr
19e80     50 00 00 FF 
19e84     34 E5 85 F1 | 	sub	objptr, ##41268
19e88     01 00 56 F2 | 	cmps	_var01, #1 wc
19e8c     8C 00 90 CD |  if_b	jmp	#LR__2090
19e90     50 00 00 FF 
19e94     34 E5 05 F1 | 	add	objptr, ##41268
19e98     F2 00 02 FB | 	rdlong	_var01, objptr
19e9c     03 00 66 F0 | 	shl	_var01, #3
19ea0     03 00 00 FF 
19ea4     88 E5 85 F1 | 	sub	objptr, ##1928
19ea8     F2 00 02 F1 | 	add	_var01, objptr
19eac     00 01 02 FB | 	rdlong	_var01, _var01
19eb0     03 00 00 FF 
19eb4     0C E5 05 F1 | 	add	objptr, ##1804
19eb8     F2 00 62 FC | 	wrlong	_var01, objptr
19ebc     7C E4 05 F1 | 	add	objptr, #124
19ec0     F2 00 02 FB | 	rdlong	_var01, objptr
19ec4     03 00 66 F0 | 	shl	_var01, #3
19ec8     03 00 00 FF 
19ecc     88 E5 85 F1 | 	sub	objptr, ##1928
19ed0     F2 00 02 F1 | 	add	_var01, objptr
19ed4     04 00 06 F1 | 	add	_var01, #4
19ed8     00 01 02 FB | 	rdlong	_var01, _var01
19edc     03 00 00 FF 
19ee0     10 E5 05 F1 | 	add	objptr, ##1808
19ee4     F2 00 62 FC | 	wrlong	_var01, objptr
19ee8     06 00 00 FF 
19eec     40 E4 85 F1 | 	sub	objptr, ##3136
19ef0     F2 00 02 FB | 	rdlong	_var01, objptr
19ef4     01 00 86 F1 | 	sub	_var01, #1
19ef8     04 E4 05 F1 | 	add	objptr, #4
19efc     F2 00 62 FC | 	wrlong	_var01, objptr
19f00     06 00 00 FF 
19f04     B4 E4 05 F1 | 	add	objptr, ##3252
19f08     F2 00 02 FB | 	rdlong	_var01, objptr
19f0c     01 00 86 F1 | 	sub	_var01, #1
19f10     F2 00 62 FC | 	wrlong	_var01, objptr
19f14     50 00 00 FF 
19f18     34 E5 85 F1 | 	sub	objptr, ##41268
19f1c                 | LR__2090
19f1c                 | _do_return_ret
19f1c     2D 00 64 FD | 	ret
19f20                 | 
19f20                 | ' 
19f20                 | ' '------------------- right$
19f20                 | ' 
19f20                 | ' sub do_right
19f20                 | _do_right
19f20     00 4A 05 F6 | 	mov	COUNT_, #0
19f24     A8 00 A0 FD | 	call	#pushregs_
19f28     14 F0 07 F1 | 	add	ptra, #20
19f2c     4A 00 00 FF 
19f30     80 E4 05 F1 | 	add	objptr, ##38016
19f34     F2 16 02 FB | 	rdlong	arg03, objptr
19f38     0B 15 02 F6 | 	mov	arg02, arg03
19f3c     01 14 66 F0 | 	shl	arg02, #1
19f40     0B 15 02 F1 | 	add	arg02, arg03
19f44     02 14 66 F0 | 	shl	arg02, #2
19f48     03 00 00 FF 
19f4c     04 E4 85 F1 | 	sub	objptr, ##1540
19f50     F2 14 02 F1 | 	add	arg02, objptr
19f54     0A 17 02 FB | 	rdlong	arg03, arg02
19f58     0C 4E 05 F1 | 	add	fp, #12
19f5c     A7 16 62 FC | 	wrlong	arg03, fp
19f60                 | ' 
19f60                 | ' numpar=compiledline(lineptr_e).result.uresult
19f60                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
19f60     0C 4E 85 F1 | 	sub	fp, #12
19f64     02 16 0E F2 | 	cmp	arg03, #2 wz
19f68     47 00 00 FF 
19f6c     7C E4 85 F1 | 	sub	objptr, ##36476
19f70     40 00 90 AD |  if_e	jmp	#LR__2100
19f74     00 12 06 F6 | 	mov	arg01, #0
19f78     68 1C B1 FD | 	call	#__system___getiolock_0600
19f7c     FD 12 02 F6 | 	mov	arg01, result1
19f80     BC BF B0 FD | 	call	#__system___lockmem
19f84     B2 01 00 FF 
19f88     43 15 06 F6 | 	mov	arg02, ##@LR__5921
19f8c     00 12 06 F6 | 	mov	arg01, #0
19f90     00 16 06 F6 | 	mov	arg03, #0
19f94     A0 CC B0 FD | 	call	#__system___basic_print_string
19f98     00 12 06 F6 | 	mov	arg01, #0
19f9c     44 1C B1 FD | 	call	#__system___getiolock_0600
19fa0     FD 00 68 FC | 	wrlong	#0, result1
19fa4     27 12 06 F6 | 	mov	arg01, #39
19fa8     00 14 06 F6 | 	mov	arg02, #0
19fac     A0 85 B0 FD | 	call	#_printerror
19fb0     EC 00 90 FD | 	jmp	#LR__2103
19fb4                 | LR__2100
19fb4     28 33 BF FD | 	call	#_pop
19fb8     FF 16 02 F6 | 	mov	arg03, result3
19fbc     A7 FA 61 FC | 	wrlong	result1, fp
19fc0     04 4E 05 F1 | 	add	fp, #4
19fc4     A7 FC 61 FC | 	wrlong	result2, fp
19fc8     04 4E 05 F1 | 	add	fp, #4
19fcc     A7 16 62 FC | 	wrlong	arg03, fp
19fd0     08 4E 85 F1 | 	sub	fp, #8
19fd4     A7 12 02 F6 | 	mov	arg01, fp
19fd8     E8 34 BF FD | 	call	#_converttoint
19fdc     FD 16 02 F6 | 	mov	arg03, result1
19fe0     10 4E 05 F1 | 	add	fp, #16
19fe4     A7 16 62 FC | 	wrlong	arg03, fp
19fe8     10 4E 85 F1 | 	sub	fp, #16
19fec     F0 32 BF FD | 	call	#_pop
19ff0     FF 16 02 F6 | 	mov	arg03, result3
19ff4     A7 FA 61 FC | 	wrlong	result1, fp
19ff8     04 4E 05 F1 | 	add	fp, #4
19ffc     A7 FC 61 FC | 	wrlong	result2, fp
1a000     04 4E 05 F1 | 	add	fp, #4
1a004     A7 16 62 FC | 	wrlong	arg03, fp
1a008                 | ' t1=pop() : arg=converttoint(t1)
1a008                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a008     08 4E 85 F1 | 	sub	fp, #8
1a00c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a010     18 00 90 5D |  if_ne	jmp	#LR__2101
1a014     A7 12 02 FB | 	rdlong	arg01, fp
1a018     3C 34 BF FD | 	call	#_convertstring
1a01c     A7 FA 61 FC | 	wrlong	result1, fp
1a020     08 4E 05 F1 | 	add	fp, #8
1a024     A7 3E 68 FC | 	wrlong	#31, fp
1a028     08 4E 85 F1 | 	sub	fp, #8
1a02c                 | LR__2101
1a02c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a02c     08 4E 05 F1 | 	add	fp, #8
1a030     A7 16 02 FB | 	rdlong	arg03, fp
1a034     08 4E 85 F1 | 	sub	fp, #8
1a038     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a03c     40 00 90 AD |  if_e	jmp	#LR__2102
1a040     00 12 06 F6 | 	mov	arg01, #0
1a044     9C 1B B1 FD | 	call	#__system___getiolock_0600
1a048     FD 12 02 F6 | 	mov	arg01, result1
1a04c     F0 BE B0 FD | 	call	#__system___lockmem
1a050     B2 01 00 FF 
1a054     4C 15 06 F6 | 	mov	arg02, ##@LR__5922
1a058     00 12 06 F6 | 	mov	arg01, #0
1a05c     00 16 06 F6 | 	mov	arg03, #0
1a060     D4 CB B0 FD | 	call	#__system___basic_print_string
1a064     00 12 06 F6 | 	mov	arg01, #0
1a068     78 1B B1 FD | 	call	#__system___getiolock_0600
1a06c     FD 00 68 FC | 	wrlong	#0, result1
1a070     0F 12 06 F6 | 	mov	arg01, #15
1a074     00 14 06 F6 | 	mov	arg02, #0
1a078     D4 84 B0 FD | 	call	#_printerror
1a07c     20 00 90 FD | 	jmp	#LR__2103
1a080                 | LR__2102
1a080     A7 12 02 FB | 	rdlong	arg01, fp
1a084     10 4E 05 F1 | 	add	fp, #16
1a088     A7 14 02 FB | 	rdlong	arg02, fp
1a08c     10 4E 85 F1 | 	sub	fp, #16
1a090     B4 DF B0 FD | 	call	#__system__Right_S
1a094     A7 FA 61 FC | 	wrlong	result1, fp
1a098     A7 12 02 F6 | 	mov	arg01, fp
1a09c     D8 32 BF FD | 	call	#_push
1a0a0                 | LR__2103
1a0a0     A7 F0 03 F6 | 	mov	ptra, fp
1a0a4     B2 00 A0 FD | 	call	#popregs_
1a0a8                 | _do_right_ret
1a0a8     2D 00 64 FD | 	ret
1a0ac                 | 
1a0ac                 | ' 
1a0ac                 | ' '------------------- rnd
1a0ac                 | ' 
1a0ac                 | ' sub do_rnd
1a0ac                 | _do_rnd
1a0ac     01 4A 05 F6 | 	mov	COUNT_, #1
1a0b0     A8 00 A0 FD | 	call	#pushregs_
1a0b4     10 F0 07 F1 | 	add	ptra, #16
1a0b8     4A 00 00 FF 
1a0bc     80 E4 05 F1 | 	add	objptr, ##38016
1a0c0     F2 26 02 FB | 	rdlong	local01, objptr
1a0c4     13 17 02 F6 | 	mov	arg03, local01
1a0c8     01 16 66 F0 | 	shl	arg03, #1
1a0cc     13 17 02 F1 | 	add	arg03, local01
1a0d0     02 16 66 F0 | 	shl	arg03, #2
1a0d4     03 00 00 FF 
1a0d8     04 E4 85 F1 | 	sub	objptr, ##1540
1a0dc     F2 16 02 F1 | 	add	arg03, objptr
1a0e0     0B 17 02 FB | 	rdlong	arg03, arg03
1a0e4     0C 4E 05 F1 | 	add	fp, #12
1a0e8     A7 16 62 FC | 	wrlong	arg03, fp
1a0ec                 | ' 
1a0ec                 | ' numpar=compiledline(lineptr_e).result.uresult
1a0ec                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1a0ec     0C 4E 85 F1 | 	sub	fp, #12
1a0f0     02 16 16 F2 | 	cmp	arg03, #2 wc
1a0f4     47 00 00 FF 
1a0f8     7C E4 85 F1 | 	sub	objptr, ##36476
1a0fc     40 00 90 CD |  if_b	jmp	#LR__2110
1a100     00 12 06 F6 | 	mov	arg01, #0
1a104     DC 1A B1 FD | 	call	#__system___getiolock_0600
1a108     FD 12 02 F6 | 	mov	arg01, result1
1a10c     30 BE B0 FD | 	call	#__system___lockmem
1a110     B2 01 00 FF 
1a114     55 15 06 F6 | 	mov	arg02, ##@LR__5923
1a118     00 12 06 F6 | 	mov	arg01, #0
1a11c     00 16 06 F6 | 	mov	arg03, #0
1a120     14 CB B0 FD | 	call	#__system___basic_print_string
1a124     00 12 06 F6 | 	mov	arg01, #0
1a128     B8 1A B1 FD | 	call	#__system___getiolock_0600
1a12c     FD 00 68 FC | 	wrlong	#0, result1
1a130     27 12 06 F6 | 	mov	arg01, #39
1a134     00 14 06 F6 | 	mov	arg02, #0
1a138     14 84 B0 FD | 	call	#_printerror
1a13c     30 01 90 FD | 	jmp	#LR__2117
1a140                 | LR__2110
1a140                 | ' if numpar=0 then
1a140     0C 4E 05 F1 | 	add	fp, #12
1a144     A7 FE 09 FB | 	rdlong	result3, fp wz
1a148     0C 4E 85 F1 | 	sub	fp, #12
1a14c     20 00 90 5D |  if_ne	jmp	#LR__2111
1a150     08 4E 05 F1 | 	add	fp, #8
1a154     A7 3A 68 FC | 	wrlong	#29, fp
1a158     08 4E 85 F1 | 	sub	fp, #8
1a15c     1B FA 61 FD | 	getrnd	result1
1a160     A7 FA 61 FC | 	wrlong	result1, fp
1a164     A7 12 02 F6 | 	mov	arg01, fp
1a168     0C 32 BF FD | 	call	#_push
1a16c     00 01 90 FD | 	jmp	#LR__2116
1a170                 | LR__2111
1a170     6C 31 BF FD | 	call	#_pop
1a174     A7 FA 61 FC | 	wrlong	result1, fp
1a178     04 4E 05 F1 | 	add	fp, #4
1a17c     A7 FC 61 FC | 	wrlong	result2, fp
1a180     04 4E 05 F1 | 	add	fp, #4
1a184     A7 FE 61 FC | 	wrlong	result3, fp
1a188                 | '   t1=pop()
1a188                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1a188     08 4E 85 F1 | 	sub	fp, #8
1a18c     1C FE 0D F2 | 	cmp	result3, #28 wz
1a190     08 4E 05 51 |  if_ne	add	fp, #8
1a194     A7 26 02 5B |  if_ne	rdlong	local01, fp
1a198     08 4E 85 51 |  if_ne	sub	fp, #8
1a19c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1a1a0     2C 00 90 5D |  if_ne	jmp	#LR__2112
1a1a4     1B FA 61 FD | 	getrnd	result1
1a1a8     A7 26 02 FB | 	rdlong	local01, fp
1a1ac     13 FB 11 FD | 	qdiv	result1, local01
1a1b0     A7 12 02 F6 | 	mov	arg01, fp
1a1b4     19 26 62 FD | 	getqy	local01
1a1b8     A7 26 62 FC | 	wrlong	local01, fp
1a1bc     08 4E 05 F1 | 	add	fp, #8
1a1c0     A7 3A 68 FC | 	wrlong	#29, fp
1a1c4     08 4E 85 F1 | 	sub	fp, #8
1a1c8     AC 31 BF FD | 	call	#_push
1a1cc     A0 00 90 FD | 	jmp	#LR__2115
1a1d0                 | LR__2112
1a1d0     08 4E 05 F1 | 	add	fp, #8
1a1d4     A7 26 02 FB | 	rdlong	local01, fp
1a1d8     08 4E 85 F1 | 	sub	fp, #8
1a1dc     1E 26 0E F2 | 	cmp	local01, #30 wz
1a1e0     48 00 90 5D |  if_ne	jmp	#LR__2113
1a1e4     A7 12 02 FB | 	rdlong	arg01, fp
1a1e8     00 C0 24 FF 
1a1ec     00 14 06 F6 | 	mov	arg02, ##1233125376
1a1f0     CC ED B0 FD | 	call	#__system___float_div
1a1f4     FD 26 02 F6 | 	mov	local01, result1
1a1f8     1B 12 62 FD | 	getrnd	arg01
1a1fc     74 13 06 F4 | 	bitl	arg01, #372
1a200     B4 E7 B0 FD | 	call	#__system___float_fromuns
1a204     FD 14 02 F6 | 	mov	arg02, result1
1a208     13 13 02 F6 | 	mov	arg01, local01
1a20c     AC EB B0 FD | 	call	#__system___float_mul
1a210     A7 FA 61 FC | 	wrlong	result1, fp
1a214     08 4E 05 F1 | 	add	fp, #8
1a218     A7 3C 68 FC | 	wrlong	#30, fp
1a21c     08 4E 85 F1 | 	sub	fp, #8
1a220     A7 12 02 F6 | 	mov	arg01, fp
1a224     50 31 BF FD | 	call	#_push
1a228     44 00 90 FD | 	jmp	#LR__2114
1a22c                 | LR__2113
1a22c                 | '     print "rnd: "; : printerror(40) 
1a22c     00 12 06 F6 | 	mov	arg01, #0
1a230     B0 19 B1 FD | 	call	#__system___getiolock_0600
1a234     FD 12 02 F6 | 	mov	arg01, result1
1a238     04 BD B0 FD | 	call	#__system___lockmem
1a23c     B2 01 00 FF 
1a240     5B 15 06 F6 | 	mov	arg02, ##@LR__5924
1a244     00 12 06 F6 | 	mov	arg01, #0
1a248     00 16 06 F6 | 	mov	arg03, #0
1a24c     E8 C9 B0 FD | 	call	#__system___basic_print_string
1a250     00 12 06 F6 | 	mov	arg01, #0
1a254     8C 19 B1 FD | 	call	#__system___getiolock_0600
1a258     FD 00 68 FC | 	wrlong	#0, result1
1a25c     28 12 06 F6 | 	mov	arg01, #40
1a260     00 14 06 F6 | 	mov	arg02, #0
1a264     E8 82 B0 FD | 	call	#_printerror
1a268     A7 12 02 F6 | 	mov	arg01, fp
1a26c     08 31 BF FD | 	call	#_push
1a270                 | LR__2114
1a270                 | LR__2115
1a270                 | LR__2116
1a270                 | LR__2117
1a270     A7 F0 03 F6 | 	mov	ptra, fp
1a274     B2 00 A0 FD | 	call	#popregs_
1a278                 | _do_rnd_ret
1a278     2D 00 64 FD | 	ret
1a27c                 | 
1a27c                 | ' 
1a27c                 | ' '-------------------- round
1a27c                 | ' 
1a27c                 | ' sub do_round
1a27c                 | _do_round
1a27c     00 4A 05 F6 | 	mov	COUNT_, #0
1a280     A8 00 A0 FD | 	call	#pushregs_
1a284     0C F0 07 F1 | 	add	ptra, #12
1a288     54 30 BF FD | 	call	#_pop
1a28c     A7 FA 61 FC | 	wrlong	result1, fp
1a290     04 4E 05 F1 | 	add	fp, #4
1a294     A7 FC 61 FC | 	wrlong	result2, fp
1a298     04 4E 05 F1 | 	add	fp, #4
1a29c     A7 FE 61 FC | 	wrlong	result3, fp
1a2a0     08 4E 85 F1 | 	sub	fp, #8
1a2a4     A7 12 02 F6 | 	mov	arg01, fp
1a2a8     18 32 BF FD | 	call	#_converttoint
1a2ac     A7 FA 61 FC | 	wrlong	result1, fp
1a2b0     08 4E 05 F1 | 	add	fp, #8
1a2b4     A7 38 68 FC | 	wrlong	#28, fp
1a2b8     08 4E 85 F1 | 	sub	fp, #8
1a2bc     A7 12 02 F6 | 	mov	arg01, fp
1a2c0     B4 30 BF FD | 	call	#_push
1a2c4     A7 F0 03 F6 | 	mov	ptra, fp
1a2c8     B2 00 A0 FD | 	call	#popregs_
1a2cc                 | _do_round_ret
1a2cc     2D 00 64 FD | 	ret
1a2d0                 | 
1a2d0                 | ' 
1a2d0                 | ' '-------------------- rqpin
1a2d0                 | ' 
1a2d0                 | ' sub do_rqpin
1a2d0                 | _do_rqpin
1a2d0     00 4A 05 F6 | 	mov	COUNT_, #0
1a2d4     A8 00 A0 FD | 	call	#pushregs_
1a2d8     0C F0 07 F1 | 	add	ptra, #12
1a2dc     00 30 BF FD | 	call	#_pop
1a2e0     A7 FA 61 FC | 	wrlong	result1, fp
1a2e4     04 4E 05 F1 | 	add	fp, #4
1a2e8     A7 FC 61 FC | 	wrlong	result2, fp
1a2ec     04 4E 05 F1 | 	add	fp, #4
1a2f0     A7 FE 61 FC | 	wrlong	result3, fp
1a2f4     08 4E 85 F1 | 	sub	fp, #8
1a2f8     A7 12 02 F6 | 	mov	arg01, fp
1a2fc     C4 31 BF FD | 	call	#_converttoint
1a300     FD 12 02 F6 | 	mov	arg01, result1
1a304     00 FA 05 F6 | 	mov	result1, #0
1a308     09 FB 81 FA | 	rqpin	result1, arg01
1a30c     52 00 00 FF 
1a310     10 E5 05 F1 | 	add	objptr, ##42256
1a314     F2 FA 61 FC | 	wrlong	result1, objptr
1a318     52 00 00 FF 
1a31c     10 E5 85 F1 | 	sub	objptr, ##42256
1a320     08 4E 05 F1 | 	add	fp, #8
1a324     A7 3A 68 FC | 	wrlong	#29, fp
1a328     08 4E 85 F1 | 	sub	fp, #8
1a32c     A7 08 68 FC | 	wrlong	#4, fp
1a330     A7 12 02 F6 | 	mov	arg01, fp
1a334     40 30 BF FD | 	call	#_push
1a338     A7 F0 03 F6 | 	mov	ptra, fp
1a33c     B2 00 A0 FD | 	call	#popregs_
1a340                 | _do_rqpin_ret
1a340     2D 00 64 FD | 	ret
1a344                 | 
1a344                 | ' 
1a344                 | ' ' ------------------ run
1a344                 | ' 
1a344                 | ' sub do_run
1a344                 | _do_run
1a344     04 4A 05 F6 | 	mov	COUNT_, #4
1a348     A8 00 A0 FD | 	call	#pushregs_
1a34c     4A 00 00 FF 
1a350     80 E4 05 F1 | 	add	objptr, ##38016
1a354     F2 26 02 FB | 	rdlong	local01, objptr
1a358     06 00 00 FF 
1a35c     38 E4 05 F1 | 	add	objptr, ##3128
1a360     F2 28 02 FB | 	rdlong	local02, objptr
1a364     04 E4 05 F1 | 	add	objptr, #4
1a368     F2 2A 02 FB | 	rdlong	local03, objptr
1a36c     13 19 02 F6 | 	mov	arg04, local01
1a370     0C 17 02 F6 | 	mov	arg03, arg04
1a374     01 16 66 F0 | 	shl	arg03, #1
1a378     0C 17 02 F1 | 	add	arg03, arg04
1a37c     02 16 66 F0 | 	shl	arg03, #2
1a380     09 00 00 FF 
1a384     40 E4 85 F1 | 	sub	objptr, ##4672
1a388     F2 16 02 F1 | 	add	arg03, objptr
1a38c     0B 15 02 FB | 	rdlong	arg02, arg03
1a390                 | ' 
1a390                 | ' r_lineptr_e=lineptr_e
1a390                 | ' r_runptr=runptr
1a390                 | ' r_runptr2=runptr2
1a390                 | ' 
1a390                 | ' numpar=compiledline(lineptr_e).result.uresult
1a390                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1a390     01 14 0E F2 | 	cmp	arg02, #1 wz
1a394     47 00 00 FF 
1a398     7C E4 85 F1 | 	sub	objptr, ##36476
1a39c     00 12 06 A6 |  if_e	mov	arg01, #0
1a3a0     54 A1 BF AD |  if_e	call	#_do_load
1a3a4     4A 00 00 FF 
1a3a8     88 E4 05 F1 | 	add	objptr, ##38024
1a3ac     F2 18 02 FB | 	rdlong	arg04, objptr
1a3b0     06 00 00 FF 
1a3b4     30 E4 05 F1 | 	add	objptr, ##3120
1a3b8     F2 18 62 FC | 	wrlong	arg04, objptr
1a3bc     04 E4 05 F1 | 	add	objptr, #4
1a3c0     F2 00 68 FC | 	wrlong	#0, objptr
1a3c4     04 E4 05 F1 | 	add	objptr, #4
1a3c8     FF FF FF FF 
1a3cc     F2 FE 6B FC | 	wrlong	##-1, objptr
1a3d0     06 00 00 FF 
1a3d4     38 E4 85 F1 | 	sub	objptr, ##3128
1a3d8     F2 18 02 FB | 	rdlong	arg04, objptr
1a3dc     06 00 00 FF 
1a3e0     A4 E4 05 F1 | 	add	objptr, ##3236
1a3e4     F2 18 62 FC | 	wrlong	arg04, objptr
1a3e8     B2 01 00 FF 
1a3ec     61 19 06 F6 | 	mov	arg04, ##@LR__5925
1a3f0     01 00 00 FF 
1a3f4     B0 E5 05 F1 | 	add	objptr, ##944
1a3f8     F2 18 62 FC | 	wrlong	arg04, objptr
1a3fc                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1a3fc                 | ' dataptr=programstart : readline="" ' reset the data pointer
1a3fc                 | ' if inrun>0 then 
1a3fc     01 00 00 FF 
1a400     F0 E5 85 F1 | 	sub	objptr, ##1008
1a404     F2 18 02 FB | 	rdlong	arg04, objptr
1a408     50 00 00 FF 
1a40c     EC E4 85 F1 | 	sub	objptr, ##41196
1a410     01 18 16 F2 | 	cmp	arg04, #1 wc
1a414     30 00 90 CD |  if_b	jmp	#LR__2120
1a418     50 00 00 FF 
1a41c     F0 E4 05 F1 | 	add	objptr, ##41200
1a420     F2 12 02 F6 | 	mov	arg01, objptr
1a424     38 E4 85 F1 | 	sub	objptr, #56
1a428     F2 14 02 FB | 	rdlong	arg02, objptr
1a42c     18 16 06 F6 | 	mov	arg03, #24
1a430     44 00 00 FF 
1a434     EC E5 85 F1 | 	sub	objptr, ##35308
1a438     7C AE B0 FD | 	call	#_psram_spin2_read1
1a43c     0B 00 00 FF 
1a440     CC E4 85 F1 | 	sub	objptr, ##5836
1a444                 | '   psram.read1(varptr(runheader),runptr,24)  
1a444                 | '   return
1a444     0C 03 90 FD | 	jmp	#LR__2127
1a448                 | LR__2120
1a448     50 00 00 FF 
1a44c     EC E4 05 F1 | 	add	objptr, ##41196
1a450     F2 02 68 FC | 	wrlong	#1, objptr
1a454     04 E4 05 F1 | 	add	objptr, #4
1a458     F2 12 02 F6 | 	mov	arg01, objptr
1a45c     38 E4 85 F1 | 	sub	objptr, #56
1a460     F2 14 02 FB | 	rdlong	arg02, objptr
1a464     18 16 06 F6 | 	mov	arg03, #24
1a468     44 00 00 FF 
1a46c     EC E5 85 F1 | 	sub	objptr, ##35308
1a470     44 AE B0 FD | 	call	#_psram_spin2_read1
1a474                 | ' inrun=1
1a474                 | ' psram.read1(varptr(runheader),runptr,24) 
1a474                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1a474     45 00 00 FF 
1a478     24 E4 05 F1 | 	add	objptr, ##35364
1a47c     F2 2C 02 FB | 	rdlong	local04, objptr
1a480     50 00 00 FF 
1a484     F0 E4 85 F1 | 	sub	objptr, ##41200
1a488     FF FF 7F FF 
1a48c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1a490     50 00 00 AF 
1a494     EC E4 05 A1 |  if_e	add	objptr, ##41196
1a498     F2 00 68 AC |  if_e	wrlong	#0, objptr
1a49c     50 00 00 AF 
1a4a0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1a4a4     AC 02 90 AD |  if_e	jmp	#LR__2127
1a4a8                 | ' do 
1a4a8                 | LR__2121
1a4a8                 | '   if runptr<>oldrunptr then
1a4a8     50 00 00 FF 
1a4ac     B8 E4 05 F1 | 	add	objptr, ##41144
1a4b0     F2 2C 02 FB | 	rdlong	local04, objptr
1a4b4     08 E4 05 F1 | 	add	objptr, #8
1a4b8     F2 18 02 FB | 	rdlong	arg04, objptr
1a4bc     50 00 00 FF 
1a4c0     C0 E4 85 F1 | 	sub	objptr, ##41152
1a4c4     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1a4c8     CC 00 90 AD |  if_e	jmp	#LR__2122
1a4cc     50 00 00 FF 
1a4d0     F0 E4 05 F1 | 	add	objptr, ##41200
1a4d4     F2 12 02 F6 | 	mov	arg01, objptr
1a4d8     38 E4 85 F1 | 	sub	objptr, #56
1a4dc     F2 14 02 FB | 	rdlong	arg02, objptr
1a4e0     18 16 06 F6 | 	mov	arg03, #24
1a4e4     44 00 00 FF 
1a4e8     EC E5 85 F1 | 	sub	objptr, ##35308
1a4ec     C8 AD B0 FD | 	call	#_psram_spin2_read1
1a4f0     3B 00 00 FF 
1a4f4     B0 E5 05 F1 | 	add	objptr, ##30640
1a4f8     F2 12 02 F6 | 	mov	arg01, objptr
1a4fc     09 00 00 FF 
1a500     3C E4 05 F1 | 	add	objptr, ##4668
1a504     F2 14 02 FB | 	rdlong	arg02, objptr
1a508     0B 00 00 FF 
1a50c     54 E4 85 F1 | 	sub	objptr, ##5716
1a510     F2 2C 02 FB | 	rdlong	local04, objptr
1a514     01 2C 66 F0 | 	shl	local04, #1
1a518     16 15 02 F1 | 	add	arg02, local04
1a51c     0B 00 00 FF 
1a520     94 E4 05 F1 | 	add	objptr, ##5780
1a524     F2 16 02 FB | 	rdlong	arg03, objptr
1a528     40 E4 85 F1 | 	sub	objptr, #64
1a52c     F2 2C 02 FB | 	rdlong	local04, objptr
1a530     16 17 82 F1 | 	sub	arg03, local04
1a534     44 00 00 FF 
1a538     EC E5 85 F1 | 	sub	objptr, ##35308
1a53c     78 AD B0 FD | 	call	#_psram_spin2_read1
1a540     45 00 00 FF 
1a544     2C E4 05 F1 | 	add	objptr, ##35372
1a548     F2 2C 02 FB | 	rdlong	local04, objptr
1a54c     40 E4 85 F1 | 	sub	objptr, #64
1a550     F2 14 02 FB | 	rdlong	arg02, objptr
1a554     0A 2D 82 F1 | 	sub	local04, arg02
1a558     0B 00 00 FF 
1a55c     54 E4 85 F1 | 	sub	objptr, ##5716
1a560     F2 14 02 FB | 	rdlong	arg02, objptr
1a564     0A 2D 12 FD | 	qdiv	local04, arg02
1a568     05 00 00 FF 
1a56c     18 E4 05 F1 | 	add	objptr, ##2584
1a570     18 2C 62 FD | 	getqx	local04
1a574     03 2C 86 F1 | 	sub	local04, #3
1a578     F2 2C 62 FC | 	wrlong	local04, objptr
1a57c     06 00 00 FF 
1a580     3C E4 05 F1 | 	add	objptr, ##3132
1a584     F2 2C 02 FB | 	rdlong	local04, objptr
1a588     08 E4 05 F1 | 	add	objptr, #8
1a58c     F2 2C 62 FC | 	wrlong	local04, objptr
1a590     50 00 00 FF 
1a594     C0 E4 85 F1 | 	sub	objptr, ##41152
1a598                 | LR__2122
1a598     50 00 00 FF 
1a59c     04 E5 05 F1 | 	add	objptr, ##41220
1a5a0     F2 2C 02 FB | 	rdlong	local04, objptr
1a5a4     4C E4 85 F1 | 	sub	objptr, #76
1a5a8     F2 2C 62 FC | 	wrlong	local04, objptr
1a5ac     04 E4 05 F1 | 	add	objptr, #4
1a5b0     F2 12 02 FB | 	rdlong	arg01, objptr
1a5b4     50 00 00 FF 
1a5b8     BC E4 85 F1 | 	sub	objptr, ##41148
1a5bc     1C 2C BF FD | 	call	#_execute_line
1a5c0     50 00 00 FF 
1a5c4     BC E4 05 F1 | 	add	objptr, ##41148
1a5c8     F2 FA 61 FC | 	wrlong	result1, objptr
1a5cc     04 E4 85 F1 | 	sub	objptr, #4
1a5d0     F2 2C 02 FB | 	rdlong	local04, objptr
1a5d4     50 00 00 FF 
1a5d8     B8 E4 85 F1 | 	sub	objptr, ##41144
1a5dc     FF FF 3F FF 
1a5e0     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a5e4     4C 00 90 AD |  if_e	jmp	#LR__2125
1a5e8     E0 12 06 F6 | 	mov	arg01, #224
1a5ec     58 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a5f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1a5f4     10 00 90 5D |  if_ne	jmp	#LR__2123
1a5f8     E4 12 06 F6 | 	mov	arg01, #228
1a5fc     48 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a600     00 FA 0D F2 | 	cmp	result1, #0 wz
1a604     10 00 90 AD |  if_e	jmp	#LR__2124
1a608                 | LR__2123
1a608     06 12 06 F6 | 	mov	arg01, #6
1a60c     38 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1a610     00 FA 0D F2 | 	cmp	result1, #0 wz
1a614     1C 00 90 5D |  if_ne	jmp	#LR__2125
1a618                 | LR__2124
1a618     50 00 00 FF 
1a61c     EC E4 05 F1 | 	add	objptr, ##41196
1a620     F2 2C 02 FB | 	rdlong	local04, objptr
1a624     50 00 00 FF 
1a628     EC E4 85 F1 | 	sub	objptr, ##41196
1a62c     02 2C 0E F2 | 	cmp	local04, #2 wz
1a630     74 FE 9F 5D |  if_ne	jmp	#LR__2121
1a634                 | LR__2125
1a634                 | '   ''do whatever kbm.peek_latest_key()=$106 
1a634                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1a634     50 00 00 FF 
1a638     B8 E4 05 F1 | 	add	objptr, ##41144
1a63c     F2 2C 02 FB | 	rdlong	local04, objptr
1a640     50 00 00 FF 
1a644     B8 E4 85 F1 | 	sub	objptr, ##41144
1a648     FF FF 3F FF 
1a64c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1a650     AC 00 90 AD |  if_e	jmp	#LR__2126
1a654     50 00 00 FF 
1a658     EC E4 05 F1 | 	add	objptr, ##41196
1a65c     F2 2C 02 FB | 	rdlong	local04, objptr
1a660     50 00 00 FF 
1a664     EC E4 85 F1 | 	sub	objptr, ##41196
1a668     01 2C 0E F2 | 	cmp	local04, #1 wz
1a66c     90 00 90 5D |  if_ne	jmp	#LR__2126
1a670                 | '   print: print "Stopped at line ";runheader(0) 
1a670     00 12 06 F6 | 	mov	arg01, #0
1a674     6C 15 B1 FD | 	call	#__system___getiolock_0600
1a678     FD 12 02 F6 | 	mov	arg01, result1
1a67c     C0 B8 B0 FD | 	call	#__system___lockmem
1a680     00 12 06 F6 | 	mov	arg01, #0
1a684     0A 14 06 F6 | 	mov	arg02, #10
1a688     00 16 06 F6 | 	mov	arg03, #0
1a68c     50 C5 B0 FD | 	call	#__system___basic_print_char
1a690     00 12 06 F6 | 	mov	arg01, #0
1a694     4C 15 B1 FD | 	call	#__system___getiolock_0600
1a698     FD 00 68 FC | 	wrlong	#0, result1
1a69c     00 12 06 F6 | 	mov	arg01, #0
1a6a0     40 15 B1 FD | 	call	#__system___getiolock_0600
1a6a4     FD 12 02 F6 | 	mov	arg01, result1
1a6a8     94 B8 B0 FD | 	call	#__system___lockmem
1a6ac     B2 01 00 FF 
1a6b0     62 15 06 F6 | 	mov	arg02, ##@LR__5926
1a6b4     00 12 06 F6 | 	mov	arg01, #0
1a6b8     00 16 06 F6 | 	mov	arg03, #0
1a6bc     78 C5 B0 FD | 	call	#__system___basic_print_string
1a6c0     50 00 00 FF 
1a6c4     F0 E4 05 F1 | 	add	objptr, ##41200
1a6c8     F2 14 02 FB | 	rdlong	arg02, objptr
1a6cc     50 00 00 FF 
1a6d0     F0 E4 85 F1 | 	sub	objptr, ##41200
1a6d4     00 12 06 F6 | 	mov	arg01, #0
1a6d8     00 16 06 F6 | 	mov	arg03, #0
1a6dc     0A 18 06 F6 | 	mov	arg04, #10
1a6e0     D8 C5 B0 FD | 	call	#__system___basic_print_unsigned
1a6e4     00 12 06 F6 | 	mov	arg01, #0
1a6e8     0A 14 06 F6 | 	mov	arg02, #10
1a6ec     00 16 06 F6 | 	mov	arg03, #0
1a6f0     EC C4 B0 FD | 	call	#__system___basic_print_char
1a6f4     00 12 06 F6 | 	mov	arg01, #0
1a6f8     E8 14 B1 FD | 	call	#__system___getiolock_0600
1a6fc     FD 00 68 FC | 	wrlong	#0, result1
1a700                 | LR__2126
1a700     50 00 00 FF 
1a704     EC E4 05 F1 | 	add	objptr, ##41196
1a708     F2 00 68 FC | 	wrlong	#0, objptr
1a70c     06 00 00 FF 
1a710     6C E4 85 F1 | 	sub	objptr, ##3180
1a714     F2 26 62 FC | 	wrlong	local01, objptr
1a718     06 00 00 FF 
1a71c     38 E4 05 F1 | 	add	objptr, ##3128
1a720     F2 28 62 FC | 	wrlong	local02, objptr
1a724     04 E4 05 F1 | 	add	objptr, #4
1a728     F2 2A 62 FC | 	wrlong	local03, objptr
1a72c     50 00 00 FF 
1a730     BC E4 85 F1 | 	sub	objptr, ##41148
1a734     11 12 06 F6 | 	mov	arg01, #17
1a738     08 14 06 F6 | 	mov	arg02, #8
1a73c     10 16 06 F6 | 	mov	arg03, #16
1a740     58 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a744     10 12 06 F6 | 	mov	arg01, #16
1a748     20 14 06 F6 | 	mov	arg02, #32
1a74c     20 16 06 F6 | 	mov	arg03, #32
1a750     48 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1a754                 | LR__2127
1a754     A7 F0 03 F6 | 	mov	ptra, fp
1a758     B2 00 A0 FD | 	call	#popregs_
1a75c                 | _do_run_ret
1a75c     2D 00 64 FD | 	ret
1a760                 | 
1a760                 | ' 
1a760                 | ' ' ------------------ save
1a760                 | ' 
1a760                 | ' sub do_save                        
1a760                 | _do_save
1a760     04 4A 05 F6 | 	mov	COUNT_, #4
1a764     A8 00 A0 FD | 	call	#pushregs_
1a768     B8 F0 07 F1 | 	add	ptra, #184
1a76c     4A 00 00 FF 
1a770     80 E4 05 F1 | 	add	objptr, ##38016
1a774     F2 26 02 FB | 	rdlong	local01, objptr
1a778     13 29 02 F6 | 	mov	local02, local01
1a77c     01 28 66 F0 | 	shl	local02, #1
1a780     13 29 02 F1 | 	add	local02, local01
1a784     02 28 66 F0 | 	shl	local02, #2
1a788     03 00 00 FF 
1a78c     04 E4 85 F1 | 	sub	objptr, ##1540
1a790     F2 28 02 F1 | 	add	local02, objptr
1a794     14 2B 02 FB | 	rdlong	local03, local02
1a798     10 4E 05 F1 | 	add	fp, #16
1a79c     A7 2A 62 FC | 	wrlong	local03, fp
1a7a0                 | ' 
1a7a0                 | ' numpar=compiledline(lineptr_e).result.uresult
1a7a0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1a7a0     10 4E 85 F1 | 	sub	fp, #16
1a7a4     01 2A 56 F2 | 	cmps	local03, #1 wc
1a7a8     47 00 00 FF 
1a7ac     7C E4 85 F1 | 	sub	objptr, ##36476
1a7b0     20 00 90 CD |  if_b	jmp	#LR__2130
1a7b4     28 2B BF FD | 	call	#_pop
1a7b8     A7 FA 61 FC | 	wrlong	result1, fp
1a7bc     04 4E 05 F1 | 	add	fp, #4
1a7c0     A7 FC 61 FC | 	wrlong	result2, fp
1a7c4     04 4E 05 F1 | 	add	fp, #4
1a7c8     A7 FE 61 FC | 	wrlong	result3, fp
1a7cc     08 4E 85 F1 | 	sub	fp, #8
1a7d0     24 00 90 FD | 	jmp	#LR__2131
1a7d4                 | LR__2130
1a7d4     52 00 00 FF 
1a7d8     C4 E4 05 F1 | 	add	objptr, ##42180
1a7dc     F2 2A 02 FB | 	rdlong	local03, objptr
1a7e0     52 00 00 FF 
1a7e4     C4 E4 85 F1 | 	sub	objptr, ##42180
1a7e8     A7 2A 62 FC | 	wrlong	local03, fp
1a7ec     08 4E 05 F1 | 	add	fp, #8
1a7f0     A7 3E 68 FC | 	wrlong	#31, fp
1a7f4     08 4E 85 F1 | 	sub	fp, #8
1a7f8                 | LR__2131
1a7f8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1a7f8     4A 00 00 FF 
1a7fc     88 E4 05 F1 | 	add	objptr, ##38024
1a800     F2 12 02 FB | 	rdlong	arg01, objptr
1a804     4A 00 00 FF 
1a808     88 E4 85 F1 | 	sub	objptr, ##38024
1a80c     10 80 B0 FD | 	call	#_pslpeek
1a810     FF FF 7F FF 
1a814     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1a818     10 00 90 5D |  if_ne	jmp	#LR__2132
1a81c     1B 12 06 F6 | 	mov	arg01, #27
1a820     00 14 06 F6 | 	mov	arg02, #0
1a824     28 7D B0 FD | 	call	#_printerror
1a828     CC 02 90 FD | 	jmp	#LR__2138
1a82c                 | LR__2132
1a82c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1a82c     08 4E 05 F1 | 	add	fp, #8
1a830     A7 2A 02 FB | 	rdlong	local03, fp
1a834     08 4E 85 F1 | 	sub	fp, #8
1a838     2B 2A 0E F2 | 	cmp	local03, #43 wz
1a83c     18 00 90 5D |  if_ne	jmp	#LR__2133
1a840     A7 12 02 FB | 	rdlong	arg01, fp
1a844     10 2C BF FD | 	call	#_convertstring
1a848     A7 FA 61 FC | 	wrlong	result1, fp
1a84c     08 4E 05 F1 | 	add	fp, #8
1a850     A7 3E 68 FC | 	wrlong	#31, fp
1a854     08 4E 85 F1 | 	sub	fp, #8
1a858                 | LR__2133
1a858                 | ' if t1.result_type=result_string then
1a858     08 4E 05 F1 | 	add	fp, #8
1a85c     A7 2A 02 FB | 	rdlong	local03, fp
1a860     08 4E 85 F1 | 	sub	fp, #8
1a864     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a868     8C 02 90 5D |  if_ne	jmp	#LR__2137
1a86c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1a86c     A7 12 02 FB | 	rdlong	arg01, fp
1a870     B2 01 00 FF 
1a874     73 15 06 F6 | 	mov	arg02, ##@LR__5927
1a878     EC B6 B0 FD | 	call	#__system___string_cmp
1a87c     00 FA 0D F2 | 	cmp	result1, #0 wz
1a880     52 00 00 AF 
1a884     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1a888     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1a88c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1a890     52 00 00 AF 
1a894     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1a898     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1a89c     52 00 00 5F 
1a8a0     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1a8a4     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1a8a8     52 00 00 5F 
1a8ac     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1a8b0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1a8b0     09 12 06 F6 | 	mov	arg01, #9
1a8b4     E4 09 B1 FD | 	call	#__system__close
1a8b8     09 2A 06 F6 | 	mov	local03, #9
1a8bc     4A 00 00 FF 
1a8c0     94 E4 05 F1 | 	add	objptr, ##38036
1a8c4     F2 12 02 FB | 	rdlong	arg01, objptr
1a8c8     4A 00 00 FF 
1a8cc     94 E4 85 F1 | 	sub	objptr, ##38036
1a8d0     B2 01 00 FF 
1a8d4     74 15 06 F6 | 	mov	arg02, ##@LR__5928
1a8d8     C0 B6 B0 FD | 	call	#__system___string_concat
1a8dc     FD 12 02 F6 | 	mov	arg01, result1
1a8e0     A7 14 02 FB | 	rdlong	arg02, fp
1a8e4     B4 B6 B0 FD | 	call	#__system___string_concat
1a8e8     FD 14 02 F6 | 	mov	arg02, result1
1a8ec     15 13 02 F6 | 	mov	arg01, local03
1a8f0     0D 16 06 F6 | 	mov	arg03, #13
1a8f4     4C C2 B0 FD | 	call	#__system___basic_open_string
1a8f8     4A 00 00 FF 
1a8fc     88 E4 05 F1 | 	add	objptr, ##38024
1a900     F2 2A 02 FB | 	rdlong	local03, objptr
1a904     4A 00 00 FF 
1a908     88 E4 85 F1 | 	sub	objptr, ##38024
1a90c     B0 4E 05 F1 | 	add	fp, #176
1a910     A7 2A 62 FC | 	wrlong	local03, fp
1a914     B0 4E 85 F1 | 	sub	fp, #176
1a918                 | '   saveptr=programstart
1a918                 | '   do
1a918                 | LR__2134
1a918     14 4E 05 F1 | 	add	fp, #20
1a91c     A7 12 02 F6 | 	mov	arg01, fp
1a920     9C 4E 05 F1 | 	add	fp, #156
1a924     A7 14 02 FB | 	rdlong	arg02, fp
1a928     B0 4E 85 F1 | 	sub	fp, #176
1a92c     18 16 06 F6 | 	mov	arg03, #24
1a930     0B 00 00 FF 
1a934     CC E4 05 F1 | 	add	objptr, ##5836
1a938     7C A9 B0 FD | 	call	#_psram_spin2_read1
1a93c     2C 4E 05 F1 | 	add	fp, #44
1a940     A7 12 02 F6 | 	mov	arg01, fp
1a944     10 4E 85 F1 | 	sub	fp, #16
1a948     A7 14 02 FB | 	rdlong	arg02, fp
1a94c     04 4E 05 F1 | 	add	fp, #4
1a950     A7 16 02 FB | 	rdlong	arg03, fp
1a954     20 4E 85 F1 | 	sub	fp, #32
1a958     5C A9 B0 FD | 	call	#_psram_spin2_read1
1a95c     0B 00 00 FF 
1a960     CC E4 85 F1 | 	sub	objptr, ##5836
1a964     B2 01 00 FF 
1a968     76 2B 06 F6 | 	mov	local03, ##@LR__5929
1a96c     AC 4E 05 F1 | 	add	fp, #172
1a970     A7 2A 62 FC | 	wrlong	local03, fp
1a974                 | '     psram.read1(varptr(header(0)),saveptr,24)
1a974                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1a974                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1a974     A0 4E 85 F1 | 	sub	fp, #160
1a978     A7 02 68 FC | 	wrlong	#1, fp
1a97c     14 4E 05 F1 | 	add	fp, #20
1a980     A7 2C 02 FB | 	rdlong	local04, fp
1a984     20 4E 85 F1 | 	sub	fp, #32
1a988     01 2C 06 F1 | 	add	local04, #1
1a98c                 | LR__2135
1a98c     0C 4E 05 F1 | 	add	fp, #12
1a990     A7 2A 02 FB | 	rdlong	local03, fp
1a994     0C 4E 85 F1 | 	sub	fp, #12
1a998     16 2B 52 F2 | 	cmps	local03, local04 wc
1a99c     54 00 90 3D |  if_ae	jmp	#LR__2136
1a9a0     AC 4E 05 F1 | 	add	fp, #172
1a9a4     A7 26 02 FB | 	rdlong	local01, fp
1a9a8     A0 4E 85 F1 | 	sub	fp, #160
1a9ac     A7 2A 02 FB | 	rdlong	local03, fp
1a9b0     01 2A 86 F1 | 	sub	local03, #1
1a9b4     20 4E 05 F1 | 	add	fp, #32
1a9b8     A7 2A 02 F1 | 	add	local03, fp
1a9bc     15 13 C2 FA | 	rdbyte	arg01, local03
1a9c0     2C 4E 85 F1 | 	sub	fp, #44
1a9c4     BC D7 B0 FD | 	call	#__system__Chr_S
1a9c8     FD 14 02 F6 | 	mov	arg02, result1
1a9cc     13 13 02 F6 | 	mov	arg01, local01
1a9d0     C8 B5 B0 FD | 	call	#__system___string_concat
1a9d4     AC 4E 05 F1 | 	add	fp, #172
1a9d8     A7 FA 61 FC | 	wrlong	result1, fp
1a9dc     A0 4E 85 F1 | 	sub	fp, #160
1a9e0     A7 2A 02 FB | 	rdlong	local03, fp
1a9e4     01 2A 06 F1 | 	add	local03, #1
1a9e8     A7 2A 62 FC | 	wrlong	local03, fp
1a9ec     0C 4E 85 F1 | 	sub	fp, #12
1a9f0     98 FF 9F FD | 	jmp	#LR__2135
1a9f4                 | LR__2136
1a9f4                 | '     print #9, saveline$
1a9f4     09 12 06 F6 | 	mov	arg01, #9
1a9f8     E8 11 B1 FD | 	call	#__system___getiolock_0600
1a9fc     FD 12 02 F6 | 	mov	arg01, result1
1aa00     3C B5 B0 FD | 	call	#__system___lockmem
1aa04     AC 4E 05 F1 | 	add	fp, #172
1aa08     A7 14 02 FB | 	rdlong	arg02, fp
1aa0c     AC 4E 85 F1 | 	sub	fp, #172
1aa10     09 12 06 F6 | 	mov	arg01, #9
1aa14     00 16 06 F6 | 	mov	arg03, #0
1aa18     1C C2 B0 FD | 	call	#__system___basic_print_string
1aa1c     09 12 06 F6 | 	mov	arg01, #9
1aa20     0A 14 06 F6 | 	mov	arg02, #10
1aa24     00 16 06 F6 | 	mov	arg03, #0
1aa28     B4 C1 B0 FD | 	call	#__system___basic_print_char
1aa2c     09 12 06 F6 | 	mov	arg01, #9
1aa30     B0 11 B1 FD | 	call	#__system___getiolock_0600
1aa34     FD 00 68 FC | 	wrlong	#0, result1
1aa38     28 4E 05 F1 | 	add	fp, #40
1aa3c     A7 2A 02 FB | 	rdlong	local03, fp
1aa40     88 4E 05 F1 | 	add	fp, #136
1aa44     A7 2A 62 FC | 	wrlong	local03, fp
1aa48     88 4E 85 F1 | 	sub	fp, #136
1aa4c     A7 2A 02 FB | 	rdlong	local03, fp
1aa50     28 4E 85 F1 | 	sub	fp, #40
1aa54     FF FF 3F FF 
1aa58     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1aa5c     B8 FE 9F 5D |  if_ne	jmp	#LR__2134
1aa60                 | '   close #9  
1aa60     09 12 06 F6 | 	mov	arg01, #9
1aa64     34 08 B1 FD | 	call	#__system__close
1aa68                 | '   print "Saved as ";currentdir$+"/"+loadname
1aa68     00 12 06 F6 | 	mov	arg01, #0
1aa6c     74 11 B1 FD | 	call	#__system___getiolock_0600
1aa70     FD 12 02 F6 | 	mov	arg01, result1
1aa74     C8 B4 B0 FD | 	call	#__system___lockmem
1aa78     B2 01 00 FF 
1aa7c     77 15 06 F6 | 	mov	arg02, ##@LR__5930
1aa80     00 12 06 F6 | 	mov	arg01, #0
1aa84     00 16 06 F6 | 	mov	arg03, #0
1aa88     AC C1 B0 FD | 	call	#__system___basic_print_string
1aa8c     00 28 06 F6 | 	mov	local02, #0
1aa90     4A 00 00 FF 
1aa94     94 E4 05 F1 | 	add	objptr, ##38036
1aa98     F2 12 02 FB | 	rdlong	arg01, objptr
1aa9c     4A 00 00 FF 
1aaa0     94 E4 85 F1 | 	sub	objptr, ##38036
1aaa4     B2 01 00 FF 
1aaa8     81 15 06 F6 | 	mov	arg02, ##@LR__5931
1aaac     EC B4 B0 FD | 	call	#__system___string_concat
1aab0     FD 12 02 F6 | 	mov	arg01, result1
1aab4     52 00 00 FF 
1aab8     C4 E4 05 F1 | 	add	objptr, ##42180
1aabc     F2 14 02 FB | 	rdlong	arg02, objptr
1aac0     52 00 00 FF 
1aac4     C4 E4 85 F1 | 	sub	objptr, ##42180
1aac8     D0 B4 B0 FD | 	call	#__system___string_concat
1aacc     FD 14 02 F6 | 	mov	arg02, result1
1aad0     14 13 02 F6 | 	mov	arg01, local02
1aad4     00 16 06 F6 | 	mov	arg03, #0
1aad8     5C C1 B0 FD | 	call	#__system___basic_print_string
1aadc     00 12 06 F6 | 	mov	arg01, #0
1aae0     0A 14 06 F6 | 	mov	arg02, #10
1aae4     00 16 06 F6 | 	mov	arg03, #0
1aae8     F4 C0 B0 FD | 	call	#__system___basic_print_char
1aaec     00 12 06 F6 | 	mov	arg01, #0
1aaf0     F0 10 B1 FD | 	call	#__system___getiolock_0600
1aaf4     FD 00 68 FC | 	wrlong	#0, result1
1aaf8                 | LR__2137
1aaf8                 | LR__2138
1aaf8     A7 F0 03 F6 | 	mov	ptra, fp
1aafc     B2 00 A0 FD | 	call	#popregs_
1ab00                 | _do_save_ret
1ab00     2D 00 64 FD | 	ret
1ab04                 | 
1ab04                 | ' 
1ab04                 | ' ' ------------------ setdelay
1ab04                 | ' 
1ab04                 | ' sub do_setdelay
1ab04                 | _do_setdelay
1ab04     02 4A 05 F6 | 	mov	COUNT_, #2
1ab08     A8 00 A0 FD | 	call	#pushregs_
1ab0c     18 F0 07 F1 | 	add	ptra, #24
1ab10     CC 27 BF FD | 	call	#_pop
1ab14     FD 12 02 F6 | 	mov	arg01, result1
1ab18     FE 26 02 F6 | 	mov	local01, result2
1ab1c     FF 28 02 F6 | 	mov	local02, result3
1ab20     A7 12 62 FC | 	wrlong	arg01, fp
1ab24     04 4E 05 F1 | 	add	fp, #4
1ab28     A7 26 62 FC | 	wrlong	local01, fp
1ab2c     04 4E 05 F1 | 	add	fp, #4
1ab30     A7 28 62 FC | 	wrlong	local02, fp
1ab34     08 4E 85 F1 | 	sub	fp, #8
1ab38     A4 27 BF FD | 	call	#_pop
1ab3c     FD 28 02 F6 | 	mov	local02, result1
1ab40     0C 4E 05 F1 | 	add	fp, #12
1ab44     A7 28 62 FC | 	wrlong	local02, fp
1ab48     04 4E 05 F1 | 	add	fp, #4
1ab4c     A7 FC 61 FC | 	wrlong	result2, fp
1ab50     04 4E 05 F1 | 	add	fp, #4
1ab54     A7 FE 61 FC | 	wrlong	result3, fp
1ab58     08 4E 85 F1 | 	sub	fp, #8
1ab5c     A7 12 02 F6 | 	mov	arg01, fp
1ab60     0C 4E 85 F1 | 	sub	fp, #12
1ab64     5C 29 BF FD | 	call	#_converttoint
1ab68     FD 28 02 F6 | 	mov	local02, result1
1ab6c     14 27 02 F6 | 	mov	local01, local02
1ab70     01 26 66 F0 | 	shl	local01, #1
1ab74     14 27 02 F1 | 	add	local01, local02
1ab78     03 26 66 F0 | 	shl	local01, #3
1ab7c     14 00 00 FF 
1ab80     38 E5 05 F1 | 	add	objptr, ##10552
1ab84     F2 26 02 F1 | 	add	local01, objptr
1ab88     A7 12 02 F6 | 	mov	arg01, fp
1ab8c     14 00 00 FF 
1ab90     38 E5 85 F1 | 	sub	objptr, ##10552
1ab94     2C 29 BF FD | 	call	#_converttoint
1ab98     06 26 06 F1 | 	add	local01, #6
1ab9c     13 FB 51 FC | 	wrword	result1, local01
1aba0     A7 F0 03 F6 | 	mov	ptra, fp
1aba4     B2 00 A0 FD | 	call	#popregs_
1aba8                 | _do_setdelay_ret
1aba8     2D 00 64 FD | 	ret
1abac                 | 
1abac                 | ' 
1abac                 | ' ' ------------------ setenv
1abac                 | ' 
1abac                 | ' sub do_setenv
1abac                 | _do_setenv
1abac     02 4A 05 F6 | 	mov	COUNT_, #2
1abb0     A8 00 A0 FD | 	call	#pushregs_
1abb4     18 F0 07 F1 | 	add	ptra, #24
1abb8     24 27 BF FD | 	call	#_pop
1abbc     FD 12 02 F6 | 	mov	arg01, result1
1abc0     FE 26 02 F6 | 	mov	local01, result2
1abc4     FF 28 02 F6 | 	mov	local02, result3
1abc8     A7 12 62 FC | 	wrlong	arg01, fp
1abcc     04 4E 05 F1 | 	add	fp, #4
1abd0     A7 26 62 FC | 	wrlong	local01, fp
1abd4     04 4E 05 F1 | 	add	fp, #4
1abd8     A7 28 62 FC | 	wrlong	local02, fp
1abdc     08 4E 85 F1 | 	sub	fp, #8
1abe0     FC 26 BF FD | 	call	#_pop
1abe4     FD 28 02 F6 | 	mov	local02, result1
1abe8     0C 4E 05 F1 | 	add	fp, #12
1abec     A7 28 62 FC | 	wrlong	local02, fp
1abf0     04 4E 05 F1 | 	add	fp, #4
1abf4     A7 FC 61 FC | 	wrlong	result2, fp
1abf8     04 4E 05 F1 | 	add	fp, #4
1abfc     A7 FE 61 FC | 	wrlong	result3, fp
1ac00     08 4E 85 F1 | 	sub	fp, #8
1ac04     A7 12 02 F6 | 	mov	arg01, fp
1ac08     0C 4E 85 F1 | 	sub	fp, #12
1ac0c     B4 28 BF FD | 	call	#_converttoint
1ac10     FD 28 02 F6 | 	mov	local02, result1
1ac14     14 27 02 F6 | 	mov	local01, local02
1ac18     01 26 66 F0 | 	shl	local01, #1
1ac1c     14 27 02 F1 | 	add	local01, local02
1ac20     03 26 66 F0 | 	shl	local01, #3
1ac24     14 00 00 FF 
1ac28     38 E5 05 F1 | 	add	objptr, ##10552
1ac2c     F2 26 02 F1 | 	add	local01, objptr
1ac30     A7 12 02 F6 | 	mov	arg01, fp
1ac34     14 00 00 FF 
1ac38     38 E5 85 F1 | 	sub	objptr, ##10552
1ac3c     84 28 BF FD | 	call	#_converttoint
1ac40     05 26 06 F1 | 	add	local01, #5
1ac44     13 FB 41 FC | 	wrbyte	result1, local01
1ac48     A7 F0 03 F6 | 	mov	ptra, fp
1ac4c     B2 00 A0 FD | 	call	#popregs_
1ac50                 | _do_setenv_ret
1ac50     2D 00 64 FD | 	ret
1ac54                 | 
1ac54                 | ' 
1ac54                 | ' ' ------------------ setlen
1ac54                 | ' 
1ac54                 | ' sub do_setlen
1ac54                 | _do_setlen
1ac54     02 4A 05 F6 | 	mov	COUNT_, #2
1ac58     A8 00 A0 FD | 	call	#pushregs_
1ac5c     18 F0 07 F1 | 	add	ptra, #24
1ac60     7C 26 BF FD | 	call	#_pop
1ac64     FD 12 02 F6 | 	mov	arg01, result1
1ac68     FE 26 02 F6 | 	mov	local01, result2
1ac6c     FF 28 02 F6 | 	mov	local02, result3
1ac70     A7 12 62 FC | 	wrlong	arg01, fp
1ac74     04 4E 05 F1 | 	add	fp, #4
1ac78     A7 26 62 FC | 	wrlong	local01, fp
1ac7c     04 4E 05 F1 | 	add	fp, #4
1ac80     A7 28 62 FC | 	wrlong	local02, fp
1ac84     08 4E 85 F1 | 	sub	fp, #8
1ac88     54 26 BF FD | 	call	#_pop
1ac8c     FD 28 02 F6 | 	mov	local02, result1
1ac90     0C 4E 05 F1 | 	add	fp, #12
1ac94     A7 28 62 FC | 	wrlong	local02, fp
1ac98     04 4E 05 F1 | 	add	fp, #4
1ac9c     A7 FC 61 FC | 	wrlong	result2, fp
1aca0     04 4E 05 F1 | 	add	fp, #4
1aca4     A7 FE 61 FC | 	wrlong	result3, fp
1aca8     08 4E 85 F1 | 	sub	fp, #8
1acac     A7 12 02 F6 | 	mov	arg01, fp
1acb0     0C 4E 85 F1 | 	sub	fp, #12
1acb4     0C 28 BF FD | 	call	#_converttoint
1acb8     FD 28 02 F6 | 	mov	local02, result1
1acbc     14 27 02 F6 | 	mov	local01, local02
1acc0     01 26 66 F0 | 	shl	local01, #1
1acc4     14 27 02 F1 | 	add	local01, local02
1acc8     03 26 66 F0 | 	shl	local01, #3
1accc     14 00 00 FF 
1acd0     38 E5 05 F1 | 	add	objptr, ##10552
1acd4     F2 26 02 F1 | 	add	local01, objptr
1acd8     A7 12 02 F6 | 	mov	arg01, fp
1acdc     14 00 00 FF 
1ace0     38 E5 85 F1 | 	sub	objptr, ##10552
1ace4     98 28 BF FD | 	call	#_converttofloat
1ace8     08 26 06 F1 | 	add	local01, #8
1acec     13 FB 61 FC | 	wrlong	result1, local01
1acf0     A7 F0 03 F6 | 	mov	ptra, fp
1acf4     B2 00 A0 FD | 	call	#popregs_
1acf8                 | _do_setlen_ret
1acf8     2D 00 64 FD | 	ret
1acfc                 | 
1acfc                 | ' 
1acfc                 | ' ' ------------------ setpan
1acfc                 | ' 
1acfc                 | ' sub do_setpan
1acfc                 | _do_setpan
1acfc     02 4A 05 F6 | 	mov	COUNT_, #2
1ad00     A8 00 A0 FD | 	call	#pushregs_
1ad04     18 F0 07 F1 | 	add	ptra, #24
1ad08     D4 25 BF FD | 	call	#_pop
1ad0c     FD 12 02 F6 | 	mov	arg01, result1
1ad10     FE 26 02 F6 | 	mov	local01, result2
1ad14     FF 28 02 F6 | 	mov	local02, result3
1ad18     A7 12 62 FC | 	wrlong	arg01, fp
1ad1c     04 4E 05 F1 | 	add	fp, #4
1ad20     A7 26 62 FC | 	wrlong	local01, fp
1ad24     04 4E 05 F1 | 	add	fp, #4
1ad28     A7 28 62 FC | 	wrlong	local02, fp
1ad2c     08 4E 85 F1 | 	sub	fp, #8
1ad30     AC 25 BF FD | 	call	#_pop
1ad34     FD 28 02 F6 | 	mov	local02, result1
1ad38     0C 4E 05 F1 | 	add	fp, #12
1ad3c     A7 28 62 FC | 	wrlong	local02, fp
1ad40     04 4E 05 F1 | 	add	fp, #4
1ad44     A7 FC 61 FC | 	wrlong	result2, fp
1ad48     04 4E 05 F1 | 	add	fp, #4
1ad4c     A7 FE 61 FC | 	wrlong	result3, fp
1ad50     08 4E 85 F1 | 	sub	fp, #8
1ad54     A7 12 02 F6 | 	mov	arg01, fp
1ad58     0C 4E 85 F1 | 	sub	fp, #12
1ad5c     64 27 BF FD | 	call	#_converttoint
1ad60     FD 28 02 F6 | 	mov	local02, result1
1ad64     14 27 02 F6 | 	mov	local01, local02
1ad68     01 26 66 F0 | 	shl	local01, #1
1ad6c     14 27 02 F1 | 	add	local01, local02
1ad70     03 26 66 F0 | 	shl	local01, #3
1ad74     14 00 00 FF 
1ad78     38 E5 05 F1 | 	add	objptr, ##10552
1ad7c     F2 26 02 F1 | 	add	local01, objptr
1ad80     A7 12 02 F6 | 	mov	arg01, fp
1ad84     14 00 00 FF 
1ad88     38 E5 85 F1 | 	sub	objptr, ##10552
1ad8c     F0 27 BF FD | 	call	#_converttofloat
1ad90     10 26 06 F1 | 	add	local01, #16
1ad94     13 FB 61 FC | 	wrlong	result1, local01
1ad98     A7 F0 03 F6 | 	mov	ptra, fp
1ad9c     B2 00 A0 FD | 	call	#popregs_
1ada0                 | _do_setpan_ret
1ada0     2D 00 64 FD | 	ret
1ada4                 | 
1ada4                 | ' 
1ada4                 | ' ' ------------------ setsustain
1ada4                 | ' 
1ada4                 | ' sub do_setsustain
1ada4                 | _do_setsustain
1ada4     02 4A 05 F6 | 	mov	COUNT_, #2
1ada8     A8 00 A0 FD | 	call	#pushregs_
1adac     18 F0 07 F1 | 	add	ptra, #24
1adb0     2C 25 BF FD | 	call	#_pop
1adb4     FD 12 02 F6 | 	mov	arg01, result1
1adb8     FE 26 02 F6 | 	mov	local01, result2
1adbc     FF 28 02 F6 | 	mov	local02, result3
1adc0     A7 12 62 FC | 	wrlong	arg01, fp
1adc4     04 4E 05 F1 | 	add	fp, #4
1adc8     A7 26 62 FC | 	wrlong	local01, fp
1adcc     04 4E 05 F1 | 	add	fp, #4
1add0     A7 28 62 FC | 	wrlong	local02, fp
1add4     08 4E 85 F1 | 	sub	fp, #8
1add8     04 25 BF FD | 	call	#_pop
1addc     FD 28 02 F6 | 	mov	local02, result1
1ade0     0C 4E 05 F1 | 	add	fp, #12
1ade4     A7 28 62 FC | 	wrlong	local02, fp
1ade8     04 4E 05 F1 | 	add	fp, #4
1adec     A7 FC 61 FC | 	wrlong	result2, fp
1adf0     04 4E 05 F1 | 	add	fp, #4
1adf4     A7 FE 61 FC | 	wrlong	result3, fp
1adf8     08 4E 85 F1 | 	sub	fp, #8
1adfc     A7 12 02 F6 | 	mov	arg01, fp
1ae00     0C 4E 85 F1 | 	sub	fp, #12
1ae04     BC 26 BF FD | 	call	#_converttoint
1ae08     FD 28 02 F6 | 	mov	local02, result1
1ae0c     14 27 02 F6 | 	mov	local01, local02
1ae10     01 26 66 F0 | 	shl	local01, #1
1ae14     14 27 02 F1 | 	add	local01, local02
1ae18     03 26 66 F0 | 	shl	local01, #3
1ae1c     14 00 00 FF 
1ae20     38 E5 05 F1 | 	add	objptr, ##10552
1ae24     F2 26 02 F1 | 	add	local01, objptr
1ae28     A7 12 02 F6 | 	mov	arg01, fp
1ae2c     14 00 00 FF 
1ae30     38 E5 85 F1 | 	sub	objptr, ##10552
1ae34     8C 26 BF FD | 	call	#_converttoint
1ae38     14 26 06 F1 | 	add	local01, #20
1ae3c     13 FB 51 FC | 	wrword	result1, local01
1ae40     A7 F0 03 F6 | 	mov	ptra, fp
1ae44     B2 00 A0 FD | 	call	#popregs_
1ae48                 | _do_setsustain_ret
1ae48     2D 00 64 FD | 	ret
1ae4c                 | 
1ae4c                 | ' 
1ae4c                 | ' ' ------------------ setvol
1ae4c                 | ' 
1ae4c                 | ' sub do_setvol
1ae4c                 | _do_setvol
1ae4c     02 4A 05 F6 | 	mov	COUNT_, #2
1ae50     A8 00 A0 FD | 	call	#pushregs_
1ae54     18 F0 07 F1 | 	add	ptra, #24
1ae58     84 24 BF FD | 	call	#_pop
1ae5c     FD 12 02 F6 | 	mov	arg01, result1
1ae60     FE 26 02 F6 | 	mov	local01, result2
1ae64     FF 28 02 F6 | 	mov	local02, result3
1ae68     A7 12 62 FC | 	wrlong	arg01, fp
1ae6c     04 4E 05 F1 | 	add	fp, #4
1ae70     A7 26 62 FC | 	wrlong	local01, fp
1ae74     04 4E 05 F1 | 	add	fp, #4
1ae78     A7 28 62 FC | 	wrlong	local02, fp
1ae7c     08 4E 85 F1 | 	sub	fp, #8
1ae80     5C 24 BF FD | 	call	#_pop
1ae84     FD 28 02 F6 | 	mov	local02, result1
1ae88     0C 4E 05 F1 | 	add	fp, #12
1ae8c     A7 28 62 FC | 	wrlong	local02, fp
1ae90     04 4E 05 F1 | 	add	fp, #4
1ae94     A7 FC 61 FC | 	wrlong	result2, fp
1ae98     04 4E 05 F1 | 	add	fp, #4
1ae9c     A7 FE 61 FC | 	wrlong	result3, fp
1aea0     08 4E 85 F1 | 	sub	fp, #8
1aea4     A7 12 02 F6 | 	mov	arg01, fp
1aea8     0C 4E 85 F1 | 	sub	fp, #12
1aeac     14 26 BF FD | 	call	#_converttoint
1aeb0     FD 28 02 F6 | 	mov	local02, result1
1aeb4     14 27 02 F6 | 	mov	local01, local02
1aeb8     01 26 66 F0 | 	shl	local01, #1
1aebc     14 27 02 F1 | 	add	local01, local02
1aec0     03 26 66 F0 | 	shl	local01, #3
1aec4     14 00 00 FF 
1aec8     38 E5 05 F1 | 	add	objptr, ##10552
1aecc     F2 26 02 F1 | 	add	local01, objptr
1aed0     A7 12 02 F6 | 	mov	arg01, fp
1aed4     14 00 00 FF 
1aed8     38 E5 85 F1 | 	sub	objptr, ##10552
1aedc     A0 26 BF FD | 	call	#_converttofloat
1aee0     0C 26 06 F1 | 	add	local01, #12
1aee4     13 FB 61 FC | 	wrlong	result1, local01
1aee8     A7 F0 03 F6 | 	mov	ptra, fp
1aeec     B2 00 A0 FD | 	call	#popregs_
1aef0                 | _do_setvol_ret
1aef0     2D 00 64 FD | 	ret
1aef4                 | 
1aef4                 | ' 
1aef4                 | ' ' ------------------ setwave
1aef4                 | ' 
1aef4                 | ' sub do_setwave
1aef4                 | _do_setwave
1aef4     02 4A 05 F6 | 	mov	COUNT_, #2
1aef8     A8 00 A0 FD | 	call	#pushregs_
1aefc     18 F0 07 F1 | 	add	ptra, #24
1af00     DC 23 BF FD | 	call	#_pop
1af04     FD 12 02 F6 | 	mov	arg01, result1
1af08     FE 26 02 F6 | 	mov	local01, result2
1af0c     FF 28 02 F6 | 	mov	local02, result3
1af10     A7 12 62 FC | 	wrlong	arg01, fp
1af14     04 4E 05 F1 | 	add	fp, #4
1af18     A7 26 62 FC | 	wrlong	local01, fp
1af1c     04 4E 05 F1 | 	add	fp, #4
1af20     A7 28 62 FC | 	wrlong	local02, fp
1af24     08 4E 85 F1 | 	sub	fp, #8
1af28     B4 23 BF FD | 	call	#_pop
1af2c     FD 28 02 F6 | 	mov	local02, result1
1af30     0C 4E 05 F1 | 	add	fp, #12
1af34     A7 28 62 FC | 	wrlong	local02, fp
1af38     04 4E 05 F1 | 	add	fp, #4
1af3c     A7 FC 61 FC | 	wrlong	result2, fp
1af40     04 4E 05 F1 | 	add	fp, #4
1af44     A7 FE 61 FC | 	wrlong	result3, fp
1af48     08 4E 85 F1 | 	sub	fp, #8
1af4c     A7 12 02 F6 | 	mov	arg01, fp
1af50     0C 4E 85 F1 | 	sub	fp, #12
1af54     6C 25 BF FD | 	call	#_converttoint
1af58     FD 28 02 F6 | 	mov	local02, result1
1af5c     14 27 02 F6 | 	mov	local01, local02
1af60     01 26 66 F0 | 	shl	local01, #1
1af64     14 27 02 F1 | 	add	local01, local02
1af68     03 26 66 F0 | 	shl	local01, #3
1af6c     14 00 00 FF 
1af70     38 E5 05 F1 | 	add	objptr, ##10552
1af74     F2 26 02 F1 | 	add	local01, objptr
1af78     A7 12 02 F6 | 	mov	arg01, fp
1af7c     14 00 00 FF 
1af80     38 E5 85 F1 | 	sub	objptr, ##10552
1af84     3C 25 BF FD | 	call	#_converttoint
1af88     04 26 06 F1 | 	add	local01, #4
1af8c     13 FB 41 FC | 	wrbyte	result1, local01
1af90     A7 F0 03 F6 | 	mov	ptra, fp
1af94     B2 00 A0 FD | 	call	#popregs_
1af98                 | _do_setwave_ret
1af98     2D 00 64 FD | 	ret
1af9c                 | 
1af9c                 | ' 
1af9c                 | ' ' ------------------ shutup
1af9c                 | ' 
1af9c                 | ' sub do_shutup
1af9c                 | _do_shutup
1af9c     03 4A 05 F6 | 	mov	COUNT_, #3
1afa0     A8 00 A0 FD | 	call	#pushregs_
1afa4     18 F0 07 F1 | 	add	ptra, #24
1afa8     4A 00 00 FF 
1afac     80 E4 05 F1 | 	add	objptr, ##38016
1afb0     F2 26 02 FB | 	rdlong	local01, objptr
1afb4     13 29 02 F6 | 	mov	local02, local01
1afb8     01 28 66 F0 | 	shl	local02, #1
1afbc     13 29 02 F1 | 	add	local02, local01
1afc0     02 28 66 F0 | 	shl	local02, #2
1afc4     03 00 00 FF 
1afc8     04 E4 85 F1 | 	sub	objptr, ##1540
1afcc     F2 28 02 F1 | 	add	local02, objptr
1afd0     14 2B 0A FB | 	rdlong	local03, local02 wz
1afd4     14 4E 05 F1 | 	add	fp, #20
1afd8     A7 2A 62 FC | 	wrlong	local03, fp
1afdc                 | ' 
1afdc                 | ' numpar=compiledline(lineptr_e).result.uresult
1afdc                 | ' if numpar=0 then
1afdc     14 4E 85 F1 | 	sub	fp, #20
1afe0     47 00 00 FF 
1afe4     7C E4 85 F1 | 	sub	objptr, ##36476
1afe8     50 00 90 5D |  if_ne	jmp	#LR__2142
1afec                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1afec     10 4E 05 F1 | 	add	fp, #16
1aff0     A7 00 68 FC | 	wrlong	#0, fp
1aff4     37 00 00 FF 
1aff8     10 E4 05 F1 | 	add	objptr, ##28176
1affc     97 16 48 FB | 	callpa	#(@LR__2141-@LR__2140)>>2,fcache_load_ptr_
1b000                 | LR__2140
1b000     F2 12 02 FB | 	rdlong	arg01, objptr
1b004     A7 2A 02 FB | 	rdlong	local03, fp
1b008     06 2A 66 F0 | 	shl	local03, #6
1b00c     15 13 02 F1 | 	add	arg01, local03
1b010     14 12 06 F1 | 	add	arg01, #20
1b014     09 01 58 FC | 	wrword	#0, arg01
1b018     A7 2A 02 FB | 	rdlong	local03, fp
1b01c     01 2A 06 F1 | 	add	local03, #1
1b020     A7 2A 62 FC | 	wrlong	local03, fp
1b024     08 2A 56 F2 | 	cmps	local03, #8 wc
1b028     D4 FF 9F CD |  if_b	jmp	#LR__2140
1b02c                 | LR__2141
1b02c     37 00 00 FF 
1b030     10 E4 85 F1 | 	sub	objptr, ##28176
1b034     10 4E 85 F1 | 	sub	fp, #16
1b038     64 00 90 FD | 	jmp	#LR__2143
1b03c                 | LR__2142
1b03c     A0 22 BF FD | 	call	#_pop
1b040     FF 26 02 F6 | 	mov	local01, result3
1b044     A7 FA 61 FC | 	wrlong	result1, fp
1b048     04 4E 05 F1 | 	add	fp, #4
1b04c     A7 FC 61 FC | 	wrlong	result2, fp
1b050     04 4E 05 F1 | 	add	fp, #4
1b054     A7 26 62 FC | 	wrlong	local01, fp
1b058     08 4E 85 F1 | 	sub	fp, #8
1b05c     A7 12 02 F6 | 	mov	arg01, fp
1b060     60 24 BF FD | 	call	#_converttoint
1b064     FD 2A 52 F6 | 	abs	local03, result1 wc
1b068     07 2A 06 F5 | 	and	local03, #7
1b06c     15 29 82 F6 | 	negc	local02, local03
1b070     0C 4E 05 F1 | 	add	fp, #12
1b074     A7 28 62 FC | 	wrlong	local02, fp
1b078     37 00 00 FF 
1b07c     10 E4 05 F1 | 	add	objptr, ##28176
1b080     F2 12 02 FB | 	rdlong	arg01, objptr
1b084     37 00 00 FF 
1b088     10 E4 85 F1 | 	sub	objptr, ##28176
1b08c     0C 4E 85 F1 | 	sub	fp, #12
1b090     06 28 66 F0 | 	shl	local02, #6
1b094     14 13 02 F1 | 	add	arg01, local02
1b098     14 12 06 F1 | 	add	arg01, #20
1b09c     09 01 58 FC | 	wrword	#0, arg01
1b0a0                 | LR__2143
1b0a0     A7 F0 03 F6 | 	mov	ptra, fp
1b0a4     B2 00 A0 FD | 	call	#popregs_
1b0a8                 | _do_shutup_ret
1b0a8     2D 00 64 FD | 	ret
1b0ac                 | 
1b0ac                 | ' 
1b0ac                 | ' ' ------------------ sin
1b0ac                 | ' 
1b0ac                 | ' sub do_sin
1b0ac                 | _do_sin
1b0ac     01 4A 05 F6 | 	mov	COUNT_, #1
1b0b0     A8 00 A0 FD | 	call	#pushregs_
1b0b4     10 F0 07 F1 | 	add	ptra, #16
1b0b8     4A 00 00 FF 
1b0bc     80 E4 05 F1 | 	add	objptr, ##38016
1b0c0     F2 26 02 FB | 	rdlong	local01, objptr
1b0c4     13 17 02 F6 | 	mov	arg03, local01
1b0c8     01 16 66 F0 | 	shl	arg03, #1
1b0cc     13 17 02 F1 | 	add	arg03, local01
1b0d0     02 16 66 F0 | 	shl	arg03, #2
1b0d4     03 00 00 FF 
1b0d8     04 E4 85 F1 | 	sub	objptr, ##1540
1b0dc     F2 16 02 F1 | 	add	arg03, objptr
1b0e0     0B 17 02 FB | 	rdlong	arg03, arg03
1b0e4     0C 4E 05 F1 | 	add	fp, #12
1b0e8     A7 16 62 FC | 	wrlong	arg03, fp
1b0ec                 | ' 
1b0ec                 | ' numpar=compiledline(lineptr_e).result.uresult
1b0ec                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1b0ec     0C 4E 85 F1 | 	sub	fp, #12
1b0f0     02 16 16 F2 | 	cmp	arg03, #2 wc
1b0f4     47 00 00 FF 
1b0f8     7C E4 85 F1 | 	sub	objptr, ##36476
1b0fc     0C 4E 05 C1 |  if_b	add	fp, #12
1b100     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b104     0C 4E 85 C1 |  if_b	sub	fp, #12
1b108     40 00 90 4D |  if_c_and_nz	jmp	#LR__2150
1b10c     00 12 06 F6 | 	mov	arg01, #0
1b110     D0 0A B1 FD | 	call	#__system___getiolock_0600
1b114     FD 12 02 F6 | 	mov	arg01, result1
1b118     24 AE B0 FD | 	call	#__system___lockmem
1b11c     B2 01 00 FF 
1b120     83 15 06 F6 | 	mov	arg02, ##@LR__5932
1b124     00 12 06 F6 | 	mov	arg01, #0
1b128     00 16 06 F6 | 	mov	arg03, #0
1b12c     08 BB B0 FD | 	call	#__system___basic_print_string
1b130     00 12 06 F6 | 	mov	arg01, #0
1b134     AC 0A B1 FD | 	call	#__system___getiolock_0600
1b138     FD 00 68 FC | 	wrlong	#0, result1
1b13c     27 12 06 F6 | 	mov	arg01, #39
1b140     00 14 06 F6 | 	mov	arg02, #0
1b144     08 74 B0 FD | 	call	#_printerror
1b148     64 00 90 FD | 	jmp	#LR__2151
1b14c                 | LR__2150
1b14c     90 21 BF FD | 	call	#_pop
1b150     A7 FA 61 FC | 	wrlong	result1, fp
1b154     04 4E 05 F1 | 	add	fp, #4
1b158     A7 FC 61 FC | 	wrlong	result2, fp
1b15c     04 4E 05 F1 | 	add	fp, #4
1b160     A7 FE 61 FC | 	wrlong	result3, fp
1b164     08 4E 85 F1 | 	sub	fp, #8
1b168     52 00 00 FF 
1b16c     A8 E4 05 F1 | 	add	objptr, ##42152
1b170     F2 26 02 FB | 	rdlong	local01, objptr
1b174     52 00 00 FF 
1b178     A8 E4 85 F1 | 	sub	objptr, ##42152
1b17c     A7 12 02 F6 | 	mov	arg01, fp
1b180     FC 23 BF FD | 	call	#_converttofloat
1b184     FD 14 02 F6 | 	mov	arg02, result1
1b188     13 13 02 F6 | 	mov	arg01, local01
1b18c     2C DC B0 FD | 	call	#__system___float_mul
1b190     FD 12 02 F6 | 	mov	arg01, result1
1b194     84 E5 B0 FD | 	call	#__system____builtin_sinf
1b198     A7 FA 61 FC | 	wrlong	result1, fp
1b19c     08 4E 05 F1 | 	add	fp, #8
1b1a0     A7 3C 68 FC | 	wrlong	#30, fp
1b1a4     08 4E 85 F1 | 	sub	fp, #8
1b1a8     A7 12 02 F6 | 	mov	arg01, fp
1b1ac     C8 21 BF FD | 	call	#_push
1b1b0                 | LR__2151
1b1b0     A7 F0 03 F6 | 	mov	ptra, fp
1b1b4     B2 00 A0 FD | 	call	#popregs_
1b1b8                 | _do_sin_ret
1b1b8     2D 00 64 FD | 	ret
1b1bc                 | 
1b1bc                 | ' 
1b1bc                 | ' ' ------------------ skip
1b1bc                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1b1bc                 | ' 
1b1bc                 | ' sub do_skip
1b1bc                 | _do_skip
1b1bc     4A 00 00 FF 
1b1c0     80 E4 05 F1 | 	add	objptr, ##38016
1b1c4     F2 00 02 FB | 	rdlong	_var01, objptr
1b1c8     00 03 02 F6 | 	mov	_var02, _var01
1b1cc     01 02 66 F0 | 	shl	_var02, #1
1b1d0     00 03 02 F1 | 	add	_var02, _var01
1b1d4     02 02 66 F0 | 	shl	_var02, #2
1b1d8     03 00 00 FF 
1b1dc     04 E4 85 F1 | 	sub	objptr, ##1540
1b1e0     F2 02 02 F1 | 	add	_var02, objptr
1b1e4     01 03 02 FB | 	rdlong	_var02, _var02
1b1e8     01 02 86 F1 | 	sub	_var02, #1
1b1ec     03 00 00 FF 
1b1f0     04 E4 05 F1 | 	add	objptr, ##1540
1b1f4     F2 02 62 FC | 	wrlong	_var02, objptr
1b1f8     4A 00 00 FF 
1b1fc     80 E4 85 F1 | 	sub	objptr, ##38016
1b200                 | _do_skip_ret
1b200     2D 00 64 FD | 	ret
1b204                 | 
1b204                 | ' 
1b204                 | ' ' ------------------ sprite
1b204                 | ' 
1b204                 | ' sub do_sprite
1b204                 | _do_sprite
1b204     00 4A 05 F6 | 	mov	COUNT_, #0
1b208     A8 00 A0 FD | 	call	#pushregs_
1b20c     30 F0 07 F1 | 	add	ptra, #48
1b210     CC 20 BF FD | 	call	#_pop
1b214     FD 16 02 F6 | 	mov	arg03, result1
1b218     FE 14 02 F6 | 	mov	arg02, result2
1b21c     FF 12 02 F6 | 	mov	arg01, result3
1b220     18 4E 05 F1 | 	add	fp, #24
1b224     A7 16 62 FC | 	wrlong	arg03, fp
1b228     04 4E 05 F1 | 	add	fp, #4
1b22c     A7 14 62 FC | 	wrlong	arg02, fp
1b230     04 4E 05 F1 | 	add	fp, #4
1b234     A7 12 62 FC | 	wrlong	arg01, fp
1b238     20 4E 85 F1 | 	sub	fp, #32
1b23c     A0 20 BF FD | 	call	#_pop
1b240     FD 16 02 F6 | 	mov	arg03, result1
1b244     FE 14 02 F6 | 	mov	arg02, result2
1b248     FF 12 02 F6 | 	mov	arg01, result3
1b24c     0C 4E 05 F1 | 	add	fp, #12
1b250     A7 16 62 FC | 	wrlong	arg03, fp
1b254     04 4E 05 F1 | 	add	fp, #4
1b258     A7 14 62 FC | 	wrlong	arg02, fp
1b25c     04 4E 05 F1 | 	add	fp, #4
1b260     A7 12 62 FC | 	wrlong	arg01, fp
1b264     14 4E 85 F1 | 	sub	fp, #20
1b268     74 20 BF FD | 	call	#_pop
1b26c     FF 16 02 F6 | 	mov	arg03, result3
1b270     A7 FA 61 FC | 	wrlong	result1, fp
1b274     04 4E 05 F1 | 	add	fp, #4
1b278     A7 FC 61 FC | 	wrlong	result2, fp
1b27c     04 4E 05 F1 | 	add	fp, #4
1b280     A7 16 62 FC | 	wrlong	arg03, fp
1b284     08 4E 85 F1 | 	sub	fp, #8
1b288     A7 12 02 F6 | 	mov	arg01, fp
1b28c     34 22 BF FD | 	call	#_converttoint
1b290     24 4E 05 F1 | 	add	fp, #36
1b294     A7 FA 61 FC | 	wrlong	result1, fp
1b298     18 4E 85 F1 | 	sub	fp, #24
1b29c     A7 12 02 F6 | 	mov	arg01, fp
1b2a0     0C 4E 85 F1 | 	sub	fp, #12
1b2a4     1C 22 BF FD | 	call	#_converttoint
1b2a8     28 4E 05 F1 | 	add	fp, #40
1b2ac     A7 FA 61 FC | 	wrlong	result1, fp
1b2b0     10 4E 85 F1 | 	sub	fp, #16
1b2b4     A7 12 02 F6 | 	mov	arg01, fp
1b2b8     18 4E 85 F1 | 	sub	fp, #24
1b2bc     04 22 BF FD | 	call	#_converttoint
1b2c0     2C 4E 05 F1 | 	add	fp, #44
1b2c4     A7 FA 61 FC | 	wrlong	result1, fp
1b2c8     08 4E 85 F1 | 	sub	fp, #8
1b2cc     A7 12 02 FB | 	rdlong	arg01, fp
1b2d0     04 4E 05 F1 | 	add	fp, #4
1b2d4     A7 14 02 FB | 	rdlong	arg02, fp
1b2d8     FD 16 02 F6 | 	mov	arg03, result1
1b2dc     28 4E 85 F1 | 	sub	fp, #40
1b2e0     50 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1b2e4     A7 F0 03 F6 | 	mov	ptra, fp
1b2e8     B2 00 A0 FD | 	call	#popregs_
1b2ec                 | _do_sprite_ret
1b2ec     2D 00 64 FD | 	ret
1b2f0                 | 
1b2f0                 | ' 
1b2f0                 | ' ' ------------------ sqr
1b2f0                 | ' 
1b2f0                 | ' sub do_sqr
1b2f0                 | _do_sqr
1b2f0     01 4A 05 F6 | 	mov	COUNT_, #1
1b2f4     A8 00 A0 FD | 	call	#pushregs_
1b2f8     10 F0 07 F1 | 	add	ptra, #16
1b2fc     4A 00 00 FF 
1b300     80 E4 05 F1 | 	add	objptr, ##38016
1b304     F2 26 02 FB | 	rdlong	local01, objptr
1b308     13 17 02 F6 | 	mov	arg03, local01
1b30c     01 16 66 F0 | 	shl	arg03, #1
1b310     13 17 02 F1 | 	add	arg03, local01
1b314     02 16 66 F0 | 	shl	arg03, #2
1b318     03 00 00 FF 
1b31c     04 E4 85 F1 | 	sub	objptr, ##1540
1b320     F2 16 02 F1 | 	add	arg03, objptr
1b324     0B 17 02 FB | 	rdlong	arg03, arg03
1b328     0C 4E 05 F1 | 	add	fp, #12
1b32c     A7 16 62 FC | 	wrlong	arg03, fp
1b330                 | ' 
1b330                 | ' numpar=compiledline(lineptr_e).result.uresult
1b330                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1b330     0C 4E 85 F1 | 	sub	fp, #12
1b334     02 16 16 F2 | 	cmp	arg03, #2 wc
1b338     47 00 00 FF 
1b33c     7C E4 85 F1 | 	sub	objptr, ##36476
1b340     0C 4E 05 C1 |  if_b	add	fp, #12
1b344     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b348     0C 4E 85 C1 |  if_b	sub	fp, #12
1b34c     40 00 90 4D |  if_c_and_nz	jmp	#LR__2160
1b350     00 12 06 F6 | 	mov	arg01, #0
1b354     8C 08 B1 FD | 	call	#__system___getiolock_0600
1b358     FD 12 02 F6 | 	mov	arg01, result1
1b35c     E0 AB B0 FD | 	call	#__system___lockmem
1b360     B2 01 00 FF 
1b364     89 15 06 F6 | 	mov	arg02, ##@LR__5933
1b368     00 12 06 F6 | 	mov	arg01, #0
1b36c     00 16 06 F6 | 	mov	arg03, #0
1b370     C4 B8 B0 FD | 	call	#__system___basic_print_string
1b374     00 12 06 F6 | 	mov	arg01, #0
1b378     68 08 B1 FD | 	call	#__system___getiolock_0600
1b37c     FD 00 68 FC | 	wrlong	#0, result1
1b380     27 12 06 F6 | 	mov	arg01, #39
1b384     00 14 06 F6 | 	mov	arg02, #0
1b388     C4 71 B0 FD | 	call	#_printerror
1b38c     48 00 90 FD | 	jmp	#LR__2161
1b390                 | LR__2160
1b390     4C 1F BF FD | 	call	#_pop
1b394     FF 26 02 F6 | 	mov	local01, result3
1b398     A7 FA 61 FC | 	wrlong	result1, fp
1b39c     04 4E 05 F1 | 	add	fp, #4
1b3a0     A7 FC 61 FC | 	wrlong	result2, fp
1b3a4     04 4E 05 F1 | 	add	fp, #4
1b3a8     A7 26 62 FC | 	wrlong	local01, fp
1b3ac     08 4E 85 F1 | 	sub	fp, #8
1b3b0     A7 12 02 F6 | 	mov	arg01, fp
1b3b4     C8 21 BF FD | 	call	#_converttofloat
1b3b8     FD 12 02 F6 | 	mov	arg01, result1
1b3bc     24 D9 B0 FD | 	call	#__system___float_sqrt
1b3c0     A7 FA 61 FC | 	wrlong	result1, fp
1b3c4     08 4E 05 F1 | 	add	fp, #8
1b3c8     A7 3C 68 FC | 	wrlong	#30, fp
1b3cc     08 4E 85 F1 | 	sub	fp, #8
1b3d0     A7 12 02 F6 | 	mov	arg01, fp
1b3d4     A0 1F BF FD | 	call	#_push
1b3d8                 | LR__2161
1b3d8     A7 F0 03 F6 | 	mov	ptra, fp
1b3dc     B2 00 A0 FD | 	call	#popregs_
1b3e0                 | _do_sqr_ret
1b3e0     2D 00 64 FD | 	ret
1b3e4                 | 
1b3e4                 | ' 
1b3e4                 | ' ' ------------------ stick
1b3e4                 | ' 
1b3e4                 | ' sub do_stick
1b3e4                 | _do_stick
1b3e4     01 4A 05 F6 | 	mov	COUNT_, #1
1b3e8     A8 00 A0 FD | 	call	#pushregs_
1b3ec     10 F0 07 F1 | 	add	ptra, #16
1b3f0     4A 00 00 FF 
1b3f4     80 E4 05 F1 | 	add	objptr, ##38016
1b3f8     F2 26 02 FB | 	rdlong	local01, objptr
1b3fc     13 17 02 F6 | 	mov	arg03, local01
1b400     01 16 66 F0 | 	shl	arg03, #1
1b404     13 17 02 F1 | 	add	arg03, local01
1b408     02 16 66 F0 | 	shl	arg03, #2
1b40c     03 00 00 FF 
1b410     04 E4 85 F1 | 	sub	objptr, ##1540
1b414     F2 16 02 F1 | 	add	arg03, objptr
1b418     0B 17 02 FB | 	rdlong	arg03, arg03
1b41c     0C 4E 05 F1 | 	add	fp, #12
1b420     A7 16 62 FC | 	wrlong	arg03, fp
1b424                 | ' 
1b424                 | ' numpar=compiledline(lineptr_e).result.uresult
1b424                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1b424     0C 4E 85 F1 | 	sub	fp, #12
1b428     02 16 16 F2 | 	cmp	arg03, #2 wc
1b42c     47 00 00 FF 
1b430     7C E4 85 F1 | 	sub	objptr, ##36476
1b434     40 00 90 CD |  if_b	jmp	#LR__2170
1b438     00 12 06 F6 | 	mov	arg01, #0
1b43c     A4 07 B1 FD | 	call	#__system___getiolock_0600
1b440     FD 12 02 F6 | 	mov	arg01, result1
1b444     F8 AA B0 FD | 	call	#__system___lockmem
1b448     B2 01 00 FF 
1b44c     8F 15 06 F6 | 	mov	arg02, ##@LR__5934
1b450     00 12 06 F6 | 	mov	arg01, #0
1b454     00 16 06 F6 | 	mov	arg03, #0
1b458     DC B7 B0 FD | 	call	#__system___basic_print_string
1b45c     00 12 06 F6 | 	mov	arg01, #0
1b460     80 07 B1 FD | 	call	#__system___getiolock_0600
1b464     FD 00 68 FC | 	wrlong	#0, result1
1b468     27 12 06 F6 | 	mov	arg01, #39
1b46c     00 14 06 F6 | 	mov	arg02, #0
1b470     DC 70 B0 FD | 	call	#_printerror
1b474     F0 00 90 FD | 	jmp	#LR__2174
1b478                 | LR__2170
1b478                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1b478     0C 4E 05 F1 | 	add	fp, #12
1b47c     A7 FE 09 FB | 	rdlong	result3, fp wz
1b480     0C 4E 85 F1 | 	sub	fp, #12
1b484     30 00 90 5D |  if_ne	jmp	#LR__2171
1b488     52 00 00 FF 
1b48c     1C E4 05 F1 | 	add	objptr, ##42012
1b490     F2 26 02 FB | 	rdlong	local01, objptr
1b494     52 00 00 FF 
1b498     1C E4 85 F1 | 	sub	objptr, ##42012
1b49c     A7 26 62 FC | 	wrlong	local01, fp
1b4a0     08 4E 05 F1 | 	add	fp, #8
1b4a4     A7 3A 68 FC | 	wrlong	#29, fp
1b4a8     08 4E 85 F1 | 	sub	fp, #8
1b4ac     A7 12 02 F6 | 	mov	arg01, fp
1b4b0     C4 1E BF FD | 	call	#_push
1b4b4     B0 00 90 FD | 	jmp	#LR__2174
1b4b8                 | LR__2171
1b4b8     24 1E BF FD | 	call	#_pop
1b4bc     A7 FA 61 FC | 	wrlong	result1, fp
1b4c0     04 4E 05 F1 | 	add	fp, #4
1b4c4     A7 FC 61 FC | 	wrlong	result2, fp
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 FE 61 FC | 	wrlong	result3, fp
1b4d0                 | ' t1=pop()
1b4d0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b4d0     08 4E 85 F1 | 	sub	fp, #8
1b4d4     1C FE 0D F2 | 	cmp	result3, #28 wz
1b4d8     08 4E 05 51 |  if_ne	add	fp, #8
1b4dc     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b4e0     08 4E 85 51 |  if_ne	sub	fp, #8
1b4e4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b4e8     70 00 90 5D |  if_ne	jmp	#LR__2173
1b4ec     A7 26 02 FB | 	rdlong	local01, fp
1b4f0     52 00 00 FF 
1b4f4     08 E5 05 F1 | 	add	objptr, ##42248
1b4f8     F2 26 62 FC | 	wrlong	local01, objptr
1b4fc                 | '   q=t1.result.uresult
1b4fc                 | '   if q<7 then 
1b4fc     52 00 00 FF 
1b500     08 E5 85 F1 | 	sub	objptr, ##42248
1b504     07 26 56 F2 | 	cmps	local01, #7 wc
1b508     40 00 90 3D |  if_ae	jmp	#LR__2172
1b50c     52 00 00 FF 
1b510     08 E5 05 F1 | 	add	objptr, ##42248
1b514     F2 26 02 FB | 	rdlong	local01, objptr
1b518     02 26 66 F0 | 	shl	local01, #2
1b51c     EC E4 85 F1 | 	sub	objptr, #236
1b520     F2 26 02 F1 | 	add	local01, objptr
1b524     13 27 02 FB | 	rdlong	local01, local01
1b528     A7 26 62 FC | 	wrlong	local01, fp
1b52c     08 4E 05 F1 | 	add	fp, #8
1b530     A7 3A 68 FC | 	wrlong	#29, fp
1b534     08 4E 85 F1 | 	sub	fp, #8
1b538     A7 12 02 F6 | 	mov	arg01, fp
1b53c     52 00 00 FF 
1b540     1C E4 85 F1 | 	sub	objptr, ##42012
1b544     30 1E BF FD | 	call	#_push
1b548                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1b548     1C 00 90 FD | 	jmp	#LR__2174
1b54c                 | LR__2172
1b54c     29 12 06 F6 | 	mov	arg01, #41
1b550     00 14 06 F6 | 	mov	arg02, #0
1b554     F8 6F B0 FD | 	call	#_printerror
1b558                 | '      printerror(41) : return
1b558     0C 00 90 FD | 	jmp	#LR__2174
1b55c                 | LR__2173
1b55c     29 12 06 F6 | 	mov	arg01, #41
1b560     00 14 06 F6 | 	mov	arg02, #0
1b564     E8 6F B0 FD | 	call	#_printerror
1b568                 | LR__2174
1b568     A7 F0 03 F6 | 	mov	ptra, fp
1b56c     B2 00 A0 FD | 	call	#popregs_
1b570                 | _do_stick_ret
1b570     2D 00 64 FD | 	ret
1b574                 | 
1b574                 | ' 
1b574                 | ' ' ------------------ strig
1b574                 | ' 
1b574                 | ' sub do_strig
1b574                 | _do_strig
1b574     01 4A 05 F6 | 	mov	COUNT_, #1
1b578     A8 00 A0 FD | 	call	#pushregs_
1b57c     10 F0 07 F1 | 	add	ptra, #16
1b580     4A 00 00 FF 
1b584     80 E4 05 F1 | 	add	objptr, ##38016
1b588     F2 26 02 FB | 	rdlong	local01, objptr
1b58c     13 17 02 F6 | 	mov	arg03, local01
1b590     01 16 66 F0 | 	shl	arg03, #1
1b594     13 17 02 F1 | 	add	arg03, local01
1b598     02 16 66 F0 | 	shl	arg03, #2
1b59c     03 00 00 FF 
1b5a0     04 E4 85 F1 | 	sub	objptr, ##1540
1b5a4     F2 16 02 F1 | 	add	arg03, objptr
1b5a8     0B 17 02 FB | 	rdlong	arg03, arg03
1b5ac     0C 4E 05 F1 | 	add	fp, #12
1b5b0     A7 16 62 FC | 	wrlong	arg03, fp
1b5b4                 | ' 
1b5b4                 | ' numpar=compiledline(lineptr_e).result.uresult
1b5b4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1b5b4     0C 4E 85 F1 | 	sub	fp, #12
1b5b8     02 16 16 F2 | 	cmp	arg03, #2 wc
1b5bc     47 00 00 FF 
1b5c0     7C E4 85 F1 | 	sub	objptr, ##36476
1b5c4     40 00 90 CD |  if_b	jmp	#LR__2180
1b5c8     00 12 06 F6 | 	mov	arg01, #0
1b5cc     14 06 B1 FD | 	call	#__system___getiolock_0600
1b5d0     FD 12 02 F6 | 	mov	arg01, result1
1b5d4     68 A9 B0 FD | 	call	#__system___lockmem
1b5d8     B2 01 00 FF 
1b5dc     97 15 06 F6 | 	mov	arg02, ##@LR__5935
1b5e0     00 12 06 F6 | 	mov	arg01, #0
1b5e4     00 16 06 F6 | 	mov	arg03, #0
1b5e8     4C B6 B0 FD | 	call	#__system___basic_print_string
1b5ec     00 12 06 F6 | 	mov	arg01, #0
1b5f0     F0 05 B1 FD | 	call	#__system___getiolock_0600
1b5f4     FD 00 68 FC | 	wrlong	#0, result1
1b5f8     27 12 06 F6 | 	mov	arg01, #39
1b5fc     00 14 06 F6 | 	mov	arg02, #0
1b600     4C 6F B0 FD | 	call	#_printerror
1b604     F0 00 90 FD | 	jmp	#LR__2184
1b608                 | LR__2180
1b608                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1b608     0C 4E 05 F1 | 	add	fp, #12
1b60c     A7 FE 09 FB | 	rdlong	result3, fp wz
1b610     0C 4E 85 F1 | 	sub	fp, #12
1b614     30 00 90 5D |  if_ne	jmp	#LR__2181
1b618     52 00 00 FF 
1b61c     38 E4 05 F1 | 	add	objptr, ##42040
1b620     F2 26 02 FB | 	rdlong	local01, objptr
1b624     52 00 00 FF 
1b628     38 E4 85 F1 | 	sub	objptr, ##42040
1b62c     A7 26 62 FC | 	wrlong	local01, fp
1b630     08 4E 05 F1 | 	add	fp, #8
1b634     A7 3A 68 FC | 	wrlong	#29, fp
1b638     08 4E 85 F1 | 	sub	fp, #8
1b63c     A7 12 02 F6 | 	mov	arg01, fp
1b640     34 1D BF FD | 	call	#_push
1b644     B0 00 90 FD | 	jmp	#LR__2184
1b648                 | LR__2181
1b648     94 1C BF FD | 	call	#_pop
1b64c     A7 FA 61 FC | 	wrlong	result1, fp
1b650     04 4E 05 F1 | 	add	fp, #4
1b654     A7 FC 61 FC | 	wrlong	result2, fp
1b658     04 4E 05 F1 | 	add	fp, #4
1b65c     A7 FE 61 FC | 	wrlong	result3, fp
1b660                 | ' t1=pop()
1b660                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1b660     08 4E 85 F1 | 	sub	fp, #8
1b664     1C FE 0D F2 | 	cmp	result3, #28 wz
1b668     08 4E 05 51 |  if_ne	add	fp, #8
1b66c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1b670     08 4E 85 51 |  if_ne	sub	fp, #8
1b674     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1b678     70 00 90 5D |  if_ne	jmp	#LR__2183
1b67c     A7 26 02 FB | 	rdlong	local01, fp
1b680     52 00 00 FF 
1b684     08 E5 05 F1 | 	add	objptr, ##42248
1b688     F2 26 62 FC | 	wrlong	local01, objptr
1b68c                 | '   q=t1.result.uresult
1b68c                 | '   if q<7 then 
1b68c     52 00 00 FF 
1b690     08 E5 85 F1 | 	sub	objptr, ##42248
1b694     07 26 56 F2 | 	cmps	local01, #7 wc
1b698     40 00 90 3D |  if_ae	jmp	#LR__2182
1b69c     52 00 00 FF 
1b6a0     08 E5 05 F1 | 	add	objptr, ##42248
1b6a4     F2 26 02 FB | 	rdlong	local01, objptr
1b6a8     02 26 66 F0 | 	shl	local01, #2
1b6ac     D0 E4 85 F1 | 	sub	objptr, #208
1b6b0     F2 26 02 F1 | 	add	local01, objptr
1b6b4     13 27 02 FB | 	rdlong	local01, local01
1b6b8     A7 26 62 FC | 	wrlong	local01, fp
1b6bc     08 4E 05 F1 | 	add	fp, #8
1b6c0     A7 3A 68 FC | 	wrlong	#29, fp
1b6c4     08 4E 85 F1 | 	sub	fp, #8
1b6c8     A7 12 02 F6 | 	mov	arg01, fp
1b6cc     52 00 00 FF 
1b6d0     38 E4 85 F1 | 	sub	objptr, ##42040
1b6d4     A0 1C BF FD | 	call	#_push
1b6d8                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1b6d8     1C 00 90 FD | 	jmp	#LR__2184
1b6dc                 | LR__2182
1b6dc     29 12 06 F6 | 	mov	arg01, #41
1b6e0     00 14 06 F6 | 	mov	arg02, #0
1b6e4     68 6E B0 FD | 	call	#_printerror
1b6e8                 | '      printerror(41) : return
1b6e8     0C 00 90 FD | 	jmp	#LR__2184
1b6ec                 | LR__2183
1b6ec     29 12 06 F6 | 	mov	arg01, #41
1b6f0     00 14 06 F6 | 	mov	arg02, #0
1b6f4     58 6E B0 FD | 	call	#_printerror
1b6f8                 | LR__2184
1b6f8     A7 F0 03 F6 | 	mov	ptra, fp
1b6fc     B2 00 A0 FD | 	call	#popregs_
1b700                 | _do_strig_ret
1b700     2D 00 64 FD | 	ret
1b704                 | 
1b704                 | ' 
1b704                 | ' ' ------------------ tan
1b704                 | ' 
1b704                 | ' sub do_tan
1b704                 | _do_tan
1b704     01 4A 05 F6 | 	mov	COUNT_, #1
1b708     A8 00 A0 FD | 	call	#pushregs_
1b70c     10 F0 07 F1 | 	add	ptra, #16
1b710     4A 00 00 FF 
1b714     80 E4 05 F1 | 	add	objptr, ##38016
1b718     F2 26 02 FB | 	rdlong	local01, objptr
1b71c     13 17 02 F6 | 	mov	arg03, local01
1b720     01 16 66 F0 | 	shl	arg03, #1
1b724     13 17 02 F1 | 	add	arg03, local01
1b728     02 16 66 F0 | 	shl	arg03, #2
1b72c     03 00 00 FF 
1b730     04 E4 85 F1 | 	sub	objptr, ##1540
1b734     F2 16 02 F1 | 	add	arg03, objptr
1b738     0B 17 02 FB | 	rdlong	arg03, arg03
1b73c     0C 4E 05 F1 | 	add	fp, #12
1b740     A7 16 62 FC | 	wrlong	arg03, fp
1b744                 | ' 
1b744                 | ' numpar=compiledline(lineptr_e).result.uresult
1b744                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1b744     0C 4E 85 F1 | 	sub	fp, #12
1b748     02 16 16 F2 | 	cmp	arg03, #2 wc
1b74c     47 00 00 FF 
1b750     7C E4 85 F1 | 	sub	objptr, ##36476
1b754     0C 4E 05 C1 |  if_b	add	fp, #12
1b758     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b75c     0C 4E 85 C1 |  if_b	sub	fp, #12
1b760     40 00 90 4D |  if_c_and_nz	jmp	#LR__2190
1b764     00 12 06 F6 | 	mov	arg01, #0
1b768     78 04 B1 FD | 	call	#__system___getiolock_0600
1b76c     FD 12 02 F6 | 	mov	arg01, result1
1b770     CC A7 B0 FD | 	call	#__system___lockmem
1b774     B2 01 00 FF 
1b778     9F 15 06 F6 | 	mov	arg02, ##@LR__5936
1b77c     00 12 06 F6 | 	mov	arg01, #0
1b780     00 16 06 F6 | 	mov	arg03, #0
1b784     B0 B4 B0 FD | 	call	#__system___basic_print_string
1b788     00 12 06 F6 | 	mov	arg01, #0
1b78c     54 04 B1 FD | 	call	#__system___getiolock_0600
1b790     FD 00 68 FC | 	wrlong	#0, result1
1b794     27 12 06 F6 | 	mov	arg01, #39
1b798     00 14 06 F6 | 	mov	arg02, #0
1b79c     B0 6D B0 FD | 	call	#_printerror
1b7a0     64 00 90 FD | 	jmp	#LR__2191
1b7a4                 | LR__2190
1b7a4     38 1B BF FD | 	call	#_pop
1b7a8     A7 FA 61 FC | 	wrlong	result1, fp
1b7ac     04 4E 05 F1 | 	add	fp, #4
1b7b0     A7 FC 61 FC | 	wrlong	result2, fp
1b7b4     04 4E 05 F1 | 	add	fp, #4
1b7b8     A7 FE 61 FC | 	wrlong	result3, fp
1b7bc     08 4E 85 F1 | 	sub	fp, #8
1b7c0     52 00 00 FF 
1b7c4     A8 E4 05 F1 | 	add	objptr, ##42152
1b7c8     F2 26 02 FB | 	rdlong	local01, objptr
1b7cc     52 00 00 FF 
1b7d0     A8 E4 85 F1 | 	sub	objptr, ##42152
1b7d4     A7 12 02 F6 | 	mov	arg01, fp
1b7d8     A4 1D BF FD | 	call	#_converttofloat
1b7dc     FD 14 02 F6 | 	mov	arg02, result1
1b7e0     13 13 02 F6 | 	mov	arg01, local01
1b7e4     D4 D5 B0 FD | 	call	#__system___float_mul
1b7e8     FD 12 02 F6 | 	mov	arg01, result1
1b7ec     78 E0 B0 FD | 	call	#__system____builtin_tanf
1b7f0     A7 FA 61 FC | 	wrlong	result1, fp
1b7f4     08 4E 05 F1 | 	add	fp, #8
1b7f8     A7 3C 68 FC | 	wrlong	#30, fp
1b7fc     08 4E 85 F1 | 	sub	fp, #8
1b800     A7 12 02 F6 | 	mov	arg01, fp
1b804     70 1B BF FD | 	call	#_push
1b808                 | LR__2191
1b808     A7 F0 03 F6 | 	mov	ptra, fp
1b80c     B2 00 A0 FD | 	call	#popregs_
1b810                 | _do_tan_ret
1b810     2D 00 64 FD | 	ret
1b814                 | 
1b814                 | ' 
1b814                 | ' ' ------------------ val
1b814                 | ' 
1b814                 | ' sub do_val
1b814                 | _do_val
1b814     03 4A 05 F6 | 	mov	COUNT_, #3
1b818     A8 00 A0 FD | 	call	#pushregs_
1b81c     20 F0 07 F1 | 	add	ptra, #32
1b820     4A 00 00 FF 
1b824     80 E4 05 F1 | 	add	objptr, ##38016
1b828     F2 16 02 FB | 	rdlong	arg03, objptr
1b82c     0B 27 02 F6 | 	mov	local01, arg03
1b830     01 26 66 F0 | 	shl	local01, #1
1b834     0B 27 02 F1 | 	add	local01, arg03
1b838     02 26 66 F0 | 	shl	local01, #2
1b83c     03 00 00 FF 
1b840     04 E4 85 F1 | 	sub	objptr, ##1540
1b844     F2 26 02 F1 | 	add	local01, objptr
1b848     13 17 02 FB | 	rdlong	arg03, local01
1b84c     0C 4E 05 F1 | 	add	fp, #12
1b850     A7 16 62 FC | 	wrlong	arg03, fp
1b854                 | ' 
1b854                 | ' numpar=compiledline(lineptr_e).result.uresult
1b854                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1b854     0C 4E 85 F1 | 	sub	fp, #12
1b858     02 16 16 F2 | 	cmp	arg03, #2 wc
1b85c     47 00 00 FF 
1b860     7C E4 85 F1 | 	sub	objptr, ##36476
1b864     0C 4E 05 C1 |  if_b	add	fp, #12
1b868     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1b86c     0C 4E 85 C1 |  if_b	sub	fp, #12
1b870     40 00 90 4D |  if_c_and_nz	jmp	#LR__2200
1b874     00 12 06 F6 | 	mov	arg01, #0
1b878     68 03 B1 FD | 	call	#__system___getiolock_0600
1b87c     FD 12 02 F6 | 	mov	arg01, result1
1b880     BC A6 B0 FD | 	call	#__system___lockmem
1b884     B2 01 00 FF 
1b888     A5 15 06 F6 | 	mov	arg02, ##@LR__5937
1b88c     00 12 06 F6 | 	mov	arg01, #0
1b890     00 16 06 F6 | 	mov	arg03, #0
1b894     A0 B3 B0 FD | 	call	#__system___basic_print_string
1b898     00 12 06 F6 | 	mov	arg01, #0
1b89c     44 03 B1 FD | 	call	#__system___getiolock_0600
1b8a0     FD 00 68 FC | 	wrlong	#0, result1
1b8a4     27 12 06 F6 | 	mov	arg01, #39
1b8a8     00 14 06 F6 | 	mov	arg02, #0
1b8ac     A0 6C B0 FD | 	call	#_printerror
1b8b0     60 02 90 FD | 	jmp	#LR__2213
1b8b4                 | LR__2200
1b8b4     28 1A BF FD | 	call	#_pop
1b8b8     FF 16 02 F6 | 	mov	arg03, result3
1b8bc     A7 FA 61 FC | 	wrlong	result1, fp
1b8c0     04 4E 05 F1 | 	add	fp, #4
1b8c4     A7 FC 61 FC | 	wrlong	result2, fp
1b8c8     04 4E 05 F1 | 	add	fp, #4
1b8cc     A7 16 62 FC | 	wrlong	arg03, fp
1b8d0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1b8d0     08 4E 85 F1 | 	sub	fp, #8
1b8d4     2B 16 0E F2 | 	cmp	arg03, #43 wz
1b8d8     18 00 90 5D |  if_ne	jmp	#LR__2201
1b8dc     A7 12 02 FB | 	rdlong	arg01, fp
1b8e0     74 1B BF FD | 	call	#_convertstring
1b8e4     A7 FA 61 FC | 	wrlong	result1, fp
1b8e8     08 4E 05 F1 | 	add	fp, #8
1b8ec     A7 3E 68 FC | 	wrlong	#31, fp
1b8f0     08 4E 85 F1 | 	sub	fp, #8
1b8f4                 | LR__2201
1b8f4                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1b8f4     08 4E 05 F1 | 	add	fp, #8
1b8f8     A7 16 02 FB | 	rdlong	arg03, fp
1b8fc     08 4E 85 F1 | 	sub	fp, #8
1b900     1F 16 0E F2 | 	cmp	arg03, #31 wz
1b904     40 00 90 AD |  if_e	jmp	#LR__2202
1b908     00 12 06 F6 | 	mov	arg01, #0
1b90c     D4 02 B1 FD | 	call	#__system___getiolock_0600
1b910     FD 12 02 F6 | 	mov	arg01, result1
1b914     28 A6 B0 FD | 	call	#__system___lockmem
1b918     B2 01 00 FF 
1b91c     AB 15 06 F6 | 	mov	arg02, ##@LR__5938
1b920     00 12 06 F6 | 	mov	arg01, #0
1b924     00 16 06 F6 | 	mov	arg03, #0
1b928     0C B3 B0 FD | 	call	#__system___basic_print_string
1b92c     00 12 06 F6 | 	mov	arg01, #0
1b930     B0 02 B1 FD | 	call	#__system___getiolock_0600
1b934     FD 00 68 FC | 	wrlong	#0, result1
1b938     0F 12 06 F6 | 	mov	arg01, #15
1b93c     00 14 06 F6 | 	mov	arg02, #0
1b940     0C 6C B0 FD | 	call	#_printerror
1b944     CC 01 90 FD | 	jmp	#LR__2213
1b948                 | LR__2202
1b948                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b948     A7 12 02 FB | 	rdlong	arg01, fp
1b94c     01 14 06 F6 | 	mov	arg02, #1
1b950     6C C6 B0 FD | 	call	#__system__Left_S
1b954     FD 12 02 F6 | 	mov	arg01, result1
1b958     B2 01 00 FF 
1b95c     B1 15 06 F6 | 	mov	arg02, ##@LR__5939
1b960     04 A6 B0 FD | 	call	#__system___string_cmp
1b964     00 FA 0D F2 | 	cmp	result1, #0 wz
1b968     48 00 90 5D |  if_ne	jmp	#LR__2205
1b96c     B2 01 00 FF 
1b970     B3 27 06 F6 | 	mov	local01, ##@LR__5940
1b974     A7 16 02 FB | 	rdlong	arg03, fp
1b978     0B 13 02 F6 | 	mov	arg01, arg03
1b97c     09 29 02 F6 | 	mov	local02, arg01
1b980     97 06 48 FB | 	callpa	#(@LR__2204-@LR__2203)>>2,fcache_load_ptr_
1b984                 | LR__2203
1b984     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b988     01 28 06 51 |  if_ne	add	local02, #1
1b98c     F4 FF 9F 5D |  if_ne	jmp	#LR__2203
1b990                 | LR__2204
1b990     09 29 82 F1 | 	sub	local02, arg01
1b994     14 15 02 F6 | 	mov	arg02, local02
1b998     01 14 86 F1 | 	sub	arg02, #1
1b99c     0B 13 02 F6 | 	mov	arg01, arg03
1b9a0     A4 C6 B0 FD | 	call	#__system__Right_S
1b9a4     FD 14 02 F6 | 	mov	arg02, result1
1b9a8     13 13 02 F6 | 	mov	arg01, local01
1b9ac     EC A5 B0 FD | 	call	#__system___string_concat
1b9b0     A7 FA 61 FC | 	wrlong	result1, fp
1b9b4                 | LR__2205
1b9b4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1b9b4     A7 12 02 FB | 	rdlong	arg01, fp
1b9b8     01 14 06 F6 | 	mov	arg02, #1
1b9bc     00 C6 B0 FD | 	call	#__system__Left_S
1b9c0     FD 12 02 F6 | 	mov	arg01, result1
1b9c4     B2 01 00 FF 
1b9c8     B6 15 06 F6 | 	mov	arg02, ##@LR__5941
1b9cc     98 A5 B0 FD | 	call	#__system___string_cmp
1b9d0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b9d4     48 00 90 5D |  if_ne	jmp	#LR__2208
1b9d8     B2 01 00 FF 
1b9dc     B8 27 06 F6 | 	mov	local01, ##@LR__5942
1b9e0     A7 16 02 FB | 	rdlong	arg03, fp
1b9e4     0B 13 02 F6 | 	mov	arg01, arg03
1b9e8     09 29 02 F6 | 	mov	local02, arg01
1b9ec     97 06 48 FB | 	callpa	#(@LR__2207-@LR__2206)>>2,fcache_load_ptr_
1b9f0                 | LR__2206
1b9f0     14 FB C9 FA | 	rdbyte	result1, local02 wz
1b9f4     01 28 06 51 |  if_ne	add	local02, #1
1b9f8     F4 FF 9F 5D |  if_ne	jmp	#LR__2206
1b9fc                 | LR__2207
1b9fc     09 29 82 F1 | 	sub	local02, arg01
1ba00     14 15 02 F6 | 	mov	arg02, local02
1ba04     01 14 86 F1 | 	sub	arg02, #1
1ba08     0B 13 02 F6 | 	mov	arg01, arg03
1ba0c     38 C6 B0 FD | 	call	#__system__Right_S
1ba10     FD 14 02 F6 | 	mov	arg02, result1
1ba14     13 13 02 F6 | 	mov	arg01, local01
1ba18     80 A5 B0 FD | 	call	#__system___string_concat
1ba1c     A7 FA 61 FC | 	wrlong	result1, fp
1ba20                 | LR__2208
1ba20     A7 12 02 FB | 	rdlong	arg01, fp
1ba24     A0 DB B0 FD | 	call	#__system____builtin_atof
1ba28     1C 4E 05 F1 | 	add	fp, #28
1ba2c     A7 FA 61 FC | 	wrlong	result1, fp
1ba30     1C 4E 85 F1 | 	sub	fp, #28
1ba34     A7 12 02 FB | 	rdlong	arg01, fp
1ba38     00 14 06 F6 | 	mov	arg02, #0
1ba3c     F4 D9 B0 FD | 	call	#__system____builtin_atoi
1ba40     18 4E 05 F1 | 	add	fp, #24
1ba44     A7 FA 61 FC | 	wrlong	result1, fp
1ba48                 | ' fval=val(t1.result.sresult)
1ba48                 | ' ival=val%(t1.result.sresult)
1ba48                 | ' if fval=ival then
1ba48     04 4E 05 F1 | 	add	fp, #4
1ba4c     A7 26 02 FB | 	rdlong	local01, fp
1ba50     1C 4E 85 F1 | 	sub	fp, #28
1ba54     FD 12 52 F6 | 	abs	arg01, result1 wc
1ba58     1F 2A C6 C9 |  if_b	decod	local03, #31
1ba5c     00 2A 06 36 |  if_ae	mov	local03, #0
1ba60     54 CF B0 FD | 	call	#__system___float_fromuns
1ba64     15 FB 61 F5 | 	xor	result1, local03
1ba68     FD 14 02 F6 | 	mov	arg02, result1
1ba6c     13 13 02 F6 | 	mov	arg01, local01
1ba70     01 16 06 F6 | 	mov	arg03, #1
1ba74     78 D7 B0 FD | 	call	#__system___float_cmp
1ba78     00 FA 0D F2 | 	cmp	result1, #0 wz
1ba7c     20 00 90 5D |  if_ne	jmp	#LR__2209
1ba80     18 4E 05 F1 | 	add	fp, #24
1ba84     A7 26 02 FB | 	rdlong	local01, fp
1ba88     18 4E 85 F1 | 	sub	fp, #24
1ba8c     A7 26 62 FC | 	wrlong	local01, fp
1ba90     08 4E 05 F1 | 	add	fp, #8
1ba94     A7 38 68 FC | 	wrlong	#28, fp
1ba98     08 4E 85 F1 | 	sub	fp, #8
1ba9c     6C 00 90 FD | 	jmp	#LR__2212
1baa0                 | LR__2209
1baa0                 | '   if fval=0 andalso ival<>0 then
1baa0     1C 4E 05 F1 | 	add	fp, #28
1baa4     A7 12 02 FB | 	rdlong	arg01, fp
1baa8     1C 4E 85 F1 | 	sub	fp, #28
1baac     00 14 06 F6 | 	mov	arg02, #0
1bab0     01 16 06 F6 | 	mov	arg03, #1
1bab4     38 D7 B0 FD | 	call	#__system___float_cmp
1bab8     00 FA 0D F2 | 	cmp	result1, #0 wz
1babc     30 00 90 5D |  if_ne	jmp	#LR__2210
1bac0     18 4E 05 F1 | 	add	fp, #24
1bac4     A7 26 0A FB | 	rdlong	local01, fp wz
1bac8     18 4E 85 F1 | 	sub	fp, #24
1bacc     20 00 90 AD |  if_e	jmp	#LR__2210
1bad0     18 4E 05 F1 | 	add	fp, #24
1bad4     A7 26 02 FB | 	rdlong	local01, fp
1bad8     18 4E 85 F1 | 	sub	fp, #24
1badc     A7 26 62 FC | 	wrlong	local01, fp
1bae0     08 4E 05 F1 | 	add	fp, #8
1bae4     A7 38 68 FC | 	wrlong	#28, fp
1bae8     08 4E 85 F1 | 	sub	fp, #8
1baec     1C 00 90 FD | 	jmp	#LR__2211
1baf0                 | LR__2210
1baf0     1C 4E 05 F1 | 	add	fp, #28
1baf4     A7 26 02 FB | 	rdlong	local01, fp
1baf8     1C 4E 85 F1 | 	sub	fp, #28
1bafc     A7 26 62 FC | 	wrlong	local01, fp
1bb00     08 4E 05 F1 | 	add	fp, #8
1bb04     A7 3C 68 FC | 	wrlong	#30, fp
1bb08     08 4E 85 F1 | 	sub	fp, #8
1bb0c                 | LR__2211
1bb0c                 | LR__2212
1bb0c     A7 12 02 F6 | 	mov	arg01, fp
1bb10     64 18 BF FD | 	call	#_push
1bb14                 | LR__2213
1bb14     A7 F0 03 F6 | 	mov	ptra, fp
1bb18     B2 00 A0 FD | 	call	#popregs_
1bb1c                 | _do_val_ret
1bb1c     2D 00 64 FD | 	ret
1bb20                 | 
1bb20                 | ' 
1bb20                 | ' ' ------------------ waitclock
1bb20                 | ' 
1bb20                 | ' sub do_waitclock
1bb20                 | _do_waitclock
1bb20     52 00 00 FF 
1bb24     94 E4 05 F1 | 	add	objptr, ##42132
1bb28     F2 00 02 FB | 	rdlong	_var01, objptr
1bb2c                 | ' c=hkcnt
1bb2c                 | ' do: loop until hkcnt<>c
1bb2c                 | LR__2220
1bb2c     F2 02 02 FB | 	rdlong	_var02, objptr
1bb30     00 03 0A F2 | 	cmp	_var02, _var01 wz
1bb34     F4 FF 9F AD |  if_e	jmp	#LR__2220
1bb38     52 00 00 FF 
1bb3c     94 E4 85 F1 | 	sub	objptr, ##42132
1bb40                 | _do_waitclock_ret
1bb40     2D 00 64 FD | 	ret
1bb44                 | 
1bb44                 | ' 
1bb44                 | ' ' ------------------ waitms
1bb44                 | ' 
1bb44                 | ' sub do_waitms
1bb44                 | _do_waitms
1bb44     01 4A 05 F6 | 	mov	COUNT_, #1
1bb48     A8 00 A0 FD | 	call	#pushregs_
1bb4c     18 F0 07 F1 | 	add	ptra, #24
1bb50     8C 17 BF FD | 	call	#_pop
1bb54     A7 FA 61 FC | 	wrlong	result1, fp
1bb58     04 4E 05 F1 | 	add	fp, #4
1bb5c     A7 FC 61 FC | 	wrlong	result2, fp
1bb60     04 4E 05 F1 | 	add	fp, #4
1bb64     A7 FE 61 FC | 	wrlong	result3, fp
1bb68     08 4E 85 F1 | 	sub	fp, #8
1bb6c     A7 12 02 F6 | 	mov	arg01, fp
1bb70     50 19 BF FD | 	call	#_converttoint
1bb74     0C 4E 05 F1 | 	add	fp, #12
1bb78     A7 FA 61 FC | 	wrlong	result1, fp
1bb7c                 | ' 
1bb7c                 | ' t1=pop()  
1bb7c                 | ' t=converttoint(t1)
1bb7c                 | ' if t<0 then return
1bb7c     0C 4E 85 F1 | 	sub	fp, #12
1bb80     00 FA 55 F2 | 	cmps	result1, #0 wc
1bb84     E4 00 90 CD |  if_b	jmp	#LR__2236
1bb88                 | ' if t < 1000 then 
1bb88     0C 4E 05 F1 | 	add	fp, #12
1bb8c     A7 12 02 FB | 	rdlong	arg01, fp
1bb90     0C 4E 85 F1 | 	sub	fp, #12
1bb94     01 00 00 FF 
1bb98     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1bb9c     14 00 90 3D |  if_ae	jmp	#LR__2230
1bba0     0C 4E 05 F1 | 	add	fp, #12
1bba4     A7 12 02 FB | 	rdlong	arg01, fp
1bba8     0C 4E 85 F1 | 	sub	fp, #12
1bbac     84 A6 B0 FD | 	call	#__system___waitms
1bbb0     B8 00 90 FD | 	jmp	#LR__2235
1bbb4                 | LR__2230
1bbb4     10 4E 05 F1 | 	add	fp, #16
1bbb8     A7 02 68 FC | 	wrlong	#1, fp
1bbbc     04 4E 85 F1 | 	sub	fp, #4
1bbc0     A7 12 02 FB | 	rdlong	arg01, fp
1bbc4     09 13 52 F6 | 	abs	arg01, arg01 wc
1bbc8     01 00 00 FF 
1bbcc     E8 13 16 FD | 	qdiv	arg01, ##1000
1bbd0                 | '   for i=1 to t/1000
1bbd0     0C 4E 85 F1 | 	sub	fp, #12
1bbd4     18 26 62 FD | 	getqx	local01
1bbd8     13 27 82 F6 | 	negc	local01, local01
1bbdc     01 26 06 F1 | 	add	local01, #1
1bbe0                 | LR__2231
1bbe0     10 4E 05 F1 | 	add	fp, #16
1bbe4     A7 12 02 FB | 	rdlong	arg01, fp
1bbe8     10 4E 85 F1 | 	sub	fp, #16
1bbec     13 13 52 F2 | 	cmps	arg01, local01 wc
1bbf0     54 00 90 3D |  if_ae	jmp	#LR__2234
1bbf4     01 00 00 FF 
1bbf8     E8 13 06 F6 | 	mov	arg01, ##1000
1bbfc     34 A6 B0 FD | 	call	#__system___waitms
1bc00                 | '     waitms(1000)
1bc00                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1bc00     E0 12 06 F6 | 	mov	arg01, #224
1bc04     40 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bc08     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc0c     10 00 90 5D |  if_ne	jmp	#LR__2232
1bc10     E4 12 06 F6 | 	mov	arg01, #228
1bc14     30 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bc18     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc1c     10 00 90 AD |  if_e	jmp	#LR__2233
1bc20                 | LR__2232
1bc20     06 12 06 F6 | 	mov	arg01, #6
1bc24     20 9A B0 FD | 	call	#_usbnew_spin2_keystate
1bc28     00 FA 0D F2 | 	cmp	result1, #0 wz
1bc2c     3C 00 90 5D |  if_ne	jmp	#LR__2236
1bc30                 | LR__2233
1bc30     10 4E 05 F1 | 	add	fp, #16
1bc34     A7 12 02 FB | 	rdlong	arg01, fp
1bc38     01 12 06 F1 | 	add	arg01, #1
1bc3c     A7 12 62 FC | 	wrlong	arg01, fp
1bc40     10 4E 85 F1 | 	sub	fp, #16
1bc44     98 FF 9F FD | 	jmp	#LR__2231
1bc48                 | LR__2234
1bc48     0C 4E 05 F1 | 	add	fp, #12
1bc4c     A7 26 02 FB | 	rdlong	local01, fp
1bc50     13 27 52 F6 | 	abs	local01, local01 wc
1bc54     01 00 00 FF 
1bc58     E8 27 16 FD | 	qdiv	local01, ##1000
1bc5c     0C 4E 85 F1 | 	sub	fp, #12
1bc60     19 26 62 FD | 	getqy	local01
1bc64     13 13 82 F6 | 	negc	arg01, local01
1bc68     C8 A5 B0 FD | 	call	#__system___waitms
1bc6c                 | LR__2235
1bc6c                 | LR__2236
1bc6c     A7 F0 03 F6 | 	mov	ptra, fp
1bc70     B2 00 A0 FD | 	call	#popregs_
1bc74                 | _do_waitms_ret
1bc74     2D 00 64 FD | 	ret
1bc78                 | 
1bc78                 | ' 
1bc78                 | ' ' ------------------ waitvbl
1bc78                 | ' 
1bc78                 | ' sub do_waitvbl
1bc78                 | _do_waitvbl
1bc78     01 12 06 F6 | 	mov	arg01, #1
1bc7c     CC 85 B0 FD | 	call	#_hg010b_spin2_waitvbl
1bc80                 | _do_waitvbl_ret
1bc80     2D 00 64 FD | 	ret
1bc84                 | 
1bc84                 | ' 
1bc84                 | ' ' ------------------ wrpin
1bc84                 | ' 
1bc84                 | ' sub do_wrpin
1bc84                 | _do_wrpin
1bc84     01 4A 05 F6 | 	mov	COUNT_, #1
1bc88     A8 00 A0 FD | 	call	#pushregs_
1bc8c     18 F0 07 F1 | 	add	ptra, #24
1bc90     4C 16 BF FD | 	call	#_pop
1bc94     FD 14 02 F6 | 	mov	arg02, result1
1bc98     FE 12 02 F6 | 	mov	arg01, result2
1bc9c     FF 26 02 F6 | 	mov	local01, result3
1bca0     A7 14 62 FC | 	wrlong	arg02, fp
1bca4     04 4E 05 F1 | 	add	fp, #4
1bca8     A7 12 62 FC | 	wrlong	arg01, fp
1bcac     04 4E 05 F1 | 	add	fp, #4
1bcb0     A7 26 62 FC | 	wrlong	local01, fp
1bcb4     08 4E 85 F1 | 	sub	fp, #8
1bcb8     24 16 BF FD | 	call	#_pop
1bcbc     FF 26 02 F6 | 	mov	local01, result3
1bcc0     0C 4E 05 F1 | 	add	fp, #12
1bcc4     A7 FA 61 FC | 	wrlong	result1, fp
1bcc8     04 4E 05 F1 | 	add	fp, #4
1bccc     A7 FC 61 FC | 	wrlong	result2, fp
1bcd0     04 4E 05 F1 | 	add	fp, #4
1bcd4     A7 26 62 FC | 	wrlong	local01, fp
1bcd8     08 4E 85 F1 | 	sub	fp, #8
1bcdc     A7 12 02 F6 | 	mov	arg01, fp
1bce0     0C 4E 85 F1 | 	sub	fp, #12
1bce4     DC 17 BF FD | 	call	#_converttoint
1bce8     FD 26 02 F6 | 	mov	local01, result1
1bcec     A7 12 02 F6 | 	mov	arg01, fp
1bcf0     D0 17 BF FD | 	call	#_converttoint
1bcf4     13 FB 01 FC | 	wrpin	result1, local01
1bcf8     A7 F0 03 F6 | 	mov	ptra, fp
1bcfc     B2 00 A0 FD | 	call	#popregs_
1bd00                 | _do_wrpin_ret
1bd00     2D 00 64 FD | 	ret
1bd04                 | 
1bd04                 | ' 
1bd04                 | ' ' ------------------ wxpin
1bd04                 | ' 
1bd04                 | ' sub do_wxpin
1bd04                 | _do_wxpin
1bd04     01 4A 05 F6 | 	mov	COUNT_, #1
1bd08     A8 00 A0 FD | 	call	#pushregs_
1bd0c     18 F0 07 F1 | 	add	ptra, #24
1bd10     CC 15 BF FD | 	call	#_pop
1bd14     FD 14 02 F6 | 	mov	arg02, result1
1bd18     FE 12 02 F6 | 	mov	arg01, result2
1bd1c     FF 26 02 F6 | 	mov	local01, result3
1bd20     A7 14 62 FC | 	wrlong	arg02, fp
1bd24     04 4E 05 F1 | 	add	fp, #4
1bd28     A7 12 62 FC | 	wrlong	arg01, fp
1bd2c     04 4E 05 F1 | 	add	fp, #4
1bd30     A7 26 62 FC | 	wrlong	local01, fp
1bd34     08 4E 85 F1 | 	sub	fp, #8
1bd38     A4 15 BF FD | 	call	#_pop
1bd3c     FF 26 02 F6 | 	mov	local01, result3
1bd40     0C 4E 05 F1 | 	add	fp, #12
1bd44     A7 FA 61 FC | 	wrlong	result1, fp
1bd48     04 4E 05 F1 | 	add	fp, #4
1bd4c     A7 FC 61 FC | 	wrlong	result2, fp
1bd50     04 4E 05 F1 | 	add	fp, #4
1bd54     A7 26 62 FC | 	wrlong	local01, fp
1bd58     08 4E 85 F1 | 	sub	fp, #8
1bd5c     A7 12 02 F6 | 	mov	arg01, fp
1bd60     0C 4E 85 F1 | 	sub	fp, #12
1bd64     5C 17 BF FD | 	call	#_converttoint
1bd68     FD 26 02 F6 | 	mov	local01, result1
1bd6c     A7 12 02 F6 | 	mov	arg01, fp
1bd70     50 17 BF FD | 	call	#_converttoint
1bd74     13 FB 11 FC | 	wxpin	result1, local01
1bd78     A7 F0 03 F6 | 	mov	ptra, fp
1bd7c     B2 00 A0 FD | 	call	#popregs_
1bd80                 | _do_wxpin_ret
1bd80     2D 00 64 FD | 	ret
1bd84                 | 
1bd84                 | ' 
1bd84                 | ' ' ------------------ wypin
1bd84                 | ' 
1bd84                 | ' sub do_wypin
1bd84                 | _do_wypin
1bd84     01 4A 05 F6 | 	mov	COUNT_, #1
1bd88     A8 00 A0 FD | 	call	#pushregs_
1bd8c     18 F0 07 F1 | 	add	ptra, #24
1bd90     4C 15 BF FD | 	call	#_pop
1bd94     FD 14 02 F6 | 	mov	arg02, result1
1bd98     FE 12 02 F6 | 	mov	arg01, result2
1bd9c     FF 26 02 F6 | 	mov	local01, result3
1bda0     A7 14 62 FC | 	wrlong	arg02, fp
1bda4     04 4E 05 F1 | 	add	fp, #4
1bda8     A7 12 62 FC | 	wrlong	arg01, fp
1bdac     04 4E 05 F1 | 	add	fp, #4
1bdb0     A7 26 62 FC | 	wrlong	local01, fp
1bdb4     08 4E 85 F1 | 	sub	fp, #8
1bdb8     24 15 BF FD | 	call	#_pop
1bdbc     FF 26 02 F6 | 	mov	local01, result3
1bdc0     0C 4E 05 F1 | 	add	fp, #12
1bdc4     A7 FA 61 FC | 	wrlong	result1, fp
1bdc8     04 4E 05 F1 | 	add	fp, #4
1bdcc     A7 FC 61 FC | 	wrlong	result2, fp
1bdd0     04 4E 05 F1 | 	add	fp, #4
1bdd4     A7 26 62 FC | 	wrlong	local01, fp
1bdd8     08 4E 85 F1 | 	sub	fp, #8
1bddc     A7 12 02 F6 | 	mov	arg01, fp
1bde0     0C 4E 85 F1 | 	sub	fp, #12
1bde4     DC 16 BF FD | 	call	#_converttoint
1bde8     FD 26 02 F6 | 	mov	local01, result1
1bdec     A7 12 02 F6 | 	mov	arg01, fp
1bdf0     D0 16 BF FD | 	call	#_converttoint
1bdf4     13 FB 21 FC | 	wypin	result1, local01
1bdf8     A7 F0 03 F6 | 	mov	ptra, fp
1bdfc     B2 00 A0 FD | 	call	#popregs_
1be00                 | _do_wypin_ret
1be00     2D 00 64 FD | 	ret
1be04                 | 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' 
1be04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1be04                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1be04                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1be04                 | ' 
1be04                 | ' 
1be04                 | ' '------------------ Assign
1be04                 | ' 
1be04                 | ' sub do_assign
1be04                 | _do_assign
1be04     05 4A 05 F6 | 	mov	COUNT_, #5
1be08     A8 00 A0 FD | 	call	#pushregs_
1be0c     44 F0 07 F1 | 	add	ptra, #68
1be10     4A 00 00 FF 
1be14     80 E4 05 F1 | 	add	objptr, ##38016
1be18     F2 16 02 FB | 	rdlong	arg03, objptr
1be1c     0B 15 02 F6 | 	mov	arg02, arg03
1be20     01 14 66 F0 | 	shl	arg02, #1
1be24     0B 15 02 F1 | 	add	arg02, arg03
1be28     02 14 66 F0 | 	shl	arg02, #2
1be2c     03 00 00 FF 
1be30     04 E4 85 F1 | 	sub	objptr, ##1540
1be34     F2 14 02 F1 | 	add	arg02, objptr
1be38     0A 15 02 FB | 	rdlong	arg02, arg02
1be3c     18 4E 05 F1 | 	add	fp, #24
1be40     A7 14 62 FC | 	wrlong	arg02, fp
1be44                 | ' 
1be44                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1be44                 | ' if variables(varnum).vartype<array_no_type then 
1be44     18 4E 85 F1 | 	sub	fp, #24
1be48     04 14 66 F0 | 	shl	arg02, #4
1be4c     32 00 00 FF 
1be50     84 E4 85 F1 | 	sub	objptr, ##25732
1be54     F2 14 02 F1 | 	add	arg02, objptr
1be58     0C 14 06 F1 | 	add	arg02, #12
1be5c     0A 17 02 FB | 	rdlong	arg03, arg02
1be60     00 17 16 F2 | 	cmp	arg03, #256 wc
1be64     14 00 00 FF 
1be68     F8 E5 85 F1 | 	sub	objptr, ##10744
1be6c     18 01 90 3D |  if_ae	jmp	#LR__2240
1be70     6C 14 BF FD | 	call	#_pop
1be74     A7 FA 61 FC | 	wrlong	result1, fp
1be78     04 4E 05 F1 | 	add	fp, #4
1be7c     A7 FC 61 FC | 	wrlong	result2, fp
1be80     04 4E 05 F1 | 	add	fp, #4
1be84     A7 FE 61 FC | 	wrlong	result3, fp
1be88     08 4E 85 F1 | 	sub	fp, #8
1be8c     A7 16 02 FB | 	rdlong	arg03, fp
1be90     04 4E 05 F1 | 	add	fp, #4
1be94     A7 14 02 FB | 	rdlong	arg02, fp
1be98     14 4E 05 F1 | 	add	fp, #20
1be9c     A7 12 02 FB | 	rdlong	arg01, fp
1bea0     04 12 66 F0 | 	shl	arg01, #4
1bea4     14 00 00 FF 
1bea8     F8 E5 05 F1 | 	add	objptr, ##10744
1beac     F2 12 02 F1 | 	add	arg01, objptr
1beb0     04 12 06 F1 | 	add	arg01, #4
1beb4     09 17 62 FC | 	wrlong	arg03, arg01
1beb8     A7 16 02 FB | 	rdlong	arg03, fp
1bebc     04 16 66 F0 | 	shl	arg03, #4
1bec0     F2 16 02 F1 | 	add	arg03, objptr
1bec4     08 16 06 F1 | 	add	arg03, #8
1bec8     0B 15 62 FC | 	wrlong	arg02, arg03
1becc     A7 16 02 FB | 	rdlong	arg03, fp
1bed0     04 16 66 F0 | 	shl	arg03, #4
1bed4     F2 16 02 F1 | 	add	arg03, objptr
1bed8     10 4E 85 F1 | 	sub	fp, #16
1bedc     A7 14 02 FB | 	rdlong	arg02, fp
1bee0     0C 16 06 F1 | 	add	arg03, #12
1bee4     0B 15 62 FC | 	wrlong	arg02, arg03
1bee8                 | '   t1=pop() 
1bee8                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1bee8                 | '   if variables(varnum).vartype<>result_string2 then return
1bee8     10 4E 05 F1 | 	add	fp, #16
1beec     A7 16 02 FB | 	rdlong	arg03, fp
1bef0     18 4E 85 F1 | 	sub	fp, #24
1bef4     04 16 66 F0 | 	shl	arg03, #4
1bef8     F2 16 02 F1 | 	add	arg03, objptr
1befc     0C 16 06 F1 | 	add	arg03, #12
1bf00     0B 17 02 FB | 	rdlong	arg03, arg03
1bf04     2B 16 0E F2 | 	cmp	arg03, #43 wz
1bf08     14 00 00 FF 
1bf0c     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf10     EC 04 90 5D |  if_ne	jmp	#LR__2263
1bf14     18 4E 05 F1 | 	add	fp, #24
1bf18     A7 16 02 FB | 	rdlong	arg03, fp
1bf1c     0B 27 02 F6 | 	mov	local01, arg03
1bf20     04 26 66 F0 | 	shl	local01, #4
1bf24     14 00 00 FF 
1bf28     F8 E5 05 F1 | 	add	objptr, ##10744
1bf2c     F2 26 02 F1 | 	add	local01, objptr
1bf30     18 4E 85 F1 | 	sub	fp, #24
1bf34     04 16 66 F0 | 	shl	arg03, #4
1bf38     F2 16 02 F1 | 	add	arg03, objptr
1bf3c     04 16 06 F1 | 	add	arg03, #4
1bf40     0B 13 02 FB | 	rdlong	arg01, arg03
1bf44     14 00 00 FF 
1bf48     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf4c     08 15 BF FD | 	call	#_convertstring
1bf50     04 26 06 F1 | 	add	local01, #4
1bf54     13 FB 61 FC | 	wrlong	result1, local01
1bf58     18 4E 05 F1 | 	add	fp, #24
1bf5c     A7 26 02 FB | 	rdlong	local01, fp
1bf60     18 4E 85 F1 | 	sub	fp, #24
1bf64     04 26 66 F0 | 	shl	local01, #4
1bf68     14 00 00 FF 
1bf6c     F8 E5 05 F1 | 	add	objptr, ##10744
1bf70     F2 26 02 F1 | 	add	local01, objptr
1bf74     0C 26 06 F1 | 	add	local01, #12
1bf78     13 3F 68 FC | 	wrlong	#31, local01
1bf7c                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1bf7c                 | '   variables(varnum).vartype=result_string
1bf7c                 | '   return
1bf7c     14 00 00 FF 
1bf80     F8 E5 85 F1 | 	sub	objptr, ##10744
1bf84     78 04 90 FD | 	jmp	#LR__2263
1bf88                 | LR__2240
1bf88                 | ' for i=0 to 2 : arrid(i)=0 : next i
1bf88     1C 4E 05 F1 | 	add	fp, #28
1bf8c     A7 00 68 FC | 	wrlong	#0, fp
1bf90     97 16 48 FB | 	callpa	#(@LR__2242-@LR__2241)>>2,fcache_load_ptr_
1bf94                 | LR__2241
1bf94     A7 26 02 FB | 	rdlong	local01, fp
1bf98     02 26 66 F0 | 	shl	local01, #2
1bf9c     18 4E 05 F1 | 	add	fp, #24
1bfa0     A7 26 02 F1 | 	add	local01, fp
1bfa4     13 01 68 FC | 	wrlong	#0, local01
1bfa8     18 4E 85 F1 | 	sub	fp, #24
1bfac     A7 26 02 FB | 	rdlong	local01, fp
1bfb0     01 26 06 F1 | 	add	local01, #1
1bfb4     A7 26 62 FC | 	wrlong	local01, fp
1bfb8     03 26 16 F2 | 	cmp	local01, #3 wc
1bfbc     D4 FF 9F CD |  if_b	jmp	#LR__2241
1bfc0                 | LR__2242
1bfc0     4A 00 00 FF 
1bfc4     80 E4 05 F1 | 	add	objptr, ##38016
1bfc8     F2 16 02 FB | 	rdlong	arg03, objptr
1bfcc     0B 27 02 F6 | 	mov	local01, arg03
1bfd0     01 26 66 F0 | 	shl	local01, #1
1bfd4     0B 27 02 F1 | 	add	local01, arg03
1bfd8     02 26 66 F0 | 	shl	local01, #2
1bfdc     03 00 00 FF 
1bfe0     04 E4 85 F1 | 	sub	objptr, ##1540
1bfe4     F2 26 02 F1 | 	add	local01, objptr
1bfe8     04 26 06 F1 | 	add	local01, #4
1bfec     13 29 02 FB | 	rdlong	local02, local01
1bff0     04 4E 05 F1 | 	add	fp, #4
1bff4     A7 28 62 FC | 	wrlong	local02, fp
1bff8     20 4E 85 F1 | 	sub	fp, #32
1bffc     47 00 00 FF 
1c000     7C E4 85 F1 | 	sub	objptr, ##36476
1c004     D8 12 BF FD | 	call	#_pop
1c008     A7 FA 61 FC | 	wrlong	result1, fp
1c00c     04 4E 05 F1 | 	add	fp, #4
1c010     A7 FC 61 FC | 	wrlong	result2, fp
1c014     04 4E 05 F1 | 	add	fp, #4
1c018     A7 FE 61 FC | 	wrlong	result3, fp
1c01c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c01c                 | ' t1=pop() ' var value
1c01c                 | ' if numpar>0 then
1c01c     18 4E 05 F1 | 	add	fp, #24
1c020     A7 2A 02 FB | 	rdlong	local03, fp
1c024     20 4E 85 F1 | 	sub	fp, #32
1c028     01 2A 16 F2 | 	cmp	local03, #1 wc
1c02c     78 00 90 CD |  if_b	jmp	#LR__2245
1c030                 | '   for i=numpar to 1 step -1
1c030     20 4E 05 F1 | 	add	fp, #32
1c034     A7 2C 0A FB | 	rdlong	local04, fp wz
1c038     04 4E 85 F1 | 	sub	fp, #4
1c03c     A7 2C 62 FC | 	wrlong	local04, fp
1c040     1C 4E 85 F1 | 	sub	fp, #28
1c044     60 00 90 AD |  if_e	jmp	#LR__2244
1c048                 | LR__2243
1c048     94 12 BF FD | 	call	#_pop
1c04c     0C 4E 05 F1 | 	add	fp, #12
1c050     A7 FA 61 FC | 	wrlong	result1, fp
1c054     04 4E 05 F1 | 	add	fp, #4
1c058     A7 FC 61 FC | 	wrlong	result2, fp
1c05c     04 4E 05 F1 | 	add	fp, #4
1c060     A7 FE 61 FC | 	wrlong	result3, fp
1c064     08 4E 05 F1 | 	add	fp, #8
1c068     A7 2A 02 FB | 	rdlong	local03, fp
1c06c     01 2A 86 F1 | 	sub	local03, #1
1c070     02 2A 66 F0 | 	shl	local03, #2
1c074     18 4E 05 F1 | 	add	fp, #24
1c078     A7 2A 02 F1 | 	add	local03, fp
1c07c     28 4E 85 F1 | 	sub	fp, #40
1c080     A7 12 02 F6 | 	mov	arg01, fp
1c084     0C 4E 85 F1 | 	sub	fp, #12
1c088     38 14 BF FD | 	call	#_converttoint
1c08c     15 FB 61 FC | 	wrlong	result1, local03
1c090     1C 4E 05 F1 | 	add	fp, #28
1c094     A7 2C 02 FB | 	rdlong	local04, fp
1c098     01 2C 8E F1 | 	sub	local04, #1 wz
1c09c     A7 2C 62 FC | 	wrlong	local04, fp
1c0a0     1C 4E 85 F1 | 	sub	fp, #28
1c0a4     A0 FF 9F 5D |  if_ne	jmp	#LR__2243
1c0a8                 | LR__2244
1c0a8                 | LR__2245
1c0a8     18 4E 05 F1 | 	add	fp, #24
1c0ac     A7 26 02 FB | 	rdlong	local01, fp
1c0b0     04 26 66 F0 | 	shl	local01, #4
1c0b4     14 00 00 FF 
1c0b8     F8 E5 05 F1 | 	add	objptr, ##10744
1c0bc     F2 26 02 F1 | 	add	local01, objptr
1c0c0     04 26 06 F1 | 	add	local01, #4
1c0c4     13 13 02 FB | 	rdlong	arg01, local01
1c0c8     0C 4E 05 F1 | 	add	fp, #12
1c0cc     A7 12 62 FC | 	wrlong	arg01, fp
1c0d0     24 4E 85 F1 | 	sub	fp, #36
1c0d4     14 00 00 FF 
1c0d8     F8 E5 85 F1 | 	sub	objptr, ##10744
1c0dc     40 67 B0 FD | 	call	#_pslpeek
1c0e0     FD 2C 32 F9 | 	getword	local04, result1, #0
1c0e4     28 4E 05 F1 | 	add	fp, #40
1c0e8     A7 2C 62 FC | 	wrlong	local04, fp
1c0ec     04 4E 85 F1 | 	sub	fp, #4
1c0f0     A7 12 02 FB | 	rdlong	arg01, fp
1c0f4     24 4E 85 F1 | 	sub	fp, #36
1c0f8     02 12 06 F1 | 	add	arg01, #2
1c0fc     C8 66 B0 FD | 	call	#_pspeek
1c100     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c104     2C 4E 05 F1 | 	add	fp, #44
1c108     A7 FA 61 FC | 	wrlong	result1, fp
1c10c                 | ' esize=pspeek(arrptr+2)
1c10c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1c10c     08 4E 85 F1 | 	sub	fp, #8
1c110     A7 12 02 FB | 	rdlong	arg01, fp
1c114     24 4E 85 F1 | 	sub	fp, #36
1c118     04 12 06 F1 | 	add	arg01, #4
1c11c     00 67 B0 FD | 	call	#_pslpeek
1c120     FD 2C 02 F6 | 	mov	local04, result1
1c124     34 4E 05 F1 | 	add	fp, #52
1c128     A7 26 02 FB | 	rdlong	local01, fp
1c12c     34 4E 85 F1 | 	sub	fp, #52
1c130     16 27 12 F2 | 	cmp	local01, local04 wc
1c134     54 00 90 3D |  if_ae	jmp	#LR__2246
1c138     24 4E 05 F1 | 	add	fp, #36
1c13c     A7 12 02 FB | 	rdlong	arg01, fp
1c140     24 4E 85 F1 | 	sub	fp, #36
1c144     08 12 06 F1 | 	add	arg01, #8
1c148     D4 66 B0 FD | 	call	#_pslpeek
1c14c     FD 26 02 F6 | 	mov	local01, result1
1c150     38 4E 05 F1 | 	add	fp, #56
1c154     A7 2C 02 FB | 	rdlong	local04, fp
1c158     38 4E 85 F1 | 	sub	fp, #56
1c15c     13 2D 12 F2 | 	cmp	local04, local01 wc
1c160     28 00 90 3D |  if_ae	jmp	#LR__2246
1c164     24 4E 05 F1 | 	add	fp, #36
1c168     A7 12 02 FB | 	rdlong	arg01, fp
1c16c     24 4E 85 F1 | 	sub	fp, #36
1c170     0C 12 06 F1 | 	add	arg01, #12
1c174     A8 66 B0 FD | 	call	#_pslpeek
1c178     3C 4E 05 F1 | 	add	fp, #60
1c17c     A7 2C 02 FB | 	rdlong	local04, fp
1c180     3C 4E 85 F1 | 	sub	fp, #60
1c184     FD 2C 12 F2 | 	cmp	local04, result1 wc
1c188     10 00 90 CD |  if_b	jmp	#LR__2247
1c18c                 | LR__2246
1c18c     31 12 06 F6 | 	mov	arg01, #49
1c190     00 14 06 F6 | 	mov	arg02, #0
1c194     B8 63 B0 FD | 	call	#_printerror
1c198     64 02 90 FD | 	jmp	#LR__2263
1c19c                 | LR__2247
1c19c     24 4E 05 F1 | 	add	fp, #36
1c1a0     A7 12 02 FB | 	rdlong	arg01, fp
1c1a4     09 2D 02 F6 | 	mov	local04, arg01
1c1a8     10 2C 06 F1 | 	add	local04, #16
1c1ac     24 4E 85 F1 | 	sub	fp, #36
1c1b0     04 12 06 F1 | 	add	arg01, #4
1c1b4     68 66 B0 FD | 	call	#_pslpeek
1c1b8     FD 26 02 F6 | 	mov	local01, result1
1c1bc     38 4E 05 F1 | 	add	fp, #56
1c1c0     A7 28 02 FB | 	rdlong	local02, fp
1c1c4     14 27 02 FD | 	qmul	local01, local02
1c1c8     04 4E 85 F1 | 	sub	fp, #4
1c1cc     A7 2A 02 FB | 	rdlong	local03, fp
1c1d0     10 4E 85 F1 | 	sub	fp, #16
1c1d4     A7 12 02 FB | 	rdlong	arg01, fp
1c1d8     24 4E 85 F1 | 	sub	fp, #36
1c1dc     08 12 06 F1 | 	add	arg01, #8
1c1e0     18 28 62 FD | 	getqx	local02
1c1e4     14 2B 02 F1 | 	add	local03, local02
1c1e8     34 66 B0 FD | 	call	#_pslpeek
1c1ec     FD 28 02 F6 | 	mov	local02, result1
1c1f0     24 4E 05 F1 | 	add	fp, #36
1c1f4     A7 12 02 FB | 	rdlong	arg01, fp
1c1f8     24 4E 85 F1 | 	sub	fp, #36
1c1fc     04 12 06 F1 | 	add	arg01, #4
1c200     1C 66 B0 FD | 	call	#_pslpeek
1c204     FD 28 02 FD | 	qmul	local02, result1
1c208     3C 4E 05 F1 | 	add	fp, #60
1c20c     A7 28 02 FB | 	rdlong	local02, fp
1c210     18 26 62 FD | 	getqx	local01
1c214     14 27 02 FD | 	qmul	local01, local02
1c218     10 4E 85 F1 | 	sub	fp, #16
1c21c     A7 28 02 FB | 	rdlong	local02, fp
1c220     18 26 62 FD | 	getqx	local01
1c224     13 2B 02 F1 | 	add	local03, local01
1c228     15 29 02 FD | 	qmul	local02, local03
1c22c     04 4E 05 F1 | 	add	fp, #4
1c230                 | ' 
1c230                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1c230                 | ' select case arrtype
1c230     18 2A 62 FD | 	getqx	local03
1c234     15 2D 02 F1 | 	add	local04, local03
1c238     A7 2C 62 FC | 	wrlong	local04, fp
1c23c     08 4E 85 F1 | 	sub	fp, #8
1c240     A7 2E 02 FB | 	rdlong	local05, fp
1c244     28 4E 85 F1 | 	sub	fp, #40
1c248     00 2F 86 F1 | 	sub	local05, #256
1c24c     0C 2E 26 F3 | 	fle	local05, #12
1c250     30 2E 62 FD | 	jmprel	local05
1c254                 | LR__2248
1c254     30 00 90 FD | 	jmp	#LR__2249
1c258     58 00 90 FD | 	jmp	#LR__2250
1c25c     6C 00 90 FD | 	jmp	#LR__2251
1c260     80 00 90 FD | 	jmp	#LR__2252
1c264     B0 00 90 FD | 	jmp	#LR__2253
1c268     E0 00 90 FD | 	jmp	#LR__2254
1c26c     F4 00 90 FD | 	jmp	#LR__2255
1c270     08 01 90 FD | 	jmp	#LR__2256
1c274     1C 01 90 FD | 	jmp	#LR__2257
1c278     30 01 90 FD | 	jmp	#LR__2258
1c27c     44 01 90 FD | 	jmp	#LR__2259
1c280     58 01 90 FD | 	jmp	#LR__2260
1c284     6C 01 90 FD | 	jmp	#LR__2261
1c288                 | LR__2249
1c288     A7 12 02 F6 | 	mov	arg01, fp
1c28c     30 4E 05 F1 | 	add	fp, #48
1c290     A7 14 02 FB | 	rdlong	arg02, fp
1c294     30 4E 85 F1 | 	sub	fp, #48
1c298     0C 16 06 F6 | 	mov	arg03, #12
1c29c     0B 00 00 FF 
1c2a0     CC E4 05 F1 | 	add	objptr, ##5836
1c2a4     AC 90 B0 FD | 	call	#_psram_spin2_write
1c2a8     0B 00 00 FF 
1c2ac     CC E4 85 F1 | 	sub	objptr, ##5836
1c2b0     4C 01 90 FD | 	jmp	#LR__2262
1c2b4                 | LR__2250
1c2b4     30 4E 05 F1 | 	add	fp, #48
1c2b8     A7 12 02 FB | 	rdlong	arg01, fp
1c2bc     30 4E 85 F1 | 	sub	fp, #48
1c2c0     A7 14 02 FB | 	rdlong	arg02, fp
1c2c4     B8 64 B0 FD | 	call	#_pspoke
1c2c8     34 01 90 FD | 	jmp	#LR__2262
1c2cc                 | LR__2251
1c2cc     30 4E 05 F1 | 	add	fp, #48
1c2d0     A7 12 02 FB | 	rdlong	arg01, fp
1c2d4     30 4E 85 F1 | 	sub	fp, #48
1c2d8     A7 14 02 FB | 	rdlong	arg02, fp
1c2dc     A0 64 B0 FD | 	call	#_pspoke
1c2e0     1C 01 90 FD | 	jmp	#LR__2262
1c2e4                 | LR__2252
1c2e4     30 4E 05 F1 | 	add	fp, #48
1c2e8     A7 12 02 FB | 	rdlong	arg01, fp
1c2ec     30 4E 85 F1 | 	sub	fp, #48
1c2f0     A7 14 02 FB | 	rdlong	arg02, fp
1c2f4     88 64 B0 FD | 	call	#_pspoke
1c2f8     30 4E 05 F1 | 	add	fp, #48
1c2fc     A7 12 02 FB | 	rdlong	arg01, fp
1c300     30 4E 85 F1 | 	sub	fp, #48
1c304     01 12 06 F1 | 	add	arg01, #1
1c308     A7 14 02 FB | 	rdlong	arg02, fp
1c30c     08 14 46 F0 | 	shr	arg02, #8
1c310     6C 64 B0 FD | 	call	#_pspoke
1c314     E8 00 90 FD | 	jmp	#LR__2262
1c318                 | LR__2253
1c318     30 4E 05 F1 | 	add	fp, #48
1c31c     A7 12 02 FB | 	rdlong	arg01, fp
1c320     30 4E 85 F1 | 	sub	fp, #48
1c324     A7 14 02 FB | 	rdlong	arg02, fp
1c328     54 64 B0 FD | 	call	#_pspoke
1c32c     30 4E 05 F1 | 	add	fp, #48
1c330     A7 12 02 FB | 	rdlong	arg01, fp
1c334     30 4E 85 F1 | 	sub	fp, #48
1c338     01 12 06 F1 | 	add	arg01, #1
1c33c     A7 14 02 FB | 	rdlong	arg02, fp
1c340     08 14 46 F0 | 	shr	arg02, #8
1c344     38 64 B0 FD | 	call	#_pspoke
1c348     B4 00 90 FD | 	jmp	#LR__2262
1c34c                 | LR__2254
1c34c     30 4E 05 F1 | 	add	fp, #48
1c350     A7 12 02 FB | 	rdlong	arg01, fp
1c354     30 4E 85 F1 | 	sub	fp, #48
1c358     A7 14 02 FB | 	rdlong	arg02, fp
1c35c     90 63 B0 FD | 	call	#_pslpoke
1c360     9C 00 90 FD | 	jmp	#LR__2262
1c364                 | LR__2255
1c364     30 4E 05 F1 | 	add	fp, #48
1c368     A7 12 02 FB | 	rdlong	arg01, fp
1c36c     30 4E 85 F1 | 	sub	fp, #48
1c370     A7 14 02 FB | 	rdlong	arg02, fp
1c374     78 63 B0 FD | 	call	#_pslpoke
1c378     84 00 90 FD | 	jmp	#LR__2262
1c37c                 | LR__2256
1c37c     30 4E 05 F1 | 	add	fp, #48
1c380     A7 12 02 FB | 	rdlong	arg01, fp
1c384     30 4E 85 F1 | 	sub	fp, #48
1c388     A7 14 02 FB | 	rdlong	arg02, fp
1c38c     60 63 B0 FD | 	call	#_pslpoke
1c390     6C 00 90 FD | 	jmp	#LR__2262
1c394                 | LR__2257
1c394     30 4E 05 F1 | 	add	fp, #48
1c398     A7 12 02 FB | 	rdlong	arg01, fp
1c39c     30 4E 85 F1 | 	sub	fp, #48
1c3a0     A7 14 02 FB | 	rdlong	arg02, fp
1c3a4     48 63 B0 FD | 	call	#_pslpoke
1c3a8     54 00 90 FD | 	jmp	#LR__2262
1c3ac                 | LR__2258
1c3ac     30 4E 05 F1 | 	add	fp, #48
1c3b0     A7 12 02 FB | 	rdlong	arg01, fp
1c3b4     30 4E 85 F1 | 	sub	fp, #48
1c3b8     A7 14 02 FB | 	rdlong	arg02, fp
1c3bc     30 63 B0 FD | 	call	#_pslpoke
1c3c0     3C 00 90 FD | 	jmp	#LR__2262
1c3c4                 | LR__2259
1c3c4     30 4E 05 F1 | 	add	fp, #48
1c3c8     A7 12 02 FB | 	rdlong	arg01, fp
1c3cc     30 4E 85 F1 | 	sub	fp, #48
1c3d0     A7 14 02 FB | 	rdlong	arg02, fp
1c3d4     18 63 B0 FD | 	call	#_pslpoke
1c3d8     24 00 90 FD | 	jmp	#LR__2262
1c3dc                 | LR__2260
1c3dc     30 4E 05 F1 | 	add	fp, #48
1c3e0     A7 12 02 FB | 	rdlong	arg01, fp
1c3e4     30 4E 85 F1 | 	sub	fp, #48
1c3e8     A7 14 02 FB | 	rdlong	arg02, fp
1c3ec     00 63 B0 FD | 	call	#_pslpoke
1c3f0     0C 00 90 FD | 	jmp	#LR__2262
1c3f4                 | LR__2261
1c3f4     32 12 06 F6 | 	mov	arg01, #50
1c3f8     00 14 06 F6 | 	mov	arg02, #0
1c3fc     50 61 B0 FD | 	call	#_printerror
1c400                 | LR__2262
1c400                 | LR__2263
1c400     A7 F0 03 F6 | 	mov	ptra, fp
1c404     B2 00 A0 FD | 	call	#popregs_
1c408                 | _do_assign_ret
1c408     2D 00 64 FD | 	ret
1c40c                 | 
1c40c                 | ' 
1c40c                 | ' 
1c40c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1c40c                 | ' 
1c40c                 | ' sub do_getvar
1c40c                 | _do_getvar
1c40c     04 4A 05 F6 | 	mov	COUNT_, #4
1c410     A8 00 A0 FD | 	call	#pushregs_
1c414     3C F0 07 F1 | 	add	ptra, #60
1c418                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c418     4A 00 00 FF 
1c41c     80 E4 05 F1 | 	add	objptr, ##38016
1c420     F2 26 02 FB | 	rdlong	local01, objptr
1c424     13 17 02 F6 | 	mov	arg03, local01
1c428     01 16 66 F0 | 	shl	arg03, #1
1c42c     13 17 02 F1 | 	add	arg03, local01
1c430     02 16 66 F0 | 	shl	arg03, #2
1c434     03 00 00 FF 
1c438     04 E4 85 F1 | 	sub	objptr, ##1540
1c43c     F2 16 02 F1 | 	add	arg03, objptr
1c440     04 16 06 F1 | 	add	arg03, #4
1c444     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1c448     47 00 00 FF 
1c44c     7C E4 85 F1 | 	sub	objptr, ##36476
1c450     C4 00 90 5D |  if_ne	jmp	#LR__2271
1c454     4A 00 00 FF 
1c458     80 E4 05 F1 | 	add	objptr, ##38016
1c45c     F2 26 02 FB | 	rdlong	local01, objptr
1c460     13 13 02 F6 | 	mov	arg01, local01
1c464     01 12 66 F0 | 	shl	arg01, #1
1c468     13 13 02 F1 | 	add	arg01, local01
1c46c     02 12 66 F0 | 	shl	arg01, #2
1c470     03 00 00 FF 
1c474     04 E4 85 F1 | 	sub	objptr, ##1540
1c478     F2 12 02 F1 | 	add	arg01, objptr
1c47c     09 27 02 FB | 	rdlong	local01, arg01
1c480     04 26 66 F0 | 	shl	local01, #4
1c484     32 00 00 FF 
1c488     84 E4 85 F1 | 	sub	objptr, ##25732
1c48c     F2 26 02 F1 | 	add	local01, objptr
1c490     04 26 06 F1 | 	add	local01, #4
1c494     13 13 02 FB | 	rdlong	arg01, local01
1c498     04 26 06 F1 | 	add	local01, #4
1c49c     13 27 02 FB | 	rdlong	local01, local01
1c4a0     A7 12 62 FC | 	wrlong	arg01, fp
1c4a4     04 4E 05 F1 | 	add	fp, #4
1c4a8     A7 26 62 FC | 	wrlong	local01, fp
1c4ac     35 00 00 FF 
1c4b0     88 E4 05 F1 | 	add	objptr, ##27272
1c4b4     F2 26 02 FB | 	rdlong	local01, objptr
1c4b8     13 13 02 F6 | 	mov	arg01, local01
1c4bc     01 12 66 F0 | 	shl	arg01, #1
1c4c0     13 13 02 F1 | 	add	arg01, local01
1c4c4     02 12 66 F0 | 	shl	arg01, #2
1c4c8     03 00 00 FF 
1c4cc     04 E4 85 F1 | 	sub	objptr, ##1540
1c4d0     F2 12 02 F1 | 	add	arg01, objptr
1c4d4     09 27 02 FB | 	rdlong	local01, arg01
1c4d8     04 26 66 F0 | 	shl	local01, #4
1c4dc     32 00 00 FF 
1c4e0     84 E4 85 F1 | 	sub	objptr, ##25732
1c4e4     F2 26 02 F1 | 	add	local01, objptr
1c4e8     0C 26 06 F1 | 	add	local01, #12
1c4ec     13 27 02 FB | 	rdlong	local01, local01
1c4f0     04 4E 05 F1 | 	add	fp, #4
1c4f4     A7 26 62 FC | 	wrlong	local01, fp
1c4f8                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1c4f8                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1c4f8                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1c4f8     08 4E 85 F1 | 	sub	fp, #8
1c4fc     00 27 16 F2 | 	cmp	local01, #256 wc
1c500     14 00 00 FF 
1c504     F8 E5 85 F1 | 	sub	objptr, ##10744
1c508     0C 00 90 3D |  if_ae	jmp	#LR__2270
1c50c     A7 12 02 F6 | 	mov	arg01, fp
1c510     64 0E BF FD | 	call	#_push
1c514     A0 04 90 FD | 	jmp	#LR__2292
1c518                 | LR__2270
1c518                 | LR__2271
1c518     4A 00 00 FF 
1c51c     80 E4 05 F1 | 	add	objptr, ##38016
1c520     F2 16 02 FB | 	rdlong	arg03, objptr
1c524     0B 15 02 F6 | 	mov	arg02, arg03
1c528     01 14 66 F0 | 	shl	arg02, #1
1c52c     0B 15 02 F1 | 	add	arg02, arg03
1c530     02 14 66 F0 | 	shl	arg02, #2
1c534     03 00 00 FF 
1c538     04 E4 85 F1 | 	sub	objptr, ##1540
1c53c     F2 14 02 F1 | 	add	arg02, objptr
1c540     0A 17 02 FB | 	rdlong	arg03, arg02
1c544     04 16 66 F0 | 	shl	arg03, #4
1c548     32 00 00 FF 
1c54c     84 E4 85 F1 | 	sub	objptr, ##25732
1c550     F2 16 02 F1 | 	add	arg03, objptr
1c554     04 16 06 F1 | 	add	arg03, #4
1c558     0B 13 02 FB | 	rdlong	arg01, arg03
1c55c     0C 4E 05 F1 | 	add	fp, #12
1c560     A7 12 62 FC | 	wrlong	arg01, fp
1c564     0C 4E 85 F1 | 	sub	fp, #12
1c568     14 00 00 FF 
1c56c     F8 E5 85 F1 | 	sub	objptr, ##10744
1c570     AC 62 B0 FD | 	call	#_pslpeek
1c574     FD FA 31 F9 | 	getword	result1, result1, #0
1c578     10 4E 05 F1 | 	add	fp, #16
1c57c     A7 FA 61 FC | 	wrlong	result1, fp
1c580     4A 00 00 FF 
1c584     80 E4 05 F1 | 	add	objptr, ##38016
1c588     F2 16 02 FB | 	rdlong	arg03, objptr
1c58c     0B 15 02 F6 | 	mov	arg02, arg03
1c590     01 14 66 F0 | 	shl	arg02, #1
1c594     0B 15 02 F1 | 	add	arg02, arg03
1c598     02 14 66 F0 | 	shl	arg02, #2
1c59c     03 00 00 FF 
1c5a0     04 E4 85 F1 | 	sub	objptr, ##1540
1c5a4     F2 14 02 F1 | 	add	arg02, objptr
1c5a8     04 14 06 F1 | 	add	arg02, #4
1c5ac     0A 17 02 FB | 	rdlong	arg03, arg02
1c5b0     04 4E 05 F1 | 	add	fp, #4
1c5b4     A7 16 62 FC | 	wrlong	arg03, fp
1c5b8     08 4E 85 F1 | 	sub	fp, #8
1c5bc     A7 12 02 FB | 	rdlong	arg01, fp
1c5c0     0C 4E 85 F1 | 	sub	fp, #12
1c5c4     02 12 06 F1 | 	add	arg01, #2
1c5c8     47 00 00 FF 
1c5cc     7C E4 85 F1 | 	sub	objptr, ##36476
1c5d0     F4 61 B0 FD | 	call	#_pspeek
1c5d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c5d8     18 4E 05 F1 | 	add	fp, #24
1c5dc     A7 FA 61 FC | 	wrlong	result1, fp
1c5e0     0C 4E 85 F1 | 	sub	fp, #12
1c5e4     A7 12 02 FB | 	rdlong	arg01, fp
1c5e8     0C 4E 85 F1 | 	sub	fp, #12
1c5ec     04 12 06 F1 | 	add	arg01, #4
1c5f0     2C 62 B0 FD | 	call	#_pslpeek
1c5f4     1C 4E 05 F1 | 	add	fp, #28
1c5f8     A7 FA 61 FC | 	wrlong	result1, fp
1c5fc     10 4E 85 F1 | 	sub	fp, #16
1c600     A7 12 02 FB | 	rdlong	arg01, fp
1c604     0C 4E 85 F1 | 	sub	fp, #12
1c608     08 12 06 F1 | 	add	arg01, #8
1c60c     10 62 B0 FD | 	call	#_pslpeek
1c610     20 4E 05 F1 | 	add	fp, #32
1c614     A7 FA 61 FC | 	wrlong	result1, fp
1c618     14 4E 85 F1 | 	sub	fp, #20
1c61c     A7 12 02 FB | 	rdlong	arg01, fp
1c620     0C 4E 85 F1 | 	sub	fp, #12
1c624     0C 12 06 F1 | 	add	arg01, #12
1c628     F4 61 B0 FD | 	call	#_pslpeek
1c62c     24 4E 05 F1 | 	add	fp, #36
1c630     A7 FA 61 FC | 	wrlong	result1, fp
1c634                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1c634                 | ' esize=pspeek(arrptr+2)
1c634                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1c634                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1c634                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1c634                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1c634     10 4E 85 F1 | 	sub	fp, #16
1c638     A7 16 02 FB | 	rdlong	arg03, fp
1c63c     14 4E 85 F1 | 	sub	fp, #20
1c640     03 16 16 F2 | 	cmp	arg03, #3 wc
1c644     38 00 90 CD |  if_b	jmp	#LR__2272
1c648     94 0C BF FD | 	call	#_pop
1c64c     FF 16 02 F6 | 	mov	arg03, result3
1c650     A7 FA 61 FC | 	wrlong	result1, fp
1c654     04 4E 05 F1 | 	add	fp, #4
1c658     A7 FC 61 FC | 	wrlong	result2, fp
1c65c     04 4E 05 F1 | 	add	fp, #4
1c660     A7 16 62 FC | 	wrlong	arg03, fp
1c664     08 4E 85 F1 | 	sub	fp, #8
1c668     A7 12 02 F6 | 	mov	arg01, fp
1c66c     54 0E BF FD | 	call	#_converttoint
1c670     30 4E 05 F1 | 	add	fp, #48
1c674     A7 FA 61 FC | 	wrlong	result1, fp
1c678     30 4E 85 F1 | 	sub	fp, #48
1c67c     0C 00 90 FD | 	jmp	#LR__2273
1c680                 | LR__2272
1c680     30 4E 05 F1 | 	add	fp, #48
1c684     A7 00 68 FC | 	wrlong	#0, fp
1c688     30 4E 85 F1 | 	sub	fp, #48
1c68c                 | LR__2273
1c68c                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1c68c     14 4E 05 F1 | 	add	fp, #20
1c690     A7 16 02 FB | 	rdlong	arg03, fp
1c694     14 4E 85 F1 | 	sub	fp, #20
1c698     02 16 16 F2 | 	cmp	arg03, #2 wc
1c69c     38 00 90 CD |  if_b	jmp	#LR__2274
1c6a0     3C 0C BF FD | 	call	#_pop
1c6a4     FF 16 02 F6 | 	mov	arg03, result3
1c6a8     A7 FA 61 FC | 	wrlong	result1, fp
1c6ac     04 4E 05 F1 | 	add	fp, #4
1c6b0     A7 FC 61 FC | 	wrlong	result2, fp
1c6b4     04 4E 05 F1 | 	add	fp, #4
1c6b8     A7 16 62 FC | 	wrlong	arg03, fp
1c6bc     08 4E 85 F1 | 	sub	fp, #8
1c6c0     A7 12 02 F6 | 	mov	arg01, fp
1c6c4     FC 0D BF FD | 	call	#_converttoint
1c6c8     2C 4E 05 F1 | 	add	fp, #44
1c6cc     A7 FA 61 FC | 	wrlong	result1, fp
1c6d0     2C 4E 85 F1 | 	sub	fp, #44
1c6d4     0C 00 90 FD | 	jmp	#LR__2275
1c6d8                 | LR__2274
1c6d8     2C 4E 05 F1 | 	add	fp, #44
1c6dc     A7 00 68 FC | 	wrlong	#0, fp
1c6e0     2C 4E 85 F1 | 	sub	fp, #44
1c6e4                 | LR__2275
1c6e4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1c6e4     14 4E 05 F1 | 	add	fp, #20
1c6e8     A7 16 02 FB | 	rdlong	arg03, fp
1c6ec     14 4E 85 F1 | 	sub	fp, #20
1c6f0     01 16 16 F2 | 	cmp	arg03, #1 wc
1c6f4     38 00 90 CD |  if_b	jmp	#LR__2276
1c6f8     E4 0B BF FD | 	call	#_pop
1c6fc     FF 16 02 F6 | 	mov	arg03, result3
1c700     A7 FA 61 FC | 	wrlong	result1, fp
1c704     04 4E 05 F1 | 	add	fp, #4
1c708     A7 FC 61 FC | 	wrlong	result2, fp
1c70c     04 4E 05 F1 | 	add	fp, #4
1c710     A7 16 62 FC | 	wrlong	arg03, fp
1c714     08 4E 85 F1 | 	sub	fp, #8
1c718     A7 12 02 F6 | 	mov	arg01, fp
1c71c     A4 0D BF FD | 	call	#_converttoint
1c720     28 4E 05 F1 | 	add	fp, #40
1c724     A7 FA 61 FC | 	wrlong	result1, fp
1c728     28 4E 85 F1 | 	sub	fp, #40
1c72c     0C 00 90 FD | 	jmp	#LR__2277
1c730                 | LR__2276
1c730     28 4E 05 F1 | 	add	fp, #40
1c734     A7 00 68 FC | 	wrlong	#0, fp
1c738     28 4E 85 F1 | 	sub	fp, #40
1c73c                 | LR__2277
1c73c     0C 4E 05 F1 | 	add	fp, #12
1c740     A7 28 02 FB | 	rdlong	local02, fp
1c744     1C 4E 05 F1 | 	add	fp, #28
1c748     A7 2A 02 FB | 	rdlong	local03, fp
1c74c     04 4E 05 F1 | 	add	fp, #4
1c750     A7 FC 01 FB | 	rdlong	result2, fp
1c754     10 4E 85 F1 | 	sub	fp, #16
1c758     A7 FE 01 FB | 	rdlong	result3, fp
1c75c     FF FC 01 FD | 	qmul	result2, result3
1c760     10 28 06 F1 | 	add	local02, #16
1c764     14 4E 05 F1 | 	add	fp, #20
1c768     A7 FC 01 FB | 	rdlong	result2, fp
1c76c     18 FA 61 FD | 	getqx	result1
1c770     FF FC 01 FD | 	qmul	result2, result3
1c774     FD 2A 02 F1 | 	add	local03, result1
1c778     10 4E 85 F1 | 	sub	fp, #16
1c77c     A7 FE 01 FB | 	rdlong	result3, fp
1c780     18 FC 61 FD | 	getqx	result2
1c784     FF FC 01 FD | 	qmul	result2, result3
1c788     08 4E 85 F1 | 	sub	fp, #8
1c78c     A7 FE 01 FB | 	rdlong	result3, fp
1c790     18 FC 61 FD | 	getqx	result2
1c794     FE 2A 02 F1 | 	add	local03, result2
1c798     FF 2A 02 FD | 	qmul	local03, result3
1c79c     1C 4E 05 F1 | 	add	fp, #28
1c7a0                 | ' 
1c7a0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1c7a0                 | ' 
1c7a0                 | ' select case vartype
1c7a0     18 FC 61 FD | 	getqx	result2
1c7a4     FE 28 02 F1 | 	add	local02, result2
1c7a8     A7 28 62 FC | 	wrlong	local02, fp
1c7ac     24 4E 85 F1 | 	sub	fp, #36
1c7b0     A7 2C 02 FB | 	rdlong	local04, fp
1c7b4     10 4E 85 F1 | 	sub	fp, #16
1c7b8     00 2D 86 F1 | 	sub	local04, #256
1c7bc     0C 2C 26 F3 | 	fle	local04, #12
1c7c0     30 2C 62 FD | 	jmprel	local04
1c7c4                 | LR__2278
1c7c4     30 00 90 FD | 	jmp	#LR__2279
1c7c8     58 00 90 FD | 	jmp	#LR__2280
1c7cc     8C 00 90 FD | 	jmp	#LR__2281
1c7d0     AC 00 90 FD | 	jmp	#LR__2282
1c7d4     E8 00 90 FD | 	jmp	#LR__2283
1c7d8     08 01 90 FD | 	jmp	#LR__2284
1c7dc     24 01 90 FD | 	jmp	#LR__2285
1c7e0     40 01 90 FD | 	jmp	#LR__2286
1c7e4     50 01 90 FD | 	jmp	#LR__2287
1c7e8     60 01 90 FD | 	jmp	#LR__2288
1c7ec     7C 01 90 FD | 	jmp	#LR__2289
1c7f0     8C 01 90 FD | 	jmp	#LR__2290
1c7f4     B8 01 90 FD | 	jmp	#LR__2291
1c7f8                 | LR__2279
1c7f8     A7 12 02 F6 | 	mov	arg01, fp
1c7fc     34 4E 05 F1 | 	add	fp, #52
1c800     A7 14 02 FB | 	rdlong	arg02, fp
1c804     34 4E 85 F1 | 	sub	fp, #52
1c808     0C 16 06 F6 | 	mov	arg03, #12
1c80c     0B 00 00 FF 
1c810     CC E4 05 F1 | 	add	objptr, ##5836
1c814     A0 8A B0 FD | 	call	#_psram_spin2_read1
1c818     0B 00 00 FF 
1c81c     CC E4 85 F1 | 	sub	objptr, ##5836
1c820     8C 01 90 FD | 	jmp	#LR__2291
1c824                 | LR__2280
1c824     08 4E 05 F1 | 	add	fp, #8
1c828     A7 38 68 FC | 	wrlong	#28, fp
1c82c     2C 4E 05 F1 | 	add	fp, #44
1c830     A7 12 02 FB | 	rdlong	arg01, fp
1c834     34 4E 85 F1 | 	sub	fp, #52
1c838     8C 5F B0 FD | 	call	#_pspeek
1c83c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c840     A7 FA 61 FC | 	wrlong	result1, fp
1c844     80 FA 15 F2 | 	cmp	result1, #128 wc
1c848     00 27 66 36 |  if_ae	neg	local01, #256
1c84c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c850     15 27 42 35 |  if_ae	or	local01, local03
1c854     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c858     54 01 90 FD | 	jmp	#LR__2291
1c85c                 | LR__2281
1c85c     08 4E 05 F1 | 	add	fp, #8
1c860     A7 3A 68 FC | 	wrlong	#29, fp
1c864     2C 4E 05 F1 | 	add	fp, #44
1c868     A7 12 02 FB | 	rdlong	arg01, fp
1c86c     34 4E 85 F1 | 	sub	fp, #52
1c870     54 5F B0 FD | 	call	#_pspeek
1c874     FD FA E1 F8 | 	getbyte	result1, result1, #0
1c878     A7 FA 61 FC | 	wrlong	result1, fp
1c87c     30 01 90 FD | 	jmp	#LR__2291
1c880                 | LR__2282
1c880     08 4E 05 F1 | 	add	fp, #8
1c884     A7 38 68 FC | 	wrlong	#28, fp
1c888     2C 4E 05 F1 | 	add	fp, #44
1c88c     A7 12 02 FB | 	rdlong	arg01, fp
1c890     34 4E 85 F1 | 	sub	fp, #52
1c894     88 5F B0 FD | 	call	#_pslpeek
1c898     FD FA 31 F9 | 	getword	result1, result1, #0
1c89c     A7 FA 61 FC | 	wrlong	result1, fp
1c8a0     40 00 00 FF 
1c8a4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1c8a8     FF 7F 00 3F 
1c8ac     00 27 06 36 |  if_ae	mov	local01, ##16776960
1c8b0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1c8b4     15 27 42 35 |  if_ae	or	local01, local03
1c8b8     A7 26 62 3C |  if_ae	wrlong	local01, fp
1c8bc     F0 00 90 FD | 	jmp	#LR__2291
1c8c0                 | LR__2283
1c8c0     08 4E 05 F1 | 	add	fp, #8
1c8c4     A7 3A 68 FC | 	wrlong	#29, fp
1c8c8     2C 4E 05 F1 | 	add	fp, #44
1c8cc     A7 12 02 FB | 	rdlong	arg01, fp
1c8d0     34 4E 85 F1 | 	sub	fp, #52
1c8d4     48 5F B0 FD | 	call	#_pslpeek
1c8d8     FD FA 31 F9 | 	getword	result1, result1, #0
1c8dc     A7 FA 61 FC | 	wrlong	result1, fp
1c8e0     CC 00 90 FD | 	jmp	#LR__2291
1c8e4                 | LR__2284
1c8e4     08 4E 05 F1 | 	add	fp, #8
1c8e8     A7 38 68 FC | 	wrlong	#28, fp
1c8ec     2C 4E 05 F1 | 	add	fp, #44
1c8f0     A7 12 02 FB | 	rdlong	arg01, fp
1c8f4     34 4E 85 F1 | 	sub	fp, #52
1c8f8     24 5F B0 FD | 	call	#_pslpeek
1c8fc     A7 FA 61 FC | 	wrlong	result1, fp
1c900     AC 00 90 FD | 	jmp	#LR__2291
1c904                 | LR__2285
1c904     08 4E 05 F1 | 	add	fp, #8
1c908     A7 3A 68 FC | 	wrlong	#29, fp
1c90c     2C 4E 05 F1 | 	add	fp, #44
1c910     A7 12 02 FB | 	rdlong	arg01, fp
1c914     34 4E 85 F1 | 	sub	fp, #52
1c918     04 5F B0 FD | 	call	#_pslpeek
1c91c     A7 FA 61 FC | 	wrlong	result1, fp
1c920     8C 00 90 FD | 	jmp	#LR__2291
1c924                 | LR__2286
1c924     08 4E 05 F1 | 	add	fp, #8
1c928     A7 FE 69 FC | 	wrlong	#255, fp
1c92c     08 4E 85 F1 | 	sub	fp, #8
1c930     A7 60 68 FC | 	wrlong	#48, fp
1c934     78 00 90 FD | 	jmp	#LR__2291
1c938                 | LR__2287
1c938     08 4E 05 F1 | 	add	fp, #8
1c93c     A7 FE 69 FC | 	wrlong	#255, fp
1c940     08 4E 85 F1 | 	sub	fp, #8
1c944     A7 60 68 FC | 	wrlong	#48, fp
1c948     64 00 90 FD | 	jmp	#LR__2291
1c94c                 | LR__2288
1c94c     08 4E 05 F1 | 	add	fp, #8
1c950     A7 3C 68 FC | 	wrlong	#30, fp
1c954     2C 4E 05 F1 | 	add	fp, #44
1c958     A7 12 02 FB | 	rdlong	arg01, fp
1c95c     34 4E 85 F1 | 	sub	fp, #52
1c960     BC 5E B0 FD | 	call	#_pslpeek
1c964     A7 FA 61 FC | 	wrlong	result1, fp
1c968     44 00 90 FD | 	jmp	#LR__2291
1c96c                 | LR__2289
1c96c     08 4E 05 F1 | 	add	fp, #8
1c970     A7 FE 69 FC | 	wrlong	#255, fp
1c974     08 4E 85 F1 | 	sub	fp, #8
1c978     A7 60 68 FC | 	wrlong	#48, fp
1c97c     30 00 90 FD | 	jmp	#LR__2291
1c980                 | LR__2290
1c980     08 4E 05 F1 | 	add	fp, #8
1c984     A7 3E 68 FC | 	wrlong	#31, fp
1c988     2C 4E 05 F1 | 	add	fp, #44
1c98c     A7 12 02 FB | 	rdlong	arg01, fp
1c990     34 4E 85 F1 | 	sub	fp, #52
1c994     88 5E B0 FD | 	call	#_pslpeek
1c998     A7 FA 61 FC | 	wrlong	result1, fp
1c99c     00 04 00 FF 
1c9a0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1c9a4     08 4E 05 31 |  if_ae	add	fp, #8
1c9a8     A7 56 68 3C |  if_ae	wrlong	#43, fp
1c9ac     08 4E 85 31 |  if_ae	sub	fp, #8
1c9b0                 | LR__2291
1c9b0     A7 12 02 F6 | 	mov	arg01, fp
1c9b4     C0 09 BF FD | 	call	#_push
1c9b8                 | LR__2292
1c9b8     A7 F0 03 F6 | 	mov	ptra, fp
1c9bc     B2 00 A0 FD | 	call	#popregs_
1c9c0                 | _do_getvar_ret
1c9c0     2D 00 64 FD | 	ret
1c9c4                 | 
1c9c4                 | ' 
1c9c4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1c9c4                 | ' 
1c9c4                 | ' sub do_getaddr
1c9c4                 | _do_getaddr
1c9c4     01 4A 05 F6 | 	mov	COUNT_, #1
1c9c8     A8 00 A0 FD | 	call	#pushregs_
1c9cc     38 F0 07 F1 | 	add	ptra, #56
1c9d0                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1c9d0                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1c9d0     4A 00 00 FF 
1c9d4     80 E4 05 F1 | 	add	objptr, ##38016
1c9d8     F2 12 02 FB | 	rdlong	arg01, objptr
1c9dc     09 FD 01 F6 | 	mov	result2, arg01
1c9e0     01 FC 65 F0 | 	shl	result2, #1
1c9e4     09 FD 01 F1 | 	add	result2, arg01
1c9e8     02 FC 65 F0 | 	shl	result2, #2
1c9ec     03 00 00 FF 
1c9f0     04 E4 85 F1 | 	sub	objptr, ##1540
1c9f4     F2 FC 01 F1 | 	add	result2, objptr
1c9f8     04 FC 05 F1 | 	add	result2, #4
1c9fc     FE FC 09 FB | 	rdlong	result2, result2 wz
1ca00     47 00 00 FF 
1ca04     7C E4 85 F1 | 	sub	objptr, ##36476
1ca08     10 01 90 5D |  if_ne	jmp	#LR__2300
1ca0c     4A 00 00 FF 
1ca10     80 E4 05 F1 | 	add	objptr, ##38016
1ca14     F2 12 02 FB | 	rdlong	arg01, objptr
1ca18     09 FD 01 F6 | 	mov	result2, arg01
1ca1c     01 FC 65 F0 | 	shl	result2, #1
1ca20     09 FD 01 F1 | 	add	result2, arg01
1ca24     02 FC 65 F0 | 	shl	result2, #2
1ca28     03 00 00 FF 
1ca2c     04 E4 85 F1 | 	sub	objptr, ##1540
1ca30     F2 FC 01 F1 | 	add	result2, objptr
1ca34     FE 12 02 FB | 	rdlong	arg01, result2
1ca38     04 12 66 F0 | 	shl	arg01, #4
1ca3c     32 00 00 FF 
1ca40     84 E4 85 F1 | 	sub	objptr, ##25732
1ca44     F2 12 02 F1 | 	add	arg01, objptr
1ca48     0C 12 06 F1 | 	add	arg01, #12
1ca4c     09 13 02 FB | 	rdlong	arg01, arg01
1ca50     08 4E 05 F1 | 	add	fp, #8
1ca54     A7 12 62 FC | 	wrlong	arg01, fp
1ca58                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ca58                 | '    if t1.result_type>=array_no_type then goto 2200
1ca58     08 4E 85 F1 | 	sub	fp, #8
1ca5c     00 13 16 F2 | 	cmp	arg01, #256 wc
1ca60     14 00 00 FF 
1ca64     F8 E5 85 F1 | 	sub	objptr, ##10744
1ca68     B0 00 90 3D |  if_ae	jmp	#LR__2301
1ca6c     4A 00 00 FF 
1ca70     80 E4 05 F1 | 	add	objptr, ##38016
1ca74     F2 12 02 FB | 	rdlong	arg01, objptr
1ca78     09 FF 01 F6 | 	mov	result3, arg01
1ca7c     01 FE 65 F0 | 	shl	result3, #1
1ca80     09 FF 01 F1 | 	add	result3, arg01
1ca84     02 FE 65 F0 | 	shl	result3, #2
1ca88     03 00 00 FF 
1ca8c     04 E4 85 F1 | 	sub	objptr, ##1540
1ca90     F2 FE 01 F1 | 	add	result3, objptr
1ca94     FF FA 01 FB | 	rdlong	result1, result3
1ca98     04 FA 65 F0 | 	shl	result1, #4
1ca9c     32 00 00 FF 
1caa0     84 E4 85 F1 | 	sub	objptr, ##25732
1caa4     F2 FA 01 F1 | 	add	result1, objptr
1caa8     04 FA 05 F1 | 	add	result1, #4
1caac     A7 FA 61 FC | 	wrlong	result1, fp
1cab0     35 00 00 FF 
1cab4     88 E4 05 F1 | 	add	objptr, ##27272
1cab8     F2 FE 01 FB | 	rdlong	result3, objptr
1cabc     FF 12 02 F6 | 	mov	arg01, result3
1cac0     01 12 66 F0 | 	shl	arg01, #1
1cac4     FF 12 02 F1 | 	add	arg01, result3
1cac8     02 12 66 F0 | 	shl	arg01, #2
1cacc     03 00 00 FF 
1cad0     04 E4 85 F1 | 	sub	objptr, ##1540
1cad4     F2 12 02 F1 | 	add	arg01, objptr
1cad8     09 13 02 FB | 	rdlong	arg01, arg01
1cadc     04 12 66 F0 | 	shl	arg01, #4
1cae0     32 00 00 FF 
1cae4     84 E4 85 F1 | 	sub	objptr, ##25732
1cae8     F2 12 02 F1 | 	add	arg01, objptr
1caec     0C 12 06 F1 | 	add	arg01, #12
1caf0     09 13 02 FB | 	rdlong	arg01, arg01
1caf4     04 4E 05 F1 | 	add	fp, #4
1caf8     A7 12 62 FC | 	wrlong	arg01, fp
1cafc     04 4E 05 F1 | 	add	fp, #4
1cb00     A7 3A 68 FC | 	wrlong	#29, fp
1cb04     08 4E 85 F1 | 	sub	fp, #8
1cb08     A7 12 02 F6 | 	mov	arg01, fp
1cb0c     14 00 00 FF 
1cb10     F8 E5 85 F1 | 	sub	objptr, ##10744
1cb14     60 08 BF FD | 	call	#_push
1cb18                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1cb18                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1cb18                 | '   t1.result_type=result_uint
1cb18                 | '   push t1 : return
1cb18     2C 03 90 FD | 	jmp	#LR__2310
1cb1c                 | LR__2300
1cb1c                 | LR__2301
1cb1c     4A 00 00 FF 
1cb20     80 E4 05 F1 | 	add	objptr, ##38016
1cb24     F2 FE 01 FB | 	rdlong	result3, objptr
1cb28     FF FC 01 F6 | 	mov	result2, result3
1cb2c     01 FC 65 F0 | 	shl	result2, #1
1cb30     FF FC 01 F1 | 	add	result2, result3
1cb34     02 FC 65 F0 | 	shl	result2, #2
1cb38     03 00 00 FF 
1cb3c     04 E4 85 F1 | 	sub	objptr, ##1540
1cb40     F2 FC 01 F1 | 	add	result2, objptr
1cb44     FE FE 01 FB | 	rdlong	result3, result2
1cb48     04 FE 65 F0 | 	shl	result3, #4
1cb4c     32 00 00 FF 
1cb50     84 E4 85 F1 | 	sub	objptr, ##25732
1cb54     F2 FE 01 F1 | 	add	result3, objptr
1cb58     04 FE 05 F1 | 	add	result3, #4
1cb5c     FF FE 01 FB | 	rdlong	result3, result3
1cb60     0C 4E 05 F1 | 	add	fp, #12
1cb64     A7 FE 61 FC | 	wrlong	result3, fp
1cb68     35 00 00 FF 
1cb6c     88 E4 05 F1 | 	add	objptr, ##27272
1cb70     F2 FE 01 FB | 	rdlong	result3, objptr
1cb74     FF 12 02 F6 | 	mov	arg01, result3
1cb78     01 12 66 F0 | 	shl	arg01, #1
1cb7c     FF 12 02 F1 | 	add	arg01, result3
1cb80     02 12 66 F0 | 	shl	arg01, #2
1cb84     03 00 00 FF 
1cb88     04 E4 85 F1 | 	sub	objptr, ##1540
1cb8c     F2 12 02 F1 | 	add	arg01, objptr
1cb90     09 13 02 FB | 	rdlong	arg01, arg01
1cb94     04 12 66 F0 | 	shl	arg01, #4
1cb98     32 00 00 FF 
1cb9c     84 E4 85 F1 | 	sub	objptr, ##25732
1cba0     F2 12 02 F1 | 	add	arg01, objptr
1cba4     0C 12 06 F1 | 	add	arg01, #12
1cba8     09 13 02 FB | 	rdlong	arg01, arg01
1cbac     08 4E 85 F1 | 	sub	fp, #8
1cbb0     A7 12 62 FC | 	wrlong	arg01, fp
1cbb4     08 4E 05 F1 | 	add	fp, #8
1cbb8     A7 12 02 FB | 	rdlong	arg01, fp
1cbbc     0C 4E 85 F1 | 	sub	fp, #12
1cbc0     14 00 00 FF 
1cbc4     F8 E5 85 F1 | 	sub	objptr, ##10744
1cbc8     54 5C B0 FD | 	call	#_pslpeek
1cbcc     FD FA 31 F9 | 	getword	result1, result1, #0
1cbd0     10 4E 05 F1 | 	add	fp, #16
1cbd4     A7 FA 61 FC | 	wrlong	result1, fp
1cbd8     4A 00 00 FF 
1cbdc     80 E4 05 F1 | 	add	objptr, ##38016
1cbe0     F2 FE 01 FB | 	rdlong	result3, objptr
1cbe4     FF 12 02 F6 | 	mov	arg01, result3
1cbe8     01 12 66 F0 | 	shl	arg01, #1
1cbec     FF 12 02 F1 | 	add	arg01, result3
1cbf0     02 12 66 F0 | 	shl	arg01, #2
1cbf4     03 00 00 FF 
1cbf8     04 E4 85 F1 | 	sub	objptr, ##1540
1cbfc     F2 12 02 F1 | 	add	arg01, objptr
1cc00     04 12 06 F1 | 	add	arg01, #4
1cc04     09 13 02 FB | 	rdlong	arg01, arg01
1cc08     04 4E 05 F1 | 	add	fp, #4
1cc0c     A7 12 62 FC | 	wrlong	arg01, fp
1cc10     08 4E 85 F1 | 	sub	fp, #8
1cc14     A7 12 02 FB | 	rdlong	arg01, fp
1cc18     0C 4E 85 F1 | 	sub	fp, #12
1cc1c     02 12 06 F1 | 	add	arg01, #2
1cc20     47 00 00 FF 
1cc24     7C E4 85 F1 | 	sub	objptr, ##36476
1cc28     9C 5B B0 FD | 	call	#_pspeek
1cc2c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cc30     18 4E 05 F1 | 	add	fp, #24
1cc34     A7 FA 61 FC | 	wrlong	result1, fp
1cc38     0C 4E 85 F1 | 	sub	fp, #12
1cc3c     A7 12 02 FB | 	rdlong	arg01, fp
1cc40     0C 4E 85 F1 | 	sub	fp, #12
1cc44     04 12 06 F1 | 	add	arg01, #4
1cc48     D4 5B B0 FD | 	call	#_pslpeek
1cc4c     1C 4E 05 F1 | 	add	fp, #28
1cc50     A7 FA 61 FC | 	wrlong	result1, fp
1cc54     10 4E 85 F1 | 	sub	fp, #16
1cc58     A7 12 02 FB | 	rdlong	arg01, fp
1cc5c     0C 4E 85 F1 | 	sub	fp, #12
1cc60     08 12 06 F1 | 	add	arg01, #8
1cc64     B8 5B B0 FD | 	call	#_pslpeek
1cc68     20 4E 05 F1 | 	add	fp, #32
1cc6c     A7 FA 61 FC | 	wrlong	result1, fp
1cc70     14 4E 85 F1 | 	sub	fp, #20
1cc74     A7 12 02 FB | 	rdlong	arg01, fp
1cc78     0C 4E 85 F1 | 	sub	fp, #12
1cc7c     0C 12 06 F1 | 	add	arg01, #12
1cc80     9C 5B B0 FD | 	call	#_pslpeek
1cc84     24 4E 05 F1 | 	add	fp, #36
1cc88     A7 FA 61 FC | 	wrlong	result1, fp
1cc8c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cc8c                 | ' esize=pspeek(arrptr+2)
1cc8c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cc8c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cc8c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cc8c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cc8c     10 4E 85 F1 | 	sub	fp, #16
1cc90     A7 12 02 FB | 	rdlong	arg01, fp
1cc94     14 4E 85 F1 | 	sub	fp, #20
1cc98     03 12 16 F2 | 	cmp	arg01, #3 wc
1cc9c     34 00 90 CD |  if_b	jmp	#LR__2302
1cca0     3C 06 BF FD | 	call	#_pop
1cca4     A7 FA 61 FC | 	wrlong	result1, fp
1cca8     04 4E 05 F1 | 	add	fp, #4
1ccac     A7 FC 61 FC | 	wrlong	result2, fp
1ccb0     04 4E 05 F1 | 	add	fp, #4
1ccb4     A7 FE 61 FC | 	wrlong	result3, fp
1ccb8     08 4E 85 F1 | 	sub	fp, #8
1ccbc     A7 12 02 F6 | 	mov	arg01, fp
1ccc0     00 08 BF FD | 	call	#_converttoint
1ccc4     30 4E 05 F1 | 	add	fp, #48
1ccc8     A7 FA 61 FC | 	wrlong	result1, fp
1cccc     30 4E 85 F1 | 	sub	fp, #48
1ccd0     0C 00 90 FD | 	jmp	#LR__2303
1ccd4                 | LR__2302
1ccd4     30 4E 05 F1 | 	add	fp, #48
1ccd8     A7 00 68 FC | 	wrlong	#0, fp
1ccdc     30 4E 85 F1 | 	sub	fp, #48
1cce0                 | LR__2303
1cce0                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1cce0     14 4E 05 F1 | 	add	fp, #20
1cce4     A7 12 02 FB | 	rdlong	arg01, fp
1cce8     14 4E 85 F1 | 	sub	fp, #20
1ccec     02 12 16 F2 | 	cmp	arg01, #2 wc
1ccf0     34 00 90 CD |  if_b	jmp	#LR__2304
1ccf4     E8 05 BF FD | 	call	#_pop
1ccf8     A7 FA 61 FC | 	wrlong	result1, fp
1ccfc     04 4E 05 F1 | 	add	fp, #4
1cd00     A7 FC 61 FC | 	wrlong	result2, fp
1cd04     04 4E 05 F1 | 	add	fp, #4
1cd08     A7 FE 61 FC | 	wrlong	result3, fp
1cd0c     08 4E 85 F1 | 	sub	fp, #8
1cd10     A7 12 02 F6 | 	mov	arg01, fp
1cd14     AC 07 BF FD | 	call	#_converttoint
1cd18     2C 4E 05 F1 | 	add	fp, #44
1cd1c     A7 FA 61 FC | 	wrlong	result1, fp
1cd20     2C 4E 85 F1 | 	sub	fp, #44
1cd24     0C 00 90 FD | 	jmp	#LR__2305
1cd28                 | LR__2304
1cd28     2C 4E 05 F1 | 	add	fp, #44
1cd2c     A7 00 68 FC | 	wrlong	#0, fp
1cd30     2C 4E 85 F1 | 	sub	fp, #44
1cd34                 | LR__2305
1cd34                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1cd34     14 4E 05 F1 | 	add	fp, #20
1cd38     A7 12 02 FB | 	rdlong	arg01, fp
1cd3c     14 4E 85 F1 | 	sub	fp, #20
1cd40     01 12 16 F2 | 	cmp	arg01, #1 wc
1cd44     34 00 90 CD |  if_b	jmp	#LR__2306
1cd48     94 05 BF FD | 	call	#_pop
1cd4c     A7 FA 61 FC | 	wrlong	result1, fp
1cd50     04 4E 05 F1 | 	add	fp, #4
1cd54     A7 FC 61 FC | 	wrlong	result2, fp
1cd58     04 4E 05 F1 | 	add	fp, #4
1cd5c     A7 FE 61 FC | 	wrlong	result3, fp
1cd60     08 4E 85 F1 | 	sub	fp, #8
1cd64     A7 12 02 F6 | 	mov	arg01, fp
1cd68     58 07 BF FD | 	call	#_converttoint
1cd6c     28 4E 05 F1 | 	add	fp, #40
1cd70     A7 FA 61 FC | 	wrlong	result1, fp
1cd74     28 4E 85 F1 | 	sub	fp, #40
1cd78     0C 00 90 FD | 	jmp	#LR__2307
1cd7c                 | LR__2306
1cd7c     28 4E 05 F1 | 	add	fp, #40
1cd80     A7 00 68 FC | 	wrlong	#0, fp
1cd84     28 4E 85 F1 | 	sub	fp, #40
1cd88                 | LR__2307
1cd88                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1cd88                 | ' if numpar>0 then
1cd88     14 4E 05 F1 | 	add	fp, #20
1cd8c     A7 FE 01 FB | 	rdlong	result3, fp
1cd90     14 4E 85 F1 | 	sub	fp, #20
1cd94     01 FE 15 F2 | 	cmp	result3, #1 wc
1cd98     8C 00 90 CD |  if_b	jmp	#LR__2308
1cd9c     0C 4E 05 F1 | 	add	fp, #12
1cda0     A7 FC 01 FB | 	rdlong	result2, fp
1cda4     1C 4E 05 F1 | 	add	fp, #28
1cda8     A7 FE 01 FB | 	rdlong	result3, fp
1cdac     04 4E 05 F1 | 	add	fp, #4
1cdb0     A7 12 02 FB | 	rdlong	arg01, fp
1cdb4     10 4E 85 F1 | 	sub	fp, #16
1cdb8     A7 FA 01 FB | 	rdlong	result1, fp
1cdbc     FD 12 02 FD | 	qmul	arg01, result1
1cdc0     10 FC 05 F1 | 	add	result2, #16
1cdc4     14 4E 05 F1 | 	add	fp, #20
1cdc8     A7 26 02 FB | 	rdlong	local01, fp
1cdcc     18 12 62 FD | 	getqx	arg01
1cdd0     FD 26 02 FD | 	qmul	local01, result1
1cdd4     09 FF 01 F1 | 	add	result3, arg01
1cdd8     10 4E 85 F1 | 	sub	fp, #16
1cddc     A7 26 02 FB | 	rdlong	local01, fp
1cde0     18 FA 61 FD | 	getqx	result1
1cde4     13 FB 01 FD | 	qmul	result1, local01
1cde8     08 4E 85 F1 | 	sub	fp, #8
1cdec     A7 26 02 FB | 	rdlong	local01, fp
1cdf0     18 FA 61 FD | 	getqx	result1
1cdf4     FD FE 01 F1 | 	add	result3, result1
1cdf8     13 FF 01 FD | 	qmul	result3, local01
1cdfc     1C 4E 05 F1 | 	add	fp, #28
1ce00     18 26 62 FD | 	getqx	local01
1ce04     13 FD 01 F1 | 	add	result2, local01
1ce08     A7 FC 61 FC | 	wrlong	result2, fp
1ce0c     2C 4E 85 F1 | 	sub	fp, #44
1ce10     A7 3A 68 FC | 	wrlong	#29, fp
1ce14     2C 4E 05 F1 | 	add	fp, #44
1ce18     A7 26 02 FB | 	rdlong	local01, fp
1ce1c     34 4E 85 F1 | 	sub	fp, #52
1ce20     A7 26 62 FC | 	wrlong	local01, fp
1ce24     18 00 90 FD | 	jmp	#LR__2309
1ce28                 | LR__2308
1ce28     08 4E 05 F1 | 	add	fp, #8
1ce2c     A7 3A 68 FC | 	wrlong	#29, fp
1ce30     04 4E 05 F1 | 	add	fp, #4
1ce34     A7 26 02 FB | 	rdlong	local01, fp
1ce38     0C 4E 85 F1 | 	sub	fp, #12
1ce3c     A7 26 62 FC | 	wrlong	local01, fp
1ce40                 | LR__2309
1ce40     A7 12 02 F6 | 	mov	arg01, fp
1ce44     30 05 BF FD | 	call	#_push
1ce48                 | LR__2310
1ce48     A7 F0 03 F6 | 	mov	ptra, fp
1ce4c     B2 00 A0 FD | 	call	#popregs_
1ce50                 | _do_getaddr_ret
1ce50     2D 00 64 FD | 	ret
1ce54                 | 
1ce54                 | ' 
1ce54                 | ' 
1ce54                 | ' 
1ce54                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ce54                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1ce54                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1ce54                 | ' 
1ce54                 | ' '--------------------------------- AND 
1ce54                 | ' 
1ce54                 | ' sub do_and 
1ce54                 | _do_and
1ce54     03 4A 05 F6 | 	mov	COUNT_, #3
1ce58     A8 00 A0 FD | 	call	#pushregs_
1ce5c     18 F0 07 F1 | 	add	ptra, #24
1ce60     7C 04 BF FD | 	call	#_pop
1ce64     FD 12 02 F6 | 	mov	arg01, result1
1ce68     FE 26 02 F6 | 	mov	local01, result2
1ce6c     FF 28 02 F6 | 	mov	local02, result3
1ce70     0C 4E 05 F1 | 	add	fp, #12
1ce74     A7 12 62 FC | 	wrlong	arg01, fp
1ce78     04 4E 05 F1 | 	add	fp, #4
1ce7c     A7 26 62 FC | 	wrlong	local01, fp
1ce80     04 4E 05 F1 | 	add	fp, #4
1ce84     A7 28 62 FC | 	wrlong	local02, fp
1ce88     14 4E 85 F1 | 	sub	fp, #20
1ce8c     50 04 BF FD | 	call	#_pop
1ce90     FF 2A 02 F6 | 	mov	local03, result3
1ce94     A7 FA 61 FC | 	wrlong	result1, fp
1ce98     04 4E 05 F1 | 	add	fp, #4
1ce9c     A7 FC 61 FC | 	wrlong	result2, fp
1cea0     04 4E 05 F1 | 	add	fp, #4
1cea4     A7 2A 62 FC | 	wrlong	local03, fp
1cea8                 | ' 
1cea8                 | ' t2=pop()
1cea8                 | ' t1=pop()
1cea8                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1cea8     08 4E 85 F1 | 	sub	fp, #8
1ceac     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ceb0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ceb4     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ceb8     08 4E 05 A1 |  if_e	add	fp, #8
1cebc     A7 3A 68 AC |  if_e	wrlong	#29, fp
1cec0     08 4E 85 A1 |  if_e	sub	fp, #8
1cec4                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1cec4     14 4E 05 F1 | 	add	fp, #20
1cec8     A7 2A 02 FB | 	rdlong	local03, fp
1cecc     14 4E 85 F1 | 	sub	fp, #20
1ced0     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ced4     18 00 90 5D |  if_ne	jmp	#LR__2320
1ced8     0C 4E 05 F1 | 	add	fp, #12
1cedc     A7 2A 02 FB | 	rdlong	local03, fp
1cee0     A7 2A 62 FC | 	wrlong	local03, fp
1cee4     08 4E 05 F1 | 	add	fp, #8
1cee8     A7 3A 68 FC | 	wrlong	#29, fp
1ceec     14 4E 85 F1 | 	sub	fp, #20
1cef0                 | LR__2320
1cef0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1cef0     08 4E 05 F1 | 	add	fp, #8
1cef4     A7 2A 02 FB | 	rdlong	local03, fp
1cef8     08 4E 85 F1 | 	sub	fp, #8
1cefc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cf00     14 4E 05 51 |  if_ne	add	fp, #20
1cf04     A7 28 02 5B |  if_ne	rdlong	local02, fp
1cf08     14 4E 85 51 |  if_ne	sub	fp, #20
1cf0c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1cf10     08 4E 05 51 |  if_ne	add	fp, #8
1cf14     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1cf18     08 4E 85 51 |  if_ne	sub	fp, #8
1cf1c     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1cf20     14 4E 05 51 |  if_ne	add	fp, #20
1cf24     14 4E 85 51 |  if_ne	sub	fp, #20
1cf28     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1cf2c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1cf30     08 4E 05 A1 |  if_e	add	fp, #8
1cf34     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cf38     08 4E 85 A1 |  if_e	sub	fp, #8
1cf3c     18 00 90 AD |  if_e	jmp	#LR__2321
1cf40     A7 2A 02 FB | 	rdlong	local03, fp
1cf44     0C 4E 05 F1 | 	add	fp, #12
1cf48     A7 26 02 FB | 	rdlong	local01, fp
1cf4c     0C 4E 85 F1 | 	sub	fp, #12
1cf50     13 2B 02 F5 | 	and	local03, local01
1cf54     A7 2A 62 FC | 	wrlong	local03, fp
1cf58                 | LR__2321
1cf58     A7 12 02 F6 | 	mov	arg01, fp
1cf5c     18 04 BF FD | 	call	#_push
1cf60     A7 F0 03 F6 | 	mov	ptra, fp
1cf64     B2 00 A0 FD | 	call	#popregs_
1cf68                 | _do_and_ret
1cf68     2D 00 64 FD | 	ret
1cf6c                 | 
1cf6c                 | ' 
1cf6c                 | ' '--------------------------------- DIV (integer divide)
1cf6c                 | ' 
1cf6c                 | ' sub do_div 
1cf6c                 | _do_div
1cf6c     01 4A 05 F6 | 	mov	COUNT_, #1
1cf70     A8 00 A0 FD | 	call	#pushregs_
1cf74     18 F0 07 F1 | 	add	ptra, #24
1cf78     64 03 BF FD | 	call	#_pop
1cf7c     FD 8A 02 F6 | 	mov	muldivb_, result1
1cf80     FE 88 02 F6 | 	mov	muldiva_, result2
1cf84     FF 26 02 F6 | 	mov	local01, result3
1cf88     0C 4E 05 F1 | 	add	fp, #12
1cf8c     A7 8A 62 FC | 	wrlong	muldivb_, fp
1cf90     04 4E 05 F1 | 	add	fp, #4
1cf94     A7 88 62 FC | 	wrlong	muldiva_, fp
1cf98     04 4E 05 F1 | 	add	fp, #4
1cf9c     A7 26 62 FC | 	wrlong	local01, fp
1cfa0     14 4E 85 F1 | 	sub	fp, #20
1cfa4     38 03 BF FD | 	call	#_pop
1cfa8     A7 FA 61 FC | 	wrlong	result1, fp
1cfac     04 4E 05 F1 | 	add	fp, #4
1cfb0     A7 FC 61 FC | 	wrlong	result2, fp
1cfb4     04 4E 05 F1 | 	add	fp, #4
1cfb8     A7 FE 61 FC | 	wrlong	result3, fp
1cfbc                 | ' 
1cfbc                 | ' t2=pop()
1cfbc                 | ' t1=pop()
1cfbc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1cfbc     08 4E 85 F1 | 	sub	fp, #8
1cfc0     1F FE 0D F2 | 	cmp	result3, #31 wz
1cfc4     14 4E 05 51 |  if_ne	add	fp, #20
1cfc8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1cfcc     14 4E 85 51 |  if_ne	sub	fp, #20
1cfd0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1cfd4     A7 14 68 AC |  if_e	wrlong	#10, fp
1cfd8     08 4E 05 A1 |  if_e	add	fp, #8
1cfdc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cfe0     08 4E 85 A1 |  if_e	sub	fp, #8
1cfe4     90 01 90 AD |  if_e	jmp	#LR__2336
1cfe8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1cfe8     08 4E 05 F1 | 	add	fp, #8
1cfec     A7 8A 02 FB | 	rdlong	muldivb_, fp
1cff0     08 4E 85 F1 | 	sub	fp, #8
1cff4     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1cff8     1C 00 90 5D |  if_ne	jmp	#LR__2330
1cffc     08 4E 05 F1 | 	add	fp, #8
1d000     A7 38 68 FC | 	wrlong	#28, fp
1d004     08 4E 85 F1 | 	sub	fp, #8
1d008     A7 12 02 FB | 	rdlong	arg01, fp
1d00c     00 14 06 F6 | 	mov	arg02, #0
1d010     70 C2 B0 FD | 	call	#__system___float_tointeger
1d014     A7 FA 61 FC | 	wrlong	result1, fp
1d018                 | LR__2330
1d018                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d018     14 4E 05 F1 | 	add	fp, #20
1d01c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d020     14 4E 85 F1 | 	sub	fp, #20
1d024     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1d028     28 00 90 5D |  if_ne	jmp	#LR__2331
1d02c     14 4E 05 F1 | 	add	fp, #20
1d030     A7 38 68 FC | 	wrlong	#28, fp
1d034     08 4E 85 F1 | 	sub	fp, #8
1d038     A7 12 02 FB | 	rdlong	arg01, fp
1d03c     0C 4E 85 F1 | 	sub	fp, #12
1d040     00 14 06 F6 | 	mov	arg02, #0
1d044     3C C2 B0 FD | 	call	#__system___float_tointeger
1d048     0C 4E 05 F1 | 	add	fp, #12
1d04c     A7 FA 61 FC | 	wrlong	result1, fp
1d050     0C 4E 85 F1 | 	sub	fp, #12
1d054                 | LR__2331
1d054                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1d054     08 4E 05 F1 | 	add	fp, #8
1d058     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d05c     08 4E 85 F1 | 	sub	fp, #8
1d060     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d064     14 4E 05 A1 |  if_e	add	fp, #20
1d068     A7 26 02 AB |  if_e	rdlong	local01, fp
1d06c     14 4E 85 A1 |  if_e	sub	fp, #20
1d070     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d074     20 00 90 5D |  if_ne	jmp	#LR__2332
1d078     0C 4E 05 F1 | 	add	fp, #12
1d07c     A7 26 02 FB | 	rdlong	local01, fp
1d080     0C 4E 85 F1 | 	sub	fp, #12
1d084     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d088     13 8B 12 FD | 	qdiv	muldivb_, local01
1d08c     18 26 62 FD | 	getqx	local01
1d090     A7 26 62 FC | 	wrlong	local01, fp
1d094     E0 00 90 FD | 	jmp	#LR__2336
1d098                 | LR__2332
1d098                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1d098     08 4E 05 F1 | 	add	fp, #8
1d09c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0a0     08 4E 85 F1 | 	sub	fp, #8
1d0a4     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1d0a8     14 4E 05 A1 |  if_e	add	fp, #20
1d0ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1d0b0     14 4E 85 A1 |  if_e	sub	fp, #20
1d0b4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d0b8     2C 00 90 5D |  if_ne	jmp	#LR__2333
1d0bc     0C 4E 05 F1 | 	add	fp, #12
1d0c0     A7 26 02 FB | 	rdlong	local01, fp
1d0c4     0C 4E 85 F1 | 	sub	fp, #12
1d0c8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0cc     13 8B 12 FD | 	qdiv	muldivb_, local01
1d0d0     18 26 62 FD | 	getqx	local01
1d0d4     A7 26 62 FC | 	wrlong	local01, fp
1d0d8     08 4E 05 F1 | 	add	fp, #8
1d0dc     A7 38 68 FC | 	wrlong	#28, fp
1d0e0     08 4E 85 F1 | 	sub	fp, #8
1d0e4     90 00 90 FD | 	jmp	#LR__2336
1d0e8                 | LR__2333
1d0e8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1d0e8     08 4E 05 F1 | 	add	fp, #8
1d0ec     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d0f0     08 4E 85 F1 | 	sub	fp, #8
1d0f4     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d0f8     14 4E 05 A1 |  if_e	add	fp, #20
1d0fc     A7 26 02 AB |  if_e	rdlong	local01, fp
1d100     14 4E 85 A1 |  if_e	sub	fp, #20
1d104     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d108     1C 00 90 5D |  if_ne	jmp	#LR__2334
1d10c     A7 88 02 FB | 	rdlong	muldiva_, fp
1d110     0C 4E 05 F1 | 	add	fp, #12
1d114     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d118     0C 4E 85 F1 | 	sub	fp, #12
1d11c     BA 00 A0 FD | 	call	#divide_
1d120     A7 8A 62 FC | 	wrlong	muldivb_, fp
1d124     50 00 90 FD | 	jmp	#LR__2336
1d128                 | LR__2334
1d128                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1d128     08 4E 05 F1 | 	add	fp, #8
1d12c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d130     08 4E 85 F1 | 	sub	fp, #8
1d134     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1d138     14 4E 05 A1 |  if_e	add	fp, #20
1d13c     A7 26 02 AB |  if_e	rdlong	local01, fp
1d140     14 4E 85 A1 |  if_e	sub	fp, #20
1d144     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1d148     1C 00 90 5D |  if_ne	jmp	#LR__2335
1d14c     A7 88 02 FB | 	rdlong	muldiva_, fp
1d150     0C 4E 05 F1 | 	add	fp, #12
1d154     A7 8A 02 FB | 	rdlong	muldivb_, fp
1d158     0C 4E 85 F1 | 	sub	fp, #12
1d15c     BA 00 A0 FD | 	call	#divide_
1d160     A7 8A 62 FC | 	wrlong	muldivb_, fp
1d164     10 00 90 FD | 	jmp	#LR__2336
1d168                 | LR__2335
1d168     A7 16 68 FC | 	wrlong	#11, fp
1d16c     08 4E 05 F1 | 	add	fp, #8
1d170     A7 FE 69 FC | 	wrlong	#255, fp
1d174     08 4E 85 F1 | 	sub	fp, #8
1d178                 | LR__2336
1d178     A7 12 02 F6 | 	mov	arg01, fp
1d17c     F8 01 BF FD | 	call	#_push
1d180     A7 F0 03 F6 | 	mov	ptra, fp
1d184     B2 00 A0 FD | 	call	#popregs_
1d188                 | _do_div_ret
1d188     2D 00 64 FD | 	ret
1d18c                 | 
1d18c                 | ' 
1d18c                 | ' '--------------------------------- equal (=)
1d18c                 | ' 
1d18c                 | ' sub do_eq
1d18c                 | _do_eq
1d18c     05 4A 05 F6 | 	mov	COUNT_, #5
1d190     A8 00 A0 FD | 	call	#pushregs_
1d194     18 F0 07 F1 | 	add	ptra, #24
1d198     44 01 BF FD | 	call	#_pop
1d19c     FD 26 02 F6 | 	mov	local01, result1
1d1a0     FE 28 02 F6 | 	mov	local02, result2
1d1a4     FF 2A 02 F6 | 	mov	local03, result3
1d1a8     0C 4E 05 F1 | 	add	fp, #12
1d1ac     A7 26 62 FC | 	wrlong	local01, fp
1d1b0     04 4E 05 F1 | 	add	fp, #4
1d1b4     A7 28 62 FC | 	wrlong	local02, fp
1d1b8     04 4E 05 F1 | 	add	fp, #4
1d1bc     A7 2A 62 FC | 	wrlong	local03, fp
1d1c0     14 4E 85 F1 | 	sub	fp, #20
1d1c4     18 01 BF FD | 	call	#_pop
1d1c8     FF 2A 02 F6 | 	mov	local03, result3
1d1cc     A7 FA 61 FC | 	wrlong	result1, fp
1d1d0     04 4E 05 F1 | 	add	fp, #4
1d1d4     A7 FC 61 FC | 	wrlong	result2, fp
1d1d8     04 4E 05 F1 | 	add	fp, #4
1d1dc     A7 2A 62 FC | 	wrlong	local03, fp
1d1e0                 | ' 
1d1e0                 | ' t2=pop()
1d1e0                 | ' t1=pop()
1d1e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1d1e0     08 4E 85 F1 | 	sub	fp, #8
1d1e4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d1e8     14 4E 05 A1 |  if_e	add	fp, #20
1d1ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d1f0     14 4E 85 A1 |  if_e	sub	fp, #20
1d1f4     16 2B 02 A6 |  if_e	mov	local03, local04
1d1f8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d1fc     28 00 90 5D |  if_ne	jmp	#LR__2340
1d200     00 26 06 F6 | 	mov	local01, #0
1d204     A7 12 02 FB | 	rdlong	arg01, fp
1d208     0C 4E 05 F1 | 	add	fp, #12
1d20c     A7 14 02 FB | 	rdlong	arg02, fp
1d210     0C 4E 85 F1 | 	sub	fp, #12
1d214     50 8D B0 FD | 	call	#__system___string_cmp
1d218     00 FA 0D F2 | 	cmp	result1, #0 wz
1d21c     00 26 26 A6 |  if_e	not	local01, #0
1d220     A7 26 62 FC | 	wrlong	local01, fp
1d224     20 04 90 FD | 	jmp	#LR__2353
1d228                 | LR__2340
1d228                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1d228     08 4E 05 F1 | 	add	fp, #8
1d22c     A7 26 02 FB | 	rdlong	local01, fp
1d230     08 4E 85 F1 | 	sub	fp, #8
1d234     1E 26 0E F2 | 	cmp	local01, #30 wz
1d238     14 4E 05 A1 |  if_e	add	fp, #20
1d23c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d240     14 4E 85 A1 |  if_e	sub	fp, #20
1d244     16 2B 02 A6 |  if_e	mov	local03, local04
1d248     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d24c     2C 00 90 5D |  if_ne	jmp	#LR__2341
1d250     00 26 06 F6 | 	mov	local01, #0
1d254     A7 12 02 FB | 	rdlong	arg01, fp
1d258     0C 4E 05 F1 | 	add	fp, #12
1d25c     A7 14 02 FB | 	rdlong	arg02, fp
1d260     0C 4E 85 F1 | 	sub	fp, #12
1d264     01 16 06 F6 | 	mov	arg03, #1
1d268     84 BF B0 FD | 	call	#__system___float_cmp
1d26c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d270     00 26 26 A6 |  if_e	not	local01, #0
1d274     A7 26 62 FC | 	wrlong	local01, fp
1d278     CC 03 90 FD | 	jmp	#LR__2353
1d27c                 | LR__2341
1d27c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1d27c     08 4E 05 F1 | 	add	fp, #8
1d280     A7 26 02 FB | 	rdlong	local01, fp
1d284     08 4E 85 F1 | 	sub	fp, #8
1d288     1E 26 0E F2 | 	cmp	local01, #30 wz
1d28c     14 4E 05 A1 |  if_e	add	fp, #20
1d290     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d294     14 4E 85 A1 |  if_e	sub	fp, #20
1d298     16 2B 02 A6 |  if_e	mov	local03, local04
1d29c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d2a0     48 00 90 5D |  if_ne	jmp	#LR__2342
1d2a4     00 26 06 F6 | 	mov	local01, #0
1d2a8     A7 28 02 FB | 	rdlong	local02, fp
1d2ac     0C 4E 05 F1 | 	add	fp, #12
1d2b0     A7 12 02 FB | 	rdlong	arg01, fp
1d2b4     0C 4E 85 F1 | 	sub	fp, #12
1d2b8     09 13 52 F6 | 	abs	arg01, arg01 wc
1d2bc     1F 2E C6 C9 |  if_b	decod	local05, #31
1d2c0     00 2E 06 36 |  if_ae	mov	local05, #0
1d2c4     F0 B6 B0 FD | 	call	#__system___float_fromuns
1d2c8     17 FB 61 F5 | 	xor	result1, local05
1d2cc     FD 14 02 F6 | 	mov	arg02, result1
1d2d0     14 13 02 F6 | 	mov	arg01, local02
1d2d4     01 16 06 F6 | 	mov	arg03, #1
1d2d8     14 BF B0 FD | 	call	#__system___float_cmp
1d2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1d2e0     00 26 26 A6 |  if_e	not	local01, #0
1d2e4     A7 26 62 FC | 	wrlong	local01, fp
1d2e8     5C 03 90 FD | 	jmp	#LR__2353
1d2ec                 | LR__2342
1d2ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1d2ec     08 4E 05 F1 | 	add	fp, #8
1d2f0     A7 26 02 FB | 	rdlong	local01, fp
1d2f4     08 4E 85 F1 | 	sub	fp, #8
1d2f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d2fc     14 4E 05 A1 |  if_e	add	fp, #20
1d300     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d304     14 4E 85 A1 |  if_e	sub	fp, #20
1d308     16 2B 02 A6 |  if_e	mov	local03, local04
1d30c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d310     38 00 90 5D |  if_ne	jmp	#LR__2343
1d314     00 26 06 F6 | 	mov	local01, #0
1d318     A7 28 02 FB | 	rdlong	local02, fp
1d31c     0C 4E 05 F1 | 	add	fp, #12
1d320     A7 12 02 FB | 	rdlong	arg01, fp
1d324     0C 4E 85 F1 | 	sub	fp, #12
1d328     8C B6 B0 FD | 	call	#__system___float_fromuns
1d32c     FD 14 02 F6 | 	mov	arg02, result1
1d330     14 13 02 F6 | 	mov	arg01, local02
1d334     01 16 06 F6 | 	mov	arg03, #1
1d338     B4 BE B0 FD | 	call	#__system___float_cmp
1d33c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d340     00 26 26 A6 |  if_e	not	local01, #0
1d344     A7 26 62 FC | 	wrlong	local01, fp
1d348     FC 02 90 FD | 	jmp	#LR__2353
1d34c                 | LR__2343
1d34c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1d34c     08 4E 05 F1 | 	add	fp, #8
1d350     A7 26 02 FB | 	rdlong	local01, fp
1d354     08 4E 85 F1 | 	sub	fp, #8
1d358     1C 26 0E F2 | 	cmp	local01, #28 wz
1d35c     14 4E 05 A1 |  if_e	add	fp, #20
1d360     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d364     14 4E 85 A1 |  if_e	sub	fp, #20
1d368     16 2B 02 A6 |  if_e	mov	local03, local04
1d36c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d370     44 00 90 5D |  if_ne	jmp	#LR__2344
1d374     00 26 06 F6 | 	mov	local01, #0
1d378     A7 12 02 FB | 	rdlong	arg01, fp
1d37c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d380     1F 2E C6 C9 |  if_b	decod	local05, #31
1d384     00 2E 06 36 |  if_ae	mov	local05, #0
1d388     2C B6 B0 FD | 	call	#__system___float_fromuns
1d38c     17 FB 61 F5 | 	xor	result1, local05
1d390     FD 12 02 F6 | 	mov	arg01, result1
1d394     0C 4E 05 F1 | 	add	fp, #12
1d398     A7 14 02 FB | 	rdlong	arg02, fp
1d39c     0C 4E 85 F1 | 	sub	fp, #12
1d3a0     01 16 06 F6 | 	mov	arg03, #1
1d3a4     48 BE B0 FD | 	call	#__system___float_cmp
1d3a8     00 FA 0D F2 | 	cmp	result1, #0 wz
1d3ac     00 26 26 A6 |  if_e	not	local01, #0
1d3b0     A7 26 62 FC | 	wrlong	local01, fp
1d3b4     90 02 90 FD | 	jmp	#LR__2353
1d3b8                 | LR__2344
1d3b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1d3b8     08 4E 05 F1 | 	add	fp, #8
1d3bc     A7 26 02 FB | 	rdlong	local01, fp
1d3c0     08 4E 85 F1 | 	sub	fp, #8
1d3c4     1C 26 0E F2 | 	cmp	local01, #28 wz
1d3c8     14 4E 05 A1 |  if_e	add	fp, #20
1d3cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d3d0     14 4E 85 A1 |  if_e	sub	fp, #20
1d3d4     16 2B 02 A6 |  if_e	mov	local03, local04
1d3d8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d3dc     24 00 90 5D |  if_ne	jmp	#LR__2345
1d3e0     00 26 06 F6 | 	mov	local01, #0
1d3e4     A7 28 02 FB | 	rdlong	local02, fp
1d3e8     0C 4E 05 F1 | 	add	fp, #12
1d3ec     A7 2A 02 FB | 	rdlong	local03, fp
1d3f0     0C 4E 85 F1 | 	sub	fp, #12
1d3f4     15 29 0A F2 | 	cmp	local02, local03 wz
1d3f8     01 26 66 A6 |  if_e	neg	local01, #1
1d3fc     A7 26 62 FC | 	wrlong	local01, fp
1d400     44 02 90 FD | 	jmp	#LR__2353
1d404                 | LR__2345
1d404                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1d404     08 4E 05 F1 | 	add	fp, #8
1d408     A7 26 02 FB | 	rdlong	local01, fp
1d40c     08 4E 85 F1 | 	sub	fp, #8
1d410     1C 26 0E F2 | 	cmp	local01, #28 wz
1d414     14 4E 05 A1 |  if_e	add	fp, #20
1d418     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d41c     14 4E 85 A1 |  if_e	sub	fp, #20
1d420     16 2B 02 A6 |  if_e	mov	local03, local04
1d424     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d428     24 00 90 5D |  if_ne	jmp	#LR__2346
1d42c     00 26 06 F6 | 	mov	local01, #0
1d430     A7 28 02 FB | 	rdlong	local02, fp
1d434     0C 4E 05 F1 | 	add	fp, #12
1d438     A7 2A 02 FB | 	rdlong	local03, fp
1d43c     0C 4E 85 F1 | 	sub	fp, #12
1d440     15 29 0A F2 | 	cmp	local02, local03 wz
1d444     01 26 66 A6 |  if_e	neg	local01, #1
1d448     A7 26 62 FC | 	wrlong	local01, fp
1d44c     F8 01 90 FD | 	jmp	#LR__2353
1d450                 | LR__2346
1d450                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1d450     08 4E 05 F1 | 	add	fp, #8
1d454     A7 26 02 FB | 	rdlong	local01, fp
1d458     08 4E 85 F1 | 	sub	fp, #8
1d45c     1D 26 0E F2 | 	cmp	local01, #29 wz
1d460     14 4E 05 A1 |  if_e	add	fp, #20
1d464     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d468     14 4E 85 A1 |  if_e	sub	fp, #20
1d46c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1d470     34 00 90 5D |  if_ne	jmp	#LR__2347
1d474     00 26 06 F6 | 	mov	local01, #0
1d478     A7 12 02 FB | 	rdlong	arg01, fp
1d47c     38 B5 B0 FD | 	call	#__system___float_fromuns
1d480     FD 12 02 F6 | 	mov	arg01, result1
1d484     0C 4E 05 F1 | 	add	fp, #12
1d488     A7 14 02 FB | 	rdlong	arg02, fp
1d48c     0C 4E 85 F1 | 	sub	fp, #12
1d490     01 16 06 F6 | 	mov	arg03, #1
1d494     58 BD B0 FD | 	call	#__system___float_cmp
1d498     00 FA 0D F2 | 	cmp	result1, #0 wz
1d49c     00 26 26 A6 |  if_e	not	local01, #0
1d4a0     A7 26 62 FC | 	wrlong	local01, fp
1d4a4     A0 01 90 FD | 	jmp	#LR__2353
1d4a8                 | LR__2347
1d4a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1d4a8     08 4E 05 F1 | 	add	fp, #8
1d4ac     A7 26 02 FB | 	rdlong	local01, fp
1d4b0     08 4E 85 F1 | 	sub	fp, #8
1d4b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1d4b8     14 4E 05 A1 |  if_e	add	fp, #20
1d4bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1d4c4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d4c8     24 00 90 5D |  if_ne	jmp	#LR__2348
1d4cc     00 26 06 F6 | 	mov	local01, #0
1d4d0     A7 28 02 FB | 	rdlong	local02, fp
1d4d4     0C 4E 05 F1 | 	add	fp, #12
1d4d8     A7 2A 02 FB | 	rdlong	local03, fp
1d4dc     0C 4E 85 F1 | 	sub	fp, #12
1d4e0     15 29 0A F2 | 	cmp	local02, local03 wz
1d4e4     01 26 66 A6 |  if_e	neg	local01, #1
1d4e8     A7 26 62 FC | 	wrlong	local01, fp
1d4ec     58 01 90 FD | 	jmp	#LR__2353
1d4f0                 | LR__2348
1d4f0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1d4f0     08 4E 05 F1 | 	add	fp, #8
1d4f4     A7 26 02 FB | 	rdlong	local01, fp
1d4f8     08 4E 85 F1 | 	sub	fp, #8
1d4fc     1D 26 0E F2 | 	cmp	local01, #29 wz
1d500     14 4E 05 A1 |  if_e	add	fp, #20
1d504     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d508     14 4E 85 A1 |  if_e	sub	fp, #20
1d50c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d510     24 00 90 5D |  if_ne	jmp	#LR__2349
1d514     00 26 06 F6 | 	mov	local01, #0
1d518     A7 28 02 FB | 	rdlong	local02, fp
1d51c     0C 4E 05 F1 | 	add	fp, #12
1d520     A7 2A 02 FB | 	rdlong	local03, fp
1d524     0C 4E 85 F1 | 	sub	fp, #12
1d528     15 29 0A F2 | 	cmp	local02, local03 wz
1d52c     01 26 66 A6 |  if_e	neg	local01, #1
1d530     A7 26 62 FC | 	wrlong	local01, fp
1d534     10 01 90 FD | 	jmp	#LR__2353
1d538                 | LR__2349
1d538                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1d538     08 4E 05 F1 | 	add	fp, #8
1d53c     A7 26 02 FB | 	rdlong	local01, fp
1d540     08 4E 85 F1 | 	sub	fp, #8
1d544     2B 26 0E F2 | 	cmp	local01, #43 wz
1d548     14 4E 05 A1 |  if_e	add	fp, #20
1d54c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d550     14 4E 85 A1 |  if_e	sub	fp, #20
1d554     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d558     30 00 90 5D |  if_ne	jmp	#LR__2350
1d55c     00 26 06 F6 | 	mov	local01, #0
1d560     A7 12 02 FB | 	rdlong	arg01, fp
1d564     F0 FE BE FD | 	call	#_convertstring
1d568     FD 12 02 F6 | 	mov	arg01, result1
1d56c     0C 4E 05 F1 | 	add	fp, #12
1d570     A7 14 02 FB | 	rdlong	arg02, fp
1d574     0C 4E 85 F1 | 	sub	fp, #12
1d578     EC 89 B0 FD | 	call	#__system___string_cmp
1d57c     00 FA 0D F2 | 	cmp	result1, #0 wz
1d580     00 26 26 A6 |  if_e	not	local01, #0
1d584     A7 26 62 FC | 	wrlong	local01, fp
1d588     BC 00 90 FD | 	jmp	#LR__2353
1d58c                 | LR__2350
1d58c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1d58c     08 4E 05 F1 | 	add	fp, #8
1d590     A7 26 02 FB | 	rdlong	local01, fp
1d594     08 4E 85 F1 | 	sub	fp, #8
1d598     1F 26 0E F2 | 	cmp	local01, #31 wz
1d59c     14 4E 05 A1 |  if_e	add	fp, #20
1d5a0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5a4     14 4E 85 A1 |  if_e	sub	fp, #20
1d5a8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d5ac     34 00 90 5D |  if_ne	jmp	#LR__2351
1d5b0     00 26 06 F6 | 	mov	local01, #0
1d5b4     A7 28 02 FB | 	rdlong	local02, fp
1d5b8     0C 4E 05 F1 | 	add	fp, #12
1d5bc     A7 12 02 FB | 	rdlong	arg01, fp
1d5c0     0C 4E 85 F1 | 	sub	fp, #12
1d5c4     90 FE BE FD | 	call	#_convertstring
1d5c8     FD 14 02 F6 | 	mov	arg02, result1
1d5cc     14 13 02 F6 | 	mov	arg01, local02
1d5d0     94 89 B0 FD | 	call	#__system___string_cmp
1d5d4     00 FA 0D F2 | 	cmp	result1, #0 wz
1d5d8     00 26 26 A6 |  if_e	not	local01, #0
1d5dc     A7 26 62 FC | 	wrlong	local01, fp
1d5e0     64 00 90 FD | 	jmp	#LR__2353
1d5e4                 | LR__2351
1d5e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1d5e4     08 4E 05 F1 | 	add	fp, #8
1d5e8     A7 26 02 FB | 	rdlong	local01, fp
1d5ec     08 4E 85 F1 | 	sub	fp, #8
1d5f0     2B 26 0E F2 | 	cmp	local01, #43 wz
1d5f4     14 4E 05 A1 |  if_e	add	fp, #20
1d5f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d5fc     14 4E 85 A1 |  if_e	sub	fp, #20
1d600     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1d604     3C 00 90 5D |  if_ne	jmp	#LR__2352
1d608     00 26 06 F6 | 	mov	local01, #0
1d60c     A7 12 02 FB | 	rdlong	arg01, fp
1d610     44 FE BE FD | 	call	#_convertstring
1d614     FD 28 02 F6 | 	mov	local02, result1
1d618     0C 4E 05 F1 | 	add	fp, #12
1d61c     A7 12 02 FB | 	rdlong	arg01, fp
1d620     0C 4E 85 F1 | 	sub	fp, #12
1d624     30 FE BE FD | 	call	#_convertstring
1d628     FD 14 02 F6 | 	mov	arg02, result1
1d62c     14 13 02 F6 | 	mov	arg01, local02
1d630     34 89 B0 FD | 	call	#__system___string_cmp
1d634     00 FA 0D F2 | 	cmp	result1, #0 wz
1d638     00 26 26 A6 |  if_e	not	local01, #0
1d63c     A7 26 62 FC | 	wrlong	local01, fp
1d640     04 00 90 FD | 	jmp	#LR__2353
1d644                 | LR__2352
1d644     A7 00 68 FC | 	wrlong	#0, fp
1d648                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1d648                 | LR__2353
1d648     08 4E 05 F1 | 	add	fp, #8
1d64c     A7 38 68 FC | 	wrlong	#28, fp
1d650     08 4E 85 F1 | 	sub	fp, #8
1d654     A7 12 02 F6 | 	mov	arg01, fp
1d658     1C FD BE FD | 	call	#_push
1d65c     A7 F0 03 F6 | 	mov	ptra, fp
1d660     B2 00 A0 FD | 	call	#popregs_
1d664                 | _do_eq_ret
1d664     2D 00 64 FD | 	ret
1d668                 | 
1d668                 | ' 
1d668                 | ' '--------------------------------- fdiv (/) - float divide
1d668                 | ' 
1d668                 | ' sub do_fdiv 
1d668                 | _do_fdiv
1d668     02 4A 05 F6 | 	mov	COUNT_, #2
1d66c     A8 00 A0 FD | 	call	#pushregs_
1d670     18 F0 07 F1 | 	add	ptra, #24
1d674     68 FC BE FD | 	call	#_pop
1d678     FD 14 02 F6 | 	mov	arg02, result1
1d67c     FE 12 02 F6 | 	mov	arg01, result2
1d680     FF 26 02 F6 | 	mov	local01, result3
1d684     0C 4E 05 F1 | 	add	fp, #12
1d688     A7 14 62 FC | 	wrlong	arg02, fp
1d68c     04 4E 05 F1 | 	add	fp, #4
1d690     A7 12 62 FC | 	wrlong	arg01, fp
1d694     04 4E 05 F1 | 	add	fp, #4
1d698     A7 26 62 FC | 	wrlong	local01, fp
1d69c     14 4E 85 F1 | 	sub	fp, #20
1d6a0     3C FC BE FD | 	call	#_pop
1d6a4     A7 FA 61 FC | 	wrlong	result1, fp
1d6a8     04 4E 05 F1 | 	add	fp, #4
1d6ac     A7 FC 61 FC | 	wrlong	result2, fp
1d6b0     04 4E 05 F1 | 	add	fp, #4
1d6b4     A7 FE 61 FC | 	wrlong	result3, fp
1d6b8                 | ' 
1d6b8                 | ' t2=pop()
1d6b8                 | ' t1=pop()
1d6b8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1d6b8     08 4E 85 F1 | 	sub	fp, #8
1d6bc     1F FE 0D F2 | 	cmp	result3, #31 wz
1d6c0     14 4E 05 51 |  if_ne	add	fp, #20
1d6c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1d6c8     14 4E 85 51 |  if_ne	sub	fp, #20
1d6cc     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1d6d0     A7 14 68 AC |  if_e	wrlong	#10, fp
1d6d4     08 4E 05 A1 |  if_e	add	fp, #8
1d6d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d6dc     08 4E 85 A1 |  if_e	sub	fp, #8
1d6e0     38 01 90 AD |  if_e	jmp	#LR__2365
1d6e4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1d6e4     08 4E 05 F1 | 	add	fp, #8
1d6e8     A7 14 02 FB | 	rdlong	arg02, fp
1d6ec     08 4E 85 F1 | 	sub	fp, #8
1d6f0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d6f4     28 00 90 5D |  if_ne	jmp	#LR__2360
1d6f8     08 4E 05 F1 | 	add	fp, #8
1d6fc     A7 3C 68 FC | 	wrlong	#30, fp
1d700     08 4E 85 F1 | 	sub	fp, #8
1d704     A7 12 02 FB | 	rdlong	arg01, fp
1d708     09 13 52 F6 | 	abs	arg01, arg01 wc
1d70c     1F 28 C6 C9 |  if_b	decod	local02, #31
1d710     00 28 06 36 |  if_ae	mov	local02, #0
1d714     A0 B2 B0 FD | 	call	#__system___float_fromuns
1d718     14 FB 61 F5 | 	xor	result1, local02
1d71c     A7 FA 61 FC | 	wrlong	result1, fp
1d720                 | LR__2360
1d720                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1d720     08 4E 05 F1 | 	add	fp, #8
1d724     A7 14 02 FB | 	rdlong	arg02, fp
1d728     08 4E 85 F1 | 	sub	fp, #8
1d72c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d730     18 00 90 5D |  if_ne	jmp	#LR__2361
1d734     08 4E 05 F1 | 	add	fp, #8
1d738     A7 3C 68 FC | 	wrlong	#30, fp
1d73c     08 4E 85 F1 | 	sub	fp, #8
1d740     A7 12 02 FB | 	rdlong	arg01, fp
1d744     70 B2 B0 FD | 	call	#__system___float_fromuns
1d748     A7 FA 61 FC | 	wrlong	result1, fp
1d74c                 | LR__2361
1d74c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1d74c     14 4E 05 F1 | 	add	fp, #20
1d750     A7 14 02 FB | 	rdlong	arg02, fp
1d754     14 4E 85 F1 | 	sub	fp, #20
1d758     1C 14 0E F2 | 	cmp	arg02, #28 wz
1d75c     34 00 90 5D |  if_ne	jmp	#LR__2362
1d760     14 4E 05 F1 | 	add	fp, #20
1d764     A7 3C 68 FC | 	wrlong	#30, fp
1d768     08 4E 85 F1 | 	sub	fp, #8
1d76c     A7 12 02 FB | 	rdlong	arg01, fp
1d770     0C 4E 85 F1 | 	sub	fp, #12
1d774     09 13 52 F6 | 	abs	arg01, arg01 wc
1d778     1F 28 C6 C9 |  if_b	decod	local02, #31
1d77c     00 28 06 36 |  if_ae	mov	local02, #0
1d780     34 B2 B0 FD | 	call	#__system___float_fromuns
1d784     14 FB 61 F5 | 	xor	result1, local02
1d788     0C 4E 05 F1 | 	add	fp, #12
1d78c     A7 FA 61 FC | 	wrlong	result1, fp
1d790     0C 4E 85 F1 | 	sub	fp, #12
1d794                 | LR__2362
1d794                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1d794     14 4E 05 F1 | 	add	fp, #20
1d798     A7 14 02 FB | 	rdlong	arg02, fp
1d79c     14 4E 85 F1 | 	sub	fp, #20
1d7a0     1D 14 0E F2 | 	cmp	arg02, #29 wz
1d7a4     24 00 90 5D |  if_ne	jmp	#LR__2363
1d7a8     14 4E 05 F1 | 	add	fp, #20
1d7ac     A7 3C 68 FC | 	wrlong	#30, fp
1d7b0     08 4E 85 F1 | 	sub	fp, #8
1d7b4     A7 12 02 FB | 	rdlong	arg01, fp
1d7b8     0C 4E 85 F1 | 	sub	fp, #12
1d7bc     F8 B1 B0 FD | 	call	#__system___float_fromuns
1d7c0     0C 4E 05 F1 | 	add	fp, #12
1d7c4     A7 FA 61 FC | 	wrlong	result1, fp
1d7c8     0C 4E 85 F1 | 	sub	fp, #12
1d7cc                 | LR__2363
1d7cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1d7cc     08 4E 05 F1 | 	add	fp, #8
1d7d0     A7 14 02 FB | 	rdlong	arg02, fp
1d7d4     08 4E 85 F1 | 	sub	fp, #8
1d7d8     1E 14 0E F2 | 	cmp	arg02, #30 wz
1d7dc     14 4E 05 A1 |  if_e	add	fp, #20
1d7e0     A7 26 02 AB |  if_e	rdlong	local01, fp
1d7e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d7e8     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1d7ec     1C 00 90 5D |  if_ne	jmp	#LR__2364
1d7f0     A7 12 02 FB | 	rdlong	arg01, fp
1d7f4     0C 4E 05 F1 | 	add	fp, #12
1d7f8     A7 14 02 FB | 	rdlong	arg02, fp
1d7fc     0C 4E 85 F1 | 	sub	fp, #12
1d800     BC B7 B0 FD | 	call	#__system___float_div
1d804     A7 FA 61 FC | 	wrlong	result1, fp
1d808     10 00 90 FD | 	jmp	#LR__2365
1d80c                 | LR__2364
1d80c     A7 16 68 FC | 	wrlong	#11, fp
1d810     08 4E 05 F1 | 	add	fp, #8
1d814     A7 FE 69 FC | 	wrlong	#255, fp
1d818     08 4E 85 F1 | 	sub	fp, #8
1d81c                 | LR__2365
1d81c     A7 12 02 F6 | 	mov	arg01, fp
1d820     54 FB BE FD | 	call	#_push
1d824     A7 F0 03 F6 | 	mov	ptra, fp
1d828     B2 00 A0 FD | 	call	#popregs_
1d82c                 | _do_fdiv_ret
1d82c     2D 00 64 FD | 	ret
1d830                 | 
1d830                 | ' 
1d830                 | ' '--------------------------------- greater or equal (>=)
1d830                 | ' 
1d830                 | ' sub do_ge
1d830                 | _do_ge
1d830     05 4A 05 F6 | 	mov	COUNT_, #5
1d834     A8 00 A0 FD | 	call	#pushregs_
1d838     18 F0 07 F1 | 	add	ptra, #24
1d83c     A0 FA BE FD | 	call	#_pop
1d840     FD 26 02 F6 | 	mov	local01, result1
1d844     FE 28 02 F6 | 	mov	local02, result2
1d848     FF 2A 02 F6 | 	mov	local03, result3
1d84c     0C 4E 05 F1 | 	add	fp, #12
1d850     A7 26 62 FC | 	wrlong	local01, fp
1d854     04 4E 05 F1 | 	add	fp, #4
1d858     A7 28 62 FC | 	wrlong	local02, fp
1d85c     04 4E 05 F1 | 	add	fp, #4
1d860     A7 2A 62 FC | 	wrlong	local03, fp
1d864     14 4E 85 F1 | 	sub	fp, #20
1d868     74 FA BE FD | 	call	#_pop
1d86c     FF 2A 02 F6 | 	mov	local03, result3
1d870     A7 FA 61 FC | 	wrlong	result1, fp
1d874     04 4E 05 F1 | 	add	fp, #4
1d878     A7 FC 61 FC | 	wrlong	result2, fp
1d87c     04 4E 05 F1 | 	add	fp, #4
1d880     A7 2A 62 FC | 	wrlong	local03, fp
1d884                 | ' 
1d884                 | ' t2=pop()
1d884                 | ' t1=pop()
1d884                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1d884     08 4E 85 F1 | 	sub	fp, #8
1d888     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d88c     14 4E 05 A1 |  if_e	add	fp, #20
1d890     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d894     14 4E 85 A1 |  if_e	sub	fp, #20
1d898     16 2B 02 A6 |  if_e	mov	local03, local04
1d89c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1d8a0     28 00 90 5D |  if_ne	jmp	#LR__2370
1d8a4     00 26 06 F6 | 	mov	local01, #0
1d8a8     A7 12 02 FB | 	rdlong	arg01, fp
1d8ac     0C 4E 05 F1 | 	add	fp, #12
1d8b0     A7 14 02 FB | 	rdlong	arg02, fp
1d8b4     0C 4E 85 F1 | 	sub	fp, #12
1d8b8     AC 86 B0 FD | 	call	#__system___string_cmp
1d8bc     00 FA 55 F2 | 	cmps	result1, #0 wc
1d8c0     00 26 26 36 |  if_ae	not	local01, #0
1d8c4     A7 26 62 FC | 	wrlong	local01, fp
1d8c8     24 04 90 FD | 	jmp	#LR__2383
1d8cc                 | LR__2370
1d8cc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1d8cc     08 4E 05 F1 | 	add	fp, #8
1d8d0     A7 26 02 FB | 	rdlong	local01, fp
1d8d4     08 4E 85 F1 | 	sub	fp, #8
1d8d8     1E 26 0E F2 | 	cmp	local01, #30 wz
1d8dc     14 4E 05 A1 |  if_e	add	fp, #20
1d8e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d8e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d8e8     16 2B 02 A6 |  if_e	mov	local03, local04
1d8ec     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1d8f0     2C 00 90 5D |  if_ne	jmp	#LR__2371
1d8f4     00 26 06 F6 | 	mov	local01, #0
1d8f8     A7 12 02 FB | 	rdlong	arg01, fp
1d8fc     0C 4E 05 F1 | 	add	fp, #12
1d900     A7 14 02 FB | 	rdlong	arg02, fp
1d904     0C 4E 85 F1 | 	sub	fp, #12
1d908     01 16 66 F6 | 	neg	arg03, #1
1d90c     E0 B8 B0 FD | 	call	#__system___float_cmp
1d910     00 FA 55 F2 | 	cmps	result1, #0 wc
1d914     00 26 26 36 |  if_ae	not	local01, #0
1d918     A7 26 62 FC | 	wrlong	local01, fp
1d91c     D0 03 90 FD | 	jmp	#LR__2383
1d920                 | LR__2371
1d920                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1d920     08 4E 05 F1 | 	add	fp, #8
1d924     A7 26 02 FB | 	rdlong	local01, fp
1d928     08 4E 85 F1 | 	sub	fp, #8
1d92c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d930     14 4E 05 A1 |  if_e	add	fp, #20
1d934     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d938     14 4E 85 A1 |  if_e	sub	fp, #20
1d93c     16 2B 02 A6 |  if_e	mov	local03, local04
1d940     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1d944     48 00 90 5D |  if_ne	jmp	#LR__2372
1d948     00 26 06 F6 | 	mov	local01, #0
1d94c     A7 28 02 FB | 	rdlong	local02, fp
1d950     0C 4E 05 F1 | 	add	fp, #12
1d954     A7 12 02 FB | 	rdlong	arg01, fp
1d958     0C 4E 85 F1 | 	sub	fp, #12
1d95c     09 13 52 F6 | 	abs	arg01, arg01 wc
1d960     1F 2E C6 C9 |  if_b	decod	local05, #31
1d964     00 2E 06 36 |  if_ae	mov	local05, #0
1d968     4C B0 B0 FD | 	call	#__system___float_fromuns
1d96c     17 FB 61 F5 | 	xor	result1, local05
1d970     FD 14 02 F6 | 	mov	arg02, result1
1d974     14 13 02 F6 | 	mov	arg01, local02
1d978     01 16 66 F6 | 	neg	arg03, #1
1d97c     70 B8 B0 FD | 	call	#__system___float_cmp
1d980     00 FA 55 F2 | 	cmps	result1, #0 wc
1d984     00 26 26 36 |  if_ae	not	local01, #0
1d988     A7 26 62 FC | 	wrlong	local01, fp
1d98c     60 03 90 FD | 	jmp	#LR__2383
1d990                 | LR__2372
1d990                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1d990     08 4E 05 F1 | 	add	fp, #8
1d994     A7 26 02 FB | 	rdlong	local01, fp
1d998     08 4E 85 F1 | 	sub	fp, #8
1d99c     1E 26 0E F2 | 	cmp	local01, #30 wz
1d9a0     14 4E 05 A1 |  if_e	add	fp, #20
1d9a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1d9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1d9ac     16 2B 02 A6 |  if_e	mov	local03, local04
1d9b0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1d9b4     38 00 90 5D |  if_ne	jmp	#LR__2373
1d9b8     00 26 06 F6 | 	mov	local01, #0
1d9bc     A7 28 02 FB | 	rdlong	local02, fp
1d9c0     0C 4E 05 F1 | 	add	fp, #12
1d9c4     A7 12 02 FB | 	rdlong	arg01, fp
1d9c8     0C 4E 85 F1 | 	sub	fp, #12
1d9cc     E8 AF B0 FD | 	call	#__system___float_fromuns
1d9d0     FD 14 02 F6 | 	mov	arg02, result1
1d9d4     14 13 02 F6 | 	mov	arg01, local02
1d9d8     01 16 66 F6 | 	neg	arg03, #1
1d9dc     10 B8 B0 FD | 	call	#__system___float_cmp
1d9e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1d9e4     00 26 26 36 |  if_ae	not	local01, #0
1d9e8     A7 26 62 FC | 	wrlong	local01, fp
1d9ec     00 03 90 FD | 	jmp	#LR__2383
1d9f0                 | LR__2373
1d9f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1d9f0     08 4E 05 F1 | 	add	fp, #8
1d9f4     A7 26 02 FB | 	rdlong	local01, fp
1d9f8     08 4E 85 F1 | 	sub	fp, #8
1d9fc     1C 26 0E F2 | 	cmp	local01, #28 wz
1da00     14 4E 05 A1 |  if_e	add	fp, #20
1da04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da08     14 4E 85 A1 |  if_e	sub	fp, #20
1da0c     16 2B 02 A6 |  if_e	mov	local03, local04
1da10     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1da14     44 00 90 5D |  if_ne	jmp	#LR__2374
1da18     00 26 06 F6 | 	mov	local01, #0
1da1c     A7 12 02 FB | 	rdlong	arg01, fp
1da20     09 13 52 F6 | 	abs	arg01, arg01 wc
1da24     1F 2E C6 C9 |  if_b	decod	local05, #31
1da28     00 2E 06 36 |  if_ae	mov	local05, #0
1da2c     88 AF B0 FD | 	call	#__system___float_fromuns
1da30     17 FB 61 F5 | 	xor	result1, local05
1da34     FD 12 02 F6 | 	mov	arg01, result1
1da38     0C 4E 05 F1 | 	add	fp, #12
1da3c     A7 14 02 FB | 	rdlong	arg02, fp
1da40     0C 4E 85 F1 | 	sub	fp, #12
1da44     01 16 66 F6 | 	neg	arg03, #1
1da48     A4 B7 B0 FD | 	call	#__system___float_cmp
1da4c     00 FA 55 F2 | 	cmps	result1, #0 wc
1da50     00 26 26 36 |  if_ae	not	local01, #0
1da54     A7 26 62 FC | 	wrlong	local01, fp
1da58     94 02 90 FD | 	jmp	#LR__2383
1da5c                 | LR__2374
1da5c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1da5c     08 4E 05 F1 | 	add	fp, #8
1da60     A7 26 02 FB | 	rdlong	local01, fp
1da64     08 4E 85 F1 | 	sub	fp, #8
1da68     1C 26 0E F2 | 	cmp	local01, #28 wz
1da6c     14 4E 05 A1 |  if_e	add	fp, #20
1da70     A7 2C 02 AB |  if_e	rdlong	local04, fp
1da74     14 4E 85 A1 |  if_e	sub	fp, #20
1da78     16 2B 02 A6 |  if_e	mov	local03, local04
1da7c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1da80     24 00 90 5D |  if_ne	jmp	#LR__2375
1da84     00 26 06 F6 | 	mov	local01, #0
1da88     A7 28 02 FB | 	rdlong	local02, fp
1da8c     0C 4E 05 F1 | 	add	fp, #12
1da90     A7 2A 02 FB | 	rdlong	local03, fp
1da94     0C 4E 85 F1 | 	sub	fp, #12
1da98     15 29 52 F2 | 	cmps	local02, local03 wc
1da9c     01 26 66 36 |  if_ae	neg	local01, #1
1daa0     A7 26 62 FC | 	wrlong	local01, fp
1daa4     48 02 90 FD | 	jmp	#LR__2383
1daa8                 | LR__2375
1daa8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1daa8     08 4E 05 F1 | 	add	fp, #8
1daac     A7 26 02 FB | 	rdlong	local01, fp
1dab0     08 4E 85 F1 | 	sub	fp, #8
1dab4     1C 26 0E F2 | 	cmp	local01, #28 wz
1dab8     14 4E 05 A1 |  if_e	add	fp, #20
1dabc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dac0     14 4E 85 A1 |  if_e	sub	fp, #20
1dac4     16 2B 02 A6 |  if_e	mov	local03, local04
1dac8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dacc     24 00 90 5D |  if_ne	jmp	#LR__2376
1dad0     00 26 06 F6 | 	mov	local01, #0
1dad4     A7 28 02 FB | 	rdlong	local02, fp
1dad8     0C 4E 05 F1 | 	add	fp, #12
1dadc     A7 2A 02 FB | 	rdlong	local03, fp
1dae0     0C 4E 85 F1 | 	sub	fp, #12
1dae4     15 29 52 F2 | 	cmps	local02, local03 wc
1dae8     01 26 66 36 |  if_ae	neg	local01, #1
1daec     A7 26 62 FC | 	wrlong	local01, fp
1daf0     FC 01 90 FD | 	jmp	#LR__2383
1daf4                 | LR__2376
1daf4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1daf4     08 4E 05 F1 | 	add	fp, #8
1daf8     A7 26 02 FB | 	rdlong	local01, fp
1dafc     08 4E 85 F1 | 	sub	fp, #8
1db00     1D 26 0E F2 | 	cmp	local01, #29 wz
1db04     14 4E 05 A1 |  if_e	add	fp, #20
1db08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db0c     14 4E 85 A1 |  if_e	sub	fp, #20
1db10     16 2B 02 A6 |  if_e	mov	local03, local04
1db14     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1db18     34 00 90 5D |  if_ne	jmp	#LR__2377
1db1c     00 26 06 F6 | 	mov	local01, #0
1db20     A7 12 02 FB | 	rdlong	arg01, fp
1db24     90 AE B0 FD | 	call	#__system___float_fromuns
1db28     FD 12 02 F6 | 	mov	arg01, result1
1db2c     0C 4E 05 F1 | 	add	fp, #12
1db30     A7 14 02 FB | 	rdlong	arg02, fp
1db34     0C 4E 85 F1 | 	sub	fp, #12
1db38     01 16 66 F6 | 	neg	arg03, #1
1db3c     B0 B6 B0 FD | 	call	#__system___float_cmp
1db40     00 FA 55 F2 | 	cmps	result1, #0 wc
1db44     00 26 26 36 |  if_ae	not	local01, #0
1db48     A7 26 62 FC | 	wrlong	local01, fp
1db4c     A0 01 90 FD | 	jmp	#LR__2383
1db50                 | LR__2377
1db50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1db50     08 4E 05 F1 | 	add	fp, #8
1db54     A7 26 02 FB | 	rdlong	local01, fp
1db58     08 4E 85 F1 | 	sub	fp, #8
1db5c     1D 26 0E F2 | 	cmp	local01, #29 wz
1db60     14 4E 05 A1 |  if_e	add	fp, #20
1db64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db68     14 4E 85 A1 |  if_e	sub	fp, #20
1db6c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1db70     24 00 90 5D |  if_ne	jmp	#LR__2378
1db74     00 26 06 F6 | 	mov	local01, #0
1db78     A7 28 02 FB | 	rdlong	local02, fp
1db7c     0C 4E 05 F1 | 	add	fp, #12
1db80     A7 2A 02 FB | 	rdlong	local03, fp
1db84     0C 4E 85 F1 | 	sub	fp, #12
1db88     15 29 52 F2 | 	cmps	local02, local03 wc
1db8c     01 26 66 36 |  if_ae	neg	local01, #1
1db90     A7 26 62 FC | 	wrlong	local01, fp
1db94     58 01 90 FD | 	jmp	#LR__2383
1db98                 | LR__2378
1db98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1db98     08 4E 05 F1 | 	add	fp, #8
1db9c     A7 26 02 FB | 	rdlong	local01, fp
1dba0     08 4E 85 F1 | 	sub	fp, #8
1dba4     1D 26 0E F2 | 	cmp	local01, #29 wz
1dba8     14 4E 05 A1 |  if_e	add	fp, #20
1dbac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbb0     14 4E 85 A1 |  if_e	sub	fp, #20
1dbb4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dbb8     24 00 90 5D |  if_ne	jmp	#LR__2379
1dbbc     00 26 06 F6 | 	mov	local01, #0
1dbc0     A7 28 02 FB | 	rdlong	local02, fp
1dbc4     0C 4E 05 F1 | 	add	fp, #12
1dbc8     A7 2A 02 FB | 	rdlong	local03, fp
1dbcc     0C 4E 85 F1 | 	sub	fp, #12
1dbd0     15 29 12 F2 | 	cmp	local02, local03 wc
1dbd4     01 26 66 36 |  if_ae	neg	local01, #1
1dbd8     A7 26 62 FC | 	wrlong	local01, fp
1dbdc     10 01 90 FD | 	jmp	#LR__2383
1dbe0                 | LR__2379
1dbe0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1dbe0     08 4E 05 F1 | 	add	fp, #8
1dbe4     A7 26 02 FB | 	rdlong	local01, fp
1dbe8     08 4E 85 F1 | 	sub	fp, #8
1dbec     2B 26 0E F2 | 	cmp	local01, #43 wz
1dbf0     14 4E 05 A1 |  if_e	add	fp, #20
1dbf4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dbf8     14 4E 85 A1 |  if_e	sub	fp, #20
1dbfc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dc00     30 00 90 5D |  if_ne	jmp	#LR__2380
1dc04     00 26 06 F6 | 	mov	local01, #0
1dc08     A7 12 02 FB | 	rdlong	arg01, fp
1dc0c     48 F8 BE FD | 	call	#_convertstring
1dc10     FD 12 02 F6 | 	mov	arg01, result1
1dc14     0C 4E 05 F1 | 	add	fp, #12
1dc18     A7 14 02 FB | 	rdlong	arg02, fp
1dc1c     0C 4E 85 F1 | 	sub	fp, #12
1dc20     44 83 B0 FD | 	call	#__system___string_cmp
1dc24     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc28     00 26 26 36 |  if_ae	not	local01, #0
1dc2c     A7 26 62 FC | 	wrlong	local01, fp
1dc30     BC 00 90 FD | 	jmp	#LR__2383
1dc34                 | LR__2380
1dc34                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1dc34     08 4E 05 F1 | 	add	fp, #8
1dc38     A7 26 02 FB | 	rdlong	local01, fp
1dc3c     08 4E 85 F1 | 	sub	fp, #8
1dc40     1F 26 0E F2 | 	cmp	local01, #31 wz
1dc44     14 4E 05 A1 |  if_e	add	fp, #20
1dc48     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dc4c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc50     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dc54     34 00 90 5D |  if_ne	jmp	#LR__2381
1dc58     00 26 06 F6 | 	mov	local01, #0
1dc5c     A7 28 02 FB | 	rdlong	local02, fp
1dc60     0C 4E 05 F1 | 	add	fp, #12
1dc64     A7 12 02 FB | 	rdlong	arg01, fp
1dc68     0C 4E 85 F1 | 	sub	fp, #12
1dc6c     E8 F7 BE FD | 	call	#_convertstring
1dc70     FD 14 02 F6 | 	mov	arg02, result1
1dc74     14 13 02 F6 | 	mov	arg01, local02
1dc78     EC 82 B0 FD | 	call	#__system___string_cmp
1dc7c     00 FA 55 F2 | 	cmps	result1, #0 wc
1dc80     00 26 26 36 |  if_ae	not	local01, #0
1dc84     A7 26 62 FC | 	wrlong	local01, fp
1dc88     64 00 90 FD | 	jmp	#LR__2383
1dc8c                 | LR__2381
1dc8c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1dc8c     08 4E 05 F1 | 	add	fp, #8
1dc90     A7 26 02 FB | 	rdlong	local01, fp
1dc94     08 4E 85 F1 | 	sub	fp, #8
1dc98     2B 26 0E F2 | 	cmp	local01, #43 wz
1dc9c     14 4E 05 A1 |  if_e	add	fp, #20
1dca0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dca4     14 4E 85 A1 |  if_e	sub	fp, #20
1dca8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1dcac     3C 00 90 5D |  if_ne	jmp	#LR__2382
1dcb0     00 26 06 F6 | 	mov	local01, #0
1dcb4     A7 12 02 FB | 	rdlong	arg01, fp
1dcb8     9C F7 BE FD | 	call	#_convertstring
1dcbc     FD 28 02 F6 | 	mov	local02, result1
1dcc0     0C 4E 05 F1 | 	add	fp, #12
1dcc4     A7 12 02 FB | 	rdlong	arg01, fp
1dcc8     0C 4E 85 F1 | 	sub	fp, #12
1dccc     88 F7 BE FD | 	call	#_convertstring
1dcd0     FD 14 02 F6 | 	mov	arg02, result1
1dcd4     14 13 02 F6 | 	mov	arg01, local02
1dcd8     8C 82 B0 FD | 	call	#__system___string_cmp
1dcdc     00 FA 55 F2 | 	cmps	result1, #0 wc
1dce0     00 26 26 36 |  if_ae	not	local01, #0
1dce4     A7 26 62 FC | 	wrlong	local01, fp
1dce8     04 00 90 FD | 	jmp	#LR__2383
1dcec                 | LR__2382
1dcec     A7 00 68 FC | 	wrlong	#0, fp
1dcf0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dcf0                 | LR__2383
1dcf0     08 4E 05 F1 | 	add	fp, #8
1dcf4     A7 38 68 FC | 	wrlong	#28, fp
1dcf8     08 4E 85 F1 | 	sub	fp, #8
1dcfc                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dcfc     A7 26 0A FB | 	rdlong	local01, fp wz
1dd00     A7 02 68 5C |  if_ne	wrlong	#1, fp
1dd04     A7 12 02 F6 | 	mov	arg01, fp
1dd08     6C F6 BE FD | 	call	#_push
1dd0c     A7 F0 03 F6 | 	mov	ptra, fp
1dd10     B2 00 A0 FD | 	call	#popregs_
1dd14                 | _do_ge_ret
1dd14     2D 00 64 FD | 	ret
1dd18                 | 
1dd18                 | ' 
1dd18                 | ' '--------------------------------- greater than (>)
1dd18                 | ' 
1dd18                 | ' sub do_gt
1dd18                 | _do_gt
1dd18     05 4A 05 F6 | 	mov	COUNT_, #5
1dd1c     A8 00 A0 FD | 	call	#pushregs_
1dd20     18 F0 07 F1 | 	add	ptra, #24
1dd24     B8 F5 BE FD | 	call	#_pop
1dd28     FD 26 02 F6 | 	mov	local01, result1
1dd2c     FE 28 02 F6 | 	mov	local02, result2
1dd30     FF 2A 02 F6 | 	mov	local03, result3
1dd34     0C 4E 05 F1 | 	add	fp, #12
1dd38     A7 26 62 FC | 	wrlong	local01, fp
1dd3c     04 4E 05 F1 | 	add	fp, #4
1dd40     A7 28 62 FC | 	wrlong	local02, fp
1dd44     04 4E 05 F1 | 	add	fp, #4
1dd48     A7 2A 62 FC | 	wrlong	local03, fp
1dd4c     14 4E 85 F1 | 	sub	fp, #20
1dd50     8C F5 BE FD | 	call	#_pop
1dd54     FF 2A 02 F6 | 	mov	local03, result3
1dd58     A7 FA 61 FC | 	wrlong	result1, fp
1dd5c     04 4E 05 F1 | 	add	fp, #4
1dd60     A7 FC 61 FC | 	wrlong	result2, fp
1dd64     04 4E 05 F1 | 	add	fp, #4
1dd68     A7 2A 62 FC | 	wrlong	local03, fp
1dd6c                 | ' 
1dd6c                 | ' t2=pop()
1dd6c                 | ' t1=pop()
1dd6c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1dd6c     08 4E 85 F1 | 	sub	fp, #8
1dd70     1F 2A 0E F2 | 	cmp	local03, #31 wz
1dd74     14 4E 05 A1 |  if_e	add	fp, #20
1dd78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd7c     14 4E 85 A1 |  if_e	sub	fp, #20
1dd80     16 2B 02 A6 |  if_e	mov	local03, local04
1dd84     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1dd88     28 00 90 5D |  if_ne	jmp	#LR__2390
1dd8c     00 26 06 F6 | 	mov	local01, #0
1dd90     A7 12 02 FB | 	rdlong	arg01, fp
1dd94     0C 4E 05 F1 | 	add	fp, #12
1dd98     A7 14 02 FB | 	rdlong	arg02, fp
1dd9c     0C 4E 85 F1 | 	sub	fp, #12
1dda0     C4 81 B0 FD | 	call	#__system___string_cmp
1dda4     01 FA 55 F2 | 	cmps	result1, #1 wc
1dda8     00 26 26 36 |  if_ae	not	local01, #0
1ddac     A7 26 62 FC | 	wrlong	local01, fp
1ddb0     20 04 90 FD | 	jmp	#LR__2403
1ddb4                 | LR__2390
1ddb4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1ddb4     08 4E 05 F1 | 	add	fp, #8
1ddb8     A7 26 02 FB | 	rdlong	local01, fp
1ddbc     08 4E 85 F1 | 	sub	fp, #8
1ddc0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ddc4     14 4E 05 A1 |  if_e	add	fp, #20
1ddc8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ddcc     14 4E 85 A1 |  if_e	sub	fp, #20
1ddd0     16 2B 02 A6 |  if_e	mov	local03, local04
1ddd4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ddd8     2C 00 90 5D |  if_ne	jmp	#LR__2391
1dddc     00 26 06 F6 | 	mov	local01, #0
1dde0     A7 12 02 FB | 	rdlong	arg01, fp
1dde4     0C 4E 05 F1 | 	add	fp, #12
1dde8     A7 14 02 FB | 	rdlong	arg02, fp
1ddec     0C 4E 85 F1 | 	sub	fp, #12
1ddf0     01 16 66 F6 | 	neg	arg03, #1
1ddf4     F8 B3 B0 FD | 	call	#__system___float_cmp
1ddf8     01 FA 55 F2 | 	cmps	result1, #1 wc
1ddfc     00 26 26 36 |  if_ae	not	local01, #0
1de00     A7 26 62 FC | 	wrlong	local01, fp
1de04     CC 03 90 FD | 	jmp	#LR__2403
1de08                 | LR__2391
1de08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1de08     08 4E 05 F1 | 	add	fp, #8
1de0c     A7 26 02 FB | 	rdlong	local01, fp
1de10     08 4E 85 F1 | 	sub	fp, #8
1de14     1E 26 0E F2 | 	cmp	local01, #30 wz
1de18     14 4E 05 A1 |  if_e	add	fp, #20
1de1c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de20     14 4E 85 A1 |  if_e	sub	fp, #20
1de24     16 2B 02 A6 |  if_e	mov	local03, local04
1de28     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de2c     48 00 90 5D |  if_ne	jmp	#LR__2392
1de30     00 26 06 F6 | 	mov	local01, #0
1de34     A7 28 02 FB | 	rdlong	local02, fp
1de38     0C 4E 05 F1 | 	add	fp, #12
1de3c     A7 12 02 FB | 	rdlong	arg01, fp
1de40     0C 4E 85 F1 | 	sub	fp, #12
1de44     09 13 52 F6 | 	abs	arg01, arg01 wc
1de48     1F 2E C6 C9 |  if_b	decod	local05, #31
1de4c     00 2E 06 36 |  if_ae	mov	local05, #0
1de50     64 AB B0 FD | 	call	#__system___float_fromuns
1de54     17 FB 61 F5 | 	xor	result1, local05
1de58     FD 14 02 F6 | 	mov	arg02, result1
1de5c     14 13 02 F6 | 	mov	arg01, local02
1de60     01 16 66 F6 | 	neg	arg03, #1
1de64     88 B3 B0 FD | 	call	#__system___float_cmp
1de68     01 FA 55 F2 | 	cmps	result1, #1 wc
1de6c     00 26 26 36 |  if_ae	not	local01, #0
1de70     A7 26 62 FC | 	wrlong	local01, fp
1de74     5C 03 90 FD | 	jmp	#LR__2403
1de78                 | LR__2392
1de78                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1de78     08 4E 05 F1 | 	add	fp, #8
1de7c     A7 26 02 FB | 	rdlong	local01, fp
1de80     08 4E 85 F1 | 	sub	fp, #8
1de84     1E 26 0E F2 | 	cmp	local01, #30 wz
1de88     14 4E 05 A1 |  if_e	add	fp, #20
1de8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1de90     14 4E 85 A1 |  if_e	sub	fp, #20
1de94     16 2B 02 A6 |  if_e	mov	local03, local04
1de98     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de9c     38 00 90 5D |  if_ne	jmp	#LR__2393
1dea0     00 26 06 F6 | 	mov	local01, #0
1dea4     A7 28 02 FB | 	rdlong	local02, fp
1dea8     0C 4E 05 F1 | 	add	fp, #12
1deac     A7 12 02 FB | 	rdlong	arg01, fp
1deb0     0C 4E 85 F1 | 	sub	fp, #12
1deb4     00 AB B0 FD | 	call	#__system___float_fromuns
1deb8     FD 14 02 F6 | 	mov	arg02, result1
1debc     14 13 02 F6 | 	mov	arg01, local02
1dec0     01 16 66 F6 | 	neg	arg03, #1
1dec4     28 B3 B0 FD | 	call	#__system___float_cmp
1dec8     01 FA 55 F2 | 	cmps	result1, #1 wc
1decc     00 26 26 36 |  if_ae	not	local01, #0
1ded0     A7 26 62 FC | 	wrlong	local01, fp
1ded4     FC 02 90 FD | 	jmp	#LR__2403
1ded8                 | LR__2393
1ded8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1ded8     08 4E 05 F1 | 	add	fp, #8
1dedc     A7 26 02 FB | 	rdlong	local01, fp
1dee0     08 4E 85 F1 | 	sub	fp, #8
1dee4     1C 26 0E F2 | 	cmp	local01, #28 wz
1dee8     14 4E 05 A1 |  if_e	add	fp, #20
1deec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1def0     14 4E 85 A1 |  if_e	sub	fp, #20
1def4     16 2B 02 A6 |  if_e	mov	local03, local04
1def8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1defc     44 00 90 5D |  if_ne	jmp	#LR__2394
1df00     00 26 06 F6 | 	mov	local01, #0
1df04     A7 12 02 FB | 	rdlong	arg01, fp
1df08     09 13 52 F6 | 	abs	arg01, arg01 wc
1df0c     1F 2E C6 C9 |  if_b	decod	local05, #31
1df10     00 2E 06 36 |  if_ae	mov	local05, #0
1df14     A0 AA B0 FD | 	call	#__system___float_fromuns
1df18     17 FB 61 F5 | 	xor	result1, local05
1df1c     FD 12 02 F6 | 	mov	arg01, result1
1df20     0C 4E 05 F1 | 	add	fp, #12
1df24     A7 14 02 FB | 	rdlong	arg02, fp
1df28     0C 4E 85 F1 | 	sub	fp, #12
1df2c     01 16 66 F6 | 	neg	arg03, #1
1df30     BC B2 B0 FD | 	call	#__system___float_cmp
1df34     01 FA 55 F2 | 	cmps	result1, #1 wc
1df38     00 26 26 36 |  if_ae	not	local01, #0
1df3c     A7 26 62 FC | 	wrlong	local01, fp
1df40     90 02 90 FD | 	jmp	#LR__2403
1df44                 | LR__2394
1df44                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1df44     08 4E 05 F1 | 	add	fp, #8
1df48     A7 26 02 FB | 	rdlong	local01, fp
1df4c     08 4E 85 F1 | 	sub	fp, #8
1df50     1C 26 0E F2 | 	cmp	local01, #28 wz
1df54     14 4E 05 A1 |  if_e	add	fp, #20
1df58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1df5c     14 4E 85 A1 |  if_e	sub	fp, #20
1df60     16 2B 02 A6 |  if_e	mov	local03, local04
1df64     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1df68     24 00 90 5D |  if_ne	jmp	#LR__2395
1df6c     00 26 06 F6 | 	mov	local01, #0
1df70     A7 28 02 FB | 	rdlong	local02, fp
1df74     0C 4E 05 F1 | 	add	fp, #12
1df78     A7 2A 02 FB | 	rdlong	local03, fp
1df7c     0C 4E 85 F1 | 	sub	fp, #12
1df80     15 29 5A F2 | 	cmps	local02, local03 wcz
1df84     01 26 66 16 |  if_a	neg	local01, #1
1df88     A7 26 62 FC | 	wrlong	local01, fp
1df8c     44 02 90 FD | 	jmp	#LR__2403
1df90                 | LR__2395
1df90                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1df90     08 4E 05 F1 | 	add	fp, #8
1df94     A7 26 02 FB | 	rdlong	local01, fp
1df98     08 4E 85 F1 | 	sub	fp, #8
1df9c     1C 26 0E F2 | 	cmp	local01, #28 wz
1dfa0     14 4E 05 A1 |  if_e	add	fp, #20
1dfa4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dfa8     14 4E 85 A1 |  if_e	sub	fp, #20
1dfac     16 2B 02 A6 |  if_e	mov	local03, local04
1dfb0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dfb4     24 00 90 5D |  if_ne	jmp	#LR__2396
1dfb8     00 26 06 F6 | 	mov	local01, #0
1dfbc     A7 28 02 FB | 	rdlong	local02, fp
1dfc0     0C 4E 05 F1 | 	add	fp, #12
1dfc4     A7 2A 02 FB | 	rdlong	local03, fp
1dfc8     0C 4E 85 F1 | 	sub	fp, #12
1dfcc     15 29 5A F2 | 	cmps	local02, local03 wcz
1dfd0     01 26 66 16 |  if_a	neg	local01, #1
1dfd4     A7 26 62 FC | 	wrlong	local01, fp
1dfd8     F8 01 90 FD | 	jmp	#LR__2403
1dfdc                 | LR__2396
1dfdc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1dfdc     08 4E 05 F1 | 	add	fp, #8
1dfe0     A7 26 02 FB | 	rdlong	local01, fp
1dfe4     08 4E 85 F1 | 	sub	fp, #8
1dfe8     1D 26 0E F2 | 	cmp	local01, #29 wz
1dfec     14 4E 05 A1 |  if_e	add	fp, #20
1dff0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dff4     14 4E 85 A1 |  if_e	sub	fp, #20
1dff8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1dffc     34 00 90 5D |  if_ne	jmp	#LR__2397
1e000     00 26 06 F6 | 	mov	local01, #0
1e004     A7 12 02 FB | 	rdlong	arg01, fp
1e008     AC A9 B0 FD | 	call	#__system___float_fromuns
1e00c     FD 12 02 F6 | 	mov	arg01, result1
1e010     0C 4E 05 F1 | 	add	fp, #12
1e014     A7 14 02 FB | 	rdlong	arg02, fp
1e018     0C 4E 85 F1 | 	sub	fp, #12
1e01c     01 16 66 F6 | 	neg	arg03, #1
1e020     CC B1 B0 FD | 	call	#__system___float_cmp
1e024     01 FA 55 F2 | 	cmps	result1, #1 wc
1e028     00 26 26 36 |  if_ae	not	local01, #0
1e02c     A7 26 62 FC | 	wrlong	local01, fp
1e030     A0 01 90 FD | 	jmp	#LR__2403
1e034                 | LR__2397
1e034                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1e034     08 4E 05 F1 | 	add	fp, #8
1e038     A7 26 02 FB | 	rdlong	local01, fp
1e03c     08 4E 85 F1 | 	sub	fp, #8
1e040     1D 26 0E F2 | 	cmp	local01, #29 wz
1e044     14 4E 05 A1 |  if_e	add	fp, #20
1e048     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e04c     14 4E 85 A1 |  if_e	sub	fp, #20
1e050     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e054     24 00 90 5D |  if_ne	jmp	#LR__2398
1e058     00 26 06 F6 | 	mov	local01, #0
1e05c     A7 28 02 FB | 	rdlong	local02, fp
1e060     0C 4E 05 F1 | 	add	fp, #12
1e064     A7 2A 02 FB | 	rdlong	local03, fp
1e068     0C 4E 85 F1 | 	sub	fp, #12
1e06c     15 29 5A F2 | 	cmps	local02, local03 wcz
1e070     01 26 66 16 |  if_a	neg	local01, #1
1e074     A7 26 62 FC | 	wrlong	local01, fp
1e078     58 01 90 FD | 	jmp	#LR__2403
1e07c                 | LR__2398
1e07c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1e07c     08 4E 05 F1 | 	add	fp, #8
1e080     A7 26 02 FB | 	rdlong	local01, fp
1e084     08 4E 85 F1 | 	sub	fp, #8
1e088     1D 26 0E F2 | 	cmp	local01, #29 wz
1e08c     14 4E 05 A1 |  if_e	add	fp, #20
1e090     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e094     14 4E 85 A1 |  if_e	sub	fp, #20
1e098     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e09c     24 00 90 5D |  if_ne	jmp	#LR__2399
1e0a0     00 26 06 F6 | 	mov	local01, #0
1e0a4     A7 28 02 FB | 	rdlong	local02, fp
1e0a8     0C 4E 05 F1 | 	add	fp, #12
1e0ac     A7 2A 02 FB | 	rdlong	local03, fp
1e0b0     0C 4E 85 F1 | 	sub	fp, #12
1e0b4     15 29 1A F2 | 	cmp	local02, local03 wcz
1e0b8     01 26 66 16 |  if_a	neg	local01, #1
1e0bc     A7 26 62 FC | 	wrlong	local01, fp
1e0c0     10 01 90 FD | 	jmp	#LR__2403
1e0c4                 | LR__2399
1e0c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1e0c4     08 4E 05 F1 | 	add	fp, #8
1e0c8     A7 26 02 FB | 	rdlong	local01, fp
1e0cc     08 4E 85 F1 | 	sub	fp, #8
1e0d0     2B 26 0E F2 | 	cmp	local01, #43 wz
1e0d4     14 4E 05 A1 |  if_e	add	fp, #20
1e0d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e0dc     14 4E 85 A1 |  if_e	sub	fp, #20
1e0e0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e0e4     30 00 90 5D |  if_ne	jmp	#LR__2400
1e0e8     00 26 06 F6 | 	mov	local01, #0
1e0ec     A7 12 02 FB | 	rdlong	arg01, fp
1e0f0     64 F3 BE FD | 	call	#_convertstring
1e0f4     FD 12 02 F6 | 	mov	arg01, result1
1e0f8     0C 4E 05 F1 | 	add	fp, #12
1e0fc     A7 14 02 FB | 	rdlong	arg02, fp
1e100     0C 4E 85 F1 | 	sub	fp, #12
1e104     60 7E B0 FD | 	call	#__system___string_cmp
1e108     01 FA 55 F2 | 	cmps	result1, #1 wc
1e10c     00 26 26 36 |  if_ae	not	local01, #0
1e110     A7 26 62 FC | 	wrlong	local01, fp
1e114     BC 00 90 FD | 	jmp	#LR__2403
1e118                 | LR__2400
1e118                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1e118     08 4E 05 F1 | 	add	fp, #8
1e11c     A7 26 02 FB | 	rdlong	local01, fp
1e120     08 4E 85 F1 | 	sub	fp, #8
1e124     1F 26 0E F2 | 	cmp	local01, #31 wz
1e128     14 4E 05 A1 |  if_e	add	fp, #20
1e12c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e130     14 4E 85 A1 |  if_e	sub	fp, #20
1e134     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e138     34 00 90 5D |  if_ne	jmp	#LR__2401
1e13c     00 26 06 F6 | 	mov	local01, #0
1e140     A7 28 02 FB | 	rdlong	local02, fp
1e144     0C 4E 05 F1 | 	add	fp, #12
1e148     A7 12 02 FB | 	rdlong	arg01, fp
1e14c     0C 4E 85 F1 | 	sub	fp, #12
1e150     04 F3 BE FD | 	call	#_convertstring
1e154     FD 14 02 F6 | 	mov	arg02, result1
1e158     14 13 02 F6 | 	mov	arg01, local02
1e15c     08 7E B0 FD | 	call	#__system___string_cmp
1e160     01 FA 55 F2 | 	cmps	result1, #1 wc
1e164     00 26 26 36 |  if_ae	not	local01, #0
1e168     A7 26 62 FC | 	wrlong	local01, fp
1e16c     64 00 90 FD | 	jmp	#LR__2403
1e170                 | LR__2401
1e170                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1e170     08 4E 05 F1 | 	add	fp, #8
1e174     A7 26 02 FB | 	rdlong	local01, fp
1e178     08 4E 85 F1 | 	sub	fp, #8
1e17c     2B 26 0E F2 | 	cmp	local01, #43 wz
1e180     14 4E 05 A1 |  if_e	add	fp, #20
1e184     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e188     14 4E 85 A1 |  if_e	sub	fp, #20
1e18c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e190     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e194     00 26 06 F6 | 	mov	local01, #0
1e198     A7 12 02 FB | 	rdlong	arg01, fp
1e19c     B8 F2 BE FD | 	call	#_convertstring
1e1a0     FD 28 02 F6 | 	mov	local02, result1
1e1a4     0C 4E 05 F1 | 	add	fp, #12
1e1a8     A7 12 02 FB | 	rdlong	arg01, fp
1e1ac     0C 4E 85 F1 | 	sub	fp, #12
1e1b0     A4 F2 BE FD | 	call	#_convertstring
1e1b4     FD 14 02 F6 | 	mov	arg02, result1
1e1b8     14 13 02 F6 | 	mov	arg01, local02
1e1bc     A8 7D B0 FD | 	call	#__system___string_cmp
1e1c0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e1c4     00 26 26 36 |  if_ae	not	local01, #0
1e1c8     A7 26 62 FC | 	wrlong	local01, fp
1e1cc     04 00 90 FD | 	jmp	#LR__2403
1e1d0                 | LR__2402
1e1d0     A7 00 68 FC | 	wrlong	#0, fp
1e1d4                 | LR__2403
1e1d4     08 4E 05 F1 | 	add	fp, #8
1e1d8     A7 38 68 FC | 	wrlong	#28, fp
1e1dc     08 4E 85 F1 | 	sub	fp, #8
1e1e0                 | ' t1.result.uresult=0
1e1e0                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e1e0     A7 26 0A FB | 	rdlong	local01, fp wz
1e1e4     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e1e8     A7 12 02 F6 | 	mov	arg01, fp
1e1ec     88 F1 BE FD | 	call	#_push
1e1f0     A7 F0 03 F6 | 	mov	ptra, fp
1e1f4     B2 00 A0 FD | 	call	#popregs_
1e1f8                 | _do_gt_ret
1e1f8     2D 00 64 FD | 	ret
1e1fc                 | 
1e1fc                 | ' 
1e1fc                 | ' '--------------------------------- less or equal (<=)
1e1fc                 | ' 
1e1fc                 | ' sub do_le
1e1fc                 | _do_le
1e1fc     05 4A 05 F6 | 	mov	COUNT_, #5
1e200     A8 00 A0 FD | 	call	#pushregs_
1e204     18 F0 07 F1 | 	add	ptra, #24
1e208     D4 F0 BE FD | 	call	#_pop
1e20c     FD 26 02 F6 | 	mov	local01, result1
1e210     FE 28 02 F6 | 	mov	local02, result2
1e214     FF 2A 02 F6 | 	mov	local03, result3
1e218     0C 4E 05 F1 | 	add	fp, #12
1e21c     A7 26 62 FC | 	wrlong	local01, fp
1e220     04 4E 05 F1 | 	add	fp, #4
1e224     A7 28 62 FC | 	wrlong	local02, fp
1e228     04 4E 05 F1 | 	add	fp, #4
1e22c     A7 2A 62 FC | 	wrlong	local03, fp
1e230     14 4E 85 F1 | 	sub	fp, #20
1e234     A8 F0 BE FD | 	call	#_pop
1e238     FF 2A 02 F6 | 	mov	local03, result3
1e23c     A7 FA 61 FC | 	wrlong	result1, fp
1e240     04 4E 05 F1 | 	add	fp, #4
1e244     A7 FC 61 FC | 	wrlong	result2, fp
1e248     04 4E 05 F1 | 	add	fp, #4
1e24c     A7 2A 62 FC | 	wrlong	local03, fp
1e250                 | ' 
1e250                 | ' t2=pop()
1e250                 | ' t1=pop()
1e250                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1e250     08 4E 85 F1 | 	sub	fp, #8
1e254     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e258     14 4E 05 A1 |  if_e	add	fp, #20
1e25c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e260     14 4E 85 A1 |  if_e	sub	fp, #20
1e264     16 2B 02 A6 |  if_e	mov	local03, local04
1e268     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e26c     28 00 90 5D |  if_ne	jmp	#LR__2410
1e270     00 26 06 F6 | 	mov	local01, #0
1e274     A7 12 02 FB | 	rdlong	arg01, fp
1e278     0C 4E 05 F1 | 	add	fp, #12
1e27c     A7 14 02 FB | 	rdlong	arg02, fp
1e280     0C 4E 85 F1 | 	sub	fp, #12
1e284     E0 7C B0 FD | 	call	#__system___string_cmp
1e288     01 FA 55 F2 | 	cmps	result1, #1 wc
1e28c     00 26 26 C6 |  if_b	not	local01, #0
1e290     A7 26 62 FC | 	wrlong	local01, fp
1e294     20 04 90 FD | 	jmp	#LR__2423
1e298                 | LR__2410
1e298                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1e298     08 4E 05 F1 | 	add	fp, #8
1e29c     A7 26 02 FB | 	rdlong	local01, fp
1e2a0     08 4E 85 F1 | 	sub	fp, #8
1e2a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2a8     14 4E 05 A1 |  if_e	add	fp, #20
1e2ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e2b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e2b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e2bc     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e2c0     00 26 06 F6 | 	mov	local01, #0
1e2c4     A7 12 02 FB | 	rdlong	arg01, fp
1e2c8     0C 4E 05 F1 | 	add	fp, #12
1e2cc     A7 14 02 FB | 	rdlong	arg02, fp
1e2d0     0C 4E 85 F1 | 	sub	fp, #12
1e2d4     01 16 06 F6 | 	mov	arg03, #1
1e2d8     14 AF B0 FD | 	call	#__system___float_cmp
1e2dc     01 FA 55 F2 | 	cmps	result1, #1 wc
1e2e0     00 26 26 C6 |  if_b	not	local01, #0
1e2e4     A7 26 62 FC | 	wrlong	local01, fp
1e2e8     CC 03 90 FD | 	jmp	#LR__2423
1e2ec                 | LR__2411
1e2ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1e2ec     08 4E 05 F1 | 	add	fp, #8
1e2f0     A7 26 02 FB | 	rdlong	local01, fp
1e2f4     08 4E 85 F1 | 	sub	fp, #8
1e2f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2fc     14 4E 05 A1 |  if_e	add	fp, #20
1e300     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e304     14 4E 85 A1 |  if_e	sub	fp, #20
1e308     16 2B 02 A6 |  if_e	mov	local03, local04
1e30c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e310     48 00 90 5D |  if_ne	jmp	#LR__2412
1e314     00 26 06 F6 | 	mov	local01, #0
1e318     A7 28 02 FB | 	rdlong	local02, fp
1e31c     0C 4E 05 F1 | 	add	fp, #12
1e320     A7 12 02 FB | 	rdlong	arg01, fp
1e324     0C 4E 85 F1 | 	sub	fp, #12
1e328     09 13 52 F6 | 	abs	arg01, arg01 wc
1e32c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e330     00 2E 06 36 |  if_ae	mov	local05, #0
1e334     80 A6 B0 FD | 	call	#__system___float_fromuns
1e338     17 FB 61 F5 | 	xor	result1, local05
1e33c     FD 14 02 F6 | 	mov	arg02, result1
1e340     14 13 02 F6 | 	mov	arg01, local02
1e344     01 16 06 F6 | 	mov	arg03, #1
1e348     A4 AE B0 FD | 	call	#__system___float_cmp
1e34c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e350     00 26 26 C6 |  if_b	not	local01, #0
1e354     A7 26 62 FC | 	wrlong	local01, fp
1e358     5C 03 90 FD | 	jmp	#LR__2423
1e35c                 | LR__2412
1e35c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1e35c     08 4E 05 F1 | 	add	fp, #8
1e360     A7 26 02 FB | 	rdlong	local01, fp
1e364     08 4E 85 F1 | 	sub	fp, #8
1e368     1E 26 0E F2 | 	cmp	local01, #30 wz
1e36c     14 4E 05 A1 |  if_e	add	fp, #20
1e370     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e374     14 4E 85 A1 |  if_e	sub	fp, #20
1e378     16 2B 02 A6 |  if_e	mov	local03, local04
1e37c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e380     38 00 90 5D |  if_ne	jmp	#LR__2413
1e384     00 26 06 F6 | 	mov	local01, #0
1e388     A7 28 02 FB | 	rdlong	local02, fp
1e38c     0C 4E 05 F1 | 	add	fp, #12
1e390     A7 12 02 FB | 	rdlong	arg01, fp
1e394     0C 4E 85 F1 | 	sub	fp, #12
1e398     1C A6 B0 FD | 	call	#__system___float_fromuns
1e39c     FD 14 02 F6 | 	mov	arg02, result1
1e3a0     14 13 02 F6 | 	mov	arg01, local02
1e3a4     01 16 06 F6 | 	mov	arg03, #1
1e3a8     44 AE B0 FD | 	call	#__system___float_cmp
1e3ac     01 FA 55 F2 | 	cmps	result1, #1 wc
1e3b0     00 26 26 C6 |  if_b	not	local01, #0
1e3b4     A7 26 62 FC | 	wrlong	local01, fp
1e3b8     FC 02 90 FD | 	jmp	#LR__2423
1e3bc                 | LR__2413
1e3bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1e3bc     08 4E 05 F1 | 	add	fp, #8
1e3c0     A7 26 02 FB | 	rdlong	local01, fp
1e3c4     08 4E 85 F1 | 	sub	fp, #8
1e3c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3cc     14 4E 05 A1 |  if_e	add	fp, #20
1e3d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e3d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e3dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e3e0     44 00 90 5D |  if_ne	jmp	#LR__2414
1e3e4     00 26 06 F6 | 	mov	local01, #0
1e3e8     A7 12 02 FB | 	rdlong	arg01, fp
1e3ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1e3f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e3f4     00 2E 06 36 |  if_ae	mov	local05, #0
1e3f8     BC A5 B0 FD | 	call	#__system___float_fromuns
1e3fc     17 FB 61 F5 | 	xor	result1, local05
1e400     FD 12 02 F6 | 	mov	arg01, result1
1e404     0C 4E 05 F1 | 	add	fp, #12
1e408     A7 14 02 FB | 	rdlong	arg02, fp
1e40c     0C 4E 85 F1 | 	sub	fp, #12
1e410     01 16 06 F6 | 	mov	arg03, #1
1e414     D8 AD B0 FD | 	call	#__system___float_cmp
1e418     01 FA 55 F2 | 	cmps	result1, #1 wc
1e41c     00 26 26 C6 |  if_b	not	local01, #0
1e420     A7 26 62 FC | 	wrlong	local01, fp
1e424     90 02 90 FD | 	jmp	#LR__2423
1e428                 | LR__2414
1e428                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1e428     08 4E 05 F1 | 	add	fp, #8
1e42c     A7 26 02 FB | 	rdlong	local01, fp
1e430     08 4E 85 F1 | 	sub	fp, #8
1e434     1C 26 0E F2 | 	cmp	local01, #28 wz
1e438     14 4E 05 A1 |  if_e	add	fp, #20
1e43c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e440     14 4E 85 A1 |  if_e	sub	fp, #20
1e444     16 2B 02 A6 |  if_e	mov	local03, local04
1e448     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e44c     24 00 90 5D |  if_ne	jmp	#LR__2415
1e450     00 26 06 F6 | 	mov	local01, #0
1e454     A7 28 02 FB | 	rdlong	local02, fp
1e458     0C 4E 05 F1 | 	add	fp, #12
1e45c     A7 2A 02 FB | 	rdlong	local03, fp
1e460     0C 4E 85 F1 | 	sub	fp, #12
1e464     15 29 5A F2 | 	cmps	local02, local03 wcz
1e468     01 26 66 E6 |  if_be	neg	local01, #1
1e46c     A7 26 62 FC | 	wrlong	local01, fp
1e470     44 02 90 FD | 	jmp	#LR__2423
1e474                 | LR__2415
1e474                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1e474     08 4E 05 F1 | 	add	fp, #8
1e478     A7 26 02 FB | 	rdlong	local01, fp
1e47c     08 4E 85 F1 | 	sub	fp, #8
1e480     1C 26 0E F2 | 	cmp	local01, #28 wz
1e484     14 4E 05 A1 |  if_e	add	fp, #20
1e488     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e48c     14 4E 85 A1 |  if_e	sub	fp, #20
1e490     16 2B 02 A6 |  if_e	mov	local03, local04
1e494     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e498     24 00 90 5D |  if_ne	jmp	#LR__2416
1e49c     00 26 06 F6 | 	mov	local01, #0
1e4a0     A7 28 02 FB | 	rdlong	local02, fp
1e4a4     0C 4E 05 F1 | 	add	fp, #12
1e4a8     A7 2A 02 FB | 	rdlong	local03, fp
1e4ac     0C 4E 85 F1 | 	sub	fp, #12
1e4b0     15 29 5A F2 | 	cmps	local02, local03 wcz
1e4b4     01 26 66 E6 |  if_be	neg	local01, #1
1e4b8     A7 26 62 FC | 	wrlong	local01, fp
1e4bc     F8 01 90 FD | 	jmp	#LR__2423
1e4c0                 | LR__2416
1e4c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1e4c0     08 4E 05 F1 | 	add	fp, #8
1e4c4     A7 26 02 FB | 	rdlong	local01, fp
1e4c8     08 4E 85 F1 | 	sub	fp, #8
1e4cc     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4d0     14 4E 05 A1 |  if_e	add	fp, #20
1e4d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e4d8     14 4E 85 A1 |  if_e	sub	fp, #20
1e4dc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e4e0     34 00 90 5D |  if_ne	jmp	#LR__2417
1e4e4     00 26 06 F6 | 	mov	local01, #0
1e4e8     A7 12 02 FB | 	rdlong	arg01, fp
1e4ec     C8 A4 B0 FD | 	call	#__system___float_fromuns
1e4f0     FD 12 02 F6 | 	mov	arg01, result1
1e4f4     0C 4E 05 F1 | 	add	fp, #12
1e4f8     A7 14 02 FB | 	rdlong	arg02, fp
1e4fc     0C 4E 85 F1 | 	sub	fp, #12
1e500     01 16 06 F6 | 	mov	arg03, #1
1e504     E8 AC B0 FD | 	call	#__system___float_cmp
1e508     01 FA 55 F2 | 	cmps	result1, #1 wc
1e50c     00 26 26 C6 |  if_b	not	local01, #0
1e510     A7 26 62 FC | 	wrlong	local01, fp
1e514     A0 01 90 FD | 	jmp	#LR__2423
1e518                 | LR__2417
1e518                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1e518     08 4E 05 F1 | 	add	fp, #8
1e51c     A7 26 02 FB | 	rdlong	local01, fp
1e520     08 4E 85 F1 | 	sub	fp, #8
1e524     1D 26 0E F2 | 	cmp	local01, #29 wz
1e528     14 4E 05 A1 |  if_e	add	fp, #20
1e52c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e530     14 4E 85 A1 |  if_e	sub	fp, #20
1e534     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e538     24 00 90 5D |  if_ne	jmp	#LR__2418
1e53c     00 26 06 F6 | 	mov	local01, #0
1e540     A7 28 02 FB | 	rdlong	local02, fp
1e544     0C 4E 05 F1 | 	add	fp, #12
1e548     A7 2A 02 FB | 	rdlong	local03, fp
1e54c     0C 4E 85 F1 | 	sub	fp, #12
1e550     15 29 5A F2 | 	cmps	local02, local03 wcz
1e554     01 26 66 E6 |  if_be	neg	local01, #1
1e558     A7 26 62 FC | 	wrlong	local01, fp
1e55c     58 01 90 FD | 	jmp	#LR__2423
1e560                 | LR__2418
1e560                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1e560     08 4E 05 F1 | 	add	fp, #8
1e564     A7 26 02 FB | 	rdlong	local01, fp
1e568     08 4E 85 F1 | 	sub	fp, #8
1e56c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e570     14 4E 05 A1 |  if_e	add	fp, #20
1e574     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e578     14 4E 85 A1 |  if_e	sub	fp, #20
1e57c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e580     24 00 90 5D |  if_ne	jmp	#LR__2419
1e584     00 26 06 F6 | 	mov	local01, #0
1e588     A7 28 02 FB | 	rdlong	local02, fp
1e58c     0C 4E 05 F1 | 	add	fp, #12
1e590     A7 2A 02 FB | 	rdlong	local03, fp
1e594     0C 4E 85 F1 | 	sub	fp, #12
1e598     15 29 1A F2 | 	cmp	local02, local03 wcz
1e59c     01 26 66 E6 |  if_be	neg	local01, #1
1e5a0     A7 26 62 FC | 	wrlong	local01, fp
1e5a4     10 01 90 FD | 	jmp	#LR__2423
1e5a8                 | LR__2419
1e5a8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1e5a8     08 4E 05 F1 | 	add	fp, #8
1e5ac     A7 26 02 FB | 	rdlong	local01, fp
1e5b0     08 4E 85 F1 | 	sub	fp, #8
1e5b4     2B 26 0E F2 | 	cmp	local01, #43 wz
1e5b8     14 4E 05 A1 |  if_e	add	fp, #20
1e5bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5c0     14 4E 85 A1 |  if_e	sub	fp, #20
1e5c4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e5c8     30 00 90 5D |  if_ne	jmp	#LR__2420
1e5cc     00 26 06 F6 | 	mov	local01, #0
1e5d0     A7 12 02 FB | 	rdlong	arg01, fp
1e5d4     80 EE BE FD | 	call	#_convertstring
1e5d8     FD 12 02 F6 | 	mov	arg01, result1
1e5dc     0C 4E 05 F1 | 	add	fp, #12
1e5e0     A7 14 02 FB | 	rdlong	arg02, fp
1e5e4     0C 4E 85 F1 | 	sub	fp, #12
1e5e8     7C 79 B0 FD | 	call	#__system___string_cmp
1e5ec     01 FA 55 F2 | 	cmps	result1, #1 wc
1e5f0     00 26 26 C6 |  if_b	not	local01, #0
1e5f4     A7 26 62 FC | 	wrlong	local01, fp
1e5f8     BC 00 90 FD | 	jmp	#LR__2423
1e5fc                 | LR__2420
1e5fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1e5fc     08 4E 05 F1 | 	add	fp, #8
1e600     A7 26 02 FB | 	rdlong	local01, fp
1e604     08 4E 85 F1 | 	sub	fp, #8
1e608     1F 26 0E F2 | 	cmp	local01, #31 wz
1e60c     14 4E 05 A1 |  if_e	add	fp, #20
1e610     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e614     14 4E 85 A1 |  if_e	sub	fp, #20
1e618     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e61c     34 00 90 5D |  if_ne	jmp	#LR__2421
1e620     00 26 06 F6 | 	mov	local01, #0
1e624     A7 28 02 FB | 	rdlong	local02, fp
1e628     0C 4E 05 F1 | 	add	fp, #12
1e62c     A7 12 02 FB | 	rdlong	arg01, fp
1e630     0C 4E 85 F1 | 	sub	fp, #12
1e634     20 EE BE FD | 	call	#_convertstring
1e638     FD 14 02 F6 | 	mov	arg02, result1
1e63c     14 13 02 F6 | 	mov	arg01, local02
1e640     24 79 B0 FD | 	call	#__system___string_cmp
1e644     01 FA 55 F2 | 	cmps	result1, #1 wc
1e648     00 26 26 C6 |  if_b	not	local01, #0
1e64c     A7 26 62 FC | 	wrlong	local01, fp
1e650     64 00 90 FD | 	jmp	#LR__2423
1e654                 | LR__2421
1e654                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1e654     08 4E 05 F1 | 	add	fp, #8
1e658     A7 26 02 FB | 	rdlong	local01, fp
1e65c     08 4E 85 F1 | 	sub	fp, #8
1e660     2B 26 0E F2 | 	cmp	local01, #43 wz
1e664     14 4E 05 A1 |  if_e	add	fp, #20
1e668     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e66c     14 4E 85 A1 |  if_e	sub	fp, #20
1e670     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e674     3C 00 90 5D |  if_ne	jmp	#LR__2422
1e678     00 26 06 F6 | 	mov	local01, #0
1e67c     A7 12 02 FB | 	rdlong	arg01, fp
1e680     D4 ED BE FD | 	call	#_convertstring
1e684     FD 28 02 F6 | 	mov	local02, result1
1e688     0C 4E 05 F1 | 	add	fp, #12
1e68c     A7 12 02 FB | 	rdlong	arg01, fp
1e690     0C 4E 85 F1 | 	sub	fp, #12
1e694     C0 ED BE FD | 	call	#_convertstring
1e698     FD 14 02 F6 | 	mov	arg02, result1
1e69c     14 13 02 F6 | 	mov	arg01, local02
1e6a0     C4 78 B0 FD | 	call	#__system___string_cmp
1e6a4     01 FA 55 F2 | 	cmps	result1, #1 wc
1e6a8     00 26 26 C6 |  if_b	not	local01, #0
1e6ac     A7 26 62 FC | 	wrlong	local01, fp
1e6b0     04 00 90 FD | 	jmp	#LR__2423
1e6b4                 | LR__2422
1e6b4     A7 00 68 FC | 	wrlong	#0, fp
1e6b8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e6b8                 | LR__2423
1e6b8     08 4E 05 F1 | 	add	fp, #8
1e6bc     A7 38 68 FC | 	wrlong	#28, fp
1e6c0     08 4E 85 F1 | 	sub	fp, #8
1e6c4     A7 12 02 F6 | 	mov	arg01, fp
1e6c8     AC EC BE FD | 	call	#_push
1e6cc     A7 F0 03 F6 | 	mov	ptra, fp
1e6d0     B2 00 A0 FD | 	call	#popregs_
1e6d4                 | _do_le_ret
1e6d4     2D 00 64 FD | 	ret
1e6d8                 | 
1e6d8                 | ' 
1e6d8                 | ' '--------------------------------- less than (<)
1e6d8                 | ' 
1e6d8                 | ' sub do_lt
1e6d8                 | _do_lt
1e6d8     05 4A 05 F6 | 	mov	COUNT_, #5
1e6dc     A8 00 A0 FD | 	call	#pushregs_
1e6e0     18 F0 07 F1 | 	add	ptra, #24
1e6e4     F8 EB BE FD | 	call	#_pop
1e6e8     FD 26 02 F6 | 	mov	local01, result1
1e6ec     FE 28 02 F6 | 	mov	local02, result2
1e6f0     FF 2A 02 F6 | 	mov	local03, result3
1e6f4     0C 4E 05 F1 | 	add	fp, #12
1e6f8     A7 26 62 FC | 	wrlong	local01, fp
1e6fc     04 4E 05 F1 | 	add	fp, #4
1e700     A7 28 62 FC | 	wrlong	local02, fp
1e704     04 4E 05 F1 | 	add	fp, #4
1e708     A7 2A 62 FC | 	wrlong	local03, fp
1e70c     14 4E 85 F1 | 	sub	fp, #20
1e710     CC EB BE FD | 	call	#_pop
1e714     FF 2A 02 F6 | 	mov	local03, result3
1e718     A7 FA 61 FC | 	wrlong	result1, fp
1e71c     04 4E 05 F1 | 	add	fp, #4
1e720     A7 FC 61 FC | 	wrlong	result2, fp
1e724     04 4E 05 F1 | 	add	fp, #4
1e728     A7 2A 62 FC | 	wrlong	local03, fp
1e72c                 | ' 
1e72c                 | ' t2=pop()
1e72c                 | ' t1=pop()
1e72c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1e72c     08 4E 85 F1 | 	sub	fp, #8
1e730     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e734     14 4E 05 A1 |  if_e	add	fp, #20
1e738     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e73c     14 4E 85 A1 |  if_e	sub	fp, #20
1e740     16 2B 02 A6 |  if_e	mov	local03, local04
1e744     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e748     28 00 90 5D |  if_ne	jmp	#LR__2430
1e74c     00 26 06 F6 | 	mov	local01, #0
1e750     A7 12 02 FB | 	rdlong	arg01, fp
1e754     0C 4E 05 F1 | 	add	fp, #12
1e758     A7 14 02 FB | 	rdlong	arg02, fp
1e75c     0C 4E 85 F1 | 	sub	fp, #12
1e760     04 78 B0 FD | 	call	#__system___string_cmp
1e764     00 FA 55 F2 | 	cmps	result1, #0 wc
1e768     00 26 26 C6 |  if_b	not	local01, #0
1e76c     A7 26 62 FC | 	wrlong	local01, fp
1e770     10 04 90 FD | 	jmp	#LR__2443
1e774                 | LR__2430
1e774                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1e774     08 4E 05 F1 | 	add	fp, #8
1e778     A7 26 02 FB | 	rdlong	local01, fp
1e77c     08 4E 85 F1 | 	sub	fp, #8
1e780     1E 26 0E F2 | 	cmp	local01, #30 wz
1e784     14 4E 05 A1 |  if_e	add	fp, #20
1e788     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e78c     14 4E 85 A1 |  if_e	sub	fp, #20
1e790     16 2B 02 A6 |  if_e	mov	local03, local04
1e794     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e798     2C 00 90 5D |  if_ne	jmp	#LR__2431
1e79c     00 26 06 F6 | 	mov	local01, #0
1e7a0     A7 12 02 FB | 	rdlong	arg01, fp
1e7a4     0C 4E 05 F1 | 	add	fp, #12
1e7a8     A7 14 02 FB | 	rdlong	arg02, fp
1e7ac     0C 4E 85 F1 | 	sub	fp, #12
1e7b0     01 16 06 F6 | 	mov	arg03, #1
1e7b4     38 AA B0 FD | 	call	#__system___float_cmp
1e7b8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e7bc     00 26 26 C6 |  if_b	not	local01, #0
1e7c0     A7 26 62 FC | 	wrlong	local01, fp
1e7c4     BC 03 90 FD | 	jmp	#LR__2443
1e7c8                 | LR__2431
1e7c8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1e7c8     08 4E 05 F1 | 	add	fp, #8
1e7cc     A7 26 02 FB | 	rdlong	local01, fp
1e7d0     08 4E 85 F1 | 	sub	fp, #8
1e7d4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e7d8     14 4E 05 A1 |  if_e	add	fp, #20
1e7dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e7e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e7e4     16 2B 02 A6 |  if_e	mov	local03, local04
1e7e8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e7ec     48 00 90 5D |  if_ne	jmp	#LR__2432
1e7f0     00 26 06 F6 | 	mov	local01, #0
1e7f4     A7 28 02 FB | 	rdlong	local02, fp
1e7f8     0C 4E 05 F1 | 	add	fp, #12
1e7fc     A7 12 02 FB | 	rdlong	arg01, fp
1e800     0C 4E 85 F1 | 	sub	fp, #12
1e804     09 13 52 F6 | 	abs	arg01, arg01 wc
1e808     1F 2E C6 C9 |  if_b	decod	local05, #31
1e80c     00 2E 06 36 |  if_ae	mov	local05, #0
1e810     A4 A1 B0 FD | 	call	#__system___float_fromuns
1e814     17 FB 61 F5 | 	xor	result1, local05
1e818     FD 14 02 F6 | 	mov	arg02, result1
1e81c     14 13 02 F6 | 	mov	arg01, local02
1e820     01 16 06 F6 | 	mov	arg03, #1
1e824     C8 A9 B0 FD | 	call	#__system___float_cmp
1e828     00 FA 55 F2 | 	cmps	result1, #0 wc
1e82c     00 26 26 C6 |  if_b	not	local01, #0
1e830     A7 26 62 FC | 	wrlong	local01, fp
1e834     4C 03 90 FD | 	jmp	#LR__2443
1e838                 | LR__2432
1e838                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1e838     08 4E 05 F1 | 	add	fp, #8
1e83c     A7 26 02 FB | 	rdlong	local01, fp
1e840     08 4E 85 F1 | 	sub	fp, #8
1e844     1E 26 0E F2 | 	cmp	local01, #30 wz
1e848     14 4E 05 A1 |  if_e	add	fp, #20
1e84c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e850     14 4E 85 A1 |  if_e	sub	fp, #20
1e854     16 2B 02 A6 |  if_e	mov	local03, local04
1e858     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e85c     38 00 90 5D |  if_ne	jmp	#LR__2433
1e860     00 26 06 F6 | 	mov	local01, #0
1e864     A7 28 02 FB | 	rdlong	local02, fp
1e868     0C 4E 05 F1 | 	add	fp, #12
1e86c     A7 12 02 FB | 	rdlong	arg01, fp
1e870     0C 4E 85 F1 | 	sub	fp, #12
1e874     40 A1 B0 FD | 	call	#__system___float_fromuns
1e878     FD 14 02 F6 | 	mov	arg02, result1
1e87c     14 13 02 F6 | 	mov	arg01, local02
1e880     01 16 06 F6 | 	mov	arg03, #1
1e884     68 A9 B0 FD | 	call	#__system___float_cmp
1e888     00 FA 55 F2 | 	cmps	result1, #0 wc
1e88c     00 26 26 C6 |  if_b	not	local01, #0
1e890     A7 26 62 FC | 	wrlong	local01, fp
1e894     EC 02 90 FD | 	jmp	#LR__2443
1e898                 | LR__2433
1e898                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1e898     08 4E 05 F1 | 	add	fp, #8
1e89c     A7 26 02 FB | 	rdlong	local01, fp
1e8a0     08 4E 85 F1 | 	sub	fp, #8
1e8a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8a8     14 4E 05 A1 |  if_e	add	fp, #20
1e8ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e8b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e8b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e8bc     44 00 90 5D |  if_ne	jmp	#LR__2434
1e8c0     00 26 06 F6 | 	mov	local01, #0
1e8c4     A7 12 02 FB | 	rdlong	arg01, fp
1e8c8     09 13 52 F6 | 	abs	arg01, arg01 wc
1e8cc     1F 2E C6 C9 |  if_b	decod	local05, #31
1e8d0     00 2E 06 36 |  if_ae	mov	local05, #0
1e8d4     E0 A0 B0 FD | 	call	#__system___float_fromuns
1e8d8     17 FB 61 F5 | 	xor	result1, local05
1e8dc     FD 12 02 F6 | 	mov	arg01, result1
1e8e0     0C 4E 05 F1 | 	add	fp, #12
1e8e4     A7 14 02 FB | 	rdlong	arg02, fp
1e8e8     0C 4E 85 F1 | 	sub	fp, #12
1e8ec     01 16 06 F6 | 	mov	arg03, #1
1e8f0     FC A8 B0 FD | 	call	#__system___float_cmp
1e8f4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e8f8     00 26 26 C6 |  if_b	not	local01, #0
1e8fc     A7 26 62 FC | 	wrlong	local01, fp
1e900     80 02 90 FD | 	jmp	#LR__2443
1e904                 | LR__2434
1e904                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1e904     08 4E 05 F1 | 	add	fp, #8
1e908     A7 26 02 FB | 	rdlong	local01, fp
1e90c     08 4E 85 F1 | 	sub	fp, #8
1e910     1C 26 0E F2 | 	cmp	local01, #28 wz
1e914     14 4E 05 A1 |  if_e	add	fp, #20
1e918     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e91c     14 4E 85 A1 |  if_e	sub	fp, #20
1e920     16 2B 02 A6 |  if_e	mov	local03, local04
1e924     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e928     20 00 90 5D |  if_ne	jmp	#LR__2435
1e92c     A7 28 02 FB | 	rdlong	local02, fp
1e930     0C 4E 05 F1 | 	add	fp, #12
1e934     A7 2A 02 FB | 	rdlong	local03, fp
1e938     0C 4E 85 F1 | 	sub	fp, #12
1e93c     15 29 52 F2 | 	cmps	local02, local03 wc
1e940     13 27 A2 F1 | 	subx	local01, local01
1e944     A7 26 62 FC | 	wrlong	local01, fp
1e948     38 02 90 FD | 	jmp	#LR__2443
1e94c                 | LR__2435
1e94c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1e94c     08 4E 05 F1 | 	add	fp, #8
1e950     A7 26 02 FB | 	rdlong	local01, fp
1e954     08 4E 85 F1 | 	sub	fp, #8
1e958     1C 26 0E F2 | 	cmp	local01, #28 wz
1e95c     14 4E 05 A1 |  if_e	add	fp, #20
1e960     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e964     14 4E 85 A1 |  if_e	sub	fp, #20
1e968     16 2B 02 A6 |  if_e	mov	local03, local04
1e96c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e970     20 00 90 5D |  if_ne	jmp	#LR__2436
1e974     A7 28 02 FB | 	rdlong	local02, fp
1e978     0C 4E 05 F1 | 	add	fp, #12
1e97c     A7 2A 02 FB | 	rdlong	local03, fp
1e980     0C 4E 85 F1 | 	sub	fp, #12
1e984     15 29 52 F2 | 	cmps	local02, local03 wc
1e988     13 27 A2 F1 | 	subx	local01, local01
1e98c     A7 26 62 FC | 	wrlong	local01, fp
1e990     F0 01 90 FD | 	jmp	#LR__2443
1e994                 | LR__2436
1e994                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1e994     08 4E 05 F1 | 	add	fp, #8
1e998     A7 26 02 FB | 	rdlong	local01, fp
1e99c     08 4E 85 F1 | 	sub	fp, #8
1e9a0     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9a4     14 4E 05 A1 |  if_e	add	fp, #20
1e9a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e9ac     14 4E 85 A1 |  if_e	sub	fp, #20
1e9b0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e9b4     34 00 90 5D |  if_ne	jmp	#LR__2437
1e9b8     00 26 06 F6 | 	mov	local01, #0
1e9bc     A7 12 02 FB | 	rdlong	arg01, fp
1e9c0     F4 9F B0 FD | 	call	#__system___float_fromuns
1e9c4     FD 12 02 F6 | 	mov	arg01, result1
1e9c8     0C 4E 05 F1 | 	add	fp, #12
1e9cc     A7 14 02 FB | 	rdlong	arg02, fp
1e9d0     0C 4E 85 F1 | 	sub	fp, #12
1e9d4     01 16 06 F6 | 	mov	arg03, #1
1e9d8     14 A8 B0 FD | 	call	#__system___float_cmp
1e9dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1e9e0     00 26 26 C6 |  if_b	not	local01, #0
1e9e4     A7 26 62 FC | 	wrlong	local01, fp
1e9e8     98 01 90 FD | 	jmp	#LR__2443
1e9ec                 | LR__2437
1e9ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1e9ec     08 4E 05 F1 | 	add	fp, #8
1e9f0     A7 26 02 FB | 	rdlong	local01, fp
1e9f4     08 4E 85 F1 | 	sub	fp, #8
1e9f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9fc     14 4E 05 A1 |  if_e	add	fp, #20
1ea00     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea04     14 4E 85 A1 |  if_e	sub	fp, #20
1ea08     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ea0c     20 00 90 5D |  if_ne	jmp	#LR__2438
1ea10     A7 28 02 FB | 	rdlong	local02, fp
1ea14     0C 4E 05 F1 | 	add	fp, #12
1ea18     A7 2A 02 FB | 	rdlong	local03, fp
1ea1c     0C 4E 85 F1 | 	sub	fp, #12
1ea20     15 29 52 F2 | 	cmps	local02, local03 wc
1ea24     13 27 A2 F1 | 	subx	local01, local01
1ea28     A7 26 62 FC | 	wrlong	local01, fp
1ea2c     54 01 90 FD | 	jmp	#LR__2443
1ea30                 | LR__2438
1ea30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1ea30     08 4E 05 F1 | 	add	fp, #8
1ea34     A7 26 02 FB | 	rdlong	local01, fp
1ea38     08 4E 85 F1 | 	sub	fp, #8
1ea3c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea40     14 4E 05 A1 |  if_e	add	fp, #20
1ea44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea48     14 4E 85 A1 |  if_e	sub	fp, #20
1ea4c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea50     20 00 90 5D |  if_ne	jmp	#LR__2439
1ea54     A7 28 02 FB | 	rdlong	local02, fp
1ea58     0C 4E 05 F1 | 	add	fp, #12
1ea5c     A7 2A 02 FB | 	rdlong	local03, fp
1ea60     0C 4E 85 F1 | 	sub	fp, #12
1ea64     15 29 12 F2 | 	cmp	local02, local03 wc
1ea68     13 27 A2 F1 | 	subx	local01, local01
1ea6c     A7 26 62 FC | 	wrlong	local01, fp
1ea70     10 01 90 FD | 	jmp	#LR__2443
1ea74                 | LR__2439
1ea74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1ea74     08 4E 05 F1 | 	add	fp, #8
1ea78     A7 26 02 FB | 	rdlong	local01, fp
1ea7c     08 4E 85 F1 | 	sub	fp, #8
1ea80     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea84     14 4E 05 A1 |  if_e	add	fp, #20
1ea88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea90     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea94     30 00 90 5D |  if_ne	jmp	#LR__2440
1ea98     00 26 06 F6 | 	mov	local01, #0
1ea9c     A7 12 02 FB | 	rdlong	arg01, fp
1eaa0     B4 E9 BE FD | 	call	#_convertstring
1eaa4     FD 12 02 F6 | 	mov	arg01, result1
1eaa8     0C 4E 05 F1 | 	add	fp, #12
1eaac     A7 14 02 FB | 	rdlong	arg02, fp
1eab0     0C 4E 85 F1 | 	sub	fp, #12
1eab4     B0 74 B0 FD | 	call	#__system___string_cmp
1eab8     00 FA 55 F2 | 	cmps	result1, #0 wc
1eabc     00 26 26 C6 |  if_b	not	local01, #0
1eac0     A7 26 62 FC | 	wrlong	local01, fp
1eac4     BC 00 90 FD | 	jmp	#LR__2443
1eac8                 | LR__2440
1eac8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1eac8     08 4E 05 F1 | 	add	fp, #8
1eacc     A7 26 02 FB | 	rdlong	local01, fp
1ead0     08 4E 85 F1 | 	sub	fp, #8
1ead4     1F 26 0E F2 | 	cmp	local01, #31 wz
1ead8     14 4E 05 A1 |  if_e	add	fp, #20
1eadc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eae0     14 4E 85 A1 |  if_e	sub	fp, #20
1eae4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eae8     34 00 90 5D |  if_ne	jmp	#LR__2441
1eaec     00 26 06 F6 | 	mov	local01, #0
1eaf0     A7 28 02 FB | 	rdlong	local02, fp
1eaf4     0C 4E 05 F1 | 	add	fp, #12
1eaf8     A7 12 02 FB | 	rdlong	arg01, fp
1eafc     0C 4E 85 F1 | 	sub	fp, #12
1eb00     54 E9 BE FD | 	call	#_convertstring
1eb04     FD 14 02 F6 | 	mov	arg02, result1
1eb08     14 13 02 F6 | 	mov	arg01, local02
1eb0c     58 74 B0 FD | 	call	#__system___string_cmp
1eb10     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb14     00 26 26 C6 |  if_b	not	local01, #0
1eb18     A7 26 62 FC | 	wrlong	local01, fp
1eb1c     64 00 90 FD | 	jmp	#LR__2443
1eb20                 | LR__2441
1eb20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1eb20     08 4E 05 F1 | 	add	fp, #8
1eb24     A7 26 02 FB | 	rdlong	local01, fp
1eb28     08 4E 85 F1 | 	sub	fp, #8
1eb2c     2B 26 0E F2 | 	cmp	local01, #43 wz
1eb30     14 4E 05 A1 |  if_e	add	fp, #20
1eb34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb38     14 4E 85 A1 |  if_e	sub	fp, #20
1eb3c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb40     3C 00 90 5D |  if_ne	jmp	#LR__2442
1eb44     00 26 06 F6 | 	mov	local01, #0
1eb48     A7 12 02 FB | 	rdlong	arg01, fp
1eb4c     08 E9 BE FD | 	call	#_convertstring
1eb50     FD 28 02 F6 | 	mov	local02, result1
1eb54     0C 4E 05 F1 | 	add	fp, #12
1eb58     A7 12 02 FB | 	rdlong	arg01, fp
1eb5c     0C 4E 85 F1 | 	sub	fp, #12
1eb60     F4 E8 BE FD | 	call	#_convertstring
1eb64     FD 14 02 F6 | 	mov	arg02, result1
1eb68     14 13 02 F6 | 	mov	arg01, local02
1eb6c     F8 73 B0 FD | 	call	#__system___string_cmp
1eb70     00 FA 55 F2 | 	cmps	result1, #0 wc
1eb74     00 26 26 C6 |  if_b	not	local01, #0
1eb78     A7 26 62 FC | 	wrlong	local01, fp
1eb7c     04 00 90 FD | 	jmp	#LR__2443
1eb80                 | LR__2442
1eb80     A7 00 68 FC | 	wrlong	#0, fp
1eb84                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eb84                 | LR__2443
1eb84     08 4E 05 F1 | 	add	fp, #8
1eb88     A7 38 68 FC | 	wrlong	#28, fp
1eb8c     08 4E 85 F1 | 	sub	fp, #8
1eb90     A7 12 02 F6 | 	mov	arg01, fp
1eb94     E0 E7 BE FD | 	call	#_push
1eb98     A7 F0 03 F6 | 	mov	ptra, fp
1eb9c     B2 00 A0 FD | 	call	#popregs_
1eba0                 | _do_lt_ret
1eba0     2D 00 64 FD | 	ret
1eba4                 | 
1eba4                 | ' 
1eba4                 | ' '--------------------------------- minus (-)
1eba4                 | ' 
1eba4                 | ' sub do_minus
1eba4                 | _do_minus
1eba4     05 4A 05 F6 | 	mov	COUNT_, #5
1eba8     A8 00 A0 FD | 	call	#pushregs_
1ebac     18 F0 07 F1 | 	add	ptra, #24
1ebb0     2C E7 BE FD | 	call	#_pop
1ebb4     FD 26 02 F6 | 	mov	local01, result1
1ebb8     FE 28 02 F6 | 	mov	local02, result2
1ebbc     FF 2A 02 F6 | 	mov	local03, result3
1ebc0     0C 4E 05 F1 | 	add	fp, #12
1ebc4     A7 26 62 FC | 	wrlong	local01, fp
1ebc8     04 4E 05 F1 | 	add	fp, #4
1ebcc     A7 28 62 FC | 	wrlong	local02, fp
1ebd0     04 4E 05 F1 | 	add	fp, #4
1ebd4     A7 2A 62 FC | 	wrlong	local03, fp
1ebd8     14 4E 85 F1 | 	sub	fp, #20
1ebdc     00 E7 BE FD | 	call	#_pop
1ebe0     FF 2A 02 F6 | 	mov	local03, result3
1ebe4     A7 FA 61 FC | 	wrlong	result1, fp
1ebe8     04 4E 05 F1 | 	add	fp, #4
1ebec     A7 FC 61 FC | 	wrlong	result2, fp
1ebf0     04 4E 05 F1 | 	add	fp, #4
1ebf4     A7 2A 62 FC | 	wrlong	local03, fp
1ebf8                 | ' 
1ebf8                 | ' t2=pop()
1ebf8                 | ' t1=pop()
1ebf8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1ebf8     08 4E 85 F1 | 	sub	fp, #8
1ebfc     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ec00     14 4E 05 A1 |  if_e	add	fp, #20
1ec04     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec08     14 4E 85 A1 |  if_e	sub	fp, #20
1ec0c     16 2B 02 A6 |  if_e	mov	local03, local04
1ec10     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ec14     5C 00 90 5D |  if_ne	jmp	#LR__2451
1ec18                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1ec18     0C 4E 05 F1 | 	add	fp, #12
1ec1c     A7 26 02 FB | 	rdlong	local01, fp
1ec20     0C 4E 85 F1 | 	sub	fp, #12
1ec24     A7 2A 02 FB | 	rdlong	local03, fp
1ec28     15 27 12 F2 | 	cmp	local01, local03 wc
1ec2c     1C 00 90 3D |  if_ae	jmp	#LR__2450
1ec30     A7 26 02 FB | 	rdlong	local01, fp
1ec34     0C 4E 05 F1 | 	add	fp, #12
1ec38     A7 28 02 FB | 	rdlong	local02, fp
1ec3c     0C 4E 85 F1 | 	sub	fp, #12
1ec40     14 27 82 F1 | 	sub	local01, local02
1ec44     A7 26 62 FC | 	wrlong	local01, fp
1ec48     F4 02 90 FD | 	jmp	#LR__2460
1ec4c                 | LR__2450
1ec4c     A7 26 02 FB | 	rdlong	local01, fp
1ec50     0C 4E 05 F1 | 	add	fp, #12
1ec54     A7 28 02 FB | 	rdlong	local02, fp
1ec58     0C 4E 85 F1 | 	sub	fp, #12
1ec5c     14 27 82 F1 | 	sub	local01, local02
1ec60     A7 26 62 FC | 	wrlong	local01, fp
1ec64     08 4E 05 F1 | 	add	fp, #8
1ec68     A7 38 68 FC | 	wrlong	#28, fp
1ec6c     08 4E 85 F1 | 	sub	fp, #8
1ec70     CC 02 90 FD | 	jmp	#LR__2460
1ec74                 | LR__2451
1ec74                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1ec74     08 4E 05 F1 | 	add	fp, #8
1ec78     A7 26 02 FB | 	rdlong	local01, fp
1ec7c     08 4E 85 F1 | 	sub	fp, #8
1ec80     1D 26 0E F2 | 	cmp	local01, #29 wz
1ec84     14 4E 05 A1 |  if_e	add	fp, #20
1ec88     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec90     16 2B 02 A6 |  if_e	mov	local03, local04
1ec94     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec98     28 00 90 5D |  if_ne	jmp	#LR__2452
1ec9c     A7 26 02 FB | 	rdlong	local01, fp
1eca0     0C 4E 05 F1 | 	add	fp, #12
1eca4     A7 28 02 FB | 	rdlong	local02, fp
1eca8     0C 4E 85 F1 | 	sub	fp, #12
1ecac     14 27 82 F1 | 	sub	local01, local02
1ecb0     A7 26 62 FC | 	wrlong	local01, fp
1ecb4     08 4E 05 F1 | 	add	fp, #8
1ecb8     A7 38 68 FC | 	wrlong	#28, fp
1ecbc     08 4E 85 F1 | 	sub	fp, #8
1ecc0     7C 02 90 FD | 	jmp	#LR__2460
1ecc4                 | LR__2452
1ecc4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ecc4     08 4E 05 F1 | 	add	fp, #8
1ecc8     A7 26 02 FB | 	rdlong	local01, fp
1eccc     08 4E 85 F1 | 	sub	fp, #8
1ecd0     1D 26 0E F2 | 	cmp	local01, #29 wz
1ecd4     14 4E 05 A1 |  if_e	add	fp, #20
1ecd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecdc     14 4E 85 A1 |  if_e	sub	fp, #20
1ece0     16 2B 02 A6 |  if_e	mov	local03, local04
1ece4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ece8     34 00 90 5D |  if_ne	jmp	#LR__2453
1ecec     A7 12 02 FB | 	rdlong	arg01, fp
1ecf0     C4 9C B0 FD | 	call	#__system___float_fromuns
1ecf4     FD 12 02 F6 | 	mov	arg01, result1
1ecf8     0C 4E 05 F1 | 	add	fp, #12
1ecfc     A7 14 02 FB | 	rdlong	arg02, fp
1ed00     0C 4E 85 F1 | 	sub	fp, #12
1ed04     1F 14 E6 F4 | 	bitnot	arg02, #31
1ed08     E0 9C B0 FD | 	call	#__system___float_add
1ed0c     A7 FA 61 FC | 	wrlong	result1, fp
1ed10     08 4E 05 F1 | 	add	fp, #8
1ed14     A7 3C 68 FC | 	wrlong	#30, fp
1ed18     08 4E 85 F1 | 	sub	fp, #8
1ed1c     20 02 90 FD | 	jmp	#LR__2460
1ed20                 | LR__2453
1ed20                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1ed20     08 4E 05 F1 | 	add	fp, #8
1ed24     A7 26 02 FB | 	rdlong	local01, fp
1ed28     08 4E 85 F1 | 	sub	fp, #8
1ed2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed30     14 4E 05 A1 |  if_e	add	fp, #20
1ed34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed38     14 4E 85 A1 |  if_e	sub	fp, #20
1ed3c     16 2B 02 A6 |  if_e	mov	local03, local04
1ed40     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ed44     1C 00 90 5D |  if_ne	jmp	#LR__2454
1ed48     A7 26 02 FB | 	rdlong	local01, fp
1ed4c     0C 4E 05 F1 | 	add	fp, #12
1ed50     A7 28 02 FB | 	rdlong	local02, fp
1ed54     0C 4E 85 F1 | 	sub	fp, #12
1ed58     14 27 82 F1 | 	sub	local01, local02
1ed5c     A7 26 62 FC | 	wrlong	local01, fp
1ed60     DC 01 90 FD | 	jmp	#LR__2460
1ed64                 | LR__2454
1ed64                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ed64     08 4E 05 F1 | 	add	fp, #8
1ed68     A7 26 02 FB | 	rdlong	local01, fp
1ed6c     08 4E 85 F1 | 	sub	fp, #8
1ed70     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed74     14 4E 05 A1 |  if_e	add	fp, #20
1ed78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed7c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed80     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ed84     1C 00 90 5D |  if_ne	jmp	#LR__2455
1ed88     A7 26 02 FB | 	rdlong	local01, fp
1ed8c     0C 4E 05 F1 | 	add	fp, #12
1ed90     A7 28 02 FB | 	rdlong	local02, fp
1ed94     0C 4E 85 F1 | 	sub	fp, #12
1ed98     14 27 82 F1 | 	sub	local01, local02
1ed9c     A7 26 62 FC | 	wrlong	local01, fp
1eda0     9C 01 90 FD | 	jmp	#LR__2460
1eda4                 | LR__2455
1eda4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1eda4     08 4E 05 F1 | 	add	fp, #8
1eda8     A7 26 02 FB | 	rdlong	local01, fp
1edac     08 4E 85 F1 | 	sub	fp, #8
1edb0     1C 26 0E F2 | 	cmp	local01, #28 wz
1edb4     14 4E 05 A1 |  if_e	add	fp, #20
1edb8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1edbc     14 4E 85 A1 |  if_e	sub	fp, #20
1edc0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1edc4     44 00 90 5D |  if_ne	jmp	#LR__2456
1edc8     A7 12 02 FB | 	rdlong	arg01, fp
1edcc     09 13 52 F6 | 	abs	arg01, arg01 wc
1edd0     1F 2E C6 C9 |  if_b	decod	local05, #31
1edd4     00 2E 06 36 |  if_ae	mov	local05, #0
1edd8     DC 9B B0 FD | 	call	#__system___float_fromuns
1eddc     17 FB 61 F5 | 	xor	result1, local05
1ede0     FD 12 02 F6 | 	mov	arg01, result1
1ede4     0C 4E 05 F1 | 	add	fp, #12
1ede8     A7 14 02 FB | 	rdlong	arg02, fp
1edec     0C 4E 85 F1 | 	sub	fp, #12
1edf0     1F 14 E6 F4 | 	bitnot	arg02, #31
1edf4     F4 9B B0 FD | 	call	#__system___float_add
1edf8     A7 FA 61 FC | 	wrlong	result1, fp
1edfc     08 4E 05 F1 | 	add	fp, #8
1ee00     A7 3C 68 FC | 	wrlong	#30, fp
1ee04     08 4E 85 F1 | 	sub	fp, #8
1ee08     34 01 90 FD | 	jmp	#LR__2460
1ee0c                 | LR__2456
1ee0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1ee0c     08 4E 05 F1 | 	add	fp, #8
1ee10     A7 26 02 FB | 	rdlong	local01, fp
1ee14     08 4E 85 F1 | 	sub	fp, #8
1ee18     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee1c     14 4E 05 A1 |  if_e	add	fp, #20
1ee20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee24     14 4E 85 A1 |  if_e	sub	fp, #20
1ee28     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee2c     2C 00 90 5D |  if_ne	jmp	#LR__2457
1ee30     A7 26 02 FB | 	rdlong	local01, fp
1ee34     0C 4E 05 F1 | 	add	fp, #12
1ee38     A7 12 02 FB | 	rdlong	arg01, fp
1ee3c     0C 4E 85 F1 | 	sub	fp, #12
1ee40     74 9B B0 FD | 	call	#__system___float_fromuns
1ee44     FD 14 02 F6 | 	mov	arg02, result1
1ee48     13 13 02 F6 | 	mov	arg01, local01
1ee4c     1F 14 E6 F4 | 	bitnot	arg02, #31
1ee50     98 9B B0 FD | 	call	#__system___float_add
1ee54     A7 FA 61 FC | 	wrlong	result1, fp
1ee58     E4 00 90 FD | 	jmp	#LR__2460
1ee5c                 | LR__2457
1ee5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1ee5c     08 4E 05 F1 | 	add	fp, #8
1ee60     A7 26 02 FB | 	rdlong	local01, fp
1ee64     08 4E 85 F1 | 	sub	fp, #8
1ee68     1E 26 0E F2 | 	cmp	local01, #30 wz
1ee6c     14 4E 05 A1 |  if_e	add	fp, #20
1ee70     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ee74     14 4E 85 A1 |  if_e	sub	fp, #20
1ee78     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ee7c     3C 00 90 5D |  if_ne	jmp	#LR__2458
1ee80     A7 26 02 FB | 	rdlong	local01, fp
1ee84     0C 4E 05 F1 | 	add	fp, #12
1ee88     A7 12 02 FB | 	rdlong	arg01, fp
1ee8c     0C 4E 85 F1 | 	sub	fp, #12
1ee90     09 13 52 F6 | 	abs	arg01, arg01 wc
1ee94     1F 2E C6 C9 |  if_b	decod	local05, #31
1ee98     00 2E 06 36 |  if_ae	mov	local05, #0
1ee9c     18 9B B0 FD | 	call	#__system___float_fromuns
1eea0     17 FB 61 F5 | 	xor	result1, local05
1eea4     FD 14 02 F6 | 	mov	arg02, result1
1eea8     13 13 02 F6 | 	mov	arg01, local01
1eeac     1F 14 E6 F4 | 	bitnot	arg02, #31
1eeb0     38 9B B0 FD | 	call	#__system___float_add
1eeb4     A7 FA 61 FC | 	wrlong	result1, fp
1eeb8     84 00 90 FD | 	jmp	#LR__2460
1eebc                 | LR__2458
1eebc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1eebc     08 4E 05 F1 | 	add	fp, #8
1eec0     A7 26 02 FB | 	rdlong	local01, fp
1eec4     08 4E 85 F1 | 	sub	fp, #8
1eec8     1E 26 0E F2 | 	cmp	local01, #30 wz
1eecc     14 4E 05 A1 |  if_e	add	fp, #20
1eed0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eed4     14 4E 85 A1 |  if_e	sub	fp, #20
1eed8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1eedc     20 00 90 5D |  if_ne	jmp	#LR__2459
1eee0     A7 12 02 FB | 	rdlong	arg01, fp
1eee4     0C 4E 05 F1 | 	add	fp, #12
1eee8     A7 14 02 FB | 	rdlong	arg02, fp
1eeec     0C 4E 85 F1 | 	sub	fp, #12
1eef0     1F 14 E6 F4 | 	bitnot	arg02, #31
1eef4     F4 9A B0 FD | 	call	#__system___float_add
1eef8     A7 FA 61 FC | 	wrlong	result1, fp
1eefc     40 00 90 FD | 	jmp	#LR__2460
1ef00                 | LR__2459
1ef00                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1ef00     08 4E 05 F1 | 	add	fp, #8
1ef04     A7 26 02 FB | 	rdlong	local01, fp
1ef08     08 4E 85 F1 | 	sub	fp, #8
1ef0c     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef10     14 4E 05 51 |  if_ne	add	fp, #20
1ef14     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ef18     14 4E 85 51 |  if_ne	sub	fp, #20
1ef1c     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1ef20     A7 06 68 AC |  if_e	wrlong	#3, fp
1ef24     08 4E 05 A1 |  if_e	add	fp, #8
1ef28     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ef2c     08 4E 85 A1 |  if_e	sub	fp, #8
1ef30     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1ef34     08 4E 05 51 |  if_ne	add	fp, #8
1ef38     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ef3c     08 4E 85 51 |  if_ne	sub	fp, #8
1ef40                 | LR__2460
1ef40     A7 12 02 F6 | 	mov	arg01, fp
1ef44     30 E4 BE FD | 	call	#_push
1ef48     A7 F0 03 F6 | 	mov	ptra, fp
1ef4c     B2 00 A0 FD | 	call	#popregs_
1ef50                 | _do_minus_ret
1ef50     2D 00 64 FD | 	ret
1ef54                 | 
1ef54                 | ' 
1ef54                 | ' '--------------------------------- negative (-), one argument negative
1ef54                 | ' 
1ef54                 | ' sub do_negative
1ef54                 | _do_negative
1ef54     02 4A 05 F6 | 	mov	COUNT_, #2
1ef58     A8 00 A0 FD | 	call	#pushregs_
1ef5c     0C F0 07 F1 | 	add	ptra, #12
1ef60     7C E3 BE FD | 	call	#_pop
1ef64     FF 26 02 F6 | 	mov	local01, result3
1ef68     A7 FA 61 FC | 	wrlong	result1, fp
1ef6c     04 4E 05 F1 | 	add	fp, #4
1ef70     A7 FC 61 FC | 	wrlong	result2, fp
1ef74     04 4E 05 F1 | 	add	fp, #4
1ef78     A7 26 62 FC | 	wrlong	local01, fp
1ef7c                 | ' 
1ef7c                 | ' t1=pop()
1ef7c                 | ' if t1.result_type=result_int then 
1ef7c     08 4E 85 F1 | 	sub	fp, #8
1ef80     1C 26 0E F2 | 	cmp	local01, #28 wz
1ef84     A7 28 02 AB |  if_e	rdlong	local02, fp
1ef88     14 27 62 A6 |  if_e	neg	local01, local02
1ef8c     A7 26 62 AC |  if_e	wrlong	local01, fp
1ef90     5C 00 90 AD |  if_e	jmp	#LR__2472
1ef94     08 4E 05 F1 | 	add	fp, #8
1ef98     A7 26 02 FB | 	rdlong	local01, fp
1ef9c     08 4E 85 F1 | 	sub	fp, #8
1efa0     1D 26 0E F2 | 	cmp	local01, #29 wz
1efa4     1C 00 90 5D |  if_ne	jmp	#LR__2470
1efa8     A7 28 02 FB | 	rdlong	local02, fp
1efac     14 27 62 F6 | 	neg	local01, local02
1efb0     A7 26 62 FC | 	wrlong	local01, fp
1efb4     08 4E 05 F1 | 	add	fp, #8
1efb8     A7 38 68 FC | 	wrlong	#28, fp
1efbc     08 4E 85 F1 | 	sub	fp, #8
1efc0     2C 00 90 FD | 	jmp	#LR__2471
1efc4                 | LR__2470
1efc4     08 4E 05 F1 | 	add	fp, #8
1efc8     A7 26 02 FB | 	rdlong	local01, fp
1efcc     08 4E 85 F1 | 	sub	fp, #8
1efd0     1E 26 0E F2 | 	cmp	local01, #30 wz
1efd4     A7 FA 01 AB |  if_e	rdlong	result1, fp
1efd8     1F FA E5 A4 |  if_e	bitnot	result1, #31
1efdc     A7 FA 61 AC |  if_e	wrlong	result1, fp
1efe0     08 4E 05 51 |  if_ne	add	fp, #8
1efe4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1efe8     08 4E 85 51 |  if_ne	sub	fp, #8
1efec     A7 50 68 5C |  if_ne	wrlong	#40, fp
1eff0                 | LR__2471
1eff0                 | LR__2472
1eff0     A7 12 02 F6 | 	mov	arg01, fp
1eff4     80 E3 BE FD | 	call	#_push
1eff8     A7 F0 03 F6 | 	mov	ptra, fp
1effc     B2 00 A0 FD | 	call	#popregs_
1f000                 | _do_negative_ret
1f000     2D 00 64 FD | 	ret
1f004                 | 
1f004                 | ' 
1f004                 | ' '--------------------------------- MOD (modulo)
1f004                 | ' 
1f004                 | ' sub do_mod 
1f004                 | _do_mod
1f004     01 4A 05 F6 | 	mov	COUNT_, #1
1f008     A8 00 A0 FD | 	call	#pushregs_
1f00c     18 F0 07 F1 | 	add	ptra, #24
1f010     CC E2 BE FD | 	call	#_pop
1f014     FD 8A 02 F6 | 	mov	muldivb_, result1
1f018     FE 88 02 F6 | 	mov	muldiva_, result2
1f01c     FF 26 02 F6 | 	mov	local01, result3
1f020     0C 4E 05 F1 | 	add	fp, #12
1f024     A7 8A 62 FC | 	wrlong	muldivb_, fp
1f028     04 4E 05 F1 | 	add	fp, #4
1f02c     A7 88 62 FC | 	wrlong	muldiva_, fp
1f030     04 4E 05 F1 | 	add	fp, #4
1f034     A7 26 62 FC | 	wrlong	local01, fp
1f038     14 4E 85 F1 | 	sub	fp, #20
1f03c     A0 E2 BE FD | 	call	#_pop
1f040     A7 FA 61 FC | 	wrlong	result1, fp
1f044     04 4E 05 F1 | 	add	fp, #4
1f048     A7 FC 61 FC | 	wrlong	result2, fp
1f04c     04 4E 05 F1 | 	add	fp, #4
1f050     A7 FE 61 FC | 	wrlong	result3, fp
1f054                 | ' 
1f054                 | ' t2=pop()
1f054                 | ' t1=pop()
1f054                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1f054     08 4E 85 F1 | 	sub	fp, #8
1f058     1F FE 0D F2 | 	cmp	result3, #31 wz
1f05c     14 4E 05 51 |  if_ne	add	fp, #20
1f060     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f064     14 4E 85 51 |  if_ne	sub	fp, #20
1f068     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f06c     A7 14 68 AC |  if_e	wrlong	#10, fp
1f070     08 4E 05 A1 |  if_e	add	fp, #8
1f074     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f078     08 4E 85 A1 |  if_e	sub	fp, #8
1f07c     90 01 90 AD |  if_e	jmp	#LR__2486
1f080                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f080     08 4E 05 F1 | 	add	fp, #8
1f084     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f088     08 4E 85 F1 | 	sub	fp, #8
1f08c     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1f090     1C 00 90 5D |  if_ne	jmp	#LR__2480
1f094     08 4E 05 F1 | 	add	fp, #8
1f098     A7 38 68 FC | 	wrlong	#28, fp
1f09c     08 4E 85 F1 | 	sub	fp, #8
1f0a0     A7 12 02 FB | 	rdlong	arg01, fp
1f0a4     00 14 06 F6 | 	mov	arg02, #0
1f0a8     D8 A1 B0 FD | 	call	#__system___float_tointeger
1f0ac     A7 FA 61 FC | 	wrlong	result1, fp
1f0b0                 | LR__2480
1f0b0                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1f0b0     14 4E 05 F1 | 	add	fp, #20
1f0b4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f0b8     14 4E 85 F1 | 	sub	fp, #20
1f0bc     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1f0c0     28 00 90 5D |  if_ne	jmp	#LR__2481
1f0c4     14 4E 05 F1 | 	add	fp, #20
1f0c8     A7 38 68 FC | 	wrlong	#28, fp
1f0cc     08 4E 85 F1 | 	sub	fp, #8
1f0d0     A7 12 02 FB | 	rdlong	arg01, fp
1f0d4     0C 4E 85 F1 | 	sub	fp, #12
1f0d8     00 14 06 F6 | 	mov	arg02, #0
1f0dc     A4 A1 B0 FD | 	call	#__system___float_tointeger
1f0e0     0C 4E 05 F1 | 	add	fp, #12
1f0e4     A7 FA 61 FC | 	wrlong	result1, fp
1f0e8     0C 4E 85 F1 | 	sub	fp, #12
1f0ec                 | LR__2481
1f0ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1f0ec     08 4E 05 F1 | 	add	fp, #8
1f0f0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f0f4     08 4E 85 F1 | 	sub	fp, #8
1f0f8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1f0fc     14 4E 05 A1 |  if_e	add	fp, #20
1f100     A7 26 02 AB |  if_e	rdlong	local01, fp
1f104     14 4E 85 A1 |  if_e	sub	fp, #20
1f108     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f10c     20 00 90 5D |  if_ne	jmp	#LR__2482
1f110     0C 4E 05 F1 | 	add	fp, #12
1f114     A7 26 02 FB | 	rdlong	local01, fp
1f118     0C 4E 85 F1 | 	sub	fp, #12
1f11c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f120     13 8B 12 FD | 	qdiv	muldivb_, local01
1f124     19 26 62 FD | 	getqy	local01
1f128     A7 26 62 FC | 	wrlong	local01, fp
1f12c     E0 00 90 FD | 	jmp	#LR__2486
1f130                 | LR__2482
1f130                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1f130     08 4E 05 F1 | 	add	fp, #8
1f134     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f138     08 4E 85 F1 | 	sub	fp, #8
1f13c     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1f140     14 4E 05 A1 |  if_e	add	fp, #20
1f144     A7 26 02 AB |  if_e	rdlong	local01, fp
1f148     14 4E 85 A1 |  if_e	sub	fp, #20
1f14c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f150     2C 00 90 5D |  if_ne	jmp	#LR__2483
1f154     0C 4E 05 F1 | 	add	fp, #12
1f158     A7 26 02 FB | 	rdlong	local01, fp
1f15c     0C 4E 85 F1 | 	sub	fp, #12
1f160     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f164     13 8B 12 FD | 	qdiv	muldivb_, local01
1f168     19 26 62 FD | 	getqy	local01
1f16c     A7 26 62 FC | 	wrlong	local01, fp
1f170     08 4E 05 F1 | 	add	fp, #8
1f174     A7 38 68 FC | 	wrlong	#28, fp
1f178     08 4E 85 F1 | 	sub	fp, #8
1f17c     90 00 90 FD | 	jmp	#LR__2486
1f180                 | LR__2483
1f180                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1f180     08 4E 05 F1 | 	add	fp, #8
1f184     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f188     08 4E 85 F1 | 	sub	fp, #8
1f18c     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1f190     14 4E 05 A1 |  if_e	add	fp, #20
1f194     A7 26 02 AB |  if_e	rdlong	local01, fp
1f198     14 4E 85 A1 |  if_e	sub	fp, #20
1f19c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1f1a0     1C 00 90 5D |  if_ne	jmp	#LR__2484
1f1a4     A7 88 02 FB | 	rdlong	muldiva_, fp
1f1a8     0C 4E 05 F1 | 	add	fp, #12
1f1ac     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f1b0     0C 4E 85 F1 | 	sub	fp, #12
1f1b4     BA 00 A0 FD | 	call	#divide_
1f1b8     A7 88 62 FC | 	wrlong	muldiva_, fp
1f1bc     50 00 90 FD | 	jmp	#LR__2486
1f1c0                 | LR__2484
1f1c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1f1c0     08 4E 05 F1 | 	add	fp, #8
1f1c4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f1c8     08 4E 85 F1 | 	sub	fp, #8
1f1cc     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1f1d0     14 4E 05 A1 |  if_e	add	fp, #20
1f1d4     A7 26 02 AB |  if_e	rdlong	local01, fp
1f1d8     14 4E 85 A1 |  if_e	sub	fp, #20
1f1dc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1f1e0     1C 00 90 5D |  if_ne	jmp	#LR__2485
1f1e4     A7 88 02 FB | 	rdlong	muldiva_, fp
1f1e8     0C 4E 05 F1 | 	add	fp, #12
1f1ec     A7 8A 02 FB | 	rdlong	muldivb_, fp
1f1f0     0C 4E 85 F1 | 	sub	fp, #12
1f1f4     BA 00 A0 FD | 	call	#divide_
1f1f8     A7 88 62 FC | 	wrlong	muldiva_, fp
1f1fc     10 00 90 FD | 	jmp	#LR__2486
1f200                 | LR__2485
1f200     A7 16 68 FC | 	wrlong	#11, fp
1f204     08 4E 05 F1 | 	add	fp, #8
1f208     A7 FE 69 FC | 	wrlong	#255, fp
1f20c     08 4E 85 F1 | 	sub	fp, #8
1f210                 | LR__2486
1f210     A7 12 02 F6 | 	mov	arg01, fp
1f214     60 E1 BE FD | 	call	#_push
1f218     A7 F0 03 F6 | 	mov	ptra, fp
1f21c     B2 00 A0 FD | 	call	#popregs_
1f220                 | _do_mod_ret
1f220     2D 00 64 FD | 	ret
1f224                 | 
1f224                 | ' 
1f224                 | ' '--------------------------------- mul (*)
1f224                 | ' 
1f224                 | ' sub do_mul
1f224                 | _do_mul
1f224     05 4A 05 F6 | 	mov	COUNT_, #5
1f228     A8 00 A0 FD | 	call	#pushregs_
1f22c     18 F0 07 F1 | 	add	ptra, #24
1f230     AC E0 BE FD | 	call	#_pop
1f234     FD 26 02 F6 | 	mov	local01, result1
1f238     FE 28 02 F6 | 	mov	local02, result2
1f23c     FF 2A 02 F6 | 	mov	local03, result3
1f240     0C 4E 05 F1 | 	add	fp, #12
1f244     A7 26 62 FC | 	wrlong	local01, fp
1f248     04 4E 05 F1 | 	add	fp, #4
1f24c     A7 28 62 FC | 	wrlong	local02, fp
1f250     04 4E 05 F1 | 	add	fp, #4
1f254     A7 2A 62 FC | 	wrlong	local03, fp
1f258     14 4E 85 F1 | 	sub	fp, #20
1f25c     80 E0 BE FD | 	call	#_pop
1f260     FF 2A 02 F6 | 	mov	local03, result3
1f264     A7 FA 61 FC | 	wrlong	result1, fp
1f268     04 4E 05 F1 | 	add	fp, #4
1f26c     A7 FC 61 FC | 	wrlong	result2, fp
1f270     04 4E 05 F1 | 	add	fp, #4
1f274     A7 2A 62 FC | 	wrlong	local03, fp
1f278                 | ' 
1f278                 | ' t2=pop()
1f278                 | ' t1=pop()
1f278                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1f278     08 4E 85 F1 | 	sub	fp, #8
1f27c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f280     14 4E 05 A1 |  if_e	add	fp, #20
1f284     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f288     14 4E 85 A1 |  if_e	sub	fp, #20
1f28c     16 2B 02 A6 |  if_e	mov	local03, local04
1f290     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f294     20 00 90 5D |  if_ne	jmp	#LR__2490
1f298     A7 28 02 FB | 	rdlong	local02, fp
1f29c     0C 4E 05 F1 | 	add	fp, #12
1f2a0     A7 2A 02 FB | 	rdlong	local03, fp
1f2a4     15 29 02 FD | 	qmul	local02, local03
1f2a8     0C 4E 85 F1 | 	sub	fp, #12
1f2ac     18 26 62 FD | 	getqx	local01
1f2b0     A7 26 62 FC | 	wrlong	local01, fp
1f2b4     C4 02 90 FD | 	jmp	#LR__2499
1f2b8                 | LR__2490
1f2b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1f2b8     08 4E 05 F1 | 	add	fp, #8
1f2bc     A7 26 02 FB | 	rdlong	local01, fp
1f2c0     08 4E 85 F1 | 	sub	fp, #8
1f2c4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f2c8     14 4E 05 A1 |  if_e	add	fp, #20
1f2cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2d0     14 4E 85 A1 |  if_e	sub	fp, #20
1f2d4     16 2B 02 A6 |  if_e	mov	local03, local04
1f2d8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f2dc     2C 00 90 5D |  if_ne	jmp	#LR__2491
1f2e0     A7 28 02 FB | 	rdlong	local02, fp
1f2e4     0C 4E 05 F1 | 	add	fp, #12
1f2e8     A7 2A 02 FB | 	rdlong	local03, fp
1f2ec     15 29 02 FD | 	qmul	local02, local03
1f2f0     0C 4E 85 F1 | 	sub	fp, #12
1f2f4     18 26 62 FD | 	getqx	local01
1f2f8     A7 26 62 FC | 	wrlong	local01, fp
1f2fc     08 4E 05 F1 | 	add	fp, #8
1f300     A7 38 68 FC | 	wrlong	#28, fp
1f304     08 4E 85 F1 | 	sub	fp, #8
1f308     70 02 90 FD | 	jmp	#LR__2499
1f30c                 | LR__2491
1f30c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1f30c     08 4E 05 F1 | 	add	fp, #8
1f310     A7 26 02 FB | 	rdlong	local01, fp
1f314     08 4E 85 F1 | 	sub	fp, #8
1f318     1D 26 0E F2 | 	cmp	local01, #29 wz
1f31c     14 4E 05 A1 |  if_e	add	fp, #20
1f320     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f324     14 4E 85 A1 |  if_e	sub	fp, #20
1f328     16 2B 02 A6 |  if_e	mov	local03, local04
1f32c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f330     30 00 90 5D |  if_ne	jmp	#LR__2492
1f334     A7 12 02 FB | 	rdlong	arg01, fp
1f338     7C 96 B0 FD | 	call	#__system___float_fromuns
1f33c     FD 12 02 F6 | 	mov	arg01, result1
1f340     0C 4E 05 F1 | 	add	fp, #12
1f344     A7 14 02 FB | 	rdlong	arg02, fp
1f348     0C 4E 85 F1 | 	sub	fp, #12
1f34c     6C 9A B0 FD | 	call	#__system___float_mul
1f350     A7 FA 61 FC | 	wrlong	result1, fp
1f354     08 4E 05 F1 | 	add	fp, #8
1f358     A7 3C 68 FC | 	wrlong	#30, fp
1f35c     08 4E 85 F1 | 	sub	fp, #8
1f360     18 02 90 FD | 	jmp	#LR__2499
1f364                 | LR__2492
1f364                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1f364     08 4E 05 F1 | 	add	fp, #8
1f368     A7 26 02 FB | 	rdlong	local01, fp
1f36c     08 4E 85 F1 | 	sub	fp, #8
1f370     1C 26 0E F2 | 	cmp	local01, #28 wz
1f374     14 4E 05 A1 |  if_e	add	fp, #20
1f378     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f37c     14 4E 85 A1 |  if_e	sub	fp, #20
1f380     16 2B 02 A6 |  if_e	mov	local03, local04
1f384     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f388     20 00 90 5D |  if_ne	jmp	#LR__2493
1f38c     A7 28 02 FB | 	rdlong	local02, fp
1f390     0C 4E 05 F1 | 	add	fp, #12
1f394     A7 2A 02 FB | 	rdlong	local03, fp
1f398     15 29 02 FD | 	qmul	local02, local03
1f39c     0C 4E 85 F1 | 	sub	fp, #12
1f3a0     18 26 62 FD | 	getqx	local01
1f3a4     A7 26 62 FC | 	wrlong	local01, fp
1f3a8     D0 01 90 FD | 	jmp	#LR__2499
1f3ac                 | LR__2493
1f3ac                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1f3ac     08 4E 05 F1 | 	add	fp, #8
1f3b0     A7 26 02 FB | 	rdlong	local01, fp
1f3b4     08 4E 85 F1 | 	sub	fp, #8
1f3b8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f3bc     14 4E 05 A1 |  if_e	add	fp, #20
1f3c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f3c4     14 4E 85 A1 |  if_e	sub	fp, #20
1f3c8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f3cc     20 00 90 5D |  if_ne	jmp	#LR__2494
1f3d0     A7 28 02 FB | 	rdlong	local02, fp
1f3d4     0C 4E 05 F1 | 	add	fp, #12
1f3d8     A7 2A 02 FB | 	rdlong	local03, fp
1f3dc     15 29 02 FD | 	qmul	local02, local03
1f3e0     0C 4E 85 F1 | 	sub	fp, #12
1f3e4     18 26 62 FD | 	getqx	local01
1f3e8     A7 26 62 FC | 	wrlong	local01, fp
1f3ec     8C 01 90 FD | 	jmp	#LR__2499
1f3f0                 | LR__2494
1f3f0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1f3f0     08 4E 05 F1 | 	add	fp, #8
1f3f4     A7 26 02 FB | 	rdlong	local01, fp
1f3f8     08 4E 85 F1 | 	sub	fp, #8
1f3fc     1C 26 0E F2 | 	cmp	local01, #28 wz
1f400     14 4E 05 A1 |  if_e	add	fp, #20
1f404     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f408     14 4E 85 A1 |  if_e	sub	fp, #20
1f40c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f410     40 00 90 5D |  if_ne	jmp	#LR__2495
1f414     A7 12 02 FB | 	rdlong	arg01, fp
1f418     09 13 52 F6 | 	abs	arg01, arg01 wc
1f41c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f420     00 2E 06 36 |  if_ae	mov	local05, #0
1f424     90 95 B0 FD | 	call	#__system___float_fromuns
1f428     17 FB 61 F5 | 	xor	result1, local05
1f42c     FD 12 02 F6 | 	mov	arg01, result1
1f430     0C 4E 05 F1 | 	add	fp, #12
1f434     A7 14 02 FB | 	rdlong	arg02, fp
1f438     0C 4E 85 F1 | 	sub	fp, #12
1f43c     7C 99 B0 FD | 	call	#__system___float_mul
1f440     A7 FA 61 FC | 	wrlong	result1, fp
1f444     08 4E 05 F1 | 	add	fp, #8
1f448     A7 3C 68 FC | 	wrlong	#30, fp
1f44c     08 4E 85 F1 | 	sub	fp, #8
1f450     28 01 90 FD | 	jmp	#LR__2499
1f454                 | LR__2495
1f454                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1f454     08 4E 05 F1 | 	add	fp, #8
1f458     A7 26 02 FB | 	rdlong	local01, fp
1f45c     08 4E 85 F1 | 	sub	fp, #8
1f460     1E 26 0E F2 | 	cmp	local01, #30 wz
1f464     14 4E 05 A1 |  if_e	add	fp, #20
1f468     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f46c     14 4E 85 A1 |  if_e	sub	fp, #20
1f470     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f474     28 00 90 5D |  if_ne	jmp	#LR__2496
1f478     A7 26 02 FB | 	rdlong	local01, fp
1f47c     0C 4E 05 F1 | 	add	fp, #12
1f480     A7 12 02 FB | 	rdlong	arg01, fp
1f484     0C 4E 85 F1 | 	sub	fp, #12
1f488     2C 95 B0 FD | 	call	#__system___float_fromuns
1f48c     FD 14 02 F6 | 	mov	arg02, result1
1f490     13 13 02 F6 | 	mov	arg01, local01
1f494     24 99 B0 FD | 	call	#__system___float_mul
1f498     A7 FA 61 FC | 	wrlong	result1, fp
1f49c     DC 00 90 FD | 	jmp	#LR__2499
1f4a0                 | LR__2496
1f4a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1f4a0     08 4E 05 F1 | 	add	fp, #8
1f4a4     A7 26 02 FB | 	rdlong	local01, fp
1f4a8     08 4E 85 F1 | 	sub	fp, #8
1f4ac     1E 26 0E F2 | 	cmp	local01, #30 wz
1f4b0     14 4E 05 A1 |  if_e	add	fp, #20
1f4b4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4b8     14 4E 85 A1 |  if_e	sub	fp, #20
1f4bc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f4c0     38 00 90 5D |  if_ne	jmp	#LR__2497
1f4c4     A7 26 02 FB | 	rdlong	local01, fp
1f4c8     0C 4E 05 F1 | 	add	fp, #12
1f4cc     A7 12 02 FB | 	rdlong	arg01, fp
1f4d0     0C 4E 85 F1 | 	sub	fp, #12
1f4d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1f4d8     1F 2E C6 C9 |  if_b	decod	local05, #31
1f4dc     00 2E 06 36 |  if_ae	mov	local05, #0
1f4e0     D4 94 B0 FD | 	call	#__system___float_fromuns
1f4e4     17 FB 61 F5 | 	xor	result1, local05
1f4e8     FD 14 02 F6 | 	mov	arg02, result1
1f4ec     13 13 02 F6 | 	mov	arg01, local01
1f4f0     C8 98 B0 FD | 	call	#__system___float_mul
1f4f4     A7 FA 61 FC | 	wrlong	result1, fp
1f4f8     80 00 90 FD | 	jmp	#LR__2499
1f4fc                 | LR__2497
1f4fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1f4fc     08 4E 05 F1 | 	add	fp, #8
1f500     A7 26 02 FB | 	rdlong	local01, fp
1f504     08 4E 85 F1 | 	sub	fp, #8
1f508     1E 26 0E F2 | 	cmp	local01, #30 wz
1f50c     14 4E 05 A1 |  if_e	add	fp, #20
1f510     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f514     14 4E 85 A1 |  if_e	sub	fp, #20
1f518     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f51c     1C 00 90 5D |  if_ne	jmp	#LR__2498
1f520     A7 12 02 FB | 	rdlong	arg01, fp
1f524     0C 4E 05 F1 | 	add	fp, #12
1f528     A7 14 02 FB | 	rdlong	arg02, fp
1f52c     0C 4E 85 F1 | 	sub	fp, #12
1f530     88 98 B0 FD | 	call	#__system___float_mul
1f534     A7 FA 61 FC | 	wrlong	result1, fp
1f538     40 00 90 FD | 	jmp	#LR__2499
1f53c                 | LR__2498
1f53c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1f53c     08 4E 05 F1 | 	add	fp, #8
1f540     A7 26 02 FB | 	rdlong	local01, fp
1f544     08 4E 85 F1 | 	sub	fp, #8
1f548     1F 26 0E F2 | 	cmp	local01, #31 wz
1f54c     14 4E 05 51 |  if_ne	add	fp, #20
1f550     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f554     14 4E 85 51 |  if_ne	sub	fp, #20
1f558     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f55c     A7 10 68 AC |  if_e	wrlong	#8, fp
1f560     08 4E 05 A1 |  if_e	add	fp, #8
1f564     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f568     08 4E 85 A1 |  if_e	sub	fp, #8
1f56c     A7 12 68 5C |  if_ne	wrlong	#9, fp
1f570     08 4E 05 51 |  if_ne	add	fp, #8
1f574     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f578     08 4E 85 51 |  if_ne	sub	fp, #8
1f57c                 | LR__2499
1f57c     A7 12 02 F6 | 	mov	arg01, fp
1f580     F4 DD BE FD | 	call	#_push
1f584     A7 F0 03 F6 | 	mov	ptra, fp
1f588     B2 00 A0 FD | 	call	#popregs_
1f58c                 | _do_mul_ret
1f58c     2D 00 64 FD | 	ret
1f590                 | 
1f590                 | ' 
1f590                 | ' '--------------------------------- not equal (<>)
1f590                 | ' 
1f590                 | ' sub do_ne
1f590                 | _do_ne
1f590     05 4A 05 F6 | 	mov	COUNT_, #5
1f594     A8 00 A0 FD | 	call	#pushregs_
1f598     18 F0 07 F1 | 	add	ptra, #24
1f59c     40 DD BE FD | 	call	#_pop
1f5a0     FD 26 02 F6 | 	mov	local01, result1
1f5a4     FE 28 02 F6 | 	mov	local02, result2
1f5a8     FF 2A 02 F6 | 	mov	local03, result3
1f5ac     0C 4E 05 F1 | 	add	fp, #12
1f5b0     A7 26 62 FC | 	wrlong	local01, fp
1f5b4     04 4E 05 F1 | 	add	fp, #4
1f5b8     A7 28 62 FC | 	wrlong	local02, fp
1f5bc     04 4E 05 F1 | 	add	fp, #4
1f5c0     A7 2A 62 FC | 	wrlong	local03, fp
1f5c4     14 4E 85 F1 | 	sub	fp, #20
1f5c8     14 DD BE FD | 	call	#_pop
1f5cc     FF 2A 02 F6 | 	mov	local03, result3
1f5d0     A7 FA 61 FC | 	wrlong	result1, fp
1f5d4     04 4E 05 F1 | 	add	fp, #4
1f5d8     A7 FC 61 FC | 	wrlong	result2, fp
1f5dc     04 4E 05 F1 | 	add	fp, #4
1f5e0     A7 2A 62 FC | 	wrlong	local03, fp
1f5e4                 | ' 
1f5e4                 | ' t2=pop()
1f5e4                 | ' t1=pop()
1f5e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1f5e4     08 4E 85 F1 | 	sub	fp, #8
1f5e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f5ec     14 4E 05 A1 |  if_e	add	fp, #20
1f5f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f5f4     14 4E 85 A1 |  if_e	sub	fp, #20
1f5f8     16 2B 02 A6 |  if_e	mov	local03, local04
1f5fc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f600     28 00 90 5D |  if_ne	jmp	#LR__2500
1f604     00 26 06 F6 | 	mov	local01, #0
1f608     A7 12 02 FB | 	rdlong	arg01, fp
1f60c     0C 4E 05 F1 | 	add	fp, #12
1f610     A7 14 02 FB | 	rdlong	arg02, fp
1f614     0C 4E 85 F1 | 	sub	fp, #12
1f618     4C 69 B0 FD | 	call	#__system___string_cmp
1f61c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f620     00 26 26 56 |  if_ne	not	local01, #0
1f624     A7 26 62 FC | 	wrlong	local01, fp
1f628     20 04 90 FD | 	jmp	#LR__2513
1f62c                 | LR__2500
1f62c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1f62c     08 4E 05 F1 | 	add	fp, #8
1f630     A7 26 02 FB | 	rdlong	local01, fp
1f634     08 4E 85 F1 | 	sub	fp, #8
1f638     1E 26 0E F2 | 	cmp	local01, #30 wz
1f63c     14 4E 05 A1 |  if_e	add	fp, #20
1f640     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f644     14 4E 85 A1 |  if_e	sub	fp, #20
1f648     16 2B 02 A6 |  if_e	mov	local03, local04
1f64c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f650     2C 00 90 5D |  if_ne	jmp	#LR__2501
1f654     00 26 06 F6 | 	mov	local01, #0
1f658     A7 12 02 FB | 	rdlong	arg01, fp
1f65c     0C 4E 05 F1 | 	add	fp, #12
1f660     A7 14 02 FB | 	rdlong	arg02, fp
1f664     0C 4E 85 F1 | 	sub	fp, #12
1f668     01 16 06 F6 | 	mov	arg03, #1
1f66c     80 9B B0 FD | 	call	#__system___float_cmp
1f670     00 FA 0D F2 | 	cmp	result1, #0 wz
1f674     00 26 26 56 |  if_ne	not	local01, #0
1f678     A7 26 62 FC | 	wrlong	local01, fp
1f67c     CC 03 90 FD | 	jmp	#LR__2513
1f680                 | LR__2501
1f680                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1f680     08 4E 05 F1 | 	add	fp, #8
1f684     A7 26 02 FB | 	rdlong	local01, fp
1f688     08 4E 85 F1 | 	sub	fp, #8
1f68c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f690     14 4E 05 A1 |  if_e	add	fp, #20
1f694     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f698     14 4E 85 A1 |  if_e	sub	fp, #20
1f69c     16 2B 02 A6 |  if_e	mov	local03, local04
1f6a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f6a4     48 00 90 5D |  if_ne	jmp	#LR__2502
1f6a8     00 26 06 F6 | 	mov	local01, #0
1f6ac     A7 28 02 FB | 	rdlong	local02, fp
1f6b0     0C 4E 05 F1 | 	add	fp, #12
1f6b4     A7 12 02 FB | 	rdlong	arg01, fp
1f6b8     0C 4E 85 F1 | 	sub	fp, #12
1f6bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1f6c0     1F 2E C6 C9 |  if_b	decod	local05, #31
1f6c4     00 2E 06 36 |  if_ae	mov	local05, #0
1f6c8     EC 92 B0 FD | 	call	#__system___float_fromuns
1f6cc     17 FB 61 F5 | 	xor	result1, local05
1f6d0     FD 14 02 F6 | 	mov	arg02, result1
1f6d4     14 13 02 F6 | 	mov	arg01, local02
1f6d8     01 16 06 F6 | 	mov	arg03, #1
1f6dc     10 9B B0 FD | 	call	#__system___float_cmp
1f6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1f6e4     00 26 26 56 |  if_ne	not	local01, #0
1f6e8     A7 26 62 FC | 	wrlong	local01, fp
1f6ec     5C 03 90 FD | 	jmp	#LR__2513
1f6f0                 | LR__2502
1f6f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1f6f0     08 4E 05 F1 | 	add	fp, #8
1f6f4     A7 26 02 FB | 	rdlong	local01, fp
1f6f8     08 4E 85 F1 | 	sub	fp, #8
1f6fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f700     14 4E 05 A1 |  if_e	add	fp, #20
1f704     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f708     14 4E 85 A1 |  if_e	sub	fp, #20
1f70c     16 2B 02 A6 |  if_e	mov	local03, local04
1f710     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f714     38 00 90 5D |  if_ne	jmp	#LR__2503
1f718     00 26 06 F6 | 	mov	local01, #0
1f71c     A7 28 02 FB | 	rdlong	local02, fp
1f720     0C 4E 05 F1 | 	add	fp, #12
1f724     A7 12 02 FB | 	rdlong	arg01, fp
1f728     0C 4E 85 F1 | 	sub	fp, #12
1f72c     88 92 B0 FD | 	call	#__system___float_fromuns
1f730     FD 14 02 F6 | 	mov	arg02, result1
1f734     14 13 02 F6 | 	mov	arg01, local02
1f738     01 16 06 F6 | 	mov	arg03, #1
1f73c     B0 9A B0 FD | 	call	#__system___float_cmp
1f740     00 FA 0D F2 | 	cmp	result1, #0 wz
1f744     00 26 26 56 |  if_ne	not	local01, #0
1f748     A7 26 62 FC | 	wrlong	local01, fp
1f74c     FC 02 90 FD | 	jmp	#LR__2513
1f750                 | LR__2503
1f750                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1f750     08 4E 05 F1 | 	add	fp, #8
1f754     A7 26 02 FB | 	rdlong	local01, fp
1f758     08 4E 85 F1 | 	sub	fp, #8
1f75c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f760     14 4E 05 A1 |  if_e	add	fp, #20
1f764     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f768     14 4E 85 A1 |  if_e	sub	fp, #20
1f76c     16 2B 02 A6 |  if_e	mov	local03, local04
1f770     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f774     44 00 90 5D |  if_ne	jmp	#LR__2504
1f778     00 26 06 F6 | 	mov	local01, #0
1f77c     A7 12 02 FB | 	rdlong	arg01, fp
1f780     09 13 52 F6 | 	abs	arg01, arg01 wc
1f784     1F 2E C6 C9 |  if_b	decod	local05, #31
1f788     00 2E 06 36 |  if_ae	mov	local05, #0
1f78c     28 92 B0 FD | 	call	#__system___float_fromuns
1f790     17 FB 61 F5 | 	xor	result1, local05
1f794     FD 12 02 F6 | 	mov	arg01, result1
1f798     0C 4E 05 F1 | 	add	fp, #12
1f79c     A7 14 02 FB | 	rdlong	arg02, fp
1f7a0     0C 4E 85 F1 | 	sub	fp, #12
1f7a4     01 16 06 F6 | 	mov	arg03, #1
1f7a8     44 9A B0 FD | 	call	#__system___float_cmp
1f7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1f7b0     00 26 26 56 |  if_ne	not	local01, #0
1f7b4     A7 26 62 FC | 	wrlong	local01, fp
1f7b8     90 02 90 FD | 	jmp	#LR__2513
1f7bc                 | LR__2504
1f7bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1f7bc     08 4E 05 F1 | 	add	fp, #8
1f7c0     A7 26 02 FB | 	rdlong	local01, fp
1f7c4     08 4E 85 F1 | 	sub	fp, #8
1f7c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f7cc     14 4E 05 A1 |  if_e	add	fp, #20
1f7d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f7d4     14 4E 85 A1 |  if_e	sub	fp, #20
1f7d8     16 2B 02 A6 |  if_e	mov	local03, local04
1f7dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7e0     24 00 90 5D |  if_ne	jmp	#LR__2505
1f7e4     00 26 06 F6 | 	mov	local01, #0
1f7e8     A7 28 02 FB | 	rdlong	local02, fp
1f7ec     0C 4E 05 F1 | 	add	fp, #12
1f7f0     A7 2A 02 FB | 	rdlong	local03, fp
1f7f4     0C 4E 85 F1 | 	sub	fp, #12
1f7f8     15 29 0A F2 | 	cmp	local02, local03 wz
1f7fc     01 26 66 56 |  if_ne	neg	local01, #1
1f800     A7 26 62 FC | 	wrlong	local01, fp
1f804     44 02 90 FD | 	jmp	#LR__2513
1f808                 | LR__2505
1f808                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1f808     08 4E 05 F1 | 	add	fp, #8
1f80c     A7 26 02 FB | 	rdlong	local01, fp
1f810     08 4E 85 F1 | 	sub	fp, #8
1f814     1C 26 0E F2 | 	cmp	local01, #28 wz
1f818     14 4E 05 A1 |  if_e	add	fp, #20
1f81c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f820     14 4E 85 A1 |  if_e	sub	fp, #20
1f824     16 2B 02 A6 |  if_e	mov	local03, local04
1f828     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f82c     24 00 90 5D |  if_ne	jmp	#LR__2506
1f830     00 26 06 F6 | 	mov	local01, #0
1f834     A7 28 02 FB | 	rdlong	local02, fp
1f838     0C 4E 05 F1 | 	add	fp, #12
1f83c     A7 2A 02 FB | 	rdlong	local03, fp
1f840     0C 4E 85 F1 | 	sub	fp, #12
1f844     15 29 0A F2 | 	cmp	local02, local03 wz
1f848     01 26 66 56 |  if_ne	neg	local01, #1
1f84c     A7 26 62 FC | 	wrlong	local01, fp
1f850     F8 01 90 FD | 	jmp	#LR__2513
1f854                 | LR__2506
1f854                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1f854     08 4E 05 F1 | 	add	fp, #8
1f858     A7 26 02 FB | 	rdlong	local01, fp
1f85c     08 4E 85 F1 | 	sub	fp, #8
1f860     1D 26 0E F2 | 	cmp	local01, #29 wz
1f864     14 4E 05 A1 |  if_e	add	fp, #20
1f868     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f86c     14 4E 85 A1 |  if_e	sub	fp, #20
1f870     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f874     34 00 90 5D |  if_ne	jmp	#LR__2507
1f878     00 26 06 F6 | 	mov	local01, #0
1f87c     A7 12 02 FB | 	rdlong	arg01, fp
1f880     34 91 B0 FD | 	call	#__system___float_fromuns
1f884     FD 12 02 F6 | 	mov	arg01, result1
1f888     0C 4E 05 F1 | 	add	fp, #12
1f88c     A7 14 02 FB | 	rdlong	arg02, fp
1f890     0C 4E 85 F1 | 	sub	fp, #12
1f894     01 16 06 F6 | 	mov	arg03, #1
1f898     54 99 B0 FD | 	call	#__system___float_cmp
1f89c     00 FA 0D F2 | 	cmp	result1, #0 wz
1f8a0     00 26 26 56 |  if_ne	not	local01, #0
1f8a4     A7 26 62 FC | 	wrlong	local01, fp
1f8a8     A0 01 90 FD | 	jmp	#LR__2513
1f8ac                 | LR__2507
1f8ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1f8ac     08 4E 05 F1 | 	add	fp, #8
1f8b0     A7 26 02 FB | 	rdlong	local01, fp
1f8b4     08 4E 85 F1 | 	sub	fp, #8
1f8b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f8bc     14 4E 05 A1 |  if_e	add	fp, #20
1f8c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f8c4     14 4E 85 A1 |  if_e	sub	fp, #20
1f8c8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f8cc     24 00 90 5D |  if_ne	jmp	#LR__2508
1f8d0     00 26 06 F6 | 	mov	local01, #0
1f8d4     A7 28 02 FB | 	rdlong	local02, fp
1f8d8     0C 4E 05 F1 | 	add	fp, #12
1f8dc     A7 2A 02 FB | 	rdlong	local03, fp
1f8e0     0C 4E 85 F1 | 	sub	fp, #12
1f8e4     15 29 0A F2 | 	cmp	local02, local03 wz
1f8e8     01 26 66 56 |  if_ne	neg	local01, #1
1f8ec     A7 26 62 FC | 	wrlong	local01, fp
1f8f0     58 01 90 FD | 	jmp	#LR__2513
1f8f4                 | LR__2508
1f8f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1f8f4     08 4E 05 F1 | 	add	fp, #8
1f8f8     A7 26 02 FB | 	rdlong	local01, fp
1f8fc     08 4E 85 F1 | 	sub	fp, #8
1f900     1D 26 0E F2 | 	cmp	local01, #29 wz
1f904     14 4E 05 A1 |  if_e	add	fp, #20
1f908     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f90c     14 4E 85 A1 |  if_e	sub	fp, #20
1f910     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f914     24 00 90 5D |  if_ne	jmp	#LR__2509
1f918     00 26 06 F6 | 	mov	local01, #0
1f91c     A7 28 02 FB | 	rdlong	local02, fp
1f920     0C 4E 05 F1 | 	add	fp, #12
1f924     A7 2A 02 FB | 	rdlong	local03, fp
1f928     0C 4E 85 F1 | 	sub	fp, #12
1f92c     15 29 0A F2 | 	cmp	local02, local03 wz
1f930     01 26 66 56 |  if_ne	neg	local01, #1
1f934     A7 26 62 FC | 	wrlong	local01, fp
1f938     10 01 90 FD | 	jmp	#LR__2513
1f93c                 | LR__2509
1f93c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1f93c     08 4E 05 F1 | 	add	fp, #8
1f940     A7 26 02 FB | 	rdlong	local01, fp
1f944     08 4E 85 F1 | 	sub	fp, #8
1f948     2B 26 0E F2 | 	cmp	local01, #43 wz
1f94c     14 4E 05 A1 |  if_e	add	fp, #20
1f950     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f954     14 4E 85 A1 |  if_e	sub	fp, #20
1f958     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f95c     30 00 90 5D |  if_ne	jmp	#LR__2510
1f960     00 26 06 F6 | 	mov	local01, #0
1f964     A7 12 02 FB | 	rdlong	arg01, fp
1f968     EC DA BE FD | 	call	#_convertstring
1f96c     FD 12 02 F6 | 	mov	arg01, result1
1f970     0C 4E 05 F1 | 	add	fp, #12
1f974     A7 14 02 FB | 	rdlong	arg02, fp
1f978     0C 4E 85 F1 | 	sub	fp, #12
1f97c     E8 65 B0 FD | 	call	#__system___string_cmp
1f980     00 FA 0D F2 | 	cmp	result1, #0 wz
1f984     00 26 26 56 |  if_ne	not	local01, #0
1f988     A7 26 62 FC | 	wrlong	local01, fp
1f98c     BC 00 90 FD | 	jmp	#LR__2513
1f990                 | LR__2510
1f990                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1f990     08 4E 05 F1 | 	add	fp, #8
1f994     A7 26 02 FB | 	rdlong	local01, fp
1f998     08 4E 85 F1 | 	sub	fp, #8
1f99c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f9a0     14 4E 05 A1 |  if_e	add	fp, #20
1f9a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1f9ac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f9b0     34 00 90 5D |  if_ne	jmp	#LR__2511
1f9b4     00 26 06 F6 | 	mov	local01, #0
1f9b8     A7 28 02 FB | 	rdlong	local02, fp
1f9bc     0C 4E 05 F1 | 	add	fp, #12
1f9c0     A7 12 02 FB | 	rdlong	arg01, fp
1f9c4     0C 4E 85 F1 | 	sub	fp, #12
1f9c8     8C DA BE FD | 	call	#_convertstring
1f9cc     FD 14 02 F6 | 	mov	arg02, result1
1f9d0     14 13 02 F6 | 	mov	arg01, local02
1f9d4     90 65 B0 FD | 	call	#__system___string_cmp
1f9d8     00 FA 0D F2 | 	cmp	result1, #0 wz
1f9dc     00 26 26 56 |  if_ne	not	local01, #0
1f9e0     A7 26 62 FC | 	wrlong	local01, fp
1f9e4     64 00 90 FD | 	jmp	#LR__2513
1f9e8                 | LR__2511
1f9e8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1f9e8     08 4E 05 F1 | 	add	fp, #8
1f9ec     A7 26 02 FB | 	rdlong	local01, fp
1f9f0     08 4E 85 F1 | 	sub	fp, #8
1f9f4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f9f8     14 4E 05 A1 |  if_e	add	fp, #20
1f9fc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fa00     14 4E 85 A1 |  if_e	sub	fp, #20
1fa04     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1fa08     3C 00 90 5D |  if_ne	jmp	#LR__2512
1fa0c     00 26 06 F6 | 	mov	local01, #0
1fa10     A7 12 02 FB | 	rdlong	arg01, fp
1fa14     40 DA BE FD | 	call	#_convertstring
1fa18     FD 28 02 F6 | 	mov	local02, result1
1fa1c     0C 4E 05 F1 | 	add	fp, #12
1fa20     A7 12 02 FB | 	rdlong	arg01, fp
1fa24     0C 4E 85 F1 | 	sub	fp, #12
1fa28     2C DA BE FD | 	call	#_convertstring
1fa2c     FD 14 02 F6 | 	mov	arg02, result1
1fa30     14 13 02 F6 | 	mov	arg01, local02
1fa34     30 65 B0 FD | 	call	#__system___string_cmp
1fa38     00 FA 0D F2 | 	cmp	result1, #0 wz
1fa3c     00 26 26 56 |  if_ne	not	local01, #0
1fa40     A7 26 62 FC | 	wrlong	local01, fp
1fa44     04 00 90 FD | 	jmp	#LR__2513
1fa48                 | LR__2512
1fa48     A7 00 68 FC | 	wrlong	#0, fp
1fa4c                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1fa4c                 | LR__2513
1fa4c     08 4E 05 F1 | 	add	fp, #8
1fa50     A7 38 68 FC | 	wrlong	#28, fp
1fa54     08 4E 85 F1 | 	sub	fp, #8
1fa58     A7 12 02 F6 | 	mov	arg01, fp
1fa5c     18 D9 BE FD | 	call	#_push
1fa60     A7 F0 03 F6 | 	mov	ptra, fp
1fa64     B2 00 A0 FD | 	call	#popregs_
1fa68                 | _do_ne_ret
1fa68     2D 00 64 FD | 	ret
1fa6c                 | 
1fa6c                 | ' 
1fa6c                 | ' '--------------------------------- OR
1fa6c                 | ' 
1fa6c                 | ' sub do_or 
1fa6c                 | _do_or
1fa6c     03 4A 05 F6 | 	mov	COUNT_, #3
1fa70     A8 00 A0 FD | 	call	#pushregs_
1fa74     18 F0 07 F1 | 	add	ptra, #24
1fa78     64 D8 BE FD | 	call	#_pop
1fa7c     FD 12 02 F6 | 	mov	arg01, result1
1fa80     FE 26 02 F6 | 	mov	local01, result2
1fa84     FF 28 02 F6 | 	mov	local02, result3
1fa88     0C 4E 05 F1 | 	add	fp, #12
1fa8c     A7 12 62 FC | 	wrlong	arg01, fp
1fa90     04 4E 05 F1 | 	add	fp, #4
1fa94     A7 26 62 FC | 	wrlong	local01, fp
1fa98     04 4E 05 F1 | 	add	fp, #4
1fa9c     A7 28 62 FC | 	wrlong	local02, fp
1faa0     14 4E 85 F1 | 	sub	fp, #20
1faa4     38 D8 BE FD | 	call	#_pop
1faa8     FF 2A 02 F6 | 	mov	local03, result3
1faac     A7 FA 61 FC | 	wrlong	result1, fp
1fab0     04 4E 05 F1 | 	add	fp, #4
1fab4     A7 FC 61 FC | 	wrlong	result2, fp
1fab8     04 4E 05 F1 | 	add	fp, #4
1fabc     A7 2A 62 FC | 	wrlong	local03, fp
1fac0                 | ' 
1fac0                 | ' t2=pop()
1fac0                 | ' t1=pop()
1fac0                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1fac0     08 4E 85 F1 | 	sub	fp, #8
1fac4     1C 2A 0E F2 | 	cmp	local03, #28 wz
1fac8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1facc     A7 2A 62 AC |  if_e	wrlong	local03, fp
1fad0     08 4E 05 A1 |  if_e	add	fp, #8
1fad4     A7 3A 68 AC |  if_e	wrlong	#29, fp
1fad8     08 4E 85 A1 |  if_e	sub	fp, #8
1fadc                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1fadc     14 4E 05 F1 | 	add	fp, #20
1fae0     A7 2A 02 FB | 	rdlong	local03, fp
1fae4     14 4E 85 F1 | 	sub	fp, #20
1fae8     1C 2A 0E F2 | 	cmp	local03, #28 wz
1faec     18 00 90 5D |  if_ne	jmp	#LR__2520
1faf0     0C 4E 05 F1 | 	add	fp, #12
1faf4     A7 2A 02 FB | 	rdlong	local03, fp
1faf8     A7 2A 62 FC | 	wrlong	local03, fp
1fafc     08 4E 05 F1 | 	add	fp, #8
1fb00     A7 3A 68 FC | 	wrlong	#29, fp
1fb04     14 4E 85 F1 | 	sub	fp, #20
1fb08                 | LR__2520
1fb08                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1fb08     08 4E 05 F1 | 	add	fp, #8
1fb0c     A7 2A 02 FB | 	rdlong	local03, fp
1fb10     08 4E 85 F1 | 	sub	fp, #8
1fb14     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fb18     14 4E 05 51 |  if_ne	add	fp, #20
1fb1c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1fb20     14 4E 85 51 |  if_ne	sub	fp, #20
1fb24     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1fb28     08 4E 05 51 |  if_ne	add	fp, #8
1fb2c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fb30     08 4E 85 51 |  if_ne	sub	fp, #8
1fb34     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1fb38     14 4E 05 51 |  if_ne	add	fp, #20
1fb3c     14 4E 85 51 |  if_ne	sub	fp, #20
1fb40     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1fb44     A7 0C 68 AC |  if_e	wrlong	#6, fp
1fb48     08 4E 05 A1 |  if_e	add	fp, #8
1fb4c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fb50     08 4E 85 A1 |  if_e	sub	fp, #8
1fb54     18 00 90 AD |  if_e	jmp	#LR__2521
1fb58     A7 2A 02 FB | 	rdlong	local03, fp
1fb5c     0C 4E 05 F1 | 	add	fp, #12
1fb60     A7 26 02 FB | 	rdlong	local01, fp
1fb64     0C 4E 85 F1 | 	sub	fp, #12
1fb68     13 2B 42 F5 | 	or	local03, local01
1fb6c     A7 2A 62 FC | 	wrlong	local03, fp
1fb70                 | LR__2521
1fb70     A7 12 02 F6 | 	mov	arg01, fp
1fb74     00 D8 BE FD | 	call	#_push
1fb78     A7 F0 03 F6 | 	mov	ptra, fp
1fb7c     B2 00 A0 FD | 	call	#popregs_
1fb80                 | _do_or_ret
1fb80     2D 00 64 FD | 	ret
1fb84                 | 
1fb84                 | ' 
1fb84                 | ' '--------------------------------- plus (+)
1fb84                 | ' 
1fb84                 | ' sub do_plus 
1fb84                 | _do_plus
1fb84     05 4A 05 F6 | 	mov	COUNT_, #5
1fb88     A8 00 A0 FD | 	call	#pushregs_
1fb8c     18 F0 07 F1 | 	add	ptra, #24
1fb90     4C D7 BE FD | 	call	#_pop
1fb94     FD 26 02 F6 | 	mov	local01, result1
1fb98     FE 28 02 F6 | 	mov	local02, result2
1fb9c     FF 2A 02 F6 | 	mov	local03, result3
1fba0     0C 4E 05 F1 | 	add	fp, #12
1fba4     A7 26 62 FC | 	wrlong	local01, fp
1fba8     04 4E 05 F1 | 	add	fp, #4
1fbac     A7 28 62 FC | 	wrlong	local02, fp
1fbb0     04 4E 05 F1 | 	add	fp, #4
1fbb4     A7 2A 62 FC | 	wrlong	local03, fp
1fbb8     14 4E 85 F1 | 	sub	fp, #20
1fbbc     20 D7 BE FD | 	call	#_pop
1fbc0     FF 2A 02 F6 | 	mov	local03, result3
1fbc4     A7 FA 61 FC | 	wrlong	result1, fp
1fbc8     04 4E 05 F1 | 	add	fp, #4
1fbcc     A7 FC 61 FC | 	wrlong	result2, fp
1fbd0     04 4E 05 F1 | 	add	fp, #4
1fbd4     A7 2A 62 FC | 	wrlong	local03, fp
1fbd8                 | ' 
1fbd8                 | ' t2=pop()
1fbd8                 | ' t1=pop()
1fbd8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1fbd8     08 4E 85 F1 | 	sub	fp, #8
1fbdc     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fbe0     14 4E 05 A1 |  if_e	add	fp, #20
1fbe4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fbe8     14 4E 85 A1 |  if_e	sub	fp, #20
1fbec     16 2B 02 A6 |  if_e	mov	local03, local04
1fbf0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fbf4     1C 00 90 5D |  if_ne	jmp	#LR__2530
1fbf8     A7 26 02 FB | 	rdlong	local01, fp
1fbfc     0C 4E 05 F1 | 	add	fp, #12
1fc00     A7 28 02 FB | 	rdlong	local02, fp
1fc04     0C 4E 85 F1 | 	sub	fp, #12
1fc08     14 27 02 F1 | 	add	local01, local02
1fc0c     A7 26 62 FC | 	wrlong	local01, fp
1fc10     48 04 90 FD | 	jmp	#LR__2545
1fc14                 | LR__2530
1fc14                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1fc14     08 4E 05 F1 | 	add	fp, #8
1fc18     A7 26 02 FB | 	rdlong	local01, fp
1fc1c     08 4E 85 F1 | 	sub	fp, #8
1fc20     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc24     14 4E 05 A1 |  if_e	add	fp, #20
1fc28     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc2c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc30     16 2B 02 A6 |  if_e	mov	local03, local04
1fc34     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc38     28 00 90 5D |  if_ne	jmp	#LR__2531
1fc3c     A7 26 02 FB | 	rdlong	local01, fp
1fc40     0C 4E 05 F1 | 	add	fp, #12
1fc44     A7 28 02 FB | 	rdlong	local02, fp
1fc48     0C 4E 85 F1 | 	sub	fp, #12
1fc4c     14 27 02 F1 | 	add	local01, local02
1fc50     A7 26 62 FC | 	wrlong	local01, fp
1fc54     08 4E 05 F1 | 	add	fp, #8
1fc58     A7 38 68 FC | 	wrlong	#28, fp
1fc5c     08 4E 85 F1 | 	sub	fp, #8
1fc60     F8 03 90 FD | 	jmp	#LR__2545
1fc64                 | LR__2531
1fc64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1fc64     08 4E 05 F1 | 	add	fp, #8
1fc68     A7 26 02 FB | 	rdlong	local01, fp
1fc6c     08 4E 85 F1 | 	sub	fp, #8
1fc70     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc74     14 4E 05 A1 |  if_e	add	fp, #20
1fc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fc80     16 2B 02 A6 |  if_e	mov	local03, local04
1fc84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fc88     30 00 90 5D |  if_ne	jmp	#LR__2532
1fc8c     A7 12 02 FB | 	rdlong	arg01, fp
1fc90     24 8D B0 FD | 	call	#__system___float_fromuns
1fc94     FD 12 02 F6 | 	mov	arg01, result1
1fc98     0C 4E 05 F1 | 	add	fp, #12
1fc9c     A7 14 02 FB | 	rdlong	arg02, fp
1fca0     0C 4E 85 F1 | 	sub	fp, #12
1fca4     44 8D B0 FD | 	call	#__system___float_add
1fca8     A7 FA 61 FC | 	wrlong	result1, fp
1fcac     08 4E 05 F1 | 	add	fp, #8
1fcb0     A7 3C 68 FC | 	wrlong	#30, fp
1fcb4     08 4E 85 F1 | 	sub	fp, #8
1fcb8     A0 03 90 FD | 	jmp	#LR__2545
1fcbc                 | LR__2532
1fcbc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1fcbc     08 4E 05 F1 | 	add	fp, #8
1fcc0     A7 26 02 FB | 	rdlong	local01, fp
1fcc4     08 4E 85 F1 | 	sub	fp, #8
1fcc8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fccc     14 4E 05 A1 |  if_e	add	fp, #20
1fcd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcd4     14 4E 85 A1 |  if_e	sub	fp, #20
1fcd8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcdc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fce0     1C 00 90 5D |  if_ne	jmp	#LR__2533
1fce4     A7 26 02 FB | 	rdlong	local01, fp
1fce8     0C 4E 05 F1 | 	add	fp, #12
1fcec     A7 28 02 FB | 	rdlong	local02, fp
1fcf0     0C 4E 85 F1 | 	sub	fp, #12
1fcf4     14 27 02 F1 | 	add	local01, local02
1fcf8     A7 26 62 FC | 	wrlong	local01, fp
1fcfc     5C 03 90 FD | 	jmp	#LR__2545
1fd00                 | LR__2533
1fd00                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1fd00     08 4E 05 F1 | 	add	fp, #8
1fd04     A7 26 02 FB | 	rdlong	local01, fp
1fd08     08 4E 85 F1 | 	sub	fp, #8
1fd0c     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd10     14 4E 05 A1 |  if_e	add	fp, #20
1fd14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd18     14 4E 85 A1 |  if_e	sub	fp, #20
1fd1c     16 2B 02 A6 |  if_e	mov	local03, local04
1fd20     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fd24     1C 00 90 5D |  if_ne	jmp	#LR__2534
1fd28     A7 26 02 FB | 	rdlong	local01, fp
1fd2c     0C 4E 05 F1 | 	add	fp, #12
1fd30     A7 28 02 FB | 	rdlong	local02, fp
1fd34     0C 4E 85 F1 | 	sub	fp, #12
1fd38     14 27 02 F1 | 	add	local01, local02
1fd3c     A7 26 62 FC | 	wrlong	local01, fp
1fd40     18 03 90 FD | 	jmp	#LR__2545
1fd44                 | LR__2534
1fd44                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1fd44     08 4E 05 F1 | 	add	fp, #8
1fd48     A7 26 02 FB | 	rdlong	local01, fp
1fd4c     08 4E 85 F1 | 	sub	fp, #8
1fd50     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd54     14 4E 05 A1 |  if_e	add	fp, #20
1fd58     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd5c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd60     16 2B 02 A6 |  if_e	mov	local03, local04
1fd64     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd68     40 00 90 5D |  if_ne	jmp	#LR__2535
1fd6c     A7 12 02 FB | 	rdlong	arg01, fp
1fd70     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd74     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd78     00 2E 06 36 |  if_ae	mov	local05, #0
1fd7c     38 8C B0 FD | 	call	#__system___float_fromuns
1fd80     17 FB 61 F5 | 	xor	result1, local05
1fd84     FD 12 02 F6 | 	mov	arg01, result1
1fd88     0C 4E 05 F1 | 	add	fp, #12
1fd8c     A7 14 02 FB | 	rdlong	arg02, fp
1fd90     0C 4E 85 F1 | 	sub	fp, #12
1fd94     54 8C B0 FD | 	call	#__system___float_add
1fd98     A7 FA 61 FC | 	wrlong	result1, fp
1fd9c     08 4E 05 F1 | 	add	fp, #8
1fda0     A7 3C 68 FC | 	wrlong	#30, fp
1fda4     08 4E 85 F1 | 	sub	fp, #8
1fda8     B0 02 90 FD | 	jmp	#LR__2545
1fdac                 | LR__2535
1fdac                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1fdac     08 4E 05 F1 | 	add	fp, #8
1fdb0     A7 26 02 FB | 	rdlong	local01, fp
1fdb4     08 4E 85 F1 | 	sub	fp, #8
1fdb8     1E 26 0E F2 | 	cmp	local01, #30 wz
1fdbc     14 4E 05 A1 |  if_e	add	fp, #20
1fdc0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fdc4     14 4E 85 A1 |  if_e	sub	fp, #20
1fdc8     16 2B 02 A6 |  if_e	mov	local03, local04
1fdcc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fdd0     28 00 90 5D |  if_ne	jmp	#LR__2536
1fdd4     A7 26 02 FB | 	rdlong	local01, fp
1fdd8     0C 4E 05 F1 | 	add	fp, #12
1fddc     A7 12 02 FB | 	rdlong	arg01, fp
1fde0     0C 4E 85 F1 | 	sub	fp, #12
1fde4     D0 8B B0 FD | 	call	#__system___float_fromuns
1fde8     FD 14 02 F6 | 	mov	arg02, result1
1fdec     13 13 02 F6 | 	mov	arg01, local01
1fdf0     F8 8B B0 FD | 	call	#__system___float_add
1fdf4     A7 FA 61 FC | 	wrlong	result1, fp
1fdf8     60 02 90 FD | 	jmp	#LR__2545
1fdfc                 | LR__2536
1fdfc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1fdfc     08 4E 05 F1 | 	add	fp, #8
1fe00     A7 26 02 FB | 	rdlong	local01, fp
1fe04     08 4E 85 F1 | 	sub	fp, #8
1fe08     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe0c     14 4E 05 A1 |  if_e	add	fp, #20
1fe10     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe14     14 4E 85 A1 |  if_e	sub	fp, #20
1fe18     16 2B 02 A6 |  if_e	mov	local03, local04
1fe1c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe20     38 00 90 5D |  if_ne	jmp	#LR__2537
1fe24     A7 26 02 FB | 	rdlong	local01, fp
1fe28     0C 4E 05 F1 | 	add	fp, #12
1fe2c     A7 12 02 FB | 	rdlong	arg01, fp
1fe30     0C 4E 85 F1 | 	sub	fp, #12
1fe34     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe38     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe3c     00 2E 06 36 |  if_ae	mov	local05, #0
1fe40     74 8B B0 FD | 	call	#__system___float_fromuns
1fe44     17 FB 61 F5 | 	xor	result1, local05
1fe48     FD 14 02 F6 | 	mov	arg02, result1
1fe4c     13 13 02 F6 | 	mov	arg01, local01
1fe50     98 8B B0 FD | 	call	#__system___float_add
1fe54     A7 FA 61 FC | 	wrlong	result1, fp
1fe58     00 02 90 FD | 	jmp	#LR__2545
1fe5c                 | LR__2537
1fe5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1fe5c     08 4E 05 F1 | 	add	fp, #8
1fe60     A7 26 02 FB | 	rdlong	local01, fp
1fe64     08 4E 85 F1 | 	sub	fp, #8
1fe68     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe6c     14 4E 05 A1 |  if_e	add	fp, #20
1fe70     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fe74     14 4E 85 A1 |  if_e	sub	fp, #20
1fe78     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1fe7c     1C 00 90 5D |  if_ne	jmp	#LR__2538
1fe80     A7 12 02 FB | 	rdlong	arg01, fp
1fe84     0C 4E 05 F1 | 	add	fp, #12
1fe88     A7 14 02 FB | 	rdlong	arg02, fp
1fe8c     0C 4E 85 F1 | 	sub	fp, #12
1fe90     58 8B B0 FD | 	call	#__system___float_add
1fe94     A7 FA 61 FC | 	wrlong	result1, fp
1fe98     C0 01 90 FD | 	jmp	#LR__2545
1fe9c                 | LR__2538
1fe9c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1fe9c     08 4E 05 F1 | 	add	fp, #8
1fea0     A7 26 02 FB | 	rdlong	local01, fp
1fea4     08 4E 85 F1 | 	sub	fp, #8
1fea8     1F 26 0E F2 | 	cmp	local01, #31 wz
1feac     24 00 90 5D |  if_ne	jmp	#LR__2539
1feb0     14 4E 05 F1 | 	add	fp, #20
1feb4     A7 2A 02 FB | 	rdlong	local03, fp
1feb8     14 4E 85 F1 | 	sub	fp, #20
1febc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fec0     A7 04 68 5C |  if_ne	wrlong	#2, fp
1fec4     08 4E 05 51 |  if_ne	add	fp, #8
1fec8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fecc     08 4E 85 51 |  if_ne	sub	fp, #8
1fed0     88 01 90 5D |  if_ne	jmp	#LR__2545
1fed4                 | LR__2539
1fed4                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1fed4     14 4E 05 F1 | 	add	fp, #20
1fed8     A7 26 02 FB | 	rdlong	local01, fp
1fedc     14 4E 85 F1 | 	sub	fp, #20
1fee0     1F 26 0E F2 | 	cmp	local01, #31 wz
1fee4     24 00 90 5D |  if_ne	jmp	#LR__2540
1fee8     08 4E 05 F1 | 	add	fp, #8
1feec     A7 2A 02 FB | 	rdlong	local03, fp
1fef0     08 4E 85 F1 | 	sub	fp, #8
1fef4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1fef8     A7 04 68 5C |  if_ne	wrlong	#2, fp
1fefc     08 4E 05 51 |  if_ne	add	fp, #8
1ff00     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1ff04     08 4E 85 51 |  if_ne	sub	fp, #8
1ff08     50 01 90 5D |  if_ne	jmp	#LR__2545
1ff0c                 | LR__2540
1ff0c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1ff0c     08 4E 05 F1 | 	add	fp, #8
1ff10     A7 26 02 FB | 	rdlong	local01, fp
1ff14     08 4E 85 F1 | 	sub	fp, #8
1ff18     1F 26 0E F2 | 	cmp	local01, #31 wz
1ff1c     14 4E 05 A1 |  if_e	add	fp, #20
1ff20     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff24     14 4E 85 A1 |  if_e	sub	fp, #20
1ff28     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff2c     1C 00 90 5D |  if_ne	jmp	#LR__2541
1ff30     A7 12 02 FB | 	rdlong	arg01, fp
1ff34     0C 4E 05 F1 | 	add	fp, #12
1ff38     A7 14 02 FB | 	rdlong	arg02, fp
1ff3c     0C 4E 85 F1 | 	sub	fp, #12
1ff40     58 60 B0 FD | 	call	#__system___string_concat
1ff44     A7 FA 61 FC | 	wrlong	result1, fp
1ff48     10 01 90 FD | 	jmp	#LR__2545
1ff4c                 | LR__2541
1ff4c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1ff4c     08 4E 05 F1 | 	add	fp, #8
1ff50     A7 26 02 FB | 	rdlong	local01, fp
1ff54     08 4E 85 F1 | 	sub	fp, #8
1ff58     2B 26 0E F2 | 	cmp	local01, #43 wz
1ff5c     14 4E 05 A1 |  if_e	add	fp, #20
1ff60     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ff64     14 4E 85 A1 |  if_e	sub	fp, #20
1ff68     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff6c     30 00 90 5D |  if_ne	jmp	#LR__2542
1ff70     A7 12 02 FB | 	rdlong	arg01, fp
1ff74     E0 D4 BE FD | 	call	#_convertstring
1ff78     FD 12 02 F6 | 	mov	arg01, result1
1ff7c     0C 4E 05 F1 | 	add	fp, #12
1ff80     A7 14 02 FB | 	rdlong	arg02, fp
1ff84     0C 4E 85 F1 | 	sub	fp, #12
1ff88     10 60 B0 FD | 	call	#__system___string_concat
1ff8c     A7 FA 61 FC | 	wrlong	result1, fp
1ff90     08 4E 05 F1 | 	add	fp, #8
1ff94     A7 3E 68 FC | 	wrlong	#31, fp
1ff98     08 4E 85 F1 | 	sub	fp, #8
1ff9c     BC 00 90 FD | 	jmp	#LR__2545
1ffa0                 | LR__2542
1ffa0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1ffa0     08 4E 05 F1 | 	add	fp, #8
1ffa4     A7 26 02 FB | 	rdlong	local01, fp
1ffa8     08 4E 85 F1 | 	sub	fp, #8
1ffac     1F 26 0E F2 | 	cmp	local01, #31 wz
1ffb0     14 4E 05 A1 |  if_e	add	fp, #20
1ffb4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ffb8     14 4E 85 A1 |  if_e	sub	fp, #20
1ffbc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ffc0     28 00 90 5D |  if_ne	jmp	#LR__2543
1ffc4     A7 26 02 FB | 	rdlong	local01, fp
1ffc8     0C 4E 05 F1 | 	add	fp, #12
1ffcc     A7 12 02 FB | 	rdlong	arg01, fp
1ffd0     0C 4E 85 F1 | 	sub	fp, #12
1ffd4     80 D4 BE FD | 	call	#_convertstring
1ffd8     FD 14 02 F6 | 	mov	arg02, result1
1ffdc     13 13 02 F6 | 	mov	arg01, local01
1ffe0     B8 5F B0 FD | 	call	#__system___string_concat
1ffe4     A7 FA 61 FC | 	wrlong	result1, fp
1ffe8     70 00 90 FD | 	jmp	#LR__2545
1ffec                 | LR__2543
1ffec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1ffec     08 4E 05 F1 | 	add	fp, #8
1fff0     A7 26 02 FB | 	rdlong	local01, fp
1fff4     08 4E 85 F1 | 	sub	fp, #8
1fff8     2B 26 0E F2 | 	cmp	local01, #43 wz
1fffc     14 4E 05 A1 |  if_e	add	fp, #20
20000     A7 2A 02 AB |  if_e	rdlong	local03, fp
20004     14 4E 85 A1 |  if_e	sub	fp, #20
20008     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
2000c     3C 00 90 5D |  if_ne	jmp	#LR__2544
20010     A7 12 02 FB | 	rdlong	arg01, fp
20014     40 D4 BE FD | 	call	#_convertstring
20018     FD 26 02 F6 | 	mov	local01, result1
2001c     0C 4E 05 F1 | 	add	fp, #12
20020     A7 12 02 FB | 	rdlong	arg01, fp
20024     0C 4E 85 F1 | 	sub	fp, #12
20028     2C D4 BE FD | 	call	#_convertstring
2002c     FD 14 02 F6 | 	mov	arg02, result1
20030     13 13 02 F6 | 	mov	arg01, local01
20034     64 5F B0 FD | 	call	#__system___string_concat
20038     A7 FA 61 FC | 	wrlong	result1, fp
2003c     08 4E 05 F1 | 	add	fp, #8
20040     A7 3E 68 FC | 	wrlong	#31, fp
20044     08 4E 85 F1 | 	sub	fp, #8
20048     10 00 90 FD | 	jmp	#LR__2545
2004c                 | LR__2544
2004c     A7 08 68 FC | 	wrlong	#4, fp
20050     08 4E 05 F1 | 	add	fp, #8
20054     A7 FE 69 FC | 	wrlong	#255, fp
20058     08 4E 85 F1 | 	sub	fp, #8
2005c                 | LR__2545
2005c     A7 12 02 F6 | 	mov	arg01, fp
20060     14 D3 BE FD | 	call	#_push
20064     A7 F0 03 F6 | 	mov	ptra, fp
20068     B2 00 A0 FD | 	call	#popregs_
2006c                 | _do_plus_ret
2006c     2D 00 64 FD | 	ret
20070                 | 
20070                 | ' 
20070                 | ' '--------------------------------- power (^)
20070                 | ' 
20070                 | ' sub do_power 
20070                 | _do_power
20070     02 4A 05 F6 | 	mov	COUNT_, #2
20074     A8 00 A0 FD | 	call	#pushregs_
20078     18 F0 07 F1 | 	add	ptra, #24
2007c     60 D2 BE FD | 	call	#_pop
20080     FD 14 02 F6 | 	mov	arg02, result1
20084     FE 12 02 F6 | 	mov	arg01, result2
20088     FF 26 02 F6 | 	mov	local01, result3
2008c     0C 4E 05 F1 | 	add	fp, #12
20090     A7 14 62 FC | 	wrlong	arg02, fp
20094     04 4E 05 F1 | 	add	fp, #4
20098     A7 12 62 FC | 	wrlong	arg01, fp
2009c     04 4E 05 F1 | 	add	fp, #4
200a0     A7 26 62 FC | 	wrlong	local01, fp
200a4     14 4E 85 F1 | 	sub	fp, #20
200a8     34 D2 BE FD | 	call	#_pop
200ac     A7 FA 61 FC | 	wrlong	result1, fp
200b0     04 4E 05 F1 | 	add	fp, #4
200b4     A7 FC 61 FC | 	wrlong	result2, fp
200b8     04 4E 05 F1 | 	add	fp, #4
200bc     A7 FE 61 FC | 	wrlong	result3, fp
200c0                 | ' 
200c0                 | ' t2=pop()
200c0                 | ' t1=pop()
200c0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
200c0     08 4E 85 F1 | 	sub	fp, #8
200c4     1F FE 0D F2 | 	cmp	result3, #31 wz
200c8     14 4E 05 51 |  if_ne	add	fp, #20
200cc     A7 26 02 5B |  if_ne	rdlong	local01, fp
200d0     14 4E 85 51 |  if_ne	sub	fp, #20
200d4     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
200d8     A7 18 68 AC |  if_e	wrlong	#12, fp
200dc     08 4E 05 A1 |  if_e	add	fp, #8
200e0     A7 FE 69 AC |  if_e	wrlong	#255, fp
200e4     08 4E 85 A1 |  if_e	sub	fp, #8
200e8     38 01 90 AD |  if_e	jmp	#LR__2555
200ec                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
200ec     08 4E 05 F1 | 	add	fp, #8
200f0     A7 14 02 FB | 	rdlong	arg02, fp
200f4     08 4E 85 F1 | 	sub	fp, #8
200f8     1C 14 0E F2 | 	cmp	arg02, #28 wz
200fc     28 00 90 5D |  if_ne	jmp	#LR__2550
20100     08 4E 05 F1 | 	add	fp, #8
20104     A7 3C 68 FC | 	wrlong	#30, fp
20108     08 4E 85 F1 | 	sub	fp, #8
2010c     A7 12 02 FB | 	rdlong	arg01, fp
20110     09 13 52 F6 | 	abs	arg01, arg01 wc
20114     1F 28 C6 C9 |  if_b	decod	local02, #31
20118     00 28 06 36 |  if_ae	mov	local02, #0
2011c     98 88 B0 FD | 	call	#__system___float_fromuns
20120     14 FB 61 F5 | 	xor	result1, local02
20124     A7 FA 61 FC | 	wrlong	result1, fp
20128                 | LR__2550
20128                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20128     08 4E 05 F1 | 	add	fp, #8
2012c     A7 14 02 FB | 	rdlong	arg02, fp
20130     08 4E 85 F1 | 	sub	fp, #8
20134     1D 14 0E F2 | 	cmp	arg02, #29 wz
20138     18 00 90 5D |  if_ne	jmp	#LR__2551
2013c     08 4E 05 F1 | 	add	fp, #8
20140     A7 3C 68 FC | 	wrlong	#30, fp
20144     08 4E 85 F1 | 	sub	fp, #8
20148     A7 12 02 FB | 	rdlong	arg01, fp
2014c     68 88 B0 FD | 	call	#__system___float_fromuns
20150     A7 FA 61 FC | 	wrlong	result1, fp
20154                 | LR__2551
20154                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20154     14 4E 05 F1 | 	add	fp, #20
20158     A7 14 02 FB | 	rdlong	arg02, fp
2015c     14 4E 85 F1 | 	sub	fp, #20
20160     1C 14 0E F2 | 	cmp	arg02, #28 wz
20164     34 00 90 5D |  if_ne	jmp	#LR__2552
20168     14 4E 05 F1 | 	add	fp, #20
2016c     A7 3C 68 FC | 	wrlong	#30, fp
20170     08 4E 85 F1 | 	sub	fp, #8
20174     A7 12 02 FB | 	rdlong	arg01, fp
20178     0C 4E 85 F1 | 	sub	fp, #12
2017c     09 13 52 F6 | 	abs	arg01, arg01 wc
20180     1F 28 C6 C9 |  if_b	decod	local02, #31
20184     00 28 06 36 |  if_ae	mov	local02, #0
20188     2C 88 B0 FD | 	call	#__system___float_fromuns
2018c     14 FB 61 F5 | 	xor	result1, local02
20190     0C 4E 05 F1 | 	add	fp, #12
20194     A7 FA 61 FC | 	wrlong	result1, fp
20198     0C 4E 85 F1 | 	sub	fp, #12
2019c                 | LR__2552
2019c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
2019c     14 4E 05 F1 | 	add	fp, #20
201a0     A7 14 02 FB | 	rdlong	arg02, fp
201a4     14 4E 85 F1 | 	sub	fp, #20
201a8     1D 14 0E F2 | 	cmp	arg02, #29 wz
201ac     24 00 90 5D |  if_ne	jmp	#LR__2553
201b0     14 4E 05 F1 | 	add	fp, #20
201b4     A7 3C 68 FC | 	wrlong	#30, fp
201b8     08 4E 85 F1 | 	sub	fp, #8
201bc     A7 12 02 FB | 	rdlong	arg01, fp
201c0     0C 4E 85 F1 | 	sub	fp, #12
201c4     F0 87 B0 FD | 	call	#__system___float_fromuns
201c8     0C 4E 05 F1 | 	add	fp, #12
201cc     A7 FA 61 FC | 	wrlong	result1, fp
201d0     0C 4E 85 F1 | 	sub	fp, #12
201d4                 | LR__2553
201d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
201d4     08 4E 05 F1 | 	add	fp, #8
201d8     A7 14 02 FB | 	rdlong	arg02, fp
201dc     08 4E 85 F1 | 	sub	fp, #8
201e0     1E 14 0E F2 | 	cmp	arg02, #30 wz
201e4     14 4E 05 A1 |  if_e	add	fp, #20
201e8     A7 26 02 AB |  if_e	rdlong	local01, fp
201ec     14 4E 85 A1 |  if_e	sub	fp, #20
201f0     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
201f4     1C 00 90 5D |  if_ne	jmp	#LR__2554
201f8     A7 12 02 FB | 	rdlong	arg01, fp
201fc     0C 4E 05 F1 | 	add	fp, #12
20200     A7 14 02 FB | 	rdlong	arg02, fp
20204     0C 4E 85 F1 | 	sub	fp, #12
20208     B8 9A B0 FD | 	call	#__system____builtin_powf
2020c     A7 FA 61 FC | 	wrlong	result1, fp
20210     10 00 90 FD | 	jmp	#LR__2555
20214                 | LR__2554
20214     A7 1A 68 FC | 	wrlong	#13, fp
20218     08 4E 05 F1 | 	add	fp, #8
2021c     A7 FE 69 FC | 	wrlong	#255, fp
20220     08 4E 85 F1 | 	sub	fp, #8
20224                 | LR__2555
20224     A7 12 02 F6 | 	mov	arg01, fp
20228     4C D1 BE FD | 	call	#_push
2022c     A7 F0 03 F6 | 	mov	ptra, fp
20230     B2 00 A0 FD | 	call	#popregs_
20234                 | _do_power_ret
20234     2D 00 64 FD | 	ret
20238                 | 
20238                 | ' 
20238                 | ' '--------------------------------- SHL
20238                 | ' 
20238                 | ' sub do_shl 
20238                 | _do_shl
20238     03 4A 05 F6 | 	mov	COUNT_, #3
2023c     A8 00 A0 FD | 	call	#pushregs_
20240     18 F0 07 F1 | 	add	ptra, #24
20244     98 D0 BE FD | 	call	#_pop
20248     FD 12 02 F6 | 	mov	arg01, result1
2024c     FE 26 02 F6 | 	mov	local01, result2
20250     FF 28 02 F6 | 	mov	local02, result3
20254     0C 4E 05 F1 | 	add	fp, #12
20258     A7 12 62 FC | 	wrlong	arg01, fp
2025c     04 4E 05 F1 | 	add	fp, #4
20260     A7 26 62 FC | 	wrlong	local01, fp
20264     04 4E 05 F1 | 	add	fp, #4
20268     A7 28 62 FC | 	wrlong	local02, fp
2026c     14 4E 85 F1 | 	sub	fp, #20
20270     6C D0 BE FD | 	call	#_pop
20274     FF 2A 02 F6 | 	mov	local03, result3
20278     A7 FA 61 FC | 	wrlong	result1, fp
2027c     04 4E 05 F1 | 	add	fp, #4
20280     A7 FC 61 FC | 	wrlong	result2, fp
20284     04 4E 05 F1 | 	add	fp, #4
20288     A7 2A 62 FC | 	wrlong	local03, fp
2028c                 | ' 
2028c                 | ' t2=pop()
2028c                 | ' t1=pop()
2028c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
2028c     08 4E 85 F1 | 	sub	fp, #8
20290     1C 2A 0E F2 | 	cmp	local03, #28 wz
20294     A7 2A 02 AB |  if_e	rdlong	local03, fp
20298     A7 2A 62 AC |  if_e	wrlong	local03, fp
2029c     08 4E 05 A1 |  if_e	add	fp, #8
202a0     A7 3A 68 AC |  if_e	wrlong	#29, fp
202a4     08 4E 85 A1 |  if_e	sub	fp, #8
202a8                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
202a8     14 4E 05 F1 | 	add	fp, #20
202ac     A7 2A 02 FB | 	rdlong	local03, fp
202b0     14 4E 85 F1 | 	sub	fp, #20
202b4     1C 2A 0E F2 | 	cmp	local03, #28 wz
202b8     18 00 90 5D |  if_ne	jmp	#LR__2560
202bc     0C 4E 05 F1 | 	add	fp, #12
202c0     A7 2A 02 FB | 	rdlong	local03, fp
202c4     A7 2A 62 FC | 	wrlong	local03, fp
202c8     08 4E 05 F1 | 	add	fp, #8
202cc     A7 3A 68 FC | 	wrlong	#29, fp
202d0     14 4E 85 F1 | 	sub	fp, #20
202d4                 | LR__2560
202d4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
202d4     08 4E 05 F1 | 	add	fp, #8
202d8     A7 2A 02 FB | 	rdlong	local03, fp
202dc     08 4E 85 F1 | 	sub	fp, #8
202e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
202e4     14 4E 05 51 |  if_ne	add	fp, #20
202e8     A7 28 02 5B |  if_ne	rdlong	local02, fp
202ec     14 4E 85 51 |  if_ne	sub	fp, #20
202f0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
202f4     08 4E 05 51 |  if_ne	add	fp, #8
202f8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
202fc     08 4E 85 51 |  if_ne	sub	fp, #8
20300     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20304     14 4E 05 51 |  if_ne	add	fp, #20
20308     14 4E 85 51 |  if_ne	sub	fp, #20
2030c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20310     A7 0C 68 AC |  if_e	wrlong	#6, fp
20314     08 4E 05 A1 |  if_e	add	fp, #8
20318     A7 FE 69 AC |  if_e	wrlong	#255, fp
2031c     08 4E 85 A1 |  if_e	sub	fp, #8
20320     18 00 90 AD |  if_e	jmp	#LR__2561
20324     A7 2A 02 FB | 	rdlong	local03, fp
20328     0C 4E 05 F1 | 	add	fp, #12
2032c     A7 26 02 FB | 	rdlong	local01, fp
20330     0C 4E 85 F1 | 	sub	fp, #12
20334     13 2B 62 F0 | 	shl	local03, local01
20338     A7 2A 62 FC | 	wrlong	local03, fp
2033c                 | LR__2561
2033c     A7 12 02 F6 | 	mov	arg01, fp
20340     34 D0 BE FD | 	call	#_push
20344     A7 F0 03 F6 | 	mov	ptra, fp
20348     B2 00 A0 FD | 	call	#popregs_
2034c                 | _do_shl_ret
2034c     2D 00 64 FD | 	ret
20350                 | 
20350                 | ' 
20350                 | ' '--------------------------------- SHR
20350                 | ' 
20350                 | ' sub do_shr 
20350                 | _do_shr
20350     03 4A 05 F6 | 	mov	COUNT_, #3
20354     A8 00 A0 FD | 	call	#pushregs_
20358     18 F0 07 F1 | 	add	ptra, #24
2035c     80 CF BE FD | 	call	#_pop
20360     FD 12 02 F6 | 	mov	arg01, result1
20364     FE 26 02 F6 | 	mov	local01, result2
20368     FF 28 02 F6 | 	mov	local02, result3
2036c     0C 4E 05 F1 | 	add	fp, #12
20370     A7 12 62 FC | 	wrlong	arg01, fp
20374     04 4E 05 F1 | 	add	fp, #4
20378     A7 26 62 FC | 	wrlong	local01, fp
2037c     04 4E 05 F1 | 	add	fp, #4
20380     A7 28 62 FC | 	wrlong	local02, fp
20384     14 4E 85 F1 | 	sub	fp, #20
20388     54 CF BE FD | 	call	#_pop
2038c     FF 2A 02 F6 | 	mov	local03, result3
20390     A7 FA 61 FC | 	wrlong	result1, fp
20394     04 4E 05 F1 | 	add	fp, #4
20398     A7 FC 61 FC | 	wrlong	result2, fp
2039c     04 4E 05 F1 | 	add	fp, #4
203a0     A7 2A 62 FC | 	wrlong	local03, fp
203a4                 | ' 
203a4                 | ' t2=pop()
203a4                 | ' t1=pop()
203a4                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
203a4     08 4E 85 F1 | 	sub	fp, #8
203a8     1C 2A 0E F2 | 	cmp	local03, #28 wz
203ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
203b0     A7 2A 62 AC |  if_e	wrlong	local03, fp
203b4     08 4E 05 A1 |  if_e	add	fp, #8
203b8     A7 3A 68 AC |  if_e	wrlong	#29, fp
203bc     08 4E 85 A1 |  if_e	sub	fp, #8
203c0                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
203c0     14 4E 05 F1 | 	add	fp, #20
203c4     A7 2A 02 FB | 	rdlong	local03, fp
203c8     14 4E 85 F1 | 	sub	fp, #20
203cc     1C 2A 0E F2 | 	cmp	local03, #28 wz
203d0     18 00 90 5D |  if_ne	jmp	#LR__2570
203d4     0C 4E 05 F1 | 	add	fp, #12
203d8     A7 2A 02 FB | 	rdlong	local03, fp
203dc     A7 2A 62 FC | 	wrlong	local03, fp
203e0     08 4E 05 F1 | 	add	fp, #8
203e4     A7 3A 68 FC | 	wrlong	#29, fp
203e8     14 4E 85 F1 | 	sub	fp, #20
203ec                 | LR__2570
203ec                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
203ec     08 4E 05 F1 | 	add	fp, #8
203f0     A7 2A 02 FB | 	rdlong	local03, fp
203f4     08 4E 85 F1 | 	sub	fp, #8
203f8     1F 2A 0E F2 | 	cmp	local03, #31 wz
203fc     14 4E 05 51 |  if_ne	add	fp, #20
20400     A7 28 02 5B |  if_ne	rdlong	local02, fp
20404     14 4E 85 51 |  if_ne	sub	fp, #20
20408     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
2040c     08 4E 05 51 |  if_ne	add	fp, #8
20410     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20414     08 4E 85 51 |  if_ne	sub	fp, #8
20418     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
2041c     14 4E 05 51 |  if_ne	add	fp, #20
20420     14 4E 85 51 |  if_ne	sub	fp, #20
20424     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20428     A7 0C 68 AC |  if_e	wrlong	#6, fp
2042c     08 4E 05 A1 |  if_e	add	fp, #8
20430     A7 FE 69 AC |  if_e	wrlong	#255, fp
20434     08 4E 85 A1 |  if_e	sub	fp, #8
20438     18 00 90 AD |  if_e	jmp	#LR__2571
2043c     A7 2A 02 FB | 	rdlong	local03, fp
20440     0C 4E 05 F1 | 	add	fp, #12
20444     A7 26 02 FB | 	rdlong	local01, fp
20448     0C 4E 85 F1 | 	sub	fp, #12
2044c     13 2B 42 F0 | 	shr	local03, local01
20450     A7 2A 62 FC | 	wrlong	local03, fp
20454                 | LR__2571
20454     A7 12 02 F6 | 	mov	arg01, fp
20458     1C CF BE FD | 	call	#_push
2045c     A7 F0 03 F6 | 	mov	ptra, fp
20460     B2 00 A0 FD | 	call	#popregs_
20464                 | _do_shr_ret
20464     2D 00 64 FD | 	ret
20468                 | 
20468                 | ' 
20468                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20468                 | ' 
20468                 | ' ''----------------------------------------------------------------------------------------------------
20468                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20468                 | ' ''----------------------------------------------------------------------------------------------------
20468                 | ' 
20468                 | ' ''--------------------------- Command function pointers
20468                 | ' 
20468                 | ' sub init_commands
20468                 | _init_commands
20468                 | ' 
20468                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20468     00 00 06 F6 | 	mov	_var01, #0
2046c     97 16 48 FB | 	callpa	#(@LR__2581-@LR__2580)>>2,fcache_load_ptr_
20470                 | LR__2580
20470     00 FB 01 F6 | 	mov	result1, _var01
20474     02 FA 65 F0 | 	shl	result1, #2
20478     43 00 00 FF 
2047c     60 E4 05 F1 | 	add	objptr, ##34400
20480     F2 FA 01 F1 | 	add	result1, objptr
20484     43 00 00 FF 
20488     60 E4 85 F1 | 	sub	objptr, ##34400
2048c     FD E4 61 FC | 	wrlong	objptr, result1
20490     01 00 06 F1 | 	add	_var01, #1
20494     00 01 56 F2 | 	cmps	_var01, #256 wc
20498     D4 FF 9F CD |  if_b	jmp	#LR__2580
2049c                 | LR__2581
2049c     F2 FA 01 F6 | 	mov	result1, objptr
204a0     14 FA 25 F4 | 	bith	result1, #20
204a4     43 00 00 FF 
204a8     64 E4 05 F1 | 	add	objptr, ##34404
204ac     F2 FA 61 FC | 	wrlong	result1, objptr
204b0     43 00 00 FF 
204b4     64 E4 85 F1 | 	sub	objptr, ##34404
204b8     F2 FA 01 F6 | 	mov	result1, objptr
204bc     15 FA 25 F4 | 	bith	result1, #21
204c0     43 00 00 FF 
204c4     68 E4 05 F1 | 	add	objptr, ##34408
204c8     F2 FA 61 FC | 	wrlong	result1, objptr
204cc     43 00 00 FF 
204d0     68 E4 85 F1 | 	sub	objptr, ##34408
204d4     F2 FA 01 F6 | 	mov	result1, objptr
204d8     34 FA 25 F4 | 	bith	result1, #52
204dc     43 00 00 FF 
204e0     6C E4 05 F1 | 	add	objptr, ##34412
204e4     F2 FA 61 FC | 	wrlong	result1, objptr
204e8     43 00 00 FF 
204ec     6C E4 85 F1 | 	sub	objptr, ##34412
204f0     F2 FA 01 F6 | 	mov	result1, objptr
204f4     16 FA 25 F4 | 	bith	result1, #22
204f8     43 00 00 FF 
204fc     74 E4 05 F1 | 	add	objptr, ##34420
20500     F2 FA 61 FC | 	wrlong	result1, objptr
20504     43 00 00 FF 
20508     74 E4 85 F1 | 	sub	objptr, ##34420
2050c     F2 FA 01 F6 | 	mov	result1, objptr
20510     00 28 00 FF 
20514     00 FA 45 F5 | 	or	result1, ##5242880
20518     43 00 00 FF 
2051c     78 E4 05 F1 | 	add	objptr, ##34424
20520     F2 FA 61 FC | 	wrlong	result1, objptr
20524     43 00 00 FF 
20528     78 E4 85 F1 | 	sub	objptr, ##34424
2052c     F2 FA 01 F6 | 	mov	result1, objptr
20530     35 FA 25 F4 | 	bith	result1, #53
20534     43 00 00 FF 
20538     7C E4 05 F1 | 	add	objptr, ##34428
2053c     F2 FA 61 FC | 	wrlong	result1, objptr
20540     43 00 00 FF 
20544     7C E4 85 F1 | 	sub	objptr, ##34428
20548     F2 FA 01 F6 | 	mov	result1, objptr
2054c     54 FA 25 F4 | 	bith	result1, #84
20550     43 00 00 FF 
20554     80 E4 05 F1 | 	add	objptr, ##34432
20558     F2 FA 61 FC | 	wrlong	result1, objptr
2055c     43 00 00 FF 
20560     80 E4 85 F1 | 	sub	objptr, ##34432
20564     F2 FA 01 F6 | 	mov	result1, objptr
20568     17 FA 25 F4 | 	bith	result1, #23
2056c     43 00 00 FF 
20570     84 E4 05 F1 | 	add	objptr, ##34436
20574     F2 FA 61 FC | 	wrlong	result1, objptr
20578     43 00 00 FF 
2057c     84 E4 85 F1 | 	sub	objptr, ##34436
20580     F2 FA 01 F6 | 	mov	result1, objptr
20584     00 48 00 FF 
20588     00 FA 45 F5 | 	or	result1, ##9437184
2058c     43 00 00 FF 
20590     88 E4 05 F1 | 	add	objptr, ##34440
20594     F2 FA 61 FC | 	wrlong	result1, objptr
20598     43 00 00 FF 
2059c     88 E4 85 F1 | 	sub	objptr, ##34440
205a0     F2 FA 01 F6 | 	mov	result1, objptr
205a4     00 50 00 FF 
205a8     00 FA 45 F5 | 	or	result1, ##10485760
205ac     43 00 00 FF 
205b0     8C E4 05 F1 | 	add	objptr, ##34444
205b4     F2 FA 61 FC | 	wrlong	result1, objptr
205b8     43 00 00 FF 
205bc     8C E4 85 F1 | 	sub	objptr, ##34444
205c0     F2 FA 01 F6 | 	mov	result1, objptr
205c4     00 58 00 FF 
205c8     00 FA 45 F5 | 	or	result1, ##11534336
205cc     43 00 00 FF 
205d0     90 E4 05 F1 | 	add	objptr, ##34448
205d4     F2 FA 61 FC | 	wrlong	result1, objptr
205d8     43 00 00 FF 
205dc     90 E4 85 F1 | 	sub	objptr, ##34448
205e0     F2 FA 01 F6 | 	mov	result1, objptr
205e4     36 FA 25 F4 | 	bith	result1, #54
205e8     43 00 00 FF 
205ec     A4 E4 05 F1 | 	add	objptr, ##34468
205f0     F2 FA 61 FC | 	wrlong	result1, objptr
205f4     43 00 00 FF 
205f8     A4 E4 85 F1 | 	sub	objptr, ##34468
205fc     F2 FA 01 F6 | 	mov	result1, objptr
20600     00 68 00 FF 
20604     00 FA 45 F5 | 	or	result1, ##13631488
20608     43 00 00 FF 
2060c     D4 E4 05 F1 | 	add	objptr, ##34516
20610     F2 FA 61 FC | 	wrlong	result1, objptr
20614     43 00 00 FF 
20618     D4 E4 85 F1 | 	sub	objptr, ##34516
2061c     F2 FA 01 F6 | 	mov	result1, objptr
20620     00 68 00 FF 
20624     00 FA 45 F5 | 	or	result1, ##13631488
20628     43 00 00 FF 
2062c     D0 E4 05 F1 | 	add	objptr, ##34512
20630     F2 FA 61 FC | 	wrlong	result1, objptr
20634     43 00 00 FF 
20638     D0 E4 85 F1 | 	sub	objptr, ##34512
2063c     F2 FA 01 F6 | 	mov	result1, objptr
20640     00 68 00 FF 
20644     00 FA 45 F5 | 	or	result1, ##13631488
20648     43 00 00 FF 
2064c     D8 E4 05 F1 | 	add	objptr, ##34520
20650     F2 FA 61 FC | 	wrlong	result1, objptr
20654     43 00 00 FF 
20658     D8 E4 85 F1 | 	sub	objptr, ##34520
2065c     F2 FA 01 F6 | 	mov	result1, objptr
20660     00 68 00 FF 
20664     00 FA 45 F5 | 	or	result1, ##13631488
20668     43 00 00 FF 
2066c     DC E4 05 F1 | 	add	objptr, ##34524
20670     F2 FA 61 FC | 	wrlong	result1, objptr
20674     43 00 00 FF 
20678     DC E4 85 F1 | 	sub	objptr, ##34524
2067c     F2 FA 01 F6 | 	mov	result1, objptr
20680     00 68 00 FF 
20684     00 FA 45 F5 | 	or	result1, ##13631488
20688     43 00 00 FF 
2068c     0C E5 05 F1 | 	add	objptr, ##34572
20690     F2 FA 61 FC | 	wrlong	result1, objptr
20694     43 00 00 FF 
20698     0C E5 85 F1 | 	sub	objptr, ##34572
2069c     F2 FA 01 F6 | 	mov	result1, objptr
206a0     55 FA 25 F4 | 	bith	result1, #85
206a4     43 00 00 FF 
206a8     BC E4 05 F1 | 	add	objptr, ##34492
206ac     F2 FA 61 FC | 	wrlong	result1, objptr
206b0     43 00 00 FF 
206b4     BC E4 85 F1 | 	sub	objptr, ##34492
206b8     F2 FA 01 F6 | 	mov	result1, objptr
206bc     00 68 00 FF 
206c0     00 FA 45 F5 | 	or	result1, ##13631488
206c4     43 00 00 FF 
206c8     10 E5 05 F1 | 	add	objptr, ##34576
206cc     F2 FA 61 FC | 	wrlong	result1, objptr
206d0     43 00 00 FF 
206d4     10 E5 85 F1 | 	sub	objptr, ##34576
206d8     F2 FA 01 F6 | 	mov	result1, objptr
206dc     00 68 00 FF 
206e0     00 FA 45 F5 | 	or	result1, ##13631488
206e4     43 00 00 FF 
206e8     E0 E4 05 F1 | 	add	objptr, ##34528
206ec     F2 FA 61 FC | 	wrlong	result1, objptr
206f0     43 00 00 FF 
206f4     E0 E4 85 F1 | 	sub	objptr, ##34528
206f8     F2 FA 01 F6 | 	mov	result1, objptr
206fc     00 68 00 FF 
20700     00 FA 45 F5 | 	or	result1, ##13631488
20704     43 00 00 FF 
20708     E4 E4 05 F1 | 	add	objptr, ##34532
2070c     F2 FA 61 FC | 	wrlong	result1, objptr
20710     43 00 00 FF 
20714     E4 E4 85 F1 | 	sub	objptr, ##34532
20718     F2 FA 01 F6 | 	mov	result1, objptr
2071c     00 68 00 FF 
20720     00 FA 45 F5 | 	or	result1, ##13631488
20724     43 00 00 FF 
20728     E8 E4 05 F1 | 	add	objptr, ##34536
2072c     F2 FA 61 FC | 	wrlong	result1, objptr
20730     43 00 00 FF 
20734     E8 E4 85 F1 | 	sub	objptr, ##34536
20738     F2 FA 01 F6 | 	mov	result1, objptr
2073c     74 FA 25 F4 | 	bith	result1, #116
20740     43 00 00 FF 
20744     60 E5 05 F1 | 	add	objptr, ##34656
20748     F2 FA 61 FC | 	wrlong	result1, objptr
2074c     43 00 00 FF 
20750     60 E5 85 F1 | 	sub	objptr, ##34656
20754     F2 FA 01 F6 | 	mov	result1, objptr
20758     18 FA 25 F4 | 	bith	result1, #24
2075c     43 00 00 FF 
20760     64 E5 05 F1 | 	add	objptr, ##34660
20764     F2 FA 61 FC | 	wrlong	result1, objptr
20768     43 00 00 FF 
2076c     64 E5 85 F1 | 	sub	objptr, ##34660
20770     F2 FA 01 F6 | 	mov	result1, objptr
20774     00 88 00 FF 
20778     00 FA 45 F5 | 	or	result1, ##17825792
2077c     43 00 00 FF 
20780     68 E5 05 F1 | 	add	objptr, ##34664
20784     F2 FA 61 FC | 	wrlong	result1, objptr
20788     43 00 00 FF 
2078c     68 E5 85 F1 | 	sub	objptr, ##34664
20790     F2 FA 01 F6 | 	mov	result1, objptr
20794     00 90 00 FF 
20798     00 FA 45 F5 | 	or	result1, ##18874368
2079c     43 00 00 FF 
207a0     6C E5 05 F1 | 	add	objptr, ##34668
207a4     F2 FA 61 FC | 	wrlong	result1, objptr
207a8     43 00 00 FF 
207ac     6C E5 85 F1 | 	sub	objptr, ##34668
207b0     F2 FA 01 F6 | 	mov	result1, objptr
207b4     00 98 00 FF 
207b8     00 FA 45 F5 | 	or	result1, ##19922944
207bc     43 00 00 FF 
207c0     70 E5 05 F1 | 	add	objptr, ##34672
207c4     F2 FA 61 FC | 	wrlong	result1, objptr
207c8     43 00 00 FF 
207cc     70 E5 85 F1 | 	sub	objptr, ##34672
207d0     F2 FA 01 F6 | 	mov	result1, objptr
207d4     00 A0 00 FF 
207d8     00 FA 45 F5 | 	or	result1, ##20971520
207dc     43 00 00 FF 
207e0     74 E5 05 F1 | 	add	objptr, ##34676
207e4     F2 FA 61 FC | 	wrlong	result1, objptr
207e8     43 00 00 FF 
207ec     74 E5 85 F1 | 	sub	objptr, ##34676
207f0     F2 FA 01 F6 | 	mov	result1, objptr
207f4     00 A8 00 FF 
207f8     00 FA 45 F5 | 	or	result1, ##22020096
207fc     43 00 00 FF 
20800     78 E5 05 F1 | 	add	objptr, ##34680
20804     F2 FA 61 FC | 	wrlong	result1, objptr
20808     43 00 00 FF 
2080c     78 E5 85 F1 | 	sub	objptr, ##34680
20810     F2 FA 01 F6 | 	mov	result1, objptr
20814     00 B0 00 FF 
20818     00 FA 45 F5 | 	or	result1, ##23068672
2081c     43 00 00 FF 
20820     7C E5 05 F1 | 	add	objptr, ##34684
20824     F2 FA 61 FC | 	wrlong	result1, objptr
20828     43 00 00 FF 
2082c     7C E5 85 F1 | 	sub	objptr, ##34684
20830     F2 FA 01 F6 | 	mov	result1, objptr
20834     00 B8 00 FF 
20838     00 FA 45 F5 | 	or	result1, ##24117248
2083c     43 00 00 FF 
20840     80 E5 05 F1 | 	add	objptr, ##34688
20844     F2 FA 61 FC | 	wrlong	result1, objptr
20848     43 00 00 FF 
2084c     80 E5 85 F1 | 	sub	objptr, ##34688
20850     F2 FA 01 F6 | 	mov	result1, objptr
20854     37 FA 25 F4 | 	bith	result1, #55
20858     43 00 00 FF 
2085c     84 E5 05 F1 | 	add	objptr, ##34692
20860     F2 FA 61 FC | 	wrlong	result1, objptr
20864     43 00 00 FF 
20868     84 E5 85 F1 | 	sub	objptr, ##34692
2086c     F2 FA 01 F6 | 	mov	result1, objptr
20870     00 C8 00 FF 
20874     00 FA 45 F5 | 	or	result1, ##26214400
20878     43 00 00 FF 
2087c     88 E5 05 F1 | 	add	objptr, ##34696
20880     F2 FA 61 FC | 	wrlong	result1, objptr
20884     43 00 00 FF 
20888     88 E5 85 F1 | 	sub	objptr, ##34696
2088c     F2 FA 01 F6 | 	mov	result1, objptr
20890     00 D0 00 FF 
20894     00 FA 45 F5 | 	or	result1, ##27262976
20898     43 00 00 FF 
2089c     8C E5 05 F1 | 	add	objptr, ##34700
208a0     F2 FA 61 FC | 	wrlong	result1, objptr
208a4     43 00 00 FF 
208a8     8C E5 85 F1 | 	sub	objptr, ##34700
208ac     F2 FA 01 F6 | 	mov	result1, objptr
208b0     00 D8 00 FF 
208b4     00 FA 45 F5 | 	or	result1, ##28311552
208b8     43 00 00 FF 
208bc     90 E5 05 F1 | 	add	objptr, ##34704
208c0     F2 FA 61 FC | 	wrlong	result1, objptr
208c4     43 00 00 FF 
208c8     90 E5 85 F1 | 	sub	objptr, ##34704
208cc     F2 FA 01 F6 | 	mov	result1, objptr
208d0     56 FA 25 F4 | 	bith	result1, #86
208d4     43 00 00 FF 
208d8     94 E5 05 F1 | 	add	objptr, ##34708
208dc     F2 FA 61 FC | 	wrlong	result1, objptr
208e0     43 00 00 FF 
208e4     94 E5 85 F1 | 	sub	objptr, ##34708
208e8     F2 FA 01 F6 | 	mov	result1, objptr
208ec     00 E8 00 FF 
208f0     00 FA 45 F5 | 	or	result1, ##30408704
208f4     45 00 00 FF 
208f8     5C E4 05 F1 | 	add	objptr, ##35420
208fc     F2 FA 61 FC | 	wrlong	result1, objptr
20900     45 00 00 FF 
20904     5C E4 85 F1 | 	sub	objptr, ##35420
20908     F2 FA 01 F6 | 	mov	result1, objptr
2090c     75 FA 25 F4 | 	bith	result1, #117
20910     43 00 00 FF 
20914     98 E5 05 F1 | 	add	objptr, ##34712
20918     F2 FA 61 FC | 	wrlong	result1, objptr
2091c     43 00 00 FF 
20920     98 E5 85 F1 | 	sub	objptr, ##34712
20924     F2 FA 01 F6 | 	mov	result1, objptr
20928     94 FA 25 F4 | 	bith	result1, #148
2092c     43 00 00 FF 
20930     AC E5 05 F1 | 	add	objptr, ##34732
20934     F2 FA 61 FC | 	wrlong	result1, objptr
20938     43 00 00 FF 
2093c     AC E5 85 F1 | 	sub	objptr, ##34732
20940     F2 FA 01 F6 | 	mov	result1, objptr
20944     19 FA 25 F4 | 	bith	result1, #25
20948     43 00 00 FF 
2094c     9C E5 05 F1 | 	add	objptr, ##34716
20950     F2 FA 61 FC | 	wrlong	result1, objptr
20954     43 00 00 FF 
20958     9C E5 85 F1 | 	sub	objptr, ##34716
2095c     F2 FA 01 F6 | 	mov	result1, objptr
20960     00 08 01 FF 
20964     00 FA 45 F5 | 	or	result1, ##34603008
20968     43 00 00 FF 
2096c     B8 E4 05 F1 | 	add	objptr, ##34488
20970     F2 FA 61 FC | 	wrlong	result1, objptr
20974     43 00 00 FF 
20978     B8 E4 85 F1 | 	sub	objptr, ##34488
2097c     F2 FA 01 F6 | 	mov	result1, objptr
20980     00 10 01 FF 
20984     00 FA 45 F5 | 	or	result1, ##35651584
20988     43 00 00 FF 
2098c     A4 E5 05 F1 | 	add	objptr, ##34724
20990     F2 FA 61 FC | 	wrlong	result1, objptr
20994     43 00 00 FF 
20998     A4 E5 85 F1 | 	sub	objptr, ##34724
2099c     F2 FA 01 F6 | 	mov	result1, objptr
209a0     00 18 01 FF 
209a4     00 FA 45 F5 | 	or	result1, ##36700160
209a8     43 00 00 FF 
209ac     A8 E5 05 F1 | 	add	objptr, ##34728
209b0     F2 FA 61 FC | 	wrlong	result1, objptr
209b4     43 00 00 FF 
209b8     A8 E5 85 F1 | 	sub	objptr, ##34728
209bc     F2 FA 01 F6 | 	mov	result1, objptr
209c0     00 20 01 FF 
209c4     00 FA 45 F5 | 	or	result1, ##37748736
209c8     43 00 00 FF 
209cc     B4 E5 05 F1 | 	add	objptr, ##34740
209d0     F2 FA 61 FC | 	wrlong	result1, objptr
209d4     43 00 00 FF 
209d8     B4 E5 85 F1 | 	sub	objptr, ##34740
209dc     F2 FA 01 F6 | 	mov	result1, objptr
209e0     00 28 01 FF 
209e4     00 FA 45 F5 | 	or	result1, ##38797312
209e8     43 00 00 FF 
209ec     B8 E5 05 F1 | 	add	objptr, ##34744
209f0     F2 FA 61 FC | 	wrlong	result1, objptr
209f4     43 00 00 FF 
209f8     B8 E5 85 F1 | 	sub	objptr, ##34744
209fc     F2 FA 01 F6 | 	mov	result1, objptr
20a00     00 30 01 FF 
20a04     00 FA 45 F5 | 	or	result1, ##39845888
20a08     43 00 00 FF 
20a0c     BC E5 05 F1 | 	add	objptr, ##34748
20a10     F2 FA 61 FC | 	wrlong	result1, objptr
20a14     43 00 00 FF 
20a18     BC E5 85 F1 | 	sub	objptr, ##34748
20a1c     F2 FA 01 F6 | 	mov	result1, objptr
20a20     00 38 01 FF 
20a24     00 FA 45 F5 | 	or	result1, ##40894464
20a28     43 00 00 FF 
20a2c     C0 E5 05 F1 | 	add	objptr, ##34752
20a30     F2 FA 61 FC | 	wrlong	result1, objptr
20a34     43 00 00 FF 
20a38     C0 E5 85 F1 | 	sub	objptr, ##34752
20a3c     F2 FA 01 F6 | 	mov	result1, objptr
20a40     00 40 01 FF 
20a44     00 FA 45 F5 | 	or	result1, ##41943040
20a48     43 00 00 FF 
20a4c     C8 E5 05 F1 | 	add	objptr, ##34760
20a50     F2 FA 61 FC | 	wrlong	result1, objptr
20a54     43 00 00 FF 
20a58     C8 E5 85 F1 | 	sub	objptr, ##34760
20a5c     F2 FA 01 F6 | 	mov	result1, objptr
20a60     00 08 01 FF 
20a64     00 FA 45 F5 | 	or	result1, ##34603008
20a68     43 00 00 FF 
20a6c     CC E5 05 F1 | 	add	objptr, ##34764
20a70     F2 FA 61 FC | 	wrlong	result1, objptr
20a74     43 00 00 FF 
20a78     CC E5 85 F1 | 	sub	objptr, ##34764
20a7c     F2 FA 01 F6 | 	mov	result1, objptr
20a80     00 48 01 FF 
20a84     00 FA 45 F5 | 	or	result1, ##42991616
20a88     43 00 00 FF 
20a8c     CC E4 05 F1 | 	add	objptr, ##34508
20a90     F2 FA 61 FC | 	wrlong	result1, objptr
20a94     43 00 00 FF 
20a98     CC E4 85 F1 | 	sub	objptr, ##34508
20a9c     F2 FA 01 F6 | 	mov	result1, objptr
20aa0     00 50 01 FF 
20aa4     00 FA 45 F5 | 	or	result1, ##44040192
20aa8     43 00 00 FF 
20aac     FC E4 05 F1 | 	add	objptr, ##34556
20ab0     F2 FA 61 FC | 	wrlong	result1, objptr
20ab4     43 00 00 FF 
20ab8     FC E4 85 F1 | 	sub	objptr, ##34556
20abc     F2 FA 01 F6 | 	mov	result1, objptr
20ac0     00 58 01 FF 
20ac4     00 FA 45 F5 | 	or	result1, ##45088768
20ac8     43 00 00 FF 
20acc     F8 E4 05 F1 | 	add	objptr, ##34552
20ad0     F2 FA 61 FC | 	wrlong	result1, objptr
20ad4     43 00 00 FF 
20ad8     F8 E4 85 F1 | 	sub	objptr, ##34552
20adc     F2 FA 01 F6 | 	mov	result1, objptr
20ae0     00 60 01 FF 
20ae4     00 FA 45 F5 | 	or	result1, ##46137344
20ae8     43 00 00 FF 
20aec     9C E4 05 F1 | 	add	objptr, ##34460
20af0     F2 FA 61 FC | 	wrlong	result1, objptr
20af4     43 00 00 FF 
20af8     9C E4 85 F1 | 	sub	objptr, ##34460
20afc     F2 FA 01 F6 | 	mov	result1, objptr
20b00     00 68 01 FF 
20b04     00 FA 45 F5 | 	or	result1, ##47185920
20b08     43 00 00 FF 
20b0c     A0 E4 05 F1 | 	add	objptr, ##34464
20b10     F2 FA 61 FC | 	wrlong	result1, objptr
20b14     43 00 00 FF 
20b18     A0 E4 85 F1 | 	sub	objptr, ##34464
20b1c     F2 FA 01 F6 | 	mov	result1, objptr
20b20     00 70 01 FF 
20b24     00 FA 45 F5 | 	or	result1, ##48234496
20b28     43 00 00 FF 
20b2c     08 E5 05 F1 | 	add	objptr, ##34568
20b30     F2 FA 61 FC | 	wrlong	result1, objptr
20b34     43 00 00 FF 
20b38     08 E5 85 F1 | 	sub	objptr, ##34568
20b3c     F2 FA 01 F6 | 	mov	result1, objptr
20b40     00 78 01 FF 
20b44     00 FA 45 F5 | 	or	result1, ##49283072
20b48     43 00 00 FF 
20b4c     B0 E5 05 F1 | 	add	objptr, ##34736
20b50     F2 FA 61 FC | 	wrlong	result1, objptr
20b54     43 00 00 FF 
20b58     B0 E5 85 F1 | 	sub	objptr, ##34736
20b5c     F2 FA 01 F6 | 	mov	result1, objptr
20b60     38 FA 25 F4 | 	bith	result1, #56
20b64     43 00 00 FF 
20b68     C4 E5 05 F1 | 	add	objptr, ##34756
20b6c     F2 FA 61 FC | 	wrlong	result1, objptr
20b70     43 00 00 FF 
20b74     C4 E5 85 F1 | 	sub	objptr, ##34756
20b78     F2 FA 01 F6 | 	mov	result1, objptr
20b7c     00 88 01 FF 
20b80     00 FA 45 F5 | 	or	result1, ##51380224
20b84     43 00 00 FF 
20b88     D0 E5 05 F1 | 	add	objptr, ##34768
20b8c     F2 FA 61 FC | 	wrlong	result1, objptr
20b90     43 00 00 FF 
20b94     D0 E5 85 F1 | 	sub	objptr, ##34768
20b98     F2 FA 01 F6 | 	mov	result1, objptr
20b9c     00 90 01 FF 
20ba0     00 FA 45 F5 | 	or	result1, ##52428800
20ba4     43 00 00 FF 
20ba8     D4 E5 05 F1 | 	add	objptr, ##34772
20bac     F2 FA 61 FC | 	wrlong	result1, objptr
20bb0     43 00 00 FF 
20bb4     D4 E5 85 F1 | 	sub	objptr, ##34772
20bb8     F2 FA 01 F6 | 	mov	result1, objptr
20bbc     00 98 01 FF 
20bc0     00 FA 45 F5 | 	or	result1, ##53477376
20bc4     43 00 00 FF 
20bc8     D8 E5 05 F1 | 	add	objptr, ##34776
20bcc     F2 FA 61 FC | 	wrlong	result1, objptr
20bd0     43 00 00 FF 
20bd4     D8 E5 85 F1 | 	sub	objptr, ##34776
20bd8     F2 FA 01 F6 | 	mov	result1, objptr
20bdc     00 A0 01 FF 
20be0     00 FA 45 F5 | 	or	result1, ##54525952
20be4     43 00 00 FF 
20be8     DC E5 05 F1 | 	add	objptr, ##34780
20bec     F2 FA 61 FC | 	wrlong	result1, objptr
20bf0     43 00 00 FF 
20bf4     DC E5 85 F1 | 	sub	objptr, ##34780
20bf8     F2 FA 01 F6 | 	mov	result1, objptr
20bfc     00 A8 01 FF 
20c00     00 FA 45 F5 | 	or	result1, ##55574528
20c04     43 00 00 FF 
20c08     E0 E5 05 F1 | 	add	objptr, ##34784
20c0c     F2 FA 61 FC | 	wrlong	result1, objptr
20c10     43 00 00 FF 
20c14     E0 E5 85 F1 | 	sub	objptr, ##34784
20c18     F2 FA 01 F6 | 	mov	result1, objptr
20c1c     00 B0 01 FF 
20c20     00 FA 45 F5 | 	or	result1, ##56623104
20c24     43 00 00 FF 
20c28     E4 E5 05 F1 | 	add	objptr, ##34788
20c2c     F2 FA 61 FC | 	wrlong	result1, objptr
20c30     43 00 00 FF 
20c34     E4 E5 85 F1 | 	sub	objptr, ##34788
20c38     F2 FA 01 F6 | 	mov	result1, objptr
20c3c     94 FA 25 F4 | 	bith	result1, #148
20c40     43 00 00 FF 
20c44     AC E5 05 F1 | 	add	objptr, ##34732
20c48     F2 FA 61 FC | 	wrlong	result1, objptr
20c4c     43 00 00 FF 
20c50     AC E5 85 F1 | 	sub	objptr, ##34732
20c54     F2 FA 01 F6 | 	mov	result1, objptr
20c58     00 B8 01 FF 
20c5c     00 FA 45 F5 | 	or	result1, ##57671680
20c60     43 00 00 FF 
20c64     EC E5 05 F1 | 	add	objptr, ##34796
20c68     F2 FA 61 FC | 	wrlong	result1, objptr
20c6c     43 00 00 FF 
20c70     EC E5 85 F1 | 	sub	objptr, ##34796
20c74     F2 FA 01 F6 | 	mov	result1, objptr
20c78     57 FA 25 F4 | 	bith	result1, #87
20c7c     43 00 00 FF 
20c80     E8 E5 05 F1 | 	add	objptr, ##34792
20c84     F2 FA 61 FC | 	wrlong	result1, objptr
20c88     43 00 00 FF 
20c8c     E8 E5 85 F1 | 	sub	objptr, ##34792
20c90     F2 FA 01 F6 | 	mov	result1, objptr
20c94     00 C8 01 FF 
20c98     00 FA 45 F5 | 	or	result1, ##59768832
20c9c     44 00 00 FF 
20ca0     00 E4 05 F1 | 	add	objptr, ##34816
20ca4     F2 FA 61 FC | 	wrlong	result1, objptr
20ca8     44 00 00 FF 
20cac     00 E4 85 F1 | 	sub	objptr, ##34816
20cb0     F2 FA 01 F6 | 	mov	result1, objptr
20cb4     00 D0 01 FF 
20cb8     00 FA 45 F5 | 	or	result1, ##60817408
20cbc     44 00 00 FF 
20cc0     04 E4 05 F1 | 	add	objptr, ##34820
20cc4     F2 FA 61 FC | 	wrlong	result1, objptr
20cc8     44 00 00 FF 
20ccc     04 E4 85 F1 | 	sub	objptr, ##34820
20cd0     F2 FA 01 F6 | 	mov	result1, objptr
20cd4     00 D8 01 FF 
20cd8     00 FA 45 F5 | 	or	result1, ##61865984
20cdc     43 00 00 FF 
20ce0     F0 E5 05 F1 | 	add	objptr, ##34800
20ce4     F2 FA 61 FC | 	wrlong	result1, objptr
20ce8     43 00 00 FF 
20cec     F0 E5 85 F1 | 	sub	objptr, ##34800
20cf0     F2 FA 01 F6 | 	mov	result1, objptr
20cf4     76 FA 25 F4 | 	bith	result1, #118
20cf8     43 00 00 FF 
20cfc     F4 E5 05 F1 | 	add	objptr, ##34804
20d00     F2 FA 61 FC | 	wrlong	result1, objptr
20d04     43 00 00 FF 
20d08     F4 E5 85 F1 | 	sub	objptr, ##34804
20d0c     F2 FA 01 F6 | 	mov	result1, objptr
20d10     00 E8 01 FF 
20d14     00 FA 45 F5 | 	or	result1, ##63963136
20d18     43 00 00 FF 
20d1c     F8 E5 05 F1 | 	add	objptr, ##34808
20d20     F2 FA 61 FC | 	wrlong	result1, objptr
20d24     43 00 00 FF 
20d28     F8 E5 85 F1 | 	sub	objptr, ##34808
20d2c     F2 FA 01 F6 | 	mov	result1, objptr
20d30     95 FA 25 F4 | 	bith	result1, #149
20d34     43 00 00 FF 
20d38     FC E5 05 F1 | 	add	objptr, ##34812
20d3c     F2 FA 61 FC | 	wrlong	result1, objptr
20d40     43 00 00 FF 
20d44     FC E5 85 F1 | 	sub	objptr, ##34812
20d48     F2 FA 01 F6 | 	mov	result1, objptr
20d4c     B4 FA 25 F4 | 	bith	result1, #180
20d50     44 00 00 FF 
20d54     0C E4 05 F1 | 	add	objptr, ##34828
20d58     F2 FA 61 FC | 	wrlong	result1, objptr
20d5c     44 00 00 FF 
20d60     0C E4 85 F1 | 	sub	objptr, ##34828
20d64     F2 FA 01 F6 | 	mov	result1, objptr
20d68     1A FA 25 F4 | 	bith	result1, #26
20d6c     44 00 00 FF 
20d70     08 E4 05 F1 | 	add	objptr, ##34824
20d74     F2 FA 61 FC | 	wrlong	result1, objptr
20d78     44 00 00 FF 
20d7c     08 E4 85 F1 | 	sub	objptr, ##34824
20d80     F2 FA 01 F6 | 	mov	result1, objptr
20d84     00 08 02 FF 
20d88     00 FA 45 F5 | 	or	result1, ##68157440
20d8c     44 00 00 FF 
20d90     18 E4 05 F1 | 	add	objptr, ##34840
20d94     F2 FA 61 FC | 	wrlong	result1, objptr
20d98     44 00 00 FF 
20d9c     18 E4 85 F1 | 	sub	objptr, ##34840
20da0     F2 FA 01 F6 | 	mov	result1, objptr
20da4     00 10 02 FF 
20da8     00 FA 45 F5 | 	or	result1, ##69206016
20dac     44 00 00 FF 
20db0     14 E4 05 F1 | 	add	objptr, ##34836
20db4     F2 FA 61 FC | 	wrlong	result1, objptr
20db8     44 00 00 FF 
20dbc     14 E4 85 F1 | 	sub	objptr, ##34836
20dc0     F2 FA 01 F6 | 	mov	result1, objptr
20dc4     00 18 02 FF 
20dc8     00 FA 45 F5 | 	or	result1, ##70254592
20dcc     44 00 00 FF 
20dd0     10 E4 05 F1 | 	add	objptr, ##34832
20dd4     F2 FA 61 FC | 	wrlong	result1, objptr
20dd8     44 00 00 FF 
20ddc     10 E4 85 F1 | 	sub	objptr, ##34832
20de0     F2 FA 01 F6 | 	mov	result1, objptr
20de4     00 20 02 FF 
20de8     00 FA 45 F5 | 	or	result1, ##71303168
20dec     44 00 00 FF 
20df0     1C E4 05 F1 | 	add	objptr, ##34844
20df4     F2 FA 61 FC | 	wrlong	result1, objptr
20df8     44 00 00 FF 
20dfc     1C E4 85 F1 | 	sub	objptr, ##34844
20e00     F2 FA 01 F6 | 	mov	result1, objptr
20e04     00 28 02 FF 
20e08     00 FA 45 F5 | 	or	result1, ##72351744
20e0c     44 00 00 FF 
20e10     20 E4 05 F1 | 	add	objptr, ##34848
20e14     F2 FA 61 FC | 	wrlong	result1, objptr
20e18     44 00 00 FF 
20e1c     20 E4 85 F1 | 	sub	objptr, ##34848
20e20     F2 FA 01 F6 | 	mov	result1, objptr
20e24     00 30 02 FF 
20e28     00 FA 45 F5 | 	or	result1, ##73400320
20e2c     43 00 00 FF 
20e30     B4 E4 05 F1 | 	add	objptr, ##34484
20e34     F2 FA 61 FC | 	wrlong	result1, objptr
20e38     43 00 00 FF 
20e3c     B4 E4 85 F1 | 	sub	objptr, ##34484
20e40     F2 FA 01 F6 | 	mov	result1, objptr
20e44     00 38 02 FF 
20e48     00 FA 45 F5 | 	or	result1, ##74448896
20e4c     44 00 00 FF 
20e50     38 E4 05 F1 | 	add	objptr, ##34872
20e54     F2 FA 61 FC | 	wrlong	result1, objptr
20e58     44 00 00 FF 
20e5c     38 E4 85 F1 | 	sub	objptr, ##34872
20e60     F2 FA 01 F6 | 	mov	result1, objptr
20e64     00 40 02 FF 
20e68     00 FA 45 F5 | 	or	result1, ##75497472
20e6c     44 00 00 FF 
20e70     48 E4 05 F1 | 	add	objptr, ##34888
20e74     F2 FA 61 FC | 	wrlong	result1, objptr
20e78     44 00 00 FF 
20e7c     48 E4 85 F1 | 	sub	objptr, ##34888
20e80     F2 FA 01 F6 | 	mov	result1, objptr
20e84     00 48 02 FF 
20e88     00 FA 45 F5 | 	or	result1, ##76546048
20e8c     44 00 00 FF 
20e90     4C E4 05 F1 | 	add	objptr, ##34892
20e94     F2 FA 61 FC | 	wrlong	result1, objptr
20e98     44 00 00 FF 
20e9c     4C E4 85 F1 | 	sub	objptr, ##34892
20ea0     F2 FA 01 F6 | 	mov	result1, objptr
20ea4     00 50 02 FF 
20ea8     00 FA 45 F5 | 	or	result1, ##77594624
20eac     44 00 00 FF 
20eb0     44 E4 05 F1 | 	add	objptr, ##34884
20eb4     F2 FA 61 FC | 	wrlong	result1, objptr
20eb8     44 00 00 FF 
20ebc     44 E4 85 F1 | 	sub	objptr, ##34884
20ec0     F2 FA 01 F6 | 	mov	result1, objptr
20ec4     00 58 02 FF 
20ec8     00 FA 45 F5 | 	or	result1, ##78643200
20ecc     44 00 00 FF 
20ed0     3C E4 05 F1 | 	add	objptr, ##34876
20ed4     F2 FA 61 FC | 	wrlong	result1, objptr
20ed8     44 00 00 FF 
20edc     3C E4 85 F1 | 	sub	objptr, ##34876
20ee0     F2 FA 01 F6 | 	mov	result1, objptr
20ee4     00 60 02 FF 
20ee8     00 FA 45 F5 | 	or	result1, ##79691776
20eec     44 00 00 FF 
20ef0     40 E4 05 F1 | 	add	objptr, ##34880
20ef4     F2 FA 61 FC | 	wrlong	result1, objptr
20ef8     44 00 00 FF 
20efc     40 E4 85 F1 | 	sub	objptr, ##34880
20f00     F2 FA 01 F6 | 	mov	result1, objptr
20f04     00 68 02 FF 
20f08     00 FA 45 F5 | 	or	result1, ##80740352
20f0c     44 00 00 FF 
20f10     50 E4 05 F1 | 	add	objptr, ##34896
20f14     F2 FA 61 FC | 	wrlong	result1, objptr
20f18     44 00 00 FF 
20f1c     50 E4 85 F1 | 	sub	objptr, ##34896
20f20     F2 FA 01 F6 | 	mov	result1, objptr
20f24     00 70 02 FF 
20f28     00 FA 45 F5 | 	or	result1, ##81788928
20f2c     44 00 00 FF 
20f30     54 E4 05 F1 | 	add	objptr, ##34900
20f34     F2 FA 61 FC | 	wrlong	result1, objptr
20f38     44 00 00 FF 
20f3c     54 E4 85 F1 | 	sub	objptr, ##34900
20f40     F2 FA 01 F6 | 	mov	result1, objptr
20f44     00 78 02 FF 
20f48     00 FA 45 F5 | 	or	result1, ##82837504
20f4c     44 00 00 FF 
20f50     58 E4 05 F1 | 	add	objptr, ##34904
20f54     F2 FA 61 FC | 	wrlong	result1, objptr
20f58     44 00 00 FF 
20f5c     58 E4 85 F1 | 	sub	objptr, ##34904
20f60     F2 FA 01 F6 | 	mov	result1, objptr
20f64     00 80 02 FF 
20f68     00 FA 45 F5 | 	or	result1, ##83886080
20f6c     44 00 00 FF 
20f70     5C E4 05 F1 | 	add	objptr, ##34908
20f74     F2 FA 61 FC | 	wrlong	result1, objptr
20f78     44 00 00 FF 
20f7c     5C E4 85 F1 | 	sub	objptr, ##34908
20f80     F2 FA 01 F6 | 	mov	result1, objptr
20f84     00 88 02 FF 
20f88     00 FA 45 F5 | 	or	result1, ##84934656
20f8c     44 00 00 FF 
20f90     60 E4 05 F1 | 	add	objptr, ##34912
20f94     F2 FA 61 FC | 	wrlong	result1, objptr
20f98     44 00 00 FF 
20f9c     60 E4 85 F1 | 	sub	objptr, ##34912
20fa0     F2 FA 01 F6 | 	mov	result1, objptr
20fa4     00 90 02 FF 
20fa8     00 FA 45 F5 | 	or	result1, ##85983232
20fac     44 00 00 FF 
20fb0     64 E4 05 F1 | 	add	objptr, ##34916
20fb4     F2 FA 61 FC | 	wrlong	result1, objptr
20fb8     44 00 00 FF 
20fbc     64 E4 85 F1 | 	sub	objptr, ##34916
20fc0     F2 FA 01 F6 | 	mov	result1, objptr
20fc4     00 98 02 FF 
20fc8     00 FA 45 F5 | 	or	result1, ##87031808
20fcc     44 00 00 FF 
20fd0     68 E4 05 F1 | 	add	objptr, ##34920
20fd4     F2 FA 61 FC | 	wrlong	result1, objptr
20fd8     44 00 00 FF 
20fdc     68 E4 85 F1 | 	sub	objptr, ##34920
20fe0     F2 FA 01 F6 | 	mov	result1, objptr
20fe4     00 A0 02 FF 
20fe8     00 FA 45 F5 | 	or	result1, ##88080384
20fec     44 00 00 FF 
20ff0     6C E4 05 F1 | 	add	objptr, ##34924
20ff4     F2 FA 61 FC | 	wrlong	result1, objptr
20ff8     44 00 00 FF 
20ffc     6C E4 85 F1 | 	sub	objptr, ##34924
21000     F2 FA 01 F6 | 	mov	result1, objptr
21004     00 A8 02 FF 
21008     00 FA 45 F5 | 	or	result1, ##89128960
2100c     44 00 00 FF 
21010     78 E4 05 F1 | 	add	objptr, ##34936
21014     F2 FA 61 FC | 	wrlong	result1, objptr
21018     44 00 00 FF 
2101c     78 E4 85 F1 | 	sub	objptr, ##34936
21020     F2 FA 01 F6 | 	mov	result1, objptr
21024     00 B0 02 FF 
21028     00 FA 45 F5 | 	or	result1, ##90177536
2102c     44 00 00 FF 
21030     70 E4 05 F1 | 	add	objptr, ##34928
21034     F2 FA 61 FC | 	wrlong	result1, objptr
21038     44 00 00 FF 
2103c     70 E4 85 F1 | 	sub	objptr, ##34928
21040     F2 FA 01 F6 | 	mov	result1, objptr
21044     00 B8 02 FF 
21048     00 FA 45 F5 | 	or	result1, ##91226112
2104c     44 00 00 FF 
21050     74 E4 05 F1 | 	add	objptr, ##34932
21054     F2 FA 61 FC | 	wrlong	result1, objptr
21058     44 00 00 FF 
2105c     74 E4 85 F1 | 	sub	objptr, ##34932
21060     F2 FA 01 F6 | 	mov	result1, objptr
21064     00 C0 02 FF 
21068     00 FA 45 F5 | 	or	result1, ##92274688
2106c     44 00 00 FF 
21070     7C E4 05 F1 | 	add	objptr, ##34940
21074     F2 FA 61 FC | 	wrlong	result1, objptr
21078     44 00 00 FF 
2107c     7C E4 85 F1 | 	sub	objptr, ##34940
21080     F2 FA 01 F6 | 	mov	result1, objptr
21084     00 C8 02 FF 
21088     00 FA 45 F5 | 	or	result1, ##93323264
2108c     44 00 00 FF 
21090     24 E4 05 F1 | 	add	objptr, ##34852
21094     F2 FA 61 FC | 	wrlong	result1, objptr
21098     44 00 00 FF 
2109c     24 E4 85 F1 | 	sub	objptr, ##34852
210a0     F2 FA 01 F6 | 	mov	result1, objptr
210a4     00 D0 02 FF 
210a8     00 FA 45 F5 | 	or	result1, ##94371840
210ac     44 00 00 FF 
210b0     2C E4 05 F1 | 	add	objptr, ##34860
210b4     F2 FA 61 FC | 	wrlong	result1, objptr
210b8     44 00 00 FF 
210bc     2C E4 85 F1 | 	sub	objptr, ##34860
210c0     F2 FA 01 F6 | 	mov	result1, objptr
210c4     00 D8 02 FF 
210c8     00 FA 45 F5 | 	or	result1, ##95420416
210cc     44 00 00 FF 
210d0     30 E4 05 F1 | 	add	objptr, ##34864
210d4     F2 FA 61 FC | 	wrlong	result1, objptr
210d8     44 00 00 FF 
210dc     30 E4 85 F1 | 	sub	objptr, ##34864
210e0     F2 FA 01 F6 | 	mov	result1, objptr
210e4     00 E0 02 FF 
210e8     00 FA 45 F5 | 	or	result1, ##96468992
210ec     44 00 00 FF 
210f0     80 E4 05 F1 | 	add	objptr, ##34944
210f4     F2 FA 61 FC | 	wrlong	result1, objptr
210f8     44 00 00 FF 
210fc     80 E4 85 F1 | 	sub	objptr, ##34944
21100     F2 FA 01 F6 | 	mov	result1, objptr
21104     00 E8 02 FF 
21108     00 FA 45 F5 | 	or	result1, ##97517568
2110c     44 00 00 FF 
21110     84 E4 05 F1 | 	add	objptr, ##34948
21114     F2 FA 61 FC | 	wrlong	result1, objptr
21118     44 00 00 FF 
2111c     84 E4 85 F1 | 	sub	objptr, ##34948
21120     F2 FA 01 F6 | 	mov	result1, objptr
21124     00 F0 02 FF 
21128     00 FA 45 F5 | 	or	result1, ##98566144
2112c     44 00 00 FF 
21130     88 E4 05 F1 | 	add	objptr, ##34952
21134     F2 FA 61 FC | 	wrlong	result1, objptr
21138     44 00 00 FF 
2113c     88 E4 85 F1 | 	sub	objptr, ##34952
21140     F2 FA 01 F6 | 	mov	result1, objptr
21144     00 F8 02 FF 
21148     00 FA 45 F5 | 	or	result1, ##99614720
2114c     44 00 00 FF 
21150     34 E4 05 F1 | 	add	objptr, ##34868
21154     F2 FA 61 FC | 	wrlong	result1, objptr
21158     44 00 00 FF 
2115c     34 E4 85 F1 | 	sub	objptr, ##34868
21160     F2 FA 01 F6 | 	mov	result1, objptr
21164     39 FA 25 F4 | 	bith	result1, #57
21168     44 00 00 FF 
2116c     98 E4 05 F1 | 	add	objptr, ##34968
21170     F2 FA 61 FC | 	wrlong	result1, objptr
21174     44 00 00 FF 
21178     98 E4 85 F1 | 	sub	objptr, ##34968
2117c     F2 FA 01 F6 | 	mov	result1, objptr
21180     00 08 03 FF 
21184     00 FA 45 F5 | 	or	result1, ##101711872
21188     44 00 00 FF 
2118c     A0 E4 05 F1 | 	add	objptr, ##34976
21190     F2 FA 61 FC | 	wrlong	result1, objptr
21194     44 00 00 FF 
21198     A0 E4 85 F1 | 	sub	objptr, ##34976
2119c     F2 FA 01 F6 | 	mov	result1, objptr
211a0     00 10 03 FF 
211a4     00 FA 45 F5 | 	or	result1, ##102760448
211a8     44 00 00 FF 
211ac     94 E4 05 F1 | 	add	objptr, ##34964
211b0     F2 FA 61 FC | 	wrlong	result1, objptr
211b4     44 00 00 FF 
211b8     94 E4 85 F1 | 	sub	objptr, ##34964
211bc     F2 FA 01 F6 | 	mov	result1, objptr
211c0     00 18 03 FF 
211c4     00 FA 45 F5 | 	or	result1, ##103809024
211c8     44 00 00 FF 
211cc     90 E4 05 F1 | 	add	objptr, ##34960
211d0     F2 FA 61 FC | 	wrlong	result1, objptr
211d4     44 00 00 FF 
211d8     90 E4 85 F1 | 	sub	objptr, ##34960
211dc     F2 FA 01 F6 | 	mov	result1, objptr
211e0     00 20 03 FF 
211e4     00 FA 45 F5 | 	or	result1, ##104857600
211e8     44 00 00 FF 
211ec     8C E4 05 F1 | 	add	objptr, ##34956
211f0     F2 FA 61 FC | 	wrlong	result1, objptr
211f4     44 00 00 FF 
211f8     8C E4 85 F1 | 	sub	objptr, ##34956
211fc     F2 FA 01 F6 | 	mov	result1, objptr
21200     00 28 03 FF 
21204     00 FA 45 F5 | 	or	result1, ##105906176
21208     44 00 00 FF 
2120c     9C E4 05 F1 | 	add	objptr, ##34972
21210     F2 FA 61 FC | 	wrlong	result1, objptr
21214     44 00 00 FF 
21218     9C E4 85 F1 | 	sub	objptr, ##34972
2121c     F2 FA 01 F6 | 	mov	result1, objptr
21220     00 30 03 FF 
21224     00 FA 45 F5 | 	or	result1, ##106954752
21228     44 00 00 FF 
2122c     A4 E4 05 F1 | 	add	objptr, ##34980
21230     F2 FA 61 FC | 	wrlong	result1, objptr
21234     44 00 00 FF 
21238     A4 E4 85 F1 | 	sub	objptr, ##34980
2123c     F2 FA 01 F6 | 	mov	result1, objptr
21240     00 38 03 FF 
21244     00 FA 45 F5 | 	or	result1, ##108003328
21248     44 00 00 FF 
2124c     A8 E4 05 F1 | 	add	objptr, ##34984
21250     F2 FA 61 FC | 	wrlong	result1, objptr
21254     44 00 00 FF 
21258     A8 E4 85 F1 | 	sub	objptr, ##34984
2125c     F2 FA 01 F6 | 	mov	result1, objptr
21260     00 40 03 FF 
21264     00 FA 45 F5 | 	or	result1, ##109051904
21268     44 00 00 FF 
2126c     AC E4 05 F1 | 	add	objptr, ##34988
21270     F2 FA 61 FC | 	wrlong	result1, objptr
21274     44 00 00 FF 
21278     AC E4 85 F1 | 	sub	objptr, ##34988
2127c     F2 FA 01 F6 | 	mov	result1, objptr
21280     00 48 03 FF 
21284     00 FA 45 F5 | 	or	result1, ##110100480
21288     44 00 00 FF 
2128c     B4 E4 05 F1 | 	add	objptr, ##34996
21290     F2 FA 61 FC | 	wrlong	result1, objptr
21294     44 00 00 FF 
21298     B4 E4 85 F1 | 	sub	objptr, ##34996
2129c     F2 FA 01 F6 | 	mov	result1, objptr
212a0     00 50 03 FF 
212a4     00 FA 45 F5 | 	or	result1, ##111149056
212a8     44 00 00 FF 
212ac     B8 E4 05 F1 | 	add	objptr, ##35000
212b0     F2 FA 61 FC | 	wrlong	result1, objptr
212b4     44 00 00 FF 
212b8     B8 E4 85 F1 | 	sub	objptr, ##35000
212bc     F2 FA 01 F6 | 	mov	result1, objptr
212c0     00 58 03 FF 
212c4     00 FA 45 F5 | 	or	result1, ##112197632
212c8     44 00 00 FF 
212cc     BC E4 05 F1 | 	add	objptr, ##35004
212d0     F2 FA 61 FC | 	wrlong	result1, objptr
212d4     44 00 00 FF 
212d8     BC E4 85 F1 | 	sub	objptr, ##35004
212dc     F2 FA 01 F6 | 	mov	result1, objptr
212e0     00 60 03 FF 
212e4     00 FA 45 F5 | 	or	result1, ##113246208
212e8     44 00 00 FF 
212ec     C0 E4 05 F1 | 	add	objptr, ##35008
212f0     F2 FA 61 FC | 	wrlong	result1, objptr
212f4     44 00 00 FF 
212f8     C0 E4 85 F1 | 	sub	objptr, ##35008
212fc     F2 FA 01 F6 | 	mov	result1, objptr
21300     00 68 03 FF 
21304     00 FA 45 F5 | 	or	result1, ##114294784
21308     44 00 00 FF 
2130c     C4 E4 05 F1 | 	add	objptr, ##35012
21310     F2 FA 61 FC | 	wrlong	result1, objptr
21314     44 00 00 FF 
21318     C4 E4 85 F1 | 	sub	objptr, ##35012
2131c     F2 FA 01 F6 | 	mov	result1, objptr
21320     00 70 03 FF 
21324     00 FA 45 F5 | 	or	result1, ##115343360
21328     44 00 00 FF 
2132c     C8 E4 05 F1 | 	add	objptr, ##35016
21330     F2 FA 61 FC | 	wrlong	result1, objptr
21334     44 00 00 FF 
21338     C8 E4 85 F1 | 	sub	objptr, ##35016
2133c     F2 FA 01 F6 | 	mov	result1, objptr
21340     00 08 01 FF 
21344     00 FA 45 F5 | 	or	result1, ##34603008
21348     44 00 00 FF 
2134c     CC E4 05 F1 | 	add	objptr, ##35020
21350     F2 FA 61 FC | 	wrlong	result1, objptr
21354     44 00 00 FF 
21358     CC E4 85 F1 | 	sub	objptr, ##35020
2135c     F2 FA 01 F6 | 	mov	result1, objptr
21360     00 78 03 FF 
21364     00 FA 45 F5 | 	or	result1, ##116391936
21368     44 00 00 FF 
2136c     D0 E4 05 F1 | 	add	objptr, ##35024
21370     F2 FA 61 FC | 	wrlong	result1, objptr
21374     44 00 00 FF 
21378     D0 E4 85 F1 | 	sub	objptr, ##35024
2137c     F2 FA 01 F6 | 	mov	result1, objptr
21380     58 FA 25 F4 | 	bith	result1, #88
21384     44 00 00 FF 
21388     B0 E4 05 F1 | 	add	objptr, ##34992
2138c     F2 FA 61 FC | 	wrlong	result1, objptr
21390     44 00 00 FF 
21394     B0 E4 85 F1 | 	sub	objptr, ##34992
21398     F2 FA 01 F6 | 	mov	result1, objptr
2139c     00 88 03 FF 
213a0     00 FA 45 F5 | 	or	result1, ##118489088
213a4     43 00 00 FF 
213a8     A8 E4 05 F1 | 	add	objptr, ##34472
213ac     F2 FA 61 FC | 	wrlong	result1, objptr
213b0     43 00 00 FF 
213b4     A8 E4 85 F1 | 	sub	objptr, ##34472
213b8     F2 FA 01 F6 | 	mov	result1, objptr
213bc     00 90 03 FF 
213c0     00 FA 45 F5 | 	or	result1, ##119537664
213c4     44 00 00 FF 
213c8     D4 E4 05 F1 | 	add	objptr, ##35028
213cc     F2 FA 61 FC | 	wrlong	result1, objptr
213d0     44 00 00 FF 
213d4     D4 E4 85 F1 | 	sub	objptr, ##35028
213d8     F2 FA 01 F6 | 	mov	result1, objptr
213dc     00 98 03 FF 
213e0     00 FA 45 F5 | 	or	result1, ##120586240
213e4     44 00 00 FF 
213e8     D8 E4 05 F1 | 	add	objptr, ##35032
213ec     F2 FA 61 FC | 	wrlong	result1, objptr
213f0     44 00 00 FF 
213f4     D8 E4 85 F1 | 	sub	objptr, ##35032
213f8     F2 FA 01 F6 | 	mov	result1, objptr
213fc     00 A0 03 FF 
21400     00 FA 45 F5 | 	or	result1, ##121634816
21404     44 00 00 FF 
21408     EC E4 05 F1 | 	add	objptr, ##35052
2140c     F2 FA 61 FC | 	wrlong	result1, objptr
21410     44 00 00 FF 
21414     EC E4 85 F1 | 	sub	objptr, ##35052
21418     F2 FA 01 F6 | 	mov	result1, objptr
2141c     00 A8 03 FF 
21420     00 FA 45 F5 | 	or	result1, ##122683392
21424     44 00 00 FF 
21428     E8 E4 05 F1 | 	add	objptr, ##35048
2142c     F2 FA 61 FC | 	wrlong	result1, objptr
21430     44 00 00 FF 
21434     E8 E4 85 F1 | 	sub	objptr, ##35048
21438     F2 FA 01 F6 | 	mov	result1, objptr
2143c     00 B0 03 FF 
21440     00 FA 45 F5 | 	or	result1, ##123731968
21444     44 00 00 FF 
21448     E0 E4 05 F1 | 	add	objptr, ##35040
2144c     F2 FA 61 FC | 	wrlong	result1, objptr
21450     44 00 00 FF 
21454     E0 E4 85 F1 | 	sub	objptr, ##35040
21458     F2 FA 01 F6 | 	mov	result1, objptr
2145c     00 B8 03 FF 
21460     00 FA 45 F5 | 	or	result1, ##124780544
21464     44 00 00 FF 
21468     DC E4 05 F1 | 	add	objptr, ##35036
2146c     F2 FA 61 FC | 	wrlong	result1, objptr
21470     44 00 00 FF 
21474     DC E4 85 F1 | 	sub	objptr, ##35036
21478     F2 FA 01 F6 | 	mov	result1, objptr
2147c     77 FA 25 F4 | 	bith	result1, #119
21480     44 00 00 FF 
21484     FC E4 05 F1 | 	add	objptr, ##35068
21488     F2 FA 61 FC | 	wrlong	result1, objptr
2148c     44 00 00 FF 
21490     FC E4 85 F1 | 	sub	objptr, ##35068
21494     F2 FA 01 F6 | 	mov	result1, objptr
21498     00 C8 03 FF 
2149c     00 FA 45 F5 | 	or	result1, ##126877696
214a0     44 00 00 FF 
214a4     F0 E4 05 F1 | 	add	objptr, ##35056
214a8     F2 FA 61 FC | 	wrlong	result1, objptr
214ac     44 00 00 FF 
214b0     F0 E4 85 F1 | 	sub	objptr, ##35056
214b4     F2 FA 01 F6 | 	mov	result1, objptr
214b8     00 D0 03 FF 
214bc     00 FA 45 F5 | 	or	result1, ##127926272
214c0     44 00 00 FF 
214c4     F4 E4 05 F1 | 	add	objptr, ##35060
214c8     F2 FA 61 FC | 	wrlong	result1, objptr
214cc     44 00 00 FF 
214d0     F4 E4 85 F1 | 	sub	objptr, ##35060
214d4     F2 FA 01 F6 | 	mov	result1, objptr
214d8     00 D8 03 FF 
214dc     00 FA 45 F5 | 	or	result1, ##128974848
214e0     44 00 00 FF 
214e4     F8 E4 05 F1 | 	add	objptr, ##35064
214e8     F2 FA 61 FC | 	wrlong	result1, objptr
214ec     44 00 00 FF 
214f0     F8 E4 85 F1 | 	sub	objptr, ##35064
214f4     F2 FA 01 F6 | 	mov	result1, objptr
214f8     96 FA 25 F4 | 	bith	result1, #150
214fc     44 00 00 FF 
21500     00 E5 05 F1 | 	add	objptr, ##35072
21504     F2 FA 61 FC | 	wrlong	result1, objptr
21508     44 00 00 FF 
2150c     00 E5 85 F1 | 	sub	objptr, ##35072
21510     F2 FA 01 F6 | 	mov	result1, objptr
21514     00 E8 03 FF 
21518     00 FA 45 F5 | 	or	result1, ##131072000
2151c     44 00 00 FF 
21520     04 E5 05 F1 | 	add	objptr, ##35076
21524     F2 FA 61 FC | 	wrlong	result1, objptr
21528     44 00 00 FF 
2152c     04 E5 85 F1 | 	sub	objptr, ##35076
21530     F2 FA 01 F6 | 	mov	result1, objptr
21534     B5 FA 25 F4 | 	bith	result1, #181
21538     44 00 00 FF 
2153c     08 E5 05 F1 | 	add	objptr, ##35080
21540     F2 FA 61 FC | 	wrlong	result1, objptr
21544     44 00 00 FF 
21548     08 E5 85 F1 | 	sub	objptr, ##35080
2154c     F2 FA 01 F6 | 	mov	result1, objptr
21550     D4 FA 25 F4 | 	bith	result1, #212
21554     44 00 00 FF 
21558     0C E5 05 F1 | 	add	objptr, ##35084
2155c     F2 FA 61 FC | 	wrlong	result1, objptr
21560     44 00 00 FF 
21564     0C E5 85 F1 | 	sub	objptr, ##35084
21568     F2 FA 01 F6 | 	mov	result1, objptr
2156c     1B FA 25 F4 | 	bith	result1, #27
21570     44 00 00 FF 
21574     10 E5 05 F1 | 	add	objptr, ##35088
21578     F2 FA 61 FC | 	wrlong	result1, objptr
2157c     44 00 00 FF 
21580     10 E5 85 F1 | 	sub	objptr, ##35088
21584     F2 FA 01 F6 | 	mov	result1, objptr
21588     00 08 04 FF 
2158c     00 FA 45 F5 | 	or	result1, ##135266304
21590     44 00 00 FF 
21594     14 E5 05 F1 | 	add	objptr, ##35092
21598     F2 FA 61 FC | 	wrlong	result1, objptr
2159c     44 00 00 FF 
215a0     14 E5 85 F1 | 	sub	objptr, ##35092
215a4     F2 FA 01 F6 | 	mov	result1, objptr
215a8     00 10 04 FF 
215ac     00 FA 45 F5 | 	or	result1, ##136314880
215b0     44 00 00 FF 
215b4     1C E5 05 F1 | 	add	objptr, ##35100
215b8     F2 FA 61 FC | 	wrlong	result1, objptr
215bc     44 00 00 FF 
215c0     1C E5 85 F1 | 	sub	objptr, ##35100
215c4     F2 FA 01 F6 | 	mov	result1, objptr
215c8     00 18 04 FF 
215cc     00 FA 45 F5 | 	or	result1, ##137363456
215d0     44 00 00 FF 
215d4     20 E5 05 F1 | 	add	objptr, ##35104
215d8     F2 FA 61 FC | 	wrlong	result1, objptr
215dc     44 00 00 FF 
215e0     20 E5 85 F1 | 	sub	objptr, ##35104
215e4     F2 FA 01 F6 | 	mov	result1, objptr
215e8     00 20 04 FF 
215ec     00 FA 45 F5 | 	or	result1, ##138412032
215f0     44 00 00 FF 
215f4     24 E5 05 F1 | 	add	objptr, ##35108
215f8     F2 FA 61 FC | 	wrlong	result1, objptr
215fc     44 00 00 FF 
21600     24 E5 85 F1 | 	sub	objptr, ##35108
21604     F2 FA 01 F6 | 	mov	result1, objptr
21608     00 28 04 FF 
2160c     00 FA 45 F5 | 	or	result1, ##139460608
21610     44 00 00 FF 
21614     18 E5 05 F1 | 	add	objptr, ##35096
21618     F2 FA 61 FC | 	wrlong	result1, objptr
2161c     44 00 00 FF 
21620     18 E5 85 F1 | 	sub	objptr, ##35096
21624     F2 FA 01 F6 | 	mov	result1, objptr
21628     00 30 04 FF 
2162c     00 FA 45 F5 | 	or	result1, ##140509184
21630     44 00 00 FF 
21634     28 E5 05 F1 | 	add	objptr, ##35112
21638     F2 FA 61 FC | 	wrlong	result1, objptr
2163c     44 00 00 FF 
21640     28 E5 85 F1 | 	sub	objptr, ##35112
21644     F2 FA 01 F6 | 	mov	result1, objptr
21648     00 38 04 FF 
2164c     00 FA 45 F5 | 	or	result1, ##141557760
21650     44 00 00 FF 
21654     5C E5 05 F1 | 	add	objptr, ##35164
21658     F2 FA 61 FC | 	wrlong	result1, objptr
2165c     44 00 00 FF 
21660     5C E5 85 F1 | 	sub	objptr, ##35164
21664     F2 FA 01 F6 | 	mov	result1, objptr
21668     00 40 04 FF 
2166c     00 FA 45 F5 | 	or	result1, ##142606336
21670     44 00 00 FF 
21674     54 E5 05 F1 | 	add	objptr, ##35156
21678     F2 FA 61 FC | 	wrlong	result1, objptr
2167c     44 00 00 FF 
21680     54 E5 85 F1 | 	sub	objptr, ##35156
21684     F2 FA 01 F6 | 	mov	result1, objptr
21688     00 48 04 FF 
2168c     00 FA 45 F5 | 	or	result1, ##143654912
21690     44 00 00 FF 
21694     2C E5 05 F1 | 	add	objptr, ##35116
21698     F2 FA 61 FC | 	wrlong	result1, objptr
2169c     44 00 00 FF 
216a0     2C E5 85 F1 | 	sub	objptr, ##35116
216a4     F2 FA 01 F6 | 	mov	result1, objptr
216a8     00 50 04 FF 
216ac     00 FA 45 F5 | 	or	result1, ##144703488
216b0     44 00 00 FF 
216b4     30 E5 05 F1 | 	add	objptr, ##35120
216b8     F2 FA 61 FC | 	wrlong	result1, objptr
216bc     44 00 00 FF 
216c0     30 E5 85 F1 | 	sub	objptr, ##35120
216c4     F2 FA 01 F6 | 	mov	result1, objptr
216c8     00 58 04 FF 
216cc     00 FA 45 F5 | 	or	result1, ##145752064
216d0     44 00 00 FF 
216d4     4C E5 05 F1 | 	add	objptr, ##35148
216d8     F2 FA 61 FC | 	wrlong	result1, objptr
216dc     44 00 00 FF 
216e0     4C E5 85 F1 | 	sub	objptr, ##35148
216e4     F2 FA 01 F6 | 	mov	result1, objptr
216e8     00 60 04 FF 
216ec     00 FA 45 F5 | 	or	result1, ##146800640
216f0     44 00 00 FF 
216f4     50 E5 05 F1 | 	add	objptr, ##35152
216f8     F2 FA 61 FC | 	wrlong	result1, objptr
216fc     44 00 00 FF 
21700     50 E5 85 F1 | 	sub	objptr, ##35152
21704     F2 FA 01 F6 | 	mov	result1, objptr
21708     00 68 04 FF 
2170c     00 FA 45 F5 | 	or	result1, ##147849216
21710     44 00 00 FF 
21714     6C E5 05 F1 | 	add	objptr, ##35180
21718     F2 FA 61 FC | 	wrlong	result1, objptr
2171c     44 00 00 FF 
21720     6C E5 85 F1 | 	sub	objptr, ##35180
21724     F2 FA 01 F6 | 	mov	result1, objptr
21728     00 70 04 FF 
2172c     00 FA 45 F5 | 	or	result1, ##148897792
21730     44 00 00 FF 
21734     68 E5 05 F1 | 	add	objptr, ##35176
21738     F2 FA 61 FC | 	wrlong	result1, objptr
2173c     44 00 00 FF 
21740     68 E5 85 F1 | 	sub	objptr, ##35176
21744     F2 FA 01 F6 | 	mov	result1, objptr
21748     00 78 04 FF 
2174c     00 FA 45 F5 | 	or	result1, ##149946368
21750     44 00 00 FF 
21754     78 E5 05 F1 | 	add	objptr, ##35192
21758     F2 FA 61 FC | 	wrlong	result1, objptr
2175c     44 00 00 FF 
21760     78 E5 85 F1 | 	sub	objptr, ##35192
21764     F2 FA 01 F6 | 	mov	result1, objptr
21768     00 80 04 FF 
2176c     00 FA 45 F5 | 	or	result1, ##150994944
21770     44 00 00 FF 
21774     44 E5 05 F1 | 	add	objptr, ##35140
21778     F2 FA 61 FC | 	wrlong	result1, objptr
2177c     44 00 00 FF 
21780     44 E5 85 F1 | 	sub	objptr, ##35140
21784     F2 FA 01 F6 | 	mov	result1, objptr
21788     00 88 04 FF 
2178c     00 FA 45 F5 | 	or	result1, ##152043520
21790     44 00 00 FF 
21794     74 E5 05 F1 | 	add	objptr, ##35188
21798     F2 FA 61 FC | 	wrlong	result1, objptr
2179c     44 00 00 FF 
217a0     74 E5 85 F1 | 	sub	objptr, ##35188
217a4     F2 FA 01 F6 | 	mov	result1, objptr
217a8     00 90 04 FF 
217ac     00 FA 45 F5 | 	or	result1, ##153092096
217b0     44 00 00 FF 
217b4     64 E5 05 F1 | 	add	objptr, ##35172
217b8     F2 FA 61 FC | 	wrlong	result1, objptr
217bc     44 00 00 FF 
217c0     64 E5 85 F1 | 	sub	objptr, ##35172
217c4     F2 FA 01 F6 | 	mov	result1, objptr
217c8     00 98 04 FF 
217cc     00 FA 45 F5 | 	or	result1, ##154140672
217d0     43 00 00 FF 
217d4     14 E5 05 F1 | 	add	objptr, ##34580
217d8     F2 FA 61 FC | 	wrlong	result1, objptr
217dc     43 00 00 FF 
217e0     14 E5 85 F1 | 	sub	objptr, ##34580
217e4     F2 FA 01 F6 | 	mov	result1, objptr
217e8     00 A0 04 FF 
217ec     00 FA 45 F5 | 	or	result1, ##155189248
217f0     44 00 00 FF 
217f4     34 E5 05 F1 | 	add	objptr, ##35124
217f8     F2 FA 61 FC | 	wrlong	result1, objptr
217fc     44 00 00 FF 
21800     34 E5 85 F1 | 	sub	objptr, ##35124
21804     F2 FA 01 F6 | 	mov	result1, objptr
21808     00 08 01 FF 
2180c     00 FA 45 F5 | 	or	result1, ##34603008
21810     44 00 00 FF 
21814     3C E5 05 F1 | 	add	objptr, ##35132
21818     F2 FA 61 FC | 	wrlong	result1, objptr
2181c     44 00 00 FF 
21820     3C E5 85 F1 | 	sub	objptr, ##35132
21824     F2 FA 01 F6 | 	mov	result1, objptr
21828     00 A8 04 FF 
2182c     00 FA 45 F5 | 	or	result1, ##156237824
21830     44 00 00 FF 
21834     38 E5 05 F1 | 	add	objptr, ##35128
21838     F2 FA 61 FC | 	wrlong	result1, objptr
2183c     44 00 00 FF 
21840     38 E5 85 F1 | 	sub	objptr, ##35128
21844     F2 FA 01 F6 | 	mov	result1, objptr
21848     00 B0 04 FF 
2184c     00 FA 45 F5 | 	or	result1, ##157286400
21850     44 00 00 FF 
21854     7C E5 05 F1 | 	add	objptr, ##35196
21858     F2 FA 61 FC | 	wrlong	result1, objptr
2185c     44 00 00 FF 
21860     7C E5 85 F1 | 	sub	objptr, ##35196
21864     F2 FA 01 F6 | 	mov	result1, objptr
21868     00 B8 04 FF 
2186c     00 FA 45 F5 | 	or	result1, ##158334976
21870     44 00 00 FF 
21874     80 E5 05 F1 | 	add	objptr, ##35200
21878     F2 FA 61 FC | 	wrlong	result1, objptr
2187c     44 00 00 FF 
21880     80 E5 85 F1 | 	sub	objptr, ##35200
21884     F2 FA 01 F6 | 	mov	result1, objptr
21888     00 C0 04 FF 
2188c     00 FA 45 F5 | 	or	result1, ##159383552
21890     44 00 00 FF 
21894     84 E5 05 F1 | 	add	objptr, ##35204
21898     F2 FA 61 FC | 	wrlong	result1, objptr
2189c     44 00 00 FF 
218a0     84 E5 85 F1 | 	sub	objptr, ##35204
218a4     F2 FA 01 F6 | 	mov	result1, objptr
218a8     00 C8 04 FF 
218ac     00 FA 45 F5 | 	or	result1, ##160432128
218b0     44 00 00 FF 
218b4     88 E5 05 F1 | 	add	objptr, ##35208
218b8     F2 FA 61 FC | 	wrlong	result1, objptr
218bc     44 00 00 FF 
218c0     88 E5 85 F1 | 	sub	objptr, ##35208
218c4     F2 FA 01 F6 | 	mov	result1, objptr
218c8     00 D0 04 FF 
218cc     00 FA 45 F5 | 	or	result1, ##161480704
218d0     44 00 00 FF 
218d4     90 E5 05 F1 | 	add	objptr, ##35216
218d8     F2 FA 61 FC | 	wrlong	result1, objptr
218dc     44 00 00 FF 
218e0     90 E5 85 F1 | 	sub	objptr, ##35216
218e4     F2 FA 01 F6 | 	mov	result1, objptr
218e8     00 D8 04 FF 
218ec     00 FA 45 F5 | 	or	result1, ##162529280
218f0     44 00 00 FF 
218f4     94 E5 05 F1 | 	add	objptr, ##35220
218f8     F2 FA 61 FC | 	wrlong	result1, objptr
218fc     44 00 00 FF 
21900     94 E5 85 F1 | 	sub	objptr, ##35220
21904     F2 FA 01 F6 | 	mov	result1, objptr
21908     00 E0 04 FF 
2190c     00 FA 45 F5 | 	or	result1, ##163577856
21910     44 00 00 FF 
21914     98 E5 05 F1 | 	add	objptr, ##35224
21918     F2 FA 61 FC | 	wrlong	result1, objptr
2191c     44 00 00 FF 
21920     98 E5 85 F1 | 	sub	objptr, ##35224
21924     F2 FA 01 F6 | 	mov	result1, objptr
21928     00 E8 04 FF 
2192c     00 FA 45 F5 | 	or	result1, ##164626432
21930     44 00 00 FF 
21934     8C E5 05 F1 | 	add	objptr, ##35212
21938     F2 FA 61 FC | 	wrlong	result1, objptr
2193c     44 00 00 FF 
21940     8C E5 85 F1 | 	sub	objptr, ##35212
21944                 | _init_commands_ret
21944     2D 00 64 FD | 	ret
21948                 | 
21948                 | ' 
21948                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
21948                 | ' 
21948                 | ' sub init_audio
21948                 | _init_audio
21948     06 4A 05 F6 | 	mov	COUNT_, #6
2194c     A8 00 A0 FD | 	call	#pushregs_
21950     00 C0 1F FF 
21954     00 26 06 F6 | 	mov	local01, ##1065353216
21958                 | ' 
21958                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
21958     00 28 06 F6 | 	mov	local02, #0
2195c                 | LR__2590
2195c     14 2B 02 F6 | 	mov	local03, local02
21960     01 2A 66 F0 | 	shl	local03, #1
21964     58 7F 23 FF 
21968     00 2C 06 F6 | 	mov	local04, ##1191096320
2196c     14 13 52 F6 | 	abs	arg01, local02 wc
21970     1F 2E C6 C9 |  if_b	decod	local05, #31
21974     00 2E 06 36 |  if_ae	mov	local05, #0
21978     3C 70 B0 FD | 	call	#__system___float_fromuns
2197c     17 FB 61 F5 | 	xor	result1, local05
21980     FD 12 02 F6 | 	mov	arg01, result1
21984     87 24 20 FF 
21988     DB 15 06 F6 | 	mov	arg02, ##1078530011
2198c     2C 74 B0 FD | 	call	#__system___float_mul
21990     FD 12 02 F6 | 	mov	arg01, result1
21994     00 00 22 FF 
21998     00 14 06 F6 | 	mov	arg02, ##1140850688
2199c     20 76 B0 FD | 	call	#__system___float_div
219a0     FD 12 02 F6 | 	mov	arg01, result1
219a4     74 7D B0 FD | 	call	#__system____builtin_sinf
219a8     FD 14 02 F6 | 	mov	arg02, result1
219ac     16 13 02 F6 | 	mov	arg01, local04
219b0     08 74 B0 FD | 	call	#__system___float_mul
219b4     FD 12 02 F6 | 	mov	arg01, result1
219b8     01 14 06 F6 | 	mov	arg02, #1
219bc     C4 78 B0 FD | 	call	#__system___float_tointeger
219c0     FD 14 02 F6 | 	mov	arg02, result1
219c4     15 13 02 F6 | 	mov	arg01, local03
219c8     6C 0D B0 FD | 	call	#_psdpoke
219cc     01 28 06 F1 | 	add	local02, #1
219d0     02 00 00 FF 
219d4     00 28 56 F2 | 	cmps	local02, ##1024 wc
219d8     80 FF 9F CD |  if_b	jmp	#LR__2590
219dc                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
219dc     00 28 06 F6 | 	mov	local02, #0
219e0                 | LR__2591
219e0     14 15 02 F6 | 	mov	arg02, local02
219e4     01 14 66 F0 | 	shl	arg02, #1
219e8     0B 12 C6 F9 | 	decod	arg01, #11
219ec     0A 13 02 F1 | 	add	arg01, arg02
219f0     14 2D 02 F6 | 	mov	local04, local02
219f4     07 2C 66 F0 | 	shl	local04, #7
219f8     14 2D 82 F1 | 	sub	local04, local02
219fc     C0 FF 7F FF 
21a00     00 15 06 F6 | 	mov	arg02, ##-32512
21a04     16 15 02 F1 | 	add	arg02, local04
21a08     2C 0D B0 FD | 	call	#_psdpoke
21a0c     09 2C C6 F9 | 	decod	local04, #9
21a10     14 2D 02 F1 | 	add	local04, local02
21a14     01 2C 66 F0 | 	shl	local04, #1
21a18     0B 12 C6 F9 | 	decod	arg01, #11
21a1c     16 13 02 F1 | 	add	arg01, local04
21a20     14 2F 02 F6 | 	mov	local05, local02
21a24     07 2E 66 F0 | 	shl	local05, #7
21a28     14 2F 82 F1 | 	sub	local05, local02
21a2c     3F 00 00 FF 
21a30     00 15 06 F6 | 	mov	arg02, ##32512
21a34     17 15 82 F1 | 	sub	arg02, local05
21a38     FC 0C B0 FD | 	call	#_psdpoke
21a3c     01 28 06 F1 | 	add	local02, #1
21a40     01 00 00 FF 
21a44     00 28 56 F2 | 	cmps	local02, ##512 wc
21a48     94 FF 9F CD |  if_b	jmp	#LR__2591
21a4c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
21a4c     00 28 06 F6 | 	mov	local02, #0
21a50                 | LR__2592
21a50     14 2F 02 F6 | 	mov	local05, local02
21a54     01 2E 66 F0 | 	shl	local05, #1
21a58     0C 12 C6 F9 | 	decod	arg01, #12
21a5c     17 13 02 F1 | 	add	arg01, local05
21a60     14 2F 02 F6 | 	mov	local05, local02
21a64     06 2E 66 F0 | 	shl	local05, #6
21a68     14 2F 82 F1 | 	sub	local05, local02
21a6c     C1 FF 7F FF 
21a70     00 14 06 F6 | 	mov	arg02, ##-32256
21a74     17 15 02 F1 | 	add	arg02, local05
21a78     BC 0C B0 FD | 	call	#_psdpoke
21a7c     01 28 06 F1 | 	add	local02, #1
21a80     02 00 00 FF 
21a84     00 28 56 F2 | 	cmps	local02, ##1024 wc
21a88     C4 FF 9F CD |  if_b	jmp	#LR__2592
21a8c                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
21a8c     00 28 06 F6 | 	mov	local02, #0
21a90                 | LR__2593
21a90     14 2F 02 F6 | 	mov	local05, local02
21a94     01 2E 66 F0 | 	shl	local05, #1
21a98     0C 00 00 FF 
21a9c     00 12 06 F6 | 	mov	arg01, ##6144
21aa0     17 13 02 F1 | 	add	arg01, local05
21aa4     C0 FF 7F FF 
21aa8     A8 14 06 F6 | 	mov	arg02, ##-32600
21aac     88 0C B0 FD | 	call	#_psdpoke
21ab0     01 28 06 F1 | 	add	local02, #1
21ab4     80 28 56 F2 | 	cmps	local02, #128 wc
21ab8     D4 FF 9F CD |  if_b	jmp	#LR__2593
21abc     80 28 06 F6 | 	mov	local02, #128
21ac0                 | LR__2594
21ac0     14 2F 02 F6 | 	mov	local05, local02
21ac4     01 2E 66 F0 | 	shl	local05, #1
21ac8     0C 00 00 FF 
21acc     00 12 06 F6 | 	mov	arg01, ##6144
21ad0     17 13 02 F1 | 	add	arg01, local05
21ad4     3F 00 00 FF 
21ad8     58 15 06 F6 | 	mov	arg02, ##32600
21adc     58 0C B0 FD | 	call	#_psdpoke
21ae0     01 28 06 F1 | 	add	local02, #1
21ae4     02 00 00 FF 
21ae8     00 28 16 F2 | 	cmp	local02, ##1024 wc
21aec     D0 FF 9F CD |  if_b	jmp	#LR__2594
21af0                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
21af0     00 28 06 F6 | 	mov	local02, #0
21af4                 | LR__2595
21af4     14 2F 02 F6 | 	mov	local05, local02
21af8     01 2E 66 F0 | 	shl	local05, #1
21afc     0D 12 C6 F9 | 	decod	arg01, #13
21b00     17 13 02 F1 | 	add	arg01, local05
21b04     C0 FF 7F FF 
21b08     A8 14 06 F6 | 	mov	arg02, ##-32600
21b0c     28 0C B0 FD | 	call	#_psdpoke
21b10     01 28 06 F1 | 	add	local02, #1
21b14     01 00 00 FF 
21b18     00 28 56 F2 | 	cmps	local02, ##512 wc
21b1c     D4 FF 9F CD |  if_b	jmp	#LR__2595
21b20     09 28 C6 F9 | 	decod	local02, #9
21b24                 | LR__2596
21b24     14 2F 02 F6 | 	mov	local05, local02
21b28     01 2E 66 F0 | 	shl	local05, #1
21b2c     0D 12 C6 F9 | 	decod	arg01, #13
21b30     17 13 02 F1 | 	add	arg01, local05
21b34     3F 00 00 FF 
21b38     58 15 06 F6 | 	mov	arg02, ##32600
21b3c     F8 0B B0 FD | 	call	#_psdpoke
21b40     01 28 06 F1 | 	add	local02, #1
21b44     02 00 00 FF 
21b48     00 28 16 F2 | 	cmp	local02, ##1024 wc
21b4c     D4 FF 9F CD |  if_b	jmp	#LR__2596
21b50                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
21b50     00 28 06 F6 | 	mov	local02, #0
21b54                 | LR__2597
21b54     14 2F 02 F6 | 	mov	local05, local02
21b58     01 2E 66 F0 | 	shl	local05, #1
21b5c     14 00 00 FF 
21b60     00 12 06 F6 | 	mov	arg01, ##10240
21b64     17 13 02 F1 | 	add	arg01, local05
21b68     C0 FF 7F FF 
21b6c     A8 14 06 F6 | 	mov	arg02, ##-32600
21b70     C4 0B B0 FD | 	call	#_psdpoke
21b74     01 28 06 F1 | 	add	local02, #1
21b78     00 29 56 F2 | 	cmps	local02, #256 wc
21b7c     D4 FF 9F CD |  if_b	jmp	#LR__2597
21b80     00 29 06 F6 | 	mov	local02, #256
21b84                 | LR__2598
21b84     14 2F 02 F6 | 	mov	local05, local02
21b88     01 2E 66 F0 | 	shl	local05, #1
21b8c     14 00 00 FF 
21b90     00 12 06 F6 | 	mov	arg01, ##10240
21b94     17 13 02 F1 | 	add	arg01, local05
21b98     3F 00 00 FF 
21b9c     58 15 06 F6 | 	mov	arg02, ##32600
21ba0     94 0B B0 FD | 	call	#_psdpoke
21ba4     01 28 06 F1 | 	add	local02, #1
21ba8     02 00 00 FF 
21bac     00 28 16 F2 | 	cmp	local02, ##1024 wc
21bb0     D0 FF 9F CD |  if_b	jmp	#LR__2598
21bb4                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
21bb4     18 00 00 FF 
21bb8     00 28 06 F6 | 	mov	local02, ##12288
21bbc                 | LR__2599
21bbc     14 13 02 F6 | 	mov	arg01, local02
21bc0     00 14 06 F6 | 	mov	arg02, #0
21bc4     28 0B B0 FD | 	call	#_pslpoke
21bc8     04 28 06 F1 | 	add	local02, #4
21bcc     77 00 00 FF 
21bd0     FD 29 56 F2 | 	cmps	local02, ##61437 wc
21bd4     E4 FF 9F CD |  if_b	jmp	#LR__2599
21bd8                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
21bd8     00 28 06 F6 | 	mov	local02, #0
21bdc                 | LR__2600
21bdc     14 2F 02 F6 | 	mov	local05, local02
21be0     01 2E 66 F0 | 	shl	local05, #1
21be4     78 00 00 FF 
21be8     00 2A 06 F6 | 	mov	local03, ##61440
21bec     17 2B 02 F1 | 	add	local03, local05
21bf0     12 00 00 FF 
21bf4     BA EA 05 F1 | 	add	ptr__dat__, ##9402
21bf8     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21bfc     12 00 00 FF 
21c00     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
21c04     10 12 06 F1 | 	add	arg01, #16
21c08     14 15 02 F6 | 	mov	arg02, local02
21c0c     01 14 66 F0 | 	shl	arg02, #1
21c10     0A 13 02 F1 | 	add	arg01, arg02
21c14     09 15 E2 FA | 	rdword	arg02, arg01
21c18     15 13 02 F6 | 	mov	arg01, local03
21c1c     18 0B B0 FD | 	call	#_psdpoke
21c20     01 28 06 F1 | 	add	local02, #1
21c24     02 00 00 FF 
21c28     00 28 56 F2 | 	cmps	local02, ##1024 wc
21c2c     AC FF 9F CD |  if_b	jmp	#LR__2600
21c30                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
21c30     00 28 06 F6 | 	mov	local02, #0
21c34                 | LR__2601
21c34     14 2F 02 F6 | 	mov	local05, local02
21c38     01 2E 66 F0 | 	shl	local05, #1
21c3c     7C 00 00 FF 
21c40     00 2A 06 F6 | 	mov	local03, ##63488
21c44     17 2B 02 F1 | 	add	local03, local05
21c48     0E 00 00 FF 
21c4c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
21c50     F5 12 02 F6 | 	mov	arg01, ptr__dat__
21c54     0E 00 00 FF 
21c58     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
21c5c     10 12 06 F1 | 	add	arg01, #16
21c60     14 15 02 F6 | 	mov	arg02, local02
21c64     01 14 66 F0 | 	shl	arg02, #1
21c68     0A 13 02 F1 | 	add	arg01, arg02
21c6c     09 15 E2 FA | 	rdword	arg02, arg01
21c70     15 13 02 F6 | 	mov	arg01, local03
21c74     C0 0A B0 FD | 	call	#_psdpoke
21c78     01 28 06 F1 | 	add	local02, #1
21c7c     02 00 00 FF 
21c80     00 28 56 F2 | 	cmps	local02, ##1024 wc
21c84     AC FF 9F CD |  if_b	jmp	#LR__2601
21c88                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
21c88     00 28 06 F6 | 	mov	local02, #0
21c8c     0C 00 00 FF 
21c90     D8 E4 05 F1 | 	add	objptr, ##6360
21c94     97 18 48 FB | 	callpa	#(@LR__2603-@LR__2602)>>2,fcache_load_ptr_
21c98                 | LR__2602
21c98     14 2F 02 F6 | 	mov	local05, local02
21c9c     01 2E 66 F0 | 	shl	local05, #1
21ca0     F2 2E 02 F1 | 	add	local05, objptr
21ca4     14 2B 02 F6 | 	mov	local03, local02
21ca8     08 2A 66 F0 | 	shl	local03, #8
21cac     7F 00 00 FF 
21cb0     00 31 06 F6 | 	mov	local06, ##65280
21cb4     15 31 82 F1 | 	sub	local06, local03
21cb8     17 31 52 FC | 	wrword	local06, local05
21cbc     01 28 06 F1 | 	add	local02, #1
21cc0     00 29 56 F2 | 	cmps	local02, #256 wc
21cc4     D0 FF 9F CD |  if_b	jmp	#LR__2602
21cc8                 | LR__2603
21cc8     0C 00 00 FF 
21ccc     D8 E4 85 F1 | 	sub	objptr, ##6360
21cd0                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
21cd0     00 28 06 F6 | 	mov	local02, #0
21cd4                 | LR__2604
21cd4     14 2F 02 F6 | 	mov	local05, local02
21cd8     01 2E 66 F0 | 	shl	local05, #1
21cdc     0D 00 00 FF 
21ce0     D8 E4 05 F1 | 	add	objptr, ##6872
21ce4     F2 2E 02 F1 | 	add	local05, objptr
21ce8     80 BF 23 FF 
21cec     00 12 06 F6 | 	mov	arg01, ##1199505408
21cf0     13 15 02 F6 | 	mov	arg02, local01
21cf4     0D 00 00 FF 
21cf8     D8 E4 85 F1 | 	sub	objptr, ##6872
21cfc     BC 70 B0 FD | 	call	#__system___float_mul
21d00     FD 12 02 F6 | 	mov	arg01, result1
21d04     01 14 06 F6 | 	mov	arg02, #1
21d08     78 75 B0 FD | 	call	#__system___float_tointeger
21d0c     17 FB 51 FC | 	wrword	result1, local05
21d10     13 13 02 F6 | 	mov	arg01, local01
21d14     CC BC 1F FF 
21d18     9A 15 06 F6 | 	mov	arg02, ##1064933786
21d1c     9C 70 B0 FD | 	call	#__system___float_mul
21d20     FD 26 02 F6 | 	mov	local01, result1
21d24     01 28 06 F1 | 	add	local02, #1
21d28     00 29 56 F2 | 	cmps	local02, #256 wc
21d2c     A4 FF 9F CD |  if_b	jmp	#LR__2604
21d30     0E 00 00 FF 
21d34     D6 E4 05 F1 | 	add	objptr, ##7382
21d38     F2 00 58 FC | 	wrword	#0, objptr
21d3c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
21d3c     00 28 06 F6 | 	mov	local02, #0
21d40     02 E4 05 F1 | 	add	objptr, #2
21d44     97 10 48 FB | 	callpa	#(@LR__2606-@LR__2605)>>2,fcache_load_ptr_
21d48                 | LR__2605
21d48     14 2F 02 F6 | 	mov	local05, local02
21d4c     01 2E 66 F0 | 	shl	local05, #1
21d50     F2 2E 02 F1 | 	add	local05, objptr
21d54     7F 00 80 FF 
21d58     17 01 5A FC | 	wrword	##65280, local05
21d5c     01 28 06 F1 | 	add	local02, #1
21d60     FF 28 56 F2 | 	cmps	local02, #255 wc
21d64     E0 FF 9F CD |  if_b	jmp	#LR__2605
21d68                 | LR__2606
21d68     FE E5 05 F1 | 	add	objptr, #510
21d6c     F2 00 58 FC | 	wrword	#0, objptr
21d70                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
21d70     00 28 06 F6 | 	mov	local02, #0
21d74     02 E4 05 F1 | 	add	objptr, #2
21d78     97 52 48 FB | 	callpa	#(@LR__2611-@LR__2607)>>2,fcache_load_ptr_
21d7c                 | LR__2607
21d7c     14 2F 02 F6 | 	mov	local05, local02
21d80     01 2E 66 F0 | 	shl	local05, #1
21d84     F2 2E 02 F1 | 	add	local05, objptr
21d88     14 31 02 F6 | 	mov	local06, local02
21d8c     0C 30 66 F0 | 	shl	local06, #12
21d90     17 31 52 FC | 	wrword	local06, local05
21d94     01 28 06 F1 | 	add	local02, #1
21d98     10 28 56 F2 | 	cmps	local02, #16 wc
21d9c     DC FF 9F CD |  if_b	jmp	#LR__2607
21da0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
21da0     10 28 06 F6 | 	mov	local02, #16
21da4                 | LR__2608
21da4     14 2F 02 F6 | 	mov	local05, local02
21da8     01 2E 66 F0 | 	shl	local05, #1
21dac     F2 2E 02 F1 | 	add	local05, objptr
21db0     7F 00 80 FF 
21db4     17 01 5A FC | 	wrword	##65280, local05
21db8     01 28 06 F1 | 	add	local02, #1
21dbc     F0 28 16 F2 | 	cmp	local02, #240 wc
21dc0     E0 FF 9F CD |  if_b	jmp	#LR__2608
21dc4                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
21dc4     F0 28 06 F6 | 	mov	local02, #240
21dc8                 | LR__2609
21dc8     14 2F 02 F6 | 	mov	local05, local02
21dcc     01 2E 66 F0 | 	shl	local05, #1
21dd0     F2 2E 02 F1 | 	add	local05, objptr
21dd4     FF 2A 06 F6 | 	mov	local03, #255
21dd8     14 2B 82 F1 | 	sub	local03, local02
21ddc     0C 2A 66 F0 | 	shl	local03, #12
21de0     17 2B 52 FC | 	wrword	local03, local05
21de4     01 28 06 F1 | 	add	local02, #1
21de8     00 29 16 F2 | 	cmp	local02, #256 wc
21dec     D8 FF 9F CD |  if_b	jmp	#LR__2609
21df0                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
21df0     00 28 06 F6 | 	mov	local02, #0
21df4     01 00 00 FF 
21df8     00 E4 05 F1 | 	add	objptr, ##512
21dfc                 | LR__2610
21dfc     14 2F 02 F6 | 	mov	local05, local02
21e00     01 2E 66 F0 | 	shl	local05, #1
21e04     F2 2E 02 F1 | 	add	local05, objptr
21e08     14 31 02 F6 | 	mov	local06, local02
21e0c     08 30 66 F0 | 	shl	local06, #8
21e10     17 31 52 FC | 	wrword	local06, local05
21e14     01 28 06 F1 | 	add	local02, #1
21e18     00 29 56 F2 | 	cmps	local02, #256 wc
21e1c     DC FF 9F CD |  if_b	jmp	#LR__2610
21e20                 | LR__2611
21e20     FE E5 05 F1 | 	add	objptr, #510
21e24     F2 00 58 FC | 	wrword	#0, objptr
21e28                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
21e28     00 28 06 F6 | 	mov	local02, #0
21e2c     02 E4 05 F1 | 	add	objptr, #2
21e30     97 6A 48 FB | 	callpa	#(@LR__2616-@LR__2612)>>2,fcache_load_ptr_
21e34                 | LR__2612
21e34     14 2F 02 F6 | 	mov	local05, local02
21e38     01 2E 66 F0 | 	shl	local05, #1
21e3c     F2 2E 02 F1 | 	add	local05, objptr
21e40     14 31 02 F6 | 	mov	local06, local02
21e44     04 30 66 F0 | 	shl	local06, #4
21e48     14 31 02 F1 | 	add	local06, local02
21e4c     04 30 66 F0 | 	shl	local06, #4
21e50     17 31 52 FC | 	wrword	local06, local05
21e54     01 28 06 F1 | 	add	local02, #1
21e58     F0 28 56 F2 | 	cmps	local02, #240 wc
21e5c     D4 FF 9F CD |  if_b	jmp	#LR__2612
21e60     F0 28 06 F6 | 	mov	local02, #240
21e64                 | LR__2613
21e64     14 2F 02 F6 | 	mov	local05, local02
21e68     01 2E 66 F0 | 	shl	local05, #1
21e6c     F2 2E 02 F1 | 	add	local05, objptr
21e70     FF 2A 06 F6 | 	mov	local03, #255
21e74     14 2B 82 F1 | 	sub	local03, local02
21e78     0C 2A 66 F0 | 	shl	local03, #12
21e7c     17 2B 52 FC | 	wrword	local03, local05
21e80     01 28 06 F1 | 	add	local02, #1
21e84     00 29 16 F2 | 	cmp	local02, #256 wc
21e88     D8 FF 9F CD |  if_b	jmp	#LR__2613
21e8c                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
21e8c     00 28 06 F6 | 	mov	local02, #0
21e90     01 00 00 FF 
21e94     00 E4 05 F1 | 	add	objptr, ##512
21e98                 | LR__2614
21e98     14 2F 02 F6 | 	mov	local05, local02
21e9c     01 2E 66 F0 | 	shl	local05, #1
21ea0     F2 2E 02 F1 | 	add	local05, objptr
21ea4     14 31 02 F6 | 	mov	local06, local02
21ea8     09 30 66 F0 | 	shl	local06, #9
21eac     17 31 52 FC | 	wrword	local06, local05
21eb0     FF 2E 06 F6 | 	mov	local05, #255
21eb4     14 2F 82 F1 | 	sub	local05, local02
21eb8     01 2E 66 F0 | 	shl	local05, #1
21ebc     F2 2E 02 F1 | 	add	local05, objptr
21ec0     14 31 02 F6 | 	mov	local06, local02
21ec4     09 30 66 F0 | 	shl	local06, #9
21ec8     17 31 52 FC | 	wrword	local06, local05
21ecc     01 28 06 F1 | 	add	local02, #1
21ed0     80 28 56 F2 | 	cmps	local02, #128 wc
21ed4     C0 FF 9F CD |  if_b	jmp	#LR__2614
21ed8                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
21ed8     00 28 06 F6 | 	mov	local02, #0
21edc     01 00 00 FF 
21ee0     00 E4 05 F1 | 	add	objptr, ##512
21ee4                 | LR__2615
21ee4     14 2F 02 F6 | 	mov	local05, local02
21ee8     01 2E 66 F0 | 	shl	local05, #1
21eec     F2 2E 02 F1 | 	add	local05, objptr
21ef0     14 31 02 F6 | 	mov	local06, local02
21ef4     0D 30 66 F0 | 	shl	local06, #13
21ef8     17 31 52 FC | 	wrword	local06, local05
21efc     01 28 06 F1 | 	add	local02, #1
21f00     08 28 56 F2 | 	cmps	local02, #8 wc
21f04     DC FF 9F CD |  if_b	jmp	#LR__2615
21f08                 | LR__2616
21f08                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
21f08     08 28 06 F6 | 	mov	local02, #8
21f0c     97 42 48 FB | 	callpa	#(@LR__2620-@LR__2617)>>2,fcache_load_ptr_
21f10                 | LR__2617
21f10     14 2F 02 F6 | 	mov	local05, local02
21f14     01 2E 66 F0 | 	shl	local05, #1
21f18     F2 2E 02 F1 | 	add	local05, objptr
21f1c     14 27 02 F6 | 	mov	local01, local02
21f20     08 26 86 F1 | 	sub	local01, #8
21f24     0B 26 66 F0 | 	shl	local01, #11
21f28     7F 00 00 FF 
21f2c     00 31 06 F6 | 	mov	local06, ##65280
21f30     13 31 82 F1 | 	sub	local06, local01
21f34     17 31 52 FC | 	wrword	local06, local05
21f38     01 28 06 F1 | 	add	local02, #1
21f3c     18 28 16 F2 | 	cmp	local02, #24 wc
21f40     CC FF 9F CD |  if_b	jmp	#LR__2617
21f44                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
21f44     18 28 06 F6 | 	mov	local02, #24
21f48                 | LR__2618
21f48     14 2F 02 F6 | 	mov	local05, local02
21f4c     01 2E 66 F0 | 	shl	local05, #1
21f50     F2 2E 02 F1 | 	add	local05, objptr
21f54     40 00 80 FF 
21f58     17 01 58 FC | 	wrword	##32768, local05
21f5c     01 28 06 F1 | 	add	local02, #1
21f60     81 28 16 F2 | 	cmp	local02, #129 wc
21f64     E0 FF 9F CD |  if_b	jmp	#LR__2618
21f68                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
21f68     81 28 06 F6 | 	mov	local02, #129
21f6c                 | LR__2619
21f6c     14 2F 02 F6 | 	mov	local05, local02
21f70     01 2E 66 F0 | 	shl	local05, #1
21f74     F2 2E 02 F1 | 	add	local05, objptr
21f78     FF 2A 06 F6 | 	mov	local03, #255
21f7c     14 2B 82 F1 | 	sub	local03, local02
21f80     08 2A 66 F0 | 	shl	local03, #8
21f84     17 2B 52 FC | 	wrword	local03, local05
21f88     01 28 06 F1 | 	add	local02, #1
21f8c     00 29 16 F2 | 	cmp	local02, #256 wc
21f90     D8 FF 9F CD |  if_b	jmp	#LR__2619
21f94                 | LR__2620
21f94     3E 00 00 FF 
21f98     EA E5 05 F1 | 	add	objptr, ##32234
21f9c     F2 00 59 FC | 	wrword	#128, objptr
21fa0     52 00 00 FF 
21fa4     C2 E4 85 F1 | 	sub	objptr, ##42178
21fa8                 | ' for i=0 to 7
21fa8     00 28 06 F6 | 	mov	local02, #0
21fac     97 8E 48 FB | 	callpa	#(@LR__2622-@LR__2621)>>2,fcache_load_ptr_
21fb0                 | LR__2621
21fb0     14 2F 02 F6 | 	mov	local05, local02
21fb4     01 2E 66 F0 | 	shl	local05, #1
21fb8     14 2F 02 F1 | 	add	local05, local02
21fbc     03 2E 66 F0 | 	shl	local05, #3
21fc0     14 00 00 FF 
21fc4     38 E5 05 F1 | 	add	objptr, ##10552
21fc8     F2 2E 02 F1 | 	add	local05, objptr
21fcc     00 EE A1 FF 
21fd0     17 01 68 FC | 	wrlong	##1138491392, local05
21fd4     14 2F 02 F6 | 	mov	local05, local02
21fd8     01 2E 66 F0 | 	shl	local05, #1
21fdc     14 2F 02 F1 | 	add	local05, local02
21fe0     03 2E 66 F0 | 	shl	local05, #3
21fe4     F2 2E 02 F1 | 	add	local05, objptr
21fe8     04 2E 06 F1 | 	add	local05, #4
21fec     17 29 42 FC | 	wrbyte	local02, local05
21ff0     14 2F 02 F6 | 	mov	local05, local02
21ff4     01 2E 66 F0 | 	shl	local05, #1
21ff8     14 2F 02 F1 | 	add	local05, local02
21ffc     03 2E 66 F0 | 	shl	local05, #3
22000     F2 2E 02 F1 | 	add	local05, objptr
22004     05 2E 06 F1 | 	add	local05, #5
22008     17 29 42 FC | 	wrbyte	local02, local05
2200c     14 2F 02 F6 | 	mov	local05, local02
22010     01 2E 66 F0 | 	shl	local05, #1
22014     14 2F 02 F1 | 	add	local05, local02
22018     03 2E 66 F0 | 	shl	local05, #3
2201c     F2 2E 02 F1 | 	add	local05, objptr
22020     06 2E 06 F1 | 	add	local05, #6
22024     17 01 58 FC | 	wrword	#0, local05
22028     14 2F 02 F6 | 	mov	local05, local02
2202c     01 2E 66 F0 | 	shl	local05, #1
22030     14 2F 02 F1 | 	add	local05, local02
22034     03 2E 66 F0 | 	shl	local05, #3
22038     F2 2E 02 F1 | 	add	local05, objptr
2203c     08 2E 06 F1 | 	add	local05, #8
22040     00 C0 9F FF 
22044     17 01 68 FC | 	wrlong	##1065353216, local05
22048     14 2F 02 F6 | 	mov	local05, local02
2204c     01 2E 66 F0 | 	shl	local05, #1
22050     14 2F 02 F1 | 	add	local05, local02
22054     03 2E 66 F0 | 	shl	local05, #3
22058     F2 2E 02 F1 | 	add	local05, objptr
2205c     0C 2E 06 F1 | 	add	local05, #12
22060     00 40 A0 FF 
22064     17 01 68 FC | 	wrlong	##1082130432, local05
22068     14 2F 02 F6 | 	mov	local05, local02
2206c     01 2E 66 F0 | 	shl	local05, #1
22070     14 2F 02 F1 | 	add	local05, local02
22074     03 2E 66 F0 | 	shl	local05, #3
22078     F2 2E 02 F1 | 	add	local05, objptr
2207c     10 2E 06 F1 | 	add	local05, #16
22080     17 01 68 FC | 	wrlong	#0, local05
22084     14 2F 02 F6 | 	mov	local05, local02
22088     01 2E 66 F0 | 	shl	local05, #1
2208c     14 2F 02 F1 | 	add	local05, local02
22090     03 2E 66 F0 | 	shl	local05, #3
22094     F2 2E 02 F1 | 	add	local05, objptr
22098     14 2E 06 F1 | 	add	local05, #20
2209c     17 FF 59 FC | 	wrword	#255, local05
220a0     14 2F 02 F6 | 	mov	local05, local02
220a4     01 2E 66 F0 | 	shl	local05, #1
220a8     3D 00 00 FF 
220ac     7C E5 05 F1 | 	add	objptr, ##31612
220b0     F2 2E 02 F1 | 	add	local05, objptr
220b4     17 FF 59 FC | 	wrword	#255, local05
220b8     01 28 06 F1 | 	add	local02, #1
220bc     08 28 56 F2 | 	cmps	local02, #8 wc
220c0     52 00 00 FF 
220c4     B4 E4 85 F1 | 	sub	objptr, ##42164
220c8     E4 FE 9F CD |  if_b	jmp	#LR__2621
220cc                 | LR__2622
220cc     00 6E 20 FF 
220d0     00 30 06 F6 | 	mov	local06, ##1088159744
220d4                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
220d4     03 2E 06 F6 | 	mov	local05, #3
220d8                 | LR__2623
220d8     18 13 02 F6 | 	mov	arg01, local06
220dc     CE C3 1F FF 
220e0     7D 14 06 F6 | 	mov	arg02, ##1065852029
220e4     D4 6C B0 FD | 	call	#__system___float_mul
220e8     FD 30 02 F6 | 	mov	local06, result1
220ec     FA 2F 6E FB | 	djnz	local05, #LR__2623
220f0     00 28 06 F6 | 	mov	local02, #0
220f4                 | LR__2624
220f4     14 2D 02 F6 | 	mov	local04, local02
220f8     02 2C 66 F0 | 	shl	local04, #2
220fc     14 00 00 FF 
22100     D8 E4 05 F1 | 	add	objptr, ##10456
22104     F2 2C 02 F1 | 	add	local04, objptr
22108     16 31 62 FC | 	wrlong	local06, local04
2210c     18 13 02 F6 | 	mov	arg01, local06
22110     CE C3 1F FF 
22114     7D 14 06 F6 | 	mov	arg02, ##1065852029
22118     14 00 00 FF 
2211c     D8 E4 85 F1 | 	sub	objptr, ##10456
22120     98 6C B0 FD | 	call	#__system___float_mul
22124     FD 30 02 F6 | 	mov	local06, result1
22128     01 28 06 F1 | 	add	local02, #1
2212c     0C 28 56 F2 | 	cmps	local02, #12 wc
22130     C0 FF 9F CD |  if_b	jmp	#LR__2624
22134     14 00 00 FF 
22138     08 E5 05 F1 | 	add	objptr, ##10504
2213c     F2 50 6B FC | 	wrlong	#424, objptr
22140     04 E4 05 F1 | 	add	objptr, #4
22144     F2 20 6B FC | 	wrlong	#400, objptr
22148     04 E4 05 F1 | 	add	objptr, #4
2214c     F2 F2 6A FC | 	wrlong	#377, objptr
22150     04 E4 05 F1 | 	add	objptr, #4
22154     F2 C8 6A FC | 	wrlong	#356, objptr
22158     04 E4 05 F1 | 	add	objptr, #4
2215c     F2 A0 6A FC | 	wrlong	#336, objptr
22160     04 E4 05 F1 | 	add	objptr, #4
22164     F2 7A 6A FC | 	wrlong	#317, objptr
22168     04 E4 05 F1 | 	add	objptr, #4
2216c     F2 58 6A FC | 	wrlong	#300, objptr
22170     04 E4 05 F1 | 	add	objptr, #4
22174     F2 36 6A FC | 	wrlong	#283, objptr
22178     04 E4 05 F1 | 	add	objptr, #4
2217c     F2 16 6A FC | 	wrlong	#267, objptr
22180     04 E4 05 F1 | 	add	objptr, #4
22184     F2 F8 69 FC | 	wrlong	#252, objptr
22188     04 E4 05 F1 | 	add	objptr, #4
2218c     F2 DC 69 FC | 	wrlong	#238, objptr
22190     04 E4 05 F1 | 	add	objptr, #4
22194     F2 C0 69 FC | 	wrlong	#224, objptr
22198     3D 00 00 FF 
2219c     8E E5 05 F1 | 	add	objptr, ##31630
221a0     F2 00 59 FC | 	wrword	#128, objptr
221a4     02 E4 85 F1 | 	sub	objptr, #2
221a8     F2 00 59 FC | 	wrword	#128, objptr
221ac     52 00 00 FF 
221b0     C0 E4 85 F1 | 	sub	objptr, ##42176
221b4     A7 F0 03 F6 | 	mov	ptra, fp
221b8     B2 00 A0 FD | 	call	#popregs_
221bc                 | _init_audio_ret
221bc     2D 00 64 FD | 	ret
221c0                 | 
221c0                 | ' 
221c0                 | ' '------------------- Error messages
221c0                 | ' 
221c0                 | ' sub init_error_strings
221c0                 | _init_error_strings
221c0     B2 01 00 FF 
221c4     BB 01 06 F6 | 	mov	_var01, ##@LR__5943
221c8     45 00 00 FF 
221cc     7C E4 05 F1 | 	add	objptr, ##35452
221d0     F2 00 62 FC | 	wrlong	_var01, objptr
221d4     B2 01 00 FF 
221d8     BC 01 06 F6 | 	mov	_var01, ##@LR__5944
221dc     04 E4 05 F1 | 	add	objptr, #4
221e0     F2 00 62 FC | 	wrlong	_var01, objptr
221e4     B2 01 00 FF 
221e8     E0 01 06 F6 | 	mov	_var01, ##@LR__5945
221ec     04 E4 05 F1 | 	add	objptr, #4
221f0     F2 00 62 FC | 	wrlong	_var01, objptr
221f4     B3 01 00 FF 
221f8     00 00 06 F6 | 	mov	_var01, ##@LR__5946
221fc     04 E4 05 F1 | 	add	objptr, #4
22200     F2 00 62 FC | 	wrlong	_var01, objptr
22204     B3 01 00 FF 
22208     19 00 06 F6 | 	mov	_var01, ##@LR__5947
2220c     04 E4 05 F1 | 	add	objptr, #4
22210     F2 00 62 FC | 	wrlong	_var01, objptr
22214     B3 01 00 FF 
22218     34 00 06 F6 | 	mov	_var01, ##@LR__5948
2221c     04 E4 05 F1 | 	add	objptr, #4
22220     F2 00 62 FC | 	wrlong	_var01, objptr
22224     B3 01 00 FF 
22228     55 00 06 F6 | 	mov	_var01, ##@LR__5949
2222c     04 E4 05 F1 | 	add	objptr, #4
22230     F2 00 62 FC | 	wrlong	_var01, objptr
22234     B3 01 00 FF 
22238     82 00 06 F6 | 	mov	_var01, ##@LR__5950
2223c     04 E4 05 F1 | 	add	objptr, #4
22240     F2 00 62 FC | 	wrlong	_var01, objptr
22244     B3 01 00 FF 
22248     AC 00 06 F6 | 	mov	_var01, ##@LR__5951
2224c     04 E4 05 F1 | 	add	objptr, #4
22250     F2 00 62 FC | 	wrlong	_var01, objptr
22254     B3 01 00 FF 
22258     C4 00 06 F6 | 	mov	_var01, ##@LR__5952
2225c     04 E4 05 F1 | 	add	objptr, #4
22260     F2 00 62 FC | 	wrlong	_var01, objptr
22264     B3 01 00 FF 
22268     E4 00 06 F6 | 	mov	_var01, ##@LR__5953
2226c     04 E4 05 F1 | 	add	objptr, #4
22270     F2 00 62 FC | 	wrlong	_var01, objptr
22274     B3 01 00 FF 
22278     FA 00 06 F6 | 	mov	_var01, ##@LR__5954
2227c     04 E4 05 F1 | 	add	objptr, #4
22280     F2 00 62 FC | 	wrlong	_var01, objptr
22284     B3 01 00 FF 
22288     17 01 06 F6 | 	mov	_var01, ##@LR__5955
2228c     04 E4 05 F1 | 	add	objptr, #4
22290     F2 00 62 FC | 	wrlong	_var01, objptr
22294     B3 01 00 FF 
22298     3A 01 06 F6 | 	mov	_var01, ##@LR__5956
2229c     04 E4 05 F1 | 	add	objptr, #4
222a0     F2 00 62 FC | 	wrlong	_var01, objptr
222a4     B3 01 00 FF 
222a8     60 01 06 F6 | 	mov	_var01, ##@LR__5957
222ac     04 E4 05 F1 | 	add	objptr, #4
222b0     F2 00 62 FC | 	wrlong	_var01, objptr
222b4     B3 01 00 FF 
222b8     7B 01 06 F6 | 	mov	_var01, ##@LR__5958
222bc     04 E4 05 F1 | 	add	objptr, #4
222c0     F2 00 62 FC | 	wrlong	_var01, objptr
222c4     B3 01 00 FF 
222c8     8B 01 06 F6 | 	mov	_var01, ##@LR__5959
222cc     04 E4 05 F1 | 	add	objptr, #4
222d0     F2 00 62 FC | 	wrlong	_var01, objptr
222d4     B3 01 00 FF 
222d8     9A 01 06 F6 | 	mov	_var01, ##@LR__5960
222dc     04 E4 05 F1 | 	add	objptr, #4
222e0     F2 00 62 FC | 	wrlong	_var01, objptr
222e4     B3 01 00 FF 
222e8     B4 01 06 F6 | 	mov	_var01, ##@LR__5961
222ec     04 E4 05 F1 | 	add	objptr, #4
222f0     F2 00 62 FC | 	wrlong	_var01, objptr
222f4     B3 01 00 FF 
222f8     C5 01 06 F6 | 	mov	_var01, ##@LR__5962
222fc     04 E4 05 F1 | 	add	objptr, #4
22300     F2 00 62 FC | 	wrlong	_var01, objptr
22304     B3 01 00 FF 
22308     DC 01 06 F6 | 	mov	_var01, ##@LR__5963
2230c     04 E4 05 F1 | 	add	objptr, #4
22310     F2 00 62 FC | 	wrlong	_var01, objptr
22314     B3 01 00 FF 
22318     EF 01 06 F6 | 	mov	_var01, ##@LR__5964
2231c     04 E4 05 F1 | 	add	objptr, #4
22320     F2 00 62 FC | 	wrlong	_var01, objptr
22324     B3 01 00 FF 
22328     FE 01 06 F6 | 	mov	_var01, ##@LR__5965
2232c     04 E4 05 F1 | 	add	objptr, #4
22330     F2 00 62 FC | 	wrlong	_var01, objptr
22334     B4 01 00 FF 
22338     1A 00 06 F6 | 	mov	_var01, ##@LR__5966
2233c     04 E4 05 F1 | 	add	objptr, #4
22340     F2 00 62 FC | 	wrlong	_var01, objptr
22344     B4 01 00 FF 
22348     2A 00 06 F6 | 	mov	_var01, ##@LR__5967
2234c     04 E4 05 F1 | 	add	objptr, #4
22350     F2 00 62 FC | 	wrlong	_var01, objptr
22354     B4 01 00 FF 
22358     3A 00 06 F6 | 	mov	_var01, ##@LR__5968
2235c     04 E4 05 F1 | 	add	objptr, #4
22360     F2 00 62 FC | 	wrlong	_var01, objptr
22364     B4 01 00 FF 
22368     6D 00 06 F6 | 	mov	_var01, ##@LR__5969
2236c     04 E4 05 F1 | 	add	objptr, #4
22370     F2 00 62 FC | 	wrlong	_var01, objptr
22374     B4 01 00 FF 
22378     88 00 06 F6 | 	mov	_var01, ##@LR__5970
2237c     04 E4 05 F1 | 	add	objptr, #4
22380     F2 00 62 FC | 	wrlong	_var01, objptr
22384     B4 01 00 FF 
22388     9D 00 06 F6 | 	mov	_var01, ##@LR__5971
2238c     04 E4 05 F1 | 	add	objptr, #4
22390     F2 00 62 FC | 	wrlong	_var01, objptr
22394     B4 01 00 FF 
22398     A9 00 06 F6 | 	mov	_var01, ##@LR__5972
2239c     04 E4 05 F1 | 	add	objptr, #4
223a0     F2 00 62 FC | 	wrlong	_var01, objptr
223a4     B4 01 00 FF 
223a8     BA 00 06 F6 | 	mov	_var01, ##@LR__5973
223ac     04 E4 05 F1 | 	add	objptr, #4
223b0     F2 00 62 FC | 	wrlong	_var01, objptr
223b4     B4 01 00 FF 
223b8     CA 00 06 F6 | 	mov	_var01, ##@LR__5974
223bc     04 E4 05 F1 | 	add	objptr, #4
223c0     F2 00 62 FC | 	wrlong	_var01, objptr
223c4     B4 01 00 FF 
223c8     E5 00 06 F6 | 	mov	_var01, ##@LR__5975
223cc     04 E4 05 F1 | 	add	objptr, #4
223d0     F2 00 62 FC | 	wrlong	_var01, objptr
223d4     B4 01 00 FF 
223d8     F5 00 06 F6 | 	mov	_var01, ##@LR__5976
223dc     04 E4 05 F1 | 	add	objptr, #4
223e0     F2 00 62 FC | 	wrlong	_var01, objptr
223e4     B4 01 00 FF 
223e8     03 01 06 F6 | 	mov	_var01, ##@LR__5977
223ec     04 E4 05 F1 | 	add	objptr, #4
223f0     F2 00 62 FC | 	wrlong	_var01, objptr
223f4     B4 01 00 FF 
223f8     1D 01 06 F6 | 	mov	_var01, ##@LR__5978
223fc     04 E4 05 F1 | 	add	objptr, #4
22400     F2 00 62 FC | 	wrlong	_var01, objptr
22404     B4 01 00 FF 
22408     50 01 06 F6 | 	mov	_var01, ##@LR__5979
2240c     04 E4 05 F1 | 	add	objptr, #4
22410     F2 00 62 FC | 	wrlong	_var01, objptr
22414     B4 01 00 FF 
22418     68 01 06 F6 | 	mov	_var01, ##@LR__5980
2241c     04 E4 05 F1 | 	add	objptr, #4
22420     F2 00 62 FC | 	wrlong	_var01, objptr
22424     B4 01 00 FF 
22428     83 01 06 F6 | 	mov	_var01, ##@LR__5981
2242c     04 E4 05 F1 | 	add	objptr, #4
22430     F2 00 62 FC | 	wrlong	_var01, objptr
22434     B4 01 00 FF 
22438     A0 01 06 F6 | 	mov	_var01, ##@LR__5982
2243c     04 E4 05 F1 | 	add	objptr, #4
22440     F2 00 62 FC | 	wrlong	_var01, objptr
22444     B4 01 00 FF 
22448     B9 01 06 F6 | 	mov	_var01, ##@LR__5983
2244c     04 E4 05 F1 | 	add	objptr, #4
22450     F2 00 62 FC | 	wrlong	_var01, objptr
22454     B4 01 00 FF 
22458     D8 01 06 F6 | 	mov	_var01, ##@LR__5984
2245c     04 E4 05 F1 | 	add	objptr, #4
22460     F2 00 62 FC | 	wrlong	_var01, objptr
22464     B4 01 00 FF 
22468     E6 01 06 F6 | 	mov	_var01, ##@LR__5985
2246c     04 E4 05 F1 | 	add	objptr, #4
22470     F2 00 62 FC | 	wrlong	_var01, objptr
22474     B5 01 00 FF 
22478     13 00 06 F6 | 	mov	_var01, ##@LR__5986
2247c     04 E4 05 F1 | 	add	objptr, #4
22480     F2 00 62 FC | 	wrlong	_var01, objptr
22484     B5 01 00 FF 
22488     20 00 06 F6 | 	mov	_var01, ##@LR__5987
2248c     04 E4 05 F1 | 	add	objptr, #4
22490     F2 00 62 FC | 	wrlong	_var01, objptr
22494     B5 01 00 FF 
22498     34 00 06 F6 | 	mov	_var01, ##@LR__5988
2249c     04 E4 05 F1 | 	add	objptr, #4
224a0     F2 00 62 FC | 	wrlong	_var01, objptr
224a4     B5 01 00 FF 
224a8     58 00 06 F6 | 	mov	_var01, ##@LR__5989
224ac     04 E4 05 F1 | 	add	objptr, #4
224b0     F2 00 62 FC | 	wrlong	_var01, objptr
224b4     B5 01 00 FF 
224b8     6F 00 06 F6 | 	mov	_var01, ##@LR__5990
224bc     04 E4 05 F1 | 	add	objptr, #4
224c0     F2 00 62 FC | 	wrlong	_var01, objptr
224c4     B5 01 00 FF 
224c8     82 00 06 F6 | 	mov	_var01, ##@LR__5991
224cc     04 E4 05 F1 | 	add	objptr, #4
224d0     F2 00 62 FC | 	wrlong	_var01, objptr
224d4     B5 01 00 FF 
224d8     99 00 06 F6 | 	mov	_var01, ##@LR__5992
224dc     04 E4 05 F1 | 	add	objptr, #4
224e0     F2 00 62 FC | 	wrlong	_var01, objptr
224e4     B5 01 00 FF 
224e8     B2 00 06 F6 | 	mov	_var01, ##@LR__5993
224ec     04 E4 05 F1 | 	add	objptr, #4
224f0     F2 00 62 FC | 	wrlong	_var01, objptr
224f4     B5 01 00 FF 
224f8     D4 00 06 F6 | 	mov	_var01, ##@LR__5994
224fc     04 E4 05 F1 | 	add	objptr, #4
22500     F2 00 62 FC | 	wrlong	_var01, objptr
22504     B5 01 00 FF 
22508     E7 00 06 F6 | 	mov	_var01, ##@LR__5995
2250c     04 E4 05 F1 | 	add	objptr, #4
22510     F2 00 62 FC | 	wrlong	_var01, objptr
22514     B5 01 00 FF 
22518     F7 00 06 F6 | 	mov	_var01, ##@LR__5996
2251c     04 E4 05 F1 | 	add	objptr, #4
22520     F2 00 62 FC | 	wrlong	_var01, objptr
22524     B5 01 00 FF 
22528     0F 01 06 F6 | 	mov	_var01, ##@LR__5997
2252c     04 E4 05 F1 | 	add	objptr, #4
22530     F2 00 62 FC | 	wrlong	_var01, objptr
22534     B5 01 00 FF 
22538     26 01 06 F6 | 	mov	_var01, ##@LR__5998
2253c     04 E4 05 F1 | 	add	objptr, #4
22540     F2 00 62 FC | 	wrlong	_var01, objptr
22544     45 00 00 FF 
22548     58 E5 85 F1 | 	sub	objptr, ##35672
2254c                 | _init_error_strings_ret
2254c     2D 00 64 FD | 	ret
22550                 | 
22550                 | '         
22550                 | ' sub printerror(err as integer, linenum=0 as integer)
22550                 | _printerror
22550     02 4A 05 F6 | 	mov	COUNT_, #2
22554     A8 00 A0 FD | 	call	#pushregs_
22558     09 27 02 F6 | 	mov	local01, arg01
2255c     0A 29 02 F6 | 	mov	local02, arg02
22560     B5 01 00 FF 
22564     33 13 06 F6 | 	mov	arg01, ##@LR__5999
22568     10 21 B0 FD | 	call	#_hg010b_spin2_write
2256c     13 13 02 F6 | 	mov	arg01, local01
22570     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22574     FD 12 02 F6 | 	mov	arg01, result1
22578     00 21 B0 FD | 	call	#_hg010b_spin2_write
2257c     B5 01 00 FF 
22580     3A 13 06 F6 | 	mov	arg01, ##@LR__6000
22584     F4 20 B0 FD | 	call	#_hg010b_spin2_write
22588     02 26 66 F0 | 	shl	local01, #2
2258c     45 00 00 FF 
22590     7C E4 05 F1 | 	add	objptr, ##35452
22594     F2 26 02 F1 | 	add	local01, objptr
22598     13 13 02 FB | 	rdlong	arg01, local01
2259c     45 00 00 FF 
225a0     7C E4 85 F1 | 	sub	objptr, ##35452
225a4     D4 20 B0 FD | 	call	#_hg010b_spin2_write
225a8                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
225a8                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
225a8     01 28 56 F2 | 	cmps	local02, #1 wc
225ac     24 00 90 CD |  if_b	jmp	#LR__2630
225b0     B5 01 00 FF 
225b4     3E 13 06 F6 | 	mov	arg01, ##@LR__6001
225b8     C0 20 B0 FD | 	call	#_hg010b_spin2_write
225bc     14 13 02 F6 | 	mov	arg01, local02
225c0     5C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
225c4     FD 12 02 F6 | 	mov	arg01, result1
225c8                 | ' 
225c8                 | ' write(text)
225c8     B0 20 B0 FD | 	call	#_hg010b_spin2_write
225cc                 | ' crlf
225cc     AC 25 B0 FD | 	call	#_hg010b_spin2_crlf
225d0     10 00 90 FD | 	jmp	#LR__2631
225d4                 | LR__2630
225d4     B5 01 00 FF 
225d8     48 13 06 F6 | 	mov	arg01, ##@LR__6002
225dc                 | ' 
225dc                 | ' write(text)
225dc     9C 20 B0 FD | 	call	#_hg010b_spin2_write
225e0                 | ' crlf
225e0     98 25 B0 FD | 	call	#_hg010b_spin2_crlf
225e4                 | LR__2631
225e4     A7 F0 03 F6 | 	mov	ptra, fp
225e8     B2 00 A0 FD | 	call	#popregs_
225ec                 | _printerror_ret
225ec     2D 00 64 FD | 	ret
225f0                 | 
225f0                 | ' 
225f0                 | ' '' ------------------------------- Hardware start/stop/initialization 
225f0                 | ' 
225f0                 | ' sub startpsram
225f0                 | _startpsram
225f0     00 12 06 F6 | 	mov	arg01, #0
225f4     0A 14 C6 F9 | 	decod	arg02, #10
225f8     0B 16 06 F6 | 	mov	arg03, #11
225fc     07 18 06 F6 | 	mov	arg04, #7
22600     0B 00 00 FF 
22604     CC E4 05 F1 | 	add	objptr, ##5836
22608     80 2A B0 FD | 	call	#_psram_spin2_startx
2260c     2B 00 00 FF 
22610     3C E5 05 F1 | 	add	objptr, ##22332
22614     F2 FA 61 FC | 	wrlong	result1, objptr
22618                 | '     return $7FF00 + cog*12
22618     0C E4 05 F1 | 	add	objptr, #12
2261c     FF 03 80 FF 
22620     F2 00 6A FC | 	wrlong	##524032, objptr
22624     37 00 00 FF 
22628     14 E4 85 F1 | 	sub	objptr, ##28180
2262c                 | _startpsram_ret
2262c     2D 00 64 FD | 	ret
22630                 | 
22630                 | ' 
22630                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
22630                 | _startvideo
22630     01 4A 05 F6 | 	mov	COUNT_, #1
22634     A8 00 A0 FD | 	call	#pushregs_
22638     37 00 00 FF 
2263c     14 E4 05 F1 | 	add	objptr, ##28180
22640     F2 18 02 FB | 	rdlong	arg04, objptr
22644     37 00 00 FF 
22648     14 E4 85 F1 | 	sub	objptr, ##28180
2264c     0A 13 02 F6 | 	mov	arg01, arg02
22650     0C 15 02 F6 | 	mov	arg02, arg04
22654     1C 08 B0 FD | 	call	#_hg010b_spin2_start
22658     37 00 00 FF 
2265c     00 E4 05 F1 | 	add	objptr, ##28160
22660     F2 FA 61 FC | 	wrlong	result1, objptr
22664                 | ' 
22664                 | ' videocog=v.start(pin,mbox)
22664                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
22664     00 26 06 F6 | 	mov	local01, #0
22668     2B 00 00 FF 
2266c     34 E5 85 F1 | 	sub	objptr, ##22324
22670                 | LR__2640
22670     13 13 02 F6 | 	mov	arg01, local01
22674     00 28 00 FF 
22678     00 14 06 F6 | 	mov	arg02, ##5242880
2267c     64 2E B0 FD | 	call	#_psram_spin2_setQos
22680     01 26 06 F1 | 	add	local01, #1
22684     08 26 56 F2 | 	cmps	local01, #8 wc
22688     E4 FF 9F CD |  if_b	jmp	#LR__2640
2268c     2B 00 00 FF 
22690     34 E5 05 F1 | 	add	objptr, ##22324
22694     F2 12 02 FB | 	rdlong	arg01, objptr
22698     7A 00 02 FF 
2269c     00 14 06 F6 | 	mov	arg02, ##67171328
226a0     2B 00 00 FF 
226a4     34 E5 85 F1 | 	sub	objptr, ##22324
226a8     38 2E B0 FD | 	call	#_psram_spin2_setQos
226ac     0B 00 00 FF 
226b0     CC E4 85 F1 | 	sub	objptr, ##5836
226b4                 | ' psram.setQoS(videocog, $0400f400) 
226b4                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
226b4     F2 14 02 F6 | 	mov	arg02, objptr
226b8     00 F0 04 FF 
226bc     00 14 46 F5 | 	or	arg02, ##165675008
226c0     00 16 06 F6 | 	mov	arg03, #0
226c4     00 18 06 F6 | 	mov	arg04, #0
226c8     00 12 06 F6 | 	mov	arg01, #0
226cc     18 43 B0 FD | 	call	#__system___basic_open
226d0                 | ' return videocog
226d0     37 00 00 FF 
226d4     00 E4 05 F1 | 	add	objptr, ##28160
226d8     F2 FA 01 FB | 	rdlong	result1, objptr
226dc     37 00 00 FF 
226e0     00 E4 85 F1 | 	sub	objptr, ##28160
226e4     A7 F0 03 F6 | 	mov	ptra, fp
226e8     B2 00 A0 FD | 	call	#popregs_
226ec                 | _startvideo_ret
226ec     2D 00 64 FD | 	ret
226f0                 | 
226f0                 | ' 
226f0                 | ' 
226f0                 | ' 
226f0                 | ' '' ------------------------------- Convenient psram peek/poke
226f0                 | ' 
226f0                 | ' sub pslpoke(addr as ulong,value as ulong)
226f0                 | _pslpoke
226f0     00 4A 05 F6 | 	mov	COUNT_, #0
226f4     A8 00 A0 FD | 	call	#pushregs_
226f8     08 F0 07 F1 | 	add	ptra, #8
226fc     A7 12 62 FC | 	wrlong	arg01, fp
22700     04 4E 05 F1 | 	add	fp, #4
22704     A7 14 62 FC | 	wrlong	arg02, fp
22708     A7 12 02 F6 | 	mov	arg01, fp
2270c     04 4E 85 F1 | 	sub	fp, #4
22710     A7 14 02 FB | 	rdlong	arg02, fp
22714     04 16 06 F6 | 	mov	arg03, #4
22718     0B 00 00 FF 
2271c     CC E4 05 F1 | 	add	objptr, ##5836
22720     30 2C B0 FD | 	call	#_psram_spin2_write
22724     0B 00 00 FF 
22728     CC E4 85 F1 | 	sub	objptr, ##5836
2272c     A7 F0 03 F6 | 	mov	ptra, fp
22730     B2 00 A0 FD | 	call	#popregs_
22734                 | _pslpoke_ret
22734     2D 00 64 FD | 	ret
22738                 | 
22738                 | ' 
22738                 | ' sub psdpoke(addr as ulong,value as ulong)
22738                 | _psdpoke
22738     00 4A 05 F6 | 	mov	COUNT_, #0
2273c     A8 00 A0 FD | 	call	#pushregs_
22740     08 F0 07 F1 | 	add	ptra, #8
22744     A7 12 62 FC | 	wrlong	arg01, fp
22748     04 4E 05 F1 | 	add	fp, #4
2274c     A7 14 62 FC | 	wrlong	arg02, fp
22750     A7 12 02 F6 | 	mov	arg01, fp
22754     04 4E 85 F1 | 	sub	fp, #4
22758     A7 14 02 FB | 	rdlong	arg02, fp
2275c     02 16 06 F6 | 	mov	arg03, #2
22760     0B 00 00 FF 
22764     CC E4 05 F1 | 	add	objptr, ##5836
22768     E8 2B B0 FD | 	call	#_psram_spin2_write
2276c     0B 00 00 FF 
22770     CC E4 85 F1 | 	sub	objptr, ##5836
22774     A7 F0 03 F6 | 	mov	ptra, fp
22778     B2 00 A0 FD | 	call	#popregs_
2277c                 | _psdpoke_ret
2277c     2D 00 64 FD | 	ret
22780                 | 
22780                 | ' 
22780                 | ' sub pspoke(addr as ulong,value as ulong)
22780                 | _pspoke
22780     00 4A 05 F6 | 	mov	COUNT_, #0
22784     A8 00 A0 FD | 	call	#pushregs_
22788     08 F0 07 F1 | 	add	ptra, #8
2278c     A7 12 62 FC | 	wrlong	arg01, fp
22790     04 4E 05 F1 | 	add	fp, #4
22794     A7 14 62 FC | 	wrlong	arg02, fp
22798     A7 12 02 F6 | 	mov	arg01, fp
2279c     04 4E 85 F1 | 	sub	fp, #4
227a0     A7 14 02 FB | 	rdlong	arg02, fp
227a4     01 16 06 F6 | 	mov	arg03, #1
227a8     0B 00 00 FF 
227ac     CC E4 05 F1 | 	add	objptr, ##5836
227b0     A0 2B B0 FD | 	call	#_psram_spin2_write
227b4     0B 00 00 FF 
227b8     CC E4 85 F1 | 	sub	objptr, ##5836
227bc     A7 F0 03 F6 | 	mov	ptra, fp
227c0     B2 00 A0 FD | 	call	#popregs_
227c4                 | _pspoke_ret
227c4     2D 00 64 FD | 	ret
227c8                 | 
227c8                 | ' 
227c8                 | ' function pspeek(adr as ulong) as ubyte
227c8                 | _pspeek
227c8     00 4A 05 F6 | 	mov	COUNT_, #0
227cc     A8 00 A0 FD | 	call	#pushregs_
227d0     0C F0 07 F1 | 	add	ptra, #12
227d4     04 4E 05 F1 | 	add	fp, #4
227d8     A7 12 62 FC | 	wrlong	arg01, fp
227dc     04 4E 05 F1 | 	add	fp, #4
227e0     A7 12 02 F6 | 	mov	arg01, fp
227e4     04 4E 85 F1 | 	sub	fp, #4
227e8     A7 14 02 FB | 	rdlong	arg02, fp
227ec     04 4E 85 F1 | 	sub	fp, #4
227f0     01 16 06 F6 | 	mov	arg03, #1
227f4     0B 00 00 FF 
227f8     CC E4 05 F1 | 	add	objptr, ##5836
227fc     B8 2A B0 FD | 	call	#_psram_spin2_read1
22800     0B 00 00 FF 
22804     CC E4 85 F1 | 	sub	objptr, ##5836
22808                 | ' psram.read1(varptr(res),adr,1)
22808                 | ' return res
22808     08 4E 05 F1 | 	add	fp, #8
2280c     A7 FA C1 FA | 	rdbyte	result1, fp
22810     08 4E 85 F1 | 	sub	fp, #8
22814     A7 F0 03 F6 | 	mov	ptra, fp
22818     B2 00 A0 FD | 	call	#popregs_
2281c                 | _pspeek_ret
2281c     2D 00 64 FD | 	ret
22820                 | 
22820                 | ' 
22820                 | ' function pslpeek(adr as ulong) as ulong
22820                 | _pslpeek
22820     00 4A 05 F6 | 	mov	COUNT_, #0
22824     A8 00 A0 FD | 	call	#pushregs_
22828     0C F0 07 F1 | 	add	ptra, #12
2282c     04 4E 05 F1 | 	add	fp, #4
22830     A7 12 62 FC | 	wrlong	arg01, fp
22834     04 4E 05 F1 | 	add	fp, #4
22838     A7 12 02 F6 | 	mov	arg01, fp
2283c     04 4E 85 F1 | 	sub	fp, #4
22840     A7 14 02 FB | 	rdlong	arg02, fp
22844     04 4E 85 F1 | 	sub	fp, #4
22848     04 16 06 F6 | 	mov	arg03, #4
2284c     0B 00 00 FF 
22850     CC E4 05 F1 | 	add	objptr, ##5836
22854     60 2A B0 FD | 	call	#_psram_spin2_read1
22858     0B 00 00 FF 
2285c     CC E4 85 F1 | 	sub	objptr, ##5836
22860                 | ' psram.read1(varptr(res),adr,4)
22860                 | ' return res
22860     08 4E 05 F1 | 	add	fp, #8
22864     A7 FA 01 FB | 	rdlong	result1, fp
22868     08 4E 85 F1 | 	sub	fp, #8
2286c     A7 F0 03 F6 | 	mov	ptra, fp
22870     B2 00 A0 FD | 	call	#popregs_
22874                 | _pslpeek_ret
22874     2D 00 64 FD | 	ret
22878                 | 
22878                 | ' 
22878                 | ' function psdpeek(adr as ulong) as ulong
22878                 | _psdpeek
22878     00 4A 05 F6 | 	mov	COUNT_, #0
2287c     A8 00 A0 FD | 	call	#pushregs_
22880     0C F0 07 F1 | 	add	ptra, #12
22884     04 4E 05 F1 | 	add	fp, #4
22888     A7 12 62 FC | 	wrlong	arg01, fp
2288c     04 4E 05 F1 | 	add	fp, #4
22890     A7 12 02 F6 | 	mov	arg01, fp
22894     04 4E 85 F1 | 	sub	fp, #4
22898     A7 14 02 FB | 	rdlong	arg02, fp
2289c     04 4E 85 F1 | 	sub	fp, #4
228a0     02 16 06 F6 | 	mov	arg03, #2
228a4     0B 00 00 FF 
228a8     CC E4 05 F1 | 	add	objptr, ##5836
228ac     08 2A B0 FD | 	call	#_psram_spin2_read1
228b0     0B 00 00 FF 
228b4     CC E4 85 F1 | 	sub	objptr, ##5836
228b8                 | ' psram.read1(varptr(res),adr,2)
228b8                 | ' return res
228b8     08 4E 05 F1 | 	add	fp, #8
228bc     A7 FA E1 FA | 	rdword	result1, fp
228c0     08 4E 85 F1 | 	sub	fp, #8
228c4     A7 F0 03 F6 | 	mov	ptra, fp
228c8     B2 00 A0 FD | 	call	#popregs_
228cc                 | _psdpeek_ret
228cc     2D 00 64 FD | 	ret
228d0                 | 
228d0                 | ' 
228d0                 | ' '' ------------------------------- USB keyboard scan to char translator
228d0                 | ' 
228d0                 | ' function scantochar(key)
228d0                 | _scantochar
228d0                 | ' 
228d0                 | ' select case (key shr 8) and 255
228d0     09 01 02 F6 | 	mov	_var01, arg01
228d4     08 00 C6 F0 | 	sar	_var01, #8
228d8     FF 00 0E F5 | 	and	_var01, #255 wz
228dc     24 00 90 AD |  if_e	jmp	#LR__2650
228e0     02 00 0E F2 | 	cmp	_var01, #2 wz
228e4     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
228e8     30 00 90 AD |  if_e	jmp	#LR__2651
228ec     40 00 0E F2 | 	cmp	_var01, #64 wz
228f0     44 00 90 AD |  if_e	jmp	#LR__2652
228f4     42 00 0E F2 | 	cmp	_var01, #66 wz
228f8     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
228fc     70 00 90 5D |  if_ne	jmp	#LR__2654
22900     50 00 90 FD | 	jmp	#LR__2653
22904                 | LR__2650
22904     09 FB 01 F6 | 	mov	result1, arg01
22908     7F FA 05 F5 | 	and	result1, #127
2290c     02 FA 65 F0 | 	shl	result1, #2
22910     F5 FA 01 F1 | 	add	result1, ptr__dat__
22914     FD FA C1 FA | 	rdbyte	result1, result1
22918     54 00 90 FD | 	jmp	#_scantochar_ret
2291c                 | LR__2651
2291c     09 FB 01 F6 | 	mov	result1, arg01
22920     7F FA 05 F5 | 	and	result1, #127
22924     02 FA 65 F0 | 	shl	result1, #2
22928     01 FA 05 F1 | 	add	result1, #1
2292c     F5 FA 01 F1 | 	add	result1, ptr__dat__
22930     FD FA C1 FA | 	rdbyte	result1, result1
22934     38 00 90 FD | 	jmp	#_scantochar_ret
22938                 | LR__2652
22938     09 FB 01 F6 | 	mov	result1, arg01
2293c     7F FA 05 F5 | 	and	result1, #127
22940     02 FA 65 F0 | 	shl	result1, #2
22944     02 FA 05 F1 | 	add	result1, #2
22948     F5 FA 01 F1 | 	add	result1, ptr__dat__
2294c     FD FA C1 FA | 	rdbyte	result1, result1
22950     1C 00 90 FD | 	jmp	#_scantochar_ret
22954                 | LR__2653
22954     09 FB 01 F6 | 	mov	result1, arg01
22958     7F FA 05 F5 | 	and	result1, #127
2295c     02 FA 65 F0 | 	shl	result1, #2
22960     03 FA 05 F1 | 	add	result1, #3
22964     F5 FA 01 F1 | 	add	result1, ptr__dat__
22968     FD FA C1 FA | 	rdbyte	result1, result1
2296c     00 00 90 FD | 	jmp	#_scantochar_ret
22970                 | LR__2654
22970                 | _scantochar_ret
22970     2D 00 64 FD | 	ret
22974                 | 
22974                 | _program
22974     01 4A 05 F6 | 	mov	COUNT_, #1
22978     A8 00 A0 FD | 	call	#pushregs_
2297c     70 FC BF FD | 	call	#_startpsram
22980     40 12 06 F6 | 	mov	arg01, #64
22984     00 14 06 F6 | 	mov	arg02, #0
22988     00 16 06 F6 | 	mov	arg03, #0
2298c     A0 FC BF FD | 	call	#_startvideo
22990     37 00 00 FF 
22994     14 E4 05 F1 | 	add	objptr, ##28180
22998     F2 12 02 FB | 	rdlong	arg01, objptr
2299c     00 14 06 F6 | 	mov	arg02, #0
229a0     FB 03 00 FF 
229a4     00 17 06 F6 | 	mov	arg03, ##521984
229a8     2B 00 00 FF 
229ac     48 E5 85 F1 | 	sub	objptr, ##22344
229b0     28 2F B0 FD | 	call	#_audio096_spin2_start
229b4     FE 16 02 F6 | 	mov	arg03, result2
229b8     2B 00 00 FF 
229bc     30 E5 05 F1 | 	add	objptr, ##22320
229c0     F2 FA 61 FC | 	wrlong	result1, objptr
229c4     14 E4 05 F1 | 	add	objptr, #20
229c8     F2 16 62 FC | 	wrlong	arg03, objptr
229cc     37 00 00 FF 
229d0     10 E4 85 F1 | 	sub	objptr, ##28176
229d4     32 12 06 F6 | 	mov	arg01, #50
229d8     58 38 B0 FD | 	call	#__system___waitms
229dc     37 00 00 FF 
229e0     10 E4 05 F1 | 	add	objptr, ##28176
229e4     F2 12 02 FB | 	rdlong	arg01, objptr
229e8     37 00 00 FF 
229ec     10 E4 85 F1 | 	sub	objptr, ##28176
229f0     14 12 06 F1 | 	add	arg01, #20
229f4     20 00 80 FF 
229f8     09 01 58 FC | 	wrword	##16384, arg01
229fc     EC 2B B0 FD | 	call	#_usbnew_spin2_start
22a00     37 00 00 FF 
22a04     04 E4 05 F1 | 	add	objptr, ##28164
22a08     F2 FA 61 FC | 	wrlong	result1, objptr
22a0c                 | '   mouse_limits[0] := xlim
22a0c     0F 00 00 FF 
22a10     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
22a14     01 00 80 FF 
22a18     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
22a1c                 | '   mouse_limits[1] := ylim
22a1c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
22a20     01 00 80 FF 
22a24     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
22a28     36 00 00 FF 
22a2c     F3 E4 85 F1 | 	sub	objptr, ##27891
22a30     F2 12 02 F6 | 	mov	arg01, objptr
22a34     11 E5 85 F1 | 	sub	objptr, #273
22a38     C4 12 06 F1 | 	add	arg01, #196
22a3c                 | '   mouse_outptr := ptr
22a3c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
22a40     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
22a44     0F 00 00 FF 
22a48     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
22a4c     16 00 00 FF 
22a50     CA EA 05 F1 | 	add	ptr__dat__, ##11466
22a54     F5 14 02 F6 | 	mov	arg02, ptr__dat__
22a58     16 00 00 FF 
22a5c     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
22a60     10 12 06 F6 | 	mov	arg01, #16
22a64     A4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
22a68     10 12 06 F6 | 	mov	arg01, #16
22a6c     20 14 06 F6 | 	mov	arg02, #32
22a70     20 16 06 F6 | 	mov	arg03, #32
22a74     24 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
22a78     09 12 C6 F9 | 	decod	arg01, #9
22a7c     2C 15 06 F6 | 	mov	arg02, #300
22a80     C0 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
22a84     F2 16 02 F6 | 	mov	arg03, objptr
22a88     50 00 00 FF 
22a8c     44 E5 05 F1 | 	add	objptr, ##41284
22a90     F2 14 02 F6 | 	mov	arg02, objptr
22a94     0A 17 62 FC | 	wrlong	arg03, arg02
22a98     04 14 06 F1 | 	add	arg02, #4
22a9c     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
22aa0     EF 14 02 F6 | 	mov	arg02, entryptr__
22aa4     1E FA 05 F6 | 	mov	result1, #30
22aa8     28 E4 61 FD | 	setq	objptr
22aac     0A FB F1 FC | 	coginit	result1, arg02 wc
22ab0     01 FA 65 C6 |  if_b	neg	result1, #1
22ab4     04 E4 85 F1 | 	sub	objptr, #4
22ab8     F2 FA 61 FC | 	wrlong	result1, objptr
22abc     01 00 00 FF 
22ac0     54 E5 05 F1 | 	add	objptr, ##852
22ac4     F2 00 68 FC | 	wrlong	#0, objptr
22ac8     1B 00 00 FF 
22acc     60 E4 85 F1 | 	sub	objptr, ##13920
22ad0     F2 04 68 FC | 	wrlong	#2, objptr
22ad4     04 E4 05 F1 | 	add	objptr, #4
22ad8     F2 26 69 FC | 	wrlong	#147, objptr
22adc     04 E4 05 F1 | 	add	objptr, #4
22ae0     F2 34 69 FC | 	wrlong	#154, objptr
22ae4     04 E4 05 F1 | 	add	objptr, #4
22ae8     F2 08 68 FC | 	wrlong	#4, objptr
22aec     04 E4 85 F1 | 	sub	objptr, #4
22af0     F2 16 02 FB | 	rdlong	arg03, objptr
22af4     14 E4 85 F1 | 	sub	objptr, #20
22af8     F2 16 62 FC | 	wrlong	arg03, objptr
22afc     04 E4 05 F1 | 	add	objptr, #4
22b00     F2 00 68 FC | 	wrlong	#0, objptr
22b04     04 E4 05 F1 | 	add	objptr, #4
22b08     F2 00 68 FC | 	wrlong	#0, objptr
22b0c     19 00 00 FF 
22b10     0C E5 05 F1 | 	add	objptr, ##13068
22b14     F2 02 68 FC | 	wrlong	#1, objptr
22b18     01 00 00 FF 
22b1c     60 E5 05 F1 | 	add	objptr, ##864
22b20     F2 00 68 FC | 	wrlong	#0, objptr
22b24     01 00 00 FF 
22b28     00 EA 05 F1 | 	add	ptr__dat__, ##512
22b2c     08 E4 05 F1 | 	add	objptr, #8
22b30     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
22b34     04 E4 85 F1 | 	sub	objptr, #4
22b38     03 00 80 FF 
22b3c     F2 3C 69 FC | 	wrlong	##1694, objptr
22b40     0D 00 00 FF 
22b44     3C E4 85 F1 | 	sub	objptr, ##6716
22b48     F2 18 68 FC | 	wrlong	#12, objptr
22b4c     45 00 00 FF 
22b50     64 E4 85 F1 | 	sub	objptr, ##35428
22b54     01 00 00 FF 
22b58     00 EA 85 F1 | 	sub	ptr__dat__, ##512
22b5c     08 D9 BF FD | 	call	#_init_commands
22b60     5C F6 BF FD | 	call	#_init_error_strings
22b64     E0 ED BF FD | 	call	#_init_audio
22b68     C0 28 BF FD | 	call	#_do_new
22b6c     37 00 00 FF 
22b70     3C E4 05 F1 | 	add	objptr, ##28220
22b74     F2 12 02 FB | 	rdlong	arg01, objptr
22b78     04 E4 85 F1 | 	sub	objptr, #4
22b7c     F2 14 02 FB | 	rdlong	arg02, objptr
22b80     37 00 00 FF 
22b84     38 E4 85 F1 | 	sub	objptr, ##28216
22b88     30 17 B0 FD | 	call	#_hg010b_spin2_cls
22b8c     37 00 00 FF 
22b90     40 E4 05 F1 | 	add	objptr, ##28224
22b94     F2 12 02 FB | 	rdlong	arg01, objptr
22b98     37 00 00 FF 
22b9c     40 E4 85 F1 | 	sub	objptr, ##28224
22ba0     C8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
22ba4                 | ' 
22ba4                 | ' leading_spaces:=amount
22ba4     01 00 00 FF 
22ba8     B6 E4 05 F1 | 	add	objptr, ##694
22bac     F2 04 68 FC | 	wrlong	#2, objptr
22bb0     01 00 00 FF 
22bb4     B6 E4 85 F1 | 	sub	objptr, ##694
22bb8     B5 01 00 FF 
22bbc     49 27 06 F6 | 	mov	local01, ##@LR__6003
22bc0     3D 12 06 F6 | 	mov	arg01, #61
22bc4     3C 14 06 F6 | 	mov	arg02, #60
22bc8     3B 16 06 F6 | 	mov	arg03, #59
22bcc     3A 18 06 F6 | 	mov	arg04, #58
22bd0     F4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
22bd4     FD 14 02 F6 | 	mov	arg02, result1
22bd8     13 13 02 F6 | 	mov	arg01, local01
22bdc     2C 37 B0 FD | 	call	#__system___mount
22be0     B5 01 00 FF 
22be4     4D 13 06 F6 | 	mov	arg01, ##@LR__6004
22be8     E0 39 B0 FD | 	call	#__system___chdir
22bec     B5 01 00 FF 
22bf0     55 27 06 F6 | 	mov	local01, ##@LR__6005
22bf4     4A 00 00 FF 
22bf8     94 E4 05 F1 | 	add	objptr, ##38036
22bfc     F2 26 62 FC | 	wrlong	local01, objptr
22c00     13 00 00 FF 
22c04     60 E4 85 F1 | 	sub	objptr, ##9824
22c08     F2 12 02 FB | 	rdlong	arg01, objptr
22c0c     37 00 00 FF 
22c10     34 E4 85 F1 | 	sub	objptr, ##28212
22c14     01 12 66 F0 | 	shl	arg01, #1
22c18     01 14 06 F6 | 	mov	arg02, #1
22c1c     8C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
22c20                 | ' init_commands
22c20                 | ' init_error_strings
22c20                 | ' init_audio
22c20                 | ' do_new
22c20                 | ' cls(ink, paper)
22c20                 | ' v.setfontfamily(font) 				' use ST Mono font
22c20                 | ' v.setleadingspaces(2)
22c20                 | ' mount "/sd", _vfs_open_sdcard()
22c20                 | ' chdir "/sd/bas"
22c20                 | ' currentdir$="/sd/bas"
22c20                 | ' position 2*editor_spaces,1 : print ver$
22c20     00 12 06 F6 | 	mov	arg01, #0
22c24     BC 8F B0 FD | 	call	#__system___getiolock_0600
22c28     FD 12 02 F6 | 	mov	arg01, result1
22c2c     10 33 B0 FD | 	call	#__system___lockmem
22c30     18 00 00 FF 
22c34     40 EB 05 F1 | 	add	ptr__dat__, ##12608
22c38     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
22c3c     18 00 00 FF 
22c40     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
22c44     00 12 06 F6 | 	mov	arg01, #0
22c48     00 16 06 F6 | 	mov	arg03, #0
22c4c     E8 3F B0 FD | 	call	#__system___basic_print_string
22c50     00 12 06 F6 | 	mov	arg01, #0
22c54     0A 14 06 F6 | 	mov	arg02, #10
22c58     00 16 06 F6 | 	mov	arg03, #0
22c5c     80 3F B0 FD | 	call	#__system___basic_print_char
22c60     00 12 06 F6 | 	mov	arg01, #0
22c64     7C 8F B0 FD | 	call	#__system___getiolock_0600
22c68     FD 00 68 FC | 	wrlong	#0, result1
22c6c     52 00 00 FF 
22c70     98 E4 05 F1 | 	add	objptr, ##42136
22c74     F2 12 02 FB | 	rdlong	arg01, objptr
22c78     0F 00 00 FF 
22c7c     3C E4 85 F1 | 	sub	objptr, ##7740
22c80     F2 26 02 FB | 	rdlong	local01, objptr
22c84     43 00 00 FF 
22c88     5C E4 85 F1 | 	sub	objptr, ##34396
22c8c     13 13 82 F1 | 	sub	arg01, local01
22c90     00 14 06 F6 | 	mov	arg02, #0
22c94     0A 16 06 F6 | 	mov	arg03, #10
22c98     78 55 B0 FD | 	call	#__system__Number_S
22c9c     FD 12 02 F6 | 	mov	arg01, result1
22ca0     B5 01 00 FF 
22ca4     5D 15 06 F6 | 	mov	arg02, ##@LR__6006
22ca8     F0 32 B0 FD | 	call	#__system___string_concat
22cac     FD 26 02 F6 | 	mov	local01, result1
22cb0     50 00 00 FF 
22cb4     38 E5 05 F1 | 	add	objptr, ##41272
22cb8     F2 26 62 FC | 	wrlong	local01, objptr
22cbc     50 00 00 FF 
22cc0     38 E5 85 F1 | 	sub	objptr, ##41272
22cc4                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
22cc4     00 12 06 F6 | 	mov	arg01, #0
22cc8     18 8F B0 FD | 	call	#__system___getiolock_0600
22ccc     FD 12 02 F6 | 	mov	arg01, result1
22cd0     6C 32 B0 FD | 	call	#__system___lockmem
22cd4     50 00 00 FF 
22cd8     38 E5 05 F1 | 	add	objptr, ##41272
22cdc     F2 14 02 FB | 	rdlong	arg02, objptr
22ce0     50 00 00 FF 
22ce4     38 E5 85 F1 | 	sub	objptr, ##41272
22ce8     00 12 06 F6 | 	mov	arg01, #0
22cec     00 16 06 F6 | 	mov	arg03, #0
22cf0     44 3F B0 FD | 	call	#__system___basic_print_string
22cf4     00 12 06 F6 | 	mov	arg01, #0
22cf8     0A 14 06 F6 | 	mov	arg02, #10
22cfc     00 16 06 F6 | 	mov	arg03, #0
22d00     DC 3E B0 FD | 	call	#__system___basic_print_char
22d04     00 12 06 F6 | 	mov	arg01, #0
22d08     D8 8E B0 FD | 	call	#__system___getiolock_0600
22d0c     FD 00 68 FC | 	wrlong	#0, result1
22d10     37 00 00 FF 
22d14     34 E4 05 F1 | 	add	objptr, ##28212
22d18     F2 12 02 FB | 	rdlong	arg01, objptr
22d1c     37 00 00 FF 
22d20     34 E4 85 F1 | 	sub	objptr, ##28212
22d24     01 12 66 F0 | 	shl	arg01, #1
22d28     04 14 06 F6 | 	mov	arg02, #4
22d2c     7C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
22d30                 | ' position 2*editor_spaces,4 : print "Ready"
22d30     00 12 06 F6 | 	mov	arg01, #0
22d34     AC 8E B0 FD | 	call	#__system___getiolock_0600
22d38     FD 12 02 F6 | 	mov	arg01, result1
22d3c     00 32 B0 FD | 	call	#__system___lockmem
22d40     B5 01 00 FF 
22d44     6F 15 06 F6 | 	mov	arg02, ##@LR__6007
22d48     00 12 06 F6 | 	mov	arg01, #0
22d4c     00 16 06 F6 | 	mov	arg03, #0
22d50     E4 3E B0 FD | 	call	#__system___basic_print_string
22d54     00 12 06 F6 | 	mov	arg01, #0
22d58     0A 14 06 F6 | 	mov	arg02, #10
22d5c     00 16 06 F6 | 	mov	arg03, #0
22d60     7C 3E B0 FD | 	call	#__system___basic_print_char
22d64     00 12 06 F6 | 	mov	arg01, #0
22d68     78 8E B0 FD | 	call	#__system___getiolock_0600
22d6c     FD 00 68 FC | 	wrlong	#0, result1
22d70     00 14 06 F6 | 	mov	arg02, #0
22d74     01 14 D6 F7 | 	test	arg02, #1 wc
22d78     5A 4C 64 FD | 	drvc	#38
22d7c     01 14 D6 F7 | 	test	arg02, #1 wc
22d80     5A 4E 64 FD | 	drvc	#39
22d84     B5 01 00 FF 
22d88     75 27 06 F6 | 	mov	local01, ##@LR__6008
22d8c     52 00 00 FF 
22d90     C4 E4 05 F1 | 	add	objptr, ##42180
22d94     F2 26 62 FC | 	wrlong	local01, objptr
22d98     04 E4 05 F1 | 	add	objptr, #4
22d9c     FF FF FF FF 
22da0     F2 FE 6B FC | 	wrlong	##-1, objptr
22da4     0C E4 05 F1 | 	add	objptr, #12
22da8     F2 00 68 FC | 	wrlong	#0, objptr
22dac     52 00 00 FF 
22db0     D4 E4 85 F1 | 	sub	objptr, ##42196
22db4                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
22db4                 | ' loadname="noname.bas"
22db4                 | ' do_insert=-1
22db4                 | ' inload=0
22db4                 | ' 
22db4                 | ' open "/sd/bas/autorun.bas" for input as #9
22db4     B5 01 00 FF 
22db8     80 15 06 F6 | 	mov	arg02, ##@LR__6009
22dbc     09 12 06 F6 | 	mov	arg01, #9
22dc0     00 16 06 F6 | 	mov	arg03, #0
22dc4     7C 3D B0 FD | 	call	#__system___basic_open_string
22dc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22dcc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22dd0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
22dd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22dd8     52 00 00 FF 
22ddc     D8 E4 05 F1 | 	add	objptr, ##42200
22de0     F2 FA 61 FC | 	wrlong	result1, objptr
22de4     52 00 00 FF 
22de8     D8 E4 85 F1 | 	sub	objptr, ##42200
22dec                 | ' err=geterr()
22dec                 | ' close #9
22dec     09 12 06 F6 | 	mov	arg01, #9
22df0     A8 84 B0 FD | 	call	#__system__close
22df4                 | ' if err=0 then line$="run autorun.bas" : interpret
22df4     52 00 00 FF 
22df8     D8 E4 05 F1 | 	add	objptr, ##42200
22dfc     F2 26 0A FB | 	rdlong	local01, objptr wz
22e00     52 00 00 FF 
22e04     D8 E4 85 F1 | 	sub	objptr, ##42200
22e08     B5 01 00 AF 
22e0c     94 27 06 A6 |  if_e	mov	local01, ##@LR__6010
22e10     37 00 00 AF 
22e14     1C E4 05 A1 |  if_e	add	objptr, ##28188
22e18     F2 26 62 AC |  if_e	wrlong	local01, objptr
22e1c     37 00 00 AF 
22e20     1C E4 85 A1 |  if_e	sub	objptr, ##28188
22e24     00 EA BD AD |  if_e	call	#_interpret
22e28                 | ' 
22e28                 | ' 
22e28                 | ' '-------------------------------------------------------------------------------------------------------- 
22e28                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
22e28                 | ' '--------------------------------------------------------------------------------------------------------
22e28                 | ' 
22e28                 | ' do
22e28                 | LR__2660
22e28     D8 D9 BD FD | 	call	#_edit
22e2c     FD 26 02 F6 | 	mov	local01, result1
22e30     37 00 00 FF 
22e34     1C E4 05 F1 | 	add	objptr, ##28188
22e38     F2 26 62 FC | 	wrlong	local01, objptr
22e3c     37 00 00 FF 
22e40     1C E4 85 F1 | 	sub	objptr, ##28188
22e44     E0 E9 BD FD | 	call	#_interpret
22e48     B5 01 00 FF 
22e4c     A4 27 06 F6 | 	mov	local01, ##@LR__6011
22e50     37 00 00 FF 
22e54     1C E4 05 F1 | 	add	objptr, ##28188
22e58     F2 26 62 FC | 	wrlong	local01, objptr
22e5c     37 00 00 FF 
22e60     1C E4 85 F1 | 	sub	objptr, ##28188
22e64     C0 FF 9F FD | 	jmp	#LR__2660
22e68     A7 F0 03 F6 | 	mov	ptra, fp
22e6c     B2 00 A0 FD | 	call	#popregs_
22e70                 | _program_ret
22e70     2D 00 64 FD | 	ret
22e74                 | 
22e74                 | ' '' this is not a main program.
22e74                 | ' 
22e74                 | ' '****************************************************************************************************************
22e74                 | ' '                                                                                                             	*
22e74                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
22e74                 | ' '                                                                                                            	*
22e74                 | ' ' base - HDMI base pin												*
22e74                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
22e74                 | ' '														*
22e74                 | ' '														*
22e74                 | ' '****************************************************************************************************************
22e74                 | ' 
22e74                 | ' pub start(base,mb):result |i
22e74                 | _hg010b_spin2_start
22e74                 | ' 
22e74                 | ' '--------------------------- initialize pointers and variables
22e74                 | ' 
22e74                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
22e74     34 E4 05 F1 | 	add	objptr, #52
22e78     F2 FA 01 F6 | 	mov	result1, objptr
22e7c     28 E4 85 F1 | 	sub	objptr, #40
22e80     F2 FA 61 FC | 	wrlong	result1, objptr
22e84                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
22e84                 | ' hdmibase:=base							' HDMI base pin, 8*n
22e84     18 E4 05 F1 | 	add	objptr, #24
22e88     F2 12 62 FC | 	wrlong	arg01, objptr
22e8c                 | ' mailbox_ptr:=mb		
22e8c     04 E4 05 F1 | 	add	objptr, #4
22e90     F2 14 62 FC | 	wrlong	arg02, objptr
22e94                 | ' mailbox0:=mb				' PSRAM mailbox pointer
22e94     C1 E5 05 F1 | 	add	objptr, #449
22e98     F2 14 62 FC | 	wrlong	arg02, objptr
22e9c                 | ' sprite_ptr:=@spr1ptr
22e9c     D8 E4 85 F1 | 	sub	objptr, #216
22ea0     F2 FA 01 F6 | 	mov	result1, objptr
22ea4     E5 E4 85 F1 | 	sub	objptr, #229
22ea8     F2 FA 61 FC | 	wrlong	result1, objptr
22eac                 | ' 
22eac                 | ' 		'
22eac                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
22eac     E5 E4 05 F1 | 	add	objptr, #229
22eb0     F2 FA 01 FB | 	rdlong	result1, objptr
22eb4     D0 FA 05 F1 | 	add	result1, #208
22eb8     FD 10 58 FC | 	wrword	#8, result1
22ebc                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
22ebc     F2 16 02 FB | 	rdlong	arg03, objptr
22ec0     D2 16 06 F1 | 	add	arg03, #210
22ec4     0B 21 58 FC | 	wrword	#16, arg03
22ec8                 | ' leading_spaces:=0				'
22ec8     A5 E5 05 F1 | 	add	objptr, #421
22ecc     F2 00 68 FC | 	wrlong	#0, objptr
22ed0                 | ' 
22ed0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
22ed0     99 E4 85 F1 | 	sub	objptr, #153
22ed4     00 00 A0 FF 
22ed8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
22edc                 | ' emptydl[1]:=0
22edc     04 E4 05 F1 | 	add	objptr, #4
22ee0     F2 00 68 FC | 	wrlong	#0, objptr
22ee4                 | ' 
22ee4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
22ee4                 | ' 
22ee4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
22ee4     28 E5 85 F1 | 	sub	objptr, #296
22ee8     F2 02 68 FC | 	wrlong	#1, objptr
22eec                 | ' if s_debug<>0
22eec                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
22eec     20 00 80 FF 
22ef0     F2 00 68 FC | 	wrlong	##16384, objptr
22ef4     F9 E4 85 F1 | 	sub	objptr, #249
22ef8                 | ' setmode()							' set the mode, see below
22ef8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
22efc                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
22efc     49 E4 05 F1 | 	add	objptr, #73
22f00     F2 FA 01 F6 | 	mov	result1, objptr
22f04     35 E4 85 F1 | 	sub	objptr, #53
22f08     F2 FA 61 FC | 	wrlong	result1, objptr
22f0c                 | ' cursor_ptr:=@cursor_x						
22f0c     28 E4 05 F1 | 	add	objptr, #40
22f10     F2 16 02 F6 | 	mov	arg03, objptr
22f14     2C E4 85 F1 | 	sub	objptr, #44
22f18     F2 16 62 FC | 	wrlong	arg03, objptr
22f1c                 | ' fontnum:=0  							' start with a PC type font 
22f1c     55 E4 05 F1 | 	add	objptr, #85
22f20     F2 00 68 FC | 	wrlong	#0, objptr
22f24                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
22f24     1C E4 05 F1 | 	add	objptr, #28
22f28     F2 12 02 F6 | 	mov	arg01, objptr
22f2c     81 E4 85 F1 | 	sub	objptr, #129
22f30     10 00 00 FF 
22f34     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
22f38     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22f3c     10 00 00 FF 
22f40     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
22f44     10 16 06 F6 | 	mov	arg03, #16
22f48     14 2F B0 FD | 	call	#__system____builtin_memmove
22f4c                 | ' leading_spaces:=0
22f4c     01 00 00 FF 
22f50     B6 E4 05 F1 | 	add	objptr, ##694
22f54     F2 00 68 FC | 	wrlong	#0, objptr
22f58     01 00 00 FF 
22f5c     B6 E4 85 F1 | 	sub	objptr, ##694
22f60                 | ' '---------------------------- initialize a cursor (MSDOS type)
22f60                 | ' 
22f60                 | ' initcursor(154)
22f60     9A 12 06 F6 | 	mov	arg01, #154
22f64     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
22f68                 | ' 
22f68                 | ' '---------------------------- start the cog
22f68                 | ' 
22f68                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
22f68     10 00 00 FF 
22f6c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
22f70     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
22f74     10 00 00 FF 
22f78     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
22f7c     14 E4 05 F1 | 	add	objptr, #20
22f80     10 FA 05 F6 | 	mov	result1, #16
22f84     28 E4 61 FD | 	setq	objptr
22f88     0A FB F1 FC | 	coginit	result1, arg02 wc
22f8c     01 FA 65 C6 |  if_b	neg	result1, #1
22f90     1C E4 05 F1 | 	add	objptr, #28
22f94     F2 FA 61 FC | 	wrlong	result1, objptr
22f98     30 E4 85 F1 | 	sub	objptr, #48
22f9c                 | ' waitms(40)							' wait for stabilize
22f9c     28 12 06 F6 | 	mov	arg01, #40
22fa0     90 32 B0 FD | 	call	#__system___waitms
22fa4                 | ' return cog							' return the driver's cog #
22fa4     30 E4 05 F1 | 	add	objptr, #48
22fa8     F2 FA 01 FB | 	rdlong	result1, objptr
22fac     30 E4 85 F1 | 	sub	objptr, #48
22fb0                 | _hg010b_spin2_start_ret
22fb0     2D 00 64 FD | 	ret
22fb4                 | 
22fb4                 | ' 
22fb4                 | ' 
22fb4                 | ' '**************************************************************************************************************** 
22fb4                 | ' '                                                                                                             	*
22fb4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
22fb4                 | ' '  Mode number - see start() above or bits below								*
22fb4                 | ' '                                                                                                             	*
22fb4                 | ' '****************************************************************************************************************
22fb4                 | ' 
22fb4                 | ' '---------------------------- initialize a cursor (MSDOS type)
22fb4                 | ' pub initcursor(color) |i
22fb4                 | _hg010b_spin2_initcursor
22fb4     03 4A 05 F6 | 	mov	COUNT_, #3
22fb8     A8 00 A0 FD | 	call	#pushregs_
22fbc     09 27 02 F6 | 	mov	local01, arg01
22fc0                 | ' 
22fc0                 | ' cursor_x:=0							' place the cursor at 0:0
22fc0     3C E4 05 F1 | 	add	objptr, #60
22fc4     F2 00 58 FC | 	wrword	#0, objptr
22fc8                 | ' cursor_y:=0
22fc8     02 E4 05 F1 | 	add	objptr, #2
22fcc     F2 00 48 FC | 	wrbyte	#0, objptr
22fd0                 | ' repeat i from 0 to 111
22fd0     00 28 06 F6 | 	mov	local02, #0
22fd4     F8 E5 05 F1 | 	add	objptr, #504
22fd8     97 1A 48 FB | 	callpa	#(@LR__2672-@LR__2670)>>2,fcache_load_ptr_
22fdc                 | LR__2670
22fdc                 | '   cursor[i]:=0
22fdc     14 2B 02 F6 | 	mov	local03, local02
22fe0     F2 2A 02 F1 | 	add	local03, objptr
22fe4     15 01 48 FC | 	wrbyte	#0, local03
22fe8     01 28 06 F1 | 	add	local02, #1
22fec     70 28 56 F2 | 	cmps	local02, #112 wc
22ff0     E8 FF 9F CD |  if_b	jmp	#LR__2670
22ff4                 | ' repeat i from 112 to 127
22ff4     70 28 06 F6 | 	mov	local02, #112
22ff8                 | LR__2671
22ff8                 | '   cursor[i]:=color  
22ff8     14 2B 02 F6 | 	mov	local03, local02
22ffc     F2 2A 02 F1 | 	add	local03, objptr
23000     15 27 42 FC | 	wrbyte	local01, local03
23004     01 28 06 F1 | 	add	local02, #1
23008     80 28 16 F2 | 	cmp	local02, #128 wc
2300c     E8 FF 9F CD |  if_b	jmp	#LR__2671
23010                 | LR__2672
23010                 | ' 'repeat i from 0 to 127
23010                 | ' '  if ((i/8)//2)
23010                 | ' '    cursor[i]:=15
23010                 | ' '  else
23010                 | ' '    cursor[i]:=0
23010                 | ' '  if i>=120    
23010                 | ' '    cursor[i]:=40
23010                 | ' setspriteptr(17,@cursor)
23010     F2 14 02 F6 | 	mov	arg02, objptr
23014     01 00 00 FF 
23018     36 E4 85 F1 | 	sub	objptr, ##566
2301c     11 12 06 F6 | 	mov	arg01, #17
23020     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
23024                 | ' setspritesize(17,8,16)
23024     11 12 06 F6 | 	mov	arg01, #17
23028     08 14 06 F6 | 	mov	arg02, #8
2302c     10 16 06 F6 | 	mov	arg03, #16
23030     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
23034                 | ' setspritepos(17,0,0)
23034     11 12 06 F6 | 	mov	arg01, #17
23038     00 14 06 F6 | 	mov	arg02, #0
2303c     00 16 06 F6 | 	mov	arg03, #0
23040     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
23044                 | ' cursorshape:=14
23044     0B 00 00 FF 
23048     C6 E4 05 F1 | 	add	objptr, ##5830
2304c     F2 1C 68 FC | 	wrlong	#14, objptr
23050                 | ' cursorcolor:=color
23050     04 E4 85 F1 | 	sub	objptr, #4
23054     F2 26 62 FC | 	wrlong	local01, objptr
23058     0B 00 00 FF 
2305c     C2 E4 85 F1 | 	sub	objptr, ##5826
23060     A7 F0 03 F6 | 	mov	ptra, fp
23064     B2 00 A0 FD | 	call	#popregs_
23068                 | _hg010b_spin2_initcursor_ret
23068     2D 00 64 FD | 	ret
2306c                 | 
2306c                 | ' 
2306c                 | ' pub setcursorshape(shape) | i
2306c                 | _hg010b_spin2_setcursorshape
2306c                 | ' 
2306c                 | ' cursorshape:=shape
2306c     0B 00 00 FF 
23070     C6 E4 05 F1 | 	add	objptr, ##5830
23074     F2 12 62 FC | 	wrlong	arg01, objptr
23078                 | ' repeat i from 0 to (8*cursorshape)-1
23078     00 00 06 F6 | 	mov	_var01, #0
2307c     09 03 02 F6 | 	mov	_var02, arg01
23080     03 02 66 F0 | 	shl	_var02, #3
23084     01 02 86 F1 | 	sub	_var02, #1
23088     00 02 56 F2 | 	cmps	_var02, #0 wc
2308c     01 04 86 F6 | 	negc	_var03, #1
23090     02 07 02 F6 | 	mov	_var04, _var03
23094     02 03 02 F1 | 	add	_var02, _var03
23098     0A 00 00 FF 
2309c     90 E4 85 F1 | 	sub	objptr, ##5264
230a0     97 0C 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
230a4                 | LR__2680
230a4                 | '   cursor[i]:=0
230a4     00 05 02 F6 | 	mov	_var03, _var01
230a8     F2 04 02 F1 | 	add	_var03, objptr
230ac     02 01 48 FC | 	wrbyte	#0, _var03
230b0     03 01 02 F1 | 	add	_var01, _var04
230b4     01 01 0A F2 | 	cmp	_var01, _var02 wz
230b8     E8 FF 9F 5D |  if_ne	jmp	#LR__2680
230bc                 | LR__2681
230bc                 | ' repeat i from 8*cursorshape to 127
230bc     0A 00 00 FF 
230c0     90 E4 05 F1 | 	add	objptr, ##5264
230c4     F2 06 02 FB | 	rdlong	_var04, objptr
230c8     03 01 02 F6 | 	mov	_var01, _var04
230cc     03 00 66 F0 | 	shl	_var01, #3
230d0     0B 00 00 FF 
230d4     C6 E4 85 F1 | 	sub	objptr, ##5830
230d8     03 06 66 F0 | 	shl	_var04, #3
230dc     80 06 56 F2 | 	cmps	_var04, #128 wc
230e0     01 04 A6 F6 | 	negnc	_var03, #1
230e4     7F 02 06 F6 | 	mov	_var02, #127
230e8     02 03 02 F1 | 	add	_var02, _var03
230ec     97 1A 48 FB | 	callpa	#(@LR__2683-@LR__2682)>>2,fcache_load_ptr_
230f0                 | LR__2682
230f0                 | '   cursor[i]:=cursorcolor
230f0     00 07 02 F6 | 	mov	_var04, _var01
230f4     01 00 00 FF 
230f8     36 E4 05 F1 | 	add	objptr, ##566
230fc     F2 06 02 F1 | 	add	_var04, objptr
23100     0A 00 00 FF 
23104     8C E4 05 F1 | 	add	objptr, ##5260
23108     F2 12 02 FB | 	rdlong	arg01, objptr
2310c     0B 00 00 FF 
23110     C2 E4 85 F1 | 	sub	objptr, ##5826
23114     03 13 42 FC | 	wrbyte	arg01, _var04
23118     02 01 02 F1 | 	add	_var01, _var03
2311c     01 01 0A F2 | 	cmp	_var01, _var02 wz
23120     CC FF 9F 5D |  if_ne	jmp	#LR__2682
23124                 | LR__2683
23124                 | _hg010b_spin2_setcursorshape_ret
23124     2D 00 64 FD | 	ret
23128                 | 
23128                 | ' 
23128                 | ' pub setcursorcolor(color) | i
23128                 | _hg010b_spin2_setcursorcolor
23128                 | ' 
23128                 | ' cursorcolor:=color
23128     0B 00 00 FF 
2312c     C2 E4 05 F1 | 	add	objptr, ##5826
23130     F2 12 62 FC | 	wrlong	arg01, objptr
23134                 | ' repeat i from 0 to (8*cursorshape)-1
23134     00 12 06 F6 | 	mov	arg01, #0
23138     04 E4 05 F1 | 	add	objptr, #4
2313c     F2 00 02 FB | 	rdlong	_var01, objptr
23140     03 00 66 F0 | 	shl	_var01, #3
23144     01 00 86 F1 | 	sub	_var01, #1
23148     00 00 56 F2 | 	cmps	_var01, #0 wc
2314c     01 02 86 F6 | 	negc	_var02, #1
23150     01 05 02 F6 | 	mov	_var03, _var02
23154     01 01 02 F1 | 	add	_var01, _var02
23158     0A 00 00 FF 
2315c     90 E4 85 F1 | 	sub	objptr, ##5264
23160     97 0C 48 FB | 	callpa	#(@LR__2691-@LR__2690)>>2,fcache_load_ptr_
23164                 | LR__2690
23164                 | '   cursor[i]:=0
23164     09 03 02 F6 | 	mov	_var02, arg01
23168     F2 02 02 F1 | 	add	_var02, objptr
2316c     01 01 48 FC | 	wrbyte	#0, _var02
23170     02 13 02 F1 | 	add	arg01, _var03
23174     00 13 0A F2 | 	cmp	arg01, _var01 wz
23178     E8 FF 9F 5D |  if_ne	jmp	#LR__2690
2317c                 | LR__2691
2317c                 | ' repeat i from 8*cursorshape to 127
2317c     0A 00 00 FF 
23180     90 E4 05 F1 | 	add	objptr, ##5264
23184     F2 04 02 FB | 	rdlong	_var03, objptr
23188     02 13 02 F6 | 	mov	arg01, _var03
2318c     03 12 66 F0 | 	shl	arg01, #3
23190     0B 00 00 FF 
23194     C6 E4 85 F1 | 	sub	objptr, ##5830
23198     03 04 66 F0 | 	shl	_var03, #3
2319c     80 04 56 F2 | 	cmps	_var03, #128 wc
231a0     01 02 A6 F6 | 	negnc	_var02, #1
231a4     7F 00 06 F6 | 	mov	_var01, #127
231a8     01 01 02 F1 | 	add	_var01, _var02
231ac     97 1A 48 FB | 	callpa	#(@LR__2693-@LR__2692)>>2,fcache_load_ptr_
231b0                 | LR__2692
231b0                 | '   cursor[i]:=cursorcolor
231b0     09 05 02 F6 | 	mov	_var03, arg01
231b4     01 00 00 FF 
231b8     36 E4 05 F1 | 	add	objptr, ##566
231bc     F2 04 02 F1 | 	add	_var03, objptr
231c0     0A 00 00 FF 
231c4     8C E4 05 F1 | 	add	objptr, ##5260
231c8     F2 06 02 FB | 	rdlong	_var04, objptr
231cc     0B 00 00 FF 
231d0     C2 E4 85 F1 | 	sub	objptr, ##5826
231d4     02 07 42 FC | 	wrbyte	_var04, _var03
231d8     01 13 02 F1 | 	add	arg01, _var02
231dc     00 13 0A F2 | 	cmp	arg01, _var01 wz
231e0     CC FF 9F 5D |  if_ne	jmp	#LR__2692
231e4                 | LR__2693
231e4                 | _hg010b_spin2_setcursorcolor_ret
231e4     2D 00 64 FD | 	ret
231e8                 | 
231e8                 | '   
231e8                 | '   
231e8                 | '   
231e8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
231e8                 | _hg010b_spin2_setmode
231e8     02 4A 05 F6 | 	mov	COUNT_, #2
231ec     A8 00 A0 FD | 	call	#pushregs_
231f0                 | ' 
231f0                 | ' 
231f0                 | ' dl_ptr:=@emptydl[0]
231f0     01 00 00 FF 
231f4     1D E4 05 F1 | 	add	objptr, ##541
231f8     F2 1A 02 F6 | 	mov	arg05, objptr
231fc     FD E5 85 F1 | 	sub	objptr, #509
23200     F2 1A 62 FC | 	wrlong	arg05, objptr
23204                 | ' 
23204                 | ' if cog>0 
23204     10 E4 05 F1 | 	add	objptr, #16
23208     F2 1A 02 FB | 	rdlong	arg05, objptr
2320c     30 E4 85 F1 | 	sub	objptr, #48
23210     01 1A 56 F2 | 	cmps	arg05, #1 wc
23214                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
23214     01 12 06 36 |  if_ae	mov	arg01, #1
23218     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
2321c                 | ' xres:=1024
2321c     01 00 00 FF 
23220     26 E4 05 F1 | 	add	objptr, ##550
23224     02 00 80 FF 
23228     F2 00 68 FC | 	wrlong	##1024, objptr
2322c                 | ' yres:=600
2322c     04 E4 05 F1 | 	add	objptr, #4
23230     01 00 80 FF 
23234     F2 B0 68 FC | 	wrlong	##600, objptr
23238                 | ' ppl:=(timings[3])
23238     10 00 00 FF 
2323c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23240     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23244     51 E5 85 F1 | 	sub	objptr, #337
23248     F2 1A 62 FC | 	wrlong	arg05, objptr
2324c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
2324c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23250     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23254     01 26 66 F0 | 	shl	local01, #1
23258     80 E4 85 F1 | 	sub	objptr, #128
2325c     F2 26 62 FC | 	wrlong	local01, objptr
23260                 | ' cpl1:=cpl '' todo remove
23260     04 E4 05 F1 | 	add	objptr, #4
23264     F2 26 62 FC | 	wrlong	local01, objptr
23268                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23268     02 00 00 FF 
2326c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23270     41 E4 85 F1 | 	sub	objptr, #65
23274     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23278                 | ' repeat i from 0 to 3
23278     00 28 06 F6 | 	mov	local02, #0
2327c     02 00 00 FF 
23280     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
23284     08 E4 05 F1 | 	add	objptr, #8
23288     97 20 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
2328c                 | LR__2700
2328c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
2328c     14 27 02 F6 | 	mov	local01, local02
23290     02 26 66 F0 | 	shl	local01, #2
23294     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23298     F2 1A 02 FB | 	rdlong	arg05, objptr
2329c     11 1A 66 F0 | 	shl	arg05, #17
232a0     13 27 02 FB | 	rdlong	local01, local01
232a4     0D 27 02 F1 | 	add	local01, arg05
232a8     80 40 38 FF 
232ac     00 26 06 F1 | 	add	local01, ##1887502336
232b0     14 1B 02 F6 | 	mov	arg05, local02
232b4     02 1A 66 F0 | 	shl	arg05, #2
232b8     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
232bc     0D 27 62 FC | 	wrlong	local01, arg05
232c0     01 28 06 F1 | 	add	local02, #1
232c4     04 28 56 F2 | 	cmps	local02, #4 wc
232c8     C0 FF 9F CD |  if_b	jmp	#LR__2700
232cc                 | LR__2701
232cc     24 E4 85 F1 | 	sub	objptr, #36
232d0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
232d0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
232d4     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
232d8     14 26 66 FC | 	wrlong	local01, #20
232dc                 | ' hubset(timings[10])
232dc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
232e0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
232e4     10 00 00 FF 
232e8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
232ec     00 12 62 FD | 	hubset	arg01
232f0                 | ' waitms(1)                                                   	' wait for stabilization
232f0     01 12 06 F6 | 	mov	arg01, #1
232f4     3C 2F B0 FD | 	call	#__system___waitms
232f8     10 00 00 FF 
232fc     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
23300     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23304     61 E4 05 F1 | 	add	objptr, #97
23308     F2 28 62 FC | 	wrlong	local02, objptr
2330c     14 27 52 F6 | 	abs	local01, local02 wc
23310     04 26 46 F0 | 	shr	local01, #4
23314     13 27 82 F6 | 	negc	local01, local01
23318     9C E4 05 F1 | 	add	objptr, #156
2331c     F2 26 62 FC | 	wrlong	local01, objptr
23320     A4 E4 85 F1 | 	sub	objptr, #164
23324     F2 28 02 FB | 	rdlong	local02, objptr
23328     08 E4 05 F1 | 	add	objptr, #8
2332c     F2 26 02 FB | 	rdlong	local01, objptr
23330     13 29 02 FD | 	qmul	local02, local01
23334                 | ' lines:=timings[11]
23334                 | ' t_lines:=lines/16
23334                 | ' buflen:=cpl*lines						' framebuffer length in longs
23334     29 E4 85 F1 | 	sub	objptr, #41
23338     19 26 C6 F9 | 	decod	local01, #25
2333c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23340     18 28 62 FD | 	getqx	local02
23344     F2 28 62 FC | 	wrlong	local02, objptr
23348     38 E4 85 F1 | 	sub	objptr, #56
2334c     02 28 66 F0 | 	shl	local02, #2
23350     14 27 82 F1 | 	sub	local01, local02
23354     F2 26 62 FC | 	wrlong	local01, objptr
23358     FD E4 05 F1 | 	add	objptr, #253
2335c     F2 28 02 FB | 	rdlong	local02, objptr
23360     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23364     0D 29 02 FD | 	qmul	local02, arg05
23368                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23368                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23368     F9 E4 85 F1 | 	sub	objptr, #249
2336c                 | ' mode_ptr:=@timings						' set pointers to timings
2336c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23370                 | ' graphmode:=1024+512+192+48							' det global variable
23370                 | ' makedl(graphmode)							' make a DL for the mode
23370     03 00 00 FF 
23374     F0 12 06 F6 | 	mov	arg01, ##1776
23378     18 28 62 FD | 	getqx	local02
2337c     14 27 82 F1 | 	sub	local01, local02
23380     F2 26 62 FC | 	wrlong	local01, objptr
23384     14 E4 05 F1 | 	add	objptr, #20
23388     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
2338c     79 E4 05 F1 | 	add	objptr, #121
23390     03 00 80 FF 
23394     F2 E0 69 FC | 	wrlong	##1776, objptr
23398     91 E4 85 F1 | 	sub	objptr, #145
2339c     10 00 00 FF 
233a0     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
233a4     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
233a8                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
233a8     F2 26 02 FB | 	rdlong	local01, objptr
233ac     DD E4 05 F1 | 	add	objptr, #221
233b0     F2 26 62 FC | 	wrlong	local01, objptr
233b4                 | ' s_font_ptr:=font_ptr
233b4     D5 E4 85 F1 | 	sub	objptr, #213
233b8     F2 26 02 FB | 	rdlong	local01, objptr
233bc     D9 E4 05 F1 | 	add	objptr, #217
233c0     F2 26 62 FC | 	wrlong	local01, objptr
233c4                 | ' s_lines:=lines
233c4     80 E4 85 F1 | 	sub	objptr, #128
233c8     F2 26 02 FB | 	rdlong	local01, objptr
233cc     84 E4 05 F1 | 	add	objptr, #132
233d0     F2 26 62 FC | 	wrlong	local01, objptr
233d4                 | ' s_buflen:=buflen
233d4     AD E4 85 F1 | 	sub	objptr, #173
233d8     F2 26 02 FB | 	rdlong	local01, objptr
233dc     B5 E4 05 F1 | 	add	objptr, #181
233e0     F2 26 62 FC | 	wrlong	local01, objptr
233e4                 | ' s_cpl:=cpl
233e4     94 E4 85 F1 | 	sub	objptr, #148
233e8     F2 26 02 FB | 	rdlong	local01, objptr
233ec     90 E4 05 F1 | 	add	objptr, #144
233f0     F2 26 62 FC | 	wrlong	local01, objptr
233f4                 | ' s_cpl1:=cpl
233f4     90 E4 85 F1 | 	sub	objptr, #144
233f8     F2 26 02 FB | 	rdlong	local01, objptr
233fc     98 E4 05 F1 | 	add	objptr, #152
23400     F2 26 62 FC | 	wrlong	local01, objptr
23404                 | ' st_lines:=t_lines
23404     0C E4 05 F1 | 	add	objptr, #12
23408     F2 26 02 FB | 	rdlong	local01, objptr
2340c     04 E4 05 F1 | 	add	objptr, #4
23410     F2 26 62 FC | 	wrlong	local01, objptr
23414                 | ' ppl:=ppl/xzoom  
23414     28 E4 85 F1 | 	sub	objptr, #40
23418     F2 88 02 FB | 	rdlong	muldiva_, objptr
2341c     2C E4 05 F1 | 	add	objptr, #44
23420     F2 8A 02 FB | 	rdlong	muldivb_, objptr
23424     05 E5 85 F1 | 	sub	objptr, #261
23428     BA 00 A0 FD | 	call	#divide_
2342c     D9 E4 05 F1 | 	add	objptr, #217
23430     F2 8A 62 FC | 	wrlong	muldivb_, objptr
23434                 | ' s_ppl:=ppl
23434     1C E4 05 F1 | 	add	objptr, #28
23438     F2 8A 62 FC | 	wrlong	muldivb_, objptr
2343c     F5 E4 85 F1 | 	sub	objptr, #245
23440                 | ' waitms(20)							' wait 
23440     14 12 06 F6 | 	mov	arg01, #20
23444     EC 2D B0 FD | 	call	#__system___waitms
23448                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23448     04 E4 05 F1 | 	add	objptr, #4
2344c     F2 12 02 FB | 	rdlong	arg01, objptr
23450     04 E4 85 F1 | 	sub	objptr, #4
23454     F2 16 02 FB | 	rdlong	arg03, objptr
23458     09 17 82 F1 | 	sub	arg03, arg01
2345c     20 14 06 F6 | 	mov	arg02, #32
23460     00 18 06 F6 | 	mov	arg04, #0
23464     01 1A 06 F6 | 	mov	arg05, #1
23468     0B 00 00 FF 
2346c     CC E4 05 F1 | 	add	objptr, ##5836
23470     7C 1F B0 FD | 	call	#_psram_spin2_fill
23474     0B 00 00 FF 
23478     CC E4 85 F1 | 	sub	objptr, ##5836
2347c     A7 F0 03 F6 | 	mov	ptra, fp
23480     B2 00 A0 FD | 	call	#popregs_
23484                 | _hg010b_spin2_setmode_ret
23484     2D 00 64 FD | 	ret
23488                 | 
23488                 | ' 
23488                 | ' '****************************************************************************************************************
23488                 | ' '                                                                                                             	*
23488                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23488                 | ' '                                                                                                             	*
23488                 | ' '****************************************************************************************************************
23488                 | ' 
23488                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23488                 | _hg010b_spin2_makedl
23488                 | ' 
23488                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23488                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23488                 | ' repeat i from 0 to 11                                                           ' clear DL
23488     00 00 06 F6 | 	mov	_var01, #0
2348c     ED E5 05 F1 | 	add	objptr, #493
23490     97 0E 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
23494                 | LR__2710
23494                 | '   displaylist[i]:=0 
23494     00 03 02 F6 | 	mov	_var02, _var01
23498     02 02 66 F0 | 	shl	_var02, #2
2349c     F2 02 02 F1 | 	add	_var02, objptr
234a0     01 01 68 FC | 	wrlong	#0, _var02
234a4     01 00 06 F1 | 	add	_var01, #1
234a8     0C 00 56 F2 | 	cmps	_var01, #12 wc
234ac     E4 FF 9F CD |  if_b	jmp	#LR__2710
234b0                 | LR__2711
234b0                 | '                         ' 
234b0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
234b0     8C E5 85 F1 | 	sub	objptr, #396
234b4     F2 02 02 FB | 	rdlong	_var02, objptr
234b8     14 02 66 F0 | 	shl	_var02, #20
234bc     01 02 06 F1 | 	add	_var02, #1
234c0     04 E4 85 F1 | 	sub	objptr, #4
234c4     F2 00 02 FB | 	rdlong	_var01, objptr
234c8     02 00 66 F0 | 	shl	_var01, #2
234cc     04 00 66 F0 | 	shl	_var01, #4
234d0     00 03 02 F1 | 	add	_var02, _var01
234d4     90 E5 05 F1 | 	add	objptr, #400
234d8     F2 02 62 FC | 	wrlong	_var02, objptr
234dc     ED E5 85 F1 | 	sub	objptr, #493
234e0                 | ' displaylist[1]:=buf_ptr<<4+%10  
234e0     F2 02 02 FB | 	rdlong	_var02, objptr
234e4     04 02 66 F0 | 	shl	_var02, #4
234e8     02 02 06 F1 | 	add	_var02, #2
234ec     F1 E5 05 F1 | 	add	objptr, #497
234f0     F2 02 62 FC | 	wrlong	_var02, objptr
234f4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
234f4     04 E4 85 F1 | 	sub	objptr, #4
234f8     F2 02 02 F6 | 	mov	_var02, objptr
234fc     CD E5 85 F1 | 	sub	objptr, #461
23500     F2 02 62 FC | 	wrlong	_var02, objptr
23504     20 E4 85 F1 | 	sub	objptr, #32
23508                 | _hg010b_spin2_makedl_ret
23508     2D 00 64 FD | 	ret
2350c                 | 
2350c                 | ' 
2350c                 | ' 
2350c                 | ' '****************************************************************************************************************
2350c                 | ' '                                                                        					*
2350c                 | ' '  Graphic primitives                                                    					*
2350c                 | ' '                                                                        					*
2350c                 | ' '****************************************************************************************************************
2350c                 | ' 
2350c                 | ' pub setspriteptr(num,ptr)
2350c                 | _hg010b_spin2_setspriteptr
2350c                 | ' long[@spr1ptr+12*num]:=ptr
2350c     11 E5 05 F1 | 	add	objptr, #273
23510     F2 00 02 F6 | 	mov	_var01, objptr
23514     09 03 02 F6 | 	mov	_var02, arg01
23518     01 02 66 F0 | 	shl	_var02, #1
2351c     09 03 02 F1 | 	add	_var02, arg01
23520     02 02 66 F0 | 	shl	_var02, #2
23524     01 01 02 F1 | 	add	_var01, _var02
23528     00 15 62 FC | 	wrlong	arg02, _var01
2352c     11 E5 85 F1 | 	sub	objptr, #273
23530                 | _hg010b_spin2_setspriteptr_ret
23530     2D 00 64 FD | 	ret
23534                 | 
23534                 | ' 
23534                 | ' pub setspritepos(num,x,y)
23534                 | _hg010b_spin2_setspritepos
23534                 | ' if y>601
23534     01 00 00 FF 
23538     5A 16 56 F2 | 	cmps	arg03, ##602 wc
2353c                 | '   y:=601
2353c     01 00 00 3F 
23540     59 16 06 36 |  if_ae	mov	arg03, ##601
23544                 | ' if x>1024
23544     02 00 00 FF 
23548     01 14 56 F2 | 	cmps	arg02, ##1025 wc
2354c                 | '   x:=1024
2354c     0A 14 C6 39 |  if_ae	decod	arg02, #10
23550                 | ' word[@spr1ptr+12*num+4]:=x
23550     11 E5 05 F1 | 	add	objptr, #273
23554     F2 00 02 F6 | 	mov	_var01, objptr
23558     09 03 02 F6 | 	mov	_var02, arg01
2355c     01 02 66 F0 | 	shl	_var02, #1
23560     09 03 02 F1 | 	add	_var02, arg01
23564     02 02 66 F0 | 	shl	_var02, #2
23568     01 01 02 F1 | 	add	_var01, _var02
2356c     04 00 06 F1 | 	add	_var01, #4
23570     00 15 52 FC | 	wrword	arg02, _var01
23574                 | ' word[@spr1ptr+12*num+6]:=y
23574     F2 00 02 F6 | 	mov	_var01, objptr
23578     09 03 02 F6 | 	mov	_var02, arg01
2357c     01 02 66 F0 | 	shl	_var02, #1
23580     09 03 02 F1 | 	add	_var02, arg01
23584     02 02 66 F0 | 	shl	_var02, #2
23588     01 01 02 F1 | 	add	_var01, _var02
2358c     06 00 06 F1 | 	add	_var01, #6
23590     00 17 52 FC | 	wrword	arg03, _var01
23594     11 E5 85 F1 | 	sub	objptr, #273
23598                 | _hg010b_spin2_setspritepos_ret
23598     2D 00 64 FD | 	ret
2359c                 | 
2359c                 | ' 
2359c                 | ' pub setspritesize(num,w,h)
2359c                 | _hg010b_spin2_setspritesize
2359c                 | ' word[@spr1ptr+12*num+8]:=w
2359c     11 E5 05 F1 | 	add	objptr, #273
235a0     F2 00 02 F6 | 	mov	_var01, objptr
235a4     09 03 02 F6 | 	mov	_var02, arg01
235a8     01 02 66 F0 | 	shl	_var02, #1
235ac     09 03 02 F1 | 	add	_var02, arg01
235b0     02 02 66 F0 | 	shl	_var02, #2
235b4     01 01 02 F1 | 	add	_var01, _var02
235b8     08 00 06 F1 | 	add	_var01, #8
235bc     00 15 52 FC | 	wrword	arg02, _var01
235c0                 | ' word[@spr1ptr+12*num+10]:=h
235c0     F2 00 02 F6 | 	mov	_var01, objptr
235c4     09 03 02 F6 | 	mov	_var02, arg01
235c8     01 02 66 F0 | 	shl	_var02, #1
235cc     09 03 02 F1 | 	add	_var02, arg01
235d0     02 02 66 F0 | 	shl	_var02, #2
235d4     01 01 02 F1 | 	add	_var01, _var02
235d8     0A 00 06 F1 | 	add	_var01, #10
235dc     00 17 52 FC | 	wrword	arg03, _var01
235e0     11 E5 85 F1 | 	sub	objptr, #273
235e4                 | _hg010b_spin2_setspritesize_ret
235e4     2D 00 64 FD | 	ret
235e8                 | 
235e8                 | ' 
235e8                 | ' 
235e8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
235e8                 | ' 
235e8                 | ' 
235e8                 | ' pub putpixel(x,y,c)
235e8                 | _hg010b_spin2_putpixel
235e8     04 4A 05 F6 | 	mov	COUNT_, #4
235ec     A8 00 A0 FD | 	call	#pushregs_
235f0     09 27 02 F6 | 	mov	local01, arg01
235f4                 | ' 
235f4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
235f4     00 28 06 F6 | 	mov	local02, #0
235f8     00 26 56 F2 | 	cmps	local01, #0 wc
235fc     01 28 66 36 |  if_ae	neg	local02, #1
23600     E9 E4 05 F1 | 	add	objptr, #233
23604     F2 1A 02 FB | 	rdlong	arg05, objptr
23608     02 1A 66 F0 | 	shl	arg05, #2
2360c     0D 27 52 F2 | 	cmps	local01, arg05 wc
23610     15 2B A2 F1 | 	subx	local03, local03
23614     15 29 02 F5 | 	and	local02, local03
23618     00 2A 06 F6 | 	mov	local03, #0
2361c     00 14 56 F2 | 	cmps	arg02, #0 wc
23620     01 2A 66 36 |  if_ae	neg	local03, #1
23624     15 29 02 F5 | 	and	local02, local03
23628     04 E4 85 F1 | 	sub	objptr, #4
2362c     F2 2A 02 FB | 	rdlong	local03, objptr
23630     E5 E4 85 F1 | 	sub	objptr, #229
23634     15 15 52 F2 | 	cmps	arg02, local03 wc
23638     16 2D A2 F1 | 	subx	local04, local04
2363c     16 29 CA F7 | 	test	local02, local04 wz
23640     48 00 90 AD |  if_e	jmp	#LR__2720
23644     DD E4 05 F1 | 	add	objptr, #221
23648     F2 12 02 FB | 	rdlong	arg01, objptr
2364c     14 E4 05 F1 | 	add	objptr, #20
23650     F2 2C 02 FB | 	rdlong	local04, objptr
23654     02 2C 66 F0 | 	shl	local04, #2
23658     0A 2D 02 FD | 	qmul	local04, arg02
2365c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
2365c     0B 15 02 F6 | 	mov	arg02, arg03
23660     01 16 06 F6 | 	mov	arg03, #1
23664     00 18 06 F6 | 	mov	arg04, #0
23668     01 1A 06 F6 | 	mov	arg05, #1
2366c     0A 00 00 FF 
23670     DB E5 05 F1 | 	add	objptr, ##5595
23674     18 2C 62 FD | 	getqx	local04
23678     13 2D 02 F1 | 	add	local04, local01
2367c     16 13 02 F1 | 	add	arg01, local04
23680     6C 1D B0 FD | 	call	#_psram_spin2_fill
23684     0B 00 00 FF 
23688     CC E4 85 F1 | 	sub	objptr, ##5836
2368c                 | LR__2720
2368c     A7 F0 03 F6 | 	mov	ptra, fp
23690     B2 00 A0 FD | 	call	#popregs_
23694                 | _hg010b_spin2_putpixel_ret
23694     2D 00 64 FD | 	ret
23698                 | 
23698                 | ' 
23698                 | ' pub putpixel2(x,y,c)
23698                 | _hg010b_spin2_putpixel2
23698     02 4A 05 F6 | 	mov	COUNT_, #2
2369c     A8 00 A0 FD | 	call	#pushregs_
236a0     DD E4 05 F1 | 	add	objptr, #221
236a4     F2 26 02 FB | 	rdlong	local01, objptr
236a8     14 E4 05 F1 | 	add	objptr, #20
236ac     F2 1A 02 FB | 	rdlong	arg05, objptr
236b0     02 1A 66 F0 | 	shl	arg05, #2
236b4     0A 1B 02 FD | 	qmul	arg05, arg02
236b8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
236b8     0B 15 02 F6 | 	mov	arg02, arg03
236bc     01 16 06 F6 | 	mov	arg03, #1
236c0     00 18 06 F6 | 	mov	arg04, #0
236c4     01 1A 06 F6 | 	mov	arg05, #1
236c8     0A 00 00 FF 
236cc     DB E5 05 F1 | 	add	objptr, ##5595
236d0     18 28 62 FD | 	getqx	local02
236d4     09 29 02 F1 | 	add	local02, arg01
236d8     14 27 02 F1 | 	add	local01, local02
236dc     13 13 02 F6 | 	mov	arg01, local01
236e0     0C 1D B0 FD | 	call	#_psram_spin2_fill
236e4     0B 00 00 FF 
236e8     CC E4 85 F1 | 	sub	objptr, ##5836
236ec     A7 F0 03 F6 | 	mov	ptra, fp
236f0     B2 00 A0 FD | 	call	#popregs_
236f4                 | _hg010b_spin2_putpixel2_ret
236f4     2D 00 64 FD | 	ret
236f8                 | 
236f8                 | ' 
236f8                 | ' pub getpixel2(x,y): c 
236f8                 | _hg010b_spin2_getpixel2
236f8     02 4A 05 F6 | 	mov	COUNT_, #2
236fc     A8 00 A0 FD | 	call	#pushregs_
23700     0C F0 07 F1 | 	add	ptra, #12
23704     04 4E 05 F1 | 	add	fp, #4
23708     A7 12 62 FC | 	wrlong	arg01, fp
2370c     04 4E 05 F1 | 	add	fp, #4
23710     A7 14 62 FC | 	wrlong	arg02, fp
23714     08 4E 85 F1 | 	sub	fp, #8
23718     A7 00 68 FC | 	wrlong	#0, fp
2371c     A7 12 02 F6 | 	mov	arg01, fp
23720     DD E4 05 F1 | 	add	objptr, #221
23724     F2 14 02 FB | 	rdlong	arg02, objptr
23728     14 E4 05 F1 | 	add	objptr, #20
2372c     F2 16 02 FB | 	rdlong	arg03, objptr
23730     02 16 66 F0 | 	shl	arg03, #2
23734     08 4E 05 F1 | 	add	fp, #8
23738     A7 FA 01 FB | 	rdlong	result1, fp
2373c     FD 16 02 FD | 	qmul	arg03, result1
23740                 | ' 
23740                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
23740     04 4E 85 F1 | 	sub	fp, #4
23744     A7 26 02 FB | 	rdlong	local01, fp
23748     04 4E 85 F1 | 	sub	fp, #4
2374c     01 16 06 F6 | 	mov	arg03, #1
23750     0A 00 00 FF 
23754     DB E5 05 F1 | 	add	objptr, ##5595
23758     18 28 62 FD | 	getqx	local02
2375c     13 29 02 F1 | 	add	local02, local01
23760     14 15 02 F1 | 	add	arg02, local02
23764     50 1B B0 FD | 	call	#_psram_spin2_read1
23768     0B 00 00 FF 
2376c     CC E4 85 F1 | 	sub	objptr, ##5836
23770                 | ' return c
23770     A7 FA 01 FB | 	rdlong	result1, fp
23774     A7 F0 03 F6 | 	mov	ptra, fp
23778     B2 00 A0 FD | 	call	#popregs_
2377c                 | _hg010b_spin2_getpixel2_ret
2377c     2D 00 64 FD | 	ret
23780                 | 
23780                 | '   
23780                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
23780                 | ' 
23780                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
23780                 | _hg010b_spin2_fastline
23780     02 4A 05 F6 | 	mov	COUNT_, #2
23784     A8 00 A0 FD | 	call	#pushregs_
23788     09 27 02 F6 | 	mov	local01, arg01
2378c     0A 29 02 F6 | 	mov	local02, arg02
23790                 | ' 
23790                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
23790     00 16 56 F2 | 	cmps	arg03, #0 wc
23794     F4 00 90 CD |  if_b	jmp	#LR__2730
23798     01 00 00 FF 
2379c     2A E4 05 F1 | 	add	objptr, ##554
237a0     F2 1A 02 FB | 	rdlong	arg05, objptr
237a4     01 00 00 FF 
237a8     2A E4 85 F1 | 	sub	objptr, ##554
237ac     0D 17 52 F2 | 	cmps	arg03, arg05 wc
237b0     D8 00 90 3D |  if_ae	jmp	#LR__2730
237b4     00 26 56 F2 | 	cmps	local01, #0 wc
237b8     00 28 56 C2 |  if_b	cmps	local02, #0 wc
237bc     CC 00 90 CD |  if_b	jmp	#LR__2730
237c0     01 00 00 FF 
237c4     26 E4 05 F1 | 	add	objptr, ##550
237c8     F2 1A 02 FB | 	rdlong	arg05, objptr
237cc     01 00 00 FF 
237d0     26 E4 85 F1 | 	sub	objptr, ##550
237d4     0D 27 5A F2 | 	cmps	local01, arg05 wcz
237d8     01 00 00 1F 
237dc     26 E4 05 11 |  if_a	add	objptr, ##550
237e0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
237e4     01 00 00 1F 
237e8     26 E4 85 11 |  if_a	sub	objptr, ##550
237ec     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
237f0                 | '   return
237f0     98 00 90 1D |  if_a	jmp	#LR__2730
237f4     14 27 5A F2 | 	cmps	local01, local02 wcz
237f8     13 1B 02 16 |  if_a	mov	arg05, local01
237fc     14 27 02 16 |  if_a	mov	local01, local02
23800     0D 29 02 16 |  if_a	mov	local02, arg05
23804     00 26 56 F2 | 	cmps	local01, #0 wc
23808     00 26 06 C6 |  if_b	mov	local01, #0
2380c     01 00 00 FF 
23810     26 E4 05 F1 | 	add	objptr, ##550
23814     F2 1A 02 FB | 	rdlong	arg05, objptr
23818     01 00 00 FF 
2381c     26 E4 85 F1 | 	sub	objptr, ##550
23820     0D 29 52 F2 | 	cmps	local02, arg05 wc
23824     01 00 00 3F 
23828     26 E4 05 31 |  if_ae	add	objptr, ##550
2382c     F2 28 02 3B |  if_ae	rdlong	local02, objptr
23830     01 00 00 3F 
23834     26 E4 85 31 |  if_ae	sub	objptr, ##550
23838     DD E4 05 F1 | 	add	objptr, #221
2383c     F2 12 02 FB | 	rdlong	arg01, objptr
23840     14 E4 05 F1 | 	add	objptr, #20
23844     F2 1A 02 FB | 	rdlong	arg05, objptr
23848     02 1A 66 F0 | 	shl	arg05, #2
2384c     0B 1B 02 FD | 	qmul	arg05, arg03
23850                 | ' if x1>x2
23850                 | '   x1,x2:=x2,x1
23850                 | ' if x1<0 
23850                 | '   x1:=0
23850                 | ' if x2>=xres
23850                 | '   x2:=xres-1  
23850     01 28 86 31 |  if_ae	sub	local02, #1
23854                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
23854     01 16 06 F6 | 	mov	arg03, #1
23858     14 17 02 F1 | 	add	arg03, local02
2385c     13 17 82 F1 | 	sub	arg03, local01
23860     0C 15 02 F6 | 	mov	arg02, arg04
23864     00 18 06 F6 | 	mov	arg04, #0
23868     01 1A 06 F6 | 	mov	arg05, #1
2386c     0A 00 00 FF 
23870     DB E5 05 F1 | 	add	objptr, ##5595
23874     18 28 62 FD | 	getqx	local02
23878     13 29 02 F1 | 	add	local02, local01
2387c     14 13 02 F1 | 	add	arg01, local02
23880     6C 1B B0 FD | 	call	#_psram_spin2_fill
23884     0B 00 00 FF 
23888     CC E4 85 F1 | 	sub	objptr, ##5836
2388c                 | LR__2730
2388c     A7 F0 03 F6 | 	mov	ptra, fp
23890     B2 00 A0 FD | 	call	#popregs_
23894                 | _hg010b_spin2_fastline_ret
23894     2D 00 64 FD | 	ret
23898                 | 
23898                 | ' 
23898                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
23898                 | _hg010b_spin2_draw
23898     0E 4A 05 F6 | 	mov	COUNT_, #14
2389c     A8 00 A0 FD | 	call	#pushregs_
238a0     09 27 02 F6 | 	mov	local01, arg01
238a4     0A 29 02 F6 | 	mov	local02, arg02
238a8     0B 2B 02 F6 | 	mov	local03, arg03
238ac     0C 2D 02 F6 | 	mov	local04, arg04
238b0     0D 2F 02 F6 | 	mov	local05, arg05
238b4                 | ' 
238b4                 | ' if (y1==y2)
238b4     16 29 0A F2 | 	cmp	local02, local04 wz
238b8     18 00 90 5D |  if_ne	jmp	#LR__2740
238bc                 | '   fastline(x1,x2,y1,c)
238bc     13 13 02 F6 | 	mov	arg01, local01
238c0     15 15 02 F6 | 	mov	arg02, local03
238c4     14 17 02 F6 | 	mov	arg03, local02
238c8     17 19 02 F6 | 	mov	arg04, local05
238cc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
238d0     F8 00 90 FD | 	jmp	#LR__2746
238d4                 | LR__2740
238d4                 | ' else  
238d4                 | '   x:=x1
238d4     13 31 02 F6 | 	mov	local06, local01
238d8                 | '   y:=y1
238d8     14 33 02 F6 | 	mov	local07, local02
238dc                 | ' 
238dc                 | '   if (x1<x2) 
238dc     15 27 52 F2 | 	cmps	local01, local03 wc
238e0                 | '     xi:=1
238e0     01 34 06 C6 |  if_b	mov	local08, #1
238e4                 | '     dx:=x2-x1
238e4     15 37 02 C6 |  if_b	mov	local09, local03
238e8     13 37 82 C1 |  if_b	sub	local09, local01
238ec                 | '   else
238ec                 | '     xi:=-1
238ec     01 34 66 36 |  if_ae	neg	local08, #1
238f0                 | '     dx:=x1-x2
238f0     15 27 82 31 |  if_ae	sub	local01, local03
238f4     13 37 02 36 |  if_ae	mov	local09, local01
238f8                 | '   
238f8                 | '   if (y1<y2) 
238f8     16 29 52 F2 | 	cmps	local02, local04 wc
238fc                 | '     yi:=1
238fc     01 38 06 C6 |  if_b	mov	local10, #1
23900                 | '     dy:=y2-y1
23900     16 3B 02 C6 |  if_b	mov	local11, local04
23904     14 3B 82 C1 |  if_b	sub	local11, local02
23908                 | '   else
23908                 | '     yi:=-1
23908     01 38 66 36 |  if_ae	neg	local10, #1
2390c                 | '     dy:=y1-y2
2390c     16 29 82 31 |  if_ae	sub	local02, local04
23910     14 3B 02 36 |  if_ae	mov	local11, local02
23914                 | ' 
23914                 | '   putpixel(x,y,c)
23914     17 17 02 F6 | 	mov	arg03, local05
23918     18 13 02 F6 | 	mov	arg01, local06
2391c     19 15 02 F6 | 	mov	arg02, local07
23920     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
23924                 | ' 
23924                 | '   if (dx>dy)
23924     1D 37 5A F2 | 	cmps	local09, local11 wcz
23928     50 00 90 ED |  if_be	jmp	#LR__2742
2392c                 | '     ai:=(dy-dx)*2
2392c     1D 3D 02 F6 | 	mov	local12, local11
23930     1B 3D 82 F1 | 	sub	local12, local09
23934     01 3C 66 F0 | 	shl	local12, #1
23938                 | '     bi:=dy*2
23938     01 3A 66 F0 | 	shl	local11, #1
2393c     1D 3F 02 F6 | 	mov	local13, local11
23940                 | '     d:= bi-dx
23940     1F 41 02 F6 | 	mov	local14, local13
23944     1B 41 82 F1 | 	sub	local14, local09
23948                 | '     repeat while (x<>x2) 
23948                 | LR__2741
23948     15 31 0A F2 | 	cmp	local06, local03 wz
2394c     7C 00 90 AD |  if_e	jmp	#LR__2745
23950                 | '       if (d>=0) 
23950     00 40 56 F2 | 	cmps	local14, #0 wc
23954                 | '         x+=xi
23954     1A 31 02 31 |  if_ae	add	local06, local08
23958                 | '         y+=yi
23958     1C 33 02 31 |  if_ae	add	local07, local10
2395c                 | '         d+=ai
2395c     1E 41 02 31 |  if_ae	add	local14, local12
23960                 | '       else
23960                 | '         d+=bi
23960     1F 41 02 C1 |  if_b	add	local14, local13
23964                 | '         x+=xi
23964     1A 31 02 C1 |  if_b	add	local06, local08
23968                 | '       putpixel(x,y,c)
23968     18 13 02 F6 | 	mov	arg01, local06
2396c     19 15 02 F6 | 	mov	arg02, local07
23970     17 17 02 F6 | 	mov	arg03, local05
23974     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
23978     CC FF 9F FD | 	jmp	#LR__2741
2397c                 | LR__2742
2397c                 | '   else
2397c                 | '     ai:=(dx-dy)*2
2397c     1B 3D 02 F6 | 	mov	local12, local09
23980     1D 3D 82 F1 | 	sub	local12, local11
23984     01 3C 66 F0 | 	shl	local12, #1
23988                 | '     bi:=dx*2
23988     01 36 66 F0 | 	shl	local09, #1
2398c     1B 3F 02 F6 | 	mov	local13, local09
23990                 | '     d:=bi-dy
23990     1F 41 02 F6 | 	mov	local14, local13
23994     1D 41 82 F1 | 	sub	local14, local11
23998                 | '     repeat while (y<>y2)
23998                 | LR__2743
23998     16 33 0A F2 | 	cmp	local07, local04 wz
2399c     2C 00 90 AD |  if_e	jmp	#LR__2744
239a0                 | '       if (d>=0)
239a0     00 40 56 F2 | 	cmps	local14, #0 wc
239a4                 | '         x+=xi
239a4     1A 31 02 31 |  if_ae	add	local06, local08
239a8                 | '         y+=yi
239a8     1C 33 02 31 |  if_ae	add	local07, local10
239ac                 | '         d+=ai
239ac     1E 41 02 31 |  if_ae	add	local14, local12
239b0                 | '       else
239b0                 | '         d+=bi
239b0     1F 41 02 C1 |  if_b	add	local14, local13
239b4                 | '         y+=yi
239b4     1C 33 02 C1 |  if_b	add	local07, local10
239b8                 | '       putpixel(x, y,c)
239b8     18 13 02 F6 | 	mov	arg01, local06
239bc     19 15 02 F6 | 	mov	arg02, local07
239c0     17 17 02 F6 | 	mov	arg03, local05
239c4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
239c8     CC FF 9F FD | 	jmp	#LR__2743
239cc                 | LR__2744
239cc                 | LR__2745
239cc                 | LR__2746
239cc     A7 F0 03 F6 | 	mov	ptra, fp
239d0     B2 00 A0 FD | 	call	#popregs_
239d4                 | _hg010b_spin2_draw_ret
239d4     2D 00 64 FD | 	ret
239d8                 | 
239d8                 | '  
239d8                 | ' pub fillpush(val) 
239d8                 | _hg010b_spin2_fillpush
239d8                 | ' fillstack[fillptr]:=val
239d8     0B 00 00 FF 
239dc     BA E4 05 F1 | 	add	objptr, ##5818
239e0     F2 00 02 FB | 	rdlong	_var01, objptr
239e4     02 00 66 F0 | 	shl	_var01, #2
239e8     0A 00 00 FF 
239ec     00 E4 85 F1 | 	sub	objptr, ##5120
239f0     F2 00 02 F1 | 	add	_var01, objptr
239f4     00 13 62 FC | 	wrlong	arg01, _var01
239f8                 | ' fillptr+=1   
239f8     0A 00 00 FF 
239fc     00 E4 05 F1 | 	add	objptr, ##5120
23a00     F2 00 02 FB | 	rdlong	_var01, objptr
23a04     01 00 06 F1 | 	add	_var01, #1
23a08     F2 00 62 FC | 	wrlong	_var01, objptr
23a0c     0B 00 00 FF 
23a10     BA E4 85 F1 | 	sub	objptr, ##5818
23a14                 | _hg010b_spin2_fillpush_ret
23a14     2D 00 64 FD | 	ret
23a18                 | 
23a18                 | ' 
23a18                 | '     
23a18                 | ' pub fillpop() : val
23a18                 | _hg010b_spin2_fillpop
23a18                 | ' 
23a18                 | ' fillptr-=1
23a18     0B 00 00 FF 
23a1c     BA E4 05 F1 | 	add	objptr, ##5818
23a20     F2 FA 01 FB | 	rdlong	result1, objptr
23a24     01 FA 85 F1 | 	sub	result1, #1
23a28     F2 FA 61 FC | 	wrlong	result1, objptr
23a2c                 | ' if fillptr<0
23a2c     0B 00 00 FF 
23a30     BA E4 85 F1 | 	sub	objptr, ##5818
23a34     00 FA 55 F2 | 	cmps	result1, #0 wc
23a38                 | '   fillptr:=0
23a38     0B 00 00 CF 
23a3c     BA E4 05 C1 |  if_b	add	objptr, ##5818
23a40     F2 00 68 CC |  if_b	wrlong	#0, objptr
23a44     0B 00 00 CF 
23a48     BA E4 85 C1 |  if_b	sub	objptr, ##5818
23a4c                 | '   val:=-12345
23a4c     E7 FF 7F CF 
23a50     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
23a54     28 00 90 CD |  if_b	jmp	#LR__2750
23a58                 | ' else 
23a58                 | '   val:=fillstack[fillptr]
23a58     0B 00 00 FF 
23a5c     BA E4 05 F1 | 	add	objptr, ##5818
23a60     F2 00 02 FB | 	rdlong	_var01, objptr
23a64     02 00 66 F0 | 	shl	_var01, #2
23a68     0A 00 00 FF 
23a6c     00 E4 85 F1 | 	sub	objptr, ##5120
23a70     F2 00 02 F1 | 	add	_var01, objptr
23a74     00 01 02 FB | 	rdlong	_var01, _var01
23a78     01 00 00 FF 
23a7c     BA E4 85 F1 | 	sub	objptr, ##698
23a80                 | LR__2750
23a80                 | ' return val
23a80     00 FB 01 F6 | 	mov	result1, _var01
23a84                 | _hg010b_spin2_fillpop_ret
23a84     2D 00 64 FD | 	ret
23a88                 | 
23a88                 | ' 
23a88                 | '       
23a88                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
23a88                 | _hg010b_spin2_fill
23a88     0B 4A 05 F6 | 	mov	COUNT_, #11
23a8c     A8 00 A0 FD | 	call	#pushregs_
23a90                 | ' 
23a90                 | ' newcolor:=newcolor & 255
23a90     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
23a94                 | ' oldcolor:=oldcolor & 255
23a94     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
23a98                 | ' 
23a98                 | ' if (oldcolor == newcolor) 
23a98     13 29 0A F2 | 	cmp	local02, local01 wz
23a9c                 | '   return
23a9c     70 02 90 AD |  if_e	jmp	#LR__2769
23aa0                 | ' 
23aa0                 | ' fillptr:=0
23aa0     0B 00 00 FF 
23aa4     BA E4 05 F1 | 	add	objptr, ##5818
23aa8     F2 00 68 FC | 	wrlong	#0, objptr
23aac                 | ' fillmax:=0
23aac     04 E4 05 F1 | 	add	objptr, #4
23ab0     F2 00 68 FC | 	wrlong	#0, objptr
23ab4     0B 00 00 FF 
23ab8     BE E4 85 F1 | 	sub	objptr, ##5822
23abc                 | ' fillpush(x)
23abc     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
23ac0                 | ' fillpush(y)
23ac0     0A 13 02 F6 | 	mov	arg01, arg02
23ac4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
23ac8                 | ' y:=fillpop()
23ac8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
23acc     FD 2A 02 F6 | 	mov	local03, result1
23ad0                 | ' x:=fillpop()
23ad0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
23ad4     FD 2C 02 F6 | 	mov	local04, result1
23ad8                 | ' 'pinhigh(38)
23ad8                 | ' repeat while (x>-1)       
23ad8                 | LR__2760
23ad8     00 2C 56 F2 | 	cmps	local04, #0 wc
23adc     30 02 90 CD |  if_b	jmp	#LR__2768
23ae0                 | '  ' pintoggle(39)
23ae0                 | '   x1 := x
23ae0     16 2F 02 F6 | 	mov	local05, local04
23ae4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
23ae4                 | LR__2761
23ae4     00 30 06 F6 | 	mov	local06, #0
23ae8     00 32 06 F6 | 	mov	local07, #0
23aec     00 2E 56 F2 | 	cmps	local05, #0 wc
23af0     01 32 66 36 |  if_ae	neg	local07, #1
23af4     00 32 0E F2 | 	cmp	local07, #0 wz
23af8     00 30 26 56 |  if_ne	not	local06, #0
23afc     00 34 06 F6 | 	mov	local08, #0
23b00     00 36 06 F6 | 	mov	local09, #0
23b04     15 15 02 F6 | 	mov	arg02, local03
23b08     17 13 02 F6 | 	mov	arg01, local05
23b0c     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23b10     14 FB 09 F2 | 	cmp	result1, local02 wz
23b14     00 36 26 A6 |  if_e	not	local09, #0
23b18     00 36 0E F2 | 	cmp	local09, #0 wz
23b1c     00 34 26 56 |  if_ne	not	local08, #0
23b20     1A 31 CA F7 | 	test	local06, local08 wz
23b24                 | '     x1--
23b24     01 2E 86 51 |  if_ne	sub	local05, #1
23b28     B8 FF 9F 5D |  if_ne	jmp	#LR__2761
23b2c                 | '   x1++
23b2c     01 2E 06 F1 | 	add	local05, #1
23b30                 | '   spanabove := 0
23b30     00 38 06 F6 | 	mov	local10, #0
23b34                 | '   spanbelow := 0
23b34     00 3A 06 F6 | 	mov	local11, #0
23b38                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
23b38                 | LR__2762
23b38     00 30 06 F6 | 	mov	local06, #0
23b3c     02 00 00 FF 
23b40     00 2E 56 F2 | 	cmps	local05, ##1024 wc
23b44     00 30 26 C6 |  if_b	not	local06, #0
23b48     00 34 06 F6 | 	mov	local08, #0
23b4c     00 36 06 F6 | 	mov	local09, #0
23b50     15 15 02 F6 | 	mov	arg02, local03
23b54     17 13 02 F6 | 	mov	arg01, local05
23b58     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
23b5c     14 FB 09 F2 | 	cmp	result1, local02 wz
23b60     00 36 26 A6 |  if_e	not	local09, #0
23b64     00 36 0E F2 | 	cmp	local09, #0 wz
23b68     00 34 26 56 |  if_ne	not	local08, #0
23b6c     1A 31 CA F7 | 	test	local06, local08 wz
23b70     88 01 90 AD |  if_e	jmp	#LR__2767
23b74                 | '     putpixel2 (x1,y, newcolor & 255)
23b74     13 17 E2 F8 | 	getbyte	arg03, local01, #0
23b78     17 13 02 F6 | 	mov	arg01, local05
23b7c     15 15 02 F6 | 	mov	arg02, local03
23b80     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
23b84                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
23b84     00 30 06 F6 | 	mov	local06, #0
23b88     00 32 06 F6 | 	mov	local07, #0
23b8c     00 38 0E F2 | 	cmp	local10, #0 wz
23b90     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
23b94     01 32 66 26 |  if_nc_and_z	neg	local07, #1
23b98     00 32 0E F2 | 	cmp	local07, #0 wz
23b9c     00 30 26 56 |  if_ne	not	local06, #0
23ba0     00 34 06 F6 | 	mov	local08, #0
23ba4     00 36 06 F6 | 	mov	local09, #0
23ba8     15 15 02 F6 | 	mov	arg02, local03
23bac     01 14 86 F1 | 	sub	arg02, #1
23bb0     17 13 02 F6 | 	mov	arg01, local05
23bb4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
23bb8     14 FB 09 F2 | 	cmp	result1, local02 wz
23bbc     00 36 26 A6 |  if_e	not	local09, #0
23bc0     00 36 0E F2 | 	cmp	local09, #0 wz
23bc4     00 34 26 56 |  if_ne	not	local08, #0
23bc8     1A 31 CA F7 | 	test	local06, local08 wz
23bcc     1C 00 90 AD |  if_e	jmp	#LR__2763
23bd0                 | '       fillpush(x1)
23bd0     17 13 02 F6 | 	mov	arg01, local05
23bd4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
23bd8                 | '       fillpush(y-1)
23bd8     15 13 02 F6 | 	mov	arg01, local03
23bdc     01 12 86 F1 | 	sub	arg01, #1
23be0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
23be4                 | '       spanabove := 1 
23be4     01 38 06 F6 | 	mov	local10, #1
23be8     4C 00 90 FD | 	jmp	#LR__2764
23bec                 | LR__2763
23bec                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
23bec     00 30 06 F6 | 	mov	local06, #0
23bf0     00 32 06 F6 | 	mov	local07, #0
23bf4     00 38 0E F2 | 	cmp	local10, #0 wz
23bf8     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
23bfc     01 32 66 16 |  if_a	neg	local07, #1
23c00     00 32 0E F2 | 	cmp	local07, #0 wz
23c04     00 30 26 56 |  if_ne	not	local06, #0
23c08     00 34 06 F6 | 	mov	local08, #0
23c0c     00 36 06 F6 | 	mov	local09, #0
23c10     15 15 02 F6 | 	mov	arg02, local03
23c14     01 14 86 F1 | 	sub	arg02, #1
23c18     17 13 02 F6 | 	mov	arg01, local05
23c1c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23c20     14 FB 09 F2 | 	cmp	result1, local02 wz
23c24     00 36 26 56 |  if_ne	not	local09, #0
23c28     00 36 0E F2 | 	cmp	local09, #0 wz
23c2c     00 34 26 56 |  if_ne	not	local08, #0
23c30     1A 31 CA F7 | 	test	local06, local08 wz
23c34                 | '       spanabove := 0 
23c34     00 38 06 56 |  if_ne	mov	local10, #0
23c38                 | LR__2764
23c38                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
23c38     00 30 06 F6 | 	mov	local06, #0
23c3c     00 32 06 F6 | 	mov	local07, #0
23c40     00 3A 0E F2 | 	cmp	local11, #0 wz
23c44     01 00 00 AF 
23c48     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
23c4c     01 32 66 86 |  if_c_and_z	neg	local07, #1
23c50     00 32 0E F2 | 	cmp	local07, #0 wz
23c54     00 30 26 56 |  if_ne	not	local06, #0
23c58     00 34 06 F6 | 	mov	local08, #0
23c5c     00 36 06 F6 | 	mov	local09, #0
23c60     15 15 02 F6 | 	mov	arg02, local03
23c64     01 14 06 F1 | 	add	arg02, #1
23c68     17 13 02 F6 | 	mov	arg01, local05
23c6c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
23c70     14 FB 09 F2 | 	cmp	result1, local02 wz
23c74     00 36 26 A6 |  if_e	not	local09, #0
23c78     00 36 0E F2 | 	cmp	local09, #0 wz
23c7c     00 34 26 56 |  if_ne	not	local08, #0
23c80     1A 31 CA F7 | 	test	local06, local08 wz
23c84     1C 00 90 AD |  if_e	jmp	#LR__2765
23c88                 | '       fillpush(x1)
23c88     17 13 02 F6 | 	mov	arg01, local05
23c8c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
23c90                 | '       fillpush(y + 1)
23c90     15 13 02 F6 | 	mov	arg01, local03
23c94     01 12 06 F1 | 	add	arg01, #1
23c98     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
23c9c                 | '       spanBelow := 1
23c9c     01 3A 06 F6 | 	mov	local11, #1
23ca0     50 00 90 FD | 	jmp	#LR__2766
23ca4                 | LR__2765
23ca4                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
23ca4     00 30 06 F6 | 	mov	local06, #0
23ca8     00 32 06 F6 | 	mov	local07, #0
23cac     00 3A 0E F2 | 	cmp	local11, #0 wz
23cb0     01 00 00 5F 
23cb4     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
23cb8     01 32 66 46 |  if_c_and_nz	neg	local07, #1
23cbc     00 32 0E F2 | 	cmp	local07, #0 wz
23cc0     00 30 26 56 |  if_ne	not	local06, #0
23cc4     00 34 06 F6 | 	mov	local08, #0
23cc8     00 36 06 F6 | 	mov	local09, #0
23ccc     15 15 02 F6 | 	mov	arg02, local03
23cd0     01 14 06 F1 | 	add	arg02, #1
23cd4     17 13 02 F6 | 	mov	arg01, local05
23cd8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
23cdc     14 FB 09 F2 | 	cmp	result1, local02 wz
23ce0     00 36 26 56 |  if_ne	not	local09, #0
23ce4     00 36 0E F2 | 	cmp	local09, #0 wz
23ce8     00 34 26 56 |  if_ne	not	local08, #0
23cec     1A 31 CA F7 | 	test	local06, local08 wz
23cf0                 | '       spanbelow := 0
23cf0     00 3A 06 56 |  if_ne	mov	local11, #0
23cf4                 | LR__2766
23cf4                 | '     x1++
23cf4     01 2E 06 F1 | 	add	local05, #1
23cf8     3C FE 9F FD | 	jmp	#LR__2762
23cfc                 | LR__2767
23cfc                 | '   y:=fillpop()
23cfc     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
23d00     FD 2A 02 F6 | 	mov	local03, result1
23d04                 | '   x:=fillpop()
23d04     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
23d08     FD 2C 02 F6 | 	mov	local04, result1
23d0c     C8 FD 9F FD | 	jmp	#LR__2760
23d10                 | LR__2768
23d10                 | LR__2769
23d10     A7 F0 03 F6 | 	mov	ptra, fp
23d14     B2 00 A0 FD | 	call	#popregs_
23d18                 | _hg010b_spin2_fill_ret
23d18     2D 00 64 FD | 	ret
23d1c                 | 
23d1c                 | ' 'pinlow(38)    
23d1c                 | ' 
23d1c                 | ' '-- A filled circle -----------------------------------------------------
23d1c                 | ' 
23d1c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
23d1c                 | _hg010b_spin2_fcircle
23d1c     08 4A 05 F6 | 	mov	COUNT_, #8
23d20     A8 00 A0 FD | 	call	#pushregs_
23d24     0B 27 02 F6 | 	mov	local01, arg03
23d28     FF FF 7F FF 
23d2c     FE 27 06 FD | 	qmul	local01, ##-2
23d30     09 29 02 F6 | 	mov	local02, arg01
23d34     0A 2B 02 F6 | 	mov	local03, arg02
23d38     0C 2D 02 F6 | 	mov	local04, arg04
23d3c                 | ' 
23d3c                 | ' d:=5-4*r
23d3c     13 19 02 F6 | 	mov	arg04, local01
23d40     02 18 66 F0 | 	shl	arg04, #2
23d44     05 2E 06 F6 | 	mov	local05, #5
23d48     0C 2F 82 F1 | 	sub	local05, arg04
23d4c                 | ' x:=0
23d4c     00 30 06 F6 | 	mov	local06, #0
23d50                 | ' y:=r
23d50                 | ' da:=(-2*r+5)*4
23d50                 | ' db:=3*4
23d50     0C 32 06 F6 | 	mov	local07, #12
23d54                 | ' repeat while (x<=y) 
23d54     18 34 62 FD | 	getqx	local08
23d58     05 34 06 F1 | 	add	local08, #5
23d5c     02 34 66 F0 | 	shl	local08, #2
23d60                 | LR__2770
23d60     13 31 5A F2 | 	cmps	local06, local01 wcz
23d64     B4 00 90 1D |  if_a	jmp	#LR__2772
23d68                 | '   fastline(x0-x,x0+x,y0-y,c)
23d68     14 13 02 F6 | 	mov	arg01, local02
23d6c     18 13 82 F1 | 	sub	arg01, local06
23d70     14 15 02 F6 | 	mov	arg02, local02
23d74     18 15 02 F1 | 	add	arg02, local06
23d78     15 17 02 F6 | 	mov	arg03, local03
23d7c     13 17 82 F1 | 	sub	arg03, local01
23d80     16 19 02 F6 | 	mov	arg04, local04
23d84     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23d88                 | '   fastline(x0-x,x0+x,y0+y,c)
23d88     14 13 02 F6 | 	mov	arg01, local02
23d8c     18 13 82 F1 | 	sub	arg01, local06
23d90     14 15 02 F6 | 	mov	arg02, local02
23d94     18 15 02 F1 | 	add	arg02, local06
23d98     15 17 02 F6 | 	mov	arg03, local03
23d9c     13 17 02 F1 | 	add	arg03, local01
23da0     16 19 02 F6 | 	mov	arg04, local04
23da4     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23da8                 | '   fastline(x0-y,x0+y,y0-x,c)
23da8     14 13 02 F6 | 	mov	arg01, local02
23dac     13 13 82 F1 | 	sub	arg01, local01
23db0     14 15 02 F6 | 	mov	arg02, local02
23db4     13 15 02 F1 | 	add	arg02, local01
23db8     15 17 02 F6 | 	mov	arg03, local03
23dbc     18 17 82 F1 | 	sub	arg03, local06
23dc0     16 19 02 F6 | 	mov	arg04, local04
23dc4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
23dc8                 | '   fastline(x0-y,x0+y,y0+x,c)
23dc8     14 13 02 F6 | 	mov	arg01, local02
23dcc     13 13 82 F1 | 	sub	arg01, local01
23dd0     14 15 02 F6 | 	mov	arg02, local02
23dd4     13 15 02 F1 | 	add	arg02, local01
23dd8     15 17 02 F6 | 	mov	arg03, local03
23ddc     18 17 02 F1 | 	add	arg03, local06
23de0     16 19 02 F6 | 	mov	arg04, local04
23de4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
23de8                 | '   if d>0 
23de8     01 2E 56 F2 | 	cmps	local05, #1 wc
23dec     18 00 90 CD |  if_b	jmp	#LR__2771
23df0                 | '     d+=da
23df0     1A 2F 02 F1 | 	add	local05, local08
23df4                 | '     y-=1
23df4     01 26 86 F1 | 	sub	local01, #1
23df8                 | '     x+=1
23df8     01 30 06 F1 | 	add	local06, #1
23dfc                 | '     da+=4*4
23dfc     10 34 06 F1 | 	add	local08, #16
23e00                 | '     db+=2*4
23e00     08 32 06 F1 | 	add	local07, #8
23e04     58 FF 9F FD | 	jmp	#LR__2770
23e08                 | LR__2771
23e08                 | '   else
23e08                 | '     d+=db
23e08     19 2F 02 F1 | 	add	local05, local07
23e0c                 | '     x+=1
23e0c     01 30 06 F1 | 	add	local06, #1
23e10                 | '     da+=2*4
23e10     08 34 06 F1 | 	add	local08, #8
23e14                 | '     db+=2*4
23e14     08 32 06 F1 | 	add	local07, #8
23e18     44 FF 9F FD | 	jmp	#LR__2770
23e1c                 | LR__2772
23e1c     A7 F0 03 F6 | 	mov	ptra, fp
23e20     B2 00 A0 FD | 	call	#popregs_
23e24                 | _hg010b_spin2_fcircle_ret
23e24     2D 00 64 FD | 	ret
23e28                 | 
23e28                 | '  
23e28                 | ' '-- A circle ------------------------------------------------------------ 
23e28                 | '  
23e28                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
23e28                 | _hg010b_spin2_circle
23e28     08 4A 05 F6 | 	mov	COUNT_, #8
23e2c     A8 00 A0 FD | 	call	#pushregs_
23e30     0B 27 02 F6 | 	mov	local01, arg03
23e34     FF FF 7F FF 
23e38     FE 27 06 FD | 	qmul	local01, ##-2
23e3c     09 29 02 F6 | 	mov	local02, arg01
23e40     0A 2B 02 F6 | 	mov	local03, arg02
23e44     0C 2D 02 F6 | 	mov	local04, arg04
23e48                 | ' 
23e48                 | '  
23e48                 | ' d:=5-4*r
23e48     13 19 02 F6 | 	mov	arg04, local01
23e4c     02 18 66 F0 | 	shl	arg04, #2
23e50     05 2E 06 F6 | 	mov	local05, #5
23e54     0C 2F 82 F1 | 	sub	local05, arg04
23e58                 | ' x:=0
23e58     00 30 06 F6 | 	mov	local06, #0
23e5c                 | ' y:=r
23e5c                 | ' da:=(-2*r+5)*4
23e5c                 | ' db:=3*4
23e5c     0C 32 06 F6 | 	mov	local07, #12
23e60                 | ' repeat while (x<=y) 
23e60     18 34 62 FD | 	getqx	local08
23e64     05 34 06 F1 | 	add	local08, #5
23e68     02 34 66 F0 | 	shl	local08, #2
23e6c                 | LR__2780
23e6c     13 31 5A F2 | 	cmps	local06, local01 wcz
23e70     F4 00 90 1D |  if_a	jmp	#LR__2782
23e74                 | '   putpixel(x0-x,y0-y,c)
23e74     14 13 02 F6 | 	mov	arg01, local02
23e78     18 13 82 F1 | 	sub	arg01, local06
23e7c     15 15 02 F6 | 	mov	arg02, local03
23e80     13 15 82 F1 | 	sub	arg02, local01
23e84     16 17 02 F6 | 	mov	arg03, local04
23e88     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
23e8c                 | '   putpixel(x0-x,y0+y,c)
23e8c     14 13 02 F6 | 	mov	arg01, local02
23e90     18 13 82 F1 | 	sub	arg01, local06
23e94     15 15 02 F6 | 	mov	arg02, local03
23e98     13 15 02 F1 | 	add	arg02, local01
23e9c     16 17 02 F6 | 	mov	arg03, local04
23ea0     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
23ea4                 | '   putpixel(x0+x,y0-y,c)
23ea4     14 13 02 F6 | 	mov	arg01, local02
23ea8     18 13 02 F1 | 	add	arg01, local06
23eac     15 15 02 F6 | 	mov	arg02, local03
23eb0     13 15 82 F1 | 	sub	arg02, local01
23eb4     16 17 02 F6 | 	mov	arg03, local04
23eb8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
23ebc                 | '   putpixel(x0+x,y0+y,c)
23ebc     14 13 02 F6 | 	mov	arg01, local02
23ec0     18 13 02 F1 | 	add	arg01, local06
23ec4     15 15 02 F6 | 	mov	arg02, local03
23ec8     13 15 02 F1 | 	add	arg02, local01
23ecc     16 17 02 F6 | 	mov	arg03, local04
23ed0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
23ed4                 | '   putpixel(x0-y,y0-x,c)
23ed4     14 13 02 F6 | 	mov	arg01, local02
23ed8     13 13 82 F1 | 	sub	arg01, local01
23edc     15 15 02 F6 | 	mov	arg02, local03
23ee0     18 15 82 F1 | 	sub	arg02, local06
23ee4     16 17 02 F6 | 	mov	arg03, local04
23ee8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23eec                 | '   putpixel(x0-y,y0+x,c)
23eec     14 13 02 F6 | 	mov	arg01, local02
23ef0     13 13 82 F1 | 	sub	arg01, local01
23ef4     15 15 02 F6 | 	mov	arg02, local03
23ef8     18 15 02 F1 | 	add	arg02, local06
23efc     16 17 02 F6 | 	mov	arg03, local04
23f00     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
23f04                 | '   putpixel(x0+y,y0-x,c)
23f04     14 13 02 F6 | 	mov	arg01, local02
23f08     13 13 02 F1 | 	add	arg01, local01
23f0c     15 15 02 F6 | 	mov	arg02, local03
23f10     18 15 82 F1 | 	sub	arg02, local06
23f14     16 17 02 F6 | 	mov	arg03, local04
23f18     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
23f1c                 | '   putpixel(x0+y,y0+x,c)
23f1c     14 13 02 F6 | 	mov	arg01, local02
23f20     13 13 02 F1 | 	add	arg01, local01
23f24     15 15 02 F6 | 	mov	arg02, local03
23f28     18 15 02 F1 | 	add	arg02, local06
23f2c     16 17 02 F6 | 	mov	arg03, local04
23f30     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
23f34                 | '   if d>0 
23f34     01 2E 56 F2 | 	cmps	local05, #1 wc
23f38     18 00 90 CD |  if_b	jmp	#LR__2781
23f3c                 | '     d+=da
23f3c     1A 2F 02 F1 | 	add	local05, local08
23f40                 | '     y-=1
23f40     01 26 86 F1 | 	sub	local01, #1
23f44                 | '     x+=1
23f44     01 30 06 F1 | 	add	local06, #1
23f48                 | '     da+=4*4
23f48     10 34 06 F1 | 	add	local08, #16
23f4c                 | '     db+=2*4
23f4c     08 32 06 F1 | 	add	local07, #8
23f50     18 FF 9F FD | 	jmp	#LR__2780
23f54                 | LR__2781
23f54                 | '   else
23f54                 | '     d+=db
23f54     19 2F 02 F1 | 	add	local05, local07
23f58                 | '     x+=1
23f58     01 30 06 F1 | 	add	local06, #1
23f5c                 | '     da+=2*4
23f5c     08 34 06 F1 | 	add	local08, #8
23f60                 | '     db+=2*4
23f60     08 32 06 F1 | 	add	local07, #8
23f64     04 FF 9F FD | 	jmp	#LR__2780
23f68                 | LR__2782
23f68     A7 F0 03 F6 | 	mov	ptra, fp
23f6c     B2 00 A0 FD | 	call	#popregs_
23f70                 | _hg010b_spin2_circle_ret
23f70     2D 00 64 FD | 	ret
23f74                 | 
23f74                 | '     
23f74                 | ' '-- A frame (an empty rectangle) ---------------------------------------
23f74                 | ' 
23f74                 | ' pub frame(x1,y1,x2,y2,c)
23f74                 | _hg010b_spin2_frame
23f74     05 4A 05 F6 | 	mov	COUNT_, #5
23f78     A8 00 A0 FD | 	call	#pushregs_
23f7c     09 27 02 F6 | 	mov	local01, arg01
23f80     0A 29 02 F6 | 	mov	local02, arg02
23f84     0B 2B 02 F6 | 	mov	local03, arg03
23f88     0C 2D 02 F6 | 	mov	local04, arg04
23f8c     0D 2F 02 F6 | 	mov	local05, arg05
23f90                 | ' 
23f90                 | ' fastline(x1,x2,y1,c)
23f90     13 13 02 F6 | 	mov	arg01, local01
23f94     15 15 02 F6 | 	mov	arg02, local03
23f98     14 17 02 F6 | 	mov	arg03, local02
23f9c     17 19 02 F6 | 	mov	arg04, local05
23fa0     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
23fa4                 | ' fastline(x1,x2,y2,c)
23fa4     13 13 02 F6 | 	mov	arg01, local01
23fa8     15 15 02 F6 | 	mov	arg02, local03
23fac     16 17 02 F6 | 	mov	arg03, local04
23fb0     17 19 02 F6 | 	mov	arg04, local05
23fb4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
23fb8                 | ' line(x1,y1,x1,y2,c)
23fb8     13 13 02 F6 | 	mov	arg01, local01
23fbc     14 15 02 F6 | 	mov	arg02, local02
23fc0     13 17 02 F6 | 	mov	arg03, local01
23fc4     16 19 02 F6 | 	mov	arg04, local04
23fc8     17 1B 02 F6 | 	mov	arg05, local05
23fcc                 | ' draw(x1,y1,x2,y2,c)
23fcc     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
23fd0                 | ' line(x2,y1,x2,y2,c)
23fd0     15 13 02 F6 | 	mov	arg01, local03
23fd4     14 15 02 F6 | 	mov	arg02, local02
23fd8     15 17 02 F6 | 	mov	arg03, local03
23fdc     16 19 02 F6 | 	mov	arg04, local04
23fe0     17 1B 02 F6 | 	mov	arg05, local05
23fe4                 | ' draw(x1,y1,x2,y2,c)
23fe4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
23fe8     A7 F0 03 F6 | 	mov	ptra, fp
23fec     B2 00 A0 FD | 	call	#popregs_
23ff0                 | _hg010b_spin2_frame_ret
23ff0     2D 00 64 FD | 	ret
23ff4                 | 
23ff4                 | ' 
23ff4                 | ' '-- A box (a filled rectangle) ----------------------------------------
23ff4                 | ' 
23ff4                 | ' pub box(x1,y1,x2,y2,c) |yy
23ff4                 | _hg010b_spin2_box
23ff4     06 4A 05 F6 | 	mov	COUNT_, #6
23ff8     A8 00 A0 FD | 	call	#pushregs_
23ffc     09 27 02 F6 | 	mov	local01, arg01
24000     0A 29 02 F6 | 	mov	local02, arg02
24004     0B 2B 02 F6 | 	mov	local03, arg03
24008     0C 2D 02 F6 | 	mov	local04, arg04
2400c     0D 2F 02 F6 | 	mov	local05, arg05
24010                 | ' 
24010                 | ' repeat yy from y1 to y2
24010     14 2D 52 F2 | 	cmps	local04, local02 wc
24014     01 30 86 F6 | 	negc	local06, #1
24018     18 2D 02 F1 | 	add	local04, local06
2401c                 | LR__2790
2401c                 | '   fastline(x1,x2,yy,c)
2401c     13 13 02 F6 | 	mov	arg01, local01
24020     15 15 02 F6 | 	mov	arg02, local03
24024     17 19 02 F6 | 	mov	arg04, local05
24028     14 17 02 F6 | 	mov	arg03, local02
2402c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24030     18 29 02 F1 | 	add	local02, local06
24034     16 29 0A F2 | 	cmp	local02, local04 wz
24038     E0 FF 9F 5D |  if_ne	jmp	#LR__2790
2403c     A7 F0 03 F6 | 	mov	ptra, fp
24040     B2 00 A0 FD | 	call	#popregs_
24044                 | _hg010b_spin2_box_ret
24044     2D 00 64 FD | 	ret
24048                 | 
24048                 | '       
24048                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24048                 | _hg010b_spin2_putcharxycgf
24048                 | ' 
24048                 | '  
24048                 | ' repeat yy from 0 to 15
24048     00 00 06 F6 | 	mov	_var01, #0
2404c     97 8C 48 FB | 	callpa	#(@LR__2802-@LR__2800)>>2,fcache_load_ptr_
24050                 | LR__2800
24050                 | ' 
24050                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24050     95 E4 05 F1 | 	add	objptr, #149
24054     F2 02 02 FB | 	rdlong	_var02, objptr
24058     0A 02 66 F0 | 	shl	_var02, #10
2405c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24060     01 05 02 F1 | 	add	_var03, _var02
24064     0B 03 02 F6 | 	mov	_var02, arg03
24068     04 02 66 F0 | 	shl	_var02, #4
2406c     01 05 02 F1 | 	add	_var03, _var02
24070     00 05 02 F1 | 	add	_var03, _var01
24074     02 05 C2 FA | 	rdbyte	_var03, _var03
24078                 | '   asm
24078     00 04 0E F4 | 	testb	_var03, #0 wz
2407c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24080     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24084     01 04 0E F4 | 	testb	_var03, #1 wz
24088     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
2408c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24090     02 04 0E F4 | 	testb	_var03, #2 wz
24094     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24098     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
2409c     03 04 0E F4 | 	testb	_var03, #3 wz
240a0     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
240a4     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
240a8     04 04 0E F4 | 	testb	_var03, #4 wz
240ac     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
240b0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
240b4     05 04 0E F4 | 	testb	_var03, #5 wz
240b8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
240bc     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
240c0     06 04 0E F4 | 	testb	_var03, #6 wz
240c4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
240c8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
240cc     07 04 0E F4 | 	testb	_var03, #7 wz
240d0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
240d4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
240d8                 | '   
240d8                 | '   ccc[0]:=c1
240d8     99 E5 05 F1 | 	add	objptr, #409
240dc     F2 06 62 FC | 	wrlong	_var04, objptr
240e0                 | '   ccc[1]:=c2 
240e0     04 E4 05 F1 | 	add	objptr, #4
240e4     F2 08 62 FC | 	wrlong	_var05, objptr
240e8                 | '   long[mailbox0][2]:=8
240e8     49 E4 85 F1 | 	sub	objptr, #73
240ec     F2 04 02 FB | 	rdlong	_var03, objptr
240f0     08 04 06 F1 | 	add	_var03, #8
240f4     02 11 68 FC | 	wrlong	#8, _var03
240f8                 | '   long[mailbox0][1]:=@ccc
240f8     45 E4 05 F1 | 	add	objptr, #69
240fc     F2 04 02 F6 | 	mov	_var03, objptr
24100     45 E4 85 F1 | 	sub	objptr, #69
24104     F2 02 02 FB | 	rdlong	_var02, objptr
24108     04 02 06 F1 | 	add	_var02, #4
2410c     01 05 62 FC | 	wrlong	_var03, _var02
24110                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24110     0C E5 85 F1 | 	sub	objptr, #268
24114     F2 04 02 FB | 	rdlong	_var03, objptr
24118     0A 03 02 F6 | 	mov	_var02, arg02
2411c     00 03 02 F1 | 	add	_var02, _var01
24120     0A 02 66 F0 | 	shl	_var02, #10
24124     09 0B 02 F6 | 	mov	_var06, arg01
24128     02 0A 66 F0 | 	shl	_var06, #2
2412c     05 03 02 F1 | 	add	_var02, _var06
24130     01 05 02 F1 | 	add	_var03, _var02
24134     00 00 78 FF 
24138     00 04 06 F1 | 	add	_var03, ##-268435456
2413c     0C E5 05 F1 | 	add	objptr, #268
24140     F2 0A 02 FB | 	rdlong	_var06, objptr
24144     05 05 62 FC | 	wrlong	_var03, _var06
24148                 | '   repeat
24148                 | LR__2801
24148     F2 04 02 FB | 	rdlong	_var03, objptr
2414c     02 03 02 FB | 	rdlong	_var02, _var03
24150     00 02 56 F2 | 	cmps	_var02, #0 wc
24154     F0 FF 9F CD |  if_b	jmp	#LR__2801
24158     E9 E5 85 F1 | 	sub	objptr, #489
2415c     01 00 06 F1 | 	add	_var01, #1
24160     10 00 56 F2 | 	cmps	_var01, #16 wc
24164     E8 FE 9F CD |  if_b	jmp	#LR__2800
24168                 | LR__2802
24168                 | _hg010b_spin2_putcharxycgf_ret
24168     2D 00 64 FD | 	ret
2416c                 | 
2416c                 | ' 
2416c                 | ' 
2416c                 | ' '**********************************************************************r***
2416c                 | ' '                                                                        *
2416c                 | ' ' Font related functions                                                 *
2416c                 | ' '                                                                        *
2416c                 | ' '*************************************************************************
2416c                 | ' 
2416c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
2416c                 | ' 
2416c                 | ' pub setfontfamily(afontnum)
2416c                 | _hg010b_spin2_setfontfamily
2416c                 | ' 
2416c                 | ' font_family:=afontnum
2416c     95 E4 05 F1 | 	add	objptr, #149
24170     F2 12 62 FC | 	wrlong	arg01, objptr
24174     95 E4 85 F1 | 	sub	objptr, #149
24178                 | ' 'if afontnum==8
24178                 | ' '  font_ptr:=@amiga_font
24178                 | ' 
24178                 | ' if afontnum==4
24178     04 12 0E F2 | 	cmp	arg01, #4 wz
2417c                 | '   font_ptr:=@st_font
2417c     08 00 00 AF 
24180     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
24184     08 E4 05 A1 |  if_e	add	objptr, #8
24188     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
2418c     08 E4 85 A1 |  if_e	sub	objptr, #8
24190     08 00 00 AF 
24194     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
24198                 | ' if afontnum==0
24198     00 12 0E F2 | 	cmp	arg01, #0 wz
2419c                 | '   font_ptr:=@vga_font
2419c     08 E4 05 A1 |  if_e	add	objptr, #8
241a0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
241a4     08 E4 85 A1 |  if_e	sub	objptr, #8
241a8                 | _hg010b_spin2_setfontfamily_ret
241a8     2D 00 64 FD | 	ret
241ac                 | 
241ac                 | ' 
241ac                 | ' '*************************************************************************
241ac                 | ' '                                                                        *
241ac                 | ' '  Cursor functions                                                      *
241ac                 | ' '                                                                        *
241ac                 | ' '*************************************************************************
241ac                 | ' 
241ac                 | ' 
241ac                 | ' pub setcursorpos(x,y)
241ac                 | _hg010b_spin2_setcursorpos
241ac                 | ' 
241ac                 | ' ''---------- Set the (x,y) position of cursor
241ac                 | ' 
241ac                 | ' cursor_x:=x
241ac     3C E4 05 F1 | 	add	objptr, #60
241b0     F2 12 52 FC | 	wrword	arg01, objptr
241b4                 | ' cursor_y:=y
241b4     02 E4 05 F1 | 	add	objptr, #2
241b8     F2 14 42 FC | 	wrbyte	arg02, objptr
241bc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
241bc     02 E4 85 F1 | 	sub	objptr, #2
241c0     F2 14 E2 FA | 	rdword	arg02, objptr
241c4     02 14 66 F0 | 	shl	arg02, #2
241c8     02 E4 05 F1 | 	add	objptr, #2
241cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
241d0     3E E4 85 F1 | 	sub	objptr, #62
241d4     04 16 66 F0 | 	shl	arg03, #4
241d8     04 16 06 F1 | 	add	arg03, #4
241dc     11 12 06 F6 | 	mov	arg01, #17
241e0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
241e4                 | _hg010b_spin2_setcursorpos_ret
241e4     2D 00 64 FD | 	ret
241e8                 | 
241e8                 | ' 
241e8                 | ' pub setcursorx(x)
241e8                 | _hg010b_spin2_setcursorx
241e8                 | ' cursor_x:=x
241e8     3C E4 05 F1 | 	add	objptr, #60
241ec     F2 12 52 FC | 	wrword	arg01, objptr
241f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
241f0     F2 14 E2 FA | 	rdword	arg02, objptr
241f4     02 14 66 F0 | 	shl	arg02, #2
241f8     02 E4 05 F1 | 	add	objptr, #2
241fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
24200     3E E4 85 F1 | 	sub	objptr, #62
24204     04 16 66 F0 | 	shl	arg03, #4
24208     04 16 06 F1 | 	add	arg03, #4
2420c     11 12 06 F6 | 	mov	arg01, #17
24210     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24214                 | _hg010b_spin2_setcursorx_ret
24214     2D 00 64 FD | 	ret
24218                 | 
24218                 | ' 
24218                 | ' pub setcursory(y) 
24218                 | _hg010b_spin2_setcursory
24218                 | ' cursor_y:=y
24218     3E E4 05 F1 | 	add	objptr, #62
2421c     F2 12 42 FC | 	wrbyte	arg01, objptr
24220                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
24220     02 E4 85 F1 | 	sub	objptr, #2
24224     F2 14 E2 FA | 	rdword	arg02, objptr
24228     02 14 66 F0 | 	shl	arg02, #2
2422c     02 E4 05 F1 | 	add	objptr, #2
24230     F2 16 C2 FA | 	rdbyte	arg03, objptr
24234     3E E4 85 F1 | 	sub	objptr, #62
24238     04 16 66 F0 | 	shl	arg03, #4
2423c     04 16 06 F1 | 	add	arg03, #4
24240     11 12 06 F6 | 	mov	arg01, #17
24244     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24248                 | _hg010b_spin2_setcursory_ret
24248     2D 00 64 FD | 	ret
2424c                 | 
2424c                 | ' 
2424c                 | ' '*************************************************************************
2424c                 | ' '                                                                        *
2424c                 | ' '  VBlank functions                                                      *
2424c                 | ' '                                                                        *
2424c                 | ' '*************************************************************************
2424c                 | ' 
2424c                 | ' pub waitvbl(amount) | i
2424c                 | _hg010b_spin2_waitvbl
2424c     03 4A 05 F6 | 	mov	COUNT_, #3
24250     A8 00 A0 FD | 	call	#pushregs_
24254     09 27 02 F6 | 	mov	local01, arg01
24258                 | ' 
24258                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24258                 | ' 
24258                 | ' repeat i from 1 to amount
24258     01 28 06 F6 | 	mov	local02, #1
2425c     01 26 56 F2 | 	cmps	local01, #1 wc
24260     01 2A 86 F6 | 	negc	local03, #1
24264     15 27 02 F1 | 	add	local01, local03
24268                 | LR__2810
24268                 | '   repeat until vblank==0
24268                 | LR__2811
24268     49 E4 05 F1 | 	add	objptr, #73
2426c     F2 12 0A FB | 	rdlong	arg01, objptr wz
24270     49 E4 85 F1 | 	sub	objptr, #73
24274     0C 00 90 AD |  if_e	jmp	#LR__2812
24278                 | '     waitus(100)
24278     64 12 06 F6 | 	mov	arg01, #100
2427c     20 20 B0 FD | 	call	#__system___waitus
24280     E4 FF 9F FD | 	jmp	#LR__2811
24284                 | LR__2812
24284                 | '   repeat until vblank==1
24284                 | LR__2813
24284     49 E4 05 F1 | 	add	objptr, #73
24288     F2 12 02 FB | 	rdlong	arg01, objptr
2428c     49 E4 85 F1 | 	sub	objptr, #73
24290     01 12 0E F2 | 	cmp	arg01, #1 wz
24294     0C 00 90 AD |  if_e	jmp	#LR__2814
24298                 | '     waitus(100)
24298     64 12 06 F6 | 	mov	arg01, #100
2429c     00 20 B0 FD | 	call	#__system___waitus
242a0     E0 FF 9F FD | 	jmp	#LR__2813
242a4                 | LR__2814
242a4     15 29 02 F1 | 	add	local02, local03
242a8     13 29 0A F2 | 	cmp	local02, local01 wz
242ac     B8 FF 9F 5D |  if_ne	jmp	#LR__2810
242b0     A7 F0 03 F6 | 	mov	ptra, fp
242b4     B2 00 A0 FD | 	call	#popregs_
242b8                 | _hg010b_spin2_waitvbl_ret
242b8     2D 00 64 FD | 	ret
242bc                 | 
242bc                 | ' 
242bc                 | ' 
242bc                 | ' pub cls(fc,bc)   :c,i
242bc                 | _hg010b_spin2_cls
242bc     02 4A 05 F6 | 	mov	COUNT_, #2
242c0     A8 00 A0 FD | 	call	#pushregs_
242c4     09 27 02 F6 | 	mov	local01, arg01
242c8     0A 29 02 F6 | 	mov	local02, arg02
242cc                 | ' 
242cc                 | ' c:=bc
242cc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
242cc     DD E4 05 F1 | 	add	objptr, #221
242d0     F2 12 02 FB | 	rdlong	arg01, objptr
242d4     A5 E4 85 F1 | 	sub	objptr, #165
242d8     F2 16 02 FB | 	rdlong	arg03, objptr
242dc     02 16 66 F0 | 	shl	arg03, #2
242e0     14 15 02 F6 | 	mov	arg02, local02
242e4     00 18 06 F6 | 	mov	arg04, #0
242e8     01 1A 06 F6 | 	mov	arg05, #1
242ec     0B 00 00 FF 
242f0     94 E4 05 F1 | 	add	objptr, ##5780
242f4     F8 10 B0 FD | 	call	#_psram_spin2_fill
242f8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
242f8     0B 00 00 FF 
242fc     C8 E4 85 F1 | 	sub	objptr, ##5832
24300     F2 12 02 FB | 	rdlong	arg01, objptr
24304     04 E4 85 F1 | 	sub	objptr, #4
24308     F2 16 02 FB | 	rdlong	arg03, objptr
2430c     09 17 82 F1 | 	sub	arg03, arg01
24310     20 14 06 F6 | 	mov	arg02, #32
24314     00 18 06 F6 | 	mov	arg04, #0
24318     01 1A 06 F6 | 	mov	arg05, #1
2431c     0B 00 00 FF 
24320     CC E4 05 F1 | 	add	objptr, ##5836
24324     C8 10 B0 FD | 	call	#_psram_spin2_fill
24328                 | ' setwritecolors(fc,bc)
24328                 | ' 
24328                 | ' write_color:=ff
24328     0B 00 00 FF 
2432c     8B E4 85 F1 | 	sub	objptr, ##5771
24330     F2 26 62 FC | 	wrlong	local01, objptr
24334                 | ' write_background:=bb
24334     04 E4 05 F1 | 	add	objptr, #4
24338     F2 28 62 FC | 	wrlong	local02, objptr
2433c                 | ' cursor_x:=0
2433c     09 E4 85 F1 | 	sub	objptr, #9
24340     F2 00 58 FC | 	wrword	#0, objptr
24344                 | ' cursor_y:=0
24344     02 E4 05 F1 | 	add	objptr, #2
24348     F2 00 48 FC | 	wrbyte	#0, objptr
2434c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2434c     02 E4 85 F1 | 	sub	objptr, #2
24350     F2 14 E2 FA | 	rdword	arg02, objptr
24354     02 14 66 F0 | 	shl	arg02, #2
24358     02 E4 05 F1 | 	add	objptr, #2
2435c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24360     3E E4 85 F1 | 	sub	objptr, #62
24364     04 16 66 F0 | 	shl	arg03, #4
24368     04 16 06 F1 | 	add	arg03, #4
2436c     11 12 06 F6 | 	mov	arg01, #17
24370     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
24374                 | ' setcursorcolor(fc)
24374     13 13 02 F6 | 	mov	arg01, local01
24378     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
2437c     14 FB 01 F6 | 	mov	result1, local02
24380     00 FC 05 F6 | 	mov	result2, #0
24384     A7 F0 03 F6 | 	mov	ptra, fp
24388     B2 00 A0 FD | 	call	#popregs_
2438c                 | _hg010b_spin2_cls_ret
2438c     2D 00 64 FD | 	ret
24390                 | 
24390                 | ' 
24390                 | ' ''---------- Output a char at the cursor position, move the cursor 
24390                 | ' 
24390                 | ' pub putchar(achar) | c,x,y,l,newcpl
24390                 | _hg010b_spin2_putchar
24390     02 4A 05 F6 | 	mov	COUNT_, #2
24394     A8 00 A0 FD | 	call	#pushregs_
24398     09 27 02 F6 | 	mov	local01, arg01
2439c                 | ' 
2439c                 | ' if achar==10
2439c     0A 26 0E F2 | 	cmp	local01, #10 wz
243a0                 | '   crlf()
243a0     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
243a4                 | ' if achar==9
243a4     09 26 0E F2 | 	cmp	local01, #9 wz
243a8     18 00 90 5D |  if_ne	jmp	#LR__2820
243ac                 | '   cursor_x:=(cursor_x& %11110000)+16
243ac     3C E4 05 F1 | 	add	objptr, #60
243b0     F2 16 E2 FA | 	rdword	arg03, objptr
243b4     F0 16 06 F5 | 	and	arg03, #240
243b8     10 16 06 F1 | 	add	arg03, #16
243bc     F2 16 52 FC | 	wrword	arg03, objptr
243c0     3C E4 85 F1 | 	sub	objptr, #60
243c4                 | LR__2820
243c4                 | '   
243c4                 | ' if (achar<>9) && (achar<>10) 
243c4     09 26 0E F2 | 	cmp	local01, #9 wz
243c8     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
243cc     A8 00 90 AD |  if_e	jmp	#LR__2821
243d0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
243d0     3C E4 05 F1 | 	add	objptr, #60
243d4     F2 12 E2 FA | 	rdword	arg01, objptr
243d8     02 E4 05 F1 | 	add	objptr, #2
243dc     F2 14 C2 FA | 	rdbyte	arg02, objptr
243e0     04 14 66 F0 | 	shl	arg02, #4
243e4     04 14 06 F1 | 	add	arg02, #4
243e8     03 E4 05 F1 | 	add	objptr, #3
243ec     F2 18 02 FB | 	rdlong	arg04, objptr
243f0     04 E4 05 F1 | 	add	objptr, #4
243f4     F2 1A 02 FB | 	rdlong	arg05, objptr
243f8     45 E4 85 F1 | 	sub	objptr, #69
243fc     13 17 02 F6 | 	mov	arg03, local01
24400     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
24404     04 E4 05 F1 | 	add	objptr, #4
24408     F2 12 02 FB | 	rdlong	arg01, objptr
2440c     10 00 00 FF 
24410     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24414     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24418     3A E4 05 F1 | 	add	objptr, #58
2441c     F2 1A C2 FA | 	rdbyte	arg05, objptr
24420     0D 17 02 FD | 	qmul	arg03, arg05
24424                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24424     10 00 00 FF 
24428     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2442c     02 E4 85 F1 | 	sub	objptr, #2
24430     F2 28 E2 FA | 	rdword	local02, objptr
24434     01 28 46 F0 | 	shr	local02, #1
24438     13 15 02 F6 | 	mov	arg02, local01
2443c     01 16 06 F6 | 	mov	arg03, #1
24440     00 18 06 F6 | 	mov	arg04, #0
24444     01 1A 06 F6 | 	mov	arg05, #1
24448     0B 00 00 FF 
2444c     90 E4 05 F1 | 	add	objptr, ##5776
24450     18 26 62 FD | 	getqx	local01
24454     14 27 02 F1 | 	add	local01, local02
24458     13 13 02 F1 | 	add	arg01, local01
2445c     90 0F B0 FD | 	call	#_psram_spin2_fill
24460                 | '   cursor_x+=2
24460     0B 00 00 FF 
24464     90 E4 85 F1 | 	sub	objptr, ##5776
24468     F2 28 E2 FA | 	rdword	local02, objptr
2446c     02 28 06 F1 | 	add	local02, #2
24470     F2 28 52 FC | 	wrword	local02, objptr
24474     3C E4 85 F1 | 	sub	objptr, #60
24478                 | LR__2821
24478                 | ' 
24478                 | ' if cursor_x>=256
24478     3C E4 05 F1 | 	add	objptr, #60
2447c     F2 28 E2 FA | 	rdword	local02, objptr
24480     3C E4 85 F1 | 	sub	objptr, #60
24484     00 29 56 F2 | 	cmps	local02, #256 wc
24488     64 00 90 CD |  if_b	jmp	#LR__2823
2448c                 | '   cursor_x:=0
2448c     3C E4 05 F1 | 	add	objptr, #60
24490     F2 00 58 FC | 	wrword	#0, objptr
24494                 | '   cursor_y+=1
24494     02 E4 05 F1 | 	add	objptr, #2
24498     F2 28 C2 FA | 	rdbyte	local02, objptr
2449c     01 28 06 F1 | 	add	local02, #1
244a0     F2 28 42 FC | 	wrbyte	local02, objptr
244a4                 | '   if cursor_y>st_lines-1
244a4     C3 E4 05 F1 | 	add	objptr, #195
244a8     F2 28 02 FB | 	rdlong	local02, objptr
244ac     01 28 86 F1 | 	sub	local02, #1
244b0     C3 E4 85 F1 | 	sub	objptr, #195
244b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
244b8     3E E4 85 F1 | 	sub	objptr, #62
244bc     14 17 5A F2 | 	cmps	arg03, local02 wcz
244c0     2C 00 90 ED |  if_be	jmp	#LR__2822
244c4                 | '     scrollup2()
244c4     00 12 06 F6 | 	mov	arg01, #0
244c8     01 00 00 FF 
244cc     58 14 06 F6 | 	mov	arg02, ##600
244d0     10 16 06 F6 | 	mov	arg03, #16
244d4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
244d8                 | '     cursor_y:=st_lines-1
244d8     01 E5 05 F1 | 	add	objptr, #257
244dc     F2 28 02 FB | 	rdlong	local02, objptr
244e0     01 28 86 F1 | 	sub	local02, #1
244e4     C3 E4 85 F1 | 	sub	objptr, #195
244e8     F2 28 42 FC | 	wrbyte	local02, objptr
244ec     3E E4 85 F1 | 	sub	objptr, #62
244f0                 | LR__2822
244f0                 | LR__2823
244f0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
244f0     3C E4 05 F1 | 	add	objptr, #60
244f4     F2 14 E2 FA | 	rdword	arg02, objptr
244f8     02 14 66 F0 | 	shl	arg02, #2
244fc     02 E4 05 F1 | 	add	objptr, #2
24500     F2 16 C2 FA | 	rdbyte	arg03, objptr
24504     3E E4 85 F1 | 	sub	objptr, #62
24508     04 16 66 F0 | 	shl	arg03, #4
2450c     04 16 06 F1 | 	add	arg03, #4
24510     11 12 06 F6 | 	mov	arg01, #17
24514     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
24518     A7 F0 03 F6 | 	mov	ptra, fp
2451c     B2 00 A0 FD | 	call	#popregs_
24520                 | _hg010b_spin2_putchar_ret
24520     2D 00 64 FD | 	ret
24524                 | 
24524                 | '     
24524                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
24524                 | ' 
24524                 | ' pub putchar2(achar) | c,x,y,l,newcpl
24524                 | _hg010b_spin2_putchar2
24524     02 4A 05 F6 | 	mov	COUNT_, #2
24528     A8 00 A0 FD | 	call	#pushregs_
2452c     09 27 02 F6 | 	mov	local01, arg01
24530                 | ' 
24530                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24530     3C E4 05 F1 | 	add	objptr, #60
24534     F2 12 E2 FA | 	rdword	arg01, objptr
24538     02 E4 05 F1 | 	add	objptr, #2
2453c     F2 14 C2 FA | 	rdbyte	arg02, objptr
24540     04 14 66 F0 | 	shl	arg02, #4
24544     04 14 06 F1 | 	add	arg02, #4
24548     03 E4 05 F1 | 	add	objptr, #3
2454c     F2 18 02 FB | 	rdlong	arg04, objptr
24550     04 E4 05 F1 | 	add	objptr, #4
24554     F2 1A 02 FB | 	rdlong	arg05, objptr
24558     45 E4 85 F1 | 	sub	objptr, #69
2455c     13 17 02 F6 | 	mov	arg03, local01
24560     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
24564     04 E4 05 F1 | 	add	objptr, #4
24568     F2 12 02 FB | 	rdlong	arg01, objptr
2456c     10 00 00 FF 
24570     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24574     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24578     3A E4 05 F1 | 	add	objptr, #58
2457c     F2 1A C2 FA | 	rdbyte	arg05, objptr
24580     0D 17 02 FD | 	qmul	arg03, arg05
24584                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24584     10 00 00 FF 
24588     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2458c     02 E4 85 F1 | 	sub	objptr, #2
24590     F2 28 E2 FA | 	rdword	local02, objptr
24594     01 28 46 F0 | 	shr	local02, #1
24598     13 15 02 F6 | 	mov	arg02, local01
2459c     01 16 06 F6 | 	mov	arg03, #1
245a0     00 18 06 F6 | 	mov	arg04, #0
245a4     01 1A 06 F6 | 	mov	arg05, #1
245a8     0B 00 00 FF 
245ac     90 E4 05 F1 | 	add	objptr, ##5776
245b0     18 26 62 FD | 	getqx	local01
245b4     14 27 02 F1 | 	add	local01, local02
245b8     13 13 02 F1 | 	add	arg01, local01
245bc     30 0E B0 FD | 	call	#_psram_spin2_fill
245c0                 | ' 
245c0                 | ' cursor_x+=2
245c0     0B 00 00 FF 
245c4     90 E4 85 F1 | 	sub	objptr, ##5776
245c8     F2 28 E2 FA | 	rdword	local02, objptr
245cc     02 28 06 F1 | 	add	local02, #2
245d0     F2 28 52 FC | 	wrword	local02, objptr
245d4                 | ' if cursor_x>=256
245d4     F2 28 E2 FA | 	rdword	local02, objptr
245d8     3C E4 85 F1 | 	sub	objptr, #60
245dc     00 29 56 F2 | 	cmps	local02, #256 wc
245e0     64 00 90 CD |  if_b	jmp	#LR__2831
245e4                 | '   cursor_x:=0
245e4     3C E4 05 F1 | 	add	objptr, #60
245e8     F2 00 58 FC | 	wrword	#0, objptr
245ec                 | '   cursor_y+=1
245ec     02 E4 05 F1 | 	add	objptr, #2
245f0     F2 28 C2 FA | 	rdbyte	local02, objptr
245f4     01 28 06 F1 | 	add	local02, #1
245f8     F2 28 42 FC | 	wrbyte	local02, objptr
245fc                 | '   if cursor_y>st_lines-1
245fc     C3 E4 05 F1 | 	add	objptr, #195
24600     F2 28 02 FB | 	rdlong	local02, objptr
24604     01 28 86 F1 | 	sub	local02, #1
24608     C3 E4 85 F1 | 	sub	objptr, #195
2460c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24610     3E E4 85 F1 | 	sub	objptr, #62
24614     14 17 5A F2 | 	cmps	arg03, local02 wcz
24618     2C 00 90 ED |  if_be	jmp	#LR__2830
2461c                 | '     scrollup2()
2461c     00 12 06 F6 | 	mov	arg01, #0
24620     01 00 00 FF 
24624     58 14 06 F6 | 	mov	arg02, ##600
24628     10 16 06 F6 | 	mov	arg03, #16
2462c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
24630                 | '     cursor_y:=st_lines-1
24630     01 E5 05 F1 | 	add	objptr, #257
24634     F2 28 02 FB | 	rdlong	local02, objptr
24638     01 28 86 F1 | 	sub	local02, #1
2463c     C3 E4 85 F1 | 	sub	objptr, #195
24640     F2 28 42 FC | 	wrbyte	local02, objptr
24644     3E E4 85 F1 | 	sub	objptr, #62
24648                 | LR__2830
24648                 | LR__2831
24648                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
24648     3C E4 05 F1 | 	add	objptr, #60
2464c     F2 14 E2 FA | 	rdword	arg02, objptr
24650     02 14 66 F0 | 	shl	arg02, #2
24654     02 E4 05 F1 | 	add	objptr, #2
24658     F2 16 C2 FA | 	rdbyte	arg03, objptr
2465c     3E E4 85 F1 | 	sub	objptr, #62
24660     04 16 66 F0 | 	shl	arg03, #4
24664     04 16 06 F1 | 	add	arg03, #4
24668     11 12 06 F6 | 	mov	arg01, #17
2466c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
24670     A7 F0 03 F6 | 	mov	ptra, fp
24674     B2 00 A0 FD | 	call	#popregs_
24678                 | _hg010b_spin2_putchar2_ret
24678     2D 00 64 FD | 	ret
2467c                 | 
2467c                 | ' ''--------- Output a string at the cursor position, move the cursor  
2467c                 | ' 
2467c                 | ' pub write(text) | iii,c,ncx,ncy
2467c                 | _hg010b_spin2_write
2467c     04 4A 05 F6 | 	mov	COUNT_, #4
24680     A8 00 A0 FD | 	call	#pushregs_
24684     09 27 02 F6 | 	mov	local01, arg01
24688                 | ' 
24688                 | ' repeat iii from 0 to strsize(text)-1
24688     00 28 06 F6 | 	mov	local02, #0
2468c     13 13 02 F6 | 	mov	arg01, local01
24690     09 2B 02 F6 | 	mov	local03, arg01
24694     97 06 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
24698                 | LR__2840
24698     15 FB C9 FA | 	rdbyte	result1, local03 wz
2469c     01 2A 06 51 |  if_ne	add	local03, #1
246a0     F4 FF 9F 5D |  if_ne	jmp	#LR__2840
246a4                 | LR__2841
246a4     09 2B 82 F1 | 	sub	local03, arg01
246a8     01 2A 86 F1 | 	sub	local03, #1
246ac     00 2A 56 F2 | 	cmps	local03, #0 wc
246b0     01 2C 86 F6 | 	negc	local04, #1
246b4     16 2B 02 F1 | 	add	local03, local04
246b8                 | LR__2842
246b8                 | '   putchar2(byte[text+iii])
246b8     13 13 02 F6 | 	mov	arg01, local01
246bc     14 13 02 F1 | 	add	arg01, local02
246c0     09 13 C2 FA | 	rdbyte	arg01, arg01
246c4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
246c8     16 29 02 F1 | 	add	local02, local04
246cc     15 29 0A F2 | 	cmp	local02, local03 wz
246d0     E4 FF 9F 5D |  if_ne	jmp	#LR__2842
246d4     A7 F0 03 F6 | 	mov	ptra, fp
246d8     B2 00 A0 FD | 	call	#popregs_
246dc                 | _hg010b_spin2_write_ret
246dc     2D 00 64 FD | 	ret
246e0                 | 
246e0                 | '    
246e0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
246e0                 | ' 
246e0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
246e0                 | _hg010b_spin2_scrollup2
246e0     03 4A 05 F6 | 	mov	COUNT_, #3
246e4     A8 00 A0 FD | 	call	#pushregs_
246e8                 | ' 	
246e8                 | ' repeat i from 4 to 579 
246e8     04 26 06 F6 | 	mov	local01, #4
246ec                 | LR__2850
246ec     F9 E4 05 F1 | 	add	objptr, #249
246f0     F2 1A 02 FB | 	rdlong	arg05, objptr
246f4     1C E4 85 F1 | 	sub	objptr, #28
246f8     F2 14 02 FB | 	rdlong	arg02, objptr
246fc     13 19 02 F6 | 	mov	arg04, local01
24700     10 18 06 F1 | 	add	arg04, #16
24704     02 18 66 F0 | 	shl	arg04, #2
24708     14 E4 05 F1 | 	add	objptr, #20
2470c     F2 16 02 FB | 	rdlong	arg03, objptr
24710     0B 19 02 FD | 	qmul	arg04, arg03
24714                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
24714     F6 03 00 FF 
24718     00 12 06 F6 | 	mov	arg01, ##519168
2471c     0D 13 82 F1 | 	sub	arg01, arg05
24720     02 16 66 F0 | 	shl	arg03, #2
24724     0A 00 00 FF 
24728     DB E5 05 F1 | 	add	objptr, ##5595
2472c     18 1A 62 FD | 	getqx	arg05
24730     0D 15 02 F1 | 	add	arg02, arg05
24734     80 0B B0 FD | 	call	#_psram_spin2_read1
24738     0A 00 00 FF 
2473c     D3 E5 85 F1 | 	sub	objptr, ##5587
24740     F2 1A 02 FB | 	rdlong	arg05, objptr
24744     1C E4 85 F1 | 	sub	objptr, #28
24748     F2 14 02 FB | 	rdlong	arg02, objptr
2474c     13 19 02 F6 | 	mov	arg04, local01
24750     02 18 66 F0 | 	shl	arg04, #2
24754     14 E4 05 F1 | 	add	objptr, #20
24758     F2 16 02 FB | 	rdlong	arg03, objptr
2475c     0B 19 02 FD | 	qmul	arg04, arg03
24760                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
24760     F6 03 00 FF 
24764     00 12 06 F6 | 	mov	arg01, ##519168
24768     0D 13 82 F1 | 	sub	arg01, arg05
2476c     02 16 66 F0 | 	shl	arg03, #2
24770     0A 00 00 FF 
24774     DB E5 05 F1 | 	add	objptr, ##5595
24778     18 1A 62 FD | 	getqx	arg05
2477c     0D 15 02 F1 | 	add	arg02, arg05
24780     D0 0B B0 FD | 	call	#_psram_spin2_write
24784     0B 00 00 FF 
24788     CC E4 85 F1 | 	sub	objptr, ##5836
2478c     01 26 06 F1 | 	add	local01, #1
24790     01 00 00 FF 
24794     44 26 16 F2 | 	cmp	local01, ##580 wc
24798     50 FF 9F CD |  if_b	jmp	#LR__2850
2479c                 | ' 
2479c                 | ' repeat i from 580 to 599
2479c     01 00 00 FF 
247a0     44 26 06 F6 | 	mov	local01, ##580
247a4                 | LR__2851
247a4                 | '    fastline(0,1023,i,write_background)   
247a4     45 E4 05 F1 | 	add	objptr, #69
247a8     F2 18 02 FB | 	rdlong	arg04, objptr
247ac     45 E4 85 F1 | 	sub	objptr, #69
247b0     00 12 06 F6 | 	mov	arg01, #0
247b4     09 14 CE F9 | 	bmask	arg02, #9
247b8     13 17 02 F6 | 	mov	arg03, local01
247bc     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
247c0     01 26 06 F1 | 	add	local01, #1
247c4     01 00 00 FF 
247c8     58 26 16 F2 | 	cmp	local01, ##600 wc
247cc     D4 FF 9F CD |  if_b	jmp	#LR__2851
247d0                 | ' repeat i from 0 to 3
247d0     00 26 06 F6 | 	mov	local01, #0
247d4                 | LR__2852
247d4                 | '    fastline(0,1023,i,write_background)      
247d4     45 E4 05 F1 | 	add	objptr, #69
247d8     F2 18 02 FB | 	rdlong	arg04, objptr
247dc     45 E4 85 F1 | 	sub	objptr, #69
247e0     00 12 06 F6 | 	mov	arg01, #0
247e4     09 14 CE F9 | 	bmask	arg02, #9
247e8     13 17 02 F6 | 	mov	arg03, local01
247ec     90 EF BF FD | 	call	#_hg010b_spin2_fastline
247f0     01 26 06 F1 | 	add	local01, #1
247f4     04 26 56 F2 | 	cmps	local01, #4 wc
247f8     D8 FF 9F CD |  if_b	jmp	#LR__2852
247fc                 | ' 
247fc                 | ' repeat i from 0 to 35
247fc     00 26 06 F6 | 	mov	local01, #0
24800                 | LR__2853
24800     13 1B 02 F6 | 	mov	arg05, local01
24804     01 1A 06 F1 | 	add	arg05, #1
24808     10 00 00 FF 
2480c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24810     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24814     0B 1B 02 FD | 	qmul	arg05, arg03
24818                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
24818     F6 03 00 FF 
2481c     00 12 06 F6 | 	mov	arg01, ##519168
24820     F9 E4 05 F1 | 	add	objptr, #249
24824     F2 1A 02 FB | 	rdlong	arg05, objptr
24828     0D 13 82 F1 | 	sub	arg01, arg05
2482c     F5 E4 85 F1 | 	sub	objptr, #245
24830     F2 14 02 FB | 	rdlong	arg02, objptr
24834     10 00 00 FF 
24838     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2483c     0B 00 00 FF 
24840     C8 E4 05 F1 | 	add	objptr, ##5832
24844     18 1A 62 FD | 	getqx	arg05
24848     0D 15 02 F1 | 	add	arg02, arg05
2484c     68 0A B0 FD | 	call	#_psram_spin2_read1
24850     10 00 00 FF 
24854     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24858     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2485c     0B 27 02 FD | 	qmul	local01, arg03
24860                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
24860     F6 03 00 FF 
24864     00 12 06 F6 | 	mov	arg01, ##519168
24868     0A 00 00 FF 
2486c     D3 E5 85 F1 | 	sub	objptr, ##5587
24870     F2 1A 02 FB | 	rdlong	arg05, objptr
24874     0D 13 82 F1 | 	sub	arg01, arg05
24878     F5 E4 85 F1 | 	sub	objptr, #245
2487c     F2 14 02 FB | 	rdlong	arg02, objptr
24880     10 00 00 FF 
24884     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24888     0B 00 00 FF 
2488c     C8 E4 05 F1 | 	add	objptr, ##5832
24890     18 1A 62 FD | 	getqx	arg05
24894     0D 15 02 F1 | 	add	arg02, arg05
24898     B8 0A B0 FD | 	call	#_psram_spin2_write
2489c     0B 00 00 FF 
248a0     CC E4 85 F1 | 	sub	objptr, ##5836
248a4     01 26 06 F1 | 	add	local01, #1
248a8     24 26 56 F2 | 	cmps	local01, #36 wc
248ac     50 FF 9F CD |  if_b	jmp	#LR__2853
248b0                 | ' repeat i from 0 to timings[7]-1
248b0     00 26 06 F6 | 	mov	local01, #0
248b4     10 00 00 FF 
248b8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
248bc     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
248c0     10 00 00 FF 
248c4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
248c8     01 28 86 F1 | 	sub	local02, #1
248cc     00 28 56 F2 | 	cmps	local02, #0 wc
248d0     01 2A 86 F6 | 	negc	local03, #1
248d4     15 29 02 F1 | 	add	local02, local03
248d8                 | LR__2854
248d8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
248d8     04 E4 05 F1 | 	add	objptr, #4
248dc     F2 12 02 FB | 	rdlong	arg01, objptr
248e0     10 00 00 FF 
248e4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
248e8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
248ec     10 00 00 FF 
248f0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
248f4     0D 19 02 F6 | 	mov	arg04, arg05
248f8     03 18 66 F0 | 	shl	arg04, #3
248fc     0D 19 02 F1 | 	add	arg04, arg05
24900     02 18 66 F0 | 	shl	arg04, #2
24904     13 19 02 F1 | 	add	arg04, local01
24908     0C 13 02 F1 | 	add	arg01, arg04
2490c     20 14 06 F6 | 	mov	arg02, #32
24910     01 16 06 F6 | 	mov	arg03, #1
24914     00 18 06 F6 | 	mov	arg04, #0
24918     01 1A 06 F6 | 	mov	arg05, #1
2491c     0B 00 00 FF 
24920     C8 E4 05 F1 | 	add	objptr, ##5832
24924     C8 0A B0 FD | 	call	#_psram_spin2_fill
24928     0B 00 00 FF 
2492c     CC E4 85 F1 | 	sub	objptr, ##5836
24930     15 27 02 F1 | 	add	local01, local03
24934     14 27 0A F2 | 	cmp	local01, local02 wz
24938     9C FF 9F 5D |  if_ne	jmp	#LR__2854
2493c     A7 F0 03 F6 | 	mov	ptra, fp
24940     B2 00 A0 FD | 	call	#popregs_
24944                 | _hg010b_spin2_scrollup2_ret
24944     2D 00 64 FD | 	ret
24948                 | 
24948                 | '  
24948                 | ' ''----------- Scroll the screen one line down 
24948                 | ' 
24948                 | ' pub scrolldown(start=0) | i
24948                 | _hg010b_spin2_scrolldown
24948     05 4A 05 F6 | 	mov	COUNT_, #5
2494c     A8 00 A0 FD | 	call	#pushregs_
24950     09 27 02 F6 | 	mov	local01, arg01
24954                 | ' 
24954                 | ' repeat i from 579 to (start*16)+4
24954     01 00 00 FF 
24958     43 28 06 F6 | 	mov	local02, ##579
2495c     13 2B 02 F6 | 	mov	local03, local01
24960     04 2A 66 F0 | 	shl	local03, #4
24964     04 2A 06 F1 | 	add	local03, #4
24968     01 00 00 FF 
2496c     43 2A 56 F2 | 	cmps	local03, ##579 wc
24970     01 2C 86 F6 | 	negc	local04, #1
24974     16 2F 02 F6 | 	mov	local05, local04
24978     16 2B 02 F1 | 	add	local03, local04
2497c                 | LR__2860
2497c     F9 E4 05 F1 | 	add	objptr, #249
24980     F2 2C 02 FB | 	rdlong	local04, objptr
24984     1C E4 85 F1 | 	sub	objptr, #28
24988     F2 14 02 FB | 	rdlong	arg02, objptr
2498c     14 1B 02 F6 | 	mov	arg05, local02
24990     02 1A 66 F0 | 	shl	arg05, #2
24994     14 E4 05 F1 | 	add	objptr, #20
24998     F2 16 02 FB | 	rdlong	arg03, objptr
2499c     0B 1B 02 FD | 	qmul	arg05, arg03
249a0                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
249a0     F6 03 00 FF 
249a4     00 12 06 F6 | 	mov	arg01, ##519168
249a8     16 13 82 F1 | 	sub	arg01, local04
249ac     02 16 66 F0 | 	shl	arg03, #2
249b0     0A 00 00 FF 
249b4     DB E5 05 F1 | 	add	objptr, ##5595
249b8     18 2C 62 FD | 	getqx	local04
249bc     16 15 02 F1 | 	add	arg02, local04
249c0     F4 08 B0 FD | 	call	#_psram_spin2_read1
249c4     0A 00 00 FF 
249c8     D3 E5 85 F1 | 	sub	objptr, ##5587
249cc     F2 2C 02 FB | 	rdlong	local04, objptr
249d0     1C E4 85 F1 | 	sub	objptr, #28
249d4     F2 14 02 FB | 	rdlong	arg02, objptr
249d8     14 1B 02 F6 | 	mov	arg05, local02
249dc     10 1A 06 F1 | 	add	arg05, #16
249e0     02 1A 66 F0 | 	shl	arg05, #2
249e4     14 E4 05 F1 | 	add	objptr, #20
249e8     F2 16 02 FB | 	rdlong	arg03, objptr
249ec     0B 1B 02 FD | 	qmul	arg05, arg03
249f0                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
249f0     F6 03 00 FF 
249f4     00 12 06 F6 | 	mov	arg01, ##519168
249f8     16 13 82 F1 | 	sub	arg01, local04
249fc     02 16 66 F0 | 	shl	arg03, #2
24a00     0A 00 00 FF 
24a04     DB E5 05 F1 | 	add	objptr, ##5595
24a08     18 2C 62 FD | 	getqx	local04
24a0c     16 15 02 F1 | 	add	arg02, local04
24a10     40 09 B0 FD | 	call	#_psram_spin2_write
24a14     0B 00 00 FF 
24a18     CC E4 85 F1 | 	sub	objptr, ##5836
24a1c     17 29 02 F1 | 	add	local02, local05
24a20     15 29 0A F2 | 	cmp	local02, local03 wz
24a24     54 FF 9F 5D |  if_ne	jmp	#LR__2860
24a28                 | ' 
24a28                 | ' repeat i from (start*16)+4 to (start*16)+19
24a28     13 29 02 F6 | 	mov	local02, local01
24a2c     04 28 66 F0 | 	shl	local02, #4
24a30     04 28 06 F1 | 	add	local02, #4
24a34     13 2F 02 F6 | 	mov	local05, local01
24a38     04 2E 66 F0 | 	shl	local05, #4
24a3c     13 2E 06 F1 | 	add	local05, #19
24a40     13 2D 02 F6 | 	mov	local04, local01
24a44     04 2C 66 F0 | 	shl	local04, #4
24a48     04 2C 06 F1 | 	add	local04, #4
24a4c     16 2F 52 F2 | 	cmps	local05, local04 wc
24a50     01 2C 86 F6 | 	negc	local04, #1
24a54     16 2B 02 F6 | 	mov	local03, local04
24a58     16 2F 02 F1 | 	add	local05, local04
24a5c                 | LR__2861
24a5c                 | '    fastline(0,1023,i,write_background)    
24a5c     45 E4 05 F1 | 	add	objptr, #69
24a60     F2 18 02 FB | 	rdlong	arg04, objptr
24a64     45 E4 85 F1 | 	sub	objptr, #69
24a68     00 12 06 F6 | 	mov	arg01, #0
24a6c     09 14 CE F9 | 	bmask	arg02, #9
24a70     14 17 02 F6 | 	mov	arg03, local02
24a74     08 ED BF FD | 	call	#_hg010b_spin2_fastline
24a78     15 29 02 F1 | 	add	local02, local03
24a7c     17 29 0A F2 | 	cmp	local02, local05 wz
24a80     D8 FF 9F 5D |  if_ne	jmp	#LR__2861
24a84                 | '    
24a84                 | ' repeat i from 35 to start
24a84     23 28 06 F6 | 	mov	local02, #35
24a88     23 26 56 F2 | 	cmps	local01, #35 wc
24a8c     01 2C 86 F6 | 	negc	local04, #1
24a90     13 2F 02 F6 | 	mov	local05, local01
24a94     16 2F 02 F1 | 	add	local05, local04
24a98                 | LR__2862
24a98                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
24a98     F6 03 00 FF 
24a9c     00 12 06 F6 | 	mov	arg01, ##519168
24aa0     F9 E4 05 F1 | 	add	objptr, #249
24aa4     F2 2A 02 FB | 	rdlong	local03, objptr
24aa8     15 13 82 F1 | 	sub	arg01, local03
24aac     F5 E4 85 F1 | 	sub	objptr, #245
24ab0     F2 14 02 FB | 	rdlong	arg02, objptr
24ab4     14 2B 02 F6 | 	mov	local03, local02
24ab8     07 2A 66 F0 | 	shl	local03, #7
24abc     15 15 02 F1 | 	add	arg02, local03
24ac0     80 16 06 F6 | 	mov	arg03, #128
24ac4     0B 00 00 FF 
24ac8     C8 E4 05 F1 | 	add	objptr, ##5832
24acc     E8 07 B0 FD | 	call	#_psram_spin2_read1
24ad0                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
24ad0     F6 03 00 FF 
24ad4     00 12 06 F6 | 	mov	arg01, ##519168
24ad8     0A 00 00 FF 
24adc     D3 E5 85 F1 | 	sub	objptr, ##5587
24ae0     F2 2A 02 FB | 	rdlong	local03, objptr
24ae4     15 13 82 F1 | 	sub	arg01, local03
24ae8     F5 E4 85 F1 | 	sub	objptr, #245
24aec     F2 14 02 FB | 	rdlong	arg02, objptr
24af0     14 2B 02 F6 | 	mov	local03, local02
24af4     01 2A 06 F1 | 	add	local03, #1
24af8     07 2A 66 F0 | 	shl	local03, #7
24afc     15 15 02 F1 | 	add	arg02, local03
24b00     80 16 06 F6 | 	mov	arg03, #128
24b04     0B 00 00 FF 
24b08     C8 E4 05 F1 | 	add	objptr, ##5832
24b0c     44 08 B0 FD | 	call	#_psram_spin2_write
24b10     0B 00 00 FF 
24b14     CC E4 85 F1 | 	sub	objptr, ##5836
24b18     16 29 02 F1 | 	add	local02, local04
24b1c     17 29 0A F2 | 	cmp	local02, local05 wz
24b20     74 FF 9F 5D |  if_ne	jmp	#LR__2862
24b24                 | ' repeat i from 0 to 127
24b24     00 28 06 F6 | 	mov	local02, #0
24b28                 | LR__2863
24b28                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
24b28     04 E4 05 F1 | 	add	objptr, #4
24b2c     F2 12 02 FB | 	rdlong	arg01, objptr
24b30     13 2F 02 F6 | 	mov	local05, local01
24b34     07 2E 66 F0 | 	shl	local05, #7
24b38     17 13 02 F1 | 	add	arg01, local05
24b3c     14 13 02 F1 | 	add	arg01, local02
24b40     20 14 06 F6 | 	mov	arg02, #32
24b44     01 16 06 F6 | 	mov	arg03, #1
24b48     00 18 06 F6 | 	mov	arg04, #0
24b4c     01 1A 06 F6 | 	mov	arg05, #1
24b50     0B 00 00 FF 
24b54     C8 E4 05 F1 | 	add	objptr, ##5832
24b58     94 08 B0 FD | 	call	#_psram_spin2_fill
24b5c     0B 00 00 FF 
24b60     CC E4 85 F1 | 	sub	objptr, ##5836
24b64     01 28 06 F1 | 	add	local02, #1
24b68     80 28 56 F2 | 	cmps	local02, #128 wc
24b6c     B8 FF 9F CD |  if_b	jmp	#LR__2863
24b70     A7 F0 03 F6 | 	mov	ptra, fp
24b74     B2 00 A0 FD | 	call	#popregs_
24b78                 | _hg010b_spin2_scrolldown_ret
24b78     2D 00 64 FD | 	ret
24b7c                 | 
24b7c                 | ' 
24b7c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
24b7c                 | ' 
24b7c                 | ' pub crlf()
24b7c                 | _hg010b_spin2_crlf
24b7c                 | ' 
24b7c                 | ' cursor_x:=leading_spaces*2
24b7c     01 00 00 FF 
24b80     B6 E4 05 F1 | 	add	objptr, ##694
24b84     F2 16 02 FB | 	rdlong	arg03, objptr
24b88     01 16 66 F0 | 	shl	arg03, #1
24b8c     01 00 00 FF 
24b90     7A E4 85 F1 | 	sub	objptr, ##634
24b94     F2 16 52 FC | 	wrword	arg03, objptr
24b98                 | ' cursor_y+=1
24b98     02 E4 05 F1 | 	add	objptr, #2
24b9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24ba0     01 16 06 F1 | 	add	arg03, #1
24ba4     F2 16 42 FC | 	wrbyte	arg03, objptr
24ba8                 | ' if cursor_y>st_lines-1
24ba8     C3 E4 05 F1 | 	add	objptr, #195
24bac     F2 16 02 FB | 	rdlong	arg03, objptr
24bb0     01 16 86 F1 | 	sub	arg03, #1
24bb4     C3 E4 85 F1 | 	sub	objptr, #195
24bb8     F2 14 C2 FA | 	rdbyte	arg02, objptr
24bbc     3E E4 85 F1 | 	sub	objptr, #62
24bc0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
24bc4     2C 00 90 ED |  if_be	jmp	#LR__2870
24bc8                 | '   scrollup2()
24bc8     00 12 06 F6 | 	mov	arg01, #0
24bcc     01 00 00 FF 
24bd0     58 14 06 F6 | 	mov	arg02, ##600
24bd4     10 16 06 F6 | 	mov	arg03, #16
24bd8     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
24bdc                 | '   cursor_y:=st_lines-1
24bdc     01 E5 05 F1 | 	add	objptr, #257
24be0     F2 16 02 FB | 	rdlong	arg03, objptr
24be4     01 16 86 F1 | 	sub	arg03, #1
24be8     C3 E4 85 F1 | 	sub	objptr, #195
24bec     F2 16 42 FC | 	wrbyte	arg03, objptr
24bf0     3E E4 85 F1 | 	sub	objptr, #62
24bf4                 | LR__2870
24bf4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
24bf4     3C E4 05 F1 | 	add	objptr, #60
24bf8     F2 14 E2 FA | 	rdword	arg02, objptr
24bfc     02 14 66 F0 | 	shl	arg02, #2
24c00     02 E4 05 F1 | 	add	objptr, #2
24c04     F2 16 C2 FA | 	rdbyte	arg03, objptr
24c08     3E E4 85 F1 | 	sub	objptr, #62
24c0c     04 16 66 F0 | 	shl	arg03, #4
24c10     04 16 06 F1 | 	add	arg03, #4
24c14     11 12 06 F6 | 	mov	arg01, #17
24c18     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
24c1c                 | _hg010b_spin2_crlf_ret
24c1c     2D 00 64 FD | 	ret
24c20                 | 
24c20                 | ' 
24c20                 | ' 
24c20                 | ' '*************************************************************************
24c20                 | ' '                                                                        *
24c20                 | ' '  Conversions                                                           *
24c20                 | ' '                                                                        *
24c20                 | ' '*************************************************************************
24c20                 | ' 
24c20                 | ' ''---------- Convert a integer to dec string, return a pointer
24c20                 | ' 
24c20                 | ' pub inttostr(i):result |q,pos,k,j
24c20                 | _hg010b_spin2_inttostr
24c20     03 4A 05 F6 | 	mov	COUNT_, #3
24c24     A8 00 A0 FD | 	call	#pushregs_
24c28     09 27 0A F6 | 	mov	local01, arg01 wz
24c2c                 | ' 
24c2c                 | ' j:=i
24c2c                 | ' pos:=10
24c2c     0A 28 06 F6 | 	mov	local02, #10
24c30                 | ' k:=0
24c30     00 2A 06 F6 | 	mov	local03, #0
24c34                 | ' 
24c34                 | ' if (j==0)
24c34     18 00 90 5D |  if_ne	jmp	#LR__2880
24c38                 | '   n_string[0]:=48
24c38     4D E4 05 F1 | 	add	objptr, #77
24c3c     F2 60 48 FC | 	wrbyte	#48, objptr
24c40                 | '   n_string[1]:=0
24c40     01 E4 05 F1 | 	add	objptr, #1
24c44     F2 00 48 FC | 	wrbyte	#0, objptr
24c48     4E E4 85 F1 | 	sub	objptr, #78
24c4c     C4 00 90 FD | 	jmp	#LR__2887
24c50                 | LR__2880
24c50                 | ' 
24c50                 | ' else
24c50                 | '   if (j<0)
24c50     13 27 52 F6 | 	abs	local01, local01 wc
24c54                 | '     j:=0-j
24c54                 | '     k:=45
24c54     2D 2A 06 C6 |  if_b	mov	local03, #45
24c58                 | ' 
24c58                 | '   n_string[11]:=0
24c58     58 E4 05 F1 | 	add	objptr, #88
24c5c     F2 00 48 FC | 	wrbyte	#0, objptr
24c60     58 E4 85 F1 | 	sub	objptr, #88
24c64     97 24 48 FB | 	callpa	#(@LR__2882-@LR__2881)>>2,fcache_load_ptr_
24c68                 | '   repeat while (pos>-1)
24c68                 | LR__2881
24c68     00 28 56 F2 | 	cmps	local02, #0 wc
24c6c     40 00 90 CD |  if_b	jmp	#LR__2883
24c70     13 FB 51 F6 | 	abs	result1, local01 wc
24c74     0A FA 15 FD | 	qdiv	result1, #10
24c78                 | '     q:=j//10
24c78     19 FA 61 FD | 	getqy	result1
24c7c     FD FA 81 F6 | 	negc	result1, result1
24c80     13 27 52 F6 | 	abs	local01, local01 wc
24c84     0A 26 16 FD | 	qdiv	local01, #10
24c88                 | '     q:=48+q
24c88     30 FA 05 F1 | 	add	result1, #48
24c8c                 | '     n_string[pos]:=q
24c8c     14 27 02 F6 | 	mov	local01, local02
24c90     4D E4 05 F1 | 	add	objptr, #77
24c94     F2 26 02 F1 | 	add	local01, objptr
24c98     13 FB 41 FC | 	wrbyte	result1, local01
24c9c                 | '     j:=j/10
24c9c     4D E4 85 F1 | 	sub	objptr, #77
24ca0                 | '     pos-=1
24ca0     01 28 86 F1 | 	sub	local02, #1
24ca4     18 26 62 FD | 	getqx	local01
24ca8     13 27 82 F6 | 	negc	local01, local01
24cac     B8 FF 9F FD | 	jmp	#LR__2881
24cb0                 | LR__2882
24cb0                 | LR__2883
24cb0                 | '   repeat while n_string[0]==48
24cb0                 | LR__2884
24cb0     4D E4 05 F1 | 	add	objptr, #77
24cb4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24cb8     4D E4 85 F1 | 	sub	objptr, #77
24cbc     30 16 0E F2 | 	cmp	arg03, #48 wz
24cc0     20 00 90 5D |  if_ne	jmp	#LR__2885
24cc4                 | '     bytemove(@n_string,@n_string+1,12)
24cc4     4D E4 05 F1 | 	add	objptr, #77
24cc8     F2 12 02 F6 | 	mov	arg01, objptr
24ccc     F2 14 02 F6 | 	mov	arg02, objptr
24cd0     4D E4 85 F1 | 	sub	objptr, #77
24cd4     01 14 06 F1 | 	add	arg02, #1
24cd8     0C 16 06 F6 | 	mov	arg03, #12
24cdc     80 11 B0 FD | 	call	#__system____builtin_memmove
24ce0     CC FF 9F FD | 	jmp	#LR__2884
24ce4                 | LR__2885
24ce4                 | ' 
24ce4                 | '   if k==45
24ce4     2D 2A 0E F2 | 	cmp	local03, #45 wz
24ce8     28 00 90 5D |  if_ne	jmp	#LR__2886
24cec                 | '      bytemove(@n_string+1,@n_string,12)
24cec     4D E4 05 F1 | 	add	objptr, #77
24cf0     F2 12 02 F6 | 	mov	arg01, objptr
24cf4     01 12 06 F1 | 	add	arg01, #1
24cf8     F2 14 02 F6 | 	mov	arg02, objptr
24cfc     4D E4 85 F1 | 	sub	objptr, #77
24d00     0C 16 06 F6 | 	mov	arg03, #12
24d04     58 11 B0 FD | 	call	#__system____builtin_memmove
24d08                 | '      n_string[0]:=k
24d08     4D E4 05 F1 | 	add	objptr, #77
24d0c     F2 2A 42 FC | 	wrbyte	local03, objptr
24d10     4D E4 85 F1 | 	sub	objptr, #77
24d14                 | LR__2886
24d14                 | LR__2887
24d14                 | ' 
24d14                 | ' q:=@n_string
24d14     4D E4 05 F1 | 	add	objptr, #77
24d18     F2 FA 01 F6 | 	mov	result1, objptr
24d1c     4D E4 85 F1 | 	sub	objptr, #77
24d20                 | ' return q
24d20     A7 F0 03 F6 | 	mov	ptra, fp
24d24     B2 00 A0 FD | 	call	#popregs_
24d28                 | _hg010b_spin2_inttostr_ret
24d28     2D 00 64 FD | 	ret
24d2c                 | 
24d2c                 | ' 
24d2c                 | ' '**********************************************************************************
24d2c                 | ' '
24d2c                 | ' '        Blitting
24d2c                 | ' '
24d2c                 | ' '**********************************************************************************
24d2c                 | ' 
24d2c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
24d2c                 | _hg010b_spin2_blit
24d2c     18 4A 05 F6 | 	mov	COUNT_, #24
24d30     A8 00 A0 FD | 	call	#pushregs_
24d34     09 27 02 F6 | 	mov	local01, arg01
24d38     0A 29 02 F6 | 	mov	local02, arg02
24d3c     0B 2B 02 F6 | 	mov	local03, arg03
24d40     0C 2D 02 F6 | 	mov	local04, arg04
24d44     0D 2F 02 F6 | 	mov	local05, arg05
24d48     0E 31 02 F6 | 	mov	local06, arg06
24d4c     0F 33 02 F6 | 	mov	local07, arg07
24d50     10 35 02 F6 | 	mov	local08, arg08
24d54     11 37 02 F6 | 	mov	local09, arg09
24d58     12 39 02 F6 | 	mov	local10, arg10
24d5c                 | ' 
24d5c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
24d5c     00 04 00 FF 
24d60     00 26 56 F2 | 	cmps	local01, ##524288 wc
24d64     00 04 00 3F 
24d68     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
24d6c     7C 01 90 CD |  if_b	jmp	#LR__2894
24d70     16 29 5A F2 | 	cmps	local02, local04 wcz
24d74     14 3B 02 16 |  if_a	mov	local11, local02
24d78     16 29 02 16 |  if_a	mov	local02, local04
24d7c     1D 2D 02 16 |  if_a	mov	local04, local11
24d80     17 2B 5A F2 | 	cmps	local03, local05 wcz
24d84     15 3B 02 16 |  if_a	mov	local11, local03
24d88     17 2B 02 16 |  if_a	mov	local03, local05
24d8c     18 2B 02 FD | 	qmul	local03, local06
24d90                 | '   if x1a>x2a
24d90                 | '     x1a,x2a:=x2a,x1a
24d90                 | '   if y1a>y2a
24d90                 | '     y1a,y2a:=y2a,y1a  
24d90     1D 2F 02 16 |  if_a	mov	local05, local11
24d94                 | ' 
24d94                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
24d94     19 3D 02 F6 | 	mov	local12, local07
24d98     14 3D 02 F1 | 	add	local12, local02
24d9c     18 3A 62 FD | 	getqx	local11
24da0     1C 37 02 FD | 	qmul	local09, local10
24da4     1D 3D 02 F1 | 	add	local12, local11
24da8     13 3F 02 F6 | 	mov	local13, local01
24dac     1A 3F 02 F1 | 	add	local13, local08
24db0     18 3A 62 FD | 	getqx	local11
24db4     1D 3F 02 F1 | 	add	local13, local11
24db8     1F 3D 5A F2 | 	cmps	local12, local13 wcz
24dbc     98 00 90 ED |  if_be	jmp	#LR__2891
24dc0                 | '     repeat y from y1a to y2a
24dc0     15 41 02 F6 | 	mov	local14, local03
24dc4     15 2F 52 F2 | 	cmps	local05, local03 wc
24dc8     01 42 86 F6 | 	negc	local15, #1
24dcc     17 45 02 F6 | 	mov	local16, local05
24dd0     21 45 02 F1 | 	add	local16, local15
24dd4     0B 00 00 FF 
24dd8     CC E4 05 F1 | 	add	objptr, ##5836
24ddc                 | LR__2890
24ddc     18 41 02 FD | 	qmul	local14, local06
24de0                 | '   '    writeln(string("I am here"))
24de0                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24de0     13 15 02 F6 | 	mov	arg02, local01
24de4     16 17 02 F6 | 	mov	arg03, local04
24de8     14 17 82 F1 | 	sub	arg03, local02
24dec     01 16 06 F1 | 	add	arg03, #1
24df0     F6 03 00 FF 
24df4     00 12 06 F6 | 	mov	arg01, ##519168
24df8     18 3E 62 FD | 	getqx	local13
24dfc     1F 15 02 F1 | 	add	arg02, local13
24e00     14 15 02 F1 | 	add	arg02, local02
24e04     B0 04 B0 FD | 	call	#_psram_spin2_read1
24e08     1B 3F 02 F6 | 	mov	local13, local09
24e0c     15 3F 82 F1 | 	sub	local13, local03
24e10     20 3F 02 F1 | 	add	local13, local14
24e14     1C 3F 02 FD | 	qmul	local13, local10
24e18                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
24e18     19 15 02 F6 | 	mov	arg02, local07
24e1c     16 17 02 F6 | 	mov	arg03, local04
24e20     14 17 82 F1 | 	sub	arg03, local02
24e24     01 16 06 F1 | 	add	arg03, #1
24e28     F6 03 00 FF 
24e2c     00 12 06 F6 | 	mov	arg01, ##519168
24e30     18 3E 62 FD | 	getqx	local13
24e34     1F 15 02 F1 | 	add	arg02, local13
24e38     1A 15 02 F1 | 	add	arg02, local08
24e3c     14 05 B0 FD | 	call	#_psram_spin2_write
24e40     21 41 02 F1 | 	add	local14, local15
24e44     22 41 0A F2 | 	cmp	local14, local16 wz
24e48     90 FF 9F 5D |  if_ne	jmp	#LR__2890
24e4c     0B 00 00 FF 
24e50     CC E4 85 F1 | 	sub	objptr, ##5836
24e54     94 00 90 FD | 	jmp	#LR__2893
24e58                 | LR__2891
24e58                 | '   else
24e58                 | '     repeat y from y2a to y1a
24e58     17 41 02 F6 | 	mov	local14, local05
24e5c     17 2B 52 F2 | 	cmps	local03, local05 wc
24e60     01 46 86 F6 | 	negc	local17, #1
24e64     15 49 02 F6 | 	mov	local18, local03
24e68     23 49 02 F1 | 	add	local18, local17
24e6c     0B 00 00 FF 
24e70     CC E4 05 F1 | 	add	objptr, ##5836
24e74                 | LR__2892
24e74     18 41 02 FD | 	qmul	local14, local06
24e78                 | '  '     writeln(string("I am there"))
24e78                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
24e78     13 15 02 F6 | 	mov	arg02, local01
24e7c     16 17 02 F6 | 	mov	arg03, local04
24e80     14 17 82 F1 | 	sub	arg03, local02
24e84     01 16 06 F1 | 	add	arg03, #1
24e88     F6 03 00 FF 
24e8c     00 12 06 F6 | 	mov	arg01, ##519168
24e90     18 44 62 FD | 	getqx	local16
24e94     22 15 02 F1 | 	add	arg02, local16
24e98     14 15 02 F1 | 	add	arg02, local02
24e9c     18 04 B0 FD | 	call	#_psram_spin2_read1
24ea0     1B 45 02 F6 | 	mov	local16, local09
24ea4     15 45 82 F1 | 	sub	local16, local03
24ea8     20 45 02 F1 | 	add	local16, local14
24eac     1C 45 02 FD | 	qmul	local16, local10
24eb0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
24eb0     19 15 02 F6 | 	mov	arg02, local07
24eb4     16 17 02 F6 | 	mov	arg03, local04
24eb8     14 17 82 F1 | 	sub	arg03, local02
24ebc     01 16 06 F1 | 	add	arg03, #1
24ec0     F6 03 00 FF 
24ec4     00 12 06 F6 | 	mov	arg01, ##519168
24ec8     18 44 62 FD | 	getqx	local16
24ecc     22 15 02 F1 | 	add	arg02, local16
24ed0     1A 15 02 F1 | 	add	arg02, local08
24ed4     7C 04 B0 FD | 	call	#_psram_spin2_write
24ed8     23 41 02 F1 | 	add	local14, local17
24edc     24 41 0A F2 | 	cmp	local14, local18 wz
24ee0     90 FF 9F 5D |  if_ne	jmp	#LR__2892
24ee4     0B 00 00 FF 
24ee8     CC E4 85 F1 | 	sub	objptr, ##5836
24eec                 | LR__2893
24eec                 | LR__2894
24eec                 | '     
24eec                 | ' if ((f>=$80000) && (t<$80000)) 
24eec     00 04 00 FF 
24ef0     00 26 56 F2 | 	cmps	local01, ##524288 wc
24ef4     80 00 90 CD |  if_b	jmp	#LR__2896
24ef8     00 04 00 FF 
24efc     00 32 56 F2 | 	cmps	local07, ##524288 wc
24f00     74 00 90 3D |  if_ae	jmp	#LR__2896
24f04                 | '   repeat y from y1a to y2a
24f04     15 41 02 F6 | 	mov	local14, local03
24f08     15 2F 52 F2 | 	cmps	local05, local03 wc
24f0c     01 4A 86 F6 | 	negc	local19, #1
24f10     17 4D 02 F6 | 	mov	local20, local05
24f14     25 4D 02 F1 | 	add	local20, local19
24f18     0B 00 00 FF 
24f1c     CC E4 05 F1 | 	add	objptr, ##5836
24f20                 | LR__2895
24f20     1B 49 02 F6 | 	mov	local18, local09
24f24     15 49 82 F1 | 	sub	local18, local03
24f28     20 49 02 F1 | 	add	local18, local14
24f2c     1C 49 02 FD | 	qmul	local18, local10
24f30                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
24f30     19 13 02 F6 | 	mov	arg01, local07
24f34     18 48 62 FD | 	getqx	local18
24f38     18 41 02 FD | 	qmul	local14, local06
24f3c     24 13 02 F1 | 	add	arg01, local18
24f40     1A 13 02 F1 | 	add	arg01, local08
24f44     13 15 02 F6 | 	mov	arg02, local01
24f48     16 17 02 F6 | 	mov	arg03, local04
24f4c     14 17 82 F1 | 	sub	arg03, local02
24f50     01 16 06 F1 | 	add	arg03, #1
24f54     18 48 62 FD | 	getqx	local18
24f58     24 15 02 F1 | 	add	arg02, local18
24f5c     14 15 02 F1 | 	add	arg02, local02
24f60     54 03 B0 FD | 	call	#_psram_spin2_read1
24f64     25 41 02 F1 | 	add	local14, local19
24f68     26 41 0A F2 | 	cmp	local14, local20 wz
24f6c     B0 FF 9F 5D |  if_ne	jmp	#LR__2895
24f70     0B 00 00 FF 
24f74     CC E4 85 F1 | 	sub	objptr, ##5836
24f78                 | LR__2896
24f78                 | '     
24f78                 | ' if ((f<$80000) && (t>=$80000)) 
24f78     00 04 00 FF 
24f7c     00 26 56 F2 | 	cmps	local01, ##524288 wc
24f80     84 00 90 3D |  if_ae	jmp	#LR__2898
24f84     00 04 00 FF 
24f88     00 32 56 F2 | 	cmps	local07, ##524288 wc
24f8c     78 00 90 CD |  if_b	jmp	#LR__2898
24f90                 | '   t:=t & $FFFFFFF
24f90     7C 32 06 F4 | 	bitl	local07, #124
24f94                 | '   repeat y from y1a to y2a
24f94     15 41 02 F6 | 	mov	local14, local03
24f98     15 2F 52 F2 | 	cmps	local05, local03 wc
24f9c     01 4E 86 F6 | 	negc	local21, #1
24fa0     17 51 02 F6 | 	mov	local22, local05
24fa4     27 51 02 F1 | 	add	local22, local21
24fa8     0B 00 00 FF 
24fac     CC E4 05 F1 | 	add	objptr, ##5836
24fb0                 | LR__2897
24fb0     18 41 02 FD | 	qmul	local14, local06
24fb4                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
24fb4     13 13 02 F6 | 	mov	arg01, local01
24fb8     1B 4D 02 F6 | 	mov	local20, local09
24fbc     15 4D 82 F1 | 	sub	local20, local03
24fc0     20 4D 02 F1 | 	add	local20, local14
24fc4     18 4A 62 FD | 	getqx	local19
24fc8     1C 4D 02 FD | 	qmul	local20, local10
24fcc     25 13 02 F1 | 	add	arg01, local19
24fd0     14 13 02 F1 | 	add	arg01, local02
24fd4     19 15 02 F6 | 	mov	arg02, local07
24fd8     16 17 02 F6 | 	mov	arg03, local04
24fdc     14 17 82 F1 | 	sub	arg03, local02
24fe0     01 16 06 F1 | 	add	arg03, #1
24fe4     18 4C 62 FD | 	getqx	local20
24fe8     26 15 02 F1 | 	add	arg02, local20
24fec     1A 15 02 F1 | 	add	arg02, local08
24ff0     60 03 B0 FD | 	call	#_psram_spin2_write
24ff4     27 41 02 F1 | 	add	local14, local21
24ff8     28 41 0A F2 | 	cmp	local14, local22 wz
24ffc     B0 FF 9F 5D |  if_ne	jmp	#LR__2897
25000     0B 00 00 FF 
25004     CC E4 85 F1 | 	sub	objptr, ##5836
25008                 | LR__2898
25008                 | '     
25008                 | ' if ((f<$80000) && (t<$80000)) 
25008     00 04 00 FF 
2500c     00 26 56 F2 | 	cmps	local01, ##524288 wc
25010     00 04 00 CF 
25014     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
25018     64 00 90 3D |  if_ae	jmp	#LR__2900
2501c                 | '   repeat y from y1a to y2a
2501c     15 41 02 F6 | 	mov	local14, local03
25020     15 2F 52 F2 | 	cmps	local05, local03 wc
25024     01 52 86 F6 | 	negc	local23, #1
25028     17 55 02 F6 | 	mov	local24, local05
2502c     29 55 02 F1 | 	add	local24, local23
25030                 | LR__2899
25030     18 41 02 FD | 	qmul	local14, local06
25034                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25034     13 13 02 F6 | 	mov	arg01, local01
25038     1B 51 02 F6 | 	mov	local22, local09
2503c     15 51 82 F1 | 	sub	local22, local03
25040     20 51 02 F1 | 	add	local22, local14
25044     18 4E 62 FD | 	getqx	local21
25048     1C 51 02 FD | 	qmul	local22, local10
2504c     27 13 02 F1 | 	add	arg01, local21
25050     14 13 02 F1 | 	add	arg01, local02
25054     19 15 02 F6 | 	mov	arg02, local07
25058     16 17 02 F6 | 	mov	arg03, local04
2505c     14 17 82 F1 | 	sub	arg03, local02
25060     01 16 06 F1 | 	add	arg03, #1
25064     18 50 62 FD | 	getqx	local22
25068     28 15 02 F1 | 	add	arg02, local22
2506c     1A 15 02 F1 | 	add	arg02, local08
25070     EC 0D B0 FD | 	call	#__system____builtin_memmove
25074     29 41 02 F1 | 	add	local14, local23
25078     2A 41 0A F2 | 	cmp	local14, local24 wz
2507c     B0 FF 9F 5D |  if_ne	jmp	#LR__2899
25080                 | LR__2900
25080     A7 F0 03 F6 | 	mov	ptra, fp
25084     B2 00 A0 FD | 	call	#popregs_
25088                 | _hg010b_spin2_blit_ret
25088     2D 00 64 FD | 	ret
2508c                 | 
2508c                 | ' 
2508c                 | ' '..............................................................................
2508c                 | ' 
2508c                 | ' {{
2508c                 | ' }}
2508c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
2508c                 | _psram_spin2_startx
2508c     04 4A 05 F6 | 	mov	COUNT_, #4
25090     A8 00 A0 FD | 	call	#pushregs_
25094     09 27 02 F6 | 	mov	local01, arg01
25098     0B 29 02 F6 | 	mov	local02, arg03
2509c     0C 2B 02 F6 | 	mov	local03, arg04
250a0                 | '     stop() ' restart driver if required
250a0     54 01 B0 FD | 	call	#_psram_spin2_stop
250a4     00 26 0E F2 | 	cmp	local01, #0 wz
250a8     14 26 06 AB |  if_e	rdlong	local01, #20
250ac     13 15 52 F6 | 	abs	arg02, local01 wc
250b0     A1 07 00 FF 
250b4     40 14 16 FD | 	qdiv	arg02, ##1000000
250b8                 | ' 
250b8                 | '     ' use current frequency if none specified
250b8                 | ' 
250b8                 | '     if freq == 0 
250b8                 | '         freq := clkfreq 
250b8                 | ' 
250b8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
250b8                 | ' 
250b8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
250b8                 | '     if burst < 0
250b8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
250b8     18 14 62 FD | 	getqx	arg02
250bc     0A 19 82 F6 | 	negc	arg04, arg02
250c0     03 18 66 F0 | 	shl	arg04, #3
250c4     84 18 86 F1 | 	sub	arg04, #132
250c8     04 18 46 F0 | 	shr	arg04, #4
250cc     04 18 66 F0 | 	shl	arg04, #4
250d0     00 18 56 F2 | 	cmps	arg04, #0 wc
250d4     0E FA 65 C6 |  if_b	neg	result1, #14
250d8     10 01 90 CD |  if_b	jmp	#LR__2913
250dc                 | ' 
250dc                 | '     ' compute the input delay
250dc                 | ' 
250dc                 | '     if delay <= 0
250dc     01 28 56 F2 | 	cmps	local02, #1 wc
250e0     10 00 90 3D |  if_ae	jmp	#LR__2910
250e4                 | '         delay := lookupDelay(freq)
250e4     13 13 02 F6 | 	mov	arg01, local01
250e8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
250ec     FD 28 02 F6 | 	mov	local02, result1
250f0     04 00 90 FD | 	jmp	#LR__2911
250f4                 | LR__2910
250f4                 | '     else
250f4                 | '         delay <#= $f ' limit to 15
250f4     0F 28 66 F3 | 	fles	local02, #15
250f8                 | LR__2911
250f8                 | ' 
250f8                 | '     ' create our lock
250f8                 | ' 
250f8                 | '     driverlock := LOCKNEW()  
250f8     00 FA 05 F6 | 	mov	result1, #0
250fc     04 FA 61 FD | 	locknew	result1
25100     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25104     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
25108                 | '     if driverlock == -1
25108     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
2510c     FF FF 7F FF 
25110     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25114                 | '         return ERR_NO_LOCK
25114     1A FA 65 A6 |  if_e	neg	result1, #26
25118     D0 00 90 AD |  if_e	jmp	#LR__2913
2511c                 | ' 
2511c                 | '     ' patch in the proper data and HUB addresses to the startup structure
2511c                 | ' 
2511c                 | '     long[@startupData][0]:=clkfreq
2511c     14 26 06 FB | 	rdlong	local01, #20
25120     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
25124     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
25128                 | ' '    long[@startupData][1]:=$1000_0000
25128                 | '     long[@startupData][5]:=@deviceData
25128     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2512c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25130     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
25134     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25138     14 14 06 F1 | 	add	arg02, #20
2513c     0A 27 62 FC | 	wrlong	local01, arg02
25140                 | '     long[@startupData][6]:=@qosData
25140     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
25144     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25148     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
2514c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25150     18 14 06 F1 | 	add	arg02, #24
25154     0A 27 62 FC | 	wrlong	local01, arg02
25158                 | '     long[@startupData][7]:=$7FF00
25158     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
2515c     1C 26 06 F1 | 	add	local01, #28
25160     FF 03 80 FF 
25164     13 01 6A FC | 	wrlong	##524032, local01
25168                 | ' 
25168                 | '     ' setup some default bank and QoS parameter values
25168                 | ' 
25168                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
25168     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
2516c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25170     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
25174     10 18 66 F0 | 	shl	arg04, #16
25178     0C 28 66 F0 | 	shl	local02, #12
2517c     14 19 42 F5 | 	or	arg04, local02
25180     18 18 46 F5 | 	or	arg04, #24
25184     0C 15 02 F6 | 	mov	arg02, arg04
25188     02 16 06 F6 | 	mov	arg03, #2
2518c     A0 00 A0 FD | 	call	#\builtin_longfill_
25190                 | '     longfill(@qosData, $FFFF0000, 8)
25190     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25194     07 16 06 F6 | 	mov	arg03, #7
25198     28 16 62 FD | 	setq	arg03
2519c     80 FF FF FF 
251a0     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
251a4                 | ' 
251a4                 | '     ' get the address of the PSRAM memory driver so we can start it
251a4                 | ' 
251a4                 | '     driverAddr:= driver.getDriverAddr()
251a4                 | '     return @driver_start
251a4     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
251a8     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
251ac     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
251b0                 | ' 
251b0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
251b0                 | ' 
251b0                 | '     if desiredcog < 0
251b0     00 2A 56 F2 | 	cmps	local03, #0 wc
251b4                 | '         desiredcog := NEWCOG
251b4     10 2A 06 C6 |  if_b	mov	local03, #16
251b8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
251b8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
251bc     15 2D 02 F6 | 	mov	local04, local03
251c0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
251c4     0A 2D F2 FC | 	coginit	local04, arg02 wc
251c8     01 2C 66 C6 |  if_b	neg	local04, #1
251cc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
251d0     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
251d4                 | '     repeat until long[@startupData] == 0 
251d4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
251d8                 | LR__2912
251d8     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
251dc     F8 FF 9F 5D |  if_ne	jmp	#LR__2912
251e0                 | ' 
251e0                 | '     return drivercog
251e0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
251e4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
251e8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
251ec                 | LR__2913
251ec     A7 F0 03 F6 | 	mov	ptra, fp
251f0     B2 00 A0 FD | 	call	#popregs_
251f4                 | _psram_spin2_startx_ret
251f4     2D 00 64 FD | 	ret
251f8                 | 
251f8                 | ' 
251f8                 | ' '..............................................................................
251f8                 | ' 
251f8                 | ' {{
251f8                 | ' }}
251f8                 | ' PUB stop() : i
251f8                 | _psram_spin2_stop
251f8     00 00 06 F6 | 	mov	_var01, #0
251fc                 | '     if drivercog <> -1
251fc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25200     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25204     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25208     FF FF 7F FF 
2520c     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
25210     70 00 90 AD |  if_e	jmp	#LR__2923
25214                 | '         cogstop(drivercog) ' a rather brutal stop
25214     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25218     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2521c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25220     03 12 62 FD | 	cogstop	arg01
25224     97 26 48 FB | 	callpa	#(@LR__2922-@LR__2920)>>2,fcache_load_ptr_
25228                 | '         repeat i from 0 to 7
25228                 | LR__2920
25228                 | '             if long[$7FF00][i*3] < 0
25228     00 FB 01 F6 | 	mov	result1, _var01
2522c     01 FA 65 F0 | 	shl	result1, #1
25230     00 FB 01 F1 | 	add	result1, _var01
25234     02 FA 65 F0 | 	shl	result1, #2
25238     FF 03 00 FF 
2523c     00 FB 05 F1 | 	add	result1, ##524032
25240     FD FA 01 FB | 	rdlong	result1, result1
25244     00 FA 55 F2 | 	cmps	result1, #0 wc
25248     1C 00 90 3D |  if_ae	jmp	#LR__2921
2524c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
2524c     00 FB 01 F6 | 	mov	result1, _var01
25250     01 FA 65 F0 | 	shl	result1, #1
25254     00 FB 01 F1 | 	add	result1, _var01
25258     02 FA 65 F0 | 	shl	result1, #2
2525c     FF 03 00 FF 
25260     00 FB 05 F1 | 	add	result1, ##524032
25264     FD 20 68 FC | 	wrlong	#16, result1
25268                 | LR__2921
25268     01 00 06 F1 | 	add	_var01, #1
2526c     08 00 56 F2 | 	cmps	_var01, #8 wc
25270     B4 FF 9F CD |  if_b	jmp	#LR__2920
25274                 | LR__2922
25274                 | '         drivercog := -1
25274     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25278     FF FF FF FF 
2527c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25280     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25284                 | LR__2923
25284                 | '     if driverlock <> -1
25284     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25288     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2528c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25290     FF FF 7F FF 
25294     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25298                 | '         LOCKRET(driverlock)
25298     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
2529c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
252a0     05 12 62 5D |  if_ne	lockret	arg01
252a4                 | '         driverlock := -1
252a4     FF FF FF 5F 
252a8     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
252ac     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
252b0     00 FB 01 F6 | 	mov	result1, _var01
252b4                 | _psram_spin2_stop_ret
252b4     2D 00 64 FD | 	ret
252b8                 | 
252b8                 | ' 
252b8                 | ' '..............................................................................
252b8                 | ' 
252b8                 | ' {{
252b8                 | ' }}
252b8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
252b8                 | _psram_spin2_read1
252b8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
252b8                 | '     if drivercog == -1 ' driver must be running
252b8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
252bc     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
252c0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
252c4     FF FF 7F FF 
252c8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
252cc                 | '         return ERR_INACTIVE
252cc     0F FA 65 A6 |  if_e	neg	result1, #15
252d0     7C 00 90 AD |  if_e	jmp	#LR__2931
252d4                 | '     if count == 0 ' don't even bother reading
252d4     00 16 0E F2 | 	cmp	arg03, #0 wz
252d8                 | '         return 0
252d8     00 FA 05 A6 |  if_e	mov	result1, #0
252dc     70 00 90 AD |  if_e	jmp	#LR__2931
252e0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
252e0     00 FA 05 F6 | 	mov	result1, #0
252e4     01 FA 61 FD | 	cogid	result1
252e8     FD 00 02 F6 | 	mov	_var01, result1
252ec     01 00 66 F0 | 	shl	_var01, #1
252f0     FD 00 02 F1 | 	add	_var01, result1
252f4     02 00 66 F0 | 	shl	_var01, #2
252f8     FF 03 00 FF 
252fc     00 03 06 F6 | 	mov	_var02, ##524032
25300     00 03 02 F1 | 	add	_var02, _var01
25304                 | '     if long[mailbox] < 0
25304     01 01 02 FB | 	rdlong	_var01, _var02
25308     00 00 56 F2 | 	cmps	_var01, #0 wc
2530c                 | '         return ERR_MAILBOX_BUSY
2530c     1C FA 65 C6 |  if_b	neg	result1, #28
25310     3C 00 90 CD |  if_b	jmp	#LR__2931
25314                 | '     long[mailbox][2] := count
25314     08 02 06 F1 | 	add	_var02, #8
25318     01 17 62 FC | 	wrlong	arg03, _var02
2531c                 | '     long[mailbox][1] := dstHubAddr
2531c     04 02 86 F1 | 	sub	_var02, #4
25320     01 13 62 FC | 	wrlong	arg01, _var02
25324     04 02 86 F1 | 	sub	_var02, #4
25328                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25328     0A 05 02 F6 | 	mov	_var03, arg02
2532c     D9 04 06 F4 | 	bitl	_var03, #217
25330     00 00 58 FF 
25334     00 00 06 F6 | 	mov	_var01, ##-1342177280
25338     02 01 02 F1 | 	add	_var01, _var03
2533c     01 01 62 FC | 	wrlong	_var01, _var02
25340                 | '     repeat
25340                 | LR__2930
25340                 | '         result := long[mailbox]    
25340     01 05 02 FB | 	rdlong	_var03, _var02
25344     00 04 56 F2 | 	cmps	_var03, #0 wc
25348     F4 FF 9F CD |  if_b	jmp	#LR__2930
2534c                 | '     while result < 0   
2534c                 | '     return -result                       'return success or error
2534c     02 FB 61 F6 | 	neg	result1, _var03
25350                 | LR__2931
25350                 | _psram_spin2_read1_ret
25350     2D 00 64 FD | 	ret
25354                 | 
25354                 | ' 
25354                 | ' '..............................................................................
25354                 | ' 
25354                 | ' {{
25354                 | ' }}
25354                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
25354                 | _psram_spin2_write
25354                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25354                 | '     if drivercog == -1 ' driver must be running
25354     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25358     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2535c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25360     FF FF 7F FF 
25364     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25368                 | '         return ERR_INACTIVE
25368     0F FA 65 A6 |  if_e	neg	result1, #15
2536c     7C 00 90 AD |  if_e	jmp	#LR__2941
25370                 | '     if count == 0 ' don't even bother writing
25370     00 16 0E F2 | 	cmp	arg03, #0 wz
25374                 | '         return 0
25374     00 FA 05 A6 |  if_e	mov	result1, #0
25378     70 00 90 AD |  if_e	jmp	#LR__2941
2537c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2537c     00 FA 05 F6 | 	mov	result1, #0
25380     01 FA 61 FD | 	cogid	result1
25384     FD 00 02 F6 | 	mov	_var01, result1
25388     01 00 66 F0 | 	shl	_var01, #1
2538c     FD 00 02 F1 | 	add	_var01, result1
25390     02 00 66 F0 | 	shl	_var01, #2
25394     FF 03 00 FF 
25398     00 03 06 F6 | 	mov	_var02, ##524032
2539c     00 03 02 F1 | 	add	_var02, _var01
253a0                 | '     if long[mailbox] < 0
253a0     01 01 02 FB | 	rdlong	_var01, _var02
253a4     00 00 56 F2 | 	cmps	_var01, #0 wc
253a8                 | '         return ERR_MAILBOX_BUSY
253a8     1C FA 65 C6 |  if_b	neg	result1, #28
253ac     3C 00 90 CD |  if_b	jmp	#LR__2941
253b0                 | '     long[mailbox][2] := count
253b0     08 02 06 F1 | 	add	_var02, #8
253b4     01 17 62 FC | 	wrlong	arg03, _var02
253b8                 | '     long[mailbox][1] := srcHubAddr
253b8     04 02 86 F1 | 	sub	_var02, #4
253bc     01 13 62 FC | 	wrlong	arg01, _var02
253c0     04 02 86 F1 | 	sub	_var02, #4
253c4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
253c4     0A 05 02 F6 | 	mov	_var03, arg02
253c8     D9 04 06 F4 | 	bitl	_var03, #217
253cc     00 00 78 FF 
253d0     00 00 06 F6 | 	mov	_var01, ##-268435456
253d4     02 01 02 F1 | 	add	_var01, _var03
253d8     01 01 62 FC | 	wrlong	_var01, _var02
253dc                 | '     repeat
253dc                 | LR__2940
253dc                 | '         result := long[mailbox]    
253dc     01 05 02 FB | 	rdlong	_var03, _var02
253e0     00 04 56 F2 | 	cmps	_var03, #0 wc
253e4     F4 FF 9F CD |  if_b	jmp	#LR__2940
253e8                 | '     while result < 0   
253e8                 | '     return -result                       'return success or error
253e8     02 FB 61 F6 | 	neg	result1, _var03
253ec                 | LR__2941
253ec                 | _psram_spin2_write_ret
253ec     2D 00 64 FD | 	ret
253f0                 | 
253f0                 | ' 
253f0                 | ' ' generalized fill
253f0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
253f0                 | _psram_spin2_fill
253f0     09 01 02 F6 | 	mov	_var01, arg01
253f4     0A 03 02 F6 | 	mov	_var02, arg02
253f8     0B 05 02 F6 | 	mov	_var03, arg03
253fc     0D 07 02 F6 | 	mov	_var04, arg05
25400                 | '     case datasize 
25400     01 06 86 F1 | 	sub	_var04, #1
25404     04 06 26 F3 | 	fle	_var04, #4
25408     30 06 62 FD | 	jmprel	_var04
2540c                 | LR__2950
2540c     10 00 90 FD | 	jmp	#LR__2951
25410     18 00 90 FD | 	jmp	#LR__2952
25414     2C 00 90 FD | 	jmp	#LR__2954
25418     1C 00 90 FD | 	jmp	#LR__2953
2541c     24 00 90 FD | 	jmp	#LR__2954
25420                 | LR__2951
25420                 | '         1: req := driver.R_WRITEBYTE
25420     00 00 60 FF 
25424     00 08 06 F6 | 	mov	_var05, ##-1073741824
25428     20 00 90 FD | 	jmp	#LR__2955
2542c                 | LR__2952
2542c                 | '         2: req := driver.R_WRITEWORD
2542c     00 00 68 FF 
25430     00 08 06 F6 | 	mov	_var05, ##-805306368
25434     14 00 90 FD | 	jmp	#LR__2955
25438                 | LR__2953
25438                 | '         4: req := driver.R_WRITELONG
25438     00 00 70 FF 
2543c     00 08 06 F6 | 	mov	_var05, ##-536870912
25440     08 00 90 FD | 	jmp	#LR__2955
25444                 | LR__2954
25444                 | '         other : return ERR_INVALID
25444     06 FA 65 F6 | 	neg	result1, #6
25448     94 00 90 FD | 	jmp	#LR__2957
2544c                 | LR__2955
2544c                 | '     if count == 0   ' nothing to do
2544c     00 04 0E F2 | 	cmp	_var03, #0 wz
25450                 | '         return 0
25450     00 FA 05 A6 |  if_e	mov	result1, #0
25454     88 00 90 AD |  if_e	jmp	#LR__2957
25458                 | '     if drivercog == -1
25458     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2545c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25460     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25464     FF FF 7F FF 
25468     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2546c                 | '         return ERR_INACTIVE
2546c     0F FA 65 A6 |  if_e	neg	result1, #15
25470     6C 00 90 AD |  if_e	jmp	#LR__2957
25474                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
25474     00 FA 05 F6 | 	mov	result1, #0
25478     01 FA 61 FD | 	cogid	result1
2547c     FD 06 02 F6 | 	mov	_var04, result1
25480     01 06 66 F0 | 	shl	_var04, #1
25484     FD 06 02 F1 | 	add	_var04, result1
25488     02 06 66 F0 | 	shl	_var04, #2
2548c     FF 03 00 FF 
25490     00 0B 06 F6 | 	mov	_var06, ##524032
25494     03 0B 02 F1 | 	add	_var06, _var04
25498                 | '     if long[mailbox] < 0
25498     05 07 02 FB | 	rdlong	_var04, _var06
2549c     00 06 56 F2 | 	cmps	_var04, #0 wc
254a0                 | '         return ERR_MAILBOX_BUSY
254a0     1C FA 65 C6 |  if_b	neg	result1, #28
254a4     38 00 90 CD |  if_b	jmp	#LR__2957
254a8                 | '     long[mailbox][2] := count
254a8     08 0A 06 F1 | 	add	_var06, #8
254ac     05 05 62 FC | 	wrlong	_var03, _var06
254b0                 | '     long[mailbox][1] := pattern
254b0     04 0A 86 F1 | 	sub	_var06, #4
254b4     05 03 62 FC | 	wrlong	_var02, _var06
254b8     04 0A 86 F1 | 	sub	_var06, #4
254bc                 | '     long[mailbox] := req + (addr & $1ffffff)
254bc     04 0D 02 F6 | 	mov	_var07, _var05
254c0     00 0F 02 F6 | 	mov	_var08, _var01
254c4     D9 0E 06 F4 | 	bitl	_var08, #217
254c8     07 0D 02 F1 | 	add	_var07, _var08
254cc     05 0D 62 FC | 	wrlong	_var07, _var06
254d0                 | '     repeat
254d0                 | LR__2956
254d0                 | '         r := long[mailbox]
254d0     05 0F 02 FB | 	rdlong	_var08, _var06
254d4     00 0E 56 F2 | 	cmps	_var08, #0 wc
254d8     F4 FF 9F CD |  if_b	jmp	#LR__2956
254dc                 | '     while r < 0
254dc                 | '     return -r                  ' return 0 for success or negated error code
254dc     07 FB 61 F6 | 	neg	result1, _var08
254e0                 | LR__2957
254e0                 | _psram_spin2_fill_ret
254e0     2D 00 64 FD | 	ret
254e4                 | 
254e4                 | ' 
254e4                 | ' '..............................................................................
254e4                 | ' 
254e4                 | ' {{
254e4                 | ' }}
254e4                 | ' PUB setQos(cog, qos) : result | mailbox
254e4                 | _psram_spin2_setQos
254e4     09 01 02 F6 | 	mov	_var01, arg01
254e8                 | '     if drivercog == -1 ' driver must be running
254e8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
254ec     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
254f0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
254f4     FF FF 7F FF 
254f8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
254fc                 | '         return ERR_INACTIVE
254fc     0F FA 65 A6 |  if_e	neg	result1, #15
25500     9C 00 90 AD |  if_e	jmp	#LR__2964
25504                 | '     if cog < 0 or cog > 7 ' enforce cog id range
25504     00 00 56 F2 | 	cmps	_var01, #0 wc
25508     08 00 90 CD |  if_b	jmp	#LR__2960
2550c     08 00 56 F2 | 	cmps	_var01, #8 wc
25510     08 00 90 CD |  if_b	jmp	#LR__2961
25514                 | LR__2960
25514                 | '         return ERR_INVALID
25514     06 FA 65 F6 | 	neg	result1, #6
25518     84 00 90 FD | 	jmp	#LR__2964
2551c                 | LR__2961
2551c                 | '     long[@qosData][cog] := qos & !$1ff
2551c     FF 15 26 F5 | 	andn	arg02, #511
25520     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25524     02 00 66 F0 | 	shl	_var01, #2
25528     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2552c     00 15 62 FC | 	wrlong	arg02, _var01
25530                 | '     mailbox := $7FF00 + drivercog*12
25530     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
25534     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25538     02 07 02 F6 | 	mov	_var04, _var03
2553c     01 06 66 F0 | 	shl	_var04, #1
25540     02 07 02 F1 | 	add	_var04, _var03
25544     02 06 66 F0 | 	shl	_var04, #2
25548     FF 03 00 FF 
2554c     00 09 06 F6 | 	mov	_var05, ##524032
25550     03 09 02 F1 | 	add	_var05, _var04
25554                 | '     repeat until LOCKTRY(driverlock)
25554     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25558                 | LR__2962
25558     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2555c     06 12 72 FD | 	locktry	arg01 wc
25560     F4 FF 9F 3D |  if_ae	jmp	#LR__2962
25564     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25568                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25568     00 06 06 F6 | 	mov	_var04, #0
2556c     01 06 62 FD | 	cogid	_var04
25570     00 00 78 FF 
25574     00 02 06 F6 | 	mov	_var02, ##-268435456
25578     03 03 02 F1 | 	add	_var02, _var04
2557c     04 03 62 FC | 	wrlong	_var02, _var05
25580                 | '     repeat while long[mailbox] < 0
25580                 | LR__2963
25580     04 03 02 FB | 	rdlong	_var02, _var05
25584     00 02 56 F2 | 	cmps	_var02, #0 wc
25588     F4 FF 9F CD |  if_b	jmp	#LR__2963
2558c                 | '     LOCKREL(driverlock)
2558c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25590     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25594     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25598     07 12 72 FD | 	lockrel	arg01 wc
2559c     00 FA 05 F6 | 	mov	result1, #0
255a0                 | LR__2964
255a0                 | _psram_spin2_setQos_ret
255a0     2D 00 64 FD | 	ret
255a4                 | 
255a4                 | ' 
255a4                 | ' '..............................................................................
255a4                 | ' 
255a4                 | ' {{
255a4                 | ' }}
255a4                 | ' PRI lookupDelay(freq) : delay | profile
255a4                 | _psram_spin2_lookupDelay
255a4                 | '     profile := @delayTable
255a4     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
255a8     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
255ac                 | '     delay := long[profile][0]
255ac     00 03 02 FB | 	rdlong	_var02, _var01
255b0                 | '     repeat while long[profile][1] 
255b0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
255b4     97 16 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
255b8                 | LR__2970
255b8     04 00 06 F1 | 	add	_var01, #4
255bc     00 FB 09 FB | 	rdlong	result1, _var01 wz
255c0     04 00 86 F1 | 	sub	_var01, #4
255c4     1C 00 90 AD |  if_e	jmp	#LR__2972
255c8                 | '         if freq +< long[profile][1] 
255c8     04 00 06 F1 | 	add	_var01, #4
255cc     00 FB 01 FB | 	rdlong	result1, _var01
255d0     04 00 86 F1 | 	sub	_var01, #4
255d4     FD 12 12 F2 | 	cmp	arg01, result1 wc
255d8                 | '             quit
255d8                 | '         profile += 4
255d8     04 00 06 31 |  if_ae	add	_var01, #4
255dc                 | '         delay++
255dc     01 02 06 31 |  if_ae	add	_var02, #1
255e0     D4 FF 9F 3D |  if_ae	jmp	#LR__2970
255e4                 | LR__2971
255e4                 | LR__2972
255e4     01 FB 01 F6 | 	mov	result1, _var02
255e8                 | _psram_spin2_lookupDelay_ret
255e8     2D 00 64 FD | 	ret
255ec                 | 
255ec                 | ' 
255ec                 | ' PUB start() : r
255ec                 | _usbnew_spin2_start
255ec     00 00 06 F6 | 	mov	_var01, #0
255f0                 | '   ifnot driver_cog
255f0     15 00 00 FF 
255f4     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
255f8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
255fc     15 00 00 FF 
25600     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
25604     38 00 90 5D |  if_ne	jmp	#LR__2980
25608                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25608     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
2560c     10 00 06 F6 | 	mov	_var01, #16
25610     00 16 06 F6 | 	mov	arg03, #0
25614     28 16 62 FD | 	setq	arg03
25618     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2561c     01 00 66 C6 |  if_b	neg	_var01, #1
25620                 | '     if r >= 0
25620     00 00 56 F2 | 	cmps	_var01, #0 wc
25624                 | '       driver_cog := r+1
25624     00 03 02 36 |  if_ae	mov	_var02, _var01
25628     01 02 06 31 |  if_ae	add	_var02, #1
2562c     15 00 00 3F 
25630     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
25634     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
25638     15 00 00 3F 
2563c     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
25640                 | LR__2980
25640     00 FB 01 F6 | 	mov	result1, _var01
25644                 | _usbnew_spin2_start_ret
25644     2D 00 64 FD | 	ret
25648                 | 
25648                 | '     '' (Always enabled)
25648                 | ' 
25648                 | ' '' Get current pressed state of a keyboard key
25648                 | ' PUB keystate(key) : r | buf[2],tmp
25648                 | _usbnew_spin2_keystate
25648     00 04 06 F6 | 	mov	_var03, #0
2564c                 | '   if key >= $E0 && key < $E8
2564c     E0 12 56 F2 | 	cmps	arg01, #224 wc
25650     34 00 90 CD |  if_b	jmp	#LR__2990
25654     E8 12 56 F2 | 	cmps	arg01, #232 wc
25658     2C 00 90 3D |  if_ae	jmp	#LR__2990
2565c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2565c     00 FA 05 F6 | 	mov	result1, #0
25660     13 00 00 FF 
25664     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25668     09 07 02 F6 | 	mov	_var04, arg01
2566c     E0 06 86 F1 | 	sub	_var04, #224
25670     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
25674     03 09 4A F0 | 	shr	_var05, _var04 wz
25678     13 00 00 FF 
2567c     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
25680     01 FA 65 56 |  if_ne	neg	result1, #1
25684     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
25688                 | LR__2990
25688                 | '   else
25688                 | '     '' Do this in inline ASM to ensure atomicity
25688                 | '     tmp := @hkbd_report
25688     13 00 00 FF 
2568c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
25690     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
25694                 | '     org
25694     13 00 00 FF 
25698     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
2569c     97 1E 48 FB | 	callpa	#(@LR__2992-@LR__2991)>>2,fcache_load_ptr_
256a0                 | LR__2991
256a0 000             | 	org	0
256a0 000 28 02 64 FD | 	setq	#1
256a4 001 04 01 02 FB | 	rdlong	_var01, _var05
256a8 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
256ac 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
256b0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
256b4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256b8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
256bc 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256c0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
256c4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256c8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
256cc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256d0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
256d4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
256d8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
256dc 00f             | LR__2992
256dc                 | 	orgh
256dc     02 FB 01 F6 | 	mov	result1, _var03
256e0                 | _usbnew_spin2_keystate_ret
256e0     2D 00 64 FD | 	ret
256e4                 | 
256e4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
256e4                 | ' 
256e4                 | ' '' Return key event from buffer if there is one
256e4                 | ' PUB get_key() : r | tail
256e4                 | _usbnew_spin2_get_key
256e4                 | '   tail := keyq_tail
256e4     0F 00 00 FF 
256e8     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
256ec     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
256f0                 | '   if keyq_head == tail
256f0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
256f4     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
256f8     0F 00 00 FF 
256fc     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
25700     00 03 0A F2 | 	cmp	_var02, _var01 wz
25704                 | '     return 0 ' No event
25704     00 FA 05 A6 |  if_e	mov	result1, #0
25708     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
2570c                 | '   r := keyq_data[tail]
2570c     00 03 02 F6 | 	mov	_var02, _var01
25710     02 02 66 F0 | 	shl	_var02, #2
25714     0F 00 00 FF 
25718     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
2571c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
25720     01 FB 01 FB | 	rdlong	result1, _var02
25724                 | '   if ++tail == KEYQUEUE_SIZE
25724     01 00 06 F1 | 	add	_var01, #1
25728     80 00 0E F2 | 	cmp	_var01, #128 wz
2572c                 | '     tail := 0
2572c     00 00 06 A6 |  if_e	mov	_var01, #0
25730                 | '   keyq_tail := tail
25730     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
25734     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
25738     0F 00 00 FF 
2573c     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
25740                 | _usbnew_spin2_get_key_ret
25740     2D 00 64 FD | 	ret
25744                 | 
25744                 | ' 
25744                 | ' '' Emulate mouse movement
25744                 | ' PUB mouse_move(x,y)
25744                 | _usbnew_spin2_mouse_move
25744     02 4A 05 F6 | 	mov	COUNT_, #2
25748     A8 00 A0 FD | 	call	#pushregs_
2574c     09 27 02 F6 | 	mov	local01, arg01
25750     0A 29 02 F6 | 	mov	local02, arg02
25754                 | '   mouse_lock := 1
25754     14 00 00 FF 
25758     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
2575c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
25760     14 00 00 FF 
25764     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
25768                 | '   waitus(2) ' hope driver is now done
25768     02 12 06 F6 | 	mov	arg01, #2
2576c     30 0B B0 FD | 	call	#__system___waitus
25770                 | '   mouse_xacc := x
25770     14 00 00 FF 
25774     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
25778     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
2577c                 | '   mouse_yacc := y
2577c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
25780     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
25784                 | '   if mouse_outptr
25784     04 00 00 FF 
25788     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
2578c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
25790     0F 00 00 FF 
25794     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
25798     24 00 90 AD |  if_e	jmp	#LR__3000
2579c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
2579c     10 28 66 F0 | 	shl	local02, #16
257a0     13 27 32 F9 | 	getword	local01, local01, #0
257a4     13 29 42 F5 | 	or	local02, local01
257a8     0F 00 00 FF 
257ac     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
257b0     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
257b4     0F 00 00 FF 
257b8     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
257bc     13 29 62 FC | 	wrlong	local02, local01
257c0                 | LR__3000
257c0                 | '   mouse_lock := 0
257c0     14 00 00 FF 
257c4     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
257c8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
257cc     14 00 00 FF 
257d0     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
257d4     A7 F0 03 F6 | 	mov	ptra, fp
257d8     B2 00 A0 FD | 	call	#popregs_
257dc                 | _usbnew_spin2_mouse_move_ret
257dc     2D 00 64 FD | 	ret
257e0                 | 
257e0                 | '     '' Set HAVE_HIDPAD to enable.
257e0                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
257e0                 | ' 
257e0                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
257e0                 | ' PUB hidpad_id(dev) : r
257e0                 | _usbnew_spin2_hidpad_id
257e0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
257e0     13 00 00 FF 
257e4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
257e8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
257ec     09 01 02 F6 | 	mov	_var01, arg01
257f0     03 00 66 F0 | 	shl	_var01, #3
257f4     09 01 82 F1 | 	sub	_var01, arg01
257f8     02 00 66 F0 | 	shl	_var01, #2
257fc     00 FB 01 F1 | 	add	result1, _var01
25800     FD FA 01 FB | 	rdlong	result1, result1
25804     13 00 00 FF 
25808     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
2580c                 | _usbnew_spin2_hidpad_id_ret
2580c     2D 00 64 FD | 	ret
25810                 | 
25810                 | ' 
25810                 | ' '' Get all button states for a device
25810                 | ' PUB hidpad_buttons(dev) : r 
25810                 | _usbnew_spin2_hidpad_buttons
25810                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
25810     13 00 00 FF 
25814     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25818     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2581c     09 01 02 F6 | 	mov	_var01, arg01
25820     03 00 66 F0 | 	shl	_var01, #3
25824     09 01 82 F1 | 	sub	_var01, arg01
25828     02 00 66 F0 | 	shl	_var01, #2
2582c     00 FB 01 F1 | 	add	result1, _var01
25830     14 FA 05 F1 | 	add	result1, #20
25834     FD FA 01 FB | 	rdlong	result1, result1
25838     13 00 00 FF 
2583c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25840                 | _usbnew_spin2_hidpad_buttons_ret
25840     2D 00 64 FD | 	ret
25844                 | 
25844                 | ' 
25844                 | ' '' Get state of an axis (normalized between -32768 and 32767)
25844                 | ' PUB hidpad_axis(dev,axnum) : r
25844                 | _usbnew_spin2_hidpad_axis
25844                 | '   if axnum +>= 6
25844     06 14 16 F2 | 	cmp	arg02, #6 wc
25848                 | '     return 0
25848     00 FA 05 36 |  if_ae	mov	result1, #0
2584c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
25850                 | '   else 
25850                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
25850     13 00 00 FF 
25854     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
25858     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2585c     09 01 02 F6 | 	mov	_var01, arg01
25860     03 00 66 F0 | 	shl	_var01, #3
25864     09 01 82 F1 | 	sub	_var01, arg01
25868     02 00 66 F0 | 	shl	_var01, #2
2586c     00 FB 01 F1 | 	add	result1, _var01
25870     04 00 06 F6 | 	mov	_var01, #4
25874     0A 01 02 F1 | 	add	_var01, arg02
25878     01 00 66 F0 | 	shl	_var01, #1
2587c     FD 00 02 F1 | 	add	_var01, result1
25880     00 FB E1 FA | 	rdword	result1, _var01
25884     0F FA 65 F7 | 	signx	result1, #15
25888     13 00 00 FF 
2588c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
25890                 | _usbnew_spin2_hidpad_axis_ret
25890     2D 00 64 FD | 	ret
25894                 | 
25894                 | ' 
25894                 | ' '' Get state of a hat
25894                 | ' PUB hidpad_hat(dev,hatnum) : r
25894                 | _usbnew_spin2_hidpad_hat
25894                 | '   if hatnum +>= 4
25894     04 14 16 F2 | 	cmp	arg02, #4 wc
25898                 | '     return 0
25898     00 FA 05 36 |  if_ae	mov	result1, #0
2589c     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
258a0                 | '   else 
258a0                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
258a0     13 00 00 FF 
258a4     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
258a8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
258ac     09 01 02 F6 | 	mov	_var01, arg01
258b0     03 00 66 F0 | 	shl	_var01, #3
258b4     09 01 82 F1 | 	sub	_var01, arg01
258b8     02 00 66 F0 | 	shl	_var01, #2
258bc     00 FB 01 F1 | 	add	result1, _var01
258c0     18 00 06 F6 | 	mov	_var01, #24
258c4     0A 01 02 F1 | 	add	_var01, arg02
258c8     FD 00 02 F1 | 	add	_var01, result1
258cc     00 FB C1 FA | 	rdbyte	result1, _var01
258d0     13 00 00 FF 
258d4     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
258d8                 | _usbnew_spin2_hidpad_hat_ret
258d8     2D 00 64 FD | 	ret
258dc                 | 
258dc                 | ' 
258dc                 | ' 
258dc                 | ' '--------------------------------------------------------------
258dc                 | ' '---------- Init the variables, start the cog. ----------------
258dc                 | ' '--------------------------------------------------------------
258dc                 | ' 
258dc                 | ' pub start(mbox,scope,cache) :cog,base | iii
258dc                 | _audio096_spin2_start
258dc     04 4A 05 F6 | 	mov	COUNT_, #4
258e0     A8 00 A0 FD | 	call	#pushregs_
258e4     09 27 02 F6 | 	mov	local01, arg01
258e8                 | ' 
258e8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
258e8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
258e8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
258e8                 | ' 
258e8                 | ' mailboxaddr:=mbox 
258e8     F2 26 62 FC | 	wrlong	local01, objptr
258ec                 | ' scope_ptr:=scope
258ec     04 E4 05 F1 | 	add	objptr, #4
258f0     F2 14 62 FC | 	wrlong	arg02, objptr
258f4                 | ' cache_ptr:=cache
258f4     04 E4 05 F1 | 	add	objptr, #4
258f8     F2 16 62 FC | 	wrlong	arg03, objptr
258fc                 | ' base:=@channel1[0]
258fc     04 E4 05 F1 | 	add	objptr, #4
25900     F2 28 02 F6 | 	mov	local02, objptr
25904                 | ' long[$40]:=mbox
25904     40 26 66 FC | 	wrlong	local01, #64
25908                 | ' repeat iii from 0 to 7
25908     00 2A 06 F6 | 	mov	local03, #0
2590c     02 00 00 FF 
25910     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
25914     0C E4 85 F1 | 	sub	objptr, #12
25918     97 BC 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
2591c                 | LR__3010
2591c                 | '   long[base+64*iii]:=0
2591c     14 27 02 F6 | 	mov	local01, local02
25920     15 FD 01 F6 | 	mov	result2, local03
25924     06 FC 65 F0 | 	shl	result2, #6
25928     FE 26 02 F1 | 	add	local01, result2
2592c     13 01 68 FC | 	wrlong	#0, local01
25930                 | '   long[base+64*iii+4]:=0
25930     14 27 02 F6 | 	mov	local01, local02
25934     15 FD 01 F6 | 	mov	result2, local03
25938     06 FC 65 F0 | 	shl	result2, #6
2593c     FE 26 02 F1 | 	add	local01, result2
25940     04 26 06 F1 | 	add	local01, #4
25944     13 01 68 FC | 	wrlong	#0, local01
25948                 | '   long[base+64*iii+12]:=0
25948     14 2D 02 F6 | 	mov	local04, local02
2594c     15 27 02 F6 | 	mov	local01, local03
25950     06 26 66 F0 | 	shl	local01, #6
25954     13 2D 02 F1 | 	add	local04, local01
25958     0C 2C 06 F1 | 	add	local04, #12
2595c     16 01 68 FC | 	wrlong	#0, local04
25960                 | '   long[base+64*iii+16]:=2 
25960     14 2D 02 F6 | 	mov	local04, local02
25964     15 27 02 F6 | 	mov	local01, local03
25968     06 26 66 F0 | 	shl	local01, #6
2596c     13 2D 02 F1 | 	add	local04, local01
25970     10 2C 06 F1 | 	add	local04, #16
25974     16 05 68 FC | 	wrlong	#2, local04
25978                 | '   word[base+64*iii+20]:=0
25978     14 2D 02 F6 | 	mov	local04, local02
2597c     15 27 02 F6 | 	mov	local01, local03
25980     06 26 66 F0 | 	shl	local01, #6
25984     13 2D 02 F1 | 	add	local04, local01
25988     14 2C 06 F1 | 	add	local04, #20
2598c     16 01 58 FC | 	wrword	#0, local04
25990                 | '   word[base+64*iii+22]:=8192
25990     14 2D 02 F6 | 	mov	local04, local02
25994     15 27 02 F6 | 	mov	local01, local03
25998     06 26 66 F0 | 	shl	local01, #6
2599c     13 2D 02 F1 | 	add	local04, local01
259a0     16 2C 06 F1 | 	add	local04, #22
259a4     10 00 80 FF 
259a8     16 01 58 FC | 	wrword	##8192, local04
259ac                 | '   word[base+64*iii+24]:=4000+2*iii
259ac     15 2D 02 F6 | 	mov	local04, local03
259b0     01 2C 66 F0 | 	shl	local04, #1
259b4     07 00 00 FF 
259b8     A0 27 06 F6 | 	mov	local01, ##4000
259bc     16 27 02 F1 | 	add	local01, local04
259c0     14 2D 02 F6 | 	mov	local04, local02
259c4     15 FD 01 F6 | 	mov	result2, local03
259c8     06 FC 65 F0 | 	shl	result2, #6
259cc     FE 2C 02 F1 | 	add	local04, result2
259d0     18 2C 06 F1 | 	add	local04, #24
259d4     16 27 52 FC | 	wrword	local01, local04
259d8                 | '   word[base+64*iii+26]:=2
259d8     14 2D 02 F6 | 	mov	local04, local02
259dc     15 27 02 F6 | 	mov	local01, local03
259e0     06 26 66 F0 | 	shl	local01, #6
259e4     13 2D 02 F1 | 	add	local04, local01
259e8     1A 2C 06 F1 | 	add	local04, #26
259ec     16 05 58 FC | 	wrword	#2, local04
259f0                 | '   long [base+64*iii+8]:=@null | $C0000000
259f0     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
259f4     3E 26 26 F4 | 	bith	local01, #62
259f8     14 2D 02 F6 | 	mov	local04, local02
259fc     15 17 02 F6 | 	mov	arg03, local03
25a00     06 16 66 F0 | 	shl	arg03, #6
25a04     0B 2D 02 F1 | 	add	local04, arg03
25a08     08 2C 06 F1 | 	add	local04, #8
25a0c     16 27 62 FC | 	wrlong	local01, local04
25a10                 | '   long[base+64*iii+32]:=0
25a10     14 2D 02 F6 | 	mov	local04, local02
25a14     15 27 02 F6 | 	mov	local01, local03
25a18     06 26 66 F0 | 	shl	local01, #6
25a1c     13 2D 02 F1 | 	add	local04, local01
25a20     20 2C 06 F1 | 	add	local04, #32
25a24     16 01 68 FC | 	wrlong	#0, local04
25a28                 | '   long[base+64*iii+36]:=0
25a28     14 2D 02 F6 | 	mov	local04, local02
25a2c     15 27 02 F6 | 	mov	local01, local03
25a30     06 26 66 F0 | 	shl	local01, #6
25a34     13 2D 02 F1 | 	add	local04, local01
25a38     24 2C 06 F1 | 	add	local04, #36
25a3c     16 01 68 FC | 	wrlong	#0, local04
25a40                 | '   long[base+64*iii+40]:=0
25a40     14 2D 02 F6 | 	mov	local04, local02
25a44     15 27 02 F6 | 	mov	local01, local03
25a48     06 26 66 F0 | 	shl	local01, #6
25a4c     13 2D 02 F1 | 	add	local04, local01
25a50     28 2C 06 F1 | 	add	local04, #40
25a54     16 01 68 FC | 	wrlong	#0, local04
25a58                 | '   long[base+64*iii+44]:=0
25a58     14 2D 02 F6 | 	mov	local04, local02
25a5c     15 27 02 F6 | 	mov	local01, local03
25a60     06 26 66 F0 | 	shl	local01, #6
25a64     13 2D 02 F1 | 	add	local04, local01
25a68     2C 2C 06 F1 | 	add	local04, #44
25a6c     16 01 68 FC | 	wrlong	#0, local04
25a70                 | '   long[base+64*iii+28]:=0
25a70     14 2D 02 F6 | 	mov	local04, local02
25a74     15 27 02 F6 | 	mov	local01, local03
25a78     06 26 66 F0 | 	shl	local01, #6
25a7c     13 2D 02 F1 | 	add	local04, local01
25a80     1C 2C 06 F1 | 	add	local04, #28
25a84     16 01 68 FC | 	wrlong	#0, local04
25a88     01 2A 06 F1 | 	add	local03, #1
25a8c     08 2A 56 F2 | 	cmps	local03, #8 wc
25a90     88 FE 9F CD |  if_b	jmp	#LR__3010
25a94                 | LR__3011
25a94     02 00 00 FF 
25a98     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
25a9c                 | '   
25a9c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
25a9c     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
25aa0     F2 16 02 F6 | 	mov	arg03, objptr
25aa4     10 2C 06 F6 | 	mov	local04, #16
25aa8     28 16 62 FD | 	setq	arg03
25aac     0A 2D F2 FC | 	coginit	local04, arg02 wc
25ab0     01 2C 66 C6 |  if_b	neg	local04, #1
25ab4                 | ' waitms(100)
25ab4     64 12 06 F6 | 	mov	arg01, #100
25ab8     78 07 B0 FD | 	call	#__system___waitms
25abc                 | ' return cog,base
25abc     14 FD 01 F6 | 	mov	result2, local02
25ac0     16 FB 01 F6 | 	mov	result1, local04
25ac4     A7 F0 03 F6 | 	mov	ptra, fp
25ac8     B2 00 A0 FD | 	call	#popregs_
25acc                 | _audio096_spin2_start_ret
25acc     2D 00 64 FD | 	ret
25ad0                 | 
25ad0                 | ' 
25ad0                 | ' ' a simple play procedure to not poke everything. 
25ad0                 | ' 
25ad0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
25ad0                 | _audio096_spin2_play
25ad0     0C E4 05 F1 | 	add	objptr, #12
25ad4     F2 00 02 F6 | 	mov	_var01, objptr
25ad8     06 12 66 F0 | 	shl	arg01, #6
25adc     09 01 02 F1 | 	add	_var01, arg01
25ae0     00 13 02 F6 | 	mov	arg01, _var01
25ae4     0C 12 06 F1 | 	add	arg01, #12
25ae8     09 1B 62 FC | 	wrlong	arg05, arg01
25aec     00 1C 56 F2 | 	cmps	arg06, #0 wc
25af0     00 13 02 36 |  if_ae	mov	arg01, _var01
25af4     10 12 06 31 |  if_ae	add	arg01, #16
25af8     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
25afc     02 1A 06 C1 |  if_b	add	arg05, #2
25b00     00 13 02 C6 |  if_b	mov	arg01, _var01
25b04     10 12 06 C1 |  if_b	add	arg01, #16
25b08     09 1B 62 CC |  if_b	wrlong	arg05, arg01
25b0c     0B 13 52 F6 | 	abs	arg01, arg03 wc
25b10     0F 1B 80 FF 
25b14     09 1F 1A FD | 	qdiv	##3546895, arg01
25b18                 | ' 
25b18                 | ' base2:=@channel1[0]+64*channel
25b18                 | ' 
25b18                 | ' 
25b18                 | ' long[base2+12]:= len
25b18                 | ' if loop >=0 
25b18                 | '   long[base2+16]:= loop
25b18     0C E4 85 F1 | 	sub	objptr, #12
25b1c                 | ' else
25b1c                 | '   long[base2+16]:= len+2
25b1c                 | ' word[base2+20]:=vol
25b1c     00 13 02 F6 | 	mov	arg01, _var01
25b20     14 12 06 F1 | 	add	arg01, #20
25b24     09 19 52 FC | 	wrword	arg04, arg01
25b28                 | ' word[base2+24]:= 3546895/splfreq 
25b28     00 19 02 F6 | 	mov	arg04, _var01
25b2c     18 18 06 F1 | 	add	arg04, #24
25b30                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25b30                 | ' long[base2+28]:=$40000000    
25b30                 | ' long[base2+32]:=0    
25b30                 | ' long[base2+36]:=0    
25b30                 | ' long[base2+40]:=0    
25b30                 | ' long[base2+44]:=0    
25b30                 | ' long[base2+8]:=sample+$C0000000     
25b30     00 00 60 FF 
25b34     00 14 06 F1 | 	add	arg02, ##-1073741824
25b38     18 12 62 FD | 	getqx	arg01
25b3c     09 13 82 F6 | 	negc	arg01, arg01
25b40     0C 13 52 FC | 	wrword	arg01, arg04
25b44     00 13 02 F6 | 	mov	arg01, _var01
25b48     1A 12 06 F1 | 	add	arg01, #26
25b4c     09 01 5A FC | 	wrword	#256, arg01
25b50     00 13 02 F6 | 	mov	arg01, _var01
25b54     1C 12 06 F1 | 	add	arg01, #28
25b58     00 00 A0 FF 
25b5c     09 01 68 FC | 	wrlong	##1073741824, arg01
25b60     00 13 02 F6 | 	mov	arg01, _var01
25b64     20 12 06 F1 | 	add	arg01, #32
25b68     09 01 68 FC | 	wrlong	#0, arg01
25b6c     00 13 02 F6 | 	mov	arg01, _var01
25b70     24 12 06 F1 | 	add	arg01, #36
25b74     09 01 68 FC | 	wrlong	#0, arg01
25b78     00 13 02 F6 | 	mov	arg01, _var01
25b7c     28 12 06 F1 | 	add	arg01, #40
25b80     09 01 68 FC | 	wrlong	#0, arg01
25b84     00 13 02 F6 | 	mov	arg01, _var01
25b88     2C 12 06 F1 | 	add	arg01, #44
25b8c     09 01 68 FC | 	wrlong	#0, arg01
25b90     08 00 06 F1 | 	add	_var01, #8
25b94     00 15 62 FC | 	wrlong	arg02, _var01
25b98                 | _audio096_spin2_play_ret
25b98     2D 00 64 FD | 	ret
25b9c                 | 
25b9c                 | ' 
25b9c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
25b9c                 | _audio096_spin2_play8
25b9c                 | ' 
25b9c                 | ' base2:=@channel1[0]+64*channel
25b9c     0C E4 05 F1 | 	add	objptr, #12
25ba0     F2 00 02 F6 | 	mov	_var01, objptr
25ba4     06 12 66 F0 | 	shl	arg01, #6
25ba8     09 01 02 F1 | 	add	_var01, arg01
25bac                 | ' long[base2]:=0
25bac     00 01 68 FC | 	wrlong	#0, _var01
25bb0                 | ' long[base2+8]:=sample+$40000000 
25bb0     00 00 20 FF 
25bb4     00 14 06 F1 | 	add	arg02, ##1073741824
25bb8     00 13 02 F6 | 	mov	arg01, _var01
25bbc     08 12 06 F1 | 	add	arg01, #8
25bc0     09 15 62 FC | 	wrlong	arg02, arg01
25bc4                 | ' if loop>=0
25bc4     00 1C 56 F2 | 	cmps	arg06, #0 wc
25bc8     0C E4 85 F1 | 	sub	objptr, #12
25bcc     1C 00 90 CD |  if_b	jmp	#LR__3020
25bd0                 | '   long[base2+12]:=loop
25bd0     00 15 02 F6 | 	mov	arg02, _var01
25bd4     0C 14 06 F1 | 	add	arg02, #12
25bd8     0A 1D 62 FC | 	wrlong	arg06, arg02
25bdc                 | '   long[base2+16]:= len
25bdc     00 1D 02 F6 | 	mov	arg06, _var01
25be0     10 1C 06 F1 | 	add	arg06, #16
25be4     0E 1B 62 FC | 	wrlong	arg05, arg06
25be8     1C 00 90 FD | 	jmp	#LR__3021
25bec                 | LR__3020
25bec                 | ' else
25bec                 | '   long[base2+12]:= len
25bec     00 1D 02 F6 | 	mov	arg06, _var01
25bf0     0C 1C 06 F1 | 	add	arg06, #12
25bf4     0E 1B 62 FC | 	wrlong	arg05, arg06
25bf8                 | '   long[base2+16]:= len+1
25bf8     01 1A 06 F1 | 	add	arg05, #1
25bfc     00 13 02 F6 | 	mov	arg01, _var01
25c00     10 12 06 F1 | 	add	arg01, #16
25c04     09 1B 62 FC | 	wrlong	arg05, arg01
25c08                 | LR__3021
25c08     0B 17 52 F6 | 	abs	arg03, arg03 wc
25c0c     0F 1B 80 FF 
25c10     0B 1F 1A FD | 	qdiv	##3546895, arg03
25c14                 | ' word[base2+20]:=vol
25c14     00 17 02 F6 | 	mov	arg03, _var01
25c18     14 16 06 F1 | 	add	arg03, #20
25c1c     0B 19 52 FC | 	wrword	arg04, arg03
25c20                 | ' word[base2+24]:= 3546895 /splfreq 
25c20     00 13 02 F6 | 	mov	arg01, _var01
25c24     18 12 06 F1 | 	add	arg01, #24
25c28                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
25c28     1A 00 06 F1 | 	add	_var01, #26
25c2c     18 18 62 FD | 	getqx	arg04
25c30     0C 19 82 F6 | 	negc	arg04, arg04
25c34     09 19 52 FC | 	wrword	arg04, arg01
25c38     00 01 5A FC | 	wrword	#256, _var01
25c3c                 | _audio096_spin2_play8_ret
25c3c     2D 00 64 FD | 	ret
25c40                 | 
25c40                 | ' 'long[base2+28]:=$40000000
25c40                 | ' 
25c40                 | '     
25c40                 | ' pub stop(channel) 'silence it
25c40                 | _audio096_spin2_stop
25c40                 | ' 
25c40                 | ' word[@channel1[0]+64*channel+20]:=0
25c40     0C E4 05 F1 | 	add	objptr, #12
25c44     F2 00 02 F6 | 	mov	_var01, objptr
25c48     09 03 02 F6 | 	mov	_var02, arg01
25c4c     06 02 66 F0 | 	shl	_var02, #6
25c50     01 01 02 F1 | 	add	_var01, _var02
25c54     14 00 06 F1 | 	add	_var01, #20
25c58     00 01 58 FC | 	wrword	#0, _var01
25c5c                 | ' word[@channel1[0]+64*channel+20]:=0
25c5c     F2 00 02 F6 | 	mov	_var01, objptr
25c60     06 12 66 F0 | 	shl	arg01, #6
25c64     09 01 02 F1 | 	add	_var01, arg01
25c68     14 00 06 F1 | 	add	_var01, #20
25c6c     00 01 58 FC | 	wrword	#0, _var01
25c70     0C E4 85 F1 | 	sub	objptr, #12
25c74                 | _audio096_spin2_stop_ret
25c74     2D 00 64 FD | 	ret
25c78                 | hubexit
25c78     81 00 80 FD | 	jmp	#cogexit
25c7c                 | 
25c7c                 | __system___setbaud
25c7c     14 88 06 FB | 	rdlong	muldiva_, #20
25c80     09 8B 02 F6 | 	mov	muldivb_, arg01
25c84     BA 00 A0 FD | 	call	#divide_
25c88     97 06 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
25c8c                 | LR__3030
25c8c     3E FA 9D FA | 	rdpin	result1, #62 wc
25c90     FE FC A1 F1 | 	subx	result2, result2
25c94     F4 FF 9F CD |  if_b	jmp	#LR__3030
25c98                 | LR__3031
25c98     40 7C 64 FD | 	dirl	#62
25c9c     40 7E 64 FD | 	dirl	#63
25ca0     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
25ca4     10 8A 66 F0 | 	shl	muldivb_, #16
25ca8     07 14 06 F6 | 	mov	arg02, #7
25cac     45 15 02 F1 | 	add	arg02, muldivb_
25cb0     3E F8 0C FC | 	wrpin	#124, #62
25cb4     3E 14 16 FC | 	wxpin	arg02, #62
25cb8     3F 7C 0C FC | 	wrpin	#62, #63
25cbc     14 14 06 F1 | 	add	arg02, #20
25cc0     3F 14 16 FC | 	wxpin	arg02, #63
25cc4     41 7C 64 FD | 	dirh	#62
25cc8     41 7E 64 FD | 	dirh	#63
25ccc                 | __system___setbaud_ret
25ccc     2D 00 64 FD | 	ret
25cd0                 | 
25cd0                 | __system___txraw
25cd0     01 4A 05 F6 | 	mov	COUNT_, #1
25cd4     A8 00 A0 FD | 	call	#pushregs_
25cd8     09 27 02 F6 | 	mov	local01, arg01
25cdc     97 06 48 FB | 	callpa	#(@LR__3041-@LR__3040)>>2,fcache_load_ptr_
25ce0                 | LR__3040
25ce0     3E FA 9D FA | 	rdpin	result1, #62 wc
25ce4     FE FC A1 F1 | 	subx	result2, result2
25ce8     F4 FF 9F CD |  if_b	jmp	#LR__3040
25cec                 | LR__3041
25cec     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
25cf0     C2 01 00 AF 
25cf4     00 12 06 A6 |  if_e	mov	arg01, ##230400
25cf8     80 FF BF AD |  if_e	call	#__system___setbaud
25cfc     58 7C 64 FD | 	drvl	#62
25d00     3E 26 26 FC | 	wypin	local01, #62
25d04     01 FA 05 F6 | 	mov	result1, #1
25d08     A7 F0 03 F6 | 	mov	ptra, fp
25d0c     B2 00 A0 FD | 	call	#popregs_
25d10                 | __system___txraw_ret
25d10     2D 00 64 FD | 	ret
25d14                 | 
25d14                 | __system___rxraw
25d14     0D 4A 05 F6 | 	mov	COUNT_, #13
25d18     A8 00 A0 FD | 	call	#pushregs_
25d1c     09 27 02 F6 | 	mov	local01, arg01
25d20     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
25d24     C2 01 00 AF 
25d28     00 12 06 A6 |  if_e	mov	arg01, ##230400
25d2c     4C FF BF AD |  if_e	call	#__system___setbaud
25d30     00 26 0E F2 | 	cmp	local01, #0 wz
25d34     20 00 90 AD |  if_e	jmp	#LR__3050
25d38     14 2A 06 FB | 	rdlong	local03, #20
25d3c     0A 2A 46 F0 | 	shr	local03, #10
25d40     15 27 02 FD | 	qmul	local01, local03
25d44     1A FA 61 FD | 	getct	result1
25d48     18 2C 62 FD | 	getqx	local04
25d4c     16 FB 01 F1 | 	add	result1, local04
25d50     FD 2E 02 F6 | 	mov	local05, result1
25d54     04 00 90 FD | 	jmp	#LR__3051
25d58                 | LR__3050
25d58     00 2E 06 F6 | 	mov	local05, #0
25d5c                 | LR__3051
25d5c     01 30 66 F6 | 	neg	local06, #1
25d60     3F 32 06 F6 | 	mov	local07, #63
25d64     00 34 06 F6 | 	mov	local08, #0
25d68     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25d6c     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
25d70     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25d74                 | LR__3052
25d74     08 36 16 F4 | 	testb	local09, #8 wc
25d78     09 36 76 F4 | 	testbn	local09, #9 andc
25d7c     0A 36 46 F0 | 	shr	local09, #10
25d80     01 34 06 C6 |  if_b	mov	local08, #1
25d84     40 7E 6C 3D |  if_ae	testp	#63 wz
25d88     01 34 06 26 |  if_nc_and_z	mov	local08, #1
25d8c     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
25d90     04 36 46 20 |  if_nc_and_z	shr	local09, #4
25d94                 | LR__3053
25d94     00 28 06 F6 | 	mov	local02, #0
25d98     00 34 0E F2 | 	cmp	local08, #0 wz
25d9c     01 28 66 56 |  if_ne	neg	local02, #1
25da0     00 38 06 F6 | 	mov	local10, #0
25da4     00 2A 06 F6 | 	mov	local03, #0
25da8     00 26 0E F2 | 	cmp	local01, #0 wz
25dac     01 2A 66 56 |  if_ne	neg	local03, #1
25db0     00 2C 06 F6 | 	mov	local04, #0
25db4     00 3A 06 F6 | 	mov	local11, #0
25db8     17 3D 02 F6 | 	mov	local12, local05
25dbc     1A FA 61 FD | 	getct	result1
25dc0     FD 3E 02 F6 | 	mov	local13, result1
25dc4     1F 3D 82 F1 | 	sub	local12, local13
25dc8     00 3C 56 F2 | 	cmps	local12, #0 wc
25dcc     00 3A 26 C6 |  if_b	not	local11, #0
25dd0     00 3A 0E F2 | 	cmp	local11, #0 wz
25dd4     00 2C 26 56 |  if_ne	not	local04, #0
25dd8     16 2B CA F7 | 	test	local03, local04 wz
25ddc     00 38 26 56 |  if_ne	not	local10, #0
25de0     1C 29 4A F5 | 	or	local02, local10 wz
25de4     8C FF 9F AD |  if_e	jmp	#LR__3052
25de8     00 34 0E F2 | 	cmp	local08, #0 wz
25dec     1B 31 02 56 |  if_ne	mov	local06, local09
25df0     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
25df4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
25df8     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
25dfc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
25e00     18 FB 01 F6 | 	mov	result1, local06
25e04     A7 F0 03 F6 | 	mov	ptra, fp
25e08     B2 00 A0 FD | 	call	#popregs_
25e0c                 | __system___rxraw_ret
25e0c     2D 00 64 FD | 	ret
25e10                 | 
25e10                 | __system___getus
25e10     1A FC 71 FD | 	getct	result2 wc
25e14     1A 00 62 FD | 	getct	_var01
25e18     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25e1c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
25e20     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25e24     20 00 90 5D |  if_ne	jmp	#LR__3060
25e28     14 02 06 FB | 	rdlong	_var02, #20
25e2c     A1 07 00 FF 
25e30     40 02 16 FD | 	qdiv	_var02, ##1000000
25e34     10 E6 05 F1 | 	add	ptr___system__dat__, #16
25e38     18 FA 61 FD | 	getqx	result1
25e3c     FD 02 02 F6 | 	mov	_var02, result1
25e40     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
25e44     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
25e48                 | LR__3060
25e48     01 FD 11 FD | 	qdiv	result2, _var02
25e4c     19 FC 61 FD | 	getqy	result2
25e50     28 FC 61 FD | 	setq	result2
25e54     01 01 12 FD | 	qdiv	_var01, _var02
25e58     18 FA 61 FD | 	getqx	result1
25e5c                 | __system___getus_ret
25e5c     2D 00 64 FD | 	ret
25e60                 | 
25e60                 | __system____builtin_memmove
25e60     09 01 02 F6 | 	mov	_var01, arg01
25e64     0A 13 52 F2 | 	cmps	arg01, arg02 wc
25e68     10 00 90 CD |  if_b	jmp	#LR__3070
25e6c     0A 03 02 F6 | 	mov	_var02, arg02
25e70     0B 03 02 F1 | 	add	_var02, arg03
25e74     01 13 52 F2 | 	cmps	arg01, _var02 wc
25e78     48 00 90 CD |  if_b	jmp	#LR__3076
25e7c                 | LR__3070
25e7c     0B 05 02 F6 | 	mov	_var03, arg03
25e80     02 04 4E F0 | 	shr	_var03, #2 wz
25e84     18 00 90 AD |  if_e	jmp	#LR__3075
25e88     97 0A 48 FB | 	callpa	#(@LR__3073-@LR__3071)>>2,fcache_load_ptr_
25e8c                 | LR__3071
25e8c     02 09 D8 FC | 	rep	@LR__3074, _var03
25e90                 | LR__3072
25e90     0A 05 02 FB | 	rdlong	_var03, arg02
25e94     09 05 62 FC | 	wrlong	_var03, arg01
25e98     04 12 06 F1 | 	add	arg01, #4
25e9c     04 14 06 F1 | 	add	arg02, #4
25ea0                 | LR__3073
25ea0                 | LR__3074
25ea0                 | LR__3075
25ea0     02 16 CE F7 | 	test	arg03, #2 wz
25ea4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
25ea8     09 03 52 5C |  if_ne	wrword	_var02, arg01
25eac     02 12 06 51 |  if_ne	add	arg01, #2
25eb0     02 14 06 51 |  if_ne	add	arg02, #2
25eb4     01 16 CE F7 | 	test	arg03, #1 wz
25eb8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
25ebc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
25ec0     28 00 90 FD | 	jmp	#LR__3082
25ec4                 | LR__3076
25ec4     0B 13 02 F1 | 	add	arg01, arg03
25ec8     0B 15 02 F1 | 	add	arg02, arg03
25ecc     0B 07 0A F6 | 	mov	_var04, arg03 wz
25ed0     18 00 90 AD |  if_e	jmp	#LR__3081
25ed4     97 0A 48 FB | 	callpa	#(@LR__3079-@LR__3077)>>2,fcache_load_ptr_
25ed8                 | LR__3077
25ed8     03 09 D8 FC | 	rep	@LR__3080, _var04
25edc                 | LR__3078
25edc     01 12 86 F1 | 	sub	arg01, #1
25ee0     01 14 86 F1 | 	sub	arg02, #1
25ee4     0A 03 C2 FA | 	rdbyte	_var02, arg02
25ee8     09 03 42 FC | 	wrbyte	_var02, arg01
25eec                 | LR__3079
25eec                 | LR__3080
25eec                 | LR__3081
25eec                 | LR__3082
25eec     00 FB 01 F6 | 	mov	result1, _var01
25ef0                 | __system____builtin_memmove_ret
25ef0     2D 00 64 FD | 	ret
25ef4                 | 
25ef4                 | __system____builtin_strcpy
25ef4     09 01 02 F6 | 	mov	_var01, arg01
25ef8     97 0A 48 FB | 	callpa	#(@LR__3091-@LR__3090)>>2,fcache_load_ptr_
25efc                 | LR__3090
25efc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
25f00     09 FB 41 FC | 	wrbyte	result1, arg01
25f04     01 14 06 F1 | 	add	arg02, #1
25f08     01 12 06 F1 | 	add	arg01, #1
25f0c     EC FF 9F 5D |  if_ne	jmp	#LR__3090
25f10                 | LR__3091
25f10     00 FB 01 F6 | 	mov	result1, _var01
25f14                 | __system____builtin_strcpy_ret
25f14     2D 00 64 FD | 	ret
25f18                 | 
25f18                 | __system____topofstack
25f18     00 4A 05 F6 | 	mov	COUNT_, #0
25f1c     A8 00 A0 FD | 	call	#pushregs_
25f20     08 F0 07 F1 | 	add	ptra, #8
25f24     04 4E 05 F1 | 	add	fp, #4
25f28     A7 12 62 FC | 	wrlong	arg01, fp
25f2c     A7 FA 01 F6 | 	mov	result1, fp
25f30     04 4E 85 F1 | 	sub	fp, #4
25f34     A7 F0 03 F6 | 	mov	ptra, fp
25f38     B2 00 A0 FD | 	call	#popregs_
25f3c                 | __system____topofstack_ret
25f3c     2D 00 64 FD | 	ret
25f40                 | 
25f40                 | __system___lockmem
25f40     00 FA 05 F6 | 	mov	result1, #0
25f44     01 FA 61 FD | 	cogid	result1
25f48     00 FB 05 F1 | 	add	result1, #256
25f4c                 | LR__3100
25f4c     09 01 0A FB | 	rdlong	_var01, arg01 wz
25f50     09 FB 61 AC |  if_e	wrlong	result1, arg01
25f54     09 01 02 AB |  if_e	rdlong	_var01, arg01
25f58     09 01 02 AB |  if_e	rdlong	_var01, arg01
25f5c     FD 00 0A F2 | 	cmp	_var01, result1 wz
25f60     E8 FF 9F 5D |  if_ne	jmp	#LR__3100
25f64                 | __system___lockmem_ret
25f64     2D 00 64 FD | 	ret
25f68                 | 
25f68                 | __system___string_cmp
25f68     97 14 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
25f6c                 | LR__3110
25f6c     09 01 C2 FA | 	rdbyte	_var01, arg01
25f70     0A 03 C2 FA | 	rdbyte	_var02, arg02
25f74     00 05 02 F6 | 	mov	_var03, _var01
25f78     01 05 8A F1 | 	sub	_var03, _var02 wz
25f7c     01 12 06 F1 | 	add	arg01, #1
25f80     01 14 06 F1 | 	add	arg02, #1
25f84     0C 00 90 5D |  if_ne	jmp	#LR__3112
25f88     00 00 0E F2 | 	cmp	_var01, #0 wz
25f8c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
25f90     D8 FF 9F 5D |  if_ne	jmp	#LR__3110
25f94                 | LR__3111
25f94                 | LR__3112
25f94     02 FB 01 F6 | 	mov	result1, _var03
25f98                 | __system___string_cmp_ret
25f98     2D 00 64 FD | 	ret
25f9c                 | 
25f9c                 | __system___string_concat
25f9c     05 4A 05 F6 | 	mov	COUNT_, #5
25fa0     A8 00 A0 FD | 	call	#pushregs_
25fa4     09 27 02 F6 | 	mov	local01, arg01
25fa8     0A 29 02 F6 | 	mov	local02, arg02
25fac     13 13 02 F6 | 	mov	arg01, local01
25fb0     09 2B 02 F6 | 	mov	local03, arg01
25fb4     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
25fb8                 | LR__3120
25fb8     15 FB C9 FA | 	rdbyte	result1, local03 wz
25fbc     01 2A 06 51 |  if_ne	add	local03, #1
25fc0     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
25fc4                 | LR__3121
25fc4     09 2B 82 F1 | 	sub	local03, arg01
25fc8     15 2D 02 F6 | 	mov	local04, local03
25fcc     14 13 02 F6 | 	mov	arg01, local02
25fd0     09 2B 02 F6 | 	mov	local03, arg01
25fd4     97 06 48 FB | 	callpa	#(@LR__3123-@LR__3122)>>2,fcache_load_ptr_
25fd8                 | LR__3122
25fd8     15 FB C9 FA | 	rdbyte	result1, local03 wz
25fdc     01 2A 06 51 |  if_ne	add	local03, #1
25fe0     F4 FF 9F 5D |  if_ne	jmp	#LR__3122
25fe4                 | LR__3123
25fe4     09 2B 82 F1 | 	sub	local03, arg01
25fe8     16 13 02 F6 | 	mov	arg01, local04
25fec     15 13 02 F1 | 	add	arg01, local03
25ff0     01 12 06 F1 | 	add	arg01, #1
25ff4     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
25ff8     FD 2E 0A F6 | 	mov	local05, result1 wz
25ffc     28 00 90 AD |  if_e	jmp	#LR__3124
26000     17 13 02 F6 | 	mov	arg01, local05
26004     13 15 02 F6 | 	mov	arg02, local01
26008     16 17 02 F6 | 	mov	arg03, local04
2600c     50 FE BF FD | 	call	#__system____builtin_memmove
26010     17 13 02 F6 | 	mov	arg01, local05
26014     16 13 02 F1 | 	add	arg01, local04
26018     01 2A 06 F1 | 	add	local03, #1
2601c     14 15 02 F6 | 	mov	arg02, local02
26020     15 17 02 F6 | 	mov	arg03, local03
26024     38 FE BF FD | 	call	#__system____builtin_memmove
26028                 | LR__3124
26028     17 FB 01 F6 | 	mov	result1, local05
2602c     A7 F0 03 F6 | 	mov	ptra, fp
26030     B2 00 A0 FD | 	call	#popregs_
26034                 | __system___string_concat_ret
26034     2D 00 64 FD | 	ret
26038                 | 
26038                 | __system___tx
26038     02 4A 05 F6 | 	mov	COUNT_, #2
2603c     A8 00 A0 FD | 	call	#pushregs_
26040     09 27 02 F6 | 	mov	local01, arg01
26044     0A 26 0E F2 | 	cmp	local01, #10 wz
26048     18 00 90 5D |  if_ne	jmp	#LR__3130
2604c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26050     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26054     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26058     02 28 CE F7 | 	test	local02, #2 wz
2605c     0D 12 06 56 |  if_ne	mov	arg01, #13
26060     6C FC BF 5D |  if_ne	call	#__system___txraw
26064                 | LR__3130
26064     13 13 02 F6 | 	mov	arg01, local01
26068     64 FC BF FD | 	call	#__system___txraw
2606c     A7 F0 03 F6 | 	mov	ptra, fp
26070     B2 00 A0 FD | 	call	#popregs_
26074                 | __system___tx_ret
26074     2D 00 64 FD | 	ret
26078                 | 
26078                 | __system___rx
26078     01 4A 05 F6 | 	mov	COUNT_, #1
2607c     A8 00 A0 FD | 	call	#pushregs_
26080                 | LR__3140
26080     00 12 06 F6 | 	mov	arg01, #0
26084     8C FC BF FD | 	call	#__system___rxraw
26088     FD 26 02 F6 | 	mov	local01, result1
2608c     FF FF 7F FF 
26090     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26094     E8 FF 9F AD |  if_e	jmp	#LR__3140
26098     0D 26 0E F2 | 	cmp	local01, #13 wz
2609c     14 00 90 5D |  if_ne	jmp	#LR__3141
260a0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
260a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
260a8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
260ac     02 FA CD F7 | 	test	result1, #2 wz
260b0     0A 26 06 56 |  if_ne	mov	local01, #10
260b4                 | LR__3141
260b4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
260b8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
260bc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
260c0     01 12 CE F7 | 	test	arg01, #1 wz
260c4     1C 00 90 AD |  if_e	jmp	#LR__3144
260c8     7F 26 0E F2 | 	cmp	local01, #127 wz
260cc     0C 00 90 5D |  if_ne	jmp	#LR__3142
260d0     08 12 06 F6 | 	mov	arg01, #8
260d4     60 FF BF FD | 	call	#__system___tx
260d8     08 00 90 FD | 	jmp	#LR__3143
260dc                 | LR__3142
260dc     13 13 02 F6 | 	mov	arg01, local01
260e0     54 FF BF FD | 	call	#__system___tx
260e4                 | LR__3143
260e4                 | LR__3144
260e4     13 FB 01 F6 | 	mov	result1, local01
260e8     A7 F0 03 F6 | 	mov	ptra, fp
260ec     B2 00 A0 FD | 	call	#popregs_
260f0                 | __system___rx_ret
260f0     2D 00 64 FD | 	ret
260f4                 | 
260f4                 | __system___pinwrite
260f4     09 01 02 F6 | 	mov	_var01, arg01
260f8     1F 00 06 F5 | 	and	_var01, #31
260fc     20 12 CE F7 | 	test	arg01, #32 wz
26100     06 12 46 F0 | 	shr	arg01, #6
26104     09 13 CA F9 | 	bmask	arg01, arg01
26108     00 13 62 F0 | 	shl	arg01, _var01
2610c     00 15 62 F0 | 	shl	arg02, _var01
26110     1C 00 90 AD |  if_e	jmp	#LR__3150
26114     09 F7 43 F5 | 	or	dirb, arg01
26118     FD 01 02 F6 | 	mov	_var01, outb
2611c     09 01 22 F5 | 	andn	_var01, arg01
26120     09 15 02 F5 | 	and	arg02, arg01
26124     0A 01 42 F5 | 	or	_var01, arg02
26128     00 FB 03 F6 | 	mov	outb, _var01
2612c     18 00 90 FD | 	jmp	#LR__3151
26130                 | LR__3150
26130     09 F5 43 F5 | 	or	dira, arg01
26134     FC 01 02 F6 | 	mov	_var01, outa
26138     09 01 22 F5 | 	andn	_var01, arg01
2613c     09 15 02 F5 | 	and	arg02, arg01
26140     0A 01 42 F5 | 	or	_var01, arg02
26144     00 F9 03 F6 | 	mov	outa, _var01
26148                 | LR__3151
26148                 | __system___pinwrite_ret
26148     2D 00 64 FD | 	ret
2614c                 | 
2614c                 | __system___basic_read_line
2614c     06 4A 05 F6 | 	mov	COUNT_, #6
26150     A8 00 A0 FD | 	call	#pushregs_
26154     09 27 02 F6 | 	mov	local01, arg01
26158     00 28 06 F6 | 	mov	local02, #0
2615c     18 2A 06 F6 | 	mov	local03, #24
26160     00 2C 06 F6 | 	mov	local04, #0
26164     18 12 06 F6 | 	mov	arg01, #24
26168     78 3F B0 FD | 	call	#__system___gc_alloc_managed
2616c     FD 2E 0A F6 | 	mov	local05, result1 wz
26170     17 FB 01 A6 |  if_e	mov	result1, local05
26174     B0 00 90 AD |  if_e	jmp	#LR__3163
26178                 | LR__3160
26178     13 13 02 F6 | 	mov	arg01, local01
2617c     7C 0B B0 FD | 	call	#__system___basic_get_char
26180     FD 30 02 F6 | 	mov	local06, result1
26184     01 30 56 F2 | 	cmps	local06, #1 wc
26188     8C 00 90 CD |  if_b	jmp	#LR__3162
2618c     0A 30 0E F2 | 	cmp	local06, #10 wz
26190     10 00 90 5D |  if_ne	jmp	#LR__3161
26194     00 2C 0E F2 | 	cmp	local04, #0 wz
26198     01 28 56 52 |  if_ne	cmps	local02, #1 wc
2619c     01 28 86 11 |  if_a	sub	local02, #1
261a0     74 00 90 FD | 	jmp	#LR__3162
261a4                 | LR__3161
261a4     0D 30 0E F2 | 	cmp	local06, #13 wz
261a8     01 2C 06 A6 |  if_e	mov	local04, #1
261ac     00 2C 06 56 |  if_ne	mov	local04, #0
261b0     08 30 0E F2 | 	cmp	local06, #8 wz
261b4     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
261b8     01 28 56 A2 |  if_e	cmps	local02, #1 wc
261bc     01 28 86 21 |  if_nc_and_z	sub	local02, #1
261c0     B4 FF 9F AD |  if_e	jmp	#LR__3160
261c4     17 17 02 F6 | 	mov	arg03, local05
261c8     14 17 02 F1 | 	add	arg03, local02
261cc     0B 31 42 FC | 	wrbyte	local06, arg03
261d0     01 28 06 F1 | 	add	local02, #1
261d4     15 29 0A F2 | 	cmp	local02, local03 wz
261d8     9C FF 9F 5D |  if_ne	jmp	#LR__3160
261dc     15 13 02 F6 | 	mov	arg01, local03
261e0     20 12 06 F1 | 	add	arg01, #32
261e4     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
261e8     FD 30 0A F6 | 	mov	local06, result1 wz
261ec     18 FB 01 A6 |  if_e	mov	result1, local06
261f0     34 00 90 AD |  if_e	jmp	#LR__3163
261f4     18 13 02 F6 | 	mov	arg01, local06
261f8     17 15 02 F6 | 	mov	arg02, local05
261fc     15 17 02 F6 | 	mov	arg03, local03
26200     5C FC BF FD | 	call	#__system____builtin_memmove
26204     20 2A 06 F1 | 	add	local03, #32
26208     17 13 02 F6 | 	mov	arg01, local05
2620c     10 40 B0 FD | 	call	#__system___gc_free
26210     18 2F 02 F6 | 	mov	local05, local06
26214     60 FF 9F FD | 	jmp	#LR__3160
26218                 | LR__3162
26218     17 31 02 F6 | 	mov	local06, local05
2621c     14 31 02 F1 | 	add	local06, local02
26220     18 01 48 FC | 	wrbyte	#0, local06
26224     17 FB 01 F6 | 	mov	result1, local05
26228                 | LR__3163
26228     A7 F0 03 F6 | 	mov	ptra, fp
2622c     B2 00 A0 FD | 	call	#popregs_
26230                 | __system___basic_read_line_ret
26230     2D 00 64 FD | 	ret
26234                 | 
26234                 | __system___waitms
26234     09 01 02 F6 | 	mov	_var01, arg01
26238     1A 02 62 FD | 	getct	_var02
2623c     14 04 06 FB | 	rdlong	_var03, #20
26240     97 14 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
26244                 | LR__3170
26244     01 00 00 FF 
26248     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2624c     1C 00 90 CD |  if_b	jmp	#LR__3172
26250     02 03 02 F1 | 	add	_var02, _var03
26254     01 13 02 F6 | 	mov	arg01, _var02
26258     00 12 66 FA | 	addct1	arg01, #0
2625c     24 22 60 FD | 	waitct1
26260     01 00 00 FF 
26264     E8 01 86 F1 | 	sub	_var01, ##1000
26268     D8 FF 9F FD | 	jmp	#LR__3170
2626c                 | LR__3171
2626c                 | LR__3172
2626c     01 00 56 F2 | 	cmps	_var01, #1 wc
26270     28 00 90 CD |  if_b	jmp	#LR__3173
26274     02 01 02 FD | 	qmul	_var01, _var03
26278     01 00 00 FF 
2627c     E8 17 06 F6 | 	mov	arg03, ##1000
26280     19 FA 61 FD | 	getqy	result1
26284     18 12 62 FD | 	getqx	arg01
26288     28 FA 61 FD | 	setq	result1
2628c     0B 13 12 FD | 	qdiv	arg01, arg03
26290     18 12 62 FD | 	getqx	arg01
26294     01 13 62 FA | 	addct1	arg01, _var02
26298     24 22 60 FD | 	waitct1
2629c                 | LR__3173
2629c                 | __system___waitms_ret
2629c     2D 00 64 FD | 	ret
262a0                 | 
262a0                 | __system___waitus
262a0     09 01 02 F6 | 	mov	_var01, arg01
262a4     1A 02 62 FD | 	getct	_var02
262a8     14 04 06 FB | 	rdlong	_var03, #20
262ac     97 14 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
262b0                 | LR__3180
262b0     A1 07 00 FF 
262b4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
262b8     1C 00 90 CD |  if_b	jmp	#LR__3182
262bc     02 03 02 F1 | 	add	_var02, _var03
262c0     01 13 02 F6 | 	mov	arg01, _var02
262c4     00 12 66 FA | 	addct1	arg01, #0
262c8     24 22 60 FD | 	waitct1
262cc     A1 07 00 FF 
262d0     40 00 86 F1 | 	sub	_var01, ##1000000
262d4     D8 FF 9F FD | 	jmp	#LR__3180
262d8                 | LR__3181
262d8                 | LR__3182
262d8     01 00 56 F2 | 	cmps	_var01, #1 wc
262dc     28 00 90 CD |  if_b	jmp	#LR__3183
262e0     02 01 02 FD | 	qmul	_var01, _var03
262e4     A1 07 00 FF 
262e8     40 16 06 F6 | 	mov	arg03, ##1000000
262ec     19 FA 61 FD | 	getqy	result1
262f0     18 12 62 FD | 	getqx	arg01
262f4     28 FA 61 FD | 	setq	result1
262f8     0B 13 12 FD | 	qdiv	arg01, arg03
262fc     18 FA 61 FD | 	getqx	result1
26300     FD 02 62 FA | 	addct1	_var02, result1
26304     24 22 60 FD | 	waitct1
26308                 | LR__3183
26308                 | __system___waitus_ret
26308     2D 00 64 FD | 	ret
2630c                 | 
2630c                 | __system___mount
2630c     0B 4A 05 F6 | 	mov	COUNT_, #11
26310     A8 00 A0 FD | 	call	#pushregs_
26314     09 27 02 F6 | 	mov	local01, arg01
26318     0A 29 0A F6 | 	mov	local02, arg02 wz
2631c     01 2A 66 F6 | 	neg	local03, #1
26320     01 FA 65 A6 |  if_e	neg	result1, #1
26324     98 02 90 AD |  if_e	jmp	#LR__3205
26328     13 FB C1 FA | 	rdbyte	result1, local01
2632c     2F FA 0D F2 | 	cmp	result1, #47 wz
26330     28 00 90 5D |  if_ne	jmp	#LR__3192
26334     13 13 02 F6 | 	mov	arg01, local01
26338     09 2D 02 F6 | 	mov	local04, arg01
2633c     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26340                 | LR__3190
26340     16 FB C9 FA | 	rdbyte	result1, local04 wz
26344     01 2C 06 51 |  if_ne	add	local04, #1
26348     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
2634c                 | LR__3191
2634c     09 2D 82 F1 | 	sub	local04, arg01
26350     16 FB 01 F6 | 	mov	result1, local04
26354     10 FA 55 F2 | 	cmps	result1, #16 wc
26358     14 00 90 CD |  if_b	jmp	#LR__3193
2635c                 | LR__3192
2635c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26360     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26364     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26368     01 FA 65 F6 | 	neg	result1, #1
2636c     50 02 90 FD | 	jmp	#LR__3205
26370                 | LR__3193
26370     00 2E 06 F6 | 	mov	local05, #0
26374                 | LR__3194
26374     04 2E 56 F2 | 	cmps	local05, #4 wc
26378     B0 00 90 3D |  if_ae	jmp	#LR__3199
2637c     17 13 02 F6 | 	mov	arg01, local05
26380     02 12 66 F0 | 	shl	arg01, #2
26384     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26388     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2638c     09 FB 09 FB | 	rdlong	result1, arg01 wz
26390     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26394     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26398     17 2B 02 86 |  if_c_and_z	mov	local03, local05
2639c     84 00 90 8D |  if_c_and_z	jmp	#LR__3198
263a0     17 13 02 F6 | 	mov	arg01, local05
263a4     02 12 66 F0 | 	shl	arg01, #2
263a8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
263ac     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
263b0     09 13 02 FB | 	rdlong	arg01, arg01
263b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
263b8     09 2D 02 F6 | 	mov	local04, arg01
263bc     97 06 48 FB | 	callpa	#(@LR__3196-@LR__3195)>>2,fcache_load_ptr_
263c0                 | LR__3195
263c0     16 FB C9 FA | 	rdbyte	result1, local04 wz
263c4     01 2C 06 51 |  if_ne	add	local04, #1
263c8     F4 FF 9F 5D |  if_ne	jmp	#LR__3195
263cc                 | LR__3196
263cc     09 2D 82 F1 | 	sub	local04, arg01
263d0     16 31 02 F6 | 	mov	local06, local04
263d4     18 13 02 F6 | 	mov	arg01, local06
263d8     13 13 02 F1 | 	add	arg01, local01
263dc     09 FB C1 FA | 	rdbyte	result1, arg01
263e0     2F FA 0D F2 | 	cmp	result1, #47 wz
263e4     18 33 02 56 |  if_ne	mov	local07, local06
263e8     13 33 02 51 |  if_ne	add	local07, local01
263ec     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
263f0     30 00 90 5D |  if_ne	jmp	#LR__3197
263f4     17 17 02 F6 | 	mov	arg03, local05
263f8     02 16 66 F0 | 	shl	arg03, #2
263fc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26400     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26404     0B 15 02 FB | 	rdlong	arg02, arg03
26408     13 13 02 F6 | 	mov	arg01, local01
2640c     18 17 02 F6 | 	mov	arg03, local06
26410     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26414     4C 51 B0 FD | 	call	#__system__strncmp
26418     00 FA 0D F2 | 	cmp	result1, #0 wz
2641c     17 2B 02 A6 |  if_e	mov	local03, local05
26420     08 00 90 AD |  if_e	jmp	#LR__3199
26424                 | LR__3197
26424                 | LR__3198
26424     01 2E 06 F1 | 	add	local05, #1
26428     48 FF 9F FD | 	jmp	#LR__3194
2642c                 | LR__3199
2642c     FF FF 7F FF 
26430     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
26434     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26438     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2643c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26440     01 FA 65 A6 |  if_e	neg	result1, #1
26444     78 01 90 AD |  if_e	jmp	#LR__3205
26448     15 2F 02 F6 | 	mov	local05, local03
2644c     17 33 02 F6 | 	mov	local07, local05
26450     02 32 66 F0 | 	shl	local07, #2
26454     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26458     F3 32 02 F1 | 	add	local07, ptr___system__dat__
2645c     19 31 0A FB | 	rdlong	local06, local07 wz
26460     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26464     58 00 90 AD |  if_e	jmp	#LR__3200
26468     4C 30 06 F1 | 	add	local06, #76
2646c     18 33 0A FB | 	rdlong	local07, local06 wz
26470     4C 30 86 F1 | 	sub	local06, #76
26474     48 00 90 AD |  if_e	jmp	#LR__3200
26478     4C 30 06 F1 | 	add	local06, #76
2647c     18 33 02 FB | 	rdlong	local07, local06
26480     19 2B 02 F6 | 	mov	local03, local07
26484     13 32 46 F7 | 	zerox	local07, #19
26488     14 2A 46 F0 | 	shr	local03, #20
2648c     02 2A 66 F0 | 	shl	local03, #2
26490     ED 2A 02 F1 | 	add	local03, __methods__
26494     15 2B 02 FB | 	rdlong	local03, local03
26498     17 31 02 F6 | 	mov	local06, local05
2649c     02 30 66 F0 | 	shl	local06, #2
264a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
264a4     F3 30 02 F1 | 	add	local06, ptr___system__dat__
264a8     18 13 02 FB | 	rdlong	arg01, local06
264ac     F2 30 02 F6 | 	mov	local06, objptr
264b0     19 E5 01 F6 | 	mov	objptr, local07
264b4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
264b8     2D 2A 62 FD | 	call	local03
264bc     18 E5 01 F6 | 	mov	objptr, local06
264c0                 | LR__3200
264c0     17 35 02 F6 | 	mov	local08, local05
264c4     02 34 66 F0 | 	shl	local08, #2
264c8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
264cc     F3 34 02 F1 | 	add	local08, ptr___system__dat__
264d0     1A 29 62 FC | 	wrlong	local02, local08
264d4     00 28 0E F2 | 	cmp	local02, #0 wz
264d8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
264dc     18 00 90 5D |  if_ne	jmp	#LR__3201
264e0     02 2E 66 F0 | 	shl	local05, #2
264e4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
264e8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
264ec     17 01 68 FC | 	wrlong	#0, local05
264f0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
264f4     C4 00 90 FD | 	jmp	#LR__3204
264f8                 | LR__3201
264f8     17 37 02 F6 | 	mov	local09, local05
264fc     04 36 66 F0 | 	shl	local09, #4
26500     24 E6 05 F1 | 	add	ptr___system__dat__, #36
26504     F3 36 02 F1 | 	add	local09, ptr___system__dat__
26508     1B 13 02 F6 | 	mov	arg01, local09
2650c     13 15 02 F6 | 	mov	arg02, local01
26510     10 16 06 F6 | 	mov	arg03, #16
26514     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
26518     9C 4F B0 FD | 	call	#__system__strncpy
2651c     48 28 06 F1 | 	add	local02, #72
26520     14 35 0A FB | 	rdlong	local08, local02 wz
26524     48 28 86 F1 | 	sub	local02, #72
26528     7C 00 90 AD |  if_e	jmp	#LR__3203
2652c     48 28 06 F1 | 	add	local02, #72
26530     14 35 02 FB | 	rdlong	local08, local02
26534     1A 39 02 F6 | 	mov	local10, local08
26538     13 34 46 F7 | 	zerox	local08, #19
2653c     14 38 46 F0 | 	shr	local10, #20
26540     02 38 66 F0 | 	shl	local10, #2
26544     ED 38 02 F1 | 	add	local10, __methods__
26548     1C 39 02 FB | 	rdlong	local10, local10
2654c     1B 13 02 F6 | 	mov	arg01, local09
26550     F2 3A 02 F6 | 	mov	local11, objptr
26554     1A E5 01 F6 | 	mov	objptr, local08
26558     2D 38 62 FD | 	call	local10
2655c     1D E5 01 F6 | 	mov	objptr, local11
26560     FD 12 0A F6 | 	mov	arg01, result1 wz
26564     40 00 90 AD |  if_e	jmp	#LR__3202
26568     17 35 02 F6 | 	mov	local08, local05
2656c     02 34 66 F0 | 	shl	local08, #2
26570     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26574     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26578     1A 01 68 FC | 	wrlong	#0, local08
2657c     02 2E 66 F0 | 	shl	local05, #2
26580     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26584     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26588     17 01 68 FC | 	wrlong	#0, local05
2658c     09 13 6A F6 | 	neg	arg01, arg01 wz
26590     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
26594     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26598     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2659c     01 FA 65 56 |  if_ne	neg	result1, #1
265a0     00 FA 05 A6 |  if_e	mov	result1, #0
265a4     18 00 90 FD | 	jmp	#LR__3205
265a8                 | LR__3202
265a8                 | LR__3203
265a8     02 2E 66 F0 | 	shl	local05, #2
265ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
265b0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
265b4     17 37 62 FC | 	wrlong	local09, local05
265b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
265bc                 | LR__3204
265bc     00 FA 05 F6 | 	mov	result1, #0
265c0                 | LR__3205
265c0     A7 F0 03 F6 | 	mov	ptra, fp
265c4     B2 00 A0 FD | 	call	#popregs_
265c8                 | __system___mount_ret
265c8     2D 00 64 FD | 	ret
265cc                 | 
265cc                 | __system___chdir
265cc     00 4A 05 F6 | 	mov	COUNT_, #0
265d0     A8 00 A0 FD | 	call	#pushregs_
265d4     40 F0 07 F1 | 	add	ptra, #64
265d8     04 4E 05 F1 | 	add	fp, #4
265dc     A7 12 62 FC | 	wrlong	arg01, fp
265e0     04 4E 05 F1 | 	add	fp, #4
265e4     A7 14 02 F6 | 	mov	arg02, fp
265e8     08 4E 85 F1 | 	sub	fp, #8
265ec     6C 4B B0 FD | 	call	#__system__stat
265f0     3C 4E 05 F1 | 	add	fp, #60
265f4     A7 FA 61 FC | 	wrlong	result1, fp
265f8     3C 4E 85 F1 | 	sub	fp, #60
265fc     00 FA 0D F2 | 	cmp	result1, #0 wz
26600     3C 4E 05 51 |  if_ne	add	fp, #60
26604     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26608     3C 4E 85 51 |  if_ne	sub	fp, #60
2660c     BC 00 90 5D |  if_ne	jmp	#LR__3212
26610     10 4E 05 F1 | 	add	fp, #16
26614     A7 12 02 FB | 	rdlong	arg01, fp
26618     10 4E 85 F1 | 	sub	fp, #16
2661c     78 00 00 FF 
26620     00 12 06 F5 | 	and	arg01, ##61440
26624     08 00 00 FF 
26628     00 12 0E F2 | 	cmp	arg01, ##4096 wz
2662c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
26630     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
26634     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
26638     01 FA 65 56 |  if_ne	neg	result1, #1
2663c     8C 00 90 5D |  if_ne	jmp	#LR__3212
26640     04 4E 05 F1 | 	add	fp, #4
26644     A7 16 02 FB | 	rdlong	arg03, fp
26648     04 4E 85 F1 | 	sub	fp, #4
2664c     0B 17 C2 FA | 	rdbyte	arg03, arg03
26650     2F 16 0E F2 | 	cmp	arg03, #47 wz
26654     24 00 90 5D |  if_ne	jmp	#LR__3210
26658     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2665c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26660     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
26664     04 4E 05 F1 | 	add	fp, #4
26668     A7 14 02 FB | 	rdlong	arg02, fp
2666c     04 4E 85 F1 | 	sub	fp, #4
26670     00 17 06 F6 | 	mov	arg03, #256
26674     40 4E B0 FD | 	call	#__system__strncpy
26678     4C 00 90 FD | 	jmp	#LR__3211
2667c                 | LR__3210
2667c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26680     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26684     38 4E 05 F1 | 	add	fp, #56
26688     A7 12 62 FC | 	wrlong	arg01, fp
2668c     38 4E 85 F1 | 	sub	fp, #56
26690     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
26694     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26698     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2669c     00 17 06 F6 | 	mov	arg03, #256
266a0     14 4E B0 FD | 	call	#__system__strncpy
266a4     38 4E 05 F1 | 	add	fp, #56
266a8     A7 12 02 FB | 	rdlong	arg01, fp
266ac     34 4E 85 F1 | 	sub	fp, #52
266b0     A7 14 02 FB | 	rdlong	arg02, fp
266b4     04 4E 85 F1 | 	sub	fp, #4
266b8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
266bc     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
266c0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
266c4     10 00 B0 FD | 	call	#__system____getvfsforfile
266c8                 | LR__3211
266c8     00 FA 05 F6 | 	mov	result1, #0
266cc                 | LR__3212
266cc     A7 F0 03 F6 | 	mov	ptra, fp
266d0     B2 00 A0 FD | 	call	#popregs_
266d4                 | __system___chdir_ret
266d4     2D 00 64 FD | 	ret
266d8                 | 
266d8                 | __system____getvfsforfile
266d8     0E 4A 05 F6 | 	mov	COUNT_, #14
266dc     A8 00 A0 FD | 	call	#pushregs_
266e0     09 27 02 F6 | 	mov	local01, arg01
266e4     0A 29 02 F6 | 	mov	local02, arg02
266e8     0B 2B 02 F6 | 	mov	local03, arg03
266ec     97 10 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
266f0                 | LR__3220
266f0     14 FB C1 FA | 	rdbyte	result1, local02
266f4     2F FA 0D F2 | 	cmp	result1, #47 wz
266f8     01 28 06 A1 |  if_e	add	local02, #1
266fc     14 2D C2 AA |  if_e	rdbyte	local04, local02
26700     01 28 86 A1 |  if_e	sub	local02, #1
26704     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
26708     01 28 06 A1 |  if_e	add	local02, #1
2670c     E0 FF 9F AD |  if_e	jmp	#LR__3220
26710                 | LR__3221
26710     14 2D C2 FA | 	rdbyte	local04, local02
26714     2F 2C 0E F2 | 	cmp	local04, #47 wz
26718     14 00 90 5D |  if_ne	jmp	#LR__3222
2671c     13 13 02 F6 | 	mov	arg01, local01
26720     14 15 02 F6 | 	mov	arg02, local02
26724     00 17 06 F6 | 	mov	arg03, #256
26728     8C 4D B0 FD | 	call	#__system__strncpy
2672c     7C 00 90 FD | 	jmp	#LR__3224
26730                 | LR__3222
26730     84 E6 05 F1 | 	add	ptr___system__dat__, #132
26734     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
26738     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2673c     13 13 02 F6 | 	mov	arg01, local01
26740     00 17 06 F6 | 	mov	arg03, #256
26744     70 4D B0 FD | 	call	#__system__strncpy
26748     14 2D CA FA | 	rdbyte	local04, local02 wz
2674c     5C 00 90 AD |  if_e	jmp	#LR__3223
26750     14 2D C2 FA | 	rdbyte	local04, local02
26754     2E 2C 0E F2 | 	cmp	local04, #46 wz
26758     01 28 06 A1 |  if_e	add	local02, #1
2675c     14 2F C2 AA |  if_e	rdbyte	local05, local02
26760     01 28 86 A1 |  if_e	sub	local02, #1
26764     17 31 02 A6 |  if_e	mov	local06, local05
26768     07 30 4E A7 |  if_e	zerox	local06, #7 wz
2676c     3C 00 90 AD |  if_e	jmp	#LR__3223
26770     13 2F C2 FA | 	rdbyte	local05, local01
26774     2F 2E 0E F2 | 	cmp	local05, #47 wz
26778     01 26 06 A1 |  if_e	add	local01, #1
2677c     13 2D C2 AA |  if_e	rdbyte	local04, local01
26780     01 26 86 A1 |  if_e	sub	local01, #1
26784     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
26788     AD 01 00 5F 
2678c     50 14 06 56 |  if_ne	mov	arg02, ##@LR__5350
26790     13 13 02 56 |  if_ne	mov	arg01, local01
26794     00 17 06 56 |  if_ne	mov	arg03, #256
26798     68 4D B0 5D |  if_ne	call	#__system__strncat
2679c     13 13 02 F6 | 	mov	arg01, local01
267a0     14 15 02 F6 | 	mov	arg02, local02
267a4     00 17 06 F6 | 	mov	arg03, #256
267a8     58 4D B0 FD | 	call	#__system__strncat
267ac                 | LR__3223
267ac                 | LR__3224
267ac     13 13 02 F6 | 	mov	arg01, local01
267b0     10 4F B0 FD | 	call	#__system___normalizeName
267b4     13 2D CA FA | 	rdbyte	local04, local01 wz
267b8     1C 00 90 AD |  if_e	jmp	#LR__3225
267bc     13 2D C2 FA | 	rdbyte	local04, local01
267c0     2F 2C 0E F2 | 	cmp	local04, #47 wz
267c4     01 26 06 A1 |  if_e	add	local01, #1
267c8     13 31 C2 AA |  if_e	rdbyte	local06, local01
267cc     01 26 86 A1 |  if_e	sub	local01, #1
267d0     00 30 4E A2 |  if_e	cmps	local06, #0 wz
267d4     18 00 90 5D |  if_ne	jmp	#LR__3226
267d8                 | LR__3225
267d8     01 00 00 FF 
267dc     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
267e0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
267e4     01 00 00 FF 
267e8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
267ec     EC 01 90 FD | 	jmp	#LR__3240
267f0                 | LR__3226
267f0     00 32 06 F6 | 	mov	local07, #0
267f4                 | LR__3227
267f4     04 32 56 F2 | 	cmps	local07, #4 wc
267f8     CC 01 90 3D |  if_ae	jmp	#LR__3239
267fc     19 31 02 F6 | 	mov	local06, local07
26800     02 30 66 F0 | 	shl	local06, #2
26804     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26808     F3 30 02 F1 | 	add	local06, ptr___system__dat__
2680c     18 31 0A FB | 	rdlong	local06, local06 wz
26810     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26814     A8 01 90 AD |  if_e	jmp	#LR__3238
26818     19 2D 02 F6 | 	mov	local04, local07
2681c     02 2C 66 F0 | 	shl	local04, #2
26820     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26824     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
26828     16 13 02 FB | 	rdlong	arg01, local04
2682c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26830     09 35 02 F6 | 	mov	local08, arg01
26834     97 06 48 FB | 	callpa	#(@LR__3229-@LR__3228)>>2,fcache_load_ptr_
26838                 | LR__3228
26838     1A FB C9 FA | 	rdbyte	result1, local08 wz
2683c     01 34 06 51 |  if_ne	add	local08, #1
26840     F4 FF 9F 5D |  if_ne	jmp	#LR__3228
26844                 | LR__3229
26844     09 35 82 F1 | 	sub	local08, arg01
26848     1A 37 02 F6 | 	mov	local09, local08
2684c     1B 2D 02 F6 | 	mov	local04, local09
26850     13 2D 02 F1 | 	add	local04, local01
26854     16 31 C2 FA | 	rdbyte	local06, local04
26858     2F 30 0E F2 | 	cmp	local06, #47 wz
2685c     1B 39 02 56 |  if_ne	mov	local10, local09
26860     13 39 02 51 |  if_ne	add	local10, local01
26864     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
26868     54 01 90 5D |  if_ne	jmp	#LR__3237
2686c     19 17 02 F6 | 	mov	arg03, local07
26870     02 16 66 F0 | 	shl	arg03, #2
26874     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26878     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
2687c     0B 15 02 FB | 	rdlong	arg02, arg03
26880     1B 17 02 F6 | 	mov	arg03, local09
26884     13 13 02 F6 | 	mov	arg01, local01
26888     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2688c     D4 4C B0 FD | 	call	#__system__strncmp
26890     00 FA 4D F2 | 	cmps	result1, #0 wz
26894     28 01 90 5D |  if_ne	jmp	#LR__3237
26898     19 3B 02 F6 | 	mov	local11, local07
2689c     02 3A 66 F0 | 	shl	local11, #2
268a0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
268a4     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
268a8     1D 3D 02 FB | 	rdlong	local12, local11
268ac     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
268b0     97 22 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
268b4                 | LR__3230
268b4     1B 31 02 F6 | 	mov	local06, local09
268b8     01 30 06 F1 | 	add	local06, #1
268bc     13 31 02 F1 | 	add	local06, local01
268c0     18 3B C2 FA | 	rdbyte	local11, local06
268c4     2E 3A 0E F2 | 	cmp	local11, #46 wz
268c8     2C 00 90 5D |  if_ne	jmp	#LR__3232
268cc     1B 3B 02 F6 | 	mov	local11, local09
268d0     02 3A 06 F1 | 	add	local11, #2
268d4     13 3B 02 F1 | 	add	local11, local01
268d8     1D 39 C2 FA | 	rdbyte	local10, local11
268dc     2F 38 0E F2 | 	cmp	local10, #47 wz
268e0     1B 3F 02 56 |  if_ne	mov	local13, local09
268e4     02 3E 06 51 |  if_ne	add	local13, #2
268e8     13 3F 02 51 |  if_ne	add	local13, local01
268ec     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
268f0     01 36 06 A1 |  if_e	add	local09, #1
268f4     BC FF 9F AD |  if_e	jmp	#LR__3230
268f8                 | LR__3231
268f8                 | LR__3232
268f8     00 2A 0E F2 | 	cmp	local03, #0 wz
268fc     15 13 02 56 |  if_ne	mov	arg01, local03
26900     13 15 02 56 |  if_ne	mov	arg02, local01
26904     00 17 06 56 |  if_ne	mov	arg03, #256
26908     AC 4B B0 5D |  if_ne	call	#__system__strncpy
2690c     13 15 02 F6 | 	mov	arg02, local01
26910     1B 15 02 F1 | 	add	arg02, local09
26914     01 14 06 F1 | 	add	arg02, #1
26918     13 13 02 F6 | 	mov	arg01, local01
2691c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
26920     13 13 02 F6 | 	mov	arg01, local01
26924     09 35 02 F6 | 	mov	local08, arg01
26928     97 06 48 FB | 	callpa	#(@LR__3234-@LR__3233)>>2,fcache_load_ptr_
2692c                 | LR__3233
2692c     1A FB C9 FA | 	rdbyte	result1, local08 wz
26930     01 34 06 51 |  if_ne	add	local08, #1
26934     F4 FF 9F 5D |  if_ne	jmp	#LR__3233
26938                 | LR__3234
26938     09 35 82 F1 | 	sub	local08, arg01
2693c     1A 37 02 F6 | 	mov	local09, local08
26940                 | LR__3235
26940     01 36 56 F2 | 	cmps	local09, #1 wc
26944     70 00 90 CD |  if_b	jmp	#LR__3236
26948     1B 2D 02 F6 | 	mov	local04, local09
2694c     13 2D 02 F1 | 	add	local04, local01
26950     16 3B C2 FA | 	rdbyte	local11, local04
26954     2F 3A 0E F2 | 	cmp	local11, #47 wz
26958     1B 3B 02 A6 |  if_e	mov	local11, local09
2695c     13 3B 02 A1 |  if_e	add	local11, local01
26960     1D 01 48 AC |  if_e	wrbyte	#0, local11
26964     01 36 86 A1 |  if_e	sub	local09, #1
26968     D4 FF 9F AD |  if_e	jmp	#LR__3235
2696c     1B 2D 02 F6 | 	mov	local04, local09
26970     13 2D 02 F1 | 	add	local04, local01
26974     16 3B C2 FA | 	rdbyte	local11, local04
26978     2E 3A 0E F2 | 	cmp	local11, #46 wz
2697c     38 00 90 5D |  if_ne	jmp	#LR__3236
26980     02 36 56 F2 | 	cmps	local09, #2 wc
26984     30 00 90 CD |  if_b	jmp	#LR__3236
26988     1B 41 02 F6 | 	mov	local14, local09
2698c     01 40 86 F1 | 	sub	local14, #1
26990     13 41 02 F1 | 	add	local14, local01
26994     20 2F C2 FA | 	rdbyte	local05, local14
26998     2F 2E 0E F2 | 	cmp	local05, #47 wz
2699c     18 00 90 5D |  if_ne	jmp	#LR__3236
269a0     1B 2D 02 F6 | 	mov	local04, local09
269a4     01 2C 86 F1 | 	sub	local04, #1
269a8     13 2D 02 F1 | 	add	local04, local01
269ac     16 01 48 FC | 	wrbyte	#0, local04
269b0     02 36 86 F1 | 	sub	local09, #2
269b4     88 FF 9F FD | 	jmp	#LR__3235
269b8                 | LR__3236
269b8     1E FB 01 F6 | 	mov	result1, local12
269bc     1C 00 90 FD | 	jmp	#LR__3240
269c0                 | LR__3237
269c0                 | LR__3238
269c0     01 32 06 F1 | 	add	local07, #1
269c4     2C FE 9F FD | 	jmp	#LR__3227
269c8                 | LR__3239
269c8     02 00 00 FF 
269cc     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
269d0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
269d4     02 00 00 FF 
269d8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
269dc                 | LR__3240
269dc     A7 F0 03 F6 | 	mov	ptra, fp
269e0     B2 00 A0 FD | 	call	#popregs_
269e4                 | __system____getvfsforfile_ret
269e4     2D 00 64 FD | 	ret
269e8                 | 
269e8                 | __system___basic_open
269e8     05 4A 05 F6 | 	mov	COUNT_, #5
269ec     A8 00 A0 FD | 	call	#pushregs_
269f0     0A 27 02 F6 | 	mov	local01, arg02
269f4     0B 29 02 F6 | 	mov	local02, arg03
269f8     0C 2B 02 F6 | 	mov	local03, arg04
269fc     00 2C 06 F6 | 	mov	local04, #0
26a00     8C 4A B0 FD | 	call	#__system____getftab
26a04     FD 2E 0A F6 | 	mov	local05, result1 wz
26a08     18 00 90 5D |  if_ne	jmp	#LR__3250
26a0c     EE 12 02 F6 | 	mov	arg01, abortchain
26a10     0C 14 06 F6 | 	mov	arg02, #12
26a14     01 16 06 F6 | 	mov	arg03, #1
26a18     DA 00 A0 FD | 	call	#__longjmp
26a1c     01 FA 65 F6 | 	neg	result1, #1
26a20     14 01 90 FD | 	jmp	#LR__3259
26a24                 | LR__3250
26a24     08 2E 06 F1 | 	add	local05, #8
26a28     17 FB 09 FB | 	rdlong	result1, local05 wz
26a2c     08 2E 86 F1 | 	sub	local05, #8
26a30     17 13 02 56 |  if_ne	mov	arg01, local05
26a34     AC 41 B0 5D |  if_ne	call	#__system___closeraw
26a38     00 26 0E F2 | 	cmp	local01, #0 wz
26a3c     00 28 0E A2 |  if_e	cmp	local02, #0 wz
26a40     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
26a44     3C 00 90 AD |  if_e	jmp	#LR__3252
26a48     0C 12 06 F6 | 	mov	arg01, #12
26a4c     94 36 B0 FD | 	call	#__system___gc_alloc_managed
26a50     FD 2C 0A F6 | 	mov	local04, result1 wz
26a54     18 00 90 5D |  if_ne	jmp	#LR__3251
26a58     EE 12 02 F6 | 	mov	arg01, abortchain
26a5c     07 14 06 F6 | 	mov	arg02, #7
26a60     01 16 06 F6 | 	mov	arg03, #1
26a64     DA 00 A0 FD | 	call	#__longjmp
26a68     01 FA 65 F6 | 	neg	result1, #1
26a6c     C8 00 90 FD | 	jmp	#LR__3259
26a70                 | LR__3251
26a70     16 01 68 FC | 	wrlong	#0, local04
26a74     04 2C 06 F1 | 	add	local04, #4
26a78     16 01 68 FC | 	wrlong	#0, local04
26a7c     04 2C 86 F1 | 	sub	local04, #4
26a80     17 2D 62 FC | 	wrlong	local04, local05
26a84                 | LR__3252
26a84     00 26 0E F2 | 	cmp	local01, #0 wz
26a88     20 00 90 AD |  if_e	jmp	#LR__3253
26a8c     16 27 62 FC | 	wrlong	local01, local04
26a90     16 FB 01 F6 | 	mov	result1, local04
26a94     00 F8 04 FF 
26a98     00 FA 45 F5 | 	or	result1, ##166723584
26a9c     1C 2E 06 F1 | 	add	local05, #28
26aa0     17 FB 61 FC | 	wrlong	result1, local05
26aa4     1C 2E 86 F1 | 	sub	local05, #28
26aa8     0C 00 90 FD | 	jmp	#LR__3254
26aac                 | LR__3253
26aac     1C 2E 06 F1 | 	add	local05, #28
26ab0     17 01 68 FC | 	wrlong	#0, local05
26ab4     1C 2E 86 F1 | 	sub	local05, #28
26ab8                 | LR__3254
26ab8     00 28 0E F2 | 	cmp	local02, #0 wz
26abc     28 00 90 AD |  if_e	jmp	#LR__3255
26ac0     04 2C 06 F1 | 	add	local04, #4
26ac4     16 29 62 FC | 	wrlong	local02, local04
26ac8     04 2C 86 F1 | 	sub	local04, #4
26acc     16 FB 01 F6 | 	mov	result1, local04
26ad0     00 00 05 FF 
26ad4     00 FA 45 F5 | 	or	result1, ##167772160
26ad8     20 2E 06 F1 | 	add	local05, #32
26adc     17 FB 61 FC | 	wrlong	result1, local05
26ae0     20 2E 86 F1 | 	sub	local05, #32
26ae4     0C 00 90 FD | 	jmp	#LR__3256
26ae8                 | LR__3255
26ae8     20 2E 06 F1 | 	add	local05, #32
26aec     17 01 68 FC | 	wrlong	#0, local05
26af0     20 2E 86 F1 | 	sub	local05, #32
26af4                 | LR__3256
26af4     00 2A 0E F2 | 	cmp	local03, #0 wz
26af8     24 00 90 AD |  if_e	jmp	#LR__3257
26afc     08 2C 06 F1 | 	add	local04, #8
26b00     16 2B 62 FC | 	wrlong	local03, local04
26b04     08 2C 86 F1 | 	sub	local04, #8
26b08     00 08 05 FF 
26b0c     00 2C 46 F5 | 	or	local04, ##168820736
26b10     24 2E 06 F1 | 	add	local05, #36
26b14     17 2D 62 FC | 	wrlong	local04, local05
26b18     24 2E 86 F1 | 	sub	local05, #36
26b1c     0C 00 90 FD | 	jmp	#LR__3258
26b20                 | LR__3257
26b20     24 2E 06 F1 | 	add	local05, #36
26b24     17 01 68 FC | 	wrlong	#0, local05
26b28     24 2E 86 F1 | 	sub	local05, #36
26b2c                 | LR__3258
26b2c     08 2E 06 F1 | 	add	local05, #8
26b30     17 0F 68 FC | 	wrlong	#7, local05
26b34     00 FA 05 F6 | 	mov	result1, #0
26b38                 | LR__3259
26b38     A7 F0 03 F6 | 	mov	ptra, fp
26b3c     B2 00 A0 FD | 	call	#popregs_
26b40                 | __system___basic_open_ret
26b40     2D 00 64 FD | 	ret
26b44                 | 
26b44                 | __system___basic_open_string
26b44     04 4A 05 F6 | 	mov	COUNT_, #4
26b48     A8 00 A0 FD | 	call	#pushregs_
26b4c     0A 27 02 F6 | 	mov	local01, arg02
26b50     0B 29 02 F6 | 	mov	local02, arg03
26b54     38 49 B0 FD | 	call	#__system____getftab
26b58     FD 2A 0A F6 | 	mov	local03, result1 wz
26b5c     18 00 90 5D |  if_ne	jmp	#LR__3260
26b60     EE 12 02 F6 | 	mov	arg01, abortchain
26b64     0C 14 06 F6 | 	mov	arg02, #12
26b68     01 16 06 F6 | 	mov	arg03, #1
26b6c     DA 00 A0 FD | 	call	#__longjmp
26b70     01 FA 65 F6 | 	neg	result1, #1
26b74     5C 00 90 FD | 	jmp	#LR__3262
26b78                 | LR__3260
26b78     08 2A 06 F1 | 	add	local03, #8
26b7c     15 19 0A FB | 	rdlong	arg04, local03 wz
26b80     08 2A 86 F1 | 	sub	local03, #8
26b84     15 13 02 56 |  if_ne	mov	arg01, local03
26b88     58 40 B0 5D |  if_ne	call	#__system___closeraw
26b8c     13 15 02 F6 | 	mov	arg02, local01
26b90     14 17 02 F6 | 	mov	arg03, local02
26b94     15 13 02 F6 | 	mov	arg01, local03
26b98     B6 19 06 F6 | 	mov	arg04, #438
26b9c     40 3D B0 FD | 	call	#__system___openraw
26ba0     FD 2C 02 F6 | 	mov	local04, result1
26ba4     00 2C 56 F2 | 	cmps	local04, #0 wc
26ba8     24 00 90 3D |  if_ae	jmp	#LR__3261
26bac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26bb0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26bb4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26bb8     EE 12 02 F6 | 	mov	arg01, abortchain
26bbc     FD 14 02 FB | 	rdlong	arg02, result1
26bc0     01 16 06 F6 | 	mov	arg03, #1
26bc4     DA 00 A0 FD | 	call	#__longjmp
26bc8     01 FA 65 F6 | 	neg	result1, #1
26bcc     04 00 90 FD | 	jmp	#LR__3262
26bd0                 | LR__3261
26bd0     16 FB 01 F6 | 	mov	result1, local04
26bd4                 | LR__3262
26bd4     A7 F0 03 F6 | 	mov	ptra, fp
26bd8     B2 00 A0 FD | 	call	#popregs_
26bdc                 | __system___basic_open_string_ret
26bdc     2D 00 64 FD | 	ret
26be0                 | 
26be0                 | __system___basic_print_char
26be0     03 4A 05 F6 | 	mov	COUNT_, #3
26be4     A8 00 A0 FD | 	call	#pushregs_
26be8     0A 27 02 F6 | 	mov	local01, arg02
26bec     44 50 B0 FD | 	call	#__system___gettxfunc
26bf0     FD 28 0A F6 | 	mov	local02, result1 wz
26bf4     00 FA 05 A6 |  if_e	mov	result1, #0
26bf8     30 00 90 AD |  if_e	jmp	#LR__3270
26bfc     14 2B 02 F6 | 	mov	local03, local02
26c00     13 28 46 F7 | 	zerox	local02, #19
26c04     14 2A 46 F0 | 	shr	local03, #20
26c08     02 2A 66 F0 | 	shl	local03, #2
26c0c     ED 2A 02 F1 | 	add	local03, __methods__
26c10     15 2B 02 FB | 	rdlong	local03, local03
26c14     13 13 02 F6 | 	mov	arg01, local01
26c18     F2 26 02 F6 | 	mov	local01, objptr
26c1c     14 E5 01 F6 | 	mov	objptr, local02
26c20     2D 2A 62 FD | 	call	local03
26c24     13 E5 01 F6 | 	mov	objptr, local01
26c28     01 FA 05 F6 | 	mov	result1, #1
26c2c                 | LR__3270
26c2c     A7 F0 03 F6 | 	mov	ptra, fp
26c30     B2 00 A0 FD | 	call	#popregs_
26c34                 | __system___basic_print_char_ret
26c34     2D 00 64 FD | 	ret
26c38                 | 
26c38                 | __system___basic_print_string
26c38     03 4A 05 F6 | 	mov	COUNT_, #3
26c3c     A8 00 A0 FD | 	call	#pushregs_
26c40     0A 27 02 F6 | 	mov	local01, arg02
26c44     0B 29 02 F6 | 	mov	local02, arg03
26c48     E8 4F B0 FD | 	call	#__system___gettxfunc
26c4c     FD 2A 0A F6 | 	mov	local03, result1 wz
26c50     00 FA 05 A6 |  if_e	mov	result1, #0
26c54     18 00 90 AD |  if_e	jmp	#LR__3280
26c58     00 26 0E F2 | 	cmp	local01, #0 wz
26c5c     00 FA 05 A6 |  if_e	mov	result1, #0
26c60     15 13 02 56 |  if_ne	mov	arg01, local03
26c64     14 15 02 56 |  if_ne	mov	arg02, local02
26c68     13 17 02 56 |  if_ne	mov	arg03, local01
26c6c     08 02 B0 5D |  if_ne	call	#__system___fmtstr
26c70                 | LR__3280
26c70     A7 F0 03 F6 | 	mov	ptra, fp
26c74     B2 00 A0 FD | 	call	#popregs_
26c78                 | __system___basic_print_string_ret
26c78     2D 00 64 FD | 	ret
26c7c                 | 
26c7c                 | __system___basic_print_integer
26c7c     04 4A 05 F6 | 	mov	COUNT_, #4
26c80     A8 00 A0 FD | 	call	#pushregs_
26c84     0A 27 02 F6 | 	mov	local01, arg02
26c88     0B 29 02 F6 | 	mov	local02, arg03
26c8c     0C 2B 02 F6 | 	mov	local03, arg04
26c90     A0 4F B0 FD | 	call	#__system___gettxfunc
26c94     FD 2C 0A F6 | 	mov	local04, result1 wz
26c98     00 FA 05 A6 |  if_e	mov	result1, #0
26c9c     16 13 02 56 |  if_ne	mov	arg01, local04
26ca0     14 15 02 56 |  if_ne	mov	arg02, local02
26ca4     13 17 02 56 |  if_ne	mov	arg03, local01
26ca8     15 19 02 56 |  if_ne	mov	arg04, local03
26cac     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
26cb0     A7 F0 03 F6 | 	mov	ptra, fp
26cb4     B2 00 A0 FD | 	call	#popregs_
26cb8                 | __system___basic_print_integer_ret
26cb8     2D 00 64 FD | 	ret
26cbc                 | 
26cbc                 | __system___basic_print_unsigned
26cbc     03 4A 05 F6 | 	mov	COUNT_, #3
26cc0     A8 00 A0 FD | 	call	#pushregs_
26cc4     0A 27 02 F6 | 	mov	local01, arg02
26cc8     0B 29 02 F6 | 	mov	local02, arg03
26ccc     0C 2B 02 F6 | 	mov	local03, arg04
26cd0     60 4F B0 FD | 	call	#__system___gettxfunc
26cd4     FD 12 0A F6 | 	mov	arg01, result1 wz
26cd8     00 FA 05 A6 |  if_e	mov	result1, #0
26cdc     3A 28 26 54 |  if_ne	bith	local02, #58
26ce0     14 15 02 56 |  if_ne	mov	arg02, local02
26ce4     13 17 02 56 |  if_ne	mov	arg03, local01
26ce8     15 19 02 56 |  if_ne	mov	arg04, local03
26cec     74 02 B0 5D |  if_ne	call	#__system___fmtnum
26cf0     A7 F0 03 F6 | 	mov	ptra, fp
26cf4     B2 00 A0 FD | 	call	#popregs_
26cf8                 | __system___basic_print_unsigned_ret
26cf8     2D 00 64 FD | 	ret
26cfc                 | 
26cfc                 | __system___basic_get_char
26cfc     03 4A 05 F6 | 	mov	COUNT_, #3
26d00     A8 00 A0 FD | 	call	#pushregs_
26d04     70 4F B0 FD | 	call	#__system___getrxfunc
26d08     FD 26 0A F6 | 	mov	local01, result1 wz
26d0c     01 FA 65 A6 |  if_e	neg	result1, #1
26d10     28 00 90 AD |  if_e	jmp	#LR__3290
26d14     13 29 02 F6 | 	mov	local02, local01
26d18     13 26 46 F7 | 	zerox	local01, #19
26d1c     14 28 46 F0 | 	shr	local02, #20
26d20     02 28 66 F0 | 	shl	local02, #2
26d24     ED 28 02 F1 | 	add	local02, __methods__
26d28     14 29 02 FB | 	rdlong	local02, local02
26d2c     F2 2A 02 F6 | 	mov	local03, objptr
26d30     13 E5 01 F6 | 	mov	objptr, local01
26d34     2D 28 62 FD | 	call	local02
26d38     15 E5 01 F6 | 	mov	objptr, local03
26d3c                 | LR__3290
26d3c     A7 F0 03 F6 | 	mov	ptra, fp
26d40     B2 00 A0 FD | 	call	#popregs_
26d44                 | __system___basic_get_char_ret
26d44     2D 00 64 FD | 	ret
26d48                 | 
26d48                 | __system___basic_put
26d48     04 4A 05 F6 | 	mov	COUNT_, #4
26d4c     A8 00 A0 FD | 	call	#pushregs_
26d50     0D 27 02 F6 | 	mov	local01, arg05
26d54     13 19 02 FD | 	qmul	arg04, local01
26d58     09 29 02 F6 | 	mov	local02, arg01
26d5c     0B 2B 02 F6 | 	mov	local03, arg03
26d60     00 14 0E F2 | 	cmp	arg02, #0 wz
26d64     01 14 86 51 |  if_ne	sub	arg02, #1
26d68     14 13 02 56 |  if_ne	mov	arg01, local02
26d6c     00 16 06 56 |  if_ne	mov	arg03, #0
26d70     18 2C 62 FD | 	getqx	local04
26d74     60 45 B0 5D |  if_ne	call	#__system__lseek
26d78     15 15 02 F6 | 	mov	arg02, local03
26d7c     16 17 02 F6 | 	mov	arg03, local04
26d80     14 13 02 F6 | 	mov	arg01, local02
26d84     9C 44 B0 FD | 	call	#__system__write
26d88     FD 2C 02 F6 | 	mov	local04, result1
26d8c     01 2C 56 F2 | 	cmps	local04, #1 wc
26d90     10 00 90 CD |  if_b	jmp	#LR__3300
26d94     16 89 02 F6 | 	mov	muldiva_, local04
26d98     13 8B 02 F6 | 	mov	muldivb_, local01
26d9c     BA 00 A0 FD | 	call	#divide_
26da0     45 2D 02 F6 | 	mov	local04, muldivb_
26da4                 | LR__3300
26da4     16 FB 01 F6 | 	mov	result1, local04
26da8     A7 F0 03 F6 | 	mov	ptra, fp
26dac     B2 00 A0 FD | 	call	#popregs_
26db0                 | __system___basic_put_ret
26db0     2D 00 64 FD | 	ret
26db4                 | 
26db4                 | __system___basic_get
26db4     04 4A 05 F6 | 	mov	COUNT_, #4
26db8     A8 00 A0 FD | 	call	#pushregs_
26dbc     0D 27 02 F6 | 	mov	local01, arg05
26dc0     13 19 02 FD | 	qmul	arg04, local01
26dc4     09 29 02 F6 | 	mov	local02, arg01
26dc8     0B 2B 02 F6 | 	mov	local03, arg03
26dcc     00 14 0E F2 | 	cmp	arg02, #0 wz
26dd0     01 14 86 51 |  if_ne	sub	arg02, #1
26dd4     14 13 02 56 |  if_ne	mov	arg01, local02
26dd8     00 16 06 56 |  if_ne	mov	arg03, #0
26ddc     18 2C 62 FD | 	getqx	local04
26de0     F4 44 B0 5D |  if_ne	call	#__system__lseek
26de4     15 15 02 F6 | 	mov	arg02, local03
26de8     16 17 02 F6 | 	mov	arg03, local04
26dec     14 13 02 F6 | 	mov	arg01, local02
26df0     6C 44 B0 FD | 	call	#__system__read
26df4     FD 2C 02 F6 | 	mov	local04, result1
26df8     01 2C 56 F2 | 	cmps	local04, #1 wc
26dfc     10 00 90 CD |  if_b	jmp	#LR__3310
26e00     16 89 02 F6 | 	mov	muldiva_, local04
26e04     13 8B 02 F6 | 	mov	muldivb_, local01
26e08     BA 00 A0 FD | 	call	#divide_
26e0c     45 2D 02 F6 | 	mov	local04, muldivb_
26e10                 | LR__3310
26e10     16 FB 01 F6 | 	mov	result1, local04
26e14     A7 F0 03 F6 | 	mov	ptra, fp
26e18     B2 00 A0 FD | 	call	#popregs_
26e1c                 | __system___basic_get_ret
26e1c     2D 00 64 FD | 	ret
26e20                 | 
26e20                 | __system___fmtchar
26e20     00 4A 05 F6 | 	mov	COUNT_, #0
26e24     A8 00 A0 FD | 	call	#pushregs_
26e28     10 F0 07 F1 | 	add	ptra, #16
26e2c     04 4E 05 F1 | 	add	fp, #4
26e30     A7 12 62 FC | 	wrlong	arg01, fp
26e34     04 4E 05 F1 | 	add	fp, #4
26e38     A7 14 62 FC | 	wrlong	arg02, fp
26e3c     04 4E 05 F1 | 	add	fp, #4
26e40     A7 16 62 FC | 	wrlong	arg03, fp
26e44     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
26e48     A7 16 62 FC | 	wrlong	arg03, fp
26e4c     08 4E 85 F1 | 	sub	fp, #8
26e50     A7 12 02 FB | 	rdlong	arg01, fp
26e54     04 4E 05 F1 | 	add	fp, #4
26e58     A7 14 02 FB | 	rdlong	arg02, fp
26e5c     04 4E 05 F1 | 	add	fp, #4
26e60     A7 16 02 F6 | 	mov	arg03, fp
26e64     0C 4E 85 F1 | 	sub	fp, #12
26e68     0C 00 B0 FD | 	call	#__system___fmtstr
26e6c     A7 F0 03 F6 | 	mov	ptra, fp
26e70     B2 00 A0 FD | 	call	#popregs_
26e74                 | __system___fmtchar_ret
26e74     2D 00 64 FD | 	ret
26e78                 | 
26e78                 | __system___fmtstr
26e78     09 4A 05 F6 | 	mov	COUNT_, #9
26e7c     A8 00 A0 FD | 	call	#pushregs_
26e80     09 27 02 F6 | 	mov	local01, arg01
26e84     0A 29 02 F6 | 	mov	local02, arg02
26e88     0B 2B 02 F6 | 	mov	local03, arg03
26e8c     14 19 E2 F8 | 	getbyte	arg04, local02, #0
26e90     15 13 02 F6 | 	mov	arg01, local03
26e94     09 2D 02 F6 | 	mov	local04, arg01
26e98     97 06 48 FB | 	callpa	#(@LR__3321-@LR__3320)>>2,fcache_load_ptr_
26e9c                 | LR__3320
26e9c     16 FB C9 FA | 	rdbyte	result1, local04 wz
26ea0     01 2C 06 51 |  if_ne	add	local04, #1
26ea4     F4 FF 9F 5D |  if_ne	jmp	#LR__3320
26ea8                 | LR__3321
26ea8     09 2D 82 F1 | 	sub	local04, arg01
26eac     00 18 0E F2 | 	cmp	arg04, #0 wz
26eb0     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
26eb4     14 15 02 F6 | 	mov	arg02, local02
26eb8     16 17 02 F6 | 	mov	arg03, local04
26ebc     13 13 02 F6 | 	mov	arg01, local01
26ec0     02 18 06 F6 | 	mov	arg04, #2
26ec4     BC 49 B0 FD | 	call	#__system___fmtpad
26ec8     FD 2E 02 F6 | 	mov	local05, result1
26ecc     00 2E 56 F2 | 	cmps	local05, #0 wc
26ed0     17 FB 01 C6 |  if_b	mov	result1, local05
26ed4     80 00 90 CD |  if_b	jmp	#LR__3324
26ed8     01 2C 56 F2 | 	cmps	local04, #1 wc
26edc     50 00 90 CD |  if_b	jmp	#LR__3323
26ee0     16 31 02 F6 | 	mov	local06, local04
26ee4                 | LR__3322
26ee4     13 33 02 F6 | 	mov	local07, local01
26ee8     13 35 02 F6 | 	mov	local08, local01
26eec     13 32 46 F7 | 	zerox	local07, #19
26ef0     14 34 46 F0 | 	shr	local08, #20
26ef4     02 34 66 F0 | 	shl	local08, #2
26ef8     ED 34 02 F1 | 	add	local08, __methods__
26efc     1A 35 02 FB | 	rdlong	local08, local08
26f00     15 13 C2 FA | 	rdbyte	arg01, local03
26f04     F2 36 02 F6 | 	mov	local09, objptr
26f08     19 E5 01 F6 | 	mov	objptr, local07
26f0c     01 2A 06 F1 | 	add	local03, #1
26f10     2D 34 62 FD | 	call	local08
26f14     1B E5 01 F6 | 	mov	objptr, local09
26f18     FD 36 02 F6 | 	mov	local09, result1
26f1c     00 36 56 F2 | 	cmps	local09, #0 wc
26f20     1B FB 01 C6 |  if_b	mov	result1, local09
26f24     30 00 90 CD |  if_b	jmp	#LR__3324
26f28     1B 2F 02 F1 | 	add	local05, local09
26f2c     ED 31 6E FB | 	djnz	local06, #LR__3322
26f30                 | LR__3323
26f30     14 15 02 F6 | 	mov	arg02, local02
26f34     16 17 02 F6 | 	mov	arg03, local04
26f38     13 13 02 F6 | 	mov	arg01, local01
26f3c     01 18 06 F6 | 	mov	arg04, #1
26f40     40 49 B0 FD | 	call	#__system___fmtpad
26f44     FD 36 02 F6 | 	mov	local09, result1
26f48     00 36 56 F2 | 	cmps	local09, #0 wc
26f4c     1B FB 01 C6 |  if_b	mov	result1, local09
26f50     1B 2F 02 31 |  if_ae	add	local05, local09
26f54     17 FB 01 36 |  if_ae	mov	result1, local05
26f58                 | LR__3324
26f58     A7 F0 03 F6 | 	mov	ptra, fp
26f5c     B2 00 A0 FD | 	call	#popregs_
26f60                 | __system___fmtstr_ret
26f60     2D 00 64 FD | 	ret
26f64                 | 
26f64                 | __system___fmtnum
26f64     0B 4A 05 F6 | 	mov	COUNT_, #11
26f68     A8 00 A0 FD | 	call	#pushregs_
26f6c     09 27 02 F6 | 	mov	local01, arg01
26f70     0A 29 02 F6 | 	mov	local02, arg02
26f74     0B 2B 02 F6 | 	mov	local03, arg03
26f78     0C 2D 02 F6 | 	mov	local04, arg04
26f7c     F8 2F 02 F6 | 	mov	local05, ptra
26f80     17 31 02 F6 | 	mov	local06, local05
26f84     00 32 06 F6 | 	mov	local07, #0
26f88     14 35 02 F6 | 	mov	local08, local02
26f8c     10 34 46 F0 | 	shr	local08, #16
26f90     3F 34 06 F5 | 	and	local08, #63
26f94     14 37 E2 F8 | 	getbyte	local09, local02, #0
26f98     14 39 02 F6 | 	mov	local10, local02
26f9c     1A 38 46 F0 | 	shr	local10, #26
26fa0     03 38 06 F5 | 	and	local10, #3
26fa4     1C 3B 02 F6 | 	mov	local11, local10
26fa8     01 34 56 F2 | 	cmps	local08, #1 wc
26fac     44 F0 07 F1 | 	add	ptra, #68
26fb0     01 34 86 31 |  if_ae	sub	local08, #1
26fb4     41 36 56 F2 | 	cmps	local09, #65 wc
26fb8     00 36 0E C2 |  if_b	cmp	local09, #0 wz
26fbc     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
26fc0     03 3A 0E F2 | 	cmp	local11, #3 wz
26fc4     00 3A 06 A6 |  if_e	mov	local11, #0
26fc8     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
26fcc     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
26fd0     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
26fd4     00 3A 0E F2 | 	cmp	local11, #0 wz
26fd8     4C 00 90 AD |  if_e	jmp	#LR__3333
26fdc     01 32 06 F6 | 	mov	local07, #1
26fe0     1B 35 0A F2 | 	cmp	local08, local09 wz
26fe4     18 00 90 5D |  if_ne	jmp	#LR__3331
26fe8     05 34 6E FB | 	djnz	local08, #LR__3330
26fec     13 13 02 F6 | 	mov	arg01, local01
26ff0     14 15 02 F6 | 	mov	arg02, local02
26ff4     23 16 06 F6 | 	mov	arg03, #35
26ff8     24 FE BF FD | 	call	#__system___fmtchar
26ffc     88 00 90 FD | 	jmp	#LR__3337
27000                 | LR__3330
27000                 | LR__3331
27000     02 3A 0E F2 | 	cmp	local11, #2 wz
27004     18 39 02 A6 |  if_e	mov	local10, local06
27008     01 30 06 A1 |  if_e	add	local06, #1
2700c     1C 41 48 AC |  if_e	wrbyte	#32, local10
27010     14 00 90 AD |  if_e	jmp	#LR__3332
27014     04 3A 0E F2 | 	cmp	local11, #4 wz
27018     18 5B 48 AC |  if_e	wrbyte	#45, local06
2701c     01 30 06 A1 |  if_e	add	local06, #1
27020     18 57 48 5C |  if_ne	wrbyte	#43, local06
27024     01 30 06 51 |  if_ne	add	local06, #1
27028                 | LR__3332
27028                 | LR__3333
27028     18 13 02 F6 | 	mov	arg01, local06
2702c     15 15 02 F6 | 	mov	arg02, local03
27030     16 17 02 F6 | 	mov	arg03, local04
27034     1A 19 02 F6 | 	mov	arg04, local08
27038     00 1A 06 F6 | 	mov	arg05, #0
2703c     1D 28 2E F4 | 	testbn	local02, #29 wz
27040     01 1A 06 56 |  if_ne	mov	arg05, #1
27044     04 49 B0 FD | 	call	#__system___uitoa
27048     FD 32 02 F1 | 	add	local07, result1
2704c     1B 33 5A F2 | 	cmps	local07, local09 wcz
27050     24 00 90 ED |  if_be	jmp	#LR__3336
27054     97 0E 48 FB | 	callpa	#(@LR__3335-@LR__3334)>>2,fcache_load_ptr_
27058                 | LR__3334
27058     1B 39 02 F6 | 	mov	local10, local09
2705c     01 38 56 F2 | 	cmps	local10, #1 wc
27060     01 36 86 F1 | 	sub	local09, #1
27064     18 39 02 36 |  if_ae	mov	local10, local06
27068     01 30 06 31 |  if_ae	add	local06, #1
2706c     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27070     E4 FF 9F 3D |  if_ae	jmp	#LR__3334
27074                 | LR__3335
27074     18 01 48 FC | 	wrbyte	#0, local06
27078                 | LR__3336
27078     13 13 02 F6 | 	mov	arg01, local01
2707c     14 15 02 F6 | 	mov	arg02, local02
27080     17 17 02 F6 | 	mov	arg03, local05
27084     F0 FD BF FD | 	call	#__system___fmtstr
27088                 | LR__3337
27088     A7 F0 03 F6 | 	mov	ptra, fp
2708c     B2 00 A0 FD | 	call	#popregs_
27090                 | __system___fmtnum_ret
27090     2D 00 64 FD | 	ret
27094                 | 
27094                 | __system___fmtfloat
27094     10 4A 05 F6 | 	mov	COUNT_, #16
27098     A8 00 A0 FD | 	call	#pushregs_
2709c     24 F1 07 F1 | 	add	ptra, #292
270a0     04 4E 05 F1 | 	add	fp, #4
270a4     A7 12 62 FC | 	wrlong	arg01, fp
270a8     04 4E 05 F1 | 	add	fp, #4
270ac     A7 14 62 FC | 	wrlong	arg02, fp
270b0     04 4E 05 F1 | 	add	fp, #4
270b4     A7 16 62 FC | 	wrlong	arg03, fp
270b8     04 4E 05 F1 | 	add	fp, #4
270bc     A7 18 62 FC | 	wrlong	arg04, fp
270c0     0C 4E 05 F1 | 	add	fp, #12
270c4     A7 14 68 FC | 	wrlong	#10, fp
270c8     08 4E 05 F1 | 	add	fp, #8
270cc     A7 00 68 FC | 	wrlong	#0, fp
270d0     08 4E 05 F1 | 	add	fp, #8
270d4     A7 00 68 FC | 	wrlong	#0, fp
270d8     08 4E 05 F1 | 	add	fp, #8
270dc     A7 00 68 FC | 	wrlong	#0, fp
270e0     04 4E 05 F1 | 	add	fp, #4
270e4     A7 04 68 FC | 	wrlong	#2, fp
270e8     04 4E 05 F1 | 	add	fp, #4
270ec     A7 00 68 FC | 	wrlong	#0, fp
270f0     04 4E 05 F1 | 	add	fp, #4
270f4     A7 00 68 FC | 	wrlong	#0, fp
270f8     04 4E 05 F1 | 	add	fp, #4
270fc     A7 00 68 FC | 	wrlong	#0, fp
27100     04 4E 05 F1 | 	add	fp, #4
27104     A7 00 68 FC | 	wrlong	#0, fp
27108     18 4E 05 F1 | 	add	fp, #24
2710c     A7 00 68 FC | 	wrlong	#0, fp
27110     68 4E 05 F1 | 	add	fp, #104
27114     A7 26 02 F6 | 	mov	local01, fp
27118     08 4E 85 F1 | 	sub	fp, #8
2711c     A7 26 62 FC | 	wrlong	local01, fp
27120     04 4E 05 F1 | 	add	fp, #4
27124     A7 26 62 FC | 	wrlong	local01, fp
27128     BC 4E 85 F1 | 	sub	fp, #188
2712c     A7 26 02 FB | 	rdlong	local01, fp
27130     10 26 46 F0 | 	shr	local01, #16
27134     3F 26 06 F5 | 	and	local01, #63
27138     B0 4E 05 F1 | 	add	fp, #176
2713c     A7 26 62 FC | 	wrlong	local01, fp
27140     B0 4E 85 F1 | 	sub	fp, #176
27144     A7 26 02 FB | 	rdlong	local01, fp
27148     1C 26 46 F0 | 	shr	local01, #28
2714c     01 26 06 F5 | 	and	local01, #1
27150     08 4F 05 F1 | 	add	fp, #264
27154     A7 26 62 FC | 	wrlong	local01, fp
27158     58 4E 85 F1 | 	sub	fp, #88
2715c     A7 26 0A FB | 	rdlong	local01, fp wz
27160     B8 4E 85 F1 | 	sub	fp, #184
27164     3C 00 90 5D |  if_ne	jmp	#LR__3341
27168     10 4E 05 F1 | 	add	fp, #16
2716c     A7 26 02 FB | 	rdlong	local01, fp
27170     10 4E 85 F1 | 	sub	fp, #16
27174     61 26 0E F2 | 	cmp	local01, #97 wz
27178     18 00 90 5D |  if_ne	jmp	#LR__3340
2717c     B8 4E 05 F1 | 	add	fp, #184
27180     A7 1A 68 FC | 	wrlong	#13, fp
27184     84 4E 85 F1 | 	sub	fp, #132
27188     A7 02 68 FC | 	wrlong	#1, fp
2718c     34 4E 85 F1 | 	sub	fp, #52
27190     24 00 90 FD | 	jmp	#LR__3342
27194                 | LR__3340
27194     B8 4E 05 F1 | 	add	fp, #184
27198     A7 0C 68 FC | 	wrlong	#6, fp
2719c     B8 4E 85 F1 | 	sub	fp, #184
271a0     14 00 90 FD | 	jmp	#LR__3342
271a4                 | LR__3341
271a4     B8 4E 05 F1 | 	add	fp, #184
271a8     A7 26 02 FB | 	rdlong	local01, fp
271ac     01 26 86 F1 | 	sub	local01, #1
271b0     A7 26 62 FC | 	wrlong	local01, fp
271b4     B8 4E 85 F1 | 	sub	fp, #184
271b8                 | LR__3342
271b8     08 4E 05 F1 | 	add	fp, #8
271bc     A7 26 02 FB | 	rdlong	local01, fp
271c0     16 26 46 F0 | 	shr	local01, #22
271c4     03 26 06 F5 | 	and	local01, #3
271c8     04 4F 05 F1 | 	add	fp, #260
271cc     A7 26 62 FC | 	wrlong	local01, fp
271d0     04 4F 85 F1 | 	sub	fp, #260
271d4     A7 26 02 FB | 	rdlong	local01, fp
271d8     1D 26 46 F0 | 	shr	local01, #29
271dc     01 26 06 F5 | 	and	local01, #1
271e0     B4 4E 05 F1 | 	add	fp, #180
271e4     A7 26 62 FC | 	wrlong	local01, fp
271e8     B4 4E 85 F1 | 	sub	fp, #180
271ec     A7 26 02 FB | 	rdlong	local01, fp
271f0     13 27 EA F8 | 	getbyte	local01, local01, #1
271f4     60 4E 05 F1 | 	add	fp, #96
271f8     A7 26 62 FC | 	wrlong	local01, fp
271fc     60 4E 85 F1 | 	sub	fp, #96
27200     A7 26 02 FB | 	rdlong	local01, fp
27204     13 27 E2 F8 | 	getbyte	local01, local01, #0
27208     64 4E 05 F1 | 	add	fp, #100
2720c     A7 26 62 FC | 	wrlong	local01, fp
27210     00 26 06 F6 | 	mov	local01, #0
27214     5C 4E 85 F1 | 	sub	fp, #92
27218     A7 1A 02 FB | 	rdlong	arg05, fp
2721c     65 1A 0E F2 | 	cmp	arg05, #101 wz
27220     01 26 06 A6 |  if_e	mov	local01, #1
27224     14 4E 05 F1 | 	add	fp, #20
27228     A7 26 62 FC | 	wrlong	local01, fp
2722c     98 4E 05 F1 | 	add	fp, #152
27230     A7 28 0A FB | 	rdlong	local02, fp wz
27234     45 26 06 56 |  if_ne	mov	local01, #69
27238     65 26 06 A6 |  if_e	mov	local01, #101
2723c     8C 4E 85 F1 | 	sub	fp, #140
27240     A7 26 62 FC | 	wrlong	local01, fp
27244     20 4E 85 F1 | 	sub	fp, #32
27248     A7 26 02 FB | 	rdlong	local01, fp
2724c     10 4E 85 F1 | 	sub	fp, #16
27250     61 26 0E F2 | 	cmp	local01, #97 wz
27254     4C 00 90 5D |  if_ne	jmp	#LR__3343
27258     24 4E 05 F1 | 	add	fp, #36
2725c     A7 02 68 FC | 	wrlong	#1, fp
27260     98 4E 05 F1 | 	add	fp, #152
27264     A7 28 0A FB | 	rdlong	local02, fp wz
27268     50 26 06 56 |  if_ne	mov	local01, #80
2726c     70 26 06 A6 |  if_e	mov	local01, #112
27270     8C 4E 85 F1 | 	sub	fp, #140
27274     A7 26 62 FC | 	wrlong	local01, fp
27278     14 4E 85 F1 | 	sub	fp, #20
2727c     A7 04 68 FC | 	wrlong	#2, fp
27280     1C 4E 05 F1 | 	add	fp, #28
27284     A7 02 68 FC | 	wrlong	#1, fp
27288     84 4E 05 F1 | 	add	fp, #132
2728c     A7 28 0A FB | 	rdlong	local02, fp wz
27290     58 26 06 56 |  if_ne	mov	local01, #88
27294     78 26 06 A6 |  if_e	mov	local01, #120
27298     7C 4E 85 F1 | 	sub	fp, #124
2729c     A7 26 62 FC | 	wrlong	local01, fp
272a0     40 4E 85 F1 | 	sub	fp, #64
272a4                 | LR__3343
272a4     10 4E 05 F1 | 	add	fp, #16
272a8     A7 26 02 FB | 	rdlong	local01, fp
272ac     10 4E 85 F1 | 	sub	fp, #16
272b0     23 26 0E F2 | 	cmp	local01, #35 wz
272b4     3C 00 90 5D |  if_ne	jmp	#LR__3346
272b8     48 4E 05 F1 | 	add	fp, #72
272bc     A7 02 68 FC | 	wrlong	#1, fp
272c0     C8 4E 05 F1 | 	add	fp, #200
272c4     A7 26 0A FB | 	rdlong	local01, fp wz
272c8     10 4F 85 F1 | 	sub	fp, #272
272cc     18 00 90 AD |  if_e	jmp	#LR__3344
272d0     10 4E 05 F1 | 	add	fp, #16
272d4     A7 CC 68 FC | 	wrlong	#102, fp
272d8     00 4F 05 F1 | 	add	fp, #256
272dc     A7 00 68 FC | 	wrlong	#0, fp
272e0     10 4F 85 F1 | 	sub	fp, #272
272e4     0C 00 90 FD | 	jmp	#LR__3345
272e8                 | LR__3344
272e8     10 4F 05 F1 | 	add	fp, #272
272ec     A7 02 68 FC | 	wrlong	#1, fp
272f0     10 4F 85 F1 | 	sub	fp, #272
272f4                 | LR__3345
272f4                 | LR__3346
272f4     08 4E 05 F1 | 	add	fp, #8
272f8     A7 26 02 FB | 	rdlong	local01, fp
272fc     1A 26 46 F0 | 	shr	local01, #26
27300     03 26 06 F5 | 	and	local01, #3
27304     5C 4E 05 F1 | 	add	fp, #92
27308     A7 26 62 FC | 	wrlong	local01, fp
2730c     58 4E 85 F1 | 	sub	fp, #88
27310     A7 FA 01 FB | 	rdlong	result1, fp
27314     0C 4E 85 F1 | 	sub	fp, #12
27318     1F FA 4D F0 | 	shr	result1, #31 wz
2731c     20 00 90 AD |  if_e	jmp	#LR__3347
27320     2C 4E 05 F1 | 	add	fp, #44
27324     A7 5A 68 FC | 	wrlong	#45, fp
27328     20 4E 85 F1 | 	sub	fp, #32
2732c     A7 FA 01 FB | 	rdlong	result1, fp
27330     1F FA E5 F4 | 	bitnot	result1, #31
27334     A7 FA 61 FC | 	wrlong	result1, fp
27338     0C 4E 85 F1 | 	sub	fp, #12
2733c     3C 00 90 FD | 	jmp	#LR__3349
27340                 | LR__3347
27340     64 4E 05 F1 | 	add	fp, #100
27344     A7 26 02 FB | 	rdlong	local01, fp
27348     64 4E 85 F1 | 	sub	fp, #100
2734c     01 26 0E F2 | 	cmp	local01, #1 wz
27350     2C 4E 05 A1 |  if_e	add	fp, #44
27354     A7 56 68 AC |  if_e	wrlong	#43, fp
27358     2C 4E 85 A1 |  if_e	sub	fp, #44
2735c     1C 00 90 AD |  if_e	jmp	#LR__3348
27360     64 4E 05 F1 | 	add	fp, #100
27364     A7 26 02 FB | 	rdlong	local01, fp
27368     64 4E 85 F1 | 	sub	fp, #100
2736c     02 26 0E F2 | 	cmp	local01, #2 wz
27370     2C 4E 05 A1 |  if_e	add	fp, #44
27374     A7 40 68 AC |  if_e	wrlong	#32, fp
27378     2C 4E 85 A1 |  if_e	sub	fp, #44
2737c                 | LR__3348
2737c                 | LR__3349
2737c     08 4E 05 F1 | 	add	fp, #8
27380     A7 26 02 FB | 	rdlong	local01, fp
27384     18 26 46 F0 | 	shr	local01, #24
27388     03 26 06 F5 | 	and	local01, #3
2738c     3C 4E 05 F1 | 	add	fp, #60
27390     A7 26 62 FC | 	wrlong	local01, fp
27394     00 26 06 F6 | 	mov	local01, #0
27398     18 4E 85 F1 | 	sub	fp, #24
2739c     A7 2A 0A FB | 	rdlong	local03, fp wz
273a0     2C 4E 85 F1 | 	sub	fp, #44
273a4     18 00 90 5D |  if_ne	jmp	#LR__3350
273a8     1C 4E 05 F1 | 	add	fp, #28
273ac     A7 2C 02 FB | 	rdlong	local04, fp
273b0     1C 4E 85 F1 | 	sub	fp, #28
273b4     16 2F 02 F6 | 	mov	local05, local04
273b8     0A 2E 0E F2 | 	cmp	local05, #10 wz
273bc     04 00 90 AD |  if_e	jmp	#LR__3351
273c0                 | LR__3350
273c0     01 26 66 F5 | 	xor	local01, #1
273c4                 | LR__3351
273c4     3C 4E 05 F1 | 	add	fp, #60
273c8     A7 26 62 FC | 	wrlong	local01, fp
273cc     3C 4E 85 F1 | 	sub	fp, #60
273d0     00 26 0E F2 | 	cmp	local01, #0 wz
273d4     0C 01 90 AD |  if_e	jmp	#LR__3353
273d8     44 4E 05 F1 | 	add	fp, #68
273dc     A7 2E 02 FB | 	rdlong	local05, fp
273e0     44 4E 85 F1 | 	sub	fp, #68
273e4     17 2B 02 F6 | 	mov	local03, local05
273e8     02 2A 0E F2 | 	cmp	local03, #2 wz
273ec     F4 00 90 5D |  if_ne	jmp	#LR__3353
273f0     0C 4F 05 F1 | 	add	fp, #268
273f4     A7 30 02 FB | 	rdlong	local06, fp
273f8     0C 4F 85 F1 | 	sub	fp, #268
273fc     18 2D 02 F6 | 	mov	local04, local06
27400     02 2C 0E F2 | 	cmp	local04, #2 wz
27404     DC 00 90 AD |  if_e	jmp	#LR__3353
27408     C0 4E 05 F1 | 	add	fp, #192
2740c     A7 12 02 FB | 	rdlong	arg01, fp
27410     94 4E 85 F1 | 	sub	fp, #148
27414     A7 14 02 FB | 	rdlong	arg02, fp
27418     14 4E 05 F1 | 	add	fp, #20
2741c     A7 16 02 FB | 	rdlong	arg03, fp
27420     40 4E 85 F1 | 	sub	fp, #64
27424     8C 47 B0 FD | 	call	#__system__emitsign_0562
27428     14 4F 05 F1 | 	add	fp, #276
2742c     A7 FA 61 FC | 	wrlong	result1, fp
27430     14 4F 85 F1 | 	sub	fp, #276
27434     00 FA 55 F2 | 	cmps	result1, #0 wc
27438     14 4F 05 C1 |  if_b	add	fp, #276
2743c     A7 FA 01 CB |  if_b	rdlong	result1, fp
27440     14 4F 85 C1 |  if_b	sub	fp, #276
27444     6C 0B 90 CD |  if_b	jmp	#LR__3403
27448     C0 4E 05 F1 | 	add	fp, #192
2744c     A7 26 02 FB | 	rdlong	local01, fp
27450     54 4E 05 F1 | 	add	fp, #84
27454     A7 2E 02 FB | 	rdlong	local05, fp
27458     17 2B 02 F6 | 	mov	local03, local05
2745c     17 27 02 F1 | 	add	local01, local05
27460     54 4E 85 F1 | 	sub	fp, #84
27464     A7 26 62 FC | 	wrlong	local01, fp
27468     58 4E 85 F1 | 	sub	fp, #88
2746c     A7 26 0A FB | 	rdlong	local01, fp wz
27470     68 4E 85 F1 | 	sub	fp, #104
27474     60 00 90 AD |  if_e	jmp	#LR__3352
27478     68 4E 05 F1 | 	add	fp, #104
2747c     A7 26 02 FB | 	rdlong	local01, fp
27480     AC 4E 05 F1 | 	add	fp, #172
27484     A7 2A 02 FB | 	rdlong	local03, fp
27488     15 27 82 F1 | 	sub	local01, local03
2748c     AC 4E 85 F1 | 	sub	fp, #172
27490     A7 26 62 FC | 	wrlong	local01, fp
27494     68 4E 85 F1 | 	sub	fp, #104
27498     00 26 56 F2 | 	cmps	local01, #0 wc
2749c     68 4E 05 C1 |  if_b	add	fp, #104
274a0     A7 00 68 CC |  if_b	wrlong	#0, fp
274a4     68 4E 85 C1 |  if_b	sub	fp, #104
274a8     08 4E 05 F1 | 	add	fp, #8
274ac     A7 26 02 FB | 	rdlong	local01, fp
274b0     E8 26 06 F4 | 	bitl	local01, #232
274b4     A7 26 62 FC | 	wrlong	local01, fp
274b8     60 4E 05 F1 | 	add	fp, #96
274bc     A7 2E 02 FB | 	rdlong	local05, fp
274c0     17 2B 02 F6 | 	mov	local03, local05
274c4     08 2A 66 F0 | 	shl	local03, #8
274c8     15 27 42 F5 | 	or	local01, local03
274cc     60 4E 85 F1 | 	sub	fp, #96
274d0     A7 26 62 FC | 	wrlong	local01, fp
274d4     08 4E 85 F1 | 	sub	fp, #8
274d8                 | LR__3352
274d8     3C 4E 05 F1 | 	add	fp, #60
274dc     A7 00 68 FC | 	wrlong	#0, fp
274e0     3C 4E 85 F1 | 	sub	fp, #60
274e4                 | LR__3353
274e4     0C 4E 05 F1 | 	add	fp, #12
274e8     A7 12 02 FB | 	rdlong	arg01, fp
274ec     0C 4E 85 F1 | 	sub	fp, #12
274f0     EC 21 B0 FD | 	call	#__system____builtin_ilogb
274f4     FF FF 3F FF 
274f8     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
274fc     50 00 90 5D |  if_ne	jmp	#LR__3355
27500     2C 4E 05 F1 | 	add	fp, #44
27504     A7 26 0A FB | 	rdlong	local01, fp wz
27508     2C 4E 85 F1 | 	sub	fp, #44
2750c     24 00 90 AD |  if_e	jmp	#LR__3354
27510     C0 4E 05 F1 | 	add	fp, #192
27514     A7 28 02 FB | 	rdlong	local02, fp
27518     14 2B 02 F6 | 	mov	local03, local02
2751c     01 2A 06 F1 | 	add	local03, #1
27520     A7 2A 62 FC | 	wrlong	local03, fp
27524     94 4E 85 F1 | 	sub	fp, #148
27528     A7 2C 02 FB | 	rdlong	local04, fp
2752c     2C 4E 85 F1 | 	sub	fp, #44
27530     14 2D 42 FC | 	wrbyte	local04, local02
27534                 | LR__3354
27534     C0 4E 05 F1 | 	add	fp, #192
27538     A7 12 02 FB | 	rdlong	arg01, fp
2753c     C0 4E 85 F1 | 	sub	fp, #192
27540     AD 01 00 FF 
27544     52 14 06 F6 | 	mov	arg02, ##@LR__5351
27548     A8 E9 BF FD | 	call	#__system____builtin_strcpy
2754c     A4 08 90 FD | 	jmp	#LR__3391
27550                 | LR__3355
27550     0C 4E 05 F1 | 	add	fp, #12
27554     A7 28 02 FB | 	rdlong	local02, fp
27558     0C 4E 85 F1 | 	sub	fp, #12
2755c     14 13 02 F6 | 	mov	arg01, local02
27560     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27564     00 00 40 FF 
27568     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
2756c     50 00 90 5D |  if_ne	jmp	#LR__3357
27570     2C 4E 05 F1 | 	add	fp, #44
27574     A7 26 0A FB | 	rdlong	local01, fp wz
27578     2C 4E 85 F1 | 	sub	fp, #44
2757c     24 00 90 AD |  if_e	jmp	#LR__3356
27580     C0 4E 05 F1 | 	add	fp, #192
27584     A7 28 02 FB | 	rdlong	local02, fp
27588     14 2B 02 F6 | 	mov	local03, local02
2758c     01 2A 06 F1 | 	add	local03, #1
27590     A7 2A 62 FC | 	wrlong	local03, fp
27594     94 4E 85 F1 | 	sub	fp, #148
27598     A7 2C 02 FB | 	rdlong	local04, fp
2759c     2C 4E 85 F1 | 	sub	fp, #44
275a0     14 2D 42 FC | 	wrbyte	local04, local02
275a4                 | LR__3356
275a4     C0 4E 05 F1 | 	add	fp, #192
275a8     A7 12 02 FB | 	rdlong	arg01, fp
275ac     C0 4E 85 F1 | 	sub	fp, #192
275b0     AD 01 00 FF 
275b4     56 14 06 F6 | 	mov	arg02, ##@LR__5352
275b8     38 E9 BF FD | 	call	#__system____builtin_strcpy
275bc     34 08 90 FD | 	jmp	#LR__3391
275c0                 | LR__3357
275c0     10 4E 05 F1 | 	add	fp, #16
275c4     A7 26 02 FB | 	rdlong	local01, fp
275c8     10 4E 85 F1 | 	sub	fp, #16
275cc     67 26 0E F2 | 	cmp	local01, #103 wz
275d0     10 4E 05 51 |  if_ne	add	fp, #16
275d4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
275d8     10 4E 85 51 |  if_ne	sub	fp, #16
275dc     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
275e0     94 01 90 5D |  if_ne	jmp	#LR__3362
275e4     0C 4E 05 F1 | 	add	fp, #12
275e8     A7 12 02 FB | 	rdlong	arg01, fp
275ec     08 4E 05 F1 | 	add	fp, #8
275f0     A7 14 02 F6 | 	mov	arg02, fp
275f4     0C 4E 05 F1 | 	add	fp, #12
275f8     A7 16 02 F6 | 	mov	arg03, fp
275fc     98 4E 05 F1 | 	add	fp, #152
27600     A7 18 02 FB | 	rdlong	arg04, fp
27604     9C 4E 85 F1 | 	sub	fp, #156
27608     A7 1A 02 FB | 	rdlong	arg05, fp
2760c     1C 4E 85 F1 | 	sub	fp, #28
27610     AC 43 B0 FD | 	call	#__system__disassemble_0560
27614     10 4E 05 F1 | 	add	fp, #16
27618     A7 26 02 FB | 	rdlong	local01, fp
2761c     10 4E 85 F1 | 	sub	fp, #16
27620     23 26 0E F2 | 	cmp	local01, #35 wz
27624     A0 00 90 5D |  if_ne	jmp	#LR__3359
27628     20 4E 05 F1 | 	add	fp, #32
2762c     A7 26 02 FB | 	rdlong	local01, fp
27630     98 4E 05 F1 | 	add	fp, #152
27634     A7 2A 02 FB | 	rdlong	local03, fp
27638     B8 4E 85 F1 | 	sub	fp, #184
2763c     15 27 5A F2 | 	cmps	local01, local03 wcz
27640     24 4E 05 11 |  if_a	add	fp, #36
27644     A7 02 68 1C |  if_a	wrlong	#1, fp
27648     24 4E 85 11 |  if_a	sub	fp, #36
2764c     A4 01 90 1D |  if_a	jmp	#LR__3365
27650     20 4E 05 F1 | 	add	fp, #32
27654     A7 26 02 FB | 	rdlong	local01, fp
27658     20 4E 85 F1 | 	sub	fp, #32
2765c     00 26 56 F2 | 	cmps	local01, #0 wc
27660     2C 00 90 3D |  if_ae	jmp	#LR__3358
27664     B8 4E 05 F1 | 	add	fp, #184
27668     A7 26 02 FB | 	rdlong	local01, fp
2766c     13 27 62 F6 | 	neg	local01, local01
27670     98 4E 85 F1 | 	sub	fp, #152
27674     A7 2A 02 FB | 	rdlong	local03, fp
27678     20 4E 85 F1 | 	sub	fp, #32
2767c     13 2B 5A F2 | 	cmps	local03, local01 wcz
27680     24 4E 05 E1 |  if_be	add	fp, #36
27684     A7 02 68 EC |  if_be	wrlong	#1, fp
27688     24 4E 85 E1 |  if_be	sub	fp, #36
2768c     64 01 90 FD | 	jmp	#LR__3365
27690                 | LR__3358
27690     20 4E 05 F1 | 	add	fp, #32
27694     A7 26 02 FB | 	rdlong	local01, fp
27698     20 4E 85 F1 | 	sub	fp, #32
2769c     01 26 56 F2 | 	cmps	local01, #1 wc
276a0     50 01 90 CD |  if_b	jmp	#LR__3365
276a4     B8 4E 05 F1 | 	add	fp, #184
276a8     A7 26 02 FB | 	rdlong	local01, fp
276ac     98 4E 85 F1 | 	sub	fp, #152
276b0     A7 2A 02 FB | 	rdlong	local03, fp
276b4     15 27 82 F1 | 	sub	local01, local03
276b8     98 4E 05 F1 | 	add	fp, #152
276bc     A7 26 62 FC | 	wrlong	local01, fp
276c0     B8 4E 85 F1 | 	sub	fp, #184
276c4     2C 01 90 FD | 	jmp	#LR__3365
276c8                 | LR__3359
276c8     00 26 06 F6 | 	mov	local01, #0
276cc     08 4E 05 F1 | 	add	fp, #8
276d0     A7 28 02 FB | 	rdlong	local02, fp
276d4     1C 28 46 F0 | 	shr	local02, #28
276d8     01 28 0E F5 | 	and	local02, #1 wz
276dc     01 26 06 A6 |  if_e	mov	local01, #1
276e0     2C 4E 05 F1 | 	add	fp, #44
276e4     A7 26 62 FC | 	wrlong	local01, fp
276e8     14 4E 85 F1 | 	sub	fp, #20
276ec     A7 26 02 FB | 	rdlong	local01, fp
276f0     98 4E 05 F1 | 	add	fp, #152
276f4     A7 2A 02 FB | 	rdlong	local03, fp
276f8     B8 4E 85 F1 | 	sub	fp, #184
276fc     15 27 52 F2 | 	cmps	local01, local03 wc
27700     18 00 90 3D |  if_ae	jmp	#LR__3360
27704     20 4E 05 F1 | 	add	fp, #32
27708     A7 2C 02 FB | 	rdlong	local04, fp
2770c     20 4E 85 F1 | 	sub	fp, #32
27710     FF FF 7F FF 
27714     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
27718     10 00 90 3D |  if_ae	jmp	#LR__3361
2771c                 | LR__3360
2771c     24 4E 05 F1 | 	add	fp, #36
27720     A7 02 68 FC | 	wrlong	#1, fp
27724     24 4E 85 F1 | 	sub	fp, #36
27728     C8 00 90 FD | 	jmp	#LR__3365
2772c                 | LR__3361
2772c     B8 4E 05 F1 | 	add	fp, #184
27730     A7 2C 02 FB | 	rdlong	local04, fp
27734     98 4E 85 F1 | 	sub	fp, #152
27738     A7 2A 02 FB | 	rdlong	local03, fp
2773c     15 2D 82 F1 | 	sub	local04, local03
27740     98 4E 05 F1 | 	add	fp, #152
27744     A7 2C 62 FC | 	wrlong	local04, fp
27748     AC 4E 85 F1 | 	sub	fp, #172
2774c     A7 12 02 FB | 	rdlong	arg01, fp
27750     08 4E 05 F1 | 	add	fp, #8
27754     A7 14 02 F6 | 	mov	arg02, fp
27758     0C 4E 05 F1 | 	add	fp, #12
2775c     A7 16 02 F6 | 	mov	arg03, fp
27760     16 19 62 F6 | 	neg	arg04, local04
27764     04 4E 85 F1 | 	sub	fp, #4
27768     A7 1A 02 FB | 	rdlong	arg05, fp
2776c     1C 4E 85 F1 | 	sub	fp, #28
27770     4C 42 B0 FD | 	call	#__system__disassemble_0560
27774     7C 00 90 FD | 	jmp	#LR__3365
27778                 | LR__3362
27778     24 4E 05 F1 | 	add	fp, #36
2777c     A7 26 0A FB | 	rdlong	local01, fp wz
27780     24 4E 85 F1 | 	sub	fp, #36
27784     34 00 90 AD |  if_e	jmp	#LR__3363
27788     0C 4E 05 F1 | 	add	fp, #12
2778c     A7 12 02 FB | 	rdlong	arg01, fp
27790     08 4E 05 F1 | 	add	fp, #8
27794     A7 14 02 F6 | 	mov	arg02, fp
27798     0C 4E 05 F1 | 	add	fp, #12
2779c     A7 16 02 F6 | 	mov	arg03, fp
277a0     98 4E 05 F1 | 	add	fp, #152
277a4     A7 18 02 FB | 	rdlong	arg04, fp
277a8     9C 4E 85 F1 | 	sub	fp, #156
277ac     A7 1A 02 FB | 	rdlong	arg05, fp
277b0     1C 4E 85 F1 | 	sub	fp, #28
277b4     08 42 B0 FD | 	call	#__system__disassemble_0560
277b8     38 00 90 FD | 	jmp	#LR__3364
277bc                 | LR__3363
277bc     0C 4E 05 F1 | 	add	fp, #12
277c0     A7 12 02 FB | 	rdlong	arg01, fp
277c4     08 4E 05 F1 | 	add	fp, #8
277c8     A7 14 02 F6 | 	mov	arg02, fp
277cc     0C 4E 05 F1 | 	add	fp, #12
277d0     A7 16 02 F6 | 	mov	arg03, fp
277d4     98 4E 05 F1 | 	add	fp, #152
277d8     A7 2C 02 FB | 	rdlong	local04, fp
277dc     01 2C 06 F1 | 	add	local04, #1
277e0     16 19 62 F6 | 	neg	arg04, local04
277e4     9C 4E 85 F1 | 	sub	fp, #156
277e8     A7 1A 02 FB | 	rdlong	arg05, fp
277ec     1C 4E 85 F1 | 	sub	fp, #28
277f0     CC 41 B0 FD | 	call	#__system__disassemble_0560
277f4                 | LR__3364
277f4                 | LR__3365
277f4     1C 4E 05 F1 | 	add	fp, #28
277f8     A7 26 02 FB | 	rdlong	local01, fp
277fc     1C 4E 85 F1 | 	sub	fp, #28
27800     02 26 0E F2 | 	cmp	local01, #2 wz
27804     4C 00 90 5D |  if_ne	jmp	#LR__3368
27808     1C 4E 05 F1 | 	add	fp, #28
2780c     A7 20 68 FC | 	wrlong	#16, fp
27810     1C 4E 85 F1 | 	sub	fp, #28
27814                 | LR__3366
27814     14 4E 05 F1 | 	add	fp, #20
27818     A7 26 0A FB | 	rdlong	local01, fp wz
2781c     14 4E 85 F1 | 	sub	fp, #20
27820     30 00 90 AD |  if_e	jmp	#LR__3367
27824     14 4E 05 F1 | 	add	fp, #20
27828     A7 2A 02 FB | 	rdlong	local03, fp
2782c     14 4E 85 F1 | 	sub	fp, #20
27830     00 80 00 FF 
27834     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
27838     18 00 90 3D |  if_ae	jmp	#LR__3367
2783c     14 4E 05 F1 | 	add	fp, #20
27840     A7 26 02 FB | 	rdlong	local01, fp
27844     01 26 66 F0 | 	shl	local01, #1
27848     A7 26 62 FC | 	wrlong	local01, fp
2784c     14 4E 85 F1 | 	sub	fp, #20
27850     C0 FF 9F FD | 	jmp	#LR__3366
27854                 | LR__3367
27854                 | LR__3368
27854     70 4E 05 F1 | 	add	fp, #112
27858     A7 12 02 F6 | 	mov	arg01, fp
2785c     5C 4E 85 F1 | 	sub	fp, #92
27860     A7 14 02 FB | 	rdlong	arg02, fp
27864     08 4E 05 F1 | 	add	fp, #8
27868     A7 16 02 FB | 	rdlong	arg03, fp
2786c     A0 4E 05 F1 | 	add	fp, #160
27870     A7 1A 02 FB | 	rdlong	arg05, fp
27874     BC 4E 85 F1 | 	sub	fp, #188
27878     01 18 06 F6 | 	mov	arg04, #1
2787c     CC 40 B0 FD | 	call	#__system___uitoa
27880     58 4E 05 F1 | 	add	fp, #88
27884     A7 FA 61 FC | 	wrlong	result1, fp
27888     38 4E 85 F1 | 	sub	fp, #56
2788c     A7 26 02 FB | 	rdlong	local01, fp
27890     20 4E 85 F1 | 	sub	fp, #32
27894     00 26 56 F2 | 	cmps	local01, #0 wc
27898     50 00 90 3D |  if_ae	jmp	#LR__3369
2789c     60 4E 05 F1 | 	add	fp, #96
278a0     A7 5A 68 FC | 	wrlong	#45, fp
278a4     50 4E 05 F1 | 	add	fp, #80
278a8     A7 12 02 F6 | 	mov	arg01, fp
278ac     90 4E 85 F1 | 	sub	fp, #144
278b0     A7 2A 02 FB | 	rdlong	local03, fp
278b4     15 15 62 F6 | 	neg	arg02, local03
278b8     18 4E 05 F1 | 	add	fp, #24
278bc     A7 18 02 FB | 	rdlong	arg04, fp
278c0     84 4E 05 F1 | 	add	fp, #132
278c4     A7 30 02 FB | 	rdlong	local06, fp
278c8     BC 4E 85 F1 | 	sub	fp, #188
278cc     18 2D 02 F6 | 	mov	local04, local06
278d0     0A 16 06 F6 | 	mov	arg03, #10
278d4     16 1B 02 F6 | 	mov	arg05, local04
278d8     70 40 B0 FD | 	call	#__system___uitoa
278dc     5C 4E 05 F1 | 	add	fp, #92
278e0     A7 FA 61 FC | 	wrlong	result1, fp
278e4     5C 4E 85 F1 | 	sub	fp, #92
278e8     48 00 90 FD | 	jmp	#LR__3370
278ec                 | LR__3369
278ec     60 4E 05 F1 | 	add	fp, #96
278f0     A7 56 68 FC | 	wrlong	#43, fp
278f4     50 4E 05 F1 | 	add	fp, #80
278f8     A7 12 02 F6 | 	mov	arg01, fp
278fc     90 4E 85 F1 | 	sub	fp, #144
27900     A7 14 02 FB | 	rdlong	arg02, fp
27904     18 4E 05 F1 | 	add	fp, #24
27908     A7 18 02 FB | 	rdlong	arg04, fp
2790c     84 4E 05 F1 | 	add	fp, #132
27910     A7 30 02 FB | 	rdlong	local06, fp
27914     BC 4E 85 F1 | 	sub	fp, #188
27918     18 2D 02 F6 | 	mov	local04, local06
2791c     0A 16 06 F6 | 	mov	arg03, #10
27920     16 1B 02 F6 | 	mov	arg05, local04
27924     24 40 B0 FD | 	call	#__system___uitoa
27928     5C 4E 05 F1 | 	add	fp, #92
2792c     A7 FA 61 FC | 	wrlong	result1, fp
27930     5C 4E 85 F1 | 	sub	fp, #92
27934                 | LR__3370
27934     24 4E 05 F1 | 	add	fp, #36
27938     A7 26 0A FB | 	rdlong	local01, fp wz
2793c     24 4E 85 F1 | 	sub	fp, #36
27940     2C 00 90 AD |  if_e	jmp	#LR__3371
27944     50 4E 05 F1 | 	add	fp, #80
27948     A7 00 68 FC | 	wrlong	#0, fp
2794c     04 4E 85 F1 | 	sub	fp, #4
27950     A7 00 68 FC | 	wrlong	#0, fp
27954     6C 4E 05 F1 | 	add	fp, #108
27958     A7 26 02 FB | 	rdlong	local01, fp
2795c     01 26 06 F1 | 	add	local01, #1
27960     64 4E 85 F1 | 	sub	fp, #100
27964     A7 26 62 FC | 	wrlong	local01, fp
27968     54 4E 85 F1 | 	sub	fp, #84
2796c     88 00 90 FD | 	jmp	#LR__3374
27970                 | LR__3371
27970     20 4E 05 F1 | 	add	fp, #32
27974     A7 26 02 FB | 	rdlong	local01, fp
27978     20 4E 85 F1 | 	sub	fp, #32
2797c     00 26 56 F2 | 	cmps	local01, #0 wc
27980     40 00 90 3D |  if_ae	jmp	#LR__3372
27984     20 4E 05 F1 | 	add	fp, #32
27988     A7 28 02 FB | 	rdlong	local02, fp
2798c     30 4E 05 F1 | 	add	fp, #48
27990     A7 28 62 FC | 	wrlong	local02, fp
27994     04 4E 85 F1 | 	sub	fp, #4
27998     A7 28 62 FC | 	wrlong	local02, fp
2799c     2C 4E 85 F1 | 	sub	fp, #44
279a0     A7 26 02 FB | 	rdlong	local01, fp
279a4     98 4E 05 F1 | 	add	fp, #152
279a8     A7 2A 02 FB | 	rdlong	local03, fp
279ac     15 27 02 F1 | 	add	local01, local03
279b0     01 26 06 F1 | 	add	local01, #1
279b4     64 4E 85 F1 | 	sub	fp, #100
279b8     A7 26 62 FC | 	wrlong	local01, fp
279bc     54 4E 85 F1 | 	sub	fp, #84
279c0     34 00 90 FD | 	jmp	#LR__3373
279c4                 | LR__3372
279c4     4C 4E 05 F1 | 	add	fp, #76
279c8     A7 00 68 FC | 	wrlong	#0, fp
279cc     2C 4E 85 F1 | 	sub	fp, #44
279d0     A7 26 02 FB | 	rdlong	local01, fp
279d4     30 4E 05 F1 | 	add	fp, #48
279d8     A7 26 62 FC | 	wrlong	local01, fp
279dc     68 4E 05 F1 | 	add	fp, #104
279e0     A7 2A 02 FB | 	rdlong	local03, fp
279e4     15 27 02 F1 | 	add	local01, local03
279e8     01 26 06 F1 | 	add	local01, #1
279ec     64 4E 85 F1 | 	sub	fp, #100
279f0     A7 26 62 FC | 	wrlong	local01, fp
279f4     54 4E 85 F1 | 	sub	fp, #84
279f8                 | LR__3373
279f8                 | LR__3374
279f8     54 4E 05 F1 | 	add	fp, #84
279fc     A7 26 02 FB | 	rdlong	local01, fp
27a00     08 4E 85 F1 | 	sub	fp, #8
27a04     A7 2A 02 FB | 	rdlong	local03, fp
27a08     15 27 82 F1 | 	sub	local01, local03
27a0c     01 26 06 F1 | 	add	local01, #1
27a10     24 4E 85 F1 | 	sub	fp, #36
27a14     A7 26 62 FC | 	wrlong	local01, fp
27a18     04 4E 05 F1 | 	add	fp, #4
27a1c     A7 26 0A FB | 	rdlong	local01, fp wz
27a20     2C 4E 85 F1 | 	sub	fp, #44
27a24     28 4E 05 51 |  if_ne	add	fp, #40
27a28     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27a2c     01 2A 06 51 |  if_ne	add	local03, #1
27a30     A7 2A 62 5C |  if_ne	wrlong	local03, fp
27a34     28 4E 85 51 |  if_ne	sub	fp, #40
27a38     1C 4E 05 F1 | 	add	fp, #28
27a3c     A7 26 02 FB | 	rdlong	local01, fp
27a40     1C 4E 85 F1 | 	sub	fp, #28
27a44     10 26 0E F2 | 	cmp	local01, #16 wz
27a48     28 4E 05 A1 |  if_e	add	fp, #40
27a4c     A7 26 02 AB |  if_e	rdlong	local01, fp
27a50     02 26 06 A1 |  if_e	add	local01, #2
27a54     A7 26 62 AC |  if_e	wrlong	local01, fp
27a58     28 4E 85 A1 |  if_e	sub	fp, #40
27a5c     24 4E 05 F1 | 	add	fp, #36
27a60     A7 26 0A FB | 	rdlong	local01, fp wz
27a64     24 4E 85 F1 | 	sub	fp, #36
27a68     28 00 90 AD |  if_e	jmp	#LR__3375
27a6c     28 4E 05 F1 | 	add	fp, #40
27a70     A7 26 02 FB | 	rdlong	local01, fp
27a74     02 2A 06 F6 | 	mov	local03, #2
27a78     34 4E 05 F1 | 	add	fp, #52
27a7c     A7 2E 02 FB | 	rdlong	local05, fp
27a80     17 2B 02 F1 | 	add	local03, local05
27a84     15 27 02 F1 | 	add	local01, local03
27a88     34 4E 85 F1 | 	sub	fp, #52
27a8c     A7 26 62 FC | 	wrlong	local01, fp
27a90     28 4E 85 F1 | 	sub	fp, #40
27a94                 | LR__3375
27a94     28 4E 05 F1 | 	add	fp, #40
27a98     A7 26 02 FB | 	rdlong	local01, fp
27a9c     28 4E 85 F1 | 	sub	fp, #40
27aa0     41 26 56 F2 | 	cmps	local01, #65 wc
27aa4     01 FA 65 36 |  if_ae	neg	result1, #1
27aa8     08 05 90 3D |  if_ae	jmp	#LR__3403
27aac     3C 4E 05 F1 | 	add	fp, #60
27ab0     A7 26 0A FB | 	rdlong	local01, fp wz
27ab4     3C 4E 85 F1 | 	sub	fp, #60
27ab8     60 00 90 AD |  if_e	jmp	#LR__3376
27abc     C0 4E 05 F1 | 	add	fp, #192
27ac0     A7 12 02 FB | 	rdlong	arg01, fp
27ac4     94 4E 85 F1 | 	sub	fp, #148
27ac8     A7 14 02 FB | 	rdlong	arg02, fp
27acc     14 4E 05 F1 | 	add	fp, #20
27ad0     A7 16 02 FB | 	rdlong	arg03, fp
27ad4     40 4E 85 F1 | 	sub	fp, #64
27ad8     D8 40 B0 FD | 	call	#__system__emitsign_0562
27adc     18 4F 05 F1 | 	add	fp, #280
27ae0     A7 FA 61 FC | 	wrlong	result1, fp
27ae4     18 4F 85 F1 | 	sub	fp, #280
27ae8     00 FA 55 F2 | 	cmps	result1, #0 wc
27aec     18 4F 05 C1 |  if_b	add	fp, #280
27af0     A7 FA 01 CB |  if_b	rdlong	result1, fp
27af4     18 4F 85 C1 |  if_b	sub	fp, #280
27af8     B8 04 90 CD |  if_b	jmp	#LR__3403
27afc     C0 4E 05 F1 | 	add	fp, #192
27b00     A7 26 02 FB | 	rdlong	local01, fp
27b04     58 4E 05 F1 | 	add	fp, #88
27b08     A7 2A 02 FB | 	rdlong	local03, fp
27b0c     15 27 02 F1 | 	add	local01, local03
27b10     58 4E 85 F1 | 	sub	fp, #88
27b14     A7 26 62 FC | 	wrlong	local01, fp
27b18     C0 4E 85 F1 | 	sub	fp, #192
27b1c                 | LR__3376
27b1c     4C 4E 05 F1 | 	add	fp, #76
27b20     A7 26 02 FB | 	rdlong	local01, fp
27b24     34 4E 85 F1 | 	sub	fp, #52
27b28     A7 26 62 FC | 	wrlong	local01, fp
27b2c     18 4E 85 F1 | 	sub	fp, #24
27b30     97 9E 48 FB | 	callpa	#(@LR__3382-@LR__3377)>>2,fcache_load_ptr_
27b34                 | LR__3377
27b34     18 4E 05 F1 | 	add	fp, #24
27b38     A7 28 02 FB | 	rdlong	local02, fp
27b3c     3C 4E 05 F1 | 	add	fp, #60
27b40     A7 2E 02 FB | 	rdlong	local05, fp
27b44     54 4E 85 F1 | 	sub	fp, #84
27b48     17 29 52 F2 | 	cmps	local02, local05 wc
27b4c     20 01 90 3D |  if_ae	jmp	#LR__3383
27b50     18 4E 05 F1 | 	add	fp, #24
27b54     A7 30 02 FB | 	rdlong	local06, fp
27b58     18 4E 85 F1 | 	sub	fp, #24
27b5c     00 30 56 F2 | 	cmps	local06, #0 wc
27b60     58 00 90 CD |  if_b	jmp	#LR__3378
27b64     18 4E 05 F1 | 	add	fp, #24
27b68     A7 30 02 FB | 	rdlong	local06, fp
27b6c     40 4E 05 F1 | 	add	fp, #64
27b70     A7 32 02 FB | 	rdlong	local07, fp
27b74     58 4E 85 F1 | 	sub	fp, #88
27b78     19 31 52 F2 | 	cmps	local06, local07 wc
27b7c     3C 00 90 3D |  if_ae	jmp	#LR__3378
27b80     C0 4E 05 F1 | 	add	fp, #192
27b84     A7 34 02 FB | 	rdlong	local08, fp
27b88     1A 33 02 F6 | 	mov	local07, local08
27b8c     01 32 06 F1 | 	add	local07, #1
27b90     A7 32 62 FC | 	wrlong	local07, fp
27b94     A8 4E 85 F1 | 	sub	fp, #168
27b98     A7 32 02 FB | 	rdlong	local07, fp
27b9c     19 37 02 F6 | 	mov	local09, local07
27ba0     58 4E 05 F1 | 	add	fp, #88
27ba4     A7 38 02 F6 | 	mov	local10, fp
27ba8     A7 36 02 F1 | 	add	local09, fp
27bac     1B 3B C2 FA | 	rdbyte	local11, local09
27bb0     1A 3B 42 FC | 	wrbyte	local11, local08
27bb4     70 4E 85 F1 | 	sub	fp, #112
27bb8     20 00 90 FD | 	jmp	#LR__3379
27bbc                 | LR__3378
27bbc     C0 4E 05 F1 | 	add	fp, #192
27bc0     A7 34 02 FB | 	rdlong	local08, fp
27bc4     1A 37 02 F6 | 	mov	local09, local08
27bc8     01 36 06 F1 | 	add	local09, #1
27bcc     A7 36 62 FC | 	wrlong	local09, fp
27bd0     C0 4E 85 F1 | 	sub	fp, #192
27bd4     30 36 06 F6 | 	mov	local09, #48
27bd8     1A 61 48 FC | 	wrbyte	#48, local08
27bdc                 | LR__3379
27bdc     18 4E 05 F1 | 	add	fp, #24
27be0     A7 30 02 FB | 	rdlong	local06, fp
27be4     38 4E 05 F1 | 	add	fp, #56
27be8     A7 3C 02 FB | 	rdlong	local12, fp
27bec     50 4E 85 F1 | 	sub	fp, #80
27bf0     1E 31 0A F2 | 	cmp	local06, local12 wz
27bf4     5C 00 90 5D |  if_ne	jmp	#LR__3381
27bf8     10 4F 05 F1 | 	add	fp, #272
27bfc     A7 32 02 FB | 	rdlong	local07, fp
27c00     10 4F 85 F1 | 	sub	fp, #272
27c04     19 37 0A F6 | 	mov	local09, local07 wz
27c08     28 00 90 5D |  if_ne	jmp	#LR__3380
27c0c     54 4E 05 F1 | 	add	fp, #84
27c10     A7 3A 02 FB | 	rdlong	local11, fp
27c14     1D 39 02 F6 | 	mov	local10, local11
27c18     01 38 86 F1 | 	sub	local10, #1
27c1c     3C 4E 85 F1 | 	sub	fp, #60
27c20     A7 3E 02 FB | 	rdlong	local13, fp
27c24     18 4E 85 F1 | 	sub	fp, #24
27c28     1F 41 02 F6 | 	mov	local14, local13
27c2c     1C 41 52 F2 | 	cmps	local14, local10 wc
27c30     20 00 90 3D |  if_ae	jmp	#LR__3381
27c34                 | LR__3380
27c34     C0 4E 05 F1 | 	add	fp, #192
27c38     A7 34 02 FB | 	rdlong	local08, fp
27c3c     1A 3D 02 F6 | 	mov	local12, local08
27c40     01 3C 06 F1 | 	add	local12, #1
27c44     A7 3C 62 FC | 	wrlong	local12, fp
27c48     C0 4E 85 F1 | 	sub	fp, #192
27c4c     2E 36 06 F6 | 	mov	local09, #46
27c50     1A 5D 48 FC | 	wrbyte	#46, local08
27c54                 | LR__3381
27c54     18 4E 05 F1 | 	add	fp, #24
27c58     A7 42 02 FB | 	rdlong	local15, fp
27c5c     21 3D 02 F6 | 	mov	local12, local15
27c60     01 3C 06 F1 | 	add	local12, #1
27c64     A7 3C 62 FC | 	wrlong	local12, fp
27c68     18 4E 85 F1 | 	sub	fp, #24
27c6c     C4 FE 9F FD | 	jmp	#LR__3377
27c70                 | LR__3382
27c70                 | LR__3383
27c70     34 4E 05 F1 | 	add	fp, #52
27c74     A7 26 0A FB | 	rdlong	local01, fp wz
27c78     34 4E 85 F1 | 	sub	fp, #52
27c7c     A0 00 90 AD |  if_e	jmp	#LR__3387
27c80     C0 4E 05 F1 | 	add	fp, #192
27c84     A7 26 02 FB | 	rdlong	local01, fp
27c88     01 26 86 F1 | 	sub	local01, #1
27c8c     A7 26 62 FC | 	wrlong	local01, fp
27c90     C0 4E 85 F1 | 	sub	fp, #192
27c94     97 26 48 FB | 	callpa	#(@LR__3385-@LR__3384)>>2,fcache_load_ptr_
27c98                 | LR__3384
27c98     C0 4E 05 F1 | 	add	fp, #192
27c9c     A7 26 02 FB | 	rdlong	local01, fp
27ca0     04 4E 05 F1 | 	add	fp, #4
27ca4     A7 2A 02 FB | 	rdlong	local03, fp
27ca8     C4 4E 85 F1 | 	sub	fp, #196
27cac     15 27 5A F2 | 	cmps	local01, local03 wcz
27cb0     30 00 90 ED |  if_be	jmp	#LR__3386
27cb4     C0 4E 05 F1 | 	add	fp, #192
27cb8     A7 30 02 FB | 	rdlong	local06, fp
27cbc     C0 4E 85 F1 | 	sub	fp, #192
27cc0     18 2D C2 FA | 	rdbyte	local04, local06
27cc4     30 2C 0E F2 | 	cmp	local04, #48 wz
27cc8     18 00 90 5D |  if_ne	jmp	#LR__3386
27ccc     C0 4E 05 F1 | 	add	fp, #192
27cd0     A7 26 02 FB | 	rdlong	local01, fp
27cd4     01 26 86 F1 | 	sub	local01, #1
27cd8     A7 26 62 FC | 	wrlong	local01, fp
27cdc     C0 4E 85 F1 | 	sub	fp, #192
27ce0     B4 FF 9F FD | 	jmp	#LR__3384
27ce4                 | LR__3385
27ce4                 | LR__3386
27ce4     C0 4E 05 F1 | 	add	fp, #192
27ce8     A7 28 02 FB | 	rdlong	local02, fp
27cec     C0 4E 85 F1 | 	sub	fp, #192
27cf0     14 27 C2 FA | 	rdbyte	local01, local02
27cf4     2E 26 0E F2 | 	cmp	local01, #46 wz
27cf8     C0 4E 05 A1 |  if_e	add	fp, #192
27cfc     A7 26 02 AB |  if_e	rdlong	local01, fp
27d00     01 26 86 A1 |  if_e	sub	local01, #1
27d04     A7 26 62 AC |  if_e	wrlong	local01, fp
27d08     C0 4E 85 A1 |  if_e	sub	fp, #192
27d0c     C0 4E 05 F1 | 	add	fp, #192
27d10     A7 2A 02 FB | 	rdlong	local03, fp
27d14     01 2A 06 F1 | 	add	local03, #1
27d18     A7 2A 62 FC | 	wrlong	local03, fp
27d1c     C0 4E 85 F1 | 	sub	fp, #192
27d20                 | LR__3387
27d20     24 4E 05 F1 | 	add	fp, #36
27d24     A7 26 0A FB | 	rdlong	local01, fp wz
27d28     24 4E 85 F1 | 	sub	fp, #36
27d2c     B4 00 90 AD |  if_e	jmp	#LR__3390
27d30     C0 4E 05 F1 | 	add	fp, #192
27d34     A7 28 02 FB | 	rdlong	local02, fp
27d38     14 2B 02 F6 | 	mov	local03, local02
27d3c     01 2A 06 F1 | 	add	local03, #1
27d40     A7 2A 62 FC | 	wrlong	local03, fp
27d44     90 4E 85 F1 | 	sub	fp, #144
27d48     A7 2C 02 FB | 	rdlong	local04, fp
27d4c     14 2D 42 FC | 	wrbyte	local04, local02
27d50     90 4E 05 F1 | 	add	fp, #144
27d54     A7 28 02 FB | 	rdlong	local02, fp
27d58     14 2B 02 F6 | 	mov	local03, local02
27d5c     01 2A 06 F1 | 	add	local03, #1
27d60     A7 2A 62 FC | 	wrlong	local03, fp
27d64     60 4E 85 F1 | 	sub	fp, #96
27d68     A7 2C 02 FB | 	rdlong	local04, fp
27d6c     14 2D 42 FC | 	wrbyte	local04, local02
27d70     48 4E 85 F1 | 	sub	fp, #72
27d74     A7 00 68 FC | 	wrlong	#0, fp
27d78     18 4E 85 F1 | 	sub	fp, #24
27d7c                 | LR__3388
27d7c     18 4E 05 F1 | 	add	fp, #24
27d80     A7 28 02 FB | 	rdlong	local02, fp
27d84     44 4E 05 F1 | 	add	fp, #68
27d88     A7 2E 02 FB | 	rdlong	local05, fp
27d8c     5C 4E 85 F1 | 	sub	fp, #92
27d90     17 29 52 F2 | 	cmps	local02, local05 wc
27d94     4C 00 90 3D |  if_ae	jmp	#LR__3389
27d98     C0 4E 05 F1 | 	add	fp, #192
27d9c     A7 34 02 FB | 	rdlong	local08, fp
27da0     1A 3D 02 F6 | 	mov	local12, local08
27da4     01 3C 06 F1 | 	add	local12, #1
27da8     A7 3C 62 FC | 	wrlong	local12, fp
27dac     A8 4E 85 F1 | 	sub	fp, #168
27db0     A7 32 02 FB | 	rdlong	local07, fp
27db4     19 37 02 F6 | 	mov	local09, local07
27db8     98 4E 05 F1 | 	add	fp, #152
27dbc     A7 38 02 F6 | 	mov	local10, fp
27dc0     A7 36 02 F1 | 	add	local09, fp
27dc4     1B 3B C2 FA | 	rdbyte	local11, local09
27dc8     1A 3B 42 FC | 	wrbyte	local11, local08
27dcc     98 4E 85 F1 | 	sub	fp, #152
27dd0     A7 3C 02 FB | 	rdlong	local12, fp
27dd4     01 3C 06 F1 | 	add	local12, #1
27dd8     A7 3C 62 FC | 	wrlong	local12, fp
27ddc     18 4E 85 F1 | 	sub	fp, #24
27de0     98 FF 9F FD | 	jmp	#LR__3388
27de4                 | LR__3389
27de4                 | LR__3390
27de4     C0 4E 05 F1 | 	add	fp, #192
27de8     A7 26 02 FB | 	rdlong	local01, fp
27dec     C0 4E 85 F1 | 	sub	fp, #192
27df0     13 01 48 FC | 	wrbyte	#0, local01
27df4                 | LR__3391
27df4     6C 4E 05 F1 | 	add	fp, #108
27df8     A7 26 0A FB | 	rdlong	local01, fp wz
27dfc     6C 4E 85 F1 | 	sub	fp, #108
27e00     90 01 90 AD |  if_e	jmp	#LR__3402
27e04     48 4E 05 F1 | 	add	fp, #72
27e08     A7 2A 0A FB | 	rdlong	local03, fp wz
27e0c     48 4E 85 F1 | 	sub	fp, #72
27e10     80 01 90 AD |  if_e	jmp	#LR__3402
27e14     C4 4E 05 F1 | 	add	fp, #196
27e18     A7 12 02 FB | 	rdlong	arg01, fp
27e1c     C4 4E 85 F1 | 	sub	fp, #196
27e20     09 45 02 F6 | 	mov	local16, arg01
27e24     97 06 48 FB | 	callpa	#(@LR__3393-@LR__3392)>>2,fcache_load_ptr_
27e28                 | LR__3392
27e28     22 FB C9 FA | 	rdbyte	result1, local16 wz
27e2c     01 44 06 51 |  if_ne	add	local16, #1
27e30     F4 FF 9F 5D |  if_ne	jmp	#LR__3392
27e34                 | LR__3393
27e34     09 45 82 F1 | 	sub	local16, arg01
27e38     22 2D 02 F6 | 	mov	local04, local16
27e3c     6C 4E 05 F1 | 	add	fp, #108
27e40     A7 30 02 FB | 	rdlong	local06, fp
27e44     6C 4E 85 F1 | 	sub	fp, #108
27e48     18 2D 5A F2 | 	cmps	local04, local06 wcz
27e4c     44 01 90 ED |  if_be	jmp	#LR__3402
27e50     C4 4E 05 F1 | 	add	fp, #196
27e54     A7 26 02 FB | 	rdlong	local01, fp
27e58     5C 4E 05 F1 | 	add	fp, #92
27e5c     A7 26 62 FC | 	wrlong	local01, fp
27e60     FC 4E 85 F1 | 	sub	fp, #252
27e64     A7 26 0A FB | 	rdlong	local01, fp wz
27e68     24 4E 85 F1 | 	sub	fp, #36
27e6c     20 00 90 AD |  if_e	jmp	#LR__3394
27e70     B8 4E 05 F1 | 	add	fp, #184
27e74     A7 00 68 FC | 	wrlong	#0, fp
27e78     4C 4E 85 F1 | 	sub	fp, #76
27e7c     A7 26 02 FB | 	rdlong	local01, fp
27e80     B0 4E 05 F1 | 	add	fp, #176
27e84     A7 26 62 FC | 	wrlong	local01, fp
27e88     1C 4F 85 F1 | 	sub	fp, #284
27e8c     24 00 90 FD | 	jmp	#LR__3395
27e90                 | LR__3394
27e90     6C 4E 05 F1 | 	add	fp, #108
27e94     A7 26 02 FB | 	rdlong	local01, fp
27e98     01 26 86 F1 | 	sub	local01, #1
27e9c     4C 4E 05 F1 | 	add	fp, #76
27ea0     A7 2A 02 FB | 	rdlong	local03, fp
27ea4     15 27 82 F1 | 	sub	local01, local03
27ea8     64 4E 05 F1 | 	add	fp, #100
27eac     A7 26 62 FC | 	wrlong	local01, fp
27eb0     1C 4F 85 F1 | 	sub	fp, #284
27eb4                 | LR__3395
27eb4     97 20 48 FB | 	callpa	#(@LR__3397-@LR__3396)>>2,fcache_load_ptr_
27eb8                 | LR__3396
27eb8     1C 4F 05 F1 | 	add	fp, #284
27ebc     A7 26 0A FB | 	rdlong	local01, fp wz
27ec0     1C 4F 85 F1 | 	sub	fp, #284
27ec4     30 00 90 AD |  if_e	jmp	#LR__3398
27ec8     20 4F 05 F1 | 	add	fp, #288
27ecc     A7 28 02 FB | 	rdlong	local02, fp
27ed0     14 2B 02 F6 | 	mov	local03, local02
27ed4     01 2A 06 F1 | 	add	local03, #1
27ed8     A7 2A 62 FC | 	wrlong	local03, fp
27edc     14 55 48 FC | 	wrbyte	#42, local02
27ee0     04 4E 85 F1 | 	sub	fp, #4
27ee4     A7 26 02 FB | 	rdlong	local01, fp
27ee8     01 26 86 F1 | 	sub	local01, #1
27eec     A7 26 62 FC | 	wrlong	local01, fp
27ef0     1C 4F 85 F1 | 	sub	fp, #284
27ef4     C0 FF 9F FD | 	jmp	#LR__3396
27ef8                 | LR__3397
27ef8                 | LR__3398
27ef8     B8 4E 05 F1 | 	add	fp, #184
27efc     A7 26 0A FB | 	rdlong	local01, fp wz
27f00     B8 4E 85 F1 | 	sub	fp, #184
27f04     70 00 90 AD |  if_e	jmp	#LR__3401
27f08     20 4F 05 F1 | 	add	fp, #288
27f0c     A7 28 02 FB | 	rdlong	local02, fp
27f10     14 2B 02 F6 | 	mov	local03, local02
27f14     01 2A 06 F1 | 	add	local03, #1
27f18     A7 2A 62 FC | 	wrlong	local03, fp
27f1c     14 5D 48 FC | 	wrbyte	#46, local02
27f20     04 4E 85 F1 | 	sub	fp, #4
27f24     A7 00 68 FC | 	wrlong	#0, fp
27f28     1C 4F 85 F1 | 	sub	fp, #284
27f2c                 | LR__3399
27f2c     1C 4F 05 F1 | 	add	fp, #284
27f30     A7 28 02 FB | 	rdlong	local02, fp
27f34     64 4E 85 F1 | 	sub	fp, #100
27f38     A7 2E 02 FB | 	rdlong	local05, fp
27f3c     B8 4E 85 F1 | 	sub	fp, #184
27f40     17 29 52 F2 | 	cmps	local02, local05 wc
27f44     30 00 90 3D |  if_ae	jmp	#LR__3400
27f48     20 4F 05 F1 | 	add	fp, #288
27f4c     A7 34 02 FB | 	rdlong	local08, fp
27f50     1A 3D 02 F6 | 	mov	local12, local08
27f54     01 3C 06 F1 | 	add	local12, #1
27f58     A7 3C 62 FC | 	wrlong	local12, fp
27f5c     1A 55 48 FC | 	wrbyte	#42, local08
27f60     04 4E 85 F1 | 	sub	fp, #4
27f64     A7 3C 02 FB | 	rdlong	local12, fp
27f68     01 3C 06 F1 | 	add	local12, #1
27f6c     A7 3C 62 FC | 	wrlong	local12, fp
27f70     1C 4F 85 F1 | 	sub	fp, #284
27f74     B4 FF 9F FD | 	jmp	#LR__3399
27f78                 | LR__3400
27f78                 | LR__3401
27f78     20 4F 05 F1 | 	add	fp, #288
27f7c     A7 28 02 FB | 	rdlong	local02, fp
27f80     14 2B 02 F6 | 	mov	local03, local02
27f84     01 2A 06 F1 | 	add	local03, #1
27f88     A7 2A 62 FC | 	wrlong	local03, fp
27f8c     20 4F 85 F1 | 	sub	fp, #288
27f90     14 01 48 FC | 	wrbyte	#0, local02
27f94                 | LR__3402
27f94     04 4E 05 F1 | 	add	fp, #4
27f98     A7 12 02 FB | 	rdlong	arg01, fp
27f9c     04 4E 05 F1 | 	add	fp, #4
27fa0     A7 14 02 FB | 	rdlong	arg02, fp
27fa4     BC 4E 05 F1 | 	add	fp, #188
27fa8     A7 16 02 FB | 	rdlong	arg03, fp
27fac     C4 4E 85 F1 | 	sub	fp, #196
27fb0     C4 EE BF FD | 	call	#__system___fmtstr
27fb4                 | LR__3403
27fb4     A7 F0 03 F6 | 	mov	ptra, fp
27fb8     B2 00 A0 FD | 	call	#popregs_
27fbc                 | __system___fmtfloat_ret
27fbc     2D 00 64 FD | 	ret
27fc0                 | 
27fc0                 | __system__Left_S
27fc0     04 4A 05 F6 | 	mov	COUNT_, #4
27fc4     A8 00 A0 FD | 	call	#pushregs_
27fc8     09 27 02 F6 | 	mov	local01, arg01
27fcc     0A 29 02 F6 | 	mov	local02, arg02
27fd0     01 28 56 F2 | 	cmps	local02, #1 wc
27fd4     AD 01 00 CF 
27fd8     5A FA 05 C6 |  if_b	mov	result1, ##@LR__5353
27fdc     5C 00 90 CD |  if_b	jmp	#LR__3413
27fe0     13 13 02 F6 | 	mov	arg01, local01
27fe4     09 2B 02 F6 | 	mov	local03, arg01
27fe8     97 06 48 FB | 	callpa	#(@LR__3411-@LR__3410)>>2,fcache_load_ptr_
27fec                 | LR__3410
27fec     15 FB C9 FA | 	rdbyte	result1, local03 wz
27ff0     01 2A 06 51 |  if_ne	add	local03, #1
27ff4     F4 FF 9F 5D |  if_ne	jmp	#LR__3410
27ff8                 | LR__3411
27ff8     09 2B 82 F1 | 	sub	local03, arg01
27ffc     15 FB 01 F6 | 	mov	result1, local03
28000     14 FB 59 F2 | 	cmps	result1, local02 wcz
28004     13 FB 01 E6 |  if_be	mov	result1, local01
28008     30 00 90 ED |  if_be	jmp	#LR__3413
2800c     14 13 02 F6 | 	mov	arg01, local02
28010     02 12 06 F1 | 	add	arg01, #2
28014     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
28018     FD 2C 0A F6 | 	mov	local04, result1 wz
2801c     18 00 90 AD |  if_e	jmp	#LR__3412
28020     16 13 02 F6 | 	mov	arg01, local04
28024     13 15 02 F6 | 	mov	arg02, local01
28028     14 17 02 F6 | 	mov	arg03, local02
2802c     30 DE BF FD | 	call	#__system____builtin_memmove
28030     16 29 02 F1 | 	add	local02, local04
28034     14 01 48 FC | 	wrbyte	#0, local02
28038                 | LR__3412
28038     16 FB 01 F6 | 	mov	result1, local04
2803c                 | LR__3413
2803c     A7 F0 03 F6 | 	mov	ptra, fp
28040     B2 00 A0 FD | 	call	#popregs_
28044                 | __system__Left_S_ret
28044     2D 00 64 FD | 	ret
28048                 | 
28048                 | __system__Right_S
28048     05 4A 05 F6 | 	mov	COUNT_, #5
2804c     A8 00 A0 FD | 	call	#pushregs_
28050     09 27 02 F6 | 	mov	local01, arg01
28054     0A 29 02 F6 | 	mov	local02, arg02
28058     01 28 56 F2 | 	cmps	local02, #1 wc
2805c     AD 01 00 CF 
28060     5B FA 05 C6 |  if_b	mov	result1, ##@LR__5354
28064     64 00 90 CD |  if_b	jmp	#LR__3423
28068     13 13 02 F6 | 	mov	arg01, local01
2806c     09 2B 02 F6 | 	mov	local03, arg01
28070     97 06 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
28074                 | LR__3420
28074     15 FB C9 FA | 	rdbyte	result1, local03 wz
28078     01 2A 06 51 |  if_ne	add	local03, #1
2807c     F4 FF 9F 5D |  if_ne	jmp	#LR__3420
28080                 | LR__3421
28080     09 2B 82 F1 | 	sub	local03, arg01
28084     15 FB 01 F6 | 	mov	result1, local03
28088     FD 2C 02 F6 | 	mov	local04, result1
2808c     14 2D 5A F2 | 	cmps	local04, local02 wcz
28090     13 FB 01 E6 |  if_be	mov	result1, local01
28094     34 00 90 ED |  if_be	jmp	#LR__3423
28098     14 13 02 F6 | 	mov	arg01, local02
2809c     02 12 06 F1 | 	add	arg01, #2
280a0     40 20 B0 FD | 	call	#__system___gc_alloc_managed
280a4     FD 2E 0A F6 | 	mov	local05, result1 wz
280a8     1C 00 90 AD |  if_e	jmp	#LR__3422
280ac     14 2D 82 F1 | 	sub	local04, local02
280b0     13 2D 02 F1 | 	add	local04, local01
280b4     01 28 06 F1 | 	add	local02, #1
280b8     17 13 02 F6 | 	mov	arg01, local05
280bc     16 15 02 F6 | 	mov	arg02, local04
280c0     14 17 02 F6 | 	mov	arg03, local02
280c4     98 DD BF FD | 	call	#__system____builtin_memmove
280c8                 | LR__3422
280c8     17 FB 01 F6 | 	mov	result1, local05
280cc                 | LR__3423
280cc     A7 F0 03 F6 | 	mov	ptra, fp
280d0     B2 00 A0 FD | 	call	#popregs_
280d4                 | __system__Right_S_ret
280d4     2D 00 64 FD | 	ret
280d8                 | 
280d8                 | __system__Mid_S
280d8     05 4A 05 F6 | 	mov	COUNT_, #5
280dc     A8 00 A0 FD | 	call	#pushregs_
280e0     09 27 02 F6 | 	mov	local01, arg01
280e4     0A 29 02 F6 | 	mov	local02, arg02
280e8     01 16 56 F2 | 	cmps	arg03, #1 wc
280ec     AD 01 00 CF 
280f0     5C FA 05 C6 |  if_b	mov	result1, ##@LR__5355
280f4     80 00 90 CD |  if_b	jmp	#LR__3433
280f8     01 28 86 F1 | 	sub	local02, #1
280fc     00 28 56 F3 | 	fges	local02, #0 wc
28100     13 13 02 F6 | 	mov	arg01, local01
28104     09 2B 02 F6 | 	mov	local03, arg01
28108     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
2810c                 | LR__3430
2810c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28110     01 2A 06 51 |  if_ne	add	local03, #1
28114     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
28118                 | LR__3431
28118     09 2B 82 F1 | 	sub	local03, arg01
2811c     15 FB 01 F6 | 	mov	result1, local03
28120     FD 14 02 F6 | 	mov	arg02, result1
28124     14 15 52 F2 | 	cmps	arg02, local02 wc
28128     AD 01 00 CF 
2812c     5D FA 05 C6 |  if_b	mov	result1, ##@LR__5356
28130     44 00 90 CD |  if_b	jmp	#LR__3433
28134     0A 2D 02 F6 | 	mov	local04, arg02
28138     14 2D 82 F1 | 	sub	local04, local02
2813c     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28140     0B 2D 02 16 |  if_a	mov	local04, arg03
28144     16 13 02 F6 | 	mov	arg01, local04
28148     02 12 06 F1 | 	add	arg01, #2
2814c     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28150     FD 2E 0A F6 | 	mov	local05, result1 wz
28154     1C 00 90 AD |  if_e	jmp	#LR__3432
28158     13 29 02 F1 | 	add	local02, local01
2815c     17 13 02 F6 | 	mov	arg01, local05
28160     14 15 02 F6 | 	mov	arg02, local02
28164     16 17 02 F6 | 	mov	arg03, local04
28168     F4 DC BF FD | 	call	#__system____builtin_memmove
2816c     17 2D 02 F1 | 	add	local04, local05
28170     16 01 48 FC | 	wrbyte	#0, local04
28174                 | LR__3432
28174     17 FB 01 F6 | 	mov	result1, local05
28178                 | LR__3433
28178     A7 F0 03 F6 | 	mov	ptra, fp
2817c     B2 00 A0 FD | 	call	#popregs_
28180                 | __system__Mid_S_ret
28180     2D 00 64 FD | 	ret
28184                 | 
28184                 | __system__Chr_S
28184     01 4A 05 F6 | 	mov	COUNT_, #1
28188     A8 00 A0 FD | 	call	#pushregs_
2818c     09 27 02 F6 | 	mov	local01, arg01
28190     03 12 06 F6 | 	mov	arg01, #3
28194     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
28198     00 FA 4D F2 | 	cmps	result1, #0 wz
2819c     FD 26 42 5C |  if_ne	wrbyte	local01, result1
281a0     01 FA 05 51 |  if_ne	add	result1, #1
281a4     FD 00 48 5C |  if_ne	wrbyte	#0, result1
281a8     01 FA 85 51 |  if_ne	sub	result1, #1
281ac     A7 F0 03 F6 | 	mov	ptra, fp
281b0     B2 00 A0 FD | 	call	#popregs_
281b4                 | __system__Chr_S_ret
281b4     2D 00 64 FD | 	ret
281b8                 | 
281b8                 | __system__str_S
281b8     02 4A 05 F6 | 	mov	COUNT_, #2
281bc     A8 00 A0 FD | 	call	#pushregs_
281c0     09 27 02 F6 | 	mov	local01, arg01
281c4     10 12 06 F6 | 	mov	arg01, #16
281c8     18 1F B0 FD | 	call	#__system___gc_alloc_managed
281cc     FD 28 0A F6 | 	mov	local02, result1 wz
281d0     30 00 90 AD |  if_e	jmp	#LR__3440
281d4     F8 13 02 F6 | 	mov	arg01, ptra
281d8     08 F0 07 F1 | 	add	ptra, #8
281dc     09 29 62 FC | 	wrlong	local02, arg01
281e0     04 12 06 F1 | 	add	arg01, #4
281e4     09 01 68 FC | 	wrlong	#0, arg01
281e8     04 12 86 F1 | 	sub	arg01, #4
281ec     00 20 05 FF 
281f0     00 12 46 F5 | 	or	arg01, ##171966464
281f4     00 14 06 F6 | 	mov	arg02, #0
281f8     13 17 02 F6 | 	mov	arg03, local01
281fc     67 18 06 F6 | 	mov	arg04, #103
28200     90 EE BF FD | 	call	#__system___fmtfloat
28204                 | LR__3440
28204     14 FB 01 F6 | 	mov	result1, local02
28208     A7 F0 03 F6 | 	mov	ptra, fp
2820c     B2 00 A0 FD | 	call	#popregs_
28210                 | __system__str_S_ret
28210     2D 00 64 FD | 	ret
28214                 | 
28214                 | __system__Number_S
28214     08 4A 05 F6 | 	mov	COUNT_, #8
28218     A8 00 A0 FD | 	call	#pushregs_
2821c     09 27 02 F6 | 	mov	local01, arg01
28220     0A 29 0A F6 | 	mov	local02, arg02 wz
28224     0B 2B 02 F6 | 	mov	local03, arg03
28228     3C 00 90 5D |  if_ne	jmp	#LR__3452
2822c     01 28 06 F6 | 	mov	local02, #1
28230     15 2D 02 F6 | 	mov	local04, local03
28234     01 2E 06 F6 | 	mov	local05, #1
28238     97 16 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
2823c                 | LR__3450
2823c     00 30 06 F6 | 	mov	local06, #0
28240     13 2D 1A F2 | 	cmp	local04, local01 wcz
28244     01 30 66 E6 |  if_be	neg	local06, #1
28248     16 2F 12 F2 | 	cmp	local05, local04 wc
2824c     19 33 A2 F1 | 	subx	local07, local07
28250     19 31 CA F7 | 	test	local06, local07 wz
28254     15 2D 02 5D |  if_ne	qmul	local04, local03
28258     16 2F 02 56 |  if_ne	mov	local05, local04
2825c     01 28 06 51 |  if_ne	add	local02, #1
28260     18 2C 62 5D |  if_ne	getqx	local04
28264     D4 FF 9F 5D |  if_ne	jmp	#LR__3450
28268                 | LR__3451
28268                 | LR__3452
28268     20 28 36 F3 | 	fle	local02, #32 wc
2826c     14 13 02 F6 | 	mov	arg01, local02
28270     02 12 06 F1 | 	add	arg01, #2
28274     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
28278     FD 30 02 F6 | 	mov	local06, result1
2827c     14 33 02 F6 | 	mov	local07, local02
28280     18 33 02 F1 | 	add	local07, local06
28284     19 01 48 FC | 	wrbyte	#0, local07
28288     97 1A 48 FB | 	callpa	#(@LR__3454-@LR__3453)>>2,fcache_load_ptr_
2828c                 | LR__3453
2828c     01 28 16 F2 | 	cmp	local02, #1 wc
28290     2C 00 90 CD |  if_b	jmp	#LR__3455
28294     15 27 12 FD | 	qdiv	local01, local03
28298     01 28 86 F1 | 	sub	local02, #1
2829c     14 33 02 F6 | 	mov	local07, local02
282a0     18 33 02 F1 | 	add	local07, local06
282a4     19 34 62 FD | 	getqy	local08
282a8     0A 34 16 F2 | 	cmp	local08, #10 wc
282ac     30 34 06 C1 |  if_b	add	local08, #48
282b0     37 34 06 31 |  if_ae	add	local08, #55
282b4     19 35 42 FC | 	wrbyte	local08, local07
282b8     18 26 62 FD | 	getqx	local01
282bc     CC FF 9F FD | 	jmp	#LR__3453
282c0                 | LR__3454
282c0                 | LR__3455
282c0     18 FB 01 F6 | 	mov	result1, local06
282c4     A7 F0 03 F6 | 	mov	ptra, fp
282c8     B2 00 A0 FD | 	call	#popregs_
282cc                 | __system__Number_S_ret
282cc     2D 00 64 FD | 	ret
282d0                 | 
282d0                 | __system__LCase_S
282d0     07 4A 05 F6 | 	mov	COUNT_, #7
282d4     A8 00 A0 FD | 	call	#pushregs_
282d8     09 27 02 F6 | 	mov	local01, arg01
282dc     09 29 02 F6 | 	mov	local02, arg01
282e0     97 06 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
282e4                 | LR__3460
282e4     14 FB C9 FA | 	rdbyte	result1, local02 wz
282e8     01 28 06 51 |  if_ne	add	local02, #1
282ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3460
282f0                 | LR__3461
282f0     09 29 82 F1 | 	sub	local02, arg01
282f4     14 FB 01 F6 | 	mov	result1, local02
282f8     FD 28 0A F6 | 	mov	local02, result1 wz
282fc     AD 01 00 AF 
28300     5E FA 05 A6 |  if_e	mov	result1, ##@LR__5357
28304     7C 00 90 AD |  if_e	jmp	#LR__3467
28308     14 13 02 F6 | 	mov	arg01, local02
2830c     02 12 06 F1 | 	add	arg01, #2
28310     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
28314     FD 2A 0A F6 | 	mov	local03, result1 wz
28318     64 00 90 AD |  if_e	jmp	#LR__3466
2831c     01 2C 66 F6 | 	neg	local04, #1
28320     97 26 48 FB | 	callpa	#(@LR__3465-@LR__3462)>>2,fcache_load_ptr_
28324                 | LR__3462
28324     01 2C 06 F1 | 	add	local04, #1
28328     16 2F 02 F6 | 	mov	local05, local04
2832c     13 2F 02 F1 | 	add	local05, local01
28330     17 31 C2 FA | 	rdbyte	local06, local05
28334     41 30 56 F2 | 	cmps	local06, #65 wc
28338     18 00 90 CD |  if_b	jmp	#LR__3463
2833c     5B 30 56 F2 | 	cmps	local06, #91 wc
28340     16 33 02 C6 |  if_b	mov	local07, local04
28344     15 33 02 C1 |  if_b	add	local07, local03
28348     20 30 06 C1 |  if_b	add	local06, #32
2834c     19 31 42 CC |  if_b	wrbyte	local06, local07
28350     0C 00 90 CD |  if_b	jmp	#LR__3464
28354                 | LR__3463
28354     16 33 02 F6 | 	mov	local07, local04
28358     15 33 02 F1 | 	add	local07, local03
2835c     19 31 42 FC | 	wrbyte	local06, local07
28360                 | LR__3464
28360     14 31 02 F6 | 	mov	local06, local02
28364     01 30 86 F1 | 	sub	local06, #1
28368     18 2D 0A F2 | 	cmp	local04, local06 wz
2836c     B4 FF 9F 5D |  if_ne	jmp	#LR__3462
28370                 | LR__3465
28370     15 29 02 F1 | 	add	local02, local03
28374     14 01 48 FC | 	wrbyte	#0, local02
28378     15 FB 01 F6 | 	mov	result1, local03
2837c     04 00 90 FD | 	jmp	#LR__3467
28380                 | LR__3466
28380     15 FB 01 F6 | 	mov	result1, local03
28384                 | LR__3467
28384     A7 F0 03 F6 | 	mov	ptra, fp
28388     B2 00 A0 FD | 	call	#popregs_
2838c                 | __system__LCase_S_ret
2838c     2D 00 64 FD | 	ret
28390                 | 
28390                 | __system__LTrim_S
28390     05 4A 05 F6 | 	mov	COUNT_, #5
28394     A8 00 A0 FD | 	call	#pushregs_
28398     09 27 02 F6 | 	mov	local01, arg01
2839c     09 29 02 F6 | 	mov	local02, arg01
283a0     97 06 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
283a4                 | LR__3470
283a4     14 FB C9 FA | 	rdbyte	result1, local02 wz
283a8     01 28 06 51 |  if_ne	add	local02, #1
283ac     F4 FF 9F 5D |  if_ne	jmp	#LR__3470
283b0                 | LR__3471
283b0     09 29 82 F1 | 	sub	local02, arg01
283b4     14 FB 01 F6 | 	mov	result1, local02
283b8     FD 28 0A F6 | 	mov	local02, result1 wz
283bc     AD 01 00 AF 
283c0     5F FA 05 A6 |  if_e	mov	result1, ##@LR__5358
283c4     7C 00 90 AD |  if_e	jmp	#LR__3476
283c8     00 2A 06 F6 | 	mov	local03, #0
283cc     14 2D 02 F6 | 	mov	local04, local02
283d0                 | LR__3472
283d0     16 2B 52 F2 | 	cmps	local03, local04 wc
283d4     68 00 90 3D |  if_ae	jmp	#LR__3475
283d8     15 17 02 F6 | 	mov	arg03, local03
283dc     13 17 02 F1 | 	add	arg03, local01
283e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
283e4     20 16 0E F2 | 	cmp	arg03, #32 wz
283e8     4C 00 90 AD |  if_e	jmp	#LR__3474
283ec     14 13 02 F6 | 	mov	arg01, local02
283f0     15 13 82 F1 | 	sub	arg01, local03
283f4     02 12 06 F1 | 	add	arg01, #2
283f8     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
283fc     FD 2E 0A F6 | 	mov	local05, result1 wz
28400     2C 00 90 AD |  if_e	jmp	#LR__3473
28404     15 15 02 F6 | 	mov	arg02, local03
28408     13 15 02 F1 | 	add	arg02, local01
2840c     14 17 02 F6 | 	mov	arg03, local02
28410     15 17 82 F1 | 	sub	arg03, local03
28414     17 13 02 F6 | 	mov	arg01, local05
28418     44 DA BF FD | 	call	#__system____builtin_memmove
2841c     15 29 82 F1 | 	sub	local02, local03
28420     17 29 02 F1 | 	add	local02, local05
28424     14 01 48 FC | 	wrbyte	#0, local02
28428     17 FB 01 F6 | 	mov	result1, local05
2842c     14 00 90 FD | 	jmp	#LR__3476
28430                 | LR__3473
28430     17 FB 01 F6 | 	mov	result1, local05
28434     0C 00 90 FD | 	jmp	#LR__3476
28438                 | LR__3474
28438     01 2A 06 F1 | 	add	local03, #1
2843c     90 FF 9F FD | 	jmp	#LR__3472
28440                 | LR__3475
28440     13 FB 01 F6 | 	mov	result1, local01
28444                 | LR__3476
28444     A7 F0 03 F6 | 	mov	ptra, fp
28448     B2 00 A0 FD | 	call	#popregs_
2844c                 | __system__LTrim_S_ret
2844c     2D 00 64 FD | 	ret
28450                 | 
28450                 | __system__RTrim_S
28450     04 4A 05 F6 | 	mov	COUNT_, #4
28454     A8 00 A0 FD | 	call	#pushregs_
28458     09 27 02 F6 | 	mov	local01, arg01
2845c     09 29 02 F6 | 	mov	local02, arg01
28460     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28464                 | LR__3480
28464     14 FB C9 FA | 	rdbyte	result1, local02 wz
28468     01 28 06 51 |  if_ne	add	local02, #1
2846c     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28470                 | LR__3481
28470     09 29 82 F1 | 	sub	local02, arg01
28474     14 FB 01 F6 | 	mov	result1, local02
28478     FD 28 0A F6 | 	mov	local02, result1 wz
2847c     AD 01 00 AF 
28480     60 FA 05 A6 |  if_e	mov	result1, ##@LR__5359
28484     74 00 90 AD |  if_e	jmp	#LR__3485
28488     14 2B 02 F6 | 	mov	local03, local02
2848c     01 2A 86 F1 | 	sub	local03, #1
28490                 | LR__3482
28490     15 15 02 F6 | 	mov	arg02, local03
28494     13 15 02 F1 | 	add	arg02, local01
28498     0A 29 C2 FA | 	rdbyte	local02, arg02
2849c     20 28 0E F2 | 	cmp	local02, #32 wz
284a0     44 00 90 AD |  if_e	jmp	#LR__3484
284a4     15 13 02 F6 | 	mov	arg01, local03
284a8     02 12 06 F1 | 	add	arg01, #2
284ac     34 1C B0 FD | 	call	#__system___gc_alloc_managed
284b0     FD 2C 0A F6 | 	mov	local04, result1 wz
284b4     28 00 90 AD |  if_e	jmp	#LR__3483
284b8     15 17 02 F6 | 	mov	arg03, local03
284bc     01 16 06 F1 | 	add	arg03, #1
284c0     16 13 02 F6 | 	mov	arg01, local04
284c4     13 15 02 F6 | 	mov	arg02, local01
284c8     94 D9 BF FD | 	call	#__system____builtin_memmove
284cc     01 2A 06 F1 | 	add	local03, #1
284d0     16 2B 02 F1 | 	add	local03, local04
284d4     15 01 48 FC | 	wrbyte	#0, local03
284d8     16 FB 01 F6 | 	mov	result1, local04
284dc     1C 00 90 FD | 	jmp	#LR__3485
284e0                 | LR__3483
284e0     16 FB 01 F6 | 	mov	result1, local04
284e4     14 00 90 FD | 	jmp	#LR__3485
284e8                 | LR__3484
284e8     01 2A 86 F1 | 	sub	local03, #1
284ec     00 2A 56 F2 | 	cmps	local03, #0 wc
284f0     9C FF 9F 3D |  if_ae	jmp	#LR__3482
284f4     AD 01 00 FF 
284f8     61 FA 05 F6 | 	mov	result1, ##@LR__5360
284fc                 | LR__3485
284fc     A7 F0 03 F6 | 	mov	ptra, fp
28500     B2 00 A0 FD | 	call	#popregs_
28504                 | __system__RTrim_S_ret
28504     2D 00 64 FD | 	ret
28508                 | 
28508                 | __system__Instr
28508     07 4A 05 F6 | 	mov	COUNT_, #7
2850c     A8 00 A0 FD | 	call	#pushregs_
28510     09 27 02 F6 | 	mov	local01, arg01
28514     0A 29 02 F6 | 	mov	local02, arg02
28518     0B 2B 02 F6 | 	mov	local03, arg03
2851c     15 13 02 F6 | 	mov	arg01, local03
28520     09 2D 02 F6 | 	mov	local04, arg01
28524     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
28528                 | LR__3490
28528     16 FB C9 FA | 	rdbyte	result1, local04 wz
2852c     01 2C 06 51 |  if_ne	add	local04, #1
28530     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28534                 | LR__3491
28534     09 2D 82 F1 | 	sub	local04, arg01
28538     16 2F 02 F6 | 	mov	local05, local04
2853c     14 13 02 F6 | 	mov	arg01, local02
28540     09 2D 02 F6 | 	mov	local04, arg01
28544     97 06 48 FB | 	callpa	#(@LR__3493-@LR__3492)>>2,fcache_load_ptr_
28548                 | LR__3492
28548     16 FB C9 FA | 	rdbyte	result1, local04 wz
2854c     01 2C 06 51 |  if_ne	add	local04, #1
28550     F4 FF 9F 5D |  if_ne	jmp	#LR__3492
28554                 | LR__3493
28554     09 2D 82 F1 | 	sub	local04, arg01
28558     16 FB 01 F6 | 	mov	result1, local04
2855c     FD 18 0A F6 | 	mov	arg04, result1 wz
28560     00 FA 05 A6 |  if_e	mov	result1, #0
28564     98 00 90 AD |  if_e	jmp	#LR__3497
28568     00 2E 0E F2 | 	cmp	local05, #0 wz
2856c     00 FA 05 A6 |  if_e	mov	result1, #0
28570     8C 00 90 AD |  if_e	jmp	#LR__3497
28574     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28578     00 FA 05 16 |  if_a	mov	result1, #0
2857c     80 00 90 1D |  if_a	jmp	#LR__3497
28580     01 26 56 F2 | 	cmps	local01, #1 wc
28584     01 26 06 C6 |  if_b	mov	local01, #1
28588     15 31 C2 FA | 	rdbyte	local06, local03
2858c     01 2E 0E F2 | 	cmp	local05, #1 wz
28590     18 00 90 5D |  if_ne	jmp	#LR__3494
28594     14 13 02 F6 | 	mov	arg01, local02
28598     18 15 02 F6 | 	mov	arg02, local06
2859c     13 17 02 F6 | 	mov	arg03, local01
285a0     00 18 06 F6 | 	mov	arg04, #0
285a4     14 37 B0 FD | 	call	#__system____ScanForChar
285a8     54 00 90 FD | 	jmp	#LR__3497
285ac                 | LR__3494
285ac     13 33 02 F6 | 	mov	local07, local01
285b0                 | LR__3495
285b0     14 13 02 F6 | 	mov	arg01, local02
285b4     18 15 02 F6 | 	mov	arg02, local06
285b8     19 17 02 F6 | 	mov	arg03, local07
285bc     00 18 06 F6 | 	mov	arg04, #0
285c0     F8 36 B0 FD | 	call	#__system____ScanForChar
285c4     FD 32 0A F6 | 	mov	local07, result1 wz
285c8     30 00 90 AD |  if_e	jmp	#LR__3496
285cc     17 17 02 F6 | 	mov	arg03, local05
285d0     14 13 02 F6 | 	mov	arg01, local02
285d4     19 15 02 F6 | 	mov	arg02, local07
285d8     FC FA BF FD | 	call	#__system__Mid_S
285dc     FD 12 02 F6 | 	mov	arg01, result1
285e0     15 15 02 F6 | 	mov	arg02, local03
285e4     80 D9 BF FD | 	call	#__system___string_cmp
285e8     00 FA 0D F2 | 	cmp	result1, #0 wz
285ec     19 FB 01 A6 |  if_e	mov	result1, local07
285f0     0C 00 90 AD |  if_e	jmp	#LR__3497
285f4     17 33 02 F1 | 	add	local07, local05
285f8     B4 FF 9F FD | 	jmp	#LR__3495
285fc                 | LR__3496
285fc     00 FA 05 F6 | 	mov	result1, #0
28600                 | LR__3497
28600     A7 F0 03 F6 | 	mov	ptra, fp
28604     B2 00 A0 FD | 	call	#popregs_
28608                 | __system__Instr_ret
28608     2D 00 64 FD | 	ret
2860c                 | 
2860c                 | __system__InstrRev
2860c     07 4A 05 F6 | 	mov	COUNT_, #7
28610     A8 00 A0 FD | 	call	#pushregs_
28614     09 27 02 F6 | 	mov	local01, arg01
28618     0A 29 02 F6 | 	mov	local02, arg02
2861c     0B 2B 02 F6 | 	mov	local03, arg03
28620     15 13 02 F6 | 	mov	arg01, local03
28624     09 2D 02 F6 | 	mov	local04, arg01
28628     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
2862c                 | LR__3500
2862c     16 FB C9 FA | 	rdbyte	result1, local04 wz
28630     01 2C 06 51 |  if_ne	add	local04, #1
28634     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
28638                 | LR__3501
28638     09 2D 82 F1 | 	sub	local04, arg01
2863c     16 2F 02 F6 | 	mov	local05, local04
28640     14 13 02 F6 | 	mov	arg01, local02
28644     09 2D 02 F6 | 	mov	local04, arg01
28648     97 06 48 FB | 	callpa	#(@LR__3503-@LR__3502)>>2,fcache_load_ptr_
2864c                 | LR__3502
2864c     16 FB C9 FA | 	rdbyte	result1, local04 wz
28650     01 2C 06 51 |  if_ne	add	local04, #1
28654     F4 FF 9F 5D |  if_ne	jmp	#LR__3502
28658                 | LR__3503
28658     09 2D 82 F1 | 	sub	local04, arg01
2865c     16 FB 01 F6 | 	mov	result1, local04
28660     FD 18 0A F6 | 	mov	arg04, result1 wz
28664     00 FA 05 A6 |  if_e	mov	result1, #0
28668     98 00 90 AD |  if_e	jmp	#LR__3507
2866c     00 2E 0E F2 | 	cmp	local05, #0 wz
28670     00 FA 05 A6 |  if_e	mov	result1, #0
28674     8C 00 90 AD |  if_e	jmp	#LR__3507
28678     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2867c     0C 27 02 16 |  if_a	mov	local01, arg04
28680     01 26 56 F2 | 	cmps	local01, #1 wc
28684     01 26 06 C6 |  if_b	mov	local01, #1
28688     15 31 C2 FA | 	rdbyte	local06, local03
2868c     01 2E 0E F2 | 	cmp	local05, #1 wz
28690     18 00 90 5D |  if_ne	jmp	#LR__3504
28694     14 13 02 F6 | 	mov	arg01, local02
28698     18 15 02 F6 | 	mov	arg02, local06
2869c     13 17 02 F6 | 	mov	arg03, local01
286a0     01 18 06 F6 | 	mov	arg04, #1
286a4     14 36 B0 FD | 	call	#__system____ScanForChar
286a8     58 00 90 FD | 	jmp	#LR__3507
286ac                 | LR__3504
286ac     17 33 02 F6 | 	mov	local07, local05
286b0     01 32 86 F1 | 	sub	local07, #1
286b4                 | LR__3505
286b4     14 13 02 F6 | 	mov	arg01, local02
286b8     18 15 02 F6 | 	mov	arg02, local06
286bc     19 17 02 F6 | 	mov	arg03, local07
286c0     01 18 06 F6 | 	mov	arg04, #1
286c4     F4 35 B0 FD | 	call	#__system____ScanForChar
286c8     FD 32 0A F6 | 	mov	local07, result1 wz
286cc     30 00 90 AD |  if_e	jmp	#LR__3506
286d0     17 17 02 F6 | 	mov	arg03, local05
286d4     14 13 02 F6 | 	mov	arg01, local02
286d8     19 15 02 F6 | 	mov	arg02, local07
286dc     F8 F9 BF FD | 	call	#__system__Mid_S
286e0     FD 12 02 F6 | 	mov	arg01, result1
286e4     15 15 02 F6 | 	mov	arg02, local03
286e8     7C D8 BF FD | 	call	#__system___string_cmp
286ec     00 FA 0D F2 | 	cmp	result1, #0 wz
286f0     19 FB 01 A6 |  if_e	mov	result1, local07
286f4     0C 00 90 AD |  if_e	jmp	#LR__3507
286f8     17 33 82 F1 | 	sub	local07, local05
286fc     B4 FF 9F FD | 	jmp	#LR__3505
28700                 | LR__3506
28700     00 FA 05 F6 | 	mov	result1, #0
28704                 | LR__3507
28704     A7 F0 03 F6 | 	mov	ptra, fp
28708     B2 00 A0 FD | 	call	#popregs_
2870c                 | __system__InstrRev_ret
2870c     2D 00 64 FD | 	ret
28710                 | 
28710                 | __system___remove
28710     06 4A 05 F6 | 	mov	COUNT_, #6
28714     A8 00 A0 FD | 	call	#pushregs_
28718     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2871c     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28720     09 15 02 F6 | 	mov	arg02, arg01
28724     13 13 02 F6 | 	mov	arg01, local01
28728     00 16 06 F6 | 	mov	arg03, #0
2872c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28730     A4 DF BF FD | 	call	#__system____getvfsforfile
28734     FD 28 0A F6 | 	mov	local02, result1 wz
28738     10 00 90 AD |  if_e	jmp	#LR__3510
2873c     20 28 06 F1 | 	add	local02, #32
28740     14 13 0A FB | 	rdlong	arg01, local02 wz
28744     20 28 86 F1 | 	sub	local02, #32
28748     14 00 90 5D |  if_ne	jmp	#LR__3511
2874c                 | LR__3510
2874c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28750     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28754     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28758     01 FA 65 F6 | 	neg	result1, #1
2875c     A8 00 90 FD | 	jmp	#LR__3514
28760                 | LR__3511
28760     40 28 06 F1 | 	add	local02, #64
28764     14 2B 02 FB | 	rdlong	local03, local02
28768     15 2D 02 F6 | 	mov	local04, local03
2876c     40 28 86 F1 | 	sub	local02, #64
28770     13 2C 46 F7 | 	zerox	local04, #19
28774     14 2A 46 F0 | 	shr	local03, #20
28778     02 2A 66 F0 | 	shl	local03, #2
2877c     ED 2A 02 F1 | 	add	local03, __methods__
28780     15 2B 02 FB | 	rdlong	local03, local03
28784     13 13 02 F6 | 	mov	arg01, local01
28788     F2 2E 02 F6 | 	mov	local05, objptr
2878c     16 E5 01 F6 | 	mov	objptr, local04
28790     2D 2A 62 FD | 	call	local03
28794     17 E5 01 F6 | 	mov	objptr, local05
28798     FD 30 02 F6 | 	mov	local06, result1
2879c     FF FF 7F FF 
287a0     F2 31 0E F2 | 	cmp	local06, ##-14 wz
287a4     38 00 90 5D |  if_ne	jmp	#LR__3512
287a8     3C 28 06 F1 | 	add	local02, #60
287ac     14 31 02 FB | 	rdlong	local06, local02
287b0     18 2B 02 F6 | 	mov	local03, local06
287b4     13 30 46 F7 | 	zerox	local06, #19
287b8     14 2A 46 F0 | 	shr	local03, #20
287bc     02 2A 66 F0 | 	shl	local03, #2
287c0     ED 2A 02 F1 | 	add	local03, __methods__
287c4     15 2B 02 FB | 	rdlong	local03, local03
287c8     13 13 02 F6 | 	mov	arg01, local01
287cc     F2 2E 02 F6 | 	mov	local05, objptr
287d0     18 E5 01 F6 | 	mov	objptr, local06
287d4     2D 2A 62 FD | 	call	local03
287d8     17 E5 01 F6 | 	mov	objptr, local05
287dc     FD 30 02 F6 | 	mov	local06, result1
287e0                 | LR__3512
287e0     00 30 0E F2 | 	cmp	local06, #0 wz
287e4     1C 00 90 AD |  if_e	jmp	#LR__3513
287e8     18 13 6A F6 | 	neg	arg01, local06 wz
287ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
287f0     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
287f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
287f8     01 FA 65 56 |  if_ne	neg	result1, #1
287fc     00 FA 05 A6 |  if_e	mov	result1, #0
28800     04 00 90 FD | 	jmp	#LR__3514
28804                 | LR__3513
28804     00 FA 05 F6 | 	mov	result1, #0
28808                 | LR__3514
28808     A7 F0 03 F6 | 	mov	ptra, fp
2880c     B2 00 A0 FD | 	call	#popregs_
28810                 | __system___remove_ret
28810     2D 00 64 FD | 	ret
28814                 | 
28814                 | __system___mkdir
28814     05 4A 05 F6 | 	mov	COUNT_, #5
28818     A8 00 A0 FD | 	call	#pushregs_
2881c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
28820     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
28824     09 15 02 F6 | 	mov	arg02, arg01
28828     13 13 02 F6 | 	mov	arg01, local01
2882c     00 16 06 F6 | 	mov	arg03, #0
28830     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
28834     A0 DE BF FD | 	call	#__system____getvfsforfile
28838     FD 28 0A F6 | 	mov	local02, result1 wz
2883c     10 00 90 AD |  if_e	jmp	#LR__3520
28840     20 28 06 F1 | 	add	local02, #32
28844     14 15 0A FB | 	rdlong	arg02, local02 wz
28848     20 28 86 F1 | 	sub	local02, #32
2884c     14 00 90 5D |  if_ne	jmp	#LR__3521
28850                 | LR__3520
28850     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28854     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
28858     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2885c     01 FA 65 F6 | 	neg	result1, #1
28860     60 00 90 FD | 	jmp	#LR__3523
28864                 | LR__3521
28864     38 28 06 F1 | 	add	local02, #56
28868     14 2B 02 FB | 	rdlong	local03, local02
2886c     15 2D 02 F6 | 	mov	local04, local03
28870     13 2A 46 F7 | 	zerox	local03, #19
28874     14 2C 46 F0 | 	shr	local04, #20
28878     02 2C 66 F0 | 	shl	local04, #2
2887c     ED 2C 02 F1 | 	add	local04, __methods__
28880     16 2D 02 FB | 	rdlong	local04, local04
28884     13 13 02 F6 | 	mov	arg01, local01
28888     FF 15 06 F6 | 	mov	arg02, #511
2888c     F2 2E 02 F6 | 	mov	local05, objptr
28890     15 E5 01 F6 | 	mov	objptr, local03
28894     2D 2C 62 FD | 	call	local04
28898     17 E5 01 F6 | 	mov	objptr, local05
2889c     FD 12 0A F6 | 	mov	arg01, result1 wz
288a0     1C 00 90 AD |  if_e	jmp	#LR__3522
288a4     09 13 6A F6 | 	neg	arg01, arg01 wz
288a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
288ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
288b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
288b4     01 FA 65 56 |  if_ne	neg	result1, #1
288b8     00 FA 05 A6 |  if_e	mov	result1, #0
288bc     04 00 90 FD | 	jmp	#LR__3523
288c0                 | LR__3522
288c0     00 FA 05 F6 | 	mov	result1, #0
288c4                 | LR__3523
288c4     A7 F0 03 F6 | 	mov	ptra, fp
288c8     B2 00 A0 FD | 	call	#popregs_
288cc                 | __system___mkdir_ret
288cc     2D 00 64 FD | 	ret
288d0                 | 
288d0                 | __system___strerror
288d0     00 12 56 F2 | 	cmps	arg01, #0 wc
288d4     08 00 90 CD |  if_b	jmp	#LR__3530
288d8     1A 12 56 F2 | 	cmps	arg01, #26 wc
288dc     04 00 90 CD |  if_b	jmp	#LR__3531
288e0                 | LR__3530
288e0     19 12 06 F6 | 	mov	arg01, #25
288e4                 | LR__3531
288e4     02 12 66 F0 | 	shl	arg01, #2
288e8     01 00 00 FF 
288ec     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
288f0     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
288f4     09 FB 01 FB | 	rdlong	result1, arg01
288f8     01 00 00 FF 
288fc     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
28900                 | __system___strerror_ret
28900     2D 00 64 FD | 	ret
28904                 | 
28904                 | __system___int64_shl
28904     20 16 CE F7 | 	test	arg03, #32 wz
28908     09 15 02 56 |  if_ne	mov	arg02, arg01
2890c     00 12 06 56 |  if_ne	mov	arg01, #0
28910     1F 16 CE F7 | 	test	arg03, #31 wz
28914     18 00 90 AD |  if_e	jmp	#LR__3540
28918     0B 15 62 F0 | 	shl	arg02, arg03
2891c     09 FB 01 F6 | 	mov	result1, arg01
28920     0B FD 61 F6 | 	neg	result2, arg03
28924     FE FA 41 F0 | 	shr	result1, result2
28928     FD 14 42 F5 | 	or	arg02, result1
2892c     0B 13 62 F0 | 	shl	arg01, arg03
28930                 | LR__3540
28930     0A FD 01 F6 | 	mov	result2, arg02
28934     09 FB 01 F6 | 	mov	result1, arg01
28938                 | __system___int64_shl_ret
28938     2D 00 64 FD | 	ret
2893c                 | 
2893c                 | __system___usepins
2893c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28940     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
28944     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
28948     00 13 CA F7 | 	test	arg01, _var01 wz
2894c     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
28950     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
28954     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
28958     01 15 CA A7 |  if_e	test	arg02, _var02 wz
2895c     00 FA 05 56 |  if_ne	mov	result1, #0
28960     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
28964     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28968     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2896c     09 03 42 F5 | 	or	_var02, arg01
28970     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28974     04 E6 05 F1 | 	add	ptr___system__dat__, #4
28978     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
2897c     0A 03 42 F5 | 	or	_var02, arg02
28980     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
28984     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
28988     01 FA 65 F6 | 	neg	result1, #1
2898c                 | __system___usepins_ret
2898c     2D 00 64 FD | 	ret
28990                 | 
28990                 | __system___freepins
28990     14 E6 05 F1 | 	add	ptr___system__dat__, #20
28994     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
28998     09 01 22 F5 | 	andn	_var01, arg01
2899c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
289a0     04 E6 05 F1 | 	add	ptr___system__dat__, #4
289a4     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
289a8     0A 01 22 F5 | 	andn	_var01, arg02
289ac     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
289b0     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
289b4                 | __system___freepins_ret
289b4     2D 00 64 FD | 	ret
289b8                 | 
289b8                 | __system___float_fromuns
289b8     09 17 0A F6 | 	mov	arg03, arg01 wz
289bc     0B FB 01 A6 |  if_e	mov	result1, arg03
289c0     24 00 90 AD |  if_e	jmp	#LR__3550
289c4     0B 15 92 F7 | 	encod	arg02, arg03 wc
289c8     01 14 06 C1 |  if_b	add	arg02, #1
289cc     01 14 86 F1 | 	sub	arg02, #1
289d0     1F 12 06 F6 | 	mov	arg01, #31
289d4     0A 13 82 F1 | 	sub	arg01, arg02
289d8     09 17 62 F0 | 	shl	arg03, arg01
289dc     02 16 46 F0 | 	shr	arg03, #2
289e0     00 12 06 F6 | 	mov	arg01, #0
289e4     4C 09 B0 FD | 	call	#__system___float_Pack
289e8                 | LR__3550
289e8                 | __system___float_fromuns_ret
289e8     2D 00 64 FD | 	ret
289ec                 | 
289ec                 | __system___float_add
289ec     0F 4A 05 F6 | 	mov	COUNT_, #15
289f0     A8 00 A0 FD | 	call	#pushregs_
289f4     09 27 02 F6 | 	mov	local01, arg01
289f8     0A 29 02 F6 | 	mov	local02, arg02
289fc     00 2A 06 F6 | 	mov	local03, #0
28a00     13 2D 02 F6 | 	mov	local04, local01
28a04     16 2F 02 F6 | 	mov	local05, local04
28a08     16 2E 46 F7 | 	zerox	local05, #22
28a0c     16 31 02 F6 | 	mov	local06, local04
28a10     01 30 66 F0 | 	shl	local06, #1
28a14     18 30 46 F0 | 	shr	local06, #24
28a18     1F 2C 46 F0 | 	shr	local04, #31
28a1c     14 13 02 F6 | 	mov	arg01, local02
28a20     09 FB 01 F6 | 	mov	result1, arg01
28a24     FD 32 02 F6 | 	mov	local07, result1
28a28     19 35 02 F6 | 	mov	local08, local07
28a2c     16 34 46 F7 | 	zerox	local08, #22
28a30     19 37 02 F6 | 	mov	local09, local07
28a34     01 36 66 F0 | 	shl	local09, #1
28a38     18 36 46 F0 | 	shr	local09, #24
28a3c     1B 39 02 F6 | 	mov	local10, local09
28a40     1F 32 46 F0 | 	shr	local07, #31
28a44     00 3A 06 F6 | 	mov	local11, #0
28a48     00 3C 06 F6 | 	mov	local12, #0
28a4c     1C 31 12 F2 | 	cmp	local06, local10 wc
28a50     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
28a54     2C 00 90 1D |  if_a	jmp	#LR__3560
28a58     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
28a5c     24 00 90 3D |  if_ae	jmp	#LR__3560
28a60     17 3F 02 F6 | 	mov	local13, local05
28a64     1A 2F 02 F6 | 	mov	local05, local08
28a68     1F 35 02 F6 | 	mov	local08, local13
28a6c     18 3F 02 F6 | 	mov	local13, local06
28a70     1C 31 02 F6 | 	mov	local06, local10
28a74     1F 39 02 F6 | 	mov	local10, local13
28a78     16 3F 02 F6 | 	mov	local13, local04
28a7c     19 2D 02 F6 | 	mov	local04, local07
28a80     1F 33 02 F6 | 	mov	local07, local13
28a84                 | LR__3560
28a84     FF 30 0E F2 | 	cmp	local06, #255 wz
28a88     70 01 90 AD |  if_e	jmp	#LR__3575
28a8c     00 30 0E F2 | 	cmp	local06, #0 wz
28a90     AC 01 90 AD |  if_e	jmp	#LR__3577
28a94     17 2E 26 F4 | 	bith	local05, #23
28a98                 | LR__3561
28a98     00 38 0E F2 | 	cmp	local10, #0 wz
28a9c     F0 01 90 AD |  if_e	jmp	#LR__3581
28aa0     17 34 26 F4 | 	bith	local08, #23
28aa4                 | LR__3562
28aa4     7F 30 86 F1 | 	sub	local06, #127
28aa8     7F 38 86 F1 | 	sub	local10, #127
28aac     18 41 02 F6 | 	mov	local14, local06
28ab0     1C 41 82 F1 | 	sub	local14, local10
28ab4     97 14 48 FB | 	callpa	#(@LR__3564-@LR__3563)>>2,fcache_load_ptr_
28ab8                 | LR__3563
28ab8     20 40 56 F2 | 	cmps	local14, #32 wc
28abc     20 00 90 CD |  if_b	jmp	#LR__3565
28ac0     1A 37 02 F6 | 	mov	local09, local08
28ac4     00 3A 0E F2 | 	cmp	local11, #0 wz
28ac8     6F 3A 62 FD | 	wrnz	local11
28acc     1D 37 42 F5 | 	or	local09, local11
28ad0     1B 3B 02 F6 | 	mov	local11, local09
28ad4     00 34 06 F6 | 	mov	local08, #0
28ad8     20 40 86 F1 | 	sub	local14, #32
28adc     D8 FF 9F FD | 	jmp	#LR__3563
28ae0                 | LR__3564
28ae0                 | LR__3565
28ae0     00 40 0E F2 | 	cmp	local14, #0 wz
28ae4     38 00 90 AD |  if_e	jmp	#LR__3566
28ae8     1A 3F 02 F6 | 	mov	local13, local08
28aec     20 38 06 F6 | 	mov	local10, #32
28af0     20 39 82 F1 | 	sub	local10, local14
28af4     1C 3F 62 F0 | 	shl	local13, local10
28af8     1D 39 02 F6 | 	mov	local10, local11
28afc     20 36 06 F6 | 	mov	local09, #32
28b00     20 37 82 F1 | 	sub	local09, local14
28b04     1B 39 6A F0 | 	shl	local10, local09 wz
28b08     20 3B 42 F0 | 	shr	local11, local14
28b0c     20 35 42 F0 | 	shr	local08, local14
28b10     1F 3B 42 F5 | 	or	local11, local13
28b14     00 42 06 F6 | 	mov	local15, #0
28b18     01 42 06 56 |  if_ne	mov	local15, #1
28b1c     21 3B 42 F5 | 	or	local11, local15
28b20                 | LR__3566
28b20     16 43 02 F6 | 	mov	local15, local04
28b24     19 43 62 F5 | 	xor	local15, local07
28b28     01 42 CE F7 | 	test	local15, #1 wz
28b2c     18 00 90 AD |  if_e	jmp	#LR__3567
28b30     1A 35 22 F6 | 	not	local08, local08
28b34     1D 3B 22 F6 | 	not	local11, local11
28b38     01 3A 0E F1 | 	add	local11, #1 wz
28b3c     00 42 06 F6 | 	mov	local15, #0
28b40     01 42 06 A6 |  if_e	mov	local15, #1
28b44     21 35 02 F1 | 	add	local08, local15
28b48                 | LR__3567
28b48     1D 3D 12 F1 | 	add	local12, local11 wc
28b4c     1A 2F 22 F1 | 	addx	local05, local08
28b50     00 2E 56 F2 | 	cmps	local05, #0 wc
28b54     1C 00 90 3D |  if_ae	jmp	#LR__3568
28b58     01 2C 66 F5 | 	xor	local04, #1
28b5c     17 2F 22 F6 | 	not	local05, local05
28b60     1E 3D 22 F6 | 	not	local12, local12
28b64     01 3C 0E F1 | 	add	local12, #1 wz
28b68     00 42 06 F6 | 	mov	local15, #0
28b6c     01 42 06 A6 |  if_e	mov	local15, #1
28b70     21 2F 02 F1 | 	add	local05, local15
28b74                 | LR__3568
28b74     00 80 00 FF 
28b78     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
28b7c     28 00 90 CD |  if_b	jmp	#LR__3569
28b80     01 30 06 F1 | 	add	local06, #1
28b84     1E 41 02 F6 | 	mov	local14, local12
28b88     01 40 06 F5 | 	and	local14, #1
28b8c     01 3C 46 F0 | 	shr	local12, #1
28b90     17 43 02 F6 | 	mov	local15, local05
28b94     1F 42 66 F0 | 	shl	local15, #31
28b98     21 3D 42 F5 | 	or	local12, local15
28b9c     20 3D 42 F5 | 	or	local12, local14
28ba0     01 2E 46 F0 | 	shr	local05, #1
28ba4     3C 00 90 FD | 	jmp	#LR__3574
28ba8                 | LR__3569
28ba8     00 40 00 FF 
28bac     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28bb0     30 00 90 3D |  if_ae	jmp	#LR__3573
28bb4     00 2E 0E F2 | 	cmp	local05, #0 wz
28bb8     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
28bbc     08 2C 46 A5 |  if_e	or	local04, #8
28bc0     01 2C 26 A5 |  if_e	andn	local04, #1
28bc4     1C 00 90 AD |  if_e	jmp	#LR__3572
28bc8                 | LR__3570
28bc8     00 40 00 FF 
28bcc     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28bd0     10 00 90 3D |  if_ae	jmp	#LR__3571
28bd4     1E 3D 12 F1 | 	add	local12, local12 wc
28bd8     17 2F 22 F1 | 	addx	local05, local05
28bdc     01 30 86 F1 | 	sub	local06, #1
28be0     E4 FF 9F FD | 	jmp	#LR__3570
28be4                 | LR__3571
28be4                 | LR__3572
28be4                 | LR__3573
28be4                 | LR__3574
28be4     17 13 02 F6 | 	mov	arg01, local05
28be8     1E 15 02 F6 | 	mov	arg02, local12
28bec     18 17 02 F6 | 	mov	arg03, local06
28bf0     16 19 02 F6 | 	mov	arg04, local04
28bf4     08 35 B0 FD | 	call	#__system__pack_0675
28bf8     DC 00 90 FD | 	jmp	#LR__3585
28bfc                 | LR__3575
28bfc     FF 38 0E F2 | 	cmp	local10, #255 wz
28c00     10 00 90 5D |  if_ne	jmp	#LR__3576
28c04     16 33 0A F2 | 	cmp	local07, local04 wz
28c08     00 F8 3F 5F 
28c0c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28c10     C4 00 90 5D |  if_ne	jmp	#LR__3585
28c14                 | LR__3576
28c14     00 2E 0E F2 | 	cmp	local05, #0 wz
28c18     00 F8 3F 5F 
28c1c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28c20     B4 00 90 5D |  if_ne	jmp	#LR__3585
28c24     1E 15 02 F6 | 	mov	arg02, local12
28c28     18 17 02 F6 | 	mov	arg03, local06
28c2c     16 19 02 F6 | 	mov	arg04, local04
28c30     02 18 46 F5 | 	or	arg04, #2
28c34     17 13 02 F6 | 	mov	arg01, local05
28c38     C4 34 B0 FD | 	call	#__system__pack_0675
28c3c     98 00 90 FD | 	jmp	#LR__3585
28c40                 | LR__3577
28c40     00 2E 0E F2 | 	cmp	local05, #0 wz
28c44     28 00 90 AD |  if_e	jmp	#LR__3580
28c48     01 2E 66 F0 | 	shl	local05, #1
28c4c     97 0E 48 FB | 	callpa	#(@LR__3579-@LR__3578)>>2,fcache_load_ptr_
28c50                 | LR__3578
28c50     00 40 00 FF 
28c54     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
28c58     18 43 02 C6 |  if_b	mov	local15, local06
28c5c     01 42 86 C1 |  if_b	sub	local15, #1
28c60     21 31 02 C6 |  if_b	mov	local06, local15
28c64     01 2E 66 C0 |  if_b	shl	local05, #1
28c68     E4 FF 9F CD |  if_b	jmp	#LR__3578
28c6c                 | LR__3579
28c6c     28 FE 9F FD | 	jmp	#LR__3561
28c70                 | LR__3580
28c70     19 2D 02 F5 | 	and	local04, local07
28c74     16 19 02 F6 | 	mov	arg04, local04
28c78     08 18 46 F5 | 	or	arg04, #8
28c7c     00 12 06 F6 | 	mov	arg01, #0
28c80     00 14 06 F6 | 	mov	arg02, #0
28c84     00 16 06 F6 | 	mov	arg03, #0
28c88     74 34 B0 FD | 	call	#__system__pack_0675
28c8c     48 00 90 FD | 	jmp	#LR__3585
28c90                 | LR__3581
28c90     00 34 0E F2 | 	cmp	local08, #0 wz
28c94     28 00 90 AD |  if_e	jmp	#LR__3584
28c98     01 34 66 F0 | 	shl	local08, #1
28c9c     97 0E 48 FB | 	callpa	#(@LR__3583-@LR__3582)>>2,fcache_load_ptr_
28ca0                 | LR__3582
28ca0     00 40 00 FF 
28ca4     00 34 16 F2 | 	cmp	local08, ##8388608 wc
28ca8     1C 43 02 C6 |  if_b	mov	local15, local10
28cac     01 42 86 C1 |  if_b	sub	local15, #1
28cb0     21 39 02 C6 |  if_b	mov	local10, local15
28cb4     01 34 66 C0 |  if_b	shl	local08, #1
28cb8     E4 FF 9F CD |  if_b	jmp	#LR__3582
28cbc                 | LR__3583
28cbc     E4 FD 9F FD | 	jmp	#LR__3562
28cc0                 | LR__3584
28cc0     7F 30 86 F1 | 	sub	local06, #127
28cc4     17 13 02 F6 | 	mov	arg01, local05
28cc8     1E 15 02 F6 | 	mov	arg02, local12
28ccc     18 17 02 F6 | 	mov	arg03, local06
28cd0     16 19 02 F6 | 	mov	arg04, local04
28cd4     28 34 B0 FD | 	call	#__system__pack_0675
28cd8                 | LR__3585
28cd8     A7 F0 03 F6 | 	mov	ptra, fp
28cdc     B2 00 A0 FD | 	call	#popregs_
28ce0                 | __system___float_add_ret
28ce0     2D 00 64 FD | 	ret
28ce4                 | 
28ce4                 | __system___float_sqrt
28ce4     04 4A 05 F6 | 	mov	COUNT_, #4
28ce8     A8 00 A0 FD | 	call	#pushregs_
28cec     09 27 02 F6 | 	mov	local01, arg01
28cf0     09 FB 01 F6 | 	mov	result1, arg01
28cf4     FD 28 02 F6 | 	mov	local02, result1
28cf8     14 2B 02 F6 | 	mov	local03, local02
28cfc     16 2A 46 F7 | 	zerox	local03, #22
28d00     14 2D 02 F6 | 	mov	local04, local02
28d04     01 2C 66 F0 | 	shl	local04, #1
28d08     18 2C 4E F0 | 	shr	local04, #24 wz
28d0c     1F 28 46 F0 | 	shr	local02, #31
28d10     70 00 90 AD |  if_e	jmp	#LR__3591
28d14     17 2A 26 F4 | 	bith	local03, #23
28d18                 | LR__3590
28d18     00 28 0E F2 | 	cmp	local02, #0 wz
28d1c     00 F8 3F 5F 
28d20     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
28d24     88 00 90 5D |  if_ne	jmp	#LR__3594
28d28     FF 2C 0E F2 | 	cmp	local04, #255 wz
28d2c     13 FB 01 A6 |  if_e	mov	result1, local01
28d30     7C 00 90 AD |  if_e	jmp	#LR__3594
28d34     7F 2C 86 F1 | 	sub	local04, #127
28d38     01 2C CE F7 | 	test	local04, #1 wz
28d3c     01 2A 66 50 |  if_ne	shl	local03, #1
28d40     05 2A 66 F0 | 	shl	local03, #5
28d44     15 01 38 FD | 	qsqrt	#0, local03
28d48     01 2C 86 51 |  if_ne	sub	local04, #1
28d4c     16 2D 52 F6 | 	abs	local04, local04 wc
28d50     01 2C 46 F0 | 	shr	local04, #1
28d54     16 17 82 F6 | 	negc	arg03, local04
28d58     14 19 02 F6 | 	mov	arg04, local02
28d5c     18 12 62 FD | 	getqx	arg01
28d60     09 15 02 F6 | 	mov	arg02, arg01
28d64     19 14 66 F0 | 	shl	arg02, #25
28d68     07 12 46 F0 | 	shr	arg01, #7
28d6c     00 80 00 FF 
28d70     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
28d74     01 16 06 31 |  if_ae	add	arg03, #1
28d78     01 12 46 30 |  if_ae	shr	arg01, #1
28d7c     80 33 B0 FD | 	call	#__system__pack_0675
28d80     2C 00 90 FD | 	jmp	#LR__3594
28d84                 | LR__3591
28d84     00 2A 0E F2 | 	cmp	local03, #0 wz
28d88     13 FB 01 A6 |  if_e	mov	result1, local01
28d8c     20 00 90 AD |  if_e	jmp	#LR__3594
28d90     01 2A 66 F0 | 	shl	local03, #1
28d94     97 0A 48 FB | 	callpa	#(@LR__3593-@LR__3592)>>2,fcache_load_ptr_
28d98                 | LR__3592
28d98     00 40 00 FF 
28d9c     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
28da0     01 2C 86 C1 |  if_b	sub	local04, #1
28da4     01 2A 66 C0 |  if_b	shl	local03, #1
28da8     EC FF 9F CD |  if_b	jmp	#LR__3592
28dac                 | LR__3593
28dac     68 FF 9F FD | 	jmp	#LR__3590
28db0                 | LR__3594
28db0     A7 F0 03 F6 | 	mov	ptra, fp
28db4     B2 00 A0 FD | 	call	#popregs_
28db8                 | __system___float_sqrt_ret
28db8     2D 00 64 FD | 	ret
28dbc                 | 
28dbc                 | __system___float_mul
28dbc     0B 4A 05 F6 | 	mov	COUNT_, #11
28dc0     A8 00 A0 FD | 	call	#pushregs_
28dc4     09 27 02 F6 | 	mov	local01, arg01
28dc8     0A 29 02 F6 | 	mov	local02, arg02
28dcc     13 2B 02 F6 | 	mov	local03, local01
28dd0     15 2D 02 F6 | 	mov	local04, local03
28dd4     16 2C 46 F7 | 	zerox	local04, #22
28dd8     15 2F 02 F6 | 	mov	local05, local03
28ddc     01 2E 66 F0 | 	shl	local05, #1
28de0     18 2E 46 F0 | 	shr	local05, #24
28de4     1F 2A 46 F0 | 	shr	local03, #31
28de8     14 FB 01 F6 | 	mov	result1, local02
28dec     FD 30 02 F6 | 	mov	local06, result1
28df0     18 33 02 F6 | 	mov	local07, local06
28df4     16 32 46 F7 | 	zerox	local07, #22
28df8     18 35 02 F6 | 	mov	local08, local06
28dfc     01 34 66 F0 | 	shl	local08, #1
28e00     18 34 46 F0 | 	shr	local08, #24
28e04     1F 30 46 F0 | 	shr	local06, #31
28e08     18 2B 62 F5 | 	xor	local03, local06
28e0c     FF 2E 0E F2 | 	cmp	local05, #255 wz
28e10     90 00 90 AD |  if_e	jmp	#LR__3603
28e14     FF 34 0E F2 | 	cmp	local08, #255 wz
28e18     D8 00 90 AD |  if_e	jmp	#LR__3605
28e1c     00 2E 0E F2 | 	cmp	local05, #0 wz
28e20     0C 01 90 AD |  if_e	jmp	#LR__3606
28e24     17 2C 26 F4 | 	bith	local04, #23
28e28                 | LR__3600
28e28     00 34 0E F2 | 	cmp	local08, #0 wz
28e2c     44 01 90 AD |  if_e	jmp	#LR__3610
28e30     17 32 26 F4 | 	bith	local07, #23
28e34                 | LR__3601
28e34     16 29 02 F6 | 	mov	local02, local04
28e38     04 28 66 F0 | 	shl	local02, #4
28e3c     19 31 02 F6 | 	mov	local06, local07
28e40     05 30 66 F0 | 	shl	local06, #5
28e44     18 29 02 FD | 	qmul	local02, local06
28e48     1A 2F 02 F1 | 	add	local05, local08
28e4c     FE 2E 86 F1 | 	sub	local05, #254
28e50     17 37 02 F6 | 	mov	local09, local05
28e54     04 2C 66 F0 | 	shl	local04, #4
28e58     05 32 66 F0 | 	shl	local07, #5
28e5c     18 38 62 FD | 	getqx	local10
28e60     19 2D 02 FD | 	qmul	local04, local07
28e64     19 3A 62 FD | 	getqy	local11
28e68     00 80 00 FF 
28e6c     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
28e70     18 00 90 CD |  if_b	jmp	#LR__3602
28e74     01 36 06 F1 | 	add	local09, #1
28e78     01 38 46 F0 | 	shr	local10, #1
28e7c     1D 35 02 F6 | 	mov	local08, local11
28e80     1F 34 66 F0 | 	shl	local08, #31
28e84     1A 39 42 F5 | 	or	local10, local08
28e88     01 3A 46 F0 | 	shr	local11, #1
28e8c                 | LR__3602
28e8c     1D 13 02 F6 | 	mov	arg01, local11
28e90     1C 15 02 F6 | 	mov	arg02, local10
28e94     1B 17 02 F6 | 	mov	arg03, local09
28e98     15 19 02 F6 | 	mov	arg04, local03
28e9c     60 32 B0 FD | 	call	#__system__pack_0675
28ea0     10 01 90 FD | 	jmp	#LR__3614
28ea4                 | LR__3603
28ea4     00 2C 0E F2 | 	cmp	local04, #0 wz
28ea8     13 FB 01 56 |  if_ne	mov	result1, local01
28eac     04 01 90 5D |  if_ne	jmp	#LR__3614
28eb0     FF 34 56 F2 | 	cmps	local08, #255 wc
28eb4     00 34 0E C2 |  if_b	cmp	local08, #0 wz
28eb8     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
28ebc     18 00 90 4D |  if_c_and_nz	jmp	#LR__3604
28ec0     00 F8 3F CF 
28ec4     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
28ec8     E8 00 90 CD |  if_b	jmp	#LR__3614
28ecc     00 32 0E F2 | 	cmp	local07, #0 wz
28ed0     14 FB 01 56 |  if_ne	mov	result1, local02
28ed4     DC 00 90 5D |  if_ne	jmp	#LR__3614
28ed8                 | LR__3604
28ed8     02 2A 46 F5 | 	or	local03, #2
28edc     00 12 06 F6 | 	mov	arg01, #0
28ee0     00 14 06 F6 | 	mov	arg02, #0
28ee4     17 17 02 F6 | 	mov	arg03, local05
28ee8     15 19 02 F6 | 	mov	arg04, local03
28eec     10 32 B0 FD | 	call	#__system__pack_0675
28ef0     C0 00 90 FD | 	jmp	#LR__3614
28ef4                 | LR__3605
28ef4     00 2E 0E F2 | 	cmp	local05, #0 wz
28ef8     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
28efc     00 F8 3F AF 
28f00     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
28f04     AC 00 90 AD |  if_e	jmp	#LR__3614
28f08     00 32 0E F2 | 	cmp	local07, #0 wz
28f0c     14 FB 01 56 |  if_ne	mov	result1, local02
28f10     A0 00 90 5D |  if_ne	jmp	#LR__3614
28f14     1A 17 02 F6 | 	mov	arg03, local08
28f18     15 19 02 F6 | 	mov	arg04, local03
28f1c     02 18 46 F5 | 	or	arg04, #2
28f20     00 12 06 F6 | 	mov	arg01, #0
28f24     00 14 06 F6 | 	mov	arg02, #0
28f28     D4 31 B0 FD | 	call	#__system__pack_0675
28f2c     84 00 90 FD | 	jmp	#LR__3614
28f30                 | LR__3606
28f30     00 2C 0E F2 | 	cmp	local04, #0 wz
28f34     20 00 90 AD |  if_e	jmp	#LR__3609
28f38     01 2C 66 F0 | 	shl	local04, #1
28f3c     97 0A 48 FB | 	callpa	#(@LR__3608-@LR__3607)>>2,fcache_load_ptr_
28f40                 | LR__3607
28f40     00 40 00 FF 
28f44     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
28f48     01 2E 86 C1 |  if_b	sub	local05, #1
28f4c     01 2C 66 C0 |  if_b	shl	local04, #1
28f50     EC FF 9F CD |  if_b	jmp	#LR__3607
28f54                 | LR__3608
28f54     D0 FE 9F FD | 	jmp	#LR__3600
28f58                 | LR__3609
28f58     08 2A 46 F5 | 	or	local03, #8
28f5c     00 12 06 F6 | 	mov	arg01, #0
28f60     00 14 06 F6 | 	mov	arg02, #0
28f64     00 16 06 F6 | 	mov	arg03, #0
28f68     15 19 02 F6 | 	mov	arg04, local03
28f6c     90 31 B0 FD | 	call	#__system__pack_0675
28f70     40 00 90 FD | 	jmp	#LR__3614
28f74                 | LR__3610
28f74     00 32 0E F2 | 	cmp	local07, #0 wz
28f78     20 00 90 AD |  if_e	jmp	#LR__3613
28f7c     01 32 66 F0 | 	shl	local07, #1
28f80     97 0A 48 FB | 	callpa	#(@LR__3612-@LR__3611)>>2,fcache_load_ptr_
28f84                 | LR__3611
28f84     00 40 00 FF 
28f88     00 32 16 F2 | 	cmp	local07, ##8388608 wc
28f8c     01 34 86 C1 |  if_b	sub	local08, #1
28f90     01 32 66 C0 |  if_b	shl	local07, #1
28f94     EC FF 9F CD |  if_b	jmp	#LR__3611
28f98                 | LR__3612
28f98     98 FE 9F FD | 	jmp	#LR__3601
28f9c                 | LR__3613
28f9c     08 2A 46 F5 | 	or	local03, #8
28fa0     00 12 06 F6 | 	mov	arg01, #0
28fa4     00 14 06 F6 | 	mov	arg02, #0
28fa8     00 16 06 F6 | 	mov	arg03, #0
28fac     15 19 02 F6 | 	mov	arg04, local03
28fb0     4C 31 B0 FD | 	call	#__system__pack_0675
28fb4                 | LR__3614
28fb4     A7 F0 03 F6 | 	mov	ptra, fp
28fb8     B2 00 A0 FD | 	call	#popregs_
28fbc                 | __system___float_mul_ret
28fbc     2D 00 64 FD | 	ret
28fc0                 | 
28fc0                 | __system___float_div
28fc0     0E 4A 05 F6 | 	mov	COUNT_, #14
28fc4     A8 00 A0 FD | 	call	#pushregs_
28fc8     09 2B 02 F6 | 	mov	local03, arg01
28fcc     0A 2D 02 F6 | 	mov	local04, arg02
28fd0     15 2F 02 F6 | 	mov	local05, local03
28fd4     17 31 02 F6 | 	mov	local06, local05
28fd8     16 30 46 F7 | 	zerox	local06, #22
28fdc     17 33 02 F6 | 	mov	local07, local05
28fe0     01 32 66 F0 | 	shl	local07, #1
28fe4     18 32 46 F0 | 	shr	local07, #24
28fe8     1F 2E 46 F0 | 	shr	local05, #31
28fec     16 FB 01 F6 | 	mov	result1, local04
28ff0     FD 34 02 F6 | 	mov	local08, result1
28ff4     1A 37 02 F6 | 	mov	local09, local08
28ff8     16 36 46 F7 | 	zerox	local09, #22
28ffc     1A 39 02 F6 | 	mov	local10, local08
29000     01 38 66 F0 | 	shl	local10, #1
29004     18 38 46 F0 | 	shr	local10, #24
29008     1F 34 46 F0 | 	shr	local08, #31
2900c     1A 2F 62 F5 | 	xor	local05, local08
29010     FF 32 0E F2 | 	cmp	local07, #255 wz
29014     D4 00 90 AD |  if_e	jmp	#LR__3625
29018     FF 38 0E F2 | 	cmp	local10, #255 wz
2901c     04 01 90 AD |  if_e	jmp	#LR__3626
29020     00 32 0E F2 | 	cmp	local07, #0 wz
29024     24 01 90 AD |  if_e	jmp	#LR__3627
29028     17 30 26 F4 | 	bith	local06, #23
2902c                 | LR__3620
2902c     00 38 0E F2 | 	cmp	local10, #0 wz
29030     70 01 90 AD |  if_e	jmp	#LR__3631
29034     17 36 26 F4 | 	bith	local09, #23
29038                 | LR__3621
29038     1C 33 82 F1 | 	sub	local07, local10
2903c     19 3B 02 F6 | 	mov	local11, local07
29040     18 13 02 F6 | 	mov	arg01, local06
29044     02 12 46 F0 | 	shr	arg01, #2
29048     1E 30 66 F0 | 	shl	local06, #30
2904c     18 15 02 F6 | 	mov	arg02, local06
29050     1B 17 02 F6 | 	mov	arg03, local09
29054     28 12 62 FD | 	setq	arg01
29058     0B 15 12 FD | 	qdiv	arg02, arg03
2905c     00 3C 06 F6 | 	mov	local12, #0
29060     18 26 62 FD | 	getqx	local01
29064     19 FC 61 FD | 	getqy	result2
29068     FE 28 02 F6 | 	mov	local02, result2
2906c     13 3F 02 F6 | 	mov	local13, local01
29070     00 28 4E F2 | 	cmps	local02, #0 wz
29074     1F 41 02 F6 | 	mov	local14, local13
29078     19 40 66 F0 | 	shl	local14, #25
2907c     01 3C 06 56 |  if_ne	mov	local12, #1
29080     1E 41 42 F5 | 	or	local14, local12
29084     07 3E 46 F0 | 	shr	local13, #7
29088     00 80 00 FF 
2908c     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29090     1C 00 90 CD |  if_b	jmp	#LR__3622
29094     01 3A 06 F1 | 	add	local11, #1
29098     01 40 46 F0 | 	shr	local14, #1
2909c     1F 3D 02 F6 | 	mov	local12, local13
290a0     1F 3C 66 F0 | 	shl	local12, #31
290a4     1E 41 42 F5 | 	or	local14, local12
290a8     01 3E 46 F0 | 	shr	local13, #1
290ac     24 00 90 FD | 	jmp	#LR__3624
290b0                 | LR__3622
290b0     00 40 00 FF 
290b4     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
290b8     18 00 90 3D |  if_ae	jmp	#LR__3623
290bc     01 3A 86 F1 | 	sub	local11, #1
290c0     01 3E 66 F0 | 	shl	local13, #1
290c4     20 3D 02 F6 | 	mov	local12, local14
290c8     1F 3C 46 F0 | 	shr	local12, #31
290cc     1E 3F 42 F5 | 	or	local13, local12
290d0     01 40 66 F0 | 	shl	local14, #1
290d4                 | LR__3623
290d4                 | LR__3624
290d4     1F 13 02 F6 | 	mov	arg01, local13
290d8     20 15 02 F6 | 	mov	arg02, local14
290dc     1D 17 02 F6 | 	mov	arg03, local11
290e0     17 19 02 F6 | 	mov	arg04, local05
290e4     18 30 B0 FD | 	call	#__system__pack_0675
290e8     F8 00 90 FD | 	jmp	#LR__3635
290ec                 | LR__3625
290ec     00 30 0E F2 | 	cmp	local06, #0 wz
290f0     15 FB 01 56 |  if_ne	mov	result1, local03
290f4     EC 00 90 5D |  if_ne	jmp	#LR__3635
290f8     FF 38 0E F2 | 	cmp	local10, #255 wz
290fc     00 F8 3F AF 
29100     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29104     DC 00 90 AD |  if_e	jmp	#LR__3635
29108     02 2E 46 F5 | 	or	local05, #2
2910c     00 12 06 F6 | 	mov	arg01, #0
29110     00 14 06 F6 | 	mov	arg02, #0
29114     19 17 02 F6 | 	mov	arg03, local07
29118     17 19 02 F6 | 	mov	arg04, local05
2911c     E0 2F B0 FD | 	call	#__system__pack_0675
29120     C0 00 90 FD | 	jmp	#LR__3635
29124                 | LR__3626
29124     00 36 0E F2 | 	cmp	local09, #0 wz
29128     16 FB 01 56 |  if_ne	mov	result1, local04
2912c     B4 00 90 5D |  if_ne	jmp	#LR__3635
29130     17 19 02 F6 | 	mov	arg04, local05
29134     08 18 46 F5 | 	or	arg04, #8
29138     00 12 06 F6 | 	mov	arg01, #0
2913c     00 14 06 F6 | 	mov	arg02, #0
29140     00 16 06 F6 | 	mov	arg03, #0
29144     B8 2F B0 FD | 	call	#__system__pack_0675
29148     98 00 90 FD | 	jmp	#LR__3635
2914c                 | LR__3627
2914c     00 30 0E F2 | 	cmp	local06, #0 wz
29150     20 00 90 AD |  if_e	jmp	#LR__3630
29154     01 30 66 F0 | 	shl	local06, #1
29158     97 0A 48 FB | 	callpa	#(@LR__3629-@LR__3628)>>2,fcache_load_ptr_
2915c                 | LR__3628
2915c     00 40 00 FF 
29160     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29164     01 32 86 C1 |  if_b	sub	local07, #1
29168     01 30 66 C0 |  if_b	shl	local06, #1
2916c     EC FF 9F CD |  if_b	jmp	#LR__3628
29170                 | LR__3629
29170     B8 FE 9F FD | 	jmp	#LR__3620
29174                 | LR__3630
29174     00 38 0E F2 | 	cmp	local10, #0 wz
29178     00 36 0E A2 |  if_e	cmp	local09, #0 wz
2917c     00 F8 3F AF 
29180     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29184     5C 00 90 AD |  if_e	jmp	#LR__3635
29188     17 19 02 F6 | 	mov	arg04, local05
2918c     08 18 46 F5 | 	or	arg04, #8
29190     00 12 06 F6 | 	mov	arg01, #0
29194     00 14 06 F6 | 	mov	arg02, #0
29198     00 16 06 F6 | 	mov	arg03, #0
2919c     60 2F B0 FD | 	call	#__system__pack_0675
291a0     40 00 90 FD | 	jmp	#LR__3635
291a4                 | LR__3631
291a4     00 36 0E F2 | 	cmp	local09, #0 wz
291a8     20 00 90 AD |  if_e	jmp	#LR__3634
291ac     01 36 66 F0 | 	shl	local09, #1
291b0     97 0A 48 FB | 	callpa	#(@LR__3633-@LR__3632)>>2,fcache_load_ptr_
291b4                 | LR__3632
291b4     00 40 00 FF 
291b8     00 36 16 F2 | 	cmp	local09, ##8388608 wc
291bc     01 38 86 C1 |  if_b	sub	local10, #1
291c0     01 36 66 C0 |  if_b	shl	local09, #1
291c4     EC FF 9F CD |  if_b	jmp	#LR__3632
291c8                 | LR__3633
291c8     6C FE 9F FD | 	jmp	#LR__3621
291cc                 | LR__3634
291cc     02 2E 46 F5 | 	or	local05, #2
291d0     00 12 06 F6 | 	mov	arg01, #0
291d4     00 14 06 F6 | 	mov	arg02, #0
291d8     00 16 06 F6 | 	mov	arg03, #0
291dc     17 19 02 F6 | 	mov	arg04, local05
291e0     1C 2F B0 FD | 	call	#__system__pack_0675
291e4                 | LR__3635
291e4     A7 F0 03 F6 | 	mov	ptra, fp
291e8     B2 00 A0 FD | 	call	#popregs_
291ec                 | __system___float_div_ret
291ec     2D 00 64 FD | 	ret
291f0                 | 
291f0                 | __system___float_cmp
291f0     00 C0 3F FF 
291f4     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
291f8     00 C0 3F CF 
291fc     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
29200     0B FB 01 36 |  if_ae	mov	result1, arg03
29204     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29208     00 C0 7F FF 
2920c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
29210     00 C0 7F CF 
29214     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
29218     0B FB 01 36 |  if_ae	mov	result1, arg03
2921c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29220     00 12 56 F2 | 	cmps	arg01, #0 wc
29224     2C 00 90 3D |  if_ae	jmp	#LR__3640
29228     00 14 56 F2 | 	cmps	arg02, #0 wc
2922c     0A FB 01 C6 |  if_b	mov	result1, arg02
29230     09 FB 81 C1 |  if_b	sub	result1, arg01
29234     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
29238     00 14 0E F2 | 	cmp	arg02, #0 wz
2923c     00 00 40 AF 
29240     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29244     00 FA 05 A6 |  if_e	mov	result1, #0
29248     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2924c     01 FA 65 F6 | 	neg	result1, #1
29250     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29254                 | LR__3640
29254     00 14 56 F2 | 	cmps	arg02, #0 wc
29258     1C 00 90 3D |  if_ae	jmp	#LR__3641
2925c     00 12 0E F2 | 	cmp	arg01, #0 wz
29260     00 00 40 AF 
29264     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
29268     00 FA 05 A6 |  if_e	mov	result1, #0
2926c     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29270     01 FA 05 F6 | 	mov	result1, #1
29274     08 00 90 FD | 	jmp	#__system___float_cmp_ret
29278                 | LR__3641
29278     0A 13 82 F1 | 	sub	arg01, arg02
2927c     09 FB 01 F6 | 	mov	result1, arg01
29280                 | __system___float_cmp_ret
29280     2D 00 64 FD | 	ret
29284                 | 
29284                 | __system___float_tointeger
29284     02 4A 05 F6 | 	mov	COUNT_, #2
29288     A8 00 A0 FD | 	call	#pushregs_
2928c     50 00 B0 FD | 	call	#__system___float_Unpack
29290     FF FF 7F FF 
29294     FF FD 55 F2 | 	cmps	result2, ##-1 wc
29298     34 00 90 CD |  if_b	jmp	#LR__3650
2929c     1F FC 55 F2 | 	cmps	result2, #31 wc
292a0     2C 00 90 3D |  if_ae	jmp	#LR__3650
292a4     02 FE 65 F0 | 	shl	result3, #2
292a8     1E 26 06 F6 | 	mov	local01, #30
292ac     FE 26 82 F1 | 	sub	local01, result2
292b0     13 FF 41 F0 | 	shr	result3, local01
292b4     FF 28 02 F6 | 	mov	local02, result3
292b8     0A 29 02 F1 | 	add	local02, arg02
292bc     01 28 46 F0 | 	shr	local02, #1
292c0     00 FA 0D F2 | 	cmp	result1, #0 wz
292c4     14 29 62 56 |  if_ne	neg	local02, local02
292c8     14 FB 01 F6 | 	mov	result1, local02
292cc     04 00 90 FD | 	jmp	#LR__3651
292d0                 | LR__3650
292d0     00 FA 05 F6 | 	mov	result1, #0
292d4                 | LR__3651
292d4     A7 F0 03 F6 | 	mov	ptra, fp
292d8     B2 00 A0 FD | 	call	#popregs_
292dc                 | __system___float_tointeger_ret
292dc     2D 00 64 FD | 	ret
292e0                 | 
292e0                 | __system___float_Unpack
292e0     09 01 02 F6 | 	mov	_var01, arg01
292e4     1F 00 46 F0 | 	shr	_var01, #31
292e8     09 03 02 F6 | 	mov	_var02, arg01
292ec     01 02 66 F0 | 	shl	_var02, #1
292f0     18 02 4E F0 | 	shr	_var02, #24 wz
292f4     17 13 06 F4 | 	bitl	arg01, #279
292f8     06 12 66 50 |  if_ne	shl	arg01, #6
292fc     1D 12 26 54 |  if_ne	bith	arg01, #29
29300     1C 00 90 5D |  if_ne	jmp	#LR__3660
29304     09 05 92 F7 | 	encod	_var03, arg01 wc
29308     01 04 06 C1 |  if_b	add	_var03, #1
2930c     17 04 86 F1 | 	sub	_var03, #23
29310     02 03 02 F6 | 	mov	_var02, _var03
29314     07 FC 05 F6 | 	mov	result2, #7
29318     02 FD 81 F1 | 	sub	result2, _var03
2931c     FE 12 62 F0 | 	shl	arg01, result2
29320                 | LR__3660
29320     7F 02 86 F1 | 	sub	_var02, #127
29324     09 FF 01 F6 | 	mov	result3, arg01
29328     00 FB 01 F6 | 	mov	result1, _var01
2932c     01 FD 01 F6 | 	mov	result2, _var02
29330                 | __system___float_Unpack_ret
29330     2D 00 64 FD | 	ret
29334                 | 
29334                 | __system___float_Pack
29334     00 00 06 F6 | 	mov	_var01, #0
29338     00 16 0E F2 | 	cmp	arg03, #0 wz
2933c     8C 00 90 AD |  if_e	jmp	#LR__3671
29340     0B 03 92 F7 | 	encod	_var02, arg03 wc
29344     01 02 06 C1 |  if_b	add	_var02, #1
29348     21 00 06 F6 | 	mov	_var01, #33
2934c     01 01 82 F1 | 	sub	_var01, _var02
29350     00 17 62 F0 | 	shl	arg03, _var01
29354     03 02 06 F6 | 	mov	_var02, #3
29358     00 03 82 F1 | 	sub	_var02, _var01
2935c     01 15 02 F1 | 	add	arg02, _var02
29360     0A 05 02 F6 | 	mov	_var03, arg02
29364     00 17 06 F1 | 	add	arg03, #256
29368     0B 03 02 F6 | 	mov	_var02, arg03
2936c     FF 02 2E F5 | 	andn	_var02, #255 wz
29370     01 04 06 A1 |  if_e	add	_var03, #1
29374     7F 04 06 F1 | 	add	_var03, #127
29378     FF FF 7F FF 
2937c     E9 05 46 F3 | 	fges	_var03, ##-23
29380     FF 04 66 F3 | 	fles	_var03, #255
29384     01 04 56 F2 | 	cmps	_var03, #1 wc
29388     1C 00 90 3D |  if_ae	jmp	#LR__3670
2938c     01 16 46 F0 | 	shr	arg03, #1
29390     1F 02 C6 F9 | 	decod	_var02, #31
29394     0B 03 02 F1 | 	add	_var02, arg03
29398     02 05 62 F6 | 	neg	_var03, _var03
2939c     02 03 42 F0 | 	shr	_var02, _var03
293a0     01 17 02 F6 | 	mov	arg03, _var02
293a4     00 04 06 F6 | 	mov	_var03, #0
293a8                 | LR__3670
293a8     09 FB 01 F6 | 	mov	result1, arg01
293ac     1F FA 65 F0 | 	shl	result1, #31
293b0     02 03 02 F6 | 	mov	_var02, _var03
293b4     17 02 66 F0 | 	shl	_var02, #23
293b8     01 FB 41 F5 | 	or	result1, _var02
293bc     0B 07 02 F6 | 	mov	_var04, arg03
293c0     09 06 46 F0 | 	shr	_var04, #9
293c4     03 FB 41 F5 | 	or	result1, _var04
293c8     04 00 90 FD | 	jmp	#__system___float_Pack_ret
293cc                 | LR__3671
293cc     00 FB 01 F6 | 	mov	result1, _var01
293d0                 | __system___float_Pack_ret
293d0     2D 00 64 FD | 	ret
293d4                 | 
293d4                 | __system___basic_print_float
293d4     05 4A 05 F6 | 	mov	COUNT_, #5
293d8     A8 00 A0 FD | 	call	#pushregs_
293dc     09 27 02 F6 | 	mov	local01, arg01
293e0     0A 29 02 F6 | 	mov	local02, arg02
293e4     0B 2B 0A F6 | 	mov	local03, arg03 wz
293e8     0C 2D 02 F6 | 	mov	local04, arg04
293ec     14 00 90 5D |  if_ne	jmp	#LR__3680
293f0     23 2C 0E F2 | 	cmp	local04, #35 wz
293f4     80 02 10 AF 
293f8     00 2E 06 A6 |  if_e	mov	local05, ##537198592
293fc     1D 2E C6 59 |  if_ne	decod	local05, #29
29400     17 2B 02 F6 | 	mov	local03, local05
29404                 | LR__3680
29404     13 13 02 F6 | 	mov	arg01, local01
29408     28 28 B0 FD | 	call	#__system___gettxfunc
2940c     FD 2E 0A F6 | 	mov	local05, result1 wz
29410     00 FA 05 A6 |  if_e	mov	result1, #0
29414     17 13 02 56 |  if_ne	mov	arg01, local05
29418     15 15 02 56 |  if_ne	mov	arg02, local03
2941c     14 17 02 56 |  if_ne	mov	arg03, local02
29420     16 19 02 56 |  if_ne	mov	arg04, local04
29424     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
29428     A7 F0 03 F6 | 	mov	ptra, fp
2942c     B2 00 A0 FD | 	call	#popregs_
29430                 | __system___basic_print_float_ret
29430     2D 00 64 FD | 	ret
29434                 | 
29434                 | __system____builtin_atoi
29434     07 4A 05 F6 | 	mov	COUNT_, #7
29438     A8 00 A0 FD | 	call	#pushregs_
2943c                 | __system____builtin_atoi_enter
2943c     09 27 02 F6 | 	mov	local01, arg01
29440     0A 29 02 F6 | 	mov	local02, arg02
29444     00 2A 06 F6 | 	mov	local03, #0
29448     00 2C 06 F6 | 	mov	local04, #0
2944c     00 2E 06 F6 | 	mov	local05, #0
29450     97 1C 48 FB | 	callpa	#(@LR__3692-@LR__3690)>>2,fcache_load_ptr_
29454                 | LR__3690
29454     13 31 C2 FA | 	rdbyte	local06, local01
29458     20 30 0E F2 | 	cmp	local06, #32 wz
2945c     01 26 06 A1 |  if_e	add	local01, #1
29460     F0 FF 9F AD |  if_e	jmp	#LR__3690
29464     13 33 C2 FA | 	rdbyte	local07, local01
29468                 | LR__3691
29468     2D 32 0E F2 | 	cmp	local07, #45 wz
2946c     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29470     18 00 90 5D |  if_ne	jmp	#LR__3693
29474     01 26 06 F1 | 	add	local01, #1
29478     2D 32 0E F2 | 	cmp	local07, #45 wz
2947c     01 30 06 A6 |  if_e	mov	local06, #1
29480     18 2F C2 A2 |  if_e	subr	local05, local06
29484     13 33 C2 FA | 	rdbyte	local07, local01
29488     DC FF 9F FD | 	jmp	#LR__3691
2948c                 | LR__3692
2948c                 | LR__3693
2948c     00 28 0E F2 | 	cmp	local02, #0 wz
29490     1C 00 90 5D |  if_ne	jmp	#LR__3695
29494     24 32 0E F2 | 	cmp	local07, #36 wz
29498     10 28 06 A6 |  if_e	mov	local02, #16
2949c     01 26 06 A1 |  if_e	add	local01, #1
294a0     0C 00 90 AD |  if_e	jmp	#LR__3694
294a4     25 32 0E F2 | 	cmp	local07, #37 wz
294a8     02 28 06 A6 |  if_e	mov	local02, #2
294ac     01 26 06 A1 |  if_e	add	local01, #1
294b0                 | LR__3694
294b0                 | LR__3695
294b0     97 48 48 FB | 	callpa	#(@LR__3703-@LR__3696)>>2,fcache_load_ptr_
294b4                 | LR__3696
294b4                 | LR__3697
294b4     13 33 C2 FA | 	rdbyte	local07, local01
294b8     5F 32 0E F2 | 	cmp	local07, #95 wz
294bc     01 26 06 F1 | 	add	local01, #1
294c0     F0 FF 9F AD |  if_e	jmp	#LR__3697
294c4     30 32 0E F2 | 	cmp	local07, #48 wz
294c8     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
294cc     00 2C 06 A6 |  if_e	mov	local04, #0
294d0     60 00 90 AD |  if_e	jmp	#LR__3702
294d4     31 32 56 F2 | 	cmps	local07, #49 wc
294d8     18 00 90 CD |  if_b	jmp	#LR__3698
294dc     3A 32 56 F2 | 	cmps	local07, #58 wc
294e0     19 2D 02 C6 |  if_b	mov	local04, local07
294e4     30 2C 86 C1 |  if_b	sub	local04, #48
294e8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
294ec     0A 28 06 86 |  if_c_and_z	mov	local02, #10
294f0     40 00 90 CD |  if_b	jmp	#LR__3701
294f4                 | LR__3698
294f4     0B 28 56 F2 | 	cmps	local02, #11 wc
294f8     61 32 56 32 |  if_ae	cmps	local07, #97 wc
294fc     14 00 90 CD |  if_b	jmp	#LR__3699
29500     67 32 56 F2 | 	cmps	local07, #103 wc
29504     61 32 86 C1 |  if_b	sub	local07, #97
29508     0A 2C 06 C6 |  if_b	mov	local04, #10
2950c     19 2D 02 C1 |  if_b	add	local04, local07
29510     20 00 90 CD |  if_b	jmp	#LR__3700
29514                 | LR__3699
29514     0B 28 56 F2 | 	cmps	local02, #11 wc
29518     41 32 56 32 |  if_ae	cmps	local07, #65 wc
2951c     24 00 90 CD |  if_b	jmp	#LR__3704
29520     47 32 56 F2 | 	cmps	local07, #71 wc
29524     41 32 86 C1 |  if_b	sub	local07, #65
29528     0A 2C 06 C6 |  if_b	mov	local04, #10
2952c     19 2D 02 C1 |  if_b	add	local04, local07
29530     10 00 90 3D |  if_ae	jmp	#LR__3704
29534                 | LR__3700
29534                 | LR__3701
29534                 | LR__3702
29534     15 29 02 FD | 	qmul	local02, local03
29538     18 2A 62 FD | 	getqx	local03
2953c     16 2B 02 F1 | 	add	local03, local04
29540     70 FF 9F FD | 	jmp	#LR__3696
29544                 | LR__3703
29544                 | LR__3704
29544     00 28 0E F2 | 	cmp	local02, #0 wz
29548     64 00 90 5D |  if_ne	jmp	#LR__3710
2954c     78 32 0E F2 | 	cmp	local07, #120 wz
29550     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29554     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
29558     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
2955c     14 00 90 5D |  if_ne	jmp	#LR__3705
29560     13 13 02 F6 | 	mov	arg01, local01
29564     10 14 06 F6 | 	mov	arg02, #16
29568     C8 FE BF FD | 	call	#__system____builtin_atoi
2956c     FD 2A 02 F6 | 	mov	local03, result1
29570     3C 00 90 FD | 	jmp	#LR__3709
29574                 | LR__3705
29574     62 32 0E F2 | 	cmp	local07, #98 wz
29578     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
2957c     14 00 90 5D |  if_ne	jmp	#LR__3706
29580     13 13 02 F6 | 	mov	arg01, local01
29584     02 14 06 F6 | 	mov	arg02, #2
29588     A8 FE BF FD | 	call	#__system____builtin_atoi
2958c     FD 2A 02 F6 | 	mov	local03, result1
29590     1C 00 90 FD | 	jmp	#LR__3708
29594                 | LR__3706
29594     6F 32 0E F2 | 	cmp	local07, #111 wz
29598     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
2959c     10 00 90 5D |  if_ne	jmp	#LR__3707
295a0     13 13 02 F6 | 	mov	arg01, local01
295a4     08 14 06 F6 | 	mov	arg02, #8
295a8     88 FE BF FD | 	call	#__system____builtin_atoi
295ac     FD 2A 02 F6 | 	mov	local03, result1
295b0                 | LR__3707
295b0                 | LR__3708
295b0                 | LR__3709
295b0                 | LR__3710
295b0     00 2E 0E F2 | 	cmp	local05, #0 wz
295b4     15 2B 62 56 |  if_ne	neg	local03, local03
295b8     15 FB 01 F6 | 	mov	result1, local03
295bc     A7 F0 03 F6 | 	mov	ptra, fp
295c0     B2 00 A0 FD | 	call	#popregs_
295c4                 | __system____builtin_atoi_ret
295c4     2D 00 64 FD | 	ret
295c8                 | 
295c8                 | __system____builtin_atof
295c8     07 4A 05 F6 | 	mov	COUNT_, #7
295cc     A8 00 A0 FD | 	call	#pushregs_
295d0     09 27 02 F6 | 	mov	local01, arg01
295d4     00 28 06 F6 | 	mov	local02, #0
295d8     00 2A 06 F6 | 	mov	local03, #0
295dc     00 2C 06 F6 | 	mov	local04, #0
295e0     00 2E 06 F6 | 	mov	local05, #0
295e4     97 08 48 FB | 	callpa	#(@LR__3721-@LR__3720)>>2,fcache_load_ptr_
295e8                 | LR__3720
295e8     13 17 C2 FA | 	rdbyte	arg03, local01
295ec     20 16 0E F2 | 	cmp	arg03, #32 wz
295f0     01 26 06 A1 |  if_e	add	local01, #1
295f4     F0 FF 9F AD |  if_e	jmp	#LR__3720
295f8                 | LR__3721
295f8     13 31 C2 FA | 	rdbyte	local06, local01
295fc                 | LR__3722
295fc     2B 30 0E F2 | 	cmp	local06, #43 wz
29600     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29604     14 00 90 5D |  if_ne	jmp	#LR__3723
29608     2D 30 0E F2 | 	cmp	local06, #45 wz
2960c     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29610     01 26 06 F1 | 	add	local01, #1
29614     13 31 C2 FA | 	rdbyte	local06, local01
29618     E0 FF 9F FD | 	jmp	#LR__3722
2961c                 | LR__3723
2961c                 | LR__3724
2961c     97 08 48 FB | 	callpa	#(@LR__3726-@LR__3725)>>2,fcache_load_ptr_
29620                 | LR__3725
29620     13 31 C2 FA | 	rdbyte	local06, local01
29624     5F 30 0E F2 | 	cmp	local06, #95 wz
29628     01 26 06 F1 | 	add	local01, #1
2962c     F0 FF 9F AD |  if_e	jmp	#LR__3725
29630                 | LR__3726
29630     00 30 0E F2 | 	cmp	local06, #0 wz
29634     5C 00 90 AD |  if_e	jmp	#LR__3728
29638     30 30 56 F2 | 	cmps	local06, #48 wc
2963c     44 00 90 CD |  if_b	jmp	#LR__3727
29640     3A 30 56 F2 | 	cmps	local06, #58 wc
29644     3C 00 90 3D |  if_ae	jmp	#LR__3727
29648     14 13 02 F6 | 	mov	arg01, local02
2964c     00 90 20 FF 
29650     00 14 06 F6 | 	mov	arg02, ##1092616192
29654     64 F7 BF FD | 	call	#__system___float_mul
29658     FD 28 02 F6 | 	mov	local02, result1
2965c     30 30 86 F1 | 	sub	local06, #48
29660     18 13 02 F6 | 	mov	arg01, local06
29664     50 F3 BF FD | 	call	#__system___float_fromuns
29668     FD 14 02 F6 | 	mov	arg02, result1
2966c     14 13 02 F6 | 	mov	arg01, local02
29670     78 F3 BF FD | 	call	#__system___float_add
29674     FD 28 02 F6 | 	mov	local02, result1
29678     00 2E 0E F2 | 	cmp	local05, #0 wz
2967c     01 2A 86 51 |  if_ne	sub	local03, #1
29680     98 FF 9F FD | 	jmp	#LR__3724
29684                 | LR__3727
29684     2E 30 0E F2 | 	cmp	local06, #46 wz
29688     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2968c     01 2E 06 A6 |  if_e	mov	local05, #1
29690     88 FF 9F AD |  if_e	jmp	#LR__3724
29694                 | LR__3728
29694     45 30 0E F2 | 	cmp	local06, #69 wz
29698     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2969c     18 00 90 5D |  if_ne	jmp	#LR__3729
296a0     13 13 02 F6 | 	mov	arg01, local01
296a4     00 14 06 F6 | 	mov	arg02, #0
296a8     88 FD BF FD | 	call	#__system____builtin_atoi
296ac     15 FB 01 F1 | 	add	result1, local03
296b0     FD 32 02 F6 | 	mov	local07, result1
296b4     04 00 90 FD | 	jmp	#LR__3730
296b8                 | LR__3729
296b8     15 33 02 F6 | 	mov	local07, local03
296bc                 | LR__3730
296bc     19 17 02 F6 | 	mov	arg03, local07
296c0     14 13 02 F6 | 	mov	arg01, local02
296c4     00 90 20 FF 
296c8     00 14 06 F6 | 	mov	arg02, ##1092616192
296cc     F4 06 B0 FD | 	call	#__system___float_pow_n
296d0     16 FB 61 F5 | 	xor	result1, local04
296d4     A7 F0 03 F6 | 	mov	ptra, fp
296d8     B2 00 A0 FD | 	call	#popregs_
296dc                 | __system____builtin_atof_ret
296dc     2D 00 64 FD | 	ret
296e0                 | 
296e0                 | __system____builtin_ilogb
296e0     FC FB BF FD | 	call	#__system___float_Unpack
296e4     00 FE 0D F2 | 	cmp	result3, #0 wz
296e8     00 00 40 AF 
296ec     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
296f0     24 00 90 AD |  if_e	jmp	#LR__3741
296f4     80 FC 0D F2 | 	cmp	result2, #128 wz
296f8     18 00 90 5D |  if_ne	jmp	#LR__3740
296fc     00 00 10 FF 
29700     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
29704     1E FA CD A9 |  if_e	bmask	result1, #30
29708     0C 00 90 AD |  if_e	jmp	#LR__3741
2970c     1F FA C5 F9 | 	decod	result1, #31
29710     04 00 90 FD | 	jmp	#LR__3741
29714                 | LR__3740
29714     FE FA 01 F6 | 	mov	result1, result2
29718                 | LR__3741
29718                 | __system____builtin_ilogb_ret
29718     2D 00 64 FD | 	ret
2971c                 | 
2971c                 | __system____builtin_sinf
2971c     03 4A 05 F6 | 	mov	COUNT_, #3
29720     A8 00 A0 FD | 	call	#pushregs_
29724     09 27 02 F6 | 	mov	local01, arg01
29728     87 64 20 FF 
2972c     DB 15 06 F6 | 	mov	arg02, ##1086918619
29730     8C F8 BF FD | 	call	#__system___float_div
29734     FD 12 02 F6 | 	mov	arg01, result1
29738     00 14 06 F6 | 	mov	arg02, #0
2973c     44 FB BF FD | 	call	#__system___float_tointeger
29740     FD 16 0A F6 | 	mov	arg03, result1 wz
29744     44 00 90 AD |  if_e	jmp	#LR__3750
29748     0B 13 52 F6 | 	abs	arg01, arg03 wc
2974c     1F 28 C6 C9 |  if_b	decod	local02, #31
29750     00 28 06 36 |  if_ae	mov	local02, #0
29754     60 F2 BF FD | 	call	#__system___float_fromuns
29758     14 FB 61 F5 | 	xor	result1, local02
2975c     FD 12 02 F6 | 	mov	arg01, result1
29760     1E 14 C6 F9 | 	decod	arg02, #30
29764     54 F6 BF FD | 	call	#__system___float_mul
29768     FD 12 02 F6 | 	mov	arg01, result1
2976c     87 24 20 FF 
29770     DB 15 06 F6 | 	mov	arg02, ##1078530011
29774     44 F6 BF FD | 	call	#__system___float_mul
29778     FD 14 02 F6 | 	mov	arg02, result1
2977c     13 13 02 F6 | 	mov	arg01, local01
29780     1F 14 E6 F4 | 	bitnot	arg02, #31
29784     64 F2 BF FD | 	call	#__system___float_add
29788     FD 26 02 F6 | 	mov	local01, result1
2978c                 | LR__3750
2978c     13 13 02 F6 | 	mov	arg01, local01
29790     66 E6 1E FF 
29794     CD 14 06 F6 | 	mov	arg02, ##1036831949
29798     01 16 06 F6 | 	mov	arg03, #1
2979c     50 FA BF FD | 	call	#__system___float_cmp
297a0     00 FA 55 F2 | 	cmps	result1, #0 wc
297a4     5C 00 90 3D |  if_ae	jmp	#LR__3751
297a8     13 13 02 F6 | 	mov	arg01, local01
297ac     66 E6 5E FF 
297b0     CD 14 06 F6 | 	mov	arg02, ##-1110651699
297b4     01 16 66 F6 | 	neg	arg03, #1
297b8     34 FA BF FD | 	call	#__system___float_cmp
297bc     01 FA 55 F2 | 	cmps	result1, #1 wc
297c0     40 00 90 CD |  if_b	jmp	#LR__3751
297c4     13 13 02 F6 | 	mov	arg01, local01
297c8     13 15 02 F6 | 	mov	arg02, local01
297cc     EC F5 BF FD | 	call	#__system___float_mul
297d0     FD 12 02 F6 | 	mov	arg01, result1
297d4     13 15 02 F6 | 	mov	arg02, local01
297d8     E0 F5 BF FD | 	call	#__system___float_mul
297dc     FD 12 02 F6 | 	mov	arg01, result1
297e0     00 60 20 FF 
297e4     00 14 06 F6 | 	mov	arg02, ##1086324736
297e8     D4 F7 BF FD | 	call	#__system___float_div
297ec     FD 14 02 F6 | 	mov	arg02, result1
297f0     13 13 02 F6 | 	mov	arg01, local01
297f4     1F 14 E6 F4 | 	bitnot	arg02, #31
297f8     F0 F1 BF FD | 	call	#__system___float_add
297fc     FD 2A 02 F6 | 	mov	local03, result1
29800     54 00 90 FD | 	jmp	#LR__3752
29804                 | LR__3751
29804     13 13 02 F6 | 	mov	arg01, local01
29808     7C 91 26 FF 
2980c     83 15 06 F6 | 	mov	arg02, ##1294137731
29810     A8 F5 BF FD | 	call	#__system___float_mul
29814     FD 12 02 F6 | 	mov	arg01, result1
29818     00 14 06 F6 | 	mov	arg02, #0
2981c     64 FA BF FD | 	call	#__system___float_tointeger
29820     02 FA 65 F0 | 	shl	result1, #2
29824     00 00 A0 FF 
29828     FD 00 48 FD | 	qrotate	##1073741824, result1
2982c     19 12 62 FD | 	getqy	arg01
29830     09 13 52 F6 | 	abs	arg01, arg01 wc
29834     1F 28 C6 C9 |  if_b	decod	local02, #31
29838     00 28 06 36 |  if_ae	mov	local02, #0
2983c     78 F1 BF FD | 	call	#__system___float_fromuns
29840     14 FB 61 F5 | 	xor	result1, local02
29844     FD 12 02 F6 | 	mov	arg01, result1
29848     00 40 27 FF 
2984c     00 14 06 F6 | 	mov	arg02, ##1317011456
29850     6C F7 BF FD | 	call	#__system___float_div
29854     FD 2A 02 F6 | 	mov	local03, result1
29858                 | LR__3752
29858     15 FB 01 F6 | 	mov	result1, local03
2985c     A7 F0 03 F6 | 	mov	ptra, fp
29860     B2 00 A0 FD | 	call	#popregs_
29864                 | __system____builtin_sinf_ret
29864     2D 00 64 FD | 	ret
29868                 | 
29868                 | __system____builtin_tanf
29868     02 4A 05 F6 | 	mov	COUNT_, #2
2986c     A8 00 A0 FD | 	call	#pushregs_
29870     09 27 02 F6 | 	mov	local01, arg01
29874     A4 FE BF FD | 	call	#__system____builtin_sinf
29878     FD 28 02 F6 | 	mov	local02, result1
2987c     13 15 02 F6 | 	mov	arg02, local01
29880     87 E4 1F FF 
29884     DB 13 06 F6 | 	mov	arg01, ##1070141403
29888     1F 14 E6 F4 | 	bitnot	arg02, #31
2988c     5C F1 BF FD | 	call	#__system___float_add
29890     FD 12 02 F6 | 	mov	arg01, result1
29894     84 FE BF FD | 	call	#__system____builtin_sinf
29898     FD 14 02 F6 | 	mov	arg02, result1
2989c     14 13 02 F6 | 	mov	arg01, local02
298a0     1C F7 BF FD | 	call	#__system___float_div
298a4     A7 F0 03 F6 | 	mov	ptra, fp
298a8     B2 00 A0 FD | 	call	#popregs_
298ac                 | __system____builtin_tanf_ret
298ac     2D 00 64 FD | 	ret
298b0                 | 
298b0                 | __system____builtin_asinf
298b0     01 4A 05 F6 | 	mov	COUNT_, #1
298b4     A8 00 A0 FD | 	call	#pushregs_
298b8     09 27 02 F6 | 	mov	local01, arg01
298bc     13 15 02 F6 | 	mov	arg02, local01
298c0     13 13 02 F6 | 	mov	arg01, local01
298c4     F4 F4 BF FD | 	call	#__system___float_mul
298c8     FD 14 02 F6 | 	mov	arg02, result1
298cc     00 C0 1F FF 
298d0     00 12 06 F6 | 	mov	arg01, ##1065353216
298d4     1F 14 E6 F4 | 	bitnot	arg02, #31
298d8     10 F1 BF FD | 	call	#__system___float_add
298dc     FD 12 02 F6 | 	mov	arg01, result1
298e0     00 F4 BF FD | 	call	#__system___float_sqrt
298e4     FD 14 02 F6 | 	mov	arg02, result1
298e8     13 13 02 F6 | 	mov	arg01, local01
298ec     58 00 B0 FD | 	call	#__system____builtin_atan2f
298f0     A7 F0 03 F6 | 	mov	ptra, fp
298f4     B2 00 A0 FD | 	call	#popregs_
298f8                 | __system____builtin_asinf_ret
298f8     2D 00 64 FD | 	ret
298fc                 | 
298fc                 | __system____builtin_acosf
298fc     01 4A 05 F6 | 	mov	COUNT_, #1
29900     A8 00 A0 FD | 	call	#pushregs_
29904     09 27 02 F6 | 	mov	local01, arg01
29908     13 15 02 F6 | 	mov	arg02, local01
2990c     13 13 02 F6 | 	mov	arg01, local01
29910     A8 F4 BF FD | 	call	#__system___float_mul
29914     FD 14 02 F6 | 	mov	arg02, result1
29918     00 C0 1F FF 
2991c     00 12 06 F6 | 	mov	arg01, ##1065353216
29920     1F 14 E6 F4 | 	bitnot	arg02, #31
29924     C4 F0 BF FD | 	call	#__system___float_add
29928     FD 12 02 F6 | 	mov	arg01, result1
2992c     B4 F3 BF FD | 	call	#__system___float_sqrt
29930     FD 12 02 F6 | 	mov	arg01, result1
29934     13 15 02 F6 | 	mov	arg02, local01
29938     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2993c     A7 F0 03 F6 | 	mov	ptra, fp
29940     B2 00 A0 FD | 	call	#popregs_
29944                 | __system____builtin_acosf_ret
29944     2D 00 64 FD | 	ret
29948                 | 
29948                 | __system____builtin_atan2f
29948     04 4A 05 F6 | 	mov	COUNT_, #4
2994c     A8 00 A0 FD | 	call	#pushregs_
29950     09 27 02 F6 | 	mov	local01, arg01
29954     0A 29 02 F6 | 	mov	local02, arg02
29958     13 13 02 F6 | 	mov	arg01, local01
2995c     00 14 06 F6 | 	mov	arg02, #0
29960     01 16 06 F6 | 	mov	arg03, #1
29964     88 F8 BF FD | 	call	#__system___float_cmp
29968     00 FA 0D F2 | 	cmp	result1, #0 wz
2996c     28 00 90 5D |  if_ne	jmp	#LR__3760
29970     14 13 02 F6 | 	mov	arg01, local02
29974     00 14 06 F6 | 	mov	arg02, #0
29978     01 16 06 F6 | 	mov	arg03, #1
2997c     70 F8 BF FD | 	call	#__system___float_cmp
29980     00 FA 55 F2 | 	cmps	result1, #0 wc
29984     87 24 60 CF 
29988     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2998c     DC 00 90 CD |  if_b	jmp	#LR__3761
29990     00 FA 05 F6 | 	mov	result1, #0
29994     D4 00 90 FD | 	jmp	#LR__3761
29998                 | LR__3760
29998     14 13 02 F6 | 	mov	arg01, local02
2999c     14 15 02 F6 | 	mov	arg02, local02
299a0     18 F4 BF FD | 	call	#__system___float_mul
299a4     FD 2A 02 F6 | 	mov	local03, result1
299a8     13 13 02 F6 | 	mov	arg01, local01
299ac     13 15 02 F6 | 	mov	arg02, local01
299b0     08 F4 BF FD | 	call	#__system___float_mul
299b4     FD 14 02 F6 | 	mov	arg02, result1
299b8     15 13 02 F6 | 	mov	arg01, local03
299bc     2C F0 BF FD | 	call	#__system___float_add
299c0     FD 12 02 F6 | 	mov	arg01, result1
299c4     1C F3 BF FD | 	call	#__system___float_sqrt
299c8     FD 2A 02 F6 | 	mov	local03, result1
299cc     14 13 02 F6 | 	mov	arg01, local02
299d0     15 15 02 F6 | 	mov	arg02, local03
299d4     E8 F5 BF FD | 	call	#__system___float_div
299d8     FD 28 02 F6 | 	mov	local02, result1
299dc     13 13 02 F6 | 	mov	arg01, local01
299e0     15 15 02 F6 | 	mov	arg02, local03
299e4     D8 F5 BF FD | 	call	#__system___float_div
299e8     FD 26 02 F6 | 	mov	local01, result1
299ec     00 40 27 FF 
299f0     00 12 06 F6 | 	mov	arg01, ##1317011456
299f4     14 15 02 F6 | 	mov	arg02, local02
299f8     C0 F3 BF FD | 	call	#__system___float_mul
299fc     FD 12 02 F6 | 	mov	arg01, result1
29a00     00 14 06 F6 | 	mov	arg02, #0
29a04     7C F8 BF FD | 	call	#__system___float_tointeger
29a08     FD 2A 02 F6 | 	mov	local03, result1
29a0c     00 40 27 FF 
29a10     00 12 06 F6 | 	mov	arg01, ##1317011456
29a14     13 15 02 F6 | 	mov	arg02, local01
29a18     A0 F3 BF FD | 	call	#__system___float_mul
29a1c     FD 12 02 F6 | 	mov	arg01, result1
29a20     00 14 06 F6 | 	mov	arg02, #0
29a24     5C F8 BF FD | 	call	#__system___float_tointeger
29a28     FD 2A 52 FD | 	qvector	local03, result1
29a2c     87 24 20 FF 
29a30     DB 2B 06 F6 | 	mov	local03, ##1078530011
29a34     19 12 62 FD | 	getqy	arg01
29a38     01 12 C6 F0 | 	sar	arg01, #1
29a3c     09 13 52 F6 | 	abs	arg01, arg01 wc
29a40     1F 2C C6 C9 |  if_b	decod	local04, #31
29a44     00 2C 06 36 |  if_ae	mov	local04, #0
29a48     6C EF BF FD | 	call	#__system___float_fromuns
29a4c     16 FB 61 F5 | 	xor	result1, local04
29a50     FD 12 02 F6 | 	mov	arg01, result1
29a54     00 40 27 FF 
29a58     00 14 06 F6 | 	mov	arg02, ##1317011456
29a5c     60 F5 BF FD | 	call	#__system___float_div
29a60     FD 14 02 F6 | 	mov	arg02, result1
29a64     15 13 02 F6 | 	mov	arg01, local03
29a68     50 F3 BF FD | 	call	#__system___float_mul
29a6c                 | LR__3761
29a6c     A7 F0 03 F6 | 	mov	ptra, fp
29a70     B2 00 A0 FD | 	call	#popregs_
29a74                 | __system____builtin_atan2f_ret
29a74     2D 00 64 FD | 	ret
29a78                 | 
29a78                 | __system____builtin_exp2f
29a78     04 4A 05 F6 | 	mov	COUNT_, #4
29a7c     A8 00 A0 FD | 	call	#pushregs_
29a80     09 27 02 F6 | 	mov	local01, arg01
29a84     00 7F 21 FF 
29a88     00 14 06 F6 | 	mov	arg02, ##1123942400
29a8c     01 16 66 F6 | 	neg	arg03, #1
29a90     5C F7 BF FD | 	call	#__system___float_cmp
29a94     00 FA 55 F2 | 	cmps	result1, #0 wc
29a98     00 C0 3F 3F 
29a9c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
29aa0     DC 00 90 3D |  if_ae	jmp	#LR__3771
29aa4     13 13 02 F6 | 	mov	arg01, local01
29aa8     00 7F 61 FF 
29aac     00 14 06 F6 | 	mov	arg02, ##-1023541248
29ab0     01 16 06 F6 | 	mov	arg03, #1
29ab4     38 F7 BF FD | 	call	#__system___float_cmp
29ab8     00 FA 55 F2 | 	cmps	result1, #0 wc
29abc     00 FA 05 C6 |  if_b	mov	result1, #0
29ac0     BC 00 90 CD |  if_b	jmp	#LR__3771
29ac4     13 13 02 F6 | 	mov	arg01, local01
29ac8     00 14 06 F6 | 	mov	arg02, #0
29acc     B4 F7 BF FD | 	call	#__system___float_tointeger
29ad0     FD 28 02 F6 | 	mov	local02, result1
29ad4     14 13 52 F6 | 	abs	arg01, local02 wc
29ad8     1F 2A C6 C9 |  if_b	decod	local03, #31
29adc     00 2A 06 36 |  if_ae	mov	local03, #0
29ae0     D4 EE BF FD | 	call	#__system___float_fromuns
29ae4     15 FB 61 F5 | 	xor	result1, local03
29ae8     FD 14 02 F6 | 	mov	arg02, result1
29aec     13 13 02 F6 | 	mov	arg01, local01
29af0     1F 14 E6 F4 | 	bitnot	arg02, #31
29af4     F4 EE BF FD | 	call	#__system___float_add
29af8     FD 2C 02 F6 | 	mov	local04, result1
29afc     16 13 02 F6 | 	mov	arg01, local04
29b00     00 14 06 F6 | 	mov	arg02, #0
29b04     01 16 06 F6 | 	mov	arg03, #1
29b08     E4 F6 BF FD | 	call	#__system___float_cmp
29b0c     00 FA 55 F2 | 	cmps	result1, #0 wc
29b10     18 00 90 3D |  if_ae	jmp	#LR__3770
29b14     16 13 02 F6 | 	mov	arg01, local04
29b18     00 C0 1F FF 
29b1c     00 14 06 F6 | 	mov	arg02, ##1065353216
29b20     C8 EE BF FD | 	call	#__system___float_add
29b24     FD 2C 02 F6 | 	mov	local04, result1
29b28     01 28 86 F1 | 	sub	local02, #1
29b2c                 | LR__3770
29b2c     7F 28 06 F1 | 	add	local02, #127
29b30     17 28 66 F0 | 	shl	local02, #23
29b34     16 13 02 F6 | 	mov	arg01, local04
29b38     00 80 26 FF 
29b3c     00 14 06 F6 | 	mov	arg02, ##1291845632
29b40     78 F2 BF FD | 	call	#__system___float_mul
29b44     FD 12 02 F6 | 	mov	arg01, result1
29b48     00 14 06 F6 | 	mov	arg02, #0
29b4c     34 F7 BF FD | 	call	#__system___float_tointeger
29b50     FD 2C 0A F6 | 	mov	local04, result1 wz
29b54     14 FB 01 A6 |  if_e	mov	result1, local02
29b58     24 00 90 AD |  if_e	jmp	#LR__3771
29b5c     3E 2C 26 F4 | 	bith	local04, #62
29b60     0F 2C 62 FD | 	qexp	local04
29b64     14 13 02 F6 | 	mov	arg01, local02
29b68     18 14 62 FD | 	getqx	arg02
29b6c     01 14 06 F1 | 	add	arg02, #1
29b70     01 14 46 F0 | 	shr	arg02, #1
29b74     00 80 1F FF 
29b78     00 14 06 F1 | 	add	arg02, ##1056964608
29b7c     3C F2 BF FD | 	call	#__system___float_mul
29b80                 | LR__3771
29b80     A7 F0 03 F6 | 	mov	ptra, fp
29b84     B2 00 A0 FD | 	call	#popregs_
29b88                 | __system____builtin_exp2f_ret
29b88     2D 00 64 FD | 	ret
29b8c                 | 
29b8c                 | __system____builtin_log2f
29b8c     06 4A 05 F6 | 	mov	COUNT_, #6
29b90     A8 00 A0 FD | 	call	#pushregs_
29b94     09 27 02 F6 | 	mov	local01, arg01
29b98     09 29 0A F6 | 	mov	local02, arg01 wz
29b9c     00 00 40 5F 
29ba0     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
29ba4     00 40 00 AF 
29ba8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
29bac     08 01 90 AD |  if_e	jmp	#LR__3784
29bb0     00 28 56 F2 | 	cmps	local02, #0 wc
29bb4     00 E0 3F CF 
29bb8     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29bbc     F8 00 90 CD |  if_b	jmp	#LR__3784
29bc0     13 13 02 F6 | 	mov	arg01, local01
29bc4     00 90 20 FF 
29bc8     00 14 06 F6 | 	mov	arg02, ##1092616192
29bcc     01 16 06 F6 | 	mov	arg03, #1
29bd0     1C F6 BF FD | 	call	#__system___float_cmp
29bd4     00 FA 0D F2 | 	cmp	result1, #0 wz
29bd8     4D 2A 20 AF 
29bdc     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
29be0     D4 00 90 AD |  if_e	jmp	#LR__3784
29be4     13 13 02 F6 | 	mov	arg01, local01
29be8     FC 16 20 FF 
29bec     54 14 06 F6 | 	mov	arg02, ##1076754516
29bf0     01 16 06 F6 | 	mov	arg03, #1
29bf4     F8 F5 BF FD | 	call	#__system___float_cmp
29bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
29bfc     55 DC 1F AF 
29c00     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
29c04     B0 00 90 AD |  if_e	jmp	#LR__3784
29c08     14 2B 02 F6 | 	mov	local03, local02
29c0c     17 2A 46 F0 | 	shr	local03, #23
29c10     15 2B E2 F8 | 	getbyte	local03, local03, #0
29c14     17 29 06 F4 | 	bitl	local02, #279
29c18     14 2D 02 F6 | 	mov	local04, local02
29c1c     FF 2A 0E F2 | 	cmp	local03, #255 wz
29c20     1C 00 90 5D |  if_ne	jmp	#LR__3780
29c24     00 2C 0E F2 | 	cmp	local04, #0 wz
29c28     00 C0 3F 5F 
29c2c     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
29c30     00 E0 3F AF 
29c34     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
29c38     17 FB 01 F6 | 	mov	result1, local05
29c3c     78 00 90 FD | 	jmp	#LR__3784
29c40                 | LR__3780
29c40     00 2A 0E F2 | 	cmp	local03, #0 wz
29c44     17 2C 26 54 |  if_ne	bith	local04, #23
29c48     7F 2A 86 51 |  if_ne	sub	local03, #127
29c4c     28 00 90 5D |  if_ne	jmp	#LR__3783
29c50     00 2C 0E F2 | 	cmp	local04, #0 wz
29c54     00 40 00 AF 
29c58     00 FA 65 A6 |  if_e	neg	result1, ##8388608
29c5c     58 00 90 AD |  if_e	jmp	#LR__3784
29c60     7E 2A 66 F6 | 	neg	local03, #126
29c64     97 08 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
29c68                 | LR__3781
29c68     17 2C 2E F4 | 	testbn	local04, #23 wz
29c6c     01 2C 66 A0 |  if_e	shl	local04, #1
29c70     01 2A 06 A1 |  if_e	add	local03, #1
29c74     F0 FF 9F AD |  if_e	jmp	#LR__3781
29c78                 | LR__3782
29c78                 | LR__3783
29c78     0E 2C 62 FD | 	qlog	local04
29c7c     01 2A 86 F1 | 	sub	local03, #1
29c80     15 13 52 F6 | 	abs	arg01, local03 wc
29c84     1F 30 C6 C9 |  if_b	decod	local06, #31
29c88     00 30 06 36 |  if_ae	mov	local06, #0
29c8c     18 2E 62 FD | 	getqx	local05
29c90     9B 2E 06 F4 | 	bitl	local05, #155
29c94     08 2E 06 F1 | 	add	local05, #8
29c98     04 2E 46 F0 | 	shr	local05, #4
29c9c     00 C0 1F FF 
29ca0     00 2E 06 F1 | 	add	local05, ##1065353216
29ca4     10 ED BF FD | 	call	#__system___float_fromuns
29ca8     18 FB 61 F5 | 	xor	result1, local06
29cac     FD 14 02 F6 | 	mov	arg02, result1
29cb0     17 13 02 F6 | 	mov	arg01, local05
29cb4     34 ED BF FD | 	call	#__system___float_add
29cb8                 | LR__3784
29cb8     A7 F0 03 F6 | 	mov	ptra, fp
29cbc     B2 00 A0 FD | 	call	#popregs_
29cc0                 | __system____builtin_log2f_ret
29cc0     2D 00 64 FD | 	ret
29cc4                 | 
29cc4                 | __system____builtin_powf
29cc4     04 4A 05 F6 | 	mov	COUNT_, #4
29cc8     A8 00 A0 FD | 	call	#pushregs_
29ccc     09 27 02 F6 | 	mov	local01, arg01
29cd0     0A 29 02 F6 | 	mov	local02, arg02
29cd4     14 13 02 F6 | 	mov	arg01, local02
29cd8     00 14 06 F6 | 	mov	arg02, #0
29cdc     A4 F5 BF FD | 	call	#__system___float_tointeger
29ce0     FD 2A 02 F6 | 	mov	local03, result1
29ce4     15 13 52 F6 | 	abs	arg01, local03 wc
29ce8     1F 2C C6 C9 |  if_b	decod	local04, #31
29cec     00 2C 06 36 |  if_ae	mov	local04, #0
29cf0     C4 EC BF FD | 	call	#__system___float_fromuns
29cf4     16 FB 61 F5 | 	xor	result1, local04
29cf8     FD 12 02 F6 | 	mov	arg01, result1
29cfc     14 15 02 F6 | 	mov	arg02, local02
29d00     01 16 06 F6 | 	mov	arg03, #1
29d04     E8 F4 BF FD | 	call	#__system___float_cmp
29d08     00 FA 0D F2 | 	cmp	result1, #0 wz
29d0c     18 00 90 5D |  if_ne	jmp	#LR__3790
29d10     00 C0 1F FF 
29d14     00 12 06 F6 | 	mov	arg01, ##1065353216
29d18     13 15 02 F6 | 	mov	arg02, local01
29d1c     15 17 02 F6 | 	mov	arg03, local03
29d20     A0 00 B0 FD | 	call	#__system___float_pow_n
29d24     58 00 90 FD | 	jmp	#LR__3791
29d28                 | LR__3790
29d28     13 13 02 F6 | 	mov	arg01, local01
29d2c     00 14 06 F6 | 	mov	arg02, #0
29d30     01 16 06 F6 | 	mov	arg03, #1
29d34     B8 F4 BF FD | 	call	#__system___float_cmp
29d38     00 FA 55 F2 | 	cmps	result1, #0 wc
29d3c     00 E0 3F CF 
29d40     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
29d44     38 00 90 CD |  if_b	jmp	#LR__3791
29d48     13 13 02 F6 | 	mov	arg01, local01
29d4c     00 14 06 F6 | 	mov	arg02, #0
29d50     01 16 06 F6 | 	mov	arg03, #1
29d54     98 F4 BF FD | 	call	#__system___float_cmp
29d58     00 FA 0D F2 | 	cmp	result1, #0 wz
29d5c     00 FA 05 A6 |  if_e	mov	result1, #0
29d60     1C 00 90 AD |  if_e	jmp	#LR__3791
29d64     13 13 02 F6 | 	mov	arg01, local01
29d68     20 FE BF FD | 	call	#__system____builtin_log2f
29d6c     FD 12 02 F6 | 	mov	arg01, result1
29d70     14 15 02 F6 | 	mov	arg02, local02
29d74     44 F0 BF FD | 	call	#__system___float_mul
29d78     FD 12 02 F6 | 	mov	arg01, result1
29d7c     F8 FC BF FD | 	call	#__system____builtin_exp2f
29d80                 | LR__3791
29d80     A7 F0 03 F6 | 	mov	ptra, fp
29d84     B2 00 A0 FD | 	call	#popregs_
29d88                 | __system____builtin_powf_ret
29d88     2D 00 64 FD | 	ret
29d8c                 | 
29d8c                 | __system____builtin_logbase
29d8c     02 4A 05 F6 | 	mov	COUNT_, #2
29d90     A8 00 A0 FD | 	call	#pushregs_
29d94     09 27 02 F6 | 	mov	local01, arg01
29d98     0A 13 02 F6 | 	mov	arg01, arg02
29d9c     EC FD BF FD | 	call	#__system____builtin_log2f
29da0     FD 28 02 F6 | 	mov	local02, result1
29da4     13 13 02 F6 | 	mov	arg01, local01
29da8     E0 FD BF FD | 	call	#__system____builtin_log2f
29dac     FD 14 02 F6 | 	mov	arg02, result1
29db0     14 13 02 F6 | 	mov	arg01, local02
29db4     08 F2 BF FD | 	call	#__system___float_div
29db8     A7 F0 03 F6 | 	mov	ptra, fp
29dbc     B2 00 A0 FD | 	call	#popregs_
29dc0                 | __system____builtin_logbase_ret
29dc0     2D 00 64 FD | 	ret
29dc4                 | 
29dc4                 | __system___float_pow_n
29dc4     05 4A 05 F6 | 	mov	COUNT_, #5
29dc8     A8 00 A0 FD | 	call	#pushregs_
29dcc     09 27 02 F6 | 	mov	local01, arg01
29dd0     0A 29 02 F6 | 	mov	local02, arg02
29dd4     0B 2B 02 F6 | 	mov	local03, arg03
29dd8     00 2A 56 F2 | 	cmps	local03, #0 wc
29ddc     18 00 90 3D |  if_ae	jmp	#LR__3800
29de0     01 2C 06 F6 | 	mov	local04, #1
29de4     15 2B 62 F6 | 	neg	local03, local03
29de8     00 2A 56 F2 | 	cmps	local03, #0 wc
29dec     00 FA 05 C6 |  if_b	mov	result1, #0
29df0     94 00 90 CD |  if_b	jmp	#LR__3808
29df4     04 00 90 FD | 	jmp	#LR__3801
29df8                 | LR__3800
29df8     00 2C 06 F6 | 	mov	local04, #0
29dfc                 | LR__3801
29dfc     00 C0 1F FF 
29e00     00 2E 06 F6 | 	mov	local05, ##1065353216
29e04                 | LR__3802
29e04     01 2A 56 F2 | 	cmps	local03, #1 wc
29e08     30 00 90 CD |  if_b	jmp	#LR__3804
29e0c     01 2A CE F7 | 	test	local03, #1 wz
29e10     10 00 90 AD |  if_e	jmp	#LR__3803
29e14     17 13 02 F6 | 	mov	arg01, local05
29e18     14 15 02 F6 | 	mov	arg02, local02
29e1c     9C EF BF FD | 	call	#__system___float_mul
29e20     FD 2E 02 F6 | 	mov	local05, result1
29e24                 | LR__3803
29e24     01 2A C6 F0 | 	sar	local03, #1
29e28     14 13 02 F6 | 	mov	arg01, local02
29e2c     14 15 02 F6 | 	mov	arg02, local02
29e30     88 EF BF FD | 	call	#__system___float_mul
29e34     FD 28 02 F6 | 	mov	local02, result1
29e38     C8 FF 9F FD | 	jmp	#LR__3802
29e3c                 | LR__3804
29e3c     00 2C 0E F2 | 	cmp	local04, #0 wz
29e40     14 00 90 AD |  if_e	jmp	#LR__3805
29e44     13 13 02 F6 | 	mov	arg01, local01
29e48     17 15 02 F6 | 	mov	arg02, local05
29e4c     70 F1 BF FD | 	call	#__system___float_div
29e50     FD 2E 02 F6 | 	mov	local05, result1
29e54     2C 00 90 FD | 	jmp	#LR__3807
29e58                 | LR__3805
29e58     13 13 02 F6 | 	mov	arg01, local01
29e5c     00 C0 1F FF 
29e60     00 14 06 F6 | 	mov	arg02, ##1065353216
29e64     01 16 06 F6 | 	mov	arg03, #1
29e68     84 F3 BF FD | 	call	#__system___float_cmp
29e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
29e70     10 00 90 AD |  if_e	jmp	#LR__3806
29e74     13 13 02 F6 | 	mov	arg01, local01
29e78     17 15 02 F6 | 	mov	arg02, local05
29e7c     3C EF BF FD | 	call	#__system___float_mul
29e80     FD 2E 02 F6 | 	mov	local05, result1
29e84                 | LR__3806
29e84                 | LR__3807
29e84     17 FB 01 F6 | 	mov	result1, local05
29e88                 | LR__3808
29e88     A7 F0 03 F6 | 	mov	ptra, fp
29e8c     B2 00 A0 FD | 	call	#popregs_
29e90                 | __system___float_pow_n_ret
29e90     2D 00 64 FD | 	ret
29e94                 | 
29e94                 | __system___gc_ptrs
29e94     EC 00 02 F6 | 	mov	_var01, __heap_ptr
29e98     00 03 02 F6 | 	mov	_var02, _var01
29e9c     BB 00 00 FF 
29ea0     F8 02 06 F1 | 	add	_var02, ##95992
29ea4     00 FD 09 FB | 	rdlong	result2, _var01 wz
29ea8     74 00 90 5D |  if_ne	jmp	#LR__3810
29eac     01 FD 01 F6 | 	mov	result2, _var02
29eb0     00 FD 81 F1 | 	sub	result2, _var01
29eb4     00 03 58 FC | 	wrword	#1, _var01
29eb8     00 FB 01 F6 | 	mov	result1, _var01
29ebc     02 FA 05 F1 | 	add	result1, #2
29ec0     36 00 80 FF 
29ec4     FD 20 59 FC | 	wrword	##27792, result1
29ec8     00 FB 01 F6 | 	mov	result1, _var01
29ecc     04 FA 05 F1 | 	add	result1, #4
29ed0     FD 00 58 FC | 	wrword	#0, result1
29ed4     00 FB 01 F6 | 	mov	result1, _var01
29ed8     06 FA 05 F1 | 	add	result1, #6
29edc     FD 02 58 FC | 	wrword	#1, result1
29ee0     10 00 06 F1 | 	add	_var01, #16
29ee4     FE FC 51 F6 | 	abs	result2, result2 wc
29ee8     04 FC 45 F0 | 	shr	result2, #4
29eec     FE FC 81 F6 | 	negc	result2, result2
29ef0     00 FD 51 FC | 	wrword	result2, _var01
29ef4     00 FD 01 F6 | 	mov	result2, _var01
29ef8     02 FC 05 F1 | 	add	result2, #2
29efc     36 00 80 FF 
29f00     FE 1E 59 FC | 	wrword	##27791, result2
29f04     00 FD 01 F6 | 	mov	result2, _var01
29f08     04 FC 05 F1 | 	add	result2, #4
29f0c     FE 00 58 FC | 	wrword	#0, result2
29f10     00 FD 01 F6 | 	mov	result2, _var01
29f14     06 FC 05 F1 | 	add	result2, #6
29f18     FE 00 58 FC | 	wrword	#0, result2
29f1c     10 00 86 F1 | 	sub	_var01, #16
29f20                 | LR__3810
29f20     00 FB 01 F6 | 	mov	result1, _var01
29f24     01 FD 01 F6 | 	mov	result2, _var02
29f28                 | __system___gc_ptrs_ret
29f28     2D 00 64 FD | 	ret
29f2c                 | 
29f2c                 | __system___gc_tryalloc
29f2c     0B 4A 05 F6 | 	mov	COUNT_, #11
29f30     A8 00 A0 FD | 	call	#pushregs_
29f34     09 27 02 F6 | 	mov	local01, arg01
29f38     0A 29 02 F6 | 	mov	local02, arg02
29f3c     54 FF BF FD | 	call	#__system___gc_ptrs
29f40     FD 2A 02 F6 | 	mov	local03, result1
29f44     FE 2C 02 F6 | 	mov	local04, result2
29f48     15 2F 02 F6 | 	mov	local05, local03
29f4c     00 30 06 F6 | 	mov	local06, #0
29f50     97 1E 48 FB | 	callpa	#(@LR__3821-@LR__3820)>>2,fcache_load_ptr_
29f54                 | LR__3820
29f54     17 33 02 F6 | 	mov	local07, local05
29f58     06 2E 06 F1 | 	add	local05, #6
29f5c     17 15 EA FA | 	rdword	arg02, local05 wz
29f60     15 13 02 F6 | 	mov	arg01, local03
29f64     00 FA 05 A6 |  if_e	mov	result1, #0
29f68     04 14 66 50 |  if_ne	shl	arg02, #4
29f6c     0A 13 02 51 |  if_ne	add	arg01, arg02
29f70     09 FB 01 56 |  if_ne	mov	result1, arg01
29f74     FD 2E 0A F6 | 	mov	local05, result1 wz
29f78     17 31 E2 5A |  if_ne	rdword	local06, local05
29f7c     00 2E 0E F2 | 	cmp	local05, #0 wz
29f80     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
29f84     08 00 90 1D |  if_a	jmp	#LR__3822
29f88     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
29f8c     C4 FF 9F 1D |  if_a	jmp	#LR__3820
29f90                 | LR__3821
29f90                 | LR__3822
29f90     00 2E 0E F2 | 	cmp	local05, #0 wz
29f94     17 FB 01 A6 |  if_e	mov	result1, local05
29f98     3C 01 90 AD |  if_e	jmp	#LR__3825
29f9c     17 FD 01 F6 | 	mov	result2, local05
29fa0     06 FC 05 F1 | 	add	result2, #6
29fa4     FE 34 E2 FA | 	rdword	local08, result2
29fa8     18 27 52 F2 | 	cmps	local01, local06 wc
29fac     C0 00 90 3D |  if_ae	jmp	#LR__3824
29fb0     17 27 52 FC | 	wrword	local01, local05
29fb4     17 13 02 F6 | 	mov	arg01, local05
29fb8     13 35 02 F6 | 	mov	local08, local01
29fbc     04 34 66 F0 | 	shl	local08, #4
29fc0     1A 13 02 F1 | 	add	arg01, local08
29fc4     13 31 82 F1 | 	sub	local06, local01
29fc8     09 31 52 FC | 	wrword	local06, arg01
29fcc     09 35 02 F6 | 	mov	local08, arg01
29fd0     02 34 06 F1 | 	add	local08, #2
29fd4     36 00 80 FF 
29fd8     1A 1F 59 FC | 	wrword	##27791, local08
29fdc     17 15 0A F6 | 	mov	arg02, local05 wz
29fe0     00 FA 05 A6 |  if_e	mov	result1, #0
29fe4     15 15 82 51 |  if_ne	sub	arg02, local03
29fe8     04 14 46 50 |  if_ne	shr	arg02, #4
29fec     0A FB 01 56 |  if_ne	mov	result1, arg02
29ff0     09 35 02 F6 | 	mov	local08, arg01
29ff4     04 34 06 F1 | 	add	local08, #4
29ff8     1A FB 51 FC | 	wrword	result1, local08
29ffc     17 35 02 F6 | 	mov	local08, local05
2a000     06 34 06 F1 | 	add	local08, #6
2a004     09 15 02 F6 | 	mov	arg02, arg01
2a008     1A 35 E2 FA | 	rdword	local08, local08
2a00c     06 14 06 F1 | 	add	arg02, #6
2a010     0A 35 52 FC | 	wrword	local08, arg02
2a014     09 37 02 F6 | 	mov	local09, arg01
2a018     1B 15 0A F6 | 	mov	arg02, local09 wz
2a01c     00 FA 05 A6 |  if_e	mov	result1, #0
2a020     15 15 82 51 |  if_ne	sub	arg02, local03
2a024     04 14 46 50 |  if_ne	shr	arg02, #4
2a028     0A FB 01 56 |  if_ne	mov	result1, arg02
2a02c     FD 34 02 F6 | 	mov	local08, result1
2a030     09 39 EA FA | 	rdword	local10, arg01 wz
2a034     00 FA 05 A6 |  if_e	mov	result1, #0
2a038     04 38 66 50 |  if_ne	shl	local10, #4
2a03c     1C 13 02 51 |  if_ne	add	arg01, local10
2a040     09 FB 01 56 |  if_ne	mov	result1, arg01
2a044     FD 3A 0A F6 | 	mov	local11, result1 wz
2a048     24 00 90 AD |  if_e	jmp	#LR__3823
2a04c     16 3B 52 F2 | 	cmps	local11, local04 wc
2a050     1C 00 90 3D |  if_ae	jmp	#LR__3823
2a054     1B 15 0A F6 | 	mov	arg02, local09 wz
2a058     00 FA 05 A6 |  if_e	mov	result1, #0
2a05c     15 15 82 51 |  if_ne	sub	arg02, local03
2a060     04 14 46 50 |  if_ne	shr	arg02, #4
2a064     0A FB 01 56 |  if_ne	mov	result1, arg02
2a068     04 3A 06 F1 | 	add	local11, #4
2a06c     1D FB 51 FC | 	wrword	result1, local11
2a070                 | LR__3823
2a070                 | LR__3824
2a070     06 32 06 F1 | 	add	local07, #6
2a074     19 35 52 FC | 	wrword	local08, local07
2a078     36 00 00 FF 
2a07c     80 36 06 F6 | 	mov	local09, ##27776
2a080     14 37 42 F5 | 	or	local09, local02
2a084     00 FA 05 F6 | 	mov	result1, #0
2a088     01 FA 61 FD | 	cogid	result1
2a08c     FD 36 42 F5 | 	or	local09, result1
2a090     17 3B 02 F6 | 	mov	local11, local05
2a094     02 3A 06 F1 | 	add	local11, #2
2a098     1D 37 52 FC | 	wrword	local09, local11
2a09c     15 37 02 F6 | 	mov	local09, local03
2a0a0     08 36 06 F1 | 	add	local09, #8
2a0a4     17 3B 02 F6 | 	mov	local11, local05
2a0a8     1B 37 E2 FA | 	rdword	local09, local09
2a0ac     06 3A 06 F1 | 	add	local11, #6
2a0b0     1D 37 52 FC | 	wrword	local09, local11
2a0b4     17 15 0A F6 | 	mov	arg02, local05 wz
2a0b8     00 FA 05 A6 |  if_e	mov	result1, #0
2a0bc     15 15 82 51 |  if_ne	sub	arg02, local03
2a0c0     04 14 46 50 |  if_ne	shr	arg02, #4
2a0c4     0A FB 01 56 |  if_ne	mov	result1, arg02
2a0c8     08 2A 06 F1 | 	add	local03, #8
2a0cc     15 FB 51 FC | 	wrword	result1, local03
2a0d0     08 2E 06 F1 | 	add	local05, #8
2a0d4     17 FB 01 F6 | 	mov	result1, local05
2a0d8                 | LR__3825
2a0d8     A7 F0 03 F6 | 	mov	ptra, fp
2a0dc     B2 00 A0 FD | 	call	#popregs_
2a0e0                 | __system___gc_tryalloc_ret
2a0e0     2D 00 64 FD | 	ret
2a0e4                 | 
2a0e4                 | __system___gc_alloc_managed
2a0e4     01 4A 05 F6 | 	mov	COUNT_, #1
2a0e8     A8 00 A0 FD | 	call	#pushregs_
2a0ec     09 27 02 F6 | 	mov	local01, arg01
2a0f0     00 14 06 F6 | 	mov	arg02, #0
2a0f4     1C 00 B0 FD | 	call	#__system___gc_doalloc
2a0f8     FD 14 0A F6 | 	mov	arg02, result1 wz
2a0fc     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2a100     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2a104     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2a108     A7 F0 03 F6 | 	mov	ptra, fp
2a10c     B2 00 A0 FD | 	call	#popregs_
2a110                 | __system___gc_alloc_managed_ret
2a110     2D 00 64 FD | 	ret
2a114                 | 
2a114                 | __system___gc_doalloc
2a114     06 4A 05 F6 | 	mov	COUNT_, #6
2a118     A8 00 A0 FD | 	call	#pushregs_
2a11c     09 27 0A F6 | 	mov	local01, arg01 wz
2a120     0A 29 02 F6 | 	mov	local02, arg02
2a124     00 FA 05 A6 |  if_e	mov	result1, #0
2a128     8C 00 90 AD |  if_e	jmp	#LR__3837
2a12c     17 26 06 F1 | 	add	local01, #23
2a130     0F 26 26 F5 | 	andn	local01, #15
2a134     04 26 46 F0 | 	shr	local01, #4
2a138     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a13c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a140     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a144     F8 BD BF FD | 	call	#__system___lockmem
2a148     13 13 02 F6 | 	mov	arg01, local01
2a14c     14 15 02 F6 | 	mov	arg02, local02
2a150     D8 FD BF FD | 	call	#__system___gc_tryalloc
2a154     FD 2A 0A F6 | 	mov	local03, result1 wz
2a158     14 00 90 5D |  if_ne	jmp	#LR__3830
2a15c     70 03 B0 FD | 	call	#__system___gc_docollect
2a160     13 13 02 F6 | 	mov	arg01, local01
2a164     14 15 02 F6 | 	mov	arg02, local02
2a168     C0 FD BF FD | 	call	#__system___gc_tryalloc
2a16c     FD 2A 02 F6 | 	mov	local03, result1
2a170                 | LR__3830
2a170     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a174     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a178     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a17c     09 01 68 FC | 	wrlong	#0, arg01
2a180     00 2A 0E F2 | 	cmp	local03, #0 wz
2a184     2C 00 90 AD |  if_e	jmp	#LR__3836
2a188     04 26 66 F0 | 	shl	local01, #4
2a18c     08 26 86 F1 | 	sub	local01, #8
2a190     13 2D 52 F6 | 	abs	local04, local01 wc
2a194     02 2C 46 F0 | 	shr	local04, #2
2a198     16 2F 8A F6 | 	negc	local05, local04 wz
2a19c     15 31 02 F6 | 	mov	local06, local03
2a1a0     10 00 90 AD |  if_e	jmp	#LR__3835
2a1a4     97 06 48 FB | 	callpa	#(@LR__3833-@LR__3831)>>2,fcache_load_ptr_
2a1a8                 | LR__3831
2a1a8     17 05 D8 FC | 	rep	@LR__3834, local05
2a1ac                 | LR__3832
2a1ac     18 01 68 FC | 	wrlong	#0, local06
2a1b0     04 30 06 F1 | 	add	local06, #4
2a1b4                 | LR__3833
2a1b4                 | LR__3834
2a1b4                 | LR__3835
2a1b4                 | LR__3836
2a1b4     15 FB 01 F6 | 	mov	result1, local03
2a1b8                 | LR__3837
2a1b8     A7 F0 03 F6 | 	mov	ptra, fp
2a1bc     B2 00 A0 FD | 	call	#popregs_
2a1c0                 | __system___gc_doalloc_ret
2a1c0     2D 00 64 FD | 	ret
2a1c4                 | 
2a1c4                 | __system___gc_isvalidptr
2a1c4     F8 16 06 F4 | 	bitl	arg03, #248
2a1c8     08 16 86 F1 | 	sub	arg03, #8
2a1cc     09 17 52 F2 | 	cmps	arg03, arg01 wc
2a1d0     08 00 90 CD |  if_b	jmp	#LR__3840
2a1d4     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2a1d8     08 00 90 CD |  if_b	jmp	#LR__3841
2a1dc                 | LR__3840
2a1dc     00 FA 05 F6 | 	mov	result1, #0
2a1e0     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2a1e4                 | LR__3841
2a1e4     0B 01 02 F6 | 	mov	_var01, arg03
2a1e8     09 01 62 F5 | 	xor	_var01, arg01
2a1ec     0F 00 CE F7 | 	test	_var01, #15 wz
2a1f0     00 FA 05 56 |  if_ne	mov	result1, #0
2a1f4     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2a1f8     0B 01 02 F6 | 	mov	_var01, arg03
2a1fc     02 00 06 F1 | 	add	_var01, #2
2a200     00 01 E2 FA | 	rdword	_var01, _var01
2a204     7F 00 00 FF 
2a208     C0 01 06 F5 | 	and	_var01, ##65472
2a20c     36 00 00 FF 
2a210     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2a214     00 FA 05 56 |  if_ne	mov	result1, #0
2a218     0B FB 01 A6 |  if_e	mov	result1, arg03
2a21c                 | __system___gc_isvalidptr_ret
2a21c     2D 00 64 FD | 	ret
2a220                 | 
2a220                 | __system___gc_free
2a220     09 17 02 F6 | 	mov	arg03, arg01
2a224     6C FC BF FD | 	call	#__system___gc_ptrs
2a228     FD 12 02 F6 | 	mov	arg01, result1
2a22c     FE 14 02 F6 | 	mov	arg02, result2
2a230     90 FF BF FD | 	call	#__system___gc_isvalidptr
2a234     FD 14 0A F6 | 	mov	arg02, result1 wz
2a238     28 00 90 AD |  if_e	jmp	#LR__3850
2a23c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a240     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a244     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a248     F4 BC BF FD | 	call	#__system___lockmem
2a24c     0A 13 02 F6 | 	mov	arg01, arg02
2a250     14 00 B0 FD | 	call	#__system___gc_dofree
2a254     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2a258     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2a25c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2a260     09 01 68 FC | 	wrlong	#0, arg01
2a264                 | LR__3850
2a264                 | __system___gc_free_ret
2a264     2D 00 64 FD | 	ret
2a268                 | 
2a268                 | __system___gc_dofree
2a268     06 4A 05 F6 | 	mov	COUNT_, #6
2a26c     A8 00 A0 FD | 	call	#pushregs_
2a270     09 27 02 F6 | 	mov	local01, arg01
2a274     1C FC BF FD | 	call	#__system___gc_ptrs
2a278     FD 28 02 F6 | 	mov	local02, result1
2a27c     FE 2A 02 F6 | 	mov	local03, result2
2a280     13 15 02 F6 | 	mov	arg02, local01
2a284     02 14 06 F1 | 	add	arg02, #2
2a288     36 00 80 FF 
2a28c     0A 1F 59 FC | 	wrword	##27791, arg02
2a290     13 2D 02 F6 | 	mov	local04, local01
2a294     13 13 02 F6 | 	mov	arg01, local01
2a298     09 2F EA FA | 	rdword	local05, arg01 wz
2a29c     00 FA 05 A6 |  if_e	mov	result1, #0
2a2a0     04 2E 66 50 |  if_ne	shl	local05, #4
2a2a4     17 13 02 51 |  if_ne	add	arg01, local05
2a2a8     09 FB 01 56 |  if_ne	mov	result1, arg01
2a2ac     FD 30 02 F6 | 	mov	local06, result1
2a2b0     97 24 48 FB | 	callpa	#(@LR__3861-@LR__3860)>>2,fcache_load_ptr_
2a2b4                 | LR__3860
2a2b4     04 2C 06 F1 | 	add	local04, #4
2a2b8     16 15 EA FA | 	rdword	arg02, local04 wz
2a2bc     14 13 02 F6 | 	mov	arg01, local02
2a2c0     00 FA 05 A6 |  if_e	mov	result1, #0
2a2c4     04 14 66 50 |  if_ne	shl	arg02, #4
2a2c8     0A 13 02 51 |  if_ne	add	arg01, arg02
2a2cc     09 FB 01 56 |  if_ne	mov	result1, arg01
2a2d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2a2d4     24 00 90 AD |  if_e	jmp	#LR__3862
2a2d8     16 13 02 F6 | 	mov	arg01, local04
2a2dc     00 FA 05 F6 | 	mov	result1, #0
2a2e0     02 12 06 F1 | 	add	arg01, #2
2a2e4     09 13 E2 FA | 	rdword	arg01, arg01
2a2e8     36 00 00 FF 
2a2ec     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a2f0     01 FA 65 A6 |  if_e	neg	result1, #1
2a2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2f8     B8 FF 9F AD |  if_e	jmp	#LR__3860
2a2fc                 | LR__3861
2a2fc                 | LR__3862
2a2fc     00 2C 0E F2 | 	cmp	local04, #0 wz
2a300     14 2D 02 A6 |  if_e	mov	local04, local02
2a304     16 15 02 F6 | 	mov	arg02, local04
2a308     06 14 06 F1 | 	add	arg02, #6
2a30c     13 13 02 F6 | 	mov	arg01, local01
2a310     0A 15 E2 FA | 	rdword	arg02, arg02
2a314     06 12 06 F1 | 	add	arg01, #6
2a318     09 15 52 FC | 	wrword	arg02, arg01
2a31c     13 15 0A F6 | 	mov	arg02, local01 wz
2a320     00 FA 05 A6 |  if_e	mov	result1, #0
2a324     14 15 82 51 |  if_ne	sub	arg02, local02
2a328     04 14 46 50 |  if_ne	shr	arg02, #4
2a32c     0A FB 01 56 |  if_ne	mov	result1, arg02
2a330     16 15 02 F6 | 	mov	arg02, local04
2a334     06 14 06 F1 | 	add	arg02, #6
2a338     0A FB 51 FC | 	wrword	result1, arg02
2a33c     14 2D 0A F2 | 	cmp	local04, local02 wz
2a340     A4 00 90 AD |  if_e	jmp	#LR__3865
2a344     16 13 02 F6 | 	mov	arg01, local04
2a348     09 2F EA FA | 	rdword	local05, arg01 wz
2a34c     00 FA 05 A6 |  if_e	mov	result1, #0
2a350     04 2E 66 50 |  if_ne	shl	local05, #4
2a354     17 13 02 51 |  if_ne	add	arg01, local05
2a358     09 FB 01 56 |  if_ne	mov	result1, arg01
2a35c     13 FB 09 F2 | 	cmp	result1, local01 wz
2a360     84 00 90 5D |  if_ne	jmp	#LR__3864
2a364     16 31 E2 FA | 	rdword	local06, local04
2a368     13 15 E2 FA | 	rdword	arg02, local01
2a36c     0A 31 02 F1 | 	add	local06, arg02
2a370     16 31 52 FC | 	wrword	local06, local04
2a374     13 31 02 F6 | 	mov	local06, local01
2a378     02 30 06 F1 | 	add	local06, #2
2a37c     18 01 58 FC | 	wrword	#0, local06
2a380     13 13 02 F6 | 	mov	arg01, local01
2a384     09 2F EA FA | 	rdword	local05, arg01 wz
2a388     00 FA 05 A6 |  if_e	mov	result1, #0
2a38c     04 2E 66 50 |  if_ne	shl	local05, #4
2a390     17 13 02 51 |  if_ne	add	arg01, local05
2a394     09 FB 01 56 |  if_ne	mov	result1, arg01
2a398     FD 30 02 F6 | 	mov	local06, result1
2a39c     15 31 52 F2 | 	cmps	local06, local03 wc
2a3a0     20 00 90 3D |  if_ae	jmp	#LR__3863
2a3a4     16 15 0A F6 | 	mov	arg02, local04 wz
2a3a8     00 FA 05 A6 |  if_e	mov	result1, #0
2a3ac     14 15 82 51 |  if_ne	sub	arg02, local02
2a3b0     04 14 46 50 |  if_ne	shr	arg02, #4
2a3b4     0A FB 01 56 |  if_ne	mov	result1, arg02
2a3b8     18 15 02 F6 | 	mov	arg02, local06
2a3bc     04 14 06 F1 | 	add	arg02, #4
2a3c0     0A FB 51 FC | 	wrword	result1, arg02
2a3c4                 | LR__3863
2a3c4     13 15 02 F6 | 	mov	arg02, local01
2a3c8     06 14 06 F1 | 	add	arg02, #6
2a3cc     16 FD 01 F6 | 	mov	result2, local04
2a3d0     0A 15 E2 FA | 	rdword	arg02, arg02
2a3d4     06 FC 05 F1 | 	add	result2, #6
2a3d8     FE 14 52 FC | 	wrword	arg02, result2
2a3dc     06 26 06 F1 | 	add	local01, #6
2a3e0     13 01 58 FC | 	wrword	#0, local01
2a3e4     16 27 02 F6 | 	mov	local01, local04
2a3e8                 | LR__3864
2a3e8                 | LR__3865
2a3e8     13 13 02 F6 | 	mov	arg01, local01
2a3ec     09 2F EA FA | 	rdword	local05, arg01 wz
2a3f0     00 FA 05 A6 |  if_e	mov	result1, #0
2a3f4     04 2E 66 50 |  if_ne	shl	local05, #4
2a3f8     17 13 02 51 |  if_ne	add	arg01, local05
2a3fc     09 FB 01 56 |  if_ne	mov	result1, arg01
2a400     FD 14 0A F6 | 	mov	arg02, result1 wz
2a404     B8 00 90 AD |  if_e	jmp	#LR__3867
2a408     15 15 52 F2 | 	cmps	arg02, local03 wc
2a40c     B0 00 90 3D |  if_ae	jmp	#LR__3867
2a410     0A 13 02 F6 | 	mov	arg01, arg02
2a414     00 FA 05 F6 | 	mov	result1, #0
2a418     02 12 06 F1 | 	add	arg01, #2
2a41c     09 13 E2 FA | 	rdword	arg01, arg01
2a420     36 00 00 FF 
2a424     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a428     01 FA 65 A6 |  if_e	neg	result1, #1
2a42c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a430     8C 00 90 AD |  if_e	jmp	#LR__3867
2a434     13 2D 02 F6 | 	mov	local04, local01
2a438     16 31 E2 FA | 	rdword	local06, local04
2a43c     0A 13 02 F6 | 	mov	arg01, arg02
2a440     09 27 E2 FA | 	rdword	local01, arg01
2a444     13 31 02 F1 | 	add	local06, local01
2a448     16 31 52 FC | 	wrword	local06, local04
2a44c     09 31 02 F6 | 	mov	local06, arg01
2a450     06 30 06 F1 | 	add	local06, #6
2a454     16 27 02 F6 | 	mov	local01, local04
2a458     18 31 E2 FA | 	rdword	local06, local06
2a45c     06 26 06 F1 | 	add	local01, #6
2a460     13 31 52 FC | 	wrword	local06, local01
2a464     09 31 02 F6 | 	mov	local06, arg01
2a468     02 30 06 F1 | 	add	local06, #2
2a46c     18 55 59 FC | 	wrword	#170, local06
2a470     09 31 02 F6 | 	mov	local06, arg01
2a474     06 30 06 F1 | 	add	local06, #6
2a478     18 01 58 FC | 	wrword	#0, local06
2a47c     09 2F EA FA | 	rdword	local05, arg01 wz
2a480     00 FA 05 A6 |  if_e	mov	result1, #0
2a484     04 2E 66 50 |  if_ne	shl	local05, #4
2a488     17 13 02 51 |  if_ne	add	arg01, local05
2a48c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a490     FD 30 0A F6 | 	mov	local06, result1 wz
2a494     28 00 90 AD |  if_e	jmp	#LR__3866
2a498     15 31 52 F2 | 	cmps	local06, local03 wc
2a49c     20 00 90 3D |  if_ae	jmp	#LR__3866
2a4a0     16 15 0A F6 | 	mov	arg02, local04 wz
2a4a4     00 FA 05 A6 |  if_e	mov	result1, #0
2a4a8     14 15 82 51 |  if_ne	sub	arg02, local02
2a4ac     04 14 46 50 |  if_ne	shr	arg02, #4
2a4b0     0A FB 01 56 |  if_ne	mov	result1, arg02
2a4b4     18 2D 02 F6 | 	mov	local04, local06
2a4b8     04 2C 06 F1 | 	add	local04, #4
2a4bc     16 FB 51 FC | 	wrword	result1, local04
2a4c0                 | LR__3866
2a4c0                 | LR__3867
2a4c0     18 FB 01 F6 | 	mov	result1, local06
2a4c4     A7 F0 03 F6 | 	mov	ptra, fp
2a4c8     B2 00 A0 FD | 	call	#popregs_
2a4cc                 | __system___gc_dofree_ret
2a4cc     2D 00 64 FD | 	ret
2a4d0                 | 
2a4d0                 | __system___gc_docollect
2a4d0     05 4A 05 F6 | 	mov	COUNT_, #5
2a4d4     A8 00 A0 FD | 	call	#pushregs_
2a4d8     B8 F9 BF FD | 	call	#__system___gc_ptrs
2a4dc     FE 26 02 F6 | 	mov	local01, result2
2a4e0     FD 28 02 F6 | 	mov	local02, result1
2a4e4     14 13 02 F6 | 	mov	arg01, local02
2a4e8     09 2B EA FA | 	rdword	local03, arg01 wz
2a4ec     00 FA 05 A6 |  if_e	mov	result1, #0
2a4f0     04 2A 66 50 |  if_ne	shl	local03, #4
2a4f4     15 13 02 51 |  if_ne	add	arg01, local03
2a4f8     09 FB 01 56 |  if_ne	mov	result1, arg01
2a4fc     FD 2C 0A F6 | 	mov	local04, result1 wz
2a500     00 FA 05 F6 | 	mov	result1, #0
2a504     01 FA 61 FD | 	cogid	result1
2a508     FD 2E 02 F6 | 	mov	local05, result1
2a50c     48 00 90 AD |  if_e	jmp	#LR__3872
2a510     97 22 48 FB | 	callpa	#(@LR__3871-@LR__3870)>>2,fcache_load_ptr_
2a514                 | LR__3870
2a514     13 2D 52 F2 | 	cmps	local04, local01 wc
2a518     3C 00 90 3D |  if_ae	jmp	#LR__3872
2a51c     16 15 02 F6 | 	mov	arg02, local04
2a520     02 14 06 F1 | 	add	arg02, #2
2a524     0A 15 E2 FA | 	rdword	arg02, arg02
2a528     20 14 26 F5 | 	andn	arg02, #32
2a52c     16 13 02 F6 | 	mov	arg01, local04
2a530     02 12 06 F1 | 	add	arg01, #2
2a534     09 15 52 FC | 	wrword	arg02, arg01
2a538     16 13 02 F6 | 	mov	arg01, local04
2a53c     09 2B EA FA | 	rdword	local03, arg01 wz
2a540     00 FA 05 A6 |  if_e	mov	result1, #0
2a544     04 2A 66 50 |  if_ne	shl	local03, #4
2a548     15 13 02 51 |  if_ne	add	arg01, local03
2a54c     09 FB 01 56 |  if_ne	mov	result1, arg01
2a550     FD 2C 0A F6 | 	mov	local04, result1 wz
2a554     BC FF 9F 5D |  if_ne	jmp	#LR__3870
2a558                 | LR__3871
2a558                 | LR__3872
2a558     00 2A 06 F6 | 	mov	local03, #0
2a55c     00 12 06 F6 | 	mov	arg01, #0
2a560     B4 B9 BF FD | 	call	#__system____topofstack
2a564     FD 14 02 F6 | 	mov	arg02, result1
2a568     15 13 02 F6 | 	mov	arg01, local03
2a56c     90 00 B0 FD | 	call	#__system___gc_markhub
2a570     1C 01 B0 FD | 	call	#__system___gc_markcog
2a574     14 13 02 F6 | 	mov	arg01, local02
2a578     09 2B EA FA | 	rdword	local03, arg01 wz
2a57c     00 FA 05 A6 |  if_e	mov	result1, #0
2a580     04 2A 66 50 |  if_ne	shl	local03, #4
2a584     15 13 02 51 |  if_ne	add	arg01, local03
2a588     09 FB 01 56 |  if_ne	mov	result1, arg01
2a58c     FD 28 0A F6 | 	mov	local02, result1 wz
2a590     60 00 90 AD |  if_e	jmp	#LR__3876
2a594                 | LR__3873
2a594     14 2D 02 F6 | 	mov	local04, local02
2a598     16 13 02 F6 | 	mov	arg01, local04
2a59c     09 2B EA FA | 	rdword	local03, arg01 wz
2a5a0     00 FA 05 A6 |  if_e	mov	result1, #0
2a5a4     04 2A 66 50 |  if_ne	shl	local03, #4
2a5a8     15 13 02 51 |  if_ne	add	arg01, local03
2a5ac     09 FB 01 56 |  if_ne	mov	result1, arg01
2a5b0     FD 28 02 F6 | 	mov	local02, result1
2a5b4     16 15 02 F6 | 	mov	arg02, local04
2a5b8     02 14 06 F1 | 	add	arg02, #2
2a5bc     0A 15 E2 FA | 	rdword	arg02, arg02
2a5c0     20 14 CE F7 | 	test	arg02, #32 wz
2a5c4     10 14 CE A7 |  if_e	test	arg02, #16 wz
2a5c8     1C 00 90 5D |  if_ne	jmp	#LR__3875
2a5cc     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2a5d0     17 15 0A F2 | 	cmp	arg02, local05 wz
2a5d4     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2a5d8     0C 00 90 5D |  if_ne	jmp	#LR__3874
2a5dc     16 13 02 F6 | 	mov	arg01, local04
2a5e0     84 FC BF FD | 	call	#__system___gc_dofree
2a5e4     FD 28 02 F6 | 	mov	local02, result1
2a5e8                 | LR__3874
2a5e8                 | LR__3875
2a5e8     00 28 0E F2 | 	cmp	local02, #0 wz
2a5ec     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2a5f0     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3873
2a5f4                 | LR__3876
2a5f4     A7 F0 03 F6 | 	mov	ptra, fp
2a5f8     B2 00 A0 FD | 	call	#popregs_
2a5fc                 | __system___gc_docollect_ret
2a5fc     2D 00 64 FD | 	ret
2a600                 | 
2a600                 | __system___gc_markhub
2a600     04 4A 05 F6 | 	mov	COUNT_, #4
2a604     A8 00 A0 FD | 	call	#pushregs_
2a608     09 27 02 F6 | 	mov	local01, arg01
2a60c     0A 29 02 F6 | 	mov	local02, arg02
2a610     80 F8 BF FD | 	call	#__system___gc_ptrs
2a614     FD 2A 02 F6 | 	mov	local03, result1
2a618     FE 2C 02 F6 | 	mov	local04, result2
2a61c                 | LR__3880
2a61c     14 27 52 F2 | 	cmps	local01, local02 wc
2a620     60 00 90 3D |  if_ae	jmp	#LR__3881
2a624     13 17 02 FB | 	rdlong	arg03, local01
2a628     04 26 06 F1 | 	add	local01, #4
2a62c     16 15 02 F6 | 	mov	arg02, local04
2a630     15 13 02 F6 | 	mov	arg01, local03
2a634     8C FB BF FD | 	call	#__system___gc_isvalidptr
2a638     FD 16 0A F6 | 	mov	arg03, result1 wz
2a63c     DC FF 9F AD |  if_e	jmp	#LR__3880
2a640     0B 13 02 F6 | 	mov	arg01, arg03
2a644     00 FA 05 F6 | 	mov	result1, #0
2a648     02 12 06 F1 | 	add	arg01, #2
2a64c     09 13 E2 FA | 	rdword	arg01, arg01
2a650     36 00 00 FF 
2a654     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2a658     01 FA 65 A6 |  if_e	neg	result1, #1
2a65c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a660     B8 FF 9F 5D |  if_ne	jmp	#LR__3880
2a664     0B FD 01 F6 | 	mov	result2, arg03
2a668     02 FC 05 F1 | 	add	result2, #2
2a66c     FE FC E1 FA | 	rdword	result2, result2
2a670     0F FC 25 F5 | 	andn	result2, #15
2a674     2E FC 45 F5 | 	or	result2, #46
2a678     02 16 06 F1 | 	add	arg03, #2
2a67c     0B FD 51 FC | 	wrword	result2, arg03
2a680     98 FF 9F FD | 	jmp	#LR__3880
2a684                 | LR__3881
2a684     A7 F0 03 F6 | 	mov	ptra, fp
2a688     B2 00 A0 FD | 	call	#popregs_
2a68c                 | __system___gc_markhub_ret
2a68c     2D 00 64 FD | 	ret
2a690                 | 
2a690                 | __system___gc_markcog
2a690     04 4A 05 F6 | 	mov	COUNT_, #4
2a694     A8 00 A0 FD | 	call	#pushregs_
2a698     F8 F7 BF FD | 	call	#__system___gc_ptrs
2a69c     FD 26 02 F6 | 	mov	local01, result1
2a6a0     FE 28 02 F6 | 	mov	local02, result2
2a6a4     EF 2B 06 F6 | 	mov	local03, #495
2a6a8                 | LR__3890
2a6a8                 | 	'.live	local03
2a6a8     00 2A 96 F9 | 	alts	local03, #0
2a6ac     15 2D 02 F6 | 	mov	local04, local03
2a6b0     13 13 02 F6 | 	mov	arg01, local01
2a6b4     14 15 02 F6 | 	mov	arg02, local02
2a6b8     16 17 02 F6 | 	mov	arg03, local04
2a6bc     04 FB BF FD | 	call	#__system___gc_isvalidptr
2a6c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6c4     18 00 90 AD |  if_e	jmp	#LR__3891
2a6c8     FD 2C 02 F6 | 	mov	local04, result1
2a6cc     02 2C 06 F1 | 	add	local04, #2
2a6d0     16 2D E2 FA | 	rdword	local04, local04
2a6d4     20 2C 46 F5 | 	or	local04, #32
2a6d8     02 FA 05 F1 | 	add	result1, #2
2a6dc     FD 2C 52 FC | 	wrword	local04, result1
2a6e0                 | LR__3891
2a6e0     01 2A 86 F1 | 	sub	local03, #1
2a6e4     00 2A 56 F2 | 	cmps	local03, #0 wc
2a6e8     BC FF 9F 3D |  if_ae	jmp	#LR__3890
2a6ec     A7 F0 03 F6 | 	mov	ptra, fp
2a6f0     B2 00 A0 FD | 	call	#popregs_
2a6f4                 | __system___gc_markcog_ret
2a6f4     2D 00 64 FD | 	ret
2a6f8                 | 
2a6f8                 | __system__opendir
2a6f8     06 4A 05 F6 | 	mov	COUNT_, #6
2a6fc     A8 00 A0 FD | 	call	#pushregs_
2a700     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a704     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2a708     09 15 02 F6 | 	mov	arg02, arg01
2a70c     13 13 02 F6 | 	mov	arg01, local01
2a710     00 16 06 F6 | 	mov	arg03, #0
2a714     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a718     BC BF BF FD | 	call	#__system____getvfsforfile
2a71c     FD 28 0A F6 | 	mov	local02, result1 wz
2a720     10 00 90 AD |  if_e	jmp	#LR__3900
2a724     28 28 06 F1 | 	add	local02, #40
2a728     14 17 0A FB | 	rdlong	arg03, local02 wz
2a72c     28 28 86 F1 | 	sub	local02, #40
2a730     14 00 90 5D |  if_ne	jmp	#LR__3901
2a734                 | LR__3900
2a734     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a738     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a73c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a740     00 FA 05 F6 | 	mov	result1, #0
2a744     90 00 90 FD | 	jmp	#LR__3903
2a748                 | LR__3901
2a748     5C 12 06 F6 | 	mov	arg01, #92
2a74c     10 14 06 F6 | 	mov	arg02, #16
2a750     C0 F9 BF FD | 	call	#__system___gc_doalloc
2a754     FD 2A 0A F6 | 	mov	local03, result1 wz
2a758     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2a75c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2a760     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2a764     00 FA 05 A6 |  if_e	mov	result1, #0
2a768     6C 00 90 AD |  if_e	jmp	#LR__3903
2a76c     28 28 06 F1 | 	add	local02, #40
2a770     14 2D 02 FB | 	rdlong	local04, local02
2a774     16 2F 02 F6 | 	mov	local05, local04
2a778     28 28 86 F1 | 	sub	local02, #40
2a77c     13 2E 46 F7 | 	zerox	local05, #19
2a780     14 2C 46 F0 | 	shr	local04, #20
2a784     02 2C 66 F0 | 	shl	local04, #2
2a788     ED 2C 02 F1 | 	add	local04, __methods__
2a78c     16 2D 02 FB | 	rdlong	local04, local04
2a790     15 13 02 F6 | 	mov	arg01, local03
2a794     13 15 02 F6 | 	mov	arg02, local01
2a798     F2 30 02 F6 | 	mov	local06, objptr
2a79c     17 E5 01 F6 | 	mov	objptr, local05
2a7a0     2D 2C 62 FD | 	call	local04
2a7a4     18 E5 01 F6 | 	mov	objptr, local06
2a7a8     FD 16 0A F6 | 	mov	arg03, result1 wz
2a7ac     20 00 90 AD |  if_e	jmp	#LR__3902
2a7b0     00 16 4E F2 | 	cmps	arg03, #0 wz
2a7b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a7b8     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2a7bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a7c0     15 13 02 F6 | 	mov	arg01, local03
2a7c4     58 FA BF FD | 	call	#__system___gc_free
2a7c8     00 FA 05 F6 | 	mov	result1, #0
2a7cc     08 00 90 FD | 	jmp	#LR__3903
2a7d0                 | LR__3902
2a7d0     15 29 62 FC | 	wrlong	local02, local03
2a7d4     15 FB 01 F6 | 	mov	result1, local03
2a7d8                 | LR__3903
2a7d8     A7 F0 03 F6 | 	mov	ptra, fp
2a7dc     B2 00 A0 FD | 	call	#popregs_
2a7e0                 | __system__opendir_ret
2a7e0     2D 00 64 FD | 	ret
2a7e4                 | 
2a7e4                 | __system__closedir
2a7e4     04 4A 05 F6 | 	mov	COUNT_, #4
2a7e8     A8 00 A0 FD | 	call	#pushregs_
2a7ec     09 27 02 F6 | 	mov	local01, arg01
2a7f0     13 13 02 FB | 	rdlong	arg01, local01
2a7f4     2C 12 06 F1 | 	add	arg01, #44
2a7f8     09 29 02 FB | 	rdlong	local02, arg01
2a7fc     14 2B 02 F6 | 	mov	local03, local02
2a800     13 2A 46 F7 | 	zerox	local03, #19
2a804     14 28 46 F0 | 	shr	local02, #20
2a808     02 28 66 F0 | 	shl	local02, #2
2a80c     ED 28 02 F1 | 	add	local02, __methods__
2a810     14 29 02 FB | 	rdlong	local02, local02
2a814     13 13 02 F6 | 	mov	arg01, local01
2a818     F2 2C 02 F6 | 	mov	local04, objptr
2a81c     15 E5 01 F6 | 	mov	objptr, local03
2a820     2D 28 62 FD | 	call	local02
2a824     16 E5 01 F6 | 	mov	objptr, local04
2a828     FD 2C 02 F6 | 	mov	local04, result1
2a82c     13 13 02 F6 | 	mov	arg01, local01
2a830     EC F9 BF FD | 	call	#__system___gc_free
2a834     00 2C 4E F2 | 	cmps	local04, #0 wz
2a838     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a83c     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2a840     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a844     01 FA 65 56 |  if_ne	neg	result1, #1
2a848     00 FA 05 A6 |  if_e	mov	result1, #0
2a84c     A7 F0 03 F6 | 	mov	ptra, fp
2a850     B2 00 A0 FD | 	call	#popregs_
2a854                 | __system__closedir_ret
2a854     2D 00 64 FD | 	ret
2a858                 | 
2a858                 | __system__readdir
2a858     04 4A 05 F6 | 	mov	COUNT_, #4
2a85c     A8 00 A0 FD | 	call	#pushregs_
2a860     09 15 0A FB | 	rdlong	arg02, arg01 wz
2a864     08 12 06 F1 | 	add	arg01, #8
2a868     09 27 02 F6 | 	mov	local01, arg01
2a86c     08 12 86 F1 | 	sub	arg01, #8
2a870     00 FA 05 A6 |  if_e	mov	result1, #0
2a874     5C 00 90 AD |  if_e	jmp	#LR__3911
2a878     30 14 06 F1 | 	add	arg02, #48
2a87c     0A 29 02 FB | 	rdlong	local02, arg02
2a880     14 2B 02 F6 | 	mov	local03, local02
2a884     13 2A 46 F7 | 	zerox	local03, #19
2a888     14 28 46 F0 | 	shr	local02, #20
2a88c     02 28 66 F0 | 	shl	local02, #2
2a890     ED 28 02 F1 | 	add	local02, __methods__
2a894     14 29 02 FB | 	rdlong	local02, local02
2a898     13 15 02 F6 | 	mov	arg02, local01
2a89c     F2 2C 02 F6 | 	mov	local04, objptr
2a8a0     15 E5 01 F6 | 	mov	objptr, local03
2a8a4     2D 28 62 FD | 	call	local02
2a8a8     16 E5 01 F6 | 	mov	objptr, local04
2a8ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2a8b0     1C 00 90 AD |  if_e	jmp	#LR__3910
2a8b4     01 FA 55 F2 | 	cmps	result1, #1 wc
2a8b8     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2a8bc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2a8c0     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2a8c4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2a8c8     00 FA 05 F6 | 	mov	result1, #0
2a8cc     04 00 90 FD | 	jmp	#LR__3911
2a8d0                 | LR__3910
2a8d0     13 FB 01 F6 | 	mov	result1, local01
2a8d4                 | LR__3911
2a8d4     A7 F0 03 F6 | 	mov	ptra, fp
2a8d8     B2 00 A0 FD | 	call	#popregs_
2a8dc                 | __system__readdir_ret
2a8dc     2D 00 64 FD | 	ret
2a8e0                 | 
2a8e0                 | __system___openraw
2a8e0     15 4A 05 F6 | 	mov	COUNT_, #21
2a8e4     A8 00 A0 FD | 	call	#pushregs_
2a8e8     09 27 02 F6 | 	mov	local01, arg01
2a8ec     0A 29 02 F6 | 	mov	local02, arg02
2a8f0     0B 2B 02 F6 | 	mov	local03, arg03
2a8f4     0C 2D 02 F6 | 	mov	local04, arg04
2a8f8     04 2E 06 F6 | 	mov	local05, #4
2a8fc     13 31 02 F6 | 	mov	local06, local01
2a900     00 32 06 F6 | 	mov	local07, #0
2a904     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2a908     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2a90c     1A 13 02 F6 | 	mov	arg01, local08
2a910     14 15 02 F6 | 	mov	arg02, local02
2a914     00 16 06 F6 | 	mov	arg03, #0
2a918     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2a91c     B8 BD BF FD | 	call	#__system____getvfsforfile
2a920     FD 36 0A F6 | 	mov	local09, result1 wz
2a924     10 00 90 AD |  if_e	jmp	#LR__3920
2a928     20 36 06 F1 | 	add	local09, #32
2a92c     1B FB 09 FB | 	rdlong	result1, local09 wz
2a930     20 36 86 F1 | 	sub	local09, #32
2a934     14 00 90 5D |  if_ne	jmp	#LR__3921
2a938                 | LR__3920
2a938     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2a93c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2a940     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2a944     01 FA 65 F6 | 	neg	result1, #1
2a948     8C 02 90 FD | 	jmp	#LR__3934
2a94c                 | LR__3921
2a94c     18 13 02 F6 | 	mov	arg01, local06
2a950     00 14 06 F6 | 	mov	arg02, #0
2a954     34 16 06 F6 | 	mov	arg03, #52
2a958     09 39 02 F6 | 	mov	local10, arg01
2a95c     98 00 A0 FD | 	call	#\builtin_bytefill_
2a960     20 36 06 F1 | 	add	local09, #32
2a964     1B 3B 02 FB | 	rdlong	local11, local09
2a968     1D 3D 02 F6 | 	mov	local12, local11
2a96c     1D 3F 02 F6 | 	mov	local13, local11
2a970     20 36 86 F1 | 	sub	local09, #32
2a974     1F 41 02 F6 | 	mov	local14, local13
2a978     13 3C 46 F7 | 	zerox	local12, #19
2a97c     14 40 46 F0 | 	shr	local14, #20
2a980     02 40 66 F0 | 	shl	local14, #2
2a984     ED 40 02 F1 | 	add	local14, __methods__
2a988     20 41 02 FB | 	rdlong	local14, local14
2a98c     18 43 02 F6 | 	mov	local15, local06
2a990     1A 45 02 F6 | 	mov	local16, local08
2a994     15 47 02 F6 | 	mov	local17, local03
2a998     21 13 02 F6 | 	mov	arg01, local15
2a99c     22 15 02 F6 | 	mov	arg02, local16
2a9a0     23 17 02 F6 | 	mov	arg03, local17
2a9a4     F2 48 02 F6 | 	mov	local18, objptr
2a9a8     1E E5 01 F6 | 	mov	objptr, local12
2a9ac     2D 40 62 FD | 	call	local14
2a9b0     24 E5 01 F6 | 	mov	objptr, local18
2a9b4     FD 4A 0A F6 | 	mov	local19, result1 wz
2a9b8     04 2A CE 57 |  if_ne	test	local03, #4 wz
2a9bc     58 00 90 AD |  if_e	jmp	#LR__3922
2a9c0     24 36 06 F1 | 	add	local09, #36
2a9c4     1B 3B 02 FB | 	rdlong	local11, local09
2a9c8     1D 3D 02 F6 | 	mov	local12, local11
2a9cc     1D 3F 02 F6 | 	mov	local13, local11
2a9d0     24 36 86 F1 | 	sub	local09, #36
2a9d4     1F 41 02 F6 | 	mov	local14, local13
2a9d8     13 3C 46 F7 | 	zerox	local12, #19
2a9dc     14 40 46 F0 | 	shr	local14, #20
2a9e0     02 40 66 F0 | 	shl	local14, #2
2a9e4     ED 40 02 F1 | 	add	local14, __methods__
2a9e8     20 41 02 FB | 	rdlong	local14, local14
2a9ec     18 43 02 F6 | 	mov	local15, local06
2a9f0     1A 45 02 F6 | 	mov	local16, local08
2a9f4     16 47 02 F6 | 	mov	local17, local04
2a9f8     21 13 02 F6 | 	mov	arg01, local15
2a9fc     22 15 02 F6 | 	mov	arg02, local16
2aa00     23 17 02 F6 | 	mov	arg03, local17
2aa04     F2 48 02 F6 | 	mov	local18, objptr
2aa08     1E E5 01 F6 | 	mov	objptr, local12
2aa0c     2D 40 62 FD | 	call	local14
2aa10     24 E5 01 F6 | 	mov	objptr, local18
2aa14     FD 4A 02 F6 | 	mov	local19, result1
2aa18                 | LR__3922
2aa18     00 4A 0E F2 | 	cmp	local19, #0 wz
2aa1c     8C 01 90 5D |  if_ne	jmp	#LR__3932
2aa20     15 4D 02 F6 | 	mov	local20, local03
2aa24     03 4C 0E F5 | 	and	local20, #3 wz
2aa28     02 2E 46 55 |  if_ne	or	local05, #2
2aa2c     01 4C 0E F2 | 	cmp	local20, #1 wz
2aa30     01 2E 46 55 |  if_ne	or	local05, #1
2aa34     20 2A CE F7 | 	test	local03, #32 wz
2aa38     C0 2E 46 55 |  if_ne	or	local05, #192
2aa3c     08 30 06 F1 | 	add	local06, #8
2aa40     18 2F 62 FC | 	wrlong	local05, local06
2aa44     0C 30 06 F1 | 	add	local06, #12
2aa48     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa4c     14 30 86 F1 | 	sub	local06, #20
2aa50     18 00 90 5D |  if_ne	jmp	#LR__3923
2aa54     04 36 06 F1 | 	add	local09, #4
2aa58     1B 4F 02 FB | 	rdlong	local21, local09
2aa5c     04 36 86 F1 | 	sub	local09, #4
2aa60     14 30 06 F1 | 	add	local06, #20
2aa64     18 4F 62 FC | 	wrlong	local21, local06
2aa68     14 30 86 F1 | 	sub	local06, #20
2aa6c                 | LR__3923
2aa6c     18 30 06 F1 | 	add	local06, #24
2aa70     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa74     18 30 86 F1 | 	sub	local06, #24
2aa78     18 00 90 5D |  if_ne	jmp	#LR__3924
2aa7c     08 36 06 F1 | 	add	local09, #8
2aa80     1B 4F 02 FB | 	rdlong	local21, local09
2aa84     08 36 86 F1 | 	sub	local09, #8
2aa88     18 30 06 F1 | 	add	local06, #24
2aa8c     18 4F 62 FC | 	wrlong	local21, local06
2aa90     18 30 86 F1 | 	sub	local06, #24
2aa94                 | LR__3924
2aa94     24 30 06 F1 | 	add	local06, #36
2aa98     18 4F 0A FB | 	rdlong	local21, local06 wz
2aa9c     24 30 86 F1 | 	sub	local06, #36
2aaa0     1B 4F 02 AB |  if_e	rdlong	local21, local09
2aaa4     24 30 06 A1 |  if_e	add	local06, #36
2aaa8     18 4F 62 AC |  if_e	wrlong	local21, local06
2aaac     24 30 86 A1 |  if_e	sub	local06, #36
2aab0     28 30 06 F1 | 	add	local06, #40
2aab4     18 4F 0A FB | 	rdlong	local21, local06 wz
2aab8     28 30 86 F1 | 	sub	local06, #40
2aabc     18 00 90 5D |  if_ne	jmp	#LR__3925
2aac0     10 36 06 F1 | 	add	local09, #16
2aac4     1B 4F 02 FB | 	rdlong	local21, local09
2aac8     10 36 86 F1 | 	sub	local09, #16
2aacc     28 30 06 F1 | 	add	local06, #40
2aad0     18 4F 62 FC | 	wrlong	local21, local06
2aad4     28 30 86 F1 | 	sub	local06, #40
2aad8                 | LR__3925
2aad8     30 30 06 F1 | 	add	local06, #48
2aadc     18 4F 0A FB | 	rdlong	local21, local06 wz
2aae0     30 30 86 F1 | 	sub	local06, #48
2aae4     18 00 90 5D |  if_ne	jmp	#LR__3926
2aae8     0C 36 06 F1 | 	add	local09, #12
2aaec     1B 4F 02 FB | 	rdlong	local21, local09
2aaf0     0C 36 86 F1 | 	sub	local09, #12
2aaf4     30 30 06 F1 | 	add	local06, #48
2aaf8     18 4F 62 FC | 	wrlong	local21, local06
2aafc     30 30 86 F1 | 	sub	local06, #48
2ab00                 | LR__3926
2ab00     1C 30 06 F1 | 	add	local06, #28
2ab04     18 4F 0A FB | 	rdlong	local21, local06 wz
2ab08     1C 30 86 F1 | 	sub	local06, #28
2ab0c     1C 00 90 5D |  if_ne	jmp	#LR__3927
2ab10     01 32 06 F6 | 	mov	local07, #1
2ab14     F2 12 02 F6 | 	mov	arg01, objptr
2ab18     00 48 05 FF 
2ab1c     00 12 46 F5 | 	or	arg01, ##177209344
2ab20     1C 30 06 F1 | 	add	local06, #28
2ab24     18 13 62 FC | 	wrlong	arg01, local06
2ab28     1C 30 86 F1 | 	sub	local06, #28
2ab2c                 | LR__3927
2ab2c     20 30 06 F1 | 	add	local06, #32
2ab30     18 4F 0A FB | 	rdlong	local21, local06 wz
2ab34     20 30 86 F1 | 	sub	local06, #32
2ab38     1C 00 90 5D |  if_ne	jmp	#LR__3928
2ab3c     01 32 06 F6 | 	mov	local07, #1
2ab40     F2 12 02 F6 | 	mov	arg01, objptr
2ab44     00 50 05 FF 
2ab48     00 12 46 F5 | 	or	arg01, ##178257920
2ab4c     20 30 06 F1 | 	add	local06, #32
2ab50     18 13 62 FC | 	wrlong	arg01, local06
2ab54     20 30 86 F1 | 	sub	local06, #32
2ab58                 | LR__3928
2ab58     2C 30 06 F1 | 	add	local06, #44
2ab5c     18 4F 0A FB | 	rdlong	local21, local06 wz
2ab60     2C 30 86 F1 | 	sub	local06, #44
2ab64     44 00 90 5D |  if_ne	jmp	#LR__3931
2ab68     14 36 06 F1 | 	add	local09, #20
2ab6c     1B 4F 0A FB | 	rdlong	local21, local09 wz
2ab70     14 36 86 F1 | 	sub	local09, #20
2ab74     18 00 90 AD |  if_e	jmp	#LR__3929
2ab78     14 36 06 F1 | 	add	local09, #20
2ab7c     1B 4F 02 FB | 	rdlong	local21, local09
2ab80     2C 30 06 F1 | 	add	local06, #44
2ab84     18 4F 62 FC | 	wrlong	local21, local06
2ab88     2C 30 86 F1 | 	sub	local06, #44
2ab8c     1C 00 90 FD | 	jmp	#LR__3930
2ab90                 | LR__3929
2ab90     01 32 06 F6 | 	mov	local07, #1
2ab94     F2 12 02 F6 | 	mov	arg01, objptr
2ab98     00 58 05 FF 
2ab9c     00 12 46 F5 | 	or	arg01, ##179306496
2aba0     2C 30 06 F1 | 	add	local06, #44
2aba4     18 13 62 FC | 	wrlong	arg01, local06
2aba8     2C 30 86 F1 | 	sub	local06, #44
2abac                 | LR__3930
2abac                 | LR__3931
2abac                 | LR__3932
2abac     00 32 0E F2 | 	cmp	local07, #0 wz
2abb0     18 13 02 56 |  if_ne	mov	arg01, local06
2abb4     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2abb8     00 4A 0E F2 | 	cmp	local19, #0 wz
2abbc     00 12 06 A6 |  if_e	mov	arg01, #0
2abc0     10 00 90 5D |  if_ne	jmp	#LR__3933
2abc4     00 12 4E F2 | 	cmps	arg01, #0 wz
2abc8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2abcc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2abd0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2abd4                 | LR__3933
2abd4     25 FB 01 F6 | 	mov	result1, local19
2abd8                 | LR__3934
2abd8     A7 F0 03 F6 | 	mov	ptra, fp
2abdc     B2 00 A0 FD | 	call	#popregs_
2abe0                 | __system___openraw_ret
2abe0     2D 00 64 FD | 	ret
2abe4                 | 
2abe4                 | __system___closeraw
2abe4     05 4A 05 F6 | 	mov	COUNT_, #5
2abe8     A8 00 A0 FD | 	call	#pushregs_
2abec     09 27 02 F6 | 	mov	local01, arg01
2abf0     00 28 06 F6 | 	mov	local02, #0
2abf4     08 26 06 F1 | 	add	local01, #8
2abf8     13 FB 09 FB | 	rdlong	result1, local01 wz
2abfc     08 26 86 F1 | 	sub	local01, #8
2ac00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ac04     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2ac08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ac0c     01 FA 65 A6 |  if_e	neg	result1, #1
2ac10     A8 00 90 AD |  if_e	jmp	#LR__3942
2ac14     2C 26 06 F1 | 	add	local01, #44
2ac18     13 FB 09 FB | 	rdlong	result1, local01 wz
2ac1c     2C 26 86 F1 | 	sub	local01, #44
2ac20     38 00 90 AD |  if_e	jmp	#LR__3940
2ac24     2C 26 06 F1 | 	add	local01, #44
2ac28     13 2B 02 FB | 	rdlong	local03, local01
2ac2c     15 2D 02 F6 | 	mov	local04, local03
2ac30     2C 26 86 F1 | 	sub	local01, #44
2ac34     13 2C 46 F7 | 	zerox	local04, #19
2ac38     14 2A 46 F0 | 	shr	local03, #20
2ac3c     02 2A 66 F0 | 	shl	local03, #2
2ac40     ED 2A 02 F1 | 	add	local03, __methods__
2ac44     15 2B 02 FB | 	rdlong	local03, local03
2ac48     13 13 02 F6 | 	mov	arg01, local01
2ac4c     F2 2E 02 F6 | 	mov	local05, objptr
2ac50     16 E5 01 F6 | 	mov	objptr, local04
2ac54     2D 2A 62 FD | 	call	local03
2ac58     17 E5 01 F6 | 	mov	objptr, local05
2ac5c                 | LR__3940
2ac5c     24 26 06 F1 | 	add	local01, #36
2ac60     13 2F 0A FB | 	rdlong	local05, local01 wz
2ac64     24 26 86 F1 | 	sub	local01, #36
2ac68     3C 00 90 AD |  if_e	jmp	#LR__3941
2ac6c     24 26 06 F1 | 	add	local01, #36
2ac70     13 2B 02 FB | 	rdlong	local03, local01
2ac74     15 2D 02 F6 | 	mov	local04, local03
2ac78     24 26 86 F1 | 	sub	local01, #36
2ac7c     13 2C 46 F7 | 	zerox	local04, #19
2ac80     14 2A 46 F0 | 	shr	local03, #20
2ac84     02 2A 66 F0 | 	shl	local03, #2
2ac88     ED 2A 02 F1 | 	add	local03, __methods__
2ac8c     15 2B 02 FB | 	rdlong	local03, local03
2ac90     13 13 02 F6 | 	mov	arg01, local01
2ac94     F2 2E 02 F6 | 	mov	local05, objptr
2ac98     16 E5 01 F6 | 	mov	objptr, local04
2ac9c     2D 2A 62 FD | 	call	local03
2aca0     17 E5 01 F6 | 	mov	objptr, local05
2aca4     FD 28 02 F6 | 	mov	local02, result1
2aca8                 | LR__3941
2aca8     13 13 02 F6 | 	mov	arg01, local01
2acac     00 14 06 F6 | 	mov	arg02, #0
2acb0     34 16 06 F6 | 	mov	arg03, #52
2acb4     98 00 A0 FD | 	call	#\builtin_bytefill_
2acb8     14 FB 01 F6 | 	mov	result1, local02
2acbc                 | LR__3942
2acbc     A7 F0 03 F6 | 	mov	ptra, fp
2acc0     B2 00 A0 FD | 	call	#popregs_
2acc4                 | __system___closeraw_ret
2acc4     2D 00 64 FD | 	ret
2acc8                 | 
2acc8                 | __system___vfs_open_sdcardx
2acc8     0B 4A 05 F6 | 	mov	COUNT_, #11
2accc     A8 00 A0 FD | 	call	#pushregs_
2acd0     09 2B 02 F6 | 	mov	local03, arg01
2acd4     0A 2D 02 F6 | 	mov	local04, arg02
2acd8     0B 2F 02 F6 | 	mov	local05, arg03
2acdc     0C 31 02 F6 | 	mov	local06, arg04
2ace0     01 00 00 FF 
2ace4     24 12 06 F6 | 	mov	arg01, ##548
2ace8     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2acec     FD 32 02 F6 | 	mov	local07, result1
2acf0     01 00 00 FF 
2acf4     34 12 06 F6 | 	mov	arg01, ##564
2acf8     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2acfc     FD 34 02 F6 | 	mov	local08, result1
2ad00     15 19 02 F6 | 	mov	arg04, local03
2ad04     1F 18 C6 F0 | 	sar	arg04, #31
2ad08     15 17 02 F6 | 	mov	arg03, local03
2ad0c     01 12 06 F6 | 	mov	arg01, #1
2ad10     00 14 06 F6 | 	mov	arg02, #0
2ad14     EC DB BF FD | 	call	#__system___int64_shl
2ad18     FD 26 02 F6 | 	mov	local01, result1
2ad1c     FE 36 02 F6 | 	mov	local09, result2
2ad20     16 19 02 F6 | 	mov	arg04, local04
2ad24     1F 18 C6 F0 | 	sar	arg04, #31
2ad28     16 17 02 F6 | 	mov	arg03, local04
2ad2c     01 12 06 F6 | 	mov	arg01, #1
2ad30     00 14 06 F6 | 	mov	arg02, #0
2ad34     CC DB BF FD | 	call	#__system___int64_shl
2ad38     FD 26 42 F5 | 	or	local01, result1
2ad3c     FE 36 42 F5 | 	or	local09, result2
2ad40     17 19 02 F6 | 	mov	arg04, local05
2ad44     1F 18 C6 F0 | 	sar	arg04, #31
2ad48     17 17 02 F6 | 	mov	arg03, local05
2ad4c     01 12 06 F6 | 	mov	arg01, #1
2ad50     00 14 06 F6 | 	mov	arg02, #0
2ad54     AC DB BF FD | 	call	#__system___int64_shl
2ad58     FD 26 42 F5 | 	or	local01, result1
2ad5c     FE 36 42 F5 | 	or	local09, result2
2ad60     18 19 02 F6 | 	mov	arg04, local06
2ad64     1F 18 C6 F0 | 	sar	arg04, #31
2ad68     18 17 02 F6 | 	mov	arg03, local06
2ad6c     01 12 06 F6 | 	mov	arg01, #1
2ad70     00 14 06 F6 | 	mov	arg02, #0
2ad74     8C DB BF FD | 	call	#__system___int64_shl
2ad78     1B 15 02 F6 | 	mov	arg02, local09
2ad7c     FD 26 42 F5 | 	or	local01, result1
2ad80     0A FD 41 F5 | 	or	result2, arg02
2ad84     FE 28 02 F6 | 	mov	local02, result2
2ad88     13 13 02 F6 | 	mov	arg01, local01
2ad8c     14 15 02 F6 | 	mov	arg02, local02
2ad90     A8 DB BF FD | 	call	#__system___usepins
2ad94     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad98     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ad9c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2ada0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ada4     00 FA 05 A6 |  if_e	mov	result1, #0
2ada8     B4 00 90 AD |  if_e	jmp	#LR__3952
2adac     13 39 02 F6 | 	mov	local10, local01
2adb0     14 37 02 F6 | 	mov	local09, local02
2adb4     01 00 00 FF 
2adb8     08 32 06 F1 | 	add	local07, ##520
2adbc     19 39 62 FC | 	wrlong	local10, local07
2adc0     04 32 06 F1 | 	add	local07, #4
2adc4     19 37 62 FC | 	wrlong	local09, local07
2adc8     01 00 00 FF 
2adcc     0C 32 86 F1 | 	sub	local07, ##524
2add0     18 1B 02 F6 | 	mov	arg05, local06
2add4     00 12 06 F6 | 	mov	arg01, #0
2add8     15 15 02 F6 | 	mov	arg02, local03
2addc     16 17 02 F6 | 	mov	arg03, local04
2ade0     17 19 02 F6 | 	mov	arg04, local05
2ade4     F2 38 02 F6 | 	mov	local10, objptr
2ade8     19 E5 01 F6 | 	mov	objptr, local07
2adec     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2adf0     1C E5 01 F6 | 	mov	objptr, local10
2adf4     FD 3A 0A F6 | 	mov	local11, result1 wz
2adf8     24 00 90 5D |  if_ne	jmp	#LR__3950
2adfc     AD 01 00 FF 
2ae00     BA 14 06 F6 | 	mov	arg02, ##@LR__5367
2ae04     1A 13 02 F6 | 	mov	arg01, local08
2ae08     00 16 06 F6 | 	mov	arg03, #0
2ae0c     F2 3A 02 F6 | 	mov	local11, objptr
2ae10     19 E5 01 F6 | 	mov	objptr, local07
2ae14     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2ae18     1D E5 01 F6 | 	mov	objptr, local11
2ae1c     FD 3A 02 F6 | 	mov	local11, result1
2ae20                 | LR__3950
2ae20     00 3A 0E F2 | 	cmp	local11, #0 wz
2ae24     24 00 90 AD |  if_e	jmp	#LR__3951
2ae28     13 13 02 F6 | 	mov	arg01, local01
2ae2c     14 15 02 F6 | 	mov	arg02, local02
2ae30     5C DB BF FD | 	call	#__system___freepins
2ae34     1D 13 6A F6 | 	neg	arg01, local11 wz
2ae38     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2ae3c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2ae40     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2ae44     00 FA 05 F6 | 	mov	result1, #0
2ae48     14 00 90 FD | 	jmp	#LR__3952
2ae4c                 | LR__3951
2ae4c     19 13 02 F6 | 	mov	arg01, local07
2ae50     F2 3A 02 F6 | 	mov	local11, objptr
2ae54     19 E5 01 F6 | 	mov	objptr, local07
2ae58     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2ae5c     1D E5 01 F6 | 	mov	objptr, local11
2ae60                 | LR__3952
2ae60     A7 F0 03 F6 | 	mov	ptra, fp
2ae64     B2 00 A0 FD | 	call	#popregs_
2ae68                 | __system___vfs_open_sdcardx_ret
2ae68     2D 00 64 FD | 	ret
2ae6c                 | 
2ae6c                 | __system____default_getc
2ae6c     03 4A 05 F6 | 	mov	COUNT_, #3
2ae70     A8 00 A0 FD | 	call	#pushregs_
2ae74     09 27 02 F6 | 	mov	local01, arg01
2ae78     13 29 02 FB | 	rdlong	local02, local01
2ae7c     08 28 06 F1 | 	add	local02, #8
2ae80     14 2B 02 FB | 	rdlong	local03, local02
2ae84     02 2A CE F7 | 	test	local03, #2 wz
2ae88     13 13 02 56 |  if_ne	mov	arg01, local01
2ae8c     00 01 B0 5D |  if_ne	call	#__system____default_flush
2ae90     14 2B 02 FB | 	rdlong	local03, local02
2ae94     01 2A 46 F5 | 	or	local03, #1
2ae98     14 2B 62 FC | 	wrlong	local03, local02
2ae9c     08 28 86 F1 | 	sub	local02, #8
2aea0     14 2B 0A FB | 	rdlong	local03, local02 wz
2aea4     0C 00 90 5D |  if_ne	jmp	#LR__3960
2aea8     13 13 02 F6 | 	mov	arg01, local01
2aeac     68 18 B0 FD | 	call	#__system____default_filbuf
2aeb0     FD 2A 02 F6 | 	mov	local03, result1
2aeb4                 | LR__3960
2aeb4     01 2A 56 F2 | 	cmps	local03, #1 wc
2aeb8     01 FA 65 C6 |  if_b	neg	result1, #1
2aebc     1C 00 90 CD |  if_b	jmp	#LR__3961
2aec0     01 2A 86 F1 | 	sub	local03, #1
2aec4     14 2B 62 FC | 	wrlong	local03, local02
2aec8     04 28 06 F1 | 	add	local02, #4
2aecc     14 2B 02 FB | 	rdlong	local03, local02
2aed0     15 FB C1 FA | 	rdbyte	result1, local03
2aed4     01 2A 06 F1 | 	add	local03, #1
2aed8     14 2B 62 FC | 	wrlong	local03, local02
2aedc                 | LR__3961
2aedc     A7 F0 03 F6 | 	mov	ptra, fp
2aee0     B2 00 A0 FD | 	call	#popregs_
2aee4                 | __system____default_getc_ret
2aee4     2D 00 64 FD | 	ret
2aee8                 | 
2aee8                 | __system____default_putc
2aee8     06 4A 05 F6 | 	mov	COUNT_, #6
2aeec     A8 00 A0 FD | 	call	#pushregs_
2aef0     09 27 02 F6 | 	mov	local01, arg01
2aef4     0A 29 02 F6 | 	mov	local02, arg02
2aef8     14 2B 02 FB | 	rdlong	local03, local02
2aefc     08 2A 06 F1 | 	add	local03, #8
2af00     15 FB 01 FB | 	rdlong	result1, local03
2af04     01 FA CD F7 | 	test	result1, #1 wz
2af08     14 13 02 56 |  if_ne	mov	arg01, local02
2af0c     80 00 B0 5D |  if_ne	call	#__system____default_flush
2af10     15 2D 02 FB | 	rdlong	local04, local03
2af14     02 2C 46 F5 | 	or	local04, #2
2af18     15 2D 62 FC | 	wrlong	local04, local03
2af1c     08 2A 86 F1 | 	sub	local03, #8
2af20     15 2F 02 FB | 	rdlong	local05, local03
2af24     10 2A 06 F1 | 	add	local03, #16
2af28     15 15 02 FB | 	rdlong	arg02, local03
2af2c     10 2A 86 F1 | 	sub	local03, #16
2af30     17 FB 01 F6 | 	mov	result1, local05
2af34     0A FB 01 F1 | 	add	result1, arg02
2af38     FD 26 42 FC | 	wrbyte	local01, result1
2af3c     13 27 E2 F8 | 	getbyte	local01, local01, #0
2af40     01 2E 06 F1 | 	add	local05, #1
2af44     15 2F 62 FC | 	wrlong	local05, local03
2af48     06 28 06 F1 | 	add	local02, #6
2af4c     14 31 EA FA | 	rdword	local06, local02 wz
2af50     06 28 86 F1 | 	sub	local02, #6
2af54     0C 2A 06 51 |  if_ne	add	local03, #12
2af58     15 2D 02 5B |  if_ne	rdlong	local04, local03
2af5c     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2af60     0C 00 90 AD |  if_e	jmp	#LR__3970
2af64     0A 26 0E F2 | 	cmp	local01, #10 wz
2af68     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2af6c     10 00 90 5D |  if_ne	jmp	#LR__3971
2af70                 | LR__3970
2af70     14 13 02 F6 | 	mov	arg01, local02
2af74     18 00 B0 FD | 	call	#__system____default_flush
2af78     00 FA 0D F2 | 	cmp	result1, #0 wz
2af7c     01 26 66 56 |  if_ne	neg	local01, #1
2af80                 | LR__3971
2af80     13 FB 01 F6 | 	mov	result1, local01
2af84     A7 F0 03 F6 | 	mov	ptra, fp
2af88     B2 00 A0 FD | 	call	#popregs_
2af8c                 | __system____default_putc_ret
2af8c     2D 00 64 FD | 	ret
2af90                 | 
2af90                 | __system____default_flush
2af90     06 4A 05 F6 | 	mov	COUNT_, #6
2af94     A8 00 A0 FD | 	call	#pushregs_
2af98     09 27 02 F6 | 	mov	local01, arg01
2af9c     13 29 02 FB | 	rdlong	local02, local01
2afa0     14 2B 02 FB | 	rdlong	local03, local02
2afa4     08 28 06 F1 | 	add	local02, #8
2afa8     14 FB 01 FB | 	rdlong	result1, local02
2afac     08 28 86 F1 | 	sub	local02, #8
2afb0     02 FA CD F7 | 	test	result1, #2 wz
2afb4     D0 00 90 AD |  if_e	jmp	#LR__3982
2afb8     01 2A 56 F2 | 	cmps	local03, #1 wc
2afbc     20 01 90 CD |  if_b	jmp	#LR__3984
2afc0     08 26 06 F1 | 	add	local01, #8
2afc4     13 FB 01 FB | 	rdlong	result1, local01
2afc8     08 26 86 F1 | 	sub	local01, #8
2afcc     40 FA CD F7 | 	test	result1, #64 wz
2afd0     68 00 90 AD |  if_e	jmp	#LR__3981
2afd4     08 26 06 F1 | 	add	local01, #8
2afd8     13 17 02 FB | 	rdlong	arg03, local01
2afdc     08 26 86 F1 | 	sub	local01, #8
2afe0     80 16 CE F7 | 	test	arg03, #128 wz
2afe4     54 00 90 AD |  if_e	jmp	#LR__3980
2afe8     30 26 06 F1 | 	add	local01, #48
2afec     13 2D 02 FB | 	rdlong	local04, local01
2aff0     16 2F 02 F6 | 	mov	local05, local04
2aff4     30 26 86 F1 | 	sub	local01, #48
2aff8     13 2E 46 F7 | 	zerox	local05, #19
2affc     14 2C 46 F0 | 	shr	local04, #20
2b000     02 2C 66 F0 | 	shl	local04, #2
2b004     ED 2C 02 F1 | 	add	local04, __methods__
2b008     16 2D 02 FB | 	rdlong	local04, local04
2b00c     13 13 02 F6 | 	mov	arg01, local01
2b010     00 14 06 F6 | 	mov	arg02, #0
2b014     02 16 06 F6 | 	mov	arg03, #2
2b018     F2 30 02 F6 | 	mov	local06, objptr
2b01c     17 E5 01 F6 | 	mov	objptr, local05
2b020     2D 2C 62 FD | 	call	local04
2b024     18 E5 01 F6 | 	mov	objptr, local06
2b028     08 26 06 F1 | 	add	local01, #8
2b02c     13 31 02 FB | 	rdlong	local06, local01
2b030     80 30 26 F5 | 	andn	local06, #128
2b034     13 31 62 FC | 	wrlong	local06, local01
2b038     08 26 86 F1 | 	sub	local01, #8
2b03c                 | LR__3980
2b03c                 | LR__3981
2b03c     18 26 06 F1 | 	add	local01, #24
2b040     13 2D 02 FB | 	rdlong	local04, local01
2b044     16 2F 02 F6 | 	mov	local05, local04
2b048     18 26 86 F1 | 	sub	local01, #24
2b04c     13 2E 46 F7 | 	zerox	local05, #19
2b050     14 2C 46 F0 | 	shr	local04, #20
2b054     02 2C 66 F0 | 	shl	local04, #2
2b058     ED 2C 02 F1 | 	add	local04, __methods__
2b05c     16 2D 02 FB | 	rdlong	local04, local04
2b060     10 28 06 F1 | 	add	local02, #16
2b064     14 15 02 FB | 	rdlong	arg02, local02
2b068     10 28 86 F1 | 	sub	local02, #16
2b06c     13 13 02 F6 | 	mov	arg01, local01
2b070     15 17 02 F6 | 	mov	arg03, local03
2b074     F2 30 02 F6 | 	mov	local06, objptr
2b078     17 E5 01 F6 | 	mov	objptr, local05
2b07c     2D 2C 62 FD | 	call	local04
2b080     18 E5 01 F6 | 	mov	objptr, local06
2b084     58 00 90 FD | 	jmp	#LR__3984
2b088                 | LR__3982
2b088     08 28 06 F1 | 	add	local02, #8
2b08c     14 31 02 FB | 	rdlong	local06, local02
2b090     08 28 86 F1 | 	sub	local02, #8
2b094     01 30 CE F7 | 	test	local06, #1 wz
2b098     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2b09c     40 00 90 AD |  if_e	jmp	#LR__3983
2b0a0     30 26 06 F1 | 	add	local01, #48
2b0a4     13 2D 02 FB | 	rdlong	local04, local01
2b0a8     16 2F 02 F6 | 	mov	local05, local04
2b0ac     30 26 86 F1 | 	sub	local01, #48
2b0b0     13 2E 46 F7 | 	zerox	local05, #19
2b0b4     14 2C 46 F0 | 	shr	local04, #20
2b0b8     02 2C 66 F0 | 	shl	local04, #2
2b0bc     ED 2C 02 F1 | 	add	local04, __methods__
2b0c0     16 2D 02 FB | 	rdlong	local04, local04
2b0c4     13 13 02 F6 | 	mov	arg01, local01
2b0c8     15 15 62 F6 | 	neg	arg02, local03
2b0cc     01 16 06 F6 | 	mov	arg03, #1
2b0d0     F2 30 02 F6 | 	mov	local06, objptr
2b0d4     17 E5 01 F6 | 	mov	objptr, local05
2b0d8     2D 2C 62 FD | 	call	local04
2b0dc     18 E5 01 F6 | 	mov	objptr, local06
2b0e0                 | LR__3983
2b0e0                 | LR__3984
2b0e0     14 01 68 FC | 	wrlong	#0, local02
2b0e4     04 28 06 F1 | 	add	local02, #4
2b0e8     14 01 68 FC | 	wrlong	#0, local02
2b0ec     04 28 06 F1 | 	add	local02, #4
2b0f0     14 01 68 FC | 	wrlong	#0, local02
2b0f4     00 FA 05 F6 | 	mov	result1, #0
2b0f8     A7 F0 03 F6 | 	mov	ptra, fp
2b0fc     B2 00 A0 FD | 	call	#popregs_
2b100                 | __system____default_flush_ret
2b100     2D 00 64 FD | 	ret
2b104                 | 
2b104                 | __system____default_buffer_init
2b104     02 4A 05 F6 | 	mov	COUNT_, #2
2b108     A8 00 A0 FD | 	call	#pushregs_
2b10c     09 27 02 F6 | 	mov	local01, arg01
2b110     13 29 02 FB | 	rdlong	local02, local01
2b114     13 13 02 F6 | 	mov	arg01, local01
2b118     34 03 B0 FD | 	call	#__system___isatty
2b11c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b120     06 26 06 51 |  if_ne	add	local01, #6
2b124     13 0B 58 5C |  if_ne	wrword	#5, local01
2b128     06 26 06 A1 |  if_e	add	local01, #6
2b12c     13 0D 58 AC |  if_e	wrword	#6, local01
2b130     14 28 06 F1 | 	add	local02, #20
2b134     14 27 02 F6 | 	mov	local01, local02
2b138     04 28 86 F1 | 	sub	local02, #4
2b13c     14 27 62 FC | 	wrlong	local01, local02
2b140     04 28 86 F1 | 	sub	local02, #4
2b144     02 00 80 FF 
2b148     14 01 68 FC | 	wrlong	##1024, local02
2b14c     00 FA 05 F6 | 	mov	result1, #0
2b150     A7 F0 03 F6 | 	mov	ptra, fp
2b154     B2 00 A0 FD | 	call	#popregs_
2b158                 | __system____default_buffer_init_ret
2b158     2D 00 64 FD | 	ret
2b15c                 | 
2b15c                 | __system__stat
2b15c     04 4A 05 F6 | 	mov	COUNT_, #4
2b160     A8 00 A0 FD | 	call	#pushregs_
2b164     0A 27 02 F6 | 	mov	local01, arg02
2b168     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b16c     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2b170     09 15 02 F6 | 	mov	arg02, arg01
2b174     14 13 02 F6 | 	mov	arg01, local02
2b178     00 16 06 F6 | 	mov	arg03, #0
2b17c     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b180     54 B5 BF FD | 	call	#__system____getvfsforfile
2b184     FD 2A 0A F6 | 	mov	local03, result1 wz
2b188     10 00 90 AD |  if_e	jmp	#LR__3990
2b18c     34 2A 06 F1 | 	add	local03, #52
2b190     15 17 0A FB | 	rdlong	arg03, local03 wz
2b194     34 2A 86 F1 | 	sub	local03, #52
2b198     14 00 90 5D |  if_ne	jmp	#LR__3991
2b19c                 | LR__3990
2b19c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b1a0     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b1a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b1a8     01 FA 65 F6 | 	neg	result1, #1
2b1ac     68 00 90 FD | 	jmp	#LR__3992
2b1b0                 | LR__3991
2b1b0     13 13 02 F6 | 	mov	arg01, local01
2b1b4     00 14 06 F6 | 	mov	arg02, #0
2b1b8     30 16 06 F6 | 	mov	arg03, #48
2b1bc     09 2D 02 F6 | 	mov	local04, arg01
2b1c0     98 00 A0 FD | 	call	#\builtin_bytefill_
2b1c4     16 FB 01 F6 | 	mov	result1, local04
2b1c8     14 13 CA FA | 	rdbyte	arg01, local02 wz
2b1cc     08 26 06 A1 |  if_e	add	local01, #8
2b1d0     08 00 80 AF 
2b1d4     13 FF 6B AC |  if_e	wrlong	##4607, local01
2b1d8     00 FA 05 A6 |  if_e	mov	result1, #0
2b1dc     38 00 90 AD |  if_e	jmp	#LR__3992
2b1e0     34 2A 06 F1 | 	add	local03, #52
2b1e4     15 2B 02 FB | 	rdlong	local03, local03
2b1e8     15 2D 02 F6 | 	mov	local04, local03
2b1ec     13 2A 46 F7 | 	zerox	local03, #19
2b1f0     14 2C 46 F0 | 	shr	local04, #20
2b1f4     02 2C 66 F0 | 	shl	local04, #2
2b1f8     ED 2C 02 F1 | 	add	local04, __methods__
2b1fc     16 2D 02 FB | 	rdlong	local04, local04
2b200     14 13 02 F6 | 	mov	arg01, local02
2b204     13 15 02 F6 | 	mov	arg02, local01
2b208     F2 28 02 F6 | 	mov	local02, objptr
2b20c     15 E5 01 F6 | 	mov	objptr, local03
2b210     2D 2C 62 FD | 	call	local04
2b214     14 E5 01 F6 | 	mov	objptr, local02
2b218                 | LR__3992
2b218     A7 F0 03 F6 | 	mov	ptra, fp
2b21c     B2 00 A0 FD | 	call	#popregs_
2b220                 | __system__stat_ret
2b220     2D 00 64 FD | 	ret
2b224                 | 
2b224                 | __system__write
2b224     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b228     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b22c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b230     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b234     01 FA 65 36 |  if_ae	neg	result1, #1
2b238     20 00 90 3D |  if_ae	jmp	#LR__4000
2b23c     34 12 06 FD | 	qmul	arg01, #52
2b240     02 00 00 FF 
2b244     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b248     18 12 62 FD | 	getqx	arg01
2b24c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b250     02 00 00 FF 
2b254     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b258     0C 10 B0 FD | 	call	#__system___vfswrite
2b25c                 | LR__4000
2b25c                 | __system__write_ret
2b25c     2D 00 64 FD | 	ret
2b260                 | 
2b260                 | __system__read
2b260     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b264     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b268     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b26c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b270     01 FA 65 36 |  if_ae	neg	result1, #1
2b274     20 00 90 3D |  if_ae	jmp	#LR__4010
2b278     34 12 06 FD | 	qmul	arg01, #52
2b27c     02 00 00 FF 
2b280     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b284     18 12 62 FD | 	getqx	arg01
2b288     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b28c     02 00 00 FF 
2b290     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b294     98 11 B0 FD | 	call	#__system___vfsread
2b298                 | LR__4010
2b298                 | __system__read_ret
2b298     2D 00 64 FD | 	ret
2b29c                 | 
2b29c                 | __system__close
2b29c     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b2a0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b2a4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b2a8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b2ac     01 FA 65 36 |  if_ae	neg	result1, #1
2b2b0     20 00 90 3D |  if_ae	jmp	#LR__4020
2b2b4     34 12 06 FD | 	qmul	arg01, #52
2b2b8     02 00 00 FF 
2b2bc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b2c0     18 12 62 FD | 	getqx	arg01
2b2c4     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2b2c8     02 00 00 FF 
2b2cc     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b2d0     10 F9 BF FD | 	call	#__system___closeraw
2b2d4                 | LR__4020
2b2d4                 | __system__close_ret
2b2d4     2D 00 64 FD | 	ret
2b2d8                 | 
2b2d8                 | __system__lseek
2b2d8     06 4A 05 F6 | 	mov	COUNT_, #6
2b2dc     A8 00 A0 FD | 	call	#pushregs_
2b2e0     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b2e4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b2e8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2b2ec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b2f0     01 FA 65 36 |  if_ae	neg	result1, #1
2b2f4     C4 00 90 3D |  if_ae	jmp	#LR__4031
2b2f8     34 12 06 FD | 	qmul	arg01, #52
2b2fc     02 00 00 FF 
2b300     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2b304     18 26 62 FD | 	getqx	local01
2b308     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2b30c     30 26 06 F1 | 	add	local01, #48
2b310     13 13 0A FB | 	rdlong	arg01, local01 wz
2b314     30 26 86 F1 | 	sub	local01, #48
2b318     02 00 00 FF 
2b31c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2b320     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b324     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2b328     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b32c     01 FA 65 A6 |  if_e	neg	result1, #1
2b330     88 00 90 AD |  if_e	jmp	#LR__4031
2b334     08 26 06 F1 | 	add	local01, #8
2b338     13 29 02 FB | 	rdlong	local02, local01
2b33c     08 26 86 F1 | 	sub	local01, #8
2b340     40 28 CE F7 | 	test	local02, #64 wz
2b344     08 26 06 51 |  if_ne	add	local01, #8
2b348     13 29 02 5B |  if_ne	rdlong	local02, local01
2b34c     80 28 46 55 |  if_ne	or	local02, #128
2b350     13 29 62 5C |  if_ne	wrlong	local02, local01
2b354     08 26 86 51 |  if_ne	sub	local01, #8
2b358     30 26 06 F1 | 	add	local01, #48
2b35c     13 2B 02 FB | 	rdlong	local03, local01
2b360     15 2D 02 F6 | 	mov	local04, local03
2b364     30 26 86 F1 | 	sub	local01, #48
2b368     13 2C 46 F7 | 	zerox	local04, #19
2b36c     14 2A 46 F0 | 	shr	local03, #20
2b370     02 2A 66 F0 | 	shl	local03, #2
2b374     ED 2A 02 F1 | 	add	local03, __methods__
2b378     15 2B 02 FB | 	rdlong	local03, local03
2b37c     13 13 02 F6 | 	mov	arg01, local01
2b380     F2 2E 02 F6 | 	mov	local05, objptr
2b384     16 E5 01 F6 | 	mov	objptr, local04
2b388     2D 2A 62 FD | 	call	local03
2b38c     17 E5 01 F6 | 	mov	objptr, local05
2b390     FD 30 02 F6 | 	mov	local06, result1
2b394     00 30 56 F2 | 	cmps	local06, #0 wc
2b398     1C 00 90 3D |  if_ae	jmp	#LR__4030
2b39c     18 13 6A F6 | 	neg	arg01, local06 wz
2b3a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b3a4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b3a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b3ac     01 FA 65 56 |  if_ne	neg	result1, #1
2b3b0     00 FA 05 A6 |  if_e	mov	result1, #0
2b3b4     04 00 90 FD | 	jmp	#LR__4031
2b3b8                 | LR__4030
2b3b8     18 FB 01 F6 | 	mov	result1, local06
2b3bc                 | LR__4031
2b3bc     A7 F0 03 F6 | 	mov	ptra, fp
2b3c0     B2 00 A0 FD | 	call	#popregs_
2b3c4                 | __system__lseek_ret
2b3c4     2D 00 64 FD | 	ret
2b3c8                 | 
2b3c8                 | __system___ioctl
2b3c8     03 4A 05 F6 | 	mov	COUNT_, #3
2b3cc     A8 00 A0 FD | 	call	#pushregs_
2b3d0     00 12 4E F2 | 	cmps	arg01, #0 wz
2b3d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b3d8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b3dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b3e0     01 FA 65 A6 |  if_e	neg	result1, #1
2b3e4     5C 00 90 AD |  if_e	jmp	#LR__4041
2b3e8     28 12 06 F1 | 	add	arg01, #40
2b3ec     09 27 02 FB | 	rdlong	local01, arg01
2b3f0     13 29 02 F6 | 	mov	local02, local01
2b3f4     28 12 86 F1 | 	sub	arg01, #40
2b3f8     13 28 46 F7 | 	zerox	local02, #19
2b3fc     14 26 46 F0 | 	shr	local01, #20
2b400     02 26 66 F0 | 	shl	local01, #2
2b404     ED 26 02 F1 | 	add	local01, __methods__
2b408     13 27 02 FB | 	rdlong	local01, local01
2b40c     F2 2A 02 F6 | 	mov	local03, objptr
2b410     14 E5 01 F6 | 	mov	objptr, local02
2b414     2D 26 62 FD | 	call	local01
2b418     15 E5 01 F6 | 	mov	objptr, local03
2b41c     FD 12 0A F6 | 	mov	arg01, result1 wz
2b420     1C 00 90 AD |  if_e	jmp	#LR__4040
2b424     00 12 4E F2 | 	cmps	arg01, #0 wz
2b428     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b42c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b430     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b434     01 FA 65 56 |  if_ne	neg	result1, #1
2b438     00 FA 05 A6 |  if_e	mov	result1, #0
2b43c     04 00 90 FD | 	jmp	#LR__4041
2b440                 | LR__4040
2b440     00 FA 05 F6 | 	mov	result1, #0
2b444                 | LR__4041
2b444     A7 F0 03 F6 | 	mov	ptra, fp
2b448     B2 00 A0 FD | 	call	#popregs_
2b44c                 | __system___ioctl_ret
2b44c     2D 00 64 FD | 	ret
2b450                 | 
2b450                 | __system___isatty
2b450     00 4A 05 F6 | 	mov	COUNT_, #0
2b454     A8 00 A0 FD | 	call	#pushregs_
2b458     0C F0 07 F1 | 	add	ptra, #12
2b45c     04 4E 05 F1 | 	add	fp, #4
2b460     A7 12 62 FC | 	wrlong	arg01, fp
2b464     04 4E 05 F1 | 	add	fp, #4
2b468     A7 16 02 F6 | 	mov	arg03, fp
2b46c     08 4E 85 F1 | 	sub	fp, #8
2b470     00 15 06 F6 | 	mov	arg02, #256
2b474     50 FF BF FD | 	call	#__system___ioctl
2b478     00 FA 0D F2 | 	cmp	result1, #0 wz
2b47c     01 FA 05 A6 |  if_e	mov	result1, #1
2b480     00 FA 05 56 |  if_ne	mov	result1, #0
2b484     A7 F0 03 F6 | 	mov	ptra, fp
2b488     B2 00 A0 FD | 	call	#popregs_
2b48c                 | __system___isatty_ret
2b48c     2D 00 64 FD | 	ret
2b490                 | 
2b490                 | __system____getftab
2b490     0A 12 16 F2 | 	cmp	arg01, #10 wc
2b494     34 12 06 CD |  if_b	qmul	arg01, #52
2b498     00 FA 05 36 |  if_ae	mov	result1, #0
2b49c     02 00 00 CF 
2b4a0     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2b4a4     18 FA 61 CD |  if_b	getqx	result1
2b4a8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2b4ac     02 00 00 CF 
2b4b0     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2b4b4                 | __system____getftab_ret
2b4b4     2D 00 64 FD | 	ret
2b4b8                 | 
2b4b8                 | __system__strncpy
2b4b8     09 01 02 F6 | 	mov	_var01, arg01
2b4bc                 | LR__4050
2b4bc     01 16 86 F1 | 	sub	arg03, #1
2b4c0     00 16 56 F2 | 	cmps	arg03, #0 wc
2b4c4     18 00 90 CD |  if_b	jmp	#LR__4051
2b4c8     0A FB C1 FA | 	rdbyte	result1, arg02
2b4cc     00 FB 41 FC | 	wrbyte	result1, _var01
2b4d0     01 14 06 F1 | 	add	arg02, #1
2b4d4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2b4d8     01 00 06 F1 | 	add	_var01, #1
2b4dc     DC FF 9F 5D |  if_ne	jmp	#LR__4050
2b4e0                 | LR__4051
2b4e0     97 0C 48 FB | 	callpa	#(@LR__4053-@LR__4052)>>2,fcache_load_ptr_
2b4e4                 | LR__4052
2b4e4     01 16 86 F1 | 	sub	arg03, #1
2b4e8     00 16 56 F2 | 	cmps	arg03, #0 wc
2b4ec     00 03 02 36 |  if_ae	mov	_var02, _var01
2b4f0     01 00 06 31 |  if_ae	add	_var01, #1
2b4f4     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2b4f8     E8 FF 9F 3D |  if_ae	jmp	#LR__4052
2b4fc                 | LR__4053
2b4fc     09 FB 01 F6 | 	mov	result1, arg01
2b500                 | __system__strncpy_ret
2b500     2D 00 64 FD | 	ret
2b504                 | 
2b504                 | __system__strncat
2b504     00 14 4E F2 | 	cmps	arg02, #0 wz
2b508     50 00 90 AD |  if_e	jmp	#LR__4064
2b50c     01 16 16 F2 | 	cmp	arg03, #1 wc
2b510     48 00 90 CD |  if_b	jmp	#LR__4064
2b514     09 01 02 F6 | 	mov	_var01, arg01
2b518     97 1E 48 FB | 	callpa	#(@LR__4062-@LR__4060)>>2,fcache_load_ptr_
2b51c                 | LR__4060
2b51c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2b520     01 00 06 51 |  if_ne	add	_var01, #1
2b524     F4 FF 9F 5D |  if_ne	jmp	#LR__4060
2b528     0B 03 02 F6 | 	mov	_var02, arg03
2b52c                 | LR__4061
2b52c     0A 05 C2 FA | 	rdbyte	_var03, arg02
2b530     02 07 02 F6 | 	mov	_var04, _var03
2b534     07 06 4E F7 | 	zerox	_var04, #7 wz
2b538     01 14 06 F1 | 	add	arg02, #1
2b53c     18 00 90 AD |  if_e	jmp	#LR__4063
2b540     01 02 86 F1 | 	sub	_var02, #1
2b544     00 02 56 F2 | 	cmps	_var02, #0 wc
2b548     00 07 02 36 |  if_ae	mov	_var04, _var01
2b54c     01 00 06 31 |  if_ae	add	_var01, #1
2b550     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2b554     D4 FF 9F 3D |  if_ae	jmp	#LR__4061
2b558                 | LR__4062
2b558                 | LR__4063
2b558     00 01 48 FC | 	wrbyte	#0, _var01
2b55c                 | LR__4064
2b55c     09 FB 01 F6 | 	mov	result1, arg01
2b560                 | __system__strncat_ret
2b560     2D 00 64 FD | 	ret
2b564                 | 
2b564                 | __system__strncmp
2b564     09 01 0A F6 | 	mov	_var01, arg01 wz
2b568     14 00 90 5D |  if_ne	jmp	#LR__4070
2b56c     00 14 0E F2 | 	cmp	arg02, #0 wz
2b570     01 02 66 56 |  if_ne	neg	_var02, #1
2b574     00 02 06 A6 |  if_e	mov	_var02, #0
2b578     01 FB 01 F6 | 	mov	result1, _var02
2b57c     74 00 90 FD | 	jmp	#__system__strncmp_ret
2b580                 | LR__4070
2b580     00 14 0E F2 | 	cmp	arg02, #0 wz
2b584     01 FA 05 A6 |  if_e	mov	result1, #1
2b588     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b58c     0B 05 02 F6 | 	mov	_var03, arg03
2b590     97 16 48 FB | 	callpa	#(@LR__4072-@LR__4071)>>2,fcache_load_ptr_
2b594                 | LR__4071
2b594     00 07 C2 FA | 	rdbyte	_var04, _var01
2b598     0A 09 02 F6 | 	mov	_var05, arg02
2b59c     04 0B C2 FA | 	rdbyte	_var06, _var05
2b5a0     01 04 86 F1 | 	sub	_var03, #1
2b5a4     00 04 56 F2 | 	cmps	_var03, #0 wc
2b5a8     01 00 06 F1 | 	add	_var01, #1
2b5ac     01 14 06 F1 | 	add	arg02, #1
2b5b0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2b5b4     08 00 90 2D |  if_nc_and_z	jmp	#LR__4073
2b5b8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2b5bc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4071
2b5c0                 | LR__4072
2b5c0                 | LR__4073
2b5c0     00 04 56 F2 | 	cmps	_var03, #0 wc
2b5c4     00 FA 05 C6 |  if_b	mov	result1, #0
2b5c8     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2b5cc     05 07 0A F2 | 	cmp	_var04, _var06 wz
2b5d0     00 FA 05 A6 |  if_e	mov	result1, #0
2b5d4     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b5d8     00 06 0E F2 | 	cmp	_var04, #0 wz
2b5dc     01 FA 65 A6 |  if_e	neg	result1, #1
2b5e0     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2b5e4     00 0A 0E F2 | 	cmp	_var06, #0 wz
2b5e8     01 FA 05 A6 |  if_e	mov	result1, #1
2b5ec     03 FB 01 56 |  if_ne	mov	result1, _var04
2b5f0     05 FB 81 51 |  if_ne	sub	result1, _var06
2b5f4                 | __system__strncmp_ret
2b5f4     2D 00 64 FD | 	ret
2b5f8                 | 
2b5f8                 | __system____root_opendir
2b5f8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2b5fc     04 12 06 F1 | 	add	arg01, #4
2b600     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2b604     00 FA 05 F6 | 	mov	result1, #0
2b608     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2b60c                 | __system____root_opendir_ret
2b60c     2D 00 64 FD | 	ret
2b610                 | 
2b610                 | __system____root_readdir
2b610     03 4A 05 F6 | 	mov	COUNT_, #3
2b614     A8 00 A0 FD | 	call	#pushregs_
2b618     09 27 02 F6 | 	mov	local01, arg01
2b61c     0A 29 02 F6 | 	mov	local02, arg02
2b620     04 26 06 F1 | 	add	local01, #4
2b624     13 2B 02 FB | 	rdlong	local03, local01
2b628     04 26 86 F1 | 	sub	local01, #4
2b62c                 | LR__4080
2b62c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2b630     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2b634     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2b638     01 FA 65 A6 |  if_e	neg	result1, #1
2b63c     48 00 90 AD |  if_e	jmp	#LR__4081
2b640     15 17 0A FB | 	rdlong	arg03, local03 wz
2b644     04 2A 06 A1 |  if_e	add	local03, #4
2b648     E0 FF 9F AD |  if_e	jmp	#LR__4080
2b64c     15 15 02 FB | 	rdlong	arg02, local03
2b650     01 14 06 F1 | 	add	arg02, #1
2b654     14 13 02 F6 | 	mov	arg01, local02
2b658     40 16 06 F6 | 	mov	arg03, #64
2b65c     58 FE BF FD | 	call	#__system__strncpy
2b660     50 28 06 F1 | 	add	local02, #80
2b664     14 03 48 FC | 	wrbyte	#1, local02
2b668     08 28 86 F1 | 	sub	local02, #8
2b66c     14 01 68 FC | 	wrlong	#0, local02
2b670     04 28 06 F1 | 	add	local02, #4
2b674     14 01 68 FC | 	wrlong	#0, local02
2b678     04 2A 06 F1 | 	add	local03, #4
2b67c     04 26 06 F1 | 	add	local01, #4
2b680     13 2B 62 FC | 	wrlong	local03, local01
2b684     00 FA 05 F6 | 	mov	result1, #0
2b688                 | LR__4081
2b688     A7 F0 03 F6 | 	mov	ptra, fp
2b68c     B2 00 A0 FD | 	call	#popregs_
2b690                 | __system____root_readdir_ret
2b690     2D 00 64 FD | 	ret
2b694                 | 
2b694                 | __system____root_closedir
2b694     00 FA 05 F6 | 	mov	result1, #0
2b698                 | __system____root_closedir_ret
2b698     2D 00 64 FD | 	ret
2b69c                 | 
2b69c                 | __system____root_stat
2b69c     0A 01 02 F6 | 	mov	_var01, arg02
2b6a0     00 13 02 F6 | 	mov	arg01, _var01
2b6a4     00 14 06 F6 | 	mov	arg02, #0
2b6a8     30 16 06 F6 | 	mov	arg03, #48
2b6ac     98 00 A0 FD | 	call	#\builtin_bytefill_
2b6b0     08 00 06 F1 | 	add	_var01, #8
2b6b4     08 00 80 FF 
2b6b8     00 FF 6B FC | 	wrlong	##4607, _var01
2b6bc     00 FA 05 F6 | 	mov	result1, #0
2b6c0                 | __system____root_stat_ret
2b6c0     2D 00 64 FD | 	ret
2b6c4                 | 
2b6c4                 | __system___normalizeName
2b6c4     00 00 06 F6 | 	mov	_var01, #0
2b6c8     09 03 02 F6 | 	mov	_var02, arg01
2b6cc     01 05 02 F6 | 	mov	_var03, _var02
2b6d0                 | LR__4090
2b6d0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b6d4     5C 01 90 AD |  if_e	jmp	#LR__4109
2b6d8     00 00 0E F2 | 	cmp	_var01, #0 wz
2b6dc     02 07 02 56 |  if_ne	mov	_var04, _var03
2b6e0     01 04 06 51 |  if_ne	add	_var03, #1
2b6e4     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2b6e8     00 00 06 56 |  if_ne	mov	_var01, #0
2b6ec     01 07 C2 FA | 	rdbyte	_var04, _var02
2b6f0     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b6f4     D8 00 90 5D |  if_ne	jmp	#LR__4102
2b6f8     01 02 06 F1 | 	add	_var02, #1
2b6fc     01 07 C2 FA | 	rdbyte	_var04, _var02
2b700     01 02 86 F1 | 	sub	_var02, #1
2b704     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b708     18 00 90 AD |  if_e	jmp	#LR__4091
2b70c     01 02 06 F1 | 	add	_var02, #1
2b710     01 09 C2 FA | 	rdbyte	_var05, _var02
2b714     01 02 86 F1 | 	sub	_var02, #1
2b718     04 0B 02 F6 | 	mov	_var06, _var05
2b71c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b720     10 00 90 5D |  if_ne	jmp	#LR__4092
2b724                 | LR__4091
2b724     01 0D 02 F6 | 	mov	_var07, _var02
2b728     01 0C 06 F1 | 	add	_var07, #1
2b72c     06 03 02 F6 | 	mov	_var02, _var07
2b730     E0 00 90 FD | 	jmp	#LR__4106
2b734                 | LR__4092
2b734     01 02 06 F1 | 	add	_var02, #1
2b738     01 0D C2 FA | 	rdbyte	_var07, _var02
2b73c     01 02 86 F1 | 	sub	_var02, #1
2b740     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b744     2E 06 0E F2 | 	cmp	_var04, #46 wz
2b748     84 00 90 5D |  if_ne	jmp	#LR__4101
2b74c     02 02 06 F1 | 	add	_var02, #2
2b750     01 0D C2 FA | 	rdbyte	_var07, _var02
2b754     02 02 86 F1 | 	sub	_var02, #2
2b758     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2b75c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b760     18 00 90 AD |  if_e	jmp	#LR__4093
2b764     02 02 06 F1 | 	add	_var02, #2
2b768     01 09 C2 FA | 	rdbyte	_var05, _var02
2b76c     02 02 86 F1 | 	sub	_var02, #2
2b770     04 0B 02 F6 | 	mov	_var06, _var05
2b774     07 0A 4E F7 | 	zerox	_var06, #7 wz
2b778     54 00 90 5D |  if_ne	jmp	#LR__4100
2b77c                 | LR__4093
2b77c     02 02 06 F1 | 	add	_var02, #2
2b780     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2b784     40 00 90 ED |  if_be	jmp	#LR__4099
2b788     02 0F 02 F6 | 	mov	_var08, _var03
2b78c     01 0E 86 F1 | 	sub	_var08, #1
2b790                 | LR__4094
2b790     07 07 C2 FA | 	rdbyte	_var04, _var08
2b794     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b798     0C 00 90 5D |  if_ne	jmp	#LR__4095
2b79c     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b7a0     01 0E 86 11 |  if_a	sub	_var08, #1
2b7a4     E8 FF 9F 1D |  if_a	jmp	#LR__4094
2b7a8                 | LR__4095
2b7a8     97 0C 48 FB | 	callpa	#(@LR__4097-@LR__4096)>>2,fcache_load_ptr_
2b7ac                 | LR__4096
2b7ac     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2b7b0     10 00 90 ED |  if_be	jmp	#LR__4098
2b7b4     07 07 C2 FA | 	rdbyte	_var04, _var08
2b7b8     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b7bc     01 0E 86 51 |  if_ne	sub	_var08, #1
2b7c0     E8 FF 9F 5D |  if_ne	jmp	#LR__4096
2b7c4                 | LR__4097
2b7c4                 | LR__4098
2b7c4     07 05 02 F6 | 	mov	_var03, _var08
2b7c8                 | LR__4099
2b7c8     01 00 06 F6 | 	mov	_var01, #1
2b7cc     44 00 90 FD | 	jmp	#LR__4106
2b7d0                 | LR__4100
2b7d0                 | LR__4101
2b7d0                 | LR__4102
2b7d0     97 18 48 FB | 	callpa	#(@LR__4104-@LR__4103)>>2,fcache_load_ptr_
2b7d4                 | LR__4103
2b7d4     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2b7d8     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2b7dc     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2b7e0     20 00 90 AD |  if_e	jmp	#LR__4105
2b7e4     01 0B 02 F6 | 	mov	_var06, _var02
2b7e8     01 09 02 F6 | 	mov	_var05, _var02
2b7ec     01 08 06 F1 | 	add	_var05, #1
2b7f0     05 11 C2 FA | 	rdbyte	_var09, _var06
2b7f4     04 03 02 F6 | 	mov	_var02, _var05
2b7f8     02 11 42 FC | 	wrbyte	_var09, _var03
2b7fc     01 04 06 F1 | 	add	_var03, #1
2b800     D0 FF 9F FD | 	jmp	#LR__4103
2b804                 | LR__4104
2b804                 | LR__4105
2b804     01 07 C2 FA | 	rdbyte	_var04, _var02
2b808     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b80c     C0 FE 9F 5D |  if_ne	jmp	#LR__4090
2b810     01 00 06 F6 | 	mov	_var01, #1
2b814                 | LR__4106
2b814     97 0C 48 FB | 	callpa	#(@LR__4108-@LR__4107)>>2,fcache_load_ptr_
2b818                 | LR__4107
2b818     01 07 C2 FA | 	rdbyte	_var04, _var02
2b81c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2b820     01 0D 02 A6 |  if_e	mov	_var07, _var02
2b824     01 0C 06 A1 |  if_e	add	_var07, #1
2b828     06 03 02 A6 |  if_e	mov	_var02, _var07
2b82c     E8 FF 9F AD |  if_e	jmp	#LR__4107
2b830                 | LR__4108
2b830     9C FE 9F FD | 	jmp	#LR__4090
2b834                 | LR__4109
2b834     02 01 48 FC | 	wrbyte	#0, _var03
2b838                 | __system___normalizeName_ret
2b838     2D 00 64 FD | 	ret
2b83c                 | 
2b83c                 | __system___strrev
2b83c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2b840     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2b844     09 03 02 F6 | 	mov	_var02, arg01
2b848     97 1A 48 FB | 	callpa	#(@LR__4112-@LR__4110)>>2,fcache_load_ptr_
2b84c                 | LR__4110
2b84c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2b850     01 02 06 51 |  if_ne	add	_var02, #1
2b854     F4 FF 9F 5D |  if_ne	jmp	#LR__4110
2b858     01 02 86 F1 | 	sub	_var02, #1
2b85c                 | LR__4111
2b85c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2b860     1C 00 90 ED |  if_be	jmp	#LR__4113
2b864     09 01 C2 FA | 	rdbyte	_var01, arg01
2b868     01 05 C2 FA | 	rdbyte	_var03, _var02
2b86c     09 05 42 FC | 	wrbyte	_var03, arg01
2b870     01 01 42 FC | 	wrbyte	_var01, _var02
2b874     01 12 06 F1 | 	add	arg01, #1
2b878     01 02 86 F1 | 	sub	_var02, #1
2b87c     DC FF 9F FD | 	jmp	#LR__4111
2b880                 | LR__4112
2b880                 | LR__4113
2b880                 | __system___strrev_ret
2b880     2D 00 64 FD | 	ret
2b884                 | 
2b884                 | __system___fmtpad
2b884     06 4A 05 F6 | 	mov	COUNT_, #6
2b888     A8 00 A0 FD | 	call	#pushregs_
2b88c     09 27 02 F6 | 	mov	local01, arg01
2b890     0A 29 02 F6 | 	mov	local02, arg02
2b894     0B 2B 02 F6 | 	mov	local03, arg03
2b898     14 13 EA F8 | 	getbyte	arg01, local02, #1
2b89c     16 28 46 F0 | 	shr	local02, #22
2b8a0     03 28 0E F5 | 	and	local02, #3 wz
2b8a4     00 2C 06 F6 | 	mov	local04, #0
2b8a8     01 28 06 A6 |  if_e	mov	local02, #1
2b8ac     0C 29 CA F7 | 	test	local02, arg04 wz
2b8b0     00 FA 05 A6 |  if_e	mov	result1, #0
2b8b4     88 00 90 AD |  if_e	jmp	#LR__4123
2b8b8     09 2B C2 F2 | 	subr	local03, arg01
2b8bc     01 2A 56 F2 | 	cmps	local03, #1 wc
2b8c0     00 FA 05 C6 |  if_b	mov	result1, #0
2b8c4     78 00 90 CD |  if_b	jmp	#LR__4123
2b8c8     03 28 0E F2 | 	cmp	local02, #3 wz
2b8cc     18 00 90 5D |  if_ne	jmp	#LR__4120
2b8d0     01 18 0E F2 | 	cmp	arg04, #1 wz
2b8d4     6E 28 62 FD | 	wrz	local02
2b8d8     14 2B 02 F1 | 	add	local03, local02
2b8dc     15 2B 52 F6 | 	abs	local03, local03 wc
2b8e0     01 2A 46 F0 | 	shr	local03, #1
2b8e4     15 2B 82 F6 | 	negc	local03, local03
2b8e8                 | LR__4120
2b8e8     01 2A 56 F2 | 	cmps	local03, #1 wc
2b8ec     4C 00 90 CD |  if_b	jmp	#LR__4122
2b8f0     15 2F 02 F6 | 	mov	local05, local03
2b8f4                 | LR__4121
2b8f4     13 29 02 F6 | 	mov	local02, local01
2b8f8     13 31 02 F6 | 	mov	local06, local01
2b8fc     13 28 46 F7 | 	zerox	local02, #19
2b900     14 30 46 F0 | 	shr	local06, #20
2b904     02 30 66 F0 | 	shl	local06, #2
2b908     ED 30 02 F1 | 	add	local06, __methods__
2b90c     18 31 02 FB | 	rdlong	local06, local06
2b910     20 12 06 F6 | 	mov	arg01, #32
2b914     F2 2A 02 F6 | 	mov	local03, objptr
2b918     14 E5 01 F6 | 	mov	objptr, local02
2b91c     2D 30 62 FD | 	call	local06
2b920     15 E5 01 F6 | 	mov	objptr, local03
2b924     FD 30 02 F6 | 	mov	local06, result1
2b928     00 30 56 F2 | 	cmps	local06, #0 wc
2b92c     18 FB 01 C6 |  if_b	mov	result1, local06
2b930     0C 00 90 CD |  if_b	jmp	#LR__4123
2b934     18 2D 02 F1 | 	add	local04, local06
2b938     EE 2F 6E FB | 	djnz	local05, #LR__4121
2b93c                 | LR__4122
2b93c     16 FB 01 F6 | 	mov	result1, local04
2b940                 | LR__4123
2b940     A7 F0 03 F6 | 	mov	ptra, fp
2b944     B2 00 A0 FD | 	call	#popregs_
2b948                 | __system___fmtpad_ret
2b948     2D 00 64 FD | 	ret
2b94c                 | 
2b94c                 | __system___uitoa
2b94c     04 4A 05 F6 | 	mov	COUNT_, #4
2b950     A8 00 A0 FD | 	call	#pushregs_
2b954     09 27 02 F6 | 	mov	local01, arg01
2b958     00 1A 4E F2 | 	cmps	arg05, #0 wz
2b95c     13 1B 02 F6 | 	mov	arg05, local01
2b960     00 28 06 F6 | 	mov	local02, #0
2b964     37 2A 06 56 |  if_ne	mov	local03, #55
2b968     57 2A 06 A6 |  if_e	mov	local03, #87
2b96c                 | LR__4130
2b96c     0B 15 12 FD | 	qdiv	arg02, arg03
2b970     19 2C 62 FD | 	getqy	local04
2b974     0B 15 12 FD | 	qdiv	arg02, arg03
2b978     0A 2C 16 F2 | 	cmp	local04, #10 wc
2b97c     30 2C 06 C1 |  if_b	add	local04, #48
2b980     15 2D 02 31 |  if_ae	add	local04, local03
2b984     0D 2D 42 FC | 	wrbyte	local04, arg05
2b988     01 1A 06 F1 | 	add	arg05, #1
2b98c     01 28 06 F1 | 	add	local02, #1
2b990     18 14 62 FD | 	getqx	arg02
2b994     00 14 0E F2 | 	cmp	arg02, #0 wz
2b998     D0 FF 9F 5D |  if_ne	jmp	#LR__4130
2b99c     0C 29 12 F2 | 	cmp	local02, arg04 wc
2b9a0     C8 FF 9F CD |  if_b	jmp	#LR__4130
2b9a4     0D 01 48 FC | 	wrbyte	#0, arg05
2b9a8     13 13 02 F6 | 	mov	arg01, local01
2b9ac     8C FE BF FD | 	call	#__system___strrev
2b9b0     14 FB 01 F6 | 	mov	result1, local02
2b9b4     A7 F0 03 F6 | 	mov	ptra, fp
2b9b8     B2 00 A0 FD | 	call	#popregs_
2b9bc                 | __system___uitoa_ret
2b9bc     2D 00 64 FD | 	ret
2b9c0                 | 
2b9c0                 | __system__disassemble_0560
2b9c0     10 4A 05 F6 | 	mov	COUNT_, #16
2b9c4     A8 00 A0 FD | 	call	#pushregs_
2b9c8     09 27 02 F6 | 	mov	local01, arg01
2b9cc     0A 29 02 F6 | 	mov	local02, arg02
2b9d0     0B 2B 02 F6 | 	mov	local03, arg03
2b9d4     0C 2D 02 F6 | 	mov	local04, arg04
2b9d8     0D 2F 02 F6 | 	mov	local05, arg05
2b9dc     17 13 52 F6 | 	abs	arg01, local05 wc
2b9e0     1F 30 C6 C9 |  if_b	decod	local06, #31
2b9e4     00 30 06 36 |  if_ae	mov	local06, #0
2b9e8     CC CF BF FD | 	call	#__system___float_fromuns
2b9ec     18 FB 61 F5 | 	xor	result1, local06
2b9f0     FD 32 02 F6 | 	mov	local07, result1
2b9f4     00 34 06 F6 | 	mov	local08, #0
2b9f8     13 13 02 F6 | 	mov	arg01, local01
2b9fc     00 14 06 F6 | 	mov	arg02, #0
2ba00     01 16 06 F6 | 	mov	arg03, #1
2ba04     E8 D7 BF FD | 	call	#__system___float_cmp
2ba08     00 FA 0D F2 | 	cmp	result1, #0 wz
2ba0c     00 36 06 A6 |  if_e	mov	local09, #0
2ba10     14 01 68 AC |  if_e	wrlong	#0, local02
2ba14     15 37 62 AC |  if_e	wrlong	local09, local03
2ba18     8C 01 90 AD |  if_e	jmp	#LR__4152
2ba1c     13 13 02 F6 | 	mov	arg01, local01
2ba20     BC DC BF FD | 	call	#__system____builtin_ilogb
2ba24     FD 38 02 F6 | 	mov	local10, result1
2ba28     0A 2E 0E F2 | 	cmp	local05, #10 wz
2ba2c     24 00 90 5D |  if_ne	jmp	#LR__4140
2ba30     1C 37 02 F6 | 	mov	local09, local10
2ba34     01 36 66 F0 | 	shl	local09, #1
2ba38     1C 37 02 F1 | 	add	local09, local10
2ba3c     1B 39 52 F6 | 	abs	local10, local09 wc
2ba40     0A 38 16 FD | 	qdiv	local10, #10
2ba44     09 3A 06 F6 | 	mov	local11, #9
2ba48     18 38 62 FD | 	getqx	local10
2ba4c     1C 39 82 F6 | 	negc	local10, local10
2ba50     04 00 90 FD | 	jmp	#LR__4141
2ba54                 | LR__4140
2ba54     18 3A 06 F6 | 	mov	local11, #24
2ba58                 | LR__4141
2ba58                 | LR__4142
2ba58     08 34 56 F2 | 	cmps	local08, #8 wc
2ba5c     01 34 06 F1 | 	add	local08, #1
2ba60     60 00 90 3D |  if_ae	jmp	#LR__4143
2ba64     00 C0 1F FF 
2ba68     00 12 06 F6 | 	mov	arg01, ##1065353216
2ba6c     19 15 02 F6 | 	mov	arg02, local07
2ba70     1C 17 02 F6 | 	mov	arg03, local10
2ba74     4C E3 BF FD | 	call	#__system___float_pow_n
2ba78     FD 14 02 F6 | 	mov	arg02, result1
2ba7c     13 13 02 F6 | 	mov	arg01, local01
2ba80     3C D5 BF FD | 	call	#__system___float_div
2ba84     FD 3C 02 F6 | 	mov	local12, result1
2ba88     1E 13 02 F6 | 	mov	arg01, local12
2ba8c     00 C0 1F FF 
2ba90     00 14 06 F6 | 	mov	arg02, ##1065353216
2ba94     01 16 06 F6 | 	mov	arg03, #1
2ba98     54 D7 BF FD | 	call	#__system___float_cmp
2ba9c     00 FA 55 F2 | 	cmps	result1, #0 wc
2baa0     01 38 86 C1 |  if_b	sub	local10, #1
2baa4     B0 FF 9F CD |  if_b	jmp	#LR__4142
2baa8     19 15 02 F6 | 	mov	arg02, local07
2baac     1E 13 02 F6 | 	mov	arg01, local12
2bab0     01 16 66 F6 | 	neg	arg03, #1
2bab4     38 D7 BF FD | 	call	#__system___float_cmp
2bab8     00 FA 55 F2 | 	cmps	result1, #0 wc
2babc     01 38 06 31 |  if_ae	add	local10, #1
2bac0     94 FF 9F 3D |  if_ae	jmp	#LR__4142
2bac4                 | LR__4143
2bac4     1E 13 02 F6 | 	mov	arg01, local12
2bac8     14 DC BF FD | 	call	#__system____builtin_ilogb
2bacc     FD 3E 02 F6 | 	mov	local13, result1
2bad0     1E 41 02 F6 | 	mov	local14, local12
2bad4     17 41 06 F4 | 	bitl	local14, #279
2bad8     17 40 26 F4 | 	bith	local14, #23
2badc     1F 41 62 F0 | 	shl	local14, local13
2bae0     02 2E 0E F2 | 	cmp	local05, #2 wz
2bae4     02 2C 66 A0 |  if_e	shl	local04, #2
2bae8     00 42 06 F6 | 	mov	local15, #0
2baec     00 2C 56 F2 | 	cmps	local04, #0 wc
2baf0     10 00 90 3D |  if_ae	jmp	#LR__4144
2baf4     1C 2D C2 F2 | 	subr	local04, local10
2baf8     00 2C 56 F2 | 	cmps	local04, #0 wc
2bafc     A0 00 90 CD |  if_b	jmp	#LR__4151
2bb00     04 00 90 FD | 	jmp	#LR__4145
2bb04                 | LR__4144
2bb04     01 2C 06 F1 | 	add	local04, #1
2bb08                 | LR__4145
2bb08     1D 2D 7A F3 | 	fles	local04, local11 wcz
2bb0c     01 44 06 F6 | 	mov	local16, #1
2bb10     97 22 48 FB | 	callpa	#(@LR__4147-@LR__4146)>>2,fcache_load_ptr_
2bb14                 | LR__4146
2bb14     00 40 00 FF 
2bb18     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2bb1c     38 00 90 3D |  if_ae	jmp	#LR__4148
2bb20     01 2C 56 F2 | 	cmps	local04, #1 wc
2bb24     01 2C 86 F1 | 	sub	local04, #1
2bb28     2C 00 90 CD |  if_b	jmp	#LR__4148
2bb2c     17 43 02 FD | 	qmul	local15, local05
2bb30     20 3F 02 F6 | 	mov	local13, local14
2bb34     17 3E 46 F0 | 	shr	local13, #23
2bb38     17 41 06 F4 | 	bitl	local14, #279
2bb3c     18 42 62 FD | 	getqx	local15
2bb40     17 45 02 FD | 	qmul	local16, local05
2bb44     18 44 62 FD | 	getqx	local16
2bb48     17 41 02 FD | 	qmul	local14, local05
2bb4c     1F 43 02 F1 | 	add	local15, local13
2bb50     18 40 62 FD | 	getqx	local14
2bb54     BC FF 9F FD | 	jmp	#LR__4146
2bb58                 | LR__4147
2bb58                 | LR__4148
2bb58     17 37 02 F6 | 	mov	local09, local05
2bb5c     17 36 66 F0 | 	shl	local09, #23
2bb60     1B 3F 52 F6 | 	abs	local13, local09 wc
2bb64     01 3E 46 F0 | 	shr	local13, #1
2bb68     1F 3F 82 F6 | 	negc	local13, local13
2bb6c     1F 41 1A F2 | 	cmp	local14, local13 wcz
2bb70     20 00 90 1D |  if_a	jmp	#LR__4149
2bb74     17 2E 66 F0 | 	shl	local05, #23
2bb78     17 3F 52 F6 | 	abs	local13, local05 wc
2bb7c     01 3E 46 F0 | 	shr	local13, #1
2bb80     1F 3F 82 F6 | 	negc	local13, local13
2bb84     1F 41 0A F2 | 	cmp	local14, local13 wz
2bb88     14 00 90 5D |  if_ne	jmp	#LR__4150
2bb8c     01 42 CE F7 | 	test	local15, #1 wz
2bb90     0C 00 90 AD |  if_e	jmp	#LR__4150
2bb94                 | LR__4149
2bb94     01 42 06 F1 | 	add	local15, #1
2bb98     22 43 0A F2 | 	cmp	local15, local16 wz
2bb9c     01 38 06 A1 |  if_e	add	local10, #1
2bba0                 | LR__4150
2bba0                 | LR__4151
2bba0     14 43 62 FC | 	wrlong	local15, local02
2bba4     15 39 62 FC | 	wrlong	local10, local03
2bba8                 | LR__4152
2bba8     A7 F0 03 F6 | 	mov	ptra, fp
2bbac     B2 00 A0 FD | 	call	#popregs_
2bbb0                 | __system__disassemble_0560_ret
2bbb0     2D 00 64 FD | 	ret
2bbb4                 | 
2bbb4                 | __system__emitsign_0562
2bbb4     00 FA 05 F6 | 	mov	result1, #0
2bbb8     00 14 0E F2 | 	cmp	arg02, #0 wz
2bbbc     09 01 02 56 |  if_ne	mov	_var01, arg01
2bbc0     01 12 06 51 |  if_ne	add	arg01, #1
2bbc4     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2bbc8     01 FA 05 56 |  if_ne	mov	result1, #1
2bbcc     00 16 0E F2 | 	cmp	arg03, #0 wz
2bbd0     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2bbd4     01 12 06 51 |  if_ne	add	arg01, #1
2bbd8     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2bbdc     02 FA 05 51 |  if_ne	add	result1, #2
2bbe0                 | __system__emitsign_0562_ret
2bbe0     2D 00 64 FD | 	ret
2bbe4                 | 
2bbe4                 | __system___getiolock_0600
2bbe4     01 4A 05 F6 | 	mov	COUNT_, #1
2bbe8     A8 00 A0 FD | 	call	#pushregs_
2bbec     A0 F8 BF FD | 	call	#__system____getftab
2bbf0     FD 26 0A F6 | 	mov	local01, result1 wz
2bbf4     10 00 90 AD |  if_e	jmp	#LR__4160
2bbf8     08 26 06 F1 | 	add	local01, #8
2bbfc     13 FB 09 FB | 	rdlong	result1, local01 wz
2bc00     08 26 86 F1 | 	sub	local01, #8
2bc04     18 00 90 5D |  if_ne	jmp	#LR__4161
2bc08                 | LR__4160
2bc08     01 00 00 FF 
2bc0c     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2bc10     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2bc14     01 00 00 FF 
2bc18     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2bc1c     08 00 90 FD | 	jmp	#LR__4162
2bc20                 | LR__4161
2bc20     0C 26 06 F1 | 	add	local01, #12
2bc24     13 FB 01 F6 | 	mov	result1, local01
2bc28                 | LR__4162
2bc28     A7 F0 03 F6 | 	mov	ptra, fp
2bc2c     B2 00 A0 FD | 	call	#popregs_
2bc30                 | __system___getiolock_0600_ret
2bc30     2D 00 64 FD | 	ret
2bc34                 | 
2bc34                 | __system___gettxfunc
2bc34     01 4A 05 F6 | 	mov	COUNT_, #1
2bc38     A8 00 A0 FD | 	call	#pushregs_
2bc3c     50 F8 BF FD | 	call	#__system____getftab
2bc40     FD 26 0A F6 | 	mov	local01, result1 wz
2bc44     10 00 90 AD |  if_e	jmp	#LR__4170
2bc48     08 26 06 F1 | 	add	local01, #8
2bc4c     13 15 0A FB | 	rdlong	arg02, local01 wz
2bc50     08 26 86 F1 | 	sub	local01, #8
2bc54     08 00 90 5D |  if_ne	jmp	#LR__4171
2bc58                 | LR__4170
2bc58     00 FA 05 F6 | 	mov	result1, #0
2bc5c     0C 00 90 FD | 	jmp	#LR__4172
2bc60                 | LR__4171
2bc60     00 10 05 FF 
2bc64     00 26 46 F5 | 	or	local01, ##169869312
2bc68     13 FB 01 F6 | 	mov	result1, local01
2bc6c                 | LR__4172
2bc6c     A7 F0 03 F6 | 	mov	ptra, fp
2bc70     B2 00 A0 FD | 	call	#popregs_
2bc74                 | __system___gettxfunc_ret
2bc74     2D 00 64 FD | 	ret
2bc78                 | 
2bc78                 | __system___getrxfunc
2bc78     01 4A 05 F6 | 	mov	COUNT_, #1
2bc7c     A8 00 A0 FD | 	call	#pushregs_
2bc80     0C F8 BF FD | 	call	#__system____getftab
2bc84     FD 26 0A F6 | 	mov	local01, result1 wz
2bc88     10 00 90 AD |  if_e	jmp	#LR__4180
2bc8c     08 26 06 F1 | 	add	local01, #8
2bc90     13 15 0A FB | 	rdlong	arg02, local01 wz
2bc94     08 26 86 F1 | 	sub	local01, #8
2bc98     08 00 90 5D |  if_ne	jmp	#LR__4181
2bc9c                 | LR__4180
2bc9c     00 FA 05 F6 | 	mov	result1, #0
2bca0     0C 00 90 FD | 	jmp	#LR__4182
2bca4                 | LR__4181
2bca4     00 18 05 FF 
2bca8     00 26 46 F5 | 	or	local01, ##170917888
2bcac     13 FB 01 F6 | 	mov	result1, local01
2bcb0                 | LR__4182
2bcb0     A7 F0 03 F6 | 	mov	ptra, fp
2bcb4     B2 00 A0 FD | 	call	#popregs_
2bcb8                 | __system___getrxfunc_ret
2bcb8     2D 00 64 FD | 	ret
2bcbc                 | 
2bcbc                 | __system____ScanForChar
2bcbc     09 01 02 F6 | 	mov	_var01, arg01
2bcc0     09 03 02 F6 | 	mov	_var02, arg01
2bcc4     97 06 48 FB | 	callpa	#(@LR__4191-@LR__4190)>>2,fcache_load_ptr_
2bcc8                 | LR__4190
2bcc8     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2bccc     01 02 06 51 |  if_ne	add	_var02, #1
2bcd0     F4 FF 9F 5D |  if_ne	jmp	#LR__4190
2bcd4                 | LR__4191
2bcd4     09 03 82 F1 | 	sub	_var02, arg01
2bcd8     01 FB 01 F6 | 	mov	result1, _var02
2bcdc     FD 12 0A F6 | 	mov	arg01, result1 wz
2bce0     00 FA 05 A6 |  if_e	mov	result1, #0
2bce4     B8 00 90 AD |  if_e	jmp	#LR__4198
2bce8     0A 05 02 F6 | 	mov	_var03, arg02
2bcec     07 04 4E F7 | 	zerox	_var03, #7 wz
2bcf0     00 FA 05 A6 |  if_e	mov	result1, #0
2bcf4     A8 00 90 AD |  if_e	jmp	#LR__4198
2bcf8     01 16 16 F2 | 	cmp	arg03, #1 wc
2bcfc     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2bd00     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2bd04     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2bd08     94 00 90 4D |  if_c_and_nz	jmp	#LR__4198
2bd0c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2bd10     10 00 90 ED |  if_be	jmp	#LR__4192
2bd14     00 18 0E F2 | 	cmp	arg04, #0 wz
2bd18     00 FA 05 A6 |  if_e	mov	result1, #0
2bd1c     80 00 90 AD |  if_e	jmp	#LR__4198
2bd20     09 17 02 F6 | 	mov	arg03, arg01
2bd24                 | LR__4192
2bd24     01 16 86 F1 | 	sub	arg03, #1
2bd28     00 18 0E F2 | 	cmp	arg04, #0 wz
2bd2c     38 00 90 5D |  if_ne	jmp	#LR__4194
2bd30     0B 07 02 F6 | 	mov	_var04, arg03
2bd34     09 09 02 F6 | 	mov	_var05, arg01
2bd38                 | LR__4193
2bd38     04 07 12 F2 | 	cmp	_var04, _var05 wc
2bd3c     5C 00 90 3D |  if_ae	jmp	#LR__4197
2bd40     03 05 02 F6 | 	mov	_var03, _var04
2bd44     00 05 02 F1 | 	add	_var03, _var01
2bd48     02 05 C2 FA | 	rdbyte	_var03, _var03
2bd4c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2bd50     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2bd54     01 06 06 A1 |  if_e	add	_var04, #1
2bd58     03 FB 01 A6 |  if_e	mov	result1, _var04
2bd5c     40 00 90 AD |  if_e	jmp	#LR__4198
2bd60     01 06 06 F1 | 	add	_var04, #1
2bd64     D0 FF 9F FD | 	jmp	#LR__4193
2bd68                 | LR__4194
2bd68     0B 07 02 F6 | 	mov	_var04, arg03
2bd6c                 | LR__4195
2bd6c     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2bd70     28 00 90 1D |  if_a	jmp	#LR__4196
2bd74     03 09 02 F6 | 	mov	_var05, _var04
2bd78     00 09 02 F1 | 	add	_var05, _var01
2bd7c     04 05 C2 FA | 	rdbyte	_var03, _var05
2bd80     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2bd84     04 05 0A F2 | 	cmp	_var03, _var05 wz
2bd88     01 06 06 A1 |  if_e	add	_var04, #1
2bd8c     03 FB 01 A6 |  if_e	mov	result1, _var04
2bd90     0C 00 90 AD |  if_e	jmp	#LR__4198
2bd94     01 06 86 F1 | 	sub	_var04, #1
2bd98     D0 FF 9F FD | 	jmp	#LR__4195
2bd9c                 | LR__4196
2bd9c                 | LR__4197
2bd9c     00 FA 05 F6 | 	mov	result1, #0
2bda0                 | LR__4198
2bda0                 | __system____ScanForChar_ret
2bda0     2D 00 64 FD | 	ret
2bda4                 | 
2bda4                 | __system___basic_dir
2bda4     05 4A 05 F6 | 	mov	COUNT_, #5
2bda8     A8 00 A0 FD | 	call	#pushregs_
2bdac     4C F0 07 F1 | 	add	ptra, #76
2bdb0     04 4E 05 F1 | 	add	fp, #4
2bdb4     A7 12 62 FC | 	wrlong	arg01, fp
2bdb8     04 4E 05 F1 | 	add	fp, #4
2bdbc     A7 14 62 FC | 	wrlong	arg02, fp
2bdc0     04 4E 85 F1 | 	sub	fp, #4
2bdc4     A7 14 0A FB | 	rdlong	arg02, fp wz
2bdc8     04 4E 85 F1 | 	sub	fp, #4
2bdcc     04 4E 05 51 |  if_ne	add	fp, #4
2bdd0     A7 26 02 5B |  if_ne	rdlong	local01, fp
2bdd4     04 4E 85 51 |  if_ne	sub	fp, #4
2bdd8     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2bddc     70 00 90 AD |  if_e	jmp	#LR__4200
2bde0     03 00 00 FF 
2bde4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2bde8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2bdec     03 00 00 FF 
2bdf0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2bdf4     03 00 00 5F 
2bdf8     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2bdfc     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2be00     03 00 00 5F 
2be04     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2be08     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2be0c     AD 01 00 FF 
2be10     BC 12 06 F6 | 	mov	arg01, ##@LR__5368
2be14     E0 E8 BF FD | 	call	#__system__opendir
2be18     03 00 00 FF 
2be1c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be20     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2be24     08 4E 05 F1 | 	add	fp, #8
2be28     A7 28 02 FB | 	rdlong	local02, fp
2be2c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2be30     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2be34     04 4E 85 F1 | 	sub	fp, #4
2be38     A7 28 02 FB | 	rdlong	local02, fp
2be3c     04 4E 85 F1 | 	sub	fp, #4
2be40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2be44     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2be48     03 00 00 FF 
2be4c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2be50                 | LR__4200
2be50     03 00 00 FF 
2be54     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be58     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2be5c     03 00 00 FF 
2be60     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be64     AD 01 00 AF 
2be68     BE FA 05 A6 |  if_e	mov	result1, ##@LR__5369
2be6c     84 02 90 AD |  if_e	jmp	#LR__4213
2be70                 | LR__4201
2be70     03 00 00 FF 
2be74     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2be78     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2be7c     03 00 00 FF 
2be80     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2be84     D0 E9 BF FD | 	call	#__system__readdir
2be88     0C 4E 05 F1 | 	add	fp, #12
2be8c     A7 FA 61 FC | 	wrlong	result1, fp
2be90     0C 4E 85 F1 | 	sub	fp, #12
2be94     00 FA 0D F2 | 	cmp	result1, #0 wz
2be98     38 00 90 5D |  if_ne	jmp	#LR__4202
2be9c     03 00 00 FF 
2bea0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2bea4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2bea8     03 00 00 FF 
2beac     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2beb0     30 E9 BF FD | 	call	#__system__closedir
2beb4     03 00 00 FF 
2beb8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2bebc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2bec0     03 00 00 FF 
2bec4     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2bec8     AD 01 00 FF 
2becc     C0 FA 05 F6 | 	mov	result1, ##@LR__5370
2bed0     20 02 90 FD | 	jmp	#LR__4213
2bed4                 | LR__4202
2bed4     0C 4E 05 F1 | 	add	fp, #12
2bed8     A7 12 02 FB | 	rdlong	arg01, fp
2bedc     0C 4E 85 F1 | 	sub	fp, #12
2bee0     03 00 00 FF 
2bee4     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2bee8     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2beec     03 00 00 FF 
2bef0     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2bef4     10 09 B0 FD | 	call	#__system___pat_match
2bef8     00 FA 0D F2 | 	cmp	result1, #0 wz
2befc     70 FF 9F AD |  if_e	jmp	#LR__4201
2bf00     03 00 00 FF 
2bf04     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2bf08     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2bf0c     03 00 00 FF 
2bf10     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2bf14     78 01 90 AD |  if_e	jmp	#LR__4209
2bf18     0C 4E 05 F1 | 	add	fp, #12
2bf1c     A7 12 02 FB | 	rdlong	arg01, fp
2bf20     04 4E 05 F1 | 	add	fp, #4
2bf24     A7 14 02 F6 | 	mov	arg02, fp
2bf28     10 4E 85 F1 | 	sub	fp, #16
2bf2c     2C F2 BF FD | 	call	#__system__stat
2bf30     40 4E 05 F1 | 	add	fp, #64
2bf34     A7 FA 61 FC | 	wrlong	result1, fp
2bf38     40 4E 85 F1 | 	sub	fp, #64
2bf3c     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf40     AD 01 00 5F 
2bf44     C2 FA 05 56 |  if_ne	mov	result1, ##@LR__5371
2bf48     A8 01 90 5D |  if_ne	jmp	#LR__4213
2bf4c     18 4E 05 F1 | 	add	fp, #24
2bf50     A7 28 02 FB | 	rdlong	local02, fp
2bf54     78 00 00 FF 
2bf58     00 28 06 F5 | 	and	local02, ##61440
2bf5c     2C 4E 05 F1 | 	add	fp, #44
2bf60     A7 28 62 FC | 	wrlong	local02, fp
2bf64     38 4E 85 F1 | 	sub	fp, #56
2bf68     A7 28 02 FB | 	rdlong	local02, fp
2bf6c     0C 4E 85 F1 | 	sub	fp, #12
2bf70     14 29 C2 FA | 	rdbyte	local02, local02
2bf74     2E 28 0E F2 | 	cmp	local02, #46 wz
2bf78     08 4E 05 A1 |  if_e	add	fp, #8
2bf7c     A7 04 68 AC |  if_e	wrlong	#2, fp
2bf80     08 4E C5 F3 | 	sumz	fp, #8
2bf84     A7 00 68 5C |  if_ne	wrlong	#0, fp
2bf88     08 4E 85 51 |  if_ne	sub	fp, #8
2bf8c     44 4E 05 F1 | 	add	fp, #68
2bf90     A7 28 02 FB | 	rdlong	local02, fp
2bf94     44 4E 85 F1 | 	sub	fp, #68
2bf98     08 00 00 FF 
2bf9c     00 28 0E F2 | 	cmp	local02, ##4096 wz
2bfa0     18 00 90 5D |  if_ne	jmp	#LR__4203
2bfa4     08 4E 05 F1 | 	add	fp, #8
2bfa8     A7 28 02 FB | 	rdlong	local02, fp
2bfac     10 28 46 F5 | 	or	local02, #16
2bfb0     A7 28 62 FC | 	wrlong	local02, fp
2bfb4     08 4E 85 F1 | 	sub	fp, #8
2bfb8     AC 00 90 FD | 	jmp	#LR__4208
2bfbc                 | LR__4203
2bfbc     44 4E 05 F1 | 	add	fp, #68
2bfc0     A7 28 02 FB | 	rdlong	local02, fp
2bfc4     44 4E 85 F1 | 	sub	fp, #68
2bfc8     10 00 00 FF 
2bfcc     00 28 0E F2 | 	cmp	local02, ##8192 wz
2bfd0     44 4E 05 51 |  if_ne	add	fp, #68
2bfd4     A7 26 02 5B |  if_ne	rdlong	local01, fp
2bfd8     44 4E 85 51 |  if_ne	sub	fp, #68
2bfdc     18 00 00 5F 
2bfe0     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2bfe4     44 4E 05 51 |  if_ne	add	fp, #68
2bfe8     13 2B 02 56 |  if_ne	mov	local03, local01
2bfec     44 4E 85 51 |  if_ne	sub	fp, #68
2bff0     20 00 00 5F 
2bff4     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2bff8     18 00 90 5D |  if_ne	jmp	#LR__4204
2bffc     08 4E 05 F1 | 	add	fp, #8
2c000     A7 28 02 FB | 	rdlong	local02, fp
2c004     04 28 46 F5 | 	or	local02, #4
2c008     A7 28 62 FC | 	wrlong	local02, fp
2c00c     08 4E 85 F1 | 	sub	fp, #8
2c010     54 00 90 FD | 	jmp	#LR__4207
2c014                 | LR__4204
2c014     18 4E 05 F1 | 	add	fp, #24
2c018     A7 28 02 FB | 	rdlong	local02, fp
2c01c     18 4E 85 F1 | 	sub	fp, #24
2c020     92 28 CE F7 | 	test	local02, #146 wz
2c024     18 00 90 5D |  if_ne	jmp	#LR__4205
2c028     08 4E 05 F1 | 	add	fp, #8
2c02c     A7 28 02 FB | 	rdlong	local02, fp
2c030     01 28 46 F5 | 	or	local02, #1
2c034     A7 28 62 FC | 	wrlong	local02, fp
2c038     08 4E 85 F1 | 	sub	fp, #8
2c03c     28 00 90 FD | 	jmp	#LR__4206
2c040                 | LR__4205
2c040     44 4E 05 F1 | 	add	fp, #68
2c044     A7 2C 02 FB | 	rdlong	local04, fp
2c048     44 4E 85 F1 | 	sub	fp, #68
2c04c     08 00 00 FF 
2c050     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2c054     08 4E 05 51 |  if_ne	add	fp, #8
2c058     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2c05c     20 2C 46 55 |  if_ne	or	local04, #32
2c060     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2c064     08 4E 85 51 |  if_ne	sub	fp, #8
2c068                 | LR__4206
2c068                 | LR__4207
2c068                 | LR__4208
2c068     08 4E 05 F1 | 	add	fp, #8
2c06c     A7 2C 02 FB | 	rdlong	local04, fp
2c070     08 4E 85 F1 | 	sub	fp, #8
2c074     03 00 00 FF 
2c078     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c07c     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2c080     03 00 00 FF 
2c084     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c088     13 2D CA F7 | 	test	local04, local01 wz
2c08c     E0 FD 9F AD |  if_e	jmp	#LR__4201
2c090                 | LR__4209
2c090     0C 4E 05 F1 | 	add	fp, #12
2c094     A7 12 02 FB | 	rdlong	arg01, fp
2c098     0C 4E 85 F1 | 	sub	fp, #12
2c09c     09 2F 02 F6 | 	mov	local05, arg01
2c0a0     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c0a4                 | LR__4210
2c0a4     17 FB C9 FA | 	rdbyte	result1, local05 wz
2c0a8     01 2E 06 51 |  if_ne	add	local05, #1
2c0ac     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c0b0                 | LR__4211
2c0b0     17 13 C2 F2 | 	subr	arg01, local05
2c0b4     01 12 06 F1 | 	add	arg01, #1
2c0b8     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2c0bc     48 4E 05 F1 | 	add	fp, #72
2c0c0     A7 FA 61 FC | 	wrlong	result1, fp
2c0c4     48 4E 85 F1 | 	sub	fp, #72
2c0c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0cc     18 00 90 AD |  if_e	jmp	#LR__4212
2c0d0     48 4E 05 F1 | 	add	fp, #72
2c0d4     A7 12 02 FB | 	rdlong	arg01, fp
2c0d8     3C 4E 85 F1 | 	sub	fp, #60
2c0dc     A7 14 02 FB | 	rdlong	arg02, fp
2c0e0     0C 4E 85 F1 | 	sub	fp, #12
2c0e4     0C 9E BF FD | 	call	#__system____builtin_strcpy
2c0e8                 | LR__4212
2c0e8     48 4E 05 F1 | 	add	fp, #72
2c0ec     A7 FA 01 FB | 	rdlong	result1, fp
2c0f0     48 4E 85 F1 | 	sub	fp, #72
2c0f4                 | LR__4213
2c0f4     A7 F0 03 F6 | 	mov	ptra, fp
2c0f8     B2 00 A0 FD | 	call	#popregs_
2c0fc                 | __system___basic_dir_ret
2c0fc     2D 00 64 FD | 	ret
2c100                 | 
2c100                 | __system__pack_0675
2c100     09 01 02 F6 | 	mov	_var01, arg01
2c104     7F 16 06 F1 | 	add	arg03, #127
2c108     04 18 CE F7 | 	test	arg04, #4 wz
2c10c     10 00 90 AD |  if_e	jmp	#LR__4220
2c110     00 00 0E F2 | 	cmp	_var01, #0 wz
2c114     16 00 C6 A9 |  if_e	decod	_var01, #22
2c118     F7 00 26 F4 | 	bith	_var01, #247
2c11c     B4 00 90 FD | 	jmp	#LR__4229
2c120                 | LR__4220
2c120     02 18 CE F7 | 	test	arg04, #2 wz
2c124     00 C0 3F 5F 
2c128     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2c12c     00 14 06 56 |  if_ne	mov	arg02, #0
2c130     A0 00 90 5D |  if_ne	jmp	#LR__4228
2c134     08 18 CE F7 | 	test	arg04, #8 wz
2c138     00 00 06 56 |  if_ne	mov	_var01, #0
2c13c     94 00 90 5D |  if_ne	jmp	#LR__4227
2c140     FF 16 56 F2 | 	cmps	arg03, #255 wc
2c144     00 C0 3F 3F 
2c148     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2c14c     00 14 06 36 |  if_ae	mov	arg02, #0
2c150     80 00 90 3D |  if_ae	jmp	#LR__4226
2c154     01 16 56 F2 | 	cmps	arg03, #1 wc
2c158     6C 00 90 3D |  if_ae	jmp	#LR__4224
2c15c     01 14 46 F0 | 	shr	arg02, #1
2c160     00 03 02 F6 | 	mov	_var02, _var01
2c164     01 02 06 F5 | 	and	_var02, #1
2c168     1F 02 66 F0 | 	shl	_var02, #31
2c16c     01 15 42 F5 | 	or	arg02, _var02
2c170     01 00 46 F0 | 	shr	_var01, #1
2c174     97 1E 48 FB | 	callpa	#(@LR__4222-@LR__4221)>>2,fcache_load_ptr_
2c178                 | LR__4221
2c178     00 16 56 F2 | 	cmps	arg03, #0 wc
2c17c     34 00 90 3D |  if_ae	jmp	#LR__4223
2c180     00 00 0E F2 | 	cmp	_var01, #0 wz
2c184     2C 00 90 AD |  if_e	jmp	#LR__4223
2c188     0A 13 02 F6 | 	mov	arg01, arg02
2c18c     01 12 06 F5 | 	and	arg01, #1
2c190     01 16 06 F1 | 	add	arg03, #1
2c194     01 14 46 F0 | 	shr	arg02, #1
2c198     00 03 02 F6 | 	mov	_var02, _var01
2c19c     01 02 06 F5 | 	and	_var02, #1
2c1a0     1F 02 66 F0 | 	shl	_var02, #31
2c1a4     01 15 42 F5 | 	or	arg02, _var02
2c1a8     09 15 42 F5 | 	or	arg02, arg01
2c1ac     01 00 46 F0 | 	shr	_var01, #1
2c1b0     C4 FF 9F FD | 	jmp	#LR__4221
2c1b4                 | LR__4222
2c1b4                 | LR__4223
2c1b4     00 16 56 F2 | 	cmps	arg03, #0 wc
2c1b8     18 00 90 3D |  if_ae	jmp	#LR__4225
2c1bc     00 14 0E F2 | 	cmp	arg02, #0 wz
2c1c0     6F 14 62 FD | 	wrnz	arg02
2c1c4     0C 00 90 FD | 	jmp	#LR__4225
2c1c8                 | LR__4224
2c1c8     17 01 06 F4 | 	bitl	_var01, #279
2c1cc     17 16 66 F0 | 	shl	arg03, #23
2c1d0     0B 01 42 F5 | 	or	_var01, arg03
2c1d4                 | LR__4225
2c1d4                 | LR__4226
2c1d4                 | LR__4227
2c1d4                 | LR__4228
2c1d4                 | LR__4229
2c1d4     01 00 CE F7 | 	test	_var01, #1 wz
2c1d8     01 14 46 55 |  if_ne	or	arg02, #1
2c1dc     0A 17 02 F6 | 	mov	arg03, arg02
2c1e0     00 02 06 F6 | 	mov	_var02, #0
2c1e4     FF FF 3F FF 
2c1e8     FF 15 06 F1 | 	add	arg02, ##2147483647
2c1ec     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2c1f0     01 02 06 C6 |  if_b	mov	_var02, #1
2c1f4     01 01 02 F1 | 	add	_var01, _var02
2c1f8     01 18 CE F7 | 	test	arg04, #1 wz
2c1fc     1F 00 26 54 |  if_ne	bith	_var01, #31
2c200     00 FB 01 F6 | 	mov	result1, _var01
2c204                 | __system__pack_0675_ret
2c204     2D 00 64 FD | 	ret
2c208                 | 
2c208                 | __system___rxtxioctl_0765
2c208     00 15 0E F2 | 	cmp	arg02, #256 wz
2c20c     0C 00 90 AD |  if_e	jmp	#LR__4230
2c210     01 15 0E F2 | 	cmp	arg02, #257 wz
2c214     1C 00 90 AD |  if_e	jmp	#LR__4231
2c218     30 00 90 FD | 	jmp	#LR__4232
2c21c                 | LR__4230
2c21c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2c220     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2c224     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2c228     0B FB 61 FC | 	wrlong	result1, arg03
2c22c     00 FA 05 F6 | 	mov	result1, #0
2c230     28 00 90 FD | 	jmp	#LR__4233
2c234                 | LR__4231
2c234     0B 13 02 FB | 	rdlong	arg01, arg03
2c238     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2c23c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c240     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2c244     00 FA 05 F6 | 	mov	result1, #0
2c248     10 00 90 FD | 	jmp	#LR__4233
2c24c                 | LR__4232
2c24c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c250     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2c254     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c258     01 FA 65 F6 | 	neg	result1, #1
2c25c                 | LR__4233
2c25c                 | __system___rxtxioctl_0765_ret
2c25c     2D 00 64 FD | 	ret
2c260                 | 
2c260                 | __system____dummy_flush_0766
2c260     00 FA 05 F6 | 	mov	result1, #0
2c264                 | __system____dummy_flush_0766_ret
2c264     2D 00 64 FD | 	ret
2c268                 | 
2c268                 | __system___vfswrite
2c268     09 4A 05 F6 | 	mov	COUNT_, #9
2c26c     A8 00 A0 FD | 	call	#pushregs_
2c270     09 27 02 F6 | 	mov	local01, arg01
2c274     0A 29 02 F6 | 	mov	local02, arg02
2c278     0B 2B 02 F6 | 	mov	local03, arg03
2c27c     14 2D 02 F6 | 	mov	local04, local02
2c280     08 26 06 F1 | 	add	local01, #8
2c284     13 13 02 FB | 	rdlong	arg01, local01
2c288     08 26 86 F1 | 	sub	local01, #8
2c28c     02 12 CE F7 | 	test	arg01, #2 wz
2c290     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c294     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c298     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c29c     01 FA 65 A6 |  if_e	neg	result1, #1
2c2a0     80 01 90 AD |  if_e	jmp	#LR__4246
2c2a4     08 26 06 F1 | 	add	local01, #8
2c2a8     13 FB 01 FB | 	rdlong	result1, local01
2c2ac     08 26 86 F1 | 	sub	local01, #8
2c2b0     40 FA CD F7 | 	test	result1, #64 wz
2c2b4     68 00 90 AD |  if_e	jmp	#LR__4241
2c2b8     08 26 06 F1 | 	add	local01, #8
2c2bc     13 15 02 FB | 	rdlong	arg02, local01
2c2c0     08 26 86 F1 | 	sub	local01, #8
2c2c4     80 14 CE F7 | 	test	arg02, #128 wz
2c2c8     54 00 90 AD |  if_e	jmp	#LR__4240
2c2cc     30 26 06 F1 | 	add	local01, #48
2c2d0     13 2F 02 FB | 	rdlong	local05, local01
2c2d4     17 31 02 F6 | 	mov	local06, local05
2c2d8     30 26 86 F1 | 	sub	local01, #48
2c2dc     13 30 46 F7 | 	zerox	local06, #19
2c2e0     14 2E 46 F0 | 	shr	local05, #20
2c2e4     02 2E 66 F0 | 	shl	local05, #2
2c2e8     ED 2E 02 F1 | 	add	local05, __methods__
2c2ec     17 2F 02 FB | 	rdlong	local05, local05
2c2f0     13 13 02 F6 | 	mov	arg01, local01
2c2f4     00 14 06 F6 | 	mov	arg02, #0
2c2f8     02 16 06 F6 | 	mov	arg03, #2
2c2fc     F2 32 02 F6 | 	mov	local07, objptr
2c300     18 E5 01 F6 | 	mov	objptr, local06
2c304     2D 2E 62 FD | 	call	local05
2c308     19 E5 01 F6 | 	mov	objptr, local07
2c30c     08 26 06 F1 | 	add	local01, #8
2c310     13 33 02 FB | 	rdlong	local07, local01
2c314     80 32 26 F5 | 	andn	local07, #128
2c318     13 33 62 FC | 	wrlong	local07, local01
2c31c     08 26 86 F1 | 	sub	local01, #8
2c320                 | LR__4240
2c320                 | LR__4241
2c320     18 26 06 F1 | 	add	local01, #24
2c324     13 33 0A FB | 	rdlong	local07, local01 wz
2c328     18 26 86 F1 | 	sub	local01, #24
2c32c     80 00 90 AD |  if_e	jmp	#LR__4243
2c330     18 26 06 F1 | 	add	local01, #24
2c334     13 2F 02 FB | 	rdlong	local05, local01
2c338     17 31 02 F6 | 	mov	local06, local05
2c33c     18 26 86 F1 | 	sub	local01, #24
2c340     13 30 46 F7 | 	zerox	local06, #19
2c344     14 2E 46 F0 | 	shr	local05, #20
2c348     02 2E 66 F0 | 	shl	local05, #2
2c34c     ED 2E 02 F1 | 	add	local05, __methods__
2c350     17 2F 02 FB | 	rdlong	local05, local05
2c354     14 15 02 F6 | 	mov	arg02, local02
2c358     15 17 02 F6 | 	mov	arg03, local03
2c35c     13 13 02 F6 | 	mov	arg01, local01
2c360     F2 32 02 F6 | 	mov	local07, objptr
2c364     18 E5 01 F6 | 	mov	objptr, local06
2c368     2D 2E 62 FD | 	call	local05
2c36c     19 E5 01 F6 | 	mov	objptr, local07
2c370     FD 34 02 F6 | 	mov	local08, result1
2c374     00 34 56 F2 | 	cmps	local08, #0 wc
2c378     2C 00 90 3D |  if_ae	jmp	#LR__4242
2c37c     08 26 06 F1 | 	add	local01, #8
2c380     13 33 02 FB | 	rdlong	local07, local01
2c384     20 32 46 F5 | 	or	local07, #32
2c388     13 33 62 FC | 	wrlong	local07, local01
2c38c     00 34 4E F2 | 	cmps	local08, #0 wz
2c390     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c394     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2c398     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c39c     01 FA 65 56 |  if_ne	neg	result1, #1
2c3a0     00 FA 05 A6 |  if_e	mov	result1, #0
2c3a4     7C 00 90 FD | 	jmp	#LR__4246
2c3a8                 | LR__4242
2c3a8     1A FB 01 F6 | 	mov	result1, local08
2c3ac     74 00 90 FD | 	jmp	#LR__4246
2c3b0                 | LR__4243
2c3b0     1C 26 06 F1 | 	add	local01, #28
2c3b4     13 37 0A FB | 	rdlong	local09, local01 wz
2c3b8     1C 26 86 F1 | 	sub	local01, #28
2c3bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c3c0     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c3c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c3c8     01 FA 65 A6 |  if_e	neg	result1, #1
2c3cc     54 00 90 AD |  if_e	jmp	#LR__4246
2c3d0     00 34 06 F6 | 	mov	local08, #0
2c3d4                 | LR__4244
2c3d4     01 2A 16 F2 | 	cmp	local03, #1 wc
2c3d8     44 00 90 CD |  if_b	jmp	#LR__4245
2c3dc     1B 31 02 F6 | 	mov	local06, local09
2c3e0     1B 2F 02 F6 | 	mov	local05, local09
2c3e4     13 30 46 F7 | 	zerox	local06, #19
2c3e8     14 2E 46 F0 | 	shr	local05, #20
2c3ec     02 2E 66 F0 | 	shl	local05, #2
2c3f0     ED 2E 02 F1 | 	add	local05, __methods__
2c3f4     17 2F 02 FB | 	rdlong	local05, local05
2c3f8     16 13 C2 FA | 	rdbyte	arg01, local04
2c3fc     13 15 02 F6 | 	mov	arg02, local01
2c400     F2 32 02 F6 | 	mov	local07, objptr
2c404     18 E5 01 F6 | 	mov	objptr, local06
2c408     01 2C 06 F1 | 	add	local04, #1
2c40c     2D 2E 62 FD | 	call	local05
2c410     19 E5 01 F6 | 	mov	objptr, local07
2c414     FD 34 02 F1 | 	add	local08, result1
2c418     01 2A 86 F1 | 	sub	local03, #1
2c41c     B4 FF 9F FD | 	jmp	#LR__4244
2c420                 | LR__4245
2c420     1A FB 01 F6 | 	mov	result1, local08
2c424                 | LR__4246
2c424     A7 F0 03 F6 | 	mov	ptra, fp
2c428     B2 00 A0 FD | 	call	#popregs_
2c42c                 | __system___vfswrite_ret
2c42c     2D 00 64 FD | 	ret
2c430                 | 
2c430                 | __system___vfsread
2c430     03 4A 05 F6 | 	mov	COUNT_, #3
2c434     A8 00 A0 FD | 	call	#pushregs_
2c438     28 F0 07 F1 | 	add	ptra, #40
2c43c     04 4E 05 F1 | 	add	fp, #4
2c440     A7 12 62 FC | 	wrlong	arg01, fp
2c444     04 4E 05 F1 | 	add	fp, #4
2c448     A7 14 62 FC | 	wrlong	arg02, fp
2c44c     04 4E 05 F1 | 	add	fp, #4
2c450     A7 16 62 FC | 	wrlong	arg03, fp
2c454     04 4E 85 F1 | 	sub	fp, #4
2c458     A7 FA 01 FB | 	rdlong	result1, fp
2c45c     14 4E 05 F1 | 	add	fp, #20
2c460     A7 FA 61 FC | 	wrlong	result1, fp
2c464     04 4E 05 F1 | 	add	fp, #4
2c468     A7 00 68 FC | 	wrlong	#0, fp
2c46c     1C 4E 85 F1 | 	sub	fp, #28
2c470     A7 12 02 FB | 	rdlong	arg01, fp
2c474     04 4E 85 F1 | 	sub	fp, #4
2c478     08 12 06 F1 | 	add	arg01, #8
2c47c     09 FB 01 FB | 	rdlong	result1, arg01
2c480     01 FA CD F7 | 	test	result1, #1 wz
2c484     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c488     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c48c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c490     01 FA 65 A6 |  if_e	neg	result1, #1
2c494     74 02 90 AD |  if_e	jmp	#LR__4256
2c498     04 4E 05 F1 | 	add	fp, #4
2c49c     A7 12 02 FB | 	rdlong	arg01, fp
2c4a0     04 4E 85 F1 | 	sub	fp, #4
2c4a4     14 12 06 F1 | 	add	arg01, #20
2c4a8     09 FB 09 FB | 	rdlong	result1, arg01 wz
2c4ac     B8 00 90 AD |  if_e	jmp	#LR__4251
2c4b0     04 4E 05 F1 | 	add	fp, #4
2c4b4     A7 12 02 FB | 	rdlong	arg01, fp
2c4b8     09 17 02 F6 | 	mov	arg03, arg01
2c4bc     14 16 06 F1 | 	add	arg03, #20
2c4c0     0B 27 02 FB | 	rdlong	local01, arg03
2c4c4     13 29 02 F6 | 	mov	local02, local01
2c4c8     13 26 46 F7 | 	zerox	local01, #19
2c4cc     14 28 46 F0 | 	shr	local02, #20
2c4d0     02 28 66 F0 | 	shl	local02, #2
2c4d4     ED 28 02 F1 | 	add	local02, __methods__
2c4d8     14 29 02 FB | 	rdlong	local02, local02
2c4dc     04 4E 05 F1 | 	add	fp, #4
2c4e0     A7 14 02 FB | 	rdlong	arg02, fp
2c4e4     04 4E 05 F1 | 	add	fp, #4
2c4e8     A7 16 02 FB | 	rdlong	arg03, fp
2c4ec     0C 4E 85 F1 | 	sub	fp, #12
2c4f0     F2 2A 02 F6 | 	mov	local03, objptr
2c4f4     13 E5 01 F6 | 	mov	objptr, local01
2c4f8     2D 28 62 FD | 	call	local02
2c4fc     15 E5 01 F6 | 	mov	objptr, local03
2c500     10 4E 05 F1 | 	add	fp, #16
2c504     A7 FA 61 FC | 	wrlong	result1, fp
2c508     10 4E 85 F1 | 	sub	fp, #16
2c50c     00 FA 55 F2 | 	cmps	result1, #0 wc
2c510     44 00 90 3D |  if_ae	jmp	#LR__4250
2c514     04 4E 05 F1 | 	add	fp, #4
2c518     A7 2A 02 FB | 	rdlong	local03, fp
2c51c     15 27 02 F6 | 	mov	local01, local03
2c520     08 2A 06 F1 | 	add	local03, #8
2c524     15 29 02 FB | 	rdlong	local02, local03
2c528     20 28 46 F5 | 	or	local02, #32
2c52c     08 26 06 F1 | 	add	local01, #8
2c530     13 29 62 FC | 	wrlong	local02, local01
2c534     0C 4E 05 F1 | 	add	fp, #12
2c538     A7 12 0A FB | 	rdlong	arg01, fp wz
2c53c     10 4E 85 F1 | 	sub	fp, #16
2c540     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2c544     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2c548     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2c54c     01 FA 65 56 |  if_ne	neg	result1, #1
2c550     00 FA 05 A6 |  if_e	mov	result1, #0
2c554     B4 01 90 FD | 	jmp	#LR__4256
2c558                 | LR__4250
2c558     10 4E 05 F1 | 	add	fp, #16
2c55c     A7 FA 01 FB | 	rdlong	result1, fp
2c560     10 4E 85 F1 | 	sub	fp, #16
2c564     A4 01 90 FD | 	jmp	#LR__4256
2c568                 | LR__4251
2c568     04 4E 05 F1 | 	add	fp, #4
2c56c     A7 12 02 FB | 	rdlong	arg01, fp
2c570     20 12 06 F1 | 	add	arg01, #32
2c574     09 13 0A FB | 	rdlong	arg01, arg01 wz
2c578     14 4E 05 F1 | 	add	fp, #20
2c57c     A7 12 62 FC | 	wrlong	arg01, fp
2c580     18 4E 85 F1 | 	sub	fp, #24
2c584     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2c588     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2c58c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2c590     01 FA 65 A6 |  if_e	neg	result1, #1
2c594     74 01 90 AD |  if_e	jmp	#LR__4256
2c598     04 4E 05 F1 | 	add	fp, #4
2c59c     A7 2A 02 FB | 	rdlong	local03, fp
2c5a0     04 4E 85 F1 | 	sub	fp, #4
2c5a4     28 2A 06 F1 | 	add	local03, #40
2c5a8     15 29 0A FB | 	rdlong	local02, local03 wz
2c5ac     7C 00 90 AD |  if_e	jmp	#LR__4253
2c5b0     04 4E 05 F1 | 	add	fp, #4
2c5b4     A7 12 02 FB | 	rdlong	arg01, fp
2c5b8     09 2B 02 F6 | 	mov	local03, arg01
2c5bc     28 2A 06 F1 | 	add	local03, #40
2c5c0     15 27 02 FB | 	rdlong	local01, local03
2c5c4     13 29 02 F6 | 	mov	local02, local01
2c5c8     13 26 46 F7 | 	zerox	local01, #19
2c5cc     14 28 46 F0 | 	shr	local02, #20
2c5d0     02 28 66 F0 | 	shl	local02, #2
2c5d4     ED 28 02 F1 | 	add	local02, __methods__
2c5d8     14 29 02 FB | 	rdlong	local02, local02
2c5dc     20 4E 05 F1 | 	add	fp, #32
2c5e0     A7 16 02 F6 | 	mov	arg03, fp
2c5e4     24 4E 85 F1 | 	sub	fp, #36
2c5e8     00 15 06 F6 | 	mov	arg02, #256
2c5ec     F2 2A 02 F6 | 	mov	local03, objptr
2c5f0     13 E5 01 F6 | 	mov	objptr, local01
2c5f4     2D 28 62 FD | 	call	local02
2c5f8     15 E5 01 F6 | 	mov	objptr, local03
2c5fc     10 4E 05 F1 | 	add	fp, #16
2c600     A7 FA 61 FC | 	wrlong	result1, fp
2c604     00 FA 4D F2 | 	cmps	result1, #0 wz
2c608     10 4E 85 F1 | 	sub	fp, #16
2c60c     1C 00 90 5D |  if_ne	jmp	#LR__4252
2c610     24 4E 05 F1 | 	add	fp, #36
2c614     A7 28 02 FB | 	rdlong	local02, fp
2c618     24 4E 85 F1 | 	sub	fp, #36
2c61c     02 28 CE F7 | 	test	local02, #2 wz
2c620     20 4E 05 51 |  if_ne	add	fp, #32
2c624     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c628     20 4E 85 51 |  if_ne	sub	fp, #32
2c62c                 | LR__4252
2c62c                 | LR__4253
2c62c     10 4E 05 F1 | 	add	fp, #16
2c630     A7 00 68 FC | 	wrlong	#0, fp
2c634     10 4E 85 F1 | 	sub	fp, #16
2c638                 | LR__4254
2c638     0C 4E 05 F1 | 	add	fp, #12
2c63c     A7 2A 02 FB | 	rdlong	local03, fp
2c640     0C 4E 85 F1 | 	sub	fp, #12
2c644     01 2A 16 F2 | 	cmp	local03, #1 wc
2c648     B4 00 90 CD |  if_b	jmp	#LR__4255
2c64c     18 4E 05 F1 | 	add	fp, #24
2c650     A7 28 02 FB | 	rdlong	local02, fp
2c654     14 2B 02 F6 | 	mov	local03, local02
2c658     13 2A 46 F7 | 	zerox	local03, #19
2c65c     14 28 46 F0 | 	shr	local02, #20
2c660     02 28 66 F0 | 	shl	local02, #2
2c664     ED 28 02 F1 | 	add	local02, __methods__
2c668     14 29 02 FB | 	rdlong	local02, local02
2c66c     14 4E 85 F1 | 	sub	fp, #20
2c670     A7 12 02 FB | 	rdlong	arg01, fp
2c674     04 4E 85 F1 | 	sub	fp, #4
2c678     F2 26 02 F6 | 	mov	local01, objptr
2c67c     15 E5 01 F6 | 	mov	objptr, local03
2c680     2D 28 62 FD | 	call	local02
2c684     13 E5 01 F6 | 	mov	objptr, local01
2c688     14 4E 05 F1 | 	add	fp, #20
2c68c     A7 FA 61 FC | 	wrlong	result1, fp
2c690     14 4E 85 F1 | 	sub	fp, #20
2c694     00 FA 55 F2 | 	cmps	result1, #0 wc
2c698     64 00 90 CD |  if_b	jmp	#LR__4255
2c69c     1C 4E 05 F1 | 	add	fp, #28
2c6a0     A7 2A 02 FB | 	rdlong	local03, fp
2c6a4     15 29 02 F6 | 	mov	local02, local03
2c6a8     01 28 06 F1 | 	add	local02, #1
2c6ac     A7 28 62 FC | 	wrlong	local02, fp
2c6b0     08 4E 85 F1 | 	sub	fp, #8
2c6b4     A7 28 02 FB | 	rdlong	local02, fp
2c6b8     15 29 42 FC | 	wrbyte	local02, local03
2c6bc     04 4E 85 F1 | 	sub	fp, #4
2c6c0     A7 2A 02 FB | 	rdlong	local03, fp
2c6c4     01 2A 06 F1 | 	add	local03, #1
2c6c8     A7 2A 62 FC | 	wrlong	local03, fp
2c6cc     04 4E 85 F1 | 	sub	fp, #4
2c6d0     A7 2A 02 FB | 	rdlong	local03, fp
2c6d4     01 2A 86 F1 | 	sub	local03, #1
2c6d8     A7 2A 62 FC | 	wrlong	local03, fp
2c6dc     14 4E 05 F1 | 	add	fp, #20
2c6e0     A7 2A 0A FB | 	rdlong	local03, fp wz
2c6e4     20 4E 85 F1 | 	sub	fp, #32
2c6e8     4C FF 9F AD |  if_e	jmp	#LR__4254
2c6ec     14 4E 05 F1 | 	add	fp, #20
2c6f0     A7 28 02 FB | 	rdlong	local02, fp
2c6f4     14 4E 85 F1 | 	sub	fp, #20
2c6f8     0A 28 0E F2 | 	cmp	local02, #10 wz
2c6fc     38 FF 9F 5D |  if_ne	jmp	#LR__4254
2c700                 | LR__4255
2c700     10 4E 05 F1 | 	add	fp, #16
2c704     A7 FA 01 FB | 	rdlong	result1, fp
2c708     10 4E 85 F1 | 	sub	fp, #16
2c70c                 | LR__4256
2c70c     A7 F0 03 F6 | 	mov	ptra, fp
2c710     B2 00 A0 FD | 	call	#popregs_
2c714                 | __system___vfsread_ret
2c714     2D 00 64 FD | 	ret
2c718                 | 
2c718                 | __system____default_filbuf
2c718     04 4A 05 F6 | 	mov	COUNT_, #4
2c71c     A8 00 A0 FD | 	call	#pushregs_
2c720     09 27 02 F6 | 	mov	local01, arg01
2c724     13 29 02 FB | 	rdlong	local02, local01
2c728     0C 28 06 F1 | 	add	local02, #12
2c72c     14 FB 09 FB | 	rdlong	result1, local02 wz
2c730     0C 28 86 F1 | 	sub	local02, #12
2c734     20 00 90 5D |  if_ne	jmp	#LR__4260
2c738     14 28 06 F1 | 	add	local02, #20
2c73c     14 FB 01 F6 | 	mov	result1, local02
2c740     04 28 86 F1 | 	sub	local02, #4
2c744     14 FB 61 FC | 	wrlong	result1, local02
2c748     04 28 86 F1 | 	sub	local02, #4
2c74c     02 00 80 FF 
2c750     14 01 68 FC | 	wrlong	##1024, local02
2c754     0C 28 86 F1 | 	sub	local02, #12
2c758                 | LR__4260
2c758     14 26 06 F1 | 	add	local01, #20
2c75c     13 2B 02 FB | 	rdlong	local03, local01
2c760     15 2D 02 F6 | 	mov	local04, local03
2c764     14 26 86 F1 | 	sub	local01, #20
2c768     13 2C 46 F7 | 	zerox	local04, #19
2c76c     14 2A 46 F0 | 	shr	local03, #20
2c770     02 2A 66 F0 | 	shl	local03, #2
2c774     ED 2A 02 F1 | 	add	local03, __methods__
2c778     15 2B 02 FB | 	rdlong	local03, local03
2c77c     10 28 06 F1 | 	add	local02, #16
2c780     14 15 02 FB | 	rdlong	arg02, local02
2c784     04 28 86 F1 | 	sub	local02, #4
2c788     14 17 02 FB | 	rdlong	arg03, local02
2c78c     0C 28 86 F1 | 	sub	local02, #12
2c790     13 13 02 F6 | 	mov	arg01, local01
2c794     F2 26 02 F6 | 	mov	local01, objptr
2c798     16 E5 01 F6 | 	mov	objptr, local04
2c79c     2D 2A 62 FD | 	call	local03
2c7a0     13 E5 01 F6 | 	mov	objptr, local01
2c7a4     FD 2C 02 F6 | 	mov	local04, result1
2c7a8     00 2C 56 F2 | 	cmps	local04, #0 wc
2c7ac     01 FA 65 C6 |  if_b	neg	result1, #1
2c7b0     28 00 90 CD |  if_b	jmp	#LR__4261
2c7b4     14 2D 62 FC | 	wrlong	local04, local02
2c7b8     10 28 06 F1 | 	add	local02, #16
2c7bc     14 2B 02 FB | 	rdlong	local03, local02
2c7c0     0C 28 86 F1 | 	sub	local02, #12
2c7c4     14 2B 62 FC | 	wrlong	local03, local02
2c7c8     04 28 06 F1 | 	add	local02, #4
2c7cc     14 2B 02 FB | 	rdlong	local03, local02
2c7d0     01 2A 46 F5 | 	or	local03, #1
2c7d4     14 2B 62 FC | 	wrlong	local03, local02
2c7d8     16 FB 01 F6 | 	mov	result1, local04
2c7dc                 | LR__4261
2c7dc     A7 F0 03 F6 | 	mov	ptra, fp
2c7e0     B2 00 A0 FD | 	call	#popregs_
2c7e4                 | __system____default_filbuf_ret
2c7e4     2D 00 64 FD | 	ret
2c7e8                 | 
2c7e8                 | __system__getlower_1155
2c7e8     41 12 56 F2 | 	cmps	arg01, #65 wc
2c7ec     10 00 90 CD |  if_b	jmp	#LR__4270
2c7f0     5B 12 56 F2 | 	cmps	arg01, #91 wc
2c7f4     09 FB 01 C6 |  if_b	mov	result1, arg01
2c7f8     20 FA 05 C1 |  if_b	add	result1, #32
2c7fc     04 00 90 CD |  if_b	jmp	#__system__getlower_1155_ret
2c800                 | LR__4270
2c800     09 FB 01 F6 | 	mov	result1, arg01
2c804                 | __system__getlower_1155_ret
2c804     2D 00 64 FD | 	ret
2c808                 | 
2c808                 | __system___pat_match
2c808     08 4A 05 F6 | 	mov	COUNT_, #8
2c80c     A8 00 A0 FD | 	call	#pushregs_
2c810     09 27 02 F6 | 	mov	local01, arg01
2c814                 | LR__4280
2c814     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2c818     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2c81c     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2c820     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2c824     2C 00 90 AD |  if_e	jmp	#LR__4281
2c828     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c82c     B8 FF BF FD | 	call	#__system__getlower_1155
2c830     FD 2A 02 F6 | 	mov	local03, result1
2c834     13 13 C2 FA | 	rdbyte	arg01, local01
2c838     AC FF BF FD | 	call	#__system__getlower_1155
2c83c     15 FB 09 F2 | 	cmp	result1, local03 wz
2c840     00 FA 05 56 |  if_ne	mov	result1, #0
2c844     FC 00 90 5D |  if_ne	jmp	#LR__4289
2c848     01 26 06 F1 | 	add	local01, #1
2c84c     01 14 06 F1 | 	add	arg02, #1
2c850     C0 FF 9F FD | 	jmp	#LR__4280
2c854                 | LR__4281
2c854     0A 2B C2 FA | 	rdbyte	local03, arg02
2c858     2A 2A 0E F2 | 	cmp	local03, #42 wz
2c85c     D4 00 90 5D |  if_ne	jmp	#LR__4288
2c860     01 14 06 F1 | 	add	arg02, #1
2c864     0A 29 C2 FA | 	rdbyte	local02, arg02
2c868     01 14 86 F1 | 	sub	arg02, #1
2c86c     2E 28 0E F2 | 	cmp	local02, #46 wz
2c870     28 00 90 5D |  if_ne	jmp	#LR__4282
2c874     02 14 06 F1 | 	add	arg02, #2
2c878     0A 29 C2 FA | 	rdbyte	local02, arg02
2c87c     02 14 86 F1 | 	sub	arg02, #2
2c880     2A 28 0E F2 | 	cmp	local02, #42 wz
2c884     03 14 06 A1 |  if_e	add	arg02, #3
2c888     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2c88c     03 14 86 A1 |  if_e	sub	arg02, #3
2c890     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2c894     01 FA 05 A6 |  if_e	mov	result1, #1
2c898     A8 00 90 AD |  if_e	jmp	#LR__4289
2c89c                 | LR__4282
2c89c     01 14 06 F1 | 	add	arg02, #1
2c8a0     00 30 06 F6 | 	mov	local06, #0
2c8a4     97 1E 48 FB | 	callpa	#(@LR__4285-@LR__4283)>>2,fcache_load_ptr_
2c8a8                 | LR__4283
2c8a8     18 33 02 F6 | 	mov	local07, local06
2c8ac     0A 33 02 F1 | 	add	local07, arg02
2c8b0     19 33 CA FA | 	rdbyte	local07, local07 wz
2c8b4     18 2F 02 56 |  if_ne	mov	local05, local06
2c8b8     01 2E 06 51 |  if_ne	add	local05, #1
2c8bc     17 31 02 56 |  if_ne	mov	local06, local05
2c8c0     E4 FF 9F 5D |  if_ne	jmp	#LR__4283
2c8c4     00 34 06 F6 | 	mov	local08, #0
2c8c8                 | LR__4284
2c8c8     1A 33 02 F6 | 	mov	local07, local08
2c8cc     13 33 02 F1 | 	add	local07, local01
2c8d0     19 33 CA FA | 	rdbyte	local07, local07 wz
2c8d4     1A 2F 02 56 |  if_ne	mov	local05, local08
2c8d8     01 2E 06 51 |  if_ne	add	local05, #1
2c8dc     17 35 02 56 |  if_ne	mov	local08, local05
2c8e0     E4 FF 9F 5D |  if_ne	jmp	#LR__4284
2c8e4                 | LR__4285
2c8e4     18 35 52 F2 | 	cmps	local08, local06 wc
2c8e8     00 FA 05 C6 |  if_b	mov	result1, #0
2c8ec     54 00 90 CD |  if_b	jmp	#LR__4289
2c8f0     1A 29 02 F6 | 	mov	local02, local08
2c8f4     18 29 82 F1 | 	sub	local02, local06
2c8f8     14 27 02 F1 | 	add	local01, local02
2c8fc                 | LR__4286
2c8fc     01 30 56 F2 | 	cmps	local06, #1 wc
2c900     30 00 90 CD |  if_b	jmp	#LR__4287
2c904     13 13 C2 FA | 	rdbyte	arg01, local01
2c908     DC FE BF FD | 	call	#__system__getlower_1155
2c90c     FD 34 02 F6 | 	mov	local08, result1
2c910     0A 13 C2 FA | 	rdbyte	arg01, arg02
2c914     D0 FE BF FD | 	call	#__system__getlower_1155
2c918     FD 34 0A F2 | 	cmp	local08, result1 wz
2c91c     00 FA 05 56 |  if_ne	mov	result1, #0
2c920     20 00 90 5D |  if_ne	jmp	#LR__4289
2c924     01 26 06 F1 | 	add	local01, #1
2c928     01 14 06 F1 | 	add	arg02, #1
2c92c     01 30 86 F1 | 	sub	local06, #1
2c930     C8 FF 9F FD | 	jmp	#LR__4286
2c934                 | LR__4287
2c934                 | LR__4288
2c934     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2c938     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2c93c     01 FA 05 A6 |  if_e	mov	result1, #1
2c940     00 FA 05 56 |  if_ne	mov	result1, #0
2c944                 | LR__4289
2c944     A7 F0 03 F6 | 	mov	ptra, fp
2c948     B2 00 A0 FD | 	call	#popregs_
2c94c                 | __system___pat_match_ret
2c94c     2D 00 64 FD | 	ret
2c950                 | 
2c950                 | _fatfs_cc_ff_uni2oem
2c950     00 00 06 F6 | 	mov	_var01, #0
2c954     80 12 16 F2 | 	cmp	arg01, #128 wc
2c958     09 01 02 C6 |  if_b	mov	_var01, arg01
2c95c     58 00 90 CD |  if_b	jmp	#LR__4294
2c960     80 00 00 FF 
2c964     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2c968     4C 00 90 3D |  if_ae	jmp	#LR__4293
2c96c     0A FB 31 F9 | 	getword	result1, arg02, #0
2c970     01 00 00 FF 
2c974     52 FB 0D F2 | 	cmp	result1, ##850 wz
2c978     3C 00 90 5D |  if_ne	jmp	#LR__4293
2c97c                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2c97c     00 00 06 F6 | 	mov	_var01, #0
2c980     97 14 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
2c984                 | LR__4290
2c984     00 FB 31 F9 | 	getword	result1, _var01, #0
2c988     80 FA 15 F2 | 	cmp	result1, #128 wc
2c98c     1C 00 90 3D |  if_ae	jmp	#LR__4292
2c990     00 FB 31 F9 | 	getword	result1, _var01, #0
2c994     01 FA 65 F0 | 	shl	result1, #1
2c998     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2c99c     FD FA E1 FA | 	rdword	result1, result1
2c9a0     FD 12 0A F2 | 	cmp	arg01, result1 wz
2c9a4     01 00 06 51 |  if_ne	add	_var01, #1
2c9a8     D8 FF 9F 5D |  if_ne	jmp	#LR__4290
2c9ac                 | LR__4291
2c9ac                 | LR__4292
2c9ac     00 01 32 F9 | 	getword	_var01, _var01, #0
2c9b0     80 00 06 F1 | 	add	_var01, #128
2c9b4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2c9b8                 | LR__4293
2c9b8                 | LR__4294
2c9b8                 | ' 			c = (c + 0x80) & 0xFF;
2c9b8                 | ' 		}
2c9b8                 | ' 	}
2c9b8                 | ' 
2c9b8                 | ' 	return c;
2c9b8     00 FB 01 F6 | 	mov	result1, _var01
2c9bc                 | _fatfs_cc_ff_uni2oem_ret
2c9bc     2D 00 64 FD | 	ret
2c9c0                 | 
2c9c0                 | _fatfs_cc_ff_oem2uni
2c9c0     00 00 06 F6 | 	mov	_var01, #0
2c9c4     09 FB 31 F9 | 	getword	result1, arg01, #0
2c9c8     80 FA 15 F2 | 	cmp	result1, #128 wc
2c9cc     09 01 02 C6 |  if_b	mov	_var01, arg01
2c9d0     2C 00 90 CD |  if_b	jmp	#LR__4301
2c9d4     0A 15 32 F9 | 	getword	arg02, arg02, #0
2c9d8     01 00 00 FF 
2c9dc     52 15 0E F2 | 	cmp	arg02, ##850 wz
2c9e0     1C 00 90 5D |  if_ne	jmp	#LR__4300
2c9e4     09 FB 31 F9 | 	getword	result1, arg01, #0
2c9e8     00 FB 15 F2 | 	cmp	result1, #256 wc
2c9ec     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2c9f0     80 12 86 C1 |  if_b	sub	arg01, #128
2c9f4     01 12 66 C0 |  if_b	shl	arg01, #1
2c9f8     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2c9fc     09 01 E2 CA |  if_b	rdword	_var01, arg01
2ca00                 | LR__4300
2ca00                 | LR__4301
2ca00                 | ' 		}
2ca00                 | ' 	}
2ca00                 | ' 
2ca00                 | ' 	return c;
2ca00     00 FB 01 F6 | 	mov	result1, _var01
2ca04                 | _fatfs_cc_ff_oem2uni_ret
2ca04     2D 00 64 FD | 	ret
2ca08                 | 
2ca08                 | _fatfs_cc_ff_wtoupper
2ca08     09 01 02 F6 | 	mov	_var01, arg01
2ca0c     80 00 00 FF 
2ca10     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2ca14     60 01 90 3D |  if_ae	jmp	#LR__4323
2ca18     00 03 02 F6 | 	mov	_var02, _var01
2ca1c     01 01 32 F9 | 	getword	_var01, _var02, #0
2ca20     08 00 00 FF 
2ca24     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2ca28     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2ca2c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2ca30     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2ca34     01 00 00 3F 
2ca38     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2ca3c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2ca40     01 00 00 3F 
2ca44     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2ca48     02 07 02 F6 | 	mov	_var04, _var03
2ca4c                 | ' 		uc = (WORD)uni;
2ca4c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2ca4c                 | ' 		for (;;) {
2ca4c                 | LR__4310
2ca4c     03 09 E2 FA | 	rdword	_var05, _var04
2ca50     04 05 02 F6 | 	mov	_var03, _var05
2ca54     0F 04 4E F7 | 	zerox	_var03, #15 wz
2ca58     02 06 06 F1 | 	add	_var04, #2
2ca5c     14 01 90 AD |  if_e	jmp	#LR__4322
2ca60     01 05 32 F9 | 	getword	_var03, _var02, #0
2ca64     04 01 32 F9 | 	getword	_var01, _var05, #0
2ca68     00 05 12 F2 | 	cmp	_var03, _var01 wc
2ca6c     04 01 90 CD |  if_b	jmp	#LR__4322
2ca70     03 0B E2 FA | 	rdword	_var06, _var04
2ca74     05 0D 32 F9 | 	getword	_var07, _var06, #0
2ca78     08 0C 46 F0 | 	shr	_var07, #8
2ca7c     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ca80     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2ca84     01 05 32 F9 | 	getword	_var03, _var02, #0
2ca88     04 0F 32 F9 | 	getword	_var08, _var05, #0
2ca8c     05 01 32 F9 | 	getword	_var01, _var06, #0
2ca90     00 0F 02 F1 | 	add	_var08, _var01
2ca94     07 05 52 F2 | 	cmps	_var03, _var08 wc
2ca98     02 06 06 F1 | 	add	_var04, #2
2ca9c     C4 00 90 3D |  if_ae	jmp	#LR__4321
2caa0                 | ' 				switch (cmd) {
2caa0     06 11 32 F9 | 	getword	_var09, _var07, #0
2caa4     09 10 26 F3 | 	fle	_var09, #9
2caa8     30 10 62 FD | 	jmprel	_var09
2caac                 | LR__4311
2caac     24 00 90 FD | 	jmp	#LR__4312
2cab0     3C 00 90 FD | 	jmp	#LR__4313
2cab4     54 00 90 FD | 	jmp	#LR__4314
2cab8     5C 00 90 FD | 	jmp	#LR__4315
2cabc     64 00 90 FD | 	jmp	#LR__4316
2cac0     6C 00 90 FD | 	jmp	#LR__4317
2cac4     74 00 90 FD | 	jmp	#LR__4318
2cac8     7C 00 90 FD | 	jmp	#LR__4319
2cacc     84 00 90 FD | 	jmp	#LR__4320
2cad0     A0 00 90 FD | 	jmp	#LR__4322
2cad4                 | LR__4312
2cad4     01 03 32 F9 | 	getword	_var02, _var02, #0
2cad8     04 09 32 F9 | 	getword	_var05, _var05, #0
2cadc     04 03 82 F1 | 	sub	_var02, _var05
2cae0     01 02 66 F0 | 	shl	_var02, #1
2cae4     03 03 02 F1 | 	add	_var02, _var04
2cae8     01 03 E2 FA | 	rdword	_var02, _var02
2caec     84 00 90 FD | 	jmp	#LR__4322
2caf0                 | LR__4313
2caf0     01 05 32 F9 | 	getword	_var03, _var02, #0
2caf4     01 03 32 F9 | 	getword	_var02, _var02, #0
2caf8     04 09 32 F9 | 	getword	_var05, _var05, #0
2cafc     04 03 82 F1 | 	sub	_var02, _var05
2cb00     01 02 06 F5 | 	and	_var02, #1
2cb04     02 03 C2 F2 | 	subr	_var02, _var03
2cb08     68 00 90 FD | 	jmp	#LR__4322
2cb0c                 | LR__4314
2cb0c     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb10     10 02 86 F1 | 	sub	_var02, #16
2cb14     5C 00 90 FD | 	jmp	#LR__4322
2cb18                 | LR__4315
2cb18     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb1c     20 02 86 F1 | 	sub	_var02, #32
2cb20     50 00 90 FD | 	jmp	#LR__4322
2cb24                 | LR__4316
2cb24     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb28     30 02 86 F1 | 	sub	_var02, #48
2cb2c     44 00 90 FD | 	jmp	#LR__4322
2cb30                 | LR__4317
2cb30     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb34     1A 02 86 F1 | 	sub	_var02, #26
2cb38     38 00 90 FD | 	jmp	#LR__4322
2cb3c                 | LR__4318
2cb3c     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb40     08 02 06 F1 | 	add	_var02, #8
2cb44     2C 00 90 FD | 	jmp	#LR__4322
2cb48                 | LR__4319
2cb48     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb4c     50 02 86 F1 | 	sub	_var02, #80
2cb50     20 00 90 FD | 	jmp	#LR__4322
2cb54                 | LR__4320
2cb54     01 03 32 F9 | 	getword	_var02, _var02, #0
2cb58     0E 00 00 FF 
2cb5c     60 02 86 F1 | 	sub	_var02, ##7264
2cb60                 | ' 				}
2cb60                 | ' 				break;
2cb60     10 00 90 FD | 	jmp	#LR__4322
2cb64                 | LR__4321
2cb64     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2cb68     02 0A 06 AA |  if_e	mul	_var06, #2
2cb6c     05 07 02 A1 |  if_e	add	_var04, _var06
2cb70     D8 FE 9F FD | 	jmp	#LR__4310
2cb74                 | LR__4322
2cb74     01 01 32 F9 | 	getword	_var01, _var02, #0
2cb78                 | LR__4323
2cb78                 | ' 		}
2cb78                 | ' 		uni = uc;
2cb78                 | ' 	}
2cb78                 | ' 
2cb78                 | ' 	return uni;
2cb78     00 FB 01 F6 | 	mov	result1, _var01
2cb7c                 | _fatfs_cc_ff_wtoupper_ret
2cb7c     2D 00 64 FD | 	ret
2cb80                 | 
2cb80                 | _fatfs_cc_strncpy
2cb80     09 01 02 F6 | 	mov	_var01, arg01
2cb84     97 12 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2cb88                 | ' 
2cb88                 | ' 	dscan = dst;
2cb88                 | ' 	sscan = src;
2cb88                 | ' 	count = n;
2cb88                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2cb88                 | LR__4330
2cb88     01 16 86 F1 | 	sub	arg03, #1
2cb8c     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb90     18 00 90 CD |  if_b	jmp	#LR__4332
2cb94     0A FB C1 FA | 	rdbyte	result1, arg02
2cb98     00 FB 41 FC | 	wrbyte	result1, _var01
2cb9c     01 14 06 F1 | 	add	arg02, #1
2cba0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2cba4                 | ' 		continue;
2cba4     01 00 06 F1 | 	add	_var01, #1
2cba8     DC FF 9F 5D |  if_ne	jmp	#LR__4330
2cbac                 | LR__4331
2cbac                 | LR__4332
2cbac     97 0C 48 FB | 	callpa	#(@LR__4334-@LR__4333)>>2,fcache_load_ptr_
2cbb0                 | ' 	while (--count >= 0)
2cbb0                 | LR__4333
2cbb0     01 16 86 F1 | 	sub	arg03, #1
2cbb4     00 16 56 F2 | 	cmps	arg03, #0 wc
2cbb8     00 03 02 36 |  if_ae	mov	_var02, _var01
2cbbc     01 00 06 31 |  if_ae	add	_var01, #1
2cbc0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2cbc4     E8 FF 9F 3D |  if_ae	jmp	#LR__4333
2cbc8                 | LR__4334
2cbc8                 | ' 		*dscan++ = '\0';
2cbc8                 | ' 	return(dst);
2cbc8     09 FB 01 F6 | 	mov	result1, arg01
2cbcc                 | _fatfs_cc_strncpy_ret
2cbcc     2D 00 64 FD | 	ret
2cbd0                 | 
2cbd0                 | _fatfs_cc_memcmp
2cbd0                 | ' 	for (n = size; n > 0; n--)
2cbd0     00 16 0E F2 | 	cmp	arg03, #0 wz
2cbd4     28 00 90 AD |  if_e	jmp	#LR__4341
2cbd8                 | LR__4340
2cbd8     09 01 C2 FA | 	rdbyte	_var01, arg01
2cbdc     0A 03 C2 FA | 	rdbyte	_var02, arg02
2cbe0     01 01 0A F2 | 	cmp	_var01, _var02 wz
2cbe4     01 12 06 A1 |  if_e	add	arg01, #1
2cbe8     01 14 06 A1 |  if_e	add	arg02, #1
2cbec                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2cbec     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2cbf0     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2cbf4     01 FB 81 51 |  if_ne	sub	result1, _var02
2cbf8     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2cbfc     F6 17 6E FB | 	djnz	arg03, #LR__4340
2cc00                 | LR__4341
2cc00                 | ' 
2cc00                 | ' 	return(0);
2cc00     00 FA 05 F6 | 	mov	result1, #0
2cc04                 | _fatfs_cc_memcmp_ret
2cc04     2D 00 64 FD | 	ret
2cc08                 | 
2cc08                 | _fatfs_cc_strncmp
2cc08     09 01 0A F6 | 	mov	_var01, arg01 wz
2cc0c     14 00 90 5D |  if_ne	jmp	#LR__4350
2cc10                 | ' 		return scan2 ? -1 : 0;
2cc10     00 14 0E F2 | 	cmp	arg02, #0 wz
2cc14     01 02 66 56 |  if_ne	neg	_var02, #1
2cc18     00 02 06 A6 |  if_e	mov	_var02, #0
2cc1c     01 FB 01 F6 | 	mov	result1, _var02
2cc20     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2cc24                 | LR__4350
2cc24     00 14 0E F2 | 	cmp	arg02, #0 wz
2cc28     01 FA 05 A6 |  if_e	mov	result1, #1
2cc2c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc30     0B 05 02 F6 | 	mov	_var03, arg03
2cc34     97 16 48 FB | 	callpa	#(@LR__4352-@LR__4351)>>2,fcache_load_ptr_
2cc38                 | ' 	count = n;
2cc38                 | ' 	do {
2cc38                 | LR__4351
2cc38     00 07 C2 FA | 	rdbyte	_var04, _var01
2cc3c     0A 09 02 F6 | 	mov	_var05, arg02
2cc40     04 0B C2 FA | 	rdbyte	_var06, _var05
2cc44     01 04 86 F1 | 	sub	_var03, #1
2cc48     00 04 56 F2 | 	cmps	_var03, #0 wc
2cc4c     01 00 06 F1 | 	add	_var01, #1
2cc50     01 14 06 F1 | 	add	arg02, #1
2cc54     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2cc58     08 00 90 2D |  if_nc_and_z	jmp	#LR__4353
2cc5c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2cc60     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4351
2cc64                 | LR__4352
2cc64                 | LR__4353
2cc64     00 04 56 F2 | 	cmps	_var03, #0 wc
2cc68                 | ' 		return(0);
2cc68     00 FA 05 C6 |  if_b	mov	result1, #0
2cc6c     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2cc70     05 07 0A F2 | 	cmp	_var04, _var06 wz
2cc74                 | ' 		return(0);
2cc74     00 FA 05 A6 |  if_e	mov	result1, #0
2cc78     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc7c     00 06 0E F2 | 	cmp	_var04, #0 wz
2cc80                 | ' 		return(-1);
2cc80     01 FA 65 A6 |  if_e	neg	result1, #1
2cc84     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2cc88     00 0A 0E F2 | 	cmp	_var06, #0 wz
2cc8c                 | ' 		return(1);
2cc8c     01 FA 05 A6 |  if_e	mov	result1, #1
2cc90                 | ' 		return(c1 - c2);
2cc90     03 FB 01 56 |  if_ne	mov	result1, _var04
2cc94     05 FB 81 51 |  if_ne	sub	result1, _var06
2cc98                 | _fatfs_cc_strncmp_ret
2cc98     2D 00 64 FD | 	ret
2cc9c                 | 
2cc9c                 | _fatfs_cc_strchr
2cc9c                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2cc9c                 | ' 	while ((c = *s++) != (char) charwanted)
2cc9c                 | LR__4360
2cc9c     09 01 02 F6 | 	mov	_var01, arg01
2cca0     00 03 C2 FA | 	rdbyte	_var02, _var01
2cca4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2cca8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2ccac     03 05 0A F2 | 	cmp	_var03, _var04 wz
2ccb0     01 12 06 F1 | 	add	arg01, #1
2ccb4     14 00 90 AD |  if_e	jmp	#LR__4361
2ccb8     01 05 02 F6 | 	mov	_var03, _var02
2ccbc     07 04 4E F7 | 	zerox	_var03, #7 wz
2ccc0     00 FA 05 A6 |  if_e	mov	result1, #0
2ccc4     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2ccc8     D0 FF 9F FD | 	jmp	#LR__4360
2cccc                 | LR__4361
2cccc                 | ' 	return((char *)--s);
2cccc     01 12 86 F1 | 	sub	arg01, #1
2ccd0     09 FB 01 F6 | 	mov	result1, arg01
2ccd4                 | _fatfs_cc_strchr_ret
2ccd4     2D 00 64 FD | 	ret
2ccd8                 | 
2ccd8                 | _fatfs_cc_disk_initialize
2ccd8     04 4A 05 F6 | 	mov	COUNT_, #4
2ccdc     A8 00 A0 FD | 	call	#pushregs_
2cce0     40 F0 07 F1 | 	add	ptra, #64
2cce4     04 4E 05 F1 | 	add	fp, #4
2cce8     A7 12 42 FC | 	wrbyte	arg01, fp
2ccec     01 00 00 FF 
2ccf0     14 E4 05 F1 | 	add	objptr, ##532
2ccf4     F2 18 02 FB | 	rdlong	arg04, objptr
2ccf8     2C 4E 05 F1 | 	add	fp, #44
2ccfc     A7 18 62 FC | 	wrlong	arg04, fp
2cd00     04 E4 85 F1 | 	sub	objptr, #4
2cd04     F2 18 02 FB | 	rdlong	arg04, objptr
2cd08     04 4E 05 F1 | 	add	fp, #4
2cd0c     A7 18 62 FC | 	wrlong	arg04, fp
2cd10     08 E4 05 F1 | 	add	objptr, #8
2cd14     F2 18 02 FB | 	rdlong	arg04, objptr
2cd18     04 4E 05 F1 | 	add	fp, #4
2cd1c     A7 18 62 FC | 	wrlong	arg04, fp
2cd20     04 E4 05 F1 | 	add	objptr, #4
2cd24     F2 18 02 FB | 	rdlong	arg04, objptr
2cd28     04 4E 05 F1 | 	add	fp, #4
2cd2c     A7 18 62 FC | 	wrlong	arg04, fp
2cd30     04 E4 05 F1 | 	add	objptr, #4
2cd34     F2 02 48 FC | 	wrbyte	#1, objptr
2cd38     01 00 00 FF 
2cd3c     20 E4 85 F1 | 	sub	objptr, ##544
2cd40     38 4E 85 F1 | 	sub	fp, #56
2cd44     A7 18 CA FA | 	rdbyte	arg04, fp wz
2cd48     04 4E 85 F1 | 	sub	fp, #4
2cd4c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2cd4c                 | '             return RES_NOTRDY;
2cd4c     03 FA 05 56 |  if_ne	mov	result1, #3
2cd50     D8 05 90 5D |  if_ne	jmp	#LR__4388
2cd54     13 00 00 FF 
2cd58     10 13 06 F6 | 	mov	arg01, ##10000
2cd5c     40 95 BF FD | 	call	#__system___waitus
2cd60     30 4E 05 F1 | 	add	fp, #48
2cd64     A7 12 02 FB | 	rdlong	arg01, fp
2cd68     09 01 08 FC | 	wrpin	#0, arg01
2cd6c     04 4E 05 F1 | 	add	fp, #4
2cd70     A7 12 02 FB | 	rdlong	arg01, fp
2cd74     09 01 08 FC | 	wrpin	#0, arg01
2cd78     04 4E 05 F1 | 	add	fp, #4
2cd7c     A7 12 02 FB | 	rdlong	arg01, fp
2cd80     09 01 08 FC | 	wrpin	#0, arg01
2cd84     04 4E 05 F1 | 	add	fp, #4
2cd88     A7 12 02 FB | 	rdlong	arg01, fp
2cd8c     09 00 80 FF 
2cd90     09 01 08 FC | 	wrpin	##4608, arg01
2cd94     0C 4E 85 F1 | 	sub	fp, #12
2cd98     A7 12 02 FB | 	rdlong	arg01, fp
2cd9c     59 12 62 FD | 	drvh	arg01
2cda0     04 4E 05 F1 | 	add	fp, #4
2cda4     A7 12 02 FB | 	rdlong	arg01, fp
2cda8     59 12 62 FD | 	drvh	arg01
2cdac     04 4E 05 F1 | 	add	fp, #4
2cdb0     A7 12 02 FB | 	rdlong	arg01, fp
2cdb4     59 12 62 FD | 	drvh	arg01
2cdb8     04 4E 05 F1 | 	add	fp, #4
2cdbc     A7 12 02 FB | 	rdlong	arg01, fp
2cdc0     59 12 62 FD | 	drvh	arg01
2cdc4     20 4E 85 F1 | 	sub	fp, #32
2cdc8     00 04 80 FF 
2cdcc     A7 20 68 FC | 	wrlong	##524304, fp
2cdd0     04 4E 05 F1 | 	add	fp, #4
2cdd4     20 03 80 FF 
2cdd8     A7 90 68 FC | 	wrlong	##409672, fp
2cddc     14 4E 05 F1 | 	add	fp, #20
2cde0     A7 26 02 FB | 	rdlong	local01, fp
2cde4     18 4E 85 F1 | 	sub	fp, #24
2cde8     A7 16 02 FB | 	rdlong	arg03, fp
2cdec     40 26 62 FD | 	dirl	local01
2cdf0     A0 03 80 FF 
2cdf4     13 91 08 FC | 	wrpin	##475208, local01
2cdf8     13 17 12 FC | 	wxpin	arg03, local01
2cdfc     13 01 28 FC | 	wypin	#0, local01
2ce00     41 26 62 FD | 	dirh	local01
2ce04     1C 4E 05 F1 | 	add	fp, #28
2ce08     A7 28 02 FB | 	rdlong	local02, fp
2ce0c     14 27 82 F1 | 	sub	local01, local02
2ce10     07 26 06 F5 | 	and	local01, #7
2ce14     18 26 66 F0 | 	shl	local01, #24
2ce18     78 14 06 F6 | 	mov	arg02, #120
2ce1c     13 15 42 F5 | 	or	arg02, local01
2ce20     14 4E 85 F1 | 	sub	fp, #20
2ce24     A7 14 62 FC | 	wrlong	arg02, fp
2ce28     14 4E 05 F1 | 	add	fp, #20
2ce2c     A7 12 02 FB | 	rdlong	arg01, fp
2ce30     10 14 26 F4 | 	bith	arg02, #16
2ce34     40 12 62 FD | 	dirl	arg01
2ce38     09 15 02 FC | 	wrpin	arg02, arg01
2ce3c     09 3F 18 FC | 	wxpin	#31, arg01
2ce40     FF FF FF FF 
2ce44     09 FF 2B FC | 	wypin	##-1, arg01
2ce48     41 12 62 FD | 	dirh	arg01
2ce4c     04 4E 85 F1 | 	sub	fp, #4
2ce50     A7 14 02 FB | 	rdlong	arg02, fp
2ce54     08 4E 05 F1 | 	add	fp, #8
2ce58     A7 2A 02 FB | 	rdlong	local03, fp
2ce5c     15 15 82 F1 | 	sub	arg02, local03
2ce60     07 14 06 F5 | 	and	arg02, #7
2ce64     18 14 66 F0 | 	shl	arg02, #24
2ce68     14 4E 85 F1 | 	sub	fp, #20
2ce6c     A7 14 62 FC | 	wrlong	arg02, fp
2ce70     29 00 00 FF 
2ce74     7A 14 46 F5 | 	or	arg02, ##21114
2ce78     A7 14 62 FC | 	wrlong	arg02, fp
2ce7c     14 4E 05 F1 | 	add	fp, #20
2ce80     A7 12 02 FB | 	rdlong	arg01, fp
2ce84     40 12 62 FD | 	dirl	arg01
2ce88     09 15 02 FC | 	wrpin	arg02, arg01
2ce8c     09 4F 18 FC | 	wxpin	#39, arg01
2ce90     09 01 28 FC | 	wypin	#0, arg01
2ce94     41 12 62 FD | 	dirh	arg01
2ce98     28 4E 85 F1 | 	sub	fp, #40
2ce9c     A7 12 02 F6 | 	mov	arg01, fp
2cea0     14 4E 85 F1 | 	sub	fp, #20
2cea4     0A 14 06 F6 | 	mov	arg02, #10
2cea8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2ceac     00 12 06 F6 | 	mov	arg01, #0
2ceb0     00 14 06 F6 | 	mov	arg02, #0
2ceb4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2ceb8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1199
2cebc     64 12 06 F6 | 	mov	arg01, #100
2cec0     DC 93 BF FD | 	call	#__system___waitus
2cec4     14 4E 05 F1 | 	add	fp, #20
2cec8     A7 12 02 F6 | 	mov	arg01, fp
2cecc     14 4E 85 F1 | 	sub	fp, #20
2ced0     0A 14 06 F6 | 	mov	arg02, #10
2ced4     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2ced8     0C 4E 05 F1 | 	add	fp, #12
2cedc     A7 00 48 FC | 	wrbyte	#0, fp
2cee0     0C 4E 85 F1 | 	sub	fp, #12
2cee4     00 12 06 F6 | 	mov	arg01, #0
2cee8     00 14 06 F6 | 	mov	arg02, #0
2ceec     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2cef0     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2cef4     01 18 0E F2 | 	cmp	arg04, #1 wz
2cef8     B8 03 90 5D |  if_ne	jmp	#LR__4387
2cefc     08 12 06 F6 | 	mov	arg01, #8
2cf00     AA 15 06 F6 | 	mov	arg02, #426
2cf04     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2cf08     FD FA E1 F8 | 	getbyte	result1, result1, #0
2cf0c     01 FA 0D F2 | 	cmp	result1, #1 wz
2cf10     98 01 90 5D |  if_ne	jmp	#LR__4373
2cf14     14 4E 05 F1 | 	add	fp, #20
2cf18     A7 12 02 F6 | 	mov	arg01, fp
2cf1c     14 4E 85 F1 | 	sub	fp, #20
2cf20     04 14 06 F6 | 	mov	arg02, #4
2cf24     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2cf28     16 4E 05 F1 | 	add	fp, #22
2cf2c     A7 2C C2 FA | 	rdbyte	local04, fp
2cf30     16 4E 85 F1 | 	sub	fp, #22
2cf34     01 2C 0E F2 | 	cmp	local04, #1 wz
2cf38     17 4E 05 A1 |  if_e	add	fp, #23
2cf3c     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2cf40     17 4E 85 A1 |  if_e	sub	fp, #23
2cf44     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2cf48     68 03 90 5D |  if_ne	jmp	#LR__4386
2cf4c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2cf4c     18 4E 05 F1 | 	add	fp, #24
2cf50     01 00 80 FF 
2cf54     A7 D0 6B FC | 	wrlong	##1000, fp
2cf58     18 4E 85 F1 | 	sub	fp, #24
2cf5c                 | LR__4370
2cf5c     18 4E 05 F1 | 	add	fp, #24
2cf60     A7 26 0A FB | 	rdlong	local01, fp wz
2cf64     18 4E 85 F1 | 	sub	fp, #24
2cf68     3C 00 90 AD |  if_e	jmp	#LR__4371
2cf6c     A9 12 06 F6 | 	mov	arg01, #169
2cf70     1E 14 C6 F9 | 	decod	arg02, #30
2cf74     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2cf78     FD 2C 02 F6 | 	mov	local04, result1
2cf7c     07 2C 4E F7 | 	zerox	local04, #7 wz
2cf80     24 00 90 AD |  if_e	jmp	#LR__4371
2cf84     01 00 00 FF 
2cf88     E8 13 06 F6 | 	mov	arg01, ##1000
2cf8c     10 93 BF FD | 	call	#__system___waitus
2cf90     18 4E 05 F1 | 	add	fp, #24
2cf94     A7 2C 02 FB | 	rdlong	local04, fp
2cf98     01 2C 86 F1 | 	sub	local04, #1
2cf9c     A7 2C 62 FC | 	wrlong	local04, fp
2cfa0     18 4E 85 F1 | 	sub	fp, #24
2cfa4     B4 FF 9F FD | 	jmp	#LR__4370
2cfa8                 | LR__4371
2cfa8     18 4E 05 F1 | 	add	fp, #24
2cfac     A7 2C 0A FB | 	rdlong	local04, fp wz
2cfb0     18 4E 85 F1 | 	sub	fp, #24
2cfb4     4C 00 90 AD |  if_e	jmp	#LR__4372
2cfb8     3A 12 06 F6 | 	mov	arg01, #58
2cfbc     00 14 06 F6 | 	mov	arg02, #0
2cfc0     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2cfc4     FD 2A 02 F6 | 	mov	local03, result1
2cfc8     07 2A 4E F7 | 	zerox	local03, #7 wz
2cfcc     34 00 90 5D |  if_ne	jmp	#LR__4372
2cfd0     14 4E 05 F1 | 	add	fp, #20
2cfd4     A7 12 02 F6 | 	mov	arg01, fp
2cfd8     14 4E 85 F1 | 	sub	fp, #20
2cfdc     04 14 06 F6 | 	mov	arg02, #4
2cfe0     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1189
2cfe4     14 4E 05 F1 | 	add	fp, #20
2cfe8     A7 26 C2 FA | 	rdbyte	local01, fp
2cfec     40 26 CE F7 | 	test	local01, #64 wz
2cff0     0C 2C 06 56 |  if_ne	mov	local04, #12
2cff4     04 2C 06 A6 |  if_e	mov	local04, #4
2cff8     08 4E 85 F1 | 	sub	fp, #8
2cffc     A7 2C 42 FC | 	wrbyte	local04, fp
2d000     0C 4E 85 F1 | 	sub	fp, #12
2d004                 | LR__4372
2d004     14 2C 06 FB | 	rdlong	local04, #20
2d008     18 4E 05 F1 | 	add	fp, #24
2d00c     A7 2C 62 FC | 	wrlong	local04, fp
2d010     0C 4E 05 F1 | 	add	fp, #12
2d014     A7 2C 02 FB | 	rdlong	local04, fp
2d018     1B 2C 26 F4 | 	bith	local04, #27
2d01c     A7 2C 62 FC | 	wrlong	local04, fp
2d020     0C 4E 85 F1 | 	sub	fp, #12
2d024     A7 2C 02 FB | 	rdlong	local04, fp
2d028     18 4E 85 F1 | 	sub	fp, #24
2d02c     68 78 04 FF 
2d030     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d034     1C 4E 05 C1 |  if_b	add	fp, #28
2d038     00 01 80 CF 
2d03c     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d040     1C 4E 85 C1 |  if_b	sub	fp, #28
2d044     6C 02 90 CD |  if_b	jmp	#LR__4386
2d048     18 4E 05 F1 | 	add	fp, #24
2d04c     A7 2C 02 FB | 	rdlong	local04, fp
2d050     18 4E 85 F1 | 	sub	fp, #24
2d054     E1 F5 05 FF 
2d058     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d05c     1C 4E 05 C1 |  if_b	add	fp, #28
2d060     00 01 80 CF 
2d064     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2d068     1C 4E 85 C1 |  if_b	sub	fp, #28
2d06c     44 02 90 CD |  if_b	jmp	#LR__4386
2d070     18 4E 05 F1 | 	add	fp, #24
2d074     A7 2C 02 FB | 	rdlong	local04, fp
2d078     18 4E 85 F1 | 	sub	fp, #24
2d07c     3B 58 08 FF 
2d080     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2d084     1C 4E 05 C1 |  if_b	add	fp, #28
2d088     00 01 80 CF 
2d08c     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2d090     1C 4E 85 C1 |  if_b	sub	fp, #28
2d094     1C 02 90 CD |  if_b	jmp	#LR__4386
2d098     1C 4E 05 F1 | 	add	fp, #28
2d09c     80 01 80 FF 
2d0a0     A7 10 68 FC | 	wrlong	##196616, fp
2d0a4     1C 4E 85 F1 | 	sub	fp, #28
2d0a8     08 02 90 FD | 	jmp	#LR__4386
2d0ac                 | LR__4373
2d0ac     A9 12 06 F6 | 	mov	arg01, #169
2d0b0     00 14 06 F6 | 	mov	arg02, #0
2d0b4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d0b8     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2d0bc     02 2C 16 F2 | 	cmp	local04, #2 wc
2d0c0     18 00 90 3D |  if_ae	jmp	#LR__4374
2d0c4     0C 4E 05 F1 | 	add	fp, #12
2d0c8     A7 04 48 FC | 	wrbyte	#2, fp
2d0cc     04 4E 05 F1 | 	add	fp, #4
2d0d0     A7 52 49 FC | 	wrbyte	#169, fp
2d0d4     10 4E 85 F1 | 	sub	fp, #16
2d0d8     14 00 90 FD | 	jmp	#LR__4375
2d0dc                 | LR__4374
2d0dc     0C 4E 05 F1 | 	add	fp, #12
2d0e0     A7 02 48 FC | 	wrbyte	#1, fp
2d0e4     04 4E 05 F1 | 	add	fp, #4
2d0e8     A7 02 48 FC | 	wrbyte	#1, fp
2d0ec     10 4E 85 F1 | 	sub	fp, #16
2d0f0                 | LR__4375
2d0f0                 | ' 				ty =  0x01 ; cmd =  (1) ;
2d0f0                 | ' 			}
2d0f0                 | ' 			for (tmr = 1000; tmr; tmr--) {
2d0f0     18 4E 05 F1 | 	add	fp, #24
2d0f4     01 00 80 FF 
2d0f8     A7 D0 6B FC | 	wrlong	##1000, fp
2d0fc     18 4E 85 F1 | 	sub	fp, #24
2d100                 | LR__4376
2d100     18 4E 05 F1 | 	add	fp, #24
2d104     A7 2A 0A FB | 	rdlong	local03, fp wz
2d108     18 4E 85 F1 | 	sub	fp, #24
2d10c     44 00 90 AD |  if_e	jmp	#LR__4377
2d110     10 4E 05 F1 | 	add	fp, #16
2d114     A7 12 C2 FA | 	rdbyte	arg01, fp
2d118     10 4E 85 F1 | 	sub	fp, #16
2d11c     00 14 06 F6 | 	mov	arg02, #0
2d120     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d124     FD 2C 02 F6 | 	mov	local04, result1
2d128     07 2C 4E F7 | 	zerox	local04, #7 wz
2d12c     24 00 90 AD |  if_e	jmp	#LR__4377
2d130     01 00 00 FF 
2d134     E8 13 06 F6 | 	mov	arg01, ##1000
2d138     64 91 BF FD | 	call	#__system___waitus
2d13c     18 4E 05 F1 | 	add	fp, #24
2d140     A7 2C 02 FB | 	rdlong	local04, fp
2d144     01 2C 86 F1 | 	sub	local04, #1
2d148     A7 2C 62 FC | 	wrlong	local04, fp
2d14c     18 4E 85 F1 | 	sub	fp, #24
2d150     AC FF 9F FD | 	jmp	#LR__4376
2d154                 | LR__4377
2d154     18 4E 05 F1 | 	add	fp, #24
2d158     A7 2C 0A FB | 	rdlong	local04, fp wz
2d15c     18 4E 85 F1 | 	sub	fp, #24
2d160     14 00 90 AD |  if_e	jmp	#LR__4378
2d164     10 12 06 F6 | 	mov	arg01, #16
2d168     09 14 C6 F9 | 	decod	arg02, #9
2d16c     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d170     07 FA 4D F7 | 	zerox	result1, #7 wz
2d174     0C 00 90 AD |  if_e	jmp	#LR__4379
2d178                 | LR__4378
2d178     0C 4E 05 F1 | 	add	fp, #12
2d17c     A7 00 48 FC | 	wrbyte	#0, fp
2d180     0C 4E 85 F1 | 	sub	fp, #12
2d184                 | LR__4379
2d184     14 2C 06 FB | 	rdlong	local04, #20
2d188     18 4E 05 F1 | 	add	fp, #24
2d18c     A7 2C 62 FC | 	wrlong	local04, fp
2d190     18 4E 85 F1 | 	sub	fp, #24
2d194     F0 FA 02 FF 
2d198     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d19c     18 00 90 3D |  if_ae	jmp	#LR__4380
2d1a0     24 4E 05 F1 | 	add	fp, #36
2d1a4     A7 2C 02 FB | 	rdlong	local04, fp
2d1a8     1B 2C 26 F4 | 	bith	local04, #27
2d1ac     A7 2C 62 FC | 	wrlong	local04, fp
2d1b0     24 4E 85 F1 | 	sub	fp, #36
2d1b4     2C 00 90 FD | 	jmp	#LR__4381
2d1b8                 | LR__4380
2d1b8     18 4E 05 F1 | 	add	fp, #24
2d1bc     A7 2C 02 FB | 	rdlong	local04, fp
2d1c0     18 4E 85 F1 | 	sub	fp, #24
2d1c4     E1 F5 05 FF 
2d1c8     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d1cc     24 4E 05 C1 |  if_b	add	fp, #36
2d1d0     A7 2C 02 CB |  if_b	rdlong	local04, fp
2d1d4     80 00 04 CF 
2d1d8     00 2C 46 C5 |  if_b	or	local04, ##134283264
2d1dc     A7 2C 62 CC |  if_b	wrlong	local04, fp
2d1e0     24 4E 85 C1 |  if_b	sub	fp, #36
2d1e4                 | LR__4381
2d1e4     18 4E 05 F1 | 	add	fp, #24
2d1e8     A7 2C 02 FB | 	rdlong	local04, fp
2d1ec     18 4E 85 F1 | 	sub	fp, #24
2d1f0     F0 FA 02 FF 
2d1f4     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2d1f8     1C 4E 05 C1 |  if_b	add	fp, #28
2d1fc     00 01 80 CF 
2d200     A7 08 68 CC |  if_b	wrlong	##131076, fp
2d204     1C 4E 85 C1 |  if_b	sub	fp, #28
2d208     A8 00 90 CD |  if_b	jmp	#LR__4385
2d20c     18 4E 05 F1 | 	add	fp, #24
2d210     A7 2C 02 FB | 	rdlong	local04, fp
2d214     18 4E 85 F1 | 	sub	fp, #24
2d218     68 78 04 FF 
2d21c     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2d220     1C 4E 05 C1 |  if_b	add	fp, #28
2d224     80 01 80 CF 
2d228     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2d22c     1C 4E 85 C1 |  if_b	sub	fp, #28
2d230     80 00 90 CD |  if_b	jmp	#LR__4384
2d234     18 4E 05 F1 | 	add	fp, #24
2d238     A7 2C 02 FB | 	rdlong	local04, fp
2d23c     18 4E 85 F1 | 	sub	fp, #24
2d240     E1 F5 05 FF 
2d244     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2d248     1C 4E 05 C1 |  if_b	add	fp, #28
2d24c     00 02 80 CF 
2d250     A7 10 68 CC |  if_b	wrlong	##262152, fp
2d254     1C 4E 85 C1 |  if_b	sub	fp, #28
2d258     58 00 90 CD |  if_b	jmp	#LR__4383
2d25c     18 4E 05 F1 | 	add	fp, #24
2d260     A7 2C 02 FB | 	rdlong	local04, fp
2d264     18 4E 85 F1 | 	sub	fp, #24
2d268     59 73 07 FF 
2d26c     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2d270     1C 4E 05 C1 |  if_b	add	fp, #28
2d274     80 02 80 CF 
2d278     A7 14 68 CC |  if_b	wrlong	##327690, fp
2d27c     1C 4E 85 C1 |  if_b	sub	fp, #28
2d280     30 00 90 CD |  if_b	jmp	#LR__4382
2d284     18 4E 05 F1 | 	add	fp, #24
2d288     A7 2C 02 FB | 	rdlong	local04, fp
2d28c     18 4E 85 F1 | 	sub	fp, #24
2d290     D1 F0 08 FF 
2d294     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2d298     1C 4E 05 C1 |  if_b	add	fp, #28
2d29c     00 03 80 CF 
2d2a0     A7 18 68 CC |  if_b	wrlong	##393228, fp
2d2a4     1C 4E 85 F3 | 	sumc	fp, #28
2d2a8     80 03 80 3F 
2d2ac     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2d2b0     1C 4E 85 31 |  if_ae	sub	fp, #28
2d2b4                 | LR__4382
2d2b4                 | LR__4383
2d2b4                 | LR__4384
2d2b4                 | LR__4385
2d2b4                 | LR__4386
2d2b4                 | LR__4387
2d2b4     0C 4E 05 F1 | 	add	fp, #12
2d2b8     A7 2C C2 FA | 	rdbyte	local04, fp
2d2bc     01 00 00 FF 
2d2c0     21 E4 05 F1 | 	add	objptr, ##545
2d2c4     F2 2C 42 FC | 	wrbyte	local04, objptr
2d2c8     A7 26 CA FA | 	rdbyte	local01, fp wz
2d2cc     00 2C 06 56 |  if_ne	mov	local04, #0
2d2d0     01 2C 06 A6 |  if_e	mov	local04, #1
2d2d4     20 4E 05 F1 | 	add	fp, #32
2d2d8     A7 2C 42 FC | 	wrbyte	local04, fp
2d2dc     A7 2C C2 FA | 	rdbyte	local04, fp
2d2e0     2C 4E 85 F1 | 	sub	fp, #44
2d2e4     01 E4 85 F1 | 	sub	objptr, #1
2d2e8     F2 2C 42 FC | 	wrbyte	local04, objptr
2d2ec     01 00 00 FF 
2d2f0     20 E4 85 F1 | 	sub	objptr, ##544
2d2f4     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1199
2d2f8     34 4E 05 F1 | 	add	fp, #52
2d2fc     A7 12 02 FB | 	rdlong	arg01, fp
2d300     18 4E 85 F1 | 	sub	fp, #24
2d304     A7 14 02 FB | 	rdlong	arg02, fp
2d308     09 15 12 FC | 	wxpin	arg02, arg01
2d30c     1C 4E 05 F1 | 	add	fp, #28
2d310     A7 12 02 FB | 	rdlong	arg01, fp
2d314     14 4E 85 F1 | 	sub	fp, #20
2d318     A7 14 02 FB | 	rdlong	arg02, fp
2d31c     09 15 02 FC | 	wrpin	arg02, arg01
2d320                 | ' 
2d320                 | ' 		}
2d320                 | ' 	}
2d320                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d320                 | ' 	CardType = ty;
2d320                 | ' 	s = ty ? 0 :  0x01 ;
2d320                 | ' 	Stat = s;
2d320                 | ' 
2d320                 | ' 	deselect();
2d320                 | ' 
2d320                 | ' 
2d320                 | ' 	_wxpin( PIN_CLK, ck_div );
2d320                 | ' 	_wrpin( PIN_DI, spm_tx );
2d320                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d320                 | ' 	return s;
2d320     08 4E 05 F1 | 	add	fp, #8
2d324     A7 FA C1 FA | 	rdbyte	result1, fp
2d328     2C 4E 85 F1 | 	sub	fp, #44
2d32c                 | LR__4388
2d32c     A7 F0 03 F6 | 	mov	ptra, fp
2d330     B2 00 A0 FD | 	call	#popregs_
2d334                 | _fatfs_cc_disk_initialize_ret
2d334     2D 00 64 FD | 	ret
2d338                 | 
2d338                 | _fatfs_cc_disk_read
2d338     05 4A 05 F6 | 	mov	COUNT_, #5
2d33c     A8 00 A0 FD | 	call	#pushregs_
2d340     0A 27 02 F6 | 	mov	local01, arg02
2d344     0B 29 02 F6 | 	mov	local02, arg03
2d348     0C 2B 02 F6 | 	mov	local03, arg04
2d34c     00 12 0E F2 | 	cmp	arg01, #0 wz
2d350     01 FA 05 56 |  if_ne	mov	result1, #1
2d354                 | ' 
2d354                 | ' 	return Stat;
2d354     01 00 00 AF 
2d358     20 E4 05 A1 |  if_e	add	objptr, ##544
2d35c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d360     01 00 00 AF 
2d364     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d368     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d36c     01 FA CD F7 | 	test	result1, #1 wz
2d370     03 FA 05 56 |  if_ne	mov	result1, #3
2d374     84 00 90 5D |  if_ne	jmp	#LR__4392
2d378     01 00 00 FF 
2d37c     21 E4 05 F1 | 	add	objptr, ##545
2d380     F2 2C C2 FA | 	rdbyte	local04, objptr
2d384     01 00 00 FF 
2d388     21 E4 85 F1 | 	sub	objptr, ##545
2d38c     08 2C CE F7 | 	test	local04, #8 wz
2d390     09 28 66 A0 |  if_e	shl	local02, #9
2d394     02 2A 16 F2 | 	cmp	local03, #2 wc
2d398     12 2C 06 36 |  if_ae	mov	local04, #18
2d39c     11 2C 06 C6 |  if_b	mov	local04, #17
2d3a0     14 15 02 F6 | 	mov	arg02, local02
2d3a4     16 13 02 F6 | 	mov	arg01, local04
2d3a8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d3ac     FD 2E 02 F6 | 	mov	local05, result1
2d3b0     07 2E 4E F7 | 	zerox	local05, #7 wz
2d3b4     30 00 90 5D |  if_ne	jmp	#LR__4391
2d3b8                 | ' 		do {
2d3b8                 | LR__4390
2d3b8     13 13 02 F6 | 	mov	arg01, local01
2d3bc     09 14 C6 F9 | 	decod	arg02, #9
2d3c0     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1207
2d3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3c8     01 00 00 5F 
2d3cc     00 26 06 51 |  if_ne	add	local01, ##512
2d3d0     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4390
2d3d4     16 2D E2 F8 | 	getbyte	local04, local04, #0
2d3d8     12 2C 0E F2 | 	cmp	local04, #18 wz
2d3dc     0C 12 06 A6 |  if_e	mov	arg01, #12
2d3e0     00 14 06 A6 |  if_e	mov	arg02, #0
2d3e4     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1213
2d3e8                 | LR__4391
2d3e8     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1199
2d3ec                 | ' 	}
2d3ec                 | ' 	deselect();
2d3ec                 | ' 
2d3ec                 | ' 	return count ? RES_ERROR : RES_OK;
2d3ec     00 2A 0E F2 | 	cmp	local03, #0 wz
2d3f0     01 2E 06 56 |  if_ne	mov	local05, #1
2d3f4     00 2E 06 A6 |  if_e	mov	local05, #0
2d3f8     17 FB 01 F6 | 	mov	result1, local05
2d3fc                 | LR__4392
2d3fc     A7 F0 03 F6 | 	mov	ptra, fp
2d400     B2 00 A0 FD | 	call	#popregs_
2d404                 | _fatfs_cc_disk_read_ret
2d404     2D 00 64 FD | 	ret
2d408                 | 
2d408                 | _fatfs_cc_disk_write
2d408     04 4A 05 F6 | 	mov	COUNT_, #4
2d40c     A8 00 A0 FD | 	call	#pushregs_
2d410     0A 27 02 F6 | 	mov	local01, arg02
2d414     0C 29 02 F6 | 	mov	local02, arg04
2d418     0B 2B 02 F6 | 	mov	local03, arg03
2d41c     00 12 0E F2 | 	cmp	arg01, #0 wz
2d420     01 FA 05 56 |  if_ne	mov	result1, #1
2d424                 | ' 
2d424                 | ' 	return Stat;
2d424     01 00 00 AF 
2d428     20 E4 05 A1 |  if_e	add	objptr, ##544
2d42c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d430     01 00 00 AF 
2d434     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d438     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d43c     01 FA CD F7 | 	test	result1, #1 wz
2d440     03 FA 05 56 |  if_ne	mov	result1, #3
2d444     D4 00 90 5D |  if_ne	jmp	#LR__4404
2d448     01 00 00 FF 
2d44c     21 E4 05 F1 | 	add	objptr, ##545
2d450     F2 16 C2 FA | 	rdbyte	arg03, objptr
2d454     01 00 00 FF 
2d458     21 E4 85 F1 | 	sub	objptr, ##545
2d45c     08 16 CE F7 | 	test	arg03, #8 wz
2d460     09 2A 66 A0 |  if_e	shl	local03, #9
2d464     01 28 0E F2 | 	cmp	local02, #1 wz
2d468     30 00 90 5D |  if_ne	jmp	#LR__4400
2d46c     18 12 06 F6 | 	mov	arg01, #24
2d470     15 15 02 F6 | 	mov	arg02, local03
2d474     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d478     FD 2C 02 F6 | 	mov	local04, result1
2d47c     07 2C 4E F7 | 	zerox	local04, #7 wz
2d480     84 00 90 5D |  if_ne	jmp	#LR__4403
2d484     13 13 02 F6 | 	mov	arg01, local01
2d488     FE 14 06 F6 | 	mov	arg02, #254
2d48c     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2d490     00 FA 0D F2 | 	cmp	result1, #0 wz
2d494     00 28 06 56 |  if_ne	mov	local02, #0
2d498     6C 00 90 FD | 	jmp	#LR__4403
2d49c                 | LR__4400
2d49c     01 00 00 FF 
2d4a0     21 E4 05 F1 | 	add	objptr, ##545
2d4a4     F2 2C C2 FA | 	rdbyte	local04, objptr
2d4a8     01 00 00 FF 
2d4ac     21 E4 85 F1 | 	sub	objptr, ##545
2d4b0     06 2C CE F7 | 	test	local04, #6 wz
2d4b4     97 12 06 56 |  if_ne	mov	arg01, #151
2d4b8     14 15 02 56 |  if_ne	mov	arg02, local02
2d4bc     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1213
2d4c0     15 15 02 F6 | 	mov	arg02, local03
2d4c4     19 12 06 F6 | 	mov	arg01, #25
2d4c8     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d4cc     FD 2C 02 F6 | 	mov	local04, result1
2d4d0     07 2C 4E F7 | 	zerox	local04, #7 wz
2d4d4     30 00 90 5D |  if_ne	jmp	#LR__4402
2d4d8                 | ' 			do {
2d4d8                 | LR__4401
2d4d8     13 13 02 F6 | 	mov	arg01, local01
2d4dc     FC 14 06 F6 | 	mov	arg02, #252
2d4e0     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2d4e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d4e8     01 00 00 5F 
2d4ec     00 26 06 51 |  if_ne	add	local01, ##512
2d4f0     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4401
2d4f4     00 12 06 F6 | 	mov	arg01, #0
2d4f8     FD 14 06 F6 | 	mov	arg02, #253
2d4fc     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1209
2d500     00 FA 0D F2 | 	cmp	result1, #0 wz
2d504     01 28 06 A6 |  if_e	mov	local02, #1
2d508                 | LR__4402
2d508                 | LR__4403
2d508     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1199
2d50c                 | ' 				count = 1;
2d50c                 | ' 		}
2d50c                 | ' 	}
2d50c                 | ' 	deselect();
2d50c                 | ' 
2d50c                 | ' 	return count ? RES_ERROR : RES_OK;
2d50c     00 28 0E F2 | 	cmp	local02, #0 wz
2d510     01 2C 06 56 |  if_ne	mov	local04, #1
2d514     00 2C 06 A6 |  if_e	mov	local04, #0
2d518     16 FB 01 F6 | 	mov	result1, local04
2d51c                 | LR__4404
2d51c     A7 F0 03 F6 | 	mov	ptra, fp
2d520     B2 00 A0 FD | 	call	#popregs_
2d524                 | _fatfs_cc_disk_write_ret
2d524     2D 00 64 FD | 	ret
2d528                 | 
2d528                 | _fatfs_cc_disk_ioctl
2d528     01 4A 05 F6 | 	mov	COUNT_, #1
2d52c     A8 00 A0 FD | 	call	#pushregs_
2d530     30 F0 07 F1 | 	add	ptra, #48
2d534     04 4E 05 F1 | 	add	fp, #4
2d538     A7 12 42 FC | 	wrbyte	arg01, fp
2d53c     04 4E 05 F1 | 	add	fp, #4
2d540     A7 14 42 FC | 	wrbyte	arg02, fp
2d544     04 4E 05 F1 | 	add	fp, #4
2d548     A7 16 62 FC | 	wrlong	arg03, fp
2d54c     08 4E 85 F1 | 	sub	fp, #8
2d550     A7 12 CA FA | 	rdbyte	arg01, fp wz
2d554     04 4E 85 F1 | 	sub	fp, #4
2d558     01 FA 05 56 |  if_ne	mov	result1, #1
2d55c                 | ' 
2d55c                 | ' 	return Stat;
2d55c     01 00 00 AF 
2d560     20 E4 05 A1 |  if_e	add	objptr, ##544
2d564     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d568     01 00 00 AF 
2d56c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d570     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d574     01 FA CD F7 | 	test	result1, #1 wz
2d578     03 FA 05 56 |  if_ne	mov	result1, #3
2d57c     E4 01 90 5D |  if_ne	jmp	#LR__4418
2d580     10 4E 05 F1 | 	add	fp, #16
2d584     A7 02 68 FC | 	wrlong	#1, fp
2d588                 | ' 
2d588                 | ' 	res = RES_ERROR;
2d588                 | ' 	switch (ctrl) {
2d588     08 4E 85 F1 | 	sub	fp, #8
2d58c     A7 26 C2 FA | 	rdbyte	local01, fp
2d590     08 4E 85 F1 | 	sub	fp, #8
2d594     04 26 26 F3 | 	fle	local01, #4
2d598     30 26 62 FD | 	jmprel	local01
2d59c                 | LR__4410
2d59c     10 00 90 FD | 	jmp	#LR__4411
2d5a0     24 00 90 FD | 	jmp	#LR__4412
2d5a4     A0 01 90 FD | 	jmp	#LR__4416
2d5a8     80 01 90 FD | 	jmp	#LR__4415
2d5ac     98 01 90 FD | 	jmp	#LR__4416
2d5b0                 | LR__4411
2d5b0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1203
2d5b4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5b8     10 4E 05 51 |  if_ne	add	fp, #16
2d5bc     A7 00 68 5C |  if_ne	wrlong	#0, fp
2d5c0     10 4E 85 51 |  if_ne	sub	fp, #16
2d5c4                 | ' 			break;
2d5c4     8C 01 90 FD | 	jmp	#LR__4417
2d5c8                 | LR__4412
2d5c8     09 12 06 F6 | 	mov	arg01, #9
2d5cc     00 14 06 F6 | 	mov	arg02, #0
2d5d0     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1213
2d5d4     FD 26 02 F6 | 	mov	local01, result1
2d5d8     07 26 4E F7 | 	zerox	local01, #7 wz
2d5dc     74 01 90 5D |  if_ne	jmp	#LR__4417
2d5e0     18 4E 05 F1 | 	add	fp, #24
2d5e4     A7 12 02 F6 | 	mov	arg01, fp
2d5e8     18 4E 85 F1 | 	sub	fp, #24
2d5ec     10 14 06 F6 | 	mov	arg02, #16
2d5f0     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1207
2d5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d5f8     58 01 90 AD |  if_e	jmp	#LR__4417
2d5fc     18 4E 05 F1 | 	add	fp, #24
2d600     A7 26 C2 FA | 	rdbyte	local01, fp
2d604     18 4E 85 F1 | 	sub	fp, #24
2d608     06 26 46 F0 | 	shr	local01, #6
2d60c     01 26 0E F2 | 	cmp	local01, #1 wz
2d610     5C 00 90 5D |  if_ne	jmp	#LR__4413
2d614     21 4E 05 F1 | 	add	fp, #33
2d618     A7 26 C2 FA | 	rdbyte	local01, fp
2d61c     01 4E 85 F1 | 	sub	fp, #1
2d620     A7 FA C1 FA | 	rdbyte	result1, fp
2d624     FD FA 31 F9 | 	getword	result1, result1, #0
2d628     08 FA 65 F0 | 	shl	result1, #8
2d62c     FD 26 02 F1 | 	add	local01, result1
2d630     01 4E 85 F1 | 	sub	fp, #1
2d634     A7 FA C1 FA | 	rdbyte	result1, fp
2d638     3F FA 05 F5 | 	and	result1, #63
2d63c     10 FA 65 F0 | 	shl	result1, #16
2d640     FD 26 02 F1 | 	add	local01, result1
2d644     01 26 06 F1 | 	add	local01, #1
2d648     09 4E 05 F1 | 	add	fp, #9
2d64c     A7 26 62 FC | 	wrlong	local01, fp
2d650     1C 4E 85 F1 | 	sub	fp, #28
2d654     A7 26 02 FB | 	rdlong	local01, fp
2d658     1C 4E 05 F1 | 	add	fp, #28
2d65c     A7 FA 01 FB | 	rdlong	result1, fp
2d660     28 4E 85 F1 | 	sub	fp, #40
2d664     0A FA 65 F0 | 	shl	result1, #10
2d668     13 FB 61 FC | 	wrlong	result1, local01
2d66c     AC 00 90 FD | 	jmp	#LR__4414
2d670                 | LR__4413
2d670     1D 4E 05 F1 | 	add	fp, #29
2d674     A7 26 C2 FA | 	rdbyte	local01, fp
2d678     13 27 42 F8 | 	getnib	local01, local01, #0
2d67c     05 4E 05 F1 | 	add	fp, #5
2d680     A7 FA C1 FA | 	rdbyte	result1, fp
2d684     80 FA 05 F5 | 	and	result1, #128
2d688     07 FA C5 F0 | 	sar	result1, #7
2d68c     FD 26 02 F1 | 	add	local01, result1
2d690     01 4E 85 F1 | 	sub	fp, #1
2d694     A7 FA C1 FA | 	rdbyte	result1, fp
2d698     03 FA 05 F5 | 	and	result1, #3
2d69c     01 FA 65 F0 | 	shl	result1, #1
2d6a0     FD 26 02 F1 | 	add	local01, result1
2d6a4     02 26 06 F1 | 	add	local01, #2
2d6a8     0D 4E 85 F1 | 	sub	fp, #13
2d6ac     A7 26 42 FC | 	wrbyte	local01, fp
2d6b0     0C 4E 05 F1 | 	add	fp, #12
2d6b4     A7 26 C2 FA | 	rdbyte	local01, fp
2d6b8     06 26 46 F0 | 	shr	local01, #6
2d6bc     01 4E 85 F1 | 	sub	fp, #1
2d6c0     A7 FA C1 FA | 	rdbyte	result1, fp
2d6c4     FD FA 31 F9 | 	getword	result1, result1, #0
2d6c8     02 FA 65 F0 | 	shl	result1, #2
2d6cc     FD 26 02 F1 | 	add	local01, result1
2d6d0     01 4E 85 F1 | 	sub	fp, #1
2d6d4     A7 FA C1 FA | 	rdbyte	result1, fp
2d6d8     03 FA 05 F5 | 	and	result1, #3
2d6dc     FD FA 31 F9 | 	getword	result1, result1, #0
2d6e0     0A FA 65 F0 | 	shl	result1, #10
2d6e4     FD 26 02 F1 | 	add	local01, result1
2d6e8     01 26 06 F1 | 	add	local01, #1
2d6ec     0A 4E 05 F1 | 	add	fp, #10
2d6f0     A7 26 62 FC | 	wrlong	local01, fp
2d6f4     1C 4E 85 F1 | 	sub	fp, #28
2d6f8     A7 26 02 FB | 	rdlong	local01, fp
2d6fc     1C 4E 05 F1 | 	add	fp, #28
2d700     A7 FA 01 FB | 	rdlong	result1, fp
2d704     14 4E 85 F1 | 	sub	fp, #20
2d708     A7 16 C2 FA | 	rdbyte	arg03, fp
2d70c     14 4E 85 F1 | 	sub	fp, #20
2d710     09 16 86 F1 | 	sub	arg03, #9
2d714     0B FB 61 F0 | 	shl	result1, arg03
2d718     13 FB 61 FC | 	wrlong	result1, local01
2d71c                 | LR__4414
2d71c     10 4E 05 F1 | 	add	fp, #16
2d720     A7 00 68 FC | 	wrlong	#0, fp
2d724     10 4E 85 F1 | 	sub	fp, #16
2d728                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2d728                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2d728                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2d728                 | ' 				}
2d728                 | ' 				res = RES_OK;
2d728                 | ' 			}
2d728                 | ' 			break;
2d728     28 00 90 FD | 	jmp	#LR__4417
2d72c                 | LR__4415
2d72c     0C 4E 05 F1 | 	add	fp, #12
2d730     A7 26 02 FB | 	rdlong	local01, fp
2d734     13 01 69 FC | 	wrlong	#128, local01
2d738     04 4E 05 F1 | 	add	fp, #4
2d73c     A7 00 68 FC | 	wrlong	#0, fp
2d740     10 4E 85 F1 | 	sub	fp, #16
2d744                 | ' 			*(DWORD*)buff = 128;
2d744                 | ' 			res = RES_OK;
2d744                 | ' 			break;
2d744     0C 00 90 FD | 	jmp	#LR__4417
2d748                 | LR__4416
2d748     10 4E 05 F1 | 	add	fp, #16
2d74c     A7 08 68 FC | 	wrlong	#4, fp
2d750     10 4E 85 F1 | 	sub	fp, #16
2d754                 | LR__4417
2d754     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1199
2d758                 | ' 			res = RES_PARERR;
2d758                 | ' 	}
2d758                 | ' 
2d758                 | ' 	deselect();
2d758                 | ' 
2d758                 | ' 	return res;
2d758     10 4E 05 F1 | 	add	fp, #16
2d75c     A7 FA 01 FB | 	rdlong	result1, fp
2d760     10 4E 85 F1 | 	sub	fp, #16
2d764                 | LR__4418
2d764     A7 F0 03 F6 | 	mov	ptra, fp
2d768     B2 00 A0 FD | 	call	#popregs_
2d76c                 | _fatfs_cc_disk_ioctl_ret
2d76c     2D 00 64 FD | 	ret
2d770                 | 
2d770                 | _fatfs_cc_disk_setpins
2d770     00 12 0E F2 | 	cmp	arg01, #0 wz
2d774     01 FA 65 56 |  if_ne	neg	result1, #1
2d778     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2d77c     01 00 00 FF 
2d780     10 E4 05 F1 | 	add	objptr, ##528
2d784     F2 14 62 FC | 	wrlong	arg02, objptr
2d788     04 E4 05 F1 | 	add	objptr, #4
2d78c     F2 16 62 FC | 	wrlong	arg03, objptr
2d790     04 E4 05 F1 | 	add	objptr, #4
2d794     F2 18 62 FC | 	wrlong	arg04, objptr
2d798     04 E4 05 F1 | 	add	objptr, #4
2d79c     F2 1A 62 FC | 	wrlong	arg05, objptr
2d7a0     01 00 00 FF 
2d7a4     1C E4 85 F1 | 	sub	objptr, ##540
2d7a8     00 FA 05 F6 | 	mov	result1, #0
2d7ac                 | _fatfs_cc_disk_setpins_ret
2d7ac     2D 00 64 FD | 	ret
2d7b0                 | 
2d7b0                 | _fatfs_cc_tchar2uni
2d7b0     09 01 02 FB | 	rdlong	_var01, arg01
2d7b4     00 03 02 F6 | 	mov	_var02, _var01
2d7b8     01 00 06 F1 | 	add	_var01, #1
2d7bc     00 05 02 F6 | 	mov	_var03, _var01
2d7c0     01 07 C2 FA | 	rdbyte	_var04, _var02
2d7c4     80 06 CE F7 | 	test	_var04, #128 wz
2d7c8     E8 00 90 AD |  if_e	jmp	#LR__4427
2d7cc     03 09 02 F6 | 	mov	_var05, _var04
2d7d0     E0 08 06 F5 | 	and	_var05, #224
2d7d4     C0 08 0E F2 | 	cmp	_var05, #192 wz
2d7d8     1F 06 06 A5 |  if_e	and	_var04, #31
2d7dc     01 0A 06 A6 |  if_e	mov	_var06, #1
2d7e0     34 00 90 AD |  if_e	jmp	#LR__4421
2d7e4     03 09 02 F6 | 	mov	_var05, _var04
2d7e8     F0 08 06 F5 | 	and	_var05, #240
2d7ec     E0 08 0E F2 | 	cmp	_var05, #224 wz
2d7f0     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2d7f4     02 0A 06 A6 |  if_e	mov	_var06, #2
2d7f8     1C 00 90 AD |  if_e	jmp	#LR__4420
2d7fc     03 09 02 F6 | 	mov	_var05, _var04
2d800     F8 08 06 F5 | 	and	_var05, #248
2d804     F0 08 0E F2 | 	cmp	_var05, #240 wz
2d808     07 06 06 A5 |  if_e	and	_var04, #7
2d80c     03 0A 06 A6 |  if_e	mov	_var06, #3
2d810                 | ' 			return 0xFFFFFFFF;
2d810     01 FA 65 56 |  if_ne	neg	result1, #1
2d814     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d818                 | LR__4420
2d818                 | LR__4421
2d818                 | ' 		}
2d818                 | ' 		do {
2d818                 | LR__4422
2d818     02 0D C2 FA | 	rdbyte	_var07, _var03
2d81c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2d820     C0 08 06 F5 | 	and	_var05, #192
2d824     80 08 0E F2 | 	cmp	_var05, #128 wz
2d828     01 04 06 F1 | 	add	_var03, #1
2d82c     01 FA 65 56 |  if_ne	neg	result1, #1
2d830     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2d834     06 06 66 F0 | 	shl	_var04, #6
2d838     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2d83c     3F 02 06 F5 | 	and	_var02, #63
2d840     01 07 42 F5 | 	or	_var04, _var02
2d844     F4 0B 6E FB | 	djnz	_var06, #LR__4422
2d848     80 06 16 F2 | 	cmp	_var04, #128 wc
2d84c     24 00 90 CD |  if_b	jmp	#LR__4424
2d850     6C 00 00 FF 
2d854     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2d858     0C 00 90 CD |  if_b	jmp	#LR__4423
2d85c     70 00 00 FF 
2d860     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2d864     0C 00 90 CD |  if_b	jmp	#LR__4424
2d868                 | LR__4423
2d868     80 08 00 FF 
2d86c     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2d870     08 00 90 CD |  if_b	jmp	#LR__4425
2d874                 | LR__4424
2d874     01 FA 65 F6 | 	neg	result1, #1
2d878     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2d87c                 | LR__4425
2d87c     80 00 00 FF 
2d880     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2d884     2C 00 90 CD |  if_b	jmp	#LR__4426
2d888     03 03 02 F6 | 	mov	_var02, _var04
2d88c     80 00 00 FF 
2d890     00 02 86 F1 | 	sub	_var02, ##65536
2d894     06 02 66 F0 | 	shl	_var02, #6
2d898     80 FF 01 FF 
2d89c     00 02 06 F5 | 	and	_var02, ##67043328
2d8a0     6E 00 6C FF 
2d8a4     00 08 06 F6 | 	mov	_var05, ##-671032320
2d8a8     01 09 42 F5 | 	or	_var05, _var02
2d8ac     09 06 46 F7 | 	zerox	_var04, #9
2d8b0     04 07 42 F5 | 	or	_var04, _var05
2d8b4                 | LR__4426
2d8b4                 | LR__4427
2d8b4     09 05 62 FC | 	wrlong	_var03, arg01
2d8b8                 | ' 	}
2d8b8                 | ' #line 811 "ff.c"
2d8b8                 | ' 	*str = p;
2d8b8                 | ' 	return uc;
2d8b8     03 FB 01 F6 | 	mov	result1, _var04
2d8bc                 | _fatfs_cc_tchar2uni_ret
2d8bc     2D 00 64 FD | 	ret
2d8c0                 | 
2d8c0                 | _fatfs_cc_put_utf
2d8c0     80 12 16 F2 | 	cmp	arg01, #128 wc
2d8c4     18 00 90 3D |  if_ae	jmp	#LR__4430
2d8c8     01 16 16 F2 | 	cmp	arg03, #1 wc
2d8cc     00 FA 05 C6 |  if_b	mov	result1, #0
2d8d0     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d8d4     0A 13 42 FC | 	wrbyte	arg01, arg02
2d8d8                 | ' 		*buf = (TCHAR)chr;
2d8d8                 | ' 		return 1;
2d8d8     01 FA 05 F6 | 	mov	result1, #1
2d8dc     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d8e0                 | LR__4430
2d8e0     04 00 00 FF 
2d8e4     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2d8e8     40 00 90 3D |  if_ae	jmp	#LR__4431
2d8ec     02 16 16 F2 | 	cmp	arg03, #2 wc
2d8f0     00 FA 05 C6 |  if_b	mov	result1, #0
2d8f4     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d8f8     09 FB 01 F6 | 	mov	result1, arg01
2d8fc     06 FA 45 F0 | 	shr	result1, #6
2d900     1F FA 05 F5 | 	and	result1, #31
2d904     C0 16 06 F6 | 	mov	arg03, #192
2d908     FD 16 42 F5 | 	or	arg03, result1
2d90c     0A 17 42 FC | 	wrbyte	arg03, arg02
2d910     01 14 06 F1 | 	add	arg02, #1
2d914     3F 12 06 F5 | 	and	arg01, #63
2d918     80 FA 05 F6 | 	mov	result1, #128
2d91c     09 FB 41 F5 | 	or	result1, arg01
2d920     0A FB 41 FC | 	wrbyte	result1, arg02
2d924                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2d924                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d924                 | ' 		return 2;
2d924     02 FA 05 F6 | 	mov	result1, #2
2d928     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d92c                 | LR__4431
2d92c     80 00 00 FF 
2d930     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d934     70 00 90 3D |  if_ae	jmp	#LR__4434
2d938     03 16 16 F2 | 	cmp	arg03, #3 wc
2d93c     18 00 90 CD |  if_b	jmp	#LR__4432
2d940     6C 00 00 FF 
2d944     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2d948     14 00 90 CD |  if_b	jmp	#LR__4433
2d94c     70 00 00 FF 
2d950     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2d954     08 00 90 3D |  if_ae	jmp	#LR__4433
2d958                 | LR__4432
2d958     00 FA 05 F6 | 	mov	result1, #0
2d95c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d960                 | LR__4433
2d960     09 FB 59 F8 | 	getnib	result1, arg01, #3
2d964     E0 16 06 F6 | 	mov	arg03, #224
2d968     FD 16 42 F5 | 	or	arg03, result1
2d96c     0A 17 42 FC | 	wrbyte	arg03, arg02
2d970     01 14 06 F1 | 	add	arg02, #1
2d974     09 FB 01 F6 | 	mov	result1, arg01
2d978     06 FA 45 F0 | 	shr	result1, #6
2d97c     3F FA 05 F5 | 	and	result1, #63
2d980     80 16 06 F6 | 	mov	arg03, #128
2d984     FD 16 42 F5 | 	or	arg03, result1
2d988     0A 17 42 FC | 	wrbyte	arg03, arg02
2d98c     01 14 06 F1 | 	add	arg02, #1
2d990     3F 12 06 F5 | 	and	arg01, #63
2d994     80 FA 05 F6 | 	mov	result1, #128
2d998     09 FB 41 F5 | 	or	result1, arg01
2d99c     0A FB 41 FC | 	wrbyte	result1, arg02
2d9a0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2d9a0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2d9a0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2d9a0                 | ' 		return 3;
2d9a0     03 FA 05 F6 | 	mov	result1, #3
2d9a4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2d9a8                 | LR__4434
2d9a8     04 16 16 F2 | 	cmp	arg03, #4 wc
2d9ac     00 FA 05 C6 |  if_b	mov	result1, #0
2d9b0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2d9b4     09 01 02 F6 | 	mov	_var01, arg01
2d9b8     E0 01 06 F4 | 	bitl	_var01, #480
2d9bc     00 00 6C FF 
2d9c0     00 00 86 F1 | 	sub	_var01, ##-671088640
2d9c4     06 00 46 F0 | 	shr	_var01, #6
2d9c8     09 13 32 F9 | 	getword	arg01, arg01, #0
2d9cc     6E 00 00 FF 
2d9d0     00 12 86 F1 | 	sub	arg01, ##56320
2d9d4     00 08 00 FF 
2d9d8     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2d9dc     02 00 00 CF 
2d9e0     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2d9e4     00 FA 05 36 |  if_ae	mov	result1, #0
2d9e8     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2d9ec     09 01 42 F5 | 	or	_var01, arg01
2d9f0     80 00 00 FF 
2d9f4     00 00 06 F1 | 	add	_var01, ##65536
2d9f8     00 FB 01 F6 | 	mov	result1, _var01
2d9fc     12 FA 45 F0 | 	shr	result1, #18
2da00     07 FA 05 F5 | 	and	result1, #7
2da04     F0 16 06 F6 | 	mov	arg03, #240
2da08     FD 16 42 F5 | 	or	arg03, result1
2da0c     0A 17 42 FC | 	wrbyte	arg03, arg02
2da10     01 14 06 F1 | 	add	arg02, #1
2da14     00 FB 01 F6 | 	mov	result1, _var01
2da18     0C FA 45 F0 | 	shr	result1, #12
2da1c     3F FA 05 F5 | 	and	result1, #63
2da20     80 16 06 F6 | 	mov	arg03, #128
2da24     FD 16 42 F5 | 	or	arg03, result1
2da28     0A 17 42 FC | 	wrbyte	arg03, arg02
2da2c     01 14 06 F1 | 	add	arg02, #1
2da30     00 FB 01 F6 | 	mov	result1, _var01
2da34     06 FA 45 F0 | 	shr	result1, #6
2da38     3F FA 05 F5 | 	and	result1, #63
2da3c     80 16 06 F6 | 	mov	arg03, #128
2da40     FD 16 42 F5 | 	or	arg03, result1
2da44     0A 17 42 FC | 	wrbyte	arg03, arg02
2da48     01 14 06 F1 | 	add	arg02, #1
2da4c     3F 00 06 F5 | 	and	_var01, #63
2da50     80 FA 05 F6 | 	mov	result1, #128
2da54     00 FB 41 F5 | 	or	result1, _var01
2da58     0A FB 41 FC | 	wrbyte	result1, arg02
2da5c                 | ' 	chr = (hc | chr) + 0x10000;
2da5c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2da5c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2da5c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2da5c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2da5c                 | ' 	return 4;
2da5c     04 FA 05 F6 | 	mov	result1, #4
2da60                 | _fatfs_cc_put_utf_ret
2da60     2D 00 64 FD | 	ret
2da64                 | 
2da64                 | _fatfs_cc_sync_window
2da64     02 4A 05 F6 | 	mov	COUNT_, #2
2da68     A8 00 A0 FD | 	call	#pushregs_
2da6c     09 27 02 F6 | 	mov	local01, arg01
2da70     00 28 06 F6 | 	mov	local02, #0
2da74     03 26 06 F1 | 	add	local01, #3
2da78     13 FB C9 FA | 	rdbyte	result1, local01 wz
2da7c     03 26 86 F1 | 	sub	local01, #3
2da80     A4 00 90 AD |  if_e	jmp	#LR__4442
2da84     01 26 06 F1 | 	add	local01, #1
2da88     13 13 C2 FA | 	rdbyte	arg01, local01
2da8c     33 26 06 F1 | 	add	local01, #51
2da90     13 15 02 F6 | 	mov	arg02, local01
2da94     04 26 86 F1 | 	sub	local01, #4
2da98     13 17 02 FB | 	rdlong	arg03, local01
2da9c     30 26 86 F1 | 	sub	local01, #48
2daa0     01 18 06 F6 | 	mov	arg04, #1
2daa4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2daa8     00 FA 0D F2 | 	cmp	result1, #0 wz
2daac     74 00 90 5D |  if_ne	jmp	#LR__4440
2dab0     03 26 06 F1 | 	add	local01, #3
2dab4     13 01 48 FC | 	wrbyte	#0, local01
2dab8     2D 26 06 F1 | 	add	local01, #45
2dabc     13 FB 01 FB | 	rdlong	result1, local01
2dac0     0C 26 86 F1 | 	sub	local01, #12
2dac4     13 19 02 FB | 	rdlong	arg04, local01
2dac8     0C FB 81 F1 | 	sub	result1, arg04
2dacc     08 26 86 F1 | 	sub	local01, #8
2dad0     13 19 02 FB | 	rdlong	arg04, local01
2dad4     1C 26 86 F1 | 	sub	local01, #28
2dad8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2dadc     48 00 90 3D |  if_ae	jmp	#LR__4441
2dae0     02 26 06 F1 | 	add	local01, #2
2dae4     13 19 C2 FA | 	rdbyte	arg04, local01
2dae8     02 26 86 F1 | 	sub	local01, #2
2daec     02 18 0E F2 | 	cmp	arg04, #2 wz
2daf0     34 00 90 5D |  if_ne	jmp	#LR__4441
2daf4     01 26 06 F1 | 	add	local01, #1
2daf8     13 13 C2 FA | 	rdbyte	arg01, local01
2dafc     33 26 06 F1 | 	add	local01, #51
2db00     13 15 02 F6 | 	mov	arg02, local01
2db04     04 26 86 F1 | 	sub	local01, #4
2db08     13 17 02 FB | 	rdlong	arg03, local01
2db0c     14 26 86 F1 | 	sub	local01, #20
2db10     13 27 02 FB | 	rdlong	local01, local01
2db14     13 17 02 F1 | 	add	arg03, local01
2db18     01 18 06 F6 | 	mov	arg04, #1
2db1c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2db20     04 00 90 FD | 	jmp	#LR__4441
2db24                 | LR__4440
2db24     01 28 06 F6 | 	mov	local02, #1
2db28                 | LR__4441
2db28                 | LR__4442
2db28                 | ' 			res = FR_DISK_ERR;
2db28                 | ' 		}
2db28                 | ' 	}
2db28                 | ' 	return res;
2db28     14 FB 01 F6 | 	mov	result1, local02
2db2c     A7 F0 03 F6 | 	mov	ptra, fp
2db30     B2 00 A0 FD | 	call	#popregs_
2db34                 | _fatfs_cc_sync_window_ret
2db34     2D 00 64 FD | 	ret
2db38                 | 
2db38                 | _fatfs_cc_move_window
2db38     03 4A 05 F6 | 	mov	COUNT_, #3
2db3c     A8 00 A0 FD | 	call	#pushregs_
2db40     09 27 02 F6 | 	mov	local01, arg01
2db44     0A 29 02 F6 | 	mov	local02, arg02
2db48     00 2A 06 F6 | 	mov	local03, #0
2db4c     30 26 06 F1 | 	add	local01, #48
2db50     13 19 02 FB | 	rdlong	arg04, local01
2db54     30 26 86 F1 | 	sub	local01, #48
2db58     0C 29 0A F2 | 	cmp	local02, arg04 wz
2db5c     40 00 90 AD |  if_e	jmp	#LR__4451
2db60     13 13 02 F6 | 	mov	arg01, local01
2db64     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2db68     FD 2A 0A F6 | 	mov	local03, result1 wz
2db6c     30 00 90 5D |  if_ne	jmp	#LR__4450
2db70     01 26 06 F1 | 	add	local01, #1
2db74     13 13 C2 FA | 	rdbyte	arg01, local01
2db78     33 26 06 F1 | 	add	local01, #51
2db7c     13 15 02 F6 | 	mov	arg02, local01
2db80     14 17 02 F6 | 	mov	arg03, local02
2db84     01 18 06 F6 | 	mov	arg04, #1
2db88     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2db8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2db90     01 28 66 56 |  if_ne	neg	local02, #1
2db94     01 2A 06 56 |  if_ne	mov	local03, #1
2db98     04 26 86 F1 | 	sub	local01, #4
2db9c     13 29 62 FC | 	wrlong	local02, local01
2dba0                 | LR__4450
2dba0                 | LR__4451
2dba0                 | ' 				sect = (LBA_t)0 - 1;
2dba0                 | ' 				res = FR_DISK_ERR;
2dba0                 | ' 			}
2dba0                 | ' 			fs->winsect = sect;
2dba0                 | ' 		}
2dba0                 | ' 	}
2dba0                 | ' 	return res;
2dba0     15 FB 01 F6 | 	mov	result1, local03
2dba4     A7 F0 03 F6 | 	mov	ptra, fp
2dba8     B2 00 A0 FD | 	call	#popregs_
2dbac                 | _fatfs_cc_move_window_ret
2dbac     2D 00 64 FD | 	ret
2dbb0                 | 
2dbb0                 | _fatfs_cc_sync_fs
2dbb0     02 4A 05 F6 | 	mov	COUNT_, #2
2dbb4     A8 00 A0 FD | 	call	#pushregs_
2dbb8     09 27 02 F6 | 	mov	local01, arg01
2dbbc     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2dbc0     FD 28 0A F6 | 	mov	local02, result1 wz
2dbc4     D8 00 90 5D |  if_ne	jmp	#LR__4461
2dbc8     13 19 C2 FA | 	rdbyte	arg04, local01
2dbcc     03 18 0E F2 | 	cmp	arg04, #3 wz
2dbd0     04 26 06 A1 |  if_e	add	local01, #4
2dbd4     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2dbd8     04 26 86 A1 |  if_e	sub	local01, #4
2dbdc     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2dbe0     A0 00 90 5D |  if_ne	jmp	#LR__4460
2dbe4     34 26 06 F1 | 	add	local01, #52
2dbe8     13 13 02 F6 | 	mov	arg01, local01
2dbec     00 14 06 F6 | 	mov	arg02, #0
2dbf0     09 16 C6 F9 | 	decod	arg03, #9
2dbf4     98 00 A0 FD | 	call	#\builtin_bytefill_
2dbf8     13 13 02 F6 | 	mov	arg01, local01
2dbfc     FE 13 06 F1 | 	add	arg01, #510
2dc00     55 00 80 FF 
2dc04     09 AB 58 FC | 	wrword	##43605, arg01
2dc08     A9 B0 A0 FF 
2dc0c     13 A5 68 FC | 	wrlong	##1096897106, local01
2dc10     13 13 02 F6 | 	mov	arg01, local01
2dc14     E4 13 06 F1 | 	add	arg01, #484
2dc18     B9 A0 B0 FF 
2dc1c     09 E5 68 FC | 	wrlong	##1631679090, arg01
2dc20     13 13 02 F6 | 	mov	arg01, local01
2dc24     E8 13 06 F1 | 	add	arg01, #488
2dc28     20 26 86 F1 | 	sub	local01, #32
2dc2c     13 15 02 FB | 	rdlong	arg02, local01
2dc30     09 15 62 FC | 	wrlong	arg02, arg01
2dc34     20 26 06 F1 | 	add	local01, #32
2dc38     13 13 02 F6 | 	mov	arg01, local01
2dc3c     EC 13 06 F1 | 	add	arg01, #492
2dc40     24 26 86 F1 | 	sub	local01, #36
2dc44     13 15 02 FB | 	rdlong	arg02, local01
2dc48     09 15 62 FC | 	wrlong	arg02, arg01
2dc4c     10 26 06 F1 | 	add	local01, #16
2dc50     13 17 02 FB | 	rdlong	arg03, local01
2dc54     01 16 06 F1 | 	add	arg03, #1
2dc58     10 26 06 F1 | 	add	local01, #16
2dc5c     13 17 62 FC | 	wrlong	arg03, local01
2dc60     2F 26 86 F1 | 	sub	local01, #47
2dc64     13 13 C2 FA | 	rdbyte	arg01, local01
2dc68     33 26 06 F1 | 	add	local01, #51
2dc6c     13 15 02 F6 | 	mov	arg02, local01
2dc70     01 18 06 F6 | 	mov	arg04, #1
2dc74     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2dc78     30 26 86 F1 | 	sub	local01, #48
2dc7c     13 01 48 FC | 	wrbyte	#0, local01
2dc80     04 26 86 F1 | 	sub	local01, #4
2dc84                 | LR__4460
2dc84     01 26 06 F1 | 	add	local01, #1
2dc88     13 13 C2 FA | 	rdbyte	arg01, local01
2dc8c     00 14 06 F6 | 	mov	arg02, #0
2dc90     00 16 06 F6 | 	mov	arg03, #0
2dc94     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2dc98     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc9c     01 28 06 56 |  if_ne	mov	local02, #1
2dca0                 | LR__4461
2dca0                 | ' 	}
2dca0                 | ' 
2dca0                 | ' 	return res;
2dca0     14 FB 01 F6 | 	mov	result1, local02
2dca4     A7 F0 03 F6 | 	mov	ptra, fp
2dca8     B2 00 A0 FD | 	call	#popregs_
2dcac                 | _fatfs_cc_sync_fs_ret
2dcac     2D 00 64 FD | 	ret
2dcb0                 | 
2dcb0                 | _fatfs_cc_clst2sect
2dcb0     02 14 86 F1 | 	sub	arg02, #2
2dcb4     18 12 06 F1 | 	add	arg01, #24
2dcb8     09 01 02 FB | 	rdlong	_var01, arg01
2dcbc     18 12 86 F1 | 	sub	arg01, #24
2dcc0     02 00 86 F1 | 	sub	_var01, #2
2dcc4     00 15 12 F2 | 	cmp	arg02, _var01 wc
2dcc8     00 FA 05 36 |  if_ae	mov	result1, #0
2dccc     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2dcd0     0A 12 06 F1 | 	add	arg01, #10
2dcd4     09 01 E2 FA | 	rdword	_var01, arg01
2dcd8     0A 01 02 FD | 	qmul	_var01, arg02
2dcdc                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2dcdc     22 12 06 F1 | 	add	arg01, #34
2dce0     09 FB 01 FB | 	rdlong	result1, arg01
2dce4     18 00 62 FD | 	getqx	_var01
2dce8     00 FB 01 F1 | 	add	result1, _var01
2dcec                 | _fatfs_cc_clst2sect_ret
2dcec     2D 00 64 FD | 	ret
2dcf0                 | 
2dcf0                 | _fatfs_cc_get_fat
2dcf0     07 4A 05 F6 | 	mov	COUNT_, #7
2dcf4     A8 00 A0 FD | 	call	#pushregs_
2dcf8     0A 27 02 F6 | 	mov	local01, arg02
2dcfc     09 29 02 FB | 	rdlong	local02, arg01
2dd00     02 26 16 F2 | 	cmp	local01, #2 wc
2dd04     14 00 90 CD |  if_b	jmp	#LR__4470
2dd08     18 28 06 F1 | 	add	local02, #24
2dd0c     14 2B 02 FB | 	rdlong	local03, local02
2dd10     18 28 86 F1 | 	sub	local02, #24
2dd14     15 27 12 F2 | 	cmp	local01, local03 wc
2dd18     08 00 90 CD |  if_b	jmp	#LR__4471
2dd1c                 | LR__4470
2dd1c     01 2C 06 F6 | 	mov	local04, #1
2dd20     60 01 90 FD | 	jmp	#LR__4478
2dd24                 | LR__4471
2dd24     01 2C 66 F6 | 	neg	local04, #1
2dd28                 | ' 		val = 0xFFFFFFFF;
2dd28                 | ' 
2dd28                 | ' 		switch (fs->fs_type) {
2dd28     14 2F C2 FA | 	rdbyte	local05, local02
2dd2c     01 2E 86 F1 | 	sub	local05, #1
2dd30     03 2E 26 F3 | 	fle	local05, #3
2dd34     30 2E 62 FD | 	jmprel	local05
2dd38                 | LR__4472
2dd38     0C 00 90 FD | 	jmp	#LR__4473
2dd3c     B8 00 90 FD | 	jmp	#LR__4474
2dd40     F8 00 90 FD | 	jmp	#LR__4475
2dd44     38 01 90 FD | 	jmp	#LR__4476
2dd48                 | LR__4473
2dd48     13 2F 02 F6 | 	mov	local05, local01
2dd4c     13 13 02 F6 | 	mov	arg01, local01
2dd50     01 12 46 F0 | 	shr	arg01, #1
2dd54     09 2F 02 F1 | 	add	local05, arg01
2dd58     14 13 02 F6 | 	mov	arg01, local02
2dd5c     17 31 02 F6 | 	mov	local06, local05
2dd60     09 30 46 F0 | 	shr	local06, #9
2dd64     24 28 06 F1 | 	add	local02, #36
2dd68     14 15 02 FB | 	rdlong	arg02, local02
2dd6c     24 28 86 F1 | 	sub	local02, #36
2dd70     18 15 02 F1 | 	add	arg02, local06
2dd74     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2dd78     00 FA 0D F2 | 	cmp	result1, #0 wz
2dd7c     04 01 90 5D |  if_ne	jmp	#LR__4477
2dd80     17 31 02 F6 | 	mov	local06, local05
2dd84     FF 31 06 F5 | 	and	local06, #511
2dd88     34 28 06 F1 | 	add	local02, #52
2dd8c     14 31 02 F1 | 	add	local06, local02
2dd90     18 33 C2 FA | 	rdbyte	local07, local06
2dd94     34 28 86 F1 | 	sub	local02, #52
2dd98     14 13 02 F6 | 	mov	arg01, local02
2dd9c     01 2E 06 F1 | 	add	local05, #1
2dda0     17 31 02 F6 | 	mov	local06, local05
2dda4     09 30 46 F0 | 	shr	local06, #9
2dda8     24 28 06 F1 | 	add	local02, #36
2ddac     14 15 02 FB | 	rdlong	arg02, local02
2ddb0     24 28 86 F1 | 	sub	local02, #36
2ddb4     18 15 02 F1 | 	add	arg02, local06
2ddb8     7C FD BF FD | 	call	#_fatfs_cc_move_window
2ddbc     00 FA 0D F2 | 	cmp	result1, #0 wz
2ddc0     C0 00 90 5D |  if_ne	jmp	#LR__4477
2ddc4     FF 2F 06 F5 | 	and	local05, #511
2ddc8     34 28 06 F1 | 	add	local02, #52
2ddcc     14 2F 02 F1 | 	add	local05, local02
2ddd0     17 31 C2 FA | 	rdbyte	local06, local05
2ddd4     08 30 66 F0 | 	shl	local06, #8
2ddd8     18 33 42 F5 | 	or	local07, local06
2dddc     01 26 CE F7 | 	test	local01, #1 wz
2dde0     04 32 46 50 |  if_ne	shr	local07, #4
2dde4     19 2B 02 56 |  if_ne	mov	local03, local07
2dde8     0B 32 46 A7 |  if_e	zerox	local07, #11
2ddec     19 2B 02 A6 |  if_e	mov	local03, local07
2ddf0     15 2D 02 F6 | 	mov	local04, local03
2ddf4                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2ddf4                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2ddf4                 | ' 			break;
2ddf4     8C 00 90 FD | 	jmp	#LR__4477
2ddf8                 | LR__4474
2ddf8     14 13 02 F6 | 	mov	arg01, local02
2ddfc     13 31 02 F6 | 	mov	local06, local01
2de00     08 30 46 F0 | 	shr	local06, #8
2de04     24 28 06 F1 | 	add	local02, #36
2de08     14 15 02 FB | 	rdlong	arg02, local02
2de0c     24 28 86 F1 | 	sub	local02, #36
2de10     18 15 02 F1 | 	add	arg02, local06
2de14     20 FD BF FD | 	call	#_fatfs_cc_move_window
2de18     00 FA 0D F2 | 	cmp	result1, #0 wz
2de1c     64 00 90 5D |  if_ne	jmp	#LR__4477
2de20     34 28 06 F1 | 	add	local02, #52
2de24     01 26 66 F0 | 	shl	local01, #1
2de28     FF 27 06 F5 | 	and	local01, #511
2de2c     13 29 02 F1 | 	add	local02, local01
2de30                 | ' {
2de30                 | ' 
2de30                 | ' 	return *((WORD*)ptr);
2de30     14 FB E1 FA | 	rdword	result1, local02
2de34     FD 2C 32 F9 | 	getword	local04, result1, #0
2de38                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2de38                 | ' 			break;
2de38     48 00 90 FD | 	jmp	#LR__4477
2de3c                 | LR__4475
2de3c     14 13 02 F6 | 	mov	arg01, local02
2de40     13 31 02 F6 | 	mov	local06, local01
2de44     07 30 46 F0 | 	shr	local06, #7
2de48     24 28 06 F1 | 	add	local02, #36
2de4c     14 15 02 FB | 	rdlong	arg02, local02
2de50     24 28 86 F1 | 	sub	local02, #36
2de54     18 15 02 F1 | 	add	arg02, local06
2de58     DC FC BF FD | 	call	#_fatfs_cc_move_window
2de5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2de60     20 00 90 5D |  if_ne	jmp	#LR__4477
2de64     34 28 06 F1 | 	add	local02, #52
2de68     02 26 66 F0 | 	shl	local01, #2
2de6c     FF 27 06 F5 | 	and	local01, #511
2de70     13 29 02 F1 | 	add	local02, local01
2de74                 | ' {
2de74                 | ' 
2de74                 | ' 	return *((DWORD*)ptr);
2de74     14 2D 02 FB | 	rdlong	local04, local02
2de78     7C 2C 06 F4 | 	bitl	local04, #124
2de7c                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2de7c                 | ' 			break;
2de7c     04 00 90 FD | 	jmp	#LR__4477
2de80                 | LR__4476
2de80     01 2C 06 F6 | 	mov	local04, #1
2de84                 | LR__4477
2de84                 | LR__4478
2de84                 | ' 			val = 1;
2de84                 | ' 		}
2de84                 | ' 	}
2de84                 | ' 
2de84                 | ' 	return val;
2de84     16 FB 01 F6 | 	mov	result1, local04
2de88     A7 F0 03 F6 | 	mov	ptra, fp
2de8c     B2 00 A0 FD | 	call	#popregs_
2de90                 | _fatfs_cc_get_fat_ret
2de90     2D 00 64 FD | 	ret
2de94                 | 
2de94                 | _fatfs_cc_put_fat
2de94     08 4A 05 F6 | 	mov	COUNT_, #8
2de98     A8 00 A0 FD | 	call	#pushregs_
2de9c     09 27 02 F6 | 	mov	local01, arg01
2dea0     0A 29 02 F6 | 	mov	local02, arg02
2dea4     0B 2B 02 F6 | 	mov	local03, arg03
2dea8     02 2C 06 F6 | 	mov	local04, #2
2deac     02 28 16 F2 | 	cmp	local02, #2 wc
2deb0     E0 01 90 CD |  if_b	jmp	#LR__4487
2deb4     18 26 06 F1 | 	add	local01, #24
2deb8     13 2F 02 FB | 	rdlong	local05, local01
2debc     18 26 86 F1 | 	sub	local01, #24
2dec0     17 29 12 F2 | 	cmp	local02, local05 wc
2dec4     CC 01 90 3D |  if_ae	jmp	#LR__4487
2dec8                 | ' 		switch (fs->fs_type) {
2dec8     13 31 C2 FA | 	rdbyte	local06, local01
2decc     01 30 86 F1 | 	sub	local06, #1
2ded0     03 30 26 F3 | 	fle	local06, #3
2ded4     30 30 62 FD | 	jmprel	local06
2ded8                 | LR__4480
2ded8     0C 00 90 FD | 	jmp	#LR__4481
2dedc     F8 00 90 FD | 	jmp	#LR__4484
2dee0     40 01 90 FD | 	jmp	#LR__4485
2dee4     AC 01 90 FD | 	jmp	#LR__4486
2dee8                 | LR__4481
2dee8     14 33 02 F6 | 	mov	local07, local02
2deec     14 2F 02 F6 | 	mov	local05, local02
2def0     01 2E 46 F0 | 	shr	local05, #1
2def4     17 33 02 F1 | 	add	local07, local05
2def8     13 13 02 F6 | 	mov	arg01, local01
2defc     19 31 02 F6 | 	mov	local06, local07
2df00     09 30 46 F0 | 	shr	local06, #9
2df04     24 26 06 F1 | 	add	local01, #36
2df08     13 15 02 FB | 	rdlong	arg02, local01
2df0c     24 26 86 F1 | 	sub	local01, #36
2df10     18 15 02 F1 | 	add	arg02, local06
2df14     20 FC BF FD | 	call	#_fatfs_cc_move_window
2df18     FD 2C 0A F6 | 	mov	local04, result1 wz
2df1c     74 01 90 5D |  if_ne	jmp	#LR__4486
2df20     34 26 06 F1 | 	add	local01, #52
2df24     13 35 02 F6 | 	mov	local08, local01
2df28     19 2F 02 F6 | 	mov	local05, local07
2df2c     FF 2F 06 F5 | 	and	local05, #511
2df30     17 35 02 F1 | 	add	local08, local05
2df34     01 28 CE F7 | 	test	local02, #1 wz
2df38     34 26 86 F1 | 	sub	local01, #52
2df3c     01 32 06 F1 | 	add	local07, #1
2df40     18 00 90 AD |  if_e	jmp	#LR__4482
2df44     1A 2F C2 FA | 	rdbyte	local05, local08
2df48     17 2F 42 F8 | 	getnib	local05, local05, #0
2df4c     15 31 E2 F8 | 	getbyte	local06, local03, #0
2df50     04 30 66 F0 | 	shl	local06, #4
2df54     18 2F 42 F5 | 	or	local05, local06
2df58     04 00 90 FD | 	jmp	#LR__4483
2df5c                 | LR__4482
2df5c     15 2F 02 F6 | 	mov	local05, local03
2df60                 | LR__4483
2df60     1A 2F 42 FC | 	wrbyte	local05, local08
2df64     03 26 06 F1 | 	add	local01, #3
2df68     13 03 48 FC | 	wrbyte	#1, local01
2df6c     03 26 86 F1 | 	sub	local01, #3
2df70     13 13 02 F6 | 	mov	arg01, local01
2df74     19 35 02 F6 | 	mov	local08, local07
2df78     09 34 46 F0 | 	shr	local08, #9
2df7c     24 26 06 F1 | 	add	local01, #36
2df80     13 15 02 FB | 	rdlong	arg02, local01
2df84     24 26 86 F1 | 	sub	local01, #36
2df88     1A 15 02 F1 | 	add	arg02, local08
2df8c     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2df90     FD 2C 0A F6 | 	mov	local04, result1 wz
2df94     FC 00 90 5D |  if_ne	jmp	#LR__4486
2df98     34 26 06 F1 | 	add	local01, #52
2df9c     13 35 02 F6 | 	mov	local08, local01
2dfa0     FF 33 06 F5 | 	and	local07, #511
2dfa4     19 35 02 F1 | 	add	local08, local07
2dfa8     01 28 CE F7 | 	test	local02, #1 wz
2dfac     04 2A 46 50 |  if_ne	shr	local03, #4
2dfb0     15 2F 02 56 |  if_ne	mov	local05, local03
2dfb4     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2dfb8     F0 2E 06 A5 |  if_e	and	local05, #240
2dfbc     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2dfc0     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2dfc4     15 2F 42 A5 |  if_e	or	local05, local03
2dfc8     1A 2F 42 FC | 	wrbyte	local05, local08
2dfcc     31 26 86 F1 | 	sub	local01, #49
2dfd0     13 03 48 FC | 	wrbyte	#1, local01
2dfd4                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2dfd4                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2dfd4                 | ' 			fs->wflag = 1;
2dfd4                 | ' 			break;
2dfd4     BC 00 90 FD | 	jmp	#LR__4486
2dfd8                 | LR__4484
2dfd8     13 13 02 F6 | 	mov	arg01, local01
2dfdc     14 35 02 F6 | 	mov	local08, local02
2dfe0     08 34 46 F0 | 	shr	local08, #8
2dfe4     24 26 06 F1 | 	add	local01, #36
2dfe8     13 15 02 FB | 	rdlong	arg02, local01
2dfec     24 26 86 F1 | 	sub	local01, #36
2dff0     1A 15 02 F1 | 	add	arg02, local08
2dff4     40 FB BF FD | 	call	#_fatfs_cc_move_window
2dff8     FD 2C 0A F6 | 	mov	local04, result1 wz
2dffc     94 00 90 5D |  if_ne	jmp	#LR__4486
2e000     34 26 06 F1 | 	add	local01, #52
2e004     13 13 02 F6 | 	mov	arg01, local01
2e008     01 28 66 F0 | 	shl	local02, #1
2e00c     FF 29 06 F5 | 	and	local02, #511
2e010     14 13 02 F1 | 	add	arg01, local02
2e014     09 2B 52 FC | 	wrword	local03, arg01
2e018     31 26 86 F1 | 	sub	local01, #49
2e01c     13 03 48 FC | 	wrbyte	#1, local01
2e020                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2e020                 | ' 			fs->wflag = 1;
2e020                 | ' 			break;
2e020     70 00 90 FD | 	jmp	#LR__4486
2e024                 | LR__4485
2e024     13 13 02 F6 | 	mov	arg01, local01
2e028     14 35 02 F6 | 	mov	local08, local02
2e02c     07 34 46 F0 | 	shr	local08, #7
2e030     24 26 06 F1 | 	add	local01, #36
2e034     13 15 02 FB | 	rdlong	arg02, local01
2e038     24 26 86 F1 | 	sub	local01, #36
2e03c     1A 15 02 F1 | 	add	arg02, local08
2e040     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2e044     FD 2C 0A F6 | 	mov	local04, result1 wz
2e048     48 00 90 5D |  if_ne	jmp	#LR__4486
2e04c     7C 2A 06 F4 | 	bitl	local03, #124
2e050     34 26 06 F1 | 	add	local01, #52
2e054     14 35 02 F6 | 	mov	local08, local02
2e058     02 34 66 F0 | 	shl	local08, #2
2e05c     FF 35 06 F5 | 	and	local08, #511
2e060     13 13 02 F6 | 	mov	arg01, local01
2e064     1A 13 02 F1 | 	add	arg01, local08
2e068                 | ' {
2e068                 | ' 
2e068                 | ' 	return *((DWORD*)ptr);
2e068     09 35 02 FB | 	rdlong	local08, arg01
2e06c     00 00 78 FF 
2e070     00 34 06 F5 | 	and	local08, ##-268435456
2e074     1A 2B 42 F5 | 	or	local03, local08
2e078     13 13 02 F6 | 	mov	arg01, local01
2e07c     02 28 66 F0 | 	shl	local02, #2
2e080     FF 29 06 F5 | 	and	local02, #511
2e084     14 13 02 F1 | 	add	arg01, local02
2e088     09 2B 62 FC | 	wrlong	local03, arg01
2e08c     31 26 86 F1 | 	sub	local01, #49
2e090     13 03 48 FC | 	wrbyte	#1, local01
2e094                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2e094                 | ' 			}
2e094                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2e094                 | ' 			fs->wflag = 1;
2e094                 | ' 			break;
2e094                 | LR__4486
2e094                 | LR__4487
2e094                 | ' 		}
2e094                 | ' 	}
2e094                 | ' 	return res;
2e094     16 FB 01 F6 | 	mov	result1, local04
2e098     A7 F0 03 F6 | 	mov	ptra, fp
2e09c     B2 00 A0 FD | 	call	#popregs_
2e0a0                 | _fatfs_cc_put_fat_ret
2e0a0     2D 00 64 FD | 	ret
2e0a4                 | 
2e0a4                 | _fatfs_cc_remove_chain
2e0a4     05 4A 05 F6 | 	mov	COUNT_, #5
2e0a8     A8 00 A0 FD | 	call	#pushregs_
2e0ac     09 27 02 F6 | 	mov	local01, arg01
2e0b0     0A 29 02 F6 | 	mov	local02, arg02
2e0b4     0B 2B 02 F6 | 	mov	local03, arg03
2e0b8     13 2D 02 FB | 	rdlong	local04, local01
2e0bc     02 28 16 F2 | 	cmp	local02, #2 wc
2e0c0     14 00 90 CD |  if_b	jmp	#LR__4490
2e0c4     18 2C 06 F1 | 	add	local04, #24
2e0c8     16 FB 01 FB | 	rdlong	result1, local04
2e0cc     18 2C 86 F1 | 	sub	local04, #24
2e0d0     FD 28 12 F2 | 	cmp	local02, result1 wc
2e0d4     08 00 90 CD |  if_b	jmp	#LR__4491
2e0d8                 | LR__4490
2e0d8     02 FA 05 F6 | 	mov	result1, #2
2e0dc     CC 00 90 FD | 	jmp	#LR__4496
2e0e0                 | LR__4491
2e0e0     00 2A 0E F2 | 	cmp	local03, #0 wz
2e0e4     18 00 90 AD |  if_e	jmp	#LR__4492
2e0e8     15 15 02 F6 | 	mov	arg02, local03
2e0ec     16 13 02 F6 | 	mov	arg01, local04
2e0f0     01 16 66 F6 | 	neg	arg03, #1
2e0f4     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2e0f8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e0fc     AC 00 90 5D |  if_ne	jmp	#LR__4496
2e100                 | LR__4492
2e100                 | ' 	}
2e100                 | ' 
2e100                 | ' 
2e100                 | ' 	do {
2e100                 | LR__4493
2e100     14 15 02 F6 | 	mov	arg02, local02
2e104     13 13 02 F6 | 	mov	arg01, local01
2e108     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2e10c     FD 2E 0A F6 | 	mov	local05, result1 wz
2e110     94 00 90 AD |  if_e	jmp	#LR__4495
2e114     01 2E 0E F2 | 	cmp	local05, #1 wz
2e118     02 FA 05 A6 |  if_e	mov	result1, #2
2e11c     8C 00 90 AD |  if_e	jmp	#LR__4496
2e120     FF FF 7F FF 
2e124     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e128     01 FA 05 A6 |  if_e	mov	result1, #1
2e12c     7C 00 90 AD |  if_e	jmp	#LR__4496
2e130     14 15 02 F6 | 	mov	arg02, local02
2e134     16 13 02 F6 | 	mov	arg01, local04
2e138     00 16 06 F6 | 	mov	arg03, #0
2e13c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2e140     FD 2A 0A F6 | 	mov	local03, result1 wz
2e144     15 FB 01 56 |  if_ne	mov	result1, local03
2e148     60 00 90 5D |  if_ne	jmp	#LR__4496
2e14c     18 2C 06 F1 | 	add	local04, #24
2e150     16 2B 02 FB | 	rdlong	local03, local04
2e154     02 2A 86 F1 | 	sub	local03, #2
2e158     04 2C 86 F1 | 	sub	local04, #4
2e15c     16 29 02 FB | 	rdlong	local02, local04
2e160     14 2C 86 F1 | 	sub	local04, #20
2e164     15 29 12 F2 | 	cmp	local02, local03 wc
2e168     24 00 90 3D |  if_ae	jmp	#LR__4494
2e16c     14 2C 06 F1 | 	add	local04, #20
2e170     16 2B 02 FB | 	rdlong	local03, local04
2e174     01 2A 06 F1 | 	add	local03, #1
2e178     16 2B 62 FC | 	wrlong	local03, local04
2e17c     10 2C 86 F1 | 	sub	local04, #16
2e180     16 2B C2 FA | 	rdbyte	local03, local04
2e184     01 2A 46 F5 | 	or	local03, #1
2e188     16 2B 42 FC | 	wrbyte	local03, local04
2e18c     04 2C 86 F1 | 	sub	local04, #4
2e190                 | LR__4494
2e190     17 29 02 F6 | 	mov	local02, local05
2e194     18 2C 06 F1 | 	add	local04, #24
2e198     16 2F 02 FB | 	rdlong	local05, local04
2e19c     18 2C 86 F1 | 	sub	local04, #24
2e1a0     17 29 12 F2 | 	cmp	local02, local05 wc
2e1a4     58 FF 9F CD |  if_b	jmp	#LR__4493
2e1a8                 | LR__4495
2e1a8                 | ' #line 1500 "ff.c"
2e1a8                 | ' 	return FR_OK;
2e1a8     00 FA 05 F6 | 	mov	result1, #0
2e1ac                 | LR__4496
2e1ac     A7 F0 03 F6 | 	mov	ptra, fp
2e1b0     B2 00 A0 FD | 	call	#popregs_
2e1b4                 | _fatfs_cc_remove_chain_ret
2e1b4     2D 00 64 FD | 	ret
2e1b8                 | 
2e1b8                 | _fatfs_cc_create_chain
2e1b8     09 4A 05 F6 | 	mov	COUNT_, #9
2e1bc     A8 00 A0 FD | 	call	#pushregs_
2e1c0     09 27 02 F6 | 	mov	local01, arg01
2e1c4     0A 29 0A F6 | 	mov	local02, arg02 wz
2e1c8     13 2B 02 FB | 	rdlong	local03, local01
2e1cc     28 00 90 5D |  if_ne	jmp	#LR__4500
2e1d0     10 2A 06 F1 | 	add	local03, #16
2e1d4     15 2D 0A FB | 	rdlong	local04, local03 wz
2e1d8     10 2A 86 F1 | 	sub	local03, #16
2e1dc     18 2A 06 51 |  if_ne	add	local03, #24
2e1e0     15 2F 02 5B |  if_ne	rdlong	local05, local03
2e1e4     18 2A 86 51 |  if_ne	sub	local03, #24
2e1e8     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2e1ec     50 00 90 4D |  if_c_and_nz	jmp	#LR__4501
2e1f0     01 2C 06 F6 | 	mov	local04, #1
2e1f4     48 00 90 FD | 	jmp	#LR__4501
2e1f8                 | LR__4500
2e1f8     14 15 02 F6 | 	mov	arg02, local02
2e1fc     13 13 02 F6 | 	mov	arg01, local01
2e200     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2e204     FD 2C 02 F6 | 	mov	local04, result1
2e208     02 2C 16 F2 | 	cmp	local04, #2 wc
2e20c     01 FA 05 C6 |  if_b	mov	result1, #1
2e210     BC 01 90 CD |  if_b	jmp	#LR__4511
2e214     FF FF 7F FF 
2e218     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e21c     16 FB 01 A6 |  if_e	mov	result1, local04
2e220     AC 01 90 AD |  if_e	jmp	#LR__4511
2e224     18 2A 06 F1 | 	add	local03, #24
2e228     15 2F 02 FB | 	rdlong	local05, local03
2e22c     18 2A 86 F1 | 	sub	local03, #24
2e230     17 2D 12 F2 | 	cmp	local04, local05 wc
2e234     16 FB 01 C6 |  if_b	mov	result1, local04
2e238     94 01 90 CD |  if_b	jmp	#LR__4511
2e23c     14 2D 02 F6 | 	mov	local04, local02
2e240                 | LR__4501
2e240     14 2A 06 F1 | 	add	local03, #20
2e244     15 2F 0A FB | 	rdlong	local05, local03 wz
2e248     14 2A 86 F1 | 	sub	local03, #20
2e24c     00 FA 05 A6 |  if_e	mov	result1, #0
2e250     7C 01 90 AD |  if_e	jmp	#LR__4511
2e254     00 30 06 F6 | 	mov	local06, #0
2e258     14 2D 0A F2 | 	cmp	local04, local02 wz
2e25c     74 00 90 5D |  if_ne	jmp	#LR__4504
2e260     16 31 02 F6 | 	mov	local06, local04
2e264     01 30 06 F1 | 	add	local06, #1
2e268     18 2A 06 F1 | 	add	local03, #24
2e26c     15 2F 02 FB | 	rdlong	local05, local03
2e270     18 2A 86 F1 | 	sub	local03, #24
2e274     17 31 12 F2 | 	cmp	local06, local05 wc
2e278     02 30 06 36 |  if_ae	mov	local06, #2
2e27c     18 15 02 F6 | 	mov	arg02, local06
2e280     13 13 02 F6 | 	mov	arg01, local01
2e284     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2e288     FD 2E 02 F6 | 	mov	local05, result1
2e28c     01 2E 0E F2 | 	cmp	local05, #1 wz
2e290     FF FF 7F 5F 
2e294     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2e298     17 FB 01 A6 |  if_e	mov	result1, local05
2e29c     30 01 90 AD |  if_e	jmp	#LR__4511
2e2a0     00 2E 0E F2 | 	cmp	local05, #0 wz
2e2a4     2C 00 90 AD |  if_e	jmp	#LR__4503
2e2a8     10 2A 06 F1 | 	add	local03, #16
2e2ac     15 33 02 FB | 	rdlong	local07, local03
2e2b0     10 2A 86 F1 | 	sub	local03, #16
2e2b4     02 32 16 F2 | 	cmp	local07, #2 wc
2e2b8     14 00 90 CD |  if_b	jmp	#LR__4502
2e2bc     18 2A 06 F1 | 	add	local03, #24
2e2c0     15 2F 02 FB | 	rdlong	local05, local03
2e2c4     18 2A 86 F1 | 	sub	local03, #24
2e2c8     17 33 12 F2 | 	cmp	local07, local05 wc
2e2cc     19 2D 02 C6 |  if_b	mov	local04, local07
2e2d0                 | LR__4502
2e2d0     00 30 06 F6 | 	mov	local06, #0
2e2d4                 | LR__4503
2e2d4                 | LR__4504
2e2d4     00 30 0E F2 | 	cmp	local06, #0 wz
2e2d8     60 00 90 5D |  if_ne	jmp	#LR__4507
2e2dc     16 31 02 F6 | 	mov	local06, local04
2e2e0                 | ' 			ncl = scl;
2e2e0                 | ' 			for (;;) {
2e2e0                 | LR__4505
2e2e0     01 30 06 F1 | 	add	local06, #1
2e2e4     18 2A 06 F1 | 	add	local03, #24
2e2e8     15 2F 02 FB | 	rdlong	local05, local03
2e2ec     18 2A 86 F1 | 	sub	local03, #24
2e2f0     17 31 12 F2 | 	cmp	local06, local05 wc
2e2f4     02 30 06 36 |  if_ae	mov	local06, #2
2e2f8     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2e2fc     00 FA 05 16 |  if_a	mov	result1, #0
2e300     CC 00 90 1D |  if_a	jmp	#LR__4511
2e304     18 15 02 F6 | 	mov	arg02, local06
2e308     13 13 02 F6 | 	mov	arg01, local01
2e30c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2e310     FD 32 0A F6 | 	mov	local07, result1 wz
2e314     24 00 90 AD |  if_e	jmp	#LR__4506
2e318     01 32 0E F2 | 	cmp	local07, #1 wz
2e31c     FF FF 7F 5F 
2e320     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2e324     19 FB 01 A6 |  if_e	mov	result1, local07
2e328     A4 00 90 AD |  if_e	jmp	#LR__4511
2e32c     16 31 0A F2 | 	cmp	local06, local04 wz
2e330     00 FA 05 A6 |  if_e	mov	result1, #0
2e334     98 00 90 AD |  if_e	jmp	#LR__4511
2e338     A4 FF 9F FD | 	jmp	#LR__4505
2e33c                 | LR__4506
2e33c                 | LR__4507
2e33c     15 13 02 F6 | 	mov	arg01, local03
2e340     18 15 02 F6 | 	mov	arg02, local06
2e344     01 16 66 F6 | 	neg	arg03, #1
2e348     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2e34c     FD 34 0A F6 | 	mov	local08, result1 wz
2e350     1C 00 90 5D |  if_ne	jmp	#LR__4508
2e354     00 28 0E F2 | 	cmp	local02, #0 wz
2e358     14 00 90 AD |  if_e	jmp	#LR__4508
2e35c     15 13 02 F6 | 	mov	arg01, local03
2e360     14 15 02 F6 | 	mov	arg02, local02
2e364     18 17 02 F6 | 	mov	arg03, local06
2e368     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2e36c     FD 34 02 F6 | 	mov	local08, result1
2e370                 | LR__4508
2e370     00 34 0E F2 | 	cmp	local08, #0 wz
2e374     4C 00 90 5D |  if_ne	jmp	#LR__4509
2e378     10 2A 06 F1 | 	add	local03, #16
2e37c     15 31 62 FC | 	wrlong	local06, local03
2e380     08 2A 06 F1 | 	add	local03, #8
2e384     15 2F 02 FB | 	rdlong	local05, local03
2e388     02 2E 86 F1 | 	sub	local05, #2
2e38c     04 2A 86 F1 | 	sub	local03, #4
2e390     15 37 02 FB | 	rdlong	local09, local03
2e394     14 2A 86 F1 | 	sub	local03, #20
2e398     17 37 1A F2 | 	cmp	local09, local05 wcz
2e39c     14 2A 06 E1 |  if_be	add	local03, #20
2e3a0     15 37 02 EB |  if_be	rdlong	local09, local03
2e3a4     01 36 86 E1 |  if_be	sub	local09, #1
2e3a8     15 37 62 EC |  if_be	wrlong	local09, local03
2e3ac     14 2A 86 E1 |  if_be	sub	local03, #20
2e3b0     04 2A 06 F1 | 	add	local03, #4
2e3b4     15 2F C2 FA | 	rdbyte	local05, local03
2e3b8     01 2E 46 F5 | 	or	local05, #1
2e3bc     15 2F 42 FC | 	wrbyte	local05, local03
2e3c0     08 00 90 FD | 	jmp	#LR__4510
2e3c4                 | LR__4509
2e3c4     01 34 0E F2 | 	cmp	local08, #1 wz
2e3c8     01 30 C6 F6 | 	negz	local06, #1
2e3cc                 | LR__4510
2e3cc                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2e3cc                 | ' 	}
2e3cc                 | ' 
2e3cc                 | ' 	return ncl;
2e3cc     18 FB 01 F6 | 	mov	result1, local06
2e3d0                 | LR__4511
2e3d0     A7 F0 03 F6 | 	mov	ptra, fp
2e3d4     B2 00 A0 FD | 	call	#popregs_
2e3d8                 | _fatfs_cc_create_chain_ret
2e3d8     2D 00 64 FD | 	ret
2e3dc                 | 
2e3dc                 | _fatfs_cc_dir_clear
2e3dc     06 4A 05 F6 | 	mov	COUNT_, #6
2e3e0     A8 00 A0 FD | 	call	#pushregs_
2e3e4     09 27 02 F6 | 	mov	local01, arg01
2e3e8     0A 29 02 F6 | 	mov	local02, arg02
2e3ec     13 13 02 F6 | 	mov	arg01, local01
2e3f0     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2e3f4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3f8     01 FA 05 56 |  if_ne	mov	result1, #1
2e3fc     90 00 90 5D |  if_ne	jmp	#LR__4522
2e400     13 13 02 F6 | 	mov	arg01, local01
2e404     14 15 02 F6 | 	mov	arg02, local02
2e408     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2e40c     FD 2A 02 F6 | 	mov	local03, result1
2e410     30 26 06 F1 | 	add	local01, #48
2e414     13 2B 62 FC | 	wrlong	local03, local01
2e418     04 26 06 F1 | 	add	local01, #4
2e41c     13 13 02 F6 | 	mov	arg01, local01
2e420     00 14 06 F6 | 	mov	arg02, #0
2e424     09 16 C6 F9 | 	decod	arg03, #9
2e428     98 00 A0 FD | 	call	#\builtin_bytefill_
2e42c     13 2D 02 F6 | 	mov	local04, local01
2e430                 | ' #line 1667 "ff.c"
2e430                 | ' 	{
2e430                 | ' 		ibuf = fs->win; szb = 1;
2e430                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2e430     00 2E 06 F6 | 	mov	local05, #0
2e434     34 26 86 F1 | 	sub	local01, #52
2e438                 | LR__4520
2e438     0A 26 06 F1 | 	add	local01, #10
2e43c     13 31 E2 FA | 	rdword	local06, local01
2e440     0A 26 86 F1 | 	sub	local01, #10
2e444     18 2F 12 F2 | 	cmp	local05, local06 wc
2e448     2C 00 90 3D |  if_ae	jmp	#LR__4521
2e44c     01 26 06 F1 | 	add	local01, #1
2e450     13 13 C2 FA | 	rdbyte	arg01, local01
2e454     01 26 86 F1 | 	sub	local01, #1
2e458     16 15 02 F6 | 	mov	arg02, local04
2e45c     15 17 02 F6 | 	mov	arg03, local03
2e460     17 17 02 F1 | 	add	arg03, local05
2e464     01 18 06 F6 | 	mov	arg04, #1
2e468     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2e46c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e470     01 2E 06 A1 |  if_e	add	local05, #1
2e474     C0 FF 9F AD |  if_e	jmp	#LR__4520
2e478                 | LR__4521
2e478                 | ' 	}
2e478                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2e478     0A 26 06 F1 | 	add	local01, #10
2e47c     13 2D E2 FA | 	rdword	local04, local01
2e480     16 2F 0A F2 | 	cmp	local05, local04 wz
2e484     00 30 06 A6 |  if_e	mov	local06, #0
2e488     01 30 06 56 |  if_ne	mov	local06, #1
2e48c     18 FB 01 F6 | 	mov	result1, local06
2e490                 | LR__4522
2e490     A7 F0 03 F6 | 	mov	ptra, fp
2e494     B2 00 A0 FD | 	call	#popregs_
2e498                 | _fatfs_cc_dir_clear_ret
2e498     2D 00 64 FD | 	ret
2e49c                 | 
2e49c                 | _fatfs_cc_dir_sdi
2e49c     06 4A 05 F6 | 	mov	COUNT_, #6
2e4a0     A8 00 A0 FD | 	call	#pushregs_
2e4a4     09 27 02 F6 | 	mov	local01, arg01
2e4a8     0A 29 02 F6 | 	mov	local02, arg02
2e4ac     13 2B 02 FB | 	rdlong	local03, local01
2e4b0     00 10 00 FF 
2e4b4     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2e4b8     1F 28 CE C7 |  if_b	test	local02, #31 wz
2e4bc                 | ' 		return FR_INT_ERR;
2e4bc     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2e4c0     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4536
2e4c4     10 26 06 F1 | 	add	local01, #16
2e4c8     13 29 62 FC | 	wrlong	local02, local01
2e4cc     08 26 86 F1 | 	sub	local01, #8
2e4d0     13 2D 0A FB | 	rdlong	local04, local01 wz
2e4d4     08 26 86 F1 | 	sub	local01, #8
2e4d8     15 2F C2 AA |  if_e	rdbyte	local05, local03
2e4dc     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2e4e0     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2e4e4     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2e4e8     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2e4ec     00 2C 0E F2 | 	cmp	local04, #0 wz
2e4f0     3C 00 90 5D |  if_ne	jmp	#LR__4530
2e4f4     14 2F 02 F6 | 	mov	local05, local02
2e4f8     05 2E 46 F0 | 	shr	local05, #5
2e4fc     08 2A 06 F1 | 	add	local03, #8
2e500     15 15 E2 FA | 	rdword	arg02, local03
2e504     08 2A 86 F1 | 	sub	local03, #8
2e508     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e50c     02 FA 05 36 |  if_ae	mov	result1, #2
2e510     E4 00 90 3D |  if_ae	jmp	#LR__4536
2e514     28 2A 06 F1 | 	add	local03, #40
2e518     15 2F 02 FB | 	rdlong	local05, local03
2e51c     28 2A 86 F1 | 	sub	local03, #40
2e520     18 26 06 F1 | 	add	local01, #24
2e524     13 2F 62 FC | 	wrlong	local05, local01
2e528     18 26 86 F1 | 	sub	local01, #24
2e52c     7C 00 90 FD | 	jmp	#LR__4535
2e530                 | LR__4530
2e530     0A 2A 06 F1 | 	add	local03, #10
2e534     15 31 E2 FA | 	rdword	local06, local03
2e538     0A 2A 86 F1 | 	sub	local03, #10
2e53c     09 30 66 F0 | 	shl	local06, #9
2e540                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2e540                 | ' 		while (ofs >= csz) {
2e540                 | LR__4531
2e540     18 29 12 F2 | 	cmp	local02, local06 wc
2e544     4C 00 90 CD |  if_b	jmp	#LR__4534
2e548     13 13 02 F6 | 	mov	arg01, local01
2e54c     16 15 02 F6 | 	mov	arg02, local04
2e550     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2e554     FD 2C 02 F6 | 	mov	local04, result1
2e558     FF FF 7F FF 
2e55c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2e560     01 FA 05 A6 |  if_e	mov	result1, #1
2e564     90 00 90 AD |  if_e	jmp	#LR__4536
2e568     02 2C 16 F2 | 	cmp	local04, #2 wc
2e56c     14 00 90 CD |  if_b	jmp	#LR__4532
2e570     18 2A 06 F1 | 	add	local03, #24
2e574     15 2F 02 FB | 	rdlong	local05, local03
2e578     18 2A 86 F1 | 	sub	local03, #24
2e57c     17 2D 12 F2 | 	cmp	local04, local05 wc
2e580     08 00 90 CD |  if_b	jmp	#LR__4533
2e584                 | LR__4532
2e584     02 FA 05 F6 | 	mov	result1, #2
2e588     6C 00 90 FD | 	jmp	#LR__4536
2e58c                 | LR__4533
2e58c     18 29 82 F1 | 	sub	local02, local06
2e590     AC FF 9F FD | 	jmp	#LR__4531
2e594                 | LR__4534
2e594     15 13 02 F6 | 	mov	arg01, local03
2e598     16 15 02 F6 | 	mov	arg02, local04
2e59c     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2e5a0     18 26 06 F1 | 	add	local01, #24
2e5a4     13 FB 61 FC | 	wrlong	result1, local01
2e5a8     18 26 86 F1 | 	sub	local01, #24
2e5ac                 | LR__4535
2e5ac     14 26 06 F1 | 	add	local01, #20
2e5b0     13 2D 62 FC | 	wrlong	local04, local01
2e5b4     04 26 06 F1 | 	add	local01, #4
2e5b8     13 2F 0A FB | 	rdlong	local05, local01 wz
2e5bc     18 26 86 F1 | 	sub	local01, #24
2e5c0     02 FA 05 A6 |  if_e	mov	result1, #2
2e5c4     30 00 90 AD |  if_e	jmp	#LR__4536
2e5c8     14 31 02 F6 | 	mov	local06, local02
2e5cc     09 30 46 F0 | 	shr	local06, #9
2e5d0     18 26 06 F1 | 	add	local01, #24
2e5d4     13 2F 02 FB | 	rdlong	local05, local01
2e5d8     18 2F 02 F1 | 	add	local05, local06
2e5dc     13 2F 62 FC | 	wrlong	local05, local01
2e5e0     34 2A 06 F1 | 	add	local03, #52
2e5e4     FF 29 06 F5 | 	and	local02, #511
2e5e8     14 2B 02 F1 | 	add	local03, local02
2e5ec     04 26 06 F1 | 	add	local01, #4
2e5f0     13 2B 62 FC | 	wrlong	local03, local01
2e5f4                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2e5f4                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2e5f4                 | ' 
2e5f4                 | ' 	return FR_OK;
2e5f4     00 FA 05 F6 | 	mov	result1, #0
2e5f8                 | LR__4536
2e5f8     A7 F0 03 F6 | 	mov	ptra, fp
2e5fc     B2 00 A0 FD | 	call	#popregs_
2e600                 | _fatfs_cc_dir_sdi_ret
2e600     2D 00 64 FD | 	ret
2e604                 | 
2e604                 | _fatfs_cc_dir_next
2e604     05 4A 05 F6 | 	mov	COUNT_, #5
2e608     A8 00 A0 FD | 	call	#pushregs_
2e60c     09 27 02 F6 | 	mov	local01, arg01
2e610     0A 29 02 F6 | 	mov	local02, arg02
2e614     13 2B 02 FB | 	rdlong	local03, local01
2e618     10 26 06 F1 | 	add	local01, #16
2e61c     13 2D 02 FB | 	rdlong	local04, local01
2e620     10 26 86 F1 | 	sub	local01, #16
2e624     20 2C 06 F1 | 	add	local04, #32
2e628     00 10 00 FF 
2e62c     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2e630     18 26 06 31 |  if_ae	add	local01, #24
2e634     13 01 68 3C |  if_ae	wrlong	#0, local01
2e638     18 26 86 31 |  if_ae	sub	local01, #24
2e63c     18 26 06 F1 | 	add	local01, #24
2e640     13 15 0A FB | 	rdlong	arg02, local01 wz
2e644     18 26 86 F1 | 	sub	local01, #24
2e648     04 FA 05 A6 |  if_e	mov	result1, #4
2e64c     64 01 90 AD |  if_e	jmp	#LR__4545
2e650     FF 2D CE F7 | 	test	local04, #511 wz
2e654     3C 01 90 5D |  if_ne	jmp	#LR__4544
2e658     18 26 06 F1 | 	add	local01, #24
2e65c     13 15 02 FB | 	rdlong	arg02, local01
2e660     01 14 06 F1 | 	add	arg02, #1
2e664     13 15 62 FC | 	wrlong	arg02, local01
2e668     04 26 86 F1 | 	sub	local01, #4
2e66c     13 15 0A FB | 	rdlong	arg02, local01 wz
2e670     14 26 86 F1 | 	sub	local01, #20
2e674     2C 00 90 5D |  if_ne	jmp	#LR__4540
2e678     16 15 02 F6 | 	mov	arg02, local04
2e67c     05 14 46 F0 | 	shr	arg02, #5
2e680     08 2A 06 F1 | 	add	local03, #8
2e684     15 29 E2 FA | 	rdword	local02, local03
2e688     08 2A 86 F1 | 	sub	local03, #8
2e68c     14 15 12 F2 | 	cmp	arg02, local02 wc
2e690     18 26 06 31 |  if_ae	add	local01, #24
2e694     13 01 68 3C |  if_ae	wrlong	#0, local01
2e698                 | ' 				dp->sect = 0; return FR_NO_FILE;
2e698     04 FA 05 36 |  if_ae	mov	result1, #4
2e69c     14 01 90 3D |  if_ae	jmp	#LR__4545
2e6a0     F0 00 90 FD | 	jmp	#LR__4543
2e6a4                 | LR__4540
2e6a4     16 13 02 F6 | 	mov	arg01, local04
2e6a8     09 12 46 F0 | 	shr	arg01, #9
2e6ac     0A 2A 06 F1 | 	add	local03, #10
2e6b0     15 15 E2 FA | 	rdword	arg02, local03
2e6b4     0A 2A 86 F1 | 	sub	local03, #10
2e6b8     01 14 86 F1 | 	sub	arg02, #1
2e6bc     0A 13 CA F7 | 	test	arg01, arg02 wz
2e6c0     D0 00 90 5D |  if_ne	jmp	#LR__4542
2e6c4     13 13 02 F6 | 	mov	arg01, local01
2e6c8     14 26 06 F1 | 	add	local01, #20
2e6cc     13 15 02 FB | 	rdlong	arg02, local01
2e6d0     14 26 86 F1 | 	sub	local01, #20
2e6d4     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2e6d8     FD 2E 02 F6 | 	mov	local05, result1
2e6dc     02 2E 16 F2 | 	cmp	local05, #2 wc
2e6e0     02 FA 05 C6 |  if_b	mov	result1, #2
2e6e4     CC 00 90 CD |  if_b	jmp	#LR__4545
2e6e8     FF FF 7F FF 
2e6ec     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e6f0     01 FA 05 A6 |  if_e	mov	result1, #1
2e6f4     BC 00 90 AD |  if_e	jmp	#LR__4545
2e6f8     18 2A 06 F1 | 	add	local03, #24
2e6fc     15 15 02 FB | 	rdlong	arg02, local03
2e700     18 2A 86 F1 | 	sub	local03, #24
2e704     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2e708     68 00 90 CD |  if_b	jmp	#LR__4541
2e70c     00 28 0E F2 | 	cmp	local02, #0 wz
2e710     18 26 06 A1 |  if_e	add	local01, #24
2e714     13 01 68 AC |  if_e	wrlong	#0, local01
2e718                 | ' 						dp->sect = 0; return FR_NO_FILE;
2e718     04 FA 05 A6 |  if_e	mov	result1, #4
2e71c     94 00 90 AD |  if_e	jmp	#LR__4545
2e720     13 13 02 F6 | 	mov	arg01, local01
2e724     14 26 06 F1 | 	add	local01, #20
2e728     13 15 02 FB | 	rdlong	arg02, local01
2e72c     14 26 86 F1 | 	sub	local01, #20
2e730     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2e734     FD 2E 0A F6 | 	mov	local05, result1 wz
2e738     07 FA 05 A6 |  if_e	mov	result1, #7
2e73c     74 00 90 AD |  if_e	jmp	#LR__4545
2e740     01 2E 0E F2 | 	cmp	local05, #1 wz
2e744     02 FA 05 A6 |  if_e	mov	result1, #2
2e748     68 00 90 AD |  if_e	jmp	#LR__4545
2e74c     FF FF 7F FF 
2e750     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2e754     01 FA 05 A6 |  if_e	mov	result1, #1
2e758     58 00 90 AD |  if_e	jmp	#LR__4545
2e75c     17 15 02 F6 | 	mov	arg02, local05
2e760     15 13 02 F6 | 	mov	arg01, local03
2e764     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2e768     00 FA 0D F2 | 	cmp	result1, #0 wz
2e76c     01 FA 05 56 |  if_ne	mov	result1, #1
2e770     40 00 90 5D |  if_ne	jmp	#LR__4545
2e774                 | LR__4541
2e774     14 26 06 F1 | 	add	local01, #20
2e778     13 2F 62 FC | 	wrlong	local05, local01
2e77c     15 13 02 F6 | 	mov	arg01, local03
2e780     17 15 02 F6 | 	mov	arg02, local05
2e784     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2e788     04 26 06 F1 | 	add	local01, #4
2e78c     13 FB 61 FC | 	wrlong	result1, local01
2e790     18 26 86 F1 | 	sub	local01, #24
2e794                 | LR__4542
2e794                 | LR__4543
2e794                 | LR__4544
2e794     10 26 06 F1 | 	add	local01, #16
2e798     13 2D 62 FC | 	wrlong	local04, local01
2e79c     34 2A 06 F1 | 	add	local03, #52
2e7a0     FF 2D 06 F5 | 	and	local04, #511
2e7a4     16 2B 02 F1 | 	add	local03, local04
2e7a8     0C 26 06 F1 | 	add	local01, #12
2e7ac     13 2B 62 FC | 	wrlong	local03, local01
2e7b0                 | ' #line 1771 "ff.c"
2e7b0                 | ' 				}
2e7b0                 | ' 				dp->clust = clst;
2e7b0                 | ' 				dp->sect = clst2sect(fs, clst);
2e7b0                 | ' 			}
2e7b0                 | ' 		}
2e7b0                 | ' 	}
2e7b0                 | ' 	dp->dptr = ofs;
2e7b0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2e7b0                 | ' 
2e7b0                 | ' 	return FR_OK;
2e7b0     00 FA 05 F6 | 	mov	result1, #0
2e7b4                 | LR__4545
2e7b4     A7 F0 03 F6 | 	mov	ptra, fp
2e7b8     B2 00 A0 FD | 	call	#popregs_
2e7bc                 | _fatfs_cc_dir_next_ret
2e7bc     2D 00 64 FD | 	ret
2e7c0                 | 
2e7c0                 | _fatfs_cc_dir_alloc
2e7c0     08 4A 05 F6 | 	mov	COUNT_, #8
2e7c4     A8 00 A0 FD | 	call	#pushregs_
2e7c8     09 27 02 F6 | 	mov	local01, arg01
2e7cc     0A 29 02 F6 | 	mov	local02, arg02
2e7d0     13 2B 02 FB | 	rdlong	local03, local01
2e7d4     13 13 02 F6 | 	mov	arg01, local01
2e7d8     00 14 06 F6 | 	mov	arg02, #0
2e7dc     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2e7e0     FD 2C 0A F6 | 	mov	local04, result1 wz
2e7e4     70 00 90 5D |  if_ne	jmp	#LR__4554
2e7e8     00 2E 06 F6 | 	mov	local05, #0
2e7ec                 | ' 		n = 0;
2e7ec                 | ' 		do {
2e7ec                 | LR__4550
2e7ec     18 26 06 F1 | 	add	local01, #24
2e7f0     13 15 02 FB | 	rdlong	arg02, local01
2e7f4     18 26 86 F1 | 	sub	local01, #24
2e7f8     15 13 02 F6 | 	mov	arg01, local03
2e7fc     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2e800     FD 2C 0A F6 | 	mov	local04, result1 wz
2e804     50 00 90 5D |  if_ne	jmp	#LR__4553
2e808     1C 26 06 F1 | 	add	local01, #28
2e80c     13 31 02 FB | 	rdlong	local06, local01
2e810     1C 26 86 F1 | 	sub	local01, #28
2e814     18 31 C2 FA | 	rdbyte	local06, local06
2e818     E5 30 0E F2 | 	cmp	local06, #229 wz
2e81c     1C 26 06 51 |  if_ne	add	local01, #28
2e820     13 33 02 5B |  if_ne	rdlong	local07, local01
2e824     1C 26 86 51 |  if_ne	sub	local01, #28
2e828     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2e82c     10 00 90 5D |  if_ne	jmp	#LR__4551
2e830     01 2E 06 F1 | 	add	local05, #1
2e834     14 2F 0A F2 | 	cmp	local05, local02 wz
2e838     1C 00 90 AD |  if_e	jmp	#LR__4553
2e83c     04 00 90 FD | 	jmp	#LR__4552
2e840                 | LR__4551
2e840     00 2E 06 F6 | 	mov	local05, #0
2e844                 | LR__4552
2e844     13 13 02 F6 | 	mov	arg01, local01
2e848     01 14 06 F6 | 	mov	arg02, #1
2e84c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2e850     FD 2C 0A F6 | 	mov	local04, result1 wz
2e854     94 FF 9F AD |  if_e	jmp	#LR__4550
2e858                 | LR__4553
2e858                 | LR__4554
2e858     04 2C 0E F2 | 	cmp	local04, #4 wz
2e85c     07 2C 06 A6 |  if_e	mov	local04, #7
2e860                 | ' 	return res;
2e860     16 FB 01 F6 | 	mov	result1, local04
2e864     A7 F0 03 F6 | 	mov	ptra, fp
2e868     B2 00 A0 FD | 	call	#popregs_
2e86c                 | _fatfs_cc_dir_alloc_ret
2e86c     2D 00 64 FD | 	ret
2e870                 | 
2e870                 | _fatfs_cc_ld_clust
2e870     09 01 02 F6 | 	mov	_var01, arg01
2e874     0A 13 02 F6 | 	mov	arg01, arg02
2e878     1A 12 06 F1 | 	add	arg01, #26
2e87c                 | ' {
2e87c                 | ' 
2e87c                 | ' 	return *((WORD*)ptr);
2e87c     09 FB E1 FA | 	rdword	result1, arg01
2e880     FD 12 32 F9 | 	getword	arg01, result1, #0
2e884     00 01 C2 FA | 	rdbyte	_var01, _var01
2e888     03 00 0E F2 | 	cmp	_var01, #3 wz
2e88c     14 14 06 A1 |  if_e	add	arg02, #20
2e890                 | ' {
2e890                 | ' 
2e890                 | ' 	return *((WORD*)ptr);
2e890     0A FB E1 AA |  if_e	rdword	result1, arg02
2e894     10 FA 65 A0 |  if_e	shl	result1, #16
2e898     FD 12 42 A5 |  if_e	or	arg01, result1
2e89c                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2e89c                 | ' 	}
2e89c                 | ' 
2e89c                 | ' 	return cl;
2e89c     09 FB 01 F6 | 	mov	result1, arg01
2e8a0                 | _fatfs_cc_ld_clust_ret
2e8a0     2D 00 64 FD | 	ret
2e8a4                 | 
2e8a4                 | _fatfs_cc_st_clust
2e8a4     09 01 02 F6 | 	mov	_var01, arg01
2e8a8     0A 13 02 F6 | 	mov	arg01, arg02
2e8ac     1A 12 06 F1 | 	add	arg01, #26
2e8b0     09 17 52 FC | 	wrword	arg03, arg01
2e8b4     00 01 C2 FA | 	rdbyte	_var01, _var01
2e8b8     03 00 0E F2 | 	cmp	_var01, #3 wz
2e8bc     14 14 06 A1 |  if_e	add	arg02, #20
2e8c0     10 16 46 A0 |  if_e	shr	arg03, #16
2e8c4     0A 17 52 AC |  if_e	wrword	arg03, arg02
2e8c8                 | _fatfs_cc_st_clust_ret
2e8c8     2D 00 64 FD | 	ret
2e8cc                 | 
2e8cc                 | _fatfs_cc_cmp_lfn
2e8cc     07 4A 05 F6 | 	mov	COUNT_, #7
2e8d0     A8 00 A0 FD | 	call	#pushregs_
2e8d4     09 27 02 F6 | 	mov	local01, arg01
2e8d8     0A 13 02 F6 | 	mov	arg01, arg02
2e8dc     1A 12 06 F1 | 	add	arg01, #26
2e8e0                 | ' {
2e8e0                 | ' 
2e8e0                 | ' 	return *((WORD*)ptr);
2e8e0     09 FB E9 FA | 	rdword	result1, arg01 wz
2e8e4     00 FA 05 56 |  if_ne	mov	result1, #0
2e8e8     E0 00 90 5D |  if_ne	jmp	#LR__4566
2e8ec     0A 29 C2 FA | 	rdbyte	local02, arg02
2e8f0     3F 28 06 F5 | 	and	local02, #63
2e8f4     01 28 86 F1 | 	sub	local02, #1
2e8f8     0D 28 06 FD | 	qmul	local02, #13
2e8fc                 | ' 
2e8fc                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2e8fc                 | ' 
2e8fc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2e8fc     01 2A 06 F6 | 	mov	local03, #1
2e900     00 2C 06 F6 | 	mov	local04, #0
2e904     18 2E 62 FD | 	getqx	local05
2e908                 | LR__4560
2e908     0D 2C 16 F2 | 	cmp	local04, #13 wc
2e90c     9C 00 90 3D |  if_ae	jmp	#LR__4565
2e910     0A 13 02 F6 | 	mov	arg01, arg02
2e914     16 29 02 F6 | 	mov	local02, local04
2e918     01 00 00 FF 
2e91c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2e920     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2e924     14 29 C2 FA | 	rdbyte	local02, local02
2e928     01 28 06 FA | 	mul	local02, #1
2e92c     14 13 02 F1 | 	add	arg01, local02
2e930     01 00 00 FF 
2e934     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2e938                 | ' {
2e938                 | ' 
2e938                 | ' 	return *((WORD*)ptr);
2e938     09 FB E1 FA | 	rdword	result1, arg01
2e93c     FD 30 02 F6 | 	mov	local06, result1
2e940     15 29 02 F6 | 	mov	local02, local03
2e944     0F 28 4E F7 | 	zerox	local02, #15 wz
2e948     44 00 90 AD |  if_e	jmp	#LR__4563
2e94c     00 2F 16 F2 | 	cmp	local05, #256 wc
2e950     2C 00 90 3D |  if_ae	jmp	#LR__4561
2e954     18 13 32 F9 | 	getword	arg01, local06, #0
2e958     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e95c     FD 28 02 F6 | 	mov	local02, result1
2e960     17 2B 02 F6 | 	mov	local03, local05
2e964     01 2A 66 F0 | 	shl	local03, #1
2e968     13 2B 02 F1 | 	add	local03, local01
2e96c     15 13 E2 FA | 	rdword	arg01, local03
2e970     01 2E 06 F1 | 	add	local05, #1
2e974     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2e978     FD 28 0A F2 | 	cmp	local02, result1 wz
2e97c     08 00 90 AD |  if_e	jmp	#LR__4562
2e980                 | LR__4561
2e980                 | ' 				return 0;
2e980     00 FA 05 F6 | 	mov	result1, #0
2e984     44 00 90 FD | 	jmp	#LR__4566
2e988                 | LR__4562
2e988     18 2B 02 F6 | 	mov	local03, local06
2e98c     14 00 90 FD | 	jmp	#LR__4564
2e990                 | LR__4563
2e990     18 31 32 F9 | 	getword	local06, local06, #0
2e994     7F 00 00 FF 
2e998     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2e99c     00 FA 05 56 |  if_ne	mov	result1, #0
2e9a0     28 00 90 5D |  if_ne	jmp	#LR__4566
2e9a4                 | LR__4564
2e9a4     01 2C 06 F1 | 	add	local04, #1
2e9a8     5C FF 9F FD | 	jmp	#LR__4560
2e9ac                 | LR__4565
2e9ac     0A 29 C2 FA | 	rdbyte	local02, arg02
2e9b0     40 28 CE F7 | 	test	local02, #64 wz
2e9b4     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2e9b8     01 2E 66 50 |  if_ne	shl	local05, #1
2e9bc     13 2F 02 51 |  if_ne	add	local05, local01
2e9c0     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2e9c4     00 FA 05 56 |  if_ne	mov	result1, #0
2e9c8                 | ' 
2e9c8                 | ' 	return 1;
2e9c8     01 FA 05 A6 |  if_e	mov	result1, #1
2e9cc                 | LR__4566
2e9cc     A7 F0 03 F6 | 	mov	ptra, fp
2e9d0     B2 00 A0 FD | 	call	#popregs_
2e9d4                 | _fatfs_cc_cmp_lfn_ret
2e9d4     2D 00 64 FD | 	ret
2e9d8                 | 
2e9d8                 | _fatfs_cc_pick_lfn
2e9d8     09 01 02 F6 | 	mov	_var01, arg01
2e9dc     0A 13 02 F6 | 	mov	arg01, arg02
2e9e0     1A 12 06 F1 | 	add	arg01, #26
2e9e4                 | ' {
2e9e4                 | ' 
2e9e4                 | ' 	return *((WORD*)ptr);
2e9e4     09 FB E9 FA | 	rdword	result1, arg01 wz
2e9e8     00 FA 05 56 |  if_ne	mov	result1, #0
2e9ec     D4 00 90 5D |  if_ne	jmp	#LR__4575
2e9f0     0A 03 C2 FA | 	rdbyte	_var02, arg02
2e9f4     40 02 26 F5 | 	andn	_var02, #64
2e9f8     01 02 86 F1 | 	sub	_var02, #1
2e9fc     0D 02 06 FD | 	qmul	_var02, #13
2ea00                 | ' 
2ea00                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2ea00                 | ' 
2ea00                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2ea00     01 04 06 F6 | 	mov	_var03, #1
2ea04     00 06 06 F6 | 	mov	_var04, #0
2ea08     18 08 62 FD | 	getqx	_var05
2ea0c                 | LR__4570
2ea0c     0D 06 16 F2 | 	cmp	_var04, #13 wc
2ea10     80 00 90 3D |  if_ae	jmp	#LR__4573
2ea14     0A 13 02 F6 | 	mov	arg01, arg02
2ea18     03 03 02 F6 | 	mov	_var02, _var04
2ea1c     01 00 00 FF 
2ea20     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2ea24     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2ea28     01 03 C2 FA | 	rdbyte	_var02, _var02
2ea2c     01 02 06 FA | 	mul	_var02, #1
2ea30     01 13 02 F1 | 	add	arg01, _var02
2ea34     01 00 00 FF 
2ea38     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2ea3c                 | ' {
2ea3c                 | ' 
2ea3c                 | ' 	return *((WORD*)ptr);
2ea3c     09 FB E1 FA | 	rdword	result1, arg01
2ea40     FD 0A 02 F6 | 	mov	_var06, result1
2ea44     02 03 02 F6 | 	mov	_var02, _var03
2ea48     0F 02 4E F7 | 	zerox	_var02, #15 wz
2ea4c     28 00 90 AD |  if_e	jmp	#LR__4571
2ea50     00 09 16 F2 | 	cmp	_var05, #256 wc
2ea54     00 FA 05 36 |  if_ae	mov	result1, #0
2ea58     68 00 90 3D |  if_ae	jmp	#LR__4575
2ea5c     04 03 02 F6 | 	mov	_var02, _var05
2ea60     01 02 66 F0 | 	shl	_var02, #1
2ea64     00 03 02 F1 | 	add	_var02, _var01
2ea68     05 05 02 F6 | 	mov	_var03, _var06
2ea6c     01 05 52 FC | 	wrword	_var03, _var02
2ea70     01 08 06 F1 | 	add	_var05, #1
2ea74     14 00 90 FD | 	jmp	#LR__4572
2ea78                 | LR__4571
2ea78     05 0B 32 F9 | 	getword	_var06, _var06, #0
2ea7c     7F 00 00 FF 
2ea80     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2ea84     00 FA 05 56 |  if_ne	mov	result1, #0
2ea88     38 00 90 5D |  if_ne	jmp	#LR__4575
2ea8c                 | LR__4572
2ea8c     01 06 06 F1 | 	add	_var04, #1
2ea90     78 FF 9F FD | 	jmp	#LR__4570
2ea94                 | LR__4573
2ea94     0A 03 C2 FA | 	rdbyte	_var02, arg02
2ea98     40 02 CE F7 | 	test	_var02, #64 wz
2ea9c     02 0D 02 56 |  if_ne	mov	_var07, _var03
2eaa0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2eaa4     18 00 90 AD |  if_e	jmp	#LR__4574
2eaa8     00 09 16 F2 | 	cmp	_var05, #256 wc
2eaac     00 FA 05 36 |  if_ae	mov	result1, #0
2eab0     10 00 90 3D |  if_ae	jmp	#LR__4575
2eab4     01 08 66 F0 | 	shl	_var05, #1
2eab8     00 09 02 F1 | 	add	_var05, _var01
2eabc     04 01 58 FC | 	wrword	#0, _var05
2eac0                 | LR__4574
2eac0                 | ' 		lfnbuf[i] = 0;
2eac0                 | ' 	}
2eac0                 | ' 
2eac0                 | ' 	return 1;
2eac0     01 FA 05 F6 | 	mov	result1, #1
2eac4                 | LR__4575
2eac4                 | _fatfs_cc_pick_lfn_ret
2eac4     2D 00 64 FD | 	ret
2eac8                 | 
2eac8                 | _fatfs_cc_put_lfn
2eac8     0D 14 06 F1 | 	add	arg02, #13
2eacc     0A 19 42 FC | 	wrbyte	arg04, arg02
2ead0     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2ead4     01 18 86 F1 | 	sub	arg04, #1
2ead8     0D 18 06 FD | 	qmul	arg04, #13
2eadc     09 01 02 F6 | 	mov	_var01, arg01
2eae0     02 14 86 F1 | 	sub	arg02, #2
2eae4     0A 1F 48 FC | 	wrbyte	#15, arg02
2eae8     01 14 06 F1 | 	add	arg02, #1
2eaec     0A 01 48 FC | 	wrbyte	#0, arg02
2eaf0     0C 14 86 F1 | 	sub	arg02, #12
2eaf4     0A 13 02 F6 | 	mov	arg01, arg02
2eaf8     1A 12 06 F1 | 	add	arg01, #26
2eafc     09 01 58 FC | 	wrword	#0, arg01
2eb00     00 02 06 F6 | 	mov	_var02, #0
2eb04     00 04 06 F6 | 	mov	_var03, #0
2eb08                 | ' 	BYTE* dir,
2eb08                 | ' 	BYTE ord,
2eb08                 | ' 	BYTE sum
2eb08                 | ' )
2eb08                 | ' {
2eb08                 | ' 	UINT i, s;
2eb08                 | ' 	WCHAR wc;
2eb08                 | ' 
2eb08                 | ' 
2eb08                 | ' 	dir[ 13 ] = sum;
2eb08                 | ' 	dir[ 11 ] =  0x0F ;
2eb08                 | ' 	dir[ 12 ] = 0;
2eb08                 | ' 	st_word(dir +  26 , 0);
2eb08                 | ' 
2eb08                 | ' 	i = (ord - 1) * 13;
2eb08                 | ' 	s = wc = 0;
2eb08                 | ' 	do {
2eb08     01 00 00 FF 
2eb0c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2eb10     18 06 62 FD | 	getqx	_var04
2eb14     97 2A 48 FB | 	callpa	#(@LR__4581-@LR__4580)>>2,fcache_load_ptr_
2eb18                 | LR__4580
2eb18     01 19 32 F9 | 	getword	arg04, _var02, #0
2eb1c     7F 00 00 FF 
2eb20     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2eb24     03 13 02 56 |  if_ne	mov	arg01, _var04
2eb28     01 06 06 51 |  if_ne	add	_var04, #1
2eb2c     01 12 66 50 |  if_ne	shl	arg01, #1
2eb30     00 13 02 51 |  if_ne	add	arg01, _var01
2eb34     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2eb38     0A 13 02 F6 | 	mov	arg01, arg02
2eb3c     02 19 02 F6 | 	mov	arg04, _var03
2eb40     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2eb44     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eb48     01 18 06 FA | 	mul	arg04, #1
2eb4c     0C 13 02 F1 | 	add	arg01, arg04
2eb50     09 03 52 FC | 	wrword	_var02, arg01
2eb54     01 19 02 F6 | 	mov	arg04, _var02
2eb58     0F 18 4E F7 | 	zerox	arg04, #15 wz
2eb5c     0F 02 CE A9 |  if_e	bmask	_var02, #15
2eb60     01 04 06 F1 | 	add	_var03, #1
2eb64     0D 04 16 F2 | 	cmp	_var03, #13 wc
2eb68     AC FF 9F CD |  if_b	jmp	#LR__4580
2eb6c                 | LR__4581
2eb6c     01 00 00 FF 
2eb70     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2eb74     01 03 32 F9 | 	getword	_var02, _var02, #0
2eb78     7F 00 00 FF 
2eb7c     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2eb80     01 06 66 50 |  if_ne	shl	_var04, #1
2eb84     00 07 02 51 |  if_ne	add	_var04, _var01
2eb88     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2eb8c     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2eb90     40 16 46 A5 |  if_e	or	arg03, #64
2eb94     0A 17 42 FC | 	wrbyte	arg03, arg02
2eb98                 | _fatfs_cc_put_lfn_ret
2eb98     2D 00 64 FD | 	ret
2eb9c                 | 
2eb9c                 | _fatfs_cc_gen_numname
2eb9c     08 4A 05 F6 | 	mov	COUNT_, #8
2eba0     A8 00 A0 FD | 	call	#pushregs_
2eba4     2C F0 07 F1 | 	add	ptra, #44
2eba8     09 27 02 F6 | 	mov	local01, arg01
2ebac     0A 29 02 F6 | 	mov	local02, arg02
2ebb0     0B 2B 02 F6 | 	mov	local03, arg03
2ebb4     0C 2D 02 F6 | 	mov	local04, arg04
2ebb8     13 13 02 F6 | 	mov	arg01, local01
2ebbc     14 15 02 F6 | 	mov	arg02, local02
2ebc0     0B 16 06 F6 | 	mov	arg03, #11
2ebc4     98 72 BF FD | 	call	#__system____builtin_memmove
2ebc8     06 2C 16 F2 | 	cmp	local04, #6 wc
2ebcc     48 00 90 CD |  if_b	jmp	#LR__4595
2ebd0     16 2F 02 F6 | 	mov	local05, local04
2ebd4     97 1E 48 FB | 	callpa	#(@LR__4593-@LR__4590)>>2,fcache_load_ptr_
2ebd8                 | ' 		sreg = seq;
2ebd8                 | ' 		while (*lfn) {
2ebd8                 | LR__4590
2ebd8     15 31 EA FA | 	rdword	local06, local03 wz
2ebdc     34 00 90 AD |  if_e	jmp	#LR__4594
2ebe0     15 33 E2 FA | 	rdword	local07, local03
2ebe4                 | ' 			wc = *lfn++;
2ebe4                 | ' 			for (i = 0; i < 16; i++) {
2ebe4     02 2A 06 F1 | 	add	local03, #2
2ebe8     10 12 DC FC | 	rep	@LR__4592, #16
2ebec                 | LR__4591
2ebec     01 2E 66 F0 | 	shl	local05, #1
2ebf0     19 31 32 F9 | 	getword	local06, local07, #0
2ebf4     01 30 06 F5 | 	and	local06, #1
2ebf8     18 2F 02 F1 | 	add	local05, local06
2ebfc     19 33 32 F9 | 	getword	local07, local07, #0
2ec00     01 32 46 F0 | 	shr	local07, #1
2ec04     10 2E 2E F4 | 	testbn	local05, #16 wz
2ec08     88 00 00 5F 
2ec0c     21 2E 66 55 |  if_ne	xor	local05, ##69665
2ec10                 | LR__4592
2ec10     C4 FF 9F FD | 	jmp	#LR__4590
2ec14                 | LR__4593
2ec14                 | LR__4594
2ec14     17 2D 02 F6 | 	mov	local04, local05
2ec18                 | LR__4595
2ec18     07 32 06 F6 | 	mov	local07, #7
2ec1c                 | ' 			}
2ec1c                 | ' 		}
2ec1c                 | ' 		seq = (UINT)sreg;
2ec1c                 | ' 	}
2ec1c                 | ' 
2ec1c                 | ' 
2ec1c                 | ' 	i = 7;
2ec1c                 | ' 	do {
2ec1c     10 4E 05 F1 | 	add	fp, #16
2ec20     97 1A 48 FB | 	callpa	#(@LR__4597-@LR__4596)>>2,fcache_load_ptr_
2ec24                 | LR__4596
2ec24     16 2F 42 F8 | 	getnib	local05, local04, #0
2ec28     30 2E 06 F1 | 	add	local05, #48
2ec2c     04 2C 46 F0 | 	shr	local04, #4
2ec30     17 31 E2 F8 | 	getbyte	local06, local05, #0
2ec34     3A 30 16 F2 | 	cmp	local06, #58 wc
2ec38     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2ec3c     07 2E 06 31 |  if_ae	add	local05, #7
2ec40     19 31 02 F6 | 	mov	local06, local07
2ec44     01 32 8E F1 | 	sub	local07, #1 wz
2ec48     A7 30 02 F1 | 	add	local06, fp
2ec4c     18 2F 42 FC | 	wrbyte	local05, local06
2ec50     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2ec54     CC FF 9F 5D |  if_ne	jmp	#LR__4596
2ec58                 | LR__4597
2ec58     19 31 02 F6 | 	mov	local06, local07
2ec5c     A7 30 02 F1 | 	add	local06, fp
2ec60     18 FD 48 FC | 	wrbyte	#126, local06
2ec64                 | ' 	ns[i] = '~';
2ec64                 | ' 
2ec64                 | ' 
2ec64                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2ec64     00 2E 06 F6 | 	mov	local05, #0
2ec68     10 4E 85 F1 | 	sub	fp, #16
2ec6c     97 2A 48 FB | 	callpa	#(@LR__4600-@LR__4598)>>2,fcache_load_ptr_
2ec70                 | LR__4598
2ec70     19 2F 12 F2 | 	cmp	local05, local07 wc
2ec74     4C 00 90 3D |  if_ae	jmp	#LR__4601
2ec78     17 31 02 F6 | 	mov	local06, local05
2ec7c     13 31 02 F1 | 	add	local06, local01
2ec80     18 31 C2 FA | 	rdbyte	local06, local06
2ec84     20 30 0E F2 | 	cmp	local06, #32 wz
2ec88     38 00 90 AD |  if_e	jmp	#LR__4601
2ec8c     17 13 02 F6 | 	mov	arg01, local05
2ec90     13 13 02 F1 | 	add	arg01, local01
2ec94     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2ec98     00 FA 05 56 |  if_ne	mov	result1, #0
2ec9c                 | ' 
2ec9c                 | ' 	return 0;
2ec9c     00 FA 05 A6 |  if_e	mov	result1, #0
2eca0     00 FA 0D F2 | 	cmp	result1, #0 wz
2eca4     14 00 90 AD |  if_e	jmp	#LR__4599
2eca8     19 31 02 F6 | 	mov	local06, local07
2ecac     01 30 86 F1 | 	sub	local06, #1
2ecb0     18 2F 0A F2 | 	cmp	local05, local06 wz
2ecb4     0C 00 90 AD |  if_e	jmp	#LR__4601
2ecb8     01 2E 06 F1 | 	add	local05, #1
2ecbc                 | LR__4599
2ecbc     01 2E 06 F1 | 	add	local05, #1
2ecc0     AC FF 9F FD | 	jmp	#LR__4598
2ecc4                 | LR__4600
2ecc4                 | LR__4601
2ecc4     97 20 48 FB | 	callpa	#(@LR__4605-@LR__4602)>>2,fcache_load_ptr_
2ecc8                 | ' 			j++;
2ecc8                 | ' 		}
2ecc8                 | ' 	}
2ecc8                 | ' 	do {
2ecc8                 | LR__4602
2ecc8     17 31 02 F6 | 	mov	local06, local05
2eccc     13 31 02 F1 | 	add	local06, local01
2ecd0     08 32 16 F2 | 	cmp	local07, #8 wc
2ecd4     01 2E 06 F1 | 	add	local05, #1
2ecd8     1C 00 90 3D |  if_ae	jmp	#LR__4603
2ecdc     19 2D 02 F6 | 	mov	local04, local07
2ece0     10 4E 05 F1 | 	add	fp, #16
2ece4     A7 2C 02 F1 | 	add	local04, fp
2ece8     16 35 C2 FA | 	rdbyte	local08, local04
2ecec     01 32 06 F1 | 	add	local07, #1
2ecf0     10 4E 85 F1 | 	sub	fp, #16
2ecf4     04 00 90 FD | 	jmp	#LR__4604
2ecf8                 | LR__4603
2ecf8     20 34 06 F6 | 	mov	local08, #32
2ecfc                 | LR__4604
2ecfc     18 35 42 FC | 	wrbyte	local08, local06
2ed00     08 2E 16 F2 | 	cmp	local05, #8 wc
2ed04     C0 FF 9F CD |  if_b	jmp	#LR__4602
2ed08                 | LR__4605
2ed08     A7 F0 03 F6 | 	mov	ptra, fp
2ed0c     B2 00 A0 FD | 	call	#popregs_
2ed10                 | _fatfs_cc_gen_numname_ret
2ed10     2D 00 64 FD | 	ret
2ed14                 | 
2ed14                 | _fatfs_cc_sum_sfn
2ed14     00 00 06 F6 | 	mov	_var01, #0
2ed18                 | ' )
2ed18                 | ' {
2ed18                 | ' 	BYTE sum = 0;
2ed18                 | ' 	UINT n = 11;
2ed18                 | ' 
2ed18                 | ' 	do {
2ed18     97 12 48 FB | 	callpa	#(@LR__4612-@LR__4610)>>2,fcache_load_ptr_
2ed1c                 | LR__4610
2ed1c     0B 10 DC FC | 	rep	@LR__4613, #11
2ed20                 | LR__4611
2ed20     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2ed24     01 FA 45 F0 | 	shr	result1, #1
2ed28     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2ed2c     07 00 66 F0 | 	shl	_var01, #7
2ed30     00 FB 01 F1 | 	add	result1, _var01
2ed34     09 01 C2 FA | 	rdbyte	_var01, arg01
2ed38     FD 00 02 F1 | 	add	_var01, result1
2ed3c     01 12 06 F1 | 	add	arg01, #1
2ed40                 | LR__4612
2ed40                 | LR__4613
2ed40                 | ' 	return sum;
2ed40     00 FB 01 F6 | 	mov	result1, _var01
2ed44                 | _fatfs_cc_sum_sfn_ret
2ed44     2D 00 64 FD | 	ret
2ed48                 | 
2ed48                 | _fatfs_cc_dir_read
2ed48     0C 4A 05 F6 | 	mov	COUNT_, #12
2ed4c     A8 00 A0 FD | 	call	#pushregs_
2ed50     09 27 02 F6 | 	mov	local01, arg01
2ed54     0A 29 02 F6 | 	mov	local02, arg02
2ed58     04 2A 06 F6 | 	mov	local03, #4
2ed5c     13 2D 02 FB | 	rdlong	local04, local01
2ed60     FF 2E 06 F6 | 	mov	local05, #255
2ed64     FF 30 06 F6 | 	mov	local06, #255
2ed68                 | ' )
2ed68                 | ' {
2ed68                 | ' 	FRESULT res = FR_NO_FILE;
2ed68                 | ' 	FATFS *fs = dp->obj.fs;
2ed68                 | ' 	BYTE attr, b;
2ed68                 | ' 
2ed68                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2ed68                 | ' 
2ed68                 | ' 
2ed68                 | ' 	while (dp->sect) {
2ed68                 | LR__4620
2ed68     18 26 06 F1 | 	add	local01, #24
2ed6c     13 FB 09 FB | 	rdlong	result1, local01 wz
2ed70     18 26 86 F1 | 	sub	local01, #24
2ed74     AC 01 90 AD |  if_e	jmp	#LR__4630
2ed78     18 26 06 F1 | 	add	local01, #24
2ed7c     13 15 02 FB | 	rdlong	arg02, local01
2ed80     18 26 86 F1 | 	sub	local01, #24
2ed84     16 13 02 F6 | 	mov	arg01, local04
2ed88     AC ED BF FD | 	call	#_fatfs_cc_move_window
2ed8c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ed90     90 01 90 5D |  if_ne	jmp	#LR__4630
2ed94     1C 26 06 F1 | 	add	local01, #28
2ed98     13 FB 01 FB | 	rdlong	result1, local01
2ed9c     1C 26 86 F1 | 	sub	local01, #28
2eda0     FD 32 C2 FA | 	rdbyte	local07, result1
2eda4     19 FB 01 F6 | 	mov	result1, local07
2eda8     07 FA 4D F7 | 	zerox	result1, #7 wz
2edac     04 2A 06 A6 |  if_e	mov	local03, #4
2edb0                 | ' 			res = FR_NO_FILE; break;
2edb0     70 01 90 AD |  if_e	jmp	#LR__4630
2edb4     1C 26 06 F1 | 	add	local01, #28
2edb8     13 35 02 FB | 	rdlong	local08, local01
2edbc     0B 34 06 F1 | 	add	local08, #11
2edc0     1A 37 C2 FA | 	rdbyte	local09, local08
2edc4     3F 36 06 F5 | 	and	local09, #63
2edc8     16 26 86 F1 | 	sub	local01, #22
2edcc     13 37 42 FC | 	wrbyte	local09, local01
2edd0     06 26 86 F1 | 	sub	local01, #6
2edd4     19 FB E1 F8 | 	getbyte	result1, local07, #0
2edd8     E5 FA 0D F2 | 	cmp	result1, #229 wz
2eddc     19 35 02 56 |  if_ne	mov	local08, local07
2ede0     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2ede4     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2ede8     1C 00 90 AD |  if_e	jmp	#LR__4621
2edec     00 38 06 F6 | 	mov	local10, #0
2edf0     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2edf4     20 34 26 F5 | 	andn	local08, #32
2edf8     08 34 0E F2 | 	cmp	local08, #8 wz
2edfc     01 38 06 A6 |  if_e	mov	local10, #1
2ee00     14 39 0A F2 | 	cmp	local10, local02 wz
2ee04     08 00 90 AD |  if_e	jmp	#LR__4622
2ee08                 | LR__4621
2ee08     FF 2E 06 F6 | 	mov	local05, #255
2ee0c     00 01 90 FD | 	jmp	#LR__4629
2ee10                 | LR__4622
2ee10     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2ee14     0F 36 0E F2 | 	cmp	local09, #15 wz
2ee18     B4 00 90 5D |  if_ne	jmp	#LR__4626
2ee1c     19 3B E2 F8 | 	getbyte	local11, local07, #0
2ee20     40 3A CE F7 | 	test	local11, #64 wz
2ee24     30 00 90 AD |  if_e	jmp	#LR__4623
2ee28     1C 26 06 F1 | 	add	local01, #28
2ee2c     13 3B 02 FB | 	rdlong	local11, local01
2ee30     0D 3A 06 F1 | 	add	local11, #13
2ee34     1D 31 C2 FA | 	rdbyte	local06, local11
2ee38     19 33 E2 F8 | 	getbyte	local07, local07, #0
2ee3c     BF 32 06 F5 | 	and	local07, #191
2ee40     19 2F 02 F6 | 	mov	local05, local07
2ee44     0C 26 86 F1 | 	sub	local01, #12
2ee48     13 3B 02 FB | 	rdlong	local11, local01
2ee4c     1C 26 06 F1 | 	add	local01, #28
2ee50     13 3B 62 FC | 	wrlong	local11, local01
2ee54     2C 26 86 F1 | 	sub	local01, #44
2ee58                 | LR__4623
2ee58     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ee5c     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ee60     1C 35 0A F2 | 	cmp	local08, local10 wz
2ee64     5C 00 90 5D |  if_ne	jmp	#LR__4624
2ee68     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ee6c     1C 26 06 F1 | 	add	local01, #28
2ee70     13 37 02 FB | 	rdlong	local09, local01
2ee74     1C 26 86 F1 | 	sub	local01, #28
2ee78     0D 36 06 F1 | 	add	local09, #13
2ee7c     1B 35 C2 FA | 	rdbyte	local08, local09
2ee80     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ee84     1B 39 0A F2 | 	cmp	local10, local09 wz
2ee88     38 00 90 5D |  if_ne	jmp	#LR__4624
2ee8c     0C 2C 06 F1 | 	add	local04, #12
2ee90     16 13 02 FB | 	rdlong	arg01, local04
2ee94     0C 2C 86 F1 | 	sub	local04, #12
2ee98     1C 26 06 F1 | 	add	local01, #28
2ee9c     13 3D 02 FB | 	rdlong	local12, local01
2eea0     1C 26 86 F1 | 	sub	local01, #28
2eea4     1E 15 02 F6 | 	mov	arg02, local12
2eea8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2eeac     00 FA 4D F2 | 	cmps	result1, #0 wz
2eeb0     17 3D 02 56 |  if_ne	mov	local12, local05
2eeb4     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2eeb8     01 3C 86 51 |  if_ne	sub	local12, #1
2eebc     1E 3B 02 56 |  if_ne	mov	local11, local12
2eec0     04 00 90 5D |  if_ne	jmp	#LR__4625
2eec4                 | LR__4624
2eec4     FF 3A 06 F6 | 	mov	local11, #255
2eec8                 | LR__4625
2eec8     1D 2F 02 F6 | 	mov	local05, local11
2eecc     40 00 90 FD | 	jmp	#LR__4628
2eed0                 | LR__4626
2eed0     17 3B 02 F6 | 	mov	local11, local05
2eed4     07 3A 4E F7 | 	zerox	local11, #7 wz
2eed8     20 00 90 5D |  if_ne	jmp	#LR__4627
2eedc     18 31 E2 F8 | 	getbyte	local06, local06, #0
2eee0     1C 26 06 F1 | 	add	local01, #28
2eee4     13 13 02 FB | 	rdlong	arg01, local01
2eee8     1C 26 86 F1 | 	sub	local01, #28
2eeec     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2eef0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2eef4     FD 30 0A F2 | 	cmp	local06, result1 wz
2eef8     28 00 90 AD |  if_e	jmp	#LR__4630
2eefc                 | LR__4627
2eefc     2C 26 06 F1 | 	add	local01, #44
2ef00     FF FF FF FF 
2ef04     13 FF 6B FC | 	wrlong	##-1, local01
2ef08     2C 26 86 F1 | 	sub	local01, #44
2ef0c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2ef0c                 | ' 					}
2ef0c                 | ' 					break;
2ef0c     14 00 90 FD | 	jmp	#LR__4630
2ef10                 | LR__4628
2ef10                 | LR__4629
2ef10     13 13 02 F6 | 	mov	arg01, local01
2ef14     00 14 06 F6 | 	mov	arg02, #0
2ef18     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2ef1c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ef20     44 FE 9F AD |  if_e	jmp	#LR__4620
2ef24                 | LR__4630
2ef24     00 2A 0E F2 | 	cmp	local03, #0 wz
2ef28     18 26 06 51 |  if_ne	add	local01, #24
2ef2c     13 01 68 5C |  if_ne	wrlong	#0, local01
2ef30                 | ' 	return res;
2ef30     15 FB 01 F6 | 	mov	result1, local03
2ef34     A7 F0 03 F6 | 	mov	ptra, fp
2ef38     B2 00 A0 FD | 	call	#popregs_
2ef3c                 | _fatfs_cc_dir_read_ret
2ef3c     2D 00 64 FD | 	ret
2ef40                 | 
2ef40                 | _fatfs_cc_dir_find
2ef40     0B 4A 05 F6 | 	mov	COUNT_, #11
2ef44     A8 00 A0 FD | 	call	#pushregs_
2ef48     09 27 02 F6 | 	mov	local01, arg01
2ef4c     13 29 02 FB | 	rdlong	local02, local01
2ef50     13 13 02 F6 | 	mov	arg01, local01
2ef54     00 14 06 F6 | 	mov	arg02, #0
2ef58     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ef5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ef60     18 02 90 5D |  if_ne	jmp	#LR__4652
2ef64     FF 2A 06 F6 | 	mov	local03, #255
2ef68     FF 2C 06 F6 | 	mov	local04, #255
2ef6c     2C 26 06 F1 | 	add	local01, #44
2ef70     FF FF FF FF 
2ef74     13 FF 6B FC | 	wrlong	##-1, local01
2ef78     2C 26 86 F1 | 	sub	local01, #44
2ef7c                 | ' #line 2404 "ff.c"
2ef7c                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ef7c                 | ' 
2ef7c                 | ' 	do {
2ef7c                 | LR__4640
2ef7c     18 26 06 F1 | 	add	local01, #24
2ef80     13 15 02 FB | 	rdlong	arg02, local01
2ef84     18 26 86 F1 | 	sub	local01, #24
2ef88     14 13 02 F6 | 	mov	arg01, local02
2ef8c     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2ef90     FD 2E 0A F6 | 	mov	local05, result1 wz
2ef94     E0 01 90 5D |  if_ne	jmp	#LR__4651
2ef98     1C 26 06 F1 | 	add	local01, #28
2ef9c     13 17 02 FB | 	rdlong	arg03, local01
2efa0     1C 26 86 F1 | 	sub	local01, #28
2efa4     0B 31 C2 FA | 	rdbyte	local06, arg03
2efa8     18 17 02 F6 | 	mov	arg03, local06
2efac     07 16 4E F7 | 	zerox	arg03, #7 wz
2efb0     04 2E 06 A6 |  if_e	mov	local05, #4
2efb4     C0 01 90 AD |  if_e	jmp	#LR__4651
2efb8     1C 26 06 F1 | 	add	local01, #28
2efbc     13 33 02 FB | 	rdlong	local07, local01
2efc0     19 17 02 F6 | 	mov	arg03, local07
2efc4     0B 16 06 F1 | 	add	arg03, #11
2efc8     0B 35 C2 FA | 	rdbyte	local08, arg03
2efcc     3F 34 06 F5 | 	and	local08, #63
2efd0     16 26 86 F1 | 	sub	local01, #22
2efd4     13 35 42 FC | 	wrbyte	local08, local01
2efd8     06 26 86 F1 | 	sub	local01, #6
2efdc     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2efe0     E5 16 0E F2 | 	cmp	arg03, #229 wz
2efe4     18 00 90 AD |  if_e	jmp	#LR__4641
2efe8     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2efec     08 16 CE F7 | 	test	arg03, #8 wz
2eff0     1A 33 02 56 |  if_ne	mov	local07, local08
2eff4     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2eff8     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2effc     18 00 90 AD |  if_e	jmp	#LR__4642
2f000                 | LR__4641
2f000     FF 2C 06 F6 | 	mov	local04, #255
2f004     2C 26 06 F1 | 	add	local01, #44
2f008     FF FF FF FF 
2f00c     13 FF 6B FC | 	wrlong	##-1, local01
2f010     2C 26 86 F1 | 	sub	local01, #44
2f014     4C 01 90 FD | 	jmp	#LR__4650
2f018                 | LR__4642
2f018     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2f01c     0F 34 0E F2 | 	cmp	local08, #15 wz
2f020     C8 00 90 5D |  if_ne	jmp	#LR__4646
2f024     2B 26 06 F1 | 	add	local01, #43
2f028     13 35 C2 FA | 	rdbyte	local08, local01
2f02c     2B 26 86 F1 | 	sub	local01, #43
2f030     40 34 CE F7 | 	test	local08, #64 wz
2f034     2C 01 90 5D |  if_ne	jmp	#LR__4649
2f038     18 37 E2 F8 | 	getbyte	local09, local06, #0
2f03c     40 36 CE F7 | 	test	local09, #64 wz
2f040     30 00 90 AD |  if_e	jmp	#LR__4643
2f044     1C 26 06 F1 | 	add	local01, #28
2f048     13 37 02 FB | 	rdlong	local09, local01
2f04c     0D 36 06 F1 | 	add	local09, #13
2f050     1B 2B C2 FA | 	rdbyte	local03, local09
2f054     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f058     BF 30 06 F5 | 	and	local06, #191
2f05c     18 2D 02 F6 | 	mov	local04, local06
2f060     0C 26 86 F1 | 	sub	local01, #12
2f064     13 37 02 FB | 	rdlong	local09, local01
2f068     1C 26 06 F1 | 	add	local01, #28
2f06c     13 37 62 FC | 	wrlong	local09, local01
2f070     2C 26 86 F1 | 	sub	local01, #44
2f074                 | LR__4643
2f074     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f078     16 33 E2 F8 | 	getbyte	local07, local04, #0
2f07c     19 39 0A F2 | 	cmp	local10, local07 wz
2f080     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f084     15 35 E2 F8 | 	getbyte	local08, local03, #0
2f088     1C 26 06 F1 | 	add	local01, #28
2f08c     13 33 02 FB | 	rdlong	local07, local01
2f090     1C 26 86 F1 | 	sub	local01, #28
2f094     0D 32 06 F1 | 	add	local07, #13
2f098     19 31 C2 FA | 	rdbyte	local06, local07
2f09c     18 33 E2 F8 | 	getbyte	local07, local06, #0
2f0a0     19 35 0A F2 | 	cmp	local08, local07 wz
2f0a4     38 00 90 5D |  if_ne	jmp	#LR__4644
2f0a8     0C 28 06 F1 | 	add	local02, #12
2f0ac     14 13 02 FB | 	rdlong	arg01, local02
2f0b0     0C 28 86 F1 | 	sub	local02, #12
2f0b4     1C 26 06 F1 | 	add	local01, #28
2f0b8     13 3B 02 FB | 	rdlong	local11, local01
2f0bc     1C 26 86 F1 | 	sub	local01, #28
2f0c0     1D 15 02 F6 | 	mov	arg02, local11
2f0c4     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2f0c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f0cc     16 3B 02 56 |  if_ne	mov	local11, local04
2f0d0     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2f0d4     01 3A 86 51 |  if_ne	sub	local11, #1
2f0d8     1D 37 02 56 |  if_ne	mov	local09, local11
2f0dc     04 00 90 5D |  if_ne	jmp	#LR__4645
2f0e0                 | LR__4644
2f0e0     FF 36 06 F6 | 	mov	local09, #255
2f0e4                 | LR__4645
2f0e4     1B 2D 02 F6 | 	mov	local04, local09
2f0e8     78 00 90 FD | 	jmp	#LR__4649
2f0ec                 | LR__4646
2f0ec     16 37 02 F6 | 	mov	local09, local04
2f0f0     07 36 4E F7 | 	zerox	local09, #7 wz
2f0f4     20 00 90 5D |  if_ne	jmp	#LR__4647
2f0f8     15 39 E2 F8 | 	getbyte	local10, local03, #0
2f0fc     1C 26 06 F1 | 	add	local01, #28
2f100     13 13 02 FB | 	rdlong	arg01, local01
2f104     1C 26 86 F1 | 	sub	local01, #28
2f108     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2f10c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f110     FD 38 0A F2 | 	cmp	local10, result1 wz
2f114     60 00 90 AD |  if_e	jmp	#LR__4651
2f118                 | LR__4647
2f118     2B 26 06 F1 | 	add	local01, #43
2f11c     13 37 C2 FA | 	rdbyte	local09, local01
2f120     2B 26 86 F1 | 	sub	local01, #43
2f124     01 36 CE F7 | 	test	local09, #1 wz
2f128     24 00 90 5D |  if_ne	jmp	#LR__4648
2f12c     1C 26 06 F1 | 	add	local01, #28
2f130     13 13 02 FB | 	rdlong	arg01, local01
2f134     04 26 06 F1 | 	add	local01, #4
2f138     13 15 02 F6 | 	mov	arg02, local01
2f13c     20 26 86 F1 | 	sub	local01, #32
2f140     0B 16 06 F6 | 	mov	arg03, #11
2f144     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2f148     00 FA 0D F2 | 	cmp	result1, #0 wz
2f14c     28 00 90 AD |  if_e	jmp	#LR__4651
2f150                 | LR__4648
2f150     FF 2C 06 F6 | 	mov	local04, #255
2f154     2C 26 06 F1 | 	add	local01, #44
2f158     FF FF FF FF 
2f15c     13 FF 6B FC | 	wrlong	##-1, local01
2f160     2C 26 86 F1 | 	sub	local01, #44
2f164                 | LR__4649
2f164                 | LR__4650
2f164     13 13 02 F6 | 	mov	arg01, local01
2f168     00 14 06 F6 | 	mov	arg02, #0
2f16c     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2f170     FD 2E 0A F6 | 	mov	local05, result1 wz
2f174     04 FE 9F AD |  if_e	jmp	#LR__4640
2f178                 | LR__4651
2f178                 | ' 
2f178                 | ' 	return res;
2f178     17 FB 01 F6 | 	mov	result1, local05
2f17c                 | LR__4652
2f17c     A7 F0 03 F6 | 	mov	ptra, fp
2f180     B2 00 A0 FD | 	call	#popregs_
2f184                 | _fatfs_cc_dir_find_ret
2f184     2D 00 64 FD | 	ret
2f188                 | 
2f188                 | _fatfs_cc_dir_register
2f188     0A 4A 05 F6 | 	mov	COUNT_, #10
2f18c     A8 00 A0 FD | 	call	#pushregs_
2f190     2C F0 07 F1 | 	add	ptra, #44
2f194     04 4E 05 F1 | 	add	fp, #4
2f198     A7 12 62 FC | 	wrlong	arg01, fp
2f19c     09 27 02 FB | 	rdlong	local01, arg01
2f1a0     08 4E 05 F1 | 	add	fp, #8
2f1a4     A7 26 62 FC | 	wrlong	local01, fp
2f1a8     08 4E 85 F1 | 	sub	fp, #8
2f1ac     A7 28 02 FB | 	rdlong	local02, fp
2f1b0     04 4E 85 F1 | 	sub	fp, #4
2f1b4     2B 28 06 F1 | 	add	local02, #43
2f1b8     14 29 C2 FA | 	rdbyte	local02, local02
2f1bc     A0 28 CE F7 | 	test	local02, #160 wz
2f1c0     06 FA 05 56 |  if_ne	mov	result1, #6
2f1c4     F8 03 90 5D |  if_ne	jmp	#LR__4675
2f1c8                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2f1c8     14 4E 05 F1 | 	add	fp, #20
2f1cc     A7 00 68 FC | 	wrlong	#0, fp
2f1d0     14 4E 85 F1 | 	sub	fp, #20
2f1d4     97 28 48 FB | 	callpa	#(@LR__4661-@LR__4660)>>2,fcache_load_ptr_
2f1d8                 | LR__4660
2f1d8     0C 4E 05 F1 | 	add	fp, #12
2f1dc     A7 28 02 FB | 	rdlong	local02, fp
2f1e0     0C 28 06 F1 | 	add	local02, #12
2f1e4     14 2B 02 FB | 	rdlong	local03, local02
2f1e8     08 4E 05 F1 | 	add	fp, #8
2f1ec     A7 2C 02 FB | 	rdlong	local04, fp
2f1f0     14 4E 85 F1 | 	sub	fp, #20
2f1f4     01 2C 66 F0 | 	shl	local04, #1
2f1f8     15 2D 02 F1 | 	add	local04, local03
2f1fc     16 29 EA FA | 	rdword	local02, local04 wz
2f200     24 00 90 AD |  if_e	jmp	#LR__4662
2f204     14 4E 05 F1 | 	add	fp, #20
2f208     A7 2E 02 FB | 	rdlong	local05, fp
2f20c     17 31 02 F6 | 	mov	local06, local05
2f210     17 33 02 F6 | 	mov	local07, local05
2f214     19 35 02 F6 | 	mov	local08, local07
2f218     01 34 06 F1 | 	add	local08, #1
2f21c     A7 34 62 FC | 	wrlong	local08, fp
2f220     14 4E 85 F1 | 	sub	fp, #20
2f224     B0 FF 9F FD | 	jmp	#LR__4660
2f228                 | LR__4661
2f228                 | LR__4662
2f228     1C 4E 05 F1 | 	add	fp, #28
2f22c     A7 12 02 F6 | 	mov	arg01, fp
2f230     18 4E 85 F1 | 	sub	fp, #24
2f234     A7 14 02 FB | 	rdlong	arg02, fp
2f238     04 4E 85 F1 | 	sub	fp, #4
2f23c     20 14 06 F1 | 	add	arg02, #32
2f240     0C 16 06 F6 | 	mov	arg03, #12
2f244     18 6C BF FD | 	call	#__system____builtin_memmove
2f248     27 4E 05 F1 | 	add	fp, #39
2f24c     A7 36 C2 FA | 	rdbyte	local09, fp
2f250     27 4E 85 F1 | 	sub	fp, #39
2f254     01 36 CE F7 | 	test	local09, #1 wz
2f258     F4 00 90 AD |  if_e	jmp	#LR__4665
2f25c     04 4E 05 F1 | 	add	fp, #4
2f260     A7 38 02 FB | 	rdlong	local10, fp
2f264     2B 38 06 F1 | 	add	local10, #43
2f268     1C 81 48 FC | 	wrbyte	#64, local10
2f26c                 | ' 		dp->fn[ 11 ] =  0x40 ;
2f26c                 | ' 		for (n = 1; n < 100; n++) {
2f26c     0C 4E 05 F1 | 	add	fp, #12
2f270     A7 02 68 FC | 	wrlong	#1, fp
2f274     10 4E 85 F1 | 	sub	fp, #16
2f278                 | LR__4663
2f278     10 4E 05 F1 | 	add	fp, #16
2f27c     A7 28 02 FB | 	rdlong	local02, fp
2f280     10 4E 85 F1 | 	sub	fp, #16
2f284     64 28 16 F2 | 	cmp	local02, #100 wc
2f288     70 00 90 3D |  if_ae	jmp	#LR__4664
2f28c     04 4E 05 F1 | 	add	fp, #4
2f290     A7 12 02 FB | 	rdlong	arg01, fp
2f294     20 12 06 F1 | 	add	arg01, #32
2f298     18 4E 05 F1 | 	add	fp, #24
2f29c     A7 14 02 F6 | 	mov	arg02, fp
2f2a0     10 4E 85 F1 | 	sub	fp, #16
2f2a4     A7 38 02 FB | 	rdlong	local10, fp
2f2a8     0C 38 06 F1 | 	add	local10, #12
2f2ac     1C 17 02 FB | 	rdlong	arg03, local10
2f2b0     04 4E 05 F1 | 	add	fp, #4
2f2b4     A7 18 02 FB | 	rdlong	arg04, fp
2f2b8     10 4E 85 F1 | 	sub	fp, #16
2f2bc     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2f2c0     04 4E 05 F1 | 	add	fp, #4
2f2c4     A7 12 02 FB | 	rdlong	arg01, fp
2f2c8     04 4E 85 F1 | 	sub	fp, #4
2f2cc     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2f2d0     08 4E 05 F1 | 	add	fp, #8
2f2d4     A7 FA 61 FC | 	wrlong	result1, fp
2f2d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f2dc     08 4E 85 F1 | 	sub	fp, #8
2f2e0     18 00 90 5D |  if_ne	jmp	#LR__4664
2f2e4     10 4E 05 F1 | 	add	fp, #16
2f2e8     A7 38 02 FB | 	rdlong	local10, fp
2f2ec     01 38 06 F1 | 	add	local10, #1
2f2f0     A7 38 62 FC | 	wrlong	local10, fp
2f2f4     10 4E 85 F1 | 	sub	fp, #16
2f2f8     7C FF 9F FD | 	jmp	#LR__4663
2f2fc                 | LR__4664
2f2fc     10 4E 05 F1 | 	add	fp, #16
2f300     A7 38 02 FB | 	rdlong	local10, fp
2f304     10 4E 85 F1 | 	sub	fp, #16
2f308     64 38 0E F2 | 	cmp	local10, #100 wz
2f30c     07 FA 05 A6 |  if_e	mov	result1, #7
2f310     AC 02 90 AD |  if_e	jmp	#LR__4675
2f314     08 4E 05 F1 | 	add	fp, #8
2f318     A7 38 02 FB | 	rdlong	local10, fp
2f31c     08 4E 85 F1 | 	sub	fp, #8
2f320     04 38 0E F2 | 	cmp	local10, #4 wz
2f324     08 4E 05 51 |  if_ne	add	fp, #8
2f328     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2f32c     08 4E 85 51 |  if_ne	sub	fp, #8
2f330     8C 02 90 5D |  if_ne	jmp	#LR__4675
2f334     04 4E 05 F1 | 	add	fp, #4
2f338     A7 38 02 FB | 	rdlong	local10, fp
2f33c     23 4E 05 F1 | 	add	fp, #35
2f340     A7 26 C2 FA | 	rdbyte	local01, fp
2f344     27 4E 85 F1 | 	sub	fp, #39
2f348     2B 38 06 F1 | 	add	local10, #43
2f34c     1C 27 42 FC | 	wrbyte	local01, local10
2f350                 | LR__4665
2f350     27 4E 05 F1 | 	add	fp, #39
2f354     A7 28 C2 FA | 	rdbyte	local02, fp
2f358     27 4E 85 F1 | 	sub	fp, #39
2f35c     02 28 CE F7 | 	test	local02, #2 wz
2f360     20 00 90 AD |  if_e	jmp	#LR__4666
2f364     14 4E 05 F1 | 	add	fp, #20
2f368     A7 38 02 FB | 	rdlong	local10, fp
2f36c     0C 38 06 F1 | 	add	local10, #12
2f370     0D 38 16 FD | 	qdiv	local10, #13
2f374     14 4E 85 F1 | 	sub	fp, #20
2f378     18 38 62 FD | 	getqx	local10
2f37c     01 38 06 F1 | 	add	local10, #1
2f380     04 00 90 FD | 	jmp	#LR__4667
2f384                 | LR__4666
2f384     01 38 06 F6 | 	mov	local10, #1
2f388                 | LR__4667
2f388     18 4E 05 F1 | 	add	fp, #24
2f38c     A7 38 62 FC | 	wrlong	local10, fp
2f390     14 4E 85 F1 | 	sub	fp, #20
2f394     A7 12 02 FB | 	rdlong	arg01, fp
2f398     1C 15 02 F6 | 	mov	arg02, local10
2f39c     04 4E 85 F1 | 	sub	fp, #4
2f3a0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2f3a4     08 4E 05 F1 | 	add	fp, #8
2f3a8     A7 FA 61 FC | 	wrlong	result1, fp
2f3ac     08 4E 85 F1 | 	sub	fp, #8
2f3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f3b4     38 01 90 5D |  if_ne	jmp	#LR__4672
2f3b8     18 4E 05 F1 | 	add	fp, #24
2f3bc     A7 38 02 FB | 	rdlong	local10, fp
2f3c0     01 38 8E F1 | 	sub	local10, #1 wz
2f3c4     A7 38 62 FC | 	wrlong	local10, fp
2f3c8     18 4E 85 F1 | 	sub	fp, #24
2f3cc     20 01 90 AD |  if_e	jmp	#LR__4672
2f3d0     04 4E 05 F1 | 	add	fp, #4
2f3d4     A7 38 02 FB | 	rdlong	local10, fp
2f3d8     1C 13 02 F6 | 	mov	arg01, local10
2f3dc     14 4E 05 F1 | 	add	fp, #20
2f3e0     A7 18 02 FB | 	rdlong	arg04, fp
2f3e4     18 4E 85 F1 | 	sub	fp, #24
2f3e8     05 18 66 F0 | 	shl	arg04, #5
2f3ec     10 38 06 F1 | 	add	local10, #16
2f3f0     1C 15 02 FB | 	rdlong	arg02, local10
2f3f4     0C 15 82 F1 | 	sub	arg02, arg04
2f3f8     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f3fc     08 4E 05 F1 | 	add	fp, #8
2f400     A7 FA 61 FC | 	wrlong	result1, fp
2f404     08 4E 85 F1 | 	sub	fp, #8
2f408     00 FA 0D F2 | 	cmp	result1, #0 wz
2f40c     E0 00 90 5D |  if_ne	jmp	#LR__4671
2f410     04 4E 05 F1 | 	add	fp, #4
2f414     A7 12 02 FB | 	rdlong	arg01, fp
2f418     04 4E 85 F1 | 	sub	fp, #4
2f41c     20 12 06 F1 | 	add	arg01, #32
2f420     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2f424     FD 38 02 F6 | 	mov	local10, result1
2f428     28 4E 05 F1 | 	add	fp, #40
2f42c     A7 38 42 FC | 	wrbyte	local10, fp
2f430     28 4E 85 F1 | 	sub	fp, #40
2f434                 | ' 			sum = sum_sfn(dp->fn);
2f434                 | ' 			do {
2f434                 | LR__4668
2f434     0C 4E 05 F1 | 	add	fp, #12
2f438     A7 12 02 FB | 	rdlong	arg01, fp
2f43c     08 4E 85 F1 | 	sub	fp, #8
2f440     A7 26 02 FB | 	rdlong	local01, fp
2f444     04 4E 85 F1 | 	sub	fp, #4
2f448     18 26 06 F1 | 	add	local01, #24
2f44c     13 15 02 FB | 	rdlong	arg02, local01
2f450     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2f454     08 4E 05 F1 | 	add	fp, #8
2f458     A7 FA 61 FC | 	wrlong	result1, fp
2f45c     00 FA 4D F2 | 	cmps	result1, #0 wz
2f460     08 4E 85 F1 | 	sub	fp, #8
2f464     88 00 90 5D |  if_ne	jmp	#LR__4670
2f468     0C 4E 05 F1 | 	add	fp, #12
2f46c     A7 28 02 FB | 	rdlong	local02, fp
2f470     0C 28 06 F1 | 	add	local02, #12
2f474     14 13 02 FB | 	rdlong	arg01, local02
2f478     08 4E 85 F1 | 	sub	fp, #8
2f47c     A7 26 02 FB | 	rdlong	local01, fp
2f480     1C 26 06 F1 | 	add	local01, #28
2f484     13 15 02 FB | 	rdlong	arg02, local01
2f488     14 4E 05 F1 | 	add	fp, #20
2f48c     A7 16 02 FB | 	rdlong	arg03, fp
2f490     10 4E 05 F1 | 	add	fp, #16
2f494     A7 18 C2 FA | 	rdbyte	arg04, fp
2f498     28 4E 85 F1 | 	sub	fp, #40
2f49c     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2f4a0     0C 4E 05 F1 | 	add	fp, #12
2f4a4     A7 38 02 FB | 	rdlong	local10, fp
2f4a8     03 38 06 F1 | 	add	local10, #3
2f4ac     1C 03 48 FC | 	wrbyte	#1, local10
2f4b0     08 4E 85 F1 | 	sub	fp, #8
2f4b4     A7 12 02 FB | 	rdlong	arg01, fp
2f4b8     04 4E 85 F1 | 	sub	fp, #4
2f4bc     00 14 06 F6 | 	mov	arg02, #0
2f4c0     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2f4c4     08 4E 05 F1 | 	add	fp, #8
2f4c8     A7 FA 61 FC | 	wrlong	result1, fp
2f4cc     00 FA 4D F2 | 	cmps	result1, #0 wz
2f4d0     08 4E 85 F1 | 	sub	fp, #8
2f4d4     18 00 90 5D |  if_ne	jmp	#LR__4669
2f4d8     18 4E 05 F1 | 	add	fp, #24
2f4dc     A7 38 02 FB | 	rdlong	local10, fp
2f4e0     01 38 8E F1 | 	sub	local10, #1 wz
2f4e4     A7 38 62 FC | 	wrlong	local10, fp
2f4e8     18 4E 85 F1 | 	sub	fp, #24
2f4ec     44 FF 9F 5D |  if_ne	jmp	#LR__4668
2f4f0                 | LR__4669
2f4f0                 | LR__4670
2f4f0                 | LR__4671
2f4f0                 | LR__4672
2f4f0     08 4E 05 F1 | 	add	fp, #8
2f4f4     A7 38 0A FB | 	rdlong	local10, fp wz
2f4f8     08 4E 85 F1 | 	sub	fp, #8
2f4fc     B4 00 90 5D |  if_ne	jmp	#LR__4674
2f500     0C 4E 05 F1 | 	add	fp, #12
2f504     A7 12 02 FB | 	rdlong	arg01, fp
2f508     08 4E 85 F1 | 	sub	fp, #8
2f50c     A7 26 02 FB | 	rdlong	local01, fp
2f510     04 4E 85 F1 | 	sub	fp, #4
2f514     18 26 06 F1 | 	add	local01, #24
2f518     13 15 02 FB | 	rdlong	arg02, local01
2f51c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2f520     08 4E 05 F1 | 	add	fp, #8
2f524     A7 FA 61 FC | 	wrlong	result1, fp
2f528     08 4E 85 F1 | 	sub	fp, #8
2f52c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f530     80 00 90 5D |  if_ne	jmp	#LR__4673
2f534     04 4E 05 F1 | 	add	fp, #4
2f538     A7 28 02 FB | 	rdlong	local02, fp
2f53c     04 4E 85 F1 | 	sub	fp, #4
2f540     1C 28 06 F1 | 	add	local02, #28
2f544     14 13 02 FB | 	rdlong	arg01, local02
2f548     00 14 06 F6 | 	mov	arg02, #0
2f54c     20 16 06 F6 | 	mov	arg03, #32
2f550     98 00 A0 FD | 	call	#\builtin_bytefill_
2f554     04 4E 05 F1 | 	add	fp, #4
2f558     A7 14 02 FB | 	rdlong	arg02, fp
2f55c     0A 27 02 F6 | 	mov	local01, arg02
2f560     1C 26 06 F1 | 	add	local01, #28
2f564     13 13 02 FB | 	rdlong	arg01, local01
2f568     04 4E 85 F1 | 	sub	fp, #4
2f56c     20 14 06 F1 | 	add	arg02, #32
2f570     0B 16 06 F6 | 	mov	arg03, #11
2f574     E8 68 BF FD | 	call	#__system____builtin_memmove
2f578     04 4E 05 F1 | 	add	fp, #4
2f57c     A7 36 02 FB | 	rdlong	local09, fp
2f580     1B 39 02 F6 | 	mov	local10, local09
2f584     1C 38 06 F1 | 	add	local10, #28
2f588     1C 27 02 FB | 	rdlong	local01, local10
2f58c     2B 36 06 F1 | 	add	local09, #43
2f590     1B 39 C2 FA | 	rdbyte	local10, local09
2f594     18 38 06 F5 | 	and	local10, #24
2f598     0C 26 06 F1 | 	add	local01, #12
2f59c     13 39 42 FC | 	wrbyte	local10, local01
2f5a0     08 4E 05 F1 | 	add	fp, #8
2f5a4     A7 38 02 FB | 	rdlong	local10, fp
2f5a8     0C 4E 85 F1 | 	sub	fp, #12
2f5ac     03 38 06 F1 | 	add	local10, #3
2f5b0     1C 03 48 FC | 	wrbyte	#1, local10
2f5b4                 | LR__4673
2f5b4                 | LR__4674
2f5b4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2f5b4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2f5b4                 | ' 
2f5b4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2f5b4                 | ' 
2f5b4                 | ' 			fs->wflag = 1;
2f5b4                 | ' 		}
2f5b4                 | ' 	}
2f5b4                 | ' 
2f5b4                 | ' 	return res;
2f5b4     08 4E 05 F1 | 	add	fp, #8
2f5b8     A7 FA 01 FB | 	rdlong	result1, fp
2f5bc     08 4E 85 F1 | 	sub	fp, #8
2f5c0                 | LR__4675
2f5c0     A7 F0 03 F6 | 	mov	ptra, fp
2f5c4     B2 00 A0 FD | 	call	#popregs_
2f5c8                 | _fatfs_cc_dir_register_ret
2f5c8     2D 00 64 FD | 	ret
2f5cc                 | 
2f5cc                 | _fatfs_cc_dir_remove
2f5cc     05 4A 05 F6 | 	mov	COUNT_, #5
2f5d0     A8 00 A0 FD | 	call	#pushregs_
2f5d4     09 27 02 F6 | 	mov	local01, arg01
2f5d8     13 29 02 FB | 	rdlong	local02, local01
2f5dc     10 26 06 F1 | 	add	local01, #16
2f5e0     13 2B 02 FB | 	rdlong	local03, local01
2f5e4     1C 26 06 F1 | 	add	local01, #28
2f5e8     13 15 02 FB | 	rdlong	arg02, local01
2f5ec     2C 26 86 F1 | 	sub	local01, #44
2f5f0     FF FF 7F FF 
2f5f4     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2f5f8     00 2C 06 A6 |  if_e	mov	local04, #0
2f5fc     18 00 90 AD |  if_e	jmp	#LR__4680
2f600     13 13 02 F6 | 	mov	arg01, local01
2f604     2C 26 06 F1 | 	add	local01, #44
2f608     13 15 02 FB | 	rdlong	arg02, local01
2f60c     2C 26 86 F1 | 	sub	local01, #44
2f610     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2f614     FD 2C 02 F6 | 	mov	local04, result1
2f618                 | LR__4680
2f618     16 2F 0A F6 | 	mov	local05, local04 wz
2f61c     64 00 90 5D |  if_ne	jmp	#LR__4683
2f620                 | ' 		do {
2f620                 | LR__4681
2f620     18 26 06 F1 | 	add	local01, #24
2f624     13 15 02 FB | 	rdlong	arg02, local01
2f628     18 26 86 F1 | 	sub	local01, #24
2f62c     14 13 02 F6 | 	mov	arg01, local02
2f630     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2f634     FD 2E 0A F6 | 	mov	local05, result1 wz
2f638     40 00 90 5D |  if_ne	jmp	#LR__4682
2f63c     1C 26 06 F1 | 	add	local01, #28
2f640     13 2D 02 FB | 	rdlong	local04, local01
2f644     16 CB 49 FC | 	wrbyte	#229, local04
2f648     03 28 06 F1 | 	add	local02, #3
2f64c     14 03 48 FC | 	wrbyte	#1, local02
2f650     03 28 86 F1 | 	sub	local02, #3
2f654     0C 26 86 F1 | 	sub	local01, #12
2f658     13 2D 02 FB | 	rdlong	local04, local01
2f65c     10 26 86 F1 | 	sub	local01, #16
2f660     15 2D 12 F2 | 	cmp	local04, local03 wc
2f664     14 00 90 3D |  if_ae	jmp	#LR__4682
2f668     13 13 02 F6 | 	mov	arg01, local01
2f66c     00 14 06 F6 | 	mov	arg02, #0
2f670     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2f674     FD 2E 0A F6 | 	mov	local05, result1 wz
2f678     A4 FF 9F AD |  if_e	jmp	#LR__4681
2f67c                 | LR__4682
2f67c     04 2E 0E F2 | 	cmp	local05, #4 wz
2f680     02 2E 06 A6 |  if_e	mov	local05, #2
2f684                 | LR__4683
2f684                 | ' 	}
2f684                 | ' #line 2590 "ff.c"
2f684                 | ' 	return res;
2f684     17 FB 01 F6 | 	mov	result1, local05
2f688     A7 F0 03 F6 | 	mov	ptra, fp
2f68c     B2 00 A0 FD | 	call	#popregs_
2f690                 | _fatfs_cc_dir_remove_ret
2f690     2D 00 64 FD | 	ret
2f694                 | 
2f694                 | _fatfs_cc_get_fileinfo
2f694     0F 4A 05 F6 | 	mov	COUNT_, #15
2f698     A8 00 A0 FD | 	call	#pushregs_
2f69c     09 27 02 F6 | 	mov	local01, arg01
2f6a0     0A 29 02 F6 | 	mov	local02, arg02
2f6a4     13 2B 02 FB | 	rdlong	local03, local01
2f6a8     1C 28 06 F1 | 	add	local02, #28
2f6ac     14 01 48 FC | 	wrbyte	#0, local02
2f6b0     1C 28 86 F1 | 	sub	local02, #28
2f6b4     18 26 06 F1 | 	add	local01, #24
2f6b8     13 2D 0A FB | 	rdlong	local04, local01 wz
2f6bc     18 26 86 F1 | 	sub	local01, #24
2f6c0     90 03 90 AD |  if_e	jmp	#LR__4704
2f6c4     2C 26 06 F1 | 	add	local01, #44
2f6c8     13 2D 02 FB | 	rdlong	local04, local01
2f6cc     2C 26 86 F1 | 	sub	local01, #44
2f6d0     FF FF 7F FF 
2f6d4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2f6d8     D8 00 90 AD |  if_e	jmp	#LR__4693
2f6dc     00 2E 06 F6 | 	mov	local05, #0
2f6e0     00 30 06 F6 | 	mov	local06, #0
2f6e4     00 32 06 F6 | 	mov	local07, #0
2f6e8                 | ' 			si = di = 0;
2f6e8                 | ' 			hs = 0;
2f6e8                 | ' 			while (fs->lfnbuf[si] != 0) {
2f6e8                 | LR__4690
2f6e8     0C 2A 06 F1 | 	add	local03, #12
2f6ec     15 2D 02 FB | 	rdlong	local04, local03
2f6f0     0C 2A 86 F1 | 	sub	local03, #12
2f6f4     18 35 02 F6 | 	mov	local08, local06
2f6f8     01 34 66 F0 | 	shl	local08, #1
2f6fc     16 35 02 F1 | 	add	local08, local04
2f700     1A 2D EA FA | 	rdword	local04, local08 wz
2f704     90 00 90 AD |  if_e	jmp	#LR__4692
2f708     0C 2A 06 F1 | 	add	local03, #12
2f70c     15 37 02 FB | 	rdlong	local09, local03
2f710     0C 2A 86 F1 | 	sub	local03, #12
2f714     18 39 02 F6 | 	mov	local10, local06
2f718     01 38 66 F0 | 	shl	local10, #1
2f71c     1B 39 02 F1 | 	add	local10, local09
2f720     1C 3B E2 FA | 	rdword	local11, local10
2f724     19 2D 02 F6 | 	mov	local04, local07
2f728     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f72c     01 30 06 F1 | 	add	local06, #1
2f730     24 00 90 5D |  if_ne	jmp	#LR__4691
2f734     1D 3D 32 F9 | 	getword	local12, local11, #0
2f738     6C 00 00 FF 
2f73c     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2f740     14 00 90 CD |  if_b	jmp	#LR__4691
2f744     1D 3F 32 F9 | 	getword	local13, local11, #0
2f748     70 00 00 FF 
2f74c     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2f750     1D 33 02 C6 |  if_b	mov	local07, local11
2f754                 | ' 					hs = wc; continue;
2f754     90 FF 9F CD |  if_b	jmp	#LR__4690
2f758                 | LR__4691
2f758     19 13 32 F9 | 	getword	arg01, local07, #0
2f75c     10 12 66 F0 | 	shl	arg01, #16
2f760     1D 3B 32 F9 | 	getword	local11, local11, #0
2f764     1D 13 42 F5 | 	or	arg01, local11
2f768     17 15 02 F6 | 	mov	arg02, local05
2f76c     1C 28 06 F1 | 	add	local02, #28
2f770     14 15 02 F1 | 	add	arg02, local02
2f774     FF 16 06 F6 | 	mov	arg03, #255
2f778     17 17 82 F1 | 	sub	arg03, local05
2f77c     1C 28 86 F1 | 	sub	local02, #28
2f780     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2f784     FD 40 0A F6 | 	mov	local14, result1 wz
2f788     00 2E 06 A6 |  if_e	mov	local05, #0
2f78c     20 2F 02 51 |  if_ne	add	local05, local14
2f790     00 32 06 56 |  if_ne	mov	local07, #0
2f794     50 FF 9F 5D |  if_ne	jmp	#LR__4690
2f798                 | LR__4692
2f798     19 2D 02 F6 | 	mov	local04, local07
2f79c     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f7a0     00 2E 06 56 |  if_ne	mov	local05, #0
2f7a4     1C 28 06 F1 | 	add	local02, #28
2f7a8     14 2F 02 F1 | 	add	local05, local02
2f7ac     17 01 48 FC | 	wrbyte	#0, local05
2f7b0     1C 28 86 F1 | 	sub	local02, #28
2f7b4                 | LR__4693
2f7b4     00 2E 06 F6 | 	mov	local05, #0
2f7b8     00 30 06 F6 | 	mov	local06, #0
2f7bc                 | ' 			fno->fname[di] = 0;
2f7bc                 | ' 		}
2f7bc                 | ' 	}
2f7bc                 | ' 
2f7bc                 | ' 	si = di = 0;
2f7bc                 | ' 	while (si < 11) {
2f7bc                 | LR__4694
2f7bc     0B 30 16 F2 | 	cmp	local06, #11 wc
2f7c0     20 01 90 3D |  if_ae	jmp	#LR__4697
2f7c4     1C 26 06 F1 | 	add	local01, #28
2f7c8     13 37 02 FB | 	rdlong	local09, local01
2f7cc     1C 26 86 F1 | 	sub	local01, #28
2f7d0     18 39 02 F6 | 	mov	local10, local06
2f7d4     1B 39 02 F1 | 	add	local10, local09
2f7d8     1C 3B C2 FA | 	rdbyte	local11, local10
2f7dc     1D 2D 32 F9 | 	getword	local04, local11, #0
2f7e0     20 2C 0E F2 | 	cmp	local04, #32 wz
2f7e4     01 30 06 F1 | 	add	local06, #1
2f7e8     D0 FF 9F AD |  if_e	jmp	#LR__4694
2f7ec     1D 2D 32 F9 | 	getword	local04, local11, #0
2f7f0     05 2C 0E F2 | 	cmp	local04, #5 wz
2f7f4     E5 3A 06 A6 |  if_e	mov	local11, #229
2f7f8     09 30 0E F2 | 	cmp	local06, #9 wz
2f7fc     20 00 90 5D |  if_ne	jmp	#LR__4695
2f800     0C 2E 16 F2 | 	cmp	local05, #12 wc
2f804     18 00 90 3D |  if_ae	jmp	#LR__4695
2f808     17 3F 02 F6 | 	mov	local13, local05
2f80c     0C 28 06 F1 | 	add	local02, #12
2f810     14 3F 02 F1 | 	add	local13, local02
2f814     1F 5D 48 FC | 	wrbyte	#46, local13
2f818     01 2E 06 F1 | 	add	local05, #1
2f81c     0C 28 86 F1 | 	sub	local02, #12
2f820                 | LR__4695
2f820     1D 13 32 F9 | 	getword	arg01, local11, #0
2f824     07 12 4E F7 | 	zerox	arg01, #7 wz
2f828     00 FA 05 56 |  if_ne	mov	result1, #0
2f82c                 | ' 
2f82c                 | ' 	return 0;
2f82c     00 FA 05 A6 |  if_e	mov	result1, #0
2f830     00 FA 0D F2 | 	cmp	result1, #0 wz
2f834     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2f838     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2f83c     50 00 90 AD |  if_e	jmp	#LR__4696
2f840     1C 26 06 F1 | 	add	local01, #28
2f844     13 39 02 FB | 	rdlong	local10, local01
2f848     1C 26 86 F1 | 	sub	local01, #28
2f84c     18 35 02 F6 | 	mov	local08, local06
2f850     1C 35 02 F1 | 	add	local08, local10
2f854     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2f858     00 FA 05 56 |  if_ne	mov	result1, #0
2f85c                 | ' 
2f85c                 | ' 	return 0;
2f85c     00 FA 05 A6 |  if_e	mov	result1, #0
2f860     00 FA 0D F2 | 	cmp	result1, #0 wz
2f864     28 00 90 AD |  if_e	jmp	#LR__4696
2f868     1D 3B 32 F9 | 	getword	local11, local11, #0
2f86c     08 3A 66 F0 | 	shl	local11, #8
2f870     1C 26 06 F1 | 	add	local01, #28
2f874     13 41 02 FB | 	rdlong	local14, local01
2f878     1C 26 86 F1 | 	sub	local01, #28
2f87c     18 37 02 F6 | 	mov	local09, local06
2f880     20 37 02 F1 | 	add	local09, local14
2f884     1B 3D C2 FA | 	rdbyte	local12, local09
2f888     1E 3B 42 F5 | 	or	local11, local12
2f88c     01 30 06 F1 | 	add	local06, #1
2f890                 | LR__4696
2f890     1D 13 02 F6 | 	mov	arg01, local11
2f894     01 00 00 FF 
2f898     52 15 06 F6 | 	mov	arg02, ##850
2f89c     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2f8a0     FD 3A 02 F6 | 	mov	local11, result1
2f8a4     1D 2D 02 F6 | 	mov	local04, local11
2f8a8     0F 2C 4E F7 | 	zerox	local04, #15 wz
2f8ac     00 2E 06 A6 |  if_e	mov	local05, #0
2f8b0     30 00 90 AD |  if_e	jmp	#LR__4697
2f8b4     1D 13 32 F9 | 	getword	arg01, local11, #0
2f8b8     17 15 02 F6 | 	mov	arg02, local05
2f8bc     0C 28 06 F1 | 	add	local02, #12
2f8c0     14 15 02 F1 | 	add	arg02, local02
2f8c4     0C 16 06 F6 | 	mov	arg03, #12
2f8c8     17 17 82 F1 | 	sub	arg03, local05
2f8cc     0C 28 86 F1 | 	sub	local02, #12
2f8d0     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2f8d4     FD 40 0A F6 | 	mov	local14, result1 wz
2f8d8     00 2E 06 A6 |  if_e	mov	local05, #0
2f8dc     20 2F 02 51 |  if_ne	add	local05, local14
2f8e0     D8 FE 9F 5D |  if_ne	jmp	#LR__4694
2f8e4                 | LR__4697
2f8e4     17 2D 02 F6 | 	mov	local04, local05
2f8e8     0C 28 06 F1 | 	add	local02, #12
2f8ec     14 2D 02 F1 | 	add	local04, local02
2f8f0     16 01 48 FC | 	wrbyte	#0, local04
2f8f4     10 28 06 F1 | 	add	local02, #16
2f8f8     14 2D CA FA | 	rdbyte	local04, local02 wz
2f8fc     1C 28 86 F1 | 	sub	local02, #28
2f900     F8 00 90 5D |  if_ne	jmp	#LR__4703
2f904     00 2E 0E F2 | 	cmp	local05, #0 wz
2f908     1C 00 90 5D |  if_ne	jmp	#LR__4698
2f90c     17 3F 02 F6 | 	mov	local13, local05
2f910     1C 28 06 F1 | 	add	local02, #28
2f914     14 3F 02 F1 | 	add	local13, local02
2f918     1F 7F 48 FC | 	wrbyte	#63, local13
2f91c     01 2E 06 F1 | 	add	local05, #1
2f920     1C 28 86 F1 | 	sub	local02, #28
2f924     A4 00 90 FD | 	jmp	#LR__4702
2f928                 | LR__4698
2f928                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2f928     00 2E 06 F6 | 	mov	local05, #0
2f92c     00 30 06 F6 | 	mov	local06, #0
2f930     08 42 06 F6 | 	mov	local15, #8
2f934                 | LR__4699
2f934     18 2D 02 F6 | 	mov	local04, local06
2f938     0C 28 06 F1 | 	add	local02, #12
2f93c     14 2D 02 F1 | 	add	local04, local02
2f940     16 3F CA FA | 	rdbyte	local13, local04 wz
2f944     0C 28 86 F1 | 	sub	local02, #12
2f948     80 00 90 AD |  if_e	jmp	#LR__4701
2f94c     18 35 02 F6 | 	mov	local08, local06
2f950     0C 28 06 F1 | 	add	local02, #12
2f954     14 35 02 F1 | 	add	local08, local02
2f958     1A 3B C2 FA | 	rdbyte	local11, local08
2f95c     1D 41 32 F9 | 	getword	local14, local11, #0
2f960     2E 40 0E F2 | 	cmp	local14, #46 wz
2f964     0C 28 86 F1 | 	sub	local02, #12
2f968     10 42 06 A6 |  if_e	mov	local15, #16
2f96c     1D 41 32 F9 | 	getword	local14, local11, #0
2f970     41 40 16 F2 | 	cmp	local14, #65 wc
2f974     30 00 90 CD |  if_b	jmp	#LR__4700
2f978     1D 35 32 F9 | 	getword	local08, local11, #0
2f97c     5B 34 16 F2 | 	cmp	local08, #91 wc
2f980     24 00 90 3D |  if_ae	jmp	#LR__4700
2f984     1C 26 06 F1 | 	add	local01, #28
2f988     13 37 02 FB | 	rdlong	local09, local01
2f98c     1C 26 86 F1 | 	sub	local01, #28
2f990     0C 36 06 F1 | 	add	local09, #12
2f994     1B 39 C2 FA | 	rdbyte	local10, local09
2f998     21 41 E2 F8 | 	getbyte	local14, local15, #0
2f99c     20 39 CA F7 | 	test	local10, local14 wz
2f9a0     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2f9a4     20 3A 06 51 |  if_ne	add	local11, #32
2f9a8                 | LR__4700
2f9a8     17 41 02 F6 | 	mov	local14, local05
2f9ac     1C 28 06 F1 | 	add	local02, #28
2f9b0     14 41 02 F1 | 	add	local14, local02
2f9b4     1D 3B 32 F9 | 	getword	local11, local11, #0
2f9b8     20 3B 42 FC | 	wrbyte	local11, local14
2f9bc     01 30 06 F1 | 	add	local06, #1
2f9c0     01 2E 06 F1 | 	add	local05, #1
2f9c4     1C 28 86 F1 | 	sub	local02, #28
2f9c8     68 FF 9F FD | 	jmp	#LR__4699
2f9cc                 | LR__4701
2f9cc                 | LR__4702
2f9cc     1C 28 06 F1 | 	add	local02, #28
2f9d0     14 2F 02 F1 | 	add	local05, local02
2f9d4     17 01 48 FC | 	wrbyte	#0, local05
2f9d8     1C 26 06 F1 | 	add	local01, #28
2f9dc     13 2D 02 FB | 	rdlong	local04, local01
2f9e0     1C 26 86 F1 | 	sub	local01, #28
2f9e4     0C 2C 06 F1 | 	add	local04, #12
2f9e8     16 3F CA FA | 	rdbyte	local13, local04 wz
2f9ec     1C 28 86 F1 | 	sub	local02, #28
2f9f0     0C 28 06 A1 |  if_e	add	local02, #12
2f9f4     14 01 48 AC |  if_e	wrbyte	#0, local02
2f9f8     0C 28 86 A1 |  if_e	sub	local02, #12
2f9fc                 | LR__4703
2f9fc     1C 26 06 F1 | 	add	local01, #28
2fa00     13 3D 02 FB | 	rdlong	local12, local01
2fa04     0B 3C 06 F1 | 	add	local12, #11
2fa08     1E 2D C2 FA | 	rdbyte	local04, local12
2fa0c     3F 2C 06 F5 | 	and	local04, #63
2fa10     08 28 06 F1 | 	add	local02, #8
2fa14     14 2D 42 FC | 	wrbyte	local04, local02
2fa18     08 28 86 F1 | 	sub	local02, #8
2fa1c     13 13 02 FB | 	rdlong	arg01, local01
2fa20     1C 12 06 F1 | 	add	arg01, #28
2fa24                 | ' {
2fa24                 | ' 
2fa24                 | ' 	return *((DWORD*)ptr);
2fa24     09 FB 01 FB | 	rdlong	result1, arg01
2fa28     14 FB 61 FC | 	wrlong	result1, local02
2fa2c     13 13 02 FB | 	rdlong	arg01, local01
2fa30     16 12 06 F1 | 	add	arg01, #22
2fa34                 | ' {
2fa34                 | ' 
2fa34                 | ' 	return *((WORD*)ptr);
2fa34     09 FB E1 FA | 	rdword	result1, arg01
2fa38     06 28 06 F1 | 	add	local02, #6
2fa3c     14 FB 51 FC | 	wrword	result1, local02
2fa40     13 13 02 FB | 	rdlong	arg01, local01
2fa44     18 12 06 F1 | 	add	arg01, #24
2fa48                 | ' {
2fa48                 | ' 
2fa48                 | ' 	return *((WORD*)ptr);
2fa48     09 FB E1 FA | 	rdword	result1, arg01
2fa4c     02 28 86 F1 | 	sub	local02, #2
2fa50     14 FB 51 FC | 	wrword	result1, local02
2fa54                 | LR__4704
2fa54     A7 F0 03 F6 | 	mov	ptra, fp
2fa58     B2 00 A0 FD | 	call	#popregs_
2fa5c                 | _fatfs_cc_get_fileinfo_ret
2fa5c     2D 00 64 FD | 	ret
2fa60                 | 
2fa60                 | _fatfs_cc_create_name
2fa60     0D 4A 05 F6 | 	mov	COUNT_, #13
2fa64     A8 00 A0 FD | 	call	#pushregs_
2fa68     34 F0 07 F1 | 	add	ptra, #52
2fa6c     04 4E 05 F1 | 	add	fp, #4
2fa70     A7 12 62 FC | 	wrlong	arg01, fp
2fa74     04 4E 05 F1 | 	add	fp, #4
2fa78     A7 14 62 FC | 	wrlong	arg02, fp
2fa7c     0A FB 01 FB | 	rdlong	result1, arg02
2fa80     28 4E 05 F1 | 	add	fp, #40
2fa84     A7 FA 61 FC | 	wrlong	result1, fp
2fa88     2C 4E 85 F1 | 	sub	fp, #44
2fa8c     A7 FA 01 FB | 	rdlong	result1, fp
2fa90     FD 26 02 FB | 	rdlong	local01, result1
2fa94     0C 26 06 F1 | 	add	local01, #12
2fa98     13 29 02 FB | 	rdlong	local02, local01
2fa9c     14 4E 05 F1 | 	add	fp, #20
2faa0     A7 28 62 FC | 	wrlong	local02, fp
2faa4     14 4E 05 F1 | 	add	fp, #20
2faa8     A7 00 68 FC | 	wrlong	#0, fp
2faac     2C 4E 85 F1 | 	sub	fp, #44
2fab0                 | ' 
2fab0                 | ' 
2fab0                 | ' 
2fab0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2fab0                 | ' 	for (;;) {
2fab0                 | LR__4710
2fab0     30 4E 05 F1 | 	add	fp, #48
2fab4     A7 12 02 F6 | 	mov	arg01, fp
2fab8     30 4E 85 F1 | 	sub	fp, #48
2fabc     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2fac0     1C 4E 05 F1 | 	add	fp, #28
2fac4     A7 FA 61 FC | 	wrlong	result1, fp
2fac8     1C 4E 85 F1 | 	sub	fp, #28
2facc     FF FF 7F FF 
2fad0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2fad4     06 FA 05 A6 |  if_e	mov	result1, #6
2fad8     74 08 90 AD |  if_e	jmp	#LR__4750
2fadc     1C 4E 05 F1 | 	add	fp, #28
2fae0     A7 26 02 FB | 	rdlong	local01, fp
2fae4     1C 4E 85 F1 | 	sub	fp, #28
2fae8     80 00 00 FF 
2faec     00 26 16 F2 | 	cmp	local01, ##65536 wc
2faf0     3C 00 90 CD |  if_b	jmp	#LR__4711
2faf4     18 4E 05 F1 | 	add	fp, #24
2faf8     A7 2A 02 FB | 	rdlong	local03, fp
2fafc     14 4E 05 F1 | 	add	fp, #20
2fb00     A7 26 02 FB | 	rdlong	local01, fp
2fb04     13 2D 02 F6 | 	mov	local04, local01
2fb08     01 2C 06 F1 | 	add	local04, #1
2fb0c     A7 2C 62 FC | 	wrlong	local04, fp
2fb10     01 26 66 F0 | 	shl	local01, #1
2fb14     15 27 02 F1 | 	add	local01, local03
2fb18     10 4E 85 F1 | 	sub	fp, #16
2fb1c     A7 2E 02 FB | 	rdlong	local05, fp
2fb20     1C 4E 85 F1 | 	sub	fp, #28
2fb24     17 31 02 F6 | 	mov	local06, local05
2fb28     10 30 46 F0 | 	shr	local06, #16
2fb2c     13 31 52 FC | 	wrword	local06, local01
2fb30                 | LR__4711
2fb30     1C 4E 05 F1 | 	add	fp, #28
2fb34     A7 26 02 FB | 	rdlong	local01, fp
2fb38     08 4E 85 F1 | 	sub	fp, #8
2fb3c     A7 26 52 FC | 	wrword	local01, fp
2fb40     A7 26 E2 FA | 	rdword	local01, fp
2fb44     14 4E 85 F1 | 	sub	fp, #20
2fb48     20 26 16 F2 | 	cmp	local01, #32 wc
2fb4c     B0 00 90 CD |  if_b	jmp	#LR__4713
2fb50     14 4E 05 F1 | 	add	fp, #20
2fb54     A7 26 E2 FA | 	rdword	local01, fp
2fb58     14 4E 85 F1 | 	sub	fp, #20
2fb5c     2F 26 0E F2 | 	cmp	local01, #47 wz
2fb60     14 4E 05 51 |  if_ne	add	fp, #20
2fb64     A7 2C E2 5A |  if_ne	rdword	local04, fp
2fb68     14 4E 85 51 |  if_ne	sub	fp, #20
2fb6c     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2fb70     8C 00 90 AD |  if_e	jmp	#LR__4713
2fb74     14 4E 05 F1 | 	add	fp, #20
2fb78     A7 12 E2 FA | 	rdword	arg01, fp
2fb7c     14 4E 85 F1 | 	sub	fp, #20
2fb80     80 12 16 F2 | 	cmp	arg01, #128 wc
2fb84     24 00 90 3D |  if_ae	jmp	#LR__4712
2fb88     AD 01 00 FF 
2fb8c     C4 12 06 F6 | 	mov	arg01, ##@LR__5372
2fb90     14 4E 05 F1 | 	add	fp, #20
2fb94     A7 14 E2 FA | 	rdword	arg02, fp
2fb98     14 4E 85 F1 | 	sub	fp, #20
2fb9c     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2fba0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fba4     06 FA 05 56 |  if_ne	mov	result1, #6
2fba8     A4 07 90 5D |  if_ne	jmp	#LR__4750
2fbac                 | LR__4712
2fbac     2C 4E 05 F1 | 	add	fp, #44
2fbb0     A7 30 02 FB | 	rdlong	local06, fp
2fbb4     2C 4E 85 F1 | 	sub	fp, #44
2fbb8     FF 30 16 F2 | 	cmp	local06, #255 wc
2fbbc     06 FA 05 36 |  if_ae	mov	result1, #6
2fbc0     8C 07 90 3D |  if_ae	jmp	#LR__4750
2fbc4     18 4E 05 F1 | 	add	fp, #24
2fbc8     A7 2A 02 FB | 	rdlong	local03, fp
2fbcc     14 4E 05 F1 | 	add	fp, #20
2fbd0     A7 28 02 FB | 	rdlong	local02, fp
2fbd4     14 2D 02 F6 | 	mov	local04, local02
2fbd8     01 2C 06 F1 | 	add	local04, #1
2fbdc     A7 2C 62 FC | 	wrlong	local04, fp
2fbe0     14 27 02 F6 | 	mov	local01, local02
2fbe4     01 26 66 F0 | 	shl	local01, #1
2fbe8     15 27 02 F1 | 	add	local01, local03
2fbec     18 4E 85 F1 | 	sub	fp, #24
2fbf0     A7 30 E2 FA | 	rdword	local06, fp
2fbf4     14 4E 85 F1 | 	sub	fp, #20
2fbf8     13 31 52 FC | 	wrword	local06, local01
2fbfc     B0 FE 9F FD | 	jmp	#LR__4710
2fc00                 | LR__4713
2fc00     14 4E 05 F1 | 	add	fp, #20
2fc04     A7 32 E2 FA | 	rdword	local07, fp
2fc08     14 4E 85 F1 | 	sub	fp, #20
2fc0c     20 32 16 F2 | 	cmp	local07, #32 wc
2fc10     10 4E 05 C1 |  if_b	add	fp, #16
2fc14     A7 08 48 CC |  if_b	wrbyte	#4, fp
2fc18     10 4E 85 C1 |  if_b	sub	fp, #16
2fc1c     74 00 90 CD |  if_b	jmp	#LR__4718
2fc20     97 24 48 FB | 	callpa	#(@LR__4716-@LR__4714)>>2,fcache_load_ptr_
2fc24                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2fc24                 | LR__4714
2fc24     30 4E 05 F1 | 	add	fp, #48
2fc28     A7 2C 02 FB | 	rdlong	local04, fp
2fc2c     30 4E 85 F1 | 	sub	fp, #48
2fc30     16 33 C2 FA | 	rdbyte	local07, local04
2fc34     2F 32 0E F2 | 	cmp	local07, #47 wz
2fc38     18 00 90 AD |  if_e	jmp	#LR__4715
2fc3c     30 4E 05 F1 | 	add	fp, #48
2fc40     A7 2C 02 FB | 	rdlong	local04, fp
2fc44     30 4E 85 F1 | 	sub	fp, #48
2fc48     16 29 C2 FA | 	rdbyte	local02, local04
2fc4c     5C 28 0E F2 | 	cmp	local02, #92 wz
2fc50     18 00 90 5D |  if_ne	jmp	#LR__4717
2fc54                 | LR__4715
2fc54     30 4E 05 F1 | 	add	fp, #48
2fc58     A7 26 02 FB | 	rdlong	local01, fp
2fc5c     01 26 06 F1 | 	add	local01, #1
2fc60     A7 26 62 FC | 	wrlong	local01, fp
2fc64     30 4E 85 F1 | 	sub	fp, #48
2fc68     B8 FF 9F FD | 	jmp	#LR__4714
2fc6c                 | LR__4716
2fc6c                 | LR__4717
2fc6c     10 4E 05 F1 | 	add	fp, #16
2fc70     A7 00 48 FC | 	wrbyte	#0, fp
2fc74     20 4E 05 F1 | 	add	fp, #32
2fc78     A7 30 02 FB | 	rdlong	local06, fp
2fc7c     30 4E 85 F1 | 	sub	fp, #48
2fc80     18 33 C2 FA | 	rdbyte	local07, local06
2fc84     20 32 16 F2 | 	cmp	local07, #32 wc
2fc88     10 4E 05 C1 |  if_b	add	fp, #16
2fc8c     A7 08 48 CC |  if_b	wrbyte	#4, fp
2fc90     10 4E 85 C1 |  if_b	sub	fp, #16
2fc94                 | LR__4718
2fc94     08 4E 05 F1 | 	add	fp, #8
2fc98     A7 32 02 FB | 	rdlong	local07, fp
2fc9c     28 4E 05 F1 | 	add	fp, #40
2fca0     A7 26 02 FB | 	rdlong	local01, fp
2fca4     30 4E 85 F1 | 	sub	fp, #48
2fca8     19 27 62 FC | 	wrlong	local01, local07
2fcac     97 38 48 FB | 	callpa	#(@LR__4720-@LR__4719)>>2,fcache_load_ptr_
2fcb0                 | ' 	}
2fcb0                 | ' 	*path = p;
2fcb0                 | ' #line 2862 "ff.c"
2fcb0                 | ' 	while (di) {
2fcb0                 | LR__4719
2fcb0     2C 4E 05 F1 | 	add	fp, #44
2fcb4     A7 32 0A FB | 	rdlong	local07, fp wz
2fcb8     2C 4E 85 F1 | 	sub	fp, #44
2fcbc     60 00 90 AD |  if_e	jmp	#LR__4721
2fcc0     18 4E 05 F1 | 	add	fp, #24
2fcc4     A7 30 02 FB | 	rdlong	local06, fp
2fcc8     14 4E 05 F1 | 	add	fp, #20
2fccc     A7 2C 02 FB | 	rdlong	local04, fp
2fcd0     01 2C 86 F1 | 	sub	local04, #1
2fcd4     01 2C 66 F0 | 	shl	local04, #1
2fcd8     18 2D 02 F1 | 	add	local04, local06
2fcdc     16 31 E2 FA | 	rdword	local06, local04
2fce0     18 4E 85 F1 | 	sub	fp, #24
2fce4     A7 30 52 FC | 	wrword	local06, fp
2fce8     A7 32 E2 FA | 	rdword	local07, fp
2fcec     14 4E 85 F1 | 	sub	fp, #20
2fcf0     20 32 0E F2 | 	cmp	local07, #32 wz
2fcf4     14 4E 05 51 |  if_ne	add	fp, #20
2fcf8     A7 26 E2 5A |  if_ne	rdword	local01, fp
2fcfc     14 4E 85 51 |  if_ne	sub	fp, #20
2fd00     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2fd04     18 00 90 5D |  if_ne	jmp	#LR__4721
2fd08     2C 4E 05 F1 | 	add	fp, #44
2fd0c     A7 26 02 FB | 	rdlong	local01, fp
2fd10     01 26 86 F1 | 	sub	local01, #1
2fd14     A7 26 62 FC | 	wrlong	local01, fp
2fd18     2C 4E 85 F1 | 	sub	fp, #44
2fd1c     90 FF 9F FD | 	jmp	#LR__4719
2fd20                 | LR__4720
2fd20                 | LR__4721
2fd20     18 4E 05 F1 | 	add	fp, #24
2fd24     A7 34 02 FB | 	rdlong	local08, fp
2fd28     14 4E 05 F1 | 	add	fp, #20
2fd2c     A7 2C 02 FB | 	rdlong	local04, fp
2fd30     01 2C 66 F0 | 	shl	local04, #1
2fd34     1A 2D 02 F1 | 	add	local04, local08
2fd38     16 01 58 FC | 	wrword	#0, local04
2fd3c     A7 32 0A FB | 	rdlong	local07, fp wz
2fd40     2C 4E 85 F1 | 	sub	fp, #44
2fd44     06 FA 05 A6 |  if_e	mov	result1, #6
2fd48     04 06 90 AD |  if_e	jmp	#LR__4750
2fd4c                 | ' 
2fd4c                 | ' 
2fd4c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2fd4c     28 4E 05 F1 | 	add	fp, #40
2fd50     A7 00 68 FC | 	wrlong	#0, fp
2fd54     28 4E 85 F1 | 	sub	fp, #40
2fd58     97 22 48 FB | 	callpa	#(@LR__4723-@LR__4722)>>2,fcache_load_ptr_
2fd5c                 | LR__4722
2fd5c     18 4E 05 F1 | 	add	fp, #24
2fd60     A7 36 02 FB | 	rdlong	local09, fp
2fd64     10 4E 05 F1 | 	add	fp, #16
2fd68     A7 38 02 FB | 	rdlong	local10, fp
2fd6c     28 4E 85 F1 | 	sub	fp, #40
2fd70     01 38 66 F0 | 	shl	local10, #1
2fd74     1B 39 02 F1 | 	add	local10, local09
2fd78     1C 3B E2 FA | 	rdword	local11, local10
2fd7c     20 3A 0E F2 | 	cmp	local11, #32 wz
2fd80     1C 00 90 5D |  if_ne	jmp	#LR__4724
2fd84     28 4E 05 F1 | 	add	fp, #40
2fd88     A7 3C 02 FB | 	rdlong	local12, fp
2fd8c     1E 2F 02 F6 | 	mov	local05, local12
2fd90     01 2E 06 F1 | 	add	local05, #1
2fd94     A7 2E 62 FC | 	wrlong	local05, fp
2fd98     28 4E 85 F1 | 	sub	fp, #40
2fd9c     BC FF 9F FD | 	jmp	#LR__4722
2fda0                 | LR__4723
2fda0                 | LR__4724
2fda0     28 4E 05 F1 | 	add	fp, #40
2fda4     A7 32 02 FB | 	rdlong	local07, fp
2fda8     28 4E 85 F1 | 	sub	fp, #40
2fdac     01 32 16 F2 | 	cmp	local07, #1 wc
2fdb0     28 00 90 3D |  if_ae	jmp	#LR__4725
2fdb4     18 4E 05 F1 | 	add	fp, #24
2fdb8     A7 2A 02 FB | 	rdlong	local03, fp
2fdbc     10 4E 05 F1 | 	add	fp, #16
2fdc0     A7 36 02 FB | 	rdlong	local09, fp
2fdc4     28 4E 85 F1 | 	sub	fp, #40
2fdc8     01 36 66 F0 | 	shl	local09, #1
2fdcc     15 37 02 F1 | 	add	local09, local03
2fdd0     1B 27 E2 FA | 	rdword	local01, local09
2fdd4     2E 26 0E F2 | 	cmp	local01, #46 wz
2fdd8     14 00 90 5D |  if_ne	jmp	#LR__4726
2fddc                 | LR__4725
2fddc     10 4E 05 F1 | 	add	fp, #16
2fde0     A7 32 C2 FA | 	rdbyte	local07, fp
2fde4     03 32 46 F5 | 	or	local07, #3
2fde8     A7 32 42 FC | 	wrbyte	local07, fp
2fdec     10 4E 85 F1 | 	sub	fp, #16
2fdf0                 | LR__4726
2fdf0     97 2C 48 FB | 	callpa	#(@LR__4728-@LR__4727)>>2,fcache_load_ptr_
2fdf4                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2fdf4                 | LR__4727
2fdf4     2C 4E 05 F1 | 	add	fp, #44
2fdf8     A7 32 02 FB | 	rdlong	local07, fp
2fdfc     2C 4E 85 F1 | 	sub	fp, #44
2fe00     01 32 16 F2 | 	cmp	local07, #1 wc
2fe04     44 00 90 CD |  if_b	jmp	#LR__4729
2fe08     18 4E 05 F1 | 	add	fp, #24
2fe0c     A7 30 02 FB | 	rdlong	local06, fp
2fe10     14 4E 05 F1 | 	add	fp, #20
2fe14     A7 2A 02 FB | 	rdlong	local03, fp
2fe18     2C 4E 85 F1 | 	sub	fp, #44
2fe1c     01 2A 86 F1 | 	sub	local03, #1
2fe20     01 2A 66 F0 | 	shl	local03, #1
2fe24     18 2B 02 F1 | 	add	local03, local06
2fe28     15 27 E2 FA | 	rdword	local01, local03
2fe2c     2E 26 0E F2 | 	cmp	local01, #46 wz
2fe30     18 00 90 AD |  if_e	jmp	#LR__4729
2fe34     2C 4E 05 F1 | 	add	fp, #44
2fe38     A7 26 02 FB | 	rdlong	local01, fp
2fe3c     01 26 86 F1 | 	sub	local01, #1
2fe40     A7 26 62 FC | 	wrlong	local01, fp
2fe44     2C 4E 85 F1 | 	sub	fp, #44
2fe48     A8 FF 9F FD | 	jmp	#LR__4727
2fe4c                 | LR__4728
2fe4c                 | LR__4729
2fe4c     04 4E 05 F1 | 	add	fp, #4
2fe50     A7 12 02 FB | 	rdlong	arg01, fp
2fe54     04 4E 85 F1 | 	sub	fp, #4
2fe58     20 12 06 F1 | 	add	arg01, #32
2fe5c     20 14 06 F6 | 	mov	arg02, #32
2fe60     0B 16 06 F6 | 	mov	arg03, #11
2fe64     09 3F 02 F6 | 	mov	local13, arg01
2fe68     98 00 A0 FD | 	call	#\builtin_bytefill_
2fe6c     1F FB 01 F6 | 	mov	result1, local13
2fe70     0C 4E 05 F1 | 	add	fp, #12
2fe74     A7 00 48 FC | 	wrbyte	#0, fp
2fe78     A7 32 C2 FA | 	rdbyte	local07, fp
2fe7c     14 4E 05 F1 | 	add	fp, #20
2fe80     A7 32 62 FC | 	wrlong	local07, fp
2fe84     04 4E 05 F1 | 	add	fp, #4
2fe88     A7 10 68 FC | 	wrlong	#8, fp
2fe8c     24 4E 85 F1 | 	sub	fp, #36
2fe90                 | ' 
2fe90                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2fe90                 | ' 	i = b = 0; ni = 8;
2fe90                 | ' 	for (;;) {
2fe90                 | LR__4730
2fe90     18 4E 05 F1 | 	add	fp, #24
2fe94     A7 2A 02 FB | 	rdlong	local03, fp
2fe98     10 4E 05 F1 | 	add	fp, #16
2fe9c     A7 36 02 FB | 	rdlong	local09, fp
2fea0     1B 2D 02 F6 | 	mov	local04, local09
2fea4     01 2C 06 F1 | 	add	local04, #1
2fea8     A7 2C 62 FC | 	wrlong	local04, fp
2feac     01 36 66 F0 | 	shl	local09, #1
2feb0     15 37 02 F1 | 	add	local09, local03
2feb4     1B 31 E2 FA | 	rdword	local06, local09
2feb8     14 4E 85 F1 | 	sub	fp, #20
2febc     A7 30 52 FC | 	wrword	local06, fp
2fec0     A7 32 EA FA | 	rdword	local07, fp wz
2fec4     14 4E 85 F1 | 	sub	fp, #20
2fec8     74 03 90 AD |  if_e	jmp	#LR__4746
2fecc     14 4E 05 F1 | 	add	fp, #20
2fed0     A7 32 E2 FA | 	rdword	local07, fp
2fed4     14 4E 85 F1 | 	sub	fp, #20
2fed8     20 32 0E F2 | 	cmp	local07, #32 wz
2fedc     30 00 90 AD |  if_e	jmp	#LR__4731
2fee0     14 4E 05 F1 | 	add	fp, #20
2fee4     A7 26 E2 FA | 	rdword	local01, fp
2fee8     14 4E 85 F1 | 	sub	fp, #20
2feec     2E 26 0E F2 | 	cmp	local01, #46 wz
2fef0     34 00 90 5D |  if_ne	jmp	#LR__4732
2fef4     28 4E 05 F1 | 	add	fp, #40
2fef8     A7 2C 02 FB | 	rdlong	local04, fp
2fefc     04 4E 05 F1 | 	add	fp, #4
2ff00     A7 38 02 FB | 	rdlong	local10, fp
2ff04     2C 4E 85 F1 | 	sub	fp, #44
2ff08     1C 2D 0A F2 | 	cmp	local04, local10 wz
2ff0c     18 00 90 AD |  if_e	jmp	#LR__4732
2ff10                 | LR__4731
2ff10     10 4E 05 F1 | 	add	fp, #16
2ff14     A7 32 C2 FA | 	rdbyte	local07, fp
2ff18     03 32 46 F5 | 	or	local07, #3
2ff1c     A7 32 42 FC | 	wrbyte	local07, fp
2ff20     10 4E 85 F1 | 	sub	fp, #16
2ff24                 | ' 			cf |=  0x01  |  0x02 ;
2ff24                 | ' 			continue;
2ff24     68 FF 9F FD | 	jmp	#LR__4730
2ff28                 | LR__4732
2ff28     20 4E 05 F1 | 	add	fp, #32
2ff2c     A7 32 02 FB | 	rdlong	local07, fp
2ff30     04 4E 05 F1 | 	add	fp, #4
2ff34     A7 26 02 FB | 	rdlong	local01, fp
2ff38     24 4E 85 F1 | 	sub	fp, #36
2ff3c     13 33 12 F2 | 	cmp	local07, local01 wc
2ff40     1C 00 90 3D |  if_ae	jmp	#LR__4733
2ff44     28 4E 05 F1 | 	add	fp, #40
2ff48     A7 34 02 FB | 	rdlong	local08, fp
2ff4c     04 4E 05 F1 | 	add	fp, #4
2ff50     A7 38 02 FB | 	rdlong	local10, fp
2ff54     2C 4E 85 F1 | 	sub	fp, #44
2ff58     1C 35 0A F2 | 	cmp	local08, local10 wz
2ff5c     B0 00 90 5D |  if_ne	jmp	#LR__4735
2ff60                 | LR__4733
2ff60     24 4E 05 F1 | 	add	fp, #36
2ff64     A7 32 02 FB | 	rdlong	local07, fp
2ff68     24 4E 85 F1 | 	sub	fp, #36
2ff6c     0B 32 0E F2 | 	cmp	local07, #11 wz
2ff70     18 00 90 5D |  if_ne	jmp	#LR__4734
2ff74     10 4E 05 F1 | 	add	fp, #16
2ff78     A7 32 C2 FA | 	rdbyte	local07, fp
2ff7c     03 32 46 F5 | 	or	local07, #3
2ff80     A7 32 42 FC | 	wrbyte	local07, fp
2ff84     10 4E 85 F1 | 	sub	fp, #16
2ff88                 | ' 				cf |=  0x01  |  0x02 ;
2ff88                 | ' 				break;
2ff88     B4 02 90 FD | 	jmp	#LR__4746
2ff8c                 | LR__4734
2ff8c     28 4E 05 F1 | 	add	fp, #40
2ff90     A7 32 02 FB | 	rdlong	local07, fp
2ff94     04 4E 05 F1 | 	add	fp, #4
2ff98     A7 26 02 FB | 	rdlong	local01, fp
2ff9c     2C 4E 85 F1 | 	sub	fp, #44
2ffa0     13 33 0A F2 | 	cmp	local07, local01 wz
2ffa4     10 4E 05 51 |  if_ne	add	fp, #16
2ffa8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2ffac     03 32 46 55 |  if_ne	or	local07, #3
2ffb0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2ffb4     10 4E 85 51 |  if_ne	sub	fp, #16
2ffb8     28 4E 05 F1 | 	add	fp, #40
2ffbc     A7 32 02 FB | 	rdlong	local07, fp
2ffc0     04 4E 05 F1 | 	add	fp, #4
2ffc4     A7 28 02 FB | 	rdlong	local02, fp
2ffc8     2C 4E 85 F1 | 	sub	fp, #44
2ffcc     14 33 1A F2 | 	cmp	local07, local02 wcz
2ffd0     6C 02 90 1D |  if_a	jmp	#LR__4746
2ffd4     2C 4E 05 F1 | 	add	fp, #44
2ffd8     A7 32 02 FB | 	rdlong	local07, fp
2ffdc     04 4E 85 F1 | 	sub	fp, #4
2ffe0     A7 32 62 FC | 	wrlong	local07, fp
2ffe4     08 4E 85 F1 | 	sub	fp, #8
2ffe8     A7 10 68 FC | 	wrlong	#8, fp
2ffec     04 4E 05 F1 | 	add	fp, #4
2fff0     A7 16 68 FC | 	wrlong	#11, fp
2fff4     18 4E 85 F1 | 	sub	fp, #24
2fff8     A7 3A C2 FA | 	rdbyte	local11, fp
2fffc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30000     02 32 66 F0 | 	shl	local07, #2
30004     A7 32 42 FC | 	wrbyte	local07, fp
30008     0C 4E 85 F1 | 	sub	fp, #12
3000c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
3000c                 | ' 			continue;
3000c     80 FE 9F FD | 	jmp	#LR__4730
30010                 | LR__4735
30010     14 4E 05 F1 | 	add	fp, #20
30014     A7 32 E2 FA | 	rdword	local07, fp
30018     14 4E 85 F1 | 	sub	fp, #20
3001c     80 32 16 F2 | 	cmp	local07, #128 wc
30020     6C 00 90 CD |  if_b	jmp	#LR__4737
30024     10 4E 05 F1 | 	add	fp, #16
30028     A7 32 C2 FA | 	rdbyte	local07, fp
3002c     02 32 46 F5 | 	or	local07, #2
30030     A7 32 42 FC | 	wrbyte	local07, fp
30034     04 4E 05 F1 | 	add	fp, #4
30038     A7 12 E2 FA | 	rdword	arg01, fp
3003c     14 4E 85 F1 | 	sub	fp, #20
30040     01 00 00 FF 
30044     52 15 06 F6 | 	mov	arg02, ##850
30048     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
3004c     14 4E 05 F1 | 	add	fp, #20
30050     A7 FA 51 FC | 	wrword	result1, fp
30054     A7 32 E2 FA | 	rdword	local07, fp
30058     14 4E 85 F1 | 	sub	fp, #20
3005c     80 32 CE F7 | 	test	local07, #128 wz
30060     2C 00 90 AD |  if_e	jmp	#LR__4736
30064     14 4E 05 F1 | 	add	fp, #20
30068     A7 28 E2 FA | 	rdword	local02, fp
3006c     7F 28 06 F5 | 	and	local02, #127
30070     01 00 00 FF 
30074     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30078     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
3007c     14 33 C2 FA | 	rdbyte	local07, local02
30080     A7 32 52 FC | 	wrword	local07, fp
30084     14 4E 85 F1 | 	sub	fp, #20
30088     01 00 00 FF 
3008c     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30090                 | LR__4736
30090                 | LR__4737
30090     14 4E 05 F1 | 	add	fp, #20
30094     A7 32 E2 FA | 	rdword	local07, fp
30098     14 4E 85 F1 | 	sub	fp, #20
3009c     00 33 16 F2 | 	cmp	local07, #256 wc
300a0     88 00 90 CD |  if_b	jmp	#LR__4739
300a4     24 4E 05 F1 | 	add	fp, #36
300a8     A7 32 02 FB | 	rdlong	local07, fp
300ac     01 32 86 F1 | 	sub	local07, #1
300b0     04 4E 85 F1 | 	sub	fp, #4
300b4     A7 28 02 FB | 	rdlong	local02, fp
300b8     20 4E 85 F1 | 	sub	fp, #32
300bc     19 29 12 F2 | 	cmp	local02, local07 wc
300c0     2C 00 90 CD |  if_b	jmp	#LR__4738
300c4     10 4E 05 F1 | 	add	fp, #16
300c8     A7 3A C2 FA | 	rdbyte	local11, fp
300cc     1D 33 E2 F8 | 	getbyte	local07, local11, #0
300d0     03 32 46 F5 | 	or	local07, #3
300d4     A7 32 42 FC | 	wrbyte	local07, fp
300d8     14 4E 05 F1 | 	add	fp, #20
300dc     A7 32 02 FB | 	rdlong	local07, fp
300e0     04 4E 85 F1 | 	sub	fp, #4
300e4     A7 32 62 FC | 	wrlong	local07, fp
300e8     20 4E 85 F1 | 	sub	fp, #32
300ec                 | ' 				cf |=  0x01  |  0x02 ;
300ec                 | ' 				i = ni; continue;
300ec     A0 FD 9F FD | 	jmp	#LR__4730
300f0                 | LR__4738
300f0     04 4E 05 F1 | 	add	fp, #4
300f4     A7 36 02 FB | 	rdlong	local09, fp
300f8     1C 4E 05 F1 | 	add	fp, #28
300fc     A7 38 02 FB | 	rdlong	local10, fp
30100     1C 2D 02 F6 | 	mov	local04, local10
30104     01 2C 06 F1 | 	add	local04, #1
30108     A7 2C 62 FC | 	wrlong	local04, fp
3010c     20 36 06 F1 | 	add	local09, #32
30110     1B 39 02 F1 | 	add	local10, local09
30114     0C 4E 85 F1 | 	sub	fp, #12
30118     A7 2A E2 FA | 	rdword	local03, fp
3011c     14 4E 85 F1 | 	sub	fp, #20
30120     08 2A 46 F0 | 	shr	local03, #8
30124     1C 2B 42 FC | 	wrbyte	local03, local10
30128     D4 00 90 FD | 	jmp	#LR__4745
3012c                 | LR__4739
3012c     14 4E 05 F1 | 	add	fp, #20
30130     A7 32 EA FA | 	rdword	local07, fp wz
30134     14 4E 85 F1 | 	sub	fp, #20
30138     20 00 90 AD |  if_e	jmp	#LR__4740
3013c     AD 01 00 FF 
30140     CD 12 06 F6 | 	mov	arg01, ##@LR__5373
30144     14 4E 05 F1 | 	add	fp, #20
30148     A7 14 E2 FA | 	rdword	arg02, fp
3014c     14 4E 85 F1 | 	sub	fp, #20
30150     48 CB BF FD | 	call	#_fatfs_cc_strchr
30154     00 FA 0D F2 | 	cmp	result1, #0 wz
30158     20 00 90 AD |  if_e	jmp	#LR__4741
3015c                 | LR__4740
3015c     14 4E 05 F1 | 	add	fp, #20
30160     A7 BE 58 FC | 	wrword	#95, fp
30164     04 4E 85 F1 | 	sub	fp, #4
30168     A7 32 C2 FA | 	rdbyte	local07, fp
3016c     03 32 46 F5 | 	or	local07, #3
30170     A7 32 42 FC | 	wrbyte	local07, fp
30174     10 4E 85 F1 | 	sub	fp, #16
30178     84 00 90 FD | 	jmp	#LR__4744
3017c                 | LR__4741
3017c     14 4E 05 F1 | 	add	fp, #20
30180     A7 32 E2 FA | 	rdword	local07, fp
30184     14 4E 85 F1 | 	sub	fp, #20
30188     41 32 16 F2 | 	cmp	local07, #65 wc
3018c     24 00 90 CD |  if_b	jmp	#LR__4742
30190     14 4E 05 F1 | 	add	fp, #20
30194     A7 26 E2 FA | 	rdword	local01, fp
30198     14 4E 85 F1 | 	sub	fp, #20
3019c     5B 26 16 F2 | 	cmp	local01, #91 wc
301a0     0C 4E 05 C1 |  if_b	add	fp, #12
301a4     A7 32 C2 CA |  if_b	rdbyte	local07, fp
301a8     02 32 46 C5 |  if_b	or	local07, #2
301ac     A7 32 42 CC |  if_b	wrbyte	local07, fp
301b0     0C 4E 85 C1 |  if_b	sub	fp, #12
301b4                 | LR__4742
301b4     14 4E 05 F1 | 	add	fp, #20
301b8     A7 32 E2 FA | 	rdword	local07, fp
301bc     14 4E 85 F1 | 	sub	fp, #20
301c0     61 32 16 F2 | 	cmp	local07, #97 wc
301c4     38 00 90 CD |  if_b	jmp	#LR__4743
301c8     14 4E 05 F1 | 	add	fp, #20
301cc     A7 26 E2 FA | 	rdword	local01, fp
301d0     14 4E 85 F1 | 	sub	fp, #20
301d4     7B 26 16 F2 | 	cmp	local01, #123 wc
301d8     24 00 90 3D |  if_ae	jmp	#LR__4743
301dc     0C 4E 05 F1 | 	add	fp, #12
301e0     A7 32 C2 FA | 	rdbyte	local07, fp
301e4     01 32 46 F5 | 	or	local07, #1
301e8     A7 32 42 FC | 	wrbyte	local07, fp
301ec     08 4E 05 F1 | 	add	fp, #8
301f0     A7 32 E2 FA | 	rdword	local07, fp
301f4     20 32 86 F1 | 	sub	local07, #32
301f8     A7 32 52 FC | 	wrword	local07, fp
301fc     14 4E 85 F1 | 	sub	fp, #20
30200                 | LR__4743
30200                 | LR__4744
30200                 | LR__4745
30200     04 4E 05 F1 | 	add	fp, #4
30204     A7 3A 02 FB | 	rdlong	local11, fp
30208     1D 37 02 F6 | 	mov	local09, local11
3020c     1C 4E 05 F1 | 	add	fp, #28
30210     A7 28 02 FB | 	rdlong	local02, fp
30214     14 2D 02 F6 | 	mov	local04, local02
30218     01 2C 06 F1 | 	add	local04, #1
3021c     A7 2C 62 FC | 	wrlong	local04, fp
30220     14 39 02 F6 | 	mov	local10, local02
30224     20 36 06 F1 | 	add	local09, #32
30228     1B 39 02 F1 | 	add	local10, local09
3022c     0C 4E 85 F1 | 	sub	fp, #12
30230     A7 2A E2 FA | 	rdword	local03, fp
30234     14 4E 85 F1 | 	sub	fp, #20
30238     1C 2B 42 FC | 	wrbyte	local03, local10
3023c     50 FC 9F FD | 	jmp	#LR__4730
30240                 | LR__4746
30240     04 4E 05 F1 | 	add	fp, #4
30244     A7 3A 02 FB | 	rdlong	local11, fp
30248     04 4E 85 F1 | 	sub	fp, #4
3024c     20 3A 06 F1 | 	add	local11, #32
30250     1D 33 C2 FA | 	rdbyte	local07, local11
30254     E5 32 0E F2 | 	cmp	local07, #229 wz
30258     04 4E 05 A1 |  if_e	add	fp, #4
3025c     A7 32 02 AB |  if_e	rdlong	local07, fp
30260     04 4E 85 A1 |  if_e	sub	fp, #4
30264     20 32 06 A1 |  if_e	add	local07, #32
30268     19 0B 48 AC |  if_e	wrbyte	#5, local07
3026c     24 4E 05 F1 | 	add	fp, #36
30270     A7 32 02 FB | 	rdlong	local07, fp
30274     24 4E 85 F1 | 	sub	fp, #36
30278     08 32 0E F2 | 	cmp	local07, #8 wz
3027c     0C 4E 05 A1 |  if_e	add	fp, #12
30280     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30284     02 32 66 A0 |  if_e	shl	local07, #2
30288     A7 32 42 AC |  if_e	wrbyte	local07, fp
3028c     0C 4E 85 A1 |  if_e	sub	fp, #12
30290     0C 4E 05 F1 | 	add	fp, #12
30294     A7 32 C2 FA | 	rdbyte	local07, fp
30298     0C 4E 85 F1 | 	sub	fp, #12
3029c     0C 32 06 F5 | 	and	local07, #12
302a0     0C 32 0E F2 | 	cmp	local07, #12 wz
302a4     18 00 90 AD |  if_e	jmp	#LR__4747
302a8     0C 4E 05 F1 | 	add	fp, #12
302ac     A7 26 C2 FA | 	rdbyte	local01, fp
302b0     0C 4E 85 F1 | 	sub	fp, #12
302b4     03 26 06 F5 | 	and	local01, #3
302b8     03 26 0E F2 | 	cmp	local01, #3 wz
302bc     14 00 90 5D |  if_ne	jmp	#LR__4748
302c0                 | LR__4747
302c0     10 4E 05 F1 | 	add	fp, #16
302c4     A7 32 C2 FA | 	rdbyte	local07, fp
302c8     02 32 46 F5 | 	or	local07, #2
302cc     A7 32 42 FC | 	wrbyte	local07, fp
302d0     10 4E 85 F1 | 	sub	fp, #16
302d4                 | LR__4748
302d4     10 4E 05 F1 | 	add	fp, #16
302d8     A7 32 C2 FA | 	rdbyte	local07, fp
302dc     10 4E 85 F1 | 	sub	fp, #16
302e0     02 32 CE F7 | 	test	local07, #2 wz
302e4     48 00 90 5D |  if_ne	jmp	#LR__4749
302e8     0C 4E 05 F1 | 	add	fp, #12
302ec     A7 32 C2 FA | 	rdbyte	local07, fp
302f0     0C 4E 85 F1 | 	sub	fp, #12
302f4     01 32 CE F7 | 	test	local07, #1 wz
302f8     10 4E 05 51 |  if_ne	add	fp, #16
302fc     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30300     10 32 46 55 |  if_ne	or	local07, #16
30304     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30308     10 4E 85 51 |  if_ne	sub	fp, #16
3030c     0C 4E 05 F1 | 	add	fp, #12
30310     A7 32 C2 FA | 	rdbyte	local07, fp
30314     0C 4E 85 F1 | 	sub	fp, #12
30318     04 32 CE F7 | 	test	local07, #4 wz
3031c     10 4E 05 51 |  if_ne	add	fp, #16
30320     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30324     08 32 46 55 |  if_ne	or	local07, #8
30328     A7 32 42 5C |  if_ne	wrbyte	local07, fp
3032c     10 4E 85 51 |  if_ne	sub	fp, #16
30330                 | LR__4749
30330     04 4E 05 F1 | 	add	fp, #4
30334     A7 32 02 FB | 	rdlong	local07, fp
30338     0C 4E 05 F1 | 	add	fp, #12
3033c     A7 26 C2 FA | 	rdbyte	local01, fp
30340     10 4E 85 F1 | 	sub	fp, #16
30344     2B 32 06 F1 | 	add	local07, #43
30348     19 27 42 FC | 	wrbyte	local01, local07
3034c                 | ' 	}
3034c                 | ' 
3034c                 | ' 	dp->fn[ 11 ] = cf;
3034c                 | ' 
3034c                 | ' 	return FR_OK;
3034c     00 FA 05 F6 | 	mov	result1, #0
30350                 | LR__4750
30350     A7 F0 03 F6 | 	mov	ptra, fp
30354     B2 00 A0 FD | 	call	#popregs_
30358                 | _fatfs_cc_create_name_ret
30358     2D 00 64 FD | 	ret
3035c                 | 
3035c                 | _fatfs_cc_follow_path
3035c     02 4A 05 F6 | 	mov	COUNT_, #2
30360     A8 00 A0 FD | 	call	#pushregs_
30364     18 F0 07 F1 | 	add	ptra, #24
30368     04 4E 05 F1 | 	add	fp, #4
3036c     A7 12 62 FC | 	wrlong	arg01, fp
30370     04 4E 05 F1 | 	add	fp, #4
30374     A7 14 62 FC | 	wrlong	arg02, fp
30378     04 4E 85 F1 | 	sub	fp, #4
3037c     A7 FA 01 FB | 	rdlong	result1, fp
30380     FD 26 02 FB | 	rdlong	local01, result1
30384     10 4E 05 F1 | 	add	fp, #16
30388     A7 26 62 FC | 	wrlong	local01, fp
3038c     14 4E 85 F1 | 	sub	fp, #20
30390     97 24 48 FB | 	callpa	#(@LR__4762-@LR__4760)>>2,fcache_load_ptr_
30394                 | ' )
30394                 | ' {
30394                 | ' 	FRESULT res;
30394                 | ' 	BYTE ns;
30394                 | ' 	FATFS *fs = dp->obj.fs;
30394                 | ' #line 3034 "ff.c"
30394                 | ' 	{
30394                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30394                 | LR__4760
30394     08 4E 05 F1 | 	add	fp, #8
30398     A7 26 02 FB | 	rdlong	local01, fp
3039c     08 4E 85 F1 | 	sub	fp, #8
303a0     13 27 C2 FA | 	rdbyte	local01, local01
303a4     2F 26 0E F2 | 	cmp	local01, #47 wz
303a8     18 00 90 AD |  if_e	jmp	#LR__4761
303ac     08 4E 05 F1 | 	add	fp, #8
303b0     A7 26 02 FB | 	rdlong	local01, fp
303b4     08 4E 85 F1 | 	sub	fp, #8
303b8     13 27 C2 FA | 	rdbyte	local01, local01
303bc     5C 26 0E F2 | 	cmp	local01, #92 wz
303c0     18 00 90 5D |  if_ne	jmp	#LR__4763
303c4                 | LR__4761
303c4     08 4E 05 F1 | 	add	fp, #8
303c8     A7 26 02 FB | 	rdlong	local01, fp
303cc     01 26 06 F1 | 	add	local01, #1
303d0     A7 26 62 FC | 	wrlong	local01, fp
303d4     08 4E 85 F1 | 	sub	fp, #8
303d8     B8 FF 9F FD | 	jmp	#LR__4760
303dc                 | LR__4762
303dc                 | LR__4763
303dc     04 4E 05 F1 | 	add	fp, #4
303e0     A7 26 02 FB | 	rdlong	local01, fp
303e4     08 26 06 F1 | 	add	local01, #8
303e8     13 01 68 FC | 	wrlong	#0, local01
303ec     04 4E 05 F1 | 	add	fp, #4
303f0     A7 26 02 FB | 	rdlong	local01, fp
303f4     08 4E 85 F1 | 	sub	fp, #8
303f8     13 27 C2 FA | 	rdbyte	local01, local01
303fc     20 26 16 F2 | 	cmp	local01, #32 wc
30400     30 00 90 3D |  if_ae	jmp	#LR__4764
30404     04 4E 05 F1 | 	add	fp, #4
30408     A7 26 02 FB | 	rdlong	local01, fp
3040c     2B 26 06 F1 | 	add	local01, #43
30410     13 01 49 FC | 	wrbyte	#128, local01
30414     A7 12 02 FB | 	rdlong	arg01, fp
30418     04 4E 85 F1 | 	sub	fp, #4
3041c     00 14 06 F6 | 	mov	arg02, #0
30420     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
30424     0C 4E 05 F1 | 	add	fp, #12
30428     A7 FA 61 FC | 	wrlong	result1, fp
3042c     0C 4E 85 F1 | 	sub	fp, #12
30430     1C 01 90 FD | 	jmp	#LR__4768
30434                 | LR__4764
30434                 | ' 		for (;;) {
30434                 | LR__4765
30434     04 4E 05 F1 | 	add	fp, #4
30438     A7 12 02 FB | 	rdlong	arg01, fp
3043c     04 4E 05 F1 | 	add	fp, #4
30440     A7 14 02 F6 | 	mov	arg02, fp
30444     08 4E 85 F1 | 	sub	fp, #8
30448     14 F6 BF FD | 	call	#_fatfs_cc_create_name
3044c     0C 4E 05 F1 | 	add	fp, #12
30450     A7 FA 61 FC | 	wrlong	result1, fp
30454     00 FA 4D F2 | 	cmps	result1, #0 wz
30458     0C 4E 85 F1 | 	sub	fp, #12
3045c     F0 00 90 5D |  if_ne	jmp	#LR__4767
30460     04 4E 05 F1 | 	add	fp, #4
30464     A7 12 02 FB | 	rdlong	arg01, fp
30468     04 4E 85 F1 | 	sub	fp, #4
3046c     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30470     0C 4E 05 F1 | 	add	fp, #12
30474     A7 FA 61 FC | 	wrlong	result1, fp
30478     08 4E 85 F1 | 	sub	fp, #8
3047c     A7 26 02 FB | 	rdlong	local01, fp
30480     2B 26 06 F1 | 	add	local01, #43
30484     13 27 C2 FA | 	rdbyte	local01, local01
30488     0C 4E 05 F1 | 	add	fp, #12
3048c     A7 26 42 FC | 	wrbyte	local01, fp
30490     04 4E 85 F1 | 	sub	fp, #4
30494     A7 26 0A FB | 	rdlong	local01, fp wz
30498     0C 4E 85 F1 | 	sub	fp, #12
3049c     34 00 90 AD |  if_e	jmp	#LR__4766
304a0     0C 4E 05 F1 | 	add	fp, #12
304a4     A7 26 02 FB | 	rdlong	local01, fp
304a8     0C 4E 85 F1 | 	sub	fp, #12
304ac     04 26 0E F2 | 	cmp	local01, #4 wz
304b0     9C 00 90 5D |  if_ne	jmp	#LR__4767
304b4     10 4E 05 F1 | 	add	fp, #16
304b8     A7 26 C2 FA | 	rdbyte	local01, fp
304bc     10 4E 85 F1 | 	sub	fp, #16
304c0     04 26 CE F7 | 	test	local01, #4 wz
304c4     0C 4E 05 A1 |  if_e	add	fp, #12
304c8     A7 0A 68 AC |  if_e	wrlong	#5, fp
304cc     0C 4E 85 A1 |  if_e	sub	fp, #12
304d0                 | ' 					}
304d0                 | ' 				}
304d0                 | ' 				break;
304d0     7C 00 90 FD | 	jmp	#LR__4767
304d4                 | LR__4766
304d4     10 4E 05 F1 | 	add	fp, #16
304d8     A7 26 C2 FA | 	rdbyte	local01, fp
304dc     10 4E 85 F1 | 	sub	fp, #16
304e0     04 26 CE F7 | 	test	local01, #4 wz
304e4     68 00 90 5D |  if_ne	jmp	#LR__4767
304e8     04 4E 05 F1 | 	add	fp, #4
304ec     A7 26 02 FB | 	rdlong	local01, fp
304f0     04 4E 85 F1 | 	sub	fp, #4
304f4     06 26 06 F1 | 	add	local01, #6
304f8     13 27 C2 FA | 	rdbyte	local01, local01
304fc     10 26 CE F7 | 	test	local01, #16 wz
30500     0C 4E 05 A1 |  if_e	add	fp, #12
30504     A7 0A 68 AC |  if_e	wrlong	#5, fp
30508     0C 4E 85 A1 |  if_e	sub	fp, #12
3050c                 | ' 				res = FR_NO_PATH; break;
3050c     40 00 90 AD |  if_e	jmp	#LR__4767
30510     04 4E 05 F1 | 	add	fp, #4
30514     A7 28 02 FB | 	rdlong	local02, fp
30518     14 27 02 F6 | 	mov	local01, local02
3051c     10 4E 05 F1 | 	add	fp, #16
30520     A7 14 02 FB | 	rdlong	arg02, fp
30524     0A 13 02 F6 | 	mov	arg01, arg02
30528     34 14 06 F1 | 	add	arg02, #52
3052c     14 4E 85 F1 | 	sub	fp, #20
30530     10 28 06 F1 | 	add	local02, #16
30534     14 29 02 FB | 	rdlong	local02, local02
30538     FF 29 06 F5 | 	and	local02, #511
3053c     14 15 02 F1 | 	add	arg02, local02
30540     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30544     08 26 06 F1 | 	add	local01, #8
30548     13 FB 61 FC | 	wrlong	result1, local01
3054c     E4 FE 9F FD | 	jmp	#LR__4765
30550                 | LR__4767
30550                 | LR__4768
30550                 | ' 			}
30550                 | ' #line 3090 "ff.c"
30550                 | ' 			{
30550                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30550                 | ' 			}
30550                 | ' 		}
30550                 | ' 	}
30550                 | ' 
30550                 | ' 	return res;
30550     0C 4E 05 F1 | 	add	fp, #12
30554     A7 FA 01 FB | 	rdlong	result1, fp
30558     0C 4E 85 F1 | 	sub	fp, #12
3055c     A7 F0 03 F6 | 	mov	ptra, fp
30560     B2 00 A0 FD | 	call	#popregs_
30564                 | _fatfs_cc_follow_path_ret
30564     2D 00 64 FD | 	ret
30568                 | 
30568                 | _fatfs_cc_get_ldnumber
30568     01 00 66 F6 | 	neg	_var01, #1
3056c     09 03 0A FB | 	rdlong	_var02, arg01 wz
30570     01 05 02 F6 | 	mov	_var03, _var02
30574     01 FA 65 A6 |  if_e	neg	result1, #1
30578     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
3057c     97 10 48 FB | 	callpa	#(@LR__4771-@LR__4770)>>2,fcache_load_ptr_
30580                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30580                 | LR__4770
30580     02 07 C2 FA | 	rdbyte	_var04, _var03
30584     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30588     20 FA 15 F2 | 	cmp	result1, #32 wc
3058c     01 04 06 F1 | 	add	_var03, #1
30590     03 09 02 36 |  if_ae	mov	_var05, _var04
30594     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30598     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
3059c     E0 FF 9F 1D |  if_a	jmp	#LR__4770
305a0                 | LR__4771
305a0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
305a4     3A 06 0E F2 | 	cmp	_var04, #58 wz
305a8     40 00 90 5D |  if_ne	jmp	#LR__4773
305ac     01 0A 06 F6 | 	mov	_var06, #1
305b0     01 09 C2 FA | 	rdbyte	_var05, _var02
305b4     30 08 16 F2 | 	cmp	_var05, #48 wc
305b8     1C 00 90 CD |  if_b	jmp	#LR__4772
305bc     01 09 C2 FA | 	rdbyte	_var05, _var02
305c0     3A 08 16 F2 | 	cmp	_var05, #58 wc
305c4     01 0D 02 C6 |  if_b	mov	_var07, _var02
305c8     02 0C 06 C1 |  if_b	add	_var07, #2
305cc     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
305d0     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
305d4     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
305d8                 | LR__4772
305d8     01 0A 56 F2 | 	cmps	_var06, #1 wc
305dc     05 01 02 C6 |  if_b	mov	_var01, _var06
305e0     09 05 62 CC |  if_b	wrlong	_var03, arg01
305e4                 | ' 			vol = i;
305e4                 | ' 			*path = tt;
305e4                 | ' 		}
305e4                 | ' 		return vol;
305e4     00 FB 01 F6 | 	mov	result1, _var01
305e8     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
305ec                 | LR__4773
305ec                 | ' 	}
305ec                 | ' #line 3170 "ff.c"
305ec                 | ' 	vol = 0;
305ec                 | ' 
305ec                 | ' 	return vol;
305ec     00 FA 05 F6 | 	mov	result1, #0
305f0                 | _fatfs_cc_get_ldnumber_ret
305f0     2D 00 64 FD | 	ret
305f4                 | 
305f4                 | _fatfs_cc_check_fs
305f4     04 4A 05 F6 | 	mov	COUNT_, #4
305f8     A8 00 A0 FD | 	call	#pushregs_
305fc     09 27 02 F6 | 	mov	local01, arg01
30600     03 26 06 F1 | 	add	local01, #3
30604     13 01 48 FC | 	wrbyte	#0, local01
30608     2D 26 06 F1 | 	add	local01, #45
3060c     FF FF FF FF 
30610     13 FF 6B FC | 	wrlong	##-1, local01
30614     30 26 86 F1 | 	sub	local01, #48
30618     13 13 02 F6 | 	mov	arg01, local01
3061c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30620     00 FA 0D F2 | 	cmp	result1, #0 wz
30624     04 FA 05 56 |  if_ne	mov	result1, #4
30628     94 01 90 5D |  if_ne	jmp	#LR__4784
3062c     34 26 06 F1 | 	add	local01, #52
30630     13 13 02 F6 | 	mov	arg01, local01
30634     FE 13 06 F1 | 	add	arg01, #510
30638                 | ' {
30638                 | ' 
30638                 | ' 	return *((WORD*)ptr);
30638     09 29 E2 FA | 	rdword	local02, arg01
3063c     13 2B C2 FA | 	rdbyte	local03, local01
30640     34 26 86 F1 | 	sub	local01, #52
30644     15 2D E2 F8 | 	getbyte	local04, local03, #0
30648     EB 2C 0E F2 | 	cmp	local04, #235 wz
3064c     15 17 02 56 |  if_ne	mov	arg03, local03
30650     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
30654     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
30658     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
3065c     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
30660     44 01 90 5D |  if_ne	jmp	#LR__4783
30664     14 2D 32 F9 | 	getword	local04, local02, #0
30668     55 00 00 FF 
3066c     55 2C 0E F2 | 	cmp	local04, ##43605 wz
30670     2C 00 90 5D |  if_ne	jmp	#LR__4780
30674     34 26 06 F1 | 	add	local01, #52
30678     13 13 02 F6 | 	mov	arg01, local01
3067c     34 26 86 F1 | 	sub	local01, #52
30680     52 12 06 F1 | 	add	arg01, #82
30684     AD 01 00 FF 
30688     D4 14 06 F6 | 	mov	arg02, ##@LR__5374
3068c     08 16 06 F6 | 	mov	arg03, #8
30690     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
30694     00 FA 0D F2 | 	cmp	result1, #0 wz
30698                 | ' 			return 0;
30698     00 FA 05 A6 |  if_e	mov	result1, #0
3069c     20 01 90 AD |  if_e	jmp	#LR__4784
306a0                 | LR__4780
306a0     34 26 06 F1 | 	add	local01, #52
306a4     13 13 02 F6 | 	mov	arg01, local01
306a8     0B 12 06 F1 | 	add	arg01, #11
306ac                 | ' {
306ac                 | ' 
306ac                 | ' 	return *((WORD*)ptr);
306ac     09 FB E1 FA | 	rdword	result1, arg01
306b0     0D 26 06 F1 | 	add	local01, #13
306b4     13 2B C2 FA | 	rdbyte	local03, local01
306b8     41 26 86 F1 | 	sub	local01, #65
306bc     FD 2C 32 F9 | 	getword	local04, result1, #0
306c0     FD 14 32 F9 | 	getword	arg02, result1, #0
306c4     01 14 86 F1 | 	sub	arg02, #1
306c8     0A 2D CA F7 | 	test	local04, arg02 wz
306cc     D8 00 90 5D |  if_ne	jmp	#LR__4782
306d0     FD 14 32 F9 | 	getword	arg02, result1, #0
306d4     01 00 00 FF 
306d8     00 14 16 F2 | 	cmp	arg02, ##512 wc
306dc     C8 00 90 CD |  if_b	jmp	#LR__4782
306e0     FD 14 32 F9 | 	getword	arg02, result1, #0
306e4     01 00 00 FF 
306e8     01 14 16 F2 | 	cmp	arg02, ##513 wc
306ec     B8 00 90 3D |  if_ae	jmp	#LR__4782
306f0     15 13 02 F6 | 	mov	arg01, local03
306f4     07 12 4E F7 | 	zerox	arg01, #7 wz
306f8     AC 00 90 AD |  if_e	jmp	#LR__4782
306fc     15 13 E2 F8 | 	getbyte	arg01, local03, #0
30700     15 2B E2 F8 | 	getbyte	local03, local03, #0
30704     01 2A 86 F1 | 	sub	local03, #1
30708     15 13 CA F7 | 	test	arg01, local03 wz
3070c     98 00 90 5D |  if_ne	jmp	#LR__4782
30710     34 26 06 F1 | 	add	local01, #52
30714     13 13 02 F6 | 	mov	arg01, local01
30718     34 26 86 F1 | 	sub	local01, #52
3071c     0E 12 06 F1 | 	add	arg01, #14
30720                 | ' {
30720                 | ' 
30720                 | ' 	return *((WORD*)ptr);
30720     09 FB E9 FA | 	rdword	result1, arg01 wz
30724     80 00 90 AD |  if_e	jmp	#LR__4782
30728     44 26 06 F1 | 	add	local01, #68
3072c     13 13 C2 FA | 	rdbyte	arg01, local01
30730     44 26 86 F1 | 	sub	local01, #68
30734     01 12 86 F1 | 	sub	arg01, #1
30738     02 12 16 F2 | 	cmp	arg01, #2 wc
3073c     68 00 90 3D |  if_ae	jmp	#LR__4782
30740     34 26 06 F1 | 	add	local01, #52
30744     13 13 02 F6 | 	mov	arg01, local01
30748     34 26 86 F1 | 	sub	local01, #52
3074c     11 12 06 F1 | 	add	arg01, #17
30750                 | ' {
30750                 | ' 
30750                 | ' 	return *((WORD*)ptr);
30750     09 FB E9 FA | 	rdword	result1, arg01 wz
30754     50 00 90 AD |  if_e	jmp	#LR__4782
30758     34 26 06 F1 | 	add	local01, #52
3075c     13 13 02 F6 | 	mov	arg01, local01
30760     34 26 86 F1 | 	sub	local01, #52
30764     13 12 06 F1 | 	add	arg01, #19
30768                 | ' {
30768                 | ' 
30768                 | ' 	return *((WORD*)ptr);
30768     09 FB E1 FA | 	rdword	result1, arg01
3076c     FD 2A 32 F9 | 	getword	local03, result1, #0
30770     80 2A 16 F2 | 	cmp	local03, #128 wc
30774     20 00 90 3D |  if_ae	jmp	#LR__4781
30778     34 26 06 F1 | 	add	local01, #52
3077c     13 13 02 F6 | 	mov	arg01, local01
30780     34 26 86 F1 | 	sub	local01, #52
30784     20 12 06 F1 | 	add	arg01, #32
30788                 | ' {
30788                 | ' 
30788                 | ' 	return *((DWORD*)ptr);
30788     09 FB 01 FB | 	rdlong	result1, arg01
3078c     80 00 00 FF 
30790     00 FA 15 F2 | 	cmp	result1, ##65536 wc
30794     10 00 90 CD |  if_b	jmp	#LR__4782
30798                 | LR__4781
30798     4A 26 06 F1 | 	add	local01, #74
3079c                 | ' {
3079c                 | ' 
3079c                 | ' 	return *((WORD*)ptr);
3079c     13 FB E9 FA | 	rdword	result1, local01 wz
307a0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
307a0                 | ' 			&& ld_word(fs->win +  14 ) != 0
307a0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
307a0                 | ' 			&& ld_word(fs->win +  17 ) != 0
307a0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
307a0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
307a0                 | ' 				return 0;
307a0     00 FA 05 56 |  if_ne	mov	result1, #0
307a4     18 00 90 5D |  if_ne	jmp	#LR__4784
307a8                 | LR__4782
307a8                 | LR__4783
307a8                 | ' 		}
307a8                 | ' 	}
307a8                 | ' 	return sign == 0xAA55 ? 2 : 3;
307a8     14 2B 32 F9 | 	getword	local03, local02, #0
307ac     55 00 00 FF 
307b0     55 2A 0E F2 | 	cmp	local03, ##43605 wz
307b4     02 2C 06 A6 |  if_e	mov	local04, #2
307b8     03 2C 06 56 |  if_ne	mov	local04, #3
307bc     16 FB 01 F6 | 	mov	result1, local04
307c0                 | LR__4784
307c0     A7 F0 03 F6 | 	mov	ptra, fp
307c4     B2 00 A0 FD | 	call	#popregs_
307c8                 | _fatfs_cc_check_fs_ret
307c8     2D 00 64 FD | 	ret
307cc                 | 
307cc                 | _fatfs_cc_find_volume
307cc     05 4A 05 F6 | 	mov	COUNT_, #5
307d0     A8 00 A0 FD | 	call	#pushregs_
307d4     24 F0 07 F1 | 	add	ptra, #36
307d8     09 27 02 F6 | 	mov	local01, arg01
307dc     0A 29 02 F6 | 	mov	local02, arg02
307e0     13 13 02 F6 | 	mov	arg01, local01
307e4     00 14 06 F6 | 	mov	arg02, #0
307e8     08 FE BF FD | 	call	#_fatfs_cc_check_fs
307ec     02 FA 0D F2 | 	cmp	result1, #2 wz
307f0     0C 00 90 AD |  if_e	jmp	#LR__4790
307f4     03 FA 15 F2 | 	cmp	result1, #3 wc
307f8     00 28 0E C2 |  if_b	cmp	local02, #0 wz
307fc     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4798
30800                 | LR__4790
30800                 | ' 	for (i = 0; i < 4; i++) {
30800     00 2A 06 F6 | 	mov	local03, #0
30804     97 26 48 FB | 	callpa	#(@LR__4792-@LR__4791)>>2,fcache_load_ptr_
30808                 | LR__4791
30808     04 2A 16 F2 | 	cmp	local03, #4 wc
3080c     44 00 90 3D |  if_ae	jmp	#LR__4793
30810     15 2D 02 F6 | 	mov	local04, local03
30814     02 2C 66 F0 | 	shl	local04, #2
30818     14 4E 05 F1 | 	add	fp, #20
3081c     A7 2C 02 F1 | 	add	local04, fp
30820     34 26 06 F1 | 	add	local01, #52
30824     13 13 02 F6 | 	mov	arg01, local01
30828     34 26 86 F1 | 	sub	local01, #52
3082c     BE 13 06 F1 | 	add	arg01, #446
30830     15 15 02 F6 | 	mov	arg02, local03
30834     04 14 66 F0 | 	shl	arg02, #4
30838     0A 13 02 F1 | 	add	arg01, arg02
3083c     08 12 06 F1 | 	add	arg01, #8
30840                 | ' {
30840                 | ' 
30840                 | ' 	return *((DWORD*)ptr);
30840     09 FB 01 FB | 	rdlong	result1, arg01
30844     14 4E 85 F1 | 	sub	fp, #20
30848     16 FB 61 FC | 	wrlong	result1, local04
3084c     01 2A 06 F1 | 	add	local03, #1
30850     B4 FF 9F FD | 	jmp	#LR__4791
30854                 | LR__4792
30854                 | LR__4793
30854     00 28 0E F2 | 	cmp	local02, #0 wz
30858     14 2D 02 56 |  if_ne	mov	local04, local02
3085c     01 2C 86 51 |  if_ne	sub	local04, #1
30860     00 2C 06 A6 |  if_e	mov	local04, #0
30864     16 2B 02 F6 | 	mov	local03, local04
30868                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
30868                 | ' 	}
30868                 | ' 	i = part ? part - 1 : 0;
30868                 | ' 	do {
30868                 | LR__4794
30868     15 2D 02 F6 | 	mov	local04, local03
3086c     02 2C 66 F0 | 	shl	local04, #2
30870     14 4E 05 F1 | 	add	fp, #20
30874     A7 2C 02 F1 | 	add	local04, fp
30878     16 2D 0A FB | 	rdlong	local04, local04 wz
3087c     14 4E 85 F1 | 	sub	fp, #20
30880     28 00 90 AD |  if_e	jmp	#LR__4795
30884     15 2D 02 F6 | 	mov	local04, local03
30888     02 2C 66 F0 | 	shl	local04, #2
3088c     14 4E 05 F1 | 	add	fp, #20
30890     A7 2C 02 F1 | 	add	local04, fp
30894     16 15 02 FB | 	rdlong	arg02, local04
30898     13 13 02 F6 | 	mov	arg01, local01
3089c     14 4E 85 F1 | 	sub	fp, #20
308a0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
308a4     FD 2C 02 F6 | 	mov	local04, result1
308a8     04 00 90 FD | 	jmp	#LR__4796
308ac                 | LR__4795
308ac     03 2C 06 F6 | 	mov	local04, #3
308b0                 | LR__4796
308b0     16 2F 02 F6 | 	mov	local05, local04
308b4     00 28 0E F2 | 	cmp	local02, #0 wz
308b8     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
308bc     0C 00 90 8D |  if_c_and_z	jmp	#LR__4797
308c0     01 2A 06 A1 |  if_e	add	local03, #1
308c4     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
308c8     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4794
308cc                 | LR__4797
308cc                 | ' 	return fmt;
308cc     17 FB 01 F6 | 	mov	result1, local05
308d0                 | LR__4798
308d0     A7 F0 03 F6 | 	mov	ptra, fp
308d4     B2 00 A0 FD | 	call	#popregs_
308d8                 | _fatfs_cc_find_volume_ret
308d8     2D 00 64 FD | 	ret
308dc                 | 
308dc                 | _fatfs_cc_mount_volume
308dc     0B 4A 05 F6 | 	mov	COUNT_, #11
308e0     A8 00 A0 FD | 	call	#pushregs_
308e4     0A 27 02 F6 | 	mov	local01, arg02
308e8     0B 29 02 F6 | 	mov	local02, arg03
308ec     13 01 68 FC | 	wrlong	#0, local01
308f0     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
308f4     FD 2A 02 F6 | 	mov	local03, result1
308f8     00 2A 56 F2 | 	cmps	local03, #0 wc
308fc     0B FA 05 C6 |  if_b	mov	result1, #11
30900     3C 05 90 CD |  if_b	jmp	#LR__4810
30904     15 17 02 F6 | 	mov	arg03, local03
30908     02 16 66 F0 | 	shl	arg03, #2
3090c     F2 16 02 F1 | 	add	arg03, objptr
30910     0B 2D 0A FB | 	rdlong	local04, arg03 wz
30914     0C FA 05 A6 |  if_e	mov	result1, #12
30918     24 05 90 AD |  if_e	jmp	#LR__4810
3091c     13 2D 62 FC | 	wrlong	local04, local01
30920     14 29 E2 F8 | 	getbyte	local02, local02, #0
30924     FE 28 06 F5 | 	and	local02, #254
30928     16 17 CA FA | 	rdbyte	arg03, local04 wz
3092c     4C 00 90 AD |  if_e	jmp	#LR__4801
30930     01 2C 06 F1 | 	add	local04, #1
30934     16 13 CA FA | 	rdbyte	arg01, local04 wz
30938     01 2C 86 F1 | 	sub	local04, #1
3093c     01 FA 05 56 |  if_ne	mov	result1, #1
30940                 | ' 
30940                 | ' 	return Stat;
30940     01 00 00 AF 
30944     20 E4 05 A1 |  if_e	add	objptr, ##544
30948     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
3094c     01 00 00 AF 
30950     20 E4 85 A1 |  if_e	sub	objptr, ##544
30954     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
30958     01 16 CE F7 | 	test	arg03, #1 wz
3095c     1C 00 90 5D |  if_ne	jmp	#LR__4800
30960     00 28 0E F2 | 	cmp	local02, #0 wz
30964     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
30968     04 FA CD 57 |  if_ne	test	result1, #4 wz
3096c                 | ' 				return FR_WRITE_PROTECTED;
3096c     0A FA 05 56 |  if_ne	mov	result1, #10
30970     CC 04 90 5D |  if_ne	jmp	#LR__4810
30974                 | ' 			}
30974                 | ' 			return FR_OK;
30974     00 FA 05 F6 | 	mov	result1, #0
30978     C4 04 90 FD | 	jmp	#LR__4810
3097c                 | LR__4800
3097c                 | LR__4801
3097c     16 01 48 FC | 	wrbyte	#0, local04
30980     01 2C 06 F1 | 	add	local04, #1
30984     16 2B 42 FC | 	wrbyte	local03, local04
30988     16 13 C2 FA | 	rdbyte	arg01, local04
3098c     01 2C 86 F1 | 	sub	local04, #1
30990     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
30994     FD 16 02 F6 | 	mov	arg03, result1
30998     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
3099c     01 2E CE F7 | 	test	local05, #1 wz
309a0                 | ' 		return FR_NOT_READY;
309a0     03 FA 05 56 |  if_ne	mov	result1, #3
309a4     98 04 90 5D |  if_ne	jmp	#LR__4810
309a8     00 28 0E F2 | 	cmp	local02, #0 wz
309ac     0B 2F 02 56 |  if_ne	mov	local05, arg03
309b0     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
309b4     04 2E CE 57 |  if_ne	test	local05, #4 wz
309b8                 | ' 		return FR_WRITE_PROTECTED;
309b8     0A FA 05 56 |  if_ne	mov	result1, #10
309bc     80 04 90 5D |  if_ne	jmp	#LR__4810
309c0     16 13 02 F6 | 	mov	arg01, local04
309c4     00 14 06 F6 | 	mov	arg02, #0
309c8     00 FE BF FD | 	call	#_fatfs_cc_find_volume
309cc     FD 12 02 F6 | 	mov	arg01, result1
309d0     04 12 0E F2 | 	cmp	arg01, #4 wz
309d4     01 FA 05 A6 |  if_e	mov	result1, #1
309d8     64 04 90 AD |  if_e	jmp	#LR__4810
309dc     02 12 16 F2 | 	cmp	arg01, #2 wc
309e0     0D FA 05 36 |  if_ae	mov	result1, #13
309e4     58 04 90 3D |  if_ae	jmp	#LR__4810
309e8     30 2C 06 F1 | 	add	local04, #48
309ec     16 31 02 FB | 	rdlong	local06, local04
309f0     04 2C 06 F1 | 	add	local04, #4
309f4     16 13 02 F6 | 	mov	arg01, local04
309f8     34 2C 86 F1 | 	sub	local04, #52
309fc     0B 12 06 F1 | 	add	arg01, #11
30a00                 | ' {
30a00                 | ' 
30a00                 | ' 	return *((WORD*)ptr);
30a00     09 FB E1 FA | 	rdword	result1, arg01
30a04     01 00 00 FF 
30a08     00 FA 0D F2 | 	cmp	result1, ##512 wz
30a0c     0D FA 05 56 |  if_ne	mov	result1, #13
30a10     2C 04 90 5D |  if_ne	jmp	#LR__4810
30a14     34 2C 06 F1 | 	add	local04, #52
30a18     16 13 02 F6 | 	mov	arg01, local04
30a1c     34 2C 86 F1 | 	sub	local04, #52
30a20     16 12 06 F1 | 	add	arg01, #22
30a24                 | ' {
30a24                 | ' 
30a24                 | ' 	return *((WORD*)ptr);
30a24     09 FB E1 FA | 	rdword	result1, arg01
30a28     FD 32 0A F6 | 	mov	local07, result1 wz
30a2c     18 00 90 5D |  if_ne	jmp	#LR__4802
30a30     34 2C 06 F1 | 	add	local04, #52
30a34     16 13 02 F6 | 	mov	arg01, local04
30a38     34 2C 86 F1 | 	sub	local04, #52
30a3c     24 12 06 F1 | 	add	arg01, #36
30a40                 | ' {
30a40                 | ' 
30a40                 | ' 	return *((DWORD*)ptr);
30a40     09 FB 01 FB | 	rdlong	result1, arg01
30a44     FD 32 02 F6 | 	mov	local07, result1
30a48                 | LR__4802
30a48     1C 2C 06 F1 | 	add	local04, #28
30a4c     16 33 62 FC | 	wrlong	local07, local04
30a50     28 2C 06 F1 | 	add	local04, #40
30a54     16 2F C2 FA | 	rdbyte	local05, local04
30a58     42 2C 86 F1 | 	sub	local04, #66
30a5c     16 2F 42 FC | 	wrbyte	local05, local04
30a60     16 2F C2 FA | 	rdbyte	local05, local04
30a64     02 2C 86 F1 | 	sub	local04, #2
30a68     01 2E 0E F2 | 	cmp	local05, #1 wz
30a6c     02 2C 06 51 |  if_ne	add	local04, #2
30a70     16 2F C2 5A |  if_ne	rdbyte	local05, local04
30a74     02 2C 86 51 |  if_ne	sub	local04, #2
30a78     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
30a7c     0D FA 05 56 |  if_ne	mov	result1, #13
30a80     BC 03 90 5D |  if_ne	jmp	#LR__4810
30a84     02 2C 06 F1 | 	add	local04, #2
30a88     16 2F C2 FA | 	rdbyte	local05, local04
30a8c     17 33 02 FD | 	qmul	local07, local05
30a90     3F 2C 06 F1 | 	add	local04, #63
30a94     16 2F C2 FA | 	rdbyte	local05, local04
30a98     37 2C 86 F1 | 	sub	local04, #55
30a9c     16 2F 52 FC | 	wrword	local05, local04
30aa0     16 2F EA FA | 	rdword	local05, local04 wz
30aa4     0A 2C 86 F1 | 	sub	local04, #10
30aa8     18 32 62 FD | 	getqx	local07
30aac     20 00 90 AD |  if_e	jmp	#LR__4803
30ab0     0A 2C 06 F1 | 	add	local04, #10
30ab4     16 2F E2 FA | 	rdword	local05, local04
30ab8     17 2B 32 F9 | 	getword	local03, local05, #0
30abc     0A 2C 86 F1 | 	sub	local04, #10
30ac0     17 2F 32 F9 | 	getword	local05, local05, #0
30ac4     01 2E 86 F1 | 	sub	local05, #1
30ac8     17 2B CA F7 | 	test	local03, local05 wz
30acc     08 00 90 AD |  if_e	jmp	#LR__4804
30ad0                 | LR__4803
30ad0     0D FA 05 F6 | 	mov	result1, #13
30ad4     68 03 90 FD | 	jmp	#LR__4810
30ad8                 | LR__4804
30ad8     34 2C 06 F1 | 	add	local04, #52
30adc     16 13 02 F6 | 	mov	arg01, local04
30ae0     11 12 06 F1 | 	add	arg01, #17
30ae4                 | ' {
30ae4                 | ' 
30ae4                 | ' 	return *((WORD*)ptr);
30ae4     09 FB E1 FA | 	rdword	result1, arg01
30ae8     2C 2C 86 F1 | 	sub	local04, #44
30aec     16 FB 51 FC | 	wrword	result1, local04
30af0     16 2F E2 FA | 	rdword	local05, local04
30af4     08 2C 86 F1 | 	sub	local04, #8
30af8     17 13 52 F6 | 	abs	arg01, local05 wc
30afc     09 13 42 F8 | 	getnib	arg01, arg01, #0
30b00     09 13 8A F6 | 	negc	arg01, arg01 wz
30b04     0D FA 05 56 |  if_ne	mov	result1, #13
30b08     34 03 90 5D |  if_ne	jmp	#LR__4810
30b0c     34 2C 06 F1 | 	add	local04, #52
30b10     16 13 02 F6 | 	mov	arg01, local04
30b14     34 2C 86 F1 | 	sub	local04, #52
30b18     13 12 06 F1 | 	add	arg01, #19
30b1c                 | ' {
30b1c                 | ' 
30b1c                 | ' 	return *((WORD*)ptr);
30b1c     09 FB E1 FA | 	rdword	result1, arg01
30b20     FD 34 0A F6 | 	mov	local08, result1 wz
30b24     34 2C 06 A1 |  if_e	add	local04, #52
30b28     16 13 02 A6 |  if_e	mov	arg01, local04
30b2c     34 2C 86 A1 |  if_e	sub	local04, #52
30b30     20 12 06 A1 |  if_e	add	arg01, #32
30b34                 | ' {
30b34                 | ' 
30b34                 | ' 	return *((DWORD*)ptr);
30b34     09 35 02 AB |  if_e	rdlong	local08, arg01
30b38     34 2C 06 F1 | 	add	local04, #52
30b3c     16 13 02 F6 | 	mov	arg01, local04
30b40     34 2C 86 F1 | 	sub	local04, #52
30b44     0E 12 06 F1 | 	add	arg01, #14
30b48                 | ' {
30b48                 | ' 
30b48                 | ' 	return *((WORD*)ptr);
30b48     09 FB E1 FA | 	rdword	result1, arg01
30b4c     FD 12 02 F6 | 	mov	arg01, result1
30b50     09 2F 02 F6 | 	mov	local05, arg01
30b54     0F 2E 4E F7 | 	zerox	local05, #15 wz
30b58     0D FA 05 A6 |  if_e	mov	result1, #13
30b5c     E0 02 90 AD |  if_e	jmp	#LR__4810
30b60     09 37 32 F9 | 	getword	local09, arg01, #0
30b64     19 37 02 F1 | 	add	local09, local07
30b68     08 2C 06 F1 | 	add	local04, #8
30b6c     16 2F E2 FA | 	rdword	local05, local04
30b70     08 2C 86 F1 | 	sub	local04, #8
30b74     17 2F 52 F6 | 	abs	local05, local05 wc
30b78     04 2E 46 F0 | 	shr	local05, #4
30b7c     17 37 82 F3 | 	sumc	local09, local05
30b80     1B 35 12 F2 | 	cmp	local08, local09 wc
30b84     0D FA 05 C6 |  if_b	mov	result1, #13
30b88     B4 02 90 CD |  if_b	jmp	#LR__4810
30b8c     1B 35 82 F1 | 	sub	local08, local09
30b90     0A 2C 06 F1 | 	add	local04, #10
30b94     16 2F E2 FA | 	rdword	local05, local04
30b98     17 35 12 FD | 	qdiv	local08, local05
30b9c     0A 2C 86 F1 | 	sub	local04, #10
30ba0     18 2E 62 FD | 	getqx	local05
30ba4     00 2E 0E F2 | 	cmp	local05, #0 wz
30ba8     0D FA 05 A6 |  if_e	mov	result1, #13
30bac     90 02 90 AD |  if_e	jmp	#LR__4810
30bb0     00 38 06 F6 | 	mov	local10, #0
30bb4     FF FF 07 FF 
30bb8     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
30bbc     03 38 06 C6 |  if_b	mov	local10, #3
30bc0     7F 00 00 FF 
30bc4     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
30bc8     02 38 06 C6 |  if_b	mov	local10, #2
30bcc     07 00 00 FF 
30bd0     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
30bd4     01 38 06 C6 |  if_b	mov	local10, #1
30bd8     00 38 0E F2 | 	cmp	local10, #0 wz
30bdc     0D FA 05 A6 |  if_e	mov	result1, #13
30be0     5C 02 90 AD |  if_e	jmp	#LR__4810
30be4     02 2E 06 F1 | 	add	local05, #2
30be8     18 2C 06 F1 | 	add	local04, #24
30bec     16 2F 62 FC | 	wrlong	local05, local04
30bf0     08 2C 06 F1 | 	add	local04, #8
30bf4     16 31 62 FC | 	wrlong	local06, local04
30bf8     18 2F 02 F6 | 	mov	local05, local06
30bfc     09 13 32 F9 | 	getword	arg01, arg01, #0
30c00     09 2F 02 F1 | 	add	local05, arg01
30c04     04 2C 06 F1 | 	add	local04, #4
30c08     16 2F 62 FC | 	wrlong	local05, local04
30c0c     18 2F 02 F6 | 	mov	local05, local06
30c10     1B 2F 02 F1 | 	add	local05, local09
30c14     08 2C 06 F1 | 	add	local04, #8
30c18     16 2F 62 FC | 	wrlong	local05, local04
30c1c     2C 2C 86 F1 | 	sub	local04, #44
30c20     03 38 0E F2 | 	cmp	local10, #3 wz
30c24     5C 00 90 5D |  if_ne	jmp	#LR__4805
30c28     34 2C 06 F1 | 	add	local04, #52
30c2c     16 13 02 F6 | 	mov	arg01, local04
30c30     34 2C 86 F1 | 	sub	local04, #52
30c34     2A 12 06 F1 | 	add	arg01, #42
30c38                 | ' {
30c38                 | ' 
30c38                 | ' 	return *((WORD*)ptr);
30c38     09 FB E9 FA | 	rdword	result1, arg01 wz
30c3c     0D FA 05 56 |  if_ne	mov	result1, #13
30c40     FC 01 90 5D |  if_ne	jmp	#LR__4810
30c44     08 2C 06 F1 | 	add	local04, #8
30c48     16 2F EA FA | 	rdword	local05, local04 wz
30c4c     08 2C 86 F1 | 	sub	local04, #8
30c50     0D FA 05 56 |  if_ne	mov	result1, #13
30c54     E8 01 90 5D |  if_ne	jmp	#LR__4810
30c58     34 2C 06 F1 | 	add	local04, #52
30c5c     16 13 02 F6 | 	mov	arg01, local04
30c60     2C 12 06 F1 | 	add	arg01, #44
30c64                 | ' {
30c64                 | ' 
30c64                 | ' 	return *((DWORD*)ptr);
30c64     09 FB 01 FB | 	rdlong	result1, arg01
30c68     0C 2C 86 F1 | 	sub	local04, #12
30c6c     16 FB 61 FC | 	wrlong	result1, local04
30c70     10 2C 86 F1 | 	sub	local04, #16
30c74     16 3B 02 FB | 	rdlong	local11, local04
30c78     18 2C 86 F1 | 	sub	local04, #24
30c7c     02 3A 66 F0 | 	shl	local11, #2
30c80     6C 00 90 FD | 	jmp	#LR__4807
30c84                 | LR__4805
30c84     08 2C 06 F1 | 	add	local04, #8
30c88     16 2F EA FA | 	rdword	local05, local04 wz
30c8c     08 2C 86 F1 | 	sub	local04, #8
30c90     0D FA 05 A6 |  if_e	mov	result1, #13
30c94     A8 01 90 AD |  if_e	jmp	#LR__4810
30c98     24 2C 06 F1 | 	add	local04, #36
30c9c     16 2F 02 FB | 	rdlong	local05, local04
30ca0     19 2F 02 F1 | 	add	local05, local07
30ca4     04 2C 06 F1 | 	add	local04, #4
30ca8     16 2F 62 FC | 	wrlong	local05, local04
30cac     28 2C 86 F1 | 	sub	local04, #40
30cb0     02 38 0E F2 | 	cmp	local10, #2 wz
30cb4     18 2C 06 A1 |  if_e	add	local04, #24
30cb8     16 2F 02 AB |  if_e	rdlong	local05, local04
30cbc     18 2C 86 A1 |  if_e	sub	local04, #24
30cc0     01 2E 66 A0 |  if_e	shl	local05, #1
30cc4     24 00 90 AD |  if_e	jmp	#LR__4806
30cc8     18 2C 06 F1 | 	add	local04, #24
30ccc     16 3B 02 FB | 	rdlong	local11, local04
30cd0     1D 2F 02 F6 | 	mov	local05, local11
30cd4     01 2E 66 F0 | 	shl	local05, #1
30cd8     1D 2F 02 F1 | 	add	local05, local11
30cdc     01 2E 46 F0 | 	shr	local05, #1
30ce0     18 2C 86 F1 | 	sub	local04, #24
30ce4     01 3A 06 F5 | 	and	local11, #1
30ce8     1D 2F 02 F1 | 	add	local05, local11
30cec                 | LR__4806
30cec     17 3B 02 F6 | 	mov	local11, local05
30cf0                 | LR__4807
30cf0     FF 3B 06 F1 | 	add	local11, #511
30cf4     09 3A 46 F0 | 	shr	local11, #9
30cf8     1C 2C 06 F1 | 	add	local04, #28
30cfc     16 17 02 FB | 	rdlong	arg03, local04
30d00     1C 2C 86 F1 | 	sub	local04, #28
30d04     1D 17 12 F2 | 	cmp	arg03, local11 wc
30d08     0D FA 05 C6 |  if_b	mov	result1, #13
30d0c     30 01 90 CD |  if_b	jmp	#LR__4810
30d10     14 2C 06 F1 | 	add	local04, #20
30d14     FF FF FF FF 
30d18     16 FF 6B FC | 	wrlong	##-1, local04
30d1c     04 2C 86 F1 | 	sub	local04, #4
30d20     FF FF FF FF 
30d24     16 FF 6B FC | 	wrlong	##-1, local04
30d28     0C 2C 86 F1 | 	sub	local04, #12
30d2c     16 01 49 FC | 	wrbyte	#128, local04
30d30     04 2C 86 F1 | 	sub	local04, #4
30d34     03 38 0E F2 | 	cmp	local10, #3 wz
30d38     D0 00 90 5D |  if_ne	jmp	#LR__4809
30d3c     34 2C 06 F1 | 	add	local04, #52
30d40     16 13 02 F6 | 	mov	arg01, local04
30d44     34 2C 86 F1 | 	sub	local04, #52
30d48     30 12 06 F1 | 	add	arg01, #48
30d4c                 | ' {
30d4c                 | ' 
30d4c                 | ' 	return *((WORD*)ptr);
30d4c     09 FB E1 FA | 	rdword	result1, arg01
30d50     FD 2E 32 F9 | 	getword	local05, result1, #0
30d54     01 2E 0E F2 | 	cmp	local05, #1 wz
30d58     B0 00 90 5D |  if_ne	jmp	#LR__4809
30d5c     01 30 06 F1 | 	add	local06, #1
30d60     16 13 02 F6 | 	mov	arg01, local04
30d64     18 15 02 F6 | 	mov	arg02, local06
30d68     CC CD BF FD | 	call	#_fatfs_cc_move_window
30d6c     00 FA 0D F2 | 	cmp	result1, #0 wz
30d70     98 00 90 5D |  if_ne	jmp	#LR__4809
30d74     04 2C 06 F1 | 	add	local04, #4
30d78     16 01 48 FC | 	wrbyte	#0, local04
30d7c     30 2C 06 F1 | 	add	local04, #48
30d80     16 13 02 F6 | 	mov	arg01, local04
30d84     34 2C 86 F1 | 	sub	local04, #52
30d88     FE 13 06 F1 | 	add	arg01, #510
30d8c                 | ' {
30d8c                 | ' 
30d8c                 | ' 	return *((WORD*)ptr);
30d8c     09 FB E1 FA | 	rdword	result1, arg01
30d90     FD 2E 32 F9 | 	getword	local05, result1, #0
30d94     55 00 00 FF 
30d98     55 2E 0E F2 | 	cmp	local05, ##43605 wz
30d9c     34 2C 06 A1 |  if_e	add	local04, #52
30da0     16 13 02 A6 |  if_e	mov	arg01, local04
30da4     34 2C 86 A1 |  if_e	sub	local04, #52
30da8                 | ' {
30da8                 | ' 
30da8                 | ' 	return *((DWORD*)ptr);
30da8     09 FB 01 AB |  if_e	rdlong	result1, arg01
30dac     A9 B0 20 AF 
30db0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
30db4     54 00 90 5D |  if_ne	jmp	#LR__4808
30db8     34 2C 06 F1 | 	add	local04, #52
30dbc     16 13 02 F6 | 	mov	arg01, local04
30dc0     34 2C 86 F1 | 	sub	local04, #52
30dc4     E4 13 06 F1 | 	add	arg01, #484
30dc8                 | ' {
30dc8                 | ' 
30dc8                 | ' 	return *((DWORD*)ptr);
30dc8     09 FB 01 FB | 	rdlong	result1, arg01
30dcc     B9 A0 30 FF 
30dd0     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
30dd4     34 00 90 5D |  if_ne	jmp	#LR__4808
30dd8     34 2C 06 F1 | 	add	local04, #52
30ddc     16 13 02 F6 | 	mov	arg01, local04
30de0     E8 13 06 F1 | 	add	arg01, #488
30de4                 | ' {
30de4                 | ' 
30de4                 | ' 	return *((DWORD*)ptr);
30de4     09 FB 01 FB | 	rdlong	result1, arg01
30de8     20 2C 86 F1 | 	sub	local04, #32
30dec     16 FB 61 FC | 	wrlong	result1, local04
30df0     20 2C 06 F1 | 	add	local04, #32
30df4     16 13 02 F6 | 	mov	arg01, local04
30df8     EC 13 06 F1 | 	add	arg01, #492
30dfc                 | ' {
30dfc                 | ' 
30dfc                 | ' 	return *((DWORD*)ptr);
30dfc     09 FB 01 FB | 	rdlong	result1, arg01
30e00     24 2C 86 F1 | 	sub	local04, #36
30e04     16 FB 61 FC | 	wrlong	result1, local04
30e08     10 2C 86 F1 | 	sub	local04, #16
30e0c                 | LR__4808
30e0c                 | LR__4809
30e0c     16 39 42 FC | 	wrbyte	local10, local04
30e10     04 E4 05 F1 | 	add	objptr, #4
30e14     F2 2E E2 FA | 	rdword	local05, objptr
30e18     01 2E 06 F1 | 	add	local05, #1
30e1c     F2 2E 52 FC | 	wrword	local05, objptr
30e20     F2 3A E2 FA | 	rdword	local11, objptr
30e24     06 2C 06 F1 | 	add	local04, #6
30e28     16 3B 52 FC | 	wrword	local11, local04
30e2c     04 E4 05 F1 | 	add	objptr, #4
30e30     06 2C 06 F1 | 	add	local04, #6
30e34     16 E5 61 FC | 	wrlong	objptr, local04
30e38                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
30e38                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
30e38                 | ' 			{
30e38                 | ' 
30e38                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
30e38                 | ' 
30e38                 | ' 
30e38                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
30e38                 | ' 
30e38                 | ' 			}
30e38                 | ' 		}
30e38                 | ' 
30e38                 | ' 
30e38                 | ' 	}
30e38                 | ' 
30e38                 | ' 	fs->fs_type = (BYTE)fmt;
30e38                 | ' 	fs->id = ++Fsid;
30e38                 | ' 
30e38                 | ' 	fs->lfnbuf = LfnBuf;
30e38                 | ' #line 3567 "ff.c"
30e38                 | ' 	return FR_OK;
30e38     00 FA 05 F6 | 	mov	result1, #0
30e3c     08 E4 85 F1 | 	sub	objptr, #8
30e40                 | LR__4810
30e40     A7 F0 03 F6 | 	mov	ptra, fp
30e44     B2 00 A0 FD | 	call	#popregs_
30e48                 | _fatfs_cc_mount_volume_ret
30e48     2D 00 64 FD | 	ret
30e4c                 | 
30e4c                 | _fatfs_cc_validate
30e4c     09 01 0A F6 | 	mov	_var01, arg01 wz
30e50     09 02 06 F6 | 	mov	_var02, #9
30e54     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
30e58     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
30e5c     50 00 90 AD |  if_e	jmp	#LR__4820
30e60     04 00 06 F1 | 	add	_var01, #4
30e64     00 07 E2 FA | 	rdword	_var04, _var01
30e68     04 00 86 F1 | 	sub	_var01, #4
30e6c     00 13 02 FB | 	rdlong	arg01, _var01
30e70     06 12 06 F1 | 	add	arg01, #6
30e74     09 FB E1 FA | 	rdword	result1, arg01
30e78     FD 06 0A F2 | 	cmp	_var04, result1 wz
30e7c     30 00 90 5D |  if_ne	jmp	#LR__4820
30e80     00 07 02 FB | 	rdlong	_var04, _var01
30e84     01 06 06 F1 | 	add	_var04, #1
30e88     03 13 CA FA | 	rdbyte	arg01, _var04 wz
30e8c     01 FA 05 56 |  if_ne	mov	result1, #1
30e90                 | ' 
30e90                 | ' 	return Stat;
30e90     01 00 00 AF 
30e94     20 E4 05 A1 |  if_e	add	objptr, ##544
30e98     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
30e9c     01 00 00 AF 
30ea0     20 E4 85 A1 |  if_e	sub	objptr, ##544
30ea4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
30ea8     01 04 CE F7 | 	test	_var03, #1 wz
30eac     00 02 06 A6 |  if_e	mov	_var02, #0
30eb0                 | LR__4820
30eb0     00 02 0E F2 | 	cmp	_var02, #0 wz
30eb4     00 05 02 AB |  if_e	rdlong	_var03, _var01
30eb8     00 04 06 56 |  if_ne	mov	_var03, #0
30ebc     0A 05 62 FC | 	wrlong	_var03, arg02
30ec0                 | ' 			res = FR_OK;
30ec0                 | ' 		}
30ec0                 | ' 
30ec0                 | ' 	}
30ec0                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
30ec0                 | ' 	return res;
30ec0     01 FB 01 F6 | 	mov	result1, _var02
30ec4                 | _fatfs_cc_validate_ret
30ec4     2D 00 64 FD | 	ret
30ec8                 | 
30ec8                 | _fatfs_cc_f_mount
30ec8     01 4A 05 F6 | 	mov	COUNT_, #1
30ecc     A8 00 A0 FD | 	call	#pushregs_
30ed0     20 F0 07 F1 | 	add	ptra, #32
30ed4     04 4E 05 F1 | 	add	fp, #4
30ed8     A7 12 62 FC | 	wrlong	arg01, fp
30edc     04 4E 05 F1 | 	add	fp, #4
30ee0     A7 14 62 FC | 	wrlong	arg02, fp
30ee4     04 4E 05 F1 | 	add	fp, #4
30ee8     A7 16 42 FC | 	wrbyte	arg03, fp
30eec     04 4E 85 F1 | 	sub	fp, #4
30ef0     A7 16 02 FB | 	rdlong	arg03, fp
30ef4     14 4E 05 F1 | 	add	fp, #20
30ef8     A7 16 62 FC | 	wrlong	arg03, fp
30efc     A7 12 02 F6 | 	mov	arg01, fp
30f00     1C 4E 85 F1 | 	sub	fp, #28
30f04     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
30f08     14 4E 05 F1 | 	add	fp, #20
30f0c     A7 FA 61 FC | 	wrlong	result1, fp
30f10     14 4E 85 F1 | 	sub	fp, #20
30f14     00 FA 55 F2 | 	cmps	result1, #0 wc
30f18     0B FA 05 C6 |  if_b	mov	result1, #11
30f1c     C0 00 90 CD |  if_b	jmp	#LR__4831
30f20     14 4E 05 F1 | 	add	fp, #20
30f24     A7 16 02 FB | 	rdlong	arg03, fp
30f28     02 16 66 F0 | 	shl	arg03, #2
30f2c     F2 16 02 F1 | 	add	arg03, objptr
30f30     0B 17 0A FB | 	rdlong	arg03, arg03 wz
30f34     04 4E 85 F1 | 	sub	fp, #4
30f38     A7 16 62 FC | 	wrlong	arg03, fp
30f3c     10 4E 85 F1 | 	sub	fp, #16
30f40     28 00 90 AD |  if_e	jmp	#LR__4830
30f44     10 4E 05 F1 | 	add	fp, #16
30f48     A7 16 02 FB | 	rdlong	arg03, fp
30f4c     10 4E 85 F1 | 	sub	fp, #16
30f50     01 16 06 F1 | 	add	arg03, #1
30f54     0B 13 C2 FA | 	rdbyte	arg01, arg03
30f58     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
30f5c     10 4E 05 F1 | 	add	fp, #16
30f60     A7 16 02 FB | 	rdlong	arg03, fp
30f64     10 4E 85 F1 | 	sub	fp, #16
30f68     0B 01 48 FC | 	wrbyte	#0, arg03
30f6c                 | LR__4830
30f6c     04 4E 05 F1 | 	add	fp, #4
30f70     A7 26 0A FB | 	rdlong	local01, fp wz
30f74     04 4E 85 F1 | 	sub	fp, #4
30f78     04 4E 05 51 |  if_ne	add	fp, #4
30f7c     A7 26 02 5B |  if_ne	rdlong	local01, fp
30f80     04 4E 85 51 |  if_ne	sub	fp, #4
30f84     13 01 48 5C |  if_ne	wrbyte	#0, local01
30f88     14 4E 05 F1 | 	add	fp, #20
30f8c     A7 26 02 FB | 	rdlong	local01, fp
30f90     02 26 66 F0 | 	shl	local01, #2
30f94     F2 26 02 F1 | 	add	local01, objptr
30f98     10 4E 85 F1 | 	sub	fp, #16
30f9c     A7 16 02 FB | 	rdlong	arg03, fp
30fa0     13 17 62 FC | 	wrlong	arg03, local01
30fa4     08 4E 05 F1 | 	add	fp, #8
30fa8     A7 26 CA FA | 	rdbyte	local01, fp wz
30fac     0C 4E 85 F1 | 	sub	fp, #12
30fb0     00 FA 05 A6 |  if_e	mov	result1, #0
30fb4     28 00 90 AD |  if_e	jmp	#LR__4831
30fb8     08 4E 05 F1 | 	add	fp, #8
30fbc     A7 12 02 F6 | 	mov	arg01, fp
30fc0     04 4E 85 F1 | 	sub	fp, #4
30fc4     A7 14 02 F6 | 	mov	arg02, fp
30fc8     04 4E 85 F1 | 	sub	fp, #4
30fcc     00 16 06 F6 | 	mov	arg03, #0
30fd0     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
30fd4     18 4E 05 F1 | 	add	fp, #24
30fd8     A7 FA 61 FC | 	wrlong	result1, fp
30fdc                 | ' 
30fdc                 | ' 	res = mount_volume(&path, &fs, 0);
30fdc                 | ' 	return res ;
30fdc     18 4E 85 F1 | 	sub	fp, #24
30fe0                 | LR__4831
30fe0     A7 F0 03 F6 | 	mov	ptra, fp
30fe4     B2 00 A0 FD | 	call	#popregs_
30fe8                 | _fatfs_cc_f_mount_ret
30fe8     2D 00 64 FD | 	ret
30fec                 | 
30fec                 | _fatfs_cc_f_open
30fec     02 4A 05 F6 | 	mov	COUNT_, #2
30ff0     A8 00 A0 FD | 	call	#pushregs_
30ff4     60 F0 07 F1 | 	add	ptra, #96
30ff8     04 4E 05 F1 | 	add	fp, #4
30ffc     A7 12 62 FC | 	wrlong	arg01, fp
31000     04 4E 05 F1 | 	add	fp, #4
31004     A7 14 62 FC | 	wrlong	arg02, fp
31008     04 4E 05 F1 | 	add	fp, #4
3100c     A7 16 42 FC | 	wrbyte	arg03, fp
31010     08 4E 85 F1 | 	sub	fp, #8
31014     A7 18 0A FB | 	rdlong	arg04, fp wz
31018     04 4E 85 F1 | 	sub	fp, #4
3101c     09 FA 05 A6 |  if_e	mov	result1, #9
31020     98 06 90 AD |  if_e	jmp	#LR__4857
31024     0C 4E 05 F1 | 	add	fp, #12
31028     A7 18 C2 FA | 	rdbyte	arg04, fp
3102c     3F 18 06 F5 | 	and	arg04, #63
31030     A7 18 42 FC | 	wrbyte	arg04, fp
31034     04 4E 85 F1 | 	sub	fp, #4
31038     A7 12 02 F6 | 	mov	arg01, fp
3103c     3C 4E 05 F1 | 	add	fp, #60
31040     A7 14 02 F6 | 	mov	arg02, fp
31044     38 4E 85 F1 | 	sub	fp, #56
31048     A7 16 C2 FA | 	rdbyte	arg03, fp
3104c     0C 4E 85 F1 | 	sub	fp, #12
31050     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31054     10 4E 05 F1 | 	add	fp, #16
31058     A7 FA 61 FC | 	wrlong	result1, fp
3105c     10 4E 85 F1 | 	sub	fp, #16
31060     00 FA 0D F2 | 	cmp	result1, #0 wz
31064     2C 06 90 5D |  if_ne	jmp	#LR__4856
31068     44 4E 05 F1 | 	add	fp, #68
3106c     A7 18 02 FB | 	rdlong	arg04, fp
31070     30 4E 85 F1 | 	sub	fp, #48
31074     A7 18 62 FC | 	wrlong	arg04, fp
31078     A7 12 02 F6 | 	mov	arg01, fp
3107c     0C 4E 85 F1 | 	sub	fp, #12
31080     A7 26 02 FB | 	rdlong	local01, fp
31084     08 4E 85 F1 | 	sub	fp, #8
31088     13 15 02 F6 | 	mov	arg02, local01
3108c     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31090     10 4E 05 F1 | 	add	fp, #16
31094     A7 FA 61 FC | 	wrlong	result1, fp
31098     10 4E 85 F1 | 	sub	fp, #16
3109c     00 FA 0D F2 | 	cmp	result1, #0 wz
310a0     1C 00 90 5D |  if_ne	jmp	#LR__4840
310a4     3F 4E 05 F1 | 	add	fp, #63
310a8     A7 18 C2 FA | 	rdbyte	arg04, fp
310ac     3F 4E 85 F1 | 	sub	fp, #63
310b0     80 18 CE F7 | 	test	arg04, #128 wz
310b4     10 4E 05 51 |  if_ne	add	fp, #16
310b8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
310bc     10 4E 85 51 |  if_ne	sub	fp, #16
310c0                 | LR__4840
310c0     0C 4E 05 F1 | 	add	fp, #12
310c4     A7 18 C2 FA | 	rdbyte	arg04, fp
310c8     0C 4E 85 F1 | 	sub	fp, #12
310cc     1C 18 CE F7 | 	test	arg04, #28 wz
310d0     F0 01 90 AD |  if_e	jmp	#LR__4845
310d4     10 4E 05 F1 | 	add	fp, #16
310d8     A7 26 0A FB | 	rdlong	local01, fp wz
310dc     10 4E 85 F1 | 	sub	fp, #16
310e0     48 00 90 AD |  if_e	jmp	#LR__4842
310e4     10 4E 05 F1 | 	add	fp, #16
310e8     A7 18 02 FB | 	rdlong	arg04, fp
310ec     10 4E 85 F1 | 	sub	fp, #16
310f0     04 18 0E F2 | 	cmp	arg04, #4 wz
310f4     1C 00 90 5D |  if_ne	jmp	#LR__4841
310f8     14 4E 05 F1 | 	add	fp, #20
310fc     A7 12 02 F6 | 	mov	arg01, fp
31100     14 4E 85 F1 | 	sub	fp, #20
31104     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
31108     10 4E 05 F1 | 	add	fp, #16
3110c     A7 FA 61 FC | 	wrlong	result1, fp
31110     10 4E 85 F1 | 	sub	fp, #16
31114                 | LR__4841
31114     0C 4E 05 F1 | 	add	fp, #12
31118     A7 26 C2 FA | 	rdbyte	local01, fp
3111c     08 26 46 F5 | 	or	local01, #8
31120     A7 26 42 FC | 	wrbyte	local01, fp
31124     0C 4E 85 F1 | 	sub	fp, #12
31128     3C 00 90 FD | 	jmp	#LR__4844
3112c                 | LR__4842
3112c     1A 4E 05 F1 | 	add	fp, #26
31130     A7 26 C2 FA | 	rdbyte	local01, fp
31134     1A 4E 85 F1 | 	sub	fp, #26
31138     11 26 CE F7 | 	test	local01, #17 wz
3113c     10 4E 05 51 |  if_ne	add	fp, #16
31140     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31144     10 4E 85 51 |  if_ne	sub	fp, #16
31148     1C 00 90 5D |  if_ne	jmp	#LR__4843
3114c     0C 4E 05 F1 | 	add	fp, #12
31150     A7 26 C2 FA | 	rdbyte	local01, fp
31154     0C 4E 85 F1 | 	sub	fp, #12
31158     04 26 CE F7 | 	test	local01, #4 wz
3115c     10 4E 05 51 |  if_ne	add	fp, #16
31160     A7 10 68 5C |  if_ne	wrlong	#8, fp
31164     10 4E 85 51 |  if_ne	sub	fp, #16
31168                 | LR__4843
31168                 | LR__4844
31168     10 4E 05 F1 | 	add	fp, #16
3116c     A7 26 0A FB | 	rdlong	local01, fp wz
31170     10 4E 85 F1 | 	sub	fp, #16
31174     A8 01 90 5D |  if_ne	jmp	#LR__4848
31178     0C 4E 05 F1 | 	add	fp, #12
3117c     A7 26 C2 FA | 	rdbyte	local01, fp
31180     0C 4E 85 F1 | 	sub	fp, #12
31184     08 26 CE F7 | 	test	local01, #8 wz
31188     94 01 90 AD |  if_e	jmp	#LR__4848
3118c     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31190     54 4E 05 F1 | 	add	fp, #84
31194     A7 FA 61 FC | 	wrlong	result1, fp
31198     24 4E 85 F1 | 	sub	fp, #36
3119c     A7 12 02 FB | 	rdlong	arg01, fp
311a0     0E 12 06 F1 | 	add	arg01, #14
311a4     09 FB 61 FC | 	wrlong	result1, arg01
311a8     A7 12 02 FB | 	rdlong	arg01, fp
311ac     16 12 06 F1 | 	add	arg01, #22
311b0     24 4E 05 F1 | 	add	fp, #36
311b4     A7 14 02 FB | 	rdlong	arg02, fp
311b8     09 15 62 FC | 	wrlong	arg02, arg01
311bc     10 4E 85 F1 | 	sub	fp, #16
311c0     A7 12 02 FB | 	rdlong	arg01, fp
311c4     14 4E 85 F1 | 	sub	fp, #20
311c8     A7 14 02 FB | 	rdlong	arg02, fp
311cc     30 4E 85 F1 | 	sub	fp, #48
311d0     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
311d4     48 4E 05 F1 | 	add	fp, #72
311d8     A7 FA 61 FC | 	wrlong	result1, fp
311dc     18 4E 85 F1 | 	sub	fp, #24
311e0     A7 26 02 FB | 	rdlong	local01, fp
311e4     0B 26 06 F1 | 	add	local01, #11
311e8     13 41 48 FC | 	wrbyte	#32, local01
311ec     14 4E 05 F1 | 	add	fp, #20
311f0     A7 12 02 FB | 	rdlong	arg01, fp
311f4     14 4E 85 F1 | 	sub	fp, #20
311f8     A7 14 02 FB | 	rdlong	arg02, fp
311fc     30 4E 85 F1 | 	sub	fp, #48
31200     00 16 06 F6 | 	mov	arg03, #0
31204     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
31208     30 4E 05 F1 | 	add	fp, #48
3120c     A7 12 02 FB | 	rdlong	arg01, fp
31210     1C 12 06 F1 | 	add	arg01, #28
31214     09 01 68 FC | 	wrlong	#0, arg01
31218     14 4E 05 F1 | 	add	fp, #20
3121c     A7 26 02 FB | 	rdlong	local01, fp
31220     03 26 06 F1 | 	add	local01, #3
31224     13 03 48 FC | 	wrbyte	#1, local01
31228     04 4E 05 F1 | 	add	fp, #4
3122c     A7 26 0A FB | 	rdlong	local01, fp wz
31230     48 4E 85 F1 | 	sub	fp, #72
31234     E8 00 90 AD |  if_e	jmp	#LR__4848
31238     44 4E 05 F1 | 	add	fp, #68
3123c     A7 26 02 FB | 	rdlong	local01, fp
31240     30 26 06 F1 | 	add	local01, #48
31244     13 27 02 FB | 	rdlong	local01, local01
31248     14 4E 05 F1 | 	add	fp, #20
3124c     A7 26 62 FC | 	wrlong	local01, fp
31250     44 4E 85 F1 | 	sub	fp, #68
31254     A7 12 02 F6 | 	mov	arg01, fp
31258     34 4E 05 F1 | 	add	fp, #52
3125c     A7 14 02 FB | 	rdlong	arg02, fp
31260     48 4E 85 F1 | 	sub	fp, #72
31264     00 16 06 F6 | 	mov	arg03, #0
31268     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
3126c     10 4E 05 F1 | 	add	fp, #16
31270     A7 FA 61 FC | 	wrlong	result1, fp
31274     10 4E 85 F1 | 	sub	fp, #16
31278     00 FA 0D F2 | 	cmp	result1, #0 wz
3127c     A0 00 90 5D |  if_ne	jmp	#LR__4848
31280     44 4E 05 F1 | 	add	fp, #68
31284     A7 12 02 FB | 	rdlong	arg01, fp
31288     14 4E 05 F1 | 	add	fp, #20
3128c     A7 14 02 FB | 	rdlong	arg02, fp
31290     58 4E 85 F1 | 	sub	fp, #88
31294     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
31298     10 4E 05 F1 | 	add	fp, #16
3129c     A7 FA 61 FC | 	wrlong	result1, fp
312a0     34 4E 05 F1 | 	add	fp, #52
312a4     A7 18 02 FB | 	rdlong	arg04, fp
312a8     04 4E 05 F1 | 	add	fp, #4
312ac     A7 26 02 FB | 	rdlong	local01, fp
312b0     48 4E 85 F1 | 	sub	fp, #72
312b4     01 26 86 F1 | 	sub	local01, #1
312b8     10 18 06 F1 | 	add	arg04, #16
312bc     0C 27 62 FC | 	wrlong	local01, arg04
312c0     5C 00 90 FD | 	jmp	#LR__4848
312c4                 | LR__4845
312c4     10 4E 05 F1 | 	add	fp, #16
312c8     A7 18 0A FB | 	rdlong	arg04, fp wz
312cc     10 4E 85 F1 | 	sub	fp, #16
312d0     4C 00 90 5D |  if_ne	jmp	#LR__4847
312d4     1A 4E 05 F1 | 	add	fp, #26
312d8     A7 18 C2 FA | 	rdbyte	arg04, fp
312dc     1A 4E 85 F1 | 	sub	fp, #26
312e0     10 18 CE F7 | 	test	arg04, #16 wz
312e4     10 4E 05 51 |  if_ne	add	fp, #16
312e8     A7 08 68 5C |  if_ne	wrlong	#4, fp
312ec     10 4E 85 51 |  if_ne	sub	fp, #16
312f0     2C 00 90 5D |  if_ne	jmp	#LR__4846
312f4     0C 4E 05 F1 | 	add	fp, #12
312f8     A7 18 C2 FA | 	rdbyte	arg04, fp
312fc     0C 4E 85 F1 | 	sub	fp, #12
31300     02 18 CE F7 | 	test	arg04, #2 wz
31304     1A 4E 05 51 |  if_ne	add	fp, #26
31308     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
3130c     1A 4E 85 51 |  if_ne	sub	fp, #26
31310     01 26 CE 57 |  if_ne	test	local01, #1 wz
31314     10 4E 05 51 |  if_ne	add	fp, #16
31318     A7 0E 68 5C |  if_ne	wrlong	#7, fp
3131c     10 4E 85 51 |  if_ne	sub	fp, #16
31320                 | LR__4846
31320                 | LR__4847
31320                 | LR__4848
31320     10 4E 05 F1 | 	add	fp, #16
31324     A7 26 0A FB | 	rdlong	local01, fp wz
31328     10 4E 85 F1 | 	sub	fp, #16
3132c     60 00 90 5D |  if_ne	jmp	#LR__4849
31330     0C 4E 05 F1 | 	add	fp, #12
31334     A7 28 C2 FA | 	rdbyte	local02, fp
31338     0C 4E 85 F1 | 	sub	fp, #12
3133c     08 28 CE F7 | 	test	local02, #8 wz
31340     0C 4E 05 51 |  if_ne	add	fp, #12
31344     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31348     40 28 46 55 |  if_ne	or	local02, #64
3134c     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31350     0C 4E 85 51 |  if_ne	sub	fp, #12
31354     04 4E 05 F1 | 	add	fp, #4
31358     A7 28 02 FB | 	rdlong	local02, fp
3135c     40 4E 05 F1 | 	add	fp, #64
31360     A7 26 02 FB | 	rdlong	local01, fp
31364     30 26 06 F1 | 	add	local01, #48
31368     13 27 02 FB | 	rdlong	local01, local01
3136c     20 28 06 F1 | 	add	local02, #32
31370     14 27 62 FC | 	wrlong	local01, local02
31374     40 4E 85 F1 | 	sub	fp, #64
31378     A7 28 02 FB | 	rdlong	local02, fp
3137c     2C 4E 05 F1 | 	add	fp, #44
31380     A7 26 02 FB | 	rdlong	local01, fp
31384     30 4E 85 F1 | 	sub	fp, #48
31388     24 28 06 F1 | 	add	local02, #36
3138c     14 27 62 FC | 	wrlong	local01, local02
31390                 | LR__4849
31390     10 4E 05 F1 | 	add	fp, #16
31394     A7 28 0A FB | 	rdlong	local02, fp wz
31398     10 4E 85 F1 | 	sub	fp, #16
3139c     F4 02 90 5D |  if_ne	jmp	#LR__4855
313a0     04 4E 05 F1 | 	add	fp, #4
313a4     A7 28 02 FB | 	rdlong	local02, fp
313a8     40 4E 05 F1 | 	add	fp, #64
313ac     A7 12 02 FB | 	rdlong	arg01, fp
313b0     14 4E 85 F1 | 	sub	fp, #20
313b4     A7 14 02 FB | 	rdlong	arg02, fp
313b8     30 4E 85 F1 | 	sub	fp, #48
313bc     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
313c0     08 28 06 F1 | 	add	local02, #8
313c4     14 FB 61 FC | 	wrlong	result1, local02
313c8     04 4E 05 F1 | 	add	fp, #4
313cc     A7 28 02 FB | 	rdlong	local02, fp
313d0     2C 4E 05 F1 | 	add	fp, #44
313d4     A7 12 02 FB | 	rdlong	arg01, fp
313d8     1C 12 06 F1 | 	add	arg01, #28
313dc                 | ' {
313dc                 | ' 
313dc                 | ' 	return *((DWORD*)ptr);
313dc     09 FB 01 FB | 	rdlong	result1, arg01
313e0     0C 28 06 F1 | 	add	local02, #12
313e4     14 FB 61 FC | 	wrlong	result1, local02
313e8     2C 4E 85 F1 | 	sub	fp, #44
313ec     A7 28 02 FB | 	rdlong	local02, fp
313f0     40 4E 05 F1 | 	add	fp, #64
313f4     A7 26 02 FB | 	rdlong	local01, fp
313f8     14 27 62 FC | 	wrlong	local01, local02
313fc     40 4E 85 F1 | 	sub	fp, #64
31400     A7 28 02 FB | 	rdlong	local02, fp
31404     40 4E 05 F1 | 	add	fp, #64
31408     A7 26 02 FB | 	rdlong	local01, fp
3140c     06 26 06 F1 | 	add	local01, #6
31410     13 27 E2 FA | 	rdword	local01, local01
31414     04 28 06 F1 | 	add	local02, #4
31418     14 27 52 FC | 	wrword	local01, local02
3141c     40 4E 85 F1 | 	sub	fp, #64
31420     A7 28 02 FB | 	rdlong	local02, fp
31424     08 4E 05 F1 | 	add	fp, #8
31428     A7 26 C2 FA | 	rdbyte	local01, fp
3142c     10 28 06 F1 | 	add	local02, #16
31430     14 27 42 FC | 	wrbyte	local01, local02
31434     08 4E 85 F1 | 	sub	fp, #8
31438     A7 28 02 FB | 	rdlong	local02, fp
3143c     11 28 06 F1 | 	add	local02, #17
31440     14 01 48 FC | 	wrbyte	#0, local02
31444     A7 28 02 FB | 	rdlong	local02, fp
31448     1C 28 06 F1 | 	add	local02, #28
3144c     14 01 68 FC | 	wrlong	#0, local02
31450     A7 28 02 FB | 	rdlong	local02, fp
31454     14 28 06 F1 | 	add	local02, #20
31458     14 01 68 FC | 	wrlong	#0, local02
3145c     A7 12 02 FB | 	rdlong	arg01, fp
31460     04 4E 85 F1 | 	sub	fp, #4
31464     28 12 06 F1 | 	add	arg01, #40
31468     00 14 06 F6 | 	mov	arg02, #0
3146c     09 16 C6 F9 | 	decod	arg03, #9
31470     98 00 A0 FD | 	call	#\builtin_bytefill_
31474     0C 4E 05 F1 | 	add	fp, #12
31478     A7 28 C2 FA | 	rdbyte	local02, fp
3147c     0C 4E 85 F1 | 	sub	fp, #12
31480     20 28 CE F7 | 	test	local02, #32 wz
31484     0C 02 90 AD |  if_e	jmp	#LR__4854
31488     04 4E 05 F1 | 	add	fp, #4
3148c     A7 26 02 FB | 	rdlong	local01, fp
31490     04 4E 85 F1 | 	sub	fp, #4
31494     0C 26 06 F1 | 	add	local01, #12
31498     13 29 02 FB | 	rdlong	local02, local01
3149c     01 28 16 F2 | 	cmp	local02, #1 wc
314a0     F0 01 90 CD |  if_b	jmp	#LR__4854
314a4     04 4E 05 F1 | 	add	fp, #4
314a8     A7 26 02 FB | 	rdlong	local01, fp
314ac     13 29 02 F6 | 	mov	local02, local01
314b0     0C 26 06 F1 | 	add	local01, #12
314b4     13 27 02 FB | 	rdlong	local01, local01
314b8     14 28 06 F1 | 	add	local02, #20
314bc     14 27 62 FC | 	wrlong	local01, local02
314c0     40 4E 05 F1 | 	add	fp, #64
314c4     A7 28 02 FB | 	rdlong	local02, fp
314c8     0A 28 06 F1 | 	add	local02, #10
314cc     14 29 E2 FA | 	rdword	local02, local02
314d0     09 28 66 F0 | 	shl	local02, #9
314d4     08 4E 05 F1 | 	add	fp, #8
314d8     A7 28 62 FC | 	wrlong	local02, fp
314dc     48 4E 85 F1 | 	sub	fp, #72
314e0     A7 28 02 FB | 	rdlong	local02, fp
314e4     08 28 06 F1 | 	add	local02, #8
314e8     14 27 02 FB | 	rdlong	local01, local02
314ec     4C 4E 05 F1 | 	add	fp, #76
314f0     A7 26 62 FC | 	wrlong	local01, fp
314f4                 | ' 				fp->fptr = fp->obj.objsize;
314f4                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
314f4                 | ' 				clst = fp->obj.sclust;
314f4                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
314f4     4C 4E 85 F1 | 	sub	fp, #76
314f8     A7 28 02 FB | 	rdlong	local02, fp
314fc     0C 28 06 F1 | 	add	local02, #12
31500     14 27 02 FB | 	rdlong	local01, local02
31504     58 4E 05 F1 | 	add	fp, #88
31508     A7 26 62 FC | 	wrlong	local01, fp
3150c     5C 4E 85 F1 | 	sub	fp, #92
31510                 | LR__4850
31510     10 4E 05 F1 | 	add	fp, #16
31514     A7 28 0A FB | 	rdlong	local02, fp wz
31518     10 4E 85 F1 | 	sub	fp, #16
3151c     94 00 90 5D |  if_ne	jmp	#LR__4851
31520     5C 4E 05 F1 | 	add	fp, #92
31524     A7 28 02 FB | 	rdlong	local02, fp
31528     10 4E 85 F1 | 	sub	fp, #16
3152c     A7 26 02 FB | 	rdlong	local01, fp
31530     4C 4E 85 F1 | 	sub	fp, #76
31534     13 29 1A F2 | 	cmp	local02, local01 wcz
31538     78 00 90 ED |  if_be	jmp	#LR__4851
3153c     04 4E 05 F1 | 	add	fp, #4
31540     A7 12 02 FB | 	rdlong	arg01, fp
31544     4C 4E 05 F1 | 	add	fp, #76
31548     A7 14 02 FB | 	rdlong	arg02, fp
3154c     50 4E 85 F1 | 	sub	fp, #80
31550     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31554     50 4E 05 F1 | 	add	fp, #80
31558     A7 FA 61 FC | 	wrlong	result1, fp
3155c     50 4E 85 F1 | 	sub	fp, #80
31560     02 FA 15 F2 | 	cmp	result1, #2 wc
31564     10 4E 05 C1 |  if_b	add	fp, #16
31568     A7 04 68 CC |  if_b	wrlong	#2, fp
3156c     10 4E 85 C1 |  if_b	sub	fp, #16
31570     50 4E 05 F1 | 	add	fp, #80
31574     A7 28 02 FB | 	rdlong	local02, fp
31578     50 4E 85 F1 | 	sub	fp, #80
3157c     FF FF 7F FF 
31580     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31584     10 4E 05 A1 |  if_e	add	fp, #16
31588     A7 02 68 AC |  if_e	wrlong	#1, fp
3158c     10 4E 85 A1 |  if_e	sub	fp, #16
31590     5C 4E 05 F1 | 	add	fp, #92
31594     A7 28 02 FB | 	rdlong	local02, fp
31598     10 4E 85 F1 | 	sub	fp, #16
3159c     A7 26 02 FB | 	rdlong	local01, fp
315a0     13 29 82 F1 | 	sub	local02, local01
315a4     10 4E 05 F1 | 	add	fp, #16
315a8     A7 28 62 FC | 	wrlong	local02, fp
315ac     5C 4E 85 F1 | 	sub	fp, #92
315b0     5C FF 9F FD | 	jmp	#LR__4850
315b4                 | LR__4851
315b4     04 4E 05 F1 | 	add	fp, #4
315b8     A7 28 02 FB | 	rdlong	local02, fp
315bc     4C 4E 05 F1 | 	add	fp, #76
315c0     A7 26 02 FB | 	rdlong	local01, fp
315c4     18 28 06 F1 | 	add	local02, #24
315c8     14 27 62 FC | 	wrlong	local01, local02
315cc     40 4E 85 F1 | 	sub	fp, #64
315d0     A7 28 0A FB | 	rdlong	local02, fp wz
315d4     10 4E 85 F1 | 	sub	fp, #16
315d8     B8 00 90 5D |  if_ne	jmp	#LR__4853
315dc     5C 4E 05 F1 | 	add	fp, #92
315e0     A7 26 02 FB | 	rdlong	local01, fp
315e4     5C 4E 85 F1 | 	sub	fp, #92
315e8     FF 27 CE F7 | 	test	local01, #511 wz
315ec     A4 00 90 AD |  if_e	jmp	#LR__4853
315f0     44 4E 05 F1 | 	add	fp, #68
315f4     A7 12 02 FB | 	rdlong	arg01, fp
315f8     0C 4E 05 F1 | 	add	fp, #12
315fc     A7 14 02 FB | 	rdlong	arg02, fp
31600     50 4E 85 F1 | 	sub	fp, #80
31604     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
31608     58 4E 05 F1 | 	add	fp, #88
3160c     A7 FA 61 FC | 	wrlong	result1, fp
31610     00 FA 4D F2 | 	cmps	result1, #0 wz
31614     58 4E 85 F1 | 	sub	fp, #88
31618     10 4E 05 A1 |  if_e	add	fp, #16
3161c     A7 04 68 AC |  if_e	wrlong	#2, fp
31620     10 4E 85 A1 |  if_e	sub	fp, #16
31624     6C 00 90 AD |  if_e	jmp	#LR__4852
31628     04 4E 05 F1 | 	add	fp, #4
3162c     A7 28 02 FB | 	rdlong	local02, fp
31630     54 4E 05 F1 | 	add	fp, #84
31634     A7 26 02 FB | 	rdlong	local01, fp
31638     04 4E 05 F1 | 	add	fp, #4
3163c     A7 18 02 FB | 	rdlong	arg04, fp
31640     09 18 46 F0 | 	shr	arg04, #9
31644     0C 27 02 F1 | 	add	local01, arg04
31648     1C 28 06 F1 | 	add	local02, #28
3164c     14 27 62 FC | 	wrlong	local01, local02
31650     18 4E 85 F1 | 	sub	fp, #24
31654     A7 28 02 FB | 	rdlong	local02, fp
31658     01 28 06 F1 | 	add	local02, #1
3165c     14 13 C2 FA | 	rdbyte	arg01, local02
31660     40 4E 85 F1 | 	sub	fp, #64
31664     A7 28 02 FB | 	rdlong	local02, fp
31668     14 15 02 F6 | 	mov	arg02, local02
3166c     28 14 06 F1 | 	add	arg02, #40
31670     04 4E 85 F1 | 	sub	fp, #4
31674     1C 28 06 F1 | 	add	local02, #28
31678     14 17 02 FB | 	rdlong	arg03, local02
3167c     01 18 06 F6 | 	mov	arg04, #1
31680     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
31684     00 FA 0D F2 | 	cmp	result1, #0 wz
31688     10 4E 05 51 |  if_ne	add	fp, #16
3168c     A7 02 68 5C |  if_ne	wrlong	#1, fp
31690     10 4E 85 51 |  if_ne	sub	fp, #16
31694                 | LR__4852
31694                 | LR__4853
31694                 | LR__4854
31694                 | LR__4855
31694                 | LR__4856
31694     10 4E 05 F1 | 	add	fp, #16
31698     A7 28 0A FB | 	rdlong	local02, fp wz
3169c     10 4E 85 F1 | 	sub	fp, #16
316a0     04 4E 05 51 |  if_ne	add	fp, #4
316a4     A7 28 02 5B |  if_ne	rdlong	local02, fp
316a8     04 4E 85 51 |  if_ne	sub	fp, #4
316ac     14 01 68 5C |  if_ne	wrlong	#0, local02
316b0                 | ' 
316b0                 | ' 	return res ;
316b0     10 4E 05 F1 | 	add	fp, #16
316b4     A7 FA 01 FB | 	rdlong	result1, fp
316b8     10 4E 85 F1 | 	sub	fp, #16
316bc                 | LR__4857
316bc     A7 F0 03 F6 | 	mov	ptra, fp
316c0     B2 00 A0 FD | 	call	#popregs_
316c4                 | _fatfs_cc_f_open_ret
316c4     2D 00 64 FD | 	ret
316c8                 | 
316c8                 | _fatfs_cc_f_read
316c8     0E 4A 05 F6 | 	mov	COUNT_, #14
316cc     A8 00 A0 FD | 	call	#pushregs_
316d0     38 F0 07 F1 | 	add	ptra, #56
316d4     04 4E 05 F1 | 	add	fp, #4
316d8     A7 12 62 FC | 	wrlong	arg01, fp
316dc     04 4E 05 F1 | 	add	fp, #4
316e0     A7 14 62 FC | 	wrlong	arg02, fp
316e4     04 4E 05 F1 | 	add	fp, #4
316e8     A7 16 62 FC | 	wrlong	arg03, fp
316ec     04 4E 05 F1 | 	add	fp, #4
316f0     A7 18 62 FC | 	wrlong	arg04, fp
316f4     08 4E 85 F1 | 	sub	fp, #8
316f8     A7 FA 01 FB | 	rdlong	result1, fp
316fc     2C 4E 05 F1 | 	add	fp, #44
31700     A7 FA 61 FC | 	wrlong	result1, fp
31704     24 4E 85 F1 | 	sub	fp, #36
31708     A7 FA 01 FB | 	rdlong	result1, fp
3170c     FD 00 68 FC | 	wrlong	#0, result1
31710     0C 4E 85 F1 | 	sub	fp, #12
31714     A7 12 02 FB | 	rdlong	arg01, fp
31718     14 4E 05 F1 | 	add	fp, #20
3171c     A7 14 02 F6 | 	mov	arg02, fp
31720     18 4E 85 F1 | 	sub	fp, #24
31724     24 F7 BF FD | 	call	#_fatfs_cc_validate
31728     14 4E 05 F1 | 	add	fp, #20
3172c     A7 FA 61 FC | 	wrlong	result1, fp
31730     00 FA 4D F2 | 	cmps	result1, #0 wz
31734     14 4E 85 F1 | 	sub	fp, #20
31738     20 00 90 5D |  if_ne	jmp	#LR__4860
3173c     04 4E 05 F1 | 	add	fp, #4
31740     A7 14 02 FB | 	rdlong	arg02, fp
31744     11 14 06 F1 | 	add	arg02, #17
31748     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
3174c     10 4E 05 F1 | 	add	fp, #16
31750     A7 14 62 FC | 	wrlong	arg02, fp
31754     14 4E 85 F1 | 	sub	fp, #20
31758     10 00 90 AD |  if_e	jmp	#LR__4861
3175c                 | LR__4860
3175c     14 4E 05 F1 | 	add	fp, #20
31760     A7 FA 01 FB | 	rdlong	result1, fp
31764     14 4E 85 F1 | 	sub	fp, #20
31768     EC 05 90 FD | 	jmp	#LR__4880
3176c                 | LR__4861
3176c     04 4E 05 F1 | 	add	fp, #4
31770     A7 18 02 FB | 	rdlong	arg04, fp
31774     04 4E 85 F1 | 	sub	fp, #4
31778     10 18 06 F1 | 	add	arg04, #16
3177c     0C 19 C2 FA | 	rdbyte	arg04, arg04
31780     01 18 CE F7 | 	test	arg04, #1 wz
31784     07 FA 05 A6 |  if_e	mov	result1, #7
31788     CC 05 90 AD |  if_e	jmp	#LR__4880
3178c     04 4E 05 F1 | 	add	fp, #4
31790     A7 26 02 FB | 	rdlong	local01, fp
31794     13 29 02 F6 | 	mov	local02, local01
31798     0C 28 06 F1 | 	add	local02, #12
3179c     14 2B 02 FB | 	rdlong	local03, local02
317a0     14 26 06 F1 | 	add	local01, #20
317a4     13 27 02 FB | 	rdlong	local01, local01
317a8     13 2B 82 F1 | 	sub	local03, local01
317ac     20 4E 05 F1 | 	add	fp, #32
317b0     A7 2A 62 FC | 	wrlong	local03, fp
317b4     18 4E 85 F1 | 	sub	fp, #24
317b8     A7 2C 02 FB | 	rdlong	local04, fp
317bc     0C 4E 85 F1 | 	sub	fp, #12
317c0     15 2D 1A F2 | 	cmp	local04, local03 wcz
317c4     24 4E 05 11 |  if_a	add	fp, #36
317c8     A7 2C 02 1B |  if_a	rdlong	local04, fp
317cc     18 4E 85 11 |  if_a	sub	fp, #24
317d0     A7 2C 62 1C |  if_a	wrlong	local04, fp
317d4     0C 4E 85 11 |  if_a	sub	fp, #12
317d8                 | ' 
317d8                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
317d8                 | LR__4862
317d8     0C 4E 05 F1 | 	add	fp, #12
317dc     A7 28 02 FB | 	rdlong	local02, fp
317e0     0C 4E 85 F1 | 	sub	fp, #12
317e4     14 2D 02 F6 | 	mov	local04, local02
317e8     01 2C 16 F2 | 	cmp	local04, #1 wc
317ec     64 05 90 CD |  if_b	jmp	#LR__4879
317f0     04 4E 05 F1 | 	add	fp, #4
317f4     A7 2A 02 FB | 	rdlong	local03, fp
317f8     04 4E 85 F1 | 	sub	fp, #4
317fc     14 2A 06 F1 | 	add	local03, #20
31800     15 2B 02 FB | 	rdlong	local03, local03
31804     FF 2B CE F7 | 	test	local03, #511 wz
31808     3C 04 90 5D |  if_ne	jmp	#LR__4877
3180c     04 4E 05 F1 | 	add	fp, #4
31810     A7 26 02 FB | 	rdlong	local01, fp
31814     14 26 06 F1 | 	add	local01, #20
31818     13 2B 02 FB | 	rdlong	local03, local01
3181c     09 2A 46 F0 | 	shr	local03, #9
31820     14 4E 05 F1 | 	add	fp, #20
31824     A7 2E 02 FB | 	rdlong	local05, fp
31828     17 31 02 F6 | 	mov	local06, local05
3182c     0A 30 06 F1 | 	add	local06, #10
31830     18 33 E2 FA | 	rdword	local07, local06
31834     0A 30 86 F1 | 	sub	local06, #10
31838     19 35 32 F9 | 	getword	local08, local07, #0
3183c     01 34 86 F1 | 	sub	local08, #1
31840     1A 2B 0A F5 | 	and	local03, local08 wz
31844     18 4E 05 F1 | 	add	fp, #24
31848     A7 2A 62 FC | 	wrlong	local03, fp
3184c     30 4E 85 F1 | 	sub	fp, #48
31850     E0 00 90 5D |  if_ne	jmp	#LR__4867
31854     04 4E 05 F1 | 	add	fp, #4
31858     A7 2A 02 FB | 	rdlong	local03, fp
3185c     04 4E 85 F1 | 	sub	fp, #4
31860     14 2A 06 F1 | 	add	local03, #20
31864     15 2B 0A FB | 	rdlong	local03, local03 wz
31868     20 00 90 5D |  if_ne	jmp	#LR__4863
3186c     04 4E 05 F1 | 	add	fp, #4
31870     A7 2A 02 FB | 	rdlong	local03, fp
31874     08 2A 06 F1 | 	add	local03, #8
31878     15 2B 02 FB | 	rdlong	local03, local03
3187c     18 4E 05 F1 | 	add	fp, #24
31880     A7 2A 62 FC | 	wrlong	local03, fp
31884     1C 4E 85 F1 | 	sub	fp, #28
31888     28 00 90 FD | 	jmp	#LR__4864
3188c                 | LR__4863
3188c     04 4E 05 F1 | 	add	fp, #4
31890     A7 34 02 FB | 	rdlong	local08, fp
31894     1A 13 02 F6 | 	mov	arg01, local08
31898     04 4E 85 F1 | 	sub	fp, #4
3189c     18 34 06 F1 | 	add	local08, #24
318a0     1A 15 02 FB | 	rdlong	arg02, local08
318a4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
318a8     1C 4E 05 F1 | 	add	fp, #28
318ac     A7 FA 61 FC | 	wrlong	result1, fp
318b0     1C 4E 85 F1 | 	sub	fp, #28
318b4                 | LR__4864
318b4     1C 4E 05 F1 | 	add	fp, #28
318b8     A7 2A 02 FB | 	rdlong	local03, fp
318bc     1C 4E 85 F1 | 	sub	fp, #28
318c0     02 2A 16 F2 | 	cmp	local03, #2 wc
318c4     1C 00 90 3D |  if_ae	jmp	#LR__4865
318c8     04 4E 05 F1 | 	add	fp, #4
318cc     A7 2A 02 FB | 	rdlong	local03, fp
318d0     04 4E 85 F1 | 	sub	fp, #4
318d4     11 2A 06 F1 | 	add	local03, #17
318d8     15 05 48 FC | 	wrbyte	#2, local03
318dc     02 FA 05 F6 | 	mov	result1, #2
318e0     74 04 90 FD | 	jmp	#LR__4880
318e4                 | LR__4865
318e4     1C 4E 05 F1 | 	add	fp, #28
318e8     A7 2A 02 FB | 	rdlong	local03, fp
318ec     1C 4E 85 F1 | 	sub	fp, #28
318f0     FF FF 7F FF 
318f4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
318f8     1C 00 90 5D |  if_ne	jmp	#LR__4866
318fc     04 4E 05 F1 | 	add	fp, #4
31900     A7 2A 02 FB | 	rdlong	local03, fp
31904     04 4E 85 F1 | 	sub	fp, #4
31908     11 2A 06 F1 | 	add	local03, #17
3190c     15 03 48 FC | 	wrbyte	#1, local03
31910     01 FA 05 F6 | 	mov	result1, #1
31914     40 04 90 FD | 	jmp	#LR__4880
31918                 | LR__4866
31918     04 4E 05 F1 | 	add	fp, #4
3191c     A7 2A 02 FB | 	rdlong	local03, fp
31920     18 4E 05 F1 | 	add	fp, #24
31924     A7 34 02 FB | 	rdlong	local08, fp
31928     1C 4E 85 F1 | 	sub	fp, #28
3192c     18 2A 06 F1 | 	add	local03, #24
31930     15 35 62 FC | 	wrlong	local08, local03
31934                 | LR__4867
31934     18 4E 05 F1 | 	add	fp, #24
31938     A7 12 02 FB | 	rdlong	arg01, fp
3193c     14 4E 85 F1 | 	sub	fp, #20
31940     A7 2A 02 FB | 	rdlong	local03, fp
31944     04 4E 85 F1 | 	sub	fp, #4
31948     18 2A 06 F1 | 	add	local03, #24
3194c     15 15 02 FB | 	rdlong	arg02, local03
31950     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
31954     20 4E 05 F1 | 	add	fp, #32
31958     A7 FA 61 FC | 	wrlong	result1, fp
3195c     20 4E 85 F1 | 	sub	fp, #32
31960     00 FA 0D F2 | 	cmp	result1, #0 wz
31964     1C 00 90 5D |  if_ne	jmp	#LR__4868
31968     04 4E 05 F1 | 	add	fp, #4
3196c     A7 2A 02 FB | 	rdlong	local03, fp
31970     04 4E 85 F1 | 	sub	fp, #4
31974     11 2A 06 F1 | 	add	local03, #17
31978     15 05 48 FC | 	wrbyte	#2, local03
3197c     02 FA 05 F6 | 	mov	result1, #2
31980     D4 03 90 FD | 	jmp	#LR__4880
31984                 | LR__4868
31984     20 4E 05 F1 | 	add	fp, #32
31988     A7 2A 02 FB | 	rdlong	local03, fp
3198c     10 4E 05 F1 | 	add	fp, #16
31990     A7 34 02 FB | 	rdlong	local08, fp
31994     1A 2B 02 F1 | 	add	local03, local08
31998     10 4E 85 F1 | 	sub	fp, #16
3199c     A7 2A 62 FC | 	wrlong	local03, fp
319a0     14 4E 85 F1 | 	sub	fp, #20
319a4     A7 2A 02 FB | 	rdlong	local03, fp
319a8     09 2A 46 F0 | 	shr	local03, #9
319ac     20 4E 05 F1 | 	add	fp, #32
319b0     A7 2A 62 FC | 	wrlong	local03, fp
319b4     2C 4E 85 F1 | 	sub	fp, #44
319b8     01 2A 16 F2 | 	cmp	local03, #1 wc
319bc     5C 01 90 CD |  if_b	jmp	#LR__4872
319c0     30 4E 05 F1 | 	add	fp, #48
319c4     A7 2A 02 FB | 	rdlong	local03, fp
319c8     04 4E 85 F1 | 	sub	fp, #4
319cc     A7 34 02 FB | 	rdlong	local08, fp
319d0     1A 2B 02 F1 | 	add	local03, local08
319d4     14 4E 85 F1 | 	sub	fp, #20
319d8     A7 34 02 FB | 	rdlong	local08, fp
319dc     18 4E 85 F1 | 	sub	fp, #24
319e0     0A 34 06 F1 | 	add	local08, #10
319e4     1A 35 E2 FA | 	rdword	local08, local08
319e8     1A 2B 1A F2 | 	cmp	local03, local08 wcz
319ec     28 00 90 ED |  if_be	jmp	#LR__4869
319f0     18 4E 05 F1 | 	add	fp, #24
319f4     A7 26 02 FB | 	rdlong	local01, fp
319f8     0A 26 06 F1 | 	add	local01, #10
319fc     13 2B E2 FA | 	rdword	local03, local01
31a00     18 4E 05 F1 | 	add	fp, #24
31a04     A7 34 02 FB | 	rdlong	local08, fp
31a08     1A 2B 82 F1 | 	sub	local03, local08
31a0c     04 4E 85 F1 | 	sub	fp, #4
31a10     A7 2A 62 FC | 	wrlong	local03, fp
31a14     2C 4E 85 F1 | 	sub	fp, #44
31a18                 | LR__4869
31a18     18 4E 05 F1 | 	add	fp, #24
31a1c     A7 26 02 FB | 	rdlong	local01, fp
31a20     01 26 06 F1 | 	add	local01, #1
31a24     13 13 C2 FA | 	rdbyte	arg01, local01
31a28     1C 4E 05 F1 | 	add	fp, #28
31a2c     A7 14 02 FB | 	rdlong	arg02, fp
31a30     14 4E 85 F1 | 	sub	fp, #20
31a34     A7 16 02 FB | 	rdlong	arg03, fp
31a38     0C 4E 05 F1 | 	add	fp, #12
31a3c     A7 18 02 FB | 	rdlong	arg04, fp
31a40     2C 4E 85 F1 | 	sub	fp, #44
31a44     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
31a48     00 FA 0D F2 | 	cmp	result1, #0 wz
31a4c     1C 00 90 AD |  if_e	jmp	#LR__4870
31a50     04 4E 05 F1 | 	add	fp, #4
31a54     A7 2A 02 FB | 	rdlong	local03, fp
31a58     04 4E 85 F1 | 	sub	fp, #4
31a5c     11 2A 06 F1 | 	add	local03, #17
31a60     15 03 48 FC | 	wrbyte	#1, local03
31a64     01 FA 05 F6 | 	mov	result1, #1
31a68     EC 02 90 FD | 	jmp	#LR__4880
31a6c                 | LR__4870
31a6c     04 4E 05 F1 | 	add	fp, #4
31a70     A7 26 02 FB | 	rdlong	local01, fp
31a74     04 4E 85 F1 | 	sub	fp, #4
31a78     10 26 06 F1 | 	add	local01, #16
31a7c     13 2B C2 FA | 	rdbyte	local03, local01
31a80     80 2A CE F7 | 	test	local03, #128 wz
31a84     78 00 90 AD |  if_e	jmp	#LR__4871
31a88     04 4E 05 F1 | 	add	fp, #4
31a8c     A7 34 02 FB | 	rdlong	local08, fp
31a90     1C 34 06 F1 | 	add	local08, #28
31a94     1A 35 02 FB | 	rdlong	local08, local08
31a98     1C 4E 05 F1 | 	add	fp, #28
31a9c     A7 36 02 FB | 	rdlong	local09, fp
31aa0     1B 35 82 F1 | 	sub	local08, local09
31aa4     0C 4E 05 F1 | 	add	fp, #12
31aa8     A7 38 02 FB | 	rdlong	local10, fp
31aac     2C 4E 85 F1 | 	sub	fp, #44
31ab0     1C 3B 02 F6 | 	mov	local11, local10
31ab4     1D 35 12 F2 | 	cmp	local08, local11 wc
31ab8     44 00 90 3D |  if_ae	jmp	#LR__4871
31abc     34 4E 05 F1 | 	add	fp, #52
31ac0     A7 12 02 FB | 	rdlong	arg01, fp
31ac4     30 4E 85 F1 | 	sub	fp, #48
31ac8     A7 14 02 FB | 	rdlong	arg02, fp
31acc     0A 3B 02 F6 | 	mov	local11, arg02
31ad0     1C 3A 06 F1 | 	add	local11, #28
31ad4     1D 37 02 FB | 	rdlong	local09, local11
31ad8     1C 4E 05 F1 | 	add	fp, #28
31adc     A7 2E 02 FB | 	rdlong	local05, fp
31ae0     17 37 82 F1 | 	sub	local09, local05
31ae4     09 36 66 F0 | 	shl	local09, #9
31ae8     1B 3B 02 F6 | 	mov	local11, local09
31aec     1B 13 02 F1 | 	add	arg01, local09
31af0     20 4E 85 F1 | 	sub	fp, #32
31af4     28 14 06 F1 | 	add	arg02, #40
31af8     09 16 C6 F9 | 	decod	arg03, #9
31afc     60 43 BF FD | 	call	#__system____builtin_memmove
31b00                 | LR__4871
31b00     2C 4E 05 F1 | 	add	fp, #44
31b04     A7 2A 02 FB | 	rdlong	local03, fp
31b08     09 2A 66 F0 | 	shl	local03, #9
31b0c     04 4E 85 F1 | 	sub	fp, #4
31b10     A7 2A 62 FC | 	wrlong	local03, fp
31b14     28 4E 85 F1 | 	sub	fp, #40
31b18                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
31b18                 | ' 				}
31b18                 | ' 
31b18                 | ' 
31b18                 | ' 				rcnt =  ((UINT) 512 )  * cc;
31b18                 | ' 				continue;
31b18     B4 01 90 FD | 	jmp	#LR__4878
31b1c                 | LR__4872
31b1c     04 4E 05 F1 | 	add	fp, #4
31b20     A7 2A 02 FB | 	rdlong	local03, fp
31b24     1C 2A 06 F1 | 	add	local03, #28
31b28     15 2B 02 FB | 	rdlong	local03, local03
31b2c     1C 4E 05 F1 | 	add	fp, #28
31b30     A7 26 02 FB | 	rdlong	local01, fp
31b34     20 4E 85 F1 | 	sub	fp, #32
31b38     13 2B 0A F2 | 	cmp	local03, local01 wz
31b3c     EC 00 90 AD |  if_e	jmp	#LR__4876
31b40     04 4E 05 F1 | 	add	fp, #4
31b44     A7 26 02 FB | 	rdlong	local01, fp
31b48     04 4E 85 F1 | 	sub	fp, #4
31b4c     10 26 06 F1 | 	add	local01, #16
31b50     13 2B C2 FA | 	rdbyte	local03, local01
31b54     80 2A CE F7 | 	test	local03, #128 wz
31b58     7C 00 90 AD |  if_e	jmp	#LR__4874
31b5c     18 4E 05 F1 | 	add	fp, #24
31b60     A7 26 02 FB | 	rdlong	local01, fp
31b64     01 26 06 F1 | 	add	local01, #1
31b68     13 13 C2 FA | 	rdbyte	arg01, local01
31b6c     14 4E 85 F1 | 	sub	fp, #20
31b70     A7 2A 02 FB | 	rdlong	local03, fp
31b74     15 15 02 F6 | 	mov	arg02, local03
31b78     28 14 06 F1 | 	add	arg02, #40
31b7c     04 4E 85 F1 | 	sub	fp, #4
31b80     1C 2A 06 F1 | 	add	local03, #28
31b84     15 17 02 FB | 	rdlong	arg03, local03
31b88     01 18 06 F6 | 	mov	arg04, #1
31b8c     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
31b90     00 FA 0D F2 | 	cmp	result1, #0 wz
31b94     1C 00 90 AD |  if_e	jmp	#LR__4873
31b98     04 4E 05 F1 | 	add	fp, #4
31b9c     A7 2A 02 FB | 	rdlong	local03, fp
31ba0     04 4E 85 F1 | 	sub	fp, #4
31ba4     11 2A 06 F1 | 	add	local03, #17
31ba8     15 03 48 FC | 	wrbyte	#1, local03
31bac     01 FA 05 F6 | 	mov	result1, #1
31bb0     A4 01 90 FD | 	jmp	#LR__4880
31bb4                 | LR__4873
31bb4     04 4E 05 F1 | 	add	fp, #4
31bb8     A7 3A 02 FB | 	rdlong	local11, fp
31bbc     1D 2B 02 F6 | 	mov	local03, local11
31bc0     04 4E 85 F1 | 	sub	fp, #4
31bc4     10 3A 06 F1 | 	add	local11, #16
31bc8     1D 3B C2 FA | 	rdbyte	local11, local11
31bcc     7F 3A 06 F5 | 	and	local11, #127
31bd0     10 2A 06 F1 | 	add	local03, #16
31bd4     15 3B 42 FC | 	wrbyte	local11, local03
31bd8                 | LR__4874
31bd8     18 4E 05 F1 | 	add	fp, #24
31bdc     A7 26 02 FB | 	rdlong	local01, fp
31be0     01 26 06 F1 | 	add	local01, #1
31be4     13 13 C2 FA | 	rdbyte	arg01, local01
31be8     14 4E 85 F1 | 	sub	fp, #20
31bec     A7 14 02 FB | 	rdlong	arg02, fp
31bf0     28 14 06 F1 | 	add	arg02, #40
31bf4     1C 4E 05 F1 | 	add	fp, #28
31bf8     A7 16 02 FB | 	rdlong	arg03, fp
31bfc     20 4E 85 F1 | 	sub	fp, #32
31c00     01 18 06 F6 | 	mov	arg04, #1
31c04     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
31c08     00 FA 0D F2 | 	cmp	result1, #0 wz
31c0c     1C 00 90 AD |  if_e	jmp	#LR__4875
31c10     04 4E 05 F1 | 	add	fp, #4
31c14     A7 2A 02 FB | 	rdlong	local03, fp
31c18     04 4E 85 F1 | 	sub	fp, #4
31c1c     11 2A 06 F1 | 	add	local03, #17
31c20     15 03 48 FC | 	wrbyte	#1, local03
31c24     01 FA 05 F6 | 	mov	result1, #1
31c28     2C 01 90 FD | 	jmp	#LR__4880
31c2c                 | LR__4875
31c2c                 | LR__4876
31c2c     04 4E 05 F1 | 	add	fp, #4
31c30     A7 2A 02 FB | 	rdlong	local03, fp
31c34     1C 4E 05 F1 | 	add	fp, #28
31c38     A7 3A 02 FB | 	rdlong	local11, fp
31c3c     20 4E 85 F1 | 	sub	fp, #32
31c40     1C 2A 06 F1 | 	add	local03, #28
31c44     15 3B 62 FC | 	wrlong	local11, local03
31c48                 | LR__4877
31c48     04 4E 05 F1 | 	add	fp, #4
31c4c     A7 26 02 FB | 	rdlong	local01, fp
31c50     14 26 06 F1 | 	add	local01, #20
31c54     13 3B 02 FB | 	rdlong	local11, local01
31c58     FF 3B 06 F5 | 	and	local11, #511
31c5c     09 2A C6 F9 | 	decod	local03, #9
31c60     1D 2B 82 F1 | 	sub	local03, local11
31c64     24 4E 05 F1 | 	add	fp, #36
31c68     A7 2A 62 FC | 	wrlong	local03, fp
31c6c     1C 4E 85 F1 | 	sub	fp, #28
31c70     A7 3A 02 FB | 	rdlong	local11, fp
31c74     0C 4E 85 F1 | 	sub	fp, #12
31c78     1D 2B 1A F2 | 	cmp	local03, local11 wcz
31c7c     0C 4E 05 11 |  if_a	add	fp, #12
31c80     A7 2A 02 1B |  if_a	rdlong	local03, fp
31c84     1C 4E 05 11 |  if_a	add	fp, #28
31c88     A7 2A 62 1C |  if_a	wrlong	local03, fp
31c8c     28 4E 85 11 |  if_a	sub	fp, #40
31c90     34 4E 05 F1 | 	add	fp, #52
31c94     A7 12 02 FB | 	rdlong	arg01, fp
31c98     30 4E 85 F1 | 	sub	fp, #48
31c9c     A7 30 02 FB | 	rdlong	local06, fp
31ca0     18 15 02 F6 | 	mov	arg02, local06
31ca4     28 14 06 F1 | 	add	arg02, #40
31ca8     14 30 06 F1 | 	add	local06, #20
31cac     18 3B 02 FB | 	rdlong	local11, local06
31cb0     1D 37 02 F6 | 	mov	local09, local11
31cb4     1B 39 02 F6 | 	mov	local10, local09
31cb8     FF 39 06 F5 | 	and	local10, #511
31cbc     1C 15 02 F1 | 	add	arg02, local10
31cc0     24 4E 05 F1 | 	add	fp, #36
31cc4     A7 16 02 FB | 	rdlong	arg03, fp
31cc8     28 4E 85 F1 | 	sub	fp, #40
31ccc     90 41 BF FD | 	call	#__system____builtin_memmove
31cd0                 | LR__4878
31cd0     0C 4E 05 F1 | 	add	fp, #12
31cd4     A7 2A 02 FB | 	rdlong	local03, fp
31cd8     1C 4E 05 F1 | 	add	fp, #28
31cdc     A7 34 02 FB | 	rdlong	local08, fp
31ce0     1A 2B 82 F1 | 	sub	local03, local08
31ce4     1C 4E 85 F1 | 	sub	fp, #28
31ce8     A7 2A 62 FC | 	wrlong	local03, fp
31cec     04 4E 05 F1 | 	add	fp, #4
31cf0     A7 26 02 FB | 	rdlong	local01, fp
31cf4     13 33 02 FB | 	rdlong	local07, local01
31cf8     18 4E 05 F1 | 	add	fp, #24
31cfc     A7 34 02 FB | 	rdlong	local08, fp
31d00     1A 33 02 F1 | 	add	local07, local08
31d04     13 33 62 FC | 	wrlong	local07, local01
31d08     0C 4E 05 F1 | 	add	fp, #12
31d0c     A7 2A 02 FB | 	rdlong	local03, fp
31d10     0C 4E 85 F1 | 	sub	fp, #12
31d14     A7 3C 02 FB | 	rdlong	local12, fp
31d18     1E 2B 02 F1 | 	add	local03, local12
31d1c     0C 4E 05 F1 | 	add	fp, #12
31d20     A7 2A 62 FC | 	wrlong	local03, fp
31d24     30 4E 85 F1 | 	sub	fp, #48
31d28     A7 3E 02 FB | 	rdlong	local13, fp
31d2c     1F 2B 02 F6 | 	mov	local03, local13
31d30     14 3E 06 F1 | 	add	local13, #20
31d34     1F 41 02 FB | 	rdlong	local14, local13
31d38     24 4E 05 F1 | 	add	fp, #36
31d3c     A7 30 02 FB | 	rdlong	local06, fp
31d40     28 4E 85 F1 | 	sub	fp, #40
31d44     18 41 02 F1 | 	add	local14, local06
31d48     14 2A 06 F1 | 	add	local03, #20
31d4c     15 41 62 FC | 	wrlong	local14, local03
31d50     84 FA 9F FD | 	jmp	#LR__4862
31d54                 | LR__4879
31d54                 | ' 
31d54                 | ' 
31d54                 | ' 
31d54                 | ' 
31d54                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
31d54                 | ' 
31d54                 | ' 	}
31d54                 | ' 
31d54                 | ' 	return FR_OK ;
31d54     00 FA 05 F6 | 	mov	result1, #0
31d58                 | LR__4880
31d58     A7 F0 03 F6 | 	mov	ptra, fp
31d5c     B2 00 A0 FD | 	call	#popregs_
31d60                 | _fatfs_cc_f_read_ret
31d60     2D 00 64 FD | 	ret
31d64                 | 
31d64                 | _fatfs_cc_f_write
31d64     15 4A 05 F6 | 	mov	COUNT_, #21
31d68     A8 00 A0 FD | 	call	#pushregs_
31d6c     34 F0 07 F1 | 	add	ptra, #52
31d70     04 4E 05 F1 | 	add	fp, #4
31d74     A7 12 62 FC | 	wrlong	arg01, fp
31d78     04 4E 05 F1 | 	add	fp, #4
31d7c     A7 14 62 FC | 	wrlong	arg02, fp
31d80     04 4E 05 F1 | 	add	fp, #4
31d84     A7 16 62 FC | 	wrlong	arg03, fp
31d88     04 4E 05 F1 | 	add	fp, #4
31d8c     A7 18 62 FC | 	wrlong	arg04, fp
31d90     08 4E 85 F1 | 	sub	fp, #8
31d94     A7 FA 01 FB | 	rdlong	result1, fp
31d98     28 4E 05 F1 | 	add	fp, #40
31d9c     A7 FA 61 FC | 	wrlong	result1, fp
31da0     20 4E 85 F1 | 	sub	fp, #32
31da4     A7 FA 01 FB | 	rdlong	result1, fp
31da8     FD 00 68 FC | 	wrlong	#0, result1
31dac     0C 4E 85 F1 | 	sub	fp, #12
31db0     A7 12 02 FB | 	rdlong	arg01, fp
31db4     14 4E 05 F1 | 	add	fp, #20
31db8     A7 14 02 F6 | 	mov	arg02, fp
31dbc     18 4E 85 F1 | 	sub	fp, #24
31dc0     88 F0 BF FD | 	call	#_fatfs_cc_validate
31dc4     14 4E 05 F1 | 	add	fp, #20
31dc8     A7 FA 61 FC | 	wrlong	result1, fp
31dcc     00 FA 4D F2 | 	cmps	result1, #0 wz
31dd0     14 4E 85 F1 | 	sub	fp, #20
31dd4     20 00 90 5D |  if_ne	jmp	#LR__4890
31dd8     04 4E 05 F1 | 	add	fp, #4
31ddc     A7 14 02 FB | 	rdlong	arg02, fp
31de0     11 14 06 F1 | 	add	arg02, #17
31de4     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
31de8     10 4E 05 F1 | 	add	fp, #16
31dec     A7 14 62 FC | 	wrlong	arg02, fp
31df0     14 4E 85 F1 | 	sub	fp, #20
31df4     10 00 90 AD |  if_e	jmp	#LR__4891
31df8                 | LR__4890
31df8     14 4E 05 F1 | 	add	fp, #20
31dfc     A7 FA 01 FB | 	rdlong	result1, fp
31e00     14 4E 85 F1 | 	sub	fp, #20
31e04     44 07 90 FD | 	jmp	#LR__4913
31e08                 | LR__4891
31e08     04 4E 05 F1 | 	add	fp, #4
31e0c     A7 14 02 FB | 	rdlong	arg02, fp
31e10     04 4E 85 F1 | 	sub	fp, #4
31e14     10 14 06 F1 | 	add	arg02, #16
31e18     0A 15 C2 FA | 	rdbyte	arg02, arg02
31e1c     02 14 CE F7 | 	test	arg02, #2 wz
31e20     07 FA 05 A6 |  if_e	mov	result1, #7
31e24     24 07 90 AD |  if_e	jmp	#LR__4913
31e28     04 4E 05 F1 | 	add	fp, #4
31e2c     A7 14 02 FB | 	rdlong	arg02, fp
31e30     0A 13 02 F6 | 	mov	arg01, arg02
31e34     14 12 06 F1 | 	add	arg01, #20
31e38     09 13 02 FB | 	rdlong	arg01, arg01
31e3c     08 4E 05 F1 | 	add	fp, #8
31e40     A7 FA 01 FB | 	rdlong	result1, fp
31e44     FD 12 02 F1 | 	add	arg01, result1
31e48     0C 4E 85 F1 | 	sub	fp, #12
31e4c     14 14 06 F1 | 	add	arg02, #20
31e50     0A FB 01 FB | 	rdlong	result1, arg02
31e54     FD 12 12 F2 | 	cmp	arg01, result1 wc
31e58     24 00 90 3D |  if_ae	jmp	#LR__4892
31e5c     04 4E 05 F1 | 	add	fp, #4
31e60     A7 14 02 FB | 	rdlong	arg02, fp
31e64     01 FA 65 F6 | 	neg	result1, #1
31e68     14 14 06 F1 | 	add	arg02, #20
31e6c     0A 15 02 FB | 	rdlong	arg02, arg02
31e70     0A FB 81 F1 | 	sub	result1, arg02
31e74     08 4E 05 F1 | 	add	fp, #8
31e78     A7 FA 61 FC | 	wrlong	result1, fp
31e7c     0C 4E 85 F1 | 	sub	fp, #12
31e80                 | LR__4892
31e80                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
31e80                 | ' 	}
31e80                 | ' 
31e80                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
31e80                 | LR__4893
31e80     0C 4E 05 F1 | 	add	fp, #12
31e84     A7 FA 01 FB | 	rdlong	result1, fp
31e88     0C 4E 85 F1 | 	sub	fp, #12
31e8c     01 FA 15 F2 | 	cmp	result1, #1 wc
31e90     90 06 90 CD |  if_b	jmp	#LR__4912
31e94     04 4E 05 F1 | 	add	fp, #4
31e98     A7 FA 01 FB | 	rdlong	result1, fp
31e9c     04 4E 85 F1 | 	sub	fp, #4
31ea0     14 FA 05 F1 | 	add	result1, #20
31ea4     FD FA 01 FB | 	rdlong	result1, result1
31ea8     FF FB CD F7 | 	test	result1, #511 wz
31eac     D8 04 90 5D |  if_ne	jmp	#LR__4908
31eb0     04 4E 05 F1 | 	add	fp, #4
31eb4     A7 FA 01 FB | 	rdlong	result1, fp
31eb8     14 FA 05 F1 | 	add	result1, #20
31ebc     FD FA 01 FB | 	rdlong	result1, result1
31ec0     09 FA 45 F0 | 	shr	result1, #9
31ec4     14 4E 05 F1 | 	add	fp, #20
31ec8     A7 14 02 FB | 	rdlong	arg02, fp
31ecc     0A 14 06 F1 | 	add	arg02, #10
31ed0     0A 19 E2 FA | 	rdword	arg04, arg02
31ed4     0C 15 32 F9 | 	getword	arg02, arg04, #0
31ed8     01 14 86 F1 | 	sub	arg02, #1
31edc     0A FB 09 F5 | 	and	result1, arg02 wz
31ee0     14 4E 05 F1 | 	add	fp, #20
31ee4     A7 FA 61 FC | 	wrlong	result1, fp
31ee8     2C 4E 85 F1 | 	sub	fp, #44
31eec     44 01 90 5D |  if_ne	jmp	#LR__4899
31ef0     04 4E 05 F1 | 	add	fp, #4
31ef4     A7 FA 01 FB | 	rdlong	result1, fp
31ef8     04 4E 85 F1 | 	sub	fp, #4
31efc     14 FA 05 F1 | 	add	result1, #20
31f00     FD 14 0A FB | 	rdlong	arg02, result1 wz
31f04     44 00 90 5D |  if_ne	jmp	#LR__4894
31f08     04 4E 05 F1 | 	add	fp, #4
31f0c     A7 14 02 FB | 	rdlong	arg02, fp
31f10     08 14 06 F1 | 	add	arg02, #8
31f14     0A 15 0A FB | 	rdlong	arg02, arg02 wz
31f18     18 4E 05 F1 | 	add	fp, #24
31f1c     A7 14 62 FC | 	wrlong	arg02, fp
31f20     1C 4E 85 F1 | 	sub	fp, #28
31f24     4C 00 90 5D |  if_ne	jmp	#LR__4895
31f28     04 4E 05 F1 | 	add	fp, #4
31f2c     A7 12 02 FB | 	rdlong	arg01, fp
31f30     04 4E 85 F1 | 	sub	fp, #4
31f34     00 14 06 F6 | 	mov	arg02, #0
31f38     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
31f3c     1C 4E 05 F1 | 	add	fp, #28
31f40     A7 FA 61 FC | 	wrlong	result1, fp
31f44     1C 4E 85 F1 | 	sub	fp, #28
31f48     28 00 90 FD | 	jmp	#LR__4895
31f4c                 | LR__4894
31f4c     04 4E 05 F1 | 	add	fp, #4
31f50     A7 18 02 FB | 	rdlong	arg04, fp
31f54     0C 13 02 F6 | 	mov	arg01, arg04
31f58     04 4E 85 F1 | 	sub	fp, #4
31f5c     18 18 06 F1 | 	add	arg04, #24
31f60     0C 15 02 FB | 	rdlong	arg02, arg04
31f64     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
31f68     1C 4E 05 F1 | 	add	fp, #28
31f6c     A7 FA 61 FC | 	wrlong	result1, fp
31f70     1C 4E 85 F1 | 	sub	fp, #28
31f74                 | LR__4895
31f74     1C 4E 05 F1 | 	add	fp, #28
31f78     A7 FA 09 FB | 	rdlong	result1, fp wz
31f7c     1C 4E 85 F1 | 	sub	fp, #28
31f80     A0 05 90 AD |  if_e	jmp	#LR__4912
31f84     1C 4E 05 F1 | 	add	fp, #28
31f88     A7 FA 01 FB | 	rdlong	result1, fp
31f8c     1C 4E 85 F1 | 	sub	fp, #28
31f90     01 FA 0D F2 | 	cmp	result1, #1 wz
31f94     1C 00 90 5D |  if_ne	jmp	#LR__4896
31f98     04 4E 05 F1 | 	add	fp, #4
31f9c     A7 FA 01 FB | 	rdlong	result1, fp
31fa0     04 4E 85 F1 | 	sub	fp, #4
31fa4     11 FA 05 F1 | 	add	result1, #17
31fa8     FD 04 48 FC | 	wrbyte	#2, result1
31fac     02 FA 05 F6 | 	mov	result1, #2
31fb0     98 05 90 FD | 	jmp	#LR__4913
31fb4                 | LR__4896
31fb4     1C 4E 05 F1 | 	add	fp, #28
31fb8     A7 FA 01 FB | 	rdlong	result1, fp
31fbc     1C 4E 85 F1 | 	sub	fp, #28
31fc0     FF FF 7F FF 
31fc4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
31fc8     1C 00 90 5D |  if_ne	jmp	#LR__4897
31fcc     04 4E 05 F1 | 	add	fp, #4
31fd0     A7 FA 01 FB | 	rdlong	result1, fp
31fd4     04 4E 85 F1 | 	sub	fp, #4
31fd8     11 FA 05 F1 | 	add	result1, #17
31fdc     FD 02 48 FC | 	wrbyte	#1, result1
31fe0     01 FA 05 F6 | 	mov	result1, #1
31fe4     64 05 90 FD | 	jmp	#LR__4913
31fe8                 | LR__4897
31fe8     04 4E 05 F1 | 	add	fp, #4
31fec     A7 FA 01 FB | 	rdlong	result1, fp
31ff0     18 4E 05 F1 | 	add	fp, #24
31ff4     A7 18 02 FB | 	rdlong	arg04, fp
31ff8     18 FA 05 F1 | 	add	result1, #24
31ffc     FD 18 62 FC | 	wrlong	arg04, result1
32000     18 4E 85 F1 | 	sub	fp, #24
32004     A7 FA 01 FB | 	rdlong	result1, fp
32008     04 4E 85 F1 | 	sub	fp, #4
3200c     08 FA 05 F1 | 	add	result1, #8
32010     FD FA 09 FB | 	rdlong	result1, result1 wz
32014     1C 00 90 5D |  if_ne	jmp	#LR__4898
32018     04 4E 05 F1 | 	add	fp, #4
3201c     A7 18 02 FB | 	rdlong	arg04, fp
32020     18 4E 05 F1 | 	add	fp, #24
32024     A7 FA 01 FB | 	rdlong	result1, fp
32028     1C 4E 85 F1 | 	sub	fp, #28
3202c     08 18 06 F1 | 	add	arg04, #8
32030     0C FB 61 FC | 	wrlong	result1, arg04
32034                 | LR__4898
32034                 | LR__4899
32034     04 4E 05 F1 | 	add	fp, #4
32038     A7 18 02 FB | 	rdlong	arg04, fp
3203c     04 4E 85 F1 | 	sub	fp, #4
32040     10 18 06 F1 | 	add	arg04, #16
32044     0C 19 C2 FA | 	rdbyte	arg04, arg04
32048     80 18 CE F7 | 	test	arg04, #128 wz
3204c     7C 00 90 AD |  if_e	jmp	#LR__4901
32050     18 4E 05 F1 | 	add	fp, #24
32054     A7 18 02 FB | 	rdlong	arg04, fp
32058     01 18 06 F1 | 	add	arg04, #1
3205c     0C 13 C2 FA | 	rdbyte	arg01, arg04
32060     14 4E 85 F1 | 	sub	fp, #20
32064     A7 18 02 FB | 	rdlong	arg04, fp
32068     0C 15 02 F6 | 	mov	arg02, arg04
3206c     28 14 06 F1 | 	add	arg02, #40
32070     04 4E 85 F1 | 	sub	fp, #4
32074     1C 18 06 F1 | 	add	arg04, #28
32078     0C 17 02 FB | 	rdlong	arg03, arg04
3207c     01 18 06 F6 | 	mov	arg04, #1
32080     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32084     00 FA 0D F2 | 	cmp	result1, #0 wz
32088     1C 00 90 AD |  if_e	jmp	#LR__4900
3208c     04 4E 05 F1 | 	add	fp, #4
32090     A7 FA 01 FB | 	rdlong	result1, fp
32094     04 4E 85 F1 | 	sub	fp, #4
32098     11 FA 05 F1 | 	add	result1, #17
3209c     FD 02 48 FC | 	wrbyte	#1, result1
320a0     01 FA 05 F6 | 	mov	result1, #1
320a4     A4 04 90 FD | 	jmp	#LR__4913
320a8                 | LR__4900
320a8     04 4E 05 F1 | 	add	fp, #4
320ac     A7 18 02 FB | 	rdlong	arg04, fp
320b0     0C FB 01 F6 | 	mov	result1, arg04
320b4     04 4E 85 F1 | 	sub	fp, #4
320b8     10 18 06 F1 | 	add	arg04, #16
320bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
320c0     7F 18 06 F5 | 	and	arg04, #127
320c4     10 FA 05 F1 | 	add	result1, #16
320c8     FD 18 42 FC | 	wrbyte	arg04, result1
320cc                 | LR__4901
320cc     18 4E 05 F1 | 	add	fp, #24
320d0     A7 12 02 FB | 	rdlong	arg01, fp
320d4     14 4E 85 F1 | 	sub	fp, #20
320d8     A7 14 02 FB | 	rdlong	arg02, fp
320dc     04 4E 85 F1 | 	sub	fp, #4
320e0     18 14 06 F1 | 	add	arg02, #24
320e4     0A 15 02 FB | 	rdlong	arg02, arg02
320e8     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
320ec     20 4E 05 F1 | 	add	fp, #32
320f0     A7 FA 61 FC | 	wrlong	result1, fp
320f4     20 4E 85 F1 | 	sub	fp, #32
320f8     00 FA 0D F2 | 	cmp	result1, #0 wz
320fc     1C 00 90 5D |  if_ne	jmp	#LR__4902
32100     04 4E 05 F1 | 	add	fp, #4
32104     A7 FA 01 FB | 	rdlong	result1, fp
32108     04 4E 85 F1 | 	sub	fp, #4
3210c     11 FA 05 F1 | 	add	result1, #17
32110     FD 04 48 FC | 	wrbyte	#2, result1
32114     02 FA 05 F6 | 	mov	result1, #2
32118     30 04 90 FD | 	jmp	#LR__4913
3211c                 | LR__4902
3211c     20 4E 05 F1 | 	add	fp, #32
32120     A7 FA 01 FB | 	rdlong	result1, fp
32124     0C 4E 05 F1 | 	add	fp, #12
32128     A7 26 02 FB | 	rdlong	local01, fp
3212c     13 FB 01 F1 | 	add	result1, local01
32130     0C 4E 85 F1 | 	sub	fp, #12
32134     A7 FA 61 FC | 	wrlong	result1, fp
32138     14 4E 85 F1 | 	sub	fp, #20
3213c     A7 FA 01 FB | 	rdlong	result1, fp
32140     09 FA 45 F0 | 	shr	result1, #9
32144     1C 4E 05 F1 | 	add	fp, #28
32148     A7 FA 61 FC | 	wrlong	result1, fp
3214c     28 4E 85 F1 | 	sub	fp, #40
32150     01 FA 15 F2 | 	cmp	result1, #1 wc
32154     60 01 90 CD |  if_b	jmp	#LR__4906
32158     2C 4E 05 F1 | 	add	fp, #44
3215c     A7 FA 01 FB | 	rdlong	result1, fp
32160     04 4E 85 F1 | 	sub	fp, #4
32164     A7 18 02 FB | 	rdlong	arg04, fp
32168     0C FB 01 F1 | 	add	result1, arg04
3216c     10 4E 85 F1 | 	sub	fp, #16
32170     A7 18 02 FB | 	rdlong	arg04, fp
32174     18 4E 85 F1 | 	sub	fp, #24
32178     0A 18 06 F1 | 	add	arg04, #10
3217c     0C 19 E2 FA | 	rdword	arg04, arg04
32180     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32184     28 00 90 ED |  if_be	jmp	#LR__4903
32188     18 4E 05 F1 | 	add	fp, #24
3218c     A7 FA 01 FB | 	rdlong	result1, fp
32190     0A FA 05 F1 | 	add	result1, #10
32194     FD FA E1 FA | 	rdword	result1, result1
32198     14 4E 05 F1 | 	add	fp, #20
3219c     A7 18 02 FB | 	rdlong	arg04, fp
321a0     0C FB 81 F1 | 	sub	result1, arg04
321a4     04 4E 85 F1 | 	sub	fp, #4
321a8     A7 FA 61 FC | 	wrlong	result1, fp
321ac     28 4E 85 F1 | 	sub	fp, #40
321b0                 | LR__4903
321b0     18 4E 05 F1 | 	add	fp, #24
321b4     A7 18 02 FB | 	rdlong	arg04, fp
321b8     01 18 06 F1 | 	add	arg04, #1
321bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
321c0     18 4E 05 F1 | 	add	fp, #24
321c4     A7 14 02 FB | 	rdlong	arg02, fp
321c8     10 4E 85 F1 | 	sub	fp, #16
321cc     A7 16 02 FB | 	rdlong	arg03, fp
321d0     08 4E 05 F1 | 	add	fp, #8
321d4     A7 18 02 FB | 	rdlong	arg04, fp
321d8     28 4E 85 F1 | 	sub	fp, #40
321dc     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
321e0     00 FA 0D F2 | 	cmp	result1, #0 wz
321e4     1C 00 90 AD |  if_e	jmp	#LR__4904
321e8     04 4E 05 F1 | 	add	fp, #4
321ec     A7 26 02 FB | 	rdlong	local01, fp
321f0     04 4E 85 F1 | 	sub	fp, #4
321f4     11 26 06 F1 | 	add	local01, #17
321f8     13 03 48 FC | 	wrbyte	#1, local01
321fc     01 FA 05 F6 | 	mov	result1, #1
32200     48 03 90 FD | 	jmp	#LR__4913
32204                 | LR__4904
32204     04 4E 05 F1 | 	add	fp, #4
32208     A7 FA 01 FB | 	rdlong	result1, fp
3220c     1C FA 05 F1 | 	add	result1, #28
32210     FD FA 01 FB | 	rdlong	result1, result1
32214     1C 4E 05 F1 | 	add	fp, #28
32218     A7 28 02 FB | 	rdlong	local02, fp
3221c     14 FB 81 F1 | 	sub	result1, local02
32220     08 4E 05 F1 | 	add	fp, #8
32224     A7 18 02 FB | 	rdlong	arg04, fp
32228     28 4E 85 F1 | 	sub	fp, #40
3222c     0C FB 11 F2 | 	cmp	result1, arg04 wc
32230     68 00 90 3D |  if_ae	jmp	#LR__4905
32234     04 4E 05 F1 | 	add	fp, #4
32238     A7 12 02 FB | 	rdlong	arg01, fp
3223c     28 12 06 F1 | 	add	arg01, #40
32240     2C 4E 05 F1 | 	add	fp, #44
32244     A7 14 02 FB | 	rdlong	arg02, fp
32248     2C 4E 85 F1 | 	sub	fp, #44
3224c     A7 FA 01 FB | 	rdlong	result1, fp
32250     1C FA 05 F1 | 	add	result1, #28
32254     FD 2A 02 FB | 	rdlong	local03, result1
32258     1C 4E 05 F1 | 	add	fp, #28
3225c     A7 18 02 FB | 	rdlong	arg04, fp
32260     20 4E 85 F1 | 	sub	fp, #32
32264     0C 2B 82 F1 | 	sub	local03, arg04
32268     09 2A 66 F0 | 	shl	local03, #9
3226c     15 15 02 F1 | 	add	arg02, local03
32270     09 16 C6 F9 | 	decod	arg03, #9
32274     E8 3B BF FD | 	call	#__system____builtin_memmove
32278     04 4E 05 F1 | 	add	fp, #4
3227c     A7 18 02 FB | 	rdlong	arg04, fp
32280     0C FB 01 F6 | 	mov	result1, arg04
32284     04 4E 85 F1 | 	sub	fp, #4
32288     10 18 06 F1 | 	add	arg04, #16
3228c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32290     7F 18 06 F5 | 	and	arg04, #127
32294     10 FA 05 F1 | 	add	result1, #16
32298     FD 18 42 FC | 	wrbyte	arg04, result1
3229c                 | LR__4905
3229c     28 4E 05 F1 | 	add	fp, #40
322a0     A7 FA 01 FB | 	rdlong	result1, fp
322a4     09 FA 65 F0 | 	shl	result1, #9
322a8     04 4E 85 F1 | 	sub	fp, #4
322ac     A7 FA 61 FC | 	wrlong	result1, fp
322b0     24 4E 85 F1 | 	sub	fp, #36
322b4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
322b4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
322b4                 | ' 				}
322b4                 | ' 
322b4                 | ' 
322b4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
322b4                 | ' 				continue;
322b4     74 01 90 FD | 	jmp	#LR__4909
322b8                 | LR__4906
322b8     04 4E 05 F1 | 	add	fp, #4
322bc     A7 28 02 FB | 	rdlong	local02, fp
322c0     1C 28 06 F1 | 	add	local02, #28
322c4     14 FB 01 FB | 	rdlong	result1, local02
322c8     1C 4E 05 F1 | 	add	fp, #28
322cc     A7 28 02 FB | 	rdlong	local02, fp
322d0     20 4E 85 F1 | 	sub	fp, #32
322d4     14 FB 09 F2 | 	cmp	result1, local02 wz
322d8     90 00 90 AD |  if_e	jmp	#LR__4907
322dc     04 4E 05 F1 | 	add	fp, #4
322e0     A7 FA 01 FB | 	rdlong	result1, fp
322e4     FD 2A 02 F6 | 	mov	local03, result1
322e8     04 4E 85 F1 | 	sub	fp, #4
322ec     14 2A 06 F1 | 	add	local03, #20
322f0     15 2B 02 FB | 	rdlong	local03, local03
322f4     0C FA 05 F1 | 	add	result1, #12
322f8     FD 2C 02 FB | 	rdlong	local04, result1
322fc     16 2F 02 F6 | 	mov	local05, local04
32300     17 2B 12 F2 | 	cmp	local03, local05 wc
32304     64 00 90 3D |  if_ae	jmp	#LR__4907
32308     18 4E 05 F1 | 	add	fp, #24
3230c     A7 18 02 FB | 	rdlong	arg04, fp
32310     01 18 06 F1 | 	add	arg04, #1
32314     0C 13 C2 FA | 	rdbyte	arg01, arg04
32318     14 4E 85 F1 | 	sub	fp, #20
3231c     A7 30 02 FB | 	rdlong	local06, fp
32320     28 30 06 F1 | 	add	local06, #40
32324     18 33 02 F6 | 	mov	local07, local06
32328     1C 4E 05 F1 | 	add	fp, #28
3232c     A7 34 02 FB | 	rdlong	local08, fp
32330     20 4E 85 F1 | 	sub	fp, #32
32334     01 36 06 F6 | 	mov	local09, #1
32338     19 15 02 F6 | 	mov	arg02, local07
3233c     1A 17 02 F6 | 	mov	arg03, local08
32340     01 18 06 F6 | 	mov	arg04, #1
32344     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
32348     FD 38 0A F6 | 	mov	local10, result1 wz
3234c     1C 00 90 AD |  if_e	jmp	#LR__4907
32350     04 4E 05 F1 | 	add	fp, #4
32354     A7 38 02 FB | 	rdlong	local10, fp
32358     04 4E 85 F1 | 	sub	fp, #4
3235c     11 38 06 F1 | 	add	local10, #17
32360     1C 03 48 FC | 	wrbyte	#1, local10
32364                 | ' 				fp->fptr < fp->obj.objsize &&
32364                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32364                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32364     01 FA 05 F6 | 	mov	result1, #1
32368     E0 01 90 FD | 	jmp	#LR__4913
3236c                 | LR__4907
3236c     04 4E 05 F1 | 	add	fp, #4
32370     A7 18 02 FB | 	rdlong	arg04, fp
32374     1C 4E 05 F1 | 	add	fp, #28
32378     A7 FA 01 FB | 	rdlong	result1, fp
3237c     20 4E 85 F1 | 	sub	fp, #32
32380     1C 18 06 F1 | 	add	arg04, #28
32384     0C FB 61 FC | 	wrlong	result1, arg04
32388                 | LR__4908
32388     04 4E 05 F1 | 	add	fp, #4
3238c     A7 FA 01 FB | 	rdlong	result1, fp
32390     14 FA 05 F1 | 	add	result1, #20
32394     FD FA 01 FB | 	rdlong	result1, result1
32398     FF FB 05 F5 | 	and	result1, #511
3239c     09 3A C6 F9 | 	decod	local11, #9
323a0     FD 3A 82 F1 | 	sub	local11, result1
323a4     20 4E 05 F1 | 	add	fp, #32
323a8     A7 3A 62 FC | 	wrlong	local11, fp
323ac     18 4E 85 F1 | 	sub	fp, #24
323b0     A7 FA 01 FB | 	rdlong	result1, fp
323b4     0C 4E 85 F1 | 	sub	fp, #12
323b8     FD 3A 1A F2 | 	cmp	local11, result1 wcz
323bc     0C 4E 05 11 |  if_a	add	fp, #12
323c0     A7 3A 02 1B |  if_a	rdlong	local11, fp
323c4     18 4E 05 11 |  if_a	add	fp, #24
323c8     A7 3A 62 1C |  if_a	wrlong	local11, fp
323cc     24 4E 85 11 |  if_a	sub	fp, #36
323d0     04 4E 05 F1 | 	add	fp, #4
323d4     A7 3A 02 FB | 	rdlong	local11, fp
323d8     1D 13 02 F6 | 	mov	arg01, local11
323dc     28 12 06 F1 | 	add	arg01, #40
323e0     14 3A 06 F1 | 	add	local11, #20
323e4     1D 3B 02 FB | 	rdlong	local11, local11
323e8     FF 3B 06 F5 | 	and	local11, #511
323ec     1D 13 02 F1 | 	add	arg01, local11
323f0     2C 4E 05 F1 | 	add	fp, #44
323f4     A7 14 02 FB | 	rdlong	arg02, fp
323f8     0C 4E 85 F1 | 	sub	fp, #12
323fc     A7 16 02 FB | 	rdlong	arg03, fp
32400     24 4E 85 F1 | 	sub	fp, #36
32404     58 3A BF FD | 	call	#__system____builtin_memmove
32408     04 4E 05 F1 | 	add	fp, #4
3240c     A7 FA 01 FB | 	rdlong	result1, fp
32410     FD 3A 02 F6 | 	mov	local11, result1
32414     04 4E 85 F1 | 	sub	fp, #4
32418     10 FA 05 F1 | 	add	result1, #16
3241c     FD FA C1 FA | 	rdbyte	result1, result1
32420     80 FA 45 F5 | 	or	result1, #128
32424     10 3A 06 F1 | 	add	local11, #16
32428     1D FB 41 FC | 	wrbyte	result1, local11
3242c                 | LR__4909
3242c     0C 4E 05 F1 | 	add	fp, #12
32430     A7 3A 02 FB | 	rdlong	local11, fp
32434     18 4E 05 F1 | 	add	fp, #24
32438     A7 FA 01 FB | 	rdlong	result1, fp
3243c     FD 3A 82 F1 | 	sub	local11, result1
32440     18 4E 85 F1 | 	sub	fp, #24
32444     A7 3A 62 FC | 	wrlong	local11, fp
32448     04 4E 05 F1 | 	add	fp, #4
3244c     A7 3C 02 FB | 	rdlong	local12, fp
32450     1E 3B 02 FB | 	rdlong	local11, local12
32454     14 4E 05 F1 | 	add	fp, #20
32458     A7 3E 02 FB | 	rdlong	local13, fp
3245c     1F 3B 02 F1 | 	add	local11, local13
32460     1E 3B 62 FC | 	wrlong	local11, local12
32464     0C 4E 05 F1 | 	add	fp, #12
32468     A7 3A 02 FB | 	rdlong	local11, fp
3246c     0C 4E 85 F1 | 	sub	fp, #12
32470     A7 40 02 FB | 	rdlong	local14, fp
32474     20 3B 02 F1 | 	add	local11, local14
32478     0C 4E 05 F1 | 	add	fp, #12
3247c     A7 3A 62 FC | 	wrlong	local11, fp
32480     2C 4E 85 F1 | 	sub	fp, #44
32484     A7 42 02 FB | 	rdlong	local15, fp
32488     21 3B 02 F6 | 	mov	local11, local15
3248c     14 42 06 F1 | 	add	local15, #20
32490     21 43 02 FB | 	rdlong	local15, local15
32494     20 4E 05 F1 | 	add	fp, #32
32498     A7 44 02 FB | 	rdlong	local16, fp
3249c     22 43 02 F1 | 	add	local15, local16
324a0     14 3A 06 F1 | 	add	local11, #20
324a4     1D 43 62 FC | 	wrlong	local15, local11
324a8     20 4E 85 F1 | 	sub	fp, #32
324ac     A7 46 02 FB | 	rdlong	local17, fp
324b0     23 3B 02 F6 | 	mov	local11, local17
324b4     23 49 02 F6 | 	mov	local18, local17
324b8     04 4E 85 F1 | 	sub	fp, #4
324bc     14 46 06 F1 | 	add	local17, #20
324c0     23 4B 02 FB | 	rdlong	local19, local17
324c4     0C 48 06 F1 | 	add	local18, #12
324c8     24 4D 02 FB | 	rdlong	local20, local18
324cc     26 4B 1A F2 | 	cmp	local19, local20 wcz
324d0     24 00 90 ED |  if_be	jmp	#LR__4910
324d4     04 4E 05 F1 | 	add	fp, #4
324d8     A7 2E 02 FB | 	rdlong	local05, fp
324dc     04 4E 85 F1 | 	sub	fp, #4
324e0     17 2B 02 F6 | 	mov	local03, local05
324e4     14 2A 06 F1 | 	add	local03, #20
324e8     15 2D 02 FB | 	rdlong	local04, local03
324ec     14 2A 86 F1 | 	sub	local03, #20
324f0     16 4F 02 F6 | 	mov	local21, local04
324f4     20 00 90 FD | 	jmp	#LR__4911
324f8                 | LR__4910
324f8     04 4E 05 F1 | 	add	fp, #4
324fc     A7 32 02 FB | 	rdlong	local07, fp
32500     04 4E 85 F1 | 	sub	fp, #4
32504     19 39 02 F6 | 	mov	local10, local07
32508     0C 38 06 F1 | 	add	local10, #12
3250c     1C 35 02 FB | 	rdlong	local08, local10
32510     0C 38 86 F1 | 	sub	local10, #12
32514     1A 4F 02 F6 | 	mov	local21, local08
32518                 | LR__4911
32518     0C 3A 06 F1 | 	add	local11, #12
3251c     1D 4F 62 FC | 	wrlong	local21, local11
32520     5C F9 9F FD | 	jmp	#LR__4893
32524                 | LR__4912
32524     04 4E 05 F1 | 	add	fp, #4
32528     A7 3C 02 FB | 	rdlong	local12, fp
3252c     1E 27 02 F6 | 	mov	local01, local12
32530     04 4E 85 F1 | 	sub	fp, #4
32534     10 3C 06 F1 | 	add	local12, #16
32538     1E 3B C2 FA | 	rdbyte	local11, local12
3253c     40 3A 46 F5 | 	or	local11, #64
32540     10 26 06 F1 | 	add	local01, #16
32544     13 3B 42 FC | 	wrbyte	local11, local01
32548                 | ' 
32548                 | ' 
32548                 | ' 
32548                 | ' 
32548                 | ' 
32548                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32548                 | ' 		fp->flag |=  0x80 ;
32548                 | ' 
32548                 | ' 	}
32548                 | ' 
32548                 | ' 	fp->flag |=  0x40 ;
32548                 | ' 
32548                 | ' 	return FR_OK ;
32548     00 FA 05 F6 | 	mov	result1, #0
3254c                 | LR__4913
3254c     A7 F0 03 F6 | 	mov	ptra, fp
32550     B2 00 A0 FD | 	call	#popregs_
32554                 | _fatfs_cc_f_write_ret
32554     2D 00 64 FD | 	ret
32558                 | 
32558                 | _fatfs_cc_f_sync
32558     00 4A 05 F6 | 	mov	COUNT_, #0
3255c     A8 00 A0 FD | 	call	#pushregs_
32560     18 F0 07 F1 | 	add	ptra, #24
32564     04 4E 05 F1 | 	add	fp, #4
32568     A7 12 62 FC | 	wrlong	arg01, fp
3256c     08 4E 05 F1 | 	add	fp, #8
32570     A7 14 02 F6 | 	mov	arg02, fp
32574     0C 4E 85 F1 | 	sub	fp, #12
32578     D0 E8 BF FD | 	call	#_fatfs_cc_validate
3257c     08 4E 05 F1 | 	add	fp, #8
32580     A7 FA 61 FC | 	wrlong	result1, fp
32584     08 4E 85 F1 | 	sub	fp, #8
32588     00 FA 0D F2 | 	cmp	result1, #0 wz
3258c     C0 01 90 5D |  if_ne	jmp	#LR__4923
32590     04 4E 05 F1 | 	add	fp, #4
32594     A7 18 02 FB | 	rdlong	arg04, fp
32598     04 4E 85 F1 | 	sub	fp, #4
3259c     10 18 06 F1 | 	add	arg04, #16
325a0     0C 19 C2 FA | 	rdbyte	arg04, arg04
325a4     40 18 CE F7 | 	test	arg04, #64 wz
325a8     A4 01 90 AD |  if_e	jmp	#LR__4922
325ac     04 4E 05 F1 | 	add	fp, #4
325b0     A7 18 02 FB | 	rdlong	arg04, fp
325b4     04 4E 85 F1 | 	sub	fp, #4
325b8     10 18 06 F1 | 	add	arg04, #16
325bc     0C 19 C2 FA | 	rdbyte	arg04, arg04
325c0     80 18 CE F7 | 	test	arg04, #128 wz
325c4     64 00 90 AD |  if_e	jmp	#LR__4920
325c8     0C 4E 05 F1 | 	add	fp, #12
325cc     A7 18 02 FB | 	rdlong	arg04, fp
325d0     01 18 06 F1 | 	add	arg04, #1
325d4     0C 13 C2 FA | 	rdbyte	arg01, arg04
325d8     08 4E 85 F1 | 	sub	fp, #8
325dc     A7 18 02 FB | 	rdlong	arg04, fp
325e0     0C 15 02 F6 | 	mov	arg02, arg04
325e4     28 14 06 F1 | 	add	arg02, #40
325e8     04 4E 85 F1 | 	sub	fp, #4
325ec     1C 18 06 F1 | 	add	arg04, #28
325f0     0C 17 02 FB | 	rdlong	arg03, arg04
325f4     01 18 06 F6 | 	mov	arg04, #1
325f8     0C AE BF FD | 	call	#_fatfs_cc_disk_write
325fc     00 FA 0D F2 | 	cmp	result1, #0 wz
32600     01 FA 05 56 |  if_ne	mov	result1, #1
32604     54 01 90 5D |  if_ne	jmp	#LR__4924
32608     04 4E 05 F1 | 	add	fp, #4
3260c     A7 18 02 FB | 	rdlong	arg04, fp
32610     0C 17 02 F6 | 	mov	arg03, arg04
32614     04 4E 85 F1 | 	sub	fp, #4
32618     10 18 06 F1 | 	add	arg04, #16
3261c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32620     7F 18 06 F5 | 	and	arg04, #127
32624     10 16 06 F1 | 	add	arg03, #16
32628     0B 19 42 FC | 	wrbyte	arg04, arg03
3262c                 | LR__4920
3262c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
32630     10 4E 05 F1 | 	add	fp, #16
32634     A7 FA 61 FC | 	wrlong	result1, fp
32638     04 4E 85 F1 | 	sub	fp, #4
3263c     A7 12 02 FB | 	rdlong	arg01, fp
32640     08 4E 85 F1 | 	sub	fp, #8
32644     A7 18 02 FB | 	rdlong	arg04, fp
32648     04 4E 85 F1 | 	sub	fp, #4
3264c     20 18 06 F1 | 	add	arg04, #32
32650     0C 15 02 FB | 	rdlong	arg02, arg04
32654     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
32658     08 4E 05 F1 | 	add	fp, #8
3265c     A7 FA 61 FC | 	wrlong	result1, fp
32660     08 4E 85 F1 | 	sub	fp, #8
32664     00 FA 0D F2 | 	cmp	result1, #0 wz
32668     E4 00 90 5D |  if_ne	jmp	#LR__4921
3266c     04 4E 05 F1 | 	add	fp, #4
32670     A7 18 02 FB | 	rdlong	arg04, fp
32674     24 18 06 F1 | 	add	arg04, #36
32678     0C 19 02 FB | 	rdlong	arg04, arg04
3267c     10 4E 05 F1 | 	add	fp, #16
32680     A7 18 62 FC | 	wrlong	arg04, fp
32684     0C 17 02 F6 | 	mov	arg03, arg04
32688     0B 16 06 F1 | 	add	arg03, #11
3268c     0B 17 C2 FA | 	rdbyte	arg03, arg03
32690     20 16 46 F5 | 	or	arg03, #32
32694     0B 18 06 F1 | 	add	arg04, #11
32698     0C 17 42 FC | 	wrbyte	arg03, arg04
3269c     10 4E 85 F1 | 	sub	fp, #16
326a0     A7 18 02 FB | 	rdlong	arg04, fp
326a4     0C 13 02 FB | 	rdlong	arg01, arg04
326a8     10 4E 05 F1 | 	add	fp, #16
326ac     A7 14 02 FB | 	rdlong	arg02, fp
326b0     14 4E 85 F1 | 	sub	fp, #20
326b4     08 18 06 F1 | 	add	arg04, #8
326b8     0C 17 02 FB | 	rdlong	arg03, arg04
326bc     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
326c0     14 4E 05 F1 | 	add	fp, #20
326c4     A7 12 02 FB | 	rdlong	arg01, fp
326c8     1C 12 06 F1 | 	add	arg01, #28
326cc     10 4E 85 F1 | 	sub	fp, #16
326d0     A7 18 02 FB | 	rdlong	arg04, fp
326d4     0C 18 06 F1 | 	add	arg04, #12
326d8     0C 15 02 FB | 	rdlong	arg02, arg04
326dc     09 15 62 FC | 	wrlong	arg02, arg01
326e0     10 4E 05 F1 | 	add	fp, #16
326e4     A7 12 02 FB | 	rdlong	arg01, fp
326e8     16 12 06 F1 | 	add	arg01, #22
326ec     04 4E 85 F1 | 	sub	fp, #4
326f0     A7 14 02 FB | 	rdlong	arg02, fp
326f4     09 15 62 FC | 	wrlong	arg02, arg01
326f8     04 4E 05 F1 | 	add	fp, #4
326fc     A7 12 02 FB | 	rdlong	arg01, fp
32700     12 12 06 F1 | 	add	arg01, #18
32704     09 01 58 FC | 	wrword	#0, arg01
32708     08 4E 85 F1 | 	sub	fp, #8
3270c     A7 18 02 FB | 	rdlong	arg04, fp
32710     03 18 06 F1 | 	add	arg04, #3
32714     0C 03 48 FC | 	wrbyte	#1, arg04
32718     A7 12 02 FB | 	rdlong	arg01, fp
3271c     0C 4E 85 F1 | 	sub	fp, #12
32720     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
32724     08 4E 05 F1 | 	add	fp, #8
32728     A7 FA 61 FC | 	wrlong	result1, fp
3272c     04 4E 85 F1 | 	sub	fp, #4
32730     A7 18 02 FB | 	rdlong	arg04, fp
32734     0C 17 02 F6 | 	mov	arg03, arg04
32738     04 4E 85 F1 | 	sub	fp, #4
3273c     10 18 06 F1 | 	add	arg04, #16
32740     0C 19 C2 FA | 	rdbyte	arg04, arg04
32744     BF 18 06 F5 | 	and	arg04, #191
32748     10 16 06 F1 | 	add	arg03, #16
3274c     0B 19 42 FC | 	wrbyte	arg04, arg03
32750                 | LR__4921
32750                 | LR__4922
32750                 | LR__4923
32750                 | ' 					dir = fp->dir_ptr;
32750                 | ' 					dir[ 11 ] |=  0x20 ;
32750                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
32750                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
32750                 | ' 					st_dword(dir +  22 , tm);
32750                 | ' 					st_word(dir +  18 , 0);
32750                 | ' 					fs->wflag = 1;
32750                 | ' 					res = sync_fs(fs);
32750                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
32750                 | ' 				}
32750                 | ' 			}
32750                 | ' 		}
32750                 | ' 	}
32750                 | ' 
32750                 | ' 	return res ;
32750     08 4E 05 F1 | 	add	fp, #8
32754     A7 FA 01 FB | 	rdlong	result1, fp
32758     08 4E 85 F1 | 	sub	fp, #8
3275c                 | LR__4924
3275c     A7 F0 03 F6 | 	mov	ptra, fp
32760     B2 00 A0 FD | 	call	#popregs_
32764                 | _fatfs_cc_f_sync_ret
32764     2D 00 64 FD | 	ret
32768                 | 
32768                 | _fatfs_cc_f_close
32768     01 4A 05 F6 | 	mov	COUNT_, #1
3276c     A8 00 A0 FD | 	call	#pushregs_
32770     10 F0 07 F1 | 	add	ptra, #16
32774     04 4E 05 F1 | 	add	fp, #4
32778     A7 12 62 FC | 	wrlong	arg01, fp
3277c     04 4E 85 F1 | 	sub	fp, #4
32780     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
32784     08 4E 05 F1 | 	add	fp, #8
32788     A7 FA 61 FC | 	wrlong	result1, fp
3278c     08 4E 85 F1 | 	sub	fp, #8
32790     00 FA 0D F2 | 	cmp	result1, #0 wz
32794     38 00 90 5D |  if_ne	jmp	#LR__4930
32798     04 4E 05 F1 | 	add	fp, #4
3279c     A7 12 02 FB | 	rdlong	arg01, fp
327a0     08 4E 05 F1 | 	add	fp, #8
327a4     A7 14 02 F6 | 	mov	arg02, fp
327a8     0C 4E 85 F1 | 	sub	fp, #12
327ac     9C E6 BF FD | 	call	#_fatfs_cc_validate
327b0     08 4E 05 F1 | 	add	fp, #8
327b4     A7 FA 61 FC | 	wrlong	result1, fp
327b8     08 4E 85 F1 | 	sub	fp, #8
327bc     00 FA 0D F2 | 	cmp	result1, #0 wz
327c0     04 4E 05 A1 |  if_e	add	fp, #4
327c4     A7 26 02 AB |  if_e	rdlong	local01, fp
327c8     04 4E 85 A1 |  if_e	sub	fp, #4
327cc     13 01 68 AC |  if_e	wrlong	#0, local01
327d0                 | LR__4930
327d0                 | ' 
327d0                 | ' 
327d0                 | ' 
327d0                 | ' 
327d0                 | ' 			fp->obj.fs = 0;
327d0                 | ' #line 4192 "ff.c"
327d0                 | ' 		}
327d0                 | ' 	}
327d0                 | ' 	return res;
327d0     08 4E 05 F1 | 	add	fp, #8
327d4     A7 FA 01 FB | 	rdlong	result1, fp
327d8     08 4E 85 F1 | 	sub	fp, #8
327dc     A7 F0 03 F6 | 	mov	ptra, fp
327e0     B2 00 A0 FD | 	call	#popregs_
327e4                 | _fatfs_cc_f_close_ret
327e4     2D 00 64 FD | 	ret
327e8                 | 
327e8                 | _fatfs_cc_f_lseek
327e8     00 4A 05 F6 | 	mov	COUNT_, #0
327ec     A8 00 A0 FD | 	call	#pushregs_
327f0     24 F0 07 F1 | 	add	ptra, #36
327f4     04 4E 05 F1 | 	add	fp, #4
327f8     A7 12 62 FC | 	wrlong	arg01, fp
327fc     04 4E 05 F1 | 	add	fp, #4
32800     A7 14 62 FC | 	wrlong	arg02, fp
32804     04 4E 85 F1 | 	sub	fp, #4
32808     A7 12 02 FB | 	rdlong	arg01, fp
3280c     0C 4E 05 F1 | 	add	fp, #12
32810     A7 14 02 F6 | 	mov	arg02, fp
32814     10 4E 85 F1 | 	sub	fp, #16
32818     30 E6 BF FD | 	call	#_fatfs_cc_validate
3281c     0C 4E 05 F1 | 	add	fp, #12
32820     A7 FA 61 FC | 	wrlong	result1, fp
32824     0C 4E 85 F1 | 	sub	fp, #12
32828     00 FA 0D F2 | 	cmp	result1, #0 wz
3282c     1C 00 90 5D |  if_ne	jmp	#LR__4940
32830     04 4E 05 F1 | 	add	fp, #4
32834     A7 18 02 FB | 	rdlong	arg04, fp
32838     11 18 06 F1 | 	add	arg04, #17
3283c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32840     08 4E 05 F1 | 	add	fp, #8
32844     A7 18 62 FC | 	wrlong	arg04, fp
32848     0C 4E 85 F1 | 	sub	fp, #12
3284c                 | LR__4940
3284c     0C 4E 05 F1 | 	add	fp, #12
32850     A7 18 0A FB | 	rdlong	arg04, fp wz
32854     0C 4E 85 F1 | 	sub	fp, #12
32858     0C 4E 05 51 |  if_ne	add	fp, #12
3285c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
32860     0C 4E 85 51 |  if_ne	sub	fp, #12
32864     40 06 90 5D |  if_ne	jmp	#LR__4963
32868     04 4E 05 F1 | 	add	fp, #4
3286c     A7 18 02 FB | 	rdlong	arg04, fp
32870     04 4E 05 F1 | 	add	fp, #4
32874     A7 16 02 FB | 	rdlong	arg03, fp
32878     08 4E 85 F1 | 	sub	fp, #8
3287c     0C 18 06 F1 | 	add	arg04, #12
32880     0C 19 02 FB | 	rdlong	arg04, arg04
32884     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32888     3C 00 90 ED |  if_be	jmp	#LR__4941
3288c     04 4E 05 F1 | 	add	fp, #4
32890     A7 16 02 FB | 	rdlong	arg03, fp
32894     04 4E 85 F1 | 	sub	fp, #4
32898     10 16 06 F1 | 	add	arg03, #16
3289c     0B 17 C2 FA | 	rdbyte	arg03, arg03
328a0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
328a4     02 16 CE F7 | 	test	arg03, #2 wz
328a8     1C 00 90 5D |  if_ne	jmp	#LR__4941
328ac     04 4E 05 F1 | 	add	fp, #4
328b0     A7 16 02 FB | 	rdlong	arg03, fp
328b4     0C 16 06 F1 | 	add	arg03, #12
328b8     0B 17 02 FB | 	rdlong	arg03, arg03
328bc     04 4E 05 F1 | 	add	fp, #4
328c0     A7 16 62 FC | 	wrlong	arg03, fp
328c4     08 4E 85 F1 | 	sub	fp, #8
328c8                 | LR__4941
328c8     04 4E 05 F1 | 	add	fp, #4
328cc     A7 16 02 FB | 	rdlong	arg03, fp
328d0     14 16 06 F1 | 	add	arg03, #20
328d4     0B 17 02 FB | 	rdlong	arg03, arg03
328d8     1C 4E 05 F1 | 	add	fp, #28
328dc     A7 16 62 FC | 	wrlong	arg03, fp
328e0     1C 4E 85 F1 | 	sub	fp, #28
328e4     A7 16 02 FB | 	rdlong	arg03, fp
328e8     18 4E 05 F1 | 	add	fp, #24
328ec     A7 00 68 FC | 	wrlong	#0, fp
328f0     14 16 06 F1 | 	add	arg03, #20
328f4     0B 01 68 FC | 	wrlong	#0, arg03
328f8     14 4E 85 F1 | 	sub	fp, #20
328fc     A7 16 02 FB | 	rdlong	arg03, fp
32900     08 4E 85 F1 | 	sub	fp, #8
32904     01 16 16 F2 | 	cmp	arg03, #1 wc
32908     E4 03 90 CD |  if_b	jmp	#LR__4957
3290c     10 4E 05 F1 | 	add	fp, #16
32910     A7 16 02 FB | 	rdlong	arg03, fp
32914     0A 16 06 F1 | 	add	arg03, #10
32918     0B 19 E2 FA | 	rdword	arg04, arg03
3291c     09 18 66 F0 | 	shl	arg04, #9
32920     08 4E 05 F1 | 	add	fp, #8
32924     A7 18 62 FC | 	wrlong	arg04, fp
32928     08 4E 05 F1 | 	add	fp, #8
3292c     A7 18 02 FB | 	rdlong	arg04, fp
32930     20 4E 85 F1 | 	sub	fp, #32
32934     01 18 16 F2 | 	cmp	arg04, #1 wc
32938     AC 00 90 CD |  if_b	jmp	#LR__4942
3293c     08 4E 05 F1 | 	add	fp, #8
32940     A7 18 02 FB | 	rdlong	arg04, fp
32944     01 18 86 F1 | 	sub	arg04, #1
32948     10 4E 05 F1 | 	add	fp, #16
3294c     A7 16 02 FB | 	rdlong	arg03, fp
32950     0B 19 12 FD | 	qdiv	arg04, arg03
32954     08 4E 05 F1 | 	add	fp, #8
32958     A7 FA 01 FB | 	rdlong	result1, fp
3295c     01 FA 85 F1 | 	sub	result1, #1
32960     18 18 62 FD | 	getqx	arg04
32964     0B FB 11 FD | 	qdiv	result1, arg03
32968     20 4E 85 F1 | 	sub	fp, #32
3296c     18 16 62 FD | 	getqx	arg03
32970     0B 19 12 F2 | 	cmp	arg04, arg03 wc
32974     70 00 90 CD |  if_b	jmp	#LR__4942
32978     04 4E 05 F1 | 	add	fp, #4
3297c     A7 16 02 FB | 	rdlong	arg03, fp
32980     1C 4E 05 F1 | 	add	fp, #28
32984     A7 FA 01 FB | 	rdlong	result1, fp
32988     01 FA 85 F1 | 	sub	result1, #1
3298c     08 4E 85 F1 | 	sub	fp, #8
32990     A7 18 02 FB | 	rdlong	arg04, fp
32994     01 18 86 F1 | 	sub	arg04, #1
32998     0C FB 21 F5 | 	andn	result1, arg04
3299c     14 16 06 F1 | 	add	arg03, #20
329a0     0B FB 61 FC | 	wrlong	result1, arg03
329a4     10 4E 85 F1 | 	sub	fp, #16
329a8     A7 16 02 FB | 	rdlong	arg03, fp
329ac     04 4E 85 F1 | 	sub	fp, #4
329b0     A7 18 02 FB | 	rdlong	arg04, fp
329b4     14 18 06 F1 | 	add	arg04, #20
329b8     0C 19 02 FB | 	rdlong	arg04, arg04
329bc     0C 17 82 F1 | 	sub	arg03, arg04
329c0     04 4E 05 F1 | 	add	fp, #4
329c4     A7 16 62 FC | 	wrlong	arg03, fp
329c8     04 4E 85 F1 | 	sub	fp, #4
329cc     A7 16 02 FB | 	rdlong	arg03, fp
329d0     18 16 06 F1 | 	add	arg03, #24
329d4     0B 17 02 FB | 	rdlong	arg03, arg03
329d8     10 4E 05 F1 | 	add	fp, #16
329dc     A7 16 62 FC | 	wrlong	arg03, fp
329e0     14 4E 85 F1 | 	sub	fp, #20
329e4     D0 00 90 FD | 	jmp	#LR__4946
329e8                 | LR__4942
329e8     04 4E 05 F1 | 	add	fp, #4
329ec     A7 16 02 FB | 	rdlong	arg03, fp
329f0     08 16 06 F1 | 	add	arg03, #8
329f4     0B 17 0A FB | 	rdlong	arg03, arg03 wz
329f8     10 4E 05 F1 | 	add	fp, #16
329fc     A7 16 62 FC | 	wrlong	arg03, fp
32a00     14 4E 85 F1 | 	sub	fp, #20
32a04     94 00 90 5D |  if_ne	jmp	#LR__4945
32a08     04 4E 05 F1 | 	add	fp, #4
32a0c     A7 12 02 FB | 	rdlong	arg01, fp
32a10     04 4E 85 F1 | 	sub	fp, #4
32a14     00 14 06 F6 | 	mov	arg02, #0
32a18     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
32a1c     14 4E 05 F1 | 	add	fp, #20
32a20     A7 FA 61 FC | 	wrlong	result1, fp
32a24     14 4E 85 F1 | 	sub	fp, #20
32a28     01 FA 0D F2 | 	cmp	result1, #1 wz
32a2c     1C 00 90 5D |  if_ne	jmp	#LR__4943
32a30     04 4E 05 F1 | 	add	fp, #4
32a34     A7 16 02 FB | 	rdlong	arg03, fp
32a38     04 4E 85 F1 | 	sub	fp, #4
32a3c     11 16 06 F1 | 	add	arg03, #17
32a40     0B 05 48 FC | 	wrbyte	#2, arg03
32a44     02 FA 05 F6 | 	mov	result1, #2
32a48     5C 04 90 FD | 	jmp	#LR__4963
32a4c                 | LR__4943
32a4c     14 4E 05 F1 | 	add	fp, #20
32a50     A7 FA 01 FB | 	rdlong	result1, fp
32a54     14 4E 85 F1 | 	sub	fp, #20
32a58     FF FF 7F FF 
32a5c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
32a60     1C 00 90 5D |  if_ne	jmp	#LR__4944
32a64     04 4E 05 F1 | 	add	fp, #4
32a68     A7 16 02 FB | 	rdlong	arg03, fp
32a6c     04 4E 85 F1 | 	sub	fp, #4
32a70     11 16 06 F1 | 	add	arg03, #17
32a74     0B 03 48 FC | 	wrbyte	#1, arg03
32a78     01 FA 05 F6 | 	mov	result1, #1
32a7c     28 04 90 FD | 	jmp	#LR__4963
32a80                 | LR__4944
32a80     04 4E 05 F1 | 	add	fp, #4
32a84     A7 16 02 FB | 	rdlong	arg03, fp
32a88     10 4E 05 F1 | 	add	fp, #16
32a8c     A7 18 02 FB | 	rdlong	arg04, fp
32a90     14 4E 85 F1 | 	sub	fp, #20
32a94     08 16 06 F1 | 	add	arg03, #8
32a98     0B 19 62 FC | 	wrlong	arg04, arg03
32a9c                 | LR__4945
32a9c     04 4E 05 F1 | 	add	fp, #4
32aa0     A7 16 02 FB | 	rdlong	arg03, fp
32aa4     10 4E 05 F1 | 	add	fp, #16
32aa8     A7 18 02 FB | 	rdlong	arg04, fp
32aac     14 4E 85 F1 | 	sub	fp, #20
32ab0     18 16 06 F1 | 	add	arg03, #24
32ab4     0B 19 62 FC | 	wrlong	arg04, arg03
32ab8                 | LR__4946
32ab8     14 4E 05 F1 | 	add	fp, #20
32abc     A7 16 0A FB | 	rdlong	arg03, fp wz
32ac0     14 4E 85 F1 | 	sub	fp, #20
32ac4     28 02 90 AD |  if_e	jmp	#LR__4956
32ac8                 | ' 				while (ofs > bcs) {
32ac8                 | LR__4947
32ac8     08 4E 05 F1 | 	add	fp, #8
32acc     A7 18 02 FB | 	rdlong	arg04, fp
32ad0     10 4E 05 F1 | 	add	fp, #16
32ad4     A7 16 02 FB | 	rdlong	arg03, fp
32ad8     18 4E 85 F1 | 	sub	fp, #24
32adc     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
32ae0     68 01 90 ED |  if_be	jmp	#LR__4953
32ae4     08 4E 05 F1 | 	add	fp, #8
32ae8     A7 18 02 FB | 	rdlong	arg04, fp
32aec     10 4E 05 F1 | 	add	fp, #16
32af0     A7 16 02 FB | 	rdlong	arg03, fp
32af4     0B 19 82 F1 | 	sub	arg04, arg03
32af8     10 4E 85 F1 | 	sub	fp, #16
32afc     A7 18 62 FC | 	wrlong	arg04, fp
32b00     04 4E 85 F1 | 	sub	fp, #4
32b04     A7 18 02 FB | 	rdlong	arg04, fp
32b08     0C FB 01 F6 | 	mov	result1, arg04
32b0c     14 18 06 F1 | 	add	arg04, #20
32b10     0C 19 02 FB | 	rdlong	arg04, arg04
32b14     14 4E 05 F1 | 	add	fp, #20
32b18     A7 16 02 FB | 	rdlong	arg03, fp
32b1c     0B 19 02 F1 | 	add	arg04, arg03
32b20     14 FA 05 F1 | 	add	result1, #20
32b24     FD 18 62 FC | 	wrlong	arg04, result1
32b28     14 4E 85 F1 | 	sub	fp, #20
32b2c     A7 16 02 FB | 	rdlong	arg03, fp
32b30     04 4E 85 F1 | 	sub	fp, #4
32b34     10 16 06 F1 | 	add	arg03, #16
32b38     0B 17 C2 FA | 	rdbyte	arg03, arg03
32b3c     02 16 CE F7 | 	test	arg03, #2 wz
32b40     3C 00 90 AD |  if_e	jmp	#LR__4948
32b44     04 4E 05 F1 | 	add	fp, #4
32b48     A7 12 02 FB | 	rdlong	arg01, fp
32b4c     10 4E 05 F1 | 	add	fp, #16
32b50     A7 14 02 FB | 	rdlong	arg02, fp
32b54     14 4E 85 F1 | 	sub	fp, #20
32b58     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
32b5c     14 4E 05 F1 | 	add	fp, #20
32b60     A7 FA 61 FC | 	wrlong	result1, fp
32b64     00 FA 4D F2 | 	cmps	result1, #0 wz
32b68     14 4E 85 F1 | 	sub	fp, #20
32b6c     08 4E 05 A1 |  if_e	add	fp, #8
32b70     A7 00 68 AC |  if_e	wrlong	#0, fp
32b74     08 4E 85 A1 |  if_e	sub	fp, #8
32b78                 | ' 							ofs = 0; break;
32b78     D0 00 90 AD |  if_e	jmp	#LR__4953
32b7c     24 00 90 FD | 	jmp	#LR__4949
32b80                 | LR__4948
32b80     04 4E 05 F1 | 	add	fp, #4
32b84     A7 12 02 FB | 	rdlong	arg01, fp
32b88     10 4E 05 F1 | 	add	fp, #16
32b8c     A7 14 02 FB | 	rdlong	arg02, fp
32b90     14 4E 85 F1 | 	sub	fp, #20
32b94     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
32b98     14 4E 05 F1 | 	add	fp, #20
32b9c     A7 FA 61 FC | 	wrlong	result1, fp
32ba0     14 4E 85 F1 | 	sub	fp, #20
32ba4                 | LR__4949
32ba4     14 4E 05 F1 | 	add	fp, #20
32ba8     A7 16 02 FB | 	rdlong	arg03, fp
32bac     14 4E 85 F1 | 	sub	fp, #20
32bb0     FF FF 7F FF 
32bb4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
32bb8     1C 00 90 5D |  if_ne	jmp	#LR__4950
32bbc     04 4E 05 F1 | 	add	fp, #4
32bc0     A7 16 02 FB | 	rdlong	arg03, fp
32bc4     04 4E 85 F1 | 	sub	fp, #4
32bc8     11 16 06 F1 | 	add	arg03, #17
32bcc     0B 03 48 FC | 	wrbyte	#1, arg03
32bd0     01 FA 05 F6 | 	mov	result1, #1
32bd4     D0 02 90 FD | 	jmp	#LR__4963
32bd8                 | LR__4950
32bd8     14 4E 05 F1 | 	add	fp, #20
32bdc     A7 16 02 FB | 	rdlong	arg03, fp
32be0     14 4E 85 F1 | 	sub	fp, #20
32be4     02 16 16 F2 | 	cmp	arg03, #2 wc
32be8     24 00 90 CD |  if_b	jmp	#LR__4951
32bec     10 4E 05 F1 | 	add	fp, #16
32bf0     A7 18 02 FB | 	rdlong	arg04, fp
32bf4     04 4E 05 F1 | 	add	fp, #4
32bf8     A7 16 02 FB | 	rdlong	arg03, fp
32bfc     14 4E 85 F1 | 	sub	fp, #20
32c00     18 18 06 F1 | 	add	arg04, #24
32c04     0C 19 02 FB | 	rdlong	arg04, arg04
32c08     0C 17 12 F2 | 	cmp	arg03, arg04 wc
32c0c     1C 00 90 CD |  if_b	jmp	#LR__4952
32c10                 | LR__4951
32c10     04 4E 05 F1 | 	add	fp, #4
32c14     A7 16 02 FB | 	rdlong	arg03, fp
32c18     04 4E 85 F1 | 	sub	fp, #4
32c1c     11 16 06 F1 | 	add	arg03, #17
32c20     0B 05 48 FC | 	wrbyte	#2, arg03
32c24     02 FA 05 F6 | 	mov	result1, #2
32c28     7C 02 90 FD | 	jmp	#LR__4963
32c2c                 | LR__4952
32c2c     04 4E 05 F1 | 	add	fp, #4
32c30     A7 18 02 FB | 	rdlong	arg04, fp
32c34     10 4E 05 F1 | 	add	fp, #16
32c38     A7 16 02 FB | 	rdlong	arg03, fp
32c3c     14 4E 85 F1 | 	sub	fp, #20
32c40     18 18 06 F1 | 	add	arg04, #24
32c44     0C 17 62 FC | 	wrlong	arg03, arg04
32c48     7C FE 9F FD | 	jmp	#LR__4947
32c4c                 | LR__4953
32c4c     04 4E 05 F1 | 	add	fp, #4
32c50     A7 16 02 FB | 	rdlong	arg03, fp
32c54     0B 13 02 F6 | 	mov	arg01, arg03
32c58     14 16 06 F1 | 	add	arg03, #20
32c5c     0B 15 02 FB | 	rdlong	arg02, arg03
32c60     04 4E 05 F1 | 	add	fp, #4
32c64     A7 16 02 FB | 	rdlong	arg03, fp
32c68     0B 15 02 F1 | 	add	arg02, arg03
32c6c     14 12 06 F1 | 	add	arg01, #20
32c70     09 15 62 FC | 	wrlong	arg02, arg01
32c74     A7 16 02 FB | 	rdlong	arg03, fp
32c78     08 4E 85 F1 | 	sub	fp, #8
32c7c     FF 17 CE F7 | 	test	arg03, #511 wz
32c80     6C 00 90 AD |  if_e	jmp	#LR__4955
32c84     10 4E 05 F1 | 	add	fp, #16
32c88     A7 12 02 FB | 	rdlong	arg01, fp
32c8c     04 4E 05 F1 | 	add	fp, #4
32c90     A7 14 02 FB | 	rdlong	arg02, fp
32c94     14 4E 85 F1 | 	sub	fp, #20
32c98     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
32c9c     1C 4E 05 F1 | 	add	fp, #28
32ca0     A7 FA 61 FC | 	wrlong	result1, fp
32ca4     1C 4E 85 F1 | 	sub	fp, #28
32ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
32cac     1C 00 90 5D |  if_ne	jmp	#LR__4954
32cb0     04 4E 05 F1 | 	add	fp, #4
32cb4     A7 16 02 FB | 	rdlong	arg03, fp
32cb8     04 4E 85 F1 | 	sub	fp, #4
32cbc     11 16 06 F1 | 	add	arg03, #17
32cc0     0B 05 48 FC | 	wrbyte	#2, arg03
32cc4     02 FA 05 F6 | 	mov	result1, #2
32cc8     DC 01 90 FD | 	jmp	#LR__4963
32ccc                 | LR__4954
32ccc     1C 4E 05 F1 | 	add	fp, #28
32cd0     A7 18 02 FB | 	rdlong	arg04, fp
32cd4     14 4E 85 F1 | 	sub	fp, #20
32cd8     A7 16 02 FB | 	rdlong	arg03, fp
32cdc     09 16 46 F0 | 	shr	arg03, #9
32ce0     0B 19 02 F1 | 	add	arg04, arg03
32ce4     14 4E 05 F1 | 	add	fp, #20
32ce8     A7 18 62 FC | 	wrlong	arg04, fp
32cec     1C 4E 85 F1 | 	sub	fp, #28
32cf0                 | LR__4955
32cf0                 | LR__4956
32cf0                 | LR__4957
32cf0     04 4E 05 F1 | 	add	fp, #4
32cf4     A7 18 02 FB | 	rdlong	arg04, fp
32cf8     0C 17 02 F6 | 	mov	arg03, arg04
32cfc     04 4E 85 F1 | 	sub	fp, #4
32d00     14 16 06 F1 | 	add	arg03, #20
32d04     0B 17 02 FB | 	rdlong	arg03, arg03
32d08     0C 18 06 F1 | 	add	arg04, #12
32d0c     0C 19 02 FB | 	rdlong	arg04, arg04
32d10     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
32d14     3C 00 90 ED |  if_be	jmp	#LR__4958
32d18     04 4E 05 F1 | 	add	fp, #4
32d1c     A7 18 02 FB | 	rdlong	arg04, fp
32d20     0C 17 02 F6 | 	mov	arg03, arg04
32d24     14 18 06 F1 | 	add	arg04, #20
32d28     0C 19 02 FB | 	rdlong	arg04, arg04
32d2c     0C 16 06 F1 | 	add	arg03, #12
32d30     0B 19 62 FC | 	wrlong	arg04, arg03
32d34     A7 18 02 FB | 	rdlong	arg04, fp
32d38     0C 17 02 F6 | 	mov	arg03, arg04
32d3c     04 4E 85 F1 | 	sub	fp, #4
32d40     10 18 06 F1 | 	add	arg04, #16
32d44     0C 19 C2 FA | 	rdbyte	arg04, arg04
32d48     40 18 46 F5 | 	or	arg04, #64
32d4c     10 16 06 F1 | 	add	arg03, #16
32d50     0B 19 42 FC | 	wrbyte	arg04, arg03
32d54                 | LR__4958
32d54     04 4E 05 F1 | 	add	fp, #4
32d58     A7 16 02 FB | 	rdlong	arg03, fp
32d5c     04 4E 85 F1 | 	sub	fp, #4
32d60     14 16 06 F1 | 	add	arg03, #20
32d64     0B 17 02 FB | 	rdlong	arg03, arg03
32d68     FF 17 CE F7 | 	test	arg03, #511 wz
32d6c     2C 01 90 AD |  if_e	jmp	#LR__4962
32d70     04 4E 05 F1 | 	add	fp, #4
32d74     A7 18 02 FB | 	rdlong	arg04, fp
32d78     18 4E 05 F1 | 	add	fp, #24
32d7c     A7 16 02 FB | 	rdlong	arg03, fp
32d80     1C 4E 85 F1 | 	sub	fp, #28
32d84     1C 18 06 F1 | 	add	arg04, #28
32d88     0C 19 02 FB | 	rdlong	arg04, arg04
32d8c     0C 17 0A F2 | 	cmp	arg03, arg04 wz
32d90     08 01 90 AD |  if_e	jmp	#LR__4962
32d94     04 4E 05 F1 | 	add	fp, #4
32d98     A7 16 02 FB | 	rdlong	arg03, fp
32d9c     04 4E 85 F1 | 	sub	fp, #4
32da0     10 16 06 F1 | 	add	arg03, #16
32da4     0B 17 C2 FA | 	rdbyte	arg03, arg03
32da8     80 16 CE F7 | 	test	arg03, #128 wz
32dac     7C 00 90 AD |  if_e	jmp	#LR__4960
32db0     10 4E 05 F1 | 	add	fp, #16
32db4     A7 16 02 FB | 	rdlong	arg03, fp
32db8     01 16 06 F1 | 	add	arg03, #1
32dbc     0B 13 C2 FA | 	rdbyte	arg01, arg03
32dc0     0C 4E 85 F1 | 	sub	fp, #12
32dc4     A7 16 02 FB | 	rdlong	arg03, fp
32dc8     0B 15 02 F6 | 	mov	arg02, arg03
32dcc     28 14 06 F1 | 	add	arg02, #40
32dd0     04 4E 85 F1 | 	sub	fp, #4
32dd4     1C 16 06 F1 | 	add	arg03, #28
32dd8     0B 17 02 FB | 	rdlong	arg03, arg03
32ddc     01 18 06 F6 | 	mov	arg04, #1
32de0     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
32de4     00 FA 0D F2 | 	cmp	result1, #0 wz
32de8     1C 00 90 AD |  if_e	jmp	#LR__4959
32dec     04 4E 05 F1 | 	add	fp, #4
32df0     A7 16 02 FB | 	rdlong	arg03, fp
32df4     04 4E 85 F1 | 	sub	fp, #4
32df8     11 16 06 F1 | 	add	arg03, #17
32dfc     0B 03 48 FC | 	wrbyte	#1, arg03
32e00     01 FA 05 F6 | 	mov	result1, #1
32e04     A0 00 90 FD | 	jmp	#LR__4963
32e08                 | LR__4959
32e08     04 4E 05 F1 | 	add	fp, #4
32e0c     A7 18 02 FB | 	rdlong	arg04, fp
32e10     0C 17 02 F6 | 	mov	arg03, arg04
32e14     04 4E 85 F1 | 	sub	fp, #4
32e18     10 18 06 F1 | 	add	arg04, #16
32e1c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32e20     7F 18 06 F5 | 	and	arg04, #127
32e24     10 16 06 F1 | 	add	arg03, #16
32e28     0B 19 42 FC | 	wrbyte	arg04, arg03
32e2c                 | LR__4960
32e2c     10 4E 05 F1 | 	add	fp, #16
32e30     A7 16 02 FB | 	rdlong	arg03, fp
32e34     01 16 06 F1 | 	add	arg03, #1
32e38     0B 13 C2 FA | 	rdbyte	arg01, arg03
32e3c     0C 4E 85 F1 | 	sub	fp, #12
32e40     A7 14 02 FB | 	rdlong	arg02, fp
32e44     28 14 06 F1 | 	add	arg02, #40
32e48     18 4E 05 F1 | 	add	fp, #24
32e4c     A7 16 02 FB | 	rdlong	arg03, fp
32e50     1C 4E 85 F1 | 	sub	fp, #28
32e54     01 18 06 F6 | 	mov	arg04, #1
32e58     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
32e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
32e60     1C 00 90 AD |  if_e	jmp	#LR__4961
32e64     04 4E 05 F1 | 	add	fp, #4
32e68     A7 16 02 FB | 	rdlong	arg03, fp
32e6c     04 4E 85 F1 | 	sub	fp, #4
32e70     11 16 06 F1 | 	add	arg03, #17
32e74     0B 03 48 FC | 	wrbyte	#1, arg03
32e78     01 FA 05 F6 | 	mov	result1, #1
32e7c     28 00 90 FD | 	jmp	#LR__4963
32e80                 | LR__4961
32e80     04 4E 05 F1 | 	add	fp, #4
32e84     A7 18 02 FB | 	rdlong	arg04, fp
32e88     18 4E 05 F1 | 	add	fp, #24
32e8c     A7 16 02 FB | 	rdlong	arg03, fp
32e90     1C 4E 85 F1 | 	sub	fp, #28
32e94     1C 18 06 F1 | 	add	arg04, #28
32e98     0C 17 62 FC | 	wrlong	arg03, arg04
32e9c                 | LR__4962
32e9c                 | ' 
32e9c                 | ' 			fp->sect = nsect;
32e9c                 | ' 		}
32e9c                 | ' 	}
32e9c                 | ' 
32e9c                 | ' 	return res ;
32e9c     0C 4E 05 F1 | 	add	fp, #12
32ea0     A7 FA 01 FB | 	rdlong	result1, fp
32ea4     0C 4E 85 F1 | 	sub	fp, #12
32ea8                 | LR__4963
32ea8     A7 F0 03 F6 | 	mov	ptra, fp
32eac     B2 00 A0 FD | 	call	#popregs_
32eb0                 | _fatfs_cc_f_lseek_ret
32eb0     2D 00 64 FD | 	ret
32eb4                 | 
32eb4                 | _fatfs_cc_f_opendir
32eb4     01 4A 05 F6 | 	mov	COUNT_, #1
32eb8     A8 00 A0 FD | 	call	#pushregs_
32ebc     14 F0 07 F1 | 	add	ptra, #20
32ec0     04 4E 05 F1 | 	add	fp, #4
32ec4     A7 12 62 FC | 	wrlong	arg01, fp
32ec8     04 4E 05 F1 | 	add	fp, #4
32ecc     A7 14 62 FC | 	wrlong	arg02, fp
32ed0     04 4E 85 F1 | 	sub	fp, #4
32ed4     A7 16 0A FB | 	rdlong	arg03, fp wz
32ed8     04 4E 85 F1 | 	sub	fp, #4
32edc     09 FA 05 A6 |  if_e	mov	result1, #9
32ee0     78 01 90 AD |  if_e	jmp	#LR__4976
32ee4     08 4E 05 F1 | 	add	fp, #8
32ee8     A7 12 02 F6 | 	mov	arg01, fp
32eec     08 4E 05 F1 | 	add	fp, #8
32ef0     A7 14 02 F6 | 	mov	arg02, fp
32ef4     10 4E 85 F1 | 	sub	fp, #16
32ef8     00 16 06 F6 | 	mov	arg03, #0
32efc     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
32f00     0C 4E 05 F1 | 	add	fp, #12
32f04     A7 FA 61 FC | 	wrlong	result1, fp
32f08     0C 4E 85 F1 | 	sub	fp, #12
32f0c     00 FA 0D F2 | 	cmp	result1, #0 wz
32f10     20 01 90 5D |  if_ne	jmp	#LR__4975
32f14     04 4E 05 F1 | 	add	fp, #4
32f18     A7 16 02 FB | 	rdlong	arg03, fp
32f1c     0C 4E 05 F1 | 	add	fp, #12
32f20     A7 FA 01 FB | 	rdlong	result1, fp
32f24     0B FB 61 FC | 	wrlong	result1, arg03
32f28     0C 4E 85 F1 | 	sub	fp, #12
32f2c     A7 12 02 FB | 	rdlong	arg01, fp
32f30     04 4E 05 F1 | 	add	fp, #4
32f34     A7 14 02 FB | 	rdlong	arg02, fp
32f38     08 4E 85 F1 | 	sub	fp, #8
32f3c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
32f40     0C 4E 05 F1 | 	add	fp, #12
32f44     A7 FA 61 FC | 	wrlong	result1, fp
32f48     0C 4E 85 F1 | 	sub	fp, #12
32f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
32f50     C4 00 90 5D |  if_ne	jmp	#LR__4974
32f54     04 4E 05 F1 | 	add	fp, #4
32f58     A7 16 02 FB | 	rdlong	arg03, fp
32f5c     04 4E 85 F1 | 	sub	fp, #4
32f60     2B 16 06 F1 | 	add	arg03, #43
32f64     0B 17 C2 FA | 	rdbyte	arg03, arg03
32f68     80 16 CE F7 | 	test	arg03, #128 wz
32f6c     58 00 90 5D |  if_ne	jmp	#LR__4972
32f70     04 4E 05 F1 | 	add	fp, #4
32f74     A7 16 02 FB | 	rdlong	arg03, fp
32f78     04 4E 85 F1 | 	sub	fp, #4
32f7c     06 16 06 F1 | 	add	arg03, #6
32f80     0B 17 C2 FA | 	rdbyte	arg03, arg03
32f84     10 16 CE F7 | 	test	arg03, #16 wz
32f88     30 00 90 AD |  if_e	jmp	#LR__4970
32f8c     04 4E 05 F1 | 	add	fp, #4
32f90     A7 16 02 FB | 	rdlong	arg03, fp
32f94     0B 27 02 F6 | 	mov	local01, arg03
32f98     0C 4E 05 F1 | 	add	fp, #12
32f9c     A7 12 02 FB | 	rdlong	arg01, fp
32fa0     10 4E 85 F1 | 	sub	fp, #16
32fa4     1C 16 06 F1 | 	add	arg03, #28
32fa8     0B 15 02 FB | 	rdlong	arg02, arg03
32fac     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
32fb0     08 26 06 F1 | 	add	local01, #8
32fb4     13 FB 61 FC | 	wrlong	result1, local01
32fb8     0C 00 90 FD | 	jmp	#LR__4971
32fbc                 | LR__4970
32fbc     0C 4E 05 F1 | 	add	fp, #12
32fc0     A7 0A 68 FC | 	wrlong	#5, fp
32fc4     0C 4E 85 F1 | 	sub	fp, #12
32fc8                 | LR__4971
32fc8                 | LR__4972
32fc8     0C 4E 05 F1 | 	add	fp, #12
32fcc     A7 26 0A FB | 	rdlong	local01, fp wz
32fd0     0C 4E 85 F1 | 	sub	fp, #12
32fd4     40 00 90 5D |  if_ne	jmp	#LR__4973
32fd8     04 4E 05 F1 | 	add	fp, #4
32fdc     A7 26 02 FB | 	rdlong	local01, fp
32fe0     0C 4E 05 F1 | 	add	fp, #12
32fe4     A7 16 02 FB | 	rdlong	arg03, fp
32fe8     06 16 06 F1 | 	add	arg03, #6
32fec     0B 17 E2 FA | 	rdword	arg03, arg03
32ff0     04 26 06 F1 | 	add	local01, #4
32ff4     13 17 52 FC | 	wrword	arg03, local01
32ff8     0C 4E 85 F1 | 	sub	fp, #12
32ffc     A7 12 02 FB | 	rdlong	arg01, fp
33000     04 4E 85 F1 | 	sub	fp, #4
33004     00 14 06 F6 | 	mov	arg02, #0
33008     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
3300c     0C 4E 05 F1 | 	add	fp, #12
33010     A7 FA 61 FC | 	wrlong	result1, fp
33014     0C 4E 85 F1 | 	sub	fp, #12
33018                 | LR__4973
33018                 | LR__4974
33018     0C 4E 05 F1 | 	add	fp, #12
3301c     A7 26 02 FB | 	rdlong	local01, fp
33020     0C 4E 85 F1 | 	sub	fp, #12
33024     04 26 0E F2 | 	cmp	local01, #4 wz
33028     0C 4E 05 A1 |  if_e	add	fp, #12
3302c     A7 0A 68 AC |  if_e	wrlong	#5, fp
33030     0C 4E 85 A1 |  if_e	sub	fp, #12
33034                 | LR__4975
33034     0C 4E 05 F1 | 	add	fp, #12
33038     A7 26 0A FB | 	rdlong	local01, fp wz
3303c     0C 4E 85 F1 | 	sub	fp, #12
33040     04 4E 05 51 |  if_ne	add	fp, #4
33044     A7 26 02 5B |  if_ne	rdlong	local01, fp
33048     04 4E 85 51 |  if_ne	sub	fp, #4
3304c     13 01 68 5C |  if_ne	wrlong	#0, local01
33050                 | ' 
33050                 | ' 	return res ;
33050     0C 4E 05 F1 | 	add	fp, #12
33054     A7 FA 01 FB | 	rdlong	result1, fp
33058     0C 4E 85 F1 | 	sub	fp, #12
3305c                 | LR__4976
3305c     A7 F0 03 F6 | 	mov	ptra, fp
33060     B2 00 A0 FD | 	call	#popregs_
33064                 | _fatfs_cc_f_opendir_ret
33064     2D 00 64 FD | 	ret
33068                 | 
33068                 | _fatfs_cc_f_closedir
33068     00 4A 05 F6 | 	mov	COUNT_, #0
3306c     A8 00 A0 FD | 	call	#pushregs_
33070     10 F0 07 F1 | 	add	ptra, #16
33074     04 4E 05 F1 | 	add	fp, #4
33078     A7 12 62 FC | 	wrlong	arg01, fp
3307c     08 4E 05 F1 | 	add	fp, #8
33080     A7 14 02 F6 | 	mov	arg02, fp
33084     0C 4E 85 F1 | 	sub	fp, #12
33088     C0 DD BF FD | 	call	#_fatfs_cc_validate
3308c     08 4E 05 F1 | 	add	fp, #8
33090     A7 FA 61 FC | 	wrlong	result1, fp
33094     08 4E 85 F1 | 	sub	fp, #8
33098     00 FA 0D F2 | 	cmp	result1, #0 wz
3309c     04 4E 05 A1 |  if_e	add	fp, #4
330a0     A7 FA 01 AB |  if_e	rdlong	result1, fp
330a4     04 4E 85 A1 |  if_e	sub	fp, #4
330a8     FD 00 68 AC |  if_e	wrlong	#0, result1
330ac                 | ' 
330ac                 | ' 
330ac                 | ' 
330ac                 | ' 
330ac                 | ' 		dp->obj.fs = 0;
330ac                 | ' #line 4633 "ff.c"
330ac                 | ' 	}
330ac                 | ' 	return res;
330ac     08 4E 05 F1 | 	add	fp, #8
330b0     A7 FA 01 FB | 	rdlong	result1, fp
330b4     08 4E 85 F1 | 	sub	fp, #8
330b8     A7 F0 03 F6 | 	mov	ptra, fp
330bc     B2 00 A0 FD | 	call	#popregs_
330c0                 | _fatfs_cc_f_closedir_ret
330c0     2D 00 64 FD | 	ret
330c4                 | 
330c4                 | _fatfs_cc_f_readdir
330c4     00 4A 05 F6 | 	mov	COUNT_, #0
330c8     A8 00 A0 FD | 	call	#pushregs_
330cc     14 F0 07 F1 | 	add	ptra, #20
330d0     04 4E 05 F1 | 	add	fp, #4
330d4     A7 12 62 FC | 	wrlong	arg01, fp
330d8     04 4E 05 F1 | 	add	fp, #4
330dc     A7 14 62 FC | 	wrlong	arg02, fp
330e0     04 4E 85 F1 | 	sub	fp, #4
330e4     A7 12 02 FB | 	rdlong	arg01, fp
330e8     0C 4E 05 F1 | 	add	fp, #12
330ec     A7 14 02 F6 | 	mov	arg02, fp
330f0     10 4E 85 F1 | 	sub	fp, #16
330f4     54 DD BF FD | 	call	#_fatfs_cc_validate
330f8     0C 4E 05 F1 | 	add	fp, #12
330fc     A7 FA 61 FC | 	wrlong	result1, fp
33100     0C 4E 85 F1 | 	sub	fp, #12
33104     00 FA 0D F2 | 	cmp	result1, #0 wz
33108     BC 00 90 5D |  if_ne	jmp	#LR__4983
3310c     08 4E 05 F1 | 	add	fp, #8
33110     A7 FA 09 FB | 	rdlong	result1, fp wz
33114     08 4E 85 F1 | 	sub	fp, #8
33118     24 00 90 5D |  if_ne	jmp	#LR__4980
3311c     04 4E 05 F1 | 	add	fp, #4
33120     A7 12 02 FB | 	rdlong	arg01, fp
33124     04 4E 85 F1 | 	sub	fp, #4
33128     00 14 06 F6 | 	mov	arg02, #0
3312c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33130     0C 4E 05 F1 | 	add	fp, #12
33134     A7 FA 61 FC | 	wrlong	result1, fp
33138     0C 4E 85 F1 | 	sub	fp, #12
3313c     88 00 90 FD | 	jmp	#LR__4982
33140                 | LR__4980
33140     04 4E 05 F1 | 	add	fp, #4
33144     A7 12 02 FB | 	rdlong	arg01, fp
33148     04 4E 85 F1 | 	sub	fp, #4
3314c     00 14 06 F6 | 	mov	arg02, #0
33150     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33154     0C 4E 05 F1 | 	add	fp, #12
33158     A7 FA 61 FC | 	wrlong	result1, fp
3315c     0C 4E 85 F1 | 	sub	fp, #12
33160     04 FA 0D F2 | 	cmp	result1, #4 wz
33164     0C 4E 05 A1 |  if_e	add	fp, #12
33168     A7 00 68 AC |  if_e	wrlong	#0, fp
3316c     0C 4E 85 A1 |  if_e	sub	fp, #12
33170     0C 4E 05 F1 | 	add	fp, #12
33174     A7 FA 09 FB | 	rdlong	result1, fp wz
33178     0C 4E 85 F1 | 	sub	fp, #12
3317c     48 00 90 5D |  if_ne	jmp	#LR__4981
33180     04 4E 05 F1 | 	add	fp, #4
33184     A7 12 02 FB | 	rdlong	arg01, fp
33188     04 4E 05 F1 | 	add	fp, #4
3318c     A7 14 02 FB | 	rdlong	arg02, fp
33190     08 4E 85 F1 | 	sub	fp, #8
33194     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
33198     04 4E 05 F1 | 	add	fp, #4
3319c     A7 12 02 FB | 	rdlong	arg01, fp
331a0     04 4E 85 F1 | 	sub	fp, #4
331a4     00 14 06 F6 | 	mov	arg02, #0
331a8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
331ac     0C 4E 05 F1 | 	add	fp, #12
331b0     A7 FA 61 FC | 	wrlong	result1, fp
331b4     0C 4E 85 F1 | 	sub	fp, #12
331b8     04 FA 0D F2 | 	cmp	result1, #4 wz
331bc     0C 4E 05 A1 |  if_e	add	fp, #12
331c0     A7 00 68 AC |  if_e	wrlong	#0, fp
331c4     0C 4E 85 A1 |  if_e	sub	fp, #12
331c8                 | LR__4981
331c8                 | LR__4982
331c8                 | LR__4983
331c8                 | ' 			}
331c8                 | ' 			;
331c8                 | ' 		}
331c8                 | ' 	}
331c8                 | ' 	return res ;
331c8     0C 4E 05 F1 | 	add	fp, #12
331cc     A7 FA 01 FB | 	rdlong	result1, fp
331d0     0C 4E 85 F1 | 	sub	fp, #12
331d4     A7 F0 03 F6 | 	mov	ptra, fp
331d8     B2 00 A0 FD | 	call	#popregs_
331dc                 | _fatfs_cc_f_readdir_ret
331dc     2D 00 64 FD | 	ret
331e0                 | 
331e0                 | _fatfs_cc_f_stat
331e0     00 4A 05 F6 | 	mov	COUNT_, #0
331e4     A8 00 A0 FD | 	call	#pushregs_
331e8     40 F0 07 F1 | 	add	ptra, #64
331ec     04 4E 05 F1 | 	add	fp, #4
331f0     A7 12 62 FC | 	wrlong	arg01, fp
331f4     04 4E 05 F1 | 	add	fp, #4
331f8     A7 14 62 FC | 	wrlong	arg02, fp
331fc     04 4E 85 F1 | 	sub	fp, #4
33200     A7 12 02 F6 | 	mov	arg01, fp
33204     0C 4E 05 F1 | 	add	fp, #12
33208     A7 14 02 F6 | 	mov	arg02, fp
3320c     10 4E 85 F1 | 	sub	fp, #16
33210     00 16 06 F6 | 	mov	arg03, #0
33214     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33218     0C 4E 05 F1 | 	add	fp, #12
3321c     A7 FA 61 FC | 	wrlong	result1, fp
33220     0C 4E 85 F1 | 	sub	fp, #12
33224     00 FA 0D F2 | 	cmp	result1, #0 wz
33228     74 00 90 5D |  if_ne	jmp	#LR__4993
3322c     10 4E 05 F1 | 	add	fp, #16
33230     A7 12 02 F6 | 	mov	arg01, fp
33234     0C 4E 85 F1 | 	sub	fp, #12
33238     A7 14 02 FB | 	rdlong	arg02, fp
3323c     04 4E 85 F1 | 	sub	fp, #4
33240     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33244     0C 4E 05 F1 | 	add	fp, #12
33248     A7 FA 61 FC | 	wrlong	result1, fp
3324c     0C 4E 85 F1 | 	sub	fp, #12
33250     00 FA 0D F2 | 	cmp	result1, #0 wz
33254     48 00 90 5D |  if_ne	jmp	#LR__4992
33258     3B 4E 05 F1 | 	add	fp, #59
3325c     A7 FA C1 FA | 	rdbyte	result1, fp
33260     3B 4E 85 F1 | 	sub	fp, #59
33264     80 FA CD F7 | 	test	result1, #128 wz
33268     0C 4E 05 51 |  if_ne	add	fp, #12
3326c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33270     0C 4E 85 51 |  if_ne	sub	fp, #12
33274     28 00 90 5D |  if_ne	jmp	#LR__4991
33278     08 4E 05 F1 | 	add	fp, #8
3327c     A7 FA 09 FB | 	rdlong	result1, fp wz
33280     08 4E 85 F1 | 	sub	fp, #8
33284     18 00 90 AD |  if_e	jmp	#LR__4990
33288     10 4E 05 F1 | 	add	fp, #16
3328c     A7 12 02 F6 | 	mov	arg01, fp
33290     08 4E 85 F1 | 	sub	fp, #8
33294     A7 14 02 FB | 	rdlong	arg02, fp
33298     08 4E 85 F1 | 	sub	fp, #8
3329c     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
332a0                 | LR__4990
332a0                 | LR__4991
332a0                 | LR__4992
332a0                 | LR__4993
332a0                 | ' 			}
332a0                 | ' 		}
332a0                 | ' 		;
332a0                 | ' 	}
332a0                 | ' 
332a0                 | ' 	return res ;
332a0     0C 4E 05 F1 | 	add	fp, #12
332a4     A7 FA 01 FB | 	rdlong	result1, fp
332a8     0C 4E 85 F1 | 	sub	fp, #12
332ac     A7 F0 03 F6 | 	mov	ptra, fp
332b0     B2 00 A0 FD | 	call	#popregs_
332b4                 | _fatfs_cc_f_stat_ret
332b4     2D 00 64 FD | 	ret
332b8                 | 
332b8                 | _fatfs_cc_f_unlink
332b8     00 4A 05 F6 | 	mov	COUNT_, #0
332bc     A8 00 A0 FD | 	call	#pushregs_
332c0     74 F0 07 F1 | 	add	ptra, #116
332c4     04 4E 05 F1 | 	add	fp, #4
332c8     A7 12 62 FC | 	wrlong	arg01, fp
332cc     68 4E 05 F1 | 	add	fp, #104
332d0     A7 00 68 FC | 	wrlong	#0, fp
332d4     68 4E 85 F1 | 	sub	fp, #104
332d8     A7 12 02 F6 | 	mov	arg01, fp
332dc     6C 4E 05 F1 | 	add	fp, #108
332e0     A7 14 02 F6 | 	mov	arg02, fp
332e4     70 4E 85 F1 | 	sub	fp, #112
332e8     02 16 06 F6 | 	mov	arg03, #2
332ec     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
332f0     08 4E 05 F1 | 	add	fp, #8
332f4     A7 FA 61 FC | 	wrlong	result1, fp
332f8     08 4E 85 F1 | 	sub	fp, #8
332fc     00 FA 0D F2 | 	cmp	result1, #0 wz
33300     E4 01 90 5D |  if_ne	jmp	#LR__5008
33304     70 4E 05 F1 | 	add	fp, #112
33308     A7 16 02 FB | 	rdlong	arg03, fp
3330c     64 4E 85 F1 | 	sub	fp, #100
33310     A7 16 62 FC | 	wrlong	arg03, fp
33314     A7 12 02 F6 | 	mov	arg01, fp
33318     08 4E 85 F1 | 	sub	fp, #8
3331c     A7 14 02 FB | 	rdlong	arg02, fp
33320     04 4E 85 F1 | 	sub	fp, #4
33324     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
33328     08 4E 05 F1 | 	add	fp, #8
3332c     A7 FA 61 FC | 	wrlong	result1, fp
33330     00 FA 4D F2 | 	cmps	result1, #0 wz
33334     08 4E 85 F1 | 	sub	fp, #8
33338     AC 01 90 5D |  if_ne	jmp	#LR__5007
3333c     37 4E 05 F1 | 	add	fp, #55
33340     A7 FA C1 FA | 	rdbyte	result1, fp
33344     37 4E 85 F1 | 	sub	fp, #55
33348     80 FA CD F7 | 	test	result1, #128 wz
3334c     08 4E 05 51 |  if_ne	add	fp, #8
33350     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33354     08 4E 85 51 |  if_ne	sub	fp, #8
33358     1C 00 90 5D |  if_ne	jmp	#LR__5000
3335c     12 4E 05 F1 | 	add	fp, #18
33360     A7 FA C1 FA | 	rdbyte	result1, fp
33364     12 4E 85 F1 | 	sub	fp, #18
33368     01 FA CD F7 | 	test	result1, #1 wz
3336c     08 4E 05 51 |  if_ne	add	fp, #8
33370     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33374     08 4E 85 51 |  if_ne	sub	fp, #8
33378                 | LR__5000
33378     08 4E 05 F1 | 	add	fp, #8
3337c     A7 FA 09 FB | 	rdlong	result1, fp wz
33380     08 4E 85 F1 | 	sub	fp, #8
33384     C8 00 90 5D |  if_ne	jmp	#LR__5003
33388     70 4E 05 F1 | 	add	fp, #112
3338c     A7 12 02 FB | 	rdlong	arg01, fp
33390     48 4E 85 F1 | 	sub	fp, #72
33394     A7 14 02 FB | 	rdlong	arg02, fp
33398     28 4E 85 F1 | 	sub	fp, #40
3339c     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
333a0     6C 4E 05 F1 | 	add	fp, #108
333a4     A7 FA 61 FC | 	wrlong	result1, fp
333a8     5A 4E 85 F1 | 	sub	fp, #90
333ac     A7 FA C1 FA | 	rdbyte	result1, fp
333b0     12 4E 85 F1 | 	sub	fp, #18
333b4     10 FA CD F7 | 	test	result1, #16 wz
333b8     94 00 90 AD |  if_e	jmp	#LR__5002
333bc     70 4E 05 F1 | 	add	fp, #112
333c0     A7 FA 01 FB | 	rdlong	result1, fp
333c4     34 4E 85 F1 | 	sub	fp, #52
333c8     A7 FA 61 FC | 	wrlong	result1, fp
333cc     30 4E 05 F1 | 	add	fp, #48
333d0     A7 16 02 FB | 	rdlong	arg03, fp
333d4     28 4E 85 F1 | 	sub	fp, #40
333d8     A7 16 62 FC | 	wrlong	arg03, fp
333dc     08 4E 85 F1 | 	sub	fp, #8
333e0     A7 12 02 F6 | 	mov	arg01, fp
333e4     3C 4E 85 F1 | 	sub	fp, #60
333e8     00 14 06 F6 | 	mov	arg02, #0
333ec     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
333f0     08 4E 05 F1 | 	add	fp, #8
333f4     A7 FA 61 FC | 	wrlong	result1, fp
333f8     08 4E 85 F1 | 	sub	fp, #8
333fc     00 FA 0D F2 | 	cmp	result1, #0 wz
33400     4C 00 90 5D |  if_ne	jmp	#LR__5001
33404     3C 4E 05 F1 | 	add	fp, #60
33408     A7 12 02 F6 | 	mov	arg01, fp
3340c     3C 4E 85 F1 | 	sub	fp, #60
33410     00 14 06 F6 | 	mov	arg02, #0
33414     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
33418     08 4E 05 F1 | 	add	fp, #8
3341c     A7 FA 61 FC | 	wrlong	result1, fp
33420     00 FA 4D F2 | 	cmps	result1, #0 wz
33424     08 4E 85 F1 | 	sub	fp, #8
33428     08 4E 05 A1 |  if_e	add	fp, #8
3342c     A7 0E 68 AC |  if_e	wrlong	#7, fp
33430     08 4E 85 A1 |  if_e	sub	fp, #8
33434     08 4E 05 F1 | 	add	fp, #8
33438     A7 FA 01 FB | 	rdlong	result1, fp
3343c     08 4E 85 F1 | 	sub	fp, #8
33440     04 FA 0D F2 | 	cmp	result1, #4 wz
33444     08 4E 05 A1 |  if_e	add	fp, #8
33448     A7 00 68 AC |  if_e	wrlong	#0, fp
3344c     08 4E 85 A1 |  if_e	sub	fp, #8
33450                 | LR__5001
33450                 | LR__5002
33450                 | LR__5003
33450     08 4E 05 F1 | 	add	fp, #8
33454     A7 FA 09 FB | 	rdlong	result1, fp wz
33458     08 4E 85 F1 | 	sub	fp, #8
3345c     88 00 90 5D |  if_ne	jmp	#LR__5006
33460     0C 4E 05 F1 | 	add	fp, #12
33464     A7 12 02 F6 | 	mov	arg01, fp
33468     0C 4E 85 F1 | 	sub	fp, #12
3346c     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33470     08 4E 05 F1 | 	add	fp, #8
33474     A7 FA 61 FC | 	wrlong	result1, fp
33478     08 4E 85 F1 | 	sub	fp, #8
3347c     00 FA 0D F2 | 	cmp	result1, #0 wz
33480     38 00 90 5D |  if_ne	jmp	#LR__5004
33484     6C 4E 05 F1 | 	add	fp, #108
33488     A7 FA 09 FB | 	rdlong	result1, fp wz
3348c     6C 4E 85 F1 | 	sub	fp, #108
33490     28 00 90 AD |  if_e	jmp	#LR__5004
33494     0C 4E 05 F1 | 	add	fp, #12
33498     A7 12 02 F6 | 	mov	arg01, fp
3349c     60 4E 05 F1 | 	add	fp, #96
334a0     A7 14 02 FB | 	rdlong	arg02, fp
334a4     6C 4E 85 F1 | 	sub	fp, #108
334a8     00 16 06 F6 | 	mov	arg03, #0
334ac     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
334b0     08 4E 05 F1 | 	add	fp, #8
334b4     A7 FA 61 FC | 	wrlong	result1, fp
334b8     08 4E 85 F1 | 	sub	fp, #8
334bc                 | LR__5004
334bc     08 4E 05 F1 | 	add	fp, #8
334c0     A7 FA 09 FB | 	rdlong	result1, fp wz
334c4     08 4E 85 F1 | 	sub	fp, #8
334c8     1C 00 90 5D |  if_ne	jmp	#LR__5005
334cc     70 4E 05 F1 | 	add	fp, #112
334d0     A7 12 02 FB | 	rdlong	arg01, fp
334d4     70 4E 85 F1 | 	sub	fp, #112
334d8     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
334dc     08 4E 05 F1 | 	add	fp, #8
334e0     A7 FA 61 FC | 	wrlong	result1, fp
334e4     08 4E 85 F1 | 	sub	fp, #8
334e8                 | LR__5005
334e8                 | LR__5006
334e8                 | LR__5007
334e8                 | LR__5008
334e8                 | ' 			}
334e8                 | ' 		}
334e8                 | ' 		;
334e8                 | ' 	}
334e8                 | ' 
334e8                 | ' 	return res ;
334e8     08 4E 05 F1 | 	add	fp, #8
334ec     A7 FA 01 FB | 	rdlong	result1, fp
334f0     08 4E 85 F1 | 	sub	fp, #8
334f4     A7 F0 03 F6 | 	mov	ptra, fp
334f8     B2 00 A0 FD | 	call	#popregs_
334fc                 | _fatfs_cc_f_unlink_ret
334fc     2D 00 64 FD | 	ret
33500                 | 
33500                 | _fatfs_cc_f_mkdir
33500     00 4A 05 F6 | 	mov	COUNT_, #0
33504     A8 00 A0 FD | 	call	#pushregs_
33508     5C F0 07 F1 | 	add	ptra, #92
3350c     04 4E 05 F1 | 	add	fp, #4
33510     A7 12 62 FC | 	wrlong	arg01, fp
33514     A7 12 02 F6 | 	mov	arg01, fp
33518     48 4E 05 F1 | 	add	fp, #72
3351c     A7 14 02 F6 | 	mov	arg02, fp
33520     4C 4E 85 F1 | 	sub	fp, #76
33524     02 16 06 F6 | 	mov	arg03, #2
33528     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
3352c     08 4E 05 F1 | 	add	fp, #8
33530     A7 FA 61 FC | 	wrlong	result1, fp
33534     08 4E 85 F1 | 	sub	fp, #8
33538     00 FA 0D F2 | 	cmp	result1, #0 wz
3353c     C4 02 90 5D |  if_ne	jmp	#LR__5015
33540     4C 4E 05 F1 | 	add	fp, #76
33544     A7 16 02 FB | 	rdlong	arg03, fp
33548     40 4E 85 F1 | 	sub	fp, #64
3354c     A7 16 62 FC | 	wrlong	arg03, fp
33550     A7 12 02 F6 | 	mov	arg01, fp
33554     08 4E 85 F1 | 	sub	fp, #8
33558     A7 14 02 FB | 	rdlong	arg02, fp
3355c     04 4E 85 F1 | 	sub	fp, #4
33560     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33564     08 4E 05 F1 | 	add	fp, #8
33568     A7 FA 61 FC | 	wrlong	result1, fp
3356c     00 FA 4D F2 | 	cmps	result1, #0 wz
33570     08 4E 85 F1 | 	sub	fp, #8
33574     08 4E 05 A1 |  if_e	add	fp, #8
33578     A7 10 68 AC |  if_e	wrlong	#8, fp
3357c     08 4E 85 A1 |  if_e	sub	fp, #8
33580     08 4E 05 F1 | 	add	fp, #8
33584     A7 FA 01 FB | 	rdlong	result1, fp
33588     08 4E 85 F1 | 	sub	fp, #8
3358c     04 FA 0D F2 | 	cmp	result1, #4 wz
33590     70 02 90 5D |  if_ne	jmp	#LR__5014
33594     4C 4E 05 F1 | 	add	fp, #76
33598     A7 16 02 FB | 	rdlong	arg03, fp
3359c     10 4E 85 F1 | 	sub	fp, #16
335a0     A7 16 62 FC | 	wrlong	arg03, fp
335a4     A7 12 02 F6 | 	mov	arg01, fp
335a8     3C 4E 85 F1 | 	sub	fp, #60
335ac     00 14 06 F6 | 	mov	arg02, #0
335b0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
335b4     50 4E 05 F1 | 	add	fp, #80
335b8     A7 FA 61 FC | 	wrlong	result1, fp
335bc     48 4E 85 F1 | 	sub	fp, #72
335c0     A7 00 68 FC | 	wrlong	#0, fp
335c4     48 4E 05 F1 | 	add	fp, #72
335c8     A7 FA 09 FB | 	rdlong	result1, fp wz
335cc     50 4E 85 F1 | 	sub	fp, #80
335d0     08 4E 05 A1 |  if_e	add	fp, #8
335d4     A7 0E 68 AC |  if_e	wrlong	#7, fp
335d8     08 4E 85 A1 |  if_e	sub	fp, #8
335dc     50 4E 05 F1 | 	add	fp, #80
335e0     A7 FA 01 FB | 	rdlong	result1, fp
335e4     50 4E 85 F1 | 	sub	fp, #80
335e8     01 FA 0D F2 | 	cmp	result1, #1 wz
335ec     08 4E 05 A1 |  if_e	add	fp, #8
335f0     A7 04 68 AC |  if_e	wrlong	#2, fp
335f4     08 4E 85 A1 |  if_e	sub	fp, #8
335f8     50 4E 05 F1 | 	add	fp, #80
335fc     A7 16 02 FB | 	rdlong	arg03, fp
33600     50 4E 85 F1 | 	sub	fp, #80
33604     FF FF 7F FF 
33608     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
3360c     08 4E 05 A1 |  if_e	add	fp, #8
33610     A7 02 68 AC |  if_e	wrlong	#1, fp
33614     08 4E 85 A1 |  if_e	sub	fp, #8
33618     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
3361c     58 4E 05 F1 | 	add	fp, #88
33620     A7 FA 61 FC | 	wrlong	result1, fp
33624     50 4E 85 F1 | 	sub	fp, #80
33628     A7 FA 09 FB | 	rdlong	result1, fp wz
3362c     08 4E 85 F1 | 	sub	fp, #8
33630     1C 01 90 5D |  if_ne	jmp	#LR__5011
33634     4C 4E 05 F1 | 	add	fp, #76
33638     A7 12 02 FB | 	rdlong	arg01, fp
3363c     04 4E 05 F1 | 	add	fp, #4
33640     A7 14 02 FB | 	rdlong	arg02, fp
33644     50 4E 85 F1 | 	sub	fp, #80
33648     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
3364c     08 4E 05 F1 | 	add	fp, #8
33650     A7 FA 61 FC | 	wrlong	result1, fp
33654     00 FA 4D F2 | 	cmps	result1, #0 wz
33658     08 4E 85 F1 | 	sub	fp, #8
3365c     F0 00 90 5D |  if_ne	jmp	#LR__5010
33660     4C 4E 05 F1 | 	add	fp, #76
33664     A7 12 02 FB | 	rdlong	arg01, fp
33668     4C 4E 85 F1 | 	sub	fp, #76
3366c     34 12 06 F1 | 	add	arg01, #52
33670     20 14 06 F6 | 	mov	arg02, #32
33674     0B 16 06 F6 | 	mov	arg03, #11
33678     98 00 A0 FD | 	call	#\builtin_bytefill_
3367c     4C 4E 05 F1 | 	add	fp, #76
33680     A7 FA 01 FB | 	rdlong	result1, fp
33684     34 FA 05 F1 | 	add	result1, #52
33688     FD 5C 48 FC | 	wrbyte	#46, result1
3368c     A7 16 02 FB | 	rdlong	arg03, fp
33690     3F 16 06 F1 | 	add	arg03, #63
33694     0B 21 48 FC | 	wrbyte	#16, arg03
33698     A7 12 02 FB | 	rdlong	arg01, fp
3369c     4A 12 06 F1 | 	add	arg01, #74
336a0     0C 4E 05 F1 | 	add	fp, #12
336a4     A7 14 02 FB | 	rdlong	arg02, fp
336a8     09 15 62 FC | 	wrlong	arg02, arg01
336ac     0C 4E 85 F1 | 	sub	fp, #12
336b0     A7 14 02 FB | 	rdlong	arg02, fp
336b4     0A 13 02 F6 | 	mov	arg01, arg02
336b8     34 14 06 F1 | 	add	arg02, #52
336bc     04 4E 05 F1 | 	add	fp, #4
336c0     A7 16 02 FB | 	rdlong	arg03, fp
336c4     50 4E 85 F1 | 	sub	fp, #80
336c8     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
336cc     4C 4E 05 F1 | 	add	fp, #76
336d0     A7 14 02 FB | 	rdlong	arg02, fp
336d4     0A 13 02 F6 | 	mov	arg01, arg02
336d8     54 12 06 F1 | 	add	arg01, #84
336dc     4C 4E 85 F1 | 	sub	fp, #76
336e0     34 14 06 F1 | 	add	arg02, #52
336e4     20 16 06 F6 | 	mov	arg03, #32
336e8     74 27 BF FD | 	call	#__system____builtin_memmove
336ec     4C 4E 05 F1 | 	add	fp, #76
336f0     A7 16 02 FB | 	rdlong	arg03, fp
336f4     55 16 06 F1 | 	add	arg03, #85
336f8     0B 5D 48 FC | 	wrbyte	#46, arg03
336fc     38 4E 85 F1 | 	sub	fp, #56
33700     A7 16 02 FB | 	rdlong	arg03, fp
33704     40 4E 05 F1 | 	add	fp, #64
33708     A7 16 62 FC | 	wrlong	arg03, fp
3370c     08 4E 85 F1 | 	sub	fp, #8
33710     A7 14 02 FB | 	rdlong	arg02, fp
33714     0A 13 02 F6 | 	mov	arg01, arg02
33718     54 14 06 F1 | 	add	arg02, #84
3371c     4C 4E 85 F1 | 	sub	fp, #76
33720     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
33724     4C 4E 05 F1 | 	add	fp, #76
33728     A7 16 02 FB | 	rdlong	arg03, fp
3372c     03 16 06 F1 | 	add	arg03, #3
33730     0B 03 48 FC | 	wrbyte	#1, arg03
33734     40 4E 85 F1 | 	sub	fp, #64
33738     A7 12 02 F6 | 	mov	arg01, fp
3373c     0C 4E 85 F1 | 	sub	fp, #12
33740     44 BA BF FD | 	call	#_fatfs_cc_dir_register
33744     08 4E 05 F1 | 	add	fp, #8
33748     A7 FA 61 FC | 	wrlong	result1, fp
3374c     08 4E 85 F1 | 	sub	fp, #8
33750                 | LR__5010
33750                 | LR__5011
33750     08 4E 05 F1 | 	add	fp, #8
33754     A7 FA 09 FB | 	rdlong	result1, fp wz
33758     08 4E 85 F1 | 	sub	fp, #8
3375c     88 00 90 5D |  if_ne	jmp	#LR__5012
33760     28 4E 05 F1 | 	add	fp, #40
33764     A7 12 02 FB | 	rdlong	arg01, fp
33768     16 12 06 F1 | 	add	arg01, #22
3376c     30 4E 05 F1 | 	add	fp, #48
33770     A7 14 02 FB | 	rdlong	arg02, fp
33774     09 15 62 FC | 	wrlong	arg02, arg01
33778     0C 4E 85 F1 | 	sub	fp, #12
3377c     A7 12 02 FB | 	rdlong	arg01, fp
33780     24 4E 85 F1 | 	sub	fp, #36
33784     A7 14 02 FB | 	rdlong	arg02, fp
33788     28 4E 05 F1 | 	add	fp, #40
3378c     A7 16 02 FB | 	rdlong	arg03, fp
33790     50 4E 85 F1 | 	sub	fp, #80
33794     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
33798     28 4E 05 F1 | 	add	fp, #40
3379c     A7 FA 01 FB | 	rdlong	result1, fp
337a0     0B FA 05 F1 | 	add	result1, #11
337a4     FD 20 48 FC | 	wrbyte	#16, result1
337a8     24 4E 05 F1 | 	add	fp, #36
337ac     A7 FA 01 FB | 	rdlong	result1, fp
337b0     03 FA 05 F1 | 	add	result1, #3
337b4     FD 02 48 FC | 	wrbyte	#1, result1
337b8     44 4E 85 F1 | 	sub	fp, #68
337bc     A7 FA 09 FB | 	rdlong	result1, fp wz
337c0     08 4E 85 F1 | 	sub	fp, #8
337c4     3C 00 90 5D |  if_ne	jmp	#LR__5013
337c8     4C 4E 05 F1 | 	add	fp, #76
337cc     A7 12 02 FB | 	rdlong	arg01, fp
337d0     4C 4E 85 F1 | 	sub	fp, #76
337d4     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
337d8     08 4E 05 F1 | 	add	fp, #8
337dc     A7 FA 61 FC | 	wrlong	result1, fp
337e0     08 4E 85 F1 | 	sub	fp, #8
337e4     1C 00 90 FD | 	jmp	#LR__5013
337e8                 | LR__5012
337e8     3C 4E 05 F1 | 	add	fp, #60
337ec     A7 12 02 F6 | 	mov	arg01, fp
337f0     14 4E 05 F1 | 	add	fp, #20
337f4     A7 14 02 FB | 	rdlong	arg02, fp
337f8     50 4E 85 F1 | 	sub	fp, #80
337fc     00 16 06 F6 | 	mov	arg03, #0
33800     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
33804                 | LR__5013
33804                 | LR__5014
33804                 | LR__5015
33804                 | ' 				remove_chain(&sobj, dcl, 0);
33804                 | ' 			}
33804                 | ' 		}
33804                 | ' 		;
33804                 | ' 	}
33804                 | ' 
33804                 | ' 	return res ;
33804     08 4E 05 F1 | 	add	fp, #8
33808     A7 FA 01 FB | 	rdlong	result1, fp
3380c     08 4E 85 F1 | 	sub	fp, #8
33810     A7 F0 03 F6 | 	mov	ptra, fp
33814     B2 00 A0 FD | 	call	#popregs_
33818                 | _fatfs_cc_f_mkdir_ret
33818     2D 00 64 FD | 	ret
3381c                 | 
3381c                 | _fatfs_cc_f_rename
3381c     01 4A 05 F6 | 	mov	COUNT_, #1
33820     A8 00 A0 FD | 	call	#pushregs_
33824     9C F0 07 F1 | 	add	ptra, #156
33828     04 4E 05 F1 | 	add	fp, #4
3382c     A7 12 62 FC | 	wrlong	arg01, fp
33830     04 4E 05 F1 | 	add	fp, #4
33834     A7 14 62 FC | 	wrlong	arg02, fp
33838     A7 12 02 F6 | 	mov	arg01, fp
3383c     08 4E 85 F1 | 	sub	fp, #8
33840     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
33844     04 4E 05 F1 | 	add	fp, #4
33848     A7 12 02 F6 | 	mov	arg01, fp
3384c     6C 4E 05 F1 | 	add	fp, #108
33850     A7 14 02 F6 | 	mov	arg02, fp
33854     70 4E 85 F1 | 	sub	fp, #112
33858     02 16 06 F6 | 	mov	arg03, #2
3385c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
33860     0C 4E 05 F1 | 	add	fp, #12
33864     A7 FA 61 FC | 	wrlong	result1, fp
33868     0C 4E 85 F1 | 	sub	fp, #12
3386c     00 FA 0D F2 | 	cmp	result1, #0 wz
33870     44 03 90 5D |  if_ne	jmp	#LR__5033
33874     70 4E 05 F1 | 	add	fp, #112
33878     A7 16 02 FB | 	rdlong	arg03, fp
3387c     60 4E 85 F1 | 	sub	fp, #96
33880     A7 16 62 FC | 	wrlong	arg03, fp
33884     A7 12 02 F6 | 	mov	arg01, fp
33888     0C 4E 85 F1 | 	sub	fp, #12
3388c     A7 14 02 FB | 	rdlong	arg02, fp
33890     04 4E 85 F1 | 	sub	fp, #4
33894     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
33898     0C 4E 05 F1 | 	add	fp, #12
3389c     A7 FA 61 FC | 	wrlong	result1, fp
338a0     00 FA 4D F2 | 	cmps	result1, #0 wz
338a4     0C 4E 85 F1 | 	sub	fp, #12
338a8     1C 00 90 5D |  if_ne	jmp	#LR__5020
338ac     3B 4E 05 F1 | 	add	fp, #59
338b0     A7 FA C1 FA | 	rdbyte	result1, fp
338b4     3B 4E 85 F1 | 	sub	fp, #59
338b8     A0 FA CD F7 | 	test	result1, #160 wz
338bc     0C 4E 05 51 |  if_ne	add	fp, #12
338c0     A7 0C 68 5C |  if_ne	wrlong	#6, fp
338c4     0C 4E 85 51 |  if_ne	sub	fp, #12
338c8                 | LR__5020
338c8     0C 4E 05 F1 | 	add	fp, #12
338cc     A7 26 0A FB | 	rdlong	local01, fp wz
338d0     0C 4E 85 F1 | 	sub	fp, #12
338d4     E0 02 90 5D |  if_ne	jmp	#LR__5032
338d8     74 4E 05 F1 | 	add	fp, #116
338dc     A7 12 02 F6 | 	mov	arg01, fp
338e0     48 4E 85 F1 | 	sub	fp, #72
338e4     A7 14 02 FB | 	rdlong	arg02, fp
338e8     2C 4E 85 F1 | 	sub	fp, #44
338ec     20 16 06 F6 | 	mov	arg03, #32
338f0     6C 25 BF FD | 	call	#__system____builtin_memmove
338f4     40 4E 05 F1 | 	add	fp, #64
338f8     A7 12 02 F6 | 	mov	arg01, fp
338fc     30 4E 85 F1 | 	sub	fp, #48
33900     A7 14 02 F6 | 	mov	arg02, fp
33904     10 4E 85 F1 | 	sub	fp, #16
33908     30 16 06 F6 | 	mov	arg03, #48
3390c     50 25 BF FD | 	call	#__system____builtin_memmove
33910     40 4E 05 F1 | 	add	fp, #64
33914     A7 12 02 F6 | 	mov	arg01, fp
33918     38 4E 85 F1 | 	sub	fp, #56
3391c     A7 14 02 FB | 	rdlong	arg02, fp
33920     08 4E 85 F1 | 	sub	fp, #8
33924     34 CA BF FD | 	call	#_fatfs_cc_follow_path
33928     0C 4E 05 F1 | 	add	fp, #12
3392c     A7 FA 61 FC | 	wrlong	result1, fp
33930     0C 4E 85 F1 | 	sub	fp, #12
33934     00 FA 0D F2 | 	cmp	result1, #0 wz
33938     4C 00 90 5D |  if_ne	jmp	#LR__5023
3393c     48 4E 05 F1 | 	add	fp, #72
33940     A7 FA 01 FB | 	rdlong	result1, fp
33944     30 4E 85 F1 | 	sub	fp, #48
33948     A7 16 02 FB | 	rdlong	arg03, fp
3394c     18 4E 85 F1 | 	sub	fp, #24
33950     0B FB 09 F2 | 	cmp	result1, arg03 wz
33954     20 00 90 5D |  if_ne	jmp	#LR__5021
33958     50 4E 05 F1 | 	add	fp, #80
3395c     A7 FA 01 FB | 	rdlong	result1, fp
33960     30 4E 85 F1 | 	sub	fp, #48
33964     A7 16 02 FB | 	rdlong	arg03, fp
33968     20 4E 85 F1 | 	sub	fp, #32
3396c     0B FB 09 F2 | 	cmp	result1, arg03 wz
33970     04 26 06 A6 |  if_e	mov	local01, #4
33974     04 00 90 AD |  if_e	jmp	#LR__5022
33978                 | LR__5021
33978     08 26 06 F6 | 	mov	local01, #8
3397c                 | LR__5022
3397c     0C 4E 05 F1 | 	add	fp, #12
33980     A7 26 62 FC | 	wrlong	local01, fp
33984     0C 4E 85 F1 | 	sub	fp, #12
33988                 | LR__5023
33988     0C 4E 05 F1 | 	add	fp, #12
3398c     A7 26 02 FB | 	rdlong	local01, fp
33990     0C 4E 85 F1 | 	sub	fp, #12
33994     04 26 0E F2 | 	cmp	local01, #4 wz
33998     CC 01 90 5D |  if_ne	jmp	#LR__5029
3399c     40 4E 05 F1 | 	add	fp, #64
339a0     A7 12 02 F6 | 	mov	arg01, fp
339a4     40 4E 85 F1 | 	sub	fp, #64
339a8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
339ac     0C 4E 05 F1 | 	add	fp, #12
339b0     A7 FA 61 FC | 	wrlong	result1, fp
339b4     0C 4E 85 F1 | 	sub	fp, #12
339b8     00 FA 0D F2 | 	cmp	result1, #0 wz
339bc     A8 01 90 5D |  if_ne	jmp	#LR__5028
339c0     5C 4E 05 F1 | 	add	fp, #92
339c4     A7 12 02 FB | 	rdlong	arg01, fp
339c8     38 4E 05 F1 | 	add	fp, #56
339cc     A7 12 62 FC | 	wrlong	arg01, fp
339d0     0D 12 06 F1 | 	add	arg01, #13
339d4     20 4E 85 F1 | 	sub	fp, #32
339d8     A7 14 02 F6 | 	mov	arg02, fp
339dc     74 4E 85 F1 | 	sub	fp, #116
339e0     0D 14 06 F1 | 	add	arg02, #13
339e4     13 16 06 F6 | 	mov	arg03, #19
339e8     74 24 BF FD | 	call	#__system____builtin_memmove
339ec     94 4E 05 F1 | 	add	fp, #148
339f0     A7 26 02 FB | 	rdlong	local01, fp
339f4     15 4E 85 F1 | 	sub	fp, #21
339f8     A7 FA C1 FA | 	rdbyte	result1, fp
339fc     0B 26 06 F1 | 	add	local01, #11
33a00     13 FB 41 FC | 	wrbyte	result1, local01
33a04     15 4E 05 F1 | 	add	fp, #21
33a08     A7 26 02 FB | 	rdlong	local01, fp
33a0c     94 4E 85 F1 | 	sub	fp, #148
33a10     0B 26 06 F1 | 	add	local01, #11
33a14     13 27 C2 FA | 	rdbyte	local01, local01
33a18     10 26 CE F7 | 	test	local01, #16 wz
33a1c     24 00 90 5D |  if_ne	jmp	#LR__5024
33a20     94 4E 05 F1 | 	add	fp, #148
33a24     A7 FA 01 FB | 	rdlong	result1, fp
33a28     FD 26 02 F6 | 	mov	local01, result1
33a2c     94 4E 85 F1 | 	sub	fp, #148
33a30     0B FA 05 F1 | 	add	result1, #11
33a34     FD FA C1 FA | 	rdbyte	result1, result1
33a38     20 FA 45 F5 | 	or	result1, #32
33a3c     0B 26 06 F1 | 	add	local01, #11
33a40     13 FB 41 FC | 	wrbyte	result1, local01
33a44                 | LR__5024
33a44     70 4E 05 F1 | 	add	fp, #112
33a48     A7 26 02 FB | 	rdlong	local01, fp
33a4c     03 26 06 F1 | 	add	local01, #3
33a50     13 03 48 FC | 	wrbyte	#1, local01
33a54     24 4E 05 F1 | 	add	fp, #36
33a58     A7 26 02 FB | 	rdlong	local01, fp
33a5c     94 4E 85 F1 | 	sub	fp, #148
33a60     0B 26 06 F1 | 	add	local01, #11
33a64     13 27 C2 FA | 	rdbyte	local01, local01
33a68     10 26 CE F7 | 	test	local01, #16 wz
33a6c     F8 00 90 AD |  if_e	jmp	#LR__5027
33a70     18 4E 05 F1 | 	add	fp, #24
33a74     A7 16 02 FB | 	rdlong	arg03, fp
33a78     30 4E 05 F1 | 	add	fp, #48
33a7c     A7 26 02 FB | 	rdlong	local01, fp
33a80     48 4E 85 F1 | 	sub	fp, #72
33a84     13 17 0A F2 | 	cmp	arg03, local01 wz
33a88     DC 00 90 AD |  if_e	jmp	#LR__5027
33a8c     70 4E 05 F1 | 	add	fp, #112
33a90     A7 12 02 FB | 	rdlong	arg01, fp
33a94     09 27 02 F6 | 	mov	local01, arg01
33a98     24 4E 05 F1 | 	add	fp, #36
33a9c     A7 14 02 FB | 	rdlong	arg02, fp
33aa0     94 4E 85 F1 | 	sub	fp, #148
33aa4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
33aa8     FD 14 02 F6 | 	mov	arg02, result1
33aac     13 13 02 F6 | 	mov	arg01, local01
33ab0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
33ab4     98 4E 05 F1 | 	add	fp, #152
33ab8     A7 FA 61 FC | 	wrlong	result1, fp
33abc     00 FA 4D F2 | 	cmps	result1, #0 wz
33ac0     98 4E 85 F1 | 	sub	fp, #152
33ac4     0C 4E 05 A1 |  if_e	add	fp, #12
33ac8     A7 04 68 AC |  if_e	wrlong	#2, fp
33acc     0C 4E 85 A1 |  if_e	sub	fp, #12
33ad0     94 00 90 AD |  if_e	jmp	#LR__5026
33ad4     70 4E 05 F1 | 	add	fp, #112
33ad8     A7 12 02 FB | 	rdlong	arg01, fp
33adc     28 4E 05 F1 | 	add	fp, #40
33ae0     A7 14 02 FB | 	rdlong	arg02, fp
33ae4     98 4E 85 F1 | 	sub	fp, #152
33ae8     4C A0 BF FD | 	call	#_fatfs_cc_move_window
33aec     0C 4E 05 F1 | 	add	fp, #12
33af0     A7 FA 61 FC | 	wrlong	result1, fp
33af4     64 4E 05 F1 | 	add	fp, #100
33af8     A7 26 02 FB | 	rdlong	local01, fp
33afc     54 26 06 F1 | 	add	local01, #84
33b00     24 4E 05 F1 | 	add	fp, #36
33b04     A7 26 62 FC | 	wrlong	local01, fp
33b08     88 4E 85 F1 | 	sub	fp, #136
33b0c     A7 26 0A FB | 	rdlong	local01, fp wz
33b10     0C 4E 85 F1 | 	sub	fp, #12
33b14     50 00 90 5D |  if_ne	jmp	#LR__5025
33b18     94 4E 05 F1 | 	add	fp, #148
33b1c     A7 26 02 FB | 	rdlong	local01, fp
33b20     94 4E 85 F1 | 	sub	fp, #148
33b24     01 26 06 F1 | 	add	local01, #1
33b28     13 27 C2 FA | 	rdbyte	local01, local01
33b2c     2E 26 0E F2 | 	cmp	local01, #46 wz
33b30     34 00 90 5D |  if_ne	jmp	#LR__5025
33b34     70 4E 05 F1 | 	add	fp, #112
33b38     A7 12 02 FB | 	rdlong	arg01, fp
33b3c     24 4E 05 F1 | 	add	fp, #36
33b40     A7 14 02 FB | 	rdlong	arg02, fp
33b44     4C 4E 85 F1 | 	sub	fp, #76
33b48     A7 16 02 FB | 	rdlong	arg03, fp
33b4c     48 4E 85 F1 | 	sub	fp, #72
33b50     50 AD BF FD | 	call	#_fatfs_cc_st_clust
33b54     70 4E 05 F1 | 	add	fp, #112
33b58     A7 26 02 FB | 	rdlong	local01, fp
33b5c     70 4E 85 F1 | 	sub	fp, #112
33b60     03 26 06 F1 | 	add	local01, #3
33b64     13 03 48 FC | 	wrbyte	#1, local01
33b68                 | LR__5025
33b68                 | LR__5026
33b68                 | LR__5027
33b68                 | LR__5028
33b68                 | LR__5029
33b68     0C 4E 05 F1 | 	add	fp, #12
33b6c     A7 26 0A FB | 	rdlong	local01, fp wz
33b70     0C 4E 85 F1 | 	sub	fp, #12
33b74     40 00 90 5D |  if_ne	jmp	#LR__5031
33b78     10 4E 05 F1 | 	add	fp, #16
33b7c     A7 12 02 F6 | 	mov	arg01, fp
33b80     10 4E 85 F1 | 	sub	fp, #16
33b84     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
33b88     0C 4E 05 F1 | 	add	fp, #12
33b8c     A7 FA 61 FC | 	wrlong	result1, fp
33b90     0C 4E 85 F1 | 	sub	fp, #12
33b94     00 FA 0D F2 | 	cmp	result1, #0 wz
33b98     1C 00 90 5D |  if_ne	jmp	#LR__5030
33b9c     70 4E 05 F1 | 	add	fp, #112
33ba0     A7 12 02 FB | 	rdlong	arg01, fp
33ba4     70 4E 85 F1 | 	sub	fp, #112
33ba8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
33bac     0C 4E 05 F1 | 	add	fp, #12
33bb0     A7 FA 61 FC | 	wrlong	result1, fp
33bb4     0C 4E 85 F1 | 	sub	fp, #12
33bb8                 | LR__5030
33bb8                 | LR__5031
33bb8                 | LR__5032
33bb8                 | LR__5033
33bb8                 | ' 					res = sync_fs(fs);
33bb8                 | ' 				}
33bb8                 | ' 			}
33bb8                 | ' 
33bb8                 | ' 		}
33bb8                 | ' 		;
33bb8                 | ' 	}
33bb8                 | ' 
33bb8                 | ' 	return res ;
33bb8     0C 4E 05 F1 | 	add	fp, #12
33bbc     A7 FA 01 FB | 	rdlong	result1, fp
33bc0     0C 4E 85 F1 | 	sub	fp, #12
33bc4     A7 F0 03 F6 | 	mov	ptra, fp
33bc8     B2 00 A0 FD | 	call	#popregs_
33bcc                 | _fatfs_cc_f_rename_ret
33bcc     2D 00 64 FD | 	ret
33bd0                 | 
33bd0                 | _fatfs_cc_time
33bd0     00 4A 05 F6 | 	mov	COUNT_, #0
33bd4     A8 00 A0 FD | 	call	#pushregs_
33bd8     14 F0 07 F1 | 	add	ptra, #20
33bdc     04 4E 05 F1 | 	add	fp, #4
33be0     A7 12 62 FC | 	wrlong	arg01, fp
33be4     04 4E 05 F1 | 	add	fp, #4
33be8     A7 12 02 F6 | 	mov	arg01, fp
33bec     08 4E 85 F1 | 	sub	fp, #8
33bf0     00 14 06 F6 | 	mov	arg02, #0
33bf4     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
33bf8     08 4E 05 F1 | 	add	fp, #8
33bfc     A7 FA 01 FB | 	rdlong	result1, fp
33c00     08 4E 05 F1 | 	add	fp, #8
33c04     A7 FA 61 FC | 	wrlong	result1, fp
33c08     0C 4E 85 F1 | 	sub	fp, #12
33c0c     A7 FA 09 FB | 	rdlong	result1, fp wz
33c10     04 4E 85 F1 | 	sub	fp, #4
33c14     18 00 90 AD |  if_e	jmp	#LR__5040
33c18     04 4E 05 F1 | 	add	fp, #4
33c1c     A7 FA 01 FB | 	rdlong	result1, fp
33c20     0C 4E 05 F1 | 	add	fp, #12
33c24     A7 14 02 FB | 	rdlong	arg02, fp
33c28     10 4E 85 F1 | 	sub	fp, #16
33c2c     FD 14 62 FC | 	wrlong	arg02, result1
33c30                 | LR__5040
33c30                 | '         *tp = now;
33c30                 | '     return now;
33c30     10 4E 05 F1 | 	add	fp, #16
33c34     A7 FA 01 FB | 	rdlong	result1, fp
33c38     10 4E 85 F1 | 	sub	fp, #16
33c3c     A7 F0 03 F6 | 	mov	ptra, fp
33c40     B2 00 A0 FD | 	call	#popregs_
33c44                 | _fatfs_cc_time_ret
33c44     2D 00 64 FD | 	ret
33c48                 | 
33c48                 | _fatfs_cc_mktime
33c48     06 4A 05 F6 | 	mov	COUNT_, #6
33c4c     A8 00 A0 FD | 	call	#pushregs_
33c50     09 27 02 F6 | 	mov	local01, arg01
33c54     14 26 06 F1 | 	add	local01, #20
33c58     13 13 02 FB | 	rdlong	arg01, local01
33c5c     14 26 86 F1 | 	sub	local01, #20
33c60     46 12 56 F2 | 	cmps	arg01, #70 wc
33c64                 | '                 return (time_t) -1;
33c64     01 FA 65 C6 |  if_b	neg	result1, #1
33c68     7C 01 90 CD |  if_b	jmp	#LR__5054
33c6c     03 00 00 FF 
33c70     6C 29 06 F6 | 	mov	local02, ##1900
33c74     14 26 06 F1 | 	add	local01, #20
33c78     13 FB 01 FB | 	rdlong	result1, local01
33c7c     FD 28 02 F1 | 	add	local02, result1
33c80     08 26 86 F1 | 	sub	local01, #8
33c84     13 2B 02 FB | 	rdlong	local03, local01
33c88     01 2A 86 F1 | 	sub	local03, #1
33c8c     04 26 06 F1 | 	add	local01, #4
33c90     13 13 02 FB | 	rdlong	arg01, local01
33c94     10 26 86 F1 | 	sub	local01, #16
33c98     02 12 66 F0 | 	shl	arg01, #2
33c9c     02 00 00 FF 
33ca0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
33ca4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
33ca8     09 FB 01 FB | 	rdlong	result1, arg01
33cac     FD 2A 02 F1 | 	add	local03, result1
33cb0     14 13 02 F6 | 	mov	arg01, local02
33cb4     02 00 00 FF 
33cb8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
33cbc     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
33cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
33cc4     1C 00 90 AD |  if_e	jmp	#LR__5050
33cc8     00 2C 06 F6 | 	mov	local04, #0
33ccc     10 26 06 F1 | 	add	local01, #16
33cd0     13 FB 01 FB | 	rdlong	result1, local01
33cd4     10 26 86 F1 | 	sub	local01, #16
33cd8     02 FA 55 F2 | 	cmps	result1, #2 wc
33cdc     01 2C 06 36 |  if_ae	mov	local04, #1
33ce0     04 00 90 FD | 	jmp	#LR__5051
33ce4                 | LR__5050
33ce4     00 2C 06 F6 | 	mov	local04, #0
33ce8                 | LR__5051
33ce8     04 26 06 F1 | 	add	local01, #4
33cec     13 FB 01 FB | 	rdlong	result1, local01
33cf0     04 26 86 F1 | 	sub	local01, #4
33cf4     13 2F 02 FB | 	rdlong	local05, local01
33cf8     08 26 06 F1 | 	add	local01, #8
33cfc     13 13 02 FB | 	rdlong	arg01, local01
33d00     07 00 00 FF 
33d04     10 12 06 FD | 	qmul	arg01, ##3600
33d08     16 2B 02 F1 | 	add	local03, local04
33d0c     FD 2C 02 F6 | 	mov	local04, result1
33d10     04 2C 66 F0 | 	shl	local04, #4
33d14     FD 2C 82 F1 | 	sub	local04, result1
33d18     02 2C 66 F0 | 	shl	local04, #2
33d1c     16 2F 02 F1 | 	add	local05, local04
33d20     08 26 86 F1 | 	sub	local01, #8
33d24     18 2C 62 FD | 	getqx	local04
33d28     A8 00 00 FF 
33d2c     80 2B 06 FD | 	qmul	local03, ##86400
33d30     16 2F 02 F1 | 	add	local05, local04
33d34     14 2B 02 F6 | 	mov	local03, local02
33d38     03 00 00 FF 
33d3c     B2 2B 86 F1 | 	sub	local03, ##1970
33d40     18 2C 62 FD | 	getqx	local04
33d44     99 F0 00 FF 
33d48     80 2B 06 FD | 	qmul	local03, ##31536000
33d4c     16 2F 02 F1 | 	add	local05, local04
33d50     14 2B 02 F6 | 	mov	local03, local02
33d54     03 00 00 FF 
33d58     B1 2B 86 F1 | 	sub	local03, ##1969
33d5c     15 31 52 F6 | 	abs	local06, local03 wc
33d60     02 30 46 F0 | 	shr	local06, #2
33d64     18 31 82 F6 | 	negc	local06, local06
33d68     03 00 00 FF 
33d6c     D1 29 56 F2 | 	cmps	local02, ##2001 wc
33d70     18 2C 62 FD | 	getqx	local04
33d74     16 2F 02 F1 | 	add	local05, local04
33d78     18 00 90 CD |  if_b	jmp	#LR__5052
33d7c     03 00 00 FF 
33d80     D0 29 86 F1 | 	sub	local02, ##2000
33d84     14 2D 52 F6 | 	abs	local04, local02 wc
33d88     64 2C 16 FD | 	qdiv	local04, #100
33d8c     18 2C 62 FD | 	getqx	local04
33d90     16 31 A2 F3 | 	sumnc	local06, local04
33d94                 | LR__5052
33d94     A8 00 00 FF 
33d98     80 31 06 FD | 	qmul	local06, ##86400
33d9c     18 30 62 FD | 	getqx	local06
33da0     18 2F 02 F1 | 	add	local05, local06
33da4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
33da8     02 00 00 FF 
33dac     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
33db0     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
33db4     18 2F 02 F1 | 	add	local05, local06
33db8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
33dbc     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
33dc0     02 00 00 FF 
33dc4     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
33dc8     01 2A 0E F2 | 	cmp	local03, #1 wz
33dcc     14 00 90 5D |  if_ne	jmp	#LR__5053
33dd0     13 13 02 F6 | 	mov	arg01, local01
33dd4     DC 19 B0 FD | 	call	#_fatfs_cc___indst
33dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
33ddc     07 00 00 5F 
33de0     10 2E 86 51 |  if_ne	sub	local05, ##3600
33de4                 | LR__5053
33de4                 | '                 s -=  (3600L) ;
33de4                 | ' 
33de4                 | '         return s;
33de4     17 FB 01 F6 | 	mov	result1, local05
33de8                 | LR__5054
33de8     A7 F0 03 F6 | 	mov	ptra, fp
33dec     B2 00 A0 FD | 	call	#popregs_
33df0                 | _fatfs_cc_mktime_ret
33df0     2D 00 64 FD | 	ret
33df4                 | 
33df4                 | _fatfs_cc__gmtime_r
33df4     03 4A 05 F6 | 	mov	COUNT_, #3
33df8     A8 00 A0 FD | 	call	#pushregs_
33dfc     09 27 02 FB | 	rdlong	local01, arg01
33e00     A8 00 00 FF 
33e04     80 27 16 FD | 	qdiv	local01, ##86400
33e08     18 FA 61 FD | 	getqx	result1
33e0c     04 FA 05 F1 | 	add	result1, #4
33e10     07 FA 15 FD | 	qdiv	result1, #7
33e14     18 14 06 F1 | 	add	arg02, #24
33e18     D1 7F 27 FF 
33e1c     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
33e20     D1 7F 27 3F 
33e24     00 26 86 31 |  if_ae	sub	local01, ##1325376000
33e28     03 00 00 3F 
33e2c     DC 29 06 36 |  if_ae	mov	local02, ##2012
33e30     03 00 00 CF 
33e34     B2 29 06 C6 |  if_b	mov	local02, ##1970
33e38                 | ' 	  year = 1970;
33e38                 | ' 	}
33e38                 | ' 
33e38                 | ' 	for(;;) {
33e38     19 FA 61 FD | 	getqy	result1
33e3c     0A FB 61 FC | 	wrlong	result1, arg02
33e40     18 14 86 F1 | 	sub	arg02, #24
33e44                 | LR__5060
33e44     14 13 02 F6 | 	mov	arg01, local02
33e48     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33e4c     00 FA 0D F2 | 	cmp	result1, #0 wz
33e50     42 F1 00 5F 
33e54     00 2B 06 56 |  if_ne	mov	local03, ##31622400
33e58     99 F0 00 AF 
33e5c     80 2B 06 A6 |  if_e	mov	local03, ##31536000
33e60     15 27 12 F2 | 	cmp	local01, local03 wc
33e64                 | ' 	    break;
33e64     01 28 06 31 |  if_ae	add	local02, #1
33e68     15 27 82 31 |  if_ae	sub	local01, local03
33e6c     D4 FF 9F 3D |  if_ae	jmp	#LR__5060
33e70     A8 00 00 FF 
33e74     80 27 16 FD | 	qdiv	local01, ##86400
33e78     14 2B 02 F6 | 	mov	local03, local02
33e7c     03 00 00 FF 
33e80     6C 2B 86 F1 | 	sub	local03, ##1900
33e84     14 14 06 F1 | 	add	arg02, #20
33e88     0A 2B 62 FC | 	wrlong	local03, arg02
33e8c     08 14 06 F1 | 	add	arg02, #8
33e90     14 13 02 F6 | 	mov	arg01, local02
33e94     18 28 62 FD | 	getqx	local02
33e98     0A 29 62 FC | 	wrlong	local02, arg02
33e9c     1C 14 86 F1 | 	sub	arg02, #28
33ea0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
33ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
33ea8     1D 2A 06 56 |  if_ne	mov	local03, #29
33eac     1C 2A 06 A6 |  if_e	mov	local03, #28
33eb0     02 00 00 FF 
33eb4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
33eb8     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
33ebc     02 00 00 FF 
33ec0     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
33ec4                 | ' 
33ec4                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
33ec4                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
33ec4     00 12 06 F6 | 	mov	arg01, #0
33ec8     97 2A 48 FB | 	callpa	#(@LR__5062-@LR__5061)>>2,fcache_load_ptr_
33ecc                 | LR__5061
33ecc     09 2B 02 F6 | 	mov	local03, arg01
33ed0     02 2A 66 F0 | 	shl	local03, #2
33ed4     02 00 00 FF 
33ed8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33edc     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33ee0     15 2B 02 FB | 	rdlong	local03, local03
33ee4     15 29 52 F2 | 	cmps	local02, local03 wc
33ee8     02 00 00 FF 
33eec     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33ef0     2C 00 90 CD |  if_b	jmp	#LR__5063
33ef4     09 2B 02 F6 | 	mov	local03, arg01
33ef8     02 2A 66 F0 | 	shl	local03, #2
33efc     02 00 00 FF 
33f00     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
33f04     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
33f08     15 2B 02 FB | 	rdlong	local03, local03
33f0c     15 29 82 F1 | 	sub	local02, local03
33f10     01 12 06 F1 | 	add	arg01, #1
33f14     02 00 00 FF 
33f18     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
33f1c     AC FF 9F FD | 	jmp	#LR__5061
33f20                 | LR__5062
33f20                 | LR__5063
33f20     A8 00 00 FF 
33f24     80 27 16 FD | 	qdiv	local01, ##86400
33f28     10 14 06 F1 | 	add	arg02, #16
33f2c     0A 13 62 FC | 	wrlong	arg01, arg02
33f30     01 28 06 F1 | 	add	local02, #1
33f34     04 14 86 F1 | 	sub	arg02, #4
33f38     0A 29 62 FC | 	wrlong	local02, arg02
33f3c     19 26 62 FD | 	getqy	local01
33f40     07 00 00 FF 
33f44     10 26 16 FD | 	qdiv	local01, ##3600
33f48     18 2A 62 FD | 	getqx	local03
33f4c     07 00 00 FF 
33f50     10 26 16 FD | 	qdiv	local01, ##3600
33f54     04 14 86 F1 | 	sub	arg02, #4
33f58     0A 2B 62 FC | 	wrlong	local03, arg02
33f5c     19 26 62 FD | 	getqy	local01
33f60     3C 26 16 FD | 	qdiv	local01, #60
33f64     18 2A 62 FD | 	getqx	local03
33f68     3C 26 16 FD | 	qdiv	local01, #60
33f6c     04 14 86 F1 | 	sub	arg02, #4
33f70     0A 2B 62 FC | 	wrlong	local03, arg02
33f74     04 14 86 F1 | 	sub	arg02, #4
33f78                 | '         stm->tm_isdst = 0;
33f78                 | ' 
33f78                 | ' ;
33f78                 | '         return stm;
33f78     0A FB 01 F6 | 	mov	result1, arg02
33f7c     19 2A 62 FD | 	getqy	local03
33f80     0A 2B 62 FC | 	wrlong	local03, arg02
33f84     20 14 06 F1 | 	add	arg02, #32
33f88     0A 01 68 FC | 	wrlong	#0, arg02
33f8c     A7 F0 03 F6 | 	mov	ptra, fp
33f90     B2 00 A0 FD | 	call	#popregs_
33f94                 | _fatfs_cc__gmtime_r_ret
33f94     2D 00 64 FD | 	ret
33f98                 | 
33f98                 | _fatfs_cc__tzset
33f98     AD 01 00 FF 
33f9c     DD 12 06 F6 | 	mov	arg01, ##@LR__5375
33fa0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
33fa4     FD 12 02 F6 | 	mov	arg01, result1
33fa8     02 00 00 FF 
33fac     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
33fb0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
33fb4     02 00 00 FF 
33fb8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
33fbc     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
33fc0     02 00 00 FF 
33fc4     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
33fc8     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
33fcc     02 00 00 FF 
33fd0     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
33fd4                 | _fatfs_cc__tzset_ret
33fd4     2D 00 64 FD | 	ret
33fd8                 | 
33fd8                 | _fatfs_cc_getenv
33fd8     06 4A 05 F6 | 	mov	COUNT_, #6
33fdc     A8 00 A0 FD | 	call	#pushregs_
33fe0     09 27 02 F6 | 	mov	local01, arg01
33fe4     09 29 02 F6 | 	mov	local02, arg01
33fe8     97 06 48 FB | 	callpa	#(@LR__5071-@LR__5070)>>2,fcache_load_ptr_
33fec                 | LR__5070
33fec     14 FB C9 FA | 	rdbyte	result1, local02 wz
33ff0     01 28 06 51 |  if_ne	add	local02, #1
33ff4     F4 FF 9F 5D |  if_ne	jmp	#LR__5070
33ff8                 | LR__5071
33ff8     09 29 82 F1 | 	sub	local02, arg01
33ffc     14 FB 01 F6 | 	mov	result1, local02
34000     02 00 00 FF 
34004     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34008     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
3400c     02 00 00 FF 
34010     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34014                 | '             return 0;
34014     00 FA 05 A6 |  if_e	mov	result1, #0
34018     5C 00 90 AD |  if_e	jmp	#LR__5074
3401c                 | ' 
3401c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
3401c     02 00 00 FF 
34020     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
34024     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34028     02 00 00 FF 
3402c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34030                 | LR__5072
34030     15 2D 0A FB | 	rdlong	local04, local03 wz
34034     3C 00 90 AD |  if_e	jmp	#LR__5073
34038     16 13 02 F6 | 	mov	arg01, local04
3403c     13 15 02 F6 | 	mov	arg02, local01
34040     14 17 02 F6 | 	mov	arg03, local02
34044     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34048     00 FA 0D F2 | 	cmp	result1, #0 wz
3404c     14 2F 02 A6 |  if_e	mov	local05, local02
34050     16 2F 02 A1 |  if_e	add	local05, local04
34054     17 31 C2 AA |  if_e	rdbyte	local06, local05
34058     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
3405c                 | ' 			return name+len+1;
3405c     14 2D 02 A1 |  if_e	add	local04, local02
34060     01 2C 06 A1 |  if_e	add	local04, #1
34064     16 FB 01 A6 |  if_e	mov	result1, local04
34068     0C 00 90 AD |  if_e	jmp	#LR__5074
3406c     04 2A 06 F1 | 	add	local03, #4
34070     BC FF 9F FD | 	jmp	#LR__5072
34074                 | LR__5073
34074                 | ' 	}
34074                 | ' 	return 0;
34074     00 FA 05 F6 | 	mov	result1, #0
34078                 | LR__5074
34078     A7 F0 03 F6 | 	mov	ptra, fp
3407c     B2 00 A0 FD | 	call	#popregs_
34080                 | _fatfs_cc_getenv_ret
34080     2D 00 64 FD | 	ret
34084                 | 
34084                 | _fatfs_cc__get_fattime
34084     00 4A 05 F6 | 	mov	COUNT_, #0
34088     A8 00 A0 FD | 	call	#pushregs_
3408c     34 F0 07 F1 | 	add	ptra, #52
34090     00 12 06 F6 | 	mov	arg01, #0
34094     38 FB BF FD | 	call	#_fatfs_cc_time
34098     04 4E 05 F1 | 	add	fp, #4
3409c     A7 FA 61 FC | 	wrlong	result1, fp
340a0     A7 12 02 F6 | 	mov	arg01, fp
340a4     0C 4E 05 F1 | 	add	fp, #12
340a8     A7 14 02 F6 | 	mov	arg02, fp
340ac     10 4E 85 F1 | 	sub	fp, #16
340b0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
340b4     24 4E 05 F1 | 	add	fp, #36
340b8     A7 14 02 FB | 	rdlong	arg02, fp
340bc     50 14 86 F1 | 	sub	arg02, #80
340c0     09 14 66 F0 | 	shl	arg02, #9
340c4     04 4E 85 F1 | 	sub	fp, #4
340c8     A7 FA 01 FB | 	rdlong	result1, fp
340cc     01 FA 05 F1 | 	add	result1, #1
340d0     05 FA 65 F0 | 	shl	result1, #5
340d4     FD 14 42 F5 | 	or	arg02, result1
340d8     04 4E 85 F1 | 	sub	fp, #4
340dc     A7 FA 01 FB | 	rdlong	result1, fp
340e0     FD 14 42 F5 | 	or	arg02, result1
340e4     14 4E 85 F1 | 	sub	fp, #20
340e8     A7 14 62 FC | 	wrlong	arg02, fp
340ec     10 4E 05 F1 | 	add	fp, #16
340f0     A7 14 02 FB | 	rdlong	arg02, fp
340f4     0B 14 66 F0 | 	shl	arg02, #11
340f8     04 4E 85 F1 | 	sub	fp, #4
340fc     A7 FA 01 FB | 	rdlong	result1, fp
34100     05 FA 65 F0 | 	shl	result1, #5
34104     FD 14 42 F5 | 	or	arg02, result1
34108     04 4E 85 F1 | 	sub	fp, #4
3410c     A7 FA 01 FB | 	rdlong	result1, fp
34110     FD 14 42 F5 | 	or	arg02, result1
34114     04 4E 85 F1 | 	sub	fp, #4
34118     A7 14 62 FC | 	wrlong	arg02, fp
3411c                 | ' 
3411c                 | '     now = time(0);
3411c                 | '     _gmtime_r (&now, &date);
3411c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
3411c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
3411c                 | '     return (ffdate << 16) | fftime;
3411c     04 4E 85 F1 | 	sub	fp, #4
34120     A7 FA 01 FB | 	rdlong	result1, fp
34124     10 FA 65 F0 | 	shl	result1, #16
34128     08 4E 85 F1 | 	sub	fp, #8
3412c     0A FB 41 F5 | 	or	result1, arg02
34130     A7 F0 03 F6 | 	mov	ptra, fp
34134     B2 00 A0 FD | 	call	#popregs_
34138                 | _fatfs_cc__get_fattime_ret
34138     2D 00 64 FD | 	ret
3413c                 | 
3413c                 | _fatfs_cc_unixtime_1029
3413c     00 4A 05 F6 | 	mov	COUNT_, #0
34140     A8 00 A0 FD | 	call	#pushregs_
34144     34 F0 07 F1 | 	add	ptra, #52
34148     04 4E 05 F1 | 	add	fp, #4
3414c     A7 12 62 FC | 	wrlong	arg01, fp
34150     04 4E 05 F1 | 	add	fp, #4
34154     A7 14 62 FC | 	wrlong	arg02, fp
34158     04 4E 85 F1 | 	sub	fp, #4
3415c     A7 14 02 FB | 	rdlong	arg02, fp
34160     09 14 46 F0 | 	shr	arg02, #9
34164     7F 14 06 F5 | 	and	arg02, #127
34168     50 FA 05 F6 | 	mov	result1, #80
3416c     0A FB 01 F1 | 	add	result1, arg02
34170     20 4E 05 F1 | 	add	fp, #32
34174     A7 FA 61 FC | 	wrlong	result1, fp
34178     20 4E 85 F1 | 	sub	fp, #32
3417c     A7 FA 01 FB | 	rdlong	result1, fp
34180     05 FA 45 F0 | 	shr	result1, #5
34184     FD FA 41 F8 | 	getnib	result1, result1, #0
34188     01 FA 85 F1 | 	sub	result1, #1
3418c     1C 4E 05 F1 | 	add	fp, #28
34190     A7 FA 61 FC | 	wrlong	result1, fp
34194     1C 4E 85 F1 | 	sub	fp, #28
34198     A7 FA 01 FB | 	rdlong	result1, fp
3419c     1F FA 05 F5 | 	and	result1, #31
341a0     18 4E 05 F1 | 	add	fp, #24
341a4     A7 FA 61 FC | 	wrlong	result1, fp
341a8     14 4E 85 F1 | 	sub	fp, #20
341ac     A7 FA 01 FB | 	rdlong	result1, fp
341b0     0B FA 45 F0 | 	shr	result1, #11
341b4     1F FA 05 F5 | 	and	result1, #31
341b8     10 4E 05 F1 | 	add	fp, #16
341bc     A7 FA 61 FC | 	wrlong	result1, fp
341c0     10 4E 85 F1 | 	sub	fp, #16
341c4     A7 FA 01 FB | 	rdlong	result1, fp
341c8     05 FA 45 F0 | 	shr	result1, #5
341cc     3F FA 05 F5 | 	and	result1, #63
341d0     0C 4E 05 F1 | 	add	fp, #12
341d4     A7 FA 61 FC | 	wrlong	result1, fp
341d8     0C 4E 85 F1 | 	sub	fp, #12
341dc     A7 14 02 FB | 	rdlong	arg02, fp
341e0     1F 14 06 F5 | 	and	arg02, #31
341e4     01 14 66 F0 | 	shl	arg02, #1
341e8     08 4E 05 F1 | 	add	fp, #8
341ec     A7 14 62 FC | 	wrlong	arg02, fp
341f0     A7 12 02 F6 | 	mov	arg01, fp
341f4     10 4E 85 F1 | 	sub	fp, #16
341f8     4C FA BF FD | 	call	#_fatfs_cc_mktime
341fc     0C 4E 05 F1 | 	add	fp, #12
34200     A7 FA 61 FC | 	wrlong	result1, fp
34204                 | ' 
34204                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
34204                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
34204                 | '     date.tm_mday = (dosdate & 0x1f);
34204                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
34204                 | '     date.tm_min = (dostime >> 5) & 0x3f;
34204                 | '     date.tm_sec = (dostime & 0x1f) << 1;
34204                 | ' 
34204                 | '     t = mktime(&date);
34204                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34204                 | '     return t;
34204     0C 4E 85 F1 | 	sub	fp, #12
34208     A7 F0 03 F6 | 	mov	ptra, fp
3420c     B2 00 A0 FD | 	call	#popregs_
34210                 | _fatfs_cc_unixtime_1029_ret
34210     2D 00 64 FD | 	ret
34214                 | 
34214                 | _fatfs_cc__set_dos_error_1031
34214     09 01 02 F6 | 	mov	_var01, arg01
34218                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34218                 | '     switch (derr) {
34218     14 00 26 F3 | 	fle	_var01, #20
3421c     30 00 62 FD | 	jmprel	_var01
34220                 | LR__5080
34220     50 00 90 FD | 	jmp	#LR__5081
34224     84 00 90 FD | 	jmp	#LR__5095
34228     80 00 90 FD | 	jmp	#LR__5096
3422c     7C 00 90 FD | 	jmp	#LR__5097
34230     48 00 90 FD | 	jmp	#LR__5082
34234     44 00 90 FD | 	jmp	#LR__5083
34238     40 00 90 FD | 	jmp	#LR__5084
3423c     44 00 90 FD | 	jmp	#LR__5085
34240     48 00 90 FD | 	jmp	#LR__5087
34244     54 00 90 FD | 	jmp	#LR__5090
34248     38 00 90 FD | 	jmp	#LR__5086
3424c     4C 00 90 FD | 	jmp	#LR__5091
34250     48 00 90 FD | 	jmp	#LR__5092
34254     44 00 90 FD | 	jmp	#LR__5093
34258     50 00 90 FD | 	jmp	#LR__5098
3425c     4C 00 90 FD | 	jmp	#LR__5098
34260     48 00 90 FD | 	jmp	#LR__5098
34264     2C 00 90 FD | 	jmp	#LR__5088
34268     38 00 90 FD | 	jmp	#LR__5094
3426c     2C 00 90 FD | 	jmp	#LR__5089
34270     38 00 90 FD | 	jmp	#LR__5098
34274                 | LR__5081
34274     00 02 06 F6 | 	mov	_var02, #0
34278                 | '         r = 0;
34278                 | '         break;
34278     34 00 90 FD | 	jmp	#LR__5099
3427c                 | LR__5082
3427c                 | LR__5083
3427c                 | LR__5084
3427c     04 02 06 F6 | 	mov	_var02, #4
34280                 | '         r =  4 ;
34280                 | '         break;
34280     2C 00 90 FD | 	jmp	#LR__5099
34284                 | LR__5085
34284                 | LR__5086
34284     06 02 06 F6 | 	mov	_var02, #6
34288                 | '         r =  6 ;
34288                 | '         break;
34288     24 00 90 FD | 	jmp	#LR__5099
3428c                 | LR__5087
3428c     09 02 06 F6 | 	mov	_var02, #9
34290                 | '         r =  9 ;
34290                 | '         break;
34290     1C 00 90 FD | 	jmp	#LR__5099
34294                 | LR__5088
34294     07 02 06 F6 | 	mov	_var02, #7
34298                 | '         r =  7 ;
34298                 | '         break;
34298     14 00 90 FD | 	jmp	#LR__5099
3429c                 | LR__5089
3429c                 | LR__5090
3429c                 | LR__5091
3429c                 | LR__5092
3429c                 | LR__5093
3429c     0A 02 06 F6 | 	mov	_var02, #10
342a0                 | '         r =  10 ;
342a0                 | '         break;
342a0     0C 00 90 FD | 	jmp	#LR__5099
342a4                 | LR__5094
342a4     0B 02 06 F6 | 	mov	_var02, #11
342a8                 | '         r =  11 ;
342a8                 | '         break;
342a8     04 00 90 FD | 	jmp	#LR__5099
342ac                 | LR__5095
342ac                 | LR__5096
342ac                 | LR__5097
342ac                 | LR__5098
342ac     0C 02 06 F6 | 	mov	_var02, #12
342b0                 | '         r =  12 ;
342b0                 | '         break;
342b0                 | LR__5099
342b0                 | '     }
342b0                 | '     return _seterror(r);
342b0     00 02 4E F2 | 	cmps	_var02, #0 wz
342b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
342b8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
342bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
342c0     01 FA 65 56 |  if_ne	neg	result1, #1
342c4     00 FA 05 A6 |  if_e	mov	result1, #0
342c8                 | _fatfs_cc__set_dos_error_1031_ret
342c8     2D 00 64 FD | 	ret
342cc                 | 
342cc                 | _fatfs_cc_v_creat
342cc     04 4A 05 F6 | 	mov	COUNT_, #4
342d0     A8 00 A0 FD | 	call	#pushregs_
342d4     09 27 02 F6 | 	mov	local01, arg01
342d8     0A 29 02 F6 | 	mov	local02, arg02
342dc     03 00 00 FF 
342e0     3C 12 06 F6 | 	mov	arg01, ##1596
342e4                 | '     return _gc_alloc(size);
342e4     10 14 06 F6 | 	mov	arg02, #16
342e8     28 5E BF FD | 	call	#__system___gc_doalloc
342ec     FD 2A 0A F6 | 	mov	local03, result1 wz
342f0                 | '       return _seterror( 7 );
342f0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
342f4     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
342f8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
342fc     01 FA 65 A6 |  if_e	neg	result1, #1
34300     58 00 90 AD |  if_e	jmp	#LR__5101
34304     15 13 02 F6 | 	mov	arg01, local03
34308     00 14 06 F6 | 	mov	arg02, #0
3430c     03 00 00 FF 
34310     3C 16 06 F6 | 	mov	arg03, ##1596
34314     98 00 A0 FD | 	call	#\builtin_bytefill_
34318     02 00 00 FF 
3431c     14 2A 06 F1 | 	add	local03, ##1044
34320     15 13 02 F6 | 	mov	arg01, local03
34324     02 00 00 FF 
34328     14 2A 86 F1 | 	sub	local03, ##1044
3432c     14 15 02 F6 | 	mov	arg02, local02
34330     07 16 06 F6 | 	mov	arg03, #7
34334     B4 CC BF FD | 	call	#_fatfs_cc_f_open
34338     FD 2C 0A F6 | 	mov	local04, result1 wz
3433c     14 00 90 AD |  if_e	jmp	#LR__5100
34340     15 13 02 F6 | 	mov	arg01, local03
34344                 | '     return _gc_free(ptr);
34344     D8 5E BF FD | 	call	#__system___gc_free
34348                 | '     free(f);
34348                 | '     return _set_dos_error(r);
34348     16 13 02 F6 | 	mov	arg01, local04
3434c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34350     08 00 90 FD | 	jmp	#LR__5101
34354                 | LR__5100
34354     13 2B 62 FC | 	wrlong	local03, local01
34358                 | '   }
34358                 | '   fil->vfsdata = f;
34358                 | '   return 0;
34358     00 FA 05 F6 | 	mov	result1, #0
3435c                 | LR__5101
3435c     A7 F0 03 F6 | 	mov	ptra, fp
34360     B2 00 A0 FD | 	call	#popregs_
34364                 | _fatfs_cc_v_creat_ret
34364     2D 00 64 FD | 	ret
34368                 | 
34368                 | _fatfs_cc_v_close
34368     02 4A 05 F6 | 	mov	COUNT_, #2
3436c     A8 00 A0 FD | 	call	#pushregs_
34370     09 27 02 FB | 	rdlong	local01, arg01
34374     02 00 00 FF 
34378     14 26 06 F1 | 	add	local01, ##1044
3437c     13 13 02 F6 | 	mov	arg01, local01
34380     02 00 00 FF 
34384     14 26 86 F1 | 	sub	local01, ##1044
34388     DC E3 BF FD | 	call	#_fatfs_cc_f_close
3438c     FD 28 02 F6 | 	mov	local02, result1
34390     13 13 02 F6 | 	mov	arg01, local01
34394                 | '     return _gc_free(ptr);
34394     88 5E BF FD | 	call	#__system___gc_free
34398                 | '     FAT_FIL *f = fil->vfsdata;
34398                 | '     r=f_close(&f->fil);
34398                 | '     free(f);
34398                 | '     return _set_dos_error(r);
34398     14 13 02 F6 | 	mov	arg01, local02
3439c     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
343a0     A7 F0 03 F6 | 	mov	ptra, fp
343a4     B2 00 A0 FD | 	call	#popregs_
343a8                 | _fatfs_cc_v_close_ret
343a8     2D 00 64 FD | 	ret
343ac                 | 
343ac                 | _fatfs_cc_v_opendir
343ac     04 4A 05 F6 | 	mov	COUNT_, #4
343b0     A8 00 A0 FD | 	call	#pushregs_
343b4     09 27 02 F6 | 	mov	local01, arg01
343b8     0A 29 02 F6 | 	mov	local02, arg02
343bc     30 12 06 F6 | 	mov	arg01, #48
343c0                 | '     return _gc_alloc(size);
343c0     10 14 06 F6 | 	mov	arg02, #16
343c4     4C 5D BF FD | 	call	#__system___gc_doalloc
343c8     FD 2A 0A F6 | 	mov	local03, result1 wz
343cc                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
343cc                 | '       return _seterror( 7 );
343cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
343d0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
343d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
343d8     01 FA 65 A6 |  if_e	neg	result1, #1
343dc     34 00 90 AD |  if_e	jmp	#LR__5111
343e0     14 15 02 F6 | 	mov	arg02, local02
343e4     15 13 02 F6 | 	mov	arg01, local03
343e8     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
343ec     FD 2C 0A F6 | 	mov	local04, result1 wz
343f0     14 00 90 AD |  if_e	jmp	#LR__5110
343f4     15 13 02 F6 | 	mov	arg01, local03
343f8                 | '     return _gc_free(ptr);
343f8     24 5E BF FD | 	call	#__system___gc_free
343fc                 | '         free(f);
343fc                 | '         return _set_dos_error(r);
343fc     16 13 02 F6 | 	mov	arg01, local04
34400     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34404     0C 00 90 FD | 	jmp	#LR__5111
34408                 | LR__5110
34408     04 26 06 F1 | 	add	local01, #4
3440c     13 2B 62 FC | 	wrlong	local03, local01
34410                 | '     }
34410                 | '     dir->vfsdata = f;
34410                 | '     return 0;
34410     00 FA 05 F6 | 	mov	result1, #0
34414                 | LR__5111
34414     A7 F0 03 F6 | 	mov	ptra, fp
34418     B2 00 A0 FD | 	call	#popregs_
3441c                 | _fatfs_cc_v_opendir_ret
3441c     2D 00 64 FD | 	ret
34420                 | 
34420                 | _fatfs_cc_v_closedir
34420     02 4A 05 F6 | 	mov	COUNT_, #2
34424     A8 00 A0 FD | 	call	#pushregs_
34428     04 12 06 F1 | 	add	arg01, #4
3442c     09 27 02 FB | 	rdlong	local01, arg01
34430     13 13 02 F6 | 	mov	arg01, local01
34434     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
34438     FD 28 02 F6 | 	mov	local02, result1
3443c     13 13 02 F6 | 	mov	arg01, local01
34440                 | '     return _gc_free(ptr);
34440     DC 5D BF FD | 	call	#__system___gc_free
34444     00 28 0E F2 | 	cmp	local02, #0 wz
34448     14 13 02 56 |  if_ne	mov	arg01, local02
3444c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1031
34450                 | '     return r;
34450     14 FB 01 F6 | 	mov	result1, local02
34454     A7 F0 03 F6 | 	mov	ptra, fp
34458     B2 00 A0 FD | 	call	#popregs_
3445c                 | _fatfs_cc_v_closedir_ret
3445c     2D 00 64 FD | 	ret
34460                 | 
34460                 | _fatfs_cc_v_readdir
34460     01 4A 05 F6 | 	mov	COUNT_, #1
34464     A8 00 A0 FD | 	call	#pushregs_
34468     2C F1 07 F1 | 	add	ptra, #300
3446c     04 4E 05 F1 | 	add	fp, #4
34470     A7 12 62 FC | 	wrlong	arg01, fp
34474     04 4E 05 F1 | 	add	fp, #4
34478     A7 14 62 FC | 	wrlong	arg02, fp
3447c     04 4E 85 F1 | 	sub	fp, #4
34480     A7 16 02 FB | 	rdlong	arg03, fp
34484     04 16 06 F1 | 	add	arg03, #4
34488     0B 13 02 FB | 	rdlong	arg01, arg03
3448c     08 4E 05 F1 | 	add	fp, #8
34490     A7 14 02 F6 | 	mov	arg02, fp
34494     0C 4E 85 F1 | 	sub	fp, #12
34498     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
3449c     28 4F 05 F1 | 	add	fp, #296
344a0     A7 FA 61 FC | 	wrlong	result1, fp
344a4     28 4F 85 F1 | 	sub	fp, #296
344a8     00 FA 0D F2 | 	cmp	result1, #0 wz
344ac     14 00 90 AD |  if_e	jmp	#LR__5120
344b0                 | '         return _set_dos_error(r);
344b0     28 4F 05 F1 | 	add	fp, #296
344b4     A7 12 02 FB | 	rdlong	arg01, fp
344b8     28 4F 85 F1 | 	sub	fp, #296
344bc     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1031
344c0     C4 00 90 FD | 	jmp	#LR__5123
344c4                 | LR__5120
344c4     28 4E 05 F1 | 	add	fp, #40
344c8     A7 16 CA FA | 	rdbyte	arg03, fp wz
344cc     28 4E 85 F1 | 	sub	fp, #40
344d0                 | '         return -1;
344d0     01 FA 65 A6 |  if_e	neg	result1, #1
344d4     B0 00 90 AD |  if_e	jmp	#LR__5123
344d8     08 4E 05 F1 | 	add	fp, #8
344dc     A7 12 02 FB | 	rdlong	arg01, fp
344e0     20 4E 05 F1 | 	add	fp, #32
344e4     A7 14 02 F6 | 	mov	arg02, fp
344e8     28 4E 85 F1 | 	sub	fp, #40
344ec     3F 16 06 F6 | 	mov	arg03, #63
344f0     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
344f4     08 4E 05 F1 | 	add	fp, #8
344f8     A7 16 02 FB | 	rdlong	arg03, fp
344fc     3F 16 06 F1 | 	add	arg03, #63
34500     0B 01 48 FC | 	wrbyte	#0, arg03
34504     0C 4E 05 F1 | 	add	fp, #12
34508     A7 16 C2 FA | 	rdbyte	arg03, fp
3450c     14 4E 85 F1 | 	sub	fp, #20
34510     10 16 CE F7 | 	test	arg03, #16 wz
34514     18 00 90 AD |  if_e	jmp	#LR__5121
34518     08 4E 05 F1 | 	add	fp, #8
3451c     A7 16 02 FB | 	rdlong	arg03, fp
34520     08 4E 85 F1 | 	sub	fp, #8
34524     50 16 06 F1 | 	add	arg03, #80
34528     0B 03 48 FC | 	wrbyte	#1, arg03
3452c     14 00 90 FD | 	jmp	#LR__5122
34530                 | LR__5121
34530     08 4E 05 F1 | 	add	fp, #8
34534     A7 16 02 FB | 	rdlong	arg03, fp
34538     08 4E 85 F1 | 	sub	fp, #8
3453c     50 16 06 F1 | 	add	arg03, #80
34540     0B 01 48 FC | 	wrbyte	#0, arg03
34544                 | LR__5122
34544     08 4E 05 F1 | 	add	fp, #8
34548     A7 16 02 FB | 	rdlong	arg03, fp
3454c     04 4E 05 F1 | 	add	fp, #4
34550     A7 14 02 FB | 	rdlong	arg02, fp
34554     48 16 06 F1 | 	add	arg03, #72
34558     0B 15 62 FC | 	wrlong	arg02, arg03
3455c     04 4E 85 F1 | 	sub	fp, #4
34560     A7 26 02 FB | 	rdlong	local01, fp
34564     08 4E 05 F1 | 	add	fp, #8
34568     A7 12 E2 FA | 	rdword	arg01, fp
3456c     02 4E 05 F1 | 	add	fp, #2
34570     A7 14 E2 FA | 	rdword	arg02, fp
34574     12 4E 85 F1 | 	sub	fp, #18
34578     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1029
3457c     4C 26 06 F1 | 	add	local01, #76
34580     13 FB 61 FC | 	wrlong	result1, local01
34584                 | '         ent->d_type =  (0) ;
34584                 | '     }
34584                 | '     ent->d_size = finfo.fsize;
34584                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34584                 | '     return 0;
34584     00 FA 05 F6 | 	mov	result1, #0
34588                 | LR__5123
34588     A7 F0 03 F6 | 	mov	ptra, fp
3458c     B2 00 A0 FD | 	call	#popregs_
34590                 | _fatfs_cc_v_readdir_ret
34590     2D 00 64 FD | 	ret
34594                 | 
34594                 | _fatfs_cc_v_stat
34594     03 4A 05 F6 | 	mov	COUNT_, #3
34598     A8 00 A0 FD | 	call	#pushregs_
3459c     30 F1 07 F1 | 	add	ptra, #304
345a0     04 4E 05 F1 | 	add	fp, #4
345a4     A7 12 62 FC | 	wrlong	arg01, fp
345a8     04 4E 05 F1 | 	add	fp, #4
345ac     A7 14 62 FC | 	wrlong	arg02, fp
345b0     08 4E 85 F1 | 	sub	fp, #8
345b4     0A 13 02 F6 | 	mov	arg01, arg02
345b8     00 14 06 F6 | 	mov	arg02, #0
345bc     30 16 06 F6 | 	mov	arg03, #48
345c0     98 00 A0 FD | 	call	#\builtin_bytefill_
345c4     04 4E 05 F1 | 	add	fp, #4
345c8     A7 FA 01 FB | 	rdlong	result1, fp
345cc     04 4E 85 F1 | 	sub	fp, #4
345d0     FD FA C9 FA | 	rdbyte	result1, result1 wz
345d4     2C 00 90 AD |  if_e	jmp	#LR__5130
345d8     04 4E 05 F1 | 	add	fp, #4
345dc     A7 FA 01 FB | 	rdlong	result1, fp
345e0     04 4E 85 F1 | 	sub	fp, #4
345e4     FD FA C1 FA | 	rdbyte	result1, result1
345e8     2E FA 0D F2 | 	cmp	result1, #46 wz
345ec     04 4E 05 A1 |  if_e	add	fp, #4
345f0     A7 26 02 AB |  if_e	rdlong	local01, fp
345f4     04 4E 85 A1 |  if_e	sub	fp, #4
345f8     01 26 06 A1 |  if_e	add	local01, #1
345fc     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34600     18 00 90 5D |  if_ne	jmp	#LR__5131
34604                 | LR__5130
34604     18 4E 05 F1 | 	add	fp, #24
34608     A7 20 48 FC | 	wrbyte	#16, fp
3460c     0C 4E 85 F1 | 	sub	fp, #12
34610     A7 00 68 FC | 	wrlong	#0, fp
34614     0C 4E 85 F1 | 	sub	fp, #12
34618     24 00 90 FD | 	jmp	#LR__5132
3461c                 | LR__5131
3461c     04 4E 05 F1 | 	add	fp, #4
34620     A7 12 02 FB | 	rdlong	arg01, fp
34624     0C 4E 05 F1 | 	add	fp, #12
34628     A7 14 02 F6 | 	mov	arg02, fp
3462c     10 4E 85 F1 | 	sub	fp, #16
34630     AC EB BF FD | 	call	#_fatfs_cc_f_stat
34634     0C 4E 05 F1 | 	add	fp, #12
34638     A7 FA 61 FC | 	wrlong	result1, fp
3463c     0C 4E 85 F1 | 	sub	fp, #12
34640                 | LR__5132
34640     0C 4E 05 F1 | 	add	fp, #12
34644     A7 28 0A FB | 	rdlong	local02, fp wz
34648     0C 4E 85 F1 | 	sub	fp, #12
3464c     14 00 90 AD |  if_e	jmp	#LR__5133
34650                 | '         return _set_dos_error(r);
34650     0C 4E 05 F1 | 	add	fp, #12
34654     A7 12 02 FB | 	rdlong	arg01, fp
34658     0C 4E 85 F1 | 	sub	fp, #12
3465c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34660     14 01 90 FD | 	jmp	#LR__5134
34664                 | LR__5133
34664     2C 4F 05 F1 | 	add	fp, #300
34668     A7 48 6A FC | 	wrlong	#292, fp
3466c     14 4F 85 F1 | 	sub	fp, #276
34670     A7 2A C2 FA | 	rdbyte	local03, fp
34674     18 4E 85 F1 | 	sub	fp, #24
34678     01 2A CE F7 | 	test	local03, #1 wz
3467c     2C 4F 05 A1 |  if_e	add	fp, #300
34680     A7 2A 02 AB |  if_e	rdlong	local03, fp
34684     92 2A 46 A5 |  if_e	or	local03, #146
34688     A7 2A 62 AC |  if_e	wrlong	local03, fp
3468c     2C 4F 85 A1 |  if_e	sub	fp, #300
34690     18 4E 05 F1 | 	add	fp, #24
34694     A7 2A C2 FA | 	rdbyte	local03, fp
34698     18 4E 85 F1 | 	sub	fp, #24
3469c     10 2A CE F7 | 	test	local03, #16 wz
346a0     2C 4F 05 51 |  if_ne	add	fp, #300
346a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
346a8     08 00 00 5F 
346ac     49 2A 46 55 |  if_ne	or	local03, ##4169
346b0     A7 2A 62 5C |  if_ne	wrlong	local03, fp
346b4     2C 4F 85 51 |  if_ne	sub	fp, #300
346b8     08 4E 05 F1 | 	add	fp, #8
346bc     A7 2A 02 FB | 	rdlong	local03, fp
346c0     24 4F 05 F1 | 	add	fp, #292
346c4     A7 28 02 FB | 	rdlong	local02, fp
346c8     08 2A 06 F1 | 	add	local03, #8
346cc     15 29 62 FC | 	wrlong	local02, local03
346d0     24 4F 85 F1 | 	sub	fp, #292
346d4     A7 2A 02 FB | 	rdlong	local03, fp
346d8     0C 2A 06 F1 | 	add	local03, #12
346dc     15 03 68 FC | 	wrlong	#1, local03
346e0     A7 2A 02 FB | 	rdlong	local03, fp
346e4     08 4E 05 F1 | 	add	fp, #8
346e8     A7 28 02 FB | 	rdlong	local02, fp
346ec     18 2A 06 F1 | 	add	local03, #24
346f0     15 29 62 FC | 	wrlong	local02, local03
346f4     08 4E 85 F1 | 	sub	fp, #8
346f8     A7 2A 02 FB | 	rdlong	local03, fp
346fc     1C 2A 06 F1 | 	add	local03, #28
34700     01 00 80 FF 
34704     15 01 68 FC | 	wrlong	##512, local03
34708     A7 28 02 FB | 	rdlong	local02, fp
3470c     14 2B 02 F6 | 	mov	local03, local02
34710     18 28 06 F1 | 	add	local02, #24
34714     14 29 02 FB | 	rdlong	local02, local02
34718     FF 29 06 F1 | 	add	local02, #511
3471c     14 29 52 F6 | 	abs	local02, local02 wc
34720     09 28 46 F0 | 	shr	local02, #9
34724     14 29 82 F6 | 	negc	local02, local02
34728     20 2A 06 F1 | 	add	local03, #32
3472c     15 29 62 FC | 	wrlong	local02, local03
34730     A7 28 02 FB | 	rdlong	local02, fp
34734     14 2B 02 F6 | 	mov	local03, local02
34738     14 27 02 F6 | 	mov	local01, local02
3473c     0C 4E 05 F1 | 	add	fp, #12
34740     A7 12 E2 FA | 	rdword	arg01, fp
34744     02 4E 05 F1 | 	add	fp, #2
34748     A7 14 E2 FA | 	rdword	arg02, fp
3474c     16 4E 85 F1 | 	sub	fp, #22
34750     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1029
34754     2C 26 06 F1 | 	add	local01, #44
34758     13 FB 61 FC | 	wrlong	result1, local01
3475c     28 28 06 F1 | 	add	local02, #40
34760     14 FB 61 FC | 	wrlong	result1, local02
34764     24 2A 06 F1 | 	add	local03, #36
34768     15 FB 61 FC | 	wrlong	result1, local03
3476c                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
3476c                 | '     }
3476c                 | '     buf->st_mode = mode;
3476c                 | '     buf->st_nlink = 1;
3476c                 | '     buf->st_size = finfo.fsize;
3476c                 | '     buf->st_blksize = 512;
3476c                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
3476c                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
3476c                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3476c                 | '     return r;
3476c     0C 4E 05 F1 | 	add	fp, #12
34770     A7 FA 01 FB | 	rdlong	result1, fp
34774     0C 4E 85 F1 | 	sub	fp, #12
34778                 | LR__5134
34778     A7 F0 03 F6 | 	mov	ptra, fp
3477c     B2 00 A0 FD | 	call	#popregs_
34780                 | _fatfs_cc_v_stat_ret
34780     2D 00 64 FD | 	ret
34784                 | 
34784                 | _fatfs_cc_v_read
34784     00 4A 05 F6 | 	mov	COUNT_, #0
34788     A8 00 A0 FD | 	call	#pushregs_
3478c     1C F0 07 F1 | 	add	ptra, #28
34790     04 4E 05 F1 | 	add	fp, #4
34794     A7 12 62 FC | 	wrlong	arg01, fp
34798     04 4E 05 F1 | 	add	fp, #4
3479c     A7 14 62 FC | 	wrlong	arg02, fp
347a0     04 4E 05 F1 | 	add	fp, #4
347a4     A7 16 62 FC | 	wrlong	arg03, fp
347a8     08 4E 85 F1 | 	sub	fp, #8
347ac     A7 12 02 FB | 	rdlong	arg01, fp
347b0     09 13 0A FB | 	rdlong	arg01, arg01 wz
347b4     0C 4E 05 F1 | 	add	fp, #12
347b8     A7 12 62 FC | 	wrlong	arg01, fp
347bc     10 4E 85 F1 | 	sub	fp, #16
347c0                 | '         return _seterror( 5 );
347c0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
347c4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
347c8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
347cc     01 FA 65 A6 |  if_e	neg	result1, #1
347d0     B8 00 90 AD |  if_e	jmp	#LR__5142
347d4     10 4E 05 F1 | 	add	fp, #16
347d8     A7 12 02 FB | 	rdlong	arg01, fp
347dc     02 00 00 FF 
347e0     14 12 06 F1 | 	add	arg01, ##1044
347e4     08 4E 85 F1 | 	sub	fp, #8
347e8     A7 14 02 FB | 	rdlong	arg02, fp
347ec     04 4E 05 F1 | 	add	fp, #4
347f0     A7 16 02 FB | 	rdlong	arg03, fp
347f4     0C 4E 05 F1 | 	add	fp, #12
347f8     A7 18 02 F6 | 	mov	arg04, fp
347fc     18 4E 85 F1 | 	sub	fp, #24
34800     C4 CE BF FD | 	call	#_fatfs_cc_f_read
34804     14 4E 05 F1 | 	add	fp, #20
34808     A7 FA 61 FC | 	wrlong	result1, fp
3480c     14 4E 85 F1 | 	sub	fp, #20
34810     00 FA 0D F2 | 	cmp	result1, #0 wz
34814     34 00 90 AD |  if_e	jmp	#LR__5140
34818     04 4E 05 F1 | 	add	fp, #4
3481c     A7 18 02 FB | 	rdlong	arg04, fp
34820     0C 17 02 F6 | 	mov	arg03, arg04
34824     08 18 06 F1 | 	add	arg04, #8
34828     0C 19 02 FB | 	rdlong	arg04, arg04
3482c     20 18 46 F5 | 	or	arg04, #32
34830     08 16 06 F1 | 	add	arg03, #8
34834     0B 19 62 FC | 	wrlong	arg04, arg03
34838                 | '         fil->state |=  (0x20) ;
34838                 | '         return _set_dos_error(r);
34838     10 4E 05 F1 | 	add	fp, #16
3483c     A7 12 02 FB | 	rdlong	arg01, fp
34840     14 4E 85 F1 | 	sub	fp, #20
34844     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34848     40 00 90 FD | 	jmp	#LR__5142
3484c                 | LR__5140
3484c     18 4E 05 F1 | 	add	fp, #24
34850     A7 FA 09 FB | 	rdlong	result1, fp wz
34854     18 4E 85 F1 | 	sub	fp, #24
34858     24 00 90 5D |  if_ne	jmp	#LR__5141
3485c     04 4E 05 F1 | 	add	fp, #4
34860     A7 FA 01 FB | 	rdlong	result1, fp
34864     FD 18 02 F6 | 	mov	arg04, result1
34868     04 4E 85 F1 | 	sub	fp, #4
3486c     08 FA 05 F1 | 	add	result1, #8
34870     FD FA 01 FB | 	rdlong	result1, result1
34874     10 FA 45 F5 | 	or	result1, #16
34878     08 18 06 F1 | 	add	arg04, #8
3487c     0C FB 61 FC | 	wrlong	result1, arg04
34880                 | LR__5141
34880                 | '         fil->state |=  (0x10) ;
34880                 | '     }
34880                 | '     return x;
34880     18 4E 05 F1 | 	add	fp, #24
34884     A7 FA 01 FB | 	rdlong	result1, fp
34888     18 4E 85 F1 | 	sub	fp, #24
3488c                 | LR__5142
3488c     A7 F0 03 F6 | 	mov	ptra, fp
34890     B2 00 A0 FD | 	call	#popregs_
34894                 | _fatfs_cc_v_read_ret
34894     2D 00 64 FD | 	ret
34898                 | 
34898                 | _fatfs_cc_v_write
34898     00 4A 05 F6 | 	mov	COUNT_, #0
3489c     A8 00 A0 FD | 	call	#pushregs_
348a0     1C F0 07 F1 | 	add	ptra, #28
348a4     04 4E 05 F1 | 	add	fp, #4
348a8     A7 12 62 FC | 	wrlong	arg01, fp
348ac     04 4E 05 F1 | 	add	fp, #4
348b0     A7 14 62 FC | 	wrlong	arg02, fp
348b4     04 4E 05 F1 | 	add	fp, #4
348b8     A7 16 62 FC | 	wrlong	arg03, fp
348bc     08 4E 85 F1 | 	sub	fp, #8
348c0     A7 12 02 FB | 	rdlong	arg01, fp
348c4     09 13 0A FB | 	rdlong	arg01, arg01 wz
348c8     0C 4E 05 F1 | 	add	fp, #12
348cc     A7 12 62 FC | 	wrlong	arg01, fp
348d0     10 4E 85 F1 | 	sub	fp, #16
348d4                 | '         return _seterror( 5 );
348d4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
348d8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
348dc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
348e0     01 FA 65 A6 |  if_e	neg	result1, #1
348e4     84 00 90 AD |  if_e	jmp	#LR__5151
348e8     10 4E 05 F1 | 	add	fp, #16
348ec     A7 12 02 FB | 	rdlong	arg01, fp
348f0     02 00 00 FF 
348f4     14 12 06 F1 | 	add	arg01, ##1044
348f8     08 4E 85 F1 | 	sub	fp, #8
348fc     A7 14 02 FB | 	rdlong	arg02, fp
34900     04 4E 05 F1 | 	add	fp, #4
34904     A7 16 02 FB | 	rdlong	arg03, fp
34908     0C 4E 05 F1 | 	add	fp, #12
3490c     A7 18 02 F6 | 	mov	arg04, fp
34910     18 4E 85 F1 | 	sub	fp, #24
34914     4C D4 BF FD | 	call	#_fatfs_cc_f_write
34918     14 4E 05 F1 | 	add	fp, #20
3491c     A7 FA 61 FC | 	wrlong	result1, fp
34920     14 4E 85 F1 | 	sub	fp, #20
34924     00 FA 0D F2 | 	cmp	result1, #0 wz
34928     34 00 90 AD |  if_e	jmp	#LR__5150
3492c     04 4E 05 F1 | 	add	fp, #4
34930     A7 18 02 FB | 	rdlong	arg04, fp
34934     0C 17 02 F6 | 	mov	arg03, arg04
34938     08 18 06 F1 | 	add	arg04, #8
3493c     0C 19 02 FB | 	rdlong	arg04, arg04
34940     20 18 46 F5 | 	or	arg04, #32
34944     08 16 06 F1 | 	add	arg03, #8
34948     0B 19 62 FC | 	wrlong	arg04, arg03
3494c                 | '         fil->state |=  (0x20) ;
3494c                 | '         return _set_dos_error(r);
3494c     10 4E 05 F1 | 	add	fp, #16
34950     A7 12 02 FB | 	rdlong	arg01, fp
34954     14 4E 85 F1 | 	sub	fp, #20
34958     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
3495c     0C 00 90 FD | 	jmp	#LR__5151
34960                 | LR__5150
34960                 | '     }
34960                 | '     return x;
34960     18 4E 05 F1 | 	add	fp, #24
34964     A7 FA 01 FB | 	rdlong	result1, fp
34968     18 4E 85 F1 | 	sub	fp, #24
3496c                 | LR__5151
3496c     A7 F0 03 F6 | 	mov	ptra, fp
34970     B2 00 A0 FD | 	call	#popregs_
34974                 | _fatfs_cc_v_write_ret
34974     2D 00 64 FD | 	ret
34978                 | 
34978                 | _fatfs_cc_v_lseek
34978     04 4A 05 F6 | 	mov	COUNT_, #4
3497c     A8 00 A0 FD | 	call	#pushregs_
34980     0A 27 02 F6 | 	mov	local01, arg02
34984     0B 29 02 F6 | 	mov	local02, arg03
34988     09 2B 02 FB | 	rdlong	local03, arg01
3498c     02 00 00 FF 
34990     14 2A 0E F1 | 	add	local03, ##1044 wz
34994                 | '         return _seterror( 5 );
34994     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34998     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
3499c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
349a0     01 FA 65 A6 |  if_e	neg	result1, #1
349a4     4C 00 90 AD |  if_e	jmp	#LR__5162
349a8     00 28 0E F2 | 	cmp	local02, #0 wz
349ac     24 00 90 AD |  if_e	jmp	#LR__5160
349b0     01 28 0E F2 | 	cmp	local02, #1 wz
349b4     14 2A 06 A1 |  if_e	add	local03, #20
349b8     15 2D 02 AB |  if_e	rdlong	local04, local03
349bc     14 2A 86 A1 |  if_e	sub	local03, #20
349c0     16 27 02 A1 |  if_e	add	local01, local04
349c4     0C 2A 06 51 |  if_ne	add	local03, #12
349c8     15 2D 02 5B |  if_ne	rdlong	local04, local03
349cc     0C 2A 86 51 |  if_ne	sub	local03, #12
349d0     16 27 02 51 |  if_ne	add	local01, local04
349d4                 | LR__5160
349d4     13 15 02 F6 | 	mov	arg02, local01
349d8     15 13 02 F6 | 	mov	arg01, local03
349dc     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
349e0     FD 12 0A F6 | 	mov	arg01, result1 wz
349e4     08 00 90 AD |  if_e	jmp	#LR__5161
349e8                 | '         return _set_dos_error(result);
349e8     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
349ec     04 00 90 FD | 	jmp	#LR__5162
349f0                 | LR__5161
349f0                 | '     }
349f0                 | '     return offset;
349f0     13 FB 01 F6 | 	mov	result1, local01
349f4                 | LR__5162
349f4     A7 F0 03 F6 | 	mov	ptra, fp
349f8     B2 00 A0 FD | 	call	#popregs_
349fc                 | _fatfs_cc_v_lseek_ret
349fc     2D 00 64 FD | 	ret
34a00                 | 
34a00                 | _fatfs_cc_v_ioctl
34a00                 | ' {
34a00                 | '     return _seterror( 10 );
34a00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34a04     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
34a08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34a0c     01 FA 65 F6 | 	neg	result1, #1
34a10                 | _fatfs_cc_v_ioctl_ret
34a10     2D 00 64 FD | 	ret
34a14                 | 
34a14                 | _fatfs_cc_v_mkdir
34a14     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
34a18     FD 12 02 F6 | 	mov	arg01, result1
34a1c                 | ' 
34a1c                 | '     r = f_mkdir(name);
34a1c                 | '     return _set_dos_error(r);
34a1c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34a20                 | _fatfs_cc_v_mkdir_ret
34a20     2D 00 64 FD | 	ret
34a24                 | 
34a24                 | _fatfs_cc_v_remove
34a24     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
34a28     FD 12 02 F6 | 	mov	arg01, result1
34a2c                 | ' 
34a2c                 | '     r = f_unlink(name);
34a2c                 | '     return _set_dos_error(r);
34a2c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34a30                 | _fatfs_cc_v_remove_ret
34a30     2D 00 64 FD | 	ret
34a34                 | 
34a34                 | _fatfs_cc_v_rmdir
34a34     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
34a38     FD 12 02 F6 | 	mov	arg01, result1
34a3c                 | ' 
34a3c                 | '     r = f_unlink(name);
34a3c                 | '     return _set_dos_error(r);
34a3c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34a40                 | _fatfs_cc_v_rmdir_ret
34a40     2D 00 64 FD | 	ret
34a44                 | 
34a44                 | _fatfs_cc_v_rename
34a44     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
34a48     FD 12 02 F6 | 	mov	arg01, result1
34a4c                 | '     return _set_dos_error(r);
34a4c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34a50                 | _fatfs_cc_v_rename_ret
34a50     2D 00 64 FD | 	ret
34a54                 | 
34a54                 | _fatfs_cc_v_open
34a54     07 4A 05 F6 | 	mov	COUNT_, #7
34a58     A8 00 A0 FD | 	call	#pushregs_
34a5c     09 27 02 F6 | 	mov	local01, arg01
34a60     0A 29 02 F6 | 	mov	local02, arg02
34a64     0B 2B 02 F6 | 	mov	local03, arg03
34a68     03 00 00 FF 
34a6c     3C 12 06 F6 | 	mov	arg01, ##1596
34a70                 | '     return _gc_alloc(size);
34a70     10 14 06 F6 | 	mov	arg02, #16
34a74     9C 56 BF FD | 	call	#__system___gc_doalloc
34a78     FD 2C 0A F6 | 	mov	local04, result1 wz
34a7c                 | '       return _seterror( 7 );
34a7c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34a80     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34a84     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34a88     01 FA 65 A6 |  if_e	neg	result1, #1
34a8c     98 00 90 AD |  if_e	jmp	#LR__5176
34a90     16 13 02 F6 | 	mov	arg01, local04
34a94     00 14 06 F6 | 	mov	arg02, #0
34a98     03 00 00 FF 
34a9c     3C 16 06 F6 | 	mov	arg03, ##1596
34aa0     98 00 A0 FD | 	call	#\builtin_bytefill_
34aa4                 | '   switch (flags & 3) {
34aa4     15 2F 02 F6 | 	mov	local05, local03
34aa8     03 2E 0E F5 | 	and	local05, #3 wz
34aac     0C 00 90 AD |  if_e	jmp	#LR__5170
34ab0     01 2E 0E F2 | 	cmp	local05, #1 wz
34ab4     0C 00 90 AD |  if_e	jmp	#LR__5171
34ab8     10 00 90 FD | 	jmp	#LR__5172
34abc                 | LR__5170
34abc     01 30 06 F6 | 	mov	local06, #1
34ac0                 | '       fs_flags =  0x01 ;
34ac0                 | '       break;
34ac0     0C 00 90 FD | 	jmp	#LR__5173
34ac4                 | LR__5171
34ac4     02 30 06 F6 | 	mov	local06, #2
34ac8                 | '       fs_flags =  0x02 ;
34ac8                 | '       break;
34ac8     04 00 90 FD | 	jmp	#LR__5173
34acc                 | LR__5172
34acc     03 30 06 F6 | 	mov	local06, #3
34ad0                 | '       fs_flags =  0x01  |  0x02 ;
34ad0                 | '       break;
34ad0                 | LR__5173
34ad0     08 2A CE F7 | 	test	local03, #8 wz
34ad4     18 30 46 55 |  if_ne	or	local06, #24
34ad8     08 00 90 5D |  if_ne	jmp	#LR__5174
34adc     20 2A CE F7 | 	test	local03, #32 wz
34ae0     30 30 46 55 |  if_ne	or	local06, #48
34ae4                 | LR__5174
34ae4     02 00 00 FF 
34ae8     14 2C 06 F1 | 	add	local04, ##1044
34aec     16 13 02 F6 | 	mov	arg01, local04
34af0     02 00 00 FF 
34af4     14 2C 86 F1 | 	sub	local04, ##1044
34af8     14 15 02 F6 | 	mov	arg02, local02
34afc     18 17 02 F6 | 	mov	arg03, local06
34b00     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
34b04     FD 32 0A F6 | 	mov	local07, result1 wz
34b08     14 00 90 AD |  if_e	jmp	#LR__5175
34b0c     16 13 02 F6 | 	mov	arg01, local04
34b10                 | '     return _gc_free(ptr);
34b10     0C 57 BF FD | 	call	#__system___gc_free
34b14                 | '     free(f);
34b14                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b14                 | '     return _set_dos_error(r);
34b14     19 13 02 F6 | 	mov	arg01, local07
34b18     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34b1c     08 00 90 FD | 	jmp	#LR__5176
34b20                 | LR__5175
34b20     13 2D 62 FC | 	wrlong	local04, local01
34b24                 | '   }
34b24                 | '   fil->vfsdata = f;
34b24                 | '   return 0;
34b24     00 FA 05 F6 | 	mov	result1, #0
34b28                 | LR__5176
34b28     A7 F0 03 F6 | 	mov	ptra, fp
34b2c     B2 00 A0 FD | 	call	#popregs_
34b30                 | _fatfs_cc_v_open_ret
34b30     2D 00 64 FD | 	ret
34b34                 | 
34b34                 | _fatfs_cc_v_flush
34b34     09 13 02 FB | 	rdlong	arg01, arg01
34b38     02 00 00 FF 
34b3c     14 12 0E F1 | 	add	arg01, ##1044 wz
34b40                 | '         return _seterror( 5 );
34b40     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34b44     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
34b48     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34b4c     01 FA 65 A6 |  if_e	neg	result1, #1
34b50     0C 00 90 AD |  if_e	jmp	#LR__5180
34b54     00 DA BF FD | 	call	#_fatfs_cc_f_sync
34b58     FD 12 02 F6 | 	mov	arg01, result1
34b5c                 | '     }
34b5c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b5c                 | '     result = f_sync(f);
34b5c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34b5c                 | '     return _set_dos_error(result);
34b5c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1031
34b60                 | LR__5180
34b60                 | _fatfs_cc_v_flush_ret
34b60     2D 00 64 FD | 	ret
34b64                 | 
34b64                 | _fatfs_cc_v_init
34b64                 | ' {
34b64                 | '     return 0;
34b64     00 FA 05 F6 | 	mov	result1, #0
34b68                 | _fatfs_cc_v_init_ret
34b68     2D 00 64 FD | 	ret
34b6c                 | 
34b6c                 | _fatfs_cc_v_deinit
34b6c     AD 01 00 FF 
34b70     E0 14 06 F6 | 	mov	arg02, ##@LR__5376
34b74     00 12 06 F6 | 	mov	arg01, #0
34b78     00 16 06 F6 | 	mov	arg03, #0
34b7c     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
34b80     01 00 00 FF 
34b84     08 E4 05 F1 | 	add	objptr, ##520
34b88     F2 12 02 FB | 	rdlong	arg01, objptr
34b8c     04 E4 05 F1 | 	add	objptr, #4
34b90     F2 14 02 FB | 	rdlong	arg02, objptr
34b94     01 00 00 FF 
34b98     0C E4 85 F1 | 	sub	objptr, ##524
34b9c     F0 3D BF FD | 	call	#__system___freepins
34ba0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34ba0                 | '     _freepins(f_pinmask);
34ba0                 | '     return 0;
34ba0     00 FA 05 F6 | 	mov	result1, #0
34ba4                 | _fatfs_cc_v_deinit_ret
34ba4     2D 00 64 FD | 	ret
34ba8                 | 
34ba8                 | _fatfs_cc_get_vfs
34ba8     01 4A 05 F6 | 	mov	COUNT_, #1
34bac     A8 00 A0 FD | 	call	#pushregs_
34bb0     09 27 02 F6 | 	mov	local01, arg01
34bb4     50 12 06 F6 | 	mov	arg01, #80
34bb8     28 55 BF FD | 	call	#__system___gc_alloc_managed
34bbc     FD 12 02 F6 | 	mov	arg01, result1
34bc0     F2 FA 01 F6 | 	mov	result1, objptr
34bc4     00 60 05 FF 
34bc8     00 FA 45 F5 | 	or	result1, ##180355072
34bcc     09 FB 61 FC | 	wrlong	result1, arg01
34bd0     F2 FA 01 F6 | 	mov	result1, objptr
34bd4     00 68 05 FF 
34bd8     00 FA 45 F5 | 	or	result1, ##181403648
34bdc     04 12 06 F1 | 	add	arg01, #4
34be0     09 FB 61 FC | 	wrlong	result1, arg01
34be4     F2 FA 01 F6 | 	mov	result1, objptr
34be8     00 70 05 FF 
34bec     00 FA 45 F5 | 	or	result1, ##182452224
34bf0     04 12 06 F1 | 	add	arg01, #4
34bf4     09 FB 61 FC | 	wrlong	result1, arg01
34bf8     F2 FA 01 F6 | 	mov	result1, objptr
34bfc     00 78 05 FF 
34c00     00 FA 45 F5 | 	or	result1, ##183500800
34c04     04 12 06 F1 | 	add	arg01, #4
34c08     09 FB 61 FC | 	wrlong	result1, arg01
34c0c     F2 FA 01 F6 | 	mov	result1, objptr
34c10     00 80 05 FF 
34c14     00 FA 45 F5 | 	or	result1, ##184549376
34c18     04 12 06 F1 | 	add	arg01, #4
34c1c     09 FB 61 FC | 	wrlong	result1, arg01
34c20     04 12 06 F1 | 	add	arg01, #4
34c24     09 01 68 FC | 	wrlong	#0, arg01
34c28     04 12 06 F1 | 	add	arg01, #4
34c2c     09 27 62 FC | 	wrlong	local01, arg01
34c30     04 12 06 F1 | 	add	arg01, #4
34c34     09 01 68 FC | 	wrlong	#0, arg01
34c38     F2 FA 01 F6 | 	mov	result1, objptr
34c3c     00 88 05 FF 
34c40     00 FA 45 F5 | 	or	result1, ##185597952
34c44     04 12 06 F1 | 	add	arg01, #4
34c48     09 FB 61 FC | 	wrlong	result1, arg01
34c4c     F2 FA 01 F6 | 	mov	result1, objptr
34c50     00 90 05 FF 
34c54     00 FA 45 F5 | 	or	result1, ##186646528
34c58     04 12 06 F1 | 	add	arg01, #4
34c5c     09 FB 61 FC | 	wrlong	result1, arg01
34c60     F2 FA 01 F6 | 	mov	result1, objptr
34c64     00 98 05 FF 
34c68     00 FA 45 F5 | 	or	result1, ##187695104
34c6c     04 12 06 F1 | 	add	arg01, #4
34c70     09 FB 61 FC | 	wrlong	result1, arg01
34c74     F2 FA 01 F6 | 	mov	result1, objptr
34c78     00 A0 05 FF 
34c7c     00 FA 45 F5 | 	or	result1, ##188743680
34c80     04 12 06 F1 | 	add	arg01, #4
34c84     09 FB 61 FC | 	wrlong	result1, arg01
34c88     F2 FA 01 F6 | 	mov	result1, objptr
34c8c     00 A8 05 FF 
34c90     00 FA 45 F5 | 	or	result1, ##189792256
34c94     04 12 06 F1 | 	add	arg01, #4
34c98     09 FB 61 FC | 	wrlong	result1, arg01
34c9c     F2 FA 01 F6 | 	mov	result1, objptr
34ca0     00 B0 05 FF 
34ca4     00 FA 45 F5 | 	or	result1, ##190840832
34ca8     04 12 06 F1 | 	add	arg01, #4
34cac     09 FB 61 FC | 	wrlong	result1, arg01
34cb0     F2 FA 01 F6 | 	mov	result1, objptr
34cb4     00 B8 05 FF 
34cb8     00 FA 45 F5 | 	or	result1, ##191889408
34cbc     04 12 06 F1 | 	add	arg01, #4
34cc0     09 FB 61 FC | 	wrlong	result1, arg01
34cc4     F2 FA 01 F6 | 	mov	result1, objptr
34cc8     00 C0 05 FF 
34ccc     00 FA 45 F5 | 	or	result1, ##192937984
34cd0     04 12 06 F1 | 	add	arg01, #4
34cd4     09 FB 61 FC | 	wrlong	result1, arg01
34cd8     F2 FA 01 F6 | 	mov	result1, objptr
34cdc     00 C8 05 FF 
34ce0     00 FA 45 F5 | 	or	result1, ##193986560
34ce4     04 12 06 F1 | 	add	arg01, #4
34ce8     09 FB 61 FC | 	wrlong	result1, arg01
34cec     F2 FA 01 F6 | 	mov	result1, objptr
34cf0     00 D0 05 FF 
34cf4     00 FA 45 F5 | 	or	result1, ##195035136
34cf8     04 12 06 F1 | 	add	arg01, #4
34cfc     09 FB 61 FC | 	wrlong	result1, arg01
34d00     F2 FA 01 F6 | 	mov	result1, objptr
34d04     00 D8 05 FF 
34d08     00 FA 45 F5 | 	or	result1, ##196083712
34d0c     04 12 06 F1 | 	add	arg01, #4
34d10     09 FB 61 FC | 	wrlong	result1, arg01
34d14     F2 FA 01 F6 | 	mov	result1, objptr
34d18     00 E0 05 FF 
34d1c     00 FA 45 F5 | 	or	result1, ##197132288
34d20     04 12 06 F1 | 	add	arg01, #4
34d24     09 FB 61 FC | 	wrlong	result1, arg01
34d28     4C 12 86 F1 | 	sub	arg01, #76
34d2c                 | ' 
34d2c                 | '     v->close = &v_close;
34d2c                 | '     v->read = &v_read;
34d2c                 | '     v->write = &v_write;
34d2c                 | '     v->lseek = &v_lseek;
34d2c                 | '     v->ioctl = &v_ioctl;
34d2c                 | '     v->flush = 0;
34d2c                 | '     v->vfs_data = ptr;
34d2c                 | '     v->reserved = 0;
34d2c                 | ' 
34d2c                 | '     v->open = &v_open;
34d2c                 | '     v->creat = &v_creat;
34d2c                 | '     v->opendir = &v_opendir;
34d2c                 | '     v->closedir = &v_closedir;
34d2c                 | '     v->readdir = &v_readdir;
34d2c                 | '     v->stat = &v_stat;
34d2c                 | ' 
34d2c                 | '     v->mkdir = &v_mkdir;
34d2c                 | '     v->rmdir = &v_rmdir;
34d2c                 | ' 
34d2c                 | '     v->remove = &v_remove;
34d2c                 | '     v->rename = &v_rename;
34d2c                 | ' 
34d2c                 | '     v->init = &v_init;
34d2c                 | '     v->deinit = &v_deinit;
34d2c                 | ' 
34d2c                 | '     return v;
34d2c     09 FB 01 F6 | 	mov	result1, arg01
34d30     A7 F0 03 F6 | 	mov	ptra, fp
34d34     B2 00 A0 FD | 	call	#popregs_
34d38                 | _fatfs_cc_get_vfs_ret
34d38     2D 00 64 FD | 	ret
34d3c                 | 
34d3c                 | _fatfs_cc_xmit_mmc_1182
34d3c     01 00 00 FF 
34d40     10 E4 05 F1 | 	add	objptr, ##528
34d44     F2 00 02 FB | 	rdlong	_var01, objptr
34d48     08 E4 05 F1 | 	add	objptr, #8
34d4c     F2 02 02 FB | 	rdlong	_var02, objptr
34d50     01 00 00 FF 
34d54     18 E4 85 F1 | 	sub	objptr, ##536
34d58     40 02 62 FD | 	dirl	_var02
34d5c     28 02 64 FD | 	setq	#1
34d60     09 05 02 FB | 	rdlong	_var03, arg01
34d64     69 04 62 FD | 	rev	_var03
34d68     1B 04 FE F9 | 	movbyts	_var03, #27
34d6c     01 05 22 FC | 	wypin	_var03, _var02
34d70     0A 05 02 F6 | 	mov	_var03, arg02
34d74     02 14 4E F0 | 	shr	arg02, #2 wz
34d78     03 04 66 F0 | 	shl	_var03, #3
34d7c     00 05 22 FC | 	wypin	_var03, _var01
34d80     41 02 62 FD | 	dirh	_var02
34d84     08 12 06 F1 | 	add	arg01, #8
34d88     69 06 62 FD | 	rev	_var04
34d8c     1B 06 FE F9 | 	movbyts	_var04, #27
34d90                 | LR__5190
34d90     01 07 22 5C |  if_ne	wypin	_var04, _var02
34d94     09 07 02 5B |  if_ne	rdlong	_var04, arg01
34d98     04 12 06 51 |  if_ne	add	arg01, #4
34d9c     69 06 62 5D |  if_ne	rev	_var04
34da0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
34da4                 | LR__5191
34da4     40 02 72 5D |  if_ne	testp	_var02 wc
34da8     F8 FF 9F 1D |  if_a	jmp	#LR__5191
34dac     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5190
34db0                 | LR__5192
34db0     40 00 72 FD | 	testp	_var01 wc
34db4     F8 FF 9F 3D |  if_ae	jmp	#LR__5192
34db8     40 02 62 FD | 	dirl	_var02
34dbc     FF FF FF FF 
34dc0     01 FF 2B FC | 	wypin	##-1, _var02
34dc4     41 02 62 FD | 	dirh	_var02
34dc8                 | _fatfs_cc_xmit_mmc_1182_ret
34dc8     2D 00 64 FD | 	ret
34dcc                 | 
34dcc                 | _fatfs_cc_rcvr_mmc_1189
34dcc     01 00 00 FF 
34dd0     10 E4 05 F1 | 	add	objptr, ##528
34dd4     F2 00 02 FB | 	rdlong	_var01, objptr
34dd8     0C E4 05 F1 | 	add	objptr, #12
34ddc     F2 02 02 FB | 	rdlong	_var02, objptr
34de0     01 00 00 FF 
34de4     1C E4 85 F1 | 	sub	objptr, ##540
34de8     01 03 08 FC | 	akpin	_var02
34dec     0A 05 0A F6 | 	mov	_var03, arg02 wz
34df0     02 04 4E F0 | 	shr	_var03, #2 wz
34df4     30 00 90 AD |  if_e	jmp	#LR__5202
34df8     02 07 02 F6 | 	mov	_var04, _var03
34dfc     05 06 66 F0 | 	shl	_var04, #5
34e00     00 07 22 FC | 	wypin	_var04, _var01
34e04     01 7F 18 FC | 	wxpin	#63, _var02
34e08                 | LR__5200
34e08                 | LR__5201
34e08     40 02 72 FD | 	testp	_var02 wc
34e0c     F8 FF 9F 3D |  if_ae	jmp	#LR__5201
34e10     01 07 8A FA | 	rdpin	_var04, _var02
34e14     69 06 62 FD | 	rev	_var04
34e18     1B 06 FE F9 | 	movbyts	_var04, #27
34e1c     09 07 62 FC | 	wrlong	_var04, arg01
34e20     04 12 06 F1 | 	add	arg01, #4
34e24     F8 05 6E FB | 	djnz	_var03, #LR__5200
34e28                 | LR__5202
34e28     03 14 0E F5 | 	and	arg02, #3 wz
34e2c     24 00 90 AD |  if_e	jmp	#LR__5205
34e30     01 4F 18 FC | 	wxpin	#39, _var02
34e34                 | LR__5203
34e34     00 11 28 FC | 	wypin	#8, _var01
34e38                 | LR__5204
34e38     40 02 72 FD | 	testp	_var02 wc
34e3c     F8 FF 9F 3D |  if_ae	jmp	#LR__5204
34e40     01 07 8A FA | 	rdpin	_var04, _var02
34e44     69 06 62 FD | 	rev	_var04
34e48     09 07 42 FC | 	wrbyte	_var04, arg01
34e4c     01 12 06 F1 | 	add	arg01, #1
34e50     F8 15 6E FB | 	djnz	arg02, #LR__5203
34e54                 | LR__5205
34e54                 | _fatfs_cc_rcvr_mmc_1189_ret
34e54     2D 00 64 FD | 	ret
34e58                 | 
34e58                 | _fatfs_cc_wait_ready_1193
34e58     01 4A 05 F6 | 	mov	COUNT_, #1
34e5c     A8 00 A0 FD | 	call	#pushregs_
34e60     10 F0 07 F1 | 	add	ptra, #16
34e64     1A FA 61 FD | 	getct	result1
34e68     08 4E 05 F1 | 	add	fp, #8
34e6c     A7 FA 61 FC | 	wrlong	result1, fp
34e70     14 26 06 FB | 	rdlong	local01, #20
34e74     01 26 46 F0 | 	shr	local01, #1
34e78     04 4E 05 F1 | 	add	fp, #4
34e7c     A7 26 62 FC | 	wrlong	local01, fp
34e80     0C 4E 85 F1 | 	sub	fp, #12
34e84                 | ' {
34e84                 | ' 	BYTE d;
34e84                 | ' 	UINT tmr, tmout;
34e84                 | ' 
34e84                 | ' 	tmr = _cnt();
34e84                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
34e84                 | ' 	for(;;) {
34e84                 | LR__5210
34e84     04 4E 05 F1 | 	add	fp, #4
34e88     A7 12 02 F6 | 	mov	arg01, fp
34e8c     04 4E 85 F1 | 	sub	fp, #4
34e90     01 14 06 F6 | 	mov	arg02, #1
34e94     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
34e98     04 4E 05 F1 | 	add	fp, #4
34e9c     A7 26 C2 FA | 	rdbyte	local01, fp
34ea0     04 4E 85 F1 | 	sub	fp, #4
34ea4     FF 26 0E F2 | 	cmp	local01, #255 wz
34ea8     01 FA 05 A6 |  if_e	mov	result1, #1
34eac     28 00 90 AD |  if_e	jmp	#LR__5211
34eb0     1A FA 61 FD | 	getct	result1
34eb4     08 4E 05 F1 | 	add	fp, #8
34eb8     A7 26 02 FB | 	rdlong	local01, fp
34ebc     13 FB 81 F1 | 	sub	result1, local01
34ec0     04 4E 05 F1 | 	add	fp, #4
34ec4     A7 26 02 FB | 	rdlong	local01, fp
34ec8     0C 4E 85 F1 | 	sub	fp, #12
34ecc     13 FB 11 F2 | 	cmp	result1, local01 wc
34ed0     00 FA 05 36 |  if_ae	mov	result1, #0
34ed4     AC FF 9F CD |  if_b	jmp	#LR__5210
34ed8                 | LR__5211
34ed8     A7 F0 03 F6 | 	mov	ptra, fp
34edc     B2 00 A0 FD | 	call	#popregs_
34ee0                 | _fatfs_cc_wait_ready_1193_ret
34ee0     2D 00 64 FD | 	ret
34ee4                 | 
34ee4                 | _fatfs_cc_deselect_1199
34ee4     00 4A 05 F6 | 	mov	COUNT_, #0
34ee8     A8 00 A0 FD | 	call	#pushregs_
34eec     14 F0 07 F1 | 	add	ptra, #20
34ef0     01 00 00 FF 
34ef4     14 E4 05 F1 | 	add	objptr, ##532
34ef8     F2 14 02 FB | 	rdlong	arg02, objptr
34efc     04 4E 05 F1 | 	add	fp, #4
34f00     A7 14 62 FC | 	wrlong	arg02, fp
34f04     04 E4 85 F1 | 	sub	objptr, #4
34f08     F2 14 02 FB | 	rdlong	arg02, objptr
34f0c     04 4E 05 F1 | 	add	fp, #4
34f10     A7 14 62 FC | 	wrlong	arg02, fp
34f14     08 E4 05 F1 | 	add	objptr, #8
34f18     F2 14 02 FB | 	rdlong	arg02, objptr
34f1c     04 4E 05 F1 | 	add	fp, #4
34f20     A7 14 62 FC | 	wrlong	arg02, fp
34f24     04 E4 05 F1 | 	add	objptr, #4
34f28     F2 14 02 FB | 	rdlong	arg02, objptr
34f2c     01 00 00 FF 
34f30     1C E4 85 F1 | 	sub	objptr, ##540
34f34     04 4E 05 F1 | 	add	fp, #4
34f38     A7 14 62 FC | 	wrlong	arg02, fp
34f3c     0C 4E 85 F1 | 	sub	fp, #12
34f40     A7 12 02 FB | 	rdlong	arg01, fp
34f44     04 4E 85 F1 | 	sub	fp, #4
34f48     59 12 62 FD | 	drvh	arg01
34f4c     1F 20 64 FD | 	waitx	#16
34f50     A7 12 02 F6 | 	mov	arg01, fp
34f54     01 14 06 F6 | 	mov	arg02, #1
34f58     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
34f5c     A7 F0 03 F6 | 	mov	ptra, fp
34f60     B2 00 A0 FD | 	call	#popregs_
34f64                 | _fatfs_cc_deselect_1199_ret
34f64     2D 00 64 FD | 	ret
34f68                 | 
34f68                 | _fatfs_cc_select_1203
34f68     00 4A 05 F6 | 	mov	COUNT_, #0
34f6c     A8 00 A0 FD | 	call	#pushregs_
34f70     10 F0 07 F1 | 	add	ptra, #16
34f74     01 00 00 FF 
34f78     14 E4 05 F1 | 	add	objptr, ##532
34f7c     F2 14 02 FB | 	rdlong	arg02, objptr
34f80     08 4E 05 F1 | 	add	fp, #8
34f84     A7 14 62 FC | 	wrlong	arg02, fp
34f88     08 E4 05 F1 | 	add	objptr, #8
34f8c     F2 12 02 FB | 	rdlong	arg01, objptr
34f90     01 00 00 FF 
34f94     1C E4 85 F1 | 	sub	objptr, ##540
34f98     04 4E 05 F1 | 	add	fp, #4
34f9c     A7 12 62 FC | 	wrlong	arg01, fp
34fa0     50 12 62 FD | 	fltl	arg01
34fa4     04 4E 85 F1 | 	sub	fp, #4
34fa8     A7 12 02 FB | 	rdlong	arg01, fp
34fac     58 12 62 FD | 	drvl	arg01
34fb0     1F 20 64 FD | 	waitx	#16
34fb4     04 4E 05 F1 | 	add	fp, #4
34fb8     A7 12 02 FB | 	rdlong	arg01, fp
34fbc     41 12 62 FD | 	dirh	arg01
34fc0     08 4E 85 F1 | 	sub	fp, #8
34fc4     A7 12 02 F6 | 	mov	arg01, fp
34fc8     04 4E 85 F1 | 	sub	fp, #4
34fcc     01 14 06 F6 | 	mov	arg02, #1
34fd0     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
34fd4     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1193
34fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
34fdc     01 FA 05 56 |  if_ne	mov	result1, #1
34fe0     08 00 90 5D |  if_ne	jmp	#LR__5220
34fe4     FC FE BF FD | 	call	#_fatfs_cc_deselect_1199
34fe8                 | ' 
34fe8                 | ' 	deselect();
34fe8                 | ' 	return 0;
34fe8     00 FA 05 F6 | 	mov	result1, #0
34fec                 | LR__5220
34fec     A7 F0 03 F6 | 	mov	ptra, fp
34ff0     B2 00 A0 FD | 	call	#popregs_
34ff4                 | _fatfs_cc_select_1203_ret
34ff4     2D 00 64 FD | 	ret
34ff8                 | 
34ff8                 | _fatfs_cc_rcvr_datablock_1207
34ff8     01 4A 05 F6 | 	mov	COUNT_, #1
34ffc     A8 00 A0 FD | 	call	#pushregs_
35000     18 F0 07 F1 | 	add	ptra, #24
35004     04 4E 05 F1 | 	add	fp, #4
35008     A7 12 62 FC | 	wrlong	arg01, fp
3500c     04 4E 05 F1 | 	add	fp, #4
35010     A7 14 62 FC | 	wrlong	arg02, fp
35014     1A FA 61 FD | 	getct	result1
35018     08 4E 05 F1 | 	add	fp, #8
3501c     A7 FA 61 FC | 	wrlong	result1, fp
35020     14 26 06 FB | 	rdlong	local01, #20
35024     03 26 46 F0 | 	shr	local01, #3
35028     04 4E 05 F1 | 	add	fp, #4
3502c     A7 26 62 FC | 	wrlong	local01, fp
35030     14 4E 85 F1 | 	sub	fp, #20
35034                 | ' 	BYTE *buff,
35034                 | ' 	UINT btr
35034                 | ' )
35034                 | ' {
35034                 | ' 	BYTE d[2];
35034                 | ' 	UINT tmr, tmout;
35034                 | ' 
35034                 | ' 	tmr = _cnt();
35034                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35034                 | ' 	for(;;) {
35034                 | LR__5230
35034     0C 4E 05 F1 | 	add	fp, #12
35038     A7 12 02 F6 | 	mov	arg01, fp
3503c     0C 4E 85 F1 | 	sub	fp, #12
35040     01 14 06 F6 | 	mov	arg02, #1
35044     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35048     0C 4E 05 F1 | 	add	fp, #12
3504c     A7 26 C2 FA | 	rdbyte	local01, fp
35050     0C 4E 85 F1 | 	sub	fp, #12
35054     FF 26 0E F2 | 	cmp	local01, #255 wz
35058     28 00 90 5D |  if_ne	jmp	#LR__5231
3505c     1A FA 61 FD | 	getct	result1
35060     FD 26 02 F6 | 	mov	local01, result1
35064     10 4E 05 F1 | 	add	fp, #16
35068     A7 14 02 FB | 	rdlong	arg02, fp
3506c     0A 27 82 F1 | 	sub	local01, arg02
35070     04 4E 05 F1 | 	add	fp, #4
35074     A7 14 02 FB | 	rdlong	arg02, fp
35078     14 4E 85 F1 | 	sub	fp, #20
3507c     0A 27 12 F2 | 	cmp	local01, arg02 wc
35080     B0 FF 9F CD |  if_b	jmp	#LR__5230
35084                 | LR__5231
35084     0C 4E 05 F1 | 	add	fp, #12
35088     A7 26 C2 FA | 	rdbyte	local01, fp
3508c     0C 4E 85 F1 | 	sub	fp, #12
35090     FE 26 0E F2 | 	cmp	local01, #254 wz
35094     00 FA 05 56 |  if_ne	mov	result1, #0
35098     30 00 90 5D |  if_ne	jmp	#LR__5232
3509c     04 4E 05 F1 | 	add	fp, #4
350a0     A7 12 02 FB | 	rdlong	arg01, fp
350a4     04 4E 05 F1 | 	add	fp, #4
350a8     A7 14 02 FB | 	rdlong	arg02, fp
350ac     08 4E 85 F1 | 	sub	fp, #8
350b0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
350b4     0C 4E 05 F1 | 	add	fp, #12
350b8     A7 12 02 F6 | 	mov	arg01, fp
350bc     0C 4E 85 F1 | 	sub	fp, #12
350c0     02 14 06 F6 | 	mov	arg02, #2
350c4     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
350c8                 | ' 
350c8                 | ' 	rcvr_mmc(buff, btr);
350c8                 | ' 	rcvr_mmc(d, 2);
350c8                 | ' 
350c8                 | ' 	return 1;
350c8     01 FA 05 F6 | 	mov	result1, #1
350cc                 | LR__5232
350cc     A7 F0 03 F6 | 	mov	ptra, fp
350d0     B2 00 A0 FD | 	call	#popregs_
350d4                 | _fatfs_cc_rcvr_datablock_1207_ret
350d4     2D 00 64 FD | 	ret
350d8                 | 
350d8                 | _fatfs_cc_xmit_datablock_1209
350d8     00 4A 05 F6 | 	mov	COUNT_, #0
350dc     A8 00 A0 FD | 	call	#pushregs_
350e0     10 F0 07 F1 | 	add	ptra, #16
350e4     04 4E 05 F1 | 	add	fp, #4
350e8     A7 12 62 FC | 	wrlong	arg01, fp
350ec     04 4E 05 F1 | 	add	fp, #4
350f0     A7 14 42 FC | 	wrbyte	arg02, fp
350f4     08 4E 85 F1 | 	sub	fp, #8
350f8     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1193
350fc     00 FA 0D F2 | 	cmp	result1, #0 wz
35100     00 FA 05 A6 |  if_e	mov	result1, #0
35104     90 00 90 AD |  if_e	jmp	#LR__5241
35108     08 4E 05 F1 | 	add	fp, #8
3510c     A7 14 C2 FA | 	rdbyte	arg02, fp
35110     04 4E 05 F1 | 	add	fp, #4
35114     A7 14 42 FC | 	wrbyte	arg02, fp
35118     A7 12 02 F6 | 	mov	arg01, fp
3511c     0C 4E 85 F1 | 	sub	fp, #12
35120     01 14 06 F6 | 	mov	arg02, #1
35124     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35128     08 4E 05 F1 | 	add	fp, #8
3512c     A7 14 C2 FA | 	rdbyte	arg02, fp
35130     08 4E 85 F1 | 	sub	fp, #8
35134     FD 14 0E F2 | 	cmp	arg02, #253 wz
35138     58 00 90 AD |  if_e	jmp	#LR__5240
3513c     04 4E 05 F1 | 	add	fp, #4
35140     A7 12 02 FB | 	rdlong	arg01, fp
35144     04 4E 85 F1 | 	sub	fp, #4
35148     09 14 C6 F9 | 	decod	arg02, #9
3514c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35150     0C 4E 05 F1 | 	add	fp, #12
35154     A7 12 02 F6 | 	mov	arg01, fp
35158     0C 4E 85 F1 | 	sub	fp, #12
3515c     02 14 06 F6 | 	mov	arg02, #2
35160     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35164     0C 4E 05 F1 | 	add	fp, #12
35168     A7 12 02 F6 | 	mov	arg01, fp
3516c     0C 4E 85 F1 | 	sub	fp, #12
35170     01 14 06 F6 | 	mov	arg02, #1
35174     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35178     0C 4E 05 F1 | 	add	fp, #12
3517c     A7 14 C2 FA | 	rdbyte	arg02, fp
35180     0C 4E 85 F1 | 	sub	fp, #12
35184     1F 14 06 F5 | 	and	arg02, #31
35188     05 14 0E F2 | 	cmp	arg02, #5 wz
3518c                 | ' 			return 0;
3518c     00 FA 05 56 |  if_ne	mov	result1, #0
35190     04 00 90 5D |  if_ne	jmp	#LR__5241
35194                 | LR__5240
35194                 | ' 	}
35194                 | ' 
35194                 | ' 	return 1;
35194     01 FA 05 F6 | 	mov	result1, #1
35198                 | LR__5241
35198     A7 F0 03 F6 | 	mov	ptra, fp
3519c     B2 00 A0 FD | 	call	#popregs_
351a0                 | _fatfs_cc_xmit_datablock_1209_ret
351a0     2D 00 64 FD | 	ret
351a4                 | 
351a4                 | _fatfs_cc_send_cmd_1213
351a4     01 4A 05 F6 | 	mov	COUNT_, #1
351a8     A8 00 A0 FD | 	call	#pushregs_
351ac     1C F0 07 F1 | 	add	ptra, #28
351b0                 | _fatfs_cc_send_cmd_1213_enter
351b0     04 4E 05 F1 | 	add	fp, #4
351b4     A7 12 42 FC | 	wrbyte	arg01, fp
351b8     04 4E 05 F1 | 	add	fp, #4
351bc     A7 14 62 FC | 	wrlong	arg02, fp
351c0     04 4E 85 F1 | 	sub	fp, #4
351c4     A7 FA C1 FA | 	rdbyte	result1, fp
351c8     04 4E 85 F1 | 	sub	fp, #4
351cc     80 FA CD F7 | 	test	result1, #128 wz
351d0     44 00 90 AD |  if_e	jmp	#LR__5250
351d4     04 4E 05 F1 | 	add	fp, #4
351d8     A7 14 C2 FA | 	rdbyte	arg02, fp
351dc     7F 14 06 F5 | 	and	arg02, #127
351e0     A7 14 42 FC | 	wrbyte	arg02, fp
351e4     04 4E 85 F1 | 	sub	fp, #4
351e8     37 12 06 F6 | 	mov	arg01, #55
351ec     00 14 06 F6 | 	mov	arg02, #0
351f0     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1213
351f4     0C 4E 05 F1 | 	add	fp, #12
351f8     A7 FA 41 FC | 	wrbyte	result1, fp
351fc     A7 14 C2 FA | 	rdbyte	arg02, fp
35200     0C 4E 85 F1 | 	sub	fp, #12
35204     02 14 16 F2 | 	cmp	arg02, #2 wc
35208     0C 4E 05 31 |  if_ae	add	fp, #12
3520c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
35210     0C 4E 85 31 |  if_ae	sub	fp, #12
35214     6C 01 90 3D |  if_ae	jmp	#LR__5254
35218                 | LR__5250
35218     04 4E 05 F1 | 	add	fp, #4
3521c     A7 14 C2 FA | 	rdbyte	arg02, fp
35220     04 4E 85 F1 | 	sub	fp, #4
35224     0C 14 0E F2 | 	cmp	arg02, #12 wz
35228     14 00 90 AD |  if_e	jmp	#LR__5251
3522c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1199
35230     34 FD BF FD | 	call	#_fatfs_cc_select_1203
35234     00 FA 0D F2 | 	cmp	result1, #0 wz
35238     FF FA 05 A6 |  if_e	mov	result1, #255
3523c     44 01 90 AD |  if_e	jmp	#LR__5254
35240                 | LR__5251
35240     04 4E 05 F1 | 	add	fp, #4
35244     A7 14 C2 FA | 	rdbyte	arg02, fp
35248     40 FA 05 F6 | 	mov	result1, #64
3524c     0A FB 41 F5 | 	or	result1, arg02
35250     10 4E 05 F1 | 	add	fp, #16
35254     A7 FA 41 FC | 	wrbyte	result1, fp
35258     0C 4E 85 F1 | 	sub	fp, #12
3525c     A7 FA 01 FB | 	rdlong	result1, fp
35260     18 FA 45 F0 | 	shr	result1, #24
35264     0D 4E 05 F1 | 	add	fp, #13
35268     A7 FA 41 FC | 	wrbyte	result1, fp
3526c     0D 4E 85 F1 | 	sub	fp, #13
35270     A7 FA 01 FB | 	rdlong	result1, fp
35274     10 FA 45 F0 | 	shr	result1, #16
35278     0E 4E 05 F1 | 	add	fp, #14
3527c     A7 FA 41 FC | 	wrbyte	result1, fp
35280     0E 4E 85 F1 | 	sub	fp, #14
35284     A7 FA 01 FB | 	rdlong	result1, fp
35288     08 FA 45 F0 | 	shr	result1, #8
3528c     0F 4E 05 F1 | 	add	fp, #15
35290     A7 FA 41 FC | 	wrbyte	result1, fp
35294     0F 4E 85 F1 | 	sub	fp, #15
35298     A7 FA 01 FB | 	rdlong	result1, fp
3529c     10 4E 05 F1 | 	add	fp, #16
352a0     A7 FA 41 FC | 	wrbyte	result1, fp
352a4     0C 4E 85 F1 | 	sub	fp, #12
352a8     A7 02 48 FC | 	wrbyte	#1, fp
352ac     08 4E 85 F1 | 	sub	fp, #8
352b0     A7 FA C9 FA | 	rdbyte	result1, fp wz
352b4     04 4E 85 F1 | 	sub	fp, #4
352b8     0C 4E 05 A1 |  if_e	add	fp, #12
352bc     A7 2A 49 AC |  if_e	wrbyte	#149, fp
352c0     0C 4E 85 A1 |  if_e	sub	fp, #12
352c4     04 4E 05 F1 | 	add	fp, #4
352c8     A7 FA C1 FA | 	rdbyte	result1, fp
352cc     04 4E 85 F1 | 	sub	fp, #4
352d0     08 FA 0D F2 | 	cmp	result1, #8 wz
352d4     0C 4E 05 A1 |  if_e	add	fp, #12
352d8     A7 0E 49 AC |  if_e	wrbyte	#135, fp
352dc     0C 4E 85 A1 |  if_e	sub	fp, #12
352e0     0C 4E 05 F1 | 	add	fp, #12
352e4     A7 14 C2 FA | 	rdbyte	arg02, fp
352e8     0D 4E 05 F1 | 	add	fp, #13
352ec     A7 14 42 FC | 	wrbyte	arg02, fp
352f0     05 4E 85 F1 | 	sub	fp, #5
352f4     A7 12 02 F6 | 	mov	arg01, fp
352f8     14 4E 85 F1 | 	sub	fp, #20
352fc     06 14 06 F6 | 	mov	arg02, #6
35300     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1182
35304     04 4E 05 F1 | 	add	fp, #4
35308     A7 26 C2 FA | 	rdbyte	local01, fp
3530c     04 4E 85 F1 | 	sub	fp, #4
35310     0C 26 0E F2 | 	cmp	local01, #12 wz
35314     10 4E 05 A1 |  if_e	add	fp, #16
35318     A7 12 02 A6 |  if_e	mov	arg01, fp
3531c     10 4E 85 A1 |  if_e	sub	fp, #16
35320     01 14 06 A6 |  if_e	mov	arg02, #1
35324     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1189
35328     0C 4E 05 F1 | 	add	fp, #12
3532c     A7 14 48 FC | 	wrbyte	#10, fp
35330     0C 4E 85 F1 | 	sub	fp, #12
35334                 | ' 	n = 10;
35334                 | ' 	do
35334                 | LR__5252
35334     10 4E 05 F1 | 	add	fp, #16
35338     A7 12 02 F6 | 	mov	arg01, fp
3533c     10 4E 85 F1 | 	sub	fp, #16
35340     01 14 06 F6 | 	mov	arg02, #1
35344     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1189
35348     10 4E 05 F1 | 	add	fp, #16
3534c     A7 26 C2 FA | 	rdbyte	local01, fp
35350     10 4E 85 F1 | 	sub	fp, #16
35354     80 26 CE F7 | 	test	local01, #128 wz
35358     1C 00 90 AD |  if_e	jmp	#LR__5253
3535c     0C 4E 05 F1 | 	add	fp, #12
35360     A7 26 C2 FA | 	rdbyte	local01, fp
35364     01 26 86 F1 | 	sub	local01, #1
35368     A7 26 42 FC | 	wrbyte	local01, fp
3536c     A7 26 CA FA | 	rdbyte	local01, fp wz
35370     0C 4E 85 F1 | 	sub	fp, #12
35374     BC FF 9F 5D |  if_ne	jmp	#LR__5252
35378                 | LR__5253
35378                 | ' 
35378                 | ' 	return d;
35378     10 4E 05 F1 | 	add	fp, #16
3537c     A7 FA C1 FA | 	rdbyte	result1, fp
35380     10 4E 85 F1 | 	sub	fp, #16
35384                 | LR__5254
35384     A7 F0 03 F6 | 	mov	ptra, fp
35388     B2 00 A0 FD | 	call	#popregs_
3538c                 | _fatfs_cc_send_cmd_1213_ret
3538c     2D 00 64 FD | 	ret
35390                 | 
35390                 | _fatfs_cc_disk_deinitialize
35390     03 4A 05 F6 | 	mov	COUNT_, #3
35394     A8 00 A0 FD | 	call	#pushregs_
35398     00 12 4E F2 | 	cmps	arg01, #0 wz
3539c     01 00 00 FF 
353a0     14 E4 05 F1 | 	add	objptr, ##532
353a4     F2 12 02 FB | 	rdlong	arg01, objptr
353a8     04 E4 85 F1 | 	sub	objptr, #4
353ac     F2 26 02 FB | 	rdlong	local01, objptr
353b0     08 E4 05 F1 | 	add	objptr, #8
353b4     F2 28 02 FB | 	rdlong	local02, objptr
353b8     04 E4 05 F1 | 	add	objptr, #4
353bc     F2 2A 02 FB | 	rdlong	local03, objptr
353c0     01 00 00 FF 
353c4     1C E4 85 F1 | 	sub	objptr, ##540
353c8                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
353c8                 | '         return RES_NOTRDY;
353c8     03 FA 05 56 |  if_ne	mov	result1, #3
353cc     2C 00 90 5D |  if_ne	jmp	#LR__5260
353d0     50 12 62 FD | 	fltl	arg01
353d4     09 01 08 FC | 	wrpin	#0, arg01
353d8     50 26 62 FD | 	fltl	local01
353dc     13 01 08 FC | 	wrpin	#0, local01
353e0     50 28 62 FD | 	fltl	local02
353e4     14 01 08 FC | 	wrpin	#0, local02
353e8     50 2A 62 FD | 	fltl	local03
353ec     15 01 08 FC | 	wrpin	#0, local03
353f0     0A 12 06 F6 | 	mov	arg01, #10
353f4     3C 0E BF FD | 	call	#__system___waitms
353f8                 | '     }
353f8                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
353f8                 | '     _pinclear(PIN_SS);
353f8                 | '     _pinclear(PIN_CLK);
353f8                 | '     _pinclear(PIN_DI);
353f8                 | '     _pinclear(PIN_DO);
353f8                 | ' 
353f8                 | '     _waitms(10);
353f8                 | ' 
353f8                 | '     return 0;
353f8     00 FA 05 F6 | 	mov	result1, #0
353fc                 | LR__5260
353fc     A7 F0 03 F6 | 	mov	ptra, fp
35400     B2 00 A0 FD | 	call	#popregs_
35404                 | _fatfs_cc_disk_deinitialize_ret
35404     2D 00 64 FD | 	ret
35408                 | 
35408                 | _fatfs_cc_gettimeofday
35408     04 4A 05 F6 | 	mov	COUNT_, #4
3540c     A8 00 A0 FD | 	call	#pushregs_
35410     09 27 02 F6 | 	mov	local01, arg01
35414     F8 09 BF FD | 	call	#__system___getus
35418     FD 12 02 F6 | 	mov	arg01, result1
3541c     02 00 00 FF 
35420     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
35424     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35428     09 FB 01 F6 | 	mov	result1, arg01
3542c     14 FB 81 F1 | 	sub	result1, local02
35430     A1 07 00 FF 
35434     40 FA 15 FD | 	qdiv	result1, ##1000000
35438     02 00 00 FF 
3543c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35440     18 28 62 FD | 	getqx	local02
35444     A1 07 00 FF 
35448     40 FA 15 FD | 	qdiv	result1, ##1000000
3544c     00 28 0E F2 | 	cmp	local02, #0 wz
35450     19 2A 62 FD | 	getqy	local03
35454     28 00 90 AD |  if_e	jmp	#LR__5270
35458     02 00 00 FF 
3545c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35460     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35464     14 2D 02 F1 | 	add	local04, local02
35468     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
3546c     15 13 82 F1 | 	sub	arg01, local03
35470     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35474     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35478     02 00 00 FF 
3547c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35480                 | LR__5270
35480     02 00 00 FF 
35484     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35488     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3548c     02 00 00 FF 
35490     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35494     13 2D 62 FC | 	wrlong	local04, local01
35498     04 26 06 F1 | 	add	local01, #4
3549c     13 2B 62 FC | 	wrlong	local03, local01
354a0                 | '         lastsec += secs;
354a0                 | '         lastus = now - leftover;
354a0                 | '     }
354a0                 | '     tv->tv_sec = lastsec;
354a0                 | '     tv->tv_usec = leftover;
354a0                 | '     return 0;
354a0     00 FA 05 F6 | 	mov	result1, #0
354a4     A7 F0 03 F6 | 	mov	ptra, fp
354a8     B2 00 A0 FD | 	call	#popregs_
354ac                 | _fatfs_cc_gettimeofday_ret
354ac     2D 00 64 FD | 	ret
354b0                 | 
354b0                 | _fatfs_cc__is_leap_year
354b0     09 FB 51 F6 | 	abs	result1, arg01 wc
354b4     03 FA 05 F5 | 	and	result1, #3
354b8     FD FA 89 F6 | 	negc	result1, result1 wz
354bc     38 00 90 5D |  if_ne	jmp	#LR__5281
354c0     09 FB 51 F6 | 	abs	result1, arg01 wc
354c4     64 FA 15 FD | 	qdiv	result1, #100
354c8     19 FA 61 FD | 	getqy	result1
354cc     FD FA 89 F6 | 	negc	result1, result1 wz
354d0     1C 00 90 5D |  if_ne	jmp	#LR__5280
354d4     09 FB 51 F6 | 	abs	result1, arg01 wc
354d8     90 FB 15 FD | 	qdiv	result1, #400
354dc                 | '       return (0 == y % 400);
354dc     00 FA 05 F6 | 	mov	result1, #0
354e0     19 00 62 FD | 	getqy	_var01
354e4     00 01 8A F6 | 	negc	_var01, _var01 wz
354e8     01 FA 05 A6 |  if_e	mov	result1, #1
354ec     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
354f0                 | LR__5280
354f0                 | '     return 1;
354f0     01 FA 05 F6 | 	mov	result1, #1
354f4     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
354f8                 | LR__5281
354f8                 | '   }
354f8                 | '   return 0;
354f8     00 FA 05 F6 | 	mov	result1, #0
354fc                 | _fatfs_cc__is_leap_year_ret
354fc     2D 00 64 FD | 	ret
35500                 | 
35500                 | _fatfs_cc___tzoffset
35500     09 01 0A F6 | 	mov	_var01, arg01 wz
35504     FF FF FF FF 
35508     0A FF 6B FC | 	wrlong	##-1, arg02
3550c     01 02 06 F6 | 	mov	_var02, #1
35510     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35514                 | '                 return 0;
35514     00 FA 05 A6 |  if_e	mov	result1, #0
35518     94 02 90 AD |  if_e	jmp	#LR__5307
3551c     0A 01 68 FC | 	wrlong	#0, arg02
35520     02 00 00 FF 
35524     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35528     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3552c                 | ' 
3552c                 | '        *hasdst = 0;
3552c                 | ' 
3552c                 | ' 	n = stdname;
3552c                 | '         while (*s && isalpha(*s)) {
3552c     02 00 00 FF 
35530     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35534     97 28 48 FB | 	callpa	#(@LR__5291-@LR__5290)>>2,fcache_load_ptr_
35538                 | LR__5290
35538     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3553c     48 00 90 AD |  if_e	jmp	#LR__5292
35540     00 13 C2 FA | 	rdbyte	arg01, _var01
35544                 | ' {
35544                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35544     80 12 36 F3 | 	fle	arg01, #128 wc
35548                 | '     return __ctype[c];
35548     02 00 00 FF 
3554c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35550     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35554     09 FB C1 FA | 	rdbyte	result1, arg01
35558     02 00 00 FF 
3555c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35560     0C FA CD F7 | 	test	result1, #12 wz
35564     20 00 90 AD |  if_e	jmp	#LR__5292
35568     00 09 02 F6 | 	mov	_var05, _var01
3556c     00 0B 02 F6 | 	mov	_var06, _var01
35570     01 0A 06 F1 | 	add	_var06, #1
35574     04 0D C2 FA | 	rdbyte	_var07, _var05
35578     05 01 02 F6 | 	mov	_var01, _var06
3557c     03 0D 42 FC | 	wrbyte	_var07, _var04
35580     01 06 06 F1 | 	add	_var04, #1
35584     B0 FF 9F FD | 	jmp	#LR__5290
35588                 | LR__5291
35588                 | LR__5292
35588     03 01 48 FC | 	wrbyte	#0, _var04
3558c     00 0E 06 F6 | 	mov	_var08, #0
35590     00 05 C2 FA | 	rdbyte	_var03, _var01
35594     2D 04 0E F2 | 	cmp	_var03, #45 wz
35598     01 02 66 A6 |  if_e	neg	_var02, #1
3559c     01 00 06 A1 |  if_e	add	_var01, #1
355a0     97 28 48 FB | 	callpa	#(@LR__5294-@LR__5293)>>2,fcache_load_ptr_
355a4                 | '                 sgn = -1;
355a4                 | '                 s++;
355a4                 | '         }
355a4                 | '         while (isdigit(*s)) {
355a4                 | LR__5293
355a4     00 13 C2 FA | 	rdbyte	arg01, _var01
355a8                 | ' {
355a8                 | '   return  (__ctype_get(c) & 0x02 ) ;
355a8     80 12 36 F3 | 	fle	arg01, #128 wc
355ac                 | '     return __ctype[c];
355ac     02 00 00 FF 
355b0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
355b4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
355b8     09 FB C1 FA | 	rdbyte	result1, arg01
355bc     02 00 00 FF 
355c0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
355c4     02 FA CD F7 | 	test	result1, #2 wz
355c8     28 00 90 AD |  if_e	jmp	#LR__5295
355cc     07 05 02 F6 | 	mov	_var03, _var08
355d0     02 04 66 F0 | 	shl	_var03, #2
355d4     07 05 02 F1 | 	add	_var03, _var08
355d8     01 04 66 F0 | 	shl	_var03, #1
355dc     00 09 C2 FA | 	rdbyte	_var05, _var01
355e0     30 08 86 F1 | 	sub	_var05, #48
355e4     04 05 02 F1 | 	add	_var03, _var05
355e8     02 0F 02 F6 | 	mov	_var08, _var03
355ec     01 00 06 F1 | 	add	_var01, #1
355f0     B0 FF 9F FD | 	jmp	#LR__5293
355f4                 | LR__5294
355f4                 | LR__5295
355f4     07 00 00 FF 
355f8     10 0E 06 FD | 	qmul	_var08, ##3600
355fc     00 05 C2 FA | 	rdbyte	_var03, _var01
35600     3A 04 0E F2 | 	cmp	_var03, #58 wz
35604     18 10 62 FD | 	getqx	_var09
35608     70 00 90 5D |  if_ne	jmp	#LR__5299
3560c     00 0E 06 F6 | 	mov	_var08, #0
35610     01 00 06 F1 | 	add	_var01, #1
35614     97 28 48 FB | 	callpa	#(@LR__5297-@LR__5296)>>2,fcache_load_ptr_
35618                 | '                 x = 0;
35618                 | '                 s++;
35618                 | '                 while (isdigit(*s)) {
35618                 | LR__5296
35618     00 13 C2 FA | 	rdbyte	arg01, _var01
3561c                 | ' {
3561c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3561c     80 12 36 F3 | 	fle	arg01, #128 wc
35620                 | '     return __ctype[c];
35620     02 00 00 FF 
35624     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35628     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3562c     09 FB C1 FA | 	rdbyte	result1, arg01
35630     02 00 00 FF 
35634     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35638     02 FA CD F7 | 	test	result1, #2 wz
3563c     28 00 90 AD |  if_e	jmp	#LR__5298
35640     07 05 02 F6 | 	mov	_var03, _var08
35644     02 04 66 F0 | 	shl	_var03, #2
35648     07 05 02 F1 | 	add	_var03, _var08
3564c     01 04 66 F0 | 	shl	_var03, #1
35650     00 09 C2 FA | 	rdbyte	_var05, _var01
35654     30 08 86 F1 | 	sub	_var05, #48
35658     04 05 02 F1 | 	add	_var03, _var05
3565c     02 0F 02 F6 | 	mov	_var08, _var03
35660     01 00 06 F1 | 	add	_var01, #1
35664     B0 FF 9F FD | 	jmp	#LR__5296
35668                 | LR__5297
35668                 | LR__5298
35668     07 0D 02 F6 | 	mov	_var07, _var08
3566c     04 0C 66 F0 | 	shl	_var07, #4
35670     07 0D 82 F1 | 	sub	_var07, _var08
35674     02 0C 66 F0 | 	shl	_var07, #2
35678     06 11 02 F1 | 	add	_var09, _var07
3567c                 | LR__5299
3567c     02 00 00 FF 
35680     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35684     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35688     00 13 C2 FA | 	rdbyte	arg01, _var01
3568c                 | ' {
3568c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
3568c     80 12 36 F3 | 	fle	arg01, #128 wc
35690                 | '     return __ctype[c];
35690     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
35694     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35698     09 FB C1 FA | 	rdbyte	result1, arg01
3569c     02 00 00 FF 
356a0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
356a4     0C FA CD F7 | 	test	result1, #12 wz
356a8     50 00 90 AD |  if_e	jmp	#LR__5302
356ac     0A 03 68 FC | 	wrlong	#1, arg02
356b0                 | '                 *hasdst = 1;
356b0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
356b0                 | LR__5300
356b0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
356b4     44 00 90 AD |  if_e	jmp	#LR__5301
356b8     00 13 C2 FA | 	rdbyte	arg01, _var01
356bc                 | ' {
356bc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
356bc     80 12 36 F3 | 	fle	arg01, #128 wc
356c0                 | '     return __ctype[c];
356c0     02 00 00 FF 
356c4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
356c8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
356cc     09 FB C1 FA | 	rdbyte	result1, arg01
356d0     02 00 00 FF 
356d4     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
356d8     0C FA CD F7 | 	test	result1, #12 wz
356dc     1C 00 90 AD |  if_e	jmp	#LR__5301
356e0     00 0B 02 F6 | 	mov	_var06, _var01
356e4     01 0A 06 F1 | 	add	_var06, #1
356e8     00 0D C2 FA | 	rdbyte	_var07, _var01
356ec     05 01 02 F6 | 	mov	_var01, _var06
356f0     03 0D 42 FC | 	wrbyte	_var07, _var04
356f4     01 06 06 F1 | 	add	_var04, #1
356f8     B4 FF 9F FD | 	jmp	#LR__5300
356fc                 | LR__5301
356fc                 | LR__5302
356fc     03 01 48 FC | 	wrbyte	#0, _var04
35700     02 00 00 FF 
35704     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35708     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
3570c     02 00 00 FF 
35710     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35714     20 00 90 AD |  if_e	jmp	#LR__5303
35718     02 00 00 FF 
3571c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35720     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35724     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
35728     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3572c     02 00 00 FF 
35730     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35734     1C 00 90 FD | 	jmp	#LR__5304
35738                 | LR__5303
35738     02 00 00 FF 
3573c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
35740     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35744     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
35748     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
3574c     02 00 00 FF 
35750     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
35754                 | LR__5304
35754     02 00 00 FF 
35758     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3575c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
35760     02 00 00 FF 
35764     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
35768     20 00 90 AD |  if_e	jmp	#LR__5305
3576c     02 00 00 FF 
35770     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
35774     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35778     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
3577c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
35780     02 00 00 FF 
35784     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
35788     1C 00 90 FD | 	jmp	#LR__5306
3578c                 | LR__5305
3578c     02 00 00 FF 
35790     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35794     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
35798     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
3579c     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
357a0     02 00 00 FF 
357a4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
357a8                 | LR__5306
357a8     08 03 02 FD | 	qmul	_var02, _var09
357ac                 | ' 		_tzname[1] = stdname;
357ac                 | ' 
357ac                 | '         return sgn * off;
357ac     18 FA 61 FD | 	getqx	result1
357b0                 | LR__5307
357b0                 | _fatfs_cc___tzoffset_ret
357b0     2D 00 64 FD | 	ret
357b4                 | 
357b4                 | _fatfs_cc___indst
357b4     10 12 06 F1 | 	add	arg01, #16
357b8     09 01 02 FB | 	rdlong	_var01, arg01
357bc     10 12 86 F1 | 	sub	arg01, #16
357c0     02 00 0E F2 | 	cmp	_var01, #2 wz
357c4     30 00 90 5D |  if_ne	jmp	#LR__5310
357c8     07 00 06 F6 | 	mov	_var01, #7
357cc     18 12 06 F1 | 	add	arg01, #24
357d0     09 03 02 FB | 	rdlong	_var02, arg01
357d4     01 01 02 F1 | 	add	_var01, _var02
357d8     0C 12 86 F1 | 	sub	arg01, #12
357dc     09 05 02 FB | 	rdlong	_var03, arg01
357e0     02 01 82 F1 | 	sub	_var01, _var03
357e4     00 00 56 F2 | 	cmps	_var01, #0 wc
357e8                 | '                         return 1;
357e8     01 FA 05 C6 |  if_b	mov	result1, #1
357ec     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
357f0                 | '                 return 0;
357f0     00 FA 05 F6 | 	mov	result1, #0
357f4     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
357f8                 | LR__5310
357f8     10 12 06 F1 | 	add	arg01, #16
357fc     09 01 02 FB | 	rdlong	_var01, arg01
35800     10 12 86 F1 | 	sub	arg01, #16
35804     0A 00 0E F2 | 	cmp	_var01, #10 wz
35808     28 00 90 5D |  if_ne	jmp	#LR__5311
3580c     18 12 06 F1 | 	add	arg01, #24
35810     09 01 02 FB | 	rdlong	_var01, arg01
35814     0C 12 86 F1 | 	sub	arg01, #12
35818     09 07 02 FB | 	rdlong	_var04, arg01
3581c     03 01 82 F1 | 	sub	_var01, _var04
35820     00 00 56 F2 | 	cmps	_var01, #0 wc
35824                 | '                         return 0;
35824     00 FA 05 C6 |  if_b	mov	result1, #0
35828     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
3582c                 | '                 return 1;
3582c     01 FA 05 F6 | 	mov	result1, #1
35830     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
35834                 | LR__5311
35834                 | '         }
35834                 | ' 
35834                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
35834     00 00 06 F6 | 	mov	_var01, #0
35838     10 12 06 F1 | 	add	arg01, #16
3583c     09 03 02 FB | 	rdlong	_var02, arg01
35840     10 12 86 F1 | 	sub	arg01, #16
35844     03 02 56 F2 | 	cmps	_var02, #3 wc
35848     10 00 90 CD |  if_b	jmp	#LR__5312
3584c     10 12 06 F1 | 	add	arg01, #16
35850     09 05 02 FB | 	rdlong	_var03, arg01
35854     0A 04 56 F2 | 	cmps	_var03, #10 wc
35858     01 00 06 C6 |  if_b	mov	_var01, #1
3585c                 | LR__5312
3585c     00 FB 01 F6 | 	mov	result1, _var01
35860                 | _fatfs_cc___indst_ret
35860     2D 00 64 FD | 	ret
35864                 | 
35864                 | ' 	
35864                 | ' 	FUNCTION pfunc(c as integer) as integer
35864                 | ___strs_cl_pfunc
35864                 | ' 		if (i < 16) then
35864     04 E4 05 F1 | 	add	objptr, #4
35868     F2 FA 01 FB | 	rdlong	result1, objptr
3586c     04 E4 85 F1 | 	sub	objptr, #4
35870     10 FA 55 F2 | 	cmps	result1, #16 wc
35874     2C 00 90 3D |  if_ae	jmp	#LR__5320
35878     F2 FA 01 FB | 	rdlong	result1, objptr
3587c     04 E4 05 F1 | 	add	objptr, #4
35880     F2 00 02 FB | 	rdlong	_var01, objptr
35884     FD 00 02 F1 | 	add	_var01, result1
35888     00 13 42 FC | 	wrbyte	arg01, _var01
3588c     F2 FA 01 FB | 	rdlong	result1, objptr
35890     01 FA 05 F1 | 	add	result1, #1
35894     F2 FA 61 FC | 	wrlong	result1, objptr
35898     04 E4 85 F1 | 	sub	objptr, #4
3589c                 | ' 			p(i) = c
3589c                 | ' 			i = i+1
3589c                 | ' 			return 1
3589c     01 FA 05 F6 | 	mov	result1, #1
358a0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
358a4                 | LR__5320
358a4                 | ' 			return -1
358a4     01 FA 65 F6 | 	neg	result1, #1
358a8                 | ___strs_cl_pfunc_ret
358a8     2D 00 64 FD | 	ret
358ac                 | 
358ac                 | __struct__s_vfs_file_t_putchar
358ac     04 4A 05 F6 | 	mov	COUNT_, #4
358b0     A8 00 A0 FD | 	call	#pushregs_
358b4     1C E4 05 F1 | 	add	objptr, #28
358b8     F2 26 0A FB | 	rdlong	local01, objptr wz
358bc     1C E4 85 F1 | 	sub	objptr, #28
358c0     00 FA 05 A6 |  if_e	mov	result1, #0
358c4     48 00 90 AD |  if_e	jmp	#LR__5330
358c8     1C E4 05 F1 | 	add	objptr, #28
358cc     F2 28 02 FB | 	rdlong	local02, objptr
358d0     14 2B 02 F6 | 	mov	local03, local02
358d4     1C E4 85 F1 | 	sub	objptr, #28
358d8     13 2A 46 F7 | 	zerox	local03, #19
358dc     14 28 46 F0 | 	shr	local02, #20
358e0     02 28 66 F0 | 	shl	local02, #2
358e4     ED 28 02 F1 | 	add	local02, __methods__
358e8     14 29 02 FB | 	rdlong	local02, local02
358ec     F2 14 02 F6 | 	mov	arg02, objptr
358f0     F2 2C 02 F6 | 	mov	local04, objptr
358f4     15 E5 01 F6 | 	mov	objptr, local03
358f8     2D 28 62 FD | 	call	local02
358fc     16 E5 01 F6 | 	mov	objptr, local04
35900                 | '     return (i < 0) ? 0 : 1;
35900     00 FA 55 F2 | 	cmps	result1, #0 wc
35904     00 26 06 C6 |  if_b	mov	local01, #0
35908     01 26 06 36 |  if_ae	mov	local01, #1
3590c     13 FB 01 F6 | 	mov	result1, local01
35910                 | LR__5330
35910     A7 F0 03 F6 | 	mov	ptra, fp
35914     B2 00 A0 FD | 	call	#popregs_
35918                 | __struct__s_vfs_file_t_putchar_ret
35918     2D 00 64 FD | 	ret
3591c                 | 
3591c                 | __struct__s_vfs_file_t_getchar
3591c     03 4A 05 F6 | 	mov	COUNT_, #3
35920     A8 00 A0 FD | 	call	#pushregs_
35924     20 E4 05 F1 | 	add	objptr, #32
35928     F2 12 0A FB | 	rdlong	arg01, objptr wz
3592c     20 E4 85 F1 | 	sub	objptr, #32
35930     01 FA 65 A6 |  if_e	neg	result1, #1
35934     38 00 90 AD |  if_e	jmp	#LR__5340
35938                 | '     return getcf(__this);
35938     20 E4 05 F1 | 	add	objptr, #32
3593c     F2 26 02 FB | 	rdlong	local01, objptr
35940     13 29 02 F6 | 	mov	local02, local01
35944     20 E4 85 F1 | 	sub	objptr, #32
35948     13 28 46 F7 | 	zerox	local02, #19
3594c     14 26 46 F0 | 	shr	local01, #20
35950     02 26 66 F0 | 	shl	local01, #2
35954     ED 26 02 F1 | 	add	local01, __methods__
35958     13 27 02 FB | 	rdlong	local01, local01
3595c     F2 12 02 F6 | 	mov	arg01, objptr
35960     F2 2A 02 F6 | 	mov	local03, objptr
35964     14 E5 01 F6 | 	mov	objptr, local02
35968     2D 26 62 FD | 	call	local01
3596c     15 E5 01 F6 | 	mov	objptr, local03
35970                 | LR__5340
35970     A7 F0 03 F6 | 	mov	ptra, fp
35974     B2 00 A0 FD | 	call	#popregs_
35978                 | __struct__s_vfs_file_t_getchar_ret
35978     2D 00 64 FD | 	ret
3597c                 | 
3597c                 | __struct___bas_wrap_sender_tx
3597c     03 4A 05 F6 | 	mov	COUNT_, #3
35980     A8 00 A0 FD | 	call	#pushregs_
35984     F2 26 02 FB | 	rdlong	local01, objptr
35988     13 29 02 F6 | 	mov	local02, local01
3598c     13 26 46 F7 | 	zerox	local01, #19
35990     14 28 46 F0 | 	shr	local02, #20
35994     02 28 66 F0 | 	shl	local02, #2
35998     ED 28 02 F1 | 	add	local02, __methods__
3599c     14 29 02 FB | 	rdlong	local02, local02
359a0     F2 2A 02 F6 | 	mov	local03, objptr
359a4     13 E5 01 F6 | 	mov	objptr, local01
359a8     2D 28 62 FD | 	call	local02
359ac     15 E5 01 F6 | 	mov	objptr, local03
359b0     01 FA 05 F6 | 	mov	result1, #1
359b4     A7 F0 03 F6 | 	mov	ptra, fp
359b8     B2 00 A0 FD | 	call	#popregs_
359bc                 | __struct___bas_wrap_sender_tx_ret
359bc     2D 00 64 FD | 	ret
359c0                 | 
359c0                 | __struct___bas_wrap_sender_rx
359c0     03 4A 05 F6 | 	mov	COUNT_, #3
359c4     A8 00 A0 FD | 	call	#pushregs_
359c8     04 E4 05 F1 | 	add	objptr, #4
359cc     F2 26 02 FB | 	rdlong	local01, objptr
359d0     13 29 02 F6 | 	mov	local02, local01
359d4     04 E4 85 F1 | 	sub	objptr, #4
359d8     13 28 46 F7 | 	zerox	local02, #19
359dc     14 26 46 F0 | 	shr	local01, #20
359e0     02 26 66 F0 | 	shl	local01, #2
359e4     ED 26 02 F1 | 	add	local01, __methods__
359e8     13 27 02 FB | 	rdlong	local01, local01
359ec     F2 2A 02 F6 | 	mov	local03, objptr
359f0     14 E5 01 F6 | 	mov	objptr, local02
359f4     2D 26 62 FD | 	call	local01
359f8     15 E5 01 F6 | 	mov	objptr, local03
359fc     A7 F0 03 F6 | 	mov	ptra, fp
35a00     B2 00 A0 FD | 	call	#popregs_
35a04                 | __struct___bas_wrap_sender_rx_ret
35a04     2D 00 64 FD | 	ret
35a08                 | 
35a08                 | __struct___bas_wrap_sender_close
35a08     03 4A 05 F6 | 	mov	COUNT_, #3
35a0c     A8 00 A0 FD | 	call	#pushregs_
35a10     08 E4 05 F1 | 	add	objptr, #8
35a14     F2 26 02 FB | 	rdlong	local01, objptr
35a18     13 29 02 F6 | 	mov	local02, local01
35a1c     08 E4 85 F1 | 	sub	objptr, #8
35a20     13 28 46 F7 | 	zerox	local02, #19
35a24     14 26 46 F0 | 	shr	local01, #20
35a28     02 26 66 F0 | 	shl	local01, #2
35a2c     ED 26 02 F1 | 	add	local01, __methods__
35a30     13 27 02 FB | 	rdlong	local01, local01
35a34     F2 2A 02 F6 | 	mov	local03, objptr
35a38     14 E5 01 F6 | 	mov	objptr, local02
35a3c     2D 26 62 FD | 	call	local01
35a40     15 E5 01 F6 | 	mov	objptr, local03
35a44     A7 F0 03 F6 | 	mov	ptra, fp
35a48     B2 00 A0 FD | 	call	#popregs_
35a4c                 | __struct___bas_wrap_sender_close_ret
35a4c     2D 00 64 FD | 	ret
35a50                 | 
35a50                 | LR__5350
35a50     2F          | 	byte	"/"
35a51     00          | 	byte	0
35a52                 | LR__5351
35a52     69 6E 66    | 	byte	"inf"
35a55     00          | 	byte	0
35a56                 | LR__5352
35a56     6E 61 6E    | 	byte	"nan"
35a59     00          | 	byte	0
35a5a                 | LR__5353
35a5a                 | 	byte	
35a5a     00          | 	byte	0
35a5b                 | LR__5354
35a5b                 | 	byte	
35a5b     00          | 	byte	0
35a5c                 | LR__5355
35a5c                 | 	byte	
35a5c     00          | 	byte	0
35a5d                 | LR__5356
35a5d                 | 	byte	
35a5d     00          | 	byte	0
35a5e                 | LR__5357
35a5e                 | 	byte	
35a5e     00          | 	byte	0
35a5f                 | LR__5358
35a5f                 | 	byte	
35a5f     00          | 	byte	0
35a60                 | LR__5359
35a60                 | 	byte	
35a60     00          | 	byte	0
35a61                 | LR__5360
35a61                 | 	byte	
35a61     00          | 	byte	0
35a62                 | LR__5361
35a62     00          | 	byte	0
35a63     00          | 	byte	0
35a64                 | LR__5362
35a64     00          | 	byte	0
35a65     00          | 	byte	0
35a66                 | LR__5363
35a66     00          | 	byte	0
35a67     00          | 	byte	0
35a68                 | LR__5364
35a68     20 21 21 21 
35a6c     20 63 6F 72 
35a70     72 75 70 74 
35a74     65 64 20 68 
35a78     65 61 70 3F 
35a7c     3F 3F 20 21 
35a80     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
35a83     00          | 	byte	0
35a84                 | LR__5365
35a84     20 21 21 21 
35a88     20 6F 75 74 
35a8c     20 6F 66 20 
35a90     68 65 61 70 
35a94     20 6D 65 6D 
35a98     6F 72 79 20 
35a9c     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
35aa0     00          | 	byte	0
35aa1                 | LR__5366
35aa1     20 21 21 21 
35aa5     20 63 6F 72 
35aa9     72 75 70 74 
35aad     65 64 20 68 
35ab1     65 61 70 20 
35ab5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
35ab9     00          | 	byte	0
35aba                 | LR__5367
35aba     00          | 	byte	0
35abb     00          | 	byte	0
35abc                 | LR__5368
35abc     2E          | 	byte	"."
35abd     00          | 	byte	0
35abe                 | LR__5369
35abe     00          | 	byte	0
35abf     00          | 	byte	0
35ac0                 | LR__5370
35ac0     00          | 	byte	0
35ac1     00          | 	byte	0
35ac2                 | LR__5371
35ac2     00          | 	byte	0
35ac3     00          | 	byte	0
35ac4                 | LR__5372
35ac4     2A 3A 3C 3E 
35ac8     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
35acc     00          | 	byte	0
35acd                 | LR__5373
35acd     2B 2C 3B 3D 
35ad1     5B 5D       | 	byte	"+,;=[]"
35ad3     00          | 	byte	0
35ad4                 | LR__5374
35ad4     46 41 54 33 
35ad8     32 20 20 20 | 	byte	"FAT32   "
35adc     00          | 	byte	0
35add                 | LR__5375
35add     54 5A       | 	byte	"TZ"
35adf     00          | 	byte	0
35ae0                 | LR__5376
35ae0     00          | 	byte	0
35ae1     00          | 	byte	0
35ae2                 | LR__5377
35ae2                 | 	byte	
35ae2     00          | 	byte	0
35ae3                 | LR__5378
35ae3                 | 	byte	
35ae3     00          | 	byte	0
35ae4                 | LR__5379
35ae4                 | 	byte	
35ae4     00          | 	byte	0
35ae5                 | LR__5380
35ae5                 | 	byte	
35ae5     00          | 	byte	0
35ae6                 | LR__5381
35ae6     22          | 	byte	34
35ae7     00          | 	byte	0
35ae8                 | LR__5382
35ae8     22          | 	byte	34
35ae9     00          | 	byte	0
35aea                 | LR__5383
35aea     3A          | 	byte	":"
35aeb     00          | 	byte	0
35aec                 | LR__5384
35aec                 | 	byte	
35aec     00          | 	byte	0
35aed                 | LR__5385
35aed                 | 	byte	
35aed     00          | 	byte	0
35aee                 | LR__5386
35aee                 | 	byte	
35aee     00          | 	byte	0
35aef                 | LR__5387
35aef                 | 	byte	
35aef     00          | 	byte	0
35af0                 | LR__5388
35af0                 | 	byte	
35af0     00          | 	byte	0
35af1                 | LR__5389
35af1                 | 	byte	
35af1     00          | 	byte	0
35af2                 | LR__5390
35af2                 | 	byte	
35af2     00          | 	byte	0
35af3                 | LR__5391
35af3     30          | 	byte	"0"
35af4     00          | 	byte	0
35af5                 | LR__5392
35af5     22          | 	byte	34
35af6     00          | 	byte	0
35af7                 | LR__5393
35af7     22          | 	byte	34
35af8     00          | 	byte	0
35af9                 | LR__5394
35af9     22          | 	byte	34
35afa     00          | 	byte	0
35afb                 | LR__5395
35afb     22          | 	byte	34
35afc     00          | 	byte	0
35afd                 | LR__5396
35afd     22          | 	byte	34
35afe     00          | 	byte	0
35aff                 | LR__5397
35aff     3E          | 	byte	">"
35b00     00          | 	byte	0
35b01                 | LR__5398
35b01     3C          | 	byte	"<"
35b02     00          | 	byte	0
35b03                 | LR__5399
35b03     2B          | 	byte	"+"
35b04     00          | 	byte	0
35b05                 | LR__5400
35b05     2D          | 	byte	"-"
35b06     00          | 	byte	0
35b07                 | LR__5401
35b07     2A          | 	byte	"*"
35b08     00          | 	byte	0
35b09                 | LR__5402
35b09     2F          | 	byte	"/"
35b0a     00          | 	byte	0
35b0b                 | LR__5403
35b0b     5E          | 	byte	"^"
35b0c     00          | 	byte	0
35b0d                 | LR__5404
35b0d     3D          | 	byte	"="
35b0e     00          | 	byte	0
35b0f                 | LR__5405
35b0f     2B          | 	byte	"+"
35b10     00          | 	byte	0
35b11                 | LR__5406
35b11     2B          | 	byte	"+"
35b12     00          | 	byte	0
35b13                 | LR__5407
35b13     2D          | 	byte	"-"
35b14     00          | 	byte	0
35b15                 | LR__5408
35b15     2D          | 	byte	"-"
35b16     00          | 	byte	0
35b17                 | LR__5409
35b17     3C          | 	byte	"<"
35b18     00          | 	byte	0
35b19                 | LR__5410
35b19     3E          | 	byte	">"
35b1a     00          | 	byte	0
35b1b                 | LR__5411
35b1b     22          | 	byte	34
35b1c     00          | 	byte	0
35b1d                 | LR__5412
35b1d     22          | 	byte	34
35b1e     00          | 	byte	0
35b1f                 | LR__5413
35b1f     65 6C 73 65 | 	byte	"else"
35b23     00          | 	byte	0
35b24                 | LR__5414
35b24     74 68 65 6E | 	byte	"then"
35b28     00          | 	byte	0
35b29                 | LR__5415
35b29     3F          | 	byte	"?"
35b2a     00          | 	byte	0
35b2b                 | LR__5416
35b2b     3F          | 	byte	"?"
35b2c     00          | 	byte	0
35b2d                 | LR__5417
35b2d     2E          | 	byte	"."
35b2e     00          | 	byte	0
35b2f                 | LR__5418
35b2f     6D 6F 75 73 
35b33     65          | 	byte	"mouse"
35b34     00          | 	byte	0
35b35                 | LR__5419
35b35     63 75 72 73 
35b39     6F 72       | 	byte	"cursor"
35b3b     00          | 	byte	0
35b3c                 | LR__5420
35b3c     63 6C 69 63 
35b40     6B          | 	byte	"click"
35b41     00          | 	byte	0
35b42                 | LR__5421
35b42     6F 6E       | 	byte	"on"
35b44     00          | 	byte	0
35b45                 | LR__5422
35b45     31          | 	byte	"1"
35b46     00          | 	byte	0
35b47                 | LR__5423
35b47     6F 66 66    | 	byte	"off"
35b4a     00          | 	byte	0
35b4b                 | LR__5424
35b4b     30          | 	byte	"0"
35b4c     00          | 	byte	0
35b4d                 | LR__5425
35b4d     6D 6F 64 65 | 	byte	"mode"
35b51     00          | 	byte	0
35b52                 | LR__5426
35b52     6D 2E       | 	byte	"m."
35b54     00          | 	byte	0
35b55                 | LR__5427
35b55     61 74 61 72 
35b59     69          | 	byte	"atari"
35b5a     00          | 	byte	0
35b5b                 | LR__5428
35b5b     30          | 	byte	"0"
35b5c     00          | 	byte	0
35b5d                 | LR__5429
35b5d     70 63 5F 61 
35b61     6D 62 65 72 | 	byte	"pc_amber"
35b65     00          | 	byte	0
35b66                 | LR__5430
35b66     31          | 	byte	"1"
35b67     00          | 	byte	0
35b68                 | LR__5431
35b68     70 63 5F 67 
35b6c     72 65 65 6E | 	byte	"pc_green"
35b70     00          | 	byte	0
35b71                 | LR__5432
35b71     32          | 	byte	"2"
35b72     00          | 	byte	0
35b73                 | LR__5433
35b73     70 63 5F 77 
35b77     68 69 74 65 | 	byte	"pc_white"
35b7b     00          | 	byte	0
35b7c                 | LR__5434
35b7c     33          | 	byte	"3"
35b7d     00          | 	byte	0
35b7e                 | LR__5435
35b7e     73 74       | 	byte	"st"
35b80     00          | 	byte	0
35b81                 | LR__5436
35b81     34          | 	byte	"4"
35b82     00          | 	byte	0
35b83                 | LR__5437
35b83                 | 	byte	
35b83     00          | 	byte	0
35b84                 | LR__5438
35b84     6C 6F 61 64 | 	byte	"load"
35b88     00          | 	byte	0
35b89                 | LR__5439
35b89     73 61 76 65 | 	byte	"save"
35b8d     00          | 	byte	0
35b8e                 | LR__5440
35b8e     62 72 75 6E | 	byte	"brun"
35b92     00          | 	byte	0
35b93                 | LR__5441
35b93     72 75 6E    | 	byte	"run"
35b96     00          | 	byte	0
35b97                 | LR__5442
35b97     6C 6F 2E    | 	byte	"lo."
35b9a     00          | 	byte	0
35b9b                 | LR__5443
35b9b     73 2E       | 	byte	"s."
35b9d     00          | 	byte	0
35b9e                 | LR__5444
35b9e     62 72 2E    | 	byte	"br."
35ba1     00          | 	byte	0
35ba2                 | LR__5445
35ba2     65 6E 74 65 
35ba6     72          | 	byte	"enter"
35ba7     00          | 	byte	0
35ba8                 | LR__5446
35ba8     65 2E       | 	byte	"e."
35baa     00          | 	byte	0
35bab                 | LR__5447
35bab     64 65 6C 65 
35baf     74 65       | 	byte	"delete"
35bb1     00          | 	byte	0
35bb2                 | LR__5448
35bb2     6D 6B 64 69 
35bb6     72          | 	byte	"mkdir"
35bb7     00          | 	byte	0
35bb8                 | LR__5449
35bb8     63 64       | 	byte	"cd"
35bba     00          | 	byte	0
35bbb                 | LR__5450
35bbb     63 64 2E    | 	byte	"cd."
35bbe     00          | 	byte	0
35bbf                 | LR__5451
35bbf     2E          | 	byte	"."
35bc0     00          | 	byte	0
35bc1                 | LR__5452
35bc1     2E 2E       | 	byte	".."
35bc3     00          | 	byte	0
35bc4                 | LR__5453
35bc4     63 64       | 	byte	"cd"
35bc6     00          | 	byte	0
35bc7                 | LR__5454
35bc7     2F          | 	byte	"/"
35bc8     00          | 	byte	0
35bc9                 | LR__5455
35bc9                 | 	byte	
35bc9     00          | 	byte	0
35bca                 | LR__5456
35bca                 | 	byte	
35bca     00          | 	byte	0
35bcb                 | LR__5457
35bcb                 | 	byte	
35bcb     00          | 	byte	0
35bcc                 | LR__5458
35bcc                 | 	byte	
35bcc     00          | 	byte	0
35bcd                 | LR__5459
35bcd                 | 	byte	
35bcd     00          | 	byte	0
35bce                 | LR__5460
35bce     52 65 61 64 
35bd2     79          | 	byte	"Ready"
35bd3     00          | 	byte	0
35bd4                 | LR__5461
35bd4     2B          | 	byte	"+"
35bd5     00          | 	byte	0
35bd6                 | LR__5462
35bd6     2D          | 	byte	"-"
35bd7     00          | 	byte	0
35bd8                 | LR__5463
35bd8     6F 72       | 	byte	"or"
35bda     00          | 	byte	0
35bdb                 | LR__5464
35bdb     78 6F 72    | 	byte	"xor"
35bde     00          | 	byte	0
35bdf                 | LR__5465
35bdf     2A          | 	byte	"*"
35be0     00          | 	byte	0
35be1                 | LR__5466
35be1     2F          | 	byte	"/"
35be2     00          | 	byte	0
35be3                 | LR__5467
35be3     61 6E 64    | 	byte	"and"
35be6     00          | 	byte	0
35be7                 | LR__5468
35be7     64 69 76    | 	byte	"div"
35bea     00          | 	byte	0
35beb                 | LR__5469
35beb     6D 6F 64    | 	byte	"mod"
35bee     00          | 	byte	0
35bef                 | LR__5470
35bef     73 68 6C    | 	byte	"shl"
35bf2     00          | 	byte	0
35bf3                 | LR__5471
35bf3     73 68 72    | 	byte	"shr"
35bf6     00          | 	byte	0
35bf7                 | LR__5472
35bf7     5E          | 	byte	"^"
35bf8     00          | 	byte	0
35bf9                 | LR__5473
35bf9     6E 6F 74    | 	byte	"not"
35bfc     00          | 	byte	0
35bfd                 | LR__5474
35bfd     40          | 	byte	"@"
35bfe     00          | 	byte	0
35bff                 | LR__5475
35bff     3D          | 	byte	"="
35c00     00          | 	byte	0
35c01                 | LR__5476
35c01     3E 3D       | 	byte	">="
35c03     00          | 	byte	0
35c04                 | LR__5477
35c04     3C 3D       | 	byte	"<="
35c06     00          | 	byte	0
35c07                 | LR__5478
35c07     3C          | 	byte	"<"
35c08     00          | 	byte	0
35c09                 | LR__5479
35c09     3E          | 	byte	">"
35c0a     00          | 	byte	0
35c0b                 | LR__5480
35c0b     3C 3E       | 	byte	"<>"
35c0d     00          | 	byte	0
35c0e                 | LR__5481
35c0e     2B 2B       | 	byte	"++"
35c10     00          | 	byte	0
35c11                 | LR__5482
35c11     2D 2D       | 	byte	"--"
35c13     00          | 	byte	0
35c14                 | LR__5483
35c14     23          | 	byte	"#"
35c15     00          | 	byte	0
35c16                 | LR__5484
35c16     30          | 	byte	"0"
35c17     00          | 	byte	0
35c18                 | LR__5485
35c18     39          | 	byte	"9"
35c19     00          | 	byte	0
35c1a                 | LR__5486
35c1a     23 72 65 61 
35c1e     64          | 	byte	"#read"
35c1f     00          | 	byte	0
35c20                 | LR__5487
35c20     23 77 72 69 
35c24     74 65       | 	byte	"#write"
35c26     00          | 	byte	0
35c27                 | LR__5488
35c27     23 61 70 70 
35c2b     65 6E 64    | 	byte	"#append"
35c2e     00          | 	byte	0
35c2f                 | LR__5489
35c2f     23          | 	byte	"#"
35c30     00          | 	byte	0
35c31                 | LR__5490
35c31     23          | 	byte	"#"
35c32     00          | 	byte	0
35c33                 | LR__5491
35c33     2D          | 	byte	"-"
35c34     00          | 	byte	0
35c35                 | LR__5492
35c35     30          | 	byte	"0"
35c36     00          | 	byte	0
35c37                 | LR__5493
35c37     63          | 	byte	"c"
35c38     00          | 	byte	0
35c39                 | LR__5494
35c39     63 23       | 	byte	"c#"
35c3b     00          | 	byte	0
35c3c                 | LR__5495
35c3c     64          | 	byte	"d"
35c3d     00          | 	byte	0
35c3e                 | LR__5496
35c3e     64 23       | 	byte	"d#"
35c40     00          | 	byte	0
35c41                 | LR__5497
35c41     65          | 	byte	"e"
35c42     00          | 	byte	0
35c43                 | LR__5498
35c43     66          | 	byte	"f"
35c44     00          | 	byte	0
35c45                 | LR__5499
35c45     66 23       | 	byte	"f#"
35c47     00          | 	byte	0
35c48                 | LR__5500
35c48     67          | 	byte	"g"
35c49     00          | 	byte	0
35c4a                 | LR__5501
35c4a     67 23       | 	byte	"g#"
35c4c     00          | 	byte	0
35c4d                 | LR__5502
35c4d     61          | 	byte	"a"
35c4e     00          | 	byte	0
35c4f                 | LR__5503
35c4f     61 23       | 	byte	"a#"
35c51     00          | 	byte	0
35c52                 | LR__5504
35c52     68          | 	byte	"h"
35c53     00          | 	byte	0
35c54                 | LR__5505
35c54     62          | 	byte	"b"
35c55     00          | 	byte	0
35c56                 | LR__5506
35c56     2B          | 	byte	"+"
35c57     00          | 	byte	0
35c58                 | LR__5507
35c58     2D          | 	byte	"-"
35c59     00          | 	byte	0
35c5a                 | LR__5508
35c5a     3D          | 	byte	"="
35c5b     00          | 	byte	0
35c5c                 | LR__5509
35c5c     2C          | 	byte	","
35c5d     00          | 	byte	0
35c5e                 | LR__5510
35c5e     2A          | 	byte	"*"
35c5f     00          | 	byte	0
35c60                 | LR__5511
35c60     2F          | 	byte	"/"
35c61     00          | 	byte	0
35c62                 | LR__5512
35c62     3B          | 	byte	";"
35c63     00          | 	byte	0
35c64                 | LR__5513
35c64     22          | 	byte	34
35c65     00          | 	byte	0
35c66                 | LR__5514
35c66     5E          | 	byte	"^"
35c67     00          | 	byte	0
35c68                 | LR__5515
35c68     29          | 	byte	")"
35c69     00          | 	byte	0
35c6a                 | LR__5516
35c6a     28          | 	byte	"("
35c6b     00          | 	byte	0
35c6c                 | LR__5517
35c6c     3A          | 	byte	":"
35c6d     00          | 	byte	0
35c6e                 | LR__5518
35c6e     20          | 	byte	" "
35c6f     00          | 	byte	0
35c70                 | LR__5519
35c70     3E          | 	byte	">"
35c71     00          | 	byte	0
35c72                 | LR__5520
35c72     3C          | 	byte	"<"
35c73     00          | 	byte	0
35c74                 | LR__5521
35c74     3D          | 	byte	"="
35c75     00          | 	byte	0
35c76                 | LR__5522
35c76     62 65 65 70 | 	byte	"beep"
35c7a     00          | 	byte	0
35c7b                 | LR__5523
35c7b     62 2E       | 	byte	"b."
35c7d     00          | 	byte	0
35c7e                 | LR__5524
35c7e     62 6C 69 74 | 	byte	"blit"
35c82     00          | 	byte	0
35c83                 | LR__5525
35c83     62 6F 78    | 	byte	"box"
35c86     00          | 	byte	0
35c87                 | LR__5526
35c87     62 72 75 6E | 	byte	"brun"
35c8b     00          | 	byte	0
35c8c                 | LR__5527
35c8c     62 72 2E    | 	byte	"br."
35c8f     00          | 	byte	0
35c90                 | LR__5528
35c90     63 64       | 	byte	"cd"
35c92     00          | 	byte	0
35c93                 | LR__5529
35c93     63 68 61 6E 
35c97     67 65 66 72 
35c9b     65 71       | 	byte	"changefreq"
35c9d     00          | 	byte	0
35c9e                 | LR__5530
35c9e     63 66 2E    | 	byte	"cf."
35ca1     00          | 	byte	0
35ca2                 | LR__5531
35ca2     63 68 61 6E 
35ca6     67 65 70 61 
35caa     6E          | 	byte	"changepan"
35cab     00          | 	byte	0
35cac                 | LR__5532
35cac     63 70 2E    | 	byte	"cp."
35caf     00          | 	byte	0
35cb0                 | LR__5533
35cb0     63 68 61 6E 
35cb4     67 65 76 6F 
35cb8     6C          | 	byte	"changevol"
35cb9     00          | 	byte	0
35cba                 | LR__5534
35cba     63 76 2E    | 	byte	"cv."
35cbd     00          | 	byte	0
35cbe                 | LR__5535
35cbe     63 68 61 6E 
35cc2     67 65 77 61 
35cc6     76 65       | 	byte	"changewave"
35cc8     00          | 	byte	0
35cc9                 | LR__5536
35cc9     63 77 2E    | 	byte	"cw."
35ccc     00          | 	byte	0
35ccd                 | LR__5537
35ccd     63 69 72 63 
35cd1     6C 65       | 	byte	"circle"
35cd3     00          | 	byte	0
35cd4                 | LR__5538
35cd4     63 69 2E    | 	byte	"ci."
35cd7     00          | 	byte	0
35cd8                 | LR__5539
35cd8     63 6C 69 63 
35cdc     6B          | 	byte	"click"
35cdd     00          | 	byte	0
35cde                 | LR__5540
35cde     63 6C 6F 73 
35ce2     65          | 	byte	"close"
35ce3     00          | 	byte	0
35ce4                 | LR__5541
35ce4     63 6C 73    | 	byte	"cls"
35ce7     00          | 	byte	0
35ce8                 | LR__5542
35ce8     63 6F 67 69 
35cec     6E 69 74    | 	byte	"coginit"
35cef     00          | 	byte	0
35cf0                 | LR__5543
35cf0     63 6F 6C 6F 
35cf4     72          | 	byte	"color"
35cf5     00          | 	byte	0
35cf6                 | LR__5544
35cf6     63 2E       | 	byte	"c."
35cf8     00          | 	byte	0
35cf9                 | LR__5545
35cf9     63 6F 70 79 | 	byte	"copy"
35cfd     00          | 	byte	0
35cfe                 | LR__5546
35cfe     63 75 72 73 
35d02     6F 72       | 	byte	"cursor"
35d04     00          | 	byte	0
35d05                 | LR__5547
35d05     64 61 74 61 | 	byte	"data"
35d09     00          | 	byte	0
35d0a                 | LR__5548
35d0a     64 65 66 73 
35d0e     6E 64       | 	byte	"defsnd"
35d10     00          | 	byte	0
35d11                 | LR__5549
35d11     64 65 66 65 
35d15     6E 76       | 	byte	"defenv"
35d17     00          | 	byte	0
35d18                 | LR__5550
35d18     64 65 66 73 
35d1c     70 72 69 74 
35d20     65          | 	byte	"defsprite"
35d21     00          | 	byte	0
35d22                 | LR__5551
35d22     64 73 2E    | 	byte	"ds."
35d25     00          | 	byte	0
35d26                 | LR__5552
35d26     64 65 67    | 	byte	"deg"
35d29     00          | 	byte	0
35d2a                 | LR__5553
35d2a     64 65 6C 65 
35d2e     74 65       | 	byte	"delete"
35d30     00          | 	byte	0
35d31                 | LR__5554
35d31     64 69 6D    | 	byte	"dim"
35d34     00          | 	byte	0
35d35                 | LR__5555
35d35     64 69 72    | 	byte	"dir"
35d38     00          | 	byte	0
35d39                 | LR__5556
35d39     64 70 6F 6B 
35d3d     65          | 	byte	"dpoke"
35d3e     00          | 	byte	0
35d3f                 | LR__5557
35d3f     64 72 61 77 | 	byte	"draw"
35d43     00          | 	byte	0
35d44                 | LR__5558
35d44     64 72 61 77 
35d48     74 6F       | 	byte	"drawto"
35d4a     00          | 	byte	0
35d4b                 | LR__5559
35d4b     64 72 2E    | 	byte	"dr."
35d4e     00          | 	byte	0
35d4f                 | LR__5560
35d4f     65 6C 73 65 | 	byte	"else"
35d53     00          | 	byte	0
35d54                 | LR__5561
35d54     65 6E 64    | 	byte	"end"
35d57     00          | 	byte	0
35d58                 | LR__5562
35d58     65 6E 74 65 
35d5c     72          | 	byte	"enter"
35d5d     00          | 	byte	0
35d5e                 | LR__5563
35d5e     65 2E       | 	byte	"e."
35d60     00          | 	byte	0
35d61                 | LR__5564
35d61     66 63 69 72 
35d65     63 6C 65    | 	byte	"fcircle"
35d68     00          | 	byte	0
35d69                 | LR__5565
35d69     66 63 2E    | 	byte	"fc."
35d6c     00          | 	byte	0
35d6d                 | LR__5566
35d6d     66 69 6C 6C | 	byte	"fill"
35d71     00          | 	byte	0
35d72                 | LR__5567
35d72     66 69 2E    | 	byte	"fi."
35d75     00          | 	byte	0
35d76                 | LR__5568
35d76     66 6F 6E 74 | 	byte	"font"
35d7a     00          | 	byte	0
35d7b                 | LR__5569
35d7b     66 6F 72    | 	byte	"for"
35d7e     00          | 	byte	0
35d7f                 | LR__5570
35d7f     66 2E       | 	byte	"f."
35d81     00          | 	byte	0
35d82                 | LR__5571
35d82     66 72 61 6D 
35d86     65          | 	byte	"frame"
35d87     00          | 	byte	0
35d88                 | LR__5572
35d88     66 72 2E    | 	byte	"fr."
35d8b     00          | 	byte	0
35d8c                 | LR__5573
35d8c     67 65 74    | 	byte	"get"
35d8f     00          | 	byte	0
35d90                 | LR__5574
35d90     67 6F 73 75 
35d94     62          | 	byte	"gosub"
35d95     00          | 	byte	0
35d96                 | LR__5575
35d96     67 6F 74 6F | 	byte	"goto"
35d9a     00          | 	byte	0
35d9b                 | LR__5576
35d9b     67 2E       | 	byte	"g."
35d9d     00          | 	byte	0
35d9e                 | LR__5577
35d9e     69 66       | 	byte	"if"
35da0     00          | 	byte	0
35da1                 | LR__5578
35da1     69 6E 6B    | 	byte	"ink"
35da4     00          | 	byte	0
35da5                 | LR__5579
35da5     69 2E       | 	byte	"i."
35da7     00          | 	byte	0
35da8                 | LR__5580
35da8     69 6E 70 75 
35dac     74          | 	byte	"input"
35dad     00          | 	byte	0
35dae                 | LR__5581
35dae     6C 69 73 74 | 	byte	"list"
35db2     00          | 	byte	0
35db3                 | LR__5582
35db3     6C 2E       | 	byte	"l."
35db5     00          | 	byte	0
35db6                 | LR__5583
35db6     6C 6F 61 64 | 	byte	"load"
35dba     00          | 	byte	0
35dbb                 | LR__5584
35dbb     6C 6F 2E    | 	byte	"lo."
35dbe     00          | 	byte	0
35dbf                 | LR__5585
35dbf     6C 70 6F 6B 
35dc3     65          | 	byte	"lpoke"
35dc4     00          | 	byte	0
35dc5                 | LR__5586
35dc5     6D 6B 64 69 
35dc9     72          | 	byte	"mkdir"
35dca     00          | 	byte	0
35dcb                 | LR__5587
35dcb     6D 6F 64 65 | 	byte	"mode"
35dcf     00          | 	byte	0
35dd0                 | LR__5588
35dd0     6D 2E       | 	byte	"m."
35dd2     00          | 	byte	0
35dd3                 | LR__5589
35dd3     6D 6F 75 73 
35dd7     65          | 	byte	"mouse"
35dd8     00          | 	byte	0
35dd9                 | LR__5590
35dd9     6E 65 77    | 	byte	"new"
35ddc     00          | 	byte	0
35ddd                 | LR__5591
35ddd     6E 65 78 74 | 	byte	"next"
35de1     00          | 	byte	0
35de2                 | LR__5592
35de2     6E 2E       | 	byte	"n."
35de4     00          | 	byte	0
35de5                 | LR__5593
35de5     6F 6E       | 	byte	"on"
35de7     00          | 	byte	0
35de8                 | LR__5594
35de8     6F 70 65 6E | 	byte	"open"
35dec     00          | 	byte	0
35ded                 | LR__5595
35ded     70 61 70 65 
35df1     72          | 	byte	"paper"
35df2     00          | 	byte	0
35df3                 | LR__5596
35df3     70 61 2E    | 	byte	"pa."
35df6     00          | 	byte	0
35df7                 | LR__5597
35df7     70 69 6E 66 
35dfb     6C 6F 61 74 | 	byte	"pinfloat"
35dff     00          | 	byte	0
35e00                 | LR__5598
35e00     70 69 6E 68 
35e04     69          | 	byte	"pinhi"
35e05     00          | 	byte	0
35e06                 | LR__5599
35e06     70 69 6E 6C 
35e0a     6F          | 	byte	"pinlo"
35e0b     00          | 	byte	0
35e0c                 | LR__5600
35e0c     70 69 6E 73 
35e10     74 61 72 74 | 	byte	"pinstart"
35e14     00          | 	byte	0
35e15                 | LR__5601
35e15     70 69 6E 74 
35e19     6F 67 67 6C 
35e1d     65          | 	byte	"pintoggle"
35e1e     00          | 	byte	0
35e1f                 | LR__5602
35e1f     70 69 6E 77 
35e23     72 69 74 65 | 	byte	"pinwrite"
35e27     00          | 	byte	0
35e28                 | LR__5603
35e28     70 6C 61 79 | 	byte	"play"
35e2c     00          | 	byte	0
35e2d                 | LR__5604
35e2d     70 2E       | 	byte	"p."
35e2f     00          | 	byte	0
35e30                 | LR__5605
35e30     70 6C 61 79 
35e34     73 61 6D 70 
35e38     6C 65       | 	byte	"playsample"
35e3a     00          | 	byte	0
35e3b                 | LR__5606
35e3b     70 6C 6F 74 | 	byte	"plot"
35e3f     00          | 	byte	0
35e40                 | LR__5607
35e40     70 6C 2E    | 	byte	"pl."
35e43     00          | 	byte	0
35e44                 | LR__5608
35e44     70 6F 6B 65 | 	byte	"poke"
35e48     00          | 	byte	0
35e49                 | LR__5609
35e49     70 6F 70    | 	byte	"pop"
35e4c     00          | 	byte	0
35e4d                 | LR__5610
35e4d     70 6F 73 69 
35e51     74 69 6F 6E | 	byte	"position"
35e55     00          | 	byte	0
35e56                 | LR__5611
35e56     70 6F 73 2E | 	byte	"pos."
35e5a     00          | 	byte	0
35e5b                 | LR__5612
35e5b     70 72 69 6E 
35e5f     74          | 	byte	"print"
35e60     00          | 	byte	0
35e61                 | LR__5613
35e61     3F          | 	byte	"?"
35e62     00          | 	byte	0
35e63                 | LR__5614
35e63     70 75 74    | 	byte	"put"
35e66     00          | 	byte	0
35e67                 | LR__5615
35e67     72 61 64    | 	byte	"rad"
35e6a     00          | 	byte	0
35e6b                 | LR__5616
35e6b     72 65 61 64 | 	byte	"read"
35e6f     00          | 	byte	0
35e70                 | LR__5617
35e70     72 65 6C 65 
35e74     61 73 65    | 	byte	"release"
35e77     00          | 	byte	0
35e78                 | LR__5618
35e78     72 65 6D    | 	byte	"rem"
35e7b     00          | 	byte	0
35e7c                 | LR__5619
35e7c     27          | 	byte	"'"
35e7d     00          | 	byte	0
35e7e                 | LR__5620
35e7e     72 65 73 74 
35e82     6F 72 65    | 	byte	"restore"
35e85     00          | 	byte	0
35e86                 | LR__5621
35e86     72 65 74 75 
35e8a     72 6E       | 	byte	"return"
35e8c     00          | 	byte	0
35e8d                 | LR__5622
35e8d     72 75 6E    | 	byte	"run"
35e90     00          | 	byte	0
35e91                 | LR__5623
35e91     73 61 76 65 | 	byte	"save"
35e95     00          | 	byte	0
35e96                 | LR__5624
35e96     73 2E       | 	byte	"s."
35e98     00          | 	byte	0
35e99                 | LR__5625
35e99     73 65 74 64 
35e9d     65 6C 61 79 | 	byte	"setdelay"
35ea1     00          | 	byte	0
35ea2                 | LR__5626
35ea2     73 64 2E    | 	byte	"sd."
35ea5     00          | 	byte	0
35ea6                 | LR__5627
35ea6     73 65 74 65 
35eaa     6E 76       | 	byte	"setenv"
35eac     00          | 	byte	0
35ead                 | LR__5628
35ead     73 65 2E    | 	byte	"se."
35eb0     00          | 	byte	0
35eb1                 | LR__5629
35eb1     73 65 74 6C 
35eb5     65 6E       | 	byte	"setlen"
35eb7     00          | 	byte	0
35eb8                 | LR__5630
35eb8     73 6C 2E    | 	byte	"sl."
35ebb     00          | 	byte	0
35ebc                 | LR__5631
35ebc     73 65 74 70 
35ec0     61 6E       | 	byte	"setpan"
35ec2     00          | 	byte	0
35ec3                 | LR__5632
35ec3     73 70 2E    | 	byte	"sp."
35ec6     00          | 	byte	0
35ec7                 | LR__5633
35ec7     73 65 74 73 
35ecb     75 73 74 61 
35ecf     69 6E       | 	byte	"setsustain"
35ed1     00          | 	byte	0
35ed2                 | LR__5634
35ed2     73 73 2E    | 	byte	"ss."
35ed5     00          | 	byte	0
35ed6                 | LR__5635
35ed6     73 65 74 76 
35eda     6F 6C       | 	byte	"setvol"
35edc     00          | 	byte	0
35edd                 | LR__5636
35edd     73 76 2E    | 	byte	"sv."
35ee0     00          | 	byte	0
35ee1                 | LR__5637
35ee1     73 65 74 77 
35ee5     61 76 65    | 	byte	"setwave"
35ee8     00          | 	byte	0
35ee9                 | LR__5638
35ee9     73 77 2E    | 	byte	"sw."
35eec     00          | 	byte	0
35eed                 | LR__5639
35eed     73 65 74 77 
35ef1     61 76       | 	byte	"setwav"
35ef3     00          | 	byte	0
35ef4                 | LR__5640
35ef4     73 68 75 74 
35ef8     75 70       | 	byte	"shutup"
35efa     00          | 	byte	0
35efb                 | LR__5641
35efb     73 68 2E    | 	byte	"sh."
35efe     00          | 	byte	0
35eff                 | LR__5642
35eff     73 6F 75 6E 
35f03     64          | 	byte	"sound"
35f04     00          | 	byte	0
35f05                 | LR__5643
35f05     73 6F 2E    | 	byte	"so."
35f08     00          | 	byte	0
35f09                 | LR__5644
35f09     73 70 72 69 
35f0d     74 65       | 	byte	"sprite"
35f0f     00          | 	byte	0
35f10                 | LR__5645
35f10     73 70 72 2E | 	byte	"spr."
35f14     00          | 	byte	0
35f15                 | LR__5646
35f15     74 68 65 6E | 	byte	"then"
35f19     00          | 	byte	0
35f1a                 | LR__5647
35f1a     77 61 69 74 
35f1e     6D 73       | 	byte	"waitms"
35f20     00          | 	byte	0
35f21                 | LR__5648
35f21     77 2E       | 	byte	"w."
35f23     00          | 	byte	0
35f24                 | LR__5649
35f24     77 61 69 74 
35f28     63 6C 6F 63 
35f2c     6B          | 	byte	"waitclock"
35f2d     00          | 	byte	0
35f2e                 | LR__5650
35f2e     77 63 2E    | 	byte	"wc."
35f31     00          | 	byte	0
35f32                 | LR__5651
35f32     77 61 69 74 
35f36     76 62 6C    | 	byte	"waitvbl"
35f39     00          | 	byte	0
35f3a                 | LR__5652
35f3a     77 76 2E    | 	byte	"wv."
35f3d     00          | 	byte	0
35f3e                 | LR__5653
35f3e     77 72 70 69 
35f42     6E          | 	byte	"wrpin"
35f43     00          | 	byte	0
35f44                 | LR__5654
35f44     77 78 70 69 
35f48     6E          | 	byte	"wxpin"
35f49     00          | 	byte	0
35f4a                 | LR__5655
35f4a     77 79 70 69 
35f4e     6E          | 	byte	"wypin"
35f4f     00          | 	byte	0
35f50                 | LR__5656
35f50     61 62 73    | 	byte	"abs"
35f53     00          | 	byte	0
35f54                 | LR__5657
35f54     61 63 6F 73 | 	byte	"acos"
35f58     00          | 	byte	0
35f59                 | LR__5658
35f59     61 64 72    | 	byte	"adr"
35f5c     00          | 	byte	0
35f5d                 | LR__5659
35f5d     61 64 64 72 | 	byte	"addr"
35f61     00          | 	byte	0
35f62                 | LR__5660
35f62     61 73 63    | 	byte	"asc"
35f65     00          | 	byte	0
35f66                 | LR__5661
35f66     61 73 69 6E | 	byte	"asin"
35f6a     00          | 	byte	0
35f6b                 | LR__5662
35f6b     61 74 6E    | 	byte	"atn"
35f6e     00          | 	byte	0
35f6f                 | LR__5663
35f6f     62 69 6E 24 | 	byte	"bin$"
35f73     00          | 	byte	0
35f74                 | LR__5664
35f74     63 68 72 24 | 	byte	"chr$"
35f78     00          | 	byte	0
35f79                 | LR__5665
35f79     63 6F 73    | 	byte	"cos"
35f7c     00          | 	byte	0
35f7d                 | LR__5666
35f7d     64 70 65 65 
35f81     6B          | 	byte	"dpeek"
35f82     00          | 	byte	0
35f83                 | LR__5667
35f83     66 72 61 6D 
35f87     65 62 75 66 | 	byte	"framebuf"
35f8b     00          | 	byte	0
35f8c                 | LR__5668
35f8c     66 62 2E    | 	byte	"fb."
35f8f     00          | 	byte	0
35f90                 | LR__5669
35f90     66 72 65    | 	byte	"fre"
35f93     00          | 	byte	0
35f94                 | LR__5670
35f94     67 65 74 70 
35f98     69 78 65 6C | 	byte	"getpixel"
35f9c     00          | 	byte	0
35f9d                 | LR__5671
35f9d     67 65 2E    | 	byte	"ge."
35fa0     00          | 	byte	0
35fa1                 | LR__5672
35fa1     67 65 74 65 
35fa5     6E 76 73 75 
35fa9     73 74 61 69 
35fad     6E          | 	byte	"getenvsustain"
35fae     00          | 	byte	0
35faf                 | LR__5673
35faf     67 65 74 6E 
35fb3     6F 74 65 76 
35fb7     61 6C 75 65 | 	byte	"getnotevalue"
35fbb     00          | 	byte	0
35fbc                 | LR__5674
35fbc     67 65 74 74 
35fc0     69 6D 65    | 	byte	"gettime"
35fc3     00          | 	byte	0
35fc4                 | LR__5675
35fc4     68 65 78 24 | 	byte	"hex$"
35fc8     00          | 	byte	0
35fc9                 | LR__5676
35fc9     69 6E 6B 65 
35fcd     79 24       | 	byte	"inkey$"
35fcf     00          | 	byte	0
35fd0                 | LR__5677
35fd0     69 6E 74    | 	byte	"int"
35fd3     00          | 	byte	0
35fd4                 | LR__5678
35fd4     6C 65 66 74 
35fd8     24          | 	byte	"left$"
35fd9     00          | 	byte	0
35fda                 | LR__5679
35fda     6C 65 6E    | 	byte	"len"
35fdd     00          | 	byte	0
35fde                 | LR__5680
35fde     6C 6F 67    | 	byte	"log"
35fe1     00          | 	byte	0
35fe2                 | LR__5681
35fe2     6C 70 65 65 
35fe6     6B          | 	byte	"lpeek"
35fe7     00          | 	byte	0
35fe8                 | LR__5682
35fe8     6D 69 64 24 | 	byte	"mid$"
35fec     00          | 	byte	0
35fed                 | LR__5683
35fed     6D 6F 75 73 
35ff1     65 6B       | 	byte	"mousek"
35ff3     00          | 	byte	0
35ff4                 | LR__5684
35ff4     6D 6F 75 73 
35ff8     65 77       | 	byte	"mousew"
35ffa     00          | 	byte	0
35ffb                 | LR__5685
35ffb     6D 6F 75 73 
35fff     65 78       | 	byte	"mousex"
36001     00          | 	byte	0
36002                 | LR__5686
36002     6D 6F 75 73 
36006     65 79       | 	byte	"mousey"
36008     00          | 	byte	0
36009                 | LR__5687
36009     70 61 64 78 | 	byte	"padx"
3600d     00          | 	byte	0
3600e                 | LR__5688
3600e     70 61 64 79 | 	byte	"pady"
36012     00          | 	byte	0
36013                 | LR__5689
36013     70 61 64 7A | 	byte	"padz"
36017     00          | 	byte	0
36018                 | LR__5690
36018     70 61 64 72 
3601c     78          | 	byte	"padrx"
3601d     00          | 	byte	0
3601e                 | LR__5691
3601e     70 61 64 72 
36022     79          | 	byte	"padry"
36023     00          | 	byte	0
36024                 | LR__5692
36024     70 61 64 72 
36028     7A          | 	byte	"padrz"
36029     00          | 	byte	0
3602a                 | LR__5693
3602a     70 61 64 68 | 	byte	"padh"
3602e     00          | 	byte	0
3602f                 | LR__5694
3602f     70 65 65 6B | 	byte	"peek"
36033     00          | 	byte	0
36034                 | LR__5695
36034     70 69 6E 72 
36038     65 61 64    | 	byte	"pinread"
3603b     00          | 	byte	0
3603c                 | LR__5696
3603c     72 64 70 69 
36040     6E          | 	byte	"rdpin"
36041     00          | 	byte	0
36042                 | LR__5697
36042     72 69 67 68 
36046     74 24       | 	byte	"right$"
36048     00          | 	byte	0
36049                 | LR__5698
36049     72 71 70 69 
3604d     6E          | 	byte	"rqpin"
3604e     00          | 	byte	0
3604f                 | LR__5699
3604f     72 6F 75 6E 
36053     64          | 	byte	"round"
36054     00          | 	byte	0
36055                 | LR__5700
36055     72 6E 64    | 	byte	"rnd"
36058     00          | 	byte	0
36059                 | LR__5701
36059     73 69 6E    | 	byte	"sin"
3605c     00          | 	byte	0
3605d                 | LR__5702
3605d     73 71 72    | 	byte	"sqr"
36060     00          | 	byte	0
36061                 | LR__5703
36061     73 74 69 63 
36065     6B          | 	byte	"stick"
36066     00          | 	byte	0
36067                 | LR__5704
36067     73 74 72 69 
3606b     67          | 	byte	"strig"
3606c     00          | 	byte	0
3606d                 | LR__5705
3606d     73 74 72 24 | 	byte	"str$"
36071     00          | 	byte	0
36072                 | LR__5706
36072     74 61 6E    | 	byte	"tan"
36075     00          | 	byte	0
36076                 | LR__5707
36076     76 61 6C    | 	byte	"val"
36079     00          | 	byte	0
3607a                 | LR__5708
3607a     76 61 72 70 
3607e     74 72       | 	byte	"varptr"
36080     00          | 	byte	0
36081                 | LR__5709
36081     61          | 	byte	"a"
36082     00          | 	byte	0
36083                 | LR__5710
36083     7A          | 	byte	"z"
36084     00          | 	byte	0
36085                 | LR__5711
36085     5F          | 	byte	"_"
36086     00          | 	byte	0
36087                 | LR__5712
36087     61          | 	byte	"a"
36088     00          | 	byte	0
36089                 | LR__5713
36089     7A          | 	byte	"z"
3608a     00          | 	byte	0
3608b                 | LR__5714
3608b     30          | 	byte	"0"
3608c     00          | 	byte	0
3608d                 | LR__5715
3608d     39          | 	byte	"9"
3608e     00          | 	byte	0
3608f                 | LR__5716
3608f     5F          | 	byte	"_"
36090     00          | 	byte	0
36091                 | LR__5717
36091     2E          | 	byte	"."
36092     00          | 	byte	0
36093                 | LR__5718
36093     61          | 	byte	"a"
36094     00          | 	byte	0
36095                 | LR__5719
36095     7A          | 	byte	"z"
36096     00          | 	byte	0
36097                 | LR__5720
36097     30          | 	byte	"0"
36098     00          | 	byte	0
36099                 | LR__5721
36099     39          | 	byte	"9"
3609a     00          | 	byte	0
3609b                 | LR__5722
3609b     5F          | 	byte	"_"
3609c     00          | 	byte	0
3609d                 | LR__5723
3609d     24          | 	byte	"$"
3609e     00          | 	byte	0
3609f                 | LR__5724
3609f     25          | 	byte	"%"
360a0     00          | 	byte	0
360a1                 | LR__5725
360a1     21          | 	byte	"!"
360a2     00          | 	byte	0
360a3                 | LR__5726
360a3     30          | 	byte	"0"
360a4     00          | 	byte	0
360a5                 | LR__5727
360a5     39          | 	byte	"9"
360a6     00          | 	byte	0
360a7                 | LR__5728
360a7     2E          | 	byte	"."
360a8     00          | 	byte	0
360a9                 | LR__5729
360a9     24          | 	byte	"$"
360aa     00          | 	byte	0
360ab                 | LR__5730
360ab     25          | 	byte	"%"
360ac     00          | 	byte	0
360ad                 | LR__5731
360ad     2D          | 	byte	"-"
360ae     00          | 	byte	0
360af                 | LR__5732
360af     2E          | 	byte	"."
360b0     00          | 	byte	0
360b1                 | LR__5733
360b1     24          | 	byte	"$"
360b2     00          | 	byte	0
360b3                 | LR__5734
360b3     25          | 	byte	"%"
360b4     00          | 	byte	0
360b5                 | LR__5735
360b5     30          | 	byte	"0"
360b6     00          | 	byte	0
360b7                 | LR__5736
360b7     39          | 	byte	"9"
360b8     00          | 	byte	0
360b9                 | LR__5737
360b9     5F          | 	byte	"_"
360ba     00          | 	byte	0
360bb                 | LR__5738
360bb     2E          | 	byte	"."
360bc     00          | 	byte	0
360bd                 | LR__5739
360bd     45          | 	byte	"E"
360be     00          | 	byte	0
360bf                 | LR__5740
360bf     65          | 	byte	"e"
360c0     00          | 	byte	0
360c1                 | LR__5741
360c1     2D          | 	byte	"-"
360c2     00          | 	byte	0
360c3                 | LR__5742
360c3     61          | 	byte	"a"
360c4     00          | 	byte	0
360c5                 | LR__5743
360c5     66          | 	byte	"f"
360c6     00          | 	byte	0
360c7                 | LR__5744
360c7     30          | 	byte	"0"
360c8     00          | 	byte	0
360c9                 | LR__5745
360c9     31          | 	byte	"1"
360ca     00          | 	byte	0
360cb                 | LR__5746
360cb     5F          | 	byte	"_"
360cc     00          | 	byte	0
360cd                 | LR__5747
360cd     2D          | 	byte	"-"
360ce     00          | 	byte	0
360cf                 | LR__5748
360cf     65          | 	byte	"e"
360d0     00          | 	byte	0
360d1                 | LR__5749
360d1     2E          | 	byte	"."
360d2     00          | 	byte	0
360d3                 | LR__5750
360d3     45          | 	byte	"E"
360d4     00          | 	byte	0
360d5                 | LR__5751
360d5     65          | 	byte	"e"
360d6     00          | 	byte	0
360d7                 | LR__5752
360d7     30          | 	byte	"0"
360d8     00          | 	byte	0
360d9                 | LR__5753
360d9     39          | 	byte	"9"
360da     00          | 	byte	0
360db                 | LR__5754
360db     24          | 	byte	"$"
360dc     00          | 	byte	0
360dd                 | LR__5755
360dd     25          | 	byte	"%"
360de     00          | 	byte	0
360df                 | LR__5756
360df     2D          | 	byte	"-"
360e0     00          | 	byte	0
360e1                 | LR__5757
360e1     24          | 	byte	"$"
360e2     00          | 	byte	0
360e3                 | LR__5758
360e3     25          | 	byte	"%"
360e4     00          | 	byte	0
360e5                 | LR__5759
360e5     30          | 	byte	"0"
360e6     00          | 	byte	0
360e7                 | LR__5760
360e7     39          | 	byte	"9"
360e8     00          | 	byte	0
360e9                 | LR__5761
360e9     5F          | 	byte	"_"
360ea     00          | 	byte	0
360eb                 | LR__5762
360eb     30          | 	byte	"0"
360ec     00          | 	byte	0
360ed                 | LR__5763
360ed     39          | 	byte	"9"
360ee     00          | 	byte	0
360ef                 | LR__5764
360ef     61          | 	byte	"a"
360f0     00          | 	byte	0
360f1                 | LR__5765
360f1     66          | 	byte	"f"
360f2     00          | 	byte	0
360f3                 | LR__5766
360f3     5F          | 	byte	"_"
360f4     00          | 	byte	0
360f5                 | LR__5767
360f5     30          | 	byte	"0"
360f6     00          | 	byte	0
360f7                 | LR__5768
360f7     31          | 	byte	"1"
360f8     00          | 	byte	0
360f9                 | LR__5769
360f9     5F          | 	byte	"_"
360fa     00          | 	byte	0
360fb                 | LR__5770
360fb     30          | 	byte	"0"
360fc     00          | 	byte	0
360fd                 | LR__5771
360fd     39          | 	byte	"9"
360fe     00          | 	byte	0
360ff                 | LR__5772
360ff     5F          | 	byte	"_"
36100     00          | 	byte	0
36101                 | LR__5773
36101     22          | 	byte	34
36102     00          | 	byte	0
36103                 | LR__5774
36103     22          | 	byte	34
36104     00          | 	byte	0
36105                 | LR__5775
36105     44 69 6D 3A 
36109     20 61 74 20 
3610d     6C 69 6E 65 
36111     20          | 	byte	"Dim: at line "
36112     00          | 	byte	0
36113                 | LR__5776
36113     3A 20 77 61 
36117     72 6E 69 6E 
3611b     67 3A 20 74 
3611f     68 65 20 76 
36123     61 72 69 61 
36127     62 6C 65 20 
3612b     65 78 69 73 
3612f     74 65 64 2E | 	byte	": warning: the variable existed."
36133     00          | 	byte	0
36134                 | LR__5777
36134     28          | 	byte	"("
36135     00          | 	byte	0
36136                 | LR__5778
36136     61 73       | 	byte	"as"
36138     00          | 	byte	0
36139                 | LR__5779
36139     61 73       | 	byte	"as"
3613b     00          | 	byte	0
3613c                 | LR__5780
3613c     2C          | 	byte	","
3613d     00          | 	byte	0
3613e                 | LR__5781
3613e     29          | 	byte	")"
3613f     00          | 	byte	0
36140                 | LR__5782
36140     29          | 	byte	")"
36141     00          | 	byte	0
36142                 | LR__5783
36142     61 73       | 	byte	"as"
36144     00          | 	byte	0
36145                 | LR__5784
36145     62 79 74 65 | 	byte	"byte"
36149     00          | 	byte	0
3614a                 | LR__5785
3614a     75 62 79 74 
3614e     65          | 	byte	"ubyte"
3614f     00          | 	byte	0
36150                 | LR__5786
36150     73 68 6F 72 
36154     74          | 	byte	"short"
36155     00          | 	byte	0
36156                 | LR__5787
36156     75 73 68 6F 
3615a     72 74       | 	byte	"ushort"
3615c     00          | 	byte	0
3615d                 | LR__5788
3615d     6C 6F 6E 67 | 	byte	"long"
36161     00          | 	byte	0
36162                 | LR__5789
36162     69 6E 74 65 
36166     67 65 72    | 	byte	"integer"
36169     00          | 	byte	0
3616a                 | LR__5790
3616a     75 6C 6F 6E 
3616e     67          | 	byte	"ulong"
3616f     00          | 	byte	0
36170                 | LR__5791
36170     69 6E 74 36 
36174     34          | 	byte	"int64"
36175     00          | 	byte	0
36176                 | LR__5792
36176     75 69 6E 74 
3617a     36 34       | 	byte	"uint64"
3617c     00          | 	byte	0
3617d                 | LR__5793
3617d     73 69 6E 67 
36181     6C 65       | 	byte	"single"
36183     00          | 	byte	0
36184                 | LR__5794
36184     64 6F 75 62 
36188     6C 65       | 	byte	"double"
3618a     00          | 	byte	0
3618b                 | LR__5795
3618b     73 74 72 69 
3618f     6E 67       | 	byte	"string"
36191     00          | 	byte	0
36192                 | LR__5796
36192     74 6F       | 	byte	"to"
36194     00          | 	byte	0
36195                 | LR__5797
36195     73 74 65 70 | 	byte	"step"
36199     00          | 	byte	0
3619a                 | LR__5798
3619a     73 2E       | 	byte	"s."
3619c     00          | 	byte	0
3619d                 | LR__5799
3619d     73 2E       | 	byte	"s."
3619f     00          | 	byte	0
361a0                 | LR__5800
361a0     67 6F 74 6F | 	byte	"goto"
361a4     00          | 	byte	0
361a5                 | LR__5801
361a5     67 6F 73 75 
361a9     62          | 	byte	"gosub"
361aa     00          | 	byte	0
361ab                 | LR__5802
361ab     24          | 	byte	"$"
361ac     00          | 	byte	0
361ad                 | LR__5803
361ad     26 68       | 	byte	"&h"
361af     00          | 	byte	0
361b0                 | LR__5804
361b0     25          | 	byte	"%"
361b1     00          | 	byte	0
361b2                 | LR__5805
361b2     26 62       | 	byte	"&b"
361b4     00          | 	byte	0
361b5                 | LR__5806
361b5                 | 	byte	
361b5     00          | 	byte	0
361b6                 | LR__5807
361b6     61 63 6F 73 
361ba     3A 20       | 	byte	"acos: "
361bc     00          | 	byte	0
361bd                 | LR__5808
361bd     61 73 63 3A 
361c1     20          | 	byte	"asc: "
361c2     00          | 	byte	0
361c3                 | LR__5809
361c3     61 73 63 3A 
361c7     20          | 	byte	"asc: "
361c8     00          | 	byte	0
361c9                 | LR__5810
361c9     61 73 69 6E 
361cd     3A 20       | 	byte	"asin: "
361cf     00          | 	byte	0
361d0                 | LR__5811
361d0     61 74 6E 3A 
361d4     20          | 	byte	"atn: "
361d5     00          | 	byte	0
361d6                 | LR__5812
361d6     62 6C 69 74 
361da     3A 20       | 	byte	"blit: "
361dc     00          | 	byte	0
361dd                 | LR__5813
361dd     62 69 6E 24 
361e1     3A 20       | 	byte	"bin$: "
361e3     00          | 	byte	0
361e4                 | LR__5814
361e4     2F          | 	byte	"/"
361e5     00          | 	byte	0
361e6                 | LR__5815
361e6     2F 73 64 2F 
361ea     62 69 6E 2F | 	byte	"/sd/bin/"
361ee     00          | 	byte	0
361ef                 | LR__5816
361ef     53 79 73 74 
361f3     65 6D 20 65 
361f7     72 72 6F 72 
361fb     20          | 	byte	"System error "
361fc     00          | 	byte	0
361fd                 | LR__5817
361fd     3A 20       | 	byte	": "
361ff     00          | 	byte	0
36200                 | LR__5818
36200     2A          | 	byte	"*"
36201     00          | 	byte	0
36202                 | LR__5819
36202     2E 2E       | 	byte	".."
36204     00          | 	byte	0
36205                 | LR__5820
36205     2F          | 	byte	"/"
36206     00          | 	byte	0
36207                 | LR__5821
36207     2F          | 	byte	"/"
36208     00          | 	byte	0
36209                 | LR__5822
36209     53 79 73 74 
3620d     65 6D 20 65 
36211     72 72 6F 72 
36215     20          | 	byte	"System error "
36216     00          | 	byte	0
36217                 | LR__5823
36217     3A 20       | 	byte	": "
36219     00          | 	byte	0
3621a                 | LR__5824
3621a     43 75 72 72 
3621e     65 6E 74 20 
36222     64 69 72 65 
36226     63 74 6F 72 
3622a     79 3A 20    | 	byte	"Current directory: "
3622d     00          | 	byte	0
3622e                 | LR__5825
3622e     2F          | 	byte	"/"
3622f     00          | 	byte	0
36230                 | LR__5826
36230     53 79 73 74 
36234     65 6D 20 65 
36238     72 72 6F 72 
3623c     20          | 	byte	"System error "
3623d     00          | 	byte	0
3623e                 | LR__5827
3623e     3A 20       | 	byte	": "
36240     00          | 	byte	0
36241                 | LR__5828
36241     43 75 72 72 
36245     65 6E 74 20 
36249     64 69 72 65 
3624d     63 74 6F 72 
36251     79 3A 20    | 	byte	"Current directory: "
36254     00          | 	byte	0
36255                 | LR__5829
36255     2F          | 	byte	"/"
36256     00          | 	byte	0
36257                 | LR__5830
36257     2F          | 	byte	"/"
36258     00          | 	byte	0
36259                 | LR__5831
36259     2F          | 	byte	"/"
3625a     00          | 	byte	0
3625b                 | LR__5832
3625b     53 79 73 74 
3625f     65 6D 20 65 
36263     72 72 6F 72 
36267     20          | 	byte	"System error "
36268     00          | 	byte	0
36269                 | LR__5833
36269     3A 20       | 	byte	": "
3626b     00          | 	byte	0
3626c                 | LR__5834
3626c     43 75 72 72 
36270     65 6E 74 20 
36274     64 69 72 65 
36278     63 74 6F 72 
3627c     79 3A 20    | 	byte	"Current directory: "
3627f     00          | 	byte	0
36280                 | LR__5835
36280     63 68 72 24 
36284     3A 20       | 	byte	"chr$: "
36286     00          | 	byte	0
36287                 | LR__5836
36287     63 68 61 6E 
3628b     6E 65 6C 23 
3628f     20 65 78 70 
36293     65 63 74 65 
36297     64          | 	byte	"channel# expected"
36298     00          | 	byte	0
36299                 | LR__5837
36299     63 6F 73 3A 
3629d     20          | 	byte	"cos: "
3629e     00          | 	byte	0
3629f                 | LR__5838
3629f                 | 	byte	
3629f     00          | 	byte	0
362a0                 | LR__5839
362a0                 | 	byte	
362a0     00          | 	byte	0
362a1                 | LR__5840
362a1     2F 73 64 2F 
362a5     6D 65 64 69 
362a9     61 2F 68 2F | 	byte	"/sd/media/h/"
362ad     00          | 	byte	0
362ae                 | LR__5841
362ae     53 79 73 74 
362b2     65 6D 20 65 
362b6     72 72 6F 72 
362ba     20          | 	byte	"System error "
362bb     00          | 	byte	0
362bc                 | LR__5842
362bc     3A 20       | 	byte	": "
362be     00          | 	byte	0
362bf                 | LR__5843
362bf                 | 	byte	
362bf     00          | 	byte	0
362c0                 | LR__5844
362c0                 | 	byte	
362c0     00          | 	byte	0
362c1                 | LR__5845
362c1     2F 73 64 2F 
362c5     6D 65 64 69 
362c9     61 2F 73 2F | 	byte	"/sd/media/s/"
362cd     00          | 	byte	0
362ce                 | LR__5846
362ce     53 79 73 74 
362d2     65 6D 20 65 
362d6     72 72 6F 72 
362da     20          | 	byte	"System error "
362db     00          | 	byte	0
362dc                 | LR__5847
362dc     3A 20       | 	byte	": "
362de     00          | 	byte	0
362df                 | LR__5848
362df     2F          | 	byte	"/"
362e0     00          | 	byte	0
362e1                 | LR__5849
362e1     2F          | 	byte	"/"
362e2     00          | 	byte	0
362e3                 | LR__5850
362e3     2F          | 	byte	"/"
362e4     00          | 	byte	0
362e5                 | LR__5851
362e5     43 61 6E 6E 
362e9     6F 74 20 64 
362ed     65 6C 65 74 
362f1     65 20 66 69 
362f5     6C 65 20 6F 
362f9     72 20 66 69 
362fd     6C 65 20 64 
36301     6F 65 73 6E 
36305     27 74 20 65 
36309     78 69 73 74 
3630d     3A 20 73 79 
36311     73 74 65 6D 
36315     20 65 72 72 
36319     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
3631c     00          | 	byte	0
3631d                 | LR__5852
3631d     43 75 72 72 
36321     65 6E 74 20 
36325     64 69 72 65 
36329     63 74 6F 72 
3632d     79 3A 20    | 	byte	"Current directory: "
36330     00          | 	byte	0
36331                 | LR__5853
36331                 | 	byte	
36331     00          | 	byte	0
36332                 | LR__5854
36332     2A          | 	byte	"*"
36333     00          | 	byte	0
36334                 | LR__5855
36334                 | 	byte	
36334     00          | 	byte	0
36335                 | LR__5856
36335     5B 64 69 72 
36339     5D 20       | 	byte	"[dir] "
3633b     00          | 	byte	0
3633c                 | LR__5857
3633c     4D 6F 72 65 
36340     20 74 68 61 
36344     6E 20 31 32 
36348     38 20 65 6E 
3634c     74 72 69 65 
36350     73 20 66 6F 
36354     75 6E 64 3A 
36358     20 63 6C 65 
3635c     61 6E 20 79 
36360     6F 75 72 20 
36364     64 69 72 65 
36368     63 74 6F 72 
3636c     79          | 	byte	"More than 128 entries found: clean your directory"
3636d     00          | 	byte	0
3636e                 | LR__5858
3636e     2A          | 	byte	"*"
3636f     00          | 	byte	0
36370                 | LR__5859
36370                 | 	byte	
36370     00          | 	byte	0
36371                 | LR__5860
36371     4D 6F 72 65 
36375     20 74 68 61 
36379     6E 20 31 32 
3637d     38 20 65 6E 
36381     74 72 69 65 
36385     73 20 66 6F 
36389     75 6E 64 3A 
3638d     20 63 6C 65 
36391     61 6E 20 79 
36395     6F 75 72 20 
36399     64 69 72 65 
3639d     63 74 6F 72 
363a1     79          | 	byte	"More than 128 entries found: clean your directory"
363a2     00          | 	byte	0
363a3                 | LR__5861
363a3     45 72 72 6F 
363a7     72 20       | 	byte	"Error "
363a9     00          | 	byte	0
363aa                 | LR__5862
363aa     3A 20       | 	byte	": "
363ac     00          | 	byte	0
363ad                 | LR__5863
363ad     67 65 74 65 
363b1     6E 76 73 75 
363b5     73 74 61 69 
363b9     6E 3A 20    | 	byte	"getenvsustain: "
363bc     00          | 	byte	0
363bd                 | LR__5864
363bd     67 65 74 70 
363c1     69 78 65 6C 
363c5     3A 20       | 	byte	"getpixel: "
363c7     00          | 	byte	0
363c8                 | LR__5865
363c8     68 65 78 24 
363cc     3A 20       | 	byte	"hex$: "
363ce     00          | 	byte	0
363cf                 | LR__5866
363cf                 | 	byte	
363cf     00          | 	byte	0
363d0                 | LR__5867
363d0     49 6E 20 69 
363d4     6E 70 75 74 
363d8     3A 20       | 	byte	"In input: "
363da     00          | 	byte	0
363db                 | LR__5868
363db     2C          | 	byte	","
363dc     00          | 	byte	0
363dd                 | LR__5869
363dd                 | 	byte	
363dd     00          | 	byte	0
363de                 | LR__5870
363de                 | 	byte	
363de     00          | 	byte	0
363df                 | LR__5871
363df     6C 65 66 74 
363e3     24 3A 20    | 	byte	"left$: "
363e6     00          | 	byte	0
363e7                 | LR__5872
363e7     6C 65 66 74 
363eb     24 3A 20    | 	byte	"left$: "
363ee     00          | 	byte	0
363ef                 | LR__5873
363ef     6C 65 6E 3A 
363f3     20          | 	byte	"len: "
363f4     00          | 	byte	0
363f5                 | LR__5874
363f5     6C 65 6E 3A 
363f9     20          | 	byte	"len: "
363fa     00          | 	byte	0
363fb                 | LR__5875
363fb                 | 	byte	
363fb     00          | 	byte	0
363fc                 | LR__5876
363fc     2F          | 	byte	"/"
363fd     00          | 	byte	0
363fe                 | LR__5877
363fe     2F          | 	byte	"/"
363ff     00          | 	byte	0
36400                 | LR__5878
36400     2E 62 61 73 | 	byte	".bas"
36404     00          | 	byte	0
36405                 | LR__5879
36405     53 79 73 74 
36409     65 6D 20 65 
3640d     72 72 6F 72 
36411     20          | 	byte	"System error "
36412     00          | 	byte	0
36413                 | LR__5880
36413     3A 20       | 	byte	": "
36415     00          | 	byte	0
36416                 | LR__5881
36416     2E 62 61 73 | 	byte	".bas"
3641a     00          | 	byte	0
3641b                 | LR__5882
3641b     2F          | 	byte	"/"
3641c     00          | 	byte	0
3641d                 | LR__5883
3641d                 | 	byte	
3641d     00          | 	byte	0
3641e                 | LR__5884
3641e     4C 6F 61 64 
36422     65 64 20    | 	byte	"Loaded "
36425     00          | 	byte	0
36426                 | LR__5885
36426     2F          | 	byte	"/"
36427     00          | 	byte	0
36428                 | LR__5886
36428     6C 6F 67 3A 
3642c     20          | 	byte	"log: "
3642d     00          | 	byte	0
3642e                 | LR__5887
3642e     6D 69 64 24 
36432     3A 20       | 	byte	"mid$: "
36434     00          | 	byte	0
36435                 | LR__5888
36435     6D 69 64 24 
36439     3A 20       | 	byte	"mid$: "
3643b     00          | 	byte	0
3643c                 | LR__5889
3643c     43 61 6E 6E 
36440     6F 74 20 63 
36444     72 65 61 74 
36448     65 20 61 20 
3644c     64 69 72 65 
36450     63 74 6F 72 
36454     79 3A 20 73 
36458     79 73 74 65 
3645c     6D 20 65 72 
36460     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36464     00          | 	byte	0
36465                 | LR__5890
36465     20 42 41 53 
36469     49 43 20 62 
3646d     79 74 65 73 
36471     20 66 72 65 
36475     65          | 	byte	" BASIC bytes free"
36476     00          | 	byte	0
36477                 | LR__5891
36477                 | 	byte	
36477     00          | 	byte	0
36478                 | LR__5892
36478                 | 	byte	
36478     00          | 	byte	0
36479                 | LR__5893
36479                 | 	byte	
36479     00          | 	byte	0
3647a                 | LR__5894
3647a     6E 6F 6E 61 
3647e     6D 65 2E 62 
36482     61 73       | 	byte	"noname.bas"
36484     00          | 	byte	0
36485                 | LR__5895
36485     66 69 6C 65 
36489     6E 61 6D 65 
3648d     20 65 78 70 
36491     65 63 74 65 
36495     64          | 	byte	"filename expected"
36496     00          | 	byte	0
36497                 | LR__5896
36497     72 65 61 64 | 	byte	"read"
3649b     00          | 	byte	0
3649c                 | LR__5897
3649c     77 72 69 74 
364a0     65          | 	byte	"write"
364a1     00          | 	byte	0
364a2                 | LR__5898
364a2     61 70 70 65 
364a6     6E 64       | 	byte	"append"
364a8     00          | 	byte	0
364a9                 | LR__5899
364a9     63 68 61 6E 
364ad     6E 65 6C 23 
364b1     20 65 78 70 
364b5     65 63 74 65 
364b9     64          | 	byte	"channel# expected"
364ba     00          | 	byte	0
364bb                 | LR__5900
364bb     4F 70 65 6E 
364bf     3A 20 69 6E 
364c3     76 61 6C 69 
364c7     64 20 6D 6F 
364cb     64 65       | 	byte	"Open: invalid mode"
364cd     00          | 	byte	0
364ce                 | LR__5901
364ce     70 61 64 68 
364d2     3A 20       | 	byte	"padh: "
364d4     00          | 	byte	0
364d5                 | LR__5902
364d5     70 61 64 72 
364d9     78 3A 20    | 	byte	"padrx: "
364dc     00          | 	byte	0
364dd                 | LR__5903
364dd     70 61 64 72 
364e1     79 3A 20    | 	byte	"padry: "
364e4     00          | 	byte	0
364e5                 | LR__5904
364e5     70 61 64 72 
364e9     7A 3A 20    | 	byte	"padrz: "
364ec     00          | 	byte	0
364ed                 | LR__5905
364ed     70 61 64 78 
364f1     3A 20       | 	byte	"padx: "
364f3     00          | 	byte	0
364f4                 | LR__5906
364f4     70 61 64 79 
364f8     3A 20       | 	byte	"pady: "
364fa     00          | 	byte	0
364fb                 | LR__5907
364fb     70 61 64 7A 
364ff     3A 20       | 	byte	"padz: "
36501     00          | 	byte	0
36502                 | LR__5908
36502     50 72 69 6E 
36506     74 20 74 6F 
3650a     20 63 68 61 
3650e     6E 6E 65 6C 
36512     20 28 6E 6F 
36516     74 20 79 65 
3651a     74 20 69 6D 
3651e     70 6C 65 6D 
36522     65 6E 74 65 
36526     64 29       | 	byte	"Print to channel (not yet implemented)"
36528     00          | 	byte	0
36529                 | LR__5909
36529                 | 	byte	
36529     00          | 	byte	0
3652a                 | LR__5910
3652a     64 61 74 61 | 	byte	"data"
3652e     00          | 	byte	0
3652f                 | LR__5911
3652f                 | 	byte	
3652f     00          | 	byte	0
36530                 | LR__5912
36530     49 6E 20 72 
36534     65 61 64 3A 
36538     20          | 	byte	"In read: "
36539     00          | 	byte	0
3653a                 | LR__5913
3653a                 | 	byte	
3653a     00          | 	byte	0
3653b                 | LR__5914
3653b                 | 	byte	
3653b     00          | 	byte	0
3653c                 | LR__5915
3653c     2C          | 	byte	","
3653d     00          | 	byte	0
3653e                 | LR__5916
3653e                 | 	byte	
3653e     00          | 	byte	0
3653f                 | LR__5917
3653f                 | 	byte	
3653f     00          | 	byte	0
36540                 | LR__5918
36540                 | 	byte	
36540     00          | 	byte	0
36541                 | LR__5919
36541                 | 	byte	
36541     00          | 	byte	0
36542                 | LR__5920
36542                 | 	byte	
36542     00          | 	byte	0
36543                 | LR__5921
36543     72 69 67 68 
36547     74 24 3A 20 | 	byte	"right$: "
3654b     00          | 	byte	0
3654c                 | LR__5922
3654c     72 69 67 68 
36550     74 24 3A 20 | 	byte	"right$: "
36554     00          | 	byte	0
36555                 | LR__5923
36555     72 6E 64 3A 
36559     20          | 	byte	"rnd: "
3655a     00          | 	byte	0
3655b                 | LR__5924
3655b     72 6E 64 3A 
3655f     20          | 	byte	"rnd: "
36560     00          | 	byte	0
36561                 | LR__5925
36561                 | 	byte	
36561     00          | 	byte	0
36562                 | LR__5926
36562     53 74 6F 70 
36566     70 65 64 20 
3656a     61 74 20 6C 
3656e     69 6E 65 20 | 	byte	"Stopped at line "
36572     00          | 	byte	0
36573                 | LR__5927
36573                 | 	byte	
36573     00          | 	byte	0
36574                 | LR__5928
36574     2F          | 	byte	"/"
36575     00          | 	byte	0
36576                 | LR__5929
36576                 | 	byte	
36576     00          | 	byte	0
36577                 | LR__5930
36577     53 61 76 65 
3657b     64 20 61 73 
3657f     20          | 	byte	"Saved as "
36580     00          | 	byte	0
36581                 | LR__5931
36581     2F          | 	byte	"/"
36582     00          | 	byte	0
36583                 | LR__5932
36583     73 69 6E 3A 
36587     20          | 	byte	"sin: "
36588     00          | 	byte	0
36589                 | LR__5933
36589     73 71 72 3A 
3658d     20          | 	byte	"sqr: "
3658e     00          | 	byte	0
3658f                 | LR__5934
3658f     73 74 69 63 
36593     6B 3A 20    | 	byte	"stick: "
36596     00          | 	byte	0
36597                 | LR__5935
36597     73 74 72 69 
3659b     67 3A 20    | 	byte	"strig: "
3659e     00          | 	byte	0
3659f                 | LR__5936
3659f     74 61 6E 3A 
365a3     20          | 	byte	"tan: "
365a4     00          | 	byte	0
365a5                 | LR__5937
365a5     76 61 6C 3A 
365a9     20          | 	byte	"val: "
365aa     00          | 	byte	0
365ab                 | LR__5938
365ab     76 61 6C 3A 
365af     20          | 	byte	"val: "
365b0     00          | 	byte	0
365b1                 | LR__5939
365b1     24          | 	byte	"$"
365b2     00          | 	byte	0
365b3                 | LR__5940
365b3     26 68       | 	byte	"&h"
365b5     00          | 	byte	0
365b6                 | LR__5941
365b6     25          | 	byte	"%"
365b7     00          | 	byte	0
365b8                 | LR__5942
365b8     26 62       | 	byte	"&b"
365ba     00          | 	byte	0
365bb                 | LR__5943
365bb                 | 	byte	
365bb     00          | 	byte	0
365bc                 | LR__5944
365bc     45 78 70 65 
365c0     63 74 65 64 
365c4     20 6E 75 6D 
365c8     62 65 72 2C 
365cc     20 67 6F 74 
365d0     20 73 6F 6D 
365d4     65 74 68 69 
365d8     6E 67 20 65 
365dc     6C 73 65    | 	byte	"Expected number, got something else"
365df     00          | 	byte	0
365e0                 | LR__5945
365e0     43 61 6E 6E 
365e4     6F 74 20 61 
365e8     64 64 20 61 
365ec     20 6E 75 6D 
365f0     62 65 72 20 
365f4     74 6F 20 61 
365f8     20 73 74 72 
365fc     69 6E 67    | 	byte	"Cannot add a number to a string"
365ff     00          | 	byte	0
36600                 | LR__5946
36600     43 61 6E 6E 
36604     6F 74 20 73 
36608     75 62 73 74 
3660c     72 61 63 74 
36610     20 73 74 72 
36614     69 6E 67 73 | 	byte	"Cannot substract strings"
36618     00          | 	byte	0
36619                 | LR__5947
36619     55 6E 6B 6E 
3661d     6F 77 6E 20 
36621     65 72 72 6F 
36625     72 20 77 68 
36629     69 6C 65 20 
3662d     61 64 64 69 
36631     6E 67       | 	byte	"Unknown error while adding"
36633     00          | 	byte	0
36634                 | LR__5948
36634     55 6E 6B 6E 
36638     6F 77 6E 20 
3663c     65 72 72 6F 
36640     72 20 77 68 
36644     69 6C 65 20 
36648     73 75 62 73 
3664c     74 72 61 63 
36650     74 69 6E 67 | 	byte	"Unknown error while substracting"
36654     00          | 	byte	0
36655                 | LR__5949
36655     43 61 6E 6E 
36659     6F 74 20 64 
3665d     6F 20 6C 6F 
36661     67 69 63 20 
36665     6F 70 65 72 
36669     61 74 69 6F 
3666d     6E 20 6F 6E 
36671     20 73 74 72 
36675     69 6E 67 20 
36679     6F 72 20 66 
3667d     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
36681     00          | 	byte	0
36682                 | LR__5950
36682     55 6E 6B 6E 
36686     6F 77 6E 20 
3668a     65 72 72 6F 
3668e     72 20 77 68 
36692     69 6C 65 20 
36696     64 6F 69 6E 
3669a     67 20 6C 6F 
3669e     67 69 63 20 
366a2     6F 70 65 72 
366a6     61 74 69 6F 
366aa     6E          | 	byte	"Unknown error while doing logic operation"
366ab     00          | 	byte	0
366ac                 | LR__5951
366ac     43 61 6E 6E 
366b0     6F 74 20 6D 
366b4     75 6C 74 69 
366b8     70 6C 79 20 
366bc     73 74 72 69 
366c0     6E 67 73    | 	byte	"Cannot multiply strings"
366c3     00          | 	byte	0
366c4                 | LR__5952
366c4     55 6E 6B 6E 
366c8     6F 77 6E 20 
366cc     65 72 72 6F 
366d0     72 20 77 68 
366d4     69 6C 65 20 
366d8     6D 75 6C 74 
366dc     69 70 6C 79 
366e0     69 6E 67    | 	byte	"Unknown error while multiplying"
366e3     00          | 	byte	0
366e4                 | LR__5953
366e4     43 61 6E 6E 
366e8     6F 74 20 64 
366ec     69 76 69 64 
366f0     65 20 73 74 
366f4     72 69 6E 67 
366f8     73          | 	byte	"Cannot divide strings"
366f9     00          | 	byte	0
366fa                 | LR__5954
366fa     55 6E 6B 6E 
366fe     6F 77 6E 20 
36702     65 72 72 6F 
36706     72 20 77 68 
3670a     69 6C 65 20 
3670e     64 69 76 69 
36712     64 69 6E 67 | 	byte	"Unknown error while dividing"
36716     00          | 	byte	0
36717                 | LR__5955
36717     43 61 6E 6E 
3671b     6F 74 20 63 
3671f     6F 6D 70 75 
36723     74 65 20 61 
36727     20 70 6F 77 
3672b     65 72 20 6F 
3672f     66 20 61 20 
36733     73 74 72 69 
36737     6E 67       | 	byte	"Cannot compute a power of a string"
36739     00          | 	byte	0
3673a                 | LR__5956
3673a     55 6E 6B 6E 
3673e     6F 77 6E 20 
36742     65 72 72 6F 
36746     72 20 77 68 
3674a     69 6C 65 20 
3674e     63 6F 6D 70 
36752     75 74 69 6E 
36756     67 20 61 20 
3675a     70 6F 77 65 
3675e     72          | 	byte	"Unknown error while computing a power"
3675f     00          | 	byte	0
36760                 | LR__5957
36760     52 69 67 68 
36764     74 20 70 61 
36768     72 65 6E 74 
3676c     68 65 73 69 
36770     73 20 65 78 
36774     70 65 63 74 
36778     65 64       | 	byte	"Right parenthesis expected"
3677a     00          | 	byte	0
3677b                 | LR__5958
3677b     45 78 70 65 
3677f     63 74 65 64 
36783     20 73 74 72 
36787     69 6E 67    | 	byte	"Expected string"
3678a     00          | 	byte	0
3678b                 | LR__5959
3678b     45 78 70 65 
3678f     63 74 65 64 
36793     20 66 6C 6F 
36797     61 74       | 	byte	"Expected float"
36799     00          | 	byte	0
3679a                 | LR__5960
3679a     45 78 70 65 
3679e     63 74 65 64 
367a2     20 75 6E 73 
367a6     69 67 6E 65 
367aa     64 20 69 6E 
367ae     74 65 67 65 
367b2     72          | 	byte	"Expected unsigned integer"
367b3     00          | 	byte	0
367b4                 | LR__5961
367b4     45 78 70 65 
367b8     63 74 65 64 
367bc     20 69 6E 74 
367c0     65 67 65 72 | 	byte	"Expected integer"
367c4     00          | 	byte	0
367c5                 | LR__5962
367c5     4E 6F 20 6D 
367c9     6F 72 65 20 
367cd     76 61 72 69 
367d1     61 62 6C 65 
367d5     20 73 6C 6F 
367d9     74 73       | 	byte	"No more variable slots"
367db     00          | 	byte	0
367dc                 | LR__5963
367dc     56 61 72 69 
367e0     61 62 6C 65 
367e4     20 6E 6F 74 
367e8     20 66 6F 75 
367ec     6E 64       | 	byte	"Variable not found"
367ee     00          | 	byte	0
367ef                 | LR__5964
367ef     43 6F 6D 6D 
367f3     61 20 65 78 
367f7     70 65 63 74 
367fb     65 64       | 	byte	"Comma expected"
367fd     00          | 	byte	0
367fe                 | LR__5965
367fe     43 6F 6D 6D 
36802     61 20 6F 72 
36806     20 73 65 6D 
3680a     69 63 6F 6C 
3680e     6F 6E 20 65 
36812     78 70 65 63 
36816     74 65 64    | 	byte	"Comma or semicolon expected"
36819     00          | 	byte	0
3681a                 | LR__5966
3681a     55 6E 6B 6E 
3681e     6F 77 6E 20 
36822     63 6F 6D 6D 
36826     61 6E 64    | 	byte	"Unknown command"
36829     00          | 	byte	0
3682a                 | LR__5967
3682a     53 74 61 63 
3682e     6B 20 75 6E 
36832     64 65 72 66 
36836     6C 6F 77    | 	byte	"Stack underflow"
36839     00          | 	byte	0
3683a                 | LR__5968
3683a     43 61 6E 6E 
3683e     6F 74 20 65 
36842     78 65 63 75 
36846     74 65 20 67 
3684a     6F 74 6F 20 
3684e     6F 72 20 67 
36852     6F 73 75 62 
36856     20 69 6E 20 
3685a     74 68 65 20 
3685e     69 6D 6D 65 
36862     64 69 61 74 
36866     65 20 6D 6F 
3686a     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
3686c     00          | 	byte	0
3686d                 | LR__5969
3686d     43 61 6E 6E 
36871     6F 74 20 6C 
36875     6F 61 64 20 
36879     66 72 6F 6D 
3687d     20 74 68 69 
36881     73 20 66 69 
36885     6C 65       | 	byte	"Cannot load from this file"
36887     00          | 	byte	0
36888                 | LR__5970
36888     54 68 65 20 
3688c     70 72 6F 67 
36890     72 61 6D 20 
36894     69 73 20 65 
36898     6D 70 74 79 | 	byte	"The program is empty"
3689c     00          | 	byte	0
3689d                 | LR__5971
3689d     49 66 20 61 
368a1     66 74 65 72 
368a5     20 69 66    | 	byte	"If after if"
368a8     00          | 	byte	0
368a9                 | LR__5972
368a9     45 6D 70 74 
368ad     79 20 65 78 
368b1     70 72 65 73 
368b5     73 69 6F 6E | 	byte	"Empty expression"
368b9     00          | 	byte	0
368ba                 | LR__5973
368ba     53 74 72 69 
368be     6E 67 20 65 
368c2     78 70 65 63 
368c6     74 65 64    | 	byte	"String expected"
368c9     00          | 	byte	0
368ca                 | LR__5974
368ca     49 6E 74 65 
368ce     72 70 72 65 
368d2     74 65 72 20 
368d6     69 6E 74 65 
368da     72 6E 61 6C 
368de     20 65 72 72 
368e2     6F 72       | 	byte	"Interpreter internal error"
368e4     00          | 	byte	0
368e5                 | LR__5975
368e5     45 78 70 65 
368e9     63 74 65 64 
368ed     20 61 73 73 
368f1     69 67 6E    | 	byte	"Expected assign"
368f4     00          | 	byte	0
368f5                 | LR__5976
368f5     45 78 70 65 
368f9     63 74 65 64 
368fd     20 27 74 6F 
36901     27          | 	byte	"Expected 'to'"
36902     00          | 	byte	0
36903                 | LR__5977
36903     45 78 70 65 
36907     63 74 65 64 
3690b     20 69 6E 74 
3690f     65 67 65 72 
36913     20 76 61 72 
36917     69 61 62 6C 
3691b     65          | 	byte	"Expected integer variable"
3691c     00          | 	byte	0
3691d                 | LR__5978
3691d     55 6E 69 6E 
36921     69 74 69 61 
36925     6C 69 7A 65 
36929     64 20 76 61 
3692d     72 69 61 62 
36931     6C 65 20 69 
36935     6E 20 27 6E 
36939     65 78 74 27 
3693d     2C 20 75 73 
36941     65 20 27 66 
36945     6F 72 27 20 
36949     62 65 66 6F 
3694d     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
3694f     00          | 	byte	0
36950                 | LR__5979
36950     4E 6F 20 6D 
36954     6F 72 65 20 
36958     73 6C 6F 74 
3695c     73 20 66 6F 
36960     72 20 27 66 
36964     6F 72 27    | 	byte	"No more slots for 'for'"
36967     00          | 	byte	0
36968                 | LR__5980
36968     27 4E 65 78 
3696c     74 27 20 64 
36970     6F 65 73 6E 
36974     27 74 20 6D 
36978     61 74 63 68 
3697c     20 27 66 6F 
36980     72 27       | 	byte	"'Next' doesn't match 'for'"
36982     00          | 	byte	0
36983                 | LR__5981
36983     27 47 6F 74 
36987     6F 27 20 74 
3698b     61 72 67 65 
3698f     74 20 6C 69 
36993     6E 65 20 6E 
36997     6F 74 20 66 
3699b     6F 75 6E 64 | 	byte	"'Goto' target line not found"
3699f     00          | 	byte	0
369a0                 | LR__5982
369a0     42 61 64 20 
369a4     6E 75 6D 62 
369a8     65 72 20 6F 
369ac     66 20 70 61 
369b0     72 61 6D 65 
369b4     74 65 72 73 | 	byte	"Bad number of parameters"
369b8     00          | 	byte	0
369b9                 | LR__5983
369b9     46 75 6E 63 
369bd     74 69 6F 6E 
369c1     20 75 6E 64 
369c5     65 66 69 6E 
369c9     65 64 20 66 
369cd     6F 72 20 73 
369d1     74 72 69 6E 
369d5     67 73       | 	byte	"Function undefined for strings"
369d7     00          | 	byte	0
369d8                 | LR__5984
369d8     42 61 64 20 
369dc     70 61 72 61 
369e0     6D 65 74 65 
369e4     72          | 	byte	"Bad parameter"
369e5     00          | 	byte	0
369e6                 | LR__5985
369e6     43 61 6E 6E 
369ea     6F 74 20 64 
369ee     65 63 6C 61 
369f2     72 65 20 61 
369f6     6E 20 61 72 
369fa     72 61 79 3A 
369fe     20 74 68 65 
36a02     20 76 61 72 
36a06     69 61 62 6C 
36a0a     65 20 65 78 
36a0e     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
36a12     00          | 	byte	0
36a13                 | LR__5986
36a13     45 78 70 65 
36a17     63 74 65 64 
36a1b     20 27 28 27 | 	byte	"Expected '('"
36a1f     00          | 	byte	0
36a20                 | LR__5987
36a20     45 78 70 65 
36a24     63 74 65 64 
36a28     20 27 29 27 
36a2c     20 6F 72 20 
36a30     27 2C 27    | 	byte	"Expected ')' or ','"
36a33     00          | 	byte	0
36a34                 | LR__5988
36a34     4E 6F 20 6D 
36a38     6F 72 65 20 
36a3c     74 68 61 6E 
36a40     20 33 20 64 
36a44     69 6D 65 6E 
36a48     73 69 6F 6E 
36a4c     73 20 73 75 
36a50     70 70 6F 72 
36a54     74 65 64    | 	byte	"No more than 3 dimensions supported"
36a57     00          | 	byte	0
36a58                 | LR__5989
36a58     56 61 72 69 
36a5c     61 62 6C 65 
36a60     20 6E 61 6D 
36a64     65 20 65 78 
36a68     70 65 63 74 
36a6c     65 64       | 	byte	"Variable name expected"
36a6e     00          | 	byte	0
36a6f                 | LR__5990
36a6f     54 79 70 65 
36a73     20 6E 61 6D 
36a77     65 20 65 78 
36a7b     70 65 63 74 
36a7f     65 64       | 	byte	"Type name expected"
36a81     00          | 	byte	0
36a82                 | LR__5991
36a82     54 79 70 65 
36a86     20 6E 6F 74 
36a8a     20 73 75 70 
36a8e     70 6F 72 74 
36a92     65 64 20 79 
36a96     65 74       | 	byte	"Type not supported yet"
36a98     00          | 	byte	0
36a99                 | LR__5992
36a99     41 72 72 61 
36a9d     79 20 69 6E 
36aa1     64 65 78 20 
36aa5     6F 75 74 20 
36aa9     6F 66 20 72 
36aad     61 6E 67 65 | 	byte	"Array index out of range"
36ab1     00          | 	byte	0
36ab2                 | LR__5993
36ab2     42 61 64 20 
36ab6     74 79 70 65 
36aba     20 77 68 69 
36abe     6C 65 20 61 
36ac2     73 73 69 67 
36ac6     6E 69 6E 67 
36aca     20 74 6F 20 
36ace     61 72 72 61 
36ad2     79          | 	byte	"Bad type while assigning to array"
36ad3     00          | 	byte	0
36ad4                 | LR__5994
36ad4     54 6F 6F 20 
36ad8     6D 61 6E 79 
36adc     20 76 61 72 
36ae0     69 61 62 6C 
36ae4     65 73       | 	byte	"Too many variables"
36ae6     00          | 	byte	0
36ae7                 | LR__5995
36ae7     27 54 68 65 
36aeb     6E 27 20 65 
36aef     78 70 65 63 
36af3     74 65 64    | 	byte	"'Then' expected"
36af6     00          | 	byte	0
36af7                 | LR__5996
36af7     44 69 72 65 
36afb     63 74 6F 72 
36aff     79 20 64 6F 
36b03     65 73 6E 27 
36b07     74 20 65 78 
36b0b     69 73 74    | 	byte	"Directory doesn't exist"
36b0e     00          | 	byte	0
36b0f                 | LR__5997
36b0f     55 6E 65 78 
36b13     70 65 63 74 
36b17     65 64 20 65 
36b1b     6E 64 20 6F 
36b1f     66 20 6C 69 
36b23     6E 65       | 	byte	"Unexpected end of line"
36b25     00          | 	byte	0
36b26                 | LR__5998
36b26     4E 6F 20 6D 
36b2a     6F 72 65 20 
36b2e     64 61 74 61 | 	byte	"No more data"
36b32     00          | 	byte	0
36b33                 | LR__5999
36b33     45 72 72 6F 
36b37     72 20       | 	byte	"Error "
36b39     00          | 	byte	0
36b3a                 | LR__6000
36b3a     20 2D 20    | 	byte	" - "
36b3d     00          | 	byte	0
36b3e                 | LR__6001
36b3e     20 69 6E 20 
36b42     6C 69 6E 65 
36b46     20          | 	byte	" in line "
36b47     00          | 	byte	0
36b48                 | LR__6002
36b48                 | 	byte	
36b48     00          | 	byte	0
36b49                 | LR__6003
36b49     2F 73 64    | 	byte	"/sd"
36b4c     00          | 	byte	0
36b4d                 | LR__6004
36b4d     2F 73 64 2F 
36b51     62 61 73    | 	byte	"/sd/bas"
36b54     00          | 	byte	0
36b55                 | LR__6005
36b55     2F 73 64 2F 
36b59     62 61 73    | 	byte	"/sd/bas"
36b5c     00          | 	byte	0
36b5d                 | LR__6006
36b5d     20 42 41 53 
36b61     49 43 20 62 
36b65     79 74 65 73 
36b69     20 66 72 65 
36b6d     65          | 	byte	" BASIC bytes free"
36b6e     00          | 	byte	0
36b6f                 | LR__6007
36b6f     52 65 61 64 
36b73     79          | 	byte	"Ready"
36b74     00          | 	byte	0
36b75                 | LR__6008
36b75     6E 6F 6E 61 
36b79     6D 65 2E 62 
36b7d     61 73       | 	byte	"noname.bas"
36b7f     00          | 	byte	0
36b80                 | LR__6009
36b80     2F 73 64 2F 
36b84     62 61 73 2F 
36b88     61 75 74 6F 
36b8c     72 75 6E 2E 
36b90     62 61 73    | 	byte	"/sd/bas/autorun.bas"
36b93     00          | 	byte	0
36b94                 | LR__6010
36b94     72 75 6E 20 
36b98     61 75 74 6F 
36b9c     72 75 6E 2E 
36ba0     62 61 73    | 	byte	"run autorun.bas"
36ba3     00          | 	byte	0
36ba4                 | LR__6011
36ba4                 | 	byte	
36ba4     00          | 	byte	0
36ba5     00 00 00    | 	alignl
36ba8                 | _dat_
36ba8     00 00 00 00 
36bac     00 00 00 00 
36bb0     00 00 00 00 
36bb4     00 00 00 00 | 	byte	$00[16]
36bb8     61 41 17 0E 
36bbc     62 42 00 00 
36bc0     63 43 19 10 
36bc4     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
36bc8     65 45 18 0F 
36bcc     66 46 00 00 
36bd0     67 47 00 00 
36bd4     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
36bd8     69 49 00 00 
36bdc     6A 4A 00 00 
36be0     6B 4B 00 00 
36be4     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
36be8     6D 4D 00 00 
36bec     6E 4E 1A 11 
36bf0     6F 4F 1E 15 
36bf4     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
36bf8     71 51 00 00 
36bfc     72 52 00 00 
36c00     73 53 1B 12 
36c04     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
36c08     75 55 00 00 
36c0c     76 56 00 00 
36c10     77 57 00 00 
36c14     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
36c18     79 59 00 00 
36c1c     7A 5A 1D 14 
36c20     31 21 04 00 
36c24     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
36c28     33 23 06 00 
36c2c     34 24 07 00 
36c30     35 25 08 00 
36c34     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
36c38     37 26 0A 00 
36c3c     38 2A 0B 00 
36c40     39 28 0C 00 
36c44     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
36c48     8D 8D 00 00 
36c4c     9B 9B 00 00 
36c50     88 88 00 00 
36c54     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
36c58     20 20 00 00 
36c5c     2D 5F 00 00 
36c60     3D 2B 00 00 
36c64     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
36c68     5D 7D 00 00 
36c6c     5C 7C 00 00 
36c70     23 7E 00 00 
36c74     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
36c78     27 22 00 00 
36c7c     60 7E 03 00 
36c80     2C 3C 00 00 
36c84     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
36c88     2F 3F 00 00 
36c8c     B9 B9 00 00 
36c90     BA 00 00 00 
36c94     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
36c98     BC 00 00 00 
36c9c     BD 00 00 00 
36ca0     BE 00 00 00 
36ca4     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
36ca8     C0 00 00 00 
36cac     C1 00 00 00 
36cb0     C2 00 00 00 
36cb4     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
36cb8     C4 00 00 00 
36cbc     C5 00 00 00 
36cc0     C6 00 00 00 
36cc4     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
36cc8     C8 00 00 00 
36ccc     C9 00 00 00 
36cd0     CA 00 00 00 
36cd4     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
36cd8     7F 7F 00 00 
36cdc     CC 00 00 00 
36ce0     CD 00 00 00 
36ce4     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
36ce8     CF 00 00 00 
36cec     D0 00 00 00 
36cf0     D1 00 00 00 
36cf4     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
36cf8     2F 2F 00 00 
36cfc     2A 2A 00 00 
36d00     2D 2D 00 00 
36d04     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
36d08     8D 8D 00 00 
36d0c     31 31 00 00 
36d10     32 32 00 00 
36d14     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
36d18     34 34 00 00 
36d1c     35 35 00 00 
36d20     36 36 00 00 
36d24     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
36d28     38 38 00 00 
36d2c     39 39 00 00 
36d30     30 30 00 00 
36d34     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
36d38     5C 7C 00 00 
36d3c     00 00 00 00 
36d40     00 00 00 00 
36d44     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
36d48     00 00 00 00 
      ...             
36da0     00 00 00 00 
36da4     00 00 00 00 | 	byte	$00[96]
36da8     2B 00 A6 F2 
36dac     24 A7 09 80 
36db0     5B 88 4D 89 
36db4     80 88 A5 88 | atari_spl file "atari.spl"
36db8     6D 88 B8 88 
36dbc     80 88 CB 88 
36dc0     92 88 A5 88 
36dc4     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
36dc8     A5 88 CA 88 
36dcc     A6 88 DD 88 
36dd0     B8 88 AB 89 
36dd4     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
36dd8     C8 AD C6 F1 
36ddc     91 06 B6 FF 
36de0     13 00 4A 00 
36de4     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
36de8     5D 00 5E 00 
36dec     5D 00 5E 00 
36df0     5E 00 5D 00 
36df4     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
36df8     38 00 83 00 
36dfc     25 00 83 00 
36e00     C3 FE D1 04 
36e04     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
36e08     48 88 38 85 
36e0c     41 8A CB 88 
36e10     28 89 B8 88 
36e14     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
36e18     15 89 03 89 
36e1c     02 89 15 89 
36e20     16 89 15 89 
36e24     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
36e28     15 89 3A 89 
36e2c     72 89 E3 89 
36e30     52 83 AD 97 
36e34     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
36e38     0C 02 B6 FF 
36e3c     E1 00 A8 00 
36e40     F3 00 A8 00 
36e44     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
36e48     CE 00 CD 00 
36e4c     CD 00 BA 00 
36e50     E1 00 BB 00 
36e54     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
36e58     DF 00 C9 FF 
36e5c     E6 01 B6 06 
36e60     EE DD 8D 98 
36e64     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
36e68     97 89 73 89 
36e6c     3B 89 60 89 
36e70     60 89 60 89 
36e74     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
36e78     73 89 72 89 
36e7c     85 89 73 89 
36e80     AA 89 60 89 
36e84     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
36e88     E8 8A 18 86 
36e8c     92 88 A5 C2 
36e90     E0 00 C3 05 
36e94     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
36e98     F2 00 64 01 
36e9c     06 01 3E 01 
36ea0     2B 01 2B 01 
36ea4     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
36ea8     2B 01 2A 01 
36eac     2B 01 2B 01 
36eb0     2B 01 18 01 
36eb4     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
36eb8     39 07 61 F3 
36ebc     C0 AF 37 85 
36ec0     0F 88 8B 8A 
36ec4     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
36ec8     AB 89 D0 89 
36ecc     AB 89 D0 89 
36ed0     D0 89 CF 89 
36ed4     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
36ed8     D0 89 F5 89 
36edc     BD 89 08 8A 
36ee0     CF 89 E8 8A 
36ee4     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
36ee8     53 B3 0D F8 
36eec     F4 07 38 00 
36ef0     63 01 63 01 
36ef4     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
36ef8     88 01 88 01 
36efc     76 01 88 01 
36f00     88 01 89 01 
36f04     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
36f08     75 01 AE 01 
36f0c     76 01 88 01 
36f10     4A 00 46 06 
36f14     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
36f18     08 8A 9A 86 
36f1c     33 8B 08 8A 
36f20     2D 8A F5 89 
36f24     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
36f28     2D 8A 2D 8A 
36f2c     2E 8A 1B 8A 
36f30     40 8A 2D 8A 
36f34     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
36f38     2E 8A 79 8A 
36f3c     66 8A C8 8B 
36f40     72 82 2B 97 
36f44     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
36f48     1D 02 05 01 
36f4c     F8 01 C0 01 
36f50     0B 02 C0 01 
36f54     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
36f58     F9 01 D3 01 
36f5c     F8 01 D3 01 
36f60     F8 01 D2 01 
36f64     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
36f68     E6 01 2B 01 
36f6c     8E 02 5F 07 
36f70     F7 E2 ED 9C 
36f74     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
36f78     E8 8A 78 8A 
36f7c     78 8A 65 8A 
36f80     8B 8A 78 8A 
36f84     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
36f88     8B 8A 9D 8A 
36f8c     9D 8A 8B 8A 
36f90     C2 8A 78 8A 
36f94     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
36f98     70 8C 18 86 
36f9c     8B 8A 23 C9 
36fa0     CB 03 C4 05 
36fa4     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
36fa8     0B 02 7B 02 
36fac     1E 02 55 02 
36fb0     30 02 43 02 
36fb4     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
36fb8     43 02 44 02 
36fbc     43 02 30 02 
36fc0     68 02 31 02 
36fc4     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
36fc8     07 08 3F F7 
36fcc     73 B2 13 85 
36fd0     15 89 ED 8B 
36fd4     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
36fd8     B0 8A FB 8A 
36fdc     D5 8A FA 8A 
36fe0     E8 8A FB 8A 
36fe4     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
36fe8     E8 8A 21 8B 
36fec     E7 8A 33 8B 
36ff0     E8 8A 26 8C 
36ff4     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
36ff8     8D B0 27 F6 
36ffc     9C 08 AD 01 
37000     7B 02 8D 02 
37004     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37008     A1 02 A0 02 
3700c     A1 02 A0 02 
37010     A0 02 A0 02 
37014     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37018     7B 02 D8 02 
3701c     7B 02 C6 02 
37020     3E 01 C3 05 
37024     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37028     00 8C 2A 86 
3702c     E0 8C FA 8A 
37030     6A 8B FB 8A 
37034     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37038     45 8B 45 8B 
3703c     45 8B 6B 8B 
37040     46 8B 59 8B 
37044     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
37048     6B 8B 6B 8B 
3704c     6B 8B 6B 8B 
37050     7D 8B 7D 8B 
37054     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
37058     90 8B 91 8B 
3705c     90 8B 90 8B 
37060     A3 8B A3 8B 
37064     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
37068     B5 8B B6 8B 
3706c     B5 8B B5 8B 
37070     B6 8B C8 8B 
37074     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
37078     C8 8B DA 8B 
3707c     DB 8B DB 8B 
37080     DB 8B DC 8B 
37084     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
37088     EE 8B EE 8B 
3708c     00 8C 01 8C 
37090     00 8C 01 8C 
37094     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
37098     12 8C 13 8C 
3709c     13 8C 26 8C 
370a0     26 8C 26 8C 
370a4     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
370a8     38 8C 38 8C 
370ac     38 8C 38 8C 
370b0     4B 8C 4B 8C 
370b4     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
370b8     5E 8C 5E 8C 
370bc     5E 8C 5E 8C 
370c0     70 8C 70 8C 
370c4     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
370c8     70 8C 83 8C 
370cc     83 8C 83 8C 
370d0     83 8C 96 8C 
370d4     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
370d8     95 8C A9 8C 
370dc     A9 8C A8 8C 
370e0     A8 8C A8 8C 
370e4     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
370e8     BB 8C BB 8C 
370ec     BB 8C CE 8C 
370f0     CE 8C CE 8C 
370f4     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
370f8     E0 8C E1 8C 
370fc     E1 8C E0 8C 
37100     F4 8C F2 8C 
37104     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37108     05 8D 05 8D 
3710c     06 8D 06 8D 
37110     19 8D 19 8D 
37114     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37118     18 8D 2B 8D 
3711c     2B 8D 2B 8D 
37120     2A 8D 3E 8D 
37124     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
37128     3E 8D 51 8D 
3712c     50 8D 50 8D 
37130     50 8D 51 8D 
37134     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
37138     63 8D 64 8D 
3713c     76 8D 75 8D 
37140     75 8D 76 8D 
37144     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
37148     88 8D 88 8D 
3714c     89 8D 9B 8D 
37150     9A 8D 9B 8D 
37154     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
37158     AD 8D AE 8D 
3715c     AD 8D AE 8D 
37160     C1 8D C1 8D 
37164     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
37168     D3 8D D3 8D 
3716c     D3 8D D3 8D 
37170     D3 8D E6 8D 
37174     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
37178     E6 8D E6 8D 
3717c     F9 8D F9 8D 
37180     F9 8D F8 8D 
37184     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
37188     0B 8E 0B 8E 
3718c     1D 8E 1D 8E 
37190     1E 8E 1E 8E 
37194     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
37198     31 8E 31 8E 
3719c     31 8E 42 8E 
371a0     43 8E 43 8E 
371a4     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
371a8     56 8E 56 8E 
371ac     55 8E 56 8E 
371b0     68 8E 69 8E 
371b4     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
371b8     69 8E 7B 8E 
371bc     7C 8E 7B 8E 
371c0     7B 8E 8D 8E 
371c4     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
371c8     8D 8E A1 8E 
371cc     A0 8E A1 8E 
371d0     A1 8E A0 8E 
371d4     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
371d8     B3 8E B3 8E 
371dc     C6 8E C5 8E 
371e0     C6 8E C6 8E 
371e4     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
371e8     D8 8E D9 8E 
371ec     D8 8E EC 8E 
371f0     EB 8E EC 8E 
371f4     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
371f8     FE 8E FE 8E 
371fc     FE 8E FE 8E 
37200     10 8F 10 8F 
37204     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37208     11 8F 23 8F 
3720c     24 8F 23 8F 
37210     24 8F 37 8F 
37214     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37218     36 8F 36 8F 
3721c     48 8F 49 8F 
37220     49 8F 49 8F 
37224     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
37228     5B 8F 5C 8F 
3722c     5B 8F 6E 8F 
37230     6E 8F 6E 8F 
37234     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
37238     81 8F 81 8F 
3723c     81 8F 81 8F 
37240     93 8F 93 8F 
37244     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
37248     93 8F A6 8F 
3724c     A6 8F A6 8F 
37250     A6 8F B9 8F 
37254     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
37258     B9 8F B9 8F 
3725c     CC 8F CB 8F 
37260     CB 8F CC 8F 
37264     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
37268     DF 8F DE 8F 
3726c     DE 8F F1 8F 
37270     F1 8F F1 8F 
37274     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
37278     03 90 04 90 
3727c     04 90 04 90 
37280     16 90 17 90 
37284     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37288     29 90 28 90 
3728c     29 90 28 90 
37290     29 90 3C 90 
37294     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37298     3C 90 4F 90 
3729c     4E 90 4E 90 
372a0     4E 90 4E 90 
372a4     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
372a8     61 90 61 90 
372ac     73 90 74 90 
372b0     74 90 74 90 
372b4     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
372b8     87 90 86 90 
372bc     87 90 86 90 
372c0     99 90 99 90 
372c4     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
372c8     AB 90 AB 90 
372cc     AC 90 AB 90 
372d0     AB 90 BF 90 
372d4     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
372d8     BE 90 D1 90 
372dc     D0 90 D1 90 
372e0     D1 90 D1 90 
372e4     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
372e8     E3 90 E4 90 
372ec     F6 90 F6 90 
372f0     F6 90 F6 90 
372f4     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
372f8     09 91 0A 91 
372fc     0A 91 1C 91 
37300     1C 91 1C 91 
37304     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37308     2F 91 2E 91 
3730c     2F 91 2F 91 
37310     2E 91 41 91 
37314     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37318     41 91 53 91 
3731c     54 91 54 91 
37320     53 91 54 91 
37324     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37328     67 91 67 91 
3732c     79 91 7A 91 
37330     79 91 78 91 
37334     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37338     8C 91 8B 91 
3733c     8C 91 8C 91 
37340     9E 91 9E 91 
37344     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37348     B1 91 B1 91 
3734c     B2 91 B1 91 
37350     B1 91 C4 91 
37354     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37358     C4 91 D6 91 
3735c     D7 91 D7 91 
37360     D7 91 D6 91 
37364     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37368     EA 91 EA 91 
3736c     EA 91 FC 91 
37370     FC 91 FB 91 
37374     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37378     0E 92 0F 92 
3737c     0F 92 0E 92 
37380     21 92 21 92 
37384     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37388     21 92 34 92 
3738c     33 92 34 92 
37390     34 92 47 92 
37394     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37398     46 92 47 92 
3739c     59 92 59 92 
373a0     59 92 59 92 
373a4     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
373a8     6C 92 6C 92 
373ac     6B 92 7E 92 
373b0     7E 92 7E 92 
373b4     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
373b8     92 92 91 92 
373bc     91 92 90 92 
373c0     91 92 A4 92 
373c4     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
373c8     A3 92 B6 92 
373cc     B6 92 B7 92 
373d0     B7 92 B6 92 
373d4     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
373d8     CA 92 C9 92 
373dc     CA 92 DC 92 
373e0     DC 92 DC 92 
373e4     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
373e8     EF 92 EF 92 
373ec     EF 92 EF 92 
373f0     01 93 01 93 
373f4     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
373f8     15 93 14 93 
373fc     14 93 14 93 
37400     14 93 27 93 
37404     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37408     27 93 39 93 
3740c     3A 93 39 93 
37410     39 93 39 93 
37414     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37418     4B 93 4C 93 
3741c     5F 93 5F 93 
37420     5F 93 5E 93 
37424     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37428     5F 93 84 93 
3742c     4C 93 96 93 
37430     5F 93 AE 94 
37434     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37438     7B C1 00 00 
3743c     00 00 00 00 
37440     00 00 00 00 
37444     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37448     00 00 00 00 | 	byte	$00, $00, $00, $00
3744c     7A D7 00 80 
37450     87 8A 48 8F 
37454     EC 8C 76 8D 
37458     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
3745c     3C 8D 82 8D 
37460     42 8D 88 8D 
37464     8C 8D 8E 8D 
37468     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
3746c     97 8D DE 8D 
37470     E1 8D F1 8E 
37474     D8 8C A3 83 
37478     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
3747c     65 71 C9 65 
37480     FC 64 C4 65 
37484     C1 65 BF 65 
37488     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
3748c     B6 65 B4 65 
37490     B2 65 AE 65 
37494     AC 65 ED 65 
37498     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
3749c     5E 65 25 66 
374a0     FA 62 23 6B 
374a4     B5 6C 61 0A 
374a8     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
374ac     5D 90 BE 8D 
374b0     47 8E C3 8D 
374b4     09 8E C9 8D 
374b8     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
374bc     15 8E 19 8E 
374c0     1B 8E 62 8E 
374c4     64 8E 68 8E 
374c8     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
374cc     B5 8E 4C 90 
374d0     FA 84 3C 9D 
374d4     98 13 79 6D 
374d8     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
374dc     D9 66 50 66 
374e0     D4 66 4B 66 
374e4     8C 66 46 66 
374e8     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
374ec     81 66 3A 66 
374f0     7C 66 36 66 
374f4     76 66 30 66 
374f8     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
374fc     6B 66 88 72 
37500     BF 37 E7 B7 
37504     75 83 8B 8E 
37508     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
3750c     94 8E 96 8E 
37510     DD 8E 9C 8E 
37514     E2 8E A2 8E 
37518     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
3751c     EE 8E AE 8E 
37520     38 8F B5 8E 
37524     3F 8F FD 8E 
37528     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
3752c     A5 87 1E E3 
37530     6D 5D FA 71 
37534     41 64 25 67 
37538     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
3753c     D9 66 1A 67 
37540     18 67 15 67 
37544     12 67 0F 67 
37548     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
3754c     07 67 C0 66 
37550     01 67 BC 66 
37554     B8 66 DE 64 
37558     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
3755c     43 E5 1F 8B 
37560     14 8A F1 90 
37564     1C 8F 63 8F 
37568     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
3756c     29 8F 6E 8F 
37570     72 8F 75 8F 
37574     34 8F BE 8F 
37578     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
3757c     84 8F 87 8F 
37580     CC 8F 56 90 
37584     67 91 49 80 
37588     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
3758c     46 77 A6 66 
37590     E8 66 B0 67 
37594     AD 67 ED 67 
37598     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
3759c     A2 67 E3 67 
375a0     9D 67 9A 67 
375a4     98 67 94 67 
375a8     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
375ac     49 67 CD 67 
375b0     28 65 5F 6E 
375b4     82 67 3A 01 
375b8     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
375bc     C2 91 A9 8F 
375c0     EF 8F AE 8F 
375c4     F4 8F B5 8F 
375c8     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
375cc     01 90 03 90 
375d0     07 90 09 90 
375d4     0C 90 53 90 
375d8     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
375dc     18 90 44 93 
375e0     85 84 D6 9D 
375e4     87 1F 2F 75 
375e8     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
375ec     C4 68 F6 67 
375f0     BE 68 F1 67 
375f4     76 68 2E 68 
375f8     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
375fc     27 68 24 68 
37600     64 68 1E 68 
37604     5F 68 19 68 
37608     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
3760c     DC 68 56 72 
37610     7E 36 C2 B8 
37614     D7 84 73 90 
37618     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
3761c     7B 90 7F 90 
37620     82 90 84 90 
37624     CB 90 8B 90 
37628     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
3762c     D7 90 96 90 
37630     20 91 59 90 
37634     25 91 A2 90 
37638     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
3763c     D0 89 40 EE 
37640     12 64 C4 71 
37644     29 66 0C 69 
37648     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
3764c     C0 68 02 69 
37650     FE 68 FB 68 
37654     F9 68 F6 68 
37658     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
3765c     EE 68 A8 68 
37660     2C 69 5F 68 
37664     E2 68 81 66 
37668     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
3766c     1E EB A6 8A 
37670     73 8B 5E 93 
37674     7B 90 48 91 
37678     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
3767c     0D 91 11 91 
37680     14 91 16 91 
37684     5C 91 1C 91 
37688     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
3768c     68 91 AF 91 
37690     2A 91 B5 91 
37694     75 91 1A 94 
37698     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
3769c     70 0E CB 6C 
376a0     5D 6E C4 67 
376a4     99 69 54 69 
376a8     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
376ac     D2 69 49 69 
376b0     89 69 86 69 
376b4     40 69 C4 69 
376b8     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
376bc     35 69 76 69 
376c0     58 67 EB 6D 
376c4     E9 6D 89 0F 
376c8     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
376cc     33 94 94 91 
376d0     D9 91 56 91 
376d4     E0 91 9F 91 
376d8     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
376dc     EC 91 EE 91 
376e0     F1 91 F4 91 
376e4     F7 91 3D 92 
376e8     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
376ec     46 92 21 94 
376f0     11 89 A4 9D 
376f4     FD 0E 8F 6C 
376f8     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
376fc     28 6A E1 69 
37700     65 6A 1F 6A 
37704     5F 6A 1A 6A 
37708     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
3770c     54 6A 0F 6A 
37710     4F 6A 09 6A 
37714     06 6A 03 6A 
37718     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
3771c     23 68 69 77 
37720     3A 4D 38 CA 
37724     38 86 4E 91 
37728     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
3772c     64 92 24 92 
37730     6A 92 2A 92 
37734     70 92 30 92 
37738     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
3773c     7B 92 7E 92 
37740     C5 92 84 92 
37744     CB 92 8A 92 
37748     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
3774c     4D 8D F9 E2 
37750     97 59 FE 74 
37754     DB 68 6D 6A 
37758     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
3775c     A8 6A A5 6A 
37760     A3 6A 9F 6A 
37764     9D 6A 9B 6A 
37768     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
3776c     D6 6A 8F 6A 
37770     CF 6A 46 6A 
37774     CA 6A E1 67 
37778     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
3777c     D3 F7 15 92 
37780     90 8C BF 94 
37784     A6 92 EB 92 
37788     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
3778c     B1 92 F7 92 
37790     FA 92 FD 92 
37794     00 93 02 93 
37798     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
3779c     4F 93 52 93 
377a0     54 93 22 94 
377a4     5A 93 8F 88 
377a8     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
377ac     1C 77 07 6C 
377b0     E8 69 7A 6B 
377b4     34 6B 75 6B 
377b8     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
377bc     29 6B 26 6B 
377c0     24 6B 21 6B 
377c4     1D 6B 5E 6B 
377c8     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
377cc     12 6B 52 6B 
377d0     34 69 34 6E 
377d4     BA 73 A4 24 
377d8     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
377dc     7A 94 B3 93 
377e0     72 93 31 93 
377e4     78 93 7A 93 
377e8     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
377ec     83 93 86 93 
377f0     89 93 D0 93 
377f4     D2 93 D5 93 
377f8     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
377fc     DD 93 40 96 
37800     30 8B 99 9C 
37804     52 10 94 71 
37808     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
3780c     46 6C 79 6B 
37810     40 6C B7 6B 
37814     F7 6B B1 6B 
37818     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
3781c     EC 6B A5 6B 
37820     A2 6B 9F 6B 
37824     9D 6B 9A 6B 
37828     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
3782c     C8 6A E4 76 
37830     20 4B F9 CE 
37834     2E 8A 1A 92 
37838     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
3783c     FB 93 BA 93 
37840     01 94 03 94 
37844     4A 94 09 94 
37848     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
3784c     55 94 14 94 
37850     9E 94 1A 94 
37854     61 94 20 94 
37858     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
3785c     3E 87 E5 CD 
37860     5F 50 6C 78 
37864     B5 6A 04 6C 
37868     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
3786c     83 6C 7F 6C 
37870     7C 6C 36 6C 
37874     76 6C 74 6C 
37878     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
3787c     6B 6C 25 6C 
37880     66 6C 1F 6C 
37884     1D 6C 41 6A 
37888     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
3788c     BA FA FC 94 
37890     5B 8D 97 96 
37894     3B 94 C5 94 
37898     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
3789c     89 94 8C 94 
378a0     8F 94 92 94 
378a4     94 94 DB 94 
378a8     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
378ac     E4 94 E7 94 
378b0     2D 95 74 95 
378b4     C8 96 15 89 
378b8     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
378bc     CB 75 31 6F 
378c0     7E 6B 10 6D 
378c4     C9 6C 0A 6D 
378c8     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
378cc     BD 6C FF 6C 
378d0     FB 6C F9 6C 
378d4     B2 6C F3 6C 
378d8     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
378dc     A7 6C E8 6C 
378e0     0D 6B 85 6F 
378e4     C7 74 10 28 
378e8     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
378ec     96 96 47 95 
378f0     06 95 0A 95 
378f4     0C 95 0F 95 
378f8     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
378fc     17 95 5E 95 
37900     61 95 63 95 
37904     22 95 AC 95 
37908     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
3790c     72 95 17 98 
37910     59 8E 01 96 
37914     CF FC 5A 68 
37918     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
3791c     96 6D 50 6D 
37920     D5 6D 4A 6D 
37924     8C 6D 89 6D 
37928     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
3792c     80 6D 3A 6D 
37930     7A 6D 77 6D 
37934     75 6D 71 6D 
37938     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
3793c     18 6C BC 78 
37940     9A 4F 7E CF 
37944     1F 89 F1 93 
37948     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
3794c     D2 95 4E 95 
37950     D7 95 53 95 
37954     DD 95 E0 95 
37958     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
3795c     A5 95 EB 95 
37960     EE 95 F0 95 
37964     37 96 B3 95 
37968     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
3796c     1A 98 D5 8D 
37970     C5 9F CD 0F 
37974     0F 71 F3 73 
37978     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
3797c     D9 6D 5E 6E 
37980     D3 6D 58 6E 
37984     12 6E 0F 6E 
37988     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
3798c     49 6E BF 6D 
37990     87 6E 76 6D 
37994     81 6E 11 6B 
37998     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
3799c     3F 09 44 95 
379a0     E5 8D 3F 99 
379a4     D4 95 A2 96 
379a8     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
379ac     23 96 69 96 
379b0     6B 96 6E 96 
379b4     71 96 74 96 
379b8     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
379bc     BF 96 3C 96 
379c0     C6 96 C8 96 
379c4     A3 98 51 8D 
379c8     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
379cc     CF 75 29 73 
379d0     90 6C EC 6E 
379d4     62 6E E7 6E 
379d8     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
379dc     9A 6E 98 6E 
379e0     95 6E 91 6E 
379e4     8E 6E CF 6E 
379e8     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
379ec     40 6E C3 6E 
379f0     E8 6C 45 6F 
379f4     A5 7B C9 35 
379f8     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
379fc     2D 98 23 97 
37a00     E1 96 A0 96 
37a04     A4 96 EA 96 
37a08     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
37a0c     AF 96 F4 96 
37a10     F8 96 3E 97 
37a14     FD 96 43 97 
37a18     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
37a1c     08 97 6B 99 
37a20     D6 92 88 91 
37a24     D8 EE 84 66 
37a28     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
37a2c     2E 6F E7 6E 
37a30     6C 6F 24 6F 
37a34     21 6F 1F 6F 
37a38     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
37a3c     17 6F 13 6F 
37a40     54 6F 0E 6F 
37a44     0B 6F 4B 6F 
37a48     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
37a4c     27 6D 1C 7B 
37a50     19 59 9F DB 
37a54     66 8E BC 94 
37a58     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
37a5c     67 97 26 97 
37a60     6D 97 2B 97 
37a64     72 97 32 97 
37a68     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
37a6c     C1 97 7F 97 
37a70     C6 97 85 97 
37a74     CB 97 CE 97 
37a78     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
37a7c     EC 8A C4 C6 
37a80     68 4C F4 7D 
37a84     63 6E E8 6E 
37a88     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
37a8c     ED 6F A7 6F 
37a90     E7 6F A0 6F 
37a94     E1 6F 9B 6F 
37a98     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
37a9c     D5 6F 8F 6F 
37aa0     CE 6F 45 6F 
37aa4     86 6F 68 6D 
37aa8     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
37aac     C0 13 AD A2 
37ab0     A7 8E 79 99 
37ab4     E6 97 E8 97 
37ab8     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
37abc     F1 97 F3 97 
37ac0     F6 97 F9 97 
37ac4     FB 97 FE 97 
37ac8     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
37acc     4A 98 0A 98 
37ad0     93 98 0F 98 
37ad4     7F 9B BF 8C 
37ad8     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
37adc     91 7B 62 73 
37ae0     1A 6E B9 70 
37ae4     EB 6F B3 70 
37ae8     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
37aec     25 70 20 70 
37af0     1E 70 1B 70 
37af4     18 70 15 70 
37af8     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
37afc     0D 70 09 70 
37b00     07 70 03 70 
37b04     01 70 FD 6F 
37b08     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
37b0c     F6 6F F2 6F 
37b10     EF 6F EC 6F 
37b14     2C 70 E6 6F 
37b18     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
37b1c     DD 6F 97 6F 
37b20     D7 6F 84 6E 
37b24     8F 6F 3F 7D 
37b28     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
37b2a     FF FF FF FF 
37b2e     FF FF       | atarist_spl file "atarist.spl" '512
37b30     00 00 00 00 
37b34     00 00 00 00 
37b38     00 00       | 	byte	$00[10]
37b3a     17 7F F2 7F 
37b3e     B2 7F 72 7F 
37b42     33 7F F4 7E 
37b46     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
37b4a     36 7E F5 7D 
37b4e     E9 51 F2 0D 
37b52     8E 00 F3 FD 
37b56     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
37b5a     57 FD 58 FD 
37b5e     5B FD 5C FD 
37b62     5C FD 60 7D 
37b66     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
37b6a     D6 7C 98 7C 
37b6e     59 7C 1A 7C 
37b72     DC 7B 9E 7B 
37b76     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
37b7a     F3 05 00 FD 
37b7e     41 FB EA FA 
37b82     D9 FA DB FA 
37b86     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
37b8a     E4 FA 9B 36 
37b8e     F8 7A C0 7A 
37b92     84 7A 45 7A 
37b96     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
37b9a     8E 79 51 79 
37b9e     15 79 D7 78 
37ba2     3C 1F EB FF 
37ba6     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
37baa     6D F8 65 F8 
37bae     68 F8 6D F8 
37bb2     70 F8 74 F8 
37bb6     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
37bba     AB 60 79 60 
37bbe     4B 60 1A 60 
37bc2     E9 5F B9 5F 
37bc6     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
37bca     FB 59 B2 0B 
37bce     92 FA 3A F7 
37bd2     96 F6 79 F6 
37bd6     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
37bda     82 F6 86 F6 
37bde     8C F6 DB 5D 
37be2     F1 5E C1 5E 
37be6     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
37bea     34 5E 04 5E 
37bee     D6 5D A6 5D 
37bf2     78 5D D4 3E 
37bf6     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
37bfa     27 F5 BA F4 
37bfe     AB F4 AD F4 
37c02     B2 F4 B8 F4 
37c06     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
37c0a     26 5D 2B 5D 
37c0e     FC 5C CD 5C 
37c12     9F 5C 70 5C 
37c16     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
37c1a     E5 5B B8 5B 
37c1e     DB 24 A7 FC 
37c22     D1 F4 4D F3 
37c26     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
37c2a     04 F3 0B F3 
37c2e     11 F3 16 F3 
37c32     DE 18 98 5B 
37c36     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
37c3a     4E 4A 29 48 
37c3e     A0 47 6A 47 
37c42     43 47 20 47 
37c46     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
37c4a     E2 F6 98 F2 
37c4e     C5 F1 A3 F1 
37c52     A3 F1 A8 F1 
37c56     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
37c5a     BF F1 00 3D 
37c5e     EF 46 CD 46 
37c62     AA 46 86 46 
37c66     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
37c6a     1C 46 F9 45 
37c6e     D7 45 EE 43 
37c72     DE 02 E8 F3 
37c76     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
37c7a     61 F0 65 F0 
37c7e     6D F0 74 F0 
37c82     7C F0 84 F0 
37c86     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
37c8a     8E 45 6D 45 
37c8e     49 45 27 45 
37c92     05 45 E1 44 
37c96     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
37c9a     F1 2F A9 FB 
37c9e     8B F1 9B EF 
37ca2     40 EF 36 EF 
37ca6     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
37caa     4D EF 56 EF 
37cae     5E EF 7B 44 
37cb2     8C 44 69 44 
37cb6     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
37cba     03 44 E1 43 
37cbe     C0 43 F5 37 
37cc2     69 33 0F 11 
37cc6     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
37cca     66 EE 37 EE 
37cce     38 EE 40 EE 
37cd2     48 EE 51 EE 
37cd6     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
37cda     7D 32 6A 32 
37cde     51 32 37 32 
37ce2     1F 32 05 32 
37ce6     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
37cea     B9 31 A1 31 
37cee     F1 04 F4 F1 
37cf2     50 EE A0 ED 
37cf6     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
37cfa     93 ED 9A ED 
37cfe     A4 ED AD ED 
37d02     F4 27 C1 31 
37d06     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
37d0a     78 31 5F 31 
37d0e     46 31 2E 31 
37d12     15 31 FC 30 
37d16     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
37d1a     C4 EF 4A ED 
37d1e     DC EC CB EC 
37d22     D2 EC DA EC 
37d26     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
37d2a     F9 EC 64 2F 
37d2e     0A 31 F1 30 
37d32     D9 30 C0 30 
37d36     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
37d3a     78 30 5F 30 
37d3e     46 30 38 23 
37d42     A6 F6 19 EE 
37d46     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
37d4a     20 EC 28 EC 
37d4e     32 EC 3C EC 
37d52     47 EC 51 EC 
37d56     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
37d5a     A3 22 93 22 
37d5e     7F 22 6E 22 
37d62     5D 22 4C 22 
37d66     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
37d6a     77 09 76 F1 
37d6e     CC EC F0 EB 
37d72     CD EB CE EB 
37d76     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
37d7a     ED EB F5 EB 
37d7e     3E F6 6B 22 
37d82     5F 22 4E 22 
37d86     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
37d8a     1B 22 0B 22 
37d8e     FA 21 E9 21 
37d92     D8 21 4D FF 
37d96     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
37d9a     92 EB 7B EB 
37d9e     82 EB 8C EB 
37da2     97 EB A1 EB 
37da6     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
37daa     15 22 04 22 
37dae     F3 21 E3 21 
37db2     D2 21 C0 21 
37db6     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
37dba     8E 21 7D 21 
37dbe     9A F8 A4 ED 
37dc2     8E EB 2F EB 
37dc6     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
37dca     37 EB 42 EB 
37dce     4C EB 57 EB 
37dd2     B2 17 22 19 
37dd6     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
37dda     FD 18 EF 18 
37dde     E3 18 D6 18 
37de2     CA 18 BD 18 
37de6     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
37dea     60 EC 35 EB 
37dee     01 EB 01 EB 
37df2     0C EB 16 EB 
37df6     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
37dfa     34 EB D0 18 
37dfe     00 19 F4 18 
37e02     E8 18 DA 18 
37e06     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
37e0a     B6 18 A9 18 
37e0e     9D 18 91 05 
37e12     F0 EF CA EB 
37e16     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
37e1a     E8 EA F2 EA 
37e1e     FE EA 07 EB 
37e22     12 EB C2 EF 
37e26     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
37e2a     D9 18 CD 18 
37e2e     C0 18 B3 18 
37e32     A7 18 9B 18 
37e36     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
37e3a     B8 FC 30 EE 
37e3e     61 EB DC EA 
37e42     CD EA D2 EA 
37e46     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
37e4a     F3 EA FE EA 
37e4e     D2 09 D1 18 
37e52     C3 18 17 18 
37e56     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
37e5a     66 11 52 11 
37e5e     49 11 41 11 
37e62     38 11 E0 F4 
37e66     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
37e6a     C9 EA C5 EA 
37e6e     CF EA DB EA 
37e72     E6 EA EF EA 
37e76     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
37e7a     89 11 80 11 
37e7e     78 11 6E 11 
37e82     67 11 5D 11 
37e86     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
37e8a     43 11 32 0D 
37e8e     9C F1 07 EC 
37e92     F8 EA CD EA 
37e96     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
37e9a     E4 EA ED EA 
37e9e     F8 EA 02 EB 
37ea2     55 11 91 11 
37ea6     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
37eaa     75 11 6E 11 
37eae     64 11 5E 11 
37eb2     54 11 4A 11 
37eb6     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
37eba     A8 EB F1 EA 
37ebe     D9 EA DC EA 
37ec2     E8 EA F1 EA 
37ec6     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
37eca     A6 EB 9E 11 
37ece     A0 11 96 11 
37ed2     8D 11 85 11 
37ed6     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
37eda     6A 11 CA 0D 
37ede     36 0B 57 F8 
37ee2     6C ED 57 EB 
37ee6     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
37eea     F4 EA FF EA 
37eee     09 EB 15 EB 
37ef2     1E EB 1A FD 
37ef6     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
37efa     ED 0A E8 0A 
37efe     E2 0A DC 0A 
37f02     D6 0A D1 0A 
37f06     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
37f0a     F8 F3 BC EC 
37f0e     57 EB 1E EB 
37f12     18 EB 24 EB 
37f16     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
37f1a     42 EB 4D EB 
37f1e     08 09 20 0B 
37f22     1A 0B 14 0B 
37f26     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
37f2a     04 0B FE 0A 
37f2e     F9 0A F2 0A 
37f32     84 08 3A F1 
37f36     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
37f3a     42 EB 42 EB 
37f3e     4E EB 57 EB 
37f42     62 EB 6B EB 
37f46     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
37f4a     48 0B 43 0B 
37f4e     3C 0B 36 0B 
37f52     31 0B 2C 0B 
37f56     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
37f5a     1B 0B 5C 00 
37f5e     6A EF 1B EC 
37f62     81 EB 6A EB 
37f66     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
37f6a     85 EB 8E EB 
37f6e     99 EB A3 EB 
37f72     DD 05 E5 05 
37f76     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
37f7a     DB 05 D8 05 
37f7e     D5 05 D1 05 
37f82     D0 05 CB 05 
37f86     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
37f8a     0C EC BB EB 
37f8e     B3 EB BB EB 
37f92     C5 EB D0 EB 
37f96     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
37f9a     E4 F7 2C 06 
37f9e     28 06 24 06 
37fa2     22 06 1F 06 
37fa6     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
37faa     16 06 14 06 
37fae     0F 06 D0 F3 
37fb2     65 ED 2D EC 
37fb6     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
37fba     01 EC 0A EC 
37fbe     14 EC 1E EC 
37fc2     29 EC FB 03 
37fc6     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
37fca     63 06 60 06 
37fce     5E 06 59 06 
37fd2     58 06 54 06 
37fd6     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
37fda     69 F1 21 ED 
37fde     55 EC 33 EC 
37fe2     36 EC 40 EC 
37fe6     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
37fea     5C EC 68 EC 
37fee     92 02 D9 02 
37ff2     D7 02 D7 02 
37ff6     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
37ffa     D1 02 D1 02 
37ffe     CE 02 CD 02 
38002     5D FC 80 EF 
38006     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
3800a     83 EC 8A EC 
3800e     93 EC 9C EC 
38012     A5 EC B1 EC 
38016     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
3801a     2B 03 2A 03 
3801e     29 03 26 03 
38022     25 03 24 03 
38026     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
3802a     1F 03 70 F7 
3802e     D0 EE 27 ED 
38032     DB EC D4 EC 
38036     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
3803a     F0 EC FA EC 
3803e     02 ED F9 F4 
38042     7B 03 7C 03 
38046     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
3804a     75 03 73 03 
3804e     72 03 70 03 
38052     6D 03 6C 03 
38056     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
3805a     54 ED 22 ED 
3805e     22 ED 2C ED 
38062     35 ED 3F ED 
38066     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
3806a     14 01 C3 03 
3806e     C1 03 C0 03 
38072     5F 01 A5 00 
38076     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
3807a     7B 00 7C 00 
3807e     20 00 85 F1 
38082     2A EE 89 ED 
38086     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
3808a     80 ED 87 ED 
3808e     90 ED 9A ED 
38092     A3 ED 73 00 
38096     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
3809a     D0 00 D0 00 
3809e     D0 00 D0 00 
380a2     D0 00 CF 00 
380a6     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
380aa     80 F0 3D EE 
380ae     D5 ED C7 ED 
380b2     CD ED D6 ED 
380b6     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
380ba     F2 ED FA ED 
380be     1D 01 29 01 
380c2     27 01 27 01 
380c6     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
380ca     25 01 26 01 
380ce     26 01 23 01 
380d2     D0 F7 EC EF 
380d6     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
380da     1C EE 24 EE 
380de     2D EE 37 EE 
380e2     40 EE 47 EE 
380e6     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
380ea     7D 01 7B 01 
380ee     7A 01 7A 01 
380f2     79 01 78 01 
380f6     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
380fa     84 FE DE F3 
380fe     6C EF 93 EE 
38102     72 EE 72 EE 
38106     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
3810a     8B EE 95 EE 
3810e     9E EE 15 FC 
38112     67 FE 67 FE 
38116     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
3811a     6B FE 6B FE 
3811e     6D FE 6D FE 
38122     6D FE 6F FE 
38126     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
3812a     DF EE CC EE 
3812e     CF EE D9 EE 
38132     E1 EE EA EE 
38136     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
3813a     5A FE C4 FE 
3813e     C3 FE C5 FE 
38142     C6 FE C6 FE 
38146     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
3814a     C8 FE C7 FE 
3814e     DA FB 85 F1 
38152     8D EF 31 EF 
38156     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
3815a     34 EF 3E EF 
3815e     46 EF 4F EF 
38162     57 EF 0D FF 
38166     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
3816a     1F FF 1F FF 
3816e     21 FF 21 FF 
38172     21 FF 21 FF 
38176     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
3817a     15 F1 BE EF 
3817e     84 EF 7E EF 
38182     88 EF 8F EF 
38186     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
3818a     A9 EF 06 F2 
3818e     A6 FC AB FC 
38192     AD FC AE FC 
38196     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
3819a     B2 FC B4 FC 
3819e     B6 FC B7 FC 
381a2     8B F4 BD F0 
381a6     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
381aa     E4 EF EE EF 
381ae     F6 EF FD EF 
381b2     04 F0 0E F0 
381b6     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
381ba     0B FD 0D FD 
381be     0F FD 11 FD 
381c2     11 FD 13 FD 
381c6     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
381ca     17 FD 64 F3 
381ce     CD F0 52 F0 
381d2     41 F0 45 F0 
381d6     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
381da     5B F0 64 F0 
381de     6D F0 FB FC 
381e2     65 FD 68 FD 
381e6     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
381ea     6C FD 6D FD 
381ee     6F FD 70 FD 
381f2     72 FD B3 FB 
381f6     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
381fa     A4 F0 99 F0 
381fe     A0 F0 A8 F0 
38202     AE F0 B9 F0 
38206     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
3820a     CB FB DD FB 
3820e     DE FB E0 FB 
38212     E3 FB E3 FB 
38216     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
3821a     E9 FB EC FB 
3821e     62 F7 27 F2 
38222     2A F1 FF F0 
38226     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
3822a     0C F1 13 F1 
3822e     1B F1 23 F1 
38232     33 F2 3C FC 
38236     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
3823a     42 FC 45 FC 
3823e     47 FC 48 FC 
38242     4A FC 4C FC 
38246     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
3824a     20 F2 77 F1 
3824e     5C F1 5F F1 
38252     64 F1 6C F1 
38256     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
3825a     83 F1 DC F8 
3825e     9A FC 9A FC 
38262     9B FC 9E FC 
38266     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
3826a     A3 FC A4 FC 
3826e     A6 FC A9 FC 
38272     90 F4 33 F2 
38276     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
3827a     BA F1 BF F1 
3827e     C7 F1 CE F1 
38282     D6 F1 DC F1 
38286     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
3828a     F3 FC F5 FC 
3828e     FE FB 79 FB 
38292     62 FB 5F FB 
38296     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
3829a     6F FA AF F3 
3829e     53 F2 12 F2 
382a2     0F F2 15 F2 
382a6     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
382aa     2A F2 32 F2 
382ae     38 F2 9A FB 
382b2     AF FB B1 FB 
382b6     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
382ba     B7 FB B8 FB 
382be     BA FB BC FB 
382c2     C1 FB 3B F8 
382c6     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
382ca     6E F2 6C F2 
382ce     74 F2 7A F2 
382d2     81 F2 87 F2 
382d6     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
382da     06 FC 09 FC 
382de     0C FC 0E FC 
382e2     0F FC 12 FC 
382e6     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
382ea     17 FC 1A FC 
382ee     B2 F6 7B F3 
382f2     DD F2 C5 F2 
382f6     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
382fa     D4 F2 DB F2 
382fe     E0 F2 E8 F2 
38302     28 F8 60 FC 
38306     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
3830a     64 FC 66 FC 
3830e     68 FC 6A FC 
38312     6D FC 52 FC 
38316     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
3831a     78 F3 24 F3 
3831e     1A F3 1E F3 
38322     24 F3 2A F3 
38326     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
3832a     3D F3 80 FA 
3832e     0C FB 0F FB 
38332     10 FB 14 FB 
38336     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
3833a     1B FB 1D FB 
3833e     1F FB 92 FA 
38342     DE F4 AE F3 
38346     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3834a     79 F3 7E F3 
3834e     84 F3 8C F3 
38352     92 F3 97 F3 
38356     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3835a     67 FB 69 FB 
3835e     6B FB 6F FB 
38362     71 FB 72 FB 
38366     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3836a     E3 F8 BA F4 
3836e     EE F3 CC F3 
38372     CA F3 CF F3 
38376     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3837a     E2 F3 E8 F3 
3837e     ED F3 B7 FB 
38382     BC FB BE FB 
38386     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3838a     C4 FB C6 FB 
3838e     C8 FB C9 FB 
38392     CC FB 8F F7 
38396     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3839a     1E F4 1E F4 
3839e     24 F4 2A F4 
383a2     30 F4 38 F4 
383a6     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
383aa     AD FA B1 FA 
383ae     B4 FA B6 FA 
383b2     BA FA BB FA 
383b6     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
383ba     C2 FA C6 FA 
383be     55 F6 C6 F4 
383c2     7D F4 72 F4 
383c6     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
383ca     83 F4 89 F4 
383ce     8F F4 94 F4 
383d2     66 FA 03 FB 
383d6     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
383da     0A FB 0E FB 
383de     10 FB 11 FB 
383e2     16 FB 18 FB 
383e6     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
383ea     F9 F4 CA F4 
383ee     C5 F4 CB F4 
383f2     D1 F4 D7 F4 
383f6     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
383fa     E8 F4 3F FB 
383fe     56 FB 58 FB 
38402     5A FB 5E FB 
38406     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
3840a     64 FB 64 FB 
3840e     69 FB 99 F9 
38412     E9 F5 33 F5 
38416     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
3841a     1D F5 22 F5 
3841e     27 F5 2E F5 
38422     32 F5 37 F5 
38426     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
3842a     BC FA BC FA 
3842e     C1 FA C2 FA 
38432     C4 FA C8 FA 
38436     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
3843a     F9 F7 DB F5 
3843e     78 F5 69 F5 
38442     6A F5 70 F5 
38446     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3844a     7F F5 85 F5 
3844e     6E F7 06 FB 
38452     0A FB 0B FB 
38456     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3845a     14 FB 15 FB 
3845e     18 FB 1B FB 
38462     1D FB 70 F7 
38466     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3846a     B6 F5 BB F5 
3846e     C0 F5 C6 F5 
38472     CA F5 CF F5 
38476     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3847a     54 FB 56 FB 
3847e     5A FB 5B FB 
38482     5E FB 5F FB 
38486     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3848a     67 FB 52 FB 
3848e     29 F7 33 F6 
38492     06 F6 02 F6 
38496     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3849a     10 F6 16 F6 
3849e     1A F6 1F F6 
384a2     81 FB 9F FB 
384a6     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
384aa     51 FB F2 FA 
384ae     E3 FA E3 FA 
384b2     E5 FA E9 FA 
384b6     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
384ba     64 F6 4D F6 
384be     4D F6 53 F6 
384c2     57 F6 5C F6 
384c6     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
384ca     6A F6 19 FB 
384ce     1E FB 22 FB 
384d2     23 FB 24 FB 
384d6     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
384da     2C FB 2E FB 
384de     32 FB F0 F8 
384e2     01 F7 A5 F6 
384e6     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
384ea     9F F6 A3 F6 
384ee     A6 F6 AC F6 
384f2     B0 F6 EB F7 
384f6     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
384fa     68 FB 6C FB 
384fe     6E FB 71 FB 
38502     72 FB 74 FB 
38506     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
3850a     71 F8 21 F7 
3850e     E5 F6 DD F6 
38512     E1 F6 E6 F6 
38516     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
3851a     F5 F6 F7 F6 
3851e     F7 FA AB FB 
38522     AD FB AF FB 
38526     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
3852a     B6 FB B9 FB 
3852e     BB FB BC FB 
38532     21 FB 07 F8 
38536     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
3853a     22 F7 26 F7 
3853e     2B F7 2E F7 
38542     34 F7 38 F7 
38546     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3854a     13 FB 16 FB 
3854e     17 FB 1B FB 
38552     1E FB 20 FB 
38556     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3855a     26 FB 77 FA 
3855e     F3 F7 7C F7 
38562     67 F7 6A F7 
38566     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3856a     74 F7 7A F7 
3856e     7E F7 82 F7 
38572     53 FB 5A FB 
38576     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3857a     5F FB 63 FB 
3857e     65 FB 67 FB 
38582     69 FB 6A FB 
38586     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3858a     B5 F7 A9 F7 
3858e     AD F7 B0 F7 
38592     B5 F7 B8 F7 
38596     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3859a     6E F8 99 FB 
3859e     9C FB 9D FB 
385a2     9F FB A4 FB 
385a6     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
385aa     A9 FB AB FB 
385ae     AD FB 46 F9 
385b2     26 F8 F0 F7 
385b6     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
385ba     F4 F7 F8 F7 
385be     FB F7 FF F7 
385c2     03 F8 65 FA 
385c6     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
385ca     2B FB 2F FB 
385ce     30 FB 32 FB 
385d2     34 FB 38 FB 
385d6     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
385da     E9 F8 4A F8 
385de     2E F8 2C F8 
385e2     2F F8 36 F8 
385e6     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
385ea     41 F8 44 F8 
385ee     4A FB 67 FB 
385f2     68 FB 6B FB 
385f6     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
385fa     73 FB 74 FB 
385fe     78 FB 7A FB 
38602     14 FB E7 F8 
38606     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3860a     6D F8 70 F8 
3860e     73 F8 78 F8 
38612     7C F8 80 F8 
38616     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3861a     A6 FB A7 FB 
3861e     A9 FB AC FB 
38622     AF FB B1 FB 
38626     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3862a     B7 FB 73 FA 
3862e     F8 F8 B4 F8 
38632     A9 F8 AB F8 
38636     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3863a     B4 F8 B8 F8 
3863e     BB F8 FA F8 
38642     64 FB 65 FB 
38646     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3864a     6D FB 6F FB 
3864e     70 FB 74 FB 
38652     77 FB 77 FB 
38656     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3865a     E9 F8 E4 F8 
3865e     E8 F8 EB F8 
38662     EE F8 F2 F8 
38666     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3866a     B5 FA 9F FB 
3866e     A1 FB A4 FB 
38672     A5 FB A9 FB 
38676     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3867a     AE FB B1 FB 
3867e     B2 FB C7 F9 
38682     39 F9 22 F9 
38686     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3868a     26 F9 2A F9 
3868e     2E F9 32 F9 
38692     33 F9 BA FB 
38696     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3869a     DE FB E1 FB 
3869e     E2 FB E4 FB 
386a2     E5 FB E7 FB 
386a6     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
386aa     C5 F9 67 F9 
386ae     57 F9 56 F9 
386b2     5B F9 5F F9 
386b6     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
386ba     68 F9 6C F9 
386be     0B FC 11 FC 
386c2     14 FC 15 FC 
386c6     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
386ca     B5 FB B5 FB 
386ce     B6 FB B8 FB 
386d2     E9 FA C8 F9 
386d6     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
386da     90 F9 94 F9 
386de     95 F9 99 F9 
386e2     9D F9 9F F9 
386e6     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
386ea     DE FB DF FB 
386ee     E2 FB E4 FB 
386f2     E6 FB E8 FB 
386f6     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
386fa     EF FB AC FA 
386fe     E9 F9 C7 F9 
38702     C3 F9 C8 F9 
38706     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3870a     D0 F9 D4 F9 
3870e     D6 F9 0E FB 
38712     11 FC 13 FC 
38716     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3871a     19 FC 1B FC 
3871e     1D FC 1E FC 
38722     21 FC 22 FC 
38726     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3872a     F7 F9 F7 F9 
3872e     FB F9 FE F9 
38732     00 FA 03 FA 
38736     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3873a     1B FC 45 FC 
3873e     46 FC 48 FC 
38742     4A FC 4B FC 
38746     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3874a     52 FC 54 FC 
3874e     F3 FB 82 FA 
38752     35 FA 28 FA 
38756     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3875a     31 FA 32 FA 
3875e     37 FA 37 FA 
38762     3C FA 00 FC 
38766     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3876a     09 FC 0B FC 
3876e     0F FC 12 FC 
38772     12 FC 15 FC 
38776     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3877a     8D FA 60 FA 
3877e     5B FA 5C FA 
38782     60 FA 61 FA 
38786     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3878a     6C FA 6D FA 
3878e     37 FC 3A FC 
38792     3B FC 3D FC 
38796     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3879a     43 FC 44 FC 
3879e     45 FC 47 FC 
387a2     51 FB AB FA 
387a6     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
387aa     8E FA 91 FA 
387ae     93 FA 95 FA 
387b2     98 FA 9B FA 
387b6     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
387ba     68 FC 6A FC 
387be     6C FC 6E FC 
387c2     70 FC 72 FC 
387c6     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
387ca     76 FC 3B FB 
387ce     D0 FA BB FA 
387d2     B9 FA BD FA 
387d6     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
387da     C4 FA C6 FA 
387de     CA FA 13 FC 
387e2     3A FC 3A FC 
387e6     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
387ea     41 FC 43 FC 
387ee     44 FC 47 FC 
387f2     48 FC 3C FC 
387f6     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
387fa     E6 FA E8 FA 
387fe     EB FA EE FA 
38802     F0 FA F2 FA 
38806     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3880a     61 FC 66 FC 
3880e     68 FC 6B FC 
38812     6C FC 6E FC 
38816     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3881a     73 FC 75 FC 
3881e     13 FC 3F FB 
38822     17 FB 12 FB 
38826     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3882a     1A FB 1D FB 
3882e     1F FB 20 FB 
38832     23 FB 92 FC 
38836     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3883a     96 FC 97 FC 
3883e     9A FC 9C FC 
38842     9E FC 9F FC 
38846     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3884a     5A FB 41 FB 
3884e     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
38852     73 32 00 04 
38856     00 00 10 00 
3885a     00 00 00 00 
3885e     00 00 00 00 | atari2 file "atari2.s2"
38862     43 87 43 87 
38866     43 87 44 87 
3886a     43 87 44 87 
3886e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38872     43 87 43 87 
38876     43 87 44 87 
3887a     43 87 43 87 
3887e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38882     44 87 43 87 
38886     44 87 43 87 
3888a     43 87 43 87 
3888e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38892     43 87 43 87 
38896     44 87 43 87 
3889a     44 87 44 87 
3889e     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
388a2     43 87 43 87 
388a6     44 87 43 87 
388aa     43 87 42 87 
388ae     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
388b2     43 87 43 87 
388b6     43 87 43 87 
388ba     44 87 43 87 
388be     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
388c2     44 87 44 87 
388c6     43 87 44 87 
388ca     43 87 44 87 
388ce     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
388d2     44 87 43 87 
388d6     44 87 44 87 
388da     43 87 43 87 
388de     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
388e2     43 87 44 87 
388e6     44 87 43 87 
388ea     43 87 44 87 
388ee     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
388f2     43 87 43 87 
388f6     43 87 43 87 
388fa     43 87 43 87 
388fe     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
38902     42 87 43 87 
38906     44 87 42 87 
3890a     43 87 43 87 
3890e     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
38912     43 87 44 87 
38916     44 87 43 87 
3891a     43 87 43 87 
3891e     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38922     43 87 5C 87 
38926     EE 86 AC 87 
3892a     4C 7C A3 78 
3892e     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
38932     BC 78 BB 78 
38936     BD 78 BC 78 
3893a     BB 78 BD 78 
3893e     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
38942     BB 78 BB 78 
38946     BC 78 BC 78 
3894a     BC 78 BB 78 
3894e     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38952     BC 78 BC 78 
38956     BC 78 BC 78 
3895a     BC 78 BC 78 
3895e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38962     BB 78 BC 78 
38966     A0 78 4C 7C 
3896a     11 7A 29 89 
3896e     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
38972     44 87 43 87 
38976     44 87 43 87 
3897a     43 87 42 87 
3897e     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
38982     43 87 43 87 
38986     44 87 ED 85 
3898a     71 85 52 79 
3898e     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
38992     BC 78 BC 78 
38996     BC 78 BC 78 
3899a     BC 78 BC 78 
3899e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
389a2     BC 78 BC 78 
389a6     BC 78 A0 78 
389aa     CF 7A B9 81 
389ae     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
389b2     44 87 43 87 
389b6     43 87 44 87 
389ba     43 87 44 87 
389be     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
389c2     43 87 43 87 
389c6     43 87 43 87 
389ca     44 87 43 87 
389ce     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
389d2     43 87 43 87 
389d6     44 87 43 87 
389da     44 87 43 87 
389de     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
389e2     44 87 43 87 
389e6     43 87 43 87 
389ea     5A 87 39 81 
389ee     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
389f2     A5 78 BC 78 
389f6     BB 78 BC 78 
389fa     BB 78 BC 78 
389fe     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
38a02     BC 78 BC 78 
38a06     BC 78 BC 78 
38a0a     BC 78 8F 79 
38a0e     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
38a12     09 85 47 87 
38a16     43 87 43 87 
38a1a     42 87 42 87 
38a1e     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
38a22     43 87 43 87 
38a26     43 87 43 87 
38a2a     43 87 44 87 
38a2e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38a32     43 87 43 87 
38a36     44 87 43 87 
38a3a     42 87 43 87 
38a3e     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
38a42     44 87 43 87 
38a46     43 87 43 87 
38a4a     44 87 44 87 
38a4e     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
38a52     94 78 55 7A 
38a56     B9 78 BC 78 
38a5a     BC 78 BC 78 
38a5e     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38a62     BC 78 BB 78 
38a66     BC 78 BC 78 
38a6a     BC 78 BC 78 
38a6e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38a72     BB 78 BC 78 
38a76     BC 78 BC 78 
38a7a     BB 78 BC 78 
38a7e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38a82     BC 78 BC 78 
38a86     BD 78 BC 78 
38a8a     BC 78 BB 78 
38a8e     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
38a92     94 78 B3 84 
38a96     36 84 4A 87 
38a9a     43 87 43 87 
38a9e     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
38aa2     43 87 44 87 
38aa6     43 87 43 87 
38aaa     43 87 43 87 
38aae     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38ab2     43 87 44 87 
38ab6     43 87 44 87 
38aba     43 87 43 87 
38abe     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
38ac2     43 87 43 87 
38ac6     43 87 45 87 
38aca     43 87 43 87 
38ace     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
38ad2     43 87 44 87 
38ad6     44 87 44 87 
38ada     43 87 43 87 
38ade     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
38ae2     43 87 42 87 
38ae6     43 87 43 87 
38aea     44 87 43 87 
38aee     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
38af2     54 87 3C 82 
38af6     36 83 52 79 
38afa     C6 78 BC 78 
38afe     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
38b02     BB 78 BB 78 
38b06     BC 78 BC 78 
38b0a     BC 78 BC 78 
38b0e     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38b12     BD 78 ED 78 
38b16     1B 79 F4 83 
38b1a     4D 83 4E 87 
38b1e     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
38b22     44 87 43 87 
38b26     42 87 44 87 
38b2a     43 87 42 87 
38b2e     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
38b32     43 87 54 87 
38b36     26 82 B3 84 
38b3a     D6 77 BB 78 
38b3e     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
38b42     BC 78 BB 78 
38b46     BB 78 BB 78 
38b4a     BB 78 BB 78 
38b4e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
38b52     BC 78 BC 78 
38b56     26 79 18 75 
38b5a     36 83 1F 84 
38b5e     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
38b62     43 87 43 87 
38b66     43 87 43 87 
38b6a     43 87 44 87 
38b6e     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38b72     43 87 44 87 
38b76     44 87 43 87 
38b7a     43 87 43 87 
38b7e     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
38b82     43 87 43 87 
38b86     43 87 43 87 
38b8a     44 87 44 87 
38b8e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
38b92     44 87 43 87 
38b96     43 87 43 87 
38b9a     43 87 44 87 
38b9e     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38ba2     44 87 44 87 
38ba6     44 87 43 87 
38baa     44 87 43 87 
38bae     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38bb2     43 87 43 87 
38bb6     43 87 44 87 
38bba     44 87 43 87 
38bbe     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
38bc2     43 87 43 87 
38bc6     43 87 43 87 
38bca     43 87 44 87 
38bce     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38bd2     43 87 44 87 
38bd6     43 87 44 87 
38bda     19 87 7D 86 
38bde     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
38be2     B1 78 BC 78 
38be6     BC 78 BC 78 
38bea     BC 78 BC 78 
38bee     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38bf2     BC 78 BC 78 
38bf6     BD 78 BC 78 
38bfa     B7 78 3B 7B 
38bfe     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
38c02     96 86 44 87 
38c06     43 87 43 87 
38c0a     43 87 43 87 
38c0e     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
38c12     44 87 44 87 
38c16     43 87 44 87 
38c1a     43 87 44 87 
38c1e     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
38c22     43 87 44 87 
38c26     43 87 44 87 
38c2a     43 87 44 87 
38c2e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
38c32     43 87 44 87 
38c36     43 87 43 87 
38c3a     44 87 43 87 
38c3e     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38c42     44 87 44 87 
38c46     43 87 43 87 
38c4a     43 87 44 87 
38c4e     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
38c52     43 87 43 87 
38c56     43 87 43 87 
38c5a     44 87 44 87 
38c5e     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
38c62     36 83 CF 7A 
38c66     AB 78 BB 78 
38c6a     BC 78 BC 78 
38c6e     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
38c72     BB 78 BC 78 
38c76     BC 78 BC 78 
38c7a     BC 78 BC 78 
38c7e     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38c82     BC 78 BC 78 
38c86     BC 78 BB 78 
38c8a     BC 78 BC 78 
38c8e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
38c92     BB 78 BC 78 
38c96     BB 78 BC 78 
38c9a     BC 78 BD 78 
38c9e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
38ca2     BC 78 BC 78 
38ca6     BC 78 BC 78 
38caa     BC 78 BD 78 
38cae     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
38cb2     BC 78 BB 78 
38cb6     BC 78 BB 78 
38cba     BB 78 BC 78 
38cbe     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
38cc2     BC 78 BC 78 
38cc6     BC 78 BC 78 
38cca     BC 78 BB 78 
38cce     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
38cd2     BC 78 BC 78 
38cd6     BC 78 BD 78 
38cda     BB 78 BC 78 
38cde     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
38ce2     BC 78 BC 78 
38ce6     BC 78 BB 78 
38cea     BC 78 BB 78 
38cee     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
38cf2     BB 78 BC 78 
38cf6     BC 78 BC 78 
38cfa     BC 78 BB 78 
38cfe     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38d02     BC 78 BC 78 
38d06     BC 78 BB 78 
38d0a     BC 78 BB 78 
38d0e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38d12     BC 78 BC 78 
38d16     BC 78 BC 78 
38d1a     BB 78 BC 78 
38d1e     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
38d22     BC 78 9F 78 
38d26     52 79 B3 84 
38d2a     2F 86 60 87 
38d2e     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
38d32     44 87 43 87 
38d36     43 87 43 87 
38d3a     43 87 43 87 
38d3e     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
38d42     43 87 43 87 
38d46     43 87 44 87 
38d4a     43 87 43 87 
38d4e     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38d52     43 87 43 87 
38d56     43 87 43 87 
38d5a     43 87 44 87 
38d5e     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38d62     44 87 44 87 
38d66     5E 87 BC 80 
38d6a     FB 80 94 78 
38d6e     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
38d72     BD 78 BC 78 
38d76     BB 78 BC 78 
38d7a     BB 78 BB 78 
38d7e     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
38d82     BC 78 BB 78 
38d86     BB 78 6B 79 
38d8a     D6 77 AC 87 
38d8e     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
38d92     43 87 44 87 
38d96     43 87 43 87 
38d9a     44 87 43 87 
38d9e     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
38da2     43 87 44 87 
38da6     43 87 5C 87 
38daa     E7 80 00 80 
38dae     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
38db2     BC 78 BD 78 
38db6     BC 78 BC 78 
38dba     BC 78 BB 78 
38dbe     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38dc2     BC 78 BC 78 
38dc6     BB 78 BC 78 
38dca     BB 78 BC 78 
38dce     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38dd2     BB 78 BC 78 
38dd6     BC 78 BC 78 
38dda     BC 78 BC 78 
38dde     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38de2     BC 78 BC 78 
38de6     BC 78 BC 78 
38dea     A0 78 8D 7B 
38dee     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
38df2     60 87 43 87 
38df6     44 87 44 87 
38dfa     43 87 43 87 
38dfe     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
38e02     44 87 43 87 
38e06     43 87 43 87 
38e0a     44 87 73 86 
38e0e     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
38e12     51 7B B6 78 
38e16     BC 78 BD 78 
38e1a     BC 78 BC 78 
38e1e     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38e22     BB 78 BC 78 
38e26     BD 78 BB 78 
38e2a     BC 78 BB 78 
38e2e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
38e32     BC 78 BC 78 
38e36     BC 78 BC 78 
38e3a     BB 78 BC 78 
38e3e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38e42     BC 78 BB 78 
38e46     BB 78 BC 78 
38e4a     BC 78 BB 78 
38e4e     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
38e52     22 8C AF 84 
38e56     48 87 43 87 
38e5a     44 87 43 87 
38e5e     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
38e62     43 87 42 87 
38e66     43 87 43 87 
38e6a     44 87 43 87 
38e6e     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
38e72     43 87 43 87 
38e76     44 87 44 87 
38e7a     43 87 43 87 
38e7e     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
38e82     43 87 43 87 
38e86     43 87 43 87 
38e8a     44 87 43 87 
38e8e     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
38e92     9F 8B D6 77 
38e96     16 7C B3 78 
38e9a     BC 78 BB 78 
38e9e     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
38ea2     BB 78 BC 78 
38ea6     BB 78 BC 78 
38eaa     BC 78 BC 78 
38eae     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38eb2     BC 78 BB 78 
38eb6     BB 78 BC 78 
38eba     BB 78 BC 78 
38ebe     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
38ec2     BB 78 BB 78 
38ec6     BC 78 BC 78 
38eca     BC 78 BB 78 
38ece     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
38ed2     BC 78 BC 78 
38ed6     BC 78 BD 78 
38eda     BB 78 BC 78 
38ede     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
38ee2     BC 78 BC 78 
38ee6     BC 78 BB 78 
38eea     BC 78 BC 78 
38eee     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38ef2     A8 78 54 7E 
38ef6     F4 83 17 82 
38efa     50 87 43 87 
38efe     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
38f02     44 87 43 87 
38f06     44 87 43 87 
38f0a     43 87 44 87 
38f0e     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
38f12     43 87 28 87 
38f16     20 85 CF 7A 
38f1a     70 7D AD 78 
38f1e     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
38f22     BB 78 BC 78 
38f26     BC 78 BC 78 
38f2a     BB 78 BB 78 
38f2e     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
38f32     BB 78 B2 78 
38f36     9A 7C CF 7A 
38f3a     4A 87 0D 87 
38f3e     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
38f42     43 87 44 87 
38f46     43 87 44 87 
38f4a     43 87 43 87 
38f4e     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
38f52     44 87 43 87 
38f56     28 87 51 85 
38f5a     11 7A 1E 7D 
38f5e     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
38f62     BC 78 BB 78 
38f66     BC 78 BC 78 
38f6a     BC 78 BC 78 
38f6e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
38f72     BB 78 BC 78 
38f76     BB 78 BC 78 
38f7a     BC 78 BC 78 
38f7e     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
38f82     BB 78 BC 78 
38f86     BC 78 BC 78 
38f8a     BD 78 BB 78 
38f8e     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
38f92     BC 78 BB 78 
38f96     BC 78 BC 78 
38f9a     BC 78 BB 78 
38f9e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38fa2     BC 78 BC 78 
38fa6     BC 78 BC 78 
38faa     BB 78 BC 78 
38fae     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
38fb2     BC 78 BD 78 
38fb6     BC 78 BC 78 
38fba     BC 78 BB 78 
38fbe     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38fc2     BC 78 BB 78 
38fc6     BB 78 BC 78 
38fca     BC 78 BB 78 
38fce     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
38fd2     BB 78 BB 78 
38fd6     BB 78 BC 78 
38fda     B6 78 48 7D 
38fde     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
38fe2     56 87 43 87 
38fe6     42 87 44 87 
38fea     44 87 43 87 
38fee     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
38ff2     43 87 44 87 
38ff6     43 87 44 87 
38ffa     4C 87 7E 83 
38ffe     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39002     F7 78 BC 78 
39006     BC 78 BB 78 
3900a     BB 78 BC 78 
3900e     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39012     BC 78 BB 78 
39016     BC 78 BC 78 
3901a     BB 78 BC 78 
3901e     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39022     BB 78 BC 78 
39026     BC 78 BC 78 
3902a     BC 78 BB 78 
3902e     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39032     BC 78 BC 78 
39036     BC 78 BC 78 
3903a     BC 78 BB 78 
3903e     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39042     BC 78 BB 78 
39046     BB 78 BC 78 
3904a     BC 78 BB 78 
3904e     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39052     BC 78 BC 78 
39056     BB 78 BC 78 
3905a     BC 78 BC 78 
3905e     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
39062     73 32 00 04 
39066     00 00 10 00 
3906a     00 00 00 00 
3906e     00 00 00 00 | atari12 file "atari12.s2"
39072     00 6D 00 6D 
39076     00 6D 00 6D 
3907a     00 6D 00 6D 
3907e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39082     00 6D 00 6D 
39086     00 6D 00 6D 
3908a     00 6D 00 6D 
3908e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39092     00 6D 00 6D 
39096     00 6D 00 6D 
3909a     00 6D 00 6D 
3909e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
390a2     00 6D 00 6D 
390a6     00 6D 00 6D 
390aa     00 6D 00 6D 
390ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
390b2     00 6D 00 6D 
390b6     00 6D 00 6D 
390ba     00 6D 00 6D 
390be     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
390c2     00 6C 00 6C 
390c6     00 6C 00 6C 
390ca     00 6C 00 6C 
390ce     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390d2     00 6C 00 6C 
390d6     00 6C 00 6C 
390da     00 6C 00 6C 
390de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390e2     00 6C 00 6C 
390e6     00 6C 00 6C 
390ea     00 6C 00 6C 
390ee     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
390f2     00 6C 00 6C 
390f6     00 6C 00 6C 
390fa     00 6C 00 6C 
390fe     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39102     00 6C 00 6C 
39106     00 6C 00 6C 
3910a     00 6C 00 6C 
3910e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39112     00 6C 00 6C 
39116     00 6C 00 6C 
3911a     00 6C 00 6C 
3911e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39122     00 6C 00 6C 
39126     00 6C 00 6C 
3912a     00 6C 00 6C 
3912e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39132     00 6C 00 6C 
39136     00 6C 00 6C 
3913a     00 6C 00 6C 
3913e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39142     00 6C 00 6C 
39146     00 6C 00 6C 
3914a     00 6C 00 6C 
3914e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39152     00 6C 00 6C 
39156     00 6C 00 6C 
3915a     00 6C 00 6C 
3915e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39162     00 6C 00 6C 
39166     00 6C 00 6C 
3916a     00 6C 00 6C 
3916e     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39172     00 6C 00 6B 
39176     00 6B 00 6B 
3917a     00 6B 00 6B 
3917e     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39182     00 6B 00 6B 
39186     00 6B 00 6B 
3918a     00 6B 00 6B 
3918e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39192     00 6B 00 6B 
39196     00 6B 00 6B 
3919a     00 6B 00 6B 
3919e     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391a2     00 6B 00 6B 
391a6     00 6B 00 6B 
391aa     00 6B 00 6B 
391ae     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391b2     00 6B 00 6B 
391b6     00 6B 00 6B 
391ba     00 6B 00 6B 
391be     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391c2     00 6B 00 6B 
391c6     00 6B 00 6B 
391ca     00 6B 00 6B 
391ce     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391d2     00 6B 00 6B 
391d6     00 6B 00 6B 
391da     00 6B 00 6B 
391de     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391e2     00 6B 00 6B 
391e6     00 6B 00 6B 
391ea     00 6B 00 6B 
391ee     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
391f2     00 6B 00 6B 
391f6     00 6B 00 6B 
391fa     00 6B 00 6B 
391fe     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39202     00 6B 00 6B 
39206     00 6B 00 6B 
3920a     00 6A 00 9D 
3920e     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
39212     00 9E 00 9E 
39216     00 9E 00 9E 
3921a     00 9E 00 9E 
3921e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39222     00 9E 00 9E 
39226     00 9E 00 9E 
3922a     00 9E 00 9E 
3922e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39232     00 9E 00 9E 
39236     00 9E 00 9E 
3923a     00 9E 00 9E 
3923e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39242     00 9E 00 9E 
39246     00 9E 00 9E 
3924a     00 9E 00 9E 
3924e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39252     00 9E 00 9E 
39256     00 9E 00 9E 
3925a     00 9E 00 9E 
3925e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39262     00 9E 00 9E 
39266     00 9E 00 9E 
3926a     00 9E 00 9E 
3926e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39272     00 9E 00 9E 
39276     00 9E 00 9E 
3927a     00 9E 00 9E 
3927e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39282     00 9E 00 9E 
39286     00 9E 00 9E 
3928a     00 9E 00 9E 
3928e     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39292     00 9E 00 9E 
39296     00 9E 00 9E 
3929a     00 9E 00 9E 
3929e     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
392a2     00 9F 00 9F 
392a6     00 9F 00 9F 
392aa     00 9F 00 9F 
392ae     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392b2     00 9F 00 9F 
392b6     00 9F 00 9F 
392ba     00 9F 00 9F 
392be     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392c2     00 9F 00 9F 
392c6     00 9F 00 9F 
392ca     00 9F 00 9F 
392ce     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392d2     00 9F 00 9F 
392d6     00 9F 00 9F 
392da     00 9F 00 9F 
392de     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392e2     00 9F 00 9F 
392e6     00 9F 00 9F 
392ea     00 9F 00 9F 
392ee     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
392f2     00 9F 00 9F 
392f6     00 9F 00 9F 
392fa     00 9F 00 9F 
392fe     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39302     00 9F 00 9F 
39306     00 9F 00 9F 
3930a     00 9F 00 9F 
3930e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39312     00 9F 00 9F 
39316     00 9F 00 9F 
3931a     00 9F 00 9F 
3931e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39322     00 9F 00 9F 
39326     00 9F 00 9F 
3932a     00 9F 00 9F 
3932e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39332     00 9F 00 9F 
39336     00 9F 00 9F 
3933a     00 9F 00 9F 
3933e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39342     00 9F 00 9F 
39346     00 9F 00 9F 
3934a     00 9F 00 9F 
3934e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39352     00 9F 00 9F 
39356     00 9F 00 9F 
3935a     00 9F 00 9F 
3935e     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39362     00 9F 00 9F 
39366     00 9F 00 A0 
3936a     00 A0 00 A0 
3936e     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39372     00 A0 00 A0 
39376     00 A0 00 A0 
3937a     00 A0 00 A0 
3937e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39382     00 A0 00 A0 
39386     00 A0 00 A0 
3938a     00 A0 00 A0 
3938e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39392     00 A0 00 A0 
39396     00 A0 00 A0 
3939a     00 A0 00 A0 
3939e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393a2     00 A0 00 A0 
393a6     00 A0 00 A0 
393aa     00 A0 00 A0 
393ae     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393b2     00 A0 00 A0 
393b6     00 A0 00 A0 
393ba     00 A0 00 A0 
393be     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393c2     00 A0 00 A0 
393c6     00 A0 00 A0 
393ca     00 A0 00 A0 
393ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393d2     00 A0 00 A0 
393d6     00 A0 00 A0 
393da     00 A0 00 A0 
393de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393e2     00 A0 00 A0 
393e6     00 A0 00 A0 
393ea     00 A0 00 A0 
393ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
393f2     00 A0 00 A0 
393f6     00 A0 00 A0 
393fa     00 A0 00 A0 
393fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39402     00 A0 00 A0 
39406     00 A0 00 A0 
3940a     00 A0 00 A0 
3940e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39412     00 A0 00 A0 
39416     00 A0 00 A0 
3941a     00 A0 00 A0 
3941e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39422     00 A0 00 A0 
39426     00 A0 00 A0 
3942a     00 A0 00 A0 
3942e     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39432     00 6D 00 6D 
39436     00 6D 00 6D 
3943a     00 6D 00 6D 
3943e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39442     00 6D 00 6D 
39446     00 6D 00 6D 
3944a     00 6D 00 6D 
3944e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39452     00 6D 00 6D 
39456     00 6D 00 6D 
3945a     00 6D 00 6D 
3945e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39462     00 6D 00 6D 
39466     00 6D 00 6D 
3946a     00 6D 00 6D 
3946e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39472     00 6D 00 6D 
39476     00 6D 00 6D 
3947a     00 6D 00 6D 
3947e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39482     00 6D 00 6D 
39486     00 6D 00 6D 
3948a     00 6D 00 6D 
3948e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39492     00 6D 00 6D 
39496     00 6D 00 6D 
3949a     00 6D 00 6D 
3949e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
394a2     00 6D 00 6D 
394a6     00 6D 00 6D 
394aa     00 6D 00 6D 
394ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
394b2     00 6D 00 6D 
394b6     00 A0 00 A0 
394ba     00 A0 00 A0 
394be     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394c2     00 A0 00 A0 
394c6     00 A0 00 A0 
394ca     00 A0 00 A0 
394ce     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394d2     00 A0 00 A0 
394d6     00 A0 00 A0 
394da     00 A0 00 A0 
394de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394e2     00 A0 00 A0 
394e6     00 A0 00 A0 
394ea     00 A0 00 A0 
394ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
394f2     00 A0 00 A0 
394f6     00 A0 00 A0 
394fa     00 A0 00 A0 
394fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39502     00 A0 00 A0 
39506     00 A0 00 A0 
3950a     00 A0 00 A0 
3950e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39512     00 A0 00 A0 
39516     00 A0 00 A0 
3951a     00 A0 00 A0 
3951e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39522     00 A0 00 A0 
39526     00 A0 00 A0 
3952a     00 A0 00 A0 
3952e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39532     00 A0 00 A0 
39536     00 A0 00 A0 
3953a     00 A0 00 A0 
3953e     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39542     00 6D 00 6D 
39546     00 6D 00 6D 
3954a     00 6D 00 6D 
3954e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39552     00 6D 00 6D 
39556     00 6D 00 6D 
3955a     00 6D 00 6D 
3955e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39562     00 6D 00 6D 
39566     00 6D 00 6D 
3956a     00 6D 00 6D 
3956e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39572     00 6D 00 6D 
39576     00 6D 00 6D 
3957a     00 6D 00 6D 
3957e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39582     00 6D 00 6D 
39586     00 6D 00 6D 
3958a     00 6D 00 6D 
3958e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39592     00 6D 00 6D 
39596     00 6D 00 6D 
3959a     00 6D 00 6D 
3959e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
395a2     00 6D 00 6D 
395a6     00 6D 00 6D 
395aa     00 6D 00 6D 
395ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
395b2     00 6D 00 6D 
395b6     00 6D 00 6D 
395ba     00 6D 00 6D 
395be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
395c2     00 6D 00 6D 
395c6     00 6C 00 A0 
395ca     00 9F 00 A0 
395ce     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
395d2     00 A0 00 A0 
395d6     00 A0 00 A0 
395da     00 A0 00 A0 
395de     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395e2     00 A0 00 A0 
395e6     00 A0 00 A0 
395ea     00 A0 00 A0 
395ee     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
395f2     00 A0 00 A0 
395f6     00 A0 00 A0 
395fa     00 A0 00 A0 
395fe     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39602     00 A0 00 A0 
39606     00 A0 00 A0 
3960a     00 A0 00 A0 
3960e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39612     00 A0 00 A0 
39616     00 A0 00 A0 
3961a     00 A0 00 A0 
3961e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39622     00 A0 00 A0 
39626     00 A0 00 A0 
3962a     00 A0 00 A0 
3962e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39632     00 A0 00 A0 
39636     00 A0 00 A0 
3963a     00 A0 00 A0 
3963e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39642     00 A0 00 A0 
39646     00 A0 00 A0 
3964a     00 A0 00 A0 
3964e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39652     00 A0 00 A0 
39656     00 A0 00 A0 
3965a     00 A0 00 A0 
3965e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39662     00 A0 00 A0 
39666     00 A0 00 A0 
3966a     00 A0 00 A0 
3966e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39672     00 A0 00 A0 
39676     00 A0 00 A0 
3967a     00 A0 00 A0 
3967e     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
39682     00 A1 00 A1 
39686     00 A1 00 A1 
3968a     00 A1 00 A1 
3968e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
39692     00 A1 00 A1 
39696     00 A1 00 A1 
3969a     00 A1 00 A1 
3969e     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
396a2     00 A1 00 A1 
396a6     00 A1 00 A1 
396aa     00 A1 00 A1 
396ae     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
396b2     00 A1 00 A1 
396b6     00 A1 00 A1 
396ba     00 A1 00 A1 
396be     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
396c2     00 A1 00 A1 
396c6     00 A1 00 A1 
396ca     00 A1 00 A1 
396ce     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
396d2     00 A1 00 A1 
396d6     00 A1 00 A1 
396da     00 6E 00 6E 
396de     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396e2     00 6E 00 6E 
396e6     00 6E 00 6E 
396ea     00 6E 00 6E 
396ee     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
396f2     00 6E 00 6E 
396f6     00 6E 00 6E 
396fa     00 6E 00 6E 
396fe     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39702     00 6E 00 6E 
39706     00 6E 00 6E 
3970a     00 6E 00 6E 
3970e     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
39712     00 6E 00 6D 
39716     00 6D 00 6D 
3971a     00 6D 00 6D 
3971e     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39722     00 6D 00 6D 
39726     00 6D 00 6D 
3972a     00 6D 00 6D 
3972e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39732     00 6D 00 6D 
39736     00 6D 00 6D 
3973a     00 6D 00 6D 
3973e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39742     00 6D 00 6D 
39746     00 6D 00 6D 
3974a     00 6D 00 6D 
3974e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39752     00 6D 00 6D 
39756     00 6D 00 6D 
3975a     00 6D 00 6D 
3975e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39762     00 6D 00 6D 
39766     00 6D 00 6D 
3976a     00 6D 00 6D 
3976e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39772     00 6D 00 6D 
39776     00 6D 00 6D 
3977a     00 6D 00 6D 
3977e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39782     00 6D 00 6D 
39786     00 6D 00 6D 
3978a     00 6D 00 6D 
3978e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39792     00 6D 00 6D 
39796     00 6D 00 6D 
3979a     00 6D 00 6D 
3979e     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
397a2     00 6D 00 6D 
397a6     00 6D 00 6D 
397aa     00 6D 00 6D 
397ae     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
397b2     00 6D 00 6D 
397b6     00 6D 00 6D 
397ba     00 6D 00 6D 
397be     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
397c2     00 6D 00 6D 
397c6     00 6C 00 6C 
397ca     00 6C 00 6C 
397ce     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
397d2     00 6C 00 6C 
397d6     00 6C 00 6C 
397da     00 6C 00 6C 
397de     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
397e2     00 6C 00 6C 
397e6     00 6C 00 6C 
397ea     00 9D 00 9F 
397ee     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
397f2     00 9F 00 9F 
397f6     00 9F 00 9F 
397fa     00 A0 00 A0 
397fe     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39802     00 A0 00 A0 
39806     00 A0 00 A0 
3980a     00 A0 00 A0 
3980e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39812     00 A0 00 A0 
39816     00 A0 00 A0 
3981a     00 A0 00 A0 
3981e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39822     00 A0 00 A0 
39826     00 A0 00 A0 
3982a     00 A0 00 A0 
3982e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39832     00 A0 00 A0 
39836     00 A0 00 A0 
3983a     00 A0 00 A0 
3983e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39842     00 A0 00 A0 
39846     00 A0 00 A0 
3984a     00 A0 00 A0 
3984e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39852     00 A0 00 A0 
39856     00 A0 00 A0 
3985a     00 A0 00 A0 
3985e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39862     00 A0 00 A0 
39866     00 A0 00 A0 
3986a     00 A0 00 A0 
3986e     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39872     01 00 00 00 
39876     00 00 00 00 
3987a     00 00 00 00 
3987e     00 00 00 00 | mouse  file "mouse2.def"
39882     00 00 00 00 
39886     00 00 00 00 
3988a     00 00 00 00 
3988e     00 00 00 00 | 	byte	$00[16]
39892     01 01 00 00 
39896     00 00 00 00 
3989a     00 00 00 00 
3989e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398a2     00 00 00 00 
398a6     00 00 00 00 
398aa     00 00 00 00 
398ae     00 00 00 00 | 	byte	$00[16]
398b2     01 0D 01 00 
398b6     00 00 00 00 
398ba     00 00 00 00 
398be     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398c2     00 00 00 00 
398c6     00 00 00 00 
398ca     00 00 00 00 
398ce     00 00 00 00 | 	byte	$00[16]
398d2     01 0D 0D 01 
398d6     00 00 00 00 
398da     00 00 00 00 
398de     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
398e2     00 00 00 00 
398e6     00 00 00 00 
398ea     00 00 00 00 
398ee     00 00 00 00 | 	byte	$00[16]
398f2     01 0D 0D 0D 
398f6     01 00 00 00 
398fa     00 00 00 00 
398fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39902     00 00 00 00 
39906     00 00 00 00 
3990a     00 00 00 00 
3990e     00 00 00 00 | 	byte	$00[16]
39912     01 0D 0D 0D 
39916     0D 01 00 00 
3991a     00 00 00 00 
3991e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39922     00 00 00 00 
39926     00 00 00 00 
3992a     00 00 00 00 
3992e     00 00 00 00 | 	byte	$00[16]
39932     01 0D 0D 0D 
39936     0D 0D 01 00 
3993a     00 00 00 00 
3993e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
39942     00 00 00 00 
39946     00 00 00 00 
3994a     00 00 00 00 
3994e     00 00 00 00 | 	byte	$00[16]
39952     01 0D 0D 0D 
39956     0D 0D 0D 01 
3995a     00 00 00 00 
3995e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
39962     00 00 00 00 
39966     00 00 00 00 
3996a     00 00 00 00 
3996e     00 00 00 00 | 	byte	$00[16]
39972     01 0D 0D 0D 
39976     0D 0D 0D 0C 
3997a     01 00 00 00 
3997e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
39982     00 00 00 00 
39986     00 00 00 00 
3998a     00 00 00 00 
3998e     00 00 00 00 | 	byte	$00[16]
39992     01 0D 0D 0D 
39996     0D 0D 0D 0D 
3999a     0C 01 00 00 
3999e     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
399a2     00 00 00 00 
399a6     00 00 00 00 
399aa     00 00 00 00 
399ae     00 00 00 00 | 	byte	$00[16]
399b2     01 0D 0D 0D 
399b6     0D 0D 0D 0D 
399ba     0D 0C 01 00 
399be     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
399c2     00 00 00 00 
399c6     00 00 00 00 
399ca     00 00 00 00 
399ce     00 00 00 00 | 	byte	$00[16]
399d2     01 0D 0D 0D 
399d6     0D 0D 0D 0D 
399da     0D 0D 0B 01 
399de     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
399e2     00 00 00 00 
399e6     00 00 00 00 
399ea     00 00 00 00 
399ee     00 00 00 00 | 	byte	$00[16]
399f2     01 0D 0D 0D 
399f6     0C 0D 0D 03 
399fa     01 01 01 01 
399fe     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
39a02     00 00 00 00 
39a06     00 00 00 00 
39a0a     00 00 00 00 
39a0e     00 00 00 00 | 	byte	$00[16]
39a12     01 0D 0D 0C 
39a16     01 09 0D 03 
39a1a     00 00 00 00 
39a1e     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
39a22     00 00 00 00 
39a26     00 00 00 00 
39a2a     00 00 00 00 
39a2e     00 00 00 00 | 	byte	$00[16]
39a32     01 0D 0C 01 
39a36     00 01 0D 0B 
39a3a     01 00 00 00 
39a3e     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
39a42     00 00 00 00 
39a46     00 00 00 00 
39a4a     00 00 00 00 
39a4e     00 00 00 00 | 	byte	$00[16]
39a52     01 0C 01 00 
39a56     00 01 0A 0D 
39a5a     01 00 00 00 
39a5e     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
39a62     00 00 00 00 
39a66     00 00 00 00 
39a6a     00 00 00 00 
39a6e     00 00 00 00 | 	byte	$00[16]
39a72     01 01 00 00 
39a76     00 00 01 0D 
39a7a     0B 01 00 00 
39a7e     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
39a82     00 00 00 00 
39a86     00 00 00 00 
39a8a     00 00 00 00 
39a8e     00 00 00 00 
39a92     00 00 00 00 
39a96     00 00       | 	byte	$00[22]
39a98     01 0B 0D 01 
39a9c     00 00 00 00 
39aa0     00 00 00 00 
39aa4     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39aa8     00 00 00 00 
39aac     00 00 00 00 
39ab0     00 00 00 00 
39ab4     00 00 00 00 
39ab8     00          | 	byte	$00[17]
39ab9     01 01 00 00 
39abd     00 00 00 00 
39ac1     00 00 00 00 
39ac5     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ac9     00 00 00 00 
      ...             
39c6d     00 00 00 00 
39c71     00          | 	byte	$00[425]
39c72                 | 
39c72     00 00       |              	org
39c74 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
39c78 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
39c7c 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
39c80 003             | 
39c80 003 00 30 04 F6 |                 mov     psramaddr,#0
39c84 004             | 
39c84 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
39c88 005 20 00 00 FF 
39c8c 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
39c90 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
39c94 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
39c98 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
39c9c 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
39ca0 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
39ca4 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
39ca8 00d             | 
39ca8 00d 20 00 00 FF 
39cac 00e 00 30 04 F1 |                 add 	psramaddr,##16384
39cb0 00f E0 03 00 FF 
39cb4 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
39cb8 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
39cbc 012             | 
39cbc 012             |                 
39cbc 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
39cc0 013             |     
39cc0 013 01 2C 60 FD |                 cogid 	t11				' get id
39cc4 014 00 00 EC FC |                 coginit #0,#0				' start the new program
39cc8 015 03 2C 60 FD |                 cogstop t11				' stop the loader
39ccc 016             | 
39ccc 016 00 00 00 00 | t11 		long 	0
39cd0 017 00 FF 07 00 | mailbox 	long 	$7FF00
39cd4 018 00 00 00 00 | psramaddr 	long 	0
39cd8 019 00 00 00 00 | pslockval	long 	0
39cdc 01a 00 00 00 00 | cmd             long    0
39ce0 01b 00 00 00 00 | buf1            long    0
39ce4 01c 00 40 00 00 | buf2            long    16384
39ce8 01d EC 9C 03 00 | 	long	@@@_dat_ + 12612
39cec 01e 50 32 20 52 
39cf0 01f 65 74 72 6F 
39cf4 020 6D 61 63 68 
39cf8 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
39cfc 022 42 41 53 49 
39d00 023 43 20 76 65 
39d04 024 72 73 69 6F 
39d08 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
39d0c 026 33 33 00 00 | 	byte	$33, $33, $00, $00
39d10 027             | 	alignl
39d10 027             | _hg010b_spin2_dat_
39d10 027             | 
39d10 027 00 00 00 00 
39d14 028 00 00 00 00 
39d18 029 00 00 00 00 
39d1c 02a 00 00 00 00 
39d20 02b 00 00 00    | vga_font       file "vgafont.def"
39d23 02b 7E 81 A5 81 
39d27 02c 81 BD 99 81 
39d2b 02d 81 7E 00 00 
39d2f 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
39d33 02f 7E FF DB FF 
39d37 030 FF C3 E7 FF 
39d3b 031 FF 7E 00 00 
39d3f 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
39d43 033 00 36 7F 7F 
39d47 034 7F 7F 3E 1C 
39d4b 035 08 00 00 00 
39d4f 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
39d53 037 00 08 1C 3E 
39d57 038 7F 3E 1C 08 
39d5b 039 00 00 00 00 
39d5f 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
39d63 03b 18 3C 3C E7 
39d67 03c E7 E7 18 18 
39d6b 03d 3C 00 00 00 
39d6f 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39d73 03f 18 3C 7E FF 
39d77 040 FF 7E 18 18 
39d7b 041 3C 00 00 00 
39d7f 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
39d83 043 00 00 00 18 
39d87 044 3C 3C 18 00 
39d8b 045 00 00 00 00 
39d8f 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
39d93 047 FF FF FF E7 
39d97 048 C3 C3 E7 FF 
39d9b 049 FF FF FF FF 
39d9f 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
39da3 04b 00 00 3C 66 
39da7 04c 42 42 66 3C 
39dab 04d 00 00 00 00 
39daf 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
39db3 04f FF FF C3 99 
39db7 050 BD BD 99 C3 
39dbb 051 FF FF FF FF 
39dbf 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
39dc3 053 78 70 58 4C 
39dc7 054 1E 33 33 33 
39dcb 055 33 1E 00 00 
39dcf 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
39dd3 057 3C 66 66 66 
39dd7 058 66 3C 18 7E 
39ddb 059 18 18 00 00 
39ddf 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
39de3 05b FC CC FC 0C 
39de7 05c 0C 0C 0C 0E 
39deb 05d 0F 07 00 00 
39def 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
39df3 05f FE C6 FE C6 
39df7 060 C6 C6 C6 E6 
39dfb 061 E7 67 03 00 
39dff 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
39e03 063 18 18 DB 3C 
39e07 064 E7 3C DB 18 
39e0b 065 18 00 00 00 
39e0f 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
39e13 067 03 07 0F 1F 
39e17 068 7F 1F 0F 07 
39e1b 069 03 01 00 00 
39e1f 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
39e23 06b 60 70 78 7C 
39e27 06c 7F 7C 78 70 
39e2b 06d 60 40 00 00 
39e2f 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
39e33 06f 18 3C 7E 18 
39e37 070 18 18 7E 3C 
39e3b 071 18 00 00 00 
39e3f 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
39e43 073 66 66 66 66 
39e47 074 66 66 66    | 	byte	$66[7]
39e4a 075 00 66 66 00 
39e4e 076 00 00 00 00 
39e52 077 00 FE DB DB 
39e56 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
39e5a 079 D8 D8 D8 00 
39e5e 07a 00 00 00 3E 
39e62 07b 63 06 1C 36 
39e66 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
39e6a 07d 30 63 3E 00 
39e6e 07e 00 00 00 00 
39e72 07f 00 00 00 00 
39e76 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39e7a 081 7F 7F 7F 00 
39e7e 082 00 00 00 00 
39e82 083 00 18 3C 7E 
39e86 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
39e8a 085 3C 18 7E 00 
39e8e 086 00 00 00 00 
39e92 087 00 18 3C 7E 
39e96 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
39e9a 089 18 18 18 00 
39e9e 08a 00 00 00 00 
39ea2 08b 00 18 18 18 
39ea6 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
39eaa 08d 7E 3C 18 00 
39eae 08e 00 00 00 00 
39eb2 08f 00 00 00 18 
39eb6 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
39eba 091 00 00 00 00 
39ebe 092 00 00 00 00 
39ec2 093 00 00 00    | 	byte	$00[11]
39ec5 094 0C 06 7F 06 
39ec9 095 0C 00 00 00 
39ecd 096 00 00 00 00 
39ed1 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ed5 098 00 03 03 03 
39ed9 099 7F 00 00 00 
39edd 09a 00 00 00 00 
39ee1 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39ee5 09c 14 36 7F 36 
39ee9 09d 14 00 00 00 
39eed 09e 00 00 00 00 
39ef1 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
39ef5 0a0 1C 1C 3E 3E 
39ef9 0a1 7F 7F 00 00 
39efd 0a2 00 00 00 00 
39f01 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
39f05 0a4 7F 3E 3E 1C 
39f09 0a5 1C 08 00 00 
39f0d 0a6 00 00 00 00 
39f11 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f15 0a8 00 00 00 00 
39f19 0a9 00 00 00 00 
39f1d 0aa 00 00 00 00 
39f21 0ab 00 00       | 	byte	$00[14]
39f23 0ab 18 3C 3C 3C 
39f27 0ac 18 18 18 00 
39f2b 0ad 18 18 00 00 
39f2f 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
39f33 0af 66 24 00 00 
39f37 0b0 00 00 00 00 
39f3b 0b1 00 00 00 00 
39f3f 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f43 0b3 00 36 36 7F 
39f47 0b4 36 36 36 7F 
39f4b 0b5 36 36 00 00 
39f4f 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
39f53 0b7 3E 63 43 03 
39f57 0b8 3E 60 60 61 
39f5b 0b9 63 3E 18 18 
39f5f 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
39f63 0bb 00 00 43 63 
39f67 0bc 30 18 0C 06 
39f6b 0bd 63 61 00 00 
39f6f 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
39f73 0bf 1C 36 36 1C 
39f77 0c0 6E 3B 33 33 
39f7b 0c1 33 6E 00 00 
39f7f 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
39f83 0c3 0C 0C 0C 06 
39f87 0c4 00 00 00 00 
39f8b 0c5 00 00 00 00 
39f8f 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
39f93 0c7 30 18 0C 0C 
39f97 0c8 0C 0C 0C 0C 
39f9b 0c9 18 30 00 00 
39f9f 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
39fa3 0cb 0C 18 30 30 
39fa7 0cc 30 30 30 30 
39fab 0cd 18 0C 00 00 
39faf 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
39fb3 0cf 00 00 00 66 
39fb7 0d0 3C FF 3C 66 
39fbb 0d1 00 00 00 00 
39fbf 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
39fc3 0d3 00 00 00 18 
39fc7 0d4 18 7E 18 18 
39fcb 0d5 00 00 00 00 
39fcf 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
39fd3 0d7 00 00 00 00 
39fd7 0d8 00 00 00 00 | 	byte	$00[8]
39fdb 0d9 18 18 18 0C 
39fdf 0da 00 00 00 00 
39fe3 0db 00 00 00 00 
39fe7 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
39feb 0dd 00 00 00 00 
39fef 0de 00 00 00 00 
39ff3 0df 00 00 00 00 
39ff7 0e0 00 00 00 00 | 	byte	$00[16]
39ffb 0e1 18 18 00 00 
39fff 0e2 00 00 00 00 
3a003 0e3 00 00 40 60 
3a007 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3a00b 0e5 03 01 00 00 
3a00f 0e6 00 00 00 00 
3a013 0e7 1C 36 63 63 
3a017 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3a01b 0e9 36 1C 00 00 
3a01f 0ea 00 00 00 00 
3a023 0eb 18 1C 1E 18 
3a027 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3a02b 0ed 18 7E 00 00 
3a02f 0ee 00 00 00 00 
3a033 0ef 3E 63 60 30 
3a037 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3a03b 0f1 63 7F 00 00 
3a03f 0f2 00 00 00 00 
3a043 0f3 3E 63 60 60 
3a047 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3a04b 0f5 63 3E 00 00 
3a04f 0f6 00 00 00 00 
3a053 0f7 30 38 3C 36 
3a057 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3a05b 0f9 30 78 00 00 
3a05f 0fa 00 00 00 00 
3a063 0fb 7F 03 03 03 
3a067 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3a06b 0fd 63 3E 00 00 
3a06f 0fe 00 00 00 00 
3a073 0ff 1C 06 03 03 
3a077 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3a07b 101 63 3E 00 00 
3a07f 102 00 00 00 00 
3a083 103 7F 63 60 60 
3a087 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3a08b 105 0C 0C 00 00 
3a08f 106 00 00 00 00 
3a093 107 3E 63 63 63 
3a097 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3a09b 109 63 3E 00 00 
3a09f 10a 00 00 00 00 
3a0a3 10b 3E 63 63 63 
3a0a7 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3a0ab 10d 30 1E 00 00 
3a0af 10e 00 00 00 00 
3a0b3 10f 00 00 00 18 
3a0b7 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a0bb 111 18 18 00 00 
3a0bf 112 00 00 00 00 
3a0c3 113 00 00 00 18 
3a0c7 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3a0cb 115 18 18 0C 00 
3a0cf 116 00 00 00 00 
3a0d3 117 00 60 30 18 
3a0d7 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3a0db 119 30 60 00 00 
3a0df 11a 00 00 00 00 
3a0e3 11b 00 00 00 7E 
3a0e7 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3a0eb 11d 00 00 00 00 
3a0ef 11e 00 00 00 00 
3a0f3 11f 00          | 	byte	$00[9]
3a0f4 120 06 0C 18 30 
3a0f8 121 60 30 18 0C 
3a0fc 122 06 00 00 00 
3a100 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3a104 124 63 63 30 18 
3a108 125 18 18 00 18 
3a10c 126 18 00 00 00 
3a110 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3a114 128 3E 63 63 7B 
3a118 129 7B 7B 3B 03 
3a11c 12a 3E 00 00 00 
3a120 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3a124 12c 1C 36 63 63 
3a128 12d 7F 63 63 63 
3a12c 12e 63 00 00 00 
3a130 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3a134 130 66 66 66 3E 
3a138 131 66 66 66 66 
3a13c 132 3F 00 00 00 
3a140 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3a144 134 66 43 03 03 
3a148 135 03 03 43 66 
3a14c 136 3C 00 00 00 
3a150 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3a154 138 36 66 66 66 
3a158 139 66 66 66 36 
3a15c 13a 1F 00 00 00 
3a160 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3a164 13c 66 46 16 1E 
3a168 13d 16 06 46 66 
3a16c 13e 7F 00 00 00 
3a170 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3a174 140 66 46 16 1E 
3a178 141 16 06 06 06 
3a17c 142 0F 00 00 00 
3a180 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3a184 144 66 43 03 03 
3a188 145 7B 63 63 66 
3a18c 146 5C 00 00 00 
3a190 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3a194 148 63 63 63 7F 
3a198 149 63 63 63 63 
3a19c 14a 63 00 00 00 
3a1a0 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3a1a4 14c 18 18 18 18 
3a1a8 14d 18 18 18 18 | 	byte	$18[8]
3a1ac 14e 3C 00 00 00 
3a1b0 14f 00 00 00 78 
3a1b4 150 30 30 30 30 
3a1b8 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3a1bc 152 1E 00 00 00 
3a1c0 153 00 00 00 67 
3a1c4 154 66 66 36 1E 
3a1c8 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3a1cc 156 67 00 00 00 
3a1d0 157 00 00 00 0F 
3a1d4 158 06 06 06 06 
3a1d8 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a1dc 15a 7F 00 00 00 
3a1e0 15b 00 00 00 63 
3a1e4 15c 77 7F 7F 6B 
3a1e8 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3a1ec 15e 63 00 00 00 
3a1f0 15f 00 00 00 63 
3a1f4 160 67 6F 7F 7B 
3a1f8 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3a1fc 162 63 00 00 00 
3a200 163 00 00 00 3E 
3a204 164 63 63 63 63 
3a208 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a20c 166 3E 00 00 00 
3a210 167 00 00 00 3F 
3a214 168 66 66 66 3E 
3a218 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3a21c 16a 0F 00 00 00 
3a220 16b 00 00 00 3E 
3a224 16c 63 63 63 63 
3a228 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3a22c 16e 3E 30 70 00 
3a230 16f 00 00 00 3F 
3a234 170 66 66 66 3E 
3a238 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3a23c 172 67 00 00 00 
3a240 173 00 00 00 3E 
3a244 174 63 63 06 1C 
3a248 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a24c 176 3E 00 00 00 
3a250 177 00 00 00 7E 
3a254 178 7E 5A 18 18 
3a258 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a25c 17a 3C 00 00 00 
3a260 17b 00 00 00 63 
3a264 17c 63 63 63 63 
3a268 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a26c 17e 3E 00 00 00 
3a270 17f 00 00 00 63 
3a274 180 63 63 63 63 
3a278 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3a27c 182 08 00 00 00 
3a280 183 00 00 00 63 
3a284 184 63 63 63 6B 
3a288 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3a28c 186 36 00 00 00 
3a290 187 00 00 00 63 
3a294 188 63 36 3E 1C 
3a298 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3a29c 18a 63 00 00 00 
3a2a0 18b 00 00 00 66 
3a2a4 18c 66 66 66 3C 
3a2a8 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3a2ac 18e 3C 00 00 00 
3a2b0 18f 00 00 00 7F 
3a2b4 190 63 61 30 18 
3a2b8 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3a2bc 192 7F 00 00 00 
3a2c0 193 00 00 00 3C 
3a2c4 194 0C 0C 0C 0C 
3a2c8 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3a2cc 196 3C 00 00 00 
3a2d0 197 00 00 00 00 
3a2d4 198 01 03 07 0E 
3a2d8 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3a2dc 19a 40 00 00 00 
3a2e0 19b 00 00 00 3C 
3a2e4 19c 30 30 30 30 
3a2e8 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3a2ec 19e 3C 00 00 00 
3a2f0 19f 1C 36 00 00 
3a2f4 1a0 00 00 00 00 
3a2f8 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2fc 1a2 00 00 00 00 
3a300 1a3 00 00 00 00 
3a304 1a4 00 00 00 00 
3a308 1a5 00 00 00 00 
3a30c 1a6 00          | 	byte	$00[17]
3a30d 1a6 FF 00 00 0C 
3a311 1a7 18 00 00 00 
3a315 1a8 00 00 00 00 
3a319 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a31d 1aa 00 00 00 00 
3a321 1ab 00 00 00 00 
3a325 1ac 00          | 	byte	$00[9]
3a326 1ac 1E 30 3E 33 
3a32a 1ad 33 33 6E 00 
3a32e 1ae 00 00 00 00 
3a332 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3a336 1b0 1E 36 66 66 
3a33a 1b1 66 66 3E 00 
3a33e 1b2 00 00 00 00 
3a342 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a346 1b4 3E 63 03 03 
3a34a 1b5 03 63 3E 00 
3a34e 1b6 00 00 00 00 
3a352 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3a356 1b8 3C 36 33 33 
3a35a 1b9 33 33 6E 00 
3a35e 1ba 00 00 00 00 
3a362 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a366 1bc 3E 63 7F 03 
3a36a 1bd 03 63 3E 00 
3a36e 1be 00 00 00 00 
3a372 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3a376 1c0 0C 1E 0C 0C 
3a37a 1c1 0C 0C 1E 00 
3a37e 1c2 00 00 00 00 
3a382 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a386 1c4 6E 33 33 33 
3a38a 1c5 33 33 3E 30 
3a38e 1c6 33 1E 00 00 
3a392 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3a396 1c8 36 6E 66 66 
3a39a 1c9 66 66 67 00 
3a39e 1ca 00 00 00 00 
3a3a2 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3a3a6 1cc 1C 18 18 18 
3a3aa 1cd 18 18 3C 00 
3a3ae 1ce 00 00 00 00 
3a3b2 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3a3b6 1d0 70 60 60 60 
3a3ba 1d1 60 60 60 66 
3a3be 1d2 66 3C 00 00 
3a3c2 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3a3c6 1d4 66 36 1E 1E 
3a3ca 1d5 36 66 67 00 
3a3ce 1d6 00 00 00 00 
3a3d2 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3a3d6 1d8 18 18 18 18 
3a3da 1d9 18 18       | 	byte	$18[6]
3a3dc 1da 3C 00 00 00 
3a3e0 1db 00 00 00 00 
3a3e4 1dc 00 00 37 7F 
3a3e8 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3a3ec 1de 63 00 00 00 
3a3f0 1df 00 00 00 00 
3a3f4 1e0 00 00 3B 66 
3a3f8 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3a3fc 1e2 66 00 00 00 
3a400 1e3 00 00 00 00 
3a404 1e4 00 00 3E 63 
3a408 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3a40c 1e6 3E 00 00 00 
3a410 1e7 00 00 00 00 
3a414 1e8 00 00 3B 66 
3a418 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3a41c 1ea 3E 06 06 0F 
3a420 1eb 00 00 00 00 
3a424 1ec 00 00 6E 33 
3a428 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3a42c 1ee 3E 30 30 78 
3a430 1ef 00 00 00 00 
3a434 1f0 00 00 3B 6E 
3a438 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3a43c 1f2 0F 00 00 00 
3a440 1f3 00 00 00 00 
3a444 1f4 00 00 3E 63 
3a448 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3a44c 1f6 3E 00 00 00 
3a450 1f7 00 00 00 08 
3a454 1f8 0C 0C 3F 0C 
3a458 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a45c 1fa 38 00 00 00 
3a460 1fb 00 00 00 00 
3a464 1fc 00 00 33 33 
3a468 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3a46c 1fe 6E 00 00 00 
3a470 1ff 00 00 00 00 
3a474 200 00 00 63 63 
3a478 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3a47c 202 1C 00 00 00 
3a480 203 00 00 00 00 
3a484 204 00 00 63 63 
3a488 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3a48c 206 36 00 00 00 
3a490 207 00 00 00 00 
3a494 208 00 00 63 36 
3a498 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3a49c 20a 63 00 00 00 
3a4a0 20b 00 00 00 00 
3a4a4 20c 00 00 63 63 
3a4a8 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3a4ac 20e 7E 60 30 1F 
3a4b0 20f 00 00 00 00 
3a4b4 210 00 00 7F 33 
3a4b8 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3a4bc 212 7F 00 00 00 
3a4c0 213 00 00 00 70 
3a4c4 214 18 18 18 0E 
3a4c8 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3a4cc 216 70 00 00 00 
3a4d0 217 00 00 00 18 
3a4d4 218 18 18 18 18 
3a4d8 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a4dc 21a 18 00 00 00 
3a4e0 21b 00 00 00 0E 
3a4e4 21c 18 18 18 70 
3a4e8 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3a4ec 21e 0E 00 00 00 
3a4f0 21f 6E 3B 00 00 
3a4f4 220 00 00 00 00 
3a4f8 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a4fc 222 00 00 00 00 
3a500 223 00 00 00 00 
3a504 224 00 00       | 	byte	$00[10]
3a506 224 08 1C 36 63 
3a50a 225 63 63 7F 00 
3a50e 226 00 00 00 00 
3a512 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3a516 228 03 03 03 03 
3a51a 229 43 66 3C 18 
3a51e 22a 30 1E 00 00 
3a522 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3a526 22c 33 33 33 33 
3a52a 22d 33 33       | 	byte	$33[6]
3a52c 22e 6E 00 00 00 
3a530 22f 00 00 60 30 
3a534 230 18 00 3E 63 
3a538 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3a53c 232 3E 00 00 00 
3a540 233 00 00 08 1C 
3a544 234 36 00 1E 30 
3a548 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3a54c 236 6E 00 00 00 
3a550 237 00 00 00 00 
3a554 238 33 00 1E 30 
3a558 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3a55c 23a 6E 00 00 00 
3a560 23b 00 00 1C 36 
3a564 23c 1C 00 33 33 
3a568 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3a56c 23e 6E 00 00 00 
3a570 23f 00 00 60 30 
3a574 240 18 00 3E 63 
3a578 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3a57c 242 3E 00 00 00 
3a580 243 00 00 00 00 
3a584 244 00 00 3E 63 
3a588 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3a58c 246 3E 18 30 1E 
3a590 247 00 00 00 1C 
3a594 248 58 78 38 18 
3a598 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3a59c 24a 3C 00 00 00 
3a5a0 24b 00 00 00 00 
3a5a4 24c 63 00 3E 63 
3a5a8 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3a5ac 24e 3E 00 00 00 
3a5b0 24f 66 33 00 3E 
3a5b4 250 63 63 63 63 
3a5b8 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a5bc 252 3E 00 00 00 
3a5c0 253 00 00 CC 66 
3a5c4 254 33 00 3E 63 
3a5c8 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3a5cc 256 3E 00 00 00 
3a5d0 257 00 00 18 3C 
3a5d4 258 66 00 1C 18 
3a5d8 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3a5dc 25a 3C 00 00 00 
3a5e0 25b 30 18 00 7F 
3a5e4 25c 63 61 30 18 
3a5e8 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3a5ec 25e 7F 00 00 00 
3a5f0 25f 00 63 00 08 
3a5f4 260 1C 36 63 63 
3a5f8 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3a5fc 262 63 00 00 00 
3a600 263 30 18 00 3C 
3a604 264 66 43 03 03 
3a608 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3a60c 266 3C 00 00 00 
3a610 267 30 18 00 7F 
3a614 268 66 46 16 1E 
3a618 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3a61c 26a 7F 00 00 00 
3a620 26b 0C 06 00 0F 
3a624 26c 06 06 06 06 
3a628 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3a62c 26e 7F 00 00 00 
3a630 26f 30 18 00 1C 
3a634 270 18 18 18 18 
3a638 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3a63c 272 3C 00 00 00 
3a640 273 00 00 08 1C 
3a644 274 36 00 3E 63 
3a648 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3a64c 276 3E 00 00 00 
3a650 277 00 00 00 00 
3a654 278 63 00 3E 63 
3a658 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3a65c 27a 3E 00 00 00 
3a660 27b 00 00 00 6F 
3a664 27c 46 26 06 06 
3a668 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3a66c 27e 7F 00 00 00 
3a670 27f 00 00 00 6E 
3a674 280 4C 2C 0C 0C 
3a678 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3a67c 282 1E 00 00 00 
3a680 283 30 18 00 3E 
3a684 284 63 63 06 1C 
3a688 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3a68c 286 3E 00 00 00 
3a690 287 00 00 60 30 
3a694 288 18 00 3E 63 
3a698 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3a69c 28a 3E 00 00 00 
3a6a0 28b 00 63 00 3E 
3a6a4 28c 63 63 63 63 
3a6a8 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3a6ac 28e 3E 00 00 00 
3a6b0 28f 00 63 00 63 
3a6b4 290 63 63 63 63 
3a6b8 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3a6bc 292 3E 00 00 00 
3a6c0 293 6C 38 00 7E 
3a6c4 294 7E 5A 18 18 
3a6c8 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3a6cc 296 3C 00 00 00 
3a6d0 297 00 00 60 48 
3a6d4 298 2C 0C 3F 0C 
3a6d8 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3a6dc 29a 38 00 00 00 
3a6e0 29b 00 00 00 0F 
3a6e4 29c 26 36 1E 0E 
3a6e8 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3a6ec 29e 7F 00 00 00 
3a6f0 29f 00 00 00 00 
3a6f4 2a0 00 63 36 1C 
3a6f8 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3a6fc 2a2 00 00 00 00 
3a700 2a3 00 00       | 	byte	$00[6]
3a702 2a3 36 1C 08 00 
3a706 2a4 3E 63 03 03 
3a70a 2a5 03 63 3E 00 
3a70e 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3a712 2a7 30 18 0C 00 
3a716 2a8 1E 30 3E 33 
3a71a 2a9 33 33 6E 00 
3a71e 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a722 2ab 60 30 18 00 
3a726 2ac 1C 18 18 18 
3a72a 2ad 18 18 3C 00 
3a72e 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3a732 2af 60 30 18 00 
3a736 2b0 3E 63 63 63 
3a73a 2b1 63 63 3E 00 
3a73e 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3a742 2b3 30 18 0C 00 
3a746 2b4 33 33 33 33 
3a74a 2b5 33 33 6E 00 
3a74e 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3a752 2b7 00 08 1C 36 
3a756 2b8 63 63 7F 63 
3a75a 2b9 63 63 63 18 
3a75e 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3a762 2bb 00 00 00 00 
3a766 2bc 1E 30 3E 33 
3a76a 2bd 33 33 6E 18 
3a76e 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3a772 2bf 00 7F 63 61 
3a776 2c0 30 18 0C 06 
3a77a 2c1 43 63 7F 00 
3a77e 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3a782 2c3 36 1C 08 00 
3a786 2c4 7F 33 18 0C 
3a78a 2c5 06 63 7F 00 
3a78e 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3a792 2c7 00 7F 66 46 
3a796 2c8 16 1E 16 06 
3a79a 2c9 46 66 7F 18 
3a79e 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3a7a2 2cb 00 00 00 00 
3a7a6 2cc 3E 63 7F 03 
3a7aa 2cd 03 63 3E 18 
3a7ae 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3a7b2 2cf 00 3C 66 03 
3a7b6 2d0 1F 03 0F 03 
3a7ba 2d1 03 66 3C 00 
3a7be 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3a7c2 2d3 60 30 18 00 
3a7c6 2d4 7F 33 18 0C 
3a7ca 2d5 06 63 7F 00 
3a7ce 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3a7d2 2d7 00 3C 66 43 
3a7d6 2d8 03 03 03 03 
3a7da 2d9 43 66 3C 00 
3a7de 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3a7e2 2db 00 00 00 00 
3a7e6 2dc 3E 63 06 1C 
3a7ea 2dd 30 63 3E 18 
3a7ee 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3a7f2 2df 00 00 00 00 
3a7f6 2e0 00 00       | 	byte	$00[6]
3a7f8 2e1 6C 36 1B 36 
3a7fc 2e2 6C 00 00 00 
3a800 2e3 00 00 00 00 
3a804 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a808 2e5 1B 36 6C 36 
3a80c 2e6 1B 00 00 00 
3a810 2e7 88 22 88 22 
3a814 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3a818 2e9 88 22 88 22 
3a81c 2ea 88 22 88 22 
3a820 2eb AA 55 AA 55 
3a824 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3a828 2ed AA 55 AA 55 
3a82c 2ee AA 55 AA 55 
3a830 2ef BB EE BB EE 
3a834 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3a838 2f1 BB EE BB EE 
3a83c 2f2 BB EE BB EE 
3a840 2f3 18 18 18 18 
3a844 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3a848 2f5 18 18 18 18 
3a84c 2f6 18 18 18 18 
3a850 2f7 18 18 18 18 
3a854 2f8 18 18 18    | 	byte	$18[15]
3a857 2f8 1F 18 18 18 
3a85b 2f9 18 18 18 18 
3a85f 2fa 18 30 18 00 
3a863 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3a867 2fc 63 7F 63 63 
3a86b 2fd 63 63 00 00 
3a86f 2fe 00 1C 36 00 
3a873 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3a877 300 63 7F 63 63 
3a87b 301 63 63 00 00 
3a87f 302 00 36 1C 00 
3a883 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3a887 304 1E 16 06 46 
3a88b 305 66 7F 00 00 
3a88f 306 00 00 00 00 
3a893 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3a897 308 1C 30 60 63 
3a89b 309 63 3E 18 30 
3a89f 30a 1E 6C 6C 6C 
3a8a3 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3a8a7 30c 6F 6C 6C 6C 
3a8ab 30d 6C 6C 6C 6C 
3a8af 30e 6C 6C 6C 6C 
3a8b3 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a8b7 310 6C 6C 6C 6C 
3a8bb 311 6C 6C 6C 6C 
3a8bf 312 6C          | 	byte	$6c[9]
3a8c0 313 00 00 00 00 
3a8c4 314 00          | 	byte	$00[5]
3a8c5 314 7F 60 6F 6C 
3a8c9 315 6C 6C 6C 6C 
3a8cd 316 6C 6C 6C 6C 
3a8d1 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a8d5 318 6F 60 7F 00 
3a8d9 319 00 00 00 00 
3a8dd 31a 00 00 00 18 
3a8e1 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3a8e5 31c 61 30 18 0C 
3a8e9 31d 06 43 63 7F 
3a8ed 31e 00 00 00 00 
3a8f1 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3a8f5 320 00 7F 33 18 
3a8f9 321 0C 06 63 7F 
3a8fd 322 00 00 00 00 
3a901 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3a905 324 00 00 1F 18 
3a909 325 18 18 18 18 
3a90d 326 18 18 18 18 
3a911 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a915 328 18 18 F8 00 
3a919 329 00 00 00 00 
3a91d 32a 00 00 00 18 
3a921 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a925 32c 18 18 FF 00 
3a929 32d 00 00 00 00 
3a92d 32e 00 00 00 00 
3a931 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a935 330 00 00 FF 18 
3a939 331 18 18 18 18 
3a93d 332 18 18 18 18 
3a941 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3a945 334 18 18 F8 18 
3a949 335 18 18 18 18 
3a94d 336 18 18 18 00 
3a951 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3a955 338 00 00 FF 00 
3a959 339 00 00 00 00 
3a95d 33a 00 00 00 18 
3a961 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3a965 33c 18 18 FF 18 
3a969 33d 18 18 18 18 
3a96d 33e 18 18 18 63 
3a971 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3a975 340 36 63 63 7F 
3a979 341 63 63 63 63 
3a97d 342 00 00 00 00 
3a981 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3a985 344 00 1E 30 3E 
3a989 345 33 33 33 6E 
3a98d 346 00 00 00 6C 
3a991 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a995 348 EC 0C FC 00 
3a999 349 00 00 00 00 
3a99d 34a 00 00 00 00 
3a9a1 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9a5 34c FC 0C EC 6C 
3a9a9 34d 6C 6C 6C 6C 
3a9ad 34e 6C 6C 6C 6C 
3a9b1 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a9b5 350 EF 00 FF 00 
3a9b9 351 00 00 00 00 
3a9bd 352 00 00 00 00 
3a9c1 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9c5 354 FF 00 EF 6C 
3a9c9 355 6C 6C 6C 6C 
3a9cd 356 6C 6C 6C 6C 
3a9d1 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3a9d5 358 EC 0C EC 6C 
3a9d9 359 6C 6C 6C 6C 
3a9dd 35a 6C 6C 6C 00 
3a9e1 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3a9e5 35c FF 00 FF 00 
3a9e9 35d 00 00 00 00 
3a9ed 35e 00 00 00 6C 
3a9f1 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3a9f5 360 EF 00 EF 6C 
3a9f9 361 6C 6C 6C 6C 
3a9fd 362 6C 6C 6C 00 
3aa01 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3aa05 364 63 3E 63 63 
3aa09 365 63 63 3E 63 
3aa0d 366 00 00 00 00 
3aa11 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3aa15 368 30 3C 36 33 
3aa19 369 33 33 33 6E 
3aa1d 36a 00 00 00 00 
3aa21 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3aa25 36c 66 66 6F 66 
3aa29 36d 66 66 36 1F 
3aa2d 36e 00 00 00 36 
3aa31 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3aa35 370 66 66 66 66 
3aa39 371 66 66       | 	byte	$66[6]
3aa3b 371 36 1F 00 00 
3aa3f 372 00 00 63 00 
3aa43 373 7F 66 46 16 
3aa47 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3aa4b 375 66 7F 00 00 
3aa4f 376 00 6C 38 00 
3aa53 377 38 30 30 3C 
3aa57 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3aa5b 379 33 6E 00 00 
3aa5f 37a 00 36 1C 00 
3aa63 37b 63 67 6F 7F 
3aa67 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3aa6b 37d 63 63 00 00 
3aa6f 37e 00 30 18 00 
3aa73 37f 3C 18 18 18 
3aa77 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3aa7b 381 18 3C 00 00 
3aa7f 382 00 3C 66 00 
3aa83 383 3C 18 18 18 
3aa87 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3aa8b 385 18 3C 00 00 
3aa8f 386 00 00 00 36 
3aa93 387 1C 08 00 3E 
3aa97 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3aa9b 389 63 3E 00 00 
3aa9f 38a 00 18 18 18 
3aaa3 38b 18 18 18 18 
3aaa7 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3aaab 38d 00 00 00 00 
3aaaf 38e 00 00 00 00 
3aab3 38f 00 00 00 00 | 	byte	$00[12]
3aab7 390 F8 18 18 18 
3aabb 391 18 18 18 18 
3aabf 392 18 FF FF FF 
3aac3 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3aac7 394 FF FF FF FF 
3aacb 395 FF FF FF FF 
3aacf 396 FF          | 	byte	$ff[9]
3aad0 397 00 00 00 00 
3aad4 398 00 00 00    | 	byte	$00[7]
3aad7 398 FF FF FF FF 
3aadb 399 FF FF FF FF 
3aadf 39a FF          | 	byte	$ff[9]
3aae0 39b 00 00 00 7E 
3aae4 39c 7E 5A 18 18 
3aae8 39d 18 18 18 18 
3aaec 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3aaf0 39f 1C 36 1C 63 
3aaf4 3a0 63 63 63 63 
3aaf8 3a1 63 63 63 63 
3aafc 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ab00 3a3 FF FF FF FF 
3ab04 3a4 FF FF FF    | 	byte	$ff[7]
3ab07 3a4 00 00 00 00 
3ab0b 3a5 00 00 00 00 
3ab0f 3a6 00          | 	byte	$00[9]
3ab10 3a7 30 18 00 3E 
3ab14 3a8 63 63 63 63 
3ab18 3a9 63 63 63 63 
3ab1c 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ab20 3ab 00 00 00 1E 
3ab24 3ac 33 33 33 1B 
3ab28 3ad 33 63 63 63 
3ab2c 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3ab30 3af 1C 36 00 3E 
3ab34 3b0 63 63 63 63 
3ab38 3b1 63 63 63 63 
3ab3c 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3ab40 3b3 30 18 00 63 
3ab44 3b4 67 6F 7F 7B 
3ab48 3b5 73 63 63 63 
3ab4c 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3ab50 3b7 00 00 60 30 
3ab54 3b8 18 00 3B 66 
3ab58 3b9 66 66 66 66 
3ab5c 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ab60 3bb 00 00 36 1C 
3ab64 3bc 08 00 3B 66 
3ab68 3bd 66 66 66 66 
3ab6c 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3ab70 3bf 36 1C 00 3E 
3ab74 3c0 63 63 06 1C 
3ab78 3c1 30 60 63 63 
3ab7c 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3ab80 3c3 00 00 36 1C 
3ab84 3c4 08 00 3E 63 
3ab88 3c5 06 1C 30 63 
3ab8c 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3ab90 3c7 30 18 00 3F 
3ab94 3c8 66 66 66 3E 
3ab98 3c9 36 66 66 66 
3ab9c 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3aba0 3cb 30 18 00 63 
3aba4 3cc 63 63 63 63 
3aba8 3cd 63 63 63 63 
3abac 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3abb0 3cf 00 00 60 30 
3abb4 3d0 18 00 3B 6E 
3abb8 3d1 66 06 06 06 
3abbc 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3abc0 3d3 66 33 00 63 
3abc4 3d4 63 63 63 63 
3abc8 3d5 63 63 63 63 
3abcc 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3abd0 3d7 00 00 60 30 
3abd4 3d8 18 00 63 63 
3abd8 3d9 63 63 63 63 
3abdc 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3abe0 3db 30 18 00 66 
3abe4 3dc 66 66 66 3C 
3abe8 3dd 18 18 18 18 
3abec 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3abf0 3df 00 00 00 08 
3abf4 3e0 0C 0C 3F 0C 
3abf8 3e1 0C 0C 0C 6C 
3abfc 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3ac00 3e3 30 18 00 00 
3ac04 3e4 00 00 00 00 
3ac08 3e5 00 00 00 00 
3ac0c 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac10 3e7 00 00 00 00 
3ac14 3e8 00 00 00 00 | 	byte	$00[8]
3ac18 3e9 7F 00 00 00 
3ac1c 3ea 00 00 00 00 
3ac20 3eb 66 33 00 00 
3ac24 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3ac28 3ed 00 00 00 00 
3ac2c 3ee 00 00 00 00 
3ac30 3ef 00 00 00 00 
3ac34 3f0 00 00 00 00 
3ac38 3f1 00 00 00 00 
3ac3c 3f2 00          | 	byte	$00[21]
3ac3d 3f2 0C 06 3C 36 
3ac41 3f3 1C 00 00 00 
3ac45 3f4 00 00 00 00 
3ac49 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac4d 3f6 00 00 00 63 
3ac51 3f7 3E 00 00 00 
3ac55 3f8 00 00 00 00 
3ac59 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac5d 3fa 00 00 00 00 
3ac61 3fb 3E 63 06 1C 
3ac65 3fc 36 63 63 36 
3ac69 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3ac6d 3fe 00 00 00 00 
3ac71 3ff 00 00 00 00 | 	byte	$00[8]
3ac75 400 18 00 7E 00 
3ac79 401 18 00 00 00 
3ac7d 402 00 00 00 00 
3ac81 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ac85 404 00 00 00 00 
3ac89 405 00 00 00 00 | 	byte	$00[8]
3ac8d 406 18 30 1E 00 
3ac91 407 00 00 1C 36 
3ac95 408 36 1C 00 00 
3ac99 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3ac9d 40a 00 00 00 00 
3aca1 40b 63 00 00 00 
3aca5 40c 00 00 00 00 
3aca9 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acad 40e 00 00 00 18 
3acb1 40f 18 00 00 00 
3acb5 410 00 00 00 00 
3acb9 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3acbd 412 00 00 00 00 
3acc1 413 00          | 	byte	$00[5]
3acc2 413 CC 66 33 00 
3acc6 414 33 33 33 33 
3acca 415 33 33 6E 00 
3acce 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3acd2 417 00 3F 66 66 
3acd6 418 66 3E 36 66 
3acda 419 66 66 6F 00 
3acde 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3ace2 41b 36 1C 08 00 
3ace6 41c 3B 6E 66 06 
3acea 41d 06 06 0F 00 
3acee 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3acf2 41f 00 00 00 7E 
3acf6 420 7E 7E 7E 7E 
3acfa 421 7E 7E 00 00 
3acfe 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3ad02 423 00 00 00 00 
3ad06 424 00 00 00 00 
3ad0a 425 00 00 00 00 
3ad0e 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad10 427             | 'vga_font       file "vgafont.def"
3ad10 427 00 00 00 00 
      ...             
3ad40 433 00 00 00 00 
3ad44 434 00 00 00    | st_font        file "st4font.def"
3ad47 434 FF FF 00 00 
3ad4b 435 00 00 00 00 
3ad4f 436 00 18 18 18 
3ad53 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ad57 438 18 18 18 18 
3ad5b 439 18 18 18 18 
3ad5f 43a 18          | 	byte	$18[9]
3ad60 43b 00 00 00 00 
3ad64 43c 00 00 00    | 	byte	$00[7]
3ad67 43c FF FF 18 18 
3ad6b 43d 18 18 18 18 
3ad6f 43e 18 18 18 18 
3ad73 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad77 440 FF FF 00 00 
3ad7b 441 00 00 00 00 
3ad7f 442 00 18 18 18 
3ad83 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ad87 444 1F 1F 18 18 
3ad8b 445 18 18 18 18 
3ad8f 446 18 18 18 18 
3ad93 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3ad97 448 F8 F8 18 18 
3ad9b 449 18 18 18 18 
3ad9f 44a 18 00 00 00 
3ada3 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ada7 44c 1F 1F 18 18 
3adab 44d 18 18 18 18 
3adaf 44e 18 00 00 00 
3adb3 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3adb7 450 F8 F8 18 18 
3adbb 451 18 18 18 18 
3adbf 452 18 18 18 18 
3adc3 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3adc7 454 1F 1F 00 00 
3adcb 455 00 00 00 00 
3adcf 456 00 18 18 18 
3add3 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3add7 458 F8 F8 00 00 
3addb 459 00 00 00 00 
3addf 45a 00 18 18 18 
3ade3 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3ade7 45c FF FF 18 18 
3adeb 45d 18 18 18 18 
3adef 45e 18 00 00 18 
3adf3 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3adf7 460 66 7E 7E 66 
3adfb 461 66 66 66 30 
3adff 462 18 00 00 7E 
3ae03 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3ae07 464 3E 06 06 06 
3ae0b 465 06 7E 7E 18 
3ae0f 466 0C 30 18 3C 
3ae13 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3ae17 468 06 06 06 66 
3ae1b 469 66 7E 3C 00 
3ae1f 46a 00 30 18 66 
3ae23 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3ae27 46c 7E 7E 76 76 
3ae2b 46d 66 66 66 00 
3ae2f 46e 00 30 18 7C 
3ae33 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3ae37 470 1C 38 70 60 
3ae3b 471 60 7E 3E 00 
3ae3f 472 00 30 18 7E 
3ae43 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3ae47 474 18 0C 0C 06 
3ae4b 475 06 7E 7E 00 
3ae4f 476 00 18 18 00 
3ae53 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3ae57 478 18 18 0C 0C 
3ae5b 479 06 7E 7E 00 
3ae5f 47a 00 30 18 3C 
3ae63 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3ae67 47c 66 66 66 66 
3ae6b 47d 66          | 	byte	$66[5]
3ae6c 47e 7E 3C 00 00 
3ae70 47f 00 00 06 06 
3ae74 480 06 06 16 1E 
3ae78 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3ae7c 482 7E 7E 00 00 
3ae80 483 00 00 00 00 
3ae84 484 00 3C 7C 60 
3ae88 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3ae8c 486 7E 7C 30 18 
3ae90 487 00 00 00 00 
3ae94 488 00 3C 7E 66 
3ae98 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3ae9c 48a 7E 7C 18 0C 
3aea0 48b 00 00 30 18 
3aea4 48c 00 3C 3E 06 
3aea8 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3aeac 48e 7E 7C 00 00 
3aeb0 48f 00 00 30 18 
3aeb4 490 00 3E 7E 66 
3aeb8 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3aebc 492 66 66 00 00 
3aec0 493 00 00 30 18 
3aec4 494 00 7C 7E 06 
3aec8 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3aecc 496 7E 3E 00 00 
3aed0 497 00 00 30 18 
3aed4 498 00 7E 7E 30 
3aed8 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aedc 49a 7E 7E 00 00 
3aee0 49b 00 00 18 18 
3aee4 49c 00 7E 7E 30 
3aee8 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3aeec 49e 7E 7E 00 00 
3aef0 49f 00 00 30 18 
3aef4 4a0 00 3C 7E 66 
3aef8 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3aefc 4a2 7E 3C 00 00 
3af00 4a3 00 00 1C 1C 
3af04 4a4 18 18 38 3C 
3af08 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3af0c 4a6 3C 3C 00 00 
3af10 4a7 00 00 00 00 
3af14 4a8 00 00 00 00 
3af18 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af1c 4aa 00 00 00 00 
3af20 4ab 00 00       | 	byte	$00[6]
3af22 4ab 18 18 18 18 
3af26 4ac 18 18 18 18 | 	byte	$18[8]
3af2a 4ad 00 00 18 18 
3af2e 4ae 00 00 00 00 
3af32 4af 66 66 66 66 
3af36 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3af3a 4b1 00 00 00 00 
3af3e 4b2 00 00 00 00 
3af42 4b3 00          | 	byte	$00[9]
3af43 4b3 66 66 FF FF 
3af47 4b4 66 66 FF FF 
3af4b 4b5 66 66 00 00 
3af4f 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3af53 4b7 7C 7E 06 06 
3af57 4b8 3E 7C 60 60 
3af5b 4b9 7E 3E 18 18 
3af5f 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3af63 4bb 66 30 30 18 
3af67 4bc 18 0C 0C 66 
3af6b 4bd 66 00 00 00 
3af6f 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3af73 4bf 66 66 3C 1C 
3af77 4c0 1C FC FE 66 
3af7b 4c1 66 FE FC 00 
3af7f 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3af83 4c3 18 18 18 18 
3af87 4c4 00 00 00 00 
3af8b 4c5 00 00 00 00 
3af8f 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3af93 4c7 18 1C 0C 0C 
3af97 4c8 0C 0C 0C 0C 
3af9b 4c9 1C 18 30 00 
3af9f 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3afa3 4cb 18 38 30 30 
3afa7 4cc 30 30 30 30 
3afab 4cd 38 18 0C 00 
3afaf 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3afb3 4cf 66 66 3C 3C 
3afb7 4d0 FF FF 3C 3C 
3afbb 4d1 66 66 00 00 
3afbf 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3afc3 4d3 00 18 18 18 
3afc7 4d4 7E 7E 18 18 
3afcb 4d5 18 00 00 00 
3afcf 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3afd3 4d7 00 00 00 00 
3afd7 4d8 00 00       | 	byte	$00[6]
3afd9 4d9 18 18 18 18 
3afdd 4da 18          | 	byte	$18[5]
3afde 4da 0C 04 00 00 
3afe2 4db 00 00 00 00 
3afe6 4dc 7E 7E 00 00 
3afea 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3afee 4de 00 00 00 00 
3aff2 4df 00 00 00 00 
3aff6 4e0 00 00 00 00 
3affa 4e1 00          | 	byte	$00[13]
3affb 4e1 18 18 18 00 
3afff 4e2 00 00 00 60 
3b003 4e3 60 60 30 30 
3b007 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3b00b 4e5 06 06 06 00 
3b00f 4e6 00 00 00 3C 
3b013 4e7 7E 66 66 66 
3b017 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3b01b 4e9 66 7E 3C 00 
3b01f 4ea 00 00 00 18 
3b023 4eb 18 1C 1C 18 
3b027 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3b02b 4ed 18 7E 7E 00 
3b02f 4ee 00 00 00 3C 
3b033 4ef 7E 66 66 30 
3b037 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3b03b 4f1 0C 7E 7E 00 
3b03f 4f2 00 00 00 7E 
3b043 4f3 7E 30 30 18 
3b047 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3b04b 4f5 66 7E 3C 00 
3b04f 4f6 00 00 00 30 
3b053 4f7 30 38 38 3C 
3b057 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3b05b 4f9 7E 30 30 00 
3b05f 4fa 00 00 00 7E 
3b063 4fb 7E 06 06 3E 
3b067 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3b06b 4fd 66 7E 3C 00 
3b06f 4fe 00 00 00 38 
3b073 4ff 3C 0E 06 06 
3b077 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3b07b 501 66 7E 3C 00 
3b07f 502 00 00 00 7E 
3b083 503 7E 60 60 30 
3b087 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3b08b 505 0C 0C 0C 00 
3b08f 506 00 00 00 3C 
3b093 507 7E 66 66 3C 
3b097 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3b09b 509 66 7E 3C 00 
3b09f 50a 00 00 00 3C 
3b0a3 50b 7E 66 66 7E 
3b0a7 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3b0ab 50d 70 3C 1C 00 
3b0af 50e 00 00 00 00 
3b0b3 50f 00 00 18 18 
3b0b7 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3b0bb 511 18 18 18 00 
3b0bf 512 00 00 00 00 
3b0c3 513 00 00 18 18 
3b0c7 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3b0cb 515 18 18 18 0C 
3b0cf 516 04 00 00 00 
3b0d3 517 70 38 1C 0E 
3b0d7 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3b0db 519 70 00 00 00 
3b0df 51a 00 00 00 00 
3b0e3 51b 00 00 7E 7E 
3b0e7 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3b0eb 51d 00 00 00 00 
3b0ef 51e 00 00 00 00 | 	byte	$00[8]
3b0f3 51f 0E 1C 38 70 
3b0f7 520 E0 70 38 1C 
3b0fb 521 0E 00 00 00 
3b0ff 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3b103 523 7E 66 66 30 
3b107 524 30 18 18 18 
3b10b 525 00 18 18 00 
3b10f 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3b113 527 7E 66 66 66 
3b117 528 66 36 06 66 
3b11b 529 66 7E 3C 00 
3b11f 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3b123 52b 3C 7E 66 66 
3b127 52c 66 7E 7E 66 
3b12b 52d 66 66 66 00 
3b12f 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3b133 52f 7E 66 66 7E 
3b137 530 3E 66 66 66 
3b13b 531 66 7E 3E 00 
3b13f 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3b143 533 7E 66 66 06 
3b147 534 06 06 06 66 
3b14b 535 66 7E 3C 00 
3b14f 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3b153 537 7E 66 66 66 
3b157 538 66 66 66 66 
3b15b 539 66 7E 3E 00 
3b15f 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3b163 53b 7E 06 06 3E 
3b167 53c 3E 06 06 06 
3b16b 53d 06 7E 7E 00 
3b16f 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3b173 53f 7E 06 06 3E 
3b177 540 3E 06 06 06 
3b17b 541 06 06 06 00 
3b17f 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3b183 543 7E 06 06 76 
3b187 544 76 66 66 66 
3b18b 545 66 7E 3C 00 
3b18f 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3b193 547 66 66 66 7E 
3b197 548 7E 66 66 66 
3b19b 549 66 66 66 00 
3b19f 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3b1a3 54b 7E 18 18 18 
3b1a7 54c 18 18 18 18 
3b1ab 54d 18 7E 7E 00 
3b1af 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3b1b3 54f 60 60 60 60 
3b1b7 550 60 60 60    | 	byte	$60[7]
3b1ba 551 66 66 7E 3C 
3b1be 552 00 00 00 00 
3b1c2 553 66 66 36 36 
3b1c6 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3b1ca 555 66 66 C6 C6 
3b1ce 556 00 00 00 00 
3b1d2 557 06 06 06 06 
3b1d6 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3b1da 559 06 06 7E 7E 
3b1de 55a 00 00 00 00 
3b1e2 55b C6 C6 EE EE 
3b1e6 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3b1ea 55d C6 C6 C6 C6 
3b1ee 55e 00 00 00 00 
3b1f2 55f 66 66 66 6E 
3b1f6 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3b1fa 561 76 66 66 66 
3b1fe 562 00 00 00 00 
3b202 563 3C 7E 66 66 
3b206 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b20a 565 66 66 7E 3C 
3b20e 566 00 00 00 00 
3b212 567 3E 7E 66 66 
3b216 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3b21a 569 06 06 06 06 
3b21e 56a 00 00 00 00 
3b222 56b 3C 7E 66 66 
3b226 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3b22a 56d 66 56 3E 6C 
3b22e 56e 00 00 00 00 
3b232 56f 3E 7E 66 66 
3b236 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3b23a 571 66 66 C6 C6 
3b23e 572 00 00 00 00 
3b242 573 7C 7E 06 06 
3b246 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3b24a 575 60 60 7E 3E 
3b24e 576 00 00 00 00 
3b252 577 7E 7E 18 18 
3b256 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3b25a 579 18 18 18 18 
3b25e 57a 00 00 00 00 
3b262 57b 66 66 66 66 
3b266 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b26a 57d 66 66 7E 3C 
3b26e 57e 00 00 00 00 
3b272 57f 66 66 66 66 
3b276 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3b27a 581 3C 3C 18 18 
3b27e 582 00 00 00 00 
3b282 583 C6 C6 C6 C6 
3b286 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3b28a 585 FE EE C6 82 
3b28e 586 00 00 00 00 
3b292 587 66 66 66 3C 
3b296 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3b29a 589 3C 66 66 66 
3b29e 58a 00 00 00 00 
3b2a2 58b 66 66 66 66 
3b2a6 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3b2aa 58d 18 18 18 18 
3b2ae 58e 00 00 00 00 
3b2b2 58f 7E 7E 30 30 
3b2b6 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3b2ba 591 06 06 7E 7E 
3b2be 592 00 00 00 00 
3b2c2 593 3C 3C 0C 0C 
3b2c6 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3b2ca 595 0C 0C 3C 3C 
3b2ce 596 00 00 00 00 
3b2d2 597 06 06 0C 0C 
3b2d6 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3b2da 599 60 60 C0 C0 
3b2de 59a 00 00 00 00 
3b2e2 59b 3C 3C 30 30 
3b2e6 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3b2ea 59d 30 30 3C 3C 
3b2ee 59e 00 00 00 00 
3b2f2 59f 18 18 3C 3C 
3b2f6 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3b2fa 5a1 00 00 00 00 
3b2fe 5a2 00 00 00 00 
3b302 5a3 00 00 00 00 
3b306 5a4 00 00 00 00 
3b30a 5a5 00 00       | 	byte	$00[18]
3b30c 5a6 FE FE 00 00 
3b310 5a7 00 00 0C 0C 
3b314 5a8 18 18 00 00 
3b318 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3b31c 5aa 00 00 00 00 
3b320 5ab 00 00 00 00 
3b324 5ac 00          | 	byte	$00[9]
3b325 5ac 3C 7C 60 7C 
3b329 5ad 7E 66 66 7E 
3b32d 5ae 7C 00 00 00 
3b331 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3b335 5b0 3E 7E 66 66 
3b339 5b1 66 66 66 7E 
3b33d 5b2 3E 00 00 00 
3b341 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3b345 5b4 3C 3E 06 06 
3b349 5b5 06 06 06 7E 
3b34d 5b6 7C 00 00 00 
3b351 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3b355 5b8 7C 7E 66 66 
3b359 5b9 66 66 66 7E 
3b35d 5ba 7C 00 00 00 
3b361 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3b365 5bc 3C 7E 66 66 
3b369 5bd 7E 06 06 7E 
3b36d 5be 7C 00 00 00 
3b371 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3b375 5c0 18 7E 7E 18 
3b379 5c1 18 18 18 18 
3b37d 5c2 18 00 00 00 
3b381 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b385 5c4 7C 7E 66 66 
3b389 5c5 66 66 7E 7C 
3b38d 5c6 60 7E 3E 00 
3b391 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3b395 5c8 3E 7E 66 66 
3b399 5c9 66 66 66 66 
3b39d 5ca 66 00 00 00 
3b3a1 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3b3a5 5cc 1C 1C 18 18 
3b3a9 5cd 18 18 18 3C 
3b3ad 5ce 3C 00 00 00 
3b3b1 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3b3b5 5d0 30 30 30 30 
3b3b9 5d1 30 30 30 30 
3b3bd 5d2 30          | 	byte	$30[9]
3b3be 5d2 3E 1E 00 00 
3b3c2 5d3 06 06 06 36 
3b3c6 5d4 36 1E 1E 1E 
3b3ca 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3b3ce 5d6 00 00 00 00 
3b3d2 5d7 1C 1C 18 18 
3b3d6 5d8 18 18 18 18 
3b3da 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3b3de 5da 00 00 00 00 
3b3e2 5db 00 00 00    | 	byte	$00[7]
3b3e5 5dc 6C FE FE D6 
3b3e9 5dd D6 C6 C6 C6 
3b3ed 5de C6 00 00 00 
3b3f1 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3b3f5 5e0 3E 7E 66 66 
3b3f9 5e1 66 66 66 66 
3b3fd 5e2 66 00 00 00 
3b401 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3b405 5e4 3C 7E 66 66 
3b409 5e5 66 66 66 7E 
3b40d 5e6 3C 00 00 00 
3b411 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3b415 5e8 3E 7E 66 66 
3b419 5e9 66 66 66 7E 
3b41d 5ea 3E 06 06 00 
3b421 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3b425 5ec 7C 7E 66 66 
3b429 5ed 66 66 66 7E 
3b42d 5ee 7C 60 60 00 
3b431 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3b435 5f0 3E 7E 66 06 
3b439 5f1 06 06 06 06 
3b43d 5f2 06 00 00 00 
3b441 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3b445 5f4 7C 7E 06 0E 
3b449 5f5 3C 70 60 7E 
3b44d 5f6 3E 00 00 00 
3b451 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3b455 5f8 7E 7E 18 18 
3b459 5f9 18 18 18 78 
3b45d 5fa 70 00 00 00 
3b461 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3b465 5fc 66 66 66 66 
3b469 5fd 66 66 66    | 	byte	$66[7]
3b46c 5fe 7E 7C 00 00 
3b470 5ff 00 00 00 00 
3b474 600 00 66 66 66 
3b478 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3b47c 602 18 18 00 00 
3b480 603 00 00 00 00 
3b484 604 00 C6 C6 D6 
3b488 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3b48c 606 C6 82 00 00 
3b490 607 00 00 00 00 
3b494 608 00 66 66 3C 
3b498 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3b49c 60a 66 66 00 00 
3b4a0 60b 00 00 00 00 
3b4a4 60c 00 66 66 66 
3b4a8 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3b4ac 60e 7C 60 7E 3E 
3b4b0 60f 00 00 00 00 
3b4b4 610 00 7E 7E 30 
3b4b8 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b4bc 612 7E 7E 00 00 
3b4c0 613 00 00 30 18 
3b4c4 614 18 18 18 0C 
3b4c8 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3b4cc 616 18 30 00 00 
3b4d0 617 00 00 18 18 
3b4d4 618 18 18 18 18 
3b4d8 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b4dc 61a 18 18 00 00 
3b4e0 61b 00 00 0C 18 
3b4e4 61c 18 18 18 30 
3b4e8 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3b4ec 61e 18 0C 00 00 
3b4f0 61f 00 00 6C 7E 
3b4f4 620 36 00 00 00 
3b4f8 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3b4fc 622 00 00 00 00 
3b500 623 00 00 00 00 
3b504 624 00          | 	byte	$00[9]
3b505 624 18 18 18 18 
3b509 625 18 18 00 00 
3b50d 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b510 627             | 'amiga_font     file "amigafont.def"
3b510 627 00 6C FE FE 
3b514 628 7C 38 10 00 
3b518 629 18 18 18 F8 
3b51c 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3b520 62b C0 C0 C0 C0 
3b524 62c C0 C0 C0 C0 | 	byte	$c0[8]
3b528 62d 18 18 18 1F 
3b52c 62e 1F 00 00 00 
3b530 62f 18 18 18 1F 
3b534 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3b538 631 00 00 00 1F 
3b53c 632 1F 18 18 18 
3b540 633 C0 E0 70 38 
3b544 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3b548 635 03 07 0E 1C 
3b54c 636 38 70 E0 C0 
3b550 637 80 C0 E0 F0 
3b554 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3b558 639 00 00 00 00 
3b55c 63a F0 F0 F0 F0 
3b560 63b 01 03 07 0F 
3b564 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3b568 63d F0 F0 F0 F0 
3b56c 63e 00 00 00 00 
3b570 63f 0F 0F 0F 0F 
3b574 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3b578 641 FF FF 00 00 
3b57c 642 00 00 00 00 
3b580 643 00 00 00 00 
3b584 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3b588 645 00 00 00 00 
3b58c 646 0F 0F 0F 0F 
3b590 647 00 38 38 EE 
3b594 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3b598 649 00 00 00 F8 
3b59c 64a F8 18 18 18 
3b5a0 64b 00 00 00 FF 
3b5a4 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3b5a8 64d 18 18 18 FF 
3b5ac 64e FF 18 18 18 
3b5b0 64f 00 00 3C 7E 
3b5b4 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3b5b8 651 00 00 00 00 
3b5bc 652 FF FF FF FF 
3b5c0 653 03 03 03 03 
3b5c4 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3b5c8 655 00 00 00 FF 
3b5cc 656 FF 18 18 18 
3b5d0 657 18 18 18 FF 
3b5d4 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3b5d8 659 0F 0F 0F 0F 
3b5dc 65a 0F 0F 0F 0F | 	byte	$0f[8]
3b5e0 65b 18 18 18 F8 
3b5e4 65c F8 00 00 00 
3b5e8 65d 1E 06 1E 06 
3b5ec 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3b5f0 65f 00 18 3C 7E 
3b5f4 660 18 18 18 00 
3b5f8 661 00 18 18 18 
3b5fc 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3b600 663 00 18 0C 7E 
3b604 664 0C 18 00 00 
3b608 665 00 18 30 7E 
3b60c 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3b610 667 00 00 00 00 
3b614 668 00 00 00 00 
3b618 669 00          | 	byte	$00[9]
3b619 669 18 18 18 18 
3b61d 66a 00 18 00 00 
3b621 66b 66 66 66 00 
3b625 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3b629 66d 66 FF 66 66 
3b62d 66e FF 66 00 18 
3b631 66f 7C 06 3C 60 
3b635 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3b639 671 66 36 18 0C 
3b63d 672 66 62 00 38 
3b641 673 6C 38 1C F6 
3b645 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3b649 675 18 18 18 00 
3b64d 676 00 00 00 00 
3b651 677 70 38 18 18 
3b655 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3b659 679 0E 1C 18 18 
3b65d 67a 1C 0E 00 00 
3b661 67b 66 3C FF 3C 
3b665 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3b669 67d 18 18 7E 18 
3b66d 67e 18 00 00 00 
3b671 67f 00 00 00 00 
3b675 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3b679 681 00 00 7E 00 
3b67d 682 00 00 00 00 
3b681 683 00 00 00 00 
3b685 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3b689 685 60 30 18 0C 
3b68d 686 06 02 00 00 
3b691 687 3C 66 76 6E 
3b695 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3b699 689 18 1C 18 18 
3b69d 68a 18 7E 00 00 
3b6a1 68b 3C 66 30 18 
3b6a5 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3b6a9 68d 7E 30 18 30 
3b6ad 68e 66 3C 00 00 
3b6b1 68f 30 38 3C 36 
3b6b5 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3b6b9 691 7E 06 3E 60 
3b6bd 692 66 3C 00 00 
3b6c1 693 3C 06 3E 66 
3b6c5 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3b6c9 695 7E 60 30 18 
3b6cd 696 0C 0C 00 00 
3b6d1 697 3C 66 3C 66 
3b6d5 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3b6d9 699 3C 66 7C 60 
3b6dd 69a 30 1C 00 00 
3b6e1 69b 00 18 18 00 
3b6e5 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3b6e9 69d 00 18 18 00 
3b6ed 69e 18 18 0C 60 
3b6f1 69f 30 18 0C 18 
3b6f5 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3b6f9 6a1 00 7E 00 00 
3b6fd 6a2 7E 00 00 06 
3b701 6a3 0C 18 30 18 
3b705 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3b709 6a5 3C 66 30 18 
3b70d 6a6 00 18 00 00 
3b711 6a7 3C 66 76 76 
3b715 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3b719 6a9 18 3C 66 66 
3b71d 6aa 7E 66 00 00 
3b721 6ab 3E 66 3E 66 
3b725 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3b729 6ad 3C 66 06 06 
3b72d 6ae 66 3C 00 00 
3b731 6af 1E 36 66 66 
3b735 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3b739 6b1 7E 06 3E 06 
3b73d 6b2 06 7E 00 00 
3b741 6b3 7E 06 3E 06 
3b745 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3b749 6b5 7C 06 06 76 
3b74d 6b6 66 7C 00 00 
3b751 6b7 66 66 7E 66 
3b755 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3b759 6b9 7E 18 18 18 
3b75d 6ba 18 7E 00 00 
3b761 6bb 60 60 60 60 
3b765 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3b769 6bd 66 36 1E 1E 
3b76d 6be 36 66 00 00 
3b771 6bf 06 06 06 06 
3b775 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3b779 6c1 C6 EE FE D6 
3b77d 6c2 C6 C6 00 00 
3b781 6c3 66 6E 7E 7E 
3b785 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3b789 6c5 3C 66 66 66 
3b78d 6c6 66 3C 00 00 
3b791 6c7 3E 66 66 3E 
3b795 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3b799 6c9 3C 66 66 66 
3b79d 6ca 36 6C 00 00 
3b7a1 6cb 3E 66 66 3E 
3b7a5 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3b7a9 6cd 3C 06 3C 60 
3b7ad 6ce 60 3C 00 00 
3b7b1 6cf 7E 18 18 18 
3b7b5 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3b7b9 6d1 66 66 66 66 
3b7bd 6d2 66          | 	byte	$66[5]
3b7be 6d2 7E 00 00 66 
3b7c2 6d3 66 66 66 3C 
3b7c6 6d4 18 00 00 C6 
3b7ca 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3b7ce 6d6 C6 00 00 66 
3b7d2 6d7 66 3C 3C 66 
3b7d6 6d8 66 00 00 66 
3b7da 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3b7de 6da 18 00 00 7E 
3b7e2 6db 30 18 0C 06 
3b7e6 6dc 7E 00 00 78 
3b7ea 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3b7ee 6de 78 00 00 02 
3b7f2 6df 06 0C 18 30 
3b7f6 6e0 60 00 00 1E 
3b7fa 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3b7fe 6e2 1E 00 00 10 
3b802 6e3 38 6C C6 00 
3b806 6e4 00 00 00 00 
3b80a 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b80e 6e6 FF 00 00 18 
3b812 6e7 3C 7E 7E 3C 
3b816 6e8 18 00 00 00 
3b81a 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3b81e 6ea 7C 00 00 06 
3b822 6eb 06 3E 66 66 
3b826 6ec 3E 00 00 00 
3b82a 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3b82e 6ee 3C 00 00 60 
3b832 6ef 60 7C 66 66 
3b836 6f0 7C 00 00 00 
3b83a 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3b83e 6f2 3C 00 00 70 
3b842 6f3 18 7C 18 18 
3b846 6f4 18 00 00 00 
3b84a 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3b84e 6f6 60 3E 00 06 
3b852 6f7 06 3E 66 66 
3b856 6f8 66 00 00 18 
3b85a 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3b85e 6fa 3C 00 00 60 
3b862 6fb 00 60 60 60 
3b866 6fc 60 3C 00 06 
3b86a 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3b86e 6fe 66 00 00 1C 
3b872 6ff 18 18 18 18 
3b876 700 3C 00 00 00 
3b87a 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3b87e 702 C6 00 00 00 
3b882 703 3E 66 66 66 
3b886 704 66 00 00 00 
3b88a 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3b88e 706 3C 00 00 00 
3b892 707 3E 66 66 3E 
3b896 708 06 06 00 00 
3b89a 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3b89e 70a 60 60 00 00 
3b8a2 70b 3E 66 06 06 
3b8a6 70c 06 00 00 00 
3b8aa 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3b8ae 70e 3E 00 00 18 
3b8b2 70f 7E 18 18 18 
3b8b6 710 70 00 00 00 
3b8ba 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3b8be 712 7C 00 00 00 
3b8c2 713 66 66 66 3C 
3b8c6 714 18 00 00 00 
3b8ca 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3b8ce 716 6C 00 00 00 
3b8d2 717 66 3C 18 3C 
3b8d6 718 66 00 00 00 
3b8da 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3b8de 71a 30 1E 00 00 
3b8e2 71b 7E 30 18 0C 
3b8e6 71c 7E 00 00 18 
3b8ea 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3b8ee 71e 3C 00 18 18 
3b8f2 71f 18 18 18 18 
3b8f6 720 18 18 00 7E 
3b8fa 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3b8fe 722 60 00 10 18 
3b902 723 1C 1E 1C 18 
3b906 724 10 00 08 18 
3b90a 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3b90e 726 08 00       | 	byte	$08, $00
3b910 727 00 00 00 00 
3b914 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3b915 728 80 00 00 00 
3b919 729 00 80 00 00 
3b91d 72a 80 80 00 00 
3b921 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3b925 72c 80 00 80 00 
3b929 72d 00 40 80 00 
3b92d 72e AA AA AA 00 
3b931 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3b935 730 FF 00 00 00 
3b939 731 00 FF 00 00 
3b93d 732 FF FF 00 00 
3b941 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3b945 734 FF 00 FF 00 
3b949 735 00 FF FF 00 
3b94d 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3b950 737 00 00 00 00 
3b954 738 00          | ataripalette   file "ataripalettep2.def"
3b955 738 11 11 11 00 
3b959 739 22 22 22 00 
3b95d 73a 33 33 33 00 
3b961 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3b965 73c 55 55 55 00 
3b969 73d 66 66 66 00 
3b96d 73e 77 77 77 00 
3b971 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3b975 740 99 99 99 00 
3b979 741 AA AA AA 00 
3b97d 742 BB BB BB 00 
3b981 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3b985 744 DD DD DD 00 
3b989 745 EE EE EE 00 
3b98d 746 FF FF FF 00 
3b991 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3b995 748 00 14 40 00 
3b999 749 00 1E 60 00 
3b99d 74a 00 28 80 00 
3b9a1 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3b9a5 74c 00 3C BF 00 
3b9a9 74d 00 46 DF 00 
3b9ad 74e 00 50 FF 00 
3b9b1 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3b9b5 750 39 77 FF 00 
3b9b9 751 55 8A FF 00 
3b9bd 752 71 9E FF 00 
3b9c1 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3b9c5 754 AA C5 FF 00 
3b9c9 755 C6 D8 FF 00 
3b9cd 756 E3 EC FF 00 
3b9d1 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3b9d5 758 00 00 40 00 
3b9d9 759 00 00 60 00 
3b9dd 75a 00 00 80 00 
3b9e1 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3b9e5 75c 00 00 BF 00 
3b9e9 75d 00 00 DF 00 
3b9ed 75e 00 00 FF 00 
3b9f1 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3b9f5 760 39 39 FF 00 
3b9f9 761 55 55 FF 00 
3b9fd 762 71 71 FF 00 
3ba01 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3ba05 764 AA AA FF 00 
3ba09 765 C6 C6 FF 00 
3ba0d 766 E3 E3 FF 00 
3ba11 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3ba15 768 20 00 40 00 
3ba19 769 30 00 60 00 
3ba1d 76a 40 00 80 00 
3ba21 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3ba25 76c 60 00 BF 00 
3ba29 76d 70 00 DF 00 
3ba2d 76e 80 00 FF 00 
3ba31 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3ba35 770 9C 39 FF 00 
3ba39 771 AA 55 FF 00 
3ba3d 772 B8 71 FF 00 
3ba41 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3ba45 774 D5 AA FF 00 
3ba49 775 E3 C6 FF 00 
3ba4d 776 F1 E3 FF 00 
3ba51 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3ba55 778 40 00 40 00 
3ba59 779 60 00 60 00 
3ba5d 77a 80 00 80 00 
3ba61 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3ba65 77c BF 00 BF 00 
3ba69 77d DF 00 DF 00 
3ba6d 77e FF 00 FF 00 
3ba71 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3ba75 780 FF 39 FF 00 
3ba79 781 FF 55 FF 00 
3ba7d 782 FF 71 FF 00 
3ba81 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3ba85 784 FF AA FF 00 
3ba89 785 FF C6 FF 00 
3ba8d 786 FF E3 FF 00 
3ba91 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3ba95 788 40 00 20 00 
3ba99 789 60 00 30 00 
3ba9d 78a 80 00 40 00 
3baa1 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3baa5 78c BF 00 60 00 
3baa9 78d DF 00 70 00 
3baad 78e FF 00 80 00 
3bab1 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3bab5 790 FF 39 9C 00 
3bab9 791 FF 55 AA 00 
3babd 792 FF 71 B8 00 
3bac1 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3bac5 794 FF AA D5 00 
3bac9 795 FF C6 E3 00 
3bacd 796 FF E3 F1 00 
3bad1 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3bad5 798 40 00 00 00 
3bad9 799 60 00 00 00 
3badd 79a 80 00 00 00 
3bae1 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3bae5 79c BF 00 00 00 
3bae9 79d DF 00 00 00 
3baed 79e FF 00 00 00 
3baf1 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3baf5 7a0 FF 39 39 00 
3baf9 7a1 FF 55 55 00 
3bafd 7a2 FF 71 71 00 
3bb01 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3bb05 7a4 FF AA AA 00 
3bb09 7a5 FF C6 C6 00 
3bb0d 7a6 FF E3 E3 00 
3bb11 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3bb15 7a8 40 10 00 00 
3bb19 7a9 60 18 00 00 
3bb1d 7aa 80 20 00 00 
3bb21 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3bb25 7ac BF 30 00 00 
3bb29 7ad DF 38 00 00 
3bb2d 7ae FF 40 00 00 
3bb31 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3bb35 7b0 FF 6A 39 00 
3bb39 7b1 FF 80 55 00 
3bb3d 7b2 FF 95 71 00 
3bb41 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3bb45 7b4 FF BF AA 00 
3bb49 7b5 FF D5 C6 00 
3bb4d 7b6 FF EA E3 00 
3bb51 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3bb55 7b8 40 20 00 00 
3bb59 7b9 60 30 00 00 
3bb5d 7ba 80 40 00 00 
3bb61 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3bb65 7bc BF 60 00 00 
3bb69 7bd DF 70 00 00 
3bb6d 7be FF 80 00 00 
3bb71 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3bb75 7c0 FF 9C 39 00 
3bb79 7c1 FF AA 55 00 
3bb7d 7c2 FF B8 71 00 
3bb81 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3bb85 7c4 FF D5 AA 00 
3bb89 7c5 FF E3 C6 00 
3bb8d 7c6 FF F1 E3 00 
3bb91 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3bb95 7c8 40 30 00 00 
3bb99 7c9 60 48 00 00 
3bb9d 7ca 80 60 00 00 
3bba1 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3bba5 7cc BF 90 00 00 
3bba9 7cd DF A8 00 00 
3bbad 7ce FF C0 00 00 
3bbb1 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3bbb5 7d0 FF CE 39 00 
3bbb9 7d1 FF D5 55 00 
3bbbd 7d2 FF DC 71 00 
3bbc1 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3bbc5 7d4 FF EA AA 00 
3bbc9 7d5 FF F1 C6 00 
3bbcd 7d6 FF F8 E3 00 
3bbd1 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3bbd5 7d8 30 40 00 00 
3bbd9 7d9 48 60 00 00 
3bbdd 7da 60 80 00 00 
3bbe1 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3bbe5 7dc 90 BF 00 00 
3bbe9 7dd A8 DF 00 00 
3bbed 7de C0 FF 00 00 
3bbf1 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3bbf5 7e0 CE FF 39 00 
3bbf9 7e1 D5 FF 55 00 
3bbfd 7e2 DC FF 71 00 
3bc01 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3bc05 7e4 EA FF AA 00 
3bc09 7e5 F1 FF C6 00 
3bc0d 7e6 F8 FF E3 00 
3bc11 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3bc15 7e8 00 40 00 00 
3bc19 7e9 00 60 00 00 
3bc1d 7ea 00 80 00 00 
3bc21 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3bc25 7ec 00 BF 00 00 
3bc29 7ed 00 DF 00 00 
3bc2d 7ee 00 FF 00 00 
3bc31 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3bc35 7f0 39 FF 39 00 
3bc39 7f1 55 FF 55 00 
3bc3d 7f2 71 FF 71 00 
3bc41 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3bc45 7f4 AA FF AA 00 
3bc49 7f5 C6 FF C6 00 
3bc4d 7f6 E3 FF E3 00 
3bc51 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3bc55 7f8 00 40 14 00 
3bc59 7f9 00 60 1E 00 
3bc5d 7fa 00 80 28 00 
3bc61 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3bc65 7fc 00 BF 3C 00 
3bc69 7fd 00 DF 46 00 
3bc6d 7fe 00 FF 50 00 
3bc71 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3bc75 800 39 FF 77 00 
3bc79 801 55 FF 8A 00 
3bc7d 802 71 FF 9E 00 
3bc81 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3bc85 804 AA FF C5 00 
3bc89 805 C6 FF D8 00 
3bc8d 806 E3 FF EC 00 
3bc91 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3bc95 808 00 40 28 00 
3bc99 809 00 60 3C 00 
3bc9d 80a 00 80 50 00 
3bca1 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3bca5 80c 00 BF 78 00 
3bca9 80d 00 DF 8C 00 
3bcad 80e 00 FF A0 00 
3bcb1 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3bcb5 810 39 FF B5 00 
3bcb9 811 55 FF C0 00 
3bcbd 812 71 FF CA 00 
3bcc1 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3bcc5 814 AA FF DF 00 
3bcc9 815 C6 FF EA 00 
3bccd 816 E3 FF F4 00 
3bcd1 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3bcd5 818 00 40 40 00 
3bcd9 819 00 60 60 00 
3bcdd 81a 00 80 80 00 
3bce1 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3bce5 81c 00 BF BF 00 
3bce9 81d 00 DF DF 00 
3bced 81e 00 FF FF 00 
3bcf1 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3bcf5 820 39 FF FF 00 
3bcf9 821 55 FF FF 00 
3bcfd 822 71 FF FF 00 
3bd01 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3bd05 824 AA FF FF 00 
3bd09 825 C6 FF FF 00 
3bd0d 826 E3 FF FF 00 
3bd11 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3bd15 828 00 28 40 00 
3bd19 829 00 3C 60 00 
3bd1d 82a 00 50 80 00 
3bd21 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3bd25 82c 00 78 BF 00 
3bd29 82d 00 8C DF 00 
3bd2d 82e 00 A0 FF 00 
3bd31 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3bd35 830 39 B5 FF 00 
3bd39 831 55 C0 FF 00 
3bd3d 832 71 CA FF 00 
3bd41 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3bd45 834 AA DF FF 00 
3bd49 835 C6 EA FF 00 
3bd4d 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3bd50 837             | 
3bd50 837             | '**********************************************************************************
3bd50 837             | '
3bd50 837             | '        Timings and colors definitions
3bd50 837             | '
3bd50 837             | '**********************************************************************************
3bd50 837             | 
3bd50 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3bd50 837 08 00 00 00 
3bd54 838 3C 00 00 00 
3bd58 839 08 00 00 00 
3bd5c 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3bd60 83b 07 00 00 00 
3bd64 83c 04 00 00 00 
3bd68 83d 01 00 00 00 
3bd6c 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3bd70 83f 58 02 00 00 
3bd74 840 20 9E 4B 14 
3bd78 841 FB A8 9E 01 
3bd7c 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3bd80 843 00 00 00 00 
3bd84 844 C0 00 00 00 
3bd88 845 00 00 00 00 
3bd8c 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bd90 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3bd90 847 00 75 C7 97 
3bd94 848 27 47 F6 0A 
3bd98 849 05 79 CB 9B 
3bd9c 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3bda0 84b             | 
3bda0 84b             | ''--------  Initialization  ----------------------------------------------------------------
3bda0 84b             | 
3bda0 84b 28 0C 64 FD | hdmi            setq    #6
3bda4 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3bda8 84d 28 10 64 FD |                 setq    #8
3bdac 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3bdb0 84f             | 
3bdb0 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3bdb4 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3bdb8 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3bdbc 852 D6 C6 01 F1 |                 add     t1,hbase
3bdc0 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3bdc4 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3bdc8 855 7B 0B 80 5F 
3bdcc 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3bdd0 857 66 66 86 FF 
3bdd4 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3bdd8 859             | '
3bdd8 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3bddc 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3bde0 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3bde4 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3bde8 85d             | 
3bde8 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3bdec 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3bdf0 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3bdf4 860             | 
3bdf4 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3bdf4 860             | 
3bdf4 860 28 06 64 FD | p101            setq 	#3
3bdf8 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3bdfc 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3be00 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3be04 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3be08 865 00 A0 05 F6 |                 mov     dlinum, #0
3be0c 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3be10 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3be14 868             | 
3be14 868             | 
3be14 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3be18 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3be1c 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3be20 86b             |                 
3be20 86b             | 
3be20 86b             | 
3be20 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3be20 86b             |   
3be20 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3be24 86c 29 FE 65 3D |          if_nc  setq2   #255
3be28 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3be2c 86e             | 
3be2c 86e             | '' -----   up porch (before the picture)
3be2c 86e             | 
3be2c 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3be30 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3be34 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3be38 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3be3c 872             |  
3be3c 872             |    
3be3c 872             |  
3be3c 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3be40 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3be44 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3be48 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3be4c 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3be50 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3be54 878             | 
3be54 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3be58 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3be5c 87a 48 00 B0 FD | 		call    #dli
3be60 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3be64 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3be68 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3be6c 87e             |                 	
3be6c 87e             |                 
3be6c 87e             | 
3be6c 87e             |  
3be6c 87e             | '' ------- the main screen drawing starts here
3be6c 87e             | 
3be6c 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3be70 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3be74 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3be78 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3be7c 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3be80 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3be84 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3be88 885             |               
3be88 885             | 
3be88 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3be8c 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3be90 887             | 
3be90 887             | ' ---------------- All visible lines displayed now, start vblank  
3be90 887             | 
3be90 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3be94 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3be98 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3be9c 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3bea0 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3bea4 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3bea8 88d             | 
3bea8 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3bea8 88d             | 
3bea8 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3bea8 88d             | 
3bea8 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3beac 88e             | 
3beac 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3beb0 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3beb4 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3beb8 891             | 
3beb8 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3bebc 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3bec0 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3bec4 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3bec8 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3becc 896             | 
3becc 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3bed0 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3bed4 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3bed8 899 70 00 90 AD |     if_z        jmp     #preload
3bedc 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3bee0 89b 94 00 90 AD |     if_z        jmp     #preload2
3bee4 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3bee8 89d 0C 00 90 AD |     if_z        jmp     #p390
3beec 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3bef0 89f 28 00 90 AD |     if_z        jmp     #p391  
3bef4 8a0             | 
3bef4 8a0 2D 00 64 FD | p308            ret
3bef8 8a1             |    
3bef8 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3befc 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3bf00 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3bf04 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3bf08 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3bf0c 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3bf10 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3bf14 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3bf18 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3bf1c 8aa             |  
3bf1c 8aa             | '' --------  Reload palette. To do 
3bf1c 8aa             | 
3bf1c 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3bf20 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3bf24 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3bf28 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3bf2c 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3bf30 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3bf34 8b0 70 FF 9F FD |         	jmp     #dli                
3bf38 8b1             |       
3bf38 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3bf38 8b1             | 
3bf38 8b1             | 
3bf38 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3bf38 8b1             | 
3bf38 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3bf3c 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3bf40 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3bf44 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3bf48 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3bf4c 8b6             |         
3bf4c 8b6             | '' -------------- Preload a line from PSRAM        
3bf4c 8b6             |         
3bf4c 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3bf50 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3bf54 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3bf58 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3bf5c 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3bf60 8bb             | 
3bf60 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3bf64 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3bf68 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3bf6c 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3bf70 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3bf74 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3bf78 8c1             |  
3bf78 8c1             |  
3bf78 8c1             | preload2      '  incmod  dlinum,#3
3bf78 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3bf7c 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3bf80 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3bf84 8c4 28 02 64 FD |                 setq	#1
3bf88 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3bf8c 8c6             |                 
3bf8c 8c6             | 
3bf8c 8c6             | '' -------------- Draw sprites
3bf8c 8c6             | 
3bf8c 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3bf90 8c7 10 5C 0E F5 | 		and t8,#16 wz
3bf94 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3bf98 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3bf9c 8ca             | 		
3bf9c 8ca             | 
3bf9c 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3bfa0 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3bfa4 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3bfa8 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3bfac 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3bfb0 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3bfb4 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3bfb8 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3bfbc 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3bfc0 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3bfc4 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3bfc8 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3bfcc 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3bfd0 8d7             | 
3bfd0 8d7             | 
3bfd0 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3bfd4 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3bfd8 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3bfdc 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3bfe0 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3bfe4 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3bfe8 8dd 00 5E 06 F6 |                 mov 	t9,#0
3bfec 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3bff0 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3bff4 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3bff8 8e1             |      
3bff8 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3bffc 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3c000 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3c004 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3c008 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3c00c 8e6             |                 
3c00c 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3c010 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3c014 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3c018 8e9             |   		
3c018 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3c01c 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3c020 8eb             | 
3c020 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3c024 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3c028 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3c02c 8ee             |  
3c02c 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3c030 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3c034 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3c038 8f1             | 	
3c038 8f1             | 	
3c038 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3c03c 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3c040 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3c044 8f4             | 
3c044 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3c048 8f5             | 
3c048 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3c04c 8f6 01 58 86 F1 | 	 	sub     t6,#1
3c050 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3c054 8f8             | 
3c054 8f8 28 58 62 FD |                 setq   	t6
3c058 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3c05c 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3c060 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3c064 8fc 24 00 90 AD |         if_z    jmp #p898
3c068 8fd             |          
3c068 8fd             |         
3c068 8fd 70 5F 06 F6 |                 mov  t9,#368
3c06c 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3c070 8ff             | 
3c070 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3c074 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3c078 901 FF FF 7F FF 
3c07c 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3c080 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3c084 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3c088 905 2D 01 00 F5 |                 and 0-0, t7
3c08c 906             |                
3c08c 906             | 
3c08c 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3c090 907 E5 E0 7A FA |                 wmlong 368,t3				
3c094 908             |                 
3c094 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3c098 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3c09c 90a 2D 00 64 FD |                 ret
3c0a0 90b             | 	
3c0a0 90b             | 	
3c0a0 90b             |                
3c0a0 90b             |  
3c0a0 90b             | '' -------------- Graphics line ------------------------------------------------------------
3c0a0 90b             |  
3c0a0 90b             | 
3c0a0 90b             | '' consts and vars
3c0a0 90b             | 
3c0a0 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3c0a4 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3c0a8 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3c0ac 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3c0b0 90f             | 
3c0b0 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3c0b4 910             | 
3c0b4 910             | '------ these longs will be set by setmode function
3c0b4 910             | 
3c0b4 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3c0b8 911 00 00 00 00 | m_sn            long    0        'sync
3c0bc 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3c0c0 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3c0c4 914             | 'm_border        long    0        'left/right borders
3c0c4 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3c0c8 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3c0cc 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3c0d0 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3c0d4 918 00 00 00 00 | i_totalvis      long    0
3c0d8 919             | 
3c0d8 919             | '-------------------------------------
3c0d8 919             |  
3c0d8 919 00 00 00 00 | linenum         long    0
3c0dc 91a 00 00 00 00 | frames          long    0
3c0e0 91b 00 00 00 00 | dlinum long 0
3c0e4 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3c0e8 91d             | 
3c0e8 91d 00 00 00 00 | vblankptr       long    0
3c0ec 91e 00 00 00 00 | modeptr         long    0
3c0f0 91f 00 00 00 00 | paletteptr      long    0
3c0f4 920 00 00 00 00 | dlptr           long    0
3c0f8 921 01 00 00 00 | hbase           long    1
3c0fc 922 00 00 00 00 | mailbox         long    0
3c100 923 00 00 00 00 | spriteptr          long 0
3c104 924             | 
3c104 924 00 00 00 00 | cmd             long    0
3c108 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3c10c 926 00 04 00 00 | buf2            long    1024
3c110 927 01 00 00 00 | dlptr2          long    1
3c114 928 01 00 00 00 | dl              long    1
3c118 929             | 
3c118 929 00 00 00 00 | buf1c long 0
3c11c 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3c120 92b 01 00 00 00 | framebuf2       long    1
3c124 92c 01 00 00 00 | hsync0          long    1
3c128 92d 01 00 00 00 | hsync1          long    1
3c12c 92e             | 
3c12c 92e 01 00 00 00 | t1              long    1
3c130 92f 00 00 00 00 | t2 long 0
3c134 930 00 00 00 00 | t3 long 0
3c138 931 00 00 00 00 | t4 long 0
3c13c 932             | 
3c13c 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3c140 933 00 00 00 00 | rcnt2           long    0
3c144 934 00 00 00 00 | rcnt2a          long    0
3c148 935 00 00 00 00 | roffset         long    0
3c14c 936 00 00 00 00 | rdl             long    0  'dl repeat line
3c150 937 00 00 00 00 | dlc             long    0  'dl command
3c154 938             | 
3c154 938 FF FF FF FF | affffffff       long    $ffffffff
3c158 939 00 00 00 00 | sprite1pointer long 0
3c15c 93a 00 00 00 00 | sprite1xy      long 0
3c160 93b 00 00 00 00 | sprite1wh      long 0
3c164 93c 00 00 00 00 | sprite2pointer long 0
3c168 93d 00 00 00 00 | sprite2xy      long 0
3c16c 93e 00 00 00 00 | sprite2wh      long 0
3c170 93f 00 00 00 00 | sprite3pointer long 0
3c174 940 00 00 00 00 | sprite3xy      long 0
3c178 941 00 00 00 00 | sprite3wh      long 0
3c17c 942 00 00 00 00 | sprite4pointer long 0
3c180 943 00 00 00 00 | sprite4xy      long 0
3c184 944 00 00 00 00 | sprite4wh      long 0
3c188 945 00 00 00 00 | sprite5pointer long 0
3c18c 946 00 00 00 00 | sprite5xy      long 0
3c190 947 00 00 00 00 | sprite5wh      long 0
3c194 948 00 00 00 00 | sprite6pointer long 0
3c198 949 00 00 00 00 | sprite6xy      long 0
3c19c 94a 00 00 00 00 | sprite6wh      long 0
3c1a0 94b 00 00 00 00 | sprite7pointer long 0
3c1a4 94c 00 00 00 00 | sprite7xy      long 0
3c1a8 94d 00 00 00 00 | sprite7wh      long 0
3c1ac 94e 00 00 00 00 | sprite8pointer long 0
3c1b0 94f 00 00 00 00 | sprite8xy      long 0
3c1b4 950 00 00 00 00 | sprite8wh      long 0
3c1b8 951 00 00 00 00 | sprite9pointer long 0
3c1bc 952 00 00 00 00 | sprite9xy      long 0
3c1c0 953 00 00 00 00 | sprite9wh      long 0
3c1c4 954 00 00 00 00 | sprite10pointer long 0
3c1c8 955 00 00 00 00 | sprite10xy      long 0
3c1cc 956 00 00 00 00 | sprite10wh      long 0
3c1d0 957 00 00 00 00 | sprite11pointer long 0
3c1d4 958 00 00 00 00 | sprite11xy      long 0
3c1d8 959 00 00 00 00 | sprite11wh      long 0
3c1dc 95a 00 00 00 00 | sprite12pointer long 0
3c1e0 95b 00 00 00 00 | sprite12xy      long 0
3c1e4 95c 00 00 00 00 | sprite12wh      long 0
3c1e8 95d 00 00 00 00 | sprite13pointer long 0
3c1ec 95e 00 00 00 00 | sprite13xy      long 0
3c1f0 95f 00 00 00 00 | sprite13wh      long 0
3c1f4 960 00 00 00 00 | sprite14pointer long 0
3c1f8 961 00 00 00 00 | sprite14xy      long 0
3c1fc 962 00 00 00 00 | sprite14wh      long 0
3c200 963 00 00 00 00 | sprite15pointer long 0
3c204 964 00 00 00 00 | sprite15xy      long 0
3c208 965 00 00 00 00 | sprite15wh      long 0
3c20c 966 00 00 00 00 | sprite16pointer long 0
3c210 967 00 00 00 00 | sprite16xy      long 0
3c214 968 00 00 00 00 | sprite16wh      long 0
3c218 969 00 00 00 00 | sprite17pointer long 0
3c21c 96a 00 00 00 00 | sprite17xy      long 0
3c220 96b 00 00 00 00 | sprite17wh      long 0
3c224 96c 00 00 00 00 | sprite18pointer long 0
3c228 96d 00 00 00 00 | sprite18xy      long 0
3c22c 96e 00 00 00 00 | sprite18wh      long 0
3c230 96f 00 00 00 00 | spritenum long 0
3c234 970             | 
3c234 970 00 00 00 00 | spriteline long 0
3c238 971 84 03 00 00 | sprite_x long 900
3c23c 972 00 00 00 00 | sprite_y long 0
3c240 973 10 00 00 00 | sprite_w long 16
3c244 974 40 00 00 00 | sprite_h long 64
3c248 975 00 00 00 00 | l2 long 0
3c24c 976 00 00 00 00 | t5 long 0
3c250 977 00 00 00 00 | t6 long 0
3c254 978 00 00 00 00 | t7 long 0
3c258 979 00 00 00 00 | t8 long 0
3c25c 97a 00 00 00 00 | t9 long 0
3c260 97b 00 00 00 00 | preloadaddr long 0
3c264 97c 00 00 00 00 | preloadlineaddr long 0
3c268 97d 00 04 00 00 | a1024 long 1024
3c26c 97e             | 
3c26c 97e E0 03 00 00 | aa long 992
3c270 97f FF 03 00 00 | a1023 long 1023
3c274 980 00 10 00 00 | a4096 long 4096
3c278 981             |  fit 368
3c278 981             | _psram_spin2_dat_
3c278 981 00 00 00 00 
      ...             
3c370 9bf 00 00 00 00 
3c374 9c0 00 00 00 00 |     listdata long 0[8*8]
3c378 9c1             |             orgh
3c378                 | 
3c378                 | ' driver state
3c378     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3c37c     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3c380                 | 
3c380                 | ' delay profile
3c380     07 00 00 00 
3c384     00 CF 7B 05 
3c388     80 D1 F0 08 
3c38c     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3c390     80 C4 60 0F 
3c394     80 39 7A 12 
3c398     40 2D D9 13 
3c39c     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3c3a0                 | 
3c3a0                 | ' data to be passed to driver when starting it
3c3a0                 | startupData
3c3a0     00 00 00 00 |     long    0           ' current frequency
3c3a4     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3c3a8     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3c3ac     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3c3b0     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3c3b4     C0 C3 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3c3b8     40 C4 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3c3bc     60 C4 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3c3c0                 | 
3c3c0                 | ' data for memory
3c3c0                 | deviceData
3c3c0                 |     ' 16 bank parameters follow (16MB per bank)
3c3c0     00 00 00 00 
      ...             
3c3f8     00 00 00 00 
3c3fc     00 00 00 00 |     long    0[16]                               ' banks 0-15
3c400                 |     ' 16 banks of pin parameters follow
3c400     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3c404     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3c408     FF FF FF FF 
      ...             
3c438     FF FF FF FF 
3c43c     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3c440                 | 
3c440                 | ' data for COG polling
3c440                 | qosData 
3c440     00 00 FF FF 
3c444     00 00 FF FF 
3c448     00 00 FF FF 
3c44c     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3c450     00 00 FF FF 
3c454     00 00 FF FF 
3c458     00 00 FF FF 
3c45c     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3c460                 |     
3c460                 | ' mailbox storage
3c460                 | 
3c460                 | mailboxes
3c460     00 00 00 00 
      ...             
3c4b8     00 00 00 00 
3c4bc     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3c4c0                 | 	alignl
3c4c0                 | _psram16drv_spin2_dat_
3c4c0                 |                             orgh
3c4c0     00 00 00 00 
      ...             
3c4d8     00 00 00 00 
3c4dc     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3c4e0                 | 
3c4e0                 | driver_start
3c4e0                 |                             org
3c4e0 000             | '..................................................................................................
3c4e0 000             | ' Memory layout for COG RAM once operational:
3c4e0 000             | '
3c4e0 000             | '  COG RAM address      Usage
3c4e0 000             | '  ---------------      ----
3c4e0 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3c4e0 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3c4e0 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3c4e0 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3c4e0 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3c4e0 000             | '  ~$198-$1F3           State and register variables
3c4e0 000             | '
3c4e0 000             | ' Also during driver COG startup:
3c4e0 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3c4e0 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3c4e0 000             | '..................................................................................................
3c4e0 000             |                             
3c4e0 000             | ' Mailbox storage after vector initialization
3c4e0 000             | 
3c4e0 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3c4e4 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3c4e8 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3c4ec 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3c4f0 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3c4f4 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3c4f8 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3c4fc 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3c500 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3c504 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3c508 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3c50c 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3c510 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3c514 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3c518 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3c51c 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3c520 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3c524 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3c528 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3c52c 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3c530 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3c534 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3c538 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3c53c 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3c540 018             | 
3c540 018             | ' Mailbox parameter addresses per COG once patched
3c540 018             |                             
3c540 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3c544 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3c548 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3c54c 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3c550 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3c554 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3c558 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3c55c 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3c560 020             | 
3c560 020             | '..................................................................................................
3c560 020             | ' Per COG request and state setup and service branching
3c560 020             |         
3c560 020             | cog0                 
3c560 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3c564 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3c568 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3c56c 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3c570 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c574 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c578 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3c57c 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3c580 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3c584 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c588 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c58c 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3c590 02c             | cog1                        
3c590 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3c594 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3c598 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3c59c 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3c5a0 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c5a4 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c5a8 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3c5ac 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3c5b0 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3c5b4 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c5b8 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c5bc 037 33 CA 63 FD |                             execf   request-0               'jump to service
3c5c0 038             | cog2                         
3c5c0 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3c5c4 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3c5c8 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3c5cc 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3c5d0 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c5d4 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c5d8 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3c5dc 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3c5e0 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3c5e4 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c5e8 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c5ec 043 33 CA 63 FD |                             execf   request-0               'jump to service
3c5f0 044             | cog3                        
3c5f0 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3c5f4 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3c5f8 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3c5fc 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3c600 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c604 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c608 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3c60c 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3c610 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3c614 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c618 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c61c 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3c620 050             | cog4                        
3c620 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3c624 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3c628 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3c62c 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3c630 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c634 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c638 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3c63c 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3c640 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3c644 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c648 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c64c 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3c650 05c             | cog5                        
3c650 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3c654 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3c658 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3c65c 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3c660 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c664 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c668 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3c66c 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3c670 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3c674 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c678 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c67c 067 33 CA 63 FD |                             execf   request-0               'jump to service
3c680 068             | cog6                        
3c680 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3c684 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3c688 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3c68c 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3c690 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c694 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c698 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3c69c 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3c6a0 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3c6a4 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c6a8 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c6ac 073 33 CA 63 FD |                             execf   request-0               'jump to service
3c6b0 074             | cog7                        
3c6b0 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3c6b4 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3c6b8 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3c6bc 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3c6c0 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3c6c4 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3c6c8 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3c6cc 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3c6d0 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3c6d4 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3c6d8 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3c6dc 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3c6e0 080             |                             fit     128
3c6e0 080             | 
3c6e0 080             |                             fit     128
3c6e0 080             | pad                         long    0[128-$]                'align init code to $80
3c6e0 080             | 
3c6e0 080             | '..................................................................................................
3c6e0 080             | 
3c6e0 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3c6e0 080             | 
3c6e0 080             | init                        
3c6e0 080             |                             ' get driver scratch long address in hub
3c6e0 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3c6e4 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3c6e8 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3c6ec 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3c6f0 084             |                     
3c6f0 084             |                             ' read in the additional LUT RAM code
3c6f0 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3c6f4 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3c6f8 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3c6fc 087             | 
3c6fc 087             |                             ' read the startup parameters
3c6fc 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3c700 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3c704 089             | 
3c704 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3c704 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3c708 08a             | 
3c708 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3c70c 08b 01 00 00 5F 
3c710 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3c714 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3c718 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3c71c 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3c720 090             | 
3c720 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3c720 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3c724 091 01 00 00 FF 
3c728 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3c72c 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3c730 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3c734 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3c738 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3c73c 097 08 DE 47 F5 |                             or      a, #8
3c740 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3c744 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3c748 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3c74c 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3c750 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3c754 09d 01 DE 07 F1 |                             add     a, #1
3c758 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3c75c 09f             |  
3c75c 09f             |                             ' setup device control pin states
3c75c 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3c760 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3c764 0a1 01 00 00 FF 
3c768 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3c76c 0a3             | 
3c76c 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3c770 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3c774 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3c778 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3c77c 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3c780 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3c784 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3c788 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3c78c 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3c790 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3c794 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3c798 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3c79c 0af             | pinloop
3c79c 0af             |                             ' generate minimum CE high time before access
3c79c 0af A1 07 00 FF 
3c7a0 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3c7a4 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3c7a8 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3c7ac 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3c7b0 0b4 1F DE 63 FD |                             waitx   a                       'delay
3c7b4 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3c7b8 0b6             | 
3c7b8 0b6             |                             ' setup the COG mailboxes and addresses 
3c7b8 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3c7bc 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3c7c0 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3c7c4 0b9             | 
3c7c4 0b9 28 2E 64 FD |                             setq    #24-1
3c7c8 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3c7cc 0bb             | 
3c7cc 0bb             |                             ' setup the polling loop for active COGs 
3c7cc 0bb 01 C2 63 FD |                             cogid   id
3c7d0 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3c7d4 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3c7d8 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3c7dc 0bf 0A F0 07 F6 |                             mov     ptra, #10
3c7e0 0c0 E1 F1 03 FA |                             mul     ptra, id
3c7e4 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3c7e8 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3c7ec 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3c7f0 0c4 03 C2 07 FA |                             mul     id, #3
3c7f4 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3c7f8 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3c7fc 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3c800 0c8 D8 01 B0 FD |                             call    #reloadcogs
3c804 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3c808 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3c80c 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3c80c 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3c810 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3c814 0cd 08 04 DC FC |                             rep     #2, #8
3c818 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3c81c 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3c820 0d0             | 
3c820 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3c820 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3c820 0d0 01 C2 63 FD |                             cogid   id
3c824 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3c828 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3c82c 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3c830 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3c834 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3c838 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3c83c 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3c840 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3c844 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3c848 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c84c 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3c850 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3c854 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3c858 0de A5 E5 03 F1 |                             add     d, const512
3c85c 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3c860 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3c864 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3c868 0e2             |                             
3c868 0e2             |                             ' setup register values for control vector loop setup after we return
3c868 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3c86c 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3c870 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3c874 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3c878 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3c87c 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3c880 0e8 D0 C3 8F F9 |                             altd    id, #id0
3c884 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3c888 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3c88c 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3c890 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3c894 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3c898 0ee             |  
3c898 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3c89c 0ef 07 CA 07 F5 |                             and     request, #7
3c8a0 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3c8a4 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3c8a8 0f2             |                             fit     $100                    'ensure all init code fits this space
3c8a8 0f2             | 
3c8a8 0f2             |                             fit     $100                    'ensure all init code fits this space
3c8a8 0f2             | 
3c8a8 0f2 00 00 00 00 
      ...             
3c8d8 0fe 00 00 00 00 
3c8dc 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3c8e0 100             | 
3c8e0 100             | '..................................................................................................
3c8e0 100             | ' Error result handling and COG notification of request completion
3c8e0 100             | 
3c8e0 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3c8e4 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3c8e8 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3c8ec 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3c8f0 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3c8f4 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3c8f8 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3c8fc 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3c900 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3c904 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3c908 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3c90c 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3c910 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3c914 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3c918 10e             | ' Poller re-starts here after a COG is serviced
3c918 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3c91c 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3c920 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3c924 111             | ' Main dynamic polling loop repeats until a request arrives
3c924 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3c928 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3c92c 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3c930 114             | 
3c930 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3c934 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3c938 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3c93c 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3c940 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3c944 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3c948 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3c94c 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3c950 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3c954 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3c958 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3c95c 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3c960 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3c964 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3c968 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3c96c 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3c970 124             | 
3c970 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3c974 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3c978 126             |  
3c978 126             | '..................................................................................................
3c978 126             | ' List handler                               
3c978 126             | 
3c978 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3c97c 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3c980 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3c984 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3c988 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3c98c 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3c990 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3c994 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3c998 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3c99c 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3c9a0 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3c9a4 131 33 00 60 FD |                             execf   0-0                     'process the request 
3c9a8 132             | 
3c9a8 132             | '..................................................................................................
3c9a8 132             | ' Restoring per COG state and resuming where we left off
3c9a8 132             | 
3c9a8 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3c9ac 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3c9b0 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3c9b4 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3c9b8 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3c9bc 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3c9c0 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3c9c4 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3c9c8 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3c9cc 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3c9d0 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3c9d4 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3c9d8 13e             |                    
3c9d8 13e             | '..................................................................................................
3c9d8 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3c9d8 13e             | 
3c9d8 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3c9dc 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3c9e0 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3c9e4 141 D0 DF B7 F9 |                             setd    a, #id0
3c9e8 142 D8 DF BF F9 |                             sets    a, #addr1
3c9ec 143 FE FF FF FF 
3c9f0 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3c9f4 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3c9f8 146 3F DE A7 F9 |                             alti    a, #%111_111 
3c9fc 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3ca00 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3ca04 149 01 E2 63 FD |                             cogid   c
3ca08 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3ca0c 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3ca10 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3ca14 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3ca18 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3ca1c 14f 00 E0 03 F6 |                             mov     b, 0-0
3ca20 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3ca24 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3ca28 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3ca2c 153 0C 00 90 AD |             if_z            jmp     #excluded               
3ca30 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3ca34 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3ca38 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3ca3c 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3ca40 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3ca44 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3ca48 15a             | 
3ca48 15a             | 'determine priority cogs and build instructions for the polling sequence
3ca48 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3ca4c 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3ca50 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3ca54 15d             | 
3ca54 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3ca58 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3ca5c 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3ca60 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3ca64 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3ca68 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3ca6c 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3ca70 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3ca74 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3ca78 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3ca7c 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3ca80 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3ca84 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3ca88 16a             | endprioloop
3ca88 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3ca8c 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3ca90 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3ca94 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3ca98 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3ca9c 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3caa0 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3caa4 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3caa8 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3caac 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3cab0 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3cab4 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3cab8 176             | 
3cab8 176             | ' populate the round robin COG polling instructions
3cab8 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3cabc 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3cac0 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3cac4 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3cac8 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3cacc 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3cad0 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3cad4 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3cad8 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3cadc 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3cae0 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3cae4 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3cae8 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3caec 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3caf0 184             | '..................................................................................................
3caf0 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3caf0 184             | 
3caf0 184             | set_latency                                                 '            (a) set latency
3caf0 184             | get_latency                                                 '            (b) get latency
3caf0 184             | set_burst                                                   '            (c) set burst size of bank
3caf0 184             | get_burst                                                   '            (d) get burst size of bank
3caf0 184             |                                                             '            (e) dump state
3caf0 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3caf4 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3caf8 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3cafc 187             |                                                             ' | | | | e  account for following AUGS
3cafc 187 04 00 00 FF 
3cb00 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3cb04 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3cb08 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3cb0c 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3cb10 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3cb14 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3cb18 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3cb1c 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3cb20 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3cb24 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3cb28 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3cb2c 193             | 
3cb2c 193             | '..................................................................................................
3cb2c 193             | ' Misc EXECF code
3cb2c 193             | 
3cb2c 193 33 72 63 FD | start_read_exec             execf   newburstr
3cb30 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3cb34 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3cb38 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3cb3c 197             | 
3cb3c 197             | '..................................................................................................
3cb3c 197             | ' Variables
3cb3c 197             | 
3cb3c 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3cb40 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3cb44 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3cb48 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3cb4c 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3cb50 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3cb54 19d             | 
3cb54 19d 00 00 00 80 | xfreq1          long    $80000000
3cb58 19e 00 00 00 40 | xfreq2          long    $40000000
3cb5c 19f 03 00 00 00 | delay           long    3
3cb60 1a0             | 
3cb60 1a0             | lutcodeaddr                 
3cb60 1a0             | startupparams
3cb60 1a0             | excludedcogs                                    'careful: shared register use!
3cb60 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3cb64 1a1 00 00 00 00 | flags           long    0
3cb68 1a2             | mask                                            'careful: shared register use!
3cb68 1a2 00 00 00 00 | resetmaskA      long    0
3cb6c 1a3             | limit                                           'careful: shared register use!
3cb6c 1a3 00 00 00 00 | resetmaskB      long    0
3cb70 1a4 00 00 00 00 | datapins        long    0
3cb74 1a5             | const512                                        'careful: shared register use!
3cb74 1a5 00 00 00 00 | devicelist      long    0
3cb78 1a6 00 00 00 00 | coglist         long    0
3cb7c 1a7 00 00 00 00 | mbox            long    0 
3cb80 1a8             | 
3cb80 1a8             | clkpin                                          'shared with code patched during init
3cb80 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3cb84 1a9             | cspin                                           'shared with code patched during init
3cb84 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3cb88 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3cb8c 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3cb90 1ac 01 00 00 00 | clkdelay        long    1
3cb94 1ad 00 00 00 00 | regdatabus      long    0
3cb98 1ae             | 
3cb98 1ae 10 00 00 00 | deviceaddr      long    $10
3cb9c 1af             | rrcounter
3cb9c 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3cba0 1b0             | 
3cba0 1b0             | ' jump addresses for the per COG handlers
3cba0 1b0 20 00 00 00 | cog0_handler    long    cog0
3cba4 1b1 2C 00 00 00 | cog1_handler    long    cog1
3cba8 1b2 38 00 00 00 | cog2_handler    long    cog2
3cbac 1b3 44 00 00 00 | cog3_handler    long    cog3
3cbb0 1b4 50 00 00 00 | cog4_handler    long    cog4
3cbb4 1b5 5C 00 00 00 | cog5_handler    long    cog5
3cbb8 1b6 68 00 00 00 | cog6_handler    long    cog6
3cbbc 1b7 74 00 00 00 | cog7_handler    long    cog7
3cbc0 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3cbc4 1b9             | 
3cbc4 1b9             | ' EXECF sequences
3cbc4 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3cbc8 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3cbcc 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3cbd0 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3cbd4 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3cbd8 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3cbdc 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3cbe0 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3cbe0 1c0             | 
3cbe0 1c0             | 
3cbe0 1c0             | ' SKIPF sequences
3cbe0 1c0             | skiptable
3cbe0 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3cbe4 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3cbe8 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3cbec 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3cbf0 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3cbf4 1c5 00 00 00 00 | pattern2        long    0
3cbf8 1c6 00 00 00 00 | pattern3        long    0
3cbfc 1c7 77 02 00 00 | singlelong      long    %1001110111  
3cc00 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3cc04 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3cc08 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3cc0c 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3cc10 1cc             | 
3cc10 1cc             | ' LUT RAM address values
3cc10 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3cc14 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3cc18 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3cc1c 1cf F6 02 00 00 | noread          long    noread_lut
3cc20 1d0             | 
3cc20 1d0 00 00 00 00 | id0             long    0
3cc24 1d1 01 00 00 00 | id1             long    1
3cc28 1d2 02 00 00 00 | id2             long    2
3cc2c 1d3 03 00 00 00 | id3             long    3
3cc30 1d4 04 00 00 00 | id4             long    4
3cc34 1d5 05 00 00 00 | id5             long    5
3cc38 1d6 06 00 00 00 | id6             long    6
3cc3c 1d7 07 00 00 00 | id7             long    7
3cc40 1d8             | 
3cc40 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3cc40 1d8             | 'and COG updates and need to follow immediately after id0-id7
3cc40 1d8 00 00 00 00 | addr1           long    0
3cc44 1d9 00 00 00 00 | hubdata         long    0
3cc48 1da 00 00 00 00 | count           long    0
3cc4c 1db 00 00 00 00 | addr2           long    0
3cc50 1dc 00 00 00 00 | total           long    0
3cc54 1dd 00 00 00 00 | offset1         long    0
3cc58 1de 00 00 00 00 | offset2         long    0
3cc5c 1df 00 00 00 00 | link            long    0
3cc60 1e0             | 
3cc60 1e0             | burstwrite                                      'note shared register use during init
3cc60 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3cc64 1e1 00 00 00 00 | id              long    0
3cc68 1e2             | 
3cc68 1e2 00 00 00 00 | header          long    0
3cc6c 1e3 00 00 00 00 | trailer         long    0
3cc70 1e4 00 00 00 00 | cmdaddr         long    0
3cc74 1e5 00 00 00 00 | request         long    0
3cc78 1e6 00 00 00 00 | rrlimit         long    0
3cc7c 1e7 00 00 00 00 | pinconfig       long    0
3cc80 1e8 00 00 00 00 | clks            long    0
3cc84 1e9 00 00 00 00 | resume          long    0
3cc88 1ea 00 00 00 00 | orighubsize     long    0
3cc8c 1eb 00 00 00 00 | wrclks          long    0
3cc90 1ec             | 
3cc90 1ec 00 00 00 00 | pattern         long    0
3cc94 1ed 00 00 00 00 | hubscratch      long    0
3cc98 1ee 00 10 00 00 | val4k           long    4096
3cc9c 1ef             | 
3cc9c 1ef             | ' temporary general purpose regs
3cc9c 1ef 00 00 00 00 | a               long    0
3cca0 1f0 00 00 00 00 | b               long    0
3cca4 1f1 00 00 00 00 | c               long    0
3cca8 1f2 00 00 00 00 | d               long    0
3ccac 1f3             |                 fit     502
3ccac 1f3             | 
3ccac 1f3             |                 fit     502
3ccac 1f3             | 
3ccac 1f3             | '..................................................................................................
3ccac 1f3             | 
3ccac 1f3             |             orgh
3ccac                 | 
3ccac                 | lut_code
3ccac                 | 'HW init code up to 80 longs
3ccac                 | 
3ccac                 | '..................................................................................................
3ccac                 | ' Memory layout for LUT RAM once operational:
3ccac                 | '
3ccac                 | '  LUT RAM address      Usage
3ccac                 | '  ---------------      ----
3ccac                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3ccac                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3ccac                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3ccac                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3ccac                 | '
3ccac                 | ' Also during driver COG startup:
3ccac                 | ' $230-$24F is used for HW init setup
3ccac                 | ' $250-$26F is used as temporary vector storage 
3ccac                 | '..................................................................................................
3ccac                 | 
3ccac                 |                 org $230    
3ccac 230             | 
3ccac 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3ccac 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3ccb0 231 24 16 60 FD |                             pollxfi
3ccb4 232 FF AA 2A FF 
3ccb8 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3ccbc 234 28 00 B0 FD |                             call    #sendqspi
3ccc0 235 07 F8 07 FF 
3ccc4 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3ccc8 237 28 00 B0 FD |                             call    #sendspi
3cccc 238 F8 07 78 FF 
3ccd0 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3ccd4 23a 1C 00 B0 FD |                             call    #sendspi
3ccd8 23b 7F 78 78 FF 
3ccdc 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3cce0 23d 10 00 B0 FD |                             call    #sendspi 
3cce4 23e 2D 00 64 FD |                             ret
3cce8 23f             | 
3cce8 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3ccec 240 32 0C 64 FD |                             skipf   #%110
3ccf0 241 9C EF 03 F6 |                             mov     pb, xsendimm
3ccf4 242             | 
3ccf4 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3ccf8 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3ccfc 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3cd00 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3cd04 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3cd08 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3cd0c 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3cd10 249 50 48 63 FD |                             fltl    datapins                'float data bus
3cd14 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3cd18 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3cd1c 24c             | 
3cd1c 24c 00 00 00 00 
3cd20 24d 00 00 00 00 
3cd24 24e 00 00 00 00 
3cd28 24f 00 00 00 00 |                 long    0[$270-32-$]
3cd2c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3cd2c 250             |     
3cd2c 250             |                 fit     $270-32  ' keep room for 32 vector longs
3cd2c 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3cd2c 250             | rw_vect ' PSRAM jump vectors
3cd2c 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd30 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd34 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3cd38 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3cd3c 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3cd40 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3cd44 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3cd48 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3cd4c 258             | ro_vect ' R/O PSRAM jump vectors
3cd4c 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd50 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3cd54 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3cd58 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3cd5c 25c 00 01 00 00 |                 long    unsupported
3cd60 25d 00 01 00 00 |                 long    unsupported
3cd64 25e 00 01 00 00 |                 long    unsupported
3cd68 25f 00 01 00 00 |                 long    unsupported
3cd6c 260             | ctrl_vect ' Control jump vectors
3cd6c 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3cd70 261 00 01 00 00 |                 long    unsupported
3cd74 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3cd78 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3cd7c 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3cd80 265 00 01 00 00 |                 long    unsupported
3cd84 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3cd88 267 3E 01 00 00 |                 long    reconfig 
3cd8c 268             | no_vect ' Invalid bank jump vectors
3cd8c 268 01 01 00 00 |                 long    invalidbank
3cd90 269 01 01 00 00 |                 long    invalidbank
3cd94 26a 01 01 00 00 |                 long    invalidbank
3cd98 26b 01 01 00 00 |                 long    invalidbank
3cd9c 26c 01 01 00 00 |                 long    invalidbank
3cda0 26d 01 01 00 00 |                 long    invalidbank
3cda4 26e 01 01 00 00 |                 long    invalidbank
3cda8 26f 01 01 00 00 |                 long    invalidbank
3cdac 270             |                 fit     $270
3cdac 270             | 
3cdac 270             |                 fit     $270
3cdac 270             | '..................................................................................................
3cdac 270             | ' PSRAM READS
3cdac 270             |                                                             ' a b c d e f
3cdac 270             |                                                             ' B W L B R L  (a) byte read
3cdac 270             |                                                             ' Y O O U E O  (b) word read
3cdac 270             |                                                             ' T R N R S C  (c) long read
3cdac 270             |                                                             ' E D G S U K  (d) new burst read
3cdac 270             |                                                             '       T M E  (e) resumed sub-burst
3cdac 270             |                                                             '         E D  (f) locked sub-burst
3cdac 270             | 
3cdac 270             | 
3cdac 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3cdb0 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3cdb4 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3cdb8 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3cdbc 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3cdc0 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3cdc4 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3cdc8 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3cdcc 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3cdd0 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3cdd4 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3cdd8 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3cddc 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3cde0 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3cde4 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3cde8 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3cdec 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3cdf0 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3cdf4 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3cdf8 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3cdfc 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3ce00 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3ce04 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3ce08 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3ce0c 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3ce10 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3ce14 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3ce18 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3ce1c 28c             | 
3ce1c 28c             |                             ' fall through to read bursts
3ce1c 28c             |                         
3ce1c 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3ce1c 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3ce20 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3ce24 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3ce28 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3ce2c 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3ce30 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3ce34 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3ce38 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3ce3c 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3ce40 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3ce44 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3ce48 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3ce4c 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3ce50 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3ce54 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3ce58 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3ce5c 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3ce60 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3ce64 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3ce68 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3ce6c 2a0 E8 D1 03 F1 |                             add     clks, clks
3ce70 2a1             | readcommon
3ce70 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3ce74 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3ce78 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3ce7c 2a4             | 
3ce7c 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3ce80 2a5 69 C8 63 FD |                             rev     cmdaddr
3ce84 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3ce88 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3ce8c 2a8             | 
3ce8c 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3ce90 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3ce94 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3ce94 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3ce98 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3ce9c 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3cea0 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3cea4 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3cea4 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3cea8 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3ceac 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3ceb0 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3ceb4 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3ceb8 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3cebc 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3cebc 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3cec0 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3cec4 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3cec8 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3cecc 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3ced0 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3ced4 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3ced8 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3cedc 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3cee0 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3cee4 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3cee8 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3ceec 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3cef0 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3cef4 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3cef4 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3cef8 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3cefc 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3cf00 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3cf04 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3cf08 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3cf0c 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3cf10 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3cf14 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3cf18 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3cf1c 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3cf20 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3cf24 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3cf28 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3cf2c 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3cf30 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3cf34 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3cf38 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3cf3c 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3cf40 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3cf44 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3cf48 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3cf4c 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3cf50 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3cf54 2da 10 03 90 FD |                             jmp     #writecommon
3cf58 2db             | 
3cf58 2db             | '..................................................................................................
3cf58 2db             | ' Burst continuation testing
3cf58 2db             | 
3cf58 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3cf5c 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3cf60 2dd             | continue_read_lut          
3cf60 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3cf64 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3cf68 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3cf6c 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3cf70 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3cf74 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3cf78 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3cf7c 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3cf80 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3cf84 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3cf88 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3cf8c 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3cf90 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3cf94 2ea             | 
3cf94 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3cf98 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3cf9c 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3cfa0 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3cfa4 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3cfa8 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3cfac 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3cfb0 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3cfb4 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3cfb8 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3cfbc 2f4 2A 1C 66 0D |             _ret_           push    #poller
3cfc0 2f5             | 
3cfc0 2f5             | 
3cfc0 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3cfc4 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3cfc4 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3cfc8 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3cfcc 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3cfd0 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3cfd4 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3cfd8 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3cfdc 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3cfe0 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3cfe4 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3cfe8 2ff             | '..................................................................................................
3cfe8 2ff             | ' Completion of requests
3cfe8 2ff             | 
3cfe8 2ff             | complete_rw_lut             
3cfe8 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3cfec 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3cff0 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3cff4 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3cff8 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3cffc 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3d000 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3d004 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3d008 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3d00c 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3d010 309 32 62 64 AD |             if_z            skipf   #%110001
3d014 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3d018 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3d01c 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3d020 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3d024 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3d028 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3d02c 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3d030 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3d034 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3d038 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3d03c 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3d040 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3d044 316             |                                                             ' skipcase (a) gfx copy to/from hub
3d044 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3d044 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3d044 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3d048 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3d04c 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3d050 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3d054 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3d058 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3d05c 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3d060 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3d064 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3d068 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3d06c 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3d070 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3d074 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3d078 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3d07c 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3d080 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3d084 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3d088 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3d08c 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3d090 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3d094 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3d098 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3d09c 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3d0a0 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3d0a4 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3d0a8 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3d0ac 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3d0b0 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3d0b4 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3d0b8 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3d0bc 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3d0c0 335 DF B7 03 A6 |             if_z            mov     addr2, link
3d0c4 336 34 FF 9F AD |             if_z            jmp     #checknext
3d0c8 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3d0cc 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3d0d0 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3d0d4 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3d0d8 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3d0dc 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3d0e0 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3d0e4 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3d0e8 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3d0ec 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3d0f0 341             | 
3d0f0 341             | '..................................................................................................
3d0f0 341             | ' PSRAM WRITES
3d0f0 341             |                                                             '  a b c d e f g h
3d0f0 341             | 
3d0f0 341             |                                                             '  B W L F B R L L (a) byte write(s)
3d0f0 341             |                                                             '  Y O O I U E O O (b) word write(s)
3d0f0 341             |                                                             '  T R N L R S C C (c) long write(s)
3d0f0 341             |                                                             '  E D G L S U K K (d) resumed fill
3d0f0 341             |                                                             '          T M E E (e) new burst write
3d0f0 341             |                                                             '            E D D (f) resumed burst
3d0f0 341             |                                                             '              F B (g) locked fill
3d0f0 341             |                                                             '              I U (h) locked burst write
3d0f0 341             |                                                             '              L R 
3d0f0 341             |                                                             '              L S 
3d0f0 341             |                                                             '                T 
3d0f0 341             | 
3d0f0 341             | w_single                   
3d0f0 341             | w_fill_cont           
3d0f0 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3d0f4 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3d0f8 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3d0fc 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3d100 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3d104 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3d108 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3d10c 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3d110 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3d114 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3d118 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3d11c 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3d120 34d             |                ' disable call to r_resume_burst for single longs when z=0
3d120 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3d124 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3d128 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3d12c 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3d130 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3d134 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3d138 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3d13c 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3d140 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3d144 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3d148 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3d14c 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3d150 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3d154 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3d158 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3d15c 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3d160 35d             |         
3d160 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3d160 35d             |             '
3d160 35d             |             '  At least one of these 3 optional components will be sent
3d160 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3d160 35d             |             '     body - N x full longs of data
3d160 35d             |             '     trailer - last partial long of data
3d160 35d             |             '
3d160 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3d160 35d             |             '
3d160 35d             |             'Case    Type                           Sends
3d160 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3d160 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3d160 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3d160 35d             |             ' 4)     Multiple long fill             body only
3d160 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3d160 35d             | 
3d160 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3d160 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d164 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d168 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d16c 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d170 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3d174 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3d178 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3d17c 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3d180 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3d184 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3d188 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3d18c 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3d190 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3d194 36a             |                             
3d194 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3d198 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3d19c 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3d1a0 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3d1a4 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3d1a8 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3d1ac 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3d1b0 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3d1b4 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3d1b8 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3d1bc 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3d1c0 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3d1c4 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3d1c8 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3d1cc 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3d1d0 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3d1d4 37a             | 
3d1d4 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3d1d8 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3d1dc 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3d1e0 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3d1e4 37e             |                  
3d1e4 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3d1e8 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3d1ec 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3d1f0 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3d1f4 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3d1f8 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3d1fc 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3d200 385             | 
3d200 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3d204 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3d208 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3d20c 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3d210 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3d214 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3d218 38b             | 
3d218 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3d218 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3d21c 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3d220 38d 2A B0 63 FD |                             push    addr1                   'save address
3d224 38e             | 
3d224 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3d224 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3d228 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3d22c 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3d230 391             |             
3d230 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3d234 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3d238 393 2B B0 63 FD |                             pop     addr1                   'restore address
3d23c 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3d240 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3d244 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3d248 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3d24c 398             | 
3d24c 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3d250 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3d254 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3d258 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3d25c 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3d260 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3d264 39e             | 
3d264 39e             |                             'trailer is done
3d264 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3d268 39f             | 
3d268 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3d26c 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d270 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3d274 3a2             | 
3d274 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d278 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3d27c 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d280 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3d284 3a6             |                             
3d284 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d288 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d28c 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3d290 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3d294 3aa             |                                                          
3d294 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3d298 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3d29c 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3d2a0 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3d2a4 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3d2a8 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3d2ac 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3d2b0 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3d2b4 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3d2b8 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3d2bc 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3d2c0 3b5             |  
3d2c0 3b5 59 52 63 FD |                             drvh    cspin
3d2c4 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3d2c8 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3d2cc 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3d2d0 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3d2d4 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3d2d8 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3d2dc 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3d2e0 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3d2e4 3be EA E5 03 F6 |                             mov     d, orighubsize
3d2e8 3bf EF E5 63 F0 |                             shl     d, a
3d2ec 3c0 F2 E3 83 F1 |                             sub     c, d
3d2f0 3c1 DD E3 03 F1 |                             add     c, offset1
3d2f4 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3d2f8 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3d2fc 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3d300 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3d304 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3d308 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3d30c 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3d310 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3d314 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3d318 3cb BB D3 03 F6 |                             mov     resume, restorefill
3d31c 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3d320 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3d324 3ce 6C FC BF CD |             if_c            call    #yield
3d328 3cf 2D 00 64 FD |                             ret
3d32c 3d0             |                            
3d32c 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3d32c 3d0             |                       '     rczl    pa                      'rotate left into address offset
3d32c 3d0             |                       '     rczl    c wcz                   'restore count and flags
3d32c 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3d330 3d1 02 EC 67 F0 |                             shl     pa, #2
3d334 3d2 28 06 64 AD |             if_z            setq    #3
3d338 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3d33c 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3d340 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3d344 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3d348 3d7             | 
3d348 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3d34c 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3d350 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3d354 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3d358 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3d35c 3dc             |                 fit 1024-32
3d35c 3dc             |         
3d35c 3dc             | 
3d35c 3dc             | '..................................................................................................
3d35c 3dc             | 
3d35c 3dc             |                 fit 1024-32
3d35c 3dc 00 00 00 00 
3d360 3dd 00 00 00 00 
3d364 3de 00 00 00 00 
3d368 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3d36c 3e0             |                 org 1024-32
3d36c 000             | 
3d36c 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3d36c 000 00 00 00 00 |                 long $0000
3d370 001 11 11 00 00 |                 long $1111
3d374 002 22 22 00 00 |                 long $2222
3d378 003 33 33 00 00 |                 long $3333
3d37c 004 44 44 00 00 |                 long $4444
3d380 005 55 55 00 00 |                 long $5555
3d384 006 66 66 00 00 |                 long $6666
3d388 007 77 77 00 00 |                 long $7777
3d38c 008 88 88 00 00 |                 long $8888
3d390 009 99 99 00 00 |                 long $9999
3d394 00a AA AA 00 00 |                 long $aaaa
3d398 00b BB BB 00 00 |                 long $bbbb
3d39c 00c CC CC 00 00 |                 long $cccc
3d3a0 00d DD DD 00 00 |                 long $dddd
3d3a4 00e EE EE 00 00 |                 long $eeee
3d3a8 00f FF FF 00 00 |                 long $ffff
3d3ac 010             | 
3d3ac 010             | 'masks
3d3ac 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3d3b0 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3d3b4 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3d3b8 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3d3bc 014             | 
3d3bc 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3d3c0 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3d3c4 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3d3c8 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3d3cc 018             | 
3d3cc 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3d3d0 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3d3d4 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3d3d8 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3d3dc 01c             | 
3d3dc 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3d3e0 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3d3e4 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3d3e8 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3d3ec 020             |         fit 1024
3d3ec 020             | 
3d3ec 020             |         fit 1024
3d3ec 020             | 
3d3ec 020             | '--------------------------------------------------------------------------------------------------
3d3ec 020             |         orgh
3d3ec                 | 
3d3ec                 | gfxexpansion
3d3ec                 |                             'simple line drawing graphics expansion of memory driver
3d3ec                 |                             'jmp     #donerepeats                'just return for now
3d3ec                 | 
3d3ec     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3d3f0     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3d3f4     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3d3f8     DD E1 03 F6 |                             mov     b, offset1              'get error term
3d3fc     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3d400     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3d404     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3d408     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3d40c     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3d410     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3d414     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3d418     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3d41c     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3d420     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3d424     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3d428     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3d42c     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3d430     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3d434     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3d438     DC E5 33 F9 |                             getword d, total, #0            'get line width
3d43c     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3d440     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3d444     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3d448     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3d44c     C3 03 80 FD |                             jmp     #readmask               'continue filling
3d450                 | 	alignl
3d450                 | _usbnew_spin2_dat_
3d450                 |                 org     $000
3d450 000             | 
3d450 000             | usb_host_start
3d450 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3d454 001             | 
3d454 001 03 00 00 FF 
3d458 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3d45c 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3d460 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3d464 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d468 006 29 70 63 FD |                 setq2   htmp
3d46c 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3d470 008             | 
3d470 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3d474 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3d478 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3d47c 00b             | 
3d47c 00b             | '------------------------------------------------------------------------------
3d47c 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3d47c 00b             | ' special because the receiving function must not respond with either STALL or
3d47c 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3d47c 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3d47c 00b             | ' corrupt packet, it must ignore the transaction
3d47c 00b             | '------------------------------------------------------------------------------
3d47c 00b             | ' On entry:
3d47c 00b             | '   PTRA - start address of the SETUP data struct.
3d47c 00b             | ' On exit:
3d47c 00b             | '   retval - PID_ACK on success, otherwise error code.
3d47c 00b             | '------------------------------------------------------------------------------
3d47c 00b             | txn_setup
3d47c 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3d480 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3d484 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3d488 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3d48c 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3d490 010             | .setup
3d490 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3d494 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d498 012 2D 00 64 AD |         if_z    ret
3d49c 013 7C 0B B0 FD |                 call    #retry_wait
3d4a0 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3d4a4 015 2D 00 64 AD |         if_z    ret
3d4a8 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3d4ac 017 E0 FF 9F FD |                 jmp     #.setup
3d4b0 018             | 
3d4b0 018             | '------------------------------------------------------------------------------
3d4b0 018             | ' IN/INTERRUPT transaction.
3d4b0 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3d4b0 018             | '------------------------------------------------------------------------------
3d4b0 018             | ' On entry:
3d4b0 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3d4b0 018             | '     CRC(b19..23).
3d4b0 018             | ' On exit:
3d4b0 018             | '------------------------------------------------------------------------------
3d4b0 018             | txn_in
3d4b0 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3d4b4 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3d4b8 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3d4bc 01b             | 
3d4bc 01b             |                 ' Fall through to urx_packet
3d4bc 01b             | 
3d4bc 01b             | '------------------------------------------------------------------------------
3d4bc 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3d4bc 01b             | ' received are handshakes and IN DATAx.
3d4bc 01b             | '------------------------------------------------------------------------------
3d4bc 01b             | ' On entry:
3d4bc 01b             | ' On exit:
3d4bc 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3d4bc 01b             | '     returned.
3d4bc 01b             | '------------------------------------------------------------------------------
3d4bc 01b             | urx_packet
3d4bc 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3d4c0 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d4c4 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3d4c8 01e 1A 92 63 FD |                 getct   hct2
3d4cc 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3d4d0 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3d4d4 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3d4d8 022             | .wait_sop
3d4d8 022 22 A7 8A FA |                 rdpin   urx, dm
3d4dc 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d4e0 024 08 00 90 CD |         if_c    jmp     #.get_pid
3d4e4 025 FC 25 CC FB |                 jnct2   #.wait_sop
3d4e8 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3d4ec 027             | .get_pid
3d4ec 027 28 02 B0 FD |                 call    #urx_next
3d4f0 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3d4f4 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3d4f8 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3d4fc 02b             | .chk_pid
3d4fc 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d500 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3d504 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3d508 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3d50c 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3d510 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3d514 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3d518 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3d51c 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3d520 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3d524 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3d528 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3d52c 037             | .ack_resend
3d52c 037 22 A7 82 FA |                 rqpin   urx, dm
3d530 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d534 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3d538 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d53c 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3d540 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3d544 03d             | .chk_eop
3d544 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d548 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3d54c 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3d550 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3d554 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3d558 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d55c 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3d560 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3d564 045 2D 00 64 FD |                 ret
3d568 046             | .idle
3d568 046 22 A7 82 FA |                 rqpin   urx, dm
3d56c 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d570 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3d574 049 2D 00 64 FD |                 ret
3d578 04a             | 
3d578 04a             | '------------------------------------------------------------------------------
3d578 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3d578 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3d578 04a             | ' if one is required.
3d578 04a             | '------------------------------------------------------------------------------
3d578 04a             | ' On entry:
3d578 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3d578 04a             | ' On exit:
3d578 04a             | '------------------------------------------------------------------------------
3d578 04a             | utx_token
3d578 04a 22 A7 82 FA |                 rqpin   urx, dm
3d57c 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d580 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3d584 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d588 04e 34 0D B0 CD |         if_c    call    #utx_pre
3d58c 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d590 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3d594 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3d598 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3d59c 053             | .next_byte
3d59c 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3d5a0 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3d5a4 055             | .wait
3d5a4 055 40 46 72 FD |                 testp   dp                      wc
3d5a8 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d5ac 057 23 03 08 FC |                 akpin   dp
3d5b0 058 22 A5 22 FC |                 wypin   utx, dm
3d5b4 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3d5b8 05a             | 
3d5b8 05a             | '------------------------------------------------------------------------------
3d5b8 05a             | ' SETUP/OUT/INTERRUPT transaction.
3d5b8 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3d5b8 05a             | '------------------------------------------------------------------------------
3d5b8 05a             | ' On entry:
3d5b8 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3d5b8 05a             | '     CRC(b19..23).
3d5b8 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3d5b8 05a             | '   pkt_data - count of DATAx payload bytes to send.
3d5b8 05a             | ' On exit:
3d5b8 05a             | '------------------------------------------------------------------------------
3d5b8 05a             | txn_out
3d5b8 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3d5bc 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3d5c0 05c 00 00 C0 FF 
3d5c4 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3d5c8 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3d5cc 05f             | 
3d5cc 05f             |                 ' Fall through to utx_data
3d5cc 05f             | 
3d5cc 05f             | '------------------------------------------------------------------------------
3d5cc 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3d5cc 05f             | ' calculated while the data byte is being shifted out. Since data stage
3d5cc 05f             | ' success/fail is not determined until the status stage of the transaction,
3d5cc 05f             | ' this routine is only concerned about the current DATAx packet.
3d5cc 05f             | '------------------------------------------------------------------------------
3d5cc 05f             | ' On entry:
3d5cc 05f             | '   PTRA - hub start address of the data to read.
3d5cc 05f             | '   pkt_cnt - data payload size.
3d5cc 05f             | ' On exit:
3d5cc 05f             | '------------------------------------------------------------------------------
3d5cc 05f             | utx_data
3d5cc 05f 22 A7 82 FA |                 rqpin   urx, dm
3d5d0 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d5d4 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3d5d8 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d5dc 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3d5e0 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d5e4 065 D8 0C B0 CD |         if_c    call    #utx_pre
3d5e8 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d5ec 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3d5f0 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d5f4 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3d5f8 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3d5fc 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3d600 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3d604 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3d608 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3d60c 06f             | .read_byte
3d60c 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3d610 070 F0 00 B0 FD |                 call    #utx_byte
3d614 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3d618 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3d61c 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d620 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d624 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3d628 076             | .send_crc
3d628 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3d62c 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3d630 078 D0 00 B0 FD |                 call    #utx_byte
3d634 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3d638 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3d63c 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3d640 07c             | 
3d640 07c             | '------------------------------------------------------------------------------
3d640 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3d640 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3d640 07c             | ' expects that the packet includes at least the CRC word.
3d640 07c             | '
3d640 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3d640 07c             | ' was requested, which makes it difficult to determine where the data stops
3d640 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3d640 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3d640 07c             | ' USB-16 expected residual value of 0xB001.
3d640 07c             | '
3d640 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3d640 07c             | ' so the caller can verify IN success before writing the data to its final
3d640 07c             | ' destination.
3d640 07c             | '------------------------------------------------------------------------------
3d640 07c             | ' On entry:
3d640 07c             | '   pkt_data - max byte count expected to be in the packet.
3d640 07c             | '   newb_flg - signals new byte ready when toggled.
3d640 07c             | ' On exit:
3d640 07c             | '   pkt_cnt - actual number of bytes read.
3d640 07c             | '------------------------------------------------------------------------------
3d640 07c             | urx_data
3d640 07c F7 75 03 F6 |                 mov     htmp2, pb
3d644 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3d648 07e 00 00 C0 FF 
3d64c 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3d650 080 BA EF 03 F6 |                 mov     pb, htmp2
3d654 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3d658 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3d65c 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3d660 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3d664 085             | .wait_byte
3d664 085             | ' In-line rx for max speed
3d664 085 22 A7 82 FA |                 rqpin   urx, dm
3d668 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d66c 087 53 A5 02 F5 |                 and     utx, urx
3d670 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d674 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d678 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3d67c 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3d680 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3d684 08d DC FF 9F FD |                 jmp     #.wait_byte
3d688 08e             | .get_byte
3d688 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3d68c 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3d690 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3d694 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3d698 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3d69c 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3d6a0 094             | .end_crc
3d6a0 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3d6a4 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3d6a8 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3d6ac 097 2D 00 64 1D |         if_a    ret
3d6b0 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3d6b0 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3d6b0 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3d6b0 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3d6b0 098 22 A7 82 FA |                 rqpin   urx, dm
3d6b4 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3d6b8 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3d6bc 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3d6bc 09b             | .chk_crc
3d6bc 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3d6c0 09c 58 00 00 FF 
3d6c4 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3d6c8 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3d6cc 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3d6d0 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3d6d4 0a1 34 09 B0 FD |                 call    #poll_waitx
3d6d8 0a2             | 
3d6d8 0a2             |                 ' Fall through to utx_handshake
3d6d8 0a2             | 
3d6d8 0a2             | '------------------------------------------------------------------------------
3d6d8 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3d6d8 0a2             | ' the appropriate IP delay has been inserted.
3d6d8 0a2             | '------------------------------------------------------------------------------
3d6d8 0a2             | ' On entry:
3d6d8 0a2             | '   retval - handshake PID to send.
3d6d8 0a2             | ' On exit:
3d6d8 0a2             | '   retval unchanged.
3d6d8 0a2             | '------------------------------------------------------------------------------
3d6d8 0a2             | utx_handshake
3d6d8 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3d6dc 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3d6e0 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3d6e4 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3d6e8 0a6 5F A5 02 F6 |                 mov     utx, retval
3d6ec 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3d6f0 0a8             | .idle
3d6f0 0a8 22 A7 82 FA |                 rqpin   urx, dm
3d6f4 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3d6f8 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3d6fc 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3d700 0ac 08 09 90 FD |                 jmp     #poll_waitx
3d704 0ad             | 
3d704 0ad             | '------------------------------------------------------------------------------
3d704 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3d704 0ad             | '------------------------------------------------------------------------------
3d704 0ad             | ' On entry:
3d704 0ad             | '   utx - byte to transmit.
3d704 0ad             | ' On exit:
3d704 0ad             | '------------------------------------------------------------------------------
3d704 0ad             | utx_byte
3d704 0ad 40 46 72 FD |                 testp   dp                      wc
3d708 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3d70c 0af 23 03 08 FC |                 akpin   dp
3d710 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3d714 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3d718 0b2             | 
3d718 0b2             | '------------------------------------------------------------------------------
3d718 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3d718 0b2             | '------------------------------------------------------------------------------
3d718 0b2             | ' On entry:
3d718 0b2             | ' On exit:
3d718 0b2             | '   retval - the byte read.
3d718 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3d718 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3d718 0b2             | '     received.
3d718 0b2             | '------------------------------------------------------------------------------
3d718 0b2             | urx_next
3d718 0b2 22 A7 8A FA |                 rdpin   urx, dm
3d71c 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3d720 0b4 53 A5 02 F5 |                 and     utx, urx
3d724 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3d728 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3d72c 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3d730 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3d734 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3d738 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3d73c 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3d740 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3d744 0bd 2D 00 64 FD |                 ret
3d748 0be             | 
3d748 0be             | '------------------------------------------------------------------------------
3d748 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3d748 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3d748 0be             | ' length, and the PID is not included in the CRC calculation:
3d748 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3d748 0be             | '  CRC5  ENDP ADDRESS PID
3d748 0be             | ' %00000_1111_1111111_xxxxxxxx
3d748 0be             | '------------------------------------------------------------------------------
3d748 0be             | ' On entry:
3d748 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3d748 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3d748 0be             | ' On exit:
3d748 0be             | '   ep_addr_pid - CRC value appended to the packet.
3d748 0be             | '------------------------------------------------------------------------------
3d748 0be             | calc_crc5
3d748 0be FF 03 00 FF 
3d74c 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3d750 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3d754 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3d758 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3d75c 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3d760 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3d764 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3d768 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3d76c 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3d770 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3d774 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3d778 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d77c 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3d780 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3d784 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3d788 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3d78c 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3d790 0d0             | 
3d790 0d0             | '------------------------------------------------------------------------------
3d790 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3d790 0d0             | '------------------------------------------------------------------------------
3d790 0d0             | isr1_fsframe
3d790 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3d794 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d798 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d79c 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3d7a0 0d4             | .wait
3d7a0 0d4 40 46 72 FD |                 testp   dp                      wc
3d7a4 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d7a8 0d6 23 03 08 FC |                 akpin   dp
3d7ac 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3d7b0 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3d7b4 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3d7b8 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3d7bc 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3d7c0 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3d7c4 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3d7c8 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3d7cc 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3d7d0 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3d7d4 0e1 2C FF BF FD |                 call    #utx_byte
3d7d8 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3d7dc 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3d7e0 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3d7e4 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3d7e8 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3d7ec 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3d7f0 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3d7f4 0e9 5B A5 42 F5 |                 or      utx, icrc
3d7f8 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3d7fc 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3d800 0ec 20 00 90 FD |                 jmp     #isr1_wait
3d804 0ed             | isr1_lsframe
3d804 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3d808 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d80c 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d810 0f0             | .wait
3d810 0f0 40 46 72 FD |                 testp   dp                      wc
3d814 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3d818 0f2 23 03 08 FC |                 akpin   dp
3d81c 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3d820 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3d824 0f5             | isr1_wait
3d824 0f5 22 A5 82 FA |                 rqpin   utx, dm
3d828 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3d82c 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3d830 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3d834 0f9 03 00 00 FF 
3d838 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3d83c 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3d840 0fc F5 FF 3B FB |                 reti1
3d844 0fd             | 
3d844 0fd             | '------------------------------------------------------------------------------
3d844 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3d844 0fd             | ' transaction will complete before the next frame is triggered.
3d844 0fd             | '------------------------------------------------------------------------------
3d844 0fd             | ' On entry:
3d844 0fd             | ' On exit:
3d844 0fd             | '------------------------------------------------------------------------------
3d844 0fd             | wait_txn_ok
3d844 0fd 1A 74 63 FD |                 getct   htmp2
3d848 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3d84c 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d850 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3d854 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3d858 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3d85c 103 2D 00 64 FD |                 ret
3d860 104             | 
3d860 104             | '------------------------------------------------------------------------------
3d860 104             | ' A device connection was detected, or a bus reset was requested by the USB
3d860 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3d860 104             | ' and perform a reset sequence prior to device enumeration.
3d860 104             | '------------------------------------------------------------------------------
3d860 104             | dev_reset
3d860 104 22 A7 82 FA |                 rqpin   urx, dm
3d864 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3d868 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3d86c 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3d870 108             | reset
3d870 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3d874 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3d878 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3d87c 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3d880 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3d884 10d 1A 92 62 FD |                 getct   iframe_ct_base
3d888 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3d88c 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3d890 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3d894 111 24 70 07 F1 |                 add     htmp, #36
3d898 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3d89c 113             | .framewait
3d89c 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3d8a0 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3d8a4 115 2D 00 64 FD |                 ret
3d8a8 116             | 
3d8a8 116             | '------------------------------------------------------------------------------
3d8a8 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3d8a8 116             | '------------------------------------------------------------------------------
3d8a8 116             | ' On entry:
3d8a8 116             | '   PTRA - source address.
3d8a8 116             | '   PB - destination address.
3d8a8 116             | '   hr0 - length of copy, in bytes.
3d8a8 116             | ' On exit:
3d8a8 116             | '------------------------------------------------------------------------------
3d8a8 116             | hmemcpy
3d8a8 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3d8ac 117 F7 71 43 FC |                 wrbyte  htmp, pb
3d8b0 118 01 EE 07 F1 |                 add     pb, #1
3d8b4 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3d8b8 11a             | 
3d8b8 11a             | '------------------------------------------------------------------------------
3d8b8 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3d8b8 11a             | ' loop until the errant device is disconnected.
3d8b8 11a             | '------------------------------------------------------------------------------
3d8b8 11a             | ' On entry:
3d8b8 11a             | ' On exit:
3d8b8 11a             | '------------------------------------------------------------------------------
3d8b8 11a             | host_error
3d8b8 11a             |           if ERROR_LED >= 0
3d8b8 11a             |           end
3d8b8 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3d8bc 11b             | 
3d8bc 11b             | '------------------------------------------------------------------------------
3d8bc 11b             | ' Get HID descriptor buffer for current port
3d8bc 11b             | '------------------------------------------------------------------------------
3d8bc 11b             | ' On entry:
3d8bc 11b             | ' On exit:
3d8bc 11b             | '   PB - HID descriptor buffer pointer
3d8bc 11b             | '------------------------------------------------------------------------------
3d8bc 11b             | get_hid_descr_buffer
3d8bc 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3d8c0 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3d8c4 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3d8c8 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3d8cc 11f             | 
3d8cc 11f             | 
3d8cc 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3d8d0 120             | 
3d8d0 120             | ' USB commands and error codes
3d8d0 120 00 00 00 00 | cmd_data        long    0
3d8d4 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3d8d8 122             | 
3d8d8 122             | ' Parameters block assigned at cog startup
3d8d8 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3d8dc 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3d8e0 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3d8e4 125             | if ACTIVITY_LED >= 0
3d8e4 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3d8e4 125             | end
3d8e4 125             | if ERROR_LED >= 0
3d8e4 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3d8e4 125             | end
3d8e4 125 00 00 00 00 | hid_descr_p     long    0
3d8e8 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3d8e8 126             | 'hkbd_report_p   long    0
3d8e8 126 00 00 00 00 | hub_descr_p     long    0
3d8ec 127 00 00 00 00 | urx_buff_p      long    0
3d8f0 128 00 00 00 00 | dev_desc_buff_p long    0
3d8f4 129 00 00 00 00 | con_desc_buff_p long    0
3d8f8 12a 00 00 00 00 | cache_start_p   long    0
3d8fc 12b 00 00 00 00 | cache_end_p     long    0
3d900 12c             | if EMUPAD_MAX_PLAYER > 0
3d900 12c             | emupad_out_ptr  long    0
3d900 12c             | end
3d900 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3d904 12d             | 
3d904 12d             | hdev_init_start
3d904 12d             | hdev_port       res     1
3d904 12d             | hdev_port       res     1
3d904 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d904 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3d904 12d             | kbm_next_datax  res     1
3d904 12d             | kbm_next_datax  res     1
3d904 12d             | hub_intf_num    res     1
3d904 12d             | hub_intf_num    res     1
3d904 12d             | hub_next_datax  res     1
3d904 12d             | hub_next_datax  res     1
3d904 12d             | hub_status_chg  res     1
3d904 12d             | hub_status_chg  res     1
3d904 12d             | hub_port_status res     1
3d904 12d             | hub_port_status res     1
3d904 12d             | if HAVE_MOUSE
3d904 12d             | ms_intf_num     res     1
3d904 12d             | ms_intf_num     res     1
3d904 12d             | ms_in_max_pkt   res     1
3d904 12d             | ms_in_max_pkt   res     1
3d904 12d             | end
3d904 12d             | kb_intf_num     res     1
3d904 12d             | kb_intf_num     res     1
3d904 12d             | kb_interval     res     1
3d904 12d             | kb_interval     res     1
3d904 12d             | kb_in_max_pkt   res     1
3d904 12d             | kb_in_max_pkt   res     1
3d904 12d             | kb_max_index    res     1
3d904 12d             | kb_max_index    res     1
3d904 12d             | kb_led_states   res     1
3d904 12d             | kb_led_states   res     1
3d904 12d             | gp_intf_num     res     1
3d904 12d             | gp_intf_num     res     1
3d904 12d             | gp_interval     res     1
3d904 12d             | gp_interval     res     1
3d904 12d             | gp_max_index    res     1
3d904 12d             | gp_max_index    res     1
3d904 12d             | gp_descr_len    res     1+MAX_DEVICES
3d904 12d             | gp_descr_len    res     1+MAX_DEVICES
3d904 12d             | hdev_init_end
3d904 12d             | 
3d904 12d             | ' Initialized at cog startup:
3d904 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d904 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3d904 12d             | iframe_ct_new   res     1
3d904 12d             | iframe_ct_new   res     1
3d904 12d             | iframe_ct_base  res     1
3d904 12d             | iframe_ct_base  res     1
3d904 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d904 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3d904 12d             | 
3d904 12d             | ' This register block is reset to zero when a USB device connects
3d904 12d             | hreg_init_start
3d904 12d             | hstatus         res     1         ' Host status flags
3d904 12d             | hstatus         res     1         ' Host status flags
3d904 12d             | hctwait         res     1         ' Poll-based wait clocks
3d904 12d             | hctwait         res     1         ' Poll-based wait clocks
3d904 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d904 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3d904 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d904 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3d904 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d904 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3d904 12d             | xfer_retry      res     1         ' Control transfer retry count
3d904 12d             | xfer_retry      res     1         ' Control transfer retry count
3d904 12d             | retry           res     1         ' Transaction retry count
3d904 12d             | retry           res     1         ' Transaction retry count
3d904 12d             | utx             res     1         ' Byte to transmit on USB
3d904 12d             | utx             res     1         ' Byte to transmit on USB
3d904 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d904 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3d904 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d904 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3d904 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d904 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3d904 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d904 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3d904 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d904 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3d904 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d904 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3d904 12d             | frame           res     1         ' USB 1ms frame counter value
3d904 12d             | frame           res     1         ' USB 1ms frame counter value
3d904 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d904 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3d904 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d904 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3d904 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d904 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3d904 12d             | crc             res     1         ' Used for CRC16 calculation
3d904 12d             | crc             res     1         ' Used for CRC16 calculation
3d904 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d904 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3d904 12d             | retval          res     1         ' Global success/fail return parameter
3d904 12d             | retval          res     1         ' Global success/fail return parameter
3d904 12d             | context_retval  res     1         ' Operation contextual return parameter
3d904 12d             | context_retval  res     1         ' Operation contextual return parameter
3d904 12d             | ' Device stuff
3d904 12d             | hdev_id         res     1+MAX_DEVICES
3d904 12d             | hdev_id         res     1+MAX_DEVICES
3d904 12d             | hdev_bcd        res     1
3d904 12d             | hdev_bcd        res     1
3d904 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d904 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3d904 12d             | ' Keyboard/mouse stuff
3d904 12d             | hctrl_ep_addr   res     1
3d904 12d             | hctrl_ep_addr   res     1
3d904 12d             | hctrl_max_pkt   res     1
3d904 12d             | hctrl_max_pkt   res     1
3d904 12d             | hconfig_base    res     1
3d904 12d             | hconfig_base    res     1
3d904 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d904 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3d904 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d904 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3d904 12d             | hdev_class      res     1
3d904 12d             | hdev_class      res     1
3d904 12d             | hdev_subclass   res     1
3d904 12d             | hdev_subclass   res     1
3d904 12d             | hdev_protocol   res     1
3d904 12d             | hdev_protocol   res     1
3d904 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d904 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3d904 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d904 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3d904 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d904 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3d904 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d904 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3d904 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d904 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3d904 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d904 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3d904 12d             | if HAVE_MOUSE
3d904 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d904 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3d904 12d             | end
3d904 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d904 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3d904 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d904 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3d904 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d904 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3d904 12d             | hdev_out_addr   res     1
3d904 12d             | hdev_out_addr   res     1
3d904 12d             | 
3d904 12d             | if EMUPAD_MAX_PLAYER > 0
3d904 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3d904 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3d904 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3d904 12d             | end
3d904 12d             | 
3d904 12d             | hreg_init_end
3d904 12d             | 
3d904 12d             | hidr_start
3d904 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d904 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3d904 12d             | hidr_flags      res     1
3d904 12d             | hidr_flags      res     1
3d904 12d             | hidr_axis       res     3
3d904 12d             | hidr_axis       res     3
3d904 12d             | hidr_buttons    res     1
3d904 12d             | hidr_buttons    res     1
3d904 12d             | hidr_hats       res     1
3d904 12d             | hidr_hats       res     1
3d904 12d             | '' Above are actually useful values, 6 longs
3d904 12d             | hidr_id         res     1
3d904 12d             | hidr_id         res     1
3d904 12d             | hidr_state      res     1
3d904 12d             | hidr_state      res     1
3d904 12d             | hidr_size       res     1
3d904 12d             | hidr_size       res     1
3d904 12d             | hidr_count      res     1
3d904 12d             | hidr_count      res     1
3d904 12d             | hidr_offset     res     1
3d904 12d             | hidr_offset     res     1
3d904 12d             | hidr_usage_idx  res     1
3d904 12d             | hidr_usage_idx  res     1
3d904 12d             | hidr_lminmax    res     1
3d904 12d             | hidr_lminmax    res     1
3d904 12d             | hidr_pminmax    res     1
3d904 12d             | hidr_pminmax    res     1
3d904 12d             | hidr_type       res     1
3d904 12d             | hidr_type       res     1
3d904 12d             | hidr_end
3d904 12d             | 
3d904 12d             | ' Variables dependent on the system freqency
3d904 12d             | _var_64_lower_  res     1
3d904 12d             | _var_64_lower_  res     1
3d904 12d             | _var_64_upper_  res     1
3d904 12d             | _var_64_upper_  res     1
3d904 12d             | _12Mbps_        res     1
3d904 12d             | _12Mbps_        res     1
3d904 12d             | _1_5Mbps_       res     1
3d904 12d             | _1_5Mbps_       res     1
3d904 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d904 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3d904 12d             | _1us_           res     1         ' 1us
3d904 12d             | _1us_           res     1         ' 1us
3d904 12d             | _10us_          res     1         ' 10us
3d904 12d             | _10us_          res     1         ' 10us
3d904 12d             | _33us_          res     1         ' 33us
3d904 12d             | _33us_          res     1         ' 33us
3d904 12d             | _txn_err_       res     1         ' 250us
3d904 12d             | _txn_err_       res     1         ' 250us
3d904 12d             | _500us_         res     1         ' 500us
3d904 12d             | _500us_         res     1         ' 500us
3d904 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d904 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3d904 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d904 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3d904 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d904 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3d904 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d904 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3d904 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d904 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3d904 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d904 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3d904 12d             | _preamble_wait_ res     1
3d904 12d             | _preamble_wait_ res     1
3d904 12d             | _1ms_           res     1         ' 1ms
3d904 12d             | _1ms_           res     1         ' 1ms
3d904 12d             | _2ms_           res     1         ' 2ms
3d904 12d             | _2ms_           res     1         ' 2ms
3d904 12d             | _suspend_wait_  res     1         ' 3ms
3d904 12d             | _suspend_wait_  res     1         ' 3ms
3d904 12d             | _4ms_           res     1         ' 4ms
3d904 12d             | _4ms_           res     1         ' 4ms
3d904 12d             | _xfer_wait_     res     1         ' 5ms
3d904 12d             | _xfer_wait_     res     1         ' 5ms
3d904 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d904 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3d904 12d             | _reset_hold_    res     1         ' 15ms
3d904 12d             | _reset_hold_    res     1         ' 15ms
3d904 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d904 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3d904 12d             | _21ms_          res     1         ' 21ms
3d904 12d             | _21ms_          res     1         ' 21ms
3d904 12d             | _100ms_         res     1         ' 100ms
3d904 12d             | _100ms_         res     1         ' 100ms
3d904 12d             | _500ms_         res     1         ' 500ms
3d904 12d             | _500ms_         res     1         ' 500ms
3d904 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d904 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3d904 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d904 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3d904 12d             | '------------------------------------------------------------------------------
3d904 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d904 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3d904 12d             | _usb_d_ls_nco_  res     1
3d904 12d             | _usb_d_ls_nco_  res     1
3d904 12d             | _usb_h_fs_nco_  res     1
3d904 12d             | _usb_h_fs_nco_  res     1
3d904 12d             | _usb_d_fs_nco_  res     1
3d904 12d             | _usb_d_fs_nco_  res     1
3d904 12d             | '------------------------------------------------------------------------------
3d904 12d             | ' Scratch registers
3d904 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d904 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3d904 12d             | htmp1           res     1
3d904 12d             | htmp1           res     1
3d904 12d             | htmp2           res     1
3d904 12d             | htmp2           res     1
3d904 12d             | htmp3           res     1
3d904 12d             | htmp3           res     1
3d904 12d             | hrep            res     1         ' Repeat count
3d904 12d             | hrep            res     1         ' Repeat count
3d904 12d             | hsave0          res     1         ' Subroutine parameter saves
3d904 12d             | hsave0          res     1         ' Subroutine parameter saves
3d904 12d             | hsave1          res     1
3d904 12d             | hsave1          res     1
3d904 12d             | hsave2          res     1
3d904 12d             | hsave2          res     1
3d904 12d             | isrtmp1         res     1
3d904 12d             | isrtmp1         res     1
3d904 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d904 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3d904 12d             | hr0             res     1         ' Multi-purpose registers
3d904 12d             | hr0             res     1         ' Multi-purpose registers
3d904 12d             | hr1             res     1
3d904 12d             | hr1             res     1
3d904 12d             | hr2             res     1
3d904 12d             | hr2             res     1
3d904 12d             | hr3             res     1
3d904 12d             | hr3             res     1
3d904 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d904 12d             | hpar1           res     1         ' Routine entry/exit parameters
3d904 12d             | hpar2           res     1
3d904 12d             | hpar2           res     1
3d904 12d             | hpar3           res     1
3d904 12d             | hpar3           res     1
3d904 12d             | hct2            res     1         ' Function response bus turn-around timer
3d904 12d             | hct2            res     1         ' Function response bus turn-around timer
3d904 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d904 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3d904 12d             | mod_cnt         res     1         ' Used in idle loops
3d904 12d             | mod_cnt         res     1         ' Used in idle loops
3d904 12d             |                 fit     $1F0
3d904 12d             |                 org     $200
3d904 200             | hlut_start
3d904 200             | 
3d904 200             | '------------------------------------------------------------------------------
3d904 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3d904 200             | ' settings to startup defaults.
3d904 200             | '------------------------------------------------------------------------------
3d904 200             | ' On entry:
3d904 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3d904 200             | '------------------------------------------------------------------------------
3d904 200             | set_speed_full
3d904 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3d908 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3d90c 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3d910 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3d914 204             | '                ret                             wcz     ' Restore caller flags on exit
3d914 204             | 
3d914 204             | '------------------------------------------------------------------------------
3d914 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3d914 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3d914 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3d914 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3d914 204             | ' putting the smart pins into reset.
3d914 204             | '------------------------------------------------------------------------------
3d914 204             | ' On entry:
3d914 204             | ' On exit: CZ flags restored to caller states
3d914 204             | '------------------------------------------------------------------------------
3d914 204             | set_speed_low
3d914 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3d918 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3d91c 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3d920 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3d924 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3d928 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3d92c 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3d930 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3d934 20c             | 
3d934 20c             | '------------------------------------------------------------------------------
3d934 20c             | ' Perform configuration stuff required when a device intitially connects.
3d934 20c             | '------------------------------------------------------------------------------
3d934 20c             | ' On entry:
3d934 20c             | ' On exit:
3d934 20c             | '------------------------------------------------------------------------------
3d934 20c             | on_connect
3d934 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3d938 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3d93c 20e             | .retry
3d93c 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3d940 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3d944 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3d948 211 00 08 00 FF 
3d94c 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3d950 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3d954 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d958 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3d95c 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3d960 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3d964 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d968 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3d96c 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3d970 21b 4C 03 B0 FD |                 call    #poll_waitx
3d974 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3d978 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3d97c 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3d980 21f B8 FF 9F FD |                 jmp     #.retry
3d984 220             | .get_dev_desc
3d984 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3d988 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3d98c 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3d990 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3d994 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3d998 225 88 FB BF FD |                 call    #reset
3d99c 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3d9a0 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d9a4 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3d9a8 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3d9ac 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d9b0 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d9b4 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3d9b8 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3d9bc 22e 04 00 00 FF 
3d9c0 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3d9c4 230 34 FA BF FD |                 call    #calc_crc5
3d9c8 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3d9cc 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3d9d0 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3d9d4 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3d9d8 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3d9dc 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3d9e0 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3d9e4 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3d9e8 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3d9ec 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3d9f0 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3d9f4 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3d9f8 23d C4 02 B0 FD |                 call    #poll_waitx
3d9fc 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3da00 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3da04 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3da08 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3da0c 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3da10 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3da14 244 2D 00 64 5D |         if_nz   ret
3da18 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3da1c 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3da20 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3da24 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3da28 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3da2c 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3da30 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3da34 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3da38 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3da3c 24e 2C FB 9F CD |         if_b    jmp     #host_error
3da40 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3da44 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3da48 251 2D EC 63 FD |                 call    pa
3da4c 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3da50 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3da54 254 2C EC 63 FD |                 jmp     pa
3da58 255             | 
3da58 255             | '------------------------------------------------------------------------------
3da58 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3da58 255             | ' Status reporting is always in the function-to-host direction.
3da58 255             | '------------------------------------------------------------------------------
3da58 255             | ' On entry:
3da58 255             | '   PTRA - start address of the SETUP data in hub.
3da58 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3da58 255             | '     stage.
3da58 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3da58 255             | ' On exit:
3da58 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3da58 255             | '     contains the count of data stage bytes actually received, which must
3da58 255             | '     always be <= the count requested.
3da58 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3da58 255             | '     more specific USB operation error code.
3da58 255             | '------------------------------------------------------------------------------
3da58 255             | control_read
3da58 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3da5c 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3da60 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3da64 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3da68 259             | .xfer_start
3da68 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3da6c 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3da70 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3da74 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3da78 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3da7c 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3da80 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3da84 260 61 00 00 FF 
3da88 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3da8c 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3da90 263             | .data
3da90 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3da94 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3da98 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3da9c 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3daa0 267             | .nak_retry
3daa0 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3daa4 268             | .in_retry
3daa4 268 BC F6 BF FD |                 call    #txn_in
3daa8 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3daac 26a 28 00 90 AD |         if_z    jmp     #.commit
3dab0 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3dab4 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3dab8 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3dabc 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3dac0 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3dac4 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3dac8 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3dacc 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dad0 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3dad4 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3dad8 275             | .commit
3dad8 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3dadc 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3dae0 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3dae4 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3dae8 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3daec 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3daf0 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3daf4 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3daf8 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3dafc 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3db00 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3db04 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3db08 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3db0c 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3db10 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3db14 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3db18 285             | .pre_status
3db18 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3db1c 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3db20 287 00 B0 06 F6 |                 mov     pkt_data, #0
3db24 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3db28 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3db2c 28a 61 00 00 FF 
3db30 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3db34 28c             | .out_retry
3db34 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3db38 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3db3c 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3db40 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3db44 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3db48 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3db4c 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3db50 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3db54 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3db58 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3db5c 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3db60 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3db60 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3db60 297             | ' ControlRead() transfer gets things unstuck most of the time...
3db60 297             | .xfer_retry
3db60 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3db64 298 58 01 B0 FD |                 call    #poll_waitx
3db68 299 8C F9 BF FD |                 call    #wait_txn_ok
3db6c 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3db70 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3db74 29c C8 EF 03 F6 |                 mov     pb, hpar3
3db78 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3db7c 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3db80 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3db84 2a0             | 
3db84 2a0             | '------------------------------------------------------------------------------
3db84 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3db84 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3db84 2a0             | ' the SETUP data struct is filled with the required values.
3db84 2a0             | '------------------------------------------------------------------------------
3db84 2a0             | ' On entry:
3db84 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3db84 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3db84 2a0             | '     stage.
3db84 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3db84 2a0             | ' On exit:
3db84 2a0             | '   retval - used to convey the success/failure of each stage.
3db84 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3db84 2a0             | '     more specific USB operation error code.
3db84 2a0             | '------------------------------------------------------------------------------
3db84 2a0             | control_write
3db84 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3db88 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3db8c 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3db90 2a3             | 
3db90 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3db94 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3db98 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3db9c 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3dba0 2a7             | .xfer_start
3dba0 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3dba4 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3dba8 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3dbac 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dbb0 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3dbb4 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3dbb8 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3dbbc 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3dbc0 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3dbc4 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3dbc8 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3dbcc 2b2             | .data
3dbcc 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3dbd0 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3dbd4 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3dbd8 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3dbdc 2b6             | .out_retry
3dbdc 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3dbe0 2b7 88 F6 BF FD |                 call    #txn_out
3dbe4 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3dbe8 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3dbec 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3dbf0 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3dbf4 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3dbf8 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3dbfc 2be             | .commit
3dbfc 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3dc00 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3dc04 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3dc08 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3dc0c 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3dc10 2c3             | pre_status_in
3dc10 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3dc14 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3dc18 2c5             | .status_retry
3dc18 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3dc1c 2c6 44 F5 BF FD |                 call    #txn_in
3dc20 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3dc24 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3dc28 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3dc2c 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3dc30 2cb 2D 00 64 AD |         if_z    ret
3dc34 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3dc38 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dc3c 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3dc40 2cf             | '               ret                                     ' Caller must handle transfer retirement
3dc40 2cf             | 
3dc40 2cf             | '------------------------------------------------------------------------------
3dc40 2cf             | ' Execute an IN interrupt transaction.
3dc40 2cf             | '------------------------------------------------------------------------------
3dc40 2cf             | ' On entry:
3dc40 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3dc40 2cf             | '   hpar2 - Address of the IN data buffer
3dc40 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3dc40 2cf             | ' On exit:
3dc40 2cf             | '   retval - the result of the operation.
3dc40 2cf             | '   hpar3 - the count of IN data bytes actually received.
3dc40 2cf             | '------------------------------------------------------------------------------
3dc40 2cf             | do_int_in
3dc40 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3dc44 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3dc48 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3dc4c 2d2             | 
3dc4c 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3dc50 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3dc54 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3dc58 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3dc5c 2d6             | .retry
3dc5c 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3dc60 2d7 00 F5 BF FD |                 call    #txn_in
3dc64 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3dc68 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3dc6c 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3dc70 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3dc74 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3dc78 2dd 54 00 B0 FD |                 call    #retry_wait
3dc7c 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3dc80 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3dc84 2e0 D4 FF 9F FD |                 jmp     #.retry
3dc88 2e1             | .commit
3dc88 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3dc8c 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3dc90 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3dc94 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3dc98 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3dc9c 2e6             | .post_ret
3dc9c 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3dca0 2e7             | 
3dca0 2e7             | 
3dca0 2e7             | '------------------------------------------------------------------------------
3dca0 2e7             | ' Resets the downstream hub port to FS
3dca0 2e7             | '------------------------------------------------------------------------------
3dca0 2e7             | dwnstream_reset
3dca0 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3dca4 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3dca8 2e9             | 
3dca8 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3dcac 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3dcb0 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3dcb4 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3dcb8 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3dcbc 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3dcc0 2ef             | 
3dcc0 2ef             | '------------------------------------------------------------------------------
3dcc0 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3dcc0 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3dcc0 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3dcc0 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3dcc0 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3dcc0 2ef             | '------------------------------------------------------------------------------
3dcc0 2ef             | ' On entry:
3dcc0 2ef             | '   hctwait - wait interval in sysclocks.
3dcc0 2ef             | ' On exit:
3dcc0 2ef             | '------------------------------------------------------------------------------
3dcc0 2ef             | poll_waitx
3dcc0 2ef 1A 92 63 FD |                 getct   hct2
3dcc4 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3dcc8 2f1             | .wait
3dcc8 2f1 FF 25 CC FB |                 jnct2   #.wait
3dccc 2f2 2D 00 64 FD |                 ret
3dcd0 2f3             | 
3dcd0 2f3             | '------------------------------------------------------------------------------
3dcd0 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3dcd0 2f3             | '------------------------------------------------------------------------------
3dcd0 2f3             | ' On entry:
3dcd0 2f3             | '   retval - transaction response PID or error code.
3dcd0 2f3             | ' On exit:
3dcd0 2f3             | '------------------------------------------------------------------------------
3dcd0 2f3             | retry_wait
3dcd0 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3dcd4 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3dcd8 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3dcdc 2f6 14 00 90 AD |         if_z    jmp     #.nak
3dce0 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3dce4 2f8 D8 FF BF FD |                 call    #poll_waitx
3dce8 2f9             | .dec
3dce8 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3dcec 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3dcf0 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3dcf4 2fc             | .nak
3dcf4 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3dcf8 2fd C4 FF BF FD |                 call    #poll_waitx
3dcfc 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3dd00 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3dd04 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3dd08 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3dd0c 302 2D 00 64 FD |                 ret
3dd10 303             | 
3dd10 303             | host_reset
3dd10 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3dd14 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3dd18 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3dd18 305 BD 01 05 FF 
3dd1c 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3dd20 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3dd24 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3dd28 309             | ' Check to see if the system clock has been changed.
3dd28 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3dd2c 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3dd30 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3dd34 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3dd38 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3dd3c 30e 40 46 62 FD |                 dirl    dp
3dd40 30f             | 
3dd40 30f 28 02 64 FD |                 setq    #1
3dd44 310 80 00 80 FF 
3dd48 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3dd4c 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3dd50 313             | .enable
3dd50 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3dd54 314 41 46 62 FD |                 dirh    dp
3dd58 315 1F 36 63 FD |                 waitx   _1us_
3dd5c 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3dd60 317             | 
3dd60 317             |                 ' Handle Port protection enable and startup delay
3dd60 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3dd64 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3dd68 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3dd6c 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3dd70 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3dd74 31c             | 
3dd74 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3dd78 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3dd7c 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3dd80 31f 00 00 04 F6 |                 mov     0-0, #0
3dd84 320             | .regloop
3dd84 320             | 
3dd84 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3dd84 320             | 
3dd84 320             | discon_entry
3dd84 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3dd88 321             | 
3dd88 321             |               
3dd88 321             |         if HAVE_HIDPAD
3dd88 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3dd8c 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3dd90 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3dd94 324 F7 01 68 FC |                 wrlong  #0,pb
3dd98 325             |         end
3dd98 325             |         if EMUPAD_MAX_PLAYER > 0
3dd98 325             |         end
3dd98 325             | 
3dd98 325             |                 ' Fall through to disconnected loop
3dd98 325             | 
3dd98 325             | '-----------------------------------------------------------------------------------------------------------------
3dd98 325             | ' Device connect handling (Section 7.1.7.3).
3dd98 325             | '-----------------------------------------------------------------------------------------------------------------
3dd98 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3dd98 325             | ' device to connect (Section 7.1.7.3).
3dd98 325             | '-----------------------------------------------------------------------------------------------------------------
3dd98 325             | disconnected
3dd98 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3dd9c 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3dda0 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3dda4 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3dda8 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3ddac 32a             |         if ACTIVITY_LED >= 0
3ddac 32a             |         end
3ddac 32a 22 A7 82 FA |                 rqpin   urx, dm
3ddb0 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3ddb4 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3ddb8 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3ddbc 32e             | .se1_test
3ddbc 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3ddc0 32f FC FE BF FD |                 call    #poll_waitx
3ddc4 330 22 A7 82 FA |                 rqpin   urx, dm
3ddc8 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ddcc 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3ddd0 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3ddd4 334             | .se1            'SE1 is a fatal error condition
3ddd4 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3ddd8 335 E4 FE BF FD |                 call    #poll_waitx
3dddc 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3dde0 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3dde4 338             | .connect_test                                           ' Test lines until stable J/K state seen
3dde4 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3dde8 339 22 A7 82 FA |                 rqpin   urx, dm
3ddec 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3ddf0 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3ddf4 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3ddf8 33d             | connected
3ddf8 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3ddfc 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3de00 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3de04 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3de08 341             | .set_pulse
3de08 341 1A 64 63 FD |                 getct   _pulse_time_
3de0c 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3de10 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3de10 343             | ' of 1ms and make a correction, if necessary.
3de10 343             | '                mov     htmp, _1ms_
3de10 343             | '                subs    htmp, iframe_delta
3de10 343             | '                adds    _frame1ms_clks_, htmp
3de10 343             | '                debug(udec(_frame1ms_clks_))
3de10 343             | 
3de10 343             |                 ' Fall through to idle/processing loop
3de10 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3de14 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3de18 345             | 
3de18 345             | hidle
3de18 345 22 A7 82 FA |                 rqpin   urx, dm
3de1c 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3de20 347 98 00 90 CD |         if_c    jmp     #.se0_test
3de24 348 24 06 70 FD |                 pollct3                         wc
3de28 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3de2c 34a 1A 94 63 FD |                 getct   hct3
3de30 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3de34 34c             | 
3de34 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3de38 34d 00 70 E3 F8 |                 getbyte htmp
3de3c 34e             | 
3de3c 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3de40 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3de44 350 40 00 90 AD |         if_z    jmp     #.poll
3de48 351             | 
3de48 351             |         if _HAVE_GAMEPAD
3de48 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3de4c 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3de50 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3de54 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3de58 355 2C 00 90 AD |         if_z    jmp     #.poll
3de5c 356             |         end
3de5c 356             | 
3de5c 356             |         if HAVE_MOUSE
3de5c 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3de60 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3de64 358 20 00 90 AD |         if_z    jmp     #.poll
3de68 359             |         end
3de68 359             | 
3de68 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3de6c 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3de70 35b 14 00 90 AD |         if_z    jmp     #.poll
3de74 35c             | 
3de74 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3de78 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3de7c 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3de80 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3de84 360             |         if HAVE_MOUSE
3de84 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3de88 361             |         else
3de88 361             |         end
3de88 361             | 
3de88 361             | .poll
3de88 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3de8c 362 2D EC 63 FD |                 call    pa
3de90 363             | .skip_poll
3de90 363             | 
3de90 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3de94 364             | 
3de94 364             | .nopoll
3de94 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3de98 365 44 00 90 AD |         if_z    jmp     #hsuspend
3de9c 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3dea0 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3dea4 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3dea8 369 1A 84 63 FD |                 getct   hr0
3deac 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3deb0 36b             |         if ACTIVITY_LED >= 0
3deb0 36b             |         end
3deb0 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3deb4 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3deb8 36d 5C FF 9F FD |                 jmp     #hidle
3debc 36e             | ' Check for extended SE0 state on the bus
3debc 36e             | .se0_test
3debc 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3dec0 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3dec4 370 22 A7 82 FA |                 rqpin   urx, dm
3dec8 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3decc 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3ded0 373 24 F6 BF FD |                 call    #wait_txn_ok
3ded4 374 00 00 80 FF 
3ded8 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3dedc 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3dedc 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3dee0 377             | 
3dee0 377             | hsuspend
3dee0 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3dee4 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3dee8 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3deec 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3def0 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3def4 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3def8 37d             | 
3def8 37d             |                 ' Fall through to resume wait loop
3def8 37d             | 
3def8 37d             | hwait_resume
3def8 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3defc 37e 02 86 47 F0 |                 shr     hr1, #2
3df00 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3df04 380             |         if ACTIVITY_LED >= 0
3df04 380             |         end
3df04 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3df08 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3df0c 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3df10 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3df14 384 18 00 90 AD |         if_z    jmp     #.resume
3df18 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3df1c 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3df20 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3df24 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3df28 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3df2c 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3df30 38b             | .resume
3df30 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3df34 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3df38 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3df3c 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3df40 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3df44 390 1F 70 63 FD |                 waitx   htmp
3df48 391 22 07 28 FC |                 wypin   #OUT_J, dm
3df4c 392 01 70 47 F0 |                 shr     htmp, #1
3df50 393 1F 70 63 FD |                 waitx   htmp
3df54 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3df58 395 1A 92 62 FD |                 getct   iframe_ct_base
3df5c 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3df60 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3df64 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3df68 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3df6c 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3df70 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3df74 39c             | 
3df74 39c             | '------------------------------------------------------------------------------
3df74 39c             | ' Send preamble to enable low-speed HUB ports
3df74 39c             | '------------------------------------------------------------------------------
3df74 39c             | ' On entry:
3df74 39c             | ' On exit:
3df74 39c             | '   USB baud rate set to low-speed
3df74 39c             | '------------------------------------------------------------------------------
3df74 39c             | utx_pre
3df74 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3df78 39d 40 46 62 FD |                 dirl    dp
3df7c 39e 28 02 64 FD |                 setq    #1
3df80 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3df84 3a0 58 44 62 FD |                 drvl    dm
3df88 3a1 59 46 62 FD |                 drvh    dp
3df8c 3a2             | 
3df8c 3a2 1E 00 00 FF 
3df90 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3df94 3a4             | 
3df94 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3df98 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3df9c 3a6 28 02 64 3D |         if_nc   setq    #1
3dfa0 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3dfa4 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3dfa8 3a9             | .l1
3dfa8 3a9             | 
3dfa8 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3dfac 3aa 40 46 62 FD |                 dirl    dp
3dfb0 3ab 28 02 64 FD |                 setq    #1
3dfb4 3ac 80 00 80 FF 
3dfb8 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3dfbc 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3dfc0 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3dfc4 3b0 41 46 62 FD |                 dirh    dp
3dfc8 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3dfcc 3b2             | 
3dfcc 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3dfd0 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3dfd4 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3dfd8 3b5             | 
3dfd8 3b5             | hlut_end
3dfd8 3b5             |                 fit     $400
3dfd8 3b5             |                 orgh
3dfd8                 | if OVERLAP_MEMORY
3dfd8                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3dfd8                 | end
3dfd8                 | '------------------------------------------------------------------------------
3dfd8                 | ' Routines called from cog space.
3dfd8                 | '------------------------------------------------------------------------------
3dfd8                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3dfd8                 | '------------------------------------------------------------------------------
3dfd8                 | 
3dfd8                 | '------------------------------------------------------------------------------
3dfd8                 | ' USB host cog initialization.
3dfd8                 | '------------------------------------------------------------------------------
3dfd8                 | usb_host_init
3dfd8                 |                 ' Initialize buffer pointers
3dfd8                 |         if OVERLAP_MEMORY
3dfd8                 |         else
3dfd8     3C 15 B0 FE |                 loc     pb, #hid_descr
3dfdc                 |         end
3dfdc     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3dfe0                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3dfe0                 |                 {
3dfe0                 |                 }
3dfe0                 |         
3dfe0                 |                 {
3dfe0                 |                 }
3dfe0                 |                 'loc     pb,#hkbd_report
3dfe0                 |                 'mov     hkbd_report_p,pb
3dfe0                 | 
3dfe0     04 1D B0 FE |                 loc     pb, #hub_descr
3dfe4     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3dfe8     19 1D B0 FE |                 loc     pb, #urx_buff
3dfec     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3dff0     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3dff4     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3dff8     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3dffc     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3e000     14 15 B0 FE |                 loc     pb, #usb_cache_start
3e004     F7 55 02 F6 |                 mov     cache_start_p, pb
3e008     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3e00c     F7 57 02 F6 |                 mov     cache_end_p, pb
3e010                 | 
3e010                 |         if ERROR_LED >= 0
3e010                 |         end
3e010                 | 
3e010                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3e010                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3e010                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3e010                 | ' Configure and enable the Serial Host USB port.
3e010     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3e014                 | 
3e014                 | '------------------------------------------------------------------------------
3e014                 | ' Timing calculations happen before any interrupt(s) are enabled.
3e014                 | '------------------------------------------------------------------------------
3e014                 | ' On entry:
3e014                 | '   htmp - current CLKFREQ value.
3e014                 | '------------------------------------------------------------------------------
3e014                 | hinit_usb_timings
3e014                 | '                getct   htmp2
3e014     B8 59 02 F6 |                 mov     save_sysclk, htmp
3e018     8D 5B 80 FF 
3e01c     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3e020     18 30 63 FD |                 getqx   _12Mbps_
3e024     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3e028     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3e02c     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3e030     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3e034     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3e038     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3e03c     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3e040     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3e044     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3e048     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3e04c     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3e050     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3e054     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3e058     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3e05c     80 00 00 FF 
3e060     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3e064     18 2C 63 FD |                 getqx   _var_64_lower_
3e068     19 2E 63 FD |                 getqy   _var_64_upper_
3e06c     28 2C 63 FD |                 setq    _var_64_lower_
3e070     65 CD 1D FF 
3e074     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3e078     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3e07c     01 00 00 FF 
3e080     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3e084     18 2C 63 FD |                 getqx   _var_64_lower_
3e088     19 2E 63 FD |                 getqy   _var_64_upper_
3e08c     28 2C 63 FD |                 setq    _var_64_lower_
3e090     A1 07 00 FF 
3e094     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3e098     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3e09c     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3e0a0     09 36 57 F0 |                 shr     _1us_, #9               wc
3e0a4     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3e0a8     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3e0ac     18 38 63 FD |                 getqx   _10us_
3e0b0     09 38 57 F0 |                 shr     _10us_, #9              wc
3e0b4     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3e0b8     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3e0bc     18 3A 63 FD |                 getqx   _33us_
3e0c0     09 3A 57 F0 |                 shr     _33us_, #9              wc
3e0c4     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3e0c8     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3e0cc     18 3C 63 FD |                 getqx   _txn_err_
3e0d0     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3e0d4     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3e0d8     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3e0dc     18 3E 63 FD |                 getqx   _500us_
3e0e0     09 3E 57 F0 |                 shr     _500us_, #9             wc
3e0e4     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3e0e8     01 00 00 FF 
3e0ec     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3e0f0     18 40 63 FD |                 getqx   _txn_ok_ls_
3e0f4     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3e0f8     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3e0fc     01 00 00 FF 
3e100     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3e104     18 42 63 FD |                 getqx   _txn_ok_fs_
3e108     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3e10c     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3e110     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3e114     05 00 00 FF 
3e118     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3e11c     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3e120     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3e124     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3e128     1C 00 00 FF 
3e12c     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3e130     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3e134     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3e138     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3e13c     00 00 00 FF 
3e140     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3e144     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3e148     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3e14c     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3e150     04 00 00 FF 
3e154     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3e158     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3e15c     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3e160     8D 5B 00 FF 
3e164     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3e168     18 4C 63 FD |                 getqx   _preamble_wait_
3e16c     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3e170     01 00 00 FF 
3e174     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3e178     18 2C 63 FD |                 getqx   _var_64_lower_
3e17c     19 2E 63 FD |                 getqy   _var_64_upper_
3e180     28 2C 63 FD |                 setq    _var_64_lower_
3e184     01 00 00 FF 
3e188     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3e18c     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3e190     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3e194     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3e198     FF FF 7F FF 
3e19c     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3e1a0     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3e1a4     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3e1a8     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3e1ac     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3e1b0     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3e1b4     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3e1b8     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3e1bc     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3e1c0     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3e1c4     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3e1c8     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3e1cc     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3e1d0     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3e1d4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3e1d8     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3e1dc     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3e1e0     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3e1e4     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3e1e8     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3e1ec     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3e1f0     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3e1f4     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3e1f8     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3e1fc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3e200     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3e204     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3e208                 | '        _ret_   mov     _1sec_, save_sysclk
3e208                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3e208                 | '                ret
3e208                 | {
3e208                 | }
3e208                 | 
3e208                 | '------------------------------------------------------------------------------
3e208                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3e208                 | ' one. If it is, start the task progression that will configure the device for
3e208                 | ' use.
3e208                 | '------------------------------------------------------------------------------
3e208                 | ' On entry:
3e208                 | '   hconfig_base - start address of the cached config descriptor chain.
3e208                 | ' On exit:
3e208                 | '------------------------------------------------------------------------------
3e208                 | hparse_con_desc
3e208     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3e20c     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3e210     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3e214     4E 70 FF F9 |                 movbyts htmp,#%%1032
3e218     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3e21c                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3e21c                 | 
3e21c     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3e220     6E ED 03 F1 |                 add     pa, hconfig_base
3e224     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3e228                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3e228                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3e228                 | ' that defines a keyboard and/or mouse.
3e228     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3e22c                 | .next_intf
3e22c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3e230     B8 01 90 3D |         if_ae   jmp     #hset_config
3e234     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3e238     75 F3 03 F1 |                 add     ptrb, hnext_desc
3e23c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3e240     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3e244     0C 00 90 AD |         if_z    jmp     #.intf
3e248     80 71 C7 FA |                 rdbyte  htmp, ptrb
3e24c     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3e250     D8 FF 9F FD |                 jmp     #.next_intf
3e254                 | .intf
3e254     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3e258     00 90 07 F6 |                 mov     hpar3, #0
3e25c     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3e260     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3e264     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3e268     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3e26c                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3e26c                 | 
3e26c                 | .endp
3e26c     80 71 C7 FA |                 rdbyte  htmp, ptrb
3e270     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3e274     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3e278     78 00 90 3D |         if_ae   jmp     #.get_device
3e27c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3e280     75 F3 03 F1 |                 add     ptrb, hnext_desc
3e284     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3e288     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3e28c     64 00 90 AD |         if_z    jmp     #.get_device
3e290     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3e294     04 00 90 AD |         if_z    jmp     #.get_ep
3e298     D0 FF 9F FD |                 jmp     #.endp
3e29c                 | .get_ep
3e29c     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3e2a0     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3e2a4     0F 86 67 F0 |                 shl     hr1, #8 + 7
3e2a8     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3e2ac     3F 00 00 FF 
3e2b0     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3e2b4     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3e2b8     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3e2bc     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3e2c0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e2c4     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3e2c8     A0 FF 9F FD |                 jmp     #.endp
3e2cc                 | .in_ep
3e2cc     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3e2d0     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3e2d4                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3e2d4     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3e2d8     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3e2dc     8C FF 9F FD |                 jmp     #.endp
3e2e0                 | .out_ep
3e2e0     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3e2e4     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3e2e8                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3e2e8     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3e2ec     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3e2f0     78 FF 9F FD |                 jmp     #.endp
3e2f4                 | 
3e2f4                 | .get_device
3e2f4     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3e2f8     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3e2fc     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3e300     64 00 90 AD |         if_z    jmp     #.gamepad
3e304     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3e308     A8 00 90 AD |         if_z    jmp     #.hub
3e30c     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3e310     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3e314                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3e314     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3e318     4C 00 90 AD |         if_z    jmp     #.gamepad
3e31c     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3e320     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3e324                 | .keyboard
3e324     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3e328                 |         if HAVE_MOUSE
3e328     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3e32c                 |         else
3e32c                 |         end
3e32c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3e330     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3e334     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e338     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3e33c     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3e340     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3e344                 |                 'debug(udec(kb_intf_num))
3e344                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3e344     E4 FE 9F FD |                 jmp     #.next_intf
3e348                 | if HAVE_MOUSE
3e348                 | .mouse
3e348     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3e34c     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3e350     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3e354     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3e358     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e35c                 |                 'getbyte ms_interval, hr2, #3
3e35c     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3e360     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3e364                 |                 'debug(udec(kb_intf_num))
3e364                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3e364     C4 FE 9F FD |                 jmp     #.next_intf
3e368                 | end
3e368                 | .gamepad
3e368     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3e36c     C7 71 63 F5 |                 xor     htmp, hpar2
3e370     3F 00 00 FF 
3e374     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e378     B0 FE 9F AD |         if_z    jmp     #.next_intf
3e37c                 |         if HAVE_MOUSE
3e37c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3e380     C7 71 63 F5 |                 xor     htmp, hpar2
3e384     3F 00 00 FF 
3e388     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e38c     9C FE 9F AD |         if_z    jmp     #.next_intf
3e390                 |         end
3e390     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3e394     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3e398     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3e39c                 | 
3e39c     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3e3a0     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3e3a4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e3a8     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3e3ac     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3e3b0                 |                 'debug(udec(gp_intf_num))
3e3b0                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3e3b0     78 FE 9F FD |                 jmp     #.next_intf
3e3b4                 | .hub
3e3b4     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3e3b8     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3e3bc     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3e3c0     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3e3c4     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3e3c8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e3cc     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3e3d0     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3e3d4     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3e3d8     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3e3dc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e3e0     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3e3e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3e3e8                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3e3e8     40 FE 9F FD |                 jmp     #.next_intf
3e3ec                 | 
3e3ec                 | '------------------------------------------------------------------------------
3e3ec                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3e3ec                 | ' it according to its function, or functions. In the case of this boot protocol
3e3ec                 | ' keyboard/mouse class driver:
3e3ec                 | ' - SetConfiguration(config_num)
3e3ec                 | ' - SetProtocol(boot)
3e3ec                 | ' - SetIdle(indefinite)
3e3ec                 | ' - Enter the device interrupt IN polling task stage.
3e3ec                 | '------------------------------------------------------------------------------
3e3ec                 | ' On entry:
3e3ec                 | ' On exit:
3e3ec                 | '------------------------------------------------------------------------------
3e3ec                 | hset_config
3e3ec                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3e3ec                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3e3ec     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3e3f0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e3f4     00 00 0C F2 |                 cmp     0-0, #0                 wz
3e3f8     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3e3fc                 |         if HAVE_MOUSE
3e3fc     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3e400                 |         end
3e400     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3e404     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3e408                 | .set_config
3e408     6C 0E D0 FE |                 loc     ptra, #set_config
3e40c     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3e410     6E ED 03 F1 |                 add     pa, hconfig_base
3e414     F6 8D C3 FA |                 rdbyte  hpar1, pa
3e418     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3e41c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3e420     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3e424     A0 02 A0 FD |                 call    #control_write
3e428     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e42c     2D 00 64 5D |         if_nz   ret
3e430                 | .kbd_config
3e430     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3e434     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3e438                 | 
3e438     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3e43c     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e440     3F 00 00 FF 
3e444     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e448     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3e44c                 | 
3e44c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e450     34 0E D0 FE |                 loc     ptra, #set_protocol
3e454     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3e458     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e45c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3e460     A0 02 A0 FD |                 call    #control_write
3e464     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e468     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3e46c     E4 02 90 5D |         if_nz   jmp     #.notify_client
3e470     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3e474     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3e478     30 03 B0 FD |                 call    #hset_idle
3e47c                 |                 'cmp     retval, #PID_ACK        wz
3e47c                 |         'if_nz   mov     hkbd_ep_addr, #0
3e47c                 |         'if_nz   jmp     #.notify_client
3e47c     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e480     EF 02 A0 FD |                 call    #poll_waitx
3e484     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3e488     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3e48c     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3e490     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3e494     2C 03 B0 FD |                 call    #hset_kbdled_report
3e498     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e49c     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3e4a0     B0 02 90 5D |         if_nz   jmp     #.notify_client
3e4a4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e4a8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e4ac     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e4b0     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e4b4     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3e4b8     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3e4bc     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3e4c0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e4c4     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3e4c8     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3e4cc     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3e4d0                 |         if !!HAVE_MOUSE
3e4d0                 |         end
3e4d0                 | 
3e4d0                 | .mouse_config
3e4d0                 | if HAVE_MOUSE
3e4d0     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3e4d4     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3e4d8     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3e4dc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e4e0     3F 00 00 FF 
3e4e4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e4e8     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3e4ec                 | 
3e4ec                 |                 debug("mouse passed addr check")
3e4ec                 | 
3e4ec     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3e4f0     00 00 80 FF 
3e4f4     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3e4f8     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3e4fc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e500     55 02 A0 FD |                 call    #control_read
3e504     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e508     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3e50c     44 02 90 5D |         if_nz   jmp     #.notify_client
3e510     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e514     56 01 00 F6 |                 mov     0-0, total_data
3e518     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e51c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e51c                 | 
3e51c     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3e520     64 0D D0 FE |                 loc     ptra, #set_protocol
3e524     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3e528     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e52c     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3e530     A0 02 A0 FD |                 call    #control_write
3e534     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e538     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3e53c     14 02 90 5D |         if_nz   jmp     #.notify_client
3e540                 |                 debug("mouse passed SetProtocol")
3e540     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3e544     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3e548     60 02 B0 FD |                 call    #hset_idle
3e54c                 |                 'cmp     retval, #PID_ACK        wz
3e54c                 |         'if_nz   mov     hmouse_ep_addr, #0
3e54c                 |         'if_nz   jmp     #.notify_client
3e54c                 |                 debug("mouse passed SetIdle")
3e54c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e550     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e554     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e558     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e55c     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3e560     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e564     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3e568     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3e56c     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3e570     3F 00 00 FF 
3e574     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3e578     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3e57c     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3e580     D0 01 90 FD |                 jmp     #.notify_client
3e584                 | end
3e584                 | .gamepad_config
3e584                 | if _HAVE_GAMEPAD
3e584     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e588     00 00 0C F2 |                 cmp     0-0, #0                 wz
3e58c     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3e590     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e594     00 70 03 F6 |                 mov     htmp, 0-0
3e598     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e59c     3F 00 00 FF 
3e5a0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e5a4     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3e5a8                 | 
3e5a8     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3e5ac     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3e5b0     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e5b4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e5b8     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3e5bc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3e5c0     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3e5c4     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3e5c8     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3e5cc     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3e5d0     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3e5d4     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3e5d8     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3e5dc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3e5e0                 | 
3e5e0                 |                 if EMUPAD_MAX_PLAYER > 0
3e5e0                 |                 
3e5e0                 | .rule_loop           
3e5e0                 |                 end
3e5e0                 | 
3e5e0     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3e5e4     5C 00 90 AD |         if_e    jmp     #.xinput
3e5e8     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3e5ec     00 70 03 F6 |                 mov     htmp,0-0
3e5f0     01 A6 02 FF 
3e5f4     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3e5f8     7C 00 90 AD |         if_e    jmp     #.ps3
3e5fc                 | 
3e5fc     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3e600     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3e604     00 00 80 5F 
3e608     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3e60c     03 00 80 AF 
3e610     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3e614     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3e618     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e61c     55 02 A0 FD |                 call    #control_read
3e620     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e624     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e628     00 00 04 56 |         if_nz   mov     0-0, #0
3e62c     24 01 90 5D |         if_nz   jmp     #.notify_client
3e630     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3e634     56 01 00 F6 |                 mov     0-0, total_data
3e638     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3e63c                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3e63c                 | 
3e63c     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3e640     10 01 90 FD |                 jmp     #.notify_client
3e644                 | .xinput
3e644     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3e648     2D EF 03 F6 |                 mov     pb,hdev_port
3e64c     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3e650     03 EE 27 F3 |                 fle     pb,#3
3e654     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3e658     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3e65c                 | 
3e65c     03 B0 06 F6 |                 mov     pkt_data, #3
3e660     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3e664     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3e668     5A 00 A0 FD |                 call    #txn_out
3e66c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3e670                 | 
3e670     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3e674     DC 00 90 FD |                 jmp     #.notify_client
3e678                 | .ps3
3e678     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3e67c     2D EF 03 F6 |                 mov     pb,hdev_port
3e680     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3e684     04 EE 27 F3 |                 fle     pb,#4
3e688     F7 EF C3 F9 |                 decod   pb
3e68c     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3e690                 | 
3e690     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e694     00 0C D0 FE |                 loc     ptra, #set_report
3e698     01 00 80 FF 
3e69c     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3e6a0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e6a4     03 61 5C FC |                 wrword  #48, ptra[wLength]
3e6a8     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3e6ac     A0 02 A0 FD |                 call    #control_write
3e6b0                 | 
3e6b0     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3e6b4     E0 0B D0 FE |                 loc     ptra, #set_report
3e6b8     01 00 80 FF 
3e6bc     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3e6c0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e6c4     03 09 5C FC |                 wrword  #4, ptra[wLength]
3e6c8     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3e6cc     A0 02 A0 FD |                 call    #control_write
3e6d0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3e6d4     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3e6d8     00 00 04 56 |         if_nz   mov     0-0, #0
3e6dc     74 00 90 5D |         if_nz   jmp     #.notify_client
3e6e0                 | 
3e6e0     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3e6e4     6C 00 90 FD |                 jmp     #.notify_client
3e6e8                 | end
3e6e8                 | 
3e6e8                 | .hub_config
3e6e8     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3e6ec     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3e6f0     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3e6f4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3e6f8     3F 00 00 FF 
3e6fc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3e700     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3e704                 | 
3e704     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3e708     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3e70c     26 EF 03 F6 |                 mov     pb, hub_descr_p
3e710     55 02 A0 FD |                 call    #control_read
3e714     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e718     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3e71c     34 00 90 5D |         if_nz   jmp     #.notify_client
3e720                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3e720                 | 
3e720     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3e724     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3e728     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3e72c                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3e72c                 | .pwr_loop
3e72c     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3e730     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3e734     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3e738     A0 02 A0 FD |                 call    #control_write
3e73c     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3e740                 | 
3e740     B1 99 02 F6 |                 mov     hctwait, _500ms_
3e744     B0 99 02 F1 |                 add     hctwait, _100ms_
3e748     EF 02 A0 FD |                 call    #poll_waitx
3e74c                 | 
3e74c     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3e750     00 00 90 FD |                 jmp     #.notify_client
3e754                 | 
3e754                 | .notify_client
3e754     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3e758     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3e75c                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3e75c                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3e75c     2D 00 64 FD |                 ret
3e760                 | 
3e760                 | '------------------------------------------------------------------------------
3e760                 | ' Initialize the keyboard/mouse data area to start-up values.
3e760                 | '------------------------------------------------------------------------------
3e760                 | ' On entry:
3e760                 | ' On exit:
3e760                 | '------------------------------------------------------------------------------
3e760                 | init_kbdm_data
3e760     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3e764     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3e768                 | 
3e768     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3e76c     2B ED 03 F6 |                 mov     pa, cache_end_p
3e770                 | .loop
3e770     61 01 4C FC |                 wrbyte  #0, ptra++
3e774     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3e778     F4 FF 9F CD |         if_b    jmp     #.loop
3e77c                 |         
3e77c                 |         if EMUPAD_MAX_PLAYER > 0
3e77c                 |         end
3e77c                 | 
3e77c                 | 
3e77c     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3e780                 | .regloop
3e780     00 EC 8F F9 |                 altd    pa
3e784     00 00 04 F6 |                 mov     0-0, #0
3e788     01 EC 07 F1 |                 add     pa, #1
3e78c     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3e790     EC FF 9F 5D |         if_nz   jmp     #.regloop
3e794                 | 
3e794     E1 E1 61 FF 
3e798     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3e79c     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3e7a0     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3e7a4     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3e7a8                 | 
3e7a8     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3e7ac                 | 
3e7ac                 | '------------------------------------------------------------------------------
3e7ac                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3e7ac                 | ' function.
3e7ac                 | '------------------------------------------------------------------------------
3e7ac                 | ' On entry:
3e7ac                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3e7ac                 | '   hpar2 - index number of the target interface.
3e7ac                 | ' On exit:
3e7ac                 | '------------------------------------------------------------------------------
3e7ac                 | hset_idle
3e7ac     A8 99 02 F6 |                 mov     hctwait, _2ms_
3e7b0     EF 02 A0 FD |                 call    #poll_waitx
3e7b4     D8 0A D0 FE |                 loc     ptra, #set_idle
3e7b8     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3e7bc     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3e7c0     A0 02 80 FD |                 jmp     #control_write
3e7c4                 | 
3e7c4                 | '------------------------------------------------------------------------------
3e7c4                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3e7c4                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3e7c4                 | '------------------------------------------------------------------------------
3e7c4                 | ' On entry:
3e7c4                 | '   ep_addr_pid - device address and enpoint for the request.
3e7c4                 | ' On exit:
3e7c4                 | '   retval - transaction result.
3e7c4                 | '------------------------------------------------------------------------------
3e7c4                 | hset_kbdled_report
3e7c4     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3e7c8     CC 0A D0 FE |                 loc     ptra, #set_report
3e7cc     01 00 80 FF 
3e7d0     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3e7d4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3e7d8     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3e7dc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3e7e0     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3e7e4     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3e7e8                 | 
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | ' On entry:
3e7e8                 | ' On exit:
3e7e8                 | '------------------------------------------------------------------------------
3e7e8                 | hget_kbd_in_report
3e7e8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3e7ec     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e7f0     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3e7f4     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3e7f8     CF 02 A0 FD |                 call    #do_int_in
3e7fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e800     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e804                 | 
3e804     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e808     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e80c                 | 
3e80c     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3e810     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e814     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3e818     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3e81c                 | 
3e81c     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3e820     18 00 B0 FD |                 call    #hkbd_compare
3e824                 |         if EMUPAD_MAX_PLAYER > 0
3e824                 |         end
3e824                 | 
3e824                 | .led_check
3e824     3B 71 03 F6 |                 mov     htmp, kb_led_states
3e828     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3e82c     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3e830     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3e834     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3e838     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3e83c                 | 
3e83c                 | '------------------------------------------------------------------------------
3e83c                 | ' Compare current and previous keyboard data buffers for keypress changes.
3e83c                 | '------------------------------------------------------------------------------
3e83c                 | hkbd_compare
3e83c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e840     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3e844     61 73 07 FB |                 rdlong  htmp1, ptra++
3e848     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e84c     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3e850     61 73 07 FB |                 rdlong  htmp1, ptra++
3e854     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3e858     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3e85c     2D 00 64 AD |         if_z    ret
3e860                 | 
3e860     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3e864                 | 
3e864                 |                 ' Handle modifiers
3e864     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3e868     00 87 C7 FA |                 rdbyte  hr1, ptra
3e86c     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3e870     63 86 63 FD |                 mergew  hr1
3e874     08 EC 07 F6 |                 mov     pa,#8
3e878                 | .modloop
3e878     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3e87c     E8 8C 07 F6 |                 mov     hpar1,#$E8
3e880     F6 8D 83 F1 |                 sub     hpar1,pa
3e884     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3e888     FB ED 6F FB |                 djnz    pa,#.modloop
3e88c                 | 
3e88c     6F E0 75 FD | .release        modc    _set    wc
3e890                 |                 'alts    hdev_port, #hid_report_p
3e890                 |                 'mov     ptra, hid_report_p
3e890     02 F0 07 F1 |                 add     ptra, #2
3e894     06 EC 07 F6 |                 mov     pa, #6
3e898     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3e89c     20 00 90 AD |         if_z    jmp     #.rl3
3e8a0     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3e8a4     02 F2 07 F1 |                 add     ptrb, #2
3e8a8     06 EE 07 F6 |                 mov     pb, #6
3e8ac     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3e8b0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e8b4     08 00 90 AD |         if_z    jmp     #.rl3
3e8b8     FC EF 6F FB |                 djnz    pb, #.rl2
3e8bc     68 00 B0 FD |                 call    #hkbd_translate
3e8c0     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3e8c4                 | 
3e8c4     00 90 07 F6 |                 mov     hpar3, #0
3e8c8     1F 90 27 F4 |                 bith    hpar3, #31
3e8cc                 | 
3e8cc     6F 00 74 FD | .press          modc    _clr    wc
3e8d0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e8d4     02 F0 07 F1 |                 add     ptra, #2
3e8d8     06 EC 07 F6 |                 mov     pa, #6
3e8dc     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3e8e0     20 00 90 AD |         if_z    jmp     #.pl3
3e8e4     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3e8e8     02 F2 07 F1 |                 add     ptrb, #2
3e8ec     06 EE 07 F6 |                 mov     pb, #6
3e8f0     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3e8f4     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3e8f8     08 00 90 AD |         if_z    jmp     #.pl3
3e8fc     FC EF 6F FB |                 djnz    pb, #.pl2
3e900     24 00 B0 FD |                 call    #hkbd_translate
3e904     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3e908                 | 
3e908     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3e90c     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3e910     28 02 64 FD |                 setq #1
3e914     61 73 07 FB |                 rdlong  htmp1, ptra++
3e918     28 02 64 FD |                 setq #1
3e91c     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3e920     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3e924                 | 
3e924     2D 00 64 FD |                 ret
3e928                 | 
3e928                 | '------------------------------------------------------------------------------
3e928                 | ' Translate keyboard scancode to ASCII
3e928                 | '------------------------------------------------------------------------------
3e928                 | ' On entry:
3e928                 | '   hpar1 - scancode
3e928                 | '   hpar2 - key modifiers state
3e928                 | '       c - pressed (0) or released (1) flag
3e928                 | ' On exit:
3e928                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3e928                 | '               30..17 = unused
3e928                 | '                   18 = scroll-lock state 
3e928                 | '                   17 = caps-lock state
3e928                 | '                   16 = num-lock state 
3e928                 | '                15..8 = key modifiers state
3e928                 | '                 7..0 = scancode
3e928                 | '------------------------------------------------------------------------------
3e928                 | hkbd_translate
3e928     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3e92c     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3e930     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3e934     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3e938     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3e93c     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3e940                 | 
3e940                 |         if EMUPAD_MAX_PLAYER > 0
3e940                 | 
3e940                 |         if EMUPAD_BT0_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT1_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT2_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT3_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT4_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT5_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT6_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT7_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT8_BIT >= 0
3e940                 |         end
3e940                 |         if EMUPAD_BT9_BIT >= 0
3e940                 |         end
3e940                 | 
3e940                 |         end
3e940     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3e944     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3e948     1F 8C 47 F4 |                 bitc    hpar1, #31
3e94c                 |         if KEYQUEUE_SIZE > 0
3e94c     C4 09 B0 FE |                 loc pb,#keyq_head
3e950     F7 71 E3 FA |                 rdword htmp,pb
3e954     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3e958     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3e95c     B8 75 03 F6 |                 mov htmp2,htmp
3e960     04 74 07 FA |                 mul htmp2,#4
3e964     F7 75 03 F1 |                 add htmp2,pb
3e968     02 74 07 F1 |                 add htmp2,#2
3e96c     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3e970     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3e974     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3e978     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3e97c                 |         end
3e97c     2D 00 7C FD |                 ret wcz
3e980                 | 
3e980                 | if HAVE_MOUSE
3e980                 | '------------------------------------------------------------------------------
3e980                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3e980                 | '------------------------------------------------------------------------------
3e980                 | ' On entry:
3e980                 | ' On exit:
3e980                 | '------------------------------------------------------------------------------
3e980                 | hget_mouse_in_report
3e980     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3e984     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3e988     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3e98c     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3e990     CF 02 A0 FD |                 call    #do_int_in
3e994     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e998     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3e99c                 | 
3e99c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3e9a0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3e9a4                 | 
3e9a4     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3e9a8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3e9ac     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3e9b0     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3e9b4                 | 
3e9b4     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3e9b8     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3e9bc     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3e9c0     01 90 87 31 |         if_ae   sub     hpar3, #1
3e9c4                 | 
3e9c4     40 09 90 FE |                 loc     pa, #mouse_limits
3e9c8     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3e9cc                 | 
3e9cc                 |                 ' load xacc,yacc,zacc
3e9cc     28 04 64 FD |                 setq    #3-1
3e9d0     80 87 07 FB |                 rdlong  hr1,ptrb
3e9d4                 |                 ' load limits and outptr
3e9d4     28 04 64 FD |                 setq    #3-1
3e9d8     F6 73 03 FB |                 rdlong  htmp1,pa
3e9dc                 | 
3e9dc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3e9e0     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3e9e4     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3e9e8     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3e9ec     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3e9f0     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3e9f4     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3e9f8     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3e9fc                 |               
3e9fc                 | 
3e9fc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3ea00     07 70 67 F7 |                 signx   htmp, #7
3ea04     B8 87 03 F1 |                 add     hr1,htmp
3ea08     00 72 0F F2 |                 cmp     htmp1,#0 wz
3ea0c     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3ea10     00 86 47 53 |         if_ne   fges    hr1,#0
3ea14                 | 
3ea14     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3ea18     07 70 67 F7 |                 signx   htmp, #7
3ea1c     B8 89 03 F1 |                 add     hr2,htmp
3ea20     00 74 0F F2 |                 cmp     htmp2,#0 wz
3ea24     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3ea28     00 88 47 53 |         if_ne   fges    hr2,#0
3ea2c                 |                 
3ea2c                 | 
3ea2c     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3ea30     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3ea34     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3ea38     B8 8B 03 A1 |         if_z    add     hr3,htmp
3ea3c                 | 
3ea3c     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3ea40     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3ea44                 | 
3ea44                 |                 ' write back accumulators
3ea44     28 04 64 FD |                 setq    #3-1
3ea48     80 87 67 FC |                 wrlong  hr1,ptrb
3ea4c                 |                 ' if outptr set, write X/Y words
3ea4c     00 76 0F F2 |                 cmp htmp3,#0                    wz
3ea50     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3ea54     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3ea58     2D 00 64 FD |                 ret
3ea5c                 | end
3ea5c                 | 
3ea5c                 | '------------------------------------------------------------------------------
3ea5c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ea5c                 | '------------------------------------------------------------------------------
3ea5c                 | ' On entry:
3ea5c                 | ' On exit:
3ea5c                 | '------------------------------------------------------------------------------
3ea5c                 | if _HAVE_GAMEPAD
3ea5c                 | hget_gp_in_report
3ea5c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3ea60     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3ea64                 | 
3ea64     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3ea68     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3ea6c     00 90 E3 F8 |                 getbyte hpar3
3ea70     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3ea74     CF 02 A0 FD |                 call    #do_int_in
3ea78     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ea7c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ea80                 | 
3ea80     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ea84     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ea88                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3ea88                 | 
3ea88     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3ea8c     00 70 E3 F8 |                 getbyte htmp                            ' |
3ea90     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ea94     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3ea98     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3ea9c     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3eaa0     B8 01 C0 F8 |                 setbyte htmp                            ' |
3eaa4                 | 
3eaa4                 | ' Note: the following code compares the current and previous reports
3eaa4                 | ' and process the data if there are changes to ease the debug output.
3eaa4                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3eaa4                 | ' gpPreReport buffer.
3eaa4                 | 
3eaa4                 |                 ' ----- start of block to remove
3eaa4                 |                 {
3eaa4                 |                 }
3eaa4                 |                 ' ----- end of block to remove
3eaa4     F4 04 90 FE |                 loc pa,#hpad_translate
3eaa8     2A EC 63 FD |                 push pa
3eaac                 | 
3eaac                 |                 ' FALL THROUGH !!!!
3eaac                 | 
3eaac                 | '------------------------------------------------------------------------------
3eaac                 | ' Decode controller report
3eaac                 | '------------------------------------------------------------------------------
3eaac                 | hid_decode
3eaac                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3eaac     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3eab0     00 04 00 FF 
3eab4     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3eab8                 | 
3eab8     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3eabc                 | 
3eabc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3eac0     00 2A E3 F8 |                 getbyte hidr_type
3eac4     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3eac8     34 02 90 AD |         if_z    jmp     #hpad_xinput
3eacc     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3ead0     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3ead4     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3ead8     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3eadc     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3eae0                 |                 
3eae0                 | 
3eae0                 | '------------------------------------------------------------------------------
3eae0                 | ' Handle HID controller (or mouse now
3eae0                 | ' On entry:
3eae0                 | '   ptrb - controller report
3eae0                 | '------------------------------------------------------------------------------
3eae0                 | hpad_hid
3eae0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3eae4     F7 F1 03 F6 |                 mov     ptra, pb
3eae8     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3eaec     00 EC 03 F6 |                 mov     pa, 0-0
3eaf0                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3eaf0     19 2A 3B FF 
3eaf4     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3eaf8                 | 
3eaf8                 | .next
3eaf8     00 EC 5F F2 |                 cmps    pa, #0      wcz
3eafc     2D 00 7C ED |         if_be   ret     wcz
3eb00                 | 
3eb00     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3eb04     01 EC 87 F1 |                 sub     pa, #1
3eb08     00 8E 07 F6 |                 mov     hpar2, #0
3eb0c                 | 
3eb0c     C6 71 03 F6 |                 mov     htmp, hpar1
3eb10     03 70 07 F5 |                 and     htmp, #$03
3eb14     01 70 0F F2 |                 cmp     htmp, #1    wz
3eb18     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3eb1c     07 8E 67 A7 |         if_z    signx   hpar2,#7
3eb20     01 EC 87 A1 |         if_z    sub     pa, #1
3eb24     02 70 0F F2 |                 cmp     htmp, #2    wz
3eb28     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3eb2c     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3eb30     02 EC 87 A1 |         if_z    sub     pa, #2
3eb34     03 70 0F F2 |                 cmp     htmp, #3    wz
3eb38     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3eb3c     04 EC 87 A1 |         if_z    sub     pa, #4
3eb40                 | 
3eb40     FC 8C 07 F5 |                 and     hpar1, #$FC
3eb44                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3eb44                 | 
3eb44     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3eb48     0C 01 90 AD |         if_z    jmp     #.report_id
3eb4c     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3eb50     24 01 90 AD |         if_z    jmp     #.usage_page
3eb54     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3eb58     2C 01 90 AD |         if_z    jmp     #.usage
3eb5c     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3eb60     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3eb64     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3eb68     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3eb6c     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3eb70     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3eb74     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3eb78     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3eb7c     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3eb80     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3eb84     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3eb88     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3eb8c     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3eb90     64 FF 9F 5D |         if_nz   jmp     #.next
3eb94                 | 
3eb94     D8 1D A7 FB |                 tjf     hidr_state,#.next
3eb98                 | 
3eb98     03 8E 07 F5 |                 and     hpar2, #$03
3eb9c     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3eba0     18 00 90 5D |         if_nz   jmp     #.skip
3eba4                 | 
3eba4     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3eba8     20 00 90 AD |         if_z    jmp     #.axes
3ebac     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3ebb0     5C 00 90 AD |         if_z    jmp     #.hats
3ebb4     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3ebb8     70 00 90 AD |         if_z    jmp     #.buttons
3ebbc                 | .skip
3ebbc     8F 71 03 F6 |                 mov     htmp, hidr_size
3ebc0     90 71 03 FA |                 mul     htmp, hidr_count
3ebc4     B8 23 03 F1 |                 add     hidr_offset, htmp
3ebc8     2C FF 9F FD |                 jmp     #.next
3ebcc                 | .axes
3ebcc                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3ebcc     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3ebd0     90 87 03 F6 |                 mov     hr1, hidr_count
3ebd4                 | .l1
3ebd4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ebd8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ebdc     04 03 B0 FD |                 call    #hpad_getbits
3ebe0     64 03 B0 FD |                 call    #hpad_normalize
3ebe4     06 84 1F F2 |                 cmp     hr0, #6         wcz
3ebe8     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3ebec     00 88 43 C8 |         if_b    getnib  hr2
3ebf0     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3ebf4     5F 01 20 C9 |         if_b    setword retval
3ebf8     01 84 07 C1 |         if_b    add     hr0, #1
3ebfc     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3ec00     F4 87 6F FB |                 djnz    hr1, #.l1
3ec04                 | 
3ec04     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3ec08     01 1C 07 F6 |                 mov     hidr_state, #1
3ec0c     E8 FE 9F FD |                 jmp     #.next
3ec10                 | .hats
3ec10                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3ec10     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ec14     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ec18     C8 02 B0 FD |                 call    #hpad_getbits
3ec1c     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3ec20     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ec24     01 1C 07 F6 |                 mov     hidr_state, #1
3ec28     90 FF 9F FD |                 jmp     #.skip
3ec2c                 | .buttons
3ec2c                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3ec2c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3ec30     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3ec34     90 8F 03 FA |                 mul     hpar2, hidr_count
3ec38     A8 02 B0 FD |                 call    #hpad_getbits
3ec3c     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3ec40     B8 BF 62 F0 |                 shl     retval, htmp
3ec44     5F 17 43 F5 |                 or      hidr_buttons, retval
3ec48     90 71 03 F1 |                 add     htmp, hidr_count
3ec4c     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3ec50     01 1C 07 F6 |                 mov     hidr_state, #1
3ec54     64 FF 9F FD |                 jmp     #.skip
3ec58                 | .report_id
3ec58     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3ec5c     2D 00 7C 5D |         if_nz   ret     wcz
3ec60     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3ec64     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3ec68     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3ec6c     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3ec70     01 F2 87 51 |         if_nz   sub     ptrb,#1
3ec74     80 FE 9F FD |                 jmp     #.next
3ec78                 | .usage_page
3ec78     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3ec7c     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3ec80     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3ec84     70 FE 9F FD |                 jmp     #.next
3ec88                 | .usage
3ec88     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3ec8c     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3ec90     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3ec94     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3ec98     5C FE 9F AD |         if_z    jmp     #.next
3ec9c     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3eca0     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3eca4     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3eca8     4C FE 9F AD |         if_z    jmp     #.next
3ecac     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3ecb0     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3ecb4     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3ecb8     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3ecbc     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3ecc0     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3ecc4     10 00 90 AD |         if_z    jmp     #.usage_axis
3ecc8     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3eccc     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3ecd0     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3ecd4     20 FE 9F FD |                 jmp     #.next
3ecd8                 | .usage_axis
3ecd8     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3ecdc     18 FE 9F CD |         if_b    jmp     #.next
3ece0     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3ece4     C7 01 00 F8 |                 setnib  hpar2
3ece8                 | 
3ece8     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3ecec     C7 8F C3 F9 |                 decod   hpar2
3ecf0     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3ecf4                 | 
3ecf4     01 24 07 F1 |                 add     hidr_usage_idx, #1
3ecf8     02 1C 07 F6 |                 mov     hidr_state, #2
3ecfc     F8 FD 9F FD |                 jmp     #.next
3ed00                 | 
3ed00                 | '------------------------------------------------------------------------------
3ed00                 | ' Handle XInput controller
3ed00                 | ' On entry:
3ed00                 | '   ptrb - controller report
3ed00                 | '------------------------------------------------------------------------------
3ed00                 | '   Default implementation translates the report to a pseudo-defacto hid
3ed00                 | '   standard and jumps to hpad_translate for actions.
3ed00                 | '   Implementors may take specific actions for this kind of controller.
3ed00                 | '------------------------------------------------------------------------------
3ed00                 | hpad_xinput
3ed00     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3ed04     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3ed08     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3ed0c     14 70 0F F2 |                 cmp     htmp, #$14      wz
3ed10     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3ed14                 | 
3ed14                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3ed14                 | 
3ed14     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3ed18     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3ed1c                 | 
3ed1c     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3ed20     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3ed24     5F BF 22 F6 |                 not     retval
3ed28     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3ed2c     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3ed30     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3ed34     5F BF 22 F6 |                 not     retval
3ed38     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ed3c                 | 
3ed3c     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3ed40     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3ed44     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ed48     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3ed4c     F8 01 B0 FD |                 call    #hpad_normalize
3ed50     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3ed54     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3ed58     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3ed5c     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3ed60     E4 01 B0 FD |                 call    #hpad_normalize
3ed64     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3ed68                 | 
3ed68     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ed6c     81 BF E6 FA |                 rdword  retval, ptrb[1]
3ed70     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ed74     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ed78     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ed7c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ed80     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ed84     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ed88     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3ed8c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ed90     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3ed94     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ed98     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3ed9c     05 16 47 F4 |                 bitc    hidr_buttons, #5
3eda0     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3eda4     08 16 47 F4 |                 bitc    hidr_buttons, #8
3eda8     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3edac     09 16 47 F4 |                 bitc    hidr_buttons, #9
3edb0     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3edb4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3edb8     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3edbc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3edc0     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3edc4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3edc8                 | 
3edc8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3edcc     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3edd0     7A BB 7A FF 
3edd4     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3edd8     F9 FF 7F FF 
3eddc     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3ede0     B9 71 5F F9 |                 altgn   htmp, #htmp1
3ede4     00 70 43 F8 |                 getnib  htmp
3ede8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3edec                 | 
3edec     AC 01 90 FD |                 jmp     #hpad_translate
3edf0                 | 
3edf0                 | '------------------------------------------------------------------------------
3edf0                 | ' Handle PS3 controller
3edf0                 | ' On entry:
3edf0                 | '   ptrb - controller report
3edf0                 | '------------------------------------------------------------------------------
3edf0                 | '   Default implementation translates the report to a pseudo-defacto hid
3edf0                 | '   standard and jumps to hpad_translate for actions.
3edf0                 | '   Implementors may take specific actions for this kind of controller.
3edf0                 | '------------------------------------------------------------------------------
3edf0                 | hpad_ps3
3edf0     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3edf4     01 70 0F F2 |                 cmp     htmp, #$01      wz
3edf8     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3edfc                 | 
3edfc                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3edfc                 | 
3edfc     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3ee00     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3ee04     40 01 B0 FD |                 call    #hpad_normalize
3ee08     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3ee0c     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3ee10     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3ee14     30 01 B0 FD |                 call    #hpad_normalize
3ee18     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3ee1c     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3ee20     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3ee24     20 01 B0 FD |                 call    #hpad_normalize
3ee28     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3ee2c     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3ee30     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3ee34     10 01 B0 FD |                 call    #hpad_normalize
3ee38     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ee3c     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3ee40     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3ee44                 | 
3ee44     08 8C 07 F6 |                 mov     hpar1, #8
3ee48     13 8E 07 F6 |                 mov     hpar2, #19
3ee4c     94 00 B0 FD |                 call    #hpad_getbits
3ee50                 | 
3ee50     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ee54     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ee58     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ee5c     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ee60     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ee64     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3ee68     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ee6c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ee70     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ee74     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3ee78     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ee7c     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3ee80     05 16 47 F4 |                 bitc    hidr_buttons, #5
3ee84     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3ee88     06 16 47 F4 |                 bitc    hidr_buttons, #6
3ee8c     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3ee90     07 16 47 F4 |                 bitc    hidr_buttons, #7
3ee94     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3ee98     08 16 47 F4 |                 bitc    hidr_buttons, #8
3ee9c     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3eea0     09 16 47 F4 |                 bitc    hidr_buttons, #9
3eea4     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3eea8     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3eeac     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3eeb0     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3eeb4     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3eeb8     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3eebc                 | 
3eebc     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3eec0     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3eec4     09 FA 79 FF 
3eec8     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3eecc     FF FA 7F FF 
3eed0     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3eed4     B9 71 5F F9 |                 altgn   htmp, #htmp1
3eed8     00 70 43 F8 |                 getnib  htmp
3eedc     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3eee0                 | 
3eee0     B8 00 90 FD |                 jmp     #hpad_translate
3eee4                 | 
3eee4                 | '------------------------------------------------------------------------------
3eee4                 | ' Read bits from report data buffer
3eee4                 | '------------------------------------------------------------------------------
3eee4                 | ' On entry:
3eee4                 | '   PTRB - report buffer
3eee4                 | '   hpar1 - start bit
3eee4                 | '   hpar2 - number of bits
3eee4                 | ' On exit:
3eee4                 | '   retval - bits
3eee4                 | '------------------------------------------------------------------------------
3eee4                 | hpad_getbits
3eee4     C6 71 03 F6 |                 mov     htmp, hpar1
3eee8     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3eeec     F9 71 03 F1 |                 add     htmp, ptrb
3eef0     B8 BF 02 FB |                 rdlong  retval, htmp
3eef4                 | 
3eef4     C6 73 03 F6 |                 mov     htmp1, hpar1
3eef8     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3eefc     B9 BF 42 F0 |                 shr     retval, htmp1
3ef00                 | 
3ef00     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3ef04     10 00 90 1D |         if_a    jmp     #.l1
3ef08                 | 
3ef08     C7 8F C3 F9 |                 decod   hpar2
3ef0c     01 8E 87 F1 |                 sub     hpar2, #1
3ef10     C7 BF 02 F5 |                 and     retval, hpar2
3ef14     2D 00 64 FD |                 ret
3ef18                 | .l1
3ef18     FF 7F 00 FF 
3ef1c     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3ef20     03 70 07 F1 |                 add     htmp, #3
3ef24     B8 75 03 FB |                 rdlong  htmp2, htmp
3ef28     18 8E 87 F1 |                 sub     hpar2, #24
3ef2c     C7 8F C3 F9 |                 decod   hpar2
3ef30     01 8E 87 F1 |                 sub     hpar2, #1
3ef34     B9 75 43 F0 |                 shr     htmp2, htmp1
3ef38     C7 75 03 F5 |                 and     htmp2, hpar2
3ef3c     18 74 67 F0 |                 shl     htmp2, #24
3ef40     BA BF 42 F5 |                 or      retval, htmp2
3ef44     2D 00 64 FD |                 ret
3ef48                 | 
3ef48                 | '------------------------------------------------------------------------------
3ef48                 | ' Normalize value to signed word (-32768 / 32767)
3ef48                 | '------------------------------------------------------------------------------
3ef48                 | ' On entry:
3ef48                 | '   retval - value to normalize
3ef48                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ef48                 | '   - or -
3ef48                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ef48                 | '   hidr_size - value bits length
3ef48                 | ' On exit:
3ef48                 | '   retval - normalized value
3ef48                 | '------------------------------------------------------------------------------
3ef48                 | hpad_normalize
3ef48     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ef4c     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ef50     2D 00 64 AD |         if_z    ret
3ef54     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ef58     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ef5c     0F 72 77 F7 |                 signx   htmp1, #15      wc
3ef60     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3ef64     00 BE 66 C7 |         if_c    signx   retval, #0-0
3ef68     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ef6c     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ef70     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ef74     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ef78     B8 71 53 F6 |                 abs     htmp            wc
3ef7c     1F BE 0E F4 |                 testb   retval, #31     wz
3ef80     5F BF 42 F6 |                 abs     retval
3ef84     B8 BF 12 FD |                 qdiv    retval, htmp
3ef88     18 BE 62 FD |                 getqx   retval
3ef8c     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ef90     C0 FF 7F FF 
3ef94     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ef98     2D 00 64 FD |                 ret
3ef9c                 | 
3ef9c                 | '------------------------------------------------------------------------------
3ef9c                 | ' Perform controller actions
3ef9c                 | ' On entry:
3ef9c                 | '    hidr_id        report id
3ef9c                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ef9c                 | '                      X = hidr_axis+0, #0
3ef9c                 | '                      Y = hidr_axis+0, #1
3ef9c                 | '                      Z = hidr_axis+1, #0
3ef9c                 | '                     RX = hidr_axis+1, #1
3ef9c                 | '                     RY = hidr_axis+2, #0
3ef9c                 | '                     RZ = hidr_axis+2, #1
3ef9c                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ef9c                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ef9c                 | '
3ef9c                 | '                     -------3 -------2 -------1 -------0 byte
3ef9c                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ef9c                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ef9c                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ef9c                 | '                                |||||| ||||++++--------- n. axes
3ef9c                 | '                                |||||| ++++------------- n. hats
3ef9c                 | '                                ++++++------------------ valid axes
3ef9c                 | '------------------------------------------------------------------------------
3ef9c                 | hpad_translate
3ef9c                 | 
3ef9c                 | 
3ef9c                 |         if HAVE_HIDPAD
3ef9c     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3efa0     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3efa4     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3efa8     01 70 E7 F2 |                 cmpsub  htmp,#1
3efac     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3efb0     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3efb4     2D 00 7C 3D |         if_ae   ret     wcz
3efb8     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3efbc     B8 F3 03 F1 |                 add     ptrb,htmp
3efc0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3efc4     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3efc8     28 0C 64 FD |                 setq    #7-1
3efcc     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3efd0                 |         end
3efd0                 | 
3efd0                 | 
3efd0                 |         if EMUPAD_MAX_PLAYER > 0
3efd0                 | .emupad_no_hat
3efd0                 |         if EMUPAD_BT0_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT1_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT2_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT3_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT4_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT5_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT6_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT7_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT8_BIT >= 0
3efd0                 |         end
3efd0                 |         if EMUPAD_BT9_BIT >= 0
3efd0                 |         end
3efd0                 | .emupad_slot_over
3efd0                 |         end
3efd0                 | 
3efd0                 |         if 0
3efd0                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3efd0                 | 
3efd0                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3efd0                 | 
3efd0                 |         end
3efd0     2D 00 64 FD |                 ret
3efd4                 | end
3efd4                 | 
3efd4                 | if EMUPAD_MAX_PLAYER > 0
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' Clear EmuPad state
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | emupad_reset
3efd4                 | 
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' Get EmuPad Player number for current device (into retval)
3efd4                 | ' Z flag is also set if current device is valid
3efd4                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | emupad_getnum
3efd4                 | .loop
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | emupad_discon
3efd4                 | .loop         
3efd4                 |         
3efd4                 |         ' FALL THROUGH!!!
3efd4                 | 
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' Update EmuPad reports (all of them...)
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | emupad_write_reports
3efd4                 | .devloop
3efd4                 | 
3efd4                 | end
3efd4                 | 
3efd4                 | 
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | ' On entry:
3efd4                 | ' On exit:
3efd4                 | '------------------------------------------------------------------------------
3efd4                 | hget_hub_status
3efd4     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3efd8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3efdc     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3efe0     01 90 2F F9 |                 setword hpar3, #1, #1
3efe4     CF 02 A0 FD |                 call    #do_int_in
3efe8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3efec     0C 00 90 AD |         if_z    jmp     #.data
3eff0     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3eff4     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3eff8     2D 00 64 FD |                 ret
3effc                 | .data
3effc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f000     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f004                 | 
3f004     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3f008     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3f00c     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3f010     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3f014                 |                 debug(ubin_long(hub_status_chg))
3f014                 | 
3f014     01 5A 06 F6 |                 mov     hdev_port, #1
3f018                 | .loop
3f018     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3f01c     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3f020     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3f024     F0 FF 9F 3D |         if_nc   jmp     #.loop
3f028     2D 00 64 FD |                 ret
3f02c                 | 
3f02c                 | hub_port_handler
3f02c     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3f030     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f034     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f038     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f03c     55 02 A0 FD |                 call    #control_read
3f040     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f044                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3f044                 | 
3f044     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3f048     50 01 90 5D |         if_x0   jmp     #.other
3f04c     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3f050     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3f054     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f058     A0 02 A0 FD |                 call    #control_write
3f05c     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3f060     7C 01 90 5D |         if_x0   jmp     #.disconnect
3f064     B0 99 02 F6 |                 mov     hctwait, _100ms_
3f068     EF 02 A0 FD |                 call    #poll_waitx
3f06c                 | 
3f06c     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3f070     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3f074     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f078     A0 02 A0 FD |                 call    #control_write
3f07c                 | 
3f07c     02 76 07 F6 |                 mov     htmp3, #2
3f080                 | .wait_reset
3f080     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f084     EF 02 A0 FD |                 call    #poll_waitx
3f088     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f08c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f090     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f094     55 02 A0 FD |                 call    #control_read
3f098     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3f09c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3f0a0     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3f0a4                 | 
3f0a4     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3f0a8     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3f0ac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f0b0     A0 02 A0 FD |                 call    #control_write
3f0b4                 | 
3f0b4     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3f0b8                 | .wait_recover
3f0b8     A7 99 02 F6 |                 mov     hctwait, _1ms_
3f0bc     EF 02 A0 FD |                 call    #poll_waitx
3f0c0     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3f0c4                 | 
3f0c4     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f0c8     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3f0cc     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3f0d0                 | 
3f0d0     00 08 00 FF 
3f0d4     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3f0d8     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3f0dc     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3f0e0     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3f0e4     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3f0e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f0ec     48 01 90 5D |         if_nz   jmp     #.done
3f0f0                 | .get_dev_desc
3f0f0     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3f0f4     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3f0f8     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3f0fc     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3f100     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3f104     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3f108     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3f10c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f110     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f114     AC 99 02 F6 |                 mov     hctwait, _8ms_
3f118     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3f11c     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3f120     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3f124     BE 00 A0 FD |                 call    #calc_crc5
3f128     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3f12c     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3f130     F7 AD C2 FA |                 rdbyte  total_data, pb
3f134     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3f138     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3f13c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f140     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3f144     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3f148     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3f14c                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3f14c     9F 99 02 F6 |                 mov     hctwait, _500us_
3f150     EF 02 A0 FD |                 call    #poll_waitx
3f154     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3f158     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3f15c     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3f160     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3f164     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f168     CC 00 90 5D |         if_nz   jmp     #.done
3f16c     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3f170     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3f174     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3f178     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3f17c     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3f180     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3f184     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3f188     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3f18c     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3f190     A4 00 90 CD |         if_b    jmp     #.done
3f194     70 F0 BF FD |                 call    #hparse_con_desc
3f198     9C 00 90 FD |                 jmp     #.done
3f19c                 | 
3f19c                 | .other
3f19c     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3f1a0     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3f1a4     28 00 90 AD |         if_x1   jmp     #.reset_feature
3f1a8     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3f1ac     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3f1b0     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3f1b4     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3f1b8     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3f1bc     10 00 90 AD |         if_x1   jmp     #.reset_feature
3f1c0     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3f1c4     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3f1c8     04 00 90 AD |         if_x1   jmp     #.reset_feature
3f1cc     68 00 90 FD |                 jmp     #.done
3f1d0                 | .reset_feature
3f1d0     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3f1d4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f1d8     A0 02 A0 FD |                 call    #control_write
3f1dc     58 00 90 FD |                 jmp     #.done
3f1e0                 | .disconnect
3f1e0                 | 
3f1e0     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f1e4     00 70 E3 F8 |                 getbyte htmp
3f1e8     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3f1ec     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3f1f0     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3f1f4     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3f1f8     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3f1fc     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3f200                 |         if EMUPAD_MAX_PLAYER > 0
3f200                 |         end
3f200                 |         if HAVE_MOUSE
3f200     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3f204     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3f208     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3f20c                 |         end
3f20c                 |         if HAVE_HIDPAD
3f20c     14 0A F0 FE |                 loc ptrb,#hidpad_report
3f210     2D 71 03 F6 |                 mov htmp,hdev_port
3f214     01 70 E7 F2 |                 cmpsub htmp,#1
3f218     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3f21c     B8 F3 03 F1 |                 add ptrb,htmp
3f220     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3f224     80 01 6C FC |                 wrlong #0,ptrb
3f228                 |         end
3f228                 | 
3f228     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f22c     00 00 C4 F8 |                 setbyte #0
3f230     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f234     00 00 04 F6 |                 mov     0-0, #0
3f238                 | 
3f238                 | .done
3f238     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3f23c     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3f240     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3f244     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3f248     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3f24c     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3f250                 | 
3f250     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3f254     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f258     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3f25c     55 02 A0 FD |                 call    #control_read
3f260     00 69 06 FB |                 rdlong  hub_port_status, ptra
3f264                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3f264     2D 00 64 FD |                 ret
3f268                 | 
3f268                 | '------------------------------------------------------------------------------
3f268                 | ' Partially populated SETUP packets
3f268                 | '------------------------------------------------------------------------------
3f268     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3f269     06          |                 byte    REQ_GET_DESC
3f26a     00 01       |                 word    TYPE_DEVICE << 8
3f26c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f26e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f270     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3f271     06          |                 byte    REQ_GET_DESC
3f272     00 02       |                 word    TYPE_CONFIG << 8
3f274     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f276     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f278     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3f279     09          |                 byte    REQ_SET_CONFIG
3f27a     00 00       |                 word    0       ' Configuration value
3f27c     00 00       |                 word    0       ' Zero
3f27e     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3f280     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3f281     05          |                 byte    REQ_SET_ADDR
3f282     00 00       |                 word    0       ' Zero
3f284     00 00       |                 word    0       ' Zero
3f286     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3f288                 | '------------------------------------------------------------------------------
3f288                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3f288                 | ' wValue field dictates which protocol should be used.
3f288                 | '
3f288                 | ' When initialized, all devices default to report protocol. However the host
3f288                 | ' should not make any assumptions about the device state and should set the
3f288                 | ' desired protocol whenever initializing a device.
3f288                 | '------------------------------------------------------------------------------
3f288     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f289     0B          |                 byte    HID_SET_PROTO
3f28a     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3f28c                 |                                                 ' (HID 1.11 Section 7.2.6).
3f28c     00 00       |                 word    0               ' Interface index number.
3f28e     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3f290                 | '------------------------------------------------------------------------------
3f290     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f291     0A          |                 byte    HID_SET_IDLE
3f292     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3f294                 |                                         ' reporting until a change is detected in the report data
3f294                 | 
3f294                 |                                         ' (HID 1.11 Section 7.2.4).
3f294     00 00       |                 word    0       ' Interface index number.
3f296     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3f298     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3f299     09          |                 byte    HID_SET_REPORT
3f29a     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3f29c                 |                                         ' (HID 1.11 Section 7.2.2).
3f29c     00 00       |                 word    0       ' Interface index number.
3f29e     00 00       |                 word    0       ' Size of the report, in bytes.
3f2a0     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3f2a1     06          |                 byte    REQ_GET_DESC
3f2a2     00 22       |                 word    TYPE_REPORT << 8
3f2a4     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f2a6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f2a8                 | '------------------------------------------------------------------------------
3f2a8     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3f2a9     06          |                 byte    REQ_GET_DESC
3f2aa     00 29       |                 word    TYPE_HUB << 8
3f2ac     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3f2ae     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f2b0     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3f2b1     03          |                 byte    REQ_SET_FEATURE
3f2b2     00 00       |                 word    0       ' port power
3f2b4     01 00       |                 word    1       ' Port index number (1+)
3f2b6     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f2b8     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3f2b9     01          |                 byte    REQ_CLEAR_FEATURE
3f2ba     00 00       |                 word    0       ' port power
3f2bc     01 00       |                 word    1       ' Port index number (1+)
3f2be     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3f2c0     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3f2c1     00          |                 byte    REQ_GET_STATUS
3f2c2     00 00       |                 word    0
3f2c4     01 00       |                 word    1       ' Port index number (1+)
3f2c6     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3f2c8                 | '------------------------------------------------------------------------------
3f2c8                 | if _HAVE_GAMEPAD
3f2c8     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3f2cc                 | ps3_command_buff
3f2cc     00 00 00 00 
3f2d0     00          |                 byte    $00, $00, $00, $00, $00
3f2d1     00 00 00 00 
3f2d5     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3f2d6     FF 27 10 00 
3f2da     32          |                 byte    $FF, $27, $10, $00, $32
3f2db     FF 27 10 00 
3f2df     32          |                 byte    $FF, $27, $10, $00, $32
3f2e0     FF 27 10 00 
3f2e4     32          |                 byte    $FF, $27, $10, $00, $32
3f2e5     FF 27 10 00 
3f2e9     32          |                 byte    $FF, $27, $10, $00, $32
3f2ea     00 00 00 00 
3f2ee     00          |                 byte    $00, $00, $00, $00, $00
3f2ef     00 00 00 00 
3f2f3     00          |                 byte    $00, $00, $00, $00, $00
3f2f4     00 00 00 00 
3f2f8     00          |                 byte    $00, $00, $00, $00, $00
3f2f9     00 00 00    |                 byte    $00, $00, $00
3f2fc                 | '------------------------------------------------------------------------------
3f2fc     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3f2ff                 |                                         ' 0x01 All blinking
3f2ff                 |                                         ' 0x02 1 flashes, then on
3f2ff                 |                                         ' 0x03 2 flashes, then on
3f2ff                 |                                         ' 0x04 3 flashes, then on
3f2ff                 |                                         ' 0x05 4 flashes, then on
3f2ff                 |                                         ' 0x06 1 on
3f2ff                 |                                         ' 0x07 2 on
3f2ff                 |                                         ' 0x08 3 on
3f2ff                 |                                         ' 0x09 4 on
3f2ff                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3f2ff                 |                                         ' 0x0B Blinking*
3f2ff                 |                                         ' 0x0C Slow blinking*
3f2ff                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3f2ff     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3f302     00          |                 byte    $00             ' Left rumble
3f303     00          |                 byte    $00             ' Right rumble
3f304     00 00 00    |                 byte    $00, $00, $00
3f307     00          | end
3f308                 | alignl
3f308                 | 
3f308                 | if HAVE_MOUSE
3f308     00 00 00 00 
3f30c     00 00 00 00 | mouse_limits long 0[2]
3f310     00 00 00 00 | mouse_outptr long 0
3f314                 | end
3f314                 | 
3f314                 | if KEYQUEUE_SIZE > 0
3f314     00          | keyq_head byte 0
3f315     00          | keyq_tail byte 0
3f316     00 00 00 00 
      ...             
3f512     00 00 00 00 
3f516     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3f518                 | alignl
3f518                 | end
3f518                 | 
3f518                 | if EMUPAD_MAX_PLAYER > 0
3f518                 | emupad_rule_buffer
3f518                 | if EMUPAD_BUILTIN_RULES
3f518                 | file "padmap_builtin.dat"
3f518                 | end
3f518                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3f518                 | '' Default rule directly follows!
3f518                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3f518                 | end
3f518                 | 
3f518                 | '------------------------------------------------------------------------------
3f518                 | ' The USB data cache area gets zero-filled at every device disconnect
3f518                 | '------------------------------------------------------------------------------
3f518                 | usb_cache_start
3f518                 | 
3f518                 | ' HID descriptor and report buffers
3f518                 | if !!OVERLAP_MEMORY
3f518     00 00 00 00 
      ...             
3fc10     00 00 00 00 
3fc14     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3fc18                 | end
3fc18     00 00 00 00 
3fc1c     00 00 00 00 | hkbd_report     byte    0[8]
3fc20     00 00 00 00 | hkbd_led_rep    byte    0
3fc24                 | alignl
3fc24                 | 
3fc24                 | if HAVE_HIDPAD
3fc24     00 00 00 00 
      ...             
3fce0     00 00 00 00 
3fce4     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3fce8                 | end
3fce8                 | 
3fce8                 | ' HUB descriptor
3fce8     00          | hub_descr       byte    0   ' bDescLength
3fce9     00          |                 byte    0   ' bDescriptorType
3fcea     00          |                 byte    0   ' bNbrPorts
3fceb     00 00       |                 word    0   ' wHubCharacteristics
3fced     00          |                 byte    0   ' bPwrOn2PwrGood
3fcee     00          |                 byte    0   ' bHubContrCurrent
3fcef     00          |                 byte    0   ' DeviceRemoveable
3fcf0     00          |                 byte    0   ' PortPwrCtrlMask
3fcf1                 | 
3fcf1                 | usb_cache_end
3fcf1                 | 
3fcf1                 | if HAVE_MOUSE
3fcf1     00 00 00 00 | mouse_xacc      long 0
3fcf5     00 00 00 00 | mouse_yacc      long 0
3fcf9     00 00 00 00 | mouse_zacc      long 0
3fcfd     00          | mouse_bstate    byte 0
3fcfe     00          | mouse_lpending  byte 0
3fcff     00          | mouse_rpending  byte 0
3fd00     00          | mouse_mpending  byte 0
3fd01     00          | mouse_lock      byte 0
3fd02     00 00 00    |                 byte 0[3] ' padding
3fd05                 | end
3fd05                 | 
3fd05     00 00 00 00 
      ...             
3fd7d     00 00 00 00 
3fd81     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3fd85     00 00 00 00 
3fd89     00 00 00 00 
3fd8d     00 00 00 00 
3fd91     00 00 00 00 
3fd95     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3fd97     00 00 00 00 
      ...             
3fe8f     00 00 00 00 
3fe93     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3fe97                 | 
3fe97     00          | driver_cog      byte    0                       ' Current driver cog + 1
3fe98                 | 	alignl
3fe98                 | _audio096_spin2_dat_
3fe98                 | 
3fe98                 | audio       org     0
3fe98                 | 
3fe98     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3fe9c     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3fea0     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3fea4                 |  
3fea4     01 EC 63 FD |             cogid   pa                   ' compute cogid
3fea8     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3feac     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3feb0     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3feb4                 | 
3feb4     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3feb8     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3febc     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3fec0     0F 24 06 FC |             wrpin   dac2,#right
3fec4     0F 00 1E FC |             wxpin   #256,#right    
3fec8     41 9C 64 FD |             dirh    #left addpins 1
3fecc     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3fed0     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3fed4     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3fed8                 |             
3fed8                 | '---------------------------------------------------------------------------------        
3fed8                 | '----------------- The main loop -------------------------------------------------
3fed8                 | '---------------------------------------------------------------------------------
3fed8                 | 
3fed8     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3fedc     10 00 90 CD |       if_c  jmp     #loop1
3fee0                 |   
3fee0     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3fee4     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3fee8     D5 00 80 F1 |             sub     0-0,a40000000
3feec     FD 01 6E FB |             djnz    cn,#p402
3fef0                 |     
3fef0     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3fef4     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3fef8     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3fefc     01 00 06 C6 |     if_c    mov     cn,#1
3ff00     DA 02 3A F3 |             fle     ct,time3 wcz
3ff04     02 00 06 C6 |     if_c    mov     cn,#2     
3ff08     DB 02 3A F3 |             fle     ct,time4 wcz
3ff0c     03 00 06 C6 |     if_c    mov     cn,#3
3ff10     DC 02 3A F3 |             fle     ct,time5 wcz
3ff14     04 00 06 C6 |     if_c    mov     cn,#4
3ff18     DD 02 3A F3 |             fle     ct,time6 wcz
3ff1c     05 00 06 C6 |     if_c    mov     cn,#5
3ff20     DE 02 3A F3 |             fle     ct,time7 wcz
3ff24     06 00 06 C6 |     if_c    mov     cn,#6
3ff28     DF 02 3A F3 |             fle     ct,time8 wcz
3ff2c     07 00 06 C6 |     if_c    mov     cn,#7
3ff30                 | 
3ff30                 | 
3ff30                 | '----------------------------------------------------------------------------------
3ff30                 | '------------- Compute channel samples --------------------------------------------
3ff30                 | '----------------------------------------------------------------------------------
3ff30                 | 
3ff30                 | 
3ff30     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3ff34     06 C0 65 F0 |             shl     channeladd,#6
3ff38     E0 F0 03 F1 |             add     ptra,channeladd
3ff3c                 | 
3ff3c     28 16 64 FD |             setq    #11                        	' read parameters
3ff40     00 D7 05 FB |             rdlong  pointer0,ptra
3ff44                 |     	    
3ff44     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3ff48     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3ff4c     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3ff50     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3ff54     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3ff58     00 C4 0D F2 |             cmp     qq,#0 wz                         
3ff5c     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3ff60     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3ff64                 |             
3ff64     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3ff68     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3ff6c     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3ff70                 | 
3ff70     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3ff74     EC 08 3A F9 |             getword oldrs,sample0,#1
3ff78     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3ff7c     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3ff80     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3ff84     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3ff88                 | 
3ff88     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3ff8c     00 04 02 F6 |             mov     dt0,0-0    
3ff90     D7 04 82 F1 |             sub     dt0,time0
3ff94                 |             
3ff94     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3ff98     FB 00 00 F1 |             add     0-0,afreq0  	
3ff9c                 |             
3ff9c                 | '---- envelopes
3ff9c                 |             
3ff9c     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3ffa0     20 00 00 AF 
3ffa4     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3ffa8     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3ffac                 | 
3ffac     FB 48 02 F6 |             mov     envs1,afreq0
3ffb0     F5 48 02 FA |             mul     envs1,envspd0
3ffb4     24 E7 01 F1 |             add     envph0,envs1 
3ffb8                 | 
3ffb8     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3ffbc     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3ffc0     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3ffc4     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3ffc8     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3ffcc     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3ffd0     00 46 06 36 |     if_ge   mov     envlo,#0
3ffd4     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3ffd8     16 E6 65 30 |     if_ge   shl     envph0,#22
3ffdc                 | 
3ffdc     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3ffe0     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3ffe4     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3ffe8     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3ffec     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3fff0     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3fff4     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3fff8     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3fffc     23 49 02 FA |             mul     envs1,envlo
40000     25 49 02 F1 |             add     envs1,envs2
40004     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40008                 |             
40008     1B DA 0D F4 | p410        testb   sstart0, #27 wz
4000c     1B C6 61 AD |     if_z    getrnd  spl
40010     58 00 90 AD |     if_z    jmp     #p406
40014                 |  
40014     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40018     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
4001c     08 D6 45 F0 |             shr     pointer0,#8
40020                 |          
40020     1F DA 0D F4 |             testb   sstart0,#31 wz            
40024     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40028     1C DA 0D F4 |             testb   sstart0,#28 wz            
4002c     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40030                 |         
40030     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40034     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40038     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
4003c                 |             
4003c     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40040     ED C4 01 F1 |             add     qq,sstart0            
40044                 | 
40044     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
40048     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
4004c     1C 01 B0 1D |     if_gt   call    #cache_read
40050                 |          
40050     1F DA 0D F4 |             testb   sstart0,#31 wz 
40054     08 C6 65 50 |     if_nz   shl     spl,#8
40058     08 D6 65 50 |     if_nz   shl     pointer0,#8
4005c     07 D6 65 A0 |     if_z    shl     pointer0,#7
40060     1C DA 0D F4 |             testb   sstart0,#28 wz            
40064     01 D6 45 A0 |     if_z    shr     pointer0,#1    
40068     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
4006c                 | 
4006c                 | 
4006c     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
40070     00 C6 01 F6 |             mov     spl,0-0
40074     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
40078     00 C6 01 F6 |             mov     spl,0-0
4007c                 | 
4007c     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
40080     00 0A 02 F6 |             mov     ls0,0-0
40084     20 00 00 FF 
40088     00 C4 05 F6 |             mov     qq,##16384
4008c     FE C4 81 F1 |             sub     qq,apan0
40090     E2 C6 31 FA |             scas    spl,qq
40094     00 0C 02 F6 |             mov     rs0, 0-0
40098                 | 
40098     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
4009c     06 11 02 F1 |             add     rs,rs0
400a0     03 0F 82 F1 |             sub     ls,oldls
400a4     05 0F 02 F1 |             add     ls,ls0
400a8                 |    
400a8     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
400ac     05 D9 21 F9 |             setword sample0,ls0,#0
400b0                 |             
400b0     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
400b4     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
400b8     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
400bc                 |   '  if_z    mov     sample0,#0
400bc     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
400c0     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
400c4     04 00 00 AF 
400c8     00 B0 05 A1 |     if_z    add     time1,##2048
400cc     D8 B2 01 A6 |     if_z    mov     time2,time1
400d0     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
400d4                 | 
400d4     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
400d8     00 D7 65 FC |             wrlong  pointer0,ptra
400dc     08 E7 65 FC |             wrlong  envph0,ptra[8]
400e0     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
400e4                 |                       
400e4     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
400e8     FF C3 25 A7 |     if_z    decmod  front, #511          
400ec                 |          
400ec     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
400f0     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
400f4     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
400f8     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
400fc                 | 	    
400fc                 | 		    
400fc     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
40100     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
40104     04 15 02 F6 |             mov     newsample, oldrs       
40108                 | 
40108     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
4010c     02 AF 01 F1 |             add     time0,dt0    
40110                 |                                      
40110     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
40114     D8 FD 9F AD |     if_z    jmp     #loop1
40118     02 C5 01 F6 |             mov     qq,dt0
4011c                 | 
4011c                 |     
4011c                 |             
4011c     01 4E 36 F0 | p301        rol     dropper,#1 wc
40120     40 00 90 3D |     if_nc   jmp     #p399
40124     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
40128     00 C2 9D F2 |             cmpr    front, #0-0 wcz
4012c     F4 FF 9F AD |     if_e    jmp     #p398   
40130                 | 		
40130     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40134     20 00 90 AD |     if_z    jmp     #p302	   
40138                 |   
40138     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
4013c     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
40140     02 1E 66 C0 |     if_c    shl     scptr2,#2
40144     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
40148     60 1E 66 FC |             wrlong  scptr2,#$60
4014c     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
40150     01 00 00 CF 
40154     7F 1C 06 C7 |     if_c    incmod  scptr,##639
40158                 | 			    
40158     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
4015c     00 00 00 FF 
40160     FF C3 05 F7 |             incmod  front, ##511
40164     ED C5 6D FB | p399        djnz    qq,#p301
40168                 |             
40168     6C FD 9F FD |             jmp     #loop            'loop
4016c                 | 
4016c                 | '----------------------------------------------------------------------------------
4016c                 | '------------- This is the end of the main loop -----------------------------------
4016c                 | '----------------------------------------------------------------------------------
4016c                 | 
4016c                 | '----------------------------------------------------------------------------------
4016c                 | '------------- PSRAM cache ----------- --------------------------------------------
4016c                 | '----------------------------------------------------------------------------------
4016c                 | 
4016c                 | ' There are 8 cache pointers for 8 channels
4016c                 | ' if 24 higher bits of address=cache, then get a word from the cache
4016c                 | ' else load the cache from PSRAM, update the pointer, then read a sample
4016c                 | 
4016c                 | 
4016c     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
40170                 |             
40170     E2 40 02 F6 | 	    mov     addrhi,qq		
40174     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
40178     14 01 96 F9 | 	    alts    cn,#cache1            
4017c     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
40180     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
40184                 | 	
40184     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
40188     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
4018c     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
40190     08 38 66 F0 | 	    shl     cmd,#8
40194     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
40198     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
4019c     08 3A 66 F0 |             shl     hubaddr,#8                  '
401a0     13 3B 02 F1 |             add     hubaddr,hubptr 
401a4     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
401a8     28 04 64 FD |             setq    #2                          ' write 3 longs
401ac     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
401b0     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
401b4     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
401b8                 |             
401b8                 | 	
401b8     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
401bc     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
401c0     13 C5 01 F1 | 	    add     qq,hubptr
401c4     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
401c8     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
401cc                 |           
401cc                 | 
401cc                 | '--------------------------------------------------------------------------
401cc                 | '------ Interrupt service -------------------------------------------------
401cc                 | '------ Output the sample, get the next one if exists ---------------------
401cc                 | '--------------------------------------------------------------------------
401cc                 | 
401cc     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
401d0     0F D0 25 FC |             wypin   rsample,#right       '4
401d4     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
401d8     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
401dc     FF F3 07 57 |     if_ne   incmod  ptrb,#511
401e0     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
401e4     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
401e8                 |     
401e8     F5 FF 3B FB |             reti1                        '17/19 
401ec                 |           
401ec                 | '---------------------------------------------------------------------------
401ec                 | '-------- End of interrupt -------------------------------------------------
401ec                 | '---------------------------------------------------------------------------    
401ec                 | 
401ec                 | 
401ec                 | '---------------------------------------------------------------------------
401ec                 | '------- Variables ---------------------------------------------------------
401ec                 | '---------------------------------------------------------------------------
401ec                 | 
401ec                 | ' constants
401ec                 | 
401ec     00 00 00 40 | a40000000   long $40000000
401f0     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
401f4                 | 
401f4                 | ' Time variables
401f4                 | 
401f4     00 00 00 00 | time0       long 0    ' Global sample computing time
401f8     01 00 00 00 | time1       long 1    ' Local channels time
401fc     02 00 00 00 | time2       long 2
40200     03 00 00 00 | time3       long 3
40204     04 00 00 00 | time4       long 4
40208     05 00 00 00 | time5       long 5
4020c     06 00 00 00 | time6       long 6
40210     07 00 00 00 | time7       long 7
40214     08 00 00 00 | time8       long 8
40218                 | 
40218     00 00 00 00 | channeladd long 0
4021c                 | 
4021c     00 00 00 00 | front       long 0
40220                 | 
40220                 | ' temporary variables 
40220     00 00 00 00 | qq          long 0
40224     00 00 00 00 | spl         long 0
40228     00 00 00 00 | zero        long 0
4022c     00 00 00 00 | mailbox     long 0
40230     00 00 00 00 | mailbox2 long 0
40234                 | 
40234                 | ' Interrupt ISR variables
40234                 | 
40234     00 00 00 00 | lsample     long 0
40238     00 00 00 00 | rsample     long 0
4023c     00 00 00 00 | lsnext      long 0
40240     00 00 00 00 | rsnext      long 0 
40244                 | 
40244                 | ' channel parameter block
40244                 | 
40244     00 00 00 00 | pointer0    long 0     
40248     00 00 00 00 | sample0     long 0
4024c     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40250     00 00 00 00 | lstart0     long 0
40254     00 00 00 00 | lend0       long 0
40258     00 00 00 00 | volpan0     long 0
4025c     00 00 00 00 | freqskip0   long 0
40260     00 00 00 00 | command0    long 0
40264     00 00 00 00 | envph0	    long 0
40268     00 00 00 00 | envptr0	    long 0
4026c     00 00 00 00 | envspd0	    long 0
40270     00 00 00 00 | envlen0	    long 0
40274     00 00 00 00 | res5	    long 0
40278     00 00 00 00 | res6	    long 0
4027c     00 00 00 00 | res7	    long 0
40280     00 00 00 00 | res8	    long 0
40284                 | 
40284     00 00 00 00 | afreq0      long 0
40288     00 00 00 00 | askip0      long 0
4028c     00 00 00 00 | avol0       long 0
40290     00 00 00 00 | apan0       long 0
40294                 | 
40294     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
40298     00 00 00 00 | cn          long 0
4029c     00 00 00 00 | ct          long 0
402a0     00 00 00 00 | dt0         long 0
402a4                 | 
402a4                 | ' Samples
402a4     00 00 00 00 | oldls       long 0
402a8     00 00 00 00 | oldrs       long 0
402ac                 | 
402ac     00 00 00 00 | ls0         long 0
402b0     00 00 00 00 | rs0         long 0
402b4                 | 
402b4     00 00 00 00 | ls          long 0    
402b8     00 00 00 00 | rs          long 0
402bc                 | 
402bc     00 00 00 00 | oldsample   long 0
402c0     00 00 00 00 | newsample   long 0
402c4                 | 
402c4     00 00 00 00 | nrsample    long 0
402c8     00 00 00 00 | nlsample    long 0
402cc                 | 
402cc     00 00 00 00 | scbase long 0
402d0     00 00 00 00 | scptr long 0
402d4     00 00 00 00 | scptr2 long 0
402d8     00 00 00 00 | scope long 0
402dc                 | 
402dc     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
402e0     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
402e4                 | 
402e4     00 18 07 00 | hubptr      long $71800
402e8     00 00 00 00 | cache1      long 0
402ec     00 00 00 00 | cache2      long 0
402f0     00 00 00 00 | cache3      long 0
402f4     00 00 00 00 | cache4      long 0
402f8     00 00 00 00 | cache5      long 0
402fc     00 00 00 00 | cache6      long 0
40300     00 00 00 00 | cache7      long 0
40304     00 00 00 00 | cache8      long 0
40308                 | 
40308                 | 
40308     00 00 00 00 | cmd         long 0
4030c     00 00 00 00 | hubaddr     long 0
40310     00 01 00 00 | count       long 256
40314     00 00 00 00 | addrlo long 0
40318     00 00 00 00 | addrhi long 0
4031c     00 00 00 00 | pointer00 long 0
40320     00 00 00 00 | envhi long 0
40324     00 00 00 00 | envlo long 0
40328     00 00 00 00 | envs1 long 0
4032c     00 00 00 00 | envs2 long 0
40330     00 00 00 00 | noise0 long 0
40334     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
40338     00 00 00 00 
4033c     00 00 00 00 | null  			long 	0,0           ' for channel reset
40340                 | 	alignl
40340                 | __system__dat_
40340     00 00 00 00 
40344     00 00 00 00 | 	byte	$00[8]
40348     03 00 00 00 
4034c     00 00 00 00 
40350     00 00 00 00 
40354     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40358     00 00 00 00 
      ...             
405e4     00 00 00 00 
405e8     00 00 00 00 | 	byte	$00[660]
405ec     00 00 50 0A | 	long	(165 {__system____root_opendir})<<20
405f0     00 00 60 0A | 	long	(166 {__system____root_closedir})<<20
405f4     00 00 70 0A | 	long	(167 {__system____root_readdir})<<20
405f8     00 00 80 0A | 	long	(168 {__system____root_stat})<<20
405fc     00 00 00 00 
40600     00 00 00 00 
40604     00 00 00 00 
40608     00 00 00 00 
4060c     00 00 00 00 
40610     00 00 00 00 
40614     00 00 00 00 | 	byte	$00[28]
40618     80 06 04 00 | 	long	@@@__system__dat_ + 832
4061c     83 06 04 00 | 	long	@@@__system__dat_ + 835
40620     A4 06 04 00 | 	long	@@@__system__dat_ + 868
40624     BD 06 04 00 | 	long	@@@__system__dat_ + 893
40628     D8 06 04 00 | 	long	@@@__system__dat_ + 920
4062c     F2 06 04 00 | 	long	@@@__system__dat_ + 946
40630     02 07 04 00 | 	long	@@@__system__dat_ + 962
40634     14 07 04 00 | 	long	@@@__system__dat_ + 980
40638     26 07 04 00 | 	long	@@@__system__dat_ + 998
4063c     38 07 04 00 | 	long	@@@__system__dat_ + 1016
40640     44 07 04 00 | 	long	@@@__system__dat_ + 1028
40644     55 07 04 00 | 	long	@@@__system__dat_ + 1045
40648     69 07 04 00 | 	long	@@@__system__dat_ + 1065
4064c     73 07 04 00 | 	long	@@@__system__dat_ + 1075
40650     83 07 04 00 | 	long	@@@__system__dat_ + 1091
40654     92 07 04 00 | 	long	@@@__system__dat_ + 1106
40658     A8 07 04 00 | 	long	@@@__system__dat_ + 1128
4065c     C1 07 04 00 | 	long	@@@__system__dat_ + 1153
40660     D5 07 04 00 | 	long	@@@__system__dat_ + 1173
40664     E3 07 04 00 | 	long	@@@__system__dat_ + 1187
40668     F7 07 04 00 | 	long	@@@__system__dat_ + 1207
4066c     03 08 04 00 | 	long	@@@__system__dat_ + 1219
40670     15 08 04 00 | 	long	@@@__system__dat_ + 1237
40674     2D 08 04 00 | 	long	@@@__system__dat_ + 1261
40678     3F 08 04 00 | 	long	@@@__system__dat_ + 1279
4067c     52 08 04 00 | 	long	@@@__system__dat_ + 1298
40680     4F 4B 00 4E 
40684     75 6D 65 72 
40688     69 63 61 6C 
4068c     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
40690     75 6D 65 6E 
40694     74 20 6F 75 
40698     74 20 6F 66 
4069c     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
406a0     61 69 6E 00 
406a4     52 65 73 75 
406a8     6C 74 20 6E 
406ac     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
406b0     65 70 72 65 
406b4     73 65 6E 74 
406b8     61 62 6C 65 
406bc     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
406c0     65 67 61 6C 
406c4     20 6D 75 6C 
406c8     74 69 62 79 
406cc     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
406d0     65 71 75 65 
406d4     6E 63 65 00 
406d8     4E 6F 20 73 
406dc     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
406e0     66 69 6C 65 
406e4     20 6F 72 20 
406e8     64 69 72 65 
406ec     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
406f0     79 00 42 61 
406f4     64 20 66 69 
406f8     6C 65 20 6E 
406fc     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
40700     72 00 50 65 
40704     72 6D 69 73 
40708     73 69 6F 6E 
4070c     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
40710     69 65 64 00 
40714     4E 6F 74 20 
40718     65 6E 6F 75 
4071c     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
40720     65 6D 6F 72 
40724     79 00 54 65 
40728     6D 70 6F 72 
4072c     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
40730     66 61 69 6C 
40734     75 72 65 00 
40738     46 69 6C 65 
4073c     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
40740     73 74 73 00 
40744     49 6E 76 61 
40748     6C 69 64 20 
4074c     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
40750     6D 65 6E 74 
40754     00 54 6F 6F 
40758     20 6D 61 6E 
4075c     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
40760     65 6E 20 66 
40764     69 6C 65 73 
40768     00 49 2F 4F 
4076c     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
40770     6F 72 00 4E 
40774     6F 74 20 61 
40778     20 64 69 72 
4077c     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
40780     72 79 00 49 
40784     73 20 61 20 
40788     64 69 72 65 
4078c     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
40790     79 00 52 65 
40794     61 64 20 6F 
40798     6E 6C 79 20 
4079c     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
407a0     20 73 79 73 
407a4     74 65 6D 00 
407a8     46 75 6E 63 
407ac     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
407b0     20 6E 6F 74 
407b4     20 69 6D 70 
407b8     6C 65 6D 65 
407bc     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
407c0     00 44 69 72 
407c4     65 63 74 6F 
407c8     72 79 20 6E 
407cc     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
407d0     6D 70 74 79 
407d4     00 4E 61 6D 
407d8     65 20 74 6F 
407dc     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
407e0     6E 67 00 44 
407e4     65 76 69 63 
407e8     65 20 6E 6F 
407ec     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
407f0     65 6B 61 62 
407f4     6C 65 00 42 
407f8     61 64 20 61 
407fc     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
40800     73 73 00 42 
40804     72 6F 6B 65 
40808     6E 20 63 6F 
4080c     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
40810     74 69 6F 6E 
40814     00 44 65 76 
40818     69 63 65 20 
4081c     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
40820     65 73 6F 75 
40824     72 63 65 20 
40828     62 75 73 79 
4082c     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
40830     73 73 20 64 
40834     65 76 69 63 
40838     65 20 6C 69 
4083c     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
40840     6F 20 73 70 
40844     61 63 65 20 
40848     6F 6E 20 64 
4084c     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
40850     65 00 55 6E 
40854     6B 6E 6F 77 
40858     6E 20 65 72 
4085c     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
40860     00 00 00 00 
40864     00 00 00 00 
40868     00 00 00 00 | 	byte	$00[12]
4086c     05 00 00 00 
40870     00 00 00 00 
40874     00 00 00 00 
40878     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
4087c     00 00 00 00 | 	byte	$00, $00, $00, $00
40880     00 00 D0 0B | 	long	(189 {__system___tx})<<20
40884     00 00 E0 0B | 	long	(190 {__system___rx})<<20
40888     00 00 00 00 | 	byte	$00, $00, $00, $00
4088c     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0765})<<20
40890     00 00 00 0C | 	long	(192 {__system____dummy_flush_0766})<<20
40894     00 00 00 00 
40898     00 00 00 00 | 	byte	$00[8]
4089c     01 00 00 00 
408a0     06 00 00 00 
408a4     00 00 00 00 
408a8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
408ac     00 00 00 00 
408b0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
408b4     00 00 D0 0B | 	long	(189 {__system___tx})<<20
408b8     00 00 E0 0B | 	long	(190 {__system___rx})<<20
408bc     00 00 00 00 | 	byte	$00, $00, $00, $00
408c0     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0765})<<20
408c4     00 00 00 0C | 	long	(192 {__system____dummy_flush_0766})<<20
408c8     00 00 00 00 
408cc     00 00 00 00 | 	byte	$00[8]
408d0     01 00 00 00 
408d4     06 00 00 00 
408d8     00 00 00 00 
408dc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
408e0     00 00 00 00 
408e4     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
408e8     00 00 D0 0B | 	long	(189 {__system___tx})<<20
408ec     00 00 E0 0B | 	long	(190 {__system___rx})<<20
408f0     00 00 00 00 | 	byte	$00, $00, $00, $00
408f4     00 00 F0 0B | 	long	(191 {__system___rxtxioctl_0765})<<20
408f8     00 00 00 0C | 	long	(192 {__system____dummy_flush_0766})<<20
408fc     00 00 00 00 
      ...             
40a6c     00 00 00 00 
40a70     00 00 00 00 | 	byte	$00[376]
40a74     78 0A 04 00 | 	long	@@@__system__dat_ + 1848
40a78     00 00 00 00 
40a7c     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40a80                 | 	alignl
40a80                 | _fatfs_cc_dat_
40a80     C7 00 FC 00 
40a84     E9 00 E2 00 
40a88     E4 00 E0 00 
40a8c     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
40a90     EA 00 EB 00 
40a94     E8 00 EF 00 
40a98     EE 00 EC 00 
40a9c     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
40aa0     C9 00 E6 00 
40aa4     C6 00 F4 00 
40aa8     F6 00 F2 00 
40aac     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
40ab0     FF 00 D6 00 
40ab4     DC 00 F8 00 
40ab8     A3 00 D8 00 
40abc     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
40ac0     E1 00 ED 00 
40ac4     F3 00 FA 00 
40ac8     F1 00 D1 00 
40acc     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
40ad0     BF 00 AE 00 
40ad4     AC 00 BD 00 
40ad8     BC 00 A1 00 
40adc     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
40ae0     91 25 92 25 
40ae4     93 25 02 25 
40ae8     24 25 C1 00 
40aec     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
40af0     A9 00 63 25 
40af4     51 25 57 25 
40af8     5D 25 A2 00 
40afc     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
40b00     14 25 34 25 
40b04     2C 25 1C 25 
40b08     00 25 3C 25 
40b0c     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
40b10     5A 25 54 25 
40b14     69 25 66 25 
40b18     60 25 50 25 
40b1c     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
40b20     F0 00 D0 00 
40b24     CA 00 CB 00 
40b28     C8 00 31 01 
40b2c     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
40b30     CF 00 18 25 
40b34     0C 25 88 25 
40b38     84 25 A6 00 
40b3c     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
40b40     D3 00 DF 00 
40b44     D4 00 D2 00 
40b48     F5 00 D5 00 
40b4c     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
40b50     DE 00 DA 00 
40b54     DB 00 D9 00 
40b58     FD 00 DD 00 
40b5c     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
40b60     AD 00 B1 00 
40b64     17 20 BE 00 
40b68     B6 00 A7 00 
40b6c     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
40b70     B0 00 A8 00 
40b74     B7 00 B9 00 
40b78     B3 00 B2 00 
40b7c     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
40b80     61 00 1A 03 
40b84     E0 00 17 03 
40b88     F8 00 07 03 
40b8c     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
40b90     78 01 00 01 
40b94     30 01 32 01 
40b98     06 01 39 01 
40b9c     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
40ba0     2E 01 79 01 
40ba4     06 01 80 01 
40ba8     4D 00 43 02 
40bac     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
40bb0     82 01 84 01 
40bb4     84 01 86 01 
40bb8     87 01 87 01 
40bbc     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
40bc0     8B 01 8B 01 
40bc4     8D 01 8E 01 
40bc8     8F 01 90 01 
40bcc     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
40bd0     93 01 94 01 
40bd4     F6 01 96 01 
40bd8     97 01 98 01 
40bdc     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
40be0     9B 01 9C 01 
40be4     9D 01 20 02 
40be8     9F 01 A0 01 
40bec     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
40bf0     A2 01 A4 01 
40bf4     A4 01 A6 01 
40bf8     A7 01 A7 01 
40bfc     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
40c00     AB 01 AC 01 
40c04     AC 01 AE 01 
40c08     AF 01 AF 01 
40c0c     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
40c10     B3 01 B3 01 
40c14     B5 01 B5 01 
40c18     B7 01 B8 01 
40c1c     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
40c20     BB 01 BC 01 
40c24     BC 01 BE 01 
40c28     F7 01 C0 01 
40c2c     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
40c30     C3 01 C4 01 
40c34     C5 01 C4 01 
40c38     C7 01 C8 01 
40c3c     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
40c40     CB 01 CA 01 
40c44     CD 01 10 01 
40c48     DD 01 01 00 
40c4c     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
40c50     12 01 F3 01 
40c54     03 00 F1 01 
40c58     F4 01 F4 01 
40c5c     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
40c60     22 02 12 01 
40c64     3A 02 09 00 
40c68     65 2C 3B 02 
40c6c     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
40c70     66 2C 3F 02 
40c74     40 02 41 02 
40c78     41 02 46 02 
40c7c     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
40c80     40 00 81 01 
40c84     86 01 55 02 
40c88     89 01 8A 01 
40c8c     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
40c90     5A 02 90 01 
40c94     5C 02 5D 02 
40c98     5E 02 5F 02 
40c9c     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
40ca0     62 02 94 01 
40ca4     64 02 65 02 
40ca8     66 02 67 02 
40cac     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
40cb0     6A 02 62 2C 
40cb4     6C 02 6D 02 
40cb8     6E 02 9C 01 
40cbc     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
40cc0     9D 01 73 02 
40cc4     74 02 9F 01 
40cc8     76 02 77 02 
40ccc     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
40cd0     7A 02 7B 02 
40cd4     7C 02 64 2C 
40cd8     7E 02 7F 02 
40cdc     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
40ce0     82 02 A9 01 
40ce4     84 02 85 02 
40ce8     86 02 87 02 
40cec     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
40cf0     B1 01 B2 01 
40cf4     45 02 8D 02 
40cf8     8E 02 8F 02 
40cfc     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
40d00     B7 01 7B 03 
40d04     03 00 FD 03 
40d08     FE 03 FF 03 
40d0c     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
40d10     86 03 88 03 
40d14     89 03 8A 03 
40d18     B1 03 11 03 
40d1c     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
40d20     A3 03 A3 03 
40d24     C4 03 08 03 
40d28     CC 03 03 00 
40d2c     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
40d30     8F 03 D8 03 
40d34     18 01 F2 03 
40d38     0A 00 F9 03 
40d3c     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
40d40     F5 03 F6 03 
40d44     F7 03 F7 03 
40d48     F9 03 FA 03 
40d4c     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
40d50     20 03 50 04 
40d54     10 07 60 04 
40d58     22 01 8A 04 
40d5c     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
40d60     0E 01 CF 04 
40d64     01 00 C0 04 
40d68     D0 04 44 01 
40d6c     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
40d70     00 00 7D 1D 
40d74     01 00 63 2C 
40d78     00 1E 96 01 
40d7c     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
40d80     00 1F 08 06 
40d84     10 1F 06 06 
40d88     20 1F 08 06 
40d8c     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
40d90     40 1F 06 06 
40d94     51 1F 07 00 
40d98     59 1F 52 1F 
40d9c     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
40da0     5D 1F 56 1F 
40da4     5F 1F 60 1F 
40da8     08 06 70 1F 
40dac     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
40db0     BB 1F C8 1F 
40db4     C9 1F CA 1F 
40db8     CB 1F DA 1F 
40dbc     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
40dc0     F9 1F EA 1F 
40dc4     EB 1F FA 1F 
40dc8     FB 1F 80 1F 
40dcc     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
40dd0     08 06 A0 1F 
40dd4     08 06 B0 1F 
40dd8     04 00 B8 1F 
40ddc     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
40de0     BC 1F CC 1F 
40de4     01 00 C3 1F 
40de8     D0 1F 02 06 
40dec     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
40df0     E5 1F 01 00 
40df4     EC 1F F3 1F 
40df8     01 00 FC 1F 
40dfc     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
40e00     32 21 70 21 
40e04     10 02 84 21 
40e08     01 00 83 21 
40e0c     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
40e10     30 2C 2F 04 
40e14     60 2C 02 01 
40e18     67 2C 06 01 
40e1c     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
40e20     80 2C 64 01 
40e24     00 2D 26 08 
40e28     41 FF 1A 03 
40e2c     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
40e30     05 07 09 0E 
40e34     10 12 14 16 
40e38     18 1C 1E 43 
40e3c     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
40e40     41 41 43 45 
40e44     45 45 49 49 
40e48     49 41 41 45 
40e4c     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
40e50     4F 55 55 59 
40e54     4F 55 4F 9C 
40e58     4F 9E 9F 41 
40e5c     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
40e60     A5 A6 A7 A8 
40e64     A9 AA AB AC 
40e68     AD AE AF B0 
40e6c     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
40e70     41 41 41 B8 
40e74     B9 BA BB BC 
40e78     BD BE BF C0 
40e7c     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
40e80     C5 41 41 C8 
40e84     C9 CA CB CC 
40e88     CD CE CF D1 
40e8c     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
40e90     49 49 49 49 
40e94     D9 DA DB DC 
40e98     DD 49 DF 4F 
40e9c     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
40ea0     4F E6 E8 E8 
40ea4     55 55 55 59 
40ea8     59 EE EF F0 
40eac     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
40eb0     F5 F6 F7 F8 
40eb4     F9 FA FB FC 
40eb8     FD FE FF 00 
40ebc     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
40ec0     00 00 00 00 | 	byte	$00, $00, $00, $00
40ec4     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_close})<<20
40ec8     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_read})<<20
40ecc     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_write})<<20
40ed0     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_lseek})<<20
40ed4     00 00 00 0B | 	long	(176 {_fatfs_cc_v_ioctl})<<20
40ed8     00 00 10 0C | 	long	(193 {_fatfs_cc_v_flush})<<20
40edc     00 00 00 00 
40ee0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
40ee4     00 00 10 0B | 	long	(177 {_fatfs_cc_v_open})<<20
40ee8     00 00 20 0B | 	long	(178 {_fatfs_cc_v_creat})<<20
40eec     00 00 30 0B | 	long	(179 {_fatfs_cc_v_opendir})<<20
40ef0     00 00 40 0B | 	long	(180 {_fatfs_cc_v_closedir})<<20
40ef4     00 00 50 0B | 	long	(181 {_fatfs_cc_v_readdir})<<20
40ef8     00 00 60 0B | 	long	(182 {_fatfs_cc_v_stat})<<20
40efc     00 00 70 0B | 	long	(183 {_fatfs_cc_v_mkdir})<<20
40f00     00 00 80 0B | 	long	(184 {_fatfs_cc_v_rmdir})<<20
40f04     00 00 90 0B | 	long	(185 {_fatfs_cc_v_remove})<<20
40f08     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_rename})<<20
40f0c     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_init})<<20
40f10     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_deinit})<<20
40f14     FF FF FF FF 
40f18     1F 00 00 00 
40f1c     1C 00 00 00 
40f20     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
40f24     1E 00 00 00 
40f28     1F 00 00 00 
40f2c     1E 00 00 00 
40f30     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
40f34     1F 00 00 00 
40f38     1E 00 00 00 
40f3c     1F 00 00 00 
40f40     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
40f44     1F 00 00 00 
40f48     00 00 00 00 
40f4c     1F 00 00 00 
40f50     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
40f54     5A 00 00 00 
40f58     78 00 00 00 
40f5c     97 00 00 00 
40f60     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
40f64     D4 00 00 00 
40f68     F3 00 00 00 
40f6c     11 01 00 00 
40f70     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
40f74     4E 01 00 00 
40f78     6D 01 00 00 
40f7c     FF FF FF FF 
40f80     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
40f84     00 00 00 00 
      ...             
40f9c     00 00 00 00 
40fa0     00 00 00 00 | 	byte	$00[32]
40fa4     C2 0F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
40fa8     C6 0F 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
40fac     00 00 00 00 
40fb0     00 00 00 00 
40fb4     00 00 00 00 
40fb8     00 00 00 00 
40fbc     00 00       | 	byte	$00[18]
40fbe     3F 3F 3F 00 
40fc2     55 43 54 00 
40fc6     55 43 54 00 
40fca     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
40fce     00 00 00 00 
40fd2     00 00 00    | 	byte	$00[7]
40fd5     CA 9A 3B 00 
40fd9     00 00 00 01 
40fdd     01 01 01 01 
40fe1     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
40fe5     91 11 11 11 
40fe9     11 01 01 01 
40fed     01 01 01 01 
40ff1     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
40ff5     01 01 01 01 
40ff9     01 01 01    | 	byte	$01[7]
40ffc     90 20 20 20 
41000     20 20 20 20 
41004     20 20 20 20 
41008     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
4100c     42 42 42 42 
41010     42 42 42 42 
41014     42 42       | 	byte	$42[10]
41016     20 20 20 20 
4101a     20 20 20    | 	byte	$20[7]
4101d     44 44 44 44 
41021     44 44       | 	byte	$44[6]
41023     04 04 04 04 
41027     04 04 04 04 
4102b     04 04 04 04 
4102f     04 04 04 04 
41033     04 04 04 04 | 	byte	$04[20]
41037     20 20 20 20 
4103b     20 20       | 	byte	$20[6]
4103d     48 48 48 48 
41041     48 48       | 	byte	$48[6]
41043     08 08 08 08 
41047     08 08 08 08 
4104b     08 08 08 08 
4104f     08 08 08 08 
41053     08 08 08 08 | 	byte	$08[20]
41057     20 20 20 20 
4105b     01 00 00 00 
4105f     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
41060                 | __methodtable__
41060     60 5A 01 00 | 	long	@_do_no_command
41064     84 FB 01 00 | 	long	@_do_plus
41068     A4 EB 01 00 | 	long	@_do_minus
4106c     6C FA 01 00 | 	long	@_do_or
41070     24 F2 01 00 | 	long	@_do_mul
41074     68 D6 01 00 | 	long	@_do_fdiv
41078     54 CE 01 00 | 	long	@_do_and
4107c     6C CF 01 00 | 	long	@_do_div
41080     04 F0 01 00 | 	long	@_do_mod
41084     38 02 02 00 | 	long	@_do_shl
41088     50 03 02 00 | 	long	@_do_shr
4108c     70 00 02 00 | 	long	@_do_power
41090     0C C4 01 00 | 	long	@_do_getvar
41094     9C 87 01 00 | 	long	@_do_push
41098     04 BE 01 00 | 	long	@_do_assign
4109c     F4 F2 00 00 | 	long	@_do_cls
410a0     2C 54 01 00 | 	long	@_do_new
410a4     E0 7F 01 00 | 	long	@_do_plot
410a8     00 15 01 00 | 	long	@_do_draw
410ac     48 82 01 00 | 	long	@_do_print
410b0     D4 F0 00 00 | 	long	@_do_circle
410b4     34 17 01 00 | 	long	@_do_fcircle
410b8     B8 DF 00 00 | 	long	@_do_box
410bc     18 1C 01 00 | 	long	@_do_frame
410c0     34 F3 00 00 | 	long	@_do_color
410c4     A8 19 01 00 | 	long	@_do_for
410c8     98 56 01 00 | 	long	@_do_next
410cc     5C 42 01 00 | 	long	@_do_list
410d0     44 A3 01 00 | 	long	@_do_run
410d4     5C 16 01 00 | 	long	@_do_error
410d8     64 28 01 00 | 	long	@_do_fast_goto
410dc     54 29 01 00 | 	long	@_do_find_goto
410e0     68 2B 01 00 | 	long	@_do_slow_goto
410e4     80 5A 01 00 | 	long	@_do_nothing
410e8     60 A7 01 00 | 	long	@_do_save
410ec     F8 44 01 00 | 	long	@_do_load
410f0     1C 73 01 00 | 	long	@_do_pinwrite
410f4     44 BB 01 00 | 	long	@_do_waitms
410f8     78 BC 01 00 | 	long	@_do_waitvbl
410fc     5C 2E 01 00 | 	long	@_do_if
41100     F4 15 01 00 | 	long	@_do_else
41104     8C D1 01 00 | 	long	@_do_eq
41108     30 D8 01 00 | 	long	@_do_ge
4110c     FC E1 01 00 | 	long	@_do_le
41110     18 DD 01 00 | 	long	@_do_gt
41114     D8 E6 01 00 | 	long	@_do_lt
41118     90 F5 01 00 | 	long	@_do_ne
4111c     AC A0 01 00 | 	long	@_do_rnd
41120     A0 E1 00 00 | 	long	@_do_brun
41124     3C DB 00 00 | 	long	@_do_beep
41128     90 0D 01 00 | 	long	@_do_dir
4112c     50 6F 01 00 | 	long	@_do_paper
41130     18 32 01 00 | 	long	@_do_ink
41134     2C 19 01 00 | 	long	@_do_font
41138     3C 4F 01 00 | 	long	@_do_mode
4113c     E8 52 01 00 | 	long	@_do_mouse
41140     E4 26 01 00 | 	long	@_do_gettime
41144     90 F4 00 00 | 	long	@_do_cursor
41148     4C F2 00 00 | 	long	@_do_click
4114c     A4 53 01 00 | 	long	@_do_mousex
41150     E8 53 01 00 | 	long	@_do_mousey
41154     1C 53 01 00 | 	long	@_do_mousek
41158     60 53 01 00 | 	long	@_do_mousew
4115c     AC B0 01 00 | 	long	@_do_sin
41160     E4 B3 01 00 | 	long	@_do_stick
41164     74 B5 01 00 | 	long	@_do_strig
41168     04 B2 01 00 | 	long	@_do_sprite
4116c     B4 08 01 00 | 	long	@_do_defsprite
41170     90 25 01 00 | 	long	@_do_getpixel
41174     20 BB 01 00 | 	long	@_do_waitclock
41178     54 EF 01 00 | 	long	@_do_negative
4117c     20 8E 01 00 | 	long	@_do_rdpin
41180     D0 A2 01 00 | 	long	@_do_rqpin
41184     48 71 01 00 | 	long	@_do_pinread
41188     84 BC 01 00 | 	long	@_do_wrpin
4118c     04 BD 01 00 | 	long	@_do_wxpin
41190     84 BD 01 00 | 	long	@_do_wypin
41194     88 70 01 00 | 	long	@_do_pinfloat
41198     08 71 01 00 | 	long	@_do_pinlo
4119c     C8 70 01 00 | 	long	@_do_pinhi
411a0     CC 71 01 00 | 	long	@_do_pinstart
411a4     DC 72 01 00 | 	long	@_do_pintoggle
411a8     C0 81 01 00 | 	long	@_do_position
411ac     6C F3 00 00 | 	long	@_do_cos
411b0     04 B7 01 00 | 	long	@_do_tan
411b4     24 DA 00 00 | 	long	@_do_atn
411b8     14 D9 00 00 | 	long	@_do_asin
411bc     A4 D6 00 00 | 	long	@_do_acos
411c0     F0 B2 01 00 | 	long	@_do_sqr
411c4     18 18 01 00 | 	long	@_do_fill
411c8     C4 FF 00 00 | 	long	@_do_defsnd
411cc     C4 F4 00 00 | 	long	@_do_defenv
411d0     F8 8D 01 00 | 	long	@_do_rad
411d4     28 0C 01 00 | 	long	@_do_deg
411d8     98 32 01 00 | 	long	@_do_int
411dc     A4 73 01 00 | 	long	@_do_play
411e0     04 AB 01 00 | 	long	@_do_setdelay
411e4     AC AB 01 00 | 	long	@_do_setenv
411e8     54 AC 01 00 | 	long	@_do_setlen
411ec     FC AC 01 00 | 	long	@_do_setpan
411f0     4C AE 01 00 | 	long	@_do_setvol
411f4     F4 AE 01 00 | 	long	@_do_setwave
411f8     A4 AD 01 00 | 	long	@_do_setsustain
411fc     A4 9D 01 00 | 	long	@_do_release
41200     7C 23 01 00 | 	long	@_do_getenvsustain
41204     B0 80 01 00 | 	long	@_do_poke
41208     28 14 01 00 | 	long	@_do_dpoke
4120c     D8 4B 01 00 | 	long	@_do_lpoke
41210     D8 6F 01 00 | 	long	@_do_peek
41214     7C 13 01 00 | 	long	@_do_dpeek
41218     2C 4B 01 00 | 	long	@_do_lpeek
4121c     74 1D 01 00 | 	long	@_do_fre
41220     8C 24 01 00 | 	long	@_do_getnotevalue
41224     C4 C9 01 00 | 	long	@_do_getaddr
41228     40 2F 01 00 | 	long	@_do_inkey
4122c     24 D6 00 00 | 	long	@_do_abs
41230     F8 2C 01 00 | 	long	@_do_hex
41234     54 DE 00 00 | 	long	@_do_bin
41238     14 B8 01 00 | 	long	@_do_val
4123c     D4 EF 00 00 | 	long	@_do_chr
41240     B4 D7 00 00 | 	long	@_do_asc
41244     5C 3F 01 00 | 	long	@_do_left
41248     20 9F 01 00 | 	long	@_do_right
4124c     B0 4C 01 00 | 	long	@_do_mid
41250     E8 40 01 00 | 	long	@_do_len
41254     4C 27 01 00 | 	long	@_do_gosub
41258     74 9E 01 00 | 	long	@_do_return
4125c     18 16 01 00 | 	long	@_do_end
41260     88 81 01 00 | 	long	@_do_pop
41264     B0 49 01 00 | 	long	@_do_log
41268     C8 ED 00 00 | 	long	@_do_changevol
4126c     A8 EE 00 00 | 	long	@_do_changewav
41270     B8 EC 00 00 | 	long	@_do_changepan
41274     9C E9 00 00 | 	long	@_do_changefreq
41278     9C AF 01 00 | 	long	@_do_shutup
4127c     7C A2 01 00 | 	long	@_do_round
41280     4C 16 01 00 | 	long	@_do_enter
41284     A8 5B 01 00 | 	long	@_do_open
41288     78 F2 00 00 | 	long	@_do_close
4128c     D8 1D 01 00 | 	long	@_do_get
41290     B8 88 01 00 | 	long	@_do_put
41294     DC E3 00 00 | 	long	@_do_cd
41298     50 0C 01 00 | 	long	@_do_delete
4129c     7C 4E 01 00 | 	long	@_do_mkdir
412a0     50 DC 00 00 | 	long	@_do_blit
412a4     40 1D 01 00 | 	long	@_do_framebuf
412a8     84 5A 01 00 | 	long	@_do_on
412ac     BC B1 01 00 | 	long	@_do_skip
412b0     54 33 01 00 | 	long	@_do_input
412b4     84 90 01 00 | 	long	@_do_read
412b8     3C 9E 01 00 | 	long	@_do_restore
412bc     D0 67 01 00 | 	long	@_do_padx
412c0     50 6A 01 00 | 	long	@_do_pady
412c4     D0 6C 01 00 | 	long	@_do_padz
412c8     50 60 01 00 | 	long	@_do_padrx
412cc     D0 62 01 00 | 	long	@_do_padry
412d0     50 65 01 00 | 	long	@_do_padrz
412d4     C0 5E 01 00 | 	long	@_do_padh
412d8     90 43 02 00 | 	long	@_hg010b_spin2_putchar
412dc     7C 59 03 00 | 	long	@__struct___bas_wrap_sender_tx
412e0     C0 59 03 00 | 	long	@__struct___bas_wrap_sender_rx
412e4     08 5A 03 00 | 	long	@__struct___bas_wrap_sender_close
412e8     AC 58 03 00 | 	long	@__struct__s_vfs_file_t_putchar
412ec     1C 59 03 00 | 	long	@__struct__s_vfs_file_t_getchar
412f0     64 58 03 00 | 	long	@___strs_cl_pfunc
412f4     F8 B5 02 00 | 	long	@__system____root_opendir
412f8     94 B6 02 00 | 	long	@__system____root_closedir
412fc     10 B6 02 00 | 	long	@__system____root_readdir
41300     9C B6 02 00 | 	long	@__system____root_stat
41304     E8 AE 02 00 | 	long	@__system____default_putc
41308     6C AE 02 00 | 	long	@__system____default_getc
4130c     90 AF 02 00 | 	long	@__system____default_flush
41310     68 43 03 00 | 	long	@_fatfs_cc_v_close
41314     84 47 03 00 | 	long	@_fatfs_cc_v_read
41318     98 48 03 00 | 	long	@_fatfs_cc_v_write
4131c     78 49 03 00 | 	long	@_fatfs_cc_v_lseek
41320     00 4A 03 00 | 	long	@_fatfs_cc_v_ioctl
41324     54 4A 03 00 | 	long	@_fatfs_cc_v_open
41328     CC 42 03 00 | 	long	@_fatfs_cc_v_creat
4132c     AC 43 03 00 | 	long	@_fatfs_cc_v_opendir
41330     20 44 03 00 | 	long	@_fatfs_cc_v_closedir
41334     60 44 03 00 | 	long	@_fatfs_cc_v_readdir
41338     94 45 03 00 | 	long	@_fatfs_cc_v_stat
4133c     14 4A 03 00 | 	long	@_fatfs_cc_v_mkdir
41340     34 4A 03 00 | 	long	@_fatfs_cc_v_rmdir
41344     24 4A 03 00 | 	long	@_fatfs_cc_v_remove
41348     44 4A 03 00 | 	long	@_fatfs_cc_v_rename
4134c     64 4B 03 00 | 	long	@_fatfs_cc_v_init
41350     6C 4B 03 00 | 	long	@_fatfs_cc_v_deinit
41354     38 60 02 00 | 	long	@__system___tx
41358     78 60 02 00 | 	long	@__system___rx
4135c     08 C2 02 00 | 	long	@__system___rxtxioctl_0765
41360     60 C2 02 00 | 	long	@__system____dummy_flush_0766
41364     34 4B 03 00 | 	long	@_fatfs_cc_v_flush
41368                 | __heap_base
41368     00 00 00 00 
      ...             
58a68     00 00 00 00 
58a6c     00 00 00 00 | 	long	0[24002]
58a70                 | objmem
58a70     00 00 00 00 
      ...             
62f88     00 00 00 00 
62f8c     00 00 00 00 | 	long	0[10568]
62f90                 | stackspace
62f90     00 00 00 00 | 	long	0[1]
62f94 100             | 	org	COG_BSS_START
62f94 100             | _var01
62f94 100             | 	res	1
62f94 101             | _var02
62f94 101             | 	res	1
62f94 102             | _var03
62f94 102             | 	res	1
62f94 103             | _var04
62f94 103             | 	res	1
62f94 104             | _var05
62f94 104             | 	res	1
62f94 105             | _var06
62f94 105             | 	res	1
62f94 106             | _var07
62f94 106             | 	res	1
62f94 107             | _var08
62f94 107             | 	res	1
62f94 108             | _var09
62f94 108             | 	res	1
62f94 109             | arg01
62f94 109             | 	res	1
62f94 10a             | arg02
62f94 10a             | 	res	1
62f94 10b             | arg03
62f94 10b             | 	res	1
62f94 10c             | arg04
62f94 10c             | 	res	1
62f94 10d             | arg05
62f94 10d             | 	res	1
62f94 10e             | arg06
62f94 10e             | 	res	1
62f94 10f             | arg07
62f94 10f             | 	res	1
62f94 110             | arg08
62f94 110             | 	res	1
62f94 111             | arg09
62f94 111             | 	res	1
62f94 112             | arg10
62f94 112             | 	res	1
62f94 113             | local01
62f94 113             | 	res	1
62f94 114             | local02
62f94 114             | 	res	1
62f94 115             | local03
62f94 115             | 	res	1
62f94 116             | local04
62f94 116             | 	res	1
62f94 117             | local05
62f94 117             | 	res	1
62f94 118             | local06
62f94 118             | 	res	1
62f94 119             | local07
62f94 119             | 	res	1
62f94 11a             | local08
62f94 11a             | 	res	1
62f94 11b             | local09
62f94 11b             | 	res	1
62f94 11c             | local10
62f94 11c             | 	res	1
62f94 11d             | local11
62f94 11d             | 	res	1
62f94 11e             | local12
62f94 11e             | 	res	1
62f94 11f             | local13
62f94 11f             | 	res	1
62f94 120             | local14
62f94 120             | 	res	1
62f94 121             | local15
62f94 121             | 	res	1
62f94 122             | local16
62f94 122             | 	res	1
62f94 123             | local17
62f94 123             | 	res	1
62f94 124             | local18
62f94 124             | 	res	1
62f94 125             | local19
62f94 125             | 	res	1
62f94 126             | local20
62f94 126             | 	res	1
62f94 127             | local21
62f94 127             | 	res	1
62f94 128             | local22
62f94 128             | 	res	1
62f94 129             | local23
62f94 129             | 	res	1
62f94 12a             | local24
62f94 12a             | 	res	1
62f94 12b             | local25
62f94 12b             | 	res	1
62f94 12c             | local26
62f94 12c             | 	res	1
62f94 12d             | local27
62f94 12d             | 	res	1
62f94 12e             | local28
62f94 12e             | 	res	1
62f94 12f             | local29
62f94 12f             | 	res	1
62f94 130             | local30
62f94 130             | 	res	1
62f94 131             | local31
62f94 131             | 	res	1
62f94 132             | local32
62f94 132             | 	res	1
62f94 133             | local33
62f94 133             | 	res	1
62f94 134             | local34
62f94 134             | 	res	1
62f94 135             | local35
62f94 135             | 	res	1
62f94 136             | local36
62f94 136             | 	res	1
62f94 137             | local37
62f94 137             | 	res	1
62f94 138             | local38
62f94 138             | 	res	1
62f94 139             | local39
62f94 139             | 	res	1
62f94 13a             | local40
62f94 13a             | 	res	1
62f94 13b             | local41
62f94 13b             | 	res	1
62f94 13c             | local42
62f94 13c             | 	res	1
62f94 13d             | local43
62f94 13d             | 	res	1
62f94 13e             | local44
62f94 13e             | 	res	1
62f94 13f             | local45
62f94 13f             | 	res	1
62f94 140             | local46
62f94 140             | 	res	1
62f94 141             | local47
62f94 141             | 	res	1
62f94 142             | local48
62f94 142             | 	res	1
62f94 143             | local49
62f94 143             | 	res	1
62f94 144             | muldiva_
62f94 144             | 	res	1
62f94 145             | muldivb_
62f94 145             | 	res	1
62f94 146             | 	fit	480
62f94 146             | 
