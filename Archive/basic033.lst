00000                 | 
00000                 | #line 1 "D:/Programowanie/P2-Retromachine-Basic/basic033.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 33
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_restore = 199
00000                 | 	token_padx = 200
00000                 | 	token_pady = 201
00000                 | 	token_padz = 202
00000                 | 	token_padh = 203
00000                 | 	token_padrx = 204
00000                 | 	token_padry = 205
00000                 | 	token_padrz = 206
00000                 | 	token_cogstop = 207
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 4C 33 A2 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 49 93 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 48 91 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 49 91 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 92 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 90 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 48 91 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 49 93 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec C8 1D 04 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed B4 1A 04 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 D0 94 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 94 0D 04 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 EC 08 04 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 FC 75 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 D4 14 04 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 64 A7 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 14 CF 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa CC CC 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb A4 DE 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc F0 39 06 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     00 44 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     94 58 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D0 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10192
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D0 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10192
00840     52 00 00 FF 
00844     E0 E4 05 F1 | 	add	objptr, ##42208
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     52 00 00 FF 
00850     E0 E4 85 F1 | 	sub	objptr, ##42208
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     3C E5 05 F1 | 	add	objptr, ##41276
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     3C E5 85 F1 | 	sub	objptr, ##41276
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     D4 5B B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     28 63 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     20 5D B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     3C E5 05 F1 | 	add	objptr, ##41276
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     3C E5 85 F1 | 	sub	objptr, ##41276
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     52 00 00 FF 
00980     A4 E4 05 F1 | 	add	objptr, ##42148
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     D4 E5 85 F1 | 	sub	objptr, ##36308
009c0     E4 5A B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     D4 28 B2 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     52 00 00 FF 
009dc     E0 E4 05 F1 | 	add	objptr, ##42208
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     52 00 00 FF 
009e8     E0 E4 85 F1 | 	sub	objptr, ##42208
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     52 00 00 FF 
00a64     C8 E4 05 F1 | 	add	objptr, ##42184
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     52 00 00 FF 
00a70     C8 E4 85 F1 | 	sub	objptr, ##42184
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     CC 26 B2 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     6C 26 B2 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     52 00 00 FF 
00afc     E8 E4 05 F1 | 	add	objptr, ##42216
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     52 00 00 FF 
00b08     AA E4 85 F1 | 	sub	objptr, ##42154
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     52 00 00 FF 
00b74     AC E4 05 F1 | 	add	objptr, ##42156
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     52 00 00 FF 
00b88     AA E4 85 F1 | 	sub	objptr, ##42154
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     FC 25 B2 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     48 3E B2 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     52 00 00 FF 
00bdc     E8 E4 05 F1 | 	add	objptr, ##42216
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     52 00 00 FF 
00bf0     E8 E4 85 F1 | 	sub	objptr, ##42216
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     64 41 B2 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     3C E5 05 A1 |  if_e	add	objptr, ##41276
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     3C E5 85 A1 |  if_e	sub	objptr, ##41276
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     10 58 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     64 5F B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     60 59 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     B2 01 00 FF 
00ccc     BA 50 06 F6 | 	mov	local22, ##@LR__5397
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     90 24 B2 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     44 7E B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     50 5C B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     52 00 00 FF 
00d34     C8 E4 05 F1 | 	add	objptr, ##42184
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     52 00 00 FF 
00d40     C8 E4 85 F1 | 	sub	objptr, ##42184
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     B4 45 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     E4 47 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     3C E5 05 F1 | 	add	objptr, ##41276
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     3C E5 85 F1 | 	sub	objptr, ##41276
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     9C 56 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     F0 5D B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     EC 57 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     2C 23 B2 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     24 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     18 3D B2 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     A8 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     74 3C B2 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     94 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     84 3C B2 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     D0 21 B2 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     7C 21 B2 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     4C 21 B2 FD | 	call	#_pspoke
0100c     52 00 00 FF 
01010     E8 E4 05 F1 | 	add	objptr, ##42216
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     52 00 00 FF 
0101c     AA E4 85 F1 | 	sub	objptr, ##42154
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     52 00 00 FF 
0108c     AC E4 05 F1 | 	add	objptr, ##42156
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     52 00 00 FF 
010a0     AA E4 85 F1 | 	sub	objptr, ##42154
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     E4 20 B2 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     30 39 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     52 00 00 FF 
010f4     E8 E4 05 F1 | 	add	objptr, ##42216
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     52 00 00 FF 
01108     E8 E4 85 F1 | 	sub	objptr, ##42216
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     0C 3A B2 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     CC 1F B2 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     78 1F B2 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     48 1F B2 FD | 	call	#_pspoke
01210     52 00 00 FF 
01214     E8 E4 05 F1 | 	add	objptr, ##42216
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     52 00 00 FF 
01220     AA E4 85 F1 | 	sub	objptr, ##42154
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     52 00 00 FF 
01290     AC E4 05 F1 | 	add	objptr, ##42156
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     52 00 00 FF 
012a4     AA E4 85 F1 | 	sub	objptr, ##42154
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     E0 1E B2 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     2C 37 B2 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     52 00 00 FF 
012f8     E8 E4 05 F1 | 	add	objptr, ##42216
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     52 00 00 FF 
0130c     E8 E4 85 F1 | 	sub	objptr, ##42216
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     B2 01 00 FF 
01328     BB 50 06 F6 | 	mov	local22, ##@LR__5398
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     52 00 00 FF 
01354     8E E4 05 F1 | 	add	objptr, ##42126
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     52 00 00 FF 
01360     CC E4 85 F1 | 	sub	objptr, ##42188
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     52 00 00 CF 
0136c     CC E4 05 C1 |  if_b	add	objptr, ##42188
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     52 00 00 CF 
01378     CC E4 85 C1 |  if_b	sub	objptr, ##42188
0137c     52 00 00 FF 
01380     CC E4 05 F1 | 	add	objptr, ##42188
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     52 00 00 FF 
0138c     CC E4 85 F1 | 	sub	objptr, ##42188
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     54 38 B2 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     52 00 00 FF 
013b4     8E E4 05 F1 | 	add	objptr, ##42126
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     52 00 00 FF 
013c0     CC E4 85 F1 | 	sub	objptr, ##42188
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     52 00 00 3F 
013cc     CC E4 05 31 |  if_ae	add	objptr, ##42188
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     52 00 00 3F 
013d8     CC E4 85 31 |  if_ae	sub	objptr, ##42188
013dc     52 00 00 FF 
013e0     CC E4 05 F1 | 	add	objptr, ##42188
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     52 00 00 FF 
013ec     CC E4 85 F1 | 	sub	objptr, ##42188
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     F4 37 B2 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     52 00 00 FF 
01414     94 E4 05 F1 | 	add	objptr, ##42132
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1B 00 00 FF 
01420     9C E4 85 F1 | 	sub	objptr, ##13980
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1B 00 00 CF 
01448     9C E4 05 C1 |  if_b	add	objptr, ##13980
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     52 00 00 CF 
01454     D0 E4 85 C1 |  if_b	sub	objptr, ##42192
01458     52 00 00 FF 
0145c     D0 E4 05 F1 | 	add	objptr, ##42192
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     52 00 00 FF 
01468     D0 E4 85 F1 | 	sub	objptr, ##42192
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     48 37 B2 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     52 00 00 FF 
01490     94 E4 05 F1 | 	add	objptr, ##42132
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     52 00 00 FF 
0149c     D0 E4 85 F1 | 	sub	objptr, ##42192
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     52 00 00 3F 
014a8     D0 E4 05 31 |  if_ae	add	objptr, ##42192
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     52 00 00 3F 
014b4     D0 E4 85 31 |  if_ae	sub	objptr, ##42192
014b8     52 00 00 FF 
014bc     D0 E4 05 F1 | 	add	objptr, ##42192
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     52 00 00 FF 
014c8     D0 E4 85 F1 | 	sub	objptr, ##42192
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     EC 36 B2 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     52 00 00 FF 
014e0     C8 E4 05 F1 | 	add	objptr, ##42184
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     52 00 00 FF 
014f4     C8 E4 85 F1 | 	sub	objptr, ##42184
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     38 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     28 25 B2 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     52 00 00 FF 
01544     4B E4 05 F1 | 	add	objptr, ##42059
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     52 00 00 FF 
01558     94 E4 85 F1 | 	sub	objptr, ##42132
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     A4 56 B2 FD | 	call	#__system___waitms
01568     52 00 00 FF 
0156c     94 E4 05 F1 | 	add	objptr, ##42132
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     52 00 00 FF 
01580     94 E4 85 F1 | 	sub	objptr, ##42132
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     7C 56 B2 FD | 	call	#__system___waitms
01590     52 00 00 FF 
01594     94 E4 05 F1 | 	add	objptr, ##42132
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     52 00 00 FF 
015a8     94 E4 85 F1 | 	sub	objptr, ##42132
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     54 56 B2 FD | 	call	#__system___waitms
015b8     52 00 00 FF 
015bc     94 E4 05 F1 | 	add	objptr, ##42132
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     52 00 00 FF 
015d0     94 E4 85 F1 | 	sub	objptr, ##42132
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     08 4A 05 F6 | 	mov	COUNT_, #8
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     48 E5 05 F1 | 	add	objptr, ##41800
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     AD F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10413
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     50 E5 85 F1 | 	sub	objptr, ##41808
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     64 4B B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     6C 01 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     B4 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     A4 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     FD 2C 02 F6 | 	mov	local04, result1
0167c     14 13 02 F6 | 	mov	arg01, local02
01680     02 14 06 F6 | 	mov	arg02, #2
01684     94 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01688     FD 2E 02 F6 | 	mov	local05, result1
0168c     14 13 02 F6 | 	mov	arg01, local02
01690     00 14 06 F6 | 	mov	arg02, #0
01694     D4 4B B2 FD | 	call	#_usbnew_spin2_hidpad_hat
01698     FD 30 02 F6 | 	mov	local06, result1
0169c     14 13 02 F6 | 	mov	arg01, local02
016a0     03 14 06 F6 | 	mov	arg02, #3
016a4     74 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016a8     FD 32 02 F6 | 	mov	local07, result1
016ac     14 13 02 F6 | 	mov	arg01, local02
016b0     04 14 06 F6 | 	mov	arg02, #4
016b4     64 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016b8     FD 34 02 F6 | 	mov	local08, result1
016bc     14 13 02 F6 | 	mov	arg01, local02
016c0     05 14 06 F6 | 	mov	arg02, #5
016c4     54 4B B2 FD | 	call	#_usbnew_spin2_hidpad_axis
016c8     FD 14 02 F6 | 	mov	arg02, result1
016cc     13 FB 01 F6 | 	mov	result1, local01
016d0     02 FA 65 F0 | 	shl	result1, #2
016d4     51 00 00 FF 
016d8     58 E5 05 F1 | 	add	objptr, ##41816
016dc     F2 FA 01 F1 | 	add	result1, objptr
016e0     FD 2A 62 FC | 	wrlong	local03, result1
016e4     13 FB 01 F6 | 	mov	result1, local01
016e8     02 FA 65 F0 | 	shl	result1, #2
016ec     1C E4 05 F1 | 	add	objptr, #28
016f0     F2 FA 01 F1 | 	add	result1, objptr
016f4     FD 2C 62 FC | 	wrlong	local04, result1
016f8     13 FB 01 F6 | 	mov	result1, local01
016fc     02 FA 65 F0 | 	shl	result1, #2
01700     1C E4 05 F1 | 	add	objptr, #28
01704     F2 FA 01 F1 | 	add	result1, objptr
01708     FD 2E 62 FC | 	wrlong	local05, result1
0170c     13 2F 02 F6 | 	mov	local05, local01
01710     02 2E 66 F0 | 	shl	local05, #2
01714     1C E4 05 F1 | 	add	objptr, #28
01718     F2 2E 02 F1 | 	add	local05, objptr
0171c     17 31 62 FC | 	wrlong	local06, local05
01720     13 31 02 F6 | 	mov	local06, local01
01724     02 30 66 F0 | 	shl	local06, #2
01728     1C E4 05 F1 | 	add	objptr, #28
0172c     F2 30 02 F1 | 	add	local06, objptr
01730     18 33 62 FC | 	wrlong	local07, local06
01734     13 33 02 F6 | 	mov	local07, local01
01738     02 32 66 F0 | 	shl	local07, #2
0173c     1C E4 05 F1 | 	add	objptr, #28
01740     F2 32 02 F1 | 	add	local07, objptr
01744     19 35 62 FC | 	wrlong	local08, local07
01748     13 35 02 F6 | 	mov	local08, local01
0174c     02 34 66 F0 | 	shl	local08, #2
01750     1C E4 05 F1 | 	add	objptr, #28
01754     F2 34 02 F1 | 	add	local08, objptr
01758     1A 15 62 FC | 	wrlong	arg02, local08
0175c     60 00 00 FF 
01760     00 2A 06 F1 | 	add	local03, ##49152
01764     0F 2A 46 F0 | 	shr	local03, #15
01768     01 34 06 F6 | 	mov	local08, #1
0176c     15 35 02 F1 | 	add	local08, local03
01770     60 00 00 FF 
01774     00 2C 06 F1 | 	add	local04, ##49152
01778     0F 2C 46 F0 | 	shr	local04, #15
0177c     01 32 06 F6 | 	mov	local07, #1
01780     16 33 02 F1 | 	add	local07, local04
01784     13 31 02 F6 | 	mov	local06, local01
01788     02 30 66 F0 | 	shl	local06, #2
0178c     1C E4 05 F1 | 	add	objptr, #28
01790     F2 30 02 F1 | 	add	local06, objptr
01794     02 32 66 F0 | 	shl	local07, #2
01798     19 35 02 F1 | 	add	local08, local07
0179c     18 35 62 FC | 	wrlong	local08, local06
017a0     13 35 02 F6 | 	mov	local08, local01
017a4     02 34 66 F0 | 	shl	local08, #2
017a8     1C E4 05 F1 | 	add	objptr, #28
017ac     F2 34 02 F1 | 	add	local08, objptr
017b0     14 13 02 F6 | 	mov	arg01, local02
017b4     52 00 00 FF 
017b8     38 E4 85 F1 | 	sub	objptr, ##42040
017bc     28 4A B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
017c0     1A FB 61 FC | 	wrlong	result1, local08
017c4     01 26 06 F1 | 	add	local01, #1
017c8                 | LR__0061
017c8     01 28 06 F1 | 	add	local02, #1
017cc     07 28 16 F2 | 	cmp	local02, #7 wc
017d0     78 FE 9F CD |  if_b	jmp	#LR__0060
017d4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
017d8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
017d8                 | LR__0062
017d8     07 26 16 F2 | 	cmp	local01, #7 wc
017dc     3C 00 90 3D |  if_ae	jmp	#LR__0064
017e0     13 35 02 F6 | 	mov	local08, local01
017e4     02 34 66 F0 | 	shl	local08, #2
017e8     52 00 00 FF 
017ec     1C E4 05 F1 | 	add	objptr, ##42012
017f0     F2 34 02 F1 | 	add	local08, objptr
017f4     1A 01 68 FC | 	wrlong	#0, local08
017f8     13 35 02 F6 | 	mov	local08, local01
017fc     02 34 66 F0 | 	shl	local08, #2
01800     1C E4 05 F1 | 	add	objptr, #28
01804     F2 34 02 F1 | 	add	local08, objptr
01808     1A 01 68 FC | 	wrlong	#0, local08
0180c     01 26 06 F1 | 	add	local01, #1
01810     52 00 00 FF 
01814     38 E4 85 F1 | 	sub	objptr, ##42040
01818     BC FF 9F FD | 	jmp	#LR__0062
0181c                 | LR__0063
0181c                 | LR__0064
0181c     A7 F0 03 F6 | 	mov	ptra, fp
01820     B2 00 A0 FD | 	call	#popregs_
01824                 | _gethdi_ret
01824     2D 00 64 FD | 	ret
01828                 | 
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' '
01828                 | ' '                                     LINE INTERPRETER/TOKENIZER
01828                 | ' '
01828                 | ' '-------------------------------------------------------------------------------------------------------------
01828                 | ' 
01828                 | ' 
01828                 | ' sub interpret
01828                 | _interpret
01828     35 4A 05 F6 | 	mov	COUNT_, #53
0182c     A8 00 A0 FD | 	call	#pushregs_
01830     01 00 00 FF 
01834     84 F0 07 F1 | 	add	ptra, ##644
01838     37 00 00 FF 
0183c     1C E4 05 F1 | 	add	objptr, ##28188
01840     F2 12 02 FB | 	rdlong	arg01, objptr
01844     37 00 00 FF 
01848     1C E4 85 F1 | 	sub	objptr, ##28188
0184c     D8 75 B2 FD | 	call	#__system__RTrim_S
01850     FD 12 02 F6 | 	mov	arg01, result1
01854     10 75 B2 FD | 	call	#__system__LTrim_S
01858     37 00 00 FF 
0185c     20 E4 05 F1 | 	add	objptr, ##28192
01860     F2 FA 61 FC | 	wrlong	result1, objptr
01864     04 E4 05 F1 | 	add	objptr, #4
01868     FF FF FF FF 
0186c     F2 FE 6B FC | 	wrlong	##-1, objptr
01870     1B 00 00 FF 
01874     8C E4 05 F1 | 	add	objptr, ##13964
01878     F2 00 68 FC | 	wrlong	#0, objptr
0187c     08 00 00 FF 
01880     34 E4 85 F1 | 	sub	objptr, ##4148
01884     F2 00 68 FC | 	wrlong	#0, objptr
01888     4A 00 00 FF 
0188c     7C E4 85 F1 | 	sub	objptr, ##38012
01890     00 26 06 F6 | 	mov	local01, #0
01894                 | LR__0070
01894                 | ' 
01894                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
01894                 | ' 
01894                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
01894                 | ' 
01894                 | ' 108 
01894                 | ' for i=0 to 125: separators(i)=0 :next i
01894     00 28 06 F6 | 	mov	local02, #0
01898     38 4E 05 F1 | 	add	fp, #56
0189c     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
018a0                 | LR__0071
018a0     14 2B 02 F6 | 	mov	local03, local02
018a4     02 2A 66 F0 | 	shl	local03, #2
018a8     A7 2A 02 F1 | 	add	local03, fp
018ac     15 01 68 FC | 	wrlong	#0, local03
018b0     01 28 06 F1 | 	add	local02, #1
018b4     7E 28 56 F2 | 	cmps	local02, #126 wc
018b8     E4 FF 9F CD |  if_b	jmp	#LR__0071
018bc                 | LR__0072
018bc     38 4E 85 F1 | 	sub	fp, #56
018c0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
018c0     00 28 06 F6 | 	mov	local02, #0
018c4     35 00 00 FF 
018c8     0C E4 05 F1 | 	add	objptr, ##27148
018cc     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
018d0                 | LR__0073
018d0     14 2D 02 F6 | 	mov	local04, local02
018d4     03 2C 66 F0 | 	shl	local04, #3
018d8     F2 2C 02 F1 | 	add	local04, objptr
018dc     B2 01 00 FF 
018e0     BC 16 06 F6 | 	mov	arg03, ##@LR__5399
018e4     16 17 62 FC | 	wrlong	arg03, local04
018e8     14 2D 02 F6 | 	mov	local04, local02
018ec     03 2C 66 F0 | 	shl	local04, #3
018f0     F2 2E 02 F6 | 	mov	local05, objptr
018f4     F2 2C 02 F1 | 	add	local04, objptr
018f8     00 30 06 F6 | 	mov	local06, #0
018fc     04 2C 06 F1 | 	add	local04, #4
01900     16 01 68 FC | 	wrlong	#0, local04
01904     01 28 06 F1 | 	add	local02, #1
01908     7E 28 56 F2 | 	cmps	local02, #126 wc
0190c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01910                 | LR__0074
01910     02 00 00 FF 
01914     10 E4 05 F1 | 	add	objptr, ##1040
01918     F2 12 02 FB | 	rdlong	arg01, objptr
0191c     37 00 00 FF 
01920     1C E4 85 F1 | 	sub	objptr, ##28188
01924     00 75 B2 FD | 	call	#__system__RTrim_S
01928     FD 12 02 F6 | 	mov	arg01, result1
0192c     38 74 B2 FD | 	call	#__system__LTrim_S
01930     37 00 00 FF 
01934     1C E4 05 F1 | 	add	objptr, ##28188
01938     F2 FA 61 FC | 	wrlong	result1, objptr
0193c     B2 01 00 FF 
01940     BD 2C 06 F6 | 	mov	local04, ##@LR__5400
01944     1B 00 00 FF 
01948     D0 E4 05 F1 | 	add	objptr, ##14032
0194c     F2 2C 62 FC | 	wrlong	local04, objptr
01950     1B 00 00 FF 
01954     D0 E4 85 F1 | 	sub	objptr, ##14032
01958     F2 12 02 FB | 	rdlong	arg01, objptr
0195c     37 00 00 FF 
01960     1C E4 85 F1 | 	sub	objptr, ##28188
01964     09 33 02 F6 | 	mov	local07, arg01
01968     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0196c                 | LR__0075
0196c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01970     01 32 06 51 |  if_ne	add	local07, #1
01974     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01978                 | LR__0076
01978     09 33 8A F1 | 	sub	local07, arg01 wz
0197c     52 00 00 FF 
01980     F0 E4 05 F1 | 	add	objptr, ##42224
01984     F2 32 62 FC | 	wrlong	local07, objptr
01988                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
01988     52 00 00 FF 
0198c     F0 E4 85 F1 | 	sub	objptr, ##42224
01990     DC 29 90 AD |  if_e	jmp	#LR__0209
01994     00 34 06 F6 | 	mov	local08, #0
01998                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
01998                 | ' for i=1 to len(line$)
01998     01 28 06 F6 | 	mov	local02, #1
0199c     37 00 00 FF 
019a0     1C E4 05 F1 | 	add	objptr, ##28188
019a4     F2 12 02 FB | 	rdlong	arg01, objptr
019a8     37 00 00 FF 
019ac     1C E4 85 F1 | 	sub	objptr, ##28188
019b0     09 33 02 F6 | 	mov	local07, arg01
019b4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
019b8                 | LR__0077
019b8     19 FB C9 FA | 	rdbyte	result1, local07 wz
019bc     01 32 06 51 |  if_ne	add	local07, #1
019c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
019c4                 | LR__0078
019c4     09 33 82 F1 | 	sub	local07, arg01
019c8     19 37 02 F6 | 	mov	local09, local07
019cc     01 36 06 F1 | 	add	local09, #1
019d0                 | LR__0079
019d0     1B 29 52 F2 | 	cmps	local02, local09 wc
019d4     AC 00 90 3D |  if_ae	jmp	#LR__0081
019d8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
019d8     37 00 00 FF 
019dc     1C E4 05 F1 | 	add	objptr, ##28188
019e0     F2 12 02 FB | 	rdlong	arg01, objptr
019e4     37 00 00 FF 
019e8     1C E4 85 F1 | 	sub	objptr, ##28188
019ec     14 15 02 F6 | 	mov	arg02, local02
019f0     01 16 06 F6 | 	mov	arg03, #1
019f4     B8 70 B2 FD | 	call	#__system__Mid_S
019f8     FD 12 02 F6 | 	mov	arg01, result1
019fc     B2 01 00 FF 
01a00     BE 14 06 F6 | 	mov	arg02, ##@LR__5401
01a04     38 4F B2 FD | 	call	#__system___string_cmp
01a08     00 FA 0D F2 | 	cmp	result1, #0 wz
01a0c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01a10     01 34 06 A6 |  if_e	mov	local08, #1
01a14     3C 00 90 AD |  if_e	jmp	#LR__0080
01a18     37 00 00 FF 
01a1c     1C E4 05 F1 | 	add	objptr, ##28188
01a20     F2 12 02 FB | 	rdlong	arg01, objptr
01a24     37 00 00 FF 
01a28     1C E4 85 F1 | 	sub	objptr, ##28188
01a2c     14 15 02 F6 | 	mov	arg02, local02
01a30     01 16 06 F6 | 	mov	arg03, #1
01a34     78 70 B2 FD | 	call	#__system__Mid_S
01a38     FD 12 02 F6 | 	mov	arg01, result1
01a3c     B2 01 00 FF 
01a40     C0 14 06 F6 | 	mov	arg02, ##@LR__5402
01a44     F8 4E B2 FD | 	call	#__system___string_cmp
01a48     00 FA 0D F2 | 	cmp	result1, #0 wz
01a4c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01a50     00 34 06 A6 |  if_e	mov	local08, #0
01a54                 | LR__0080
01a54     14 2D 02 F6 | 	mov	local04, local02
01a58     03 2C 66 F0 | 	shl	local04, #3
01a5c     35 00 00 FF 
01a60     0C E4 05 F1 | 	add	objptr, ##27148
01a64     F2 2E 02 F6 | 	mov	local05, objptr
01a68     F2 2C 02 F1 | 	add	local04, objptr
01a6c     04 2C 06 F1 | 	add	local04, #4
01a70     16 35 62 FC | 	wrlong	local08, local04
01a74     01 28 06 F1 | 	add	local02, #1
01a78     35 00 00 FF 
01a7c     0C E4 85 F1 | 	sub	objptr, ##27148
01a80     4C FF 9F FD | 	jmp	#LR__0079
01a84                 | LR__0081
01a84     01 28 06 F6 | 	mov	local02, #1
01a88                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
01a88                 | LR__0082
01a88     37 00 00 FF 
01a8c     1C E4 05 F1 | 	add	objptr, ##28188
01a90     F2 12 02 FB | 	rdlong	arg01, objptr
01a94     37 00 00 FF 
01a98     1C E4 85 F1 | 	sub	objptr, ##28188
01a9c     14 15 02 F6 | 	mov	arg02, local02
01aa0     01 16 06 F6 | 	mov	arg03, #1
01aa4     08 70 B2 FD | 	call	#__system__Mid_S
01aa8     FD 12 02 F6 | 	mov	arg01, result1
01aac     B2 01 00 FF 
01ab0     C2 38 06 F6 | 	mov	local10, ##@LR__5403
01ab4     1C 15 02 F6 | 	mov	arg02, local10
01ab8     84 4E B2 FD | 	call	#__system___string_cmp
01abc     00 FA 0D F2 | 	cmp	result1, #0 wz
01ac0     34 00 90 5D |  if_ne	jmp	#LR__0083
01ac4     14 2F 02 F6 | 	mov	local05, local02
01ac8     03 2E 66 F0 | 	shl	local05, #3
01acc     35 00 00 FF 
01ad0     0C E4 05 F1 | 	add	objptr, ##27148
01ad4     F2 30 02 F6 | 	mov	local06, objptr
01ad8     F2 2E 02 F1 | 	add	local05, objptr
01adc     04 2E 06 F1 | 	add	local05, #4
01ae0     17 3B 02 FB | 	rdlong	local11, local05
01ae4     04 2E 86 F1 | 	sub	local05, #4
01ae8     1D 3D 0A F6 | 	mov	local12, local11 wz
01aec     35 00 00 FF 
01af0     0C E4 85 F1 | 	sub	objptr, ##27148
01af4     24 00 90 AD |  if_e	jmp	#LR__0084
01af8                 | LR__0083
01af8     52 00 00 FF 
01afc     F0 E4 05 F1 | 	add	objptr, ##42224
01b00     F2 3E 02 FB | 	rdlong	local13, objptr
01b04     52 00 00 FF 
01b08     F0 E4 85 F1 | 	sub	objptr, ##42224
01b0c     1F 41 02 F6 | 	mov	local14, local13
01b10     20 29 52 F2 | 	cmps	local02, local14 wc
01b14     01 28 06 C1 |  if_b	add	local02, #1
01b18     6C FF 9F CD |  if_b	jmp	#LR__0082
01b1c                 | LR__0084
01b1c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01b1c     52 00 00 FF 
01b20     F0 E4 05 F1 | 	add	objptr, ##42224
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     52 00 00 FF 
01b2c     F0 E4 85 F1 | 	sub	objptr, ##42224
01b30     16 29 52 F2 | 	cmps	local02, local04 wc
01b34     A8 00 90 3D |  if_ae	jmp	#LR__0087
01b38     37 00 00 FF 
01b3c     1C E4 05 F1 | 	add	objptr, ##28188
01b40     F2 30 02 FB | 	rdlong	local06, objptr
01b44     37 00 00 FF 
01b48     1C E4 85 F1 | 	sub	objptr, ##28188
01b4c     18 13 02 F6 | 	mov	arg01, local06
01b50     09 33 02 F6 | 	mov	local07, arg01
01b54     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01b58                 | LR__0085
01b58     19 FB C9 FA | 	rdbyte	result1, local07 wz
01b5c     01 32 06 51 |  if_ne	add	local07, #1
01b60     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01b64                 | LR__0086
01b64     09 33 82 F1 | 	sub	local07, arg01
01b68     19 2F 02 F6 | 	mov	local05, local07
01b6c     17 15 02 F6 | 	mov	arg02, local05
01b70     14 15 82 F1 | 	sub	arg02, local02
01b74     18 13 02 F6 | 	mov	arg01, local06
01b78     A4 6E B2 FD | 	call	#__system__Right_S
01b7c     FD 12 02 F6 | 	mov	arg01, result1
01b80     A4 72 B2 FD | 	call	#__system__RTrim_S
01b84     FD 12 02 F6 | 	mov	arg01, result1
01b88     DC 71 B2 FD | 	call	#__system__LTrim_S
01b8c     52 00 00 FF 
01b90     F4 E4 05 F1 | 	add	objptr, ##42228
01b94     F2 FA 61 FC | 	wrlong	result1, objptr
01b98     1B 00 00 FF 
01b9c     D8 E4 85 F1 | 	sub	objptr, ##14040
01ba0     F2 12 02 FB | 	rdlong	arg01, objptr
01ba4     37 00 00 FF 
01ba8     1C E4 85 F1 | 	sub	objptr, ##28188
01bac     01 28 86 F1 | 	sub	local02, #1
01bb0     14 15 02 F6 | 	mov	arg02, local02
01bb4     E0 6D B2 FD | 	call	#__system__Left_S
01bb8     FD 12 02 F6 | 	mov	arg01, result1
01bbc     68 72 B2 FD | 	call	#__system__RTrim_S
01bc0     FD 12 02 F6 | 	mov	arg01, result1
01bc4     A0 71 B2 FD | 	call	#__system__LTrim_S
01bc8     37 00 00 FF 
01bcc     1C E4 05 F1 | 	add	objptr, ##28188
01bd0     F2 FA 61 FC | 	wrlong	result1, objptr
01bd4     37 00 00 FF 
01bd8     1C E4 85 F1 | 	sub	objptr, ##28188
01bdc     1C 00 90 FD | 	jmp	#LR__0088
01be0                 | LR__0087
01be0     B2 01 00 FF 
01be4     C4 2C 06 F6 | 	mov	local04, ##@LR__5404
01be8     52 00 00 FF 
01bec     F4 E4 05 F1 | 	add	objptr, ##42228
01bf0     F2 2C 62 FC | 	wrlong	local04, objptr
01bf4     52 00 00 FF 
01bf8     F4 E4 85 F1 | 	sub	objptr, ##42228
01bfc                 | LR__0088
01bfc                 | ' 
01bfc                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01bfc     37 00 00 FF 
01c00     24 E4 05 F1 | 	add	objptr, ##28196
01c04     F2 2C 02 FB | 	rdlong	local04, objptr
01c08     37 00 00 FF 
01c0c     24 E4 85 F1 | 	sub	objptr, ##28196
01c10     FF FF 7F FF 
01c14     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c18     40 00 90 5D |  if_ne	jmp	#LR__0089
01c1c     52 00 00 FF 
01c20     F4 E4 05 F1 | 	add	objptr, ##42228
01c24     F2 12 02 FB | 	rdlong	arg01, objptr
01c28     52 00 00 FF 
01c2c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c30     B2 01 00 FF 
01c34     C5 30 06 F6 | 	mov	local06, ##@LR__5405
01c38     18 15 02 F6 | 	mov	arg02, local06
01c3c     00 4D B2 FD | 	call	#__system___string_cmp
01c40     00 FA 0D F2 | 	cmp	result1, #0 wz
01c44     37 00 00 5F 
01c48     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c4c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01c50     37 00 00 5F 
01c54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c58     08 01 90 5D |  if_ne	jmp	#LR__0093
01c5c                 | LR__0089
01c5c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01c5c     37 00 00 FF 
01c60     24 E4 05 F1 | 	add	objptr, ##28196
01c64     F2 2C 02 FB | 	rdlong	local04, objptr
01c68     37 00 00 FF 
01c6c     24 E4 85 F1 | 	sub	objptr, ##28196
01c70     FF FF 7F FF 
01c74     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01c78     3C 00 90 5D |  if_ne	jmp	#LR__0090
01c7c     52 00 00 FF 
01c80     F4 E4 05 F1 | 	add	objptr, ##42228
01c84     F2 12 02 FB | 	rdlong	arg01, objptr
01c88     52 00 00 FF 
01c8c     F4 E4 85 F1 | 	sub	objptr, ##42228
01c90     B2 01 00 FF 
01c94     C6 14 06 F6 | 	mov	arg02, ##@LR__5406
01c98     A4 4C B2 FD | 	call	#__system___string_cmp
01c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
01ca0     37 00 00 AF 
01ca4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01ca8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01cac     37 00 00 AF 
01cb0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01cb4     AC 00 90 AD |  if_e	jmp	#LR__0093
01cb8                 | LR__0090
01cb8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01cb8     37 00 00 FF 
01cbc     24 E4 05 F1 | 	add	objptr, ##28196
01cc0     F2 2C 02 FB | 	rdlong	local04, objptr
01cc4     37 00 00 FF 
01cc8     24 E4 85 F1 | 	sub	objptr, ##28196
01ccc     04 2C 0E F2 | 	cmp	local04, #4 wz
01cd0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01cd4     52 00 00 FF 
01cd8     F4 E4 05 F1 | 	add	objptr, ##42228
01cdc     F2 12 02 FB | 	rdlong	arg01, objptr
01ce0     52 00 00 FF 
01ce4     F4 E4 85 F1 | 	sub	objptr, ##42228
01ce8     B2 01 00 FF 
01cec     C7 14 06 F6 | 	mov	arg02, ##@LR__5407
01cf0     4C 4C B2 FD | 	call	#__system___string_cmp
01cf4     00 FA 0D F2 | 	cmp	result1, #0 wz
01cf8     37 00 00 5F 
01cfc     24 E4 05 51 |  if_ne	add	objptr, ##28196
01d00     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01d04     37 00 00 5F 
01d08     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01d0c     54 00 90 5D |  if_ne	jmp	#LR__0093
01d10                 | LR__0091
01d10                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01d10     37 00 00 FF 
01d14     24 E4 05 F1 | 	add	objptr, ##28196
01d18     F2 2C 02 FB | 	rdlong	local04, objptr
01d1c     37 00 00 FF 
01d20     24 E4 85 F1 | 	sub	objptr, ##28196
01d24     04 2C 0E F2 | 	cmp	local04, #4 wz
01d28     38 00 90 5D |  if_ne	jmp	#LR__0092
01d2c     52 00 00 FF 
01d30     F4 E4 05 F1 | 	add	objptr, ##42228
01d34     F2 12 02 FB | 	rdlong	arg01, objptr
01d38     52 00 00 FF 
01d3c     F4 E4 85 F1 | 	sub	objptr, ##42228
01d40     B2 01 00 FF 
01d44     C8 14 06 F6 | 	mov	arg02, ##@LR__5408
01d48     F4 4B B2 FD | 	call	#__system___string_cmp
01d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
01d50     37 00 00 AF 
01d54     24 E4 05 A1 |  if_e	add	objptr, ##28196
01d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
01d5c     37 00 00 AF 
01d60     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01d64                 | LR__0092
01d64                 | LR__0093
01d64     38 4E 05 F1 | 	add	fp, #56
01d68     A7 00 68 FC | 	wrlong	#0, fp
01d6c     38 4E 85 F1 | 	sub	fp, #56
01d70     00 28 06 F6 | 	mov	local02, #0
01d74     01 42 06 F6 | 	mov	local15, #1
01d78                 | ' 
01d78                 | ' ' 1b: find separators
01d78                 | ' 
01d78                 | ' 107
01d78                 | ' separators(0)=0
01d78                 | ' i=0: j=1
01d78                 | ' do: 
01d78                 | LR__0094
01d78     01 28 06 F1 | 	add	local02, #1
01d7c     37 00 00 FF 
01d80     1C E4 05 F1 | 	add	objptr, ##28188
01d84     F2 12 02 FB | 	rdlong	arg01, objptr
01d88     37 00 00 FF 
01d8c     1C E4 85 F1 | 	sub	objptr, ##28188
01d90     14 15 02 F6 | 	mov	arg02, local02
01d94     01 16 06 F6 | 	mov	arg03, #1
01d98     14 6D B2 FD | 	call	#__system__Mid_S
01d9c     FD 44 02 F6 | 	mov	local16, result1
01da0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01da0     22 13 02 F6 | 	mov	arg01, local16
01da4     30 2E B0 FD | 	call	#_isseparator
01da8     00 FA 0D F2 | 	cmp	result1, #0 wz
01dac     1C 00 90 AD |  if_e	jmp	#LR__0095
01db0     21 2B 02 F6 | 	mov	local03, local15
01db4     02 2A 66 F0 | 	shl	local03, #2
01db8     38 4E 05 F1 | 	add	fp, #56
01dbc     A7 2A 02 F1 | 	add	local03, fp
01dc0     15 29 62 FC | 	wrlong	local02, local03
01dc4     01 42 06 F1 | 	add	local15, #1
01dc8     38 4E 85 F1 | 	sub	fp, #56
01dcc                 | LR__0095
01dcc     52 00 00 FF 
01dd0     F0 E4 05 F1 | 	add	objptr, ##42224
01dd4     F2 2C 02 FB | 	rdlong	local04, objptr
01dd8     52 00 00 FF 
01ddc     F0 E4 85 F1 | 	sub	objptr, ##42224
01de0     16 29 5A F2 | 	cmps	local02, local04 wcz
01de4     90 FF 9F ED |  if_be	jmp	#LR__0094
01de8     21 2B 02 F6 | 	mov	local03, local15
01dec     02 2A 66 F0 | 	shl	local03, #2
01df0     38 4E 05 F1 | 	add	fp, #56
01df4     A7 38 02 F6 | 	mov	local10, fp
01df8     A7 2A 02 F1 | 	add	local03, fp
01dfc     15 29 62 FC | 	wrlong	local02, local03
01e00     00 46 06 F6 | 	mov	local17, #0
01e04                 | ' for i=0 to j-1 
01e04     00 28 06 F6 | 	mov	local02, #0
01e08     21 49 02 F6 | 	mov	local18, local15
01e0c     38 4E 85 F1 | 	sub	fp, #56
01e10                 | LR__0096
01e10     24 29 52 F2 | 	cmps	local02, local18 wc
01e14     50 01 90 3D |  if_ae	jmp	#LR__0100
01e18     14 2B 02 F6 | 	mov	local03, local02
01e1c     02 2A 66 F0 | 	shl	local03, #2
01e20     38 4E 05 F1 | 	add	fp, #56
01e24     A7 2A 02 F1 | 	add	local03, fp
01e28     15 2F 02 FB | 	rdlong	local05, local03
01e2c     52 00 00 FF 
01e30     FC E4 05 F1 | 	add	objptr, ##42236
01e34     F2 2E 62 FC | 	wrlong	local05, objptr
01e38     14 2B 02 F6 | 	mov	local03, local02
01e3c     01 2A 06 F1 | 	add	local03, #1
01e40     02 2A 66 F0 | 	shl	local03, #2
01e44     A7 38 02 F6 | 	mov	local10, fp
01e48     A7 2A 02 F1 | 	add	local03, fp
01e4c     15 2F 02 FB | 	rdlong	local05, local03
01e50     04 E4 05 F1 | 	add	objptr, #4
01e54     F2 2E 62 FC | 	wrlong	local05, objptr
01e58                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e58     04 E4 85 F1 | 	sub	objptr, #4
01e5c     F2 2C 02 FB | 	rdlong	local04, objptr
01e60     52 00 00 FF 
01e64     FC E4 85 F1 | 	sub	objptr, ##42236
01e68     01 2C 56 F2 | 	cmps	local04, #1 wc
01e6c     38 4E 85 F1 | 	sub	fp, #56
01e70     68 00 90 CD |  if_b	jmp	#LR__0098
01e74     37 00 00 FF 
01e78     1C E4 05 F1 | 	add	objptr, ##28188
01e7c     F2 12 02 FB | 	rdlong	arg01, objptr
01e80     1B 00 00 FF 
01e84     E0 E4 05 F1 | 	add	objptr, ##14048
01e88     F2 14 02 FB | 	rdlong	arg02, objptr
01e8c     52 00 00 FF 
01e90     FC E4 85 F1 | 	sub	objptr, ##42236
01e94     01 16 06 F6 | 	mov	arg03, #1
01e98     14 6C B2 FD | 	call	#__system__Mid_S
01e9c     FD 4A 02 F6 | 	mov	local19, result1
01ea0     B2 01 00 FF 
01ea4     C9 14 06 F6 | 	mov	arg02, ##@LR__5409
01ea8     25 13 02 F6 | 	mov	arg01, local19
01eac     90 4A B2 FD | 	call	#__system___string_cmp
01eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
01eb4     24 00 90 AD |  if_e	jmp	#LR__0097
01eb8     23 39 02 F6 | 	mov	local10, local17
01ebc     03 38 66 F0 | 	shl	local10, #3
01ec0     35 00 00 FF 
01ec4     0C E4 05 F1 | 	add	objptr, ##27148
01ec8     F2 38 02 F1 | 	add	local10, objptr
01ecc     1C 4B 62 FC | 	wrlong	local19, local10
01ed0     01 46 06 F1 | 	add	local17, #1
01ed4     35 00 00 FF 
01ed8     0C E4 85 F1 | 	sub	objptr, ##27148
01edc                 | LR__0097
01edc                 | LR__0098
01edc     37 00 00 FF 
01ee0     1C E4 05 F1 | 	add	objptr, ##28188
01ee4     F2 12 02 FB | 	rdlong	arg01, objptr
01ee8     1B 00 00 FF 
01eec     E0 E4 05 F1 | 	add	objptr, ##14048
01ef0     F2 14 02 FB | 	rdlong	arg02, objptr
01ef4     01 14 06 F1 | 	add	arg02, #1
01ef8     04 E4 05 F1 | 	add	objptr, #4
01efc     F2 16 02 FB | 	rdlong	arg03, objptr
01f00     04 E4 85 F1 | 	sub	objptr, #4
01f04     F2 3A 02 FB | 	rdlong	local11, objptr
01f08     52 00 00 FF 
01f0c     FC E4 85 F1 | 	sub	objptr, ##42236
01f10     1D 3D 02 F6 | 	mov	local12, local11
01f14     1E 17 82 F1 | 	sub	arg03, local12
01f18     01 16 86 F1 | 	sub	arg03, #1
01f1c     90 6B B2 FD | 	call	#__system__Mid_S
01f20     FD 4A 02 F6 | 	mov	local19, result1
01f24                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01f24     B2 01 00 FF 
01f28     CA 14 06 F6 | 	mov	arg02, ##@LR__5410
01f2c     25 13 02 F6 | 	mov	arg01, local19
01f30     0C 4A B2 FD | 	call	#__system___string_cmp
01f34     00 FA 0D F2 | 	cmp	result1, #0 wz
01f38     24 00 90 AD |  if_e	jmp	#LR__0099
01f3c     23 39 02 F6 | 	mov	local10, local17
01f40     03 38 66 F0 | 	shl	local10, #3
01f44     35 00 00 FF 
01f48     0C E4 05 F1 | 	add	objptr, ##27148
01f4c     F2 38 02 F1 | 	add	local10, objptr
01f50     1C 4B 62 FC | 	wrlong	local19, local10
01f54     01 46 06 F1 | 	add	local17, #1
01f58     35 00 00 FF 
01f5c     0C E4 85 F1 | 	sub	objptr, ##27148
01f60                 | LR__0099
01f60     01 28 06 F1 | 	add	local02, #1
01f64     A8 FE 9F FD | 	jmp	#LR__0096
01f68                 | LR__0100
01f68                 | ' 
01f68                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01f68                 | ' 
01f68                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01f68     37 00 00 FF 
01f6c     24 E4 05 F1 | 	add	objptr, ##28196
01f70     F2 2C 0A FB | 	rdlong	local04, objptr wz
01f74     37 00 00 FF 
01f78     24 E4 85 F1 | 	sub	objptr, ##28196
01f7c     37 00 00 5F 
01f80     24 E4 05 51 |  if_ne	add	objptr, ##28196
01f84     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01f88     37 00 00 5F 
01f8c     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01f90     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01f94     B8 00 90 5D |  if_ne	jmp	#LR__0103
01f98     35 00 00 FF 
01f9c     0C E4 05 F1 | 	add	objptr, ##27148
01fa0     F2 3A 02 FB | 	rdlong	local11, objptr
01fa4     35 00 00 FF 
01fa8     0C E4 85 F1 | 	sub	objptr, ##27148
01fac     1D 13 02 F6 | 	mov	arg01, local11
01fb0     E8 4E B0 FD | 	call	#_isdec
01fb4     FD 3C 02 F6 | 	mov	local12, result1
01fb8     1E 31 22 F6 | 	not	local06, local12
01fbc     00 30 0E F2 | 	cmp	local06, #0 wz
01fc0     8C 00 90 AD |  if_e	jmp	#LR__0103
01fc4     23 29 02 F6 | 	mov	local02, local17
01fc8     35 00 00 FF 
01fcc     0C E4 05 F1 | 	add	objptr, ##27148
01fd0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01fd4                 | LR__0101
01fd4     14 2F 02 F6 | 	mov	local05, local02
01fd8     01 2E 86 F1 | 	sub	local05, #1
01fdc     03 2E 66 F0 | 	shl	local05, #3
01fe0     F2 2E 02 F1 | 	add	local05, objptr
01fe4     17 2D 02 FB | 	rdlong	local04, local05
01fe8     14 31 02 F6 | 	mov	local06, local02
01fec     01 30 86 F1 | 	sub	local06, #1
01ff0     03 30 66 F0 | 	shl	local06, #3
01ff4     F2 30 02 F1 | 	add	local06, objptr
01ff8     04 30 06 F1 | 	add	local06, #4
01ffc     18 2B 02 FB | 	rdlong	local03, local06
02000     14 31 02 F6 | 	mov	local06, local02
02004     03 30 66 F0 | 	shl	local06, #3
02008     F2 3C 02 F6 | 	mov	local12, objptr
0200c     F2 30 02 F1 | 	add	local06, objptr
02010     18 2D 62 FC | 	wrlong	local04, local06
02014     14 3B 02 F6 | 	mov	local11, local02
02018     1D 3F 02 F6 | 	mov	local13, local11
0201c     03 3E 66 F0 | 	shl	local13, #3
02020     F2 3E 02 F1 | 	add	local13, objptr
02024     04 3E 06 F1 | 	add	local13, #4
02028     1F 2B 62 FC | 	wrlong	local03, local13
0202c     01 28 86 F1 | 	sub	local02, #1
02030     01 28 56 F2 | 	cmps	local02, #1 wc
02034     9C FF 9F 3D |  if_ae	jmp	#LR__0101
02038                 | LR__0102
02038     B2 01 00 FF 
0203c     CB 2C 06 F6 | 	mov	local04, ##@LR__5411
02040     F2 2C 62 FC | 	wrlong	local04, objptr
02044     35 00 00 FF 
02048     0C E4 85 F1 | 	sub	objptr, ##27148
0204c     01 46 06 F1 | 	add	local17, #1
02050                 | LR__0103
02050     00 28 06 F6 | 	mov	local02, #0
02054                 | ' 
02054                 | ' ' 1e : find strings
02054                 | ' 
02054                 | ' i=0
02054                 | ' do
02054                 | LR__0104
02054                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
02054     14 2F 02 F6 | 	mov	local05, local02
02058     03 2E 66 F0 | 	shl	local05, #3
0205c     35 00 00 FF 
02060     0C E4 05 F1 | 	add	objptr, ##27148
02064     F2 2E 02 F1 | 	add	local05, objptr
02068     17 13 02 FB | 	rdlong	arg01, local05
0206c     B2 01 00 FF 
02070     CD 14 06 F6 | 	mov	arg02, ##@LR__5412
02074     35 00 00 FF 
02078     0C E4 85 F1 | 	sub	objptr, ##27148
0207c     C0 48 B2 FD | 	call	#__system___string_cmp
02080     00 FA 0D F2 | 	cmp	result1, #0 wz
02084     01 28 06 51 |  if_ne	add	local02, #1
02088     20 01 90 5D |  if_ne	jmp	#LR__0109
0208c     14 4D 02 F6 | 	mov	local20, local02
02090                 | LR__0105
02090     14 39 02 F6 | 	mov	local10, local02
02094     01 38 06 F1 | 	add	local10, #1
02098     03 38 66 F0 | 	shl	local10, #3
0209c     35 00 00 FF 
020a0     0C E4 05 F1 | 	add	objptr, ##27148
020a4     F2 38 02 F1 | 	add	local10, objptr
020a8     1C 4B 02 FB | 	rdlong	local19, local10
020ac     26 39 02 F6 | 	mov	local10, local20
020b0     03 38 66 F0 | 	shl	local10, #3
020b4     F2 38 02 F1 | 	add	local10, objptr
020b8     26 3B 02 F6 | 	mov	local11, local20
020bc     1D 41 02 F6 | 	mov	local14, local11
020c0     03 40 66 F0 | 	shl	local14, #3
020c4     F2 40 02 F1 | 	add	local14, objptr
020c8     20 13 02 FB | 	rdlong	arg01, local14
020cc     25 3D 02 F6 | 	mov	local12, local19
020d0     1E 15 02 F6 | 	mov	arg02, local12
020d4     35 00 00 FF 
020d8     0C E4 85 F1 | 	sub	objptr, ##27148
020dc     94 48 B2 FD | 	call	#__system___string_concat
020e0     1C FB 61 FC | 	wrlong	result1, local10
020e4     14 43 02 F6 | 	mov	local15, local02
020e8     01 42 06 F1 | 	add	local15, #1
020ec     23 4F 02 F6 | 	mov	local21, local17
020f0     01 4E 06 F1 | 	add	local21, #1
020f4     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
020f8                 | LR__0106
020f8     27 43 52 F2 | 	cmps	local15, local21 wc
020fc     70 00 90 3D |  if_ae	jmp	#LR__0108
02100     21 2F 02 F6 | 	mov	local05, local15
02104     01 2E 06 F1 | 	add	local05, #1
02108     03 2E 66 F0 | 	shl	local05, #3
0210c     35 00 00 FF 
02110     0C E4 05 F1 | 	add	objptr, ##27148
02114     F2 2E 02 F1 | 	add	local05, objptr
02118     17 2D 02 FB | 	rdlong	local04, local05
0211c     21 31 02 F6 | 	mov	local06, local15
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     F2 30 02 F1 | 	add	local06, objptr
0212c     04 30 06 F1 | 	add	local06, #4
02130     18 2B 02 FB | 	rdlong	local03, local06
02134     21 31 02 F6 | 	mov	local06, local15
02138     03 30 66 F0 | 	shl	local06, #3
0213c     F2 3C 02 F6 | 	mov	local12, objptr
02140     F2 30 02 F1 | 	add	local06, objptr
02144     18 2D 62 FC | 	wrlong	local04, local06
02148     21 3B 02 F6 | 	mov	local11, local15
0214c     1D 3F 02 F6 | 	mov	local13, local11
02150     03 3E 66 F0 | 	shl	local13, #3
02154     F2 3E 02 F1 | 	add	local13, objptr
02158     04 3E 06 F1 | 	add	local13, #4
0215c     1F 2B 62 FC | 	wrlong	local03, local13
02160     01 42 06 F1 | 	add	local15, #1
02164     35 00 00 FF 
02168     0C E4 85 F1 | 	sub	objptr, ##27148
0216c     88 FF 9F FD | 	jmp	#LR__0106
02170                 | LR__0107
02170                 | LR__0108
02170     01 46 86 F1 | 	sub	local17, #1
02174     B2 01 00 FF 
02178     CF 14 06 F6 | 	mov	arg02, ##@LR__5413
0217c     25 13 02 F6 | 	mov	arg01, local19
02180     BC 47 B2 FD | 	call	#__system___string_cmp
02184     00 FA 0D F2 | 	cmp	result1, #0 wz
02188     23 29 52 52 |  if_ne	cmps	local02, local17 wc
0218c     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
02190                 | '   if p$<>"""" then k+=1:i+=1
02190     B2 01 00 FF 
02194     D1 14 06 F6 | 	mov	arg02, ##@LR__5414
02198     25 13 02 F6 | 	mov	arg01, local19
0219c     A0 47 B2 FD | 	call	#__system___string_cmp
021a0     00 FA 0D F2 | 	cmp	result1, #0 wz
021a4     01 46 06 51 |  if_ne	add	local17, #1
021a8     01 28 06 51 |  if_ne	add	local02, #1
021ac                 | LR__0109
021ac     23 29 52 F2 | 	cmps	local02, local17 wc
021b0     A0 FE 9F CD |  if_b	jmp	#LR__0104
021b4     00 28 06 F6 | 	mov	local02, #0
021b8                 | ' 
021b8                 | ' ' 1f : concatenate strings if "" detected between
021b8                 | '  
021b8                 | ' i=0
021b8                 | ' do
021b8                 | LR__0110
021b8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
021b8     14 2F 02 F6 | 	mov	local05, local02
021bc     03 2E 66 F0 | 	shl	local05, #3
021c0     35 00 00 FF 
021c4     0C E4 05 F1 | 	add	objptr, ##27148
021c8     F2 30 02 F6 | 	mov	local06, objptr
021cc     F2 2E 02 F1 | 	add	local05, objptr
021d0     17 13 02 FB | 	rdlong	arg01, local05
021d4     01 14 06 F6 | 	mov	arg02, #1
021d8     35 00 00 FF 
021dc     0C E4 85 F1 | 	sub	objptr, ##27148
021e0     3C 68 B2 FD | 	call	#__system__Right_S
021e4     FD 12 02 F6 | 	mov	arg01, result1
021e8     B2 01 00 FF 
021ec     D3 14 06 F6 | 	mov	arg02, ##@LR__5415
021f0     4C 47 B2 FD | 	call	#__system___string_cmp
021f4     00 FA 0D F2 | 	cmp	result1, #0 wz
021f8     7C 01 90 5D |  if_ne	jmp	#LR__0116
021fc     14 31 02 F6 | 	mov	local06, local02
02200     01 30 06 F1 | 	add	local06, #1
02204     03 30 66 F0 | 	shl	local06, #3
02208     35 00 00 FF 
0220c     0C E4 05 F1 | 	add	objptr, ##27148
02210     F2 3C 02 F6 | 	mov	local12, objptr
02214     F2 30 02 F1 | 	add	local06, objptr
02218     18 13 02 FB | 	rdlong	arg01, local06
0221c     01 14 06 F6 | 	mov	arg02, #1
02220     35 00 00 FF 
02224     0C E4 85 F1 | 	sub	objptr, ##27148
02228     6C 67 B2 FD | 	call	#__system__Left_S
0222c     FD 12 02 F6 | 	mov	arg01, result1
02230     B2 01 00 FF 
02234     D5 14 06 F6 | 	mov	arg02, ##@LR__5416
02238     04 47 B2 FD | 	call	#__system___string_cmp
0223c     00 FA 0D F2 | 	cmp	result1, #0 wz
02240     34 01 90 5D |  if_ne	jmp	#LR__0116
02244     14 39 02 F6 | 	mov	local10, local02
02248     03 38 66 F0 | 	shl	local10, #3
0224c     35 00 00 FF 
02250     0C E4 05 F1 | 	add	objptr, ##27148
02254     F2 38 02 F1 | 	add	local10, objptr
02258     14 41 02 F6 | 	mov	local14, local02
0225c     03 40 66 F0 | 	shl	local14, #3
02260     F2 40 02 F1 | 	add	local14, objptr
02264     20 31 02 FB | 	rdlong	local06, local14
02268     14 3F 02 F6 | 	mov	local13, local02
0226c     01 3E 06 F1 | 	add	local13, #1
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     1F 3D 02 FB | 	rdlong	local12, local13
0227c     14 51 02 F6 | 	mov	local22, local02
02280     01 50 06 F1 | 	add	local22, #1
02284     28 53 02 F6 | 	mov	local23, local22
02288     03 52 66 F0 | 	shl	local23, #3
0228c     F2 54 02 F6 | 	mov	local24, objptr
02290     F2 52 02 F1 | 	add	local23, objptr
02294     29 13 02 FB | 	rdlong	arg01, local23
02298     35 00 00 FF 
0229c     0C E4 85 F1 | 	sub	objptr, ##27148
022a0     09 33 02 F6 | 	mov	local07, arg01
022a4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
022a8                 | LR__0111
022a8     19 FB C9 FA | 	rdbyte	result1, local07 wz
022ac     01 32 06 51 |  if_ne	add	local07, #1
022b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
022b4                 | LR__0112
022b4     09 33 82 F1 | 	sub	local07, arg01
022b8     19 3B 02 F6 | 	mov	local11, local07
022bc     01 3A 86 F1 | 	sub	local11, #1
022c0     1E 13 02 F6 | 	mov	arg01, local12
022c4     1D 15 02 F6 | 	mov	arg02, local11
022c8     54 67 B2 FD | 	call	#__system__Right_S
022cc     FD 3C 02 F6 | 	mov	local12, result1
022d0     18 13 02 F6 | 	mov	arg01, local06
022d4     1E 15 02 F6 | 	mov	arg02, local12
022d8     98 46 B2 FD | 	call	#__system___string_concat
022dc     FD 30 02 F6 | 	mov	local06, result1
022e0     1C 31 62 FC | 	wrlong	local06, local10
022e4                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
022e4     14 43 02 F6 | 	mov	local15, local02
022e8     01 42 06 F1 | 	add	local15, #1
022ec     23 57 02 F6 | 	mov	local25, local17
022f0     01 56 06 F1 | 	add	local25, #1
022f4     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
022f8                 | LR__0113
022f8     2B 43 52 F2 | 	cmps	local15, local25 wc
022fc     70 00 90 3D |  if_ae	jmp	#LR__0115
02300     21 2F 02 F6 | 	mov	local05, local15
02304     01 2E 06 F1 | 	add	local05, #1
02308     03 2E 66 F0 | 	shl	local05, #3
0230c     35 00 00 FF 
02310     0C E4 05 F1 | 	add	objptr, ##27148
02314     F2 2E 02 F1 | 	add	local05, objptr
02318     17 2D 02 FB | 	rdlong	local04, local05
0231c     21 31 02 F6 | 	mov	local06, local15
02320     01 30 06 F1 | 	add	local06, #1
02324     03 30 66 F0 | 	shl	local06, #3
02328     F2 30 02 F1 | 	add	local06, objptr
0232c     04 30 06 F1 | 	add	local06, #4
02330     18 2B 02 FB | 	rdlong	local03, local06
02334     21 31 02 F6 | 	mov	local06, local15
02338     03 30 66 F0 | 	shl	local06, #3
0233c     F2 3C 02 F6 | 	mov	local12, objptr
02340     F2 30 02 F1 | 	add	local06, objptr
02344     18 2D 62 FC | 	wrlong	local04, local06
02348     21 3B 02 F6 | 	mov	local11, local15
0234c     1D 3F 02 F6 | 	mov	local13, local11
02350     03 3E 66 F0 | 	shl	local13, #3
02354     F2 3E 02 F1 | 	add	local13, objptr
02358     04 3E 06 F1 | 	add	local13, #4
0235c     1F 2B 62 FC | 	wrlong	local03, local13
02360     01 42 06 F1 | 	add	local15, #1
02364     35 00 00 FF 
02368     0C E4 85 F1 | 	sub	objptr, ##27148
0236c     88 FF 9F FD | 	jmp	#LR__0113
02370                 | LR__0114
02370                 | LR__0115
02370     01 28 86 F1 | 	sub	local02, #1
02374     01 46 86 F1 | 	sub	local17, #1
02378                 | LR__0116
02378     01 28 06 F1 | 	add	local02, #1
0237c     23 29 52 F2 | 	cmps	local02, local17 wc
02380     34 FE 9F CD |  if_b	jmp	#LR__0110
02384     00 28 06 F6 | 	mov	local02, #0
02388                 | '  
02388                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
02388                 | '  
02388                 | ' i=0 
02388                 | ' do
02388                 | LR__0117
02388     14 39 02 F6 | 	mov	local10, local02
0238c     03 38 66 F0 | 	shl	local10, #3
02390     35 00 00 FF 
02394     0C E4 05 F1 | 	add	objptr, ##27148
02398     F2 38 02 F1 | 	add	local10, objptr
0239c     1C 59 02 FB | 	rdlong	local26, local10
023a0     14 39 02 F6 | 	mov	local10, local02
023a4     01 38 06 F1 | 	add	local10, #1
023a8     03 38 66 F0 | 	shl	local10, #3
023ac     F2 38 02 F1 | 	add	local10, objptr
023b0     1C 5B 02 FB | 	rdlong	local27, local10
023b4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
023b4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
023b4     B2 01 00 FF 
023b8     D7 14 06 F6 | 	mov	arg02, ##@LR__5417
023bc     2C 13 02 F6 | 	mov	arg01, local26
023c0     35 00 00 FF 
023c4     0C E4 85 F1 | 	sub	objptr, ##27148
023c8     74 45 B2 FD | 	call	#__system___string_cmp
023cc     00 FA 0D F2 | 	cmp	result1, #0 wz
023d0     A8 00 90 AD |  if_e	jmp	#LR__0118
023d4     B2 01 00 FF 
023d8     D9 14 06 F6 | 	mov	arg02, ##@LR__5418
023dc     2C 13 02 F6 | 	mov	arg01, local26
023e0     5C 45 B2 FD | 	call	#__system___string_cmp
023e4     FD 2A 0A F6 | 	mov	local03, result1 wz
023e8     90 00 90 AD |  if_e	jmp	#LR__0118
023ec     B2 01 00 FF 
023f0     DB 30 06 F6 | 	mov	local06, ##@LR__5419
023f4     2C 13 02 F6 | 	mov	arg01, local26
023f8     18 15 02 F6 | 	mov	arg02, local06
023fc     40 45 B2 FD | 	call	#__system___string_cmp
02400     00 FA 0D F2 | 	cmp	result1, #0 wz
02404     74 00 90 AD |  if_e	jmp	#LR__0118
02408     B2 01 00 FF 
0240c     DD 3C 06 F6 | 	mov	local12, ##@LR__5420
02410     2C 13 02 F6 | 	mov	arg01, local26
02414     1E 15 02 F6 | 	mov	arg02, local12
02418     24 45 B2 FD | 	call	#__system___string_cmp
0241c     00 FA 0D F2 | 	cmp	result1, #0 wz
02420     58 00 90 AD |  if_e	jmp	#LR__0118
02424     B2 01 00 FF 
02428     DF 3A 06 F6 | 	mov	local11, ##@LR__5421
0242c     1D 3D 02 F6 | 	mov	local12, local11
02430     2C 13 02 F6 | 	mov	arg01, local26
02434     1E 15 02 F6 | 	mov	arg02, local12
02438     04 45 B2 FD | 	call	#__system___string_cmp
0243c     FD 30 0A F6 | 	mov	local06, result1 wz
02440     38 00 90 AD |  if_e	jmp	#LR__0118
02444     B2 01 00 FF 
02448     E1 3A 06 F6 | 	mov	local11, ##@LR__5422
0244c     2C 13 02 F6 | 	mov	arg01, local26
02450     1D 15 02 F6 | 	mov	arg02, local11
02454     E8 44 B2 FD | 	call	#__system___string_cmp
02458     FD 3C 0A F6 | 	mov	local12, result1 wz
0245c     1C 00 90 AD |  if_e	jmp	#LR__0118
02460     B2 01 00 FF 
02464     E3 40 06 F6 | 	mov	local14, ##@LR__5423
02468     2C 13 02 F6 | 	mov	arg01, local26
0246c     20 15 02 F6 | 	mov	arg02, local14
02470     CC 44 B2 FD | 	call	#__system___string_cmp
02474     FD 3A 0A F6 | 	mov	local11, result1 wz
02478     20 00 90 5D |  if_ne	jmp	#LR__0119
0247c                 | LR__0118
0247c     B2 01 00 FF 
02480     E5 5C 06 F6 | 	mov	local28, ##@LR__5424
02484     2E 3F 02 F6 | 	mov	local13, local28
02488     2D 13 02 F6 | 	mov	arg01, local27
0248c     1F 15 02 F6 | 	mov	arg02, local13
02490     AC 44 B2 FD | 	call	#__system___string_cmp
02494     FD 40 0A F6 | 	mov	local14, result1 wz
02498     B8 00 90 AD |  if_e	jmp	#LR__0122
0249c                 | LR__0119
0249c     B2 01 00 FF 
024a0     E7 5C 06 F6 | 	mov	local28, ##@LR__5425
024a4     2C 13 02 F6 | 	mov	arg01, local26
024a8     2E 15 02 F6 | 	mov	arg02, local28
024ac     90 44 B2 FD | 	call	#__system___string_cmp
024b0     FD 3E 0A F6 | 	mov	local13, result1 wz
024b4     20 00 90 5D |  if_ne	jmp	#LR__0120
024b8     B2 01 00 FF 
024bc     E9 52 06 F6 | 	mov	local23, ##@LR__5426
024c0     29 51 02 F6 | 	mov	local22, local23
024c4     2D 13 02 F6 | 	mov	arg01, local27
024c8     28 15 02 F6 | 	mov	arg02, local22
024cc     70 44 B2 FD | 	call	#__system___string_cmp
024d0     FD 5C 0A F6 | 	mov	local28, result1 wz
024d4     7C 00 90 AD |  if_e	jmp	#LR__0122
024d8                 | LR__0120
024d8     B2 01 00 FF 
024dc     EB 52 06 F6 | 	mov	local23, ##@LR__5427
024e0     2C 13 02 F6 | 	mov	arg01, local26
024e4     29 15 02 F6 | 	mov	arg02, local23
024e8     54 44 B2 FD | 	call	#__system___string_cmp
024ec     FD 50 0A F6 | 	mov	local22, result1 wz
024f0     20 00 90 5D |  if_ne	jmp	#LR__0121
024f4     B2 01 00 FF 
024f8     ED 5E 06 F6 | 	mov	local29, ##@LR__5428
024fc     2F 55 02 F6 | 	mov	local24, local29
02500     2D 13 02 F6 | 	mov	arg01, local27
02504     2A 15 02 F6 | 	mov	arg02, local24
02508     34 44 B2 FD | 	call	#__system___string_cmp
0250c     FD 52 0A F6 | 	mov	local23, result1 wz
02510     40 00 90 AD |  if_e	jmp	#LR__0122
02514                 | LR__0121
02514     B2 01 00 FF 
02518     EF 60 06 F6 | 	mov	local30, ##@LR__5429
0251c     30 5F 02 F6 | 	mov	local29, local30
02520     2C 13 02 F6 | 	mov	arg01, local26
02524     2F 15 02 F6 | 	mov	arg02, local29
02528     14 44 B2 FD | 	call	#__system___string_cmp
0252c     FD 54 0A F6 | 	mov	local24, result1 wz
02530     F0 00 90 5D |  if_ne	jmp	#LR__0126
02534     B2 01 00 FF 
02538     F1 62 06 F6 | 	mov	local31, ##@LR__5430
0253c     31 61 02 F6 | 	mov	local30, local31
02540     2D 13 02 F6 | 	mov	arg01, local27
02544     30 15 02 F6 | 	mov	arg02, local30
02548     F4 43 B2 FD | 	call	#__system___string_cmp
0254c     FD 5E 0A F6 | 	mov	local29, result1 wz
02550     D0 00 90 5D |  if_ne	jmp	#LR__0126
02554                 | LR__0122
02554     14 39 02 F6 | 	mov	local10, local02
02558     03 38 66 F0 | 	shl	local10, #3
0255c     35 00 00 FF 
02560     0C E4 05 F1 | 	add	objptr, ##27148
02564     F2 38 02 F1 | 	add	local10, objptr
02568     2D 3D 02 F6 | 	mov	local12, local27
0256c     2C 13 02 F6 | 	mov	arg01, local26
02570     1E 15 02 F6 | 	mov	arg02, local12
02574     35 00 00 FF 
02578     0C E4 85 F1 | 	sub	objptr, ##27148
0257c     F4 43 B2 FD | 	call	#__system___string_concat
02580     1C FB 61 FC | 	wrlong	result1, local10
02584                 | '     lparts(i).part$=s1$+s2$
02584                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
02584     14 43 02 F6 | 	mov	local15, local02
02588     01 42 06 F1 | 	add	local15, #1
0258c     23 65 02 F6 | 	mov	local32, local17
02590     01 64 06 F1 | 	add	local32, #1
02594     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
02598                 | LR__0123
02598     32 43 52 F2 | 	cmps	local15, local32 wc
0259c     7C 00 90 3D |  if_ae	jmp	#LR__0125
025a0     21 2F 02 F6 | 	mov	local05, local15
025a4     01 2E 06 F1 | 	add	local05, #1
025a8     03 2E 66 F0 | 	shl	local05, #3
025ac     35 00 00 FF 
025b0     0C E4 05 F1 | 	add	objptr, ##27148
025b4     F2 2E 02 F1 | 	add	local05, objptr
025b8     17 2D 02 FB | 	rdlong	local04, local05
025bc     21 31 02 F6 | 	mov	local06, local15
025c0     01 30 06 F1 | 	add	local06, #1
025c4     03 30 66 F0 | 	shl	local06, #3
025c8     F2 30 02 F1 | 	add	local06, objptr
025cc     04 30 06 F1 | 	add	local06, #4
025d0     18 2B 02 FB | 	rdlong	local03, local06
025d4     21 31 02 F6 | 	mov	local06, local15
025d8     03 30 66 F0 | 	shl	local06, #3
025dc     F2 3C 02 F6 | 	mov	local12, objptr
025e0     F2 30 02 F1 | 	add	local06, objptr
025e4     18 2D 62 FC | 	wrlong	local04, local06
025e8     21 3B 02 F6 | 	mov	local11, local15
025ec     1D 41 02 F6 | 	mov	local14, local11
025f0     20 3F 02 F6 | 	mov	local13, local14
025f4     03 3E 66 F0 | 	shl	local13, #3
025f8     F2 5C 02 F6 | 	mov	local28, objptr
025fc     F2 3E 02 F1 | 	add	local13, objptr
02600     04 3E 06 F1 | 	add	local13, #4
02604     1F 2B 62 FC | 	wrlong	local03, local13
02608     04 3E 86 F1 | 	sub	local13, #4
0260c     01 42 06 F1 | 	add	local15, #1
02610     35 00 00 FF 
02614     0C E4 85 F1 | 	sub	objptr, ##27148
02618     7C FF 9F FD | 	jmp	#LR__0123
0261c                 | LR__0124
0261c                 | LR__0125
0261c     01 28 86 F1 | 	sub	local02, #1
02620     01 46 86 F1 | 	sub	local17, #1
02624                 | LR__0126
02624     01 28 06 F1 | 	add	local02, #1
02628     23 29 52 F2 | 	cmps	local02, local17 wc
0262c     58 FD 9F CD |  if_b	jmp	#LR__0117
02630                 | '  
02630                 | ' ' 1h : now remove parts that are spaces
02630                 | ' 
02630                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02630     00 28 06 F6 | 	mov	local02, #0
02634     23 67 02 F6 | 	mov	local33, local17
02638     01 66 06 F1 | 	add	local33, #1
0263c                 | LR__0127
0263c     33 29 52 F2 | 	cmps	local02, local33 wc
02640     50 00 90 3D |  if_ae	jmp	#LR__0128
02644     14 39 02 F6 | 	mov	local10, local02
02648     03 38 66 F0 | 	shl	local10, #3
0264c     35 00 00 FF 
02650     0C E4 05 F1 | 	add	objptr, ##27148
02654     F2 38 02 F1 | 	add	local10, objptr
02658     14 3D 02 F6 | 	mov	local12, local02
0265c     1E 3B 02 F6 | 	mov	local11, local12
02660     1D 41 02 F6 | 	mov	local14, local11
02664     03 40 66 F0 | 	shl	local14, #3
02668     F2 3E 02 F6 | 	mov	local13, objptr
0266c     F2 40 02 F1 | 	add	local14, objptr
02670     20 13 02 FB | 	rdlong	arg01, local14
02674     35 00 00 FF 
02678     0C E4 85 F1 | 	sub	objptr, ##27148
0267c     A8 67 B2 FD | 	call	#__system__RTrim_S
02680     FD 12 02 F6 | 	mov	arg01, result1
02684     E0 66 B2 FD | 	call	#__system__LTrim_S
02688     1C FB 61 FC | 	wrlong	result1, local10
0268c     01 28 06 F1 | 	add	local02, #1
02690     A8 FF 9F FD | 	jmp	#LR__0127
02694                 | LR__0128
02694     00 28 06 F6 | 	mov	local02, #0
02698     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
0269c                 | ' i=0
0269c                 | ' do 
0269c                 | LR__0129
0269c                 | '   if len(lparts(i).part$)=0 then 
0269c     14 2F 02 F6 | 	mov	local05, local02
026a0     03 2E 66 F0 | 	shl	local05, #3
026a4     35 00 00 FF 
026a8     0C E4 05 F1 | 	add	objptr, ##27148
026ac     F2 2E 02 F1 | 	add	local05, objptr
026b0     17 13 02 FB | 	rdlong	arg01, local05
026b4     35 00 00 FF 
026b8     0C E4 85 F1 | 	sub	objptr, ##27148
026bc     09 33 02 F6 | 	mov	local07, arg01
026c0                 | LR__0130
026c0     19 FB C9 FA | 	rdbyte	result1, local07 wz
026c4     01 32 06 51 |  if_ne	add	local07, #1
026c8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
026cc     09 33 8A F1 | 	sub	local07, arg01 wz
026d0     C4 00 90 5D |  if_ne	jmp	#LR__0134
026d4                 | '     if i=k-1 then k-=1  :  exit
026d4     23 2D 02 F6 | 	mov	local04, local17
026d8     01 2C 86 F1 | 	sub	local04, #1
026dc     16 29 0A F2 | 	cmp	local02, local04 wz
026e0     01 46 86 A1 |  if_e	sub	local17, #1
026e4     C4 00 90 AD |  if_e	jmp	#LR__0136
026e8                 | '     if i<k-1 then 
026e8     23 2D 02 F6 | 	mov	local04, local17
026ec     01 2C 86 F1 | 	sub	local04, #1
026f0     16 29 52 F2 | 	cmps	local02, local04 wc
026f4     A0 00 90 3D |  if_ae	jmp	#LR__0133
026f8                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
026f8     14 43 02 F6 | 	mov	local15, local02
026fc     23 69 02 F6 | 	mov	local34, local17
02700     01 68 86 F1 | 	sub	local34, #1
02704                 | LR__0131
02704     34 43 52 F2 | 	cmps	local15, local34 wc
02708     80 00 90 3D |  if_ae	jmp	#LR__0132
0270c     21 2F 02 F6 | 	mov	local05, local15
02710     01 2E 06 F1 | 	add	local05, #1
02714     03 2E 66 F0 | 	shl	local05, #3
02718     35 00 00 FF 
0271c     0C E4 05 F1 | 	add	objptr, ##27148
02720     F2 2E 02 F1 | 	add	local05, objptr
02724     17 2D 02 FB | 	rdlong	local04, local05
02728     21 31 02 F6 | 	mov	local06, local15
0272c     01 30 06 F1 | 	add	local06, #1
02730     03 30 66 F0 | 	shl	local06, #3
02734     F2 30 02 F1 | 	add	local06, objptr
02738     04 30 06 F1 | 	add	local06, #4
0273c     18 2B 02 FB | 	rdlong	local03, local06
02740     21 39 02 F6 | 	mov	local10, local15
02744     1C 31 02 F6 | 	mov	local06, local10
02748     03 30 66 F0 | 	shl	local06, #3
0274c     F2 3C 02 F6 | 	mov	local12, objptr
02750     F2 30 02 F1 | 	add	local06, objptr
02754     18 2D 62 FC | 	wrlong	local04, local06
02758     21 3B 02 F6 | 	mov	local11, local15
0275c     1D 41 02 F6 | 	mov	local14, local11
02760     20 3F 02 F6 | 	mov	local13, local14
02764     03 3E 66 F0 | 	shl	local13, #3
02768     F2 5C 02 F6 | 	mov	local28, objptr
0276c     F2 3E 02 F1 | 	add	local13, objptr
02770     04 3E 06 F1 | 	add	local13, #4
02774     1F 2B 62 FC | 	wrlong	local03, local13
02778     04 3E 86 F1 | 	sub	local13, #4
0277c     01 42 06 F1 | 	add	local15, #1
02780     35 00 00 FF 
02784     0C E4 85 F1 | 	sub	objptr, ##27148
02788     78 FF 9F FD | 	jmp	#LR__0131
0278c                 | LR__0132
0278c     01 46 86 F1 | 	sub	local17, #1
02790                 | '       if i>0 then i-=1 
02790     01 28 56 F2 | 	cmps	local02, #1 wc
02794     01 28 86 31 |  if_ae	sub	local02, #1
02798                 | LR__0133
02798                 | LR__0134
02798     01 28 06 F1 | 	add	local02, #1
0279c     23 2D 02 F6 | 	mov	local04, local17
027a0     01 2C 86 F1 | 	sub	local04, #1
027a4     16 29 5A F2 | 	cmps	local02, local04 wcz
027a8     F0 FE 9F ED |  if_be	jmp	#LR__0129
027ac                 | LR__0135
027ac                 | LR__0136
027ac                 | ' 
027ac                 | ' ' 1i: lowercase all that is not a string
027ac                 | ' 
027ac                 | ' for j=0 to k-1
027ac     00 42 06 F6 | 	mov	local15, #0
027b0     23 6B 02 F6 | 	mov	local35, local17
027b4                 | LR__0137
027b4     35 43 52 F2 | 	cmps	local15, local35 wc
027b8     CC 00 90 3D |  if_ae	jmp	#LR__0140
027bc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
027bc     21 2F 02 F6 | 	mov	local05, local15
027c0     03 2E 66 F0 | 	shl	local05, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 2E 02 F1 | 	add	local05, objptr
027d0     17 13 02 FB | 	rdlong	arg01, local05
027d4     01 14 06 F6 | 	mov	arg02, #1
027d8     35 00 00 FF 
027dc     0C E4 85 F1 | 	sub	objptr, ##27148
027e0     B4 61 B2 FD | 	call	#__system__Left_S
027e4     FD 12 02 F6 | 	mov	arg01, result1
027e8     B2 01 00 FF 
027ec     F3 14 06 F6 | 	mov	arg02, ##@LR__5431
027f0     4C 41 B2 FD | 	call	#__system___string_cmp
027f4     00 FA 0D F2 | 	cmp	result1, #0 wz
027f8     44 00 90 5D |  if_ne	jmp	#LR__0138
027fc     21 31 02 F6 | 	mov	local06, local15
02800     03 30 66 F0 | 	shl	local06, #3
02804     35 00 00 FF 
02808     0C E4 05 F1 | 	add	objptr, ##27148
0280c     F2 3C 02 F6 | 	mov	local12, objptr
02810     F2 30 02 F1 | 	add	local06, objptr
02814     18 13 02 FB | 	rdlong	arg01, local06
02818     01 14 06 F6 | 	mov	arg02, #1
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     F8 61 B2 FD | 	call	#__system__Right_S
02828     FD 12 02 F6 | 	mov	arg01, result1
0282c     B2 01 00 FF 
02830     F5 14 06 F6 | 	mov	arg02, ##@LR__5432
02834     08 41 B2 FD | 	call	#__system___string_cmp
02838     00 FA 0D F2 | 	cmp	result1, #0 wz
0283c     40 00 90 AD |  if_e	jmp	#LR__0139
02840                 | LR__0138
02840     21 39 02 F6 | 	mov	local10, local15
02844     03 38 66 F0 | 	shl	local10, #3
02848     35 00 00 FF 
0284c     0C E4 05 F1 | 	add	objptr, ##27148
02850     F2 38 02 F1 | 	add	local10, objptr
02854     21 3D 02 F6 | 	mov	local12, local15
02858     1E 3B 02 F6 | 	mov	local11, local12
0285c     1D 41 02 F6 | 	mov	local14, local11
02860     03 40 66 F0 | 	shl	local14, #3
02864     F2 3E 02 F6 | 	mov	local13, objptr
02868     F2 40 02 F1 | 	add	local14, objptr
0286c     20 13 02 FB | 	rdlong	arg01, local14
02870     35 00 00 FF 
02874     0C E4 85 F1 | 	sub	objptr, ##27148
02878     2C 64 B2 FD | 	call	#__system__LCase_S
0287c     1C FB 61 FC | 	wrlong	result1, local10
02880                 | LR__0139
02880     01 42 06 F1 | 	add	local15, #1
02884     2C FF 9F FD | 	jmp	#LR__0137
02888                 | LR__0140
02888                 | ' 
02888                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
02888                 | ' 
02888                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
02888     00 28 06 F6 | 	mov	local02, #0
0288c     23 6D 02 F6 | 	mov	local36, local17
02890     01 6C 06 F1 | 	add	local36, #1
02894     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
02898                 | LR__0141
02898     36 29 52 F2 | 	cmps	local02, local36 wc
0289c     30 00 90 3D |  if_ae	jmp	#LR__0143
028a0     14 39 02 F6 | 	mov	local10, local02
028a4     03 38 66 F0 | 	shl	local10, #3
028a8     35 00 00 FF 
028ac     0C E4 05 F1 | 	add	objptr, ##27148
028b0     F2 38 02 F1 | 	add	local10, objptr
028b4     04 38 06 F1 | 	add	local10, #4
028b8     FF FF FF FF 
028bc     1C FF 6B FC | 	wrlong	##-1, local10
028c0     01 28 06 F1 | 	add	local02, #1
028c4     35 00 00 FF 
028c8     0C E4 85 F1 | 	sub	objptr, ##27148
028cc     C8 FF 9F FD | 	jmp	#LR__0141
028d0                 | LR__0142
028d0                 | LR__0143
028d0                 | ' 
028d0                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 12 02 FB | 	rdlong	arg01, objptr
028dc     35 00 00 FF 
028e0     0C E4 85 F1 | 	sub	objptr, ##27148
028e4     B4 45 B0 FD | 	call	#_isdec
028e8     00 FA 0D F2 | 	cmp	result1, #0 wz
028ec     01 6E 06 56 |  if_ne	mov	local37, #1
028f0     00 6E 06 A6 |  if_e	mov	local37, #0
028f4                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
028f4     35 00 00 FF 
028f8     0C E4 05 F1 | 	add	objptr, ##27148
028fc     F2 12 02 FB | 	rdlong	arg01, objptr
02900     35 00 00 FF 
02904     0C E4 85 F1 | 	sub	objptr, ##27148
02908     B2 01 00 FF 
0290c     F7 14 06 F6 | 	mov	arg02, ##@LR__5433
02910     2C 40 B2 FD | 	call	#__system___string_cmp
02914     00 FA 0D F2 | 	cmp	result1, #0 wz
02918     01 6E 06 A6 |  if_e	mov	local37, #1
0291c     00 28 06 F6 | 	mov	local02, #0
02920                 | ' i=0 : do 
02920                 | LR__0144
02920                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
02920     14 2F 02 F6 | 	mov	local05, local02
02924     03 2E 66 F0 | 	shl	local05, #3
02928     35 00 00 FF 
0292c     0C E4 05 F1 | 	add	objptr, ##27148
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 13 02 FB | 	rdlong	arg01, local05
02938     B2 01 00 FF 
0293c     FC 14 06 F6 | 	mov	arg02, ##@LR__5434
02940     35 00 00 FF 
02944     0C E4 85 F1 | 	sub	objptr, ##27148
02948     F4 3F B2 FD | 	call	#__system___string_cmp
0294c     00 FA 0D F2 | 	cmp	result1, #0 wz
02950     0C 00 90 AD |  if_e	jmp	#LR__0145
02954     01 28 06 F1 | 	add	local02, #1
02958     23 29 5A F2 | 	cmps	local02, local17 wcz
0295c     C0 FF 9F ED |  if_be	jmp	#LR__0144
02960                 | LR__0145
02960                 | ' if i<k then addptr=i+1	 							' then found
02960     23 29 52 F2 | 	cmps	local02, local17 wc
02964     14 6F 02 C6 |  if_b	mov	local37, local02
02968     01 6E 06 C1 |  if_b	add	local37, #1
0296c     35 00 00 FF 
02970     0C E4 05 F1 | 	add	objptr, ##27148
02974                 | ' lp$=lparts(addptr).part$ 
02974                 | ' 
02974                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02974     37 2F 02 F6 | 	mov	local05, local37
02978     03 2E 66 F0 | 	shl	local05, #3
0297c     F2 2E 02 F1 | 	add	local05, objptr
02980     17 13 02 FB | 	rdlong	arg01, local05
02984     01 14 06 F6 | 	mov	arg02, #1
02988     35 00 00 FF 
0298c     0C E4 85 F1 | 	sub	objptr, ##27148
02990     04 60 B2 FD | 	call	#__system__Left_S
02994     FD 12 02 F6 | 	mov	arg01, result1
02998     B2 01 00 FF 
0299c     01 15 06 F6 | 	mov	arg02, ##@LR__5435
029a0     9C 3F B2 FD | 	call	#__system___string_cmp
029a4     00 FA 0D F2 | 	cmp	result1, #0 wz
029a8     60 01 90 5D |  if_ne	jmp	#LR__0152
029ac     37 31 02 F6 | 	mov	local06, local37
029b0     03 30 66 F0 | 	shl	local06, #3
029b4     35 00 00 FF 
029b8     0C E4 05 F1 | 	add	objptr, ##27148
029bc     F2 30 02 F1 | 	add	local06, objptr
029c0     18 13 02 FB | 	rdlong	arg01, local06
029c4     35 00 00 FF 
029c8     0C E4 85 F1 | 	sub	objptr, ##27148
029cc     09 33 02 F6 | 	mov	local07, arg01
029d0     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
029d4                 | LR__0146
029d4     19 FB C9 FA | 	rdbyte	result1, local07 wz
029d8     01 32 06 51 |  if_ne	add	local07, #1
029dc     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
029e0                 | LR__0147
029e0     09 33 82 F1 | 	sub	local07, arg01
029e4     02 32 56 F2 | 	cmps	local07, #2 wc
029e8     20 01 90 CD |  if_b	jmp	#LR__0152
029ec     01 46 06 F1 | 	add	local17, #1
029f0                 | '   k+=1
029f0                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
029f0     23 29 02 F6 | 	mov	local02, local17
029f4     37 71 02 F6 | 	mov	local38, local37
029f8     01 70 06 F1 | 	add	local38, #1
029fc     35 00 00 FF 
02a00     0C E4 05 F1 | 	add	objptr, ##27148
02a04     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02a08                 | LR__0148
02a08     14 2F 02 F6 | 	mov	local05, local02
02a0c     01 2E 86 F1 | 	sub	local05, #1
02a10     03 2E 66 F0 | 	shl	local05, #3
02a14     F2 2E 02 F1 | 	add	local05, objptr
02a18     17 2D 02 FB | 	rdlong	local04, local05
02a1c     14 31 02 F6 | 	mov	local06, local02
02a20     01 30 86 F1 | 	sub	local06, #1
02a24     03 30 66 F0 | 	shl	local06, #3
02a28     F2 30 02 F1 | 	add	local06, objptr
02a2c     04 30 06 F1 | 	add	local06, #4
02a30     18 2B 02 FB | 	rdlong	local03, local06
02a34     14 31 02 F6 | 	mov	local06, local02
02a38     03 30 66 F0 | 	shl	local06, #3
02a3c     F2 30 02 F1 | 	add	local06, objptr
02a40     18 2D 62 FC | 	wrlong	local04, local06
02a44     14 3F 02 F6 | 	mov	local13, local02
02a48     03 3E 66 F0 | 	shl	local13, #3
02a4c     F2 3E 02 F1 | 	add	local13, objptr
02a50     04 3E 06 F1 | 	add	local13, #4
02a54     1F 2B 62 FC | 	wrlong	local03, local13
02a58     01 28 86 F1 | 	sub	local02, #1
02a5c     38 29 52 F2 | 	cmps	local02, local38 wc
02a60     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02a64                 | LR__0149
02a64     37 39 02 F6 | 	mov	local10, local37
02a68     01 38 06 F1 | 	add	local10, #1
02a6c     03 38 66 F0 | 	shl	local10, #3
02a70     F2 38 02 F1 | 	add	local10, objptr
02a74     37 41 02 F6 | 	mov	local14, local37
02a78     03 40 66 F0 | 	shl	local14, #3
02a7c     F2 40 02 F1 | 	add	local14, objptr
02a80     20 31 02 FB | 	rdlong	local06, local14
02a84     37 3F 02 F6 | 	mov	local13, local37
02a88     1F 5D 02 F6 | 	mov	local28, local13
02a8c     2E 51 02 F6 | 	mov	local22, local28
02a90     03 50 66 F0 | 	shl	local22, #3
02a94     F2 52 02 F6 | 	mov	local23, objptr
02a98     F2 50 02 F1 | 	add	local22, objptr
02a9c     28 13 02 FB | 	rdlong	arg01, local22
02aa0     35 00 00 FF 
02aa4     0C E4 85 F1 | 	sub	objptr, ##27148
02aa8     09 33 02 F6 | 	mov	local07, arg01
02aac     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
02ab0                 | LR__0150
02ab0     19 FB C9 FA | 	rdbyte	result1, local07 wz
02ab4     01 32 06 51 |  if_ne	add	local07, #1
02ab8     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
02abc                 | LR__0151
02abc     09 33 82 F1 | 	sub	local07, arg01
02ac0     19 41 02 F6 | 	mov	local14, local07
02ac4     20 3B 02 F6 | 	mov	local11, local14
02ac8     01 3A 86 F1 | 	sub	local11, #1
02acc     1D 3D 02 F6 | 	mov	local12, local11
02ad0     18 13 02 F6 | 	mov	arg01, local06
02ad4     1E 15 02 F6 | 	mov	arg02, local12
02ad8     44 5F B2 FD | 	call	#__system__Right_S
02adc     1C FB 61 FC | 	wrlong	result1, local10
02ae0     37 39 02 F6 | 	mov	local10, local37
02ae4     03 38 66 F0 | 	shl	local10, #3
02ae8     35 00 00 FF 
02aec     0C E4 05 F1 | 	add	objptr, ##27148
02af0     F2 38 02 F1 | 	add	local10, objptr
02af4     B2 01 00 FF 
02af8     03 31 06 F6 | 	mov	local06, ##@LR__5436
02afc     1C 31 62 FC | 	wrlong	local06, local10
02b00     35 00 00 FF 
02b04     0C E4 85 F1 | 	sub	objptr, ##27148
02b08     A8 01 90 FD | 	jmp	#LR__0160
02b0c                 | LR__0152
02b0c     37 31 02 F6 | 	mov	local06, local37
02b10     03 30 66 F0 | 	shl	local06, #3
02b14     35 00 00 FF 
02b18     0C E4 05 F1 | 	add	objptr, ##27148
02b1c     F2 3C 02 F6 | 	mov	local12, objptr
02b20     F2 30 02 F1 | 	add	local06, objptr
02b24     18 15 02 FB | 	rdlong	arg02, local06
02b28     B2 01 00 FF 
02b2c     05 17 06 F6 | 	mov	arg03, ##@LR__5437
02b30     01 12 06 F6 | 	mov	arg01, #1
02b34     35 00 00 FF 
02b38     0C E4 85 F1 | 	sub	objptr, ##27148
02b3c     A0 63 B2 FD | 	call	#__system__Instr
02b40     FD 72 02 F6 | 	mov	local39, result1
02b44                 | ' 
02b44                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
02b44                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
02b44     01 72 56 F2 | 	cmps	local39, #1 wc
02b48     68 01 90 CD |  if_b	jmp	#LR__0159
02b4c     37 2F 02 F6 | 	mov	local05, local37
02b50     03 2E 66 F0 | 	shl	local05, #3
02b54     35 00 00 FF 
02b58     0C E4 05 F1 | 	add	objptr, ##27148
02b5c     F2 2E 02 F1 | 	add	local05, objptr
02b60     17 13 02 FB | 	rdlong	arg01, local05
02b64     35 00 00 FF 
02b68     0C E4 85 F1 | 	sub	objptr, ##27148
02b6c     09 33 02 F6 | 	mov	local07, arg01
02b70     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02b74                 | LR__0153
02b74     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b78     01 32 06 51 |  if_ne	add	local07, #1
02b7c     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02b80                 | LR__0154
02b80     09 33 82 F1 | 	sub	local07, arg01
02b84     19 73 52 F2 | 	cmps	local39, local07 wc
02b88     28 01 90 3D |  if_ae	jmp	#LR__0159
02b8c     01 46 06 F1 | 	add	local17, #1
02b90                 | '   k+=1
02b90                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02b90     23 29 02 F6 | 	mov	local02, local17
02b94     37 75 02 F6 | 	mov	local40, local37
02b98     01 74 06 F1 | 	add	local40, #1
02b9c     35 00 00 FF 
02ba0     0C E4 05 F1 | 	add	objptr, ##27148
02ba4     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ba8                 | LR__0155
02ba8     14 2F 02 F6 | 	mov	local05, local02
02bac     01 2E 86 F1 | 	sub	local05, #1
02bb0     03 2E 66 F0 | 	shl	local05, #3
02bb4     F2 2E 02 F1 | 	add	local05, objptr
02bb8     17 2D 02 FB | 	rdlong	local04, local05
02bbc     14 31 02 F6 | 	mov	local06, local02
02bc0     01 30 86 F1 | 	sub	local06, #1
02bc4     03 30 66 F0 | 	shl	local06, #3
02bc8     F2 30 02 F1 | 	add	local06, objptr
02bcc     04 30 06 F1 | 	add	local06, #4
02bd0     18 2B 02 FB | 	rdlong	local03, local06
02bd4     14 31 02 F6 | 	mov	local06, local02
02bd8     03 30 66 F0 | 	shl	local06, #3
02bdc     F2 30 02 F1 | 	add	local06, objptr
02be0     18 2D 62 FC | 	wrlong	local04, local06
02be4     14 3F 02 F6 | 	mov	local13, local02
02be8     03 3E 66 F0 | 	shl	local13, #3
02bec     F2 3E 02 F1 | 	add	local13, objptr
02bf0     04 3E 06 F1 | 	add	local13, #4
02bf4     1F 2B 62 FC | 	wrlong	local03, local13
02bf8     01 28 86 F1 | 	sub	local02, #1
02bfc     3A 29 52 F2 | 	cmps	local02, local40 wc
02c00     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02c04                 | LR__0156
02c04     37 39 02 F6 | 	mov	local10, local37
02c08     01 38 06 F1 | 	add	local10, #1
02c0c     03 38 66 F0 | 	shl	local10, #3
02c10     F2 38 02 F1 | 	add	local10, objptr
02c14     37 41 02 F6 | 	mov	local14, local37
02c18     03 40 66 F0 | 	shl	local14, #3
02c1c     F2 40 02 F1 | 	add	local14, objptr
02c20     20 31 02 FB | 	rdlong	local06, local14
02c24     37 5D 02 F6 | 	mov	local28, local37
02c28     2E 51 02 F6 | 	mov	local22, local28
02c2c     03 50 66 F0 | 	shl	local22, #3
02c30     F2 52 02 F6 | 	mov	local23, objptr
02c34     F2 50 02 F1 | 	add	local22, objptr
02c38     28 13 02 FB | 	rdlong	arg01, local22
02c3c     35 00 00 FF 
02c40     0C E4 85 F1 | 	sub	objptr, ##27148
02c44     09 33 02 F6 | 	mov	local07, arg01
02c48     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02c4c                 | LR__0157
02c4c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02c50     01 32 06 51 |  if_ne	add	local07, #1
02c54     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02c58                 | LR__0158
02c58     09 33 82 F1 | 	sub	local07, arg01
02c5c     19 15 02 F6 | 	mov	arg02, local07
02c60     39 15 82 F1 | 	sub	arg02, local39
02c64     18 13 02 F6 | 	mov	arg01, local06
02c68     B4 5D B2 FD | 	call	#__system__Right_S
02c6c     1C FB 61 FC | 	wrlong	result1, local10
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     03 38 66 F0 | 	shl	local10, #3
02c78     35 00 00 FF 
02c7c     0C E4 05 F1 | 	add	objptr, ##27148
02c80     F2 38 02 F1 | 	add	local10, objptr
02c84     37 3B 02 F6 | 	mov	local11, local37
02c88     1D 41 02 F6 | 	mov	local14, local11
02c8c     03 40 66 F0 | 	shl	local14, #3
02c90     F2 3E 02 F6 | 	mov	local13, objptr
02c94     F2 40 02 F1 | 	add	local14, objptr
02c98     20 13 02 FB | 	rdlong	arg01, local14
02c9c     39 3D 02 F6 | 	mov	local12, local39
02ca0     1E 15 02 F6 | 	mov	arg02, local12
02ca4     35 00 00 FF 
02ca8     0C E4 85 F1 | 	sub	objptr, ##27148
02cac     E8 5C B2 FD | 	call	#__system__Left_S
02cb0     1C FB 61 FC | 	wrlong	result1, local10
02cb4                 | LR__0159
02cb4                 | LR__0160
02cb4     37 39 02 F6 | 	mov	local10, local37
02cb8     03 38 66 F0 | 	shl	local10, #3
02cbc     35 00 00 FF 
02cc0     0C E4 05 F1 | 	add	objptr, ##27148
02cc4     F2 38 02 F1 | 	add	local10, objptr
02cc8     1C 77 02 FB | 	rdlong	local41, local10
02ccc                 | ' 
02ccc                 | ' 825
02ccc                 | ' lp$=lparts(addptr).part$ 
02ccc                 | ' 
02ccc                 | ' ' process mouse/cursor/click on/off
02ccc                 | ' 
02ccc                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02ccc     B2 01 00 FF 
02cd0     07 15 06 F6 | 	mov	arg02, ##@LR__5438
02cd4     3B 13 02 F6 | 	mov	arg01, local41
02cd8     35 00 00 FF 
02cdc     0C E4 85 F1 | 	sub	objptr, ##27148
02ce0     5C 3C B2 FD | 	call	#__system___string_cmp
02ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ce8     30 00 90 AD |  if_e	jmp	#LR__0161
02cec     B2 01 00 FF 
02cf0     0D 15 06 F6 | 	mov	arg02, ##@LR__5439
02cf4     3B 13 02 F6 | 	mov	arg01, local41
02cf8     44 3C B2 FD | 	call	#__system___string_cmp
02cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
02d00     18 00 90 AD |  if_e	jmp	#LR__0161
02d04     B2 01 00 FF 
02d08     14 15 06 F6 | 	mov	arg02, ##@LR__5440
02d0c     3B 13 02 F6 | 	mov	arg01, local41
02d10     2C 3C B2 FD | 	call	#__system___string_cmp
02d14     00 FA 0D F2 | 	cmp	result1, #0 wz
02d18     E0 00 90 5D |  if_ne	jmp	#LR__0164
02d1c                 | LR__0161
02d1c                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02d1c     37 2F 02 F6 | 	mov	local05, local37
02d20     01 2E 06 F1 | 	add	local05, #1
02d24     03 2E 66 F0 | 	shl	local05, #3
02d28     35 00 00 FF 
02d2c     0C E4 05 F1 | 	add	objptr, ##27148
02d30     F2 2E 02 F1 | 	add	local05, objptr
02d34     17 13 02 FB | 	rdlong	arg01, local05
02d38     B2 01 00 FF 
02d3c     1A 15 06 F6 | 	mov	arg02, ##@LR__5441
02d40     35 00 00 FF 
02d44     0C E4 85 F1 | 	sub	objptr, ##27148
02d48     F4 3B B2 FD | 	call	#__system___string_cmp
02d4c     00 FA 0D F2 | 	cmp	result1, #0 wz
02d50     38 00 90 5D |  if_ne	jmp	#LR__0162
02d54     37 39 02 F6 | 	mov	local10, local37
02d58     01 38 06 F1 | 	add	local10, #1
02d5c     03 38 66 F0 | 	shl	local10, #3
02d60     35 00 00 FF 
02d64     0C E4 05 F1 | 	add	objptr, ##27148
02d68     F2 38 02 F1 | 	add	local10, objptr
02d6c     B2 01 00 FF 
02d70     1D 31 06 F6 | 	mov	local06, ##@LR__5442
02d74     1C 31 62 FC | 	wrlong	local06, local10
02d78     14 E4 05 F1 | 	add	objptr, #20
02d7c     01 00 80 FF 
02d80     F2 00 68 FC | 	wrlong	##512, objptr
02d84     35 00 00 FF 
02d88     20 E4 85 F1 | 	sub	objptr, ##27168
02d8c                 | LR__0162
02d8c                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02d8c     37 2F 02 F6 | 	mov	local05, local37
02d90     01 2E 06 F1 | 	add	local05, #1
02d94     03 2E 66 F0 | 	shl	local05, #3
02d98     35 00 00 FF 
02d9c     0C E4 05 F1 | 	add	objptr, ##27148
02da0     F2 2E 02 F1 | 	add	local05, objptr
02da4     17 13 02 FB | 	rdlong	arg01, local05
02da8     B2 01 00 FF 
02dac     1F 15 06 F6 | 	mov	arg02, ##@LR__5443
02db0     35 00 00 FF 
02db4     0C E4 85 F1 | 	sub	objptr, ##27148
02db8     84 3B B2 FD | 	call	#__system___string_cmp
02dbc     00 FA 0D F2 | 	cmp	result1, #0 wz
02dc0     38 00 90 5D |  if_ne	jmp	#LR__0163
02dc4     37 39 02 F6 | 	mov	local10, local37
02dc8     01 38 06 F1 | 	add	local10, #1
02dcc     03 38 66 F0 | 	shl	local10, #3
02dd0     35 00 00 FF 
02dd4     0C E4 05 F1 | 	add	objptr, ##27148
02dd8     F2 38 02 F1 | 	add	local10, objptr
02ddc     B2 01 00 FF 
02de0     23 31 06 F6 | 	mov	local06, ##@LR__5444
02de4     1C 31 62 FC | 	wrlong	local06, local10
02de8     14 E4 05 F1 | 	add	objptr, #20
02dec     01 00 80 FF 
02df0     F2 00 68 FC | 	wrlong	##512, objptr
02df4     35 00 00 FF 
02df8     20 E4 85 F1 | 	sub	objptr, ##27168
02dfc                 | LR__0163
02dfc                 | LR__0164
02dfc                 | ' 		
02dfc                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02dfc                 | ' 
02dfc                 | ' if (lp$="mode" orelse lp$="m.") then 
02dfc     B2 01 00 FF 
02e00     25 15 06 F6 | 	mov	arg02, ##@LR__5445
02e04     3B 13 02 F6 | 	mov	arg01, local41
02e08     34 3B B2 FD | 	call	#__system___string_cmp
02e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e10     18 00 90 AD |  if_e	jmp	#LR__0165
02e14     B2 01 00 FF 
02e18     2A 15 06 F6 | 	mov	arg02, ##@LR__5446
02e1c     3B 13 02 F6 | 	mov	arg01, local41
02e20     1C 3B B2 FD | 	call	#__system___string_cmp
02e24     00 FA 0D F2 | 	cmp	result1, #0 wz
02e28     F4 01 90 5D |  if_ne	jmp	#LR__0171
02e2c                 | LR__0165
02e2c                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02e2c     37 2F 02 F6 | 	mov	local05, local37
02e30     01 2E 06 F1 | 	add	local05, #1
02e34     03 2E 66 F0 | 	shl	local05, #3
02e38     35 00 00 FF 
02e3c     0C E4 05 F1 | 	add	objptr, ##27148
02e40     F2 2E 02 F1 | 	add	local05, objptr
02e44     17 13 02 FB | 	rdlong	arg01, local05
02e48     B2 01 00 FF 
02e4c     2D 15 06 F6 | 	mov	arg02, ##@LR__5447
02e50     35 00 00 FF 
02e54     0C E4 85 F1 | 	sub	objptr, ##27148
02e58     E4 3A B2 FD | 	call	#__system___string_cmp
02e5c     00 FA 0D F2 | 	cmp	result1, #0 wz
02e60     2C 00 90 5D |  if_ne	jmp	#LR__0166
02e64     37 39 02 F6 | 	mov	local10, local37
02e68     01 38 06 F1 | 	add	local10, #1
02e6c     03 38 66 F0 | 	shl	local10, #3
02e70     35 00 00 FF 
02e74     0C E4 05 F1 | 	add	objptr, ##27148
02e78     F2 38 02 F1 | 	add	local10, objptr
02e7c     B2 01 00 FF 
02e80     33 31 06 F6 | 	mov	local06, ##@LR__5448
02e84     1C 31 62 FC | 	wrlong	local06, local10
02e88     35 00 00 FF 
02e8c     0C E4 85 F1 | 	sub	objptr, ##27148
02e90                 | LR__0166
02e90                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02e90     37 2F 02 F6 | 	mov	local05, local37
02e94     01 2E 06 F1 | 	add	local05, #1
02e98     03 2E 66 F0 | 	shl	local05, #3
02e9c     35 00 00 FF 
02ea0     0C E4 05 F1 | 	add	objptr, ##27148
02ea4     F2 2E 02 F1 | 	add	local05, objptr
02ea8     17 13 02 FB | 	rdlong	arg01, local05
02eac     B2 01 00 FF 
02eb0     35 15 06 F6 | 	mov	arg02, ##@LR__5449
02eb4     35 00 00 FF 
02eb8     0C E4 85 F1 | 	sub	objptr, ##27148
02ebc     80 3A B2 FD | 	call	#__system___string_cmp
02ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
02ec4     2C 00 90 5D |  if_ne	jmp	#LR__0167
02ec8     37 39 02 F6 | 	mov	local10, local37
02ecc     01 38 06 F1 | 	add	local10, #1
02ed0     03 38 66 F0 | 	shl	local10, #3
02ed4     35 00 00 FF 
02ed8     0C E4 05 F1 | 	add	objptr, ##27148
02edc     F2 38 02 F1 | 	add	local10, objptr
02ee0     B2 01 00 FF 
02ee4     3E 31 06 F6 | 	mov	local06, ##@LR__5450
02ee8     1C 31 62 FC | 	wrlong	local06, local10
02eec     35 00 00 FF 
02ef0     0C E4 85 F1 | 	sub	objptr, ##27148
02ef4                 | LR__0167
02ef4                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02ef4     37 2F 02 F6 | 	mov	local05, local37
02ef8     01 2E 06 F1 | 	add	local05, #1
02efc     03 2E 66 F0 | 	shl	local05, #3
02f00     35 00 00 FF 
02f04     0C E4 05 F1 | 	add	objptr, ##27148
02f08     F2 2E 02 F1 | 	add	local05, objptr
02f0c     17 13 02 FB | 	rdlong	arg01, local05
02f10     B2 01 00 FF 
02f14     40 15 06 F6 | 	mov	arg02, ##@LR__5451
02f18     35 00 00 FF 
02f1c     0C E4 85 F1 | 	sub	objptr, ##27148
02f20     1C 3A B2 FD | 	call	#__system___string_cmp
02f24     00 FA 0D F2 | 	cmp	result1, #0 wz
02f28     2C 00 90 5D |  if_ne	jmp	#LR__0168
02f2c     37 39 02 F6 | 	mov	local10, local37
02f30     01 38 06 F1 | 	add	local10, #1
02f34     03 38 66 F0 | 	shl	local10, #3
02f38     35 00 00 FF 
02f3c     0C E4 05 F1 | 	add	objptr, ##27148
02f40     F2 38 02 F1 | 	add	local10, objptr
02f44     B2 01 00 FF 
02f48     49 31 06 F6 | 	mov	local06, ##@LR__5452
02f4c     1C 31 62 FC | 	wrlong	local06, local10
02f50     35 00 00 FF 
02f54     0C E4 85 F1 | 	sub	objptr, ##27148
02f58                 | LR__0168
02f58                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02f58     37 2F 02 F6 | 	mov	local05, local37
02f5c     01 2E 06 F1 | 	add	local05, #1
02f60     03 2E 66 F0 | 	shl	local05, #3
02f64     35 00 00 FF 
02f68     0C E4 05 F1 | 	add	objptr, ##27148
02f6c     F2 2E 02 F1 | 	add	local05, objptr
02f70     17 13 02 FB | 	rdlong	arg01, local05
02f74     B2 01 00 FF 
02f78     4B 15 06 F6 | 	mov	arg02, ##@LR__5453
02f7c     35 00 00 FF 
02f80     0C E4 85 F1 | 	sub	objptr, ##27148
02f84     B8 39 B2 FD | 	call	#__system___string_cmp
02f88     00 FA 0D F2 | 	cmp	result1, #0 wz
02f8c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f90     37 39 02 F6 | 	mov	local10, local37
02f94     01 38 06 F1 | 	add	local10, #1
02f98     03 38 66 F0 | 	shl	local10, #3
02f9c     35 00 00 FF 
02fa0     0C E4 05 F1 | 	add	objptr, ##27148
02fa4     F2 38 02 F1 | 	add	local10, objptr
02fa8     B2 01 00 FF 
02fac     54 31 06 F6 | 	mov	local06, ##@LR__5454
02fb0     1C 31 62 FC | 	wrlong	local06, local10
02fb4     35 00 00 FF 
02fb8     0C E4 85 F1 | 	sub	objptr, ##27148
02fbc                 | LR__0169
02fbc                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02fbc     37 2F 02 F6 | 	mov	local05, local37
02fc0     01 2E 06 F1 | 	add	local05, #1
02fc4     03 2E 66 F0 | 	shl	local05, #3
02fc8     35 00 00 FF 
02fcc     0C E4 05 F1 | 	add	objptr, ##27148
02fd0     F2 2E 02 F1 | 	add	local05, objptr
02fd4     17 13 02 FB | 	rdlong	arg01, local05
02fd8     B2 01 00 FF 
02fdc     56 15 06 F6 | 	mov	arg02, ##@LR__5455
02fe0     35 00 00 FF 
02fe4     0C E4 85 F1 | 	sub	objptr, ##27148
02fe8     54 39 B2 FD | 	call	#__system___string_cmp
02fec     00 FA 0D F2 | 	cmp	result1, #0 wz
02ff0     2C 00 90 5D |  if_ne	jmp	#LR__0170
02ff4     37 39 02 F6 | 	mov	local10, local37
02ff8     01 38 06 F1 | 	add	local10, #1
02ffc     03 38 66 F0 | 	shl	local10, #3
03000     35 00 00 FF 
03004     0C E4 05 F1 | 	add	objptr, ##27148
03008     F2 38 02 F1 | 	add	local10, objptr
0300c     B2 01 00 FF 
03010     59 31 06 F6 | 	mov	local06, ##@LR__5456
03014     1C 31 62 FC | 	wrlong	local06, local10
03018     35 00 00 FF 
0301c     0C E4 85 F1 | 	sub	objptr, ##27148
03020                 | LR__0170
03020                 | LR__0171
03020                 | ' 
03020                 | ' ' find part types 
03020                 | ' 
03020                 | ' for i=0 to k-1
03020     00 28 06 F6 | 	mov	local02, #0
03024     23 79 02 F6 | 	mov	local42, local17
03028                 | LR__0172
03028     3C 29 52 F2 | 	cmps	local02, local42 wc
0302c     A4 07 90 3D |  if_ae	jmp	#LR__0184
03030     14 39 02 F6 | 	mov	local10, local02
03034     03 38 66 F0 | 	shl	local10, #3
03038     35 00 00 FF 
0303c     0C E4 05 F1 | 	add	objptr, ##27148
03040     F2 38 02 F1 | 	add	local10, objptr
03044     14 3B 02 F6 | 	mov	local11, local02
03048     1D 41 02 F6 | 	mov	local14, local11
0304c     20 3F 02 F6 | 	mov	local13, local14
03050     03 3E 66 F0 | 	shl	local13, #3
03054     F2 3E 02 F1 | 	add	local13, objptr
03058     1F 13 02 FB | 	rdlong	arg01, local13
0305c     35 00 00 FF 
03060     0C E4 85 F1 | 	sub	objptr, ##27148
03064     70 1B B0 FD | 	call	#_isseparator
03068     FD FA E1 F8 | 	getbyte	result1, result1, #0
0306c     04 38 06 F1 | 	add	local10, #4
03070     1C FB 61 FC | 	wrlong	result1, local10
03074                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03074     14 39 02 F6 | 	mov	local10, local02
03078     03 38 66 F0 | 	shl	local10, #3
0307c     35 00 00 FF 
03080     0C E4 05 F1 | 	add	objptr, ##27148
03084     F2 38 02 F1 | 	add	local10, objptr
03088     04 38 06 F1 | 	add	local10, #4
0308c     1C 3D 02 FB | 	rdlong	local12, local10
03090     01 3C 56 F2 | 	cmps	local12, #1 wc
03094     35 00 00 FF 
03098     0C E4 85 F1 | 	sub	objptr, ##27148
0309c     2C 07 90 3D |  if_ae	jmp	#LR__0183
030a0     14 39 02 F6 | 	mov	local10, local02
030a4     03 38 66 F0 | 	shl	local10, #3
030a8     35 00 00 FF 
030ac     0C E4 05 F1 | 	add	objptr, ##27148
030b0     F2 38 02 F1 | 	add	local10, objptr
030b4     14 3B 02 F6 | 	mov	local11, local02
030b8     1D 41 02 F6 | 	mov	local14, local11
030bc     20 3F 02 F6 | 	mov	local13, local14
030c0     03 3E 66 F0 | 	shl	local13, #3
030c4     F2 3E 02 F1 | 	add	local13, objptr
030c8     1F 13 02 FB | 	rdlong	arg01, local13
030cc     35 00 00 FF 
030d0     0C E4 85 F1 | 	sub	objptr, ##27148
030d4     4C 13 B0 FD | 	call	#_isoperator
030d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030dc     04 38 06 F1 | 	add	local10, #4
030e0     1C FB 61 FC | 	wrlong	result1, local10
030e4                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030e4     14 39 02 F6 | 	mov	local10, local02
030e8     03 38 66 F0 | 	shl	local10, #3
030ec     35 00 00 FF 
030f0     0C E4 05 F1 | 	add	objptr, ##27148
030f4     F2 38 02 F1 | 	add	local10, objptr
030f8     04 38 06 F1 | 	add	local10, #4
030fc     1C 3D 02 FB | 	rdlong	local12, local10
03100     01 3C 56 F2 | 	cmps	local12, #1 wc
03104     35 00 00 FF 
03108     0C E4 85 F1 | 	sub	objptr, ##27148
0310c     BC 06 90 3D |  if_ae	jmp	#LR__0183
03110     14 39 02 F6 | 	mov	local10, local02
03114     03 38 66 F0 | 	shl	local10, #3
03118     35 00 00 FF 
0311c     0C E4 05 F1 | 	add	objptr, ##27148
03120     F2 38 02 F1 | 	add	local10, objptr
03124     14 3B 02 F6 | 	mov	local11, local02
03128     1D 41 02 F6 | 	mov	local14, local11
0312c     20 3F 02 F6 | 	mov	local13, local14
03130     03 3E 66 F0 | 	shl	local13, #3
03134     F2 3E 02 F1 | 	add	local13, objptr
03138     1F 13 02 FB | 	rdlong	arg01, local13
0313c     35 00 00 FF 
03140     0C E4 85 F1 | 	sub	objptr, ##27148
03144                 | ' 
03144                 | ' select case s
03144     B3 01 00 FF 
03148     5E 14 06 F6 | 	mov	arg02, ##@LR__5547
0314c     F0 37 B2 FD | 	call	#__system___string_cmp
03150     00 FA 0D F2 | 	cmp	result1, #0 wz
03154     1B FA 05 A6 |  if_e	mov	result1, #27
03158     00 FA 05 56 |  if_ne	mov	result1, #0
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     38 06 90 3D |  if_ae	jmp	#LR__0183
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     20 3F 02 F6 | 	mov	local13, local14
031b4     03 3E 66 F0 | 	shl	local13, #3
031b8     F2 3E 02 F1 | 	add	local13, objptr
031bc     1F 13 02 FB | 	rdlong	arg01, local13
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     0C 1C B0 FD | 	call	#_iscommand
031cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
031d0     04 38 06 F1 | 	add	local10, #4
031d4     1C FB 61 FC | 	wrlong	result1, local10
031d8                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
031d8     14 39 02 F6 | 	mov	local10, local02
031dc     03 38 66 F0 | 	shl	local10, #3
031e0     35 00 00 FF 
031e4     0C E4 05 F1 | 	add	objptr, ##27148
031e8     F2 38 02 F1 | 	add	local10, objptr
031ec     04 38 06 F1 | 	add	local10, #4
031f0     1C 3D 02 FB | 	rdlong	local12, local10
031f4     01 3C 56 F2 | 	cmps	local12, #1 wc
031f8     35 00 00 FF 
031fc     0C E4 85 F1 | 	sub	objptr, ##27148
03200     C8 05 90 3D |  if_ae	jmp	#LR__0183
03204     14 39 02 F6 | 	mov	local10, local02
03208     03 38 66 F0 | 	shl	local10, #3
0320c     35 00 00 FF 
03210     0C E4 05 F1 | 	add	objptr, ##27148
03214     F2 38 02 F1 | 	add	local10, objptr
03218     14 3B 02 F6 | 	mov	local11, local02
0321c     1D 41 02 F6 | 	mov	local14, local11
03220     20 3F 02 F6 | 	mov	local13, local14
03224     03 3E 66 F0 | 	shl	local13, #3
03228     F2 5C 02 F6 | 	mov	local28, objptr
0322c     F2 3E 02 F1 | 	add	local13, objptr
03230     1F 13 02 FB | 	rdlong	arg01, local13
03234     35 00 00 FF 
03238     0C E4 85 F1 | 	sub	objptr, ##27148
0323c     78 2C B0 FD | 	call	#_isfunction
03240     FD FA E1 F8 | 	getbyte	result1, result1, #0
03244     04 38 06 F1 | 	add	local10, #4
03248     1C FB 61 FC | 	wrlong	result1, local10
0324c                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
0324c     14 39 02 F6 | 	mov	local10, local02
03250     03 38 66 F0 | 	shl	local10, #3
03254     35 00 00 FF 
03258     0C E4 05 F1 | 	add	objptr, ##27148
0325c     F2 38 02 F1 | 	add	local10, objptr
03260     04 38 06 F1 | 	add	local10, #4
03264     1C 3D 02 FB | 	rdlong	local12, local10
03268     01 3C 56 F2 | 	cmps	local12, #1 wc
0326c     35 00 00 FF 
03270     0C E4 85 F1 | 	sub	objptr, ##27148
03274     54 05 90 3D |  if_ae	jmp	#LR__0183
03278     14 39 02 F6 | 	mov	local10, local02
0327c     03 38 66 F0 | 	shl	local10, #3
03280     35 00 00 FF 
03284     0C E4 05 F1 | 	add	objptr, ##27148
03288     F2 38 02 F1 | 	add	local10, objptr
0328c     14 3B 02 F6 | 	mov	local11, local02
03290     1D 41 02 F6 | 	mov	local14, local11
03294     03 40 66 F0 | 	shl	local14, #3
03298     F2 3E 02 F6 | 	mov	local13, objptr
0329c     F2 40 02 F1 | 	add	local14, objptr
032a0     20 13 02 FB | 	rdlong	arg01, local14
032a4     35 00 00 FF 
032a8     0C E4 85 F1 | 	sub	objptr, ##27148
032ac     BC 15 B0 FD | 	call	#_isnotename
032b0     04 38 06 F1 | 	add	local10, #4
032b4     1C FB 61 FC | 	wrlong	result1, local10
032b8                 | ' lparts(i).token=isnotename(lparts(i).part$) 
032b8                 | ' if lparts(i).token>0 then 
032b8     14 39 02 F6 | 	mov	local10, local02
032bc     03 38 66 F0 | 	shl	local10, #3
032c0     35 00 00 FF 
032c4     0C E4 05 F1 | 	add	objptr, ##27148
032c8     F2 38 02 F1 | 	add	local10, objptr
032cc     04 38 06 F1 | 	add	local10, #4
032d0     1C 31 02 FB | 	rdlong	local06, local10
032d4     01 30 56 F2 | 	cmps	local06, #1 wc
032d8     35 00 00 FF 
032dc     0C E4 85 F1 | 	sub	objptr, ##27148
032e0     8C 00 90 CD |  if_b	jmp	#LR__0173
032e4     14 2F 02 F6 | 	mov	local05, local02
032e8     03 2E 66 F0 | 	shl	local05, #3
032ec     35 00 00 FF 
032f0     0C E4 05 F1 | 	add	objptr, ##27148
032f4     F2 2E 02 F1 | 	add	local05, objptr
032f8     04 2E 06 F1 | 	add	local05, #4
032fc     17 3D 02 FB | 	rdlong	local12, local05
03300     1E 13 02 F6 | 	mov	arg01, local12
03304     35 00 00 FF 
03308     0C E4 85 F1 | 	sub	objptr, ##27148
0330c     B0 3C B0 FD | 	call	#_getnoteval
03310     FD 7A 02 F6 | 	mov	local43, result1
03314     14 39 02 F6 | 	mov	local10, local02
03318     03 38 66 F0 | 	shl	local10, #3
0331c     35 00 00 FF 
03320     0C E4 05 F1 | 	add	objptr, ##27148
03324     F2 38 02 F1 | 	add	local10, objptr
03328     3D 13 02 F6 | 	mov	arg01, local43
0332c     35 00 00 FF 
03330     0C E4 85 F1 | 	sub	objptr, ##27148
03334     58 58 B2 FD | 	call	#__system__str_S
03338     1C FB 61 FC | 	wrlong	result1, local10
0333c     14 2D 02 F6 | 	mov	local04, local02
03340     16 2B 02 F6 | 	mov	local03, local04
03344     15 39 02 F6 | 	mov	local10, local03
03348     03 38 66 F0 | 	shl	local10, #3
0334c     35 00 00 FF 
03350     0C E4 05 F1 | 	add	objptr, ##27148
03354     F2 38 02 F1 | 	add	local10, objptr
03358     04 38 06 F1 | 	add	local10, #4
0335c     01 00 80 FF 
03360     1C 05 68 FC | 	wrlong	##514, local10
03364     35 00 00 FF 
03368     0C E4 85 F1 | 	sub	objptr, ##27148
0336c     5C 04 90 FD | 	jmp	#LR__0183
03370                 | LR__0173
03370     14 39 02 F6 | 	mov	local10, local02
03374     03 38 66 F0 | 	shl	local10, #3
03378     35 00 00 FF 
0337c     0C E4 05 F1 | 	add	objptr, ##27148
03380     F2 38 02 F1 | 	add	local10, objptr
03384     14 41 02 F6 | 	mov	local14, local02
03388     03 40 66 F0 | 	shl	local14, #3
0338c     F2 40 02 F1 | 	add	local14, objptr
03390     20 13 02 FB | 	rdlong	arg01, local14
03394     35 00 00 FF 
03398     0C E4 85 F1 | 	sub	objptr, ##27148
0339c     64 13 B0 FD | 	call	#_ischannel
033a0     04 38 06 F1 | 	add	local10, #4
033a4     1C FB 61 FC | 	wrlong	result1, local10
033a8                 | ' 
033a8                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
033a8                 | ' 
033a8                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
033a8     14 39 02 F6 | 	mov	local10, local02
033ac     03 38 66 F0 | 	shl	local10, #3
033b0     35 00 00 FF 
033b4     0C E4 05 F1 | 	add	objptr, ##27148
033b8     F2 38 02 F1 | 	add	local10, objptr
033bc     04 38 06 F1 | 	add	local10, #4
033c0     1C 31 02 FB | 	rdlong	local06, local10
033c4     01 30 56 F2 | 	cmps	local06, #1 wc
033c8     35 00 00 FF 
033cc     0C E4 85 F1 | 	sub	objptr, ##27148
033d0     74 00 90 CD |  if_b	jmp	#LR__0174
033d4     14 39 02 F6 | 	mov	local10, local02
033d8     03 38 66 F0 | 	shl	local10, #3
033dc     35 00 00 FF 
033e0     0C E4 05 F1 | 	add	objptr, ##27148
033e4     F2 38 02 F1 | 	add	local10, objptr
033e8     14 3B 02 F6 | 	mov	local11, local02
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     20 13 02 FB | 	rdlong	arg01, local14
03400     01 3C 06 F6 | 	mov	local12, #1
03404     01 14 06 F6 | 	mov	arg02, #1
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     0C 56 B2 FD | 	call	#__system__Right_S
03414     1C FB 61 FC | 	wrlong	result1, local10
03418     14 2D 02 F6 | 	mov	local04, local02
0341c     16 2B 02 F6 | 	mov	local03, local04
03420     15 39 02 F6 | 	mov	local10, local03
03424     03 38 66 F0 | 	shl	local10, #3
03428     35 00 00 FF 
0342c     0C E4 05 F1 | 	add	objptr, ##27148
03430     F2 38 02 F1 | 	add	local10, objptr
03434     04 38 06 F1 | 	add	local10, #4
03438     1C 59 68 FC | 	wrlong	#44, local10
0343c     35 00 00 FF 
03440     0C E4 85 F1 | 	sub	objptr, ##27148
03444     84 03 90 FD | 	jmp	#LR__0183
03448                 | LR__0174
03448     14 39 02 F6 | 	mov	local10, local02
0344c     03 38 66 F0 | 	shl	local10, #3
03450     35 00 00 FF 
03454     0C E4 05 F1 | 	add	objptr, ##27148
03458     F2 38 02 F1 | 	add	local10, objptr
0345c     14 3B 02 F6 | 	mov	local11, local02
03460     1D 41 02 F6 | 	mov	local14, local11
03464     03 40 66 F0 | 	shl	local14, #3
03468     F2 3E 02 F6 | 	mov	local13, objptr
0346c     F2 40 02 F1 | 	add	local14, objptr
03470     20 13 02 FB | 	rdlong	arg01, local14
03474     35 00 00 FF 
03478     0C E4 85 F1 | 	sub	objptr, ##27148
0347c     6C 13 B0 FD | 	call	#_isconstant
03480     04 38 06 F1 | 	add	local10, #4
03484     1C FB 61 FC | 	wrlong	result1, local10
03488                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
03488     14 39 02 F6 | 	mov	local10, local02
0348c     03 38 66 F0 | 	shl	local10, #3
03490     35 00 00 FF 
03494     0C E4 05 F1 | 	add	objptr, ##27148
03498     F2 38 02 F1 | 	add	local10, objptr
0349c     04 38 06 F1 | 	add	local10, #4
034a0     1C 3D 02 FB | 	rdlong	local12, local10
034a4     01 3C 56 F2 | 	cmps	local12, #1 wc
034a8     35 00 00 FF 
034ac     0C E4 85 F1 | 	sub	objptr, ##27148
034b0     94 00 90 CD |  if_b	jmp	#LR__0175
034b4     14 39 02 F6 | 	mov	local10, local02
034b8     03 38 66 F0 | 	shl	local10, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 38 02 F1 | 	add	local10, objptr
034c8     14 3D 02 F6 | 	mov	local12, local02
034cc     1E 3B 02 F6 | 	mov	local11, local12
034d0     1D 41 02 F6 | 	mov	local14, local11
034d4     03 40 66 F0 | 	shl	local14, #3
034d8     F2 3E 02 F6 | 	mov	local13, objptr
034dc     F2 40 02 F1 | 	add	local14, objptr
034e0     04 40 06 F1 | 	add	local14, #4
034e4     20 13 02 FB | 	rdlong	arg01, local14
034e8     04 40 86 F1 | 	sub	local14, #4
034ec     35 00 00 FF 
034f0     0C E4 85 F1 | 	sub	objptr, ##27148
034f4     09 13 52 F6 | 	abs	arg01, arg01 wc
034f8     1F 7C C6 C9 |  if_b	decod	local44, #31
034fc     00 7C 06 36 |  if_ae	mov	local44, #0
03500     8C 5E B2 FD | 	call	#__system___float_fromuns
03504     3E FB 61 F5 | 	xor	result1, local44
03508     FD 12 02 F6 | 	mov	arg01, result1
0350c     80 56 B2 FD | 	call	#__system__str_S
03510     1C FB 61 FC | 	wrlong	result1, local10
03514     14 2D 02 F6 | 	mov	local04, local02
03518     16 2B 02 F6 | 	mov	local03, local04
0351c     15 39 02 F6 | 	mov	local10, local03
03520     03 38 66 F0 | 	shl	local10, #3
03524     35 00 00 FF 
03528     0C E4 05 F1 | 	add	objptr, ##27148
0352c     F2 38 02 F1 | 	add	local10, objptr
03530     04 38 06 F1 | 	add	local10, #4
03534     01 00 80 FF 
03538     1C 03 68 FC | 	wrlong	##513, local10
0353c     35 00 00 FF 
03540     0C E4 85 F1 | 	sub	objptr, ##27148
03544     84 02 90 FD | 	jmp	#LR__0183
03548                 | LR__0175
03548     14 2F 02 F6 | 	mov	local05, local02
0354c     03 2E 66 F0 | 	shl	local05, #3
03550     35 00 00 FF 
03554     0C E4 05 F1 | 	add	objptr, ##27148
03558     F2 2E 02 F1 | 	add	local05, objptr
0355c     17 13 02 FB | 	rdlong	arg01, local05
03560     35 00 00 FF 
03564     0C E4 85 F1 | 	sub	objptr, ##27148
03568     A0 32 B0 FD | 	call	#_isnum
0356c     FD 7E 02 F6 | 	mov	local45, result1
03570     14 2F 02 F6 | 	mov	local05, local02
03574     03 2E 66 F0 | 	shl	local05, #3
03578     35 00 00 FF 
0357c     0C E4 05 F1 | 	add	objptr, ##27148
03580     F2 2E 02 F1 | 	add	local05, objptr
03584     17 13 02 FB | 	rdlong	arg01, local05
03588     35 00 00 FF 
0358c     0C E4 85 F1 | 	sub	objptr, ##27148
03590     64 36 B0 FD | 	call	#_isint
03594     FD 80 02 F6 | 	mov	local46, result1
03598     14 2F 02 F6 | 	mov	local05, local02
0359c     03 2E 66 F0 | 	shl	local05, #3
035a0     35 00 00 FF 
035a4     0C E4 05 F1 | 	add	objptr, ##27148
035a8     F2 2E 02 F1 | 	add	local05, objptr
035ac     17 13 02 FB | 	rdlong	arg01, local05
035b0     35 00 00 FF 
035b4     0C E4 85 F1 | 	sub	objptr, ##27148
035b8     E0 38 B0 FD | 	call	#_isdec
035bc     FD 82 02 F6 | 	mov	local47, result1
035c0                 | ' 
035c0                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
035c0                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
035c0     00 7E 0E F2 | 	cmp	local45, #0 wz
035c4     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
035c8     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
035cc     34 00 90 AD |  if_e	jmp	#LR__0176
035d0     14 2D 02 F6 | 	mov	local04, local02
035d4     16 2B 02 F6 | 	mov	local03, local04
035d8     15 39 02 F6 | 	mov	local10, local03
035dc     03 38 66 F0 | 	shl	local10, #3
035e0     35 00 00 FF 
035e4     0C E4 05 F1 | 	add	objptr, ##27148
035e8     F2 38 02 F1 | 	add	local10, objptr
035ec     04 38 06 F1 | 	add	local10, #4
035f0     01 00 80 FF 
035f4     1C 01 68 FC | 	wrlong	##512, local10
035f8     35 00 00 FF 
035fc     0C E4 85 F1 | 	sub	objptr, ##27148
03600     C8 01 90 FD | 	jmp	#LR__0183
03604                 | LR__0176
03604                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03604     00 7E 0E F2 | 	cmp	local45, #0 wz
03608     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
0360c     41 2D 22 56 |  if_ne	not	local04, local47
03610     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03614     34 00 90 AD |  if_e	jmp	#LR__0177
03618     14 2D 02 F6 | 	mov	local04, local02
0361c     16 2B 02 F6 | 	mov	local03, local04
03620     15 39 02 F6 | 	mov	local10, local03
03624     03 38 66 F0 | 	shl	local10, #3
03628     35 00 00 FF 
0362c     0C E4 05 F1 | 	add	objptr, ##27148
03630     F2 38 02 F1 | 	add	local10, objptr
03634     04 38 06 F1 | 	add	local10, #4
03638     01 00 80 FF 
0363c     1C 03 68 FC | 	wrlong	##513, local10
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     80 01 90 FD | 	jmp	#LR__0183
0364c                 | LR__0177
0364c                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
0364c     00 7E 0E F2 | 	cmp	local45, #0 wz
03650     40 2D 22 56 |  if_ne	not	local04, local46
03654     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03658     41 2B 22 56 |  if_ne	not	local03, local47
0365c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
03660     34 00 90 AD |  if_e	jmp	#LR__0178
03664     14 2D 02 F6 | 	mov	local04, local02
03668     16 2B 02 F6 | 	mov	local03, local04
0366c     15 39 02 F6 | 	mov	local10, local03
03670     03 38 66 F0 | 	shl	local10, #3
03674     35 00 00 FF 
03678     0C E4 05 F1 | 	add	objptr, ##27148
0367c     F2 38 02 F1 | 	add	local10, objptr
03680     04 38 06 F1 | 	add	local10, #4
03684     01 00 80 FF 
03688     1C 05 68 FC | 	wrlong	##514, local10
0368c     35 00 00 FF 
03690     0C E4 85 F1 | 	sub	objptr, ##27148
03694     34 01 90 FD | 	jmp	#LR__0183
03698                 | LR__0178
03698                 | ' 
03698                 | ' if isstring(lparts(i).part$) then 
03698     14 2F 02 F6 | 	mov	local05, local02
0369c     03 2E 66 F0 | 	shl	local05, #3
036a0     35 00 00 FF 
036a4     0C E4 05 F1 | 	add	objptr, ##27148
036a8     F2 2E 02 F1 | 	add	local05, objptr
036ac     17 13 02 FB | 	rdlong	arg01, local05
036b0     35 00 00 FF 
036b4     0C E4 85 F1 | 	sub	objptr, ##27148
036b8     A0 38 B0 FD | 	call	#_isstring
036bc     00 FA 0D F2 | 	cmp	result1, #0 wz
036c0     A8 00 90 AD |  if_e	jmp	#LR__0181
036c4     14 39 02 F6 | 	mov	local10, local02
036c8     03 38 66 F0 | 	shl	local10, #3
036cc     35 00 00 FF 
036d0     0C E4 05 F1 | 	add	objptr, ##27148
036d4     F2 38 02 F1 | 	add	local10, objptr
036d8     04 38 06 F1 | 	add	local10, #4
036dc     01 00 80 FF 
036e0     1C 07 68 FC | 	wrlong	##515, local10
036e4     14 2D 02 F6 | 	mov	local04, local02
036e8     16 2B 02 F6 | 	mov	local03, local04
036ec     15 39 02 F6 | 	mov	local10, local03
036f0     03 38 66 F0 | 	shl	local10, #3
036f4     F2 38 02 F1 | 	add	local10, objptr
036f8     14 41 02 F6 | 	mov	local14, local02
036fc     03 40 66 F0 | 	shl	local14, #3
03700     F2 40 02 F1 | 	add	local14, objptr
03704     20 31 02 FB | 	rdlong	local06, local14
03708     02 3C 06 F6 | 	mov	local12, #2
0370c     14 51 02 F6 | 	mov	local22, local02
03710     28 53 02 F6 | 	mov	local23, local22
03714     03 52 66 F0 | 	shl	local23, #3
03718     F2 54 02 F6 | 	mov	local24, objptr
0371c     F2 52 02 F1 | 	add	local23, objptr
03720     29 13 02 FB | 	rdlong	arg01, local23
03724     35 00 00 FF 
03728     0C E4 85 F1 | 	sub	objptr, ##27148
0372c     09 33 02 F6 | 	mov	local07, arg01
03730     97 06 48 FB | 	callpa	#(@LR__0180-@LR__0179)>>2,fcache_load_ptr_
03734                 | LR__0179
03734     19 FB C9 FA | 	rdbyte	result1, local07 wz
03738     01 32 06 51 |  if_ne	add	local07, #1
0373c     F4 FF 9F 5D |  if_ne	jmp	#LR__0179
03740                 | LR__0180
03740     09 33 82 F1 | 	sub	local07, arg01
03744     19 3F 02 F6 | 	mov	local13, local07
03748     1F 41 02 F6 | 	mov	local14, local13
0374c     02 40 86 F1 | 	sub	local14, #2
03750     20 3B 02 F6 | 	mov	local11, local14
03754     18 13 02 F6 | 	mov	arg01, local06
03758     1E 15 02 F6 | 	mov	arg02, local12
0375c     1D 17 02 F6 | 	mov	arg03, local11
03760     4C 53 B2 FD | 	call	#__system__Mid_S
03764     1C FB 61 FC | 	wrlong	result1, local10
03768     60 00 90 FD | 	jmp	#LR__0183
0376c                 | LR__0181
0376c                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
0376c     14 2B 02 F6 | 	mov	local03, local02
03770     15 2F 02 F6 | 	mov	local05, local03
03774     03 2E 66 F0 | 	shl	local05, #3
03778     35 00 00 FF 
0377c     0C E4 05 F1 | 	add	objptr, ##27148
03780     F2 2E 02 F1 | 	add	local05, objptr
03784     17 13 02 FB | 	rdlong	arg01, local05
03788     35 00 00 FF 
0378c     0C E4 85 F1 | 	sub	objptr, ##27148
03790     04 2E B0 FD | 	call	#_isname
03794     FD 2C 0A F6 | 	mov	local04, result1 wz
03798     30 00 90 AD |  if_e	jmp	#LR__0182
0379c     14 2D 02 F6 | 	mov	local04, local02
037a0     16 2B 02 F6 | 	mov	local03, local04
037a4     15 39 02 F6 | 	mov	local10, local03
037a8     03 38 66 F0 | 	shl	local10, #3
037ac     35 00 00 FF 
037b0     0C E4 05 F1 | 	add	objptr, ##27148
037b4     F2 38 02 F1 | 	add	local10, objptr
037b8     04 38 06 F1 | 	add	local10, #4
037bc     01 00 80 FF 
037c0     1C 09 68 FC | 	wrlong	##516, local10
037c4     35 00 00 FF 
037c8     0C E4 85 F1 | 	sub	objptr, ##27148
037cc                 | LR__0182
037cc                 | LR__0183
037cc     01 28 06 F1 | 	add	local02, #1
037d0     54 F8 9F FD | 	jmp	#LR__0172
037d4                 | LR__0184
037d4     23 39 02 F6 | 	mov	local10, local17
037d8     03 38 66 F0 | 	shl	local10, #3
037dc     35 00 00 FF 
037e0     0C E4 05 F1 | 	add	objptr, ##27148
037e4     F2 38 02 F1 | 	add	local10, objptr
037e8     04 38 06 F1 | 	add	local10, #4
037ec     1C FD 6B FC | 	wrlong	#510, local10
037f0     23 39 02 F6 | 	mov	local10, local17
037f4     03 38 66 F0 | 	shl	local10, #3
037f8     F2 38 02 F1 | 	add	local10, objptr
037fc     B2 01 00 FF 
03800     5B 31 06 F6 | 	mov	local06, ##@LR__5457
03804     1C 31 62 FC | 	wrlong	local06, local10
03808     10 00 00 FF 
0380c     54 E4 05 F1 | 	add	objptr, ##8276
03810     F2 46 62 FC | 	wrlong	local17, objptr
03814     45 00 00 FF 
03818     60 E4 85 F1 | 	sub	objptr, ##35424
0381c                 | ' 
0381c                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
0381c                 | ' 
0381c                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
0381c                 | '  
0381c                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
0381c     B2 01 00 FF 
03820     5C 15 06 F6 | 	mov	arg02, ##@LR__5458
03824     3B 13 02 F6 | 	mov	arg01, local41
03828     14 31 B2 FD | 	call	#__system___string_cmp
0382c     00 FA 0D F2 | 	cmp	result1, #0 wz
03830     F0 00 90 AD |  if_e	jmp	#LR__0185
03834     B2 01 00 FF 
03838     61 15 06 F6 | 	mov	arg02, ##@LR__5459
0383c     3B 13 02 F6 | 	mov	arg01, local41
03840     FC 30 B2 FD | 	call	#__system___string_cmp
03844     00 FA 0D F2 | 	cmp	result1, #0 wz
03848     D8 00 90 AD |  if_e	jmp	#LR__0185
0384c     B2 01 00 FF 
03850     66 31 06 F6 | 	mov	local06, ##@LR__5460
03854     3B 13 02 F6 | 	mov	arg01, local41
03858     18 15 02 F6 | 	mov	arg02, local06
0385c     E0 30 B2 FD | 	call	#__system___string_cmp
03860     00 FA 0D F2 | 	cmp	result1, #0 wz
03864     BC 00 90 AD |  if_e	jmp	#LR__0185
03868     B2 01 00 FF 
0386c     6B 3D 06 F6 | 	mov	local12, ##@LR__5461
03870     1E 31 02 F6 | 	mov	local06, local12
03874     3B 13 02 F6 | 	mov	arg01, local41
03878     18 15 02 F6 | 	mov	arg02, local06
0387c     C0 30 B2 FD | 	call	#__system___string_cmp
03880     00 FA 0D F2 | 	cmp	result1, #0 wz
03884     9C 00 90 AD |  if_e	jmp	#LR__0185
03888     B2 01 00 FF 
0388c     6F 3B 06 F6 | 	mov	local11, ##@LR__5462
03890     1D 3D 02 F6 | 	mov	local12, local11
03894     3B 13 02 F6 | 	mov	arg01, local41
03898     1E 15 02 F6 | 	mov	arg02, local12
0389c     A0 30 B2 FD | 	call	#__system___string_cmp
038a0     FD 30 0A F6 | 	mov	local06, result1 wz
038a4     7C 00 90 AD |  if_e	jmp	#LR__0185
038a8     B2 01 00 FF 
038ac     73 41 06 F6 | 	mov	local14, ##@LR__5463
038b0     20 3B 02 F6 | 	mov	local11, local14
038b4     3B 13 02 F6 | 	mov	arg01, local41
038b8     1D 15 02 F6 | 	mov	arg02, local11
038bc     80 30 B2 FD | 	call	#__system___string_cmp
038c0     FD 3C 0A F6 | 	mov	local12, result1 wz
038c4     5C 00 90 AD |  if_e	jmp	#LR__0185
038c8     B2 01 00 FF 
038cc     76 3F 06 F6 | 	mov	local13, ##@LR__5464
038d0     1F 41 02 F6 | 	mov	local14, local13
038d4     3B 13 02 F6 | 	mov	arg01, local41
038d8     20 15 02 F6 | 	mov	arg02, local14
038dc     60 30 B2 FD | 	call	#__system___string_cmp
038e0     FD 3A 0A F6 | 	mov	local11, result1 wz
038e4     3C 00 90 AD |  if_e	jmp	#LR__0185
038e8     B2 01 00 FF 
038ec     7A 3F 06 F6 | 	mov	local13, ##@LR__5465
038f0     3B 13 02 F6 | 	mov	arg01, local41
038f4     1F 15 02 F6 | 	mov	arg02, local13
038f8     44 30 B2 FD | 	call	#__system___string_cmp
038fc     FD 40 0A F6 | 	mov	local14, result1 wz
03900     20 00 90 AD |  if_e	jmp	#LR__0185
03904     B2 01 00 FF 
03908     80 51 06 F6 | 	mov	local22, ##@LR__5466
0390c     28 5D 02 F6 | 	mov	local28, local22
03910     3B 13 02 F6 | 	mov	arg01, local41
03914     2E 15 02 F6 | 	mov	arg02, local28
03918     24 30 B2 FD | 	call	#__system___string_cmp
0391c     FD 3E 0A F6 | 	mov	local13, result1 wz
03920     CC 00 90 5D |  if_ne	jmp	#LR__0186
03924                 | LR__0185
03924     37 5D 02 F6 | 	mov	local28, local37
03928     01 5C 06 F1 | 	add	local28, #1
0392c     2E 51 02 F6 | 	mov	local22, local28
03930     28 53 02 F6 | 	mov	local23, local22
03934     03 52 66 F0 | 	shl	local23, #3
03938     35 00 00 FF 
0393c     0C E4 05 F1 | 	add	objptr, ##27148
03940     F2 54 02 F6 | 	mov	local24, objptr
03944     F2 52 02 F1 | 	add	local23, objptr
03948     04 52 06 F1 | 	add	local23, #4
0394c     29 61 02 FB | 	rdlong	local30, local23
03950     04 52 86 F1 | 	sub	local23, #4
03954     30 5F 02 F6 | 	mov	local29, local30
03958     01 00 00 FF 
0395c     04 5E 0E F2 | 	cmp	local29, ##516 wz
03960     35 00 00 FF 
03964     0C E4 85 F1 | 	sub	objptr, ##27148
03968     84 00 90 5D |  if_ne	jmp	#LR__0186
0396c     37 85 02 F6 | 	mov	local48, local37
03970     01 84 06 F1 | 	add	local48, #1
03974     03 84 66 F0 | 	shl	local48, #3
03978     35 00 00 FF 
0397c     0C E4 05 F1 | 	add	objptr, ##27148
03980     F2 86 02 F6 | 	mov	local49, objptr
03984     F2 84 02 F1 | 	add	local48, objptr
03988     42 13 02 FB | 	rdlong	arg01, local48
0398c     01 14 06 F6 | 	mov	arg02, #1
03990     35 00 00 FF 
03994     0C E4 85 F1 | 	sub	objptr, ##27148
03998     84 50 B2 FD | 	call	#__system__Right_S
0399c     FD 12 02 F6 | 	mov	arg01, result1
039a0     B2 01 00 FF 
039a4     83 89 06 F6 | 	mov	local50, ##@LR__5467
039a8     44 8B 02 F6 | 	mov	local51, local50
039ac     45 15 02 F6 | 	mov	arg02, local51
039b0     8C 2F B2 FD | 	call	#__system___string_cmp
039b4     FD 62 0A F6 | 	mov	local31, result1 wz
039b8     34 00 90 AD |  if_e	jmp	#LR__0186
039bc     37 39 02 F6 | 	mov	local10, local37
039c0     01 38 06 F1 | 	add	local10, #1
039c4     03 38 66 F0 | 	shl	local10, #3
039c8     35 00 00 FF 
039cc     0C E4 05 F1 | 	add	objptr, ##27148
039d0     F2 38 02 F1 | 	add	local10, objptr
039d4     01 00 00 FF 
039d8     03 30 06 F6 | 	mov	local06, ##515
039dc     04 38 06 F1 | 	add	local10, #4
039e0     01 00 80 FF 
039e4     1C 07 68 FC | 	wrlong	##515, local10
039e8     35 00 00 FF 
039ec     0C E4 85 F1 | 	sub	objptr, ##27148
039f0                 | LR__0186
039f0                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
039f0     B2 01 00 FF 
039f4     85 15 06 F6 | 	mov	arg02, ##@LR__5468
039f8     3B 13 02 F6 | 	mov	arg01, local41
039fc     40 2F B2 FD | 	call	#__system___string_cmp
03a00     00 FA 0D F2 | 	cmp	result1, #0 wz
03a04     1C 00 90 AD |  if_e	jmp	#LR__0187
03a08     B2 01 00 FF 
03a0c     8C 2F 06 F6 | 	mov	local05, ##@LR__5469
03a10     3B 13 02 F6 | 	mov	arg01, local41
03a14     17 15 02 F6 | 	mov	arg02, local05
03a18     24 2F B2 FD | 	call	#__system___string_cmp
03a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a20     CC 00 90 5D |  if_ne	jmp	#LR__0188
03a24                 | LR__0187
03a24     37 2F 02 F6 | 	mov	local05, local37
03a28     01 2E 06 F1 | 	add	local05, #1
03a2c     17 31 02 F6 | 	mov	local06, local05
03a30     03 30 66 F0 | 	shl	local06, #3
03a34     35 00 00 FF 
03a38     0C E4 05 F1 | 	add	objptr, ##27148
03a3c     F2 3C 02 F6 | 	mov	local12, objptr
03a40     F2 30 02 F1 | 	add	local06, objptr
03a44     04 30 06 F1 | 	add	local06, #4
03a48     18 41 02 FB | 	rdlong	local14, local06
03a4c     04 30 86 F1 | 	sub	local06, #4
03a50     20 3B 02 F6 | 	mov	local11, local14
03a54     01 00 00 FF 
03a58     04 3A 0E F2 | 	cmp	local11, ##516 wz
03a5c     35 00 00 FF 
03a60     0C E4 85 F1 | 	sub	objptr, ##27148
03a64     88 00 90 5D |  if_ne	jmp	#LR__0188
03a68     37 53 02 F6 | 	mov	local23, local37
03a6c     01 52 06 F1 | 	add	local23, #1
03a70     03 52 66 F0 | 	shl	local23, #3
03a74     35 00 00 FF 
03a78     0C E4 05 F1 | 	add	objptr, ##27148
03a7c     F2 54 02 F6 | 	mov	local24, objptr
03a80     F2 52 02 F1 | 	add	local23, objptr
03a84     29 13 02 FB | 	rdlong	arg01, local23
03a88     01 14 06 F6 | 	mov	arg02, #1
03a8c     35 00 00 FF 
03a90     0C E4 85 F1 | 	sub	objptr, ##27148
03a94     88 4F B2 FD | 	call	#__system__Right_S
03a98     FD 12 02 F6 | 	mov	arg01, result1
03a9c     B2 01 00 FF 
03aa0     92 51 06 F6 | 	mov	local22, ##@LR__5470
03aa4     28 5D 02 F6 | 	mov	local28, local22
03aa8     2E 15 02 F6 | 	mov	arg02, local28
03aac     90 2E B2 FD | 	call	#__system___string_cmp
03ab0     FD 3E 0A F6 | 	mov	local13, result1 wz
03ab4     38 00 90 AD |  if_e	jmp	#LR__0188
03ab8     37 39 02 F6 | 	mov	local10, local37
03abc     01 38 06 F1 | 	add	local10, #1
03ac0     03 38 66 F0 | 	shl	local10, #3
03ac4     35 00 00 FF 
03ac8     0C E4 05 F1 | 	add	objptr, ##27148
03acc     F2 2E 02 F6 | 	mov	local05, objptr
03ad0     F2 38 02 F1 | 	add	local10, objptr
03ad4     01 00 00 FF 
03ad8     03 30 06 F6 | 	mov	local06, ##515
03adc     04 38 06 F1 | 	add	local10, #4
03ae0     01 00 80 FF 
03ae4     1C 07 68 FC | 	wrlong	##515, local10
03ae8     35 00 00 FF 
03aec     0C E4 85 F1 | 	sub	objptr, ##27148
03af0                 | LR__0188
03af0                 | ' if (lp$="copy") andalso lparts(addptr+1).token=token_name andalso right$(lparts(addptr+1).part$,1)<>"$" then lparts(addptr+1).token=token_string
03af0     B2 01 00 FF 
03af4     94 15 06 F6 | 	mov	arg02, ##@LR__5471
03af8     3B 13 02 F6 | 	mov	arg01, local41
03afc     40 2E B2 FD | 	call	#__system___string_cmp
03b00     00 FA 0D F2 | 	cmp	result1, #0 wz
03b04     C8 00 90 5D |  if_ne	jmp	#LR__0189
03b08     37 2F 02 F6 | 	mov	local05, local37
03b0c     01 2E 06 F1 | 	add	local05, #1
03b10     03 2E 66 F0 | 	shl	local05, #3
03b14     35 00 00 FF 
03b18     0C E4 05 F1 | 	add	objptr, ##27148
03b1c     F2 30 02 F6 | 	mov	local06, objptr
03b20     F2 2E 02 F1 | 	add	local05, objptr
03b24     04 2E 06 F1 | 	add	local05, #4
03b28     17 3B 02 FB | 	rdlong	local11, local05
03b2c     04 2E 86 F1 | 	sub	local05, #4
03b30     1D 3D 02 F6 | 	mov	local12, local11
03b34     01 00 00 FF 
03b38     04 3C 0E F2 | 	cmp	local12, ##516 wz
03b3c     35 00 00 FF 
03b40     0C E4 85 F1 | 	sub	objptr, ##27148
03b44     88 00 90 5D |  if_ne	jmp	#LR__0189
03b48     37 51 02 F6 | 	mov	local22, local37
03b4c     01 50 06 F1 | 	add	local22, #1
03b50     03 50 66 F0 | 	shl	local22, #3
03b54     35 00 00 FF 
03b58     0C E4 05 F1 | 	add	objptr, ##27148
03b5c     F2 52 02 F6 | 	mov	local23, objptr
03b60     F2 50 02 F1 | 	add	local22, objptr
03b64     28 13 02 FB | 	rdlong	arg01, local22
03b68     01 14 06 F6 | 	mov	arg02, #1
03b6c     35 00 00 FF 
03b70     0C E4 85 F1 | 	sub	objptr, ##27148
03b74     A8 4E B2 FD | 	call	#__system__Right_S
03b78     FD 12 02 F6 | 	mov	arg01, result1
03b7c     B2 01 00 FF 
03b80     99 5D 06 F6 | 	mov	local28, ##@LR__5472
03b84     2E 3F 02 F6 | 	mov	local13, local28
03b88     1F 15 02 F6 | 	mov	arg02, local13
03b8c     B0 2D B2 FD | 	call	#__system___string_cmp
03b90     FD 40 0A F6 | 	mov	local14, result1 wz
03b94     38 00 90 AD |  if_e	jmp	#LR__0189
03b98     37 39 02 F6 | 	mov	local10, local37
03b9c     01 38 06 F1 | 	add	local10, #1
03ba0     03 38 66 F0 | 	shl	local10, #3
03ba4     35 00 00 FF 
03ba8     0C E4 05 F1 | 	add	objptr, ##27148
03bac     F2 2E 02 F6 | 	mov	local05, objptr
03bb0     F2 38 02 F1 | 	add	local10, objptr
03bb4     01 00 00 FF 
03bb8     03 30 06 F6 | 	mov	local06, ##515
03bbc     04 38 06 F1 | 	add	local10, #4
03bc0     01 00 80 FF 
03bc4     1C 07 68 FC | 	wrlong	##515, local10
03bc8     35 00 00 FF 
03bcc     0C E4 85 F1 | 	sub	objptr, ##27148
03bd0                 | LR__0189
03bd0                 | ' if (lp$="copy") andalso lparts(addptr+3).token=token_name andalso right$(lparts(addptr+3).part$,1)<>"$" then lparts(addptr+3).token=token_string
03bd0     B2 01 00 FF 
03bd4     9B 15 06 F6 | 	mov	arg02, ##@LR__5473
03bd8     3B 13 02 F6 | 	mov	arg01, local41
03bdc     60 2D B2 FD | 	call	#__system___string_cmp
03be0     00 FA 0D F2 | 	cmp	result1, #0 wz
03be4     C8 00 90 5D |  if_ne	jmp	#LR__0190
03be8     37 2F 02 F6 | 	mov	local05, local37
03bec     03 2E 06 F1 | 	add	local05, #3
03bf0     03 2E 66 F0 | 	shl	local05, #3
03bf4     35 00 00 FF 
03bf8     0C E4 05 F1 | 	add	objptr, ##27148
03bfc     F2 30 02 F6 | 	mov	local06, objptr
03c00     F2 2E 02 F1 | 	add	local05, objptr
03c04     04 2E 06 F1 | 	add	local05, #4
03c08     17 3B 02 FB | 	rdlong	local11, local05
03c0c     04 2E 86 F1 | 	sub	local05, #4
03c10     1D 3D 02 F6 | 	mov	local12, local11
03c14     01 00 00 FF 
03c18     04 3C 0E F2 | 	cmp	local12, ##516 wz
03c1c     35 00 00 FF 
03c20     0C E4 85 F1 | 	sub	objptr, ##27148
03c24     88 00 90 5D |  if_ne	jmp	#LR__0190
03c28     37 51 02 F6 | 	mov	local22, local37
03c2c     03 50 06 F1 | 	add	local22, #3
03c30     03 50 66 F0 | 	shl	local22, #3
03c34     35 00 00 FF 
03c38     0C E4 05 F1 | 	add	objptr, ##27148
03c3c     F2 52 02 F6 | 	mov	local23, objptr
03c40     F2 50 02 F1 | 	add	local22, objptr
03c44     28 13 02 FB | 	rdlong	arg01, local22
03c48     01 14 06 F6 | 	mov	arg02, #1
03c4c     35 00 00 FF 
03c50     0C E4 85 F1 | 	sub	objptr, ##27148
03c54     C8 4D B2 FD | 	call	#__system__Right_S
03c58     FD 12 02 F6 | 	mov	arg01, result1
03c5c     B2 01 00 FF 
03c60     A0 5D 06 F6 | 	mov	local28, ##@LR__5474
03c64     2E 3F 02 F6 | 	mov	local13, local28
03c68     1F 15 02 F6 | 	mov	arg02, local13
03c6c     D0 2C B2 FD | 	call	#__system___string_cmp
03c70     FD 40 0A F6 | 	mov	local14, result1 wz
03c74     38 00 90 AD |  if_e	jmp	#LR__0190
03c78     37 39 02 F6 | 	mov	local10, local37
03c7c     03 38 06 F1 | 	add	local10, #3
03c80     03 38 66 F0 | 	shl	local10, #3
03c84     35 00 00 FF 
03c88     0C E4 05 F1 | 	add	objptr, ##27148
03c8c     F2 2E 02 F6 | 	mov	local05, objptr
03c90     F2 38 02 F1 | 	add	local10, objptr
03c94     01 00 00 FF 
03c98     03 30 06 F6 | 	mov	local06, ##515
03c9c     04 38 06 F1 | 	add	local10, #4
03ca0     01 00 80 FF 
03ca4     1C 07 68 FC | 	wrlong	##515, local10
03ca8     35 00 00 FF 
03cac     0C E4 85 F1 | 	sub	objptr, ##27148
03cb0                 | LR__0190
03cb0                 | ' 
03cb0                 | ' ' cd needs special treatment..
03cb0                 | ' 
03cb0                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
03cb0     B2 01 00 FF 
03cb4     A2 15 06 F6 | 	mov	arg02, ##@LR__5475
03cb8     3B 13 02 F6 | 	mov	arg01, local41
03cbc     80 2C B2 FD | 	call	#__system___string_cmp
03cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
03cc4     38 00 90 5D |  if_ne	jmp	#LR__0191
03cc8     37 39 02 F6 | 	mov	local10, local37
03ccc     01 38 06 F1 | 	add	local10, #1
03cd0     03 38 66 F0 | 	shl	local10, #3
03cd4     35 00 00 FF 
03cd8     0C E4 05 F1 | 	add	objptr, ##27148
03cdc     F2 2E 02 F6 | 	mov	local05, objptr
03ce0     F2 38 02 F1 | 	add	local10, objptr
03ce4     01 00 00 FF 
03ce8     03 30 06 F6 | 	mov	local06, ##515
03cec     04 38 06 F1 | 	add	local10, #4
03cf0     01 00 80 FF 
03cf4     1C 07 68 FC | 	wrlong	##515, local10
03cf8     35 00 00 FF 
03cfc     0C E4 85 F1 | 	sub	objptr, ##27148
03d00                 | LR__0191
03d00                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
03d00     B2 01 00 FF 
03d04     A5 15 06 F6 | 	mov	arg02, ##@LR__5476
03d08     3B 13 02 F6 | 	mov	arg01, local41
03d0c     30 2C B2 FD | 	call	#__system___string_cmp
03d10     00 FA 0D F2 | 	cmp	result1, #0 wz
03d14     A4 00 90 5D |  if_ne	jmp	#LR__0192
03d18     37 31 02 F6 | 	mov	local06, local37
03d1c     01 30 06 F1 | 	add	local06, #1
03d20     03 30 66 F0 | 	shl	local06, #3
03d24     35 00 00 FF 
03d28     0C E4 05 F1 | 	add	objptr, ##27148
03d2c     F2 3C 02 F6 | 	mov	local12, objptr
03d30     F2 30 02 F1 | 	add	local06, objptr
03d34     18 13 02 FB | 	rdlong	arg01, local06
03d38     B2 01 00 FF 
03d3c     A9 2F 06 F6 | 	mov	local05, ##@LR__5477
03d40     17 15 02 F6 | 	mov	arg02, local05
03d44     35 00 00 FF 
03d48     0C E4 85 F1 | 	sub	objptr, ##27148
03d4c     F0 2B B2 FD | 	call	#__system___string_cmp
03d50     00 FA 0D F2 | 	cmp	result1, #0 wz
03d54     64 00 90 5D |  if_ne	jmp	#LR__0192
03d58     37 39 02 F6 | 	mov	local10, local37
03d5c     01 38 06 F1 | 	add	local10, #1
03d60     03 38 66 F0 | 	shl	local10, #3
03d64     35 00 00 FF 
03d68     0C E4 05 F1 | 	add	objptr, ##27148
03d6c     F2 38 02 F1 | 	add	local10, objptr
03d70     04 38 06 F1 | 	add	local10, #4
03d74     01 00 80 FF 
03d78     1C 07 68 FC | 	wrlong	##515, local10
03d7c     37 39 02 F6 | 	mov	local10, local37
03d80     01 38 06 F1 | 	add	local10, #1
03d84     03 38 66 F0 | 	shl	local10, #3
03d88     F2 38 02 F1 | 	add	local10, objptr
03d8c     B2 01 00 FF 
03d90     AB 31 06 F6 | 	mov	local06, ##@LR__5478
03d94     1C 31 62 FC | 	wrlong	local06, local10
03d98     37 39 02 F6 | 	mov	local10, local37
03d9c     03 38 66 F0 | 	shl	local10, #3
03da0     F2 2E 02 F6 | 	mov	local05, objptr
03da4     F2 38 02 F1 | 	add	local10, objptr
03da8     C3 30 06 F6 | 	mov	local06, #195
03dac     04 38 06 F1 | 	add	local10, #4
03db0     1C 87 69 FC | 	wrlong	#195, local10
03db4     35 00 00 FF 
03db8     0C E4 85 F1 | 	sub	objptr, ##27148
03dbc                 | LR__0192
03dbc                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03dbc     B2 01 00 FF 
03dc0     AE 39 06 F6 | 	mov	local10, ##@LR__5479
03dc4     3B 13 02 F6 | 	mov	arg01, local41
03dc8     1C 15 02 F6 | 	mov	arg02, local10
03dcc     70 2B B2 FD | 	call	#__system___string_cmp
03dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd4     04 01 90 5D |  if_ne	jmp	#LR__0195
03dd8     37 31 02 F6 | 	mov	local06, local37
03ddc     01 30 06 F1 | 	add	local06, #1
03de0     03 30 66 F0 | 	shl	local06, #3
03de4     35 00 00 FF 
03de8     0C E4 05 F1 | 	add	objptr, ##27148
03dec     F2 3C 02 F6 | 	mov	local12, objptr
03df0     F2 30 02 F1 | 	add	local06, objptr
03df4     18 13 02 FB | 	rdlong	arg01, local06
03df8     B2 01 00 FF 
03dfc     B1 2F 06 F6 | 	mov	local05, ##@LR__5480
03e00     17 39 02 F6 | 	mov	local10, local05
03e04     1C 15 02 F6 | 	mov	arg02, local10
03e08     35 00 00 FF 
03e0c     0C E4 85 F1 | 	sub	objptr, ##27148
03e10     2C 2B B2 FD | 	call	#__system___string_cmp
03e14     00 FA 0D F2 | 	cmp	result1, #0 wz
03e18     C0 00 90 5D |  if_ne	jmp	#LR__0195
03e1c     37 39 02 F6 | 	mov	local10, local37
03e20     01 38 06 F1 | 	add	local10, #1
03e24     03 38 66 F0 | 	shl	local10, #3
03e28     35 00 00 FF 
03e2c     0C E4 05 F1 | 	add	objptr, ##27148
03e30     F2 2E 02 F6 | 	mov	local05, objptr
03e34     F2 38 02 F1 | 	add	local10, objptr
03e38     01 00 00 FF 
03e3c     03 30 06 F6 | 	mov	local06, ##515
03e40     04 38 06 F1 | 	add	local10, #4
03e44     01 00 80 FF 
03e48     1C 07 68 FC | 	wrlong	##515, local10
03e4c     04 38 86 F1 | 	sub	local10, #4
03e50     37 29 02 F6 | 	mov	local02, local37
03e54     02 28 06 F1 | 	add	local02, #2
03e58     23 8D 02 F6 | 	mov	local52, local17
03e5c     01 8C 06 F1 | 	add	local52, #1
03e60     35 00 00 FF 
03e64     0C E4 85 F1 | 	sub	objptr, ##27148
03e68                 | LR__0193
03e68     46 29 52 F2 | 	cmps	local02, local52 wc
03e6c     6C 00 90 3D |  if_ae	jmp	#LR__0194
03e70     14 39 02 F6 | 	mov	local10, local02
03e74     03 38 66 F0 | 	shl	local10, #3
03e78     35 00 00 FF 
03e7c     0C E4 05 F1 | 	add	objptr, ##27148
03e80     F2 38 02 F1 | 	add	local10, objptr
03e84     1C 8F 02 FB | 	rdlong	local53, local10
03e88     37 39 02 F6 | 	mov	local10, local37
03e8c     01 38 06 F1 | 	add	local10, #1
03e90     03 38 66 F0 | 	shl	local10, #3
03e94     F2 2E 02 F6 | 	mov	local05, objptr
03e98     F2 38 02 F1 | 	add	local10, objptr
03e9c     37 3B 02 F6 | 	mov	local11, local37
03ea0     01 3A 06 F1 | 	add	local11, #1
03ea4     1D 41 02 F6 | 	mov	local14, local11
03ea8     03 40 66 F0 | 	shl	local14, #3
03eac     F2 3E 02 F6 | 	mov	local13, objptr
03eb0     F2 40 02 F1 | 	add	local14, objptr
03eb4     20 13 02 FB | 	rdlong	arg01, local14
03eb8     47 3D 02 F6 | 	mov	local12, local53
03ebc     1E 15 02 F6 | 	mov	arg02, local12
03ec0     35 00 00 FF 
03ec4     0C E4 85 F1 | 	sub	objptr, ##27148
03ec8     A8 2A B2 FD | 	call	#__system___string_concat
03ecc     FD 30 02 F6 | 	mov	local06, result1
03ed0     1C 31 62 FC | 	wrlong	local06, local10
03ed4     01 28 06 F1 | 	add	local02, #1
03ed8     8C FF 9F FD | 	jmp	#LR__0193
03edc                 | LR__0194
03edc                 | LR__0195
03edc                 | ' 
03edc                 | ' ' determine a type of the line and compile it
03edc                 | ' 
03edc                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03edc     35 00 00 FF 
03ee0     0C E4 05 F1 | 	add	objptr, ##27148
03ee4     F2 12 02 FB | 	rdlong	arg01, objptr
03ee8     35 00 00 FF 
03eec     0C E4 85 F1 | 	sub	objptr, ##27148
03ef0     A8 2F B0 FD | 	call	#_isdec
03ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ef8     30 00 90 AD |  if_e	jmp	#LR__0196
03efc     35 00 00 FF 
03f00     0C E4 05 F1 | 	add	objptr, ##27148
03f04     F2 12 02 FB | 	rdlong	arg01, objptr
03f08     35 00 00 FF 
03f0c     0C E4 85 F1 | 	sub	objptr, ##27148
03f10     00 14 06 F6 | 	mov	arg02, #0
03f14     F4 5E B2 FD | 	call	#__system____builtin_atoi
03f18     52 00 00 FF 
03f1c     B0 E4 05 F1 | 	add	objptr, ##42160
03f20     F2 FA 61 FC | 	wrlong	result1, objptr
03f24     52 00 00 FF 
03f28     B0 E4 85 F1 | 	sub	objptr, ##42160
03f2c                 | LR__0196
03f2c                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03f2c     52 00 00 FF 
03f30     B0 E4 05 F1 | 	add	objptr, ##42160
03f34     F2 2C 02 FB | 	rdlong	local04, objptr
03f38     52 00 00 FF 
03f3c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f40     01 2C 16 F2 | 	cmp	local04, #1 wc
03f44     40 00 90 CD |  if_b	jmp	#LR__0197
03f48     01 46 0E F2 | 	cmp	local17, #1 wz
03f4c     37 00 00 AF 
03f50     24 E4 05 A1 |  if_e	add	objptr, ##28196
03f54     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03f58     37 00 00 AF 
03f5c     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03f60     17 39 02 A6 |  if_e	mov	local10, local05
03f64     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03f68     1C 00 90 5D |  if_ne	jmp	#LR__0197
03f6c     52 00 00 FF 
03f70     B0 E4 05 F1 | 	add	objptr, ##42160
03f74     F2 12 02 FB | 	rdlong	arg01, objptr
03f78     52 00 00 FF 
03f7c     B0 E4 85 F1 | 	sub	objptr, ##42160
03f80     C4 30 B0 FD | 	call	#_deleteline
03f84     C8 03 90 FD | 	jmp	#LR__0208
03f88                 | LR__0197
03f88                 | ' 
03f88                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03f88     37 00 00 FF 
03f8c     24 E4 05 F1 | 	add	objptr, ##28196
03f90     F2 2C 0A FB | 	rdlong	local04, objptr wz
03f94     37 00 00 FF 
03f98     24 E4 85 F1 | 	sub	objptr, ##28196
03f9c     20 00 90 AD |  if_e	jmp	#LR__0198
03fa0     37 00 00 FF 
03fa4     24 E4 05 F1 | 	add	objptr, ##28196
03fa8     F2 2E 02 FB | 	rdlong	local05, objptr
03fac     37 00 00 FF 
03fb0     24 E4 85 F1 | 	sub	objptr, ##28196
03fb4     17 39 02 F6 | 	mov	local10, local05
03fb8     03 38 0E F2 | 	cmp	local10, #3 wz
03fbc     C0 00 90 5D |  if_ne	jmp	#LR__0200
03fc0                 | LR__0198
03fc0     35 00 00 FF 
03fc4     20 E4 05 F1 | 	add	objptr, ##27168
03fc8     F2 3C 02 FB | 	rdlong	local12, objptr
03fcc     35 00 00 FF 
03fd0     20 E4 85 F1 | 	sub	objptr, ##27168
03fd4     1B 3C 0E F2 | 	cmp	local12, #27 wz
03fd8     A4 00 90 AD |  if_e	jmp	#LR__0200
03fdc     52 00 00 FF 
03fe0     B0 E4 05 F1 | 	add	objptr, ##42160
03fe4     F2 12 02 FB | 	rdlong	arg01, objptr
03fe8     1B 00 00 FF 
03fec     8C E4 85 F1 | 	sub	objptr, ##13964
03ff0     F2 16 02 FB | 	rdlong	arg03, objptr
03ff4     37 00 00 FF 
03ff8     24 E4 85 F1 | 	sub	objptr, ##28196
03ffc     00 14 06 F6 | 	mov	arg02, #0
04000     A4 44 B0 FD | 	call	#_compile
04004     FD 26 0A F6 | 	mov	local01, result1 wz
04008                 | '   err=compile(linenum,0,cont) 
04008                 | '   if err<>0 then printerror(err,linenum): goto 101
04008     20 00 90 AD |  if_e	jmp	#LR__0199
0400c     52 00 00 FF 
04010     B0 E4 05 F1 | 	add	objptr, ##42160
04014     F2 14 02 FB | 	rdlong	arg02, objptr
04018     52 00 00 FF 
0401c     B0 E4 85 F1 | 	sub	objptr, ##42160
04020     13 13 02 F6 | 	mov	arg01, local01
04024     00 EF B1 FD | 	call	#_printerror
04028     44 03 90 FD | 	jmp	#LR__0209
0402c                 | LR__0199
0402c                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
0402c     52 00 00 FF 
04030     F4 E4 05 F1 | 	add	objptr, ##42228
04034     F2 12 02 FB | 	rdlong	arg01, objptr
04038     52 00 00 FF 
0403c     F4 E4 85 F1 | 	sub	objptr, ##42228
04040     B2 01 00 FF 
04044     B3 15 06 F6 | 	mov	arg02, ##@LR__5481
04048     F4 28 B2 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     FC 02 90 AD |  if_e	jmp	#LR__0208
04054     52 00 00 FF 
04058     F4 E4 05 F1 | 	add	objptr, ##42228
0405c     F2 2C 02 FB | 	rdlong	local04, objptr
04060     1B 00 00 FF 
04064     D8 E4 85 F1 | 	sub	objptr, ##14040
04068     F2 2C 62 FC | 	wrlong	local04, objptr
0406c     08 E4 05 F1 | 	add	objptr, #8
04070     F2 08 68 FC | 	wrlong	#4, objptr
04074     37 00 00 FF 
04078     24 E4 85 F1 | 	sub	objptr, ##28196
0407c     14 D8 9F FD | 	jmp	#LR__0070
04080                 | LR__0200
04080                 | '       							
04080                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
04080     37 00 00 FF 
04084     24 E4 05 F1 | 	add	objptr, ##28196
04088     F2 2C 02 FB | 	rdlong	local04, objptr
0408c     37 00 00 FF 
04090     24 E4 85 F1 | 	sub	objptr, ##28196
04094     01 2C 0E F2 | 	cmp	local04, #1 wz
04098     37 00 00 5F 
0409c     24 E4 05 51 |  if_ne	add	objptr, ##28196
040a0     F2 38 02 5B |  if_ne	rdlong	local10, objptr
040a4     37 00 00 5F 
040a8     24 E4 85 51 |  if_ne	sub	objptr, ##28196
040ac     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
040b0     C0 00 90 5D |  if_ne	jmp	#LR__0202
040b4     35 00 00 FF 
040b8     18 E4 05 F1 | 	add	objptr, ##27160
040bc     F2 3C 02 FB | 	rdlong	local12, objptr
040c0     35 00 00 FF 
040c4     18 E4 85 F1 | 	sub	objptr, ##27160
040c8     1B 3C 0E F2 | 	cmp	local12, #27 wz
040cc     A4 00 90 AD |  if_e	jmp	#LR__0202
040d0     52 00 00 FF 
040d4     B0 E4 05 F1 | 	add	objptr, ##42160
040d8     F2 12 02 FB | 	rdlong	arg01, objptr
040dc     1B 00 00 FF 
040e0     8C E4 85 F1 | 	sub	objptr, ##13964
040e4     F2 16 02 FB | 	rdlong	arg03, objptr
040e8     37 00 00 FF 
040ec     24 E4 85 F1 | 	sub	objptr, ##28196
040f0     00 14 06 F6 | 	mov	arg02, #0
040f4     B0 43 B0 FD | 	call	#_compile
040f8     FD 26 0A F6 | 	mov	local01, result1 wz
040fc                 | '   err=compile(linenum,0,cont) 
040fc                 | '   if err<>0 then printerror(err,linenum): goto 101
040fc     20 00 90 AD |  if_e	jmp	#LR__0201
04100     52 00 00 FF 
04104     B0 E4 05 F1 | 	add	objptr, ##42160
04108     F2 14 02 FB | 	rdlong	arg02, objptr
0410c     52 00 00 FF 
04110     B0 E4 85 F1 | 	sub	objptr, ##42160
04114     13 13 02 F6 | 	mov	arg01, local01
04118     0C EE B1 FD | 	call	#_printerror
0411c     50 02 90 FD | 	jmp	#LR__0209
04120                 | LR__0201
04120                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
04120     52 00 00 FF 
04124     F4 E4 05 F1 | 	add	objptr, ##42228
04128     F2 12 02 FB | 	rdlong	arg01, objptr
0412c     52 00 00 FF 
04130     F4 E4 85 F1 | 	sub	objptr, ##42228
04134     B2 01 00 FF 
04138     B4 15 06 F6 | 	mov	arg02, ##@LR__5482
0413c     00 28 B2 FD | 	call	#__system___string_cmp
04140     00 FA 0D F2 | 	cmp	result1, #0 wz
04144     08 02 90 AD |  if_e	jmp	#LR__0208
04148     52 00 00 FF 
0414c     F4 E4 05 F1 | 	add	objptr, ##42228
04150     F2 2C 02 FB | 	rdlong	local04, objptr
04154     1B 00 00 FF 
04158     D8 E4 85 F1 | 	sub	objptr, ##14040
0415c     F2 2C 62 FC | 	wrlong	local04, objptr
04160     08 E4 05 F1 | 	add	objptr, #8
04164     F2 08 68 FC | 	wrlong	#4, objptr
04168     37 00 00 FF 
0416c     24 E4 85 F1 | 	sub	objptr, ##28196
04170     20 D7 9F FD | 	jmp	#LR__0070
04174                 | LR__0202
04174                 | ' 							 
04174                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
04174     37 00 00 FF 
04178     24 E4 05 F1 | 	add	objptr, ##28196
0417c     F2 2C 0A FB | 	rdlong	local04, objptr wz
04180     37 00 00 FF 
04184     24 E4 85 F1 | 	sub	objptr, ##28196
04188     37 00 00 5F 
0418c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04190     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04194     37 00 00 5F 
04198     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0419c     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
041a0     35 00 00 AF 
041a4     20 E4 05 A1 |  if_e	add	objptr, ##27168
041a8     F2 3C 02 AB |  if_e	rdlong	local12, objptr
041ac     35 00 00 AF 
041b0     20 E4 85 A1 |  if_e	sub	objptr, ##27168
041b4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
041b8     A4 00 90 5D |  if_ne	jmp	#LR__0204
041bc     52 00 00 FF 
041c0     B0 E4 05 F1 | 	add	objptr, ##42160
041c4     F2 12 02 FB | 	rdlong	arg01, objptr
041c8     1B 00 00 FF 
041cc     8C E4 85 F1 | 	sub	objptr, ##13964
041d0     F2 16 02 FB | 	rdlong	arg03, objptr
041d4     37 00 00 FF 
041d8     24 E4 85 F1 | 	sub	objptr, ##28196
041dc     00 14 06 F6 | 	mov	arg02, #0
041e0     8C 43 B0 FD | 	call	#_compile_assign
041e4     FD 26 0A F6 | 	mov	local01, result1 wz
041e8                 | '   err=compile_assign(linenum,0,cont)
041e8                 | '   if err<>0 then printerror(err,linenum): goto 101
041e8     20 00 90 AD |  if_e	jmp	#LR__0203
041ec     52 00 00 FF 
041f0     B0 E4 05 F1 | 	add	objptr, ##42160
041f4     F2 14 02 FB | 	rdlong	arg02, objptr
041f8     52 00 00 FF 
041fc     B0 E4 85 F1 | 	sub	objptr, ##42160
04200     13 13 02 F6 | 	mov	arg01, local01
04204     20 ED B1 FD | 	call	#_printerror
04208     64 01 90 FD | 	jmp	#LR__0209
0420c                 | LR__0203
0420c                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
0420c     52 00 00 FF 
04210     F4 E4 05 F1 | 	add	objptr, ##42228
04214     F2 12 02 FB | 	rdlong	arg01, objptr
04218     52 00 00 FF 
0421c     F4 E4 85 F1 | 	sub	objptr, ##42228
04220     B2 01 00 FF 
04224     B5 15 06 F6 | 	mov	arg02, ##@LR__5483
04228     14 27 B2 FD | 	call	#__system___string_cmp
0422c     00 FA 0D F2 | 	cmp	result1, #0 wz
04230     1C 01 90 AD |  if_e	jmp	#LR__0208
04234     52 00 00 FF 
04238     F4 E4 05 F1 | 	add	objptr, ##42228
0423c     F2 2C 02 FB | 	rdlong	local04, objptr
04240     1B 00 00 FF 
04244     D8 E4 85 F1 | 	sub	objptr, ##14040
04248     F2 2C 62 FC | 	wrlong	local04, objptr
0424c     08 E4 05 F1 | 	add	objptr, #8
04250     F2 08 68 FC | 	wrlong	#4, objptr
04254     37 00 00 FF 
04258     24 E4 85 F1 | 	sub	objptr, ##28196
0425c     34 D6 9F FD | 	jmp	#LR__0070
04260                 | LR__0204
04260                 | '     							 
04260                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
04260     37 00 00 FF 
04264     24 E4 05 F1 | 	add	objptr, ##28196
04268     F2 2C 02 FB | 	rdlong	local04, objptr
0426c     37 00 00 FF 
04270     24 E4 85 F1 | 	sub	objptr, ##28196
04274     01 2C 0E F2 | 	cmp	local04, #1 wz
04278     37 00 00 5F 
0427c     24 E4 05 51 |  if_ne	add	objptr, ##28196
04280     F2 38 02 5B |  if_ne	rdlong	local10, objptr
04284     37 00 00 5F 
04288     24 E4 85 51 |  if_ne	sub	objptr, ##28196
0428c     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
04290     35 00 00 AF 
04294     18 E4 05 A1 |  if_e	add	objptr, ##27160
04298     F2 3C 02 AB |  if_e	rdlong	local12, objptr
0429c     35 00 00 AF 
042a0     18 E4 85 A1 |  if_e	sub	objptr, ##27160
042a4     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
042a8     A4 00 90 5D |  if_ne	jmp	#LR__0207
042ac     52 00 00 FF 
042b0     B0 E4 05 F1 | 	add	objptr, ##42160
042b4     F2 12 02 FB | 	rdlong	arg01, objptr
042b8     1B 00 00 FF 
042bc     8C E4 85 F1 | 	sub	objptr, ##13964
042c0     F2 16 02 FB | 	rdlong	arg03, objptr
042c4     37 00 00 FF 
042c8     24 E4 85 F1 | 	sub	objptr, ##28196
042cc     00 14 06 F6 | 	mov	arg02, #0
042d0     9C 42 B0 FD | 	call	#_compile_assign
042d4     FD 26 0A F6 | 	mov	local01, result1 wz
042d8                 | '   err=compile_assign(linenum,0,cont) 
042d8                 | '   if err<>0 then printerror(err,linenum): goto 101
042d8     20 00 90 AD |  if_e	jmp	#LR__0205
042dc     52 00 00 FF 
042e0     B0 E4 05 F1 | 	add	objptr, ##42160
042e4     F2 14 02 FB | 	rdlong	arg02, objptr
042e8     52 00 00 FF 
042ec     B0 E4 85 F1 | 	sub	objptr, ##42160
042f0     13 13 02 F6 | 	mov	arg01, local01
042f4     30 EC B1 FD | 	call	#_printerror
042f8     74 00 90 FD | 	jmp	#LR__0209
042fc                 | LR__0205
042fc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
042fc     52 00 00 FF 
04300     F4 E4 05 F1 | 	add	objptr, ##42228
04304     F2 12 02 FB | 	rdlong	arg01, objptr
04308     52 00 00 FF 
0430c     F4 E4 85 F1 | 	sub	objptr, ##42228
04310     B2 01 00 FF 
04314     B6 15 06 F6 | 	mov	arg02, ##@LR__5484
04318     24 26 B2 FD | 	call	#__system___string_cmp
0431c     00 FA 4D F2 | 	cmps	result1, #0 wz
04320     2C 00 90 AD |  if_e	jmp	#LR__0206
04324     52 00 00 FF 
04328     F4 E4 05 F1 | 	add	objptr, ##42228
0432c     F2 2C 02 FB | 	rdlong	local04, objptr
04330     1B 00 00 FF 
04334     D8 E4 85 F1 | 	sub	objptr, ##14040
04338     F2 2C 62 FC | 	wrlong	local04, objptr
0433c     08 E4 05 F1 | 	add	objptr, #8
04340     F2 08 68 FC | 	wrlong	#4, objptr
04344     37 00 00 FF 
04348     24 E4 85 F1 | 	sub	objptr, ##28196
0434c     44 D5 9F FD | 	jmp	#LR__0070
04350                 | LR__0206
04350                 | LR__0207
04350                 | LR__0208
04350                 | ' 
04350                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
04350     52 00 00 FF 
04354     B0 E4 05 F1 | 	add	objptr, ##42160
04358     F2 2C 0A FB | 	rdlong	local04, objptr wz
0435c     52 00 00 FF 
04360     B0 E4 85 F1 | 	sub	objptr, ##42160
04364     B0 00 90 5D |  if_ne	jmp	#LR__0212
04368     02 12 06 F6 | 	mov	arg01, #2
0436c     14 91 B0 FD | 	call	#_execute_line
04370                 | LR__0209
04370                 | '   execute_line(2)
04370                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
04370     52 00 00 FF 
04374     D4 E4 05 F1 | 	add	objptr, ##42196
04378     F2 2C 0A FB | 	rdlong	local04, objptr wz
0437c     52 00 00 FF 
04380     D4 E4 85 F1 | 	sub	objptr, ##42196
04384     20 00 90 5D |  if_ne	jmp	#LR__0210
04388     B2 01 00 FF 
0438c     B7 13 06 F6 | 	mov	arg01, ##@LR__5485
04390                 | ' 
04390                 | ' write(text)
04390     C0 0C B2 FD | 	call	#_hg010b_spin2_write
04394                 | ' crlf
04394     BC 11 B2 FD | 	call	#_hg010b_spin2_crlf
04398     B2 01 00 FF 
0439c     B8 13 06 F6 | 	mov	arg01, ##@LR__5486
043a0                 | ' 
043a0                 | ' write(text)
043a0     B0 0C B2 FD | 	call	#_hg010b_spin2_write
043a4                 | ' crlf
043a4     AC 11 B2 FD | 	call	#_hg010b_spin2_crlf
043a8                 | LR__0210
043a8                 | '     if inload=1 andalso err>0 then print fullline$
043a8     52 00 00 FF 
043ac     D4 E4 05 F1 | 	add	objptr, ##42196
043b0     F2 2C 02 FB | 	rdlong	local04, objptr
043b4     52 00 00 FF 
043b8     D4 E4 85 F1 | 	sub	objptr, ##42196
043bc     01 2C 0E F2 | 	cmp	local04, #1 wz
043c0     54 00 90 5D |  if_ne	jmp	#LR__0211
043c4     01 26 56 F2 | 	cmps	local01, #1 wc
043c8     4C 00 90 CD |  if_b	jmp	#LR__0211
043cc     00 12 06 F6 | 	mov	arg01, #0
043d0     E8 81 B2 FD | 	call	#__system___getiolock_0603
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     3C 25 B2 FD | 	call	#__system___lockmem
043dc     37 00 00 FF 
043e0     20 E4 05 F1 | 	add	objptr, ##28192
043e4     F2 14 02 FB | 	rdlong	arg02, objptr
043e8     37 00 00 FF 
043ec     20 E4 85 F1 | 	sub	objptr, ##28192
043f0     00 12 06 F6 | 	mov	arg01, #0
043f4     00 16 06 F6 | 	mov	arg03, #0
043f8     14 32 B2 FD | 	call	#__system___basic_print_string
043fc     00 12 06 F6 | 	mov	arg01, #0
04400     0A 14 06 F6 | 	mov	arg02, #10
04404     00 16 06 F6 | 	mov	arg03, #0
04408     AC 31 B2 FD | 	call	#__system___basic_print_char
0440c     00 12 06 F6 | 	mov	arg01, #0
04410     A8 81 B2 FD | 	call	#__system___getiolock_0603
04414     FD 00 68 FC | 	wrlong	#0, result1
04418                 | LR__0211
04418                 | LR__0212
04418     A7 F0 03 F6 | 	mov	ptra, fp
0441c     B2 00 A0 FD | 	call	#popregs_
04420                 | _interpret_ret
04420     2D 00 64 FD | 	ret
04424                 | 
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '
04424                 | ' '                          END OF TOKENIZER MAIN CODE
04424                 | ' '
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04424                 | ' '---------------------------------------------------------------------------------------------------------------------
04424                 | ' 
04424                 | ' ' Check if the part is an operator, return a token or 0 if not found
04424                 | ' 
04424                 | ' function isoperator(s as string) as ubyte
04424                 | _isoperator
04424     01 4A 05 F6 | 	mov	COUNT_, #1
04428     A8 00 A0 FD | 	call	#pushregs_
0442c                 | ' 
0442c                 | ' select case s
0442c     09 27 02 F6 | 	mov	local01, arg01
04430     B2 01 00 FF 
04434     BE 15 06 F6 | 	mov	arg02, ##@LR__5487
04438     13 13 02 F6 | 	mov	arg01, local01
0443c     00 25 B2 FD | 	call	#__system___string_cmp
04440     00 FA 0D F2 | 	cmp	result1, #0 wz
04444     FC 01 90 AD |  if_e	jmp	#LR__0220
04448     B2 01 00 FF 
0444c     C0 15 06 F6 | 	mov	arg02, ##@LR__5488
04450     13 13 02 F6 | 	mov	arg01, local01
04454     E8 24 B2 FD | 	call	#__system___string_cmp
04458     00 FA 0D F2 | 	cmp	result1, #0 wz
0445c     EC 01 90 AD |  if_e	jmp	#LR__0221
04460     B2 01 00 FF 
04464     C2 15 06 F6 | 	mov	arg02, ##@LR__5489
04468     13 13 02 F6 | 	mov	arg01, local01
0446c     D0 24 B2 FD | 	call	#__system___string_cmp
04470     00 FA 0D F2 | 	cmp	result1, #0 wz
04474     DC 01 90 AD |  if_e	jmp	#LR__0222
04478     B2 01 00 FF 
0447c     C5 15 06 F6 | 	mov	arg02, ##@LR__5490
04480     13 13 02 F6 | 	mov	arg01, local01
04484     B8 24 B2 FD | 	call	#__system___string_cmp
04488     00 FA 0D F2 | 	cmp	result1, #0 wz
0448c     CC 01 90 AD |  if_e	jmp	#LR__0223
04490     B2 01 00 FF 
04494     C9 15 06 F6 | 	mov	arg02, ##@LR__5491
04498     13 13 02 F6 | 	mov	arg01, local01
0449c     A0 24 B2 FD | 	call	#__system___string_cmp
044a0     00 FA 0D F2 | 	cmp	result1, #0 wz
044a4     BC 01 90 AD |  if_e	jmp	#LR__0224
044a8     B2 01 00 FF 
044ac     CB 15 06 F6 | 	mov	arg02, ##@LR__5492
044b0     13 13 02 F6 | 	mov	arg01, local01
044b4     88 24 B2 FD | 	call	#__system___string_cmp
044b8     00 FA 0D F2 | 	cmp	result1, #0 wz
044bc     AC 01 90 AD |  if_e	jmp	#LR__0225
044c0     B2 01 00 FF 
044c4     CD 15 06 F6 | 	mov	arg02, ##@LR__5493
044c8     13 13 02 F6 | 	mov	arg01, local01
044cc     70 24 B2 FD | 	call	#__system___string_cmp
044d0     00 FA 0D F2 | 	cmp	result1, #0 wz
044d4     9C 01 90 AD |  if_e	jmp	#LR__0226
044d8     B2 01 00 FF 
044dc     D1 15 06 F6 | 	mov	arg02, ##@LR__5494
044e0     13 13 02 F6 | 	mov	arg01, local01
044e4     58 24 B2 FD | 	call	#__system___string_cmp
044e8     00 FA 0D F2 | 	cmp	result1, #0 wz
044ec     8C 01 90 AD |  if_e	jmp	#LR__0227
044f0     B2 01 00 FF 
044f4     D5 15 06 F6 | 	mov	arg02, ##@LR__5495
044f8     13 13 02 F6 | 	mov	arg01, local01
044fc     40 24 B2 FD | 	call	#__system___string_cmp
04500     00 FA 0D F2 | 	cmp	result1, #0 wz
04504     7C 01 90 AD |  if_e	jmp	#LR__0228
04508     B2 01 00 FF 
0450c     D9 15 06 F6 | 	mov	arg02, ##@LR__5496
04510     13 13 02 F6 | 	mov	arg01, local01
04514     28 24 B2 FD | 	call	#__system___string_cmp
04518     00 FA 0D F2 | 	cmp	result1, #0 wz
0451c     6C 01 90 AD |  if_e	jmp	#LR__0229
04520     B2 01 00 FF 
04524     DD 15 06 F6 | 	mov	arg02, ##@LR__5497
04528     13 13 02 F6 | 	mov	arg01, local01
0452c     10 24 B2 FD | 	call	#__system___string_cmp
04530     00 FA 0D F2 | 	cmp	result1, #0 wz
04534     5C 01 90 AD |  if_e	jmp	#LR__0230
04538     B2 01 00 FF 
0453c     E1 15 06 F6 | 	mov	arg02, ##@LR__5498
04540     13 13 02 F6 | 	mov	arg01, local01
04544     F8 23 B2 FD | 	call	#__system___string_cmp
04548     00 FA 0D F2 | 	cmp	result1, #0 wz
0454c     4C 01 90 AD |  if_e	jmp	#LR__0231
04550     B2 01 00 FF 
04554     E3 15 06 F6 | 	mov	arg02, ##@LR__5499
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     E0 23 B2 FD | 	call	#__system___string_cmp
04560     00 FA 0D F2 | 	cmp	result1, #0 wz
04564     3C 01 90 AD |  if_e	jmp	#LR__0232
04568     B2 01 00 FF 
0456c     E7 15 06 F6 | 	mov	arg02, ##@LR__5500
04570     13 13 02 F6 | 	mov	arg01, local01
04574     C8 23 B2 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     2C 01 90 AD |  if_e	jmp	#LR__0233
04580     B2 01 00 FF 
04584     E9 15 06 F6 | 	mov	arg02, ##@LR__5501
04588     13 13 02 F6 | 	mov	arg01, local01
0458c     B0 23 B2 FD | 	call	#__system___string_cmp
04590     00 FA 0D F2 | 	cmp	result1, #0 wz
04594     1C 01 90 AD |  if_e	jmp	#LR__0234
04598     B2 01 00 FF 
0459c     EB 15 06 F6 | 	mov	arg02, ##@LR__5502
045a0     13 13 02 F6 | 	mov	arg01, local01
045a4     98 23 B2 FD | 	call	#__system___string_cmp
045a8     00 FA 0D F2 | 	cmp	result1, #0 wz
045ac     0C 01 90 AD |  if_e	jmp	#LR__0235
045b0     B2 01 00 FF 
045b4     EE 15 06 F6 | 	mov	arg02, ##@LR__5503
045b8     13 13 02 F6 | 	mov	arg01, local01
045bc     80 23 B2 FD | 	call	#__system___string_cmp
045c0     00 FA 0D F2 | 	cmp	result1, #0 wz
045c4     FC 00 90 AD |  if_e	jmp	#LR__0236
045c8     B2 01 00 FF 
045cc     F1 15 06 F6 | 	mov	arg02, ##@LR__5504
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     68 23 B2 FD | 	call	#__system___string_cmp
045d8     00 FA 0D F2 | 	cmp	result1, #0 wz
045dc     EC 00 90 AD |  if_e	jmp	#LR__0237
045e0     B2 01 00 FF 
045e4     F3 15 06 F6 | 	mov	arg02, ##@LR__5505
045e8     13 13 02 F6 | 	mov	arg01, local01
045ec     50 23 B2 FD | 	call	#__system___string_cmp
045f0     00 FA 0D F2 | 	cmp	result1, #0 wz
045f4     DC 00 90 AD |  if_e	jmp	#LR__0238
045f8     B2 01 00 FF 
045fc     F5 15 06 F6 | 	mov	arg02, ##@LR__5506
04600     13 13 02 F6 | 	mov	arg01, local01
04604     38 23 B2 FD | 	call	#__system___string_cmp
04608     00 FA 0D F2 | 	cmp	result1, #0 wz
0460c     CC 00 90 AD |  if_e	jmp	#LR__0239
04610     B2 01 00 FF 
04614     F8 15 06 F6 | 	mov	arg02, ##@LR__5507
04618     13 13 02 F6 | 	mov	arg01, local01
0461c     20 23 B2 FD | 	call	#__system___string_cmp
04620     00 FA 0D F2 | 	cmp	result1, #0 wz
04624     BC 00 90 AD |  if_e	jmp	#LR__0240
04628     B2 01 00 FF 
0462c     FB 15 06 F6 | 	mov	arg02, ##@LR__5508
04630     13 13 02 F6 | 	mov	arg01, local01
04634     08 23 B2 FD | 	call	#__system___string_cmp
04638     00 FA 0D F2 | 	cmp	result1, #0 wz
0463c     AC 00 90 AD |  if_e	jmp	#LR__0241
04640     B0 00 90 FD | 	jmp	#LR__0242
04644                 | LR__0220
04644     01 FA 05 F6 | 	mov	result1, #1
04648     AC 00 90 FD | 	jmp	#LR__0243
0464c                 | LR__0221
0464c     02 FA 05 F6 | 	mov	result1, #2
04650     A4 00 90 FD | 	jmp	#LR__0243
04654                 | LR__0222
04654     03 FA 05 F6 | 	mov	result1, #3
04658     9C 00 90 FD | 	jmp	#LR__0243
0465c                 | LR__0223
0465c     04 FA 05 F6 | 	mov	result1, #4
04660     94 00 90 FD | 	jmp	#LR__0243
04664                 | LR__0224
04664     05 FA 05 F6 | 	mov	result1, #5
04668     8C 00 90 FD | 	jmp	#LR__0243
0466c                 | LR__0225
0466c     06 FA 05 F6 | 	mov	result1, #6
04670     84 00 90 FD | 	jmp	#LR__0243
04674                 | LR__0226
04674     07 FA 05 F6 | 	mov	result1, #7
04678     7C 00 90 FD | 	jmp	#LR__0243
0467c                 | LR__0227
0467c     08 FA 05 F6 | 	mov	result1, #8
04680     74 00 90 FD | 	jmp	#LR__0243
04684                 | LR__0228
04684     09 FA 05 F6 | 	mov	result1, #9
04688     6C 00 90 FD | 	jmp	#LR__0243
0468c                 | LR__0229
0468c     0A FA 05 F6 | 	mov	result1, #10
04690     64 00 90 FD | 	jmp	#LR__0243
04694                 | LR__0230
04694     0B FA 05 F6 | 	mov	result1, #11
04698     5C 00 90 FD | 	jmp	#LR__0243
0469c                 | LR__0231
0469c     0C FA 05 F6 | 	mov	result1, #12
046a0     54 00 90 FD | 	jmp	#LR__0243
046a4                 | LR__0232
046a4     0D FA 05 F6 | 	mov	result1, #13
046a8     4C 00 90 FD | 	jmp	#LR__0243
046ac                 | LR__0233
046ac     0E FA 05 F6 | 	mov	result1, #14
046b0     44 00 90 FD | 	jmp	#LR__0243
046b4                 | LR__0234
046b4     1B FA 05 F6 | 	mov	result1, #27
046b8     3C 00 90 FD | 	jmp	#LR__0243
046bc                 | LR__0235
046bc     27 FA 05 F6 | 	mov	result1, #39
046c0     34 00 90 FD | 	jmp	#LR__0243
046c4                 | LR__0236
046c4     26 FA 05 F6 | 	mov	result1, #38
046c8     2C 00 90 FD | 	jmp	#LR__0243
046cc                 | LR__0237
046cc     10 FA 05 F6 | 	mov	result1, #16
046d0     24 00 90 FD | 	jmp	#LR__0243
046d4                 | LR__0238
046d4     0F FA 05 F6 | 	mov	result1, #15
046d8     1C 00 90 FD | 	jmp	#LR__0243
046dc                 | LR__0239
046dc     2A FA 05 F6 | 	mov	result1, #42
046e0     14 00 90 FD | 	jmp	#LR__0243
046e4                 | LR__0240
046e4     28 FA 05 F6 | 	mov	result1, #40
046e8     0C 00 90 FD | 	jmp	#LR__0243
046ec                 | LR__0241
046ec     29 FA 05 F6 | 	mov	result1, #41
046f0     04 00 90 FD | 	jmp	#LR__0243
046f4                 | LR__0242
046f4     00 FA 05 F6 | 	mov	result1, #0
046f8                 | LR__0243
046f8     A7 F0 03 F6 | 	mov	ptra, fp
046fc     B2 00 A0 FD | 	call	#popregs_
04700                 | _isoperator_ret
04700     2D 00 64 FD | 	ret
04704                 | 
04704                 | ' 
04704                 | ' ' Check if the part is a channel#, return a token or 0 if not found
04704                 | ' 
04704                 | ' function ischannel(s as string) as ulong
04704                 | _ischannel
04704     02 4A 05 F6 | 	mov	COUNT_, #2
04708     A8 00 A0 FD | 	call	#pushregs_
0470c                 | ' if left$(s,1)<>"#" then return 0
0470c     09 27 02 F6 | 	mov	local01, arg01
04710     01 14 06 F6 | 	mov	arg02, #1
04714     80 42 B2 FD | 	call	#__system__Left_S
04718     FD 12 02 F6 | 	mov	arg01, result1
0471c     B2 01 00 FF 
04720     FE 15 06 F6 | 	mov	arg02, ##@LR__5509
04724     18 22 B2 FD | 	call	#__system___string_cmp
04728     00 FA 0D F2 | 	cmp	result1, #0 wz
0472c     00 FA 05 56 |  if_ne	mov	result1, #0
04730     AC 00 90 5D |  if_ne	jmp	#LR__0254
04734                 | ' if len(s)<>2 then return 0
04734     13 13 02 F6 | 	mov	arg01, local01
04738     09 29 02 F6 | 	mov	local02, arg01
0473c     97 06 48 FB | 	callpa	#(@LR__0251-@LR__0250)>>2,fcache_load_ptr_
04740                 | LR__0250
04740     14 FB C9 FA | 	rdbyte	result1, local02 wz
04744     01 28 06 51 |  if_ne	add	local02, #1
04748     F4 FF 9F 5D |  if_ne	jmp	#LR__0250
0474c                 | LR__0251
0474c     09 29 82 F1 | 	sub	local02, arg01
04750     14 FB 01 F6 | 	mov	result1, local02
04754     02 FA 0D F2 | 	cmp	result1, #2 wz
04758     00 FA 05 56 |  if_ne	mov	result1, #0
0475c     80 00 90 5D |  if_ne	jmp	#LR__0254
04760                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
04760     13 13 02 F6 | 	mov	arg01, local01
04764     01 14 06 F6 | 	mov	arg02, #1
04768     B4 42 B2 FD | 	call	#__system__Right_S
0476c     FD 12 02 F6 | 	mov	arg01, result1
04770     B3 01 00 FF 
04774     00 14 06 F6 | 	mov	arg02, ##@LR__5510
04778     C4 21 B2 FD | 	call	#__system___string_cmp
0477c     00 FA 55 F2 | 	cmps	result1, #0 wc
04780     24 00 90 CD |  if_b	jmp	#LR__0252
04784     13 13 02 F6 | 	mov	arg01, local01
04788     01 14 06 F6 | 	mov	arg02, #1
0478c     90 42 B2 FD | 	call	#__system__Right_S
04790     FD 12 02 F6 | 	mov	arg01, result1
04794     B3 01 00 FF 
04798     02 14 06 F6 | 	mov	arg02, ##@LR__5511
0479c     A0 21 B2 FD | 	call	#__system___string_cmp
047a0     01 FA 55 F2 | 	cmps	result1, #1 wc
047a4     08 00 90 CD |  if_b	jmp	#LR__0253
047a8                 | LR__0252
047a8     00 FA 05 F6 | 	mov	result1, #0
047ac     30 00 90 FD | 	jmp	#LR__0254
047b0                 | LR__0253
047b0                 | ' return token_channel+val(right$(s,1))
047b0     13 13 02 F6 | 	mov	arg01, local01
047b4     01 14 06 F6 | 	mov	arg02, #1
047b8     64 42 B2 FD | 	call	#__system__Right_S
047bc     FD 12 02 F6 | 	mov	arg01, result1
047c0     DC 57 B2 FD | 	call	#__system____builtin_atof
047c4     FD 14 02 F6 | 	mov	arg02, result1
047c8     00 18 21 FF 
047cc     00 12 06 F6 | 	mov	arg01, ##1110441984
047d0     F0 4B B2 FD | 	call	#__system___float_add
047d4     FD 12 02 F6 | 	mov	arg01, result1
047d8     00 14 06 F6 | 	mov	arg02, #0
047dc     7C 54 B2 FD | 	call	#__system___float_tointeger
047e0                 | LR__0254
047e0     A7 F0 03 F6 | 	mov	ptra, fp
047e4     B2 00 A0 FD | 	call	#popregs_
047e8                 | _ischannel_ret
047e8     2D 00 64 FD | 	ret
047ec                 | 
047ec                 | ' 
047ec                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
047ec                 | ' ' todo: add spin2/pasm constants for pin control
047ec                 | ' 
047ec                 | ' function isconstant(s as string) as integer
047ec                 | _isconstant
047ec     01 4A 05 F6 | 	mov	COUNT_, #1
047f0     A8 00 A0 FD | 	call	#pushregs_
047f4                 | ' 
047f4                 | ' select case s
047f4     09 27 02 F6 | 	mov	local01, arg01
047f8     B3 01 00 FF 
047fc     04 14 06 F6 | 	mov	arg02, ##@LR__5512
04800     13 13 02 F6 | 	mov	arg01, local01
04804     38 21 B2 FD | 	call	#__system___string_cmp
04808     00 FA 0D F2 | 	cmp	result1, #0 wz
0480c     34 00 90 AD |  if_e	jmp	#LR__0260
04810     B3 01 00 FF 
04814     0A 14 06 F6 | 	mov	arg02, ##@LR__5513
04818     13 13 02 F6 | 	mov	arg01, local01
0481c     20 21 B2 FD | 	call	#__system___string_cmp
04820     00 FA 0D F2 | 	cmp	result1, #0 wz
04824     24 00 90 AD |  if_e	jmp	#LR__0261
04828     B3 01 00 FF 
0482c     11 14 06 F6 | 	mov	arg02, ##@LR__5514
04830     13 13 02 F6 | 	mov	arg01, local01
04834     08 21 B2 FD | 	call	#__system___string_cmp
04838     00 FA 0D F2 | 	cmp	result1, #0 wz
0483c     14 00 90 AD |  if_e	jmp	#LR__0262
04840     18 00 90 FD | 	jmp	#LR__0263
04844                 | LR__0260
04844     01 FA 05 F6 | 	mov	result1, #1
04848     14 00 90 FD | 	jmp	#LR__0264
0484c                 | LR__0261
0484c     02 FA 05 F6 | 	mov	result1, #2
04850     0C 00 90 FD | 	jmp	#LR__0264
04854                 | LR__0262
04854     04 FA 05 F6 | 	mov	result1, #4
04858     04 00 90 FD | 	jmp	#LR__0264
0485c                 | LR__0263
0485c     00 FA 05 F6 | 	mov	result1, #0
04860                 | LR__0264
04860     A7 F0 03 F6 | 	mov	ptra, fp
04864     B2 00 A0 FD | 	call	#popregs_
04868                 | _isconstant_ret
04868     2D 00 64 FD | 	ret
0486c                 | 
0486c                 | ' 
0486c                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
0486c                 | ' 
0486c                 | ' function isnotename(s as string) as ulong
0486c                 | _isnotename
0486c     07 4A 05 F6 | 	mov	COUNT_, #7
04870     A8 00 A0 FD | 	call	#pushregs_
04874                 | ' if left$(s,1)<>"#" then return 0
04874     09 27 02 F6 | 	mov	local01, arg01
04878     01 14 06 F6 | 	mov	arg02, #1
0487c     18 41 B2 FD | 	call	#__system__Left_S
04880     FD 12 02 F6 | 	mov	arg01, result1
04884     B3 01 00 FF 
04888     19 14 06 F6 | 	mov	arg02, ##@LR__5515
0488c     B0 20 B2 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     00 FA 05 56 |  if_ne	mov	result1, #0
04898     30 03 90 5D |  if_ne	jmp	#LR__0293
0489c                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
0489c     13 13 02 F6 | 	mov	arg01, local01
048a0     03 14 06 F6 | 	mov	arg02, #3
048a4     01 16 06 F6 | 	mov	arg03, #1
048a8     04 42 B2 FD | 	call	#__system__Mid_S
048ac     FD 12 02 F6 | 	mov	arg01, result1
048b0     B3 01 00 FF 
048b4     1B 14 06 F6 | 	mov	arg02, ##@LR__5516
048b8     84 20 B2 FD | 	call	#__system___string_cmp
048bc     00 FA 0D F2 | 	cmp	result1, #0 wz
048c0     18 00 90 5D |  if_ne	jmp	#LR__0270
048c4     13 13 02 F6 | 	mov	arg01, local01
048c8     02 14 06 F6 | 	mov	arg02, #2
048cc     02 16 06 F6 | 	mov	arg03, #2
048d0     DC 41 B2 FD | 	call	#__system__Mid_S
048d4     FD 28 02 F6 | 	mov	local02, result1
048d8     14 00 90 FD | 	jmp	#LR__0271
048dc                 | LR__0270
048dc     13 13 02 F6 | 	mov	arg01, local01
048e0     02 14 06 F6 | 	mov	arg02, #2
048e4     01 16 06 F6 | 	mov	arg03, #1
048e8     C4 41 B2 FD | 	call	#__system__Mid_S
048ec     FD 28 02 F6 | 	mov	local02, result1
048f0                 | LR__0271
048f0                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     09 2B 02 F6 | 	mov	local03, arg01
048f8     97 06 48 FB | 	callpa	#(@LR__0273-@LR__0272)>>2,fcache_load_ptr_
048fc                 | LR__0272
048fc     15 FB C9 FA | 	rdbyte	result1, local03 wz
04900     01 2A 06 51 |  if_ne	add	local03, #1
04904     F4 FF 9F 5D |  if_ne	jmp	#LR__0272
04908                 | LR__0273
04908     09 2B 82 F1 | 	sub	local03, arg01
0490c     15 15 02 F6 | 	mov	arg02, local03
04910     01 14 86 F1 | 	sub	arg02, #1
04914     13 13 02 F6 | 	mov	arg01, local01
04918     01 16 06 F6 | 	mov	arg03, #1
0491c     90 41 B2 FD | 	call	#__system__Mid_S
04920     FD 12 02 F6 | 	mov	arg01, result1
04924     B3 01 00 FF 
04928     1D 14 06 F6 | 	mov	arg02, ##@LR__5517
0492c     10 20 B2 FD | 	call	#__system___string_cmp
04930     00 FA 0D F2 | 	cmp	result1, #0 wz
04934     28 00 90 AD |  if_e	jmp	#LR__0274
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     01 14 06 F6 | 	mov	arg02, #1
04940     DC 40 B2 FD | 	call	#__system__Right_S
04944     FD 12 02 F6 | 	mov	arg01, result1
04948     54 56 B2 FD | 	call	#__system____builtin_atof
0494c     FD 12 02 F6 | 	mov	arg01, result1
04950     00 14 06 F6 | 	mov	arg02, #0
04954     04 53 B2 FD | 	call	#__system___float_tointeger
04958     FD 2C 02 F6 | 	mov	local04, result1
0495c     34 00 90 FD | 	jmp	#LR__0275
04960                 | LR__0274
04960     13 13 02 F6 | 	mov	arg01, local01
04964     01 14 06 F6 | 	mov	arg02, #1
04968     B4 40 B2 FD | 	call	#__system__Right_S
0496c     FD 12 02 F6 | 	mov	arg01, result1
04970     2C 56 B2 FD | 	call	#__system____builtin_atof
04974     FD 14 02 F6 | 	mov	arg02, result1
04978     00 C0 5F FF 
0497c     00 12 06 F6 | 	mov	arg01, ##-1082130432
04980     10 4E B2 FD | 	call	#__system___float_mul
04984     FD 12 02 F6 | 	mov	arg01, result1
04988     00 14 06 F6 | 	mov	arg02, #0
0498c     CC 52 B2 FD | 	call	#__system___float_tointeger
04990     FD 2C 02 F6 | 	mov	local04, result1
04994                 | LR__0275
04994                 | ' 
04994                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04994     00 2C 0E F2 | 	cmp	local04, #0 wz
04998     24 00 90 5D |  if_ne	jmp	#LR__0276
0499c     13 13 02 F6 | 	mov	arg01, local01
049a0     01 14 06 F6 | 	mov	arg02, #1
049a4     78 40 B2 FD | 	call	#__system__Right_S
049a8     FD 12 02 F6 | 	mov	arg01, result1
049ac     B3 01 00 FF 
049b0     1F 14 06 F6 | 	mov	arg02, ##@LR__5518
049b4     88 1F B2 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     04 2C 06 56 |  if_ne	mov	local04, #4
049c0                 | LR__0276
049c0                 | ' 
049c0                 | ' select case s1
049c0     14 2F 02 F6 | 	mov	local05, local02
049c4     B3 01 00 FF 
049c8     21 14 06 F6 | 	mov	arg02, ##@LR__5519
049cc     17 13 02 F6 | 	mov	arg01, local05
049d0     6C 1F B2 FD | 	call	#__system___string_cmp
049d4     00 FA 0D F2 | 	cmp	result1, #0 wz
049d8     24 01 90 AD |  if_e	jmp	#LR__0277
049dc     B3 01 00 FF 
049e0     23 14 06 F6 | 	mov	arg02, ##@LR__5520
049e4     17 13 02 F6 | 	mov	arg01, local05
049e8     54 1F B2 FD | 	call	#__system___string_cmp
049ec     00 FA 0D F2 | 	cmp	result1, #0 wz
049f0     18 01 90 AD |  if_e	jmp	#LR__0278
049f4     B3 01 00 FF 
049f8     26 14 06 F6 | 	mov	arg02, ##@LR__5521
049fc     17 13 02 F6 | 	mov	arg01, local05
04a00     3C 1F B2 FD | 	call	#__system___string_cmp
04a04     00 FA 0D F2 | 	cmp	result1, #0 wz
04a08     0C 01 90 AD |  if_e	jmp	#LR__0279
04a0c     B3 01 00 FF 
04a10     28 14 06 F6 | 	mov	arg02, ##@LR__5522
04a14     17 13 02 F6 | 	mov	arg01, local05
04a18     24 1F B2 FD | 	call	#__system___string_cmp
04a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a20     00 01 90 AD |  if_e	jmp	#LR__0280
04a24     B3 01 00 FF 
04a28     2B 14 06 F6 | 	mov	arg02, ##@LR__5523
04a2c     17 13 02 F6 | 	mov	arg01, local05
04a30     0C 1F B2 FD | 	call	#__system___string_cmp
04a34     00 FA 0D F2 | 	cmp	result1, #0 wz
04a38     F4 00 90 AD |  if_e	jmp	#LR__0281
04a3c     B3 01 00 FF 
04a40     2D 14 06 F6 | 	mov	arg02, ##@LR__5524
04a44     17 13 02 F6 | 	mov	arg01, local05
04a48     F4 1E B2 FD | 	call	#__system___string_cmp
04a4c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a50     E8 00 90 AD |  if_e	jmp	#LR__0282
04a54     B3 01 00 FF 
04a58     2F 14 06 F6 | 	mov	arg02, ##@LR__5525
04a5c     17 13 02 F6 | 	mov	arg01, local05
04a60     DC 1E B2 FD | 	call	#__system___string_cmp
04a64     00 FA 0D F2 | 	cmp	result1, #0 wz
04a68     DC 00 90 AD |  if_e	jmp	#LR__0283
04a6c     B3 01 00 FF 
04a70     32 14 06 F6 | 	mov	arg02, ##@LR__5526
04a74     17 13 02 F6 | 	mov	arg01, local05
04a78     C4 1E B2 FD | 	call	#__system___string_cmp
04a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
04a80     D0 00 90 AD |  if_e	jmp	#LR__0284
04a84     B3 01 00 FF 
04a88     34 14 06 F6 | 	mov	arg02, ##@LR__5527
04a8c     17 13 02 F6 | 	mov	arg01, local05
04a90     AC 1E B2 FD | 	call	#__system___string_cmp
04a94     00 FA 0D F2 | 	cmp	result1, #0 wz
04a98     C4 00 90 AD |  if_e	jmp	#LR__0285
04a9c     B3 01 00 FF 
04aa0     37 14 06 F6 | 	mov	arg02, ##@LR__5528
04aa4     17 13 02 F6 | 	mov	arg01, local05
04aa8     94 1E B2 FD | 	call	#__system___string_cmp
04aac     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab0     B8 00 90 AD |  if_e	jmp	#LR__0286
04ab4     B3 01 00 FF 
04ab8     39 14 06 F6 | 	mov	arg02, ##@LR__5529
04abc     17 13 02 F6 | 	mov	arg01, local05
04ac0     7C 1E B2 FD | 	call	#__system___string_cmp
04ac4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac8     AC 00 90 AD |  if_e	jmp	#LR__0287
04acc     B3 01 00 FF 
04ad0     3C 14 06 F6 | 	mov	arg02, ##@LR__5530
04ad4     17 13 02 F6 | 	mov	arg01, local05
04ad8     64 1E B2 FD | 	call	#__system___string_cmp
04adc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae0     A0 00 90 AD |  if_e	jmp	#LR__0288
04ae4     B3 01 00 FF 
04ae8     3E 14 06 F6 | 	mov	arg02, ##@LR__5531
04aec     17 13 02 F6 | 	mov	arg01, local05
04af0     4C 1E B2 FD | 	call	#__system___string_cmp
04af4     00 FA 0D F2 | 	cmp	result1, #0 wz
04af8     94 00 90 AD |  if_e	jmp	#LR__0289
04afc     9C 00 90 FD | 	jmp	#LR__0290
04b00                 | LR__0277
04b00     01 00 00 FF 
04b04     00 31 06 F6 | 	mov	local06, ##768
04b08     98 00 90 FD | 	jmp	#LR__0291
04b0c                 | LR__0278
04b0c     01 00 00 FF 
04b10     01 31 06 F6 | 	mov	local06, ##769
04b14     8C 00 90 FD | 	jmp	#LR__0291
04b18                 | LR__0279
04b18     01 00 00 FF 
04b1c     02 31 06 F6 | 	mov	local06, ##770
04b20     80 00 90 FD | 	jmp	#LR__0291
04b24                 | LR__0280
04b24     01 00 00 FF 
04b28     03 31 06 F6 | 	mov	local06, ##771
04b2c     74 00 90 FD | 	jmp	#LR__0291
04b30                 | LR__0281
04b30     01 00 00 FF 
04b34     04 31 06 F6 | 	mov	local06, ##772
04b38     68 00 90 FD | 	jmp	#LR__0291
04b3c                 | LR__0282
04b3c     01 00 00 FF 
04b40     05 31 06 F6 | 	mov	local06, ##773
04b44     5C 00 90 FD | 	jmp	#LR__0291
04b48                 | LR__0283
04b48     01 00 00 FF 
04b4c     06 31 06 F6 | 	mov	local06, ##774
04b50     50 00 90 FD | 	jmp	#LR__0291
04b54                 | LR__0284
04b54     01 00 00 FF 
04b58     07 31 06 F6 | 	mov	local06, ##775
04b5c     44 00 90 FD | 	jmp	#LR__0291
04b60                 | LR__0285
04b60     01 00 00 FF 
04b64     08 31 06 F6 | 	mov	local06, ##776
04b68     38 00 90 FD | 	jmp	#LR__0291
04b6c                 | LR__0286
04b6c     01 00 00 FF 
04b70     09 31 06 F6 | 	mov	local06, ##777
04b74     2C 00 90 FD | 	jmp	#LR__0291
04b78                 | LR__0287
04b78     01 00 00 FF 
04b7c     0A 31 06 F6 | 	mov	local06, ##778
04b80     20 00 90 FD | 	jmp	#LR__0291
04b84                 | LR__0288
04b84     01 00 00 FF 
04b88     0B 31 06 F6 | 	mov	local06, ##779
04b8c     14 00 90 FD | 	jmp	#LR__0291
04b90                 | LR__0289
04b90     01 00 00 FF 
04b94     0B 31 06 F6 | 	mov	local06, ##779
04b98     08 00 90 FD | 	jmp	#LR__0291
04b9c                 | LR__0290
04b9c     00 FA 05 F6 | 	mov	result1, #0
04ba0     28 00 90 FD | 	jmp	#LR__0293
04ba4                 | LR__0291
04ba4                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04ba4     FF FF 7F FF 
04ba8     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04bac     18 00 90 CD |  if_b	jmp	#LR__0292
04bb0     0A 2C 56 F2 | 	cmps	local04, #10 wc
04bb4     16 33 02 C6 |  if_b	mov	local07, local04
04bb8     01 32 66 C0 |  if_b	shl	local07, #1
04bbc     16 33 02 C1 |  if_b	add	local07, local04
04bc0     02 32 66 C0 |  if_b	shl	local07, #2
04bc4     19 31 02 C1 |  if_b	add	local06, local07
04bc8                 | LR__0292
04bc8                 | ' return token
04bc8     18 FB 01 F6 | 	mov	result1, local06
04bcc                 | LR__0293
04bcc     A7 F0 03 F6 | 	mov	ptra, fp
04bd0     B2 00 A0 FD | 	call	#popregs_
04bd4                 | _isnotename_ret
04bd4     2D 00 64 FD | 	ret
04bd8                 | 
04bd8                 | ' 
04bd8                 | ' ' Check if the part is a separator, return a token or 0 if not found
04bd8                 | ' 
04bd8                 | ' function isseparator(s as string) as ubyte
04bd8                 | _isseparator
04bd8     01 4A 05 F6 | 	mov	COUNT_, #1
04bdc     A8 00 A0 FD | 	call	#pushregs_
04be0                 | ' 
04be0                 | ' select case s
04be0     09 27 02 F6 | 	mov	local01, arg01
04be4     B3 01 00 FF 
04be8     40 14 06 F6 | 	mov	arg02, ##@LR__5532
04bec     13 13 02 F6 | 	mov	arg01, local01
04bf0     4C 1D B2 FD | 	call	#__system___string_cmp
04bf4     00 FA 0D F2 | 	cmp	result1, #0 wz
04bf8     54 01 90 AD |  if_e	jmp	#LR__0300
04bfc     B3 01 00 FF 
04c00     42 14 06 F6 | 	mov	arg02, ##@LR__5533
04c04     13 13 02 F6 | 	mov	arg01, local01
04c08     34 1D B2 FD | 	call	#__system___string_cmp
04c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c10     44 01 90 AD |  if_e	jmp	#LR__0301
04c14     B3 01 00 FF 
04c18     44 14 06 F6 | 	mov	arg02, ##@LR__5534
04c1c     13 13 02 F6 | 	mov	arg01, local01
04c20     1C 1D B2 FD | 	call	#__system___string_cmp
04c24     00 FA 0D F2 | 	cmp	result1, #0 wz
04c28     34 01 90 AD |  if_e	jmp	#LR__0302
04c2c     B3 01 00 FF 
04c30     46 14 06 F6 | 	mov	arg02, ##@LR__5535
04c34     13 13 02 F6 | 	mov	arg01, local01
04c38     04 1D B2 FD | 	call	#__system___string_cmp
04c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c40     24 01 90 AD |  if_e	jmp	#LR__0303
04c44     B3 01 00 FF 
04c48     48 14 06 F6 | 	mov	arg02, ##@LR__5536
04c4c     13 13 02 F6 | 	mov	arg01, local01
04c50     EC 1C B2 FD | 	call	#__system___string_cmp
04c54     00 FA 0D F2 | 	cmp	result1, #0 wz
04c58     14 01 90 AD |  if_e	jmp	#LR__0304
04c5c     B3 01 00 FF 
04c60     4A 14 06 F6 | 	mov	arg02, ##@LR__5537
04c64     13 13 02 F6 | 	mov	arg01, local01
04c68     D4 1C B2 FD | 	call	#__system___string_cmp
04c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04c70     04 01 90 AD |  if_e	jmp	#LR__0305
04c74     B3 01 00 FF 
04c78     4C 14 06 F6 | 	mov	arg02, ##@LR__5538
04c7c     13 13 02 F6 | 	mov	arg01, local01
04c80     BC 1C B2 FD | 	call	#__system___string_cmp
04c84     00 FA 0D F2 | 	cmp	result1, #0 wz
04c88     F4 00 90 AD |  if_e	jmp	#LR__0306
04c8c     B3 01 00 FF 
04c90     4E 14 06 F6 | 	mov	arg02, ##@LR__5539
04c94     13 13 02 F6 | 	mov	arg01, local01
04c98     A4 1C B2 FD | 	call	#__system___string_cmp
04c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca0     E4 00 90 AD |  if_e	jmp	#LR__0307
04ca4     B3 01 00 FF 
04ca8     50 14 06 F6 | 	mov	arg02, ##@LR__5540
04cac     13 13 02 F6 | 	mov	arg01, local01
04cb0     8C 1C B2 FD | 	call	#__system___string_cmp
04cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04cb8     D4 00 90 AD |  if_e	jmp	#LR__0308
04cbc     B3 01 00 FF 
04cc0     52 14 06 F6 | 	mov	arg02, ##@LR__5541
04cc4     13 13 02 F6 | 	mov	arg01, local01
04cc8     74 1C B2 FD | 	call	#__system___string_cmp
04ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd0     C4 00 90 AD |  if_e	jmp	#LR__0309
04cd4     B3 01 00 FF 
04cd8     54 14 06 F6 | 	mov	arg02, ##@LR__5542
04cdc     13 13 02 F6 | 	mov	arg01, local01
04ce0     5C 1C B2 FD | 	call	#__system___string_cmp
04ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ce8     B4 00 90 AD |  if_e	jmp	#LR__0310
04cec     B3 01 00 FF 
04cf0     56 14 06 F6 | 	mov	arg02, ##@LR__5543
04cf4     13 13 02 F6 | 	mov	arg01, local01
04cf8     44 1C B2 FD | 	call	#__system___string_cmp
04cfc     00 FA 0D F2 | 	cmp	result1, #0 wz
04d00     A4 00 90 AD |  if_e	jmp	#LR__0311
04d04     B3 01 00 FF 
04d08     58 14 06 F6 | 	mov	arg02, ##@LR__5544
04d0c     13 13 02 F6 | 	mov	arg01, local01
04d10     2C 1C B2 FD | 	call	#__system___string_cmp
04d14     00 FA 0D F2 | 	cmp	result1, #0 wz
04d18     94 00 90 AD |  if_e	jmp	#LR__0312
04d1c     B3 01 00 FF 
04d20     5A 14 06 F6 | 	mov	arg02, ##@LR__5545
04d24     13 13 02 F6 | 	mov	arg01, local01
04d28     14 1C B2 FD | 	call	#__system___string_cmp
04d2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04d30     84 00 90 AD |  if_e	jmp	#LR__0313
04d34     B3 01 00 FF 
04d38     5C 14 06 F6 | 	mov	arg02, ##@LR__5546
04d3c     13 13 02 F6 | 	mov	arg01, local01
04d40     FC 1B B2 FD | 	call	#__system___string_cmp
04d44     00 FA 0D F2 | 	cmp	result1, #0 wz
04d48     74 00 90 AD |  if_e	jmp	#LR__0314
04d4c     78 00 90 FD | 	jmp	#LR__0315
04d50                 | LR__0300
04d50     01 FA 05 F6 | 	mov	result1, #1
04d54     74 00 90 FD | 	jmp	#LR__0316
04d58                 | LR__0301
04d58     02 FA 05 F6 | 	mov	result1, #2
04d5c     6C 00 90 FD | 	jmp	#LR__0316
04d60                 | LR__0302
04d60     1B FA 05 F6 | 	mov	result1, #27
04d64     64 00 90 FD | 	jmp	#LR__0316
04d68                 | LR__0303
04d68     11 FA 05 F6 | 	mov	result1, #17
04d6c     5C 00 90 FD | 	jmp	#LR__0316
04d70                 | LR__0304
04d70     05 FA 05 F6 | 	mov	result1, #5
04d74     54 00 90 FD | 	jmp	#LR__0316
04d78                 | LR__0305
04d78     06 FA 05 F6 | 	mov	result1, #6
04d7c     4C 00 90 FD | 	jmp	#LR__0316
04d80                 | LR__0306
04d80     12 FA 05 F6 | 	mov	result1, #18
04d84     44 00 90 FD | 	jmp	#LR__0316
04d88                 | LR__0307
04d88     13 FA 05 F6 | 	mov	result1, #19
04d8c     3C 00 90 FD | 	jmp	#LR__0316
04d90                 | LR__0308
04d90     0C FA 05 F6 | 	mov	result1, #12
04d94     34 00 90 FD | 	jmp	#LR__0316
04d98                 | LR__0309
04d98     14 FA 05 F6 | 	mov	result1, #20
04d9c     2C 00 90 FD | 	jmp	#LR__0316
04da0                 | LR__0310
04da0     15 FA 05 F6 | 	mov	result1, #21
04da4     24 00 90 FD | 	jmp	#LR__0316
04da8                 | LR__0311
04da8     16 FA 05 F6 | 	mov	result1, #22
04dac     1C 00 90 FD | 	jmp	#LR__0316
04db0                 | LR__0312
04db0     FF FB 05 F6 | 	mov	result1, #511
04db4     14 00 90 FD | 	jmp	#LR__0316
04db8                 | LR__0313
04db8     0F FA 05 F6 | 	mov	result1, #15
04dbc     0C 00 90 FD | 	jmp	#LR__0316
04dc0                 | LR__0314
04dc0     10 FA 05 F6 | 	mov	result1, #16
04dc4     04 00 90 FD | 	jmp	#LR__0316
04dc8                 | LR__0315
04dc8     00 FA 05 F6 | 	mov	result1, #0
04dcc                 | LR__0316
04dcc     A7 F0 03 F6 | 	mov	ptra, fp
04dd0     B2 00 A0 FD | 	call	#popregs_
04dd4                 | _isseparator_ret
04dd4     2D 00 64 FD | 	ret
04dd8                 | 
04dd8                 | ' 
04dd8                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04dd8                 | ' 
04dd8                 | ' function iscommand(s as string) as ubyte
04dd8                 | _iscommand
04dd8     01 4A 05 F6 | 	mov	COUNT_, #1
04ddc     A8 00 A0 FD | 	call	#pushregs_
04de0                 | ' 
04de0                 | ' select case s
04de0     09 27 02 F6 | 	mov	local01, arg01
04de4     B3 01 00 FF 
04de8     60 14 06 F6 | 	mov	arg02, ##@LR__5548
04dec     13 13 02 F6 | 	mov	arg01, local01
04df0     4C 1B B2 FD | 	call	#__system___string_cmp
04df4     00 FA 0D F2 | 	cmp	result1, #0 wz
04df8     7C 0C 90 AD |  if_e	jmp	#LR__0320
04dfc     B3 01 00 FF 
04e00     65 14 06 F6 | 	mov	arg02, ##@LR__5549
04e04     13 13 02 F6 | 	mov	arg01, local01
04e08     34 1B B2 FD | 	call	#__system___string_cmp
04e0c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e10     6C 0C 90 AD |  if_e	jmp	#LR__0321
04e14     B3 01 00 FF 
04e18     68 14 06 F6 | 	mov	arg02, ##@LR__5550
04e1c     13 13 02 F6 | 	mov	arg01, local01
04e20     1C 1B B2 FD | 	call	#__system___string_cmp
04e24     00 FA 0D F2 | 	cmp	result1, #0 wz
04e28     5C 0C 90 AD |  if_e	jmp	#LR__0322
04e2c     B3 01 00 FF 
04e30     6D 14 06 F6 | 	mov	arg02, ##@LR__5551
04e34     13 13 02 F6 | 	mov	arg01, local01
04e38     04 1B B2 FD | 	call	#__system___string_cmp
04e3c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e40     4C 0C 90 AD |  if_e	jmp	#LR__0323
04e44     B3 01 00 FF 
04e48     71 14 06 F6 | 	mov	arg02, ##@LR__5552
04e4c     13 13 02 F6 | 	mov	arg01, local01
04e50     EC 1A B2 FD | 	call	#__system___string_cmp
04e54     00 FA 0D F2 | 	cmp	result1, #0 wz
04e58     3C 0C 90 AD |  if_e	jmp	#LR__0324
04e5c     B3 01 00 FF 
04e60     76 14 06 F6 | 	mov	arg02, ##@LR__5553
04e64     13 13 02 F6 | 	mov	arg01, local01
04e68     D4 1A B2 FD | 	call	#__system___string_cmp
04e6c     00 FA 0D F2 | 	cmp	result1, #0 wz
04e70     2C 0C 90 AD |  if_e	jmp	#LR__0325
04e74     B3 01 00 FF 
04e78     7A 14 06 F6 | 	mov	arg02, ##@LR__5554
04e7c     13 13 02 F6 | 	mov	arg01, local01
04e80     BC 1A B2 FD | 	call	#__system___string_cmp
04e84     00 FA 0D F2 | 	cmp	result1, #0 wz
04e88     1C 0C 90 AD |  if_e	jmp	#LR__0326
04e8c     B3 01 00 FF 
04e90     7D 14 06 F6 | 	mov	arg02, ##@LR__5555
04e94     13 13 02 F6 | 	mov	arg01, local01
04e98     A4 1A B2 FD | 	call	#__system___string_cmp
04e9c     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea0     0C 0C 90 AD |  if_e	jmp	#LR__0327
04ea4     B3 01 00 FF 
04ea8     88 14 06 F6 | 	mov	arg02, ##@LR__5556
04eac     13 13 02 F6 | 	mov	arg01, local01
04eb0     8C 1A B2 FD | 	call	#__system___string_cmp
04eb4     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb8     FC 0B 90 AD |  if_e	jmp	#LR__0328
04ebc     B3 01 00 FF 
04ec0     8C 14 06 F6 | 	mov	arg02, ##@LR__5557
04ec4     13 13 02 F6 | 	mov	arg01, local01
04ec8     74 1A B2 FD | 	call	#__system___string_cmp
04ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed0     EC 0B 90 AD |  if_e	jmp	#LR__0329
04ed4     B3 01 00 FF 
04ed8     96 14 06 F6 | 	mov	arg02, ##@LR__5558
04edc     13 13 02 F6 | 	mov	arg01, local01
04ee0     5C 1A B2 FD | 	call	#__system___string_cmp
04ee4     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee8     DC 0B 90 AD |  if_e	jmp	#LR__0330
04eec     B3 01 00 FF 
04ef0     9A 14 06 F6 | 	mov	arg02, ##@LR__5559
04ef4     13 13 02 F6 | 	mov	arg01, local01
04ef8     44 1A B2 FD | 	call	#__system___string_cmp
04efc     00 FA 0D F2 | 	cmp	result1, #0 wz
04f00     CC 0B 90 AD |  if_e	jmp	#LR__0331
04f04     B3 01 00 FF 
04f08     A4 14 06 F6 | 	mov	arg02, ##@LR__5560
04f0c     13 13 02 F6 | 	mov	arg01, local01
04f10     2C 1A B2 FD | 	call	#__system___string_cmp
04f14     00 FA 0D F2 | 	cmp	result1, #0 wz
04f18     BC 0B 90 AD |  if_e	jmp	#LR__0332
04f1c     B3 01 00 FF 
04f20     A8 14 06 F6 | 	mov	arg02, ##@LR__5561
04f24     13 13 02 F6 | 	mov	arg01, local01
04f28     14 1A B2 FD | 	call	#__system___string_cmp
04f2c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f30     AC 0B 90 AD |  if_e	jmp	#LR__0333
04f34     B3 01 00 FF 
04f38     B3 14 06 F6 | 	mov	arg02, ##@LR__5562
04f3c     13 13 02 F6 | 	mov	arg01, local01
04f40     FC 19 B2 FD | 	call	#__system___string_cmp
04f44     00 FA 0D F2 | 	cmp	result1, #0 wz
04f48     9C 0B 90 AD |  if_e	jmp	#LR__0334
04f4c     B3 01 00 FF 
04f50     B7 14 06 F6 | 	mov	arg02, ##@LR__5563
04f54     13 13 02 F6 | 	mov	arg01, local01
04f58     E4 19 B2 FD | 	call	#__system___string_cmp
04f5c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f60     8C 0B 90 AD |  if_e	jmp	#LR__0335
04f64     B3 01 00 FF 
04f68     BE 14 06 F6 | 	mov	arg02, ##@LR__5564
04f6c     13 13 02 F6 | 	mov	arg01, local01
04f70     CC 19 B2 FD | 	call	#__system___string_cmp
04f74     00 FA 0D F2 | 	cmp	result1, #0 wz
04f78     7C 0B 90 AD |  if_e	jmp	#LR__0336
04f7c     B3 01 00 FF 
04f80     C2 14 06 F6 | 	mov	arg02, ##@LR__5565
04f84     13 13 02 F6 | 	mov	arg01, local01
04f88     B4 19 B2 FD | 	call	#__system___string_cmp
04f8c     00 FA 0D F2 | 	cmp	result1, #0 wz
04f90     6C 0B 90 AD |  if_e	jmp	#LR__0337
04f94     B3 01 00 FF 
04f98     C8 14 06 F6 | 	mov	arg02, ##@LR__5566
04f9c     13 13 02 F6 | 	mov	arg01, local01
04fa0     9C 19 B2 FD | 	call	#__system___string_cmp
04fa4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa8     5C 0B 90 AD |  if_e	jmp	#LR__0338
04fac     B3 01 00 FF 
04fb0     CE 14 06 F6 | 	mov	arg02, ##@LR__5567
04fb4     13 13 02 F6 | 	mov	arg01, local01
04fb8     84 19 B2 FD | 	call	#__system___string_cmp
04fbc     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc0     4C 0B 90 AD |  if_e	jmp	#LR__0339
04fc4     B3 01 00 FF 
04fc8     D2 14 06 F6 | 	mov	arg02, ##@LR__5568
04fcc     13 13 02 F6 | 	mov	arg01, local01
04fd0     6C 19 B2 FD | 	call	#__system___string_cmp
04fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd8     3C 0B 90 AD |  if_e	jmp	#LR__0340
04fdc     B3 01 00 FF 
04fe0     DA 14 06 F6 | 	mov	arg02, ##@LR__5569
04fe4     13 13 02 F6 | 	mov	arg01, local01
04fe8     54 19 B2 FD | 	call	#__system___string_cmp
04fec     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff0     2C 0B 90 AD |  if_e	jmp	#LR__0341
04ff4     B3 01 00 FF 
04ff8     E0 14 06 F6 | 	mov	arg02, ##@LR__5570
04ffc     13 13 02 F6 | 	mov	arg01, local01
05000     3C 19 B2 FD | 	call	#__system___string_cmp
05004     00 FA 0D F2 | 	cmp	result1, #0 wz
05008     1C 0B 90 AD |  if_e	jmp	#LR__0342
0500c     B3 01 00 FF 
05010     E3 14 06 F6 | 	mov	arg02, ##@LR__5571
05014     13 13 02 F6 | 	mov	arg01, local01
05018     24 19 B2 FD | 	call	#__system___string_cmp
0501c     00 FA 0D F2 | 	cmp	result1, #0 wz
05020     0C 0B 90 AD |  if_e	jmp	#LR__0343
05024     B3 01 00 FF 
05028     E8 14 06 F6 | 	mov	arg02, ##@LR__5572
0502c     13 13 02 F6 | 	mov	arg01, local01
05030     0C 19 B2 FD | 	call	#__system___string_cmp
05034     00 FA 0D F2 | 	cmp	result1, #0 wz
05038     FC 0A 90 AD |  if_e	jmp	#LR__0344
0503c     B3 01 00 FF 
05040     EF 14 06 F6 | 	mov	arg02, ##@LR__5573
05044     13 13 02 F6 | 	mov	arg01, local01
05048     F4 18 B2 FD | 	call	#__system___string_cmp
0504c     00 FA 0D F2 | 	cmp	result1, #0 wz
05050     EC 0A 90 AD |  if_e	jmp	#LR__0345
05054     B3 01 00 FF 
05058     F4 14 06 F6 | 	mov	arg02, ##@LR__5574
0505c     13 13 02 F6 | 	mov	arg01, local01
05060     DC 18 B2 FD | 	call	#__system___string_cmp
05064     00 FA 0D F2 | 	cmp	result1, #0 wz
05068     DC 0A 90 AD |  if_e	jmp	#LR__0346
0506c     B3 01 00 FF 
05070     FB 14 06 F6 | 	mov	arg02, ##@LR__5575
05074     13 13 02 F6 | 	mov	arg01, local01
05078     C4 18 B2 FD | 	call	#__system___string_cmp
0507c     00 FA 0D F2 | 	cmp	result1, #0 wz
05080     CC 0A 90 AD |  if_e	jmp	#LR__0347
05084     B3 01 00 FF 
05088     02 15 06 F6 | 	mov	arg02, ##@LR__5576
0508c     13 13 02 F6 | 	mov	arg01, local01
05090     AC 18 B2 FD | 	call	#__system___string_cmp
05094     00 FA 0D F2 | 	cmp	result1, #0 wz
05098     BC 0A 90 AD |  if_e	jmp	#LR__0348
0509c     B3 01 00 FF 
050a0     0C 15 06 F6 | 	mov	arg02, ##@LR__5577
050a4     13 13 02 F6 | 	mov	arg01, local01
050a8     94 18 B2 FD | 	call	#__system___string_cmp
050ac     00 FA 0D F2 | 	cmp	result1, #0 wz
050b0     AC 0A 90 AD |  if_e	jmp	#LR__0349
050b4     B3 01 00 FF 
050b8     10 15 06 F6 | 	mov	arg02, ##@LR__5578
050bc     13 13 02 F6 | 	mov	arg01, local01
050c0     7C 18 B2 FD | 	call	#__system___string_cmp
050c4     00 FA 0D F2 | 	cmp	result1, #0 wz
050c8     9C 0A 90 AD |  if_e	jmp	#LR__0350
050cc     B3 01 00 FF 
050d0     14 15 06 F6 | 	mov	arg02, ##@LR__5579
050d4     13 13 02 F6 | 	mov	arg01, local01
050d8     64 18 B2 FD | 	call	#__system___string_cmp
050dc     00 FA 0D F2 | 	cmp	result1, #0 wz
050e0     8C 0A 90 AD |  if_e	jmp	#LR__0351
050e4     B3 01 00 FF 
050e8     1B 15 06 F6 | 	mov	arg02, ##@LR__5580
050ec     13 13 02 F6 | 	mov	arg01, local01
050f0     4C 18 B2 FD | 	call	#__system___string_cmp
050f4     00 FA 0D F2 | 	cmp	result1, #0 wz
050f8     7C 0A 90 AD |  if_e	jmp	#LR__0352
050fc     B3 01 00 FF 
05100     1F 15 06 F6 | 	mov	arg02, ##@LR__5581
05104     13 13 02 F6 | 	mov	arg01, local01
05108     34 18 B2 FD | 	call	#__system___string_cmp
0510c     00 FA 0D F2 | 	cmp	result1, #0 wz
05110     6C 0A 90 AD |  if_e	jmp	#LR__0353
05114     B3 01 00 FF 
05118     23 15 06 F6 | 	mov	arg02, ##@LR__5582
0511c     13 13 02 F6 | 	mov	arg01, local01
05120     1C 18 B2 FD | 	call	#__system___string_cmp
05124     00 FA 0D F2 | 	cmp	result1, #0 wz
05128     5C 0A 90 AD |  if_e	jmp	#LR__0354
0512c     B3 01 00 FF 
05130     29 15 06 F6 | 	mov	arg02, ##@LR__5583
05134     13 13 02 F6 | 	mov	arg01, local01
05138     04 18 B2 FD | 	call	#__system___string_cmp
0513c     00 FA 0D F2 | 	cmp	result1, #0 wz
05140     4C 0A 90 AD |  if_e	jmp	#LR__0355
05144     B3 01 00 FF 
05148     2E 15 06 F6 | 	mov	arg02, ##@LR__5584
0514c     13 13 02 F6 | 	mov	arg01, local01
05150     EC 17 B2 FD | 	call	#__system___string_cmp
05154     00 FA 0D F2 | 	cmp	result1, #0 wz
05158     3C 0A 90 AD |  if_e	jmp	#LR__0356
0515c     B3 01 00 FF 
05160     35 15 06 F6 | 	mov	arg02, ##@LR__5585
05164     13 13 02 F6 | 	mov	arg01, local01
05168     D4 17 B2 FD | 	call	#__system___string_cmp
0516c     00 FA 0D F2 | 	cmp	result1, #0 wz
05170     2C 0A 90 AD |  if_e	jmp	#LR__0357
05174     B3 01 00 FF 
05178     39 15 06 F6 | 	mov	arg02, ##@LR__5586
0517c     13 13 02 F6 | 	mov	arg01, local01
05180     BC 17 B2 FD | 	call	#__system___string_cmp
05184     00 FA 0D F2 | 	cmp	result1, #0 wz
05188     1C 0A 90 AD |  if_e	jmp	#LR__0358
0518c     B3 01 00 FF 
05190     3E 15 06 F6 | 	mov	arg02, ##@LR__5587
05194     13 13 02 F6 | 	mov	arg01, local01
05198     A4 17 B2 FD | 	call	#__system___string_cmp
0519c     00 FA 0D F2 | 	cmp	result1, #0 wz
051a0     0C 0A 90 AD |  if_e	jmp	#LR__0359
051a4     B3 01 00 FF 
051a8     42 15 06 F6 | 	mov	arg02, ##@LR__5588
051ac     13 13 02 F6 | 	mov	arg01, local01
051b0     8C 17 B2 FD | 	call	#__system___string_cmp
051b4     00 FA 0D F2 | 	cmp	result1, #0 wz
051b8     FC 09 90 AD |  if_e	jmp	#LR__0360
051bc     B3 01 00 FF 
051c0     48 15 06 F6 | 	mov	arg02, ##@LR__5589
051c4     13 13 02 F6 | 	mov	arg01, local01
051c8     74 17 B2 FD | 	call	#__system___string_cmp
051cc     00 FA 0D F2 | 	cmp	result1, #0 wz
051d0     EC 09 90 AD |  if_e	jmp	#LR__0361
051d4     B3 01 00 FF 
051d8     4B 15 06 F6 | 	mov	arg02, ##@LR__5590
051dc     13 13 02 F6 | 	mov	arg01, local01
051e0     5C 17 B2 FD | 	call	#__system___string_cmp
051e4     00 FA 0D F2 | 	cmp	result1, #0 wz
051e8     DC 09 90 AD |  if_e	jmp	#LR__0362
051ec     B3 01 00 FF 
051f0     53 15 06 F6 | 	mov	arg02, ##@LR__5591
051f4     13 13 02 F6 | 	mov	arg01, local01
051f8     44 17 B2 FD | 	call	#__system___string_cmp
051fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05200     CC 09 90 AD |  if_e	jmp	#LR__0363
05204     B3 01 00 FF 
05208     57 15 06 F6 | 	mov	arg02, ##@LR__5592
0520c     13 13 02 F6 | 	mov	arg01, local01
05210     2C 17 B2 FD | 	call	#__system___string_cmp
05214     00 FA 0D F2 | 	cmp	result1, #0 wz
05218     BC 09 90 AD |  if_e	jmp	#LR__0364
0521c     B3 01 00 FF 
05220     5C 15 06 F6 | 	mov	arg02, ##@LR__5593
05224     13 13 02 F6 | 	mov	arg01, local01
05228     14 17 B2 FD | 	call	#__system___string_cmp
0522c     00 FA 0D F2 | 	cmp	result1, #0 wz
05230     AC 09 90 AD |  if_e	jmp	#LR__0365
05234     B3 01 00 FF 
05238     60 15 06 F6 | 	mov	arg02, ##@LR__5594
0523c     13 13 02 F6 | 	mov	arg01, local01
05240     FC 16 B2 FD | 	call	#__system___string_cmp
05244     00 FA 0D F2 | 	cmp	result1, #0 wz
05248     9C 09 90 AD |  if_e	jmp	#LR__0366
0524c     B3 01 00 FF 
05250     65 15 06 F6 | 	mov	arg02, ##@LR__5595
05254     13 13 02 F6 | 	mov	arg01, local01
05258     E4 16 B2 FD | 	call	#__system___string_cmp
0525c     00 FA 0D F2 | 	cmp	result1, #0 wz
05260     8C 09 90 AD |  if_e	jmp	#LR__0367
05264     B3 01 00 FF 
05268     69 15 06 F6 | 	mov	arg02, ##@LR__5596
0526c     13 13 02 F6 | 	mov	arg01, local01
05270     CC 16 B2 FD | 	call	#__system___string_cmp
05274     00 FA 0D F2 | 	cmp	result1, #0 wz
05278     7C 09 90 AD |  if_e	jmp	#LR__0368
0527c     B3 01 00 FF 
05280     6C 15 06 F6 | 	mov	arg02, ##@LR__5597
05284     13 13 02 F6 | 	mov	arg01, local01
05288     B4 16 B2 FD | 	call	#__system___string_cmp
0528c     00 FA 0D F2 | 	cmp	result1, #0 wz
05290     6C 09 90 AD |  if_e	jmp	#LR__0369
05294     B3 01 00 FF 
05298     72 15 06 F6 | 	mov	arg02, ##@LR__5598
0529c     13 13 02 F6 | 	mov	arg01, local01
052a0     9C 16 B2 FD | 	call	#__system___string_cmp
052a4     00 FA 0D F2 | 	cmp	result1, #0 wz
052a8     5C 09 90 AD |  if_e	jmp	#LR__0370
052ac     B3 01 00 FF 
052b0     76 15 06 F6 | 	mov	arg02, ##@LR__5599
052b4     13 13 02 F6 | 	mov	arg01, local01
052b8     84 16 B2 FD | 	call	#__system___string_cmp
052bc     00 FA 0D F2 | 	cmp	result1, #0 wz
052c0     4C 09 90 AD |  if_e	jmp	#LR__0371
052c4     B3 01 00 FF 
052c8     7A 15 06 F6 | 	mov	arg02, ##@LR__5600
052cc     13 13 02 F6 | 	mov	arg01, local01
052d0     6C 16 B2 FD | 	call	#__system___string_cmp
052d4     00 FA 0D F2 | 	cmp	result1, #0 wz
052d8     3C 09 90 AD |  if_e	jmp	#LR__0372
052dc     B3 01 00 FF 
052e0     80 15 06 F6 | 	mov	arg02, ##@LR__5601
052e4     13 13 02 F6 | 	mov	arg01, local01
052e8     54 16 B2 FD | 	call	#__system___string_cmp
052ec     00 FA 0D F2 | 	cmp	result1, #0 wz
052f0     2C 09 90 AD |  if_e	jmp	#LR__0373
052f4     B3 01 00 FF 
052f8     85 15 06 F6 | 	mov	arg02, ##@LR__5602
052fc     13 13 02 F6 | 	mov	arg01, local01
05300     3C 16 B2 FD | 	call	#__system___string_cmp
05304     00 FA 0D F2 | 	cmp	result1, #0 wz
05308     1C 09 90 AD |  if_e	jmp	#LR__0374
0530c     B3 01 00 FF 
05310     88 15 06 F6 | 	mov	arg02, ##@LR__5603
05314     13 13 02 F6 | 	mov	arg01, local01
05318     24 16 B2 FD | 	call	#__system___string_cmp
0531c     00 FA 0D F2 | 	cmp	result1, #0 wz
05320     0C 09 90 AD |  if_e	jmp	#LR__0375
05324     B3 01 00 FF 
05328     8B 15 06 F6 | 	mov	arg02, ##@LR__5604
0532c     13 13 02 F6 | 	mov	arg01, local01
05330     0C 16 B2 FD | 	call	#__system___string_cmp
05334     00 FA 0D F2 | 	cmp	result1, #0 wz
05338     FC 08 90 AD |  if_e	jmp	#LR__0376
0533c     B3 01 00 FF 
05340     8F 15 06 F6 | 	mov	arg02, ##@LR__5605
05344     13 13 02 F6 | 	mov	arg01, local01
05348     F4 15 B2 FD | 	call	#__system___string_cmp
0534c     00 FA 0D F2 | 	cmp	result1, #0 wz
05350     EC 08 90 AD |  if_e	jmp	#LR__0377
05354     B3 01 00 FF 
05358     92 15 06 F6 | 	mov	arg02, ##@LR__5606
0535c     13 13 02 F6 | 	mov	arg01, local01
05360     DC 15 B2 FD | 	call	#__system___string_cmp
05364     00 FA 0D F2 | 	cmp	result1, #0 wz
05368     DC 08 90 AD |  if_e	jmp	#LR__0378
0536c     B3 01 00 FF 
05370     98 15 06 F6 | 	mov	arg02, ##@LR__5607
05374     13 13 02 F6 | 	mov	arg01, local01
05378     C4 15 B2 FD | 	call	#__system___string_cmp
0537c     00 FA 0D F2 | 	cmp	result1, #0 wz
05380     CC 08 90 AD |  if_e	jmp	#LR__0379
05384     B3 01 00 FF 
05388     9D 15 06 F6 | 	mov	arg02, ##@LR__5608
0538c     13 13 02 F6 | 	mov	arg01, local01
05390     AC 15 B2 FD | 	call	#__system___string_cmp
05394     00 FA 0D F2 | 	cmp	result1, #0 wz
05398     BC 08 90 AD |  if_e	jmp	#LR__0380
0539c     B3 01 00 FF 
053a0     A0 15 06 F6 | 	mov	arg02, ##@LR__5609
053a4     13 13 02 F6 | 	mov	arg01, local01
053a8     94 15 B2 FD | 	call	#__system___string_cmp
053ac     00 FA 0D F2 | 	cmp	result1, #0 wz
053b0     AC 08 90 AD |  if_e	jmp	#LR__0381
053b4     B3 01 00 FF 
053b8     A5 15 06 F6 | 	mov	arg02, ##@LR__5610
053bc     13 13 02 F6 | 	mov	arg01, local01
053c0     7C 15 B2 FD | 	call	#__system___string_cmp
053c4     00 FA 0D F2 | 	cmp	result1, #0 wz
053c8     9C 08 90 AD |  if_e	jmp	#LR__0382
053cc     B3 01 00 FF 
053d0     A9 15 06 F6 | 	mov	arg02, ##@LR__5611
053d4     13 13 02 F6 | 	mov	arg01, local01
053d8     64 15 B2 FD | 	call	#__system___string_cmp
053dc     00 FA 0D F2 | 	cmp	result1, #0 wz
053e0     8C 08 90 AD |  if_e	jmp	#LR__0383
053e4     B3 01 00 FF 
053e8     AF 15 06 F6 | 	mov	arg02, ##@LR__5612
053ec     13 13 02 F6 | 	mov	arg01, local01
053f0     4C 15 B2 FD | 	call	#__system___string_cmp
053f4     00 FA 0D F2 | 	cmp	result1, #0 wz
053f8     7C 08 90 AD |  if_e	jmp	#LR__0384
053fc     B3 01 00 FF 
05400     B5 15 06 F6 | 	mov	arg02, ##@LR__5613
05404     13 13 02 F6 | 	mov	arg01, local01
05408     34 15 B2 FD | 	call	#__system___string_cmp
0540c     00 FA 0D F2 | 	cmp	result1, #0 wz
05410     6C 08 90 AD |  if_e	jmp	#LR__0385
05414     B3 01 00 FF 
05418     BA 15 06 F6 | 	mov	arg02, ##@LR__5614
0541c     13 13 02 F6 | 	mov	arg01, local01
05420     1C 15 B2 FD | 	call	#__system___string_cmp
05424     00 FA 0D F2 | 	cmp	result1, #0 wz
05428     5C 08 90 AD |  if_e	jmp	#LR__0386
0542c     B3 01 00 FF 
05430     BD 15 06 F6 | 	mov	arg02, ##@LR__5615
05434     13 13 02 F6 | 	mov	arg01, local01
05438     04 15 B2 FD | 	call	#__system___string_cmp
0543c     00 FA 0D F2 | 	cmp	result1, #0 wz
05440     4C 08 90 AD |  if_e	jmp	#LR__0387
05444     B3 01 00 FF 
05448     C3 15 06 F6 | 	mov	arg02, ##@LR__5616
0544c     13 13 02 F6 | 	mov	arg01, local01
05450     EC 14 B2 FD | 	call	#__system___string_cmp
05454     00 FA 0D F2 | 	cmp	result1, #0 wz
05458     3C 08 90 AD |  if_e	jmp	#LR__0388
0545c     B3 01 00 FF 
05460     C7 15 06 F6 | 	mov	arg02, ##@LR__5617
05464     13 13 02 F6 | 	mov	arg01, local01
05468     D4 14 B2 FD | 	call	#__system___string_cmp
0546c     00 FA 0D F2 | 	cmp	result1, #0 wz
05470     2C 08 90 AD |  if_e	jmp	#LR__0389
05474     B3 01 00 FF 
05478     CC 15 06 F6 | 	mov	arg02, ##@LR__5618
0547c     13 13 02 F6 | 	mov	arg01, local01
05480     BC 14 B2 FD | 	call	#__system___string_cmp
05484     00 FA 0D F2 | 	cmp	result1, #0 wz
05488     1C 08 90 AD |  if_e	jmp	#LR__0390
0548c     B3 01 00 FF 
05490     CF 15 06 F6 | 	mov	arg02, ##@LR__5619
05494     13 13 02 F6 | 	mov	arg01, local01
05498     A4 14 B2 FD | 	call	#__system___string_cmp
0549c     00 FA 0D F2 | 	cmp	result1, #0 wz
054a0     0C 08 90 AD |  if_e	jmp	#LR__0391
054a4     B3 01 00 FF 
054a8     D2 15 06 F6 | 	mov	arg02, ##@LR__5620
054ac     13 13 02 F6 | 	mov	arg01, local01
054b0     8C 14 B2 FD | 	call	#__system___string_cmp
054b4     00 FA 0D F2 | 	cmp	result1, #0 wz
054b8     FC 07 90 AD |  if_e	jmp	#LR__0392
054bc     B3 01 00 FF 
054c0     D7 15 06 F6 | 	mov	arg02, ##@LR__5621
054c4     13 13 02 F6 | 	mov	arg01, local01
054c8     74 14 B2 FD | 	call	#__system___string_cmp
054cc     00 FA 0D F2 | 	cmp	result1, #0 wz
054d0     EC 07 90 AD |  if_e	jmp	#LR__0393
054d4     B3 01 00 FF 
054d8     DD 15 06 F6 | 	mov	arg02, ##@LR__5622
054dc     13 13 02 F6 | 	mov	arg01, local01
054e0     5C 14 B2 FD | 	call	#__system___string_cmp
054e4     00 FA 0D F2 | 	cmp	result1, #0 wz
054e8     DC 07 90 AD |  if_e	jmp	#LR__0394
054ec     B3 01 00 FF 
054f0     E1 15 06 F6 | 	mov	arg02, ##@LR__5623
054f4     13 13 02 F6 | 	mov	arg01, local01
054f8     44 14 B2 FD | 	call	#__system___string_cmp
054fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05500     CC 07 90 AD |  if_e	jmp	#LR__0395
05504     B3 01 00 FF 
05508     EA 15 06 F6 | 	mov	arg02, ##@LR__5624
0550c     13 13 02 F6 | 	mov	arg01, local01
05510     2C 14 B2 FD | 	call	#__system___string_cmp
05514     00 FA 0D F2 | 	cmp	result1, #0 wz
05518     BC 07 90 AD |  if_e	jmp	#LR__0396
0551c     B3 01 00 FF 
05520     F0 15 06 F6 | 	mov	arg02, ##@LR__5625
05524     13 13 02 F6 | 	mov	arg01, local01
05528     14 14 B2 FD | 	call	#__system___string_cmp
0552c     00 FA 0D F2 | 	cmp	result1, #0 wz
05530     AC 07 90 AD |  if_e	jmp	#LR__0397
05534     B3 01 00 FF 
05538     F6 15 06 F6 | 	mov	arg02, ##@LR__5626
0553c     13 13 02 F6 | 	mov	arg01, local01
05540     FC 13 B2 FD | 	call	#__system___string_cmp
05544     00 FA 0D F2 | 	cmp	result1, #0 wz
05548     9C 07 90 AD |  if_e	jmp	#LR__0398
0554c     B3 01 00 FF 
05550     FF 15 06 F6 | 	mov	arg02, ##@LR__5627
05554     13 13 02 F6 | 	mov	arg01, local01
05558     E4 13 B2 FD | 	call	#__system___string_cmp
0555c     00 FA 0D F2 | 	cmp	result1, #0 wz
05560     8C 07 90 AD |  if_e	jmp	#LR__0399
05564     B4 01 00 FF 
05568     09 14 06 F6 | 	mov	arg02, ##@LR__5628
0556c     13 13 02 F6 | 	mov	arg01, local01
05570     CC 13 B2 FD | 	call	#__system___string_cmp
05574     00 FA 0D F2 | 	cmp	result1, #0 wz
05578     7C 07 90 AD |  if_e	jmp	#LR__0400
0557c     B4 01 00 FF 
05580     12 14 06 F6 | 	mov	arg02, ##@LR__5629
05584     13 13 02 F6 | 	mov	arg01, local01
05588     B4 13 B2 FD | 	call	#__system___string_cmp
0558c     00 FA 0D F2 | 	cmp	result1, #0 wz
05590     6C 07 90 AD |  if_e	jmp	#LR__0401
05594     B4 01 00 FF 
05598     17 14 06 F6 | 	mov	arg02, ##@LR__5630
0559c     13 13 02 F6 | 	mov	arg01, local01
055a0     9C 13 B2 FD | 	call	#__system___string_cmp
055a4     00 FA 0D F2 | 	cmp	result1, #0 wz
055a8     5C 07 90 AD |  if_e	jmp	#LR__0402
055ac     B4 01 00 FF 
055b0     1A 14 06 F6 | 	mov	arg02, ##@LR__5631
055b4     13 13 02 F6 | 	mov	arg01, local01
055b8     84 13 B2 FD | 	call	#__system___string_cmp
055bc     00 FA 0D F2 | 	cmp	result1, #0 wz
055c0     4C 07 90 AD |  if_e	jmp	#LR__0403
055c4     B4 01 00 FF 
055c8     25 14 06 F6 | 	mov	arg02, ##@LR__5632
055cc     13 13 02 F6 | 	mov	arg01, local01
055d0     6C 13 B2 FD | 	call	#__system___string_cmp
055d4     00 FA 0D F2 | 	cmp	result1, #0 wz
055d8     3C 07 90 AD |  if_e	jmp	#LR__0404
055dc     B4 01 00 FF 
055e0     2A 14 06 F6 | 	mov	arg02, ##@LR__5633
055e4     13 13 02 F6 | 	mov	arg01, local01
055e8     54 13 B2 FD | 	call	#__system___string_cmp
055ec     00 FA 0D F2 | 	cmp	result1, #0 wz
055f0     2C 07 90 AD |  if_e	jmp	#LR__0405
055f4     B4 01 00 FF 
055f8     2E 14 06 F6 | 	mov	arg02, ##@LR__5634
055fc     13 13 02 F6 | 	mov	arg01, local01
05600     3C 13 B2 FD | 	call	#__system___string_cmp
05604     00 FA 0D F2 | 	cmp	result1, #0 wz
05608     1C 07 90 AD |  if_e	jmp	#LR__0406
0560c     B4 01 00 FF 
05610     33 14 06 F6 | 	mov	arg02, ##@LR__5635
05614     13 13 02 F6 | 	mov	arg01, local01
05618     24 13 B2 FD | 	call	#__system___string_cmp
0561c     00 FA 0D F2 | 	cmp	result1, #0 wz
05620     0C 07 90 AD |  if_e	jmp	#LR__0407
05624     B4 01 00 FF 
05628     37 14 06 F6 | 	mov	arg02, ##@LR__5636
0562c     13 13 02 F6 | 	mov	arg01, local01
05630     0C 13 B2 FD | 	call	#__system___string_cmp
05634     00 FA 0D F2 | 	cmp	result1, #0 wz
05638     FC 06 90 AD |  if_e	jmp	#LR__0408
0563c     B4 01 00 FF 
05640     40 14 06 F6 | 	mov	arg02, ##@LR__5637
05644     13 13 02 F6 | 	mov	arg01, local01
05648     F4 12 B2 FD | 	call	#__system___string_cmp
0564c     00 FA 0D F2 | 	cmp	result1, #0 wz
05650     EC 06 90 AD |  if_e	jmp	#LR__0409
05654     B4 01 00 FF 
05658     45 14 06 F6 | 	mov	arg02, ##@LR__5638
0565c     13 13 02 F6 | 	mov	arg01, local01
05660     DC 12 B2 FD | 	call	#__system___string_cmp
05664     00 FA 0D F2 | 	cmp	result1, #0 wz
05668     DC 06 90 AD |  if_e	jmp	#LR__0410
0566c     B4 01 00 FF 
05670     4B 14 06 F6 | 	mov	arg02, ##@LR__5639
05674     13 13 02 F6 | 	mov	arg01, local01
05678     C4 12 B2 FD | 	call	#__system___string_cmp
0567c     00 FA 0D F2 | 	cmp	result1, #0 wz
05680     CC 06 90 AD |  if_e	jmp	#LR__0411
05684     B4 01 00 FF 
05688     4D 14 06 F6 | 	mov	arg02, ##@LR__5640
0568c     13 13 02 F6 | 	mov	arg01, local01
05690     AC 12 B2 FD | 	call	#__system___string_cmp
05694     00 FA 0D F2 | 	cmp	result1, #0 wz
05698     BC 06 90 AD |  if_e	jmp	#LR__0412
0569c     B4 01 00 FF 
056a0     51 14 06 F6 | 	mov	arg02, ##@LR__5641
056a4     13 13 02 F6 | 	mov	arg01, local01
056a8     94 12 B2 FD | 	call	#__system___string_cmp
056ac     00 FA 0D F2 | 	cmp	result1, #0 wz
056b0     AC 06 90 AD |  if_e	jmp	#LR__0413
056b4     B4 01 00 FF 
056b8     55 14 06 F6 | 	mov	arg02, ##@LR__5642
056bc     13 13 02 F6 | 	mov	arg01, local01
056c0     7C 12 B2 FD | 	call	#__system___string_cmp
056c4     00 FA 0D F2 | 	cmp	result1, #0 wz
056c8     9C 06 90 AD |  if_e	jmp	#LR__0414
056cc     B4 01 00 FF 
056d0     5A 14 06 F6 | 	mov	arg02, ##@LR__5643
056d4     13 13 02 F6 | 	mov	arg01, local01
056d8     64 12 B2 FD | 	call	#__system___string_cmp
056dc     00 FA 0D F2 | 	cmp	result1, #0 wz
056e0     8C 06 90 AD |  if_e	jmp	#LR__0415
056e4     B4 01 00 FF 
056e8     62 14 06 F6 | 	mov	arg02, ##@LR__5644
056ec     13 13 02 F6 | 	mov	arg01, local01
056f0     4C 12 B2 FD | 	call	#__system___string_cmp
056f4     00 FA 0D F2 | 	cmp	result1, #0 wz
056f8     7C 06 90 AD |  if_e	jmp	#LR__0416
056fc     B4 01 00 FF 
05700     66 14 06 F6 | 	mov	arg02, ##@LR__5645
05704     13 13 02 F6 | 	mov	arg01, local01
05708     34 12 B2 FD | 	call	#__system___string_cmp
0570c     00 FA 0D F2 | 	cmp	result1, #0 wz
05710     6C 06 90 AD |  if_e	jmp	#LR__0417
05714     B4 01 00 FF 
05718     68 14 06 F6 | 	mov	arg02, ##@LR__5646
0571c     13 13 02 F6 | 	mov	arg01, local01
05720     1C 12 B2 FD | 	call	#__system___string_cmp
05724     00 FA 0D F2 | 	cmp	result1, #0 wz
05728     5C 06 90 AD |  if_e	jmp	#LR__0418
0572c     B4 01 00 FF 
05730     70 14 06 F6 | 	mov	arg02, ##@LR__5647
05734     13 13 02 F6 | 	mov	arg01, local01
05738     04 12 B2 FD | 	call	#__system___string_cmp
0573c     00 FA 0D F2 | 	cmp	result1, #0 wz
05740     4C 06 90 AD |  if_e	jmp	#LR__0419
05744     B4 01 00 FF 
05748     77 14 06 F6 | 	mov	arg02, ##@LR__5648
0574c     13 13 02 F6 | 	mov	arg01, local01
05750     EC 11 B2 FD | 	call	#__system___string_cmp
05754     00 FA 0D F2 | 	cmp	result1, #0 wz
05758     3C 06 90 AD |  if_e	jmp	#LR__0420
0575c     B4 01 00 FF 
05760     7B 14 06 F6 | 	mov	arg02, ##@LR__5649
05764     13 13 02 F6 | 	mov	arg01, local01
05768     D4 11 B2 FD | 	call	#__system___string_cmp
0576c     00 FA 0D F2 | 	cmp	result1, #0 wz
05770     2C 06 90 AD |  if_e	jmp	#LR__0421
05774     B4 01 00 FF 
05778     80 14 06 F6 | 	mov	arg02, ##@LR__5650
0577c     13 13 02 F6 | 	mov	arg01, local01
05780     BC 11 B2 FD | 	call	#__system___string_cmp
05784     00 FA 0D F2 | 	cmp	result1, #0 wz
05788     1C 06 90 AD |  if_e	jmp	#LR__0422
0578c     B4 01 00 FF 
05790     83 14 06 F6 | 	mov	arg02, ##@LR__5651
05794     13 13 02 F6 | 	mov	arg01, local01
05798     A4 11 B2 FD | 	call	#__system___string_cmp
0579c     00 FA 0D F2 | 	cmp	result1, #0 wz
057a0     0C 06 90 AD |  if_e	jmp	#LR__0423
057a4     B4 01 00 FF 
057a8     8C 14 06 F6 | 	mov	arg02, ##@LR__5652
057ac     13 13 02 F6 | 	mov	arg01, local01
057b0     8C 11 B2 FD | 	call	#__system___string_cmp
057b4     00 FA 0D F2 | 	cmp	result1, #0 wz
057b8     FC 05 90 AD |  if_e	jmp	#LR__0424
057bc     B4 01 00 FF 
057c0     90 14 06 F6 | 	mov	arg02, ##@LR__5653
057c4     13 13 02 F6 | 	mov	arg01, local01
057c8     74 11 B2 FD | 	call	#__system___string_cmp
057cc     00 FA 0D F2 | 	cmp	result1, #0 wz
057d0     EC 05 90 AD |  if_e	jmp	#LR__0425
057d4     B4 01 00 FF 
057d8     97 14 06 F6 | 	mov	arg02, ##@LR__5654
057dc     13 13 02 F6 | 	mov	arg01, local01
057e0     5C 11 B2 FD | 	call	#__system___string_cmp
057e4     00 FA 0D F2 | 	cmp	result1, #0 wz
057e8     DC 05 90 AD |  if_e	jmp	#LR__0426
057ec     B4 01 00 FF 
057f0     9B 14 06 F6 | 	mov	arg02, ##@LR__5655
057f4     13 13 02 F6 | 	mov	arg01, local01
057f8     44 11 B2 FD | 	call	#__system___string_cmp
057fc     00 FA 0D F2 | 	cmp	result1, #0 wz
05800     CC 05 90 AD |  if_e	jmp	#LR__0427
05804     B4 01 00 FF 
05808     A2 14 06 F6 | 	mov	arg02, ##@LR__5656
0580c     13 13 02 F6 | 	mov	arg01, local01
05810     2C 11 B2 FD | 	call	#__system___string_cmp
05814     00 FA 0D F2 | 	cmp	result1, #0 wz
05818     BC 05 90 AD |  if_e	jmp	#LR__0428
0581c     B4 01 00 FF 
05820     A6 14 06 F6 | 	mov	arg02, ##@LR__5657
05824     13 13 02 F6 | 	mov	arg01, local01
05828     14 11 B2 FD | 	call	#__system___string_cmp
0582c     00 FA 0D F2 | 	cmp	result1, #0 wz
05830     AC 05 90 AD |  if_e	jmp	#LR__0429
05834     B4 01 00 FF 
05838     AD 14 06 F6 | 	mov	arg02, ##@LR__5658
0583c     13 13 02 F6 | 	mov	arg01, local01
05840     FC 10 B2 FD | 	call	#__system___string_cmp
05844     00 FA 0D F2 | 	cmp	result1, #0 wz
05848     9C 05 90 AD |  if_e	jmp	#LR__0430
0584c     B4 01 00 FF 
05850     B1 14 06 F6 | 	mov	arg02, ##@LR__5659
05854     13 13 02 F6 | 	mov	arg01, local01
05858     E4 10 B2 FD | 	call	#__system___string_cmp
0585c     00 FA 0D F2 | 	cmp	result1, #0 wz
05860     8C 05 90 AD |  if_e	jmp	#LR__0431
05864     B4 01 00 FF 
05868     BC 14 06 F6 | 	mov	arg02, ##@LR__5660
0586c     13 13 02 F6 | 	mov	arg01, local01
05870     CC 10 B2 FD | 	call	#__system___string_cmp
05874     00 FA 0D F2 | 	cmp	result1, #0 wz
05878     7C 05 90 AD |  if_e	jmp	#LR__0432
0587c     B4 01 00 FF 
05880     C0 14 06 F6 | 	mov	arg02, ##@LR__5661
05884     13 13 02 F6 | 	mov	arg01, local01
05888     B4 10 B2 FD | 	call	#__system___string_cmp
0588c     00 FA 0D F2 | 	cmp	result1, #0 wz
05890     6C 05 90 AD |  if_e	jmp	#LR__0433
05894     B4 01 00 FF 
05898     C7 14 06 F6 | 	mov	arg02, ##@LR__5662
0589c     13 13 02 F6 | 	mov	arg01, local01
058a0     9C 10 B2 FD | 	call	#__system___string_cmp
058a4     00 FA 0D F2 | 	cmp	result1, #0 wz
058a8     5C 05 90 AD |  if_e	jmp	#LR__0434
058ac     B4 01 00 FF 
058b0     CB 14 06 F6 | 	mov	arg02, ##@LR__5663
058b4     13 13 02 F6 | 	mov	arg01, local01
058b8     84 10 B2 FD | 	call	#__system___string_cmp
058bc     00 FA 0D F2 | 	cmp	result1, #0 wz
058c0     4C 05 90 AD |  if_e	jmp	#LR__0435
058c4     B4 01 00 FF 
058c8     D3 14 06 F6 | 	mov	arg02, ##@LR__5664
058cc     13 13 02 F6 | 	mov	arg01, local01
058d0     6C 10 B2 FD | 	call	#__system___string_cmp
058d4     00 FA 0D F2 | 	cmp	result1, #0 wz
058d8     3C 05 90 AD |  if_e	jmp	#LR__0436
058dc     B4 01 00 FF 
058e0     D7 14 06 F6 | 	mov	arg02, ##@LR__5665
058e4     13 13 02 F6 | 	mov	arg01, local01
058e8     54 10 B2 FD | 	call	#__system___string_cmp
058ec     00 FA 0D F2 | 	cmp	result1, #0 wz
058f0     2C 05 90 AD |  if_e	jmp	#LR__0437
058f4     B4 01 00 FF 
058f8     DE 14 06 F6 | 	mov	arg02, ##@LR__5666
058fc     13 13 02 F6 | 	mov	arg01, local01
05900     3C 10 B2 FD | 	call	#__system___string_cmp
05904     00 FA 0D F2 | 	cmp	result1, #0 wz
05908     1C 05 90 AD |  if_e	jmp	#LR__0438
0590c     B4 01 00 FF 
05910     E5 14 06 F6 | 	mov	arg02, ##@LR__5667
05914     13 13 02 F6 | 	mov	arg01, local01
05918     24 10 B2 FD | 	call	#__system___string_cmp
0591c     00 FA 0D F2 | 	cmp	result1, #0 wz
05920     0C 05 90 AD |  if_e	jmp	#LR__0439
05924     B4 01 00 FF 
05928     E9 14 06 F6 | 	mov	arg02, ##@LR__5668
0592c     13 13 02 F6 | 	mov	arg01, local01
05930     0C 10 B2 FD | 	call	#__system___string_cmp
05934     00 FA 0D F2 | 	cmp	result1, #0 wz
05938     FC 04 90 AD |  if_e	jmp	#LR__0440
0593c     B4 01 00 FF 
05940     EF 14 06 F6 | 	mov	arg02, ##@LR__5669
05944     13 13 02 F6 | 	mov	arg01, local01
05948     F4 0F B2 FD | 	call	#__system___string_cmp
0594c     00 FA 0D F2 | 	cmp	result1, #0 wz
05950     EC 04 90 AD |  if_e	jmp	#LR__0441
05954     B4 01 00 FF 
05958     F3 14 06 F6 | 	mov	arg02, ##@LR__5670
0595c     13 13 02 F6 | 	mov	arg01, local01
05960     DC 0F B2 FD | 	call	#__system___string_cmp
05964     00 FA 0D F2 | 	cmp	result1, #0 wz
05968     DC 04 90 AD |  if_e	jmp	#LR__0442
0596c     B4 01 00 FF 
05970     FA 14 06 F6 | 	mov	arg02, ##@LR__5671
05974     13 13 02 F6 | 	mov	arg01, local01
05978     C4 0F B2 FD | 	call	#__system___string_cmp
0597c     00 FA 0D F2 | 	cmp	result1, #0 wz
05980     CC 04 90 AD |  if_e	jmp	#LR__0443
05984     B4 01 00 FF 
05988     FF 14 06 F6 | 	mov	arg02, ##@LR__5672
0598c     13 13 02 F6 | 	mov	arg01, local01
05990     AC 0F B2 FD | 	call	#__system___string_cmp
05994     00 FA 0D F2 | 	cmp	result1, #0 wz
05998     BC 04 90 AD |  if_e	jmp	#LR__0444
0599c     B4 01 00 FF 
059a0     04 15 06 F6 | 	mov	arg02, ##@LR__5673
059a4     13 13 02 F6 | 	mov	arg01, local01
059a8     94 0F B2 FD | 	call	#__system___string_cmp
059ac     00 FA 0D F2 | 	cmp	result1, #0 wz
059b0     AC 04 90 AD |  if_e	jmp	#LR__0445
059b4     B4 01 00 FF 
059b8     0B 15 06 F6 | 	mov	arg02, ##@LR__5674
059bc     13 13 02 F6 | 	mov	arg01, local01
059c0     7C 0F B2 FD | 	call	#__system___string_cmp
059c4     00 FA 0D F2 | 	cmp	result1, #0 wz
059c8     9C 04 90 AD |  if_e	jmp	#LR__0446
059cc     B4 01 00 FF 
059d0     0E 15 06 F6 | 	mov	arg02, ##@LR__5675
059d4     13 13 02 F6 | 	mov	arg01, local01
059d8     64 0F B2 FD | 	call	#__system___string_cmp
059dc     00 FA 0D F2 | 	cmp	result1, #0 wz
059e0     8C 04 90 AD |  if_e	jmp	#LR__0447
059e4     B4 01 00 FF 
059e8     18 15 06 F6 | 	mov	arg02, ##@LR__5676
059ec     13 13 02 F6 | 	mov	arg01, local01
059f0     4C 0F B2 FD | 	call	#__system___string_cmp
059f4     00 FA 0D F2 | 	cmp	result1, #0 wz
059f8     7C 04 90 AD |  if_e	jmp	#LR__0448
059fc     B4 01 00 FF 
05a00     1C 15 06 F6 | 	mov	arg02, ##@LR__5677
05a04     13 13 02 F6 | 	mov	arg01, local01
05a08     34 0F B2 FD | 	call	#__system___string_cmp
05a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a10     6C 04 90 AD |  if_e	jmp	#LR__0449
05a14     B4 01 00 FF 
05a18     24 15 06 F6 | 	mov	arg02, ##@LR__5678
05a1c     13 13 02 F6 | 	mov	arg01, local01
05a20     1C 0F B2 FD | 	call	#__system___string_cmp
05a24     00 FA 0D F2 | 	cmp	result1, #0 wz
05a28     5C 04 90 AD |  if_e	jmp	#LR__0450
05a2c     B4 01 00 FF 
05a30     28 15 06 F6 | 	mov	arg02, ##@LR__5679
05a34     13 13 02 F6 | 	mov	arg01, local01
05a38     04 0F B2 FD | 	call	#__system___string_cmp
05a3c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a40     4C 04 90 AD |  if_e	jmp	#LR__0451
05a44     B4 01 00 FF 
05a48     2E 15 06 F6 | 	mov	arg02, ##@LR__5680
05a4c     13 13 02 F6 | 	mov	arg01, local01
05a50     EC 0E B2 FD | 	call	#__system___string_cmp
05a54     00 FA 0D F2 | 	cmp	result1, #0 wz
05a58     3C 04 90 AD |  if_e	jmp	#LR__0452
05a5c     B4 01 00 FF 
05a60     34 15 06 F6 | 	mov	arg02, ##@LR__5681
05a64     13 13 02 F6 | 	mov	arg01, local01
05a68     D4 0E B2 FD | 	call	#__system___string_cmp
05a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
05a70     2C 04 90 AD |  if_e	jmp	#LR__0453
05a74     30 04 90 FD | 	jmp	#LR__0454
05a78                 | LR__0320
05a78     5C FA 05 F6 | 	mov	result1, #92
05a7c     2C 04 90 FD | 	jmp	#LR__0455
05a80                 | LR__0321
05a80     5C FA 05 F6 | 	mov	result1, #92
05a84     24 04 90 FD | 	jmp	#LR__0455
05a88                 | LR__0322
05a88     B9 FA 05 F6 | 	mov	result1, #185
05a8c     1C 04 90 FD | 	jmp	#LR__0455
05a90                 | LR__0323
05a90     47 FA 05 F6 | 	mov	result1, #71
05a94     14 04 90 FD | 	jmp	#LR__0455
05a98                 | LR__0324
05a98     59 FA 05 F6 | 	mov	result1, #89
05a9c     0C 04 90 FD | 	jmp	#LR__0455
05aa0                 | LR__0325
05aa0     59 FA 05 F6 | 	mov	result1, #89
05aa4     04 04 90 FD | 	jmp	#LR__0455
05aa8                 | LR__0326
05aa8     C3 FA 05 F6 | 	mov	result1, #195
05aac     FC 03 90 FD | 	jmp	#LR__0455
05ab0                 | LR__0327
05ab0     AE FA 05 F6 | 	mov	result1, #174
05ab4     F4 03 90 FD | 	jmp	#LR__0455
05ab8                 | LR__0328
05ab8     AE FA 05 F6 | 	mov	result1, #174
05abc     EC 03 90 FD | 	jmp	#LR__0455
05ac0                 | LR__0329
05ac0     B1 FA 05 F6 | 	mov	result1, #177
05ac4     E4 03 90 FD | 	jmp	#LR__0455
05ac8                 | LR__0330
05ac8     B1 FA 05 F6 | 	mov	result1, #177
05acc     DC 03 90 FD | 	jmp	#LR__0455
05ad0                 | LR__0331
05ad0     AF FA 05 F6 | 	mov	result1, #175
05ad4     D4 03 90 FD | 	jmp	#LR__0455
05ad8                 | LR__0332
05ad8     AF FA 05 F6 | 	mov	result1, #175
05adc     CC 03 90 FD | 	jmp	#LR__0455
05ae0                 | LR__0333
05ae0     B0 FA 05 F6 | 	mov	result1, #176
05ae4     C4 03 90 FD | 	jmp	#LR__0455
05ae8                 | LR__0334
05ae8     B0 FA 05 F6 | 	mov	result1, #176
05aec     BC 03 90 FD | 	jmp	#LR__0455
05af0                 | LR__0335
05af0     45 FA 05 F6 | 	mov	result1, #69
05af4     B4 03 90 FD | 	jmp	#LR__0455
05af8                 | LR__0336
05af8     45 FA 05 F6 | 	mov	result1, #69
05afc     AC 03 90 FD | 	jmp	#LR__0455
05b00                 | LR__0337
05b00     69 FA 05 F6 | 	mov	result1, #105
05b04     A4 03 90 FD | 	jmp	#LR__0455
05b08                 | LR__0338
05b08     B4 FA 05 F6 | 	mov	result1, #180
05b0c     9C 03 90 FD | 	jmp	#LR__0455
05b10                 | LR__0339
05b10     40 FA 05 F6 | 	mov	result1, #64
05b14     94 03 90 FD | 	jmp	#LR__0455
05b18                 | LR__0340
05b18     CF FA 05 F6 | 	mov	result1, #207
05b1c     8C 03 90 FD | 	jmp	#LR__0455
05b20                 | LR__0341
05b20     49 FA 05 F6 | 	mov	result1, #73
05b24     84 03 90 FD | 	jmp	#LR__0455
05b28                 | LR__0342
05b28     49 FA 05 F6 | 	mov	result1, #73
05b2c     7C 03 90 FD | 	jmp	#LR__0455
05b30                 | LR__0343
05b30     C4 FA 05 F6 | 	mov	result1, #196
05b34     74 03 90 FD | 	jmp	#LR__0455
05b38                 | LR__0344
05b38     68 FA 05 F6 | 	mov	result1, #104
05b3c     6C 03 90 FD | 	jmp	#LR__0455
05b40                 | LR__0345
05b40     B7 FA 05 F6 | 	mov	result1, #183
05b44     64 03 90 FD | 	jmp	#LR__0455
05b48                 | LR__0346
05b48     73 FA 05 F6 | 	mov	result1, #115
05b4c     5C 03 90 FD | 	jmp	#LR__0455
05b50                 | LR__0347
05b50     74 FA 05 F6 | 	mov	result1, #116
05b54     54 03 90 FD | 	jmp	#LR__0455
05b58                 | LR__0348
05b58     6C FA 05 F6 | 	mov	result1, #108
05b5c     4C 03 90 FD | 	jmp	#LR__0455
05b60                 | LR__0349
05b60     6C FA 05 F6 | 	mov	result1, #108
05b64     44 03 90 FD | 	jmp	#LR__0455
05b68                 | LR__0350
05b68     89 FA 05 F6 | 	mov	result1, #137
05b6c     3C 03 90 FD | 	jmp	#LR__0455
05b70                 | LR__0351
05b70     C2 FA 05 F6 | 	mov	result1, #194
05b74     34 03 90 FD | 	jmp	#LR__0455
05b78                 | LR__0352
05b78     72 FA 05 F6 | 	mov	result1, #114
05b7c     2C 03 90 FD | 	jmp	#LR__0455
05b80                 | LR__0353
05b80     5D FA 05 F6 | 	mov	result1, #93
05b84     24 03 90 FD | 	jmp	#LR__0455
05b88                 | LR__0354
05b88     96 FA 05 F6 | 	mov	result1, #150
05b8c     1C 03 90 FD | 	jmp	#LR__0455
05b90                 | LR__0355
05b90     43 FA 05 F6 | 	mov	result1, #67
05b94     14 03 90 FD | 	jmp	#LR__0455
05b98                 | LR__0356
05b98     43 FA 05 F6 | 	mov	result1, #67
05b9c     0C 03 90 FD | 	jmp	#LR__0455
05ba0                 | LR__0357
05ba0     43 FA 05 F6 | 	mov	result1, #67
05ba4     04 03 90 FD | 	jmp	#LR__0455
05ba8                 | LR__0358
05ba8     5A FA 05 F6 | 	mov	result1, #90
05bac     FC 02 90 FD | 	jmp	#LR__0455
05bb0                 | LR__0359
05bb0     AB FA 05 F6 | 	mov	result1, #171
05bb4     F4 02 90 FD | 	jmp	#LR__0455
05bb8                 | LR__0360
05bb8     BD FA 05 F6 | 	mov	result1, #189
05bbc     EC 02 90 FD | 	jmp	#LR__0455
05bc0                 | LR__0361
05bc0     BD FA 05 F6 | 	mov	result1, #189
05bc4     E4 02 90 FD | 	jmp	#LR__0455
05bc8                 | LR__0362
05bc8     46 FA 05 F6 | 	mov	result1, #70
05bcc     DC 02 90 FD | 	jmp	#LR__0455
05bd0                 | LR__0363
05bd0     46 FA 05 F6 | 	mov	result1, #70
05bd4     D4 02 90 FD | 	jmp	#LR__0455
05bd8                 | LR__0364
05bd8     71 FA 05 F6 | 	mov	result1, #113
05bdc     CC 02 90 FD | 	jmp	#LR__0455
05be0                 | LR__0365
05be0     71 FA 05 F6 | 	mov	result1, #113
05be4     C4 02 90 FD | 	jmp	#LR__0455
05be8                 | LR__0366
05be8     60 FA 05 F6 | 	mov	result1, #96
05bec     BC 02 90 FD | 	jmp	#LR__0455
05bf0                 | LR__0367
05bf0     4A FA 05 F6 | 	mov	result1, #74
05bf4     B4 02 90 FD | 	jmp	#LR__0455
05bf8                 | LR__0368
05bf8     4A FA 05 F6 | 	mov	result1, #74
05bfc     AC 02 90 FD | 	jmp	#LR__0455
05c00                 | LR__0369
05c00     48 FA 05 F6 | 	mov	result1, #72
05c04     A4 02 90 FD | 	jmp	#LR__0455
05c08                 | LR__0370
05c08     48 FA 05 F6 | 	mov	result1, #72
05c0c     9C 02 90 FD | 	jmp	#LR__0455
05c10                 | LR__0371
05c10     BB FA 05 F6 | 	mov	result1, #187
05c14     94 02 90 FD | 	jmp	#LR__0455
05c18                 | LR__0372
05c18     A9 FA 05 F6 | 	mov	result1, #169
05c1c     8C 02 90 FD | 	jmp	#LR__0455
05c20                 | LR__0373
05c20     4E FA 05 F6 | 	mov	result1, #78
05c24     84 02 90 FD | 	jmp	#LR__0455
05c28                 | LR__0374
05c28     4E FA 05 F6 | 	mov	result1, #78
05c2c     7C 02 90 FD | 	jmp	#LR__0455
05c30                 | LR__0375
05c30     58 FA 05 F6 | 	mov	result1, #88
05c34     74 02 90 FD | 	jmp	#LR__0455
05c38                 | LR__0376
05c38     5F FA 05 F6 | 	mov	result1, #95
05c3c     6C 02 90 FD | 	jmp	#LR__0455
05c40                 | LR__0377
05c40     5F FA 05 F6 | 	mov	result1, #95
05c44     64 02 90 FD | 	jmp	#LR__0455
05c48                 | LR__0378
05c48     B5 FA 05 F6 | 	mov	result1, #181
05c4c     5C 02 90 FD | 	jmp	#LR__0455
05c50                 | LR__0379
05c50     4C FA 05 F6 | 	mov	result1, #76
05c54     54 02 90 FD | 	jmp	#LR__0455
05c58                 | LR__0380
05c58     4C FA 05 F6 | 	mov	result1, #76
05c5c     4C 02 90 FD | 	jmp	#LR__0455
05c60                 | LR__0381
05c60     52 FA 05 F6 | 	mov	result1, #82
05c64     44 02 90 FD | 	jmp	#LR__0455
05c68                 | LR__0382
05c68     52 FA 05 F6 | 	mov	result1, #82
05c6c     3C 02 90 FD | 	jmp	#LR__0455
05c70                 | LR__0383
05c70     97 FA 05 F6 | 	mov	result1, #151
05c74     34 02 90 FD | 	jmp	#LR__0455
05c78                 | LR__0384
05c78     C6 FA 05 F6 | 	mov	result1, #198
05c7c     2C 02 90 FD | 	jmp	#LR__0455
05c80                 | LR__0385
05c80     61 FA 05 F6 | 	mov	result1, #97
05c84     24 02 90 FD | 	jmp	#LR__0455
05c88                 | LR__0386
05c88     61 FA 05 F6 | 	mov	result1, #97
05c8c     1C 02 90 FD | 	jmp	#LR__0455
05c90                 | LR__0387
05c90     63 FA 05 F6 | 	mov	result1, #99
05c94     14 02 90 FD | 	jmp	#LR__0455
05c98                 | LR__0388
05c98     41 FA 05 F6 | 	mov	result1, #65
05c9c     0C 02 90 FD | 	jmp	#LR__0455
05ca0                 | LR__0389
05ca0     4B FA 05 F6 | 	mov	result1, #75
05ca4     04 02 90 FD | 	jmp	#LR__0455
05ca8                 | LR__0390
05ca8     4B FA 05 F6 | 	mov	result1, #75
05cac     FC 01 90 FD | 	jmp	#LR__0455
05cb0                 | LR__0391
05cb0     C1 FA 05 F6 | 	mov	result1, #193
05cb4     F4 01 90 FD | 	jmp	#LR__0455
05cb8                 | LR__0392
05cb8     B3 FA 05 F6 | 	mov	result1, #179
05cbc     EC 01 90 FD | 	jmp	#LR__0455
05cc0                 | LR__0393
05cc0     5E FA 05 F6 | 	mov	result1, #94
05cc4     E4 01 90 FD | 	jmp	#LR__0455
05cc8                 | LR__0394
05cc8     5E FA 05 F6 | 	mov	result1, #94
05ccc     DC 01 90 FD | 	jmp	#LR__0455
05cd0                 | LR__0395
05cd0     7C FA 05 F6 | 	mov	result1, #124
05cd4     D4 01 90 FD | 	jmp	#LR__0455
05cd8                 | LR__0396
05cd8     7E FA 05 F6 | 	mov	result1, #126
05cdc     CC 01 90 FD | 	jmp	#LR__0455
05ce0                 | LR__0397
05ce0     7D FA 05 F6 | 	mov	result1, #125
05ce4     C4 01 90 FD | 	jmp	#LR__0455
05ce8                 | LR__0398
05ce8     7F FA 05 F6 | 	mov	result1, #127
05cec     BC 01 90 FD | 	jmp	#LR__0455
05cf0                 | LR__0399
05cf0     80 FA 05 F6 | 	mov	result1, #128
05cf4     B4 01 90 FD | 	jmp	#LR__0455
05cf8                 | LR__0400
05cf8     55 FA 05 F6 | 	mov	result1, #85
05cfc     AC 01 90 FD | 	jmp	#LR__0455
05d00                 | LR__0401
05d00     75 FA 05 F6 | 	mov	result1, #117
05d04     A4 01 90 FD | 	jmp	#LR__0455
05d08                 | LR__0402
05d08     75 FA 05 F6 | 	mov	result1, #117
05d0c     9C 01 90 FD | 	jmp	#LR__0455
05d10                 | LR__0403
05d10     BA FA 05 F6 | 	mov	result1, #186
05d14     94 01 90 FD | 	jmp	#LR__0455
05d18                 | LR__0404
05d18     42 FA 05 F6 | 	mov	result1, #66
05d1c     8C 01 90 FD | 	jmp	#LR__0455
05d20                 | LR__0405
05d20     42 FA 05 F6 | 	mov	result1, #66
05d24     84 01 90 FD | 	jmp	#LR__0455
05d28                 | LR__0406
05d28     95 FA 05 F6 | 	mov	result1, #149
05d2c     7C 01 90 FD | 	jmp	#LR__0455
05d30                 | LR__0407
05d30     AC FA 05 F6 | 	mov	result1, #172
05d34     74 01 90 FD | 	jmp	#LR__0455
05d38                 | LR__0408
05d38     81 FA 05 F6 | 	mov	result1, #129
05d3c     6C 01 90 FD | 	jmp	#LR__0455
05d40                 | LR__0409
05d40     81 FA 05 F6 | 	mov	result1, #129
05d44     64 01 90 FD | 	jmp	#LR__0455
05d48                 | LR__0410
05d48     44 FA 05 F6 | 	mov	result1, #68
05d4c     5C 01 90 FD | 	jmp	#LR__0455
05d50                 | LR__0411
05d50     44 FA 05 F6 | 	mov	result1, #68
05d54     54 01 90 FD | 	jmp	#LR__0455
05d58                 | LR__0412
05d58     BC FA 05 F6 | 	mov	result1, #188
05d5c     4C 01 90 FD | 	jmp	#LR__0455
05d60                 | LR__0413
05d60     88 FA 05 F6 | 	mov	result1, #136
05d64     44 01 90 FD | 	jmp	#LR__0455
05d68                 | LR__0414
05d68     B6 FA 05 F6 | 	mov	result1, #182
05d6c     3C 01 90 FD | 	jmp	#LR__0455
05d70                 | LR__0415
05d70     92 FA 05 F6 | 	mov	result1, #146
05d74     34 01 90 FD | 	jmp	#LR__0455
05d78                 | LR__0416
05d78     BE FA 05 F6 | 	mov	result1, #190
05d7c     2C 01 90 FD | 	jmp	#LR__0455
05d80                 | LR__0417
05d80     BE FA 05 F6 | 	mov	result1, #190
05d84     24 01 90 FD | 	jmp	#LR__0455
05d88                 | LR__0418
05d88     C7 FA 05 F6 | 	mov	result1, #199
05d8c     1C 01 90 FD | 	jmp	#LR__0455
05d90                 | LR__0419
05d90     AA FA 05 F6 | 	mov	result1, #170
05d94     14 01 90 FD | 	jmp	#LR__0455
05d98                 | LR__0420
05d98     4D FA 05 F6 | 	mov	result1, #77
05d9c     0C 01 90 FD | 	jmp	#LR__0455
05da0                 | LR__0421
05da0     51 FA 05 F6 | 	mov	result1, #81
05da4     04 01 90 FD | 	jmp	#LR__0455
05da8                 | LR__0422
05da8     51 FA 05 F6 | 	mov	result1, #81
05dac     FC 00 90 FD | 	jmp	#LR__0455
05db0                 | LR__0423
05db0     8E FA 05 F6 | 	mov	result1, #142
05db4     F4 00 90 FD | 	jmp	#LR__0455
05db8                 | LR__0424
05db8     8E FA 05 F6 | 	mov	result1, #142
05dbc     EC 00 90 FD | 	jmp	#LR__0455
05dc0                 | LR__0425
05dc0     90 FA 05 F6 | 	mov	result1, #144
05dc4     E4 00 90 FD | 	jmp	#LR__0455
05dc8                 | LR__0426
05dc8     90 FA 05 F6 | 	mov	result1, #144
05dcc     DC 00 90 FD | 	jmp	#LR__0455
05dd0                 | LR__0427
05dd0     8D FA 05 F6 | 	mov	result1, #141
05dd4     D4 00 90 FD | 	jmp	#LR__0455
05dd8                 | LR__0428
05dd8     8D FA 05 F6 | 	mov	result1, #141
05ddc     CC 00 90 FD | 	jmp	#LR__0455
05de0                 | LR__0429
05de0     8C FA 05 F6 | 	mov	result1, #140
05de4     C4 00 90 FD | 	jmp	#LR__0455
05de8                 | LR__0430
05de8     8C FA 05 F6 | 	mov	result1, #140
05dec     BC 00 90 FD | 	jmp	#LR__0455
05df0                 | LR__0431
05df0     91 FA 05 F6 | 	mov	result1, #145
05df4     B4 00 90 FD | 	jmp	#LR__0455
05df8                 | LR__0432
05df8     91 FA 05 F6 | 	mov	result1, #145
05dfc     AC 00 90 FD | 	jmp	#LR__0455
05e00                 | LR__0433
05e00     8B FA 05 F6 | 	mov	result1, #139
05e04     A4 00 90 FD | 	jmp	#LR__0455
05e08                 | LR__0434
05e08     8B FA 05 F6 | 	mov	result1, #139
05e0c     9C 00 90 FD | 	jmp	#LR__0455
05e10                 | LR__0435
05e10     8F FA 05 F6 | 	mov	result1, #143
05e14     94 00 90 FD | 	jmp	#LR__0455
05e18                 | LR__0436
05e18     8F FA 05 F6 | 	mov	result1, #143
05e1c     8C 00 90 FD | 	jmp	#LR__0455
05e20                 | LR__0437
05e20     8F FA 05 F6 | 	mov	result1, #143
05e24     84 00 90 FD | 	jmp	#LR__0455
05e28                 | LR__0438
05e28     B2 FA 05 F6 | 	mov	result1, #178
05e2c     7C 00 90 FD | 	jmp	#LR__0455
05e30                 | LR__0439
05e30     B2 FA 05 F6 | 	mov	result1, #178
05e34     74 00 90 FD | 	jmp	#LR__0455
05e38                 | LR__0440
05e38     75 FA 05 F6 | 	mov	result1, #117
05e3c     6C 00 90 FD | 	jmp	#LR__0455
05e40                 | LR__0441
05e40     75 FA 05 F6 | 	mov	result1, #117
05e44     64 00 90 FD | 	jmp	#LR__0455
05e48                 | LR__0442
05e48     6D FA 05 F6 | 	mov	result1, #109
05e4c     5C 00 90 FD | 	jmp	#LR__0455
05e50                 | LR__0443
05e50     6D FA 05 F6 | 	mov	result1, #109
05e54     54 00 90 FD | 	jmp	#LR__0455
05e58                 | LR__0444
05e58     5B FA 05 F6 | 	mov	result1, #91
05e5c     4C 00 90 FD | 	jmp	#LR__0455
05e60                 | LR__0445
05e60     56 FA 05 F6 | 	mov	result1, #86
05e64     44 00 90 FD | 	jmp	#LR__0455
05e68                 | LR__0446
05e68     56 FA 05 F6 | 	mov	result1, #86
05e6c     3C 00 90 FD | 	jmp	#LR__0455
05e70                 | LR__0447
05e70     70 FA 05 F6 | 	mov	result1, #112
05e74     34 00 90 FD | 	jmp	#LR__0455
05e78                 | LR__0448
05e78     70 FA 05 F6 | 	mov	result1, #112
05e7c     2C 00 90 FD | 	jmp	#LR__0455
05e80                 | LR__0449
05e80     57 FA 05 F6 | 	mov	result1, #87
05e84     24 00 90 FD | 	jmp	#LR__0455
05e88                 | LR__0450
05e88     57 FA 05 F6 | 	mov	result1, #87
05e8c     1C 00 90 FD | 	jmp	#LR__0455
05e90                 | LR__0451
05e90     79 FA 05 F6 | 	mov	result1, #121
05e94     14 00 90 FD | 	jmp	#LR__0455
05e98                 | LR__0452
05e98     77 FA 05 F6 | 	mov	result1, #119
05e9c     0C 00 90 FD | 	jmp	#LR__0455
05ea0                 | LR__0453
05ea0     78 FA 05 F6 | 	mov	result1, #120
05ea4     04 00 90 FD | 	jmp	#LR__0455
05ea8                 | LR__0454
05ea8     00 FA 05 F6 | 	mov	result1, #0
05eac                 | LR__0455
05eac     A7 F0 03 F6 | 	mov	ptra, fp
05eb0     B2 00 A0 FD | 	call	#popregs_
05eb4                 | _iscommand_ret
05eb4     2D 00 64 FD | 	ret
05eb8                 | 
05eb8                 | ' 
05eb8                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05eb8                 | ' 
05eb8                 | ' function isfunction(s as string) as ubyte
05eb8                 | _isfunction
05eb8     01 4A 05 F6 | 	mov	COUNT_, #1
05ebc     A8 00 A0 FD | 	call	#pushregs_
05ec0                 | ' 
05ec0                 | ' select case s
05ec0     09 27 02 F6 | 	mov	local01, arg01
05ec4     B4 01 00 FF 
05ec8     3A 15 06 F6 | 	mov	arg02, ##@LR__5682
05ecc     13 13 02 F6 | 	mov	arg01, local01
05ed0     6C 0A B2 FD | 	call	#__system___string_cmp
05ed4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ed8     FC 04 90 AD |  if_e	jmp	#LR__0460
05edc     B4 01 00 FF 
05ee0     3E 15 06 F6 | 	mov	arg02, ##@LR__5683
05ee4     13 13 02 F6 | 	mov	arg01, local01
05ee8     54 0A B2 FD | 	call	#__system___string_cmp
05eec     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef0     EC 04 90 AD |  if_e	jmp	#LR__0461
05ef4     B4 01 00 FF 
05ef8     43 15 06 F6 | 	mov	arg02, ##@LR__5684
05efc     13 13 02 F6 | 	mov	arg01, local01
05f00     3C 0A B2 FD | 	call	#__system___string_cmp
05f04     00 FA 0D F2 | 	cmp	result1, #0 wz
05f08     DC 04 90 AD |  if_e	jmp	#LR__0462
05f0c     B4 01 00 FF 
05f10     47 15 06 F6 | 	mov	arg02, ##@LR__5685
05f14     13 13 02 F6 | 	mov	arg01, local01
05f18     24 0A B2 FD | 	call	#__system___string_cmp
05f1c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f20     CC 04 90 AD |  if_e	jmp	#LR__0463
05f24     B4 01 00 FF 
05f28     4C 15 06 F6 | 	mov	arg02, ##@LR__5686
05f2c     13 13 02 F6 | 	mov	arg01, local01
05f30     0C 0A B2 FD | 	call	#__system___string_cmp
05f34     00 FA 0D F2 | 	cmp	result1, #0 wz
05f38     BC 04 90 AD |  if_e	jmp	#LR__0464
05f3c     B4 01 00 FF 
05f40     50 15 06 F6 | 	mov	arg02, ##@LR__5687
05f44     13 13 02 F6 | 	mov	arg01, local01
05f48     F4 09 B2 FD | 	call	#__system___string_cmp
05f4c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f50     AC 04 90 AD |  if_e	jmp	#LR__0465
05f54     B4 01 00 FF 
05f58     55 15 06 F6 | 	mov	arg02, ##@LR__5688
05f5c     13 13 02 F6 | 	mov	arg01, local01
05f60     DC 09 B2 FD | 	call	#__system___string_cmp
05f64     00 FA 0D F2 | 	cmp	result1, #0 wz
05f68     9C 04 90 AD |  if_e	jmp	#LR__0466
05f6c     B4 01 00 FF 
05f70     59 15 06 F6 | 	mov	arg02, ##@LR__5689
05f74     13 13 02 F6 | 	mov	arg01, local01
05f78     C4 09 B2 FD | 	call	#__system___string_cmp
05f7c     00 FA 0D F2 | 	cmp	result1, #0 wz
05f80     8C 04 90 AD |  if_e	jmp	#LR__0467
05f84     B4 01 00 FF 
05f88     5E 15 06 F6 | 	mov	arg02, ##@LR__5690
05f8c     13 13 02 F6 | 	mov	arg01, local01
05f90     AC 09 B2 FD | 	call	#__system___string_cmp
05f94     00 FA 0D F2 | 	cmp	result1, #0 wz
05f98     7C 04 90 AD |  if_e	jmp	#LR__0468
05f9c     B4 01 00 FF 
05fa0     63 15 06 F6 | 	mov	arg02, ##@LR__5691
05fa4     13 13 02 F6 | 	mov	arg01, local01
05fa8     94 09 B2 FD | 	call	#__system___string_cmp
05fac     00 FA 0D F2 | 	cmp	result1, #0 wz
05fb0     6C 04 90 AD |  if_e	jmp	#LR__0469
05fb4     B4 01 00 FF 
05fb8     6B 15 06 F6 | 	mov	arg02, ##@LR__5692
05fbc     13 13 02 F6 | 	mov	arg01, local01
05fc0     7C 09 B2 FD | 	call	#__system___string_cmp
05fc4     00 FA 0D F2 | 	cmp	result1, #0 wz
05fc8     5C 04 90 AD |  if_e	jmp	#LR__0470
05fcc     B4 01 00 FF 
05fd0     6F 15 06 F6 | 	mov	arg02, ##@LR__5693
05fd4     13 13 02 F6 | 	mov	arg01, local01
05fd8     64 09 B2 FD | 	call	#__system___string_cmp
05fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
05fe0     4C 04 90 AD |  if_e	jmp	#LR__0471
05fe4     B4 01 00 FF 
05fe8     75 15 06 F6 | 	mov	arg02, ##@LR__5694
05fec     13 13 02 F6 | 	mov	arg01, local01
05ff0     4C 09 B2 FD | 	call	#__system___string_cmp
05ff4     00 FA 0D F2 | 	cmp	result1, #0 wz
05ff8     3C 04 90 AD |  if_e	jmp	#LR__0472
05ffc     B4 01 00 FF 
06000     7E 15 06 F6 | 	mov	arg02, ##@LR__5695
06004     13 13 02 F6 | 	mov	arg01, local01
06008     34 09 B2 FD | 	call	#__system___string_cmp
0600c     00 FA 0D F2 | 	cmp	result1, #0 wz
06010     2C 04 90 AD |  if_e	jmp	#LR__0473
06014     B4 01 00 FF 
06018     82 15 06 F6 | 	mov	arg02, ##@LR__5696
0601c     13 13 02 F6 | 	mov	arg01, local01
06020     1C 09 B2 FD | 	call	#__system___string_cmp
06024     00 FA 0D F2 | 	cmp	result1, #0 wz
06028     1C 04 90 AD |  if_e	jmp	#LR__0474
0602c     B4 01 00 FF 
06030     86 15 06 F6 | 	mov	arg02, ##@LR__5697
06034     13 13 02 F6 | 	mov	arg01, local01
06038     04 09 B2 FD | 	call	#__system___string_cmp
0603c     00 FA 0D F2 | 	cmp	result1, #0 wz
06040     0C 04 90 AD |  if_e	jmp	#LR__0475
06044     B4 01 00 FF 
06048     8F 15 06 F6 | 	mov	arg02, ##@LR__5698
0604c     13 13 02 F6 | 	mov	arg01, local01
06050     EC 08 B2 FD | 	call	#__system___string_cmp
06054     00 FA 0D F2 | 	cmp	result1, #0 wz
06058     FC 03 90 AD |  if_e	jmp	#LR__0476
0605c     B4 01 00 FF 
06060     93 15 06 F6 | 	mov	arg02, ##@LR__5699
06064     13 13 02 F6 | 	mov	arg01, local01
06068     D4 08 B2 FD | 	call	#__system___string_cmp
0606c     00 FA 0D F2 | 	cmp	result1, #0 wz
06070     EC 03 90 AD |  if_e	jmp	#LR__0477
06074     B4 01 00 FF 
06078     A1 15 06 F6 | 	mov	arg02, ##@LR__5700
0607c     13 13 02 F6 | 	mov	arg01, local01
06080     BC 08 B2 FD | 	call	#__system___string_cmp
06084     00 FA 0D F2 | 	cmp	result1, #0 wz
06088     DC 03 90 AD |  if_e	jmp	#LR__0478
0608c     B4 01 00 FF 
06090     AE 15 06 F6 | 	mov	arg02, ##@LR__5701
06094     13 13 02 F6 | 	mov	arg01, local01
06098     A4 08 B2 FD | 	call	#__system___string_cmp
0609c     00 FA 0D F2 | 	cmp	result1, #0 wz
060a0     CC 03 90 AD |  if_e	jmp	#LR__0479
060a4     B4 01 00 FF 
060a8     B6 15 06 F6 | 	mov	arg02, ##@LR__5702
060ac     13 13 02 F6 | 	mov	arg01, local01
060b0     8C 08 B2 FD | 	call	#__system___string_cmp
060b4     00 FA 0D F2 | 	cmp	result1, #0 wz
060b8     BC 03 90 AD |  if_e	jmp	#LR__0480
060bc     B4 01 00 FF 
060c0     BB 15 06 F6 | 	mov	arg02, ##@LR__5703
060c4     13 13 02 F6 | 	mov	arg01, local01
060c8     74 08 B2 FD | 	call	#__system___string_cmp
060cc     00 FA 0D F2 | 	cmp	result1, #0 wz
060d0     AC 03 90 AD |  if_e	jmp	#LR__0481
060d4     B4 01 00 FF 
060d8     C2 15 06 F6 | 	mov	arg02, ##@LR__5704
060dc     13 13 02 F6 | 	mov	arg01, local01
060e0     5C 08 B2 FD | 	call	#__system___string_cmp
060e4     00 FA 0D F2 | 	cmp	result1, #0 wz
060e8     9C 03 90 AD |  if_e	jmp	#LR__0482
060ec     B4 01 00 FF 
060f0     C6 15 06 F6 | 	mov	arg02, ##@LR__5705
060f4     13 13 02 F6 | 	mov	arg01, local01
060f8     44 08 B2 FD | 	call	#__system___string_cmp
060fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06100     8C 03 90 AD |  if_e	jmp	#LR__0483
06104     B4 01 00 FF 
06108     CC 15 06 F6 | 	mov	arg02, ##@LR__5706
0610c     13 13 02 F6 | 	mov	arg01, local01
06110     2C 08 B2 FD | 	call	#__system___string_cmp
06114     00 FA 0D F2 | 	cmp	result1, #0 wz
06118     7C 03 90 AD |  if_e	jmp	#LR__0484
0611c     B4 01 00 FF 
06120     D0 15 06 F6 | 	mov	arg02, ##@LR__5707
06124     13 13 02 F6 | 	mov	arg01, local01
06128     14 08 B2 FD | 	call	#__system___string_cmp
0612c     00 FA 0D F2 | 	cmp	result1, #0 wz
06130     6C 03 90 AD |  if_e	jmp	#LR__0485
06134     B4 01 00 FF 
06138     D4 15 06 F6 | 	mov	arg02, ##@LR__5708
0613c     13 13 02 F6 | 	mov	arg01, local01
06140     FC 07 B2 FD | 	call	#__system___string_cmp
06144     00 FA 0D F2 | 	cmp	result1, #0 wz
06148     5C 03 90 AD |  if_e	jmp	#LR__0486
0614c     B4 01 00 FF 
06150     DA 15 06 F6 | 	mov	arg02, ##@LR__5709
06154     13 13 02 F6 | 	mov	arg01, local01
06158     E4 07 B2 FD | 	call	#__system___string_cmp
0615c     00 FA 0D F2 | 	cmp	result1, #0 wz
06160     4C 03 90 AD |  if_e	jmp	#LR__0487
06164     B4 01 00 FF 
06168     DF 15 06 F6 | 	mov	arg02, ##@LR__5710
0616c     13 13 02 F6 | 	mov	arg01, local01
06170     CC 07 B2 FD | 	call	#__system___string_cmp
06174     00 FA 0D F2 | 	cmp	result1, #0 wz
06178     3C 03 90 AD |  if_e	jmp	#LR__0488
0617c     B4 01 00 FF 
06180     E6 15 06 F6 | 	mov	arg02, ##@LR__5711
06184     13 13 02 F6 | 	mov	arg01, local01
06188     B4 07 B2 FD | 	call	#__system___string_cmp
0618c     00 FA 0D F2 | 	cmp	result1, #0 wz
06190     2C 03 90 AD |  if_e	jmp	#LR__0489
06194     B4 01 00 FF 
06198     ED 15 06 F6 | 	mov	arg02, ##@LR__5712
0619c     13 13 02 F6 | 	mov	arg01, local01
061a0     9C 07 B2 FD | 	call	#__system___string_cmp
061a4     00 FA 0D F2 | 	cmp	result1, #0 wz
061a8     1C 03 90 AD |  if_e	jmp	#LR__0490
061ac     B4 01 00 FF 
061b0     F4 15 06 F6 | 	mov	arg02, ##@LR__5713
061b4     13 13 02 F6 | 	mov	arg01, local01
061b8     84 07 B2 FD | 	call	#__system___string_cmp
061bc     00 FA 0D F2 | 	cmp	result1, #0 wz
061c0     0C 03 90 AD |  if_e	jmp	#LR__0491
061c4     B4 01 00 FF 
061c8     FB 15 06 F6 | 	mov	arg02, ##@LR__5714
061cc     13 13 02 F6 | 	mov	arg01, local01
061d0     6C 07 B2 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     FC 02 90 AD |  if_e	jmp	#LR__0492
061dc     B5 01 00 FF 
061e0     00 14 06 F6 | 	mov	arg02, ##@LR__5715
061e4     13 13 02 F6 | 	mov	arg01, local01
061e8     54 07 B2 FD | 	call	#__system___string_cmp
061ec     00 FA 0D F2 | 	cmp	result1, #0 wz
061f0     EC 02 90 AD |  if_e	jmp	#LR__0493
061f4     B5 01 00 FF 
061f8     05 14 06 F6 | 	mov	arg02, ##@LR__5716
061fc     13 13 02 F6 | 	mov	arg01, local01
06200     3C 07 B2 FD | 	call	#__system___string_cmp
06204     00 FA 0D F2 | 	cmp	result1, #0 wz
06208     DC 02 90 AD |  if_e	jmp	#LR__0494
0620c     B5 01 00 FF 
06210     0A 14 06 F6 | 	mov	arg02, ##@LR__5717
06214     13 13 02 F6 | 	mov	arg01, local01
06218     24 07 B2 FD | 	call	#__system___string_cmp
0621c     00 FA 0D F2 | 	cmp	result1, #0 wz
06220     CC 02 90 AD |  if_e	jmp	#LR__0495
06224     B5 01 00 FF 
06228     10 14 06 F6 | 	mov	arg02, ##@LR__5718
0622c     13 13 02 F6 | 	mov	arg01, local01
06230     0C 07 B2 FD | 	call	#__system___string_cmp
06234     00 FA 0D F2 | 	cmp	result1, #0 wz
06238     BC 02 90 AD |  if_e	jmp	#LR__0496
0623c     B5 01 00 FF 
06240     16 14 06 F6 | 	mov	arg02, ##@LR__5719
06244     13 13 02 F6 | 	mov	arg01, local01
06248     F4 06 B2 FD | 	call	#__system___string_cmp
0624c     00 FA 0D F2 | 	cmp	result1, #0 wz
06250     AC 02 90 AD |  if_e	jmp	#LR__0497
06254     B5 01 00 FF 
06258     1C 14 06 F6 | 	mov	arg02, ##@LR__5720
0625c     13 13 02 F6 | 	mov	arg01, local01
06260     DC 06 B2 FD | 	call	#__system___string_cmp
06264     00 FA 0D F2 | 	cmp	result1, #0 wz
06268     9C 02 90 AD |  if_e	jmp	#LR__0498
0626c     B5 01 00 FF 
06270     21 14 06 F6 | 	mov	arg02, ##@LR__5721
06274     13 13 02 F6 | 	mov	arg01, local01
06278     C4 06 B2 FD | 	call	#__system___string_cmp
0627c     00 FA 0D F2 | 	cmp	result1, #0 wz
06280     8C 02 90 AD |  if_e	jmp	#LR__0499
06284     B5 01 00 FF 
06288     26 14 06 F6 | 	mov	arg02, ##@LR__5722
0628c     13 13 02 F6 | 	mov	arg01, local01
06290     AC 06 B2 FD | 	call	#__system___string_cmp
06294     00 FA 0D F2 | 	cmp	result1, #0 wz
06298     7C 02 90 AD |  if_e	jmp	#LR__0500
0629c     B5 01 00 FF 
062a0     2E 14 06 F6 | 	mov	arg02, ##@LR__5723
062a4     13 13 02 F6 | 	mov	arg01, local01
062a8     94 06 B2 FD | 	call	#__system___string_cmp
062ac     00 FA 0D F2 | 	cmp	result1, #0 wz
062b0     6C 02 90 AD |  if_e	jmp	#LR__0501
062b4     B5 01 00 FF 
062b8     34 14 06 F6 | 	mov	arg02, ##@LR__5724
062bc     13 13 02 F6 | 	mov	arg01, local01
062c0     7C 06 B2 FD | 	call	#__system___string_cmp
062c4     00 FA 0D F2 | 	cmp	result1, #0 wz
062c8     5C 02 90 AD |  if_e	jmp	#LR__0502
062cc     B5 01 00 FF 
062d0     3B 14 06 F6 | 	mov	arg02, ##@LR__5725
062d4     13 13 02 F6 | 	mov	arg01, local01
062d8     64 06 B2 FD | 	call	#__system___string_cmp
062dc     00 FA 0D F2 | 	cmp	result1, #0 wz
062e0     4C 02 90 AD |  if_e	jmp	#LR__0503
062e4     B5 01 00 FF 
062e8     41 14 06 F6 | 	mov	arg02, ##@LR__5726
062ec     13 13 02 F6 | 	mov	arg01, local01
062f0     4C 06 B2 FD | 	call	#__system___string_cmp
062f4     00 FA 0D F2 | 	cmp	result1, #0 wz
062f8     3C 02 90 AD |  if_e	jmp	#LR__0504
062fc     B5 01 00 FF 
06300     47 14 06 F6 | 	mov	arg02, ##@LR__5727
06304     13 13 02 F6 | 	mov	arg01, local01
06308     34 06 B2 FD | 	call	#__system___string_cmp
0630c     00 FA 0D F2 | 	cmp	result1, #0 wz
06310     2C 02 90 AD |  if_e	jmp	#LR__0505
06314     B5 01 00 FF 
06318     4B 14 06 F6 | 	mov	arg02, ##@LR__5728
0631c     13 13 02 F6 | 	mov	arg01, local01
06320     1C 06 B2 FD | 	call	#__system___string_cmp
06324     00 FA 0D F2 | 	cmp	result1, #0 wz
06328     1C 02 90 AD |  if_e	jmp	#LR__0506
0632c     B5 01 00 FF 
06330     4F 14 06 F6 | 	mov	arg02, ##@LR__5729
06334     13 13 02 F6 | 	mov	arg01, local01
06338     04 06 B2 FD | 	call	#__system___string_cmp
0633c     00 FA 0D F2 | 	cmp	result1, #0 wz
06340     0C 02 90 AD |  if_e	jmp	#LR__0507
06344     B5 01 00 FF 
06348     53 14 06 F6 | 	mov	arg02, ##@LR__5730
0634c     13 13 02 F6 | 	mov	arg01, local01
06350     EC 05 B2 FD | 	call	#__system___string_cmp
06354     00 FA 0D F2 | 	cmp	result1, #0 wz
06358     FC 01 90 AD |  if_e	jmp	#LR__0508
0635c     B5 01 00 FF 
06360     59 14 06 F6 | 	mov	arg02, ##@LR__5731
06364     13 13 02 F6 | 	mov	arg01, local01
06368     D4 05 B2 FD | 	call	#__system___string_cmp
0636c     00 FA 0D F2 | 	cmp	result1, #0 wz
06370     EC 01 90 AD |  if_e	jmp	#LR__0509
06374     B5 01 00 FF 
06378     5F 14 06 F6 | 	mov	arg02, ##@LR__5732
0637c     13 13 02 F6 | 	mov	arg01, local01
06380     BC 05 B2 FD | 	call	#__system___string_cmp
06384     00 FA 0D F2 | 	cmp	result1, #0 wz
06388     DC 01 90 AD |  if_e	jmp	#LR__0510
0638c     B5 01 00 FF 
06390     64 14 06 F6 | 	mov	arg02, ##@LR__5733
06394     13 13 02 F6 | 	mov	arg01, local01
06398     A4 05 B2 FD | 	call	#__system___string_cmp
0639c     00 FA 0D F2 | 	cmp	result1, #0 wz
063a0     CC 01 90 AD |  if_e	jmp	#LR__0511
063a4     B5 01 00 FF 
063a8     68 14 06 F6 | 	mov	arg02, ##@LR__5734
063ac     13 13 02 F6 | 	mov	arg01, local01
063b0     8C 05 B2 FD | 	call	#__system___string_cmp
063b4     00 FA 0D F2 | 	cmp	result1, #0 wz
063b8     BC 01 90 AD |  if_e	jmp	#LR__0512
063bc     B5 01 00 FF 
063c0     6C 14 06 F6 | 	mov	arg02, ##@LR__5735
063c4     13 13 02 F6 | 	mov	arg01, local01
063c8     74 05 B2 FD | 	call	#__system___string_cmp
063cc     00 FA 0D F2 | 	cmp	result1, #0 wz
063d0     AC 01 90 AD |  if_e	jmp	#LR__0513
063d4     B0 01 90 FD | 	jmp	#LR__0514
063d8                 | LR__0460
063d8     9E FA 05 F6 | 	mov	result1, #158
063dc     AC 01 90 FD | 	jmp	#LR__0515
063e0                 | LR__0461
063e0     85 FA 05 F6 | 	mov	result1, #133
063e4     A4 01 90 FD | 	jmp	#LR__0515
063e8                 | LR__0462
063e8     9B FA 05 F6 | 	mov	result1, #155
063ec     9C 01 90 FD | 	jmp	#LR__0515
063f0                 | LR__0463
063f0     9B FA 05 F6 | 	mov	result1, #155
063f4     94 01 90 FD | 	jmp	#LR__0515
063f8                 | LR__0464
063f8     A7 FA 05 F6 | 	mov	result1, #167
063fc     8C 01 90 FD | 	jmp	#LR__0515
06400                 | LR__0465
06400     84 FA 05 F6 | 	mov	result1, #132
06404     84 01 90 FD | 	jmp	#LR__0515
06408                 | LR__0466
06408     86 FA 05 F6 | 	mov	result1, #134
0640c     7C 01 90 FD | 	jmp	#LR__0515
06410                 | LR__0467
06410     A2 FA 05 F6 | 	mov	result1, #162
06414     74 01 90 FD | 	jmp	#LR__0515
06418                 | LR__0468
06418     9F FA 05 F6 | 	mov	result1, #159
0641c     6C 01 90 FD | 	jmp	#LR__0515
06420                 | LR__0469
06420     C0 FA 05 F6 | 	mov	result1, #192
06424     64 01 90 FD | 	jmp	#LR__0515
06428                 | LR__0470
06428     82 FA 05 F6 | 	mov	result1, #130
0642c     5C 01 90 FD | 	jmp	#LR__0515
06430                 | LR__0471
06430     99 FA 05 F6 | 	mov	result1, #153
06434     54 01 90 FD | 	jmp	#LR__0515
06438                 | LR__0472
06438     C5 FA 05 F6 | 	mov	result1, #197
0643c     4C 01 90 FD | 	jmp	#LR__0515
06440                 | LR__0473
06440     C5 FA 05 F6 | 	mov	result1, #197
06444     44 01 90 FD | 	jmp	#LR__0515
06448                 | LR__0474
06448     9C FA 05 F6 | 	mov	result1, #156
0644c     3C 01 90 FD | 	jmp	#LR__0515
06450                 | LR__0475
06450     6F FA 05 F6 | 	mov	result1, #111
06454     34 01 90 FD | 	jmp	#LR__0515
06458                 | LR__0476
06458     6F FA 05 F6 | 	mov	result1, #111
0645c     2C 01 90 FD | 	jmp	#LR__0515
06460                 | LR__0477
06460     93 FA 05 F6 | 	mov	result1, #147
06464     24 01 90 FD | 	jmp	#LR__0515
06468                 | LR__0478
06468     94 FA 05 F6 | 	mov	result1, #148
0646c     1C 01 90 FD | 	jmp	#LR__0515
06470                 | LR__0479
06470     62 FA 05 F6 | 	mov	result1, #98
06474     14 01 90 FD | 	jmp	#LR__0515
06478                 | LR__0480
06478     A3 FA 05 F6 | 	mov	result1, #163
0647c     0C 01 90 FD | 	jmp	#LR__0515
06480                 | LR__0481
06480     9D FA 05 F6 | 	mov	result1, #157
06484     04 01 90 FD | 	jmp	#LR__0515
06488                 | LR__0482
06488     8A FA 05 F6 | 	mov	result1, #138
0648c     FC 00 90 FD | 	jmp	#LR__0515
06490                 | LR__0483
06490     A4 FA 05 F6 | 	mov	result1, #164
06494     F4 00 90 FD | 	jmp	#LR__0515
06498                 | LR__0484
06498     A8 FA 05 F6 | 	mov	result1, #168
0649c     EC 00 90 FD | 	jmp	#LR__0515
064a0                 | LR__0485
064a0     AD FA 05 F6 | 	mov	result1, #173
064a4     E4 00 90 FD | 	jmp	#LR__0515
064a8                 | LR__0486
064a8     9A FA 05 F6 | 	mov	result1, #154
064ac     DC 00 90 FD | 	jmp	#LR__0515
064b0                 | LR__0487
064b0     A6 FA 05 F6 | 	mov	result1, #166
064b4     D4 00 90 FD | 	jmp	#LR__0515
064b8                 | LR__0488
064b8     66 FA 05 F6 | 	mov	result1, #102
064bc     CC 00 90 FD | 	jmp	#LR__0515
064c0                 | LR__0489
064c0     67 FA 05 F6 | 	mov	result1, #103
064c4     C4 00 90 FD | 	jmp	#LR__0515
064c8                 | LR__0490
064c8     64 FA 05 F6 | 	mov	result1, #100
064cc     BC 00 90 FD | 	jmp	#LR__0515
064d0                 | LR__0491
064d0     65 FA 05 F6 | 	mov	result1, #101
064d4     B4 00 90 FD | 	jmp	#LR__0515
064d8                 | LR__0492
064d8     C8 FA 05 F6 | 	mov	result1, #200
064dc     AC 00 90 FD | 	jmp	#LR__0515
064e0                 | LR__0493
064e0     C9 FA 05 F6 | 	mov	result1, #201
064e4     A4 00 90 FD | 	jmp	#LR__0515
064e8                 | LR__0494
064e8     CA FA 05 F6 | 	mov	result1, #202
064ec     9C 00 90 FD | 	jmp	#LR__0515
064f0                 | LR__0495
064f0     CC FA 05 F6 | 	mov	result1, #204
064f4     94 00 90 FD | 	jmp	#LR__0515
064f8                 | LR__0496
064f8     CD FA 05 F6 | 	mov	result1, #205
064fc     8C 00 90 FD | 	jmp	#LR__0515
06500                 | LR__0497
06500     CE FA 05 F6 | 	mov	result1, #206
06504     84 00 90 FD | 	jmp	#LR__0515
06508                 | LR__0498
06508     CB FA 05 F6 | 	mov	result1, #203
0650c     7C 00 90 FD | 	jmp	#LR__0515
06510                 | LR__0499
06510     98 FA 05 F6 | 	mov	result1, #152
06514     74 00 90 FD | 	jmp	#LR__0515
06518                 | LR__0500
06518     7B FA 05 F6 | 	mov	result1, #123
0651c     6C 00 90 FD | 	jmp	#LR__0515
06520                 | LR__0501
06520     76 FA 05 F6 | 	mov	result1, #118
06524     64 00 90 FD | 	jmp	#LR__0515
06528                 | LR__0502
06528     A5 FA 05 F6 | 	mov	result1, #165
0652c     5C 00 90 FD | 	jmp	#LR__0515
06530                 | LR__0503
06530     7A FA 05 F6 | 	mov	result1, #122
06534     54 00 90 FD | 	jmp	#LR__0515
06538                 | LR__0504
06538     BF FA 05 F6 | 	mov	result1, #191
0653c     4C 00 90 FD | 	jmp	#LR__0515
06540                 | LR__0505
06540     54 FA 05 F6 | 	mov	result1, #84
06544     44 00 90 FD | 	jmp	#LR__0515
06548                 | LR__0506
06548     6B FA 05 F6 | 	mov	result1, #107
0654c     3C 00 90 FD | 	jmp	#LR__0515
06550                 | LR__0507
06550     87 FA 05 F6 | 	mov	result1, #135
06554     34 00 90 FD | 	jmp	#LR__0515
06558                 | LR__0508
06558     6A FA 05 F6 | 	mov	result1, #106
0655c     2C 00 90 FD | 	jmp	#LR__0515
06560                 | LR__0509
06560     6E FA 05 F6 | 	mov	result1, #110
06564     24 00 90 FD | 	jmp	#LR__0515
06568                 | LR__0510
06568     A1 FA 05 F6 | 	mov	result1, #161
0656c     1C 00 90 FD | 	jmp	#LR__0515
06570                 | LR__0511
06570     83 FA 05 F6 | 	mov	result1, #131
06574     14 00 90 FD | 	jmp	#LR__0515
06578                 | LR__0512
06578     A0 FA 05 F6 | 	mov	result1, #160
0657c     0C 00 90 FD | 	jmp	#LR__0515
06580                 | LR__0513
06580     9B FA 05 F6 | 	mov	result1, #155
06584     04 00 90 FD | 	jmp	#LR__0515
06588                 | LR__0514
06588     00 FA 05 F6 | 	mov	result1, #0
0658c                 | LR__0515
0658c     A7 F0 03 F6 | 	mov	ptra, fp
06590     B2 00 A0 FD | 	call	#popregs_
06594                 | _isfunction_ret
06594     2D 00 64 FD | 	ret
06598                 | 
06598                 | ' 
06598                 | ' ' Check if the part is a name
06598                 | ' 
06598                 | ' function isname(s as string) as boolean
06598                 | _isname
06598     0D 4A 05 F6 | 	mov	COUNT_, #13
0659c     A8 00 A0 FD | 	call	#pushregs_
065a0     09 27 02 F6 | 	mov	local01, arg01
065a4     09 29 02 F6 | 	mov	local02, arg01
065a8     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
065ac                 | LR__0520
065ac     14 FB C9 FA | 	rdbyte	result1, local02 wz
065b0     01 28 06 51 |  if_ne	add	local02, #1
065b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
065b8                 | LR__0521
065b8     09 29 82 F1 | 	sub	local02, arg01
065bc     14 FB 01 F6 | 	mov	result1, local02
065c0     FD 2A 0A F6 | 	mov	local03, result1 wz
065c4     00 FA 05 A6 |  if_e	mov	result1, #0
065c8     34 02 90 AD |  if_e	jmp	#LR__0533
065cc     13 13 02 F6 | 	mov	arg01, local01
065d0     01 14 06 F6 | 	mov	arg02, #1
065d4     01 16 06 F6 | 	mov	arg03, #1
065d8     D4 24 B2 FD | 	call	#__system__Mid_S
065dc     FD 2C 02 F6 | 	mov	local04, result1
065e0                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
065e0     B5 01 00 FF 
065e4     73 14 06 F6 | 	mov	arg02, ##@LR__5736
065e8     16 13 02 F6 | 	mov	arg01, local04
065ec     50 03 B2 FD | 	call	#__system___string_cmp
065f0     00 FA 55 F2 | 	cmps	result1, #0 wc
065f4     18 00 90 CD |  if_b	jmp	#LR__0522
065f8     B5 01 00 FF 
065fc     75 14 06 F6 | 	mov	arg02, ##@LR__5737
06600     16 13 02 F6 | 	mov	arg01, local04
06604     38 03 B2 FD | 	call	#__system___string_cmp
06608     01 FA 55 F2 | 	cmps	result1, #1 wc
0660c     1C 00 90 CD |  if_b	jmp	#LR__0523
06610                 | LR__0522
06610     B5 01 00 FF 
06614     77 14 06 F6 | 	mov	arg02, ##@LR__5738
06618     16 13 02 F6 | 	mov	arg01, local04
0661c     20 03 B2 FD | 	call	#__system___string_cmp
06620     00 FA 0D F2 | 	cmp	result1, #0 wz
06624     00 FA 05 56 |  if_ne	mov	result1, #0
06628     D4 01 90 5D |  if_ne	jmp	#LR__0533
0662c                 | LR__0523
0662c                 | ' if l>2 then 
0662c     03 2A 56 F2 | 	cmps	local03, #3 wc
06630     C8 01 90 CD |  if_b	jmp	#LR__0532
06634                 | '   for i=2 to l
06634     02 2E 06 F6 | 	mov	local05, #2
06638     15 31 02 F6 | 	mov	local06, local03
0663c     01 30 06 F1 | 	add	local06, #1
06640                 | LR__0524
06640     18 2F 52 F2 | 	cmps	local05, local06 wc
06644     B4 01 90 3D |  if_ae	jmp	#LR__0531
06648     13 13 02 F6 | 	mov	arg01, local01
0664c     17 15 02 F6 | 	mov	arg02, local05
06650     01 16 06 F6 | 	mov	arg03, #1
06654     58 24 B2 FD | 	call	#__system__Mid_S
06658     FD 2C 02 F6 | 	mov	local04, result1
0665c                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
0665c     15 2F 52 F2 | 	cmps	local05, local03 wc
06660     9C 00 90 3D |  if_ae	jmp	#LR__0527
06664     B5 01 00 FF 
06668     79 14 06 F6 | 	mov	arg02, ##@LR__5739
0666c     16 13 02 F6 | 	mov	arg01, local04
06670     CC 02 B2 FD | 	call	#__system___string_cmp
06674     00 FA 55 F2 | 	cmps	result1, #0 wc
06678     18 00 90 CD |  if_b	jmp	#LR__0525
0667c     B5 01 00 FF 
06680     7B 14 06 F6 | 	mov	arg02, ##@LR__5740
06684     16 13 02 F6 | 	mov	arg01, local04
06688     B4 02 B2 FD | 	call	#__system___string_cmp
0668c     01 FA 55 F2 | 	cmps	result1, #1 wc
06690     6C 00 90 CD |  if_b	jmp	#LR__0527
06694                 | LR__0525
06694     B5 01 00 FF 
06698     7D 14 06 F6 | 	mov	arg02, ##@LR__5741
0669c     16 13 02 F6 | 	mov	arg01, local04
066a0     9C 02 B2 FD | 	call	#__system___string_cmp
066a4     00 FA 55 F2 | 	cmps	result1, #0 wc
066a8     18 00 90 CD |  if_b	jmp	#LR__0526
066ac     B5 01 00 FF 
066b0     7F 14 06 F6 | 	mov	arg02, ##@LR__5742
066b4     16 13 02 F6 | 	mov	arg01, local04
066b8     84 02 B2 FD | 	call	#__system___string_cmp
066bc     01 FA 55 F2 | 	cmps	result1, #1 wc
066c0     3C 00 90 CD |  if_b	jmp	#LR__0527
066c4                 | LR__0526
066c4     B5 01 00 FF 
066c8     81 32 06 F6 | 	mov	local07, ##@LR__5743
066cc     16 13 02 F6 | 	mov	arg01, local04
066d0     19 15 02 F6 | 	mov	arg02, local07
066d4     68 02 B2 FD | 	call	#__system___string_cmp
066d8     00 FA 0D F2 | 	cmp	result1, #0 wz
066dc     20 00 90 AD |  if_e	jmp	#LR__0527
066e0     B5 01 00 FF 
066e4     83 34 06 F6 | 	mov	local08, ##@LR__5744
066e8     16 13 02 F6 | 	mov	arg01, local04
066ec     1A 15 02 F6 | 	mov	arg02, local08
066f0     4C 02 B2 FD | 	call	#__system___string_cmp
066f4     FD 36 0A F6 | 	mov	local09, result1 wz
066f8     00 FA 05 56 |  if_ne	mov	result1, #0
066fc     00 01 90 5D |  if_ne	jmp	#LR__0533
06700                 | LR__0527
06700                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
06700     15 2F 0A F2 | 	cmp	local05, local03 wz
06704     EC 00 90 5D |  if_ne	jmp	#LR__0530
06708     B5 01 00 FF 
0670c     85 38 06 F6 | 	mov	local10, ##@LR__5745
06710     16 13 02 F6 | 	mov	arg01, local04
06714     1C 15 02 F6 | 	mov	arg02, local10
06718     24 02 B2 FD | 	call	#__system___string_cmp
0671c     FD 3A 02 F6 | 	mov	local11, result1
06720     00 3A 56 F2 | 	cmps	local11, #0 wc
06724     1C 00 90 CD |  if_b	jmp	#LR__0528
06728     B5 01 00 FF 
0672c     87 14 06 F6 | 	mov	arg02, ##@LR__5746
06730     16 13 02 F6 | 	mov	arg01, local04
06734     08 02 B2 FD | 	call	#__system___string_cmp
06738     FD 38 02 F6 | 	mov	local10, result1
0673c     01 38 56 F2 | 	cmps	local10, #1 wc
06740     B0 00 90 CD |  if_b	jmp	#LR__0530
06744                 | LR__0528
06744     B5 01 00 FF 
06748     89 14 06 F6 | 	mov	arg02, ##@LR__5747
0674c     16 13 02 F6 | 	mov	arg01, local04
06750     EC 01 B2 FD | 	call	#__system___string_cmp
06754     00 FA 55 F2 | 	cmps	result1, #0 wc
06758     1C 00 90 CD |  if_b	jmp	#LR__0529
0675c     B5 01 00 FF 
06760     8B 36 06 F6 | 	mov	local09, ##@LR__5748
06764     16 13 02 F6 | 	mov	arg01, local04
06768     1B 15 02 F6 | 	mov	arg02, local09
0676c     D0 01 B2 FD | 	call	#__system___string_cmp
06770     01 FA 55 F2 | 	cmps	result1, #1 wc
06774     7C 00 90 CD |  if_b	jmp	#LR__0530
06778                 | LR__0529
06778     B5 01 00 FF 
0677c     8D 36 06 F6 | 	mov	local09, ##@LR__5749
06780     16 13 02 F6 | 	mov	arg01, local04
06784     1B 15 02 F6 | 	mov	arg02, local09
06788     B4 01 B2 FD | 	call	#__system___string_cmp
0678c     00 FA 4D F2 | 	cmps	result1, #0 wz
06790     60 00 90 AD |  if_e	jmp	#LR__0530
06794     B5 01 00 FF 
06798     8F 34 06 F6 | 	mov	local08, ##@LR__5750
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     1A 15 02 F6 | 	mov	arg02, local08
067a4     98 01 B2 FD | 	call	#__system___string_cmp
067a8     FD 36 0A F6 | 	mov	local09, result1 wz
067ac     44 00 90 AD |  if_e	jmp	#LR__0530
067b0     B5 01 00 FF 
067b4     91 3C 06 F6 | 	mov	local12, ##@LR__5751
067b8     1E 35 02 F6 | 	mov	local08, local12
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     1A 15 02 F6 | 	mov	arg02, local08
067c4     78 01 B2 FD | 	call	#__system___string_cmp
067c8     FD 32 0A F6 | 	mov	local07, result1 wz
067cc     24 00 90 AD |  if_e	jmp	#LR__0530
067d0     B5 01 00 FF 
067d4     93 3E 06 F6 | 	mov	local13, ##@LR__5752
067d8     1F 3D 02 F6 | 	mov	local12, local13
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     1E 15 02 F6 | 	mov	arg02, local12
067e4     58 01 B2 FD | 	call	#__system___string_cmp
067e8     FD 34 0A F6 | 	mov	local08, result1 wz
067ec     00 FA 05 56 |  if_ne	mov	result1, #0
067f0     0C 00 90 5D |  if_ne	jmp	#LR__0533
067f4                 | LR__0530
067f4     01 2E 06 F1 | 	add	local05, #1
067f8     44 FE 9F FD | 	jmp	#LR__0524
067fc                 | LR__0531
067fc                 | LR__0532
067fc                 | ' return true
067fc     01 FA 65 F6 | 	neg	result1, #1
06800                 | LR__0533
06800     A7 F0 03 F6 | 	mov	ptra, fp
06804     B2 00 A0 FD | 	call	#popregs_
06808                 | _isname_ret
06808     2D 00 64 FD | 	ret
0680c                 | 
0680c                 | ' 
0680c                 | ' ' Check if the part is a number.  
0680c                 | ' 
0680c                 | ' function isnum(s as string) as boolean 
0680c                 | _isnum
0680c     13 4A 05 F6 | 	mov	COUNT_, #19
06810     A8 00 A0 FD | 	call	#pushregs_
06814     09 27 02 F6 | 	mov	local01, arg01
06818     00 28 06 F6 | 	mov	local02, #0
0681c     00 2A 06 F6 | 	mov	local03, #0
06820     13 13 02 F6 | 	mov	arg01, local01
06824     09 2D 02 F6 | 	mov	local04, arg01
06828     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
0682c                 | LR__0540
0682c     16 FB C9 FA | 	rdbyte	result1, local04 wz
06830     01 2C 06 51 |  if_ne	add	local04, #1
06834     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06838                 | LR__0541
06838     09 2D 82 F1 | 	sub	local04, arg01
0683c     16 FB 01 F6 | 	mov	result1, local04
06840     FD 2E 0A F6 | 	mov	local05, result1 wz
06844     00 FA 05 A6 |  if_e	mov	result1, #0
06848     A0 03 90 AD |  if_e	jmp	#LR__0556
0684c     13 13 02 F6 | 	mov	arg01, local01
06850     01 14 06 F6 | 	mov	arg02, #1
06854     01 16 06 F6 | 	mov	arg03, #1
06858     54 22 B2 FD | 	call	#__system__Mid_S
0685c     FD 30 02 F6 | 	mov	local06, result1
06860                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06860     B5 01 00 FF 
06864     95 14 06 F6 | 	mov	arg02, ##@LR__5753
06868     18 13 02 F6 | 	mov	arg01, local06
0686c     D0 00 B2 FD | 	call	#__system___string_cmp
06870     00 FA 55 F2 | 	cmps	result1, #0 wc
06874     1C 00 90 CD |  if_b	jmp	#LR__0542
06878     B5 01 00 FF 
0687c     97 32 06 F6 | 	mov	local07, ##@LR__5754
06880     18 13 02 F6 | 	mov	arg01, local06
06884     19 15 02 F6 | 	mov	arg02, local07
06888     B4 00 B2 FD | 	call	#__system___string_cmp
0688c     01 FA 55 F2 | 	cmps	result1, #1 wc
06890     84 00 90 CD |  if_b	jmp	#LR__0543
06894                 | LR__0542
06894     B5 01 00 FF 
06898     99 34 06 F6 | 	mov	local08, ##@LR__5755
0689c     1A 33 02 F6 | 	mov	local07, local08
068a0     18 13 02 F6 | 	mov	arg01, local06
068a4     19 15 02 F6 | 	mov	arg02, local07
068a8     94 00 B2 FD | 	call	#__system___string_cmp
068ac     00 FA 0D F2 | 	cmp	result1, #0 wz
068b0     64 00 90 AD |  if_e	jmp	#LR__0543
068b4     B5 01 00 FF 
068b8     9B 36 06 F6 | 	mov	local09, ##@LR__5756
068bc     1B 35 02 F6 | 	mov	local08, local09
068c0     18 13 02 F6 | 	mov	arg01, local06
068c4     1A 15 02 F6 | 	mov	arg02, local08
068c8     74 00 B2 FD | 	call	#__system___string_cmp
068cc     FD 32 0A F6 | 	mov	local07, result1 wz
068d0     44 00 90 AD |  if_e	jmp	#LR__0543
068d4     B5 01 00 FF 
068d8     9D 38 06 F6 | 	mov	local10, ##@LR__5757
068dc     1C 37 02 F6 | 	mov	local09, local10
068e0     18 13 02 F6 | 	mov	arg01, local06
068e4     1B 15 02 F6 | 	mov	arg02, local09
068e8     54 00 B2 FD | 	call	#__system___string_cmp
068ec     FD 34 0A F6 | 	mov	local08, result1 wz
068f0     24 00 90 AD |  if_e	jmp	#LR__0543
068f4     B5 01 00 FF 
068f8     9F 3A 06 F6 | 	mov	local11, ##@LR__5758
068fc     1D 39 02 F6 | 	mov	local10, local11
06900     18 13 02 F6 | 	mov	arg01, local06
06904     1C 15 02 F6 | 	mov	arg02, local10
06908     34 00 B2 FD | 	call	#__system___string_cmp
0690c     FD 36 0A F6 | 	mov	local09, result1 wz
06910     00 FA 05 56 |  if_ne	mov	result1, #0
06914     D4 02 90 5D |  if_ne	jmp	#LR__0556
06918                 | LR__0543
06918                 | ' if m$="." then ds=1
06918     B5 01 00 FF 
0691c     A1 14 06 F6 | 	mov	arg02, ##@LR__5759
06920     18 13 02 F6 | 	mov	arg01, local06
06924     18 00 B2 FD | 	call	#__system___string_cmp
06928     00 FA 0D F2 | 	cmp	result1, #0 wz
0692c     01 28 06 A6 |  if_e	mov	local02, #1
06930                 | ' if m$="$" then hex=1 else hex=0
06930     B5 01 00 FF 
06934     A3 14 06 F6 | 	mov	arg02, ##@LR__5760
06938     18 13 02 F6 | 	mov	arg01, local06
0693c     00 00 B2 FD | 	call	#__system___string_cmp
06940     00 FA 0D F2 | 	cmp	result1, #0 wz
06944     01 3C 06 A6 |  if_e	mov	local12, #1
06948     00 3C 06 56 |  if_ne	mov	local12, #0
0694c                 | ' if m$="%" then bin=1 else bin=0
0694c     B5 01 00 FF 
06950     A5 14 06 F6 | 	mov	arg02, ##@LR__5761
06954     18 13 02 F6 | 	mov	arg01, local06
06958     E4 FF B1 FD | 	call	#__system___string_cmp
0695c     00 FA 0D F2 | 	cmp	result1, #0 wz
06960     01 3E 06 A6 |  if_e	mov	local13, #1
06964     00 3E 06 56 |  if_ne	mov	local13, #0
06968                 | ' if l>1 then 
06968     02 2E 56 F2 | 	cmps	local05, #2 wc
0696c     78 02 90 CD |  if_b	jmp	#LR__0555
06970                 | '   for i=2 to l
06970     02 40 06 F6 | 	mov	local14, #2
06974     17 43 02 F6 | 	mov	local15, local05
06978     01 42 06 F1 | 	add	local15, #1
0697c                 | LR__0544
0697c     21 41 52 F2 | 	cmps	local14, local15 wc
06980     64 02 90 3D |  if_ae	jmp	#LR__0554
06984     13 13 02 F6 | 	mov	arg01, local01
06988     20 15 02 F6 | 	mov	arg02, local14
0698c     01 16 06 F6 | 	mov	arg03, #1
06990     1C 21 B2 FD | 	call	#__system__Mid_S
06994     FD 30 02 F6 | 	mov	local06, result1
06998     00 44 06 F6 | 	mov	local16, #0
0699c                 | '     m$=mid$(s,i,1) : b=false
0699c                 | '     if m$>="0" andalso m$<="9" then b=true  
0699c     B5 01 00 FF 
069a0     A7 14 06 F6 | 	mov	arg02, ##@LR__5762
069a4     18 13 02 F6 | 	mov	arg01, local06
069a8     94 FF B1 FD | 	call	#__system___string_cmp
069ac     00 FA 55 F2 | 	cmps	result1, #0 wc
069b0     1C 00 90 CD |  if_b	jmp	#LR__0545
069b4     B5 01 00 FF 
069b8     A9 32 06 F6 | 	mov	local07, ##@LR__5763
069bc     18 13 02 F6 | 	mov	arg01, local06
069c0     19 15 02 F6 | 	mov	arg02, local07
069c4     78 FF B1 FD | 	call	#__system___string_cmp
069c8     01 FA 55 F2 | 	cmps	result1, #1 wc
069cc     01 44 66 C6 |  if_b	neg	local16, #1
069d0                 | LR__0545
069d0                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
069d0     B5 01 00 FF 
069d4     AB 14 06 F6 | 	mov	arg02, ##@LR__5764
069d8     18 13 02 F6 | 	mov	arg01, local06
069dc     60 FF B1 FD | 	call	#__system___string_cmp
069e0     00 FA 0D F2 | 	cmp	result1, #0 wz
069e4     7C 00 90 AD |  if_e	jmp	#LR__0546
069e8     B5 01 00 FF 
069ec     AD 32 06 F6 | 	mov	local07, ##@LR__5765
069f0     18 13 02 F6 | 	mov	arg01, local06
069f4     19 15 02 F6 | 	mov	arg02, local07
069f8     44 FF B1 FD | 	call	#__system___string_cmp
069fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06a00     60 00 90 AD |  if_e	jmp	#LR__0546
06a04     B5 01 00 FF 
06a08     AF 34 06 F6 | 	mov	local08, ##@LR__5766
06a0c     1A 33 02 F6 | 	mov	local07, local08
06a10     18 13 02 F6 | 	mov	arg01, local06
06a14     19 15 02 F6 | 	mov	arg02, local07
06a18     24 FF B1 FD | 	call	#__system___string_cmp
06a1c     00 FA 0D F2 | 	cmp	result1, #0 wz
06a20     40 00 90 AD |  if_e	jmp	#LR__0546
06a24     B5 01 00 FF 
06a28     B1 36 06 F6 | 	mov	local09, ##@LR__5767
06a2c     1B 35 02 F6 | 	mov	local08, local09
06a30     18 13 02 F6 | 	mov	arg01, local06
06a34     1A 15 02 F6 | 	mov	arg02, local08
06a38     04 FF B1 FD | 	call	#__system___string_cmp
06a3c     FD 32 0A F6 | 	mov	local07, result1 wz
06a40     20 00 90 AD |  if_e	jmp	#LR__0546
06a44     B5 01 00 FF 
06a48     B3 38 06 F6 | 	mov	local10, ##@LR__5768
06a4c     1C 37 02 F6 | 	mov	local09, local10
06a50     18 13 02 F6 | 	mov	arg01, local06
06a54     1B 15 02 F6 | 	mov	arg02, local09
06a58     E4 FE B1 FD | 	call	#__system___string_cmp
06a5c     FD 34 0A F6 | 	mov	local08, result1 wz
06a60     04 00 90 5D |  if_ne	jmp	#LR__0547
06a64                 | LR__0546
06a64     01 44 66 F6 | 	neg	local16, #1
06a68                 | LR__0547
06a68                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06a68     01 3C 0E F2 | 	cmp	local12, #1 wz
06a6c     34 00 90 5D |  if_ne	jmp	#LR__0548
06a70     B5 01 00 FF 
06a74     B5 14 06 F6 | 	mov	arg02, ##@LR__5769
06a78     18 13 02 F6 | 	mov	arg01, local06
06a7c     C0 FE B1 FD | 	call	#__system___string_cmp
06a80     00 FA 55 F2 | 	cmps	result1, #0 wc
06a84     1C 00 90 CD |  if_b	jmp	#LR__0548
06a88     B5 01 00 FF 
06a8c     B7 32 06 F6 | 	mov	local07, ##@LR__5770
06a90     18 13 02 F6 | 	mov	arg01, local06
06a94     19 15 02 F6 | 	mov	arg02, local07
06a98     A4 FE B1 FD | 	call	#__system___string_cmp
06a9c     01 FA 55 F2 | 	cmps	result1, #1 wc
06aa0     01 44 66 C6 |  if_b	neg	local16, #1
06aa4                 | LR__0548
06aa4                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06aa4     01 3E 0E F2 | 	cmp	local13, #1 wz
06aa8     58 00 90 5D |  if_ne	jmp	#LR__0550
06aac     B5 01 00 FF 
06ab0     B9 14 06 F6 | 	mov	arg02, ##@LR__5771
06ab4     18 13 02 F6 | 	mov	arg01, local06
06ab8     84 FE B1 FD | 	call	#__system___string_cmp
06abc     00 FA 55 F2 | 	cmps	result1, #0 wc
06ac0     1C 00 90 CD |  if_b	jmp	#LR__0549
06ac4     B5 01 00 FF 
06ac8     BB 32 06 F6 | 	mov	local07, ##@LR__5772
06acc     18 13 02 F6 | 	mov	arg01, local06
06ad0     19 15 02 F6 | 	mov	arg02, local07
06ad4     68 FE B1 FD | 	call	#__system___string_cmp
06ad8     01 FA 55 F2 | 	cmps	result1, #1 wc
06adc     24 00 90 CD |  if_b	jmp	#LR__0550
06ae0                 | LR__0549
06ae0     B5 01 00 FF 
06ae4     BD 34 06 F6 | 	mov	local08, ##@LR__5773
06ae8     1A 33 02 F6 | 	mov	local07, local08
06aec     18 13 02 F6 | 	mov	arg01, local06
06af0     19 15 02 F6 | 	mov	arg02, local07
06af4     48 FE B1 FD | 	call	#__system___string_cmp
06af8     00 FA 0D F2 | 	cmp	result1, #0 wz
06afc     00 FA 05 56 |  if_ne	mov	result1, #0
06b00     E8 00 90 5D |  if_ne	jmp	#LR__0556
06b04                 | LR__0550
06b04                 | '     if not b then return false
06b04     22 45 22 F6 | 	not	local16, local16
06b08     00 44 0E F2 | 	cmp	local16, #0 wz
06b0c     00 FA 05 56 |  if_ne	mov	result1, #0
06b10     D8 00 90 5D |  if_ne	jmp	#LR__0556
06b14                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06b14     B5 01 00 FF 
06b18     BF 14 06 F6 | 	mov	arg02, ##@LR__5774
06b1c     18 13 02 F6 | 	mov	arg01, local06
06b20     1C FE B1 FD | 	call	#__system___string_cmp
06b24     00 FA 0D F2 | 	cmp	result1, #0 wz
06b28     3C 00 90 5D |  if_ne	jmp	#LR__0551
06b2c     20 15 02 F6 | 	mov	arg02, local14
06b30     01 14 86 F1 | 	sub	arg02, #1
06b34     13 13 02 F6 | 	mov	arg01, local01
06b38     01 16 06 F6 | 	mov	arg03, #1
06b3c     70 1F B2 FD | 	call	#__system__Mid_S
06b40     FD 12 02 F6 | 	mov	arg01, result1
06b44     60 21 B2 FD | 	call	#__system__LCase_S
06b48     FD 12 02 F6 | 	mov	arg01, result1
06b4c     B5 01 00 FF 
06b50     C1 32 06 F6 | 	mov	local07, ##@LR__5775
06b54     19 15 02 F6 | 	mov	arg02, local07
06b58     E4 FD B1 FD | 	call	#__system___string_cmp
06b5c     00 FA 0D F2 | 	cmp	result1, #0 wz
06b60     00 FA 05 56 |  if_ne	mov	result1, #0
06b64     84 00 90 5D |  if_ne	jmp	#LR__0556
06b68                 | LR__0551
06b68                 | '     if m$="." then ds+=1: if ds>1 then return false
06b68     B5 01 00 FF 
06b6c     C3 14 06 F6 | 	mov	arg02, ##@LR__5776
06b70     18 13 02 F6 | 	mov	arg01, local06
06b74     C8 FD B1 FD | 	call	#__system___string_cmp
06b78     00 FA 0D F2 | 	cmp	result1, #0 wz
06b7c     01 28 06 A1 |  if_e	add	local02, #1
06b80     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06b84     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06b88     60 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06b8c                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06b8c     B5 01 00 FF 
06b90     C5 46 06 F6 | 	mov	local17, ##@LR__5777
06b94     23 49 02 F6 | 	mov	local18, local17
06b98     18 13 02 F6 | 	mov	arg01, local06
06b9c     24 15 02 F6 | 	mov	arg02, local18
06ba0     9C FD B1 FD | 	call	#__system___string_cmp
06ba4     FD 4A 0A F6 | 	mov	local19, result1 wz
06ba8     20 00 90 AD |  if_e	jmp	#LR__0552
06bac     B5 01 00 FF 
06bb0     C7 32 06 F6 | 	mov	local07, ##@LR__5778
06bb4     19 47 02 F6 | 	mov	local17, local07
06bb8     18 13 02 F6 | 	mov	arg01, local06
06bbc     23 15 02 F6 | 	mov	arg02, local17
06bc0     7C FD B1 FD | 	call	#__system___string_cmp
06bc4     FD 48 0A F6 | 	mov	local18, result1 wz
06bc8     14 00 90 5D |  if_ne	jmp	#LR__0553
06bcc                 | LR__0552
06bcc     01 2A 06 F1 | 	add	local03, #1
06bd0     00 3C 0E F2 | 	cmp	local12, #0 wz
06bd4     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
06bd8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06bdc     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0556
06be0                 | LR__0553
06be0     01 40 06 F1 | 	add	local14, #1
06be4     94 FD 9F FD | 	jmp	#LR__0544
06be8                 | LR__0554
06be8                 | LR__0555
06be8                 | ' return true
06be8     01 FA 65 F6 | 	neg	result1, #1
06bec                 | LR__0556
06bec     A7 F0 03 F6 | 	mov	ptra, fp
06bf0     B2 00 A0 FD | 	call	#popregs_
06bf4                 | _isnum_ret
06bf4     2D 00 64 FD | 	ret
06bf8                 | 
06bf8                 | '   
06bf8                 | ' ' Check if the part is an integer number.    
06bf8                 | '   
06bf8                 | ' function isint(s as string) as boolean
06bf8                 | _isint
06bf8     0E 4A 05 F6 | 	mov	COUNT_, #14
06bfc     A8 00 A0 FD | 	call	#pushregs_
06c00     09 27 02 F6 | 	mov	local01, arg01
06c04     09 29 02 F6 | 	mov	local02, arg01
06c08     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
06c0c                 | LR__0560
06c0c     14 FB C9 FA | 	rdbyte	result1, local02 wz
06c10     01 28 06 51 |  if_ne	add	local02, #1
06c14     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
06c18                 | LR__0561
06c18     09 29 82 F1 | 	sub	local02, arg01
06c1c     14 FB 01 F6 | 	mov	result1, local02
06c20     FD 2A 0A F6 | 	mov	local03, result1 wz
06c24     00 FA 05 A6 |  if_e	mov	result1, #0
06c28     64 02 90 AD |  if_e	jmp	#LR__0574
06c2c     13 13 02 F6 | 	mov	arg01, local01
06c30     01 14 06 F6 | 	mov	arg02, #1
06c34     01 16 06 F6 | 	mov	arg03, #1
06c38     74 1E B2 FD | 	call	#__system__Mid_S
06c3c     FD 2C 02 F6 | 	mov	local04, result1
06c40                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
06c40     B5 01 00 FF 
06c44     C9 14 06 F6 | 	mov	arg02, ##@LR__5779
06c48     16 13 02 F6 | 	mov	arg01, local04
06c4c     F0 FC B1 FD | 	call	#__system___string_cmp
06c50     00 FA 55 F2 | 	cmps	result1, #0 wc
06c54     1C 00 90 CD |  if_b	jmp	#LR__0562
06c58     B5 01 00 FF 
06c5c     CB 2E 06 F6 | 	mov	local05, ##@LR__5780
06c60     16 13 02 F6 | 	mov	arg01, local04
06c64     17 15 02 F6 | 	mov	arg02, local05
06c68     D4 FC B1 FD | 	call	#__system___string_cmp
06c6c     01 FA 55 F2 | 	cmps	result1, #1 wc
06c70     64 00 90 CD |  if_b	jmp	#LR__0563
06c74                 | LR__0562
06c74     B5 01 00 FF 
06c78     CD 30 06 F6 | 	mov	local06, ##@LR__5781
06c7c     18 2F 02 F6 | 	mov	local05, local06
06c80     16 13 02 F6 | 	mov	arg01, local04
06c84     17 15 02 F6 | 	mov	arg02, local05
06c88     B4 FC B1 FD | 	call	#__system___string_cmp
06c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06c90     44 00 90 AD |  if_e	jmp	#LR__0563
06c94     B5 01 00 FF 
06c98     CF 32 06 F6 | 	mov	local07, ##@LR__5782
06c9c     19 31 02 F6 | 	mov	local06, local07
06ca0     16 13 02 F6 | 	mov	arg01, local04
06ca4     18 15 02 F6 | 	mov	arg02, local06
06ca8     94 FC B1 FD | 	call	#__system___string_cmp
06cac     FD 2E 0A F6 | 	mov	local05, result1 wz
06cb0     24 00 90 AD |  if_e	jmp	#LR__0563
06cb4     B5 01 00 FF 
06cb8     D1 34 06 F6 | 	mov	local08, ##@LR__5783
06cbc     1A 33 02 F6 | 	mov	local07, local08
06cc0     16 13 02 F6 | 	mov	arg01, local04
06cc4     19 15 02 F6 | 	mov	arg02, local07
06cc8     74 FC B1 FD | 	call	#__system___string_cmp
06ccc     FD 30 0A F6 | 	mov	local06, result1 wz
06cd0     00 FA 05 56 |  if_ne	mov	result1, #0
06cd4     B8 01 90 5D |  if_ne	jmp	#LR__0574
06cd8                 | LR__0563
06cd8                 | ' if m$="$" then hex=1 else hex=0
06cd8     B5 01 00 FF 
06cdc     D3 14 06 F6 | 	mov	arg02, ##@LR__5784
06ce0     16 13 02 F6 | 	mov	arg01, local04
06ce4     58 FC B1 FD | 	call	#__system___string_cmp
06ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
06cec     01 36 06 A6 |  if_e	mov	local09, #1
06cf0     00 36 06 56 |  if_ne	mov	local09, #0
06cf4                 | ' if m$="%" then bin=1 else bin=0
06cf4     B5 01 00 FF 
06cf8     D5 14 06 F6 | 	mov	arg02, ##@LR__5785
06cfc     16 13 02 F6 | 	mov	arg01, local04
06d00     3C FC B1 FD | 	call	#__system___string_cmp
06d04     00 FA 0D F2 | 	cmp	result1, #0 wz
06d08     01 38 06 A6 |  if_e	mov	local10, #1
06d0c     00 38 06 56 |  if_ne	mov	local10, #0
06d10                 | ' if l>1 then 
06d10     02 2A 56 F2 | 	cmps	local03, #2 wc
06d14     74 01 90 CD |  if_b	jmp	#LR__0573
06d18                 | '   for i=2 to l
06d18     02 3A 06 F6 | 	mov	local11, #2
06d1c     15 3D 02 F6 | 	mov	local12, local03
06d20     01 3C 06 F1 | 	add	local12, #1
06d24                 | LR__0564
06d24     1E 3B 52 F2 | 	cmps	local11, local12 wc
06d28     60 01 90 3D |  if_ae	jmp	#LR__0572
06d2c     13 13 02 F6 | 	mov	arg01, local01
06d30     1D 15 02 F6 | 	mov	arg02, local11
06d34     01 16 06 F6 | 	mov	arg03, #1
06d38     74 1D B2 FD | 	call	#__system__Mid_S
06d3c     FD 2C 02 F6 | 	mov	local04, result1
06d40                 | '     m$=mid$(s,i,1) 
06d40                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06d40     00 36 0E F2 | 	cmp	local09, #0 wz
06d44     50 00 90 5D |  if_ne	jmp	#LR__0566
06d48     B5 01 00 FF 
06d4c     D7 14 06 F6 | 	mov	arg02, ##@LR__5786
06d50     16 13 02 F6 | 	mov	arg01, local04
06d54     E8 FB B1 FD | 	call	#__system___string_cmp
06d58     00 FA 55 F2 | 	cmps	result1, #0 wc
06d5c     18 00 90 CD |  if_b	jmp	#LR__0565
06d60     B5 01 00 FF 
06d64     D9 14 06 F6 | 	mov	arg02, ##@LR__5787
06d68     16 13 02 F6 | 	mov	arg01, local04
06d6c     D0 FB B1 FD | 	call	#__system___string_cmp
06d70     01 FA 55 F2 | 	cmps	result1, #1 wc
06d74     20 00 90 CD |  if_b	jmp	#LR__0566
06d78                 | LR__0565
06d78     B5 01 00 FF 
06d7c     DB 30 06 F6 | 	mov	local06, ##@LR__5788
06d80     16 13 02 F6 | 	mov	arg01, local04
06d84     18 15 02 F6 | 	mov	arg02, local06
06d88     B4 FB B1 FD | 	call	#__system___string_cmp
06d8c     00 FA 0D F2 | 	cmp	result1, #0 wz
06d90     00 FA 05 56 |  if_ne	mov	result1, #0
06d94     F8 00 90 5D |  if_ne	jmp	#LR__0574
06d98                 | LR__0566
06d98                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06d98     01 36 0E F2 | 	cmp	local09, #1 wz
06d9c     90 00 90 5D |  if_ne	jmp	#LR__0569
06da0     B5 01 00 FF 
06da4     DD 14 06 F6 | 	mov	arg02, ##@LR__5789
06da8     16 13 02 F6 | 	mov	arg01, local04
06dac     90 FB B1 FD | 	call	#__system___string_cmp
06db0     00 FA 55 F2 | 	cmps	result1, #0 wc
06db4     1C 00 90 CD |  if_b	jmp	#LR__0567
06db8     B5 01 00 FF 
06dbc     DF 14 06 F6 | 	mov	arg02, ##@LR__5790
06dc0     16 13 02 F6 | 	mov	arg01, local04
06dc4     78 FB B1 FD | 	call	#__system___string_cmp
06dc8     FD 3E 02 F6 | 	mov	local13, result1
06dcc     01 3E 56 F2 | 	cmps	local13, #1 wc
06dd0     5C 00 90 CD |  if_b	jmp	#LR__0569
06dd4                 | LR__0567
06dd4     B5 01 00 FF 
06dd8     E1 2E 06 F6 | 	mov	local05, ##@LR__5791
06ddc     16 13 02 F6 | 	mov	arg01, local04
06de0     17 15 02 F6 | 	mov	arg02, local05
06de4     58 FB B1 FD | 	call	#__system___string_cmp
06de8     FD 40 02 F6 | 	mov	local14, result1
06dec     00 40 56 F2 | 	cmps	local14, #0 wc
06df0     1C 00 90 CD |  if_b	jmp	#LR__0568
06df4     B5 01 00 FF 
06df8     E3 32 06 F6 | 	mov	local07, ##@LR__5792
06dfc     16 13 02 F6 | 	mov	arg01, local04
06e00     19 15 02 F6 | 	mov	arg02, local07
06e04     38 FB B1 FD | 	call	#__system___string_cmp
06e08     01 FA 55 F2 | 	cmps	result1, #1 wc
06e0c     20 00 90 CD |  if_b	jmp	#LR__0569
06e10                 | LR__0568
06e10     B5 01 00 FF 
06e14     E5 34 06 F6 | 	mov	local08, ##@LR__5793
06e18     16 13 02 F6 | 	mov	arg01, local04
06e1c     1A 15 02 F6 | 	mov	arg02, local08
06e20     1C FB B1 FD | 	call	#__system___string_cmp
06e24     00 FA 0D F2 | 	cmp	result1, #0 wz
06e28     00 FA 05 56 |  if_ne	mov	result1, #0
06e2c     60 00 90 5D |  if_ne	jmp	#LR__0574
06e30                 | LR__0569
06e30                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
06e30     01 38 0E F2 | 	cmp	local10, #1 wz
06e34     4C 00 90 5D |  if_ne	jmp	#LR__0571
06e38     B5 01 00 FF 
06e3c     E7 14 06 F6 | 	mov	arg02, ##@LR__5794
06e40     16 13 02 F6 | 	mov	arg01, local04
06e44     F8 FA B1 FD | 	call	#__system___string_cmp
06e48     00 FA 55 F2 | 	cmps	result1, #0 wc
06e4c     18 00 90 CD |  if_b	jmp	#LR__0570
06e50     B5 01 00 FF 
06e54     E9 14 06 F6 | 	mov	arg02, ##@LR__5795
06e58     16 13 02 F6 | 	mov	arg01, local04
06e5c     E0 FA B1 FD | 	call	#__system___string_cmp
06e60     01 FA 55 F2 | 	cmps	result1, #1 wc
06e64     1C 00 90 CD |  if_b	jmp	#LR__0571
06e68                 | LR__0570
06e68     B5 01 00 FF 
06e6c     EB 14 06 F6 | 	mov	arg02, ##@LR__5796
06e70     16 13 02 F6 | 	mov	arg01, local04
06e74     C8 FA B1 FD | 	call	#__system___string_cmp
06e78     00 FA 0D F2 | 	cmp	result1, #0 wz
06e7c     00 FA 05 56 |  if_ne	mov	result1, #0
06e80     0C 00 90 5D |  if_ne	jmp	#LR__0574
06e84                 | LR__0571
06e84     01 3A 06 F1 | 	add	local11, #1
06e88     98 FE 9F FD | 	jmp	#LR__0564
06e8c                 | LR__0572
06e8c                 | LR__0573
06e8c                 | ' return true
06e8c     01 FA 65 F6 | 	neg	result1, #1
06e90                 | LR__0574
06e90     A7 F0 03 F6 | 	mov	ptra, fp
06e94     B2 00 A0 FD | 	call	#popregs_
06e98                 | _isint_ret
06e98     2D 00 64 FD | 	ret
06e9c                 | 
06e9c                 | ' 
06e9c                 | ' ' Check if the part is a positive decimal number.  
06e9c                 | ' 
06e9c                 | ' function isdec(s as string) as boolean
06e9c                 | _isdec
06e9c     05 4A 05 F6 | 	mov	COUNT_, #5
06ea0     A8 00 A0 FD | 	call	#pushregs_
06ea4     09 27 02 F6 | 	mov	local01, arg01
06ea8     09 29 02 F6 | 	mov	local02, arg01
06eac     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06eb0                 | LR__0580
06eb0     14 FB C9 FA | 	rdbyte	result1, local02 wz
06eb4     01 28 06 51 |  if_ne	add	local02, #1
06eb8     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06ebc                 | LR__0581
06ebc     09 29 82 F1 | 	sub	local02, arg01
06ec0     14 FB 01 F6 | 	mov	result1, local02
06ec4     FD 28 0A F6 | 	mov	local02, result1 wz
06ec8     00 FA 05 A6 |  if_e	mov	result1, #0
06ecc     80 00 90 AD |  if_e	jmp	#LR__0586
06ed0                 | ' for i=1 to l
06ed0     01 2A 06 F6 | 	mov	local03, #1
06ed4     14 2D 02 F6 | 	mov	local04, local02
06ed8     01 2C 06 F1 | 	add	local04, #1
06edc                 | LR__0582
06edc     16 2B 52 F2 | 	cmps	local03, local04 wc
06ee0     68 00 90 3D |  if_ae	jmp	#LR__0585
06ee4     13 13 02 F6 | 	mov	arg01, local01
06ee8     15 15 02 F6 | 	mov	arg02, local03
06eec     01 16 06 F6 | 	mov	arg03, #1
06ef0     BC 1B B2 FD | 	call	#__system__Mid_S
06ef4     FD 2E 02 F6 | 	mov	local05, result1
06ef8                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06ef8     B5 01 00 FF 
06efc     ED 14 06 F6 | 	mov	arg02, ##@LR__5797
06f00     17 13 02 F6 | 	mov	arg01, local05
06f04     38 FA B1 FD | 	call	#__system___string_cmp
06f08     00 FA 55 F2 | 	cmps	result1, #0 wc
06f0c     18 00 90 CD |  if_b	jmp	#LR__0583
06f10     B5 01 00 FF 
06f14     EF 14 06 F6 | 	mov	arg02, ##@LR__5798
06f18     17 13 02 F6 | 	mov	arg01, local05
06f1c     20 FA B1 FD | 	call	#__system___string_cmp
06f20     01 FA 55 F2 | 	cmps	result1, #1 wc
06f24     1C 00 90 CD |  if_b	jmp	#LR__0584
06f28                 | LR__0583
06f28     B5 01 00 FF 
06f2c     F1 14 06 F6 | 	mov	arg02, ##@LR__5799
06f30     17 13 02 F6 | 	mov	arg01, local05
06f34     08 FA B1 FD | 	call	#__system___string_cmp
06f38     00 FA 0D F2 | 	cmp	result1, #0 wz
06f3c     00 FA 05 56 |  if_ne	mov	result1, #0
06f40     0C 00 90 5D |  if_ne	jmp	#LR__0586
06f44                 | LR__0584
06f44     01 2A 06 F1 | 	add	local03, #1
06f48     90 FF 9F FD | 	jmp	#LR__0582
06f4c                 | LR__0585
06f4c                 | ' return true
06f4c     01 FA 65 F6 | 	neg	result1, #1
06f50                 | LR__0586
06f50     A7 F0 03 F6 | 	mov	ptra, fp
06f54     B2 00 A0 FD | 	call	#popregs_
06f58                 | _isdec_ret
06f58     2D 00 64 FD | 	ret
06f5c                 | 
06f5c                 | ' 
06f5c                 | ' ' Check if the part is a string.  
06f5c                 | ' 
06f5c                 | ' function isstring(s as string) as boolean
06f5c                 | _isstring
06f5c     01 4A 05 F6 | 	mov	COUNT_, #1
06f60     A8 00 A0 FD | 	call	#pushregs_
06f64                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06f64     09 27 02 F6 | 	mov	local01, arg01
06f68     01 14 06 F6 | 	mov	arg02, #1
06f6c     28 1A B2 FD | 	call	#__system__Left_S
06f70     FD 12 02 F6 | 	mov	arg01, result1
06f74     B5 01 00 FF 
06f78     F3 14 06 F6 | 	mov	arg02, ##@LR__5800
06f7c     C0 F9 B1 FD | 	call	#__system___string_cmp
06f80     00 FA 4D F2 | 	cmps	result1, #0 wz
06f84     28 00 90 5D |  if_ne	jmp	#LR__0590
06f88     13 13 02 F6 | 	mov	arg01, local01
06f8c     01 14 06 F6 | 	mov	arg02, #1
06f90     8C 1A B2 FD | 	call	#__system__Right_S
06f94     FD 12 02 F6 | 	mov	arg01, result1
06f98     B5 01 00 FF 
06f9c     F5 14 06 F6 | 	mov	arg02, ##@LR__5801
06fa0     9C F9 B1 FD | 	call	#__system___string_cmp
06fa4     00 FA 4D F2 | 	cmps	result1, #0 wz
06fa8     01 FA 65 A6 |  if_e	neg	result1, #1
06fac     04 00 90 AD |  if_e	jmp	#LR__0591
06fb0                 | LR__0590
06fb0     00 FA 05 F6 | 	mov	result1, #0
06fb4                 | LR__0591
06fb4     A7 F0 03 F6 | 	mov	ptra, fp
06fb8     B2 00 A0 FD | 	call	#popregs_
06fbc                 | _isstring_ret
06fbc     2D 00 64 FD | 	ret
06fc0                 | 
06fc0                 | ' 
06fc0                 | ' ' getnoteval. Returns the frequency of note token
06fc0                 | ' 
06fc0                 | ' function getnoteval(token) as single
06fc0                 | _getnoteval
06fc0     02 4A 05 F6 | 	mov	COUNT_, #2
06fc4     A8 00 A0 FD | 	call	#pushregs_
06fc8     01 00 00 FF 
06fcc     00 13 86 F1 | 	sub	arg01, ##768
06fd0     09 15 52 F6 | 	abs	arg02, arg01 wc
06fd4     0C 14 16 FD | 	qdiv	arg02, #12
06fd8     14 00 00 FF 
06fdc     D8 E4 05 F1 | 	add	objptr, ##10456
06fe0     19 14 62 FD | 	getqy	arg02
06fe4     0A 15 82 F6 | 	negc	arg02, arg02
06fe8     02 14 66 F0 | 	shl	arg02, #2
06fec     F2 14 02 F1 | 	add	arg02, objptr
06ff0     0A 27 02 FB | 	rdlong	local01, arg02
06ff4     09 15 52 F6 | 	abs	arg02, arg01 wc
06ff8     0C 14 16 FD | 	qdiv	arg02, #12
06ffc     14 00 00 FF 
07000     D8 E4 85 F1 | 	sub	objptr, ##10456
07004     01 12 06 F6 | 	mov	arg01, #1
07008                 | ' noteexp=1+(note/12) 
07008                 | ' return (2.0^noteexp)*notebase
07008     18 14 62 FD | 	getqx	arg02
0700c     0A 13 82 F3 | 	sumc	arg01, arg02
07010     09 13 52 F6 | 	abs	arg01, arg01 wc
07014     1F 28 C6 C9 |  if_b	decod	local02, #31
07018     00 28 06 36 |  if_ae	mov	local02, #0
0701c     70 23 B2 FD | 	call	#__system___float_fromuns
07020     14 FB 61 F5 | 	xor	result1, local02
07024     FD 14 02 F6 | 	mov	arg02, result1
07028     1E 12 C6 F9 | 	decod	arg01, #30
0702c     6C 36 B2 FD | 	call	#__system____builtin_powf
07030     FD 12 02 F6 | 	mov	arg01, result1
07034     13 15 02 F6 | 	mov	arg02, local01
07038     58 27 B2 FD | 	call	#__system___float_mul
0703c     A7 F0 03 F6 | 	mov	ptra, fp
07040     B2 00 A0 FD | 	call	#popregs_
07044                 | _getnoteval_ret
07044     2D 00 64 FD | 	ret
07048                 | 
07048                 | ' 
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' 
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' '
07048                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
07048                 | ' '
07048                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
07048                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
07048                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
07048                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
07048                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
07048                 | ' ' 
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' 
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' ' Helper functions to manage program lines
07048                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
07048                 | ' 
07048                 | ' '----- delete a line from a program
07048                 | ' 
07048                 | ' function deleteline(aline as ulong) as integer
07048                 | _deleteline
07048     02 4A 05 F6 | 	mov	COUNT_, #2
0704c     A8 00 A0 FD | 	call	#pushregs_
07050     2C F0 07 F1 | 	add	ptra, #44
07054     04 4E 05 F1 | 	add	fp, #4
07058     A7 12 62 FC | 	wrlong	arg01, fp
0705c     4A 00 00 FF 
07060     88 E4 05 F1 | 	add	objptr, ##38024
07064     F2 26 02 FB | 	rdlong	local01, objptr
07068     0C 4E 05 F1 | 	add	fp, #12
0706c     A7 26 62 FC | 	wrlong	local01, fp
07070     10 4E 85 F1 | 	sub	fp, #16
07074                 | ' 
07074                 | ' searchptr=programstart
07074                 | ' do
07074     3E 00 00 FF 
07078     BC E5 85 F1 | 	sub	objptr, ##32188
0707c                 | LR__0600
0707c     14 4E 05 F1 | 	add	fp, #20
07080     A7 12 02 F6 | 	mov	arg01, fp
07084     04 4E 85 F1 | 	sub	fp, #4
07088     A7 14 02 FB | 	rdlong	arg02, fp
0708c     10 4E 85 F1 | 	sub	fp, #16
07090     18 16 06 F6 | 	mov	arg03, #24
07094     F8 EB B1 FD | 	call	#_psram_spin2_read1
07098     10 4E 05 F1 | 	add	fp, #16
0709c     A7 26 02 FB | 	rdlong	local01, fp
070a0     08 4E 85 F1 | 	sub	fp, #8
070a4     A7 26 62 FC | 	wrlong	local01, fp
070a8     20 4E 05 F1 | 	add	fp, #32
070ac     A7 26 02 FB | 	rdlong	local01, fp
070b0     18 4E 85 F1 | 	sub	fp, #24
070b4     A7 26 62 FC | 	wrlong	local01, fp
070b8     04 4E 05 F1 | 	add	fp, #4
070bc     A7 26 02 FB | 	rdlong	local01, fp
070c0     10 4E 85 F1 | 	sub	fp, #16
070c4     A7 16 02 FB | 	rdlong	arg03, fp
070c8     04 4E 85 F1 | 	sub	fp, #4
070cc     0B 27 12 F2 | 	cmp	local01, arg03 wc
070d0     28 4E 05 C1 |  if_b	add	fp, #40
070d4     A7 28 02 CB |  if_b	rdlong	local02, fp
070d8     28 4E 85 C1 |  if_b	sub	fp, #40
070dc     FF FF 3F CF 
070e0     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
070e4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
070e8     0B 00 00 FF 
070ec     CC E4 85 F1 | 	sub	objptr, ##5836
070f0                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
070f0     14 4E 05 F1 | 	add	fp, #20
070f4     A7 26 02 FB | 	rdlong	local01, fp
070f8     10 4E 85 F1 | 	sub	fp, #16
070fc     A7 28 02 FB | 	rdlong	local02, fp
07100     04 4E 85 F1 | 	sub	fp, #4
07104     14 27 0A F2 | 	cmp	local01, local02 wz
07108     01 FA 65 56 |  if_ne	neg	result1, #1
0710c     34 02 90 5D |  if_ne	jmp	#LR__0605
07110     08 4E 05 F1 | 	add	fp, #8
07114     A7 12 02 FB | 	rdlong	arg01, fp
07118     08 4E 85 F1 | 	sub	fp, #8
0711c     01 14 66 F6 | 	neg	arg02, #1
07120     A4 BF B1 FD | 	call	#_pslpoke
07124                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
07124                 | ' 
07124                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
07124     28 4E 05 F1 | 	add	fp, #40
07128     A7 26 02 FB | 	rdlong	local01, fp
0712c     28 4E 85 F1 | 	sub	fp, #40
07130     FF FF 3F FF 
07134     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07138     24 4E 05 A1 |  if_e	add	fp, #36
0713c     A7 28 02 AB |  if_e	rdlong	local02, fp
07140     24 4E 85 A1 |  if_e	sub	fp, #36
07144     FF FF 7F AF 
07148     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
0714c     88 00 90 5D |  if_ne	jmp	#LR__0601
07150     4A 00 00 FF 
07154     88 E4 05 F1 | 	add	objptr, ##38024
07158     00 04 80 FF 
0715c     F2 00 68 FC | 	wrlong	##524288, objptr
07160     07 00 00 FF 
07164     2C E4 85 F1 | 	sub	objptr, ##3628
07168     00 04 80 FF 
0716c     F2 00 68 FC | 	wrlong	##524288, objptr
07170     07 00 00 FF 
07174     30 E4 05 F1 | 	add	objptr, ##3632
07178     F2 00 68 FC | 	wrlong	#0, objptr
0717c     04 E4 05 F1 | 	add	objptr, #4
07180     FF FF FF FF 
07184     F2 FE 6B FC | 	wrlong	##-1, objptr
07188     4A 00 00 FF 
0718c     90 E4 85 F1 | 	sub	objptr, ##38032
07190     00 12 06 F6 | 	mov	arg01, #0
07194     01 14 66 F6 | 	neg	arg02, #1
07198     2C BF B1 FD | 	call	#_pslpoke
0719c     10 12 06 F6 | 	mov	arg01, #16
071a0     01 14 66 F6 | 	neg	arg02, #1
071a4     20 BF B1 FD | 	call	#_pslpoke
071a8     14 12 06 F6 | 	mov	arg01, #20
071ac     1E 14 CE F9 | 	bmask	arg02, #30
071b0     14 BF B1 FD | 	call	#_pslpoke
071b4     50 00 00 FF 
071b8     B8 E4 05 F1 | 	add	objptr, ##41144
071bc     00 04 80 FF 
071c0     F2 00 68 FC | 	wrlong	##524288, objptr
071c4     04 E4 05 F1 | 	add	objptr, #4
071c8     00 04 80 FF 
071cc     F2 00 68 FC | 	wrlong	##524288, objptr
071d0     50 00 00 FF 
071d4     BC E4 85 F1 | 	sub	objptr, ##41148
071d8                 | LR__0601
071d8                 | ' 
071d8                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
071d8     28 4E 05 F1 | 	add	fp, #40
071dc     A7 26 02 FB | 	rdlong	local01, fp
071e0     28 4E 85 F1 | 	sub	fp, #40
071e4     FF FF 3F FF 
071e8     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
071ec     74 00 90 5D |  if_ne	jmp	#LR__0602
071f0     24 4E 05 F1 | 	add	fp, #36
071f4     A7 28 02 FB | 	rdlong	local02, fp
071f8     24 4E 85 F1 | 	sub	fp, #36
071fc     FF FF 7F FF 
07200     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07204     5C 00 90 AD |  if_e	jmp	#LR__0602
07208     24 4E 05 F1 | 	add	fp, #36
0720c     A7 12 02 FB | 	rdlong	arg01, fp
07210     24 4E 85 F1 | 	sub	fp, #36
07214     14 12 06 F1 | 	add	arg01, #20
07218     1E 14 CE F9 | 	bmask	arg02, #30
0721c     A8 BE B1 FD | 	call	#_pslpoke
07220     24 4E 05 F1 | 	add	fp, #36
07224     A7 26 02 FB | 	rdlong	local01, fp
07228     4A 00 00 FF 
0722c     90 E4 05 F1 | 	add	objptr, ##38032
07230     F2 26 62 FC | 	wrlong	local01, objptr
07234     4A 00 00 FF 
07238     90 E4 85 F1 | 	sub	objptr, ##38032
0723c     A7 12 02 FB | 	rdlong	arg01, fp
07240     24 4E 85 F1 | 	sub	fp, #36
07244     B0 BF B1 FD | 	call	#_pslpeek
07248     4A 00 00 FF 
0724c     8C E4 05 F1 | 	add	objptr, ##38028
07250     F2 FA 61 FC | 	wrlong	result1, objptr
07254     4A 00 00 FF 
07258     8C E4 85 F1 | 	sub	objptr, ##38028
0725c                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
0725c                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
0725c                 | '   lastline=pslpeek(header(4))
0725c                 | '   return 0
0725c     00 FA 05 F6 | 	mov	result1, #0
07260     E0 00 90 FD | 	jmp	#LR__0605
07264                 | LR__0602
07264                 | ' 
07264                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
07264     28 4E 05 F1 | 	add	fp, #40
07268     A7 26 02 FB | 	rdlong	local01, fp
0726c     28 4E 85 F1 | 	sub	fp, #40
07270     FF FF 3F FF 
07274     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
07278     58 00 90 AD |  if_e	jmp	#LR__0603
0727c     24 4E 05 F1 | 	add	fp, #36
07280     A7 28 02 FB | 	rdlong	local02, fp
07284     24 4E 85 F1 | 	sub	fp, #36
07288     FF FF 7F FF 
0728c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
07290     40 00 90 5D |  if_ne	jmp	#LR__0603
07294     28 4E 05 F1 | 	add	fp, #40
07298     A7 12 02 FB | 	rdlong	arg01, fp
0729c     28 4E 85 F1 | 	sub	fp, #40
072a0     10 12 06 F1 | 	add	arg01, #16
072a4     01 14 66 F6 | 	neg	arg02, #1
072a8     1C BE B1 FD | 	call	#_pslpoke
072ac     28 4E 05 F1 | 	add	fp, #40
072b0     A7 26 02 FB | 	rdlong	local01, fp
072b4     28 4E 85 F1 | 	sub	fp, #40
072b8     4A 00 00 FF 
072bc     88 E4 05 F1 | 	add	objptr, ##38024
072c0     F2 26 62 FC | 	wrlong	local01, objptr
072c4     4A 00 00 FF 
072c8     88 E4 85 F1 | 	sub	objptr, ##38024
072cc                 | ' '   print "deleted first line"
072cc                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
072cc                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
072cc                 | '   return 0
072cc     00 FA 05 F6 | 	mov	result1, #0
072d0     70 00 90 FD | 	jmp	#LR__0605
072d4                 | LR__0603
072d4                 | ' 
072d4                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
072d4     28 4E 05 F1 | 	add	fp, #40
072d8     A7 26 02 FB | 	rdlong	local01, fp
072dc     28 4E 85 F1 | 	sub	fp, #40
072e0     FF FF 3F FF 
072e4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
072e8     24 4E 05 51 |  if_ne	add	fp, #36
072ec     A7 28 02 5B |  if_ne	rdlong	local02, fp
072f0     24 4E 85 51 |  if_ne	sub	fp, #36
072f4     FF FF 7F 5F 
072f8     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
072fc     40 00 90 AD |  if_e	jmp	#LR__0604
07300     28 4E 05 F1 | 	add	fp, #40
07304     A7 12 02 FB | 	rdlong	arg01, fp
07308     10 12 06 F1 | 	add	arg01, #16
0730c     04 4E 85 F1 | 	sub	fp, #4
07310     A7 14 02 FB | 	rdlong	arg02, fp
07314     24 4E 85 F1 | 	sub	fp, #36
07318     AC BD B1 FD | 	call	#_pslpoke
0731c     24 4E 05 F1 | 	add	fp, #36
07320     A7 12 02 FB | 	rdlong	arg01, fp
07324     14 12 06 F1 | 	add	arg01, #20
07328     04 4E 05 F1 | 	add	fp, #4
0732c     A7 14 02 FB | 	rdlong	arg02, fp
07330     28 4E 85 F1 | 	sub	fp, #40
07334     90 BD B1 FD | 	call	#_pslpoke
07338                 | '    pslpoke(header(5)+16,header(4))  
07338                 | '    pslpoke(header(4)+20, header(5))
07338                 | '    return 0
07338     00 FA 05 F6 | 	mov	result1, #0
0733c     04 00 90 FD | 	jmp	#LR__0605
07340                 | LR__0604
07340     00 FA 05 F6 | 	mov	result1, #0
07344                 | LR__0605
07344     A7 F0 03 F6 | 	mov	ptra, fp
07348     B2 00 A0 FD | 	call	#popregs_
0734c                 | _deleteline_ret
0734c     2D 00 64 FD | 	ret
07350                 | 
07350                 | ' 
07350                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
07350                 | ' 
07350                 | ' sub save_line
07350                 | _save_line
07350     03 4A 05 F6 | 	mov	COUNT_, #3
07354     A8 00 A0 FD | 	call	#pushregs_
07358     4A 00 00 FF 
0735c     7C E4 05 F1 | 	add	objptr, ##38012
07360     F2 16 02 FB | 	rdlong	arg03, objptr
07364     01 16 06 F1 | 	add	arg03, #1
07368     05 00 00 FF 
0736c     18 E4 85 F1 | 	sub	objptr, ##2584
07370     F2 14 02 FB | 	rdlong	arg02, objptr
07374     0B 15 02 FD | 	qmul	arg02, arg03
07378     0E 00 00 FF 
0737c     44 E4 85 F1 | 	sub	objptr, ##7236
07380     F2 12 02 FB | 	rdlong	arg01, objptr
07384     37 00 00 FF 
07388     20 E4 85 F1 | 	sub	objptr, ##28192
0738c     09 27 02 F6 | 	mov	local01, arg01
07390     18 28 62 FD | 	getqx	local02
07394     97 06 48 FB | 	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
07398                 | LR__0610
07398     13 FB C9 FA | 	rdbyte	result1, local01 wz
0739c     01 26 06 51 |  if_ne	add	local01, #1
073a0     F4 FF 9F 5D |  if_ne	jmp	#LR__0610
073a4                 | LR__0611
073a4     09 27 82 F1 | 	sub	local01, arg01
073a8     03 26 CE F7 | 	test	local01, #3 wz
073ac     02 26 46 50 |  if_ne	shr	local01, #2
073b0     01 26 06 51 |  if_ne	add	local01, #1
073b4     02 26 66 50 |  if_ne	shl	local01, #2
073b8     14 2B 02 F6 | 	mov	local03, local02
073bc     13 2B 02 F1 | 	add	local03, local01
073c0     43 00 00 FF 
073c4     5C E4 05 F1 | 	add	objptr, ##34396
073c8     F2 16 02 FB | 	rdlong	arg03, objptr
073cc     14 17 02 F1 | 	add	arg03, local02
073d0     04 00 00 FF 
073d4     28 E4 05 F1 | 	add	objptr, ##2088
073d8     F2 16 62 FC | 	wrlong	arg03, objptr
073dc     04 E4 05 F1 | 	add	objptr, #4
073e0     F2 26 62 FC | 	wrlong	local01, objptr
073e4     0C E4 85 F1 | 	sub	objptr, #12
073e8     F2 12 02 F6 | 	mov	arg01, objptr
073ec     04 00 00 FF 
073f0     20 E4 85 F1 | 	sub	objptr, ##2080
073f4     F2 14 02 FB | 	rdlong	arg02, objptr
073f8     14 17 02 F6 | 	mov	arg03, local02
073fc     37 00 00 FF 
07400     90 E5 85 F1 | 	sub	objptr, ##28560
07404     24 E9 B1 FD | 	call	#_psram_spin2_write
07408     2B 00 00 FF 
0740c     54 E5 05 F1 | 	add	objptr, ##22356
07410     F2 12 02 FB | 	rdlong	arg01, objptr
07414     0C 00 00 FF 
07418     3C E4 05 F1 | 	add	objptr, ##6204
0741c     F2 14 02 FB | 	rdlong	arg02, objptr
07420     14 15 02 F1 | 	add	arg02, local02
07424     13 17 02 F6 | 	mov	arg03, local01
07428     37 00 00 FF 
0742c     90 E5 85 F1 | 	sub	objptr, ##28560
07430     F8 E8 B1 FD | 	call	#_psram_spin2_write
07434     37 00 00 FF 
07438     90 E5 05 F1 | 	add	objptr, ##28560
0743c     F2 26 02 FB | 	rdlong	local01, objptr
07440     15 27 02 F1 | 	add	local01, local03
07444     F2 26 62 FC | 	wrlong	local01, objptr
07448     43 00 00 FF 
0744c     5C E4 85 F1 | 	sub	objptr, ##34396
07450     A7 F0 03 F6 | 	mov	ptra, fp
07454     B2 00 A0 FD | 	call	#popregs_
07458                 | _save_line_ret
07458     2D 00 64 FD | 	ret
0745c                 | 
0745c                 | ' 
0745c                 | ' '----- Insert a new line into the middle of the program
0745c                 | ' 
0745c                 | ' function insertline(aline as ulong) as integer
0745c                 | _insertline
0745c     02 4A 05 F6 | 	mov	COUNT_, #2
07460     A8 00 A0 FD | 	call	#pushregs_
07464     28 F0 07 F1 | 	add	ptra, #40
07468     04 4E 05 F1 | 	add	fp, #4
0746c     A7 12 62 FC | 	wrlong	arg01, fp
07470     4A 00 00 FF 
07474     88 E4 05 F1 | 	add	objptr, ##38024
07478     F2 26 02 FB | 	rdlong	local01, objptr
0747c     04 4E 05 F1 | 	add	fp, #4
07480     A7 26 62 FC | 	wrlong	local01, fp
07484     08 4E 85 F1 | 	sub	fp, #8
07488                 | ' 
07488                 | ' do
07488     3E 00 00 FF 
0748c     BC E5 85 F1 | 	sub	objptr, ##32188
07490                 | LR__0620
07490     10 4E 05 F1 | 	add	fp, #16
07494     A7 12 02 F6 | 	mov	arg01, fp
07498     08 4E 85 F1 | 	sub	fp, #8
0749c     A7 14 02 FB | 	rdlong	arg02, fp
074a0     08 4E 85 F1 | 	sub	fp, #8
074a4     18 16 06 F6 | 	mov	arg03, #24
074a8     E4 E7 B1 FD | 	call	#_psram_spin2_read1
074ac     08 4E 05 F1 | 	add	fp, #8
074b0     A7 26 02 FB | 	rdlong	local01, fp
074b4     04 4E 05 F1 | 	add	fp, #4
074b8     A7 26 62 FC | 	wrlong	local01, fp
074bc     18 4E 05 F1 | 	add	fp, #24
074c0     A7 26 02 FB | 	rdlong	local01, fp
074c4     1C 4E 85 F1 | 	sub	fp, #28
074c8     A7 26 62 FC | 	wrlong	local01, fp
074cc     08 4E 05 F1 | 	add	fp, #8
074d0     A7 26 02 FB | 	rdlong	local01, fp
074d4     0C 4E 85 F1 | 	sub	fp, #12
074d8     A7 16 02 FB | 	rdlong	arg03, fp
074dc     04 4E 85 F1 | 	sub	fp, #4
074e0     0B 27 12 F2 | 	cmp	local01, arg03 wc
074e4     24 4E 05 C1 |  if_b	add	fp, #36
074e8     A7 28 02 CB |  if_b	rdlong	local02, fp
074ec     24 4E 85 C1 |  if_b	sub	fp, #36
074f0     FF FF 3F CF 
074f4     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
074f8     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0620
074fc     0B 00 00 FF 
07500     CC E4 85 F1 | 	sub	objptr, ##5836
07504                 | ' 
07504                 | ' if header(0)=aline then return -1 				' delete it first
07504     10 4E 05 F1 | 	add	fp, #16
07508     A7 26 02 FB | 	rdlong	local01, fp
0750c     0C 4E 85 F1 | 	sub	fp, #12
07510     A7 28 02 FB | 	rdlong	local02, fp
07514     04 4E 85 F1 | 	sub	fp, #4
07518     14 27 0A F2 | 	cmp	local01, local02 wz
0751c     01 FA 65 A6 |  if_e	neg	result1, #1
07520     48 01 90 AD |  if_e	jmp	#LR__0623
07524                 | ' if header(0)<aline then return -2 				' end of program reached
07524     10 4E 05 F1 | 	add	fp, #16
07528     A7 26 02 FB | 	rdlong	local01, fp
0752c     0C 4E 85 F1 | 	sub	fp, #12
07530     A7 16 02 FB | 	rdlong	arg03, fp
07534     04 4E 85 F1 | 	sub	fp, #4
07538     0B 27 12 F2 | 	cmp	local01, arg03 wc
0753c     02 FA 65 C6 |  if_b	neg	result1, #2
07540     28 01 90 CD |  if_b	jmp	#LR__0623
07544                 | ' 
07544                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07544     20 4E 05 F1 | 	add	fp, #32
07548     A7 26 02 FB | 	rdlong	local01, fp
0754c     20 4E 85 F1 | 	sub	fp, #32
07550     FF FF 7F FF 
07554     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07558     78 00 90 5D |  if_ne	jmp	#LR__0621
0755c     43 00 00 FF 
07560     5C E4 05 F1 | 	add	objptr, ##34396
07564     F2 26 02 FB | 	rdlong	local01, objptr
07568     07 00 00 FF 
0756c     2C E4 05 F1 | 	add	objptr, ##3628
07570     F2 26 62 FC | 	wrlong	local01, objptr
07574     0C 4E 05 F1 | 	add	fp, #12
07578     A7 12 02 FB | 	rdlong	arg01, fp
0757c     0C 4E 85 F1 | 	sub	fp, #12
07580     10 12 06 F1 | 	add	arg01, #16
07584     07 00 00 FF 
07588     2C E4 85 F1 | 	sub	objptr, ##3628
0758c     F2 14 02 FB | 	rdlong	arg02, objptr
07590     43 00 00 FF 
07594     5C E4 85 F1 | 	sub	objptr, ##34396
07598     2C BB B1 FD | 	call	#_pslpoke
0759c     47 00 00 FF 
075a0     8C E4 05 F1 | 	add	objptr, ##36492
075a4     FF FF FF FF 
075a8     F2 FE 6B FC | 	wrlong	##-1, objptr
075ac     0C 4E 05 F1 | 	add	fp, #12
075b0     A7 26 02 FB | 	rdlong	local01, fp
075b4     0C 4E 85 F1 | 	sub	fp, #12
075b8     04 E4 05 F1 | 	add	objptr, #4
075bc     F2 26 62 FC | 	wrlong	local01, objptr
075c0     47 00 00 FF 
075c4     90 E4 85 F1 | 	sub	objptr, ##36496
075c8     84 FD BF FD | 	call	#_save_line
075cc                 | '   programstart=programptr
075cc                 | '   pslpoke(lineptr2+16,programptr)
075cc                 | '   ucompiledline(4)=$FFFF_FFFF
075cc                 | '   ucompiledline(5)=lineptr2
075cc                 | '   save_line
075cc                 | '   return 0
075cc     00 FA 05 F6 | 	mov	result1, #0
075d0     98 00 90 FD | 	jmp	#LR__0623
075d4                 | LR__0621
075d4                 | ' 
075d4                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
075d4     20 4E 05 F1 | 	add	fp, #32
075d8     A7 26 02 FB | 	rdlong	local01, fp
075dc     20 4E 85 F1 | 	sub	fp, #32
075e0     FF FF 7F FF 
075e4     FF 27 0E F2 | 	cmp	local01, ##-1 wz
075e8     7C 00 90 AD |  if_e	jmp	#LR__0622
075ec     20 4E 05 F1 | 	add	fp, #32
075f0     A7 26 02 FB | 	rdlong	local01, fp
075f4     47 00 00 FF 
075f8     8C E4 05 F1 | 	add	objptr, ##36492
075fc     F2 26 62 FC | 	wrlong	local01, objptr
07600     14 4E 85 F1 | 	sub	fp, #20
07604     A7 26 02 FB | 	rdlong	local01, fp
07608     04 E4 05 F1 | 	add	objptr, #4
0760c     F2 26 62 FC | 	wrlong	local01, objptr
07610     A7 12 02 FB | 	rdlong	arg01, fp
07614     0C 4E 85 F1 | 	sub	fp, #12
07618     10 12 06 F1 | 	add	arg01, #16
0761c     04 00 00 FF 
07620     34 E4 85 F1 | 	sub	objptr, ##2100
07624     F2 14 02 FB | 	rdlong	arg02, objptr
07628     43 00 00 FF 
0762c     5C E4 85 F1 | 	sub	objptr, ##34396
07630     94 BA B1 FD | 	call	#_pslpoke
07634     20 4E 05 F1 | 	add	fp, #32
07638     A7 12 02 FB | 	rdlong	arg01, fp
0763c     20 4E 85 F1 | 	sub	fp, #32
07640     14 12 06 F1 | 	add	arg01, #20
07644     43 00 00 FF 
07648     5C E4 05 F1 | 	add	objptr, ##34396
0764c     F2 14 02 FB | 	rdlong	arg02, objptr
07650     43 00 00 FF 
07654     5C E4 85 F1 | 	sub	objptr, ##34396
07658     6C BA B1 FD | 	call	#_pslpoke
0765c     F0 FC BF FD | 	call	#_save_line
07660                 | '   ucompiledline(4)=header(4)
07660                 | '   ucompiledline(5)=lineptr2
07660                 | '   pslpoke(lineptr2+16,programptr)
07660                 | '   pslpoke(header(4)+20,programptr)
07660                 | '   save_line
07660                 | '   return 0
07660     00 FA 05 F6 | 	mov	result1, #0
07664     04 00 90 FD | 	jmp	#LR__0623
07668                 | LR__0622
07668     00 FA 05 F6 | 	mov	result1, #0
0766c                 | LR__0623
0766c     A7 F0 03 F6 | 	mov	ptra, fp
07670     B2 00 A0 FD | 	call	#popregs_
07674                 | _insertline_ret
07674     2D 00 64 FD | 	ret
07678                 | 
07678                 | ' 
07678                 | ' '----- Adds a new line at the end of the program
07678                 | ' 
07678                 | ' sub add_line_at_end(aline) 
07678                 | _add_line_at_end
07678     4A 00 00 FF 
0767c     8C E4 05 F1 | 	add	objptr, ##38028
07680     F2 12 62 FC | 	wrlong	arg01, objptr
07684     04 E4 05 F1 | 	add	objptr, #4
07688     F2 14 02 FB | 	rdlong	arg02, objptr
0768c     03 00 00 FF 
07690     04 E4 85 F1 | 	sub	objptr, ##1540
07694     F2 14 62 FC | 	wrlong	arg02, objptr
07698     03 00 00 FF 
0769c     04 E4 05 F1 | 	add	objptr, ##1540
076a0     F2 12 02 FB | 	rdlong	arg01, objptr
076a4     14 12 06 F1 | 	add	arg01, #20
076a8     07 00 00 FF 
076ac     34 E4 85 F1 | 	sub	objptr, ##3636
076b0     F2 14 02 FB | 	rdlong	arg02, objptr
076b4     43 00 00 FF 
076b8     5C E4 85 F1 | 	sub	objptr, ##34396
076bc     08 BA B1 FD | 	call	#_pslpoke
076c0     43 00 00 FF 
076c4     5C E4 05 F1 | 	add	objptr, ##34396
076c8     F2 14 02 FB | 	rdlong	arg02, objptr
076cc     07 00 00 FF 
076d0     34 E4 05 F1 | 	add	objptr, ##3636
076d4     F2 14 62 FC | 	wrlong	arg02, objptr
076d8     03 00 00 FF 
076dc     00 E4 85 F1 | 	sub	objptr, ##1536
076e0     FF FF BF FF 
076e4     F2 FE 6B FC | 	wrlong	##2147483647, objptr
076e8                 | ' 
076e8                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
076e8                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
076e8     04 00 00 FF 
076ec     34 E4 85 F1 | 	sub	objptr, ##2100
076f0     F2 14 02 FB | 	rdlong	arg02, objptr
076f4     43 00 00 FF 
076f8     5C E4 85 F1 | 	sub	objptr, ##34396
076fc     00 04 00 FF 
07700     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07704     47 00 00 AF 
07708     8C E4 05 A1 |  if_e	add	objptr, ##36492
0770c     FF FF FF AF 
07710     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07714     47 00 00 AF 
07718     8C E4 85 A1 |  if_e	sub	objptr, ##36492
0771c     30 FC BF FD | 	call	#_save_line
07720     43 00 00 FF 
07724     5C E4 05 F1 | 	add	objptr, ##34396
07728     F2 12 02 FB | 	rdlong	arg01, objptr
0772c     43 00 00 FF 
07730     5C E4 85 F1 | 	sub	objptr, ##34396
07734     01 14 66 F6 | 	neg	arg02, #1
07738     8C B9 B1 FD | 	call	#_pslpoke
0773c                 | _add_line_at_end_ret
0773c     2D 00 64 FD | 	ret
07740                 | 
07740                 | ' 
07740                 | ' '--------------------------------------------------------------------------------------------------------------------------
07740                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
07740                 | ' '--------------------------------------------------------------------------------------------------------------------------
07740                 | ' 
07740                 | ' '--------------------------------------------------------------------------------------------------------------------------
07740                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
07740                 | ' '--------------------------------------------------------------------------------------------------------------------------
07740                 | ' 
07740                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
07740                 | ' 
07740                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
07740                 | _compile_immediate
07740     0A 4A 05 F6 | 	mov	COUNT_, #10
07744     A8 00 A0 FD | 	call	#pushregs_
07748                 | _compile_immediate_enter
07748     09 2D 02 F6 | 	mov	local04, arg01
0774c     0A 2F 02 F6 | 	mov	local05, arg02
07750     00 30 06 F6 | 	mov	local06, #0
07754     00 32 06 F6 | 	mov	local07, #0
07758     00 34 06 F6 | 	mov	local08, #0
0775c                 | ' 
0775c                 | ' ' linetype=cont+1
0775c                 | ' ' 1 : this is the first part of the line that will continue
0775c                 | ' ' 2 - this is the continuation of the line
0775c                 | ' ' 3 - this is the last continued line
0775c                 | ' ' 4 - this is the one and only part
0775c                 | ' ' 5 - continued after if/else
0775c                 | ' 
0775c                 | ' err=0
0775c                 | ' cmd=0
0775c                 | ' vars=0
0775c                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
0775c     02 2C 0E F2 | 	cmp	local04, #2 wz
07760     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07764     24 00 90 5D |  if_ne	jmp	#LR__0630
07768     35 00 00 FF 
0776c     10 E4 05 F1 | 	add	objptr, ##27152
07770     F2 32 02 FB | 	rdlong	local07, objptr
07774     01 36 06 F6 | 	mov	local09, #1
07778     02 00 00 FF 
0777c     34 E4 05 F1 | 	add	objptr, ##1076
07780     F2 02 68 FC | 	wrlong	#1, objptr
07784     37 00 00 FF 
07788     44 E4 85 F1 | 	sub	objptr, ##28228
0778c                 | LR__0630
0778c                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
0778c     04 2C 0E F2 | 	cmp	local04, #4 wz
07790     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07794     30 00 90 5D |  if_ne	jmp	#LR__0631
07798     35 00 00 FF 
0779c     18 E4 05 F1 | 	add	objptr, ##27160
077a0     F2 32 02 FB | 	rdlong	local07, objptr
077a4     02 36 06 F6 | 	mov	local09, #2
077a8     02 00 00 FF 
077ac     2C E4 05 F1 | 	add	objptr, ##1068
077b0     F2 04 68 FC | 	wrlong	#2, objptr
077b4     13 00 00 FF 
077b8     38 E4 05 F1 | 	add	objptr, ##9784
077bc     F2 04 68 FC | 	wrlong	#2, objptr
077c0     4A 00 00 FF 
077c4     7C E4 85 F1 | 	sub	objptr, ##38012
077c8                 | LR__0631
077c8                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
077c8     05 2C 0E F2 | 	cmp	local04, #5 wz
077cc     40 00 90 5D |  if_ne	jmp	#LR__0632
077d0     37 00 00 FF 
077d4     44 E4 05 F1 | 	add	objptr, ##28228
077d8     F2 FC 01 FB | 	rdlong	result2, objptr
077dc     FE 36 02 F6 | 	mov	local09, result2
077e0     03 36 66 F0 | 	shl	local09, #3
077e4     02 00 00 FF 
077e8     38 E4 85 F1 | 	sub	objptr, ##1080
077ec     F2 36 02 F1 | 	add	local09, objptr
077f0     04 36 06 F1 | 	add	local09, #4
077f4     1B 33 02 FB | 	rdlong	local07, local09
077f8     01 FC 05 F1 | 	add	result2, #1
077fc     02 00 00 FF 
07800     38 E4 05 F1 | 	add	objptr, ##1080
07804     F2 FC 61 FC | 	wrlong	result2, objptr
07808     37 00 00 FF 
0780c     44 E4 85 F1 | 	sub	objptr, ##28228
07810                 | LR__0632
07810                 | ' 
07810                 | ' 'print  "In compile_immediate cmd=:", cmd
07810                 | ' 451 select case cmd
07810     5C 32 0E F2 | 	cmp	local07, #92 wz
07814     CC 02 90 AD |  if_e	jmp	#LR__0633
07818     B9 32 0E F2 | 	cmp	local07, #185 wz
0781c     D0 02 90 AD |  if_e	jmp	#LR__0634
07820     47 32 0E F2 | 	cmp	local07, #71 wz
07824     D8 02 90 AD |  if_e	jmp	#LR__0635
07828     59 32 0E F2 | 	cmp	local07, #89 wz
0782c     E0 02 90 AD |  if_e	jmp	#LR__0636
07830     C3 32 0E F2 | 	cmp	local07, #195 wz
07834     E8 02 90 AD |  if_e	jmp	#LR__0637
07838     45 32 0E F2 | 	cmp	local07, #69 wz
0783c     EC 02 90 AD |  if_e	jmp	#LR__0638
07840     69 32 0E F2 | 	cmp	local07, #105 wz
07844     F4 02 90 AD |  if_e	jmp	#LR__0639
07848     40 32 0E F2 | 	cmp	local07, #64 wz
0784c     D4 06 90 AD |  if_e	jmp	#LR__0713
07850     B4 32 0E F2 | 	cmp	local07, #180 wz
07854     F0 02 90 AD |  if_e	jmp	#LR__0640
07858     49 32 0E F2 | 	cmp	local07, #73 wz
0785c     F4 02 90 AD |  if_e	jmp	#LR__0641
07860     C4 32 0E F2 | 	cmp	local07, #196 wz
07864     F8 02 90 AD |  if_e	jmp	#LR__0642
07868     AE 32 0E F2 | 	cmp	local07, #174 wz
0786c     FC 02 90 AD |  if_e	jmp	#LR__0643
07870     B0 32 0E F2 | 	cmp	local07, #176 wz
07874     00 03 90 AD |  if_e	jmp	#LR__0644
07878     AF 32 0E F2 | 	cmp	local07, #175 wz
0787c     04 03 90 AD |  if_e	jmp	#LR__0645
07880     B1 32 0E F2 | 	cmp	local07, #177 wz
07884     08 03 90 AD |  if_e	jmp	#LR__0646
07888     CF 32 0E F2 | 	cmp	local07, #207 wz
0788c     0C 03 90 AD |  if_e	jmp	#LR__0647
07890     68 32 0E F2 | 	cmp	local07, #104 wz
07894     10 03 90 AD |  if_e	jmp	#LR__0648
07898     B7 32 0E F2 | 	cmp	local07, #183 wz
0789c     84 06 90 AD |  if_e	jmp	#LR__0713
078a0     74 32 0E F2 | 	cmp	local07, #116 wz
078a4     0C 03 90 AD |  if_e	jmp	#LR__0649
078a8     73 32 0E F2 | 	cmp	local07, #115 wz
078ac     14 03 90 AD |  if_e	jmp	#LR__0650
078b0     6C 32 0E F2 | 	cmp	local07, #108 wz
078b4     1C 03 90 AD |  if_e	jmp	#LR__0651
078b8     89 32 0E F2 | 	cmp	local07, #137 wz
078bc     64 06 90 AD |  if_e	jmp	#LR__0713
078c0     C2 32 0E F2 | 	cmp	local07, #194 wz
078c4     1C 03 90 AD |  if_e	jmp	#LR__0652
078c8     72 32 0E F2 | 	cmp	local07, #114 wz
078cc     20 03 90 AD |  if_e	jmp	#LR__0653
078d0     5D 32 0E F2 | 	cmp	local07, #93 wz
078d4     24 03 90 AD |  if_e	jmp	#LR__0654
078d8     96 32 0E F2 | 	cmp	local07, #150 wz
078dc     2C 03 90 AD |  if_e	jmp	#LR__0655
078e0     43 32 0E F2 | 	cmp	local07, #67 wz
078e4     30 03 90 AD |  if_e	jmp	#LR__0656
078e8     5A 32 0E F2 | 	cmp	local07, #90 wz
078ec     38 03 90 AD |  if_e	jmp	#LR__0657
078f0     AB 32 0E F2 | 	cmp	local07, #171 wz
078f4     2C 06 90 AD |  if_e	jmp	#LR__0713
078f8     BD 32 0E F2 | 	cmp	local07, #189 wz
078fc     38 03 90 AD |  if_e	jmp	#LR__0658
07900     BB 32 0E F2 | 	cmp	local07, #187 wz
07904     40 03 90 AD |  if_e	jmp	#LR__0659
07908     4E 32 0E F2 | 	cmp	local07, #78 wz
0790c     48 03 90 AD |  if_e	jmp	#LR__0660
07910     A9 32 0E F2 | 	cmp	local07, #169 wz
07914     60 03 90 AD |  if_e	jmp	#LR__0662
07918     46 32 0E F2 | 	cmp	local07, #70 wz
0791c     78 03 90 AD |  if_e	jmp	#LR__0664
07920     71 32 0E F2 | 	cmp	local07, #113 wz
07924     80 03 90 AD |  if_e	jmp	#LR__0665
07928     60 32 0E F2 | 	cmp	local07, #96 wz
0792c     84 03 90 AD |  if_e	jmp	#LR__0666
07930     4A 32 0E F2 | 	cmp	local07, #74 wz
07934     88 03 90 AD |  if_e	jmp	#LR__0667
07938     48 32 0E F2 | 	cmp	local07, #72 wz
0793c     8C 03 90 AD |  if_e	jmp	#LR__0668
07940     58 32 0E F2 | 	cmp	local07, #88 wz
07944     94 03 90 AD |  if_e	jmp	#LR__0669
07948     5F 32 0E F2 | 	cmp	local07, #95 wz
0794c     9C 03 90 AD |  if_e	jmp	#LR__0670
07950     B5 32 0E F2 | 	cmp	local07, #181 wz
07954     A0 03 90 AD |  if_e	jmp	#LR__0671
07958     8A 32 0E F2 | 	cmp	local07, #138 wz
0795c     A8 03 90 AD |  if_e	jmp	#LR__0672
07960     4C 32 0E F2 | 	cmp	local07, #76 wz
07964     AC 03 90 AD |  if_e	jmp	#LR__0673
07968     52 32 0E F2 | 	cmp	local07, #82 wz
0796c     B4 03 90 AD |  if_e	jmp	#LR__0674
07970     97 32 0E F2 | 	cmp	local07, #151 wz
07974     BC 03 90 AD |  if_e	jmp	#LR__0675
07978     C6 32 0E F2 | 	cmp	local07, #198 wz
0797c     C0 03 90 AD |  if_e	jmp	#LR__0676
07980     61 32 0E F2 | 	cmp	local07, #97 wz
07984     C4 03 90 AD |  if_e	jmp	#LR__0677
07988     63 32 0E F2 | 	cmp	local07, #99 wz
0798c     C8 03 90 AD |  if_e	jmp	#LR__0678
07990     41 32 0E F2 | 	cmp	local07, #65 wz
07994     8C 05 90 AD |  if_e	jmp	#LR__0713
07998     4B 32 0E F2 | 	cmp	local07, #75 wz
0799c     C4 03 90 AD |  if_e	jmp	#LR__0679
079a0     C1 32 0E F2 | 	cmp	local07, #193 wz
079a4     C8 03 90 AD |  if_e	jmp	#LR__0680
079a8     B3 32 0E F2 | 	cmp	local07, #179 wz
079ac     CC 03 90 AD |  if_e	jmp	#LR__0681
079b0     5E 32 0E F2 | 	cmp	local07, #94 wz
079b4     D0 03 90 AD |  if_e	jmp	#LR__0682
079b8     7C 32 0E F2 | 	cmp	local07, #124 wz
079bc     D4 03 90 AD |  if_e	jmp	#LR__0683
079c0     7D 32 0E F2 | 	cmp	local07, #125 wz
079c4     D8 03 90 AD |  if_e	jmp	#LR__0684
079c8     7E 32 0E F2 | 	cmp	local07, #126 wz
079cc     DC 03 90 AD |  if_e	jmp	#LR__0685
079d0     7F 32 0E F2 | 	cmp	local07, #127 wz
079d4     E0 03 90 AD |  if_e	jmp	#LR__0686
079d8     80 32 0E F2 | 	cmp	local07, #128 wz
079dc     E4 03 90 AD |  if_e	jmp	#LR__0687
079e0     55 32 0E F2 | 	cmp	local07, #85 wz
079e4     E8 03 90 AD |  if_e	jmp	#LR__0688
079e8     75 32 0E F2 | 	cmp	local07, #117 wz
079ec     EC 03 90 AD |  if_e	jmp	#LR__0689
079f0     42 32 0E F2 | 	cmp	local07, #66 wz
079f4     F4 03 90 AD |  if_e	jmp	#LR__0690
079f8     95 32 0E F2 | 	cmp	local07, #149 wz
079fc     FC 03 90 AD |  if_e	jmp	#LR__0691
07a00     AC 32 0E F2 | 	cmp	local07, #172 wz
07a04     1C 05 90 AD |  if_e	jmp	#LR__0713
07a08     81 32 0E F2 | 	cmp	local07, #129 wz
07a0c     F8 03 90 AD |  if_e	jmp	#LR__0692
07a10     44 32 0E F2 | 	cmp	local07, #68 wz
07a14     FC 03 90 AD |  if_e	jmp	#LR__0693
07a18     BC 32 0E F2 | 	cmp	local07, #188 wz
07a1c     00 04 90 AD |  if_e	jmp	#LR__0694
07a20     88 32 0E F2 | 	cmp	local07, #136 wz
07a24     FC 04 90 AD |  if_e	jmp	#LR__0713
07a28     B6 32 0E F2 | 	cmp	local07, #182 wz
07a2c     00 04 90 AD |  if_e	jmp	#LR__0695
07a30     92 32 0E F2 | 	cmp	local07, #146 wz
07a34     08 04 90 AD |  if_e	jmp	#LR__0696
07a38     BE 32 0E F2 | 	cmp	local07, #190 wz
07a3c     A0 05 90 AD |  if_e	jmp	#LR__0714
07a40     C7 32 0E F2 | 	cmp	local07, #199 wz
07a44     AA 32 0E 52 |  if_ne	cmp	local07, #170 wz
07a48     D8 04 90 AD |  if_e	jmp	#LR__0713
07a4c     4D 32 0E F2 | 	cmp	local07, #77 wz
07a50     F8 03 90 AD |  if_e	jmp	#LR__0697
07a54     51 32 0E F2 | 	cmp	local07, #81 wz
07a58     00 04 90 AD |  if_e	jmp	#LR__0698
07a5c     8E 32 0E F2 | 	cmp	local07, #142 wz
07a60     08 04 90 AD |  if_e	jmp	#LR__0699
07a64     90 32 0E F2 | 	cmp	local07, #144 wz
07a68     0C 04 90 AD |  if_e	jmp	#LR__0700
07a6c     8D 32 0E F2 | 	cmp	local07, #141 wz
07a70     10 04 90 AD |  if_e	jmp	#LR__0701
07a74     8C 32 0E F2 | 	cmp	local07, #140 wz
07a78     14 04 90 AD |  if_e	jmp	#LR__0702
07a7c     91 32 0E F2 | 	cmp	local07, #145 wz
07a80     18 04 90 AD |  if_e	jmp	#LR__0703
07a84     8B 32 0E F2 | 	cmp	local07, #139 wz
07a88     1C 04 90 AD |  if_e	jmp	#LR__0704
07a8c     8F 32 0E F2 | 	cmp	local07, #143 wz
07a90     20 04 90 AD |  if_e	jmp	#LR__0705
07a94     B2 32 0E F2 | 	cmp	local07, #178 wz
07a98     24 04 90 AD |  if_e	jmp	#LR__0706
07a9c     6D 32 0E F2 | 	cmp	local07, #109 wz
07aa0     2C 04 90 AD |  if_e	jmp	#LR__0707
07aa4     70 32 0E F2 | 	cmp	local07, #112 wz
07aa8     78 04 90 AD |  if_e	jmp	#LR__0713
07aac     56 32 0E F2 | 	cmp	local07, #86 wz
07ab0     28 04 90 AD |  if_e	jmp	#LR__0708
07ab4     57 32 0E F2 | 	cmp	local07, #87 wz
07ab8     68 04 90 AD |  if_e	jmp	#LR__0713
07abc     79 32 0E F2 | 	cmp	local07, #121 wz
07ac0     24 04 90 AD |  if_e	jmp	#LR__0709
07ac4     77 32 0E F2 | 	cmp	local07, #119 wz
07ac8     28 04 90 AD |  if_e	jmp	#LR__0710
07acc     78 32 0E F2 | 	cmp	local07, #120 wz
07ad0     2C 04 90 AD |  if_e	jmp	#LR__0711
07ad4     01 00 00 FF 
07ad8     04 32 0E F2 | 	cmp	local07, ##516 wz
07adc     2C 04 90 AD |  if_e	jmp	#LR__0712
07ae0     FC 04 90 FD | 	jmp	#LR__0714
07ae4                 | LR__0633
07ae4     48 0B B0 FD | 	call	#_compile_fun_2p
07ae8     FD 30 02 F6 | 	mov	local06, result1
07aec     34 04 90 FD | 	jmp	#LR__0713
07af0                 | LR__0634
07af0     0C 0E B0 FD | 	call	#_compile_fun_varp
07af4     FD 34 02 F6 | 	mov	local08, result1
07af8     FE 30 02 F6 | 	mov	local06, result2
07afc     24 04 90 FD | 	jmp	#LR__0713
07b00                 | LR__0635
07b00     FC 0D B0 FD | 	call	#_compile_fun_varp
07b04     FD 34 02 F6 | 	mov	local08, result1
07b08     FE 30 02 F6 | 	mov	local06, result2
07b0c     14 04 90 FD | 	jmp	#LR__0713
07b10                 | LR__0636
07b10     EC 0D B0 FD | 	call	#_compile_fun_varp
07b14     FD 34 02 F6 | 	mov	local08, result1
07b18     FE 30 02 F6 | 	mov	local06, result2
07b1c     04 04 90 FD | 	jmp	#LR__0713
07b20                 | LR__0637
07b20                 | ' return expr()
07b20     48 42 B0 FD | 	call	#_expr
07b24     FD 30 02 F6 | 	mov	local06, result1
07b28     F8 03 90 FD | 	jmp	#LR__0713
07b2c                 | LR__0638
07b2c     D0 0D B0 FD | 	call	#_compile_fun_varp
07b30     FD 34 02 F6 | 	mov	local08, result1
07b34     FE 30 02 F6 | 	mov	local06, result2
07b38     E8 03 90 FD | 	jmp	#LR__0713
07b3c                 | LR__0639
07b3c                 | ' return expr()
07b3c     2C 42 B0 FD | 	call	#_expr
07b40     FD 30 02 F6 | 	mov	local06, result1
07b44     DC 03 90 FD | 	jmp	#LR__0713
07b48                 | LR__0640
07b48                 | ' return expr()
07b48     20 42 B0 FD | 	call	#_expr
07b4c     FD 30 02 F6 | 	mov	local06, result1
07b50     D0 03 90 FD | 	jmp	#LR__0713
07b54                 | LR__0641
07b54                 | ' return expr()
07b54     14 42 B0 FD | 	call	#_expr
07b58     FD 30 02 F6 | 	mov	local06, result1
07b5c     C4 03 90 FD | 	jmp	#LR__0713
07b60                 | LR__0642
07b60     CC 0A B0 FD | 	call	#_compile_fun_2p
07b64     FD 30 02 F6 | 	mov	local06, result1
07b68     B8 03 90 FD | 	jmp	#LR__0713
07b6c                 | LR__0643
07b6c     C0 0A B0 FD | 	call	#_compile_fun_2p
07b70     FD 30 02 F6 | 	mov	local06, result1
07b74     AC 03 90 FD | 	jmp	#LR__0713
07b78                 | LR__0644
07b78     B4 0A B0 FD | 	call	#_compile_fun_2p
07b7c     FD 30 02 F6 | 	mov	local06, result1
07b80     A0 03 90 FD | 	jmp	#LR__0713
07b84                 | LR__0645
07b84     A8 0A B0 FD | 	call	#_compile_fun_2p
07b88     FD 30 02 F6 | 	mov	local06, result1
07b8c     94 03 90 FD | 	jmp	#LR__0713
07b90                 | LR__0646
07b90     9C 0A B0 FD | 	call	#_compile_fun_2p
07b94     FD 30 02 F6 | 	mov	local06, result1
07b98     88 03 90 FD | 	jmp	#LR__0713
07b9c                 | LR__0647
07b9c                 | ' return expr()
07b9c     CC 41 B0 FD | 	call	#_expr
07ba0     FD 30 02 F6 | 	mov	local06, result1
07ba4     7C 03 90 FD | 	jmp	#LR__0713
07ba8                 | LR__0648
07ba8                 | ' return expr()
07ba8     C0 41 B0 FD | 	call	#_expr
07bac     FD 30 02 F6 | 	mov	local06, result1
07bb0     70 03 90 FD | 	jmp	#LR__0713
07bb4                 | LR__0649
07bb4     48 0D B0 FD | 	call	#_compile_fun_varp
07bb8     FD 34 02 F6 | 	mov	local08, result1
07bbc     FE 30 02 F6 | 	mov	local06, result2
07bc0     60 03 90 FD | 	jmp	#LR__0713
07bc4                 | LR__0650
07bc4     38 0D B0 FD | 	call	#_compile_fun_varp
07bc8     FD 34 02 F6 | 	mov	local08, result1
07bcc     FE 30 02 F6 | 	mov	local06, result2
07bd0     50 03 90 FD | 	jmp	#LR__0713
07bd4                 | LR__0651
07bd4     28 0D B0 FD | 	call	#_compile_fun_varp
07bd8     FD 34 02 F6 | 	mov	local08, result1
07bdc     FE 30 02 F6 | 	mov	local06, result2
07be0     40 03 90 FD | 	jmp	#LR__0713
07be4                 | LR__0652
07be4                 | ' return expr()
07be4     84 41 B0 FD | 	call	#_expr
07be8     FD 30 02 F6 | 	mov	local06, result1
07bec     34 03 90 FD | 	jmp	#LR__0713
07bf0                 | LR__0653
07bf0     30 22 B0 FD | 	call	#_compile_dim
07bf4     FD 30 02 F6 | 	mov	local06, result1
07bf8     E4 03 90 FD | 	jmp	#LR__0714
07bfc                 | LR__0654
07bfc     00 0D B0 FD | 	call	#_compile_fun_varp
07c00     FD 34 02 F6 | 	mov	local08, result1
07c04     FE 30 02 F6 | 	mov	local06, result2
07c08     18 03 90 FD | 	jmp	#LR__0713
07c0c                 | LR__0655
07c0c     20 0A B0 FD | 	call	#_compile_fun_2p
07c10     FD 30 02 F6 | 	mov	local06, result1
07c14     0C 03 90 FD | 	jmp	#LR__0713
07c18                 | LR__0656
07c18     E4 0C B0 FD | 	call	#_compile_fun_varp
07c1c     FD 34 02 F6 | 	mov	local08, result1
07c20     FE 30 02 F6 | 	mov	local06, result2
07c24     FC 02 90 FD | 	jmp	#LR__0713
07c28                 | LR__0657
07c28     17 13 02 F6 | 	mov	arg01, local05
07c2c     BC 20 B0 FD | 	call	#_compile_else
07c30     FD 30 02 F6 | 	mov	local06, result1
07c34     A8 03 90 FD | 	jmp	#LR__0714
07c38                 | LR__0658
07c38     C4 0C B0 FD | 	call	#_compile_fun_varp
07c3c     FD 34 02 F6 | 	mov	local08, result1
07c40     FE 30 02 F6 | 	mov	local06, result2
07c44     DC 02 90 FD | 	jmp	#LR__0713
07c48                 | LR__0659
07c48     B4 0C B0 FD | 	call	#_compile_fun_varp
07c4c     FD 34 02 F6 | 	mov	local08, result1
07c50     FE 30 02 F6 | 	mov	local06, result2
07c54     CC 02 90 FD | 	jmp	#LR__0713
07c58                 | LR__0660
07c58     01 2E 16 F2 | 	cmp	local05, #1 wc
07c5c     08 00 90 CD |  if_b	jmp	#LR__0661
07c60     5C 33 B0 FD | 	call	#_compile_goto
07c64     78 03 90 FD | 	jmp	#LR__0714
07c68                 | LR__0661
07c68     19 12 06 F6 | 	mov	arg01, #25
07c6c     00 14 06 F6 | 	mov	arg02, #0
07c70     B4 B2 B1 FD | 	call	#_printerror
07c74     68 03 90 FD | 	jmp	#LR__0714
07c78                 | LR__0662
07c78     01 2E 16 F2 | 	cmp	local05, #1 wc
07c7c     08 00 90 CD |  if_b	jmp	#LR__0663
07c80     D8 32 B0 FD | 	call	#_compile_gosub
07c84     58 03 90 FD | 	jmp	#LR__0714
07c88                 | LR__0663
07c88     19 12 06 F6 | 	mov	arg01, #25
07c8c     00 14 06 F6 | 	mov	arg02, #0
07c90     94 B2 B1 FD | 	call	#_printerror
07c94     48 03 90 FD | 	jmp	#LR__0714
07c98                 | LR__0664
07c98     64 0C B0 FD | 	call	#_compile_fun_varp
07c9c     FD 34 02 F6 | 	mov	local08, result1
07ca0     FE 30 02 F6 | 	mov	local06, result2
07ca4     7C 02 90 FD | 	jmp	#LR__0713
07ca8                 | LR__0665
07ca8     FC 0A B0 FD | 	call	#_compile_fun_4p
07cac     FD 30 02 F6 | 	mov	local06, result1
07cb0     70 02 90 FD | 	jmp	#LR__0713
07cb4                 | LR__0666
07cb4                 | ' return expr()
07cb4     B4 40 B0 FD | 	call	#_expr
07cb8     FD 30 02 F6 | 	mov	local06, result1
07cbc     64 02 90 FD | 	jmp	#LR__0713
07cc0                 | LR__0667
07cc0     34 28 B0 FD | 	call	#_compile_for
07cc4     FD 30 02 F6 | 	mov	local06, result1
07cc8     14 03 90 FD | 	jmp	#LR__0714
07ccc                 | LR__0668
07ccc     30 0C B0 FD | 	call	#_compile_fun_varp
07cd0     FD 34 02 F6 | 	mov	local08, result1
07cd4     FE 30 02 F6 | 	mov	local06, result2
07cd8     48 02 90 FD | 	jmp	#LR__0713
07cdc                 | LR__0669
07cdc     17 13 02 F6 | 	mov	arg01, local05
07ce0     80 1E B0 FD | 	call	#_compile_if
07ce4     FD 30 02 F6 | 	mov	local06, result1
07ce8     F4 02 90 FD | 	jmp	#LR__0714
07cec                 | LR__0670
07cec                 | ' return expr()
07cec     7C 40 B0 FD | 	call	#_expr
07cf0     FD 30 02 F6 | 	mov	local06, result1
07cf4     2C 02 90 FD | 	jmp	#LR__0713
07cf8                 | LR__0671
07cf8     D0 0D B0 FD | 	call	#_compile_input
07cfc     FD 34 02 F6 | 	mov	local08, result1
07d00     FE 30 02 F6 | 	mov	local06, result2
07d04     1C 02 90 FD | 	jmp	#LR__0713
07d08                 | LR__0672
07d08                 | ' return expr()
07d08     60 40 B0 FD | 	call	#_expr
07d0c     FD 30 02 F6 | 	mov	local06, result1
07d10     10 02 90 FD | 	jmp	#LR__0713
07d14                 | LR__0673
07d14     E8 0B B0 FD | 	call	#_compile_fun_varp
07d18     FD 34 02 F6 | 	mov	local08, result1
07d1c     FE 30 02 F6 | 	mov	local06, result2
07d20     00 02 90 FD | 	jmp	#LR__0713
07d24                 | LR__0674
07d24     D8 0B B0 FD | 	call	#_compile_fun_varp
07d28     FD 34 02 F6 | 	mov	local08, result1
07d2c     FE 30 02 F6 | 	mov	local06, result2
07d30     F0 01 90 FD | 	jmp	#LR__0713
07d34                 | LR__0675
07d34     F8 08 B0 FD | 	call	#_compile_fun_2p
07d38     FD 30 02 F6 | 	mov	local06, result1
07d3c     E4 01 90 FD | 	jmp	#LR__0713
07d40                 | LR__0676
07d40                 | ' return expr()
07d40     28 40 B0 FD | 	call	#_expr
07d44     FD 30 02 F6 | 	mov	local06, result1
07d48     D8 01 90 FD | 	jmp	#LR__0713
07d4c                 | LR__0677
07d4c                 | ' return expr()
07d4c     1C 40 B0 FD | 	call	#_expr
07d50     FD 30 02 F6 | 	mov	local06, result1
07d54     CC 01 90 FD | 	jmp	#LR__0713
07d58                 | LR__0678
07d58                 | ' return expr()
07d58     10 40 B0 FD | 	call	#_expr
07d5c     FD 30 02 F6 | 	mov	local06, result1
07d60     C0 01 90 FD | 	jmp	#LR__0713
07d64                 | LR__0679
07d64     5C 30 B0 FD | 	call	#_compile_next
07d68     FD 30 02 F6 | 	mov	local06, result1
07d6c     70 02 90 FD | 	jmp	#LR__0714
07d70                 | LR__0680
07d70     3C 36 B0 FD | 	call	#_compile_on
07d74     FD 30 02 F6 | 	mov	local06, result1
07d78     64 02 90 FD | 	jmp	#LR__0714
07d7c                 | LR__0681
07d7c     38 09 B0 FD | 	call	#_compile_fun_3p
07d80     FD 30 02 F6 | 	mov	local06, result1
07d84     9C 01 90 FD | 	jmp	#LR__0713
07d88                 | LR__0682
07d88                 | ' return expr()
07d88     E0 3F B0 FD | 	call	#_expr
07d8c     FD 30 02 F6 | 	mov	local06, result1
07d90     90 01 90 FD | 	jmp	#LR__0713
07d94                 | LR__0683
07d94                 | ' return expr()
07d94     D4 3F B0 FD | 	call	#_expr
07d98     FD 30 02 F6 | 	mov	local06, result1
07d9c     84 01 90 FD | 	jmp	#LR__0713
07da0                 | LR__0684
07da0                 | ' return expr()
07da0     C8 3F B0 FD | 	call	#_expr
07da4     FD 30 02 F6 | 	mov	local06, result1
07da8     78 01 90 FD | 	jmp	#LR__0713
07dac                 | LR__0685
07dac                 | ' return expr()
07dac     BC 3F B0 FD | 	call	#_expr
07db0     FD 30 02 F6 | 	mov	local06, result1
07db4     6C 01 90 FD | 	jmp	#LR__0713
07db8                 | LR__0686
07db8     EC 09 B0 FD | 	call	#_compile_fun_4p
07dbc     FD 30 02 F6 | 	mov	local06, result1
07dc0     60 01 90 FD | 	jmp	#LR__0713
07dc4                 | LR__0687
07dc4                 | ' return expr()
07dc4     A4 3F B0 FD | 	call	#_expr
07dc8     FD 30 02 F6 | 	mov	local06, result1
07dcc     54 01 90 FD | 	jmp	#LR__0713
07dd0                 | LR__0688
07dd0     5C 08 B0 FD | 	call	#_compile_fun_2p
07dd4     FD 30 02 F6 | 	mov	local06, result1
07dd8     48 01 90 FD | 	jmp	#LR__0713
07ddc                 | LR__0689
07ddc     20 0B B0 FD | 	call	#_compile_fun_varp
07de0     FD 34 02 F6 | 	mov	local08, result1
07de4     FE 30 02 F6 | 	mov	local06, result2
07de8     38 01 90 FD | 	jmp	#LR__0713
07dec                 | LR__0690
07dec     10 0B B0 FD | 	call	#_compile_fun_varp
07df0     FD 34 02 F6 | 	mov	local08, result1
07df4     FE 30 02 F6 | 	mov	local06, result2
07df8     28 01 90 FD | 	jmp	#LR__0713
07dfc                 | LR__0691
07dfc     30 08 B0 FD | 	call	#_compile_fun_2p
07e00     FD 30 02 F6 | 	mov	local06, result1
07e04     1C 01 90 FD | 	jmp	#LR__0713
07e08                 | LR__0692
07e08     24 08 B0 FD | 	call	#_compile_fun_2p
07e0c     FD 30 02 F6 | 	mov	local06, result1
07e10     10 01 90 FD | 	jmp	#LR__0713
07e14                 | LR__0693
07e14     74 16 B0 FD | 	call	#_compile_print
07e18     FD 30 02 F6 | 	mov	local06, result1
07e1c     C0 01 90 FD | 	jmp	#LR__0714
07e20                 | LR__0694
07e20     DC 0A B0 FD | 	call	#_compile_fun_varp
07e24     FD 34 02 F6 | 	mov	local08, result1
07e28     FE 30 02 F6 | 	mov	local06, result2
07e2c     F4 00 90 FD | 	jmp	#LR__0713
07e30                 | LR__0695
07e30     A8 0B B0 FD | 	call	#_compile_read
07e34     FD 34 02 F6 | 	mov	local08, result1
07e38     FE 30 02 F6 | 	mov	local06, result2
07e3c     E4 00 90 FD | 	jmp	#LR__0713
07e40                 | LR__0696
07e40                 | ' return expr()
07e40     28 3F B0 FD | 	call	#_expr
07e44     FD 30 02 F6 | 	mov	local06, result1
07e48     D8 00 90 FD | 	jmp	#LR__0713
07e4c                 | LR__0697
07e4c     B0 0A B0 FD | 	call	#_compile_fun_varp
07e50     FD 34 02 F6 | 	mov	local08, result1
07e54     FE 30 02 F6 | 	mov	local06, result2
07e58     C8 00 90 FD | 	jmp	#LR__0713
07e5c                 | LR__0698
07e5c     A0 0A B0 FD | 	call	#_compile_fun_varp
07e60     FD 34 02 F6 | 	mov	local08, result1
07e64     FE 30 02 F6 | 	mov	local06, result2
07e68     B8 00 90 FD | 	jmp	#LR__0713
07e6c                 | LR__0699
07e6c     C0 07 B0 FD | 	call	#_compile_fun_2p
07e70     FD 30 02 F6 | 	mov	local06, result1
07e74     AC 00 90 FD | 	jmp	#LR__0713
07e78                 | LR__0700
07e78     B4 07 B0 FD | 	call	#_compile_fun_2p
07e7c     FD 30 02 F6 | 	mov	local06, result1
07e80     A0 00 90 FD | 	jmp	#LR__0713
07e84                 | LR__0701
07e84     A8 07 B0 FD | 	call	#_compile_fun_2p
07e88     FD 30 02 F6 | 	mov	local06, result1
07e8c     94 00 90 FD | 	jmp	#LR__0713
07e90                 | LR__0702
07e90     9C 07 B0 FD | 	call	#_compile_fun_2p
07e94     FD 30 02 F6 | 	mov	local06, result1
07e98     88 00 90 FD | 	jmp	#LR__0713
07e9c                 | LR__0703
07e9c     90 07 B0 FD | 	call	#_compile_fun_2p
07ea0     FD 30 02 F6 | 	mov	local06, result1
07ea4     7C 00 90 FD | 	jmp	#LR__0713
07ea8                 | LR__0704
07ea8     84 07 B0 FD | 	call	#_compile_fun_2p
07eac     FD 30 02 F6 | 	mov	local06, result1
07eb0     70 00 90 FD | 	jmp	#LR__0713
07eb4                 | LR__0705
07eb4     78 07 B0 FD | 	call	#_compile_fun_2p
07eb8     FD 30 02 F6 | 	mov	local06, result1
07ebc     64 00 90 FD | 	jmp	#LR__0713
07ec0                 | LR__0706
07ec0     3C 0A B0 FD | 	call	#_compile_fun_varp
07ec4     FD 34 02 F6 | 	mov	local08, result1
07ec8     FE 30 02 F6 | 	mov	local06, result2
07ecc     54 00 90 FD | 	jmp	#LR__0713
07ed0                 | LR__0707
07ed0     E4 07 B0 FD | 	call	#_compile_fun_3p
07ed4     FD 30 02 F6 | 	mov	local06, result1
07ed8     48 00 90 FD | 	jmp	#LR__0713
07edc                 | LR__0708
07edc                 | ' return expr()
07edc     8C 3E B0 FD | 	call	#_expr
07ee0     FD 30 02 F6 | 	mov	local06, result1
07ee4     3C 00 90 FD | 	jmp	#LR__0713
07ee8                 | LR__0709
07ee8     44 07 B0 FD | 	call	#_compile_fun_2p
07eec     FD 30 02 F6 | 	mov	local06, result1
07ef0     30 00 90 FD | 	jmp	#LR__0713
07ef4                 | LR__0710
07ef4     38 07 B0 FD | 	call	#_compile_fun_2p
07ef8     FD 30 02 F6 | 	mov	local06, result1
07efc     24 00 90 FD | 	jmp	#LR__0713
07f00                 | LR__0711
07f00     2C 07 B0 FD | 	call	#_compile_fun_2p
07f04     FD 30 02 F6 | 	mov	local06, result1
07f08     18 00 90 FD | 	jmp	#LR__0713
07f0c                 | LR__0712
07f0c     1C 13 B0 FD | 	call	#_compile_array_assign
07f10     FD 30 02 F6 | 	mov	local06, result1
07f14     0E 30 0E F2 | 	cmp	local06, #14 wz
07f18     C4 00 90 5D |  if_ne	jmp	#LR__0714
07f1c                 | ' return 23
07f1c     17 30 06 F6 | 	mov	local06, #23
07f20     BC 00 90 FD | 	jmp	#LR__0714
07f24                 | ' return 23
07f24                 | LR__0713
07f24     19 2B 02 F6 | 	mov	local03, local07
07f28     1A 27 02 F6 | 	mov	local01, local08
07f2c     13 37 02 F6 | 	mov	local09, local01
07f30     14 39 02 F6 | 	mov	local10, local02
07f34     15 33 02 F6 | 	mov	local07, local03
07f38     4A 00 00 FF 
07f3c     7C E4 05 F1 | 	add	objptr, ##38012
07f40     F2 26 02 FB | 	rdlong	local01, objptr
07f44     13 35 02 F6 | 	mov	local08, local01
07f48     01 34 66 F0 | 	shl	local08, #1
07f4c     13 35 02 F1 | 	add	local08, local01
07f50     02 34 66 F0 | 	shl	local08, #2
07f54     03 00 00 FF 
07f58     00 E4 85 F1 | 	sub	objptr, ##1536
07f5c     F2 34 02 F1 | 	add	local08, objptr
07f60     1A 37 62 FC | 	wrlong	local09, local08
07f64     03 00 00 FF 
07f68     00 E4 05 F1 | 	add	objptr, ##1536
07f6c     F2 26 02 FB | 	rdlong	local01, objptr
07f70     13 37 02 F6 | 	mov	local09, local01
07f74     01 36 66 F0 | 	shl	local09, #1
07f78     13 37 02 F1 | 	add	local09, local01
07f7c     02 36 66 F0 | 	shl	local09, #2
07f80     03 00 00 FF 
07f84     00 E4 85 F1 | 	sub	objptr, ##1536
07f88     F2 36 02 F1 | 	add	local09, objptr
07f8c     04 36 06 F1 | 	add	local09, #4
07f90     1B 39 62 FC | 	wrlong	local10, local09
07f94     03 00 00 FF 
07f98     00 E4 05 F1 | 	add	objptr, ##1536
07f9c     F2 26 02 FB | 	rdlong	local01, objptr
07fa0     13 39 02 F6 | 	mov	local10, local01
07fa4     01 38 66 F0 | 	shl	local10, #1
07fa8     13 39 02 F1 | 	add	local10, local01
07fac     02 38 66 F0 | 	shl	local10, #2
07fb0     03 00 00 FF 
07fb4     00 E4 85 F1 | 	sub	objptr, ##1536
07fb8     F2 38 02 F1 | 	add	local10, objptr
07fbc     08 38 06 F1 | 	add	local10, #8
07fc0     1C 33 62 FC | 	wrlong	local07, local10
07fc4     03 00 00 FF 
07fc8     00 E4 05 F1 | 	add	objptr, ##1536
07fcc     F2 36 02 FB | 	rdlong	local09, objptr
07fd0     01 36 06 F1 | 	add	local09, #1
07fd4     F2 36 62 FC | 	wrlong	local09, objptr
07fd8     4A 00 00 FF 
07fdc     7C E4 85 F1 | 	sub	objptr, ##38012
07fe0                 | LR__0714
07fe0                 | ' 
07fe0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07fe0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07fe0     03 2C 0E F2 | 	cmp	local04, #3 wz
07fe4     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07fe8     38 00 90 5D |  if_ne	jmp	#LR__0715
07fec     4A 00 00 FF 
07ff0     7C E4 05 F1 | 	add	objptr, ##38012
07ff4     F2 38 02 FB | 	rdlong	local10, objptr
07ff8     1C 27 02 F6 | 	mov	local01, local10
07ffc     01 26 66 F0 | 	shl	local01, #1
08000     1C 27 02 F1 | 	add	local01, local10
08004     02 26 66 F0 | 	shl	local01, #2
08008     03 00 00 FF 
0800c     00 E4 85 F1 | 	sub	objptr, ##1536
08010     F2 26 02 F1 | 	add	local01, objptr
08014     08 26 06 F1 | 	add	local01, #8
08018     13 FD 6B FC | 	wrlong	#510, local01
0801c     47 00 00 FF 
08020     7C E4 85 F1 | 	sub	objptr, ##36476
08024                 | LR__0715
08024                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
08024                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
08024     4A 00 00 FF 
08028     7C E4 05 F1 | 	add	objptr, ##38012
0802c     F2 26 02 FB | 	rdlong	local01, objptr
08030     4A 00 00 FF 
08034     7C E4 85 F1 | 	sub	objptr, ##38012
08038     97 58 48 FB | 	callpa	#(@LR__0718-@LR__0716)>>2,fcache_load_ptr_
0803c                 | LR__0716
0803c     13 39 02 F6 | 	mov	local10, local01
08040     01 38 66 F0 | 	shl	local10, #1
08044     13 39 02 F1 | 	add	local10, local01
08048     02 38 66 F0 | 	shl	local10, #2
0804c     47 00 00 FF 
08050     7C E4 05 F1 | 	add	objptr, ##36476
08054     F2 38 02 F1 | 	add	local10, objptr
08058     08 38 06 F1 | 	add	local10, #8
0805c     1C 39 02 FB | 	rdlong	local10, local10
08060     9B 38 0E F2 | 	cmp	local10, #155 wz
08064     47 00 00 FF 
08068     7C E4 85 F1 | 	sub	objptr, ##36476
0806c     70 00 90 5D |  if_ne	jmp	#LR__0717
08070     13 37 02 F6 | 	mov	local09, local01
08074     01 36 86 F1 | 	sub	local09, #1
08078     1B 39 02 F6 | 	mov	local10, local09
0807c     01 38 66 F0 | 	shl	local10, #1
08080     1B 39 02 F1 | 	add	local10, local09
08084     02 38 66 F0 | 	shl	local10, #2
08088     47 00 00 FF 
0808c     7C E4 05 F1 | 	add	objptr, ##36476
08090     F2 38 02 F1 | 	add	local10, objptr
08094     08 38 06 F1 | 	add	local10, #8
08098     1C 39 02 FB | 	rdlong	local10, local10
0809c     11 38 0E F2 | 	cmp	local10, #17 wz
080a0     47 00 00 FF 
080a4     7C E4 85 F1 | 	sub	objptr, ##36476
080a8     34 00 90 5D |  if_ne	jmp	#LR__0717
080ac     13 37 02 F6 | 	mov	local09, local01
080b0     01 36 86 F1 | 	sub	local09, #1
080b4     1B 39 02 F6 | 	mov	local10, local09
080b8     01 38 66 F0 | 	shl	local10, #1
080bc     1B 39 02 F1 | 	add	local10, local09
080c0     02 38 66 F0 | 	shl	local10, #2
080c4     47 00 00 FF 
080c8     7C E4 05 F1 | 	add	objptr, ##36476
080cc     F2 38 02 F1 | 	add	local10, objptr
080d0     08 38 06 F1 | 	add	local10, #8
080d4     1C 25 68 FC | 	wrlong	#18, local10
080d8     47 00 00 FF 
080dc     7C E4 85 F1 | 	sub	objptr, ##36476
080e0                 | LR__0717
080e0     01 26 86 F1 | 	sub	local01, #1
080e4     01 26 56 F2 | 	cmps	local01, #1 wc
080e8     50 FF 9F 3D |  if_ae	jmp	#LR__0716
080ec                 | LR__0718
080ec                 | ' ''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
080ec                 | ' return err
080ec     18 FB 01 F6 | 	mov	result1, local06
080f0     A7 F0 03 F6 | 	mov	ptra, fp
080f4     B2 00 A0 FD | 	call	#popregs_
080f8                 | _compile_immediate_ret
080f8     2D 00 64 FD | 	ret
080fc                 | 
080fc                 | ' 
080fc                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
080fc                 | ' 
080fc                 | ' function compile_immediate_assign(linetype as ulong) as ulong
080fc                 | _compile_immediate_assign
080fc     0C 4A 05 F6 | 	mov	COUNT_, #12
08100     A8 00 A0 FD | 	call	#pushregs_
08104     09 2D 02 F6 | 	mov	local04, arg01
08108     FF 2A 06 F6 | 	mov	local03, #255
0810c     01 2E 66 F6 | 	neg	local05, #1
08110     00 30 06 F6 | 	mov	local06, #0
08114                 | ' 
08114                 | ' t1.result_type=result_error : t1.result.uresult=0
08114                 | ' i=-1: j=-1 : err=0
08114                 | ' 
08114                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
08114     02 2C 0E F2 | 	cmp	local04, #2 wz
08118     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
0811c     35 00 00 AF 
08120     0C E4 05 A1 |  if_e	add	objptr, ##27148
08124     F2 32 02 AB |  if_e	rdlong	local07, objptr
08128     02 00 00 AF 
0812c     38 E4 05 A1 |  if_e	add	objptr, ##1080
08130     F2 04 68 AC |  if_e	wrlong	#2, objptr
08134     37 00 00 AF 
08138     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0813c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
0813c     04 2C 0E F2 | 	cmp	local04, #4 wz
08140     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
08144     2C 00 90 5D |  if_ne	jmp	#LR__0720
08148     35 00 00 FF 
0814c     14 E4 05 F1 | 	add	objptr, ##27156
08150     F2 32 02 FB | 	rdlong	local07, objptr
08154     02 00 00 FF 
08158     30 E4 05 F1 | 	add	objptr, ##1072
0815c     F2 06 68 FC | 	wrlong	#3, objptr
08160     13 00 00 FF 
08164     38 E4 05 F1 | 	add	objptr, ##9784
08168     F2 04 68 FC | 	wrlong	#2, objptr
0816c     4A 00 00 FF 
08170     7C E4 85 F1 | 	sub	objptr, ##38012
08174                 | LR__0720
08174                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
08174     05 2C 0E F2 | 	cmp	local04, #5 wz
08178     3C 00 90 5D |  if_ne	jmp	#LR__0721
0817c     37 00 00 FF 
08180     44 E4 05 F1 | 	add	objptr, ##28228
08184     F2 FA 01 FB | 	rdlong	result1, objptr
08188     FD 32 02 F6 | 	mov	local07, result1
0818c     03 32 66 F0 | 	shl	local07, #3
08190     02 00 00 FF 
08194     38 E4 85 F1 | 	sub	objptr, ##1080
08198     F2 32 02 F1 | 	add	local07, objptr
0819c     19 33 02 FB | 	rdlong	local07, local07
081a0     02 FA 05 F1 | 	add	result1, #2
081a4     02 00 00 FF 
081a8     38 E4 05 F1 | 	add	objptr, ##1080
081ac     F2 FA 61 FC | 	wrlong	result1, objptr
081b0     37 00 00 FF 
081b4     44 E4 85 F1 | 	sub	objptr, ##28228
081b8                 | LR__0721
081b8     19 13 02 F6 | 	mov	arg01, local07
081bc     01 14 06 F6 | 	mov	arg02, #1
081c0     5C 08 B2 FD | 	call	#__system__Right_S
081c4     FD 34 02 F6 | 	mov	local08, result1
081c8     A0 3B B0 FD | 	call	#_expr
081cc                 | ' 
081cc                 | ' suffix2$=right$(varname2$,1)
081cc                 | ' expr()
081cc                 | ' if varnum>0 then					' try to find a variable
081cc     35 00 00 FF 
081d0     08 E4 05 F1 | 	add	objptr, ##27144
081d4     F2 36 02 FB | 	rdlong	local09, objptr
081d8     35 00 00 FF 
081dc     08 E4 85 F1 | 	sub	objptr, ##27144
081e0     01 36 56 F2 | 	cmps	local09, #1 wc
081e4     58 00 90 CD |  if_b	jmp	#LR__0724
081e8                 | '   for i=0 to varnum-1
081e8     00 38 06 F6 | 	mov	local10, #0
081ec     35 00 00 FF 
081f0     08 E4 05 F1 | 	add	objptr, ##27144
081f4     F2 3A 02 FB | 	rdlong	local11, objptr
081f8     35 00 00 FF 
081fc     08 E4 85 F1 | 	sub	objptr, ##27144
08200                 | LR__0722
08200     1D 39 52 F2 | 	cmps	local10, local11 wc
08204     38 00 90 3D |  if_ae	jmp	#LR__0723
08208                 | '     if variables(i).name=varname2$ then j=i : exit
08208     1C 37 02 F6 | 	mov	local09, local10
0820c     04 36 66 F0 | 	shl	local09, #4
08210     14 00 00 FF 
08214     F8 E5 05 F1 | 	add	objptr, ##10744
08218     F2 36 02 F1 | 	add	local09, objptr
0821c     1B 13 02 FB | 	rdlong	arg01, local09
08220     19 15 02 F6 | 	mov	arg02, local07
08224     14 00 00 FF 
08228     F8 E5 85 F1 | 	sub	objptr, ##10744
0822c     10 E7 B1 FD | 	call	#__system___string_cmp
08230     00 FA 0D F2 | 	cmp	result1, #0 wz
08234     1C 2F 02 A6 |  if_e	mov	local05, local10
08238     01 38 06 51 |  if_ne	add	local10, #1
0823c     C0 FF 9F 5D |  if_ne	jmp	#LR__0722
08240                 | LR__0723
08240                 | LR__0724
08240                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
08240     FF FF 7F FF 
08244     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
08248     60 00 90 5D |  if_ne	jmp	#LR__0725
0824c     35 00 00 FF 
08250     08 E4 05 F1 | 	add	objptr, ##27144
08254     F2 36 02 FB | 	rdlong	local09, objptr
08258     35 00 00 FF 
0825c     08 E4 85 F1 | 	sub	objptr, ##27144
08260     02 00 00 FF 
08264     00 36 56 F2 | 	cmps	local09, ##1024 wc
08268     40 00 90 3D |  if_ae	jmp	#LR__0725
0826c     35 00 00 FF 
08270     08 E4 05 F1 | 	add	objptr, ##27144
08274     F2 3A 02 FB | 	rdlong	local11, objptr
08278     04 3A 66 F0 | 	shl	local11, #4
0827c     20 00 00 FF 
08280     10 E4 85 F1 | 	sub	objptr, ##16400
08284     F2 3A 02 F1 | 	add	local11, objptr
08288     1D 33 62 FC | 	wrlong	local07, local11
0828c     20 00 00 FF 
08290     10 E4 05 F1 | 	add	objptr, ##16400
08294     F2 36 02 FB | 	rdlong	local09, objptr
08298     1B 2F 02 F6 | 	mov	local05, local09
0829c     01 36 06 F1 | 	add	local09, #1
082a0     F2 36 62 FC | 	wrlong	local09, objptr
082a4     35 00 00 FF 
082a8     08 E4 85 F1 | 	sub	objptr, ##27144
082ac                 | LR__0725
082ac                 | ' if varnum>=maxvars then
082ac     35 00 00 FF 
082b0     08 E4 05 F1 | 	add	objptr, ##27144
082b4     F2 36 02 FB | 	rdlong	local09, objptr
082b8     35 00 00 FF 
082bc     08 E4 85 F1 | 	sub	objptr, ##27144
082c0     02 00 00 FF 
082c4     00 36 56 F2 | 	cmps	local09, ##1024 wc
082c8     2D 30 06 36 |  if_ae	mov	local06, #45
082cc     C8 01 90 3D |  if_ae	jmp	#LR__0730
082d0     17 27 02 F6 | 	mov	local01, local05
082d4     17 2A 06 F6 | 	mov	local03, #23
082d8     13 37 02 F6 | 	mov	local09, local01
082dc     14 3D 02 F6 | 	mov	local12, local02
082e0     15 27 02 F6 | 	mov	local01, local03
082e4     4A 00 00 FF 
082e8     7C E4 05 F1 | 	add	objptr, ##38012
082ec     F2 3A 02 FB | 	rdlong	local11, objptr
082f0     1D 39 02 F6 | 	mov	local10, local11
082f4     01 38 66 F0 | 	shl	local10, #1
082f8     1D 39 02 F1 | 	add	local10, local11
082fc     02 38 66 F0 | 	shl	local10, #2
08300     03 00 00 FF 
08304     00 E4 85 F1 | 	sub	objptr, ##1536
08308     F2 38 02 F1 | 	add	local10, objptr
0830c     1C 37 62 FC | 	wrlong	local09, local10
08310     03 00 00 FF 
08314     00 E4 05 F1 | 	add	objptr, ##1536
08318     F2 36 02 FB | 	rdlong	local09, objptr
0831c     1B 3B 02 F6 | 	mov	local11, local09
08320     01 3A 66 F0 | 	shl	local11, #1
08324     1B 3B 02 F1 | 	add	local11, local09
08328     02 3A 66 F0 | 	shl	local11, #2
0832c     03 00 00 FF 
08330     00 E4 85 F1 | 	sub	objptr, ##1536
08334     F2 3A 02 F1 | 	add	local11, objptr
08338     04 3A 06 F1 | 	add	local11, #4
0833c     1D 3D 62 FC | 	wrlong	local12, local11
08340     03 00 00 FF 
08344     00 E4 05 F1 | 	add	objptr, ##1536
08348     F2 36 02 FB | 	rdlong	local09, objptr
0834c     1B 3D 02 F6 | 	mov	local12, local09
08350     01 3C 66 F0 | 	shl	local12, #1
08354     1B 3D 02 F1 | 	add	local12, local09
08358     02 3C 66 F0 | 	shl	local12, #2
0835c     03 00 00 FF 
08360     00 E4 85 F1 | 	sub	objptr, ##1536
08364     F2 3C 02 F1 | 	add	local12, objptr
08368     08 3C 06 F1 | 	add	local12, #8
0836c     1E 27 62 FC | 	wrlong	local01, local12
08370     03 00 00 FF 
08374     00 E4 05 F1 | 	add	objptr, ##1536
08378     F2 36 02 FB | 	rdlong	local09, objptr
0837c     01 36 06 F1 | 	add	local09, #1
08380     F2 36 62 FC | 	wrlong	local09, objptr
08384     4A 00 00 FF 
08388     7C E4 85 F1 | 	sub	objptr, ##38012
0838c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
0838c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
0838c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
0838c     03 2C 0E F2 | 	cmp	local04, #3 wz
08390     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
08394     38 00 90 5D |  if_ne	jmp	#LR__0726
08398     4A 00 00 FF 
0839c     7C E4 05 F1 | 	add	objptr, ##38012
083a0     F2 3C 02 FB | 	rdlong	local12, objptr
083a4     1E 27 02 F6 | 	mov	local01, local12
083a8     01 26 66 F0 | 	shl	local01, #1
083ac     1E 27 02 F1 | 	add	local01, local12
083b0     02 26 66 F0 | 	shl	local01, #2
083b4     03 00 00 FF 
083b8     00 E4 85 F1 | 	sub	objptr, ##1536
083bc     F2 26 02 F1 | 	add	local01, objptr
083c0     08 26 06 F1 | 	add	local01, #8
083c4     13 FD 6B FC | 	wrlong	#510, local01
083c8     47 00 00 FF 
083cc     7C E4 85 F1 | 	sub	objptr, ##36476
083d0                 | LR__0726
083d0                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
083d0     4A 00 00 FF 
083d4     7C E4 05 F1 | 	add	objptr, ##38012
083d8     F2 38 02 FB | 	rdlong	local10, objptr
083dc     4A 00 00 FF 
083e0     7C E4 85 F1 | 	sub	objptr, ##38012
083e4     97 58 48 FB | 	callpa	#(@LR__0729-@LR__0727)>>2,fcache_load_ptr_
083e8                 | LR__0727
083e8     1C 3D 02 F6 | 	mov	local12, local10
083ec     01 3C 66 F0 | 	shl	local12, #1
083f0     1C 3D 02 F1 | 	add	local12, local10
083f4     02 3C 66 F0 | 	shl	local12, #2
083f8     47 00 00 FF 
083fc     7C E4 05 F1 | 	add	objptr, ##36476
08400     F2 3C 02 F1 | 	add	local12, objptr
08404     08 3C 06 F1 | 	add	local12, #8
08408     1E 3D 02 FB | 	rdlong	local12, local12
0840c     9B 3C 0E F2 | 	cmp	local12, #155 wz
08410     47 00 00 FF 
08414     7C E4 85 F1 | 	sub	objptr, ##36476
08418     70 00 90 5D |  if_ne	jmp	#LR__0728
0841c     1C 3D 02 F6 | 	mov	local12, local10
08420     01 3C 86 F1 | 	sub	local12, #1
08424     1E 27 02 F6 | 	mov	local01, local12
08428     01 26 66 F0 | 	shl	local01, #1
0842c     1E 27 02 F1 | 	add	local01, local12
08430     02 26 66 F0 | 	shl	local01, #2
08434     47 00 00 FF 
08438     7C E4 05 F1 | 	add	objptr, ##36476
0843c     F2 26 02 F1 | 	add	local01, objptr
08440     08 26 06 F1 | 	add	local01, #8
08444     13 27 02 FB | 	rdlong	local01, local01
08448     11 26 0E F2 | 	cmp	local01, #17 wz
0844c     47 00 00 FF 
08450     7C E4 85 F1 | 	sub	objptr, ##36476
08454     34 00 90 5D |  if_ne	jmp	#LR__0728
08458     1C 3D 02 F6 | 	mov	local12, local10
0845c     01 3C 86 F1 | 	sub	local12, #1
08460     1E 27 02 F6 | 	mov	local01, local12
08464     01 26 66 F0 | 	shl	local01, #1
08468     1E 27 02 F1 | 	add	local01, local12
0846c     02 26 66 F0 | 	shl	local01, #2
08470     47 00 00 FF 
08474     7C E4 05 F1 | 	add	objptr, ##36476
08478     F2 26 02 F1 | 	add	local01, objptr
0847c     08 26 06 F1 | 	add	local01, #8
08480     13 25 68 FC | 	wrlong	#18, local01
08484     47 00 00 FF 
08488     7C E4 85 F1 | 	sub	objptr, ##36476
0848c                 | LR__0728
0848c     01 38 86 F1 | 	sub	local10, #1
08490     01 38 56 F2 | 	cmps	local10, #1 wc
08494     50 FF 9F 3D |  if_ae	jmp	#LR__0727
08498                 | LR__0729
08498                 | LR__0730
08498                 | ' return err
08498     18 FB 01 F6 | 	mov	result1, local06
0849c     A7 F0 03 F6 | 	mov	ptra, fp
084a0     B2 00 A0 FD | 	call	#popregs_
084a4                 | _compile_immediate_assign_ret
084a4     2D 00 64 FD | 	ret
084a8                 | 
084a8                 | ' 
084a8                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
084a8                 | ' 
084a8                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
084a8                 | _compile
084a8     03 4A 05 F6 | 	mov	COUNT_, #3
084ac     A8 00 A0 FD | 	call	#pushregs_
084b0     09 27 02 F6 | 	mov	local01, arg01
084b4     0B 29 02 F6 | 	mov	local02, arg03
084b8     47 00 00 FF 
084bc     7C E4 05 F1 | 	add	objptr, ##36476
084c0     F2 26 62 FC | 	wrlong	local01, objptr
084c4     04 E4 05 F1 | 	add	objptr, #4
084c8     F2 14 62 FC | 	wrlong	arg02, objptr
084cc     47 00 00 FF 
084d0     80 E4 85 F1 | 	sub	objptr, ##36480
084d4     14 13 02 F6 | 	mov	arg01, local02
084d8     01 12 06 F1 | 	add	arg01, #1
084dc     13 15 02 F6 | 	mov	arg02, local01
084e0     5C F2 BF FD | 	call	#_compile_immediate
084e4     FD 2A 0A F6 | 	mov	local03, result1 wz
084e8                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
084e8                 | ' ucompiledline(0)=alinemajor
084e8                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
084e8                 | ' 
084e8                 | ' ' cont: 
084e8                 | ' ' 0 - this is the first part of the line that will continue
084e8                 | ' ' 1 - this is the continuation of the line
084e8                 | ' ' 2 - this is the last continued line
084e8                 | ' ' 3 - this is the one and only part
084e8                 | ' 
084e8                 | ' err=compile_immediate(cont+1,alinemajor) 
084e8                 | ' if err=0 andalso alinemajor>0 then
084e8     74 00 90 5D |  if_ne	jmp	#LR__0745
084ec     01 26 16 F2 | 	cmp	local01, #1 wc
084f0     6C 00 90 CD |  if_b	jmp	#LR__0745
084f4                 | '   if cont=3 orelse cont=2 then 
084f4     03 28 0E F2 | 	cmp	local02, #3 wz
084f8     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
084fc     60 00 90 5D |  if_ne	jmp	#LR__0744
08500                 | '     if alinemajor >lastline then 
08500     4A 00 00 FF 
08504     8C E4 05 F1 | 	add	objptr, ##38028
08508     F2 14 02 FB | 	rdlong	arg02, objptr
0850c     4A 00 00 FF 
08510     8C E4 85 F1 | 	sub	objptr, ##38028
08514     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08518     0C 00 90 ED |  if_be	jmp	#LR__0740
0851c     13 13 02 F6 | 	mov	arg01, local01
08520     54 F1 BF FD | 	call	#_add_line_at_end
08524     38 00 90 FD | 	jmp	#LR__0743
08528                 | LR__0740
08528     13 13 02 F6 | 	mov	arg01, local01
0852c     18 EB BF FD | 	call	#_deleteline
08530                 | '       deleteline(alinemajor)  
08530                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08530     4A 00 00 FF 
08534     8C E4 05 F1 | 	add	objptr, ##38028
08538     F2 14 02 FB | 	rdlong	arg02, objptr
0853c     4A 00 00 FF 
08540     8C E4 85 F1 | 	sub	objptr, ##38028
08544     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08548     0C 00 90 ED |  if_be	jmp	#LR__0741
0854c     13 13 02 F6 | 	mov	arg01, local01
08550     24 F1 BF FD | 	call	#_add_line_at_end
08554     08 00 90 FD | 	jmp	#LR__0742
08558                 | LR__0741
08558     13 13 02 F6 | 	mov	arg01, local01
0855c     FC EE BF FD | 	call	#_insertline
08560                 | LR__0742
08560                 | LR__0743
08560                 | LR__0744
08560                 | LR__0745
08560                 | ' return err
08560     15 FB 01 F6 | 	mov	result1, local03
08564     A7 F0 03 F6 | 	mov	ptra, fp
08568     B2 00 A0 FD | 	call	#popregs_
0856c                 | _compile_ret
0856c     2D 00 64 FD | 	ret
08570                 | 
08570                 | ' 
08570                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08570                 | ' 
08570                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08570                 | _compile_assign
08570     03 4A 05 F6 | 	mov	COUNT_, #3
08574     A8 00 A0 FD | 	call	#pushregs_
08578     09 27 02 F6 | 	mov	local01, arg01
0857c     0B 29 02 F6 | 	mov	local02, arg03
08580     47 00 00 FF 
08584     7C E4 05 F1 | 	add	objptr, ##36476
08588     F2 26 62 FC | 	wrlong	local01, objptr
0858c     04 E4 05 F1 | 	add	objptr, #4
08590     F2 14 62 FC | 	wrlong	arg02, objptr
08594     47 00 00 FF 
08598     80 E4 85 F1 | 	sub	objptr, ##36480
0859c     14 13 02 F6 | 	mov	arg01, local02
085a0     01 12 06 F1 | 	add	arg01, #1
085a4     54 FB BF FD | 	call	#_compile_immediate_assign
085a8     FD 2A 02 F6 | 	mov	local03, result1
085ac                 | ' 
085ac                 | ' ucompiledline(0)=alinemajor
085ac                 | ' ucompiledline(1)=alineminor
085ac                 | ' 
085ac                 | ' err=compile_immediate_assign(cont+1) 
085ac                 | ' if alinemajor>0 then
085ac     01 26 16 F2 | 	cmp	local01, #1 wc
085b0     6C 00 90 CD |  if_b	jmp	#LR__0755
085b4                 | '   if cont=3 orelse cont=2 then 
085b4     03 28 0E F2 | 	cmp	local02, #3 wz
085b8     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
085bc     60 00 90 5D |  if_ne	jmp	#LR__0754
085c0                 | '     if alinemajor >lastline then 
085c0     4A 00 00 FF 
085c4     8C E4 05 F1 | 	add	objptr, ##38028
085c8     F2 14 02 FB | 	rdlong	arg02, objptr
085cc     4A 00 00 FF 
085d0     8C E4 85 F1 | 	sub	objptr, ##38028
085d4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
085d8     0C 00 90 ED |  if_be	jmp	#LR__0750
085dc     13 13 02 F6 | 	mov	arg01, local01
085e0     94 F0 BF FD | 	call	#_add_line_at_end
085e4     38 00 90 FD | 	jmp	#LR__0753
085e8                 | LR__0750
085e8     13 13 02 F6 | 	mov	arg01, local01
085ec     58 EA BF FD | 	call	#_deleteline
085f0                 | '       deleteline(alinemajor)  
085f0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
085f0     4A 00 00 FF 
085f4     8C E4 05 F1 | 	add	objptr, ##38028
085f8     F2 14 02 FB | 	rdlong	arg02, objptr
085fc     4A 00 00 FF 
08600     8C E4 85 F1 | 	sub	objptr, ##38028
08604     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08608     0C 00 90 ED |  if_be	jmp	#LR__0751
0860c     13 13 02 F6 | 	mov	arg01, local01
08610     64 F0 BF FD | 	call	#_add_line_at_end
08614     08 00 90 FD | 	jmp	#LR__0752
08618                 | LR__0751
08618     13 13 02 F6 | 	mov	arg01, local01
0861c     3C EE BF FD | 	call	#_insertline
08620                 | LR__0752
08620                 | LR__0753
08620                 | LR__0754
08620                 | LR__0755
08620                 | ' return err
08620     15 FB 01 F6 | 	mov	result1, local03
08624     A7 F0 03 F6 | 	mov	ptra, fp
08628     B2 00 A0 FD | 	call	#popregs_
0862c                 | _compile_assign_ret
0862c     2D 00 64 FD | 	ret
08630                 | 
08630                 | ' 
08630                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08630                 | ' 
08630                 | ' function compile_fun_2p() as ulong
08630                 | _compile_fun_2p
08630     01 4A 05 F6 | 	mov	COUNT_, #1
08634     A8 00 A0 FD | 	call	#pushregs_
08638     30 37 B0 FD | 	call	#_expr
0863c     FD 26 02 F6 | 	mov	local01, result1
08640                 | ' err=expr() : if err>0 then return err
08640     01 26 16 F2 | 	cmp	local01, #1 wc
08644     13 FB 01 36 |  if_ae	mov	result1, local01
08648     60 00 90 3D |  if_ae	jmp	#LR__0760
0864c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0864c     37 00 00 FF 
08650     44 E4 05 F1 | 	add	objptr, ##28228
08654     F2 26 02 FB | 	rdlong	local01, objptr
08658     03 26 66 F0 | 	shl	local01, #3
0865c     02 00 00 FF 
08660     38 E4 85 F1 | 	sub	objptr, ##1080
08664     F2 26 02 F1 | 	add	local01, objptr
08668     04 26 06 F1 | 	add	local01, #4
0866c     13 27 02 FB | 	rdlong	local01, local01
08670     11 26 0E F2 | 	cmp	local01, #17 wz
08674     35 00 00 FF 
08678     0C E4 85 F1 | 	sub	objptr, ##27148
0867c     15 FA 05 56 |  if_ne	mov	result1, #21
08680     28 00 90 5D |  if_ne	jmp	#LR__0760
08684     37 00 00 FF 
08688     44 E4 05 F1 | 	add	objptr, ##28228
0868c     F2 26 02 FB | 	rdlong	local01, objptr
08690     01 26 06 F1 | 	add	local01, #1
08694     F2 26 62 FC | 	wrlong	local01, objptr
08698     37 00 00 FF 
0869c     44 E4 85 F1 | 	sub	objptr, ##28228
086a0     C8 36 B0 FD | 	call	#_expr
086a4                 | ' err=expr() : if err>0 then return err
086a4     01 FA 15 F2 | 	cmp	result1, #1 wc
086a8                 | ' return 0
086a8     00 FA 05 C6 |  if_b	mov	result1, #0
086ac                 | LR__0760
086ac     A7 F0 03 F6 | 	mov	ptra, fp
086b0     B2 00 A0 FD | 	call	#popregs_
086b4                 | _compile_fun_2p_ret
086b4     2D 00 64 FD | 	ret
086b8                 | 
086b8                 | ' 
086b8                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
086b8                 | ' 
086b8                 | ' function compile_fun_3p() as ulong
086b8                 | _compile_fun_3p
086b8     01 4A 05 F6 | 	mov	COUNT_, #1
086bc     A8 00 A0 FD | 	call	#pushregs_
086c0     A8 36 B0 FD | 	call	#_expr
086c4     FD 26 02 F6 | 	mov	local01, result1
086c8                 | ' err=expr() : if err>0 then return err
086c8     01 26 16 F2 | 	cmp	local01, #1 wc
086cc     13 FB 01 36 |  if_ae	mov	result1, local01
086d0     C8 00 90 3D |  if_ae	jmp	#LR__0770
086d4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
086d4     37 00 00 FF 
086d8     44 E4 05 F1 | 	add	objptr, ##28228
086dc     F2 26 02 FB | 	rdlong	local01, objptr
086e0     03 26 66 F0 | 	shl	local01, #3
086e4     02 00 00 FF 
086e8     38 E4 85 F1 | 	sub	objptr, ##1080
086ec     F2 26 02 F1 | 	add	local01, objptr
086f0     04 26 06 F1 | 	add	local01, #4
086f4     13 27 02 FB | 	rdlong	local01, local01
086f8     11 26 0E F2 | 	cmp	local01, #17 wz
086fc     35 00 00 FF 
08700     0C E4 85 F1 | 	sub	objptr, ##27148
08704     15 FA 05 56 |  if_ne	mov	result1, #21
08708     90 00 90 5D |  if_ne	jmp	#LR__0770
0870c     37 00 00 FF 
08710     44 E4 05 F1 | 	add	objptr, ##28228
08714     F2 26 02 FB | 	rdlong	local01, objptr
08718     01 26 06 F1 | 	add	local01, #1
0871c     F2 26 62 FC | 	wrlong	local01, objptr
08720     37 00 00 FF 
08724     44 E4 85 F1 | 	sub	objptr, ##28228
08728     40 36 B0 FD | 	call	#_expr
0872c     FD 26 02 F6 | 	mov	local01, result1
08730                 | ' err=expr() : if err>0 then return err
08730     01 26 16 F2 | 	cmp	local01, #1 wc
08734     13 FB 01 36 |  if_ae	mov	result1, local01
08738     60 00 90 3D |  if_ae	jmp	#LR__0770
0873c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0873c     37 00 00 FF 
08740     44 E4 05 F1 | 	add	objptr, ##28228
08744     F2 26 02 FB | 	rdlong	local01, objptr
08748     03 26 66 F0 | 	shl	local01, #3
0874c     02 00 00 FF 
08750     38 E4 85 F1 | 	sub	objptr, ##1080
08754     F2 26 02 F1 | 	add	local01, objptr
08758     04 26 06 F1 | 	add	local01, #4
0875c     13 27 02 FB | 	rdlong	local01, local01
08760     11 26 0E F2 | 	cmp	local01, #17 wz
08764     35 00 00 FF 
08768     0C E4 85 F1 | 	sub	objptr, ##27148
0876c     15 FA 05 56 |  if_ne	mov	result1, #21
08770     28 00 90 5D |  if_ne	jmp	#LR__0770
08774     37 00 00 FF 
08778     44 E4 05 F1 | 	add	objptr, ##28228
0877c     F2 26 02 FB | 	rdlong	local01, objptr
08780     01 26 06 F1 | 	add	local01, #1
08784     F2 26 62 FC | 	wrlong	local01, objptr
08788     37 00 00 FF 
0878c     44 E4 85 F1 | 	sub	objptr, ##28228
08790     D8 35 B0 FD | 	call	#_expr
08794                 | ' err=expr() : if err>0 then return err
08794     01 FA 15 F2 | 	cmp	result1, #1 wc
08798                 | ' return 0
08798     00 FA 05 C6 |  if_b	mov	result1, #0
0879c                 | LR__0770
0879c     A7 F0 03 F6 | 	mov	ptra, fp
087a0     B2 00 A0 FD | 	call	#popregs_
087a4                 | _compile_fun_3p_ret
087a4     2D 00 64 FD | 	ret
087a8                 | 
087a8                 | ' 
087a8                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
087a8                 | ' 
087a8                 | ' function compile_fun_4p() as ulong
087a8                 | _compile_fun_4p
087a8     01 4A 05 F6 | 	mov	COUNT_, #1
087ac     A8 00 A0 FD | 	call	#pushregs_
087b0     B8 35 B0 FD | 	call	#_expr
087b4     FD 26 02 F6 | 	mov	local01, result1
087b8                 | ' err=expr() : if err>0 then return err
087b8     01 26 16 F2 | 	cmp	local01, #1 wc
087bc     13 FB 01 36 |  if_ae	mov	result1, local01
087c0     30 01 90 3D |  if_ae	jmp	#LR__0780
087c4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
087c4     37 00 00 FF 
087c8     44 E4 05 F1 | 	add	objptr, ##28228
087cc     F2 26 02 FB | 	rdlong	local01, objptr
087d0     03 26 66 F0 | 	shl	local01, #3
087d4     02 00 00 FF 
087d8     38 E4 85 F1 | 	sub	objptr, ##1080
087dc     F2 26 02 F1 | 	add	local01, objptr
087e0     04 26 06 F1 | 	add	local01, #4
087e4     13 27 02 FB | 	rdlong	local01, local01
087e8     11 26 0E F2 | 	cmp	local01, #17 wz
087ec     35 00 00 FF 
087f0     0C E4 85 F1 | 	sub	objptr, ##27148
087f4     15 FA 05 56 |  if_ne	mov	result1, #21
087f8     F8 00 90 5D |  if_ne	jmp	#LR__0780
087fc     37 00 00 FF 
08800     44 E4 05 F1 | 	add	objptr, ##28228
08804     F2 26 02 FB | 	rdlong	local01, objptr
08808     01 26 06 F1 | 	add	local01, #1
0880c     F2 26 62 FC | 	wrlong	local01, objptr
08810     37 00 00 FF 
08814     44 E4 85 F1 | 	sub	objptr, ##28228
08818     50 35 B0 FD | 	call	#_expr
0881c     FD 26 02 F6 | 	mov	local01, result1
08820                 | ' err=expr() : if err>0 then return err
08820     01 26 16 F2 | 	cmp	local01, #1 wc
08824     13 FB 01 36 |  if_ae	mov	result1, local01
08828     C8 00 90 3D |  if_ae	jmp	#LR__0780
0882c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
0882c     37 00 00 FF 
08830     44 E4 05 F1 | 	add	objptr, ##28228
08834     F2 26 02 FB | 	rdlong	local01, objptr
08838     03 26 66 F0 | 	shl	local01, #3
0883c     02 00 00 FF 
08840     38 E4 85 F1 | 	sub	objptr, ##1080
08844     F2 26 02 F1 | 	add	local01, objptr
08848     04 26 06 F1 | 	add	local01, #4
0884c     13 27 02 FB | 	rdlong	local01, local01
08850     11 26 0E F2 | 	cmp	local01, #17 wz
08854     35 00 00 FF 
08858     0C E4 85 F1 | 	sub	objptr, ##27148
0885c     15 FA 05 56 |  if_ne	mov	result1, #21
08860     90 00 90 5D |  if_ne	jmp	#LR__0780
08864     37 00 00 FF 
08868     44 E4 05 F1 | 	add	objptr, ##28228
0886c     F2 26 02 FB | 	rdlong	local01, objptr
08870     01 26 06 F1 | 	add	local01, #1
08874     F2 26 62 FC | 	wrlong	local01, objptr
08878     37 00 00 FF 
0887c     44 E4 85 F1 | 	sub	objptr, ##28228
08880     E8 34 B0 FD | 	call	#_expr
08884     FD 26 02 F6 | 	mov	local01, result1
08888                 | ' err=expr() : if err>0 then return err
08888     01 26 16 F2 | 	cmp	local01, #1 wc
0888c     13 FB 01 36 |  if_ae	mov	result1, local01
08890     60 00 90 3D |  if_ae	jmp	#LR__0780
08894                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08894     37 00 00 FF 
08898     44 E4 05 F1 | 	add	objptr, ##28228
0889c     F2 26 02 FB | 	rdlong	local01, objptr
088a0     03 26 66 F0 | 	shl	local01, #3
088a4     02 00 00 FF 
088a8     38 E4 85 F1 | 	sub	objptr, ##1080
088ac     F2 26 02 F1 | 	add	local01, objptr
088b0     04 26 06 F1 | 	add	local01, #4
088b4     13 27 02 FB | 	rdlong	local01, local01
088b8     11 26 0E F2 | 	cmp	local01, #17 wz
088bc     35 00 00 FF 
088c0     0C E4 85 F1 | 	sub	objptr, ##27148
088c4     15 FA 05 56 |  if_ne	mov	result1, #21
088c8     28 00 90 5D |  if_ne	jmp	#LR__0780
088cc     37 00 00 FF 
088d0     44 E4 05 F1 | 	add	objptr, ##28228
088d4     F2 26 02 FB | 	rdlong	local01, objptr
088d8     01 26 06 F1 | 	add	local01, #1
088dc     F2 26 62 FC | 	wrlong	local01, objptr
088e0     37 00 00 FF 
088e4     44 E4 85 F1 | 	sub	objptr, ##28228
088e8     80 34 B0 FD | 	call	#_expr
088ec                 | ' err=expr() : if err>0 then return err
088ec     01 FA 15 F2 | 	cmp	result1, #1 wc
088f0                 | ' return 0
088f0     00 FA 05 C6 |  if_b	mov	result1, #0
088f4                 | LR__0780
088f4     A7 F0 03 F6 | 	mov	ptra, fp
088f8     B2 00 A0 FD | 	call	#popregs_
088fc                 | _compile_fun_4p_ret
088fc     2D 00 64 FD | 	ret
08900                 | 
08900                 | ' 
08900                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
08900                 | ' 
08900                 | ' function compile_fun_varp() as ulong,ulong 
08900                 | _compile_fun_varp
08900     03 4A 05 F6 | 	mov	COUNT_, #3
08904     A8 00 A0 FD | 	call	#pushregs_
08908     00 26 06 F6 | 	mov	local01, #0
0890c                 | ' 
0890c                 | ' i=0 : err=0
0890c                 | ' if lparts(ct).token<>token_end then
0890c     37 00 00 FF 
08910     44 E4 05 F1 | 	add	objptr, ##28228
08914     F2 28 02 FB | 	rdlong	local02, objptr
08918     03 28 66 F0 | 	shl	local02, #3
0891c     02 00 00 FF 
08920     38 E4 85 F1 | 	sub	objptr, ##1080
08924     F2 28 02 F1 | 	add	local02, objptr
08928     04 28 06 F1 | 	add	local02, #4
0892c     14 29 02 FB | 	rdlong	local02, local02
08930     FE 29 0E F2 | 	cmp	local02, #510 wz
08934     35 00 00 FF 
08938     0C E4 85 F1 | 	sub	objptr, ##27148
0893c     88 00 90 AD |  if_e	jmp	#LR__0791
08940                 | '   do
08940                 | LR__0790
08940     28 34 B0 FD | 	call	#_expr
08944     01 26 06 F1 | 	add	local01, #1
08948                 | '     expr()
08948                 | '     i+=1
08948                 | '     if lparts(ct).token=token_comma then ct+=1
08948     37 00 00 FF 
0894c     44 E4 05 F1 | 	add	objptr, ##28228
08950     F2 28 02 FB | 	rdlong	local02, objptr
08954     03 28 66 F0 | 	shl	local02, #3
08958     02 00 00 FF 
0895c     38 E4 85 F1 | 	sub	objptr, ##1080
08960     F2 28 02 F1 | 	add	local02, objptr
08964     04 28 06 F1 | 	add	local02, #4
08968     14 29 02 FB | 	rdlong	local02, local02
0896c     11 28 0E F2 | 	cmp	local02, #17 wz
08970     35 00 00 FF 
08974     0C E4 85 F1 | 	sub	objptr, ##27148
08978     37 00 00 AF 
0897c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08980     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08984     01 2A 06 A1 |  if_e	add	local03, #1
08988     F2 2A 62 AC |  if_e	wrlong	local03, objptr
0898c     37 00 00 AF 
08990     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08994                 | '     if lparts(ct).token=token_end then exit loop
08994     37 00 00 FF 
08998     44 E4 05 F1 | 	add	objptr, ##28228
0899c     F2 28 02 FB | 	rdlong	local02, objptr
089a0     03 28 66 F0 | 	shl	local02, #3
089a4     02 00 00 FF 
089a8     38 E4 85 F1 | 	sub	objptr, ##1080
089ac     F2 28 02 F1 | 	add	local02, objptr
089b0     04 28 06 F1 | 	add	local02, #4
089b4     14 29 02 FB | 	rdlong	local02, local02
089b8     FE 29 0E F2 | 	cmp	local02, #510 wz
089bc     35 00 00 FF 
089c0     0C E4 85 F1 | 	sub	objptr, ##27148
089c4     78 FF 9F 5D |  if_ne	jmp	#LR__0790
089c8                 | LR__0791
089c8                 | ' return i,err
089c8     13 FB 01 F6 | 	mov	result1, local01
089cc     00 FC 05 F6 | 	mov	result2, #0
089d0     A7 F0 03 F6 | 	mov	ptra, fp
089d4     B2 00 A0 FD | 	call	#popregs_
089d8                 | _compile_fun_varp_ret
089d8     2D 00 64 FD | 	ret
089dc                 | 
089dc                 | ' 
089dc                 | ' '----  Compile read. The same as compile_input() except printing a prompt
089dc                 | ' 
089dc                 | ' function compile_read() as ulong,ulong 
089dc                 | _compile_read
089dc     04 4A 05 F6 | 	mov	COUNT_, #4
089e0     A8 00 A0 FD | 	call	#pushregs_
089e4     00 26 06 F6 | 	mov	local01, #0
089e8                 | ' 
089e8                 | ' i=0 : err=0
089e8                 | ' if lparts(ct).token<>token_end then
089e8     37 00 00 FF 
089ec     44 E4 05 F1 | 	add	objptr, ##28228
089f0     F2 28 02 FB | 	rdlong	local02, objptr
089f4     03 28 66 F0 | 	shl	local02, #3
089f8     02 00 00 FF 
089fc     38 E4 85 F1 | 	sub	objptr, ##1080
08a00     F2 28 02 F1 | 	add	local02, objptr
08a04     04 28 06 F1 | 	add	local02, #4
08a08     14 29 02 FB | 	rdlong	local02, local02
08a0c     FE 29 0E F2 | 	cmp	local02, #510 wz
08a10     35 00 00 FF 
08a14     0C E4 85 F1 | 	sub	objptr, ##27148
08a18     98 00 90 AD |  if_e	jmp	#LR__0801
08a1c                 | '   do
08a1c                 | LR__0800
08a1c     B8 2F B0 FD | 	call	#_getaddr
08a20     FD 2A 02 F6 | 	mov	local03, result1
08a24     37 00 00 FF 
08a28     44 E4 05 F1 | 	add	objptr, ##28228
08a2c     F2 28 02 FB | 	rdlong	local02, objptr
08a30     01 28 06 F1 | 	add	local02, #1
08a34     F2 28 62 FC | 	wrlong	local02, objptr
08a38     01 26 06 F1 | 	add	local01, #1
08a3c                 | '     err=getaddr() :ct+=1
08a3c                 | '     i+=1 
08a3c                 | '     if lparts(ct).token=token_comma then ct+=1 
08a3c     03 28 66 F0 | 	shl	local02, #3
08a40     02 00 00 FF 
08a44     38 E4 85 F1 | 	sub	objptr, ##1080
08a48     F2 28 02 F1 | 	add	local02, objptr
08a4c     04 28 06 F1 | 	add	local02, #4
08a50     14 29 02 FB | 	rdlong	local02, local02
08a54     11 28 0E F2 | 	cmp	local02, #17 wz
08a58     35 00 00 FF 
08a5c     0C E4 85 F1 | 	sub	objptr, ##27148
08a60     37 00 00 AF 
08a64     44 E4 05 A1 |  if_e	add	objptr, ##28228
08a68     F2 2C 02 AB |  if_e	rdlong	local04, objptr
08a6c     01 2C 06 A1 |  if_e	add	local04, #1
08a70     F2 2C 62 AC |  if_e	wrlong	local04, objptr
08a74     37 00 00 AF 
08a78     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08a7c                 | '     if lparts(ct).token=token_end then exit loop
08a7c     37 00 00 FF 
08a80     44 E4 05 F1 | 	add	objptr, ##28228
08a84     F2 28 02 FB | 	rdlong	local02, objptr
08a88     03 28 66 F0 | 	shl	local02, #3
08a8c     02 00 00 FF 
08a90     38 E4 85 F1 | 	sub	objptr, ##1080
08a94     F2 28 02 F1 | 	add	local02, objptr
08a98     04 28 06 F1 | 	add	local02, #4
08a9c     14 29 02 FB | 	rdlong	local02, local02
08aa0     FE 29 0E F2 | 	cmp	local02, #510 wz
08aa4     35 00 00 FF 
08aa8     0C E4 85 F1 | 	sub	objptr, ##27148
08aac     08 00 90 AD |  if_e	jmp	#LR__0802
08ab0     68 FF 9F FD | 	jmp	#LR__0800
08ab4                 | LR__0801
08ab4     36 2A 06 F6 | 	mov	local03, #54
08ab8                 | LR__0802
08ab8                 | ' return i,err
08ab8     13 FB 01 F6 | 	mov	result1, local01
08abc     15 FD 01 F6 | 	mov	result2, local03
08ac0     A7 F0 03 F6 | 	mov	ptra, fp
08ac4     B2 00 A0 FD | 	call	#popregs_
08ac8                 | _compile_read_ret
08ac8     2D 00 64 FD | 	ret
08acc                 | 
08acc                 | ' 
08acc                 | ' '----  Compile input. The same as compile_varp() except these has to be variables, and not expressions, and also we need getaddr and not getvar
08acc                 | ' 
08acc                 | ' function compile_input() as ulong,ulong 
08acc                 | _compile_input
08acc     0F 4A 05 F6 | 	mov	COUNT_, #15
08ad0     A8 00 A0 FD | 	call	#pushregs_
08ad4                 | ' 
08ad4                 | ' if lparts(ct).token=token_string then
08ad4     37 00 00 FF 
08ad8     44 E4 05 F1 | 	add	objptr, ##28228
08adc     F2 16 02 FB | 	rdlong	arg03, objptr
08ae0     03 16 66 F0 | 	shl	arg03, #3
08ae4     02 00 00 FF 
08ae8     38 E4 85 F1 | 	sub	objptr, ##1080
08aec     F2 16 02 F1 | 	add	arg03, objptr
08af0     04 16 06 F1 | 	add	arg03, #4
08af4     0B FD 01 FB | 	rdlong	result2, arg03
08af8     01 00 00 FF 
08afc     03 FC 0D F2 | 	cmp	result2, ##515 wz
08b00     35 00 00 FF 
08b04     0C E4 85 F1 | 	sub	objptr, ##27148
08b08     38 06 90 5D |  if_ne	jmp	#LR__0817
08b0c     37 00 00 FF 
08b10     44 E4 05 F1 | 	add	objptr, ##28228
08b14     F2 14 02 FB | 	rdlong	arg02, objptr
08b18     03 14 66 F0 | 	shl	arg02, #3
08b1c     02 00 00 FF 
08b20     38 E4 85 F1 | 	sub	objptr, ##1080
08b24     F2 14 02 F1 | 	add	arg02, objptr
08b28     0A 13 02 FB | 	rdlong	arg01, arg02
08b2c     35 00 00 FF 
08b30     0C E4 85 F1 | 	sub	objptr, ##27148
08b34     09 2D 02 F6 | 	mov	local04, arg01
08b38     97 06 48 FB | 	callpa	#(@LR__0811-@LR__0810)>>2,fcache_load_ptr_
08b3c                 | LR__0810
08b3c     16 FB C9 FA | 	rdbyte	result1, local04 wz
08b40     01 2C 06 51 |  if_ne	add	local04, #1
08b44     F4 FF 9F 5D |  if_ne	jmp	#LR__0810
08b48                 | LR__0811
08b48     09 2D 82 F1 | 	sub	local04, arg01
08b4c     16 FB 01 F6 | 	mov	result1, local04
08b50     52 00 00 FF 
08b54     F0 E4 05 F1 | 	add	objptr, ##42224
08b58     F2 FA 61 FC | 	wrlong	result1, objptr
08b5c     58 E4 85 F1 | 	sub	objptr, #88
08b60     F2 12 02 FB | 	rdlong	arg01, objptr
08b64     FD 12 82 F1 | 	sub	arg01, result1
08b68     04 12 86 F1 | 	sub	arg01, #4
08b6c     03 12 26 F5 | 	andn	arg01, #3
08b70     F2 12 62 FC | 	wrlong	arg01, objptr
08b74     58 E4 05 F1 | 	add	objptr, #88
08b78     F2 14 02 FB | 	rdlong	arg02, objptr
08b7c     52 00 00 FF 
08b80     F0 E4 85 F1 | 	sub	objptr, ##42224
08b84     40 A5 B1 FD | 	call	#_pslpoke
08b88                 | '   pslpoke memtop,l
08b88                 | '   for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
08b88     01 2E 06 F6 | 	mov	local05, #1
08b8c     52 00 00 FF 
08b90     F0 E4 05 F1 | 	add	objptr, ##42224
08b94     F2 30 02 FB | 	rdlong	local06, objptr
08b98     52 00 00 FF 
08b9c     F0 E4 85 F1 | 	sub	objptr, ##42224
08ba0     01 30 06 F1 | 	add	local06, #1
08ba4                 | LR__0812
08ba4     18 2F 52 F2 | 	cmps	local05, local06 wc
08ba8     5C 00 90 3D |  if_ae	jmp	#LR__0813
08bac     52 00 00 FF 
08bb0     98 E4 05 F1 | 	add	objptr, ##42136
08bb4     F2 32 02 FB | 	rdlong	local07, objptr
08bb8     03 32 06 F1 | 	add	local07, #3
08bbc     17 33 02 F1 | 	add	local07, local05
08bc0     1B 00 00 FF 
08bc4     54 E4 85 F1 | 	sub	objptr, ##13908
08bc8     F2 14 02 FB | 	rdlong	arg02, objptr
08bcc     03 14 66 F0 | 	shl	arg02, #3
08bd0     02 00 00 FF 
08bd4     38 E4 85 F1 | 	sub	objptr, ##1080
08bd8     F2 14 02 F1 | 	add	arg02, objptr
08bdc     0A 13 02 FB | 	rdlong	arg01, arg02
08be0     17 15 02 F6 | 	mov	arg02, local05
08be4     01 16 06 F6 | 	mov	arg03, #1
08be8     35 00 00 FF 
08bec     0C E4 85 F1 | 	sub	objptr, ##27148
08bf0     BC FE B1 FD | 	call	#__system__Mid_S
08bf4     FD 14 C2 FA | 	rdbyte	arg02, result1
08bf8     19 13 02 F6 | 	mov	arg01, local07
08bfc     58 A5 B1 FD | 	call	#_pspoke
08c00     01 2E 06 F1 | 	add	local05, #1
08c04     9C FF 9F FD | 	jmp	#LR__0812
08c08                 | LR__0813
08c08     52 00 00 FF 
08c0c     98 E4 05 F1 | 	add	objptr, ##42136
08c10     F2 26 02 FB | 	rdlong	local01, objptr
08c14     2B 2A 06 F6 | 	mov	local03, #43
08c18     13 35 02 F6 | 	mov	local08, local01
08c1c     14 33 02 F6 | 	mov	local07, local02
08c20     15 37 02 F6 | 	mov	local09, local03
08c24     08 00 00 FF 
08c28     1C E4 85 F1 | 	sub	objptr, ##4124
08c2c     F2 30 02 FB | 	rdlong	local06, objptr
08c30     18 2F 02 F6 | 	mov	local05, local06
08c34     01 2E 66 F0 | 	shl	local05, #1
08c38     18 2F 02 F1 | 	add	local05, local06
08c3c     02 2E 66 F0 | 	shl	local05, #2
08c40     03 00 00 FF 
08c44     00 E4 85 F1 | 	sub	objptr, ##1536
08c48     F2 2E 02 F1 | 	add	local05, objptr
08c4c     17 35 62 FC | 	wrlong	local08, local05
08c50     03 00 00 FF 
08c54     00 E4 05 F1 | 	add	objptr, ##1536
08c58     F2 34 02 FB | 	rdlong	local08, objptr
08c5c     1A 31 02 F6 | 	mov	local06, local08
08c60     01 30 66 F0 | 	shl	local06, #1
08c64     1A 31 02 F1 | 	add	local06, local08
08c68     02 30 66 F0 | 	shl	local06, #2
08c6c     03 00 00 FF 
08c70     00 E4 85 F1 | 	sub	objptr, ##1536
08c74     F2 30 02 F1 | 	add	local06, objptr
08c78     04 30 06 F1 | 	add	local06, #4
08c7c     18 33 62 FC | 	wrlong	local07, local06
08c80     03 00 00 FF 
08c84     00 E4 05 F1 | 	add	objptr, ##1536
08c88     F2 34 02 FB | 	rdlong	local08, objptr
08c8c     1A 33 02 F6 | 	mov	local07, local08
08c90     01 32 66 F0 | 	shl	local07, #1
08c94     1A 33 02 F1 | 	add	local07, local08
08c98     02 32 66 F0 | 	shl	local07, #2
08c9c     03 00 00 FF 
08ca0     00 E4 85 F1 | 	sub	objptr, ##1536
08ca4     F2 32 02 F1 | 	add	local07, objptr
08ca8     08 32 06 F1 | 	add	local07, #8
08cac     19 37 62 FC | 	wrlong	local09, local07
08cb0     03 00 00 FF 
08cb4     00 E4 05 F1 | 	add	objptr, ##1536
08cb8     F2 34 02 FB | 	rdlong	local08, objptr
08cbc     01 34 06 F1 | 	add	local08, #1
08cc0     F2 34 62 FC | 	wrlong	local08, objptr
08cc4     13 00 00 FF 
08cc8     38 E4 85 F1 | 	sub	objptr, ##9784
08ccc     F2 34 02 FB | 	rdlong	local08, objptr
08cd0     01 34 06 F1 | 	add	local08, #1
08cd4     F2 34 62 FC | 	wrlong	local08, objptr
08cd8                 | '   t1.result.uresult=memtop
08cd8                 | '   t1.result_type=result_string2  
08cd8                 | '   compiledline(lineptr)=t1: lineptr+=1 :ct+=1
08cd8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08cd8     03 34 66 F0 | 	shl	local08, #3
08cdc     02 00 00 FF 
08ce0     38 E4 85 F1 | 	sub	objptr, ##1080
08ce4     F2 34 02 F1 | 	add	local08, objptr
08ce8     04 34 06 F1 | 	add	local08, #4
08cec     1A 35 02 FB | 	rdlong	local08, local08
08cf0     11 34 0E F2 | 	cmp	local08, #17 wz
08cf4     35 00 00 FF 
08cf8     0C E4 85 F1 | 	sub	objptr, ##27148
08cfc     60 01 90 5D |  if_ne	jmp	#LR__0814
08d00     21 2A 06 F6 | 	mov	local03, #33
08d04     13 35 02 F6 | 	mov	local08, local01
08d08     14 33 02 F6 | 	mov	local07, local02
08d0c     15 39 02 F6 | 	mov	local10, local03
08d10     4A 00 00 FF 
08d14     7C E4 05 F1 | 	add	objptr, ##38012
08d18     F2 3A 02 FB | 	rdlong	local11, objptr
08d1c     1D 3D 02 F6 | 	mov	local12, local11
08d20     01 3C 66 F0 | 	shl	local12, #1
08d24     1D 3D 02 F1 | 	add	local12, local11
08d28     02 3C 66 F0 | 	shl	local12, #2
08d2c     03 00 00 FF 
08d30     00 E4 85 F1 | 	sub	objptr, ##1536
08d34     F2 3C 02 F1 | 	add	local12, objptr
08d38     1E 35 62 FC | 	wrlong	local08, local12
08d3c     03 00 00 FF 
08d40     00 E4 05 F1 | 	add	objptr, ##1536
08d44     F2 3E 02 FB | 	rdlong	local13, objptr
08d48     1F 35 02 F6 | 	mov	local08, local13
08d4c     01 34 66 F0 | 	shl	local08, #1
08d50     1F 35 02 F1 | 	add	local08, local13
08d54     02 34 66 F0 | 	shl	local08, #2
08d58     03 00 00 FF 
08d5c     00 E4 85 F1 | 	sub	objptr, ##1536
08d60     F2 34 02 F1 | 	add	local08, objptr
08d64     04 34 06 F1 | 	add	local08, #4
08d68     1A 33 62 FC | 	wrlong	local07, local08
08d6c     03 00 00 FF 
08d70     00 E4 05 F1 | 	add	objptr, ##1536
08d74     F2 34 02 FB | 	rdlong	local08, objptr
08d78     1A 41 02 F6 | 	mov	local14, local08
08d7c     01 40 66 F0 | 	shl	local14, #1
08d80     1A 41 02 F1 | 	add	local14, local08
08d84     02 40 66 F0 | 	shl	local14, #2
08d88     03 00 00 FF 
08d8c     00 E4 85 F1 | 	sub	objptr, ##1536
08d90     F2 40 02 F1 | 	add	local14, objptr
08d94     08 40 06 F1 | 	add	local14, #8
08d98     20 39 62 FC | 	wrlong	local10, local14
08d9c     03 00 00 FF 
08da0     00 E4 05 F1 | 	add	objptr, ##1536
08da4     F2 34 02 FB | 	rdlong	local08, objptr
08da8     01 34 06 F1 | 	add	local08, #1
08dac     F2 34 62 FC | 	wrlong	local08, objptr
08db0     44 2A 06 F6 | 	mov	local03, #68
08db4     13 35 02 F6 | 	mov	local08, local01
08db8     14 33 02 F6 | 	mov	local07, local02
08dbc     15 39 02 F6 | 	mov	local10, local03
08dc0     F2 40 02 FB | 	rdlong	local14, objptr
08dc4     20 3F 02 F6 | 	mov	local13, local14
08dc8     01 3E 66 F0 | 	shl	local13, #1
08dcc     20 3F 02 F1 | 	add	local13, local14
08dd0     02 3E 66 F0 | 	shl	local13, #2
08dd4     03 00 00 FF 
08dd8     00 E4 85 F1 | 	sub	objptr, ##1536
08ddc     F2 3E 02 F1 | 	add	local13, objptr
08de0     1F 35 62 FC | 	wrlong	local08, local13
08de4     03 00 00 FF 
08de8     00 E4 05 F1 | 	add	objptr, ##1536
08dec     F2 40 02 FB | 	rdlong	local14, objptr
08df0     20 3F 02 F6 | 	mov	local13, local14
08df4     01 3E 66 F0 | 	shl	local13, #1
08df8     20 3F 02 F1 | 	add	local13, local14
08dfc     02 3E 66 F0 | 	shl	local13, #2
08e00     03 00 00 FF 
08e04     00 E4 85 F1 | 	sub	objptr, ##1536
08e08     F2 3E 02 F1 | 	add	local13, objptr
08e0c     04 3E 06 F1 | 	add	local13, #4
08e10     1F 33 62 FC | 	wrlong	local07, local13
08e14     03 00 00 FF 
08e18     00 E4 05 F1 | 	add	objptr, ##1536
08e1c     F2 3E 02 FB | 	rdlong	local13, objptr
08e20     1F 41 02 F6 | 	mov	local14, local13
08e24     01 40 66 F0 | 	shl	local14, #1
08e28     1F 41 02 F1 | 	add	local14, local13
08e2c     02 40 66 F0 | 	shl	local14, #2
08e30     03 00 00 FF 
08e34     00 E4 85 F1 | 	sub	objptr, ##1536
08e38     F2 40 02 F1 | 	add	local14, objptr
08e3c     08 40 06 F1 | 	add	local14, #8
08e40     20 39 62 FC | 	wrlong	local10, local14
08e44     03 00 00 FF 
08e48     00 E4 05 F1 | 	add	objptr, ##1536
08e4c     F2 34 02 FB | 	rdlong	local08, objptr
08e50     01 34 06 F1 | 	add	local08, #1
08e54     F2 34 62 FC | 	wrlong	local08, objptr
08e58     4A 00 00 FF 
08e5c     7C E4 85 F1 | 	sub	objptr, ##38012
08e60                 | LR__0814
08e60                 | '   if lparts(ct).token=token_semicolon then t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08e60     37 00 00 FF 
08e64     44 E4 05 F1 | 	add	objptr, ##28228
08e68     F2 34 02 FB | 	rdlong	local08, objptr
08e6c     03 34 66 F0 | 	shl	local08, #3
08e70     02 00 00 FF 
08e74     38 E4 85 F1 | 	sub	objptr, ##1080
08e78     F2 34 02 F1 | 	add	local08, objptr
08e7c     04 34 06 F1 | 	add	local08, #4
08e80     1A 41 02 FB | 	rdlong	local14, local08
08e84     12 40 0E F2 | 	cmp	local14, #18 wz
08e88     35 00 00 FF 
08e8c     0C E4 85 F1 | 	sub	objptr, ##27148
08e90     60 01 90 5D |  if_ne	jmp	#LR__0815
08e94     22 2A 06 F6 | 	mov	local03, #34
08e98     13 35 02 F6 | 	mov	local08, local01
08e9c     14 33 02 F6 | 	mov	local07, local02
08ea0     15 39 02 F6 | 	mov	local10, local03
08ea4     4A 00 00 FF 
08ea8     7C E4 05 F1 | 	add	objptr, ##38012
08eac     F2 40 02 FB | 	rdlong	local14, objptr
08eb0     20 3F 02 F6 | 	mov	local13, local14
08eb4     01 3E 66 F0 | 	shl	local13, #1
08eb8     20 3F 02 F1 | 	add	local13, local14
08ebc     02 3E 66 F0 | 	shl	local13, #2
08ec0     03 00 00 FF 
08ec4     00 E4 85 F1 | 	sub	objptr, ##1536
08ec8     F2 3E 02 F1 | 	add	local13, objptr
08ecc     1F 35 62 FC | 	wrlong	local08, local13
08ed0     03 00 00 FF 
08ed4     00 E4 05 F1 | 	add	objptr, ##1536
08ed8     F2 40 02 FB | 	rdlong	local14, objptr
08edc     20 35 02 F6 | 	mov	local08, local14
08ee0     01 34 66 F0 | 	shl	local08, #1
08ee4     20 35 02 F1 | 	add	local08, local14
08ee8     02 34 66 F0 | 	shl	local08, #2
08eec     03 00 00 FF 
08ef0     00 E4 85 F1 | 	sub	objptr, ##1536
08ef4     F2 34 02 F1 | 	add	local08, objptr
08ef8     04 34 06 F1 | 	add	local08, #4
08efc     1A 33 62 FC | 	wrlong	local07, local08
08f00     03 00 00 FF 
08f04     00 E4 05 F1 | 	add	objptr, ##1536
08f08     F2 34 02 FB | 	rdlong	local08, objptr
08f0c     1A 41 02 F6 | 	mov	local14, local08
08f10     01 40 66 F0 | 	shl	local14, #1
08f14     1A 41 02 F1 | 	add	local14, local08
08f18     02 40 66 F0 | 	shl	local14, #2
08f1c     03 00 00 FF 
08f20     00 E4 85 F1 | 	sub	objptr, ##1536
08f24     F2 40 02 F1 | 	add	local14, objptr
08f28     08 40 06 F1 | 	add	local14, #8
08f2c     20 39 62 FC | 	wrlong	local10, local14
08f30     03 00 00 FF 
08f34     00 E4 05 F1 | 	add	objptr, ##1536
08f38     F2 34 02 FB | 	rdlong	local08, objptr
08f3c     01 34 06 F1 | 	add	local08, #1
08f40     F2 34 62 FC | 	wrlong	local08, objptr
08f44     44 2A 06 F6 | 	mov	local03, #68
08f48     13 35 02 F6 | 	mov	local08, local01
08f4c     14 33 02 F6 | 	mov	local07, local02
08f50     15 39 02 F6 | 	mov	local10, local03
08f54     F2 40 02 FB | 	rdlong	local14, objptr
08f58     20 3F 02 F6 | 	mov	local13, local14
08f5c     01 3E 66 F0 | 	shl	local13, #1
08f60     20 3F 02 F1 | 	add	local13, local14
08f64     02 3E 66 F0 | 	shl	local13, #2
08f68     03 00 00 FF 
08f6c     00 E4 85 F1 | 	sub	objptr, ##1536
08f70     F2 3E 02 F1 | 	add	local13, objptr
08f74     1F 35 62 FC | 	wrlong	local08, local13
08f78     03 00 00 FF 
08f7c     00 E4 05 F1 | 	add	objptr, ##1536
08f80     F2 40 02 FB | 	rdlong	local14, objptr
08f84     20 3F 02 F6 | 	mov	local13, local14
08f88     01 3E 66 F0 | 	shl	local13, #1
08f8c     20 3F 02 F1 | 	add	local13, local14
08f90     02 3E 66 F0 | 	shl	local13, #2
08f94     03 00 00 FF 
08f98     00 E4 85 F1 | 	sub	objptr, ##1536
08f9c     F2 3E 02 F1 | 	add	local13, objptr
08fa0     04 3E 06 F1 | 	add	local13, #4
08fa4     1F 33 62 FC | 	wrlong	local07, local13
08fa8     03 00 00 FF 
08fac     00 E4 05 F1 | 	add	objptr, ##1536
08fb0     F2 3E 02 FB | 	rdlong	local13, objptr
08fb4     1F 41 02 F6 | 	mov	local14, local13
08fb8     01 40 66 F0 | 	shl	local14, #1
08fbc     1F 41 02 F1 | 	add	local14, local13
08fc0     02 40 66 F0 | 	shl	local14, #2
08fc4     03 00 00 FF 
08fc8     00 E4 85 F1 | 	sub	objptr, ##1536
08fcc     F2 40 02 F1 | 	add	local14, objptr
08fd0     08 40 06 F1 | 	add	local14, #8
08fd4     20 39 62 FC | 	wrlong	local10, local14
08fd8     03 00 00 FF 
08fdc     00 E4 05 F1 | 	add	objptr, ##1536
08fe0     F2 34 02 FB | 	rdlong	local08, objptr
08fe4     01 34 06 F1 | 	add	local08, #1
08fe8     F2 34 62 FC | 	wrlong	local08, objptr
08fec     4A 00 00 FF 
08ff0     7C E4 85 F1 | 	sub	objptr, ##38012
08ff4                 | LR__0815
08ff4                 | '   if lparts(ct).token<>token_semicolon  andalso lparts(ct).token<>token_comma then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 : ct-=1
08ff4     37 00 00 FF 
08ff8     44 E4 05 F1 | 	add	objptr, ##28228
08ffc     F2 34 02 FB | 	rdlong	local08, objptr
09000     03 34 66 F0 | 	shl	local08, #3
09004     02 00 00 FF 
09008     38 E4 85 F1 | 	sub	objptr, ##1080
0900c     F2 34 02 F1 | 	add	local08, objptr
09010     04 34 06 F1 | 	add	local08, #4
09014     1A 41 02 FB | 	rdlong	local14, local08
09018     12 40 0E F2 | 	cmp	local14, #18 wz
0901c     35 00 00 FF 
09020     0C E4 85 F1 | 	sub	objptr, ##27148
09024     00 01 90 AD |  if_e	jmp	#LR__0816
09028     37 00 00 FF 
0902c     44 E4 05 F1 | 	add	objptr, ##28228
09030     F2 34 02 FB | 	rdlong	local08, objptr
09034     03 34 66 F0 | 	shl	local08, #3
09038     02 00 00 FF 
0903c     38 E4 85 F1 | 	sub	objptr, ##1080
09040     F2 34 02 F1 | 	add	local08, objptr
09044     04 34 06 F1 | 	add	local08, #4
09048     1A 41 02 FB | 	rdlong	local14, local08
0904c     11 40 0E F2 | 	cmp	local14, #17 wz
09050     35 00 00 FF 
09054     0C E4 85 F1 | 	sub	objptr, ##27148
09058     CC 00 90 AD |  if_e	jmp	#LR__0816
0905c     44 2A 06 F6 | 	mov	local03, #68
09060     13 35 02 F6 | 	mov	local08, local01
09064     14 33 02 F6 | 	mov	local07, local02
09068     15 39 02 F6 | 	mov	local10, local03
0906c     4A 00 00 FF 
09070     7C E4 05 F1 | 	add	objptr, ##38012
09074     F2 40 02 FB | 	rdlong	local14, objptr
09078     20 3F 02 F6 | 	mov	local13, local14
0907c     01 3E 66 F0 | 	shl	local13, #1
09080     20 3F 02 F1 | 	add	local13, local14
09084     02 3E 66 F0 | 	shl	local13, #2
09088     03 00 00 FF 
0908c     00 E4 85 F1 | 	sub	objptr, ##1536
09090     F2 3E 02 F1 | 	add	local13, objptr
09094     1F 35 62 FC | 	wrlong	local08, local13
09098     03 00 00 FF 
0909c     00 E4 05 F1 | 	add	objptr, ##1536
090a0     F2 40 02 FB | 	rdlong	local14, objptr
090a4     20 3F 02 F6 | 	mov	local13, local14
090a8     01 3E 66 F0 | 	shl	local13, #1
090ac     20 3F 02 F1 | 	add	local13, local14
090b0     02 3E 66 F0 | 	shl	local13, #2
090b4     03 00 00 FF 
090b8     00 E4 85 F1 | 	sub	objptr, ##1536
090bc     F2 3E 02 F1 | 	add	local13, objptr
090c0     04 3E 06 F1 | 	add	local13, #4
090c4     1F 33 62 FC | 	wrlong	local07, local13
090c8     03 00 00 FF 
090cc     00 E4 05 F1 | 	add	objptr, ##1536
090d0     F2 3E 02 FB | 	rdlong	local13, objptr
090d4     1F 41 02 F6 | 	mov	local14, local13
090d8     01 40 66 F0 | 	shl	local14, #1
090dc     1F 41 02 F1 | 	add	local14, local13
090e0     02 40 66 F0 | 	shl	local14, #2
090e4     03 00 00 FF 
090e8     00 E4 85 F1 | 	sub	objptr, ##1536
090ec     F2 40 02 F1 | 	add	local14, objptr
090f0     08 40 06 F1 | 	add	local14, #8
090f4     20 39 62 FC | 	wrlong	local10, local14
090f8     03 00 00 FF 
090fc     00 E4 05 F1 | 	add	objptr, ##1536
09100     F2 34 02 FB | 	rdlong	local08, objptr
09104     01 34 06 F1 | 	add	local08, #1
09108     F2 34 62 FC | 	wrlong	local08, objptr
0910c     13 00 00 FF 
09110     38 E4 85 F1 | 	sub	objptr, ##9784
09114     F2 34 02 FB | 	rdlong	local08, objptr
09118     01 34 86 F1 | 	sub	local08, #1
0911c     F2 34 62 FC | 	wrlong	local08, objptr
09120     37 00 00 FF 
09124     44 E4 85 F1 | 	sub	objptr, ##28228
09128                 | LR__0816
09128     37 00 00 FF 
0912c     44 E4 05 F1 | 	add	objptr, ##28228
09130     F2 34 02 FB | 	rdlong	local08, objptr
09134     01 34 06 F1 | 	add	local08, #1
09138     F2 34 62 FC | 	wrlong	local08, objptr
0913c     37 00 00 FF 
09140     44 E4 85 F1 | 	sub	objptr, ##28228
09144                 | LR__0817
09144     00 2E 06 F6 | 	mov	local05, #0
09148                 | ' i=0 : err=0
09148                 | ' if lparts(ct).token<>token_end then
09148     37 00 00 FF 
0914c     44 E4 05 F1 | 	add	objptr, ##28228
09150     F2 40 02 FB | 	rdlong	local14, objptr
09154     03 40 66 F0 | 	shl	local14, #3
09158     02 00 00 FF 
0915c     38 E4 85 F1 | 	sub	objptr, ##1080
09160     F2 40 02 F1 | 	add	local14, objptr
09164     04 40 06 F1 | 	add	local14, #4
09168     20 41 02 FB | 	rdlong	local14, local14
0916c     FE 41 0E F2 | 	cmp	local14, #510 wz
09170     35 00 00 FF 
09174     0C E4 85 F1 | 	sub	objptr, ##27148
09178     98 00 90 AD |  if_e	jmp	#LR__0819
0917c                 | '   do
0917c                 | LR__0818
0917c     58 28 B0 FD | 	call	#_getaddr
09180     FD 42 02 F6 | 	mov	local15, result1
09184     37 00 00 FF 
09188     44 E4 05 F1 | 	add	objptr, ##28228
0918c     F2 40 02 FB | 	rdlong	local14, objptr
09190     01 40 06 F1 | 	add	local14, #1
09194     F2 40 62 FC | 	wrlong	local14, objptr
09198     01 2E 06 F1 | 	add	local05, #1
0919c                 | '     err=getaddr() :ct+=1
0919c                 | '     i+=1 
0919c                 | '     if lparts(ct).token=token_comma then ct+=1 
0919c     03 40 66 F0 | 	shl	local14, #3
091a0     02 00 00 FF 
091a4     38 E4 85 F1 | 	sub	objptr, ##1080
091a8     F2 40 02 F1 | 	add	local14, objptr
091ac     04 40 06 F1 | 	add	local14, #4
091b0     20 41 02 FB | 	rdlong	local14, local14
091b4     11 40 0E F2 | 	cmp	local14, #17 wz
091b8     35 00 00 FF 
091bc     0C E4 85 F1 | 	sub	objptr, ##27148
091c0     37 00 00 AF 
091c4     44 E4 05 A1 |  if_e	add	objptr, ##28228
091c8     F2 34 02 AB |  if_e	rdlong	local08, objptr
091cc     01 34 06 A1 |  if_e	add	local08, #1
091d0     F2 34 62 AC |  if_e	wrlong	local08, objptr
091d4     37 00 00 AF 
091d8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
091dc                 | '     if lparts(ct).token=token_end then exit loop
091dc     37 00 00 FF 
091e0     44 E4 05 F1 | 	add	objptr, ##28228
091e4     F2 40 02 FB | 	rdlong	local14, objptr
091e8     03 40 66 F0 | 	shl	local14, #3
091ec     02 00 00 FF 
091f0     38 E4 85 F1 | 	sub	objptr, ##1080
091f4     F2 40 02 F1 | 	add	local14, objptr
091f8     04 40 06 F1 | 	add	local14, #4
091fc     20 41 02 FB | 	rdlong	local14, local14
09200     FE 41 0E F2 | 	cmp	local14, #510 wz
09204     35 00 00 FF 
09208     0C E4 85 F1 | 	sub	objptr, ##27148
0920c     08 00 90 AD |  if_e	jmp	#LR__0820
09210     68 FF 9F FD | 	jmp	#LR__0818
09214                 | LR__0819
09214     36 42 06 F6 | 	mov	local15, #54
09218                 | LR__0820
09218                 | ' return i,err
09218     17 FB 01 F6 | 	mov	result1, local05
0921c     21 FD 01 F6 | 	mov	result2, local15
09220     A7 F0 03 F6 | 	mov	ptra, fp
09224     B2 00 A0 FD | 	call	#popregs_
09228                 | _compile_input_ret
09228     2D 00 64 FD | 	ret
0922c                 | 
0922c                 | ' 
0922c                 | ' '----- compile assign to an array element
0922c                 | ' 
0922c                 | ' function compile_array_assign() as ulong 
0922c                 | _compile_array_assign
0922c     0B 4A 05 F6 | 	mov	COUNT_, #11
09230     A8 00 A0 FD | 	call	#pushregs_
09234     00 2C 06 F6 | 	mov	local04, #0
09238     00 2E 06 F6 | 	mov	local05, #0
0923c     37 00 00 FF 
09240     44 E4 05 F1 | 	add	objptr, ##28228
09244     F2 30 02 FB | 	rdlong	local06, objptr
09248     18 FB 01 F6 | 	mov	result1, local06
0924c     01 FA 85 F1 | 	sub	result1, #1
09250     03 FA 65 F0 | 	shl	result1, #3
09254     02 00 00 FF 
09258     38 E4 85 F1 | 	sub	objptr, ##1080
0925c     F2 FA 01 F1 | 	add	result1, objptr
09260     FD 32 02 FB | 	rdlong	local07, result1
09264                 | ' numpar=0 : err=0
09264                 | ' varname$=lparts(ct-1).part$
09264                 | ' if lparts(ct).token=token_lpar then
09264     03 30 66 F0 | 	shl	local06, #3
09268     F2 30 02 F1 | 	add	local06, objptr
0926c     04 30 06 F1 | 	add	local06, #4
09270     18 31 02 FB | 	rdlong	local06, local06
09274     15 30 0E F2 | 	cmp	local06, #21 wz
09278     35 00 00 FF 
0927c     0C E4 85 F1 | 	sub	objptr, ##27148
09280     F4 01 90 5D |  if_ne	jmp	#LR__0834
09284     37 00 00 FF 
09288     44 E4 05 F1 | 	add	objptr, ##28228
0928c     F2 34 02 FB | 	rdlong	local08, objptr
09290     01 34 06 F1 | 	add	local08, #1
09294     F2 34 62 FC | 	wrlong	local08, objptr
09298     37 00 00 FF 
0929c     44 E4 85 F1 | 	sub	objptr, ##28228
092a0                 | '   ct+=1 											' omit this lpar, this is for expr list
092a0                 | '   do
092a0                 | LR__0830
092a0     C8 2A B0 FD | 	call	#_expr
092a4     37 00 00 FF 
092a8     44 E4 05 F1 | 	add	objptr, ##28228
092ac     F2 30 02 FB | 	rdlong	local06, objptr
092b0     01 30 06 F1 | 	add	local06, #1
092b4     F2 30 62 FC | 	wrlong	local06, objptr
092b8     01 2C 06 F1 | 	add	local04, #1
092bc     01 30 86 F1 | 	sub	local06, #1
092c0     03 30 66 F0 | 	shl	local06, #3
092c4     02 00 00 FF 
092c8     38 E4 85 F1 | 	sub	objptr, ##1080
092cc     F2 30 02 F1 | 	add	local06, objptr
092d0     04 30 06 F1 | 	add	local06, #4
092d4     18 35 02 FB | 	rdlong	local08, local06
092d8     14 34 0E F2 | 	cmp	local08, #20 wz
092dc     35 00 00 FF 
092e0     0C E4 85 F1 | 	sub	objptr, ##27148
092e4     34 00 90 AD |  if_e	jmp	#LR__0831
092e8     37 00 00 FF 
092ec     44 E4 05 F1 | 	add	objptr, ##28228
092f0     F2 34 02 FB | 	rdlong	local08, objptr
092f4     03 34 66 F0 | 	shl	local08, #3
092f8     02 00 00 FF 
092fc     38 E4 85 F1 | 	sub	objptr, ##1080
09300     F2 34 02 F1 | 	add	local08, objptr
09304     04 34 06 F1 | 	add	local08, #4
09308     1A 35 02 FB | 	rdlong	local08, local08
0930c     FE 35 0E F2 | 	cmp	local08, #510 wz
09310     35 00 00 FF 
09314     0C E4 85 F1 | 	sub	objptr, ##27148
09318     84 FF 9F 5D |  if_ne	jmp	#LR__0830
0931c                 | LR__0831
0931c     37 00 00 FF 
09320     44 E4 05 F1 | 	add	objptr, ##28228
09324     F2 34 02 FB | 	rdlong	local08, objptr
09328     01 34 06 F1 | 	add	local08, #1
0932c     F2 34 62 FC | 	wrlong	local08, objptr
09330     37 00 00 FF 
09334     44 E4 85 F1 | 	sub	objptr, ##28228
09338     30 2A B0 FD | 	call	#_expr
0933c     01 36 66 F6 | 	neg	local09, #1
09340     00 38 06 F6 | 	mov	local10, #0
09344                 | '   ct+=1 : expr()
09344                 | '   j=-1 : i=0 
09344                 | '   do 
09344                 | LR__0832
09344                 | '     if variables(i).name=varname$ then j=i: exit loop
09344     1C 31 02 F6 | 	mov	local06, local10
09348     04 30 66 F0 | 	shl	local06, #4
0934c     14 00 00 FF 
09350     F8 E5 05 F1 | 	add	objptr, ##10744
09354     F2 30 02 F1 | 	add	local06, objptr
09358     18 13 02 FB | 	rdlong	arg01, local06
0935c     19 15 02 F6 | 	mov	arg02, local07
09360     14 00 00 FF 
09364     F8 E5 85 F1 | 	sub	objptr, ##10744
09368     D4 D5 B1 FD | 	call	#__system___string_cmp
0936c     00 FA 0D F2 | 	cmp	result1, #0 wz
09370     1C 37 02 A6 |  if_e	mov	local09, local10
09374     20 00 90 AD |  if_e	jmp	#LR__0833
09378     01 38 06 F1 | 	add	local10, #1
0937c     35 00 00 FF 
09380     08 E4 05 F1 | 	add	objptr, ##27144
09384     F2 34 02 FB | 	rdlong	local08, objptr
09388     35 00 00 FF 
0938c     08 E4 85 F1 | 	sub	objptr, ##27144
09390     1A 39 5A F2 | 	cmps	local10, local08 wcz
09394     AC FF 9F ED |  if_be	jmp	#LR__0832
09398                 | LR__0833
09398     1B 27 02 F6 | 	mov	local01, local09
0939c     16 29 02 F6 | 	mov	local02, local04
093a0     17 2A 06 F6 | 	mov	local03, #23
093a4     13 35 02 F6 | 	mov	local08, local01
093a8     14 3B 02 F6 | 	mov	local11, local02
093ac     15 33 02 F6 | 	mov	local07, local03
093b0     4A 00 00 FF 
093b4     7C E4 05 F1 | 	add	objptr, ##38012
093b8     F2 26 02 FB | 	rdlong	local01, objptr
093bc     13 37 02 F6 | 	mov	local09, local01
093c0     01 36 66 F0 | 	shl	local09, #1
093c4     13 37 02 F1 | 	add	local09, local01
093c8     02 36 66 F0 | 	shl	local09, #2
093cc     03 00 00 FF 
093d0     00 E4 85 F1 | 	sub	objptr, ##1536
093d4     F2 36 02 F1 | 	add	local09, objptr
093d8     1B 35 62 FC | 	wrlong	local08, local09
093dc     03 00 00 FF 
093e0     00 E4 05 F1 | 	add	objptr, ##1536
093e4     F2 26 02 FB | 	rdlong	local01, objptr
093e8     13 37 02 F6 | 	mov	local09, local01
093ec     01 36 66 F0 | 	shl	local09, #1
093f0     13 37 02 F1 | 	add	local09, local01
093f4     02 36 66 F0 | 	shl	local09, #2
093f8     03 00 00 FF 
093fc     00 E4 85 F1 | 	sub	objptr, ##1536
09400     F2 36 02 F1 | 	add	local09, objptr
09404     04 36 06 F1 | 	add	local09, #4
09408     1B 3B 62 FC | 	wrlong	local11, local09
0940c     03 00 00 FF 
09410     00 E4 05 F1 | 	add	objptr, ##1536
09414     F2 3A 02 FB | 	rdlong	local11, objptr
09418     1D 27 02 F6 | 	mov	local01, local11
0941c     01 26 66 F0 | 	shl	local01, #1
09420     1D 27 02 F1 | 	add	local01, local11
09424     02 26 66 F0 | 	shl	local01, #2
09428     03 00 00 FF 
0942c     00 E4 85 F1 | 	sub	objptr, ##1536
09430     F2 26 02 F1 | 	add	local01, objptr
09434     08 26 06 F1 | 	add	local01, #8
09438     13 33 62 FC | 	wrlong	local07, local01
0943c     03 00 00 FF 
09440     00 E4 05 F1 | 	add	objptr, ##1536
09444     F2 34 02 FB | 	rdlong	local08, objptr
09448     01 34 06 F1 | 	add	local08, #1
0944c     F2 34 62 FC | 	wrlong	local08, objptr
09450                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
09450                 | '   if numpar>3 then err=45
09450     04 2C 16 F2 | 	cmp	local04, #4 wc
09454     2D 2E 06 36 |  if_ae	mov	local05, #45
09458                 | '   if i>varnum then err=20
09458     15 00 00 FF 
0945c     74 E4 85 F1 | 	sub	objptr, ##10868
09460     F2 34 02 FB | 	rdlong	local08, objptr
09464     35 00 00 FF 
09468     08 E4 85 F1 | 	sub	objptr, ##27144
0946c     1A 39 5A F2 | 	cmps	local10, local08 wcz
09470     14 2E 06 16 |  if_a	mov	local05, #20
09474     04 00 90 FD | 	jmp	#LR__0835
09478                 | LR__0834
09478     0E 2E 06 F6 | 	mov	local05, #14
0947c                 | LR__0835
0947c                 | ' return err
0947c     17 FB 01 F6 | 	mov	result1, local05
09480     A7 F0 03 F6 | 	mov	ptra, fp
09484     B2 00 A0 FD | 	call	#popregs_
09488                 | _compile_array_assign_ret
09488     2D 00 64 FD | 	ret
0948c                 | 
0948c                 | ' 
0948c                 | ' '----- compile print command with its ";" and "," modifiers
0948c                 | ' 
0948c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0948c                 | _compile_print
0948c     0B 4A 05 F6 | 	mov	COUNT_, #11
09490     A8 00 A0 FD | 	call	#pushregs_
09494     00 26 06 F6 | 	mov	local01, #0
09498     1D 2A 06 F6 | 	mov	local03, #29
0949c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0949c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0949c     37 00 00 FF 
094a0     44 E4 05 F1 | 	add	objptr, ##28228
094a4     F2 2C 02 FB | 	rdlong	local04, objptr
094a8     03 2C 66 F0 | 	shl	local04, #3
094ac     02 00 00 FF 
094b0     38 E4 85 F1 | 	sub	objptr, ##1080
094b4     F2 2C 02 F1 | 	add	local04, objptr
094b8     04 2C 06 F1 | 	add	local04, #4
094bc     16 2D 02 FB | 	rdlong	local04, local04
094c0     FE 2D 0E F2 | 	cmp	local04, #510 wz
094c4     35 00 00 FF 
094c8     0C E4 85 F1 | 	sub	objptr, ##27148
094cc     68 01 90 5D |  if_ne	jmp	#LR__0840
094d0     20 2A 06 F6 | 	mov	local03, #32
094d4     13 2F 02 F6 | 	mov	local05, local01
094d8     14 31 02 F6 | 	mov	local06, local02
094dc     15 33 02 F6 | 	mov	local07, local03
094e0     4A 00 00 FF 
094e4     7C E4 05 F1 | 	add	objptr, ##38012
094e8     F2 34 02 FB | 	rdlong	local08, objptr
094ec     1A 37 02 F6 | 	mov	local09, local08
094f0     01 36 66 F0 | 	shl	local09, #1
094f4     1A 37 02 F1 | 	add	local09, local08
094f8     02 36 66 F0 | 	shl	local09, #2
094fc     03 00 00 FF 
09500     00 E4 85 F1 | 	sub	objptr, ##1536
09504     F2 36 02 F1 | 	add	local09, objptr
09508     1B 2F 62 FC | 	wrlong	local05, local09
0950c     03 00 00 FF 
09510     00 E4 05 F1 | 	add	objptr, ##1536
09514     F2 2E 02 FB | 	rdlong	local05, objptr
09518     17 39 02 F6 | 	mov	local10, local05
0951c     01 38 66 F0 | 	shl	local10, #1
09520     17 39 02 F1 | 	add	local10, local05
09524     02 38 66 F0 | 	shl	local10, #2
09528     03 00 00 FF 
0952c     00 E4 85 F1 | 	sub	objptr, ##1536
09530     F2 38 02 F1 | 	add	local10, objptr
09534     04 38 06 F1 | 	add	local10, #4
09538     1C 31 62 FC | 	wrlong	local06, local10
0953c     03 00 00 FF 
09540     00 E4 05 F1 | 	add	objptr, ##1536
09544     F2 2E 02 FB | 	rdlong	local05, objptr
09548     17 3B 02 F6 | 	mov	local11, local05
0954c     01 3A 66 F0 | 	shl	local11, #1
09550     17 3B 02 F1 | 	add	local11, local05
09554     02 3A 66 F0 | 	shl	local11, #2
09558     03 00 00 FF 
0955c     00 E4 85 F1 | 	sub	objptr, ##1536
09560     F2 3A 02 F1 | 	add	local11, objptr
09564     08 3A 06 F1 | 	add	local11, #8
09568     1D 33 62 FC | 	wrlong	local07, local11
0956c     03 00 00 FF 
09570     00 E4 05 F1 | 	add	objptr, ##1536
09574     F2 2E 02 FB | 	rdlong	local05, objptr
09578     01 2E 06 F1 | 	add	local05, #1
0957c     F2 2E 62 FC | 	wrlong	local05, objptr
09580     44 2A 06 F6 | 	mov	local03, #68
09584     13 2F 02 F6 | 	mov	local05, local01
09588     14 31 02 F6 | 	mov	local06, local02
0958c     15 33 02 F6 | 	mov	local07, local03
09590     F2 34 02 FB | 	rdlong	local08, objptr
09594     1A 37 02 F6 | 	mov	local09, local08
09598     01 36 66 F0 | 	shl	local09, #1
0959c     1A 37 02 F1 | 	add	local09, local08
095a0     02 36 66 F0 | 	shl	local09, #2
095a4     03 00 00 FF 
095a8     00 E4 85 F1 | 	sub	objptr, ##1536
095ac     F2 36 02 F1 | 	add	local09, objptr
095b0     1B 2F 62 FC | 	wrlong	local05, local09
095b4     03 00 00 FF 
095b8     00 E4 05 F1 | 	add	objptr, ##1536
095bc     F2 3A 02 FB | 	rdlong	local11, objptr
095c0     1D 39 02 F6 | 	mov	local10, local11
095c4     01 38 66 F0 | 	shl	local10, #1
095c8     1D 39 02 F1 | 	add	local10, local11
095cc     02 38 66 F0 | 	shl	local10, #2
095d0     03 00 00 FF 
095d4     00 E4 85 F1 | 	sub	objptr, ##1536
095d8     F2 38 02 F1 | 	add	local10, objptr
095dc     04 38 06 F1 | 	add	local10, #4
095e0     1C 31 62 FC | 	wrlong	local06, local10
095e4     03 00 00 FF 
095e8     00 E4 05 F1 | 	add	objptr, ##1536
095ec     F2 38 02 FB | 	rdlong	local10, objptr
095f0     1C 3B 02 F6 | 	mov	local11, local10
095f4     01 3A 66 F0 | 	shl	local11, #1
095f8     1C 3B 02 F1 | 	add	local11, local10
095fc     02 3A 66 F0 | 	shl	local11, #2
09600     03 00 00 FF 
09604     00 E4 85 F1 | 	sub	objptr, ##1536
09608     F2 3A 02 F1 | 	add	local11, objptr
0960c     08 3A 06 F1 | 	add	local11, #8
09610     1D 33 62 FC | 	wrlong	local07, local11
09614     03 00 00 FF 
09618     00 E4 05 F1 | 	add	objptr, ##1536
0961c     F2 2E 02 FB | 	rdlong	local05, objptr
09620     01 2E 06 F1 | 	add	local05, #1
09624     F2 2E 62 FC | 	wrlong	local05, objptr
09628     4A 00 00 FF 
0962c     7C E4 85 F1 | 	sub	objptr, ##38012
09630     00 FA 05 F6 | 	mov	result1, #0
09634     20 05 90 FD | 	jmp	#LR__0847
09638                 | LR__0840
09638                 | ' do
09638                 | LR__0841
09638     30 27 B0 FD | 	call	#_expr
0963c                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
0963c                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0963c     37 00 00 FF 
09640     44 E4 05 F1 | 	add	objptr, ##28228
09644     F2 2C 02 FB | 	rdlong	local04, objptr
09648     03 2C 66 F0 | 	shl	local04, #3
0964c     02 00 00 FF 
09650     38 E4 85 F1 | 	sub	objptr, ##1080
09654     F2 2C 02 F1 | 	add	local04, objptr
09658     04 2C 06 F1 | 	add	local04, #4
0965c     16 35 02 FB | 	rdlong	local08, local04
09660     11 34 0E F2 | 	cmp	local08, #17 wz
09664     35 00 00 FF 
09668     0C E4 85 F1 | 	sub	objptr, ##27148
0966c     60 01 90 5D |  if_ne	jmp	#LR__0842
09670     21 2A 06 F6 | 	mov	local03, #33
09674     13 2F 02 F6 | 	mov	local05, local01
09678     14 31 02 F6 | 	mov	local06, local02
0967c     15 33 02 F6 | 	mov	local07, local03
09680     4A 00 00 FF 
09684     7C E4 05 F1 | 	add	objptr, ##38012
09688     F2 34 02 FB | 	rdlong	local08, objptr
0968c     1A 37 02 F6 | 	mov	local09, local08
09690     01 36 66 F0 | 	shl	local09, #1
09694     1A 37 02 F1 | 	add	local09, local08
09698     02 36 66 F0 | 	shl	local09, #2
0969c     03 00 00 FF 
096a0     00 E4 85 F1 | 	sub	objptr, ##1536
096a4     F2 36 02 F1 | 	add	local09, objptr
096a8     1B 2F 62 FC | 	wrlong	local05, local09
096ac     03 00 00 FF 
096b0     00 E4 05 F1 | 	add	objptr, ##1536
096b4     F2 3A 02 FB | 	rdlong	local11, objptr
096b8     1D 39 02 F6 | 	mov	local10, local11
096bc     01 38 66 F0 | 	shl	local10, #1
096c0     1D 39 02 F1 | 	add	local10, local11
096c4     02 38 66 F0 | 	shl	local10, #2
096c8     03 00 00 FF 
096cc     00 E4 85 F1 | 	sub	objptr, ##1536
096d0     F2 38 02 F1 | 	add	local10, objptr
096d4     04 38 06 F1 | 	add	local10, #4
096d8     1C 31 62 FC | 	wrlong	local06, local10
096dc     03 00 00 FF 
096e0     00 E4 05 F1 | 	add	objptr, ##1536
096e4     F2 2E 02 FB | 	rdlong	local05, objptr
096e8     17 3B 02 F6 | 	mov	local11, local05
096ec     01 3A 66 F0 | 	shl	local11, #1
096f0     17 3B 02 F1 | 	add	local11, local05
096f4     02 3A 66 F0 | 	shl	local11, #2
096f8     03 00 00 FF 
096fc     00 E4 85 F1 | 	sub	objptr, ##1536
09700     F2 3A 02 F1 | 	add	local11, objptr
09704     08 3A 06 F1 | 	add	local11, #8
09708     1D 33 62 FC | 	wrlong	local07, local11
0970c     03 00 00 FF 
09710     00 E4 05 F1 | 	add	objptr, ##1536
09714     F2 2E 02 FB | 	rdlong	local05, objptr
09718     01 2E 06 F1 | 	add	local05, #1
0971c     F2 2E 62 FC | 	wrlong	local05, objptr
09720     44 2A 06 F6 | 	mov	local03, #68
09724     13 2F 02 F6 | 	mov	local05, local01
09728     14 31 02 F6 | 	mov	local06, local02
0972c     15 33 02 F6 | 	mov	local07, local03
09730     F2 34 02 FB | 	rdlong	local08, objptr
09734     1A 37 02 F6 | 	mov	local09, local08
09738     01 36 66 F0 | 	shl	local09, #1
0973c     1A 37 02 F1 | 	add	local09, local08
09740     02 36 66 F0 | 	shl	local09, #2
09744     03 00 00 FF 
09748     00 E4 85 F1 | 	sub	objptr, ##1536
0974c     F2 36 02 F1 | 	add	local09, objptr
09750     1B 2F 62 FC | 	wrlong	local05, local09
09754     03 00 00 FF 
09758     00 E4 05 F1 | 	add	objptr, ##1536
0975c     F2 3A 02 FB | 	rdlong	local11, objptr
09760     1D 39 02 F6 | 	mov	local10, local11
09764     01 38 66 F0 | 	shl	local10, #1
09768     1D 39 02 F1 | 	add	local10, local11
0976c     02 38 66 F0 | 	shl	local10, #2
09770     03 00 00 FF 
09774     00 E4 85 F1 | 	sub	objptr, ##1536
09778     F2 38 02 F1 | 	add	local10, objptr
0977c     04 38 06 F1 | 	add	local10, #4
09780     1C 31 62 FC | 	wrlong	local06, local10
09784     03 00 00 FF 
09788     00 E4 05 F1 | 	add	objptr, ##1536
0978c     F2 38 02 FB | 	rdlong	local10, objptr
09790     1C 3B 02 F6 | 	mov	local11, local10
09794     01 3A 66 F0 | 	shl	local11, #1
09798     1C 3B 02 F1 | 	add	local11, local10
0979c     02 3A 66 F0 | 	shl	local11, #2
097a0     03 00 00 FF 
097a4     00 E4 85 F1 | 	sub	objptr, ##1536
097a8     F2 3A 02 F1 | 	add	local11, objptr
097ac     08 3A 06 F1 | 	add	local11, #8
097b0     1D 33 62 FC | 	wrlong	local07, local11
097b4     03 00 00 FF 
097b8     00 E4 05 F1 | 	add	objptr, ##1536
097bc     F2 2E 02 FB | 	rdlong	local05, objptr
097c0     01 2E 06 F1 | 	add	local05, #1
097c4     F2 2E 62 FC | 	wrlong	local05, objptr
097c8     4A 00 00 FF 
097cc     7C E4 85 F1 | 	sub	objptr, ##38012
097d0                 | LR__0842
097d0                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
097d0     37 00 00 FF 
097d4     44 E4 05 F1 | 	add	objptr, ##28228
097d8     F2 2C 02 FB | 	rdlong	local04, objptr
097dc     03 2C 66 F0 | 	shl	local04, #3
097e0     02 00 00 FF 
097e4     38 E4 85 F1 | 	sub	objptr, ##1080
097e8     F2 2C 02 F1 | 	add	local04, objptr
097ec     04 2C 06 F1 | 	add	local04, #4
097f0     16 35 02 FB | 	rdlong	local08, local04
097f4     12 34 0E F2 | 	cmp	local08, #18 wz
097f8     35 00 00 FF 
097fc     0C E4 85 F1 | 	sub	objptr, ##27148
09800     60 01 90 5D |  if_ne	jmp	#LR__0843
09804     22 2A 06 F6 | 	mov	local03, #34
09808     13 2F 02 F6 | 	mov	local05, local01
0980c     14 31 02 F6 | 	mov	local06, local02
09810     15 33 02 F6 | 	mov	local07, local03
09814     4A 00 00 FF 
09818     7C E4 05 F1 | 	add	objptr, ##38012
0981c     F2 34 02 FB | 	rdlong	local08, objptr
09820     1A 37 02 F6 | 	mov	local09, local08
09824     01 36 66 F0 | 	shl	local09, #1
09828     1A 37 02 F1 | 	add	local09, local08
0982c     02 36 66 F0 | 	shl	local09, #2
09830     03 00 00 FF 
09834     00 E4 85 F1 | 	sub	objptr, ##1536
09838     F2 36 02 F1 | 	add	local09, objptr
0983c     1B 2F 62 FC | 	wrlong	local05, local09
09840     03 00 00 FF 
09844     00 E4 05 F1 | 	add	objptr, ##1536
09848     F2 3A 02 FB | 	rdlong	local11, objptr
0984c     1D 39 02 F6 | 	mov	local10, local11
09850     01 38 66 F0 | 	shl	local10, #1
09854     1D 39 02 F1 | 	add	local10, local11
09858     02 38 66 F0 | 	shl	local10, #2
0985c     03 00 00 FF 
09860     00 E4 85 F1 | 	sub	objptr, ##1536
09864     F2 38 02 F1 | 	add	local10, objptr
09868     04 38 06 F1 | 	add	local10, #4
0986c     1C 31 62 FC | 	wrlong	local06, local10
09870     03 00 00 FF 
09874     00 E4 05 F1 | 	add	objptr, ##1536
09878     F2 2E 02 FB | 	rdlong	local05, objptr
0987c     17 3B 02 F6 | 	mov	local11, local05
09880     01 3A 66 F0 | 	shl	local11, #1
09884     17 3B 02 F1 | 	add	local11, local05
09888     02 3A 66 F0 | 	shl	local11, #2
0988c     03 00 00 FF 
09890     00 E4 85 F1 | 	sub	objptr, ##1536
09894     F2 3A 02 F1 | 	add	local11, objptr
09898     08 3A 06 F1 | 	add	local11, #8
0989c     1D 33 62 FC | 	wrlong	local07, local11
098a0     03 00 00 FF 
098a4     00 E4 05 F1 | 	add	objptr, ##1536
098a8     F2 2E 02 FB | 	rdlong	local05, objptr
098ac     01 2E 06 F1 | 	add	local05, #1
098b0     F2 2E 62 FC | 	wrlong	local05, objptr
098b4     44 2A 06 F6 | 	mov	local03, #68
098b8     13 2F 02 F6 | 	mov	local05, local01
098bc     14 31 02 F6 | 	mov	local06, local02
098c0     15 33 02 F6 | 	mov	local07, local03
098c4     F2 34 02 FB | 	rdlong	local08, objptr
098c8     1A 37 02 F6 | 	mov	local09, local08
098cc     01 36 66 F0 | 	shl	local09, #1
098d0     1A 37 02 F1 | 	add	local09, local08
098d4     02 36 66 F0 | 	shl	local09, #2
098d8     03 00 00 FF 
098dc     00 E4 85 F1 | 	sub	objptr, ##1536
098e0     F2 36 02 F1 | 	add	local09, objptr
098e4     1B 2F 62 FC | 	wrlong	local05, local09
098e8     03 00 00 FF 
098ec     00 E4 05 F1 | 	add	objptr, ##1536
098f0     F2 3A 02 FB | 	rdlong	local11, objptr
098f4     1D 39 02 F6 | 	mov	local10, local11
098f8     01 38 66 F0 | 	shl	local10, #1
098fc     1D 39 02 F1 | 	add	local10, local11
09900     02 38 66 F0 | 	shl	local10, #2
09904     03 00 00 FF 
09908     00 E4 85 F1 | 	sub	objptr, ##1536
0990c     F2 38 02 F1 | 	add	local10, objptr
09910     04 38 06 F1 | 	add	local10, #4
09914     1C 31 62 FC | 	wrlong	local06, local10
09918     03 00 00 FF 
0991c     00 E4 05 F1 | 	add	objptr, ##1536
09920     F2 38 02 FB | 	rdlong	local10, objptr
09924     1C 3B 02 F6 | 	mov	local11, local10
09928     01 3A 66 F0 | 	shl	local11, #1
0992c     1C 3B 02 F1 | 	add	local11, local10
09930     02 3A 66 F0 | 	shl	local11, #2
09934     03 00 00 FF 
09938     00 E4 85 F1 | 	sub	objptr, ##1536
0993c     F2 3A 02 F1 | 	add	local11, objptr
09940     08 3A 06 F1 | 	add	local11, #8
09944     1D 33 62 FC | 	wrlong	local07, local11
09948     03 00 00 FF 
0994c     00 E4 05 F1 | 	add	objptr, ##1536
09950     F2 2E 02 FB | 	rdlong	local05, objptr
09954     01 2E 06 F1 | 	add	local05, #1
09958     F2 2E 62 FC | 	wrlong	local05, objptr
0995c     4A 00 00 FF 
09960     7C E4 85 F1 | 	sub	objptr, ##38012
09964                 | LR__0843
09964                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
09964     37 00 00 FF 
09968     44 E4 05 F1 | 	add	objptr, ##28228
0996c     F2 2C 02 FB | 	rdlong	local04, objptr
09970     03 2C 66 F0 | 	shl	local04, #3
09974     02 00 00 FF 
09978     38 E4 85 F1 | 	sub	objptr, ##1080
0997c     F2 2C 02 F1 | 	add	local04, objptr
09980     04 2C 06 F1 | 	add	local04, #4
09984     16 35 02 FB | 	rdlong	local08, local04
09988     FE 35 0E F2 | 	cmp	local08, #510 wz
0998c     35 00 00 FF 
09990     0C E4 85 F1 | 	sub	objptr, ##27148
09994     B8 00 90 5D |  if_ne	jmp	#LR__0844
09998     44 2A 06 F6 | 	mov	local03, #68
0999c     13 2F 02 F6 | 	mov	local05, local01
099a0     14 31 02 F6 | 	mov	local06, local02
099a4     15 33 02 F6 | 	mov	local07, local03
099a8     4A 00 00 FF 
099ac     7C E4 05 F1 | 	add	objptr, ##38012
099b0     F2 34 02 FB | 	rdlong	local08, objptr
099b4     1A 37 02 F6 | 	mov	local09, local08
099b8     01 36 66 F0 | 	shl	local09, #1
099bc     1A 37 02 F1 | 	add	local09, local08
099c0     02 36 66 F0 | 	shl	local09, #2
099c4     03 00 00 FF 
099c8     00 E4 85 F1 | 	sub	objptr, ##1536
099cc     F2 36 02 F1 | 	add	local09, objptr
099d0     1B 2F 62 FC | 	wrlong	local05, local09
099d4     03 00 00 FF 
099d8     00 E4 05 F1 | 	add	objptr, ##1536
099dc     F2 3A 02 FB | 	rdlong	local11, objptr
099e0     1D 39 02 F6 | 	mov	local10, local11
099e4     01 38 66 F0 | 	shl	local10, #1
099e8     1D 39 02 F1 | 	add	local10, local11
099ec     02 38 66 F0 | 	shl	local10, #2
099f0     03 00 00 FF 
099f4     00 E4 85 F1 | 	sub	objptr, ##1536
099f8     F2 38 02 F1 | 	add	local10, objptr
099fc     04 38 06 F1 | 	add	local10, #4
09a00     1C 31 62 FC | 	wrlong	local06, local10
09a04     03 00 00 FF 
09a08     00 E4 05 F1 | 	add	objptr, ##1536
09a0c     F2 38 02 FB | 	rdlong	local10, objptr
09a10     1C 3B 02 F6 | 	mov	local11, local10
09a14     01 3A 66 F0 | 	shl	local11, #1
09a18     1C 3B 02 F1 | 	add	local11, local10
09a1c     02 3A 66 F0 | 	shl	local11, #2
09a20     03 00 00 FF 
09a24     00 E4 85 F1 | 	sub	objptr, ##1536
09a28     F2 3A 02 F1 | 	add	local11, objptr
09a2c     08 3A 06 F1 | 	add	local11, #8
09a30     1D 33 62 FC | 	wrlong	local07, local11
09a34     03 00 00 FF 
09a38     00 E4 05 F1 | 	add	objptr, ##1536
09a3c     F2 2E 02 FB | 	rdlong	local05, objptr
09a40     01 2E 06 F1 | 	add	local05, #1
09a44     F2 2E 62 FC | 	wrlong	local05, objptr
09a48     4A 00 00 FF 
09a4c     7C E4 85 F1 | 	sub	objptr, ##38012
09a50                 | LR__0844
09a50                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
09a50     37 00 00 FF 
09a54     44 E4 05 F1 | 	add	objptr, ##28228
09a58     F2 2C 02 FB | 	rdlong	local04, objptr
09a5c     03 2C 66 F0 | 	shl	local04, #3
09a60     02 00 00 FF 
09a64     38 E4 85 F1 | 	sub	objptr, ##1080
09a68     F2 2C 02 F1 | 	add	local04, objptr
09a6c     04 2C 06 F1 | 	add	local04, #4
09a70     16 35 02 FB | 	rdlong	local08, local04
09a74     11 34 0E F2 | 	cmp	local08, #17 wz
09a78     35 00 00 FF 
09a7c     0C E4 85 F1 | 	sub	objptr, ##27148
09a80     6C 00 90 AD |  if_e	jmp	#LR__0845
09a84     37 00 00 FF 
09a88     44 E4 05 F1 | 	add	objptr, ##28228
09a8c     F2 34 02 FB | 	rdlong	local08, objptr
09a90     03 34 66 F0 | 	shl	local08, #3
09a94     02 00 00 FF 
09a98     38 E4 85 F1 | 	sub	objptr, ##1080
09a9c     F2 34 02 F1 | 	add	local08, objptr
09aa0     04 34 06 F1 | 	add	local08, #4
09aa4     1A 35 02 FB | 	rdlong	local08, local08
09aa8     12 34 0E F2 | 	cmp	local08, #18 wz
09aac     35 00 00 FF 
09ab0     0C E4 85 F1 | 	sub	objptr, ##27148
09ab4     38 00 90 AD |  if_e	jmp	#LR__0845
09ab8     37 00 00 FF 
09abc     44 E4 05 F1 | 	add	objptr, ##28228
09ac0     F2 3A 02 FB | 	rdlong	local11, objptr
09ac4     03 3A 66 F0 | 	shl	local11, #3
09ac8     02 00 00 FF 
09acc     38 E4 85 F1 | 	sub	objptr, ##1080
09ad0     F2 3A 02 F1 | 	add	local11, objptr
09ad4     04 3A 06 F1 | 	add	local11, #4
09ad8     1D 3B 02 FB | 	rdlong	local11, local11
09adc     FE 3B 0E F2 | 	cmp	local11, #510 wz
09ae0     35 00 00 FF 
09ae4     0C E4 85 F1 | 	sub	objptr, ##27148
09ae8     16 FA 05 56 |  if_ne	mov	result1, #22
09aec     68 00 90 5D |  if_ne	jmp	#LR__0847
09af0                 | LR__0845
09af0     37 00 00 FF 
09af4     44 E4 05 F1 | 	add	objptr, ##28228
09af8     F2 2C 02 FB | 	rdlong	local04, objptr
09afc     01 2C 06 F1 | 	add	local04, #1
09b00     F2 2C 62 FC | 	wrlong	local04, objptr
09b04     03 2C 66 F0 | 	shl	local04, #3
09b08     02 00 00 FF 
09b0c     38 E4 85 F1 | 	sub	objptr, ##1080
09b10     F2 2C 02 F1 | 	add	local04, objptr
09b14     04 2C 06 F1 | 	add	local04, #4
09b18     16 35 02 FB | 	rdlong	local08, local04
09b1c     FE 35 0E F2 | 	cmp	local08, #510 wz
09b20     35 00 00 FF 
09b24     0C E4 85 F1 | 	sub	objptr, ##27148
09b28     28 00 90 AD |  if_e	jmp	#LR__0846
09b2c     37 00 00 FF 
09b30     44 E4 05 F1 | 	add	objptr, ##28228
09b34     F2 3A 02 FB | 	rdlong	local11, objptr
09b38     0E 00 00 FF 
09b3c     1C E4 05 F1 | 	add	objptr, ##7196
09b40     F2 38 02 FB | 	rdlong	local10, objptr
09b44     45 00 00 FF 
09b48     60 E4 85 F1 | 	sub	objptr, ##35424
09b4c     1C 3B 52 F2 | 	cmps	local11, local10 wc
09b50     E4 FA 9F CD |  if_b	jmp	#LR__0841
09b54                 | LR__0846
09b54                 | ' return 0
09b54     00 FA 05 F6 | 	mov	result1, #0
09b58                 | LR__0847
09b58     A7 F0 03 F6 | 	mov	ptra, fp
09b5c     B2 00 A0 FD | 	call	#popregs_
09b60                 | _compile_print_ret
09b60     2D 00 64 FD | 	ret
09b64                 | 
09b64                 | ' 
09b64                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09b64                 | ' 
09b64                 | ' function compile_if(aline as ulong) as ulong  
09b64                 | _compile_if
09b64     09 4A 05 F6 | 	mov	COUNT_, #9
09b68     A8 00 A0 FD | 	call	#pushregs_
09b6c                 | _compile_if_enter
09b6c     09 2D 02 F6 | 	mov	local04, arg01
09b70                 | ' return expr()
09b70     F8 21 B0 FD | 	call	#_expr
09b74     37 00 00 FF 
09b78     44 E4 05 F1 | 	add	objptr, ##28228
09b7c     F2 14 02 FB | 	rdlong	arg02, objptr
09b80     0A 2F 02 F6 | 	mov	local05, arg02
09b84     03 2E 66 F0 | 	shl	local05, #3
09b88     02 00 00 FF 
09b8c     38 E4 85 F1 | 	sub	objptr, ##1080
09b90     F2 2E 02 F1 | 	add	local05, objptr
09b94     04 2E 06 F1 | 	add	local05, #4
09b98     17 2F 02 FB | 	rdlong	local05, local05
09b9c     01 14 06 F1 | 	add	arg02, #1
09ba0     02 00 00 FF 
09ba4     38 E4 05 F1 | 	add	objptr, ##1080
09ba8     F2 14 62 FC | 	wrlong	arg02, objptr
09bac     37 00 00 FF 
09bb0     44 E4 85 F1 | 	sub	objptr, ##28228
09bb4                 | ' 
09bb4                 | ' err=compile_fun_1p()
09bb4                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
09bb4     5B 2E 0E F2 | 	cmp	local05, #91 wz
09bb8     34 FA 05 56 |  if_ne	mov	result1, #52
09bbc     20 01 90 5D |  if_ne	jmp	#LR__0852
09bc0     58 2A 06 F6 | 	mov	local03, #88
09bc4     13 31 02 F6 | 	mov	local06, local01
09bc8     14 33 02 F6 | 	mov	local07, local02
09bcc     15 15 02 F6 | 	mov	arg02, local03
09bd0     4A 00 00 FF 
09bd4     7C E4 05 F1 | 	add	objptr, ##38012
09bd8     F2 12 02 FB | 	rdlong	arg01, objptr
09bdc     09 35 02 F6 | 	mov	local08, arg01
09be0     01 34 66 F0 | 	shl	local08, #1
09be4     09 35 02 F1 | 	add	local08, arg01
09be8     02 34 66 F0 | 	shl	local08, #2
09bec     03 00 00 FF 
09bf0     00 E4 85 F1 | 	sub	objptr, ##1536
09bf4     F2 34 02 F1 | 	add	local08, objptr
09bf8     1A 31 62 FC | 	wrlong	local06, local08
09bfc     03 00 00 FF 
09c00     00 E4 05 F1 | 	add	objptr, ##1536
09c04     F2 30 02 FB | 	rdlong	local06, objptr
09c08     18 13 02 F6 | 	mov	arg01, local06
09c0c     01 12 66 F0 | 	shl	arg01, #1
09c10     18 13 02 F1 | 	add	arg01, local06
09c14     02 12 66 F0 | 	shl	arg01, #2
09c18     03 00 00 FF 
09c1c     00 E4 85 F1 | 	sub	objptr, ##1536
09c20     F2 12 02 F1 | 	add	arg01, objptr
09c24     04 12 06 F1 | 	add	arg01, #4
09c28     09 33 62 FC | 	wrlong	local07, arg01
09c2c     03 00 00 FF 
09c30     00 E4 05 F1 | 	add	objptr, ##1536
09c34     F2 30 02 FB | 	rdlong	local06, objptr
09c38     18 13 02 F6 | 	mov	arg01, local06
09c3c     01 12 66 F0 | 	shl	arg01, #1
09c40     18 13 02 F1 | 	add	arg01, local06
09c44     02 12 66 F0 | 	shl	arg01, #2
09c48     03 00 00 FF 
09c4c     00 E4 85 F1 | 	sub	objptr, ##1536
09c50     F2 12 02 F1 | 	add	arg01, objptr
09c54     08 12 06 F1 | 	add	arg01, #8
09c58     09 15 62 FC | 	wrlong	arg02, arg01
09c5c     03 00 00 FF 
09c60     00 E4 05 F1 | 	add	objptr, ##1536
09c64     F2 30 02 FB | 	rdlong	local06, objptr
09c68     01 30 06 F1 | 	add	local06, #1
09c6c     F2 30 62 FC | 	wrlong	local06, objptr
09c70                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
09c70                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09c70     13 00 00 FF 
09c74     38 E4 85 F1 | 	sub	objptr, ##9784
09c78     F2 14 02 FB | 	rdlong	arg02, objptr
09c7c     01 14 06 F1 | 	add	arg02, #1
09c80     03 14 66 F0 | 	shl	arg02, #3
09c84     02 00 00 FF 
09c88     38 E4 85 F1 | 	sub	objptr, ##1080
09c8c     F2 14 02 F1 | 	add	arg02, objptr
09c90     0A 13 02 FB | 	rdlong	arg01, arg02
09c94     35 00 00 FF 
09c98     0C E4 85 F1 | 	sub	objptr, ##27148
09c9c                 | ' 
09c9c                 | ' select case s
09c9c     B3 01 00 FF 
09ca0     5E 14 06 F6 | 	mov	arg02, ##@LR__5547
09ca4     98 CC B1 FD | 	call	#__system___string_cmp
09ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
09cac     1B FA 05 A6 |  if_e	mov	result1, #27
09cb0     00 FA 05 56 |  if_ne	mov	result1, #0
09cb4     00 FA 0D F2 | 	cmp	result1, #0 wz
09cb8     10 00 90 AD |  if_e	jmp	#LR__0850
09cbc     05 12 06 F6 | 	mov	arg01, #5
09cc0     38 E4 BF FD | 	call	#_compile_immediate_assign
09cc4     FD 36 02 F6 | 	mov	local09, result1
09cc8     10 00 90 FD | 	jmp	#LR__0851
09ccc                 | LR__0850
09ccc     05 12 06 F6 | 	mov	arg01, #5
09cd0     16 15 02 F6 | 	mov	arg02, local04
09cd4     68 DA BF FD | 	call	#_compile_immediate
09cd8     FD 36 02 F6 | 	mov	local09, result1
09cdc                 | LR__0851
09cdc                 | ' return err
09cdc     1B FB 01 F6 | 	mov	result1, local09
09ce0                 | LR__0852
09ce0     A7 F0 03 F6 | 	mov	ptra, fp
09ce4     B2 00 A0 FD | 	call	#popregs_
09ce8                 | _compile_if_ret
09ce8     2D 00 64 FD | 	ret
09cec                 | 
09cec                 | ' 
09cec                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
09cec                 | ' 
09cec                 | ' function compile_else(aline as ulong) as ulong  
09cec                 | _compile_else
09cec     07 4A 05 F6 | 	mov	COUNT_, #7
09cf0     A8 00 A0 FD | 	call	#pushregs_
09cf4                 | _compile_else_enter
09cf4     09 2D 02 F6 | 	mov	local04, arg01
09cf8     5A 2A 06 F6 | 	mov	local03, #90
09cfc     13 2F 02 F6 | 	mov	local05, local01
09d00     14 31 02 F6 | 	mov	local06, local02
09d04     15 27 02 F6 | 	mov	local01, local03
09d08     4A 00 00 FF 
09d0c     7C E4 05 F1 | 	add	objptr, ##38012
09d10     F2 14 02 FB | 	rdlong	arg02, objptr
09d14     0A 13 02 F6 | 	mov	arg01, arg02
09d18     01 12 66 F0 | 	shl	arg01, #1
09d1c     0A 13 02 F1 | 	add	arg01, arg02
09d20     02 12 66 F0 | 	shl	arg01, #2
09d24     03 00 00 FF 
09d28     00 E4 85 F1 | 	sub	objptr, ##1536
09d2c     F2 12 02 F1 | 	add	arg01, objptr
09d30     09 2F 62 FC | 	wrlong	local05, arg01
09d34     03 00 00 FF 
09d38     00 E4 05 F1 | 	add	objptr, ##1536
09d3c     F2 2E 02 FB | 	rdlong	local05, objptr
09d40     17 15 02 F6 | 	mov	arg02, local05
09d44     01 14 66 F0 | 	shl	arg02, #1
09d48     17 15 02 F1 | 	add	arg02, local05
09d4c     02 14 66 F0 | 	shl	arg02, #2
09d50     03 00 00 FF 
09d54     00 E4 85 F1 | 	sub	objptr, ##1536
09d58     F2 14 02 F1 | 	add	arg02, objptr
09d5c     04 14 06 F1 | 	add	arg02, #4
09d60     0A 31 62 FC | 	wrlong	local06, arg02
09d64     03 00 00 FF 
09d68     00 E4 05 F1 | 	add	objptr, ##1536
09d6c     F2 30 02 FB | 	rdlong	local06, objptr
09d70     18 2F 02 F6 | 	mov	local05, local06
09d74     01 2E 66 F0 | 	shl	local05, #1
09d78     18 2F 02 F1 | 	add	local05, local06
09d7c     02 2E 66 F0 | 	shl	local05, #2
09d80     03 00 00 FF 
09d84     00 E4 85 F1 | 	sub	objptr, ##1536
09d88     F2 2E 02 F1 | 	add	local05, objptr
09d8c     08 2E 06 F1 | 	add	local05, #8
09d90     17 27 62 FC | 	wrlong	local01, local05
09d94     03 00 00 FF 
09d98     00 E4 05 F1 | 	add	objptr, ##1536
09d9c     F2 2E 02 FB | 	rdlong	local05, objptr
09da0     01 2E 06 F1 | 	add	local05, #1
09da4     F2 2E 62 FC | 	wrlong	local05, objptr
09da8                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09da8                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09da8     13 00 00 FF 
09dac     38 E4 85 F1 | 	sub	objptr, ##9784
09db0     F2 30 02 FB | 	rdlong	local06, objptr
09db4     01 30 06 F1 | 	add	local06, #1
09db8     03 30 66 F0 | 	shl	local06, #3
09dbc     02 00 00 FF 
09dc0     38 E4 85 F1 | 	sub	objptr, ##1080
09dc4     F2 30 02 F1 | 	add	local06, objptr
09dc8     18 13 02 FB | 	rdlong	arg01, local06
09dcc     35 00 00 FF 
09dd0     0C E4 85 F1 | 	sub	objptr, ##27148
09dd4                 | ' 
09dd4                 | ' select case s
09dd4     B3 01 00 FF 
09dd8     5E 14 06 F6 | 	mov	arg02, ##@LR__5547
09ddc     60 CB B1 FD | 	call	#__system___string_cmp
09de0     00 FA 0D F2 | 	cmp	result1, #0 wz
09de4     1B FA 05 A6 |  if_e	mov	result1, #27
09de8     00 FA 05 56 |  if_ne	mov	result1, #0
09dec     00 FA 0D F2 | 	cmp	result1, #0 wz
09df0     10 00 90 AD |  if_e	jmp	#LR__0860
09df4     05 12 06 F6 | 	mov	arg01, #5
09df8     00 E3 BF FD | 	call	#_compile_immediate_assign
09dfc     FD 32 02 F6 | 	mov	local07, result1
09e00     10 00 90 FD | 	jmp	#LR__0861
09e04                 | LR__0860
09e04     05 12 06 F6 | 	mov	arg01, #5
09e08     16 15 02 F6 | 	mov	arg02, local04
09e0c     30 D9 BF FD | 	call	#_compile_immediate
09e10     FD 32 02 F6 | 	mov	local07, result1
09e14                 | LR__0861
09e14                 | ' return err
09e14     19 FB 01 F6 | 	mov	result1, local07
09e18     A7 F0 03 F6 | 	mov	ptra, fp
09e1c     B2 00 A0 FD | 	call	#popregs_
09e20                 | _compile_else_ret
09e20     2D 00 64 FD | 	ret
09e24                 | 
09e24                 | ' 
09e24                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09e24                 | ' 
09e24                 | ' function compile_dim() as ulong  
09e24                 | _compile_dim
09e24     11 4A 05 F6 | 	mov	COUNT_, #17
09e28     A8 00 A0 FD | 	call	#pushregs_
09e2c     01 26 06 F6 | 	mov	local01, #1
09e30     01 28 06 F6 | 	mov	local02, #1
09e34     01 2A 06 F6 | 	mov	local03, #1
09e38                 | ' 
09e38                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09e38                 | ' if isname(lparts(ct).part$) then 
09e38     37 00 00 FF 
09e3c     44 E4 05 F1 | 	add	objptr, ##28228
09e40     F2 18 02 FB | 	rdlong	arg04, objptr
09e44     03 18 66 F0 | 	shl	arg04, #3
09e48     02 00 00 FF 
09e4c     38 E4 85 F1 | 	sub	objptr, ##1080
09e50     F2 18 02 F1 | 	add	arg04, objptr
09e54     0C 13 02 FB | 	rdlong	arg01, arg04
09e58     35 00 00 FF 
09e5c     0C E4 85 F1 | 	sub	objptr, ##27148
09e60     34 C7 BF FD | 	call	#_isname
09e64     00 FA 0D F2 | 	cmp	result1, #0 wz
09e68     78 05 90 AD |  if_e	jmp	#LR__0893
09e6c     37 00 00 FF 
09e70     44 E4 05 F1 | 	add	objptr, ##28228
09e74     F2 2C 02 FB | 	rdlong	local04, objptr
09e78     03 2C 66 F0 | 	shl	local04, #3
09e7c     02 00 00 FF 
09e80     38 E4 85 F1 | 	sub	objptr, ##1080
09e84     F2 2C 02 F1 | 	add	local04, objptr
09e88     16 2F 02 FB | 	rdlong	local05, local04
09e8c     01 30 66 F6 | 	neg	local06, #1
09e90                 | '   varname2$=lparts(ct).part$ 
09e90                 | '   j=-1
09e90                 | '   if varnum>0 then
09e90     04 E4 85 F1 | 	sub	objptr, #4
09e94     F2 32 02 FB | 	rdlong	local07, objptr
09e98     35 00 00 FF 
09e9c     08 E4 85 F1 | 	sub	objptr, ##27144
09ea0     01 32 56 F2 | 	cmps	local07, #1 wc
09ea4     58 00 90 CD |  if_b	jmp	#LR__0872
09ea8                 | '     for i=0 to varnum-1
09ea8     00 34 06 F6 | 	mov	local08, #0
09eac     35 00 00 FF 
09eb0     08 E4 05 F1 | 	add	objptr, ##27144
09eb4     F2 36 02 FB | 	rdlong	local09, objptr
09eb8     35 00 00 FF 
09ebc     08 E4 85 F1 | 	sub	objptr, ##27144
09ec0                 | LR__0870
09ec0     1B 35 52 F2 | 	cmps	local08, local09 wc
09ec4     38 00 90 3D |  if_ae	jmp	#LR__0871
09ec8                 | '       if variables(i).name=varname2$ then j=i : exit
09ec8     1A 2D 02 F6 | 	mov	local04, local08
09ecc     04 2C 66 F0 | 	shl	local04, #4
09ed0     14 00 00 FF 
09ed4     F8 E5 05 F1 | 	add	objptr, ##10744
09ed8     F2 2C 02 F1 | 	add	local04, objptr
09edc     16 13 02 FB | 	rdlong	arg01, local04
09ee0     17 15 02 F6 | 	mov	arg02, local05
09ee4     14 00 00 FF 
09ee8     F8 E5 85 F1 | 	sub	objptr, ##10744
09eec     50 CA B1 FD | 	call	#__system___string_cmp
09ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
09ef4     1A 31 02 A6 |  if_e	mov	local06, local08
09ef8     01 34 06 51 |  if_ne	add	local08, #1
09efc     C0 FF 9F 5D |  if_ne	jmp	#LR__0870
09f00                 | LR__0871
09f00                 | LR__0872
09f00                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09f00     FF FF 7F FF 
09f04     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09f08     35 00 00 AF 
09f0c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09f10     F2 30 02 AB |  if_e	rdlong	local06, objptr
09f14     35 00 00 AF 
09f18     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09f1c     78 00 90 AD |  if_e	jmp	#LR__0873
09f20     00 12 06 F6 | 	mov	arg01, #0
09f24     94 26 B2 FD | 	call	#__system___getiolock_0603
09f28     FD 12 02 F6 | 	mov	arg01, result1
09f2c     E8 C9 B1 FD | 	call	#__system___lockmem
09f30     B5 01 00 FF 
09f34     F7 14 06 F6 | 	mov	arg02, ##@LR__5802
09f38     00 12 06 F6 | 	mov	arg01, #0
09f3c     00 16 06 F6 | 	mov	arg03, #0
09f40     CC D6 B1 FD | 	call	#__system___basic_print_string
09f44     52 00 00 FF 
09f48     B0 E4 05 F1 | 	add	objptr, ##42160
09f4c     F2 14 02 FB | 	rdlong	arg02, objptr
09f50     52 00 00 FF 
09f54     B0 E4 85 F1 | 	sub	objptr, ##42160
09f58     00 12 06 F6 | 	mov	arg01, #0
09f5c     00 16 06 F6 | 	mov	arg03, #0
09f60     0A 18 06 F6 | 	mov	arg04, #10
09f64     2C D7 B1 FD | 	call	#__system___basic_print_unsigned
09f68     B5 01 00 FF 
09f6c     05 15 06 F6 | 	mov	arg02, ##@LR__5803
09f70     00 12 06 F6 | 	mov	arg01, #0
09f74     00 16 06 F6 | 	mov	arg03, #0
09f78     94 D6 B1 FD | 	call	#__system___basic_print_string
09f7c     00 12 06 F6 | 	mov	arg01, #0
09f80     0A 14 06 F6 | 	mov	arg02, #10
09f84     00 16 06 F6 | 	mov	arg03, #0
09f88     2C D6 B1 FD | 	call	#__system___basic_print_char
09f8c     00 12 06 F6 | 	mov	arg01, #0
09f90     28 26 B2 FD | 	call	#__system___getiolock_0603
09f94     FD 00 68 FC | 	wrlong	#0, result1
09f98                 | LR__0873
09f98                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09f98     37 00 00 FF 
09f9c     44 E4 05 F1 | 	add	objptr, ##28228
09fa0     F2 14 02 FB | 	rdlong	arg02, objptr
09fa4     01 14 06 F1 | 	add	arg02, #1
09fa8     03 14 66 F0 | 	shl	arg02, #3
09fac     02 00 00 FF 
09fb0     38 E4 85 F1 | 	sub	objptr, ##1080
09fb4     F2 14 02 F1 | 	add	arg02, objptr
09fb8     0A 13 02 FB | 	rdlong	arg01, arg02
09fbc     B5 01 00 FF 
09fc0     26 15 06 F6 | 	mov	arg02, ##@LR__5804
09fc4     35 00 00 FF 
09fc8     0C E4 85 F1 | 	sub	objptr, ##27148
09fcc     70 C9 B1 FD | 	call	#__system___string_cmp
09fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
09fd4     44 00 90 AD |  if_e	jmp	#LR__0874
09fd8     37 00 00 FF 
09fdc     44 E4 05 F1 | 	add	objptr, ##28228
09fe0     F2 36 02 FB | 	rdlong	local09, objptr
09fe4     01 36 06 F1 | 	add	local09, #1
09fe8     03 36 66 F0 | 	shl	local09, #3
09fec     02 00 00 FF 
09ff0     38 E4 85 F1 | 	sub	objptr, ##1080
09ff4     F2 36 02 F1 | 	add	local09, objptr
09ff8     1B 13 02 FB | 	rdlong	arg01, local09
09ffc     B5 01 00 FF 
0a000     28 15 06 F6 | 	mov	arg02, ##@LR__5805
0a004     35 00 00 FF 
0a008     0C E4 85 F1 | 	sub	objptr, ##27148
0a00c     30 C9 B1 FD | 	call	#__system___string_cmp
0a010     00 FA 0D F2 | 	cmp	result1, #0 wz
0a014     2B FA 05 56 |  if_ne	mov	result1, #43
0a018     D0 04 90 5D |  if_ne	jmp	#LR__0895
0a01c                 | LR__0874
0a01c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0a01c     37 00 00 FF 
0a020     44 E4 05 F1 | 	add	objptr, ##28228
0a024     F2 14 02 FB | 	rdlong	arg02, objptr
0a028     01 14 06 F1 | 	add	arg02, #1
0a02c     03 14 66 F0 | 	shl	arg02, #3
0a030     02 00 00 FF 
0a034     38 E4 85 F1 | 	sub	objptr, ##1080
0a038     F2 14 02 F1 | 	add	arg02, objptr
0a03c     0A 13 02 FB | 	rdlong	arg01, arg02
0a040     B5 01 00 FF 
0a044     2B 15 06 F6 | 	mov	arg02, ##@LR__5806
0a048     35 00 00 FF 
0a04c     0C E4 85 F1 | 	sub	objptr, ##27148
0a050     EC C8 B1 FD | 	call	#__system___string_cmp
0a054     00 FA 0D F2 | 	cmp	result1, #0 wz
0a058     37 00 00 AF 
0a05c     44 E4 05 A1 |  if_e	add	objptr, ##28228
0a060     F2 38 02 AB |  if_e	rdlong	local10, objptr
0a064     37 00 00 AF 
0a068     44 E4 85 A1 |  if_e	sub	objptr, ##28228
0a06c     01 38 06 A1 |  if_e	add	local10, #1
0a070     5C 01 90 AD |  if_e	jmp	#LR__0879
0a074     37 00 00 FF 
0a078     44 E4 05 F1 | 	add	objptr, ##28228
0a07c     F2 38 02 FB | 	rdlong	local10, objptr
0a080     37 00 00 FF 
0a084     44 E4 85 F1 | 	sub	objptr, ##28228
0a088     02 38 06 F1 | 	add	local10, #2
0a08c     00 3A 06 F6 | 	mov	local11, #0
0a090                 | '   l=ct+2 : m=0 : do
0a090                 | LR__0875
0a090                 | '   if isdec(lparts(l).part$) then 
0a090     1C 2D 02 F6 | 	mov	local04, local10
0a094     03 2C 66 F0 | 	shl	local04, #3
0a098     35 00 00 FF 
0a09c     0C E4 05 F1 | 	add	objptr, ##27148
0a0a0     F2 2C 02 F1 | 	add	local04, objptr
0a0a4     16 13 02 FB | 	rdlong	arg01, local04
0a0a8     35 00 00 FF 
0a0ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a0b0     E8 CD BF FD | 	call	#_isdec
0a0b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0a0b8     44 00 90 AD |  if_e	jmp	#LR__0876
0a0bc     1D 3D 02 F6 | 	mov	local12, local11
0a0c0     13 3D 06 F1 | 	add	local12, #local01
0a0c4     1C 37 02 F6 | 	mov	local09, local10
0a0c8     03 36 66 F0 | 	shl	local09, #3
0a0cc     35 00 00 FF 
0a0d0     0C E4 05 F1 | 	add	objptr, ##27148
0a0d4     F2 36 02 F1 | 	add	local09, objptr
0a0d8     1B 13 02 FB | 	rdlong	arg01, local09
0a0dc     00 14 06 F6 | 	mov	arg02, #0
0a0e0     35 00 00 FF 
0a0e4     0C E4 85 F1 | 	sub	objptr, ##27148
0a0e8     20 FD B1 FD | 	call	#__system____builtin_atoi
0a0ec     FD 3E 02 F6 | 	mov	local13, result1
0a0f0                 | 	'.live	local13
0a0f0                 | 	'.live	local12
0a0f0     00 3C 8E F9 | 	altd	local12, #0
0a0f4     1F 3D 02 F6 | 	mov	local12, local13
0a0f8     01 3A 06 F1 | 	add	local11, #1
0a0fc     08 00 90 FD | 	jmp	#LR__0877
0a100                 | LR__0876
0a100                 | '     return(17)
0a100     11 FA 05 F6 | 	mov	result1, #17
0a104     E4 03 90 FD | 	jmp	#LR__0895
0a108                 | LR__0877
0a108                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
0a108     1C 2D 02 F6 | 	mov	local04, local10
0a10c     01 2C 06 F1 | 	add	local04, #1
0a110     03 2C 66 F0 | 	shl	local04, #3
0a114     35 00 00 FF 
0a118     0C E4 05 F1 | 	add	objptr, ##27148
0a11c     F2 2C 02 F1 | 	add	local04, objptr
0a120     16 13 02 FB | 	rdlong	arg01, local04
0a124     B5 01 00 FF 
0a128     2E 15 06 F6 | 	mov	arg02, ##@LR__5807
0a12c     35 00 00 FF 
0a130     0C E4 85 F1 | 	sub	objptr, ##27148
0a134     08 C8 B1 FD | 	call	#__system___string_cmp
0a138     00 FA 0D F2 | 	cmp	result1, #0 wz
0a13c     3C 00 90 AD |  if_e	jmp	#LR__0878
0a140     1C 3F 02 F6 | 	mov	local13, local10
0a144     01 3E 06 F1 | 	add	local13, #1
0a148     03 3E 66 F0 | 	shl	local13, #3
0a14c     35 00 00 FF 
0a150     0C E4 05 F1 | 	add	objptr, ##27148
0a154     F2 3E 02 F1 | 	add	local13, objptr
0a158     1F 13 02 FB | 	rdlong	arg01, local13
0a15c     B5 01 00 FF 
0a160     30 15 06 F6 | 	mov	arg02, ##@LR__5808
0a164     35 00 00 FF 
0a168     0C E4 85 F1 | 	sub	objptr, ##27148
0a16c     D0 C7 B1 FD | 	call	#__system___string_cmp
0a170     00 FA 0D F2 | 	cmp	result1, #0 wz
0a174     2C FA 05 56 |  if_ne	mov	result1, #44
0a178     70 03 90 5D |  if_ne	jmp	#LR__0895
0a17c                 | LR__0878
0a17c     02 38 06 F1 | 	add	local10, #2
0a180     1C 2D 02 F6 | 	mov	local04, local10
0a184     01 2C 86 F1 | 	sub	local04, #1
0a188     03 2C 66 F0 | 	shl	local04, #3
0a18c     35 00 00 FF 
0a190     0C E4 05 F1 | 	add	objptr, ##27148
0a194     F2 2C 02 F1 | 	add	local04, objptr
0a198     16 13 02 FB | 	rdlong	arg01, local04
0a19c     B5 01 00 FF 
0a1a0     32 15 06 F6 | 	mov	arg02, ##@LR__5809
0a1a4     35 00 00 FF 
0a1a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a1ac     90 C7 B1 FD | 	call	#__system___string_cmp
0a1b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a1b4     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
0a1b8     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0875
0a1bc                 | '   if m>3 then return 45
0a1bc     04 3A 56 F2 | 	cmps	local11, #4 wc
0a1c0     2D FA 05 36 |  if_ae	mov	result1, #45
0a1c4     24 03 90 3D |  if_ae	jmp	#LR__0895
0a1c8     00 41 06 F6 | 	mov	local14, #256
0a1cc     0C 42 06 F6 | 	mov	local15, #12
0a1d0                 | LR__0879
0a1d0                 | '   arraytype=array_no_type : esize=12
0a1d0                 | ' 1350 
0a1d0                 | '   if lparts(l).part$="as" then
0a1d0     1C 2D 02 F6 | 	mov	local04, local10
0a1d4     03 2C 66 F0 | 	shl	local04, #3
0a1d8     35 00 00 FF 
0a1dc     0C E4 05 F1 | 	add	objptr, ##27148
0a1e0     F2 2C 02 F1 | 	add	local04, objptr
0a1e4     16 13 02 FB | 	rdlong	arg01, local04
0a1e8     B5 01 00 FF 
0a1ec     34 15 06 F6 | 	mov	arg02, ##@LR__5810
0a1f0     35 00 00 FF 
0a1f4     0C E4 85 F1 | 	sub	objptr, ##27148
0a1f8     44 C7 B1 FD | 	call	#__system___string_cmp
0a1fc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a200     E8 01 90 5D |  if_ne	jmp	#LR__0894
0a204                 | '     select case lparts(l+1).part$
0a204     1C 3D 02 F6 | 	mov	local12, local10
0a208     01 3C 06 F1 | 	add	local12, #1
0a20c     03 3C 66 F0 | 	shl	local12, #3
0a210     35 00 00 FF 
0a214     0C E4 05 F1 | 	add	objptr, ##27148
0a218     F2 3C 02 F1 | 	add	local12, objptr
0a21c     1E 45 02 FB | 	rdlong	local16, local12
0a220     B5 01 00 FF 
0a224     37 15 06 F6 | 	mov	arg02, ##@LR__5811
0a228     22 13 02 F6 | 	mov	arg01, local16
0a22c     35 00 00 FF 
0a230     0C E4 85 F1 | 	sub	objptr, ##27148
0a234     08 C7 B1 FD | 	call	#__system___string_cmp
0a238     00 FA 0D F2 | 	cmp	result1, #0 wz
0a23c     0C 01 90 AD |  if_e	jmp	#LR__0880
0a240     B5 01 00 FF 
0a244     3C 15 06 F6 | 	mov	arg02, ##@LR__5812
0a248     22 13 02 F6 | 	mov	arg01, local16
0a24c     F0 C6 B1 FD | 	call	#__system___string_cmp
0a250     00 FA 0D F2 | 	cmp	result1, #0 wz
0a254     00 01 90 AD |  if_e	jmp	#LR__0881
0a258     B5 01 00 FF 
0a25c     42 15 06 F6 | 	mov	arg02, ##@LR__5813
0a260     22 13 02 F6 | 	mov	arg01, local16
0a264     D8 C6 B1 FD | 	call	#__system___string_cmp
0a268     00 FA 0D F2 | 	cmp	result1, #0 wz
0a26c     F4 00 90 AD |  if_e	jmp	#LR__0882
0a270     B5 01 00 FF 
0a274     48 15 06 F6 | 	mov	arg02, ##@LR__5814
0a278     22 13 02 F6 | 	mov	arg01, local16
0a27c     C0 C6 B1 FD | 	call	#__system___string_cmp
0a280     00 FA 0D F2 | 	cmp	result1, #0 wz
0a284     E8 00 90 AD |  if_e	jmp	#LR__0883
0a288     B5 01 00 FF 
0a28c     4F 15 06 F6 | 	mov	arg02, ##@LR__5815
0a290     22 13 02 F6 | 	mov	arg01, local16
0a294     A8 C6 B1 FD | 	call	#__system___string_cmp
0a298     00 FA 0D F2 | 	cmp	result1, #0 wz
0a29c     DC 00 90 AD |  if_e	jmp	#LR__0884
0a2a0     B5 01 00 FF 
0a2a4     54 15 06 F6 | 	mov	arg02, ##@LR__5816
0a2a8     22 13 02 F6 | 	mov	arg01, local16
0a2ac     90 C6 B1 FD | 	call	#__system___string_cmp
0a2b0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2b4     D0 00 90 AD |  if_e	jmp	#LR__0885
0a2b8     B5 01 00 FF 
0a2bc     5C 15 06 F6 | 	mov	arg02, ##@LR__5817
0a2c0     22 13 02 F6 | 	mov	arg01, local16
0a2c4     78 C6 B1 FD | 	call	#__system___string_cmp
0a2c8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2cc     C4 00 90 AD |  if_e	jmp	#LR__0886
0a2d0     B5 01 00 FF 
0a2d4     62 15 06 F6 | 	mov	arg02, ##@LR__5818
0a2d8     22 13 02 F6 | 	mov	arg01, local16
0a2dc     60 C6 B1 FD | 	call	#__system___string_cmp
0a2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2e4     B8 00 90 AD |  if_e	jmp	#LR__0887
0a2e8     B5 01 00 FF 
0a2ec     68 15 06 F6 | 	mov	arg02, ##@LR__5819
0a2f0     22 13 02 F6 | 	mov	arg01, local16
0a2f4     48 C6 B1 FD | 	call	#__system___string_cmp
0a2f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0a2fc     AC 00 90 AD |  if_e	jmp	#LR__0888
0a300     B5 01 00 FF 
0a304     6F 15 06 F6 | 	mov	arg02, ##@LR__5820
0a308     22 13 02 F6 | 	mov	arg01, local16
0a30c     30 C6 B1 FD | 	call	#__system___string_cmp
0a310     00 FA 0D F2 | 	cmp	result1, #0 wz
0a314     A0 00 90 AD |  if_e	jmp	#LR__0889
0a318     B5 01 00 FF 
0a31c     76 15 06 F6 | 	mov	arg02, ##@LR__5821
0a320     22 13 02 F6 | 	mov	arg01, local16
0a324     18 C6 B1 FD | 	call	#__system___string_cmp
0a328     00 FA 0D F2 | 	cmp	result1, #0 wz
0a32c     94 00 90 AD |  if_e	jmp	#LR__0890
0a330     B5 01 00 FF 
0a334     7D 15 06 F6 | 	mov	arg02, ##@LR__5822
0a338     22 13 02 F6 | 	mov	arg01, local16
0a33c     00 C6 B1 FD | 	call	#__system___string_cmp
0a340     00 FA 0D F2 | 	cmp	result1, #0 wz
0a344     88 00 90 AD |  if_e	jmp	#LR__0891
0a348     90 00 90 FD | 	jmp	#LR__0892
0a34c                 | LR__0880
0a34c     01 41 06 F6 | 	mov	local14, #257
0a350     01 42 06 F6 | 	mov	local15, #1
0a354     94 00 90 FD | 	jmp	#LR__0894
0a358                 | LR__0881
0a358     02 41 06 F6 | 	mov	local14, #258
0a35c     01 42 06 F6 | 	mov	local15, #1
0a360     88 00 90 FD | 	jmp	#LR__0894
0a364                 | LR__0882
0a364     03 41 06 F6 | 	mov	local14, #259
0a368     02 42 06 F6 | 	mov	local15, #2
0a36c     7C 00 90 FD | 	jmp	#LR__0894
0a370                 | LR__0883
0a370     04 41 06 F6 | 	mov	local14, #260
0a374     02 42 06 F6 | 	mov	local15, #2
0a378     70 00 90 FD | 	jmp	#LR__0894
0a37c                 | LR__0884
0a37c     05 41 06 F6 | 	mov	local14, #261
0a380     04 42 06 F6 | 	mov	local15, #4
0a384     64 00 90 FD | 	jmp	#LR__0894
0a388                 | LR__0885
0a388     05 41 06 F6 | 	mov	local14, #261
0a38c     04 42 06 F6 | 	mov	local15, #4
0a390     58 00 90 FD | 	jmp	#LR__0894
0a394                 | LR__0886
0a394     06 41 06 F6 | 	mov	local14, #262
0a398     04 42 06 F6 | 	mov	local15, #4
0a39c     4C 00 90 FD | 	jmp	#LR__0894
0a3a0                 | LR__0887
0a3a0     07 41 06 F6 | 	mov	local14, #263
0a3a4     08 42 06 F6 | 	mov	local15, #8
0a3a8     40 00 90 FD | 	jmp	#LR__0894
0a3ac                 | LR__0888
0a3ac     08 41 06 F6 | 	mov	local14, #264
0a3b0     08 42 06 F6 | 	mov	local15, #8
0a3b4     34 00 90 FD | 	jmp	#LR__0894
0a3b8                 | LR__0889
0a3b8     09 41 06 F6 | 	mov	local14, #265
0a3bc     04 42 06 F6 | 	mov	local15, #4
0a3c0     28 00 90 FD | 	jmp	#LR__0894
0a3c4                 | LR__0890
0a3c4     0A 41 06 F6 | 	mov	local14, #266
0a3c8     08 42 06 F6 | 	mov	local15, #8
0a3cc     1C 00 90 FD | 	jmp	#LR__0894
0a3d0                 | LR__0891
0a3d0     0B 41 06 F6 | 	mov	local14, #267
0a3d4     04 42 06 F6 | 	mov	local15, #4
0a3d8     10 00 90 FD | 	jmp	#LR__0894
0a3dc                 | LR__0892
0a3dc     2F FA 05 F6 | 	mov	result1, #47
0a3e0     08 01 90 FD | 	jmp	#LR__0895
0a3e4                 | LR__0893
0a3e4                 | '   return 46
0a3e4     2E FA 05 F6 | 	mov	result1, #46
0a3e8     00 01 90 FD | 	jmp	#LR__0895
0a3ec                 | LR__0894
0a3ec     13 43 02 FD | 	qmul	local15, local01
0a3f0     18 32 62 FD | 	getqx	local07
0a3f4     14 33 02 FD | 	qmul	local07, local02
0a3f8     18 44 62 FD | 	getqx	local16
0a3fc     15 45 02 FD | 	qmul	local16, local03
0a400     52 00 00 FF 
0a404     98 E4 05 F1 | 	add	objptr, ##42136
0a408     F2 46 02 FB | 	rdlong	local17, objptr
0a40c     20 15 02 F6 | 	mov	arg02, local14
0a410     18 44 62 FD | 	getqx	local16
0a414     22 47 82 F1 | 	sub	local17, local16
0a418     10 46 86 F1 | 	sub	local17, #16
0a41c     0F 46 26 F5 | 	andn	local17, #15
0a420     F2 46 62 FC | 	wrlong	local17, objptr
0a424     52 00 00 FF 
0a428     98 E4 85 F1 | 	sub	objptr, ##42136
0a42c     23 13 02 F6 | 	mov	arg01, local17
0a430     DC 8C B1 FD | 	call	#_psdpoke
0a434     23 13 02 F6 | 	mov	arg01, local17
0a438     02 12 06 F1 | 	add	arg01, #2
0a43c     21 15 02 F6 | 	mov	arg02, local15
0a440     CC 8C B1 FD | 	call	#_psdpoke
0a444     23 13 02 F6 | 	mov	arg01, local17
0a448     04 12 06 F1 | 	add	arg01, #4
0a44c     13 15 02 F6 | 	mov	arg02, local01
0a450     74 8C B1 FD | 	call	#_pslpoke
0a454     23 13 02 F6 | 	mov	arg01, local17
0a458     08 12 06 F1 | 	add	arg01, #8
0a45c     14 15 02 F6 | 	mov	arg02, local02
0a460     64 8C B1 FD | 	call	#_pslpoke
0a464     23 13 02 F6 | 	mov	arg01, local17
0a468     0C 12 06 F1 | 	add	arg01, #12
0a46c     15 15 02 F6 | 	mov	arg02, local03
0a470     54 8C B1 FD | 	call	#_pslpoke
0a474     18 3D 02 F6 | 	mov	local12, local06
0a478     04 3C 66 F0 | 	shl	local12, #4
0a47c     14 00 00 FF 
0a480     F8 E5 05 F1 | 	add	objptr, ##10744
0a484     F2 3C 02 F1 | 	add	local12, objptr
0a488     1E 2F 62 FC | 	wrlong	local05, local12
0a48c     18 3D 02 F6 | 	mov	local12, local06
0a490     04 3C 66 F0 | 	shl	local12, #4
0a494     F2 3C 02 F1 | 	add	local12, objptr
0a498     04 3C 06 F1 | 	add	local12, #4
0a49c     1E 47 62 FC | 	wrlong	local17, local12
0a4a0     18 3D 02 F6 | 	mov	local12, local06
0a4a4     04 3C 66 F0 | 	shl	local12, #4
0a4a8     F2 3C 02 F1 | 	add	local12, objptr
0a4ac     0C 3C 06 F1 | 	add	local12, #12
0a4b0     1E 41 62 FC | 	wrlong	local14, local12
0a4b4                 | ' memtop=arrayptr
0a4b4                 | ' psdpoke arrayptr,arraytype 
0a4b4                 | ' psdpoke arrayptr+2,esize 
0a4b4                 | ' pslpoke arrayptr+4,dims(0)
0a4b4                 | ' pslpoke arrayptr+8,dims(1)
0a4b4                 | ' pslpoke arrayptr+12,dims(2)
0a4b4                 | ' variables(j).name=varname2$
0a4b4                 | ' variables(j).value.uresult=arrayptr
0a4b4                 | ' variables(j).vartype=arraytype
0a4b4                 | ' if j=varnum then varnum+=1
0a4b4     20 00 00 FF 
0a4b8     10 E4 05 F1 | 	add	objptr, ##16400
0a4bc     F2 32 02 FB | 	rdlong	local07, objptr
0a4c0     35 00 00 FF 
0a4c4     08 E4 85 F1 | 	sub	objptr, ##27144
0a4c8     19 31 0A F2 | 	cmp	local06, local07 wz
0a4cc     35 00 00 AF 
0a4d0     08 E4 05 A1 |  if_e	add	objptr, ##27144
0a4d4     F2 32 02 AB |  if_e	rdlong	local07, objptr
0a4d8     01 32 06 A1 |  if_e	add	local07, #1
0a4dc     F2 32 62 AC |  if_e	wrlong	local07, objptr
0a4e0     35 00 00 AF 
0a4e4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0a4e8                 | ' return 0
0a4e8     00 FA 05 F6 | 	mov	result1, #0
0a4ec                 | LR__0895
0a4ec     A7 F0 03 F6 | 	mov	ptra, fp
0a4f0     B2 00 A0 FD | 	call	#popregs_
0a4f4                 | _compile_dim_ret
0a4f4     2D 00 64 FD | 	ret
0a4f8                 | 
0a4f8                 | ' 
0a4f8                 | ' '----- compile 'for' command. 
0a4f8                 | ' 
0a4f8                 | ' function compile_for() as ulong  
0a4f8                 | _compile_for
0a4f8     0E 4A 05 F6 | 	mov	COUNT_, #14
0a4fc     A8 00 A0 FD | 	call	#pushregs_
0a500                 | ' 
0a500                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0a500     37 00 00 FF 
0a504     44 E4 05 F1 | 	add	objptr, ##28228
0a508     F2 14 02 FB | 	rdlong	arg02, objptr
0a50c     01 14 06 F1 | 	add	arg02, #1
0a510     03 14 66 F0 | 	shl	arg02, #3
0a514     02 00 00 FF 
0a518     38 E4 85 F1 | 	sub	objptr, ##1080
0a51c     F2 14 02 F1 | 	add	arg02, objptr
0a520     0A 13 02 FB | 	rdlong	arg01, arg02
0a524     35 00 00 FF 
0a528     0C E4 85 F1 | 	sub	objptr, ##27148
0a52c                 | ' 
0a52c                 | ' select case s
0a52c     B3 01 00 FF 
0a530     5E 14 06 F6 | 	mov	arg02, ##@LR__5547
0a534     08 C4 B1 FD | 	call	#__system___string_cmp
0a538     00 FA 0D F2 | 	cmp	result1, #0 wz
0a53c     1B FA 05 A6 |  if_e	mov	result1, #27
0a540     00 FA 05 56 |  if_ne	mov	result1, #0
0a544     00 FA 0D F2 | 	cmp	result1, #0 wz
0a548     0C 00 90 AD |  if_e	jmp	#LR__0900
0a54c     05 12 06 F6 | 	mov	arg01, #5
0a550     A8 DB BF FD | 	call	#_compile_immediate_assign
0a554     08 00 90 FD | 	jmp	#LR__0901
0a558                 | LR__0900
0a558     20 FA 05 F6 | 	mov	result1, #32
0a55c     58 08 90 FD | 	jmp	#LR__0917
0a560                 | LR__0901
0a560     4A 00 00 FF 
0a564     7C E4 05 F1 | 	add	objptr, ##38012
0a568     F2 14 02 FB | 	rdlong	arg02, objptr
0a56c     0A 13 02 F6 | 	mov	arg01, arg02
0a570     01 12 86 F1 | 	sub	arg01, #1
0a574     09 2D 02 F6 | 	mov	local04, arg01
0a578     01 2C 66 F0 | 	shl	local04, #1
0a57c     09 2D 02 F1 | 	add	local04, arg01
0a580     02 2C 66 F0 | 	shl	local04, #2
0a584     03 00 00 FF 
0a588     00 E4 85 F1 | 	sub	objptr, ##1536
0a58c     F2 2C 02 F1 | 	add	local04, objptr
0a590     16 27 02 FB | 	rdlong	local01, local04
0a594     04 2C 06 F1 | 	add	local04, #4
0a598     16 2F 02 FB | 	rdlong	local05, local04
0a59c     01 14 86 F1 | 	sub	arg02, #1
0a5a0     0A 2D 02 F6 | 	mov	local04, arg02
0a5a4     01 2C 66 F0 | 	shl	local04, #1
0a5a8     0A 2D 02 F1 | 	add	local04, arg02
0a5ac     02 2C 66 F0 | 	shl	local04, #2
0a5b0     F2 30 02 F6 | 	mov	local06, objptr
0a5b4     F2 2C 02 F1 | 	add	local04, objptr
0a5b8     08 2C 06 F1 | 	add	local04, #8
0a5bc     16 2D 02 FB | 	rdlong	local04, local04
0a5c0     17 29 02 F6 | 	mov	local02, local05
0a5c4     16 2B 02 F6 | 	mov	local03, local04
0a5c8                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
0a5c8     17 2A 0E F2 | 	cmp	local03, #23 wz
0a5cc     47 00 00 FF 
0a5d0     7C E4 85 F1 | 	sub	objptr, ##36476
0a5d4     22 FA 05 56 |  if_ne	mov	result1, #34
0a5d8     DC 07 90 5D |  if_ne	jmp	#LR__0917
0a5dc     13 33 02 F6 | 	mov	local07, local01
0a5e0                 | ' varnum=t1.result.uresult
0a5e0                 | ' if lparts(ct).part$<>"to" then return 33
0a5e0     37 00 00 FF 
0a5e4     44 E4 05 F1 | 	add	objptr, ##28228
0a5e8     F2 2C 02 FB | 	rdlong	local04, objptr
0a5ec     03 2C 66 F0 | 	shl	local04, #3
0a5f0     02 00 00 FF 
0a5f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5f8     F2 2C 02 F1 | 	add	local04, objptr
0a5fc     16 13 02 FB | 	rdlong	arg01, local04
0a600     B5 01 00 FF 
0a604     84 15 06 F6 | 	mov	arg02, ##@LR__5823
0a608     35 00 00 FF 
0a60c     0C E4 85 F1 | 	sub	objptr, ##27148
0a610     2C C3 B1 FD | 	call	#__system___string_cmp
0a614     00 FA 0D F2 | 	cmp	result1, #0 wz
0a618     21 FA 05 56 |  if_ne	mov	result1, #33
0a61c     98 07 90 5D |  if_ne	jmp	#LR__0917
0a620     37 00 00 FF 
0a624     44 E4 05 F1 | 	add	objptr, ##28228
0a628     F2 34 02 FB | 	rdlong	local08, objptr
0a62c     01 34 06 F1 | 	add	local08, #1
0a630     F2 34 62 FC | 	wrlong	local08, objptr
0a634     37 00 00 FF 
0a638     44 E4 85 F1 | 	sub	objptr, ##28228
0a63c     2C 17 B0 FD | 	call	#_expr
0a640                 | ' ct+=1
0a640                 | ' expr()  										' there is "to" value pushed on the stack
0a640                 | ' if lparts(ct).part$="step" orelse left$(lparts(ct).part$,2)="s." then
0a640     37 00 00 FF 
0a644     44 E4 05 F1 | 	add	objptr, ##28228
0a648     F2 2C 02 FB | 	rdlong	local04, objptr
0a64c     03 2C 66 F0 | 	shl	local04, #3
0a650     02 00 00 FF 
0a654     38 E4 85 F1 | 	sub	objptr, ##1080
0a658     F2 2C 02 F1 | 	add	local04, objptr
0a65c     16 13 02 FB | 	rdlong	arg01, local04
0a660     B5 01 00 FF 
0a664     87 15 06 F6 | 	mov	arg02, ##@LR__5824
0a668     35 00 00 FF 
0a66c     0C E4 85 F1 | 	sub	objptr, ##27148
0a670     CC C2 B1 FD | 	call	#__system___string_cmp
0a674     00 FA 0D F2 | 	cmp	result1, #0 wz
0a678     48 00 90 AD |  if_e	jmp	#LR__0902
0a67c     37 00 00 FF 
0a680     44 E4 05 F1 | 	add	objptr, ##28228
0a684     F2 2C 02 FB | 	rdlong	local04, objptr
0a688     03 2C 66 F0 | 	shl	local04, #3
0a68c     02 00 00 FF 
0a690     38 E4 85 F1 | 	sub	objptr, ##1080
0a694     F2 2C 02 F1 | 	add	local04, objptr
0a698     16 13 02 FB | 	rdlong	arg01, local04
0a69c     02 14 06 F6 | 	mov	arg02, #2
0a6a0     35 00 00 FF 
0a6a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a6a8     EC E2 B1 FD | 	call	#__system__Left_S
0a6ac     FD 12 02 F6 | 	mov	arg01, result1
0a6b0     B5 01 00 FF 
0a6b4     8C 15 06 F6 | 	mov	arg02, ##@LR__5825
0a6b8     84 C2 B1 FD | 	call	#__system___string_cmp
0a6bc     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6c0     9C 05 90 5D |  if_ne	jmp	#LR__0915
0a6c4                 | LR__0902
0a6c4                 | '   if left$(lparts(ct).part$,2)="s." andalso len(lparts(ct).part$)>2 then ' correct the part
0a6c4     37 00 00 FF 
0a6c8     44 E4 05 F1 | 	add	objptr, ##28228
0a6cc     F2 2C 02 FB | 	rdlong	local04, objptr
0a6d0     03 2C 66 F0 | 	shl	local04, #3
0a6d4     02 00 00 FF 
0a6d8     38 E4 85 F1 | 	sub	objptr, ##1080
0a6dc     F2 2C 02 F1 | 	add	local04, objptr
0a6e0     16 13 02 FB | 	rdlong	arg01, local04
0a6e4     02 14 06 F6 | 	mov	arg02, #2
0a6e8     35 00 00 FF 
0a6ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a6f0     A4 E2 B1 FD | 	call	#__system__Left_S
0a6f4     FD 12 02 F6 | 	mov	arg01, result1
0a6f8     B5 01 00 FF 
0a6fc     8F 15 06 F6 | 	mov	arg02, ##@LR__5826
0a700     3C C2 B1 FD | 	call	#__system___string_cmp
0a704     00 FA 0D F2 | 	cmp	result1, #0 wz
0a708     30 05 90 5D |  if_ne	jmp	#LR__0914
0a70c     37 00 00 FF 
0a710     44 E4 05 F1 | 	add	objptr, ##28228
0a714     F2 2C 02 FB | 	rdlong	local04, objptr
0a718     03 2C 66 F0 | 	shl	local04, #3
0a71c     02 00 00 FF 
0a720     38 E4 85 F1 | 	sub	objptr, ##1080
0a724     F2 2C 02 F1 | 	add	local04, objptr
0a728     16 13 02 FB | 	rdlong	arg01, local04
0a72c     35 00 00 FF 
0a730     0C E4 85 F1 | 	sub	objptr, ##27148
0a734     09 37 02 F6 | 	mov	local09, arg01
0a738     97 06 48 FB | 	callpa	#(@LR__0904-@LR__0903)>>2,fcache_load_ptr_
0a73c                 | LR__0903
0a73c     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a740     01 36 06 51 |  if_ne	add	local09, #1
0a744     F4 FF 9F 5D |  if_ne	jmp	#LR__0903
0a748                 | LR__0904
0a748     09 37 82 F1 | 	sub	local09, arg01
0a74c     03 36 56 F2 | 	cmps	local09, #3 wc
0a750     E8 04 90 CD |  if_b	jmp	#LR__0914
0a754     37 00 00 FF 
0a758     44 E4 05 F1 | 	add	objptr, ##28228
0a75c     F2 2C 02 FB | 	rdlong	local04, objptr
0a760     16 39 02 F6 | 	mov	local10, local04
0a764     03 38 66 F0 | 	shl	local10, #3
0a768     02 00 00 FF 
0a76c     38 E4 85 F1 | 	sub	objptr, ##1080
0a770     F2 38 02 F1 | 	add	local10, objptr
0a774     03 2C 66 F0 | 	shl	local04, #3
0a778     F2 2C 02 F1 | 	add	local04, objptr
0a77c     16 2D 02 FB | 	rdlong	local04, local04
0a780     02 00 00 FF 
0a784     38 E4 05 F1 | 	add	objptr, ##1080
0a788     F2 12 02 FB | 	rdlong	arg01, objptr
0a78c     03 12 66 F0 | 	shl	arg01, #3
0a790     02 00 00 FF 
0a794     38 E4 85 F1 | 	sub	objptr, ##1080
0a798     F2 12 02 F1 | 	add	arg01, objptr
0a79c     09 13 02 FB | 	rdlong	arg01, arg01
0a7a0     35 00 00 FF 
0a7a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a7a8     09 37 02 F6 | 	mov	local09, arg01
0a7ac     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a7b0                 | LR__0905
0a7b0     1B FB C9 FA | 	rdbyte	result1, local09 wz
0a7b4     01 36 06 51 |  if_ne	add	local09, #1
0a7b8     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a7bc                 | LR__0906
0a7bc     09 37 82 F1 | 	sub	local09, arg01
0a7c0     1B 15 02 F6 | 	mov	arg02, local09
0a7c4     02 14 86 F1 | 	sub	arg02, #2
0a7c8     16 13 02 F6 | 	mov	arg01, local04
0a7cc     50 E2 B1 FD | 	call	#__system__Right_S
0a7d0     1C FB 61 FC | 	wrlong	result1, local10
0a7d4     37 00 00 FF 
0a7d8     44 E4 05 F1 | 	add	objptr, ##28228
0a7dc     F2 2C 02 FB | 	rdlong	local04, objptr
0a7e0     16 39 02 F6 | 	mov	local10, local04
0a7e4     03 38 66 F0 | 	shl	local10, #3
0a7e8     02 00 00 FF 
0a7ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a7f0     F2 38 02 F1 | 	add	local10, objptr
0a7f4     03 2C 66 F0 | 	shl	local04, #3
0a7f8     F2 2C 02 F1 | 	add	local04, objptr
0a7fc     16 13 02 FB | 	rdlong	arg01, local04
0a800     35 00 00 FF 
0a804     0C E4 85 F1 | 	sub	objptr, ##27148
0a808     AC B6 BF FD | 	call	#_isfunction
0a80c     FD FA E1 F8 | 	getbyte	result1, result1, #0
0a810     04 38 06 F1 | 	add	local10, #4
0a814     1C FB 61 FC | 	wrlong	result1, local10
0a818                 | '     lparts(ct).token=isfunction(lparts(ct).part$) : if lparts(ct).token>0 then goto 2102
0a818     37 00 00 FF 
0a81c     44 E4 05 F1 | 	add	objptr, ##28228
0a820     F2 38 02 FB | 	rdlong	local10, objptr
0a824     03 38 66 F0 | 	shl	local10, #3
0a828     02 00 00 FF 
0a82c     38 E4 85 F1 | 	sub	objptr, ##1080
0a830     F2 38 02 F1 | 	add	local10, objptr
0a834     04 38 06 F1 | 	add	local10, #4
0a838     1C 2D 02 FB | 	rdlong	local04, local10
0a83c     01 2C 56 F2 | 	cmps	local04, #1 wc
0a840     35 00 00 FF 
0a844     0C E4 85 F1 | 	sub	objptr, ##27148
0a848     D4 03 90 3D |  if_ae	jmp	#LR__0913
0a84c     37 00 00 FF 
0a850     44 E4 05 F1 | 	add	objptr, ##28228
0a854     F2 2C 02 FB | 	rdlong	local04, objptr
0a858     16 39 02 F6 | 	mov	local10, local04
0a85c     03 38 66 F0 | 	shl	local10, #3
0a860     02 00 00 FF 
0a864     38 E4 85 F1 | 	sub	objptr, ##1080
0a868     F2 38 02 F1 | 	add	local10, objptr
0a86c     03 2C 66 F0 | 	shl	local04, #3
0a870     F2 2C 02 F1 | 	add	local04, objptr
0a874     16 13 02 FB | 	rdlong	arg01, local04
0a878     35 00 00 FF 
0a87c     0C E4 85 F1 | 	sub	objptr, ##27148
0a880     E8 9F BF FD | 	call	#_isnotename
0a884     04 38 06 F1 | 	add	local10, #4
0a888     1C FB 61 FC | 	wrlong	result1, local10
0a88c                 | '     lparts(ct).token=isnotename(lparts(ct).part$) :
0a88c                 | '     if lparts(ct).token>0 then 
0a88c     37 00 00 FF 
0a890     44 E4 05 F1 | 	add	objptr, ##28228
0a894     F2 38 02 FB | 	rdlong	local10, objptr
0a898     03 38 66 F0 | 	shl	local10, #3
0a89c     02 00 00 FF 
0a8a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a8a4     F2 38 02 F1 | 	add	local10, objptr
0a8a8     04 38 06 F1 | 	add	local10, #4
0a8ac     1C 2D 02 FB | 	rdlong	local04, local10
0a8b0     01 2C 56 F2 | 	cmps	local04, #1 wc
0a8b4     35 00 00 FF 
0a8b8     0C E4 85 F1 | 	sub	objptr, ##27148
0a8bc     94 00 90 CD |  if_b	jmp	#LR__0907
0a8c0     37 00 00 FF 
0a8c4     44 E4 05 F1 | 	add	objptr, ##28228
0a8c8     F2 38 02 FB | 	rdlong	local10, objptr
0a8cc     03 38 66 F0 | 	shl	local10, #3
0a8d0     02 00 00 FF 
0a8d4     38 E4 85 F1 | 	sub	objptr, ##1080
0a8d8     F2 38 02 F1 | 	add	local10, objptr
0a8dc     04 38 06 F1 | 	add	local10, #4
0a8e0     1C 13 02 FB | 	rdlong	arg01, local10
0a8e4     35 00 00 FF 
0a8e8     0C E4 85 F1 | 	sub	objptr, ##27148
0a8ec     D0 C6 BF FD | 	call	#_getnoteval
0a8f0     FD 12 02 F6 | 	mov	arg01, result1
0a8f4     37 00 00 FF 
0a8f8     44 E4 05 F1 | 	add	objptr, ##28228
0a8fc     F2 38 02 FB | 	rdlong	local10, objptr
0a900     03 38 66 F0 | 	shl	local10, #3
0a904     02 00 00 FF 
0a908     38 E4 85 F1 | 	sub	objptr, ##1080
0a90c     F2 38 02 F1 | 	add	local10, objptr
0a910     35 00 00 FF 
0a914     0C E4 85 F1 | 	sub	objptr, ##27148
0a918     74 E2 B1 FD | 	call	#__system__str_S
0a91c     1C FB 61 FC | 	wrlong	result1, local10
0a920     37 00 00 FF 
0a924     44 E4 05 F1 | 	add	objptr, ##28228
0a928     F2 38 02 FB | 	rdlong	local10, objptr
0a92c     03 38 66 F0 | 	shl	local10, #3
0a930     02 00 00 FF 
0a934     38 E4 85 F1 | 	sub	objptr, ##1080
0a938     F2 38 02 F1 | 	add	local10, objptr
0a93c     04 38 06 F1 | 	add	local10, #4
0a940     01 00 80 FF 
0a944     1C 05 68 FC | 	wrlong	##514, local10
0a948     35 00 00 FF 
0a94c     0C E4 85 F1 | 	sub	objptr, ##27148
0a950     CC 02 90 FD | 	jmp	#LR__0913
0a954                 | LR__0907
0a954     37 00 00 FF 
0a958     44 E4 05 F1 | 	add	objptr, ##28228
0a95c     F2 2C 02 FB | 	rdlong	local04, objptr
0a960     16 39 02 F6 | 	mov	local10, local04
0a964     03 38 66 F0 | 	shl	local10, #3
0a968     02 00 00 FF 
0a96c     38 E4 85 F1 | 	sub	objptr, ##1080
0a970     F2 38 02 F1 | 	add	local10, objptr
0a974     03 2C 66 F0 | 	shl	local04, #3
0a978     F2 2C 02 F1 | 	add	local04, objptr
0a97c     16 13 02 FB | 	rdlong	arg01, local04
0a980     35 00 00 FF 
0a984     0C E4 85 F1 | 	sub	objptr, ##27148
0a988     60 9E BF FD | 	call	#_isconstant
0a98c     04 38 06 F1 | 	add	local10, #4
0a990     1C FB 61 FC | 	wrlong	result1, local10
0a994                 | '     lparts(ct).token=isconstant(lparts(ct).part$) : if lparts(ct).token>0 then lparts(ct).part$=str$(lparts(ct).token) : lparts(ct).token=token_integer : goto 2102
0a994     37 00 00 FF 
0a998     44 E4 05 F1 | 	add	objptr, ##28228
0a99c     F2 38 02 FB | 	rdlong	local10, objptr
0a9a0     03 38 66 F0 | 	shl	local10, #3
0a9a4     02 00 00 FF 
0a9a8     38 E4 85 F1 | 	sub	objptr, ##1080
0a9ac     F2 38 02 F1 | 	add	local10, objptr
0a9b0     04 38 06 F1 | 	add	local10, #4
0a9b4     1C 2D 02 FB | 	rdlong	local04, local10
0a9b8     01 2C 56 F2 | 	cmps	local04, #1 wc
0a9bc     35 00 00 FF 
0a9c0     0C E4 85 F1 | 	sub	objptr, ##27148
0a9c4     8C 00 90 CD |  if_b	jmp	#LR__0908
0a9c8     37 00 00 FF 
0a9cc     44 E4 05 F1 | 	add	objptr, ##28228
0a9d0     F2 34 02 FB | 	rdlong	local08, objptr
0a9d4     1A 39 02 F6 | 	mov	local10, local08
0a9d8     03 38 66 F0 | 	shl	local10, #3
0a9dc     02 00 00 FF 
0a9e0     38 E4 85 F1 | 	sub	objptr, ##1080
0a9e4     F2 38 02 F1 | 	add	local10, objptr
0a9e8     03 34 66 F0 | 	shl	local08, #3
0a9ec     F2 34 02 F1 | 	add	local08, objptr
0a9f0     04 34 06 F1 | 	add	local08, #4
0a9f4     1A 13 02 FB | 	rdlong	arg01, local08
0a9f8     35 00 00 FF 
0a9fc     0C E4 85 F1 | 	sub	objptr, ##27148
0aa00     09 13 52 F6 | 	abs	arg01, arg01 wc
0aa04     1F 3A C6 C9 |  if_b	decod	local11, #31
0aa08     00 3A 06 36 |  if_ae	mov	local11, #0
0aa0c     80 E9 B1 FD | 	call	#__system___float_fromuns
0aa10     1D FB 61 F5 | 	xor	result1, local11
0aa14     FD 12 02 F6 | 	mov	arg01, result1
0aa18     74 E1 B1 FD | 	call	#__system__str_S
0aa1c     1C FB 61 FC | 	wrlong	result1, local10
0aa20     37 00 00 FF 
0aa24     44 E4 05 F1 | 	add	objptr, ##28228
0aa28     F2 38 02 FB | 	rdlong	local10, objptr
0aa2c     03 38 66 F0 | 	shl	local10, #3
0aa30     02 00 00 FF 
0aa34     38 E4 85 F1 | 	sub	objptr, ##1080
0aa38     F2 38 02 F1 | 	add	local10, objptr
0aa3c     04 38 06 F1 | 	add	local10, #4
0aa40     01 00 80 FF 
0aa44     1C 03 68 FC | 	wrlong	##513, local10
0aa48     35 00 00 FF 
0aa4c     0C E4 85 F1 | 	sub	objptr, ##27148
0aa50     CC 01 90 FD | 	jmp	#LR__0913
0aa54                 | LR__0908
0aa54     37 00 00 FF 
0aa58     44 E4 05 F1 | 	add	objptr, ##28228
0aa5c     F2 38 02 FB | 	rdlong	local10, objptr
0aa60     03 38 66 F0 | 	shl	local10, #3
0aa64     02 00 00 FF 
0aa68     38 E4 85 F1 | 	sub	objptr, ##1080
0aa6c     F2 38 02 F1 | 	add	local10, objptr
0aa70     1C 13 02 FB | 	rdlong	arg01, local10
0aa74     35 00 00 FF 
0aa78     0C E4 85 F1 | 	sub	objptr, ##27148
0aa7c     8C BD BF FD | 	call	#_isnum
0aa80     FD 3C 02 F6 | 	mov	local12, result1
0aa84     37 00 00 FF 
0aa88     44 E4 05 F1 | 	add	objptr, ##28228
0aa8c     F2 38 02 FB | 	rdlong	local10, objptr
0aa90     03 38 66 F0 | 	shl	local10, #3
0aa94     02 00 00 FF 
0aa98     38 E4 85 F1 | 	sub	objptr, ##1080
0aa9c     F2 38 02 F1 | 	add	local10, objptr
0aaa0     1C 13 02 FB | 	rdlong	arg01, local10
0aaa4     35 00 00 FF 
0aaa8     0C E4 85 F1 | 	sub	objptr, ##27148
0aaac     48 C1 BF FD | 	call	#_isint
0aab0     FD 3E 02 F6 | 	mov	local13, result1
0aab4     37 00 00 FF 
0aab8     44 E4 05 F1 | 	add	objptr, ##28228
0aabc     F2 38 02 FB | 	rdlong	local10, objptr
0aac0     03 38 66 F0 | 	shl	local10, #3
0aac4     02 00 00 FF 
0aac8     38 E4 85 F1 | 	sub	objptr, ##1080
0aacc     F2 38 02 F1 | 	add	local10, objptr
0aad0     1C 13 02 FB | 	rdlong	arg01, local10
0aad4     35 00 00 FF 
0aad8     0C E4 85 F1 | 	sub	objptr, ##27148
0aadc     BC C3 BF FD | 	call	#_isdec
0aae0     FD 40 02 F6 | 	mov	local14, result1
0aae4                 | '     b1=isnum(lparts(ct).part$) : b2=isint(lparts(ct).part$) : b3=isdec(lparts(ct).part$)
0aae4                 | '     if b1 andalso b2 andalso b3 then lparts(ct).token=token_decimal 			: goto 2102 	' pure decimal for line num
0aae4     00 3C 0E F2 | 	cmp	local12, #0 wz
0aae8     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0aaec     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0aaf0     34 00 90 AD |  if_e	jmp	#LR__0909
0aaf4     37 00 00 FF 
0aaf8     44 E4 05 F1 | 	add	objptr, ##28228
0aafc     F2 38 02 FB | 	rdlong	local10, objptr
0ab00     03 38 66 F0 | 	shl	local10, #3
0ab04     02 00 00 FF 
0ab08     38 E4 85 F1 | 	sub	objptr, ##1080
0ab0c     F2 38 02 F1 | 	add	local10, objptr
0ab10     04 38 06 F1 | 	add	local10, #4
0ab14     01 00 80 FF 
0ab18     1C 01 68 FC | 	wrlong	##512, local10
0ab1c     35 00 00 FF 
0ab20     0C E4 85 F1 | 	sub	objptr, ##27148
0ab24     F8 00 90 FD | 	jmp	#LR__0913
0ab28                 | LR__0909
0ab28                 | '     if b1 andalso b2 andalso (not b3) then lparts(ct).token=token_integer 		: goto 2102 	' integer
0ab28     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab2c     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab30     20 35 22 56 |  if_ne	not	local08, local14
0ab34     00 34 0E 52 |  if_ne	cmp	local08, #0 wz
0ab38     34 00 90 AD |  if_e	jmp	#LR__0910
0ab3c     37 00 00 FF 
0ab40     44 E4 05 F1 | 	add	objptr, ##28228
0ab44     F2 38 02 FB | 	rdlong	local10, objptr
0ab48     03 38 66 F0 | 	shl	local10, #3
0ab4c     02 00 00 FF 
0ab50     38 E4 85 F1 | 	sub	objptr, ##1080
0ab54     F2 38 02 F1 | 	add	local10, objptr
0ab58     04 38 06 F1 | 	add	local10, #4
0ab5c     01 00 80 FF 
0ab60     1C 03 68 FC | 	wrlong	##513, local10
0ab64     35 00 00 FF 
0ab68     0C E4 85 F1 | 	sub	objptr, ##27148
0ab6c     B0 00 90 FD | 	jmp	#LR__0913
0ab70                 | LR__0910
0ab70                 | '     if b1 andalso (not b2) andalso (not b3) then lparts(ct).token=token_float 		: goto 2102 	' float
0ab70     00 3C 0E F2 | 	cmp	local12, #0 wz
0ab74     1F 3F 22 56 |  if_ne	not	local13, local13
0ab78     00 3E 0E 52 |  if_ne	cmp	local13, #0 wz
0ab7c     20 41 22 56 |  if_ne	not	local14, local14
0ab80     00 40 0E 52 |  if_ne	cmp	local14, #0 wz
0ab84     34 00 90 AD |  if_e	jmp	#LR__0911
0ab88     37 00 00 FF 
0ab8c     44 E4 05 F1 | 	add	objptr, ##28228
0ab90     F2 38 02 FB | 	rdlong	local10, objptr
0ab94     03 38 66 F0 | 	shl	local10, #3
0ab98     02 00 00 FF 
0ab9c     38 E4 85 F1 | 	sub	objptr, ##1080
0aba0     F2 38 02 F1 | 	add	local10, objptr
0aba4     04 38 06 F1 | 	add	local10, #4
0aba8     01 00 80 FF 
0abac     1C 05 68 FC | 	wrlong	##514, local10
0abb0     35 00 00 FF 
0abb4     0C E4 85 F1 | 	sub	objptr, ##27148
0abb8     64 00 90 FD | 	jmp	#LR__0913
0abbc                 | LR__0911
0abbc                 | '     if isname(lparts(ct).part$) then lparts(ct).token=token_name : goto 2102	
0abbc     37 00 00 FF 
0abc0     44 E4 05 F1 | 	add	objptr, ##28228
0abc4     F2 38 02 FB | 	rdlong	local10, objptr
0abc8     03 38 66 F0 | 	shl	local10, #3
0abcc     02 00 00 FF 
0abd0     38 E4 85 F1 | 	sub	objptr, ##1080
0abd4     F2 38 02 F1 | 	add	local10, objptr
0abd8     1C 13 02 FB | 	rdlong	arg01, local10
0abdc     35 00 00 FF 
0abe0     0C E4 85 F1 | 	sub	objptr, ##27148
0abe4     B0 B9 BF FD | 	call	#_isname
0abe8     00 FA 0D F2 | 	cmp	result1, #0 wz
0abec     30 00 90 AD |  if_e	jmp	#LR__0912
0abf0     37 00 00 FF 
0abf4     44 E4 05 F1 | 	add	objptr, ##28228
0abf8     F2 38 02 FB | 	rdlong	local10, objptr
0abfc     03 38 66 F0 | 	shl	local10, #3
0ac00     02 00 00 FF 
0ac04     38 E4 85 F1 | 	sub	objptr, ##1080
0ac08     F2 38 02 F1 | 	add	local10, objptr
0ac0c     04 38 06 F1 | 	add	local10, #4
0ac10     01 00 80 FF 
0ac14     1C 09 68 FC | 	wrlong	##516, local10
0ac18     35 00 00 FF 
0ac1c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac20                 | LR__0912
0ac20                 | LR__0913
0ac20     37 00 00 FF 
0ac24     44 E4 05 F1 | 	add	objptr, ##28228
0ac28     F2 34 02 FB | 	rdlong	local08, objptr
0ac2c     01 34 86 F1 | 	sub	local08, #1
0ac30     F2 34 62 FC | 	wrlong	local08, objptr
0ac34     37 00 00 FF 
0ac38     44 E4 85 F1 | 	sub	objptr, ##28228
0ac3c                 | LR__0914
0ac3c     37 00 00 FF 
0ac40     44 E4 05 F1 | 	add	objptr, ##28228
0ac44     F2 34 02 FB | 	rdlong	local08, objptr
0ac48     01 34 06 F1 | 	add	local08, #1
0ac4c     F2 34 62 FC | 	wrlong	local08, objptr
0ac50     37 00 00 FF 
0ac54     44 E4 85 F1 | 	sub	objptr, ##28228
0ac58     10 11 B0 FD | 	call	#_expr
0ac5c     78 00 90 FD | 	jmp	#LR__0916
0ac60                 | LR__0915
0ac60     4A 00 00 FF 
0ac64     7C E4 05 F1 | 	add	objptr, ##38012
0ac68     F2 40 02 FB | 	rdlong	local14, objptr
0ac6c     20 39 02 F6 | 	mov	local10, local14
0ac70     01 38 66 F0 | 	shl	local10, #1
0ac74     20 39 02 F1 | 	add	local10, local14
0ac78     02 38 66 F0 | 	shl	local10, #2
0ac7c     03 00 00 FF 
0ac80     00 E4 85 F1 | 	sub	objptr, ##1536
0ac84     F2 38 02 F1 | 	add	local10, objptr
0ac88     08 38 06 F1 | 	add	local10, #8
0ac8c     1C 39 68 FC | 	wrlong	#28, local10
0ac90     03 00 00 FF 
0ac94     00 E4 05 F1 | 	add	objptr, ##1536
0ac98     F2 40 02 FB | 	rdlong	local14, objptr
0ac9c     20 39 02 F6 | 	mov	local10, local14
0aca0     01 38 66 F0 | 	shl	local10, #1
0aca4     20 39 02 F1 | 	add	local10, local14
0aca8     02 38 66 F0 | 	shl	local10, #2
0acac     03 00 00 FF 
0acb0     00 E4 85 F1 | 	sub	objptr, ##1536
0acb4     F2 38 02 F1 | 	add	local10, objptr
0acb8     1C 03 68 FC | 	wrlong	#1, local10
0acbc     03 00 00 FF 
0acc0     00 E4 05 F1 | 	add	objptr, ##1536
0acc4     F2 34 02 FB | 	rdlong	local08, objptr
0acc8     01 34 06 F1 | 	add	local08, #1
0accc     F2 34 62 FC | 	wrlong	local08, objptr
0acd0     4A 00 00 FF 
0acd4     7C E4 85 F1 | 	sub	objptr, ##38012
0acd8                 | LR__0916
0acd8     4A 00 00 FF 
0acdc     7C E4 05 F1 | 	add	objptr, ##38012
0ace0     F2 40 02 FB | 	rdlong	local14, objptr
0ace4     20 39 02 F6 | 	mov	local10, local14
0ace8     01 38 66 F0 | 	shl	local10, #1
0acec     20 39 02 F1 | 	add	local10, local14
0acf0     02 38 66 F0 | 	shl	local10, #2
0acf4     03 00 00 FF 
0acf8     00 E4 85 F1 | 	sub	objptr, ##1536
0acfc     F2 38 02 F1 | 	add	local10, objptr
0ad00     08 38 06 F1 | 	add	local10, #8
0ad04     1C 39 68 FC | 	wrlong	#28, local10
0ad08     03 00 00 FF 
0ad0c     00 E4 05 F1 | 	add	objptr, ##1536
0ad10     F2 40 02 FB | 	rdlong	local14, objptr
0ad14     20 39 02 F6 | 	mov	local10, local14
0ad18     01 38 66 F0 | 	shl	local10, #1
0ad1c     20 39 02 F1 | 	add	local10, local14
0ad20     02 38 66 F0 | 	shl	local10, #2
0ad24     03 00 00 FF 
0ad28     00 E4 85 F1 | 	sub	objptr, ##1536
0ad2c     F2 38 02 F1 | 	add	local10, objptr
0ad30     1C 33 62 FC | 	wrlong	local07, local10
0ad34     03 00 00 FF 
0ad38     00 E4 05 F1 | 	add	objptr, ##1536
0ad3c     F2 40 02 FB | 	rdlong	local14, objptr
0ad40     01 40 06 F1 | 	add	local14, #1
0ad44     F2 40 62 FC | 	wrlong	local14, objptr
0ad48     20 39 02 F6 | 	mov	local10, local14
0ad4c     01 38 66 F0 | 	shl	local10, #1
0ad50     20 39 02 F1 | 	add	local10, local14
0ad54     02 38 66 F0 | 	shl	local10, #2
0ad58     03 00 00 FF 
0ad5c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad60     F2 38 02 F1 | 	add	local10, objptr
0ad64     08 38 06 F1 | 	add	local10, #8
0ad68     1C 95 68 FC | 	wrlong	#74, local10
0ad6c     03 00 00 FF 
0ad70     00 E4 05 F1 | 	add	objptr, ##1536
0ad74     F2 40 02 FB | 	rdlong	local14, objptr
0ad78     20 39 02 F6 | 	mov	local10, local14
0ad7c     01 38 66 F0 | 	shl	local10, #1
0ad80     20 39 02 F1 | 	add	local10, local14
0ad84     02 38 66 F0 | 	shl	local10, #2
0ad88     03 00 00 FF 
0ad8c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad90     F2 38 02 F1 | 	add	local10, objptr
0ad94     1C 01 68 FC | 	wrlong	#0, local10
0ad98     03 00 00 FF 
0ad9c     00 E4 05 F1 | 	add	objptr, ##1536
0ada0     F2 34 02 FB | 	rdlong	local08, objptr
0ada4     01 34 06 F1 | 	add	local08, #1
0ada8     F2 34 62 FC | 	wrlong	local08, objptr
0adac     4A 00 00 FF 
0adb0     7C E4 85 F1 | 	sub	objptr, ##38012
0adb4                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
0adb4                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
0adb4                 | ' return 0
0adb4     00 FA 05 F6 | 	mov	result1, #0
0adb8                 | LR__0917
0adb8     A7 F0 03 F6 | 	mov	ptra, fp
0adbc     B2 00 A0 FD | 	call	#popregs_
0adc0                 | _compile_for_ret
0adc0     2D 00 64 FD | 	ret
0adc4                 | 
0adc4                 | ' 
0adc4                 | ' '----- compile 'next' command. 
0adc4                 | ' 
0adc4                 | ' function compile_next() as ulong
0adc4                 | _compile_next
0adc4     04 4A 05 F6 | 	mov	COUNT_, #4
0adc8     A8 00 A0 FD | 	call	#pushregs_
0adcc     37 00 00 FF 
0add0     44 E4 05 F1 | 	add	objptr, ##28228
0add4     F2 14 02 FB | 	rdlong	arg02, objptr
0add8     03 14 66 F0 | 	shl	arg02, #3
0addc     02 00 00 FF 
0ade0     38 E4 85 F1 | 	sub	objptr, ##1080
0ade4     F2 14 02 F1 | 	add	arg02, objptr
0ade8     0A 27 02 FB | 	rdlong	local01, arg02
0adec                 | ' 
0adec                 | ' varname$=lparts(ct).part$ 
0adec                 | ' if varnum=0 then return 35
0adec     04 E4 85 F1 | 	sub	objptr, #4
0adf0     F2 14 0A FB | 	rdlong	arg02, objptr wz
0adf4     35 00 00 FF 
0adf8     08 E4 85 F1 | 	sub	objptr, ##27144
0adfc     23 FA 05 A6 |  if_e	mov	result1, #35
0ae00     4C 01 90 AD |  if_e	jmp	#LR__0922
0ae04     01 28 66 F6 | 	neg	local02, #1
0ae08                 | ' j=-1
0ae08                 | ' for i=0 to varnum-1
0ae08     00 2A 06 F6 | 	mov	local03, #0
0ae0c     35 00 00 FF 
0ae10     08 E4 05 F1 | 	add	objptr, ##27144
0ae14     F2 2C 02 FB | 	rdlong	local04, objptr
0ae18     35 00 00 FF 
0ae1c     08 E4 85 F1 | 	sub	objptr, ##27144
0ae20                 | LR__0920
0ae20     16 2B 12 F2 | 	cmp	local03, local04 wc
0ae24     38 00 90 3D |  if_ae	jmp	#LR__0921
0ae28                 | '   if variables(i).name=varname$ then j=i : exit
0ae28     15 15 02 F6 | 	mov	arg02, local03
0ae2c     04 14 66 F0 | 	shl	arg02, #4
0ae30     14 00 00 FF 
0ae34     F8 E5 05 F1 | 	add	objptr, ##10744
0ae38     F2 14 02 F1 | 	add	arg02, objptr
0ae3c     0A 13 02 FB | 	rdlong	arg01, arg02
0ae40     13 15 02 F6 | 	mov	arg02, local01
0ae44     14 00 00 FF 
0ae48     F8 E5 85 F1 | 	sub	objptr, ##10744
0ae4c     F0 BA B1 FD | 	call	#__system___string_cmp
0ae50     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae54     15 29 02 A6 |  if_e	mov	local02, local03
0ae58     01 2A 06 51 |  if_ne	add	local03, #1
0ae5c     C0 FF 9F 5D |  if_ne	jmp	#LR__0920
0ae60                 | LR__0921
0ae60                 | ' if j=-1 then return 35
0ae60     FF FF 7F FF 
0ae64     FF 29 0E F2 | 	cmp	local02, ##-1 wz
0ae68     23 FA 05 A6 |  if_e	mov	result1, #35
0ae6c     E0 00 90 AD |  if_e	jmp	#LR__0922
0ae70     4A 00 00 FF 
0ae74     7C E4 05 F1 | 	add	objptr, ##38012
0ae78     F2 2C 02 FB | 	rdlong	local04, objptr
0ae7c     16 2B 02 F6 | 	mov	local03, local04
0ae80     01 2A 66 F0 | 	shl	local03, #1
0ae84     16 2B 02 F1 | 	add	local03, local04
0ae88     02 2A 66 F0 | 	shl	local03, #2
0ae8c     03 00 00 FF 
0ae90     00 E4 85 F1 | 	sub	objptr, ##1536
0ae94     F2 2A 02 F1 | 	add	local03, objptr
0ae98     08 2A 06 F1 | 	add	local03, #8
0ae9c     15 39 68 FC | 	wrlong	#28, local03
0aea0     03 00 00 FF 
0aea4     00 E4 05 F1 | 	add	objptr, ##1536
0aea8     F2 2C 02 FB | 	rdlong	local04, objptr
0aeac     16 2B 02 F6 | 	mov	local03, local04
0aeb0     01 2A 66 F0 | 	shl	local03, #1
0aeb4     16 2B 02 F1 | 	add	local03, local04
0aeb8     02 2A 66 F0 | 	shl	local03, #2
0aebc     03 00 00 FF 
0aec0     00 E4 85 F1 | 	sub	objptr, ##1536
0aec4     F2 2A 02 F1 | 	add	local03, objptr
0aec8     15 29 62 FC | 	wrlong	local02, local03
0aecc     03 00 00 FF 
0aed0     00 E4 05 F1 | 	add	objptr, ##1536
0aed4     F2 2C 02 FB | 	rdlong	local04, objptr
0aed8     01 2C 06 F1 | 	add	local04, #1
0aedc     F2 2C 62 FC | 	wrlong	local04, objptr
0aee0     16 2B 02 F6 | 	mov	local03, local04
0aee4     01 2A 66 F0 | 	shl	local03, #1
0aee8     16 2B 02 F1 | 	add	local03, local04
0aeec     02 2A 66 F0 | 	shl	local03, #2
0aef0     03 00 00 FF 
0aef4     00 E4 85 F1 | 	sub	objptr, ##1536
0aef8     F2 2A 02 F1 | 	add	local03, objptr
0aefc     08 2A 06 F1 | 	add	local03, #8
0af00     15 97 68 FC | 	wrlong	#75, local03
0af04     03 00 00 FF 
0af08     00 E4 05 F1 | 	add	objptr, ##1536
0af0c     F2 2C 02 FB | 	rdlong	local04, objptr
0af10     16 2B 02 F6 | 	mov	local03, local04
0af14     01 2A 66 F0 | 	shl	local03, #1
0af18     16 2B 02 F1 | 	add	local03, local04
0af1c     02 2A 66 F0 | 	shl	local03, #2
0af20     03 00 00 FF 
0af24     00 E4 85 F1 | 	sub	objptr, ##1536
0af28     F2 2A 02 F1 | 	add	local03, objptr
0af2c     15 01 68 FC | 	wrlong	#0, local03
0af30     03 00 00 FF 
0af34     00 E4 05 F1 | 	add	objptr, ##1536
0af38     F2 2C 02 FB | 	rdlong	local04, objptr
0af3c     01 2C 06 F1 | 	add	local04, #1
0af40     F2 2C 62 FC | 	wrlong	local04, objptr
0af44     4A 00 00 FF 
0af48     7C E4 85 F1 | 	sub	objptr, ##38012
0af4c                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
0af4c                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
0af4c                 | ' return 0
0af4c     00 FA 05 F6 | 	mov	result1, #0
0af50                 | LR__0922
0af50     A7 F0 03 F6 | 	mov	ptra, fp
0af54     B2 00 A0 FD | 	call	#popregs_
0af58                 | _compile_next_ret
0af58     2D 00 64 FD | 	ret
0af5c                 | 
0af5c                 | ' 
0af5c                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
0af5c                 | ' 
0af5c                 | ' function compile_gosub() as ulong
0af5c                 | _compile_gosub
0af5c     02 4A 05 F6 | 	mov	COUNT_, #2
0af60     A8 00 A0 FD | 	call	#pushregs_
0af64     4A 00 00 FF 
0af68     7C E4 05 F1 | 	add	objptr, ##38012
0af6c     F2 26 02 FB | 	rdlong	local01, objptr
0af70     13 29 02 F6 | 	mov	local02, local01
0af74     01 28 66 F0 | 	shl	local02, #1
0af78     13 29 02 F1 | 	add	local02, local01
0af7c     02 28 66 F0 | 	shl	local02, #2
0af80     03 00 00 FF 
0af84     00 E4 85 F1 | 	sub	objptr, ##1536
0af88     F2 28 02 F1 | 	add	local02, objptr
0af8c     08 28 06 F1 | 	add	local02, #8
0af90     14 53 69 FC | 	wrlong	#169, local02
0af94     03 00 00 FF 
0af98     00 E4 05 F1 | 	add	objptr, ##1536
0af9c     F2 28 02 FB | 	rdlong	local02, objptr
0afa0     01 28 06 F1 | 	add	local02, #1
0afa4     F2 28 62 FC | 	wrlong	local02, objptr
0afa8     4A 00 00 FF 
0afac     7C E4 85 F1 | 	sub	objptr, ##38012
0afb0     0C 00 B0 FD | 	call	#_compile_goto
0afb4                 | ' compiledline(lineptr).result_type=token_gosub
0afb4                 | ' lineptr+=1
0afb4                 | ' err=compile_goto()
0afb4                 | ' return err
0afb4     A7 F0 03 F6 | 	mov	ptra, fp
0afb8     B2 00 A0 FD | 	call	#popregs_
0afbc                 | _compile_gosub_ret
0afbc     2D 00 64 FD | 	ret
0afc0                 | 
0afc0                 | ' 
0afc0                 | ' '----- compile 'goto' 
0afc0                 | ' 
0afc0                 | ' function compile_goto() as ulong
0afc0                 | _compile_goto
0afc0     03 4A 05 F6 | 	mov	COUNT_, #3
0afc4     A8 00 A0 FD | 	call	#pushregs_
0afc8     34 F0 07 F1 | 	add	ptra, #52
0afcc                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
0afcc     37 00 00 FF 
0afd0     44 E4 05 F1 | 	add	objptr, ##28228
0afd4     F2 16 02 FB | 	rdlong	arg03, objptr
0afd8     03 16 66 F0 | 	shl	arg03, #3
0afdc     02 00 00 FF 
0afe0     38 E4 85 F1 | 	sub	objptr, ##1080
0afe4     F2 16 02 F1 | 	add	arg03, objptr
0afe8     04 16 06 F1 | 	add	arg03, #4
0afec     0B 17 02 FB | 	rdlong	arg03, arg03
0aff0     01 00 00 FF 
0aff4     00 16 0E F2 | 	cmp	arg03, ##512 wz
0aff8     35 00 00 FF 
0affc     0C E4 85 F1 | 	sub	objptr, ##27148
0b000     CC 02 90 5D |  if_ne	jmp	#LR__0935
0b004     37 00 00 FF 
0b008     44 E4 05 F1 | 	add	objptr, ##28228
0b00c     F2 16 02 FB | 	rdlong	arg03, objptr
0b010     01 16 06 F1 | 	add	arg03, #1
0b014     03 16 66 F0 | 	shl	arg03, #3
0b018     02 00 00 FF 
0b01c     38 E4 85 F1 | 	sub	objptr, ##1080
0b020     F2 16 02 F1 | 	add	arg03, objptr
0b024     04 16 06 F1 | 	add	arg03, #4
0b028     0B 17 02 FB | 	rdlong	arg03, arg03
0b02c     FE 17 0E F2 | 	cmp	arg03, #510 wz
0b030     35 00 00 FF 
0b034     0C E4 85 F1 | 	sub	objptr, ##27148
0b038     94 02 90 5D |  if_ne	jmp	#LR__0935
0b03c     37 00 00 FF 
0b040     44 E4 05 F1 | 	add	objptr, ##28228
0b044     F2 16 02 FB | 	rdlong	arg03, objptr
0b048     03 16 66 F0 | 	shl	arg03, #3
0b04c     02 00 00 FF 
0b050     38 E4 85 F1 | 	sub	objptr, ##1080
0b054     F2 16 02 F1 | 	add	arg03, objptr
0b058     0B 13 02 FB | 	rdlong	arg01, arg03
0b05c     00 14 06 F6 | 	mov	arg02, #0
0b060     35 00 00 FF 
0b064     0C E4 85 F1 | 	sub	objptr, ##27148
0b068     A0 ED B1 FD | 	call	#__system____builtin_atoi
0b06c     04 4E 05 F1 | 	add	fp, #4
0b070     A7 FA 61 FC | 	wrlong	result1, fp
0b074     4A 00 00 FF 
0b078     7C E4 05 F1 | 	add	objptr, ##38012
0b07c     F2 26 02 FB | 	rdlong	local01, objptr
0b080     13 29 02 F6 | 	mov	local02, local01
0b084     01 28 66 F0 | 	shl	local02, #1
0b088     13 29 02 F1 | 	add	local02, local01
0b08c     02 28 66 F0 | 	shl	local02, #2
0b090     03 00 00 FF 
0b094     00 E4 85 F1 | 	sub	objptr, ##1536
0b098     F2 28 02 F1 | 	add	local02, objptr
0b09c     08 28 06 F1 | 	add	local02, #8
0b0a0     14 9D 68 FC | 	wrlong	#78, local02
0b0a4     03 00 00 FF 
0b0a8     0C E4 05 F1 | 	add	objptr, ##1548
0b0ac     F2 2A 02 FB | 	rdlong	local03, objptr
0b0b0     4A 00 00 FF 
0b0b4     88 E4 85 F1 | 	sub	objptr, ##38024
0b0b8     04 4E 05 F1 | 	add	fp, #4
0b0bc     A7 2A 62 FC | 	wrlong	local03, fp
0b0c0     08 4E 85 F1 | 	sub	fp, #8
0b0c4                 | '   gotoline=val%(lparts(ct).part$) 
0b0c4                 | '   compiledline(lineptr).result_type=token_fast_goto
0b0c4                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
0b0c4                 | '   do
0b0c4                 | LR__0930
0b0c4     10 4E 05 F1 | 	add	fp, #16
0b0c8     A7 12 02 F6 | 	mov	arg01, fp
0b0cc     08 4E 85 F1 | 	sub	fp, #8
0b0d0     A7 14 02 FB | 	rdlong	arg02, fp
0b0d4     08 4E 85 F1 | 	sub	fp, #8
0b0d8     18 16 06 F6 | 	mov	arg03, #24
0b0dc     0B 00 00 FF 
0b0e0     CC E4 05 F1 | 	add	objptr, ##5836
0b0e4     A8 AB B1 FD | 	call	#_psram_spin2_read1
0b0e8     0B 00 00 FF 
0b0ec     CC E4 85 F1 | 	sub	objptr, ##5836
0b0f0                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
0b0f0                 | '     if gotoheader(0)<>$FFFFFFFF then
0b0f0     10 4E 05 F1 | 	add	fp, #16
0b0f4     A7 2A 02 FB | 	rdlong	local03, fp
0b0f8     10 4E 85 F1 | 	sub	fp, #16
0b0fc     FF FF 7F FF 
0b100     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
0b104     24 00 90 AD |  if_e	jmp	#LR__0931
0b108     08 4E 05 F1 | 	add	fp, #8
0b10c     A7 2A 02 FB | 	rdlong	local03, fp
0b110     04 4E 05 F1 | 	add	fp, #4
0b114     A7 2A 62 FC | 	wrlong	local03, fp
0b118     18 4E 05 F1 | 	add	fp, #24
0b11c     A7 2A 02 FB | 	rdlong	local03, fp
0b120     1C 4E 85 F1 | 	sub	fp, #28
0b124     A7 2A 62 FC | 	wrlong	local03, fp
0b128     08 4E 85 F1 | 	sub	fp, #8
0b12c                 | LR__0931
0b12c     24 4E 05 F1 | 	add	fp, #36
0b130     A7 2A 02 FB | 	rdlong	local03, fp
0b134     24 4E 85 F1 | 	sub	fp, #36
0b138     FF FF 3F FF 
0b13c     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0b140     10 4E 05 51 |  if_ne	add	fp, #16
0b144     A7 26 02 5B |  if_ne	rdlong	local01, fp
0b148     10 4E 85 51 |  if_ne	sub	fp, #16
0b14c     FF FF 7F 5F 
0b150     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
0b154     1C 00 90 AD |  if_e	jmp	#LR__0932
0b158     10 4E 05 F1 | 	add	fp, #16
0b15c     A7 2A 02 FB | 	rdlong	local03, fp
0b160     0C 4E 85 F1 | 	sub	fp, #12
0b164     A7 28 02 FB | 	rdlong	local02, fp
0b168     04 4E 85 F1 | 	sub	fp, #4
0b16c     14 2B 0A F2 | 	cmp	local03, local02 wz
0b170     50 FF 9F 5D |  if_ne	jmp	#LR__0930
0b174                 | LR__0932
0b174                 | '   if gotoheader(0)=gotoline then
0b174     10 4E 05 F1 | 	add	fp, #16
0b178     A7 2A 02 FB | 	rdlong	local03, fp
0b17c     0C 4E 85 F1 | 	sub	fp, #12
0b180     A7 26 02 FB | 	rdlong	local01, fp
0b184     04 4E 85 F1 | 	sub	fp, #4
0b188     13 2B 0A F2 | 	cmp	local03, local01 wz
0b18c     7C 00 90 5D |  if_ne	jmp	#LR__0933
0b190     4A 00 00 FF 
0b194     7C E4 05 F1 | 	add	objptr, ##38012
0b198     F2 26 02 FB | 	rdlong	local01, objptr
0b19c     13 29 02 F6 | 	mov	local02, local01
0b1a0     01 28 66 F0 | 	shl	local02, #1
0b1a4     13 29 02 F1 | 	add	local02, local01
0b1a8     02 28 66 F0 | 	shl	local02, #2
0b1ac     03 00 00 FF 
0b1b0     00 E4 85 F1 | 	sub	objptr, ##1536
0b1b4     F2 28 02 F1 | 	add	local02, objptr
0b1b8     0C 4E 05 F1 | 	add	fp, #12
0b1bc     A7 2A 02 FB | 	rdlong	local03, fp
0b1c0     14 2B 62 FC | 	wrlong	local03, local02
0b1c4     03 00 00 FF 
0b1c8     00 E4 05 F1 | 	add	objptr, ##1536
0b1cc     F2 26 02 FB | 	rdlong	local01, objptr
0b1d0     13 29 02 F6 | 	mov	local02, local01
0b1d4     01 28 66 F0 | 	shl	local02, #1
0b1d8     13 29 02 F1 | 	add	local02, local01
0b1dc     02 28 66 F0 | 	shl	local02, #2
0b1e0     03 00 00 FF 
0b1e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1e8     F2 28 02 F1 | 	add	local02, objptr
0b1ec     08 4E 85 F1 | 	sub	fp, #8
0b1f0     A7 2A 02 FB | 	rdlong	local03, fp
0b1f4     04 4E 85 F1 | 	sub	fp, #4
0b1f8     04 28 06 F1 | 	add	local02, #4
0b1fc     14 2B 62 FC | 	wrlong	local03, local02
0b200     47 00 00 FF 
0b204     7C E4 85 F1 | 	sub	objptr, ##36476
0b208     A4 00 90 FD | 	jmp	#LR__0934
0b20c                 | LR__0933
0b20c     4A 00 00 FF 
0b210     7C E4 05 F1 | 	add	objptr, ##38012
0b214     F2 26 02 FB | 	rdlong	local01, objptr
0b218     13 29 02 F6 | 	mov	local02, local01
0b21c     01 28 66 F0 | 	shl	local02, #1
0b220     13 29 02 F1 | 	add	local02, local01
0b224     02 28 66 F0 | 	shl	local02, #2
0b228     03 00 00 FF 
0b22c     00 E4 85 F1 | 	sub	objptr, ##1536
0b230     F2 28 02 F1 | 	add	local02, objptr
0b234     00 00 C0 FF 
0b238     14 01 68 FC | 	wrlong	##-2147483648, local02
0b23c     03 00 00 FF 
0b240     00 E4 05 F1 | 	add	objptr, ##1536
0b244     F2 26 02 FB | 	rdlong	local01, objptr
0b248     13 29 02 F6 | 	mov	local02, local01
0b24c     01 28 66 F0 | 	shl	local02, #1
0b250     13 29 02 F1 | 	add	local02, local01
0b254     02 28 66 F0 | 	shl	local02, #2
0b258     03 00 00 FF 
0b25c     00 E4 85 F1 | 	sub	objptr, ##1536
0b260     F2 28 02 F1 | 	add	local02, objptr
0b264     04 4E 05 F1 | 	add	fp, #4
0b268     A7 2A 02 FB | 	rdlong	local03, fp
0b26c     04 4E 85 F1 | 	sub	fp, #4
0b270     04 28 06 F1 | 	add	local02, #4
0b274     14 2B 62 FC | 	wrlong	local03, local02
0b278     03 00 00 FF 
0b27c     00 E4 05 F1 | 	add	objptr, ##1536
0b280     F2 26 02 FB | 	rdlong	local01, objptr
0b284     13 29 02 F6 | 	mov	local02, local01
0b288     01 28 66 F0 | 	shl	local02, #1
0b28c     13 29 02 F1 | 	add	local02, local01
0b290     02 28 66 F0 | 	shl	local02, #2
0b294     03 00 00 FF 
0b298     00 E4 85 F1 | 	sub	objptr, ##1536
0b29c     F2 28 02 F1 | 	add	local02, objptr
0b2a0     08 28 06 F1 | 	add	local02, #8
0b2a4     14 A7 68 FC | 	wrlong	#83, local02
0b2a8     47 00 00 FF 
0b2ac     7C E4 85 F1 | 	sub	objptr, ##36476
0b2b0                 | LR__0934
0b2b0     4A 00 00 FF 
0b2b4     7C E4 05 F1 | 	add	objptr, ##38012
0b2b8     F2 2A 02 FB | 	rdlong	local03, objptr
0b2bc     01 2A 06 F1 | 	add	local03, #1
0b2c0     F2 2A 62 FC | 	wrlong	local03, objptr
0b2c4     4A 00 00 FF 
0b2c8     7C E4 85 F1 | 	sub	objptr, ##38012
0b2cc     D0 00 90 FD | 	jmp	#LR__0936
0b2d0                 | LR__0935
0b2d0     98 0A B0 FD | 	call	#_expr
0b2d4     30 4E 05 F1 | 	add	fp, #48
0b2d8     A7 9E 68 FC | 	wrlong	#79, fp
0b2dc     08 4E 85 F1 | 	sub	fp, #8
0b2e0     A7 00 68 FC | 	wrlong	#0, fp
0b2e4     04 4E 05 F1 | 	add	fp, #4
0b2e8     A7 2A 02 FB | 	rdlong	local03, fp
0b2ec     04 4E 05 F1 | 	add	fp, #4
0b2f0     A7 26 02 FB | 	rdlong	local01, fp
0b2f4     30 4E 85 F1 | 	sub	fp, #48
0b2f8     4A 00 00 FF 
0b2fc     7C E4 05 F1 | 	add	objptr, ##38012
0b300     F2 28 02 FB | 	rdlong	local02, objptr
0b304     14 17 02 F6 | 	mov	arg03, local02
0b308     01 16 66 F0 | 	shl	arg03, #1
0b30c     14 17 02 F1 | 	add	arg03, local02
0b310     02 16 66 F0 | 	shl	arg03, #2
0b314     03 00 00 FF 
0b318     00 E4 85 F1 | 	sub	objptr, ##1536
0b31c     F2 16 02 F1 | 	add	arg03, objptr
0b320     0B 01 68 FC | 	wrlong	#0, arg03
0b324     03 00 00 FF 
0b328     00 E4 05 F1 | 	add	objptr, ##1536
0b32c     F2 28 02 FB | 	rdlong	local02, objptr
0b330     14 17 02 F6 | 	mov	arg03, local02
0b334     01 16 66 F0 | 	shl	arg03, #1
0b338     14 17 02 F1 | 	add	arg03, local02
0b33c     02 16 66 F0 | 	shl	arg03, #2
0b340     03 00 00 FF 
0b344     00 E4 85 F1 | 	sub	objptr, ##1536
0b348     F2 16 02 F1 | 	add	arg03, objptr
0b34c     04 16 06 F1 | 	add	arg03, #4
0b350     0B 2B 62 FC | 	wrlong	local03, arg03
0b354     03 00 00 FF 
0b358     00 E4 05 F1 | 	add	objptr, ##1536
0b35c     F2 2A 02 FB | 	rdlong	local03, objptr
0b360     15 29 02 F6 | 	mov	local02, local03
0b364     01 28 66 F0 | 	shl	local02, #1
0b368     15 29 02 F1 | 	add	local02, local03
0b36c     02 28 66 F0 | 	shl	local02, #2
0b370     03 00 00 FF 
0b374     00 E4 85 F1 | 	sub	objptr, ##1536
0b378     F2 28 02 F1 | 	add	local02, objptr
0b37c     08 28 06 F1 | 	add	local02, #8
0b380     14 27 62 FC | 	wrlong	local01, local02
0b384     03 00 00 FF 
0b388     00 E4 05 F1 | 	add	objptr, ##1536
0b38c     F2 2A 02 FB | 	rdlong	local03, objptr
0b390     01 2A 06 F1 | 	add	local03, #1
0b394     F2 2A 62 FC | 	wrlong	local03, objptr
0b398     4A 00 00 FF 
0b39c     7C E4 85 F1 | 	sub	objptr, ##38012
0b3a0                 | LR__0936
0b3a0                 | ' return 0
0b3a0     00 FA 05 F6 | 	mov	result1, #0
0b3a4     A7 F0 03 F6 | 	mov	ptra, fp
0b3a8     B2 00 A0 FD | 	call	#popregs_
0b3ac                 | _compile_goto_ret
0b3ac     2D 00 64 FD | 	ret
0b3b0                 | 
0b3b0                 | ' 
0b3b0                 | ' '----- compile 'on' (on..goto, on..gosub) 
0b3b0                 | ' 
0b3b0                 | ' function compile_on() as ulong
0b3b0                 | _compile_on
0b3b0     04 4A 05 F6 | 	mov	COUNT_, #4
0b3b4     A8 00 A0 FD | 	call	#pushregs_
0b3b8     B0 09 B0 FD | 	call	#_expr
0b3bc     00 26 06 F6 | 	mov	local01, #0
0b3c0     4A 00 00 FF 
0b3c4     7C E4 05 F1 | 	add	objptr, ##38012
0b3c8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3cc     0A 13 02 F6 | 	mov	arg01, arg02
0b3d0     01 12 66 F0 | 	shl	arg01, #1
0b3d4     0A 13 02 F1 | 	add	arg01, arg02
0b3d8     02 12 66 F0 | 	shl	arg01, #2
0b3dc     03 00 00 FF 
0b3e0     00 E4 85 F1 | 	sub	objptr, ##1536
0b3e4     F2 12 02 F1 | 	add	arg01, objptr
0b3e8     08 12 06 F1 | 	add	arg01, #8
0b3ec     09 83 69 FC | 	wrlong	#193, arg01
0b3f0     03 00 00 FF 
0b3f4     00 E4 05 F1 | 	add	objptr, ##1536
0b3f8     F2 14 02 FB | 	rdlong	arg02, objptr
0b3fc     0A 29 02 F6 | 	mov	local02, arg02
0b400     01 14 06 F1 | 	add	arg02, #1
0b404     F2 14 62 FC | 	wrlong	arg02, objptr
0b408                 | ' expr()
0b408                 | ' 'print lparts(ct).part$ 'ok
0b408                 | ' numpar=0
0b408                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0b408                 | ' if lparts(ct).part$="goto" then
0b408     13 00 00 FF 
0b40c     38 E4 85 F1 | 	sub	objptr, ##9784
0b410     F2 14 02 FB | 	rdlong	arg02, objptr
0b414     03 14 66 F0 | 	shl	arg02, #3
0b418     02 00 00 FF 
0b41c     38 E4 85 F1 | 	sub	objptr, ##1080
0b420     F2 14 02 F1 | 	add	arg02, objptr
0b424     0A 13 02 FB | 	rdlong	arg01, arg02
0b428     B5 01 00 FF 
0b42c     92 15 06 F6 | 	mov	arg02, ##@LR__5827
0b430     35 00 00 FF 
0b434     0C E4 85 F1 | 	sub	objptr, ##27148
0b438     04 B5 B1 FD | 	call	#__system___string_cmp
0b43c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b440     14 02 90 5D |  if_ne	jmp	#LR__0945
0b444     37 00 00 FF 
0b448     44 E4 05 F1 | 	add	objptr, ##28228
0b44c     F2 2A 02 FB | 	rdlong	local03, objptr
0b450     37 00 00 FF 
0b454     44 E4 85 F1 | 	sub	objptr, ##28228
0b458     01 2A 06 F1 | 	add	local03, #1
0b45c                 | '   i=ct+1
0b45c                 | '   do
0b45c                 | LR__0940
0b45c                 | '     if lparts(i).token=token_decimal then
0b45c     15 FB 01 F6 | 	mov	result1, local03
0b460     03 FA 65 F0 | 	shl	result1, #3
0b464     35 00 00 FF 
0b468     0C E4 05 F1 | 	add	objptr, ##27148
0b46c     F2 FA 01 F1 | 	add	result1, objptr
0b470     04 FA 05 F1 | 	add	result1, #4
0b474     FD FA 01 FB | 	rdlong	result1, result1
0b478     01 00 00 FF 
0b47c     00 FA 0D F2 | 	cmp	result1, ##512 wz
0b480     35 00 00 FF 
0b484     0C E4 85 F1 | 	sub	objptr, ##27148
0b488     DC 00 90 5D |  if_ne	jmp	#LR__0941
0b48c     4A 00 00 FF 
0b490     7C E4 05 F1 | 	add	objptr, ##38012
0b494     F2 FA 01 FB | 	rdlong	result1, objptr
0b498     FD 14 02 F6 | 	mov	arg02, result1
0b49c     01 14 66 F0 | 	shl	arg02, #1
0b4a0     FD 14 02 F1 | 	add	arg02, result1
0b4a4     02 14 66 F0 | 	shl	arg02, #2
0b4a8     03 00 00 FF 
0b4ac     00 E4 85 F1 | 	sub	objptr, ##1536
0b4b0     F2 14 02 F1 | 	add	arg02, objptr
0b4b4     00 00 C0 FF 
0b4b8     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0b4bc     03 00 00 FF 
0b4c0     00 E4 05 F1 | 	add	objptr, ##1536
0b4c4     F2 14 02 FB | 	rdlong	arg02, objptr
0b4c8     0A 2D 02 F6 | 	mov	local04, arg02
0b4cc     01 2C 66 F0 | 	shl	local04, #1
0b4d0     0A 2D 02 F1 | 	add	local04, arg02
0b4d4     02 2C 66 F0 | 	shl	local04, #2
0b4d8     03 00 00 FF 
0b4dc     00 E4 85 F1 | 	sub	objptr, ##1536
0b4e0     F2 2C 02 F1 | 	add	local04, objptr
0b4e4     15 15 02 F6 | 	mov	arg02, local03
0b4e8     03 14 66 F0 | 	shl	arg02, #3
0b4ec     12 00 00 FF 
0b4f0     70 E4 85 F1 | 	sub	objptr, ##9328
0b4f4     F2 14 02 F1 | 	add	arg02, objptr
0b4f8     0A 13 02 FB | 	rdlong	arg01, arg02
0b4fc     00 14 06 F6 | 	mov	arg02, #0
0b500     35 00 00 FF 
0b504     0C E4 85 F1 | 	sub	objptr, ##27148
0b508     00 E9 B1 FD | 	call	#__system____builtin_atoi
0b50c     04 2C 06 F1 | 	add	local04, #4
0b510     16 FB 61 FC | 	wrlong	result1, local04
0b514     4A 00 00 FF 
0b518     7C E4 05 F1 | 	add	objptr, ##38012
0b51c     F2 14 02 FB | 	rdlong	arg02, objptr
0b520     0A 2D 02 F6 | 	mov	local04, arg02
0b524     01 2C 66 F0 | 	shl	local04, #1
0b528     0A 2D 02 F1 | 	add	local04, arg02
0b52c     02 2C 66 F0 | 	shl	local04, #2
0b530     03 00 00 FF 
0b534     00 E4 85 F1 | 	sub	objptr, ##1536
0b538     F2 2C 02 F1 | 	add	local04, objptr
0b53c     08 2C 06 F1 | 	add	local04, #8
0b540     16 A7 68 FC | 	wrlong	#83, local04
0b544     03 00 00 FF 
0b548     00 E4 05 F1 | 	add	objptr, ##1536
0b54c     F2 2C 02 FB | 	rdlong	local04, objptr
0b550     01 2C 06 F1 | 	add	local04, #1
0b554     F2 2C 62 FC | 	wrlong	local04, objptr
0b558     4A 00 00 FF 
0b55c     7C E4 85 F1 | 	sub	objptr, ##38012
0b560     01 26 06 F1 | 	add	local01, #1
0b564     08 00 90 FD | 	jmp	#LR__0942
0b568                 | LR__0941
0b568                 | '       return 17
0b568     11 FA 05 F6 | 	mov	result1, #17
0b56c     5C 04 90 FD | 	jmp	#LR__0955
0b570                 | LR__0942
0b570     01 2A 06 F1 | 	add	local03, #1
0b574                 | '     i+=1
0b574                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b574     15 2D 02 F6 | 	mov	local04, local03
0b578     03 2C 66 F0 | 	shl	local04, #3
0b57c     35 00 00 FF 
0b580     0C E4 05 F1 | 	add	objptr, ##27148
0b584     F2 2C 02 F1 | 	add	local04, objptr
0b588     04 2C 06 F1 | 	add	local04, #4
0b58c     16 2D 02 FB | 	rdlong	local04, local04
0b590     11 2C 0E F2 | 	cmp	local04, #17 wz
0b594     35 00 00 FF 
0b598     0C E4 85 F1 | 	sub	objptr, ##27148
0b59c     30 00 90 AD |  if_e	jmp	#LR__0943
0b5a0     15 2D 02 F6 | 	mov	local04, local03
0b5a4     03 2C 66 F0 | 	shl	local04, #3
0b5a8     35 00 00 FF 
0b5ac     0C E4 05 F1 | 	add	objptr, ##27148
0b5b0     F2 2C 02 F1 | 	add	local04, objptr
0b5b4     04 2C 06 F1 | 	add	local04, #4
0b5b8     16 2D 02 FB | 	rdlong	local04, local04
0b5bc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5c0     35 00 00 FF 
0b5c4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5c8     15 FA 05 56 |  if_ne	mov	result1, #21
0b5cc     FC 03 90 5D |  if_ne	jmp	#LR__0955
0b5d0                 | LR__0943
0b5d0                 | '     if lparts(i).token=token_end then exit loop
0b5d0     15 2D 02 F6 | 	mov	local04, local03
0b5d4     03 2C 66 F0 | 	shl	local04, #3
0b5d8     35 00 00 FF 
0b5dc     0C E4 05 F1 | 	add	objptr, ##27148
0b5e0     F2 2C 02 F1 | 	add	local04, objptr
0b5e4     04 2C 06 F1 | 	add	local04, #4
0b5e8     16 2D 02 FB | 	rdlong	local04, local04
0b5ec     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b5f0     35 00 00 FF 
0b5f4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f8     30 00 90 AD |  if_e	jmp	#LR__0944
0b5fc     01 2A 06 F1 | 	add	local03, #1
0b600     15 2D 02 F6 | 	mov	local04, local03
0b604     03 2C 66 F0 | 	shl	local04, #3
0b608     35 00 00 FF 
0b60c     0C E4 05 F1 | 	add	objptr, ##27148
0b610     F2 2C 02 F1 | 	add	local04, objptr
0b614     04 2C 06 F1 | 	add	local04, #4
0b618     16 2D 02 FB | 	rdlong	local04, local04
0b61c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b620     35 00 00 FF 
0b624     0C E4 85 F1 | 	sub	objptr, ##27148
0b628     30 FE 9F 5D |  if_ne	jmp	#LR__0940
0b62c                 | LR__0944
0b62c     14 2D 02 F6 | 	mov	local04, local02
0b630     01 2C 66 F0 | 	shl	local04, #1
0b634     14 2D 02 F1 | 	add	local04, local02
0b638     02 2C 66 F0 | 	shl	local04, #2
0b63c     47 00 00 FF 
0b640     7C E4 05 F1 | 	add	objptr, ##36476
0b644     F2 2C 02 F1 | 	add	local04, objptr
0b648     04 2C 06 F1 | 	add	local04, #4
0b64c     16 03 68 FC | 	wrlong	#1, local04
0b650     47 00 00 FF 
0b654     7C E4 85 F1 | 	sub	objptr, ##36476
0b658                 | LR__0945
0b658                 | ' 
0b658                 | ' if lparts(ct).part$="gosub" then
0b658     37 00 00 FF 
0b65c     44 E4 05 F1 | 	add	objptr, ##28228
0b660     F2 2A 02 FB | 	rdlong	local03, objptr
0b664     03 2A 66 F0 | 	shl	local03, #3
0b668     02 00 00 FF 
0b66c     38 E4 85 F1 | 	sub	objptr, ##1080
0b670     F2 2A 02 F1 | 	add	local03, objptr
0b674     15 13 02 FB | 	rdlong	arg01, local03
0b678     B5 01 00 FF 
0b67c     97 15 06 F6 | 	mov	arg02, ##@LR__5828
0b680     35 00 00 FF 
0b684     0C E4 85 F1 | 	sub	objptr, ##27148
0b688     B4 B2 B1 FD | 	call	#__system___string_cmp
0b68c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b690     84 02 90 5D |  if_ne	jmp	#LR__0951
0b694     37 00 00 FF 
0b698     44 E4 05 F1 | 	add	objptr, ##28228
0b69c     F2 2A 02 FB | 	rdlong	local03, objptr
0b6a0     37 00 00 FF 
0b6a4     44 E4 85 F1 | 	sub	objptr, ##28228
0b6a8     01 2A 06 F1 | 	add	local03, #1
0b6ac                 | '   i=ct+1
0b6ac                 | '   do
0b6ac                 | LR__0946
0b6ac                 | '     if lparts(i).token=token_decimal then
0b6ac     15 2D 02 F6 | 	mov	local04, local03
0b6b0     03 2C 66 F0 | 	shl	local04, #3
0b6b4     35 00 00 FF 
0b6b8     0C E4 05 F1 | 	add	objptr, ##27148
0b6bc     F2 2C 02 F1 | 	add	local04, objptr
0b6c0     04 2C 06 F1 | 	add	local04, #4
0b6c4     16 2D 02 FB | 	rdlong	local04, local04
0b6c8     01 00 00 FF 
0b6cc     00 2C 0E F2 | 	cmp	local04, ##512 wz
0b6d0     35 00 00 FF 
0b6d4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6d8     4C 01 90 5D |  if_ne	jmp	#LR__0947
0b6dc     4A 00 00 FF 
0b6e0     7C E4 05 F1 | 	add	objptr, ##38012
0b6e4     F2 FA 01 FB | 	rdlong	result1, objptr
0b6e8     FD 2C 02 F6 | 	mov	local04, result1
0b6ec     01 2C 66 F0 | 	shl	local04, #1
0b6f0     FD 2C 02 F1 | 	add	local04, result1
0b6f4     02 2C 66 F0 | 	shl	local04, #2
0b6f8     03 00 00 FF 
0b6fc     00 E4 85 F1 | 	sub	objptr, ##1536
0b700     F2 2C 02 F1 | 	add	local04, objptr
0b704     08 2C 06 F1 | 	add	local04, #8
0b708     16 53 69 FC | 	wrlong	#169, local04
0b70c     03 00 00 FF 
0b710     00 E4 05 F1 | 	add	objptr, ##1536
0b714     F2 FA 01 FB | 	rdlong	result1, objptr
0b718     01 FA 05 F1 | 	add	result1, #1
0b71c     F2 FA 61 FC | 	wrlong	result1, objptr
0b720     FD 2C 02 F6 | 	mov	local04, result1
0b724     01 2C 66 F0 | 	shl	local04, #1
0b728     FD 2C 02 F1 | 	add	local04, result1
0b72c     02 2C 66 F0 | 	shl	local04, #2
0b730     03 00 00 FF 
0b734     00 E4 85 F1 | 	sub	objptr, ##1536
0b738     F2 2C 02 F1 | 	add	local04, objptr
0b73c     00 00 C0 FF 
0b740     16 01 68 FC | 	wrlong	##-2147483648, local04
0b744     03 00 00 FF 
0b748     00 E4 05 F1 | 	add	objptr, ##1536
0b74c     F2 FA 01 FB | 	rdlong	result1, objptr
0b750     FD 2C 02 F6 | 	mov	local04, result1
0b754     01 2C 66 F0 | 	shl	local04, #1
0b758     FD 2C 02 F1 | 	add	local04, result1
0b75c     02 2C 66 F0 | 	shl	local04, #2
0b760     03 00 00 FF 
0b764     00 E4 85 F1 | 	sub	objptr, ##1536
0b768     F2 2C 02 F1 | 	add	local04, objptr
0b76c     15 13 02 F6 | 	mov	arg01, local03
0b770     03 12 66 F0 | 	shl	arg01, #3
0b774     12 00 00 FF 
0b778     70 E4 85 F1 | 	sub	objptr, ##9328
0b77c     F2 12 02 F1 | 	add	arg01, objptr
0b780     09 13 02 FB | 	rdlong	arg01, arg01
0b784     00 14 06 F6 | 	mov	arg02, #0
0b788     35 00 00 FF 
0b78c     0C E4 85 F1 | 	sub	objptr, ##27148
0b790     78 E6 B1 FD | 	call	#__system____builtin_atoi
0b794     04 2C 06 F1 | 	add	local04, #4
0b798     16 FB 61 FC | 	wrlong	result1, local04
0b79c     4A 00 00 FF 
0b7a0     7C E4 05 F1 | 	add	objptr, ##38012
0b7a4     F2 12 02 FB | 	rdlong	arg01, objptr
0b7a8     09 2D 02 F6 | 	mov	local04, arg01
0b7ac     01 2C 66 F0 | 	shl	local04, #1
0b7b0     09 2D 02 F1 | 	add	local04, arg01
0b7b4     02 2C 66 F0 | 	shl	local04, #2
0b7b8     03 00 00 FF 
0b7bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b7c0     F2 2C 02 F1 | 	add	local04, objptr
0b7c4     08 2C 06 F1 | 	add	local04, #8
0b7c8     16 A7 68 FC | 	wrlong	#83, local04
0b7cc     03 00 00 FF 
0b7d0     00 E4 05 F1 | 	add	objptr, ##1536
0b7d4     F2 12 02 FB | 	rdlong	arg01, objptr
0b7d8     01 12 06 F1 | 	add	arg01, #1
0b7dc     F2 12 62 FC | 	wrlong	arg01, objptr
0b7e0     01 26 06 F1 | 	add	local01, #1
0b7e4     09 2D 02 F6 | 	mov	local04, arg01
0b7e8     01 2C 66 F0 | 	shl	local04, #1
0b7ec     09 2D 02 F1 | 	add	local04, arg01
0b7f0     02 2C 66 F0 | 	shl	local04, #2
0b7f4     03 00 00 FF 
0b7f8     00 E4 85 F1 | 	sub	objptr, ##1536
0b7fc     F2 2C 02 F1 | 	add	local04, objptr
0b800     08 2C 06 F1 | 	add	local04, #8
0b804     16 5B 68 FC | 	wrlong	#45, local04
0b808     03 00 00 FF 
0b80c     00 E4 05 F1 | 	add	objptr, ##1536
0b810     F2 2C 02 FB | 	rdlong	local04, objptr
0b814     01 2C 06 F1 | 	add	local04, #1
0b818     F2 2C 62 FC | 	wrlong	local04, objptr
0b81c     4A 00 00 FF 
0b820     7C E4 85 F1 | 	sub	objptr, ##38012
0b824     08 00 90 FD | 	jmp	#LR__0948
0b828                 | LR__0947
0b828                 | '       return 17
0b828     11 FA 05 F6 | 	mov	result1, #17
0b82c     9C 01 90 FD | 	jmp	#LR__0955
0b830                 | LR__0948
0b830     01 2A 06 F1 | 	add	local03, #1
0b834                 | '     i+=1
0b834                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0b834     15 2D 02 F6 | 	mov	local04, local03
0b838     03 2C 66 F0 | 	shl	local04, #3
0b83c     35 00 00 FF 
0b840     0C E4 05 F1 | 	add	objptr, ##27148
0b844     F2 2C 02 F1 | 	add	local04, objptr
0b848     04 2C 06 F1 | 	add	local04, #4
0b84c     16 2D 02 FB | 	rdlong	local04, local04
0b850     11 2C 0E F2 | 	cmp	local04, #17 wz
0b854     35 00 00 FF 
0b858     0C E4 85 F1 | 	sub	objptr, ##27148
0b85c     30 00 90 AD |  if_e	jmp	#LR__0949
0b860     15 2D 02 F6 | 	mov	local04, local03
0b864     03 2C 66 F0 | 	shl	local04, #3
0b868     35 00 00 FF 
0b86c     0C E4 05 F1 | 	add	objptr, ##27148
0b870     F2 2C 02 F1 | 	add	local04, objptr
0b874     04 2C 06 F1 | 	add	local04, #4
0b878     16 2D 02 FB | 	rdlong	local04, local04
0b87c     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b880     35 00 00 FF 
0b884     0C E4 85 F1 | 	sub	objptr, ##27148
0b888     15 FA 05 56 |  if_ne	mov	result1, #21
0b88c     3C 01 90 5D |  if_ne	jmp	#LR__0955
0b890                 | LR__0949
0b890                 | '     if lparts(i).token=token_end then exit loop
0b890     15 2D 02 F6 | 	mov	local04, local03
0b894     03 2C 66 F0 | 	shl	local04, #3
0b898     35 00 00 FF 
0b89c     0C E4 05 F1 | 	add	objptr, ##27148
0b8a0     F2 2C 02 F1 | 	add	local04, objptr
0b8a4     04 2C 06 F1 | 	add	local04, #4
0b8a8     16 2D 02 FB | 	rdlong	local04, local04
0b8ac     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8b0     35 00 00 FF 
0b8b4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8b8     30 00 90 AD |  if_e	jmp	#LR__0950
0b8bc     01 2A 06 F1 | 	add	local03, #1
0b8c0     15 2D 02 F6 | 	mov	local04, local03
0b8c4     03 2C 66 F0 | 	shl	local04, #3
0b8c8     35 00 00 FF 
0b8cc     0C E4 05 F1 | 	add	objptr, ##27148
0b8d0     F2 2C 02 F1 | 	add	local04, objptr
0b8d4     04 2C 06 F1 | 	add	local04, #4
0b8d8     16 2D 02 FB | 	rdlong	local04, local04
0b8dc     FE 2D 0E F2 | 	cmp	local04, #510 wz
0b8e0     35 00 00 FF 
0b8e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b8e8     C0 FD 9F 5D |  if_ne	jmp	#LR__0946
0b8ec                 | LR__0950
0b8ec     14 2D 02 F6 | 	mov	local04, local02
0b8f0     01 2C 66 F0 | 	shl	local04, #1
0b8f4     14 2D 02 F1 | 	add	local04, local02
0b8f8     02 2C 66 F0 | 	shl	local04, #2
0b8fc     47 00 00 FF 
0b900     7C E4 05 F1 | 	add	objptr, ##36476
0b904     F2 2C 02 F1 | 	add	local04, objptr
0b908     04 2C 06 F1 | 	add	local04, #4
0b90c     16 07 68 FC | 	wrlong	#3, local04
0b910     47 00 00 FF 
0b914     7C E4 85 F1 | 	sub	objptr, ##36476
0b918                 | LR__0951
0b918     14 2B 02 F6 | 	mov	local03, local02
0b91c     01 2A 66 F0 | 	shl	local03, #1
0b920     14 2B 02 F1 | 	add	local03, local02
0b924     02 2A 66 F0 | 	shl	local03, #2
0b928     47 00 00 FF 
0b92c     7C E4 05 F1 | 	add	objptr, ##36476
0b930     F2 2A 02 F1 | 	add	local03, objptr
0b934     15 27 62 FC | 	wrlong	local01, local03
0b938                 | ' compiledline(onlineptr).result.uresult=numpar
0b938                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0b938     03 00 00 FF 
0b93c     00 E4 05 F1 | 	add	objptr, ##1536
0b940     F2 2A 02 FB | 	rdlong	local03, objptr
0b944     4A 00 00 FF 
0b948     7C E4 85 F1 | 	sub	objptr, ##38012
0b94c     97 3C 48 FB | 	callpa	#(@LR__0954-@LR__0952)>>2,fcache_load_ptr_
0b950                 | LR__0952
0b950     15 2D 02 F6 | 	mov	local04, local03
0b954     01 2C 66 F0 | 	shl	local04, #1
0b958     15 2D 02 F1 | 	add	local04, local03
0b95c     02 2C 66 F0 | 	shl	local04, #2
0b960     47 00 00 FF 
0b964     7C E4 05 F1 | 	add	objptr, ##36476
0b968     F2 2C 02 F1 | 	add	local04, objptr
0b96c     08 2C 06 F1 | 	add	local04, #8
0b970     16 2D 02 FB | 	rdlong	local04, local04
0b974     2D 2C 0E F2 | 	cmp	local04, #45 wz
0b978     47 00 00 FF 
0b97c     7C E4 85 F1 | 	sub	objptr, ##36476
0b980     38 00 90 5D |  if_ne	jmp	#LR__0953
0b984     15 2D 02 F6 | 	mov	local04, local03
0b988     01 2C 66 F0 | 	shl	local04, #1
0b98c     15 2D 02 F1 | 	add	local04, local03
0b990     02 2C 66 F0 | 	shl	local04, #2
0b994     47 00 00 FF 
0b998     7C E4 05 F1 | 	add	objptr, ##36476
0b99c     F2 2C 02 F1 | 	add	local04, objptr
0b9a0     03 00 00 FF 
0b9a4     00 E4 05 F1 | 	add	objptr, ##1536
0b9a8     F2 26 02 FB | 	rdlong	local01, objptr
0b9ac     4A 00 00 FF 
0b9b0     7C E4 85 F1 | 	sub	objptr, ##38012
0b9b4     02 26 86 F1 | 	sub	local01, #2
0b9b8     16 27 62 FC | 	wrlong	local01, local04
0b9bc                 | LR__0953
0b9bc     01 2A 86 F1 | 	sub	local03, #1
0b9c0     14 2B 52 F2 | 	cmps	local03, local02 wc
0b9c4     88 FF 9F 3D |  if_ae	jmp	#LR__0952
0b9c8                 | LR__0954
0b9c8                 | ' return 0
0b9c8     00 FA 05 F6 | 	mov	result1, #0
0b9cc                 | LR__0955
0b9cc     A7 F0 03 F6 | 	mov	ptra, fp
0b9d0     B2 00 A0 FD | 	call	#popregs_
0b9d4                 | _compile_on_ret
0b9d4     2D 00 64 FD | 	ret
0b9d8                 | 
0b9d8                 | ' 
0b9d8                 | ' '----- A helper for compile_input and compile_read
0b9d8                 | '  
0b9d8                 | ' function getaddr() as ulong
0b9d8                 | _getaddr
0b9d8     0B 4A 05 F6 | 	mov	COUNT_, #11
0b9dc     A8 00 A0 FD | 	call	#pushregs_
0b9e0     37 00 00 FF 
0b9e4     44 E4 05 F1 | 	add	objptr, ##28228
0b9e8     F2 2C 02 FB | 	rdlong	local04, objptr
0b9ec     03 2C 66 F0 | 	shl	local04, #3
0b9f0     02 00 00 FF 
0b9f4     38 E4 85 F1 | 	sub	objptr, ##1080
0b9f8     F2 2C 02 F1 | 	add	local04, objptr
0b9fc     16 2F 02 FB | 	rdlong	local05, local04
0ba00     01 30 66 F6 | 	neg	local06, #1
0ba04                 | ' 
0ba04                 | ' varname$=lparts(ct).part$
0ba04                 | ' j=-1
0ba04                 | ' 
0ba04                 | ' for i=0 to varnum-1
0ba04     00 32 06 F6 | 	mov	local07, #0
0ba08     04 E4 85 F1 | 	sub	objptr, #4
0ba0c     F2 34 02 FB | 	rdlong	local08, objptr
0ba10     35 00 00 FF 
0ba14     08 E4 85 F1 | 	sub	objptr, ##27144
0ba18                 | LR__0960
0ba18     1A 33 52 F2 | 	cmps	local07, local08 wc
0ba1c     38 00 90 3D |  if_ae	jmp	#LR__0961
0ba20                 | '   if variables(i).name=varname$ then j=i : exit
0ba20     19 2D 02 F6 | 	mov	local04, local07
0ba24     04 2C 66 F0 | 	shl	local04, #4
0ba28     14 00 00 FF 
0ba2c     F8 E5 05 F1 | 	add	objptr, ##10744
0ba30     F2 2C 02 F1 | 	add	local04, objptr
0ba34     16 13 02 FB | 	rdlong	arg01, local04
0ba38     17 15 02 F6 | 	mov	arg02, local05
0ba3c     14 00 00 FF 
0ba40     F8 E5 85 F1 | 	sub	objptr, ##10744
0ba44     F8 AE B1 FD | 	call	#__system___string_cmp
0ba48     00 FA 0D F2 | 	cmp	result1, #0 wz
0ba4c     19 31 02 A6 |  if_e	mov	local06, local07
0ba50     01 32 06 51 |  if_ne	add	local07, #1
0ba54     C0 FF 9F 5D |  if_ne	jmp	#LR__0960
0ba58                 | LR__0961
0ba58                 | ' if  j=-1 andalso varnum<maxvars then   
0ba58     FF FF 7F FF 
0ba5c     FF 31 0E F2 | 	cmp	local06, ##-1 wz
0ba60     A8 00 90 5D |  if_ne	jmp	#LR__0962
0ba64     35 00 00 FF 
0ba68     08 E4 05 F1 | 	add	objptr, ##27144
0ba6c     F2 34 02 FB | 	rdlong	local08, objptr
0ba70     35 00 00 FF 
0ba74     08 E4 85 F1 | 	sub	objptr, ##27144
0ba78     02 00 00 FF 
0ba7c     00 34 56 F2 | 	cmps	local08, ##1024 wc
0ba80     88 00 90 3D |  if_ae	jmp	#LR__0962
0ba84     35 00 00 FF 
0ba88     08 E4 05 F1 | 	add	objptr, ##27144
0ba8c     F2 2C 02 FB | 	rdlong	local04, objptr
0ba90     04 2C 66 F0 | 	shl	local04, #4
0ba94     20 00 00 FF 
0ba98     10 E4 85 F1 | 	sub	objptr, ##16400
0ba9c     F2 2C 02 F1 | 	add	local04, objptr
0baa0     16 2F 62 FC | 	wrlong	local05, local04
0baa4     20 00 00 FF 
0baa8     10 E4 05 F1 | 	add	objptr, ##16400
0baac     F2 2C 02 FB | 	rdlong	local04, objptr
0bab0     04 2C 66 F0 | 	shl	local04, #4
0bab4     20 00 00 FF 
0bab8     10 E4 85 F1 | 	sub	objptr, ##16400
0babc     F2 2C 02 F1 | 	add	local04, objptr
0bac0     04 2C 06 F1 | 	add	local04, #4
0bac4     16 01 68 FC | 	wrlong	#0, local04
0bac8     20 00 00 FF 
0bacc     10 E4 05 F1 | 	add	objptr, ##16400
0bad0     F2 2C 02 FB | 	rdlong	local04, objptr
0bad4     04 2C 66 F0 | 	shl	local04, #4
0bad8     20 00 00 FF 
0badc     10 E4 85 F1 | 	sub	objptr, ##16400
0bae0     F2 2C 02 F1 | 	add	local04, objptr
0bae4     0C 2C 06 F1 | 	add	local04, #12
0bae8     16 39 68 FC | 	wrlong	#28, local04
0baec     20 00 00 FF 
0baf0     10 E4 05 F1 | 	add	objptr, ##16400
0baf4     F2 34 02 FB | 	rdlong	local08, objptr
0baf8     1A 31 02 F6 | 	mov	local06, local08
0bafc     01 34 06 F1 | 	add	local08, #1
0bb00     F2 34 62 FC | 	wrlong	local08, objptr
0bb04     35 00 00 FF 
0bb08     08 E4 85 F1 | 	sub	objptr, ##27144
0bb0c                 | LR__0962
0bb0c     00 34 06 F6 | 	mov	local08, #0
0bb10                 | ' numpar=0
0bb10                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bb10     37 00 00 FF 
0bb14     44 E4 05 F1 | 	add	objptr, ##28228
0bb18     F2 2C 02 FB | 	rdlong	local04, objptr
0bb1c     01 2C 06 F1 | 	add	local04, #1
0bb20     03 2C 66 F0 | 	shl	local04, #3
0bb24     02 00 00 FF 
0bb28     38 E4 85 F1 | 	sub	objptr, ##1080
0bb2c     F2 2C 02 F1 | 	add	local04, objptr
0bb30     04 2C 06 F1 | 	add	local04, #4
0bb34     16 33 02 FB | 	rdlong	local07, local04
0bb38     15 32 0E F2 | 	cmp	local07, #21 wz
0bb3c     35 00 00 FF 
0bb40     0C E4 85 F1 | 	sub	objptr, ##27148
0bb44     54 01 90 5D |  if_ne	jmp	#LR__0967
0bb48     37 00 00 FF 
0bb4c     44 E4 05 F1 | 	add	objptr, ##28228
0bb50     F2 36 02 FB | 	rdlong	local09, objptr
0bb54     01 36 06 F1 | 	add	local09, #1
0bb58     F2 36 62 FC | 	wrlong	local09, objptr
0bb5c     37 00 00 FF 
0bb60     44 E4 85 F1 | 	sub	objptr, ##28228
0bb64                 | '   ct+=1 											' omit this lpar, this is for expr list
0bb64                 | '   do
0bb64                 | LR__0963
0bb64     37 00 00 FF 
0bb68     44 E4 05 F1 | 	add	objptr, ##28228
0bb6c     F2 2C 02 FB | 	rdlong	local04, objptr
0bb70     01 2C 06 F1 | 	add	local04, #1
0bb74     F2 2C 62 FC | 	wrlong	local04, objptr
0bb78                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bb78                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bb78     03 2C 66 F0 | 	shl	local04, #3
0bb7c     02 00 00 FF 
0bb80     38 E4 85 F1 | 	sub	objptr, ##1080
0bb84     F2 2C 02 F1 | 	add	local04, objptr
0bb88     04 2C 06 F1 | 	add	local04, #4
0bb8c     16 37 02 FB | 	rdlong	local09, local04
0bb90     15 36 0E F2 | 	cmp	local09, #21 wz
0bb94     35 00 00 FF 
0bb98     0C E4 85 F1 | 	sub	objptr, ##27148
0bb9c     44 00 90 5D |  if_ne	jmp	#LR__0964
0bba0     37 00 00 FF 
0bba4     44 E4 05 F1 | 	add	objptr, ##28228
0bba8     F2 36 02 FB | 	rdlong	local09, objptr
0bbac     01 36 06 F1 | 	add	local09, #1
0bbb0     F2 36 62 FC | 	wrlong	local09, objptr
0bbb4     37 00 00 FF 
0bbb8     44 E4 85 F1 | 	sub	objptr, ##28228
0bbbc     AC 01 B0 FD | 	call	#_expr
0bbc0     FD 38 02 F6 | 	mov	local10, result1
0bbc4     37 00 00 FF 
0bbc8     44 E4 05 F1 | 	add	objptr, ##28228
0bbcc     F2 36 02 FB | 	rdlong	local09, objptr
0bbd0     01 36 06 F1 | 	add	local09, #1
0bbd4     F2 36 62 FC | 	wrlong	local09, objptr
0bbd8     37 00 00 FF 
0bbdc     44 E4 85 F1 | 	sub	objptr, ##28228
0bbe0     08 00 90 FD | 	jmp	#LR__0965
0bbe4                 | LR__0964
0bbe4     84 01 B0 FD | 	call	#_expr
0bbe8     FD 38 02 F6 | 	mov	local10, result1
0bbec                 | LR__0965
0bbec                 | '     if err>0 then return err
0bbec     01 38 56 F2 | 	cmps	local10, #1 wc
0bbf0     1C FB 01 36 |  if_ae	mov	result1, local10
0bbf4     68 01 90 3D |  if_ae	jmp	#LR__0968
0bbf8     01 34 06 F1 | 	add	local08, #1
0bbfc     37 00 00 FF 
0bc00     44 E4 05 F1 | 	add	objptr, ##28228
0bc04     F2 2C 02 FB | 	rdlong	local04, objptr
0bc08     03 2C 66 F0 | 	shl	local04, #3
0bc0c     02 00 00 FF 
0bc10     38 E4 85 F1 | 	sub	objptr, ##1080
0bc14     F2 2C 02 F1 | 	add	local04, objptr
0bc18     04 2C 06 F1 | 	add	local04, #4
0bc1c     16 39 02 FB | 	rdlong	local10, local04
0bc20     14 38 0E F2 | 	cmp	local10, #20 wz
0bc24     35 00 00 FF 
0bc28     0C E4 85 F1 | 	sub	objptr, ##27148
0bc2c     34 00 90 AD |  if_e	jmp	#LR__0966
0bc30     37 00 00 FF 
0bc34     44 E4 05 F1 | 	add	objptr, ##28228
0bc38     F2 38 02 FB | 	rdlong	local10, objptr
0bc3c     03 38 66 F0 | 	shl	local10, #3
0bc40     02 00 00 FF 
0bc44     38 E4 85 F1 | 	sub	objptr, ##1080
0bc48     F2 38 02 F1 | 	add	local10, objptr
0bc4c     04 38 06 F1 | 	add	local10, #4
0bc50     1C 39 02 FB | 	rdlong	local10, local10
0bc54     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc58     35 00 00 FF 
0bc5c     0C E4 85 F1 | 	sub	objptr, ##27148
0bc60     00 FF 9F 5D |  if_ne	jmp	#LR__0963
0bc64                 | LR__0966
0bc64                 | '     if lparts(ct).token=token_end then return 14
0bc64     37 00 00 FF 
0bc68     44 E4 05 F1 | 	add	objptr, ##28228
0bc6c     F2 2C 02 FB | 	rdlong	local04, objptr
0bc70     03 2C 66 F0 | 	shl	local04, #3
0bc74     02 00 00 FF 
0bc78     38 E4 85 F1 | 	sub	objptr, ##1080
0bc7c     F2 2C 02 F1 | 	add	local04, objptr
0bc80     04 2C 06 F1 | 	add	local04, #4
0bc84     16 39 02 FB | 	rdlong	local10, local04
0bc88     FE 39 0E F2 | 	cmp	local10, #510 wz
0bc8c     35 00 00 FF 
0bc90     0C E4 85 F1 | 	sub	objptr, ##27148
0bc94     0E FA 05 A6 |  if_e	mov	result1, #14
0bc98     C4 00 90 AD |  if_e	jmp	#LR__0968
0bc9c                 | LR__0967
0bc9c     1A 29 02 F6 | 	mov	local02, local08
0bca0     12 2A 06 F6 | 	mov	local03, #18
0bca4     18 27 02 F6 | 	mov	local01, local06
0bca8     13 37 02 F6 | 	mov	local09, local01
0bcac     14 3B 02 F6 | 	mov	local11, local02
0bcb0     15 27 02 F6 | 	mov	local01, local03
0bcb4     4A 00 00 FF 
0bcb8     7C E4 05 F1 | 	add	objptr, ##38012
0bcbc     F2 38 02 FB | 	rdlong	local10, objptr
0bcc0     1C 35 02 F6 | 	mov	local08, local10
0bcc4     01 34 66 F0 | 	shl	local08, #1
0bcc8     1C 35 02 F1 | 	add	local08, local10
0bccc     02 34 66 F0 | 	shl	local08, #2
0bcd0     03 00 00 FF 
0bcd4     00 E4 85 F1 | 	sub	objptr, ##1536
0bcd8     F2 34 02 F1 | 	add	local08, objptr
0bcdc     1A 37 62 FC | 	wrlong	local09, local08
0bce0     03 00 00 FF 
0bce4     00 E4 05 F1 | 	add	objptr, ##1536
0bce8     F2 38 02 FB | 	rdlong	local10, objptr
0bcec     1C 37 02 F6 | 	mov	local09, local10
0bcf0     01 36 66 F0 | 	shl	local09, #1
0bcf4     1C 37 02 F1 | 	add	local09, local10
0bcf8     02 36 66 F0 | 	shl	local09, #2
0bcfc     03 00 00 FF 
0bd00     00 E4 85 F1 | 	sub	objptr, ##1536
0bd04     F2 36 02 F1 | 	add	local09, objptr
0bd08     04 36 06 F1 | 	add	local09, #4
0bd0c     1B 3B 62 FC | 	wrlong	local11, local09
0bd10     03 00 00 FF 
0bd14     00 E4 05 F1 | 	add	objptr, ##1536
0bd18     F2 3A 02 FB | 	rdlong	local11, objptr
0bd1c     1D 39 02 F6 | 	mov	local10, local11
0bd20     01 38 66 F0 | 	shl	local10, #1
0bd24     1D 39 02 F1 | 	add	local10, local11
0bd28     02 38 66 F0 | 	shl	local10, #2
0bd2c     03 00 00 FF 
0bd30     00 E4 85 F1 | 	sub	objptr, ##1536
0bd34     F2 38 02 F1 | 	add	local10, objptr
0bd38     08 38 06 F1 | 	add	local10, #8
0bd3c     1C 27 62 FC | 	wrlong	local01, local10
0bd40     03 00 00 FF 
0bd44     00 E4 05 F1 | 	add	objptr, ##1536
0bd48     F2 36 02 FB | 	rdlong	local09, objptr
0bd4c     01 36 06 F1 | 	add	local09, #1
0bd50     F2 36 62 FC | 	wrlong	local09, objptr
0bd54     4A 00 00 FF 
0bd58     7C E4 85 F1 | 	sub	objptr, ##38012
0bd5c                 | ' t2.result.twowords(1)=numpar
0bd5c                 | ' t2.result_type=fun_getaddr:t2.result.twowords(0)=j
0bd5c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bd5c                 | ' return 0
0bd5c     00 FA 05 F6 | 	mov	result1, #0
0bd60                 | LR__0968
0bd60     A7 F0 03 F6 | 	mov	ptra, fp
0bd64     B2 00 A0 FD | 	call	#popregs_
0bd68                 | _getaddr_ret
0bd68     2D 00 64 FD | 	ret
0bd6c                 | 
0bd6c                 | ' 
0bd6c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bd6c                 | ' '--------------------------------------------- 
0bd6c                 | ' 
0bd6c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd6c                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0bd6c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd6c                 | ' 
0bd6c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd6c                 | ' '
0bd6c                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0bd6c                 | ' '
0bd6c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bd6c                 | ' 
0bd6c                 | ' function expr() as ulong 
0bd6c                 | _expr
0bd6c     07 4A 05 F6 | 	mov	COUNT_, #7
0bd70     A8 00 A0 FD | 	call	#pushregs_
0bd74                 | _expr_enter
0bd74     37 00 00 FF 
0bd78     44 E4 05 F1 | 	add	objptr, ##28228
0bd7c     F2 2C 02 FB | 	rdlong	local04, objptr
0bd80     03 2C 66 F0 | 	shl	local04, #3
0bd84     02 00 00 FF 
0bd88     38 E4 85 F1 | 	sub	objptr, ##1080
0bd8c     F2 2C 02 F1 | 	add	local04, objptr
0bd90     04 2C 06 F1 | 	add	local04, #4
0bd94     16 2F 02 FB | 	rdlong	local05, local04
0bd98                 | ' 
0bd98                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0bd98     FE 2F 0E F2 | 	cmp	local05, #510 wz
0bd9c     35 00 00 FF 
0bda0     0C E4 85 F1 | 	sub	objptr, ##27148
0bda4     C4 00 90 5D |  if_ne	jmp	#LR__0970
0bda8     1D 26 06 F6 | 	mov	local01, #29
0bdac     FF 2A 06 F6 | 	mov	local03, #255
0bdb0     13 31 02 F6 | 	mov	local06, local01
0bdb4     14 33 02 F6 | 	mov	local07, local02
0bdb8     15 27 02 F6 | 	mov	local01, local03
0bdbc     4A 00 00 FF 
0bdc0     7C E4 05 F1 | 	add	objptr, ##38012
0bdc4     F2 2E 02 FB | 	rdlong	local05, objptr
0bdc8     17 2D 02 F6 | 	mov	local04, local05
0bdcc     01 2C 66 F0 | 	shl	local04, #1
0bdd0     17 2D 02 F1 | 	add	local04, local05
0bdd4     02 2C 66 F0 | 	shl	local04, #2
0bdd8     03 00 00 FF 
0bddc     00 E4 85 F1 | 	sub	objptr, ##1536
0bde0     F2 2C 02 F1 | 	add	local04, objptr
0bde4     16 31 62 FC | 	wrlong	local06, local04
0bde8     03 00 00 FF 
0bdec     00 E4 05 F1 | 	add	objptr, ##1536
0bdf0     F2 30 02 FB | 	rdlong	local06, objptr
0bdf4     18 2F 02 F6 | 	mov	local05, local06
0bdf8     01 2E 66 F0 | 	shl	local05, #1
0bdfc     18 2F 02 F1 | 	add	local05, local06
0be00     02 2E 66 F0 | 	shl	local05, #2
0be04     03 00 00 FF 
0be08     00 E4 85 F1 | 	sub	objptr, ##1536
0be0c     F2 2E 02 F1 | 	add	local05, objptr
0be10     04 2E 06 F1 | 	add	local05, #4
0be14     17 33 62 FC | 	wrlong	local07, local05
0be18     03 00 00 FF 
0be1c     00 E4 05 F1 | 	add	objptr, ##1536
0be20     F2 32 02 FB | 	rdlong	local07, objptr
0be24     19 31 02 F6 | 	mov	local06, local07
0be28     01 30 66 F0 | 	shl	local06, #1
0be2c     19 31 02 F1 | 	add	local06, local07
0be30     02 30 66 F0 | 	shl	local06, #2
0be34     03 00 00 FF 
0be38     00 E4 85 F1 | 	sub	objptr, ##1536
0be3c     F2 30 02 F1 | 	add	local06, objptr
0be40     08 30 06 F1 | 	add	local06, #8
0be44     18 27 62 FC | 	wrlong	local01, local06
0be48     03 00 00 FF 
0be4c     00 E4 05 F1 | 	add	objptr, ##1536
0be50     F2 30 02 FB | 	rdlong	local06, objptr
0be54     01 30 06 F1 | 	add	local06, #1
0be58     F2 30 62 FC | 	wrlong	local06, objptr
0be5c     4A 00 00 FF 
0be60     7C E4 85 F1 | 	sub	objptr, ##38012
0be64     1D FA 05 F6 | 	mov	result1, #29
0be68     64 01 90 FD | 	jmp	#LR__0973
0be6c                 | LR__0970
0be6c     00 26 06 F6 | 	mov	local01, #0
0be70     68 01 B0 FD | 	call	#_addsub
0be74                 | ' t3.result.uresult=0
0be74                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0be74                 | ' if err>0 then return err
0be74     01 FA 15 F2 | 	cmp	result1, #1 wc
0be78     54 01 90 3D |  if_ae	jmp	#LR__0973
0be7c     37 00 00 FF 
0be80     44 E4 05 F1 | 	add	objptr, ##28228
0be84     F2 2C 02 FB | 	rdlong	local04, objptr
0be88     03 2C 66 F0 | 	shl	local04, #3
0be8c     02 00 00 FF 
0be90     38 E4 85 F1 | 	sub	objptr, ##1080
0be94     F2 2C 02 F1 | 	add	local04, objptr
0be98     04 2C 06 F1 | 	add	local04, #4
0be9c     16 2F 02 FB | 	rdlong	local05, local04
0bea0                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0bea0                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0bea0     35 00 00 FF 
0bea4     0C E4 85 F1 | 	sub	objptr, ##27148
0bea8                 | LR__0971
0bea8     1B 2E 0E F2 | 	cmp	local05, #27 wz
0beac     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0beb0     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0beb4     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0beb8     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0bebc     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0bec0     08 01 90 5D |  if_ne	jmp	#LR__0972
0bec4     37 00 00 FF 
0bec8     44 E4 05 F1 | 	add	objptr, ##28228
0becc     F2 30 02 FB | 	rdlong	local06, objptr
0bed0     01 30 06 F1 | 	add	local06, #1
0bed4     F2 30 62 FC | 	wrlong	local06, objptr
0bed8     37 00 00 FF 
0bedc     44 E4 85 F1 | 	sub	objptr, ##28228
0bee0     F8 00 B0 FD | 	call	#_addsub
0bee4                 | '   ct+=1
0bee4                 | '   err=addsub() : if err>0 then return err
0bee4     01 FA 15 F2 | 	cmp	result1, #1 wc
0bee8     E4 00 90 3D |  if_ae	jmp	#LR__0973
0beec     17 2B 02 F6 | 	mov	local03, local05
0bef0     13 31 02 F6 | 	mov	local06, local01
0bef4     14 33 02 F6 | 	mov	local07, local02
0bef8     15 2F 02 F6 | 	mov	local05, local03
0befc     4A 00 00 FF 
0bf00     7C E4 05 F1 | 	add	objptr, ##38012
0bf04     F2 2C 02 FB | 	rdlong	local04, objptr
0bf08     16 FB 01 F6 | 	mov	result1, local04
0bf0c     01 FA 65 F0 | 	shl	result1, #1
0bf10     16 FB 01 F1 | 	add	result1, local04
0bf14     02 FA 65 F0 | 	shl	result1, #2
0bf18     03 00 00 FF 
0bf1c     00 E4 85 F1 | 	sub	objptr, ##1536
0bf20     F2 FA 01 F1 | 	add	result1, objptr
0bf24     FD 30 62 FC | 	wrlong	local06, result1
0bf28     03 00 00 FF 
0bf2c     00 E4 05 F1 | 	add	objptr, ##1536
0bf30     F2 30 02 FB | 	rdlong	local06, objptr
0bf34     18 2D 02 F6 | 	mov	local04, local06
0bf38     01 2C 66 F0 | 	shl	local04, #1
0bf3c     18 2D 02 F1 | 	add	local04, local06
0bf40     02 2C 66 F0 | 	shl	local04, #2
0bf44     03 00 00 FF 
0bf48     00 E4 85 F1 | 	sub	objptr, ##1536
0bf4c     F2 2C 02 F1 | 	add	local04, objptr
0bf50     04 2C 06 F1 | 	add	local04, #4
0bf54     16 33 62 FC | 	wrlong	local07, local04
0bf58     03 00 00 FF 
0bf5c     00 E4 05 F1 | 	add	objptr, ##1536
0bf60     F2 32 02 FB | 	rdlong	local07, objptr
0bf64     19 31 02 F6 | 	mov	local06, local07
0bf68     01 30 66 F0 | 	shl	local06, #1
0bf6c     19 31 02 F1 | 	add	local06, local07
0bf70     02 30 66 F0 | 	shl	local06, #2
0bf74     03 00 00 FF 
0bf78     00 E4 85 F1 | 	sub	objptr, ##1536
0bf7c     F2 30 02 F1 | 	add	local06, objptr
0bf80     08 30 06 F1 | 	add	local06, #8
0bf84     18 2F 62 FC | 	wrlong	local05, local06
0bf88     03 00 00 FF 
0bf8c     00 E4 05 F1 | 	add	objptr, ##1536
0bf90     F2 30 02 FB | 	rdlong	local06, objptr
0bf94     01 30 06 F1 | 	add	local06, #1
0bf98     F2 30 62 FC | 	wrlong	local06, objptr
0bf9c     13 00 00 FF 
0bfa0     38 E4 85 F1 | 	sub	objptr, ##9784
0bfa4     F2 2C 02 FB | 	rdlong	local04, objptr
0bfa8     03 2C 66 F0 | 	shl	local04, #3
0bfac     02 00 00 FF 
0bfb0     38 E4 85 F1 | 	sub	objptr, ##1080
0bfb4     F2 2C 02 F1 | 	add	local04, objptr
0bfb8     04 2C 06 F1 | 	add	local04, #4
0bfbc     16 2F 02 FB | 	rdlong	local05, local04
0bfc0     35 00 00 FF 
0bfc4     0C E4 85 F1 | 	sub	objptr, ##27148
0bfc8     DC FE 9F FD | 	jmp	#LR__0971
0bfcc                 | LR__0972
0bfcc                 | ' return 0  
0bfcc     00 FA 05 F6 | 	mov	result1, #0
0bfd0                 | LR__0973
0bfd0     A7 F0 03 F6 | 	mov	ptra, fp
0bfd4     B2 00 A0 FD | 	call	#popregs_
0bfd8                 | _expr_ret
0bfd8     2D 00 64 FD | 	ret
0bfdc                 | 
0bfdc                 | ' 
0bfdc                 | ' ' Second level operators : add, sub, logic
0bfdc                 | ' 
0bfdc                 | ' function addsub() as ulong
0bfdc                 | _addsub
0bfdc     07 4A 05 F6 | 	mov	COUNT_, #7
0bfe0     A8 00 A0 FD | 	call	#pushregs_
0bfe4                 | _addsub_enter
0bfe4     00 26 06 F6 | 	mov	local01, #0
0bfe8     60 01 B0 FD | 	call	#_muldiv
0bfec                 | ' 
0bfec                 | ' t3.result.uresult=0
0bfec                 | ' err=muldiv() : if err>0 then return err           			 
0bfec     01 FA 15 F2 | 	cmp	result1, #1 wc
0bff0     4C 01 90 3D |  if_ae	jmp	#LR__0982
0bff4     37 00 00 FF 
0bff8     44 E4 05 F1 | 	add	objptr, ##28228
0bffc     F2 2C 02 FB | 	rdlong	local04, objptr
0c000     03 2C 66 F0 | 	shl	local04, #3
0c004     02 00 00 FF 
0c008     38 E4 85 F1 | 	sub	objptr, ##1080
0c00c     F2 2C 02 F1 | 	add	local04, objptr
0c010     04 2C 06 F1 | 	add	local04, #4
0c014     16 2F 02 FB | 	rdlong	local05, local04
0c018                 | ' op = lparts(ct).token				 
0c018                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0c018     35 00 00 FF 
0c01c     0C E4 85 F1 | 	sub	objptr, ##27148
0c020                 | LR__0980
0c020     01 2E 0E F2 | 	cmp	local05, #1 wz
0c024     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0c028     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0c02c     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0c030     08 01 90 5D |  if_ne	jmp	#LR__0981
0c034     37 00 00 FF 
0c038     44 E4 05 F1 | 	add	objptr, ##28228
0c03c     F2 2C 02 FB | 	rdlong	local04, objptr
0c040     01 2C 06 F1 | 	add	local04, #1
0c044     F2 2C 62 FC | 	wrlong	local04, objptr
0c048     37 00 00 FF 
0c04c     44 E4 85 F1 | 	sub	objptr, ##28228
0c050     F8 00 B0 FD | 	call	#_muldiv
0c054                 | '   ct+=1
0c054                 | '   err=muldiv() : if err>0 then return err   
0c054     01 FA 15 F2 | 	cmp	result1, #1 wc
0c058     E4 00 90 3D |  if_ae	jmp	#LR__0982
0c05c     17 2B 02 F6 | 	mov	local03, local05
0c060     13 31 02 F6 | 	mov	local06, local01
0c064     14 33 02 F6 | 	mov	local07, local02
0c068     15 2F 02 F6 | 	mov	local05, local03
0c06c     4A 00 00 FF 
0c070     7C E4 05 F1 | 	add	objptr, ##38012
0c074     F2 2C 02 FB | 	rdlong	local04, objptr
0c078     16 FB 01 F6 | 	mov	result1, local04
0c07c     01 FA 65 F0 | 	shl	result1, #1
0c080     16 FB 01 F1 | 	add	result1, local04
0c084     02 FA 65 F0 | 	shl	result1, #2
0c088     03 00 00 FF 
0c08c     00 E4 85 F1 | 	sub	objptr, ##1536
0c090     F2 FA 01 F1 | 	add	result1, objptr
0c094     FD 30 62 FC | 	wrlong	local06, result1
0c098     03 00 00 FF 
0c09c     00 E4 05 F1 | 	add	objptr, ##1536
0c0a0     F2 30 02 FB | 	rdlong	local06, objptr
0c0a4     18 2D 02 F6 | 	mov	local04, local06
0c0a8     01 2C 66 F0 | 	shl	local04, #1
0c0ac     18 2D 02 F1 | 	add	local04, local06
0c0b0     02 2C 66 F0 | 	shl	local04, #2
0c0b4     03 00 00 FF 
0c0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0bc     F2 2C 02 F1 | 	add	local04, objptr
0c0c0     04 2C 06 F1 | 	add	local04, #4
0c0c4     16 33 62 FC | 	wrlong	local07, local04
0c0c8     03 00 00 FF 
0c0cc     00 E4 05 F1 | 	add	objptr, ##1536
0c0d0     F2 32 02 FB | 	rdlong	local07, objptr
0c0d4     19 31 02 F6 | 	mov	local06, local07
0c0d8     01 30 66 F0 | 	shl	local06, #1
0c0dc     19 31 02 F1 | 	add	local06, local07
0c0e0     02 30 66 F0 | 	shl	local06, #2
0c0e4     03 00 00 FF 
0c0e8     00 E4 85 F1 | 	sub	objptr, ##1536
0c0ec     F2 30 02 F1 | 	add	local06, objptr
0c0f0     08 30 06 F1 | 	add	local06, #8
0c0f4     18 2F 62 FC | 	wrlong	local05, local06
0c0f8     03 00 00 FF 
0c0fc     00 E4 05 F1 | 	add	objptr, ##1536
0c100     F2 30 02 FB | 	rdlong	local06, objptr
0c104     01 30 06 F1 | 	add	local06, #1
0c108     F2 30 62 FC | 	wrlong	local06, objptr
0c10c     13 00 00 FF 
0c110     38 E4 85 F1 | 	sub	objptr, ##9784
0c114     F2 2C 02 FB | 	rdlong	local04, objptr
0c118     03 2C 66 F0 | 	shl	local04, #3
0c11c     02 00 00 FF 
0c120     38 E4 85 F1 | 	sub	objptr, ##1080
0c124     F2 2C 02 F1 | 	add	local04, objptr
0c128     04 2C 06 F1 | 	add	local04, #4
0c12c     16 2F 02 FB | 	rdlong	local05, local04
0c130     35 00 00 FF 
0c134     0C E4 85 F1 | 	sub	objptr, ##27148
0c138     E4 FE 9F FD | 	jmp	#LR__0980
0c13c                 | LR__0981
0c13c                 | ' return 0
0c13c     00 FA 05 F6 | 	mov	result1, #0
0c140                 | LR__0982
0c140     A7 F0 03 F6 | 	mov	ptra, fp
0c144     B2 00 A0 FD | 	call	#popregs_
0c148                 | _addsub_ret
0c148     2D 00 64 FD | 	ret
0c14c                 | 
0c14c                 | ' 
0c14c                 | ' ' Third level operators : mul,div,shift,power
0c14c                 | ' 
0c14c                 | ' function muldiv() as ulong
0c14c                 | _muldiv
0c14c     07 4A 05 F6 | 	mov	COUNT_, #7
0c150     A8 00 A0 FD | 	call	#pushregs_
0c154                 | _muldiv_enter
0c154     00 26 06 F6 | 	mov	local01, #0
0c158     6C 01 B0 FD | 	call	#_getvalue
0c15c                 | ' 
0c15c                 | ' t3.result.uresult=0
0c15c                 | ' err=getvalue() : if err>0 then return err     
0c15c     01 FA 15 F2 | 	cmp	result1, #1 wc
0c160     58 01 90 3D |  if_ae	jmp	#LR__0992
0c164     37 00 00 FF 
0c168     44 E4 05 F1 | 	add	objptr, ##28228
0c16c     F2 2C 02 FB | 	rdlong	local04, objptr
0c170     03 2C 66 F0 | 	shl	local04, #3
0c174     02 00 00 FF 
0c178     38 E4 85 F1 | 	sub	objptr, ##1080
0c17c     F2 2C 02 F1 | 	add	local04, objptr
0c180     04 2C 06 F1 | 	add	local04, #4
0c184     16 2F 02 FB | 	rdlong	local05, local04
0c188                 | ' op = lparts(ct).token
0c188                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0c188     35 00 00 FF 
0c18c     0C E4 85 F1 | 	sub	objptr, ##27148
0c190                 | LR__0990
0c190     05 2E 0E F2 | 	cmp	local05, #5 wz
0c194     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0c198     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0c19c     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0c1a0     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0c1a4     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0c1a8     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0c1ac     08 01 90 5D |  if_ne	jmp	#LR__0991
0c1b0     37 00 00 FF 
0c1b4     44 E4 05 F1 | 	add	objptr, ##28228
0c1b8     F2 2C 02 FB | 	rdlong	local04, objptr
0c1bc     01 2C 06 F1 | 	add	local04, #1
0c1c0     F2 2C 62 FC | 	wrlong	local04, objptr
0c1c4     37 00 00 FF 
0c1c8     44 E4 85 F1 | 	sub	objptr, ##28228
0c1cc     F8 00 B0 FD | 	call	#_getvalue
0c1d0                 | '   ct+=1
0c1d0                 | '   err=getvalue() :if err>0 then return err   
0c1d0     01 FA 15 F2 | 	cmp	result1, #1 wc
0c1d4     E4 00 90 3D |  if_ae	jmp	#LR__0992
0c1d8     17 2B 02 F6 | 	mov	local03, local05
0c1dc     13 31 02 F6 | 	mov	local06, local01
0c1e0     14 33 02 F6 | 	mov	local07, local02
0c1e4     15 2F 02 F6 | 	mov	local05, local03
0c1e8     4A 00 00 FF 
0c1ec     7C E4 05 F1 | 	add	objptr, ##38012
0c1f0     F2 2C 02 FB | 	rdlong	local04, objptr
0c1f4     16 FB 01 F6 | 	mov	result1, local04
0c1f8     01 FA 65 F0 | 	shl	result1, #1
0c1fc     16 FB 01 F1 | 	add	result1, local04
0c200     02 FA 65 F0 | 	shl	result1, #2
0c204     03 00 00 FF 
0c208     00 E4 85 F1 | 	sub	objptr, ##1536
0c20c     F2 FA 01 F1 | 	add	result1, objptr
0c210     FD 30 62 FC | 	wrlong	local06, result1
0c214     03 00 00 FF 
0c218     00 E4 05 F1 | 	add	objptr, ##1536
0c21c     F2 30 02 FB | 	rdlong	local06, objptr
0c220     18 2D 02 F6 | 	mov	local04, local06
0c224     01 2C 66 F0 | 	shl	local04, #1
0c228     18 2D 02 F1 | 	add	local04, local06
0c22c     02 2C 66 F0 | 	shl	local04, #2
0c230     03 00 00 FF 
0c234     00 E4 85 F1 | 	sub	objptr, ##1536
0c238     F2 2C 02 F1 | 	add	local04, objptr
0c23c     04 2C 06 F1 | 	add	local04, #4
0c240     16 33 62 FC | 	wrlong	local07, local04
0c244     03 00 00 FF 
0c248     00 E4 05 F1 | 	add	objptr, ##1536
0c24c     F2 32 02 FB | 	rdlong	local07, objptr
0c250     19 31 02 F6 | 	mov	local06, local07
0c254     01 30 66 F0 | 	shl	local06, #1
0c258     19 31 02 F1 | 	add	local06, local07
0c25c     02 30 66 F0 | 	shl	local06, #2
0c260     03 00 00 FF 
0c264     00 E4 85 F1 | 	sub	objptr, ##1536
0c268     F2 30 02 F1 | 	add	local06, objptr
0c26c     08 30 06 F1 | 	add	local06, #8
0c270     18 2F 62 FC | 	wrlong	local05, local06
0c274     03 00 00 FF 
0c278     00 E4 05 F1 | 	add	objptr, ##1536
0c27c     F2 30 02 FB | 	rdlong	local06, objptr
0c280     01 30 06 F1 | 	add	local06, #1
0c284     F2 30 62 FC | 	wrlong	local06, objptr
0c288     13 00 00 FF 
0c28c     38 E4 85 F1 | 	sub	objptr, ##9784
0c290     F2 2C 02 FB | 	rdlong	local04, objptr
0c294     03 2C 66 F0 | 	shl	local04, #3
0c298     02 00 00 FF 
0c29c     38 E4 85 F1 | 	sub	objptr, ##1080
0c2a0     F2 2C 02 F1 | 	add	local04, objptr
0c2a4     04 2C 06 F1 | 	add	local04, #4
0c2a8     16 2F 02 FB | 	rdlong	local05, local04
0c2ac     35 00 00 FF 
0c2b0     0C E4 85 F1 | 	sub	objptr, ##27148
0c2b4     D8 FE 9F FD | 	jmp	#LR__0990
0c2b8                 | LR__0991
0c2b8                 | ' return 0
0c2b8     00 FA 05 F6 | 	mov	result1, #0
0c2bc                 | LR__0992
0c2bc     A7 F0 03 F6 | 	mov	ptra, fp
0c2c0     B2 00 A0 FD | 	call	#popregs_
0c2c4                 | _muldiv_ret
0c2c4     2D 00 64 FD | 	ret
0c2c8                 | 
0c2c8                 | ' 
0c2c8                 | ' ' Get a value for operations
0c2c8                 | ' 
0c2c8                 | ' function getvalue()  as ulong
0c2c8                 | _getvalue
0c2c8     0B 4A 05 F6 | 	mov	COUNT_, #11
0c2cc     A8 00 A0 FD | 	call	#pushregs_
0c2d0                 | _getvalue_enter
0c2d0     01 2C 06 F6 | 	mov	local04, #1
0c2d4     00 26 06 F6 | 	mov	local01, #0
0c2d8     1D 2A 06 F6 | 	mov	local03, #29
0c2dc     37 00 00 FF 
0c2e0     44 E4 05 F1 | 	add	objptr, ##28228
0c2e4     F2 16 02 FB | 	rdlong	arg03, objptr
0c2e8     03 16 66 F0 | 	shl	arg03, #3
0c2ec     02 00 00 FF 
0c2f0     38 E4 85 F1 | 	sub	objptr, ##1080
0c2f4     F2 16 02 F1 | 	add	arg03, objptr
0c2f8     04 16 06 F1 | 	add	arg03, #4
0c2fc     0B 2F 02 FB | 	rdlong	local05, arg03
0c300                 | ' 
0c300                 | ' m=1											' for negative numbers
0c300                 | ' t1.result.uresult=0: t1.result_type=result_uint
0c300                 | ' op=lparts(ct).token
0c300                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0c300     02 2E 0E F2 | 	cmp	local05, #2 wz
0c304     35 00 00 FF 
0c308     0C E4 85 F1 | 	sub	objptr, ##27148
0c30c     38 00 90 5D |  if_ne	jmp	#LR__1000
0c310     01 2C 66 F6 | 	neg	local04, #1
0c314     37 00 00 FF 
0c318     44 E4 05 F1 | 	add	objptr, ##28228
0c31c     F2 2E 02 FB | 	rdlong	local05, objptr
0c320     01 2E 06 F1 | 	add	local05, #1
0c324     F2 2E 62 FC | 	wrlong	local05, objptr
0c328     03 2E 66 F0 | 	shl	local05, #3
0c32c     02 00 00 FF 
0c330     38 E4 85 F1 | 	sub	objptr, ##1080
0c334     F2 2E 02 F1 | 	add	local05, objptr
0c338     04 2E 06 F1 | 	add	local05, #4
0c33c     17 2F 02 FB | 	rdlong	local05, local05
0c340     35 00 00 FF 
0c344     0C E4 85 F1 | 	sub	objptr, ##27148
0c348                 | LR__1000
0c348                 | ' select case op
0c348     01 00 00 FF 
0c34c     00 2E 0E F2 | 	cmp	local05, ##512 wz
0c350     44 00 90 AD |  if_e	jmp	#LR__1001
0c354     01 00 00 FF 
0c358     01 2E 0E F2 | 	cmp	local05, ##513 wz
0c35c     90 01 90 AD |  if_e	jmp	#LR__1004
0c360     01 00 00 FF 
0c364     02 2E 0E F2 | 	cmp	local05, ##514 wz
0c368     44 04 90 AD |  if_e	jmp	#LR__1011
0c36c     01 00 00 FF 
0c370     03 2E 0E F2 | 	cmp	local05, ##515 wz
0c374     A8 05 90 AD |  if_e	jmp	#LR__1014
0c378     2C 2E 0E F2 | 	cmp	local05, #44 wz
0c37c     78 07 90 AD |  if_e	jmp	#LR__1019
0c380     01 00 00 FF 
0c384     04 2E 0E F2 | 	cmp	local05, ##516 wz
0c388     70 08 90 AD |  if_e	jmp	#LR__1020
0c38c     15 2E 0E F2 | 	cmp	local05, #21 wz
0c390     98 08 90 AD |  if_e	jmp	#LR__1021
0c394     10 09 90 FD | 	jmp	#LR__1022
0c398                 | LR__1001
0c398                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0c398     01 2C 0E F2 | 	cmp	local04, #1 wz
0c39c     3C 00 90 5D |  if_ne	jmp	#LR__1002
0c3a0     37 00 00 FF 
0c3a4     44 E4 05 F1 | 	add	objptr, ##28228
0c3a8     F2 2E 02 FB | 	rdlong	local05, objptr
0c3ac     03 2E 66 F0 | 	shl	local05, #3
0c3b0     02 00 00 FF 
0c3b4     38 E4 85 F1 | 	sub	objptr, ##1080
0c3b8     F2 2E 02 F1 | 	add	local05, objptr
0c3bc     17 13 02 FB | 	rdlong	arg01, local05
0c3c0     00 14 06 F6 | 	mov	arg02, #0
0c3c4     35 00 00 FF 
0c3c8     0C E4 85 F1 | 	sub	objptr, ##27148
0c3cc     3C DA B1 FD | 	call	#__system____builtin_atoi
0c3d0     FD 2C 02 FD | 	qmul	local04, result1
0c3d4     18 26 62 FD | 	getqx	local01
0c3d8     1C 2A 06 F6 | 	mov	local03, #28
0c3dc                 | LR__1002
0c3dc                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0c3dc     FF FF 7F FF 
0c3e0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c3e4     3C 00 90 5D |  if_ne	jmp	#LR__1003
0c3e8     37 00 00 FF 
0c3ec     44 E4 05 F1 | 	add	objptr, ##28228
0c3f0     F2 2E 02 FB | 	rdlong	local05, objptr
0c3f4     03 2E 66 F0 | 	shl	local05, #3
0c3f8     02 00 00 FF 
0c3fc     38 E4 85 F1 | 	sub	objptr, ##1080
0c400     F2 2E 02 F1 | 	add	local05, objptr
0c404     17 13 02 FB | 	rdlong	arg01, local05
0c408     00 14 06 F6 | 	mov	arg02, #0
0c40c     35 00 00 FF 
0c410     0C E4 85 F1 | 	sub	objptr, ##27148
0c414     F4 D9 B1 FD | 	call	#__system____builtin_atoi
0c418     FD 2C 02 FD | 	qmul	local04, result1
0c41c     18 26 62 FD | 	getqx	local01
0c420     1C 2A 06 F6 | 	mov	local03, #28
0c424                 | LR__1003
0c424     13 31 02 F6 | 	mov	local06, local01
0c428     14 33 02 F6 | 	mov	local07, local02
0c42c     15 2F 02 F6 | 	mov	local05, local03
0c430     4A 00 00 FF 
0c434     7C E4 05 F1 | 	add	objptr, ##38012
0c438     F2 26 02 FB | 	rdlong	local01, objptr
0c43c     13 2D 02 F6 | 	mov	local04, local01
0c440     01 2C 66 F0 | 	shl	local04, #1
0c444     13 2D 02 F1 | 	add	local04, local01
0c448     02 2C 66 F0 | 	shl	local04, #2
0c44c     03 00 00 FF 
0c450     00 E4 85 F1 | 	sub	objptr, ##1536
0c454     F2 2C 02 F1 | 	add	local04, objptr
0c458     16 31 62 FC | 	wrlong	local06, local04
0c45c     03 00 00 FF 
0c460     00 E4 05 F1 | 	add	objptr, ##1536
0c464     F2 30 02 FB | 	rdlong	local06, objptr
0c468     18 27 02 F6 | 	mov	local01, local06
0c46c     01 26 66 F0 | 	shl	local01, #1
0c470     18 27 02 F1 | 	add	local01, local06
0c474     02 26 66 F0 | 	shl	local01, #2
0c478     03 00 00 FF 
0c47c     00 E4 85 F1 | 	sub	objptr, ##1536
0c480     F2 26 02 F1 | 	add	local01, objptr
0c484     04 26 06 F1 | 	add	local01, #4
0c488     13 33 62 FC | 	wrlong	local07, local01
0c48c     03 00 00 FF 
0c490     00 E4 05 F1 | 	add	objptr, ##1536
0c494     F2 32 02 FB | 	rdlong	local07, objptr
0c498     19 31 02 F6 | 	mov	local06, local07
0c49c     01 30 66 F0 | 	shl	local06, #1
0c4a0     19 31 02 F1 | 	add	local06, local07
0c4a4     02 30 66 F0 | 	shl	local06, #2
0c4a8     03 00 00 FF 
0c4ac     00 E4 85 F1 | 	sub	objptr, ##1536
0c4b0     F2 30 02 F1 | 	add	local06, objptr
0c4b4     08 30 06 F1 | 	add	local06, #8
0c4b8     18 2F 62 FC | 	wrlong	local05, local06
0c4bc     03 00 00 FF 
0c4c0     00 E4 05 F1 | 	add	objptr, ##1536
0c4c4     F2 30 02 FB | 	rdlong	local06, objptr
0c4c8     01 30 06 F1 | 	add	local06, #1
0c4cc     F2 30 62 FC | 	wrlong	local06, objptr
0c4d0     13 00 00 FF 
0c4d4     38 E4 85 F1 | 	sub	objptr, ##9784
0c4d8     F2 30 02 FB | 	rdlong	local06, objptr
0c4dc     01 30 06 F1 | 	add	local06, #1
0c4e0     F2 30 62 FC | 	wrlong	local06, objptr
0c4e4     37 00 00 FF 
0c4e8     44 E4 85 F1 | 	sub	objptr, ##28228
0c4ec     E4 07 90 FD | 	jmp	#LR__1023
0c4f0                 | LR__1004
0c4f0                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c4f0     37 00 00 FF 
0c4f4     44 E4 05 F1 | 	add	objptr, ##28228
0c4f8     F2 16 02 FB | 	rdlong	arg03, objptr
0c4fc     03 16 66 F0 | 	shl	arg03, #3
0c500     02 00 00 FF 
0c504     38 E4 85 F1 | 	sub	objptr, ##1080
0c508     F2 16 02 F1 | 	add	arg03, objptr
0c50c     0B 13 02 FB | 	rdlong	arg01, arg03
0c510     01 14 06 F6 | 	mov	arg02, #1
0c514     35 00 00 FF 
0c518     0C E4 85 F1 | 	sub	objptr, ##27148
0c51c     78 C4 B1 FD | 	call	#__system__Left_S
0c520     FD 12 02 F6 | 	mov	arg01, result1
0c524     B5 01 00 FF 
0c528     9D 15 06 F6 | 	mov	arg02, ##@LR__5829
0c52c     10 A4 B1 FD | 	call	#__system___string_cmp
0c530     00 FA 0D F2 | 	cmp	result1, #0 wz
0c534     94 00 90 5D |  if_ne	jmp	#LR__1007
0c538     37 00 00 FF 
0c53c     44 E4 05 F1 | 	add	objptr, ##28228
0c540     F2 32 02 FB | 	rdlong	local07, objptr
0c544     19 31 02 F6 | 	mov	local06, local07
0c548     03 30 66 F0 | 	shl	local06, #3
0c54c     02 00 00 FF 
0c550     38 E4 85 F1 | 	sub	objptr, ##1080
0c554     F2 30 02 F1 | 	add	local06, objptr
0c558     B5 01 00 FF 
0c55c     9F 2F 06 F6 | 	mov	local05, ##@LR__5830
0c560     03 32 66 F0 | 	shl	local07, #3
0c564     F2 32 02 F1 | 	add	local07, objptr
0c568     19 33 02 FB | 	rdlong	local07, local07
0c56c     02 00 00 FF 
0c570     38 E4 05 F1 | 	add	objptr, ##1080
0c574     F2 26 02 FB | 	rdlong	local01, objptr
0c578     03 26 66 F0 | 	shl	local01, #3
0c57c     02 00 00 FF 
0c580     38 E4 85 F1 | 	sub	objptr, ##1080
0c584     F2 26 02 F1 | 	add	local01, objptr
0c588     13 13 02 FB | 	rdlong	arg01, local01
0c58c     35 00 00 FF 
0c590     0C E4 85 F1 | 	sub	objptr, ##27148
0c594     09 35 02 F6 | 	mov	local08, arg01
0c598     97 06 48 FB | 	callpa	#(@LR__1006-@LR__1005)>>2,fcache_load_ptr_
0c59c                 | LR__1005
0c59c     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c5a0     01 34 06 51 |  if_ne	add	local08, #1
0c5a4     F4 FF 9F 5D |  if_ne	jmp	#LR__1005
0c5a8                 | LR__1006
0c5a8     09 35 82 F1 | 	sub	local08, arg01
0c5ac     1A 15 02 F6 | 	mov	arg02, local08
0c5b0     01 14 86 F1 | 	sub	arg02, #1
0c5b4     19 13 02 F6 | 	mov	arg01, local07
0c5b8     64 C4 B1 FD | 	call	#__system__Right_S
0c5bc     FD 14 02 F6 | 	mov	arg02, result1
0c5c0     17 13 02 F6 | 	mov	arg01, local05
0c5c4     AC A3 B1 FD | 	call	#__system___string_concat
0c5c8     18 FB 61 FC | 	wrlong	result1, local06
0c5cc                 | LR__1007
0c5cc                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0c5cc     37 00 00 FF 
0c5d0     44 E4 05 F1 | 	add	objptr, ##28228
0c5d4     F2 16 02 FB | 	rdlong	arg03, objptr
0c5d8     03 16 66 F0 | 	shl	arg03, #3
0c5dc     02 00 00 FF 
0c5e0     38 E4 85 F1 | 	sub	objptr, ##1080
0c5e4     F2 16 02 F1 | 	add	arg03, objptr
0c5e8     0B 13 02 FB | 	rdlong	arg01, arg03
0c5ec     01 14 06 F6 | 	mov	arg02, #1
0c5f0     35 00 00 FF 
0c5f4     0C E4 85 F1 | 	sub	objptr, ##27148
0c5f8     9C C3 B1 FD | 	call	#__system__Left_S
0c5fc     FD 12 02 F6 | 	mov	arg01, result1
0c600     B5 01 00 FF 
0c604     A2 15 06 F6 | 	mov	arg02, ##@LR__5831
0c608     34 A3 B1 FD | 	call	#__system___string_cmp
0c60c     00 FA 0D F2 | 	cmp	result1, #0 wz
0c610     94 00 90 5D |  if_ne	jmp	#LR__1010
0c614     37 00 00 FF 
0c618     44 E4 05 F1 | 	add	objptr, ##28228
0c61c     F2 32 02 FB | 	rdlong	local07, objptr
0c620     19 31 02 F6 | 	mov	local06, local07
0c624     03 30 66 F0 | 	shl	local06, #3
0c628     02 00 00 FF 
0c62c     38 E4 85 F1 | 	sub	objptr, ##1080
0c630     F2 30 02 F1 | 	add	local06, objptr
0c634     B5 01 00 FF 
0c638     A4 2F 06 F6 | 	mov	local05, ##@LR__5832
0c63c     03 32 66 F0 | 	shl	local07, #3
0c640     F2 32 02 F1 | 	add	local07, objptr
0c644     19 33 02 FB | 	rdlong	local07, local07
0c648     02 00 00 FF 
0c64c     38 E4 05 F1 | 	add	objptr, ##1080
0c650     F2 26 02 FB | 	rdlong	local01, objptr
0c654     03 26 66 F0 | 	shl	local01, #3
0c658     02 00 00 FF 
0c65c     38 E4 85 F1 | 	sub	objptr, ##1080
0c660     F2 26 02 F1 | 	add	local01, objptr
0c664     13 13 02 FB | 	rdlong	arg01, local01
0c668     35 00 00 FF 
0c66c     0C E4 85 F1 | 	sub	objptr, ##27148
0c670     09 35 02 F6 | 	mov	local08, arg01
0c674     97 06 48 FB | 	callpa	#(@LR__1009-@LR__1008)>>2,fcache_load_ptr_
0c678                 | LR__1008
0c678     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c67c     01 34 06 51 |  if_ne	add	local08, #1
0c680     F4 FF 9F 5D |  if_ne	jmp	#LR__1008
0c684                 | LR__1009
0c684     09 35 82 F1 | 	sub	local08, arg01
0c688     1A 15 02 F6 | 	mov	arg02, local08
0c68c     01 14 86 F1 | 	sub	arg02, #1
0c690     19 13 02 F6 | 	mov	arg01, local07
0c694     88 C3 B1 FD | 	call	#__system__Right_S
0c698     FD 14 02 F6 | 	mov	arg02, result1
0c69c     17 13 02 F6 | 	mov	arg01, local05
0c6a0     D0 A2 B1 FD | 	call	#__system___string_concat
0c6a4     18 FB 61 FC | 	wrlong	result1, local06
0c6a8                 | LR__1010
0c6a8     37 00 00 FF 
0c6ac     44 E4 05 F1 | 	add	objptr, ##28228
0c6b0     F2 30 02 FB | 	rdlong	local06, objptr
0c6b4     03 30 66 F0 | 	shl	local06, #3
0c6b8     02 00 00 FF 
0c6bc     38 E4 85 F1 | 	sub	objptr, ##1080
0c6c0     F2 30 02 F1 | 	add	local06, objptr
0c6c4     18 13 02 FB | 	rdlong	arg01, local06
0c6c8     00 14 06 F6 | 	mov	arg02, #0
0c6cc     35 00 00 FF 
0c6d0     0C E4 85 F1 | 	sub	objptr, ##27148
0c6d4     34 D7 B1 FD | 	call	#__system____builtin_atoi
0c6d8     FD 2C 02 FD | 	qmul	local04, result1
0c6dc     4A 00 00 FF 
0c6e0     7C E4 05 F1 | 	add	objptr, ##38012
0c6e4     F2 30 02 FB | 	rdlong	local06, objptr
0c6e8     18 37 02 F6 | 	mov	local09, local06
0c6ec     01 36 66 F0 | 	shl	local09, #1
0c6f0     18 37 02 F1 | 	add	local09, local06
0c6f4     02 36 66 F0 | 	shl	local09, #2
0c6f8     03 00 00 FF 
0c6fc     00 E4 85 F1 | 	sub	objptr, ##1536
0c700     F2 36 02 F1 | 	add	local09, objptr
0c704     03 00 00 FF 
0c708     00 E4 05 F1 | 	add	objptr, ##1536
0c70c     18 26 62 FD | 	getqx	local01
0c710     1C 2A 06 F6 | 	mov	local03, #28
0c714     13 31 02 F6 | 	mov	local06, local01
0c718     14 33 02 F6 | 	mov	local07, local02
0c71c     1B 31 62 FC | 	wrlong	local06, local09
0c720     15 37 02 F6 | 	mov	local09, local03
0c724     F2 30 02 FB | 	rdlong	local06, objptr
0c728     18 2F 02 F6 | 	mov	local05, local06
0c72c     01 2E 66 F0 | 	shl	local05, #1
0c730     18 2F 02 F1 | 	add	local05, local06
0c734     02 2E 66 F0 | 	shl	local05, #2
0c738     03 00 00 FF 
0c73c     00 E4 85 F1 | 	sub	objptr, ##1536
0c740     F2 2E 02 F1 | 	add	local05, objptr
0c744     04 2E 06 F1 | 	add	local05, #4
0c748     17 33 62 FC | 	wrlong	local07, local05
0c74c     03 00 00 FF 
0c750     00 E4 05 F1 | 	add	objptr, ##1536
0c754     F2 32 02 FB | 	rdlong	local07, objptr
0c758     19 31 02 F6 | 	mov	local06, local07
0c75c     01 30 66 F0 | 	shl	local06, #1
0c760     19 31 02 F1 | 	add	local06, local07
0c764     02 30 66 F0 | 	shl	local06, #2
0c768     03 00 00 FF 
0c76c     00 E4 85 F1 | 	sub	objptr, ##1536
0c770     F2 30 02 F1 | 	add	local06, objptr
0c774     08 30 06 F1 | 	add	local06, #8
0c778     18 37 62 FC | 	wrlong	local09, local06
0c77c     03 00 00 FF 
0c780     00 E4 05 F1 | 	add	objptr, ##1536
0c784     F2 30 02 FB | 	rdlong	local06, objptr
0c788     01 30 06 F1 | 	add	local06, #1
0c78c     F2 30 62 FC | 	wrlong	local06, objptr
0c790     13 00 00 FF 
0c794     38 E4 85 F1 | 	sub	objptr, ##9784
0c798     F2 30 02 FB | 	rdlong	local06, objptr
0c79c     01 30 06 F1 | 	add	local06, #1
0c7a0     F2 30 62 FC | 	wrlong	local06, objptr
0c7a4     37 00 00 FF 
0c7a8     44 E4 85 F1 | 	sub	objptr, ##28228
0c7ac     24 05 90 FD | 	jmp	#LR__1023
0c7b0                 | LR__1011
0c7b0                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0c7b0     01 2C 0E F2 | 	cmp	local04, #1 wz
0c7b4     48 00 90 5D |  if_ne	jmp	#LR__1012
0c7b8     00 C0 1F FF 
0c7bc     00 30 06 F6 | 	mov	local06, ##1065353216
0c7c0     37 00 00 FF 
0c7c4     44 E4 05 F1 | 	add	objptr, ##28228
0c7c8     F2 36 02 FB | 	rdlong	local09, objptr
0c7cc     03 36 66 F0 | 	shl	local09, #3
0c7d0     02 00 00 FF 
0c7d4     38 E4 85 F1 | 	sub	objptr, ##1080
0c7d8     F2 36 02 F1 | 	add	local09, objptr
0c7dc     1B 13 02 FB | 	rdlong	arg01, local09
0c7e0     35 00 00 FF 
0c7e4     0C E4 85 F1 | 	sub	objptr, ##27148
0c7e8     B4 D7 B1 FD | 	call	#__system____builtin_atof
0c7ec     FD 14 02 F6 | 	mov	arg02, result1
0c7f0     18 13 02 F6 | 	mov	arg01, local06
0c7f4     9C CF B1 FD | 	call	#__system___float_mul
0c7f8     FD 26 02 F6 | 	mov	local01, result1
0c7fc     1E 2A 06 F6 | 	mov	local03, #30
0c800                 | LR__1012
0c800                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0c800     FF FF 7F FF 
0c804     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0c808     48 00 90 5D |  if_ne	jmp	#LR__1013
0c80c     00 C0 5F FF 
0c810     00 30 06 F6 | 	mov	local06, ##-1082130432
0c814     37 00 00 FF 
0c818     44 E4 05 F1 | 	add	objptr, ##28228
0c81c     F2 36 02 FB | 	rdlong	local09, objptr
0c820     03 36 66 F0 | 	shl	local09, #3
0c824     02 00 00 FF 
0c828     38 E4 85 F1 | 	sub	objptr, ##1080
0c82c     F2 36 02 F1 | 	add	local09, objptr
0c830     1B 13 02 FB | 	rdlong	arg01, local09
0c834     35 00 00 FF 
0c838     0C E4 85 F1 | 	sub	objptr, ##27148
0c83c     60 D7 B1 FD | 	call	#__system____builtin_atof
0c840     FD 14 02 F6 | 	mov	arg02, result1
0c844     18 13 02 F6 | 	mov	arg01, local06
0c848     48 CF B1 FD | 	call	#__system___float_mul
0c84c     FD 26 02 F6 | 	mov	local01, result1
0c850     1E 2A 06 F6 | 	mov	local03, #30
0c854                 | LR__1013
0c854     13 31 02 F6 | 	mov	local06, local01
0c858     14 33 02 F6 | 	mov	local07, local02
0c85c     15 2F 02 F6 | 	mov	local05, local03
0c860     4A 00 00 FF 
0c864     7C E4 05 F1 | 	add	objptr, ##38012
0c868     F2 26 02 FB | 	rdlong	local01, objptr
0c86c     13 37 02 F6 | 	mov	local09, local01
0c870     01 36 66 F0 | 	shl	local09, #1
0c874     13 37 02 F1 | 	add	local09, local01
0c878     02 36 66 F0 | 	shl	local09, #2
0c87c     03 00 00 FF 
0c880     00 E4 85 F1 | 	sub	objptr, ##1536
0c884     F2 36 02 F1 | 	add	local09, objptr
0c888     1B 31 62 FC | 	wrlong	local06, local09
0c88c     03 00 00 FF 
0c890     00 E4 05 F1 | 	add	objptr, ##1536
0c894     F2 36 02 FB | 	rdlong	local09, objptr
0c898     1B 31 02 F6 | 	mov	local06, local09
0c89c     01 30 66 F0 | 	shl	local06, #1
0c8a0     1B 31 02 F1 | 	add	local06, local09
0c8a4     02 30 66 F0 | 	shl	local06, #2
0c8a8     03 00 00 FF 
0c8ac     00 E4 85 F1 | 	sub	objptr, ##1536
0c8b0     F2 30 02 F1 | 	add	local06, objptr
0c8b4     04 30 06 F1 | 	add	local06, #4
0c8b8     18 33 62 FC | 	wrlong	local07, local06
0c8bc     03 00 00 FF 
0c8c0     00 E4 05 F1 | 	add	objptr, ##1536
0c8c4     F2 36 02 FB | 	rdlong	local09, objptr
0c8c8     1B 33 02 F6 | 	mov	local07, local09
0c8cc     01 32 66 F0 | 	shl	local07, #1
0c8d0     1B 33 02 F1 | 	add	local07, local09
0c8d4     02 32 66 F0 | 	shl	local07, #2
0c8d8     03 00 00 FF 
0c8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0c8e0     F2 32 02 F1 | 	add	local07, objptr
0c8e4     08 32 06 F1 | 	add	local07, #8
0c8e8     19 2F 62 FC | 	wrlong	local05, local07
0c8ec     03 00 00 FF 
0c8f0     00 E4 05 F1 | 	add	objptr, ##1536
0c8f4     F2 30 02 FB | 	rdlong	local06, objptr
0c8f8     01 30 06 F1 | 	add	local06, #1
0c8fc     F2 30 62 FC | 	wrlong	local06, objptr
0c900     13 00 00 FF 
0c904     38 E4 85 F1 | 	sub	objptr, ##9784
0c908     F2 30 02 FB | 	rdlong	local06, objptr
0c90c     01 30 06 F1 | 	add	local06, #1
0c910     F2 30 62 FC | 	wrlong	local06, objptr
0c914     37 00 00 FF 
0c918     44 E4 85 F1 | 	sub	objptr, ##28228
0c91c     B4 03 90 FD | 	jmp	#LR__1023
0c920                 | LR__1014
0c920     37 00 00 FF 
0c924     44 E4 05 F1 | 	add	objptr, ##28228
0c928     F2 16 02 FB | 	rdlong	arg03, objptr
0c92c     03 16 66 F0 | 	shl	arg03, #3
0c930     02 00 00 FF 
0c934     38 E4 85 F1 | 	sub	objptr, ##1080
0c938     F2 16 02 F1 | 	add	arg03, objptr
0c93c     0B 13 02 FB | 	rdlong	arg01, arg03
0c940     35 00 00 FF 
0c944     0C E4 85 F1 | 	sub	objptr, ##27148
0c948     09 35 02 F6 | 	mov	local08, arg01
0c94c     97 06 48 FB | 	callpa	#(@LR__1016-@LR__1015)>>2,fcache_load_ptr_
0c950                 | LR__1015
0c950     1A FB C9 FA | 	rdbyte	result1, local08 wz
0c954     01 34 06 51 |  if_ne	add	local08, #1
0c958     F4 FF 9F 5D |  if_ne	jmp	#LR__1015
0c95c                 | LR__1016
0c95c     09 35 82 F1 | 	sub	local08, arg01
0c960     1A FB 01 F6 | 	mov	result1, local08
0c964     52 00 00 FF 
0c968     F0 E4 05 F1 | 	add	objptr, ##42224
0c96c     F2 FA 61 FC | 	wrlong	result1, objptr
0c970     58 E4 85 F1 | 	sub	objptr, #88
0c974     F2 12 02 FB | 	rdlong	arg01, objptr
0c978     FD 12 82 F1 | 	sub	arg01, result1
0c97c     04 12 86 F1 | 	sub	arg01, #4
0c980     03 12 26 F5 | 	andn	arg01, #3
0c984     F2 12 62 FC | 	wrlong	arg01, objptr
0c988     58 E4 05 F1 | 	add	objptr, #88
0c98c     F2 14 02 FB | 	rdlong	arg02, objptr
0c990     52 00 00 FF 
0c994     F0 E4 85 F1 | 	sub	objptr, ##42224
0c998     2C 67 B1 FD | 	call	#_pslpoke
0c99c                 | '     pslpoke memtop,l
0c99c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0c99c     01 38 06 F6 | 	mov	local10, #1
0c9a0     52 00 00 FF 
0c9a4     F0 E4 05 F1 | 	add	objptr, ##42224
0c9a8     F2 3A 02 FB | 	rdlong	local11, objptr
0c9ac     52 00 00 FF 
0c9b0     F0 E4 85 F1 | 	sub	objptr, ##42224
0c9b4     01 3A 06 F1 | 	add	local11, #1
0c9b8                 | LR__1017
0c9b8     1D 39 52 F2 | 	cmps	local10, local11 wc
0c9bc     5C 00 90 3D |  if_ae	jmp	#LR__1018
0c9c0     52 00 00 FF 
0c9c4     98 E4 05 F1 | 	add	objptr, ##42136
0c9c8     F2 32 02 FB | 	rdlong	local07, objptr
0c9cc     03 32 06 F1 | 	add	local07, #3
0c9d0     1C 33 02 F1 | 	add	local07, local10
0c9d4     1B 00 00 FF 
0c9d8     54 E4 85 F1 | 	sub	objptr, ##13908
0c9dc     F2 36 02 FB | 	rdlong	local09, objptr
0c9e0     03 36 66 F0 | 	shl	local09, #3
0c9e4     02 00 00 FF 
0c9e8     38 E4 85 F1 | 	sub	objptr, ##1080
0c9ec     F2 36 02 F1 | 	add	local09, objptr
0c9f0     1B 13 02 FB | 	rdlong	arg01, local09
0c9f4     1C 15 02 F6 | 	mov	arg02, local10
0c9f8     01 16 06 F6 | 	mov	arg03, #1
0c9fc     35 00 00 FF 
0ca00     0C E4 85 F1 | 	sub	objptr, ##27148
0ca04     A8 C0 B1 FD | 	call	#__system__Mid_S
0ca08     FD 14 C2 FA | 	rdbyte	arg02, result1
0ca0c     19 13 02 F6 | 	mov	arg01, local07
0ca10     44 67 B1 FD | 	call	#_pspoke
0ca14     01 38 06 F1 | 	add	local10, #1
0ca18     9C FF 9F FD | 	jmp	#LR__1017
0ca1c                 | LR__1018
0ca1c     52 00 00 FF 
0ca20     98 E4 05 F1 | 	add	objptr, ##42136
0ca24     F2 26 02 FB | 	rdlong	local01, objptr
0ca28     2B 2A 06 F6 | 	mov	local03, #43
0ca2c     13 31 02 F6 | 	mov	local06, local01
0ca30     14 33 02 F6 | 	mov	local07, local02
0ca34     15 3B 02 F6 | 	mov	local11, local03
0ca38     08 00 00 FF 
0ca3c     1C E4 85 F1 | 	sub	objptr, ##4124
0ca40     F2 38 02 FB | 	rdlong	local10, objptr
0ca44     1C 37 02 F6 | 	mov	local09, local10
0ca48     01 36 66 F0 | 	shl	local09, #1
0ca4c     1C 37 02 F1 | 	add	local09, local10
0ca50     02 36 66 F0 | 	shl	local09, #2
0ca54     03 00 00 FF 
0ca58     00 E4 85 F1 | 	sub	objptr, ##1536
0ca5c     F2 36 02 F1 | 	add	local09, objptr
0ca60     1B 31 62 FC | 	wrlong	local06, local09
0ca64     03 00 00 FF 
0ca68     00 E4 05 F1 | 	add	objptr, ##1536
0ca6c     F2 38 02 FB | 	rdlong	local10, objptr
0ca70     1C 37 02 F6 | 	mov	local09, local10
0ca74     01 36 66 F0 | 	shl	local09, #1
0ca78     1C 37 02 F1 | 	add	local09, local10
0ca7c     02 36 66 F0 | 	shl	local09, #2
0ca80     03 00 00 FF 
0ca84     00 E4 85 F1 | 	sub	objptr, ##1536
0ca88     F2 36 02 F1 | 	add	local09, objptr
0ca8c     04 36 06 F1 | 	add	local09, #4
0ca90     1B 33 62 FC | 	wrlong	local07, local09
0ca94     03 00 00 FF 
0ca98     00 E4 05 F1 | 	add	objptr, ##1536
0ca9c     F2 38 02 FB | 	rdlong	local10, objptr
0caa0     1C 37 02 F6 | 	mov	local09, local10
0caa4     01 36 66 F0 | 	shl	local09, #1
0caa8     1C 37 02 F1 | 	add	local09, local10
0caac     02 36 66 F0 | 	shl	local09, #2
0cab0     03 00 00 FF 
0cab4     00 E4 85 F1 | 	sub	objptr, ##1536
0cab8     F2 36 02 F1 | 	add	local09, objptr
0cabc     08 36 06 F1 | 	add	local09, #8
0cac0     1B 3B 62 FC | 	wrlong	local11, local09
0cac4     03 00 00 FF 
0cac8     00 E4 05 F1 | 	add	objptr, ##1536
0cacc     F2 30 02 FB | 	rdlong	local06, objptr
0cad0     01 30 06 F1 | 	add	local06, #1
0cad4     F2 30 62 FC | 	wrlong	local06, objptr
0cad8     13 00 00 FF 
0cadc     38 E4 85 F1 | 	sub	objptr, ##9784
0cae0     F2 30 02 FB | 	rdlong	local06, objptr
0cae4     01 30 06 F1 | 	add	local06, #1
0cae8     F2 30 62 FC | 	wrlong	local06, objptr
0caec     37 00 00 FF 
0caf0     44 E4 85 F1 | 	sub	objptr, ##28228
0caf4     DC 01 90 FD | 	jmp	#LR__1023
0caf8                 | LR__1019
0caf8     2C 2A 06 F6 | 	mov	local03, #44
0cafc     37 00 00 FF 
0cb00     44 E4 05 F1 | 	add	objptr, ##28228
0cb04     F2 30 02 FB | 	rdlong	local06, objptr
0cb08     03 30 66 F0 | 	shl	local06, #3
0cb0c     02 00 00 FF 
0cb10     38 E4 85 F1 | 	sub	objptr, ##1080
0cb14     F2 30 02 F1 | 	add	local06, objptr
0cb18     18 13 02 FB | 	rdlong	arg01, local06
0cb1c     00 14 06 F6 | 	mov	arg02, #0
0cb20     35 00 00 FF 
0cb24     0C E4 85 F1 | 	sub	objptr, ##27148
0cb28     E0 D2 B1 FD | 	call	#__system____builtin_atoi
0cb2c     FD 26 02 F6 | 	mov	local01, result1
0cb30     13 31 02 F6 | 	mov	local06, local01
0cb34     14 33 02 F6 | 	mov	local07, local02
0cb38     15 3B 02 F6 | 	mov	local11, local03
0cb3c     4A 00 00 FF 
0cb40     7C E4 05 F1 | 	add	objptr, ##38012
0cb44     F2 38 02 FB | 	rdlong	local10, objptr
0cb48     1C 37 02 F6 | 	mov	local09, local10
0cb4c     01 36 66 F0 | 	shl	local09, #1
0cb50     1C 37 02 F1 | 	add	local09, local10
0cb54     02 36 66 F0 | 	shl	local09, #2
0cb58     03 00 00 FF 
0cb5c     00 E4 85 F1 | 	sub	objptr, ##1536
0cb60     F2 36 02 F1 | 	add	local09, objptr
0cb64     1B 31 62 FC | 	wrlong	local06, local09
0cb68     03 00 00 FF 
0cb6c     00 E4 05 F1 | 	add	objptr, ##1536
0cb70     F2 38 02 FB | 	rdlong	local10, objptr
0cb74     1C 37 02 F6 | 	mov	local09, local10
0cb78     01 36 66 F0 | 	shl	local09, #1
0cb7c     1C 37 02 F1 | 	add	local09, local10
0cb80     02 36 66 F0 | 	shl	local09, #2
0cb84     03 00 00 FF 
0cb88     00 E4 85 F1 | 	sub	objptr, ##1536
0cb8c     F2 36 02 F1 | 	add	local09, objptr
0cb90     04 36 06 F1 | 	add	local09, #4
0cb94     1B 33 62 FC | 	wrlong	local07, local09
0cb98     03 00 00 FF 
0cb9c     00 E4 05 F1 | 	add	objptr, ##1536
0cba0     F2 38 02 FB | 	rdlong	local10, objptr
0cba4     1C 37 02 F6 | 	mov	local09, local10
0cba8     01 36 66 F0 | 	shl	local09, #1
0cbac     1C 37 02 F1 | 	add	local09, local10
0cbb0     02 36 66 F0 | 	shl	local09, #2
0cbb4     03 00 00 FF 
0cbb8     00 E4 85 F1 | 	sub	objptr, ##1536
0cbbc     F2 36 02 F1 | 	add	local09, objptr
0cbc0     08 36 06 F1 | 	add	local09, #8
0cbc4     1B 3B 62 FC | 	wrlong	local11, local09
0cbc8     03 00 00 FF 
0cbcc     00 E4 05 F1 | 	add	objptr, ##1536
0cbd0     F2 30 02 FB | 	rdlong	local06, objptr
0cbd4     01 30 06 F1 | 	add	local06, #1
0cbd8     F2 30 62 FC | 	wrlong	local06, objptr
0cbdc     13 00 00 FF 
0cbe0     38 E4 85 F1 | 	sub	objptr, ##9784
0cbe4     F2 30 02 FB | 	rdlong	local06, objptr
0cbe8     01 30 06 F1 | 	add	local06, #1
0cbec     F2 30 62 FC | 	wrlong	local06, objptr
0cbf0     37 00 00 FF 
0cbf4     44 E4 85 F1 | 	sub	objptr, ##28228
0cbf8     D8 00 90 FD | 	jmp	#LR__1023
0cbfc                 | LR__1020
0cbfc     16 13 02 F6 | 	mov	arg01, local04
0cc00     24 04 B0 FD | 	call	#_getvar
0cc04     37 00 00 FF 
0cc08     44 E4 05 F1 | 	add	objptr, ##28228
0cc0c     F2 30 02 FB | 	rdlong	local06, objptr
0cc10     01 30 06 F1 | 	add	local06, #1
0cc14     F2 30 62 FC | 	wrlong	local06, objptr
0cc18     37 00 00 FF 
0cc1c     44 E4 85 F1 | 	sub	objptr, ##28228
0cc20                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0cc20     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc24     B0 00 90 3D |  if_ae	jmp	#LR__1024
0cc28     A8 00 90 FD | 	jmp	#LR__1023
0cc2c                 | LR__1021
0cc2c     37 00 00 FF 
0cc30     44 E4 05 F1 | 	add	objptr, ##28228
0cc34     F2 30 02 FB | 	rdlong	local06, objptr
0cc38     01 30 06 F1 | 	add	local06, #1
0cc3c     F2 30 62 FC | 	wrlong	local06, objptr
0cc40     37 00 00 FF 
0cc44     44 E4 85 F1 | 	sub	objptr, ##28228
0cc48     20 F1 BF FD | 	call	#_expr
0cc4c                 | '     ct+=1
0cc4c                 | '     err=expr() : if err>0 then return err 
0cc4c     01 FA 55 F2 | 	cmps	result1, #1 wc
0cc50     84 00 90 3D |  if_ae	jmp	#LR__1024
0cc54                 | '     if lparts(ct).token=token_rpar then ct+=1
0cc54     37 00 00 FF 
0cc58     44 E4 05 F1 | 	add	objptr, ##28228
0cc5c     F2 3A 02 FB | 	rdlong	local11, objptr
0cc60     03 3A 66 F0 | 	shl	local11, #3
0cc64     02 00 00 FF 
0cc68     38 E4 85 F1 | 	sub	objptr, ##1080
0cc6c     F2 3A 02 F1 | 	add	local11, objptr
0cc70     04 3A 06 F1 | 	add	local11, #4
0cc74     1D 3B 02 FB | 	rdlong	local11, local11
0cc78     14 3A 0E F2 | 	cmp	local11, #20 wz
0cc7c     35 00 00 FF 
0cc80     0C E4 85 F1 | 	sub	objptr, ##27148
0cc84     4C 00 90 5D |  if_ne	jmp	#LR__1023
0cc88     37 00 00 FF 
0cc8c     44 E4 05 F1 | 	add	objptr, ##28228
0cc90     F2 30 02 FB | 	rdlong	local06, objptr
0cc94     01 30 06 F1 | 	add	local06, #1
0cc98     F2 30 62 FC | 	wrlong	local06, objptr
0cc9c     37 00 00 FF 
0cca0     44 E4 85 F1 | 	sub	objptr, ##28228
0cca4     2C 00 90 FD | 	jmp	#LR__1023
0cca8                 | LR__1022
0cca8     16 13 02 F6 | 	mov	arg01, local04
0ccac     34 00 B0 FD | 	call	#_getfun
0ccb0     37 00 00 FF 
0ccb4     44 E4 05 F1 | 	add	objptr, ##28228
0ccb8     F2 30 02 FB | 	rdlong	local06, objptr
0ccbc     01 30 06 F1 | 	add	local06, #1
0ccc0     F2 30 62 FC | 	wrlong	local06, objptr
0ccc4     37 00 00 FF 
0ccc8     44 E4 85 F1 | 	sub	objptr, ##28228
0cccc                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0cccc     01 FA 55 F2 | 	cmps	result1, #1 wc
0ccd0     04 00 90 3D |  if_ae	jmp	#LR__1024
0ccd4                 | LR__1023
0ccd4                 | ' return 0  
0ccd4     00 FA 05 F6 | 	mov	result1, #0
0ccd8                 | LR__1024
0ccd8     A7 F0 03 F6 | 	mov	ptra, fp
0ccdc     B2 00 A0 FD | 	call	#popregs_
0cce0                 | _getvalue_ret
0cce0     2D 00 64 FD | 	ret
0cce4                 | 
0cce4                 | ' 
0cce4                 | ' ' Get a function result 
0cce4                 | ' 
0cce4                 | ' function getfun(m as integer) as ulong
0cce4                 | _getfun
0cce4     0F 4A 05 F6 | 	mov	COUNT_, #15
0cce8     A8 00 A0 FD | 	call	#pushregs_
0ccec                 | _getfun_enter
0ccec     09 2D 02 F6 | 	mov	local04, arg01
0ccf0     37 00 00 FF 
0ccf4     44 E4 05 F1 | 	add	objptr, ##28228
0ccf8     F2 2E 02 FB | 	rdlong	local05, objptr
0ccfc     17 31 02 F6 | 	mov	local06, local05
0cd00     00 32 06 F6 | 	mov	local07, #0
0cd04                 | ' oldct=ct
0cd04                 | ' numpar=0
0cd04                 | ' if lparts(ct+1).token=token_lpar then
0cd04     01 2E 06 F1 | 	add	local05, #1
0cd08     03 2E 66 F0 | 	shl	local05, #3
0cd0c     02 00 00 FF 
0cd10     38 E4 85 F1 | 	sub	objptr, ##1080
0cd14     F2 2E 02 F1 | 	add	local05, objptr
0cd18     04 2E 06 F1 | 	add	local05, #4
0cd1c     17 2F 02 FB | 	rdlong	local05, local05
0cd20     15 2E 0E F2 | 	cmp	local05, #21 wz
0cd24     35 00 00 FF 
0cd28     0C E4 85 F1 | 	sub	objptr, ##27148
0cd2c     54 01 90 5D |  if_ne	jmp	#LR__1034
0cd30     37 00 00 FF 
0cd34     44 E4 05 F1 | 	add	objptr, ##28228
0cd38     F2 34 02 FB | 	rdlong	local08, objptr
0cd3c     01 34 06 F1 | 	add	local08, #1
0cd40     F2 34 62 FC | 	wrlong	local08, objptr
0cd44     37 00 00 FF 
0cd48     44 E4 85 F1 | 	sub	objptr, ##28228
0cd4c                 | '   ct+=1 											' omit this lpar, this is for expr list
0cd4c                 | '   do
0cd4c                 | LR__1030
0cd4c     37 00 00 FF 
0cd50     44 E4 05 F1 | 	add	objptr, ##28228
0cd54     F2 2E 02 FB | 	rdlong	local05, objptr
0cd58     01 2E 06 F1 | 	add	local05, #1
0cd5c     F2 2E 62 FC | 	wrlong	local05, objptr
0cd60                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0cd60                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0cd60     03 2E 66 F0 | 	shl	local05, #3
0cd64     02 00 00 FF 
0cd68     38 E4 85 F1 | 	sub	objptr, ##1080
0cd6c     F2 2E 02 F1 | 	add	local05, objptr
0cd70     04 2E 06 F1 | 	add	local05, #4
0cd74     17 35 02 FB | 	rdlong	local08, local05
0cd78     15 34 0E F2 | 	cmp	local08, #21 wz
0cd7c     35 00 00 FF 
0cd80     0C E4 85 F1 | 	sub	objptr, ##27148
0cd84     44 00 90 5D |  if_ne	jmp	#LR__1031
0cd88     37 00 00 FF 
0cd8c     44 E4 05 F1 | 	add	objptr, ##28228
0cd90     F2 34 02 FB | 	rdlong	local08, objptr
0cd94     01 34 06 F1 | 	add	local08, #1
0cd98     F2 34 62 FC | 	wrlong	local08, objptr
0cd9c     37 00 00 FF 
0cda0     44 E4 85 F1 | 	sub	objptr, ##28228
0cda4     C4 EF BF FD | 	call	#_expr
0cda8     FD 36 02 F6 | 	mov	local09, result1
0cdac     37 00 00 FF 
0cdb0     44 E4 05 F1 | 	add	objptr, ##28228
0cdb4     F2 34 02 FB | 	rdlong	local08, objptr
0cdb8     01 34 06 F1 | 	add	local08, #1
0cdbc     F2 34 62 FC | 	wrlong	local08, objptr
0cdc0     37 00 00 FF 
0cdc4     44 E4 85 F1 | 	sub	objptr, ##28228
0cdc8     08 00 90 FD | 	jmp	#LR__1032
0cdcc                 | LR__1031
0cdcc     9C EF BF FD | 	call	#_expr
0cdd0     FD 36 02 F6 | 	mov	local09, result1
0cdd4                 | LR__1032
0cdd4                 | '     if err>0 then return err
0cdd4     01 36 16 F2 | 	cmp	local09, #1 wc
0cdd8     1B FB 01 36 |  if_ae	mov	result1, local09
0cddc     3C 02 90 3D |  if_ae	jmp	#LR__1036
0cde0     01 32 06 F1 | 	add	local07, #1
0cde4     37 00 00 FF 
0cde8     44 E4 05 F1 | 	add	objptr, ##28228
0cdec     F2 2E 02 FB | 	rdlong	local05, objptr
0cdf0     03 2E 66 F0 | 	shl	local05, #3
0cdf4     02 00 00 FF 
0cdf8     38 E4 85 F1 | 	sub	objptr, ##1080
0cdfc     F2 2E 02 F1 | 	add	local05, objptr
0ce00     04 2E 06 F1 | 	add	local05, #4
0ce04     17 37 02 FB | 	rdlong	local09, local05
0ce08     14 36 0E F2 | 	cmp	local09, #20 wz
0ce0c     35 00 00 FF 
0ce10     0C E4 85 F1 | 	sub	objptr, ##27148
0ce14     34 00 90 AD |  if_e	jmp	#LR__1033
0ce18     37 00 00 FF 
0ce1c     44 E4 05 F1 | 	add	objptr, ##28228
0ce20     F2 36 02 FB | 	rdlong	local09, objptr
0ce24     03 36 66 F0 | 	shl	local09, #3
0ce28     02 00 00 FF 
0ce2c     38 E4 85 F1 | 	sub	objptr, ##1080
0ce30     F2 36 02 F1 | 	add	local09, objptr
0ce34     04 36 06 F1 | 	add	local09, #4
0ce38     1B 37 02 FB | 	rdlong	local09, local09
0ce3c     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce40     35 00 00 FF 
0ce44     0C E4 85 F1 | 	sub	objptr, ##27148
0ce48     00 FF 9F 5D |  if_ne	jmp	#LR__1030
0ce4c                 | LR__1033
0ce4c                 | '   if lparts(ct).token=token_end then return 14
0ce4c     37 00 00 FF 
0ce50     44 E4 05 F1 | 	add	objptr, ##28228
0ce54     F2 2E 02 FB | 	rdlong	local05, objptr
0ce58     03 2E 66 F0 | 	shl	local05, #3
0ce5c     02 00 00 FF 
0ce60     38 E4 85 F1 | 	sub	objptr, ##1080
0ce64     F2 2E 02 F1 | 	add	local05, objptr
0ce68     04 2E 06 F1 | 	add	local05, #4
0ce6c     17 37 02 FB | 	rdlong	local09, local05
0ce70     FE 37 0E F2 | 	cmp	local09, #510 wz
0ce74     35 00 00 FF 
0ce78     0C E4 85 F1 | 	sub	objptr, ##27148
0ce7c     0E FA 05 A6 |  if_e	mov	result1, #14
0ce80     98 01 90 AD |  if_e	jmp	#LR__1036
0ce84                 | LR__1034
0ce84     19 27 02 F6 | 	mov	local01, local07
0ce88     03 30 66 F0 | 	shl	local06, #3
0ce8c     35 00 00 FF 
0ce90     0C E4 05 F1 | 	add	objptr, ##27148
0ce94     F2 30 02 F1 | 	add	local06, objptr
0ce98     04 30 06 F1 | 	add	local06, #4
0ce9c     18 2B 02 FB | 	rdlong	local03, local06
0cea0     13 35 02 F6 | 	mov	local08, local01
0cea4     14 39 02 F6 | 	mov	local10, local02
0cea8     15 3B 02 F6 | 	mov	local11, local03
0ceac     15 00 00 FF 
0ceb0     70 E4 05 F1 | 	add	objptr, ##10864
0ceb4     F2 3C 02 FB | 	rdlong	local12, objptr
0ceb8     1E 3F 02 F6 | 	mov	local13, local12
0cebc     01 3E 66 F0 | 	shl	local13, #1
0cec0     1E 3F 02 F1 | 	add	local13, local12
0cec4     02 3E 66 F0 | 	shl	local13, #2
0cec8     03 00 00 FF 
0cecc     00 E4 85 F1 | 	sub	objptr, ##1536
0ced0     F2 3E 02 F1 | 	add	local13, objptr
0ced4     1F 35 62 FC | 	wrlong	local08, local13
0ced8     03 00 00 FF 
0cedc     00 E4 05 F1 | 	add	objptr, ##1536
0cee0     F2 34 02 FB | 	rdlong	local08, objptr
0cee4     1A 41 02 F6 | 	mov	local14, local08
0cee8     01 40 66 F0 | 	shl	local14, #1
0ceec     1A 41 02 F1 | 	add	local14, local08
0cef0     02 40 66 F0 | 	shl	local14, #2
0cef4     03 00 00 FF 
0cef8     00 E4 85 F1 | 	sub	objptr, ##1536
0cefc     F2 40 02 F1 | 	add	local14, objptr
0cf00     04 40 06 F1 | 	add	local14, #4
0cf04     20 39 62 FC | 	wrlong	local10, local14
0cf08     03 00 00 FF 
0cf0c     00 E4 05 F1 | 	add	objptr, ##1536
0cf10     F2 34 02 FB | 	rdlong	local08, objptr
0cf14     1A 43 02 F6 | 	mov	local15, local08
0cf18     01 42 66 F0 | 	shl	local15, #1
0cf1c     1A 43 02 F1 | 	add	local15, local08
0cf20     02 42 66 F0 | 	shl	local15, #2
0cf24     03 00 00 FF 
0cf28     00 E4 85 F1 | 	sub	objptr, ##1536
0cf2c     F2 42 02 F1 | 	add	local15, objptr
0cf30     08 42 06 F1 | 	add	local15, #8
0cf34     21 3B 62 FC | 	wrlong	local11, local15
0cf38     03 00 00 FF 
0cf3c     00 E4 05 F1 | 	add	objptr, ##1536
0cf40     F2 34 02 FB | 	rdlong	local08, objptr
0cf44     01 34 06 F1 | 	add	local08, #1
0cf48     F2 34 62 FC | 	wrlong	local08, objptr
0cf4c     4A 00 00 FF 
0cf50     7C E4 85 F1 | 	sub	objptr, ##38012
0cf54                 | ' t2.result.uresult=numpar
0cf54                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0cf54                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0cf54                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0cf54     FF FF 7F FF 
0cf58     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0cf5c     B8 00 90 5D |  if_ne	jmp	#LR__1035
0cf60     15 2A 06 F6 | 	mov	local03, #21
0cf64     13 35 02 F6 | 	mov	local08, local01
0cf68     14 39 02 F6 | 	mov	local10, local02
0cf6c     15 3B 02 F6 | 	mov	local11, local03
0cf70     4A 00 00 FF 
0cf74     7C E4 05 F1 | 	add	objptr, ##38012
0cf78     F2 3C 02 FB | 	rdlong	local12, objptr
0cf7c     1E 3F 02 F6 | 	mov	local13, local12
0cf80     01 3E 66 F0 | 	shl	local13, #1
0cf84     1E 3F 02 F1 | 	add	local13, local12
0cf88     02 3E 66 F0 | 	shl	local13, #2
0cf8c     03 00 00 FF 
0cf90     00 E4 85 F1 | 	sub	objptr, ##1536
0cf94     F2 3E 02 F1 | 	add	local13, objptr
0cf98     1F 35 62 FC | 	wrlong	local08, local13
0cf9c     03 00 00 FF 
0cfa0     00 E4 05 F1 | 	add	objptr, ##1536
0cfa4     F2 42 02 FB | 	rdlong	local15, objptr
0cfa8     21 41 02 F6 | 	mov	local14, local15
0cfac     01 40 66 F0 | 	shl	local14, #1
0cfb0     21 41 02 F1 | 	add	local14, local15
0cfb4     02 40 66 F0 | 	shl	local14, #2
0cfb8     03 00 00 FF 
0cfbc     00 E4 85 F1 | 	sub	objptr, ##1536
0cfc0     F2 40 02 F1 | 	add	local14, objptr
0cfc4     04 40 06 F1 | 	add	local14, #4
0cfc8     20 39 62 FC | 	wrlong	local10, local14
0cfcc     03 00 00 FF 
0cfd0     00 E4 05 F1 | 	add	objptr, ##1536
0cfd4     F2 40 02 FB | 	rdlong	local14, objptr
0cfd8     20 43 02 F6 | 	mov	local15, local14
0cfdc     01 42 66 F0 | 	shl	local15, #1
0cfe0     20 43 02 F1 | 	add	local15, local14
0cfe4     02 42 66 F0 | 	shl	local15, #2
0cfe8     03 00 00 FF 
0cfec     00 E4 85 F1 | 	sub	objptr, ##1536
0cff0     F2 42 02 F1 | 	add	local15, objptr
0cff4     08 42 06 F1 | 	add	local15, #8
0cff8     21 3B 62 FC | 	wrlong	local11, local15
0cffc     03 00 00 FF 
0d000     00 E4 05 F1 | 	add	objptr, ##1536
0d004     F2 34 02 FB | 	rdlong	local08, objptr
0d008     01 34 06 F1 | 	add	local08, #1
0d00c     F2 34 62 FC | 	wrlong	local08, objptr
0d010     4A 00 00 FF 
0d014     7C E4 85 F1 | 	sub	objptr, ##38012
0d018                 | LR__1035
0d018                 | ' return 0
0d018     00 FA 05 F6 | 	mov	result1, #0
0d01c                 | LR__1036
0d01c     A7 F0 03 F6 | 	mov	ptra, fp
0d020     B2 00 A0 FD | 	call	#popregs_
0d024                 | _getfun_ret
0d024     2D 00 64 FD | 	ret
0d028                 | 
0d028                 | '   
0d028                 | '   
0d028                 | ' function getvar(m as integer) as ulong
0d028                 | _getvar
0d028     11 4A 05 F6 | 	mov	COUNT_, #17
0d02c     A8 00 A0 FD | 	call	#pushregs_
0d030                 | _getvar_enter
0d030     09 2D 02 F6 | 	mov	local04, arg01
0d034     37 00 00 FF 
0d038     44 E4 05 F1 | 	add	objptr, ##28228
0d03c     F2 2E 02 FB | 	rdlong	local05, objptr
0d040     03 2E 66 F0 | 	shl	local05, #3
0d044     02 00 00 FF 
0d048     38 E4 85 F1 | 	sub	objptr, ##1080
0d04c     F2 2E 02 F1 | 	add	local05, objptr
0d050     17 31 02 FB | 	rdlong	local06, local05
0d054     01 32 66 F6 | 	neg	local07, #1
0d058                 | ' 
0d058                 | ' varname$=lparts(ct).part$
0d058                 | ' j=-1
0d058                 | ' 
0d058                 | ' for i=0 to varnum-1
0d058     00 34 06 F6 | 	mov	local08, #0
0d05c     04 E4 85 F1 | 	sub	objptr, #4
0d060     F2 36 02 FB | 	rdlong	local09, objptr
0d064     35 00 00 FF 
0d068     08 E4 85 F1 | 	sub	objptr, ##27144
0d06c                 | LR__1040
0d06c     1B 35 52 F2 | 	cmps	local08, local09 wc
0d070     38 00 90 3D |  if_ae	jmp	#LR__1041
0d074                 | '   if variables(i).name=varname$ then j=i : exit
0d074     1A 2F 02 F6 | 	mov	local05, local08
0d078     04 2E 66 F0 | 	shl	local05, #4
0d07c     14 00 00 FF 
0d080     F8 E5 05 F1 | 	add	objptr, ##10744
0d084     F2 2E 02 F1 | 	add	local05, objptr
0d088     17 13 02 FB | 	rdlong	arg01, local05
0d08c     18 15 02 F6 | 	mov	arg02, local06
0d090     14 00 00 FF 
0d094     F8 E5 85 F1 | 	sub	objptr, ##10744
0d098     A4 98 B1 FD | 	call	#__system___string_cmp
0d09c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0a0     1A 33 02 A6 |  if_e	mov	local07, local08
0d0a4     01 34 06 51 |  if_ne	add	local08, #1
0d0a8     C0 FF 9F 5D |  if_ne	jmp	#LR__1040
0d0ac                 | LR__1041
0d0ac                 | ' if  j=-1 andalso varnum<maxvars then   
0d0ac     FF FF 7F FF 
0d0b0     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0d0b4     A8 00 90 5D |  if_ne	jmp	#LR__1042
0d0b8     35 00 00 FF 
0d0bc     08 E4 05 F1 | 	add	objptr, ##27144
0d0c0     F2 36 02 FB | 	rdlong	local09, objptr
0d0c4     35 00 00 FF 
0d0c8     08 E4 85 F1 | 	sub	objptr, ##27144
0d0cc     02 00 00 FF 
0d0d0     00 36 56 F2 | 	cmps	local09, ##1024 wc
0d0d4     88 00 90 3D |  if_ae	jmp	#LR__1042
0d0d8     35 00 00 FF 
0d0dc     08 E4 05 F1 | 	add	objptr, ##27144
0d0e0     F2 2E 02 FB | 	rdlong	local05, objptr
0d0e4     04 2E 66 F0 | 	shl	local05, #4
0d0e8     20 00 00 FF 
0d0ec     10 E4 85 F1 | 	sub	objptr, ##16400
0d0f0     F2 2E 02 F1 | 	add	local05, objptr
0d0f4     17 31 62 FC | 	wrlong	local06, local05
0d0f8     20 00 00 FF 
0d0fc     10 E4 05 F1 | 	add	objptr, ##16400
0d100     F2 2E 02 FB | 	rdlong	local05, objptr
0d104     04 2E 66 F0 | 	shl	local05, #4
0d108     20 00 00 FF 
0d10c     10 E4 85 F1 | 	sub	objptr, ##16400
0d110     F2 2E 02 F1 | 	add	local05, objptr
0d114     04 2E 06 F1 | 	add	local05, #4
0d118     17 01 68 FC | 	wrlong	#0, local05
0d11c     20 00 00 FF 
0d120     10 E4 05 F1 | 	add	objptr, ##16400
0d124     F2 2E 02 FB | 	rdlong	local05, objptr
0d128     04 2E 66 F0 | 	shl	local05, #4
0d12c     20 00 00 FF 
0d130     10 E4 85 F1 | 	sub	objptr, ##16400
0d134     F2 2E 02 F1 | 	add	local05, objptr
0d138     0C 2E 06 F1 | 	add	local05, #12
0d13c     17 39 68 FC | 	wrlong	#28, local05
0d140     20 00 00 FF 
0d144     10 E4 05 F1 | 	add	objptr, ##16400
0d148     F2 36 02 FB | 	rdlong	local09, objptr
0d14c     1B 33 02 F6 | 	mov	local07, local09
0d150     01 36 06 F1 | 	add	local09, #1
0d154     F2 36 62 FC | 	wrlong	local09, objptr
0d158     35 00 00 FF 
0d15c     08 E4 85 F1 | 	sub	objptr, ##27144
0d160                 | LR__1042
0d160     00 36 06 F6 | 	mov	local09, #0
0d164                 | ' numpar=0
0d164                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0d164     37 00 00 FF 
0d168     44 E4 05 F1 | 	add	objptr, ##28228
0d16c     F2 2E 02 FB | 	rdlong	local05, objptr
0d170     01 2E 06 F1 | 	add	local05, #1
0d174     03 2E 66 F0 | 	shl	local05, #3
0d178     02 00 00 FF 
0d17c     38 E4 85 F1 | 	sub	objptr, ##1080
0d180     F2 2E 02 F1 | 	add	local05, objptr
0d184     04 2E 06 F1 | 	add	local05, #4
0d188     17 35 02 FB | 	rdlong	local08, local05
0d18c     15 34 0E F2 | 	cmp	local08, #21 wz
0d190     35 00 00 FF 
0d194     0C E4 85 F1 | 	sub	objptr, ##27148
0d198     54 01 90 5D |  if_ne	jmp	#LR__1047
0d19c     37 00 00 FF 
0d1a0     44 E4 05 F1 | 	add	objptr, ##28228
0d1a4     F2 38 02 FB | 	rdlong	local10, objptr
0d1a8     01 38 06 F1 | 	add	local10, #1
0d1ac     F2 38 62 FC | 	wrlong	local10, objptr
0d1b0     37 00 00 FF 
0d1b4     44 E4 85 F1 | 	sub	objptr, ##28228
0d1b8                 | '   ct+=1 											' omit this lpar, this is for expr list
0d1b8                 | '   do
0d1b8                 | LR__1043
0d1b8     37 00 00 FF 
0d1bc     44 E4 05 F1 | 	add	objptr, ##28228
0d1c0     F2 2E 02 FB | 	rdlong	local05, objptr
0d1c4     01 2E 06 F1 | 	add	local05, #1
0d1c8     F2 2E 62 FC | 	wrlong	local05, objptr
0d1cc                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0d1cc                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0d1cc     03 2E 66 F0 | 	shl	local05, #3
0d1d0     02 00 00 FF 
0d1d4     38 E4 85 F1 | 	sub	objptr, ##1080
0d1d8     F2 2E 02 F1 | 	add	local05, objptr
0d1dc     04 2E 06 F1 | 	add	local05, #4
0d1e0     17 39 02 FB | 	rdlong	local10, local05
0d1e4     15 38 0E F2 | 	cmp	local10, #21 wz
0d1e8     35 00 00 FF 
0d1ec     0C E4 85 F1 | 	sub	objptr, ##27148
0d1f0     44 00 90 5D |  if_ne	jmp	#LR__1044
0d1f4     37 00 00 FF 
0d1f8     44 E4 05 F1 | 	add	objptr, ##28228
0d1fc     F2 38 02 FB | 	rdlong	local10, objptr
0d200     01 38 06 F1 | 	add	local10, #1
0d204     F2 38 62 FC | 	wrlong	local10, objptr
0d208     37 00 00 FF 
0d20c     44 E4 85 F1 | 	sub	objptr, ##28228
0d210     58 EB BF FD | 	call	#_expr
0d214     FD 3A 02 F6 | 	mov	local11, result1
0d218     37 00 00 FF 
0d21c     44 E4 05 F1 | 	add	objptr, ##28228
0d220     F2 38 02 FB | 	rdlong	local10, objptr
0d224     01 38 06 F1 | 	add	local10, #1
0d228     F2 38 62 FC | 	wrlong	local10, objptr
0d22c     37 00 00 FF 
0d230     44 E4 85 F1 | 	sub	objptr, ##28228
0d234     08 00 90 FD | 	jmp	#LR__1045
0d238                 | LR__1044
0d238     30 EB BF FD | 	call	#_expr
0d23c     FD 3A 02 F6 | 	mov	local11, result1
0d240                 | LR__1045
0d240                 | '     if err>0 then return err
0d240     01 3A 56 F2 | 	cmps	local11, #1 wc
0d244     1D FB 01 36 |  if_ae	mov	result1, local11
0d248     2C 02 90 3D |  if_ae	jmp	#LR__1049
0d24c     01 36 06 F1 | 	add	local09, #1
0d250     37 00 00 FF 
0d254     44 E4 05 F1 | 	add	objptr, ##28228
0d258     F2 2E 02 FB | 	rdlong	local05, objptr
0d25c     03 2E 66 F0 | 	shl	local05, #3
0d260     02 00 00 FF 
0d264     38 E4 85 F1 | 	sub	objptr, ##1080
0d268     F2 2E 02 F1 | 	add	local05, objptr
0d26c     04 2E 06 F1 | 	add	local05, #4
0d270     17 3B 02 FB | 	rdlong	local11, local05
0d274     14 3A 0E F2 | 	cmp	local11, #20 wz
0d278     35 00 00 FF 
0d27c     0C E4 85 F1 | 	sub	objptr, ##27148
0d280     34 00 90 AD |  if_e	jmp	#LR__1046
0d284     37 00 00 FF 
0d288     44 E4 05 F1 | 	add	objptr, ##28228
0d28c     F2 3A 02 FB | 	rdlong	local11, objptr
0d290     03 3A 66 F0 | 	shl	local11, #3
0d294     02 00 00 FF 
0d298     38 E4 85 F1 | 	sub	objptr, ##1080
0d29c     F2 3A 02 F1 | 	add	local11, objptr
0d2a0     04 3A 06 F1 | 	add	local11, #4
0d2a4     1D 3B 02 FB | 	rdlong	local11, local11
0d2a8     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d2ac     35 00 00 FF 
0d2b0     0C E4 85 F1 | 	sub	objptr, ##27148
0d2b4     00 FF 9F 5D |  if_ne	jmp	#LR__1043
0d2b8                 | LR__1046
0d2b8                 | '     if lparts(ct).token=token_end then return 14
0d2b8     37 00 00 FF 
0d2bc     44 E4 05 F1 | 	add	objptr, ##28228
0d2c0     F2 2E 02 FB | 	rdlong	local05, objptr
0d2c4     03 2E 66 F0 | 	shl	local05, #3
0d2c8     02 00 00 FF 
0d2cc     38 E4 85 F1 | 	sub	objptr, ##1080
0d2d0     F2 2E 02 F1 | 	add	local05, objptr
0d2d4     04 2E 06 F1 | 	add	local05, #4
0d2d8     17 3B 02 FB | 	rdlong	local11, local05
0d2dc     FE 3B 0E F2 | 	cmp	local11, #510 wz
0d2e0     35 00 00 FF 
0d2e4     0C E4 85 F1 | 	sub	objptr, ##27148
0d2e8     0E FA 05 A6 |  if_e	mov	result1, #14
0d2ec     88 01 90 AD |  if_e	jmp	#LR__1049
0d2f0                 | LR__1047
0d2f0     1B 29 02 F6 | 	mov	local02, local09
0d2f4     11 2A 06 F6 | 	mov	local03, #17
0d2f8     19 27 02 F6 | 	mov	local01, local07
0d2fc     13 39 02 F6 | 	mov	local10, local01
0d300     14 3D 02 F6 | 	mov	local12, local02
0d304     15 3F 02 F6 | 	mov	local13, local03
0d308     4A 00 00 FF 
0d30c     7C E4 05 F1 | 	add	objptr, ##38012
0d310     F2 40 02 FB | 	rdlong	local14, objptr
0d314     20 43 02 F6 | 	mov	local15, local14
0d318     01 42 66 F0 | 	shl	local15, #1
0d31c     20 43 02 F1 | 	add	local15, local14
0d320     02 42 66 F0 | 	shl	local15, #2
0d324     03 00 00 FF 
0d328     00 E4 85 F1 | 	sub	objptr, ##1536
0d32c     F2 42 02 F1 | 	add	local15, objptr
0d330     21 39 62 FC | 	wrlong	local10, local15
0d334     03 00 00 FF 
0d338     00 E4 05 F1 | 	add	objptr, ##1536
0d33c     F2 38 02 FB | 	rdlong	local10, objptr
0d340     1C 45 02 F6 | 	mov	local16, local10
0d344     01 44 66 F0 | 	shl	local16, #1
0d348     1C 45 02 F1 | 	add	local16, local10
0d34c     02 44 66 F0 | 	shl	local16, #2
0d350     03 00 00 FF 
0d354     00 E4 85 F1 | 	sub	objptr, ##1536
0d358     F2 44 02 F1 | 	add	local16, objptr
0d35c     04 44 06 F1 | 	add	local16, #4
0d360     22 3D 62 FC | 	wrlong	local12, local16
0d364     03 00 00 FF 
0d368     00 E4 05 F1 | 	add	objptr, ##1536
0d36c     F2 38 02 FB | 	rdlong	local10, objptr
0d370     1C 47 02 F6 | 	mov	local17, local10
0d374     01 46 66 F0 | 	shl	local17, #1
0d378     1C 47 02 F1 | 	add	local17, local10
0d37c     02 46 66 F0 | 	shl	local17, #2
0d380     03 00 00 FF 
0d384     00 E4 85 F1 | 	sub	objptr, ##1536
0d388     F2 46 02 F1 | 	add	local17, objptr
0d38c     08 46 06 F1 | 	add	local17, #8
0d390     23 3F 62 FC | 	wrlong	local13, local17
0d394     03 00 00 FF 
0d398     00 E4 05 F1 | 	add	objptr, ##1536
0d39c     F2 38 02 FB | 	rdlong	local10, objptr
0d3a0     01 38 06 F1 | 	add	local10, #1
0d3a4     F2 38 62 FC | 	wrlong	local10, objptr
0d3a8     4A 00 00 FF 
0d3ac     7C E4 85 F1 | 	sub	objptr, ##38012
0d3b0                 | ' t2.result.twowords(1)=numpar
0d3b0                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0d3b0                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0d3b0                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0d3b0     FF FF 7F FF 
0d3b4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0d3b8     B8 00 90 5D |  if_ne	jmp	#LR__1048
0d3bc     15 2A 06 F6 | 	mov	local03, #21
0d3c0     13 39 02 F6 | 	mov	local10, local01
0d3c4     14 3D 02 F6 | 	mov	local12, local02
0d3c8     15 3F 02 F6 | 	mov	local13, local03
0d3cc     4A 00 00 FF 
0d3d0     7C E4 05 F1 | 	add	objptr, ##38012
0d3d4     F2 40 02 FB | 	rdlong	local14, objptr
0d3d8     20 43 02 F6 | 	mov	local15, local14
0d3dc     01 42 66 F0 | 	shl	local15, #1
0d3e0     20 43 02 F1 | 	add	local15, local14
0d3e4     02 42 66 F0 | 	shl	local15, #2
0d3e8     03 00 00 FF 
0d3ec     00 E4 85 F1 | 	sub	objptr, ##1536
0d3f0     F2 42 02 F1 | 	add	local15, objptr
0d3f4     21 39 62 FC | 	wrlong	local10, local15
0d3f8     03 00 00 FF 
0d3fc     00 E4 05 F1 | 	add	objptr, ##1536
0d400     F2 46 02 FB | 	rdlong	local17, objptr
0d404     23 45 02 F6 | 	mov	local16, local17
0d408     01 44 66 F0 | 	shl	local16, #1
0d40c     23 45 02 F1 | 	add	local16, local17
0d410     02 44 66 F0 | 	shl	local16, #2
0d414     03 00 00 FF 
0d418     00 E4 85 F1 | 	sub	objptr, ##1536
0d41c     F2 44 02 F1 | 	add	local16, objptr
0d420     04 44 06 F1 | 	add	local16, #4
0d424     22 3D 62 FC | 	wrlong	local12, local16
0d428     03 00 00 FF 
0d42c     00 E4 05 F1 | 	add	objptr, ##1536
0d430     F2 44 02 FB | 	rdlong	local16, objptr
0d434     22 47 02 F6 | 	mov	local17, local16
0d438     01 46 66 F0 | 	shl	local17, #1
0d43c     22 47 02 F1 | 	add	local17, local16
0d440     02 46 66 F0 | 	shl	local17, #2
0d444     03 00 00 FF 
0d448     00 E4 85 F1 | 	sub	objptr, ##1536
0d44c     F2 46 02 F1 | 	add	local17, objptr
0d450     08 46 06 F1 | 	add	local17, #8
0d454     23 3F 62 FC | 	wrlong	local13, local17
0d458     03 00 00 FF 
0d45c     00 E4 05 F1 | 	add	objptr, ##1536
0d460     F2 38 02 FB | 	rdlong	local10, objptr
0d464     01 38 06 F1 | 	add	local10, #1
0d468     F2 38 62 FC | 	wrlong	local10, objptr
0d46c     4A 00 00 FF 
0d470     7C E4 85 F1 | 	sub	objptr, ##38012
0d474                 | LR__1048
0d474                 | ' return 0
0d474     00 FA 05 F6 | 	mov	result1, #0
0d478                 | LR__1049
0d478     A7 F0 03 F6 | 	mov	ptra, fp
0d47c     B2 00 A0 FD | 	call	#popregs_
0d480                 | _getvar_ret
0d480     2D 00 64 FD | 	ret
0d484                 | 
0d484                 | ' 
0d484                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0d484                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' 
0d484                 | ' 
0d484                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' '                                                                                                                                       -
0d484                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0d484                 | ' '                                                                                                                                       -
0d484                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' 
0d484                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0d484                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0d484                 | ' 
0d484                 | ' function execute_line (astart=0 as integer) as integer
0d484                 | _execute_line
0d484     04 4A 05 F6 | 	mov	COUNT_, #4
0d488     A8 00 A0 FD | 	call	#pushregs_
0d48c     50 00 00 FF 
0d490     BC E4 05 F1 | 	add	objptr, ##41148
0d494     F2 00 68 FC | 	wrlong	#0, objptr
0d498                 | ' 
0d498                 | ' runptr2=0
0d498                 | ' for lineptr_e=astart to lineptr-1
0d498     06 00 00 FF 
0d49c     3C E4 85 F1 | 	sub	objptr, ##3132
0d4a0     F2 12 62 FC | 	wrlong	arg01, objptr
0d4a4     04 E4 85 F1 | 	sub	objptr, #4
0d4a8     F2 26 02 FB | 	rdlong	local01, objptr
0d4ac     4A 00 00 FF 
0d4b0     7C E4 85 F1 | 	sub	objptr, ##38012
0d4b4                 | LR__1050
0d4b4     4A 00 00 FF 
0d4b8     80 E4 05 F1 | 	add	objptr, ##38016
0d4bc     F2 FA 01 FB | 	rdlong	result1, objptr
0d4c0     4A 00 00 FF 
0d4c4     80 E4 85 F1 | 	sub	objptr, ##38016
0d4c8     13 FB 51 F2 | 	cmps	result1, local01 wc
0d4cc     98 00 90 3D |  if_ae	jmp	#LR__1051
0d4d0     4A 00 00 FF 
0d4d4     80 E4 05 F1 | 	add	objptr, ##38016
0d4d8     F2 FA 01 FB | 	rdlong	result1, objptr
0d4dc     FD 28 02 F6 | 	mov	local02, result1
0d4e0     01 28 66 F0 | 	shl	local02, #1
0d4e4     FD 28 02 F1 | 	add	local02, result1
0d4e8     02 28 66 F0 | 	shl	local02, #2
0d4ec     03 00 00 FF 
0d4f0     04 E4 85 F1 | 	sub	objptr, ##1540
0d4f4     F2 28 02 F1 | 	add	local02, objptr
0d4f8     08 28 06 F1 | 	add	local02, #8
0d4fc     14 29 02 FB | 	rdlong	local02, local02
0d500     14 29 E2 F8 | 	getbyte	local02, local02, #0
0d504     02 28 66 F0 | 	shl	local02, #2
0d508     04 00 00 FF 
0d50c     1C E4 85 F1 | 	sub	objptr, ##2076
0d510     F2 28 02 F1 | 	add	local02, objptr
0d514     14 29 02 FB | 	rdlong	local02, local02
0d518     14 2B 02 F6 | 	mov	local03, local02
0d51c     13 28 46 F7 | 	zerox	local02, #19
0d520     14 2A 46 F0 | 	shr	local03, #20
0d524     02 2A 66 F0 | 	shl	local03, #2
0d528     ED 2A 02 F1 | 	add	local03, __methods__
0d52c     15 2B 02 FB | 	rdlong	local03, local03
0d530     43 00 00 FF 
0d534     60 E4 85 F1 | 	sub	objptr, ##34400
0d538     F2 2C 02 F6 | 	mov	local04, objptr
0d53c     14 E5 01 F6 | 	mov	objptr, local02
0d540     2D 2A 62 FD | 	call	local03
0d544     16 E5 01 F6 | 	mov	objptr, local04
0d548     4A 00 00 FF 
0d54c     80 E4 05 F1 | 	add	objptr, ##38016
0d550     F2 2C 02 FB | 	rdlong	local04, objptr
0d554     01 2C 06 F1 | 	add	local04, #1
0d558     F2 2C 62 FC | 	wrlong	local04, objptr
0d55c     4A 00 00 FF 
0d560     80 E4 85 F1 | 	sub	objptr, ##38016
0d564     4C FF 9F FD | 	jmp	#LR__1050
0d568                 | LR__1051
0d568                 | ' return runptr2
0d568     50 00 00 FF 
0d56c     BC E4 05 F1 | 	add	objptr, ##41148
0d570     F2 FA 01 FB | 	rdlong	result1, objptr
0d574     50 00 00 FF 
0d578     BC E4 85 F1 | 	sub	objptr, ##41148
0d57c     A7 F0 03 F6 | 	mov	ptra, fp
0d580     B2 00 A0 FD | 	call	#popregs_
0d584                 | _execute_line_ret
0d584     2D 00 64 FD | 	ret
0d588                 | 
0d588                 | ' 
0d588                 | ' 
0d588                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d588                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0d588                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d588                 | ' 
0d588                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0d588                 | ' 
0d588                 | ' function pop() as expr_result
0d588                 | _pop
0d588                 | ' if stackpointer=0 then
0d588     43 00 00 FF 
0d58c     58 E4 05 F1 | 	add	objptr, ##34392
0d590     F2 FA 09 FB | 	rdlong	result1, objptr wz
0d594     43 00 00 FF 
0d598     58 E4 85 F1 | 	sub	objptr, ##34392
0d59c     FF 04 06 A6 |  if_e	mov	_var03, #255
0d5a0     18 00 06 A6 |  if_e	mov	_var01, #24
0d5a4     68 00 90 AD |  if_e	jmp	#LR__1060
0d5a8     43 00 00 FF 
0d5ac     58 E4 05 F1 | 	add	objptr, ##34392
0d5b0     F2 FA 01 FB | 	rdlong	result1, objptr
0d5b4     01 FA 85 F1 | 	sub	result1, #1
0d5b8     F2 FA 61 FC | 	wrlong	result1, objptr
0d5bc     FD FE 01 F6 | 	mov	result3, result1
0d5c0     01 FE 65 F0 | 	shl	result3, #1
0d5c4     FD FE 01 F1 | 	add	result3, result1
0d5c8     02 FE 65 F0 | 	shl	result3, #2
0d5cc     0C 00 00 FF 
0d5d0     0C E4 85 F1 | 	sub	objptr, ##6156
0d5d4     F2 FE 01 F1 | 	add	result3, objptr
0d5d8     FF 00 02 FB | 	rdlong	_var01, result3
0d5dc     04 FE 05 F1 | 	add	result3, #4
0d5e0     FF FE 01 FB | 	rdlong	result3, result3
0d5e4     FD FC 01 F6 | 	mov	result2, result1
0d5e8     01 FC 65 F0 | 	shl	result2, #1
0d5ec     FD FC 01 F1 | 	add	result2, result1
0d5f0     02 FC 65 F0 | 	shl	result2, #2
0d5f4     F2 FC 01 F1 | 	add	result2, objptr
0d5f8     08 FC 05 F1 | 	add	result2, #8
0d5fc     FE FA 01 FB | 	rdlong	result1, result2
0d600     FF 02 02 F6 | 	mov	_var02, result3
0d604     FD 04 02 F6 | 	mov	_var03, result1
0d608     37 00 00 FF 
0d60c     4C E4 85 F1 | 	sub	objptr, ##28236
0d610                 | LR__1060
0d610                 | ' return t1
0d610     01 FD 01 F6 | 	mov	result2, _var02
0d614     02 FF 01 F6 | 	mov	result3, _var03
0d618     00 FB 01 F6 | 	mov	result1, _var01
0d61c                 | _pop_ret
0d61c     2D 00 64 FD | 	ret
0d620                 | 
0d620                 | ' 
0d620                 | ' sub push(t1 as expr_result )
0d620                 | _push
0d620                 | ' if stackpointer<maxstack then 
0d620     43 00 00 FF 
0d624     58 E4 05 F1 | 	add	objptr, ##34392
0d628     F2 00 02 FB | 	rdlong	_var01, objptr
0d62c     43 00 00 FF 
0d630     58 E4 85 F1 | 	sub	objptr, ##34392
0d634     01 00 00 FF 
0d638     00 00 56 F2 | 	cmps	_var01, ##512 wc
0d63c     BC 00 90 3D |  if_ae	jmp	#LR__1070
0d640     09 01 02 FB | 	rdlong	_var01, arg01
0d644     04 12 06 F1 | 	add	arg01, #4
0d648     09 03 02 FB | 	rdlong	_var02, arg01
0d64c     04 12 06 F1 | 	add	arg01, #4
0d650     09 13 02 FB | 	rdlong	arg01, arg01
0d654     43 00 00 FF 
0d658     58 E4 05 F1 | 	add	objptr, ##34392
0d65c     F2 04 02 FB | 	rdlong	_var03, objptr
0d660     02 07 02 F6 | 	mov	_var04, _var03
0d664     01 06 66 F0 | 	shl	_var04, #1
0d668     02 07 02 F1 | 	add	_var04, _var03
0d66c     02 06 66 F0 | 	shl	_var04, #2
0d670     0C 00 00 FF 
0d674     0C E4 85 F1 | 	sub	objptr, ##6156
0d678     F2 06 02 F1 | 	add	_var04, objptr
0d67c     03 01 62 FC | 	wrlong	_var01, _var04
0d680     0C 00 00 FF 
0d684     0C E4 05 F1 | 	add	objptr, ##6156
0d688     F2 06 02 FB | 	rdlong	_var04, objptr
0d68c     03 05 02 F6 | 	mov	_var03, _var04
0d690     01 04 66 F0 | 	shl	_var03, #1
0d694     03 05 02 F1 | 	add	_var03, _var04
0d698     02 04 66 F0 | 	shl	_var03, #2
0d69c     0C 00 00 FF 
0d6a0     0C E4 85 F1 | 	sub	objptr, ##6156
0d6a4     F2 04 02 F1 | 	add	_var03, objptr
0d6a8     04 04 06 F1 | 	add	_var03, #4
0d6ac     02 03 62 FC | 	wrlong	_var02, _var03
0d6b0     0C 00 00 FF 
0d6b4     0C E4 05 F1 | 	add	objptr, ##6156
0d6b8     F2 06 02 FB | 	rdlong	_var04, objptr
0d6bc     03 05 02 F6 | 	mov	_var03, _var04
0d6c0     01 04 66 F0 | 	shl	_var03, #1
0d6c4     03 05 02 F1 | 	add	_var03, _var04
0d6c8     02 04 66 F0 | 	shl	_var03, #2
0d6cc     0C 00 00 FF 
0d6d0     0C E4 85 F1 | 	sub	objptr, ##6156
0d6d4     F2 04 02 F1 | 	add	_var03, objptr
0d6d8     08 04 06 F1 | 	add	_var03, #8
0d6dc     02 13 62 FC | 	wrlong	arg01, _var03
0d6e0     0C 00 00 FF 
0d6e4     0C E4 05 F1 | 	add	objptr, ##6156
0d6e8     F2 00 02 FB | 	rdlong	_var01, objptr
0d6ec     01 00 06 F1 | 	add	_var01, #1
0d6f0     F2 00 62 FC | 	wrlong	_var01, objptr
0d6f4     43 00 00 FF 
0d6f8     58 E4 85 F1 | 	sub	objptr, ##34392
0d6fc                 | LR__1070
0d6fc                 | _push_ret
0d6fc     2D 00 64 FD | 	ret
0d700                 | 
0d700                 | ' 
0d700                 | ' ' -------------------------------- Runtime converting functions
0d700                 | ' 
0d700                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0d700                 | ' 
0d700                 | ' function  convertstring(psaddr as ulong) as string
0d700                 | _convertstring
0d700     04 4A 05 F6 | 	mov	COUNT_, #4
0d704     A8 00 A0 FD | 	call	#pushregs_
0d708     09 27 02 F6 | 	mov	local01, arg01
0d70c     E8 5A B1 FD | 	call	#_pslpeek
0d710     FD 28 02 F6 | 	mov	local02, result1
0d714     B5 01 00 FF 
0d718     A7 2B 06 F6 | 	mov	local03, ##@LR__5833
0d71c                 | ' l=pslpeek(psaddr) 
0d71c                 | ' s="" 
0d71c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0d71c     01 2C 06 F6 | 	mov	local04, #1
0d720     01 28 06 F1 | 	add	local02, #1
0d724                 | LR__1080
0d724     14 2D 52 F2 | 	cmps	local04, local02 wc
0d728     30 00 90 3D |  if_ae	jmp	#LR__1081
0d72c     13 13 02 F6 | 	mov	arg01, local01
0d730     03 12 06 F1 | 	add	arg01, #3
0d734     16 13 02 F1 | 	add	arg01, local04
0d738     64 5A B1 FD | 	call	#_pspeek
0d73c     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0d740     18 B4 B1 FD | 	call	#__system__Chr_S
0d744     FD 14 02 F6 | 	mov	arg02, result1
0d748     15 13 02 F6 | 	mov	arg01, local03
0d74c     24 92 B1 FD | 	call	#__system___string_concat
0d750     FD 2A 02 F6 | 	mov	local03, result1
0d754     01 2C 06 F1 | 	add	local04, #1
0d758     C8 FF 9F FD | 	jmp	#LR__1080
0d75c                 | LR__1081
0d75c                 | ' return s
0d75c     15 FB 01 F6 | 	mov	result1, local03
0d760     A7 F0 03 F6 | 	mov	ptra, fp
0d764     B2 00 A0 FD | 	call	#popregs_
0d768                 | _convertstring_ret
0d768     2D 00 64 FD | 	ret
0d76c                 | 
0d76c                 | ' 
0d76c                 | ' ' converts a variable to an integer
0d76c                 | ' 
0d76c                 | ' function converttoint (t1 as expr_result) as integer 
0d76c                 | _converttoint
0d76c     02 4A 05 F6 | 	mov	COUNT_, #2
0d770     A8 00 A0 FD | 	call	#pushregs_
0d774     09 27 02 F6 | 	mov	local01, arg01
0d778                 | ' 
0d778                 | ' select case t1.result_type
0d778     08 26 06 F1 | 	add	local01, #8
0d77c     13 29 02 FB | 	rdlong	local02, local01
0d780     08 26 86 F1 | 	sub	local01, #8
0d784     1C 28 0E F2 | 	cmp	local02, #28 wz
0d788     2C 00 90 AD |  if_e	jmp	#LR__1090
0d78c     1D 28 0E F2 | 	cmp	local02, #29 wz
0d790     2C 00 90 AD |  if_e	jmp	#LR__1091
0d794     1E 28 0E F2 | 	cmp	local02, #30 wz
0d798     2C 00 90 AD |  if_e	jmp	#LR__1092
0d79c     1F 28 0E F2 | 	cmp	local02, #31 wz
0d7a0     34 00 90 AD |  if_e	jmp	#LR__1093
0d7a4     2B 28 0E F2 | 	cmp	local02, #43 wz
0d7a8     44 00 90 AD |  if_e	jmp	#LR__1094
0d7ac     2C 28 0E F2 | 	cmp	local02, #44 wz
0d7b0     5C 00 90 AD |  if_e	jmp	#LR__1095
0d7b4     60 00 90 FD | 	jmp	#LR__1096
0d7b8                 | LR__1090
0d7b8     13 FB 01 FB | 	rdlong	result1, local01
0d7bc     5C 00 90 FD | 	jmp	#LR__1097
0d7c0                 | LR__1091
0d7c0     13 FB 01 FB | 	rdlong	result1, local01
0d7c4     54 00 90 FD | 	jmp	#LR__1097
0d7c8                 | LR__1092
0d7c8     13 13 02 FB | 	rdlong	arg01, local01
0d7cc     01 14 06 F6 | 	mov	arg02, #1
0d7d0     88 C4 B1 FD | 	call	#__system___float_tointeger
0d7d4     44 00 90 FD | 	jmp	#LR__1097
0d7d8                 | LR__1093
0d7d8     13 13 02 FB | 	rdlong	arg01, local01
0d7dc     C0 C7 B1 FD | 	call	#__system____builtin_atof
0d7e0     FD 12 02 F6 | 	mov	arg01, result1
0d7e4     01 14 06 F6 | 	mov	arg02, #1
0d7e8     70 C4 B1 FD | 	call	#__system___float_tointeger
0d7ec     2C 00 90 FD | 	jmp	#LR__1097
0d7f0                 | LR__1094
0d7f0     13 13 02 FB | 	rdlong	arg01, local01
0d7f4     08 FF BF FD | 	call	#_convertstring
0d7f8     FD 12 02 F6 | 	mov	arg01, result1
0d7fc     A0 C7 B1 FD | 	call	#__system____builtin_atof
0d800     FD 12 02 F6 | 	mov	arg01, result1
0d804     01 14 06 F6 | 	mov	arg02, #1
0d808     50 C4 B1 FD | 	call	#__system___float_tointeger
0d80c     0C 00 90 FD | 	jmp	#LR__1097
0d810                 | LR__1095
0d810     13 FB 01 FB | 	rdlong	result1, local01
0d814     04 00 90 FD | 	jmp	#LR__1097
0d818                 | LR__1096
0d818     00 FA 05 F6 | 	mov	result1, #0
0d81c                 | LR__1097
0d81c     A7 F0 03 F6 | 	mov	ptra, fp
0d820     B2 00 A0 FD | 	call	#popregs_
0d824                 | _converttoint_ret
0d824     2D 00 64 FD | 	ret
0d828                 | 
0d828                 | ' 
0d828                 | ' ' converts a variable to float
0d828                 | ' 
0d828                 | ' function converttofloat (t1 as expr_result) as single
0d828                 | _converttofloat
0d828     03 4A 05 F6 | 	mov	COUNT_, #3
0d82c     A8 00 A0 FD | 	call	#pushregs_
0d830     09 27 02 F6 | 	mov	local01, arg01
0d834                 | ' 
0d834                 | ' select case t1.result_type
0d834     08 26 06 F1 | 	add	local01, #8
0d838     13 29 02 FB | 	rdlong	local02, local01
0d83c     08 26 86 F1 | 	sub	local01, #8
0d840     1C 28 0E F2 | 	cmp	local02, #28 wz
0d844     24 00 90 AD |  if_e	jmp	#LR__1100
0d848     1D 28 0E F2 | 	cmp	local02, #29 wz
0d84c     38 00 90 AD |  if_e	jmp	#LR__1101
0d850     1E 28 0E F2 | 	cmp	local02, #30 wz
0d854     3C 00 90 AD |  if_e	jmp	#LR__1102
0d858     1F 28 0E F2 | 	cmp	local02, #31 wz
0d85c     3C 00 90 AD |  if_e	jmp	#LR__1103
0d860     2B 28 0E F2 | 	cmp	local02, #43 wz
0d864     40 00 90 AD |  if_e	jmp	#LR__1104
0d868     50 00 90 FD | 	jmp	#LR__1105
0d86c                 | LR__1100
0d86c     13 13 02 FB | 	rdlong	arg01, local01
0d870     09 13 52 F6 | 	abs	arg01, arg01 wc
0d874     1F 2A C6 C9 |  if_b	decod	local03, #31
0d878     00 2A 06 36 |  if_ae	mov	local03, #0
0d87c     10 BB B1 FD | 	call	#__system___float_fromuns
0d880     15 FB 61 F5 | 	xor	result1, local03
0d884     38 00 90 FD | 	jmp	#LR__1106
0d888                 | LR__1101
0d888     13 13 02 FB | 	rdlong	arg01, local01
0d88c     00 BB B1 FD | 	call	#__system___float_fromuns
0d890     2C 00 90 FD | 	jmp	#LR__1106
0d894                 | LR__1102
0d894     13 FB 01 FB | 	rdlong	result1, local01
0d898     24 00 90 FD | 	jmp	#LR__1106
0d89c                 | LR__1103
0d89c     13 13 02 FB | 	rdlong	arg01, local01
0d8a0     FC C6 B1 FD | 	call	#__system____builtin_atof
0d8a4     18 00 90 FD | 	jmp	#LR__1106
0d8a8                 | LR__1104
0d8a8     13 13 02 FB | 	rdlong	arg01, local01
0d8ac     50 FE BF FD | 	call	#_convertstring
0d8b0     FD 12 02 F6 | 	mov	arg01, result1
0d8b4     E8 C6 B1 FD | 	call	#__system____builtin_atof
0d8b8     04 00 90 FD | 	jmp	#LR__1106
0d8bc                 | LR__1105
0d8bc     00 FA 05 F6 | 	mov	result1, #0
0d8c0                 | LR__1106
0d8c0     A7 F0 03 F6 | 	mov	ptra, fp
0d8c4     B2 00 A0 FD | 	call	#popregs_
0d8c8                 | _converttofloat_ret
0d8c8     2D 00 64 FD | 	ret
0d8cc                 | 
0d8cc                 | ' 
0d8cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8cc                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0d8cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8cc                 | ' 
0d8cc                 | ' 
0d8cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8cc                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0d8cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0d8cc                 | ' 
0d8cc                 | ' '-------------------- abs
0d8cc                 | ' 
0d8cc                 | ' sub do_abs
0d8cc                 | _do_abs
0d8cc     01 4A 05 F6 | 	mov	COUNT_, #1
0d8d0     A8 00 A0 FD | 	call	#pushregs_
0d8d4     0C F0 07 F1 | 	add	ptra, #12
0d8d8     AC FC BF FD | 	call	#_pop
0d8dc     FF 26 02 F6 | 	mov	local01, result3
0d8e0     A7 FA 61 FC | 	wrlong	result1, fp
0d8e4     04 4E 05 F1 | 	add	fp, #4
0d8e8     A7 FC 61 FC | 	wrlong	result2, fp
0d8ec     04 4E 05 F1 | 	add	fp, #4
0d8f0     A7 26 62 FC | 	wrlong	local01, fp
0d8f4                 | ' 
0d8f4                 | ' t1=pop()
0d8f4                 | ' if t1.result_type=result_int then 
0d8f4     08 4E 85 F1 | 	sub	fp, #8
0d8f8     1C 26 0E F2 | 	cmp	local01, #28 wz
0d8fc     A7 12 02 AB |  if_e	rdlong	arg01, fp
0d900     09 27 42 A6 |  if_e	abs	local01, arg01
0d904     A7 26 62 AC |  if_e	wrlong	local01, fp
0d908     2C 00 90 AD |  if_e	jmp	#LR__1110
0d90c     08 4E 05 F1 | 	add	fp, #8
0d910     A7 26 02 FB | 	rdlong	local01, fp
0d914     08 4E 85 F1 | 	sub	fp, #8
0d918     1E 26 0E F2 | 	cmp	local01, #30 wz
0d91c     A7 FA 01 AB |  if_e	rdlong	result1, fp
0d920     1F FA 05 A4 |  if_e	bitl	result1, #31
0d924     A7 FA 61 AC |  if_e	wrlong	result1, fp
0d928     08 4E 05 51 |  if_ne	add	fp, #8
0d92c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0d930     08 4E 85 51 |  if_ne	sub	fp, #8
0d934     A7 50 68 5C |  if_ne	wrlong	#40, fp
0d938                 | LR__1110
0d938     A7 12 02 F6 | 	mov	arg01, fp
0d93c     E0 FC BF FD | 	call	#_push
0d940     A7 F0 03 F6 | 	mov	ptra, fp
0d944     B2 00 A0 FD | 	call	#popregs_
0d948                 | _do_abs_ret
0d948     2D 00 64 FD | 	ret
0d94c                 | 
0d94c                 | ' 
0d94c                 | ' '-------------------- acos
0d94c                 | ' 
0d94c                 | ' sub do_acos
0d94c                 | _do_acos
0d94c     01 4A 05 F6 | 	mov	COUNT_, #1
0d950     A8 00 A0 FD | 	call	#pushregs_
0d954     10 F0 07 F1 | 	add	ptra, #16
0d958     4A 00 00 FF 
0d95c     80 E4 05 F1 | 	add	objptr, ##38016
0d960     F2 26 02 FB | 	rdlong	local01, objptr
0d964     13 17 02 F6 | 	mov	arg03, local01
0d968     01 16 66 F0 | 	shl	arg03, #1
0d96c     13 17 02 F1 | 	add	arg03, local01
0d970     02 16 66 F0 | 	shl	arg03, #2
0d974     03 00 00 FF 
0d978     04 E4 85 F1 | 	sub	objptr, ##1540
0d97c     F2 16 02 F1 | 	add	arg03, objptr
0d980     0B 17 02 FB | 	rdlong	arg03, arg03
0d984     0C 4E 05 F1 | 	add	fp, #12
0d988     A7 16 62 FC | 	wrlong	arg03, fp
0d98c                 | ' 
0d98c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d98c                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0d98c     0C 4E 85 F1 | 	sub	fp, #12
0d990     02 16 16 F2 | 	cmp	arg03, #2 wc
0d994     47 00 00 FF 
0d998     7C E4 85 F1 | 	sub	objptr, ##36476
0d99c     0C 4E 05 C1 |  if_b	add	fp, #12
0d9a0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d9a4     0C 4E 85 C1 |  if_b	sub	fp, #12
0d9a8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0d9ac     00 12 06 F6 | 	mov	arg01, #0
0d9b0     08 EC B1 FD | 	call	#__system___getiolock_0603
0d9b4     FD 12 02 F6 | 	mov	arg01, result1
0d9b8     5C 8F B1 FD | 	call	#__system___lockmem
0d9bc     B5 01 00 FF 
0d9c0     A8 15 06 F6 | 	mov	arg02, ##@LR__5834
0d9c4     00 12 06 F6 | 	mov	arg01, #0
0d9c8     00 16 06 F6 | 	mov	arg03, #0
0d9cc     40 9C B1 FD | 	call	#__system___basic_print_string
0d9d0     00 12 06 F6 | 	mov	arg01, #0
0d9d4     E4 EB B1 FD | 	call	#__system___getiolock_0603
0d9d8     FD 00 68 FC | 	wrlong	#0, result1
0d9dc     27 12 06 F6 | 	mov	arg01, #39
0d9e0     00 14 06 F6 | 	mov	arg02, #0
0d9e4     40 55 B1 FD | 	call	#_printerror
0d9e8     64 00 90 FD | 	jmp	#LR__1121
0d9ec                 | LR__1120
0d9ec     98 FB BF FD | 	call	#_pop
0d9f0     FF 26 02 F6 | 	mov	local01, result3
0d9f4     A7 FA 61 FC | 	wrlong	result1, fp
0d9f8     04 4E 05 F1 | 	add	fp, #4
0d9fc     A7 FC 61 FC | 	wrlong	result2, fp
0da00     04 4E 05 F1 | 	add	fp, #4
0da04     A7 26 62 FC | 	wrlong	local01, fp
0da08     08 4E 85 F1 | 	sub	fp, #8
0da0c     A7 12 02 F6 | 	mov	arg01, fp
0da10     14 FE BF FD | 	call	#_converttofloat
0da14     FD 12 02 F6 | 	mov	arg01, result1
0da18     B8 C8 B1 FD | 	call	#__system____builtin_acosf
0da1c     FD 12 02 F6 | 	mov	arg01, result1
0da20     52 00 00 FF 
0da24     AC E4 05 F1 | 	add	objptr, ##42156
0da28     F2 14 02 FB | 	rdlong	arg02, objptr
0da2c     52 00 00 FF 
0da30     AC E4 85 F1 | 	sub	objptr, ##42156
0da34     5C BD B1 FD | 	call	#__system___float_mul
0da38     A7 FA 61 FC | 	wrlong	result1, fp
0da3c     08 4E 05 F1 | 	add	fp, #8
0da40     A7 3C 68 FC | 	wrlong	#30, fp
0da44     08 4E 85 F1 | 	sub	fp, #8
0da48     A7 12 02 F6 | 	mov	arg01, fp
0da4c     D0 FB BF FD | 	call	#_push
0da50                 | LR__1121
0da50     A7 F0 03 F6 | 	mov	ptra, fp
0da54     B2 00 A0 FD | 	call	#popregs_
0da58                 | _do_acos_ret
0da58     2D 00 64 FD | 	ret
0da5c                 | 
0da5c                 | ' 
0da5c                 | ' '-------------------- asc
0da5c                 | ' 
0da5c                 | ' sub do_asc
0da5c                 | _do_asc
0da5c     01 4A 05 F6 | 	mov	COUNT_, #1
0da60     A8 00 A0 FD | 	call	#pushregs_
0da64     14 F0 07 F1 | 	add	ptra, #20
0da68     4A 00 00 FF 
0da6c     80 E4 05 F1 | 	add	objptr, ##38016
0da70     F2 26 02 FB | 	rdlong	local01, objptr
0da74     13 17 02 F6 | 	mov	arg03, local01
0da78     01 16 66 F0 | 	shl	arg03, #1
0da7c     13 17 02 F1 | 	add	arg03, local01
0da80     02 16 66 F0 | 	shl	arg03, #2
0da84     03 00 00 FF 
0da88     04 E4 85 F1 | 	sub	objptr, ##1540
0da8c     F2 16 02 F1 | 	add	arg03, objptr
0da90     0B 17 02 FB | 	rdlong	arg03, arg03
0da94     0C 4E 05 F1 | 	add	fp, #12
0da98     A7 16 62 FC | 	wrlong	arg03, fp
0da9c                 | ' 
0da9c                 | ' numpar=compiledline(lineptr_e).result.uresult
0da9c                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0da9c     0C 4E 85 F1 | 	sub	fp, #12
0daa0     02 16 16 F2 | 	cmp	arg03, #2 wc
0daa4     47 00 00 FF 
0daa8     7C E4 85 F1 | 	sub	objptr, ##36476
0daac     0C 4E 05 C1 |  if_b	add	fp, #12
0dab0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dab4     0C 4E 85 C1 |  if_b	sub	fp, #12
0dab8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0dabc     00 12 06 F6 | 	mov	arg01, #0
0dac0     F8 EA B1 FD | 	call	#__system___getiolock_0603
0dac4     FD 12 02 F6 | 	mov	arg01, result1
0dac8     4C 8E B1 FD | 	call	#__system___lockmem
0dacc     B5 01 00 FF 
0dad0     AF 15 06 F6 | 	mov	arg02, ##@LR__5835
0dad4     00 12 06 F6 | 	mov	arg01, #0
0dad8     00 16 06 F6 | 	mov	arg03, #0
0dadc     30 9B B1 FD | 	call	#__system___basic_print_string
0dae0     00 12 06 F6 | 	mov	arg01, #0
0dae4     D4 EA B1 FD | 	call	#__system___getiolock_0603
0dae8     FD 00 68 FC | 	wrlong	#0, result1
0daec     27 12 06 F6 | 	mov	arg01, #39
0daf0     00 14 06 F6 | 	mov	arg02, #0
0daf4     30 54 B1 FD | 	call	#_printerror
0daf8     B4 00 90 FD | 	jmp	#LR__1133
0dafc                 | LR__1130
0dafc     88 FA BF FD | 	call	#_pop
0db00     FF 16 02 F6 | 	mov	arg03, result3
0db04     A7 FA 61 FC | 	wrlong	result1, fp
0db08     04 4E 05 F1 | 	add	fp, #4
0db0c     A7 FC 61 FC | 	wrlong	result2, fp
0db10     04 4E 05 F1 | 	add	fp, #4
0db14     A7 16 62 FC | 	wrlong	arg03, fp
0db18                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0db18     08 4E 85 F1 | 	sub	fp, #8
0db1c     2B 16 0E F2 | 	cmp	arg03, #43 wz
0db20     18 00 90 5D |  if_ne	jmp	#LR__1131
0db24     A7 12 02 FB | 	rdlong	arg01, fp
0db28     D4 FB BF FD | 	call	#_convertstring
0db2c     A7 FA 61 FC | 	wrlong	result1, fp
0db30     08 4E 05 F1 | 	add	fp, #8
0db34     A7 3E 68 FC | 	wrlong	#31, fp
0db38     08 4E 85 F1 | 	sub	fp, #8
0db3c                 | LR__1131
0db3c                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0db3c     08 4E 05 F1 | 	add	fp, #8
0db40     A7 16 02 FB | 	rdlong	arg03, fp
0db44     08 4E 85 F1 | 	sub	fp, #8
0db48     1F 16 0E F2 | 	cmp	arg03, #31 wz
0db4c     40 00 90 AD |  if_e	jmp	#LR__1132
0db50     00 12 06 F6 | 	mov	arg01, #0
0db54     64 EA B1 FD | 	call	#__system___getiolock_0603
0db58     FD 12 02 F6 | 	mov	arg01, result1
0db5c     B8 8D B1 FD | 	call	#__system___lockmem
0db60     B5 01 00 FF 
0db64     B5 15 06 F6 | 	mov	arg02, ##@LR__5836
0db68     00 12 06 F6 | 	mov	arg01, #0
0db6c     00 16 06 F6 | 	mov	arg03, #0
0db70     9C 9A B1 FD | 	call	#__system___basic_print_string
0db74     00 12 06 F6 | 	mov	arg01, #0
0db78     40 EA B1 FD | 	call	#__system___getiolock_0603
0db7c     FD 00 68 FC | 	wrlong	#0, result1
0db80     0F 12 06 F6 | 	mov	arg01, #15
0db84     00 14 06 F6 | 	mov	arg02, #0
0db88     9C 53 B1 FD | 	call	#_printerror
0db8c     20 00 90 FD | 	jmp	#LR__1133
0db90                 | LR__1132
0db90     A7 26 02 FB | 	rdlong	local01, fp
0db94     13 27 C2 FA | 	rdbyte	local01, local01
0db98     A7 26 62 FC | 	wrlong	local01, fp
0db9c     08 4E 05 F1 | 	add	fp, #8
0dba0     A7 38 68 FC | 	wrlong	#28, fp
0dba4     08 4E 85 F1 | 	sub	fp, #8
0dba8     A7 12 02 F6 | 	mov	arg01, fp
0dbac     70 FA BF FD | 	call	#_push
0dbb0                 | LR__1133
0dbb0     A7 F0 03 F6 | 	mov	ptra, fp
0dbb4     B2 00 A0 FD | 	call	#popregs_
0dbb8                 | _do_asc_ret
0dbb8     2D 00 64 FD | 	ret
0dbbc                 | 
0dbbc                 | ' 
0dbbc                 | ' '-------------------- asin
0dbbc                 | ' 
0dbbc                 | ' sub do_asin
0dbbc                 | _do_asin
0dbbc     01 4A 05 F6 | 	mov	COUNT_, #1
0dbc0     A8 00 A0 FD | 	call	#pushregs_
0dbc4     10 F0 07 F1 | 	add	ptra, #16
0dbc8     4A 00 00 FF 
0dbcc     80 E4 05 F1 | 	add	objptr, ##38016
0dbd0     F2 26 02 FB | 	rdlong	local01, objptr
0dbd4     13 17 02 F6 | 	mov	arg03, local01
0dbd8     01 16 66 F0 | 	shl	arg03, #1
0dbdc     13 17 02 F1 | 	add	arg03, local01
0dbe0     02 16 66 F0 | 	shl	arg03, #2
0dbe4     03 00 00 FF 
0dbe8     04 E4 85 F1 | 	sub	objptr, ##1540
0dbec     F2 16 02 F1 | 	add	arg03, objptr
0dbf0     0B 17 02 FB | 	rdlong	arg03, arg03
0dbf4     0C 4E 05 F1 | 	add	fp, #12
0dbf8     A7 16 62 FC | 	wrlong	arg03, fp
0dbfc                 | ' 
0dbfc                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbfc                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0dbfc     0C 4E 85 F1 | 	sub	fp, #12
0dc00     02 16 16 F2 | 	cmp	arg03, #2 wc
0dc04     47 00 00 FF 
0dc08     7C E4 85 F1 | 	sub	objptr, ##36476
0dc0c     0C 4E 05 C1 |  if_b	add	fp, #12
0dc10     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dc14     0C 4E 85 C1 |  if_b	sub	fp, #12
0dc18     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0dc1c     00 12 06 F6 | 	mov	arg01, #0
0dc20     98 E9 B1 FD | 	call	#__system___getiolock_0603
0dc24     FD 12 02 F6 | 	mov	arg01, result1
0dc28     EC 8C B1 FD | 	call	#__system___lockmem
0dc2c     B5 01 00 FF 
0dc30     BB 15 06 F6 | 	mov	arg02, ##@LR__5837
0dc34     00 12 06 F6 | 	mov	arg01, #0
0dc38     00 16 06 F6 | 	mov	arg03, #0
0dc3c     D0 99 B1 FD | 	call	#__system___basic_print_string
0dc40     00 12 06 F6 | 	mov	arg01, #0
0dc44     74 E9 B1 FD | 	call	#__system___getiolock_0603
0dc48     FD 00 68 FC | 	wrlong	#0, result1
0dc4c     27 12 06 F6 | 	mov	arg01, #39
0dc50     00 14 06 F6 | 	mov	arg02, #0
0dc54     D0 52 B1 FD | 	call	#_printerror
0dc58     64 00 90 FD | 	jmp	#LR__1141
0dc5c                 | LR__1140
0dc5c     28 F9 BF FD | 	call	#_pop
0dc60     FF 26 02 F6 | 	mov	local01, result3
0dc64     A7 FA 61 FC | 	wrlong	result1, fp
0dc68     04 4E 05 F1 | 	add	fp, #4
0dc6c     A7 FC 61 FC | 	wrlong	result2, fp
0dc70     04 4E 05 F1 | 	add	fp, #4
0dc74     A7 26 62 FC | 	wrlong	local01, fp
0dc78     08 4E 85 F1 | 	sub	fp, #8
0dc7c     A7 12 02 F6 | 	mov	arg01, fp
0dc80     A4 FB BF FD | 	call	#_converttofloat
0dc84     FD 12 02 F6 | 	mov	arg01, result1
0dc88     FC C5 B1 FD | 	call	#__system____builtin_asinf
0dc8c     FD 12 02 F6 | 	mov	arg01, result1
0dc90     52 00 00 FF 
0dc94     AC E4 05 F1 | 	add	objptr, ##42156
0dc98     F2 14 02 FB | 	rdlong	arg02, objptr
0dc9c     52 00 00 FF 
0dca0     AC E4 85 F1 | 	sub	objptr, ##42156
0dca4     EC BA B1 FD | 	call	#__system___float_mul
0dca8     A7 FA 61 FC | 	wrlong	result1, fp
0dcac     08 4E 05 F1 | 	add	fp, #8
0dcb0     A7 3C 68 FC | 	wrlong	#30, fp
0dcb4     08 4E 85 F1 | 	sub	fp, #8
0dcb8     A7 12 02 F6 | 	mov	arg01, fp
0dcbc     60 F9 BF FD | 	call	#_push
0dcc0                 | LR__1141
0dcc0     A7 F0 03 F6 | 	mov	ptra, fp
0dcc4     B2 00 A0 FD | 	call	#popregs_
0dcc8                 | _do_asin_ret
0dcc8     2D 00 64 FD | 	ret
0dccc                 | 
0dccc                 | ' 
0dccc                 | ' '-------------------- atn
0dccc                 | ' 
0dccc                 | ' sub do_atn
0dccc                 | _do_atn
0dccc     01 4A 05 F6 | 	mov	COUNT_, #1
0dcd0     A8 00 A0 FD | 	call	#pushregs_
0dcd4     10 F0 07 F1 | 	add	ptra, #16
0dcd8     4A 00 00 FF 
0dcdc     80 E4 05 F1 | 	add	objptr, ##38016
0dce0     F2 26 02 FB | 	rdlong	local01, objptr
0dce4     13 17 02 F6 | 	mov	arg03, local01
0dce8     01 16 66 F0 | 	shl	arg03, #1
0dcec     13 17 02 F1 | 	add	arg03, local01
0dcf0     02 16 66 F0 | 	shl	arg03, #2
0dcf4     03 00 00 FF 
0dcf8     04 E4 85 F1 | 	sub	objptr, ##1540
0dcfc     F2 16 02 F1 | 	add	arg03, objptr
0dd00     0B 17 02 FB | 	rdlong	arg03, arg03
0dd04     0C 4E 05 F1 | 	add	fp, #12
0dd08     A7 16 62 FC | 	wrlong	arg03, fp
0dd0c                 | ' 
0dd0c                 | ' numpar=compiledline(lineptr_e).result.uresult
0dd0c                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0dd0c     0C 4E 85 F1 | 	sub	fp, #12
0dd10     02 16 16 F2 | 	cmp	arg03, #2 wc
0dd14     47 00 00 FF 
0dd18     7C E4 85 F1 | 	sub	objptr, ##36476
0dd1c     0C 4E 05 C1 |  if_b	add	fp, #12
0dd20     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0dd24     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd28     40 00 90 4D |  if_c_and_nz	jmp	#LR__1150
0dd2c     00 12 06 F6 | 	mov	arg01, #0
0dd30     88 E8 B1 FD | 	call	#__system___getiolock_0603
0dd34     FD 12 02 F6 | 	mov	arg01, result1
0dd38     DC 8B B1 FD | 	call	#__system___lockmem
0dd3c     B5 01 00 FF 
0dd40     C2 15 06 F6 | 	mov	arg02, ##@LR__5838
0dd44     00 12 06 F6 | 	mov	arg01, #0
0dd48     00 16 06 F6 | 	mov	arg03, #0
0dd4c     C0 98 B1 FD | 	call	#__system___basic_print_string
0dd50     00 12 06 F6 | 	mov	arg01, #0
0dd54     64 E8 B1 FD | 	call	#__system___getiolock_0603
0dd58     FD 00 68 FC | 	wrlong	#0, result1
0dd5c     27 12 06 F6 | 	mov	arg01, #39
0dd60     00 14 06 F6 | 	mov	arg02, #0
0dd64     C0 51 B1 FD | 	call	#_printerror
0dd68     6C 00 90 FD | 	jmp	#LR__1151
0dd6c                 | LR__1150
0dd6c     18 F8 BF FD | 	call	#_pop
0dd70     FF 26 02 F6 | 	mov	local01, result3
0dd74     A7 FA 61 FC | 	wrlong	result1, fp
0dd78     04 4E 05 F1 | 	add	fp, #4
0dd7c     A7 FC 61 FC | 	wrlong	result2, fp
0dd80     04 4E 05 F1 | 	add	fp, #4
0dd84     A7 26 62 FC | 	wrlong	local01, fp
0dd88     08 4E 85 F1 | 	sub	fp, #8
0dd8c     A7 12 02 F6 | 	mov	arg01, fp
0dd90     94 FA BF FD | 	call	#_converttofloat
0dd94     FD 12 02 F6 | 	mov	arg01, result1
0dd98     00 C0 1F FF 
0dd9c     00 14 06 F6 | 	mov	arg02, ##1065353216
0dda0     7C C5 B1 FD | 	call	#__system____builtin_atan2f
0dda4     FD 12 02 F6 | 	mov	arg01, result1
0dda8     52 00 00 FF 
0ddac     AC E4 05 F1 | 	add	objptr, ##42156
0ddb0     F2 14 02 FB | 	rdlong	arg02, objptr
0ddb4     52 00 00 FF 
0ddb8     AC E4 85 F1 | 	sub	objptr, ##42156
0ddbc     D4 B9 B1 FD | 	call	#__system___float_mul
0ddc0     A7 FA 61 FC | 	wrlong	result1, fp
0ddc4     08 4E 05 F1 | 	add	fp, #8
0ddc8     A7 3C 68 FC | 	wrlong	#30, fp
0ddcc     08 4E 85 F1 | 	sub	fp, #8
0ddd0     A7 12 02 F6 | 	mov	arg01, fp
0ddd4     48 F8 BF FD | 	call	#_push
0ddd8                 | LR__1151
0ddd8     A7 F0 03 F6 | 	mov	ptra, fp
0dddc     B2 00 A0 FD | 	call	#popregs_
0dde0                 | _do_atn_ret
0dde0     2D 00 64 FD | 	ret
0dde4                 | 
0dde4                 | ' 
0dde4                 | ' '-------------------- beep
0dde4                 | ' 
0dde4                 | ' sub do_beep
0dde4                 | _do_beep
0dde4     02 4A 05 F6 | 	mov	COUNT_, #2
0dde8     A8 00 A0 FD | 	call	#pushregs_
0ddec     20 F0 07 F1 | 	add	ptra, #32
0ddf0     94 F7 BF FD | 	call	#_pop
0ddf4     FD 26 02 F6 | 	mov	local01, result1
0ddf8     FE 1C 02 F6 | 	mov	arg06, result2
0ddfc     FF 28 02 F6 | 	mov	local02, result3
0de00     0C 4E 05 F1 | 	add	fp, #12
0de04     A7 26 62 FC | 	wrlong	local01, fp
0de08     04 4E 05 F1 | 	add	fp, #4
0de0c     A7 1C 62 FC | 	wrlong	arg06, fp
0de10     04 4E 05 F1 | 	add	fp, #4
0de14     A7 28 62 FC | 	wrlong	local02, fp
0de18     14 4E 85 F1 | 	sub	fp, #20
0de1c     68 F7 BF FD | 	call	#_pop
0de20     A7 FA 61 FC | 	wrlong	result1, fp
0de24     04 4E 05 F1 | 	add	fp, #4
0de28     A7 FC 61 FC | 	wrlong	result2, fp
0de2c     04 4E 05 F1 | 	add	fp, #4
0de30     A7 FE 61 FC | 	wrlong	result3, fp
0de34                 | ' 
0de34                 | ' t2=pop()
0de34                 | ' t1=pop()
0de34                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0de34     08 4E 85 F1 | 	sub	fp, #8
0de38     1C FE 0D F2 | 	cmp	result3, #28 wz
0de3c     08 4E 05 51 |  if_ne	add	fp, #8
0de40     A7 28 02 5B |  if_ne	rdlong	local02, fp
0de44     08 4E 85 51 |  if_ne	sub	fp, #8
0de48     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0de4c     A7 26 02 AB |  if_e	rdlong	local01, fp
0de50     18 4E 05 A1 |  if_e	add	fp, #24
0de54     A7 26 62 AC |  if_e	wrlong	local01, fp
0de58     18 4E 85 A1 |  if_e	sub	fp, #24
0de5c     14 00 90 AD |  if_e	jmp	#LR__1160
0de60     A7 12 02 F6 | 	mov	arg01, fp
0de64     04 F9 BF FD | 	call	#_converttoint
0de68     18 4E 05 F1 | 	add	fp, #24
0de6c     A7 FA 61 FC | 	wrlong	result1, fp
0de70     18 4E 85 F1 | 	sub	fp, #24
0de74                 | LR__1160
0de74     1C 4E 05 F1 | 	add	fp, #28
0de78     A7 FE 48 FC | 	wrbyte	#127, fp
0de7c     01 4E 05 F1 | 	add	fp, #1
0de80     A7 00 49 FC | 	wrbyte	#128, fp
0de84     01 4E 85 F1 | 	sub	fp, #1
0de88     A7 14 02 F6 | 	mov	arg02, fp
0de8c     04 4E 85 F1 | 	sub	fp, #4
0de90     A7 16 02 FB | 	rdlong	arg03, fp
0de94     18 4E 85 F1 | 	sub	fp, #24
0de98     01 16 66 F0 | 	shl	arg03, #1
0de9c     07 12 06 F6 | 	mov	arg01, #7
0dea0     0E 18 C6 F9 | 	decod	arg04, #14
0dea4     02 1A 06 F6 | 	mov	arg05, #2
0dea8     00 1C 06 F6 | 	mov	arg06, #0
0deac     0B 00 00 FF 
0deb0     CC E4 05 F1 | 	add	objptr, ##5836
0deb4     BC 86 B1 FD | 	call	#_audio096_spin2_play8
0deb8     0B 00 00 FF 
0debc     CC E4 85 F1 | 	sub	objptr, ##5836
0dec0     0C 4E 05 F1 | 	add	fp, #12
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     0C 4E 85 F1 | 	sub	fp, #12
0decc     50 F7 BF FD | 	call	#_push
0ded0     E8 E5 B0 FD | 	call	#_do_waitms
0ded4     07 12 06 F6 | 	mov	arg01, #7
0ded8     0B 00 00 FF 
0dedc     CC E4 05 F1 | 	add	objptr, ##5836
0dee0     34 87 B1 FD | 	call	#_audio096_spin2_stop
0dee4     0B 00 00 FF 
0dee8     CC E4 85 F1 | 	sub	objptr, ##5836
0deec     A7 F0 03 F6 | 	mov	ptra, fp
0def0     B2 00 A0 FD | 	call	#popregs_
0def4                 | _do_beep_ret
0def4     2D 00 64 FD | 	ret
0def8                 | 
0def8                 | ' 
0def8                 | ' '-------------------- blit
0def8                 | ' 
0def8                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0def8                 | ' sub do_blit
0def8                 | _do_blit
0def8     02 4A 05 F6 | 	mov	COUNT_, #2
0defc     A8 00 A0 FD | 	call	#pushregs_
0df00     3C F0 07 F1 | 	add	ptra, #60
0df04     4A 00 00 FF 
0df08     80 E4 05 F1 | 	add	objptr, ##38016
0df0c     F2 26 02 FB | 	rdlong	local01, objptr
0df10     13 25 02 F6 | 	mov	arg10, local01
0df14     01 24 66 F0 | 	shl	arg10, #1
0df18     13 25 02 F1 | 	add	arg10, local01
0df1c     02 24 66 F0 | 	shl	arg10, #2
0df20     03 00 00 FF 
0df24     04 E4 85 F1 | 	sub	objptr, ##1540
0df28     F2 24 02 F1 | 	add	arg10, objptr
0df2c     12 25 02 FB | 	rdlong	arg10, arg10
0df30     38 4E 05 F1 | 	add	fp, #56
0df34     A7 24 62 FC | 	wrlong	arg10, fp
0df38                 | ' 
0df38                 | ' numpar=compiledline(lineptr_e).result.uresult
0df38                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0df38     38 4E 85 F1 | 	sub	fp, #56
0df3c     0A 24 0E F2 | 	cmp	arg10, #10 wz
0df40     47 00 00 FF 
0df44     7C E4 85 F1 | 	sub	objptr, ##36476
0df48     38 4E 05 51 |  if_ne	add	fp, #56
0df4c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df50     38 4E 85 51 |  if_ne	sub	fp, #56
0df54     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0df58     50 00 90 AD |  if_e	jmp	#LR__1170
0df5c     00 12 06 F6 | 	mov	arg01, #0
0df60     58 E6 B1 FD | 	call	#__system___getiolock_0603
0df64     FD 12 02 F6 | 	mov	arg01, result1
0df68     AC 89 B1 FD | 	call	#__system___lockmem
0df6c     B5 01 00 FF 
0df70     C8 15 06 F6 | 	mov	arg02, ##@LR__5839
0df74     00 12 06 F6 | 	mov	arg01, #0
0df78     00 16 06 F6 | 	mov	arg03, #0
0df7c     90 96 B1 FD | 	call	#__system___basic_print_string
0df80     00 12 06 F6 | 	mov	arg01, #0
0df84     34 E6 B1 FD | 	call	#__system___getiolock_0603
0df88     FD 00 68 FC | 	wrlong	#0, result1
0df8c     50 00 00 FF 
0df90     F0 E4 05 F1 | 	add	objptr, ##41200
0df94     F2 14 02 FB | 	rdlong	arg02, objptr
0df98     50 00 00 FF 
0df9c     F0 E4 85 F1 | 	sub	objptr, ##41200
0dfa0     27 12 06 F6 | 	mov	arg01, #39
0dfa4     80 4F B1 FD | 	call	#_printerror
0dfa8     44 01 90 FD | 	jmp	#LR__1175
0dfac                 | LR__1170
0dfac                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0dfac     38 4E 05 F1 | 	add	fp, #56
0dfb0     A7 28 02 FB | 	rdlong	local02, fp
0dfb4     01 28 86 F1 | 	sub	local02, #1
0dfb8     04 4E 85 F1 | 	sub	fp, #4
0dfbc     A7 28 62 FC | 	wrlong	local02, fp
0dfc0     34 4E 85 F1 | 	sub	fp, #52
0dfc4                 | LR__1171
0dfc4     38 4E 05 F1 | 	add	fp, #56
0dfc8     A7 26 02 FB | 	rdlong	local01, fp
0dfcc     01 26 86 F1 | 	sub	local01, #1
0dfd0     04 4E 85 F1 | 	sub	fp, #4
0dfd4     A7 24 02 FB | 	rdlong	arg10, fp
0dfd8     34 4E 85 F1 | 	sub	fp, #52
0dfdc     13 25 1A F2 | 	cmp	arg10, local01 wcz
0dfe0     54 00 90 1D |  if_a	jmp	#LR__1172
0dfe4     A0 F5 BF FD | 	call	#_pop
0dfe8     A7 FA 61 FC | 	wrlong	result1, fp
0dfec     04 4E 05 F1 | 	add	fp, #4
0dff0     A7 FC 61 FC | 	wrlong	result2, fp
0dff4     04 4E 05 F1 | 	add	fp, #4
0dff8     A7 FE 61 FC | 	wrlong	result3, fp
0dffc     2C 4E 05 F1 | 	add	fp, #44
0e000     A7 28 02 FB | 	rdlong	local02, fp
0e004     02 28 66 F0 | 	shl	local02, #2
0e008     28 4E 85 F1 | 	sub	fp, #40
0e00c     A7 28 02 F1 | 	add	local02, fp
0e010     0C 4E 85 F1 | 	sub	fp, #12
0e014     A7 12 02 F6 | 	mov	arg01, fp
0e018     50 F7 BF FD | 	call	#_converttoint
0e01c     14 FB 61 FC | 	wrlong	result1, local02
0e020     34 4E 05 F1 | 	add	fp, #52
0e024     A7 28 02 FB | 	rdlong	local02, fp
0e028     01 28 86 F1 | 	sub	local02, #1
0e02c     A7 28 62 FC | 	wrlong	local02, fp
0e030     34 4E 85 F1 | 	sub	fp, #52
0e034     8C FF 9F FD | 	jmp	#LR__1171
0e038                 | LR__1172
0e038                 | ' if numpar=10 then 
0e038     38 4E 05 F1 | 	add	fp, #56
0e03c     A7 28 02 FB | 	rdlong	local02, fp
0e040     38 4E 85 F1 | 	sub	fp, #56
0e044     0A 28 0E F2 | 	cmp	local02, #10 wz
0e048     5C 00 90 5D |  if_ne	jmp	#LR__1173
0e04c     0C 4E 05 F1 | 	add	fp, #12
0e050     A7 12 02 FB | 	rdlong	arg01, fp
0e054     04 4E 05 F1 | 	add	fp, #4
0e058     A7 14 02 FB | 	rdlong	arg02, fp
0e05c     04 4E 05 F1 | 	add	fp, #4
0e060     A7 16 02 FB | 	rdlong	arg03, fp
0e064     04 4E 05 F1 | 	add	fp, #4
0e068     A7 18 02 FB | 	rdlong	arg04, fp
0e06c     04 4E 05 F1 | 	add	fp, #4
0e070     A7 1A 02 FB | 	rdlong	arg05, fp
0e074     04 4E 05 F1 | 	add	fp, #4
0e078     A7 1C 02 FB | 	rdlong	arg06, fp
0e07c     04 4E 05 F1 | 	add	fp, #4
0e080     A7 1E 02 FB | 	rdlong	arg07, fp
0e084     04 4E 05 F1 | 	add	fp, #4
0e088     A7 20 02 FB | 	rdlong	arg08, fp
0e08c     04 4E 05 F1 | 	add	fp, #4
0e090     A7 22 02 FB | 	rdlong	arg09, fp
0e094     04 4E 05 F1 | 	add	fp, #4
0e098     A7 24 02 FB | 	rdlong	arg10, fp
0e09c     30 4E 85 F1 | 	sub	fp, #48
0e0a0     60 76 B1 FD | 	call	#_hg010b_spin2_blit
0e0a4     48 00 90 FD | 	jmp	#LR__1174
0e0a8                 | LR__1173
0e0a8     F2 1E 02 FB | 	rdlong	arg07, objptr
0e0ac     0C 4E 05 F1 | 	add	fp, #12
0e0b0     A7 14 02 FB | 	rdlong	arg02, fp
0e0b4     04 4E 05 F1 | 	add	fp, #4
0e0b8     A7 16 02 FB | 	rdlong	arg03, fp
0e0bc     04 4E 05 F1 | 	add	fp, #4
0e0c0     A7 18 02 FB | 	rdlong	arg04, fp
0e0c4     04 4E 05 F1 | 	add	fp, #4
0e0c8     A7 1A 02 FB | 	rdlong	arg05, fp
0e0cc     04 4E 05 F1 | 	add	fp, #4
0e0d0     A7 20 02 FB | 	rdlong	arg08, fp
0e0d4     04 4E 05 F1 | 	add	fp, #4
0e0d8     A7 22 02 FB | 	rdlong	arg09, fp
0e0dc     20 4E 85 F1 | 	sub	fp, #32
0e0e0     0F 13 02 F6 | 	mov	arg01, arg07
0e0e4     0A 1C C6 F9 | 	decod	arg06, #10
0e0e8     0A 24 C6 F9 | 	decod	arg10, #10
0e0ec     14 76 B1 FD | 	call	#_hg010b_spin2_blit
0e0f0                 | LR__1174
0e0f0                 | LR__1175
0e0f0     A7 F0 03 F6 | 	mov	ptra, fp
0e0f4     B2 00 A0 FD | 	call	#popregs_
0e0f8                 | _do_blit_ret
0e0f8     2D 00 64 FD | 	ret
0e0fc                 | 
0e0fc                 | ' 
0e0fc                 | ' 
0e0fc                 | ' '-------------------- bin$
0e0fc                 | ' 
0e0fc                 | ' sub do_bin
0e0fc                 | _do_bin
0e0fc     01 4A 05 F6 | 	mov	COUNT_, #1
0e100     A8 00 A0 FD | 	call	#pushregs_
0e104     18 F0 07 F1 | 	add	ptra, #24
0e108     4A 00 00 FF 
0e10c     80 E4 05 F1 | 	add	objptr, ##38016
0e110     F2 26 02 FB | 	rdlong	local01, objptr
0e114     13 17 02 F6 | 	mov	arg03, local01
0e118     01 16 66 F0 | 	shl	arg03, #1
0e11c     13 17 02 F1 | 	add	arg03, local01
0e120     02 16 66 F0 | 	shl	arg03, #2
0e124     03 00 00 FF 
0e128     04 E4 85 F1 | 	sub	objptr, ##1540
0e12c     F2 16 02 F1 | 	add	arg03, objptr
0e130     0B 17 02 FB | 	rdlong	arg03, arg03
0e134     0C 4E 05 F1 | 	add	fp, #12
0e138     A7 16 62 FC | 	wrlong	arg03, fp
0e13c                 | ' 
0e13c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e13c                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0e13c     0C 4E 85 F1 | 	sub	fp, #12
0e140     03 16 16 F2 | 	cmp	arg03, #3 wc
0e144     47 00 00 FF 
0e148     7C E4 85 F1 | 	sub	objptr, ##36476
0e14c     0C 4E 05 C1 |  if_b	add	fp, #12
0e150     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e154     0C 4E 85 C1 |  if_b	sub	fp, #12
0e158     40 00 90 4D |  if_c_and_nz	jmp	#LR__1180
0e15c     00 12 06 F6 | 	mov	arg01, #0
0e160     58 E4 B1 FD | 	call	#__system___getiolock_0603
0e164     FD 12 02 F6 | 	mov	arg01, result1
0e168     AC 87 B1 FD | 	call	#__system___lockmem
0e16c     B5 01 00 FF 
0e170     CF 15 06 F6 | 	mov	arg02, ##@LR__5840
0e174     00 12 06 F6 | 	mov	arg01, #0
0e178     00 16 06 F6 | 	mov	arg03, #0
0e17c     90 94 B1 FD | 	call	#__system___basic_print_string
0e180     00 12 06 F6 | 	mov	arg01, #0
0e184     34 E4 B1 FD | 	call	#__system___getiolock_0603
0e188     FD 00 68 FC | 	wrlong	#0, result1
0e18c     27 12 06 F6 | 	mov	arg01, #39
0e190     00 14 06 F6 | 	mov	arg02, #0
0e194     90 4D B1 FD | 	call	#_printerror
0e198     B8 00 90 FD | 	jmp	#LR__1183
0e19c                 | LR__1180
0e19c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0e19c     0C 4E 05 F1 | 	add	fp, #12
0e1a0     A7 26 02 FB | 	rdlong	local01, fp
0e1a4     0C 4E 85 F1 | 	sub	fp, #12
0e1a8     02 26 0E F2 | 	cmp	local01, #2 wz
0e1ac     38 00 90 5D |  if_ne	jmp	#LR__1181
0e1b0     D4 F3 BF FD | 	call	#_pop
0e1b4     FF 26 02 F6 | 	mov	local01, result3
0e1b8     A7 FA 61 FC | 	wrlong	result1, fp
0e1bc     04 4E 05 F1 | 	add	fp, #4
0e1c0     A7 FC 61 FC | 	wrlong	result2, fp
0e1c4     04 4E 05 F1 | 	add	fp, #4
0e1c8     A7 26 62 FC | 	wrlong	local01, fp
0e1cc     08 4E 85 F1 | 	sub	fp, #8
0e1d0     A7 12 02 F6 | 	mov	arg01, fp
0e1d4     94 F5 BF FD | 	call	#_converttoint
0e1d8     14 4E 05 F1 | 	add	fp, #20
0e1dc     A7 FA 61 FC | 	wrlong	result1, fp
0e1e0     14 4E 85 F1 | 	sub	fp, #20
0e1e4     0C 00 90 FD | 	jmp	#LR__1182
0e1e8                 | LR__1181
0e1e8     14 4E 05 F1 | 	add	fp, #20
0e1ec     A7 00 68 FC | 	wrlong	#0, fp
0e1f0     14 4E 85 F1 | 	sub	fp, #20
0e1f4                 | LR__1182
0e1f4     90 F3 BF FD | 	call	#_pop
0e1f8     FF 26 02 F6 | 	mov	local01, result3
0e1fc     A7 FA 61 FC | 	wrlong	result1, fp
0e200     04 4E 05 F1 | 	add	fp, #4
0e204     A7 FC 61 FC | 	wrlong	result2, fp
0e208     04 4E 05 F1 | 	add	fp, #4
0e20c     A7 26 62 FC | 	wrlong	local01, fp
0e210     08 4E 85 F1 | 	sub	fp, #8
0e214     A7 12 02 F6 | 	mov	arg01, fp
0e218     50 F5 BF FD | 	call	#_converttoint
0e21c     10 4E 05 F1 | 	add	fp, #16
0e220     A7 FA 61 FC | 	wrlong	result1, fp
0e224     FD 12 02 F6 | 	mov	arg01, result1
0e228     04 4E 05 F1 | 	add	fp, #4
0e22c     A7 14 02 FB | 	rdlong	arg02, fp
0e230     14 4E 85 F1 | 	sub	fp, #20
0e234     02 16 06 F6 | 	mov	arg03, #2
0e238     B0 A9 B1 FD | 	call	#__system__Number_S
0e23c     A7 FA 61 FC | 	wrlong	result1, fp
0e240     08 4E 05 F1 | 	add	fp, #8
0e244     A7 3E 68 FC | 	wrlong	#31, fp
0e248     08 4E 85 F1 | 	sub	fp, #8
0e24c     A7 12 02 F6 | 	mov	arg01, fp
0e250     CC F3 BF FD | 	call	#_push
0e254                 | LR__1183
0e254     A7 F0 03 F6 | 	mov	ptra, fp
0e258     B2 00 A0 FD | 	call	#popregs_
0e25c                 | _do_bin_ret
0e25c     2D 00 64 FD | 	ret
0e260                 | 
0e260                 | ' 
0e260                 | ' '-------------------- box
0e260                 | ' 
0e260                 | ' sub do_box
0e260                 | _do_box
0e260     03 4A 05 F6 | 	mov	COUNT_, #3
0e264     A8 00 A0 FD | 	call	#pushregs_
0e268     30 F0 07 F1 | 	add	ptra, #48
0e26c     18 F3 BF FD | 	call	#_pop
0e270     FD 1A 02 F6 | 	mov	arg05, result1
0e274     FE 18 02 F6 | 	mov	arg04, result2
0e278     FF 16 02 F6 | 	mov	arg03, result3
0e27c     24 4E 05 F1 | 	add	fp, #36
0e280     A7 1A 62 FC | 	wrlong	arg05, fp
0e284     04 4E 05 F1 | 	add	fp, #4
0e288     A7 18 62 FC | 	wrlong	arg04, fp
0e28c     04 4E 05 F1 | 	add	fp, #4
0e290     A7 16 62 FC | 	wrlong	arg03, fp
0e294     2C 4E 85 F1 | 	sub	fp, #44
0e298     EC F2 BF FD | 	call	#_pop
0e29c     FD 1A 02 F6 | 	mov	arg05, result1
0e2a0     FE 18 02 F6 | 	mov	arg04, result2
0e2a4     FF 16 02 F6 | 	mov	arg03, result3
0e2a8     18 4E 05 F1 | 	add	fp, #24
0e2ac     A7 1A 62 FC | 	wrlong	arg05, fp
0e2b0     04 4E 05 F1 | 	add	fp, #4
0e2b4     A7 18 62 FC | 	wrlong	arg04, fp
0e2b8     04 4E 05 F1 | 	add	fp, #4
0e2bc     A7 16 62 FC | 	wrlong	arg03, fp
0e2c0     20 4E 85 F1 | 	sub	fp, #32
0e2c4     C0 F2 BF FD | 	call	#_pop
0e2c8     FD 1A 02 F6 | 	mov	arg05, result1
0e2cc     FE 18 02 F6 | 	mov	arg04, result2
0e2d0     FF 26 02 F6 | 	mov	local01, result3
0e2d4     0C 4E 05 F1 | 	add	fp, #12
0e2d8     A7 1A 62 FC | 	wrlong	arg05, fp
0e2dc     04 4E 05 F1 | 	add	fp, #4
0e2e0     A7 18 62 FC | 	wrlong	arg04, fp
0e2e4     04 4E 05 F1 | 	add	fp, #4
0e2e8     A7 26 62 FC | 	wrlong	local01, fp
0e2ec     14 4E 85 F1 | 	sub	fp, #20
0e2f0     94 F2 BF FD | 	call	#_pop
0e2f4     A7 FA 61 FC | 	wrlong	result1, fp
0e2f8     04 4E 05 F1 | 	add	fp, #4
0e2fc     A7 FC 61 FC | 	wrlong	result2, fp
0e300     04 4E 05 F1 | 	add	fp, #4
0e304     A7 FE 61 FC | 	wrlong	result3, fp
0e308                 | ' 
0e308                 | ' t4=pop()
0e308                 | ' t3=pop()
0e308                 | ' t2=pop()
0e308                 | ' t1=pop()
0e308                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0e308     FF 1A 02 F6 | 	mov	arg05, result3
0e30c     08 4E 85 F1 | 	sub	fp, #8
0e310     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0e314     08 4E 05 51 |  if_ne	add	fp, #8
0e318     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e31c     08 4E 85 51 |  if_ne	sub	fp, #8
0e320     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e324     A8 00 90 5D |  if_ne	jmp	#LR__1190
0e328     14 4E 05 F1 | 	add	fp, #20
0e32c     A7 26 02 FB | 	rdlong	local01, fp
0e330     14 4E 85 F1 | 	sub	fp, #20
0e334     1C 26 0E F2 | 	cmp	local01, #28 wz
0e338     14 4E 05 51 |  if_ne	add	fp, #20
0e33c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e340     14 4E 85 51 |  if_ne	sub	fp, #20
0e344     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e348     84 00 90 5D |  if_ne	jmp	#LR__1190
0e34c     20 4E 05 F1 | 	add	fp, #32
0e350     A7 26 02 FB | 	rdlong	local01, fp
0e354     20 4E 85 F1 | 	sub	fp, #32
0e358     1C 26 0E F2 | 	cmp	local01, #28 wz
0e35c     20 4E 05 51 |  if_ne	add	fp, #32
0e360     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e364     20 4E 85 51 |  if_ne	sub	fp, #32
0e368     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e36c     60 00 90 5D |  if_ne	jmp	#LR__1190
0e370     2C 4E 05 F1 | 	add	fp, #44
0e374     A7 26 02 FB | 	rdlong	local01, fp
0e378     2C 4E 85 F1 | 	sub	fp, #44
0e37c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e380     2C 4E 05 51 |  if_ne	add	fp, #44
0e384     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0e388     2C 4E 85 51 |  if_ne	sub	fp, #44
0e38c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0e390     3C 00 90 5D |  if_ne	jmp	#LR__1190
0e394     A7 12 02 FB | 	rdlong	arg01, fp
0e398     0C 4E 05 F1 | 	add	fp, #12
0e39c     A7 14 02 FB | 	rdlong	arg02, fp
0e3a0     0C 4E 05 F1 | 	add	fp, #12
0e3a4     A7 16 02 FB | 	rdlong	arg03, fp
0e3a8     0C 4E 05 F1 | 	add	fp, #12
0e3ac     A7 18 02 FB | 	rdlong	arg04, fp
0e3b0     24 4E 85 F1 | 	sub	fp, #36
0e3b4     37 00 00 FF 
0e3b8     28 E4 05 F1 | 	add	objptr, ##28200
0e3bc     F2 1A 02 FB | 	rdlong	arg05, objptr
0e3c0     37 00 00 FF 
0e3c4     28 E4 85 F1 | 	sub	objptr, ##28200
0e3c8     00 66 B1 FD | 	call	#_hg010b_spin2_box
0e3cc                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0e3cc     6C 00 90 FD | 	jmp	#LR__1191
0e3d0                 | LR__1190
0e3d0     A7 12 02 F6 | 	mov	arg01, fp
0e3d4     94 F3 BF FD | 	call	#_converttoint
0e3d8     FD 28 02 F6 | 	mov	local02, result1
0e3dc     0C 4E 05 F1 | 	add	fp, #12
0e3e0     A7 12 02 F6 | 	mov	arg01, fp
0e3e4     0C 4E 85 F1 | 	sub	fp, #12
0e3e8     80 F3 BF FD | 	call	#_converttoint
0e3ec     FD 2A 02 F6 | 	mov	local03, result1
0e3f0     18 4E 05 F1 | 	add	fp, #24
0e3f4     A7 12 02 F6 | 	mov	arg01, fp
0e3f8     18 4E 85 F1 | 	sub	fp, #24
0e3fc     6C F3 BF FD | 	call	#_converttoint
0e400     FD 26 02 F6 | 	mov	local01, result1
0e404     24 4E 05 F1 | 	add	fp, #36
0e408     A7 12 02 F6 | 	mov	arg01, fp
0e40c     24 4E 85 F1 | 	sub	fp, #36
0e410     58 F3 BF FD | 	call	#_converttoint
0e414     FD 18 02 F6 | 	mov	arg04, result1
0e418     37 00 00 FF 
0e41c     28 E4 05 F1 | 	add	objptr, ##28200
0e420     F2 1A 02 FB | 	rdlong	arg05, objptr
0e424     37 00 00 FF 
0e428     28 E4 85 F1 | 	sub	objptr, ##28200
0e42c     14 13 02 F6 | 	mov	arg01, local02
0e430     15 15 02 F6 | 	mov	arg02, local03
0e434     13 17 02 F6 | 	mov	arg03, local01
0e438     90 65 B1 FD | 	call	#_hg010b_spin2_box
0e43c                 | LR__1191
0e43c     A7 F0 03 F6 | 	mov	ptra, fp
0e440     B2 00 A0 FD | 	call	#popregs_
0e444                 | _do_box_ret
0e444     2D 00 64 FD | 	ret
0e448                 | 
0e448                 | ' 
0e448                 | ' '-------------------- brun
0e448                 | ' 
0e448                 | ' sub do_brun
0e448                 | _do_brun
0e448     08 4A 05 F6 | 	mov	COUNT_, #8
0e44c     A8 00 A0 FD | 	call	#pushregs_
0e450     34 F1 BF FD | 	call	#_pop
0e454     FE 1A 02 F6 | 	mov	arg05, result2
0e458     FF 18 02 F6 | 	mov	arg04, result3
0e45c     FD 26 02 F6 | 	mov	local01, result1
0e460     0D 29 02 F6 | 	mov	local02, arg05
0e464     0C 2B 02 F6 | 	mov	local03, arg04
0e468                 | ' 
0e468                 | ' t1=pop() 
0e468                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0e468     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e46c     10 00 90 5D |  if_ne	jmp	#LR__1200
0e470     13 13 02 F6 | 	mov	arg01, local01
0e474     88 F2 BF FD | 	call	#_convertstring
0e478     FD 26 02 F6 | 	mov	local01, result1
0e47c     1F 2A 06 F6 | 	mov	local03, #31
0e480                 | LR__1200
0e480                 | ' if t1.result_type=result_string then
0e480     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e484     F0 01 90 5D |  if_ne	jmp	#LR__1204
0e488     13 2D 02 F6 | 	mov	local04, local01
0e48c                 | '   filename=t1.result.sresult
0e48c                 | '   if left$(filename,1)="/" then 
0e48c     16 13 02 F6 | 	mov	arg01, local04
0e490     01 14 06 F6 | 	mov	arg02, #1
0e494     00 A5 B1 FD | 	call	#__system__Left_S
0e498     FD 12 02 F6 | 	mov	arg01, result1
0e49c     B5 01 00 FF 
0e4a0     D6 15 06 F6 | 	mov	arg02, ##@LR__5841
0e4a4     98 84 B1 FD | 	call	#__system___string_cmp
0e4a8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e4ac     16 2F 02 A6 |  if_e	mov	local05, local04
0e4b0     14 00 90 AD |  if_e	jmp	#LR__1201
0e4b4     B5 01 00 FF 
0e4b8     D8 13 06 F6 | 	mov	arg01, ##@LR__5842
0e4bc     16 15 02 F6 | 	mov	arg02, local04
0e4c0     B0 84 B1 FD | 	call	#__system___string_concat
0e4c4     FD 2E 02 F6 | 	mov	local05, result1
0e4c8                 | LR__1201
0e4c8                 | '   open fullfilename for input as #9
0e4c8     09 12 06 F6 | 	mov	arg01, #9
0e4cc     17 15 02 F6 | 	mov	arg02, local05
0e4d0     00 16 06 F6 | 	mov	arg03, #0
0e4d4     44 90 B1 FD | 	call	#__system___basic_open_string
0e4d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4dc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e4e0     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e4e4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4e8     FD 30 0A F6 | 	mov	local06, result1 wz
0e4ec                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0e4ec     8C 00 90 AD |  if_e	jmp	#LR__1202
0e4f0     00 12 06 F6 | 	mov	arg01, #0
0e4f4     C4 E0 B1 FD | 	call	#__system___getiolock_0603
0e4f8     FD 12 02 F6 | 	mov	arg01, result1
0e4fc     18 84 B1 FD | 	call	#__system___lockmem
0e500     B5 01 00 FF 
0e504     E1 15 06 F6 | 	mov	arg02, ##@LR__5843
0e508     00 12 06 F6 | 	mov	arg01, #0
0e50c     00 16 06 F6 | 	mov	arg03, #0
0e510     FC 90 B1 FD | 	call	#__system___basic_print_string
0e514     00 12 06 F6 | 	mov	arg01, #0
0e518     18 15 02 F6 | 	mov	arg02, local06
0e51c     00 16 06 F6 | 	mov	arg03, #0
0e520     0A 18 06 F6 | 	mov	arg04, #10
0e524     2C 91 B1 FD | 	call	#__system___basic_print_integer
0e528     B5 01 00 FF 
0e52c     EF 15 06 F6 | 	mov	arg02, ##@LR__5844
0e530     00 12 06 F6 | 	mov	arg01, #0
0e534     00 16 06 F6 | 	mov	arg03, #0
0e538     D4 90 B1 FD | 	call	#__system___basic_print_string
0e53c     18 13 02 F6 | 	mov	arg01, local06
0e540     64 AD B1 FD | 	call	#__system___strerror
0e544     FD 14 02 F6 | 	mov	arg02, result1
0e548     00 12 06 F6 | 	mov	arg01, #0
0e54c     00 16 06 F6 | 	mov	arg03, #0
0e550     BC 90 B1 FD | 	call	#__system___basic_print_string
0e554     00 12 06 F6 | 	mov	arg01, #0
0e558     0A 14 06 F6 | 	mov	arg02, #10
0e55c     00 16 06 F6 | 	mov	arg03, #0
0e560     54 90 B1 FD | 	call	#__system___basic_print_char
0e564     00 12 06 F6 | 	mov	arg01, #0
0e568     50 E0 B1 FD | 	call	#__system___getiolock_0603
0e56c     FD 00 68 FC | 	wrlong	#0, result1
0e570     09 12 06 F6 | 	mov	arg01, #9
0e574     FC D6 B1 FD | 	call	#__system__close
0e578     FC 00 90 FD | 	jmp	#LR__1205
0e57c                 | LR__1202
0e57c     01 32 06 F6 | 	mov	local07, #1
0e580     00 34 06 F6 | 	mov	local08, #0
0e584                 | '   do
0e584                 | LR__1203
0e584                 | '     get #9,pos,block(0),1024,r : pos+=r	
0e584     4E 00 00 FF 
0e588     B4 E4 05 F1 | 	add	objptr, ##40116
0e58c     F2 16 02 F6 | 	mov	arg03, objptr
0e590     4E 00 00 FF 
0e594     B4 E4 85 F1 | 	sub	objptr, ##40116
0e598     09 12 06 F6 | 	mov	arg01, #9
0e59c     19 15 02 F6 | 	mov	arg02, local07
0e5a0     0A 18 C6 F9 | 	decod	arg04, #10
0e5a4     01 1A 06 F6 | 	mov	arg05, #1
0e5a8     E0 91 B1 FD | 	call	#__system___basic_get
0e5ac     FD 30 02 F6 | 	mov	local06, result1
0e5b0     FD 32 02 F1 | 	add	local07, result1
0e5b4     4E 00 00 FF 
0e5b8     B4 E4 05 F1 | 	add	objptr, ##40116
0e5bc     F2 12 02 F6 | 	mov	arg01, objptr
0e5c0     1A 15 02 F6 | 	mov	arg02, local08
0e5c4     0A 16 C6 F9 | 	decod	arg03, #10
0e5c8     42 00 00 FF 
0e5cc     E8 E5 85 F1 | 	sub	objptr, ##34280
0e5d0     58 77 B1 FD | 	call	#_psram_spin2_write
0e5d4     0B 00 00 FF 
0e5d8     CC E4 85 F1 | 	sub	objptr, ##5836
0e5dc     18 35 02 F1 | 	add	local08, local06
0e5e0     02 00 00 FF 
0e5e4     00 30 0E F2 | 	cmp	local06, ##1024 wz
0e5e8     E0 03 00 AF 
0e5ec     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0e5f0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1203
0e5f4     36 00 00 FF 
0e5f8     FC E5 05 F1 | 	add	objptr, ##28156
0e5fc     F2 12 02 FB | 	rdlong	arg01, objptr
0e600     03 12 62 FD | 	cogstop	arg01
0e604     04 E4 05 F1 | 	add	objptr, #4
0e608     F2 12 02 FB | 	rdlong	arg01, objptr
0e60c     03 12 62 FD | 	cogstop	arg01
0e610     04 E4 05 F1 | 	add	objptr, #4
0e614     F2 12 02 FB | 	rdlong	arg01, objptr
0e618     03 12 62 FD | 	cogstop	arg01
0e61c     19 00 00 FF 
0e620     3C E5 05 F1 | 	add	objptr, ##13116
0e624     F2 12 02 FB | 	rdlong	arg01, objptr
0e628     03 12 62 FD | 	cogstop	arg01
0e62c     18 00 00 FF 
0e630     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0e634     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0e638     18 00 00 FF 
0e63c     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0e640     19 00 00 FF 
0e644     34 E5 85 F1 | 	sub	objptr, ##13108
0e648     1E 34 06 F6 | 	mov	local08, #30
0e64c     28 E4 61 FD | 	setq	objptr
0e650     0A 35 F2 FC | 	coginit	local08, arg02 wc
0e654     01 34 66 C6 |  if_b	neg	local08, #1
0e658     1B 00 00 FF 
0e65c     0C E5 05 F1 | 	add	objptr, ##14092
0e660     F2 34 62 FC | 	wrlong	local08, objptr
0e664     52 00 00 FF 
0e668     18 E5 85 F1 | 	sub	objptr, ##42264
0e66c     00 12 06 F6 | 	mov	arg01, #0
0e670     01 12 62 FD | 	cogid	arg01
0e674     03 12 62 FD | 	cogstop	arg01
0e678                 | LR__1204
0e678                 | LR__1205
0e678     A7 F0 03 F6 | 	mov	ptra, fp
0e67c     B2 00 A0 FD | 	call	#popregs_
0e680                 | _do_brun_ret
0e680     2D 00 64 FD | 	ret
0e684                 | 
0e684                 | ' 
0e684                 | ' '-------------------- cd
0e684                 | ' 
0e684                 | ' sub do_cd
0e684                 | _do_cd
0e684     06 4A 05 F6 | 	mov	COUNT_, #6
0e688     A8 00 A0 FD | 	call	#pushregs_
0e68c     B5 01 00 FF 
0e690     F2 13 06 F6 | 	mov	arg01, ##@LR__5845
0e694     31 14 06 F6 | 	mov	arg02, #49
0e698     E0 E0 B1 FD | 	call	#__system___basic_dir
0e69c     E8 EE BF FD | 	call	#_pop
0e6a0     FE 18 02 F6 | 	mov	arg04, result2
0e6a4     FF 16 02 F6 | 	mov	arg03, result3
0e6a8     FD 26 02 F6 | 	mov	local01, result1
0e6ac     0C 29 02 F6 | 	mov	local02, arg04
0e6b0     0B 2B 02 F6 | 	mov	local03, arg03
0e6b4                 | ' t1=pop()
0e6b4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0e6b4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0e6b8     10 00 90 5D |  if_ne	jmp	#LR__1210
0e6bc     13 13 02 F6 | 	mov	arg01, local01
0e6c0     3C F0 BF FD | 	call	#_convertstring
0e6c4     FD 26 02 F6 | 	mov	local01, result1
0e6c8     1F 2A 06 F6 | 	mov	local03, #31
0e6cc                 | LR__1210
0e6cc                 | ' if t1.result_type<>result_string then printerror(15): return
0e6cc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0e6d0     10 00 90 AD |  if_e	jmp	#LR__1211
0e6d4     0F 12 06 F6 | 	mov	arg01, #15
0e6d8     00 14 06 F6 | 	mov	arg02, #0
0e6dc     48 48 B1 FD | 	call	#_printerror
0e6e0     54 05 90 FD | 	jmp	#LR__1229
0e6e4                 | LR__1211
0e6e4     13 2D 02 F6 | 	mov	local04, local01
0e6e8                 | ' newdir$=t1.result.sresult
0e6e8                 | ' if newdir$=".." then 
0e6e8     B5 01 00 FF 
0e6ec     F4 15 06 F6 | 	mov	arg02, ##@LR__5846
0e6f0     16 13 02 F6 | 	mov	arg01, local04
0e6f4     48 82 B1 FD | 	call	#__system___string_cmp
0e6f8     00 FA 0D F2 | 	cmp	result1, #0 wz
0e6fc     C8 01 90 5D |  if_ne	jmp	#LR__1218
0e700     4A 00 00 FF 
0e704     94 E4 05 F1 | 	add	objptr, ##38036
0e708     F2 12 02 FB | 	rdlong	arg01, objptr
0e70c     4A 00 00 FF 
0e710     94 E4 85 F1 | 	sub	objptr, ##38036
0e714     09 2F 02 F6 | 	mov	local05, arg01
0e718     97 06 48 FB | 	callpa	#(@LR__1213-@LR__1212)>>2,fcache_load_ptr_
0e71c                 | LR__1212
0e71c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0e720     01 2E 06 51 |  if_ne	add	local05, #1
0e724     F4 FF 9F 5D |  if_ne	jmp	#LR__1212
0e728                 | LR__1213
0e728     17 13 C2 F2 | 	subr	arg01, local05
0e72c     4A 00 00 FF 
0e730     94 E4 05 F1 | 	add	objptr, ##38036
0e734     F2 14 02 FB | 	rdlong	arg02, objptr
0e738     4A 00 00 FF 
0e73c     94 E4 85 F1 | 	sub	objptr, ##38036
0e740     B5 01 00 FF 
0e744     F7 17 06 F6 | 	mov	arg03, ##@LR__5847
0e748     98 A8 B1 FD | 	call	#__system__InstrRev
0e74c     FD 2C 02 F6 | 	mov	local04, result1
0e750                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0e750     02 2C 56 F2 | 	cmps	local04, #2 wc
0e754     28 00 90 CD |  if_b	jmp	#LR__1214
0e758     4A 00 00 FF 
0e75c     94 E4 05 F1 | 	add	objptr, ##38036
0e760     F2 12 02 FB | 	rdlong	arg01, objptr
0e764     4A 00 00 FF 
0e768     94 E4 85 F1 | 	sub	objptr, ##38036
0e76c     01 2C 86 F1 | 	sub	local04, #1
0e770     16 15 02 F6 | 	mov	arg02, local04
0e774     20 A2 B1 FD | 	call	#__system__Left_S
0e778     FD 2C 02 F6 | 	mov	local04, result1
0e77c     08 00 90 FD | 	jmp	#LR__1215
0e780                 | LR__1214
0e780     B5 01 00 FF 
0e784     F9 2D 06 F6 | 	mov	local04, ##@LR__5848
0e788                 | LR__1215
0e788     16 13 02 F6 | 	mov	arg01, local04
0e78c     14 88 B1 FD | 	call	#__system___chdir
0e790     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e794     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e798     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e79c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e7a0     FD 30 0A F6 | 	mov	local06, result1 wz
0e7a4                 | '   chdir newdir$
0e7a4                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e7a4     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e7a8     A4 00 90 AD |  if_e	jmp	#LR__1216
0e7ac     00 12 06 F6 | 	mov	arg01, #0
0e7b0     08 DE B1 FD | 	call	#__system___getiolock_0603
0e7b4     FD 12 02 F6 | 	mov	arg01, result1
0e7b8     5C 81 B1 FD | 	call	#__system___lockmem
0e7bc     B5 01 00 FF 
0e7c0     FB 15 06 F6 | 	mov	arg02, ##@LR__5849
0e7c4     00 12 06 F6 | 	mov	arg01, #0
0e7c8     00 16 06 F6 | 	mov	arg03, #0
0e7cc     40 8E B1 FD | 	call	#__system___basic_print_string
0e7d0     00 12 06 F6 | 	mov	arg01, #0
0e7d4     18 15 02 F6 | 	mov	arg02, local06
0e7d8     00 16 06 F6 | 	mov	arg03, #0
0e7dc     0A 18 06 F6 | 	mov	arg04, #10
0e7e0     70 8E B1 FD | 	call	#__system___basic_print_integer
0e7e4     B6 01 00 FF 
0e7e8     09 14 06 F6 | 	mov	arg02, ##@LR__5850
0e7ec     00 12 06 F6 | 	mov	arg01, #0
0e7f0     00 16 06 F6 | 	mov	arg03, #0
0e7f4     18 8E B1 FD | 	call	#__system___basic_print_string
0e7f8     45 00 00 FF 
0e7fc     50 E5 05 F1 | 	add	objptr, ##35664
0e800     F2 14 02 FB | 	rdlong	arg02, objptr
0e804     45 00 00 FF 
0e808     50 E5 85 F1 | 	sub	objptr, ##35664
0e80c     00 12 06 F6 | 	mov	arg01, #0
0e810     00 16 06 F6 | 	mov	arg03, #0
0e814     F8 8D B1 FD | 	call	#__system___basic_print_string
0e818     00 12 06 F6 | 	mov	arg01, #0
0e81c     0A 14 06 F6 | 	mov	arg02, #10
0e820     00 16 06 F6 | 	mov	arg03, #0
0e824     90 8D B1 FD | 	call	#__system___basic_print_char
0e828     00 12 06 F6 | 	mov	arg01, #0
0e82c     8C DD B1 FD | 	call	#__system___getiolock_0603
0e830     FD 00 68 FC | 	wrlong	#0, result1
0e834     4A 00 00 FF 
0e838     94 E4 05 F1 | 	add	objptr, ##38036
0e83c     F2 12 02 FB | 	rdlong	arg01, objptr
0e840     4A 00 00 FF 
0e844     94 E4 85 F1 | 	sub	objptr, ##38036
0e848     58 87 B1 FD | 	call	#__system___chdir
0e84c     14 00 90 FD | 	jmp	#LR__1217
0e850                 | LR__1216
0e850     4A 00 00 FF 
0e854     94 E4 05 F1 | 	add	objptr, ##38036
0e858     F2 2C 62 FC | 	wrlong	local04, objptr
0e85c     4A 00 00 FF 
0e860     94 E4 85 F1 | 	sub	objptr, ##38036
0e864                 | LR__1217
0e864                 | '   print "Current directory: ";currentdir$
0e864     00 12 06 F6 | 	mov	arg01, #0
0e868     50 DD B1 FD | 	call	#__system___getiolock_0603
0e86c     FD 12 02 F6 | 	mov	arg01, result1
0e870     A4 80 B1 FD | 	call	#__system___lockmem
0e874     B6 01 00 FF 
0e878     0C 14 06 F6 | 	mov	arg02, ##@LR__5851
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     00 16 06 F6 | 	mov	arg03, #0
0e884     88 8D B1 FD | 	call	#__system___basic_print_string
0e888     4A 00 00 FF 
0e88c     94 E4 05 F1 | 	add	objptr, ##38036
0e890     F2 14 02 FB | 	rdlong	arg02, objptr
0e894     4A 00 00 FF 
0e898     94 E4 85 F1 | 	sub	objptr, ##38036
0e89c     00 12 06 F6 | 	mov	arg01, #0
0e8a0     00 16 06 F6 | 	mov	arg03, #0
0e8a4     68 8D B1 FD | 	call	#__system___basic_print_string
0e8a8     00 12 06 F6 | 	mov	arg01, #0
0e8ac     0A 14 06 F6 | 	mov	arg02, #10
0e8b0     00 16 06 F6 | 	mov	arg03, #0
0e8b4     00 8D B1 FD | 	call	#__system___basic_print_char
0e8b8     00 12 06 F6 | 	mov	arg01, #0
0e8bc     FC DC B1 FD | 	call	#__system___getiolock_0603
0e8c0     FD 00 68 FC | 	wrlong	#0, result1
0e8c4                 | '   return
0e8c4     70 03 90 FD | 	jmp	#LR__1229
0e8c8                 | LR__1218
0e8c8                 | ' if left$(newdir$,1)="/" then 
0e8c8     16 13 02 F6 | 	mov	arg01, local04
0e8cc     01 14 06 F6 | 	mov	arg02, #1
0e8d0     C4 A0 B1 FD | 	call	#__system__Left_S
0e8d4     FD 12 02 F6 | 	mov	arg01, result1
0e8d8     B6 01 00 FF 
0e8dc     20 14 06 F6 | 	mov	arg02, ##@LR__5852
0e8e0     5C 80 B1 FD | 	call	#__system___string_cmp
0e8e4     00 FA 0D F2 | 	cmp	result1, #0 wz
0e8e8     40 01 90 5D |  if_ne	jmp	#LR__1221
0e8ec     16 13 02 F6 | 	mov	arg01, local04
0e8f0     B0 86 B1 FD | 	call	#__system___chdir
0e8f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e8f8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0e8fc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0e900     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e904     FD 30 0A F6 | 	mov	local06, result1 wz
0e908                 | '   chdir(newdir$)
0e908                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0e908     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0e90c     A4 00 90 AD |  if_e	jmp	#LR__1219
0e910     00 12 06 F6 | 	mov	arg01, #0
0e914     A4 DC B1 FD | 	call	#__system___getiolock_0603
0e918     FD 12 02 F6 | 	mov	arg01, result1
0e91c     F8 7F B1 FD | 	call	#__system___lockmem
0e920     B6 01 00 FF 
0e924     22 14 06 F6 | 	mov	arg02, ##@LR__5853
0e928     00 12 06 F6 | 	mov	arg01, #0
0e92c     00 16 06 F6 | 	mov	arg03, #0
0e930     DC 8C B1 FD | 	call	#__system___basic_print_string
0e934     00 12 06 F6 | 	mov	arg01, #0
0e938     18 15 02 F6 | 	mov	arg02, local06
0e93c     00 16 06 F6 | 	mov	arg03, #0
0e940     0A 18 06 F6 | 	mov	arg04, #10
0e944     0C 8D B1 FD | 	call	#__system___basic_print_integer
0e948     B6 01 00 FF 
0e94c     30 14 06 F6 | 	mov	arg02, ##@LR__5854
0e950     00 12 06 F6 | 	mov	arg01, #0
0e954     00 16 06 F6 | 	mov	arg03, #0
0e958     B4 8C B1 FD | 	call	#__system___basic_print_string
0e95c     45 00 00 FF 
0e960     50 E5 05 F1 | 	add	objptr, ##35664
0e964     F2 14 02 FB | 	rdlong	arg02, objptr
0e968     45 00 00 FF 
0e96c     50 E5 85 F1 | 	sub	objptr, ##35664
0e970     00 12 06 F6 | 	mov	arg01, #0
0e974     00 16 06 F6 | 	mov	arg03, #0
0e978     94 8C B1 FD | 	call	#__system___basic_print_string
0e97c     00 12 06 F6 | 	mov	arg01, #0
0e980     0A 14 06 F6 | 	mov	arg02, #10
0e984     00 16 06 F6 | 	mov	arg03, #0
0e988     2C 8C B1 FD | 	call	#__system___basic_print_char
0e98c     00 12 06 F6 | 	mov	arg01, #0
0e990     28 DC B1 FD | 	call	#__system___getiolock_0603
0e994     FD 00 68 FC | 	wrlong	#0, result1
0e998     4A 00 00 FF 
0e99c     94 E4 05 F1 | 	add	objptr, ##38036
0e9a0     F2 12 02 FB | 	rdlong	arg01, objptr
0e9a4     4A 00 00 FF 
0e9a8     94 E4 85 F1 | 	sub	objptr, ##38036
0e9ac     F4 85 B1 FD | 	call	#__system___chdir
0e9b0     14 00 90 FD | 	jmp	#LR__1220
0e9b4                 | LR__1219
0e9b4     4A 00 00 FF 
0e9b8     94 E4 05 F1 | 	add	objptr, ##38036
0e9bc     F2 2C 62 FC | 	wrlong	local04, objptr
0e9c0     4A 00 00 FF 
0e9c4     94 E4 85 F1 | 	sub	objptr, ##38036
0e9c8                 | LR__1220
0e9c8                 | '   print "Current directory: ";currentdir$
0e9c8     00 12 06 F6 | 	mov	arg01, #0
0e9cc     EC DB B1 FD | 	call	#__system___getiolock_0603
0e9d0     FD 12 02 F6 | 	mov	arg01, result1
0e9d4     40 7F B1 FD | 	call	#__system___lockmem
0e9d8     B6 01 00 FF 
0e9dc     33 14 06 F6 | 	mov	arg02, ##@LR__5855
0e9e0     00 12 06 F6 | 	mov	arg01, #0
0e9e4     00 16 06 F6 | 	mov	arg03, #0
0e9e8     24 8C B1 FD | 	call	#__system___basic_print_string
0e9ec     4A 00 00 FF 
0e9f0     94 E4 05 F1 | 	add	objptr, ##38036
0e9f4     F2 14 02 FB | 	rdlong	arg02, objptr
0e9f8     4A 00 00 FF 
0e9fc     94 E4 85 F1 | 	sub	objptr, ##38036
0ea00     00 12 06 F6 | 	mov	arg01, #0
0ea04     00 16 06 F6 | 	mov	arg03, #0
0ea08     04 8C B1 FD | 	call	#__system___basic_print_string
0ea0c     00 12 06 F6 | 	mov	arg01, #0
0ea10     0A 14 06 F6 | 	mov	arg02, #10
0ea14     00 16 06 F6 | 	mov	arg03, #0
0ea18     9C 8B B1 FD | 	call	#__system___basic_print_char
0ea1c     00 12 06 F6 | 	mov	arg01, #0
0ea20     98 DB B1 FD | 	call	#__system___getiolock_0603
0ea24     FD 00 68 FC | 	wrlong	#0, result1
0ea28                 | '   return
0ea28     0C 02 90 FD | 	jmp	#LR__1229
0ea2c                 | LR__1221
0ea2c                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0ea2c     4A 00 00 FF 
0ea30     94 E4 05 F1 | 	add	objptr, ##38036
0ea34     F2 12 02 FB | 	rdlong	arg01, objptr
0ea38     4A 00 00 FF 
0ea3c     94 E4 85 F1 | 	sub	objptr, ##38036
0ea40     B6 01 00 FF 
0ea44     47 14 06 F6 | 	mov	arg02, ##@LR__5856
0ea48     F4 7E B1 FD | 	call	#__system___string_cmp
0ea4c     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea50     34 00 90 AD |  if_e	jmp	#LR__1222
0ea54     4A 00 00 FF 
0ea58     94 E4 05 F1 | 	add	objptr, ##38036
0ea5c     F2 12 02 FB | 	rdlong	arg01, objptr
0ea60     4A 00 00 FF 
0ea64     94 E4 85 F1 | 	sub	objptr, ##38036
0ea68     B6 01 00 FF 
0ea6c     49 14 06 F6 | 	mov	arg02, ##@LR__5857
0ea70     00 7F B1 FD | 	call	#__system___string_concat
0ea74     FD 12 02 F6 | 	mov	arg01, result1
0ea78     16 15 02 F6 | 	mov	arg02, local04
0ea7c     F4 7E B1 FD | 	call	#__system___string_concat
0ea80     FD 2C 02 F6 | 	mov	local04, result1
0ea84     20 00 90 FD | 	jmp	#LR__1223
0ea88                 | LR__1222
0ea88     4A 00 00 FF 
0ea8c     94 E4 05 F1 | 	add	objptr, ##38036
0ea90     F2 12 02 FB | 	rdlong	arg01, objptr
0ea94     4A 00 00 FF 
0ea98     94 E4 85 F1 | 	sub	objptr, ##38036
0ea9c     16 15 02 F6 | 	mov	arg02, local04
0eaa0     D0 7E B1 FD | 	call	#__system___string_concat
0eaa4     FD 2C 02 F6 | 	mov	local04, result1
0eaa8                 | LR__1223
0eaa8                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0eaa8     16 13 02 F6 | 	mov	arg01, local04
0eaac     01 14 06 F6 | 	mov	arg02, #1
0eab0     6C 9F B1 FD | 	call	#__system__Right_S
0eab4     FD 12 02 F6 | 	mov	arg01, result1
0eab8     B6 01 00 FF 
0eabc     4B 14 06 F6 | 	mov	arg02, ##@LR__5858
0eac0     7C 7E B1 FD | 	call	#__system___string_cmp
0eac4     00 FA 0D F2 | 	cmp	result1, #0 wz
0eac8     30 00 90 5D |  if_ne	jmp	#LR__1226
0eacc     16 13 02 F6 | 	mov	arg01, local04
0ead0     09 2F 02 F6 | 	mov	local05, arg01
0ead4     97 06 48 FB | 	callpa	#(@LR__1225-@LR__1224)>>2,fcache_load_ptr_
0ead8                 | LR__1224
0ead8     17 FB C9 FA | 	rdbyte	result1, local05 wz
0eadc     01 2E 06 51 |  if_ne	add	local05, #1
0eae0     F4 FF 9F 5D |  if_ne	jmp	#LR__1224
0eae4                 | LR__1225
0eae4     09 2F 82 F1 | 	sub	local05, arg01
0eae8     17 15 02 F6 | 	mov	arg02, local05
0eaec     01 14 86 F1 | 	sub	arg02, #1
0eaf0     16 13 02 F6 | 	mov	arg01, local04
0eaf4     A0 9E B1 FD | 	call	#__system__Left_S
0eaf8     FD 2C 02 F6 | 	mov	local04, result1
0eafc                 | LR__1226
0eafc     16 13 02 F6 | 	mov	arg01, local04
0eb00     A0 84 B1 FD | 	call	#__system___chdir
0eb04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb08     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0eb0c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0eb10     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb14     FD 30 0A F6 | 	mov	local06, result1 wz
0eb18                 | '   chdir(newdir$)
0eb18                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0eb18     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0eb1c     A4 00 90 AD |  if_e	jmp	#LR__1227
0eb20     00 12 06 F6 | 	mov	arg01, #0
0eb24     94 DA B1 FD | 	call	#__system___getiolock_0603
0eb28     FD 12 02 F6 | 	mov	arg01, result1
0eb2c     E8 7D B1 FD | 	call	#__system___lockmem
0eb30     B6 01 00 FF 
0eb34     4D 14 06 F6 | 	mov	arg02, ##@LR__5859
0eb38     00 12 06 F6 | 	mov	arg01, #0
0eb3c     00 16 06 F6 | 	mov	arg03, #0
0eb40     CC 8A B1 FD | 	call	#__system___basic_print_string
0eb44     00 12 06 F6 | 	mov	arg01, #0
0eb48     18 15 02 F6 | 	mov	arg02, local06
0eb4c     00 16 06 F6 | 	mov	arg03, #0
0eb50     0A 18 06 F6 | 	mov	arg04, #10
0eb54     FC 8A B1 FD | 	call	#__system___basic_print_integer
0eb58     B6 01 00 FF 
0eb5c     5B 14 06 F6 | 	mov	arg02, ##@LR__5860
0eb60     00 12 06 F6 | 	mov	arg01, #0
0eb64     00 16 06 F6 | 	mov	arg03, #0
0eb68     A4 8A B1 FD | 	call	#__system___basic_print_string
0eb6c     45 00 00 FF 
0eb70     50 E5 05 F1 | 	add	objptr, ##35664
0eb74     F2 14 02 FB | 	rdlong	arg02, objptr
0eb78     45 00 00 FF 
0eb7c     50 E5 85 F1 | 	sub	objptr, ##35664
0eb80     00 12 06 F6 | 	mov	arg01, #0
0eb84     00 16 06 F6 | 	mov	arg03, #0
0eb88     84 8A B1 FD | 	call	#__system___basic_print_string
0eb8c     00 12 06 F6 | 	mov	arg01, #0
0eb90     0A 14 06 F6 | 	mov	arg02, #10
0eb94     00 16 06 F6 | 	mov	arg03, #0
0eb98     1C 8A B1 FD | 	call	#__system___basic_print_char
0eb9c     00 12 06 F6 | 	mov	arg01, #0
0eba0     18 DA B1 FD | 	call	#__system___getiolock_0603
0eba4     FD 00 68 FC | 	wrlong	#0, result1
0eba8     4A 00 00 FF 
0ebac     94 E4 05 F1 | 	add	objptr, ##38036
0ebb0     F2 12 02 FB | 	rdlong	arg01, objptr
0ebb4     4A 00 00 FF 
0ebb8     94 E4 85 F1 | 	sub	objptr, ##38036
0ebbc     E4 83 B1 FD | 	call	#__system___chdir
0ebc0     14 00 90 FD | 	jmp	#LR__1228
0ebc4                 | LR__1227
0ebc4     4A 00 00 FF 
0ebc8     94 E4 05 F1 | 	add	objptr, ##38036
0ebcc     F2 2C 62 FC | 	wrlong	local04, objptr
0ebd0     4A 00 00 FF 
0ebd4     94 E4 85 F1 | 	sub	objptr, ##38036
0ebd8                 | LR__1228
0ebd8                 | '   print "Current directory: ";currentdir$
0ebd8     00 12 06 F6 | 	mov	arg01, #0
0ebdc     DC D9 B1 FD | 	call	#__system___getiolock_0603
0ebe0     FD 12 02 F6 | 	mov	arg01, result1
0ebe4     30 7D B1 FD | 	call	#__system___lockmem
0ebe8     B6 01 00 FF 
0ebec     5E 14 06 F6 | 	mov	arg02, ##@LR__5861
0ebf0     00 12 06 F6 | 	mov	arg01, #0
0ebf4     00 16 06 F6 | 	mov	arg03, #0
0ebf8     14 8A B1 FD | 	call	#__system___basic_print_string
0ebfc     4A 00 00 FF 
0ec00     94 E4 05 F1 | 	add	objptr, ##38036
0ec04     F2 14 02 FB | 	rdlong	arg02, objptr
0ec08     4A 00 00 FF 
0ec0c     94 E4 85 F1 | 	sub	objptr, ##38036
0ec10     00 12 06 F6 | 	mov	arg01, #0
0ec14     00 16 06 F6 | 	mov	arg03, #0
0ec18     F4 89 B1 FD | 	call	#__system___basic_print_string
0ec1c     00 12 06 F6 | 	mov	arg01, #0
0ec20     0A 14 06 F6 | 	mov	arg02, #10
0ec24     00 16 06 F6 | 	mov	arg03, #0
0ec28     8C 89 B1 FD | 	call	#__system___basic_print_char
0ec2c     00 12 06 F6 | 	mov	arg01, #0
0ec30     88 D9 B1 FD | 	call	#__system___getiolock_0603
0ec34     FD 00 68 FC | 	wrlong	#0, result1
0ec38                 | LR__1229
0ec38     A7 F0 03 F6 | 	mov	ptra, fp
0ec3c     B2 00 A0 FD | 	call	#popregs_
0ec40                 | _do_cd_ret
0ec40     2D 00 64 FD | 	ret
0ec44                 | 
0ec44                 | ' 
0ec44                 | ' '-------------------- changefreq
0ec44                 | ' 
0ec44                 | ' sub do_changefreq
0ec44                 | _do_changefreq
0ec44     04 4A 05 F6 | 	mov	COUNT_, #4
0ec48     A8 00 A0 FD | 	call	#pushregs_
0ec4c     28 F0 07 F1 | 	add	ptra, #40
0ec50     34 E9 BF FD | 	call	#_pop
0ec54     FF 14 02 F6 | 	mov	arg02, result3
0ec58     A7 FA 61 FC | 	wrlong	result1, fp
0ec5c     04 4E 05 F1 | 	add	fp, #4
0ec60     A7 FC 61 FC | 	wrlong	result2, fp
0ec64     04 4E 05 F1 | 	add	fp, #4
0ec68     A7 14 62 FC | 	wrlong	arg02, fp
0ec6c     08 4E 85 F1 | 	sub	fp, #8
0ec70     A7 12 02 F6 | 	mov	arg01, fp
0ec74     B0 EB BF FD | 	call	#_converttofloat
0ec78     24 4E 05 F1 | 	add	fp, #36
0ec7c     A7 FA 61 FC | 	wrlong	result1, fp
0ec80     24 4E 85 F1 | 	sub	fp, #36
0ec84     FD 14 02 F6 | 	mov	arg02, result1
0ec88     FC 16 20 FF 
0ec8c     54 12 06 F6 | 	mov	arg01, ##1076754516
0ec90     D0 BA B1 FD | 	call	#__system____builtin_logbase
0ec94     FD 26 02 F6 | 	mov	local01, result1
0ec98     1E 14 C6 F9 | 	decod	arg02, #30
0ec9c     FC 16 20 FF 
0eca0     54 12 06 F6 | 	mov	arg01, ##1076754516
0eca4     BC BA B1 FD | 	call	#__system____builtin_logbase
0eca8     FD 14 02 F6 | 	mov	arg02, result1
0ecac     13 13 02 F6 | 	mov	arg01, local01
0ecb0     E4 AC B1 FD | 	call	#__system___float_div
0ecb4     FD 12 02 F6 | 	mov	arg01, result1
0ecb8     00 14 06 F6 | 	mov	arg02, #0
0ecbc     9C AF B1 FD | 	call	#__system___float_tointeger
0ecc0     10 4E 05 F1 | 	add	fp, #16
0ecc4     A7 FA 61 FC | 	wrlong	result1, fp
0ecc8     1E 26 C6 F9 | 	decod	local01, #30
0eccc     FD 12 02 F6 | 	mov	arg01, result1
0ecd0     10 4E 85 F1 | 	sub	fp, #16
0ecd4     05 12 06 F1 | 	add	arg01, #5
0ecd8     09 13 52 F6 | 	abs	arg01, arg01 wc
0ecdc     1F 28 C6 C9 |  if_b	decod	local02, #31
0ece0     00 28 06 36 |  if_ae	mov	local02, #0
0ece4     A8 A6 B1 FD | 	call	#__system___float_fromuns
0ece8     14 FB 61 F5 | 	xor	result1, local02
0ecec     FD 14 02 F6 | 	mov	arg02, result1
0ecf0     13 13 02 F6 | 	mov	arg01, local01
0ecf4     A4 B9 B1 FD | 	call	#__system____builtin_powf
0ecf8     FD 12 02 F6 | 	mov	arg01, result1
0ecfc     01 14 06 F6 | 	mov	arg02, #1
0ed00     58 AF B1 FD | 	call	#__system___float_tointeger
0ed04     14 4E 05 F1 | 	add	fp, #20
0ed08     A7 FA 61 FC | 	wrlong	result1, fp
0ed0c                 | ' skip=round(2^(lfreq+5))
0ed0c                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0ed0c     14 4E 85 F1 | 	sub	fp, #20
0ed10     40 00 00 FF 
0ed14     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ed18     30 00 90 CD |  if_b	jmp	#LR__1230
0ed1c     14 4E 05 F1 | 	add	fp, #20
0ed20     A7 26 02 FB | 	rdlong	local01, fp
0ed24     13 27 52 F6 | 	abs	local01, local01 wc
0ed28     0F 26 46 F0 | 	shr	local01, #15
0ed2c     13 27 82 F6 | 	negc	local01, local01
0ed30     04 4E 05 F1 | 	add	fp, #4
0ed34     A7 26 62 FC | 	wrlong	local01, fp
0ed38     04 4E 85 F1 | 	sub	fp, #4
0ed3c     40 00 80 FF 
0ed40     A7 00 68 FC | 	wrlong	##32768, fp
0ed44     14 4E 85 F1 | 	sub	fp, #20
0ed48     0C 00 90 FD | 	jmp	#LR__1231
0ed4c                 | LR__1230
0ed4c     18 4E 05 F1 | 	add	fp, #24
0ed50     A7 02 68 FC | 	wrlong	#1, fp
0ed54     18 4E 85 F1 | 	sub	fp, #24
0ed58                 | LR__1231
0ed58     24 4E 05 F1 | 	add	fp, #36
0ed5c     A7 14 02 FB | 	rdlong	arg02, fp
0ed60     24 4E 85 F1 | 	sub	fp, #36
0ed64     3E 2C 25 FF 
0ed68     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ed6c     28 AC B1 FD | 	call	#__system___float_div
0ed70     FD 26 02 F6 | 	mov	local01, result1
0ed74     18 4E 05 F1 | 	add	fp, #24
0ed78     A7 12 02 FB | 	rdlong	arg01, fp
0ed7c     18 4E 85 F1 | 	sub	fp, #24
0ed80     09 13 52 F6 | 	abs	arg01, arg01 wc
0ed84     1F 28 C6 C9 |  if_b	decod	local02, #31
0ed88     00 28 06 36 |  if_ae	mov	local02, #0
0ed8c     00 A6 B1 FD | 	call	#__system___float_fromuns
0ed90     14 FB 61 F5 | 	xor	result1, local02
0ed94     FD 2A 02 F6 | 	mov	local03, result1
0ed98     1E 2C C6 F9 | 	decod	local04, #30
0ed9c     0D 12 06 F6 | 	mov	arg01, #13
0eda0     10 4E 05 F1 | 	add	fp, #16
0eda4     A7 14 02 FB | 	rdlong	arg02, fp
0eda8     10 4E 85 F1 | 	sub	fp, #16
0edac     0A 13 82 F1 | 	sub	arg01, arg02
0edb0     09 13 52 F6 | 	abs	arg01, arg01 wc
0edb4     1F 28 C6 C9 |  if_b	decod	local02, #31
0edb8     00 28 06 36 |  if_ae	mov	local02, #0
0edbc     D0 A5 B1 FD | 	call	#__system___float_fromuns
0edc0     14 FB 61 F5 | 	xor	result1, local02
0edc4     FD 14 02 F6 | 	mov	arg02, result1
0edc8     16 13 02 F6 | 	mov	arg01, local04
0edcc     CC B8 B1 FD | 	call	#__system____builtin_powf
0edd0     FD 14 02 F6 | 	mov	arg02, result1
0edd4     15 13 02 F6 | 	mov	arg01, local03
0edd8     B8 A9 B1 FD | 	call	#__system___float_mul
0eddc     FD 14 02 F6 | 	mov	arg02, result1
0ede0     13 13 02 F6 | 	mov	arg01, local01
0ede4     B0 AB B1 FD | 	call	#__system___float_div
0ede8     FD 12 02 F6 | 	mov	arg01, result1
0edec     01 14 06 F6 | 	mov	arg02, #1
0edf0     68 AE B1 FD | 	call	#__system___float_tointeger
0edf4     FD 26 02 F6 | 	mov	local01, result1
0edf8     1C 4E 05 F1 | 	add	fp, #28
0edfc     A7 26 62 FC | 	wrlong	local01, fp
0ee00     1C 4E 85 F1 | 	sub	fp, #28
0ee04     80 E7 BF FD | 	call	#_pop
0ee08     FF 2C 02 F6 | 	mov	local04, result3
0ee0c     A7 FA 61 FC | 	wrlong	result1, fp
0ee10     04 4E 05 F1 | 	add	fp, #4
0ee14     A7 FC 61 FC | 	wrlong	result2, fp
0ee18     04 4E 05 F1 | 	add	fp, #4
0ee1c     A7 2C 62 FC | 	wrlong	local04, fp
0ee20     08 4E 85 F1 | 	sub	fp, #8
0ee24     A7 12 02 F6 | 	mov	arg01, fp
0ee28     40 E9 BF FD | 	call	#_converttoint
0ee2c     FD 2A 52 F6 | 	abs	local03, result1 wc
0ee30     07 2A 06 F5 | 	and	local03, #7
0ee34     15 2B 82 F6 | 	negc	local03, local03
0ee38     0C 4E 05 F1 | 	add	fp, #12
0ee3c     A7 2A 62 FC | 	wrlong	local03, fp
0ee40     08 4E 05 F1 | 	add	fp, #8
0ee44     A7 26 02 FB | 	rdlong	local01, fp
0ee48     10 26 66 F0 | 	shl	local01, #16
0ee4c     08 4E 05 F1 | 	add	fp, #8
0ee50     A7 2C 02 FB | 	rdlong	local04, fp
0ee54     16 27 02 F1 | 	add	local01, local04
0ee58     04 4E 05 F1 | 	add	fp, #4
0ee5c     A7 26 62 FC | 	wrlong	local01, fp
0ee60                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0ee60     37 00 00 FF 
0ee64     10 E4 05 F1 | 	add	objptr, ##28176
0ee68     F2 12 02 FB | 	rdlong	arg01, objptr
0ee6c     37 00 00 FF 
0ee70     10 E4 85 F1 | 	sub	objptr, ##28176
0ee74     14 4E 85 F1 | 	sub	fp, #20
0ee78     A7 2C 02 FB | 	rdlong	local04, fp
0ee7c     0C 4E 85 F1 | 	sub	fp, #12
0ee80     06 2C 66 F0 | 	shl	local04, #6
0ee84     16 13 02 F1 | 	add	arg01, local04
0ee88     08 12 06 F1 | 	add	arg01, #8
0ee8c     09 FB 01 FB | 	rdlong	result1, arg01
0ee90     1B FA 2D F4 | 	testbn	result1, #27 wz
0ee94     3C 00 90 5D |  if_ne	jmp	#LR__1232
0ee98     37 00 00 FF 
0ee9c     10 E4 05 F1 | 	add	objptr, ##28176
0eea0     F2 12 02 FB | 	rdlong	arg01, objptr
0eea4     37 00 00 FF 
0eea8     10 E4 85 F1 | 	sub	objptr, ##28176
0eeac     0C 4E 05 F1 | 	add	fp, #12
0eeb0     A7 2C 02 FB | 	rdlong	local04, fp
0eeb4     06 2C 66 F0 | 	shl	local04, #6
0eeb8     16 13 02 F1 | 	add	arg01, local04
0eebc     18 12 06 F1 | 	add	arg01, #24
0eec0     14 4E 05 F1 | 	add	fp, #20
0eec4     A7 14 02 FB | 	rdlong	arg02, fp
0eec8     20 4E 85 F1 | 	sub	fp, #32
0eecc     09 15 62 FC | 	wrlong	arg02, arg01
0eed0     80 00 90 FD | 	jmp	#LR__1233
0eed4                 | LR__1232
0eed4     37 00 00 FF 
0eed8     10 E4 05 F1 | 	add	objptr, ##28176
0eedc     F2 26 02 FB | 	rdlong	local01, objptr
0eee0     37 00 00 FF 
0eee4     10 E4 85 F1 | 	sub	objptr, ##28176
0eee8     0C 4E 05 F1 | 	add	fp, #12
0eeec     A7 2C 02 FB | 	rdlong	local04, fp
0eef0     06 2C 66 F0 | 	shl	local04, #6
0eef4     16 27 02 F1 | 	add	local01, local04
0eef8     18 26 06 F1 | 	add	local01, #24
0eefc     18 4E 05 F1 | 	add	fp, #24
0ef00     A7 14 02 FB | 	rdlong	arg02, fp
0ef04     24 4E 85 F1 | 	sub	fp, #36
0ef08     3E 2C 25 FF 
0ef0c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0ef10     84 AA B1 FD | 	call	#__system___float_div
0ef14     FD 12 02 F6 | 	mov	arg01, result1
0ef18     01 14 06 F6 | 	mov	arg02, #1
0ef1c     3C AD B1 FD | 	call	#__system___float_tointeger
0ef20     13 FB 51 FC | 	wrword	result1, local01
0ef24     37 00 00 FF 
0ef28     10 E4 05 F1 | 	add	objptr, ##28176
0ef2c     F2 12 02 FB | 	rdlong	arg01, objptr
0ef30     37 00 00 FF 
0ef34     10 E4 85 F1 | 	sub	objptr, ##28176
0ef38     0C 4E 05 F1 | 	add	fp, #12
0ef3c     A7 2C 02 FB | 	rdlong	local04, fp
0ef40     0C 4E 85 F1 | 	sub	fp, #12
0ef44     06 2C 66 F0 | 	shl	local04, #6
0ef48     16 13 02 F1 | 	add	arg01, local04
0ef4c     1A 12 06 F1 | 	add	arg01, #26
0ef50     09 01 5A FC | 	wrword	#256, arg01
0ef54                 | LR__1233
0ef54     A7 F0 03 F6 | 	mov	ptra, fp
0ef58     B2 00 A0 FD | 	call	#popregs_
0ef5c                 | _do_changefreq_ret
0ef5c     2D 00 64 FD | 	ret
0ef60                 | 
0ef60                 | ' 
0ef60                 | ' '-------------------- changepan
0ef60                 | ' 
0ef60                 | ' sub do_changepan
0ef60                 | _do_changepan
0ef60     01 4A 05 F6 | 	mov	COUNT_, #1
0ef64     A8 00 A0 FD | 	call	#pushregs_
0ef68     14 F0 07 F1 | 	add	ptra, #20
0ef6c     18 E6 BF FD | 	call	#_pop
0ef70     A7 FA 61 FC | 	wrlong	result1, fp
0ef74     04 4E 05 F1 | 	add	fp, #4
0ef78     A7 FC 61 FC | 	wrlong	result2, fp
0ef7c     04 4E 05 F1 | 	add	fp, #4
0ef80     A7 FE 61 FC | 	wrlong	result3, fp
0ef84     08 4E 85 F1 | 	sub	fp, #8
0ef88     00 00 23 FF 
0ef8c     00 26 06 F6 | 	mov	local01, ##1174405120
0ef90     A7 12 02 F6 | 	mov	arg01, fp
0ef94     90 E8 BF FD | 	call	#_converttofloat
0ef98     FD 14 02 F6 | 	mov	arg02, result1
0ef9c     13 13 02 F6 | 	mov	arg01, local01
0efa0     F0 A7 B1 FD | 	call	#__system___float_mul
0efa4     FD 12 02 F6 | 	mov	arg01, result1
0efa8     01 14 06 F6 | 	mov	arg02, #1
0efac     AC AC B1 FD | 	call	#__system___float_tointeger
0efb0     0D 26 C6 F9 | 	decod	local01, #13
0efb4     FD 26 02 F1 | 	add	local01, result1
0efb8     10 4E 05 F1 | 	add	fp, #16
0efbc     A7 26 62 FC | 	wrlong	local01, fp
0efc0                 | ' 
0efc0                 | ' t1=pop()
0efc0                 | ' pan=8192+round(8192*converttofloat(t1)) 
0efc0                 | ' if pan<0 then pan=0
0efc0     10 4E 85 F1 | 	sub	fp, #16
0efc4     00 26 56 F2 | 	cmps	local01, #0 wc
0efc8     10 4E 05 C1 |  if_b	add	fp, #16
0efcc     A7 00 68 CC |  if_b	wrlong	#0, fp
0efd0     10 4E 85 C1 |  if_b	sub	fp, #16
0efd4                 | ' if pan>16384 then pan=16384
0efd4     10 4E 05 F1 | 	add	fp, #16
0efd8     A7 26 02 FB | 	rdlong	local01, fp
0efdc     10 4E 85 F1 | 	sub	fp, #16
0efe0     20 00 00 FF 
0efe4     01 26 56 F2 | 	cmps	local01, ##16385 wc
0efe8     10 4E 05 31 |  if_ae	add	fp, #16
0efec     20 00 80 3F 
0eff0     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0eff4     10 4E 85 31 |  if_ae	sub	fp, #16
0eff8     8C E5 BF FD | 	call	#_pop
0effc     FF 26 02 F6 | 	mov	local01, result3
0f000     A7 FA 61 FC | 	wrlong	result1, fp
0f004     04 4E 05 F1 | 	add	fp, #4
0f008     A7 FC 61 FC | 	wrlong	result2, fp
0f00c     04 4E 05 F1 | 	add	fp, #4
0f010     A7 26 62 FC | 	wrlong	local01, fp
0f014     08 4E 85 F1 | 	sub	fp, #8
0f018     A7 12 02 F6 | 	mov	arg01, fp
0f01c     4C E7 BF FD | 	call	#_converttoint
0f020     FD 26 52 F6 | 	abs	local01, result1 wc
0f024     07 26 06 F5 | 	and	local01, #7
0f028     13 27 82 F6 | 	negc	local01, local01
0f02c     0C 4E 05 F1 | 	add	fp, #12
0f030     A7 26 62 FC | 	wrlong	local01, fp
0f034     37 00 00 FF 
0f038     10 E4 05 F1 | 	add	objptr, ##28176
0f03c     F2 12 02 FB | 	rdlong	arg01, objptr
0f040     37 00 00 FF 
0f044     10 E4 85 F1 | 	sub	objptr, ##28176
0f048     06 26 66 F0 | 	shl	local01, #6
0f04c     13 13 02 F1 | 	add	arg01, local01
0f050     16 12 06 F1 | 	add	arg01, #22
0f054     04 4E 05 F1 | 	add	fp, #4
0f058     A7 14 02 FB | 	rdlong	arg02, fp
0f05c     10 4E 85 F1 | 	sub	fp, #16
0f060     09 15 52 FC | 	wrword	arg02, arg01
0f064     A7 F0 03 F6 | 	mov	ptra, fp
0f068     B2 00 A0 FD | 	call	#popregs_
0f06c                 | _do_changepan_ret
0f06c     2D 00 64 FD | 	ret
0f070                 | 
0f070                 | ' 
0f070                 | ' '-------------------- changevol
0f070                 | ' 
0f070                 | ' sub do_changevol
0f070                 | _do_changevol
0f070     00 4A 05 F6 | 	mov	COUNT_, #0
0f074     A8 00 A0 FD | 	call	#pushregs_
0f078     14 F0 07 F1 | 	add	ptra, #20
0f07c     08 E5 BF FD | 	call	#_pop
0f080     FF 14 02 F6 | 	mov	arg02, result3
0f084     A7 FA 61 FC | 	wrlong	result1, fp
0f088     04 4E 05 F1 | 	add	fp, #4
0f08c     A7 FC 61 FC | 	wrlong	result2, fp
0f090     04 4E 05 F1 | 	add	fp, #4
0f094     A7 14 62 FC | 	wrlong	arg02, fp
0f098     08 4E 85 F1 | 	sub	fp, #8
0f09c     A7 12 02 F6 | 	mov	arg01, fp
0f0a0     84 E7 BF FD | 	call	#_converttofloat
0f0a4     FD 12 02 F6 | 	mov	arg01, result1
0f0a8     00 3D 22 FF 
0f0ac     00 14 06 F6 | 	mov	arg02, ##1148846080
0f0b0     E0 A6 B1 FD | 	call	#__system___float_mul
0f0b4     FD 12 02 F6 | 	mov	arg01, result1
0f0b8     01 14 06 F6 | 	mov	arg02, #1
0f0bc     9C AB B1 FD | 	call	#__system___float_tointeger
0f0c0     FD 14 52 F6 | 	abs	arg02, result1 wc
0f0c4     0D 14 46 F7 | 	zerox	arg02, #13
0f0c8     0A 15 82 F6 | 	negc	arg02, arg02
0f0cc     10 4E 05 F1 | 	add	fp, #16
0f0d0     A7 14 62 FC | 	wrlong	arg02, fp
0f0d4     10 4E 85 F1 | 	sub	fp, #16
0f0d8     AC E4 BF FD | 	call	#_pop
0f0dc     FF 14 02 F6 | 	mov	arg02, result3
0f0e0     A7 FA 61 FC | 	wrlong	result1, fp
0f0e4     04 4E 05 F1 | 	add	fp, #4
0f0e8     A7 FC 61 FC | 	wrlong	result2, fp
0f0ec     04 4E 05 F1 | 	add	fp, #4
0f0f0     A7 14 62 FC | 	wrlong	arg02, fp
0f0f4     08 4E 85 F1 | 	sub	fp, #8
0f0f8     A7 12 02 F6 | 	mov	arg01, fp
0f0fc     6C E6 BF FD | 	call	#_converttoint
0f100     FD 14 52 F6 | 	abs	arg02, result1 wc
0f104     07 14 06 F5 | 	and	arg02, #7
0f108     0A 15 82 F6 | 	negc	arg02, arg02
0f10c     0C 4E 05 F1 | 	add	fp, #12
0f110     A7 14 62 FC | 	wrlong	arg02, fp
0f114     37 00 00 FF 
0f118     10 E4 05 F1 | 	add	objptr, ##28176
0f11c     F2 12 02 FB | 	rdlong	arg01, objptr
0f120     37 00 00 FF 
0f124     10 E4 85 F1 | 	sub	objptr, ##28176
0f128     06 14 66 F0 | 	shl	arg02, #6
0f12c     0A 13 02 F1 | 	add	arg01, arg02
0f130     14 12 06 F1 | 	add	arg01, #20
0f134     04 4E 05 F1 | 	add	fp, #4
0f138     A7 14 02 FB | 	rdlong	arg02, fp
0f13c     10 4E 85 F1 | 	sub	fp, #16
0f140     09 15 52 FC | 	wrword	arg02, arg01
0f144     A7 F0 03 F6 | 	mov	ptra, fp
0f148     B2 00 A0 FD | 	call	#popregs_
0f14c                 | _do_changevol_ret
0f14c     2D 00 64 FD | 	ret
0f150                 | 
0f150                 | ' 
0f150                 | ' '-------------------- changewav
0f150                 | ' 
0f150                 | ' sub do_changewav
0f150                 | _do_changewav
0f150     00 4A 05 F6 | 	mov	COUNT_, #0
0f154     A8 00 A0 FD | 	call	#pushregs_
0f158     14 F0 07 F1 | 	add	ptra, #20
0f15c     28 E4 BF FD | 	call	#_pop
0f160     FF 14 02 F6 | 	mov	arg02, result3
0f164     A7 FA 61 FC | 	wrlong	result1, fp
0f168     04 4E 05 F1 | 	add	fp, #4
0f16c     A7 FC 61 FC | 	wrlong	result2, fp
0f170     04 4E 05 F1 | 	add	fp, #4
0f174     A7 14 62 FC | 	wrlong	arg02, fp
0f178     08 4E 85 F1 | 	sub	fp, #8
0f17c     A7 12 02 F6 | 	mov	arg01, fp
0f180     E8 E5 BF FD | 	call	#_converttoint
0f184     10 4E 05 F1 | 	add	fp, #16
0f188     A7 FA 61 FC | 	wrlong	result1, fp
0f18c                 | ' 
0f18c                 | ' t1=pop()
0f18c                 | ' wave=converttoint(t1)
0f18c                 | ' if wave<0 then wave=0
0f18c     FD 14 02 F6 | 	mov	arg02, result1
0f190     10 4E 85 F1 | 	sub	fp, #16
0f194     00 14 56 F2 | 	cmps	arg02, #0 wc
0f198     10 4E 05 C1 |  if_b	add	fp, #16
0f19c     A7 00 68 CC |  if_b	wrlong	#0, fp
0f1a0     10 4E 85 C1 |  if_b	sub	fp, #16
0f1a4     E0 E3 BF FD | 	call	#_pop
0f1a8     FF 14 02 F6 | 	mov	arg02, result3
0f1ac     A7 FA 61 FC | 	wrlong	result1, fp
0f1b0     04 4E 05 F1 | 	add	fp, #4
0f1b4     A7 FC 61 FC | 	wrlong	result2, fp
0f1b8     04 4E 05 F1 | 	add	fp, #4
0f1bc     A7 14 62 FC | 	wrlong	arg02, fp
0f1c0     08 4E 85 F1 | 	sub	fp, #8
0f1c4     A7 12 02 F6 | 	mov	arg01, fp
0f1c8     A0 E5 BF FD | 	call	#_converttoint
0f1cc     FD 14 52 F6 | 	abs	arg02, result1 wc
0f1d0     07 14 06 F5 | 	and	arg02, #7
0f1d4     0A 15 82 F6 | 	negc	arg02, arg02
0f1d8     0C 4E 05 F1 | 	add	fp, #12
0f1dc     A7 14 62 FC | 	wrlong	arg02, fp
0f1e0                 | ' if wave <32 then 
0f1e0     04 4E 05 F1 | 	add	fp, #4
0f1e4     A7 14 02 FB | 	rdlong	arg02, fp
0f1e8     10 4E 85 F1 | 	sub	fp, #16
0f1ec     20 14 56 F2 | 	cmps	arg02, #32 wc
0f1f0     48 00 90 3D |  if_ae	jmp	#LR__1240
0f1f4     37 00 00 FF 
0f1f8     10 E4 05 F1 | 	add	objptr, ##28176
0f1fc     F2 12 02 FB | 	rdlong	arg01, objptr
0f200     37 00 00 FF 
0f204     10 E4 85 F1 | 	sub	objptr, ##28176
0f208     0C 4E 05 F1 | 	add	fp, #12
0f20c     A7 14 02 FB | 	rdlong	arg02, fp
0f210     06 14 66 F0 | 	shl	arg02, #6
0f214     0A 13 02 F1 | 	add	arg01, arg02
0f218     08 12 06 F1 | 	add	arg01, #8
0f21c     04 4E 05 F1 | 	add	fp, #4
0f220     A7 14 02 FB | 	rdlong	arg02, fp
0f224     10 4E 85 F1 | 	sub	fp, #16
0f228     0B 14 66 F0 | 	shl	arg02, #11
0f22c     00 00 40 FF 
0f230     00 14 06 F1 | 	add	arg02, ##-2147483648
0f234     09 15 62 FC | 	wrlong	arg02, arg01
0f238     34 00 90 FD | 	jmp	#LR__1241
0f23c                 | LR__1240
0f23c     37 00 00 FF 
0f240     10 E4 05 F1 | 	add	objptr, ##28176
0f244     F2 12 02 FB | 	rdlong	arg01, objptr
0f248     37 00 00 FF 
0f24c     10 E4 85 F1 | 	sub	objptr, ##28176
0f250     0C 4E 05 F1 | 	add	fp, #12
0f254     A7 14 02 FB | 	rdlong	arg02, fp
0f258     0C 4E 85 F1 | 	sub	fp, #12
0f25c     06 14 66 F0 | 	shl	arg02, #6
0f260     0A 13 02 F1 | 	add	arg01, arg02
0f264     08 12 06 F1 | 	add	arg01, #8
0f268     00 00 C4 FF 
0f26c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0f270                 | LR__1241
0f270     A7 F0 03 F6 | 	mov	ptra, fp
0f274     B2 00 A0 FD | 	call	#popregs_
0f278                 | _do_changewav_ret
0f278     2D 00 64 FD | 	ret
0f27c                 | 
0f27c                 | ' 
0f27c                 | ' '-------------------- chr$
0f27c                 | ' 
0f27c                 | ' sub do_chr
0f27c                 | _do_chr
0f27c     01 4A 05 F6 | 	mov	COUNT_, #1
0f280     A8 00 A0 FD | 	call	#pushregs_
0f284     14 F0 07 F1 | 	add	ptra, #20
0f288     4A 00 00 FF 
0f28c     80 E4 05 F1 | 	add	objptr, ##38016
0f290     F2 26 02 FB | 	rdlong	local01, objptr
0f294     13 17 02 F6 | 	mov	arg03, local01
0f298     01 16 66 F0 | 	shl	arg03, #1
0f29c     13 17 02 F1 | 	add	arg03, local01
0f2a0     02 16 66 F0 | 	shl	arg03, #2
0f2a4     03 00 00 FF 
0f2a8     04 E4 85 F1 | 	sub	objptr, ##1540
0f2ac     F2 16 02 F1 | 	add	arg03, objptr
0f2b0     0B 17 02 FB | 	rdlong	arg03, arg03
0f2b4     0C 4E 05 F1 | 	add	fp, #12
0f2b8     A7 16 62 FC | 	wrlong	arg03, fp
0f2bc                 | ' 
0f2bc                 | ' numpar=compiledline(lineptr_e).result.uresult
0f2bc                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0f2bc     0C 4E 85 F1 | 	sub	fp, #12
0f2c0     02 16 16 F2 | 	cmp	arg03, #2 wc
0f2c4     47 00 00 FF 
0f2c8     7C E4 85 F1 | 	sub	objptr, ##36476
0f2cc     0C 4E 05 C1 |  if_b	add	fp, #12
0f2d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0f2d4     0C 4E 85 C1 |  if_b	sub	fp, #12
0f2d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1250
0f2dc     00 12 06 F6 | 	mov	arg01, #0
0f2e0     D8 D2 B1 FD | 	call	#__system___getiolock_0603
0f2e4     FD 12 02 F6 | 	mov	arg01, result1
0f2e8     2C 76 B1 FD | 	call	#__system___lockmem
0f2ec     B6 01 00 FF 
0f2f0     72 14 06 F6 | 	mov	arg02, ##@LR__5862
0f2f4     00 12 06 F6 | 	mov	arg01, #0
0f2f8     00 16 06 F6 | 	mov	arg03, #0
0f2fc     10 83 B1 FD | 	call	#__system___basic_print_string
0f300     00 12 06 F6 | 	mov	arg01, #0
0f304     B4 D2 B1 FD | 	call	#__system___getiolock_0603
0f308     FD 00 68 FC | 	wrlong	#0, result1
0f30c     27 12 06 F6 | 	mov	arg01, #39
0f310     00 14 06 F6 | 	mov	arg02, #0
0f314     10 3C B1 FD | 	call	#_printerror
0f318     54 00 90 FD | 	jmp	#LR__1251
0f31c                 | LR__1250
0f31c     68 E2 BF FD | 	call	#_pop
0f320     FF 26 02 F6 | 	mov	local01, result3
0f324     A7 FA 61 FC | 	wrlong	result1, fp
0f328     04 4E 05 F1 | 	add	fp, #4
0f32c     A7 FC 61 FC | 	wrlong	result2, fp
0f330     04 4E 05 F1 | 	add	fp, #4
0f334     A7 26 62 FC | 	wrlong	local01, fp
0f338     08 4E 85 F1 | 	sub	fp, #8
0f33c     A7 12 02 F6 | 	mov	arg01, fp
0f340     28 E4 BF FD | 	call	#_converttoint
0f344     10 4E 05 F1 | 	add	fp, #16
0f348     A7 FA 61 FC | 	wrlong	result1, fp
0f34c     FD 12 02 F6 | 	mov	arg01, result1
0f350     10 4E 85 F1 | 	sub	fp, #16
0f354     04 98 B1 FD | 	call	#__system__Chr_S
0f358     A7 FA 61 FC | 	wrlong	result1, fp
0f35c     08 4E 05 F1 | 	add	fp, #8
0f360     A7 3E 68 FC | 	wrlong	#31, fp
0f364     08 4E 85 F1 | 	sub	fp, #8
0f368     A7 12 02 F6 | 	mov	arg01, fp
0f36c     B0 E2 BF FD | 	call	#_push
0f370                 | LR__1251
0f370     A7 F0 03 F6 | 	mov	ptra, fp
0f374     B2 00 A0 FD | 	call	#popregs_
0f378                 | _do_chr_ret
0f378     2D 00 64 FD | 	ret
0f37c                 | 
0f37c                 | ' 
0f37c                 | ' '-------------------- circle
0f37c                 | ' 
0f37c                 | ' sub do_circle
0f37c                 | _do_circle
0f37c     02 4A 05 F6 | 	mov	COUNT_, #2
0f380     A8 00 A0 FD | 	call	#pushregs_
0f384     24 F0 07 F1 | 	add	ptra, #36
0f388     FC E1 BF FD | 	call	#_pop
0f38c     FD 18 02 F6 | 	mov	arg04, result1
0f390     FE 16 02 F6 | 	mov	arg03, result2
0f394     FF 14 02 F6 | 	mov	arg02, result3
0f398     18 4E 05 F1 | 	add	fp, #24
0f39c     A7 18 62 FC | 	wrlong	arg04, fp
0f3a0     04 4E 05 F1 | 	add	fp, #4
0f3a4     A7 16 62 FC | 	wrlong	arg03, fp
0f3a8     04 4E 05 F1 | 	add	fp, #4
0f3ac     A7 14 62 FC | 	wrlong	arg02, fp
0f3b0     20 4E 85 F1 | 	sub	fp, #32
0f3b4     D0 E1 BF FD | 	call	#_pop
0f3b8     FD 18 02 F6 | 	mov	arg04, result1
0f3bc     FE 16 02 F6 | 	mov	arg03, result2
0f3c0     FF 26 02 F6 | 	mov	local01, result3
0f3c4     0C 4E 05 F1 | 	add	fp, #12
0f3c8     A7 18 62 FC | 	wrlong	arg04, fp
0f3cc     04 4E 05 F1 | 	add	fp, #4
0f3d0     A7 16 62 FC | 	wrlong	arg03, fp
0f3d4     04 4E 05 F1 | 	add	fp, #4
0f3d8     A7 26 62 FC | 	wrlong	local01, fp
0f3dc     14 4E 85 F1 | 	sub	fp, #20
0f3e0     A4 E1 BF FD | 	call	#_pop
0f3e4     A7 FA 61 FC | 	wrlong	result1, fp
0f3e8     04 4E 05 F1 | 	add	fp, #4
0f3ec     A7 FC 61 FC | 	wrlong	result2, fp
0f3f0     04 4E 05 F1 | 	add	fp, #4
0f3f4     A7 FE 61 FC | 	wrlong	result3, fp
0f3f8                 | ' 
0f3f8                 | ' t3=pop()
0f3f8                 | ' t2=pop()
0f3f8                 | ' t1=pop()
0f3f8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0f3f8     FF 18 02 F6 | 	mov	arg04, result3
0f3fc     08 4E 85 F1 | 	sub	fp, #8
0f400     1C 18 0E F2 | 	cmp	arg04, #28 wz
0f404     08 4E 05 51 |  if_ne	add	fp, #8
0f408     A7 26 02 5B |  if_ne	rdlong	local01, fp
0f40c     08 4E 85 51 |  if_ne	sub	fp, #8
0f410     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0f414     7C 00 90 5D |  if_ne	jmp	#LR__1260
0f418     14 4E 05 F1 | 	add	fp, #20
0f41c     A7 26 02 FB | 	rdlong	local01, fp
0f420     14 4E 85 F1 | 	sub	fp, #20
0f424     1C 26 0E F2 | 	cmp	local01, #28 wz
0f428     14 4E 05 51 |  if_ne	add	fp, #20
0f42c     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f430     14 4E 85 51 |  if_ne	sub	fp, #20
0f434     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f438     58 00 90 5D |  if_ne	jmp	#LR__1260
0f43c     20 4E 05 F1 | 	add	fp, #32
0f440     A7 26 02 FB | 	rdlong	local01, fp
0f444     20 4E 85 F1 | 	sub	fp, #32
0f448     1C 26 0E F2 | 	cmp	local01, #28 wz
0f44c     20 4E 05 51 |  if_ne	add	fp, #32
0f450     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0f454     20 4E 85 51 |  if_ne	sub	fp, #32
0f458     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0f45c     34 00 90 5D |  if_ne	jmp	#LR__1260
0f460     A7 12 02 FB | 	rdlong	arg01, fp
0f464     0C 4E 05 F1 | 	add	fp, #12
0f468     A7 14 02 FB | 	rdlong	arg02, fp
0f46c     0C 4E 05 F1 | 	add	fp, #12
0f470     A7 16 02 FB | 	rdlong	arg03, fp
0f474     18 4E 85 F1 | 	sub	fp, #24
0f478     37 00 00 FF 
0f47c     28 E4 05 F1 | 	add	objptr, ##28200
0f480     F2 18 02 FB | 	rdlong	arg04, objptr
0f484     37 00 00 FF 
0f488     28 E4 85 F1 | 	sub	objptr, ##28200
0f48c     70 53 B1 FD | 	call	#_hg010b_spin2_circle
0f490                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0f490     54 00 90 FD | 	jmp	#LR__1261
0f494                 | LR__1260
0f494     A7 12 02 F6 | 	mov	arg01, fp
0f498     D0 E2 BF FD | 	call	#_converttoint
0f49c     FD 26 02 F6 | 	mov	local01, result1
0f4a0     0C 4E 05 F1 | 	add	fp, #12
0f4a4     A7 12 02 F6 | 	mov	arg01, fp
0f4a8     0C 4E 85 F1 | 	sub	fp, #12
0f4ac     BC E2 BF FD | 	call	#_converttoint
0f4b0     FD 28 02 F6 | 	mov	local02, result1
0f4b4     18 4E 05 F1 | 	add	fp, #24
0f4b8     A7 12 02 F6 | 	mov	arg01, fp
0f4bc     18 4E 85 F1 | 	sub	fp, #24
0f4c0     A8 E2 BF FD | 	call	#_converttoint
0f4c4     FD 16 02 F6 | 	mov	arg03, result1
0f4c8     37 00 00 FF 
0f4cc     28 E4 05 F1 | 	add	objptr, ##28200
0f4d0     F2 18 02 FB | 	rdlong	arg04, objptr
0f4d4     37 00 00 FF 
0f4d8     28 E4 85 F1 | 	sub	objptr, ##28200
0f4dc     13 13 02 F6 | 	mov	arg01, local01
0f4e0     14 15 02 F6 | 	mov	arg02, local02
0f4e4     18 53 B1 FD | 	call	#_hg010b_spin2_circle
0f4e8                 | LR__1261
0f4e8     A7 F0 03 F6 | 	mov	ptra, fp
0f4ec     B2 00 A0 FD | 	call	#popregs_
0f4f0                 | _do_circle_ret
0f4f0     2D 00 64 FD | 	ret
0f4f4                 | 
0f4f4                 | ' 
0f4f4                 | ' '-------------------- click
0f4f4                 | ' 
0f4f4                 | ' sub do_click
0f4f4                 | _do_click
0f4f4     90 E0 BF FD | 	call	#_pop
0f4f8     00 FA 4D F2 | 	cmps	result1, #0 wz
0f4fc                 | ' 
0f4fc                 | ' t1=pop()
0f4fc                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0f4fc     50 00 00 AF 
0f500     3C E5 05 A1 |  if_e	add	objptr, ##41276
0f504     F2 00 68 AC |  if_e	wrlong	#0, objptr
0f508     50 00 00 FF 
0f50c     3C E5 C5 F3 | 	sumz	objptr, ##41276
0f510     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0f514     50 00 00 5F 
0f518     3C E5 85 51 |  if_ne	sub	objptr, ##41276
0f51c                 | _do_click_ret
0f51c     2D 00 64 FD | 	ret
0f520                 | 
0f520                 | ' 
0f520                 | ' '-------------------- close
0f520                 | ' 
0f520                 | ' sub do_close
0f520                 | _do_close
0f520     03 4A 05 F6 | 	mov	COUNT_, #3
0f524     A8 00 A0 FD | 	call	#pushregs_
0f528     5C E0 BF FD | 	call	#_pop
0f52c     FD 26 02 F6 | 	mov	local01, result1
0f530     FF 16 02 F6 | 	mov	arg03, result3
0f534     FE 28 02 F6 | 	mov	local02, result2
0f538     0B 2B 02 F6 | 	mov	local03, arg03
0f53c                 | ' 
0f53c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f53c                 | ' t1=pop()
0f53c                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0f53c     2C 2A 0E F2 | 	cmp	local03, #44 wz
0f540     44 00 90 AD |  if_e	jmp	#LR__1270
0f544     00 12 06 F6 | 	mov	arg01, #0
0f548     70 D0 B1 FD | 	call	#__system___getiolock_0603
0f54c     FD 12 02 F6 | 	mov	arg01, result1
0f550     C4 73 B1 FD | 	call	#__system___lockmem
0f554     B6 01 00 FF 
0f558     79 14 06 F6 | 	mov	arg02, ##@LR__5863
0f55c     00 12 06 F6 | 	mov	arg01, #0
0f560     00 16 06 F6 | 	mov	arg03, #0
0f564     A8 80 B1 FD | 	call	#__system___basic_print_string
0f568     00 12 06 F6 | 	mov	arg01, #0
0f56c     0A 14 06 F6 | 	mov	arg02, #10
0f570     00 16 06 F6 | 	mov	arg03, #0
0f574     40 80 B1 FD | 	call	#__system___basic_print_char
0f578     00 12 06 F6 | 	mov	arg01, #0
0f57c     3C D0 B1 FD | 	call	#__system___getiolock_0603
0f580     FD 00 68 FC | 	wrlong	#0, result1
0f584     08 00 90 FD | 	jmp	#LR__1271
0f588                 | LR__1270
0f588                 | ' channel  = t1.result.iresult
0f588                 | ' close #channel
0f588     13 13 02 F6 | 	mov	arg01, local01
0f58c     E4 C6 B1 FD | 	call	#__system__close
0f590                 | LR__1271
0f590     A7 F0 03 F6 | 	mov	ptra, fp
0f594     B2 00 A0 FD | 	call	#popregs_
0f598                 | _do_close_ret
0f598     2D 00 64 FD | 	ret
0f59c                 | 
0f59c                 | ' 
0f59c                 | ' '-------------------- cls
0f59c                 | ' 
0f59c                 | ' sub do_cls
0f59c                 | _do_cls
0f59c     37 00 00 FF 
0f5a0     3C E4 05 F1 | 	add	objptr, ##28220
0f5a4     F2 12 02 FB | 	rdlong	arg01, objptr
0f5a8     04 E4 85 F1 | 	sub	objptr, #4
0f5ac     F2 14 02 FB | 	rdlong	arg02, objptr
0f5b0     37 00 00 FF 
0f5b4     38 E4 85 F1 | 	sub	objptr, ##28216
0f5b8     D8 56 B1 FD | 	call	#_hg010b_spin2_cls
0f5bc     37 00 00 FF 
0f5c0     3C E4 05 F1 | 	add	objptr, ##28220
0f5c4     F2 14 02 FB | 	rdlong	arg02, objptr
0f5c8     14 E4 85 F1 | 	sub	objptr, #20
0f5cc     F2 14 62 FC | 	wrlong	arg02, objptr
0f5d0     37 00 00 FF 
0f5d4     28 E4 85 F1 | 	sub	objptr, ##28200
0f5d8                 | _do_cls_ret
0f5d8     2D 00 64 FD | 	ret
0f5dc                 | 
0f5dc                 | ' 
0f5dc                 | ' sub do_coginit
0f5dc                 | _do_coginit
0f5dc     00 4A 05 F6 | 	mov	COUNT_, #0
0f5e0     A8 00 A0 FD | 	call	#pushregs_
0f5e4     08 00 00 FF 
0f5e8     1C F0 07 F1 | 	add	ptra, ##4124
0f5ec     4A 00 00 FF 
0f5f0     80 E4 05 F1 | 	add	objptr, ##38016
0f5f4     F2 FA 01 FB | 	rdlong	result1, objptr
0f5f8     FD FC 01 F6 | 	mov	result2, result1
0f5fc     01 FC 65 F0 | 	shl	result2, #1
0f600     FD FC 01 F1 | 	add	result2, result1
0f604     02 FC 65 F0 | 	shl	result2, #2
0f608     03 00 00 FF 
0f60c     04 E4 85 F1 | 	sub	objptr, ##1540
0f610     F2 FC 01 F1 | 	add	result2, objptr
0f614     FE FC 01 FB | 	rdlong	result2, result2
0f618     A7 FC 61 FC | 	wrlong	result2, fp
0f61c                 | ' numpar=compiledline(lineptr_e).result.uresult
0f61c                 | ' if numpar<2 orelse numpar>3 then print "coginit: "; : printerror(39) : return
0f61c     02 FC 55 F2 | 	cmps	result2, #2 wc
0f620     47 00 00 FF 
0f624     7C E4 85 F1 | 	sub	objptr, ##36476
0f628     0C 00 90 CD |  if_b	jmp	#LR__1280
0f62c     A7 FA 01 FB | 	rdlong	result1, fp
0f630     04 FA 55 F2 | 	cmps	result1, #4 wc
0f634     40 00 90 CD |  if_b	jmp	#LR__1281
0f638                 | LR__1280
0f638     00 12 06 F6 | 	mov	arg01, #0
0f63c     7C CF B1 FD | 	call	#__system___getiolock_0603
0f640     FD 12 02 F6 | 	mov	arg01, result1
0f644     D0 72 B1 FD | 	call	#__system___lockmem
0f648     B6 01 00 FF 
0f64c     8B 14 06 F6 | 	mov	arg02, ##@LR__5864
0f650     00 12 06 F6 | 	mov	arg01, #0
0f654     00 16 06 F6 | 	mov	arg03, #0
0f658     B4 7F B1 FD | 	call	#__system___basic_print_string
0f65c     00 12 06 F6 | 	mov	arg01, #0
0f660     58 CF B1 FD | 	call	#__system___getiolock_0603
0f664     FD 00 68 FC | 	wrlong	#0, result1
0f668     27 12 06 F6 | 	mov	arg01, #39
0f66c     00 14 06 F6 | 	mov	arg02, #0
0f670     B4 38 B1 FD | 	call	#_printerror
0f674     94 01 90 FD | 	jmp	#LR__1285
0f678                 | LR__1281
0f678     0C DF BF FD | 	call	#_pop
0f67c     FF 16 02 F6 | 	mov	arg03, result3
0f680     08 00 00 FF 
0f684     10 4E 05 F1 | 	add	fp, ##4112
0f688     A7 FA 61 FC | 	wrlong	result1, fp
0f68c     04 4E 05 F1 | 	add	fp, #4
0f690     A7 FC 61 FC | 	wrlong	result2, fp
0f694     04 4E 05 F1 | 	add	fp, #4
0f698     A7 16 62 FC | 	wrlong	arg03, fp
0f69c     08 4E 85 F1 | 	sub	fp, #8
0f6a0     A7 12 02 F6 | 	mov	arg01, fp
0f6a4     08 00 00 FF 
0f6a8     10 4E 85 F1 | 	sub	fp, ##4112
0f6ac     BC E0 BF FD | 	call	#_converttoint
0f6b0     FD 16 02 F6 | 	mov	arg03, result1
0f6b4     04 4E 05 F1 | 	add	fp, #4
0f6b8     A7 16 62 FC | 	wrlong	arg03, fp
0f6bc     04 4E 85 F1 | 	sub	fp, #4
0f6c0     C4 DE BF FD | 	call	#_pop
0f6c4     FF 16 02 F6 | 	mov	arg03, result3
0f6c8     08 00 00 FF 
0f6cc     10 4E 05 F1 | 	add	fp, ##4112
0f6d0     A7 FA 61 FC | 	wrlong	result1, fp
0f6d4     04 4E 05 F1 | 	add	fp, #4
0f6d8     A7 FC 61 FC | 	wrlong	result2, fp
0f6dc     04 4E 05 F1 | 	add	fp, #4
0f6e0     A7 16 62 FC | 	wrlong	arg03, fp
0f6e4     08 4E 85 F1 | 	sub	fp, #8
0f6e8     A7 12 02 F6 | 	mov	arg01, fp
0f6ec     08 00 00 FF 
0f6f0     10 4E 85 F1 | 	sub	fp, ##4112
0f6f4     74 E0 BF FD | 	call	#_converttoint
0f6f8     08 4E 05 F1 | 	add	fp, #8
0f6fc     A7 FA 61 FC | 	wrlong	result1, fp
0f700     08 4E 85 F1 | 	sub	fp, #8
0f704                 | ' t1=pop()
0f704                 | ' ptra_val=converttoint(t1)
0f704                 | ' t1=pop()
0f704                 | ' addrval=converttoint(t1)
0f704                 | ' if numpar=3 then 
0f704     A7 FA 01 FB | 	rdlong	result1, fp
0f708     03 FA 0D F2 | 	cmp	result1, #3 wz
0f70c     48 00 90 5D |  if_ne	jmp	#LR__1282
0f710     74 DE BF FD | 	call	#_pop
0f714     FF 16 02 F6 | 	mov	arg03, result3
0f718     08 00 00 FF 
0f71c     10 4E 05 F1 | 	add	fp, ##4112
0f720     A7 FA 61 FC | 	wrlong	result1, fp
0f724     04 4E 05 F1 | 	add	fp, #4
0f728     A7 FC 61 FC | 	wrlong	result2, fp
0f72c     04 4E 05 F1 | 	add	fp, #4
0f730     A7 16 62 FC | 	wrlong	arg03, fp
0f734     08 4E 85 F1 | 	sub	fp, #8
0f738     A7 12 02 F6 | 	mov	arg01, fp
0f73c     08 00 00 FF 
0f740     10 4E 85 F1 | 	sub	fp, ##4112
0f744     24 E0 BF FD | 	call	#_converttoint
0f748     0C 4E 05 F1 | 	add	fp, #12
0f74c     A7 FA 61 FC | 	wrlong	result1, fp
0f750     0C 4E 85 F1 | 	sub	fp, #12
0f754     0C 00 90 FD | 	jmp	#LR__1283
0f758                 | LR__1282
0f758     0C 4E 05 F1 | 	add	fp, #12
0f75c     A7 20 68 FC | 	wrlong	#16, fp
0f760     0C 4E 85 F1 | 	sub	fp, #12
0f764                 | LR__1283
0f764                 | '     
0f764                 | ' if addrval>$80000 then psram.read1(varptr(tempbuf(0)),addrval,4096) : addrval=varptr(tempbuf(0))
0f764     08 4E 05 F1 | 	add	fp, #8
0f768     A7 16 02 FB | 	rdlong	arg03, fp
0f76c     08 4E 85 F1 | 	sub	fp, #8
0f770     00 04 00 FF 
0f774     01 16 56 F2 | 	cmps	arg03, ##524289 wc
0f778     40 00 90 CD |  if_b	jmp	#LR__1284
0f77c     10 4E 05 F1 | 	add	fp, #16
0f780     A7 12 02 F6 | 	mov	arg01, fp
0f784     08 4E 85 F1 | 	sub	fp, #8
0f788     A7 14 02 FB | 	rdlong	arg02, fp
0f78c     08 4E 85 F1 | 	sub	fp, #8
0f790     0C 16 C6 F9 | 	decod	arg03, #12
0f794     0B 00 00 FF 
0f798     CC E4 05 F1 | 	add	objptr, ##5836
0f79c     F0 64 B1 FD | 	call	#_psram_spin2_read1
0f7a0     0B 00 00 FF 
0f7a4     CC E4 85 F1 | 	sub	objptr, ##5836
0f7a8     10 4E 05 F1 | 	add	fp, #16
0f7ac     A7 FA 01 F6 | 	mov	result1, fp
0f7b0     08 4E 85 F1 | 	sub	fp, #8
0f7b4     A7 FA 61 FC | 	wrlong	result1, fp
0f7b8     08 4E 85 F1 | 	sub	fp, #8
0f7bc                 | LR__1284
0f7bc     0C 4E 05 F1 | 	add	fp, #12
0f7c0     A7 FA 01 FB | 	rdlong	result1, fp
0f7c4     04 4E 85 F1 | 	sub	fp, #4
0f7c8     A7 14 02 FB | 	rdlong	arg02, fp
0f7cc     04 4E 85 F1 | 	sub	fp, #4
0f7d0     A7 16 02 FB | 	rdlong	arg03, fp
0f7d4                 | ' 
0f7d4                 | '  asm
0f7d4     28 16 62 FD | 	setq	arg03
0f7d8     0A FB F1 FC | 	coginit	result1, arg02 wc
0f7dc                 | '  
0f7dc                 | ' return cog 
0f7dc     08 4E 05 F1 | 	add	fp, #8
0f7e0     A7 FA 61 FC | 	wrlong	result1, fp
0f7e4     08 00 00 FF 
0f7e8     04 4E 05 F1 | 	add	fp, ##4100
0f7ec     A7 FA 61 FC | 	wrlong	result1, fp
0f7f0     08 4E 05 F1 | 	add	fp, #8
0f7f4     A7 38 68 FC | 	wrlong	#28, fp
0f7f8     08 4E 85 F1 | 	sub	fp, #8
0f7fc     A7 12 02 F6 | 	mov	arg01, fp
0f800     08 00 00 FF 
0f804     10 4E 85 F1 | 	sub	fp, ##4112
0f808     14 DE BF FD | 	call	#_push
0f80c                 | LR__1285
0f80c     A7 F0 03 F6 | 	mov	ptra, fp
0f810     B2 00 A0 FD | 	call	#popregs_
0f814                 | _do_coginit_ret
0f814     2D 00 64 FD | 	ret
0f818                 | 
0f818                 | ' 
0f818                 | ' '-------------------- cogstop
0f818                 | ' 
0f818                 | ' sub do_cogstop
0f818                 | _do_cogstop
0f818     00 4A 05 F6 | 	mov	COUNT_, #0
0f81c     A8 00 A0 FD | 	call	#pushregs_
0f820     0C F0 07 F1 | 	add	ptra, #12
0f824     60 DD BF FD | 	call	#_pop
0f828     A7 FA 61 FC | 	wrlong	result1, fp
0f82c     04 4E 05 F1 | 	add	fp, #4
0f830     A7 FC 61 FC | 	wrlong	result2, fp
0f834     04 4E 05 F1 | 	add	fp, #4
0f838     A7 FE 61 FC | 	wrlong	result3, fp
0f83c     08 4E 85 F1 | 	sub	fp, #8
0f840     A7 12 02 F6 | 	mov	arg01, fp
0f844     24 DF BF FD | 	call	#_converttoint
0f848     03 FA 61 FD | 	cogstop	result1
0f84c     A7 F0 03 F6 | 	mov	ptra, fp
0f850     B2 00 A0 FD | 	call	#popregs_
0f854                 | _do_cogstop_ret
0f854     2D 00 64 FD | 	ret
0f858                 | 
0f858                 | ' 
0f858                 | ' '-------------------- color
0f858                 | ' 
0f858                 | ' sub do_color
0f858                 | _do_color
0f858     03 4A 05 F6 | 	mov	COUNT_, #3
0f85c     A8 00 A0 FD | 	call	#pushregs_
0f860     24 DD BF FD | 	call	#_pop
0f864     FD 26 02 F6 | 	mov	local01, result1
0f868     FE 28 02 F6 | 	mov	local02, result2
0f86c     FF 2A 02 F6 | 	mov	local03, result3
0f870     37 00 00 FF 
0f874     28 E4 05 F1 | 	add	objptr, ##28200
0f878     F2 26 62 FC | 	wrlong	local01, objptr
0f87c     37 00 00 FF 
0f880     28 E4 85 F1 | 	sub	objptr, ##28200
0f884     A7 F0 03 F6 | 	mov	ptra, fp
0f888     B2 00 A0 FD | 	call	#popregs_
0f88c                 | _do_color_ret
0f88c     2D 00 64 FD | 	ret
0f890                 | 
0f890                 | ' 
0f890                 | ' '-------------------- copy
0f890                 | ' 
0f890                 | ' sub do_copy
0f890                 | _do_copy
0f890     08 4A 05 F6 | 	mov	COUNT_, #8
0f894     A8 00 A0 FD | 	call	#pushregs_
0f898     EC DC BF FD | 	call	#_pop
0f89c     FD 26 02 F6 | 	mov	local01, result1
0f8a0     FE 1A 02 F6 | 	mov	arg05, result2
0f8a4     FF 18 02 F6 | 	mov	arg04, result3
0f8a8     0D 29 02 F6 | 	mov	local02, arg05
0f8ac     0C 2B 02 F6 | 	mov	local03, arg04
0f8b0     D4 DC BF FD | 	call	#_pop
0f8b4     FE 1A 02 F6 | 	mov	arg05, result2
0f8b8     FF 18 02 F6 | 	mov	arg04, result3
0f8bc     FD 2C 02 F6 | 	mov	local04, result1
0f8c0     0D 2F 02 F6 | 	mov	local05, arg05
0f8c4     0C 31 02 F6 | 	mov	local06, arg04
0f8c8                 | ' 
0f8c8                 | ' t1=pop()
0f8c8                 | ' t2=pop()
0f8c8                 | ' if t2.result_type=result_string2 then 
0f8c8     2B 30 0E F2 | 	cmp	local06, #43 wz
0f8cc     10 00 90 5D |  if_ne	jmp	#LR__1290
0f8d0     16 13 02 F6 | 	mov	arg01, local04
0f8d4     28 DE BF FD | 	call	#_convertstring
0f8d8     FD 32 02 F6 | 	mov	local07, result1
0f8dc     2C 00 90 FD | 	jmp	#LR__1292
0f8e0                 | LR__1290
0f8e0     1F 30 0E F2 | 	cmp	local06, #31 wz
0f8e4     16 33 02 A6 |  if_e	mov	local07, local04
0f8e8     20 00 90 AD |  if_e	jmp	#LR__1291
0f8ec     50 00 00 FF 
0f8f0     F0 E4 05 F1 | 	add	objptr, ##41200
0f8f4     F2 14 02 FB | 	rdlong	arg02, objptr
0f8f8     50 00 00 FF 
0f8fc     F0 E4 85 F1 | 	sub	objptr, ##41200
0f900     0F 12 06 F6 | 	mov	arg01, #15
0f904     20 36 B1 FD | 	call	#_printerror
0f908                 | '   printerror(15,runheader(0)) : return
0f908     58 03 90 FD | 	jmp	#LR__1299
0f90c                 | LR__1291
0f90c                 | LR__1292
0f90c                 | ' if t1.result_type=result_string2 then 
0f90c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0f910     10 00 90 5D |  if_ne	jmp	#LR__1293
0f914     13 13 02 F6 | 	mov	arg01, local01
0f918     E4 DD BF FD | 	call	#_convertstring
0f91c     FD 34 02 F6 | 	mov	local08, result1
0f920     2C 00 90 FD | 	jmp	#LR__1295
0f924                 | LR__1293
0f924     1F 2A 0E F2 | 	cmp	local03, #31 wz
0f928     13 35 02 A6 |  if_e	mov	local08, local01
0f92c     20 00 90 AD |  if_e	jmp	#LR__1294
0f930     50 00 00 FF 
0f934     F0 E4 05 F1 | 	add	objptr, ##41200
0f938     F2 14 02 FB | 	rdlong	arg02, objptr
0f93c     50 00 00 FF 
0f940     F0 E4 85 F1 | 	sub	objptr, ##41200
0f944     0F 12 06 F6 | 	mov	arg01, #15
0f948     DC 35 B1 FD | 	call	#_printerror
0f94c                 | '   printerror(15,runheader(0)) : return
0f94c     14 03 90 FD | 	jmp	#LR__1299
0f950                 | LR__1294
0f950                 | LR__1295
0f950                 | ' 
0f950                 | ' open filename_1 for input as #9 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_1 : close #9 : return
0f950     09 12 06 F6 | 	mov	arg01, #9
0f954     19 15 02 F6 | 	mov	arg02, local07
0f958     00 16 06 F6 | 	mov	arg03, #0
0f95c     BC 7B B1 FD | 	call	#__system___basic_open_string
0f960     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f964     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f968     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0f96c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f970     52 00 00 FF 
0f974     D8 E4 05 F1 | 	add	objptr, ##42200
0f978     F2 FA 61 FC | 	wrlong	result1, objptr
0f97c     52 00 00 FF 
0f980     D8 E4 85 F1 | 	sub	objptr, ##42200
0f984     0C 01 90 AD |  if_e	jmp	#LR__1296
0f988     00 12 06 F6 | 	mov	arg01, #0
0f98c     2C CC B1 FD | 	call	#__system___getiolock_0603
0f990     FD 12 02 F6 | 	mov	arg01, result1
0f994     80 6F B1 FD | 	call	#__system___lockmem
0f998     B6 01 00 FF 
0f99c     95 14 06 F6 | 	mov	arg02, ##@LR__5865
0f9a0     00 12 06 F6 | 	mov	arg01, #0
0f9a4     00 16 06 F6 | 	mov	arg03, #0
0f9a8     64 7C B1 FD | 	call	#__system___basic_print_string
0f9ac     52 00 00 FF 
0f9b0     D8 E4 05 F1 | 	add	objptr, ##42200
0f9b4     F2 14 02 FB | 	rdlong	arg02, objptr
0f9b8     52 00 00 FF 
0f9bc     D8 E4 85 F1 | 	sub	objptr, ##42200
0f9c0     00 12 06 F6 | 	mov	arg01, #0
0f9c4     00 16 06 F6 | 	mov	arg03, #0
0f9c8     0A 18 06 F6 | 	mov	arg04, #10
0f9cc     84 7C B1 FD | 	call	#__system___basic_print_integer
0f9d0     B6 01 00 FF 
0f9d4     A5 14 06 F6 | 	mov	arg02, ##@LR__5866
0f9d8     00 12 06 F6 | 	mov	arg01, #0
0f9dc     00 16 06 F6 | 	mov	arg03, #0
0f9e0     2C 7C B1 FD | 	call	#__system___basic_print_string
0f9e4     50 00 00 FF 
0f9e8     F0 E4 05 F1 | 	add	objptr, ##41200
0f9ec     F2 14 02 FB | 	rdlong	arg02, objptr
0f9f0     50 00 00 FF 
0f9f4     F0 E4 85 F1 | 	sub	objptr, ##41200
0f9f8     00 12 06 F6 | 	mov	arg01, #0
0f9fc     00 16 06 F6 | 	mov	arg03, #0
0fa00     0A 18 06 F6 | 	mov	arg04, #10
0fa04     8C 7C B1 FD | 	call	#__system___basic_print_unsigned
0fa08     B6 01 00 FF 
0fa0c     AF 14 06 F6 | 	mov	arg02, ##@LR__5867
0fa10     00 12 06 F6 | 	mov	arg01, #0
0fa14     00 16 06 F6 | 	mov	arg03, #0
0fa18     F4 7B B1 FD | 	call	#__system___basic_print_string
0fa1c     00 34 06 F6 | 	mov	local08, #0
0fa20     52 00 00 FF 
0fa24     D8 E4 05 F1 | 	add	objptr, ##42200
0fa28     F2 12 02 FB | 	rdlong	arg01, objptr
0fa2c     52 00 00 FF 
0fa30     D8 E4 85 F1 | 	sub	objptr, ##42200
0fa34     70 98 B1 FD | 	call	#__system___strerror
0fa38     FD 14 02 F6 | 	mov	arg02, result1
0fa3c     1A 13 02 F6 | 	mov	arg01, local08
0fa40     00 16 06 F6 | 	mov	arg03, #0
0fa44     C8 7B B1 FD | 	call	#__system___basic_print_string
0fa48     B6 01 00 FF 
0fa4c     B2 14 06 F6 | 	mov	arg02, ##@LR__5868
0fa50     00 12 06 F6 | 	mov	arg01, #0
0fa54     00 16 06 F6 | 	mov	arg03, #0
0fa58     B4 7B B1 FD | 	call	#__system___basic_print_string
0fa5c     00 12 06 F6 | 	mov	arg01, #0
0fa60     19 15 02 F6 | 	mov	arg02, local07
0fa64     00 16 06 F6 | 	mov	arg03, #0
0fa68     A4 7B B1 FD | 	call	#__system___basic_print_string
0fa6c     00 12 06 F6 | 	mov	arg01, #0
0fa70     0A 14 06 F6 | 	mov	arg02, #10
0fa74     00 16 06 F6 | 	mov	arg03, #0
0fa78     3C 7B B1 FD | 	call	#__system___basic_print_char
0fa7c     00 12 06 F6 | 	mov	arg01, #0
0fa80     38 CB B1 FD | 	call	#__system___getiolock_0603
0fa84     FD 00 68 FC | 	wrlong	#0, result1
0fa88     09 12 06 F6 | 	mov	arg01, #9
0fa8c     E4 C1 B1 FD | 	call	#__system__close
0fa90     D0 01 90 FD | 	jmp	#LR__1299
0fa94                 | LR__1296
0fa94                 | ' open filename_2 for output as #8 : err=geterr(): if err<>0 then print "System error - ";err; " in line ";runheader(0);": ";strerror$(err);", file name: ";filename_2  : close #8 : return
0fa94     08 12 06 F6 | 	mov	arg01, #8
0fa98     1A 15 02 F6 | 	mov	arg02, local08
0fa9c     0D 16 06 F6 | 	mov	arg03, #13
0faa0     78 7A B1 FD | 	call	#__system___basic_open_string
0faa4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0faa8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0faac     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0fab0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fab4     52 00 00 FF 
0fab8     D8 E4 05 F1 | 	add	objptr, ##42200
0fabc     F2 FA 61 FC | 	wrlong	result1, objptr
0fac0     52 00 00 FF 
0fac4     D8 E4 85 F1 | 	sub	objptr, ##42200
0fac8     0C 01 90 AD |  if_e	jmp	#LR__1297
0facc     00 12 06 F6 | 	mov	arg01, #0
0fad0     E8 CA B1 FD | 	call	#__system___getiolock_0603
0fad4     FD 12 02 F6 | 	mov	arg01, result1
0fad8     3C 6E B1 FD | 	call	#__system___lockmem
0fadc     B6 01 00 FF 
0fae0     C0 14 06 F6 | 	mov	arg02, ##@LR__5869
0fae4     00 12 06 F6 | 	mov	arg01, #0
0fae8     00 16 06 F6 | 	mov	arg03, #0
0faec     20 7B B1 FD | 	call	#__system___basic_print_string
0faf0     52 00 00 FF 
0faf4     D8 E4 05 F1 | 	add	objptr, ##42200
0faf8     F2 14 02 FB | 	rdlong	arg02, objptr
0fafc     52 00 00 FF 
0fb00     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb04     00 12 06 F6 | 	mov	arg01, #0
0fb08     00 16 06 F6 | 	mov	arg03, #0
0fb0c     0A 18 06 F6 | 	mov	arg04, #10
0fb10     40 7B B1 FD | 	call	#__system___basic_print_integer
0fb14     B6 01 00 FF 
0fb18     D0 14 06 F6 | 	mov	arg02, ##@LR__5870
0fb1c     00 12 06 F6 | 	mov	arg01, #0
0fb20     00 16 06 F6 | 	mov	arg03, #0
0fb24     E8 7A B1 FD | 	call	#__system___basic_print_string
0fb28     50 00 00 FF 
0fb2c     F0 E4 05 F1 | 	add	objptr, ##41200
0fb30     F2 14 02 FB | 	rdlong	arg02, objptr
0fb34     50 00 00 FF 
0fb38     F0 E4 85 F1 | 	sub	objptr, ##41200
0fb3c     00 12 06 F6 | 	mov	arg01, #0
0fb40     00 16 06 F6 | 	mov	arg03, #0
0fb44     0A 18 06 F6 | 	mov	arg04, #10
0fb48     48 7B B1 FD | 	call	#__system___basic_print_unsigned
0fb4c     B6 01 00 FF 
0fb50     DA 14 06 F6 | 	mov	arg02, ##@LR__5871
0fb54     00 12 06 F6 | 	mov	arg01, #0
0fb58     00 16 06 F6 | 	mov	arg03, #0
0fb5c     B0 7A B1 FD | 	call	#__system___basic_print_string
0fb60     00 32 06 F6 | 	mov	local07, #0
0fb64     52 00 00 FF 
0fb68     D8 E4 05 F1 | 	add	objptr, ##42200
0fb6c     F2 12 02 FB | 	rdlong	arg01, objptr
0fb70     52 00 00 FF 
0fb74     D8 E4 85 F1 | 	sub	objptr, ##42200
0fb78     2C 97 B1 FD | 	call	#__system___strerror
0fb7c     FD 14 02 F6 | 	mov	arg02, result1
0fb80     19 13 02 F6 | 	mov	arg01, local07
0fb84     00 16 06 F6 | 	mov	arg03, #0
0fb88     84 7A B1 FD | 	call	#__system___basic_print_string
0fb8c     B6 01 00 FF 
0fb90     DD 14 06 F6 | 	mov	arg02, ##@LR__5872
0fb94     00 12 06 F6 | 	mov	arg01, #0
0fb98     00 16 06 F6 | 	mov	arg03, #0
0fb9c     70 7A B1 FD | 	call	#__system___basic_print_string
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     1A 15 02 F6 | 	mov	arg02, local08
0fba8     00 16 06 F6 | 	mov	arg03, #0
0fbac     60 7A B1 FD | 	call	#__system___basic_print_string
0fbb0     00 12 06 F6 | 	mov	arg01, #0
0fbb4     0A 14 06 F6 | 	mov	arg02, #10
0fbb8     00 16 06 F6 | 	mov	arg03, #0
0fbbc     F8 79 B1 FD | 	call	#__system___basic_print_char
0fbc0     00 12 06 F6 | 	mov	arg01, #0
0fbc4     F4 C9 B1 FD | 	call	#__system___getiolock_0603
0fbc8     FD 00 68 FC | 	wrlong	#0, result1
0fbcc     08 12 06 F6 | 	mov	arg01, #8
0fbd0     A0 C0 B1 FD | 	call	#__system__close
0fbd4     8C 00 90 FD | 	jmp	#LR__1299
0fbd8                 | LR__1297
0fbd8                 | ' 
0fbd8                 | ' do
0fbd8                 | LR__1298
0fbd8                 | '   get #9,,block(0),1024,r
0fbd8     4E 00 00 FF 
0fbdc     B4 E4 05 F1 | 	add	objptr, ##40116
0fbe0     F2 16 02 F6 | 	mov	arg03, objptr
0fbe4     4E 00 00 FF 
0fbe8     B4 E4 85 F1 | 	sub	objptr, ##40116
0fbec     09 12 06 F6 | 	mov	arg01, #9
0fbf0     00 14 06 F6 | 	mov	arg02, #0
0fbf4     0A 18 C6 F9 | 	decod	arg04, #10
0fbf8     01 1A 06 F6 | 	mov	arg05, #1
0fbfc     8C 7B B1 FD | 	call	#__system___basic_get
0fc00     52 00 00 FF 
0fc04     10 E5 05 F1 | 	add	objptr, ##42256
0fc08     F2 FA 61 FC | 	wrlong	result1, objptr
0fc0c                 | '   put #8,,block(0),r
0fc0c     04 00 00 FF 
0fc10     5C E4 85 F1 | 	sub	objptr, ##2140
0fc14     F2 16 02 F6 | 	mov	arg03, objptr
0fc18     FD 18 02 F6 | 	mov	arg04, result1
0fc1c     4E 00 00 FF 
0fc20     B4 E4 85 F1 | 	sub	objptr, ##40116
0fc24     08 12 06 F6 | 	mov	arg01, #8
0fc28     00 14 06 F6 | 	mov	arg02, #0
0fc2c     01 1A 06 F6 | 	mov	arg05, #1
0fc30     EC 7A B1 FD | 	call	#__system___basic_put
0fc34     52 00 00 FF 
0fc38     10 E5 05 F1 | 	add	objptr, ##42256
0fc3c     F2 34 02 FB | 	rdlong	local08, objptr
0fc40     52 00 00 FF 
0fc44     10 E5 85 F1 | 	sub	objptr, ##42256
0fc48     02 00 00 FF 
0fc4c     00 34 0E F2 | 	cmp	local08, ##1024 wz
0fc50     84 FF 9F AD |  if_e	jmp	#LR__1298
0fc54                 | ' close #8
0fc54     08 12 06 F6 | 	mov	arg01, #8
0fc58     18 C0 B1 FD | 	call	#__system__close
0fc5c                 | ' close #9
0fc5c     09 12 06 F6 | 	mov	arg01, #9
0fc60     10 C0 B1 FD | 	call	#__system__close
0fc64                 | LR__1299
0fc64     A7 F0 03 F6 | 	mov	ptra, fp
0fc68     B2 00 A0 FD | 	call	#popregs_
0fc6c                 | _do_copy_ret
0fc6c     2D 00 64 FD | 	ret
0fc70                 | 
0fc70                 | ' 
0fc70                 | ' '-------------------- cos
0fc70                 | ' 
0fc70                 | ' sub do_cos
0fc70                 | _do_cos
0fc70     01 4A 05 F6 | 	mov	COUNT_, #1
0fc74     A8 00 A0 FD | 	call	#pushregs_
0fc78     10 F0 07 F1 | 	add	ptra, #16
0fc7c     4A 00 00 FF 
0fc80     80 E4 05 F1 | 	add	objptr, ##38016
0fc84     F2 26 02 FB | 	rdlong	local01, objptr
0fc88     13 17 02 F6 | 	mov	arg03, local01
0fc8c     01 16 66 F0 | 	shl	arg03, #1
0fc90     13 17 02 F1 | 	add	arg03, local01
0fc94     02 16 66 F0 | 	shl	arg03, #2
0fc98     03 00 00 FF 
0fc9c     04 E4 85 F1 | 	sub	objptr, ##1540
0fca0     F2 16 02 F1 | 	add	arg03, objptr
0fca4     0B 17 02 FB | 	rdlong	arg03, arg03
0fca8     0C 4E 05 F1 | 	add	fp, #12
0fcac     A7 16 62 FC | 	wrlong	arg03, fp
0fcb0                 | ' 
0fcb0                 | ' numpar=compiledline(lineptr_e).result.uresult
0fcb0                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0fcb0     0C 4E 85 F1 | 	sub	fp, #12
0fcb4     02 16 16 F2 | 	cmp	arg03, #2 wc
0fcb8     47 00 00 FF 
0fcbc     7C E4 85 F1 | 	sub	objptr, ##36476
0fcc0     0C 4E 05 C1 |  if_b	add	fp, #12
0fcc4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0fcc8     0C 4E 85 C1 |  if_b	sub	fp, #12
0fccc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1300
0fcd0     00 12 06 F6 | 	mov	arg01, #0
0fcd4     E4 C8 B1 FD | 	call	#__system___getiolock_0603
0fcd8     FD 12 02 F6 | 	mov	arg01, result1
0fcdc     38 6C B1 FD | 	call	#__system___lockmem
0fce0     B6 01 00 FF 
0fce4     EB 14 06 F6 | 	mov	arg02, ##@LR__5873
0fce8     00 12 06 F6 | 	mov	arg01, #0
0fcec     00 16 06 F6 | 	mov	arg03, #0
0fcf0     1C 79 B1 FD | 	call	#__system___basic_print_string
0fcf4     00 12 06 F6 | 	mov	arg01, #0
0fcf8     C0 C8 B1 FD | 	call	#__system___getiolock_0603
0fcfc     FD 00 68 FC | 	wrlong	#0, result1
0fd00     27 12 06 F6 | 	mov	arg01, #39
0fd04     00 14 06 F6 | 	mov	arg02, #0
0fd08     1C 32 B1 FD | 	call	#_printerror
0fd0c     78 00 90 FD | 	jmp	#LR__1301
0fd10                 | LR__1300
0fd10     74 D8 BF FD | 	call	#_pop
0fd14     A7 FA 61 FC | 	wrlong	result1, fp
0fd18     04 4E 05 F1 | 	add	fp, #4
0fd1c     A7 FC 61 FC | 	wrlong	result2, fp
0fd20     04 4E 05 F1 | 	add	fp, #4
0fd24     A7 FE 61 FC | 	wrlong	result3, fp
0fd28     08 4E 85 F1 | 	sub	fp, #8
0fd2c     52 00 00 FF 
0fd30     A8 E4 05 F1 | 	add	objptr, ##42152
0fd34     F2 26 02 FB | 	rdlong	local01, objptr
0fd38     52 00 00 FF 
0fd3c     A8 E4 85 F1 | 	sub	objptr, ##42152
0fd40     A7 12 02 F6 | 	mov	arg01, fp
0fd44     E0 DA BF FD | 	call	#_converttofloat
0fd48     FD 14 02 F6 | 	mov	arg02, result1
0fd4c     13 13 02 F6 | 	mov	arg01, local01
0fd50     40 9A B1 FD | 	call	#__system___float_mul
0fd54     FD 14 02 F6 | 	mov	arg02, result1
0fd58     87 E4 1F FF 
0fd5c     DB 13 06 F6 | 	mov	arg01, ##1070141403
0fd60     1F 14 E6 F4 | 	bitnot	arg02, #31
0fd64     5C 96 B1 FD | 	call	#__system___float_add
0fd68     FD 12 02 F6 | 	mov	arg01, result1
0fd6c     84 A3 B1 FD | 	call	#__system____builtin_sinf
0fd70     A7 FA 61 FC | 	wrlong	result1, fp
0fd74     08 4E 05 F1 | 	add	fp, #8
0fd78     A7 3C 68 FC | 	wrlong	#30, fp
0fd7c     08 4E 85 F1 | 	sub	fp, #8
0fd80     A7 12 02 F6 | 	mov	arg01, fp
0fd84     98 D8 BF FD | 	call	#_push
0fd88                 | LR__1301
0fd88     A7 F0 03 F6 | 	mov	ptra, fp
0fd8c     B2 00 A0 FD | 	call	#popregs_
0fd90                 | _do_cos_ret
0fd90     2D 00 64 FD | 	ret
0fd94                 | 
0fd94                 | ' 
0fd94                 | ' '-------------------- cursor
0fd94                 | ' 
0fd94                 | ' sub do_cursor
0fd94                 | _do_cursor
0fd94     F0 D7 BF FD | 	call	#_pop
0fd98     00 FA 4D F2 | 	cmps	result1, #0 wz
0fd9c                 | ' t1=pop()
0fd9c                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0fd9c     14 00 90 5D |  if_ne	jmp	#LR__1310
0fda0     11 12 06 F6 | 	mov	arg01, #17
0fda4     00 14 06 F6 | 	mov	arg02, #0
0fda8     00 16 06 F6 | 	mov	arg03, #0
0fdac     C4 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fdb0     10 00 90 FD | 	jmp	#LR__1311
0fdb4                 | LR__1310
0fdb4     11 12 06 F6 | 	mov	arg01, #17
0fdb8     08 14 06 F6 | 	mov	arg02, #8
0fdbc     10 16 06 F6 | 	mov	arg03, #16
0fdc0     B0 41 B1 FD | 	call	#_hg010b_spin2_setspritesize
0fdc4                 | LR__1311
0fdc4                 | _do_cursor_ret
0fdc4     2D 00 64 FD | 	ret
0fdc8                 | 
0fdc8                 | ' 
0fdc8                 | ' '-------------------- defenv
0fdc8                 | ' 
0fdc8                 | ' sub do_defenv
0fdc8                 | _do_defenv
0fdc8     08 4A 05 F6 | 	mov	COUNT_, #8
0fdcc     A8 00 A0 FD | 	call	#pushregs_
0fdd0     58 F0 07 F1 | 	add	ptra, #88
0fdd4     4A 00 00 FF 
0fdd8     80 E4 05 F1 | 	add	objptr, ##38016
0fddc     F2 26 02 FB | 	rdlong	local01, objptr
0fde0     13 1B 02 F6 | 	mov	arg05, local01
0fde4     01 1A 66 F0 | 	shl	arg05, #1
0fde8     13 1B 02 F1 | 	add	arg05, local01
0fdec     02 1A 66 F0 | 	shl	arg05, #2
0fdf0     03 00 00 FF 
0fdf4     04 E4 85 F1 | 	sub	objptr, ##1540
0fdf8     F2 1A 02 F1 | 	add	arg05, objptr
0fdfc     0D 1B 02 FB | 	rdlong	arg05, arg05
0fe00     10 4E 05 F1 | 	add	fp, #16
0fe04     A7 1A 62 FC | 	wrlong	arg05, fp
0fe08                 | ' 
0fe08                 | ' numpar=compiledline(lineptr_e).result.uresult
0fe08                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0fe08     10 4E 85 F1 | 	sub	fp, #16
0fe0c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0fe10     47 00 00 FF 
0fe14     7C E4 85 F1 | 	sub	objptr, ##36476
0fe18     10 4E 05 51 |  if_ne	add	fp, #16
0fe1c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0fe20     10 4E 85 51 |  if_ne	sub	fp, #16
0fe24     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0fe28     90 0A 90 5D |  if_ne	jmp	#LR__1341
0fe2c                 | ' 
0fe2c                 | ' if numpar=2 then						' env from .h2 or from a pointer
0fe2c     10 4E 05 F1 | 	add	fp, #16
0fe30     A7 26 02 FB | 	rdlong	local01, fp
0fe34     10 4E 85 F1 | 	sub	fp, #16
0fe38     02 26 0E F2 | 	cmp	local01, #2 wz
0fe3c     28 04 90 5D |  if_ne	jmp	#LR__1333
0fe40     44 D7 BF FD | 	call	#_pop
0fe44     FF 1A 02 F6 | 	mov	arg05, result3
0fe48     40 4E 05 F1 | 	add	fp, #64
0fe4c     A7 FA 61 FC | 	wrlong	result1, fp
0fe50     04 4E 05 F1 | 	add	fp, #4
0fe54     A7 FC 61 FC | 	wrlong	result2, fp
0fe58     04 4E 05 F1 | 	add	fp, #4
0fe5c     A7 1A 62 FC | 	wrlong	arg05, fp
0fe60                 | '   t1=pop()
0fe60                 | '   if t1.result_type=result_string2 then 
0fe60     48 4E 85 F1 | 	sub	fp, #72
0fe64     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0fe68     20 00 90 5D |  if_ne	jmp	#LR__1320
0fe6c     40 4E 05 F1 | 	add	fp, #64
0fe70     A7 12 02 FB | 	rdlong	arg01, fp
0fe74     40 4E 85 F1 | 	sub	fp, #64
0fe78     84 D8 BF FD | 	call	#_convertstring
0fe7c     4C 4E 05 F1 | 	add	fp, #76
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84     4C 4E 85 F1 | 	sub	fp, #76
0fe88     58 00 90 FD | 	jmp	#LR__1323
0fe8c                 | LR__1320
0fe8c     48 4E 05 F1 | 	add	fp, #72
0fe90     A7 26 02 FB | 	rdlong	local01, fp
0fe94     48 4E 85 F1 | 	sub	fp, #72
0fe98     1F 26 0E F2 | 	cmp	local01, #31 wz
0fe9c     18 00 90 5D |  if_ne	jmp	#LR__1321
0fea0     40 4E 05 F1 | 	add	fp, #64
0fea4     A7 26 02 FB | 	rdlong	local01, fp
0fea8     0C 4E 05 F1 | 	add	fp, #12
0feac     A7 26 62 FC | 	wrlong	local01, fp
0feb0     4C 4E 85 F1 | 	sub	fp, #76
0feb4     2C 00 90 FD | 	jmp	#LR__1322
0feb8                 | LR__1321
0feb8     B6 01 00 FF 
0febc     F1 26 06 F6 | 	mov	local01, ##@LR__5874
0fec0     4C 4E 05 F1 | 	add	fp, #76
0fec4     A7 26 62 FC | 	wrlong	local01, fp
0fec8     0C 4E 85 F1 | 	sub	fp, #12
0fecc     A7 12 02 F6 | 	mov	arg01, fp
0fed0     40 4E 85 F1 | 	sub	fp, #64
0fed4     94 D8 BF FD | 	call	#_converttoint
0fed8     1C 4E 05 F1 | 	add	fp, #28
0fedc     A7 FA 61 FC | 	wrlong	result1, fp
0fee0     1C 4E 85 F1 | 	sub	fp, #28
0fee4                 | LR__1322
0fee4                 | LR__1323
0fee4                 | '   if s1<>"" then 
0fee4     4C 4E 05 F1 | 	add	fp, #76
0fee8     A7 12 02 FB | 	rdlong	arg01, fp
0feec     4C 4E 85 F1 | 	sub	fp, #76
0fef0     B6 01 00 FF 
0fef4     F2 14 06 F6 | 	mov	arg02, ##@LR__5875
0fef8     44 6A B1 FD | 	call	#__system___string_cmp
0fefc     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff00     28 02 90 AD |  if_e	jmp	#LR__1327
0ff04     80 D6 BF FD | 	call	#_pop
0ff08     FF 26 02 F6 | 	mov	local01, result3
0ff0c     40 4E 05 F1 | 	add	fp, #64
0ff10     A7 FA 61 FC | 	wrlong	result1, fp
0ff14     04 4E 05 F1 | 	add	fp, #4
0ff18     A7 FC 61 FC | 	wrlong	result2, fp
0ff1c     04 4E 05 F1 | 	add	fp, #4
0ff20     A7 26 62 FC | 	wrlong	local01, fp
0ff24     08 4E 85 F1 | 	sub	fp, #8
0ff28     A7 12 02 F6 | 	mov	arg01, fp
0ff2c     40 4E 85 F1 | 	sub	fp, #64
0ff30     38 D8 BF FD | 	call	#_converttoint
0ff34     18 4E 05 F1 | 	add	fp, #24
0ff38     A7 FA 61 FC | 	wrlong	result1, fp
0ff3c     18 4E 85 F1 | 	sub	fp, #24
0ff40                 | '     t1=pop()
0ff40                 | '     channel=converttoint(t1) 
0ff40                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0ff40     09 12 06 F6 | 	mov	arg01, #9
0ff44     2C BD B1 FD | 	call	#__system__close
0ff48     09 26 06 F6 | 	mov	local01, #9
0ff4c     B6 01 00 FF 
0ff50     F3 12 06 F6 | 	mov	arg01, ##@LR__5876
0ff54     4C 4E 05 F1 | 	add	fp, #76
0ff58     A7 14 02 FB | 	rdlong	arg02, fp
0ff5c     4C 4E 85 F1 | 	sub	fp, #76
0ff60     10 6A B1 FD | 	call	#__system___string_concat
0ff64     FD 14 02 F6 | 	mov	arg02, result1
0ff68     13 13 02 F6 | 	mov	arg01, local01
0ff6c     00 16 06 F6 | 	mov	arg03, #0
0ff70     A8 75 B1 FD | 	call	#__system___basic_open_string
0ff74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ff78     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ff7c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
0ff80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ff84     0C 4E 05 F1 | 	add	fp, #12
0ff88     A7 FA 61 FC | 	wrlong	result1, fp
0ff8c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0ff8c     0C 4E 85 F1 | 	sub	fp, #12
0ff90     A0 00 90 AD |  if_e	jmp	#LR__1324
0ff94     00 12 06 F6 | 	mov	arg01, #0
0ff98     20 C6 B1 FD | 	call	#__system___getiolock_0603
0ff9c     FD 12 02 F6 | 	mov	arg01, result1
0ffa0     74 69 B1 FD | 	call	#__system___lockmem
0ffa4     B6 01 00 FF 
0ffa8     00 15 06 F6 | 	mov	arg02, ##@LR__5877
0ffac     00 12 06 F6 | 	mov	arg01, #0
0ffb0     00 16 06 F6 | 	mov	arg03, #0
0ffb4     58 76 B1 FD | 	call	#__system___basic_print_string
0ffb8     0C 4E 05 F1 | 	add	fp, #12
0ffbc     A7 14 02 FB | 	rdlong	arg02, fp
0ffc0     0C 4E 85 F1 | 	sub	fp, #12
0ffc4     00 12 06 F6 | 	mov	arg01, #0
0ffc8     00 16 06 F6 | 	mov	arg03, #0
0ffcc     0A 18 06 F6 | 	mov	arg04, #10
0ffd0     80 76 B1 FD | 	call	#__system___basic_print_integer
0ffd4     B6 01 00 FF 
0ffd8     0E 15 06 F6 | 	mov	arg02, ##@LR__5878
0ffdc     00 12 06 F6 | 	mov	arg01, #0
0ffe0     00 16 06 F6 | 	mov	arg03, #0
0ffe4     28 76 B1 FD | 	call	#__system___basic_print_string
0ffe8     00 26 06 F6 | 	mov	local01, #0
0ffec     0C 4E 05 F1 | 	add	fp, #12
0fff0     A7 12 02 FB | 	rdlong	arg01, fp
0fff4     0C 4E 85 F1 | 	sub	fp, #12
0fff8     AC 92 B1 FD | 	call	#__system___strerror
0fffc     FD 14 02 F6 | 	mov	arg02, result1
10000     13 13 02 F6 | 	mov	arg01, local01
10004     00 16 06 F6 | 	mov	arg03, #0
10008     04 76 B1 FD | 	call	#__system___basic_print_string
1000c     00 12 06 F6 | 	mov	arg01, #0
10010     0A 14 06 F6 | 	mov	arg02, #10
10014     00 16 06 F6 | 	mov	arg03, #0
10018     9C 75 B1 FD | 	call	#__system___basic_print_char
1001c     00 12 06 F6 | 	mov	arg01, #0
10020     98 C5 B1 FD | 	call	#__system___getiolock_0603
10024     FD 00 68 FC | 	wrlong	#0, result1
10028     09 12 06 F6 | 	mov	arg01, #9
1002c     44 BC B1 FD | 	call	#__system__close
10030     88 08 90 FD | 	jmp	#LR__1341
10034                 | LR__1324
10034                 | '     get #9,17,envbuf8(channel,0),256
10034     18 4E 05 F1 | 	add	fp, #24
10038     A7 1A 02 FB | 	rdlong	arg05, fp
1003c     18 4E 85 F1 | 	sub	fp, #24
10040     0D 17 02 F6 | 	mov	arg03, arg05
10044     09 16 66 F0 | 	shl	arg03, #9
10048     0D 17 02 F1 | 	add	arg03, arg05
1004c     0C 00 00 FF 
10050     D8 E4 05 F1 | 	add	objptr, ##6360
10054     F2 16 02 F1 | 	add	arg03, objptr
10058     09 12 06 F6 | 	mov	arg01, #9
1005c     11 14 06 F6 | 	mov	arg02, #17
10060     00 19 06 F6 | 	mov	arg04, #256
10064     01 1A 06 F6 | 	mov	arg05, #1
10068     0C 00 00 FF 
1006c     D8 E4 85 F1 | 	sub	objptr, ##6360
10070     18 77 B1 FD | 	call	#__system___basic_get
10074                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
10074     14 4E 05 F1 | 	add	fp, #20
10078     A7 FE 69 FC | 	wrlong	#255, fp
1007c     14 4E 85 F1 | 	sub	fp, #20
10080     0C 00 00 FF 
10084     D8 E4 05 F1 | 	add	objptr, ##6360
10088     97 30 48 FB | 	callpa	#(@LR__1326-@LR__1325)>>2,fcache_load_ptr_
1008c                 | LR__1325
1008c     18 4E 05 F1 | 	add	fp, #24
10090     A7 16 02 FB | 	rdlong	arg03, fp
10094     0B 27 02 F6 | 	mov	local01, arg03
10098     09 26 66 F0 | 	shl	local01, #9
1009c     F2 26 02 F1 | 	add	local01, objptr
100a0     04 4E 85 F1 | 	sub	fp, #4
100a4     A7 1A 02 FB | 	rdlong	arg05, fp
100a8     0D 19 02 F6 | 	mov	arg04, arg05
100ac     01 18 66 F0 | 	shl	arg04, #1
100b0     13 19 02 F1 | 	add	arg04, local01
100b4     0B 27 02 F6 | 	mov	local01, arg03
100b8     09 26 66 F0 | 	shl	local01, #9
100bc     0B 27 02 F1 | 	add	local01, arg03
100c0     F2 26 02 F1 | 	add	local01, objptr
100c4     13 1B 02 F1 | 	add	arg05, local01
100c8     0D 27 C2 FA | 	rdbyte	local01, arg05
100cc     00 27 06 FA | 	mul	local01, #256
100d0     0C 27 52 FC | 	wrword	local01, arg04
100d4     A7 26 02 FB | 	rdlong	local01, fp
100d8     01 26 86 F1 | 	sub	local01, #1
100dc     A7 26 62 FC | 	wrlong	local01, fp
100e0     14 4E 85 F1 | 	sub	fp, #20
100e4     00 26 56 F2 | 	cmps	local01, #0 wc
100e8     A0 FF 9F 3D |  if_ae	jmp	#LR__1325
100ec                 | LR__1326
100ec     0C 00 00 FF 
100f0     D8 E4 85 F1 | 	sub	objptr, ##6360
100f4                 | '     close #9
100f4     09 12 06 F6 | 	mov	arg01, #9
100f8     78 BB B1 FD | 	call	#__system__close
100fc     18 4E 05 F1 | 	add	fp, #24
10100     A7 26 02 FB | 	rdlong	local01, fp
10104     18 4E 85 F1 | 	sub	fp, #24
10108     09 26 66 F0 | 	shl	local01, #9
1010c     0C 00 00 FF 
10110     D8 E4 05 F1 | 	add	objptr, ##6360
10114     F2 26 02 F1 | 	add	local01, objptr
10118     FE 27 06 F1 | 	add	local01, #510
1011c     13 01 58 FC | 	wrword	#0, local01
10120                 | '     envbuf(channel,255)=0                                                              
10120                 | '     return
10120     0C 00 00 FF 
10124     D8 E4 85 F1 | 	sub	objptr, ##6360
10128     90 07 90 FD | 	jmp	#LR__1341
1012c                 | LR__1327
1012c                 | '     if wptr < $80000 then 
1012c     1C 4E 05 F1 | 	add	fp, #28
10130     A7 28 02 FB | 	rdlong	local02, fp
10134     1C 4E 85 F1 | 	sub	fp, #28
10138     00 04 00 FF 
1013c     00 28 56 F2 | 	cmps	local02, ##524288 wc
10140     7C 00 90 3D |  if_ae	jmp	#LR__1330
10144                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
10144     14 4E 05 F1 | 	add	fp, #20
10148     A7 00 68 FC | 	wrlong	#0, fp
1014c     14 4E 85 F1 | 	sub	fp, #20
10150     0C 00 00 FF 
10154     D8 E4 05 F1 | 	add	objptr, ##6360
10158     97 2C 48 FB | 	callpa	#(@LR__1329-@LR__1328)>>2,fcache_load_ptr_
1015c                 | LR__1328
1015c     18 4E 05 F1 | 	add	fp, #24
10160     A7 28 02 FB | 	rdlong	local02, fp
10164     09 28 66 F0 | 	shl	local02, #9
10168     F2 28 02 F1 | 	add	local02, objptr
1016c     04 4E 85 F1 | 	sub	fp, #4
10170     A7 26 02 FB | 	rdlong	local01, fp
10174     13 1B 02 F6 | 	mov	arg05, local01
10178     01 1A 66 F0 | 	shl	arg05, #1
1017c     14 1B 02 F1 | 	add	arg05, local02
10180     08 4E 05 F1 | 	add	fp, #8
10184     A7 12 02 FB | 	rdlong	arg01, fp
10188     01 26 66 F0 | 	shl	local01, #1
1018c     13 13 02 F1 | 	add	arg01, local01
10190     09 FB E1 FA | 	rdword	result1, arg01
10194     0D FB 51 FC | 	wrword	result1, arg05
10198     08 4E 85 F1 | 	sub	fp, #8
1019c     A7 28 02 FB | 	rdlong	local02, fp
101a0     01 28 06 F1 | 	add	local02, #1
101a4     A7 28 62 FC | 	wrlong	local02, fp
101a8     14 4E 85 F1 | 	sub	fp, #20
101ac     00 29 56 F2 | 	cmps	local02, #256 wc
101b0     A8 FF 9F CD |  if_b	jmp	#LR__1328
101b4                 | LR__1329
101b4     0C 00 00 FF 
101b8     D8 E4 85 F1 | 	sub	objptr, ##6360
101bc     78 00 90 FD | 	jmp	#LR__1332
101c0                 | LR__1330
101c0                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
101c0     14 4E 05 F1 | 	add	fp, #20
101c4     A7 00 68 FC | 	wrlong	#0, fp
101c8     14 4E 85 F1 | 	sub	fp, #20
101cc                 | LR__1331
101cc     18 4E 05 F1 | 	add	fp, #24
101d0     A7 28 02 FB | 	rdlong	local02, fp
101d4     09 28 66 F0 | 	shl	local02, #9
101d8     0C 00 00 FF 
101dc     D8 E4 05 F1 | 	add	objptr, ##6360
101e0     F2 28 02 F1 | 	add	local02, objptr
101e4     04 4E 85 F1 | 	sub	fp, #4
101e8     A7 26 02 FB | 	rdlong	local01, fp
101ec     13 2B 02 F6 | 	mov	local03, local01
101f0     01 2A 66 F0 | 	shl	local03, #1
101f4     14 2B 02 F1 | 	add	local03, local02
101f8     08 4E 05 F1 | 	add	fp, #8
101fc     A7 12 02 FB | 	rdlong	arg01, fp
10200     1C 4E 85 F1 | 	sub	fp, #28
10204     01 26 66 F0 | 	shl	local01, #1
10208     13 13 02 F1 | 	add	arg01, local01
1020c     0C 00 00 FF 
10210     D8 E4 85 F1 | 	sub	objptr, ##6360
10214     38 30 B1 FD | 	call	#_psdpeek
10218     15 FB 51 FC | 	wrword	result1, local03
1021c     14 4E 05 F1 | 	add	fp, #20
10220     A7 2A 02 FB | 	rdlong	local03, fp
10224     01 2A 06 F1 | 	add	local03, #1
10228     A7 2A 62 FC | 	wrlong	local03, fp
1022c     14 4E 85 F1 | 	sub	fp, #20
10230     00 2B 56 F2 | 	cmps	local03, #256 wc
10234     94 FF 9F CD |  if_b	jmp	#LR__1331
10238                 | LR__1332
10238     18 4E 05 F1 | 	add	fp, #24
1023c     A7 2A 02 FB | 	rdlong	local03, fp
10240     18 4E 85 F1 | 	sub	fp, #24
10244     09 2A 66 F0 | 	shl	local03, #9
10248     0C 00 00 FF 
1024c     D8 E4 05 F1 | 	add	objptr, ##6360
10250     F2 2A 02 F1 | 	add	local03, objptr
10254     FE 2B 06 F1 | 	add	local03, #510
10258     15 01 58 FC | 	wrword	#0, local03
1025c                 | '     envbuf(channel,255)=0
1025c                 | '     return   
1025c     0C 00 00 FF 
10260     D8 E4 85 F1 | 	sub	objptr, ##6360
10264     54 06 90 FD | 	jmp	#LR__1341
10268                 | LR__1333
10268                 | ' 
10268                 | ' if numpar=5 then   						 'simple adsr
10268     10 4E 05 F1 | 	add	fp, #16
1026c     A7 28 02 FB | 	rdlong	local02, fp
10270     10 4E 85 F1 | 	sub	fp, #16
10274     05 28 0E F2 | 	cmp	local02, #5 wz
10278     14 06 90 5D |  if_ne	jmp	#LR__1340
1027c     08 D3 BF FD | 	call	#_pop
10280     FF 26 02 F6 | 	mov	local01, result3
10284     40 4E 05 F1 | 	add	fp, #64
10288     A7 FA 61 FC | 	wrlong	result1, fp
1028c     04 4E 05 F1 | 	add	fp, #4
10290     A7 FC 61 FC | 	wrlong	result2, fp
10294     04 4E 05 F1 | 	add	fp, #4
10298     A7 26 62 FC | 	wrlong	local01, fp
1029c     08 4E 85 F1 | 	sub	fp, #8
102a0     A7 12 02 F6 | 	mov	arg01, fp
102a4     40 4E 85 F1 | 	sub	fp, #64
102a8     7C D5 BF FD | 	call	#_converttofloat
102ac     FD 28 02 F6 | 	mov	local02, result1
102b0     2C 4E 05 F1 | 	add	fp, #44
102b4     A7 28 62 FC | 	wrlong	local02, fp
102b8     2C 4E 85 F1 | 	sub	fp, #44
102bc     C8 D2 BF FD | 	call	#_pop
102c0     FF 26 02 F6 | 	mov	local01, result3
102c4     40 4E 05 F1 | 	add	fp, #64
102c8     A7 FA 61 FC | 	wrlong	result1, fp
102cc     04 4E 05 F1 | 	add	fp, #4
102d0     A7 FC 61 FC | 	wrlong	result2, fp
102d4     04 4E 05 F1 | 	add	fp, #4
102d8     A7 26 62 FC | 	wrlong	local01, fp
102dc     08 4E 85 F1 | 	sub	fp, #8
102e0     A7 12 02 F6 | 	mov	arg01, fp
102e4     40 4E 85 F1 | 	sub	fp, #64
102e8     3C D5 BF FD | 	call	#_converttofloat
102ec     FD 28 02 F6 | 	mov	local02, result1
102f0     28 4E 05 F1 | 	add	fp, #40
102f4     A7 28 62 FC | 	wrlong	local02, fp
102f8     28 4E 85 F1 | 	sub	fp, #40
102fc     88 D2 BF FD | 	call	#_pop
10300     FF 26 02 F6 | 	mov	local01, result3
10304     40 4E 05 F1 | 	add	fp, #64
10308     A7 FA 61 FC | 	wrlong	result1, fp
1030c     04 4E 05 F1 | 	add	fp, #4
10310     A7 FC 61 FC | 	wrlong	result2, fp
10314     04 4E 05 F1 | 	add	fp, #4
10318     A7 26 62 FC | 	wrlong	local01, fp
1031c     08 4E 85 F1 | 	sub	fp, #8
10320     A7 12 02 F6 | 	mov	arg01, fp
10324     40 4E 85 F1 | 	sub	fp, #64
10328     FC D4 BF FD | 	call	#_converttofloat
1032c     FD 28 02 F6 | 	mov	local02, result1
10330     24 4E 05 F1 | 	add	fp, #36
10334     A7 28 62 FC | 	wrlong	local02, fp
10338     24 4E 85 F1 | 	sub	fp, #36
1033c     48 D2 BF FD | 	call	#_pop
10340     FF 26 02 F6 | 	mov	local01, result3
10344     40 4E 05 F1 | 	add	fp, #64
10348     A7 FA 61 FC | 	wrlong	result1, fp
1034c     04 4E 05 F1 | 	add	fp, #4
10350     A7 FC 61 FC | 	wrlong	result2, fp
10354     04 4E 05 F1 | 	add	fp, #4
10358     A7 26 62 FC | 	wrlong	local01, fp
1035c     08 4E 85 F1 | 	sub	fp, #8
10360     A7 12 02 F6 | 	mov	arg01, fp
10364     40 4E 85 F1 | 	sub	fp, #64
10368     BC D4 BF FD | 	call	#_converttofloat
1036c     FD 28 02 F6 | 	mov	local02, result1
10370     20 4E 05 F1 | 	add	fp, #32
10374     A7 28 62 FC | 	wrlong	local02, fp
10378     20 4E 85 F1 | 	sub	fp, #32
1037c     08 D2 BF FD | 	call	#_pop
10380     FF 26 02 F6 | 	mov	local01, result3
10384     40 4E 05 F1 | 	add	fp, #64
10388     A7 FA 61 FC | 	wrlong	result1, fp
1038c     04 4E 05 F1 | 	add	fp, #4
10390     A7 FC 61 FC | 	wrlong	result2, fp
10394     04 4E 05 F1 | 	add	fp, #4
10398     A7 26 62 FC | 	wrlong	local01, fp
1039c     08 4E 85 F1 | 	sub	fp, #8
103a0     A7 12 02 F6 | 	mov	arg01, fp
103a4     40 4E 85 F1 | 	sub	fp, #64
103a8     C0 D3 BF FD | 	call	#_converttoint
103ac     18 4E 05 F1 | 	add	fp, #24
103b0     A7 FA 61 FC | 	wrlong	result1, fp
103b4                 | '   t1=pop() : rr=converttofloat(t1)
103b4                 | '   t1=pop() : ss=converttofloat(t1) 
103b4                 | '   t1=pop() : dd=converttofloat(t1)
103b4                 | '   t1=pop() : aa=converttofloat(t1)
103b4                 | '   t1=pop() : channel=converttoint(t1)
103b4                 | '   if ss<0.0 then ss=0.0 
103b4     10 4E 05 F1 | 	add	fp, #16
103b8     A7 12 02 FB | 	rdlong	arg01, fp
103bc     28 4E 85 F1 | 	sub	fp, #40
103c0     00 14 06 F6 | 	mov	arg02, #0
103c4     01 16 06 F6 | 	mov	arg03, #1
103c8     FC 97 B1 FD | 	call	#__system___float_cmp
103cc     00 FA 55 F2 | 	cmps	result1, #0 wc
103d0     28 4E 05 C1 |  if_b	add	fp, #40
103d4     A7 00 68 CC |  if_b	wrlong	#0, fp
103d8     28 4E 85 C1 |  if_b	sub	fp, #40
103dc                 | '   if ss>1.0 then ss=1.0
103dc     28 4E 05 F1 | 	add	fp, #40
103e0     A7 12 02 FB | 	rdlong	arg01, fp
103e4     28 4E 85 F1 | 	sub	fp, #40
103e8     00 C0 1F FF 
103ec     00 14 06 F6 | 	mov	arg02, ##1065353216
103f0     01 16 66 F6 | 	neg	arg03, #1
103f4     D0 97 B1 FD | 	call	#__system___float_cmp
103f8     01 FA 55 F2 | 	cmps	result1, #1 wc
103fc     28 4E 05 31 |  if_ae	add	fp, #40
10400     00 C0 9F 3F 
10404     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
10408     28 4E 85 31 |  if_ae	sub	fp, #40
1040c     20 4E 05 F1 | 	add	fp, #32
10410     A7 12 02 FB | 	rdlong	arg01, fp
10414     04 4E 05 F1 | 	add	fp, #4
10418     A7 14 02 FB | 	rdlong	arg02, fp
1041c     24 4E 85 F1 | 	sub	fp, #36
10420     A0 8F B1 FD | 	call	#__system___float_add
10424     FD 12 02 F6 | 	mov	arg01, result1
10428     2C 4E 05 F1 | 	add	fp, #44
1042c     A7 14 02 FB | 	rdlong	arg02, fp
10430     2C 4E 85 F1 | 	sub	fp, #44
10434     8C 8F B1 FD | 	call	#__system___float_add
10438     30 4E 05 F1 | 	add	fp, #48
1043c     A7 FA 61 FC | 	wrlong	result1, fp
10440     FD 14 02 F6 | 	mov	arg02, result1
10444     30 4E 85 F1 | 	sub	fp, #48
10448     00 C0 21 FF 
1044c     00 12 06 F6 | 	mov	arg01, ##1132462080
10450     44 95 B1 FD | 	call	#__system___float_div
10454     34 4E 05 F1 | 	add	fp, #52
10458     A7 FA 61 FC | 	wrlong	result1, fp
1045c     14 4E 85 F1 | 	sub	fp, #20
10460     A7 12 02 FB | 	rdlong	arg01, fp
10464     FD 14 02 F6 | 	mov	arg02, result1
10468     20 4E 85 F1 | 	sub	fp, #32
1046c     24 93 B1 FD | 	call	#__system___float_mul
10470     FD 12 02 F6 | 	mov	arg01, result1
10474     01 14 06 F6 | 	mov	arg02, #1
10478     E0 97 B1 FD | 	call	#__system___float_tointeger
1047c     A7 FA 61 FC | 	wrlong	result1, fp
10480     24 4E 05 F1 | 	add	fp, #36
10484     A7 12 02 FB | 	rdlong	arg01, fp
10488     10 4E 05 F1 | 	add	fp, #16
1048c     A7 14 02 FB | 	rdlong	arg02, fp
10490     34 4E 85 F1 | 	sub	fp, #52
10494     FC 92 B1 FD | 	call	#__system___float_mul
10498     FD 12 02 F6 | 	mov	arg01, result1
1049c     01 14 06 F6 | 	mov	arg02, #1
104a0     B8 97 B1 FD | 	call	#__system___float_tointeger
104a4     04 4E 05 F1 | 	add	fp, #4
104a8     A7 FA 61 FC | 	wrlong	result1, fp
104ac     28 4E 05 F1 | 	add	fp, #40
104b0     A7 12 02 FB | 	rdlong	arg01, fp
104b4     08 4E 05 F1 | 	add	fp, #8
104b8     A7 14 02 FB | 	rdlong	arg02, fp
104bc     34 4E 85 F1 | 	sub	fp, #52
104c0     D0 92 B1 FD | 	call	#__system___float_mul
104c4     FD 12 02 F6 | 	mov	arg01, result1
104c8     01 14 06 F6 | 	mov	arg02, #1
104cc     8C 97 B1 FD | 	call	#__system___float_tointeger
104d0     0C 4E 05 F1 | 	add	fp, #12
104d4     A7 FA 61 FC | 	wrlong	result1, fp
104d8     0C 4E 85 F1 | 	sub	fp, #12
104dc     F8 BF 23 FF 
104e0     00 28 06 F6 | 	mov	local02, ##1199566848
104e4     A7 12 02 FB | 	rdlong	arg01, fp
104e8     09 13 52 F6 | 	abs	arg01, arg01 wc
104ec     1F 2C C6 C9 |  if_b	decod	local04, #31
104f0     00 2C 06 36 |  if_ae	mov	local04, #0
104f4     98 8E B1 FD | 	call	#__system___float_fromuns
104f8     16 FB 61 F5 | 	xor	result1, local04
104fc     FD 14 02 F6 | 	mov	arg02, result1
10500     14 13 02 F6 | 	mov	arg01, local02
10504     90 94 B1 FD | 	call	#__system___float_div
10508     38 4E 05 F1 | 	add	fp, #56
1050c     A7 FA 61 FC | 	wrlong	result1, fp
10510     F8 BF 23 FF 
10514     00 28 06 F6 | 	mov	local02, ##1199566848
10518     10 4E 85 F1 | 	sub	fp, #16
1051c     A7 14 02 FB | 	rdlong	arg02, fp
10520     28 4E 85 F1 | 	sub	fp, #40
10524     F8 BF 23 FF 
10528     00 12 06 F6 | 	mov	arg01, ##1199566848
1052c     64 92 B1 FD | 	call	#__system___float_mul
10530     FD 14 02 F6 | 	mov	arg02, result1
10534     14 13 02 F6 | 	mov	arg01, local02
10538     1F 14 E6 F4 | 	bitnot	arg02, #31
1053c     84 8E B1 FD | 	call	#__system___float_add
10540     FD 28 02 F6 | 	mov	local02, result1
10544     04 4E 05 F1 | 	add	fp, #4
10548     A7 12 02 FB | 	rdlong	arg01, fp
1054c     04 4E 85 F1 | 	sub	fp, #4
10550     09 13 52 F6 | 	abs	arg01, arg01 wc
10554     1F 2C C6 C9 |  if_b	decod	local04, #31
10558     00 2C 06 36 |  if_ae	mov	local04, #0
1055c     30 8E B1 FD | 	call	#__system___float_fromuns
10560     16 FB 61 F5 | 	xor	result1, local04
10564     FD 14 02 F6 | 	mov	arg02, result1
10568     14 13 02 F6 | 	mov	arg01, local02
1056c     28 94 B1 FD | 	call	#__system___float_div
10570     24 4E 05 F1 | 	add	fp, #36
10574     A7 FA 61 FC | 	wrlong	result1, fp
10578     04 4E 05 F1 | 	add	fp, #4
1057c     A7 14 02 FB | 	rdlong	arg02, fp
10580     28 4E 85 F1 | 	sub	fp, #40
10584     F8 BF 23 FF 
10588     00 12 06 F6 | 	mov	arg01, ##1199566848
1058c     04 92 B1 FD | 	call	#__system___float_mul
10590     FD 28 02 F6 | 	mov	local02, result1
10594     0C 4E 05 F1 | 	add	fp, #12
10598     A7 12 02 FB | 	rdlong	arg01, fp
1059c     0C 4E 85 F1 | 	sub	fp, #12
105a0     09 13 52 F6 | 	abs	arg01, arg01 wc
105a4     1F 2C C6 C9 |  if_b	decod	local04, #31
105a8     00 2C 06 36 |  if_ae	mov	local04, #0
105ac     E0 8D B1 FD | 	call	#__system___float_fromuns
105b0     16 FB 61 F5 | 	xor	result1, local04
105b4     FD 14 02 F6 | 	mov	arg02, result1
105b8     14 13 02 F6 | 	mov	arg01, local02
105bc     D8 93 B1 FD | 	call	#__system___float_div
105c0     3C 4E 05 F1 | 	add	fp, #60
105c4     A7 FA 61 FC | 	wrlong	result1, fp
105c8     24 4E 85 F1 | 	sub	fp, #36
105cc     A7 2E 02 FB | 	rdlong	local05, fp
105d0     18 4E 85 F1 | 	sub	fp, #24
105d4     01 2E 66 F0 | 	shl	local05, #1
105d8     52 00 00 FF 
105dc     B4 E4 05 F1 | 	add	objptr, ##42164
105e0     F2 2E 02 F1 | 	add	local05, objptr
105e4     A7 30 02 FB | 	rdlong	local06, fp
105e8     04 4E 05 F1 | 	add	fp, #4
105ec     A7 2A 02 FB | 	rdlong	local03, fp
105f0     15 31 02 F1 | 	add	local06, local03
105f4     17 31 52 FC | 	wrword	local06, local05
105f8     1C 4E 05 F1 | 	add	fp, #28
105fc     A7 00 68 FC | 	wrlong	#0, fp
10600                 | '   fulltime=aa+dd+rr
10600                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
10600                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
10600                 | '   suspoints(channel)=a+d
10600                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
10600     0C 4E 85 F1 | 	sub	fp, #12
10604     A7 00 68 FC | 	wrlong	#0, fp
10608     14 4E 85 F1 | 	sub	fp, #20
1060c     A7 32 02 FB | 	rdlong	local07, fp
10610     52 00 00 FF 
10614     B4 E4 85 F1 | 	sub	objptr, ##42164
10618                 | LR__1334
10618     14 4E 05 F1 | 	add	fp, #20
1061c     A7 28 02 FB | 	rdlong	local02, fp
10620     14 4E 85 F1 | 	sub	fp, #20
10624     19 29 52 F2 | 	cmps	local02, local07 wc
10628     80 00 90 3D |  if_ae	jmp	#LR__1335
1062c     18 4E 05 F1 | 	add	fp, #24
10630     A7 30 02 FB | 	rdlong	local06, fp
10634     09 30 66 F0 | 	shl	local06, #9
10638     0C 00 00 FF 
1063c     D8 E4 05 F1 | 	add	objptr, ##6360
10640     F2 30 02 F1 | 	add	local06, objptr
10644     04 4E 85 F1 | 	sub	fp, #4
10648     A7 2E 02 FB | 	rdlong	local05, fp
1064c     01 2E 66 F0 | 	shl	local05, #1
10650     18 2F 02 F1 | 	add	local05, local06
10654     0C 4E 05 F1 | 	add	fp, #12
10658     A7 12 02 FB | 	rdlong	arg01, fp
1065c     20 4E 85 F1 | 	sub	fp, #32
10660     0C 00 00 FF 
10664     D8 E4 85 F1 | 	sub	objptr, ##6360
10668     01 14 06 F6 | 	mov	arg02, #1
1066c     EC 95 B1 FD | 	call	#__system___float_tointeger
10670     17 FB 51 FC | 	wrword	result1, local05
10674     20 4E 05 F1 | 	add	fp, #32
10678     A7 12 02 FB | 	rdlong	arg01, fp
1067c     18 4E 05 F1 | 	add	fp, #24
10680     A7 14 02 FB | 	rdlong	arg02, fp
10684     38 4E 85 F1 | 	sub	fp, #56
10688     38 8D B1 FD | 	call	#__system___float_add
1068c     20 4E 05 F1 | 	add	fp, #32
10690     A7 FA 61 FC | 	wrlong	result1, fp
10694     0C 4E 85 F1 | 	sub	fp, #12
10698     A7 30 02 FB | 	rdlong	local06, fp
1069c     01 30 06 F1 | 	add	local06, #1
106a0     A7 30 62 FC | 	wrlong	local06, fp
106a4     14 4E 85 F1 | 	sub	fp, #20
106a8     6C FF 9F FD | 	jmp	#LR__1334
106ac                 | LR__1335
106ac                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
106ac     A7 28 02 FB | 	rdlong	local02, fp
106b0     14 4E 05 F1 | 	add	fp, #20
106b4     A7 28 62 FC | 	wrlong	local02, fp
106b8     14 4E 85 F1 | 	sub	fp, #20
106bc     A7 34 02 FB | 	rdlong	local08, fp
106c0     04 4E 05 F1 | 	add	fp, #4
106c4     A7 28 02 FB | 	rdlong	local02, fp
106c8     04 4E 85 F1 | 	sub	fp, #4
106cc     14 35 02 F1 | 	add	local08, local02
106d0                 | LR__1336
106d0     14 4E 05 F1 | 	add	fp, #20
106d4     A7 28 02 FB | 	rdlong	local02, fp
106d8     14 4E 85 F1 | 	sub	fp, #20
106dc     1A 29 52 F2 | 	cmps	local02, local08 wc
106e0     A8 00 90 3D |  if_ae	jmp	#LR__1337
106e4     18 4E 05 F1 | 	add	fp, #24
106e8     A7 32 02 FB | 	rdlong	local07, fp
106ec     09 32 66 F0 | 	shl	local07, #9
106f0     0C 00 00 FF 
106f4     D8 E4 05 F1 | 	add	objptr, ##6360
106f8     F2 32 02 F1 | 	add	local07, objptr
106fc     04 4E 85 F1 | 	sub	fp, #4
10700     A7 30 02 FB | 	rdlong	local06, fp
10704     01 30 66 F0 | 	shl	local06, #1
10708     19 31 02 F1 | 	add	local06, local07
1070c     0C 4E 05 F1 | 	add	fp, #12
10710     A7 12 02 FB | 	rdlong	arg01, fp
10714     20 4E 85 F1 | 	sub	fp, #32
10718     0C 00 00 FF 
1071c     D8 E4 85 F1 | 	sub	objptr, ##6360
10720     01 14 06 F6 | 	mov	arg02, #1
10724     34 95 B1 FD | 	call	#__system___float_tointeger
10728     18 FB 51 FC | 	wrword	result1, local06
1072c     20 4E 05 F1 | 	add	fp, #32
10730     A7 12 02 FB | 	rdlong	arg01, fp
10734     04 4E 05 F1 | 	add	fp, #4
10738     A7 14 02 FB | 	rdlong	arg02, fp
1073c     24 4E 85 F1 | 	sub	fp, #36
10740     1F 14 E6 F4 | 	bitnot	arg02, #31
10744     7C 8C B1 FD | 	call	#__system___float_add
10748     20 4E 05 F1 | 	add	fp, #32
1074c     A7 FA 61 FC | 	wrlong	result1, fp
10750     20 4E 85 F1 | 	sub	fp, #32
10754     FD 12 02 F6 | 	mov	arg01, result1
10758     00 14 06 F6 | 	mov	arg02, #0
1075c     01 16 06 F6 | 	mov	arg03, #1
10760     64 94 B1 FD | 	call	#__system___float_cmp
10764     00 FA 55 F2 | 	cmps	result1, #0 wc
10768     20 4E 05 C1 |  if_b	add	fp, #32
1076c     A7 00 68 CC |  if_b	wrlong	#0, fp
10770     20 4E 85 C1 |  if_b	sub	fp, #32
10774     14 4E 05 F1 | 	add	fp, #20
10778     A7 32 02 FB | 	rdlong	local07, fp
1077c     01 32 06 F1 | 	add	local07, #1
10780     A7 32 62 FC | 	wrlong	local07, fp
10784     14 4E 85 F1 | 	sub	fp, #20
10788     44 FF 9F FD | 	jmp	#LR__1336
1078c                 | LR__1337
1078c                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
1078c     A7 28 02 FB | 	rdlong	local02, fp
10790     04 4E 05 F1 | 	add	fp, #4
10794     A7 34 02 FB | 	rdlong	local08, fp
10798     1A 29 02 F1 | 	add	local02, local08
1079c     10 4E 05 F1 | 	add	fp, #16
107a0     A7 28 62 FC | 	wrlong	local02, fp
107a4     14 4E 85 F1 | 	sub	fp, #20
107a8                 | LR__1338
107a8     14 4E 05 F1 | 	add	fp, #20
107ac     A7 2E 02 FB | 	rdlong	local05, fp
107b0     14 4E 85 F1 | 	sub	fp, #20
107b4     00 2F 56 F2 | 	cmps	local05, #256 wc
107b8     A8 00 90 3D |  if_ae	jmp	#LR__1339
107bc     18 4E 05 F1 | 	add	fp, #24
107c0     A7 34 02 FB | 	rdlong	local08, fp
107c4     09 34 66 F0 | 	shl	local08, #9
107c8     0C 00 00 FF 
107cc     D8 E4 05 F1 | 	add	objptr, ##6360
107d0     F2 34 02 F1 | 	add	local08, objptr
107d4     04 4E 85 F1 | 	sub	fp, #4
107d8     A7 32 02 FB | 	rdlong	local07, fp
107dc     01 32 66 F0 | 	shl	local07, #1
107e0     1A 33 02 F1 | 	add	local07, local08
107e4     0C 4E 05 F1 | 	add	fp, #12
107e8     A7 12 02 FB | 	rdlong	arg01, fp
107ec     20 4E 85 F1 | 	sub	fp, #32
107f0     0C 00 00 FF 
107f4     D8 E4 85 F1 | 	sub	objptr, ##6360
107f8     01 14 06 F6 | 	mov	arg02, #1
107fc     5C 94 B1 FD | 	call	#__system___float_tointeger
10800     19 FB 51 FC | 	wrword	result1, local07
10804     20 4E 05 F1 | 	add	fp, #32
10808     A7 12 02 FB | 	rdlong	arg01, fp
1080c     1C 4E 05 F1 | 	add	fp, #28
10810     A7 14 02 FB | 	rdlong	arg02, fp
10814     3C 4E 85 F1 | 	sub	fp, #60
10818     1F 14 E6 F4 | 	bitnot	arg02, #31
1081c     A4 8B B1 FD | 	call	#__system___float_add
10820     20 4E 05 F1 | 	add	fp, #32
10824     A7 FA 61 FC | 	wrlong	result1, fp
10828     20 4E 85 F1 | 	sub	fp, #32
1082c     FD 12 02 F6 | 	mov	arg01, result1
10830     00 14 06 F6 | 	mov	arg02, #0
10834     01 16 06 F6 | 	mov	arg03, #1
10838     8C 93 B1 FD | 	call	#__system___float_cmp
1083c     00 FA 55 F2 | 	cmps	result1, #0 wc
10840     20 4E 05 C1 |  if_b	add	fp, #32
10844     A7 00 68 CC |  if_b	wrlong	#0, fp
10848     20 4E 85 C1 |  if_b	sub	fp, #32
1084c     14 4E 05 F1 | 	add	fp, #20
10850     A7 34 02 FB | 	rdlong	local08, fp
10854     01 34 06 F1 | 	add	local08, #1
10858     A7 34 62 FC | 	wrlong	local08, fp
1085c     14 4E 85 F1 | 	sub	fp, #20
10860     44 FF 9F FD | 	jmp	#LR__1338
10864                 | LR__1339
10864     18 4E 05 F1 | 	add	fp, #24
10868     A7 2E 02 FB | 	rdlong	local05, fp
1086c     18 4E 85 F1 | 	sub	fp, #24
10870     09 2E 66 F0 | 	shl	local05, #9
10874     0C 00 00 FF 
10878     D8 E4 05 F1 | 	add	objptr, ##6360
1087c     F2 2E 02 F1 | 	add	local05, objptr
10880     FE 2F 06 F1 | 	add	local05, #510
10884     17 01 58 FC | 	wrword	#0, local05
10888     0C 00 00 FF 
1088c     D8 E4 85 F1 | 	sub	objptr, ##6360
10890                 | LR__1340
10890     18 4E 05 F1 | 	add	fp, #24
10894     A7 2E 02 FB | 	rdlong	local05, fp
10898     18 4E 85 F1 | 	sub	fp, #24
1089c     09 2E 66 F0 | 	shl	local05, #9
108a0     0C 00 00 FF 
108a4     D8 E4 05 F1 | 	add	objptr, ##6360
108a8     F2 2E 02 F1 | 	add	local05, objptr
108ac     FE 2F 06 F1 | 	add	local05, #510
108b0     17 01 58 FC | 	wrword	#0, local05
108b4     0C 00 00 FF 
108b8     D8 E4 85 F1 | 	sub	objptr, ##6360
108bc                 | LR__1341
108bc     A7 F0 03 F6 | 	mov	ptra, fp
108c0     B2 00 A0 FD | 	call	#popregs_
108c4                 | _do_defenv_ret
108c4     2D 00 64 FD | 	ret
108c8                 | 
108c8                 | ' 
108c8                 | ' '-------------------- defsnd
108c8                 | ' 
108c8                 | ' sub do_defsnd
108c8                 | _do_defsnd
108c8     04 4A 05 F6 | 	mov	COUNT_, #4
108cc     A8 00 A0 FD | 	call	#pushregs_
108d0     88 F0 07 F1 | 	add	ptra, #136
108d4     4A 00 00 FF 
108d8     80 E4 05 F1 | 	add	objptr, ##38016
108dc     F2 1A 02 FB | 	rdlong	arg05, objptr
108e0     0D 19 02 F6 | 	mov	arg04, arg05
108e4     01 18 66 F0 | 	shl	arg04, #1
108e8     0D 19 02 F1 | 	add	arg04, arg05
108ec     02 18 66 F0 | 	shl	arg04, #2
108f0     03 00 00 FF 
108f4     04 E4 85 F1 | 	sub	objptr, ##1540
108f8     F2 18 02 F1 | 	add	arg04, objptr
108fc     0C 1B 02 FB | 	rdlong	arg05, arg04
10900     A7 1A 62 FC | 	wrlong	arg05, fp
10904                 | ' 
10904                 | ' numpar=compiledline(lineptr_e).result.uresult
10904                 | ' 
10904                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
10904                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
10904                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
10904                 | ' ' defsnd channel, oneint - loads the wave from the pointer
10904                 | ' 
10904                 | ' if numpar<2 then return
10904     02 1A 56 F2 | 	cmps	arg05, #2 wc
10908     47 00 00 FF 
1090c     7C E4 85 F1 | 	sub	objptr, ##36476
10910     98 08 90 CD |  if_b	jmp	#LR__1373
10914                 | '  
10914                 | ' if numpar=2 then
10914     A7 1A 02 FB | 	rdlong	arg05, fp
10918     02 1A 0E F2 | 	cmp	arg05, #2 wz
1091c     A4 03 90 5D |  if_ne	jmp	#LR__1360
10920     64 CC BF FD | 	call	#_pop
10924     FF 1A 02 F6 | 	mov	arg05, result3
10928     2C 4E 05 F1 | 	add	fp, #44
1092c     A7 FA 61 FC | 	wrlong	result1, fp
10930     04 4E 05 F1 | 	add	fp, #4
10934     A7 FC 61 FC | 	wrlong	result2, fp
10938     04 4E 05 F1 | 	add	fp, #4
1093c     A7 1A 62 FC | 	wrlong	arg05, fp
10940                 | '   t1=pop()
10940                 | '   if t1.result_type=result_string2 then 
10940     34 4E 85 F1 | 	sub	fp, #52
10944     2B 1A 0E F2 | 	cmp	arg05, #43 wz
10948     20 00 90 5D |  if_ne	jmp	#LR__1350
1094c     2C 4E 05 F1 | 	add	fp, #44
10950     A7 12 02 FB | 	rdlong	arg01, fp
10954     2C 4E 85 F1 | 	sub	fp, #44
10958     A4 CD BF FD | 	call	#_convertstring
1095c     38 4E 05 F1 | 	add	fp, #56
10960     A7 FA 61 FC | 	wrlong	result1, fp
10964     38 4E 85 F1 | 	sub	fp, #56
10968     58 00 90 FD | 	jmp	#LR__1353
1096c                 | LR__1350
1096c     34 4E 05 F1 | 	add	fp, #52
10970     A7 1A 02 FB | 	rdlong	arg05, fp
10974     34 4E 85 F1 | 	sub	fp, #52
10978     1F 1A 0E F2 | 	cmp	arg05, #31 wz
1097c     18 00 90 5D |  if_ne	jmp	#LR__1351
10980     2C 4E 05 F1 | 	add	fp, #44
10984     A7 1A 02 FB | 	rdlong	arg05, fp
10988     0C 4E 05 F1 | 	add	fp, #12
1098c     A7 1A 62 FC | 	wrlong	arg05, fp
10990     38 4E 85 F1 | 	sub	fp, #56
10994     2C 00 90 FD | 	jmp	#LR__1352
10998                 | LR__1351
10998     B6 01 00 FF 
1099c     11 1B 06 F6 | 	mov	arg05, ##@LR__5879
109a0     38 4E 05 F1 | 	add	fp, #56
109a4     A7 1A 62 FC | 	wrlong	arg05, fp
109a8     0C 4E 85 F1 | 	sub	fp, #12
109ac     A7 12 02 F6 | 	mov	arg01, fp
109b0     2C 4E 85 F1 | 	sub	fp, #44
109b4     B4 CD BF FD | 	call	#_converttoint
109b8     14 4E 05 F1 | 	add	fp, #20
109bc     A7 FA 61 FC | 	wrlong	result1, fp
109c0     14 4E 85 F1 | 	sub	fp, #20
109c4                 | LR__1352
109c4                 | LR__1353
109c4                 | '   if s<>"" then 
109c4     38 4E 05 F1 | 	add	fp, #56
109c8     A7 12 02 FB | 	rdlong	arg01, fp
109cc     38 4E 85 F1 | 	sub	fp, #56
109d0     B6 01 00 FF 
109d4     12 15 06 F6 | 	mov	arg02, ##@LR__5880
109d8     64 5F B1 FD | 	call	#__system___string_cmp
109dc     00 FA 0D F2 | 	cmp	result1, #0 wz
109e0     E4 01 90 AD |  if_e	jmp	#LR__1356
109e4     A0 CB BF FD | 	call	#_pop
109e8     FF 1A 02 F6 | 	mov	arg05, result3
109ec     2C 4E 05 F1 | 	add	fp, #44
109f0     A7 FA 61 FC | 	wrlong	result1, fp
109f4     04 4E 05 F1 | 	add	fp, #4
109f8     A7 FC 61 FC | 	wrlong	result2, fp
109fc     04 4E 05 F1 | 	add	fp, #4
10a00     A7 1A 62 FC | 	wrlong	arg05, fp
10a04     08 4E 85 F1 | 	sub	fp, #8
10a08     A7 12 02 F6 | 	mov	arg01, fp
10a0c     2C 4E 85 F1 | 	sub	fp, #44
10a10     58 CD BF FD | 	call	#_converttoint
10a14     10 4E 05 F1 | 	add	fp, #16
10a18     A7 FA 61 FC | 	wrlong	result1, fp
10a1c                 | '     t1=pop()
10a1c                 | '     channel=converttoint(t1) : if channel>31 then return
10a1c     FD 1A 02 F6 | 	mov	arg05, result1
10a20     10 4E 85 F1 | 	sub	fp, #16
10a24     20 1A 56 F2 | 	cmps	arg05, #32 wc
10a28     80 07 90 3D |  if_ae	jmp	#LR__1373
10a2c                 | '     close #9 : open "/sd/media/s/"+s for input as #9
10a2c     09 12 06 F6 | 	mov	arg01, #9
10a30     40 B2 B1 FD | 	call	#__system__close
10a34     09 26 06 F6 | 	mov	local01, #9
10a38     B6 01 00 FF 
10a3c     13 13 06 F6 | 	mov	arg01, ##@LR__5881
10a40     38 4E 05 F1 | 	add	fp, #56
10a44     A7 14 02 FB | 	rdlong	arg02, fp
10a48     38 4E 85 F1 | 	sub	fp, #56
10a4c     24 5F B1 FD | 	call	#__system___string_concat
10a50     FD 14 02 F6 | 	mov	arg02, result1
10a54     13 13 02 F6 | 	mov	arg01, local01
10a58     00 16 06 F6 | 	mov	arg03, #0
10a5c     BC 6A B1 FD | 	call	#__system___basic_open_string
10a60     20 E6 05 F1 | 	add	ptr___system__dat__, #32
10a64     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
10a68     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
10a6c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
10a70     52 00 00 FF 
10a74     10 E5 05 F1 | 	add	objptr, ##42256
10a78     F2 FA 61 FC | 	wrlong	result1, objptr
10a7c                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
10a7c     52 00 00 FF 
10a80     10 E5 85 F1 | 	sub	objptr, ##42256
10a84     B0 00 90 AD |  if_e	jmp	#LR__1354
10a88     00 12 06 F6 | 	mov	arg01, #0
10a8c     2C BB B1 FD | 	call	#__system___getiolock_0603
10a90     FD 12 02 F6 | 	mov	arg01, result1
10a94     80 5E B1 FD | 	call	#__system___lockmem
10a98     B6 01 00 FF 
10a9c     20 15 06 F6 | 	mov	arg02, ##@LR__5882
10aa0     00 12 06 F6 | 	mov	arg01, #0
10aa4     00 16 06 F6 | 	mov	arg03, #0
10aa8     64 6B B1 FD | 	call	#__system___basic_print_string
10aac     52 00 00 FF 
10ab0     10 E5 05 F1 | 	add	objptr, ##42256
10ab4     F2 14 02 FB | 	rdlong	arg02, objptr
10ab8     52 00 00 FF 
10abc     10 E5 85 F1 | 	sub	objptr, ##42256
10ac0     00 12 06 F6 | 	mov	arg01, #0
10ac4     00 16 06 F6 | 	mov	arg03, #0
10ac8     0A 18 06 F6 | 	mov	arg04, #10
10acc     84 6B B1 FD | 	call	#__system___basic_print_integer
10ad0     B6 01 00 FF 
10ad4     2E 15 06 F6 | 	mov	arg02, ##@LR__5883
10ad8     00 12 06 F6 | 	mov	arg01, #0
10adc     00 16 06 F6 | 	mov	arg03, #0
10ae0     2C 6B B1 FD | 	call	#__system___basic_print_string
10ae4     00 26 06 F6 | 	mov	local01, #0
10ae8     52 00 00 FF 
10aec     10 E5 05 F1 | 	add	objptr, ##42256
10af0     F2 12 02 FB | 	rdlong	arg01, objptr
10af4     52 00 00 FF 
10af8     10 E5 85 F1 | 	sub	objptr, ##42256
10afc     A8 87 B1 FD | 	call	#__system___strerror
10b00     FD 14 02 F6 | 	mov	arg02, result1
10b04     13 13 02 F6 | 	mov	arg01, local01
10b08     00 16 06 F6 | 	mov	arg03, #0
10b0c     00 6B B1 FD | 	call	#__system___basic_print_string
10b10     00 12 06 F6 | 	mov	arg01, #0
10b14     0A 14 06 F6 | 	mov	arg02, #10
10b18     00 16 06 F6 | 	mov	arg03, #0
10b1c     98 6A B1 FD | 	call	#__system___basic_print_char
10b20     00 12 06 F6 | 	mov	arg01, #0
10b24     94 BA B1 FD | 	call	#__system___getiolock_0603
10b28     FD 00 68 FC | 	wrlong	#0, result1
10b2c     09 12 06 F6 | 	mov	arg01, #9
10b30     40 B1 B1 FD | 	call	#__system__close
10b34     74 06 90 FD | 	jmp	#LR__1373
10b38                 | LR__1354
10b38                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
10b38     04 4E 05 F1 | 	add	fp, #4
10b3c     A7 00 68 FC | 	wrlong	#0, fp
10b40                 | LR__1355
10b40     A7 26 02 FB | 	rdlong	local01, fp
10b44     01 26 66 F0 | 	shl	local01, #1
10b48     11 14 06 F6 | 	mov	arg02, #17
10b4c     13 15 02 F1 | 	add	arg02, local01
10b50     78 4E 05 F1 | 	add	fp, #120
10b54     A7 16 02 F6 | 	mov	arg03, fp
10b58     7C 4E 85 F1 | 	sub	fp, #124
10b5c     09 12 06 F6 | 	mov	arg01, #9
10b60     01 18 06 F6 | 	mov	arg04, #1
10b64     02 1A 06 F6 | 	mov	arg05, #2
10b68     20 6C B1 FD | 	call	#__system___basic_get
10b6c     10 4E 05 F1 | 	add	fp, #16
10b70     A7 12 02 FB | 	rdlong	arg01, fp
10b74     0B 12 66 F0 | 	shl	arg01, #11
10b78     0C 4E 85 F1 | 	sub	fp, #12
10b7c     A7 26 02 FB | 	rdlong	local01, fp
10b80     01 26 66 F0 | 	shl	local01, #1
10b84     13 13 02 F1 | 	add	arg01, local01
10b88     78 4E 05 F1 | 	add	fp, #120
10b8c     A7 14 E2 FA | 	rdword	arg02, fp
10b90     7C 4E 85 F1 | 	sub	fp, #124
10b94     0F 14 66 F7 | 	signx	arg02, #15
10b98     74 25 B1 FD | 	call	#_psdpoke
10b9c     04 4E 05 F1 | 	add	fp, #4
10ba0     A7 26 02 FB | 	rdlong	local01, fp
10ba4     01 26 06 F1 | 	add	local01, #1
10ba8     A7 26 62 FC | 	wrlong	local01, fp
10bac     02 00 00 FF 
10bb0     01 26 56 F2 | 	cmps	local01, ##1025 wc
10bb4     88 FF 9F CD |  if_b	jmp	#LR__1355
10bb8     04 4E 85 F1 | 	sub	fp, #4
10bbc                 | '     close #9
10bbc     09 12 06 F6 | 	mov	arg01, #9
10bc0     B0 B0 B1 FD | 	call	#__system__close
10bc4                 | '     return
10bc4     E4 05 90 FD | 	jmp	#LR__1373
10bc8                 | LR__1356
10bc8                 | '     if wptr < ($80000 - 2048) then 
10bc8     14 4E 05 F1 | 	add	fp, #20
10bcc     A7 26 02 FB | 	rdlong	local01, fp
10bd0     14 4E 85 F1 | 	sub	fp, #20
10bd4     FC 03 00 FF 
10bd8     00 26 56 F2 | 	cmps	local01, ##522240 wc
10bdc     70 00 90 3D |  if_ae	jmp	#LR__1358
10be0                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
10be0     04 4E 05 F1 | 	add	fp, #4
10be4     A7 00 68 FC | 	wrlong	#0, fp
10be8     04 4E 85 F1 | 	sub	fp, #4
10bec                 | LR__1357
10bec     10 4E 05 F1 | 	add	fp, #16
10bf0     A7 26 02 FB | 	rdlong	local01, fp
10bf4     0B 26 66 F0 | 	shl	local01, #11
10bf8     0C 4E 85 F1 | 	sub	fp, #12
10bfc     A7 1A 02 FB | 	rdlong	arg05, fp
10c00     0D 19 02 F6 | 	mov	arg04, arg05
10c04     01 18 66 F0 | 	shl	arg04, #1
10c08     0C 27 02 F1 | 	add	local01, arg04
10c0c     10 4E 05 F1 | 	add	fp, #16
10c10     A7 12 02 FB | 	rdlong	arg01, fp
10c14     14 4E 85 F1 | 	sub	fp, #20
10c18     01 1A 66 F0 | 	shl	arg05, #1
10c1c     0D 13 02 F1 | 	add	arg01, arg05
10c20     09 15 E2 FA | 	rdword	arg02, arg01
10c24     13 13 02 F6 | 	mov	arg01, local01
10c28     E4 24 B1 FD | 	call	#_psdpoke
10c2c     04 4E 05 F1 | 	add	fp, #4
10c30     A7 26 02 FB | 	rdlong	local01, fp
10c34     01 26 06 F1 | 	add	local01, #1
10c38     A7 26 62 FC | 	wrlong	local01, fp
10c3c     04 4E 85 F1 | 	sub	fp, #4
10c40     02 00 00 FF 
10c44     00 26 56 F2 | 	cmps	local01, ##1024 wc
10c48     A0 FF 9F CD |  if_b	jmp	#LR__1357
10c4c     5C 05 90 FD | 	jmp	#LR__1373
10c50                 | LR__1358
10c50                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
10c50     04 4E 05 F1 | 	add	fp, #4
10c54     A7 00 68 FC | 	wrlong	#0, fp
10c58     04 4E 85 F1 | 	sub	fp, #4
10c5c                 | LR__1359
10c5c     10 4E 05 F1 | 	add	fp, #16
10c60     A7 26 02 FB | 	rdlong	local01, fp
10c64     0B 26 66 F0 | 	shl	local01, #11
10c68     0C 4E 85 F1 | 	sub	fp, #12
10c6c     A7 1A 02 FB | 	rdlong	arg05, fp
10c70     0D 19 02 F6 | 	mov	arg04, arg05
10c74     01 18 66 F0 | 	shl	arg04, #1
10c78     0C 27 02 F1 | 	add	local01, arg04
10c7c     10 4E 05 F1 | 	add	fp, #16
10c80     A7 12 02 FB | 	rdlong	arg01, fp
10c84     14 4E 85 F1 | 	sub	fp, #20
10c88     01 1A 66 F0 | 	shl	arg05, #1
10c8c     0D 13 02 F1 | 	add	arg01, arg05
10c90     BC 25 B1 FD | 	call	#_psdpeek
10c94     FD 14 02 F6 | 	mov	arg02, result1
10c98     13 13 02 F6 | 	mov	arg01, local01
10c9c     70 24 B1 FD | 	call	#_psdpoke
10ca0     04 4E 05 F1 | 	add	fp, #4
10ca4     A7 26 02 FB | 	rdlong	local01, fp
10ca8     01 26 06 F1 | 	add	local01, #1
10cac     A7 26 62 FC | 	wrlong	local01, fp
10cb0     04 4E 85 F1 | 	sub	fp, #4
10cb4     02 00 00 FF 
10cb8     00 26 56 F2 | 	cmps	local01, ##1024 wc
10cbc     9C FF 9F CD |  if_b	jmp	#LR__1359
10cc0                 | '     return 
10cc0     E8 04 90 FD | 	jmp	#LR__1373
10cc4                 | '   return
10cc4                 | LR__1360
10cc4                 | ' for i=0 to 15 : harm(i)=0: next i  
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 00 68 FC | 	wrlong	#0, fp
10ccc     97 16 48 FB | 	callpa	#(@LR__1362-@LR__1361)>>2,fcache_load_ptr_
10cd0                 | LR__1361
10cd0     A7 26 02 FB | 	rdlong	local01, fp
10cd4     02 26 66 F0 | 	shl	local01, #2
10cd8     38 4E 05 F1 | 	add	fp, #56
10cdc     A7 26 02 F1 | 	add	local01, fp
10ce0     13 01 68 FC | 	wrlong	#0, local01
10ce4     38 4E 85 F1 | 	sub	fp, #56
10ce8     A7 26 02 FB | 	rdlong	local01, fp
10cec     01 26 06 F1 | 	add	local01, #1
10cf0     A7 26 62 FC | 	wrlong	local01, fp
10cf4     10 26 56 F2 | 	cmps	local01, #16 wc
10cf8     D4 FF 9F CD |  if_b	jmp	#LR__1361
10cfc                 | LR__1362
10cfc     04 4E 85 F1 | 	sub	fp, #4
10d00                 | ' for i=numpar to 2 step -1 
10d00     A7 26 02 FB | 	rdlong	local01, fp
10d04     04 4E 05 F1 | 	add	fp, #4
10d08     A7 26 62 FC | 	wrlong	local01, fp
10d0c     04 4E 85 F1 | 	sub	fp, #4
10d10                 | LR__1363
10d10     74 C8 BF FD | 	call	#_pop
10d14     2C 4E 05 F1 | 	add	fp, #44
10d18     A7 FA 61 FC | 	wrlong	result1, fp
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 FC 61 FC | 	wrlong	result2, fp
10d24     04 4E 05 F1 | 	add	fp, #4
10d28     A7 FE 61 FC | 	wrlong	result3, fp
10d2c     30 4E 85 F1 | 	sub	fp, #48
10d30     A7 26 02 FB | 	rdlong	local01, fp
10d34     02 26 86 F1 | 	sub	local01, #2
10d38     02 26 66 F0 | 	shl	local01, #2
10d3c     38 4E 05 F1 | 	add	fp, #56
10d40     A7 26 02 F1 | 	add	local01, fp
10d44     10 4E 85 F1 | 	sub	fp, #16
10d48     A7 12 02 F6 | 	mov	arg01, fp
10d4c     2C 4E 85 F1 | 	sub	fp, #44
10d50     D4 CA BF FD | 	call	#_converttofloat
10d54     13 FB 61 FC | 	wrlong	result1, local01
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 26 02 FB | 	rdlong	local01, fp
10d60     01 26 86 F1 | 	sub	local01, #1
10d64     A7 26 62 FC | 	wrlong	local01, fp
10d68     04 4E 85 F1 | 	sub	fp, #4
10d6c     02 26 56 F2 | 	cmps	local01, #2 wc
10d70     9C FF 9F 3D |  if_ae	jmp	#LR__1363
10d74     10 C8 BF FD | 	call	#_pop
10d78     FF 26 02 F6 | 	mov	local01, result3
10d7c     2C 4E 05 F1 | 	add	fp, #44
10d80     A7 FA 61 FC | 	wrlong	result1, fp
10d84     04 4E 05 F1 | 	add	fp, #4
10d88     A7 FC 61 FC | 	wrlong	result2, fp
10d8c     04 4E 05 F1 | 	add	fp, #4
10d90     A7 26 62 FC | 	wrlong	local01, fp
10d94     08 4E 85 F1 | 	sub	fp, #8
10d98     A7 12 02 F6 | 	mov	arg01, fp
10d9c     2C 4E 85 F1 | 	sub	fp, #44
10da0     C8 C9 BF FD | 	call	#_converttoint
10da4     10 4E 05 F1 | 	add	fp, #16
10da8     A7 FA 61 FC | 	wrlong	result1, fp
10dac                 | ' t1=pop()
10dac                 | ' channel=converttoint(t1) : : if channel>31 then return
10dac     FD 26 02 F6 | 	mov	local01, result1
10db0     10 4E 85 F1 | 	sub	fp, #16
10db4     20 26 56 F2 | 	cmps	local01, #32 wc
10db8     F0 03 90 3D |  if_ae	jmp	#LR__1373
10dbc     20 4E 05 F1 | 	add	fp, #32
10dc0     A7 00 68 FC | 	wrlong	#0, fp
10dc4                 | ' max=0
10dc4                 | ' if harm(0)<0 then
10dc4     1C 4E 05 F1 | 	add	fp, #28
10dc8     A7 12 02 FB | 	rdlong	arg01, fp
10dcc     3C 4E 85 F1 | 	sub	fp, #60
10dd0     00 14 06 F6 | 	mov	arg02, #0
10dd4     01 16 06 F6 | 	mov	arg03, #1
10dd8     EC 8D B1 FD | 	call	#__system___float_cmp
10ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
10de0     04 01 90 3D |  if_ae	jmp	#LR__1366
10de4     3C 4E 05 F1 | 	add	fp, #60
10de8     A7 FA 01 FB | 	rdlong	result1, fp
10dec     1F FA 05 F4 | 	bitl	result1, #31
10df0     24 4E 85 F1 | 	sub	fp, #36
10df4     A7 FA 61 FC | 	wrlong	result1, fp
10df8     28 4E 05 F1 | 	add	fp, #40
10dfc     A7 FA 01 FB | 	rdlong	result1, fp
10e00     1F FA 05 F4 | 	bitl	result1, #31
10e04     24 4E 85 F1 | 	sub	fp, #36
10e08     A7 FA 61 FC | 	wrlong	result1, fp
10e0c     20 4E 05 F1 | 	add	fp, #32
10e10     00 C0 9F FF 
10e14     A7 00 68 FC | 	wrlong	##1065353216, fp
10e18     24 4E 85 F1 | 	sub	fp, #36
10e1c     A7 26 02 FB | 	rdlong	local01, fp
10e20     28 4E 05 F1 | 	add	fp, #40
10e24     A7 26 62 FC | 	wrlong	local01, fp
10e28     24 4E 85 F1 | 	sub	fp, #36
10e2c     A7 26 02 FB | 	rdlong	local01, fp
10e30     28 4E 05 F1 | 	add	fp, #40
10e34     A7 26 62 FC | 	wrlong	local01, fp
10e38                 | '   harm(0)=1
10e38                 | '   harm(1)=even
10e38                 | '   harm(2)=odd
10e38                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
10e38     40 4E 85 F1 | 	sub	fp, #64
10e3c     A7 06 68 FC | 	wrlong	#3, fp
10e40                 | LR__1364
10e40     A7 1A 02 FB | 	rdlong	arg05, fp
10e44     0D 29 02 F6 | 	mov	local02, arg05
10e48     02 28 66 F0 | 	shl	local02, #2
10e4c     38 4E 05 F1 | 	add	fp, #56
10e50     A7 28 02 F1 | 	add	local02, fp
10e54     02 1A 86 F1 | 	sub	arg05, #2
10e58     02 1A 66 F0 | 	shl	arg05, #2
10e5c     A7 1A 02 F1 | 	add	arg05, fp
10e60     0D 13 02 FB | 	rdlong	arg01, arg05
10e64     24 4E 85 F1 | 	sub	fp, #36
10e68     A7 14 02 FB | 	rdlong	arg02, fp
10e6c     18 4E 85 F1 | 	sub	fp, #24
10e70     20 89 B1 FD | 	call	#__system___float_mul
10e74     14 FB 61 FC | 	wrlong	result1, local02
10e78     04 4E 05 F1 | 	add	fp, #4
10e7c     A7 2A 02 FB | 	rdlong	local03, fp
10e80     02 2A 06 F1 | 	add	local03, #2
10e84     A7 2A 62 FC | 	wrlong	local03, fp
10e88     10 2A 56 F2 | 	cmps	local03, #16 wc
10e8c     B0 FF 9F CD |  if_b	jmp	#LR__1364
10e90                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
10e90     A7 08 68 FC | 	wrlong	#4, fp
10e94                 | LR__1365
10e94     A7 2A 02 FB | 	rdlong	local03, fp
10e98     15 29 02 F6 | 	mov	local02, local03
10e9c     02 28 66 F0 | 	shl	local02, #2
10ea0     38 4E 05 F1 | 	add	fp, #56
10ea4     A7 28 02 F1 | 	add	local02, fp
10ea8     02 2A 86 F1 | 	sub	local03, #2
10eac     02 2A 66 F0 | 	shl	local03, #2
10eb0     A7 2A 02 F1 | 	add	local03, fp
10eb4     15 13 02 FB | 	rdlong	arg01, local03
10eb8     20 4E 85 F1 | 	sub	fp, #32
10ebc     A7 14 02 FB | 	rdlong	arg02, fp
10ec0     1C 4E 85 F1 | 	sub	fp, #28
10ec4     CC 88 B1 FD | 	call	#__system___float_mul
10ec8     14 FB 61 FC | 	wrlong	result1, local02
10ecc     04 4E 05 F1 | 	add	fp, #4
10ed0     A7 2A 02 FB | 	rdlong	local03, fp
10ed4     02 2A 06 F1 | 	add	local03, #2
10ed8     A7 2A 62 FC | 	wrlong	local03, fp
10edc     0F 2A 56 F2 | 	cmps	local03, #15 wc
10ee0     B0 FF 9F CD |  if_b	jmp	#LR__1365
10ee4     04 4E 85 F1 | 	sub	fp, #4
10ee8                 | LR__1366
10ee8                 | ' if harm(0)>=0 then ' synthesize with harmonics
10ee8     3C 4E 05 F1 | 	add	fp, #60
10eec     A7 12 02 FB | 	rdlong	arg01, fp
10ef0     3C 4E 85 F1 | 	sub	fp, #60
10ef4     00 14 06 F6 | 	mov	arg02, #0
10ef8     01 16 66 F6 | 	neg	arg03, #1
10efc     C8 8C B1 FD | 	call	#__system___float_cmp
10f00     00 FA 55 F2 | 	cmps	result1, #0 wc
10f04     A4 02 90 CD |  if_b	jmp	#LR__1372
10f08                 | '   for i=0 to 1023
10f08     04 4E 05 F1 | 	add	fp, #4
10f0c     A7 00 68 FC | 	wrlong	#0, fp
10f10     04 4E 85 F1 | 	sub	fp, #4
10f14                 | LR__1367
10f14     24 4E 05 F1 | 	add	fp, #36
10f18     A7 00 68 FC | 	wrlong	#0, fp
10f1c                 | '     spl=0
10f1c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
10f1c     1C 4E 85 F1 | 	sub	fp, #28
10f20     A7 00 68 FC | 	wrlong	#0, fp
10f24                 | LR__1368
10f24     A7 28 02 FB | 	rdlong	local02, fp
10f28     02 28 66 F0 | 	shl	local02, #2
10f2c     34 4E 05 F1 | 	add	fp, #52
10f30     A7 28 02 F1 | 	add	local02, fp
10f34     14 2B 02 FB | 	rdlong	local03, local02
10f38     87 E4 1D FF 
10f3c     DB 29 06 F6 | 	mov	local02, ##1003032539
10f40     38 4E 85 F1 | 	sub	fp, #56
10f44     A7 12 02 FB | 	rdlong	arg01, fp
10f48     04 4E 85 F1 | 	sub	fp, #4
10f4c     09 13 52 F6 | 	abs	arg01, arg01 wc
10f50     1F 2C C6 C9 |  if_b	decod	local04, #31
10f54     00 2C 06 36 |  if_ae	mov	local04, #0
10f58     34 84 B1 FD | 	call	#__system___float_fromuns
10f5c     16 FB 61 F5 | 	xor	result1, local04
10f60     FD 14 02 F6 | 	mov	arg02, result1
10f64     14 13 02 F6 | 	mov	arg01, local02
10f68     28 88 B1 FD | 	call	#__system___float_mul
10f6c     FD 28 02 F6 | 	mov	local02, result1
10f70     08 4E 05 F1 | 	add	fp, #8
10f74     A7 12 02 FB | 	rdlong	arg01, fp
10f78     08 4E 85 F1 | 	sub	fp, #8
10f7c     01 12 06 F1 | 	add	arg01, #1
10f80     09 13 52 F6 | 	abs	arg01, arg01 wc
10f84     1F 2C C6 C9 |  if_b	decod	local04, #31
10f88     00 2C 06 36 |  if_ae	mov	local04, #0
10f8c     00 84 B1 FD | 	call	#__system___float_fromuns
10f90     16 FB 61 F5 | 	xor	result1, local04
10f94     FD 14 02 F6 | 	mov	arg02, result1
10f98     14 13 02 F6 | 	mov	arg01, local02
10f9c     F4 87 B1 FD | 	call	#__system___float_mul
10fa0     FD 12 02 F6 | 	mov	arg01, result1
10fa4     4C 91 B1 FD | 	call	#__system____builtin_sinf
10fa8     FD 14 02 F6 | 	mov	arg02, result1
10fac     15 13 02 F6 | 	mov	arg01, local03
10fb0     E0 87 B1 FD | 	call	#__system___float_mul
10fb4     FD 14 02 F6 | 	mov	arg02, result1
10fb8     24 4E 05 F1 | 	add	fp, #36
10fbc     A7 12 02 FB | 	rdlong	arg01, fp
10fc0     24 4E 85 F1 | 	sub	fp, #36
10fc4     FC 83 B1 FD | 	call	#__system___float_add
10fc8     24 4E 05 F1 | 	add	fp, #36
10fcc     A7 FA 61 FC | 	wrlong	result1, fp
10fd0     1C 4E 85 F1 | 	sub	fp, #28
10fd4     A7 16 02 FB | 	rdlong	arg03, fp
10fd8     01 16 06 F1 | 	add	arg03, #1
10fdc     A7 16 62 FC | 	wrlong	arg03, fp
10fe0     10 16 56 F2 | 	cmps	arg03, #16 wc
10fe4     3C FF 9F CD |  if_b	jmp	#LR__1368
10fe8                 | '     if abs(spl)>max then max=abs(spl)  
10fe8     1C 4E 05 F1 | 	add	fp, #28
10fec     A7 12 02 FB | 	rdlong	arg01, fp
10ff0     1F 12 06 F4 | 	bitl	arg01, #31
10ff4     04 4E 85 F1 | 	sub	fp, #4
10ff8     A7 14 02 FB | 	rdlong	arg02, fp
10ffc     20 4E 85 F1 | 	sub	fp, #32
11000     01 16 66 F6 | 	neg	arg03, #1
11004     C0 8B B1 FD | 	call	#__system___float_cmp
11008     01 FA 55 F2 | 	cmps	result1, #1 wc
1100c     18 00 90 CD |  if_b	jmp	#LR__1369
11010     24 4E 05 F1 | 	add	fp, #36
11014     A7 FA 01 FB | 	rdlong	result1, fp
11018     1F FA 05 F4 | 	bitl	result1, #31
1101c     04 4E 85 F1 | 	sub	fp, #4
11020     A7 FA 61 FC | 	wrlong	result1, fp
11024     20 4E 85 F1 | 	sub	fp, #32
11028                 | LR__1369
11028     04 4E 05 F1 | 	add	fp, #4
1102c     A7 2A 02 FB | 	rdlong	local03, fp
11030     01 2A 06 F1 | 	add	local03, #1
11034     A7 2A 62 FC | 	wrlong	local03, fp
11038     04 4E 85 F1 | 	sub	fp, #4
1103c     02 00 00 FF 
11040     00 2A 56 F2 | 	cmps	local03, ##1024 wc
11044     CC FE 9F CD |  if_b	jmp	#LR__1367
11048                 | '   for i=0 to 1023
11048     04 4E 05 F1 | 	add	fp, #4
1104c     A7 00 68 FC | 	wrlong	#0, fp
11050     04 4E 85 F1 | 	sub	fp, #4
11054                 | LR__1370
11054     24 4E 05 F1 | 	add	fp, #36
11058     A7 00 68 FC | 	wrlong	#0, fp
1105c                 | '     spl=0
1105c                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
1105c     1C 4E 85 F1 | 	sub	fp, #28
11060     A7 00 68 FC | 	wrlong	#0, fp
11064                 | LR__1371
11064     A7 2A 02 FB | 	rdlong	local03, fp
11068     02 2A 66 F0 | 	shl	local03, #2
1106c     34 4E 05 F1 | 	add	fp, #52
11070     A7 2A 02 F1 | 	add	local03, fp
11074     15 2B 02 FB | 	rdlong	local03, local03
11078     1C 4E 85 F1 | 	sub	fp, #28
1107c     A7 14 02 FB | 	rdlong	arg02, fp
11080     20 4E 85 F1 | 	sub	fp, #32
11084     58 7F 23 FF 
11088     00 12 06 F6 | 	mov	arg01, ##1191096320
1108c     08 89 B1 FD | 	call	#__system___float_div
11090     FD 14 02 F6 | 	mov	arg02, result1
11094     15 13 02 F6 | 	mov	arg01, local03
11098     F8 86 B1 FD | 	call	#__system___float_mul
1109c     FD 2A 02 F6 | 	mov	local03, result1
110a0     87 E4 1D FF 
110a4     DB 29 06 F6 | 	mov	local02, ##1003032539
110a8     04 4E 05 F1 | 	add	fp, #4
110ac     A7 12 02 FB | 	rdlong	arg01, fp
110b0     04 4E 85 F1 | 	sub	fp, #4
110b4     09 13 52 F6 | 	abs	arg01, arg01 wc
110b8     1F 2C C6 C9 |  if_b	decod	local04, #31
110bc     00 2C 06 36 |  if_ae	mov	local04, #0
110c0     CC 82 B1 FD | 	call	#__system___float_fromuns
110c4     16 FB 61 F5 | 	xor	result1, local04
110c8     FD 14 02 F6 | 	mov	arg02, result1
110cc     14 13 02 F6 | 	mov	arg01, local02
110d0     C0 86 B1 FD | 	call	#__system___float_mul
110d4     FD 28 02 F6 | 	mov	local02, result1
110d8     08 4E 05 F1 | 	add	fp, #8
110dc     A7 12 02 FB | 	rdlong	arg01, fp
110e0     08 4E 85 F1 | 	sub	fp, #8
110e4     01 12 06 F1 | 	add	arg01, #1
110e8     09 13 52 F6 | 	abs	arg01, arg01 wc
110ec     1F 2C C6 C9 |  if_b	decod	local04, #31
110f0     00 2C 06 36 |  if_ae	mov	local04, #0
110f4     98 82 B1 FD | 	call	#__system___float_fromuns
110f8     16 FB 61 F5 | 	xor	result1, local04
110fc     FD 14 02 F6 | 	mov	arg02, result1
11100     14 13 02 F6 | 	mov	arg01, local02
11104     8C 86 B1 FD | 	call	#__system___float_mul
11108     FD 12 02 F6 | 	mov	arg01, result1
1110c     E4 8F B1 FD | 	call	#__system____builtin_sinf
11110     FD 14 02 F6 | 	mov	arg02, result1
11114     15 13 02 F6 | 	mov	arg01, local03
11118     78 86 B1 FD | 	call	#__system___float_mul
1111c     FD 14 02 F6 | 	mov	arg02, result1
11120     24 4E 05 F1 | 	add	fp, #36
11124     A7 12 02 FB | 	rdlong	arg01, fp
11128     24 4E 85 F1 | 	sub	fp, #36
1112c     94 82 B1 FD | 	call	#__system___float_add
11130     24 4E 05 F1 | 	add	fp, #36
11134     A7 FA 61 FC | 	wrlong	result1, fp
11138     1C 4E 85 F1 | 	sub	fp, #28
1113c     A7 2A 02 FB | 	rdlong	local03, fp
11140     01 2A 06 F1 | 	add	local03, #1
11144     A7 2A 62 FC | 	wrlong	local03, fp
11148     10 2A 56 F2 | 	cmps	local03, #16 wc
1114c     14 FF 9F CD |  if_b	jmp	#LR__1371
11150     08 4E 05 F1 | 	add	fp, #8
11154     A7 2A 02 FB | 	rdlong	local03, fp
11158     0B 2A 66 F0 | 	shl	local03, #11
1115c     0C 4E 85 F1 | 	sub	fp, #12
11160     A7 28 02 FB | 	rdlong	local02, fp
11164     01 28 66 F0 | 	shl	local02, #1
11168     14 2B 02 F1 | 	add	local03, local02
1116c     20 4E 05 F1 | 	add	fp, #32
11170     A7 12 02 FB | 	rdlong	arg01, fp
11174     24 4E 85 F1 | 	sub	fp, #36
11178     01 14 06 F6 | 	mov	arg02, #1
1117c     DC 8A B1 FD | 	call	#__system___float_tointeger
11180     FD 14 02 F6 | 	mov	arg02, result1
11184     15 13 02 F6 | 	mov	arg01, local03
11188     84 1F B1 FD | 	call	#_psdpoke
1118c     04 4E 05 F1 | 	add	fp, #4
11190     A7 2A 02 FB | 	rdlong	local03, fp
11194     01 2A 06 F1 | 	add	local03, #1
11198     A7 2A 62 FC | 	wrlong	local03, fp
1119c     04 4E 85 F1 | 	sub	fp, #4
111a0     02 00 00 FF 
111a4     00 2A 56 F2 | 	cmps	local03, ##1024 wc
111a8     A8 FE 9F CD |  if_b	jmp	#LR__1370
111ac                 | LR__1372
111ac                 | LR__1373
111ac     A7 F0 03 F6 | 	mov	ptra, fp
111b0     B2 00 A0 FD | 	call	#popregs_
111b4                 | _do_defsnd_ret
111b4     2D 00 64 FD | 	ret
111b8                 | 
111b8                 | ' 
111b8                 | ' '-------------------- defsprite
111b8                 | ' 
111b8                 | ' sub do_defsprite
111b8                 | _do_defsprite
111b8     07 4A 05 F6 | 	mov	COUNT_, #7
111bc     A8 00 A0 FD | 	call	#pushregs_
111c0     60 F0 07 F1 | 	add	ptra, #96
111c4     C0 C3 BF FD | 	call	#_pop
111c8     FD 16 02 F6 | 	mov	arg03, result1
111cc     FE 14 02 F6 | 	mov	arg02, result2
111d0     FF 12 02 F6 | 	mov	arg01, result3
111d4     30 4E 05 F1 | 	add	fp, #48
111d8     A7 16 62 FC | 	wrlong	arg03, fp
111dc     04 4E 05 F1 | 	add	fp, #4
111e0     A7 14 62 FC | 	wrlong	arg02, fp
111e4     04 4E 05 F1 | 	add	fp, #4
111e8     A7 12 62 FC | 	wrlong	arg01, fp
111ec     38 4E 85 F1 | 	sub	fp, #56
111f0     94 C3 BF FD | 	call	#_pop
111f4     FD 16 02 F6 | 	mov	arg03, result1
111f8     FE 14 02 F6 | 	mov	arg02, result2
111fc     FF 12 02 F6 | 	mov	arg01, result3
11200     24 4E 05 F1 | 	add	fp, #36
11204     A7 16 62 FC | 	wrlong	arg03, fp
11208     04 4E 05 F1 | 	add	fp, #4
1120c     A7 14 62 FC | 	wrlong	arg02, fp
11210     04 4E 05 F1 | 	add	fp, #4
11214     A7 12 62 FC | 	wrlong	arg01, fp
11218     2C 4E 85 F1 | 	sub	fp, #44
1121c     68 C3 BF FD | 	call	#_pop
11220     FD 16 02 F6 | 	mov	arg03, result1
11224     FE 14 02 F6 | 	mov	arg02, result2
11228     FF 12 02 F6 | 	mov	arg01, result3
1122c     18 4E 05 F1 | 	add	fp, #24
11230     A7 16 62 FC | 	wrlong	arg03, fp
11234     04 4E 05 F1 | 	add	fp, #4
11238     A7 14 62 FC | 	wrlong	arg02, fp
1123c     04 4E 05 F1 | 	add	fp, #4
11240     A7 12 62 FC | 	wrlong	arg01, fp
11244     20 4E 85 F1 | 	sub	fp, #32
11248     3C C3 BF FD | 	call	#_pop
1124c     FD 16 02 F6 | 	mov	arg03, result1
11250     FE 14 02 F6 | 	mov	arg02, result2
11254     FF 12 02 F6 | 	mov	arg01, result3
11258     0C 4E 05 F1 | 	add	fp, #12
1125c     A7 16 62 FC | 	wrlong	arg03, fp
11260     04 4E 05 F1 | 	add	fp, #4
11264     A7 14 62 FC | 	wrlong	arg02, fp
11268     04 4E 05 F1 | 	add	fp, #4
1126c     A7 12 62 FC | 	wrlong	arg01, fp
11270     14 4E 85 F1 | 	sub	fp, #20
11274     10 C3 BF FD | 	call	#_pop
11278     FF 16 02 F6 | 	mov	arg03, result3
1127c     A7 FA 61 FC | 	wrlong	result1, fp
11280     04 4E 05 F1 | 	add	fp, #4
11284     A7 FC 61 FC | 	wrlong	result2, fp
11288     04 4E 05 F1 | 	add	fp, #4
1128c     A7 16 62 FC | 	wrlong	arg03, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     A7 12 02 F6 | 	mov	arg01, fp
11298     D0 C4 BF FD | 	call	#_converttoint
1129c     3C 4E 05 F1 | 	add	fp, #60
112a0     A7 FA 61 FC | 	wrlong	result1, fp
112a4     30 4E 85 F1 | 	sub	fp, #48
112a8     A7 12 02 F6 | 	mov	arg01, fp
112ac     0C 4E 85 F1 | 	sub	fp, #12
112b0     B8 C4 BF FD | 	call	#_converttoint
112b4     40 4E 05 F1 | 	add	fp, #64
112b8     A7 FA 61 FC | 	wrlong	result1, fp
112bc     28 4E 85 F1 | 	sub	fp, #40
112c0     A7 12 02 F6 | 	mov	arg01, fp
112c4     18 4E 85 F1 | 	sub	fp, #24
112c8     A0 C4 BF FD | 	call	#_converttoint
112cc     44 4E 05 F1 | 	add	fp, #68
112d0     A7 FA 61 FC | 	wrlong	result1, fp
112d4     20 4E 85 F1 | 	sub	fp, #32
112d8     A7 12 02 F6 | 	mov	arg01, fp
112dc     24 4E 85 F1 | 	sub	fp, #36
112e0     88 C4 BF FD | 	call	#_converttoint
112e4     48 4E 05 F1 | 	add	fp, #72
112e8     A7 FA 61 FC | 	wrlong	result1, fp
112ec     18 4E 85 F1 | 	sub	fp, #24
112f0     A7 12 02 F6 | 	mov	arg01, fp
112f4     30 4E 85 F1 | 	sub	fp, #48
112f8     70 C4 BF FD | 	call	#_converttoint
112fc     4C 4E 05 F1 | 	add	fp, #76
11300     A7 FA 61 FC | 	wrlong	result1, fp
11304                 | ' 
11304                 | ' t5=pop()
11304                 | ' t4=pop()
11304                 | ' t3=pop()
11304                 | ' t2=pop()
11304                 | ' t1=pop()
11304                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
11304                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
11304     10 4E 85 F1 | 	sub	fp, #16
11308     A7 16 02 FB | 	rdlong	arg03, fp
1130c     3C 4E 85 F1 | 	sub	fp, #60
11310     02 16 66 F0 | 	shl	arg03, #2
11314     52 00 00 FF 
11318     54 E4 05 F1 | 	add	objptr, ##42068
1131c     F2 16 02 F1 | 	add	arg03, objptr
11320     0B 17 0A FB | 	rdlong	arg03, arg03 wz
11324     52 00 00 FF 
11328     54 E4 85 F1 | 	sub	objptr, ##42068
1132c     2C 00 90 AD |  if_e	jmp	#LR__1380
11330     3C 4E 05 F1 | 	add	fp, #60
11334     A7 16 02 FB | 	rdlong	arg03, fp
11338     3C 4E 85 F1 | 	sub	fp, #60
1133c     02 16 66 F0 | 	shl	arg03, #2
11340     52 00 00 FF 
11344     54 E4 05 F1 | 	add	objptr, ##42068
11348     F2 16 02 F1 | 	add	arg03, objptr
1134c     0B 13 02 FB | 	rdlong	arg01, arg03
11350     52 00 00 FF 
11354     54 E4 85 F1 | 	sub	objptr, ##42068
11358     9C 98 B1 FD | 	call	#__system___gc_free
1135c                 | LR__1380
1135c     3C 4E 05 F1 | 	add	fp, #60
11360     A7 26 02 FB | 	rdlong	local01, fp
11364     0C 4E 05 F1 | 	add	fp, #12
11368     A7 16 02 FB | 	rdlong	arg03, fp
1136c     04 4E 05 F1 | 	add	fp, #4
11370     A7 14 02 FB | 	rdlong	arg02, fp
11374     0A 17 02 FD | 	qmul	arg03, arg02
11378     02 26 66 F0 | 	shl	local01, #2
1137c     52 00 00 FF 
11380     54 E4 05 F1 | 	add	objptr, ##42068
11384     F2 26 02 F1 | 	add	local01, objptr
11388     4C 4E 85 F1 | 	sub	fp, #76
1138c     52 00 00 FF 
11390     54 E4 85 F1 | 	sub	objptr, ##42068
11394     18 12 62 FD | 	getqx	arg01
11398     20 97 B1 FD | 	call	#__system___gc_alloc_managed
1139c     13 FB 61 FC | 	wrlong	result1, local01
113a0                 | ' for y=a3 to a3+a5-1
113a0     44 4E 05 F1 | 	add	fp, #68
113a4     A7 28 02 FB | 	rdlong	local02, fp
113a8     0C 4E 05 F1 | 	add	fp, #12
113ac     A7 28 62 FC | 	wrlong	local02, fp
113b0     0C 4E 85 F1 | 	sub	fp, #12
113b4     A7 2A 02 FB | 	rdlong	local03, fp
113b8     08 4E 05 F1 | 	add	fp, #8
113bc     A7 2C 02 FB | 	rdlong	local04, fp
113c0     4C 4E 85 F1 | 	sub	fp, #76
113c4     16 2B 02 F1 | 	add	local03, local04
113c8                 | LR__1381
113c8     50 4E 05 F1 | 	add	fp, #80
113cc     A7 28 02 FB | 	rdlong	local02, fp
113d0     50 4E 85 F1 | 	sub	fp, #80
113d4     15 29 52 F2 | 	cmps	local02, local03 wc
113d8     F4 00 90 3D |  if_ae	jmp	#LR__1384
113dc                 | '   for x=a2 to a4+a2-1
113dc     40 4E 05 F1 | 	add	fp, #64
113e0     A7 26 02 FB | 	rdlong	local01, fp
113e4     14 4E 05 F1 | 	add	fp, #20
113e8     A7 26 62 FC | 	wrlong	local01, fp
113ec     0C 4E 85 F1 | 	sub	fp, #12
113f0     A7 2E 02 FB | 	rdlong	local05, fp
113f4     08 4E 85 F1 | 	sub	fp, #8
113f8     A7 30 02 FB | 	rdlong	local06, fp
113fc     40 4E 85 F1 | 	sub	fp, #64
11400     18 2F 02 F1 | 	add	local05, local06
11404                 | LR__1382
11404     54 4E 05 F1 | 	add	fp, #84
11408     A7 26 02 FB | 	rdlong	local01, fp
1140c     54 4E 85 F1 | 	sub	fp, #84
11410     17 27 52 F2 | 	cmps	local01, local05 wc
11414     A0 00 90 3D |  if_ae	jmp	#LR__1383
11418     3C 4E 05 F1 | 	add	fp, #60
1141c     A7 30 02 FB | 	rdlong	local06, fp
11420     18 4E 05 F1 | 	add	fp, #24
11424     A7 2C 02 FB | 	rdlong	local04, fp
11428     14 4E 85 F1 | 	sub	fp, #20
1142c     A7 28 02 FB | 	rdlong	local02, fp
11430     10 4E 05 F1 | 	add	fp, #16
11434     A7 26 02 FB | 	rdlong	local01, fp
11438     13 17 02 F6 | 	mov	arg03, local01
1143c     0C 4E 85 F1 | 	sub	fp, #12
11440     A7 14 02 FB | 	rdlong	arg02, fp
11444     0A 17 82 F1 | 	sub	arg03, arg02
11448     04 4E 05 F1 | 	add	fp, #4
1144c     A7 14 02 FB | 	rdlong	arg02, fp
11450     0A 17 02 FD | 	qmul	arg03, arg02
11454     02 30 66 F0 | 	shl	local06, #2
11458     52 00 00 FF 
1145c     54 E4 05 F1 | 	add	objptr, ##42068
11460     F2 30 02 F1 | 	add	local06, objptr
11464     18 31 02 FB | 	rdlong	local06, local06
11468     16 33 02 F6 | 	mov	local07, local04
1146c     14 33 82 F1 | 	sub	local07, local02
11470     52 00 00 FF 
11474     54 E4 85 F1 | 	sub	objptr, ##42068
11478     F2 12 02 FB | 	rdlong	arg01, objptr
1147c     16 13 02 F1 | 	add	arg01, local04
11480     48 4E 85 F1 | 	sub	fp, #72
11484     0A 26 66 F0 | 	shl	local01, #10
11488     13 13 02 F1 | 	add	arg01, local01
1148c     18 2C 62 FD | 	getqx	local04
11490     16 33 02 F1 | 	add	local07, local04
11494     18 33 02 F1 | 	add	local07, local06
11498     04 1D B1 FD | 	call	#_pspeek
1149c     19 FB 41 FC | 	wrbyte	result1, local07
114a0     54 4E 05 F1 | 	add	fp, #84
114a4     A7 32 02 FB | 	rdlong	local07, fp
114a8     01 32 06 F1 | 	add	local07, #1
114ac     A7 32 62 FC | 	wrlong	local07, fp
114b0     54 4E 85 F1 | 	sub	fp, #84
114b4     4C FF 9F FD | 	jmp	#LR__1382
114b8                 | LR__1383
114b8     50 4E 05 F1 | 	add	fp, #80
114bc     A7 32 02 FB | 	rdlong	local07, fp
114c0     01 32 06 F1 | 	add	local07, #1
114c4     A7 32 62 FC | 	wrlong	local07, fp
114c8     50 4E 85 F1 | 	sub	fp, #80
114cc     F8 FE 9F FD | 	jmp	#LR__1381
114d0                 | LR__1384
114d0     3C 4E 05 F1 | 	add	fp, #60
114d4     A7 32 02 FB | 	rdlong	local07, fp
114d8     19 13 02 F6 | 	mov	arg01, local07
114dc     3C 4E 85 F1 | 	sub	fp, #60
114e0     02 32 66 F0 | 	shl	local07, #2
114e4     52 00 00 FF 
114e8     54 E4 05 F1 | 	add	objptr, ##42068
114ec     F2 32 02 F1 | 	add	local07, objptr
114f0     19 15 02 FB | 	rdlong	arg02, local07
114f4     52 00 00 FF 
114f8     54 E4 85 F1 | 	sub	objptr, ##42068
114fc     E4 29 B1 FD | 	call	#_hg010b_spin2_setspriteptr
11500     3C 4E 05 F1 | 	add	fp, #60
11504     A7 12 02 FB | 	rdlong	arg01, fp
11508     0C 4E 05 F1 | 	add	fp, #12
1150c     A7 14 02 FB | 	rdlong	arg02, fp
11510     04 4E 05 F1 | 	add	fp, #4
11514     A7 16 02 FB | 	rdlong	arg03, fp
11518     4C 4E 85 F1 | 	sub	fp, #76
1151c     54 2A B1 FD | 	call	#_hg010b_spin2_setspritesize
11520     A7 F0 03 F6 | 	mov	ptra, fp
11524     B2 00 A0 FD | 	call	#popregs_
11528                 | _do_defsprite_ret
11528     2D 00 64 FD | 	ret
1152c                 | 
1152c                 | ' 
1152c                 | ' '-------------------- deg
1152c                 | ' 
1152c                 | ' sub do_deg
1152c                 | _do_deg
1152c     52 00 00 FF 
11530     A8 E4 05 F1 | 	add	objptr, ##42152
11534     7D 47 9E FF 
11538     F2 6A 68 FC | 	wrlong	##1016003125, objptr
1153c     04 E4 05 F1 | 	add	objptr, #4
11540     97 32 A1 FF 
11544     F2 C2 69 FC | 	wrlong	##1113927393, objptr
11548     52 00 00 FF 
1154c     AC E4 85 F1 | 	sub	objptr, ##42156
11550                 | _do_deg_ret
11550     2D 00 64 FD | 	ret
11554                 | 
11554                 | ' 
11554                 | ' '-------------------- delete
11554                 | ' 
11554                 | ' sub do_delete
11554                 | _do_delete
11554     05 4A 05 F6 | 	mov	COUNT_, #5
11558     A8 00 A0 FD | 	call	#pushregs_
1155c     28 C0 BF FD | 	call	#_pop
11560     FE 18 02 F6 | 	mov	arg04, result2
11564     FF 16 02 F6 | 	mov	arg03, result3
11568     FD 26 02 F6 | 	mov	local01, result1
1156c     0C 29 02 F6 | 	mov	local02, arg04
11570     0B 2B 02 F6 | 	mov	local03, arg03
11574                 | ' 
11574                 | ' t1=pop()
11574                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11574     2B 2A 0E F2 | 	cmp	local03, #43 wz
11578     10 00 90 5D |  if_ne	jmp	#LR__1390
1157c     13 13 02 F6 | 	mov	arg01, local01
11580     7C C1 BF FD | 	call	#_convertstring
11584     FD 26 02 F6 | 	mov	local01, result1
11588     1F 2A 06 F6 | 	mov	local03, #31
1158c                 | LR__1390
1158c                 | ' if t1.result_type<>result_string then printerror(15): return
1158c     1F 2A 0E F2 | 	cmp	local03, #31 wz
11590     10 00 90 AD |  if_e	jmp	#LR__1391
11594     0F 12 06 F6 | 	mov	arg01, #15
11598     00 14 06 F6 | 	mov	arg02, #0
1159c     88 19 B1 FD | 	call	#_printerror
115a0     E4 00 90 FD | 	jmp	#LR__1395
115a4                 | LR__1391
115a4                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
115a4     4A 00 00 FF 
115a8     94 E4 05 F1 | 	add	objptr, ##38036
115ac     F2 12 02 FB | 	rdlong	arg01, objptr
115b0     4A 00 00 FF 
115b4     94 E4 85 F1 | 	sub	objptr, ##38036
115b8     B6 01 00 FF 
115bc     31 15 06 F6 | 	mov	arg02, ##@LR__5884
115c0     7C 53 B1 FD | 	call	#__system___string_cmp
115c4     00 FA 0D F2 | 	cmp	result1, #0 wz
115c8     34 00 90 AD |  if_e	jmp	#LR__1392
115cc     4A 00 00 FF 
115d0     94 E4 05 F1 | 	add	objptr, ##38036
115d4     F2 12 02 FB | 	rdlong	arg01, objptr
115d8     4A 00 00 FF 
115dc     94 E4 85 F1 | 	sub	objptr, ##38036
115e0     B6 01 00 FF 
115e4     33 15 06 F6 | 	mov	arg02, ##@LR__5885
115e8     88 53 B1 FD | 	call	#__system___string_concat
115ec     FD 12 02 F6 | 	mov	arg01, result1
115f0     13 15 02 F6 | 	mov	arg02, local01
115f4     7C 53 B1 FD | 	call	#__system___string_concat
115f8     FD 2C 02 F6 | 	mov	local04, result1
115fc     14 00 90 FD | 	jmp	#LR__1393
11600                 | LR__1392
11600     B6 01 00 FF 
11604     35 13 06 F6 | 	mov	arg01, ##@LR__5886
11608     13 15 02 F6 | 	mov	arg02, local01
1160c     64 53 B1 FD | 	call	#__system___string_concat
11610     FD 2C 02 F6 | 	mov	local04, result1
11614                 | LR__1393
11614     16 13 02 F6 | 	mov	arg01, local04
11618     CC 7A B1 FD | 	call	#__system___remove
1161c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
11620     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
11624     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
11628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1162c     FD 2E 0A F6 | 	mov	local05, result1 wz
11630                 | ' kill filename$
11630                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
11630     54 00 90 AD |  if_e	jmp	#LR__1394
11634     00 12 06 F6 | 	mov	arg01, #0
11638     80 AF B1 FD | 	call	#__system___getiolock_0603
1163c     FD 12 02 F6 | 	mov	arg01, result1
11640     D4 52 B1 FD | 	call	#__system___lockmem
11644     B6 01 00 FF 
11648     37 15 06 F6 | 	mov	arg02, ##@LR__5887
1164c     00 12 06 F6 | 	mov	arg01, #0
11650     00 16 06 F6 | 	mov	arg03, #0
11654     B8 5F B1 FD | 	call	#__system___basic_print_string
11658     00 12 06 F6 | 	mov	arg01, #0
1165c     17 15 02 F6 | 	mov	arg02, local05
11660     00 16 06 F6 | 	mov	arg03, #0
11664     0A 18 06 F6 | 	mov	arg04, #10
11668     E8 5F B1 FD | 	call	#__system___basic_print_integer
1166c     00 12 06 F6 | 	mov	arg01, #0
11670     0A 14 06 F6 | 	mov	arg02, #10
11674     00 16 06 F6 | 	mov	arg03, #0
11678     3C 5F B1 FD | 	call	#__system___basic_print_char
1167c     00 12 06 F6 | 	mov	arg01, #0
11680     38 AF B1 FD | 	call	#__system___getiolock_0603
11684     FD 00 68 FC | 	wrlong	#0, result1
11688                 | LR__1394
11688                 | LR__1395
11688     A7 F0 03 F6 | 	mov	ptra, fp
1168c     B2 00 A0 FD | 	call	#popregs_
11690                 | _do_delete_ret
11690     2D 00 64 FD | 	ret
11694                 | 
11694                 | ' 
11694                 | ' '-------------------- dir
11694                 | ' 
11694                 | ' sub do_dir
11694                 | _do_dir
11694     13 4A 05 F6 | 	mov	COUNT_, #19
11698     A8 00 A0 FD | 	call	#pushregs_
1169c     01 00 00 FF 
116a0     38 F0 07 F1 | 	add	ptra, ##568
116a4                 | ' 
116a4                 | ' print "Current directory: "; currentdir$ 
116a4     00 12 06 F6 | 	mov	arg01, #0
116a8     10 AF B1 FD | 	call	#__system___getiolock_0603
116ac     FD 12 02 F6 | 	mov	arg01, result1
116b0     64 52 B1 FD | 	call	#__system___lockmem
116b4     B6 01 00 FF 
116b8     6F 15 06 F6 | 	mov	arg02, ##@LR__5888
116bc     00 12 06 F6 | 	mov	arg01, #0
116c0     00 16 06 F6 | 	mov	arg03, #0
116c4     48 5F B1 FD | 	call	#__system___basic_print_string
116c8     4A 00 00 FF 
116cc     94 E4 05 F1 | 	add	objptr, ##38036
116d0     F2 14 02 FB | 	rdlong	arg02, objptr
116d4     4A 00 00 FF 
116d8     94 E4 85 F1 | 	sub	objptr, ##38036
116dc     00 12 06 F6 | 	mov	arg01, #0
116e0     00 16 06 F6 | 	mov	arg03, #0
116e4     28 5F B1 FD | 	call	#__system___basic_print_string
116e8     00 12 06 F6 | 	mov	arg01, #0
116ec     0A 14 06 F6 | 	mov	arg02, #10
116f0     00 16 06 F6 | 	mov	arg03, #0
116f4     C0 5E B1 FD | 	call	#__system___basic_print_char
116f8     01 26 06 F6 | 	mov	local01, #1
116fc     00 12 06 F6 | 	mov	arg01, #0
11700     B8 AE B1 FD | 	call	#__system___getiolock_0603
11704     FD 00 68 FC | 	wrlong	#0, result1
11708     00 28 06 F6 | 	mov	local02, #0
1170c     00 2A 06 F6 | 	mov	local03, #0
11710                 | ' px=0
11710                 | ' for i=0 to 127: filelist(i)="" : next i
11710     00 2C 06 F6 | 	mov	local04, #0
11714     1C 4E 05 F1 | 	add	fp, #28
11718     97 12 48 FB | 	callpa	#(@LR__1401-@LR__1400)>>2,fcache_load_ptr_
1171c                 | LR__1400
1171c     16 2F 02 F6 | 	mov	local05, local04
11720     02 2E 66 F0 | 	shl	local05, #2
11724     A7 2E 02 F1 | 	add	local05, fp
11728     B6 01 00 FF 
1172c     83 31 06 F6 | 	mov	local06, ##@LR__5889
11730     17 31 62 FC | 	wrlong	local06, local05
11734     01 2C 06 F1 | 	add	local04, #1
11738     80 2C 56 F2 | 	cmps	local04, #128 wc
1173c     DC FF 9F CD |  if_b	jmp	#LR__1400
11740                 | LR__1401
11740     1C 4E 85 F1 | 	sub	fp, #28
11744     B6 01 00 FF 
11748     84 13 06 F6 | 	mov	arg01, ##@LR__5890
1174c     10 14 06 F6 | 	mov	arg02, #16
11750     28 B0 B1 FD | 	call	#__system___basic_dir
11754     FD 32 02 F6 | 	mov	local07, result1
11758     00 34 06 F6 | 	mov	local08, #0
1175c                 | ' filename=dir$("*", fbDirectory)
1175c                 | ' n=0
1175c                 | ' while filename <> "" andalso filename <> nil andalso n<128
1175c                 | LR__1402
1175c     B6 01 00 FF 
11760     86 37 06 F6 | 	mov	local09, ##@LR__5891
11764     19 13 02 F6 | 	mov	arg01, local07
11768     1B 15 02 F6 | 	mov	arg02, local09
1176c     D0 51 B1 FD | 	call	#__system___string_cmp
11770     00 FA 0D F2 | 	cmp	result1, #0 wz
11774     68 00 90 AD |  if_e	jmp	#LR__1403
11778     00 36 06 F6 | 	mov	local09, #0
1177c     19 13 02 F6 | 	mov	arg01, local07
11780     00 14 06 F6 | 	mov	arg02, #0
11784     B8 51 B1 FD | 	call	#__system___string_cmp
11788     00 FA 0D F2 | 	cmp	result1, #0 wz
1178c     50 00 90 AD |  if_e	jmp	#LR__1403
11790     80 34 56 F2 | 	cmps	local08, #128 wc
11794     48 00 90 3D |  if_ae	jmp	#LR__1403
11798     B6 01 00 FF 
1179c     87 13 06 F6 | 	mov	arg01, ##@LR__5892
117a0     19 15 02 F6 | 	mov	arg02, local07
117a4     CC 51 B1 FD | 	call	#__system___string_concat
117a8     FD 32 02 F6 | 	mov	local07, result1
117ac     1A 2F 02 F6 | 	mov	local05, local08
117b0     02 2E 66 F0 | 	shl	local05, #2
117b4     1C 4E 05 F1 | 	add	fp, #28
117b8     A7 2E 02 F1 | 	add	local05, fp
117bc     17 33 62 FC | 	wrlong	local07, local05
117c0     01 34 06 F1 | 	add	local08, #1
117c4     00 2E 06 F6 | 	mov	local05, #0
117c8     00 12 06 F6 | 	mov	arg01, #0
117cc     00 14 06 F6 | 	mov	arg02, #0
117d0     1C 4E 85 F1 | 	sub	fp, #28
117d4     A4 AF B1 FD | 	call	#__system___basic_dir
117d8     FD 32 02 F6 | 	mov	local07, result1
117dc     7C FF 9F FD | 	jmp	#LR__1402
117e0                 | LR__1403
117e0                 | ' for i=0 to n-1			' now sort this
117e0     00 2C 06 F6 | 	mov	local04, #0
117e4     1A 39 02 F6 | 	mov	local10, local08
117e8                 | LR__1404
117e8     1C 2D 52 F2 | 	cmps	local04, local10 wc
117ec     DC 00 90 3D |  if_ae	jmp	#LR__1408
117f0     00 3A 06 F6 | 	mov	local11, #0
117f4                 | '   swapped=false
117f4                 | '   for j=0 to n-i-2
117f4     00 3C 06 F6 | 	mov	local12, #0
117f8     1A 3F 02 F6 | 	mov	local13, local08
117fc     16 3F 82 F1 | 	sub	local13, local04
11800     01 3E 86 F1 | 	sub	local13, #1
11804                 | LR__1405
11804     1F 3D 52 F2 | 	cmps	local12, local13 wc
11808     B0 00 90 3D |  if_ae	jmp	#LR__1407
1180c                 | '     if filelist(j) > filelist(j+1) then
1180c     1E 37 02 F6 | 	mov	local09, local12
11810     02 36 66 F0 | 	shl	local09, #2
11814     1C 4E 05 F1 | 	add	fp, #28
11818     A7 36 02 F1 | 	add	local09, fp
1181c     1B 13 02 FB | 	rdlong	arg01, local09
11820     1E 37 02 F6 | 	mov	local09, local12
11824     01 36 06 F1 | 	add	local09, #1
11828     1B 31 02 F6 | 	mov	local06, local09
1182c     02 30 66 F0 | 	shl	local06, #2
11830     A7 26 02 F6 | 	mov	local01, fp
11834     A7 30 02 F1 | 	add	local06, fp
11838     18 2F 02 FB | 	rdlong	local05, local06
1183c     17 15 02 F6 | 	mov	arg02, local05
11840     1C 4E 85 F1 | 	sub	fp, #28
11844     F8 50 B1 FD | 	call	#__system___string_cmp
11848     01 FA 55 F2 | 	cmps	result1, #1 wc
1184c     64 00 90 CD |  if_b	jmp	#LR__1406
11850     1E 37 02 F6 | 	mov	local09, local12
11854     01 36 06 F1 | 	add	local09, #1
11858     02 36 66 F0 | 	shl	local09, #2
1185c     1C 4E 05 F1 | 	add	fp, #28
11860     A7 36 02 F1 | 	add	local09, fp
11864     1B 3B 02 FB | 	rdlong	local11, local09
11868     1E 31 02 F6 | 	mov	local06, local12
1186c     02 30 66 F0 | 	shl	local06, #2
11870     A7 30 02 F1 | 	add	local06, fp
11874     18 2F 02 FB | 	rdlong	local05, local06
11878     1E 37 02 F6 | 	mov	local09, local12
1187c     1B 31 02 F6 | 	mov	local06, local09
11880     02 30 66 F0 | 	shl	local06, #2
11884     A7 26 02 F6 | 	mov	local01, fp
11888     A7 30 02 F1 | 	add	local06, fp
1188c     18 3B 62 FC | 	wrlong	local11, local06
11890     1E 29 02 F6 | 	mov	local02, local12
11894     01 28 06 F1 | 	add	local02, #1
11898     14 41 02 F6 | 	mov	local14, local02
1189c     02 40 66 F0 | 	shl	local14, #2
118a0     A7 42 02 F6 | 	mov	local15, fp
118a4     A7 40 02 F1 | 	add	local14, fp
118a8     20 2F 62 FC | 	wrlong	local05, local14
118ac     01 3A 66 F6 | 	neg	local11, #1
118b0     1C 4E 85 F1 | 	sub	fp, #28
118b4                 | LR__1406
118b4     01 3C 06 F1 | 	add	local12, #1
118b8     48 FF 9F FD | 	jmp	#LR__1405
118bc                 | LR__1407
118bc                 | ' if not swapped then exit for
118bc     1D 45 22 F6 | 	not	local16, local11
118c0     00 44 0E F2 | 	cmp	local16, #0 wz
118c4     01 2C 06 A1 |  if_e	add	local04, #1
118c8     1C FF 9F AD |  if_e	jmp	#LR__1404
118cc                 | LR__1408
118cc                 | ' for i=0 to n-1
118cc     00 2C 06 F6 | 	mov	local04, #0
118d0     1A 47 02 F6 | 	mov	local17, local08
118d4                 | LR__1409
118d4     23 2D 52 F2 | 	cmps	local04, local17 wc
118d8     94 00 90 3D |  if_ae	jmp	#LR__1411
118dc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
118dc     00 12 06 F6 | 	mov	arg01, #0
118e0     D8 AC B1 FD | 	call	#__system___getiolock_0603
118e4     FD 12 02 F6 | 	mov	arg01, result1
118e8     2C 50 B1 FD | 	call	#__system___lockmem
118ec     16 29 02 F6 | 	mov	local02, local04
118f0     02 28 66 F0 | 	shl	local02, #2
118f4     1C 4E 05 F1 | 	add	fp, #28
118f8     A7 40 02 F6 | 	mov	local14, fp
118fc     A7 28 02 F1 | 	add	local02, fp
11900     14 15 02 FB | 	rdlong	arg02, local02
11904     00 26 06 F6 | 	mov	local01, #0
11908     00 12 06 F6 | 	mov	arg01, #0
1190c     00 16 06 F6 | 	mov	arg03, #0
11910     1C 4E 85 F1 | 	sub	fp, #28
11914     F8 5C B1 FD | 	call	#__system___basic_print_string
11918     00 12 06 F6 | 	mov	arg01, #0
1191c     9C AC B1 FD | 	call	#__system___getiolock_0603
11920     FD 00 68 FC | 	wrlong	#0, result1
11924     40 2A 06 F1 | 	add	local03, #64
11928     15 13 02 F6 | 	mov	arg01, local03
1192c     90 32 B1 FD | 	call	#_hg010b_spin2_setcursorx
11930     00 2B 56 F2 | 	cmps	local03, #256 wc
11934     30 00 90 CD |  if_b	jmp	#LR__1410
11938     00 2A 06 F6 | 	mov	local03, #0
1193c     00 12 06 F6 | 	mov	arg01, #0
11940     78 AC B1 FD | 	call	#__system___getiolock_0603
11944     FD 12 02 F6 | 	mov	arg01, result1
11948     CC 4F B1 FD | 	call	#__system___lockmem
1194c     00 12 06 F6 | 	mov	arg01, #0
11950     0A 14 06 F6 | 	mov	arg02, #10
11954     00 16 06 F6 | 	mov	arg03, #0
11958     5C 5C B1 FD | 	call	#__system___basic_print_char
1195c     00 12 06 F6 | 	mov	arg01, #0
11960     58 AC B1 FD | 	call	#__system___getiolock_0603
11964     FD 00 68 FC | 	wrlong	#0, result1
11968                 | LR__1410
11968     01 2C 06 F1 | 	add	local04, #1
1196c     64 FF 9F FD | 	jmp	#LR__1409
11970                 | LR__1411
11970                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11970     80 34 56 F2 | 	cmps	local08, #128 wc
11974     44 00 90 CD |  if_b	jmp	#LR__1412
11978     00 12 06 F6 | 	mov	arg01, #0
1197c     3C AC B1 FD | 	call	#__system___getiolock_0603
11980     FD 12 02 F6 | 	mov	arg01, result1
11984     90 4F B1 FD | 	call	#__system___lockmem
11988     B6 01 00 FF 
1198c     8E 15 06 F6 | 	mov	arg02, ##@LR__5893
11990     00 12 06 F6 | 	mov	arg01, #0
11994     00 16 06 F6 | 	mov	arg03, #0
11998     74 5C B1 FD | 	call	#__system___basic_print_string
1199c     00 12 06 F6 | 	mov	arg01, #0
119a0     0A 14 06 F6 | 	mov	arg02, #10
119a4     00 16 06 F6 | 	mov	arg03, #0
119a8     0C 5C B1 FD | 	call	#__system___basic_print_char
119ac     00 12 06 F6 | 	mov	arg01, #0
119b0     08 AC B1 FD | 	call	#__system___getiolock_0603
119b4     FD 00 68 FC | 	wrlong	#0, result1
119b8     00 26 06 F6 | 	mov	local01, #0
119bc                 | LR__1412
119bc                 | ' print
119bc     00 12 06 F6 | 	mov	arg01, #0
119c0     F8 AB B1 FD | 	call	#__system___getiolock_0603
119c4     FD 12 02 F6 | 	mov	arg01, result1
119c8     4C 4F B1 FD | 	call	#__system___lockmem
119cc     00 12 06 F6 | 	mov	arg01, #0
119d0     0A 14 06 F6 | 	mov	arg02, #10
119d4     00 16 06 F6 | 	mov	arg03, #0
119d8     DC 5B B1 FD | 	call	#__system___basic_print_char
119dc     00 12 06 F6 | 	mov	arg01, #0
119e0     D8 AB B1 FD | 	call	#__system___getiolock_0603
119e4     FD 00 68 FC | 	wrlong	#0, result1
119e8     00 30 06 F6 | 	mov	local06, #0
119ec     00 34 06 F6 | 	mov	local08, #0
119f0     00 2A 06 F6 | 	mov	local03, #0
119f4                 | ' return cursor_y
119f4     3E E4 05 F1 | 	add	objptr, #62
119f8     F2 48 C2 FA | 	rdbyte	local18, objptr
119fc     3E E4 85 F1 | 	sub	objptr, #62
11a00     B6 01 00 FF 
11a04     C0 13 06 F6 | 	mov	arg01, ##@LR__5894
11a08     21 14 06 F6 | 	mov	arg02, #33
11a0c     6C AD B1 FD | 	call	#__system___basic_dir
11a10     FD 32 02 F6 | 	mov	local07, result1
11a14                 | ' n=0
11a14                 | ' px=0: py=v.getcursory()
11a14                 | ' filename = dir$("*", fbNormal )   
11a14                 | ' do while filename <> "" andalso filename <> nil andalso n<128
11a14                 | LR__1413
11a14     B6 01 00 FF 
11a18     C2 37 06 F6 | 	mov	local09, ##@LR__5895
11a1c     19 13 02 F6 | 	mov	arg01, local07
11a20     1B 15 02 F6 | 	mov	arg02, local09
11a24     18 4F B1 FD | 	call	#__system___string_cmp
11a28     00 FA 0D F2 | 	cmp	result1, #0 wz
11a2c     54 00 90 AD |  if_e	jmp	#LR__1414
11a30     00 36 06 F6 | 	mov	local09, #0
11a34     19 13 02 F6 | 	mov	arg01, local07
11a38     00 14 06 F6 | 	mov	arg02, #0
11a3c     00 4F B1 FD | 	call	#__system___string_cmp
11a40     00 FA 0D F2 | 	cmp	result1, #0 wz
11a44     3C 00 90 AD |  if_e	jmp	#LR__1414
11a48     80 34 56 F2 | 	cmps	local08, #128 wc
11a4c     34 00 90 3D |  if_ae	jmp	#LR__1414
11a50     1A 2F 02 F6 | 	mov	local05, local08
11a54     02 2E 66 F0 | 	shl	local05, #2
11a58     1C 4E 05 F1 | 	add	fp, #28
11a5c     A7 2E 02 F1 | 	add	local05, fp
11a60     17 33 62 FC | 	wrlong	local07, local05
11a64     01 34 06 F1 | 	add	local08, #1
11a68     00 2E 06 F6 | 	mov	local05, #0
11a6c     00 12 06 F6 | 	mov	arg01, #0
11a70     00 14 06 F6 | 	mov	arg02, #0
11a74     1C 4E 85 F1 | 	sub	fp, #28
11a78     00 AD B1 FD | 	call	#__system___basic_dir
11a7c     FD 32 02 F6 | 	mov	local07, result1
11a80     90 FF 9F FD | 	jmp	#LR__1413
11a84                 | LR__1414
11a84                 | ' for i =0 to n-1
11a84     00 2C 06 F6 | 	mov	local04, #0
11a88                 | LR__1415
11a88     1A 2D 52 F2 | 	cmps	local04, local08 wc
11a8c     D8 00 90 3D |  if_ae	jmp	#LR__1419
11a90     00 3A 06 F6 | 	mov	local11, #0
11a94                 | '   swapped=false
11a94                 | '   for j=0 to n-i-2
11a94     00 3C 06 F6 | 	mov	local12, #0
11a98     1A 4B 02 F6 | 	mov	local19, local08
11a9c     16 4B 82 F1 | 	sub	local19, local04
11aa0     01 4A 86 F1 | 	sub	local19, #1
11aa4                 | LR__1416
11aa4     25 3D 52 F2 | 	cmps	local12, local19 wc
11aa8     AC 00 90 3D |  if_ae	jmp	#LR__1418
11aac                 | '     if filelist(j) > filelist(j+1) then
11aac     1E 37 02 F6 | 	mov	local09, local12
11ab0     02 36 66 F0 | 	shl	local09, #2
11ab4     1C 4E 05 F1 | 	add	fp, #28
11ab8     A7 36 02 F1 | 	add	local09, fp
11abc     1B 13 02 FB | 	rdlong	arg01, local09
11ac0     1E 37 02 F6 | 	mov	local09, local12
11ac4     01 36 06 F1 | 	add	local09, #1
11ac8     1B 31 02 F6 | 	mov	local06, local09
11acc     02 30 66 F0 | 	shl	local06, #2
11ad0     A7 26 02 F6 | 	mov	local01, fp
11ad4     A7 30 02 F1 | 	add	local06, fp
11ad8     18 2F 02 FB | 	rdlong	local05, local06
11adc     17 15 02 F6 | 	mov	arg02, local05
11ae0     1C 4E 85 F1 | 	sub	fp, #28
11ae4     58 4E B1 FD | 	call	#__system___string_cmp
11ae8     01 FA 55 F2 | 	cmps	result1, #1 wc
11aec     60 00 90 CD |  if_b	jmp	#LR__1417
11af0     1E 37 02 F6 | 	mov	local09, local12
11af4     01 36 06 F1 | 	add	local09, #1
11af8     02 36 66 F0 | 	shl	local09, #2
11afc     1C 4E 05 F1 | 	add	fp, #28
11b00     A7 36 02 F1 | 	add	local09, fp
11b04     1B 45 02 FB | 	rdlong	local16, local09
11b08     1E 31 02 F6 | 	mov	local06, local12
11b0c     02 30 66 F0 | 	shl	local06, #2
11b10     A7 30 02 F1 | 	add	local06, fp
11b14     18 2F 02 FB | 	rdlong	local05, local06
11b18     1E 37 02 F6 | 	mov	local09, local12
11b1c     1B 31 02 F6 | 	mov	local06, local09
11b20     02 30 66 F0 | 	shl	local06, #2
11b24     A7 26 02 F6 | 	mov	local01, fp
11b28     A7 30 02 F1 | 	add	local06, fp
11b2c     18 45 62 FC | 	wrlong	local16, local06
11b30     1E 41 02 F6 | 	mov	local14, local12
11b34     01 40 06 F1 | 	add	local14, #1
11b38     02 40 66 F0 | 	shl	local14, #2
11b3c     A7 42 02 F6 | 	mov	local15, fp
11b40     A7 40 02 F1 | 	add	local14, fp
11b44     20 2F 62 FC | 	wrlong	local05, local14
11b48     01 3A 66 F6 | 	neg	local11, #1
11b4c     1C 4E 85 F1 | 	sub	fp, #28
11b50                 | LR__1417
11b50     01 3C 06 F1 | 	add	local12, #1
11b54     4C FF 9F FD | 	jmp	#LR__1416
11b58                 | LR__1418
11b58                 | ' if not swapped then exit for
11b58     1D 45 22 F6 | 	not	local16, local11
11b5c     00 44 0E F2 | 	cmp	local16, #0 wz
11b60     01 2C 06 A1 |  if_e	add	local04, #1
11b64     20 FF 9F AD |  if_e	jmp	#LR__1415
11b68                 | LR__1419
11b68                 | ' for i=0 to n-1
11b68     00 2C 06 F6 | 	mov	local04, #0
11b6c                 | LR__1420
11b6c     1A 2D 52 F2 | 	cmps	local04, local08 wc
11b70     8C 00 90 3D |  if_ae	jmp	#LR__1422
11b74                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
11b74     00 12 06 F6 | 	mov	arg01, #0
11b78     40 AA B1 FD | 	call	#__system___getiolock_0603
11b7c     FD 12 02 F6 | 	mov	arg01, result1
11b80     94 4D B1 FD | 	call	#__system___lockmem
11b84     16 29 02 F6 | 	mov	local02, local04
11b88     02 28 66 F0 | 	shl	local02, #2
11b8c     1C 4E 05 F1 | 	add	fp, #28
11b90     A7 28 02 F1 | 	add	local02, fp
11b94     14 15 02 FB | 	rdlong	arg02, local02
11b98     00 12 06 F6 | 	mov	arg01, #0
11b9c     00 16 06 F6 | 	mov	arg03, #0
11ba0     1C 4E 85 F1 | 	sub	fp, #28
11ba4     68 5A B1 FD | 	call	#__system___basic_print_string
11ba8     00 12 06 F6 | 	mov	arg01, #0
11bac     0C AA B1 FD | 	call	#__system___getiolock_0603
11bb0     FD 00 68 FC | 	wrlong	#0, result1
11bb4     40 2A 06 F1 | 	add	local03, #64
11bb8     15 13 02 F6 | 	mov	arg01, local03
11bbc     00 30 B1 FD | 	call	#_hg010b_spin2_setcursorx
11bc0     00 2B 56 F2 | 	cmps	local03, #256 wc
11bc4     30 00 90 CD |  if_b	jmp	#LR__1421
11bc8     00 2A 06 F6 | 	mov	local03, #0
11bcc     00 12 06 F6 | 	mov	arg01, #0
11bd0     E8 A9 B1 FD | 	call	#__system___getiolock_0603
11bd4     FD 12 02 F6 | 	mov	arg01, result1
11bd8     3C 4D B1 FD | 	call	#__system___lockmem
11bdc     00 12 06 F6 | 	mov	arg01, #0
11be0     0A 14 06 F6 | 	mov	arg02, #10
11be4     00 16 06 F6 | 	mov	arg03, #0
11be8     CC 59 B1 FD | 	call	#__system___basic_print_char
11bec     00 12 06 F6 | 	mov	arg01, #0
11bf0     C8 A9 B1 FD | 	call	#__system___getiolock_0603
11bf4     FD 00 68 FC | 	wrlong	#0, result1
11bf8                 | LR__1421
11bf8     01 2C 06 F1 | 	add	local04, #1
11bfc     6C FF 9F FD | 	jmp	#LR__1420
11c00                 | LR__1422
11c00                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
11c00     80 34 56 F2 | 	cmps	local08, #128 wc
11c04     40 00 90 CD |  if_b	jmp	#LR__1423
11c08     00 12 06 F6 | 	mov	arg01, #0
11c0c     AC A9 B1 FD | 	call	#__system___getiolock_0603
11c10     FD 12 02 F6 | 	mov	arg01, result1
11c14     00 4D B1 FD | 	call	#__system___lockmem
11c18     B6 01 00 FF 
11c1c     C3 15 06 F6 | 	mov	arg02, ##@LR__5896
11c20     00 12 06 F6 | 	mov	arg01, #0
11c24     00 16 06 F6 | 	mov	arg03, #0
11c28     E4 59 B1 FD | 	call	#__system___basic_print_string
11c2c     00 12 06 F6 | 	mov	arg01, #0
11c30     0A 14 06 F6 | 	mov	arg02, #10
11c34     00 16 06 F6 | 	mov	arg03, #0
11c38     7C 59 B1 FD | 	call	#__system___basic_print_char
11c3c     00 12 06 F6 | 	mov	arg01, #0
11c40     78 A9 B1 FD | 	call	#__system___getiolock_0603
11c44     FD 00 68 FC | 	wrlong	#0, result1
11c48                 | LR__1423
11c48                 | ' print
11c48     00 12 06 F6 | 	mov	arg01, #0
11c4c     6C A9 B1 FD | 	call	#__system___getiolock_0603
11c50     FD 12 02 F6 | 	mov	arg01, result1
11c54     C0 4C B1 FD | 	call	#__system___lockmem
11c58     00 12 06 F6 | 	mov	arg01, #0
11c5c     0A 14 06 F6 | 	mov	arg02, #10
11c60     00 16 06 F6 | 	mov	arg03, #0
11c64     50 59 B1 FD | 	call	#__system___basic_print_char
11c68     00 12 06 F6 | 	mov	arg01, #0
11c6c     4C A9 B1 FD | 	call	#__system___getiolock_0603
11c70     FD 00 68 FC | 	wrlong	#0, result1
11c74     A7 F0 03 F6 | 	mov	ptra, fp
11c78     B2 00 A0 FD | 	call	#popregs_
11c7c                 | _do_dir_ret
11c7c     2D 00 64 FD | 	ret
11c80                 | 
11c80                 | ' 
11c80                 | ' '-------------------- dpeek
11c80                 | ' 
11c80                 | ' sub do_dpeek
11c80                 | _do_dpeek
11c80     00 4A 05 F6 | 	mov	COUNT_, #0
11c84     A8 00 A0 FD | 	call	#pushregs_
11c88     14 F0 07 F1 | 	add	ptra, #20
11c8c     F8 B8 BF FD | 	call	#_pop
11c90     A7 FA 61 FC | 	wrlong	result1, fp
11c94     04 4E 05 F1 | 	add	fp, #4
11c98     A7 FC 61 FC | 	wrlong	result2, fp
11c9c     04 4E 05 F1 | 	add	fp, #4
11ca0     A7 FE 61 FC | 	wrlong	result3, fp
11ca4     08 4E 85 F1 | 	sub	fp, #8
11ca8     A7 12 02 F6 | 	mov	arg01, fp
11cac     BC BA BF FD | 	call	#_converttoint
11cb0     0C 4E 05 F1 | 	add	fp, #12
11cb4     A7 FA 61 FC | 	wrlong	result1, fp
11cb8                 | ' 
11cb8                 | ' t1=pop()
11cb8                 | ' a=converttoint(t1)
11cb8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
11cb8     0C 4E 85 F1 | 	sub	fp, #12
11cbc     00 04 00 FF 
11cc0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
11cc4     1C 00 90 3D |  if_ae	jmp	#LR__1430
11cc8     0C 4E 05 F1 | 	add	fp, #12
11ccc     A7 12 02 FB | 	rdlong	arg01, fp
11cd0     09 FB E1 FA | 	rdword	result1, arg01
11cd4     04 4E 05 F1 | 	add	fp, #4
11cd8     A7 FA 61 FC | 	wrlong	result1, fp
11cdc     10 4E 85 F1 | 	sub	fp, #16
11ce0     1C 00 90 FD | 	jmp	#LR__1431
11ce4                 | LR__1430
11ce4     0C 4E 05 F1 | 	add	fp, #12
11ce8     A7 12 02 FB | 	rdlong	arg01, fp
11cec     0C 4E 85 F1 | 	sub	fp, #12
11cf0     5C 15 B1 FD | 	call	#_psdpeek
11cf4     10 4E 05 F1 | 	add	fp, #16
11cf8     A7 FA 61 FC | 	wrlong	result1, fp
11cfc     10 4E 85 F1 | 	sub	fp, #16
11d00                 | LR__1431
11d00     08 4E 05 F1 | 	add	fp, #8
11d04     A7 3A 68 FC | 	wrlong	#29, fp
11d08     08 4E 05 F1 | 	add	fp, #8
11d0c     A7 12 02 FB | 	rdlong	arg01, fp
11d10     10 4E 85 F1 | 	sub	fp, #16
11d14     A7 12 62 FC | 	wrlong	arg01, fp
11d18     A7 12 02 F6 | 	mov	arg01, fp
11d1c     00 B9 BF FD | 	call	#_push
11d20     A7 F0 03 F6 | 	mov	ptra, fp
11d24     B2 00 A0 FD | 	call	#popregs_
11d28                 | _do_dpeek_ret
11d28     2D 00 64 FD | 	ret
11d2c                 | 
11d2c                 | ' 
11d2c                 | ' '-------------------- dpoke
11d2c                 | ' 
11d2c                 | ' sub do_dpoke
11d2c                 | _do_dpoke
11d2c     01 4A 05 F6 | 	mov	COUNT_, #1
11d30     A8 00 A0 FD | 	call	#pushregs_
11d34     20 F0 07 F1 | 	add	ptra, #32
11d38     4C B8 BF FD | 	call	#_pop
11d3c     FD 14 02 F6 | 	mov	arg02, result1
11d40     FE 12 02 F6 | 	mov	arg01, result2
11d44     FF 26 02 F6 | 	mov	local01, result3
11d48     A7 14 62 FC | 	wrlong	arg02, fp
11d4c     04 4E 05 F1 | 	add	fp, #4
11d50     A7 12 62 FC | 	wrlong	arg01, fp
11d54     04 4E 05 F1 | 	add	fp, #4
11d58     A7 26 62 FC | 	wrlong	local01, fp
11d5c     08 4E 85 F1 | 	sub	fp, #8
11d60     24 B8 BF FD | 	call	#_pop
11d64     FF 26 02 F6 | 	mov	local01, result3
11d68     0C 4E 05 F1 | 	add	fp, #12
11d6c     A7 FA 61 FC | 	wrlong	result1, fp
11d70     04 4E 05 F1 | 	add	fp, #4
11d74     A7 FC 61 FC | 	wrlong	result2, fp
11d78     04 4E 05 F1 | 	add	fp, #4
11d7c     A7 26 62 FC | 	wrlong	local01, fp
11d80     08 4E 85 F1 | 	sub	fp, #8
11d84     A7 12 02 F6 | 	mov	arg01, fp
11d88     0C 4E 85 F1 | 	sub	fp, #12
11d8c     DC B9 BF FD | 	call	#_converttoint
11d90     18 4E 05 F1 | 	add	fp, #24
11d94     A7 FA 61 FC | 	wrlong	result1, fp
11d98     18 4E 85 F1 | 	sub	fp, #24
11d9c     A7 12 02 F6 | 	mov	arg01, fp
11da0     C8 B9 BF FD | 	call	#_converttoint
11da4     1C 4E 05 F1 | 	add	fp, #28
11da8     A7 FA 61 FC | 	wrlong	result1, fp
11dac                 | ' 
11dac                 | ' t1=pop() 'value
11dac                 | ' t2=pop() 
11dac                 | ' a=converttoint(t2) : v=converttoint(t1)
11dac                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
11dac     04 4E 85 F1 | 	sub	fp, #4
11db0     A7 26 02 FB | 	rdlong	local01, fp
11db4     18 4E 85 F1 | 	sub	fp, #24
11db8     00 04 00 FF 
11dbc     00 26 16 F2 | 	cmp	local01, ##524288 wc
11dc0     1C 00 90 3D |  if_ae	jmp	#LR__1440
11dc4     18 4E 05 F1 | 	add	fp, #24
11dc8     A7 12 02 FB | 	rdlong	arg01, fp
11dcc     04 4E 05 F1 | 	add	fp, #4
11dd0     A7 14 02 FB | 	rdlong	arg02, fp
11dd4     1C 4E 85 F1 | 	sub	fp, #28
11dd8     09 15 52 FC | 	wrword	arg02, arg01
11ddc     18 00 90 FD | 	jmp	#LR__1441
11de0                 | LR__1440
11de0     18 4E 05 F1 | 	add	fp, #24
11de4     A7 12 02 FB | 	rdlong	arg01, fp
11de8     04 4E 05 F1 | 	add	fp, #4
11dec     A7 14 02 FB | 	rdlong	arg02, fp
11df0     1C 4E 85 F1 | 	sub	fp, #28
11df4     18 13 B1 FD | 	call	#_psdpoke
11df8                 | LR__1441
11df8     A7 F0 03 F6 | 	mov	ptra, fp
11dfc     B2 00 A0 FD | 	call	#popregs_
11e00                 | _do_dpoke_ret
11e00     2D 00 64 FD | 	ret
11e04                 | 
11e04                 | ' '-------------------- draw
11e04                 | ' 
11e04                 | ' sub do_draw
11e04                 | _do_draw
11e04     00 4A 05 F6 | 	mov	COUNT_, #0
11e08     A8 00 A0 FD | 	call	#pushregs_
11e0c     20 F0 07 F1 | 	add	ptra, #32
11e10     74 B7 BF FD | 	call	#_pop
11e14     FD 1A 02 F6 | 	mov	arg05, result1
11e18     FE 18 02 F6 | 	mov	arg04, result2
11e1c     FF 16 02 F6 | 	mov	arg03, result3
11e20     0C 4E 05 F1 | 	add	fp, #12
11e24     A7 1A 62 FC | 	wrlong	arg05, fp
11e28     04 4E 05 F1 | 	add	fp, #4
11e2c     A7 18 62 FC | 	wrlong	arg04, fp
11e30     04 4E 05 F1 | 	add	fp, #4
11e34     A7 16 62 FC | 	wrlong	arg03, fp
11e38     14 4E 85 F1 | 	sub	fp, #20
11e3c     48 B7 BF FD | 	call	#_pop
11e40     FF 1A 02 F6 | 	mov	arg05, result3
11e44     A7 FA 61 FC | 	wrlong	result1, fp
11e48     04 4E 05 F1 | 	add	fp, #4
11e4c     A7 FC 61 FC | 	wrlong	result2, fp
11e50     04 4E 05 F1 | 	add	fp, #4
11e54     A7 1A 62 FC | 	wrlong	arg05, fp
11e58     08 4E 85 F1 | 	sub	fp, #8
11e5c     A7 12 02 F6 | 	mov	arg01, fp
11e60     08 B9 BF FD | 	call	#_converttoint
11e64     18 4E 05 F1 | 	add	fp, #24
11e68     A7 FA 61 FC | 	wrlong	result1, fp
11e6c     0C 4E 85 F1 | 	sub	fp, #12
11e70     A7 12 02 F6 | 	mov	arg01, fp
11e74     0C 4E 85 F1 | 	sub	fp, #12
11e78     F0 B8 BF FD | 	call	#_converttoint
11e7c     1C 4E 05 F1 | 	add	fp, #28
11e80     A7 FA 61 FC | 	wrlong	result1, fp
11e84     37 00 00 FF 
11e88     2C E4 05 F1 | 	add	objptr, ##28204
11e8c     F2 12 02 FB | 	rdlong	arg01, objptr
11e90     04 E4 05 F1 | 	add	objptr, #4
11e94     F2 14 02 FB | 	rdlong	arg02, objptr
11e98     04 4E 85 F1 | 	sub	fp, #4
11e9c     A7 16 02 FB | 	rdlong	arg03, fp
11ea0     FD 18 02 F6 | 	mov	arg04, result1
11ea4     18 4E 85 F1 | 	sub	fp, #24
11ea8     08 E4 85 F1 | 	sub	objptr, #8
11eac     F2 1A 02 FB | 	rdlong	arg05, objptr
11eb0     37 00 00 FF 
11eb4     28 E4 85 F1 | 	sub	objptr, ##28200
11eb8     B4 23 B1 FD | 	call	#_hg010b_spin2_draw
11ebc     18 4E 05 F1 | 	add	fp, #24
11ec0     A7 1A 02 FB | 	rdlong	arg05, fp
11ec4     37 00 00 FF 
11ec8     2C E4 05 F1 | 	add	objptr, ##28204
11ecc     F2 1A 62 FC | 	wrlong	arg05, objptr
11ed0     04 4E 05 F1 | 	add	fp, #4
11ed4     A7 1A 02 FB | 	rdlong	arg05, fp
11ed8     1C 4E 85 F1 | 	sub	fp, #28
11edc     04 E4 05 F1 | 	add	objptr, #4
11ee0     F2 1A 62 FC | 	wrlong	arg05, objptr
11ee4     37 00 00 FF 
11ee8     30 E4 85 F1 | 	sub	objptr, ##28208
11eec     A7 F0 03 F6 | 	mov	ptra, fp
11ef0     B2 00 A0 FD | 	call	#popregs_
11ef4                 | _do_draw_ret
11ef4     2D 00 64 FD | 	ret
11ef8                 | 
11ef8                 | ' 
11ef8                 | ' '-------------------- else
11ef8                 | ' 
11ef8                 | ' sub do_else
11ef8                 | _do_else
11ef8     4A 00 00 FF 
11efc     7C E4 05 F1 | 	add	objptr, ##38012
11f00     F2 00 02 FB | 	rdlong	_var01, objptr
11f04     01 00 86 F1 | 	sub	_var01, #1
11f08     04 E4 05 F1 | 	add	objptr, #4
11f0c     F2 00 62 FC | 	wrlong	_var01, objptr
11f10     4A 00 00 FF 
11f14     80 E4 85 F1 | 	sub	objptr, ##38016
11f18                 | _do_else_ret
11f18     2D 00 64 FD | 	ret
11f1c                 | 
11f1c                 | ' 
11f1c                 | ' '-------------------- end
11f1c                 | ' 
11f1c                 | ' sub do_end
11f1c                 | _do_end
11f1c     4A 00 00 FF 
11f20     7C E4 05 F1 | 	add	objptr, ##38012
11f24     F2 00 02 FB | 	rdlong	_var01, objptr
11f28     01 00 86 F1 | 	sub	_var01, #1
11f2c     04 E4 05 F1 | 	add	objptr, #4
11f30     F2 00 62 FC | 	wrlong	_var01, objptr
11f34     06 00 00 FF 
11f38     38 E4 05 F1 | 	add	objptr, ##3128
11f3c     FF FF BF FF 
11f40     F2 FE 6B FC | 	wrlong	##2147483647, objptr
11f44     50 00 00 FF 
11f48     B8 E4 85 F1 | 	sub	objptr, ##41144
11f4c                 | _do_end_ret
11f4c     2D 00 64 FD | 	ret
11f50                 | 
11f50                 | ' 
11f50                 | ' '-------------------- enter
11f50                 | ' 
11f50                 | ' sub do_enter
11f50                 | _do_enter
11f50     02 00 00 FF 
11f54     D2 12 06 F6 | 	mov	arg01, ##1234
11f58     A0 2E B0 FD | 	call	#_do_load
11f5c                 | _do_enter_ret
11f5c     2D 00 64 FD | 	ret
11f60                 | 
11f60                 | ' 
11f60                 | ' '------------------- error processing
11f60                 | ' 
11f60                 | ' sub do_error
11f60                 | _do_error
11f60     01 4A 05 F6 | 	mov	COUNT_, #1
11f64     A8 00 A0 FD | 	call	#pushregs_
11f68     4A 00 00 FF 
11f6c     80 E4 05 F1 | 	add	objptr, ##38016
11f70     F2 18 02 FB | 	rdlong	arg04, objptr
11f74     0C 17 02 F6 | 	mov	arg03, arg04
11f78     01 16 66 F0 | 	shl	arg03, #1
11f7c     0C 17 02 F1 | 	add	arg03, arg04
11f80     02 16 66 F0 | 	shl	arg03, #2
11f84     03 00 00 FF 
11f88     04 E4 85 F1 | 	sub	objptr, ##1540
11f8c     F2 16 02 F1 | 	add	arg03, objptr
11f90     0B 27 02 FB | 	rdlong	local01, arg03
11f94                 | ' r=compiledline(lineptr_e).result.uresult
11f94                 | ' print "Error ";r;": ";errors$(r)
11f94     00 12 06 F6 | 	mov	arg01, #0
11f98     47 00 00 FF 
11f9c     7C E4 85 F1 | 	sub	objptr, ##36476
11fa0     18 A6 B1 FD | 	call	#__system___getiolock_0603
11fa4     FD 12 02 F6 | 	mov	arg01, result1
11fa8     6C 49 B1 FD | 	call	#__system___lockmem
11fac     B6 01 00 FF 
11fb0     F5 15 06 F6 | 	mov	arg02, ##@LR__5897
11fb4     00 12 06 F6 | 	mov	arg01, #0
11fb8     00 16 06 F6 | 	mov	arg03, #0
11fbc     50 56 B1 FD | 	call	#__system___basic_print_string
11fc0     00 12 06 F6 | 	mov	arg01, #0
11fc4     13 15 02 F6 | 	mov	arg02, local01
11fc8     00 16 06 F6 | 	mov	arg03, #0
11fcc     0A 18 06 F6 | 	mov	arg04, #10
11fd0     C0 56 B1 FD | 	call	#__system___basic_print_unsigned
11fd4     B6 01 00 FF 
11fd8     FC 15 06 F6 | 	mov	arg02, ##@LR__5898
11fdc     00 12 06 F6 | 	mov	arg01, #0
11fe0     00 16 06 F6 | 	mov	arg03, #0
11fe4     28 56 B1 FD | 	call	#__system___basic_print_string
11fe8     02 26 66 F0 | 	shl	local01, #2
11fec     45 00 00 FF 
11ff0     7C E4 05 F1 | 	add	objptr, ##35452
11ff4     F2 26 02 F1 | 	add	local01, objptr
11ff8     13 15 02 FB | 	rdlong	arg02, local01
11ffc     00 12 06 F6 | 	mov	arg01, #0
12000     00 16 06 F6 | 	mov	arg03, #0
12004     45 00 00 FF 
12008     7C E4 85 F1 | 	sub	objptr, ##35452
1200c     00 56 B1 FD | 	call	#__system___basic_print_string
12010     00 12 06 F6 | 	mov	arg01, #0
12014     0A 14 06 F6 | 	mov	arg02, #10
12018     00 16 06 F6 | 	mov	arg03, #0
1201c     98 55 B1 FD | 	call	#__system___basic_print_char
12020     00 12 06 F6 | 	mov	arg01, #0
12024     94 A5 B1 FD | 	call	#__system___getiolock_0603
12028     FD 00 68 FC | 	wrlong	#0, result1
1202c     A7 F0 03 F6 | 	mov	ptra, fp
12030     B2 00 A0 FD | 	call	#popregs_
12034                 | _do_error_ret
12034     2D 00 64 FD | 	ret
12038                 | 
12038                 | ' 
12038                 | ' '-------------------- fcircle
12038                 | ' 
12038                 | ' sub do_fcircle
12038                 | _do_fcircle
12038     02 4A 05 F6 | 	mov	COUNT_, #2
1203c     A8 00 A0 FD | 	call	#pushregs_
12040     24 F0 07 F1 | 	add	ptra, #36
12044     40 B5 BF FD | 	call	#_pop
12048     FD 14 02 F6 | 	mov	arg02, result1
1204c     FE 18 02 F6 | 	mov	arg04, result2
12050     FF 16 02 F6 | 	mov	arg03, result3
12054     18 4E 05 F1 | 	add	fp, #24
12058     A7 14 62 FC | 	wrlong	arg02, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 18 62 FC | 	wrlong	arg04, fp
12064     04 4E 05 F1 | 	add	fp, #4
12068     A7 16 62 FC | 	wrlong	arg03, fp
1206c     20 4E 85 F1 | 	sub	fp, #32
12070     14 B5 BF FD | 	call	#_pop
12074     FD 14 02 F6 | 	mov	arg02, result1
12078     FE 18 02 F6 | 	mov	arg04, result2
1207c     FF 16 02 F6 | 	mov	arg03, result3
12080     0C 4E 05 F1 | 	add	fp, #12
12084     A7 14 62 FC | 	wrlong	arg02, fp
12088     04 4E 05 F1 | 	add	fp, #4
1208c     A7 18 62 FC | 	wrlong	arg04, fp
12090     04 4E 05 F1 | 	add	fp, #4
12094     A7 16 62 FC | 	wrlong	arg03, fp
12098     14 4E 85 F1 | 	sub	fp, #20
1209c     E8 B4 BF FD | 	call	#_pop
120a0     FF 14 02 F6 | 	mov	arg02, result3
120a4     A7 FA 61 FC | 	wrlong	result1, fp
120a8     04 4E 05 F1 | 	add	fp, #4
120ac     A7 FC 61 FC | 	wrlong	result2, fp
120b0     04 4E 05 F1 | 	add	fp, #4
120b4     A7 14 62 FC | 	wrlong	arg02, fp
120b8     08 4E 85 F1 | 	sub	fp, #8
120bc     A7 12 02 F6 | 	mov	arg01, fp
120c0     A8 B6 BF FD | 	call	#_converttoint
120c4     FD 26 02 F6 | 	mov	local01, result1
120c8     0C 4E 05 F1 | 	add	fp, #12
120cc     A7 12 02 F6 | 	mov	arg01, fp
120d0     0C 4E 85 F1 | 	sub	fp, #12
120d4     94 B6 BF FD | 	call	#_converttoint
120d8     FD 28 02 F6 | 	mov	local02, result1
120dc     18 4E 05 F1 | 	add	fp, #24
120e0     A7 12 02 F6 | 	mov	arg01, fp
120e4     18 4E 85 F1 | 	sub	fp, #24
120e8     80 B6 BF FD | 	call	#_converttoint
120ec     FD 16 02 F6 | 	mov	arg03, result1
120f0     37 00 00 FF 
120f4     28 E4 05 F1 | 	add	objptr, ##28200
120f8     F2 18 02 FB | 	rdlong	arg04, objptr
120fc     37 00 00 FF 
12100     28 E4 85 F1 | 	sub	objptr, ##28200
12104     13 13 02 F6 | 	mov	arg01, local01
12108     14 15 02 F6 | 	mov	arg02, local02
1210c     E4 25 B1 FD | 	call	#_hg010b_spin2_fcircle
12110     A7 F0 03 F6 | 	mov	ptra, fp
12114     B2 00 A0 FD | 	call	#popregs_
12118                 | _do_fcircle_ret
12118     2D 00 64 FD | 	ret
1211c                 | 
1211c                 | ' 
1211c                 | ' '-------------------- fill
1211c                 | ' 
1211c                 | ' sub do_fill
1211c                 | _do_fill
1211c     03 4A 05 F6 | 	mov	COUNT_, #3
12120     A8 00 A0 FD | 	call	#pushregs_
12124     30 F0 07 F1 | 	add	ptra, #48
12128     5C B4 BF FD | 	call	#_pop
1212c     FD 16 02 F6 | 	mov	arg03, result1
12130     FE 14 02 F6 | 	mov	arg02, result2
12134     FF 18 02 F6 | 	mov	arg04, result3
12138     24 4E 05 F1 | 	add	fp, #36
1213c     A7 16 62 FC | 	wrlong	arg03, fp
12140     04 4E 05 F1 | 	add	fp, #4
12144     A7 14 62 FC | 	wrlong	arg02, fp
12148     04 4E 05 F1 | 	add	fp, #4
1214c     A7 18 62 FC | 	wrlong	arg04, fp
12150     2C 4E 85 F1 | 	sub	fp, #44
12154     30 B4 BF FD | 	call	#_pop
12158     FD 16 02 F6 | 	mov	arg03, result1
1215c     FE 14 02 F6 | 	mov	arg02, result2
12160     FF 18 02 F6 | 	mov	arg04, result3
12164     18 4E 05 F1 | 	add	fp, #24
12168     A7 16 62 FC | 	wrlong	arg03, fp
1216c     04 4E 05 F1 | 	add	fp, #4
12170     A7 14 62 FC | 	wrlong	arg02, fp
12174     04 4E 05 F1 | 	add	fp, #4
12178     A7 18 62 FC | 	wrlong	arg04, fp
1217c     20 4E 85 F1 | 	sub	fp, #32
12180     04 B4 BF FD | 	call	#_pop
12184     FD 16 02 F6 | 	mov	arg03, result1
12188     FE 14 02 F6 | 	mov	arg02, result2
1218c     FF 18 02 F6 | 	mov	arg04, result3
12190     0C 4E 05 F1 | 	add	fp, #12
12194     A7 16 62 FC | 	wrlong	arg03, fp
12198     04 4E 05 F1 | 	add	fp, #4
1219c     A7 14 62 FC | 	wrlong	arg02, fp
121a0     04 4E 05 F1 | 	add	fp, #4
121a4     A7 18 62 FC | 	wrlong	arg04, fp
121a8     14 4E 85 F1 | 	sub	fp, #20
121ac     D8 B3 BF FD | 	call	#_pop
121b0     FF 16 02 F6 | 	mov	arg03, result3
121b4     A7 FA 61 FC | 	wrlong	result1, fp
121b8     04 4E 05 F1 | 	add	fp, #4
121bc     A7 FC 61 FC | 	wrlong	result2, fp
121c0     04 4E 05 F1 | 	add	fp, #4
121c4     A7 16 62 FC | 	wrlong	arg03, fp
121c8     08 4E 85 F1 | 	sub	fp, #8
121cc     A7 12 02 F6 | 	mov	arg01, fp
121d0     98 B5 BF FD | 	call	#_converttoint
121d4     FD 26 02 F6 | 	mov	local01, result1
121d8     0C 4E 05 F1 | 	add	fp, #12
121dc     A7 12 02 F6 | 	mov	arg01, fp
121e0     0C 4E 85 F1 | 	sub	fp, #12
121e4     84 B5 BF FD | 	call	#_converttoint
121e8     FD 28 02 F6 | 	mov	local02, result1
121ec     18 4E 05 F1 | 	add	fp, #24
121f0     A7 12 02 F6 | 	mov	arg01, fp
121f4     18 4E 85 F1 | 	sub	fp, #24
121f8     70 B5 BF FD | 	call	#_converttoint
121fc     FD 2A 02 F6 | 	mov	local03, result1
12200     24 4E 05 F1 | 	add	fp, #36
12204     A7 12 02 F6 | 	mov	arg01, fp
12208     24 4E 85 F1 | 	sub	fp, #36
1220c     5C B5 BF FD | 	call	#_converttoint
12210     FD 18 02 F6 | 	mov	arg04, result1
12214     13 13 02 F6 | 	mov	arg01, local01
12218     14 15 02 F6 | 	mov	arg02, local02
1221c     15 17 02 F6 | 	mov	arg03, local03
12220     3C 22 B1 FD | 	call	#_hg010b_spin2_fill
12224     A7 F0 03 F6 | 	mov	ptra, fp
12228     B2 00 A0 FD | 	call	#popregs_
1222c                 | _do_fill_ret
1222c     2D 00 64 FD | 	ret
12230                 | 
12230                 | ' 
12230                 | ' '-------------------- font
12230                 | ' 
12230                 | ' sub do_font
12230                 | _do_font
12230     03 4A 05 F6 | 	mov	COUNT_, #3
12234     A8 00 A0 FD | 	call	#pushregs_
12238     4C B3 BF FD | 	call	#_pop
1223c     FD 26 02 F6 | 	mov	local01, result1
12240     FE 28 02 F6 | 	mov	local02, result2
12244     FF 2A 02 F6 | 	mov	local03, result3
12248                 | ' 
12248                 | ' t1=pop() 
12248                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12248     1E 2A 0E F2 | 	cmp	local03, #30 wz
1224c     10 00 90 5D |  if_ne	jmp	#LR__1450
12250     13 13 02 F6 | 	mov	arg01, local01
12254     00 14 06 F6 | 	mov	arg02, #0
12258     00 7A B1 FD | 	call	#__system___float_tointeger
1225c     FD 26 02 F6 | 	mov	local01, result1
12260                 | LR__1450
12260                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12260     1F 2A 0E F2 | 	cmp	local03, #31 wz
12264     18 00 90 5D |  if_ne	jmp	#LR__1451
12268     13 13 02 F6 | 	mov	arg01, local01
1226c     30 7D B1 FD | 	call	#__system____builtin_atof
12270     FD 12 02 F6 | 	mov	arg01, result1
12274     00 14 06 F6 | 	mov	arg02, #0
12278     E0 79 B1 FD | 	call	#__system___float_tointeger
1227c     FD 26 02 F6 | 	mov	local01, result1
12280                 | LR__1451
12280     37 00 00 FF 
12284     40 E4 05 F1 | 	add	objptr, ##28224
12288     F2 26 62 FC | 	wrlong	local01, objptr
1228c     37 00 00 FF 
12290     40 E4 85 F1 | 	sub	objptr, ##28224
12294     02 26 66 F0 | 	shl	local01, #2
12298     13 13 02 F6 | 	mov	arg01, local01
1229c     A4 28 B1 FD | 	call	#_hg010b_spin2_setfontfamily
122a0     A7 F0 03 F6 | 	mov	ptra, fp
122a4     B2 00 A0 FD | 	call	#popregs_
122a8                 | _do_font_ret
122a8     2D 00 64 FD | 	ret
122ac                 | 
122ac                 | ' 
122ac                 | ' '-------------------- for
122ac                 | ' 
122ac                 | ' sub do_for()
122ac                 | _do_for
122ac     01 4A 05 F6 | 	mov	COUNT_, #1
122b0     A8 00 A0 FD | 	call	#pushregs_
122b4     10 F0 07 F1 | 	add	ptra, #16
122b8     50 00 00 FF 
122bc     30 E5 05 F1 | 	add	objptr, ##41264
122c0     F2 12 02 FB | 	rdlong	arg01, objptr
122c4     01 12 06 F1 | 	add	arg01, #1
122c8     F2 12 62 FC | 	wrlong	arg01, objptr
122cc     50 00 00 FF 
122d0     30 E5 85 F1 | 	sub	objptr, ##41264
122d4     B0 B2 BF FD | 	call	#_pop
122d8     A7 FA 61 FC | 	wrlong	result1, fp
122dc     04 4E 05 F1 | 	add	fp, #4
122e0     A7 FC 61 FC | 	wrlong	result2, fp
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 FE 61 FC | 	wrlong	result3, fp
122ec     08 4E 85 F1 | 	sub	fp, #8
122f0     50 00 00 FF 
122f4     30 E5 05 F1 | 	add	objptr, ##41264
122f8     F2 12 02 FB | 	rdlong	arg01, objptr
122fc     09 27 02 F6 | 	mov	local01, arg01
12300     02 26 66 F0 | 	shl	local01, #2
12304     09 27 02 F1 | 	add	local01, arg01
12308     02 26 66 F0 | 	shl	local01, #2
1230c     06 00 00 FF 
12310     98 E4 85 F1 | 	sub	objptr, ##3224
12314     F2 26 02 F1 | 	add	local01, objptr
12318     A7 12 02 FB | 	rdlong	arg01, fp
1231c     08 26 06 F1 | 	add	local01, #8
12320     13 13 62 FC | 	wrlong	arg01, local01
12324     4A 00 00 FF 
12328     98 E4 85 F1 | 	sub	objptr, ##38040
1232c     58 B2 BF FD | 	call	#_pop
12330     A7 FA 61 FC | 	wrlong	result1, fp
12334     04 4E 05 F1 | 	add	fp, #4
12338     A7 FC 61 FC | 	wrlong	result2, fp
1233c     04 4E 05 F1 | 	add	fp, #4
12340     A7 FE 61 FC | 	wrlong	result3, fp
12344     08 4E 85 F1 | 	sub	fp, #8
12348     50 00 00 FF 
1234c     30 E5 05 F1 | 	add	objptr, ##41264
12350     F2 12 02 FB | 	rdlong	arg01, objptr
12354     09 27 02 F6 | 	mov	local01, arg01
12358     02 26 66 F0 | 	shl	local01, #2
1235c     09 27 02 F1 | 	add	local01, arg01
12360     02 26 66 F0 | 	shl	local01, #2
12364     06 00 00 FF 
12368     98 E4 85 F1 | 	sub	objptr, ##3224
1236c     F2 26 02 F1 | 	add	local01, objptr
12370     A7 12 02 F6 | 	mov	arg01, fp
12374     4A 00 00 FF 
12378     98 E4 85 F1 | 	sub	objptr, ##38040
1237c     EC B3 BF FD | 	call	#_converttoint
12380     FD 12 02 F6 | 	mov	arg01, result1
12384     0C 26 06 F1 | 	add	local01, #12
12388     13 13 62 FC | 	wrlong	arg01, local01
1238c     F8 B1 BF FD | 	call	#_pop
12390     A7 FA 61 FC | 	wrlong	result1, fp
12394     04 4E 05 F1 | 	add	fp, #4
12398     A7 FC 61 FC | 	wrlong	result2, fp
1239c     04 4E 05 F1 | 	add	fp, #4
123a0     A7 FE 61 FC | 	wrlong	result3, fp
123a4     08 4E 85 F1 | 	sub	fp, #8
123a8     50 00 00 FF 
123ac     30 E5 05 F1 | 	add	objptr, ##41264
123b0     F2 12 02 FB | 	rdlong	arg01, objptr
123b4     09 27 02 F6 | 	mov	local01, arg01
123b8     02 26 66 F0 | 	shl	local01, #2
123bc     09 27 02 F1 | 	add	local01, arg01
123c0     02 26 66 F0 | 	shl	local01, #2
123c4     06 00 00 FF 
123c8     98 E4 85 F1 | 	sub	objptr, ##3224
123cc     F2 26 02 F1 | 	add	local01, objptr
123d0     A7 12 02 F6 | 	mov	arg01, fp
123d4     4A 00 00 FF 
123d8     98 E4 85 F1 | 	sub	objptr, ##38040
123dc     8C B3 BF FD | 	call	#_converttoint
123e0     10 26 06 F1 | 	add	local01, #16
123e4     13 FB 61 FC | 	wrlong	result1, local01
123e8                 | ' fortop+=1
123e8                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
123e8                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
123e8                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
123e8                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
123e8     4A 00 00 FF 
123ec     80 E4 05 F1 | 	add	objptr, ##38016
123f0     F2 12 02 FB | 	rdlong	arg01, objptr
123f4     09 27 02 F6 | 	mov	local01, arg01
123f8     01 26 66 F0 | 	shl	local01, #1
123fc     09 27 02 F1 | 	add	local01, arg01
12400     02 26 66 F0 | 	shl	local01, #2
12404     03 00 00 FF 
12408     04 E4 85 F1 | 	sub	objptr, ##1540
1240c     F2 26 02 F1 | 	add	local01, objptr
12410     08 26 06 F1 | 	add	local01, #8
12414     13 27 02 FB | 	rdlong	local01, local01
12418     FE 27 0E F2 | 	cmp	local01, #510 wz
1241c     47 00 00 FF 
12420     7C E4 85 F1 | 	sub	objptr, ##36476
12424     70 00 90 5D |  if_ne	jmp	#LR__1460
12428     50 00 00 FF 
1242c     30 E5 05 F1 | 	add	objptr, ##41264
12430     F2 12 02 FB | 	rdlong	arg01, objptr
12434     09 27 02 F6 | 	mov	local01, arg01
12438     02 26 66 F0 | 	shl	local01, #2
1243c     09 27 02 F1 | 	add	local01, arg01
12440     02 26 66 F0 | 	shl	local01, #2
12444     06 00 00 FF 
12448     98 E4 85 F1 | 	sub	objptr, ##3224
1244c     F2 26 02 F1 | 	add	local01, objptr
12450     06 00 00 FF 
12454     20 E4 05 F1 | 	add	objptr, ##3104
12458     F2 12 02 FB | 	rdlong	arg01, objptr
1245c     13 13 62 FC | 	wrlong	arg01, local01
12460     78 E4 05 F1 | 	add	objptr, #120
12464     F2 12 02 FB | 	rdlong	arg01, objptr
12468     09 27 02 F6 | 	mov	local01, arg01
1246c     02 26 66 F0 | 	shl	local01, #2
12470     09 27 02 F1 | 	add	local01, arg01
12474     02 26 66 F0 | 	shl	local01, #2
12478     06 00 00 FF 
1247c     98 E4 85 F1 | 	sub	objptr, ##3224
12480     F2 26 02 F1 | 	add	local01, objptr
12484     04 26 06 F1 | 	add	local01, #4
12488     13 01 68 FC | 	wrlong	#0, local01
1248c     4A 00 00 FF 
12490     98 E4 85 F1 | 	sub	objptr, ##38040
12494     78 00 90 FD | 	jmp	#LR__1461
12498                 | LR__1460
12498     50 00 00 FF 
1249c     30 E5 05 F1 | 	add	objptr, ##41264
124a0     F2 12 02 FB | 	rdlong	arg01, objptr
124a4     09 27 02 F6 | 	mov	local01, arg01
124a8     02 26 66 F0 | 	shl	local01, #2
124ac     09 27 02 F1 | 	add	local01, arg01
124b0     02 26 66 F0 | 	shl	local01, #2
124b4     06 00 00 FF 
124b8     98 E4 85 F1 | 	sub	objptr, ##3224
124bc     F2 26 02 F1 | 	add	local01, objptr
124c0     06 00 00 FF 
124c4     28 E4 05 F1 | 	add	objptr, ##3112
124c8     F2 12 02 FB | 	rdlong	arg01, objptr
124cc     13 13 62 FC | 	wrlong	arg01, local01
124d0     70 E4 05 F1 | 	add	objptr, #112
124d4     F2 12 02 FB | 	rdlong	arg01, objptr
124d8     09 27 02 F6 | 	mov	local01, arg01
124dc     02 26 66 F0 | 	shl	local01, #2
124e0     09 27 02 F1 | 	add	local01, arg01
124e4     02 26 66 F0 | 	shl	local01, #2
124e8     06 00 00 FF 
124ec     98 E4 85 F1 | 	sub	objptr, ##3224
124f0     F2 26 02 F1 | 	add	local01, objptr
124f4     18 E4 85 F1 | 	sub	objptr, #24
124f8     F2 12 02 FB | 	rdlong	arg01, objptr
124fc     4A 00 00 FF 
12500     80 E4 85 F1 | 	sub	objptr, ##38016
12504     01 12 06 F1 | 	add	arg01, #1
12508     04 26 06 F1 | 	add	local01, #4
1250c     13 13 62 FC | 	wrlong	arg01, local01
12510                 | LR__1461
12510     A7 F0 03 F6 | 	mov	ptra, fp
12514     B2 00 A0 FD | 	call	#popregs_
12518                 | _do_for_ret
12518     2D 00 64 FD | 	ret
1251c                 | 
1251c                 | ' 
1251c                 | ' '-------------------- frame
1251c                 | ' 
1251c                 | ' sub do_frame
1251c                 | _do_frame
1251c     03 4A 05 F6 | 	mov	COUNT_, #3
12520     A8 00 A0 FD | 	call	#pushregs_
12524     30 F0 07 F1 | 	add	ptra, #48
12528     5C B0 BF FD | 	call	#_pop
1252c     FD 16 02 F6 | 	mov	arg03, result1
12530     FE 14 02 F6 | 	mov	arg02, result2
12534     FF 1A 02 F6 | 	mov	arg05, result3
12538     24 4E 05 F1 | 	add	fp, #36
1253c     A7 16 62 FC | 	wrlong	arg03, fp
12540     04 4E 05 F1 | 	add	fp, #4
12544     A7 14 62 FC | 	wrlong	arg02, fp
12548     04 4E 05 F1 | 	add	fp, #4
1254c     A7 1A 62 FC | 	wrlong	arg05, fp
12550     2C 4E 85 F1 | 	sub	fp, #44
12554     30 B0 BF FD | 	call	#_pop
12558     FD 16 02 F6 | 	mov	arg03, result1
1255c     FE 14 02 F6 | 	mov	arg02, result2
12560     FF 1A 02 F6 | 	mov	arg05, result3
12564     18 4E 05 F1 | 	add	fp, #24
12568     A7 16 62 FC | 	wrlong	arg03, fp
1256c     04 4E 05 F1 | 	add	fp, #4
12570     A7 14 62 FC | 	wrlong	arg02, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 1A 62 FC | 	wrlong	arg05, fp
1257c     20 4E 85 F1 | 	sub	fp, #32
12580     04 B0 BF FD | 	call	#_pop
12584     FD 16 02 F6 | 	mov	arg03, result1
12588     FE 14 02 F6 | 	mov	arg02, result2
1258c     FF 1A 02 F6 | 	mov	arg05, result3
12590     0C 4E 05 F1 | 	add	fp, #12
12594     A7 16 62 FC | 	wrlong	arg03, fp
12598     04 4E 05 F1 | 	add	fp, #4
1259c     A7 14 62 FC | 	wrlong	arg02, fp
125a0     04 4E 05 F1 | 	add	fp, #4
125a4     A7 1A 62 FC | 	wrlong	arg05, fp
125a8     14 4E 85 F1 | 	sub	fp, #20
125ac     D8 AF BF FD | 	call	#_pop
125b0     FF 16 02 F6 | 	mov	arg03, result3
125b4     A7 FA 61 FC | 	wrlong	result1, fp
125b8     04 4E 05 F1 | 	add	fp, #4
125bc     A7 FC 61 FC | 	wrlong	result2, fp
125c0     04 4E 05 F1 | 	add	fp, #4
125c4     A7 16 62 FC | 	wrlong	arg03, fp
125c8     08 4E 85 F1 | 	sub	fp, #8
125cc     A7 12 02 F6 | 	mov	arg01, fp
125d0     98 B1 BF FD | 	call	#_converttoint
125d4     FD 26 02 F6 | 	mov	local01, result1
125d8     0C 4E 05 F1 | 	add	fp, #12
125dc     A7 12 02 F6 | 	mov	arg01, fp
125e0     0C 4E 85 F1 | 	sub	fp, #12
125e4     84 B1 BF FD | 	call	#_converttoint
125e8     FD 28 02 F6 | 	mov	local02, result1
125ec     18 4E 05 F1 | 	add	fp, #24
125f0     A7 12 02 F6 | 	mov	arg01, fp
125f4     18 4E 85 F1 | 	sub	fp, #24
125f8     70 B1 BF FD | 	call	#_converttoint
125fc     FD 2A 02 F6 | 	mov	local03, result1
12600     24 4E 05 F1 | 	add	fp, #36
12604     A7 12 02 F6 | 	mov	arg01, fp
12608     24 4E 85 F1 | 	sub	fp, #36
1260c     5C B1 BF FD | 	call	#_converttoint
12610     FD 18 02 F6 | 	mov	arg04, result1
12614     37 00 00 FF 
12618     28 E4 05 F1 | 	add	objptr, ##28200
1261c     F2 1A 02 FB | 	rdlong	arg05, objptr
12620     37 00 00 FF 
12624     28 E4 85 F1 | 	sub	objptr, ##28200
12628     13 13 02 F6 | 	mov	arg01, local01
1262c     14 15 02 F6 | 	mov	arg02, local02
12630     15 17 02 F6 | 	mov	arg03, local03
12634     14 23 B1 FD | 	call	#_hg010b_spin2_frame
12638     A7 F0 03 F6 | 	mov	ptra, fp
1263c     B2 00 A0 FD | 	call	#popregs_
12640                 | _do_frame_ret
12640     2D 00 64 FD | 	ret
12644                 | 
12644                 | ' 
12644                 | ' '-------------------- framebuf
12644                 | ' 
12644                 | ' sub do_framebuf
12644                 | _do_framebuf
12644     00 4A 05 F6 | 	mov	COUNT_, #0
12648     A8 00 A0 FD | 	call	#pushregs_
1264c     0C F0 07 F1 | 	add	ptra, #12
12650     08 4E 05 F1 | 	add	fp, #8
12654     A7 3A 68 FC | 	wrlong	#29, fp
12658     F2 12 02 FB | 	rdlong	arg01, objptr
1265c     08 4E 85 F1 | 	sub	fp, #8
12660     A7 12 62 FC | 	wrlong	arg01, fp
12664     A7 12 02 F6 | 	mov	arg01, fp
12668     B4 AF BF FD | 	call	#_push
1266c     A7 F0 03 F6 | 	mov	ptra, fp
12670     B2 00 A0 FD | 	call	#popregs_
12674                 | _do_framebuf_ret
12674     2D 00 64 FD | 	ret
12678                 | 
12678                 | ' '-------------------- fre
12678                 | ' 
12678                 | ' sub do_fre
12678                 | _do_fre
12678     01 4A 05 F6 | 	mov	COUNT_, #1
1267c     A8 00 A0 FD | 	call	#pushregs_
12680     0C F0 07 F1 | 	add	ptra, #12
12684     52 00 00 FF 
12688     98 E4 05 F1 | 	add	objptr, ##42136
1268c     F2 12 02 FB | 	rdlong	arg01, objptr
12690     0F 00 00 FF 
12694     3C E4 85 F1 | 	sub	objptr, ##7740
12698     F2 26 02 FB | 	rdlong	local01, objptr
1269c     13 13 82 F1 | 	sub	arg01, local01
126a0     0F 00 00 FF 
126a4     B4 E4 05 F1 | 	add	objptr, ##7860
126a8     F2 12 62 FC | 	wrlong	arg01, objptr
126ac     08 4E 05 F1 | 	add	fp, #8
126b0     A7 3A 68 FC | 	wrlong	#29, fp
126b4     08 4E 85 F1 | 	sub	fp, #8
126b8     F2 26 02 FB | 	rdlong	local01, objptr
126bc     52 00 00 FF 
126c0     10 E5 85 F1 | 	sub	objptr, ##42256
126c4     A7 26 62 FC | 	wrlong	local01, fp
126c8     A7 12 02 F6 | 	mov	arg01, fp
126cc     50 AF BF FD | 	call	#_push
126d0     A7 F0 03 F6 | 	mov	ptra, fp
126d4     B2 00 A0 FD | 	call	#popregs_
126d8                 | _do_fre_ret
126d8     2D 00 64 FD | 	ret
126dc                 | 
126dc                 | ' 
126dc                 | ' '-------------------- get
126dc                 | ' 
126dc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
126dc                 | _do_get
126dc     09 4A 05 F6 | 	mov	COUNT_, #9
126e0     A8 00 A0 FD | 	call	#pushregs_
126e4     40 F0 07 F1 | 	add	ptra, #64
126e8     4A 00 00 FF 
126ec     80 E4 05 F1 | 	add	objptr, ##38016
126f0     F2 1A 02 FB | 	rdlong	arg05, objptr
126f4     0D 19 02 F6 | 	mov	arg04, arg05
126f8     01 18 66 F0 | 	shl	arg04, #1
126fc     0D 19 02 F1 | 	add	arg04, arg05
12700     02 18 66 F0 | 	shl	arg04, #2
12704     03 00 00 FF 
12708     04 E4 85 F1 | 	sub	objptr, ##1540
1270c     F2 18 02 F1 | 	add	arg04, objptr
12710     0C 1B 02 FB | 	rdlong	arg05, arg04
12714     A7 1A 62 FC | 	wrlong	arg05, fp
12718                 | ' 
12718                 | ' numpar=compiledline(lineptr_e).result.uresult
12718                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
12718     04 1A 0E F2 | 	cmp	arg05, #4 wz
1271c     47 00 00 FF 
12720     7C E4 85 F1 | 	sub	objptr, ##36476
12724     48 00 90 5D |  if_ne	jmp	#LR__1470
12728     5C AE BF FD | 	call	#_pop
1272c     FF 1A 02 F6 | 	mov	arg05, result3
12730     1C 4E 05 F1 | 	add	fp, #28
12734     A7 FA 61 FC | 	wrlong	result1, fp
12738     04 4E 05 F1 | 	add	fp, #4
1273c     A7 FC 61 FC | 	wrlong	result2, fp
12740     04 4E 05 F1 | 	add	fp, #4
12744     A7 1A 62 FC | 	wrlong	arg05, fp
12748     08 4E 85 F1 | 	sub	fp, #8
1274c     A7 12 02 F6 | 	mov	arg01, fp
12750     1C 4E 85 F1 | 	sub	fp, #28
12754     14 B0 BF FD | 	call	#_converttoint
12758     52 00 00 FF 
1275c     0C E5 05 F1 | 	add	objptr, ##42252
12760     F2 FA 61 FC | 	wrlong	result1, objptr
12764     52 00 00 FF 
12768     0C E5 85 F1 | 	sub	objptr, ##42252
1276c     18 00 90 FD | 	jmp	#LR__1471
12770                 | LR__1470
12770     52 00 00 FF 
12774     0C E5 05 F1 | 	add	objptr, ##42252
12778     FF FF FF FF 
1277c     F2 FE 6B FC | 	wrlong	##-1, objptr
12780     52 00 00 FF 
12784     0C E5 85 F1 | 	sub	objptr, ##42252
12788                 | LR__1471
12788                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
12788     A7 16 02 FB | 	rdlong	arg03, fp
1278c     03 16 56 F2 | 	cmps	arg03, #3 wc
12790     40 00 90 CD |  if_b	jmp	#LR__1472
12794     F0 AD BF FD | 	call	#_pop
12798     FF 16 02 F6 | 	mov	arg03, result3
1279c     1C 4E 05 F1 | 	add	fp, #28
127a0     A7 FA 61 FC | 	wrlong	result1, fp
127a4     04 4E 05 F1 | 	add	fp, #4
127a8     A7 FC 61 FC | 	wrlong	result2, fp
127ac     04 4E 05 F1 | 	add	fp, #4
127b0     A7 16 62 FC | 	wrlong	arg03, fp
127b4     08 4E 85 F1 | 	sub	fp, #8
127b8     A7 12 02 F6 | 	mov	arg01, fp
127bc     1C 4E 85 F1 | 	sub	fp, #28
127c0     A8 AF BF FD | 	call	#_converttoint
127c4     08 4E 05 F1 | 	add	fp, #8
127c8     A7 FA 61 FC | 	wrlong	result1, fp
127cc     08 4E 85 F1 | 	sub	fp, #8
127d0     0C 00 90 FD | 	jmp	#LR__1473
127d4                 | LR__1472
127d4     08 4E 05 F1 | 	add	fp, #8
127d8     A7 02 68 FC | 	wrlong	#1, fp
127dc     08 4E 85 F1 | 	sub	fp, #8
127e0                 | LR__1473
127e0                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
127e0     A7 16 02 FB | 	rdlong	arg03, fp
127e4     02 16 56 F2 | 	cmps	arg03, #2 wc
127e8     3C 00 90 CD |  if_b	jmp	#LR__1474
127ec     98 AD BF FD | 	call	#_pop
127f0     FF 16 02 F6 | 	mov	arg03, result3
127f4     1C 4E 05 F1 | 	add	fp, #28
127f8     A7 FA 61 FC | 	wrlong	result1, fp
127fc     04 4E 05 F1 | 	add	fp, #4
12800     A7 FC 61 FC | 	wrlong	result2, fp
12804     04 4E 05 F1 | 	add	fp, #4
12808     A7 16 62 FC | 	wrlong	arg03, fp
1280c     08 4E 85 F1 | 	sub	fp, #8
12810     A7 12 02 F6 | 	mov	arg01, fp
12814     1C 4E 85 F1 | 	sub	fp, #28
12818     50 AF BF FD | 	call	#_converttoint
1281c     0C 4E 05 F1 | 	add	fp, #12
12820     A7 FA 61 FC | 	wrlong	result1, fp
12824     0C 4E 85 F1 | 	sub	fp, #12
12828                 | LR__1474
12828     5C AD BF FD | 	call	#_pop
1282c     FF 16 02 F6 | 	mov	arg03, result3
12830     1C 4E 05 F1 | 	add	fp, #28
12834     A7 FA 61 FC | 	wrlong	result1, fp
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 FC 61 FC | 	wrlong	result2, fp
12840     04 4E 05 F1 | 	add	fp, #4
12844     A7 16 62 FC | 	wrlong	arg03, fp
12848     08 4E 85 F1 | 	sub	fp, #8
1284c     A7 12 02 F6 | 	mov	arg01, fp
12850     1C 4E 85 F1 | 	sub	fp, #28
12854     14 AF BF FD | 	call	#_converttoint
12858     04 4E 05 F1 | 	add	fp, #4
1285c     A7 FA 61 FC | 	wrlong	result1, fp
12860     10 4E 05 F1 | 	add	fp, #16
12864     A7 16 02 FB | 	rdlong	arg03, fp
12868     14 4E 85 F1 | 	sub	fp, #20
1286c     02 16 66 F0 | 	shl	arg03, #2
12870     50 00 00 FF 
12874     C4 E4 05 F1 | 	add	objptr, ##41156
12878     F2 26 02 F6 | 	mov	local01, objptr
1287c     F2 16 02 F1 | 	add	arg03, objptr
12880     0B 01 68 FC | 	wrlong	#0, arg03
12884                 | ' t1=pop() : channel=converttoint(t1)
12884                 | ' getres(j)=0
12884                 | ' if pos>=0 then
12884     02 00 00 FF 
12888     48 E4 05 F1 | 	add	objptr, ##1096
1288c     F2 28 02 FB | 	rdlong	local02, objptr
12890     52 00 00 FF 
12894     0C E5 85 F1 | 	sub	objptr, ##42252
12898     00 28 56 F2 | 	cmps	local02, #0 wc
1289c     F0 01 90 CD |  if_b	jmp	#LR__1481
128a0                 | '   for i=0 to  amount/1024
128a0     10 4E 05 F1 | 	add	fp, #16
128a4     A7 00 68 FC | 	wrlong	#0, fp
128a8     08 4E 85 F1 | 	sub	fp, #8
128ac     A7 2A 02 FB | 	rdlong	local03, fp
128b0     08 4E 85 F1 | 	sub	fp, #8
128b4     15 2D 52 F6 | 	abs	local04, local03 wc
128b8     0A 2C 46 F0 | 	shr	local04, #10
128bc     16 2D 82 F6 | 	negc	local04, local04
128c0     01 2C 06 F1 | 	add	local04, #1
128c4                 | LR__1475
128c4     10 4E 05 F1 | 	add	fp, #16
128c8     A7 2A 02 FB | 	rdlong	local03, fp
128cc     10 4E 85 F1 | 	sub	fp, #16
128d0     16 2B 52 F2 | 	cmps	local03, local04 wc
128d4     9C 03 90 3D |  if_ae	jmp	#LR__1489
128d8                 | '     get #channel,pos+1,block(0),amount,r
128d8     04 4E 05 F1 | 	add	fp, #4
128dc     A7 12 02 FB | 	rdlong	arg01, fp
128e0     52 00 00 FF 
128e4     0C E5 05 F1 | 	add	objptr, ##42252
128e8     F2 14 02 FB | 	rdlong	arg02, objptr
128ec     01 14 06 F1 | 	add	arg02, #1
128f0     04 00 00 FF 
128f4     58 E4 85 F1 | 	sub	objptr, ##2136
128f8     F2 16 02 F6 | 	mov	arg03, objptr
128fc     4E 00 00 FF 
12900     B4 E4 85 F1 | 	sub	objptr, ##40116
12904     04 4E 05 F1 | 	add	fp, #4
12908     A7 18 02 FB | 	rdlong	arg04, fp
1290c     08 4E 85 F1 | 	sub	fp, #8
12910     01 1A 06 F6 | 	mov	arg05, #1
12914     74 4E B1 FD | 	call	#__system___basic_get
12918     18 4E 05 F1 | 	add	fp, #24
1291c     A7 FA 61 FC | 	wrlong	result1, fp
12920                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12920     0C 4E 85 F1 | 	sub	fp, #12
12924     A7 28 02 FB | 	rdlong	local02, fp
12928     0C 4E 85 F1 | 	sub	fp, #12
1292c     00 04 00 FF 
12930     00 28 56 F2 | 	cmps	local02, ##524288 wc
12934     7C 00 90 3D |  if_ae	jmp	#LR__1477
12938     14 4E 05 F1 | 	add	fp, #20
1293c     A7 00 68 FC | 	wrlong	#0, fp
12940     04 4E 05 F1 | 	add	fp, #4
12944     A7 2E 02 FB | 	rdlong	local05, fp
12948     18 4E 85 F1 | 	sub	fp, #24
1294c                 | LR__1476
1294c     14 4E 05 F1 | 	add	fp, #20
12950     A7 28 02 FB | 	rdlong	local02, fp
12954     14 4E 85 F1 | 	sub	fp, #20
12958     17 29 52 F2 | 	cmps	local02, local05 wc
1295c     D8 00 90 3D |  if_ae	jmp	#LR__1480
12960     0C 4E 05 F1 | 	add	fp, #12
12964     A7 12 02 FB | 	rdlong	arg01, fp
12968     04 4E 05 F1 | 	add	fp, #4
1296c     A7 2A 02 FB | 	rdlong	local03, fp
12970     0A 2A 66 F0 | 	shl	local03, #10
12974     15 13 02 F1 | 	add	arg01, local03
12978     04 4E 05 F1 | 	add	fp, #4
1297c     A7 2A 02 FB | 	rdlong	local03, fp
12980     15 13 02 F1 | 	add	arg01, local03
12984     4E 00 00 FF 
12988     B4 E4 05 F1 | 	add	objptr, ##40116
1298c     F2 2A 02 F1 | 	add	local03, objptr
12990     15 15 C2 FA | 	rdbyte	arg02, local03
12994     09 15 42 FC | 	wrbyte	arg02, arg01
12998     4E 00 00 FF 
1299c     B4 E4 85 F1 | 	sub	objptr, ##40116
129a0     A7 2A 02 FB | 	rdlong	local03, fp
129a4     01 2A 06 F1 | 	add	local03, #1
129a8     A7 2A 62 FC | 	wrlong	local03, fp
129ac     14 4E 85 F1 | 	sub	fp, #20
129b0     98 FF 9F FD | 	jmp	#LR__1476
129b4                 | LR__1477
129b4     14 4E 05 F1 | 	add	fp, #20
129b8     A7 00 68 FC | 	wrlong	#0, fp
129bc     04 4E 05 F1 | 	add	fp, #4
129c0     A7 30 02 FB | 	rdlong	local06, fp
129c4     18 4E 85 F1 | 	sub	fp, #24
129c8                 | LR__1478
129c8     14 4E 05 F1 | 	add	fp, #20
129cc     A7 28 02 FB | 	rdlong	local02, fp
129d0     14 4E 85 F1 | 	sub	fp, #20
129d4     18 29 52 F2 | 	cmps	local02, local06 wc
129d8     5C 00 90 3D |  if_ae	jmp	#LR__1479
129dc     0C 4E 05 F1 | 	add	fp, #12
129e0     A7 12 02 FB | 	rdlong	arg01, fp
129e4     04 4E 05 F1 | 	add	fp, #4
129e8     A7 2E 02 FB | 	rdlong	local05, fp
129ec     0A 2E 66 F0 | 	shl	local05, #10
129f0     17 13 02 F1 | 	add	arg01, local05
129f4     04 4E 05 F1 | 	add	fp, #4
129f8     A7 2E 02 FB | 	rdlong	local05, fp
129fc     17 13 02 F1 | 	add	arg01, local05
12a00     14 4E 85 F1 | 	sub	fp, #20
12a04     4E 00 00 FF 
12a08     B4 E4 05 F1 | 	add	objptr, ##40116
12a0c     F2 2E 02 F1 | 	add	local05, objptr
12a10     17 15 C2 FA | 	rdbyte	arg02, local05
12a14     4E 00 00 FF 
12a18     B4 E4 85 F1 | 	sub	objptr, ##40116
12a1c     38 07 B1 FD | 	call	#_pspoke
12a20     14 4E 05 F1 | 	add	fp, #20
12a24     A7 2E 02 FB | 	rdlong	local05, fp
12a28     01 2E 06 F1 | 	add	local05, #1
12a2c     A7 2E 62 FC | 	wrlong	local05, fp
12a30     14 4E 85 F1 | 	sub	fp, #20
12a34     90 FF 9F FD | 	jmp	#LR__1478
12a38                 | LR__1479
12a38                 | LR__1480
12a38     14 4E 05 F1 | 	add	fp, #20
12a3c     A7 30 02 FB | 	rdlong	local06, fp
12a40     18 2B 02 F6 | 	mov	local03, local06
12a44     02 2A 66 F0 | 	shl	local03, #2
12a48     50 00 00 FF 
12a4c     C4 E4 05 F1 | 	add	objptr, ##41156
12a50     F2 2A 02 F1 | 	add	local03, objptr
12a54     02 30 66 F0 | 	shl	local06, #2
12a58     F2 30 02 F1 | 	add	local06, objptr
12a5c     18 31 02 FB | 	rdlong	local06, local06
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 2E 02 FB | 	rdlong	local05, fp
12a68     17 31 02 F1 | 	add	local06, local05
12a6c     15 31 62 FC | 	wrlong	local06, local03
12a70     08 4E 85 F1 | 	sub	fp, #8
12a74     A7 30 02 FB | 	rdlong	local06, fp
12a78     01 30 06 F1 | 	add	local06, #1
12a7c     A7 30 62 FC | 	wrlong	local06, fp
12a80     10 4E 85 F1 | 	sub	fp, #16
12a84     50 00 00 FF 
12a88     C4 E4 85 F1 | 	sub	objptr, ##41156
12a8c     34 FE 9F FD | 	jmp	#LR__1475
12a90                 | LR__1481
12a90                 | '   for i=0 to  amount/1024
12a90     10 4E 05 F1 | 	add	fp, #16
12a94     A7 00 68 FC | 	wrlong	#0, fp
12a98     08 4E 85 F1 | 	sub	fp, #8
12a9c     A7 2A 02 FB | 	rdlong	local03, fp
12aa0     08 4E 85 F1 | 	sub	fp, #8
12aa4     15 33 52 F6 | 	abs	local07, local03 wc
12aa8     0A 32 46 F0 | 	shr	local07, #10
12aac     19 33 82 F6 | 	negc	local07, local07
12ab0     01 32 06 F1 | 	add	local07, #1
12ab4                 | LR__1482
12ab4     10 4E 05 F1 | 	add	fp, #16
12ab8     A7 2A 02 FB | 	rdlong	local03, fp
12abc     10 4E 85 F1 | 	sub	fp, #16
12ac0     19 2B 52 F2 | 	cmps	local03, local07 wc
12ac4     AC 01 90 3D |  if_ae	jmp	#LR__1488
12ac8                 | '     get #channel,,block(0),amount,r
12ac8     04 4E 05 F1 | 	add	fp, #4
12acc     A7 12 02 FB | 	rdlong	arg01, fp
12ad0     4E 00 00 FF 
12ad4     B4 E4 05 F1 | 	add	objptr, ##40116
12ad8     F2 16 02 F6 | 	mov	arg03, objptr
12adc     4E 00 00 FF 
12ae0     B4 E4 85 F1 | 	sub	objptr, ##40116
12ae4     04 4E 05 F1 | 	add	fp, #4
12ae8     A7 18 02 FB | 	rdlong	arg04, fp
12aec     08 4E 85 F1 | 	sub	fp, #8
12af0     00 14 06 F6 | 	mov	arg02, #0
12af4     01 1A 06 F6 | 	mov	arg05, #1
12af8     90 4C B1 FD | 	call	#__system___basic_get
12afc     18 4E 05 F1 | 	add	fp, #24
12b00     A7 FA 61 FC | 	wrlong	result1, fp
12b04                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
12b04     0C 4E 85 F1 | 	sub	fp, #12
12b08     A7 28 02 FB | 	rdlong	local02, fp
12b0c     0C 4E 85 F1 | 	sub	fp, #12
12b10     00 04 00 FF 
12b14     00 28 56 F2 | 	cmps	local02, ##524288 wc
12b18     7C 00 90 3D |  if_ae	jmp	#LR__1484
12b1c     14 4E 05 F1 | 	add	fp, #20
12b20     A7 00 68 FC | 	wrlong	#0, fp
12b24     04 4E 05 F1 | 	add	fp, #4
12b28     A7 34 02 FB | 	rdlong	local08, fp
12b2c     18 4E 85 F1 | 	sub	fp, #24
12b30                 | LR__1483
12b30     14 4E 05 F1 | 	add	fp, #20
12b34     A7 28 02 FB | 	rdlong	local02, fp
12b38     14 4E 85 F1 | 	sub	fp, #20
12b3c     1A 29 52 F2 | 	cmps	local02, local08 wc
12b40     D8 00 90 3D |  if_ae	jmp	#LR__1487
12b44     0C 4E 05 F1 | 	add	fp, #12
12b48     A7 12 02 FB | 	rdlong	arg01, fp
12b4c     04 4E 05 F1 | 	add	fp, #4
12b50     A7 30 02 FB | 	rdlong	local06, fp
12b54     0A 30 66 F0 | 	shl	local06, #10
12b58     18 13 02 F1 | 	add	arg01, local06
12b5c     04 4E 05 F1 | 	add	fp, #4
12b60     A7 30 02 FB | 	rdlong	local06, fp
12b64     18 13 02 F1 | 	add	arg01, local06
12b68     4E 00 00 FF 
12b6c     B4 E4 05 F1 | 	add	objptr, ##40116
12b70     F2 30 02 F1 | 	add	local06, objptr
12b74     18 15 C2 FA | 	rdbyte	arg02, local06
12b78     09 15 42 FC | 	wrbyte	arg02, arg01
12b7c     4E 00 00 FF 
12b80     B4 E4 85 F1 | 	sub	objptr, ##40116
12b84     A7 30 02 FB | 	rdlong	local06, fp
12b88     01 30 06 F1 | 	add	local06, #1
12b8c     A7 30 62 FC | 	wrlong	local06, fp
12b90     14 4E 85 F1 | 	sub	fp, #20
12b94     98 FF 9F FD | 	jmp	#LR__1483
12b98                 | LR__1484
12b98     14 4E 05 F1 | 	add	fp, #20
12b9c     A7 00 68 FC | 	wrlong	#0, fp
12ba0     04 4E 05 F1 | 	add	fp, #4
12ba4     A7 36 02 FB | 	rdlong	local09, fp
12ba8     18 4E 85 F1 | 	sub	fp, #24
12bac                 | LR__1485
12bac     14 4E 05 F1 | 	add	fp, #20
12bb0     A7 28 02 FB | 	rdlong	local02, fp
12bb4     14 4E 85 F1 | 	sub	fp, #20
12bb8     1B 29 52 F2 | 	cmps	local02, local09 wc
12bbc     5C 00 90 3D |  if_ae	jmp	#LR__1486
12bc0     0C 4E 05 F1 | 	add	fp, #12
12bc4     A7 12 02 FB | 	rdlong	arg01, fp
12bc8     04 4E 05 F1 | 	add	fp, #4
12bcc     A7 34 02 FB | 	rdlong	local08, fp
12bd0     0A 34 66 F0 | 	shl	local08, #10
12bd4     1A 13 02 F1 | 	add	arg01, local08
12bd8     04 4E 05 F1 | 	add	fp, #4
12bdc     A7 34 02 FB | 	rdlong	local08, fp
12be0     1A 13 02 F1 | 	add	arg01, local08
12be4     14 4E 85 F1 | 	sub	fp, #20
12be8     4E 00 00 FF 
12bec     B4 E4 05 F1 | 	add	objptr, ##40116
12bf0     F2 34 02 F1 | 	add	local08, objptr
12bf4     1A 15 C2 FA | 	rdbyte	arg02, local08
12bf8     4E 00 00 FF 
12bfc     B4 E4 85 F1 | 	sub	objptr, ##40116
12c00     54 05 B1 FD | 	call	#_pspoke
12c04     14 4E 05 F1 | 	add	fp, #20
12c08     A7 34 02 FB | 	rdlong	local08, fp
12c0c     01 34 06 F1 | 	add	local08, #1
12c10     A7 34 62 FC | 	wrlong	local08, fp
12c14     14 4E 85 F1 | 	sub	fp, #20
12c18     90 FF 9F FD | 	jmp	#LR__1485
12c1c                 | LR__1486
12c1c                 | LR__1487
12c1c     14 4E 05 F1 | 	add	fp, #20
12c20     A7 36 02 FB | 	rdlong	local09, fp
12c24     1B 31 02 F6 | 	mov	local06, local09
12c28     02 30 66 F0 | 	shl	local06, #2
12c2c     50 00 00 FF 
12c30     C4 E4 05 F1 | 	add	objptr, ##41156
12c34     F2 30 02 F1 | 	add	local06, objptr
12c38     02 36 66 F0 | 	shl	local09, #2
12c3c     F2 36 02 F1 | 	add	local09, objptr
12c40     1B 37 02 FB | 	rdlong	local09, local09
12c44     04 4E 05 F1 | 	add	fp, #4
12c48     A7 34 02 FB | 	rdlong	local08, fp
12c4c     1A 37 02 F1 | 	add	local09, local08
12c50     18 37 62 FC | 	wrlong	local09, local06
12c54     08 4E 85 F1 | 	sub	fp, #8
12c58     A7 36 02 FB | 	rdlong	local09, fp
12c5c     01 36 06 F1 | 	add	local09, #1
12c60     A7 36 62 FC | 	wrlong	local09, fp
12c64     10 4E 85 F1 | 	sub	fp, #16
12c68     50 00 00 FF 
12c6c     C4 E4 85 F1 | 	sub	objptr, ##41156
12c70     40 FE 9F FD | 	jmp	#LR__1482
12c74                 | LR__1488
12c74                 | LR__1489
12c74     A7 F0 03 F6 | 	mov	ptra, fp
12c78     B2 00 A0 FD | 	call	#popregs_
12c7c                 | _do_get_ret
12c7c     2D 00 64 FD | 	ret
12c80                 | 
12c80                 | ' 
12c80                 | ' '-------------------- getenvsustain
12c80                 | ' 
12c80                 | ' sub do_getenvsustain
12c80                 | _do_getenvsustain
12c80     01 4A 05 F6 | 	mov	COUNT_, #1
12c84     A8 00 A0 FD | 	call	#pushregs_
12c88     10 F0 07 F1 | 	add	ptra, #16
12c8c     4A 00 00 FF 
12c90     80 E4 05 F1 | 	add	objptr, ##38016
12c94     F2 26 02 FB | 	rdlong	local01, objptr
12c98     13 17 02 F6 | 	mov	arg03, local01
12c9c     01 16 66 F0 | 	shl	arg03, #1
12ca0     13 17 02 F1 | 	add	arg03, local01
12ca4     02 16 66 F0 | 	shl	arg03, #2
12ca8     03 00 00 FF 
12cac     04 E4 85 F1 | 	sub	objptr, ##1540
12cb0     F2 16 02 F1 | 	add	arg03, objptr
12cb4     0B 17 02 FB | 	rdlong	arg03, arg03
12cb8     0C 4E 05 F1 | 	add	fp, #12
12cbc     A7 16 62 FC | 	wrlong	arg03, fp
12cc0                 | ' 
12cc0                 | ' numpar=compiledline(lineptr_e).result.uresult
12cc0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
12cc0     0C 4E 85 F1 | 	sub	fp, #12
12cc4     02 16 16 F2 | 	cmp	arg03, #2 wc
12cc8     47 00 00 FF 
12ccc     7C E4 85 F1 | 	sub	objptr, ##36476
12cd0     0C 4E 05 C1 |  if_b	add	fp, #12
12cd4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
12cd8     0C 4E 85 C1 |  if_b	sub	fp, #12
12cdc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
12ce0     00 12 06 F6 | 	mov	arg01, #0
12ce4     D4 98 B1 FD | 	call	#__system___getiolock_0603
12ce8     FD 12 02 F6 | 	mov	arg01, result1
12cec     28 3C B1 FD | 	call	#__system___lockmem
12cf0     B6 01 00 FF 
12cf4     FF 15 06 F6 | 	mov	arg02, ##@LR__5899
12cf8     00 12 06 F6 | 	mov	arg01, #0
12cfc     00 16 06 F6 | 	mov	arg03, #0
12d00     0C 49 B1 FD | 	call	#__system___basic_print_string
12d04     00 12 06 F6 | 	mov	arg01, #0
12d08     B0 98 B1 FD | 	call	#__system___getiolock_0603
12d0c     FD 00 68 FC | 	wrlong	#0, result1
12d10     27 12 06 F6 | 	mov	arg01, #39
12d14     00 14 06 F6 | 	mov	arg02, #0
12d18     0C 02 B1 FD | 	call	#_printerror
12d1c     64 00 90 FD | 	jmp	#LR__1491
12d20                 | LR__1490
12d20     64 A8 BF FD | 	call	#_pop
12d24     FD 26 02 F6 | 	mov	local01, result1
12d28     FE 16 02 F6 | 	mov	arg03, result2
12d2c     A7 26 62 FC | 	wrlong	local01, fp
12d30     04 4E 05 F1 | 	add	fp, #4
12d34     A7 16 62 FC | 	wrlong	arg03, fp
12d38     04 4E 05 F1 | 	add	fp, #4
12d3c     A7 FE 61 FC | 	wrlong	result3, fp
12d40     08 4E 85 F1 | 	sub	fp, #8
12d44     A7 12 02 F6 | 	mov	arg01, fp
12d48     20 AA BF FD | 	call	#_converttoint
12d4c     FD 26 02 F6 | 	mov	local01, result1
12d50     01 26 66 F0 | 	shl	local01, #1
12d54     52 00 00 FF 
12d58     B4 E4 05 F1 | 	add	objptr, ##42164
12d5c     F2 26 02 F1 | 	add	local01, objptr
12d60     13 27 E2 FA | 	rdword	local01, local01
12d64     A7 26 62 FC | 	wrlong	local01, fp
12d68     08 4E 05 F1 | 	add	fp, #8
12d6c     A7 38 68 FC | 	wrlong	#28, fp
12d70     08 4E 85 F1 | 	sub	fp, #8
12d74     A7 12 02 F6 | 	mov	arg01, fp
12d78     52 00 00 FF 
12d7c     B4 E4 85 F1 | 	sub	objptr, ##42164
12d80     9C A8 BF FD | 	call	#_push
12d84                 | LR__1491
12d84     A7 F0 03 F6 | 	mov	ptra, fp
12d88     B2 00 A0 FD | 	call	#popregs_
12d8c                 | _do_getenvsustain_ret
12d8c     2D 00 64 FD | 	ret
12d90                 | 
12d90                 | ' 
12d90                 | ' '-------------------- getnotevalue
12d90                 | ' 
12d90                 | ' sub do_getnotevalue
12d90                 | _do_getnotevalue
12d90     01 4A 05 F6 | 	mov	COUNT_, #1
12d94     A8 00 A0 FD | 	call	#pushregs_
12d98     1C F0 07 F1 | 	add	ptra, #28
12d9c     E8 A7 BF FD | 	call	#_pop
12da0     FF 14 02 F6 | 	mov	arg02, result3
12da4     10 4E 05 F1 | 	add	fp, #16
12da8     A7 FA 61 FC | 	wrlong	result1, fp
12dac     04 4E 05 F1 | 	add	fp, #4
12db0     A7 FC 61 FC | 	wrlong	result2, fp
12db4     04 4E 05 F1 | 	add	fp, #4
12db8     A7 14 62 FC | 	wrlong	arg02, fp
12dbc     08 4E 85 F1 | 	sub	fp, #8
12dc0     A7 12 02 F6 | 	mov	arg01, fp
12dc4     10 4E 85 F1 | 	sub	fp, #16
12dc8     A0 A9 BF FD | 	call	#_converttoint
12dcc     FD 14 52 F6 | 	abs	arg02, result1 wc
12dd0     0C 14 16 FD | 	qdiv	arg02, #12
12dd4     0C 4E 05 F1 | 	add	fp, #12
12dd8     A7 FA 61 FC | 	wrlong	result1, fp
12ddc     14 00 00 FF 
12de0     D8 E4 05 F1 | 	add	objptr, ##10456
12de4     08 4E 85 F1 | 	sub	fp, #8
12de8     19 14 62 FD | 	getqy	arg02
12dec     0A 15 82 F6 | 	negc	arg02, arg02
12df0     02 14 66 F0 | 	shl	arg02, #2
12df4     F2 14 02 F1 | 	add	arg02, objptr
12df8     0A 15 02 FB | 	rdlong	arg02, arg02
12dfc     A7 14 62 FC | 	wrlong	arg02, fp
12e00     08 4E 05 F1 | 	add	fp, #8
12e04     A7 14 02 FB | 	rdlong	arg02, fp
12e08     0A 15 52 F6 | 	abs	arg02, arg02 wc
12e0c     0C 14 16 FD | 	qdiv	arg02, #12
12e10     0C 4E 85 F1 | 	sub	fp, #12
12e14     14 00 00 FF 
12e18     D8 E4 85 F1 | 	sub	objptr, ##10456
12e1c     18 14 62 FD | 	getqx	arg02
12e20     0A 13 82 F6 | 	negc	arg01, arg02
12e24     09 13 52 F6 | 	abs	arg01, arg01 wc
12e28     1F 26 C6 C9 |  if_b	decod	local01, #31
12e2c     00 26 06 36 |  if_ae	mov	local01, #0
12e30     5C 65 B1 FD | 	call	#__system___float_fromuns
12e34     13 FB 61 F5 | 	xor	result1, local01
12e38     08 4E 05 F1 | 	add	fp, #8
12e3c     A7 FA 61 FC | 	wrlong	result1, fp
12e40     FD 14 02 F6 | 	mov	arg02, result1
12e44     08 4E 85 F1 | 	sub	fp, #8
12e48     1E 12 C6 F9 | 	decod	arg01, #30
12e4c     4C 78 B1 FD | 	call	#__system____builtin_powf
12e50     FD 12 02 F6 | 	mov	arg01, result1
12e54     04 4E 05 F1 | 	add	fp, #4
12e58     A7 14 02 FB | 	rdlong	arg02, fp
12e5c     04 4E 85 F1 | 	sub	fp, #4
12e60     30 69 B1 FD | 	call	#__system___float_mul
12e64     A7 FA 61 FC | 	wrlong	result1, fp
12e68     10 4E 05 F1 | 	add	fp, #16
12e6c     A7 FA 61 FC | 	wrlong	result1, fp
12e70     08 4E 05 F1 | 	add	fp, #8
12e74     A7 3C 68 FC | 	wrlong	#30, fp
12e78     08 4E 85 F1 | 	sub	fp, #8
12e7c     A7 12 02 F6 | 	mov	arg01, fp
12e80     10 4E 85 F1 | 	sub	fp, #16
12e84     98 A7 BF FD | 	call	#_push
12e88     A7 F0 03 F6 | 	mov	ptra, fp
12e8c     B2 00 A0 FD | 	call	#popregs_
12e90                 | _do_getnotevalue_ret
12e90     2D 00 64 FD | 	ret
12e94                 | 
12e94                 | ' 
12e94                 | ' '-------------------- getpixel
12e94                 | ' 
12e94                 | ' sub do_getpixel
12e94                 | _do_getpixel
12e94     00 4A 05 F6 | 	mov	COUNT_, #0
12e98     A8 00 A0 FD | 	call	#pushregs_
12e9c     24 F0 07 F1 | 	add	ptra, #36
12ea0     4A 00 00 FF 
12ea4     80 E4 05 F1 | 	add	objptr, ##38016
12ea8     F2 16 02 FB | 	rdlong	arg03, objptr
12eac     0B 15 02 F6 | 	mov	arg02, arg03
12eb0     01 14 66 F0 | 	shl	arg02, #1
12eb4     0B 15 02 F1 | 	add	arg02, arg03
12eb8     02 14 66 F0 | 	shl	arg02, #2
12ebc     03 00 00 FF 
12ec0     04 E4 85 F1 | 	sub	objptr, ##1540
12ec4     F2 14 02 F1 | 	add	arg02, objptr
12ec8     0A 17 02 FB | 	rdlong	arg03, arg02
12ecc     18 4E 05 F1 | 	add	fp, #24
12ed0     A7 16 62 FC | 	wrlong	arg03, fp
12ed4                 | ' 
12ed4                 | ' numpar=compiledline(lineptr_e).result.uresult
12ed4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
12ed4     18 4E 85 F1 | 	sub	fp, #24
12ed8     02 16 0E F2 | 	cmp	arg03, #2 wz
12edc     47 00 00 FF 
12ee0     7C E4 85 F1 | 	sub	objptr, ##36476
12ee4     40 00 90 AD |  if_e	jmp	#LR__1500
12ee8     00 12 06 F6 | 	mov	arg01, #0
12eec     CC 96 B1 FD | 	call	#__system___getiolock_0603
12ef0     FD 12 02 F6 | 	mov	arg01, result1
12ef4     20 3A B1 FD | 	call	#__system___lockmem
12ef8     B7 01 00 FF 
12efc     0F 14 06 F6 | 	mov	arg02, ##@LR__5900
12f00     00 12 06 F6 | 	mov	arg01, #0
12f04     00 16 06 F6 | 	mov	arg03, #0
12f08     04 47 B1 FD | 	call	#__system___basic_print_string
12f0c     00 12 06 F6 | 	mov	arg01, #0
12f10     A8 96 B1 FD | 	call	#__system___getiolock_0603
12f14     FD 00 68 FC | 	wrlong	#0, result1
12f18     27 12 06 F6 | 	mov	arg01, #39
12f1c     00 14 06 F6 | 	mov	arg02, #0
12f20     04 00 B1 FD | 	call	#_printerror
12f24     B4 00 90 FD | 	jmp	#LR__1501
12f28                 | LR__1500
12f28     5C A6 BF FD | 	call	#_pop
12f2c     FD 16 02 F6 | 	mov	arg03, result1
12f30     FE 14 02 F6 | 	mov	arg02, result2
12f34     FF 12 02 F6 | 	mov	arg01, result3
12f38     0C 4E 05 F1 | 	add	fp, #12
12f3c     A7 16 62 FC | 	wrlong	arg03, fp
12f40     04 4E 05 F1 | 	add	fp, #4
12f44     A7 14 62 FC | 	wrlong	arg02, fp
12f48     04 4E 05 F1 | 	add	fp, #4
12f4c     A7 12 62 FC | 	wrlong	arg01, fp
12f50     14 4E 85 F1 | 	sub	fp, #20
12f54     30 A6 BF FD | 	call	#_pop
12f58     FF 16 02 F6 | 	mov	arg03, result3
12f5c     A7 FA 61 FC | 	wrlong	result1, fp
12f60     04 4E 05 F1 | 	add	fp, #4
12f64     A7 FC 61 FC | 	wrlong	result2, fp
12f68     04 4E 05 F1 | 	add	fp, #4
12f6c     A7 16 62 FC | 	wrlong	arg03, fp
12f70     08 4E 85 F1 | 	sub	fp, #8
12f74     A7 12 02 F6 | 	mov	arg01, fp
12f78     F0 A7 BF FD | 	call	#_converttoint
12f7c     1C 4E 05 F1 | 	add	fp, #28
12f80     A7 FA 61 FC | 	wrlong	result1, fp
12f84     10 4E 85 F1 | 	sub	fp, #16
12f88     A7 12 02 F6 | 	mov	arg01, fp
12f8c     0C 4E 85 F1 | 	sub	fp, #12
12f90     D8 A7 BF FD | 	call	#_converttoint
12f94     FD 16 02 F6 | 	mov	arg03, result1
12f98     20 4E 05 F1 | 	add	fp, #32
12f9c     A7 16 62 FC | 	wrlong	arg03, fp
12fa0     F2 12 02 FB | 	rdlong	arg01, objptr
12fa4     04 4E 85 F1 | 	sub	fp, #4
12fa8     A7 FE 01 FB | 	rdlong	result3, fp
12fac     FF 12 02 F1 | 	add	arg01, result3
12fb0     1C 4E 85 F1 | 	sub	fp, #28
12fb4     0A 16 66 F0 | 	shl	arg03, #10
12fb8     0B 13 02 F1 | 	add	arg01, arg03
12fbc     E0 01 B1 FD | 	call	#_pspeek
12fc0     FD FA E1 F8 | 	getbyte	result1, result1, #0
12fc4     A7 FA 61 FC | 	wrlong	result1, fp
12fc8     08 4E 05 F1 | 	add	fp, #8
12fcc     A7 3A 68 FC | 	wrlong	#29, fp
12fd0     08 4E 85 F1 | 	sub	fp, #8
12fd4     A7 12 02 F6 | 	mov	arg01, fp
12fd8     44 A6 BF FD | 	call	#_push
12fdc                 | LR__1501
12fdc     A7 F0 03 F6 | 	mov	ptra, fp
12fe0     B2 00 A0 FD | 	call	#popregs_
12fe4                 | _do_getpixel_ret
12fe4     2D 00 64 FD | 	ret
12fe8                 | 
12fe8                 | ' 
12fe8                 | ' '-------------------- gettime
12fe8                 | ' 
12fe8                 | ' sub do_gettime
12fe8                 | _do_gettime
12fe8     02 4A 05 F6 | 	mov	COUNT_, #2
12fec     A8 00 A0 FD | 	call	#pushregs_
12ff0     14 F0 07 F1 | 	add	ptra, #20
12ff4                 | ' 
12ff4                 | ' const asm 
12ff4     1A 26 72 FD | 	getct	local01 wc
12ff8     1A 28 62 FD | 	getct	local02
12ffc                 | ' return hi1, lo1
12ffc     14 FD 01 F6 | 	mov	result2, local02
13000     A7 26 62 FC | 	wrlong	local01, fp
13004     04 4E 05 F1 | 	add	fp, #4
13008     A7 FC 61 FC | 	wrlong	result2, fp
1300c     0C 4E 05 F1 | 	add	fp, #12
13010     A7 3A 68 FC | 	wrlong	#29, fp
13014     0C 4E 85 F1 | 	sub	fp, #12
13018     A7 12 02 FB | 	rdlong	arg01, fp
1301c     04 4E 05 F1 | 	add	fp, #4
13020     A7 12 62 FC | 	wrlong	arg01, fp
13024     08 4E 85 F1 | 	sub	fp, #8
13028     A7 12 02 FB | 	rdlong	arg01, fp
1302c     0C 4E 05 F1 | 	add	fp, #12
13030     A7 12 62 FC | 	wrlong	arg01, fp
13034     04 4E 85 F1 | 	sub	fp, #4
13038     A7 12 02 F6 | 	mov	arg01, fp
1303c     08 4E 85 F1 | 	sub	fp, #8
13040     DC A5 BF FD | 	call	#_push
13044     A7 F0 03 F6 | 	mov	ptra, fp
13048     B2 00 A0 FD | 	call	#popregs_
1304c                 | _do_gettime_ret
1304c     2D 00 64 FD | 	ret
13050                 | 
13050                 | ' 
13050                 | ' '-------------------- gosub
13050                 | ' 
13050                 | ' sub do_gosub()
13050                 | _do_gosub
13050     50 00 00 FF 
13054     34 E5 05 F1 | 	add	objptr, ##41268
13058     F2 00 02 FB | 	rdlong	_var01, objptr
1305c     01 00 06 F1 | 	add	_var01, #1
13060     F2 00 62 FC | 	wrlong	_var01, objptr
13064                 | ' gosubtop+=1
13064                 | ' if compiledline(lineptr_e+1).result_type=token_end then
13064     06 00 00 FF 
13068     B4 E4 85 F1 | 	sub	objptr, ##3252
1306c     F2 00 02 FB | 	rdlong	_var01, objptr
13070     01 00 06 F1 | 	add	_var01, #1
13074     00 03 02 F6 | 	mov	_var02, _var01
13078     01 02 66 F0 | 	shl	_var02, #1
1307c     00 03 02 F1 | 	add	_var02, _var01
13080     02 02 66 F0 | 	shl	_var02, #2
13084     03 00 00 FF 
13088     04 E4 85 F1 | 	sub	objptr, ##1540
1308c     F2 02 02 F1 | 	add	_var02, objptr
13090     08 02 06 F1 | 	add	_var02, #8
13094     01 03 02 FB | 	rdlong	_var02, _var02
13098     FE 03 0E F2 | 	cmp	_var02, #510 wz
1309c     47 00 00 FF 
130a0     7C E4 85 F1 | 	sub	objptr, ##36476
130a4     58 00 90 5D |  if_ne	jmp	#LR__1510
130a8     50 00 00 FF 
130ac     34 E5 05 F1 | 	add	objptr, ##41268
130b0     F2 02 02 FB | 	rdlong	_var02, objptr
130b4     03 02 66 F0 | 	shl	_var02, #3
130b8     03 00 00 FF 
130bc     88 E5 85 F1 | 	sub	objptr, ##1928
130c0     F2 02 02 F1 | 	add	_var02, objptr
130c4     03 00 00 FF 
130c8     0C E5 05 F1 | 	add	objptr, ##1804
130cc     F2 00 02 FB | 	rdlong	_var01, objptr
130d0     01 01 62 FC | 	wrlong	_var01, _var02
130d4     7C E4 05 F1 | 	add	objptr, #124
130d8     F2 02 02 FB | 	rdlong	_var02, objptr
130dc     03 02 66 F0 | 	shl	_var02, #3
130e0     03 00 00 FF 
130e4     88 E5 85 F1 | 	sub	objptr, ##1928
130e8     F2 02 02 F1 | 	add	_var02, objptr
130ec     04 02 06 F1 | 	add	_var02, #4
130f0     01 01 68 FC | 	wrlong	#0, _var02
130f4     4C 00 00 FF 
130f8     AC E5 85 F1 | 	sub	objptr, ##39340
130fc     64 00 90 FD | 	jmp	#LR__1511
13100                 | LR__1510
13100     50 00 00 FF 
13104     34 E5 05 F1 | 	add	objptr, ##41268
13108     F2 02 02 FB | 	rdlong	_var02, objptr
1310c     03 02 66 F0 | 	shl	_var02, #3
13110     03 00 00 FF 
13114     88 E5 85 F1 | 	sub	objptr, ##1928
13118     F2 02 02 F1 | 	add	_var02, objptr
1311c     03 00 00 FF 
13120     14 E5 05 F1 | 	add	objptr, ##1812
13124     F2 00 02 FB | 	rdlong	_var01, objptr
13128     01 01 62 FC | 	wrlong	_var01, _var02
1312c     74 E4 05 F1 | 	add	objptr, #116
13130     F2 02 02 FB | 	rdlong	_var02, objptr
13134     03 02 66 F0 | 	shl	_var02, #3
13138     03 00 00 FF 
1313c     88 E5 85 F1 | 	sub	objptr, ##1928
13140     F2 02 02 F1 | 	add	_var02, objptr
13144     02 00 00 FF 
13148     2C E5 85 F1 | 	sub	objptr, ##1324
1314c     F2 00 02 FB | 	rdlong	_var01, objptr
13150     4A 00 00 FF 
13154     80 E4 85 F1 | 	sub	objptr, ##38016
13158     02 00 06 F1 | 	add	_var01, #2
1315c     04 02 06 F1 | 	add	_var02, #4
13160     01 01 62 FC | 	wrlong	_var01, _var02
13164                 | LR__1511
13164                 | _do_gosub_ret
13164     2D 00 64 FD | 	ret
13168                 | 
13168                 | ' 
13168                 | ' '--------------------- goto
13168                 | ' 
13168                 | ' '------- fast goto
13168                 | ' 
13168                 | ' sub do_fast_goto
13168                 | _do_fast_goto
13168     02 4A 05 F6 | 	mov	COUNT_, #2
1316c     A8 00 A0 FD | 	call	#pushregs_
13170                 | _do_fast_goto_enter
13170     4A 00 00 FF 
13174     80 E4 05 F1 | 	add	objptr, ##38016
13178     F2 12 02 FB | 	rdlong	arg01, objptr
1317c     09 27 02 F6 | 	mov	local01, arg01
13180     01 26 66 F0 | 	shl	local01, #1
13184     09 27 02 F1 | 	add	local01, arg01
13188     02 26 66 F0 | 	shl	local01, #2
1318c     03 00 00 FF 
13190     04 E4 85 F1 | 	sub	objptr, ##1540
13194     F2 26 02 F1 | 	add	local01, objptr
13198     13 29 02 FB | 	rdlong	local02, local01
1319c     14 13 02 F6 | 	mov	arg01, local02
131a0     47 00 00 FF 
131a4     7C E4 85 F1 | 	sub	objptr, ##36476
131a8     4C 00 B1 FD | 	call	#_pslpeek
131ac     FD 12 02 F6 | 	mov	arg01, result1
131b0                 | ' 
131b0                 | ' testptr=compiledline(lineptr_e).result.uresult
131b0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
131b0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
131b0     4A 00 00 FF 
131b4     80 E4 05 F1 | 	add	objptr, ##38016
131b8     F2 FA 01 FB | 	rdlong	result1, objptr
131bc     FD 26 02 F6 | 	mov	local01, result1
131c0     01 26 66 F0 | 	shl	local01, #1
131c4     FD 26 02 F1 | 	add	local01, result1
131c8     02 26 66 F0 | 	shl	local01, #2
131cc     03 00 00 FF 
131d0     04 E4 85 F1 | 	sub	objptr, ##1540
131d4     F2 26 02 F1 | 	add	local01, objptr
131d8     04 26 06 F1 | 	add	local01, #4
131dc     13 27 02 FB | 	rdlong	local01, local01
131e0     13 13 0A F2 | 	cmp	arg01, local01 wz
131e4     47 00 00 FF 
131e8     7C E4 85 F1 | 	sub	objptr, ##36476
131ec     58 00 90 5D |  if_ne	jmp	#LR__1520
131f0     50 00 00 FF 
131f4     B8 E4 05 F1 | 	add	objptr, ##41144
131f8     F2 28 62 FC | 	wrlong	local02, objptr
131fc     06 00 00 FF 
13200     3C E4 85 F1 | 	sub	objptr, ##3132
13204     F2 28 02 FB | 	rdlong	local02, objptr
13208     01 28 86 F1 | 	sub	local02, #1
1320c     04 E4 05 F1 | 	add	objptr, #4
13210     F2 28 62 FC | 	wrlong	local02, objptr
13214                 | '   runptr=testptr
13214                 | '   lineptr_e=lineptr-1
13214                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
13214     06 00 00 FF 
13218     84 E4 05 F1 | 	add	objptr, ##3204
1321c     F2 28 02 FB | 	rdlong	local02, objptr
13220     50 00 00 FF 
13224     04 E5 85 F1 | 	sub	objptr, ##41220
13228     FF FF 3F FF 
1322c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13230     50 00 00 AF 
13234     04 E5 05 A1 |  if_e	add	objptr, ##41220
13238     F2 00 68 AC |  if_e	wrlong	#0, objptr
1323c     50 00 00 AF 
13240     04 E5 85 A1 |  if_e	sub	objptr, ##41220
13244     04 00 90 FD | 	jmp	#LR__1521
13248                 | LR__1520
13248     0C 00 B0 FD | 	call	#_do_find_goto
1324c                 | LR__1521
1324c     A7 F0 03 F6 | 	mov	ptra, fp
13250     B2 00 A0 FD | 	call	#popregs_
13254                 | _do_fast_goto_ret
13254     2D 00 64 FD | 	ret
13258                 | 
13258                 | ' 
13258                 | ' '------- find goto  
13258                 | ' 
13258                 | ' sub do_find_goto
13258                 | _do_find_goto
13258     03 4A 05 F6 | 	mov	COUNT_, #3
1325c     A8 00 A0 FD | 	call	#pushregs_
13260     24 F0 07 F1 | 	add	ptra, #36
13264                 | _do_find_goto_enter
13264     4A 00 00 FF 
13268     80 E4 05 F1 | 	add	objptr, ##38016
1326c     F2 26 02 FB | 	rdlong	local01, objptr
13270     13 29 02 F6 | 	mov	local02, local01
13274     01 28 66 F0 | 	shl	local02, #1
13278     13 29 02 F1 | 	add	local02, local01
1327c     02 28 66 F0 | 	shl	local02, #2
13280     03 00 00 FF 
13284     04 E4 85 F1 | 	sub	objptr, ##1540
13288     F2 28 02 F1 | 	add	local02, objptr
1328c     04 28 06 F1 | 	add	local02, #4
13290     14 29 02 FB | 	rdlong	local02, local02
13294     A7 28 62 FC | 	wrlong	local02, fp
13298     03 00 00 FF 
1329c     0C E4 05 F1 | 	add	objptr, ##1548
132a0     F2 2A 02 FB | 	rdlong	local03, objptr
132a4     4A 00 00 FF 
132a8     88 E4 85 F1 | 	sub	objptr, ##38024
132ac     04 4E 05 F1 | 	add	fp, #4
132b0     A7 2A 62 FC | 	wrlong	local03, fp
132b4     04 4E 85 F1 | 	sub	fp, #4
132b8                 | ' 
132b8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
132b8                 | ' gotoptr=programstart
132b8                 | ' do
132b8                 | LR__1530
132b8     0C 4E 05 F1 | 	add	fp, #12
132bc     A7 12 02 F6 | 	mov	arg01, fp
132c0     08 4E 85 F1 | 	sub	fp, #8
132c4     A7 14 02 FB | 	rdlong	arg02, fp
132c8     04 4E 85 F1 | 	sub	fp, #4
132cc     18 16 06 F6 | 	mov	arg03, #24
132d0     0B 00 00 FF 
132d4     CC E4 05 F1 | 	add	objptr, ##5836
132d8     B4 29 B1 FD | 	call	#_psram_spin2_read1
132dc     0B 00 00 FF 
132e0     CC E4 85 F1 | 	sub	objptr, ##5836
132e4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
132e4                 | '   if gotoheader(0)<>$FFFFFFFF then
132e4     0C 4E 05 F1 | 	add	fp, #12
132e8     A7 2A 02 FB | 	rdlong	local03, fp
132ec     0C 4E 85 F1 | 	sub	fp, #12
132f0     FF FF 7F FF 
132f4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
132f8     24 00 90 AD |  if_e	jmp	#LR__1531
132fc     04 4E 05 F1 | 	add	fp, #4
13300     A7 2A 02 FB | 	rdlong	local03, fp
13304     04 4E 05 F1 | 	add	fp, #4
13308     A7 2A 62 FC | 	wrlong	local03, fp
1330c     18 4E 05 F1 | 	add	fp, #24
13310     A7 2A 02 FB | 	rdlong	local03, fp
13314     1C 4E 85 F1 | 	sub	fp, #28
13318     A7 2A 62 FC | 	wrlong	local03, fp
1331c     04 4E 85 F1 | 	sub	fp, #4
13320                 | LR__1531
13320     20 4E 05 F1 | 	add	fp, #32
13324     A7 2A 02 FB | 	rdlong	local03, fp
13328     20 4E 85 F1 | 	sub	fp, #32
1332c     FF FF 3F FF 
13330     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
13334     0C 4E 05 51 |  if_ne	add	fp, #12
13338     A7 26 02 5B |  if_ne	rdlong	local01, fp
1333c     0C 4E 85 51 |  if_ne	sub	fp, #12
13340     FF FF 7F 5F 
13344     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
13348     18 00 90 AD |  if_e	jmp	#LR__1532
1334c     0C 4E 05 F1 | 	add	fp, #12
13350     A7 2A 02 FB | 	rdlong	local03, fp
13354     0C 4E 85 F1 | 	sub	fp, #12
13358     A7 28 02 FB | 	rdlong	local02, fp
1335c     14 2B 0A F2 | 	cmp	local03, local02 wz
13360     54 FF 9F 5D |  if_ne	jmp	#LR__1530
13364                 | LR__1532
13364                 | ' 
13364                 | ' if gotoheader(0)=gotoline then
13364     0C 4E 05 F1 | 	add	fp, #12
13368     A7 2A 02 FB | 	rdlong	local03, fp
1336c     0C 4E 85 F1 | 	sub	fp, #12
13370     A7 26 02 FB | 	rdlong	local01, fp
13374     13 2B 0A F2 | 	cmp	local03, local01 wz
13378     D8 00 90 5D |  if_ne	jmp	#LR__1533
1337c     4A 00 00 FF 
13380     80 E4 05 F1 | 	add	objptr, ##38016
13384     F2 26 02 FB | 	rdlong	local01, objptr
13388     13 29 02 F6 | 	mov	local02, local01
1338c     01 28 66 F0 | 	shl	local02, #1
13390     13 29 02 F1 | 	add	local02, local01
13394     02 28 66 F0 | 	shl	local02, #2
13398     03 00 00 FF 
1339c     04 E4 85 F1 | 	sub	objptr, ##1540
133a0     F2 28 02 F1 | 	add	local02, objptr
133a4     08 4E 05 F1 | 	add	fp, #8
133a8     A7 2A 02 FB | 	rdlong	local03, fp
133ac     14 2B 62 FC | 	wrlong	local03, local02
133b0     03 00 00 FF 
133b4     04 E4 05 F1 | 	add	objptr, ##1540
133b8     F2 26 02 FB | 	rdlong	local01, objptr
133bc     13 29 02 F6 | 	mov	local02, local01
133c0     01 28 66 F0 | 	shl	local02, #1
133c4     13 29 02 F1 | 	add	local02, local01
133c8     02 28 66 F0 | 	shl	local02, #2
133cc     03 00 00 FF 
133d0     04 E4 85 F1 | 	sub	objptr, ##1540
133d4     F2 28 02 F1 | 	add	local02, objptr
133d8     08 28 06 F1 | 	add	local02, #8
133dc     14 9D 68 FC | 	wrlong	#78, local02
133e0     03 00 00 FF 
133e4     04 E4 05 F1 | 	add	objptr, ##1540
133e8     F2 28 02 FB | 	rdlong	local02, objptr
133ec     14 13 02 F6 | 	mov	arg01, local02
133f0     01 12 66 F0 | 	shl	arg01, #1
133f4     14 13 02 F1 | 	add	arg01, local02
133f8     02 12 66 F0 | 	shl	arg01, #2
133fc     03 00 00 FF 
13400     04 E4 85 F1 | 	sub	objptr, ##1540
13404     F2 12 02 F1 | 	add	arg01, objptr
13408     09 00 00 FF 
1340c     44 E4 05 F1 | 	add	objptr, ##4676
13410     F2 14 02 FB | 	rdlong	arg02, objptr
13414     02 2A 06 F6 | 	mov	local03, #2
13418     14 2B 02 F1 | 	add	local03, local02
1341c     0B 00 00 FF 
13420     5C E4 85 F1 | 	sub	objptr, ##5724
13424     F2 16 02 FB | 	rdlong	arg03, objptr
13428     0B 2B 02 FD | 	qmul	local03, arg03
1342c     08 4E 85 F1 | 	sub	fp, #8
13430     39 00 00 FF 
13434     98 E5 85 F1 | 	sub	objptr, ##29592
13438     18 2A 62 FD | 	getqx	local03
1343c     15 15 02 F1 | 	add	arg02, local03
13440     E8 28 B1 FD | 	call	#_psram_spin2_write
13444     0B 00 00 FF 
13448     CC E4 85 F1 | 	sub	objptr, ##5836
1344c     18 FD BF FD | 	call	#_do_fast_goto
13450     0C 00 90 FD | 	jmp	#LR__1534
13454                 | LR__1533
13454     26 12 06 F6 | 	mov	arg01, #38
13458     00 14 06 F6 | 	mov	arg02, #0
1345c     C8 FA B0 FD | 	call	#_printerror
13460                 | LR__1534
13460     A7 F0 03 F6 | 	mov	ptra, fp
13464     B2 00 A0 FD | 	call	#popregs_
13468                 | _do_find_goto_ret
13468     2D 00 64 FD | 	ret
1346c                 | 
1346c                 | ' 
1346c                 | ' '------- slow goto  
1346c                 | ' 
1346c                 | ' sub do_slow_goto
1346c                 | _do_slow_goto
1346c     02 4A 05 F6 | 	mov	COUNT_, #2
13470     A8 00 A0 FD | 	call	#pushregs_
13474     30 F0 07 F1 | 	add	ptra, #48
13478     0C A1 BF FD | 	call	#_pop
1347c     FF 26 02 F6 | 	mov	local01, result3
13480     24 4E 05 F1 | 	add	fp, #36
13484     A7 FA 61 FC | 	wrlong	result1, fp
13488     04 4E 05 F1 | 	add	fp, #4
1348c     A7 FC 61 FC | 	wrlong	result2, fp
13490     04 4E 05 F1 | 	add	fp, #4
13494     A7 26 62 FC | 	wrlong	local01, fp
13498     08 4E 85 F1 | 	sub	fp, #8
1349c     A7 12 02 F6 | 	mov	arg01, fp
134a0     24 4E 85 F1 | 	sub	fp, #36
134a4     C4 A2 BF FD | 	call	#_converttoint
134a8     A7 FA 61 FC | 	wrlong	result1, fp
134ac     4A 00 00 FF 
134b0     88 E4 05 F1 | 	add	objptr, ##38024
134b4     F2 28 02 FB | 	rdlong	local02, objptr
134b8     4A 00 00 FF 
134bc     88 E4 85 F1 | 	sub	objptr, ##38024
134c0     04 4E 05 F1 | 	add	fp, #4
134c4     A7 28 62 FC | 	wrlong	local02, fp
134c8     04 4E 85 F1 | 	sub	fp, #4
134cc                 | ' 
134cc                 | ' t1=pop() : gotoline=converttoint(t1)
134cc                 | ' gotoptr=programstart
134cc                 | ' do
134cc                 | LR__1540
134cc     0C 4E 05 F1 | 	add	fp, #12
134d0     A7 12 02 F6 | 	mov	arg01, fp
134d4     08 4E 85 F1 | 	sub	fp, #8
134d8     A7 14 02 FB | 	rdlong	arg02, fp
134dc     04 4E 85 F1 | 	sub	fp, #4
134e0     18 16 06 F6 | 	mov	arg03, #24
134e4     0B 00 00 FF 
134e8     CC E4 05 F1 | 	add	objptr, ##5836
134ec     A0 27 B1 FD | 	call	#_psram_spin2_read1
134f0     0B 00 00 FF 
134f4     CC E4 85 F1 | 	sub	objptr, ##5836
134f8                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
134f8                 | '   if gotoheader(0)<>$FFFFFFFF then
134f8     0C 4E 05 F1 | 	add	fp, #12
134fc     A7 28 02 FB | 	rdlong	local02, fp
13500     0C 4E 85 F1 | 	sub	fp, #12
13504     FF FF 7F FF 
13508     FF 29 0E F2 | 	cmp	local02, ##-1 wz
1350c     24 00 90 AD |  if_e	jmp	#LR__1541
13510     04 4E 05 F1 | 	add	fp, #4
13514     A7 28 02 FB | 	rdlong	local02, fp
13518     04 4E 05 F1 | 	add	fp, #4
1351c     A7 28 62 FC | 	wrlong	local02, fp
13520     18 4E 05 F1 | 	add	fp, #24
13524     A7 28 02 FB | 	rdlong	local02, fp
13528     1C 4E 85 F1 | 	sub	fp, #28
1352c     A7 28 62 FC | 	wrlong	local02, fp
13530     04 4E 85 F1 | 	sub	fp, #4
13534                 | LR__1541
13534     20 4E 05 F1 | 	add	fp, #32
13538     A7 28 02 FB | 	rdlong	local02, fp
1353c     20 4E 85 F1 | 	sub	fp, #32
13540     FF FF 3F FF 
13544     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
13548     0C 4E 05 51 |  if_ne	add	fp, #12
1354c     A7 26 02 5B |  if_ne	rdlong	local01, fp
13550     0C 4E 85 51 |  if_ne	sub	fp, #12
13554     FF FF 7F 5F 
13558     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
1355c     18 00 90 AD |  if_e	jmp	#LR__1542
13560     0C 4E 05 F1 | 	add	fp, #12
13564     A7 28 02 FB | 	rdlong	local02, fp
13568     0C 4E 85 F1 | 	sub	fp, #12
1356c     A7 16 02 FB | 	rdlong	arg03, fp
13570     0B 29 0A F2 | 	cmp	local02, arg03 wz
13574     54 FF 9F 5D |  if_ne	jmp	#LR__1540
13578                 | LR__1542
13578                 | ' if gotoheader(0)=gotoline then  
13578     0C 4E 05 F1 | 	add	fp, #12
1357c     A7 28 02 FB | 	rdlong	local02, fp
13580     0C 4E 85 F1 | 	sub	fp, #12
13584     A7 26 02 FB | 	rdlong	local01, fp
13588     13 29 0A F2 | 	cmp	local02, local01 wz
1358c     60 00 90 5D |  if_ne	jmp	#LR__1543
13590     08 4E 05 F1 | 	add	fp, #8
13594     A7 28 02 FB | 	rdlong	local02, fp
13598     08 4E 85 F1 | 	sub	fp, #8
1359c     50 00 00 FF 
135a0     B8 E4 05 F1 | 	add	objptr, ##41144
135a4     F2 28 62 FC | 	wrlong	local02, objptr
135a8     06 00 00 FF 
135ac     3C E4 85 F1 | 	sub	objptr, ##3132
135b0     F2 28 02 FB | 	rdlong	local02, objptr
135b4     01 28 86 F1 | 	sub	local02, #1
135b8     04 E4 05 F1 | 	add	objptr, #4
135bc     F2 28 62 FC | 	wrlong	local02, objptr
135c0                 | '    runptr=oldgotoptr
135c0                 | '    lineptr_e=lineptr-1
135c0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
135c0     06 00 00 FF 
135c4     84 E4 05 F1 | 	add	objptr, ##3204
135c8     F2 28 02 FB | 	rdlong	local02, objptr
135cc     50 00 00 FF 
135d0     04 E5 85 F1 | 	sub	objptr, ##41220
135d4     FF FF 3F FF 
135d8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
135dc     50 00 00 AF 
135e0     04 E5 05 A1 |  if_e	add	objptr, ##41220
135e4     F2 00 68 AC |  if_e	wrlong	#0, objptr
135e8     50 00 00 AF 
135ec     04 E5 85 A1 |  if_e	sub	objptr, ##41220
135f0                 | LR__1543
135f0     A7 F0 03 F6 | 	mov	ptra, fp
135f4     B2 00 A0 FD | 	call	#popregs_
135f8                 | _do_slow_goto_ret
135f8     2D 00 64 FD | 	ret
135fc                 | 
135fc                 | ' 
135fc                 | ' ' ----------------  hex$
135fc                 | ' 
135fc                 | ' sub do_hex
135fc                 | _do_hex
135fc     01 4A 05 F6 | 	mov	COUNT_, #1
13600     A8 00 A0 FD | 	call	#pushregs_
13604     18 F0 07 F1 | 	add	ptra, #24
13608     4A 00 00 FF 
1360c     80 E4 05 F1 | 	add	objptr, ##38016
13610     F2 26 02 FB | 	rdlong	local01, objptr
13614     13 17 02 F6 | 	mov	arg03, local01
13618     01 16 66 F0 | 	shl	arg03, #1
1361c     13 17 02 F1 | 	add	arg03, local01
13620     02 16 66 F0 | 	shl	arg03, #2
13624     03 00 00 FF 
13628     04 E4 85 F1 | 	sub	objptr, ##1540
1362c     F2 16 02 F1 | 	add	arg03, objptr
13630     0B 17 02 FB | 	rdlong	arg03, arg03
13634     0C 4E 05 F1 | 	add	fp, #12
13638     A7 16 62 FC | 	wrlong	arg03, fp
1363c                 | ' 
1363c                 | ' numpar=compiledline(lineptr_e).result.uresult
1363c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
1363c     0C 4E 85 F1 | 	sub	fp, #12
13640     03 16 16 F2 | 	cmp	arg03, #3 wc
13644     47 00 00 FF 
13648     7C E4 85 F1 | 	sub	objptr, ##36476
1364c     0C 4E 05 C1 |  if_b	add	fp, #12
13650     A7 26 0A CB |  if_b	rdlong	local01, fp wz
13654     0C 4E 85 C1 |  if_b	sub	fp, #12
13658     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
1365c     00 12 06 F6 | 	mov	arg01, #0
13660     58 8F B1 FD | 	call	#__system___getiolock_0603
13664     FD 12 02 F6 | 	mov	arg01, result1
13668     AC 32 B1 FD | 	call	#__system___lockmem
1366c     B7 01 00 FF 
13670     1A 14 06 F6 | 	mov	arg02, ##@LR__5901
13674     00 12 06 F6 | 	mov	arg01, #0
13678     00 16 06 F6 | 	mov	arg03, #0
1367c     90 3F B1 FD | 	call	#__system___basic_print_string
13680     00 12 06 F6 | 	mov	arg01, #0
13684     34 8F B1 FD | 	call	#__system___getiolock_0603
13688     FD 00 68 FC | 	wrlong	#0, result1
1368c     27 12 06 F6 | 	mov	arg01, #39
13690     00 14 06 F6 | 	mov	arg02, #0
13694     90 F8 B0 FD | 	call	#_printerror
13698     B8 00 90 FD | 	jmp	#LR__1553
1369c                 | LR__1550
1369c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
1369c     0C 4E 05 F1 | 	add	fp, #12
136a0     A7 26 02 FB | 	rdlong	local01, fp
136a4     0C 4E 85 F1 | 	sub	fp, #12
136a8     02 26 0E F2 | 	cmp	local01, #2 wz
136ac     38 00 90 5D |  if_ne	jmp	#LR__1551
136b0     D4 9E BF FD | 	call	#_pop
136b4     FF 26 02 F6 | 	mov	local01, result3
136b8     A7 FA 61 FC | 	wrlong	result1, fp
136bc     04 4E 05 F1 | 	add	fp, #4
136c0     A7 FC 61 FC | 	wrlong	result2, fp
136c4     04 4E 05 F1 | 	add	fp, #4
136c8     A7 26 62 FC | 	wrlong	local01, fp
136cc     08 4E 85 F1 | 	sub	fp, #8
136d0     A7 12 02 F6 | 	mov	arg01, fp
136d4     94 A0 BF FD | 	call	#_converttoint
136d8     14 4E 05 F1 | 	add	fp, #20
136dc     A7 FA 61 FC | 	wrlong	result1, fp
136e0     14 4E 85 F1 | 	sub	fp, #20
136e4     0C 00 90 FD | 	jmp	#LR__1552
136e8                 | LR__1551
136e8     14 4E 05 F1 | 	add	fp, #20
136ec     A7 10 68 FC | 	wrlong	#8, fp
136f0     14 4E 85 F1 | 	sub	fp, #20
136f4                 | LR__1552
136f4     90 9E BF FD | 	call	#_pop
136f8     FF 26 02 F6 | 	mov	local01, result3
136fc     A7 FA 61 FC | 	wrlong	result1, fp
13700     04 4E 05 F1 | 	add	fp, #4
13704     A7 FC 61 FC | 	wrlong	result2, fp
13708     04 4E 05 F1 | 	add	fp, #4
1370c     A7 26 62 FC | 	wrlong	local01, fp
13710     08 4E 85 F1 | 	sub	fp, #8
13714     A7 12 02 F6 | 	mov	arg01, fp
13718     50 A0 BF FD | 	call	#_converttoint
1371c     10 4E 05 F1 | 	add	fp, #16
13720     A7 FA 61 FC | 	wrlong	result1, fp
13724     FD 12 02 F6 | 	mov	arg01, result1
13728     04 4E 05 F1 | 	add	fp, #4
1372c     A7 14 02 FB | 	rdlong	arg02, fp
13730     14 4E 85 F1 | 	sub	fp, #20
13734     10 16 06 F6 | 	mov	arg03, #16
13738     B0 54 B1 FD | 	call	#__system__Number_S
1373c     A7 FA 61 FC | 	wrlong	result1, fp
13740     08 4E 05 F1 | 	add	fp, #8
13744     A7 3E 68 FC | 	wrlong	#31, fp
13748     08 4E 85 F1 | 	sub	fp, #8
1374c     A7 12 02 F6 | 	mov	arg01, fp
13750     CC 9E BF FD | 	call	#_push
13754                 | LR__1553
13754     A7 F0 03 F6 | 	mov	ptra, fp
13758     B2 00 A0 FD | 	call	#popregs_
1375c                 | _do_hex_ret
1375c     2D 00 64 FD | 	ret
13760                 | 
13760                 | ' 
13760                 | ' ' ----------------  if
13760                 | ' 
13760                 | ' sub do_if
13760                 | _do_if
13760     05 4A 05 F6 | 	mov	COUNT_, #5
13764     A8 00 A0 FD | 	call	#pushregs_
13768     1C 9E BF FD | 	call	#_pop
1376c     FD 26 0A F6 | 	mov	local01, result1 wz
13770     FE 28 02 F6 | 	mov	local02, result2
13774     FF 2A 02 F6 | 	mov	local03, result3
13778                 | ' t1=pop()
13778                 | ' ' if uresult=0, jump over else
13778                 | ' if t1.result.uresult = 0 then 
13778     BC 00 90 5D |  if_ne	jmp	#LR__1562
1377c                 | '   for i=lineptr_e to lineptr-1
1377c     4A 00 00 FF 
13780     80 E4 05 F1 | 	add	objptr, ##38016
13784     F2 2C 02 FB | 	rdlong	local04, objptr
13788     04 E4 85 F1 | 	sub	objptr, #4
1378c     F2 2E 02 FB | 	rdlong	local05, objptr
13790     4A 00 00 FF 
13794     7C E4 85 F1 | 	sub	objptr, ##38012
13798                 | LR__1560
13798     17 2D 52 F2 | 	cmps	local04, local05 wc
1379c     78 00 90 3D |  if_ae	jmp	#LR__1561
137a0     16 FF 01 F6 | 	mov	result3, local04
137a4     01 FE 65 F0 | 	shl	result3, #1
137a8     16 FF 01 F1 | 	add	result3, local04
137ac     02 FE 65 F0 | 	shl	result3, #2
137b0     47 00 00 FF 
137b4     7C E4 05 F1 | 	add	objptr, ##36476
137b8     F2 FE 01 F1 | 	add	result3, objptr
137bc     FF 26 02 FB | 	rdlong	local01, result3
137c0     04 FE 05 F1 | 	add	result3, #4
137c4     FF FC 01 FB | 	rdlong	result2, result3
137c8     16 FF 01 F6 | 	mov	result3, local04
137cc     01 FE 65 F0 | 	shl	result3, #1
137d0     16 FF 01 F1 | 	add	result3, local04
137d4     02 FE 65 F0 | 	shl	result3, #2
137d8     F2 FE 01 F1 | 	add	result3, objptr
137dc     08 FE 05 F1 | 	add	result3, #8
137e0     FF FE 01 FB | 	rdlong	result3, result3
137e4     FE 28 02 F6 | 	mov	local02, result2
137e8     FF 2A 02 F6 | 	mov	local03, result3
137ec                 | '     t1=compiledline(i)
137ec                 | '     if t1.result_type=token_else then lineptr_e=i : return
137ec     5A 2A 0E F2 | 	cmp	local03, #90 wz
137f0     47 00 00 FF 
137f4     7C E4 85 F1 | 	sub	objptr, ##36476
137f8     4A 00 00 AF 
137fc     80 E4 05 A1 |  if_e	add	objptr, ##38016
13800     F2 2C 62 AC |  if_e	wrlong	local04, objptr
13804     4A 00 00 AF 
13808     80 E4 85 A1 |  if_e	sub	objptr, ##38016
1380c     28 00 90 AD |  if_e	jmp	#LR__1563
13810     01 2C 06 F1 | 	add	local04, #1
13814     80 FF 9F FD | 	jmp	#LR__1560
13818                 | LR__1561
13818     4A 00 00 FF 
1381c     7C E4 05 F1 | 	add	objptr, ##38012
13820     F2 2E 02 FB | 	rdlong	local05, objptr
13824     01 2E 86 F1 | 	sub	local05, #1
13828     04 E4 05 F1 | 	add	objptr, #4
1382c     F2 2E 62 FC | 	wrlong	local05, objptr
13830     4A 00 00 FF 
13834     80 E4 85 F1 | 	sub	objptr, ##38016
13838                 | LR__1562
13838                 | LR__1563
13838     A7 F0 03 F6 | 	mov	ptra, fp
1383c     B2 00 A0 FD | 	call	#popregs_
13840                 | _do_if_ret
13840     2D 00 64 FD | 	ret
13844                 | 
13844                 | ' 
13844                 | ' ' ----------------  inkey$
13844                 | ' 
13844                 | ' sub do_inkey
13844                 | _do_inkey
13844     02 4A 05 F6 | 	mov	COUNT_, #2
13848     A8 00 A0 FD | 	call	#pushregs_
1384c     0C F0 07 F1 | 	add	ptra, #12
13850     68 28 B1 FD | 	call	#_usbnew_spin2_get_key
13854     45 00 00 FF 
13858     74 E4 05 F1 | 	add	objptr, ##35444
1385c     F2 FA 61 FC | 	wrlong	result1, objptr
13860                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
13860     45 00 00 FF 
13864     74 E4 85 F1 | 	sub	objptr, ##35444
13868     00 FA 0D F2 | 	cmp	result1, #0 wz
1386c     94 00 90 AD |  if_e	jmp	#LR__1571
13870     45 00 00 FF 
13874     74 E4 05 F1 | 	add	objptr, ##35444
13878     F2 1C 02 FB | 	rdlong	arg06, objptr
1387c     45 00 00 FF 
13880     74 E4 85 F1 | 	sub	objptr, ##35444
13884     00 00 40 FF 
13888     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
1388c     45 00 00 CF 
13890     74 E4 05 C1 |  if_b	add	objptr, ##35444
13894     F2 26 02 CB |  if_b	rdlong	local01, objptr
13898     45 00 00 CF 
1389c     74 E4 85 C1 |  if_b	sub	objptr, ##35444
138a0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
138a4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
138a8     58 00 90 3D |  if_ae	jmp	#LR__1571
138ac                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
138ac     50 00 00 FF 
138b0     3C E5 05 F1 | 	add	objptr, ##41276
138b4     F2 1C 02 FB | 	rdlong	arg06, objptr
138b8     50 00 00 FF 
138bc     3C E5 85 F1 | 	sub	objptr, ##41276
138c0     01 1C 0E F2 | 	cmp	arg06, #1 wz
138c4     3C 00 90 5D |  if_ne	jmp	#LR__1570
138c8     52 00 00 FF 
138cc     A4 E4 05 F1 | 	add	objptr, ##42148
138d0     F2 14 02 FB | 	rdlong	arg02, objptr
138d4     04 E4 85 F1 | 	sub	objptr, #4
138d8     F2 1A 02 FB | 	rdlong	arg05, objptr
138dc     07 12 06 F6 | 	mov	arg01, #7
138e0     56 00 00 FF 
138e4     44 16 06 F6 | 	mov	arg03, ##44100
138e8     0C 18 C6 F9 | 	decod	arg04, #12
138ec     01 1C 66 F6 | 	neg	arg06, #1
138f0     46 00 00 FF 
138f4     D4 E5 85 F1 | 	sub	objptr, ##36308
138f8     AC 2B B1 FD | 	call	#_audio096_spin2_play
138fc     0B 00 00 FF 
13900     CC E4 85 F1 | 	sub	objptr, ##5836
13904                 | LR__1570
13904                 | LR__1571
13904                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
13904     45 00 00 FF 
13908     74 E4 05 F1 | 	add	objptr, ##35444
1390c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
13910     45 00 00 FF 
13914     74 E4 85 F1 | 	sub	objptr, ##35444
13918     D4 01 90 AD |  if_e	jmp	#LR__1580
1391c     45 00 00 FF 
13920     74 E4 05 F1 | 	add	objptr, ##35444
13924     F2 1C 02 FB | 	rdlong	arg06, objptr
13928     45 00 00 FF 
1392c     74 E4 85 F1 | 	sub	objptr, ##35444
13930     00 00 40 FF 
13934     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
13938     45 00 00 CF 
1393c     74 E4 05 C1 |  if_b	add	objptr, ##35444
13940     F2 26 02 CB |  if_b	rdlong	local01, objptr
13944     45 00 00 CF 
13948     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1394c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
13950     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
13954     98 01 90 3D |  if_ae	jmp	#LR__1580
13958                 | '   if leds and 2 = 2 then 
13958     52 00 00 FF 
1395c     E0 E4 05 F1 | 	add	objptr, ##42208
13960     F2 26 0A FB | 	rdlong	local01, objptr wz
13964     52 00 00 FF 
13968     E0 E4 85 F1 | 	sub	objptr, ##42208
1396c     58 01 90 AD |  if_e	jmp	#LR__1579
13970                 | '     if key>96 andalso key<123 then
13970     45 00 00 FF 
13974     74 E4 05 F1 | 	add	objptr, ##35444
13978     F2 26 02 FB | 	rdlong	local01, objptr
1397c     45 00 00 FF 
13980     74 E4 85 F1 | 	sub	objptr, ##35444
13984     61 26 16 F2 | 	cmp	local01, #97 wc
13988     3C 00 90 CD |  if_b	jmp	#LR__1572
1398c     45 00 00 FF 
13990     74 E4 05 F1 | 	add	objptr, ##35444
13994     F2 26 02 FB | 	rdlong	local01, objptr
13998     45 00 00 FF 
1399c     74 E4 85 F1 | 	sub	objptr, ##35444
139a0     7B 26 16 F2 | 	cmp	local01, #123 wc
139a4     20 00 90 3D |  if_ae	jmp	#LR__1572
139a8     45 00 00 FF 
139ac     74 E4 05 F1 | 	add	objptr, ##35444
139b0     F2 26 02 FB | 	rdlong	local01, objptr
139b4     20 26 86 F1 | 	sub	local01, #32
139b8     F2 26 62 FC | 	wrlong	local01, objptr
139bc     45 00 00 FF 
139c0     74 E4 85 F1 | 	sub	objptr, ##35444
139c4     00 01 90 FD | 	jmp	#LR__1578
139c8                 | LR__1572
139c8     45 00 00 FF 
139cc     74 E4 05 F1 | 	add	objptr, ##35444
139d0     F2 26 02 FB | 	rdlong	local01, objptr
139d4     45 00 00 FF 
139d8     74 E4 85 F1 | 	sub	objptr, ##35444
139dc     41 26 16 F2 | 	cmp	local01, #65 wc
139e0     3C 00 90 CD |  if_b	jmp	#LR__1573
139e4     45 00 00 FF 
139e8     74 E4 05 F1 | 	add	objptr, ##35444
139ec     F2 26 02 FB | 	rdlong	local01, objptr
139f0     45 00 00 FF 
139f4     74 E4 85 F1 | 	sub	objptr, ##35444
139f8     5B 26 16 F2 | 	cmp	local01, #91 wc
139fc     20 00 90 3D |  if_ae	jmp	#LR__1573
13a00     45 00 00 FF 
13a04     74 E4 05 F1 | 	add	objptr, ##35444
13a08     F2 26 02 FB | 	rdlong	local01, objptr
13a0c     20 26 06 F1 | 	add	local01, #32
13a10     F2 26 62 FC | 	wrlong	local01, objptr
13a14     45 00 00 FF 
13a18     74 E4 85 F1 | 	sub	objptr, ##35444
13a1c     A8 00 90 FD | 	jmp	#LR__1577
13a20                 | LR__1573
13a20     45 00 00 FF 
13a24     74 E4 05 F1 | 	add	objptr, ##35444
13a28     F2 26 02 FB | 	rdlong	local01, objptr
13a2c     45 00 00 FF 
13a30     74 E4 85 F1 | 	sub	objptr, ##35444
13a34     17 26 16 F2 | 	cmp	local01, #23 wc
13a38     3C 00 90 CD |  if_b	jmp	#LR__1574
13a3c     45 00 00 FF 
13a40     74 E4 05 F1 | 	add	objptr, ##35444
13a44     F2 26 02 FB | 	rdlong	local01, objptr
13a48     45 00 00 FF 
13a4c     74 E4 85 F1 | 	sub	objptr, ##35444
13a50     20 26 16 F2 | 	cmp	local01, #32 wc
13a54     20 00 90 3D |  if_ae	jmp	#LR__1574
13a58     45 00 00 FF 
13a5c     74 E4 05 F1 | 	add	objptr, ##35444
13a60     F2 26 02 FB | 	rdlong	local01, objptr
13a64     09 26 86 F1 | 	sub	local01, #9
13a68     F2 26 62 FC | 	wrlong	local01, objptr
13a6c     45 00 00 FF 
13a70     74 E4 85 F1 | 	sub	objptr, ##35444
13a74     50 00 90 FD | 	jmp	#LR__1576
13a78                 | LR__1574
13a78     45 00 00 FF 
13a7c     74 E4 05 F1 | 	add	objptr, ##35444
13a80     F2 28 02 FB | 	rdlong	local02, objptr
13a84     45 00 00 FF 
13a88     74 E4 85 F1 | 	sub	objptr, ##35444
13a8c     0E 28 16 F2 | 	cmp	local02, #14 wc
13a90     34 00 90 CD |  if_b	jmp	#LR__1575
13a94     45 00 00 FF 
13a98     74 E4 05 F1 | 	add	objptr, ##35444
13a9c     F2 26 02 FB | 	rdlong	local01, objptr
13aa0     45 00 00 FF 
13aa4     74 E4 85 F1 | 	sub	objptr, ##35444
13aa8     17 26 16 F2 | 	cmp	local01, #23 wc
13aac     52 00 00 CF 
13ab0     E4 E4 05 C1 |  if_b	add	objptr, ##42212
13ab4     F2 28 02 CB |  if_b	rdlong	local02, objptr
13ab8     27 28 06 C1 |  if_b	add	local02, #39
13abc     F2 28 62 CC |  if_b	wrlong	local02, objptr
13ac0     52 00 00 CF 
13ac4     E4 E4 85 C1 |  if_b	sub	objptr, ##42212
13ac8                 | LR__1575
13ac8                 | LR__1576
13ac8                 | LR__1577
13ac8                 | LR__1578
13ac8                 | LR__1579
13ac8     45 00 00 FF 
13acc     74 E4 05 F1 | 	add	objptr, ##35444
13ad0     F2 12 02 FB | 	rdlong	arg01, objptr
13ad4     45 00 00 FF 
13ad8     74 E4 85 F1 | 	sub	objptr, ##35444
13adc     C8 F7 B0 FD | 	call	#_scantochar
13ae0     FD 12 02 F6 | 	mov	arg01, result1
13ae4     74 50 B1 FD | 	call	#__system__Chr_S
13ae8     A7 FA 61 FC | 	wrlong	result1, fp
13aec     0C 00 90 FD | 	jmp	#LR__1581
13af0                 | LR__1580
13af0     B7 01 00 FF 
13af4     21 28 06 F6 | 	mov	local02, ##@LR__5902
13af8     A7 28 62 FC | 	wrlong	local02, fp
13afc                 | LR__1581
13afc     08 4E 05 F1 | 	add	fp, #8
13b00     A7 3E 68 FC | 	wrlong	#31, fp
13b04     08 4E 85 F1 | 	sub	fp, #8
13b08     A7 12 02 F6 | 	mov	arg01, fp
13b0c     10 9B BF FD | 	call	#_push
13b10     A7 F0 03 F6 | 	mov	ptra, fp
13b14     B2 00 A0 FD | 	call	#popregs_
13b18                 | _do_inkey_ret
13b18     2D 00 64 FD | 	ret
13b1c                 | 
13b1c                 | ' 
13b1c                 | ' ' ----------------  ink
13b1c                 | ' 
13b1c                 | ' sub do_ink
13b1c                 | _do_ink
13b1c     00 4A 05 F6 | 	mov	COUNT_, #0
13b20     A8 00 A0 FD | 	call	#pushregs_
13b24     0C F0 07 F1 | 	add	ptra, #12
13b28     5C 9A BF FD | 	call	#_pop
13b2c     FF 14 02 F6 | 	mov	arg02, result3
13b30     A7 FA 61 FC | 	wrlong	result1, fp
13b34     04 4E 05 F1 | 	add	fp, #4
13b38     A7 FC 61 FC | 	wrlong	result2, fp
13b3c     04 4E 05 F1 | 	add	fp, #4
13b40     A7 14 62 FC | 	wrlong	arg02, fp
13b44     08 4E 85 F1 | 	sub	fp, #8
13b48     A7 12 02 F6 | 	mov	arg01, fp
13b4c     1C 9C BF FD | 	call	#_converttoint
13b50     37 00 00 FF 
13b54     3C E4 05 F1 | 	add	objptr, ##28220
13b58     F2 FA 61 FC | 	wrlong	result1, objptr
13b5c     04 E4 85 F1 | 	sub	objptr, #4
13b60     F2 14 02 FB | 	rdlong	arg02, objptr
13b64                 | ' 
13b64                 | ' write_color:=ff
13b64     36 00 00 FF 
13b68     F7 E5 85 F1 | 	sub	objptr, ##28151
13b6c     F2 FA 61 FC | 	wrlong	result1, objptr
13b70                 | ' write_background:=bb
13b70     04 E4 05 F1 | 	add	objptr, #4
13b74     F2 14 62 FC | 	wrlong	arg02, objptr
13b78     36 00 00 FF 
13b7c     F7 E5 05 F1 | 	add	objptr, ##28151
13b80     F2 12 02 FB | 	rdlong	arg01, objptr
13b84     37 00 00 FF 
13b88     3C E4 85 F1 | 	sub	objptr, ##28220
13b8c     70 FF B0 FD | 	call	#_hg010b_spin2_setcursorcolor
13b90     A7 F0 03 F6 | 	mov	ptra, fp
13b94     B2 00 A0 FD | 	call	#popregs_
13b98                 | _do_ink_ret
13b98     2D 00 64 FD | 	ret
13b9c                 | 
13b9c                 | ' 
13b9c                 | ' ' ----------------  int
13b9c                 | ' 
13b9c                 | ' sub do_int
13b9c                 | _do_int
13b9c     02 4A 05 F6 | 	mov	COUNT_, #2
13ba0     A8 00 A0 FD | 	call	#pushregs_
13ba4     10 F0 07 F1 | 	add	ptra, #16
13ba8     DC 99 BF FD | 	call	#_pop
13bac     FE 26 02 F6 | 	mov	local01, result2
13bb0     FF 28 02 F6 | 	mov	local02, result3
13bb4     A7 FA 61 FC | 	wrlong	result1, fp
13bb8     04 4E 05 F1 | 	add	fp, #4
13bbc     A7 26 62 FC | 	wrlong	local01, fp
13bc0     04 4E 05 F1 | 	add	fp, #4
13bc4     A7 28 62 FC | 	wrlong	local02, fp
13bc8                 | ' 
13bc8                 | ' t1=pop()
13bc8                 | ' select case t1.result_type
13bc8     08 4E 85 F1 | 	sub	fp, #8
13bcc     1E 28 0E F2 | 	cmp	local02, #30 wz
13bd0     14 00 90 AD |  if_e	jmp	#LR__1590
13bd4     1F 28 0E F2 | 	cmp	local02, #31 wz
13bd8     20 00 90 AD |  if_e	jmp	#LR__1591
13bdc     2B 28 0E F2 | 	cmp	local02, #43 wz
13be0     34 00 90 AD |  if_e	jmp	#LR__1592
13be4     50 00 90 FD | 	jmp	#LR__1593
13be8                 | LR__1590
13be8     A7 12 02 FB | 	rdlong	arg01, fp
13bec     00 14 06 F6 | 	mov	arg02, #0
13bf0     68 60 B1 FD | 	call	#__system___float_tointeger
13bf4     A7 FA 61 FC | 	wrlong	result1, fp
13bf8     3C 00 90 FD | 	jmp	#LR__1593
13bfc                 | LR__1591
13bfc     A7 12 02 FB | 	rdlong	arg01, fp
13c00     9C 63 B1 FD | 	call	#__system____builtin_atof
13c04     FD 12 02 F6 | 	mov	arg01, result1
13c08     00 14 06 F6 | 	mov	arg02, #0
13c0c     4C 60 B1 FD | 	call	#__system___float_tointeger
13c10     A7 FA 61 FC | 	wrlong	result1, fp
13c14     20 00 90 FD | 	jmp	#LR__1593
13c18                 | LR__1592
13c18     A7 12 02 FB | 	rdlong	arg01, fp
13c1c     E0 9A BF FD | 	call	#_convertstring
13c20     FD 12 02 F6 | 	mov	arg01, result1
13c24     78 63 B1 FD | 	call	#__system____builtin_atof
13c28     FD 12 02 F6 | 	mov	arg01, result1
13c2c     00 14 06 F6 | 	mov	arg02, #0
13c30     28 60 B1 FD | 	call	#__system___float_tointeger
13c34     A7 FA 61 FC | 	wrlong	result1, fp
13c38                 | LR__1593
13c38     08 4E 05 F1 | 	add	fp, #8
13c3c     A7 38 68 FC | 	wrlong	#28, fp
13c40     08 4E 85 F1 | 	sub	fp, #8
13c44     A7 12 02 F6 | 	mov	arg01, fp
13c48     D4 99 BF FD | 	call	#_push
13c4c     A7 F0 03 F6 | 	mov	ptra, fp
13c50     B2 00 A0 FD | 	call	#popregs_
13c54                 | _do_int_ret
13c54     2D 00 64 FD | 	ret
13c58                 | 
13c58                 | ' 
13c58                 | ' ' ----------------  input
13c58                 | ' 
13c58                 | ' sub do_input
13c58                 | _do_input
13c58     11 4A 05 F6 | 	mov	COUNT_, #17
13c5c     A8 00 A0 FD | 	call	#pushregs_
13c60     50 F1 07 F1 | 	add	ptra, #336
13c64     4A 00 00 FF 
13c68     80 E4 05 F1 | 	add	objptr, ##38016
13c6c     F2 FE 01 FB | 	rdlong	result3, objptr
13c70     FF FC 01 F6 | 	mov	result2, result3
13c74     01 FC 65 F0 | 	shl	result2, #1
13c78     FF FC 01 F1 | 	add	result2, result3
13c7c     02 FC 65 F0 | 	shl	result2, #2
13c80     03 00 00 FF 
13c84     04 E4 85 F1 | 	sub	objptr, ##1540
13c88     F2 FC 01 F1 | 	add	result2, objptr
13c8c     FE FC 01 FB | 	rdlong	result2, result2
13c90     08 4E 05 F1 | 	add	fp, #8
13c94     A7 FC 61 FC | 	wrlong	result2, fp
13c98                 | ' 
13c98                 | ' numpar=compiledline(lineptr_e).result.uresult
13c98                 | ' if numpar<1 orelse numpar>64 then print "In input: ";: printerror(39,runheader(0)) : return
13c98     08 4E 85 F1 | 	sub	fp, #8
13c9c     01 FC 15 F2 | 	cmp	result2, #1 wc
13ca0     47 00 00 FF 
13ca4     7C E4 85 F1 | 	sub	objptr, ##36476
13ca8     14 00 90 CD |  if_b	jmp	#LR__1600
13cac     08 4E 05 F1 | 	add	fp, #8
13cb0     A7 FC 01 FB | 	rdlong	result2, fp
13cb4     08 4E 85 F1 | 	sub	fp, #8
13cb8     41 FC 15 F2 | 	cmp	result2, #65 wc
13cbc     50 00 90 CD |  if_b	jmp	#LR__1601
13cc0                 | LR__1600
13cc0     00 12 06 F6 | 	mov	arg01, #0
13cc4     F4 88 B1 FD | 	call	#__system___getiolock_0603
13cc8     FD 12 02 F6 | 	mov	arg01, result1
13ccc     48 2C B1 FD | 	call	#__system___lockmem
13cd0     B7 01 00 FF 
13cd4     22 14 06 F6 | 	mov	arg02, ##@LR__5903
13cd8     00 12 06 F6 | 	mov	arg01, #0
13cdc     00 16 06 F6 | 	mov	arg03, #0
13ce0     2C 39 B1 FD | 	call	#__system___basic_print_string
13ce4     00 12 06 F6 | 	mov	arg01, #0
13ce8     D0 88 B1 FD | 	call	#__system___getiolock_0603
13cec     FD 00 68 FC | 	wrlong	#0, result1
13cf0     50 00 00 FF 
13cf4     F0 E4 05 F1 | 	add	objptr, ##41200
13cf8     F2 14 02 FB | 	rdlong	arg02, objptr
13cfc     50 00 00 FF 
13d00     F0 E4 85 F1 | 	sub	objptr, ##41200
13d04     27 12 06 F6 | 	mov	arg01, #39
13d08     1C F2 B0 FD | 	call	#_printerror
13d0c     44 0B 90 FD | 	jmp	#LR__1650
13d10                 | LR__1601
13d10     08 4E 05 F1 | 	add	fp, #8
13d14     A7 FC 01 FB | 	rdlong	result2, fp
13d18     01 FC 85 F1 | 	sub	result2, #1
13d1c     28 4F 05 F1 | 	add	fp, #296
13d20     A7 FC 61 FC | 	wrlong	result2, fp
13d24     3C E4 05 F1 | 	add	objptr, #60
13d28     F2 FC E1 FA | 	rdword	result2, objptr
13d2c     FE FC 51 F6 | 	abs	result2, result2 wc
13d30     01 FC 45 F0 | 	shr	result2, #1
13d34     FE FC 81 F6 | 	negc	result2, result2
13d38     0C 4E 05 F1 | 	add	fp, #12
13d3c     A7 FC 61 FC | 	wrlong	result2, fp
13d40     02 E4 05 F1 | 	add	objptr, #2
13d44     F2 26 C2 FA | 	rdbyte	local01, objptr
13d48     3E E4 85 F1 | 	sub	objptr, #62
13d4c     04 4E 05 F1 | 	add	fp, #4
13d50     A7 26 62 FC | 	wrlong	local01, fp
13d54     40 4F 85 F1 | 	sub	fp, #320
13d58                 | ' i=numpar-1
13d58                 | ' cpx=v.cursor_x/2 : cpy=v.cursor_y
13d58                 | ' do
13d58                 | LR__1602
13d58     A8 CA BE FD | 	call	#_edit
13d5c     A7 FA 61 FC | 	wrlong	result1, fp
13d60                 | ' 
13d60                 | '   line$=edit()
13d60                 | ' 
13d60                 | '   if v.cursor_y=cpy+1 then
13d60     3E E4 05 F1 | 	add	objptr, #62
13d64     F2 26 C2 FA | 	rdbyte	local01, objptr
13d68     3E E4 85 F1 | 	sub	objptr, #62
13d6c     40 4F 05 F1 | 	add	fp, #320
13d70     A7 16 02 FB | 	rdlong	arg03, fp
13d74     40 4F 85 F1 | 	sub	fp, #320
13d78     01 16 06 F1 | 	add	arg03, #1
13d7c     0B 27 0A F2 | 	cmp	local01, arg03 wz
13d80     6C 00 90 5D |  if_ne	jmp	#LR__1605
13d84     A7 26 02 FB | 	rdlong	local01, fp
13d88     13 13 02 F6 | 	mov	arg01, local01
13d8c     09 29 02 F6 | 	mov	local02, arg01
13d90     97 06 48 FB | 	callpa	#(@LR__1604-@LR__1603)>>2,fcache_load_ptr_
13d94                 | LR__1603
13d94     14 FB C9 FA | 	rdbyte	result1, local02 wz
13d98     01 28 06 51 |  if_ne	add	local02, #1
13d9c     F4 FF 9F 5D |  if_ne	jmp	#LR__1603
13da0                 | LR__1604
13da0     09 29 82 F1 | 	sub	local02, arg01
13da4     14 15 02 F6 | 	mov	arg02, local02
13da8     3C 4F 05 F1 | 	add	fp, #316
13dac     A7 16 02 FB | 	rdlong	arg03, fp
13db0     3C 4F 85 F1 | 	sub	fp, #316
13db4     0B 15 82 F1 | 	sub	arg02, arg03
13db8     37 00 00 FF 
13dbc     34 E4 05 F1 | 	add	objptr, ##28212
13dc0     F2 16 02 FB | 	rdlong	arg03, objptr
13dc4     37 00 00 FF 
13dc8     34 E4 85 F1 | 	sub	objptr, ##28212
13dcc     0B 15 02 F1 | 	add	arg02, arg03
13dd0     13 13 02 F6 | 	mov	arg01, local01
13dd4     48 4C B1 FD | 	call	#__system__Right_S
13dd8     FD 12 02 F6 | 	mov	arg01, result1
13ddc     48 50 B1 FD | 	call	#__system__RTrim_S
13de0     FD 12 02 F6 | 	mov	arg01, result1
13de4     80 4F B1 FD | 	call	#__system__LTrim_S
13de8     A7 FA 61 FC | 	wrlong	result1, fp
13dec     14 00 90 FD | 	jmp	#LR__1606
13df0                 | LR__1605
13df0     A7 12 02 FB | 	rdlong	arg01, fp
13df4     30 50 B1 FD | 	call	#__system__RTrim_S
13df8     FD 12 02 F6 | 	mov	arg01, result1
13dfc     68 4F B1 FD | 	call	#__system__LTrim_S
13e00     A7 FA 61 FC | 	wrlong	result1, fp
13e04                 | LR__1606
13e04                 | '   do
13e04                 | LR__1607
13e04     A7 14 02 FB | 	rdlong	arg02, fp
13e08     B7 01 00 FF 
13e0c     2D 16 06 F6 | 	mov	arg03, ##@LR__5904
13e10     01 12 06 F6 | 	mov	arg01, #1
13e14     C8 50 B1 FD | 	call	#__system__Instr
13e18     0C 4E 05 F1 | 	add	fp, #12
13e1c     A7 FA 61 FC | 	wrlong	result1, fp
13e20                 | '    comma=instr(1,line$,",")  
13e20                 | '    if comma>0  then 
13e20     0C 4E 85 F1 | 	sub	fp, #12
13e24     01 FA 15 F2 | 	cmp	result1, #1 wc
13e28     68 00 90 CD |  if_b	jmp	#LR__1610
13e2c     A7 12 02 FB | 	rdlong	arg01, fp
13e30     0C 4E 05 F1 | 	add	fp, #12
13e34     A7 14 02 FB | 	rdlong	arg02, fp
13e38     0C 4E 85 F1 | 	sub	fp, #12
13e3c     01 14 86 F1 | 	sub	arg02, #1
13e40     54 4B B1 FD | 	call	#__system__Left_S
13e44     04 4E 05 F1 | 	add	fp, #4
13e48     A7 FA 61 FC | 	wrlong	result1, fp
13e4c     04 4E 85 F1 | 	sub	fp, #4
13e50     A7 26 02 FB | 	rdlong	local01, fp
13e54     13 13 02 F6 | 	mov	arg01, local01
13e58     09 29 02 F6 | 	mov	local02, arg01
13e5c     97 06 48 FB | 	callpa	#(@LR__1609-@LR__1608)>>2,fcache_load_ptr_
13e60                 | LR__1608
13e60     14 FB C9 FA | 	rdbyte	result1, local02 wz
13e64     01 28 06 51 |  if_ne	add	local02, #1
13e68     F4 FF 9F 5D |  if_ne	jmp	#LR__1608
13e6c                 | LR__1609
13e6c     09 29 82 F1 | 	sub	local02, arg01
13e70     14 15 02 F6 | 	mov	arg02, local02
13e74     0C 4E 05 F1 | 	add	fp, #12
13e78     A7 16 02 FB | 	rdlong	arg03, fp
13e7c     0C 4E 85 F1 | 	sub	fp, #12
13e80     0B 15 82 F1 | 	sub	arg02, arg03
13e84     13 13 02 F6 | 	mov	arg01, local01
13e88     94 4B B1 FD | 	call	#__system__Right_S
13e8c     A7 FA 61 FC | 	wrlong	result1, fp
13e90     28 00 90 FD | 	jmp	#LR__1611
13e94                 | LR__1610
13e94     A7 12 02 FB | 	rdlong	arg01, fp
13e98     8C 4F B1 FD | 	call	#__system__RTrim_S
13e9c     FD 12 02 F6 | 	mov	arg01, result1
13ea0     C4 4E B1 FD | 	call	#__system__LTrim_S
13ea4     04 4E 05 F1 | 	add	fp, #4
13ea8     A7 FA 61 FC | 	wrlong	result1, fp
13eac     04 4E 85 F1 | 	sub	fp, #4
13eb0     B7 01 00 FF 
13eb4     2F 26 06 F6 | 	mov	local01, ##@LR__5905
13eb8     A7 26 62 FC | 	wrlong	local01, fp
13ebc                 | LR__1611
13ebc     30 4F 05 F1 | 	add	fp, #304
13ec0     A7 26 02 FB | 	rdlong	local01, fp
13ec4     02 26 66 F0 | 	shl	local01, #2
13ec8     04 4F 85 F1 | 	sub	fp, #260
13ecc     A7 26 02 F1 | 	add	local01, fp
13ed0     28 4E 85 F1 | 	sub	fp, #40
13ed4     A7 FA 01 FB | 	rdlong	result1, fp
13ed8     13 FB 61 FC | 	wrlong	result1, local01
13edc     2C 4F 05 F1 | 	add	fp, #300
13ee0     A7 26 02 FB | 	rdlong	local01, fp
13ee4     01 26 86 F1 | 	sub	local01, #1
13ee8     A7 26 62 FC | 	wrlong	local01, fp
13eec     30 4F 85 F1 | 	sub	fp, #304
13ef0     00 26 56 F2 | 	cmps	local01, #0 wc
13ef4     18 00 90 CD |  if_b	jmp	#LR__1612
13ef8     A7 12 02 FB | 	rdlong	arg01, fp
13efc     B7 01 00 FF 
13f00     30 14 06 F6 | 	mov	arg02, ##@LR__5906
13f04     38 2A B1 FD | 	call	#__system___string_cmp
13f08     00 FA 0D F2 | 	cmp	result1, #0 wz
13f0c     F4 FE 9F 5D |  if_ne	jmp	#LR__1607
13f10                 | LR__1612
13f10     30 4F 05 F1 | 	add	fp, #304
13f14     A7 26 02 FB | 	rdlong	local01, fp
13f18     30 4F 85 F1 | 	sub	fp, #304
13f1c     00 26 56 F2 | 	cmps	local01, #0 wc
13f20     34 FE 9F 3D |  if_ae	jmp	#LR__1602
13f24                 | ' 
13f24                 | ' for i=0 to numpar-1
13f24     30 4F 05 F1 | 	add	fp, #304
13f28     A7 00 68 FC | 	wrlong	#0, fp
13f2c     28 4F 85 F1 | 	sub	fp, #296
13f30     A7 2A 02 FB | 	rdlong	local03, fp
13f34     08 4E 85 F1 | 	sub	fp, #8
13f38                 | LR__1613
13f38     30 4F 05 F1 | 	add	fp, #304
13f3c     A7 2C 02 FB | 	rdlong	local04, fp
13f40     30 4F 85 F1 | 	sub	fp, #304
13f44     16 27 02 F6 | 	mov	local01, local04
13f48     15 27 52 F2 | 	cmps	local01, local03 wc
13f4c     04 09 90 3D |  if_ae	jmp	#LR__1649
13f50                 | ' 
13f50                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
13f50     30 4F 05 F1 | 	add	fp, #304
13f54     A7 16 02 FB | 	rdlong	arg03, fp
13f58     02 16 66 F0 | 	shl	arg03, #2
13f5c     04 4F 85 F1 | 	sub	fp, #260
13f60     A7 16 02 F1 | 	add	arg03, fp
13f64     0B 13 02 FB | 	rdlong	arg01, arg03
13f68     2C 4E 85 F1 | 	sub	fp, #44
13f6c     9C 28 BF FD | 	call	#_isnum
13f70     FD 2E 02 F6 | 	mov	local05, result1
13f74     30 4F 05 F1 | 	add	fp, #304
13f78     A7 16 02 FB | 	rdlong	arg03, fp
13f7c     02 16 66 F0 | 	shl	arg03, #2
13f80     04 4F 85 F1 | 	sub	fp, #260
13f84     A7 30 02 F6 | 	mov	local06, fp
13f88     A7 16 02 F1 | 	add	arg03, fp
13f8c     0B 13 02 FB | 	rdlong	arg01, arg03
13f90     2C 4E 85 F1 | 	sub	fp, #44
13f94     60 2C BF FD | 	call	#_isint
13f98     FD 2E 2A F5 | 	andn	local05, result1 wz
13f9c     52 00 00 5F 
13fa0     10 E5 05 51 |  if_ne	add	objptr, ##42256
13fa4     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
13fa8     52 00 00 5F 
13fac     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13fb0                 | '   if isint(args(i)) then r=result_int 
13fb0     30 4F 05 F1 | 	add	fp, #304
13fb4     A7 2E 02 FB | 	rdlong	local05, fp
13fb8     02 2E 66 F0 | 	shl	local05, #2
13fbc     04 4F 85 F1 | 	sub	fp, #260
13fc0     A7 2E 02 F1 | 	add	local05, fp
13fc4     17 13 02 FB | 	rdlong	arg01, local05
13fc8     2C 4E 85 F1 | 	sub	fp, #44
13fcc     28 2C BF FD | 	call	#_isint
13fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
13fd4     52 00 00 5F 
13fd8     10 E5 05 51 |  if_ne	add	objptr, ##42256
13fdc     F2 38 68 5C |  if_ne	wrlong	#28, objptr
13fe0     52 00 00 5F 
13fe4     10 E5 85 51 |  if_ne	sub	objptr, ##42256
13fe8                 | '   if isdec(args(i)) then r=result_uint 
13fe8     30 4F 05 F1 | 	add	fp, #304
13fec     A7 2E 02 FB | 	rdlong	local05, fp
13ff0     02 2E 66 F0 | 	shl	local05, #2
13ff4     04 4F 85 F1 | 	sub	fp, #260
13ff8     A7 2E 02 F1 | 	add	local05, fp
13ffc     17 13 02 FB | 	rdlong	arg01, local05
14000     2C 4E 85 F1 | 	sub	fp, #44
14004     94 2E BF FD | 	call	#_isdec
14008     00 FA 0D F2 | 	cmp	result1, #0 wz
1400c     52 00 00 5F 
14010     10 E5 05 51 |  if_ne	add	objptr, ##42256
14014     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
14018     52 00 00 5F 
1401c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
14020                 | '   if not isnum(args(i)) then 
14020     30 4F 05 F1 | 	add	fp, #304
14024     A7 32 02 FB | 	rdlong	local07, fp
14028     19 35 02 F6 | 	mov	local08, local07
1402c     02 34 66 F0 | 	shl	local08, #2
14030     04 4F 85 F1 | 	sub	fp, #260
14034     A7 36 02 F6 | 	mov	local09, fp
14038     A7 34 02 F1 | 	add	local08, fp
1403c     1A 13 02 FB | 	rdlong	arg01, local08
14040     2C 4E 85 F1 | 	sub	fp, #44
14044     C4 27 BF FD | 	call	#_isnum
14048     FD 2E 22 F6 | 	not	local05, result1
1404c     00 2E 0E F2 | 	cmp	local05, #0 wz
14050     44 01 90 AD |  if_e	jmp	#LR__1618
14054     52 00 00 FF 
14058     10 E5 05 F1 | 	add	objptr, ##42256
1405c     F2 56 68 FC | 	wrlong	#43, objptr
14060     52 00 00 FF 
14064     10 E5 85 F1 | 	sub	objptr, ##42256
14068     04 4E 05 F1 | 	add	fp, #4
1406c     A7 12 02 FB | 	rdlong	arg01, fp
14070     04 4E 85 F1 | 	sub	fp, #4
14074     09 29 02 F6 | 	mov	local02, arg01
14078     97 06 48 FB | 	callpa	#(@LR__1615-@LR__1614)>>2,fcache_load_ptr_
1407c                 | LR__1614
1407c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14080     01 28 06 51 |  if_ne	add	local02, #1
14084     F4 FF 9F 5D |  if_ne	jmp	#LR__1614
14088                 | LR__1615
14088     09 29 82 F1 | 	sub	local02, arg01
1408c     14 33 02 F6 | 	mov	local07, local02
14090     38 4F 05 F1 | 	add	fp, #312
14094     A7 32 62 FC | 	wrlong	local07, fp
14098     52 00 00 FF 
1409c     98 E4 05 F1 | 	add	objptr, ##42136
140a0     F2 12 02 FB | 	rdlong	arg01, objptr
140a4     19 13 82 F1 | 	sub	arg01, local07
140a8     04 12 86 F1 | 	sub	arg01, #4
140ac     03 12 26 F5 | 	andn	arg01, #3
140b0     F2 12 62 FC | 	wrlong	arg01, objptr
140b4     52 00 00 FF 
140b8     98 E4 85 F1 | 	sub	objptr, ##42136
140bc     A7 14 02 FB | 	rdlong	arg02, fp
140c0     38 4F 85 F1 | 	sub	fp, #312
140c4     00 F0 B0 FD | 	call	#_pslpoke
140c8                 | '     pslpoke memtop,l
140c8                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
140c8     34 4F 05 F1 | 	add	fp, #308
140cc     A7 02 68 FC | 	wrlong	#1, fp
140d0     04 4E 05 F1 | 	add	fp, #4
140d4     A7 38 02 FB | 	rdlong	local10, fp
140d8     38 4F 85 F1 | 	sub	fp, #312
140dc     01 38 06 F1 | 	add	local10, #1
140e0                 | LR__1616
140e0     34 4F 05 F1 | 	add	fp, #308
140e4     A7 2E 02 FB | 	rdlong	local05, fp
140e8     34 4F 85 F1 | 	sub	fp, #308
140ec     1C 2F 52 F2 | 	cmps	local05, local10 wc
140f0     84 00 90 3D |  if_ae	jmp	#LR__1617
140f4     52 00 00 FF 
140f8     98 E4 05 F1 | 	add	objptr, ##42136
140fc     F2 32 02 FB | 	rdlong	local07, objptr
14100     52 00 00 FF 
14104     98 E4 85 F1 | 	sub	objptr, ##42136
14108     03 32 06 F1 | 	add	local07, #3
1410c     34 4F 05 F1 | 	add	fp, #308
14110     A7 3A 02 FB | 	rdlong	local11, fp
14114     1D 33 02 F1 | 	add	local07, local11
14118     04 4E 85 F1 | 	sub	fp, #4
1411c     A7 3C 02 FB | 	rdlong	local12, fp
14120     02 3C 66 F0 | 	shl	local12, #2
14124     04 4F 85 F1 | 	sub	fp, #260
14128     A7 3E 02 F6 | 	mov	local13, fp
1412c     A7 3C 02 F1 | 	add	local12, fp
14130     1E 13 02 FB | 	rdlong	arg01, local12
14134     2C 4E 85 F1 | 	sub	fp, #44
14138     01 40 06 F6 | 	mov	local14, #1
1413c     1D 15 02 F6 | 	mov	arg02, local11
14140     01 16 06 F6 | 	mov	arg03, #1
14144     68 49 B1 FD | 	call	#__system__Mid_S
14148     FD 14 C2 FA | 	rdbyte	arg02, result1
1414c     19 13 02 F6 | 	mov	arg01, local07
14150     04 F0 B0 FD | 	call	#_pspoke
14154     34 4F 05 F1 | 	add	fp, #308
14158     A7 34 02 FB | 	rdlong	local08, fp
1415c     1A 33 02 F6 | 	mov	local07, local08
14160     1A 31 02 F6 | 	mov	local06, local08
14164     18 37 02 F6 | 	mov	local09, local06
14168     01 36 06 F1 | 	add	local09, #1
1416c     A7 36 62 FC | 	wrlong	local09, fp
14170     34 4F 85 F1 | 	sub	fp, #308
14174     68 FF 9F FD | 	jmp	#LR__1616
14178                 | LR__1617
14178     52 00 00 FF 
1417c     98 E4 05 F1 | 	add	objptr, ##42136
14180     F2 2E 02 FB | 	rdlong	local05, objptr
14184     52 00 00 FF 
14188     98 E4 85 F1 | 	sub	objptr, ##42136
1418c     10 4E 05 F1 | 	add	fp, #16
14190     A7 2E 62 FC | 	wrlong	local05, fp
14194     10 4E 85 F1 | 	sub	fp, #16
14198                 | LR__1618
14198     EC 93 BF FD | 	call	#_pop
1419c     FE 2E 02 F6 | 	mov	local05, result2
141a0     FF 42 02 F6 | 	mov	local15, result3
141a4     1C 4E 05 F1 | 	add	fp, #28
141a8     A7 FA 61 FC | 	wrlong	result1, fp
141ac     04 4E 05 F1 | 	add	fp, #4
141b0     A7 2E 62 FC | 	wrlong	local05, fp
141b4     04 4E 05 F1 | 	add	fp, #4
141b8     A7 42 62 FC | 	wrlong	local15, fp
141bc     04 4E 85 F1 | 	sub	fp, #4
141c0     A7 44 02 FB | 	rdlong	local16, fp
141c4     0C 4E 85 F1 | 	sub	fp, #12
141c8     A7 44 62 FC | 	wrlong	local16, fp
141cc                 | '   t1=pop() : vartype=t1.result.twowords(1)
141cc                 | '   select case vartype
141cc     14 4E 85 F1 | 	sub	fp, #20
141d0     22 47 0A F6 | 	mov	local17, local16 wz
141d4     64 00 90 AD |  if_e	jmp	#LR__1619
141d8     00 47 0E F2 | 	cmp	local17, #256 wz
141dc     6C 00 90 AD |  if_e	jmp	#LR__1620
141e0     01 47 0E F2 | 	cmp	local17, #257 wz
141e4     74 00 90 AD |  if_e	jmp	#LR__1621
141e8     02 47 0E F2 | 	cmp	local17, #258 wz
141ec     7C 00 90 AD |  if_e	jmp	#LR__1622
141f0     03 47 0E F2 | 	cmp	local17, #259 wz
141f4     84 00 90 AD |  if_e	jmp	#LR__1623
141f8     04 47 0E F2 | 	cmp	local17, #260 wz
141fc     8C 00 90 AD |  if_e	jmp	#LR__1624
14200     05 47 0E F2 | 	cmp	local17, #261 wz
14204     94 00 90 AD |  if_e	jmp	#LR__1625
14208     06 47 0E F2 | 	cmp	local17, #262 wz
1420c     9C 00 90 AD |  if_e	jmp	#LR__1626
14210     07 47 0E F2 | 	cmp	local17, #263 wz
14214     A4 00 90 AD |  if_e	jmp	#LR__1627
14218     08 47 0E F2 | 	cmp	local17, #264 wz
1421c     AC 00 90 AD |  if_e	jmp	#LR__1628
14220     09 47 0E F2 | 	cmp	local17, #265 wz
14224     B4 00 90 AD |  if_e	jmp	#LR__1629
14228     0A 47 0E F2 | 	cmp	local17, #266 wz
1422c     BC 00 90 AD |  if_e	jmp	#LR__1630
14230     0B 47 0E F2 | 	cmp	local17, #267 wz
14234     C4 00 90 AD |  if_e	jmp	#LR__1631
14238     D0 00 90 FD | 	jmp	#LR__1632
1423c                 | LR__1619
1423c     18 4E 05 F1 | 	add	fp, #24
14240     A7 18 68 FC | 	wrlong	#12, fp
14244     18 4E 85 F1 | 	sub	fp, #24
14248     CC 00 90 FD | 	jmp	#LR__1633
1424c                 | LR__1620
1424c     18 4E 05 F1 | 	add	fp, #24
14250     A7 18 68 FC | 	wrlong	#12, fp
14254     18 4E 85 F1 | 	sub	fp, #24
14258     BC 00 90 FD | 	jmp	#LR__1633
1425c                 | LR__1621
1425c     18 4E 05 F1 | 	add	fp, #24
14260     A7 02 68 FC | 	wrlong	#1, fp
14264     18 4E 85 F1 | 	sub	fp, #24
14268     AC 00 90 FD | 	jmp	#LR__1633
1426c                 | LR__1622
1426c     18 4E 05 F1 | 	add	fp, #24
14270     A7 02 68 FC | 	wrlong	#1, fp
14274     18 4E 85 F1 | 	sub	fp, #24
14278     9C 00 90 FD | 	jmp	#LR__1633
1427c                 | LR__1623
1427c     18 4E 05 F1 | 	add	fp, #24
14280     A7 04 68 FC | 	wrlong	#2, fp
14284     18 4E 85 F1 | 	sub	fp, #24
14288     8C 00 90 FD | 	jmp	#LR__1633
1428c                 | LR__1624
1428c     18 4E 05 F1 | 	add	fp, #24
14290     A7 04 68 FC | 	wrlong	#2, fp
14294     18 4E 85 F1 | 	sub	fp, #24
14298     7C 00 90 FD | 	jmp	#LR__1633
1429c                 | LR__1625
1429c     18 4E 05 F1 | 	add	fp, #24
142a0     A7 08 68 FC | 	wrlong	#4, fp
142a4     18 4E 85 F1 | 	sub	fp, #24
142a8     6C 00 90 FD | 	jmp	#LR__1633
142ac                 | LR__1626
142ac     18 4E 05 F1 | 	add	fp, #24
142b0     A7 08 68 FC | 	wrlong	#4, fp
142b4     18 4E 85 F1 | 	sub	fp, #24
142b8     5C 00 90 FD | 	jmp	#LR__1633
142bc                 | LR__1627
142bc     18 4E 05 F1 | 	add	fp, #24
142c0     A7 10 68 FC | 	wrlong	#8, fp
142c4     18 4E 85 F1 | 	sub	fp, #24
142c8     4C 00 90 FD | 	jmp	#LR__1633
142cc                 | LR__1628
142cc     18 4E 05 F1 | 	add	fp, #24
142d0     A7 10 68 FC | 	wrlong	#8, fp
142d4     18 4E 85 F1 | 	sub	fp, #24
142d8     3C 00 90 FD | 	jmp	#LR__1633
142dc                 | LR__1629
142dc     18 4E 05 F1 | 	add	fp, #24
142e0     A7 0C 68 FC | 	wrlong	#6, fp
142e4     18 4E 85 F1 | 	sub	fp, #24
142e8     2C 00 90 FD | 	jmp	#LR__1633
142ec                 | LR__1630
142ec     18 4E 05 F1 | 	add	fp, #24
142f0     A7 10 68 FC | 	wrlong	#8, fp
142f4     18 4E 85 F1 | 	sub	fp, #24
142f8     1C 00 90 FD | 	jmp	#LR__1633
142fc                 | LR__1631
142fc     18 4E 05 F1 | 	add	fp, #24
14300     A7 0A 68 FC | 	wrlong	#5, fp
14304     18 4E 85 F1 | 	sub	fp, #24
14308     0C 00 90 FD | 	jmp	#LR__1633
1430c                 | LR__1632
1430c     18 4E 05 F1 | 	add	fp, #24
14310     A7 18 68 FC | 	wrlong	#12, fp
14314     18 4E 85 F1 | 	sub	fp, #24
14318                 | LR__1633
14318                 | '   if esize=12 andalso t1.result.uresult<$80000 then
14318     18 4E 05 F1 | 	add	fp, #24
1431c     A7 44 02 FB | 	rdlong	local16, fp
14320     18 4E 85 F1 | 	sub	fp, #24
14324     0C 44 0E F2 | 	cmp	local16, #12 wz
14328     74 01 90 5D |  if_ne	jmp	#LR__1638
1432c     1C 4E 05 F1 | 	add	fp, #28
14330     A7 32 02 FB | 	rdlong	local07, fp
14334     1C 4E 85 F1 | 	sub	fp, #28
14338     00 04 00 FF 
1433c     00 32 16 F2 | 	cmp	local07, ##524288 wc
14340     5C 01 90 3D |  if_ae	jmp	#LR__1638
14344                 | '     if r=result_int then lpoke t1.result.uresult, val%(args(i))
14344     52 00 00 FF 
14348     10 E5 05 F1 | 	add	objptr, ##42256
1434c     F2 44 02 FB | 	rdlong	local16, objptr
14350     52 00 00 FF 
14354     10 E5 85 F1 | 	sub	objptr, ##42256
14358     1C 44 0E F2 | 	cmp	local16, #28 wz
1435c     38 00 90 5D |  if_ne	jmp	#LR__1634
14360     1C 4E 05 F1 | 	add	fp, #28
14364     A7 44 02 FB | 	rdlong	local16, fp
14368     14 4F 05 F1 | 	add	fp, #276
1436c     A7 32 02 FB | 	rdlong	local07, fp
14370     19 35 02 F6 | 	mov	local08, local07
14374     02 34 66 F0 | 	shl	local08, #2
14378     04 4F 85 F1 | 	sub	fp, #260
1437c     A7 36 02 F6 | 	mov	local09, fp
14380     A7 34 02 F1 | 	add	local08, fp
14384     1A 13 02 FB | 	rdlong	arg01, local08
14388     00 14 06 F6 | 	mov	arg02, #0
1438c     2C 4E 85 F1 | 	sub	fp, #44
14390     78 5A B1 FD | 	call	#__system____builtin_atoi
14394     22 FB 61 FC | 	wrlong	result1, local16
14398                 | LR__1634
14398                 | '     if r=result_uint then lpoke t1.result.uresult, val%(args(i))
14398     52 00 00 FF 
1439c     10 E5 05 F1 | 	add	objptr, ##42256
143a0     F2 44 02 FB | 	rdlong	local16, objptr
143a4     52 00 00 FF 
143a8     10 E5 85 F1 | 	sub	objptr, ##42256
143ac     1D 44 0E F2 | 	cmp	local16, #29 wz
143b0     38 00 90 5D |  if_ne	jmp	#LR__1635
143b4     1C 4E 05 F1 | 	add	fp, #28
143b8     A7 44 02 FB | 	rdlong	local16, fp
143bc     14 4F 05 F1 | 	add	fp, #276
143c0     A7 32 02 FB | 	rdlong	local07, fp
143c4     19 35 02 F6 | 	mov	local08, local07
143c8     02 34 66 F0 | 	shl	local08, #2
143cc     04 4F 85 F1 | 	sub	fp, #260
143d0     A7 36 02 F6 | 	mov	local09, fp
143d4     A7 34 02 F1 | 	add	local08, fp
143d8     1A 13 02 FB | 	rdlong	arg01, local08
143dc     00 14 06 F6 | 	mov	arg02, #0
143e0     2C 4E 85 F1 | 	sub	fp, #44
143e4     24 5A B1 FD | 	call	#__system____builtin_atoi
143e8     22 FB 61 FC | 	wrlong	result1, local16
143ec                 | LR__1635
143ec                 | '     if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
143ec     52 00 00 FF 
143f0     10 E5 05 F1 | 	add	objptr, ##42256
143f4     F2 44 02 FB | 	rdlong	local16, objptr
143f8     52 00 00 FF 
143fc     10 E5 85 F1 | 	sub	objptr, ##42256
14400     1E 44 0E F2 | 	cmp	local16, #30 wz
14404     3C 00 90 5D |  if_ne	jmp	#LR__1636
14408     30 4F 05 F1 | 	add	fp, #304
1440c     A7 32 02 FB | 	rdlong	local07, fp
14410     02 32 66 F0 | 	shl	local07, #2
14414     04 4F 85 F1 | 	sub	fp, #260
14418     A7 34 02 F6 | 	mov	local08, fp
1441c     A7 32 02 F1 | 	add	local07, fp
14420     19 13 02 FB | 	rdlong	arg01, local07
14424     2C 4E 85 F1 | 	sub	fp, #44
14428     74 5B B1 FD | 	call	#__system____builtin_atof
1442c     28 4E 05 F1 | 	add	fp, #40
14430     A7 FA 61 FC | 	wrlong	result1, fp
14434     0C 4E 85 F1 | 	sub	fp, #12
14438     A7 44 02 FB | 	rdlong	local16, fp
1443c     1C 4E 85 F1 | 	sub	fp, #28
14440     22 FB 61 FC | 	wrlong	result1, local16
14444                 | LR__1636
14444                 | '     if r=result_string2 then lpoke t1.result.uresult,stringaddr
14444     52 00 00 FF 
14448     10 E5 05 F1 | 	add	objptr, ##42256
1444c     F2 44 02 FB | 	rdlong	local16, objptr
14450     52 00 00 FF 
14454     10 E5 85 F1 | 	sub	objptr, ##42256
14458     2B 44 0E F2 | 	cmp	local16, #43 wz
1445c     18 00 90 5D |  if_ne	jmp	#LR__1637
14460     1C 4E 05 F1 | 	add	fp, #28
14464     A7 12 02 FB | 	rdlong	arg01, fp
14468     0C 4E 85 F1 | 	sub	fp, #12
1446c     A7 14 02 FB | 	rdlong	arg02, fp
14470     10 4E 85 F1 | 	sub	fp, #16
14474     09 15 62 FC | 	wrlong	arg02, arg01
14478                 | LR__1637
14478     1C 4E 05 F1 | 	add	fp, #28
1447c     A7 12 02 FB | 	rdlong	arg01, fp
14480     1C 4E 85 F1 | 	sub	fp, #28
14484     08 12 06 F1 | 	add	arg01, #8
14488     52 00 00 FF 
1448c     10 E5 05 F1 | 	add	objptr, ##42256
14490     F2 14 02 FB | 	rdlong	arg02, objptr
14494     52 00 00 FF 
14498     10 E5 85 F1 | 	sub	objptr, ##42256
1449c     09 15 62 FC | 	wrlong	arg02, arg01
144a0                 | LR__1638
144a0                 | '   if esize=12 andalso t1.result.uresult>=$80000 then
144a0     18 4E 05 F1 | 	add	fp, #24
144a4     A7 44 02 FB | 	rdlong	local16, fp
144a8     18 4E 85 F1 | 	sub	fp, #24
144ac     0C 44 0E F2 | 	cmp	local16, #12 wz
144b0     94 01 90 5D |  if_ne	jmp	#LR__1643
144b4     1C 4E 05 F1 | 	add	fp, #28
144b8     A7 32 02 FB | 	rdlong	local07, fp
144bc     1C 4E 85 F1 | 	sub	fp, #28
144c0     00 04 00 FF 
144c4     00 32 16 F2 | 	cmp	local07, ##524288 wc
144c8     7C 01 90 CD |  if_b	jmp	#LR__1643
144cc                 | '     if r=result_int then pslpoke t1.result.uresult, val%(args(i))
144cc     52 00 00 FF 
144d0     10 E5 05 F1 | 	add	objptr, ##42256
144d4     F2 44 02 FB | 	rdlong	local16, objptr
144d8     52 00 00 FF 
144dc     10 E5 85 F1 | 	sub	objptr, ##42256
144e0     1C 44 0E F2 | 	cmp	local16, #28 wz
144e4     40 00 90 5D |  if_ne	jmp	#LR__1639
144e8     1C 4E 05 F1 | 	add	fp, #28
144ec     A7 44 02 FB | 	rdlong	local16, fp
144f0     14 4F 05 F1 | 	add	fp, #276
144f4     A7 32 02 FB | 	rdlong	local07, fp
144f8     19 35 02 F6 | 	mov	local08, local07
144fc     02 34 66 F0 | 	shl	local08, #2
14500     04 4F 85 F1 | 	sub	fp, #260
14504     A7 36 02 F6 | 	mov	local09, fp
14508     A7 34 02 F1 | 	add	local08, fp
1450c     1A 13 02 FB | 	rdlong	arg01, local08
14510     00 14 06 F6 | 	mov	arg02, #0
14514     2C 4E 85 F1 | 	sub	fp, #44
14518     F0 58 B1 FD | 	call	#__system____builtin_atoi
1451c     FD 14 02 F6 | 	mov	arg02, result1
14520     22 13 02 F6 | 	mov	arg01, local16
14524     A0 EB B0 FD | 	call	#_pslpoke
14528                 | LR__1639
14528                 | '     if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
14528     52 00 00 FF 
1452c     10 E5 05 F1 | 	add	objptr, ##42256
14530     F2 44 02 FB | 	rdlong	local16, objptr
14534     52 00 00 FF 
14538     10 E5 85 F1 | 	sub	objptr, ##42256
1453c     1D 44 0E F2 | 	cmp	local16, #29 wz
14540     40 00 90 5D |  if_ne	jmp	#LR__1640
14544     1C 4E 05 F1 | 	add	fp, #28
14548     A7 44 02 FB | 	rdlong	local16, fp
1454c     14 4F 05 F1 | 	add	fp, #276
14550     A7 32 02 FB | 	rdlong	local07, fp
14554     19 35 02 F6 | 	mov	local08, local07
14558     02 34 66 F0 | 	shl	local08, #2
1455c     04 4F 85 F1 | 	sub	fp, #260
14560     A7 36 02 F6 | 	mov	local09, fp
14564     A7 34 02 F1 | 	add	local08, fp
14568     1A 13 02 FB | 	rdlong	arg01, local08
1456c     00 14 06 F6 | 	mov	arg02, #0
14570     2C 4E 85 F1 | 	sub	fp, #44
14574     94 58 B1 FD | 	call	#__system____builtin_atoi
14578     FD 14 02 F6 | 	mov	arg02, result1
1457c     22 13 02 F6 | 	mov	arg01, local16
14580     44 EB B0 FD | 	call	#_pslpoke
14584                 | LR__1640
14584                 | '     if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
14584     52 00 00 FF 
14588     10 E5 05 F1 | 	add	objptr, ##42256
1458c     F2 44 02 FB | 	rdlong	local16, objptr
14590     52 00 00 FF 
14594     10 E5 85 F1 | 	sub	objptr, ##42256
14598     1E 44 0E F2 | 	cmp	local16, #30 wz
1459c     4C 00 90 5D |  if_ne	jmp	#LR__1641
145a0     30 4F 05 F1 | 	add	fp, #304
145a4     A7 32 02 FB | 	rdlong	local07, fp
145a8     02 32 66 F0 | 	shl	local07, #2
145ac     04 4F 85 F1 | 	sub	fp, #260
145b0     A7 34 02 F6 | 	mov	local08, fp
145b4     A7 32 02 F1 | 	add	local07, fp
145b8     19 13 02 FB | 	rdlong	arg01, local07
145bc     2C 4E 85 F1 | 	sub	fp, #44
145c0     DC 59 B1 FD | 	call	#__system____builtin_atof
145c4     28 4E 05 F1 | 	add	fp, #40
145c8     A7 FA 61 FC | 	wrlong	result1, fp
145cc     0C 4E 85 F1 | 	sub	fp, #12
145d0     A7 44 02 FB | 	rdlong	local16, fp
145d4     0C 4E 05 F1 | 	add	fp, #12
145d8     A7 12 02 F6 | 	mov	arg01, fp
145dc     28 4E 85 F1 | 	sub	fp, #40
145e0     09 15 02 FB | 	rdlong	arg02, arg01
145e4     22 13 02 F6 | 	mov	arg01, local16
145e8     DC EA B0 FD | 	call	#_pslpoke
145ec                 | LR__1641
145ec                 | '     if r=result_string2 then pslpoke t1.result.uresult,stringaddr
145ec     52 00 00 FF 
145f0     10 E5 05 F1 | 	add	objptr, ##42256
145f4     F2 44 02 FB | 	rdlong	local16, objptr
145f8     52 00 00 FF 
145fc     10 E5 85 F1 | 	sub	objptr, ##42256
14600     2B 44 0E F2 | 	cmp	local16, #43 wz
14604     18 00 90 5D |  if_ne	jmp	#LR__1642
14608     1C 4E 05 F1 | 	add	fp, #28
1460c     A7 12 02 FB | 	rdlong	arg01, fp
14610     0C 4E 85 F1 | 	sub	fp, #12
14614     A7 14 02 FB | 	rdlong	arg02, fp
14618     10 4E 85 F1 | 	sub	fp, #16
1461c     A8 EA B0 FD | 	call	#_pslpoke
14620                 | LR__1642
14620     1C 4E 05 F1 | 	add	fp, #28
14624     A7 12 02 FB | 	rdlong	arg01, fp
14628     1C 4E 85 F1 | 	sub	fp, #28
1462c     08 12 06 F1 | 	add	arg01, #8
14630     52 00 00 FF 
14634     10 E5 05 F1 | 	add	objptr, ##42256
14638     F2 14 02 FB | 	rdlong	arg02, objptr
1463c     52 00 00 FF 
14640     10 E5 85 F1 | 	sub	objptr, ##42256
14644     80 EA B0 FD | 	call	#_pslpoke
14648                 | LR__1643
14648                 | '   if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
14648     18 4E 05 F1 | 	add	fp, #24
1464c     A7 44 02 FB | 	rdlong	local16, fp
14650     18 4E 85 F1 | 	sub	fp, #24
14654     05 44 0E F2 | 	cmp	local16, #5 wz
14658     52 00 00 AF 
1465c     10 E5 05 A1 |  if_e	add	objptr, ##42256
14660     F2 42 02 AB |  if_e	rdlong	local15, objptr
14664     52 00 00 AF 
14668     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1466c     2B 42 0E A2 |  if_e	cmp	local15, #43 wz
14670     18 00 90 5D |  if_ne	jmp	#LR__1644
14674     1C 4E 05 F1 | 	add	fp, #28
14678     A7 12 02 FB | 	rdlong	arg01, fp
1467c     0C 4E 85 F1 | 	sub	fp, #12
14680     A7 14 02 FB | 	rdlong	arg02, fp
14684     10 4E 85 F1 | 	sub	fp, #16
14688     3C EA B0 FD | 	call	#_pslpoke
1468c                 | LR__1644
1468c                 | '   if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1468c     18 4E 05 F1 | 	add	fp, #24
14690     A7 44 02 FB | 	rdlong	local16, fp
14694     18 4E 85 F1 | 	sub	fp, #24
14698     04 44 0E F2 | 	cmp	local16, #4 wz
1469c     54 00 90 5D |  if_ne	jmp	#LR__1645
146a0     52 00 00 FF 
146a4     10 E5 05 F1 | 	add	objptr, ##42256
146a8     F2 42 02 FB | 	rdlong	local15, objptr
146ac     52 00 00 FF 
146b0     10 E5 85 F1 | 	sub	objptr, ##42256
146b4     2B 42 0E F2 | 	cmp	local15, #43 wz
146b8     38 00 90 AD |  if_e	jmp	#LR__1645
146bc     1C 4E 05 F1 | 	add	fp, #28
146c0     A7 44 02 FB | 	rdlong	local16, fp
146c4     14 4F 05 F1 | 	add	fp, #276
146c8     A7 34 02 FB | 	rdlong	local08, fp
146cc     02 34 66 F0 | 	shl	local08, #2
146d0     04 4F 85 F1 | 	sub	fp, #260
146d4     A7 34 02 F1 | 	add	local08, fp
146d8     1A 13 02 FB | 	rdlong	arg01, local08
146dc     00 14 06 F6 | 	mov	arg02, #0
146e0     2C 4E 85 F1 | 	sub	fp, #44
146e4     24 57 B1 FD | 	call	#__system____builtin_atoi
146e8     FD 14 02 F6 | 	mov	arg02, result1
146ec     22 13 02 F6 | 	mov	arg01, local16
146f0     D4 E9 B0 FD | 	call	#_pslpoke
146f4                 | LR__1645
146f4                 | '   if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
146f4     18 4E 05 F1 | 	add	fp, #24
146f8     A7 44 02 FB | 	rdlong	local16, fp
146fc     18 4E 85 F1 | 	sub	fp, #24
14700     02 44 0E F2 | 	cmp	local16, #2 wz
14704     54 00 90 5D |  if_ne	jmp	#LR__1646
14708     52 00 00 FF 
1470c     10 E5 05 F1 | 	add	objptr, ##42256
14710     F2 42 02 FB | 	rdlong	local15, objptr
14714     52 00 00 FF 
14718     10 E5 85 F1 | 	sub	objptr, ##42256
1471c     2B 42 0E F2 | 	cmp	local15, #43 wz
14720     38 00 90 AD |  if_e	jmp	#LR__1646
14724     1C 4E 05 F1 | 	add	fp, #28
14728     A7 44 02 FB | 	rdlong	local16, fp
1472c     14 4F 05 F1 | 	add	fp, #276
14730     A7 34 02 FB | 	rdlong	local08, fp
14734     02 34 66 F0 | 	shl	local08, #2
14738     04 4F 85 F1 | 	sub	fp, #260
1473c     A7 34 02 F1 | 	add	local08, fp
14740     1A 13 02 FB | 	rdlong	arg01, local08
14744     00 14 06 F6 | 	mov	arg02, #0
14748     2C 4E 85 F1 | 	sub	fp, #44
1474c     BC 56 B1 FD | 	call	#__system____builtin_atoi
14750     FD 14 02 F6 | 	mov	arg02, result1
14754     22 13 02 F6 | 	mov	arg01, local16
14758     B4 E9 B0 FD | 	call	#_psdpoke
1475c                 | LR__1646
1475c                 | '   if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1475c     18 4E 05 F1 | 	add	fp, #24
14760     A7 44 02 FB | 	rdlong	local16, fp
14764     18 4E 85 F1 | 	sub	fp, #24
14768     01 44 0E F2 | 	cmp	local16, #1 wz
1476c     54 00 90 5D |  if_ne	jmp	#LR__1647
14770     52 00 00 FF 
14774     10 E5 05 F1 | 	add	objptr, ##42256
14778     F2 42 02 FB | 	rdlong	local15, objptr
1477c     52 00 00 FF 
14780     10 E5 85 F1 | 	sub	objptr, ##42256
14784     2B 42 0E F2 | 	cmp	local15, #43 wz
14788     38 00 90 AD |  if_e	jmp	#LR__1647
1478c     1C 4E 05 F1 | 	add	fp, #28
14790     A7 44 02 FB | 	rdlong	local16, fp
14794     14 4F 05 F1 | 	add	fp, #276
14798     A7 34 02 FB | 	rdlong	local08, fp
1479c     02 34 66 F0 | 	shl	local08, #2
147a0     04 4F 85 F1 | 	sub	fp, #260
147a4     A7 34 02 F1 | 	add	local08, fp
147a8     1A 13 02 FB | 	rdlong	arg01, local08
147ac     00 14 06 F6 | 	mov	arg02, #0
147b0     2C 4E 85 F1 | 	sub	fp, #44
147b4     54 56 B1 FD | 	call	#__system____builtin_atoi
147b8     FD 14 02 F6 | 	mov	arg02, result1
147bc     22 13 02 F6 | 	mov	arg01, local16
147c0     94 E9 B0 FD | 	call	#_pspoke
147c4                 | LR__1647
147c4                 | '   if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
147c4     18 4E 05 F1 | 	add	fp, #24
147c8     A7 44 02 FB | 	rdlong	local16, fp
147cc     18 4E 85 F1 | 	sub	fp, #24
147d0     06 44 0E F2 | 	cmp	local16, #6 wz
147d4     64 00 90 5D |  if_ne	jmp	#LR__1648
147d8     52 00 00 FF 
147dc     10 E5 05 F1 | 	add	objptr, ##42256
147e0     F2 42 02 FB | 	rdlong	local15, objptr
147e4     52 00 00 FF 
147e8     10 E5 85 F1 | 	sub	objptr, ##42256
147ec     2B 42 0E F2 | 	cmp	local15, #43 wz
147f0     48 00 90 AD |  if_e	jmp	#LR__1648
147f4     30 4F 05 F1 | 	add	fp, #304
147f8     A7 32 02 FB | 	rdlong	local07, fp
147fc     02 32 66 F0 | 	shl	local07, #2
14800     04 4F 85 F1 | 	sub	fp, #260
14804     A7 32 02 F1 | 	add	local07, fp
14808     19 13 02 FB | 	rdlong	arg01, local07
1480c     2C 4E 85 F1 | 	sub	fp, #44
14810     8C 57 B1 FD | 	call	#__system____builtin_atof
14814     28 4E 05 F1 | 	add	fp, #40
14818     A7 FA 61 FC | 	wrlong	result1, fp
1481c     0C 4E 85 F1 | 	sub	fp, #12
14820     A7 44 02 FB | 	rdlong	local16, fp
14824     0C 4E 05 F1 | 	add	fp, #12
14828     A7 12 02 F6 | 	mov	arg01, fp
1482c     28 4E 85 F1 | 	sub	fp, #40
14830     09 15 02 FB | 	rdlong	arg02, arg01
14834     22 13 02 F6 | 	mov	arg01, local16
14838     8C E8 B0 FD | 	call	#_pslpoke
1483c                 | LR__1648
1483c     30 4F 05 F1 | 	add	fp, #304
14840     A7 42 02 FB | 	rdlong	local15, fp
14844     01 42 06 F1 | 	add	local15, #1
14848     A7 42 62 FC | 	wrlong	local15, fp
1484c     30 4F 85 F1 | 	sub	fp, #304
14850     E4 F6 9F FD | 	jmp	#LR__1613
14854                 | LR__1649
14854                 | LR__1650
14854     A7 F0 03 F6 | 	mov	ptra, fp
14858     B2 00 A0 FD | 	call	#popregs_
1485c                 | _do_input_ret
1485c     2D 00 64 FD | 	ret
14860                 | 
14860                 | ' 
14860                 | ' ' ----------------  left$
14860                 | ' 
14860                 | ' sub do_left
14860                 | _do_left
14860     00 4A 05 F6 | 	mov	COUNT_, #0
14864     A8 00 A0 FD | 	call	#pushregs_
14868     14 F0 07 F1 | 	add	ptra, #20
1486c     4A 00 00 FF 
14870     80 E4 05 F1 | 	add	objptr, ##38016
14874     F2 16 02 FB | 	rdlong	arg03, objptr
14878     0B 15 02 F6 | 	mov	arg02, arg03
1487c     01 14 66 F0 | 	shl	arg02, #1
14880     0B 15 02 F1 | 	add	arg02, arg03
14884     02 14 66 F0 | 	shl	arg02, #2
14888     03 00 00 FF 
1488c     04 E4 85 F1 | 	sub	objptr, ##1540
14890     F2 14 02 F1 | 	add	arg02, objptr
14894     0A 17 02 FB | 	rdlong	arg03, arg02
14898     0C 4E 05 F1 | 	add	fp, #12
1489c     A7 16 62 FC | 	wrlong	arg03, fp
148a0                 | ' 
148a0                 | ' numpar=compiledline(lineptr_e).result.uresult
148a0                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
148a0     0C 4E 85 F1 | 	sub	fp, #12
148a4     02 16 0E F2 | 	cmp	arg03, #2 wz
148a8     47 00 00 FF 
148ac     7C E4 85 F1 | 	sub	objptr, ##36476
148b0     40 00 90 AD |  if_e	jmp	#LR__1660
148b4     00 12 06 F6 | 	mov	arg01, #0
148b8     00 7D B1 FD | 	call	#__system___getiolock_0603
148bc     FD 12 02 F6 | 	mov	arg01, result1
148c0     54 20 B1 FD | 	call	#__system___lockmem
148c4     B7 01 00 FF 
148c8     31 14 06 F6 | 	mov	arg02, ##@LR__5907
148cc     00 12 06 F6 | 	mov	arg01, #0
148d0     00 16 06 F6 | 	mov	arg03, #0
148d4     38 2D B1 FD | 	call	#__system___basic_print_string
148d8     00 12 06 F6 | 	mov	arg01, #0
148dc     DC 7C B1 FD | 	call	#__system___getiolock_0603
148e0     FD 00 68 FC | 	wrlong	#0, result1
148e4     27 12 06 F6 | 	mov	arg01, #39
148e8     00 14 06 F6 | 	mov	arg02, #0
148ec     38 E6 B0 FD | 	call	#_printerror
148f0     EC 00 90 FD | 	jmp	#LR__1663
148f4                 | LR__1660
148f4     90 8C BF FD | 	call	#_pop
148f8     FF 16 02 F6 | 	mov	arg03, result3
148fc     A7 FA 61 FC | 	wrlong	result1, fp
14900     04 4E 05 F1 | 	add	fp, #4
14904     A7 FC 61 FC | 	wrlong	result2, fp
14908     04 4E 05 F1 | 	add	fp, #4
1490c     A7 16 62 FC | 	wrlong	arg03, fp
14910     08 4E 85 F1 | 	sub	fp, #8
14914     A7 12 02 F6 | 	mov	arg01, fp
14918     50 8E BF FD | 	call	#_converttoint
1491c     FD 16 02 F6 | 	mov	arg03, result1
14920     10 4E 05 F1 | 	add	fp, #16
14924     A7 16 62 FC | 	wrlong	arg03, fp
14928     10 4E 85 F1 | 	sub	fp, #16
1492c     58 8C BF FD | 	call	#_pop
14930     FF 16 02 F6 | 	mov	arg03, result3
14934     A7 FA 61 FC | 	wrlong	result1, fp
14938     04 4E 05 F1 | 	add	fp, #4
1493c     A7 FC 61 FC | 	wrlong	result2, fp
14940     04 4E 05 F1 | 	add	fp, #4
14944     A7 16 62 FC | 	wrlong	arg03, fp
14948                 | ' t1=pop() : arg=converttoint(t1)
14948                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14948     08 4E 85 F1 | 	sub	fp, #8
1494c     2B 16 0E F2 | 	cmp	arg03, #43 wz
14950     18 00 90 5D |  if_ne	jmp	#LR__1661
14954     A7 12 02 FB | 	rdlong	arg01, fp
14958     A4 8D BF FD | 	call	#_convertstring
1495c     A7 FA 61 FC | 	wrlong	result1, fp
14960     08 4E 05 F1 | 	add	fp, #8
14964     A7 3E 68 FC | 	wrlong	#31, fp
14968     08 4E 85 F1 | 	sub	fp, #8
1496c                 | LR__1661
1496c                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
1496c     08 4E 05 F1 | 	add	fp, #8
14970     A7 16 02 FB | 	rdlong	arg03, fp
14974     08 4E 85 F1 | 	sub	fp, #8
14978     1F 16 0E F2 | 	cmp	arg03, #31 wz
1497c     40 00 90 AD |  if_e	jmp	#LR__1662
14980     00 12 06 F6 | 	mov	arg01, #0
14984     34 7C B1 FD | 	call	#__system___getiolock_0603
14988     FD 12 02 F6 | 	mov	arg01, result1
1498c     88 1F B1 FD | 	call	#__system___lockmem
14990     B7 01 00 FF 
14994     39 14 06 F6 | 	mov	arg02, ##@LR__5908
14998     00 12 06 F6 | 	mov	arg01, #0
1499c     00 16 06 F6 | 	mov	arg03, #0
149a0     6C 2C B1 FD | 	call	#__system___basic_print_string
149a4     00 12 06 F6 | 	mov	arg01, #0
149a8     10 7C B1 FD | 	call	#__system___getiolock_0603
149ac     FD 00 68 FC | 	wrlong	#0, result1
149b0     0F 12 06 F6 | 	mov	arg01, #15
149b4     00 14 06 F6 | 	mov	arg02, #0
149b8     6C E5 B0 FD | 	call	#_printerror
149bc     20 00 90 FD | 	jmp	#LR__1663
149c0                 | LR__1662
149c0     A7 12 02 FB | 	rdlong	arg01, fp
149c4     10 4E 05 F1 | 	add	fp, #16
149c8     A7 14 02 FB | 	rdlong	arg02, fp
149cc     10 4E 85 F1 | 	sub	fp, #16
149d0     C4 3F B1 FD | 	call	#__system__Left_S
149d4     A7 FA 61 FC | 	wrlong	result1, fp
149d8     A7 12 02 F6 | 	mov	arg01, fp
149dc     40 8C BF FD | 	call	#_push
149e0                 | LR__1663
149e0     A7 F0 03 F6 | 	mov	ptra, fp
149e4     B2 00 A0 FD | 	call	#popregs_
149e8                 | _do_left_ret
149e8     2D 00 64 FD | 	ret
149ec                 | 
149ec                 | ' 
149ec                 | ' ' ----------------  len
149ec                 | ' 
149ec                 | ' sub do_len
149ec                 | _do_len
149ec     02 4A 05 F6 | 	mov	COUNT_, #2
149f0     A8 00 A0 FD | 	call	#pushregs_
149f4     14 F0 07 F1 | 	add	ptra, #20
149f8     4A 00 00 FF 
149fc     80 E4 05 F1 | 	add	objptr, ##38016
14a00     F2 26 02 FB | 	rdlong	local01, objptr
14a04     13 17 02 F6 | 	mov	arg03, local01
14a08     01 16 66 F0 | 	shl	arg03, #1
14a0c     13 17 02 F1 | 	add	arg03, local01
14a10     02 16 66 F0 | 	shl	arg03, #2
14a14     03 00 00 FF 
14a18     04 E4 85 F1 | 	sub	objptr, ##1540
14a1c     F2 16 02 F1 | 	add	arg03, objptr
14a20     0B 17 02 FB | 	rdlong	arg03, arg03
14a24     0C 4E 05 F1 | 	add	fp, #12
14a28     A7 16 62 FC | 	wrlong	arg03, fp
14a2c                 | ' 
14a2c                 | ' numpar=compiledline(lineptr_e).result.uresult
14a2c                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
14a2c     0C 4E 85 F1 | 	sub	fp, #12
14a30     02 16 16 F2 | 	cmp	arg03, #2 wc
14a34     47 00 00 FF 
14a38     7C E4 85 F1 | 	sub	objptr, ##36476
14a3c     0C 4E 05 C1 |  if_b	add	fp, #12
14a40     A7 26 0A CB |  if_b	rdlong	local01, fp wz
14a44     0C 4E 85 C1 |  if_b	sub	fp, #12
14a48     40 00 90 4D |  if_c_and_nz	jmp	#LR__1670
14a4c     00 12 06 F6 | 	mov	arg01, #0
14a50     68 7B B1 FD | 	call	#__system___getiolock_0603
14a54     FD 12 02 F6 | 	mov	arg01, result1
14a58     BC 1E B1 FD | 	call	#__system___lockmem
14a5c     B7 01 00 FF 
14a60     41 14 06 F6 | 	mov	arg02, ##@LR__5909
14a64     00 12 06 F6 | 	mov	arg01, #0
14a68     00 16 06 F6 | 	mov	arg03, #0
14a6c     A0 2B B1 FD | 	call	#__system___basic_print_string
14a70     00 12 06 F6 | 	mov	arg01, #0
14a74     44 7B B1 FD | 	call	#__system___getiolock_0603
14a78     FD 00 68 FC | 	wrlong	#0, result1
14a7c     27 12 06 F6 | 	mov	arg01, #39
14a80     00 14 06 F6 | 	mov	arg02, #0
14a84     A0 E4 B0 FD | 	call	#_printerror
14a88     C8 00 90 FD | 	jmp	#LR__1675
14a8c                 | LR__1670
14a8c     F8 8A BF FD | 	call	#_pop
14a90     FF 16 02 F6 | 	mov	arg03, result3
14a94     A7 FA 61 FC | 	wrlong	result1, fp
14a98     04 4E 05 F1 | 	add	fp, #4
14a9c     A7 FC 61 FC | 	wrlong	result2, fp
14aa0     04 4E 05 F1 | 	add	fp, #4
14aa4     A7 16 62 FC | 	wrlong	arg03, fp
14aa8                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14aa8     08 4E 85 F1 | 	sub	fp, #8
14aac     2B 16 0E F2 | 	cmp	arg03, #43 wz
14ab0     18 00 90 5D |  if_ne	jmp	#LR__1671
14ab4     A7 12 02 FB | 	rdlong	arg01, fp
14ab8     44 8C BF FD | 	call	#_convertstring
14abc     A7 FA 61 FC | 	wrlong	result1, fp
14ac0     08 4E 05 F1 | 	add	fp, #8
14ac4     A7 3E 68 FC | 	wrlong	#31, fp
14ac8     08 4E 85 F1 | 	sub	fp, #8
14acc                 | LR__1671
14acc                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
14acc     08 4E 05 F1 | 	add	fp, #8
14ad0     A7 16 02 FB | 	rdlong	arg03, fp
14ad4     08 4E 85 F1 | 	sub	fp, #8
14ad8     1F 16 0E F2 | 	cmp	arg03, #31 wz
14adc     40 00 90 AD |  if_e	jmp	#LR__1672
14ae0     00 12 06 F6 | 	mov	arg01, #0
14ae4     D4 7A B1 FD | 	call	#__system___getiolock_0603
14ae8     FD 12 02 F6 | 	mov	arg01, result1
14aec     28 1E B1 FD | 	call	#__system___lockmem
14af0     B7 01 00 FF 
14af4     47 14 06 F6 | 	mov	arg02, ##@LR__5910
14af8     00 12 06 F6 | 	mov	arg01, #0
14afc     00 16 06 F6 | 	mov	arg03, #0
14b00     0C 2B B1 FD | 	call	#__system___basic_print_string
14b04     00 12 06 F6 | 	mov	arg01, #0
14b08     B0 7A B1 FD | 	call	#__system___getiolock_0603
14b0c     FD 00 68 FC | 	wrlong	#0, result1
14b10     0F 12 06 F6 | 	mov	arg01, #15
14b14     00 14 06 F6 | 	mov	arg02, #0
14b18     0C E4 B0 FD | 	call	#_printerror
14b1c     34 00 90 FD | 	jmp	#LR__1675
14b20                 | LR__1672
14b20     A7 12 02 FB | 	rdlong	arg01, fp
14b24     09 29 02 F6 | 	mov	local02, arg01
14b28     97 06 48 FB | 	callpa	#(@LR__1674-@LR__1673)>>2,fcache_load_ptr_
14b2c                 | LR__1673
14b2c     14 FB C9 FA | 	rdbyte	result1, local02 wz
14b30     01 28 06 51 |  if_ne	add	local02, #1
14b34     F4 FF 9F 5D |  if_ne	jmp	#LR__1673
14b38                 | LR__1674
14b38     09 29 82 F1 | 	sub	local02, arg01
14b3c     A7 28 62 FC | 	wrlong	local02, fp
14b40     08 4E 05 F1 | 	add	fp, #8
14b44     A7 38 68 FC | 	wrlong	#28, fp
14b48     08 4E 85 F1 | 	sub	fp, #8
14b4c     A7 12 02 F6 | 	mov	arg01, fp
14b50     CC 8A BF FD | 	call	#_push
14b54                 | LR__1675
14b54     A7 F0 03 F6 | 	mov	ptra, fp
14b58     B2 00 A0 FD | 	call	#popregs_
14b5c                 | _do_len_ret
14b5c     2D 00 64 FD | 	ret
14b60                 | 
14b60                 | ' 
14b60                 | ' ' ----------------  list
14b60                 | ' 
14b60                 | ' sub do_list
14b60                 | _do_list
14b60     02 4A 05 F6 | 	mov	COUNT_, #2
14b64     A8 00 A0 FD | 	call	#pushregs_
14b68     B8 F0 07 F1 | 	add	ptra, #184
14b6c     04 4E 05 F1 | 	add	fp, #4
14b70     A7 00 68 FC | 	wrlong	#0, fp
14b74     04 4E 05 F1 | 	add	fp, #4
14b78     FF FF BF FF 
14b7c     A7 FE 6B FC | 	wrlong	##2147483647, fp
14b80     08 4E 85 F1 | 	sub	fp, #8
14b84     4A 00 00 FF 
14b88     80 E4 05 F1 | 	add	objptr, ##38016
14b8c     F2 26 02 FB | 	rdlong	local01, objptr
14b90     13 17 02 F6 | 	mov	arg03, local01
14b94     01 16 66 F0 | 	shl	arg03, #1
14b98     13 17 02 F1 | 	add	arg03, local01
14b9c     02 16 66 F0 | 	shl	arg03, #2
14ba0     03 00 00 FF 
14ba4     04 E4 85 F1 | 	sub	objptr, ##1540
14ba8     F2 16 02 F1 | 	add	arg03, objptr
14bac     0B 17 02 FB | 	rdlong	arg03, arg03
14bb0     A7 16 62 FC | 	wrlong	arg03, fp
14bb4                 | ' 
14bb4                 | ' startline=0 : endline=$7FFFFFFF
14bb4                 | ' numpar=compiledline(lineptr_e).result.uresult
14bb4                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
14bb4     01 16 0E F2 | 	cmp	arg03, #1 wz
14bb8     47 00 00 FF 
14bbc     7C E4 85 F1 | 	sub	objptr, ##36476
14bc0     3C 00 90 5D |  if_ne	jmp	#LR__1680
14bc4     C0 89 BF FD | 	call	#_pop
14bc8     FF 26 02 F6 | 	mov	local01, result3
14bcc     0C 4E 05 F1 | 	add	fp, #12
14bd0     A7 FA 61 FC | 	wrlong	result1, fp
14bd4     04 4E 05 F1 | 	add	fp, #4
14bd8     A7 FC 61 FC | 	wrlong	result2, fp
14bdc     04 4E 05 F1 | 	add	fp, #4
14be0     A7 26 62 FC | 	wrlong	local01, fp
14be4     08 4E 85 F1 | 	sub	fp, #8
14be8     A7 12 02 F6 | 	mov	arg01, fp
14bec     0C 4E 85 F1 | 	sub	fp, #12
14bf0     78 8B BF FD | 	call	#_converttoint
14bf4     04 4E 05 F1 | 	add	fp, #4
14bf8     A7 FA 61 FC | 	wrlong	result1, fp
14bfc     04 4E 85 F1 | 	sub	fp, #4
14c00                 | LR__1680
14c00                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
14c00     A7 16 02 FB | 	rdlong	arg03, fp
14c04     02 16 0E F2 | 	cmp	arg03, #2 wz
14c08     7C 00 90 5D |  if_ne	jmp	#LR__1681
14c0c     78 89 BF FD | 	call	#_pop
14c10     FF 26 02 F6 | 	mov	local01, result3
14c14     0C 4E 05 F1 | 	add	fp, #12
14c18     A7 FA 61 FC | 	wrlong	result1, fp
14c1c     04 4E 05 F1 | 	add	fp, #4
14c20     A7 FC 61 FC | 	wrlong	result2, fp
14c24     04 4E 05 F1 | 	add	fp, #4
14c28     A7 26 62 FC | 	wrlong	local01, fp
14c2c     08 4E 85 F1 | 	sub	fp, #8
14c30     A7 12 02 F6 | 	mov	arg01, fp
14c34     0C 4E 85 F1 | 	sub	fp, #12
14c38     30 8B BF FD | 	call	#_converttoint
14c3c     FD 26 02 F6 | 	mov	local01, result1
14c40     08 4E 05 F1 | 	add	fp, #8
14c44     A7 26 62 FC | 	wrlong	local01, fp
14c48     08 4E 85 F1 | 	sub	fp, #8
14c4c     38 89 BF FD | 	call	#_pop
14c50     FF 26 02 F6 | 	mov	local01, result3
14c54     0C 4E 05 F1 | 	add	fp, #12
14c58     A7 FA 61 FC | 	wrlong	result1, fp
14c5c     04 4E 05 F1 | 	add	fp, #4
14c60     A7 FC 61 FC | 	wrlong	result2, fp
14c64     04 4E 05 F1 | 	add	fp, #4
14c68     A7 26 62 FC | 	wrlong	local01, fp
14c6c     08 4E 85 F1 | 	sub	fp, #8
14c70     A7 12 02 F6 | 	mov	arg01, fp
14c74     0C 4E 85 F1 | 	sub	fp, #12
14c78     F0 8A BF FD | 	call	#_converttoint
14c7c     04 4E 05 F1 | 	add	fp, #4
14c80     A7 FA 61 FC | 	wrlong	result1, fp
14c84     04 4E 85 F1 | 	sub	fp, #4
14c88                 | LR__1681
14c88                 | ' 
14c88                 | ' 
14c88                 | ' print
14c88     00 12 06 F6 | 	mov	arg01, #0
14c8c     2C 79 B1 FD | 	call	#__system___getiolock_0603
14c90     FD 12 02 F6 | 	mov	arg01, result1
14c94     80 1C B1 FD | 	call	#__system___lockmem
14c98     00 12 06 F6 | 	mov	arg01, #0
14c9c     0A 14 06 F6 | 	mov	arg02, #10
14ca0     00 16 06 F6 | 	mov	arg03, #0
14ca4     10 29 B1 FD | 	call	#__system___basic_print_char
14ca8     00 12 06 F6 | 	mov	arg01, #0
14cac     0C 79 B1 FD | 	call	#__system___getiolock_0603
14cb0     FD 00 68 FC | 	wrlong	#0, result1
14cb4     4A 00 00 FF 
14cb8     88 E4 05 F1 | 	add	objptr, ##38024
14cbc     F2 28 02 FB | 	rdlong	local02, objptr
14cc0     08 00 00 FF 
14cc4     94 E4 05 F1 | 	add	objptr, ##4244
14cc8     F2 28 62 FC | 	wrlong	local02, objptr
14ccc     52 00 00 FF 
14cd0     1C E5 85 F1 | 	sub	objptr, ##42268
14cd4                 | ' do 
14cd4                 | LR__1682
14cd4     20 4E 05 F1 | 	add	fp, #32
14cd8     A7 12 02 F6 | 	mov	arg01, fp
14cdc     20 4E 85 F1 | 	sub	fp, #32
14ce0     52 00 00 FF 
14ce4     1C E5 05 F1 | 	add	objptr, ##42268
14ce8     F2 14 02 FB | 	rdlong	arg02, objptr
14cec     18 16 06 F6 | 	mov	arg03, #24
14cf0     47 00 00 FF 
14cf4     50 E4 85 F1 | 	sub	objptr, ##36432
14cf8     94 0F B1 FD | 	call	#_psram_spin2_read1
14cfc     0B 00 00 FF 
14d00     CC E4 85 F1 | 	sub	objptr, ##5836
14d04                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
14d04                 | '   
14d04                 | '   if header(0)<> $FFFFFFFF then
14d04     20 4E 05 F1 | 	add	fp, #32
14d08     A7 28 02 FB | 	rdlong	local02, fp
14d0c     20 4E 85 F1 | 	sub	fp, #32
14d10     FF FF 7F FF 
14d14     FF 29 0E F2 | 	cmp	local02, ##-1 wz
14d18     A8 00 90 AD |  if_e	jmp	#LR__1684
14d1c     38 4E 05 F1 | 	add	fp, #56
14d20     3F 16 06 F6 | 	mov	arg03, #63
14d24     28 16 62 FD | 	setq	arg03
14d28     A7 00 68 FC | 	wrlong	#0, fp
14d2c     A7 12 02 F6 | 	mov	arg01, fp
14d30     10 4E 85 F1 | 	sub	fp, #16
14d34     A7 14 02 FB | 	rdlong	arg02, fp
14d38     04 4E 05 F1 | 	add	fp, #4
14d3c     A7 16 02 FB | 	rdlong	arg03, fp
14d40     2C 4E 85 F1 | 	sub	fp, #44
14d44     0B 00 00 FF 
14d48     CC E4 05 F1 | 	add	objptr, ##5836
14d4c     40 0F B1 FD | 	call	#_psram_spin2_read1
14d50     0B 00 00 FF 
14d54     CC E4 85 F1 | 	sub	objptr, ##5836
14d58                 | '     longfill(linebuf,0,64)
14d58                 | '     psram.read1(varptr(linebuf),header(2),header(3))
14d58                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
14d58     20 4E 05 F1 | 	add	fp, #32
14d5c     A7 28 02 FB | 	rdlong	local02, fp
14d60     1C 4E 85 F1 | 	sub	fp, #28
14d64     A7 26 02 FB | 	rdlong	local01, fp
14d68     04 4E 85 F1 | 	sub	fp, #4
14d6c     13 29 52 F2 | 	cmps	local02, local01 wc
14d70     30 00 90 CD |  if_b	jmp	#LR__1683
14d74     20 4E 05 F1 | 	add	fp, #32
14d78     A7 28 02 FB | 	rdlong	local02, fp
14d7c     18 4E 85 F1 | 	sub	fp, #24
14d80     A7 16 02 FB | 	rdlong	arg03, fp
14d84     08 4E 85 F1 | 	sub	fp, #8
14d88     0B 29 5A F2 | 	cmps	local02, arg03 wcz
14d8c     14 00 90 1D |  if_a	jmp	#LR__1683
14d90     38 4E 05 F1 | 	add	fp, #56
14d94     A7 12 02 F6 | 	mov	arg01, fp
14d98     38 4E 85 F1 | 	sub	fp, #56
14d9c                 | ' 
14d9c                 | ' write(text)
14d9c     B4 02 B1 FD | 	call	#_hg010b_spin2_write
14da0                 | ' crlf
14da0     B0 07 B1 FD | 	call	#_hg010b_spin2_crlf
14da4                 | LR__1683
14da4     34 4E 05 F1 | 	add	fp, #52
14da8     A7 28 02 FB | 	rdlong	local02, fp
14dac     34 4E 85 F1 | 	sub	fp, #52
14db0     52 00 00 FF 
14db4     1C E5 05 F1 | 	add	objptr, ##42268
14db8     F2 28 62 FC | 	wrlong	local02, objptr
14dbc     52 00 00 FF 
14dc0     1C E5 85 F1 | 	sub	objptr, ##42268
14dc4                 | LR__1684
14dc4     34 4E 05 F1 | 	add	fp, #52
14dc8     A7 28 02 FB | 	rdlong	local02, fp
14dcc     34 4E 85 F1 | 	sub	fp, #52
14dd0     FF FF 3F FF 
14dd4     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
14dd8     20 4E 05 51 |  if_ne	add	fp, #32
14ddc     A7 26 02 5B |  if_ne	rdlong	local01, fp
14de0     20 4E 85 51 |  if_ne	sub	fp, #32
14de4     FF FF 7F 5F 
14de8     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
14dec     E4 FE 9F 5D |  if_ne	jmp	#LR__1682
14df0     A7 F0 03 F6 | 	mov	ptra, fp
14df4     B2 00 A0 FD | 	call	#popregs_
14df8                 | _do_list_ret
14df8     2D 00 64 FD | 	ret
14dfc                 | 
14dfc                 | ' 
14dfc                 | ' '-------------------- load
14dfc                 | ' 
14dfc                 | ' sub do_load(amode=0 as integer)  
14dfc                 | _do_load
14dfc     01 4A 05 F6 | 	mov	COUNT_, #1
14e00     A8 00 A0 FD | 	call	#pushregs_
14e04     AC F0 07 F1 | 	add	ptra, #172
14e08     A7 12 62 FC | 	wrlong	arg01, fp
14e0c     52 00 00 FF 
14e10     D4 E4 05 F1 | 	add	objptr, ##42196
14e14     F2 02 68 FC | 	wrlong	#1, objptr
14e18     08 00 00 FF 
14e1c     54 E4 85 F1 | 	sub	objptr, ##4180
14e20     F2 14 02 FB | 	rdlong	arg02, objptr
14e24     0A 13 02 F6 | 	mov	arg01, arg02
14e28     01 12 66 F0 | 	shl	arg01, #1
14e2c     0A 13 02 F1 | 	add	arg01, arg02
14e30     02 12 66 F0 | 	shl	arg01, #2
14e34     03 00 00 FF 
14e38     04 E4 85 F1 | 	sub	objptr, ##1540
14e3c     F2 12 02 F1 | 	add	arg01, objptr
14e40     09 15 02 FB | 	rdlong	arg02, arg01
14e44     1C 4E 05 F1 | 	add	fp, #28
14e48     A7 14 62 FC | 	wrlong	arg02, fp
14e4c     8C 4E 05 F1 | 	add	fp, #140
14e50     A7 12 02 F6 | 	mov	arg01, fp
14e54     47 00 00 FF 
14e58     7C E4 85 F1 | 	sub	objptr, ##36476
14e5c     80 4E 85 F1 | 	sub	fp, #128
14e60     09 4F 61 FC | 	wrlong	fp, arg01
14e64                 | ' 
14e64                 | ' inload=1
14e64                 | ' numpar=compiledline(lineptr_e).result.uresult
14e64                 | ' lpoke varptr(line2$),varptr(line2)
14e64                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
14e64     0C 4E 85 F1 | 	sub	fp, #12
14e68     A7 26 02 FB | 	rdlong	local01, fp
14e6c     1C 4E 85 F1 | 	sub	fp, #28
14e70     01 26 56 F2 | 	cmps	local01, #1 wc
14e74     24 00 90 CD |  if_b	jmp	#LR__1690
14e78     0C 87 BF FD | 	call	#_pop
14e7c     04 4E 05 F1 | 	add	fp, #4
14e80     A7 FA 61 FC | 	wrlong	result1, fp
14e84     04 4E 05 F1 | 	add	fp, #4
14e88     A7 FC 61 FC | 	wrlong	result2, fp
14e8c     04 4E 05 F1 | 	add	fp, #4
14e90     A7 FE 61 FC | 	wrlong	result3, fp
14e94     0C 4E 85 F1 | 	sub	fp, #12
14e98     28 00 90 FD | 	jmp	#LR__1691
14e9c                 | LR__1690
14e9c     52 00 00 FF 
14ea0     C4 E4 05 F1 | 	add	objptr, ##42180
14ea4     F2 26 02 FB | 	rdlong	local01, objptr
14ea8     52 00 00 FF 
14eac     C4 E4 85 F1 | 	sub	objptr, ##42180
14eb0     04 4E 05 F1 | 	add	fp, #4
14eb4     A7 26 62 FC | 	wrlong	local01, fp
14eb8     08 4E 05 F1 | 	add	fp, #8
14ebc     A7 3E 68 FC | 	wrlong	#31, fp
14ec0     0C 4E 85 F1 | 	sub	fp, #12
14ec4                 | LR__1691
14ec4                 | ' 'print "popped "; t1.result.uresult, t1.result_type
14ec4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
14ec4     0C 4E 05 F1 | 	add	fp, #12
14ec8     A7 26 02 FB | 	rdlong	local01, fp
14ecc     0C 4E 85 F1 | 	sub	fp, #12
14ed0     2B 26 0E F2 | 	cmp	local01, #43 wz
14ed4     24 00 90 5D |  if_ne	jmp	#LR__1692
14ed8     04 4E 05 F1 | 	add	fp, #4
14edc     A7 12 02 FB | 	rdlong	arg01, fp
14ee0     04 4E 85 F1 | 	sub	fp, #4
14ee4     18 88 BF FD | 	call	#_convertstring
14ee8     04 4E 05 F1 | 	add	fp, #4
14eec     A7 FA 61 FC | 	wrlong	result1, fp
14ef0     08 4E 05 F1 | 	add	fp, #8
14ef4     A7 3E 68 FC | 	wrlong	#31, fp
14ef8     0C 4E 85 F1 | 	sub	fp, #12
14efc                 | LR__1692
14efc                 | ' if t1.result_type=result_string then
14efc     0C 4E 05 F1 | 	add	fp, #12
14f00     A7 26 02 FB | 	rdlong	local01, fp
14f04     0C 4E 85 F1 | 	sub	fp, #12
14f08     1F 26 0E F2 | 	cmp	local01, #31 wz
14f0c     E8 02 90 5D |  if_ne	jmp	#LR__1698
14f10                 | '   if amode<>1234 then do_new
14f10     A7 26 02 FB | 	rdlong	local01, fp
14f14     02 00 00 FF 
14f18     D2 26 0E F2 | 	cmp	local01, ##1234 wz
14f1c     10 0E B0 5D |  if_ne	call	#_do_new
14f20                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
14f20     04 4E 05 F1 | 	add	fp, #4
14f24     A7 12 02 FB | 	rdlong	arg01, fp
14f28     04 4E 85 F1 | 	sub	fp, #4
14f2c     B7 01 00 FF 
14f30     4D 14 06 F6 | 	mov	arg02, ##@LR__5911
14f34     08 1A B1 FD | 	call	#__system___string_cmp
14f38     00 FA 0D F2 | 	cmp	result1, #0 wz
14f3c     24 00 90 5D |  if_ne	jmp	#LR__1693
14f40     52 00 00 FF 
14f44     C4 E4 05 F1 | 	add	objptr, ##42180
14f48     F2 26 02 FB | 	rdlong	local01, objptr
14f4c     52 00 00 FF 
14f50     C4 E4 85 F1 | 	sub	objptr, ##42180
14f54     04 4E 05 F1 | 	add	fp, #4
14f58     A7 26 62 FC | 	wrlong	local01, fp
14f5c     04 4E 85 F1 | 	sub	fp, #4
14f60     20 00 90 FD | 	jmp	#LR__1694
14f64                 | LR__1693
14f64     04 4E 05 F1 | 	add	fp, #4
14f68     A7 26 02 FB | 	rdlong	local01, fp
14f6c     04 4E 85 F1 | 	sub	fp, #4
14f70     52 00 00 FF 
14f74     C4 E4 05 F1 | 	add	objptr, ##42180
14f78     F2 26 62 FC | 	wrlong	local01, objptr
14f7c     52 00 00 FF 
14f80     C4 E4 85 F1 | 	sub	objptr, ##42180
14f84                 | LR__1694
14f84                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
14f84     09 12 06 F6 | 	mov	arg01, #9
14f88     E8 6C B1 FD | 	call	#__system__close
14f8c     09 26 06 F6 | 	mov	local01, #9
14f90     4A 00 00 FF 
14f94     94 E4 05 F1 | 	add	objptr, ##38036
14f98     F2 12 02 FB | 	rdlong	arg01, objptr
14f9c     4A 00 00 FF 
14fa0     94 E4 85 F1 | 	sub	objptr, ##38036
14fa4     B7 01 00 FF 
14fa8     4E 14 06 F6 | 	mov	arg02, ##@LR__5912
14fac     C4 19 B1 FD | 	call	#__system___string_concat
14fb0     FD 12 02 F6 | 	mov	arg01, result1
14fb4     04 4E 05 F1 | 	add	fp, #4
14fb8     A7 14 02 FB | 	rdlong	arg02, fp
14fbc     04 4E 85 F1 | 	sub	fp, #4
14fc0     B0 19 B1 FD | 	call	#__system___string_concat
14fc4     FD 14 02 F6 | 	mov	arg02, result1
14fc8     13 13 02 F6 | 	mov	arg01, local01
14fcc     00 16 06 F6 | 	mov	arg03, #0
14fd0     48 25 B1 FD | 	call	#__system___basic_open_string
14fd4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
14fd8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
14fdc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
14fe0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
14fe4     14 4E 05 F1 | 	add	fp, #20
14fe8     A7 FA 61 FC | 	wrlong	result1, fp
14fec                 | '   r=geterr() 
14fec                 | '   if r then 
14fec     14 4E 85 F1 | 	sub	fp, #20
14ff0     54 01 90 AD |  if_e	jmp	#LR__1696
14ff4                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
14ff4     09 12 06 F6 | 	mov	arg01, #9
14ff8     78 6C B1 FD | 	call	#__system__close
14ffc     09 26 06 F6 | 	mov	local01, #9
15000     4A 00 00 FF 
15004     94 E4 05 F1 | 	add	objptr, ##38036
15008     F2 12 02 FB | 	rdlong	arg01, objptr
1500c     4A 00 00 FF 
15010     94 E4 85 F1 | 	sub	objptr, ##38036
15014     B7 01 00 FF 
15018     50 14 06 F6 | 	mov	arg02, ##@LR__5913
1501c     54 19 B1 FD | 	call	#__system___string_concat
15020     FD 12 02 F6 | 	mov	arg01, result1
15024     04 4E 05 F1 | 	add	fp, #4
15028     A7 14 02 FB | 	rdlong	arg02, fp
1502c     04 4E 85 F1 | 	sub	fp, #4
15030     40 19 B1 FD | 	call	#__system___string_concat
15034     FD 12 02 F6 | 	mov	arg01, result1
15038     B7 01 00 FF 
1503c     52 14 06 F6 | 	mov	arg02, ##@LR__5914
15040     30 19 B1 FD | 	call	#__system___string_concat
15044     FD 14 02 F6 | 	mov	arg02, result1
15048     13 13 02 F6 | 	mov	arg01, local01
1504c     00 16 06 F6 | 	mov	arg03, #0
15050     C8 24 B1 FD | 	call	#__system___basic_open_string
15054     20 E6 05 F1 | 	add	ptr___system__dat__, #32
15058     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1505c     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
15060     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
15064     14 4E 05 F1 | 	add	fp, #20
15068     A7 FA 61 FC | 	wrlong	result1, fp
1506c                 | '     r=geterr() 
1506c                 | '     if r then 
1506c     14 4E 85 F1 | 	sub	fp, #20
15070     A0 00 90 AD |  if_e	jmp	#LR__1695
15074                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
15074     00 12 06 F6 | 	mov	arg01, #0
15078     40 75 B1 FD | 	call	#__system___getiolock_0603
1507c     FD 12 02 F6 | 	mov	arg01, result1
15080     94 18 B1 FD | 	call	#__system___lockmem
15084     B7 01 00 FF 
15088     57 14 06 F6 | 	mov	arg02, ##@LR__5915
1508c     00 12 06 F6 | 	mov	arg01, #0
15090     00 16 06 F6 | 	mov	arg03, #0
15094     78 25 B1 FD | 	call	#__system___basic_print_string
15098     14 4E 05 F1 | 	add	fp, #20
1509c     A7 14 02 FB | 	rdlong	arg02, fp
150a0     14 4E 85 F1 | 	sub	fp, #20
150a4     00 12 06 F6 | 	mov	arg01, #0
150a8     00 16 06 F6 | 	mov	arg03, #0
150ac     0A 18 06 F6 | 	mov	arg04, #10
150b0     A0 25 B1 FD | 	call	#__system___basic_print_integer
150b4     B7 01 00 FF 
150b8     65 14 06 F6 | 	mov	arg02, ##@LR__5916
150bc     00 12 06 F6 | 	mov	arg01, #0
150c0     00 16 06 F6 | 	mov	arg03, #0
150c4     48 25 B1 FD | 	call	#__system___basic_print_string
150c8     00 26 06 F6 | 	mov	local01, #0
150cc     14 4E 05 F1 | 	add	fp, #20
150d0     A7 12 02 FB | 	rdlong	arg01, fp
150d4     14 4E 85 F1 | 	sub	fp, #20
150d8     CC 41 B1 FD | 	call	#__system___strerror
150dc     FD 14 02 F6 | 	mov	arg02, result1
150e0     13 13 02 F6 | 	mov	arg01, local01
150e4     00 16 06 F6 | 	mov	arg03, #0
150e8     24 25 B1 FD | 	call	#__system___basic_print_string
150ec     00 12 06 F6 | 	mov	arg01, #0
150f0     0A 14 06 F6 | 	mov	arg02, #10
150f4     00 16 06 F6 | 	mov	arg03, #0
150f8     BC 24 B1 FD | 	call	#__system___basic_print_char
150fc     00 12 06 F6 | 	mov	arg01, #0
15100     B8 74 B1 FD | 	call	#__system___getiolock_0603
15104     FD 00 68 FC | 	wrlong	#0, result1
15108     09 12 06 F6 | 	mov	arg01, #9
1510c     64 6B B1 FD | 	call	#__system__close
15110     94 01 90 FD | 	jmp	#LR__1700
15114                 | LR__1695
15114     52 00 00 FF 
15118     C4 E4 05 F1 | 	add	objptr, ##42180
1511c     F2 12 02 FB | 	rdlong	arg01, objptr
15120     52 00 00 FF 
15124     C4 E4 85 F1 | 	sub	objptr, ##42180
15128     B7 01 00 FF 
1512c     68 14 06 F6 | 	mov	arg02, ##@LR__5917
15130     40 18 B1 FD | 	call	#__system___string_concat
15134     52 00 00 FF 
15138     C4 E4 05 F1 | 	add	objptr, ##42180
1513c     F2 FA 61 FC | 	wrlong	result1, objptr
15140     52 00 00 FF 
15144     C4 E4 85 F1 | 	sub	objptr, ##42180
15148                 | LR__1696
15148                 | '   close #9: open currentdir$+"/"+loadname for input as #9
15148     09 12 06 F6 | 	mov	arg01, #9
1514c     24 6B B1 FD | 	call	#__system__close
15150     09 26 06 F6 | 	mov	local01, #9
15154     4A 00 00 FF 
15158     94 E4 05 F1 | 	add	objptr, ##38036
1515c     F2 12 02 FB | 	rdlong	arg01, objptr
15160     4A 00 00 FF 
15164     94 E4 85 F1 | 	sub	objptr, ##38036
15168     B7 01 00 FF 
1516c     6D 14 06 F6 | 	mov	arg02, ##@LR__5918
15170     00 18 B1 FD | 	call	#__system___string_concat
15174     FD 12 02 F6 | 	mov	arg01, result1
15178     52 00 00 FF 
1517c     C4 E4 05 F1 | 	add	objptr, ##42180
15180     F2 14 02 FB | 	rdlong	arg02, objptr
15184     52 00 00 FF 
15188     C4 E4 85 F1 | 	sub	objptr, ##42180
1518c     E4 17 B1 FD | 	call	#__system___string_concat
15190     FD 14 02 F6 | 	mov	arg02, result1
15194     13 13 02 F6 | 	mov	arg01, local01
15198     00 16 06 F6 | 	mov	arg03, #0
1519c     7C 23 B1 FD | 	call	#__system___basic_open_string
151a0                 | '   do
151a0                 | LR__1697
151a0     09 12 06 F6 | 	mov	arg01, #9
151a4     7C 19 B1 FD | 	call	#__system___basic_read_line
151a8     FD 26 02 F6 | 	mov	local01, result1
151ac     37 00 00 FF 
151b0     1C E4 05 F1 | 	add	objptr, ##28188
151b4     F2 26 62 FC | 	wrlong	local01, objptr
151b8     37 00 00 FF 
151bc     1C E4 85 F1 | 	sub	objptr, ##28188
151c0     64 C6 BE FD | 	call	#_interpret
151c4     37 00 00 FF 
151c8     1C E4 05 F1 | 	add	objptr, ##28188
151cc     F2 12 02 FB | 	rdlong	arg01, objptr
151d0     37 00 00 FF 
151d4     1C E4 85 F1 | 	sub	objptr, ##28188
151d8     B7 01 00 FF 
151dc     6F 14 06 F6 | 	mov	arg02, ##@LR__5919
151e0     5C 17 B1 FD | 	call	#__system___string_cmp
151e4     00 FA 0D F2 | 	cmp	result1, #0 wz
151e8     B4 FF 9F 5D |  if_ne	jmp	#LR__1697
151ec                 | '   close #9   
151ec     09 12 06 F6 | 	mov	arg01, #9
151f0     80 6A B1 FD | 	call	#__system__close
151f4     0C 00 90 FD | 	jmp	#LR__1699
151f8                 | LR__1698
151f8     1E 12 06 F6 | 	mov	arg01, #30
151fc     00 14 06 F6 | 	mov	arg02, #0
15200     24 DD B0 FD | 	call	#_printerror
15204                 | LR__1699
15204                 | ' print "Loaded ";currentdir$+"/"+loadname
15204     00 12 06 F6 | 	mov	arg01, #0
15208     B0 73 B1 FD | 	call	#__system___getiolock_0603
1520c     FD 12 02 F6 | 	mov	arg01, result1
15210     04 17 B1 FD | 	call	#__system___lockmem
15214     B7 01 00 FF 
15218     70 14 06 F6 | 	mov	arg02, ##@LR__5920
1521c     00 12 06 F6 | 	mov	arg01, #0
15220     00 16 06 F6 | 	mov	arg03, #0
15224     E8 23 B1 FD | 	call	#__system___basic_print_string
15228     00 26 06 F6 | 	mov	local01, #0
1522c     4A 00 00 FF 
15230     94 E4 05 F1 | 	add	objptr, ##38036
15234     F2 12 02 FB | 	rdlong	arg01, objptr
15238     4A 00 00 FF 
1523c     94 E4 85 F1 | 	sub	objptr, ##38036
15240     B7 01 00 FF 
15244     78 14 06 F6 | 	mov	arg02, ##@LR__5921
15248     28 17 B1 FD | 	call	#__system___string_concat
1524c     FD 12 02 F6 | 	mov	arg01, result1
15250     52 00 00 FF 
15254     C4 E4 05 F1 | 	add	objptr, ##42180
15258     F2 14 02 FB | 	rdlong	arg02, objptr
1525c     52 00 00 FF 
15260     C4 E4 85 F1 | 	sub	objptr, ##42180
15264     0C 17 B1 FD | 	call	#__system___string_concat
15268     FD 14 02 F6 | 	mov	arg02, result1
1526c     13 13 02 F6 | 	mov	arg01, local01
15270     00 16 06 F6 | 	mov	arg03, #0
15274     98 23 B1 FD | 	call	#__system___basic_print_string
15278     00 12 06 F6 | 	mov	arg01, #0
1527c     0A 14 06 F6 | 	mov	arg02, #10
15280     00 16 06 F6 | 	mov	arg03, #0
15284     30 23 B1 FD | 	call	#__system___basic_print_char
15288     00 12 06 F6 | 	mov	arg01, #0
1528c     2C 73 B1 FD | 	call	#__system___getiolock_0603
15290     FD 00 68 FC | 	wrlong	#0, result1
15294     52 00 00 FF 
15298     D4 E4 05 F1 | 	add	objptr, ##42196
1529c     F2 00 68 FC | 	wrlong	#0, objptr
152a0     52 00 00 FF 
152a4     D4 E4 85 F1 | 	sub	objptr, ##42196
152a8                 | LR__1700
152a8     A7 F0 03 F6 | 	mov	ptra, fp
152ac     B2 00 A0 FD | 	call	#popregs_
152b0                 | _do_load_ret
152b0     2D 00 64 FD | 	ret
152b4                 | 
152b4                 | ' 
152b4                 | ' '-------------------- log
152b4                 | ' 
152b4                 | ' sub do_log
152b4                 | _do_log
152b4     01 4A 05 F6 | 	mov	COUNT_, #1
152b8     A8 00 A0 FD | 	call	#pushregs_
152bc     14 F0 07 F1 | 	add	ptra, #20
152c0     4A 00 00 FF 
152c4     80 E4 05 F1 | 	add	objptr, ##38016
152c8     F2 26 02 FB | 	rdlong	local01, objptr
152cc     13 17 02 F6 | 	mov	arg03, local01
152d0     01 16 66 F0 | 	shl	arg03, #1
152d4     13 17 02 F1 | 	add	arg03, local01
152d8     02 16 66 F0 | 	shl	arg03, #2
152dc     03 00 00 FF 
152e0     04 E4 85 F1 | 	sub	objptr, ##1540
152e4     F2 16 02 F1 | 	add	arg03, objptr
152e8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
152ec     0C 4E 05 F1 | 	add	fp, #12
152f0     A7 16 62 FC | 	wrlong	arg03, fp
152f4                 | ' 
152f4                 | ' numpar=compiledline(lineptr_e).result.uresult
152f4                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
152f4     0C 4E 85 F1 | 	sub	fp, #12
152f8     47 00 00 FF 
152fc     7C E4 85 F1 | 	sub	objptr, ##36476
15300     0C 4E 05 51 |  if_ne	add	fp, #12
15304     A7 26 02 5B |  if_ne	rdlong	local01, fp
15308     0C 4E 85 51 |  if_ne	sub	fp, #12
1530c     03 26 16 52 |  if_ne	cmp	local01, #3 wc
15310     40 00 90 4D |  if_c_and_nz	jmp	#LR__1710
15314     00 12 06 F6 | 	mov	arg01, #0
15318     A0 72 B1 FD | 	call	#__system___getiolock_0603
1531c     FD 12 02 F6 | 	mov	arg01, result1
15320     F4 15 B1 FD | 	call	#__system___lockmem
15324     B7 01 00 FF 
15328     7A 14 06 F6 | 	mov	arg02, ##@LR__5922
1532c     00 12 06 F6 | 	mov	arg01, #0
15330     00 16 06 F6 | 	mov	arg03, #0
15334     D8 22 B1 FD | 	call	#__system___basic_print_string
15338     00 12 06 F6 | 	mov	arg01, #0
1533c     7C 72 B1 FD | 	call	#__system___getiolock_0603
15340     FD 00 68 FC | 	wrlong	#0, result1
15344     27 12 06 F6 | 	mov	arg01, #39
15348     00 14 06 F6 | 	mov	arg02, #0
1534c     D8 DB B0 FD | 	call	#_printerror
15350     D0 00 90 FD | 	jmp	#LR__1713
15354                 | LR__1710
15354                 | ' if numpar=2 then 
15354     0C 4E 05 F1 | 	add	fp, #12
15358     A7 26 02 FB | 	rdlong	local01, fp
1535c     0C 4E 85 F1 | 	sub	fp, #12
15360     02 26 0E F2 | 	cmp	local01, #2 wz
15364     48 00 90 5D |  if_ne	jmp	#LR__1711
15368     1C 82 BF FD | 	call	#_pop
1536c     FF 26 02 F6 | 	mov	local01, result3
15370     A7 FA 61 FC | 	wrlong	result1, fp
15374     04 4E 05 F1 | 	add	fp, #4
15378     A7 FC 61 FC | 	wrlong	result2, fp
1537c     04 4E 05 F1 | 	add	fp, #4
15380     A7 26 62 FC | 	wrlong	local01, fp
15384     08 4E 85 F1 | 	sub	fp, #8
15388     A7 12 02 F6 | 	mov	arg01, fp
1538c     98 84 BF FD | 	call	#_converttofloat
15390     FD 14 02 F6 | 	mov	arg02, result1
15394     FC 16 20 FF 
15398     54 12 06 F6 | 	mov	arg01, ##1076754516
1539c     C4 53 B1 FD | 	call	#__system____builtin_logbase
153a0     10 4E 05 F1 | 	add	fp, #16
153a4     A7 FA 61 FC | 	wrlong	result1, fp
153a8     10 4E 85 F1 | 	sub	fp, #16
153ac     10 00 90 FD | 	jmp	#LR__1712
153b0                 | LR__1711
153b0     10 4E 05 F1 | 	add	fp, #16
153b4     00 C0 9F FF 
153b8     A7 00 68 FC | 	wrlong	##1065353216, fp
153bc     10 4E 85 F1 | 	sub	fp, #16
153c0                 | LR__1712
153c0     C4 81 BF FD | 	call	#_pop
153c4     FF 26 02 F6 | 	mov	local01, result3
153c8     A7 FA 61 FC | 	wrlong	result1, fp
153cc     04 4E 05 F1 | 	add	fp, #4
153d0     A7 FC 61 FC | 	wrlong	result2, fp
153d4     04 4E 05 F1 | 	add	fp, #4
153d8     A7 26 62 FC | 	wrlong	local01, fp
153dc     08 4E 85 F1 | 	sub	fp, #8
153e0     A7 12 02 F6 | 	mov	arg01, fp
153e4     40 84 BF FD | 	call	#_converttofloat
153e8     FD 14 02 F6 | 	mov	arg02, result1
153ec     FC 16 20 FF 
153f0     54 12 06 F6 | 	mov	arg01, ##1076754516
153f4     6C 53 B1 FD | 	call	#__system____builtin_logbase
153f8     FD 12 02 F6 | 	mov	arg01, result1
153fc     10 4E 05 F1 | 	add	fp, #16
15400     A7 14 02 FB | 	rdlong	arg02, fp
15404     10 4E 85 F1 | 	sub	fp, #16
15408     8C 45 B1 FD | 	call	#__system___float_div
1540c     A7 FA 61 FC | 	wrlong	result1, fp
15410     08 4E 05 F1 | 	add	fp, #8
15414     A7 3C 68 FC | 	wrlong	#30, fp
15418     08 4E 85 F1 | 	sub	fp, #8
1541c     A7 12 02 F6 | 	mov	arg01, fp
15420     FC 81 BF FD | 	call	#_push
15424                 | LR__1713
15424     A7 F0 03 F6 | 	mov	ptra, fp
15428     B2 00 A0 FD | 	call	#popregs_
1542c                 | _do_log_ret
1542c     2D 00 64 FD | 	ret
15430                 | 
15430                 | ' 
15430                 | ' '-------------------- lpeek
15430                 | ' 
15430                 | ' sub do_lpeek
15430                 | _do_lpeek
15430     00 4A 05 F6 | 	mov	COUNT_, #0
15434     A8 00 A0 FD | 	call	#pushregs_
15438     14 F0 07 F1 | 	add	ptra, #20
1543c     48 81 BF FD | 	call	#_pop
15440     A7 FA 61 FC | 	wrlong	result1, fp
15444     04 4E 05 F1 | 	add	fp, #4
15448     A7 FC 61 FC | 	wrlong	result2, fp
1544c     04 4E 05 F1 | 	add	fp, #4
15450     A7 FE 61 FC | 	wrlong	result3, fp
15454     08 4E 85 F1 | 	sub	fp, #8
15458     A7 12 02 F6 | 	mov	arg01, fp
1545c     0C 83 BF FD | 	call	#_converttoint
15460     0C 4E 05 F1 | 	add	fp, #12
15464     A7 FA 61 FC | 	wrlong	result1, fp
15468                 | ' 
15468                 | ' t1=pop()
15468                 | ' a=converttoint(t1)
15468                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
15468     0C 4E 85 F1 | 	sub	fp, #12
1546c     00 04 00 FF 
15470     00 FA 15 F2 | 	cmp	result1, ##524288 wc
15474     1C 00 90 3D |  if_ae	jmp	#LR__1720
15478     0C 4E 05 F1 | 	add	fp, #12
1547c     A7 12 02 FB | 	rdlong	arg01, fp
15480     09 FB 01 FB | 	rdlong	result1, arg01
15484     04 4E 05 F1 | 	add	fp, #4
15488     A7 FA 61 FC | 	wrlong	result1, fp
1548c     10 4E 85 F1 | 	sub	fp, #16
15490     1C 00 90 FD | 	jmp	#LR__1721
15494                 | LR__1720
15494     0C 4E 05 F1 | 	add	fp, #12
15498     A7 12 02 FB | 	rdlong	arg01, fp
1549c     0C 4E 85 F1 | 	sub	fp, #12
154a0     54 DD B0 FD | 	call	#_pslpeek
154a4     10 4E 05 F1 | 	add	fp, #16
154a8     A7 FA 61 FC | 	wrlong	result1, fp
154ac     10 4E 85 F1 | 	sub	fp, #16
154b0                 | LR__1721
154b0     08 4E 05 F1 | 	add	fp, #8
154b4     A7 3A 68 FC | 	wrlong	#29, fp
154b8     08 4E 05 F1 | 	add	fp, #8
154bc     A7 12 02 FB | 	rdlong	arg01, fp
154c0     10 4E 85 F1 | 	sub	fp, #16
154c4     A7 12 62 FC | 	wrlong	arg01, fp
154c8     A7 12 02 F6 | 	mov	arg01, fp
154cc     50 81 BF FD | 	call	#_push
154d0     A7 F0 03 F6 | 	mov	ptra, fp
154d4     B2 00 A0 FD | 	call	#popregs_
154d8                 | _do_lpeek_ret
154d8     2D 00 64 FD | 	ret
154dc                 | 
154dc                 | ' 
154dc                 | ' '-------------------- lpoke
154dc                 | ' 
154dc                 | ' sub do_lpoke
154dc                 | _do_lpoke
154dc     01 4A 05 F6 | 	mov	COUNT_, #1
154e0     A8 00 A0 FD | 	call	#pushregs_
154e4     20 F0 07 F1 | 	add	ptra, #32
154e8     9C 80 BF FD | 	call	#_pop
154ec     FD 14 02 F6 | 	mov	arg02, result1
154f0     FE 12 02 F6 | 	mov	arg01, result2
154f4     FF 26 02 F6 | 	mov	local01, result3
154f8     A7 14 62 FC | 	wrlong	arg02, fp
154fc     04 4E 05 F1 | 	add	fp, #4
15500     A7 12 62 FC | 	wrlong	arg01, fp
15504     04 4E 05 F1 | 	add	fp, #4
15508     A7 26 62 FC | 	wrlong	local01, fp
1550c     08 4E 85 F1 | 	sub	fp, #8
15510     74 80 BF FD | 	call	#_pop
15514     FF 26 02 F6 | 	mov	local01, result3
15518     0C 4E 05 F1 | 	add	fp, #12
1551c     A7 FA 61 FC | 	wrlong	result1, fp
15520     04 4E 05 F1 | 	add	fp, #4
15524     A7 FC 61 FC | 	wrlong	result2, fp
15528     04 4E 05 F1 | 	add	fp, #4
1552c     A7 26 62 FC | 	wrlong	local01, fp
15530     08 4E 85 F1 | 	sub	fp, #8
15534     A7 12 02 F6 | 	mov	arg01, fp
15538     0C 4E 85 F1 | 	sub	fp, #12
1553c     2C 82 BF FD | 	call	#_converttoint
15540     18 4E 05 F1 | 	add	fp, #24
15544     A7 FA 61 FC | 	wrlong	result1, fp
15548     18 4E 85 F1 | 	sub	fp, #24
1554c     A7 12 02 F6 | 	mov	arg01, fp
15550     18 82 BF FD | 	call	#_converttoint
15554     1C 4E 05 F1 | 	add	fp, #28
15558     A7 FA 61 FC | 	wrlong	result1, fp
1555c                 | ' 
1555c                 | ' t1=pop() 'value
1555c                 | ' t2=pop() 
1555c                 | ' a=converttoint(t2) : v=converttoint(t1)
1555c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
1555c     04 4E 85 F1 | 	sub	fp, #4
15560     A7 26 02 FB | 	rdlong	local01, fp
15564     18 4E 85 F1 | 	sub	fp, #24
15568     00 04 00 FF 
1556c     00 26 16 F2 | 	cmp	local01, ##524288 wc
15570     1C 00 90 3D |  if_ae	jmp	#LR__1730
15574     18 4E 05 F1 | 	add	fp, #24
15578     A7 12 02 FB | 	rdlong	arg01, fp
1557c     04 4E 05 F1 | 	add	fp, #4
15580     A7 14 02 FB | 	rdlong	arg02, fp
15584     1C 4E 85 F1 | 	sub	fp, #28
15588     09 15 62 FC | 	wrlong	arg02, arg01
1558c     18 00 90 FD | 	jmp	#LR__1731
15590                 | LR__1730
15590     18 4E 05 F1 | 	add	fp, #24
15594     A7 12 02 FB | 	rdlong	arg01, fp
15598     04 4E 05 F1 | 	add	fp, #4
1559c     A7 14 02 FB | 	rdlong	arg02, fp
155a0     1C 4E 85 F1 | 	sub	fp, #28
155a4     20 DB B0 FD | 	call	#_pslpoke
155a8                 | LR__1731
155a8     A7 F0 03 F6 | 	mov	ptra, fp
155ac     B2 00 A0 FD | 	call	#popregs_
155b0                 | _do_lpoke_ret
155b0     2D 00 64 FD | 	ret
155b4                 | 
155b4                 | ' 
155b4                 | ' '-------------------- mid$
155b4                 | ' 
155b4                 | ' sub do_mid
155b4                 | _do_mid
155b4     00 4A 05 F6 | 	mov	COUNT_, #0
155b8     A8 00 A0 FD | 	call	#pushregs_
155bc     18 F0 07 F1 | 	add	ptra, #24
155c0     4A 00 00 FF 
155c4     80 E4 05 F1 | 	add	objptr, ##38016
155c8     F2 16 02 FB | 	rdlong	arg03, objptr
155cc     0B 15 02 F6 | 	mov	arg02, arg03
155d0     01 14 66 F0 | 	shl	arg02, #1
155d4     0B 15 02 F1 | 	add	arg02, arg03
155d8     02 14 66 F0 | 	shl	arg02, #2
155dc     03 00 00 FF 
155e0     04 E4 85 F1 | 	sub	objptr, ##1540
155e4     F2 14 02 F1 | 	add	arg02, objptr
155e8     0A 17 02 FB | 	rdlong	arg03, arg02
155ec     0C 4E 05 F1 | 	add	fp, #12
155f0     A7 16 62 FC | 	wrlong	arg03, fp
155f4                 | ' 
155f4                 | ' numpar=compiledline(lineptr_e).result.uresult
155f4                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
155f4     0C 4E 85 F1 | 	sub	fp, #12
155f8     03 16 0E F2 | 	cmp	arg03, #3 wz
155fc     47 00 00 FF 
15600     7C E4 85 F1 | 	sub	objptr, ##36476
15604     40 00 90 AD |  if_e	jmp	#LR__1740
15608     00 12 06 F6 | 	mov	arg01, #0
1560c     AC 6F B1 FD | 	call	#__system___getiolock_0603
15610     FD 12 02 F6 | 	mov	arg01, result1
15614     00 13 B1 FD | 	call	#__system___lockmem
15618     B7 01 00 FF 
1561c     80 14 06 F6 | 	mov	arg02, ##@LR__5923
15620     00 12 06 F6 | 	mov	arg01, #0
15624     00 16 06 F6 | 	mov	arg03, #0
15628     E4 1F B1 FD | 	call	#__system___basic_print_string
1562c     00 12 06 F6 | 	mov	arg01, #0
15630     88 6F B1 FD | 	call	#__system___getiolock_0603
15634     FD 00 68 FC | 	wrlong	#0, result1
15638     27 12 06 F6 | 	mov	arg01, #39
1563c     00 14 06 F6 | 	mov	arg02, #0
15640     E4 D8 B0 FD | 	call	#_printerror
15644     2C 01 90 FD | 	jmp	#LR__1743
15648                 | LR__1740
15648     3C 7F BF FD | 	call	#_pop
1564c     FF 16 02 F6 | 	mov	arg03, result3
15650     A7 FA 61 FC | 	wrlong	result1, fp
15654     04 4E 05 F1 | 	add	fp, #4
15658     A7 FC 61 FC | 	wrlong	result2, fp
1565c     04 4E 05 F1 | 	add	fp, #4
15660     A7 16 62 FC | 	wrlong	arg03, fp
15664     08 4E 85 F1 | 	sub	fp, #8
15668     A7 12 02 F6 | 	mov	arg01, fp
1566c     FC 80 BF FD | 	call	#_converttoint
15670     FD 16 02 F6 | 	mov	arg03, result1
15674     14 4E 05 F1 | 	add	fp, #20
15678     A7 16 62 FC | 	wrlong	arg03, fp
1567c     14 4E 85 F1 | 	sub	fp, #20
15680     04 7F BF FD | 	call	#_pop
15684     FF 16 02 F6 | 	mov	arg03, result3
15688     A7 FA 61 FC | 	wrlong	result1, fp
1568c     04 4E 05 F1 | 	add	fp, #4
15690     A7 FC 61 FC | 	wrlong	result2, fp
15694     04 4E 05 F1 | 	add	fp, #4
15698     A7 16 62 FC | 	wrlong	arg03, fp
1569c     08 4E 85 F1 | 	sub	fp, #8
156a0     A7 12 02 F6 | 	mov	arg01, fp
156a4     C4 80 BF FD | 	call	#_converttoint
156a8     FD 16 02 F6 | 	mov	arg03, result1
156ac     10 4E 05 F1 | 	add	fp, #16
156b0     A7 16 62 FC | 	wrlong	arg03, fp
156b4     10 4E 85 F1 | 	sub	fp, #16
156b8     CC 7E BF FD | 	call	#_pop
156bc     FF 16 02 F6 | 	mov	arg03, result3
156c0     A7 FA 61 FC | 	wrlong	result1, fp
156c4     04 4E 05 F1 | 	add	fp, #4
156c8     A7 FC 61 FC | 	wrlong	result2, fp
156cc     04 4E 05 F1 | 	add	fp, #4
156d0     A7 16 62 FC | 	wrlong	arg03, fp
156d4                 | ' t1=pop() : arg2=converttoint(t1)
156d4                 | ' t1=pop() : arg1=converttoint(t1)
156d4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
156d4     08 4E 85 F1 | 	sub	fp, #8
156d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
156dc     18 00 90 5D |  if_ne	jmp	#LR__1741
156e0     A7 12 02 FB | 	rdlong	arg01, fp
156e4     18 80 BF FD | 	call	#_convertstring
156e8     A7 FA 61 FC | 	wrlong	result1, fp
156ec     08 4E 05 F1 | 	add	fp, #8
156f0     A7 3E 68 FC | 	wrlong	#31, fp
156f4     08 4E 85 F1 | 	sub	fp, #8
156f8                 | LR__1741
156f8                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
156f8     08 4E 05 F1 | 	add	fp, #8
156fc     A7 16 02 FB | 	rdlong	arg03, fp
15700     08 4E 85 F1 | 	sub	fp, #8
15704     1F 16 0E F2 | 	cmp	arg03, #31 wz
15708     40 00 90 AD |  if_e	jmp	#LR__1742
1570c     00 12 06 F6 | 	mov	arg01, #0
15710     A8 6E B1 FD | 	call	#__system___getiolock_0603
15714     FD 12 02 F6 | 	mov	arg01, result1
15718     FC 11 B1 FD | 	call	#__system___lockmem
1571c     B7 01 00 FF 
15720     87 14 06 F6 | 	mov	arg02, ##@LR__5924
15724     00 12 06 F6 | 	mov	arg01, #0
15728     00 16 06 F6 | 	mov	arg03, #0
1572c     E0 1E B1 FD | 	call	#__system___basic_print_string
15730     00 12 06 F6 | 	mov	arg01, #0
15734     84 6E B1 FD | 	call	#__system___getiolock_0603
15738     FD 00 68 FC | 	wrlong	#0, result1
1573c     0F 12 06 F6 | 	mov	arg01, #15
15740     00 14 06 F6 | 	mov	arg02, #0
15744     E0 D7 B0 FD | 	call	#_printerror
15748     28 00 90 FD | 	jmp	#LR__1743
1574c                 | LR__1742
1574c     A7 12 02 FB | 	rdlong	arg01, fp
15750     10 4E 05 F1 | 	add	fp, #16
15754     A7 14 02 FB | 	rdlong	arg02, fp
15758     04 4E 05 F1 | 	add	fp, #4
1575c     A7 16 02 FB | 	rdlong	arg03, fp
15760     14 4E 85 F1 | 	sub	fp, #20
15764     48 33 B1 FD | 	call	#__system__Mid_S
15768     A7 FA 61 FC | 	wrlong	result1, fp
1576c     A7 12 02 F6 | 	mov	arg01, fp
15770     AC 7E BF FD | 	call	#_push
15774                 | LR__1743
15774     A7 F0 03 F6 | 	mov	ptra, fp
15778     B2 00 A0 FD | 	call	#popregs_
1577c                 | _do_mid_ret
1577c     2D 00 64 FD | 	ret
15780                 | 
15780                 | ' 
15780                 | ' '-------------------- mkdir
15780                 | ' 
15780                 | ' sub do_mkdir
15780                 | _do_mkdir
15780     04 4A 05 F6 | 	mov	COUNT_, #4
15784     A8 00 A0 FD | 	call	#pushregs_
15788     FC 7D BF FD | 	call	#_pop
1578c     FE 18 02 F6 | 	mov	arg04, result2
15790     FF 16 02 F6 | 	mov	arg03, result3
15794     FD 26 02 F6 | 	mov	local01, result1
15798     0C 29 02 F6 | 	mov	local02, arg04
1579c     0B 2B 02 F6 | 	mov	local03, arg03
157a0                 | ' 
157a0                 | ' t1=pop()
157a0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
157a0     2B 2A 0E F2 | 	cmp	local03, #43 wz
157a4     10 00 90 5D |  if_ne	jmp	#LR__1750
157a8     13 13 02 F6 | 	mov	arg01, local01
157ac     50 7F BF FD | 	call	#_convertstring
157b0     FD 26 02 F6 | 	mov	local01, result1
157b4     1F 2A 06 F6 | 	mov	local03, #31
157b8                 | LR__1750
157b8                 | ' if t1.result_type<>result_string then printerror(15): return
157b8     1F 2A 0E F2 | 	cmp	local03, #31 wz
157bc     10 00 90 AD |  if_e	jmp	#LR__1751
157c0     0F 12 06 F6 | 	mov	arg01, #15
157c4     00 14 06 F6 | 	mov	arg02, #0
157c8     5C D7 B0 FD | 	call	#_printerror
157cc     64 00 90 FD | 	jmp	#LR__1753
157d0                 | LR__1751
157d0     13 13 02 F6 | 	mov	arg01, local01
157d4     14 3A B1 FD | 	call	#__system___mkdir
157d8     FD 2C 0A F6 | 	mov	local04, result1 wz
157dc                 | ' filename$=t1.result.sresult
157dc                 | ' err=mkdir(filename$)
157dc                 | ' 'err=geterr() : 
157dc                 | ' if err<>0 then print "Cannot create a directory: system error "; err
157dc     54 00 90 AD |  if_e	jmp	#LR__1752
157e0     00 12 06 F6 | 	mov	arg01, #0
157e4     D4 6D B1 FD | 	call	#__system___getiolock_0603
157e8     FD 12 02 F6 | 	mov	arg01, result1
157ec     28 11 B1 FD | 	call	#__system___lockmem
157f0     B7 01 00 FF 
157f4     8E 14 06 F6 | 	mov	arg02, ##@LR__5925
157f8     00 12 06 F6 | 	mov	arg01, #0
157fc     00 16 06 F6 | 	mov	arg03, #0
15800     0C 1E B1 FD | 	call	#__system___basic_print_string
15804     00 12 06 F6 | 	mov	arg01, #0
15808     16 15 02 F6 | 	mov	arg02, local04
1580c     00 16 06 F6 | 	mov	arg03, #0
15810     0A 18 06 F6 | 	mov	arg04, #10
15814     3C 1E B1 FD | 	call	#__system___basic_print_integer
15818     00 12 06 F6 | 	mov	arg01, #0
1581c     0A 14 06 F6 | 	mov	arg02, #10
15820     00 16 06 F6 | 	mov	arg03, #0
15824     90 1D B1 FD | 	call	#__system___basic_print_char
15828     00 12 06 F6 | 	mov	arg01, #0
1582c     8C 6D B1 FD | 	call	#__system___getiolock_0603
15830     FD 00 68 FC | 	wrlong	#0, result1
15834                 | LR__1752
15834                 | LR__1753
15834     A7 F0 03 F6 | 	mov	ptra, fp
15838     B2 00 A0 FD | 	call	#popregs_
1583c                 | _do_mkdir_ret
1583c     2D 00 64 FD | 	ret
15840                 | 
15840                 | ' 
15840                 | ' '-------------------- mode
15840                 | ' 
15840                 | ' sub do_mode
15840                 | _do_mode
15840     05 4A 05 F6 | 	mov	COUNT_, #5
15844     A8 00 A0 FD | 	call	#pushregs_
15848     3C 7D BF FD | 	call	#_pop
1584c     FD 26 02 F6 | 	mov	local01, result1
15850     FE 28 02 F6 | 	mov	local02, result2
15854     FF 2A 02 F6 | 	mov	local03, result3
15858                 | ' t1=pop() 
15858                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
15858     1E 2A 0E F2 | 	cmp	local03, #30 wz
1585c     10 00 90 5D |  if_ne	jmp	#LR__1760
15860     13 13 02 F6 | 	mov	arg01, local01
15864     00 14 06 F6 | 	mov	arg02, #0
15868     F0 43 B1 FD | 	call	#__system___float_tointeger
1586c     FD 26 02 F6 | 	mov	local01, result1
15870                 | LR__1760
15870                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
15870     1F 2A 0E F2 | 	cmp	local03, #31 wz
15874     18 00 90 5D |  if_ne	jmp	#LR__1761
15878     13 13 02 F6 | 	mov	arg01, local01
1587c     20 47 B1 FD | 	call	#__system____builtin_atof
15880     FD 12 02 F6 | 	mov	arg01, result1
15884     00 14 06 F6 | 	mov	arg02, #0
15888     D0 43 B1 FD | 	call	#__system___float_tointeger
1588c     FD 26 02 F6 | 	mov	local01, result1
15890                 | LR__1761
15890                 | ' select case t1.result.iresult
15890     13 2D 02 F6 | 	mov	local04, local01
15894     05 2C 26 F3 | 	fle	local04, #5
15898     30 2C 62 FD | 	jmprel	local04
1589c                 | LR__1762
1589c     14 00 90 FD | 	jmp	#LR__1763
158a0     A8 00 90 FD | 	jmp	#LR__1764
158a4     10 01 90 FD | 	jmp	#LR__1765
158a8     78 01 90 FD | 	jmp	#LR__1766
158ac     E0 01 90 FD | 	jmp	#LR__1767
158b0     70 02 90 FD | 	jmp	#LR__1768
158b4                 | LR__1763
158b4     37 00 00 FF 
158b8     40 E4 05 F1 | 	add	objptr, ##28224
158bc     F2 02 68 FC | 	wrlong	#1, objptr
158c0     04 E4 85 F1 | 	sub	objptr, #4
158c4     F2 34 69 FC | 	wrlong	#154, objptr
158c8     19 00 00 FF 
158cc     00 E5 05 F1 | 	add	objptr, ##13056
158d0     F2 02 68 FC | 	wrlong	#1, objptr
158d4     19 00 00 FF 
158d8     04 E5 85 F1 | 	sub	objptr, ##13060
158dc     F2 26 69 FC | 	wrlong	#147, objptr
158e0     37 00 00 FF 
158e4     38 E4 85 F1 | 	sub	objptr, ##28216
158e8     04 12 06 F6 | 	mov	arg01, #4
158ec     54 F2 B0 FD | 	call	#_hg010b_spin2_setfontfamily
158f0     37 00 00 FF 
158f4     3C E4 05 F1 | 	add	objptr, ##28220
158f8     F2 12 02 FB | 	rdlong	arg01, objptr
158fc     04 E4 85 F1 | 	sub	objptr, #4
15900     F2 14 02 FB | 	rdlong	arg02, objptr
15904                 | ' 
15904                 | ' write_color:=ff
15904     36 00 00 FF 
15908     F7 E5 85 F1 | 	sub	objptr, ##28151
1590c     F2 12 62 FC | 	wrlong	arg01, objptr
15910                 | ' write_background:=bb
15910     04 E4 05 F1 | 	add	objptr, #4
15914     F2 14 62 FC | 	wrlong	arg02, objptr
15918     01 00 00 FF 
1591c     00 EA 05 F1 | 	add	ptr__dat__, ##512
15920     52 00 00 FF 
15924     5F E4 05 F1 | 	add	objptr, ##42079
15928     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1592c     04 E4 85 F1 | 	sub	objptr, #4
15930     03 00 80 FF 
15934     F2 30 69 FC | 	wrlong	##1688, objptr
15938     52 00 00 FF 
1593c     A0 E4 85 F1 | 	sub	objptr, ##42144
15940     01 00 00 FF 
15944     00 EA 85 F1 | 	sub	ptr__dat__, ##512
15948     D8 01 90 FD | 	jmp	#LR__1768
1594c                 | LR__1764
1594c     37 00 00 FF 
15950     40 E4 05 F1 | 	add	objptr, ##28224
15954     F2 00 68 FC | 	wrlong	#0, objptr
15958     04 E4 85 F1 | 	sub	objptr, #4
1595c     F2 2E 68 FC | 	wrlong	#23, objptr
15960     19 00 00 FF 
15964     00 E5 05 F1 | 	add	objptr, ##13056
15968     F2 00 68 FC | 	wrlong	#0, objptr
1596c     19 00 00 FF 
15970     04 E5 85 F1 | 	sub	objptr, ##13060
15974     F2 00 68 FC | 	wrlong	#0, objptr
15978     37 00 00 FF 
1597c     38 E4 85 F1 | 	sub	objptr, ##28216
15980     00 12 06 F6 | 	mov	arg01, #0
15984     BC F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15988     37 00 00 FF 
1598c     3C E4 05 F1 | 	add	objptr, ##28220
15990     F2 12 02 FB | 	rdlong	arg01, objptr
15994     04 E4 85 F1 | 	sub	objptr, #4
15998     F2 14 02 FB | 	rdlong	arg02, objptr
1599c                 | ' 
1599c                 | ' write_color:=ff
1599c     36 00 00 FF 
159a0     F7 E5 85 F1 | 	sub	objptr, ##28151
159a4     F2 12 62 FC | 	wrlong	arg01, objptr
159a8                 | ' write_background:=bb
159a8     04 E4 05 F1 | 	add	objptr, #4
159ac     F2 14 62 FC | 	wrlong	arg02, objptr
159b0     45 E4 85 F1 | 	sub	objptr, #69
159b4     6C 01 90 FD | 	jmp	#LR__1768
159b8                 | LR__1765
159b8     37 00 00 FF 
159bc     40 E4 05 F1 | 	add	objptr, ##28224
159c0     F2 00 68 FC | 	wrlong	#0, objptr
159c4     04 E4 85 F1 | 	sub	objptr, #4
159c8     F2 6A 69 FC | 	wrlong	#181, objptr
159cc     19 00 00 FF 
159d0     00 E5 05 F1 | 	add	objptr, ##13056
159d4     F2 00 68 FC | 	wrlong	#0, objptr
159d8     19 00 00 FF 
159dc     04 E5 85 F1 | 	sub	objptr, ##13060
159e0     F2 00 68 FC | 	wrlong	#0, objptr
159e4     37 00 00 FF 
159e8     38 E4 85 F1 | 	sub	objptr, ##28216
159ec     00 12 06 F6 | 	mov	arg01, #0
159f0     50 F1 B0 FD | 	call	#_hg010b_spin2_setfontfamily
159f4     37 00 00 FF 
159f8     3C E4 05 F1 | 	add	objptr, ##28220
159fc     F2 12 02 FB | 	rdlong	arg01, objptr
15a00     04 E4 85 F1 | 	sub	objptr, #4
15a04     F2 14 02 FB | 	rdlong	arg02, objptr
15a08                 | ' 
15a08                 | ' write_color:=ff
15a08     36 00 00 FF 
15a0c     F7 E5 85 F1 | 	sub	objptr, ##28151
15a10     F2 12 62 FC | 	wrlong	arg01, objptr
15a14                 | ' write_background:=bb
15a14     04 E4 05 F1 | 	add	objptr, #4
15a18     F2 14 62 FC | 	wrlong	arg02, objptr
15a1c     45 E4 85 F1 | 	sub	objptr, #69
15a20     00 01 90 FD | 	jmp	#LR__1768
15a24                 | LR__1766
15a24     37 00 00 FF 
15a28     40 E4 05 F1 | 	add	objptr, ##28224
15a2c     F2 00 68 FC | 	wrlong	#0, objptr
15a30     04 E4 85 F1 | 	sub	objptr, #4
15a34     F2 1E 68 FC | 	wrlong	#15, objptr
15a38     19 00 00 FF 
15a3c     00 E5 05 F1 | 	add	objptr, ##13056
15a40     F2 00 68 FC | 	wrlong	#0, objptr
15a44     19 00 00 FF 
15a48     04 E5 85 F1 | 	sub	objptr, ##13060
15a4c     F2 00 68 FC | 	wrlong	#0, objptr
15a50     37 00 00 FF 
15a54     38 E4 85 F1 | 	sub	objptr, ##28216
15a58     00 12 06 F6 | 	mov	arg01, #0
15a5c     E4 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15a60     37 00 00 FF 
15a64     3C E4 05 F1 | 	add	objptr, ##28220
15a68     F2 12 02 FB | 	rdlong	arg01, objptr
15a6c     04 E4 85 F1 | 	sub	objptr, #4
15a70     F2 14 02 FB | 	rdlong	arg02, objptr
15a74                 | ' 
15a74                 | ' write_color:=ff
15a74     36 00 00 FF 
15a78     F7 E5 85 F1 | 	sub	objptr, ##28151
15a7c     F2 12 62 FC | 	wrlong	arg01, objptr
15a80                 | ' write_background:=bb
15a80     04 E4 05 F1 | 	add	objptr, #4
15a84     F2 14 62 FC | 	wrlong	arg02, objptr
15a88     45 E4 85 F1 | 	sub	objptr, #69
15a8c     94 00 90 FD | 	jmp	#LR__1768
15a90                 | LR__1767
15a90     37 00 00 FF 
15a94     40 E4 05 F1 | 	add	objptr, ##28224
15a98     F2 02 68 FC | 	wrlong	#1, objptr
15a9c     04 E4 85 F1 | 	sub	objptr, #4
15aa0     F2 02 68 FC | 	wrlong	#1, objptr
15aa4     19 00 00 FF 
15aa8     00 E5 05 F1 | 	add	objptr, ##13056
15aac     F2 02 68 FC | 	wrlong	#1, objptr
15ab0     19 00 00 FF 
15ab4     04 E5 85 F1 | 	sub	objptr, ##13060
15ab8     F2 1C 68 FC | 	wrlong	#14, objptr
15abc     37 00 00 FF 
15ac0     38 E4 85 F1 | 	sub	objptr, ##28216
15ac4     04 12 06 F6 | 	mov	arg01, #4
15ac8     78 F0 B0 FD | 	call	#_hg010b_spin2_setfontfamily
15acc     37 00 00 FF 
15ad0     3C E4 05 F1 | 	add	objptr, ##28220
15ad4     F2 12 02 FB | 	rdlong	arg01, objptr
15ad8     04 E4 85 F1 | 	sub	objptr, #4
15adc     F2 14 02 FB | 	rdlong	arg02, objptr
15ae0                 | ' 
15ae0                 | ' write_color:=ff
15ae0     36 00 00 FF 
15ae4     F7 E5 85 F1 | 	sub	objptr, ##28151
15ae8     F2 12 62 FC | 	wrlong	arg01, objptr
15aec                 | ' write_background:=bb
15aec     04 E4 05 F1 | 	add	objptr, #4
15af0     F2 14 62 FC | 	wrlong	arg02, objptr
15af4     07 00 00 FF 
15af8     82 EB 05 F1 | 	add	ptr__dat__, ##3970
15afc     52 00 00 FF 
15b00     5F E4 05 F1 | 	add	objptr, ##42079
15b04     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
15b08     04 E4 85 F1 | 	sub	objptr, #4
15b0c     03 00 80 FF 
15b10     F2 30 69 FC | 	wrlong	##1688, objptr
15b14     52 00 00 FF 
15b18     A0 E4 85 F1 | 	sub	objptr, ##42144
15b1c     07 00 00 FF 
15b20     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
15b24                 | LR__1768
15b24     52 00 00 FF 
15b28     9C E4 05 F1 | 	add	objptr, ##42140
15b2c     F2 26 62 FC | 	wrlong	local01, objptr
15b30     04 E4 85 F1 | 	sub	objptr, #4
15b34     F2 12 02 FB | 	rdlong	arg01, objptr
15b38     0F 00 00 FF 
15b3c     3C E4 85 F1 | 	sub	objptr, ##7740
15b40     F2 2E 02 FB | 	rdlong	local05, objptr
15b44     43 00 00 FF 
15b48     5C E4 85 F1 | 	sub	objptr, ##34396
15b4c     17 13 82 F1 | 	sub	arg01, local05
15b50     00 14 06 F6 | 	mov	arg02, #0
15b54     0A 16 06 F6 | 	mov	arg03, #10
15b58     90 30 B1 FD | 	call	#__system__Number_S
15b5c     FD 12 02 F6 | 	mov	arg01, result1
15b60     B7 01 00 FF 
15b64     B7 14 06 F6 | 	mov	arg02, ##@LR__5926
15b68     08 0E B1 FD | 	call	#__system___string_concat
15b6c     50 00 00 FF 
15b70     38 E5 05 F1 | 	add	objptr, ##41272
15b74     F2 FA 61 FC | 	wrlong	result1, objptr
15b78     19 00 00 FF 
15b7c     FC E4 85 F1 | 	sub	objptr, ##13052
15b80     F2 12 02 FB | 	rdlong	arg01, objptr
15b84     04 E4 85 F1 | 	sub	objptr, #4
15b88     F2 14 02 FB | 	rdlong	arg02, objptr
15b8c     37 00 00 FF 
15b90     38 E4 85 F1 | 	sub	objptr, ##28216
15b94     FC F0 B0 FD | 	call	#_hg010b_spin2_cls
15b98     B7 01 00 FF 
15b9c     C9 12 06 F6 | 	mov	arg01, ##@LR__5927
15ba0                 | ' 
15ba0                 | ' write(text)
15ba0     B0 F4 B0 FD | 	call	#_hg010b_spin2_write
15ba4                 | ' crlf
15ba4     AC F9 B0 FD | 	call	#_hg010b_spin2_crlf
15ba8     18 00 00 FF 
15bac     40 EB 05 F1 | 	add	ptr__dat__, ##12608
15bb0     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
15bb4     18 00 00 FF 
15bb8     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
15bbc                 | ' 
15bbc                 | ' write(text)
15bbc     94 F4 B0 FD | 	call	#_hg010b_spin2_write
15bc0                 | ' crlf
15bc0     90 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15bc4     50 00 00 FF 
15bc8     38 E5 05 F1 | 	add	objptr, ##41272
15bcc     F2 12 02 FB | 	rdlong	arg01, objptr
15bd0     50 00 00 FF 
15bd4     38 E5 85 F1 | 	sub	objptr, ##41272
15bd8                 | ' 
15bd8                 | ' write(text)
15bd8     78 F4 B0 FD | 	call	#_hg010b_spin2_write
15bdc                 | ' crlf
15bdc     74 F9 B0 FD | 	call	#_hg010b_spin2_crlf
15be0     A7 F0 03 F6 | 	mov	ptra, fp
15be4     B2 00 A0 FD | 	call	#popregs_
15be8                 | _do_mode_ret
15be8     2D 00 64 FD | 	ret
15bec                 | 
15bec                 | ' 
15bec                 | ' '-------------------- mouse
15bec                 | ' 
15bec                 | ' sub do_mouse
15bec                 | _do_mouse
15bec     98 79 BF FD | 	call	#_pop
15bf0     00 FA 4D F2 | 	cmps	result1, #0 wz
15bf4                 | ' 
15bf4                 | ' t1=pop()
15bf4                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
15bf4     14 00 90 5D |  if_ne	jmp	#LR__1770
15bf8     10 12 06 F6 | 	mov	arg01, #16
15bfc     00 14 06 F6 | 	mov	arg02, #0
15c00     00 16 06 F6 | 	mov	arg03, #0
15c04     6C E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c08     10 00 90 FD | 	jmp	#LR__1771
15c0c                 | LR__1770
15c0c     10 12 06 F6 | 	mov	arg01, #16
15c10     20 14 06 F6 | 	mov	arg02, #32
15c14     20 16 06 F6 | 	mov	arg03, #32
15c18     58 E3 B0 FD | 	call	#_hg010b_spin2_setspritesize
15c1c                 | LR__1771
15c1c                 | _do_mouse_ret
15c1c     2D 00 64 FD | 	ret
15c20                 | 
15c20                 | ' 
15c20                 | ' '-------------------- mousek
15c20                 | ' 
15c20                 | ' sub do_mousek
15c20                 | _do_mousek
15c20     00 4A 05 F6 | 	mov	COUNT_, #0
15c24     A8 00 A0 FD | 	call	#pushregs_
15c28     0C F0 07 F1 | 	add	ptra, #12
15c2c     08 4E 05 F1 | 	add	fp, #8
15c30     A7 3A 68 FC | 	wrlong	#29, fp
15c34     08 4E 85 F1 | 	sub	fp, #8
15c38     51 00 00 FF 
15c3c     50 E5 05 F1 | 	add	objptr, ##41808
15c40     F2 12 02 FB | 	rdlong	arg01, objptr
15c44     51 00 00 FF 
15c48     50 E5 85 F1 | 	sub	objptr, ##41808
15c4c     A7 12 62 FC | 	wrlong	arg01, fp
15c50     A7 12 02 F6 | 	mov	arg01, fp
15c54     C8 79 BF FD | 	call	#_push
15c58     A7 F0 03 F6 | 	mov	ptra, fp
15c5c     B2 00 A0 FD | 	call	#popregs_
15c60                 | _do_mousek_ret
15c60     2D 00 64 FD | 	ret
15c64                 | 
15c64                 | ' 
15c64                 | ' '-------------------- mousew
15c64                 | ' 
15c64                 | ' sub do_mousew
15c64                 | _do_mousew
15c64     00 4A 05 F6 | 	mov	COUNT_, #0
15c68     A8 00 A0 FD | 	call	#pushregs_
15c6c     0C F0 07 F1 | 	add	ptra, #12
15c70     08 4E 05 F1 | 	add	fp, #8
15c74     A7 38 68 FC | 	wrlong	#28, fp
15c78     08 4E 85 F1 | 	sub	fp, #8
15c7c     51 00 00 FF 
15c80     54 E5 05 F1 | 	add	objptr, ##41812
15c84     F2 12 02 FB | 	rdlong	arg01, objptr
15c88     51 00 00 FF 
15c8c     54 E5 85 F1 | 	sub	objptr, ##41812
15c90     A7 12 62 FC | 	wrlong	arg01, fp
15c94     A7 12 02 F6 | 	mov	arg01, fp
15c98     84 79 BF FD | 	call	#_push
15c9c     A7 F0 03 F6 | 	mov	ptra, fp
15ca0     B2 00 A0 FD | 	call	#popregs_
15ca4                 | _do_mousew_ret
15ca4     2D 00 64 FD | 	ret
15ca8                 | 
15ca8                 | ' 
15ca8                 | ' '-------------------- mousex
15ca8                 | ' 
15ca8                 | ' sub do_mousex
15ca8                 | _do_mousex
15ca8     00 4A 05 F6 | 	mov	COUNT_, #0
15cac     A8 00 A0 FD | 	call	#pushregs_
15cb0     0C F0 07 F1 | 	add	ptra, #12
15cb4     08 4E 05 F1 | 	add	fp, #8
15cb8     A7 3A 68 FC | 	wrlong	#29, fp
15cbc     08 4E 85 F1 | 	sub	fp, #8
15cc0     51 00 00 FF 
15cc4     48 E5 05 F1 | 	add	objptr, ##41800
15cc8     F2 12 02 FB | 	rdlong	arg01, objptr
15ccc     51 00 00 FF 
15cd0     48 E5 85 F1 | 	sub	objptr, ##41800
15cd4     A7 12 62 FC | 	wrlong	arg01, fp
15cd8     A7 12 02 F6 | 	mov	arg01, fp
15cdc     40 79 BF FD | 	call	#_push
15ce0     A7 F0 03 F6 | 	mov	ptra, fp
15ce4     B2 00 A0 FD | 	call	#popregs_
15ce8                 | _do_mousex_ret
15ce8     2D 00 64 FD | 	ret
15cec                 | 
15cec                 | ' 
15cec                 | ' '-------------------- mousey
15cec                 | ' 
15cec                 | ' sub do_mousey
15cec                 | _do_mousey
15cec     00 4A 05 F6 | 	mov	COUNT_, #0
15cf0     A8 00 A0 FD | 	call	#pushregs_
15cf4     0C F0 07 F1 | 	add	ptra, #12
15cf8     08 4E 05 F1 | 	add	fp, #8
15cfc     A7 3A 68 FC | 	wrlong	#29, fp
15d00     08 4E 85 F1 | 	sub	fp, #8
15d04     51 00 00 FF 
15d08     4C E5 05 F1 | 	add	objptr, ##41804
15d0c     F2 12 02 FB | 	rdlong	arg01, objptr
15d10     51 00 00 FF 
15d14     4C E5 85 F1 | 	sub	objptr, ##41804
15d18     A7 12 62 FC | 	wrlong	arg01, fp
15d1c     A7 12 02 F6 | 	mov	arg01, fp
15d20     FC 78 BF FD | 	call	#_push
15d24     A7 F0 03 F6 | 	mov	ptra, fp
15d28     B2 00 A0 FD | 	call	#popregs_
15d2c                 | _do_mousey_ret
15d2c     2D 00 64 FD | 	ret
15d30                 | 
15d30                 | ' 
15d30                 | ' '------------------ new
15d30                 | ' 
15d30                 | ' sub do_new
15d30                 | _do_new
15d30     03 4A 05 F6 | 	mov	COUNT_, #3
15d34     A8 00 A0 FD | 	call	#pushregs_
15d38                 | ' 
15d38                 | ' if inrun=1 then inrun=2
15d38     50 00 00 FF 
15d3c     EC E4 05 F1 | 	add	objptr, ##41196
15d40     F2 16 02 FB | 	rdlong	arg03, objptr
15d44     50 00 00 FF 
15d48     EC E4 85 F1 | 	sub	objptr, ##41196
15d4c     01 16 0E F2 | 	cmp	arg03, #1 wz
15d50     50 00 00 AF 
15d54     EC E4 05 A1 |  if_e	add	objptr, ##41196
15d58     F2 04 68 AC |  if_e	wrlong	#2, objptr
15d5c     50 00 00 AF 
15d60     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15d64     13 12 C6 F9 | 	decod	arg01, #19
15d68     01 14 66 F6 | 	neg	arg02, #1
15d6c     58 D3 B0 FD | 	call	#_pslpoke
15d70     35 00 00 FF 
15d74     08 E4 05 F1 | 	add	objptr, ##27144
15d78     F2 00 68 FC | 	wrlong	#0, objptr
15d7c                 | ' pslpoke(memlo,$FFFFFFFF)
15d7c                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
15d7c     00 26 06 F6 | 	mov	local01, #0
15d80     20 00 00 FF 
15d84     10 E4 85 F1 | 	sub	objptr, ##16400
15d88     97 1E 48 FB | 	callpa	#(@LR__1781-@LR__1780)>>2,fcache_load_ptr_
15d8c                 | LR__1780
15d8c     13 17 02 F6 | 	mov	arg03, local01
15d90     04 16 66 F0 | 	shl	arg03, #4
15d94     F2 16 02 F1 | 	add	arg03, objptr
15d98     B7 01 00 FF 
15d9c     CA 14 06 F6 | 	mov	arg02, ##@LR__5928
15da0     0B 15 62 FC | 	wrlong	arg02, arg03
15da4     13 29 02 F6 | 	mov	local02, local01
15da8     04 28 66 F0 | 	shl	local02, #4
15dac     F2 28 02 F1 | 	add	local02, objptr
15db0     0C 28 06 F1 | 	add	local02, #12
15db4     14 01 68 FC | 	wrlong	#0, local02
15db8     01 26 06 F1 | 	add	local01, #1
15dbc     02 00 00 FF 
15dc0     01 26 56 F2 | 	cmps	local01, ##1025 wc
15dc4     C4 FF 9F CD |  if_b	jmp	#LR__1780
15dc8                 | LR__1781
15dc8     35 00 00 FF 
15dcc     90 E4 05 F1 | 	add	objptr, ##27280
15dd0     00 04 80 FF 
15dd4     F2 00 68 FC | 	wrlong	##524288, objptr
15dd8     06 00 00 FF 
15ddc     30 E4 05 F1 | 	add	objptr, ##3120
15de0     00 04 80 FF 
15de4     F2 00 68 FC | 	wrlong	##524288, objptr
15de8     04 E4 05 F1 | 	add	objptr, #4
15dec     00 04 80 FF 
15df0     F2 00 68 FC | 	wrlong	##524288, objptr
15df4     0D 00 00 FF 
15df8     64 E4 85 F1 | 	sub	objptr, ##6756
15dfc     F2 00 68 FC | 	wrlong	#0, objptr
15e00     07 00 00 FF 
15e04     24 E4 05 F1 | 	add	objptr, ##3620
15e08     F2 00 68 FC | 	wrlong	#0, objptr
15e0c     07 00 00 FF 
15e10     20 E4 85 F1 | 	sub	objptr, ##3616
15e14     00 04 80 FF 
15e18     F2 00 68 FC | 	wrlong	##524288, objptr
15e1c     0D 00 00 FF 
15e20     D0 E4 05 F1 | 	add	objptr, ##6864
15e24     F2 00 68 FC | 	wrlong	#0, objptr
15e28     B7 01 00 FF 
15e2c     CB 2A 06 F6 | 	mov	local03, ##@LR__5929
15e30     01 00 00 FF 
15e34     B0 E5 05 F1 | 	add	objptr, ##944
15e38     F2 2A 62 FC | 	wrlong	local03, objptr
15e3c     08 00 00 FF 
15e40     50 E4 85 F1 | 	sub	objptr, ##4176
15e44     F2 00 68 FC | 	wrlong	#0, objptr
15e48     04 E4 05 F1 | 	add	objptr, #4
15e4c     FF FF FF FF 
15e50     F2 FE 6B FC | 	wrlong	##-1, objptr
15e54     06 00 00 FF 
15e58     A0 E4 05 F1 | 	add	objptr, ##3232
15e5c     F2 00 68 FC | 	wrlong	#0, objptr
15e60     04 E4 05 F1 | 	add	objptr, #4
15e64     F2 00 68 FC | 	wrlong	#0, objptr
15e68                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
15e68                 | ' stackpointer=0
15e68                 | ' lineptr=0 
15e68                 | ' programptr=memlo ': stringptr=0
15e68                 | ' dataptr=0 : readline=""
15e68                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
15e68                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
15e68     00 26 06 F6 | 	mov	local01, #0
15e6c     06 00 00 FF 
15e70     9C E4 85 F1 | 	sub	objptr, ##3228
15e74     97 16 48 FB | 	callpa	#(@LR__1783-@LR__1782)>>2,fcache_load_ptr_
15e78                 | LR__1782
15e78     13 29 02 F6 | 	mov	local02, local01
15e7c     02 28 66 F0 | 	shl	local02, #2
15e80     13 29 02 F1 | 	add	local02, local01
15e84     02 28 66 F0 | 	shl	local02, #2
15e88     F2 28 02 F1 | 	add	local02, objptr
15e8c     08 28 06 F1 | 	add	local02, #8
15e90     FF FF FF FF 
15e94     14 FF 6B FC | 	wrlong	##-1, local02
15e98     01 26 06 F1 | 	add	local01, #1
15e9c     41 26 56 F2 | 	cmps	local01, #65 wc
15ea0     D4 FF 9F CD |  if_b	jmp	#LR__1782
15ea4                 | LR__1783
15ea4     4A 00 00 FF 
15ea8     98 E4 85 F1 | 	sub	objptr, ##38040
15eac                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
15eac     00 26 06 F6 | 	mov	local01, #0
15eb0                 | LR__1784
15eb0     13 29 02 F6 | 	mov	local02, local01
15eb4     02 28 66 F0 | 	shl	local02, #2
15eb8     52 00 00 FF 
15ebc     54 E4 05 F1 | 	add	objptr, ##42068
15ec0     F2 28 02 F1 | 	add	local02, objptr
15ec4     14 2B 0A FB | 	rdlong	local03, local02 wz
15ec8     52 00 00 FF 
15ecc     54 E4 85 F1 | 	sub	objptr, ##42068
15ed0     34 00 90 AD |  if_e	jmp	#LR__1785
15ed4     13 13 02 F6 | 	mov	arg01, local01
15ed8     00 14 06 F6 | 	mov	arg02, #0
15edc     00 16 06 F6 | 	mov	arg03, #0
15ee0     90 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15ee4     13 29 02 F6 | 	mov	local02, local01
15ee8     02 28 66 F0 | 	shl	local02, #2
15eec     52 00 00 FF 
15ef0     54 E4 05 F1 | 	add	objptr, ##42068
15ef4     F2 28 02 F1 | 	add	local02, objptr
15ef8     14 13 02 FB | 	rdlong	arg01, local02
15efc     52 00 00 FF 
15f00     54 E4 85 F1 | 	sub	objptr, ##42068
15f04     F0 4C B1 FD | 	call	#__system___gc_free
15f08                 | LR__1785
15f08     01 26 06 F1 | 	add	local01, #1
15f0c     10 26 56 F2 | 	cmps	local01, #16 wc
15f10     9C FF 9F CD |  if_b	jmp	#LR__1784
15f14     52 00 00 FF 
15f18     A8 E4 05 F1 | 	add	objptr, ##42152
15f1c     00 C0 9F FF 
15f20     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f24     04 E4 05 F1 | 	add	objptr, #4
15f28     00 C0 9F FF 
15f2c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15f30     52 00 00 FF 
15f34     A8 E4 85 F1 | 	sub	objptr, ##42152
15f38     F2 2A 02 FB | 	rdlong	local03, objptr
15f3c     52 00 00 FF 
15f40     94 E4 05 F1 | 	add	objptr, ##42132
15f44     F2 2A 62 FC | 	wrlong	local03, objptr
15f48     52 00 00 FF 
15f4c     98 E4 85 F1 | 	sub	objptr, ##42136
15f50     11 12 06 F6 | 	mov	arg01, #17
15f54     08 14 06 F6 | 	mov	arg02, #8
15f58     10 16 06 F6 | 	mov	arg03, #16
15f5c     14 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f60     10 12 06 F6 | 	mov	arg01, #16
15f64     20 14 06 F6 | 	mov	arg02, #32
15f68     20 16 06 F6 | 	mov	arg03, #32
15f6c     04 E0 B0 FD | 	call	#_hg010b_spin2_setspritesize
15f70     B7 01 00 FF 
15f74     CC 2A 06 F6 | 	mov	local03, ##@LR__5930
15f78     52 00 00 FF 
15f7c     C4 E4 05 F1 | 	add	objptr, ##42180
15f80     F2 2A 62 FC | 	wrlong	local03, objptr
15f84     52 00 00 FF 
15f88     C4 E4 85 F1 | 	sub	objptr, ##42180
15f8c     90 C3 B0 FD | 	call	#_init_audio
15f90     A7 F0 03 F6 | 	mov	ptra, fp
15f94     B2 00 A0 FD | 	call	#popregs_
15f98                 | _do_new_ret
15f98     2D 00 64 FD | 	ret
15f9c                 | 
15f9c                 | ' 
15f9c                 | ' '-------------------- next
15f9c                 | ' 
15f9c                 | ' sub do_next()
15f9c                 | _do_next
15f9c     04 4A 05 F6 | 	mov	COUNT_, #4
15fa0     A8 00 A0 FD | 	call	#pushregs_
15fa4     E0 75 BF FD | 	call	#_pop
15fa8     FD 26 02 F6 | 	mov	local01, result1
15fac     FE 28 02 F6 | 	mov	local02, result2
15fb0     FF 2A 02 F6 | 	mov	local03, result3
15fb4                 | ' t1=pop() :varnum=t1.result.uresult
15fb4                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
15fb4     50 00 00 FF 
15fb8     30 E5 05 F1 | 	add	objptr, ##41264
15fbc     F2 14 02 FB | 	rdlong	arg02, objptr
15fc0     0A 13 02 F6 | 	mov	arg01, arg02
15fc4     02 12 66 F0 | 	shl	arg01, #2
15fc8     0A 13 02 F1 | 	add	arg01, arg02
15fcc     02 12 66 F0 | 	shl	arg01, #2
15fd0     06 00 00 FF 
15fd4     98 E4 85 F1 | 	sub	objptr, ##3224
15fd8     F2 12 02 F1 | 	add	arg01, objptr
15fdc     08 12 06 F1 | 	add	arg01, #8
15fe0     09 15 02 FB | 	rdlong	arg02, arg01
15fe4     13 15 0A F2 | 	cmp	arg02, local01 wz
15fe8     4A 00 00 FF 
15fec     98 E4 85 F1 | 	sub	objptr, ##38040
15ff0     10 00 90 AD |  if_e	jmp	#LR__1790
15ff4     25 12 06 F6 | 	mov	arg01, #37
15ff8     00 14 06 F6 | 	mov	arg02, #0
15ffc     28 CF B0 FD | 	call	#_printerror
16000     54 03 90 FD | 	jmp	#LR__1797
16004                 | LR__1790
16004                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
16004     13 15 02 F6 | 	mov	arg02, local01
16008     04 14 66 F0 | 	shl	arg02, #4
1600c     14 00 00 FF 
16010     F8 E5 05 F1 | 	add	objptr, ##10744
16014     F2 14 02 F1 | 	add	arg02, objptr
16018     0C 14 06 F1 | 	add	arg02, #12
1601c     0A 15 02 FB | 	rdlong	arg02, arg02
16020     1E 14 0E F2 | 	cmp	arg02, #30 wz
16024     14 00 00 FF 
16028     F8 E5 85 F1 | 	sub	objptr, ##10744
1602c     54 00 90 5D |  if_ne	jmp	#LR__1791
16030     13 15 02 F6 | 	mov	arg02, local01
16034     04 14 66 F0 | 	shl	arg02, #4
16038     14 00 00 FF 
1603c     F8 E5 05 F1 | 	add	objptr, ##10744
16040     F2 14 02 F1 | 	add	arg02, objptr
16044     0C 14 06 F1 | 	add	arg02, #12
16048     0A 39 68 FC | 	wrlong	#28, arg02
1604c     13 2D 02 F6 | 	mov	local04, local01
16050     04 2C 66 F0 | 	shl	local04, #4
16054     F2 2C 02 F1 | 	add	local04, objptr
16058     13 15 02 F6 | 	mov	arg02, local01
1605c     04 14 66 F0 | 	shl	arg02, #4
16060     F2 14 02 F1 | 	add	arg02, objptr
16064     04 14 06 F1 | 	add	arg02, #4
16068     0A 13 02 FB | 	rdlong	arg01, arg02
1606c     14 00 00 FF 
16070     F8 E5 85 F1 | 	sub	objptr, ##10744
16074     01 14 06 F6 | 	mov	arg02, #1
16078     E0 3B B1 FD | 	call	#__system___float_tointeger
1607c     04 2C 06 F1 | 	add	local04, #4
16080     16 FB 61 FC | 	wrlong	result1, local04
16084                 | LR__1791
16084     50 00 00 FF 
16088     30 E5 05 F1 | 	add	objptr, ##41264
1608c     F2 2C 02 FB | 	rdlong	local04, objptr
16090     16 15 02 F6 | 	mov	arg02, local04
16094     02 14 66 F0 | 	shl	arg02, #2
16098     16 15 02 F1 | 	add	arg02, local04
1609c     02 14 66 F0 | 	shl	arg02, #2
160a0     06 00 00 FF 
160a4     98 E4 85 F1 | 	sub	objptr, ##3224
160a8     F2 14 02 F1 | 	add	arg02, objptr
160ac     0C 14 06 F1 | 	add	arg02, #12
160b0     0A FF 01 FB | 	rdlong	result3, arg02
160b4     13 2D 02 F6 | 	mov	local04, local01
160b8     04 2C 66 F0 | 	shl	local04, #4
160bc     35 00 00 FF 
160c0     A0 E4 85 F1 | 	sub	objptr, ##27296
160c4     F2 2C 02 F1 | 	add	local04, objptr
160c8     13 15 02 F6 | 	mov	arg02, local01
160cc     04 14 66 F0 | 	shl	arg02, #4
160d0     F2 14 02 F1 | 	add	arg02, objptr
160d4     04 14 06 F1 | 	add	arg02, #4
160d8     0A 13 02 FB | 	rdlong	arg01, arg02
160dc     FF 12 02 F1 | 	add	arg01, result3
160e0     04 2C 06 F1 | 	add	local04, #4
160e4     16 13 62 FC | 	wrlong	arg01, local04
160e8                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
160e8                 | ' if fortable(fortop).stepval>=0 then
160e8     3B 00 00 FF 
160ec     38 E5 05 F1 | 	add	objptr, ##30520
160f0     F2 2C 02 FB | 	rdlong	local04, objptr
160f4     16 13 02 F6 | 	mov	arg01, local04
160f8     02 12 66 F0 | 	shl	arg01, #2
160fc     16 13 02 F1 | 	add	arg01, local04
16100     02 12 66 F0 | 	shl	arg01, #2
16104     06 00 00 FF 
16108     98 E4 85 F1 | 	sub	objptr, ##3224
1610c     F2 12 02 F1 | 	add	arg01, objptr
16110     0C 12 06 F1 | 	add	arg01, #12
16114     09 13 02 FB | 	rdlong	arg01, arg01
16118     00 12 56 F2 | 	cmps	arg01, #0 wc
1611c     4A 00 00 FF 
16120     98 E4 85 F1 | 	sub	objptr, ##38040
16124     78 00 90 CD |  if_b	jmp	#LR__1792
16128                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
16128     04 26 66 F0 | 	shl	local01, #4
1612c     14 00 00 FF 
16130     F8 E5 05 F1 | 	add	objptr, ##10744
16134     F2 26 02 F1 | 	add	local01, objptr
16138     3B 00 00 FF 
1613c     38 E5 05 F1 | 	add	objptr, ##30520
16140     F2 12 02 FB | 	rdlong	arg01, objptr
16144     09 2D 02 F6 | 	mov	local04, arg01
16148     02 2C 66 F0 | 	shl	local04, #2
1614c     09 2D 02 F1 | 	add	local04, arg01
16150     02 2C 66 F0 | 	shl	local04, #2
16154     06 00 00 FF 
16158     98 E4 85 F1 | 	sub	objptr, ##3224
1615c     F2 2C 02 F1 | 	add	local04, objptr
16160     04 26 06 F1 | 	add	local01, #4
16164     13 27 02 FB | 	rdlong	local01, local01
16168     10 2C 06 F1 | 	add	local04, #16
1616c     16 2D 02 FB | 	rdlong	local04, local04
16170     16 27 5A F2 | 	cmps	local01, local04 wcz
16174     4A 00 00 FF 
16178     98 E4 85 F1 | 	sub	objptr, ##38040
1617c     9C 00 90 ED |  if_be	jmp	#LR__1794
16180     50 00 00 FF 
16184     30 E5 05 F1 | 	add	objptr, ##41264
16188     F2 2C 02 FB | 	rdlong	local04, objptr
1618c     01 2C 86 F1 | 	sub	local04, #1
16190     F2 2C 62 FC | 	wrlong	local04, objptr
16194     50 00 00 FF 
16198     30 E5 85 F1 | 	sub	objptr, ##41264
1619c     B8 01 90 FD | 	jmp	#LR__1797
161a0                 | LR__1792
161a0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
161a0     13 2D 02 F6 | 	mov	local04, local01
161a4     04 2C 66 F0 | 	shl	local04, #4
161a8     14 00 00 FF 
161ac     F8 E5 05 F1 | 	add	objptr, ##10744
161b0     F2 2C 02 F1 | 	add	local04, objptr
161b4     3B 00 00 FF 
161b8     38 E5 05 F1 | 	add	objptr, ##30520
161bc     F2 26 02 FB | 	rdlong	local01, objptr
161c0     13 13 02 F6 | 	mov	arg01, local01
161c4     02 12 66 F0 | 	shl	arg01, #2
161c8     13 13 02 F1 | 	add	arg01, local01
161cc     02 12 66 F0 | 	shl	arg01, #2
161d0     06 00 00 FF 
161d4     98 E4 85 F1 | 	sub	objptr, ##3224
161d8     F2 12 02 F1 | 	add	arg01, objptr
161dc     04 2C 06 F1 | 	add	local04, #4
161e0     16 2D 02 FB | 	rdlong	local04, local04
161e4     10 12 06 F1 | 	add	arg01, #16
161e8     09 13 02 FB | 	rdlong	arg01, arg01
161ec     09 2D 52 F2 | 	cmps	local04, arg01 wc
161f0     4A 00 00 FF 
161f4     98 E4 85 F1 | 	sub	objptr, ##38040
161f8     20 00 90 3D |  if_ae	jmp	#LR__1793
161fc     50 00 00 FF 
16200     30 E5 05 F1 | 	add	objptr, ##41264
16204     F2 2C 02 FB | 	rdlong	local04, objptr
16208     01 2C 86 F1 | 	sub	local04, #1
1620c     F2 2C 62 FC | 	wrlong	local04, objptr
16210     50 00 00 FF 
16214     30 E5 85 F1 | 	sub	objptr, ##41264
16218     3C 01 90 FD | 	jmp	#LR__1797
1621c                 | LR__1793
1621c                 | LR__1794
1621c                 | ' ' if not returned, goto pointer 
1621c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1621c     50 00 00 FF 
16220     EC E4 05 F1 | 	add	objptr, ##41196
16224     F2 2C 02 FB | 	rdlong	local04, objptr
16228     50 00 00 FF 
1622c     EC E4 85 F1 | 	sub	objptr, ##41196
16230     01 2C 16 F2 | 	cmp	local04, #1 wc
16234     DC 00 90 CD |  if_b	jmp	#LR__1795
16238     50 00 00 FF 
1623c     30 E5 05 F1 | 	add	objptr, ##41264
16240     F2 2C 02 FB | 	rdlong	local04, objptr
16244     16 27 02 F6 | 	mov	local01, local04
16248     02 26 66 F0 | 	shl	local01, #2
1624c     16 27 02 F1 | 	add	local01, local04
16250     02 26 66 F0 | 	shl	local01, #2
16254     06 00 00 FF 
16258     98 E4 85 F1 | 	sub	objptr, ##3224
1625c     F2 26 02 F1 | 	add	local01, objptr
16260     06 00 00 FF 
16264     20 E4 05 F1 | 	add	objptr, ##3104
16268     F2 2C 02 FB | 	rdlong	local04, objptr
1626c     50 00 00 FF 
16270     B8 E4 85 F1 | 	sub	objptr, ##41144
16274     13 27 02 FB | 	rdlong	local01, local01
16278     13 2D 0A F2 | 	cmp	local04, local01 wz
1627c     94 00 90 AD |  if_e	jmp	#LR__1795
16280     50 00 00 FF 
16284     30 E5 05 F1 | 	add	objptr, ##41264
16288     F2 2C 02 FB | 	rdlong	local04, objptr
1628c     16 27 02 F6 | 	mov	local01, local04
16290     02 26 66 F0 | 	shl	local01, #2
16294     16 27 02 F1 | 	add	local01, local04
16298     02 26 66 F0 | 	shl	local01, #2
1629c     06 00 00 FF 
162a0     98 E4 85 F1 | 	sub	objptr, ##3224
162a4     F2 26 02 F1 | 	add	local01, objptr
162a8     13 27 02 FB | 	rdlong	local01, local01
162ac     06 00 00 FF 
162b0     20 E4 05 F1 | 	add	objptr, ##3104
162b4     F2 26 62 FC | 	wrlong	local01, objptr
162b8     78 E4 05 F1 | 	add	objptr, #120
162bc     F2 2C 02 FB | 	rdlong	local04, objptr
162c0     16 27 02 F6 | 	mov	local01, local04
162c4     02 26 66 F0 | 	shl	local01, #2
162c8     16 27 02 F1 | 	add	local01, local04
162cc     02 26 66 F0 | 	shl	local01, #2
162d0     06 00 00 FF 
162d4     98 E4 85 F1 | 	sub	objptr, ##3224
162d8     F2 26 02 F1 | 	add	local01, objptr
162dc     04 26 06 F1 | 	add	local01, #4
162e0     13 27 02 FB | 	rdlong	local01, local01
162e4     06 00 00 FF 
162e8     24 E4 05 F1 | 	add	objptr, ##3108
162ec     F2 26 62 FC | 	wrlong	local01, objptr
162f0     06 00 00 FF 
162f4     40 E4 85 F1 | 	sub	objptr, ##3136
162f8     F2 2C 02 FB | 	rdlong	local04, objptr
162fc     01 2C 86 F1 | 	sub	local04, #1
16300     04 E4 05 F1 | 	add	objptr, #4
16304     F2 2C 62 FC | 	wrlong	local04, objptr
16308     4A 00 00 FF 
1630c     80 E4 85 F1 | 	sub	objptr, ##38016
16310     44 00 90 FD | 	jmp	#LR__1796
16314                 | LR__1795
16314     50 00 00 FF 
16318     30 E5 05 F1 | 	add	objptr, ##41264
1631c     F2 2C 02 FB | 	rdlong	local04, objptr
16320     16 27 02 F6 | 	mov	local01, local04
16324     02 26 66 F0 | 	shl	local01, #2
16328     16 27 02 F1 | 	add	local01, local04
1632c     02 26 66 F0 | 	shl	local01, #2
16330     06 00 00 FF 
16334     98 E4 85 F1 | 	sub	objptr, ##3224
16338     F2 26 02 F1 | 	add	local01, objptr
1633c     04 26 06 F1 | 	add	local01, #4
16340     13 27 02 FB | 	rdlong	local01, local01
16344     01 26 86 F1 | 	sub	local01, #1
16348     18 E4 85 F1 | 	sub	objptr, #24
1634c     F2 26 62 FC | 	wrlong	local01, objptr
16350     4A 00 00 FF 
16354     80 E4 85 F1 | 	sub	objptr, ##38016
16358                 | LR__1796
16358                 | LR__1797
16358     A7 F0 03 F6 | 	mov	ptra, fp
1635c     B2 00 A0 FD | 	call	#popregs_
16360                 | _do_next_ret
16360     2D 00 64 FD | 	ret
16364                 | 
16364                 | ' 
16364                 | ' '-------------------- no command (print "Unknown command")
16364                 | ' 
16364                 | ' sub do_no_command
16364                 | _do_no_command
16364     50 00 00 FF 
16368     F0 E4 05 F1 | 	add	objptr, ##41200
1636c     F2 14 02 FB | 	rdlong	arg02, objptr
16370     50 00 00 FF 
16374     F0 E4 85 F1 | 	sub	objptr, ##41200
16378     17 12 06 F6 | 	mov	arg01, #23
1637c     A8 CB B0 FD | 	call	#_printerror
16380                 | _do_no_command_ret
16380     2D 00 64 FD | 	ret
16384                 | 
16384                 | ' 
16384                 | ' '-------------------- nothing
16384                 | ' 
16384                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
16384                 | _do_nothing
16384                 | _do_nothing_ret
16384     2D 00 64 FD | 	ret
16388                 | 
16388                 | ' 
16388                 | ' '-------------------- on
16388                 | ' 
16388                 | ' sub do_on
16388                 | _do_on
16388     01 4A 05 F6 | 	mov	COUNT_, #1
1638c     A8 00 A0 FD | 	call	#pushregs_
16390     18 F0 07 F1 | 	add	ptra, #24
16394     4A 00 00 FF 
16398     80 E4 05 F1 | 	add	objptr, ##38016
1639c     F2 12 02 FB | 	rdlong	arg01, objptr
163a0     09 FD 01 F6 | 	mov	result2, arg01
163a4     01 FC 65 F0 | 	shl	result2, #1
163a8     09 FD 01 F1 | 	add	result2, arg01
163ac     02 FC 65 F0 | 	shl	result2, #2
163b0     03 00 00 FF 
163b4     04 E4 85 F1 | 	sub	objptr, ##1540
163b8     F2 FC 01 F1 | 	add	result2, objptr
163bc     FE 12 02 FB | 	rdlong	arg01, result2
163c0     14 4E 05 F1 | 	add	fp, #20
163c4     A7 12 62 FC | 	wrlong	arg01, fp
163c8     03 00 00 FF 
163cc     04 E4 05 F1 | 	add	objptr, ##1540
163d0     F2 12 02 FB | 	rdlong	arg01, objptr
163d4     09 27 02 F6 | 	mov	local01, arg01
163d8     01 26 66 F0 | 	shl	local01, #1
163dc     09 27 02 F1 | 	add	local01, arg01
163e0     02 26 66 F0 | 	shl	local01, #2
163e4     03 00 00 FF 
163e8     04 E4 85 F1 | 	sub	objptr, ##1540
163ec     F2 26 02 F1 | 	add	local01, objptr
163f0     04 26 06 F1 | 	add	local01, #4
163f4     13 27 02 FB | 	rdlong	local01, local01
163f8     08 4E 85 F1 | 	sub	fp, #8
163fc     A7 26 62 FC | 	wrlong	local01, fp
16400     0C 4E 85 F1 | 	sub	fp, #12
16404     47 00 00 FF 
16408     7C E4 85 F1 | 	sub	objptr, ##36476
1640c     78 71 BF FD | 	call	#_pop
16410     FF 26 02 F6 | 	mov	local01, result3
16414     A7 FA 61 FC | 	wrlong	result1, fp
16418     04 4E 05 F1 | 	add	fp, #4
1641c     A7 FC 61 FC | 	wrlong	result2, fp
16420     04 4E 05 F1 | 	add	fp, #4
16424     A7 26 62 FC | 	wrlong	local01, fp
16428     08 4E 85 F1 | 	sub	fp, #8
1642c     A7 12 02 F6 | 	mov	arg01, fp
16430     38 73 BF FD | 	call	#_converttoint
16434     10 4E 05 F1 | 	add	fp, #16
16438     A7 FA 61 FC | 	wrlong	result1, fp
1643c                 | ' 
1643c                 | ' numpar=compiledline(lineptr_e).result.uresult
1643c                 | ' skip=compiledline(lineptr_e).result.twowords(1)
1643c                 | ' t1=pop()
1643c                 | ' t=converttoint(t1)
1643c                 | ' if t<1 orelse t>numpar then return
1643c     10 4E 85 F1 | 	sub	fp, #16
16440     01 FA 55 F2 | 	cmps	result1, #1 wc
16444     58 00 90 CD |  if_b	jmp	#LR__1800
16448     10 4E 05 F1 | 	add	fp, #16
1644c     A7 26 02 FB | 	rdlong	local01, fp
16450     04 4E 05 F1 | 	add	fp, #4
16454     A7 12 02 FB | 	rdlong	arg01, fp
16458     14 4E 85 F1 | 	sub	fp, #20
1645c     09 27 5A F2 | 	cmps	local01, arg01 wcz
16460     3C 00 90 1D |  if_a	jmp	#LR__1800
16464     10 4E 05 F1 | 	add	fp, #16
16468     A7 26 02 FB | 	rdlong	local01, fp
1646c     01 26 86 F1 | 	sub	local01, #1
16470     04 4E 85 F1 | 	sub	fp, #4
16474     A7 12 02 FB | 	rdlong	arg01, fp
16478     13 13 02 FD | 	qmul	arg01, local01
1647c     4A 00 00 FF 
16480     80 E4 05 F1 | 	add	objptr, ##38016
16484     F2 26 02 FB | 	rdlong	local01, objptr
16488     0C 4E 85 F1 | 	sub	fp, #12
1648c     18 12 62 FD | 	getqx	arg01
16490     09 27 02 F1 | 	add	local01, arg01
16494     F2 26 62 FC | 	wrlong	local01, objptr
16498     4A 00 00 FF 
1649c     80 E4 85 F1 | 	sub	objptr, ##38016
164a0                 | LR__1800
164a0     A7 F0 03 F6 | 	mov	ptra, fp
164a4     B2 00 A0 FD | 	call	#popregs_
164a8                 | _do_on_ret
164a8     2D 00 64 FD | 	ret
164ac                 | 
164ac                 | ' 
164ac                 | ' '-------------------- open
164ac                 | ' 
164ac                 | ' sub do_open
164ac                 | _do_open
164ac     02 4A 05 F6 | 	mov	COUNT_, #2
164b0     A8 00 A0 FD | 	call	#pushregs_
164b4     20 F0 07 F1 | 	add	ptra, #32
164b8     4A 00 00 FF 
164bc     80 E4 05 F1 | 	add	objptr, ##38016
164c0     F2 16 02 FB | 	rdlong	arg03, objptr
164c4     0B 15 02 F6 | 	mov	arg02, arg03
164c8     01 14 66 F0 | 	shl	arg02, #1
164cc     0B 15 02 F1 | 	add	arg02, arg03
164d0     02 14 66 F0 | 	shl	arg02, #2
164d4     03 00 00 FF 
164d8     04 E4 85 F1 | 	sub	objptr, ##1540
164dc     F2 14 02 F1 | 	add	arg02, objptr
164e0     0A 17 02 FB | 	rdlong	arg03, arg02
164e4     10 4E 05 F1 | 	add	fp, #16
164e8     A7 16 62 FC | 	wrlong	arg03, fp
164ec     10 4E 85 F1 | 	sub	fp, #16
164f0     47 00 00 FF 
164f4     7C E4 85 F1 | 	sub	objptr, ##36476
164f8     8C 70 BF FD | 	call	#_pop
164fc     FF 16 02 F6 | 	mov	arg03, result3
16500     A7 FA 61 FC | 	wrlong	result1, fp
16504     04 4E 05 F1 | 	add	fp, #4
16508     A7 FC 61 FC | 	wrlong	result2, fp
1650c     04 4E 05 F1 | 	add	fp, #4
16510     A7 16 62 FC | 	wrlong	arg03, fp
16514                 | ' 
16514                 | ' numpar=compiledline(lineptr_e).result.uresult
16514                 | ' 
16514                 | ' t1=pop()
16514                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16514     08 4E 85 F1 | 	sub	fp, #8
16518     2B 16 0E F2 | 	cmp	arg03, #43 wz
1651c     18 00 90 5D |  if_ne	jmp	#LR__1810
16520     A7 12 02 FB | 	rdlong	arg01, fp
16524     D8 71 BF FD | 	call	#_convertstring
16528     A7 FA 61 FC | 	wrlong	result1, fp
1652c     08 4E 05 F1 | 	add	fp, #8
16530     A7 3E 68 FC | 	wrlong	#31, fp
16534     08 4E 85 F1 | 	sub	fp, #8
16538                 | LR__1810
16538                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
16538     08 4E 05 F1 | 	add	fp, #8
1653c     A7 16 02 FB | 	rdlong	arg03, fp
16540     08 4E 85 F1 | 	sub	fp, #8
16544     1F 16 0E F2 | 	cmp	arg03, #31 wz
16548     44 00 90 AD |  if_e	jmp	#LR__1811
1654c     00 12 06 F6 | 	mov	arg01, #0
16550     68 60 B1 FD | 	call	#__system___getiolock_0603
16554     FD 12 02 F6 | 	mov	arg01, result1
16558     BC 03 B1 FD | 	call	#__system___lockmem
1655c     B7 01 00 FF 
16560     D7 14 06 F6 | 	mov	arg02, ##@LR__5931
16564     00 12 06 F6 | 	mov	arg01, #0
16568     00 16 06 F6 | 	mov	arg03, #0
1656c     A0 10 B1 FD | 	call	#__system___basic_print_string
16570     00 12 06 F6 | 	mov	arg01, #0
16574     0A 14 06 F6 | 	mov	arg02, #10
16578     00 16 06 F6 | 	mov	arg03, #0
1657c     38 10 B1 FD | 	call	#__system___basic_print_char
16580     00 12 06 F6 | 	mov	arg01, #0
16584     34 60 B1 FD | 	call	#__system___getiolock_0603
16588     FD 00 68 FC | 	wrlong	#0, result1
1658c     28 02 90 FD | 	jmp	#LR__1822
16590                 | LR__1811
16590     A7 16 02 FB | 	rdlong	arg03, fp
16594     0C 4E 05 F1 | 	add	fp, #12
16598     A7 16 62 FC | 	wrlong	arg03, fp
1659c     0C 4E 85 F1 | 	sub	fp, #12
165a0     E4 6F BF FD | 	call	#_pop
165a4     FF 16 02 F6 | 	mov	arg03, result3
165a8     A7 FA 61 FC | 	wrlong	result1, fp
165ac     04 4E 05 F1 | 	add	fp, #4
165b0     A7 FC 61 FC | 	wrlong	result2, fp
165b4     04 4E 05 F1 | 	add	fp, #4
165b8     A7 16 62 FC | 	wrlong	arg03, fp
165bc                 | ' filename=t1.result.sresult
165bc                 | ' t1=pop()
165bc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
165bc     08 4E 85 F1 | 	sub	fp, #8
165c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
165c4     18 00 90 5D |  if_ne	jmp	#LR__1812
165c8     A7 12 02 FB | 	rdlong	arg01, fp
165cc     30 71 BF FD | 	call	#_convertstring
165d0     A7 FA 61 FC | 	wrlong	result1, fp
165d4     08 4E 05 F1 | 	add	fp, #8
165d8     A7 3E 68 FC | 	wrlong	#31, fp
165dc     08 4E 85 F1 | 	sub	fp, #8
165e0                 | LR__1812
165e0     14 4E 05 F1 | 	add	fp, #20
165e4     A7 00 68 FC | 	wrlong	#0, fp
165e8                 | ' mode=0
165e8                 | ' if t1.result_type=result_string then
165e8     0C 4E 85 F1 | 	sub	fp, #12
165ec     A7 14 02 FB | 	rdlong	arg02, fp
165f0     08 4E 85 F1 | 	sub	fp, #8
165f4     1F 14 0E F2 | 	cmp	arg02, #31 wz
165f8     64 00 90 5D |  if_ne	jmp	#LR__1813
165fc                 | '   if t1.result.sresult="read" then mode=1
165fc     A7 12 02 FB | 	rdlong	arg01, fp
16600     B7 01 00 FF 
16604     E9 14 06 F6 | 	mov	arg02, ##@LR__5932
16608     34 03 B1 FD | 	call	#__system___string_cmp
1660c     00 FA 0D F2 | 	cmp	result1, #0 wz
16610     14 4E 05 A1 |  if_e	add	fp, #20
16614     A7 02 68 AC |  if_e	wrlong	#1, fp
16618     14 4E 85 A1 |  if_e	sub	fp, #20
1661c                 | '   if t1.result.sresult="write" then mode=2
1661c     A7 12 02 FB | 	rdlong	arg01, fp
16620     B7 01 00 FF 
16624     EE 14 06 F6 | 	mov	arg02, ##@LR__5933
16628     14 03 B1 FD | 	call	#__system___string_cmp
1662c     00 FA 0D F2 | 	cmp	result1, #0 wz
16630     14 4E 05 A1 |  if_e	add	fp, #20
16634     A7 04 68 AC |  if_e	wrlong	#2, fp
16638     14 4E 85 A1 |  if_e	sub	fp, #20
1663c                 | '   if t1.result.sresult="append" then mode=4
1663c     A7 12 02 FB | 	rdlong	arg01, fp
16640     B7 01 00 FF 
16644     F4 14 06 F6 | 	mov	arg02, ##@LR__5934
16648     F4 02 B1 FD | 	call	#__system___string_cmp
1664c     00 FA 0D F2 | 	cmp	result1, #0 wz
16650     14 4E 05 A1 |  if_e	add	fp, #20
16654     A7 08 68 AC |  if_e	wrlong	#4, fp
16658     14 4E 85 A1 |  if_e	sub	fp, #20
1665c     14 00 90 FD | 	jmp	#LR__1814
16660                 | LR__1813
16660     A7 12 02 F6 | 	mov	arg01, fp
16664     04 71 BF FD | 	call	#_converttoint
16668     14 4E 05 F1 | 	add	fp, #20
1666c     A7 FA 61 FC | 	wrlong	result1, fp
16670     14 4E 85 F1 | 	sub	fp, #20
16674                 | LR__1814
16674     10 6F BF FD | 	call	#_pop
16678     FF 16 02 F6 | 	mov	arg03, result3
1667c     A7 FA 61 FC | 	wrlong	result1, fp
16680     04 4E 05 F1 | 	add	fp, #4
16684     A7 FC 61 FC | 	wrlong	result2, fp
16688     04 4E 05 F1 | 	add	fp, #4
1668c     A7 16 62 FC | 	wrlong	arg03, fp
16690                 | ' t1=pop()
16690                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
16690     08 4E 85 F1 | 	sub	fp, #8
16694     2C 16 0E F2 | 	cmp	arg03, #44 wz
16698     44 00 90 AD |  if_e	jmp	#LR__1815
1669c     00 12 06 F6 | 	mov	arg01, #0
166a0     18 5F B1 FD | 	call	#__system___getiolock_0603
166a4     FD 12 02 F6 | 	mov	arg01, result1
166a8     6C 02 B1 FD | 	call	#__system___lockmem
166ac     B7 01 00 FF 
166b0     FB 14 06 F6 | 	mov	arg02, ##@LR__5935
166b4     00 12 06 F6 | 	mov	arg01, #0
166b8     00 16 06 F6 | 	mov	arg03, #0
166bc     50 0F B1 FD | 	call	#__system___basic_print_string
166c0     00 12 06 F6 | 	mov	arg01, #0
166c4     0A 14 06 F6 | 	mov	arg02, #10
166c8     00 16 06 F6 | 	mov	arg03, #0
166cc     E8 0E B1 FD | 	call	#__system___basic_print_char
166d0     00 12 06 F6 | 	mov	arg01, #0
166d4     E4 5E B1 FD | 	call	#__system___getiolock_0603
166d8     FD 00 68 FC | 	wrlong	#0, result1
166dc     D8 00 90 FD | 	jmp	#LR__1822
166e0                 | LR__1815
166e0     A7 26 02 FB | 	rdlong	local01, fp
166e4     18 4E 05 F1 | 	add	fp, #24
166e8     A7 26 62 FC | 	wrlong	local01, fp
166ec                 | ' channel  = t1.result.iresult
166ec                 | ' select case  mode
166ec     04 4E 85 F1 | 	sub	fp, #4
166f0     A7 28 02 FB | 	rdlong	local02, fp
166f4     14 4E 85 F1 | 	sub	fp, #20
166f8     01 28 86 F1 | 	sub	local02, #1
166fc     04 28 26 F3 | 	fle	local02, #4
16700     30 28 62 FD | 	jmprel	local02
16704                 | LR__1816
16704     10 00 90 FD | 	jmp	#LR__1817
16708     2C 00 90 FD | 	jmp	#LR__1818
1670c     68 00 90 FD | 	jmp	#LR__1820
16710     44 00 90 FD | 	jmp	#LR__1819
16714     60 00 90 FD | 	jmp	#LR__1820
16718                 | LR__1817
16718     18 4E 05 F1 | 	add	fp, #24
1671c     A7 12 02 FB | 	rdlong	arg01, fp
16720     0C 4E 85 F1 | 	sub	fp, #12
16724     A7 14 02 FB | 	rdlong	arg02, fp
16728     0C 4E 85 F1 | 	sub	fp, #12
1672c     00 16 06 F6 | 	mov	arg03, #0
16730     E8 0D B1 FD | 	call	#__system___basic_open_string
16734     80 00 90 FD | 	jmp	#LR__1821
16738                 | LR__1818
16738     18 4E 05 F1 | 	add	fp, #24
1673c     A7 12 02 FB | 	rdlong	arg01, fp
16740     0C 4E 85 F1 | 	sub	fp, #12
16744     A7 14 02 FB | 	rdlong	arg02, fp
16748     0C 4E 85 F1 | 	sub	fp, #12
1674c     0D 16 06 F6 | 	mov	arg03, #13
16750     C8 0D B1 FD | 	call	#__system___basic_open_string
16754     60 00 90 FD | 	jmp	#LR__1821
16758                 | LR__1819
16758     18 4E 05 F1 | 	add	fp, #24
1675c     A7 12 02 FB | 	rdlong	arg01, fp
16760     0C 4E 85 F1 | 	sub	fp, #12
16764     A7 14 02 FB | 	rdlong	arg02, fp
16768     0C 4E 85 F1 | 	sub	fp, #12
1676c     25 16 06 F6 | 	mov	arg03, #37
16770     A8 0D B1 FD | 	call	#__system___basic_open_string
16774     40 00 90 FD | 	jmp	#LR__1821
16778                 | LR__1820
16778     00 12 06 F6 | 	mov	arg01, #0
1677c     3C 5E B1 FD | 	call	#__system___getiolock_0603
16780     FD 12 02 F6 | 	mov	arg01, result1
16784     90 01 B1 FD | 	call	#__system___lockmem
16788     B7 01 00 FF 
1678c     0D 15 06 F6 | 	mov	arg02, ##@LR__5936
16790     00 12 06 F6 | 	mov	arg01, #0
16794     00 16 06 F6 | 	mov	arg03, #0
16798     74 0E B1 FD | 	call	#__system___basic_print_string
1679c     00 12 06 F6 | 	mov	arg01, #0
167a0     0A 14 06 F6 | 	mov	arg02, #10
167a4     00 16 06 F6 | 	mov	arg03, #0
167a8     0C 0E B1 FD | 	call	#__system___basic_print_char
167ac     00 12 06 F6 | 	mov	arg01, #0
167b0     08 5E B1 FD | 	call	#__system___getiolock_0603
167b4     FD 00 68 FC | 	wrlong	#0, result1
167b8                 | LR__1821
167b8                 | LR__1822
167b8     A7 F0 03 F6 | 	mov	ptra, fp
167bc     B2 00 A0 FD | 	call	#popregs_
167c0                 | _do_open_ret
167c0     2D 00 64 FD | 	ret
167c4                 | 
167c4                 | ' 
167c4                 | ' ' ------------------ padh
167c4                 | ' 
167c4                 | ' sub do_padh
167c4                 | _do_padh
167c4     01 4A 05 F6 | 	mov	COUNT_, #1
167c8     A8 00 A0 FD | 	call	#pushregs_
167cc     14 F0 07 F1 | 	add	ptra, #20
167d0     4A 00 00 FF 
167d4     80 E4 05 F1 | 	add	objptr, ##38016
167d8     F2 26 02 FB | 	rdlong	local01, objptr
167dc     13 17 02 F6 | 	mov	arg03, local01
167e0     01 16 66 F0 | 	shl	arg03, #1
167e4     13 17 02 F1 | 	add	arg03, local01
167e8     02 16 66 F0 | 	shl	arg03, #2
167ec     03 00 00 FF 
167f0     04 E4 85 F1 | 	sub	objptr, ##1540
167f4     F2 16 02 F1 | 	add	arg03, objptr
167f8     0B 17 02 FB | 	rdlong	arg03, arg03
167fc     0C 4E 05 F1 | 	add	fp, #12
16800     A7 16 62 FC | 	wrlong	arg03, fp
16804                 | ' 
16804                 | ' numpar=compiledline(lineptr_e).result.uresult
16804                 | ' if numpar>1 then print "padh: "; : printerror(39) : return
16804     0C 4E 85 F1 | 	sub	fp, #12
16808     02 16 16 F2 | 	cmp	arg03, #2 wc
1680c     47 00 00 FF 
16810     7C E4 85 F1 | 	sub	objptr, ##36476
16814     40 00 90 CD |  if_b	jmp	#LR__1830
16818     00 12 06 F6 | 	mov	arg01, #0
1681c     9C 5D B1 FD | 	call	#__system___getiolock_0603
16820     FD 12 02 F6 | 	mov	arg01, result1
16824     F0 00 B1 FD | 	call	#__system___lockmem
16828     B7 01 00 FF 
1682c     20 15 06 F6 | 	mov	arg02, ##@LR__5937
16830     00 12 06 F6 | 	mov	arg01, #0
16834     00 16 06 F6 | 	mov	arg03, #0
16838     D4 0D B1 FD | 	call	#__system___basic_print_string
1683c     00 12 06 F6 | 	mov	arg01, #0
16840     78 5D B1 FD | 	call	#__system___getiolock_0603
16844     FD 00 68 FC | 	wrlong	#0, result1
16848     27 12 06 F6 | 	mov	arg01, #39
1684c     00 14 06 F6 | 	mov	arg02, #0
16850     D4 C6 B0 FD | 	call	#_printerror
16854     F0 00 90 FD | 	jmp	#LR__1834
16858                 | LR__1830
16858                 | ' if numpar=0 then 
16858     0C 4E 05 F1 | 	add	fp, #12
1685c     A7 FE 09 FB | 	rdlong	result3, fp wz
16860     0C 4E 85 F1 | 	sub	fp, #12
16864     30 00 90 5D |  if_ne	jmp	#LR__1831
16868     51 00 00 FF 
1686c     AC E5 05 F1 | 	add	objptr, ##41900
16870     F2 26 02 FB | 	rdlong	local01, objptr
16874     51 00 00 FF 
16878     AC E5 85 F1 | 	sub	objptr, ##41900
1687c     A7 26 62 FC | 	wrlong	local01, fp
16880     08 4E 05 F1 | 	add	fp, #8
16884     A7 38 68 FC | 	wrlong	#28, fp
16888     08 4E 85 F1 | 	sub	fp, #8
1688c     A7 12 02 F6 | 	mov	arg01, fp
16890     8C 6D BF FD | 	call	#_push
16894                 | '   t1.result.uresult=padh(0): t1.result_type=result_int : push t1 : return
16894     B0 00 90 FD | 	jmp	#LR__1834
16898                 | LR__1831
16898     EC 6C BF FD | 	call	#_pop
1689c     A7 FA 61 FC | 	wrlong	result1, fp
168a0     04 4E 05 F1 | 	add	fp, #4
168a4     A7 FC 61 FC | 	wrlong	result2, fp
168a8     04 4E 05 F1 | 	add	fp, #4
168ac     A7 FE 61 FC | 	wrlong	result3, fp
168b0                 | ' t1=pop()
168b0                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
168b0     08 4E 85 F1 | 	sub	fp, #8
168b4     1C FE 0D F2 | 	cmp	result3, #28 wz
168b8     08 4E 05 51 |  if_ne	add	fp, #8
168bc     A7 26 02 5B |  if_ne	rdlong	local01, fp
168c0     08 4E 85 51 |  if_ne	sub	fp, #8
168c4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
168c8     70 00 90 5D |  if_ne	jmp	#LR__1833
168cc     A7 26 02 FB | 	rdlong	local01, fp
168d0     52 00 00 FF 
168d4     08 E5 05 F1 | 	add	objptr, ##42248
168d8     F2 26 62 FC | 	wrlong	local01, objptr
168dc                 | '   q=t1.result.uresult
168dc                 | '   if q<7 then 
168dc     52 00 00 FF 
168e0     08 E5 85 F1 | 	sub	objptr, ##42248
168e4     07 26 56 F2 | 	cmps	local01, #7 wc
168e8     40 00 90 3D |  if_ae	jmp	#LR__1832
168ec     52 00 00 FF 
168f0     08 E5 05 F1 | 	add	objptr, ##42248
168f4     F2 26 02 FB | 	rdlong	local01, objptr
168f8     02 26 66 F0 | 	shl	local01, #2
168fc     5C E5 85 F1 | 	sub	objptr, #348
16900     F2 26 02 F1 | 	add	local01, objptr
16904     13 27 02 FB | 	rdlong	local01, local01
16908     A7 26 62 FC | 	wrlong	local01, fp
1690c     08 4E 05 F1 | 	add	fp, #8
16910     A7 38 68 FC | 	wrlong	#28, fp
16914     08 4E 85 F1 | 	sub	fp, #8
16918     A7 12 02 F6 | 	mov	arg01, fp
1691c     51 00 00 FF 
16920     AC E5 85 F1 | 	sub	objptr, ##41900
16924     F8 6C BF FD | 	call	#_push
16928                 | '     t1.result.uresult=padh(q): t1.result_type=result_int : push t1 : return 
16928     1C 00 90 FD | 	jmp	#LR__1834
1692c                 | LR__1832
1692c     29 12 06 F6 | 	mov	arg01, #41
16930     00 14 06 F6 | 	mov	arg02, #0
16934     F0 C5 B0 FD | 	call	#_printerror
16938                 | '      printerror(41) : return
16938     0C 00 90 FD | 	jmp	#LR__1834
1693c                 | LR__1833
1693c     29 12 06 F6 | 	mov	arg01, #41
16940     00 14 06 F6 | 	mov	arg02, #0
16944     E0 C5 B0 FD | 	call	#_printerror
16948                 | LR__1834
16948     A7 F0 03 F6 | 	mov	ptra, fp
1694c     B2 00 A0 FD | 	call	#popregs_
16950                 | _do_padh_ret
16950     2D 00 64 FD | 	ret
16954                 | 
16954                 | ' 
16954                 | ' ' ------------------ padrx
16954                 | ' 
16954                 | ' sub do_padrx
16954                 | _do_padrx
16954     02 4A 05 F6 | 	mov	COUNT_, #2
16958     A8 00 A0 FD | 	call	#pushregs_
1695c     14 F0 07 F1 | 	add	ptra, #20
16960     4A 00 00 FF 
16964     80 E4 05 F1 | 	add	objptr, ##38016
16968     F2 26 02 FB | 	rdlong	local01, objptr
1696c     13 17 02 F6 | 	mov	arg03, local01
16970     01 16 66 F0 | 	shl	arg03, #1
16974     13 17 02 F1 | 	add	arg03, local01
16978     02 16 66 F0 | 	shl	arg03, #2
1697c     03 00 00 FF 
16980     04 E4 85 F1 | 	sub	objptr, ##1540
16984     F2 16 02 F1 | 	add	arg03, objptr
16988     0B 17 02 FB | 	rdlong	arg03, arg03
1698c     0C 4E 05 F1 | 	add	fp, #12
16990     A7 16 62 FC | 	wrlong	arg03, fp
16994                 | ' 
16994                 | ' numpar=compiledline(lineptr_e).result.uresult
16994                 | ' if numpar>1 then print "padrx: "; : printerror(39) : return
16994     0C 4E 85 F1 | 	sub	fp, #12
16998     02 16 16 F2 | 	cmp	arg03, #2 wc
1699c     47 00 00 FF 
169a0     7C E4 85 F1 | 	sub	objptr, ##36476
169a4     40 00 90 CD |  if_b	jmp	#LR__1840
169a8     00 12 06 F6 | 	mov	arg01, #0
169ac     0C 5C B1 FD | 	call	#__system___getiolock_0603
169b0     FD 12 02 F6 | 	mov	arg01, result1
169b4     60 FF B0 FD | 	call	#__system___lockmem
169b8     B7 01 00 FF 
169bc     27 15 06 F6 | 	mov	arg02, ##@LR__5938
169c0     00 12 06 F6 | 	mov	arg01, #0
169c4     00 16 06 F6 | 	mov	arg03, #0
169c8     44 0C B1 FD | 	call	#__system___basic_print_string
169cc     00 12 06 F6 | 	mov	arg01, #0
169d0     E8 5B B1 FD | 	call	#__system___getiolock_0603
169d4     FD 00 68 FC | 	wrlong	#0, result1
169d8     27 12 06 F6 | 	mov	arg01, #39
169dc     00 14 06 F6 | 	mov	arg02, #0
169e0     44 C5 B0 FD | 	call	#_printerror
169e4     E0 01 90 FD | 	jmp	#LR__1844
169e8                 | LR__1840
169e8                 | ' if numpar=0 then 
169e8     0C 4E 05 F1 | 	add	fp, #12
169ec     A7 FE 09 FB | 	rdlong	result3, fp wz
169f0     0C 4E 85 F1 | 	sub	fp, #12
169f4     A8 00 90 5D |  if_ne	jmp	#LR__1841
169f8     00 C0 1B FF 
169fc     00 26 06 F6 | 	mov	local01, ##931135488
16a00     51 00 00 FF 
16a04     C8 E5 05 F1 | 	add	objptr, ##41928
16a08     F2 12 02 FB | 	rdlong	arg01, objptr
16a0c     51 00 00 FF 
16a10     C8 E5 85 F1 | 	sub	objptr, ##41928
16a14     09 13 52 F6 | 	abs	arg01, arg01 wc
16a18     1F 28 C6 C9 |  if_b	decod	local02, #31
16a1c     00 28 06 36 |  if_ae	mov	local02, #0
16a20     6C 29 B1 FD | 	call	#__system___float_fromuns
16a24     14 FB 61 F5 | 	xor	result1, local02
16a28     FD 12 02 F6 | 	mov	arg01, result1
16a2c     FF 7F 23 FF 
16a30     00 14 06 F6 | 	mov	arg02, ##1191181824
16a34     60 2F B1 FD | 	call	#__system___float_div
16a38     FD 14 02 F6 | 	mov	arg02, result1
16a3c     13 13 02 F6 | 	mov	arg01, local01
16a40     80 29 B1 FD | 	call	#__system___float_add
16a44     10 4E 05 F1 | 	add	fp, #16
16a48     A7 FA 61 FC | 	wrlong	result1, fp
16a4c                 | '   fpad=(1.0/65536.0)+padrx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16a4c     10 4E 85 F1 | 	sub	fp, #16
16a50     1F FA 05 F4 | 	bitl	result1, #31
16a54     FD 12 02 F6 | 	mov	arg01, result1
16a58     89 41 1D FF 
16a5c     6F 14 06 F6 | 	mov	arg02, ##981668463
16a60     01 16 06 F6 | 	mov	arg03, #1
16a64     60 31 B1 FD | 	call	#__system___float_cmp
16a68     00 FA 55 F2 | 	cmps	result1, #0 wc
16a6c     10 4E 05 C1 |  if_b	add	fp, #16
16a70     A7 00 68 CC |  if_b	wrlong	#0, fp
16a74     10 4E 85 C1 |  if_b	sub	fp, #16
16a78     10 4E 05 F1 | 	add	fp, #16
16a7c     A7 26 02 FB | 	rdlong	local01, fp
16a80     10 4E 85 F1 | 	sub	fp, #16
16a84     A7 26 62 FC | 	wrlong	local01, fp
16a88     08 4E 05 F1 | 	add	fp, #8
16a8c     A7 3C 68 FC | 	wrlong	#30, fp
16a90     08 4E 85 F1 | 	sub	fp, #8
16a94     A7 12 02 F6 | 	mov	arg01, fp
16a98     84 6B BF FD | 	call	#_push
16a9c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16a9c     28 01 90 FD | 	jmp	#LR__1844
16aa0                 | LR__1841
16aa0     E4 6A BF FD | 	call	#_pop
16aa4     A7 FA 61 FC | 	wrlong	result1, fp
16aa8     04 4E 05 F1 | 	add	fp, #4
16aac     A7 FC 61 FC | 	wrlong	result2, fp
16ab0     04 4E 05 F1 | 	add	fp, #4
16ab4     A7 FE 61 FC | 	wrlong	result3, fp
16ab8                 | ' t1=pop()
16ab8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16ab8     08 4E 85 F1 | 	sub	fp, #8
16abc     1C FE 0D F2 | 	cmp	result3, #28 wz
16ac0     08 4E 05 51 |  if_ne	add	fp, #8
16ac4     A7 26 02 5B |  if_ne	rdlong	local01, fp
16ac8     08 4E 85 51 |  if_ne	sub	fp, #8
16acc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16ad0     E8 00 90 5D |  if_ne	jmp	#LR__1843
16ad4     A7 26 02 FB | 	rdlong	local01, fp
16ad8     52 00 00 FF 
16adc     08 E5 05 F1 | 	add	objptr, ##42248
16ae0     F2 26 62 FC | 	wrlong	local01, objptr
16ae4                 | '   q=t1.result.uresult
16ae4                 | '   if q<7 then 
16ae4     52 00 00 FF 
16ae8     08 E5 85 F1 | 	sub	objptr, ##42248
16aec     07 26 56 F2 | 	cmps	local01, #7 wc
16af0     B8 00 90 3D |  if_ae	jmp	#LR__1842
16af4     00 C0 1B FF 
16af8     00 26 06 F6 | 	mov	local01, ##931135488
16afc     52 00 00 FF 
16b00     08 E5 05 F1 | 	add	objptr, ##42248
16b04     F2 16 02 FB | 	rdlong	arg03, objptr
16b08     02 16 66 F0 | 	shl	arg03, #2
16b0c     40 E5 85 F1 | 	sub	objptr, #320
16b10     F2 16 02 F1 | 	add	arg03, objptr
16b14     0B 13 02 FB | 	rdlong	arg01, arg03
16b18     51 00 00 FF 
16b1c     C8 E5 85 F1 | 	sub	objptr, ##41928
16b20     09 13 52 F6 | 	abs	arg01, arg01 wc
16b24     1F 28 C6 C9 |  if_b	decod	local02, #31
16b28     00 28 06 36 |  if_ae	mov	local02, #0
16b2c     60 28 B1 FD | 	call	#__system___float_fromuns
16b30     14 FB 61 F5 | 	xor	result1, local02
16b34     FD 12 02 F6 | 	mov	arg01, result1
16b38     FF 7F 23 FF 
16b3c     00 14 06 F6 | 	mov	arg02, ##1191181824
16b40     54 2E B1 FD | 	call	#__system___float_div
16b44     FD 14 02 F6 | 	mov	arg02, result1
16b48     13 13 02 F6 | 	mov	arg01, local01
16b4c     74 28 B1 FD | 	call	#__system___float_add
16b50     10 4E 05 F1 | 	add	fp, #16
16b54     A7 FA 61 FC | 	wrlong	result1, fp
16b58                 | '     fpad=(1.0/65536.0)+padrx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16b58     10 4E 85 F1 | 	sub	fp, #16
16b5c     1F FA 05 F4 | 	bitl	result1, #31
16b60     FD 12 02 F6 | 	mov	arg01, result1
16b64     89 41 1D FF 
16b68     6F 14 06 F6 | 	mov	arg02, ##981668463
16b6c     01 16 06 F6 | 	mov	arg03, #1
16b70     54 30 B1 FD | 	call	#__system___float_cmp
16b74     00 FA 55 F2 | 	cmps	result1, #0 wc
16b78     10 4E 05 C1 |  if_b	add	fp, #16
16b7c     A7 00 68 CC |  if_b	wrlong	#0, fp
16b80     10 4E 85 C1 |  if_b	sub	fp, #16
16b84     10 4E 05 F1 | 	add	fp, #16
16b88     A7 26 02 FB | 	rdlong	local01, fp
16b8c     10 4E 85 F1 | 	sub	fp, #16
16b90     A7 26 62 FC | 	wrlong	local01, fp
16b94     08 4E 05 F1 | 	add	fp, #8
16b98     A7 3C 68 FC | 	wrlong	#30, fp
16b9c     08 4E 85 F1 | 	sub	fp, #8
16ba0     A7 12 02 F6 | 	mov	arg01, fp
16ba4     78 6A BF FD | 	call	#_push
16ba8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16ba8     1C 00 90 FD | 	jmp	#LR__1844
16bac                 | LR__1842
16bac     29 12 06 F6 | 	mov	arg01, #41
16bb0     00 14 06 F6 | 	mov	arg02, #0
16bb4     70 C3 B0 FD | 	call	#_printerror
16bb8                 | '      printerror(41) : return
16bb8     0C 00 90 FD | 	jmp	#LR__1844
16bbc                 | LR__1843
16bbc     29 12 06 F6 | 	mov	arg01, #41
16bc0     00 14 06 F6 | 	mov	arg02, #0
16bc4     60 C3 B0 FD | 	call	#_printerror
16bc8                 | LR__1844
16bc8     A7 F0 03 F6 | 	mov	ptra, fp
16bcc     B2 00 A0 FD | 	call	#popregs_
16bd0                 | _do_padrx_ret
16bd0     2D 00 64 FD | 	ret
16bd4                 | 
16bd4                 | ' 
16bd4                 | ' ' ------------------ padry
16bd4                 | ' 
16bd4                 | ' sub do_padry
16bd4                 | _do_padry
16bd4     02 4A 05 F6 | 	mov	COUNT_, #2
16bd8     A8 00 A0 FD | 	call	#pushregs_
16bdc     14 F0 07 F1 | 	add	ptra, #20
16be0     4A 00 00 FF 
16be4     80 E4 05 F1 | 	add	objptr, ##38016
16be8     F2 26 02 FB | 	rdlong	local01, objptr
16bec     13 17 02 F6 | 	mov	arg03, local01
16bf0     01 16 66 F0 | 	shl	arg03, #1
16bf4     13 17 02 F1 | 	add	arg03, local01
16bf8     02 16 66 F0 | 	shl	arg03, #2
16bfc     03 00 00 FF 
16c00     04 E4 85 F1 | 	sub	objptr, ##1540
16c04     F2 16 02 F1 | 	add	arg03, objptr
16c08     0B 17 02 FB | 	rdlong	arg03, arg03
16c0c     0C 4E 05 F1 | 	add	fp, #12
16c10     A7 16 62 FC | 	wrlong	arg03, fp
16c14                 | ' 
16c14                 | ' numpar=compiledline(lineptr_e).result.uresult
16c14                 | ' if numpar>1 then print "padry: "; : printerror(39) : return
16c14     0C 4E 85 F1 | 	sub	fp, #12
16c18     02 16 16 F2 | 	cmp	arg03, #2 wc
16c1c     47 00 00 FF 
16c20     7C E4 85 F1 | 	sub	objptr, ##36476
16c24     40 00 90 CD |  if_b	jmp	#LR__1850
16c28     00 12 06 F6 | 	mov	arg01, #0
16c2c     8C 59 B1 FD | 	call	#__system___getiolock_0603
16c30     FD 12 02 F6 | 	mov	arg01, result1
16c34     E0 FC B0 FD | 	call	#__system___lockmem
16c38     B7 01 00 FF 
16c3c     2F 15 06 F6 | 	mov	arg02, ##@LR__5939
16c40     00 12 06 F6 | 	mov	arg01, #0
16c44     00 16 06 F6 | 	mov	arg03, #0
16c48     C4 09 B1 FD | 	call	#__system___basic_print_string
16c4c     00 12 06 F6 | 	mov	arg01, #0
16c50     68 59 B1 FD | 	call	#__system___getiolock_0603
16c54     FD 00 68 FC | 	wrlong	#0, result1
16c58     27 12 06 F6 | 	mov	arg01, #39
16c5c     00 14 06 F6 | 	mov	arg02, #0
16c60     C4 C2 B0 FD | 	call	#_printerror
16c64     E0 01 90 FD | 	jmp	#LR__1854
16c68                 | LR__1850
16c68                 | ' if numpar=0 then 
16c68     0C 4E 05 F1 | 	add	fp, #12
16c6c     A7 FE 09 FB | 	rdlong	result3, fp wz
16c70     0C 4E 85 F1 | 	sub	fp, #12
16c74     A8 00 90 5D |  if_ne	jmp	#LR__1851
16c78     00 C0 1B FF 
16c7c     00 26 06 F6 | 	mov	local01, ##931135488
16c80     51 00 00 FF 
16c84     E4 E5 05 F1 | 	add	objptr, ##41956
16c88     F2 12 02 FB | 	rdlong	arg01, objptr
16c8c     51 00 00 FF 
16c90     E4 E5 85 F1 | 	sub	objptr, ##41956
16c94     09 13 52 F6 | 	abs	arg01, arg01 wc
16c98     1F 28 C6 C9 |  if_b	decod	local02, #31
16c9c     00 28 06 36 |  if_ae	mov	local02, #0
16ca0     EC 26 B1 FD | 	call	#__system___float_fromuns
16ca4     14 FB 61 F5 | 	xor	result1, local02
16ca8     FD 12 02 F6 | 	mov	arg01, result1
16cac     FF 7F 23 FF 
16cb0     00 14 06 F6 | 	mov	arg02, ##1191181824
16cb4     E0 2C B1 FD | 	call	#__system___float_div
16cb8     FD 14 02 F6 | 	mov	arg02, result1
16cbc     13 13 02 F6 | 	mov	arg01, local01
16cc0     00 27 B1 FD | 	call	#__system___float_add
16cc4     10 4E 05 F1 | 	add	fp, #16
16cc8     A7 FA 61 FC | 	wrlong	result1, fp
16ccc                 | '   fpad=(1.0/65536.0)+padry(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16ccc     10 4E 85 F1 | 	sub	fp, #16
16cd0     1F FA 05 F4 | 	bitl	result1, #31
16cd4     FD 12 02 F6 | 	mov	arg01, result1
16cd8     89 41 1D FF 
16cdc     6F 14 06 F6 | 	mov	arg02, ##981668463
16ce0     01 16 06 F6 | 	mov	arg03, #1
16ce4     E0 2E B1 FD | 	call	#__system___float_cmp
16ce8     00 FA 55 F2 | 	cmps	result1, #0 wc
16cec     10 4E 05 C1 |  if_b	add	fp, #16
16cf0     A7 00 68 CC |  if_b	wrlong	#0, fp
16cf4     10 4E 85 C1 |  if_b	sub	fp, #16
16cf8     10 4E 05 F1 | 	add	fp, #16
16cfc     A7 26 02 FB | 	rdlong	local01, fp
16d00     10 4E 85 F1 | 	sub	fp, #16
16d04     A7 26 62 FC | 	wrlong	local01, fp
16d08     08 4E 05 F1 | 	add	fp, #8
16d0c     A7 3C 68 FC | 	wrlong	#30, fp
16d10     08 4E 85 F1 | 	sub	fp, #8
16d14     A7 12 02 F6 | 	mov	arg01, fp
16d18     04 69 BF FD | 	call	#_push
16d1c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16d1c     28 01 90 FD | 	jmp	#LR__1854
16d20                 | LR__1851
16d20     64 68 BF FD | 	call	#_pop
16d24     A7 FA 61 FC | 	wrlong	result1, fp
16d28     04 4E 05 F1 | 	add	fp, #4
16d2c     A7 FC 61 FC | 	wrlong	result2, fp
16d30     04 4E 05 F1 | 	add	fp, #4
16d34     A7 FE 61 FC | 	wrlong	result3, fp
16d38                 | ' t1=pop()
16d38                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16d38     08 4E 85 F1 | 	sub	fp, #8
16d3c     1C FE 0D F2 | 	cmp	result3, #28 wz
16d40     08 4E 05 51 |  if_ne	add	fp, #8
16d44     A7 26 02 5B |  if_ne	rdlong	local01, fp
16d48     08 4E 85 51 |  if_ne	sub	fp, #8
16d4c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16d50     E8 00 90 5D |  if_ne	jmp	#LR__1853
16d54     A7 26 02 FB | 	rdlong	local01, fp
16d58     52 00 00 FF 
16d5c     08 E5 05 F1 | 	add	objptr, ##42248
16d60     F2 26 62 FC | 	wrlong	local01, objptr
16d64                 | '   q=t1.result.uresult
16d64                 | '   if q<7 then 
16d64     52 00 00 FF 
16d68     08 E5 85 F1 | 	sub	objptr, ##42248
16d6c     07 26 56 F2 | 	cmps	local01, #7 wc
16d70     B8 00 90 3D |  if_ae	jmp	#LR__1852
16d74     00 C0 1B FF 
16d78     00 26 06 F6 | 	mov	local01, ##931135488
16d7c     52 00 00 FF 
16d80     08 E5 05 F1 | 	add	objptr, ##42248
16d84     F2 16 02 FB | 	rdlong	arg03, objptr
16d88     02 16 66 F0 | 	shl	arg03, #2
16d8c     24 E5 85 F1 | 	sub	objptr, #292
16d90     F2 16 02 F1 | 	add	arg03, objptr
16d94     0B 13 02 FB | 	rdlong	arg01, arg03
16d98     51 00 00 FF 
16d9c     E4 E5 85 F1 | 	sub	objptr, ##41956
16da0     09 13 52 F6 | 	abs	arg01, arg01 wc
16da4     1F 28 C6 C9 |  if_b	decod	local02, #31
16da8     00 28 06 36 |  if_ae	mov	local02, #0
16dac     E0 25 B1 FD | 	call	#__system___float_fromuns
16db0     14 FB 61 F5 | 	xor	result1, local02
16db4     FD 12 02 F6 | 	mov	arg01, result1
16db8     FF 7F 23 FF 
16dbc     00 14 06 F6 | 	mov	arg02, ##1191181824
16dc0     D4 2B B1 FD | 	call	#__system___float_div
16dc4     FD 14 02 F6 | 	mov	arg02, result1
16dc8     13 13 02 F6 | 	mov	arg01, local01
16dcc     F4 25 B1 FD | 	call	#__system___float_add
16dd0     10 4E 05 F1 | 	add	fp, #16
16dd4     A7 FA 61 FC | 	wrlong	result1, fp
16dd8                 | '     fpad=(1.0/65536.0)+padry(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16dd8     10 4E 85 F1 | 	sub	fp, #16
16ddc     1F FA 05 F4 | 	bitl	result1, #31
16de0     FD 12 02 F6 | 	mov	arg01, result1
16de4     89 41 1D FF 
16de8     6F 14 06 F6 | 	mov	arg02, ##981668463
16dec     01 16 06 F6 | 	mov	arg03, #1
16df0     D4 2D B1 FD | 	call	#__system___float_cmp
16df4     00 FA 55 F2 | 	cmps	result1, #0 wc
16df8     10 4E 05 C1 |  if_b	add	fp, #16
16dfc     A7 00 68 CC |  if_b	wrlong	#0, fp
16e00     10 4E 85 C1 |  if_b	sub	fp, #16
16e04     10 4E 05 F1 | 	add	fp, #16
16e08     A7 26 02 FB | 	rdlong	local01, fp
16e0c     10 4E 85 F1 | 	sub	fp, #16
16e10     A7 26 62 FC | 	wrlong	local01, fp
16e14     08 4E 05 F1 | 	add	fp, #8
16e18     A7 3C 68 FC | 	wrlong	#30, fp
16e1c     08 4E 85 F1 | 	sub	fp, #8
16e20     A7 12 02 F6 | 	mov	arg01, fp
16e24     F8 67 BF FD | 	call	#_push
16e28                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
16e28     1C 00 90 FD | 	jmp	#LR__1854
16e2c                 | LR__1852
16e2c     29 12 06 F6 | 	mov	arg01, #41
16e30     00 14 06 F6 | 	mov	arg02, #0
16e34     F0 C0 B0 FD | 	call	#_printerror
16e38                 | '      printerror(41) : return
16e38     0C 00 90 FD | 	jmp	#LR__1854
16e3c                 | LR__1853
16e3c     29 12 06 F6 | 	mov	arg01, #41
16e40     00 14 06 F6 | 	mov	arg02, #0
16e44     E0 C0 B0 FD | 	call	#_printerror
16e48                 | LR__1854
16e48     A7 F0 03 F6 | 	mov	ptra, fp
16e4c     B2 00 A0 FD | 	call	#popregs_
16e50                 | _do_padry_ret
16e50     2D 00 64 FD | 	ret
16e54                 | 
16e54                 | ' 
16e54                 | ' ' ------------------ padrz
16e54                 | ' 
16e54                 | ' sub do_padrz
16e54                 | _do_padrz
16e54     02 4A 05 F6 | 	mov	COUNT_, #2
16e58     A8 00 A0 FD | 	call	#pushregs_
16e5c     14 F0 07 F1 | 	add	ptra, #20
16e60     4A 00 00 FF 
16e64     80 E4 05 F1 | 	add	objptr, ##38016
16e68     F2 26 02 FB | 	rdlong	local01, objptr
16e6c     13 17 02 F6 | 	mov	arg03, local01
16e70     01 16 66 F0 | 	shl	arg03, #1
16e74     13 17 02 F1 | 	add	arg03, local01
16e78     02 16 66 F0 | 	shl	arg03, #2
16e7c     03 00 00 FF 
16e80     04 E4 85 F1 | 	sub	objptr, ##1540
16e84     F2 16 02 F1 | 	add	arg03, objptr
16e88     0B 17 02 FB | 	rdlong	arg03, arg03
16e8c     0C 4E 05 F1 | 	add	fp, #12
16e90     A7 16 62 FC | 	wrlong	arg03, fp
16e94                 | ' 
16e94                 | ' numpar=compiledline(lineptr_e).result.uresult
16e94                 | ' if numpar>1 then print "padrz: "; : printerror(39) : return
16e94     0C 4E 85 F1 | 	sub	fp, #12
16e98     02 16 16 F2 | 	cmp	arg03, #2 wc
16e9c     47 00 00 FF 
16ea0     7C E4 85 F1 | 	sub	objptr, ##36476
16ea4     40 00 90 CD |  if_b	jmp	#LR__1860
16ea8     00 12 06 F6 | 	mov	arg01, #0
16eac     0C 57 B1 FD | 	call	#__system___getiolock_0603
16eb0     FD 12 02 F6 | 	mov	arg01, result1
16eb4     60 FA B0 FD | 	call	#__system___lockmem
16eb8     B7 01 00 FF 
16ebc     37 15 06 F6 | 	mov	arg02, ##@LR__5940
16ec0     00 12 06 F6 | 	mov	arg01, #0
16ec4     00 16 06 F6 | 	mov	arg03, #0
16ec8     44 07 B1 FD | 	call	#__system___basic_print_string
16ecc     00 12 06 F6 | 	mov	arg01, #0
16ed0     E8 56 B1 FD | 	call	#__system___getiolock_0603
16ed4     FD 00 68 FC | 	wrlong	#0, result1
16ed8     27 12 06 F6 | 	mov	arg01, #39
16edc     00 14 06 F6 | 	mov	arg02, #0
16ee0     44 C0 B0 FD | 	call	#_printerror
16ee4     E0 01 90 FD | 	jmp	#LR__1864
16ee8                 | LR__1860
16ee8                 | ' if numpar=0 then 
16ee8     0C 4E 05 F1 | 	add	fp, #12
16eec     A7 FE 09 FB | 	rdlong	result3, fp wz
16ef0     0C 4E 85 F1 | 	sub	fp, #12
16ef4     A8 00 90 5D |  if_ne	jmp	#LR__1861
16ef8     00 C0 1B FF 
16efc     00 26 06 F6 | 	mov	local01, ##931135488
16f00     52 00 00 FF 
16f04     00 E4 05 F1 | 	add	objptr, ##41984
16f08     F2 12 02 FB | 	rdlong	arg01, objptr
16f0c     52 00 00 FF 
16f10     00 E4 85 F1 | 	sub	objptr, ##41984
16f14     09 13 52 F6 | 	abs	arg01, arg01 wc
16f18     1F 28 C6 C9 |  if_b	decod	local02, #31
16f1c     00 28 06 36 |  if_ae	mov	local02, #0
16f20     6C 24 B1 FD | 	call	#__system___float_fromuns
16f24     14 FB 61 F5 | 	xor	result1, local02
16f28     FD 12 02 F6 | 	mov	arg01, result1
16f2c     FF 7F 23 FF 
16f30     00 14 06 F6 | 	mov	arg02, ##1191181824
16f34     60 2A B1 FD | 	call	#__system___float_div
16f38     FD 14 02 F6 | 	mov	arg02, result1
16f3c     13 13 02 F6 | 	mov	arg01, local01
16f40     80 24 B1 FD | 	call	#__system___float_add
16f44     10 4E 05 F1 | 	add	fp, #16
16f48     A7 FA 61 FC | 	wrlong	result1, fp
16f4c                 | '   fpad=(1.0/65536.0)+padrz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
16f4c     10 4E 85 F1 | 	sub	fp, #16
16f50     1F FA 05 F4 | 	bitl	result1, #31
16f54     FD 12 02 F6 | 	mov	arg01, result1
16f58     89 41 1D FF 
16f5c     6F 14 06 F6 | 	mov	arg02, ##981668463
16f60     01 16 06 F6 | 	mov	arg03, #1
16f64     60 2C B1 FD | 	call	#__system___float_cmp
16f68     00 FA 55 F2 | 	cmps	result1, #0 wc
16f6c     10 4E 05 C1 |  if_b	add	fp, #16
16f70     A7 00 68 CC |  if_b	wrlong	#0, fp
16f74     10 4E 85 C1 |  if_b	sub	fp, #16
16f78     10 4E 05 F1 | 	add	fp, #16
16f7c     A7 26 02 FB | 	rdlong	local01, fp
16f80     10 4E 85 F1 | 	sub	fp, #16
16f84     A7 26 62 FC | 	wrlong	local01, fp
16f88     08 4E 05 F1 | 	add	fp, #8
16f8c     A7 3C 68 FC | 	wrlong	#30, fp
16f90     08 4E 85 F1 | 	sub	fp, #8
16f94     A7 12 02 F6 | 	mov	arg01, fp
16f98     84 66 BF FD | 	call	#_push
16f9c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
16f9c     28 01 90 FD | 	jmp	#LR__1864
16fa0                 | LR__1861
16fa0     E4 65 BF FD | 	call	#_pop
16fa4     A7 FA 61 FC | 	wrlong	result1, fp
16fa8     04 4E 05 F1 | 	add	fp, #4
16fac     A7 FC 61 FC | 	wrlong	result2, fp
16fb0     04 4E 05 F1 | 	add	fp, #4
16fb4     A7 FE 61 FC | 	wrlong	result3, fp
16fb8                 | ' t1=pop()
16fb8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16fb8     08 4E 85 F1 | 	sub	fp, #8
16fbc     1C FE 0D F2 | 	cmp	result3, #28 wz
16fc0     08 4E 05 51 |  if_ne	add	fp, #8
16fc4     A7 26 02 5B |  if_ne	rdlong	local01, fp
16fc8     08 4E 85 51 |  if_ne	sub	fp, #8
16fcc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16fd0     E8 00 90 5D |  if_ne	jmp	#LR__1863
16fd4     A7 26 02 FB | 	rdlong	local01, fp
16fd8     52 00 00 FF 
16fdc     08 E5 05 F1 | 	add	objptr, ##42248
16fe0     F2 26 62 FC | 	wrlong	local01, objptr
16fe4                 | '   q=t1.result.uresult
16fe4                 | '   if q<7 then 
16fe4     52 00 00 FF 
16fe8     08 E5 85 F1 | 	sub	objptr, ##42248
16fec     07 26 56 F2 | 	cmps	local01, #7 wc
16ff0     B8 00 90 3D |  if_ae	jmp	#LR__1862
16ff4     00 C0 1B FF 
16ff8     00 26 06 F6 | 	mov	local01, ##931135488
16ffc     52 00 00 FF 
17000     08 E5 05 F1 | 	add	objptr, ##42248
17004     F2 16 02 FB | 	rdlong	arg03, objptr
17008     02 16 66 F0 | 	shl	arg03, #2
1700c     08 E5 85 F1 | 	sub	objptr, #264
17010     F2 16 02 F1 | 	add	arg03, objptr
17014     0B 13 02 FB | 	rdlong	arg01, arg03
17018     52 00 00 FF 
1701c     00 E4 85 F1 | 	sub	objptr, ##41984
17020     09 13 52 F6 | 	abs	arg01, arg01 wc
17024     1F 28 C6 C9 |  if_b	decod	local02, #31
17028     00 28 06 36 |  if_ae	mov	local02, #0
1702c     60 23 B1 FD | 	call	#__system___float_fromuns
17030     14 FB 61 F5 | 	xor	result1, local02
17034     FD 12 02 F6 | 	mov	arg01, result1
17038     FF 7F 23 FF 
1703c     00 14 06 F6 | 	mov	arg02, ##1191181824
17040     54 29 B1 FD | 	call	#__system___float_div
17044     FD 14 02 F6 | 	mov	arg02, result1
17048     13 13 02 F6 | 	mov	arg01, local01
1704c     74 23 B1 FD | 	call	#__system___float_add
17050     10 4E 05 F1 | 	add	fp, #16
17054     A7 FA 61 FC | 	wrlong	result1, fp
17058                 | '     fpad=(1.0/65536.0)+padrz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17058     10 4E 85 F1 | 	sub	fp, #16
1705c     1F FA 05 F4 | 	bitl	result1, #31
17060     FD 12 02 F6 | 	mov	arg01, result1
17064     89 41 1D FF 
17068     6F 14 06 F6 | 	mov	arg02, ##981668463
1706c     01 16 06 F6 | 	mov	arg03, #1
17070     54 2B B1 FD | 	call	#__system___float_cmp
17074     00 FA 55 F2 | 	cmps	result1, #0 wc
17078     10 4E 05 C1 |  if_b	add	fp, #16
1707c     A7 00 68 CC |  if_b	wrlong	#0, fp
17080     10 4E 85 C1 |  if_b	sub	fp, #16
17084     10 4E 05 F1 | 	add	fp, #16
17088     A7 26 02 FB | 	rdlong	local01, fp
1708c     10 4E 85 F1 | 	sub	fp, #16
17090     A7 26 62 FC | 	wrlong	local01, fp
17094     08 4E 05 F1 | 	add	fp, #8
17098     A7 3C 68 FC | 	wrlong	#30, fp
1709c     08 4E 85 F1 | 	sub	fp, #8
170a0     A7 12 02 F6 | 	mov	arg01, fp
170a4     78 65 BF FD | 	call	#_push
170a8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
170a8     1C 00 90 FD | 	jmp	#LR__1864
170ac                 | LR__1862
170ac     29 12 06 F6 | 	mov	arg01, #41
170b0     00 14 06 F6 | 	mov	arg02, #0
170b4     70 BE B0 FD | 	call	#_printerror
170b8                 | '      printerror(41) : return
170b8     0C 00 90 FD | 	jmp	#LR__1864
170bc                 | LR__1863
170bc     29 12 06 F6 | 	mov	arg01, #41
170c0     00 14 06 F6 | 	mov	arg02, #0
170c4     60 BE B0 FD | 	call	#_printerror
170c8                 | LR__1864
170c8     A7 F0 03 F6 | 	mov	ptra, fp
170cc     B2 00 A0 FD | 	call	#popregs_
170d0                 | _do_padrz_ret
170d0     2D 00 64 FD | 	ret
170d4                 | 
170d4                 | ' ' ------------------ padx
170d4                 | ' 
170d4                 | ' sub do_padx
170d4                 | _do_padx
170d4     02 4A 05 F6 | 	mov	COUNT_, #2
170d8     A8 00 A0 FD | 	call	#pushregs_
170dc     14 F0 07 F1 | 	add	ptra, #20
170e0     4A 00 00 FF 
170e4     80 E4 05 F1 | 	add	objptr, ##38016
170e8     F2 26 02 FB | 	rdlong	local01, objptr
170ec     13 17 02 F6 | 	mov	arg03, local01
170f0     01 16 66 F0 | 	shl	arg03, #1
170f4     13 17 02 F1 | 	add	arg03, local01
170f8     02 16 66 F0 | 	shl	arg03, #2
170fc     03 00 00 FF 
17100     04 E4 85 F1 | 	sub	objptr, ##1540
17104     F2 16 02 F1 | 	add	arg03, objptr
17108     0B 17 02 FB | 	rdlong	arg03, arg03
1710c     0C 4E 05 F1 | 	add	fp, #12
17110     A7 16 62 FC | 	wrlong	arg03, fp
17114                 | ' 
17114                 | ' numpar=compiledline(lineptr_e).result.uresult
17114                 | ' if numpar>1 then print "padx: "; : printerror(39) : return
17114     0C 4E 85 F1 | 	sub	fp, #12
17118     02 16 16 F2 | 	cmp	arg03, #2 wc
1711c     47 00 00 FF 
17120     7C E4 85 F1 | 	sub	objptr, ##36476
17124     40 00 90 CD |  if_b	jmp	#LR__1870
17128     00 12 06 F6 | 	mov	arg01, #0
1712c     8C 54 B1 FD | 	call	#__system___getiolock_0603
17130     FD 12 02 F6 | 	mov	arg01, result1
17134     E0 F7 B0 FD | 	call	#__system___lockmem
17138     B7 01 00 FF 
1713c     3F 15 06 F6 | 	mov	arg02, ##@LR__5941
17140     00 12 06 F6 | 	mov	arg01, #0
17144     00 16 06 F6 | 	mov	arg03, #0
17148     C4 04 B1 FD | 	call	#__system___basic_print_string
1714c     00 12 06 F6 | 	mov	arg01, #0
17150     68 54 B1 FD | 	call	#__system___getiolock_0603
17154     FD 00 68 FC | 	wrlong	#0, result1
17158     27 12 06 F6 | 	mov	arg01, #39
1715c     00 14 06 F6 | 	mov	arg02, #0
17160     C4 BD B0 FD | 	call	#_printerror
17164     E0 01 90 FD | 	jmp	#LR__1874
17168                 | LR__1870
17168                 | ' if numpar=0 then 
17168     0C 4E 05 F1 | 	add	fp, #12
1716c     A7 FE 09 FB | 	rdlong	result3, fp wz
17170     0C 4E 85 F1 | 	sub	fp, #12
17174     A8 00 90 5D |  if_ne	jmp	#LR__1871
17178     00 C0 1B FF 
1717c     00 26 06 F6 | 	mov	local01, ##931135488
17180     51 00 00 FF 
17184     58 E5 05 F1 | 	add	objptr, ##41816
17188     F2 12 02 FB | 	rdlong	arg01, objptr
1718c     51 00 00 FF 
17190     58 E5 85 F1 | 	sub	objptr, ##41816
17194     09 13 52 F6 | 	abs	arg01, arg01 wc
17198     1F 28 C6 C9 |  if_b	decod	local02, #31
1719c     00 28 06 36 |  if_ae	mov	local02, #0
171a0     EC 21 B1 FD | 	call	#__system___float_fromuns
171a4     14 FB 61 F5 | 	xor	result1, local02
171a8     FD 12 02 F6 | 	mov	arg01, result1
171ac     FF 7F 23 FF 
171b0     00 14 06 F6 | 	mov	arg02, ##1191181824
171b4     E0 27 B1 FD | 	call	#__system___float_div
171b8     FD 14 02 F6 | 	mov	arg02, result1
171bc     13 13 02 F6 | 	mov	arg01, local01
171c0     00 22 B1 FD | 	call	#__system___float_add
171c4     10 4E 05 F1 | 	add	fp, #16
171c8     A7 FA 61 FC | 	wrlong	result1, fp
171cc                 | '   fpad=(1.0/65536.0)+padx(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
171cc     10 4E 85 F1 | 	sub	fp, #16
171d0     1F FA 05 F4 | 	bitl	result1, #31
171d4     FD 12 02 F6 | 	mov	arg01, result1
171d8     89 41 1D FF 
171dc     6F 14 06 F6 | 	mov	arg02, ##981668463
171e0     01 16 06 F6 | 	mov	arg03, #1
171e4     E0 29 B1 FD | 	call	#__system___float_cmp
171e8     00 FA 55 F2 | 	cmps	result1, #0 wc
171ec     10 4E 05 C1 |  if_b	add	fp, #16
171f0     A7 00 68 CC |  if_b	wrlong	#0, fp
171f4     10 4E 85 C1 |  if_b	sub	fp, #16
171f8     10 4E 05 F1 | 	add	fp, #16
171fc     A7 26 02 FB | 	rdlong	local01, fp
17200     10 4E 85 F1 | 	sub	fp, #16
17204     A7 26 62 FC | 	wrlong	local01, fp
17208     08 4E 05 F1 | 	add	fp, #8
1720c     A7 3C 68 FC | 	wrlong	#30, fp
17210     08 4E 85 F1 | 	sub	fp, #8
17214     A7 12 02 F6 | 	mov	arg01, fp
17218     04 64 BF FD | 	call	#_push
1721c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1721c     28 01 90 FD | 	jmp	#LR__1874
17220                 | LR__1871
17220     64 63 BF FD | 	call	#_pop
17224     A7 FA 61 FC | 	wrlong	result1, fp
17228     04 4E 05 F1 | 	add	fp, #4
1722c     A7 FC 61 FC | 	wrlong	result2, fp
17230     04 4E 05 F1 | 	add	fp, #4
17234     A7 FE 61 FC | 	wrlong	result3, fp
17238                 | ' t1=pop()
17238                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17238     08 4E 85 F1 | 	sub	fp, #8
1723c     1C FE 0D F2 | 	cmp	result3, #28 wz
17240     08 4E 05 51 |  if_ne	add	fp, #8
17244     A7 26 02 5B |  if_ne	rdlong	local01, fp
17248     08 4E 85 51 |  if_ne	sub	fp, #8
1724c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17250     E8 00 90 5D |  if_ne	jmp	#LR__1873
17254     A7 26 02 FB | 	rdlong	local01, fp
17258     52 00 00 FF 
1725c     08 E5 05 F1 | 	add	objptr, ##42248
17260     F2 26 62 FC | 	wrlong	local01, objptr
17264                 | '   q=t1.result.uresult
17264                 | '   if q<7 then 
17264     52 00 00 FF 
17268     08 E5 85 F1 | 	sub	objptr, ##42248
1726c     07 26 56 F2 | 	cmps	local01, #7 wc
17270     B8 00 90 3D |  if_ae	jmp	#LR__1872
17274     00 C0 1B FF 
17278     00 26 06 F6 | 	mov	local01, ##931135488
1727c     52 00 00 FF 
17280     08 E5 05 F1 | 	add	objptr, ##42248
17284     F2 16 02 FB | 	rdlong	arg03, objptr
17288     02 16 66 F0 | 	shl	arg03, #2
1728c     B0 E5 85 F1 | 	sub	objptr, #432
17290     F2 16 02 F1 | 	add	arg03, objptr
17294     0B 13 02 FB | 	rdlong	arg01, arg03
17298     51 00 00 FF 
1729c     58 E5 85 F1 | 	sub	objptr, ##41816
172a0     09 13 52 F6 | 	abs	arg01, arg01 wc
172a4     1F 28 C6 C9 |  if_b	decod	local02, #31
172a8     00 28 06 36 |  if_ae	mov	local02, #0
172ac     E0 20 B1 FD | 	call	#__system___float_fromuns
172b0     14 FB 61 F5 | 	xor	result1, local02
172b4     FD 12 02 F6 | 	mov	arg01, result1
172b8     FF 7F 23 FF 
172bc     00 14 06 F6 | 	mov	arg02, ##1191181824
172c0     D4 26 B1 FD | 	call	#__system___float_div
172c4     FD 14 02 F6 | 	mov	arg02, result1
172c8     13 13 02 F6 | 	mov	arg01, local01
172cc     F4 20 B1 FD | 	call	#__system___float_add
172d0     10 4E 05 F1 | 	add	fp, #16
172d4     A7 FA 61 FC | 	wrlong	result1, fp
172d8                 | '     fpad=(1.0/65536.0)+padx(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
172d8     10 4E 85 F1 | 	sub	fp, #16
172dc     1F FA 05 F4 | 	bitl	result1, #31
172e0     FD 12 02 F6 | 	mov	arg01, result1
172e4     89 41 1D FF 
172e8     6F 14 06 F6 | 	mov	arg02, ##981668463
172ec     01 16 06 F6 | 	mov	arg03, #1
172f0     D4 28 B1 FD | 	call	#__system___float_cmp
172f4     00 FA 55 F2 | 	cmps	result1, #0 wc
172f8     10 4E 05 C1 |  if_b	add	fp, #16
172fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17300     10 4E 85 C1 |  if_b	sub	fp, #16
17304     10 4E 05 F1 | 	add	fp, #16
17308     A7 26 02 FB | 	rdlong	local01, fp
1730c     10 4E 85 F1 | 	sub	fp, #16
17310     A7 26 62 FC | 	wrlong	local01, fp
17314     08 4E 05 F1 | 	add	fp, #8
17318     A7 3C 68 FC | 	wrlong	#30, fp
1731c     08 4E 85 F1 | 	sub	fp, #8
17320     A7 12 02 F6 | 	mov	arg01, fp
17324     F8 62 BF FD | 	call	#_push
17328                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17328     1C 00 90 FD | 	jmp	#LR__1874
1732c                 | LR__1872
1732c     29 12 06 F6 | 	mov	arg01, #41
17330     00 14 06 F6 | 	mov	arg02, #0
17334     F0 BB B0 FD | 	call	#_printerror
17338                 | '      printerror(41) : return
17338     0C 00 90 FD | 	jmp	#LR__1874
1733c                 | LR__1873
1733c     29 12 06 F6 | 	mov	arg01, #41
17340     00 14 06 F6 | 	mov	arg02, #0
17344     E0 BB B0 FD | 	call	#_printerror
17348                 | LR__1874
17348     A7 F0 03 F6 | 	mov	ptra, fp
1734c     B2 00 A0 FD | 	call	#popregs_
17350                 | _do_padx_ret
17350     2D 00 64 FD | 	ret
17354                 | 
17354                 | ' 
17354                 | ' ' ------------------ pady
17354                 | ' 
17354                 | ' sub do_pady
17354                 | _do_pady
17354     02 4A 05 F6 | 	mov	COUNT_, #2
17358     A8 00 A0 FD | 	call	#pushregs_
1735c     14 F0 07 F1 | 	add	ptra, #20
17360     4A 00 00 FF 
17364     80 E4 05 F1 | 	add	objptr, ##38016
17368     F2 26 02 FB | 	rdlong	local01, objptr
1736c     13 17 02 F6 | 	mov	arg03, local01
17370     01 16 66 F0 | 	shl	arg03, #1
17374     13 17 02 F1 | 	add	arg03, local01
17378     02 16 66 F0 | 	shl	arg03, #2
1737c     03 00 00 FF 
17380     04 E4 85 F1 | 	sub	objptr, ##1540
17384     F2 16 02 F1 | 	add	arg03, objptr
17388     0B 17 02 FB | 	rdlong	arg03, arg03
1738c     0C 4E 05 F1 | 	add	fp, #12
17390     A7 16 62 FC | 	wrlong	arg03, fp
17394                 | ' 
17394                 | ' numpar=compiledline(lineptr_e).result.uresult
17394                 | ' if numpar>1 then print "pady: "; : printerror(39) : return
17394     0C 4E 85 F1 | 	sub	fp, #12
17398     02 16 16 F2 | 	cmp	arg03, #2 wc
1739c     47 00 00 FF 
173a0     7C E4 85 F1 | 	sub	objptr, ##36476
173a4     40 00 90 CD |  if_b	jmp	#LR__1880
173a8     00 12 06 F6 | 	mov	arg01, #0
173ac     0C 52 B1 FD | 	call	#__system___getiolock_0603
173b0     FD 12 02 F6 | 	mov	arg01, result1
173b4     60 F5 B0 FD | 	call	#__system___lockmem
173b8     B7 01 00 FF 
173bc     46 15 06 F6 | 	mov	arg02, ##@LR__5942
173c0     00 12 06 F6 | 	mov	arg01, #0
173c4     00 16 06 F6 | 	mov	arg03, #0
173c8     44 02 B1 FD | 	call	#__system___basic_print_string
173cc     00 12 06 F6 | 	mov	arg01, #0
173d0     E8 51 B1 FD | 	call	#__system___getiolock_0603
173d4     FD 00 68 FC | 	wrlong	#0, result1
173d8     27 12 06 F6 | 	mov	arg01, #39
173dc     00 14 06 F6 | 	mov	arg02, #0
173e0     44 BB B0 FD | 	call	#_printerror
173e4     E0 01 90 FD | 	jmp	#LR__1884
173e8                 | LR__1880
173e8                 | ' if numpar=0 then 
173e8     0C 4E 05 F1 | 	add	fp, #12
173ec     A7 FE 09 FB | 	rdlong	result3, fp wz
173f0     0C 4E 85 F1 | 	sub	fp, #12
173f4     A8 00 90 5D |  if_ne	jmp	#LR__1881
173f8     00 C0 1B FF 
173fc     00 26 06 F6 | 	mov	local01, ##931135488
17400     51 00 00 FF 
17404     74 E5 05 F1 | 	add	objptr, ##41844
17408     F2 12 02 FB | 	rdlong	arg01, objptr
1740c     51 00 00 FF 
17410     74 E5 85 F1 | 	sub	objptr, ##41844
17414     09 13 52 F6 | 	abs	arg01, arg01 wc
17418     1F 28 C6 C9 |  if_b	decod	local02, #31
1741c     00 28 06 36 |  if_ae	mov	local02, #0
17420     6C 1F B1 FD | 	call	#__system___float_fromuns
17424     14 FB 61 F5 | 	xor	result1, local02
17428     FD 12 02 F6 | 	mov	arg01, result1
1742c     FF 7F 23 FF 
17430     00 14 06 F6 | 	mov	arg02, ##1191181824
17434     60 25 B1 FD | 	call	#__system___float_div
17438     FD 14 02 F6 | 	mov	arg02, result1
1743c     13 13 02 F6 | 	mov	arg01, local01
17440     80 1F B1 FD | 	call	#__system___float_add
17444     10 4E 05 F1 | 	add	fp, #16
17448     A7 FA 61 FC | 	wrlong	result1, fp
1744c                 | '   fpad=(1.0/65536.0)+pady(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
1744c     10 4E 85 F1 | 	sub	fp, #16
17450     1F FA 05 F4 | 	bitl	result1, #31
17454     FD 12 02 F6 | 	mov	arg01, result1
17458     89 41 1D FF 
1745c     6F 14 06 F6 | 	mov	arg02, ##981668463
17460     01 16 06 F6 | 	mov	arg03, #1
17464     60 27 B1 FD | 	call	#__system___float_cmp
17468     00 FA 55 F2 | 	cmps	result1, #0 wc
1746c     10 4E 05 C1 |  if_b	add	fp, #16
17470     A7 00 68 CC |  if_b	wrlong	#0, fp
17474     10 4E 85 C1 |  if_b	sub	fp, #16
17478     10 4E 05 F1 | 	add	fp, #16
1747c     A7 26 02 FB | 	rdlong	local01, fp
17480     10 4E 85 F1 | 	sub	fp, #16
17484     A7 26 62 FC | 	wrlong	local01, fp
17488     08 4E 05 F1 | 	add	fp, #8
1748c     A7 3C 68 FC | 	wrlong	#30, fp
17490     08 4E 85 F1 | 	sub	fp, #8
17494     A7 12 02 F6 | 	mov	arg01, fp
17498     84 61 BF FD | 	call	#_push
1749c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1749c     28 01 90 FD | 	jmp	#LR__1884
174a0                 | LR__1881
174a0     E4 60 BF FD | 	call	#_pop
174a4     A7 FA 61 FC | 	wrlong	result1, fp
174a8     04 4E 05 F1 | 	add	fp, #4
174ac     A7 FC 61 FC | 	wrlong	result2, fp
174b0     04 4E 05 F1 | 	add	fp, #4
174b4     A7 FE 61 FC | 	wrlong	result3, fp
174b8                 | ' t1=pop()
174b8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
174b8     08 4E 85 F1 | 	sub	fp, #8
174bc     1C FE 0D F2 | 	cmp	result3, #28 wz
174c0     08 4E 05 51 |  if_ne	add	fp, #8
174c4     A7 26 02 5B |  if_ne	rdlong	local01, fp
174c8     08 4E 85 51 |  if_ne	sub	fp, #8
174cc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
174d0     E8 00 90 5D |  if_ne	jmp	#LR__1883
174d4     A7 26 02 FB | 	rdlong	local01, fp
174d8     52 00 00 FF 
174dc     08 E5 05 F1 | 	add	objptr, ##42248
174e0     F2 26 62 FC | 	wrlong	local01, objptr
174e4                 | '   q=t1.result.uresult
174e4                 | '   if q<7 then 
174e4     52 00 00 FF 
174e8     08 E5 85 F1 | 	sub	objptr, ##42248
174ec     07 26 56 F2 | 	cmps	local01, #7 wc
174f0     B8 00 90 3D |  if_ae	jmp	#LR__1882
174f4     00 C0 1B FF 
174f8     00 26 06 F6 | 	mov	local01, ##931135488
174fc     52 00 00 FF 
17500     08 E5 05 F1 | 	add	objptr, ##42248
17504     F2 16 02 FB | 	rdlong	arg03, objptr
17508     02 16 66 F0 | 	shl	arg03, #2
1750c     94 E5 85 F1 | 	sub	objptr, #404
17510     F2 16 02 F1 | 	add	arg03, objptr
17514     0B 13 02 FB | 	rdlong	arg01, arg03
17518     51 00 00 FF 
1751c     74 E5 85 F1 | 	sub	objptr, ##41844
17520     09 13 52 F6 | 	abs	arg01, arg01 wc
17524     1F 28 C6 C9 |  if_b	decod	local02, #31
17528     00 28 06 36 |  if_ae	mov	local02, #0
1752c     60 1E B1 FD | 	call	#__system___float_fromuns
17530     14 FB 61 F5 | 	xor	result1, local02
17534     FD 12 02 F6 | 	mov	arg01, result1
17538     FF 7F 23 FF 
1753c     00 14 06 F6 | 	mov	arg02, ##1191181824
17540     54 24 B1 FD | 	call	#__system___float_div
17544     FD 14 02 F6 | 	mov	arg02, result1
17548     13 13 02 F6 | 	mov	arg01, local01
1754c     74 1E B1 FD | 	call	#__system___float_add
17550     10 4E 05 F1 | 	add	fp, #16
17554     A7 FA 61 FC | 	wrlong	result1, fp
17558                 | '     fpad=(1.0/65536.0)+pady(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
17558     10 4E 85 F1 | 	sub	fp, #16
1755c     1F FA 05 F4 | 	bitl	result1, #31
17560     FD 12 02 F6 | 	mov	arg01, result1
17564     89 41 1D FF 
17568     6F 14 06 F6 | 	mov	arg02, ##981668463
1756c     01 16 06 F6 | 	mov	arg03, #1
17570     54 26 B1 FD | 	call	#__system___float_cmp
17574     00 FA 55 F2 | 	cmps	result1, #0 wc
17578     10 4E 05 C1 |  if_b	add	fp, #16
1757c     A7 00 68 CC |  if_b	wrlong	#0, fp
17580     10 4E 85 C1 |  if_b	sub	fp, #16
17584     10 4E 05 F1 | 	add	fp, #16
17588     A7 26 02 FB | 	rdlong	local01, fp
1758c     10 4E 85 F1 | 	sub	fp, #16
17590     A7 26 62 FC | 	wrlong	local01, fp
17594     08 4E 05 F1 | 	add	fp, #8
17598     A7 3C 68 FC | 	wrlong	#30, fp
1759c     08 4E 85 F1 | 	sub	fp, #8
175a0     A7 12 02 F6 | 	mov	arg01, fp
175a4     78 60 BF FD | 	call	#_push
175a8                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
175a8     1C 00 90 FD | 	jmp	#LR__1884
175ac                 | LR__1882
175ac     29 12 06 F6 | 	mov	arg01, #41
175b0     00 14 06 F6 | 	mov	arg02, #0
175b4     70 B9 B0 FD | 	call	#_printerror
175b8                 | '      printerror(41) : return
175b8     0C 00 90 FD | 	jmp	#LR__1884
175bc                 | LR__1883
175bc     29 12 06 F6 | 	mov	arg01, #41
175c0     00 14 06 F6 | 	mov	arg02, #0
175c4     60 B9 B0 FD | 	call	#_printerror
175c8                 | LR__1884
175c8     A7 F0 03 F6 | 	mov	ptra, fp
175cc     B2 00 A0 FD | 	call	#popregs_
175d0                 | _do_pady_ret
175d0     2D 00 64 FD | 	ret
175d4                 | 
175d4                 | ' 
175d4                 | ' ' ------------------ padz
175d4                 | ' 
175d4                 | ' sub do_padz
175d4                 | _do_padz
175d4     02 4A 05 F6 | 	mov	COUNT_, #2
175d8     A8 00 A0 FD | 	call	#pushregs_
175dc     14 F0 07 F1 | 	add	ptra, #20
175e0     4A 00 00 FF 
175e4     80 E4 05 F1 | 	add	objptr, ##38016
175e8     F2 26 02 FB | 	rdlong	local01, objptr
175ec     13 17 02 F6 | 	mov	arg03, local01
175f0     01 16 66 F0 | 	shl	arg03, #1
175f4     13 17 02 F1 | 	add	arg03, local01
175f8     02 16 66 F0 | 	shl	arg03, #2
175fc     03 00 00 FF 
17600     04 E4 85 F1 | 	sub	objptr, ##1540
17604     F2 16 02 F1 | 	add	arg03, objptr
17608     0B 17 02 FB | 	rdlong	arg03, arg03
1760c     0C 4E 05 F1 | 	add	fp, #12
17610     A7 16 62 FC | 	wrlong	arg03, fp
17614                 | ' 
17614                 | ' numpar=compiledline(lineptr_e).result.uresult
17614                 | ' if numpar>1 then print "padz: "; : printerror(39) : return
17614     0C 4E 85 F1 | 	sub	fp, #12
17618     02 16 16 F2 | 	cmp	arg03, #2 wc
1761c     47 00 00 FF 
17620     7C E4 85 F1 | 	sub	objptr, ##36476
17624     40 00 90 CD |  if_b	jmp	#LR__1890
17628     00 12 06 F6 | 	mov	arg01, #0
1762c     8C 4F B1 FD | 	call	#__system___getiolock_0603
17630     FD 12 02 F6 | 	mov	arg01, result1
17634     E0 F2 B0 FD | 	call	#__system___lockmem
17638     B7 01 00 FF 
1763c     4D 15 06 F6 | 	mov	arg02, ##@LR__5943
17640     00 12 06 F6 | 	mov	arg01, #0
17644     00 16 06 F6 | 	mov	arg03, #0
17648     C4 FF B0 FD | 	call	#__system___basic_print_string
1764c     00 12 06 F6 | 	mov	arg01, #0
17650     68 4F B1 FD | 	call	#__system___getiolock_0603
17654     FD 00 68 FC | 	wrlong	#0, result1
17658     27 12 06 F6 | 	mov	arg01, #39
1765c     00 14 06 F6 | 	mov	arg02, #0
17660     C4 B8 B0 FD | 	call	#_printerror
17664     E0 01 90 FD | 	jmp	#LR__1894
17668                 | LR__1890
17668                 | ' if numpar=0 then 
17668     0C 4E 05 F1 | 	add	fp, #12
1766c     A7 FE 09 FB | 	rdlong	result3, fp wz
17670     0C 4E 85 F1 | 	sub	fp, #12
17674     A8 00 90 5D |  if_ne	jmp	#LR__1891
17678     00 C0 1B FF 
1767c     00 26 06 F6 | 	mov	local01, ##931135488
17680     51 00 00 FF 
17684     90 E5 05 F1 | 	add	objptr, ##41872
17688     F2 12 02 FB | 	rdlong	arg01, objptr
1768c     51 00 00 FF 
17690     90 E5 85 F1 | 	sub	objptr, ##41872
17694     09 13 52 F6 | 	abs	arg01, arg01 wc
17698     1F 28 C6 C9 |  if_b	decod	local02, #31
1769c     00 28 06 36 |  if_ae	mov	local02, #0
176a0     EC 1C B1 FD | 	call	#__system___float_fromuns
176a4     14 FB 61 F5 | 	xor	result1, local02
176a8     FD 12 02 F6 | 	mov	arg01, result1
176ac     FF 7F 23 FF 
176b0     00 14 06 F6 | 	mov	arg02, ##1191181824
176b4     E0 22 B1 FD | 	call	#__system___float_div
176b8     FD 14 02 F6 | 	mov	arg02, result1
176bc     13 13 02 F6 | 	mov	arg01, local01
176c0     00 1D B1 FD | 	call	#__system___float_add
176c4     10 4E 05 F1 | 	add	fp, #16
176c8     A7 FA 61 FC | 	wrlong	result1, fp
176cc                 | '   fpad=(1.0/65536.0)+padz(0)/32767.0 : if abs(fpad) < 0.001 then fpad=0
176cc     10 4E 85 F1 | 	sub	fp, #16
176d0     1F FA 05 F4 | 	bitl	result1, #31
176d4     FD 12 02 F6 | 	mov	arg01, result1
176d8     89 41 1D FF 
176dc     6F 14 06 F6 | 	mov	arg02, ##981668463
176e0     01 16 06 F6 | 	mov	arg03, #1
176e4     E0 24 B1 FD | 	call	#__system___float_cmp
176e8     00 FA 55 F2 | 	cmps	result1, #0 wc
176ec     10 4E 05 C1 |  if_b	add	fp, #16
176f0     A7 00 68 CC |  if_b	wrlong	#0, fp
176f4     10 4E 85 C1 |  if_b	sub	fp, #16
176f8     10 4E 05 F1 | 	add	fp, #16
176fc     A7 26 02 FB | 	rdlong	local01, fp
17700     10 4E 85 F1 | 	sub	fp, #16
17704     A7 26 62 FC | 	wrlong	local01, fp
17708     08 4E 05 F1 | 	add	fp, #8
1770c     A7 3C 68 FC | 	wrlong	#30, fp
17710     08 4E 85 F1 | 	sub	fp, #8
17714     A7 12 02 F6 | 	mov	arg01, fp
17718     04 5F BF FD | 	call	#_push
1771c                 | '   t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return
1771c     28 01 90 FD | 	jmp	#LR__1894
17720                 | LR__1891
17720     64 5E BF FD | 	call	#_pop
17724     A7 FA 61 FC | 	wrlong	result1, fp
17728     04 4E 05 F1 | 	add	fp, #4
1772c     A7 FC 61 FC | 	wrlong	result2, fp
17730     04 4E 05 F1 | 	add	fp, #4
17734     A7 FE 61 FC | 	wrlong	result3, fp
17738                 | ' t1=pop()
17738                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17738     08 4E 85 F1 | 	sub	fp, #8
1773c     1C FE 0D F2 | 	cmp	result3, #28 wz
17740     08 4E 05 51 |  if_ne	add	fp, #8
17744     A7 26 02 5B |  if_ne	rdlong	local01, fp
17748     08 4E 85 51 |  if_ne	sub	fp, #8
1774c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17750     E8 00 90 5D |  if_ne	jmp	#LR__1893
17754     A7 26 02 FB | 	rdlong	local01, fp
17758     52 00 00 FF 
1775c     08 E5 05 F1 | 	add	objptr, ##42248
17760     F2 26 62 FC | 	wrlong	local01, objptr
17764                 | '   q=t1.result.uresult
17764                 | '   if q<7 then 
17764     52 00 00 FF 
17768     08 E5 85 F1 | 	sub	objptr, ##42248
1776c     07 26 56 F2 | 	cmps	local01, #7 wc
17770     B8 00 90 3D |  if_ae	jmp	#LR__1892
17774     00 C0 1B FF 
17778     00 26 06 F6 | 	mov	local01, ##931135488
1777c     52 00 00 FF 
17780     08 E5 05 F1 | 	add	objptr, ##42248
17784     F2 16 02 FB | 	rdlong	arg03, objptr
17788     02 16 66 F0 | 	shl	arg03, #2
1778c     78 E5 85 F1 | 	sub	objptr, #376
17790     F2 16 02 F1 | 	add	arg03, objptr
17794     0B 13 02 FB | 	rdlong	arg01, arg03
17798     51 00 00 FF 
1779c     90 E5 85 F1 | 	sub	objptr, ##41872
177a0     09 13 52 F6 | 	abs	arg01, arg01 wc
177a4     1F 28 C6 C9 |  if_b	decod	local02, #31
177a8     00 28 06 36 |  if_ae	mov	local02, #0
177ac     E0 1B B1 FD | 	call	#__system___float_fromuns
177b0     14 FB 61 F5 | 	xor	result1, local02
177b4     FD 12 02 F6 | 	mov	arg01, result1
177b8     FF 7F 23 FF 
177bc     00 14 06 F6 | 	mov	arg02, ##1191181824
177c0     D4 21 B1 FD | 	call	#__system___float_div
177c4     FD 14 02 F6 | 	mov	arg02, result1
177c8     13 13 02 F6 | 	mov	arg01, local01
177cc     F4 1B B1 FD | 	call	#__system___float_add
177d0     10 4E 05 F1 | 	add	fp, #16
177d4     A7 FA 61 FC | 	wrlong	result1, fp
177d8                 | '     fpad=(1.0/65536.0)+padz(q)/32767.0 : if abs(fpad) < 0.001 then fpad=0
177d8     10 4E 85 F1 | 	sub	fp, #16
177dc     1F FA 05 F4 | 	bitl	result1, #31
177e0     FD 12 02 F6 | 	mov	arg01, result1
177e4     89 41 1D FF 
177e8     6F 14 06 F6 | 	mov	arg02, ##981668463
177ec     01 16 06 F6 | 	mov	arg03, #1
177f0     D4 23 B1 FD | 	call	#__system___float_cmp
177f4     00 FA 55 F2 | 	cmps	result1, #0 wc
177f8     10 4E 05 C1 |  if_b	add	fp, #16
177fc     A7 00 68 CC |  if_b	wrlong	#0, fp
17800     10 4E 85 C1 |  if_b	sub	fp, #16
17804     10 4E 05 F1 | 	add	fp, #16
17808     A7 26 02 FB | 	rdlong	local01, fp
1780c     10 4E 85 F1 | 	sub	fp, #16
17810     A7 26 62 FC | 	wrlong	local01, fp
17814     08 4E 05 F1 | 	add	fp, #8
17818     A7 3C 68 FC | 	wrlong	#30, fp
1781c     08 4E 85 F1 | 	sub	fp, #8
17820     A7 12 02 F6 | 	mov	arg01, fp
17824     F8 5D BF FD | 	call	#_push
17828                 | '     t1.result.fresult=fpad: t1.result_type=result_float : push t1 : return 
17828     1C 00 90 FD | 	jmp	#LR__1894
1782c                 | LR__1892
1782c     29 12 06 F6 | 	mov	arg01, #41
17830     00 14 06 F6 | 	mov	arg02, #0
17834     F0 B6 B0 FD | 	call	#_printerror
17838                 | '      printerror(41) : return
17838     0C 00 90 FD | 	jmp	#LR__1894
1783c                 | LR__1893
1783c     29 12 06 F6 | 	mov	arg01, #41
17840     00 14 06 F6 | 	mov	arg02, #0
17844     E0 B6 B0 FD | 	call	#_printerror
17848                 | LR__1894
17848     A7 F0 03 F6 | 	mov	ptra, fp
1784c     B2 00 A0 FD | 	call	#popregs_
17850                 | _do_padz_ret
17850     2D 00 64 FD | 	ret
17854                 | 
17854                 | ' 
17854                 | ' '-------------------- paper
17854                 | ' 
17854                 | ' sub do_paper
17854                 | _do_paper
17854     03 4A 05 F6 | 	mov	COUNT_, #3
17858     A8 00 A0 FD | 	call	#pushregs_
1785c     28 5D BF FD | 	call	#_pop
17860     FD 26 02 F6 | 	mov	local01, result1
17864     FE 28 02 F6 | 	mov	local02, result2
17868     FF 2A 02 F6 | 	mov	local03, result3
1786c                 | ' t1=pop() 
1786c                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
1786c     1E 2A 0E F2 | 	cmp	local03, #30 wz
17870     10 00 90 5D |  if_ne	jmp	#LR__1900
17874     13 13 02 F6 | 	mov	arg01, local01
17878     00 14 06 F6 | 	mov	arg02, #0
1787c     DC 23 B1 FD | 	call	#__system___float_tointeger
17880     FD 26 02 F6 | 	mov	local01, result1
17884                 | LR__1900
17884                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
17884     1F 2A 0E F2 | 	cmp	local03, #31 wz
17888     18 00 90 5D |  if_ne	jmp	#LR__1901
1788c     13 13 02 F6 | 	mov	arg01, local01
17890     0C 27 B1 FD | 	call	#__system____builtin_atof
17894     FD 12 02 F6 | 	mov	arg01, result1
17898     00 14 06 F6 | 	mov	arg02, #0
1789c     BC 23 B1 FD | 	call	#__system___float_tointeger
178a0     FD 26 02 F6 | 	mov	local01, result1
178a4                 | LR__1901
178a4     37 00 00 FF 
178a8     38 E4 05 F1 | 	add	objptr, ##28216
178ac     F2 26 62 FC | 	wrlong	local01, objptr
178b0     04 E4 05 F1 | 	add	objptr, #4
178b4     F2 12 02 FB | 	rdlong	arg01, objptr
178b8                 | ' 
178b8                 | ' write_color:=ff
178b8     36 00 00 FF 
178bc     FB E5 85 F1 | 	sub	objptr, ##28155
178c0     F2 12 62 FC | 	wrlong	arg01, objptr
178c4                 | ' write_background:=bb
178c4     04 E4 05 F1 | 	add	objptr, #4
178c8     F2 26 62 FC | 	wrlong	local01, objptr
178cc     45 E4 85 F1 | 	sub	objptr, #69
178d0     A7 F0 03 F6 | 	mov	ptra, fp
178d4     B2 00 A0 FD | 	call	#popregs_
178d8                 | _do_paper_ret
178d8     2D 00 64 FD | 	ret
178dc                 | 
178dc                 | ' 
178dc                 | ' '-------------------- peek
178dc                 | ' 
178dc                 | ' sub do_peek
178dc                 | _do_peek
178dc     00 4A 05 F6 | 	mov	COUNT_, #0
178e0     A8 00 A0 FD | 	call	#pushregs_
178e4     14 F0 07 F1 | 	add	ptra, #20
178e8     9C 5C BF FD | 	call	#_pop
178ec     A7 FA 61 FC | 	wrlong	result1, fp
178f0     04 4E 05 F1 | 	add	fp, #4
178f4     A7 FC 61 FC | 	wrlong	result2, fp
178f8     04 4E 05 F1 | 	add	fp, #4
178fc     A7 FE 61 FC | 	wrlong	result3, fp
17900     08 4E 85 F1 | 	sub	fp, #8
17904     A7 12 02 F6 | 	mov	arg01, fp
17908     60 5E BF FD | 	call	#_converttoint
1790c     0C 4E 05 F1 | 	add	fp, #12
17910     A7 FA 61 FC | 	wrlong	result1, fp
17914                 | ' 
17914                 | ' t1=pop()
17914                 | ' a=converttoint(t1)
17914                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
17914     0C 4E 85 F1 | 	sub	fp, #12
17918     00 04 00 FF 
1791c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
17920     1C 00 90 3D |  if_ae	jmp	#LR__1910
17924     0C 4E 05 F1 | 	add	fp, #12
17928     A7 12 02 FB | 	rdlong	arg01, fp
1792c     09 FB C1 FA | 	rdbyte	result1, arg01
17930     04 4E 05 F1 | 	add	fp, #4
17934     A7 FA 61 FC | 	wrlong	result1, fp
17938     10 4E 85 F1 | 	sub	fp, #16
1793c     20 00 90 FD | 	jmp	#LR__1911
17940                 | LR__1910
17940     0C 4E 05 F1 | 	add	fp, #12
17944     A7 12 02 FB | 	rdlong	arg01, fp
17948     0C 4E 85 F1 | 	sub	fp, #12
1794c     50 B8 B0 FD | 	call	#_pspeek
17950     FD FA E1 F8 | 	getbyte	result1, result1, #0
17954     10 4E 05 F1 | 	add	fp, #16
17958     A7 FA 61 FC | 	wrlong	result1, fp
1795c     10 4E 85 F1 | 	sub	fp, #16
17960                 | LR__1911
17960     08 4E 05 F1 | 	add	fp, #8
17964     A7 3A 68 FC | 	wrlong	#29, fp
17968     08 4E 05 F1 | 	add	fp, #8
1796c     A7 12 02 FB | 	rdlong	arg01, fp
17970     10 4E 85 F1 | 	sub	fp, #16
17974     A7 12 62 FC | 	wrlong	arg01, fp
17978     A7 12 02 F6 | 	mov	arg01, fp
1797c     A0 5C BF FD | 	call	#_push
17980     A7 F0 03 F6 | 	mov	ptra, fp
17984     B2 00 A0 FD | 	call	#popregs_
17988                 | _do_peek_ret
17988     2D 00 64 FD | 	ret
1798c                 | 
1798c                 | ' 
1798c                 | ' '-------------------- pinfloat
1798c                 | ' 
1798c                 | ' sub do_pinfloat
1798c                 | _do_pinfloat
1798c     00 4A 05 F6 | 	mov	COUNT_, #0
17990     A8 00 A0 FD | 	call	#pushregs_
17994     0C F0 07 F1 | 	add	ptra, #12
17998     EC 5B BF FD | 	call	#_pop
1799c     A7 FA 61 FC | 	wrlong	result1, fp
179a0     04 4E 05 F1 | 	add	fp, #4
179a4     A7 FC 61 FC | 	wrlong	result2, fp
179a8     04 4E 05 F1 | 	add	fp, #4
179ac     A7 FE 61 FC | 	wrlong	result3, fp
179b0     08 4E 85 F1 | 	sub	fp, #8
179b4     A7 12 02 F6 | 	mov	arg01, fp
179b8     B0 5D BF FD | 	call	#_converttoint
179bc     50 FA 61 FD | 	fltl	result1
179c0     A7 F0 03 F6 | 	mov	ptra, fp
179c4     B2 00 A0 FD | 	call	#popregs_
179c8                 | _do_pinfloat_ret
179c8     2D 00 64 FD | 	ret
179cc                 | 
179cc                 | ' 
179cc                 | ' '-------------------- pinhi
179cc                 | ' 
179cc                 | ' sub do_pinhi
179cc                 | _do_pinhi
179cc     00 4A 05 F6 | 	mov	COUNT_, #0
179d0     A8 00 A0 FD | 	call	#pushregs_
179d4     0C F0 07 F1 | 	add	ptra, #12
179d8     AC 5B BF FD | 	call	#_pop
179dc     A7 FA 61 FC | 	wrlong	result1, fp
179e0     04 4E 05 F1 | 	add	fp, #4
179e4     A7 FC 61 FC | 	wrlong	result2, fp
179e8     04 4E 05 F1 | 	add	fp, #4
179ec     A7 FE 61 FC | 	wrlong	result3, fp
179f0     08 4E 85 F1 | 	sub	fp, #8
179f4     A7 12 02 F6 | 	mov	arg01, fp
179f8     70 5D BF FD | 	call	#_converttoint
179fc     59 FA 61 FD | 	drvh	result1
17a00     A7 F0 03 F6 | 	mov	ptra, fp
17a04     B2 00 A0 FD | 	call	#popregs_
17a08                 | _do_pinhi_ret
17a08     2D 00 64 FD | 	ret
17a0c                 | 
17a0c                 | ' 
17a0c                 | ' '-------------------- pinlo
17a0c                 | ' 
17a0c                 | ' sub do_pinlo
17a0c                 | _do_pinlo
17a0c     00 4A 05 F6 | 	mov	COUNT_, #0
17a10     A8 00 A0 FD | 	call	#pushregs_
17a14     0C F0 07 F1 | 	add	ptra, #12
17a18     6C 5B BF FD | 	call	#_pop
17a1c     A7 FA 61 FC | 	wrlong	result1, fp
17a20     04 4E 05 F1 | 	add	fp, #4
17a24     A7 FC 61 FC | 	wrlong	result2, fp
17a28     04 4E 05 F1 | 	add	fp, #4
17a2c     A7 FE 61 FC | 	wrlong	result3, fp
17a30     08 4E 85 F1 | 	sub	fp, #8
17a34     A7 12 02 F6 | 	mov	arg01, fp
17a38     30 5D BF FD | 	call	#_converttoint
17a3c     58 FA 61 FD | 	drvl	result1
17a40     A7 F0 03 F6 | 	mov	ptra, fp
17a44     B2 00 A0 FD | 	call	#popregs_
17a48                 | _do_pinlo_ret
17a48     2D 00 64 FD | 	ret
17a4c                 | 
17a4c                 | ' 
17a4c                 | ' '-------------------- pinread
17a4c                 | ' 
17a4c                 | ' sub do_pinread
17a4c                 | _do_pinread
17a4c     00 4A 05 F6 | 	mov	COUNT_, #0
17a50     A8 00 A0 FD | 	call	#pushregs_
17a54     0C F0 07 F1 | 	add	ptra, #12
17a58     2C 5B BF FD | 	call	#_pop
17a5c     A7 FA 61 FC | 	wrlong	result1, fp
17a60     04 4E 05 F1 | 	add	fp, #4
17a64     A7 FC 61 FC | 	wrlong	result2, fp
17a68     04 4E 05 F1 | 	add	fp, #4
17a6c     A7 FE 61 FC | 	wrlong	result3, fp
17a70     08 4E 85 F1 | 	sub	fp, #8
17a74     A7 12 02 F6 | 	mov	arg01, fp
17a78     F0 5C BF FD | 	call	#_converttoint
17a7c     FD 12 02 F6 | 	mov	arg01, result1
17a80     20 12 CE F7 | 	test	arg01, #32 wz
17a84     FF FB 01 56 |  if_ne	mov	result1, inb
17a88     FE FB 01 A6 |  if_e	mov	result1, ina
17a8c     09 FB 41 F0 | 	shr	result1, arg01
17a90     06 12 46 F0 | 	shr	arg01, #6
17a94     09 FB 41 F7 | 	zerox	result1, arg01
17a98     52 00 00 FF 
17a9c     10 E5 05 F1 | 	add	objptr, ##42256
17aa0     F2 FA 61 FC | 	wrlong	result1, objptr
17aa4     52 00 00 FF 
17aa8     10 E5 85 F1 | 	sub	objptr, ##42256
17aac     08 4E 05 F1 | 	add	fp, #8
17ab0     A7 3A 68 FC | 	wrlong	#29, fp
17ab4     08 4E 85 F1 | 	sub	fp, #8
17ab8     A7 08 68 FC | 	wrlong	#4, fp
17abc     A7 12 02 F6 | 	mov	arg01, fp
17ac0     5C 5B BF FD | 	call	#_push
17ac4     A7 F0 03 F6 | 	mov	ptra, fp
17ac8     B2 00 A0 FD | 	call	#popregs_
17acc                 | _do_pinread_ret
17acc     2D 00 64 FD | 	ret
17ad0                 | 
17ad0                 | ' 
17ad0                 | ' '-------------------- pinstart
17ad0                 | ' 
17ad0                 | ' sub do_pinstart
17ad0                 | _do_pinstart
17ad0     03 4A 05 F6 | 	mov	COUNT_, #3
17ad4     A8 00 A0 FD | 	call	#pushregs_
17ad8     30 F0 07 F1 | 	add	ptra, #48
17adc     A8 5A BF FD | 	call	#_pop
17ae0     FD 16 02 F6 | 	mov	arg03, result1
17ae4     FE 14 02 F6 | 	mov	arg02, result2
17ae8     FF 18 02 F6 | 	mov	arg04, result3
17aec     A7 16 62 FC | 	wrlong	arg03, fp
17af0     04 4E 05 F1 | 	add	fp, #4
17af4     A7 14 62 FC | 	wrlong	arg02, fp
17af8     04 4E 05 F1 | 	add	fp, #4
17afc     A7 18 62 FC | 	wrlong	arg04, fp
17b00     08 4E 85 F1 | 	sub	fp, #8
17b04     80 5A BF FD | 	call	#_pop
17b08     FD 16 02 F6 | 	mov	arg03, result1
17b0c     FE 14 02 F6 | 	mov	arg02, result2
17b10     FF 18 02 F6 | 	mov	arg04, result3
17b14     0C 4E 05 F1 | 	add	fp, #12
17b18     A7 16 62 FC | 	wrlong	arg03, fp
17b1c     04 4E 05 F1 | 	add	fp, #4
17b20     A7 14 62 FC | 	wrlong	arg02, fp
17b24     04 4E 05 F1 | 	add	fp, #4
17b28     A7 18 62 FC | 	wrlong	arg04, fp
17b2c     14 4E 85 F1 | 	sub	fp, #20
17b30     54 5A BF FD | 	call	#_pop
17b34     FD 16 02 F6 | 	mov	arg03, result1
17b38     FE 14 02 F6 | 	mov	arg02, result2
17b3c     FF 18 02 F6 | 	mov	arg04, result3
17b40     18 4E 05 F1 | 	add	fp, #24
17b44     A7 16 62 FC | 	wrlong	arg03, fp
17b48     04 4E 05 F1 | 	add	fp, #4
17b4c     A7 14 62 FC | 	wrlong	arg02, fp
17b50     04 4E 05 F1 | 	add	fp, #4
17b54     A7 18 62 FC | 	wrlong	arg04, fp
17b58     20 4E 85 F1 | 	sub	fp, #32
17b5c     28 5A BF FD | 	call	#_pop
17b60     FF 16 02 F6 | 	mov	arg03, result3
17b64     24 4E 05 F1 | 	add	fp, #36
17b68     A7 FA 61 FC | 	wrlong	result1, fp
17b6c     04 4E 05 F1 | 	add	fp, #4
17b70     A7 FC 61 FC | 	wrlong	result2, fp
17b74     04 4E 05 F1 | 	add	fp, #4
17b78     A7 16 62 FC | 	wrlong	arg03, fp
17b7c     08 4E 85 F1 | 	sub	fp, #8
17b80     A7 12 02 F6 | 	mov	arg01, fp
17b84     24 4E 85 F1 | 	sub	fp, #36
17b88     E0 5B BF FD | 	call	#_converttoint
17b8c     FD 26 02 F6 | 	mov	local01, result1
17b90     18 4E 05 F1 | 	add	fp, #24
17b94     A7 12 02 F6 | 	mov	arg01, fp
17b98     18 4E 85 F1 | 	sub	fp, #24
17b9c     CC 5B BF FD | 	call	#_converttoint
17ba0     FD 28 02 F6 | 	mov	local02, result1
17ba4     0C 4E 05 F1 | 	add	fp, #12
17ba8     A7 12 02 F6 | 	mov	arg01, fp
17bac     0C 4E 85 F1 | 	sub	fp, #12
17bb0     B8 5B BF FD | 	call	#_converttoint
17bb4     FD 2A 02 F6 | 	mov	local03, result1
17bb8     A7 12 02 F6 | 	mov	arg01, fp
17bbc     AC 5B BF FD | 	call	#_converttoint
17bc0     40 26 62 FD | 	dirl	local01
17bc4     13 29 02 FC | 	wrpin	local02, local01
17bc8     13 2B 12 FC | 	wxpin	local03, local01
17bcc     13 FB 21 FC | 	wypin	result1, local01
17bd0     41 26 62 FD | 	dirh	local01
17bd4     A7 F0 03 F6 | 	mov	ptra, fp
17bd8     B2 00 A0 FD | 	call	#popregs_
17bdc                 | _do_pinstart_ret
17bdc     2D 00 64 FD | 	ret
17be0                 | 
17be0                 | ' 
17be0                 | ' '-------------------- pintoggle
17be0                 | ' 
17be0                 | ' sub do_pintoggle
17be0                 | _do_pintoggle
17be0     00 4A 05 F6 | 	mov	COUNT_, #0
17be4     A8 00 A0 FD | 	call	#pushregs_
17be8     0C F0 07 F1 | 	add	ptra, #12
17bec     98 59 BF FD | 	call	#_pop
17bf0     A7 FA 61 FC | 	wrlong	result1, fp
17bf4     04 4E 05 F1 | 	add	fp, #4
17bf8     A7 FC 61 FC | 	wrlong	result2, fp
17bfc     04 4E 05 F1 | 	add	fp, #4
17c00     A7 FE 61 FC | 	wrlong	result3, fp
17c04     08 4E 85 F1 | 	sub	fp, #8
17c08     A7 12 02 F6 | 	mov	arg01, fp
17c0c     5C 5B BF FD | 	call	#_converttoint
17c10     5F FA 61 FD | 	drvnot	result1
17c14     A7 F0 03 F6 | 	mov	ptra, fp
17c18     B2 00 A0 FD | 	call	#popregs_
17c1c                 | _do_pintoggle_ret
17c1c     2D 00 64 FD | 	ret
17c20                 | 
17c20                 | ' 
17c20                 | ' '-------------------- pinwrite
17c20                 | ' 
17c20                 | ' sub do_pinwrite
17c20                 | _do_pinwrite
17c20     01 4A 05 F6 | 	mov	COUNT_, #1
17c24     A8 00 A0 FD | 	call	#pushregs_
17c28     18 F0 07 F1 | 	add	ptra, #24
17c2c     58 59 BF FD | 	call	#_pop
17c30     FD 14 02 F6 | 	mov	arg02, result1
17c34     FE 12 02 F6 | 	mov	arg01, result2
17c38     FF 26 02 F6 | 	mov	local01, result3
17c3c     A7 14 62 FC | 	wrlong	arg02, fp
17c40     04 4E 05 F1 | 	add	fp, #4
17c44     A7 12 62 FC | 	wrlong	arg01, fp
17c48     04 4E 05 F1 | 	add	fp, #4
17c4c     A7 26 62 FC | 	wrlong	local01, fp
17c50     08 4E 85 F1 | 	sub	fp, #8
17c54     30 59 BF FD | 	call	#_pop
17c58     FF 26 02 F6 | 	mov	local01, result3
17c5c     0C 4E 05 F1 | 	add	fp, #12
17c60     A7 FA 61 FC | 	wrlong	result1, fp
17c64     04 4E 05 F1 | 	add	fp, #4
17c68     A7 FC 61 FC | 	wrlong	result2, fp
17c6c     04 4E 05 F1 | 	add	fp, #4
17c70     A7 26 62 FC | 	wrlong	local01, fp
17c74     08 4E 85 F1 | 	sub	fp, #8
17c78     A7 12 02 F6 | 	mov	arg01, fp
17c7c     0C 4E 85 F1 | 	sub	fp, #12
17c80     E8 5A BF FD | 	call	#_converttoint
17c84     FD 26 02 F6 | 	mov	local01, result1
17c88     A7 12 02 F6 | 	mov	arg01, fp
17c8c     DC 5A BF FD | 	call	#_converttoint
17c90     FD 14 02 F6 | 	mov	arg02, result1
17c94     13 13 02 F6 | 	mov	arg01, local01
17c98     30 EE B0 FD | 	call	#__system___pinwrite
17c9c     A7 F0 03 F6 | 	mov	ptra, fp
17ca0     B2 00 A0 FD | 	call	#popregs_
17ca4                 | _do_pinwrite_ret
17ca4     2D 00 64 FD | 	ret
17ca8                 | 
17ca8                 | ' 
17ca8                 | ' '-------------------- play
17ca8                 | ' 
17ca8                 | ' sub do_play
17ca8                 | _do_play
17ca8     08 4A 05 F6 | 	mov	COUNT_, #8
17cac     A8 00 A0 FD | 	call	#pushregs_
17cb0     7C F0 07 F1 | 	add	ptra, #124
17cb4     68 4E 05 F1 | 	add	fp, #104
17cb8     77 CC A1 FF 
17cbc     A7 7C 6B FC | 	wrlong	##1134096318, fp
17cc0                 | ' speed_coeff=305.873
17cc0                 | ' 
17cc0                 | ' for i=0 to 8 : params(i)=-2.0 : next i
17cc0     64 4E 85 F1 | 	sub	fp, #100
17cc4     A7 00 68 FC | 	wrlong	#0, fp
17cc8     97 18 48 FB | 	callpa	#(@LR__1921-@LR__1920)>>2,fcache_load_ptr_
17ccc                 | LR__1920
17ccc     A7 16 02 FB | 	rdlong	arg03, fp
17cd0     02 16 66 F0 | 	shl	arg03, #2
17cd4     34 4E 05 F1 | 	add	fp, #52
17cd8     A7 16 02 F1 | 	add	arg03, fp
17cdc     00 00 E0 FF 
17ce0     0B 01 68 FC | 	wrlong	##-1073741824, arg03
17ce4     34 4E 85 F1 | 	sub	fp, #52
17ce8     A7 26 02 FB | 	rdlong	local01, fp
17cec     01 26 06 F1 | 	add	local01, #1
17cf0     A7 26 62 FC | 	wrlong	local01, fp
17cf4     09 26 56 F2 | 	cmps	local01, #9 wc
17cf8     D0 FF 9F CD |  if_b	jmp	#LR__1920
17cfc                 | LR__1921
17cfc     04 4E 85 F1 | 	sub	fp, #4
17d00     4A 00 00 FF 
17d04     80 E4 05 F1 | 	add	objptr, ##38016
17d08     F2 28 02 FB | 	rdlong	local02, objptr
17d0c     14 2B 02 F6 | 	mov	local03, local02
17d10     01 2A 66 F0 | 	shl	local03, #1
17d14     14 2B 02 F1 | 	add	local03, local02
17d18     02 2A 66 F0 | 	shl	local03, #2
17d1c     03 00 00 FF 
17d20     04 E4 85 F1 | 	sub	objptr, ##1540
17d24     F2 2A 02 F1 | 	add	local03, objptr
17d28     15 2D 02 FB | 	rdlong	local04, local03
17d2c     A7 2C 62 FC | 	wrlong	local04, fp
17d30                 | ' numpar=compiledline(lineptr_e).result.uresult
17d30                 | ' for i=numpar to 1 step -1 
17d30     04 4E 05 F1 | 	add	fp, #4
17d34     A7 2C 62 FC | 	wrlong	local04, fp
17d38     04 4E 85 F1 | 	sub	fp, #4
17d3c     47 00 00 FF 
17d40     7C E4 85 F1 | 	sub	objptr, ##36476
17d44                 | LR__1922
17d44     40 58 BF FD | 	call	#_pop
17d48     5C 4E 05 F1 | 	add	fp, #92
17d4c     A7 FA 61 FC | 	wrlong	result1, fp
17d50     04 4E 05 F1 | 	add	fp, #4
17d54     A7 FC 61 FC | 	wrlong	result2, fp
17d58     04 4E 05 F1 | 	add	fp, #4
17d5c     A7 FE 61 FC | 	wrlong	result3, fp
17d60     60 4E 85 F1 | 	sub	fp, #96
17d64     A7 2A 02 FB | 	rdlong	local03, fp
17d68     01 2A 86 F1 | 	sub	local03, #1
17d6c     02 2A 66 F0 | 	shl	local03, #2
17d70     34 4E 05 F1 | 	add	fp, #52
17d74     A7 2A 02 F1 | 	add	local03, fp
17d78     24 4E 05 F1 | 	add	fp, #36
17d7c     A7 2E 02 F6 | 	mov	local05, fp
17d80     17 13 02 F6 | 	mov	arg01, local05
17d84     5C 4E 85 F1 | 	sub	fp, #92
17d88     9C 5A BF FD | 	call	#_converttofloat
17d8c     15 FB 61 FC | 	wrlong	result1, local03
17d90     04 4E 05 F1 | 	add	fp, #4
17d94     A7 26 02 FB | 	rdlong	local01, fp
17d98     01 26 86 F1 | 	sub	local01, #1
17d9c     A7 26 62 FC | 	wrlong	local01, fp
17da0     04 4E 85 F1 | 	sub	fp, #4
17da4     01 26 56 F2 | 	cmps	local01, #1 wc
17da8     98 FF 9F 3D |  if_ae	jmp	#LR__1922
17dac                 | ' 
17dac                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
17dac     38 4E 05 F1 | 	add	fp, #56
17db0     A7 12 02 FB | 	rdlong	arg01, fp
17db4     38 4E 85 F1 | 	sub	fp, #56
17db8     00 14 06 F6 | 	mov	arg02, #0
17dbc     01 16 06 F6 | 	mov	arg03, #1
17dc0     04 1E B1 FD | 	call	#__system___float_cmp
17dc4     00 FA 55 F2 | 	cmps	result1, #0 wc
17dc8     0C 4E 05 C1 |  if_b	add	fp, #12
17dcc     A7 00 68 CC |  if_b	wrlong	#0, fp
17dd0     0C 4E 85 C1 |  if_b	sub	fp, #12
17dd4     2C 00 90 CD |  if_b	jmp	#LR__1923
17dd8     38 4E 05 F1 | 	add	fp, #56
17ddc     A7 12 02 FB | 	rdlong	arg01, fp
17de0     38 4E 85 F1 | 	sub	fp, #56
17de4     01 14 06 F6 | 	mov	arg02, #1
17de8     70 1E B1 FD | 	call	#__system___float_tointeger
17dec     FD 26 52 F6 | 	abs	local01, result1 wc
17df0     07 26 06 F5 | 	and	local01, #7
17df4     13 27 82 F6 | 	negc	local01, local01
17df8     0C 4E 05 F1 | 	add	fp, #12
17dfc     A7 26 62 FC | 	wrlong	local01, fp
17e00     0C 4E 85 F1 | 	sub	fp, #12
17e04                 | LR__1923
17e04                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
17e04     3C 4E 05 F1 | 	add	fp, #60
17e08     A7 12 02 FB | 	rdlong	arg01, fp
17e0c     3C 4E 85 F1 | 	sub	fp, #60
17e10     00 14 06 F6 | 	mov	arg02, #0
17e14     01 16 06 F6 | 	mov	arg03, #1
17e18     AC 1D B1 FD | 	call	#__system___float_cmp
17e1c     00 FA 55 F2 | 	cmps	result1, #0 wc
17e20     40 00 90 3D |  if_ae	jmp	#LR__1924
17e24     0C 4E 05 F1 | 	add	fp, #12
17e28     A7 28 02 FB | 	rdlong	local02, fp
17e2c     14 2B 02 F6 | 	mov	local03, local02
17e30     01 2A 66 F0 | 	shl	local03, #1
17e34     14 2B 02 F1 | 	add	local03, local02
17e38     03 2A 66 F0 | 	shl	local03, #3
17e3c     14 00 00 FF 
17e40     38 E5 05 F1 | 	add	objptr, ##10552
17e44     F2 2A 02 F1 | 	add	local03, objptr
17e48     15 31 02 FB | 	rdlong	local06, local03
17e4c     60 4E 05 F1 | 	add	fp, #96
17e50     A7 30 62 FC | 	wrlong	local06, fp
17e54     6C 4E 85 F1 | 	sub	fp, #108
17e58     14 00 00 FF 
17e5c     38 E5 85 F1 | 	sub	objptr, ##10552
17e60     44 00 90 FD | 	jmp	#LR__1925
17e64                 | LR__1924
17e64     3C 4E 05 F1 | 	add	fp, #60
17e68     A7 2C 02 FB | 	rdlong	local04, fp
17e6c     30 4E 05 F1 | 	add	fp, #48
17e70     A7 2C 62 FC | 	wrlong	local04, fp
17e74     60 4E 85 F1 | 	sub	fp, #96
17e78     A7 28 02 FB | 	rdlong	local02, fp
17e7c     14 2B 02 F6 | 	mov	local03, local02
17e80     01 2A 66 F0 | 	shl	local03, #1
17e84     14 2B 02 F1 | 	add	local03, local02
17e88     03 2A 66 F0 | 	shl	local03, #3
17e8c     14 00 00 FF 
17e90     38 E5 05 F1 | 	add	objptr, ##10552
17e94     F2 2A 02 F1 | 	add	local03, objptr
17e98     0C 4E 85 F1 | 	sub	fp, #12
17e9c     15 2D 62 FC | 	wrlong	local04, local03
17ea0     14 00 00 FF 
17ea4     38 E5 85 F1 | 	sub	objptr, ##10552
17ea8                 | LR__1925
17ea8                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
17ea8     40 4E 05 F1 | 	add	fp, #64
17eac     A7 12 02 FB | 	rdlong	arg01, fp
17eb0     40 4E 85 F1 | 	sub	fp, #64
17eb4     00 14 06 F6 | 	mov	arg02, #0
17eb8     01 16 06 F6 | 	mov	arg03, #1
17ebc     08 1D B1 FD | 	call	#__system___float_cmp
17ec0     00 FA 55 F2 | 	cmps	result1, #0 wc
17ec4     24 00 90 CD |  if_b	jmp	#LR__1926
17ec8     40 4E 05 F1 | 	add	fp, #64
17ecc     A7 12 02 FB | 	rdlong	arg01, fp
17ed0     40 4E 85 F1 | 	sub	fp, #64
17ed4     20 0E 23 FF 
17ed8     00 14 06 F6 | 	mov	arg02, ##1176256512
17edc     01 16 66 F6 | 	neg	arg03, #1
17ee0     E4 1C B1 FD | 	call	#__system___float_cmp
17ee4     01 FA 55 F2 | 	cmps	result1, #1 wc
17ee8     48 00 90 CD |  if_b	jmp	#LR__1927
17eec                 | LR__1926
17eec     0C 4E 05 F1 | 	add	fp, #12
17ef0     A7 2A 02 FB | 	rdlong	local03, fp
17ef4     15 33 02 F6 | 	mov	local07, local03
17ef8     01 32 66 F0 | 	shl	local07, #1
17efc     15 33 02 F1 | 	add	local07, local03
17f00     03 32 66 F0 | 	shl	local07, #3
17f04     14 00 00 FF 
17f08     38 E5 05 F1 | 	add	objptr, ##10552
17f0c     F2 32 02 F1 | 	add	local07, objptr
17f10     06 32 06 F1 | 	add	local07, #6
17f14     19 2F E2 FA | 	rdword	local05, local07
17f18     17 2D 32 F9 | 	getword	local04, local05, #0
17f1c     1C 4E 05 F1 | 	add	fp, #28
17f20     A7 2C 62 FC | 	wrlong	local04, fp
17f24     28 4E 85 F1 | 	sub	fp, #40
17f28     14 00 00 FF 
17f2c     38 E5 85 F1 | 	sub	objptr, ##10552
17f30     54 00 90 FD | 	jmp	#LR__1928
17f34                 | LR__1927
17f34     40 4E 05 F1 | 	add	fp, #64
17f38     A7 12 02 FB | 	rdlong	arg01, fp
17f3c     40 4E 85 F1 | 	sub	fp, #64
17f40     01 14 06 F6 | 	mov	arg02, #1
17f44     14 1D B1 FD | 	call	#__system___float_tointeger
17f48     28 4E 05 F1 | 	add	fp, #40
17f4c     A7 FA 61 FC | 	wrlong	result1, fp
17f50     1C 4E 85 F1 | 	sub	fp, #28
17f54     A7 28 02 FB | 	rdlong	local02, fp
17f58     14 2B 02 F6 | 	mov	local03, local02
17f5c     01 2A 66 F0 | 	shl	local03, #1
17f60     14 2B 02 F1 | 	add	local03, local02
17f64     03 2A 66 F0 | 	shl	local03, #3
17f68     14 00 00 FF 
17f6c     38 E5 05 F1 | 	add	objptr, ##10552
17f70     F2 2A 02 F1 | 	add	local03, objptr
17f74     0C 4E 85 F1 | 	sub	fp, #12
17f78     06 2A 06 F1 | 	add	local03, #6
17f7c     15 FB 51 FC | 	wrword	result1, local03
17f80     14 00 00 FF 
17f84     38 E5 85 F1 | 	sub	objptr, ##10552
17f88                 | LR__1928
17f88                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
17f88     44 4E 05 F1 | 	add	fp, #68
17f8c     A7 12 02 FB | 	rdlong	arg01, fp
17f90     44 4E 85 F1 | 	sub	fp, #68
17f94     00 14 06 F6 | 	mov	arg02, #0
17f98     01 16 06 F6 | 	mov	arg03, #1
17f9c     28 1C B1 FD | 	call	#__system___float_cmp
17fa0     00 FA 55 F2 | 	cmps	result1, #0 wc
17fa4     24 00 90 CD |  if_b	jmp	#LR__1929
17fa8     44 4E 05 F1 | 	add	fp, #68
17fac     A7 12 02 FB | 	rdlong	arg01, fp
17fb0     44 4E 85 F1 | 	sub	fp, #68
17fb4     89 C1 20 FF 
17fb8     6F 14 06 F6 | 	mov	arg02, ##1099108975
17fbc     01 16 66 F6 | 	neg	arg03, #1
17fc0     04 1C B1 FD | 	call	#__system___float_cmp
17fc4     01 FA 55 F2 | 	cmps	result1, #1 wc
17fc8     44 00 90 CD |  if_b	jmp	#LR__1930
17fcc                 | LR__1929
17fcc     0C 4E 05 F1 | 	add	fp, #12
17fd0     A7 28 02 FB | 	rdlong	local02, fp
17fd4     14 2B 02 F6 | 	mov	local03, local02
17fd8     01 2A 66 F0 | 	shl	local03, #1
17fdc     14 2B 02 F1 | 	add	local03, local02
17fe0     03 2A 66 F0 | 	shl	local03, #3
17fe4     14 00 00 FF 
17fe8     38 E5 05 F1 | 	add	objptr, ##10552
17fec     F2 2A 02 F1 | 	add	local03, objptr
17ff0     0C 2A 06 F1 | 	add	local03, #12
17ff4     15 31 02 FB | 	rdlong	local06, local03
17ff8     68 4E 05 F1 | 	add	fp, #104
17ffc     A7 30 62 FC | 	wrlong	local06, fp
18000     74 4E 85 F1 | 	sub	fp, #116
18004     14 00 00 FF 
18008     38 E5 85 F1 | 	sub	objptr, ##10552
1800c     48 00 90 FD | 	jmp	#LR__1931
18010                 | LR__1930
18010     44 4E 05 F1 | 	add	fp, #68
18014     A7 2C 02 FB | 	rdlong	local04, fp
18018     30 4E 05 F1 | 	add	fp, #48
1801c     A7 2C 62 FC | 	wrlong	local04, fp
18020     68 4E 85 F1 | 	sub	fp, #104
18024     A7 28 02 FB | 	rdlong	local02, fp
18028     14 2B 02 F6 | 	mov	local03, local02
1802c     01 2A 66 F0 | 	shl	local03, #1
18030     14 2B 02 F1 | 	add	local03, local02
18034     03 2A 66 F0 | 	shl	local03, #3
18038     14 00 00 FF 
1803c     38 E5 05 F1 | 	add	objptr, ##10552
18040     F2 2A 02 F1 | 	add	local03, objptr
18044     0C 4E 85 F1 | 	sub	fp, #12
18048     0C 2A 06 F1 | 	add	local03, #12
1804c     15 2D 62 FC | 	wrlong	local04, local03
18050     14 00 00 FF 
18054     38 E5 85 F1 | 	sub	objptr, ##10552
18058                 | LR__1931
18058                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
18058     48 4E 05 F1 | 	add	fp, #72
1805c     A7 12 02 FB | 	rdlong	arg01, fp
18060     48 4E 85 F1 | 	sub	fp, #72
18064     00 14 06 F6 | 	mov	arg02, #0
18068     01 16 06 F6 | 	mov	arg03, #1
1806c     58 1B B1 FD | 	call	#__system___float_cmp
18070     00 FA 55 F2 | 	cmps	result1, #0 wc
18074     24 00 90 CD |  if_b	jmp	#LR__1932
18078     48 4E 05 F1 | 	add	fp, #72
1807c     A7 12 02 FB | 	rdlong	arg01, fp
18080     48 4E 85 F1 | 	sub	fp, #72
18084     00 00 21 FF 
18088     00 14 06 F6 | 	mov	arg02, ##1107296256
1808c     01 16 66 F6 | 	neg	arg03, #1
18090     34 1B B1 FD | 	call	#__system___float_cmp
18094     01 FA 55 F2 | 	cmps	result1, #1 wc
18098     48 00 90 CD |  if_b	jmp	#LR__1933
1809c                 | LR__1932
1809c     0C 4E 05 F1 | 	add	fp, #12
180a0     A7 2A 02 FB | 	rdlong	local03, fp
180a4     15 33 02 F6 | 	mov	local07, local03
180a8     01 32 66 F0 | 	shl	local07, #1
180ac     15 33 02 F1 | 	add	local07, local03
180b0     03 32 66 F0 | 	shl	local07, #3
180b4     14 00 00 FF 
180b8     38 E5 05 F1 | 	add	objptr, ##10552
180bc     F2 32 02 F1 | 	add	local07, objptr
180c0     04 32 06 F1 | 	add	local07, #4
180c4     19 2F C2 FA | 	rdbyte	local05, local07
180c8     17 2D E2 F8 | 	getbyte	local04, local05, #0
180cc     14 4E 05 F1 | 	add	fp, #20
180d0     A7 2C 62 FC | 	wrlong	local04, fp
180d4     20 4E 85 F1 | 	sub	fp, #32
180d8     14 00 00 FF 
180dc     38 E5 85 F1 | 	sub	objptr, ##10552
180e0     54 00 90 FD | 	jmp	#LR__1934
180e4                 | LR__1933
180e4     48 4E 05 F1 | 	add	fp, #72
180e8     A7 12 02 FB | 	rdlong	arg01, fp
180ec     48 4E 85 F1 | 	sub	fp, #72
180f0     01 14 06 F6 | 	mov	arg02, #1
180f4     64 1B B1 FD | 	call	#__system___float_tointeger
180f8     20 4E 05 F1 | 	add	fp, #32
180fc     A7 FA 61 FC | 	wrlong	result1, fp
18100     14 4E 85 F1 | 	sub	fp, #20
18104     A7 28 02 FB | 	rdlong	local02, fp
18108     14 2B 02 F6 | 	mov	local03, local02
1810c     01 2A 66 F0 | 	shl	local03, #1
18110     14 2B 02 F1 | 	add	local03, local02
18114     03 2A 66 F0 | 	shl	local03, #3
18118     14 00 00 FF 
1811c     38 E5 05 F1 | 	add	objptr, ##10552
18120     F2 2A 02 F1 | 	add	local03, objptr
18124     0C 4E 85 F1 | 	sub	fp, #12
18128     04 2A 06 F1 | 	add	local03, #4
1812c     15 FB 41 FC | 	wrbyte	result1, local03
18130     14 00 00 FF 
18134     38 E5 85 F1 | 	sub	objptr, ##10552
18138                 | LR__1934
18138                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
18138     4C 4E 05 F1 | 	add	fp, #76
1813c     A7 12 02 FB | 	rdlong	arg01, fp
18140     4C 4E 85 F1 | 	sub	fp, #76
18144     00 14 06 F6 | 	mov	arg02, #0
18148     01 16 06 F6 | 	mov	arg03, #1
1814c     78 1A B1 FD | 	call	#__system___float_cmp
18150     00 FA 55 F2 | 	cmps	result1, #0 wc
18154     24 00 90 CD |  if_b	jmp	#LR__1935
18158     4C 4E 05 F1 | 	add	fp, #76
1815c     A7 12 02 FB | 	rdlong	arg01, fp
18160     4C 4E 85 F1 | 	sub	fp, #76
18164     00 80 20 FF 
18168     00 14 06 F6 | 	mov	arg02, ##1090519040
1816c     01 16 66 F6 | 	neg	arg03, #1
18170     54 1A B1 FD | 	call	#__system___float_cmp
18174     01 FA 55 F2 | 	cmps	result1, #1 wc
18178     48 00 90 CD |  if_b	jmp	#LR__1936
1817c                 | LR__1935
1817c     0C 4E 05 F1 | 	add	fp, #12
18180     A7 2A 02 FB | 	rdlong	local03, fp
18184     15 33 02 F6 | 	mov	local07, local03
18188     01 32 66 F0 | 	shl	local07, #1
1818c     15 33 02 F1 | 	add	local07, local03
18190     03 32 66 F0 | 	shl	local07, #3
18194     14 00 00 FF 
18198     38 E5 05 F1 | 	add	objptr, ##10552
1819c     F2 32 02 F1 | 	add	local07, objptr
181a0     05 32 06 F1 | 	add	local07, #5
181a4     19 2F C2 FA | 	rdbyte	local05, local07
181a8     17 2D E2 F8 | 	getbyte	local04, local05, #0
181ac     18 4E 05 F1 | 	add	fp, #24
181b0     A7 2C 62 FC | 	wrlong	local04, fp
181b4     24 4E 85 F1 | 	sub	fp, #36
181b8     14 00 00 FF 
181bc     38 E5 85 F1 | 	sub	objptr, ##10552
181c0     54 00 90 FD | 	jmp	#LR__1937
181c4                 | LR__1936
181c4     4C 4E 05 F1 | 	add	fp, #76
181c8     A7 12 02 FB | 	rdlong	arg01, fp
181cc     4C 4E 85 F1 | 	sub	fp, #76
181d0     01 14 06 F6 | 	mov	arg02, #1
181d4     84 1A B1 FD | 	call	#__system___float_tointeger
181d8     24 4E 05 F1 | 	add	fp, #36
181dc     A7 FA 61 FC | 	wrlong	result1, fp
181e0     18 4E 85 F1 | 	sub	fp, #24
181e4     A7 28 02 FB | 	rdlong	local02, fp
181e8     14 2B 02 F6 | 	mov	local03, local02
181ec     01 2A 66 F0 | 	shl	local03, #1
181f0     14 2B 02 F1 | 	add	local03, local02
181f4     03 2A 66 F0 | 	shl	local03, #3
181f8     14 00 00 FF 
181fc     38 E5 05 F1 | 	add	objptr, ##10552
18200     F2 2A 02 F1 | 	add	local03, objptr
18204     0C 4E 85 F1 | 	sub	fp, #12
18208     05 2A 06 F1 | 	add	local03, #5
1820c     15 FB 41 FC | 	wrbyte	result1, local03
18210     14 00 00 FF 
18214     38 E5 85 F1 | 	sub	objptr, ##10552
18218                 | LR__1937
18218                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
18218     50 4E 05 F1 | 	add	fp, #80
1821c     A7 12 02 FB | 	rdlong	arg01, fp
18220     50 4E 85 F1 | 	sub	fp, #80
18224     00 14 06 F6 | 	mov	arg02, #0
18228     01 16 06 F6 | 	mov	arg03, #1
1822c     98 19 B1 FD | 	call	#__system___float_cmp
18230     00 FA 55 F2 | 	cmps	result1, #0 wc
18234     24 00 90 CD |  if_b	jmp	#LR__1938
18238     50 4E 05 F1 | 	add	fp, #80
1823c     A7 12 02 FB | 	rdlong	arg01, fp
18240     50 4E 85 F1 | 	sub	fp, #80
18244     00 3D 22 FF 
18248     00 14 06 F6 | 	mov	arg02, ##1148846080
1824c     01 16 66 F6 | 	neg	arg03, #1
18250     74 19 B1 FD | 	call	#__system___float_cmp
18254     01 FA 55 F2 | 	cmps	result1, #1 wc
18258     44 00 90 CD |  if_b	jmp	#LR__1939
1825c                 | LR__1938
1825c     0C 4E 05 F1 | 	add	fp, #12
18260     A7 28 02 FB | 	rdlong	local02, fp
18264     14 2B 02 F6 | 	mov	local03, local02
18268     01 2A 66 F0 | 	shl	local03, #1
1826c     14 2B 02 F1 | 	add	local03, local02
18270     03 2A 66 F0 | 	shl	local03, #3
18274     14 00 00 FF 
18278     38 E5 05 F1 | 	add	objptr, ##10552
1827c     F2 2A 02 F1 | 	add	local03, objptr
18280     08 2A 06 F1 | 	add	local03, #8
18284     15 31 02 FB | 	rdlong	local06, local03
18288     6C 4E 05 F1 | 	add	fp, #108
1828c     A7 30 62 FC | 	wrlong	local06, fp
18290     78 4E 85 F1 | 	sub	fp, #120
18294     14 00 00 FF 
18298     38 E5 85 F1 | 	sub	objptr, ##10552
1829c     48 00 90 FD | 	jmp	#LR__1940
182a0                 | LR__1939
182a0     50 4E 05 F1 | 	add	fp, #80
182a4     A7 30 02 FB | 	rdlong	local06, fp
182a8     28 4E 05 F1 | 	add	fp, #40
182ac     A7 30 62 FC | 	wrlong	local06, fp
182b0     6C 4E 85 F1 | 	sub	fp, #108
182b4     A7 28 02 FB | 	rdlong	local02, fp
182b8     14 2B 02 F6 | 	mov	local03, local02
182bc     01 2A 66 F0 | 	shl	local03, #1
182c0     14 2B 02 F1 | 	add	local03, local02
182c4     03 2A 66 F0 | 	shl	local03, #3
182c8     14 00 00 FF 
182cc     38 E5 05 F1 | 	add	objptr, ##10552
182d0     F2 2A 02 F1 | 	add	local03, objptr
182d4     0C 4E 85 F1 | 	sub	fp, #12
182d8     08 2A 06 F1 | 	add	local03, #8
182dc     15 31 62 FC | 	wrlong	local06, local03
182e0     14 00 00 FF 
182e4     38 E5 85 F1 | 	sub	objptr, ##10552
182e8                 | LR__1940
182e8                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
182e8     54 4E 05 F1 | 	add	fp, #84
182ec     A7 12 02 FB | 	rdlong	arg01, fp
182f0     54 4E 85 F1 | 	sub	fp, #84
182f4     00 C0 5F FF 
182f8     00 14 06 F6 | 	mov	arg02, ##-1082130432
182fc     01 16 06 F6 | 	mov	arg03, #1
18300     C4 18 B1 FD | 	call	#__system___float_cmp
18304     00 FA 55 F2 | 	cmps	result1, #0 wc
18308     24 00 90 CD |  if_b	jmp	#LR__1941
1830c     54 4E 05 F1 | 	add	fp, #84
18310     A7 12 02 FB | 	rdlong	arg01, fp
18314     54 4E 85 F1 | 	sub	fp, #84
18318     00 C0 1F FF 
1831c     00 14 06 F6 | 	mov	arg02, ##1065353216
18320     01 16 66 F6 | 	neg	arg03, #1
18324     A0 18 B1 FD | 	call	#__system___float_cmp
18328     01 FA 55 F2 | 	cmps	result1, #1 wc
1832c     44 00 90 CD |  if_b	jmp	#LR__1942
18330                 | LR__1941
18330     0C 4E 05 F1 | 	add	fp, #12
18334     A7 28 02 FB | 	rdlong	local02, fp
18338     14 2B 02 F6 | 	mov	local03, local02
1833c     01 2A 66 F0 | 	shl	local03, #1
18340     14 2B 02 F1 | 	add	local03, local02
18344     03 2A 66 F0 | 	shl	local03, #3
18348     14 00 00 FF 
1834c     38 E5 05 F1 | 	add	objptr, ##10552
18350     F2 2A 02 F1 | 	add	local03, objptr
18354     10 2A 06 F1 | 	add	local03, #16
18358     15 31 02 FB | 	rdlong	local06, local03
1835c     64 4E 05 F1 | 	add	fp, #100
18360     A7 30 62 FC | 	wrlong	local06, fp
18364     70 4E 85 F1 | 	sub	fp, #112
18368     14 00 00 FF 
1836c     38 E5 85 F1 | 	sub	objptr, ##10552
18370     48 00 90 FD | 	jmp	#LR__1943
18374                 | LR__1942
18374     54 4E 05 F1 | 	add	fp, #84
18378     A7 30 02 FB | 	rdlong	local06, fp
1837c     1C 4E 05 F1 | 	add	fp, #28
18380     A7 30 62 FC | 	wrlong	local06, fp
18384     64 4E 85 F1 | 	sub	fp, #100
18388     A7 28 02 FB | 	rdlong	local02, fp
1838c     14 2B 02 F6 | 	mov	local03, local02
18390     01 2A 66 F0 | 	shl	local03, #1
18394     14 2B 02 F1 | 	add	local03, local02
18398     03 2A 66 F0 | 	shl	local03, #3
1839c     14 00 00 FF 
183a0     38 E5 05 F1 | 	add	objptr, ##10552
183a4     F2 2A 02 F1 | 	add	local03, objptr
183a8     0C 4E 85 F1 | 	sub	fp, #12
183ac     10 2A 06 F1 | 	add	local03, #16
183b0     15 31 62 FC | 	wrlong	local06, local03
183b4     14 00 00 FF 
183b8     38 E5 85 F1 | 	sub	objptr, ##10552
183bc                 | LR__1943
183bc                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
183bc     58 4E 05 F1 | 	add	fp, #88
183c0     A7 12 02 FB | 	rdlong	arg01, fp
183c4     58 4E 85 F1 | 	sub	fp, #88
183c8     00 14 06 F6 | 	mov	arg02, #0
183cc     01 16 06 F6 | 	mov	arg03, #1
183d0     F4 17 B1 FD | 	call	#__system___float_cmp
183d4     00 FA 55 F2 | 	cmps	result1, #0 wc
183d8     24 00 90 CD |  if_b	jmp	#LR__1944
183dc     58 4E 05 F1 | 	add	fp, #88
183e0     A7 12 02 FB | 	rdlong	arg01, fp
183e4     58 4E 85 F1 | 	sub	fp, #88
183e8     80 BF 21 FF 
183ec     00 14 06 F6 | 	mov	arg02, ##1132396544
183f0     01 16 66 F6 | 	neg	arg03, #1
183f4     D0 17 B1 FD | 	call	#__system___float_cmp
183f8     01 FA 55 F2 | 	cmps	result1, #1 wc
183fc     44 00 90 CD |  if_b	jmp	#LR__1945
18400                 | LR__1944
18400     0C 4E 05 F1 | 	add	fp, #12
18404     A7 2A 02 FB | 	rdlong	local03, fp
18408     15 33 02 F6 | 	mov	local07, local03
1840c     01 32 66 F0 | 	shl	local07, #1
18410     15 33 02 F1 | 	add	local07, local03
18414     03 32 66 F0 | 	shl	local07, #3
18418     14 00 00 FF 
1841c     38 E5 05 F1 | 	add	objptr, ##10552
18420     F2 32 02 F1 | 	add	local07, objptr
18424     14 32 06 F1 | 	add	local07, #20
18428     19 2D E2 FA | 	rdword	local04, local07
1842c     20 4E 05 F1 | 	add	fp, #32
18430     A7 2C 62 FC | 	wrlong	local04, fp
18434     2C 4E 85 F1 | 	sub	fp, #44
18438     14 00 00 FF 
1843c     38 E5 85 F1 | 	sub	objptr, ##10552
18440     54 00 90 FD | 	jmp	#LR__1946
18444                 | LR__1945
18444     58 4E 05 F1 | 	add	fp, #88
18448     A7 12 02 FB | 	rdlong	arg01, fp
1844c     58 4E 85 F1 | 	sub	fp, #88
18450     01 14 06 F6 | 	mov	arg02, #1
18454     04 18 B1 FD | 	call	#__system___float_tointeger
18458     2C 4E 05 F1 | 	add	fp, #44
1845c     A7 FA 61 FC | 	wrlong	result1, fp
18460     20 4E 85 F1 | 	sub	fp, #32
18464     A7 28 02 FB | 	rdlong	local02, fp
18468     14 2B 02 F6 | 	mov	local03, local02
1846c     01 2A 66 F0 | 	shl	local03, #1
18470     14 2B 02 F1 | 	add	local03, local02
18474     03 2A 66 F0 | 	shl	local03, #3
18478     14 00 00 FF 
1847c     38 E5 05 F1 | 	add	objptr, ##10552
18480     F2 2A 02 F1 | 	add	local03, objptr
18484     0C 4E 85 F1 | 	sub	fp, #12
18488     14 2A 06 F1 | 	add	local03, #20
1848c     15 FB 51 FC | 	wrword	result1, local03
18490     14 00 00 FF 
18494     38 E5 85 F1 | 	sub	objptr, ##10552
18498                 | LR__1946
18498     6C 4E 05 F1 | 	add	fp, #108
1849c     A7 14 02 FB | 	rdlong	arg02, fp
184a0     6C 4E 85 F1 | 	sub	fp, #108
184a4     FC 16 20 FF 
184a8     54 12 06 F6 | 	mov	arg01, ##1076754516
184ac     B4 22 B1 FD | 	call	#__system____builtin_logbase
184b0     FD 2C 02 F6 | 	mov	local04, result1
184b4     1E 14 C6 F9 | 	decod	arg02, #30
184b8     FC 16 20 FF 
184bc     54 12 06 F6 | 	mov	arg01, ##1076754516
184c0     A0 22 B1 FD | 	call	#__system____builtin_logbase
184c4     FD 14 02 F6 | 	mov	arg02, result1
184c8     16 13 02 F6 | 	mov	arg01, local04
184cc     C8 14 B1 FD | 	call	#__system___float_div
184d0     FD 12 02 F6 | 	mov	arg01, result1
184d4     00 14 06 F6 | 	mov	arg02, #0
184d8     80 17 B1 FD | 	call	#__system___float_tointeger
184dc     30 4E 05 F1 | 	add	fp, #48
184e0     A7 FA 61 FC | 	wrlong	result1, fp
184e4     1E 2C C6 F9 | 	decod	local04, #30
184e8     FD 12 02 F6 | 	mov	arg01, result1
184ec     30 4E 85 F1 | 	sub	fp, #48
184f0     05 12 06 F1 | 	add	arg01, #5
184f4     09 13 52 F6 | 	abs	arg01, arg01 wc
184f8     1F 34 C6 C9 |  if_b	decod	local08, #31
184fc     00 34 06 36 |  if_ae	mov	local08, #0
18500     8C 0E B1 FD | 	call	#__system___float_fromuns
18504     1A FB 61 F5 | 	xor	result1, local08
18508     FD 14 02 F6 | 	mov	arg02, result1
1850c     16 13 02 F6 | 	mov	arg01, local04
18510     88 21 B1 FD | 	call	#__system____builtin_powf
18514     FD 12 02 F6 | 	mov	arg01, result1
18518     01 14 06 F6 | 	mov	arg02, #1
1851c     3C 17 B1 FD | 	call	#__system___float_tointeger
18520     10 4E 05 F1 | 	add	fp, #16
18524     A7 FA 61 FC | 	wrlong	result1, fp
18528                 | ' skip=round(2^(lfreq+5))
18528                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
18528     10 4E 85 F1 | 	sub	fp, #16
1852c     40 00 00 FF 
18530     01 FA 55 F2 | 	cmps	result1, ##32769 wc
18534     30 00 90 CD |  if_b	jmp	#LR__1947
18538     10 4E 05 F1 | 	add	fp, #16
1853c     A7 26 02 FB | 	rdlong	local01, fp
18540     13 2D 52 F6 | 	abs	local04, local01 wc
18544     0F 2C 46 F0 | 	shr	local04, #15
18548     16 2D 82 F6 | 	negc	local04, local04
1854c     0C 4E 85 F1 | 	sub	fp, #12
18550     A7 2C 62 FC | 	wrlong	local04, fp
18554     0C 4E 05 F1 | 	add	fp, #12
18558     40 00 80 FF 
1855c     A7 00 68 FC | 	wrlong	##32768, fp
18560     10 4E 85 F1 | 	sub	fp, #16
18564     0C 00 90 FD | 	jmp	#LR__1948
18568                 | LR__1947
18568     04 4E 05 F1 | 	add	fp, #4
1856c     A7 02 68 FC | 	wrlong	#1, fp
18570     04 4E 85 F1 | 	sub	fp, #4
18574                 | LR__1948
18574     6C 4E 05 F1 | 	add	fp, #108
18578     A7 14 02 FB | 	rdlong	arg02, fp
1857c     6C 4E 85 F1 | 	sub	fp, #108
18580     3E 2C 25 FF 
18584     3C 12 06 F6 | 	mov	arg01, ##1247312956
18588     0C 14 B1 FD | 	call	#__system___float_div
1858c     FD 2C 02 F6 | 	mov	local04, result1
18590     04 4E 05 F1 | 	add	fp, #4
18594     A7 12 02 FB | 	rdlong	arg01, fp
18598     04 4E 85 F1 | 	sub	fp, #4
1859c     09 13 52 F6 | 	abs	arg01, arg01 wc
185a0     1F 34 C6 C9 |  if_b	decod	local08, #31
185a4     00 34 06 36 |  if_ae	mov	local08, #0
185a8     E4 0D B1 FD | 	call	#__system___float_fromuns
185ac     1A FB 61 F5 | 	xor	result1, local08
185b0     FD 26 02 F6 | 	mov	local01, result1
185b4     1E 28 C6 F9 | 	decod	local02, #30
185b8     0D 12 06 F6 | 	mov	arg01, #13
185bc     30 4E 05 F1 | 	add	fp, #48
185c0     A7 30 02 FB | 	rdlong	local06, fp
185c4     30 4E 85 F1 | 	sub	fp, #48
185c8     18 13 82 F1 | 	sub	arg01, local06
185cc     09 13 52 F6 | 	abs	arg01, arg01 wc
185d0     1F 34 C6 C9 |  if_b	decod	local08, #31
185d4     00 34 06 36 |  if_ae	mov	local08, #0
185d8     B4 0D B1 FD | 	call	#__system___float_fromuns
185dc     1A FB 61 F5 | 	xor	result1, local08
185e0     FD 14 02 F6 | 	mov	arg02, result1
185e4     14 13 02 F6 | 	mov	arg01, local02
185e8     B0 20 B1 FD | 	call	#__system____builtin_powf
185ec     FD 14 02 F6 | 	mov	arg02, result1
185f0     13 13 02 F6 | 	mov	arg01, local01
185f4     9C 11 B1 FD | 	call	#__system___float_mul
185f8     FD 14 02 F6 | 	mov	arg02, result1
185fc     16 13 02 F6 | 	mov	arg01, local04
18600     94 13 B1 FD | 	call	#__system___float_div
18604     FD 12 02 F6 | 	mov	arg01, result1
18608     01 14 06 F6 | 	mov	arg02, #1
1860c     4C 16 B1 FD | 	call	#__system___float_tointeger
18610     34 4E 05 F1 | 	add	fp, #52
18614     A7 FA 61 FC | 	wrlong	result1, fp
18618     34 4E 05 F1 | 	add	fp, #52
1861c     A7 12 02 FB | 	rdlong	arg01, fp
18620     10 4E 05 F1 | 	add	fp, #16
18624     A7 14 02 FB | 	rdlong	arg02, fp
18628     78 4E 85 F1 | 	sub	fp, #120
1862c     68 13 B1 FD | 	call	#__system___float_div
18630     FD 12 02 F6 | 	mov	arg01, result1
18634     01 14 06 F6 | 	mov	arg02, #1
18638     20 16 B1 FD | 	call	#__system___float_tointeger
1863c     FD 2C 02 F6 | 	mov	local04, result1
18640     14 4E 05 F1 | 	add	fp, #20
18644     A7 2C 62 FC | 	wrlong	local04, fp
18648     5C 4E 05 F1 | 	add	fp, #92
1864c     A7 14 02 FB | 	rdlong	arg02, fp
18650     70 4E 85 F1 | 	sub	fp, #112
18654     00 00 23 FF 
18658     00 12 06 F6 | 	mov	arg01, ##1174405120
1865c     34 11 B1 FD | 	call	#__system___float_mul
18660     FD 12 02 F6 | 	mov	arg01, result1
18664     01 14 06 F6 | 	mov	arg02, #1
18668     F0 15 B1 FD | 	call	#__system___float_tointeger
1866c     0D 2C C6 F9 | 	decod	local04, #13
18670     FD 2C 02 F1 | 	add	local04, result1
18674     18 4E 05 F1 | 	add	fp, #24
18678     A7 2C 62 FC | 	wrlong	local04, fp
1867c     5C 4E 05 F1 | 	add	fp, #92
18680     A7 14 02 FB | 	rdlong	arg02, fp
18684     74 4E 85 F1 | 	sub	fp, #116
18688     00 3D 22 FF 
1868c     00 12 06 F6 | 	mov	arg01, ##1148846080
18690     00 11 B1 FD | 	call	#__system___float_mul
18694     FD 12 02 F6 | 	mov	arg01, result1
18698     01 14 06 F6 | 	mov	arg02, #1
1869c     BC 15 B1 FD | 	call	#__system___float_tointeger
186a0     1C 4E 05 F1 | 	add	fp, #28
186a4     A7 FA 61 FC | 	wrlong	result1, fp
186a8     37 00 00 FF 
186ac     10 E4 05 F1 | 	add	objptr, ##28176
186b0     F2 2C 02 FB | 	rdlong	local04, objptr
186b4     37 00 00 FF 
186b8     10 E4 85 F1 | 	sub	objptr, ##28176
186bc     10 4E 85 F1 | 	sub	fp, #16
186c0     A7 28 02 FB | 	rdlong	local02, fp
186c4     06 28 66 F0 | 	shl	local02, #6
186c8     14 2D 02 F1 | 	add	local04, local02
186cc     04 4E 85 F1 | 	sub	fp, #4
186d0     A7 2C 62 FC | 	wrlong	local04, fp
186d4                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
186d4                 | ' speed=round(speed_coeff/slen)
186d4                 | ' ipan=8192+round(8192*pan)
186d4                 | ' ivol=round(1000.0*vol)
186d4                 | ' base2=base+64*channel
186d4                 | ' if wave <32 then 
186d4     18 4E 05 F1 | 	add	fp, #24
186d8     A7 2C 02 FB | 	rdlong	local04, fp
186dc     20 4E 85 F1 | 	sub	fp, #32
186e0     20 2C 56 F2 | 	cmps	local04, #32 wc
186e4     2C 00 90 3D |  if_ae	jmp	#LR__1949
186e8     08 4E 05 F1 | 	add	fp, #8
186ec     A7 12 02 FB | 	rdlong	arg01, fp
186f0     08 12 06 F1 | 	add	arg01, #8
186f4     18 4E 05 F1 | 	add	fp, #24
186f8     A7 14 02 FB | 	rdlong	arg02, fp
186fc     20 4E 85 F1 | 	sub	fp, #32
18700     0B 14 66 F0 | 	shl	arg02, #11
18704     00 00 60 FF 
18708     00 14 06 F1 | 	add	arg02, ##-1073741824
1870c     09 15 62 FC | 	wrlong	arg02, arg01
18710     18 00 90 FD | 	jmp	#LR__1950
18714                 | LR__1949
18714     08 4E 05 F1 | 	add	fp, #8
18718     A7 12 02 FB | 	rdlong	arg01, fp
1871c     08 4E 85 F1 | 	sub	fp, #8
18720     08 12 06 F1 | 	add	arg01, #8
18724     00 00 E4 FF 
18728     09 01 68 FC | 	wrlong	##-939524096, arg01
1872c                 | LR__1950
1872c     08 4E 05 F1 | 	add	fp, #8
18730     A7 12 02 FB | 	rdlong	arg01, fp
18734     10 12 06 F1 | 	add	arg01, #16
18738     04 00 80 FF 
1873c     09 01 68 FC | 	wrlong	##2048, arg01
18740     A7 12 02 FB | 	rdlong	arg01, fp
18744     0C 12 06 F1 | 	add	arg01, #12
18748     09 01 68 FC | 	wrlong	#0, arg01
1874c     A7 12 02 FB | 	rdlong	arg01, fp
18750     14 12 06 F1 | 	add	arg01, #20
18754     14 4E 05 F1 | 	add	fp, #20
18758     A7 14 02 FB | 	rdlong	arg02, fp
1875c     09 15 52 FC | 	wrword	arg02, arg01
18760     14 4E 85 F1 | 	sub	fp, #20
18764     A7 12 02 FB | 	rdlong	arg01, fp
18768     16 12 06 F1 | 	add	arg01, #22
1876c     10 4E 05 F1 | 	add	fp, #16
18770     A7 14 02 FB | 	rdlong	arg02, fp
18774     09 15 52 FC | 	wrword	arg02, arg01
18778                 | ' lpoke base2+16,2048
18778                 | ' lpoke base2+12,0
18778                 | ' dpoke base2+20,ivol 
18778                 | ' dpoke base2+22,ipan 
18778                 | ' if wave<32 then
18778     08 4E 05 F1 | 	add	fp, #8
1877c     A7 2C 02 FB | 	rdlong	local04, fp
18780     20 4E 85 F1 | 	sub	fp, #32
18784     20 2C 56 F2 | 	cmps	local04, #32 wc
18788     38 00 90 3D |  if_ae	jmp	#LR__1951
1878c     08 4E 05 F1 | 	add	fp, #8
18790     A7 12 02 FB | 	rdlong	arg01, fp
18794     18 12 06 F1 | 	add	arg01, #24
18798     2C 4E 05 F1 | 	add	fp, #44
1879c     A7 14 02 FB | 	rdlong	arg02, fp
187a0     09 15 52 FC | 	wrword	arg02, arg01
187a4     2C 4E 85 F1 | 	sub	fp, #44
187a8     A7 12 02 FB | 	rdlong	arg01, fp
187ac     1A 12 06 F1 | 	add	arg01, #26
187b0     08 4E 05 F1 | 	add	fp, #8
187b4     A7 14 02 FB | 	rdlong	arg02, fp
187b8     10 4E 85 F1 | 	sub	fp, #16
187bc     09 15 52 FC | 	wrword	arg02, arg01
187c0     48 00 90 FD | 	jmp	#LR__1952
187c4                 | LR__1951
187c4     08 4E 05 F1 | 	add	fp, #8
187c8     A7 2C 02 FB | 	rdlong	local04, fp
187cc     18 2C 06 F1 | 	add	local04, #24
187d0     64 4E 05 F1 | 	add	fp, #100
187d4     A7 14 02 FB | 	rdlong	arg02, fp
187d8     6C 4E 85 F1 | 	sub	fp, #108
187dc     3E 2C 25 FF 
187e0     3C 12 06 F6 | 	mov	arg01, ##1247312956
187e4     B0 11 B1 FD | 	call	#__system___float_div
187e8     FD 12 02 F6 | 	mov	arg01, result1
187ec     01 14 06 F6 | 	mov	arg02, #1
187f0     68 14 B1 FD | 	call	#__system___float_tointeger
187f4     16 FB 51 FC | 	wrword	result1, local04
187f8     08 4E 05 F1 | 	add	fp, #8
187fc     A7 12 02 FB | 	rdlong	arg01, fp
18800     08 4E 85 F1 | 	sub	fp, #8
18804     1A 12 06 F1 | 	add	arg01, #26
18808     09 01 5A FC | 	wrword	#256, arg01
1880c                 | LR__1952
1880c     08 4E 05 F1 | 	add	fp, #8
18810     A7 12 02 FB | 	rdlong	arg01, fp
18814     1C 12 06 F1 | 	add	arg01, #28
18818     09 01 68 FC | 	wrlong	#0, arg01
1881c     A7 12 02 FB | 	rdlong	arg01, fp
18820     20 12 06 F1 | 	add	arg01, #32
18824     09 01 68 FC | 	wrlong	#0, arg01
18828                 | ' lpoke base2+28,$0000_0000
18828                 | ' lpoke base2+32,0 
18828                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
18828     1C 4E 05 F1 | 	add	fp, #28
1882c     A7 2C 02 FB | 	rdlong	local04, fp
18830     24 4E 85 F1 | 	sub	fp, #36
18834     08 2C 0E F2 | 	cmp	local04, #8 wz
18838     18 00 90 5D |  if_ne	jmp	#LR__1953
1883c     08 4E 05 F1 | 	add	fp, #8
18840     A7 12 02 FB | 	rdlong	arg01, fp
18844     08 4E 85 F1 | 	sub	fp, #8
18848     24 12 06 F1 | 	add	arg01, #36
1884c     09 01 68 FC | 	wrlong	#0, arg01
18850     34 00 90 FD | 	jmp	#LR__1954
18854                 | LR__1953
18854     08 4E 05 F1 | 	add	fp, #8
18858     A7 12 02 FB | 	rdlong	arg01, fp
1885c     24 12 06 F1 | 	add	arg01, #36
18860     1C 4E 05 F1 | 	add	fp, #28
18864     A7 14 02 FB | 	rdlong	arg02, fp
18868     24 4E 85 F1 | 	sub	fp, #36
1886c     09 14 66 F0 | 	shl	arg02, #9
18870     0C 00 00 FF 
18874     D8 E4 05 F1 | 	add	objptr, ##6360
18878     F2 14 02 F1 | 	add	arg02, objptr
1887c     0C 00 00 FF 
18880     D8 E4 85 F1 | 	sub	objptr, ##6360
18884     09 15 62 FC | 	wrlong	arg02, arg01
18888                 | LR__1954
18888     08 4E 05 F1 | 	add	fp, #8
1888c     A7 12 02 FB | 	rdlong	arg01, fp
18890     28 12 06 F1 | 	add	arg01, #40
18894     0C 4E 05 F1 | 	add	fp, #12
18898     A7 14 02 FB | 	rdlong	arg02, fp
1889c     09 15 62 FC | 	wrlong	arg02, arg01
188a0     0C 4E 85 F1 | 	sub	fp, #12
188a4     A7 12 02 FB | 	rdlong	arg01, fp
188a8     2C 12 06 F1 | 	add	arg01, #44
188ac     24 4E 05 F1 | 	add	fp, #36
188b0     A7 14 02 FB | 	rdlong	arg02, fp
188b4     09 15 62 FC | 	wrlong	arg02, arg01
188b8                 | ' lpoke base2+40,speed 
188b8                 | ' lpoke base2+44,sus 
188b8                 | ' if delay>0 then waitms(delay) 
188b8     04 4E 85 F1 | 	sub	fp, #4
188bc     A7 2C 02 FB | 	rdlong	local04, fp
188c0     28 4E 85 F1 | 	sub	fp, #40
188c4     01 2C 56 F2 | 	cmps	local04, #1 wc
188c8     28 4E 05 31 |  if_ae	add	fp, #40
188cc     A7 12 02 3B |  if_ae	rdlong	arg01, fp
188d0     28 4E 85 31 |  if_ae	sub	fp, #40
188d4     34 E3 B0 3D |  if_ae	call	#__system___waitms
188d8     A7 F0 03 F6 | 	mov	ptra, fp
188dc     B2 00 A0 FD | 	call	#popregs_
188e0                 | _do_play_ret
188e0     2D 00 64 FD | 	ret
188e4                 | 
188e4                 | ' 
188e4                 | ' '-------------------- plot
188e4                 | ' 
188e4                 | ' sub do_plot
188e4                 | _do_plot
188e4     00 4A 05 F6 | 	mov	COUNT_, #0
188e8     A8 00 A0 FD | 	call	#pushregs_
188ec     20 F0 07 F1 | 	add	ptra, #32
188f0     94 4C BF FD | 	call	#_pop
188f4     FD 16 02 F6 | 	mov	arg03, result1
188f8     FE 14 02 F6 | 	mov	arg02, result2
188fc     FF 12 02 F6 | 	mov	arg01, result3
18900     0C 4E 05 F1 | 	add	fp, #12
18904     A7 16 62 FC | 	wrlong	arg03, fp
18908     04 4E 05 F1 | 	add	fp, #4
1890c     A7 14 62 FC | 	wrlong	arg02, fp
18910     04 4E 05 F1 | 	add	fp, #4
18914     A7 12 62 FC | 	wrlong	arg01, fp
18918     14 4E 85 F1 | 	sub	fp, #20
1891c     68 4C BF FD | 	call	#_pop
18920     FF 16 02 F6 | 	mov	arg03, result3
18924     A7 FA 61 FC | 	wrlong	result1, fp
18928     04 4E 05 F1 | 	add	fp, #4
1892c     A7 FC 61 FC | 	wrlong	result2, fp
18930     04 4E 05 F1 | 	add	fp, #4
18934     A7 16 62 FC | 	wrlong	arg03, fp
18938     08 4E 85 F1 | 	sub	fp, #8
1893c     A7 12 02 F6 | 	mov	arg01, fp
18940     28 4E BF FD | 	call	#_converttoint
18944     18 4E 05 F1 | 	add	fp, #24
18948     A7 FA 61 FC | 	wrlong	result1, fp
1894c     0C 4E 85 F1 | 	sub	fp, #12
18950     A7 12 02 F6 | 	mov	arg01, fp
18954     0C 4E 85 F1 | 	sub	fp, #12
18958     10 4E BF FD | 	call	#_converttoint
1895c     1C 4E 05 F1 | 	add	fp, #28
18960     A7 FA 61 FC | 	wrlong	result1, fp
18964     04 4E 85 F1 | 	sub	fp, #4
18968     A7 16 02 FB | 	rdlong	arg03, fp
1896c     37 00 00 FF 
18970     2C E4 05 F1 | 	add	objptr, ##28204
18974     F2 16 62 FC | 	wrlong	arg03, objptr
18978     04 4E 05 F1 | 	add	fp, #4
1897c     A7 14 02 FB | 	rdlong	arg02, fp
18980     1C 4E 85 F1 | 	sub	fp, #28
18984     04 E4 05 F1 | 	add	objptr, #4
18988     F2 14 62 FC | 	wrlong	arg02, objptr
1898c     04 E4 85 F1 | 	sub	objptr, #4
18990     F2 12 02 FB | 	rdlong	arg01, objptr
18994     04 E4 85 F1 | 	sub	objptr, #4
18998     F2 16 02 FB | 	rdlong	arg03, objptr
1899c     37 00 00 FF 
189a0     28 E4 85 F1 | 	sub	objptr, ##28200
189a4     18 B6 B0 FD | 	call	#_hg010b_spin2_putpixel
189a8     A7 F0 03 F6 | 	mov	ptra, fp
189ac     B2 00 A0 FD | 	call	#popregs_
189b0                 | _do_plot_ret
189b0     2D 00 64 FD | 	ret
189b4                 | 
189b4                 | ' 
189b4                 | ' '-------------------- poke
189b4                 | ' 
189b4                 | ' sub do_poke
189b4                 | _do_poke
189b4     01 4A 05 F6 | 	mov	COUNT_, #1
189b8     A8 00 A0 FD | 	call	#pushregs_
189bc     20 F0 07 F1 | 	add	ptra, #32
189c0     C4 4B BF FD | 	call	#_pop
189c4     FD 14 02 F6 | 	mov	arg02, result1
189c8     FE 12 02 F6 | 	mov	arg01, result2
189cc     FF 26 02 F6 | 	mov	local01, result3
189d0     A7 14 62 FC | 	wrlong	arg02, fp
189d4     04 4E 05 F1 | 	add	fp, #4
189d8     A7 12 62 FC | 	wrlong	arg01, fp
189dc     04 4E 05 F1 | 	add	fp, #4
189e0     A7 26 62 FC | 	wrlong	local01, fp
189e4     08 4E 85 F1 | 	sub	fp, #8
189e8     9C 4B BF FD | 	call	#_pop
189ec     FF 26 02 F6 | 	mov	local01, result3
189f0     0C 4E 05 F1 | 	add	fp, #12
189f4     A7 FA 61 FC | 	wrlong	result1, fp
189f8     04 4E 05 F1 | 	add	fp, #4
189fc     A7 FC 61 FC | 	wrlong	result2, fp
18a00     04 4E 05 F1 | 	add	fp, #4
18a04     A7 26 62 FC | 	wrlong	local01, fp
18a08     08 4E 85 F1 | 	sub	fp, #8
18a0c     A7 12 02 F6 | 	mov	arg01, fp
18a10     0C 4E 85 F1 | 	sub	fp, #12
18a14     54 4D BF FD | 	call	#_converttoint
18a18     18 4E 05 F1 | 	add	fp, #24
18a1c     A7 FA 61 FC | 	wrlong	result1, fp
18a20     18 4E 85 F1 | 	sub	fp, #24
18a24     A7 12 02 F6 | 	mov	arg01, fp
18a28     40 4D BF FD | 	call	#_converttoint
18a2c     1C 4E 05 F1 | 	add	fp, #28
18a30     A7 FA 61 FC | 	wrlong	result1, fp
18a34                 | ' t1=pop() 'value
18a34                 | ' t2=pop() 
18a34                 | ' a=converttoint(t2) : v=converttoint(t1)
18a34                 | ' if a<$80000 then poke a,v else pspoke a,v
18a34     04 4E 85 F1 | 	sub	fp, #4
18a38     A7 26 02 FB | 	rdlong	local01, fp
18a3c     18 4E 85 F1 | 	sub	fp, #24
18a40     00 04 00 FF 
18a44     00 26 16 F2 | 	cmp	local01, ##524288 wc
18a48     1C 00 90 3D |  if_ae	jmp	#LR__1960
18a4c     18 4E 05 F1 | 	add	fp, #24
18a50     A7 12 02 FB | 	rdlong	arg01, fp
18a54     04 4E 05 F1 | 	add	fp, #4
18a58     A7 14 02 FB | 	rdlong	arg02, fp
18a5c     1C 4E 85 F1 | 	sub	fp, #28
18a60     09 15 42 FC | 	wrbyte	arg02, arg01
18a64     18 00 90 FD | 	jmp	#LR__1961
18a68                 | LR__1960
18a68     18 4E 05 F1 | 	add	fp, #24
18a6c     A7 12 02 FB | 	rdlong	arg01, fp
18a70     04 4E 05 F1 | 	add	fp, #4
18a74     A7 14 02 FB | 	rdlong	arg02, fp
18a78     1C 4E 85 F1 | 	sub	fp, #28
18a7c     D8 A6 B0 FD | 	call	#_pspoke
18a80                 | LR__1961
18a80     A7 F0 03 F6 | 	mov	ptra, fp
18a84     B2 00 A0 FD | 	call	#popregs_
18a88                 | _do_poke_ret
18a88     2D 00 64 FD | 	ret
18a8c                 | 
18a8c                 | ' 
18a8c                 | ' '-------------------- pop
18a8c                 | ' 
18a8c                 | ' sub do_pop()
18a8c                 | _do_pop
18a8c                 | ' if gosubtop>0 then  gosubtop -=1 
18a8c     50 00 00 FF 
18a90     34 E5 05 F1 | 	add	objptr, ##41268
18a94     F2 00 02 FB | 	rdlong	_var01, objptr
18a98     50 00 00 FF 
18a9c     34 E5 85 F1 | 	sub	objptr, ##41268
18aa0     01 00 56 F2 | 	cmps	_var01, #1 wc
18aa4     50 00 00 3F 
18aa8     34 E5 05 31 |  if_ae	add	objptr, ##41268
18aac     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
18ab0     01 00 86 31 |  if_ae	sub	_var01, #1
18ab4     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
18ab8     50 00 00 3F 
18abc     34 E5 85 31 |  if_ae	sub	objptr, ##41268
18ac0                 | _do_pop_ret
18ac0     2D 00 64 FD | 	ret
18ac4                 | 
18ac4                 | ' 
18ac4                 | ' '-------------------- position
18ac4                 | ' 
18ac4                 | ' sub do_position
18ac4                 | _do_position
18ac4     01 4A 05 F6 | 	mov	COUNT_, #1
18ac8     A8 00 A0 FD | 	call	#pushregs_
18acc     18 F0 07 F1 | 	add	ptra, #24
18ad0     B4 4A BF FD | 	call	#_pop
18ad4     FD 14 02 F6 | 	mov	arg02, result1
18ad8     FE 12 02 F6 | 	mov	arg01, result2
18adc     FF 26 02 F6 | 	mov	local01, result3
18ae0     A7 14 62 FC | 	wrlong	arg02, fp
18ae4     04 4E 05 F1 | 	add	fp, #4
18ae8     A7 12 62 FC | 	wrlong	arg01, fp
18aec     04 4E 05 F1 | 	add	fp, #4
18af0     A7 26 62 FC | 	wrlong	local01, fp
18af4     08 4E 85 F1 | 	sub	fp, #8
18af8     8C 4A BF FD | 	call	#_pop
18afc     FF 26 02 F6 | 	mov	local01, result3
18b00     0C 4E 05 F1 | 	add	fp, #12
18b04     A7 FA 61 FC | 	wrlong	result1, fp
18b08     04 4E 05 F1 | 	add	fp, #4
18b0c     A7 FC 61 FC | 	wrlong	result2, fp
18b10     04 4E 05 F1 | 	add	fp, #4
18b14     A7 26 62 FC | 	wrlong	local01, fp
18b18     08 4E 85 F1 | 	sub	fp, #8
18b1c     A7 12 02 F6 | 	mov	arg01, fp
18b20     0C 4E 85 F1 | 	sub	fp, #12
18b24     44 4C BF FD | 	call	#_converttoint
18b28     FD 26 02 F6 | 	mov	local01, result1
18b2c     A7 12 02 F6 | 	mov	arg01, fp
18b30     38 4C BF FD | 	call	#_converttoint
18b34     FD 14 02 F6 | 	mov	arg02, result1
18b38     13 13 02 F6 | 	mov	arg01, local01
18b3c     44 C0 B0 FD | 	call	#_hg010b_spin2_setcursorpos
18b40     A7 F0 03 F6 | 	mov	ptra, fp
18b44     B2 00 A0 FD | 	call	#popregs_
18b48                 | _do_position_ret
18b48     2D 00 64 FD | 	ret
18b4c                 | 
18b4c                 | ' 
18b4c                 | ' '-------------------- print
18b4c                 | ' 
18b4c                 | ' sub do_print  
18b4c                 | _do_print
18b4c     0B 4A 05 F6 | 	mov	COUNT_, #11
18b50     A8 00 A0 FD | 	call	#pushregs_
18b54     00 2C 06 F6 | 	mov	local04, #0
18b58     2C 4A BF FD | 	call	#_pop
18b5c     FD 2E 02 F6 | 	mov	local05, result1
18b60     FE 30 02 F6 | 	mov	local06, result2
18b64     FF 32 02 F6 | 	mov	local07, result3
18b68     17 27 02 F6 | 	mov	local01, local05
18b6c     18 29 02 F6 | 	mov	local02, local06
18b70     19 2B 02 F6 | 	mov	local03, local07
18b74                 | '  
18b74                 | ' r=0
18b74                 | ' t1=pop() 
18b74                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
18b74     21 2A 0E F2 | 	cmp	local03, #33 wz
18b78     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
18b7c     20 00 90 5D |  if_ne	jmp	#LR__1970
18b80     15 2D 02 F6 | 	mov	local04, local03
18b84     00 4A BF FD | 	call	#_pop
18b88     FD 2E 02 F6 | 	mov	local05, result1
18b8c     FE 30 02 F6 | 	mov	local06, result2
18b90     FF 32 02 F6 | 	mov	local07, result3
18b94     17 27 02 F6 | 	mov	local01, local05
18b98     18 29 02 F6 | 	mov	local02, local06
18b9c     19 2B 02 F6 | 	mov	local03, local07
18ba0                 | LR__1970
18ba0                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
18ba0     20 2A 0E F2 | 	cmp	local03, #32 wz
18ba4     15 2D 02 A6 |  if_e	mov	local04, local03
18ba8                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
18ba8     FF 2A 0E F2 | 	cmp	local03, #255 wz
18bac     10 00 90 5D |  if_ne	jmp	#LR__1971
18bb0     13 13 02 F6 | 	mov	arg01, local01
18bb4     00 14 06 F6 | 	mov	arg02, #0
18bb8     6C A3 B0 FD | 	call	#_printerror
18bbc     D4 04 90 FD | 	jmp	#LR__1990
18bc0                 | LR__1971
18bc0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
18bc0     2B 2A 0E F2 | 	cmp	local03, #43 wz
18bc4     14 00 90 5D |  if_ne	jmp	#LR__1972
18bc8     13 13 02 F6 | 	mov	arg01, local01
18bcc     30 4B BF FD | 	call	#_convertstring
18bd0     FD 2E 02 F6 | 	mov	local05, result1
18bd4     17 27 02 F6 | 	mov	local01, local05
18bd8     1F 2A 06 F6 | 	mov	local03, #31
18bdc                 | LR__1972
18bdc                 | ' 
18bdc                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
18bdc     2C 2A 0E F2 | 	cmp	local03, #44 wz
18be0     80 00 90 5D |  if_ne	jmp	#LR__1973
18be4     00 12 06 F6 | 	mov	arg01, #0
18be8     D0 39 B1 FD | 	call	#__system___getiolock_0603
18bec     FD 12 02 F6 | 	mov	arg01, result1
18bf0     24 DD B0 FD | 	call	#__system___lockmem
18bf4     B7 01 00 FF 
18bf8     54 15 06 F6 | 	mov	arg02, ##@LR__5944
18bfc     00 12 06 F6 | 	mov	arg01, #0
18c00     00 16 06 F6 | 	mov	arg03, #0
18c04     08 EA B0 FD | 	call	#__system___basic_print_string
18c08     0A 34 06 F6 | 	mov	local08, #10
18c0c     00 12 06 F6 | 	mov	arg01, #0
18c10     13 15 02 F6 | 	mov	arg02, local01
18c14     00 16 06 F6 | 	mov	arg03, #0
18c18     0A 18 06 F6 | 	mov	arg04, #10
18c1c     34 EA B0 FD | 	call	#__system___basic_print_integer
18c20     FD 36 02 F6 | 	mov	local09, result1
18c24     00 12 06 F6 | 	mov	arg01, #0
18c28     0A 14 06 F6 | 	mov	arg02, #10
18c2c     00 16 06 F6 | 	mov	arg03, #0
18c30     84 E9 B0 FD | 	call	#__system___basic_print_char
18c34     01 38 06 F6 | 	mov	local10, #1
18c38     00 12 06 F6 | 	mov	arg01, #0
18c3c     7C 39 B1 FD | 	call	#__system___getiolock_0603
18c40     FD 00 68 FC | 	wrlong	#0, result1
18c44     00 3A 06 F6 | 	mov	local11, #0
18c48     3C 49 BF FD | 	call	#_pop
18c4c     FD 2E 02 F6 | 	mov	local05, result1
18c50     FE 30 02 F6 | 	mov	local06, result2
18c54     FF 32 02 F6 | 	mov	local07, result3
18c58     17 27 02 F6 | 	mov	local01, local05
18c5c     18 29 02 F6 | 	mov	local02, local06
18c60     19 2B 02 F6 | 	mov	local03, local07
18c64                 | LR__1973
18c64                 | ' 
18c64                 | ' if r=print_mod_comma  then
18c64     21 2C 0E F2 | 	cmp	local04, #33 wz
18c68     AC 01 90 5D |  if_ne	jmp	#LR__1978
18c6c                 | '   if t1.result_type=result_int then print t1.result.iresult,
18c6c     1C 2A 0E F2 | 	cmp	local03, #28 wz
18c70     64 00 90 5D |  if_ne	jmp	#LR__1974
18c74     00 12 06 F6 | 	mov	arg01, #0
18c78     40 39 B1 FD | 	call	#__system___getiolock_0603
18c7c     FD 12 02 F6 | 	mov	arg01, result1
18c80     94 DC B0 FD | 	call	#__system___lockmem
18c84     00 30 06 F6 | 	mov	local06, #0
18c88     00 12 06 F6 | 	mov	arg01, #0
18c8c     13 15 02 F6 | 	mov	arg02, local01
18c90     00 16 06 F6 | 	mov	arg03, #0
18c94     0A 18 06 F6 | 	mov	arg04, #10
18c98     B8 E9 B0 FD | 	call	#__system___basic_print_integer
18c9c     FD 32 02 F6 | 	mov	local07, result1
18ca0     18 2F 02 F6 | 	mov	local05, local06
18ca4     19 2F 02 F1 | 	add	local05, local07
18ca8     00 3A 06 F6 | 	mov	local11, #0
18cac     00 12 06 F6 | 	mov	arg01, #0
18cb0     09 14 06 F6 | 	mov	arg02, #9
18cb4     00 16 06 F6 | 	mov	arg03, #0
18cb8     FC E8 B0 FD | 	call	#__system___basic_print_char
18cbc     FD 36 02 F6 | 	mov	local09, result1
18cc0     FD 2E 02 F1 | 	add	local05, result1
18cc4     00 12 06 F6 | 	mov	arg01, #0
18cc8     F0 38 B1 FD | 	call	#__system___getiolock_0603
18ccc     FD 00 68 FC | 	wrlong	#0, result1
18cd0     00 FA 05 F6 | 	mov	result1, #0
18cd4     00 38 06 F6 | 	mov	local10, #0
18cd8                 | LR__1974
18cd8                 | '   if t1.result_type=result_uint then print t1.result.uresult,
18cd8     1D 2A 0E F2 | 	cmp	local03, #29 wz
18cdc     64 00 90 5D |  if_ne	jmp	#LR__1975
18ce0     00 12 06 F6 | 	mov	arg01, #0
18ce4     D4 38 B1 FD | 	call	#__system___getiolock_0603
18ce8     FD 12 02 F6 | 	mov	arg01, result1
18cec     28 DC B0 FD | 	call	#__system___lockmem
18cf0     00 30 06 F6 | 	mov	local06, #0
18cf4     00 12 06 F6 | 	mov	arg01, #0
18cf8     13 15 02 F6 | 	mov	arg02, local01
18cfc     00 16 06 F6 | 	mov	arg03, #0
18d00     0A 18 06 F6 | 	mov	arg04, #10
18d04     8C E9 B0 FD | 	call	#__system___basic_print_unsigned
18d08     FD 32 02 F6 | 	mov	local07, result1
18d0c     18 2F 02 F6 | 	mov	local05, local06
18d10     19 2F 02 F1 | 	add	local05, local07
18d14     00 3A 06 F6 | 	mov	local11, #0
18d18     00 12 06 F6 | 	mov	arg01, #0
18d1c     09 14 06 F6 | 	mov	arg02, #9
18d20     00 16 06 F6 | 	mov	arg03, #0
18d24     90 E8 B0 FD | 	call	#__system___basic_print_char
18d28     FD 36 02 F6 | 	mov	local09, result1
18d2c     FD 2E 02 F1 | 	add	local05, result1
18d30     00 12 06 F6 | 	mov	arg01, #0
18d34     84 38 B1 FD | 	call	#__system___getiolock_0603
18d38     FD 00 68 FC | 	wrlong	#0, result1
18d3c     00 FA 05 F6 | 	mov	result1, #0
18d40     00 38 06 F6 | 	mov	local10, #0
18d44                 | LR__1975
18d44                 | '   if t1.result_type=result_float then print t1.result.fresult,
18d44     1E 2A 0E F2 | 	cmp	local03, #30 wz
18d48     64 00 90 5D |  if_ne	jmp	#LR__1976
18d4c     00 12 06 F6 | 	mov	arg01, #0
18d50     68 38 B1 FD | 	call	#__system___getiolock_0603
18d54     FD 12 02 F6 | 	mov	arg01, result1
18d58     BC DB B0 FD | 	call	#__system___lockmem
18d5c     00 30 06 F6 | 	mov	local06, #0
18d60     00 12 06 F6 | 	mov	arg01, #0
18d64     13 15 02 F6 | 	mov	arg02, local01
18d68     00 16 06 F6 | 	mov	arg03, #0
18d6c     23 18 06 F6 | 	mov	arg04, #35
18d70     38 10 B1 FD | 	call	#__system___basic_print_float
18d74     FD 32 02 F6 | 	mov	local07, result1
18d78     18 2F 02 F6 | 	mov	local05, local06
18d7c     19 2F 02 F1 | 	add	local05, local07
18d80     00 3A 06 F6 | 	mov	local11, #0
18d84     00 12 06 F6 | 	mov	arg01, #0
18d88     09 14 06 F6 | 	mov	arg02, #9
18d8c     00 16 06 F6 | 	mov	arg03, #0
18d90     24 E8 B0 FD | 	call	#__system___basic_print_char
18d94     FD 36 02 F6 | 	mov	local09, result1
18d98     FD 2E 02 F1 | 	add	local05, result1
18d9c     00 12 06 F6 | 	mov	arg01, #0
18da0     18 38 B1 FD | 	call	#__system___getiolock_0603
18da4     FD 00 68 FC | 	wrlong	#0, result1
18da8     00 FA 05 F6 | 	mov	result1, #0
18dac     00 38 06 F6 | 	mov	local10, #0
18db0                 | LR__1976
18db0                 | '   if t1.result_type=result_string then print t1.result.sresult,
18db0     1F 2A 0E F2 | 	cmp	local03, #31 wz
18db4     60 00 90 5D |  if_ne	jmp	#LR__1977
18db8     00 12 06 F6 | 	mov	arg01, #0
18dbc     FC 37 B1 FD | 	call	#__system___getiolock_0603
18dc0     FD 12 02 F6 | 	mov	arg01, result1
18dc4     50 DB B0 FD | 	call	#__system___lockmem
18dc8     00 30 06 F6 | 	mov	local06, #0
18dcc     00 12 06 F6 | 	mov	arg01, #0
18dd0     13 15 02 F6 | 	mov	arg02, local01
18dd4     00 16 06 F6 | 	mov	arg03, #0
18dd8     34 E8 B0 FD | 	call	#__system___basic_print_string
18ddc     FD 32 02 F6 | 	mov	local07, result1
18de0     18 2F 02 F6 | 	mov	local05, local06
18de4     19 2F 02 F1 | 	add	local05, local07
18de8     00 3A 06 F6 | 	mov	local11, #0
18dec     00 12 06 F6 | 	mov	arg01, #0
18df0     09 14 06 F6 | 	mov	arg02, #9
18df4     00 16 06 F6 | 	mov	arg03, #0
18df8     BC E7 B0 FD | 	call	#__system___basic_print_char
18dfc     FD 36 02 F6 | 	mov	local09, result1
18e00     FD 2E 02 F1 | 	add	local05, result1
18e04     00 12 06 F6 | 	mov	arg01, #0
18e08     B0 37 B1 FD | 	call	#__system___getiolock_0603
18e0c     FD 00 68 FC | 	wrlong	#0, result1
18e10     00 FA 05 F6 | 	mov	result1, #0
18e14     00 38 06 F6 | 	mov	local10, #0
18e18                 | LR__1977
18e18                 | LR__1978
18e18                 | ' if r=print_mod_semicolon then 
18e18     22 2C 0E F2 | 	cmp	local04, #34 wz
18e1c     1C 01 90 5D |  if_ne	jmp	#LR__1983
18e20                 | '   if t1.result_type=result_int then print t1.result.iresult;
18e20     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e24     50 00 90 5D |  if_ne	jmp	#LR__1979
18e28     00 12 06 F6 | 	mov	arg01, #0
18e2c     8C 37 B1 FD | 	call	#__system___getiolock_0603
18e30     FD 12 02 F6 | 	mov	arg01, result1
18e34     E0 DA B0 FD | 	call	#__system___lockmem
18e38     00 30 06 F6 | 	mov	local06, #0
18e3c     00 38 06 F6 | 	mov	local10, #0
18e40     0A 3A 06 F6 | 	mov	local11, #10
18e44     00 12 06 F6 | 	mov	arg01, #0
18e48     13 15 02 F6 | 	mov	arg02, local01
18e4c     00 16 06 F6 | 	mov	arg03, #0
18e50     0A 18 06 F6 | 	mov	arg04, #10
18e54     FC E7 B0 FD | 	call	#__system___basic_print_integer
18e58     FD 32 02 F6 | 	mov	local07, result1
18e5c     18 2F 02 F6 | 	mov	local05, local06
18e60     19 2F 02 F1 | 	add	local05, local07
18e64     00 12 06 F6 | 	mov	arg01, #0
18e68     50 37 B1 FD | 	call	#__system___getiolock_0603
18e6c     FD 00 68 FC | 	wrlong	#0, result1
18e70     00 FA 05 F6 | 	mov	result1, #0
18e74     00 36 06 F6 | 	mov	local09, #0
18e78                 | LR__1979
18e78                 | '   if t1.result_type=result_uint then print t1.result.uresult;
18e78     1D 2A 0E F2 | 	cmp	local03, #29 wz
18e7c     50 00 90 5D |  if_ne	jmp	#LR__1980
18e80     00 12 06 F6 | 	mov	arg01, #0
18e84     34 37 B1 FD | 	call	#__system___getiolock_0603
18e88     FD 12 02 F6 | 	mov	arg01, result1
18e8c     88 DA B0 FD | 	call	#__system___lockmem
18e90     00 30 06 F6 | 	mov	local06, #0
18e94     00 38 06 F6 | 	mov	local10, #0
18e98     0A 3A 06 F6 | 	mov	local11, #10
18e9c     00 12 06 F6 | 	mov	arg01, #0
18ea0     13 15 02 F6 | 	mov	arg02, local01
18ea4     00 16 06 F6 | 	mov	arg03, #0
18ea8     0A 18 06 F6 | 	mov	arg04, #10
18eac     E4 E7 B0 FD | 	call	#__system___basic_print_unsigned
18eb0     FD 32 02 F6 | 	mov	local07, result1
18eb4     18 2F 02 F6 | 	mov	local05, local06
18eb8     19 2F 02 F1 | 	add	local05, local07
18ebc     00 12 06 F6 | 	mov	arg01, #0
18ec0     F8 36 B1 FD | 	call	#__system___getiolock_0603
18ec4     FD 00 68 FC | 	wrlong	#0, result1
18ec8     00 FA 05 F6 | 	mov	result1, #0
18ecc     00 36 06 F6 | 	mov	local09, #0
18ed0                 | LR__1980
18ed0                 | '   if t1.result_type=result_float then print t1.result.fresult;
18ed0     1E 2A 0E F2 | 	cmp	local03, #30 wz
18ed4     30 00 90 5D |  if_ne	jmp	#LR__1981
18ed8     00 12 06 F6 | 	mov	arg01, #0
18edc     DC 36 B1 FD | 	call	#__system___getiolock_0603
18ee0     FD 12 02 F6 | 	mov	arg01, result1
18ee4     30 DA B0 FD | 	call	#__system___lockmem
18ee8     00 12 06 F6 | 	mov	arg01, #0
18eec     13 15 02 F6 | 	mov	arg02, local01
18ef0     00 16 06 F6 | 	mov	arg03, #0
18ef4     23 18 06 F6 | 	mov	arg04, #35
18ef8     B0 0E B1 FD | 	call	#__system___basic_print_float
18efc     00 12 06 F6 | 	mov	arg01, #0
18f00     B8 36 B1 FD | 	call	#__system___getiolock_0603
18f04     FD 00 68 FC | 	wrlong	#0, result1
18f08                 | LR__1981
18f08                 | '   if t1.result_type=result_string then print t1.result.sresult;
18f08     1F 2A 0E F2 | 	cmp	local03, #31 wz
18f0c     2C 00 90 5D |  if_ne	jmp	#LR__1982
18f10     00 12 06 F6 | 	mov	arg01, #0
18f14     A4 36 B1 FD | 	call	#__system___getiolock_0603
18f18     FD 12 02 F6 | 	mov	arg01, result1
18f1c     F8 D9 B0 FD | 	call	#__system___lockmem
18f20     00 12 06 F6 | 	mov	arg01, #0
18f24     13 15 02 F6 | 	mov	arg02, local01
18f28     00 16 06 F6 | 	mov	arg03, #0
18f2c     E0 E6 B0 FD | 	call	#__system___basic_print_string
18f30     00 12 06 F6 | 	mov	arg01, #0
18f34     84 36 B1 FD | 	call	#__system___getiolock_0603
18f38     FD 00 68 FC | 	wrlong	#0, result1
18f3c                 | LR__1982
18f3c                 | LR__1983
18f3c                 | ' if r=0 then 
18f3c     00 2C 0E F2 | 	cmp	local04, #0 wz
18f40     1C 01 90 5D |  if_ne	jmp	#LR__1988
18f44                 | '   if t1.result_type=result_int then print t1.result.iresult
18f44     1C 2A 0E F2 | 	cmp	local03, #28 wz
18f48     40 00 90 5D |  if_ne	jmp	#LR__1984
18f4c     00 12 06 F6 | 	mov	arg01, #0
18f50     68 36 B1 FD | 	call	#__system___getiolock_0603
18f54     FD 12 02 F6 | 	mov	arg01, result1
18f58     BC D9 B0 FD | 	call	#__system___lockmem
18f5c     00 12 06 F6 | 	mov	arg01, #0
18f60     13 15 02 F6 | 	mov	arg02, local01
18f64     00 16 06 F6 | 	mov	arg03, #0
18f68     0A 18 06 F6 | 	mov	arg04, #10
18f6c     E4 E6 B0 FD | 	call	#__system___basic_print_integer
18f70     00 12 06 F6 | 	mov	arg01, #0
18f74     0A 14 06 F6 | 	mov	arg02, #10
18f78     00 16 06 F6 | 	mov	arg03, #0
18f7c     38 E6 B0 FD | 	call	#__system___basic_print_char
18f80     00 12 06 F6 | 	mov	arg01, #0
18f84     34 36 B1 FD | 	call	#__system___getiolock_0603
18f88     FD 00 68 FC | 	wrlong	#0, result1
18f8c                 | LR__1984
18f8c                 | '   if t1.result_type=result_uint then print t1.result.uresult
18f8c     1D 2A 0E F2 | 	cmp	local03, #29 wz
18f90     40 00 90 5D |  if_ne	jmp	#LR__1985
18f94     00 12 06 F6 | 	mov	arg01, #0
18f98     20 36 B1 FD | 	call	#__system___getiolock_0603
18f9c     FD 12 02 F6 | 	mov	arg01, result1
18fa0     74 D9 B0 FD | 	call	#__system___lockmem
18fa4     00 12 06 F6 | 	mov	arg01, #0
18fa8     13 15 02 F6 | 	mov	arg02, local01
18fac     00 16 06 F6 | 	mov	arg03, #0
18fb0     0A 18 06 F6 | 	mov	arg04, #10
18fb4     DC E6 B0 FD | 	call	#__system___basic_print_unsigned
18fb8     00 12 06 F6 | 	mov	arg01, #0
18fbc     0A 14 06 F6 | 	mov	arg02, #10
18fc0     00 16 06 F6 | 	mov	arg03, #0
18fc4     F0 E5 B0 FD | 	call	#__system___basic_print_char
18fc8     00 12 06 F6 | 	mov	arg01, #0
18fcc     EC 35 B1 FD | 	call	#__system___getiolock_0603
18fd0     FD 00 68 FC | 	wrlong	#0, result1
18fd4                 | LR__1985
18fd4                 | '   if t1.result_type=result_float then print t1.result.fresult
18fd4     1E 2A 0E F2 | 	cmp	local03, #30 wz
18fd8     40 00 90 5D |  if_ne	jmp	#LR__1986
18fdc     00 12 06 F6 | 	mov	arg01, #0
18fe0     D8 35 B1 FD | 	call	#__system___getiolock_0603
18fe4     FD 12 02 F6 | 	mov	arg01, result1
18fe8     2C D9 B0 FD | 	call	#__system___lockmem
18fec     00 12 06 F6 | 	mov	arg01, #0
18ff0     13 15 02 F6 | 	mov	arg02, local01
18ff4     00 16 06 F6 | 	mov	arg03, #0
18ff8     23 18 06 F6 | 	mov	arg04, #35
18ffc     AC 0D B1 FD | 	call	#__system___basic_print_float
19000     00 12 06 F6 | 	mov	arg01, #0
19004     0A 14 06 F6 | 	mov	arg02, #10
19008     00 16 06 F6 | 	mov	arg03, #0
1900c     A8 E5 B0 FD | 	call	#__system___basic_print_char
19010     00 12 06 F6 | 	mov	arg01, #0
19014     A4 35 B1 FD | 	call	#__system___getiolock_0603
19018     FD 00 68 FC | 	wrlong	#0, result1
1901c                 | LR__1986
1901c                 | '   if t1.result_type=result_string then print t1.result.sresult
1901c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19020     3C 00 90 5D |  if_ne	jmp	#LR__1987
19024     00 12 06 F6 | 	mov	arg01, #0
19028     90 35 B1 FD | 	call	#__system___getiolock_0603
1902c     FD 12 02 F6 | 	mov	arg01, result1
19030     E4 D8 B0 FD | 	call	#__system___lockmem
19034     00 12 06 F6 | 	mov	arg01, #0
19038     13 15 02 F6 | 	mov	arg02, local01
1903c     00 16 06 F6 | 	mov	arg03, #0
19040     CC E5 B0 FD | 	call	#__system___basic_print_string
19044     00 12 06 F6 | 	mov	arg01, #0
19048     0A 14 06 F6 | 	mov	arg02, #10
1904c     00 16 06 F6 | 	mov	arg03, #0
19050     64 E5 B0 FD | 	call	#__system___basic_print_char
19054     00 12 06 F6 | 	mov	arg01, #0
19058     60 35 B1 FD | 	call	#__system___getiolock_0603
1905c     FD 00 68 FC | 	wrlong	#0, result1
19060                 | LR__1987
19060                 | LR__1988
19060                 | ' if r=print_mod_empty then print
19060     20 2C 0E F2 | 	cmp	local04, #32 wz
19064     2C 00 90 5D |  if_ne	jmp	#LR__1989
19068     00 12 06 F6 | 	mov	arg01, #0
1906c     4C 35 B1 FD | 	call	#__system___getiolock_0603
19070     FD 12 02 F6 | 	mov	arg01, result1
19074     A0 D8 B0 FD | 	call	#__system___lockmem
19078     00 12 06 F6 | 	mov	arg01, #0
1907c     0A 14 06 F6 | 	mov	arg02, #10
19080     00 16 06 F6 | 	mov	arg03, #0
19084     30 E5 B0 FD | 	call	#__system___basic_print_char
19088     00 12 06 F6 | 	mov	arg01, #0
1908c     2C 35 B1 FD | 	call	#__system___getiolock_0603
19090     FD 00 68 FC | 	wrlong	#0, result1
19094                 | LR__1989
19094                 | LR__1990
19094     A7 F0 03 F6 | 	mov	ptra, fp
19098     B2 00 A0 FD | 	call	#popregs_
1909c                 | _do_print_ret
1909c     2D 00 64 FD | 	ret
190a0                 | 
190a0                 | ' 
190a0                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
190a0                 | ' 
190a0                 | ' sub do_push
190a0                 | _do_push
190a0                 | ' if stackpointer<maxstack then 
190a0     43 00 00 FF 
190a4     58 E4 05 F1 | 	add	objptr, ##34392
190a8     F2 00 02 FB | 	rdlong	_var01, objptr
190ac     43 00 00 FF 
190b0     58 E4 85 F1 | 	sub	objptr, ##34392
190b4     01 00 00 FF 
190b8     00 00 56 F2 | 	cmps	_var01, ##512 wc
190bc     F8 00 90 3D |  if_ae	jmp	#LR__2000
190c0     4A 00 00 FF 
190c4     80 E4 05 F1 | 	add	objptr, ##38016
190c8     F2 02 02 FB | 	rdlong	_var02, objptr
190cc     01 05 02 F6 | 	mov	_var03, _var02
190d0     01 04 66 F0 | 	shl	_var03, #1
190d4     01 05 02 F1 | 	add	_var03, _var02
190d8     02 04 66 F0 | 	shl	_var03, #2
190dc     03 00 00 FF 
190e0     04 E4 85 F1 | 	sub	objptr, ##1540
190e4     F2 04 02 F1 | 	add	_var03, objptr
190e8     02 01 02 FB | 	rdlong	_var01, _var03
190ec     04 04 06 F1 | 	add	_var03, #4
190f0     02 07 02 FB | 	rdlong	_var04, _var03
190f4     01 05 02 F6 | 	mov	_var03, _var02
190f8     01 04 66 F0 | 	shl	_var03, #1
190fc     01 05 02 F1 | 	add	_var03, _var02
19100     02 04 66 F0 | 	shl	_var03, #2
19104     F2 04 02 F1 | 	add	_var03, objptr
19108     08 04 06 F1 | 	add	_var03, #8
1910c     02 03 02 FB | 	rdlong	_var02, _var03
19110     04 00 00 FF 
19114     24 E4 85 F1 | 	sub	objptr, ##2084
19118     F2 04 02 FB | 	rdlong	_var03, objptr
1911c     02 09 02 F6 | 	mov	_var05, _var03
19120     01 08 66 F0 | 	shl	_var05, #1
19124     02 09 02 F1 | 	add	_var05, _var03
19128     02 08 66 F0 | 	shl	_var05, #2
1912c     0C 00 00 FF 
19130     0C E4 85 F1 | 	sub	objptr, ##6156
19134     F2 08 02 F1 | 	add	_var05, objptr
19138     04 01 62 FC | 	wrlong	_var01, _var05
1913c     0C 00 00 FF 
19140     0C E4 05 F1 | 	add	objptr, ##6156
19144     F2 08 02 FB | 	rdlong	_var05, objptr
19148     04 05 02 F6 | 	mov	_var03, _var05
1914c     01 04 66 F0 | 	shl	_var03, #1
19150     04 05 02 F1 | 	add	_var03, _var05
19154     02 04 66 F0 | 	shl	_var03, #2
19158     0C 00 00 FF 
1915c     0C E4 85 F1 | 	sub	objptr, ##6156
19160     F2 04 02 F1 | 	add	_var03, objptr
19164     04 04 06 F1 | 	add	_var03, #4
19168     02 07 62 FC | 	wrlong	_var04, _var03
1916c     0C 00 00 FF 
19170     0C E4 05 F1 | 	add	objptr, ##6156
19174     F2 08 02 FB | 	rdlong	_var05, objptr
19178     04 07 02 F6 | 	mov	_var04, _var05
1917c     01 06 66 F0 | 	shl	_var04, #1
19180     04 07 02 F1 | 	add	_var04, _var05
19184     02 06 66 F0 | 	shl	_var04, #2
19188     0C 00 00 FF 
1918c     0C E4 85 F1 | 	sub	objptr, ##6156
19190     F2 06 02 F1 | 	add	_var04, objptr
19194     08 06 06 F1 | 	add	_var04, #8
19198     03 03 62 FC | 	wrlong	_var02, _var04
1919c     0C 00 00 FF 
191a0     0C E4 05 F1 | 	add	objptr, ##6156
191a4     F2 00 02 FB | 	rdlong	_var01, objptr
191a8     01 00 06 F1 | 	add	_var01, #1
191ac     F2 00 62 FC | 	wrlong	_var01, objptr
191b0     43 00 00 FF 
191b4     58 E4 85 F1 | 	sub	objptr, ##34392
191b8                 | LR__2000
191b8                 | _do_push_ret
191b8     2D 00 64 FD | 	ret
191bc                 | 
191bc                 | ' 
191bc                 | ' '-------------------- put
191bc                 | ' 
191bc                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
191bc                 | _do_put
191bc     03 4A 05 F6 | 	mov	COUNT_, #3
191c0     A8 00 A0 FD | 	call	#pushregs_
191c4     28 F0 07 F1 | 	add	ptra, #40
191c8     4A 00 00 FF 
191cc     80 E4 05 F1 | 	add	objptr, ##38016
191d0     F2 1A 02 FB | 	rdlong	arg05, objptr
191d4     0D 19 02 F6 | 	mov	arg04, arg05
191d8     01 18 66 F0 | 	shl	arg04, #1
191dc     0D 19 02 F1 | 	add	arg04, arg05
191e0     02 18 66 F0 | 	shl	arg04, #2
191e4     03 00 00 FF 
191e8     04 E4 85 F1 | 	sub	objptr, ##1540
191ec     F2 18 02 F1 | 	add	arg04, objptr
191f0     0C 1B 02 FB | 	rdlong	arg05, arg04
191f4     A7 1A 62 FC | 	wrlong	arg05, fp
191f8                 | ' 
191f8                 | ' numpar=compiledline(lineptr_e).result.uresult
191f8                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
191f8     04 1A 0E F2 | 	cmp	arg05, #4 wz
191fc     47 00 00 FF 
19200     7C E4 85 F1 | 	sub	objptr, ##36476
19204     48 00 90 5D |  if_ne	jmp	#LR__2010
19208     7C 43 BF FD | 	call	#_pop
1920c     FF 1A 02 F6 | 	mov	arg05, result3
19210     1C 4E 05 F1 | 	add	fp, #28
19214     A7 FA 61 FC | 	wrlong	result1, fp
19218     04 4E 05 F1 | 	add	fp, #4
1921c     A7 FC 61 FC | 	wrlong	result2, fp
19220     04 4E 05 F1 | 	add	fp, #4
19224     A7 1A 62 FC | 	wrlong	arg05, fp
19228     08 4E 85 F1 | 	sub	fp, #8
1922c     A7 12 02 F6 | 	mov	arg01, fp
19230     1C 4E 85 F1 | 	sub	fp, #28
19234     34 45 BF FD | 	call	#_converttoint
19238     52 00 00 FF 
1923c     0C E5 05 F1 | 	add	objptr, ##42252
19240     F2 FA 61 FC | 	wrlong	result1, objptr
19244     52 00 00 FF 
19248     0C E5 85 F1 | 	sub	objptr, ##42252
1924c     18 00 90 FD | 	jmp	#LR__2011
19250                 | LR__2010
19250     52 00 00 FF 
19254     0C E5 05 F1 | 	add	objptr, ##42252
19258     FF FF FF FF 
1925c     F2 FE 6B FC | 	wrlong	##-1, objptr
19260     52 00 00 FF 
19264     0C E5 85 F1 | 	sub	objptr, ##42252
19268                 | LR__2011
19268                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
19268     A7 1A 02 FB | 	rdlong	arg05, fp
1926c     03 1A 56 F2 | 	cmps	arg05, #3 wc
19270     40 00 90 CD |  if_b	jmp	#LR__2012
19274     10 43 BF FD | 	call	#_pop
19278     FF 1A 02 F6 | 	mov	arg05, result3
1927c     1C 4E 05 F1 | 	add	fp, #28
19280     A7 FA 61 FC | 	wrlong	result1, fp
19284     04 4E 05 F1 | 	add	fp, #4
19288     A7 FC 61 FC | 	wrlong	result2, fp
1928c     04 4E 05 F1 | 	add	fp, #4
19290     A7 1A 62 FC | 	wrlong	arg05, fp
19294     08 4E 85 F1 | 	sub	fp, #8
19298     A7 12 02 F6 | 	mov	arg01, fp
1929c     1C 4E 85 F1 | 	sub	fp, #28
192a0     C8 44 BF FD | 	call	#_converttoint
192a4     08 4E 05 F1 | 	add	fp, #8
192a8     A7 FA 61 FC | 	wrlong	result1, fp
192ac     08 4E 85 F1 | 	sub	fp, #8
192b0     0C 00 90 FD | 	jmp	#LR__2013
192b4                 | LR__2012
192b4     08 4E 05 F1 | 	add	fp, #8
192b8     A7 02 68 FC | 	wrlong	#1, fp
192bc     08 4E 85 F1 | 	sub	fp, #8
192c0                 | LR__2013
192c0                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
192c0     A7 18 02 FB | 	rdlong	arg04, fp
192c4     02 18 56 F2 | 	cmps	arg04, #2 wc
192c8     3C 00 90 CD |  if_b	jmp	#LR__2014
192cc     B8 42 BF FD | 	call	#_pop
192d0     FF 18 02 F6 | 	mov	arg04, result3
192d4     1C 4E 05 F1 | 	add	fp, #28
192d8     A7 FA 61 FC | 	wrlong	result1, fp
192dc     04 4E 05 F1 | 	add	fp, #4
192e0     A7 FC 61 FC | 	wrlong	result2, fp
192e4     04 4E 05 F1 | 	add	fp, #4
192e8     A7 18 62 FC | 	wrlong	arg04, fp
192ec     08 4E 85 F1 | 	sub	fp, #8
192f0     A7 12 02 F6 | 	mov	arg01, fp
192f4     1C 4E 85 F1 | 	sub	fp, #28
192f8     70 44 BF FD | 	call	#_converttoint
192fc     0C 4E 05 F1 | 	add	fp, #12
19300     A7 FA 61 FC | 	wrlong	result1, fp
19304     0C 4E 85 F1 | 	sub	fp, #12
19308                 | LR__2014
19308     7C 42 BF FD | 	call	#_pop
1930c     FF 18 02 F6 | 	mov	arg04, result3
19310     1C 4E 05 F1 | 	add	fp, #28
19314     A7 FA 61 FC | 	wrlong	result1, fp
19318     04 4E 05 F1 | 	add	fp, #4
1931c     A7 FC 61 FC | 	wrlong	result2, fp
19320     04 4E 05 F1 | 	add	fp, #4
19324     A7 18 62 FC | 	wrlong	arg04, fp
19328     08 4E 85 F1 | 	sub	fp, #8
1932c     A7 12 02 F6 | 	mov	arg01, fp
19330     1C 4E 85 F1 | 	sub	fp, #28
19334     34 44 BF FD | 	call	#_converttoint
19338     04 4E 05 F1 | 	add	fp, #4
1933c     A7 FA 61 FC | 	wrlong	result1, fp
19340     10 4E 05 F1 | 	add	fp, #16
19344     A7 26 02 FB | 	rdlong	local01, fp
19348     14 4E 85 F1 | 	sub	fp, #20
1934c     02 26 66 F0 | 	shl	local01, #2
19350     50 00 00 FF 
19354     C4 E4 05 F1 | 	add	objptr, ##41156
19358     F2 26 02 F1 | 	add	local01, objptr
1935c     13 01 68 FC | 	wrlong	#0, local01
19360                 | ' t1=pop() : channel=converttoint(t1)
19360                 | ' getres(j)=0
19360                 | ' if pos>=0 then
19360     02 00 00 FF 
19364     48 E4 05 F1 | 	add	objptr, ##1096
19368     F2 28 02 FB | 	rdlong	local02, objptr
1936c     52 00 00 FF 
19370     0C E5 85 F1 | 	sub	objptr, ##42252
19374     00 28 56 F2 | 	cmps	local02, #0 wc
19378     C0 01 90 CD |  if_b	jmp	#LR__2020
1937c     10 4E 05 F1 | 	add	fp, #16
19380     A7 00 68 FC | 	wrlong	#0, fp
19384     10 4E 85 F1 | 	sub	fp, #16
19388                 | '    i=0: do
19388                 | LR__2015
19388     14 4E 05 F1 | 	add	fp, #20
1938c     A7 00 68 FC | 	wrlong	#0, fp
19390     14 4E 85 F1 | 	sub	fp, #20
19394                 | '    j=0: do    
19394                 | LR__2016
19394                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19394     0C 4E 05 F1 | 	add	fp, #12
19398     A7 28 02 FB | 	rdlong	local02, fp
1939c     0C 4E 85 F1 | 	sub	fp, #12
193a0     00 04 00 FF 
193a4     00 28 56 F2 | 	cmps	local02, ##524288 wc
193a8     4C 00 90 3D |  if_ae	jmp	#LR__2017
193ac     14 4E 05 F1 | 	add	fp, #20
193b0     A7 28 02 FB | 	rdlong	local02, fp
193b4     14 27 02 F6 | 	mov	local01, local02
193b8     4E 00 00 FF 
193bc     B4 E4 05 F1 | 	add	objptr, ##40116
193c0     F2 26 02 F1 | 	add	local01, objptr
193c4     08 4E 85 F1 | 	sub	fp, #8
193c8     A7 12 02 FB | 	rdlong	arg01, fp
193cc     04 4E 05 F1 | 	add	fp, #4
193d0     A7 18 02 FB | 	rdlong	arg04, fp
193d4     0A 18 66 F0 | 	shl	arg04, #10
193d8     0C 13 02 F1 | 	add	arg01, arg04
193dc     10 4E 85 F1 | 	sub	fp, #16
193e0     14 13 02 F1 | 	add	arg01, local02
193e4     09 FB C1 FA | 	rdbyte	result1, arg01
193e8     4E 00 00 FF 
193ec     B4 E4 85 F1 | 	sub	objptr, ##40116
193f0     13 FB 41 FC | 	wrbyte	result1, local01
193f4     48 00 90 FD | 	jmp	#LR__2018
193f8                 | LR__2017
193f8     14 4E 05 F1 | 	add	fp, #20
193fc     A7 28 02 FB | 	rdlong	local02, fp
19400     14 27 02 F6 | 	mov	local01, local02
19404     4E 00 00 FF 
19408     B4 E4 05 F1 | 	add	objptr, ##40116
1940c     F2 26 02 F1 | 	add	local01, objptr
19410     08 4E 85 F1 | 	sub	fp, #8
19414     A7 12 02 FB | 	rdlong	arg01, fp
19418     04 4E 05 F1 | 	add	fp, #4
1941c     A7 18 02 FB | 	rdlong	arg04, fp
19420     0A 18 66 F0 | 	shl	arg04, #10
19424     0C 13 02 F1 | 	add	arg01, arg04
19428     10 4E 85 F1 | 	sub	fp, #16
1942c     14 13 02 F1 | 	add	arg01, local02
19430     4E 00 00 FF 
19434     B4 E4 85 F1 | 	sub	objptr, ##40116
19438     64 9D B0 FD | 	call	#_pspeek
1943c     13 FB 41 FC | 	wrbyte	result1, local01
19440                 | LR__2018
19440     14 4E 05 F1 | 	add	fp, #20
19444     A7 28 02 FB | 	rdlong	local02, fp
19448     01 28 06 F1 | 	add	local02, #1
1944c     A7 28 62 FC | 	wrlong	local02, fp
19450     14 4E 85 F1 | 	sub	fp, #20
19454     02 00 00 FF 
19458     00 28 56 F2 | 	cmps	local02, ##1024 wc
1945c     2C 00 90 3D |  if_ae	jmp	#LR__2019
19460     10 4E 05 F1 | 	add	fp, #16
19464     A7 26 02 FB | 	rdlong	local01, fp
19468     0A 26 66 F0 | 	shl	local01, #10
1946c     04 4E 05 F1 | 	add	fp, #4
19470     A7 28 02 FB | 	rdlong	local02, fp
19474     14 27 02 F1 | 	add	local01, local02
19478     0C 4E 85 F1 | 	sub	fp, #12
1947c     A7 28 02 FB | 	rdlong	local02, fp
19480     08 4E 85 F1 | 	sub	fp, #8
19484     14 27 5A F2 | 	cmps	local01, local02 wcz
19488     08 FF 9F ED |  if_be	jmp	#LR__2016
1948c                 | LR__2019
1948c                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
1948c     04 4E 05 F1 | 	add	fp, #4
19490     A7 12 02 FB | 	rdlong	arg01, fp
19494     52 00 00 FF 
19498     0C E5 05 F1 | 	add	objptr, ##42252
1949c     F2 14 02 FB | 	rdlong	arg02, objptr
194a0     01 14 06 F1 | 	add	arg02, #1
194a4     04 00 00 FF 
194a8     58 E4 85 F1 | 	sub	objptr, ##2136
194ac     F2 16 02 F6 | 	mov	arg03, objptr
194b0     4E 00 00 FF 
194b4     B4 E4 85 F1 | 	sub	objptr, ##40116
194b8     04 4E 05 F1 | 	add	fp, #4
194bc     A7 18 02 FB | 	rdlong	arg04, fp
194c0     08 4E 85 F1 | 	sub	fp, #8
194c4     01 1A 06 F6 | 	mov	arg05, #1
194c8     54 E2 B0 FD | 	call	#__system___basic_put
194cc     18 4E 05 F1 | 	add	fp, #24
194d0     A7 FA 61 FC | 	wrlong	result1, fp
194d4     14 4E 85 F1 | 	sub	fp, #20
194d8     A7 26 02 FB | 	rdlong	local01, fp
194dc     02 26 66 F0 | 	shl	local01, #2
194e0     50 00 00 FF 
194e4     C4 E4 05 F1 | 	add	objptr, ##41156
194e8     F2 26 02 F1 | 	add	local01, objptr
194ec     13 FB 61 FC | 	wrlong	result1, local01
194f0                 | '    if 1024*i+j>amount then exit loop
194f0     0C 4E 05 F1 | 	add	fp, #12
194f4     A7 28 02 FB | 	rdlong	local02, fp
194f8     0A 28 66 F0 | 	shl	local02, #10
194fc     04 4E 05 F1 | 	add	fp, #4
19500     A7 26 02 FB | 	rdlong	local01, fp
19504     13 29 02 F1 | 	add	local02, local01
19508     0C 4E 85 F1 | 	sub	fp, #12
1950c     A7 26 02 FB | 	rdlong	local01, fp
19510     08 4E 85 F1 | 	sub	fp, #8
19514     13 29 5A F2 | 	cmps	local02, local01 wcz
19518     50 00 00 FF 
1951c     C4 E4 85 F1 | 	sub	objptr, ##41156
19520     CC 01 90 1D |  if_a	jmp	#LR__2027
19524     10 4E 05 F1 | 	add	fp, #16
19528     A7 28 02 FB | 	rdlong	local02, fp
1952c     01 28 06 F1 | 	add	local02, #1
19530     A7 28 62 FC | 	wrlong	local02, fp
19534     10 4E 85 F1 | 	sub	fp, #16
19538     4C FE 9F FD | 	jmp	#LR__2015
1953c                 | LR__2020
1953c     10 4E 05 F1 | 	add	fp, #16
19540     A7 00 68 FC | 	wrlong	#0, fp
19544     10 4E 85 F1 | 	sub	fp, #16
19548                 | '    i=0: do
19548                 | LR__2021
19548     14 4E 05 F1 | 	add	fp, #20
1954c     A7 00 68 FC | 	wrlong	#0, fp
19550     14 4E 85 F1 | 	sub	fp, #20
19554                 | '    j=0: do  
19554                 | LR__2022
19554                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
19554     0C 4E 05 F1 | 	add	fp, #12
19558     A7 28 02 FB | 	rdlong	local02, fp
1955c     0C 4E 85 F1 | 	sub	fp, #12
19560     00 04 00 FF 
19564     00 28 56 F2 | 	cmps	local02, ##524288 wc
19568     4C 00 90 3D |  if_ae	jmp	#LR__2023
1956c     14 4E 05 F1 | 	add	fp, #20
19570     A7 28 02 FB | 	rdlong	local02, fp
19574     14 27 02 F6 | 	mov	local01, local02
19578     4E 00 00 FF 
1957c     B4 E4 05 F1 | 	add	objptr, ##40116
19580     F2 26 02 F1 | 	add	local01, objptr
19584     08 4E 85 F1 | 	sub	fp, #8
19588     A7 12 02 FB | 	rdlong	arg01, fp
1958c     04 4E 05 F1 | 	add	fp, #4
19590     A7 18 02 FB | 	rdlong	arg04, fp
19594     0A 18 66 F0 | 	shl	arg04, #10
19598     0C 13 02 F1 | 	add	arg01, arg04
1959c     10 4E 85 F1 | 	sub	fp, #16
195a0     14 13 02 F1 | 	add	arg01, local02
195a4     09 FB C1 FA | 	rdbyte	result1, arg01
195a8     4E 00 00 FF 
195ac     B4 E4 85 F1 | 	sub	objptr, ##40116
195b0     13 FB 41 FC | 	wrbyte	result1, local01
195b4     48 00 90 FD | 	jmp	#LR__2024
195b8                 | LR__2023
195b8     14 4E 05 F1 | 	add	fp, #20
195bc     A7 28 02 FB | 	rdlong	local02, fp
195c0     14 27 02 F6 | 	mov	local01, local02
195c4     4E 00 00 FF 
195c8     B4 E4 05 F1 | 	add	objptr, ##40116
195cc     F2 26 02 F1 | 	add	local01, objptr
195d0     08 4E 85 F1 | 	sub	fp, #8
195d4     A7 12 02 FB | 	rdlong	arg01, fp
195d8     04 4E 05 F1 | 	add	fp, #4
195dc     A7 18 02 FB | 	rdlong	arg04, fp
195e0     0A 18 66 F0 | 	shl	arg04, #10
195e4     0C 13 02 F1 | 	add	arg01, arg04
195e8     10 4E 85 F1 | 	sub	fp, #16
195ec     14 13 02 F1 | 	add	arg01, local02
195f0     4E 00 00 FF 
195f4     B4 E4 85 F1 | 	sub	objptr, ##40116
195f8     A4 9B B0 FD | 	call	#_pspeek
195fc     13 FB 41 FC | 	wrbyte	result1, local01
19600                 | LR__2024
19600     14 4E 05 F1 | 	add	fp, #20
19604     A7 28 02 FB | 	rdlong	local02, fp
19608     01 28 06 F1 | 	add	local02, #1
1960c     A7 28 62 FC | 	wrlong	local02, fp
19610     14 4E 85 F1 | 	sub	fp, #20
19614     02 00 00 FF 
19618     00 28 56 F2 | 	cmps	local02, ##1024 wc
1961c     2C 00 90 3D |  if_ae	jmp	#LR__2025
19620     10 4E 05 F1 | 	add	fp, #16
19624     A7 26 02 FB | 	rdlong	local01, fp
19628     0A 26 66 F0 | 	shl	local01, #10
1962c     04 4E 05 F1 | 	add	fp, #4
19630     A7 28 02 FB | 	rdlong	local02, fp
19634     14 27 02 F1 | 	add	local01, local02
19638     0C 4E 85 F1 | 	sub	fp, #12
1963c     A7 28 02 FB | 	rdlong	local02, fp
19640     08 4E 85 F1 | 	sub	fp, #8
19644     14 27 5A F2 | 	cmps	local01, local02 wcz
19648     08 FF 9F ED |  if_be	jmp	#LR__2022
1964c                 | LR__2025
1964c                 | '    put #channel,,block(0),amount, r : getres(channel)=r
1964c     04 4E 05 F1 | 	add	fp, #4
19650     A7 12 02 FB | 	rdlong	arg01, fp
19654     4E 00 00 FF 
19658     B4 E4 05 F1 | 	add	objptr, ##40116
1965c     F2 16 02 F6 | 	mov	arg03, objptr
19660     4E 00 00 FF 
19664     B4 E4 85 F1 | 	sub	objptr, ##40116
19668     04 4E 05 F1 | 	add	fp, #4
1966c     A7 18 02 FB | 	rdlong	arg04, fp
19670     08 4E 85 F1 | 	sub	fp, #8
19674     00 14 06 F6 | 	mov	arg02, #0
19678     01 1A 06 F6 | 	mov	arg05, #1
1967c     A0 E0 B0 FD | 	call	#__system___basic_put
19680     18 4E 05 F1 | 	add	fp, #24
19684     A7 FA 61 FC | 	wrlong	result1, fp
19688     14 4E 85 F1 | 	sub	fp, #20
1968c     A7 26 02 FB | 	rdlong	local01, fp
19690     02 26 66 F0 | 	shl	local01, #2
19694     50 00 00 FF 
19698     C4 E4 05 F1 | 	add	objptr, ##41156
1969c     F2 26 02 F1 | 	add	local01, objptr
196a0     13 FB 61 FC | 	wrlong	result1, local01
196a4                 | '    if 1024*i+j>amount then exit loop
196a4     0C 4E 05 F1 | 	add	fp, #12
196a8     A7 28 02 FB | 	rdlong	local02, fp
196ac     0A 28 66 F0 | 	shl	local02, #10
196b0     04 4E 05 F1 | 	add	fp, #4
196b4     A7 26 02 FB | 	rdlong	local01, fp
196b8     13 29 02 F1 | 	add	local02, local01
196bc     0C 4E 85 F1 | 	sub	fp, #12
196c0     A7 2A 02 FB | 	rdlong	local03, fp
196c4     08 4E 85 F1 | 	sub	fp, #8
196c8     15 29 5A F2 | 	cmps	local02, local03 wcz
196cc     50 00 00 FF 
196d0     C4 E4 85 F1 | 	sub	objptr, ##41156
196d4     18 00 90 1D |  if_a	jmp	#LR__2026
196d8     10 4E 05 F1 | 	add	fp, #16
196dc     A7 28 02 FB | 	rdlong	local02, fp
196e0     01 28 06 F1 | 	add	local02, #1
196e4     A7 28 62 FC | 	wrlong	local02, fp
196e8     10 4E 85 F1 | 	sub	fp, #16
196ec     58 FE 9F FD | 	jmp	#LR__2021
196f0                 | LR__2026
196f0                 | LR__2027
196f0     A7 F0 03 F6 | 	mov	ptra, fp
196f4     B2 00 A0 FD | 	call	#popregs_
196f8                 | _do_put_ret
196f8     2D 00 64 FD | 	ret
196fc                 | 
196fc                 | ' 
196fc                 | ' '-------------------- rad
196fc                 | ' 
196fc                 | ' sub do_rad
196fc                 | _do_rad
196fc     52 00 00 FF 
19700     A8 E4 05 F1 | 	add	objptr, ##42152
19704     00 C0 9F FF 
19708     F2 00 68 FC | 	wrlong	##1065353216, objptr
1970c     04 E4 05 F1 | 	add	objptr, #4
19710     00 C0 9F FF 
19714     F2 00 68 FC | 	wrlong	##1065353216, objptr
19718     52 00 00 FF 
1971c     AC E4 85 F1 | 	sub	objptr, ##42156
19720                 | _do_rad_ret
19720     2D 00 64 FD | 	ret
19724                 | 
19724                 | ' 
19724                 | ' '-------------------- rdpin
19724                 | ' 
19724                 | ' sub do_rdpin
19724                 | _do_rdpin
19724     00 4A 05 F6 | 	mov	COUNT_, #0
19728     A8 00 A0 FD | 	call	#pushregs_
1972c     0C F0 07 F1 | 	add	ptra, #12
19730     54 3E BF FD | 	call	#_pop
19734     A7 FA 61 FC | 	wrlong	result1, fp
19738     04 4E 05 F1 | 	add	fp, #4
1973c     A7 FC 61 FC | 	wrlong	result2, fp
19740     04 4E 05 F1 | 	add	fp, #4
19744     A7 FE 61 FC | 	wrlong	result3, fp
19748     08 4E 85 F1 | 	sub	fp, #8
1974c     A7 12 02 F6 | 	mov	arg01, fp
19750     18 40 BF FD | 	call	#_converttoint
19754     FD FA 89 FA | 	rdpin	result1, result1
19758     52 00 00 FF 
1975c     10 E5 05 F1 | 	add	objptr, ##42256
19760     F2 FA 61 FC | 	wrlong	result1, objptr
19764     52 00 00 FF 
19768     10 E5 85 F1 | 	sub	objptr, ##42256
1976c     08 4E 05 F1 | 	add	fp, #8
19770     A7 3A 68 FC | 	wrlong	#29, fp
19774     08 4E 85 F1 | 	sub	fp, #8
19778     A7 08 68 FC | 	wrlong	#4, fp
1977c     A7 12 02 F6 | 	mov	arg01, fp
19780     9C 3E BF FD | 	call	#_push
19784     A7 F0 03 F6 | 	mov	ptra, fp
19788     B2 00 A0 FD | 	call	#popregs_
1978c                 | _do_rdpin_ret
1978c     2D 00 64 FD | 	ret
19790                 | 
19790                 | ' 
19790                 | ' ' ----------------  read
19790                 | ' 
19790                 | ' function read_next_line() as string
19790                 | _read_next_line
19790     07 4A 05 F6 | 	mov	COUNT_, #7
19794     A8 00 A0 FD | 	call	#pushregs_
19798                 | ' if dataptr=$7FFFFFFF then return("")
19798     50 00 00 FF 
1979c     2C E5 05 F1 | 	add	objptr, ##41260
197a0     F2 26 02 FB | 	rdlong	local01, objptr
197a4     50 00 00 FF 
197a8     2C E5 85 F1 | 	sub	objptr, ##41260
197ac     FF FF 3F FF 
197b0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
197b4     B7 01 00 AF 
197b8     7B FB 05 A6 |  if_e	mov	result1, ##@LR__5945
197bc     BC 01 90 AD |  if_e	jmp	#LR__2037
197c0                 | ' do
197c0                 | LR__2030
197c0     50 00 00 FF 
197c4     08 E5 05 F1 | 	add	objptr, ##41224
197c8     F2 12 02 F6 | 	mov	arg01, objptr
197cc     24 E4 05 F1 | 	add	objptr, #36
197d0     F2 14 02 FB | 	rdlong	arg02, objptr
197d4     24 16 06 F6 | 	mov	arg03, #36
197d8     45 00 00 FF 
197dc     60 E4 85 F1 | 	sub	objptr, ##35424
197e0     AC C4 B0 FD | 	call	#_psram_spin2_read1
197e4                 | '  ' print dataptr
197e4                 | '   psram.read1(varptr(dataheader),dataptr,36) 
197e4                 | '   if dataheader(0)<>$FFFFFFFF then dataptr=dataheader(5)
197e4     45 00 00 FF 
197e8     3C E4 05 F1 | 	add	objptr, ##35388
197ec     F2 26 02 FB | 	rdlong	local01, objptr
197f0     50 00 00 FF 
197f4     08 E5 85 F1 | 	sub	objptr, ##41224
197f8     FF FF 7F FF 
197fc     FF 27 0E F2 | 	cmp	local01, ##-1 wz
19800     50 00 00 5F 
19804     1C E5 05 51 |  if_ne	add	objptr, ##41244
19808     F2 26 02 5B |  if_ne	rdlong	local01, objptr
1980c     10 E4 05 51 |  if_ne	add	objptr, #16
19810     F2 26 62 5C |  if_ne	wrlong	local01, objptr
19814     50 00 00 5F 
19818     2C E5 85 51 |  if_ne	sub	objptr, ##41260
1981c     50 00 00 FF 
19820     1C E5 05 F1 | 	add	objptr, ##41244
19824     F2 26 02 FB | 	rdlong	local01, objptr
19828     50 00 00 FF 
1982c     1C E5 85 F1 | 	sub	objptr, ##41244
19830     FF FF 3F FF 
19834     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
19838     50 00 00 5F 
1983c     08 E5 05 51 |  if_ne	add	objptr, ##41224
19840     F2 28 02 5B |  if_ne	rdlong	local02, objptr
19844     50 00 00 5F 
19848     08 E5 85 51 |  if_ne	sub	objptr, ##41224
1984c     FF FF 7F 5F 
19850     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
19854     50 00 00 5F 
19858     28 E5 05 51 |  if_ne	add	objptr, ##41256
1985c     F2 2A 02 5B |  if_ne	rdlong	local03, objptr
19860     50 00 00 5F 
19864     28 E5 85 51 |  if_ne	sub	objptr, ##41256
19868     B7 2A 0E 52 |  if_ne	cmp	local03, #183 wz
1986c     50 FF 9F 5D |  if_ne	jmp	#LR__2030
19870                 | ' if dataheader(8)=token_data then 
19870     50 00 00 FF 
19874     28 E5 05 F1 | 	add	objptr, ##41256
19878     F2 26 02 FB | 	rdlong	local01, objptr
1987c     50 00 00 FF 
19880     28 E5 85 F1 | 	sub	objptr, ##41256
19884     B7 26 0E F2 | 	cmp	local01, #183 wz
19888     E0 00 90 5D |  if_ne	jmp	#LR__2035
1988c     50 00 00 FF 
19890     10 E5 05 F1 | 	add	objptr, ##41232
19894     F2 26 02 FB | 	rdlong	local01, objptr
19898     01 00 00 FF 
1989c     E0 E5 05 F1 | 	add	objptr, ##992
198a0     F2 26 62 FC | 	wrlong	local01, objptr
198a4     01 00 00 FF 
198a8     DC E5 85 F1 | 	sub	objptr, ##988
198ac     F2 2C 02 FB | 	rdlong	local04, objptr
198b0     01 00 00 FF 
198b4     D4 E5 05 F1 | 	add	objptr, ##980
198b8     F2 2C 62 FC | 	wrlong	local04, objptr
198bc                 | '  'print "data found at line "; dataheader(0)
198bc                 | '   l=dataheader(2) : j=dataheader(3) : for i=0 to j-1: readline+=chr$(pspeek(l+i)): next i 
198bc     00 2E 06 F6 | 	mov	local05, #0
198c0     52 00 00 FF 
198c4     E8 E4 85 F1 | 	sub	objptr, ##42216
198c8                 | LR__2031
198c8     16 2F 52 F2 | 	cmps	local05, local04 wc
198cc     3C 00 90 3D |  if_ae	jmp	#LR__2032
198d0     52 00 00 FF 
198d4     F0 E4 05 F1 | 	add	objptr, ##42224
198d8     F2 12 02 FB | 	rdlong	arg01, objptr
198dc     52 00 00 FF 
198e0     F0 E4 85 F1 | 	sub	objptr, ##42224
198e4     17 13 02 F1 | 	add	arg01, local05
198e8     B4 98 B0 FD | 	call	#_pspeek
198ec     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
198f0     68 F2 B0 FD | 	call	#__system__Chr_S
198f4     FD 14 02 F6 | 	mov	arg02, result1
198f8     18 13 02 F6 | 	mov	arg01, local06
198fc     74 D0 B0 FD | 	call	#__system___string_concat
19900     FD 30 02 F6 | 	mov	local06, result1
19904     01 2E 06 F1 | 	add	local05, #1
19908     BC FF 9F FD | 	jmp	#LR__2031
1990c                 | LR__2032
1990c     B7 01 00 FF 
19910     7C 17 06 F6 | 	mov	arg03, ##@LR__5946
19914     01 12 06 F6 | 	mov	arg01, #1
19918     18 15 02 F6 | 	mov	arg02, local06
1991c     C0 F5 B0 FD | 	call	#__system__Instr
19920     FD 2E 02 F6 | 	mov	local05, result1
19924     18 13 02 F6 | 	mov	arg01, local06
19928     09 33 02 F6 | 	mov	local07, arg01
1992c     97 06 48 FB | 	callpa	#(@LR__2034-@LR__2033)>>2,fcache_load_ptr_
19930                 | LR__2033
19930     19 FB C9 FA | 	rdbyte	result1, local07 wz
19934     01 32 06 51 |  if_ne	add	local07, #1
19938     F4 FF 9F 5D |  if_ne	jmp	#LR__2033
1993c                 | LR__2034
1993c     09 33 82 F1 | 	sub	local07, arg01
19940     19 15 02 F6 | 	mov	arg02, local07
19944     17 15 82 F1 | 	sub	arg02, local05
19948     04 14 86 F1 | 	sub	arg02, #4
1994c     18 13 02 F6 | 	mov	arg01, local06
19950     CC F0 B0 FD | 	call	#__system__Right_S
19954     FD 12 02 F6 | 	mov	arg01, result1
19958     CC F4 B0 FD | 	call	#__system__RTrim_S
1995c     FD 12 02 F6 | 	mov	arg01, result1
19960     04 F4 B0 FD | 	call	#__system__LTrim_S
19964     FD 30 02 F6 | 	mov	local06, result1
19968     0C 00 90 FD | 	jmp	#LR__2036
1996c                 | LR__2035
1996c                 | '   return ("") 'todo proper err
1996c     B7 01 00 FF 
19970     81 FB 05 F6 | 	mov	result1, ##@LR__5947
19974     04 00 90 FD | 	jmp	#LR__2037
19978                 | LR__2036
19978                 | ' return readline
19978     18 FB 01 F6 | 	mov	result1, local06
1997c                 | LR__2037
1997c     A7 F0 03 F6 | 	mov	ptra, fp
19980     B2 00 A0 FD | 	call	#popregs_
19984                 | _read_next_line_ret
19984     2D 00 64 FD | 	ret
19988                 | 
19988                 | ' 
19988                 | ' sub do_read
19988                 | _do_read
19988     11 4A 05 F6 | 	mov	COUNT_, #17
1998c     A8 00 A0 FD | 	call	#pushregs_
19990     58 F1 07 F1 | 	add	ptra, #344
19994     4A 00 00 FF 
19998     80 E4 05 F1 | 	add	objptr, ##38016
1999c     F2 FE 01 FB | 	rdlong	result3, objptr
199a0     FF FC 01 F6 | 	mov	result2, result3
199a4     01 FC 65 F0 | 	shl	result2, #1
199a8     FF FC 01 F1 | 	add	result2, result3
199ac     02 FC 65 F0 | 	shl	result2, #2
199b0     03 00 00 FF 
199b4     04 E4 85 F1 | 	sub	objptr, ##1540
199b8     F2 FC 01 F1 | 	add	result2, objptr
199bc     FE FC 01 FB | 	rdlong	result2, result2
199c0     08 4E 05 F1 | 	add	fp, #8
199c4     A7 FC 61 FC | 	wrlong	result2, fp
199c8                 | ' 
199c8                 | ' 
199c8                 | ' numpar=compiledline(lineptr_e).result.uresult
199c8                 | ' if numpar<1 orelse numpar>64 then print "In read: ";: printerror(39,runheader(0)) : return
199c8     08 4E 85 F1 | 	sub	fp, #8
199cc     01 FC 15 F2 | 	cmp	result2, #1 wc
199d0     47 00 00 FF 
199d4     7C E4 85 F1 | 	sub	objptr, ##36476
199d8     14 00 90 CD |  if_b	jmp	#LR__2040
199dc     08 4E 05 F1 | 	add	fp, #8
199e0     A7 FC 01 FB | 	rdlong	result2, fp
199e4     08 4E 85 F1 | 	sub	fp, #8
199e8     41 FC 15 F2 | 	cmp	result2, #65 wc
199ec     50 00 90 CD |  if_b	jmp	#LR__2041
199f0                 | LR__2040
199f0     00 12 06 F6 | 	mov	arg01, #0
199f4     C4 2B B1 FD | 	call	#__system___getiolock_0603
199f8     FD 12 02 F6 | 	mov	arg01, result1
199fc     18 CF B0 FD | 	call	#__system___lockmem
19a00     B7 01 00 FF 
19a04     82 15 06 F6 | 	mov	arg02, ##@LR__5948
19a08     00 12 06 F6 | 	mov	arg01, #0
19a0c     00 16 06 F6 | 	mov	arg03, #0
19a10     FC DB B0 FD | 	call	#__system___basic_print_string
19a14     00 12 06 F6 | 	mov	arg01, #0
19a18     A0 2B B1 FD | 	call	#__system___getiolock_0603
19a1c     FD 00 68 FC | 	wrlong	#0, result1
19a20     50 00 00 FF 
19a24     F0 E4 05 F1 | 	add	objptr, ##41200
19a28     F2 14 02 FB | 	rdlong	arg02, objptr
19a2c     50 00 00 FF 
19a30     F0 E4 85 F1 | 	sub	objptr, ##41200
19a34     27 12 06 F6 | 	mov	arg01, #39
19a38     EC 94 B0 FD | 	call	#_printerror
19a3c     D0 0C 90 FD | 	jmp	#LR__2091
19a40                 | LR__2041
19a40     08 4E 05 F1 | 	add	fp, #8
19a44     A7 16 02 FB | 	rdlong	arg03, fp
19a48     01 16 86 F1 | 	sub	arg03, #1
19a4c     28 4F 05 F1 | 	add	fp, #296
19a50     A7 16 62 FC | 	wrlong	arg03, fp
19a54     30 4F 85 F1 | 	sub	fp, #304
19a58                 | ' i=numpar-1
19a58                 | ' if readline="" then readline=read_next_line() ': print readline
19a58     52 00 00 FF 
19a5c     DC E4 05 F1 | 	add	objptr, ##42204
19a60     F2 12 02 FB | 	rdlong	arg01, objptr
19a64     52 00 00 FF 
19a68     DC E4 85 F1 | 	sub	objptr, ##42204
19a6c     B7 01 00 FF 
19a70     8C 15 06 F6 | 	mov	arg02, ##@LR__5949
19a74     C8 CE B0 FD | 	call	#__system___string_cmp
19a78     00 FA 0D F2 | 	cmp	result1, #0 wz
19a7c     18 00 90 5D |  if_ne	jmp	#LR__2042
19a80     0C FD BF FD | 	call	#_read_next_line
19a84     52 00 00 FF 
19a88     DC E4 05 F1 | 	add	objptr, ##42204
19a8c     F2 FA 61 FC | 	wrlong	result1, objptr
19a90     52 00 00 FF 
19a94     DC E4 85 F1 | 	sub	objptr, ##42204
19a98                 | LR__2042
19a98                 | ' if readline="" then printerror(55,runheader(0)) :return
19a98     52 00 00 FF 
19a9c     DC E4 05 F1 | 	add	objptr, ##42204
19aa0     F2 12 02 FB | 	rdlong	arg01, objptr
19aa4     52 00 00 FF 
19aa8     DC E4 85 F1 | 	sub	objptr, ##42204
19aac     B7 01 00 FF 
19ab0     8D 15 06 F6 | 	mov	arg02, ##@LR__5950
19ab4     88 CE B0 FD | 	call	#__system___string_cmp
19ab8     00 FA 0D F2 | 	cmp	result1, #0 wz
19abc     20 00 90 5D |  if_ne	jmp	#LR__2043
19ac0     50 00 00 FF 
19ac4     F0 E4 05 F1 | 	add	objptr, ##41200
19ac8     F2 14 02 FB | 	rdlong	arg02, objptr
19acc     50 00 00 FF 
19ad0     F0 E4 85 F1 | 	sub	objptr, ##41200
19ad4     37 12 06 F6 | 	mov	arg01, #55
19ad8     4C 94 B0 FD | 	call	#_printerror
19adc     30 0C 90 FD | 	jmp	#LR__2091
19ae0                 | LR__2043
19ae0     34 4F 05 F1 | 	add	fp, #308
19ae4     A7 00 68 FC | 	wrlong	#0, fp
19ae8     2C 4F 85 F1 | 	sub	fp, #300
19aec     A7 26 02 FB | 	rdlong	local01, fp
19af0     01 26 86 F1 | 	sub	local01, #1
19af4     28 4F 05 F1 | 	add	fp, #296
19af8     A7 26 62 FC | 	wrlong	local01, fp
19afc     30 4F 85 F1 | 	sub	fp, #304
19b00                 | ' j=0
19b00                 | ' i=numpar-1
19b00                 | ' do
19b00                 | LR__2044
19b00                 | '   do
19b00                 | LR__2045
19b00     52 00 00 FF 
19b04     DC E4 05 F1 | 	add	objptr, ##42204
19b08     F2 14 02 FB | 	rdlong	arg02, objptr
19b0c     52 00 00 FF 
19b10     DC E4 85 F1 | 	sub	objptr, ##42204
19b14     B7 01 00 FF 
19b18     8E 17 06 F6 | 	mov	arg03, ##@LR__5951
19b1c     01 12 06 F6 | 	mov	arg01, #1
19b20     BC F3 B0 FD | 	call	#__system__Instr
19b24     0C 4E 05 F1 | 	add	fp, #12
19b28     A7 FA 61 FC | 	wrlong	result1, fp
19b2c                 | '     comma=instr(1,readline,"'") : if comma>0 then readline=left$(readline,comma-1) ' allows comments in data
19b2c     0C 4E 85 F1 | 	sub	fp, #12
19b30     01 FA 15 F2 | 	cmp	result1, #1 wc
19b34     3C 00 90 CD |  if_b	jmp	#LR__2046
19b38     52 00 00 FF 
19b3c     DC E4 05 F1 | 	add	objptr, ##42204
19b40     F2 12 02 FB | 	rdlong	arg01, objptr
19b44     52 00 00 FF 
19b48     DC E4 85 F1 | 	sub	objptr, ##42204
19b4c     0C 4E 05 F1 | 	add	fp, #12
19b50     A7 14 02 FB | 	rdlong	arg02, fp
19b54     0C 4E 85 F1 | 	sub	fp, #12
19b58     01 14 86 F1 | 	sub	arg02, #1
19b5c     38 EE B0 FD | 	call	#__system__Left_S
19b60     52 00 00 FF 
19b64     DC E4 05 F1 | 	add	objptr, ##42204
19b68     F2 FA 61 FC | 	wrlong	result1, objptr
19b6c     52 00 00 FF 
19b70     DC E4 85 F1 | 	sub	objptr, ##42204
19b74                 | LR__2046
19b74     52 00 00 FF 
19b78     DC E4 05 F1 | 	add	objptr, ##42204
19b7c     F2 14 02 FB | 	rdlong	arg02, objptr
19b80     52 00 00 FF 
19b84     DC E4 85 F1 | 	sub	objptr, ##42204
19b88     B7 01 00 FF 
19b8c     90 17 06 F6 | 	mov	arg03, ##@LR__5952
19b90     01 12 06 F6 | 	mov	arg01, #1
19b94     48 F3 B0 FD | 	call	#__system__Instr
19b98     0C 4E 05 F1 | 	add	fp, #12
19b9c     A7 FA 61 FC | 	wrlong	result1, fp
19ba0                 | '     comma=instr(1,readline,",")  
19ba0                 | '       if comma>0  then 
19ba0     0C 4E 85 F1 | 	sub	fp, #12
19ba4     01 FA 15 F2 | 	cmp	result1, #1 wc
19ba8     98 00 90 CD |  if_b	jmp	#LR__2049
19bac     52 00 00 FF 
19bb0     DC E4 05 F1 | 	add	objptr, ##42204
19bb4     F2 12 02 FB | 	rdlong	arg01, objptr
19bb8     52 00 00 FF 
19bbc     DC E4 85 F1 | 	sub	objptr, ##42204
19bc0     0C 4E 05 F1 | 	add	fp, #12
19bc4     A7 14 02 FB | 	rdlong	arg02, fp
19bc8     0C 4E 85 F1 | 	sub	fp, #12
19bcc     01 14 86 F1 | 	sub	arg02, #1
19bd0     C4 ED B0 FD | 	call	#__system__Left_S
19bd4     04 4E 05 F1 | 	add	fp, #4
19bd8     A7 FA 61 FC | 	wrlong	result1, fp
19bdc     04 4E 85 F1 | 	sub	fp, #4
19be0     52 00 00 FF 
19be4     DC E4 05 F1 | 	add	objptr, ##42204
19be8     F2 12 02 FB | 	rdlong	arg01, objptr
19bec     09 27 02 F6 | 	mov	local01, arg01
19bf0     52 00 00 FF 
19bf4     DC E4 85 F1 | 	sub	objptr, ##42204
19bf8     09 29 02 F6 | 	mov	local02, arg01
19bfc     97 06 48 FB | 	callpa	#(@LR__2048-@LR__2047)>>2,fcache_load_ptr_
19c00                 | LR__2047
19c00     14 FB C9 FA | 	rdbyte	result1, local02 wz
19c04     01 28 06 51 |  if_ne	add	local02, #1
19c08     F4 FF 9F 5D |  if_ne	jmp	#LR__2047
19c0c                 | LR__2048
19c0c     09 29 82 F1 | 	sub	local02, arg01
19c10     14 15 02 F6 | 	mov	arg02, local02
19c14     0C 4E 05 F1 | 	add	fp, #12
19c18     A7 16 02 FB | 	rdlong	arg03, fp
19c1c     0C 4E 85 F1 | 	sub	fp, #12
19c20     0B 15 82 F1 | 	sub	arg02, arg03
19c24     13 13 02 F6 | 	mov	arg01, local01
19c28     F4 ED B0 FD | 	call	#__system__Right_S
19c2c     52 00 00 FF 
19c30     DC E4 05 F1 | 	add	objptr, ##42204
19c34     F2 FA 61 FC | 	wrlong	result1, objptr
19c38     52 00 00 FF 
19c3c     DC E4 85 F1 | 	sub	objptr, ##42204
19c40     48 00 90 FD | 	jmp	#LR__2050
19c44                 | LR__2049
19c44     52 00 00 FF 
19c48     DC E4 05 F1 | 	add	objptr, ##42204
19c4c     F2 12 02 FB | 	rdlong	arg01, objptr
19c50     52 00 00 FF 
19c54     DC E4 85 F1 | 	sub	objptr, ##42204
19c58     CC F1 B0 FD | 	call	#__system__RTrim_S
19c5c     FD 12 02 F6 | 	mov	arg01, result1
19c60     04 F1 B0 FD | 	call	#__system__LTrim_S
19c64     04 4E 05 F1 | 	add	fp, #4
19c68     A7 FA 61 FC | 	wrlong	result1, fp
19c6c     04 4E 85 F1 | 	sub	fp, #4
19c70     B7 01 00 FF 
19c74     92 27 06 F6 | 	mov	local01, ##@LR__5953
19c78     52 00 00 FF 
19c7c     DC E4 05 F1 | 	add	objptr, ##42204
19c80     F2 26 62 FC | 	wrlong	local01, objptr
19c84     52 00 00 FF 
19c88     DC E4 85 F1 | 	sub	objptr, ##42204
19c8c                 | LR__2050
19c8c                 | '      
19c8c                 | '      if part$<>"" then j=j+1
19c8c     04 4E 05 F1 | 	add	fp, #4
19c90     A7 12 02 FB | 	rdlong	arg01, fp
19c94     04 4E 85 F1 | 	sub	fp, #4
19c98     B7 01 00 FF 
19c9c     93 15 06 F6 | 	mov	arg02, ##@LR__5954
19ca0     9C CC B0 FD | 	call	#__system___string_cmp
19ca4     00 FA 0D F2 | 	cmp	result1, #0 wz
19ca8     34 4F 05 51 |  if_ne	add	fp, #308
19cac     A7 26 02 5B |  if_ne	rdlong	local01, fp
19cb0     01 26 06 51 |  if_ne	add	local01, #1
19cb4     A7 26 62 5C |  if_ne	wrlong	local01, fp
19cb8     34 4F 85 51 |  if_ne	sub	fp, #308
19cbc     30 4F 05 F1 | 	add	fp, #304
19cc0     A7 26 02 FB | 	rdlong	local01, fp
19cc4     02 26 66 F0 | 	shl	local01, #2
19cc8     04 4F 85 F1 | 	sub	fp, #260
19ccc     A7 26 02 F1 | 	add	local01, fp
19cd0     28 4E 85 F1 | 	sub	fp, #40
19cd4     A7 FA 01 FB | 	rdlong	result1, fp
19cd8     13 FB 61 FC | 	wrlong	result1, local01
19cdc     2C 4F 05 F1 | 	add	fp, #300
19ce0     A7 26 02 FB | 	rdlong	local01, fp
19ce4     01 26 86 F1 | 	sub	local01, #1
19ce8     A7 26 62 FC | 	wrlong	local01, fp
19cec     30 4F 85 F1 | 	sub	fp, #304
19cf0                 | '      args(i)=part$  
19cf0                 | '      i=i-1
19cf0                 | '     if readline="" then readline=read_next_line() 
19cf0     52 00 00 FF 
19cf4     DC E4 05 F1 | 	add	objptr, ##42204
19cf8     F2 12 02 FB | 	rdlong	arg01, objptr
19cfc     52 00 00 FF 
19d00     DC E4 85 F1 | 	sub	objptr, ##42204
19d04     B7 01 00 FF 
19d08     94 15 06 F6 | 	mov	arg02, ##@LR__5955
19d0c     30 CC B0 FD | 	call	#__system___string_cmp
19d10     00 FA 0D F2 | 	cmp	result1, #0 wz
19d14     18 00 90 5D |  if_ne	jmp	#LR__2051
19d18     74 FA BF FD | 	call	#_read_next_line
19d1c     52 00 00 FF 
19d20     DC E4 05 F1 | 	add	objptr, ##42204
19d24     F2 FA 61 FC | 	wrlong	result1, objptr
19d28     52 00 00 FF 
19d2c     DC E4 85 F1 | 	sub	objptr, ##42204
19d30                 | LR__2051
19d30     30 4F 05 F1 | 	add	fp, #304
19d34     A7 26 02 FB | 	rdlong	local01, fp
19d38     30 4F 85 F1 | 	sub	fp, #304
19d3c     00 26 56 F2 | 	cmps	local01, #0 wc
19d40     28 00 90 CD |  if_b	jmp	#LR__2052
19d44     52 00 00 FF 
19d48     DC E4 05 F1 | 	add	objptr, ##42204
19d4c     F2 12 02 FB | 	rdlong	arg01, objptr
19d50     52 00 00 FF 
19d54     DC E4 85 F1 | 	sub	objptr, ##42204
19d58     B7 01 00 FF 
19d5c     95 15 06 F6 | 	mov	arg02, ##@LR__5956
19d60     DC CB B0 FD | 	call	#__system___string_cmp
19d64     00 FA 0D F2 | 	cmp	result1, #0 wz
19d68     94 FD 9F 5D |  if_ne	jmp	#LR__2045
19d6c                 | LR__2052
19d6c     30 4F 05 F1 | 	add	fp, #304
19d70     A7 26 02 FB | 	rdlong	local01, fp
19d74     30 4F 85 F1 | 	sub	fp, #304
19d78     00 26 56 F2 | 	cmps	local01, #0 wc
19d7c     80 FD 9F 3D |  if_ae	jmp	#LR__2044
19d80                 | ' if j<numpar then printerror(55,runheader(0))
19d80     34 4F 05 F1 | 	add	fp, #308
19d84     A7 26 02 FB | 	rdlong	local01, fp
19d88     2C 4F 85 F1 | 	sub	fp, #300
19d8c     A7 16 02 FB | 	rdlong	arg03, fp
19d90     08 4E 85 F1 | 	sub	fp, #8
19d94     0B 27 52 F2 | 	cmps	local01, arg03 wc
19d98     50 00 00 CF 
19d9c     F0 E4 05 C1 |  if_b	add	objptr, ##41200
19da0     F2 14 02 CB |  if_b	rdlong	arg02, objptr
19da4     50 00 00 CF 
19da8     F0 E4 85 C1 |  if_b	sub	objptr, ##41200
19dac     37 12 06 C6 |  if_b	mov	arg01, #55
19db0     74 91 B0 CD |  if_b	call	#_printerror
19db4                 | ' 
19db4                 | ' for i=0 to numpar-1
19db4     30 4F 05 F1 | 	add	fp, #304
19db8     A7 00 68 FC | 	wrlong	#0, fp
19dbc     28 4F 85 F1 | 	sub	fp, #296
19dc0     A7 2A 02 FB | 	rdlong	local03, fp
19dc4     08 4E 85 F1 | 	sub	fp, #8
19dc8                 | LR__2053
19dc8     30 4F 05 F1 | 	add	fp, #304
19dcc     A7 2C 02 FB | 	rdlong	local04, fp
19dd0     30 4F 85 F1 | 	sub	fp, #304
19dd4     16 27 02 F6 | 	mov	local01, local04
19dd8     15 27 52 F2 | 	cmps	local01, local03 wc
19ddc     30 09 90 3D |  if_ae	jmp	#LR__2090
19de0                 | '   if isnum(args(i)) and not isint(args(i)) then r=result_float 
19de0     30 4F 05 F1 | 	add	fp, #304
19de4     A7 16 02 FB | 	rdlong	arg03, fp
19de8     02 16 66 F0 | 	shl	arg03, #2
19dec     04 4F 85 F1 | 	sub	fp, #260
19df0     A7 16 02 F1 | 	add	arg03, fp
19df4     0B 13 02 FB | 	rdlong	arg01, arg03
19df8     2C 4E 85 F1 | 	sub	fp, #44
19dfc     0C CA BE FD | 	call	#_isnum
19e00     FD 2E 02 F6 | 	mov	local05, result1
19e04     30 4F 05 F1 | 	add	fp, #304
19e08     A7 16 02 FB | 	rdlong	arg03, fp
19e0c     02 16 66 F0 | 	shl	arg03, #2
19e10     04 4F 85 F1 | 	sub	fp, #260
19e14     A7 30 02 F6 | 	mov	local06, fp
19e18     A7 16 02 F1 | 	add	arg03, fp
19e1c     0B 13 02 FB | 	rdlong	arg01, arg03
19e20     2C 4E 85 F1 | 	sub	fp, #44
19e24     D0 CD BE FD | 	call	#_isint
19e28     FD 2E 2A F5 | 	andn	local05, result1 wz
19e2c     52 00 00 5F 
19e30     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e34     F2 3C 68 5C |  if_ne	wrlong	#30, objptr
19e38     52 00 00 5F 
19e3c     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e40                 | '   if isint(args(i)) then r=result_int 
19e40     30 4F 05 F1 | 	add	fp, #304
19e44     A7 2E 02 FB | 	rdlong	local05, fp
19e48     02 2E 66 F0 | 	shl	local05, #2
19e4c     04 4F 85 F1 | 	sub	fp, #260
19e50     A7 2E 02 F1 | 	add	local05, fp
19e54     17 13 02 FB | 	rdlong	arg01, local05
19e58     2C 4E 85 F1 | 	sub	fp, #44
19e5c     98 CD BE FD | 	call	#_isint
19e60     00 FA 0D F2 | 	cmp	result1, #0 wz
19e64     52 00 00 5F 
19e68     10 E5 05 51 |  if_ne	add	objptr, ##42256
19e6c     F2 38 68 5C |  if_ne	wrlong	#28, objptr
19e70     52 00 00 5F 
19e74     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19e78                 | '   if isdec(args(i)) then r=result_uint 
19e78     30 4F 05 F1 | 	add	fp, #304
19e7c     A7 2E 02 FB | 	rdlong	local05, fp
19e80     02 2E 66 F0 | 	shl	local05, #2
19e84     04 4F 85 F1 | 	sub	fp, #260
19e88     A7 2E 02 F1 | 	add	local05, fp
19e8c     17 13 02 FB | 	rdlong	arg01, local05
19e90     2C 4E 85 F1 | 	sub	fp, #44
19e94     04 D0 BE FD | 	call	#_isdec
19e98     00 FA 0D F2 | 	cmp	result1, #0 wz
19e9c     52 00 00 5F 
19ea0     10 E5 05 51 |  if_ne	add	objptr, ##42256
19ea4     F2 3A 68 5C |  if_ne	wrlong	#29, objptr
19ea8     52 00 00 5F 
19eac     10 E5 85 51 |  if_ne	sub	objptr, ##42256
19eb0                 | '   if not isnum(args(i)) then 
19eb0     30 4F 05 F1 | 	add	fp, #304
19eb4     A7 2E 02 FB | 	rdlong	local05, fp
19eb8     02 2E 66 F0 | 	shl	local05, #2
19ebc     04 4F 85 F1 | 	sub	fp, #260
19ec0     A7 2E 02 F1 | 	add	local05, fp
19ec4     17 13 02 FB | 	rdlong	arg01, local05
19ec8     2C 4E 85 F1 | 	sub	fp, #44
19ecc     3C C9 BE FD | 	call	#_isnum
19ed0     FD 2E 22 F6 | 	not	local05, result1
19ed4     00 2E 0E F2 | 	cmp	local05, #0 wz
19ed8     4C 01 90 AD |  if_e	jmp	#LR__2058
19edc     52 00 00 FF 
19ee0     10 E5 05 F1 | 	add	objptr, ##42256
19ee4     F2 56 68 FC | 	wrlong	#43, objptr
19ee8     52 00 00 FF 
19eec     10 E5 85 F1 | 	sub	objptr, ##42256
19ef0     30 4F 05 F1 | 	add	fp, #304
19ef4     A7 16 02 FB | 	rdlong	arg03, fp
19ef8     02 16 66 F0 | 	shl	arg03, #2
19efc     04 4F 85 F1 | 	sub	fp, #260
19f00     A7 16 02 F1 | 	add	arg03, fp
19f04     0B 13 02 FB | 	rdlong	arg01, arg03
19f08     2C 4E 85 F1 | 	sub	fp, #44
19f0c     09 29 02 F6 | 	mov	local02, arg01
19f10     97 06 48 FB | 	callpa	#(@LR__2055-@LR__2054)>>2,fcache_load_ptr_
19f14                 | LR__2054
19f14     14 FB C9 FA | 	rdbyte	result1, local02 wz
19f18     01 28 06 51 |  if_ne	add	local02, #1
19f1c     F4 FF 9F 5D |  if_ne	jmp	#LR__2054
19f20                 | LR__2055
19f20     09 29 82 F1 | 	sub	local02, arg01
19f24     14 FB 01 F6 | 	mov	result1, local02
19f28     38 4F 05 F1 | 	add	fp, #312
19f2c     A7 FA 61 FC | 	wrlong	result1, fp
19f30     52 00 00 FF 
19f34     98 E4 05 F1 | 	add	objptr, ##42136
19f38     F2 12 02 FB | 	rdlong	arg01, objptr
19f3c     FD 12 82 F1 | 	sub	arg01, result1
19f40     04 12 86 F1 | 	sub	arg01, #4
19f44     03 12 26 F5 | 	andn	arg01, #3
19f48     F2 12 62 FC | 	wrlong	arg01, objptr
19f4c     52 00 00 FF 
19f50     98 E4 85 F1 | 	sub	objptr, ##42136
19f54     A7 14 02 FB | 	rdlong	arg02, fp
19f58     38 4F 85 F1 | 	sub	fp, #312
19f5c     68 91 B0 FD | 	call	#_pslpoke
19f60                 | '     pslpoke memtop,l
19f60                 | '     for j=1 to l : pspoke memtop+3+j, asc(mid$(args(i),j,1)) : next j
19f60     34 4F 05 F1 | 	add	fp, #308
19f64     A7 02 68 FC | 	wrlong	#1, fp
19f68     04 4E 05 F1 | 	add	fp, #4
19f6c     A7 32 02 FB | 	rdlong	local07, fp
19f70     38 4F 85 F1 | 	sub	fp, #312
19f74     01 32 06 F1 | 	add	local07, #1
19f78                 | LR__2056
19f78     34 4F 05 F1 | 	add	fp, #308
19f7c     A7 2E 02 FB | 	rdlong	local05, fp
19f80     34 4F 85 F1 | 	sub	fp, #308
19f84     19 2F 52 F2 | 	cmps	local05, local07 wc
19f88     7C 00 90 3D |  if_ae	jmp	#LR__2057
19f8c     52 00 00 FF 
19f90     98 E4 05 F1 | 	add	objptr, ##42136
19f94     F2 30 02 FB | 	rdlong	local06, objptr
19f98     52 00 00 FF 
19f9c     98 E4 85 F1 | 	sub	objptr, ##42136
19fa0     03 30 06 F1 | 	add	local06, #3
19fa4     34 4F 05 F1 | 	add	fp, #308
19fa8     A7 34 02 FB | 	rdlong	local08, fp
19fac     1A 31 02 F1 | 	add	local06, local08
19fb0     04 4E 85 F1 | 	sub	fp, #4
19fb4     A7 36 02 FB | 	rdlong	local09, fp
19fb8     02 36 66 F0 | 	shl	local09, #2
19fbc     04 4F 85 F1 | 	sub	fp, #260
19fc0     A7 38 02 F6 | 	mov	local10, fp
19fc4     A7 36 02 F1 | 	add	local09, fp
19fc8     1B 13 02 FB | 	rdlong	arg01, local09
19fcc     2C 4E 85 F1 | 	sub	fp, #44
19fd0     01 3A 06 F6 | 	mov	local11, #1
19fd4     1A 15 02 F6 | 	mov	arg02, local08
19fd8     01 16 06 F6 | 	mov	arg03, #1
19fdc     D0 EA B0 FD | 	call	#__system__Mid_S
19fe0     FD 14 C2 FA | 	rdbyte	arg02, result1
19fe4     18 13 02 F6 | 	mov	arg01, local06
19fe8     6C 91 B0 FD | 	call	#_pspoke
19fec     34 4F 05 F1 | 	add	fp, #308
19ff0     A7 30 02 FB | 	rdlong	local06, fp
19ff4     18 2F 02 F6 | 	mov	local05, local06
19ff8     01 2E 06 F1 | 	add	local05, #1
19ffc     A7 2E 62 FC | 	wrlong	local05, fp
1a000     34 4F 85 F1 | 	sub	fp, #308
1a004     70 FF 9F FD | 	jmp	#LR__2056
1a008                 | LR__2057
1a008     52 00 00 FF 
1a00c     98 E4 05 F1 | 	add	objptr, ##42136
1a010     F2 2E 02 FB | 	rdlong	local05, objptr
1a014     52 00 00 FF 
1a018     98 E4 85 F1 | 	sub	objptr, ##42136
1a01c     10 4E 05 F1 | 	add	fp, #16
1a020     A7 2E 62 FC | 	wrlong	local05, fp
1a024     10 4E 85 F1 | 	sub	fp, #16
1a028                 | LR__2058
1a028     5C 35 BF FD | 	call	#_pop
1a02c     1C 4E 05 F1 | 	add	fp, #28
1a030     A7 FA 61 FC | 	wrlong	result1, fp
1a034     04 4E 05 F1 | 	add	fp, #4
1a038     A7 FC 61 FC | 	wrlong	result2, fp
1a03c     04 4E 05 F1 | 	add	fp, #4
1a040     A7 FE 61 FC | 	wrlong	result3, fp
1a044                 | '   t1=pop() 
1a044                 | '   if i>=numpar-j then
1a044     1C 4E 85 F1 | 	sub	fp, #28
1a048     A7 2E 02 FB | 	rdlong	local05, fp
1a04c     17 3D 02 F6 | 	mov	local12, local05
1a050     2C 4F 05 F1 | 	add	fp, #300
1a054     A7 3E 02 FB | 	rdlong	local13, fp
1a058     1F 41 02 F6 | 	mov	local14, local13
1a05c     20 3D 82 F1 | 	sub	local12, local14
1a060     04 4E 85 F1 | 	sub	fp, #4
1a064     A7 42 02 FB | 	rdlong	local15, fp
1a068     30 4F 85 F1 | 	sub	fp, #304
1a06c     21 45 02 F6 | 	mov	local16, local15
1a070     1E 45 52 F2 | 	cmps	local16, local12 wc
1a074     80 06 90 CD |  if_b	jmp	#LR__2089
1a078     20 4E 05 F1 | 	add	fp, #32
1a07c     A7 3C 02 FB | 	rdlong	local12, fp
1a080     0C 4E 85 F1 | 	sub	fp, #12
1a084     A7 3C 62 FC | 	wrlong	local12, fp
1a088                 | '     vartype=t1.result.twowords(1)
1a088                 | '     select case vartype
1a088     14 4E 85 F1 | 	sub	fp, #20
1a08c     1E 47 0A F6 | 	mov	local17, local12 wz
1a090     64 00 90 AD |  if_e	jmp	#LR__2059
1a094     00 47 0E F2 | 	cmp	local17, #256 wz
1a098     6C 00 90 AD |  if_e	jmp	#LR__2060
1a09c     01 47 0E F2 | 	cmp	local17, #257 wz
1a0a0     74 00 90 AD |  if_e	jmp	#LR__2061
1a0a4     02 47 0E F2 | 	cmp	local17, #258 wz
1a0a8     7C 00 90 AD |  if_e	jmp	#LR__2062
1a0ac     03 47 0E F2 | 	cmp	local17, #259 wz
1a0b0     84 00 90 AD |  if_e	jmp	#LR__2063
1a0b4     04 47 0E F2 | 	cmp	local17, #260 wz
1a0b8     8C 00 90 AD |  if_e	jmp	#LR__2064
1a0bc     05 47 0E F2 | 	cmp	local17, #261 wz
1a0c0     94 00 90 AD |  if_e	jmp	#LR__2065
1a0c4     06 47 0E F2 | 	cmp	local17, #262 wz
1a0c8     9C 00 90 AD |  if_e	jmp	#LR__2066
1a0cc     07 47 0E F2 | 	cmp	local17, #263 wz
1a0d0     A4 00 90 AD |  if_e	jmp	#LR__2067
1a0d4     08 47 0E F2 | 	cmp	local17, #264 wz
1a0d8     AC 00 90 AD |  if_e	jmp	#LR__2068
1a0dc     09 47 0E F2 | 	cmp	local17, #265 wz
1a0e0     B4 00 90 AD |  if_e	jmp	#LR__2069
1a0e4     0A 47 0E F2 | 	cmp	local17, #266 wz
1a0e8     BC 00 90 AD |  if_e	jmp	#LR__2070
1a0ec     0B 47 0E F2 | 	cmp	local17, #267 wz
1a0f0     C4 00 90 AD |  if_e	jmp	#LR__2071
1a0f4     D0 00 90 FD | 	jmp	#LR__2072
1a0f8                 | LR__2059
1a0f8     18 4E 05 F1 | 	add	fp, #24
1a0fc     A7 18 68 FC | 	wrlong	#12, fp
1a100     18 4E 85 F1 | 	sub	fp, #24
1a104     CC 00 90 FD | 	jmp	#LR__2073
1a108                 | LR__2060
1a108     18 4E 05 F1 | 	add	fp, #24
1a10c     A7 18 68 FC | 	wrlong	#12, fp
1a110     18 4E 85 F1 | 	sub	fp, #24
1a114     BC 00 90 FD | 	jmp	#LR__2073
1a118                 | LR__2061
1a118     18 4E 05 F1 | 	add	fp, #24
1a11c     A7 02 68 FC | 	wrlong	#1, fp
1a120     18 4E 85 F1 | 	sub	fp, #24
1a124     AC 00 90 FD | 	jmp	#LR__2073
1a128                 | LR__2062
1a128     18 4E 05 F1 | 	add	fp, #24
1a12c     A7 02 68 FC | 	wrlong	#1, fp
1a130     18 4E 85 F1 | 	sub	fp, #24
1a134     9C 00 90 FD | 	jmp	#LR__2073
1a138                 | LR__2063
1a138     18 4E 05 F1 | 	add	fp, #24
1a13c     A7 04 68 FC | 	wrlong	#2, fp
1a140     18 4E 85 F1 | 	sub	fp, #24
1a144     8C 00 90 FD | 	jmp	#LR__2073
1a148                 | LR__2064
1a148     18 4E 05 F1 | 	add	fp, #24
1a14c     A7 04 68 FC | 	wrlong	#2, fp
1a150     18 4E 85 F1 | 	sub	fp, #24
1a154     7C 00 90 FD | 	jmp	#LR__2073
1a158                 | LR__2065
1a158     18 4E 05 F1 | 	add	fp, #24
1a15c     A7 08 68 FC | 	wrlong	#4, fp
1a160     18 4E 85 F1 | 	sub	fp, #24
1a164     6C 00 90 FD | 	jmp	#LR__2073
1a168                 | LR__2066
1a168     18 4E 05 F1 | 	add	fp, #24
1a16c     A7 08 68 FC | 	wrlong	#4, fp
1a170     18 4E 85 F1 | 	sub	fp, #24
1a174     5C 00 90 FD | 	jmp	#LR__2073
1a178                 | LR__2067
1a178     18 4E 05 F1 | 	add	fp, #24
1a17c     A7 10 68 FC | 	wrlong	#8, fp
1a180     18 4E 85 F1 | 	sub	fp, #24
1a184     4C 00 90 FD | 	jmp	#LR__2073
1a188                 | LR__2068
1a188     18 4E 05 F1 | 	add	fp, #24
1a18c     A7 10 68 FC | 	wrlong	#8, fp
1a190     18 4E 85 F1 | 	sub	fp, #24
1a194     3C 00 90 FD | 	jmp	#LR__2073
1a198                 | LR__2069
1a198     18 4E 05 F1 | 	add	fp, #24
1a19c     A7 0C 68 FC | 	wrlong	#6, fp
1a1a0     18 4E 85 F1 | 	sub	fp, #24
1a1a4     2C 00 90 FD | 	jmp	#LR__2073
1a1a8                 | LR__2070
1a1a8     18 4E 05 F1 | 	add	fp, #24
1a1ac     A7 10 68 FC | 	wrlong	#8, fp
1a1b0     18 4E 85 F1 | 	sub	fp, #24
1a1b4     1C 00 90 FD | 	jmp	#LR__2073
1a1b8                 | LR__2071
1a1b8     18 4E 05 F1 | 	add	fp, #24
1a1bc     A7 0A 68 FC | 	wrlong	#5, fp
1a1c0     18 4E 85 F1 | 	sub	fp, #24
1a1c4     0C 00 90 FD | 	jmp	#LR__2073
1a1c8                 | LR__2072
1a1c8     18 4E 05 F1 | 	add	fp, #24
1a1cc     A7 18 68 FC | 	wrlong	#12, fp
1a1d0     18 4E 85 F1 | 	sub	fp, #24
1a1d4                 | LR__2073
1a1d4                 | '     if esize=12 andalso t1.result.uresult<$80000 then
1a1d4     18 4E 05 F1 | 	add	fp, #24
1a1d8     A7 3C 02 FB | 	rdlong	local12, fp
1a1dc     18 4E 85 F1 | 	sub	fp, #24
1a1e0     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a1e4     74 01 90 5D |  if_ne	jmp	#LR__2078
1a1e8     1C 4E 05 F1 | 	add	fp, #28
1a1ec     A7 3E 02 FB | 	rdlong	local13, fp
1a1f0     1C 4E 85 F1 | 	sub	fp, #28
1a1f4     00 04 00 FF 
1a1f8     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a1fc     5C 01 90 3D |  if_ae	jmp	#LR__2078
1a200                 | '       if r=result_int then lpoke t1.result.uresult, val%(args(i))
1a200     52 00 00 FF 
1a204     10 E5 05 F1 | 	add	objptr, ##42256
1a208     F2 3C 02 FB | 	rdlong	local12, objptr
1a20c     52 00 00 FF 
1a210     10 E5 85 F1 | 	sub	objptr, ##42256
1a214     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a218     38 00 90 5D |  if_ne	jmp	#LR__2074
1a21c     1C 4E 05 F1 | 	add	fp, #28
1a220     A7 3C 02 FB | 	rdlong	local12, fp
1a224     14 4F 05 F1 | 	add	fp, #276
1a228     A7 3E 02 FB | 	rdlong	local13, fp
1a22c     1F 45 02 F6 | 	mov	local16, local13
1a230     02 44 66 F0 | 	shl	local16, #2
1a234     04 4F 85 F1 | 	sub	fp, #260
1a238     A7 42 02 F6 | 	mov	local15, fp
1a23c     A7 44 02 F1 | 	add	local16, fp
1a240     22 13 02 FB | 	rdlong	arg01, local16
1a244     00 14 06 F6 | 	mov	arg02, #0
1a248     2C 4E 85 F1 | 	sub	fp, #44
1a24c     BC FB B0 FD | 	call	#__system____builtin_atoi
1a250     1E FB 61 FC | 	wrlong	result1, local12
1a254                 | LR__2074
1a254                 | '       if r=result_uint then lpoke t1.result.uresult, val%(args(i))
1a254     52 00 00 FF 
1a258     10 E5 05 F1 | 	add	objptr, ##42256
1a25c     F2 3C 02 FB | 	rdlong	local12, objptr
1a260     52 00 00 FF 
1a264     10 E5 85 F1 | 	sub	objptr, ##42256
1a268     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a26c     38 00 90 5D |  if_ne	jmp	#LR__2075
1a270     1C 4E 05 F1 | 	add	fp, #28
1a274     A7 3C 02 FB | 	rdlong	local12, fp
1a278     14 4F 05 F1 | 	add	fp, #276
1a27c     A7 3E 02 FB | 	rdlong	local13, fp
1a280     1F 45 02 F6 | 	mov	local16, local13
1a284     02 44 66 F0 | 	shl	local16, #2
1a288     04 4F 85 F1 | 	sub	fp, #260
1a28c     A7 42 02 F6 | 	mov	local15, fp
1a290     A7 44 02 F1 | 	add	local16, fp
1a294     22 13 02 FB | 	rdlong	arg01, local16
1a298     00 14 06 F6 | 	mov	arg02, #0
1a29c     2C 4E 85 F1 | 	sub	fp, #44
1a2a0     68 FB B0 FD | 	call	#__system____builtin_atoi
1a2a4     1E FB 61 FC | 	wrlong	result1, local12
1a2a8                 | LR__2075
1a2a8                 | '       if r=result_float then fval=val(args(i)): lpoke t1.result.uresult,lpeek(varptr(fval))
1a2a8     52 00 00 FF 
1a2ac     10 E5 05 F1 | 	add	objptr, ##42256
1a2b0     F2 3C 02 FB | 	rdlong	local12, objptr
1a2b4     52 00 00 FF 
1a2b8     10 E5 85 F1 | 	sub	objptr, ##42256
1a2bc     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a2c0     3C 00 90 5D |  if_ne	jmp	#LR__2076
1a2c4     30 4F 05 F1 | 	add	fp, #304
1a2c8     A7 3E 02 FB | 	rdlong	local13, fp
1a2cc     02 3E 66 F0 | 	shl	local13, #2
1a2d0     04 4F 85 F1 | 	sub	fp, #260
1a2d4     A7 44 02 F6 | 	mov	local16, fp
1a2d8     A7 3E 02 F1 | 	add	local13, fp
1a2dc     1F 13 02 FB | 	rdlong	arg01, local13
1a2e0     2C 4E 85 F1 | 	sub	fp, #44
1a2e4     B8 FC B0 FD | 	call	#__system____builtin_atof
1a2e8     28 4E 05 F1 | 	add	fp, #40
1a2ec     A7 FA 61 FC | 	wrlong	result1, fp
1a2f0     0C 4E 85 F1 | 	sub	fp, #12
1a2f4     A7 3C 02 FB | 	rdlong	local12, fp
1a2f8     1C 4E 85 F1 | 	sub	fp, #28
1a2fc     1E FB 61 FC | 	wrlong	result1, local12
1a300                 | LR__2076
1a300                 | '       if r=result_string2 then lpoke t1.result.uresult,stringaddr
1a300     52 00 00 FF 
1a304     10 E5 05 F1 | 	add	objptr, ##42256
1a308     F2 3C 02 FB | 	rdlong	local12, objptr
1a30c     52 00 00 FF 
1a310     10 E5 85 F1 | 	sub	objptr, ##42256
1a314     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a318     18 00 90 5D |  if_ne	jmp	#LR__2077
1a31c     1C 4E 05 F1 | 	add	fp, #28
1a320     A7 12 02 FB | 	rdlong	arg01, fp
1a324     0C 4E 85 F1 | 	sub	fp, #12
1a328     A7 14 02 FB | 	rdlong	arg02, fp
1a32c     10 4E 85 F1 | 	sub	fp, #16
1a330     09 15 62 FC | 	wrlong	arg02, arg01
1a334                 | LR__2077
1a334     1C 4E 05 F1 | 	add	fp, #28
1a338     A7 12 02 FB | 	rdlong	arg01, fp
1a33c     1C 4E 85 F1 | 	sub	fp, #28
1a340     08 12 06 F1 | 	add	arg01, #8
1a344     52 00 00 FF 
1a348     10 E5 05 F1 | 	add	objptr, ##42256
1a34c     F2 14 02 FB | 	rdlong	arg02, objptr
1a350     52 00 00 FF 
1a354     10 E5 85 F1 | 	sub	objptr, ##42256
1a358     09 15 62 FC | 	wrlong	arg02, arg01
1a35c                 | LR__2078
1a35c                 | '     if esize=12 andalso t1.result.uresult>=$80000 then
1a35c     18 4E 05 F1 | 	add	fp, #24
1a360     A7 3C 02 FB | 	rdlong	local12, fp
1a364     18 4E 85 F1 | 	sub	fp, #24
1a368     0C 3C 0E F2 | 	cmp	local12, #12 wz
1a36c     94 01 90 5D |  if_ne	jmp	#LR__2083
1a370     1C 4E 05 F1 | 	add	fp, #28
1a374     A7 3E 02 FB | 	rdlong	local13, fp
1a378     1C 4E 85 F1 | 	sub	fp, #28
1a37c     00 04 00 FF 
1a380     00 3E 16 F2 | 	cmp	local13, ##524288 wc
1a384     7C 01 90 CD |  if_b	jmp	#LR__2083
1a388                 | '       if r=result_int then pslpoke t1.result.uresult, val%(args(i))
1a388     52 00 00 FF 
1a38c     10 E5 05 F1 | 	add	objptr, ##42256
1a390     F2 3C 02 FB | 	rdlong	local12, objptr
1a394     52 00 00 FF 
1a398     10 E5 85 F1 | 	sub	objptr, ##42256
1a39c     1C 3C 0E F2 | 	cmp	local12, #28 wz
1a3a0     40 00 90 5D |  if_ne	jmp	#LR__2079
1a3a4     1C 4E 05 F1 | 	add	fp, #28
1a3a8     A7 3C 02 FB | 	rdlong	local12, fp
1a3ac     14 4F 05 F1 | 	add	fp, #276
1a3b0     A7 3E 02 FB | 	rdlong	local13, fp
1a3b4     1F 45 02 F6 | 	mov	local16, local13
1a3b8     02 44 66 F0 | 	shl	local16, #2
1a3bc     04 4F 85 F1 | 	sub	fp, #260
1a3c0     A7 42 02 F6 | 	mov	local15, fp
1a3c4     A7 44 02 F1 | 	add	local16, fp
1a3c8     22 13 02 FB | 	rdlong	arg01, local16
1a3cc     00 14 06 F6 | 	mov	arg02, #0
1a3d0     2C 4E 85 F1 | 	sub	fp, #44
1a3d4     34 FA B0 FD | 	call	#__system____builtin_atoi
1a3d8     FD 14 02 F6 | 	mov	arg02, result1
1a3dc     1E 13 02 F6 | 	mov	arg01, local12
1a3e0     E4 8C B0 FD | 	call	#_pslpoke
1a3e4                 | LR__2079
1a3e4                 | '       if r=result_uint then pslpoke t1.result.uresult, val%(args(i))
1a3e4     52 00 00 FF 
1a3e8     10 E5 05 F1 | 	add	objptr, ##42256
1a3ec     F2 3C 02 FB | 	rdlong	local12, objptr
1a3f0     52 00 00 FF 
1a3f4     10 E5 85 F1 | 	sub	objptr, ##42256
1a3f8     1D 3C 0E F2 | 	cmp	local12, #29 wz
1a3fc     40 00 90 5D |  if_ne	jmp	#LR__2080
1a400     1C 4E 05 F1 | 	add	fp, #28
1a404     A7 3C 02 FB | 	rdlong	local12, fp
1a408     14 4F 05 F1 | 	add	fp, #276
1a40c     A7 3E 02 FB | 	rdlong	local13, fp
1a410     1F 45 02 F6 | 	mov	local16, local13
1a414     02 44 66 F0 | 	shl	local16, #2
1a418     04 4F 85 F1 | 	sub	fp, #260
1a41c     A7 42 02 F6 | 	mov	local15, fp
1a420     A7 44 02 F1 | 	add	local16, fp
1a424     22 13 02 FB | 	rdlong	arg01, local16
1a428     00 14 06 F6 | 	mov	arg02, #0
1a42c     2C 4E 85 F1 | 	sub	fp, #44
1a430     D8 F9 B0 FD | 	call	#__system____builtin_atoi
1a434     FD 14 02 F6 | 	mov	arg02, result1
1a438     1E 13 02 F6 | 	mov	arg01, local12
1a43c     88 8C B0 FD | 	call	#_pslpoke
1a440                 | LR__2080
1a440                 | '       if r=result_float then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a440     52 00 00 FF 
1a444     10 E5 05 F1 | 	add	objptr, ##42256
1a448     F2 3C 02 FB | 	rdlong	local12, objptr
1a44c     52 00 00 FF 
1a450     10 E5 85 F1 | 	sub	objptr, ##42256
1a454     1E 3C 0E F2 | 	cmp	local12, #30 wz
1a458     4C 00 90 5D |  if_ne	jmp	#LR__2081
1a45c     30 4F 05 F1 | 	add	fp, #304
1a460     A7 3E 02 FB | 	rdlong	local13, fp
1a464     02 3E 66 F0 | 	shl	local13, #2
1a468     04 4F 85 F1 | 	sub	fp, #260
1a46c     A7 44 02 F6 | 	mov	local16, fp
1a470     A7 3E 02 F1 | 	add	local13, fp
1a474     1F 13 02 FB | 	rdlong	arg01, local13
1a478     2C 4E 85 F1 | 	sub	fp, #44
1a47c     20 FB B0 FD | 	call	#__system____builtin_atof
1a480     28 4E 05 F1 | 	add	fp, #40
1a484     A7 FA 61 FC | 	wrlong	result1, fp
1a488     0C 4E 85 F1 | 	sub	fp, #12
1a48c     A7 3C 02 FB | 	rdlong	local12, fp
1a490     0C 4E 05 F1 | 	add	fp, #12
1a494     A7 12 02 F6 | 	mov	arg01, fp
1a498     28 4E 85 F1 | 	sub	fp, #40
1a49c     09 15 02 FB | 	rdlong	arg02, arg01
1a4a0     1E 13 02 F6 | 	mov	arg01, local12
1a4a4     20 8C B0 FD | 	call	#_pslpoke
1a4a8                 | LR__2081
1a4a8                 | '       if r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a4a8     52 00 00 FF 
1a4ac     10 E5 05 F1 | 	add	objptr, ##42256
1a4b0     F2 3C 02 FB | 	rdlong	local12, objptr
1a4b4     52 00 00 FF 
1a4b8     10 E5 85 F1 | 	sub	objptr, ##42256
1a4bc     2B 3C 0E F2 | 	cmp	local12, #43 wz
1a4c0     18 00 90 5D |  if_ne	jmp	#LR__2082
1a4c4     1C 4E 05 F1 | 	add	fp, #28
1a4c8     A7 12 02 FB | 	rdlong	arg01, fp
1a4cc     0C 4E 85 F1 | 	sub	fp, #12
1a4d0     A7 14 02 FB | 	rdlong	arg02, fp
1a4d4     10 4E 85 F1 | 	sub	fp, #16
1a4d8     EC 8B B0 FD | 	call	#_pslpoke
1a4dc                 | LR__2082
1a4dc     1C 4E 05 F1 | 	add	fp, #28
1a4e0     A7 12 02 FB | 	rdlong	arg01, fp
1a4e4     1C 4E 85 F1 | 	sub	fp, #28
1a4e8     08 12 06 F1 | 	add	arg01, #8
1a4ec     52 00 00 FF 
1a4f0     10 E5 05 F1 | 	add	objptr, ##42256
1a4f4     F2 14 02 FB | 	rdlong	arg02, objptr
1a4f8     52 00 00 FF 
1a4fc     10 E5 85 F1 | 	sub	objptr, ##42256
1a500     C4 8B B0 FD | 	call	#_pslpoke
1a504                 | LR__2083
1a504                 | '     if esize=5 andalso r=result_string2 then pslpoke t1.result.uresult,stringaddr
1a504     18 4E 05 F1 | 	add	fp, #24
1a508     A7 3C 02 FB | 	rdlong	local12, fp
1a50c     18 4E 85 F1 | 	sub	fp, #24
1a510     05 3C 0E F2 | 	cmp	local12, #5 wz
1a514     52 00 00 AF 
1a518     10 E5 05 A1 |  if_e	add	objptr, ##42256
1a51c     F2 40 02 AB |  if_e	rdlong	local14, objptr
1a520     52 00 00 AF 
1a524     10 E5 85 A1 |  if_e	sub	objptr, ##42256
1a528     2B 40 0E A2 |  if_e	cmp	local14, #43 wz
1a52c     18 00 90 5D |  if_ne	jmp	#LR__2084
1a530     1C 4E 05 F1 | 	add	fp, #28
1a534     A7 12 02 FB | 	rdlong	arg01, fp
1a538     0C 4E 85 F1 | 	sub	fp, #12
1a53c     A7 14 02 FB | 	rdlong	arg02, fp
1a540     10 4E 85 F1 | 	sub	fp, #16
1a544     80 8B B0 FD | 	call	#_pslpoke
1a548                 | LR__2084
1a548                 | '     if esize=4 andalso r<>result_string2 then pslpoke t1.result.uresult,val%(args(i))
1a548     18 4E 05 F1 | 	add	fp, #24
1a54c     A7 3C 02 FB | 	rdlong	local12, fp
1a550     18 4E 85 F1 | 	sub	fp, #24
1a554     04 3C 0E F2 | 	cmp	local12, #4 wz
1a558     54 00 90 5D |  if_ne	jmp	#LR__2085
1a55c     52 00 00 FF 
1a560     10 E5 05 F1 | 	add	objptr, ##42256
1a564     F2 40 02 FB | 	rdlong	local14, objptr
1a568     52 00 00 FF 
1a56c     10 E5 85 F1 | 	sub	objptr, ##42256
1a570     2B 40 0E F2 | 	cmp	local14, #43 wz
1a574     38 00 90 AD |  if_e	jmp	#LR__2085
1a578     1C 4E 05 F1 | 	add	fp, #28
1a57c     A7 3C 02 FB | 	rdlong	local12, fp
1a580     14 4F 05 F1 | 	add	fp, #276
1a584     A7 44 02 FB | 	rdlong	local16, fp
1a588     02 44 66 F0 | 	shl	local16, #2
1a58c     04 4F 85 F1 | 	sub	fp, #260
1a590     A7 44 02 F1 | 	add	local16, fp
1a594     22 13 02 FB | 	rdlong	arg01, local16
1a598     00 14 06 F6 | 	mov	arg02, #0
1a59c     2C 4E 85 F1 | 	sub	fp, #44
1a5a0     68 F8 B0 FD | 	call	#__system____builtin_atoi
1a5a4     FD 14 02 F6 | 	mov	arg02, result1
1a5a8     1E 13 02 F6 | 	mov	arg01, local12
1a5ac     18 8B B0 FD | 	call	#_pslpoke
1a5b0                 | LR__2085
1a5b0                 | '     if esize=2 andalso r<>result_string2 then psdpoke t1.result.uresult,val%(args(i))
1a5b0     18 4E 05 F1 | 	add	fp, #24
1a5b4     A7 3C 02 FB | 	rdlong	local12, fp
1a5b8     18 4E 85 F1 | 	sub	fp, #24
1a5bc     02 3C 0E F2 | 	cmp	local12, #2 wz
1a5c0     54 00 90 5D |  if_ne	jmp	#LR__2086
1a5c4     52 00 00 FF 
1a5c8     10 E5 05 F1 | 	add	objptr, ##42256
1a5cc     F2 40 02 FB | 	rdlong	local14, objptr
1a5d0     52 00 00 FF 
1a5d4     10 E5 85 F1 | 	sub	objptr, ##42256
1a5d8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a5dc     38 00 90 AD |  if_e	jmp	#LR__2086
1a5e0     1C 4E 05 F1 | 	add	fp, #28
1a5e4     A7 3C 02 FB | 	rdlong	local12, fp
1a5e8     14 4F 05 F1 | 	add	fp, #276
1a5ec     A7 44 02 FB | 	rdlong	local16, fp
1a5f0     02 44 66 F0 | 	shl	local16, #2
1a5f4     04 4F 85 F1 | 	sub	fp, #260
1a5f8     A7 44 02 F1 | 	add	local16, fp
1a5fc     22 13 02 FB | 	rdlong	arg01, local16
1a600     00 14 06 F6 | 	mov	arg02, #0
1a604     2C 4E 85 F1 | 	sub	fp, #44
1a608     00 F8 B0 FD | 	call	#__system____builtin_atoi
1a60c     FD 14 02 F6 | 	mov	arg02, result1
1a610     1E 13 02 F6 | 	mov	arg01, local12
1a614     F8 8A B0 FD | 	call	#_psdpoke
1a618                 | LR__2086
1a618                 | '     if esize=1 andalso r<>result_string2 then pspoke t1.result.uresult,val%(args(i))
1a618     18 4E 05 F1 | 	add	fp, #24
1a61c     A7 3C 02 FB | 	rdlong	local12, fp
1a620     18 4E 85 F1 | 	sub	fp, #24
1a624     01 3C 0E F2 | 	cmp	local12, #1 wz
1a628     54 00 90 5D |  if_ne	jmp	#LR__2087
1a62c     52 00 00 FF 
1a630     10 E5 05 F1 | 	add	objptr, ##42256
1a634     F2 40 02 FB | 	rdlong	local14, objptr
1a638     52 00 00 FF 
1a63c     10 E5 85 F1 | 	sub	objptr, ##42256
1a640     2B 40 0E F2 | 	cmp	local14, #43 wz
1a644     38 00 90 AD |  if_e	jmp	#LR__2087
1a648     1C 4E 05 F1 | 	add	fp, #28
1a64c     A7 3C 02 FB | 	rdlong	local12, fp
1a650     14 4F 05 F1 | 	add	fp, #276
1a654     A7 44 02 FB | 	rdlong	local16, fp
1a658     02 44 66 F0 | 	shl	local16, #2
1a65c     04 4F 85 F1 | 	sub	fp, #260
1a660     A7 44 02 F1 | 	add	local16, fp
1a664     22 13 02 FB | 	rdlong	arg01, local16
1a668     00 14 06 F6 | 	mov	arg02, #0
1a66c     2C 4E 85 F1 | 	sub	fp, #44
1a670     98 F7 B0 FD | 	call	#__system____builtin_atoi
1a674     FD 14 02 F6 | 	mov	arg02, result1
1a678     1E 13 02 F6 | 	mov	arg01, local12
1a67c     D8 8A B0 FD | 	call	#_pspoke
1a680                 | LR__2087
1a680                 | '     if esize=6 andalso r<>result_string2 then fval=val(args(i)): pslpoke t1.result.uresult,lpeek(varptr(fval))
1a680     18 4E 05 F1 | 	add	fp, #24
1a684     A7 3C 02 FB | 	rdlong	local12, fp
1a688     18 4E 85 F1 | 	sub	fp, #24
1a68c     06 3C 0E F2 | 	cmp	local12, #6 wz
1a690     64 00 90 5D |  if_ne	jmp	#LR__2088
1a694     52 00 00 FF 
1a698     10 E5 05 F1 | 	add	objptr, ##42256
1a69c     F2 40 02 FB | 	rdlong	local14, objptr
1a6a0     52 00 00 FF 
1a6a4     10 E5 85 F1 | 	sub	objptr, ##42256
1a6a8     2B 40 0E F2 | 	cmp	local14, #43 wz
1a6ac     48 00 90 AD |  if_e	jmp	#LR__2088
1a6b0     30 4F 05 F1 | 	add	fp, #304
1a6b4     A7 3E 02 FB | 	rdlong	local13, fp
1a6b8     02 3E 66 F0 | 	shl	local13, #2
1a6bc     04 4F 85 F1 | 	sub	fp, #260
1a6c0     A7 3E 02 F1 | 	add	local13, fp
1a6c4     1F 13 02 FB | 	rdlong	arg01, local13
1a6c8     2C 4E 85 F1 | 	sub	fp, #44
1a6cc     D0 F8 B0 FD | 	call	#__system____builtin_atof
1a6d0     28 4E 05 F1 | 	add	fp, #40
1a6d4     A7 FA 61 FC | 	wrlong	result1, fp
1a6d8     0C 4E 85 F1 | 	sub	fp, #12
1a6dc     A7 3C 02 FB | 	rdlong	local12, fp
1a6e0     0C 4E 05 F1 | 	add	fp, #12
1a6e4     A7 12 02 F6 | 	mov	arg01, fp
1a6e8     28 4E 85 F1 | 	sub	fp, #40
1a6ec     09 15 02 FB | 	rdlong	arg02, arg01
1a6f0     1E 13 02 F6 | 	mov	arg01, local12
1a6f4     D0 89 B0 FD | 	call	#_pslpoke
1a6f8                 | LR__2088
1a6f8                 | LR__2089
1a6f8     30 4F 05 F1 | 	add	fp, #304
1a6fc     A7 40 02 FB | 	rdlong	local14, fp
1a700     01 40 06 F1 | 	add	local14, #1
1a704     A7 40 62 FC | 	wrlong	local14, fp
1a708     30 4F 85 F1 | 	sub	fp, #304
1a70c     B8 F6 9F FD | 	jmp	#LR__2053
1a710                 | LR__2090
1a710                 | LR__2091
1a710     A7 F0 03 F6 | 	mov	ptra, fp
1a714     B2 00 A0 FD | 	call	#popregs_
1a718                 | _do_read_ret
1a718     2D 00 64 FD | 	ret
1a71c                 | 
1a71c                 | ' 
1a71c                 | ' '------------------- release
1a71c                 | ' 
1a71c                 | ' sub do_release
1a71c                 | _do_release
1a71c     00 4A 05 F6 | 	mov	COUNT_, #0
1a720     A8 00 A0 FD | 	call	#pushregs_
1a724     10 F0 07 F1 | 	add	ptra, #16
1a728     5C 2E BF FD | 	call	#_pop
1a72c     FF 14 02 F6 | 	mov	arg02, result3
1a730     A7 FA 61 FC | 	wrlong	result1, fp
1a734     04 4E 05 F1 | 	add	fp, #4
1a738     A7 FC 61 FC | 	wrlong	result2, fp
1a73c     04 4E 05 F1 | 	add	fp, #4
1a740     A7 14 62 FC | 	wrlong	arg02, fp
1a744     08 4E 85 F1 | 	sub	fp, #8
1a748     A7 12 02 F6 | 	mov	arg01, fp
1a74c     1C 30 BF FD | 	call	#_converttoint
1a750     0C 4E 05 F1 | 	add	fp, #12
1a754     A7 FA 61 FC | 	wrlong	result1, fp
1a758                 | ' 
1a758                 | ' t1=pop()
1a758                 | ' channel=converttoint(t1)
1a758                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
1a758     0C 4E 85 F1 | 	sub	fp, #12
1a75c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a760     44 00 90 CD |  if_b	jmp	#LR__2100
1a764     0C 4E 05 F1 | 	add	fp, #12
1a768     A7 14 02 FB | 	rdlong	arg02, fp
1a76c     0C 4E 85 F1 | 	sub	fp, #12
1a770     08 14 56 F2 | 	cmps	arg02, #8 wc
1a774     30 00 90 3D |  if_ae	jmp	#LR__2100
1a778     37 00 00 FF 
1a77c     10 E4 05 F1 | 	add	objptr, ##28176
1a780     F2 12 02 FB | 	rdlong	arg01, objptr
1a784     37 00 00 FF 
1a788     10 E4 85 F1 | 	sub	objptr, ##28176
1a78c     0C 4E 05 F1 | 	add	fp, #12
1a790     A7 14 02 FB | 	rdlong	arg02, fp
1a794     0C 4E 85 F1 | 	sub	fp, #12
1a798     06 14 66 F0 | 	shl	arg02, #6
1a79c     0A 13 02 F1 | 	add	arg01, arg02
1a7a0     2C 12 06 F1 | 	add	arg01, #44
1a7a4     09 FF 69 FC | 	wrlong	#255, arg01
1a7a8                 | LR__2100
1a7a8     A7 F0 03 F6 | 	mov	ptra, fp
1a7ac     B2 00 A0 FD | 	call	#popregs_
1a7b0                 | _do_release_ret
1a7b0     2D 00 64 FD | 	ret
1a7b4                 | 
1a7b4                 | ' 
1a7b4                 | ' '------------------- restore
1a7b4                 | ' 
1a7b4                 | ' sub do_restore()
1a7b4                 | _do_restore
1a7b4     4A 00 00 FF 
1a7b8     88 E4 05 F1 | 	add	objptr, ##38024
1a7bc     F2 00 02 FB | 	rdlong	_var01, objptr
1a7c0     06 00 00 FF 
1a7c4     A4 E4 05 F1 | 	add	objptr, ##3236
1a7c8     F2 00 62 FC | 	wrlong	_var01, objptr
1a7cc     B7 01 00 FF 
1a7d0     96 01 06 F6 | 	mov	_var01, ##@LR__5957
1a7d4     01 00 00 FF 
1a7d8     B0 E5 05 F1 | 	add	objptr, ##944
1a7dc     F2 00 62 FC | 	wrlong	_var01, objptr
1a7e0     52 00 00 FF 
1a7e4     DC E4 85 F1 | 	sub	objptr, ##42204
1a7e8                 | _do_restore_ret
1a7e8     2D 00 64 FD | 	ret
1a7ec                 | 
1a7ec                 | ' 
1a7ec                 | ' '------------------- return
1a7ec                 | ' 
1a7ec                 | ' sub do_return()
1a7ec                 | _do_return
1a7ec                 | ' if gosubtop>0 then
1a7ec     50 00 00 FF 
1a7f0     34 E5 05 F1 | 	add	objptr, ##41268
1a7f4     F2 00 02 FB | 	rdlong	_var01, objptr
1a7f8     50 00 00 FF 
1a7fc     34 E5 85 F1 | 	sub	objptr, ##41268
1a800     01 00 56 F2 | 	cmps	_var01, #1 wc
1a804     8C 00 90 CD |  if_b	jmp	#LR__2110
1a808     50 00 00 FF 
1a80c     34 E5 05 F1 | 	add	objptr, ##41268
1a810     F2 00 02 FB | 	rdlong	_var01, objptr
1a814     03 00 66 F0 | 	shl	_var01, #3
1a818     03 00 00 FF 
1a81c     88 E5 85 F1 | 	sub	objptr, ##1928
1a820     F2 00 02 F1 | 	add	_var01, objptr
1a824     00 01 02 FB | 	rdlong	_var01, _var01
1a828     03 00 00 FF 
1a82c     0C E5 05 F1 | 	add	objptr, ##1804
1a830     F2 00 62 FC | 	wrlong	_var01, objptr
1a834     7C E4 05 F1 | 	add	objptr, #124
1a838     F2 00 02 FB | 	rdlong	_var01, objptr
1a83c     03 00 66 F0 | 	shl	_var01, #3
1a840     03 00 00 FF 
1a844     88 E5 85 F1 | 	sub	objptr, ##1928
1a848     F2 00 02 F1 | 	add	_var01, objptr
1a84c     04 00 06 F1 | 	add	_var01, #4
1a850     00 01 02 FB | 	rdlong	_var01, _var01
1a854     03 00 00 FF 
1a858     10 E5 05 F1 | 	add	objptr, ##1808
1a85c     F2 00 62 FC | 	wrlong	_var01, objptr
1a860     06 00 00 FF 
1a864     40 E4 85 F1 | 	sub	objptr, ##3136
1a868     F2 00 02 FB | 	rdlong	_var01, objptr
1a86c     01 00 86 F1 | 	sub	_var01, #1
1a870     04 E4 05 F1 | 	add	objptr, #4
1a874     F2 00 62 FC | 	wrlong	_var01, objptr
1a878     06 00 00 FF 
1a87c     B4 E4 05 F1 | 	add	objptr, ##3252
1a880     F2 00 02 FB | 	rdlong	_var01, objptr
1a884     01 00 86 F1 | 	sub	_var01, #1
1a888     F2 00 62 FC | 	wrlong	_var01, objptr
1a88c     50 00 00 FF 
1a890     34 E5 85 F1 | 	sub	objptr, ##41268
1a894                 | LR__2110
1a894                 | _do_return_ret
1a894     2D 00 64 FD | 	ret
1a898                 | 
1a898                 | ' 
1a898                 | ' '------------------- right$
1a898                 | ' 
1a898                 | ' sub do_right
1a898                 | _do_right
1a898     00 4A 05 F6 | 	mov	COUNT_, #0
1a89c     A8 00 A0 FD | 	call	#pushregs_
1a8a0     14 F0 07 F1 | 	add	ptra, #20
1a8a4     4A 00 00 FF 
1a8a8     80 E4 05 F1 | 	add	objptr, ##38016
1a8ac     F2 16 02 FB | 	rdlong	arg03, objptr
1a8b0     0B 15 02 F6 | 	mov	arg02, arg03
1a8b4     01 14 66 F0 | 	shl	arg02, #1
1a8b8     0B 15 02 F1 | 	add	arg02, arg03
1a8bc     02 14 66 F0 | 	shl	arg02, #2
1a8c0     03 00 00 FF 
1a8c4     04 E4 85 F1 | 	sub	objptr, ##1540
1a8c8     F2 14 02 F1 | 	add	arg02, objptr
1a8cc     0A 17 02 FB | 	rdlong	arg03, arg02
1a8d0     0C 4E 05 F1 | 	add	fp, #12
1a8d4     A7 16 62 FC | 	wrlong	arg03, fp
1a8d8                 | ' 
1a8d8                 | ' numpar=compiledline(lineptr_e).result.uresult
1a8d8                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1a8d8     0C 4E 85 F1 | 	sub	fp, #12
1a8dc     02 16 0E F2 | 	cmp	arg03, #2 wz
1a8e0     47 00 00 FF 
1a8e4     7C E4 85 F1 | 	sub	objptr, ##36476
1a8e8     40 00 90 AD |  if_e	jmp	#LR__2120
1a8ec     00 12 06 F6 | 	mov	arg01, #0
1a8f0     C8 1C B1 FD | 	call	#__system___getiolock_0603
1a8f4     FD 12 02 F6 | 	mov	arg01, result1
1a8f8     1C C0 B0 FD | 	call	#__system___lockmem
1a8fc     B7 01 00 FF 
1a900     97 15 06 F6 | 	mov	arg02, ##@LR__5958
1a904     00 12 06 F6 | 	mov	arg01, #0
1a908     00 16 06 F6 | 	mov	arg03, #0
1a90c     00 CD B0 FD | 	call	#__system___basic_print_string
1a910     00 12 06 F6 | 	mov	arg01, #0
1a914     A4 1C B1 FD | 	call	#__system___getiolock_0603
1a918     FD 00 68 FC | 	wrlong	#0, result1
1a91c     27 12 06 F6 | 	mov	arg01, #39
1a920     00 14 06 F6 | 	mov	arg02, #0
1a924     00 86 B0 FD | 	call	#_printerror
1a928     EC 00 90 FD | 	jmp	#LR__2123
1a92c                 | LR__2120
1a92c     58 2C BF FD | 	call	#_pop
1a930     FF 16 02 F6 | 	mov	arg03, result3
1a934     A7 FA 61 FC | 	wrlong	result1, fp
1a938     04 4E 05 F1 | 	add	fp, #4
1a93c     A7 FC 61 FC | 	wrlong	result2, fp
1a940     04 4E 05 F1 | 	add	fp, #4
1a944     A7 16 62 FC | 	wrlong	arg03, fp
1a948     08 4E 85 F1 | 	sub	fp, #8
1a94c     A7 12 02 F6 | 	mov	arg01, fp
1a950     18 2E BF FD | 	call	#_converttoint
1a954     FD 16 02 F6 | 	mov	arg03, result1
1a958     10 4E 05 F1 | 	add	fp, #16
1a95c     A7 16 62 FC | 	wrlong	arg03, fp
1a960     10 4E 85 F1 | 	sub	fp, #16
1a964     20 2C BF FD | 	call	#_pop
1a968     FF 16 02 F6 | 	mov	arg03, result3
1a96c     A7 FA 61 FC | 	wrlong	result1, fp
1a970     04 4E 05 F1 | 	add	fp, #4
1a974     A7 FC 61 FC | 	wrlong	result2, fp
1a978     04 4E 05 F1 | 	add	fp, #4
1a97c     A7 16 62 FC | 	wrlong	arg03, fp
1a980                 | ' t1=pop() : arg=converttoint(t1)
1a980                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1a980     08 4E 85 F1 | 	sub	fp, #8
1a984     2B 16 0E F2 | 	cmp	arg03, #43 wz
1a988     18 00 90 5D |  if_ne	jmp	#LR__2121
1a98c     A7 12 02 FB | 	rdlong	arg01, fp
1a990     6C 2D BF FD | 	call	#_convertstring
1a994     A7 FA 61 FC | 	wrlong	result1, fp
1a998     08 4E 05 F1 | 	add	fp, #8
1a99c     A7 3E 68 FC | 	wrlong	#31, fp
1a9a0     08 4E 85 F1 | 	sub	fp, #8
1a9a4                 | LR__2121
1a9a4                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1a9a4     08 4E 05 F1 | 	add	fp, #8
1a9a8     A7 16 02 FB | 	rdlong	arg03, fp
1a9ac     08 4E 85 F1 | 	sub	fp, #8
1a9b0     1F 16 0E F2 | 	cmp	arg03, #31 wz
1a9b4     40 00 90 AD |  if_e	jmp	#LR__2122
1a9b8     00 12 06 F6 | 	mov	arg01, #0
1a9bc     FC 1B B1 FD | 	call	#__system___getiolock_0603
1a9c0     FD 12 02 F6 | 	mov	arg01, result1
1a9c4     50 BF B0 FD | 	call	#__system___lockmem
1a9c8     B7 01 00 FF 
1a9cc     A0 15 06 F6 | 	mov	arg02, ##@LR__5959
1a9d0     00 12 06 F6 | 	mov	arg01, #0
1a9d4     00 16 06 F6 | 	mov	arg03, #0
1a9d8     34 CC B0 FD | 	call	#__system___basic_print_string
1a9dc     00 12 06 F6 | 	mov	arg01, #0
1a9e0     D8 1B B1 FD | 	call	#__system___getiolock_0603
1a9e4     FD 00 68 FC | 	wrlong	#0, result1
1a9e8     0F 12 06 F6 | 	mov	arg01, #15
1a9ec     00 14 06 F6 | 	mov	arg02, #0
1a9f0     34 85 B0 FD | 	call	#_printerror
1a9f4     20 00 90 FD | 	jmp	#LR__2123
1a9f8                 | LR__2122
1a9f8     A7 12 02 FB | 	rdlong	arg01, fp
1a9fc     10 4E 05 F1 | 	add	fp, #16
1aa00     A7 14 02 FB | 	rdlong	arg02, fp
1aa04     10 4E 85 F1 | 	sub	fp, #16
1aa08     14 E0 B0 FD | 	call	#__system__Right_S
1aa0c     A7 FA 61 FC | 	wrlong	result1, fp
1aa10     A7 12 02 F6 | 	mov	arg01, fp
1aa14     08 2C BF FD | 	call	#_push
1aa18                 | LR__2123
1aa18     A7 F0 03 F6 | 	mov	ptra, fp
1aa1c     B2 00 A0 FD | 	call	#popregs_
1aa20                 | _do_right_ret
1aa20     2D 00 64 FD | 	ret
1aa24                 | 
1aa24                 | ' 
1aa24                 | ' '------------------- rnd
1aa24                 | ' 
1aa24                 | ' sub do_rnd
1aa24                 | _do_rnd
1aa24     01 4A 05 F6 | 	mov	COUNT_, #1
1aa28     A8 00 A0 FD | 	call	#pushregs_
1aa2c     10 F0 07 F1 | 	add	ptra, #16
1aa30     4A 00 00 FF 
1aa34     80 E4 05 F1 | 	add	objptr, ##38016
1aa38     F2 26 02 FB | 	rdlong	local01, objptr
1aa3c     13 17 02 F6 | 	mov	arg03, local01
1aa40     01 16 66 F0 | 	shl	arg03, #1
1aa44     13 17 02 F1 | 	add	arg03, local01
1aa48     02 16 66 F0 | 	shl	arg03, #2
1aa4c     03 00 00 FF 
1aa50     04 E4 85 F1 | 	sub	objptr, ##1540
1aa54     F2 16 02 F1 | 	add	arg03, objptr
1aa58     0B 17 02 FB | 	rdlong	arg03, arg03
1aa5c     0C 4E 05 F1 | 	add	fp, #12
1aa60     A7 16 62 FC | 	wrlong	arg03, fp
1aa64                 | ' 
1aa64                 | ' numpar=compiledline(lineptr_e).result.uresult
1aa64                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1aa64     0C 4E 85 F1 | 	sub	fp, #12
1aa68     02 16 16 F2 | 	cmp	arg03, #2 wc
1aa6c     47 00 00 FF 
1aa70     7C E4 85 F1 | 	sub	objptr, ##36476
1aa74     40 00 90 CD |  if_b	jmp	#LR__2130
1aa78     00 12 06 F6 | 	mov	arg01, #0
1aa7c     3C 1B B1 FD | 	call	#__system___getiolock_0603
1aa80     FD 12 02 F6 | 	mov	arg01, result1
1aa84     90 BE B0 FD | 	call	#__system___lockmem
1aa88     B7 01 00 FF 
1aa8c     A9 15 06 F6 | 	mov	arg02, ##@LR__5960
1aa90     00 12 06 F6 | 	mov	arg01, #0
1aa94     00 16 06 F6 | 	mov	arg03, #0
1aa98     74 CB B0 FD | 	call	#__system___basic_print_string
1aa9c     00 12 06 F6 | 	mov	arg01, #0
1aaa0     18 1B B1 FD | 	call	#__system___getiolock_0603
1aaa4     FD 00 68 FC | 	wrlong	#0, result1
1aaa8     27 12 06 F6 | 	mov	arg01, #39
1aaac     00 14 06 F6 | 	mov	arg02, #0
1aab0     74 84 B0 FD | 	call	#_printerror
1aab4     30 01 90 FD | 	jmp	#LR__2137
1aab8                 | LR__2130
1aab8                 | ' if numpar=0 then
1aab8     0C 4E 05 F1 | 	add	fp, #12
1aabc     A7 FE 09 FB | 	rdlong	result3, fp wz
1aac0     0C 4E 85 F1 | 	sub	fp, #12
1aac4     20 00 90 5D |  if_ne	jmp	#LR__2131
1aac8     08 4E 05 F1 | 	add	fp, #8
1aacc     A7 3A 68 FC | 	wrlong	#29, fp
1aad0     08 4E 85 F1 | 	sub	fp, #8
1aad4     1B FA 61 FD | 	getrnd	result1
1aad8     A7 FA 61 FC | 	wrlong	result1, fp
1aadc     A7 12 02 F6 | 	mov	arg01, fp
1aae0     3C 2B BF FD | 	call	#_push
1aae4     00 01 90 FD | 	jmp	#LR__2136
1aae8                 | LR__2131
1aae8     9C 2A BF FD | 	call	#_pop
1aaec     A7 FA 61 FC | 	wrlong	result1, fp
1aaf0     04 4E 05 F1 | 	add	fp, #4
1aaf4     A7 FC 61 FC | 	wrlong	result2, fp
1aaf8     04 4E 05 F1 | 	add	fp, #4
1aafc     A7 FE 61 FC | 	wrlong	result3, fp
1ab00                 | '   t1=pop()
1ab00                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
1ab00     08 4E 85 F1 | 	sub	fp, #8
1ab04     1C FE 0D F2 | 	cmp	result3, #28 wz
1ab08     08 4E 05 51 |  if_ne	add	fp, #8
1ab0c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1ab10     08 4E 85 51 |  if_ne	sub	fp, #8
1ab14     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1ab18     2C 00 90 5D |  if_ne	jmp	#LR__2132
1ab1c     1B FA 61 FD | 	getrnd	result1
1ab20     A7 26 02 FB | 	rdlong	local01, fp
1ab24     13 FB 11 FD | 	qdiv	result1, local01
1ab28     A7 12 02 F6 | 	mov	arg01, fp
1ab2c     19 26 62 FD | 	getqy	local01
1ab30     A7 26 62 FC | 	wrlong	local01, fp
1ab34     08 4E 05 F1 | 	add	fp, #8
1ab38     A7 3A 68 FC | 	wrlong	#29, fp
1ab3c     08 4E 85 F1 | 	sub	fp, #8
1ab40     DC 2A BF FD | 	call	#_push
1ab44     A0 00 90 FD | 	jmp	#LR__2135
1ab48                 | LR__2132
1ab48     08 4E 05 F1 | 	add	fp, #8
1ab4c     A7 26 02 FB | 	rdlong	local01, fp
1ab50     08 4E 85 F1 | 	sub	fp, #8
1ab54     1E 26 0E F2 | 	cmp	local01, #30 wz
1ab58     48 00 90 5D |  if_ne	jmp	#LR__2133
1ab5c     A7 12 02 FB | 	rdlong	arg01, fp
1ab60     00 C0 24 FF 
1ab64     00 14 06 F6 | 	mov	arg02, ##1233125376
1ab68     2C EE B0 FD | 	call	#__system___float_div
1ab6c     FD 26 02 F6 | 	mov	local01, result1
1ab70     1B 12 62 FD | 	getrnd	arg01
1ab74     74 13 06 F4 | 	bitl	arg01, #372
1ab78     14 E8 B0 FD | 	call	#__system___float_fromuns
1ab7c     FD 14 02 F6 | 	mov	arg02, result1
1ab80     13 13 02 F6 | 	mov	arg01, local01
1ab84     0C EC B0 FD | 	call	#__system___float_mul
1ab88     A7 FA 61 FC | 	wrlong	result1, fp
1ab8c     08 4E 05 F1 | 	add	fp, #8
1ab90     A7 3C 68 FC | 	wrlong	#30, fp
1ab94     08 4E 85 F1 | 	sub	fp, #8
1ab98     A7 12 02 F6 | 	mov	arg01, fp
1ab9c     80 2A BF FD | 	call	#_push
1aba0     44 00 90 FD | 	jmp	#LR__2134
1aba4                 | LR__2133
1aba4                 | '     print "rnd: "; : printerror(40) 
1aba4     00 12 06 F6 | 	mov	arg01, #0
1aba8     10 1A B1 FD | 	call	#__system___getiolock_0603
1abac     FD 12 02 F6 | 	mov	arg01, result1
1abb0     64 BD B0 FD | 	call	#__system___lockmem
1abb4     B7 01 00 FF 
1abb8     AF 15 06 F6 | 	mov	arg02, ##@LR__5961
1abbc     00 12 06 F6 | 	mov	arg01, #0
1abc0     00 16 06 F6 | 	mov	arg03, #0
1abc4     48 CA B0 FD | 	call	#__system___basic_print_string
1abc8     00 12 06 F6 | 	mov	arg01, #0
1abcc     EC 19 B1 FD | 	call	#__system___getiolock_0603
1abd0     FD 00 68 FC | 	wrlong	#0, result1
1abd4     28 12 06 F6 | 	mov	arg01, #40
1abd8     00 14 06 F6 | 	mov	arg02, #0
1abdc     48 83 B0 FD | 	call	#_printerror
1abe0     A7 12 02 F6 | 	mov	arg01, fp
1abe4     38 2A BF FD | 	call	#_push
1abe8                 | LR__2134
1abe8                 | LR__2135
1abe8                 | LR__2136
1abe8                 | LR__2137
1abe8     A7 F0 03 F6 | 	mov	ptra, fp
1abec     B2 00 A0 FD | 	call	#popregs_
1abf0                 | _do_rnd_ret
1abf0     2D 00 64 FD | 	ret
1abf4                 | 
1abf4                 | ' 
1abf4                 | ' '-------------------- round
1abf4                 | ' 
1abf4                 | ' sub do_round
1abf4                 | _do_round
1abf4     00 4A 05 F6 | 	mov	COUNT_, #0
1abf8     A8 00 A0 FD | 	call	#pushregs_
1abfc     0C F0 07 F1 | 	add	ptra, #12
1ac00     84 29 BF FD | 	call	#_pop
1ac04     A7 FA 61 FC | 	wrlong	result1, fp
1ac08     04 4E 05 F1 | 	add	fp, #4
1ac0c     A7 FC 61 FC | 	wrlong	result2, fp
1ac10     04 4E 05 F1 | 	add	fp, #4
1ac14     A7 FE 61 FC | 	wrlong	result3, fp
1ac18     08 4E 85 F1 | 	sub	fp, #8
1ac1c     A7 12 02 F6 | 	mov	arg01, fp
1ac20     48 2B BF FD | 	call	#_converttoint
1ac24     A7 FA 61 FC | 	wrlong	result1, fp
1ac28     08 4E 05 F1 | 	add	fp, #8
1ac2c     A7 38 68 FC | 	wrlong	#28, fp
1ac30     08 4E 85 F1 | 	sub	fp, #8
1ac34     A7 12 02 F6 | 	mov	arg01, fp
1ac38     E4 29 BF FD | 	call	#_push
1ac3c     A7 F0 03 F6 | 	mov	ptra, fp
1ac40     B2 00 A0 FD | 	call	#popregs_
1ac44                 | _do_round_ret
1ac44     2D 00 64 FD | 	ret
1ac48                 | 
1ac48                 | ' 
1ac48                 | ' '-------------------- rqpin
1ac48                 | ' 
1ac48                 | ' sub do_rqpin
1ac48                 | _do_rqpin
1ac48     00 4A 05 F6 | 	mov	COUNT_, #0
1ac4c     A8 00 A0 FD | 	call	#pushregs_
1ac50     0C F0 07 F1 | 	add	ptra, #12
1ac54     30 29 BF FD | 	call	#_pop
1ac58     A7 FA 61 FC | 	wrlong	result1, fp
1ac5c     04 4E 05 F1 | 	add	fp, #4
1ac60     A7 FC 61 FC | 	wrlong	result2, fp
1ac64     04 4E 05 F1 | 	add	fp, #4
1ac68     A7 FE 61 FC | 	wrlong	result3, fp
1ac6c     08 4E 85 F1 | 	sub	fp, #8
1ac70     A7 12 02 F6 | 	mov	arg01, fp
1ac74     F4 2A BF FD | 	call	#_converttoint
1ac78     FD 12 02 F6 | 	mov	arg01, result1
1ac7c     00 FA 05 F6 | 	mov	result1, #0
1ac80     09 FB 81 FA | 	rqpin	result1, arg01
1ac84     52 00 00 FF 
1ac88     10 E5 05 F1 | 	add	objptr, ##42256
1ac8c     F2 FA 61 FC | 	wrlong	result1, objptr
1ac90     52 00 00 FF 
1ac94     10 E5 85 F1 | 	sub	objptr, ##42256
1ac98     08 4E 05 F1 | 	add	fp, #8
1ac9c     A7 3A 68 FC | 	wrlong	#29, fp
1aca0     08 4E 85 F1 | 	sub	fp, #8
1aca4     A7 08 68 FC | 	wrlong	#4, fp
1aca8     A7 12 02 F6 | 	mov	arg01, fp
1acac     70 29 BF FD | 	call	#_push
1acb0     A7 F0 03 F6 | 	mov	ptra, fp
1acb4     B2 00 A0 FD | 	call	#popregs_
1acb8                 | _do_rqpin_ret
1acb8     2D 00 64 FD | 	ret
1acbc                 | 
1acbc                 | ' 
1acbc                 | ' ' ------------------ run
1acbc                 | ' 
1acbc                 | ' sub do_run
1acbc                 | _do_run
1acbc     04 4A 05 F6 | 	mov	COUNT_, #4
1acc0     A8 00 A0 FD | 	call	#pushregs_
1acc4     4A 00 00 FF 
1acc8     80 E4 05 F1 | 	add	objptr, ##38016
1accc     F2 26 02 FB | 	rdlong	local01, objptr
1acd0     06 00 00 FF 
1acd4     38 E4 05 F1 | 	add	objptr, ##3128
1acd8     F2 28 02 FB | 	rdlong	local02, objptr
1acdc     04 E4 05 F1 | 	add	objptr, #4
1ace0     F2 2A 02 FB | 	rdlong	local03, objptr
1ace4     13 19 02 F6 | 	mov	arg04, local01
1ace8     0C 17 02 F6 | 	mov	arg03, arg04
1acec     01 16 66 F0 | 	shl	arg03, #1
1acf0     0C 17 02 F1 | 	add	arg03, arg04
1acf4     02 16 66 F0 | 	shl	arg03, #2
1acf8     09 00 00 FF 
1acfc     40 E4 85 F1 | 	sub	objptr, ##4672
1ad00     F2 16 02 F1 | 	add	arg03, objptr
1ad04     0B 15 02 FB | 	rdlong	arg02, arg03
1ad08                 | ' 
1ad08                 | ' r_lineptr_e=lineptr_e
1ad08                 | ' r_runptr=runptr
1ad08                 | ' r_runptr2=runptr2
1ad08                 | ' 
1ad08                 | ' numpar=compiledline(lineptr_e).result.uresult
1ad08                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1ad08     01 14 0E F2 | 	cmp	arg02, #1 wz
1ad0c     47 00 00 FF 
1ad10     7C E4 85 F1 | 	sub	objptr, ##36476
1ad14     00 12 06 A6 |  if_e	mov	arg01, #0
1ad18     E0 A0 BF AD |  if_e	call	#_do_load
1ad1c     4A 00 00 FF 
1ad20     88 E4 05 F1 | 	add	objptr, ##38024
1ad24     F2 18 02 FB | 	rdlong	arg04, objptr
1ad28     06 00 00 FF 
1ad2c     30 E4 05 F1 | 	add	objptr, ##3120
1ad30     F2 18 62 FC | 	wrlong	arg04, objptr
1ad34     04 E4 05 F1 | 	add	objptr, #4
1ad38     F2 00 68 FC | 	wrlong	#0, objptr
1ad3c     04 E4 05 F1 | 	add	objptr, #4
1ad40     FF FF FF FF 
1ad44     F2 FE 6B FC | 	wrlong	##-1, objptr
1ad48     06 00 00 FF 
1ad4c     38 E4 85 F1 | 	sub	objptr, ##3128
1ad50     F2 18 02 FB | 	rdlong	arg04, objptr
1ad54     06 00 00 FF 
1ad58     A4 E4 05 F1 | 	add	objptr, ##3236
1ad5c     F2 18 62 FC | 	wrlong	arg04, objptr
1ad60     B7 01 00 FF 
1ad64     B5 19 06 F6 | 	mov	arg04, ##@LR__5962
1ad68     01 00 00 FF 
1ad6c     B0 E5 05 F1 | 	add	objptr, ##944
1ad70     F2 18 62 FC | 	wrlong	arg04, objptr
1ad74                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1 
1ad74                 | ' dataptr=programstart : readline="" ' reset the data pointer
1ad74                 | ' if inrun>0 then 
1ad74     01 00 00 FF 
1ad78     F0 E5 85 F1 | 	sub	objptr, ##1008
1ad7c     F2 18 02 FB | 	rdlong	arg04, objptr
1ad80     50 00 00 FF 
1ad84     EC E4 85 F1 | 	sub	objptr, ##41196
1ad88     01 18 16 F2 | 	cmp	arg04, #1 wc
1ad8c     30 00 90 CD |  if_b	jmp	#LR__2140
1ad90     50 00 00 FF 
1ad94     F0 E4 05 F1 | 	add	objptr, ##41200
1ad98     F2 12 02 F6 | 	mov	arg01, objptr
1ad9c     38 E4 85 F1 | 	sub	objptr, #56
1ada0     F2 14 02 FB | 	rdlong	arg02, objptr
1ada4     18 16 06 F6 | 	mov	arg03, #24
1ada8     44 00 00 FF 
1adac     EC E5 85 F1 | 	sub	objptr, ##35308
1adb0     DC AE B0 FD | 	call	#_psram_spin2_read1
1adb4     0B 00 00 FF 
1adb8     CC E4 85 F1 | 	sub	objptr, ##5836
1adbc                 | '   psram.read1(varptr(runheader),runptr,24)  
1adbc                 | '   return
1adbc     0C 03 90 FD | 	jmp	#LR__2147
1adc0                 | LR__2140
1adc0     50 00 00 FF 
1adc4     EC E4 05 F1 | 	add	objptr, ##41196
1adc8     F2 02 68 FC | 	wrlong	#1, objptr
1adcc     04 E4 05 F1 | 	add	objptr, #4
1add0     F2 12 02 F6 | 	mov	arg01, objptr
1add4     38 E4 85 F1 | 	sub	objptr, #56
1add8     F2 14 02 FB | 	rdlong	arg02, objptr
1addc     18 16 06 F6 | 	mov	arg03, #24
1ade0     44 00 00 FF 
1ade4     EC E5 85 F1 | 	sub	objptr, ##35308
1ade8     A4 AE B0 FD | 	call	#_psram_spin2_read1
1adec                 | ' inrun=1
1adec                 | ' psram.read1(varptr(runheader),runptr,24) 
1adec                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
1adec     45 00 00 FF 
1adf0     24 E4 05 F1 | 	add	objptr, ##35364
1adf4     F2 2C 02 FB | 	rdlong	local04, objptr
1adf8     50 00 00 FF 
1adfc     F0 E4 85 F1 | 	sub	objptr, ##41200
1ae00     FF FF 7F FF 
1ae04     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1ae08     50 00 00 AF 
1ae0c     EC E4 05 A1 |  if_e	add	objptr, ##41196
1ae10     F2 00 68 AC |  if_e	wrlong	#0, objptr
1ae14     50 00 00 AF 
1ae18     EC E4 85 A1 |  if_e	sub	objptr, ##41196
1ae1c     AC 02 90 AD |  if_e	jmp	#LR__2147
1ae20                 | ' do 
1ae20                 | LR__2141
1ae20                 | '   if runptr<>oldrunptr then
1ae20     50 00 00 FF 
1ae24     B8 E4 05 F1 | 	add	objptr, ##41144
1ae28     F2 2C 02 FB | 	rdlong	local04, objptr
1ae2c     08 E4 05 F1 | 	add	objptr, #8
1ae30     F2 18 02 FB | 	rdlong	arg04, objptr
1ae34     50 00 00 FF 
1ae38     C0 E4 85 F1 | 	sub	objptr, ##41152
1ae3c     0C 2D 0A F2 | 	cmp	local04, arg04 wz
1ae40     CC 00 90 AD |  if_e	jmp	#LR__2142
1ae44     50 00 00 FF 
1ae48     F0 E4 05 F1 | 	add	objptr, ##41200
1ae4c     F2 12 02 F6 | 	mov	arg01, objptr
1ae50     38 E4 85 F1 | 	sub	objptr, #56
1ae54     F2 14 02 FB | 	rdlong	arg02, objptr
1ae58     18 16 06 F6 | 	mov	arg03, #24
1ae5c     44 00 00 FF 
1ae60     EC E5 85 F1 | 	sub	objptr, ##35308
1ae64     28 AE B0 FD | 	call	#_psram_spin2_read1
1ae68     3B 00 00 FF 
1ae6c     B0 E5 05 F1 | 	add	objptr, ##30640
1ae70     F2 12 02 F6 | 	mov	arg01, objptr
1ae74     09 00 00 FF 
1ae78     3C E4 05 F1 | 	add	objptr, ##4668
1ae7c     F2 14 02 FB | 	rdlong	arg02, objptr
1ae80     0B 00 00 FF 
1ae84     54 E4 85 F1 | 	sub	objptr, ##5716
1ae88     F2 2C 02 FB | 	rdlong	local04, objptr
1ae8c     01 2C 66 F0 | 	shl	local04, #1
1ae90     16 15 02 F1 | 	add	arg02, local04
1ae94     0B 00 00 FF 
1ae98     94 E4 05 F1 | 	add	objptr, ##5780
1ae9c     F2 16 02 FB | 	rdlong	arg03, objptr
1aea0     40 E4 85 F1 | 	sub	objptr, #64
1aea4     F2 2C 02 FB | 	rdlong	local04, objptr
1aea8     16 17 82 F1 | 	sub	arg03, local04
1aeac     44 00 00 FF 
1aeb0     EC E5 85 F1 | 	sub	objptr, ##35308
1aeb4     D8 AD B0 FD | 	call	#_psram_spin2_read1
1aeb8     45 00 00 FF 
1aebc     2C E4 05 F1 | 	add	objptr, ##35372
1aec0     F2 2C 02 FB | 	rdlong	local04, objptr
1aec4     40 E4 85 F1 | 	sub	objptr, #64
1aec8     F2 14 02 FB | 	rdlong	arg02, objptr
1aecc     0A 2D 82 F1 | 	sub	local04, arg02
1aed0     0B 00 00 FF 
1aed4     54 E4 85 F1 | 	sub	objptr, ##5716
1aed8     F2 14 02 FB | 	rdlong	arg02, objptr
1aedc     0A 2D 12 FD | 	qdiv	local04, arg02
1aee0     05 00 00 FF 
1aee4     18 E4 05 F1 | 	add	objptr, ##2584
1aee8     18 2C 62 FD | 	getqx	local04
1aeec     03 2C 86 F1 | 	sub	local04, #3
1aef0     F2 2C 62 FC | 	wrlong	local04, objptr
1aef4     06 00 00 FF 
1aef8     3C E4 05 F1 | 	add	objptr, ##3132
1aefc     F2 2C 02 FB | 	rdlong	local04, objptr
1af00     08 E4 05 F1 | 	add	objptr, #8
1af04     F2 2C 62 FC | 	wrlong	local04, objptr
1af08     50 00 00 FF 
1af0c     C0 E4 85 F1 | 	sub	objptr, ##41152
1af10                 | LR__2142
1af10     50 00 00 FF 
1af14     04 E5 05 F1 | 	add	objptr, ##41220
1af18     F2 2C 02 FB | 	rdlong	local04, objptr
1af1c     4C E4 85 F1 | 	sub	objptr, #76
1af20     F2 2C 62 FC | 	wrlong	local04, objptr
1af24     04 E4 05 F1 | 	add	objptr, #4
1af28     F2 12 02 FB | 	rdlong	arg01, objptr
1af2c     50 00 00 FF 
1af30     BC E4 85 F1 | 	sub	objptr, ##41148
1af34     4C 25 BF FD | 	call	#_execute_line
1af38     50 00 00 FF 
1af3c     BC E4 05 F1 | 	add	objptr, ##41148
1af40     F2 FA 61 FC | 	wrlong	result1, objptr
1af44     04 E4 85 F1 | 	sub	objptr, #4
1af48     F2 2C 02 FB | 	rdlong	local04, objptr
1af4c     50 00 00 FF 
1af50     B8 E4 85 F1 | 	sub	objptr, ##41144
1af54     FF FF 3F FF 
1af58     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1af5c     4C 00 90 AD |  if_e	jmp	#LR__2145
1af60     E0 12 06 F6 | 	mov	arg01, #224
1af64     B8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af68     00 FA 0D F2 | 	cmp	result1, #0 wz
1af6c     10 00 90 5D |  if_ne	jmp	#LR__2143
1af70     E4 12 06 F6 | 	mov	arg01, #228
1af74     A8 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af78     00 FA 0D F2 | 	cmp	result1, #0 wz
1af7c     10 00 90 AD |  if_e	jmp	#LR__2144
1af80                 | LR__2143
1af80     06 12 06 F6 | 	mov	arg01, #6
1af84     98 B0 B0 FD | 	call	#_usbnew_spin2_keystate
1af88     00 FA 0D F2 | 	cmp	result1, #0 wz
1af8c     1C 00 90 5D |  if_ne	jmp	#LR__2145
1af90                 | LR__2144
1af90     50 00 00 FF 
1af94     EC E4 05 F1 | 	add	objptr, ##41196
1af98     F2 2C 02 FB | 	rdlong	local04, objptr
1af9c     50 00 00 FF 
1afa0     EC E4 85 F1 | 	sub	objptr, ##41196
1afa4     02 2C 0E F2 | 	cmp	local04, #2 wz
1afa8     74 FE 9F 5D |  if_ne	jmp	#LR__2141
1afac                 | LR__2145
1afac                 | '   ''do whatever kbm.peek_latest_key()=$106 
1afac                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
1afac     50 00 00 FF 
1afb0     B8 E4 05 F1 | 	add	objptr, ##41144
1afb4     F2 2C 02 FB | 	rdlong	local04, objptr
1afb8     50 00 00 FF 
1afbc     B8 E4 85 F1 | 	sub	objptr, ##41144
1afc0     FF FF 3F FF 
1afc4     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1afc8     AC 00 90 AD |  if_e	jmp	#LR__2146
1afcc     50 00 00 FF 
1afd0     EC E4 05 F1 | 	add	objptr, ##41196
1afd4     F2 2C 02 FB | 	rdlong	local04, objptr
1afd8     50 00 00 FF 
1afdc     EC E4 85 F1 | 	sub	objptr, ##41196
1afe0     01 2C 0E F2 | 	cmp	local04, #1 wz
1afe4     90 00 90 5D |  if_ne	jmp	#LR__2146
1afe8                 | '   print: print "Stopped at line ";runheader(0) 
1afe8     00 12 06 F6 | 	mov	arg01, #0
1afec     CC 15 B1 FD | 	call	#__system___getiolock_0603
1aff0     FD 12 02 F6 | 	mov	arg01, result1
1aff4     20 B9 B0 FD | 	call	#__system___lockmem
1aff8     00 12 06 F6 | 	mov	arg01, #0
1affc     0A 14 06 F6 | 	mov	arg02, #10
1b000     00 16 06 F6 | 	mov	arg03, #0
1b004     B0 C5 B0 FD | 	call	#__system___basic_print_char
1b008     00 12 06 F6 | 	mov	arg01, #0
1b00c     AC 15 B1 FD | 	call	#__system___getiolock_0603
1b010     FD 00 68 FC | 	wrlong	#0, result1
1b014     00 12 06 F6 | 	mov	arg01, #0
1b018     A0 15 B1 FD | 	call	#__system___getiolock_0603
1b01c     FD 12 02 F6 | 	mov	arg01, result1
1b020     F4 B8 B0 FD | 	call	#__system___lockmem
1b024     B7 01 00 FF 
1b028     B6 15 06 F6 | 	mov	arg02, ##@LR__5963
1b02c     00 12 06 F6 | 	mov	arg01, #0
1b030     00 16 06 F6 | 	mov	arg03, #0
1b034     D8 C5 B0 FD | 	call	#__system___basic_print_string
1b038     50 00 00 FF 
1b03c     F0 E4 05 F1 | 	add	objptr, ##41200
1b040     F2 14 02 FB | 	rdlong	arg02, objptr
1b044     50 00 00 FF 
1b048     F0 E4 85 F1 | 	sub	objptr, ##41200
1b04c     00 12 06 F6 | 	mov	arg01, #0
1b050     00 16 06 F6 | 	mov	arg03, #0
1b054     0A 18 06 F6 | 	mov	arg04, #10
1b058     38 C6 B0 FD | 	call	#__system___basic_print_unsigned
1b05c     00 12 06 F6 | 	mov	arg01, #0
1b060     0A 14 06 F6 | 	mov	arg02, #10
1b064     00 16 06 F6 | 	mov	arg03, #0
1b068     4C C5 B0 FD | 	call	#__system___basic_print_char
1b06c     00 12 06 F6 | 	mov	arg01, #0
1b070     48 15 B1 FD | 	call	#__system___getiolock_0603
1b074     FD 00 68 FC | 	wrlong	#0, result1
1b078                 | LR__2146
1b078     50 00 00 FF 
1b07c     EC E4 05 F1 | 	add	objptr, ##41196
1b080     F2 00 68 FC | 	wrlong	#0, objptr
1b084     06 00 00 FF 
1b088     6C E4 85 F1 | 	sub	objptr, ##3180
1b08c     F2 26 62 FC | 	wrlong	local01, objptr
1b090     06 00 00 FF 
1b094     38 E4 05 F1 | 	add	objptr, ##3128
1b098     F2 28 62 FC | 	wrlong	local02, objptr
1b09c     04 E4 05 F1 | 	add	objptr, #4
1b0a0     F2 2A 62 FC | 	wrlong	local03, objptr
1b0a4     50 00 00 FF 
1b0a8     BC E4 85 F1 | 	sub	objptr, ##41148
1b0ac     11 12 06 F6 | 	mov	arg01, #17
1b0b0     08 14 06 F6 | 	mov	arg02, #8
1b0b4     10 16 06 F6 | 	mov	arg03, #16
1b0b8     B8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b0bc     10 12 06 F6 | 	mov	arg01, #16
1b0c0     20 14 06 F6 | 	mov	arg02, #32
1b0c4     20 16 06 F6 | 	mov	arg03, #32
1b0c8     A8 8E B0 FD | 	call	#_hg010b_spin2_setspritesize
1b0cc                 | LR__2147
1b0cc     A7 F0 03 F6 | 	mov	ptra, fp
1b0d0     B2 00 A0 FD | 	call	#popregs_
1b0d4                 | _do_run_ret
1b0d4     2D 00 64 FD | 	ret
1b0d8                 | 
1b0d8                 | ' 
1b0d8                 | ' ' ------------------ save
1b0d8                 | ' 
1b0d8                 | ' sub do_save                        
1b0d8                 | _do_save
1b0d8     04 4A 05 F6 | 	mov	COUNT_, #4
1b0dc     A8 00 A0 FD | 	call	#pushregs_
1b0e0     B8 F0 07 F1 | 	add	ptra, #184
1b0e4     4A 00 00 FF 
1b0e8     80 E4 05 F1 | 	add	objptr, ##38016
1b0ec     F2 26 02 FB | 	rdlong	local01, objptr
1b0f0     13 29 02 F6 | 	mov	local02, local01
1b0f4     01 28 66 F0 | 	shl	local02, #1
1b0f8     13 29 02 F1 | 	add	local02, local01
1b0fc     02 28 66 F0 | 	shl	local02, #2
1b100     03 00 00 FF 
1b104     04 E4 85 F1 | 	sub	objptr, ##1540
1b108     F2 28 02 F1 | 	add	local02, objptr
1b10c     14 2B 02 FB | 	rdlong	local03, local02
1b110     10 4E 05 F1 | 	add	fp, #16
1b114     A7 2A 62 FC | 	wrlong	local03, fp
1b118                 | ' 
1b118                 | ' numpar=compiledline(lineptr_e).result.uresult
1b118                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1b118     10 4E 85 F1 | 	sub	fp, #16
1b11c     01 2A 56 F2 | 	cmps	local03, #1 wc
1b120     47 00 00 FF 
1b124     7C E4 85 F1 | 	sub	objptr, ##36476
1b128     20 00 90 CD |  if_b	jmp	#LR__2150
1b12c     58 24 BF FD | 	call	#_pop
1b130     A7 FA 61 FC | 	wrlong	result1, fp
1b134     04 4E 05 F1 | 	add	fp, #4
1b138     A7 FC 61 FC | 	wrlong	result2, fp
1b13c     04 4E 05 F1 | 	add	fp, #4
1b140     A7 FE 61 FC | 	wrlong	result3, fp
1b144     08 4E 85 F1 | 	sub	fp, #8
1b148     24 00 90 FD | 	jmp	#LR__2151
1b14c                 | LR__2150
1b14c     52 00 00 FF 
1b150     C4 E4 05 F1 | 	add	objptr, ##42180
1b154     F2 2A 02 FB | 	rdlong	local03, objptr
1b158     52 00 00 FF 
1b15c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b160     A7 2A 62 FC | 	wrlong	local03, fp
1b164     08 4E 05 F1 | 	add	fp, #8
1b168     A7 3E 68 FC | 	wrlong	#31, fp
1b16c     08 4E 85 F1 | 	sub	fp, #8
1b170                 | LR__2151
1b170                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
1b170     4A 00 00 FF 
1b174     88 E4 05 F1 | 	add	objptr, ##38024
1b178     F2 12 02 FB | 	rdlong	arg01, objptr
1b17c     4A 00 00 FF 
1b180     88 E4 85 F1 | 	sub	objptr, ##38024
1b184     70 80 B0 FD | 	call	#_pslpeek
1b188     FF FF 7F FF 
1b18c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
1b190     10 00 90 5D |  if_ne	jmp	#LR__2152
1b194     1B 12 06 F6 | 	mov	arg01, #27
1b198     00 14 06 F6 | 	mov	arg02, #0
1b19c     88 7D B0 FD | 	call	#_printerror
1b1a0     CC 02 90 FD | 	jmp	#LR__2158
1b1a4                 | LR__2152
1b1a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1b1a4     08 4E 05 F1 | 	add	fp, #8
1b1a8     A7 2A 02 FB | 	rdlong	local03, fp
1b1ac     08 4E 85 F1 | 	sub	fp, #8
1b1b0     2B 2A 0E F2 | 	cmp	local03, #43 wz
1b1b4     18 00 90 5D |  if_ne	jmp	#LR__2153
1b1b8     A7 12 02 FB | 	rdlong	arg01, fp
1b1bc     40 25 BF FD | 	call	#_convertstring
1b1c0     A7 FA 61 FC | 	wrlong	result1, fp
1b1c4     08 4E 05 F1 | 	add	fp, #8
1b1c8     A7 3E 68 FC | 	wrlong	#31, fp
1b1cc     08 4E 85 F1 | 	sub	fp, #8
1b1d0                 | LR__2153
1b1d0                 | ' if t1.result_type=result_string then
1b1d0     08 4E 05 F1 | 	add	fp, #8
1b1d4     A7 2A 02 FB | 	rdlong	local03, fp
1b1d8     08 4E 85 F1 | 	sub	fp, #8
1b1dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b1e0     8C 02 90 5D |  if_ne	jmp	#LR__2157
1b1e4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1b1e4     A7 12 02 FB | 	rdlong	arg01, fp
1b1e8     B7 01 00 FF 
1b1ec     C7 15 06 F6 | 	mov	arg02, ##@LR__5964
1b1f0     4C B7 B0 FD | 	call	#__system___string_cmp
1b1f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b1f8     52 00 00 AF 
1b1fc     C4 E4 05 A1 |  if_e	add	objptr, ##42180
1b200     F2 2A 02 AB |  if_e	rdlong	local03, objptr
1b204     A7 2A 62 AC |  if_e	wrlong	local03, fp
1b208     52 00 00 AF 
1b20c     C4 E4 85 A1 |  if_e	sub	objptr, ##42180
1b210     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b214     52 00 00 5F 
1b218     C4 E4 05 51 |  if_ne	add	objptr, ##42180
1b21c     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
1b220     52 00 00 5F 
1b224     C4 E4 85 51 |  if_ne	sub	objptr, ##42180
1b228                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1b228     09 12 06 F6 | 	mov	arg01, #9
1b22c     44 0A B1 FD | 	call	#__system__close
1b230     09 2A 06 F6 | 	mov	local03, #9
1b234     4A 00 00 FF 
1b238     94 E4 05 F1 | 	add	objptr, ##38036
1b23c     F2 12 02 FB | 	rdlong	arg01, objptr
1b240     4A 00 00 FF 
1b244     94 E4 85 F1 | 	sub	objptr, ##38036
1b248     B7 01 00 FF 
1b24c     C8 15 06 F6 | 	mov	arg02, ##@LR__5965
1b250     20 B7 B0 FD | 	call	#__system___string_concat
1b254     FD 12 02 F6 | 	mov	arg01, result1
1b258     A7 14 02 FB | 	rdlong	arg02, fp
1b25c     14 B7 B0 FD | 	call	#__system___string_concat
1b260     FD 14 02 F6 | 	mov	arg02, result1
1b264     15 13 02 F6 | 	mov	arg01, local03
1b268     0D 16 06 F6 | 	mov	arg03, #13
1b26c     AC C2 B0 FD | 	call	#__system___basic_open_string
1b270     4A 00 00 FF 
1b274     88 E4 05 F1 | 	add	objptr, ##38024
1b278     F2 2A 02 FB | 	rdlong	local03, objptr
1b27c     4A 00 00 FF 
1b280     88 E4 85 F1 | 	sub	objptr, ##38024
1b284     B0 4E 05 F1 | 	add	fp, #176
1b288     A7 2A 62 FC | 	wrlong	local03, fp
1b28c     B0 4E 85 F1 | 	sub	fp, #176
1b290                 | '   saveptr=programstart
1b290                 | '   do
1b290                 | LR__2154
1b290     14 4E 05 F1 | 	add	fp, #20
1b294     A7 12 02 F6 | 	mov	arg01, fp
1b298     9C 4E 05 F1 | 	add	fp, #156
1b29c     A7 14 02 FB | 	rdlong	arg02, fp
1b2a0     B0 4E 85 F1 | 	sub	fp, #176
1b2a4     18 16 06 F6 | 	mov	arg03, #24
1b2a8     0B 00 00 FF 
1b2ac     CC E4 05 F1 | 	add	objptr, ##5836
1b2b0     DC A9 B0 FD | 	call	#_psram_spin2_read1
1b2b4     2C 4E 05 F1 | 	add	fp, #44
1b2b8     A7 12 02 F6 | 	mov	arg01, fp
1b2bc     10 4E 85 F1 | 	sub	fp, #16
1b2c0     A7 14 02 FB | 	rdlong	arg02, fp
1b2c4     04 4E 05 F1 | 	add	fp, #4
1b2c8     A7 16 02 FB | 	rdlong	arg03, fp
1b2cc     20 4E 85 F1 | 	sub	fp, #32
1b2d0     BC A9 B0 FD | 	call	#_psram_spin2_read1
1b2d4     0B 00 00 FF 
1b2d8     CC E4 85 F1 | 	sub	objptr, ##5836
1b2dc     B7 01 00 FF 
1b2e0     CA 2B 06 F6 | 	mov	local03, ##@LR__5966
1b2e4     AC 4E 05 F1 | 	add	fp, #172
1b2e8     A7 2A 62 FC | 	wrlong	local03, fp
1b2ec                 | '     psram.read1(varptr(header(0)),saveptr,24)
1b2ec                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
1b2ec                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
1b2ec     A0 4E 85 F1 | 	sub	fp, #160
1b2f0     A7 02 68 FC | 	wrlong	#1, fp
1b2f4     14 4E 05 F1 | 	add	fp, #20
1b2f8     A7 2C 02 FB | 	rdlong	local04, fp
1b2fc     20 4E 85 F1 | 	sub	fp, #32
1b300     01 2C 06 F1 | 	add	local04, #1
1b304                 | LR__2155
1b304     0C 4E 05 F1 | 	add	fp, #12
1b308     A7 2A 02 FB | 	rdlong	local03, fp
1b30c     0C 4E 85 F1 | 	sub	fp, #12
1b310     16 2B 52 F2 | 	cmps	local03, local04 wc
1b314     54 00 90 3D |  if_ae	jmp	#LR__2156
1b318     AC 4E 05 F1 | 	add	fp, #172
1b31c     A7 26 02 FB | 	rdlong	local01, fp
1b320     A0 4E 85 F1 | 	sub	fp, #160
1b324     A7 2A 02 FB | 	rdlong	local03, fp
1b328     01 2A 86 F1 | 	sub	local03, #1
1b32c     20 4E 05 F1 | 	add	fp, #32
1b330     A7 2A 02 F1 | 	add	local03, fp
1b334     15 13 C2 FA | 	rdbyte	arg01, local03
1b338     2C 4E 85 F1 | 	sub	fp, #44
1b33c     1C D8 B0 FD | 	call	#__system__Chr_S
1b340     FD 14 02 F6 | 	mov	arg02, result1
1b344     13 13 02 F6 | 	mov	arg01, local01
1b348     28 B6 B0 FD | 	call	#__system___string_concat
1b34c     AC 4E 05 F1 | 	add	fp, #172
1b350     A7 FA 61 FC | 	wrlong	result1, fp
1b354     A0 4E 85 F1 | 	sub	fp, #160
1b358     A7 2A 02 FB | 	rdlong	local03, fp
1b35c     01 2A 06 F1 | 	add	local03, #1
1b360     A7 2A 62 FC | 	wrlong	local03, fp
1b364     0C 4E 85 F1 | 	sub	fp, #12
1b368     98 FF 9F FD | 	jmp	#LR__2155
1b36c                 | LR__2156
1b36c                 | '     print #9, saveline$
1b36c     09 12 06 F6 | 	mov	arg01, #9
1b370     48 12 B1 FD | 	call	#__system___getiolock_0603
1b374     FD 12 02 F6 | 	mov	arg01, result1
1b378     9C B5 B0 FD | 	call	#__system___lockmem
1b37c     AC 4E 05 F1 | 	add	fp, #172
1b380     A7 14 02 FB | 	rdlong	arg02, fp
1b384     AC 4E 85 F1 | 	sub	fp, #172
1b388     09 12 06 F6 | 	mov	arg01, #9
1b38c     00 16 06 F6 | 	mov	arg03, #0
1b390     7C C2 B0 FD | 	call	#__system___basic_print_string
1b394     09 12 06 F6 | 	mov	arg01, #9
1b398     0A 14 06 F6 | 	mov	arg02, #10
1b39c     00 16 06 F6 | 	mov	arg03, #0
1b3a0     14 C2 B0 FD | 	call	#__system___basic_print_char
1b3a4     09 12 06 F6 | 	mov	arg01, #9
1b3a8     10 12 B1 FD | 	call	#__system___getiolock_0603
1b3ac     FD 00 68 FC | 	wrlong	#0, result1
1b3b0     28 4E 05 F1 | 	add	fp, #40
1b3b4     A7 2A 02 FB | 	rdlong	local03, fp
1b3b8     88 4E 05 F1 | 	add	fp, #136
1b3bc     A7 2A 62 FC | 	wrlong	local03, fp
1b3c0     88 4E 85 F1 | 	sub	fp, #136
1b3c4     A7 2A 02 FB | 	rdlong	local03, fp
1b3c8     28 4E 85 F1 | 	sub	fp, #40
1b3cc     FF FF 3F FF 
1b3d0     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1b3d4     B8 FE 9F 5D |  if_ne	jmp	#LR__2154
1b3d8                 | '   close #9  
1b3d8     09 12 06 F6 | 	mov	arg01, #9
1b3dc     94 08 B1 FD | 	call	#__system__close
1b3e0                 | '   print "Saved as ";currentdir$+"/"+loadname
1b3e0     00 12 06 F6 | 	mov	arg01, #0
1b3e4     D4 11 B1 FD | 	call	#__system___getiolock_0603
1b3e8     FD 12 02 F6 | 	mov	arg01, result1
1b3ec     28 B5 B0 FD | 	call	#__system___lockmem
1b3f0     B7 01 00 FF 
1b3f4     CB 15 06 F6 | 	mov	arg02, ##@LR__5967
1b3f8     00 12 06 F6 | 	mov	arg01, #0
1b3fc     00 16 06 F6 | 	mov	arg03, #0
1b400     0C C2 B0 FD | 	call	#__system___basic_print_string
1b404     00 28 06 F6 | 	mov	local02, #0
1b408     4A 00 00 FF 
1b40c     94 E4 05 F1 | 	add	objptr, ##38036
1b410     F2 12 02 FB | 	rdlong	arg01, objptr
1b414     4A 00 00 FF 
1b418     94 E4 85 F1 | 	sub	objptr, ##38036
1b41c     B7 01 00 FF 
1b420     D5 15 06 F6 | 	mov	arg02, ##@LR__5968
1b424     4C B5 B0 FD | 	call	#__system___string_concat
1b428     FD 12 02 F6 | 	mov	arg01, result1
1b42c     52 00 00 FF 
1b430     C4 E4 05 F1 | 	add	objptr, ##42180
1b434     F2 14 02 FB | 	rdlong	arg02, objptr
1b438     52 00 00 FF 
1b43c     C4 E4 85 F1 | 	sub	objptr, ##42180
1b440     30 B5 B0 FD | 	call	#__system___string_concat
1b444     FD 14 02 F6 | 	mov	arg02, result1
1b448     14 13 02 F6 | 	mov	arg01, local02
1b44c     00 16 06 F6 | 	mov	arg03, #0
1b450     BC C1 B0 FD | 	call	#__system___basic_print_string
1b454     00 12 06 F6 | 	mov	arg01, #0
1b458     0A 14 06 F6 | 	mov	arg02, #10
1b45c     00 16 06 F6 | 	mov	arg03, #0
1b460     54 C1 B0 FD | 	call	#__system___basic_print_char
1b464     00 12 06 F6 | 	mov	arg01, #0
1b468     50 11 B1 FD | 	call	#__system___getiolock_0603
1b46c     FD 00 68 FC | 	wrlong	#0, result1
1b470                 | LR__2157
1b470                 | LR__2158
1b470     A7 F0 03 F6 | 	mov	ptra, fp
1b474     B2 00 A0 FD | 	call	#popregs_
1b478                 | _do_save_ret
1b478     2D 00 64 FD | 	ret
1b47c                 | 
1b47c                 | ' 
1b47c                 | ' ' ------------------ setdelay
1b47c                 | ' 
1b47c                 | ' sub do_setdelay
1b47c                 | _do_setdelay
1b47c     02 4A 05 F6 | 	mov	COUNT_, #2
1b480     A8 00 A0 FD | 	call	#pushregs_
1b484     18 F0 07 F1 | 	add	ptra, #24
1b488     FC 20 BF FD | 	call	#_pop
1b48c     FD 12 02 F6 | 	mov	arg01, result1
1b490     FE 26 02 F6 | 	mov	local01, result2
1b494     FF 28 02 F6 | 	mov	local02, result3
1b498     A7 12 62 FC | 	wrlong	arg01, fp
1b49c     04 4E 05 F1 | 	add	fp, #4
1b4a0     A7 26 62 FC | 	wrlong	local01, fp
1b4a4     04 4E 05 F1 | 	add	fp, #4
1b4a8     A7 28 62 FC | 	wrlong	local02, fp
1b4ac     08 4E 85 F1 | 	sub	fp, #8
1b4b0     D4 20 BF FD | 	call	#_pop
1b4b4     FD 28 02 F6 | 	mov	local02, result1
1b4b8     0C 4E 05 F1 | 	add	fp, #12
1b4bc     A7 28 62 FC | 	wrlong	local02, fp
1b4c0     04 4E 05 F1 | 	add	fp, #4
1b4c4     A7 FC 61 FC | 	wrlong	result2, fp
1b4c8     04 4E 05 F1 | 	add	fp, #4
1b4cc     A7 FE 61 FC | 	wrlong	result3, fp
1b4d0     08 4E 85 F1 | 	sub	fp, #8
1b4d4     A7 12 02 F6 | 	mov	arg01, fp
1b4d8     0C 4E 85 F1 | 	sub	fp, #12
1b4dc     8C 22 BF FD | 	call	#_converttoint
1b4e0     FD 28 02 F6 | 	mov	local02, result1
1b4e4     14 27 02 F6 | 	mov	local01, local02
1b4e8     01 26 66 F0 | 	shl	local01, #1
1b4ec     14 27 02 F1 | 	add	local01, local02
1b4f0     03 26 66 F0 | 	shl	local01, #3
1b4f4     14 00 00 FF 
1b4f8     38 E5 05 F1 | 	add	objptr, ##10552
1b4fc     F2 26 02 F1 | 	add	local01, objptr
1b500     A7 12 02 F6 | 	mov	arg01, fp
1b504     14 00 00 FF 
1b508     38 E5 85 F1 | 	sub	objptr, ##10552
1b50c     5C 22 BF FD | 	call	#_converttoint
1b510     06 26 06 F1 | 	add	local01, #6
1b514     13 FB 51 FC | 	wrword	result1, local01
1b518     A7 F0 03 F6 | 	mov	ptra, fp
1b51c     B2 00 A0 FD | 	call	#popregs_
1b520                 | _do_setdelay_ret
1b520     2D 00 64 FD | 	ret
1b524                 | 
1b524                 | ' 
1b524                 | ' ' ------------------ setenv
1b524                 | ' 
1b524                 | ' sub do_setenv
1b524                 | _do_setenv
1b524     02 4A 05 F6 | 	mov	COUNT_, #2
1b528     A8 00 A0 FD | 	call	#pushregs_
1b52c     18 F0 07 F1 | 	add	ptra, #24
1b530     54 20 BF FD | 	call	#_pop
1b534     FD 12 02 F6 | 	mov	arg01, result1
1b538     FE 26 02 F6 | 	mov	local01, result2
1b53c     FF 28 02 F6 | 	mov	local02, result3
1b540     A7 12 62 FC | 	wrlong	arg01, fp
1b544     04 4E 05 F1 | 	add	fp, #4
1b548     A7 26 62 FC | 	wrlong	local01, fp
1b54c     04 4E 05 F1 | 	add	fp, #4
1b550     A7 28 62 FC | 	wrlong	local02, fp
1b554     08 4E 85 F1 | 	sub	fp, #8
1b558     2C 20 BF FD | 	call	#_pop
1b55c     FD 28 02 F6 | 	mov	local02, result1
1b560     0C 4E 05 F1 | 	add	fp, #12
1b564     A7 28 62 FC | 	wrlong	local02, fp
1b568     04 4E 05 F1 | 	add	fp, #4
1b56c     A7 FC 61 FC | 	wrlong	result2, fp
1b570     04 4E 05 F1 | 	add	fp, #4
1b574     A7 FE 61 FC | 	wrlong	result3, fp
1b578     08 4E 85 F1 | 	sub	fp, #8
1b57c     A7 12 02 F6 | 	mov	arg01, fp
1b580     0C 4E 85 F1 | 	sub	fp, #12
1b584     E4 21 BF FD | 	call	#_converttoint
1b588     FD 28 02 F6 | 	mov	local02, result1
1b58c     14 27 02 F6 | 	mov	local01, local02
1b590     01 26 66 F0 | 	shl	local01, #1
1b594     14 27 02 F1 | 	add	local01, local02
1b598     03 26 66 F0 | 	shl	local01, #3
1b59c     14 00 00 FF 
1b5a0     38 E5 05 F1 | 	add	objptr, ##10552
1b5a4     F2 26 02 F1 | 	add	local01, objptr
1b5a8     A7 12 02 F6 | 	mov	arg01, fp
1b5ac     14 00 00 FF 
1b5b0     38 E5 85 F1 | 	sub	objptr, ##10552
1b5b4     B4 21 BF FD | 	call	#_converttoint
1b5b8     05 26 06 F1 | 	add	local01, #5
1b5bc     13 FB 41 FC | 	wrbyte	result1, local01
1b5c0     A7 F0 03 F6 | 	mov	ptra, fp
1b5c4     B2 00 A0 FD | 	call	#popregs_
1b5c8                 | _do_setenv_ret
1b5c8     2D 00 64 FD | 	ret
1b5cc                 | 
1b5cc                 | ' 
1b5cc                 | ' ' ------------------ setlen
1b5cc                 | ' 
1b5cc                 | ' sub do_setlen
1b5cc                 | _do_setlen
1b5cc     02 4A 05 F6 | 	mov	COUNT_, #2
1b5d0     A8 00 A0 FD | 	call	#pushregs_
1b5d4     18 F0 07 F1 | 	add	ptra, #24
1b5d8     AC 1F BF FD | 	call	#_pop
1b5dc     FD 12 02 F6 | 	mov	arg01, result1
1b5e0     FE 26 02 F6 | 	mov	local01, result2
1b5e4     FF 28 02 F6 | 	mov	local02, result3
1b5e8     A7 12 62 FC | 	wrlong	arg01, fp
1b5ec     04 4E 05 F1 | 	add	fp, #4
1b5f0     A7 26 62 FC | 	wrlong	local01, fp
1b5f4     04 4E 05 F1 | 	add	fp, #4
1b5f8     A7 28 62 FC | 	wrlong	local02, fp
1b5fc     08 4E 85 F1 | 	sub	fp, #8
1b600     84 1F BF FD | 	call	#_pop
1b604     FD 28 02 F6 | 	mov	local02, result1
1b608     0C 4E 05 F1 | 	add	fp, #12
1b60c     A7 28 62 FC | 	wrlong	local02, fp
1b610     04 4E 05 F1 | 	add	fp, #4
1b614     A7 FC 61 FC | 	wrlong	result2, fp
1b618     04 4E 05 F1 | 	add	fp, #4
1b61c     A7 FE 61 FC | 	wrlong	result3, fp
1b620     08 4E 85 F1 | 	sub	fp, #8
1b624     A7 12 02 F6 | 	mov	arg01, fp
1b628     0C 4E 85 F1 | 	sub	fp, #12
1b62c     3C 21 BF FD | 	call	#_converttoint
1b630     FD 28 02 F6 | 	mov	local02, result1
1b634     14 27 02 F6 | 	mov	local01, local02
1b638     01 26 66 F0 | 	shl	local01, #1
1b63c     14 27 02 F1 | 	add	local01, local02
1b640     03 26 66 F0 | 	shl	local01, #3
1b644     14 00 00 FF 
1b648     38 E5 05 F1 | 	add	objptr, ##10552
1b64c     F2 26 02 F1 | 	add	local01, objptr
1b650     A7 12 02 F6 | 	mov	arg01, fp
1b654     14 00 00 FF 
1b658     38 E5 85 F1 | 	sub	objptr, ##10552
1b65c     C8 21 BF FD | 	call	#_converttofloat
1b660     08 26 06 F1 | 	add	local01, #8
1b664     13 FB 61 FC | 	wrlong	result1, local01
1b668     A7 F0 03 F6 | 	mov	ptra, fp
1b66c     B2 00 A0 FD | 	call	#popregs_
1b670                 | _do_setlen_ret
1b670     2D 00 64 FD | 	ret
1b674                 | 
1b674                 | ' 
1b674                 | ' ' ------------------ setpan
1b674                 | ' 
1b674                 | ' sub do_setpan
1b674                 | _do_setpan
1b674     02 4A 05 F6 | 	mov	COUNT_, #2
1b678     A8 00 A0 FD | 	call	#pushregs_
1b67c     18 F0 07 F1 | 	add	ptra, #24
1b680     04 1F BF FD | 	call	#_pop
1b684     FD 12 02 F6 | 	mov	arg01, result1
1b688     FE 26 02 F6 | 	mov	local01, result2
1b68c     FF 28 02 F6 | 	mov	local02, result3
1b690     A7 12 62 FC | 	wrlong	arg01, fp
1b694     04 4E 05 F1 | 	add	fp, #4
1b698     A7 26 62 FC | 	wrlong	local01, fp
1b69c     04 4E 05 F1 | 	add	fp, #4
1b6a0     A7 28 62 FC | 	wrlong	local02, fp
1b6a4     08 4E 85 F1 | 	sub	fp, #8
1b6a8     DC 1E BF FD | 	call	#_pop
1b6ac     FD 28 02 F6 | 	mov	local02, result1
1b6b0     0C 4E 05 F1 | 	add	fp, #12
1b6b4     A7 28 62 FC | 	wrlong	local02, fp
1b6b8     04 4E 05 F1 | 	add	fp, #4
1b6bc     A7 FC 61 FC | 	wrlong	result2, fp
1b6c0     04 4E 05 F1 | 	add	fp, #4
1b6c4     A7 FE 61 FC | 	wrlong	result3, fp
1b6c8     08 4E 85 F1 | 	sub	fp, #8
1b6cc     A7 12 02 F6 | 	mov	arg01, fp
1b6d0     0C 4E 85 F1 | 	sub	fp, #12
1b6d4     94 20 BF FD | 	call	#_converttoint
1b6d8     FD 28 02 F6 | 	mov	local02, result1
1b6dc     14 27 02 F6 | 	mov	local01, local02
1b6e0     01 26 66 F0 | 	shl	local01, #1
1b6e4     14 27 02 F1 | 	add	local01, local02
1b6e8     03 26 66 F0 | 	shl	local01, #3
1b6ec     14 00 00 FF 
1b6f0     38 E5 05 F1 | 	add	objptr, ##10552
1b6f4     F2 26 02 F1 | 	add	local01, objptr
1b6f8     A7 12 02 F6 | 	mov	arg01, fp
1b6fc     14 00 00 FF 
1b700     38 E5 85 F1 | 	sub	objptr, ##10552
1b704     20 21 BF FD | 	call	#_converttofloat
1b708     10 26 06 F1 | 	add	local01, #16
1b70c     13 FB 61 FC | 	wrlong	result1, local01
1b710     A7 F0 03 F6 | 	mov	ptra, fp
1b714     B2 00 A0 FD | 	call	#popregs_
1b718                 | _do_setpan_ret
1b718     2D 00 64 FD | 	ret
1b71c                 | 
1b71c                 | ' 
1b71c                 | ' ' ------------------ setsustain
1b71c                 | ' 
1b71c                 | ' sub do_setsustain
1b71c                 | _do_setsustain
1b71c     02 4A 05 F6 | 	mov	COUNT_, #2
1b720     A8 00 A0 FD | 	call	#pushregs_
1b724     18 F0 07 F1 | 	add	ptra, #24
1b728     5C 1E BF FD | 	call	#_pop
1b72c     FD 12 02 F6 | 	mov	arg01, result1
1b730     FE 26 02 F6 | 	mov	local01, result2
1b734     FF 28 02 F6 | 	mov	local02, result3
1b738     A7 12 62 FC | 	wrlong	arg01, fp
1b73c     04 4E 05 F1 | 	add	fp, #4
1b740     A7 26 62 FC | 	wrlong	local01, fp
1b744     04 4E 05 F1 | 	add	fp, #4
1b748     A7 28 62 FC | 	wrlong	local02, fp
1b74c     08 4E 85 F1 | 	sub	fp, #8
1b750     34 1E BF FD | 	call	#_pop
1b754     FD 28 02 F6 | 	mov	local02, result1
1b758     0C 4E 05 F1 | 	add	fp, #12
1b75c     A7 28 62 FC | 	wrlong	local02, fp
1b760     04 4E 05 F1 | 	add	fp, #4
1b764     A7 FC 61 FC | 	wrlong	result2, fp
1b768     04 4E 05 F1 | 	add	fp, #4
1b76c     A7 FE 61 FC | 	wrlong	result3, fp
1b770     08 4E 85 F1 | 	sub	fp, #8
1b774     A7 12 02 F6 | 	mov	arg01, fp
1b778     0C 4E 85 F1 | 	sub	fp, #12
1b77c     EC 1F BF FD | 	call	#_converttoint
1b780     FD 28 02 F6 | 	mov	local02, result1
1b784     14 27 02 F6 | 	mov	local01, local02
1b788     01 26 66 F0 | 	shl	local01, #1
1b78c     14 27 02 F1 | 	add	local01, local02
1b790     03 26 66 F0 | 	shl	local01, #3
1b794     14 00 00 FF 
1b798     38 E5 05 F1 | 	add	objptr, ##10552
1b79c     F2 26 02 F1 | 	add	local01, objptr
1b7a0     A7 12 02 F6 | 	mov	arg01, fp
1b7a4     14 00 00 FF 
1b7a8     38 E5 85 F1 | 	sub	objptr, ##10552
1b7ac     BC 1F BF FD | 	call	#_converttoint
1b7b0     14 26 06 F1 | 	add	local01, #20
1b7b4     13 FB 51 FC | 	wrword	result1, local01
1b7b8     A7 F0 03 F6 | 	mov	ptra, fp
1b7bc     B2 00 A0 FD | 	call	#popregs_
1b7c0                 | _do_setsustain_ret
1b7c0     2D 00 64 FD | 	ret
1b7c4                 | 
1b7c4                 | ' 
1b7c4                 | ' ' ------------------ setvol
1b7c4                 | ' 
1b7c4                 | ' sub do_setvol
1b7c4                 | _do_setvol
1b7c4     02 4A 05 F6 | 	mov	COUNT_, #2
1b7c8     A8 00 A0 FD | 	call	#pushregs_
1b7cc     18 F0 07 F1 | 	add	ptra, #24
1b7d0     B4 1D BF FD | 	call	#_pop
1b7d4     FD 12 02 F6 | 	mov	arg01, result1
1b7d8     FE 26 02 F6 | 	mov	local01, result2
1b7dc     FF 28 02 F6 | 	mov	local02, result3
1b7e0     A7 12 62 FC | 	wrlong	arg01, fp
1b7e4     04 4E 05 F1 | 	add	fp, #4
1b7e8     A7 26 62 FC | 	wrlong	local01, fp
1b7ec     04 4E 05 F1 | 	add	fp, #4
1b7f0     A7 28 62 FC | 	wrlong	local02, fp
1b7f4     08 4E 85 F1 | 	sub	fp, #8
1b7f8     8C 1D BF FD | 	call	#_pop
1b7fc     FD 28 02 F6 | 	mov	local02, result1
1b800     0C 4E 05 F1 | 	add	fp, #12
1b804     A7 28 62 FC | 	wrlong	local02, fp
1b808     04 4E 05 F1 | 	add	fp, #4
1b80c     A7 FC 61 FC | 	wrlong	result2, fp
1b810     04 4E 05 F1 | 	add	fp, #4
1b814     A7 FE 61 FC | 	wrlong	result3, fp
1b818     08 4E 85 F1 | 	sub	fp, #8
1b81c     A7 12 02 F6 | 	mov	arg01, fp
1b820     0C 4E 85 F1 | 	sub	fp, #12
1b824     44 1F BF FD | 	call	#_converttoint
1b828     FD 28 02 F6 | 	mov	local02, result1
1b82c     14 27 02 F6 | 	mov	local01, local02
1b830     01 26 66 F0 | 	shl	local01, #1
1b834     14 27 02 F1 | 	add	local01, local02
1b838     03 26 66 F0 | 	shl	local01, #3
1b83c     14 00 00 FF 
1b840     38 E5 05 F1 | 	add	objptr, ##10552
1b844     F2 26 02 F1 | 	add	local01, objptr
1b848     A7 12 02 F6 | 	mov	arg01, fp
1b84c     14 00 00 FF 
1b850     38 E5 85 F1 | 	sub	objptr, ##10552
1b854     D0 1F BF FD | 	call	#_converttofloat
1b858     0C 26 06 F1 | 	add	local01, #12
1b85c     13 FB 61 FC | 	wrlong	result1, local01
1b860     A7 F0 03 F6 | 	mov	ptra, fp
1b864     B2 00 A0 FD | 	call	#popregs_
1b868                 | _do_setvol_ret
1b868     2D 00 64 FD | 	ret
1b86c                 | 
1b86c                 | ' 
1b86c                 | ' ' ------------------ setwave
1b86c                 | ' 
1b86c                 | ' sub do_setwave
1b86c                 | _do_setwave
1b86c     02 4A 05 F6 | 	mov	COUNT_, #2
1b870     A8 00 A0 FD | 	call	#pushregs_
1b874     18 F0 07 F1 | 	add	ptra, #24
1b878     0C 1D BF FD | 	call	#_pop
1b87c     FD 12 02 F6 | 	mov	arg01, result1
1b880     FE 26 02 F6 | 	mov	local01, result2
1b884     FF 28 02 F6 | 	mov	local02, result3
1b888     A7 12 62 FC | 	wrlong	arg01, fp
1b88c     04 4E 05 F1 | 	add	fp, #4
1b890     A7 26 62 FC | 	wrlong	local01, fp
1b894     04 4E 05 F1 | 	add	fp, #4
1b898     A7 28 62 FC | 	wrlong	local02, fp
1b89c     08 4E 85 F1 | 	sub	fp, #8
1b8a0     E4 1C BF FD | 	call	#_pop
1b8a4     FD 28 02 F6 | 	mov	local02, result1
1b8a8     0C 4E 05 F1 | 	add	fp, #12
1b8ac     A7 28 62 FC | 	wrlong	local02, fp
1b8b0     04 4E 05 F1 | 	add	fp, #4
1b8b4     A7 FC 61 FC | 	wrlong	result2, fp
1b8b8     04 4E 05 F1 | 	add	fp, #4
1b8bc     A7 FE 61 FC | 	wrlong	result3, fp
1b8c0     08 4E 85 F1 | 	sub	fp, #8
1b8c4     A7 12 02 F6 | 	mov	arg01, fp
1b8c8     0C 4E 85 F1 | 	sub	fp, #12
1b8cc     9C 1E BF FD | 	call	#_converttoint
1b8d0     FD 28 02 F6 | 	mov	local02, result1
1b8d4     14 27 02 F6 | 	mov	local01, local02
1b8d8     01 26 66 F0 | 	shl	local01, #1
1b8dc     14 27 02 F1 | 	add	local01, local02
1b8e0     03 26 66 F0 | 	shl	local01, #3
1b8e4     14 00 00 FF 
1b8e8     38 E5 05 F1 | 	add	objptr, ##10552
1b8ec     F2 26 02 F1 | 	add	local01, objptr
1b8f0     A7 12 02 F6 | 	mov	arg01, fp
1b8f4     14 00 00 FF 
1b8f8     38 E5 85 F1 | 	sub	objptr, ##10552
1b8fc     6C 1E BF FD | 	call	#_converttoint
1b900     04 26 06 F1 | 	add	local01, #4
1b904     13 FB 41 FC | 	wrbyte	result1, local01
1b908     A7 F0 03 F6 | 	mov	ptra, fp
1b90c     B2 00 A0 FD | 	call	#popregs_
1b910                 | _do_setwave_ret
1b910     2D 00 64 FD | 	ret
1b914                 | 
1b914                 | ' 
1b914                 | ' ' ------------------ shutup
1b914                 | ' 
1b914                 | ' sub do_shutup
1b914                 | _do_shutup
1b914     03 4A 05 F6 | 	mov	COUNT_, #3
1b918     A8 00 A0 FD | 	call	#pushregs_
1b91c     18 F0 07 F1 | 	add	ptra, #24
1b920     4A 00 00 FF 
1b924     80 E4 05 F1 | 	add	objptr, ##38016
1b928     F2 26 02 FB | 	rdlong	local01, objptr
1b92c     13 29 02 F6 | 	mov	local02, local01
1b930     01 28 66 F0 | 	shl	local02, #1
1b934     13 29 02 F1 | 	add	local02, local01
1b938     02 28 66 F0 | 	shl	local02, #2
1b93c     03 00 00 FF 
1b940     04 E4 85 F1 | 	sub	objptr, ##1540
1b944     F2 28 02 F1 | 	add	local02, objptr
1b948     14 2B 0A FB | 	rdlong	local03, local02 wz
1b94c     14 4E 05 F1 | 	add	fp, #20
1b950     A7 2A 62 FC | 	wrlong	local03, fp
1b954                 | ' 
1b954                 | ' numpar=compiledline(lineptr_e).result.uresult
1b954                 | ' if numpar=0 then
1b954     14 4E 85 F1 | 	sub	fp, #20
1b958     47 00 00 FF 
1b95c     7C E4 85 F1 | 	sub	objptr, ##36476
1b960     50 00 90 5D |  if_ne	jmp	#LR__2162
1b964                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1b964     10 4E 05 F1 | 	add	fp, #16
1b968     A7 00 68 FC | 	wrlong	#0, fp
1b96c     37 00 00 FF 
1b970     10 E4 05 F1 | 	add	objptr, ##28176
1b974     97 16 48 FB | 	callpa	#(@LR__2161-@LR__2160)>>2,fcache_load_ptr_
1b978                 | LR__2160
1b978     F2 12 02 FB | 	rdlong	arg01, objptr
1b97c     A7 2A 02 FB | 	rdlong	local03, fp
1b980     06 2A 66 F0 | 	shl	local03, #6
1b984     15 13 02 F1 | 	add	arg01, local03
1b988     14 12 06 F1 | 	add	arg01, #20
1b98c     09 01 58 FC | 	wrword	#0, arg01
1b990     A7 2A 02 FB | 	rdlong	local03, fp
1b994     01 2A 06 F1 | 	add	local03, #1
1b998     A7 2A 62 FC | 	wrlong	local03, fp
1b99c     08 2A 56 F2 | 	cmps	local03, #8 wc
1b9a0     D4 FF 9F CD |  if_b	jmp	#LR__2160
1b9a4                 | LR__2161
1b9a4     37 00 00 FF 
1b9a8     10 E4 85 F1 | 	sub	objptr, ##28176
1b9ac     10 4E 85 F1 | 	sub	fp, #16
1b9b0     64 00 90 FD | 	jmp	#LR__2163
1b9b4                 | LR__2162
1b9b4     D0 1B BF FD | 	call	#_pop
1b9b8     FF 26 02 F6 | 	mov	local01, result3
1b9bc     A7 FA 61 FC | 	wrlong	result1, fp
1b9c0     04 4E 05 F1 | 	add	fp, #4
1b9c4     A7 FC 61 FC | 	wrlong	result2, fp
1b9c8     04 4E 05 F1 | 	add	fp, #4
1b9cc     A7 26 62 FC | 	wrlong	local01, fp
1b9d0     08 4E 85 F1 | 	sub	fp, #8
1b9d4     A7 12 02 F6 | 	mov	arg01, fp
1b9d8     90 1D BF FD | 	call	#_converttoint
1b9dc     FD 2A 52 F6 | 	abs	local03, result1 wc
1b9e0     07 2A 06 F5 | 	and	local03, #7
1b9e4     15 29 82 F6 | 	negc	local02, local03
1b9e8     0C 4E 05 F1 | 	add	fp, #12
1b9ec     A7 28 62 FC | 	wrlong	local02, fp
1b9f0     37 00 00 FF 
1b9f4     10 E4 05 F1 | 	add	objptr, ##28176
1b9f8     F2 12 02 FB | 	rdlong	arg01, objptr
1b9fc     37 00 00 FF 
1ba00     10 E4 85 F1 | 	sub	objptr, ##28176
1ba04     0C 4E 85 F1 | 	sub	fp, #12
1ba08     06 28 66 F0 | 	shl	local02, #6
1ba0c     14 13 02 F1 | 	add	arg01, local02
1ba10     14 12 06 F1 | 	add	arg01, #20
1ba14     09 01 58 FC | 	wrword	#0, arg01
1ba18                 | LR__2163
1ba18     A7 F0 03 F6 | 	mov	ptra, fp
1ba1c     B2 00 A0 FD | 	call	#popregs_
1ba20                 | _do_shutup_ret
1ba20     2D 00 64 FD | 	ret
1ba24                 | 
1ba24                 | ' 
1ba24                 | ' ' ------------------ sin
1ba24                 | ' 
1ba24                 | ' sub do_sin
1ba24                 | _do_sin
1ba24     01 4A 05 F6 | 	mov	COUNT_, #1
1ba28     A8 00 A0 FD | 	call	#pushregs_
1ba2c     10 F0 07 F1 | 	add	ptra, #16
1ba30     4A 00 00 FF 
1ba34     80 E4 05 F1 | 	add	objptr, ##38016
1ba38     F2 26 02 FB | 	rdlong	local01, objptr
1ba3c     13 17 02 F6 | 	mov	arg03, local01
1ba40     01 16 66 F0 | 	shl	arg03, #1
1ba44     13 17 02 F1 | 	add	arg03, local01
1ba48     02 16 66 F0 | 	shl	arg03, #2
1ba4c     03 00 00 FF 
1ba50     04 E4 85 F1 | 	sub	objptr, ##1540
1ba54     F2 16 02 F1 | 	add	arg03, objptr
1ba58     0B 17 02 FB | 	rdlong	arg03, arg03
1ba5c     0C 4E 05 F1 | 	add	fp, #12
1ba60     A7 16 62 FC | 	wrlong	arg03, fp
1ba64                 | ' 
1ba64                 | ' numpar=compiledline(lineptr_e).result.uresult
1ba64                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1ba64     0C 4E 85 F1 | 	sub	fp, #12
1ba68     02 16 16 F2 | 	cmp	arg03, #2 wc
1ba6c     47 00 00 FF 
1ba70     7C E4 85 F1 | 	sub	objptr, ##36476
1ba74     0C 4E 05 C1 |  if_b	add	fp, #12
1ba78     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1ba7c     0C 4E 85 C1 |  if_b	sub	fp, #12
1ba80     40 00 90 4D |  if_c_and_nz	jmp	#LR__2170
1ba84     00 12 06 F6 | 	mov	arg01, #0
1ba88     30 0B B1 FD | 	call	#__system___getiolock_0603
1ba8c     FD 12 02 F6 | 	mov	arg01, result1
1ba90     84 AE B0 FD | 	call	#__system___lockmem
1ba94     B7 01 00 FF 
1ba98     D7 15 06 F6 | 	mov	arg02, ##@LR__5969
1ba9c     00 12 06 F6 | 	mov	arg01, #0
1baa0     00 16 06 F6 | 	mov	arg03, #0
1baa4     68 BB B0 FD | 	call	#__system___basic_print_string
1baa8     00 12 06 F6 | 	mov	arg01, #0
1baac     0C 0B B1 FD | 	call	#__system___getiolock_0603
1bab0     FD 00 68 FC | 	wrlong	#0, result1
1bab4     27 12 06 F6 | 	mov	arg01, #39
1bab8     00 14 06 F6 | 	mov	arg02, #0
1babc     68 74 B0 FD | 	call	#_printerror
1bac0     64 00 90 FD | 	jmp	#LR__2171
1bac4                 | LR__2170
1bac4     C0 1A BF FD | 	call	#_pop
1bac8     A7 FA 61 FC | 	wrlong	result1, fp
1bacc     04 4E 05 F1 | 	add	fp, #4
1bad0     A7 FC 61 FC | 	wrlong	result2, fp
1bad4     04 4E 05 F1 | 	add	fp, #4
1bad8     A7 FE 61 FC | 	wrlong	result3, fp
1badc     08 4E 85 F1 | 	sub	fp, #8
1bae0     52 00 00 FF 
1bae4     A8 E4 05 F1 | 	add	objptr, ##42152
1bae8     F2 26 02 FB | 	rdlong	local01, objptr
1baec     52 00 00 FF 
1baf0     A8 E4 85 F1 | 	sub	objptr, ##42152
1baf4     A7 12 02 F6 | 	mov	arg01, fp
1baf8     2C 1D BF FD | 	call	#_converttofloat
1bafc     FD 14 02 F6 | 	mov	arg02, result1
1bb00     13 13 02 F6 | 	mov	arg01, local01
1bb04     8C DC B0 FD | 	call	#__system___float_mul
1bb08     FD 12 02 F6 | 	mov	arg01, result1
1bb0c     E4 E5 B0 FD | 	call	#__system____builtin_sinf
1bb10     A7 FA 61 FC | 	wrlong	result1, fp
1bb14     08 4E 05 F1 | 	add	fp, #8
1bb18     A7 3C 68 FC | 	wrlong	#30, fp
1bb1c     08 4E 85 F1 | 	sub	fp, #8
1bb20     A7 12 02 F6 | 	mov	arg01, fp
1bb24     F8 1A BF FD | 	call	#_push
1bb28                 | LR__2171
1bb28     A7 F0 03 F6 | 	mov	ptra, fp
1bb2c     B2 00 A0 FD | 	call	#popregs_
1bb30                 | _do_sin_ret
1bb30     2D 00 64 FD | 	ret
1bb34                 | 
1bb34                 | ' 
1bb34                 | ' ' ------------------ skip
1bb34                 | ' ' A helper token for on-gosub: skips the rest of gosubs
1bb34                 | ' 
1bb34                 | ' sub do_skip
1bb34                 | _do_skip
1bb34     4A 00 00 FF 
1bb38     80 E4 05 F1 | 	add	objptr, ##38016
1bb3c     F2 00 02 FB | 	rdlong	_var01, objptr
1bb40     00 03 02 F6 | 	mov	_var02, _var01
1bb44     01 02 66 F0 | 	shl	_var02, #1
1bb48     00 03 02 F1 | 	add	_var02, _var01
1bb4c     02 02 66 F0 | 	shl	_var02, #2
1bb50     03 00 00 FF 
1bb54     04 E4 85 F1 | 	sub	objptr, ##1540
1bb58     F2 02 02 F1 | 	add	_var02, objptr
1bb5c     01 03 02 FB | 	rdlong	_var02, _var02
1bb60     01 02 86 F1 | 	sub	_var02, #1
1bb64     03 00 00 FF 
1bb68     04 E4 05 F1 | 	add	objptr, ##1540
1bb6c     F2 02 62 FC | 	wrlong	_var02, objptr
1bb70     4A 00 00 FF 
1bb74     80 E4 85 F1 | 	sub	objptr, ##38016
1bb78                 | _do_skip_ret
1bb78     2D 00 64 FD | 	ret
1bb7c                 | 
1bb7c                 | ' 
1bb7c                 | ' ' ------------------ sprite
1bb7c                 | ' 
1bb7c                 | ' sub do_sprite
1bb7c                 | _do_sprite
1bb7c     00 4A 05 F6 | 	mov	COUNT_, #0
1bb80     A8 00 A0 FD | 	call	#pushregs_
1bb84     30 F0 07 F1 | 	add	ptra, #48
1bb88     FC 19 BF FD | 	call	#_pop
1bb8c     FD 16 02 F6 | 	mov	arg03, result1
1bb90     FE 14 02 F6 | 	mov	arg02, result2
1bb94     FF 12 02 F6 | 	mov	arg01, result3
1bb98     18 4E 05 F1 | 	add	fp, #24
1bb9c     A7 16 62 FC | 	wrlong	arg03, fp
1bba0     04 4E 05 F1 | 	add	fp, #4
1bba4     A7 14 62 FC | 	wrlong	arg02, fp
1bba8     04 4E 05 F1 | 	add	fp, #4
1bbac     A7 12 62 FC | 	wrlong	arg01, fp
1bbb0     20 4E 85 F1 | 	sub	fp, #32
1bbb4     D0 19 BF FD | 	call	#_pop
1bbb8     FD 16 02 F6 | 	mov	arg03, result1
1bbbc     FE 14 02 F6 | 	mov	arg02, result2
1bbc0     FF 12 02 F6 | 	mov	arg01, result3
1bbc4     0C 4E 05 F1 | 	add	fp, #12
1bbc8     A7 16 62 FC | 	wrlong	arg03, fp
1bbcc     04 4E 05 F1 | 	add	fp, #4
1bbd0     A7 14 62 FC | 	wrlong	arg02, fp
1bbd4     04 4E 05 F1 | 	add	fp, #4
1bbd8     A7 12 62 FC | 	wrlong	arg01, fp
1bbdc     14 4E 85 F1 | 	sub	fp, #20
1bbe0     A4 19 BF FD | 	call	#_pop
1bbe4     FF 16 02 F6 | 	mov	arg03, result3
1bbe8     A7 FA 61 FC | 	wrlong	result1, fp
1bbec     04 4E 05 F1 | 	add	fp, #4
1bbf0     A7 FC 61 FC | 	wrlong	result2, fp
1bbf4     04 4E 05 F1 | 	add	fp, #4
1bbf8     A7 16 62 FC | 	wrlong	arg03, fp
1bbfc     08 4E 85 F1 | 	sub	fp, #8
1bc00     A7 12 02 F6 | 	mov	arg01, fp
1bc04     64 1B BF FD | 	call	#_converttoint
1bc08     24 4E 05 F1 | 	add	fp, #36
1bc0c     A7 FA 61 FC | 	wrlong	result1, fp
1bc10     18 4E 85 F1 | 	sub	fp, #24
1bc14     A7 12 02 F6 | 	mov	arg01, fp
1bc18     0C 4E 85 F1 | 	sub	fp, #12
1bc1c     4C 1B BF FD | 	call	#_converttoint
1bc20     28 4E 05 F1 | 	add	fp, #40
1bc24     A7 FA 61 FC | 	wrlong	result1, fp
1bc28     10 4E 85 F1 | 	sub	fp, #16
1bc2c     A7 12 02 F6 | 	mov	arg01, fp
1bc30     18 4E 85 F1 | 	sub	fp, #24
1bc34     34 1B BF FD | 	call	#_converttoint
1bc38     2C 4E 05 F1 | 	add	fp, #44
1bc3c     A7 FA 61 FC | 	wrlong	result1, fp
1bc40     08 4E 85 F1 | 	sub	fp, #8
1bc44     A7 12 02 FB | 	rdlong	arg01, fp
1bc48     04 4E 05 F1 | 	add	fp, #4
1bc4c     A7 14 02 FB | 	rdlong	arg02, fp
1bc50     FD 16 02 F6 | 	mov	arg03, result1
1bc54     28 4E 85 F1 | 	sub	fp, #40
1bc58     B0 82 B0 FD | 	call	#_hg010b_spin2_setspritepos
1bc5c     A7 F0 03 F6 | 	mov	ptra, fp
1bc60     B2 00 A0 FD | 	call	#popregs_
1bc64                 | _do_sprite_ret
1bc64     2D 00 64 FD | 	ret
1bc68                 | 
1bc68                 | ' 
1bc68                 | ' ' ------------------ sqr
1bc68                 | ' 
1bc68                 | ' sub do_sqr
1bc68                 | _do_sqr
1bc68     01 4A 05 F6 | 	mov	COUNT_, #1
1bc6c     A8 00 A0 FD | 	call	#pushregs_
1bc70     10 F0 07 F1 | 	add	ptra, #16
1bc74     4A 00 00 FF 
1bc78     80 E4 05 F1 | 	add	objptr, ##38016
1bc7c     F2 26 02 FB | 	rdlong	local01, objptr
1bc80     13 17 02 F6 | 	mov	arg03, local01
1bc84     01 16 66 F0 | 	shl	arg03, #1
1bc88     13 17 02 F1 | 	add	arg03, local01
1bc8c     02 16 66 F0 | 	shl	arg03, #2
1bc90     03 00 00 FF 
1bc94     04 E4 85 F1 | 	sub	objptr, ##1540
1bc98     F2 16 02 F1 | 	add	arg03, objptr
1bc9c     0B 17 02 FB | 	rdlong	arg03, arg03
1bca0     0C 4E 05 F1 | 	add	fp, #12
1bca4     A7 16 62 FC | 	wrlong	arg03, fp
1bca8                 | ' 
1bca8                 | ' numpar=compiledline(lineptr_e).result.uresult
1bca8                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
1bca8     0C 4E 85 F1 | 	sub	fp, #12
1bcac     02 16 16 F2 | 	cmp	arg03, #2 wc
1bcb0     47 00 00 FF 
1bcb4     7C E4 85 F1 | 	sub	objptr, ##36476
1bcb8     0C 4E 05 C1 |  if_b	add	fp, #12
1bcbc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1bcc0     0C 4E 85 C1 |  if_b	sub	fp, #12
1bcc4     40 00 90 4D |  if_c_and_nz	jmp	#LR__2180
1bcc8     00 12 06 F6 | 	mov	arg01, #0
1bccc     EC 08 B1 FD | 	call	#__system___getiolock_0603
1bcd0     FD 12 02 F6 | 	mov	arg01, result1
1bcd4     40 AC B0 FD | 	call	#__system___lockmem
1bcd8     B7 01 00 FF 
1bcdc     DD 15 06 F6 | 	mov	arg02, ##@LR__5970
1bce0     00 12 06 F6 | 	mov	arg01, #0
1bce4     00 16 06 F6 | 	mov	arg03, #0
1bce8     24 B9 B0 FD | 	call	#__system___basic_print_string
1bcec     00 12 06 F6 | 	mov	arg01, #0
1bcf0     C8 08 B1 FD | 	call	#__system___getiolock_0603
1bcf4     FD 00 68 FC | 	wrlong	#0, result1
1bcf8     27 12 06 F6 | 	mov	arg01, #39
1bcfc     00 14 06 F6 | 	mov	arg02, #0
1bd00     24 72 B0 FD | 	call	#_printerror
1bd04     48 00 90 FD | 	jmp	#LR__2181
1bd08                 | LR__2180
1bd08     7C 18 BF FD | 	call	#_pop
1bd0c     FF 26 02 F6 | 	mov	local01, result3
1bd10     A7 FA 61 FC | 	wrlong	result1, fp
1bd14     04 4E 05 F1 | 	add	fp, #4
1bd18     A7 FC 61 FC | 	wrlong	result2, fp
1bd1c     04 4E 05 F1 | 	add	fp, #4
1bd20     A7 26 62 FC | 	wrlong	local01, fp
1bd24     08 4E 85 F1 | 	sub	fp, #8
1bd28     A7 12 02 F6 | 	mov	arg01, fp
1bd2c     F8 1A BF FD | 	call	#_converttofloat
1bd30     FD 12 02 F6 | 	mov	arg01, result1
1bd34     84 D9 B0 FD | 	call	#__system___float_sqrt
1bd38     A7 FA 61 FC | 	wrlong	result1, fp
1bd3c     08 4E 05 F1 | 	add	fp, #8
1bd40     A7 3C 68 FC | 	wrlong	#30, fp
1bd44     08 4E 85 F1 | 	sub	fp, #8
1bd48     A7 12 02 F6 | 	mov	arg01, fp
1bd4c     D0 18 BF FD | 	call	#_push
1bd50                 | LR__2181
1bd50     A7 F0 03 F6 | 	mov	ptra, fp
1bd54     B2 00 A0 FD | 	call	#popregs_
1bd58                 | _do_sqr_ret
1bd58     2D 00 64 FD | 	ret
1bd5c                 | 
1bd5c                 | ' 
1bd5c                 | ' ' ------------------ stick
1bd5c                 | ' 
1bd5c                 | ' sub do_stick
1bd5c                 | _do_stick
1bd5c     01 4A 05 F6 | 	mov	COUNT_, #1
1bd60     A8 00 A0 FD | 	call	#pushregs_
1bd64     10 F0 07 F1 | 	add	ptra, #16
1bd68     4A 00 00 FF 
1bd6c     80 E4 05 F1 | 	add	objptr, ##38016
1bd70     F2 26 02 FB | 	rdlong	local01, objptr
1bd74     13 17 02 F6 | 	mov	arg03, local01
1bd78     01 16 66 F0 | 	shl	arg03, #1
1bd7c     13 17 02 F1 | 	add	arg03, local01
1bd80     02 16 66 F0 | 	shl	arg03, #2
1bd84     03 00 00 FF 
1bd88     04 E4 85 F1 | 	sub	objptr, ##1540
1bd8c     F2 16 02 F1 | 	add	arg03, objptr
1bd90     0B 17 02 FB | 	rdlong	arg03, arg03
1bd94     0C 4E 05 F1 | 	add	fp, #12
1bd98     A7 16 62 FC | 	wrlong	arg03, fp
1bd9c                 | ' 
1bd9c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bd9c                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
1bd9c     0C 4E 85 F1 | 	sub	fp, #12
1bda0     02 16 16 F2 | 	cmp	arg03, #2 wc
1bda4     47 00 00 FF 
1bda8     7C E4 85 F1 | 	sub	objptr, ##36476
1bdac     40 00 90 CD |  if_b	jmp	#LR__2190
1bdb0     00 12 06 F6 | 	mov	arg01, #0
1bdb4     04 08 B1 FD | 	call	#__system___getiolock_0603
1bdb8     FD 12 02 F6 | 	mov	arg01, result1
1bdbc     58 AB B0 FD | 	call	#__system___lockmem
1bdc0     B7 01 00 FF 
1bdc4     E3 15 06 F6 | 	mov	arg02, ##@LR__5971
1bdc8     00 12 06 F6 | 	mov	arg01, #0
1bdcc     00 16 06 F6 | 	mov	arg03, #0
1bdd0     3C B8 B0 FD | 	call	#__system___basic_print_string
1bdd4     00 12 06 F6 | 	mov	arg01, #0
1bdd8     E0 07 B1 FD | 	call	#__system___getiolock_0603
1bddc     FD 00 68 FC | 	wrlong	#0, result1
1bde0     27 12 06 F6 | 	mov	arg01, #39
1bde4     00 14 06 F6 | 	mov	arg02, #0
1bde8     3C 71 B0 FD | 	call	#_printerror
1bdec     F0 00 90 FD | 	jmp	#LR__2194
1bdf0                 | LR__2190
1bdf0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
1bdf0     0C 4E 05 F1 | 	add	fp, #12
1bdf4     A7 FE 09 FB | 	rdlong	result3, fp wz
1bdf8     0C 4E 85 F1 | 	sub	fp, #12
1bdfc     30 00 90 5D |  if_ne	jmp	#LR__2191
1be00     52 00 00 FF 
1be04     1C E4 05 F1 | 	add	objptr, ##42012
1be08     F2 26 02 FB | 	rdlong	local01, objptr
1be0c     52 00 00 FF 
1be10     1C E4 85 F1 | 	sub	objptr, ##42012
1be14     A7 26 62 FC | 	wrlong	local01, fp
1be18     08 4E 05 F1 | 	add	fp, #8
1be1c     A7 3A 68 FC | 	wrlong	#29, fp
1be20     08 4E 85 F1 | 	sub	fp, #8
1be24     A7 12 02 F6 | 	mov	arg01, fp
1be28     F4 17 BF FD | 	call	#_push
1be2c     B0 00 90 FD | 	jmp	#LR__2194
1be30                 | LR__2191
1be30     54 17 BF FD | 	call	#_pop
1be34     A7 FA 61 FC | 	wrlong	result1, fp
1be38     04 4E 05 F1 | 	add	fp, #4
1be3c     A7 FC 61 FC | 	wrlong	result2, fp
1be40     04 4E 05 F1 | 	add	fp, #4
1be44     A7 FE 61 FC | 	wrlong	result3, fp
1be48                 | ' t1=pop()
1be48                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1be48     08 4E 85 F1 | 	sub	fp, #8
1be4c     1C FE 0D F2 | 	cmp	result3, #28 wz
1be50     08 4E 05 51 |  if_ne	add	fp, #8
1be54     A7 26 02 5B |  if_ne	rdlong	local01, fp
1be58     08 4E 85 51 |  if_ne	sub	fp, #8
1be5c     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1be60     70 00 90 5D |  if_ne	jmp	#LR__2193
1be64     A7 26 02 FB | 	rdlong	local01, fp
1be68     52 00 00 FF 
1be6c     08 E5 05 F1 | 	add	objptr, ##42248
1be70     F2 26 62 FC | 	wrlong	local01, objptr
1be74                 | '   q=t1.result.uresult
1be74                 | '   if q<7 then 
1be74     52 00 00 FF 
1be78     08 E5 85 F1 | 	sub	objptr, ##42248
1be7c     07 26 56 F2 | 	cmps	local01, #7 wc
1be80     40 00 90 3D |  if_ae	jmp	#LR__2192
1be84     52 00 00 FF 
1be88     08 E5 05 F1 | 	add	objptr, ##42248
1be8c     F2 26 02 FB | 	rdlong	local01, objptr
1be90     02 26 66 F0 | 	shl	local01, #2
1be94     EC E4 85 F1 | 	sub	objptr, #236
1be98     F2 26 02 F1 | 	add	local01, objptr
1be9c     13 27 02 FB | 	rdlong	local01, local01
1bea0     A7 26 62 FC | 	wrlong	local01, fp
1bea4     08 4E 05 F1 | 	add	fp, #8
1bea8     A7 3A 68 FC | 	wrlong	#29, fp
1beac     08 4E 85 F1 | 	sub	fp, #8
1beb0     A7 12 02 F6 | 	mov	arg01, fp
1beb4     52 00 00 FF 
1beb8     1C E4 85 F1 | 	sub	objptr, ##42012
1bebc     60 17 BF FD | 	call	#_push
1bec0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
1bec0     1C 00 90 FD | 	jmp	#LR__2194
1bec4                 | LR__2192
1bec4     29 12 06 F6 | 	mov	arg01, #41
1bec8     00 14 06 F6 | 	mov	arg02, #0
1becc     58 70 B0 FD | 	call	#_printerror
1bed0                 | '      printerror(41) : return
1bed0     0C 00 90 FD | 	jmp	#LR__2194
1bed4                 | LR__2193
1bed4     29 12 06 F6 | 	mov	arg01, #41
1bed8     00 14 06 F6 | 	mov	arg02, #0
1bedc     48 70 B0 FD | 	call	#_printerror
1bee0                 | LR__2194
1bee0     A7 F0 03 F6 | 	mov	ptra, fp
1bee4     B2 00 A0 FD | 	call	#popregs_
1bee8                 | _do_stick_ret
1bee8     2D 00 64 FD | 	ret
1beec                 | 
1beec                 | ' 
1beec                 | ' ' ------------------ strig
1beec                 | ' 
1beec                 | ' sub do_strig
1beec                 | _do_strig
1beec     01 4A 05 F6 | 	mov	COUNT_, #1
1bef0     A8 00 A0 FD | 	call	#pushregs_
1bef4     10 F0 07 F1 | 	add	ptra, #16
1bef8     4A 00 00 FF 
1befc     80 E4 05 F1 | 	add	objptr, ##38016
1bf00     F2 26 02 FB | 	rdlong	local01, objptr
1bf04     13 17 02 F6 | 	mov	arg03, local01
1bf08     01 16 66 F0 | 	shl	arg03, #1
1bf0c     13 17 02 F1 | 	add	arg03, local01
1bf10     02 16 66 F0 | 	shl	arg03, #2
1bf14     03 00 00 FF 
1bf18     04 E4 85 F1 | 	sub	objptr, ##1540
1bf1c     F2 16 02 F1 | 	add	arg03, objptr
1bf20     0B 17 02 FB | 	rdlong	arg03, arg03
1bf24     0C 4E 05 F1 | 	add	fp, #12
1bf28     A7 16 62 FC | 	wrlong	arg03, fp
1bf2c                 | ' 
1bf2c                 | ' numpar=compiledline(lineptr_e).result.uresult
1bf2c                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
1bf2c     0C 4E 85 F1 | 	sub	fp, #12
1bf30     02 16 16 F2 | 	cmp	arg03, #2 wc
1bf34     47 00 00 FF 
1bf38     7C E4 85 F1 | 	sub	objptr, ##36476
1bf3c     40 00 90 CD |  if_b	jmp	#LR__2200
1bf40     00 12 06 F6 | 	mov	arg01, #0
1bf44     74 06 B1 FD | 	call	#__system___getiolock_0603
1bf48     FD 12 02 F6 | 	mov	arg01, result1
1bf4c     C8 A9 B0 FD | 	call	#__system___lockmem
1bf50     B7 01 00 FF 
1bf54     EB 15 06 F6 | 	mov	arg02, ##@LR__5972
1bf58     00 12 06 F6 | 	mov	arg01, #0
1bf5c     00 16 06 F6 | 	mov	arg03, #0
1bf60     AC B6 B0 FD | 	call	#__system___basic_print_string
1bf64     00 12 06 F6 | 	mov	arg01, #0
1bf68     50 06 B1 FD | 	call	#__system___getiolock_0603
1bf6c     FD 00 68 FC | 	wrlong	#0, result1
1bf70     27 12 06 F6 | 	mov	arg01, #39
1bf74     00 14 06 F6 | 	mov	arg02, #0
1bf78     AC 6F B0 FD | 	call	#_printerror
1bf7c     F0 00 90 FD | 	jmp	#LR__2204
1bf80                 | LR__2200
1bf80                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1bf80     0C 4E 05 F1 | 	add	fp, #12
1bf84     A7 FE 09 FB | 	rdlong	result3, fp wz
1bf88     0C 4E 85 F1 | 	sub	fp, #12
1bf8c     30 00 90 5D |  if_ne	jmp	#LR__2201
1bf90     52 00 00 FF 
1bf94     38 E4 05 F1 | 	add	objptr, ##42040
1bf98     F2 26 02 FB | 	rdlong	local01, objptr
1bf9c     52 00 00 FF 
1bfa0     38 E4 85 F1 | 	sub	objptr, ##42040
1bfa4     A7 26 62 FC | 	wrlong	local01, fp
1bfa8     08 4E 05 F1 | 	add	fp, #8
1bfac     A7 3A 68 FC | 	wrlong	#29, fp
1bfb0     08 4E 85 F1 | 	sub	fp, #8
1bfb4     A7 12 02 F6 | 	mov	arg01, fp
1bfb8     64 16 BF FD | 	call	#_push
1bfbc     B0 00 90 FD | 	jmp	#LR__2204
1bfc0                 | LR__2201
1bfc0     C4 15 BF FD | 	call	#_pop
1bfc4     A7 FA 61 FC | 	wrlong	result1, fp
1bfc8     04 4E 05 F1 | 	add	fp, #4
1bfcc     A7 FC 61 FC | 	wrlong	result2, fp
1bfd0     04 4E 05 F1 | 	add	fp, #4
1bfd4     A7 FE 61 FC | 	wrlong	result3, fp
1bfd8                 | ' t1=pop()
1bfd8                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
1bfd8     08 4E 85 F1 | 	sub	fp, #8
1bfdc     1C FE 0D F2 | 	cmp	result3, #28 wz
1bfe0     08 4E 05 51 |  if_ne	add	fp, #8
1bfe4     A7 26 02 5B |  if_ne	rdlong	local01, fp
1bfe8     08 4E 85 51 |  if_ne	sub	fp, #8
1bfec     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1bff0     70 00 90 5D |  if_ne	jmp	#LR__2203
1bff4     A7 26 02 FB | 	rdlong	local01, fp
1bff8     52 00 00 FF 
1bffc     08 E5 05 F1 | 	add	objptr, ##42248
1c000     F2 26 62 FC | 	wrlong	local01, objptr
1c004                 | '   q=t1.result.uresult
1c004                 | '   if q<7 then 
1c004     52 00 00 FF 
1c008     08 E5 85 F1 | 	sub	objptr, ##42248
1c00c     07 26 56 F2 | 	cmps	local01, #7 wc
1c010     40 00 90 3D |  if_ae	jmp	#LR__2202
1c014     52 00 00 FF 
1c018     08 E5 05 F1 | 	add	objptr, ##42248
1c01c     F2 26 02 FB | 	rdlong	local01, objptr
1c020     02 26 66 F0 | 	shl	local01, #2
1c024     D0 E4 85 F1 | 	sub	objptr, #208
1c028     F2 26 02 F1 | 	add	local01, objptr
1c02c     13 27 02 FB | 	rdlong	local01, local01
1c030     A7 26 62 FC | 	wrlong	local01, fp
1c034     08 4E 05 F1 | 	add	fp, #8
1c038     A7 3A 68 FC | 	wrlong	#29, fp
1c03c     08 4E 85 F1 | 	sub	fp, #8
1c040     A7 12 02 F6 | 	mov	arg01, fp
1c044     52 00 00 FF 
1c048     38 E4 85 F1 | 	sub	objptr, ##42040
1c04c     D0 15 BF FD | 	call	#_push
1c050                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1c050     1C 00 90 FD | 	jmp	#LR__2204
1c054                 | LR__2202
1c054     29 12 06 F6 | 	mov	arg01, #41
1c058     00 14 06 F6 | 	mov	arg02, #0
1c05c     C8 6E B0 FD | 	call	#_printerror
1c060                 | '      printerror(41) : return
1c060     0C 00 90 FD | 	jmp	#LR__2204
1c064                 | LR__2203
1c064     29 12 06 F6 | 	mov	arg01, #41
1c068     00 14 06 F6 | 	mov	arg02, #0
1c06c     B8 6E B0 FD | 	call	#_printerror
1c070                 | LR__2204
1c070     A7 F0 03 F6 | 	mov	ptra, fp
1c074     B2 00 A0 FD | 	call	#popregs_
1c078                 | _do_strig_ret
1c078     2D 00 64 FD | 	ret
1c07c                 | 
1c07c                 | ' 
1c07c                 | ' ' ------------------ tan
1c07c                 | ' 
1c07c                 | ' sub do_tan
1c07c                 | _do_tan
1c07c     01 4A 05 F6 | 	mov	COUNT_, #1
1c080     A8 00 A0 FD | 	call	#pushregs_
1c084     10 F0 07 F1 | 	add	ptra, #16
1c088     4A 00 00 FF 
1c08c     80 E4 05 F1 | 	add	objptr, ##38016
1c090     F2 26 02 FB | 	rdlong	local01, objptr
1c094     13 17 02 F6 | 	mov	arg03, local01
1c098     01 16 66 F0 | 	shl	arg03, #1
1c09c     13 17 02 F1 | 	add	arg03, local01
1c0a0     02 16 66 F0 | 	shl	arg03, #2
1c0a4     03 00 00 FF 
1c0a8     04 E4 85 F1 | 	sub	objptr, ##1540
1c0ac     F2 16 02 F1 | 	add	arg03, objptr
1c0b0     0B 17 02 FB | 	rdlong	arg03, arg03
1c0b4     0C 4E 05 F1 | 	add	fp, #12
1c0b8     A7 16 62 FC | 	wrlong	arg03, fp
1c0bc                 | ' 
1c0bc                 | ' numpar=compiledline(lineptr_e).result.uresult
1c0bc                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
1c0bc     0C 4E 85 F1 | 	sub	fp, #12
1c0c0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c0c4     47 00 00 FF 
1c0c8     7C E4 85 F1 | 	sub	objptr, ##36476
1c0cc     0C 4E 05 C1 |  if_b	add	fp, #12
1c0d0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c0d4     0C 4E 85 C1 |  if_b	sub	fp, #12
1c0d8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2210
1c0dc     00 12 06 F6 | 	mov	arg01, #0
1c0e0     D8 04 B1 FD | 	call	#__system___getiolock_0603
1c0e4     FD 12 02 F6 | 	mov	arg01, result1
1c0e8     2C A8 B0 FD | 	call	#__system___lockmem
1c0ec     B7 01 00 FF 
1c0f0     F3 15 06 F6 | 	mov	arg02, ##@LR__5973
1c0f4     00 12 06 F6 | 	mov	arg01, #0
1c0f8     00 16 06 F6 | 	mov	arg03, #0
1c0fc     10 B5 B0 FD | 	call	#__system___basic_print_string
1c100     00 12 06 F6 | 	mov	arg01, #0
1c104     B4 04 B1 FD | 	call	#__system___getiolock_0603
1c108     FD 00 68 FC | 	wrlong	#0, result1
1c10c     27 12 06 F6 | 	mov	arg01, #39
1c110     00 14 06 F6 | 	mov	arg02, #0
1c114     10 6E B0 FD | 	call	#_printerror
1c118     64 00 90 FD | 	jmp	#LR__2211
1c11c                 | LR__2210
1c11c     68 14 BF FD | 	call	#_pop
1c120     A7 FA 61 FC | 	wrlong	result1, fp
1c124     04 4E 05 F1 | 	add	fp, #4
1c128     A7 FC 61 FC | 	wrlong	result2, fp
1c12c     04 4E 05 F1 | 	add	fp, #4
1c130     A7 FE 61 FC | 	wrlong	result3, fp
1c134     08 4E 85 F1 | 	sub	fp, #8
1c138     52 00 00 FF 
1c13c     A8 E4 05 F1 | 	add	objptr, ##42152
1c140     F2 26 02 FB | 	rdlong	local01, objptr
1c144     52 00 00 FF 
1c148     A8 E4 85 F1 | 	sub	objptr, ##42152
1c14c     A7 12 02 F6 | 	mov	arg01, fp
1c150     D4 16 BF FD | 	call	#_converttofloat
1c154     FD 14 02 F6 | 	mov	arg02, result1
1c158     13 13 02 F6 | 	mov	arg01, local01
1c15c     34 D6 B0 FD | 	call	#__system___float_mul
1c160     FD 12 02 F6 | 	mov	arg01, result1
1c164     D8 E0 B0 FD | 	call	#__system____builtin_tanf
1c168     A7 FA 61 FC | 	wrlong	result1, fp
1c16c     08 4E 05 F1 | 	add	fp, #8
1c170     A7 3C 68 FC | 	wrlong	#30, fp
1c174     08 4E 85 F1 | 	sub	fp, #8
1c178     A7 12 02 F6 | 	mov	arg01, fp
1c17c     A0 14 BF FD | 	call	#_push
1c180                 | LR__2211
1c180     A7 F0 03 F6 | 	mov	ptra, fp
1c184     B2 00 A0 FD | 	call	#popregs_
1c188                 | _do_tan_ret
1c188     2D 00 64 FD | 	ret
1c18c                 | 
1c18c                 | ' 
1c18c                 | ' ' ------------------ val
1c18c                 | ' 
1c18c                 | ' sub do_val
1c18c                 | _do_val
1c18c     03 4A 05 F6 | 	mov	COUNT_, #3
1c190     A8 00 A0 FD | 	call	#pushregs_
1c194     20 F0 07 F1 | 	add	ptra, #32
1c198     4A 00 00 FF 
1c19c     80 E4 05 F1 | 	add	objptr, ##38016
1c1a0     F2 16 02 FB | 	rdlong	arg03, objptr
1c1a4     0B 27 02 F6 | 	mov	local01, arg03
1c1a8     01 26 66 F0 | 	shl	local01, #1
1c1ac     0B 27 02 F1 | 	add	local01, arg03
1c1b0     02 26 66 F0 | 	shl	local01, #2
1c1b4     03 00 00 FF 
1c1b8     04 E4 85 F1 | 	sub	objptr, ##1540
1c1bc     F2 26 02 F1 | 	add	local01, objptr
1c1c0     13 17 02 FB | 	rdlong	arg03, local01
1c1c4     0C 4E 05 F1 | 	add	fp, #12
1c1c8     A7 16 62 FC | 	wrlong	arg03, fp
1c1cc                 | ' 
1c1cc                 | ' numpar=compiledline(lineptr_e).result.uresult
1c1cc                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
1c1cc     0C 4E 85 F1 | 	sub	fp, #12
1c1d0     02 16 16 F2 | 	cmp	arg03, #2 wc
1c1d4     47 00 00 FF 
1c1d8     7C E4 85 F1 | 	sub	objptr, ##36476
1c1dc     0C 4E 05 C1 |  if_b	add	fp, #12
1c1e0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1c1e4     0C 4E 85 C1 |  if_b	sub	fp, #12
1c1e8     40 00 90 4D |  if_c_and_nz	jmp	#LR__2220
1c1ec     00 12 06 F6 | 	mov	arg01, #0
1c1f0     C8 03 B1 FD | 	call	#__system___getiolock_0603
1c1f4     FD 12 02 F6 | 	mov	arg01, result1
1c1f8     1C A7 B0 FD | 	call	#__system___lockmem
1c1fc     B7 01 00 FF 
1c200     F9 15 06 F6 | 	mov	arg02, ##@LR__5974
1c204     00 12 06 F6 | 	mov	arg01, #0
1c208     00 16 06 F6 | 	mov	arg03, #0
1c20c     00 B4 B0 FD | 	call	#__system___basic_print_string
1c210     00 12 06 F6 | 	mov	arg01, #0
1c214     A4 03 B1 FD | 	call	#__system___getiolock_0603
1c218     FD 00 68 FC | 	wrlong	#0, result1
1c21c     27 12 06 F6 | 	mov	arg01, #39
1c220     00 14 06 F6 | 	mov	arg02, #0
1c224     00 6D B0 FD | 	call	#_printerror
1c228     60 02 90 FD | 	jmp	#LR__2233
1c22c                 | LR__2220
1c22c     58 13 BF FD | 	call	#_pop
1c230     FF 16 02 F6 | 	mov	arg03, result3
1c234     A7 FA 61 FC | 	wrlong	result1, fp
1c238     04 4E 05 F1 | 	add	fp, #4
1c23c     A7 FC 61 FC | 	wrlong	result2, fp
1c240     04 4E 05 F1 | 	add	fp, #4
1c244     A7 16 62 FC | 	wrlong	arg03, fp
1c248                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1c248     08 4E 85 F1 | 	sub	fp, #8
1c24c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c250     18 00 90 5D |  if_ne	jmp	#LR__2221
1c254     A7 12 02 FB | 	rdlong	arg01, fp
1c258     A4 14 BF FD | 	call	#_convertstring
1c25c     A7 FA 61 FC | 	wrlong	result1, fp
1c260     08 4E 05 F1 | 	add	fp, #8
1c264     A7 3E 68 FC | 	wrlong	#31, fp
1c268     08 4E 85 F1 | 	sub	fp, #8
1c26c                 | LR__2221
1c26c                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
1c26c     08 4E 05 F1 | 	add	fp, #8
1c270     A7 16 02 FB | 	rdlong	arg03, fp
1c274     08 4E 85 F1 | 	sub	fp, #8
1c278     1F 16 0E F2 | 	cmp	arg03, #31 wz
1c27c     40 00 90 AD |  if_e	jmp	#LR__2222
1c280     00 12 06 F6 | 	mov	arg01, #0
1c284     34 03 B1 FD | 	call	#__system___getiolock_0603
1c288     FD 12 02 F6 | 	mov	arg01, result1
1c28c     88 A6 B0 FD | 	call	#__system___lockmem
1c290     B7 01 00 FF 
1c294     FF 15 06 F6 | 	mov	arg02, ##@LR__5975
1c298     00 12 06 F6 | 	mov	arg01, #0
1c29c     00 16 06 F6 | 	mov	arg03, #0
1c2a0     6C B3 B0 FD | 	call	#__system___basic_print_string
1c2a4     00 12 06 F6 | 	mov	arg01, #0
1c2a8     10 03 B1 FD | 	call	#__system___getiolock_0603
1c2ac     FD 00 68 FC | 	wrlong	#0, result1
1c2b0     0F 12 06 F6 | 	mov	arg01, #15
1c2b4     00 14 06 F6 | 	mov	arg02, #0
1c2b8     6C 6C B0 FD | 	call	#_printerror
1c2bc     CC 01 90 FD | 	jmp	#LR__2233
1c2c0                 | LR__2222
1c2c0                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c2c0     A7 12 02 FB | 	rdlong	arg01, fp
1c2c4     01 14 06 F6 | 	mov	arg02, #1
1c2c8     CC C6 B0 FD | 	call	#__system__Left_S
1c2cc     FD 12 02 F6 | 	mov	arg01, result1
1c2d0     B8 01 00 FF 
1c2d4     05 14 06 F6 | 	mov	arg02, ##@LR__5976
1c2d8     64 A6 B0 FD | 	call	#__system___string_cmp
1c2dc     00 FA 0D F2 | 	cmp	result1, #0 wz
1c2e0     48 00 90 5D |  if_ne	jmp	#LR__2225
1c2e4     B8 01 00 FF 
1c2e8     07 26 06 F6 | 	mov	local01, ##@LR__5977
1c2ec     A7 16 02 FB | 	rdlong	arg03, fp
1c2f0     0B 13 02 F6 | 	mov	arg01, arg03
1c2f4     09 29 02 F6 | 	mov	local02, arg01
1c2f8     97 06 48 FB | 	callpa	#(@LR__2224-@LR__2223)>>2,fcache_load_ptr_
1c2fc                 | LR__2223
1c2fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c300     01 28 06 51 |  if_ne	add	local02, #1
1c304     F4 FF 9F 5D |  if_ne	jmp	#LR__2223
1c308                 | LR__2224
1c308     09 29 82 F1 | 	sub	local02, arg01
1c30c     14 15 02 F6 | 	mov	arg02, local02
1c310     01 14 86 F1 | 	sub	arg02, #1
1c314     0B 13 02 F6 | 	mov	arg01, arg03
1c318     04 C7 B0 FD | 	call	#__system__Right_S
1c31c     FD 14 02 F6 | 	mov	arg02, result1
1c320     13 13 02 F6 | 	mov	arg01, local01
1c324     4C A6 B0 FD | 	call	#__system___string_concat
1c328     A7 FA 61 FC | 	wrlong	result1, fp
1c32c                 | LR__2225
1c32c                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
1c32c     A7 12 02 FB | 	rdlong	arg01, fp
1c330     01 14 06 F6 | 	mov	arg02, #1
1c334     60 C6 B0 FD | 	call	#__system__Left_S
1c338     FD 12 02 F6 | 	mov	arg01, result1
1c33c     B8 01 00 FF 
1c340     0A 14 06 F6 | 	mov	arg02, ##@LR__5978
1c344     F8 A5 B0 FD | 	call	#__system___string_cmp
1c348     00 FA 0D F2 | 	cmp	result1, #0 wz
1c34c     48 00 90 5D |  if_ne	jmp	#LR__2228
1c350     B8 01 00 FF 
1c354     0C 26 06 F6 | 	mov	local01, ##@LR__5979
1c358     A7 16 02 FB | 	rdlong	arg03, fp
1c35c     0B 13 02 F6 | 	mov	arg01, arg03
1c360     09 29 02 F6 | 	mov	local02, arg01
1c364     97 06 48 FB | 	callpa	#(@LR__2227-@LR__2226)>>2,fcache_load_ptr_
1c368                 | LR__2226
1c368     14 FB C9 FA | 	rdbyte	result1, local02 wz
1c36c     01 28 06 51 |  if_ne	add	local02, #1
1c370     F4 FF 9F 5D |  if_ne	jmp	#LR__2226
1c374                 | LR__2227
1c374     09 29 82 F1 | 	sub	local02, arg01
1c378     14 15 02 F6 | 	mov	arg02, local02
1c37c     01 14 86 F1 | 	sub	arg02, #1
1c380     0B 13 02 F6 | 	mov	arg01, arg03
1c384     98 C6 B0 FD | 	call	#__system__Right_S
1c388     FD 14 02 F6 | 	mov	arg02, result1
1c38c     13 13 02 F6 | 	mov	arg01, local01
1c390     E0 A5 B0 FD | 	call	#__system___string_concat
1c394     A7 FA 61 FC | 	wrlong	result1, fp
1c398                 | LR__2228
1c398     A7 12 02 FB | 	rdlong	arg01, fp
1c39c     00 DC B0 FD | 	call	#__system____builtin_atof
1c3a0     1C 4E 05 F1 | 	add	fp, #28
1c3a4     A7 FA 61 FC | 	wrlong	result1, fp
1c3a8     1C 4E 85 F1 | 	sub	fp, #28
1c3ac     A7 12 02 FB | 	rdlong	arg01, fp
1c3b0     00 14 06 F6 | 	mov	arg02, #0
1c3b4     54 DA B0 FD | 	call	#__system____builtin_atoi
1c3b8     18 4E 05 F1 | 	add	fp, #24
1c3bc     A7 FA 61 FC | 	wrlong	result1, fp
1c3c0                 | ' fval=val(t1.result.sresult)
1c3c0                 | ' ival=val%(t1.result.sresult)
1c3c0                 | ' if fval=ival then
1c3c0     04 4E 05 F1 | 	add	fp, #4
1c3c4     A7 26 02 FB | 	rdlong	local01, fp
1c3c8     1C 4E 85 F1 | 	sub	fp, #28
1c3cc     FD 12 52 F6 | 	abs	arg01, result1 wc
1c3d0     1F 2A C6 C9 |  if_b	decod	local03, #31
1c3d4     00 2A 06 36 |  if_ae	mov	local03, #0
1c3d8     B4 CF B0 FD | 	call	#__system___float_fromuns
1c3dc     15 FB 61 F5 | 	xor	result1, local03
1c3e0     FD 14 02 F6 | 	mov	arg02, result1
1c3e4     13 13 02 F6 | 	mov	arg01, local01
1c3e8     01 16 06 F6 | 	mov	arg03, #1
1c3ec     D8 D7 B0 FD | 	call	#__system___float_cmp
1c3f0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c3f4     20 00 90 5D |  if_ne	jmp	#LR__2229
1c3f8     18 4E 05 F1 | 	add	fp, #24
1c3fc     A7 26 02 FB | 	rdlong	local01, fp
1c400     18 4E 85 F1 | 	sub	fp, #24
1c404     A7 26 62 FC | 	wrlong	local01, fp
1c408     08 4E 05 F1 | 	add	fp, #8
1c40c     A7 38 68 FC | 	wrlong	#28, fp
1c410     08 4E 85 F1 | 	sub	fp, #8
1c414     6C 00 90 FD | 	jmp	#LR__2232
1c418                 | LR__2229
1c418                 | '   if fval=0 andalso ival<>0 then
1c418     1C 4E 05 F1 | 	add	fp, #28
1c41c     A7 12 02 FB | 	rdlong	arg01, fp
1c420     1C 4E 85 F1 | 	sub	fp, #28
1c424     00 14 06 F6 | 	mov	arg02, #0
1c428     01 16 06 F6 | 	mov	arg03, #1
1c42c     98 D7 B0 FD | 	call	#__system___float_cmp
1c430     00 FA 0D F2 | 	cmp	result1, #0 wz
1c434     30 00 90 5D |  if_ne	jmp	#LR__2230
1c438     18 4E 05 F1 | 	add	fp, #24
1c43c     A7 26 0A FB | 	rdlong	local01, fp wz
1c440     18 4E 85 F1 | 	sub	fp, #24
1c444     20 00 90 AD |  if_e	jmp	#LR__2230
1c448     18 4E 05 F1 | 	add	fp, #24
1c44c     A7 26 02 FB | 	rdlong	local01, fp
1c450     18 4E 85 F1 | 	sub	fp, #24
1c454     A7 26 62 FC | 	wrlong	local01, fp
1c458     08 4E 05 F1 | 	add	fp, #8
1c45c     A7 38 68 FC | 	wrlong	#28, fp
1c460     08 4E 85 F1 | 	sub	fp, #8
1c464     1C 00 90 FD | 	jmp	#LR__2231
1c468                 | LR__2230
1c468     1C 4E 05 F1 | 	add	fp, #28
1c46c     A7 26 02 FB | 	rdlong	local01, fp
1c470     1C 4E 85 F1 | 	sub	fp, #28
1c474     A7 26 62 FC | 	wrlong	local01, fp
1c478     08 4E 05 F1 | 	add	fp, #8
1c47c     A7 3C 68 FC | 	wrlong	#30, fp
1c480     08 4E 85 F1 | 	sub	fp, #8
1c484                 | LR__2231
1c484                 | LR__2232
1c484     A7 12 02 F6 | 	mov	arg01, fp
1c488     94 11 BF FD | 	call	#_push
1c48c                 | LR__2233
1c48c     A7 F0 03 F6 | 	mov	ptra, fp
1c490     B2 00 A0 FD | 	call	#popregs_
1c494                 | _do_val_ret
1c494     2D 00 64 FD | 	ret
1c498                 | 
1c498                 | ' 
1c498                 | ' ' ------------------ waitclock
1c498                 | ' 
1c498                 | ' sub do_waitclock
1c498                 | _do_waitclock
1c498     52 00 00 FF 
1c49c     94 E4 05 F1 | 	add	objptr, ##42132
1c4a0     F2 00 02 FB | 	rdlong	_var01, objptr
1c4a4                 | ' c=hkcnt
1c4a4                 | ' do: loop until hkcnt<>c
1c4a4                 | LR__2240
1c4a4     F2 02 02 FB | 	rdlong	_var02, objptr
1c4a8     00 03 0A F2 | 	cmp	_var02, _var01 wz
1c4ac     F4 FF 9F AD |  if_e	jmp	#LR__2240
1c4b0     52 00 00 FF 
1c4b4     94 E4 85 F1 | 	sub	objptr, ##42132
1c4b8                 | _do_waitclock_ret
1c4b8     2D 00 64 FD | 	ret
1c4bc                 | 
1c4bc                 | ' 
1c4bc                 | ' ' ------------------ waitms
1c4bc                 | ' 
1c4bc                 | ' sub do_waitms
1c4bc                 | _do_waitms
1c4bc     01 4A 05 F6 | 	mov	COUNT_, #1
1c4c0     A8 00 A0 FD | 	call	#pushregs_
1c4c4     18 F0 07 F1 | 	add	ptra, #24
1c4c8     BC 10 BF FD | 	call	#_pop
1c4cc     A7 FA 61 FC | 	wrlong	result1, fp
1c4d0     04 4E 05 F1 | 	add	fp, #4
1c4d4     A7 FC 61 FC | 	wrlong	result2, fp
1c4d8     04 4E 05 F1 | 	add	fp, #4
1c4dc     A7 FE 61 FC | 	wrlong	result3, fp
1c4e0     08 4E 85 F1 | 	sub	fp, #8
1c4e4     A7 12 02 F6 | 	mov	arg01, fp
1c4e8     80 12 BF FD | 	call	#_converttoint
1c4ec     0C 4E 05 F1 | 	add	fp, #12
1c4f0     A7 FA 61 FC | 	wrlong	result1, fp
1c4f4                 | ' 
1c4f4                 | ' t1=pop()  
1c4f4                 | ' t=converttoint(t1)
1c4f4                 | ' if t<0 then return
1c4f4     0C 4E 85 F1 | 	sub	fp, #12
1c4f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1c4fc     E4 00 90 CD |  if_b	jmp	#LR__2256
1c500                 | ' if t < 1000 then 
1c500     0C 4E 05 F1 | 	add	fp, #12
1c504     A7 12 02 FB | 	rdlong	arg01, fp
1c508     0C 4E 85 F1 | 	sub	fp, #12
1c50c     01 00 00 FF 
1c510     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
1c514     14 00 90 3D |  if_ae	jmp	#LR__2250
1c518     0C 4E 05 F1 | 	add	fp, #12
1c51c     A7 12 02 FB | 	rdlong	arg01, fp
1c520     0C 4E 85 F1 | 	sub	fp, #12
1c524     E4 A6 B0 FD | 	call	#__system___waitms
1c528     B8 00 90 FD | 	jmp	#LR__2255
1c52c                 | LR__2250
1c52c     10 4E 05 F1 | 	add	fp, #16
1c530     A7 02 68 FC | 	wrlong	#1, fp
1c534     04 4E 85 F1 | 	sub	fp, #4
1c538     A7 12 02 FB | 	rdlong	arg01, fp
1c53c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c540     01 00 00 FF 
1c544     E8 13 16 FD | 	qdiv	arg01, ##1000
1c548                 | '   for i=1 to t/1000
1c548     0C 4E 85 F1 | 	sub	fp, #12
1c54c     18 26 62 FD | 	getqx	local01
1c550     13 27 82 F6 | 	negc	local01, local01
1c554     01 26 06 F1 | 	add	local01, #1
1c558                 | LR__2251
1c558     10 4E 05 F1 | 	add	fp, #16
1c55c     A7 12 02 FB | 	rdlong	arg01, fp
1c560     10 4E 85 F1 | 	sub	fp, #16
1c564     13 13 52 F2 | 	cmps	arg01, local01 wc
1c568     54 00 90 3D |  if_ae	jmp	#LR__2254
1c56c     01 00 00 FF 
1c570     E8 13 06 F6 | 	mov	arg01, ##1000
1c574     94 A6 B0 FD | 	call	#__system___waitms
1c578                 | '     waitms(1000)
1c578                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
1c578     E0 12 06 F6 | 	mov	arg01, #224
1c57c     A0 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c580     00 FA 0D F2 | 	cmp	result1, #0 wz
1c584     10 00 90 5D |  if_ne	jmp	#LR__2252
1c588     E4 12 06 F6 | 	mov	arg01, #228
1c58c     90 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c590     00 FA 0D F2 | 	cmp	result1, #0 wz
1c594     10 00 90 AD |  if_e	jmp	#LR__2253
1c598                 | LR__2252
1c598     06 12 06 F6 | 	mov	arg01, #6
1c59c     80 9A B0 FD | 	call	#_usbnew_spin2_keystate
1c5a0     00 FA 0D F2 | 	cmp	result1, #0 wz
1c5a4     3C 00 90 5D |  if_ne	jmp	#LR__2256
1c5a8                 | LR__2253
1c5a8     10 4E 05 F1 | 	add	fp, #16
1c5ac     A7 12 02 FB | 	rdlong	arg01, fp
1c5b0     01 12 06 F1 | 	add	arg01, #1
1c5b4     A7 12 62 FC | 	wrlong	arg01, fp
1c5b8     10 4E 85 F1 | 	sub	fp, #16
1c5bc     98 FF 9F FD | 	jmp	#LR__2251
1c5c0                 | LR__2254
1c5c0     0C 4E 05 F1 | 	add	fp, #12
1c5c4     A7 26 02 FB | 	rdlong	local01, fp
1c5c8     13 27 52 F6 | 	abs	local01, local01 wc
1c5cc     01 00 00 FF 
1c5d0     E8 27 16 FD | 	qdiv	local01, ##1000
1c5d4     0C 4E 85 F1 | 	sub	fp, #12
1c5d8     19 26 62 FD | 	getqy	local01
1c5dc     13 13 82 F6 | 	negc	arg01, local01
1c5e0     28 A6 B0 FD | 	call	#__system___waitms
1c5e4                 | LR__2255
1c5e4                 | LR__2256
1c5e4     A7 F0 03 F6 | 	mov	ptra, fp
1c5e8     B2 00 A0 FD | 	call	#popregs_
1c5ec                 | _do_waitms_ret
1c5ec     2D 00 64 FD | 	ret
1c5f0                 | 
1c5f0                 | ' 
1c5f0                 | ' ' ------------------ waitvbl
1c5f0                 | ' 
1c5f0                 | ' sub do_waitvbl
1c5f0                 | _do_waitvbl
1c5f0     01 12 06 F6 | 	mov	arg01, #1
1c5f4     2C 86 B0 FD | 	call	#_hg010b_spin2_waitvbl
1c5f8                 | _do_waitvbl_ret
1c5f8     2D 00 64 FD | 	ret
1c5fc                 | 
1c5fc                 | ' 
1c5fc                 | ' ' ------------------ wrpin
1c5fc                 | ' 
1c5fc                 | ' sub do_wrpin
1c5fc                 | _do_wrpin
1c5fc     01 4A 05 F6 | 	mov	COUNT_, #1
1c600     A8 00 A0 FD | 	call	#pushregs_
1c604     18 F0 07 F1 | 	add	ptra, #24
1c608     7C 0F BF FD | 	call	#_pop
1c60c     FD 14 02 F6 | 	mov	arg02, result1
1c610     FE 12 02 F6 | 	mov	arg01, result2
1c614     FF 26 02 F6 | 	mov	local01, result3
1c618     A7 14 62 FC | 	wrlong	arg02, fp
1c61c     04 4E 05 F1 | 	add	fp, #4
1c620     A7 12 62 FC | 	wrlong	arg01, fp
1c624     04 4E 05 F1 | 	add	fp, #4
1c628     A7 26 62 FC | 	wrlong	local01, fp
1c62c     08 4E 85 F1 | 	sub	fp, #8
1c630     54 0F BF FD | 	call	#_pop
1c634     FF 26 02 F6 | 	mov	local01, result3
1c638     0C 4E 05 F1 | 	add	fp, #12
1c63c     A7 FA 61 FC | 	wrlong	result1, fp
1c640     04 4E 05 F1 | 	add	fp, #4
1c644     A7 FC 61 FC | 	wrlong	result2, fp
1c648     04 4E 05 F1 | 	add	fp, #4
1c64c     A7 26 62 FC | 	wrlong	local01, fp
1c650     08 4E 85 F1 | 	sub	fp, #8
1c654     A7 12 02 F6 | 	mov	arg01, fp
1c658     0C 4E 85 F1 | 	sub	fp, #12
1c65c     0C 11 BF FD | 	call	#_converttoint
1c660     FD 26 02 F6 | 	mov	local01, result1
1c664     A7 12 02 F6 | 	mov	arg01, fp
1c668     00 11 BF FD | 	call	#_converttoint
1c66c     13 FB 01 FC | 	wrpin	result1, local01
1c670     A7 F0 03 F6 | 	mov	ptra, fp
1c674     B2 00 A0 FD | 	call	#popregs_
1c678                 | _do_wrpin_ret
1c678     2D 00 64 FD | 	ret
1c67c                 | 
1c67c                 | ' 
1c67c                 | ' ' ------------------ wxpin
1c67c                 | ' 
1c67c                 | ' sub do_wxpin
1c67c                 | _do_wxpin
1c67c     01 4A 05 F6 | 	mov	COUNT_, #1
1c680     A8 00 A0 FD | 	call	#pushregs_
1c684     18 F0 07 F1 | 	add	ptra, #24
1c688     FC 0E BF FD | 	call	#_pop
1c68c     FD 14 02 F6 | 	mov	arg02, result1
1c690     FE 12 02 F6 | 	mov	arg01, result2
1c694     FF 26 02 F6 | 	mov	local01, result3
1c698     A7 14 62 FC | 	wrlong	arg02, fp
1c69c     04 4E 05 F1 | 	add	fp, #4
1c6a0     A7 12 62 FC | 	wrlong	arg01, fp
1c6a4     04 4E 05 F1 | 	add	fp, #4
1c6a8     A7 26 62 FC | 	wrlong	local01, fp
1c6ac     08 4E 85 F1 | 	sub	fp, #8
1c6b0     D4 0E BF FD | 	call	#_pop
1c6b4     FF 26 02 F6 | 	mov	local01, result3
1c6b8     0C 4E 05 F1 | 	add	fp, #12
1c6bc     A7 FA 61 FC | 	wrlong	result1, fp
1c6c0     04 4E 05 F1 | 	add	fp, #4
1c6c4     A7 FC 61 FC | 	wrlong	result2, fp
1c6c8     04 4E 05 F1 | 	add	fp, #4
1c6cc     A7 26 62 FC | 	wrlong	local01, fp
1c6d0     08 4E 85 F1 | 	sub	fp, #8
1c6d4     A7 12 02 F6 | 	mov	arg01, fp
1c6d8     0C 4E 85 F1 | 	sub	fp, #12
1c6dc     8C 10 BF FD | 	call	#_converttoint
1c6e0     FD 26 02 F6 | 	mov	local01, result1
1c6e4     A7 12 02 F6 | 	mov	arg01, fp
1c6e8     80 10 BF FD | 	call	#_converttoint
1c6ec     13 FB 11 FC | 	wxpin	result1, local01
1c6f0     A7 F0 03 F6 | 	mov	ptra, fp
1c6f4     B2 00 A0 FD | 	call	#popregs_
1c6f8                 | _do_wxpin_ret
1c6f8     2D 00 64 FD | 	ret
1c6fc                 | 
1c6fc                 | ' 
1c6fc                 | ' ' ------------------ wypin
1c6fc                 | ' 
1c6fc                 | ' sub do_wypin
1c6fc                 | _do_wypin
1c6fc     01 4A 05 F6 | 	mov	COUNT_, #1
1c700     A8 00 A0 FD | 	call	#pushregs_
1c704     18 F0 07 F1 | 	add	ptra, #24
1c708     7C 0E BF FD | 	call	#_pop
1c70c     FD 14 02 F6 | 	mov	arg02, result1
1c710     FE 12 02 F6 | 	mov	arg01, result2
1c714     FF 26 02 F6 | 	mov	local01, result3
1c718     A7 14 62 FC | 	wrlong	arg02, fp
1c71c     04 4E 05 F1 | 	add	fp, #4
1c720     A7 12 62 FC | 	wrlong	arg01, fp
1c724     04 4E 05 F1 | 	add	fp, #4
1c728     A7 26 62 FC | 	wrlong	local01, fp
1c72c     08 4E 85 F1 | 	sub	fp, #8
1c730     54 0E BF FD | 	call	#_pop
1c734     FF 26 02 F6 | 	mov	local01, result3
1c738     0C 4E 05 F1 | 	add	fp, #12
1c73c     A7 FA 61 FC | 	wrlong	result1, fp
1c740     04 4E 05 F1 | 	add	fp, #4
1c744     A7 FC 61 FC | 	wrlong	result2, fp
1c748     04 4E 05 F1 | 	add	fp, #4
1c74c     A7 26 62 FC | 	wrlong	local01, fp
1c750     08 4E 85 F1 | 	sub	fp, #8
1c754     A7 12 02 F6 | 	mov	arg01, fp
1c758     0C 4E 85 F1 | 	sub	fp, #12
1c75c     0C 10 BF FD | 	call	#_converttoint
1c760     FD 26 02 F6 | 	mov	local01, result1
1c764     A7 12 02 F6 | 	mov	arg01, fp
1c768     00 10 BF FD | 	call	#_converttoint
1c76c     13 FB 21 FC | 	wypin	result1, local01
1c770     A7 F0 03 F6 | 	mov	ptra, fp
1c774     B2 00 A0 FD | 	call	#popregs_
1c778                 | _do_wypin_ret
1c778     2D 00 64 FD | 	ret
1c77c                 | 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c77c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1c77c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1c77c                 | ' 
1c77c                 | ' 
1c77c                 | ' '------------------ Assign
1c77c                 | ' 
1c77c                 | ' sub do_assign
1c77c                 | _do_assign
1c77c     05 4A 05 F6 | 	mov	COUNT_, #5
1c780     A8 00 A0 FD | 	call	#pushregs_
1c784     44 F0 07 F1 | 	add	ptra, #68
1c788     4A 00 00 FF 
1c78c     80 E4 05 F1 | 	add	objptr, ##38016
1c790     F2 16 02 FB | 	rdlong	arg03, objptr
1c794     0B 15 02 F6 | 	mov	arg02, arg03
1c798     01 14 66 F0 | 	shl	arg02, #1
1c79c     0B 15 02 F1 | 	add	arg02, arg03
1c7a0     02 14 66 F0 | 	shl	arg02, #2
1c7a4     03 00 00 FF 
1c7a8     04 E4 85 F1 | 	sub	objptr, ##1540
1c7ac     F2 14 02 F1 | 	add	arg02, objptr
1c7b0     0A 15 02 FB | 	rdlong	arg02, arg02
1c7b4     18 4E 05 F1 | 	add	fp, #24
1c7b8     A7 14 62 FC | 	wrlong	arg02, fp
1c7bc                 | ' 
1c7bc                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1c7bc                 | ' if variables(varnum).vartype<array_no_type then 
1c7bc     18 4E 85 F1 | 	sub	fp, #24
1c7c0     04 14 66 F0 | 	shl	arg02, #4
1c7c4     32 00 00 FF 
1c7c8     84 E4 85 F1 | 	sub	objptr, ##25732
1c7cc     F2 14 02 F1 | 	add	arg02, objptr
1c7d0     0C 14 06 F1 | 	add	arg02, #12
1c7d4     0A 17 02 FB | 	rdlong	arg03, arg02
1c7d8     00 17 16 F2 | 	cmp	arg03, #256 wc
1c7dc     14 00 00 FF 
1c7e0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c7e4     18 01 90 3D |  if_ae	jmp	#LR__2260
1c7e8     9C 0D BF FD | 	call	#_pop
1c7ec     A7 FA 61 FC | 	wrlong	result1, fp
1c7f0     04 4E 05 F1 | 	add	fp, #4
1c7f4     A7 FC 61 FC | 	wrlong	result2, fp
1c7f8     04 4E 05 F1 | 	add	fp, #4
1c7fc     A7 FE 61 FC | 	wrlong	result3, fp
1c800     08 4E 85 F1 | 	sub	fp, #8
1c804     A7 16 02 FB | 	rdlong	arg03, fp
1c808     04 4E 05 F1 | 	add	fp, #4
1c80c     A7 14 02 FB | 	rdlong	arg02, fp
1c810     14 4E 05 F1 | 	add	fp, #20
1c814     A7 12 02 FB | 	rdlong	arg01, fp
1c818     04 12 66 F0 | 	shl	arg01, #4
1c81c     14 00 00 FF 
1c820     F8 E5 05 F1 | 	add	objptr, ##10744
1c824     F2 12 02 F1 | 	add	arg01, objptr
1c828     04 12 06 F1 | 	add	arg01, #4
1c82c     09 17 62 FC | 	wrlong	arg03, arg01
1c830     A7 16 02 FB | 	rdlong	arg03, fp
1c834     04 16 66 F0 | 	shl	arg03, #4
1c838     F2 16 02 F1 | 	add	arg03, objptr
1c83c     08 16 06 F1 | 	add	arg03, #8
1c840     0B 15 62 FC | 	wrlong	arg02, arg03
1c844     A7 16 02 FB | 	rdlong	arg03, fp
1c848     04 16 66 F0 | 	shl	arg03, #4
1c84c     F2 16 02 F1 | 	add	arg03, objptr
1c850     10 4E 85 F1 | 	sub	fp, #16
1c854     A7 14 02 FB | 	rdlong	arg02, fp
1c858     0C 16 06 F1 | 	add	arg03, #12
1c85c     0B 15 62 FC | 	wrlong	arg02, arg03
1c860                 | '   t1=pop() 
1c860                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
1c860                 | '   if variables(varnum).vartype<>result_string2 then return
1c860     10 4E 05 F1 | 	add	fp, #16
1c864     A7 16 02 FB | 	rdlong	arg03, fp
1c868     18 4E 85 F1 | 	sub	fp, #24
1c86c     04 16 66 F0 | 	shl	arg03, #4
1c870     F2 16 02 F1 | 	add	arg03, objptr
1c874     0C 16 06 F1 | 	add	arg03, #12
1c878     0B 17 02 FB | 	rdlong	arg03, arg03
1c87c     2B 16 0E F2 | 	cmp	arg03, #43 wz
1c880     14 00 00 FF 
1c884     F8 E5 85 F1 | 	sub	objptr, ##10744
1c888     EC 04 90 5D |  if_ne	jmp	#LR__2283
1c88c     18 4E 05 F1 | 	add	fp, #24
1c890     A7 16 02 FB | 	rdlong	arg03, fp
1c894     0B 27 02 F6 | 	mov	local01, arg03
1c898     04 26 66 F0 | 	shl	local01, #4
1c89c     14 00 00 FF 
1c8a0     F8 E5 05 F1 | 	add	objptr, ##10744
1c8a4     F2 26 02 F1 | 	add	local01, objptr
1c8a8     18 4E 85 F1 | 	sub	fp, #24
1c8ac     04 16 66 F0 | 	shl	arg03, #4
1c8b0     F2 16 02 F1 | 	add	arg03, objptr
1c8b4     04 16 06 F1 | 	add	arg03, #4
1c8b8     0B 13 02 FB | 	rdlong	arg01, arg03
1c8bc     14 00 00 FF 
1c8c0     F8 E5 85 F1 | 	sub	objptr, ##10744
1c8c4     38 0E BF FD | 	call	#_convertstring
1c8c8     04 26 06 F1 | 	add	local01, #4
1c8cc     13 FB 61 FC | 	wrlong	result1, local01
1c8d0     18 4E 05 F1 | 	add	fp, #24
1c8d4     A7 26 02 FB | 	rdlong	local01, fp
1c8d8     18 4E 85 F1 | 	sub	fp, #24
1c8dc     04 26 66 F0 | 	shl	local01, #4
1c8e0     14 00 00 FF 
1c8e4     F8 E5 05 F1 | 	add	objptr, ##10744
1c8e8     F2 26 02 F1 | 	add	local01, objptr
1c8ec     0C 26 06 F1 | 	add	local01, #12
1c8f0     13 3F 68 FC | 	wrlong	#31, local01
1c8f4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
1c8f4                 | '   variables(varnum).vartype=result_string
1c8f4                 | '   return
1c8f4     14 00 00 FF 
1c8f8     F8 E5 85 F1 | 	sub	objptr, ##10744
1c8fc     78 04 90 FD | 	jmp	#LR__2283
1c900                 | LR__2260
1c900                 | ' for i=0 to 2 : arrid(i)=0 : next i
1c900     1C 4E 05 F1 | 	add	fp, #28
1c904     A7 00 68 FC | 	wrlong	#0, fp
1c908     97 16 48 FB | 	callpa	#(@LR__2262-@LR__2261)>>2,fcache_load_ptr_
1c90c                 | LR__2261
1c90c     A7 26 02 FB | 	rdlong	local01, fp
1c910     02 26 66 F0 | 	shl	local01, #2
1c914     18 4E 05 F1 | 	add	fp, #24
1c918     A7 26 02 F1 | 	add	local01, fp
1c91c     13 01 68 FC | 	wrlong	#0, local01
1c920     18 4E 85 F1 | 	sub	fp, #24
1c924     A7 26 02 FB | 	rdlong	local01, fp
1c928     01 26 06 F1 | 	add	local01, #1
1c92c     A7 26 62 FC | 	wrlong	local01, fp
1c930     03 26 16 F2 | 	cmp	local01, #3 wc
1c934     D4 FF 9F CD |  if_b	jmp	#LR__2261
1c938                 | LR__2262
1c938     4A 00 00 FF 
1c93c     80 E4 05 F1 | 	add	objptr, ##38016
1c940     F2 16 02 FB | 	rdlong	arg03, objptr
1c944     0B 27 02 F6 | 	mov	local01, arg03
1c948     01 26 66 F0 | 	shl	local01, #1
1c94c     0B 27 02 F1 | 	add	local01, arg03
1c950     02 26 66 F0 | 	shl	local01, #2
1c954     03 00 00 FF 
1c958     04 E4 85 F1 | 	sub	objptr, ##1540
1c95c     F2 26 02 F1 | 	add	local01, objptr
1c960     04 26 06 F1 | 	add	local01, #4
1c964     13 29 02 FB | 	rdlong	local02, local01
1c968     04 4E 05 F1 | 	add	fp, #4
1c96c     A7 28 62 FC | 	wrlong	local02, fp
1c970     20 4E 85 F1 | 	sub	fp, #32
1c974     47 00 00 FF 
1c978     7C E4 85 F1 | 	sub	objptr, ##36476
1c97c     08 0C BF FD | 	call	#_pop
1c980     A7 FA 61 FC | 	wrlong	result1, fp
1c984     04 4E 05 F1 | 	add	fp, #4
1c988     A7 FC 61 FC | 	wrlong	result2, fp
1c98c     04 4E 05 F1 | 	add	fp, #4
1c990     A7 FE 61 FC | 	wrlong	result3, fp
1c994                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1c994                 | ' t1=pop() ' var value
1c994                 | ' if numpar>0 then
1c994     18 4E 05 F1 | 	add	fp, #24
1c998     A7 2A 02 FB | 	rdlong	local03, fp
1c99c     20 4E 85 F1 | 	sub	fp, #32
1c9a0     01 2A 16 F2 | 	cmp	local03, #1 wc
1c9a4     78 00 90 CD |  if_b	jmp	#LR__2265
1c9a8                 | '   for i=numpar to 1 step -1
1c9a8     20 4E 05 F1 | 	add	fp, #32
1c9ac     A7 2C 0A FB | 	rdlong	local04, fp wz
1c9b0     04 4E 85 F1 | 	sub	fp, #4
1c9b4     A7 2C 62 FC | 	wrlong	local04, fp
1c9b8     1C 4E 85 F1 | 	sub	fp, #28
1c9bc     60 00 90 AD |  if_e	jmp	#LR__2264
1c9c0                 | LR__2263
1c9c0     C4 0B BF FD | 	call	#_pop
1c9c4     0C 4E 05 F1 | 	add	fp, #12
1c9c8     A7 FA 61 FC | 	wrlong	result1, fp
1c9cc     04 4E 05 F1 | 	add	fp, #4
1c9d0     A7 FC 61 FC | 	wrlong	result2, fp
1c9d4     04 4E 05 F1 | 	add	fp, #4
1c9d8     A7 FE 61 FC | 	wrlong	result3, fp
1c9dc     08 4E 05 F1 | 	add	fp, #8
1c9e0     A7 2A 02 FB | 	rdlong	local03, fp
1c9e4     01 2A 86 F1 | 	sub	local03, #1
1c9e8     02 2A 66 F0 | 	shl	local03, #2
1c9ec     18 4E 05 F1 | 	add	fp, #24
1c9f0     A7 2A 02 F1 | 	add	local03, fp
1c9f4     28 4E 85 F1 | 	sub	fp, #40
1c9f8     A7 12 02 F6 | 	mov	arg01, fp
1c9fc     0C 4E 85 F1 | 	sub	fp, #12
1ca00     68 0D BF FD | 	call	#_converttoint
1ca04     15 FB 61 FC | 	wrlong	result1, local03
1ca08     1C 4E 05 F1 | 	add	fp, #28
1ca0c     A7 2C 02 FB | 	rdlong	local04, fp
1ca10     01 2C 8E F1 | 	sub	local04, #1 wz
1ca14     A7 2C 62 FC | 	wrlong	local04, fp
1ca18     1C 4E 85 F1 | 	sub	fp, #28
1ca1c     A0 FF 9F 5D |  if_ne	jmp	#LR__2263
1ca20                 | LR__2264
1ca20                 | LR__2265
1ca20     18 4E 05 F1 | 	add	fp, #24
1ca24     A7 26 02 FB | 	rdlong	local01, fp
1ca28     04 26 66 F0 | 	shl	local01, #4
1ca2c     14 00 00 FF 
1ca30     F8 E5 05 F1 | 	add	objptr, ##10744
1ca34     F2 26 02 F1 | 	add	local01, objptr
1ca38     04 26 06 F1 | 	add	local01, #4
1ca3c     13 13 02 FB | 	rdlong	arg01, local01
1ca40     0C 4E 05 F1 | 	add	fp, #12
1ca44     A7 12 62 FC | 	wrlong	arg01, fp
1ca48     24 4E 85 F1 | 	sub	fp, #36
1ca4c     14 00 00 FF 
1ca50     F8 E5 85 F1 | 	sub	objptr, ##10744
1ca54     A0 67 B0 FD | 	call	#_pslpeek
1ca58     FD 2C 32 F9 | 	getword	local04, result1, #0
1ca5c     28 4E 05 F1 | 	add	fp, #40
1ca60     A7 2C 62 FC | 	wrlong	local04, fp
1ca64     04 4E 85 F1 | 	sub	fp, #4
1ca68     A7 12 02 FB | 	rdlong	arg01, fp
1ca6c     24 4E 85 F1 | 	sub	fp, #36
1ca70     02 12 06 F1 | 	add	arg01, #2
1ca74     28 67 B0 FD | 	call	#_pspeek
1ca78     FD FA E1 F8 | 	getbyte	result1, result1, #0
1ca7c     2C 4E 05 F1 | 	add	fp, #44
1ca80     A7 FA 61 FC | 	wrlong	result1, fp
1ca84                 | ' esize=pspeek(arrptr+2)
1ca84                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1ca84     08 4E 85 F1 | 	sub	fp, #8
1ca88     A7 12 02 FB | 	rdlong	arg01, fp
1ca8c     24 4E 85 F1 | 	sub	fp, #36
1ca90     04 12 06 F1 | 	add	arg01, #4
1ca94     60 67 B0 FD | 	call	#_pslpeek
1ca98     FD 2C 02 F6 | 	mov	local04, result1
1ca9c     34 4E 05 F1 | 	add	fp, #52
1caa0     A7 26 02 FB | 	rdlong	local01, fp
1caa4     34 4E 85 F1 | 	sub	fp, #52
1caa8     16 27 12 F2 | 	cmp	local01, local04 wc
1caac     54 00 90 3D |  if_ae	jmp	#LR__2266
1cab0     24 4E 05 F1 | 	add	fp, #36
1cab4     A7 12 02 FB | 	rdlong	arg01, fp
1cab8     24 4E 85 F1 | 	sub	fp, #36
1cabc     08 12 06 F1 | 	add	arg01, #8
1cac0     34 67 B0 FD | 	call	#_pslpeek
1cac4     FD 26 02 F6 | 	mov	local01, result1
1cac8     38 4E 05 F1 | 	add	fp, #56
1cacc     A7 2C 02 FB | 	rdlong	local04, fp
1cad0     38 4E 85 F1 | 	sub	fp, #56
1cad4     13 2D 12 F2 | 	cmp	local04, local01 wc
1cad8     28 00 90 3D |  if_ae	jmp	#LR__2266
1cadc     24 4E 05 F1 | 	add	fp, #36
1cae0     A7 12 02 FB | 	rdlong	arg01, fp
1cae4     24 4E 85 F1 | 	sub	fp, #36
1cae8     0C 12 06 F1 | 	add	arg01, #12
1caec     08 67 B0 FD | 	call	#_pslpeek
1caf0     3C 4E 05 F1 | 	add	fp, #60
1caf4     A7 2C 02 FB | 	rdlong	local04, fp
1caf8     3C 4E 85 F1 | 	sub	fp, #60
1cafc     FD 2C 12 F2 | 	cmp	local04, result1 wc
1cb00     10 00 90 CD |  if_b	jmp	#LR__2267
1cb04                 | LR__2266
1cb04     31 12 06 F6 | 	mov	arg01, #49
1cb08     00 14 06 F6 | 	mov	arg02, #0
1cb0c     18 64 B0 FD | 	call	#_printerror
1cb10     64 02 90 FD | 	jmp	#LR__2283
1cb14                 | LR__2267
1cb14     24 4E 05 F1 | 	add	fp, #36
1cb18     A7 12 02 FB | 	rdlong	arg01, fp
1cb1c     09 2D 02 F6 | 	mov	local04, arg01
1cb20     10 2C 06 F1 | 	add	local04, #16
1cb24     24 4E 85 F1 | 	sub	fp, #36
1cb28     04 12 06 F1 | 	add	arg01, #4
1cb2c     C8 66 B0 FD | 	call	#_pslpeek
1cb30     FD 26 02 F6 | 	mov	local01, result1
1cb34     38 4E 05 F1 | 	add	fp, #56
1cb38     A7 28 02 FB | 	rdlong	local02, fp
1cb3c     14 27 02 FD | 	qmul	local01, local02
1cb40     04 4E 85 F1 | 	sub	fp, #4
1cb44     A7 2A 02 FB | 	rdlong	local03, fp
1cb48     10 4E 85 F1 | 	sub	fp, #16
1cb4c     A7 12 02 FB | 	rdlong	arg01, fp
1cb50     24 4E 85 F1 | 	sub	fp, #36
1cb54     08 12 06 F1 | 	add	arg01, #8
1cb58     18 28 62 FD | 	getqx	local02
1cb5c     14 2B 02 F1 | 	add	local03, local02
1cb60     94 66 B0 FD | 	call	#_pslpeek
1cb64     FD 28 02 F6 | 	mov	local02, result1
1cb68     24 4E 05 F1 | 	add	fp, #36
1cb6c     A7 12 02 FB | 	rdlong	arg01, fp
1cb70     24 4E 85 F1 | 	sub	fp, #36
1cb74     04 12 06 F1 | 	add	arg01, #4
1cb78     7C 66 B0 FD | 	call	#_pslpeek
1cb7c     FD 28 02 FD | 	qmul	local02, result1
1cb80     3C 4E 05 F1 | 	add	fp, #60
1cb84     A7 28 02 FB | 	rdlong	local02, fp
1cb88     18 26 62 FD | 	getqx	local01
1cb8c     14 27 02 FD | 	qmul	local01, local02
1cb90     10 4E 85 F1 | 	sub	fp, #16
1cb94     A7 28 02 FB | 	rdlong	local02, fp
1cb98     18 26 62 FD | 	getqx	local01
1cb9c     13 2B 02 F1 | 	add	local03, local01
1cba0     15 29 02 FD | 	qmul	local02, local03
1cba4     04 4E 05 F1 | 	add	fp, #4
1cba8                 | ' 
1cba8                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
1cba8                 | ' select case arrtype
1cba8     18 2A 62 FD | 	getqx	local03
1cbac     15 2D 02 F1 | 	add	local04, local03
1cbb0     A7 2C 62 FC | 	wrlong	local04, fp
1cbb4     08 4E 85 F1 | 	sub	fp, #8
1cbb8     A7 2E 02 FB | 	rdlong	local05, fp
1cbbc     28 4E 85 F1 | 	sub	fp, #40
1cbc0     00 2F 86 F1 | 	sub	local05, #256
1cbc4     0C 2E 26 F3 | 	fle	local05, #12
1cbc8     30 2E 62 FD | 	jmprel	local05
1cbcc                 | LR__2268
1cbcc     30 00 90 FD | 	jmp	#LR__2269
1cbd0     58 00 90 FD | 	jmp	#LR__2270
1cbd4     6C 00 90 FD | 	jmp	#LR__2271
1cbd8     80 00 90 FD | 	jmp	#LR__2272
1cbdc     B0 00 90 FD | 	jmp	#LR__2273
1cbe0     E0 00 90 FD | 	jmp	#LR__2274
1cbe4     F4 00 90 FD | 	jmp	#LR__2275
1cbe8     08 01 90 FD | 	jmp	#LR__2276
1cbec     1C 01 90 FD | 	jmp	#LR__2277
1cbf0     30 01 90 FD | 	jmp	#LR__2278
1cbf4     44 01 90 FD | 	jmp	#LR__2279
1cbf8     58 01 90 FD | 	jmp	#LR__2280
1cbfc     6C 01 90 FD | 	jmp	#LR__2281
1cc00                 | LR__2269
1cc00     A7 12 02 F6 | 	mov	arg01, fp
1cc04     30 4E 05 F1 | 	add	fp, #48
1cc08     A7 14 02 FB | 	rdlong	arg02, fp
1cc0c     30 4E 85 F1 | 	sub	fp, #48
1cc10     0C 16 06 F6 | 	mov	arg03, #12
1cc14     0B 00 00 FF 
1cc18     CC E4 05 F1 | 	add	objptr, ##5836
1cc1c     0C 91 B0 FD | 	call	#_psram_spin2_write
1cc20     0B 00 00 FF 
1cc24     CC E4 85 F1 | 	sub	objptr, ##5836
1cc28     4C 01 90 FD | 	jmp	#LR__2282
1cc2c                 | LR__2270
1cc2c     30 4E 05 F1 | 	add	fp, #48
1cc30     A7 12 02 FB | 	rdlong	arg01, fp
1cc34     30 4E 85 F1 | 	sub	fp, #48
1cc38     A7 14 02 FB | 	rdlong	arg02, fp
1cc3c     18 65 B0 FD | 	call	#_pspoke
1cc40     34 01 90 FD | 	jmp	#LR__2282
1cc44                 | LR__2271
1cc44     30 4E 05 F1 | 	add	fp, #48
1cc48     A7 12 02 FB | 	rdlong	arg01, fp
1cc4c     30 4E 85 F1 | 	sub	fp, #48
1cc50     A7 14 02 FB | 	rdlong	arg02, fp
1cc54     00 65 B0 FD | 	call	#_pspoke
1cc58     1C 01 90 FD | 	jmp	#LR__2282
1cc5c                 | LR__2272
1cc5c     30 4E 05 F1 | 	add	fp, #48
1cc60     A7 12 02 FB | 	rdlong	arg01, fp
1cc64     30 4E 85 F1 | 	sub	fp, #48
1cc68     A7 14 02 FB | 	rdlong	arg02, fp
1cc6c     E8 64 B0 FD | 	call	#_pspoke
1cc70     30 4E 05 F1 | 	add	fp, #48
1cc74     A7 12 02 FB | 	rdlong	arg01, fp
1cc78     30 4E 85 F1 | 	sub	fp, #48
1cc7c     01 12 06 F1 | 	add	arg01, #1
1cc80     A7 14 02 FB | 	rdlong	arg02, fp
1cc84     08 14 46 F0 | 	shr	arg02, #8
1cc88     CC 64 B0 FD | 	call	#_pspoke
1cc8c     E8 00 90 FD | 	jmp	#LR__2282
1cc90                 | LR__2273
1cc90     30 4E 05 F1 | 	add	fp, #48
1cc94     A7 12 02 FB | 	rdlong	arg01, fp
1cc98     30 4E 85 F1 | 	sub	fp, #48
1cc9c     A7 14 02 FB | 	rdlong	arg02, fp
1cca0     B4 64 B0 FD | 	call	#_pspoke
1cca4     30 4E 05 F1 | 	add	fp, #48
1cca8     A7 12 02 FB | 	rdlong	arg01, fp
1ccac     30 4E 85 F1 | 	sub	fp, #48
1ccb0     01 12 06 F1 | 	add	arg01, #1
1ccb4     A7 14 02 FB | 	rdlong	arg02, fp
1ccb8     08 14 46 F0 | 	shr	arg02, #8
1ccbc     98 64 B0 FD | 	call	#_pspoke
1ccc0     B4 00 90 FD | 	jmp	#LR__2282
1ccc4                 | LR__2274
1ccc4     30 4E 05 F1 | 	add	fp, #48
1ccc8     A7 12 02 FB | 	rdlong	arg01, fp
1cccc     30 4E 85 F1 | 	sub	fp, #48
1ccd0     A7 14 02 FB | 	rdlong	arg02, fp
1ccd4     F0 63 B0 FD | 	call	#_pslpoke
1ccd8     9C 00 90 FD | 	jmp	#LR__2282
1ccdc                 | LR__2275
1ccdc     30 4E 05 F1 | 	add	fp, #48
1cce0     A7 12 02 FB | 	rdlong	arg01, fp
1cce4     30 4E 85 F1 | 	sub	fp, #48
1cce8     A7 14 02 FB | 	rdlong	arg02, fp
1ccec     D8 63 B0 FD | 	call	#_pslpoke
1ccf0     84 00 90 FD | 	jmp	#LR__2282
1ccf4                 | LR__2276
1ccf4     30 4E 05 F1 | 	add	fp, #48
1ccf8     A7 12 02 FB | 	rdlong	arg01, fp
1ccfc     30 4E 85 F1 | 	sub	fp, #48
1cd00     A7 14 02 FB | 	rdlong	arg02, fp
1cd04     C0 63 B0 FD | 	call	#_pslpoke
1cd08     6C 00 90 FD | 	jmp	#LR__2282
1cd0c                 | LR__2277
1cd0c     30 4E 05 F1 | 	add	fp, #48
1cd10     A7 12 02 FB | 	rdlong	arg01, fp
1cd14     30 4E 85 F1 | 	sub	fp, #48
1cd18     A7 14 02 FB | 	rdlong	arg02, fp
1cd1c     A8 63 B0 FD | 	call	#_pslpoke
1cd20     54 00 90 FD | 	jmp	#LR__2282
1cd24                 | LR__2278
1cd24     30 4E 05 F1 | 	add	fp, #48
1cd28     A7 12 02 FB | 	rdlong	arg01, fp
1cd2c     30 4E 85 F1 | 	sub	fp, #48
1cd30     A7 14 02 FB | 	rdlong	arg02, fp
1cd34     90 63 B0 FD | 	call	#_pslpoke
1cd38     3C 00 90 FD | 	jmp	#LR__2282
1cd3c                 | LR__2279
1cd3c     30 4E 05 F1 | 	add	fp, #48
1cd40     A7 12 02 FB | 	rdlong	arg01, fp
1cd44     30 4E 85 F1 | 	sub	fp, #48
1cd48     A7 14 02 FB | 	rdlong	arg02, fp
1cd4c     78 63 B0 FD | 	call	#_pslpoke
1cd50     24 00 90 FD | 	jmp	#LR__2282
1cd54                 | LR__2280
1cd54     30 4E 05 F1 | 	add	fp, #48
1cd58     A7 12 02 FB | 	rdlong	arg01, fp
1cd5c     30 4E 85 F1 | 	sub	fp, #48
1cd60     A7 14 02 FB | 	rdlong	arg02, fp
1cd64     60 63 B0 FD | 	call	#_pslpoke
1cd68     0C 00 90 FD | 	jmp	#LR__2282
1cd6c                 | LR__2281
1cd6c     32 12 06 F6 | 	mov	arg01, #50
1cd70     00 14 06 F6 | 	mov	arg02, #0
1cd74     B0 61 B0 FD | 	call	#_printerror
1cd78                 | LR__2282
1cd78                 | LR__2283
1cd78     A7 F0 03 F6 | 	mov	ptra, fp
1cd7c     B2 00 A0 FD | 	call	#popregs_
1cd80                 | _do_assign_ret
1cd80     2D 00 64 FD | 	ret
1cd84                 | 
1cd84                 | ' 
1cd84                 | ' 
1cd84                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
1cd84                 | ' 
1cd84                 | ' sub do_getvar
1cd84                 | _do_getvar
1cd84     04 4A 05 F6 | 	mov	COUNT_, #4
1cd88     A8 00 A0 FD | 	call	#pushregs_
1cd8c     3C F0 07 F1 | 	add	ptra, #60
1cd90                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1cd90     4A 00 00 FF 
1cd94     80 E4 05 F1 | 	add	objptr, ##38016
1cd98     F2 26 02 FB | 	rdlong	local01, objptr
1cd9c     13 17 02 F6 | 	mov	arg03, local01
1cda0     01 16 66 F0 | 	shl	arg03, #1
1cda4     13 17 02 F1 | 	add	arg03, local01
1cda8     02 16 66 F0 | 	shl	arg03, #2
1cdac     03 00 00 FF 
1cdb0     04 E4 85 F1 | 	sub	objptr, ##1540
1cdb4     F2 16 02 F1 | 	add	arg03, objptr
1cdb8     04 16 06 F1 | 	add	arg03, #4
1cdbc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
1cdc0     47 00 00 FF 
1cdc4     7C E4 85 F1 | 	sub	objptr, ##36476
1cdc8     C4 00 90 5D |  if_ne	jmp	#LR__2291
1cdcc     4A 00 00 FF 
1cdd0     80 E4 05 F1 | 	add	objptr, ##38016
1cdd4     F2 26 02 FB | 	rdlong	local01, objptr
1cdd8     13 13 02 F6 | 	mov	arg01, local01
1cddc     01 12 66 F0 | 	shl	arg01, #1
1cde0     13 13 02 F1 | 	add	arg01, local01
1cde4     02 12 66 F0 | 	shl	arg01, #2
1cde8     03 00 00 FF 
1cdec     04 E4 85 F1 | 	sub	objptr, ##1540
1cdf0     F2 12 02 F1 | 	add	arg01, objptr
1cdf4     09 27 02 FB | 	rdlong	local01, arg01
1cdf8     04 26 66 F0 | 	shl	local01, #4
1cdfc     32 00 00 FF 
1ce00     84 E4 85 F1 | 	sub	objptr, ##25732
1ce04     F2 26 02 F1 | 	add	local01, objptr
1ce08     04 26 06 F1 | 	add	local01, #4
1ce0c     13 13 02 FB | 	rdlong	arg01, local01
1ce10     04 26 06 F1 | 	add	local01, #4
1ce14     13 27 02 FB | 	rdlong	local01, local01
1ce18     A7 12 62 FC | 	wrlong	arg01, fp
1ce1c     04 4E 05 F1 | 	add	fp, #4
1ce20     A7 26 62 FC | 	wrlong	local01, fp
1ce24     35 00 00 FF 
1ce28     88 E4 05 F1 | 	add	objptr, ##27272
1ce2c     F2 26 02 FB | 	rdlong	local01, objptr
1ce30     13 13 02 F6 | 	mov	arg01, local01
1ce34     01 12 66 F0 | 	shl	arg01, #1
1ce38     13 13 02 F1 | 	add	arg01, local01
1ce3c     02 12 66 F0 | 	shl	arg01, #2
1ce40     03 00 00 FF 
1ce44     04 E4 85 F1 | 	sub	objptr, ##1540
1ce48     F2 12 02 F1 | 	add	arg01, objptr
1ce4c     09 27 02 FB | 	rdlong	local01, arg01
1ce50     04 26 66 F0 | 	shl	local01, #4
1ce54     32 00 00 FF 
1ce58     84 E4 85 F1 | 	sub	objptr, ##25732
1ce5c     F2 26 02 F1 | 	add	local01, objptr
1ce60     0C 26 06 F1 | 	add	local01, #12
1ce64     13 27 02 FB | 	rdlong	local01, local01
1ce68     04 4E 05 F1 | 	add	fp, #4
1ce6c     A7 26 62 FC | 	wrlong	local01, fp
1ce70                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1ce70                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1ce70                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1ce70     08 4E 85 F1 | 	sub	fp, #8
1ce74     00 27 16 F2 | 	cmp	local01, #256 wc
1ce78     14 00 00 FF 
1ce7c     F8 E5 85 F1 | 	sub	objptr, ##10744
1ce80     0C 00 90 3D |  if_ae	jmp	#LR__2290
1ce84     A7 12 02 F6 | 	mov	arg01, fp
1ce88     94 07 BF FD | 	call	#_push
1ce8c     A0 04 90 FD | 	jmp	#LR__2312
1ce90                 | LR__2290
1ce90                 | LR__2291
1ce90     4A 00 00 FF 
1ce94     80 E4 05 F1 | 	add	objptr, ##38016
1ce98     F2 16 02 FB | 	rdlong	arg03, objptr
1ce9c     0B 15 02 F6 | 	mov	arg02, arg03
1cea0     01 14 66 F0 | 	shl	arg02, #1
1cea4     0B 15 02 F1 | 	add	arg02, arg03
1cea8     02 14 66 F0 | 	shl	arg02, #2
1ceac     03 00 00 FF 
1ceb0     04 E4 85 F1 | 	sub	objptr, ##1540
1ceb4     F2 14 02 F1 | 	add	arg02, objptr
1ceb8     0A 17 02 FB | 	rdlong	arg03, arg02
1cebc     04 16 66 F0 | 	shl	arg03, #4
1cec0     32 00 00 FF 
1cec4     84 E4 85 F1 | 	sub	objptr, ##25732
1cec8     F2 16 02 F1 | 	add	arg03, objptr
1cecc     04 16 06 F1 | 	add	arg03, #4
1ced0     0B 13 02 FB | 	rdlong	arg01, arg03
1ced4     0C 4E 05 F1 | 	add	fp, #12
1ced8     A7 12 62 FC | 	wrlong	arg01, fp
1cedc     0C 4E 85 F1 | 	sub	fp, #12
1cee0     14 00 00 FF 
1cee4     F8 E5 85 F1 | 	sub	objptr, ##10744
1cee8     0C 63 B0 FD | 	call	#_pslpeek
1ceec     FD FA 31 F9 | 	getword	result1, result1, #0
1cef0     10 4E 05 F1 | 	add	fp, #16
1cef4     A7 FA 61 FC | 	wrlong	result1, fp
1cef8     4A 00 00 FF 
1cefc     80 E4 05 F1 | 	add	objptr, ##38016
1cf00     F2 16 02 FB | 	rdlong	arg03, objptr
1cf04     0B 15 02 F6 | 	mov	arg02, arg03
1cf08     01 14 66 F0 | 	shl	arg02, #1
1cf0c     0B 15 02 F1 | 	add	arg02, arg03
1cf10     02 14 66 F0 | 	shl	arg02, #2
1cf14     03 00 00 FF 
1cf18     04 E4 85 F1 | 	sub	objptr, ##1540
1cf1c     F2 14 02 F1 | 	add	arg02, objptr
1cf20     04 14 06 F1 | 	add	arg02, #4
1cf24     0A 17 02 FB | 	rdlong	arg03, arg02
1cf28     04 4E 05 F1 | 	add	fp, #4
1cf2c     A7 16 62 FC | 	wrlong	arg03, fp
1cf30     08 4E 85 F1 | 	sub	fp, #8
1cf34     A7 12 02 FB | 	rdlong	arg01, fp
1cf38     0C 4E 85 F1 | 	sub	fp, #12
1cf3c     02 12 06 F1 | 	add	arg01, #2
1cf40     47 00 00 FF 
1cf44     7C E4 85 F1 | 	sub	objptr, ##36476
1cf48     54 62 B0 FD | 	call	#_pspeek
1cf4c     FD FA E1 F8 | 	getbyte	result1, result1, #0
1cf50     18 4E 05 F1 | 	add	fp, #24
1cf54     A7 FA 61 FC | 	wrlong	result1, fp
1cf58     0C 4E 85 F1 | 	sub	fp, #12
1cf5c     A7 12 02 FB | 	rdlong	arg01, fp
1cf60     0C 4E 85 F1 | 	sub	fp, #12
1cf64     04 12 06 F1 | 	add	arg01, #4
1cf68     8C 62 B0 FD | 	call	#_pslpeek
1cf6c     1C 4E 05 F1 | 	add	fp, #28
1cf70     A7 FA 61 FC | 	wrlong	result1, fp
1cf74     10 4E 85 F1 | 	sub	fp, #16
1cf78     A7 12 02 FB | 	rdlong	arg01, fp
1cf7c     0C 4E 85 F1 | 	sub	fp, #12
1cf80     08 12 06 F1 | 	add	arg01, #8
1cf84     70 62 B0 FD | 	call	#_pslpeek
1cf88     20 4E 05 F1 | 	add	fp, #32
1cf8c     A7 FA 61 FC | 	wrlong	result1, fp
1cf90     14 4E 85 F1 | 	sub	fp, #20
1cf94     A7 12 02 FB | 	rdlong	arg01, fp
1cf98     0C 4E 85 F1 | 	sub	fp, #12
1cf9c     0C 12 06 F1 | 	add	arg01, #12
1cfa0     54 62 B0 FD | 	call	#_pslpeek
1cfa4     24 4E 05 F1 | 	add	fp, #36
1cfa8     A7 FA 61 FC | 	wrlong	result1, fp
1cfac                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1cfac                 | ' esize=pspeek(arrptr+2)
1cfac                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1cfac                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1cfac                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1cfac                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1cfac     10 4E 85 F1 | 	sub	fp, #16
1cfb0     A7 16 02 FB | 	rdlong	arg03, fp
1cfb4     14 4E 85 F1 | 	sub	fp, #20
1cfb8     03 16 16 F2 | 	cmp	arg03, #3 wc
1cfbc     38 00 90 CD |  if_b	jmp	#LR__2292
1cfc0     C4 05 BF FD | 	call	#_pop
1cfc4     FF 16 02 F6 | 	mov	arg03, result3
1cfc8     A7 FA 61 FC | 	wrlong	result1, fp
1cfcc     04 4E 05 F1 | 	add	fp, #4
1cfd0     A7 FC 61 FC | 	wrlong	result2, fp
1cfd4     04 4E 05 F1 | 	add	fp, #4
1cfd8     A7 16 62 FC | 	wrlong	arg03, fp
1cfdc     08 4E 85 F1 | 	sub	fp, #8
1cfe0     A7 12 02 F6 | 	mov	arg01, fp
1cfe4     84 07 BF FD | 	call	#_converttoint
1cfe8     30 4E 05 F1 | 	add	fp, #48
1cfec     A7 FA 61 FC | 	wrlong	result1, fp
1cff0     30 4E 85 F1 | 	sub	fp, #48
1cff4     0C 00 90 FD | 	jmp	#LR__2293
1cff8                 | LR__2292
1cff8     30 4E 05 F1 | 	add	fp, #48
1cffc     A7 00 68 FC | 	wrlong	#0, fp
1d000     30 4E 85 F1 | 	sub	fp, #48
1d004                 | LR__2293
1d004                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d004     14 4E 05 F1 | 	add	fp, #20
1d008     A7 16 02 FB | 	rdlong	arg03, fp
1d00c     14 4E 85 F1 | 	sub	fp, #20
1d010     02 16 16 F2 | 	cmp	arg03, #2 wc
1d014     38 00 90 CD |  if_b	jmp	#LR__2294
1d018     6C 05 BF FD | 	call	#_pop
1d01c     FF 16 02 F6 | 	mov	arg03, result3
1d020     A7 FA 61 FC | 	wrlong	result1, fp
1d024     04 4E 05 F1 | 	add	fp, #4
1d028     A7 FC 61 FC | 	wrlong	result2, fp
1d02c     04 4E 05 F1 | 	add	fp, #4
1d030     A7 16 62 FC | 	wrlong	arg03, fp
1d034     08 4E 85 F1 | 	sub	fp, #8
1d038     A7 12 02 F6 | 	mov	arg01, fp
1d03c     2C 07 BF FD | 	call	#_converttoint
1d040     2C 4E 05 F1 | 	add	fp, #44
1d044     A7 FA 61 FC | 	wrlong	result1, fp
1d048     2C 4E 85 F1 | 	sub	fp, #44
1d04c     0C 00 90 FD | 	jmp	#LR__2295
1d050                 | LR__2294
1d050     2C 4E 05 F1 | 	add	fp, #44
1d054     A7 00 68 FC | 	wrlong	#0, fp
1d058     2C 4E 85 F1 | 	sub	fp, #44
1d05c                 | LR__2295
1d05c                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d05c     14 4E 05 F1 | 	add	fp, #20
1d060     A7 16 02 FB | 	rdlong	arg03, fp
1d064     14 4E 85 F1 | 	sub	fp, #20
1d068     01 16 16 F2 | 	cmp	arg03, #1 wc
1d06c     38 00 90 CD |  if_b	jmp	#LR__2296
1d070     14 05 BF FD | 	call	#_pop
1d074     FF 16 02 F6 | 	mov	arg03, result3
1d078     A7 FA 61 FC | 	wrlong	result1, fp
1d07c     04 4E 05 F1 | 	add	fp, #4
1d080     A7 FC 61 FC | 	wrlong	result2, fp
1d084     04 4E 05 F1 | 	add	fp, #4
1d088     A7 16 62 FC | 	wrlong	arg03, fp
1d08c     08 4E 85 F1 | 	sub	fp, #8
1d090     A7 12 02 F6 | 	mov	arg01, fp
1d094     D4 06 BF FD | 	call	#_converttoint
1d098     28 4E 05 F1 | 	add	fp, #40
1d09c     A7 FA 61 FC | 	wrlong	result1, fp
1d0a0     28 4E 85 F1 | 	sub	fp, #40
1d0a4     0C 00 90 FD | 	jmp	#LR__2297
1d0a8                 | LR__2296
1d0a8     28 4E 05 F1 | 	add	fp, #40
1d0ac     A7 00 68 FC | 	wrlong	#0, fp
1d0b0     28 4E 85 F1 | 	sub	fp, #40
1d0b4                 | LR__2297
1d0b4     0C 4E 05 F1 | 	add	fp, #12
1d0b8     A7 28 02 FB | 	rdlong	local02, fp
1d0bc     1C 4E 05 F1 | 	add	fp, #28
1d0c0     A7 2A 02 FB | 	rdlong	local03, fp
1d0c4     04 4E 05 F1 | 	add	fp, #4
1d0c8     A7 FC 01 FB | 	rdlong	result2, fp
1d0cc     10 4E 85 F1 | 	sub	fp, #16
1d0d0     A7 FE 01 FB | 	rdlong	result3, fp
1d0d4     FF FC 01 FD | 	qmul	result2, result3
1d0d8     10 28 06 F1 | 	add	local02, #16
1d0dc     14 4E 05 F1 | 	add	fp, #20
1d0e0     A7 FC 01 FB | 	rdlong	result2, fp
1d0e4     18 FA 61 FD | 	getqx	result1
1d0e8     FF FC 01 FD | 	qmul	result2, result3
1d0ec     FD 2A 02 F1 | 	add	local03, result1
1d0f0     10 4E 85 F1 | 	sub	fp, #16
1d0f4     A7 FE 01 FB | 	rdlong	result3, fp
1d0f8     18 FC 61 FD | 	getqx	result2
1d0fc     FF FC 01 FD | 	qmul	result2, result3
1d100     08 4E 85 F1 | 	sub	fp, #8
1d104     A7 FE 01 FB | 	rdlong	result3, fp
1d108     18 FC 61 FD | 	getqx	result2
1d10c     FE 2A 02 F1 | 	add	local03, result2
1d110     FF 2A 02 FD | 	qmul	local03, result3
1d114     1C 4E 05 F1 | 	add	fp, #28
1d118                 | ' 
1d118                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
1d118                 | ' 
1d118                 | ' select case vartype
1d118     18 FC 61 FD | 	getqx	result2
1d11c     FE 28 02 F1 | 	add	local02, result2
1d120     A7 28 62 FC | 	wrlong	local02, fp
1d124     24 4E 85 F1 | 	sub	fp, #36
1d128     A7 2C 02 FB | 	rdlong	local04, fp
1d12c     10 4E 85 F1 | 	sub	fp, #16
1d130     00 2D 86 F1 | 	sub	local04, #256
1d134     0C 2C 26 F3 | 	fle	local04, #12
1d138     30 2C 62 FD | 	jmprel	local04
1d13c                 | LR__2298
1d13c     30 00 90 FD | 	jmp	#LR__2299
1d140     58 00 90 FD | 	jmp	#LR__2300
1d144     8C 00 90 FD | 	jmp	#LR__2301
1d148     AC 00 90 FD | 	jmp	#LR__2302
1d14c     E8 00 90 FD | 	jmp	#LR__2303
1d150     08 01 90 FD | 	jmp	#LR__2304
1d154     24 01 90 FD | 	jmp	#LR__2305
1d158     40 01 90 FD | 	jmp	#LR__2306
1d15c     50 01 90 FD | 	jmp	#LR__2307
1d160     60 01 90 FD | 	jmp	#LR__2308
1d164     7C 01 90 FD | 	jmp	#LR__2309
1d168     8C 01 90 FD | 	jmp	#LR__2310
1d16c     B8 01 90 FD | 	jmp	#LR__2311
1d170                 | LR__2299
1d170     A7 12 02 F6 | 	mov	arg01, fp
1d174     34 4E 05 F1 | 	add	fp, #52
1d178     A7 14 02 FB | 	rdlong	arg02, fp
1d17c     34 4E 85 F1 | 	sub	fp, #52
1d180     0C 16 06 F6 | 	mov	arg03, #12
1d184     0B 00 00 FF 
1d188     CC E4 05 F1 | 	add	objptr, ##5836
1d18c     00 8B B0 FD | 	call	#_psram_spin2_read1
1d190     0B 00 00 FF 
1d194     CC E4 85 F1 | 	sub	objptr, ##5836
1d198     8C 01 90 FD | 	jmp	#LR__2311
1d19c                 | LR__2300
1d19c     08 4E 05 F1 | 	add	fp, #8
1d1a0     A7 38 68 FC | 	wrlong	#28, fp
1d1a4     2C 4E 05 F1 | 	add	fp, #44
1d1a8     A7 12 02 FB | 	rdlong	arg01, fp
1d1ac     34 4E 85 F1 | 	sub	fp, #52
1d1b0     EC 5F B0 FD | 	call	#_pspeek
1d1b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d1b8     A7 FA 61 FC | 	wrlong	result1, fp
1d1bc     80 FA 15 F2 | 	cmp	result1, #128 wc
1d1c0     00 27 66 36 |  if_ae	neg	local01, #256
1d1c4     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d1c8     15 27 42 35 |  if_ae	or	local01, local03
1d1cc     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d1d0     54 01 90 FD | 	jmp	#LR__2311
1d1d4                 | LR__2301
1d1d4     08 4E 05 F1 | 	add	fp, #8
1d1d8     A7 3A 68 FC | 	wrlong	#29, fp
1d1dc     2C 4E 05 F1 | 	add	fp, #44
1d1e0     A7 12 02 FB | 	rdlong	arg01, fp
1d1e4     34 4E 85 F1 | 	sub	fp, #52
1d1e8     B4 5F B0 FD | 	call	#_pspeek
1d1ec     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d1f0     A7 FA 61 FC | 	wrlong	result1, fp
1d1f4     30 01 90 FD | 	jmp	#LR__2311
1d1f8                 | LR__2302
1d1f8     08 4E 05 F1 | 	add	fp, #8
1d1fc     A7 38 68 FC | 	wrlong	#28, fp
1d200     2C 4E 05 F1 | 	add	fp, #44
1d204     A7 12 02 FB | 	rdlong	arg01, fp
1d208     34 4E 85 F1 | 	sub	fp, #52
1d20c     E8 5F B0 FD | 	call	#_pslpeek
1d210     FD FA 31 F9 | 	getword	result1, result1, #0
1d214     A7 FA 61 FC | 	wrlong	result1, fp
1d218     40 00 00 FF 
1d21c     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1d220     FF 7F 00 3F 
1d224     00 27 06 36 |  if_ae	mov	local01, ##16776960
1d228     A7 2A 02 3B |  if_ae	rdlong	local03, fp
1d22c     15 27 42 35 |  if_ae	or	local01, local03
1d230     A7 26 62 3C |  if_ae	wrlong	local01, fp
1d234     F0 00 90 FD | 	jmp	#LR__2311
1d238                 | LR__2303
1d238     08 4E 05 F1 | 	add	fp, #8
1d23c     A7 3A 68 FC | 	wrlong	#29, fp
1d240     2C 4E 05 F1 | 	add	fp, #44
1d244     A7 12 02 FB | 	rdlong	arg01, fp
1d248     34 4E 85 F1 | 	sub	fp, #52
1d24c     A8 5F B0 FD | 	call	#_pslpeek
1d250     FD FA 31 F9 | 	getword	result1, result1, #0
1d254     A7 FA 61 FC | 	wrlong	result1, fp
1d258     CC 00 90 FD | 	jmp	#LR__2311
1d25c                 | LR__2304
1d25c     08 4E 05 F1 | 	add	fp, #8
1d260     A7 38 68 FC | 	wrlong	#28, fp
1d264     2C 4E 05 F1 | 	add	fp, #44
1d268     A7 12 02 FB | 	rdlong	arg01, fp
1d26c     34 4E 85 F1 | 	sub	fp, #52
1d270     84 5F B0 FD | 	call	#_pslpeek
1d274     A7 FA 61 FC | 	wrlong	result1, fp
1d278     AC 00 90 FD | 	jmp	#LR__2311
1d27c                 | LR__2305
1d27c     08 4E 05 F1 | 	add	fp, #8
1d280     A7 3A 68 FC | 	wrlong	#29, fp
1d284     2C 4E 05 F1 | 	add	fp, #44
1d288     A7 12 02 FB | 	rdlong	arg01, fp
1d28c     34 4E 85 F1 | 	sub	fp, #52
1d290     64 5F B0 FD | 	call	#_pslpeek
1d294     A7 FA 61 FC | 	wrlong	result1, fp
1d298     8C 00 90 FD | 	jmp	#LR__2311
1d29c                 | LR__2306
1d29c     08 4E 05 F1 | 	add	fp, #8
1d2a0     A7 FE 69 FC | 	wrlong	#255, fp
1d2a4     08 4E 85 F1 | 	sub	fp, #8
1d2a8     A7 60 68 FC | 	wrlong	#48, fp
1d2ac     78 00 90 FD | 	jmp	#LR__2311
1d2b0                 | LR__2307
1d2b0     08 4E 05 F1 | 	add	fp, #8
1d2b4     A7 FE 69 FC | 	wrlong	#255, fp
1d2b8     08 4E 85 F1 | 	sub	fp, #8
1d2bc     A7 60 68 FC | 	wrlong	#48, fp
1d2c0     64 00 90 FD | 	jmp	#LR__2311
1d2c4                 | LR__2308
1d2c4     08 4E 05 F1 | 	add	fp, #8
1d2c8     A7 3C 68 FC | 	wrlong	#30, fp
1d2cc     2C 4E 05 F1 | 	add	fp, #44
1d2d0     A7 12 02 FB | 	rdlong	arg01, fp
1d2d4     34 4E 85 F1 | 	sub	fp, #52
1d2d8     1C 5F B0 FD | 	call	#_pslpeek
1d2dc     A7 FA 61 FC | 	wrlong	result1, fp
1d2e0     44 00 90 FD | 	jmp	#LR__2311
1d2e4                 | LR__2309
1d2e4     08 4E 05 F1 | 	add	fp, #8
1d2e8     A7 FE 69 FC | 	wrlong	#255, fp
1d2ec     08 4E 85 F1 | 	sub	fp, #8
1d2f0     A7 60 68 FC | 	wrlong	#48, fp
1d2f4     30 00 90 FD | 	jmp	#LR__2311
1d2f8                 | LR__2310
1d2f8     08 4E 05 F1 | 	add	fp, #8
1d2fc     A7 3E 68 FC | 	wrlong	#31, fp
1d300     2C 4E 05 F1 | 	add	fp, #44
1d304     A7 12 02 FB | 	rdlong	arg01, fp
1d308     34 4E 85 F1 | 	sub	fp, #52
1d30c     E8 5E B0 FD | 	call	#_pslpeek
1d310     A7 FA 61 FC | 	wrlong	result1, fp
1d314     00 04 00 FF 
1d318     00 FA 15 F2 | 	cmp	result1, ##524288 wc
1d31c     08 4E 05 31 |  if_ae	add	fp, #8
1d320     A7 56 68 3C |  if_ae	wrlong	#43, fp
1d324     08 4E 85 31 |  if_ae	sub	fp, #8
1d328                 | LR__2311
1d328     A7 12 02 F6 | 	mov	arg01, fp
1d32c     F0 02 BF FD | 	call	#_push
1d330                 | LR__2312
1d330     A7 F0 03 F6 | 	mov	ptra, fp
1d334     B2 00 A0 FD | 	call	#popregs_
1d338                 | _do_getvar_ret
1d338     2D 00 64 FD | 	ret
1d33c                 | 
1d33c                 | ' 
1d33c                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
1d33c                 | ' 
1d33c                 | ' sub do_getaddr
1d33c                 | _do_getaddr
1d33c     01 4A 05 F6 | 	mov	COUNT_, #1
1d340     A8 00 A0 FD | 	call	#pushregs_
1d344     38 F0 07 F1 | 	add	ptra, #56
1d348                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
1d348                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1d348     4A 00 00 FF 
1d34c     80 E4 05 F1 | 	add	objptr, ##38016
1d350     F2 12 02 FB | 	rdlong	arg01, objptr
1d354     09 FD 01 F6 | 	mov	result2, arg01
1d358     01 FC 65 F0 | 	shl	result2, #1
1d35c     09 FD 01 F1 | 	add	result2, arg01
1d360     02 FC 65 F0 | 	shl	result2, #2
1d364     03 00 00 FF 
1d368     04 E4 85 F1 | 	sub	objptr, ##1540
1d36c     F2 FC 01 F1 | 	add	result2, objptr
1d370     04 FC 05 F1 | 	add	result2, #4
1d374     FE FC 09 FB | 	rdlong	result2, result2 wz
1d378     47 00 00 FF 
1d37c     7C E4 85 F1 | 	sub	objptr, ##36476
1d380     10 01 90 5D |  if_ne	jmp	#LR__2320
1d384     4A 00 00 FF 
1d388     80 E4 05 F1 | 	add	objptr, ##38016
1d38c     F2 12 02 FB | 	rdlong	arg01, objptr
1d390     09 FD 01 F6 | 	mov	result2, arg01
1d394     01 FC 65 F0 | 	shl	result2, #1
1d398     09 FD 01 F1 | 	add	result2, arg01
1d39c     02 FC 65 F0 | 	shl	result2, #2
1d3a0     03 00 00 FF 
1d3a4     04 E4 85 F1 | 	sub	objptr, ##1540
1d3a8     F2 FC 01 F1 | 	add	result2, objptr
1d3ac     FE 12 02 FB | 	rdlong	arg01, result2
1d3b0     04 12 66 F0 | 	shl	arg01, #4
1d3b4     32 00 00 FF 
1d3b8     84 E4 85 F1 | 	sub	objptr, ##25732
1d3bc     F2 12 02 F1 | 	add	arg01, objptr
1d3c0     0C 12 06 F1 | 	add	arg01, #12
1d3c4     09 13 02 FB | 	rdlong	arg01, arg01
1d3c8     08 4E 05 F1 | 	add	fp, #8
1d3cc     A7 12 62 FC | 	wrlong	arg01, fp
1d3d0                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1d3d0                 | '    if t1.result_type>=array_no_type then goto 2200
1d3d0     08 4E 85 F1 | 	sub	fp, #8
1d3d4     00 13 16 F2 | 	cmp	arg01, #256 wc
1d3d8     14 00 00 FF 
1d3dc     F8 E5 85 F1 | 	sub	objptr, ##10744
1d3e0     B0 00 90 3D |  if_ae	jmp	#LR__2321
1d3e4     4A 00 00 FF 
1d3e8     80 E4 05 F1 | 	add	objptr, ##38016
1d3ec     F2 12 02 FB | 	rdlong	arg01, objptr
1d3f0     09 FF 01 F6 | 	mov	result3, arg01
1d3f4     01 FE 65 F0 | 	shl	result3, #1
1d3f8     09 FF 01 F1 | 	add	result3, arg01
1d3fc     02 FE 65 F0 | 	shl	result3, #2
1d400     03 00 00 FF 
1d404     04 E4 85 F1 | 	sub	objptr, ##1540
1d408     F2 FE 01 F1 | 	add	result3, objptr
1d40c     FF FA 01 FB | 	rdlong	result1, result3
1d410     04 FA 65 F0 | 	shl	result1, #4
1d414     32 00 00 FF 
1d418     84 E4 85 F1 | 	sub	objptr, ##25732
1d41c     F2 FA 01 F1 | 	add	result1, objptr
1d420     04 FA 05 F1 | 	add	result1, #4
1d424     A7 FA 61 FC | 	wrlong	result1, fp
1d428     35 00 00 FF 
1d42c     88 E4 05 F1 | 	add	objptr, ##27272
1d430     F2 FE 01 FB | 	rdlong	result3, objptr
1d434     FF 12 02 F6 | 	mov	arg01, result3
1d438     01 12 66 F0 | 	shl	arg01, #1
1d43c     FF 12 02 F1 | 	add	arg01, result3
1d440     02 12 66 F0 | 	shl	arg01, #2
1d444     03 00 00 FF 
1d448     04 E4 85 F1 | 	sub	objptr, ##1540
1d44c     F2 12 02 F1 | 	add	arg01, objptr
1d450     09 13 02 FB | 	rdlong	arg01, arg01
1d454     04 12 66 F0 | 	shl	arg01, #4
1d458     32 00 00 FF 
1d45c     84 E4 85 F1 | 	sub	objptr, ##25732
1d460     F2 12 02 F1 | 	add	arg01, objptr
1d464     0C 12 06 F1 | 	add	arg01, #12
1d468     09 13 02 FB | 	rdlong	arg01, arg01
1d46c     04 4E 05 F1 | 	add	fp, #4
1d470     A7 12 62 FC | 	wrlong	arg01, fp
1d474     04 4E 05 F1 | 	add	fp, #4
1d478     A7 3A 68 FC | 	wrlong	#29, fp
1d47c     08 4E 85 F1 | 	sub	fp, #8
1d480     A7 12 02 F6 | 	mov	arg01, fp
1d484     14 00 00 FF 
1d488     F8 E5 85 F1 | 	sub	objptr, ##10744
1d48c     90 01 BF FD | 	call	#_push
1d490                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1d490                 | '   t1.result.twowords(1)=variables(compiledline(lineptr_e).result.uresult).vartype
1d490                 | '   t1.result_type=result_uint
1d490                 | '   push t1 : return
1d490     2C 03 90 FD | 	jmp	#LR__2330
1d494                 | LR__2320
1d494                 | LR__2321
1d494     4A 00 00 FF 
1d498     80 E4 05 F1 | 	add	objptr, ##38016
1d49c     F2 FE 01 FB | 	rdlong	result3, objptr
1d4a0     FF FC 01 F6 | 	mov	result2, result3
1d4a4     01 FC 65 F0 | 	shl	result2, #1
1d4a8     FF FC 01 F1 | 	add	result2, result3
1d4ac     02 FC 65 F0 | 	shl	result2, #2
1d4b0     03 00 00 FF 
1d4b4     04 E4 85 F1 | 	sub	objptr, ##1540
1d4b8     F2 FC 01 F1 | 	add	result2, objptr
1d4bc     FE FE 01 FB | 	rdlong	result3, result2
1d4c0     04 FE 65 F0 | 	shl	result3, #4
1d4c4     32 00 00 FF 
1d4c8     84 E4 85 F1 | 	sub	objptr, ##25732
1d4cc     F2 FE 01 F1 | 	add	result3, objptr
1d4d0     04 FE 05 F1 | 	add	result3, #4
1d4d4     FF FE 01 FB | 	rdlong	result3, result3
1d4d8     0C 4E 05 F1 | 	add	fp, #12
1d4dc     A7 FE 61 FC | 	wrlong	result3, fp
1d4e0     35 00 00 FF 
1d4e4     88 E4 05 F1 | 	add	objptr, ##27272
1d4e8     F2 FE 01 FB | 	rdlong	result3, objptr
1d4ec     FF 12 02 F6 | 	mov	arg01, result3
1d4f0     01 12 66 F0 | 	shl	arg01, #1
1d4f4     FF 12 02 F1 | 	add	arg01, result3
1d4f8     02 12 66 F0 | 	shl	arg01, #2
1d4fc     03 00 00 FF 
1d500     04 E4 85 F1 | 	sub	objptr, ##1540
1d504     F2 12 02 F1 | 	add	arg01, objptr
1d508     09 13 02 FB | 	rdlong	arg01, arg01
1d50c     04 12 66 F0 | 	shl	arg01, #4
1d510     32 00 00 FF 
1d514     84 E4 85 F1 | 	sub	objptr, ##25732
1d518     F2 12 02 F1 | 	add	arg01, objptr
1d51c     0C 12 06 F1 | 	add	arg01, #12
1d520     09 13 02 FB | 	rdlong	arg01, arg01
1d524     08 4E 85 F1 | 	sub	fp, #8
1d528     A7 12 62 FC | 	wrlong	arg01, fp
1d52c     08 4E 05 F1 | 	add	fp, #8
1d530     A7 12 02 FB | 	rdlong	arg01, fp
1d534     0C 4E 85 F1 | 	sub	fp, #12
1d538     14 00 00 FF 
1d53c     F8 E5 85 F1 | 	sub	objptr, ##10744
1d540     B4 5C B0 FD | 	call	#_pslpeek
1d544     FD FA 31 F9 | 	getword	result1, result1, #0
1d548     10 4E 05 F1 | 	add	fp, #16
1d54c     A7 FA 61 FC | 	wrlong	result1, fp
1d550     4A 00 00 FF 
1d554     80 E4 05 F1 | 	add	objptr, ##38016
1d558     F2 FE 01 FB | 	rdlong	result3, objptr
1d55c     FF 12 02 F6 | 	mov	arg01, result3
1d560     01 12 66 F0 | 	shl	arg01, #1
1d564     FF 12 02 F1 | 	add	arg01, result3
1d568     02 12 66 F0 | 	shl	arg01, #2
1d56c     03 00 00 FF 
1d570     04 E4 85 F1 | 	sub	objptr, ##1540
1d574     F2 12 02 F1 | 	add	arg01, objptr
1d578     04 12 06 F1 | 	add	arg01, #4
1d57c     09 13 02 FB | 	rdlong	arg01, arg01
1d580     04 4E 05 F1 | 	add	fp, #4
1d584     A7 12 62 FC | 	wrlong	arg01, fp
1d588     08 4E 85 F1 | 	sub	fp, #8
1d58c     A7 12 02 FB | 	rdlong	arg01, fp
1d590     0C 4E 85 F1 | 	sub	fp, #12
1d594     02 12 06 F1 | 	add	arg01, #2
1d598     47 00 00 FF 
1d59c     7C E4 85 F1 | 	sub	objptr, ##36476
1d5a0     FC 5B B0 FD | 	call	#_pspeek
1d5a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
1d5a8     18 4E 05 F1 | 	add	fp, #24
1d5ac     A7 FA 61 FC | 	wrlong	result1, fp
1d5b0     0C 4E 85 F1 | 	sub	fp, #12
1d5b4     A7 12 02 FB | 	rdlong	arg01, fp
1d5b8     0C 4E 85 F1 | 	sub	fp, #12
1d5bc     04 12 06 F1 | 	add	arg01, #4
1d5c0     34 5C B0 FD | 	call	#_pslpeek
1d5c4     1C 4E 05 F1 | 	add	fp, #28
1d5c8     A7 FA 61 FC | 	wrlong	result1, fp
1d5cc     10 4E 85 F1 | 	sub	fp, #16
1d5d0     A7 12 02 FB | 	rdlong	arg01, fp
1d5d4     0C 4E 85 F1 | 	sub	fp, #12
1d5d8     08 12 06 F1 | 	add	arg01, #8
1d5dc     18 5C B0 FD | 	call	#_pslpeek
1d5e0     20 4E 05 F1 | 	add	fp, #32
1d5e4     A7 FA 61 FC | 	wrlong	result1, fp
1d5e8     14 4E 85 F1 | 	sub	fp, #20
1d5ec     A7 12 02 FB | 	rdlong	arg01, fp
1d5f0     0C 4E 85 F1 | 	sub	fp, #12
1d5f4     0C 12 06 F1 | 	add	arg01, #12
1d5f8     FC 5B B0 FD | 	call	#_pslpeek
1d5fc     24 4E 05 F1 | 	add	fp, #36
1d600     A7 FA 61 FC | 	wrlong	result1, fp
1d604                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1d604                 | ' esize=pspeek(arrptr+2)
1d604                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1d604                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1d604                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1d604                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1d604     10 4E 85 F1 | 	sub	fp, #16
1d608     A7 12 02 FB | 	rdlong	arg01, fp
1d60c     14 4E 85 F1 | 	sub	fp, #20
1d610     03 12 16 F2 | 	cmp	arg01, #3 wc
1d614     34 00 90 CD |  if_b	jmp	#LR__2322
1d618     6C FF BE FD | 	call	#_pop
1d61c     A7 FA 61 FC | 	wrlong	result1, fp
1d620     04 4E 05 F1 | 	add	fp, #4
1d624     A7 FC 61 FC | 	wrlong	result2, fp
1d628     04 4E 05 F1 | 	add	fp, #4
1d62c     A7 FE 61 FC | 	wrlong	result3, fp
1d630     08 4E 85 F1 | 	sub	fp, #8
1d634     A7 12 02 F6 | 	mov	arg01, fp
1d638     30 01 BF FD | 	call	#_converttoint
1d63c     30 4E 05 F1 | 	add	fp, #48
1d640     A7 FA 61 FC | 	wrlong	result1, fp
1d644     30 4E 85 F1 | 	sub	fp, #48
1d648     0C 00 90 FD | 	jmp	#LR__2323
1d64c                 | LR__2322
1d64c     30 4E 05 F1 | 	add	fp, #48
1d650     A7 00 68 FC | 	wrlong	#0, fp
1d654     30 4E 85 F1 | 	sub	fp, #48
1d658                 | LR__2323
1d658                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
1d658     14 4E 05 F1 | 	add	fp, #20
1d65c     A7 12 02 FB | 	rdlong	arg01, fp
1d660     14 4E 85 F1 | 	sub	fp, #20
1d664     02 12 16 F2 | 	cmp	arg01, #2 wc
1d668     34 00 90 CD |  if_b	jmp	#LR__2324
1d66c     18 FF BE FD | 	call	#_pop
1d670     A7 FA 61 FC | 	wrlong	result1, fp
1d674     04 4E 05 F1 | 	add	fp, #4
1d678     A7 FC 61 FC | 	wrlong	result2, fp
1d67c     04 4E 05 F1 | 	add	fp, #4
1d680     A7 FE 61 FC | 	wrlong	result3, fp
1d684     08 4E 85 F1 | 	sub	fp, #8
1d688     A7 12 02 F6 | 	mov	arg01, fp
1d68c     DC 00 BF FD | 	call	#_converttoint
1d690     2C 4E 05 F1 | 	add	fp, #44
1d694     A7 FA 61 FC | 	wrlong	result1, fp
1d698     2C 4E 85 F1 | 	sub	fp, #44
1d69c     0C 00 90 FD | 	jmp	#LR__2325
1d6a0                 | LR__2324
1d6a0     2C 4E 05 F1 | 	add	fp, #44
1d6a4     A7 00 68 FC | 	wrlong	#0, fp
1d6a8     2C 4E 85 F1 | 	sub	fp, #44
1d6ac                 | LR__2325
1d6ac                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
1d6ac     14 4E 05 F1 | 	add	fp, #20
1d6b0     A7 12 02 FB | 	rdlong	arg01, fp
1d6b4     14 4E 85 F1 | 	sub	fp, #20
1d6b8     01 12 16 F2 | 	cmp	arg01, #1 wc
1d6bc     34 00 90 CD |  if_b	jmp	#LR__2326
1d6c0     C4 FE BE FD | 	call	#_pop
1d6c4     A7 FA 61 FC | 	wrlong	result1, fp
1d6c8     04 4E 05 F1 | 	add	fp, #4
1d6cc     A7 FC 61 FC | 	wrlong	result2, fp
1d6d0     04 4E 05 F1 | 	add	fp, #4
1d6d4     A7 FE 61 FC | 	wrlong	result3, fp
1d6d8     08 4E 85 F1 | 	sub	fp, #8
1d6dc     A7 12 02 F6 | 	mov	arg01, fp
1d6e0     88 00 BF FD | 	call	#_converttoint
1d6e4     28 4E 05 F1 | 	add	fp, #40
1d6e8     A7 FA 61 FC | 	wrlong	result1, fp
1d6ec     28 4E 85 F1 | 	sub	fp, #40
1d6f0     0C 00 90 FD | 	jmp	#LR__2327
1d6f4                 | LR__2326
1d6f4     28 4E 05 F1 | 	add	fp, #40
1d6f8     A7 00 68 FC | 	wrlong	#0, fp
1d6fc     28 4E 85 F1 | 	sub	fp, #40
1d700                 | LR__2327
1d700                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
1d700                 | ' if numpar>0 then
1d700     14 4E 05 F1 | 	add	fp, #20
1d704     A7 FE 01 FB | 	rdlong	result3, fp
1d708     14 4E 85 F1 | 	sub	fp, #20
1d70c     01 FE 15 F2 | 	cmp	result3, #1 wc
1d710     8C 00 90 CD |  if_b	jmp	#LR__2328
1d714     0C 4E 05 F1 | 	add	fp, #12
1d718     A7 FC 01 FB | 	rdlong	result2, fp
1d71c     1C 4E 05 F1 | 	add	fp, #28
1d720     A7 FE 01 FB | 	rdlong	result3, fp
1d724     04 4E 05 F1 | 	add	fp, #4
1d728     A7 12 02 FB | 	rdlong	arg01, fp
1d72c     10 4E 85 F1 | 	sub	fp, #16
1d730     A7 FA 01 FB | 	rdlong	result1, fp
1d734     FD 12 02 FD | 	qmul	arg01, result1
1d738     10 FC 05 F1 | 	add	result2, #16
1d73c     14 4E 05 F1 | 	add	fp, #20
1d740     A7 26 02 FB | 	rdlong	local01, fp
1d744     18 12 62 FD | 	getqx	arg01
1d748     FD 26 02 FD | 	qmul	local01, result1
1d74c     09 FF 01 F1 | 	add	result3, arg01
1d750     10 4E 85 F1 | 	sub	fp, #16
1d754     A7 26 02 FB | 	rdlong	local01, fp
1d758     18 FA 61 FD | 	getqx	result1
1d75c     13 FB 01 FD | 	qmul	result1, local01
1d760     08 4E 85 F1 | 	sub	fp, #8
1d764     A7 26 02 FB | 	rdlong	local01, fp
1d768     18 FA 61 FD | 	getqx	result1
1d76c     FD FE 01 F1 | 	add	result3, result1
1d770     13 FF 01 FD | 	qmul	result3, local01
1d774     1C 4E 05 F1 | 	add	fp, #28
1d778     18 26 62 FD | 	getqx	local01
1d77c     13 FD 01 F1 | 	add	result2, local01
1d780     A7 FC 61 FC | 	wrlong	result2, fp
1d784     2C 4E 85 F1 | 	sub	fp, #44
1d788     A7 3A 68 FC | 	wrlong	#29, fp
1d78c     2C 4E 05 F1 | 	add	fp, #44
1d790     A7 26 02 FB | 	rdlong	local01, fp
1d794     34 4E 85 F1 | 	sub	fp, #52
1d798     A7 26 62 FC | 	wrlong	local01, fp
1d79c     18 00 90 FD | 	jmp	#LR__2329
1d7a0                 | LR__2328
1d7a0     08 4E 05 F1 | 	add	fp, #8
1d7a4     A7 3A 68 FC | 	wrlong	#29, fp
1d7a8     04 4E 05 F1 | 	add	fp, #4
1d7ac     A7 26 02 FB | 	rdlong	local01, fp
1d7b0     0C 4E 85 F1 | 	sub	fp, #12
1d7b4     A7 26 62 FC | 	wrlong	local01, fp
1d7b8                 | LR__2329
1d7b8     A7 12 02 F6 | 	mov	arg01, fp
1d7bc     60 FE BE FD | 	call	#_push
1d7c0                 | LR__2330
1d7c0     A7 F0 03 F6 | 	mov	ptra, fp
1d7c4     B2 00 A0 FD | 	call	#popregs_
1d7c8                 | _do_getaddr_ret
1d7c8     2D 00 64 FD | 	ret
1d7cc                 | 
1d7cc                 | ' 
1d7cc                 | ' 
1d7cc                 | ' 
1d7cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d7cc                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
1d7cc                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1d7cc                 | ' 
1d7cc                 | ' '--------------------------------- AND 
1d7cc                 | ' 
1d7cc                 | ' sub do_and 
1d7cc                 | _do_and
1d7cc     03 4A 05 F6 | 	mov	COUNT_, #3
1d7d0     A8 00 A0 FD | 	call	#pushregs_
1d7d4     18 F0 07 F1 | 	add	ptra, #24
1d7d8     AC FD BE FD | 	call	#_pop
1d7dc     FD 12 02 F6 | 	mov	arg01, result1
1d7e0     FE 26 02 F6 | 	mov	local01, result2
1d7e4     FF 28 02 F6 | 	mov	local02, result3
1d7e8     0C 4E 05 F1 | 	add	fp, #12
1d7ec     A7 12 62 FC | 	wrlong	arg01, fp
1d7f0     04 4E 05 F1 | 	add	fp, #4
1d7f4     A7 26 62 FC | 	wrlong	local01, fp
1d7f8     04 4E 05 F1 | 	add	fp, #4
1d7fc     A7 28 62 FC | 	wrlong	local02, fp
1d800     14 4E 85 F1 | 	sub	fp, #20
1d804     80 FD BE FD | 	call	#_pop
1d808     FF 2A 02 F6 | 	mov	local03, result3
1d80c     A7 FA 61 FC | 	wrlong	result1, fp
1d810     04 4E 05 F1 | 	add	fp, #4
1d814     A7 FC 61 FC | 	wrlong	result2, fp
1d818     04 4E 05 F1 | 	add	fp, #4
1d81c     A7 2A 62 FC | 	wrlong	local03, fp
1d820                 | ' 
1d820                 | ' t2=pop()
1d820                 | ' t1=pop()
1d820                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1d820     08 4E 85 F1 | 	sub	fp, #8
1d824     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d828     A7 2A 02 AB |  if_e	rdlong	local03, fp
1d82c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1d830     08 4E 05 A1 |  if_e	add	fp, #8
1d834     A7 3A 68 AC |  if_e	wrlong	#29, fp
1d838     08 4E 85 A1 |  if_e	sub	fp, #8
1d83c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1d83c     14 4E 05 F1 | 	add	fp, #20
1d840     A7 2A 02 FB | 	rdlong	local03, fp
1d844     14 4E 85 F1 | 	sub	fp, #20
1d848     1C 2A 0E F2 | 	cmp	local03, #28 wz
1d84c     18 00 90 5D |  if_ne	jmp	#LR__2340
1d850     0C 4E 05 F1 | 	add	fp, #12
1d854     A7 2A 02 FB | 	rdlong	local03, fp
1d858     A7 2A 62 FC | 	wrlong	local03, fp
1d85c     08 4E 05 F1 | 	add	fp, #8
1d860     A7 3A 68 FC | 	wrlong	#29, fp
1d864     14 4E 85 F1 | 	sub	fp, #20
1d868                 | LR__2340
1d868                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
1d868     08 4E 05 F1 | 	add	fp, #8
1d86c     A7 2A 02 FB | 	rdlong	local03, fp
1d870     08 4E 85 F1 | 	sub	fp, #8
1d874     1F 2A 0E F2 | 	cmp	local03, #31 wz
1d878     14 4E 05 51 |  if_ne	add	fp, #20
1d87c     A7 28 02 5B |  if_ne	rdlong	local02, fp
1d880     14 4E 85 51 |  if_ne	sub	fp, #20
1d884     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1d888     08 4E 05 51 |  if_ne	add	fp, #8
1d88c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1d890     08 4E 85 51 |  if_ne	sub	fp, #8
1d894     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1d898     14 4E 05 51 |  if_ne	add	fp, #20
1d89c     14 4E 85 51 |  if_ne	sub	fp, #20
1d8a0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1d8a4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1d8a8     08 4E 05 A1 |  if_e	add	fp, #8
1d8ac     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d8b0     08 4E 85 A1 |  if_e	sub	fp, #8
1d8b4     18 00 90 AD |  if_e	jmp	#LR__2341
1d8b8     A7 2A 02 FB | 	rdlong	local03, fp
1d8bc     0C 4E 05 F1 | 	add	fp, #12
1d8c0     A7 26 02 FB | 	rdlong	local01, fp
1d8c4     0C 4E 85 F1 | 	sub	fp, #12
1d8c8     13 2B 02 F5 | 	and	local03, local01
1d8cc     A7 2A 62 FC | 	wrlong	local03, fp
1d8d0                 | LR__2341
1d8d0     A7 12 02 F6 | 	mov	arg01, fp
1d8d4     48 FD BE FD | 	call	#_push
1d8d8     A7 F0 03 F6 | 	mov	ptra, fp
1d8dc     B2 00 A0 FD | 	call	#popregs_
1d8e0                 | _do_and_ret
1d8e0     2D 00 64 FD | 	ret
1d8e4                 | 
1d8e4                 | ' 
1d8e4                 | ' '--------------------------------- DIV (integer divide)
1d8e4                 | ' 
1d8e4                 | ' sub do_div 
1d8e4                 | _do_div
1d8e4     01 4A 05 F6 | 	mov	COUNT_, #1
1d8e8     A8 00 A0 FD | 	call	#pushregs_
1d8ec     18 F0 07 F1 | 	add	ptra, #24
1d8f0     94 FC BE FD | 	call	#_pop
1d8f4     FD 92 02 F6 | 	mov	muldivb_, result1
1d8f8     FE 90 02 F6 | 	mov	muldiva_, result2
1d8fc     FF 26 02 F6 | 	mov	local01, result3
1d900     0C 4E 05 F1 | 	add	fp, #12
1d904     A7 92 62 FC | 	wrlong	muldivb_, fp
1d908     04 4E 05 F1 | 	add	fp, #4
1d90c     A7 90 62 FC | 	wrlong	muldiva_, fp
1d910     04 4E 05 F1 | 	add	fp, #4
1d914     A7 26 62 FC | 	wrlong	local01, fp
1d918     14 4E 85 F1 | 	sub	fp, #20
1d91c     68 FC BE FD | 	call	#_pop
1d920     A7 FA 61 FC | 	wrlong	result1, fp
1d924     04 4E 05 F1 | 	add	fp, #4
1d928     A7 FC 61 FC | 	wrlong	result2, fp
1d92c     04 4E 05 F1 | 	add	fp, #4
1d930     A7 FE 61 FC | 	wrlong	result3, fp
1d934                 | ' 
1d934                 | ' t2=pop()
1d934                 | ' t1=pop()
1d934                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1d934     08 4E 85 F1 | 	sub	fp, #8
1d938     1F FE 0D F2 | 	cmp	result3, #31 wz
1d93c     14 4E 05 51 |  if_ne	add	fp, #20
1d940     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1d944     14 4E 85 51 |  if_ne	sub	fp, #20
1d948     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1d94c     A7 14 68 AC |  if_e	wrlong	#10, fp
1d950     08 4E 05 A1 |  if_e	add	fp, #8
1d954     A7 FE 69 AC |  if_e	wrlong	#255, fp
1d958     08 4E 85 A1 |  if_e	sub	fp, #8
1d95c     90 01 90 AD |  if_e	jmp	#LR__2356
1d960                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1d960     08 4E 05 F1 | 	add	fp, #8
1d964     A7 92 02 FB | 	rdlong	muldivb_, fp
1d968     08 4E 85 F1 | 	sub	fp, #8
1d96c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d970     1C 00 90 5D |  if_ne	jmp	#LR__2350
1d974     08 4E 05 F1 | 	add	fp, #8
1d978     A7 38 68 FC | 	wrlong	#28, fp
1d97c     08 4E 85 F1 | 	sub	fp, #8
1d980     A7 12 02 FB | 	rdlong	arg01, fp
1d984     00 14 06 F6 | 	mov	arg02, #0
1d988     D0 C2 B0 FD | 	call	#__system___float_tointeger
1d98c     A7 FA 61 FC | 	wrlong	result1, fp
1d990                 | LR__2350
1d990                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1d990     14 4E 05 F1 | 	add	fp, #20
1d994     A7 92 02 FB | 	rdlong	muldivb_, fp
1d998     14 4E 85 F1 | 	sub	fp, #20
1d99c     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1d9a0     28 00 90 5D |  if_ne	jmp	#LR__2351
1d9a4     14 4E 05 F1 | 	add	fp, #20
1d9a8     A7 38 68 FC | 	wrlong	#28, fp
1d9ac     08 4E 85 F1 | 	sub	fp, #8
1d9b0     A7 12 02 FB | 	rdlong	arg01, fp
1d9b4     0C 4E 85 F1 | 	sub	fp, #12
1d9b8     00 14 06 F6 | 	mov	arg02, #0
1d9bc     9C C2 B0 FD | 	call	#__system___float_tointeger
1d9c0     0C 4E 05 F1 | 	add	fp, #12
1d9c4     A7 FA 61 FC | 	wrlong	result1, fp
1d9c8     0C 4E 85 F1 | 	sub	fp, #12
1d9cc                 | LR__2351
1d9cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
1d9cc     08 4E 05 F1 | 	add	fp, #8
1d9d0     A7 92 02 FB | 	rdlong	muldivb_, fp
1d9d4     08 4E 85 F1 | 	sub	fp, #8
1d9d8     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1d9dc     14 4E 05 A1 |  if_e	add	fp, #20
1d9e0     A7 26 02 AB |  if_e	rdlong	local01, fp
1d9e4     14 4E 85 A1 |  if_e	sub	fp, #20
1d9e8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1d9ec     20 00 90 5D |  if_ne	jmp	#LR__2352
1d9f0     0C 4E 05 F1 | 	add	fp, #12
1d9f4     A7 26 02 FB | 	rdlong	local01, fp
1d9f8     0C 4E 85 F1 | 	sub	fp, #12
1d9fc     A7 92 02 FB | 	rdlong	muldivb_, fp
1da00     13 93 12 FD | 	qdiv	muldivb_, local01
1da04     18 26 62 FD | 	getqx	local01
1da08     A7 26 62 FC | 	wrlong	local01, fp
1da0c     E0 00 90 FD | 	jmp	#LR__2356
1da10                 | LR__2352
1da10                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1da10     08 4E 05 F1 | 	add	fp, #8
1da14     A7 92 02 FB | 	rdlong	muldivb_, fp
1da18     08 4E 85 F1 | 	sub	fp, #8
1da1c     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1da20     14 4E 05 A1 |  if_e	add	fp, #20
1da24     A7 26 02 AB |  if_e	rdlong	local01, fp
1da28     14 4E 85 A1 |  if_e	sub	fp, #20
1da2c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1da30     2C 00 90 5D |  if_ne	jmp	#LR__2353
1da34     0C 4E 05 F1 | 	add	fp, #12
1da38     A7 26 02 FB | 	rdlong	local01, fp
1da3c     0C 4E 85 F1 | 	sub	fp, #12
1da40     A7 92 02 FB | 	rdlong	muldivb_, fp
1da44     13 93 12 FD | 	qdiv	muldivb_, local01
1da48     18 26 62 FD | 	getqx	local01
1da4c     A7 26 62 FC | 	wrlong	local01, fp
1da50     08 4E 05 F1 | 	add	fp, #8
1da54     A7 38 68 FC | 	wrlong	#28, fp
1da58     08 4E 85 F1 | 	sub	fp, #8
1da5c     90 00 90 FD | 	jmp	#LR__2356
1da60                 | LR__2353
1da60                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
1da60     08 4E 05 F1 | 	add	fp, #8
1da64     A7 92 02 FB | 	rdlong	muldivb_, fp
1da68     08 4E 85 F1 | 	sub	fp, #8
1da6c     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1da70     14 4E 05 A1 |  if_e	add	fp, #20
1da74     A7 26 02 AB |  if_e	rdlong	local01, fp
1da78     14 4E 85 A1 |  if_e	sub	fp, #20
1da7c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1da80     1C 00 90 5D |  if_ne	jmp	#LR__2354
1da84     A7 90 02 FB | 	rdlong	muldiva_, fp
1da88     0C 4E 05 F1 | 	add	fp, #12
1da8c     A7 92 02 FB | 	rdlong	muldivb_, fp
1da90     0C 4E 85 F1 | 	sub	fp, #12
1da94     BA 00 A0 FD | 	call	#divide_
1da98     A7 92 62 FC | 	wrlong	muldivb_, fp
1da9c     50 00 90 FD | 	jmp	#LR__2356
1daa0                 | LR__2354
1daa0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
1daa0     08 4E 05 F1 | 	add	fp, #8
1daa4     A7 92 02 FB | 	rdlong	muldivb_, fp
1daa8     08 4E 85 F1 | 	sub	fp, #8
1daac     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1dab0     14 4E 05 A1 |  if_e	add	fp, #20
1dab4     A7 26 02 AB |  if_e	rdlong	local01, fp
1dab8     14 4E 85 A1 |  if_e	sub	fp, #20
1dabc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1dac0     1C 00 90 5D |  if_ne	jmp	#LR__2355
1dac4     A7 90 02 FB | 	rdlong	muldiva_, fp
1dac8     0C 4E 05 F1 | 	add	fp, #12
1dacc     A7 92 02 FB | 	rdlong	muldivb_, fp
1dad0     0C 4E 85 F1 | 	sub	fp, #12
1dad4     BA 00 A0 FD | 	call	#divide_
1dad8     A7 92 62 FC | 	wrlong	muldivb_, fp
1dadc     10 00 90 FD | 	jmp	#LR__2356
1dae0                 | LR__2355
1dae0     A7 16 68 FC | 	wrlong	#11, fp
1dae4     08 4E 05 F1 | 	add	fp, #8
1dae8     A7 FE 69 FC | 	wrlong	#255, fp
1daec     08 4E 85 F1 | 	sub	fp, #8
1daf0                 | LR__2356
1daf0     A7 12 02 F6 | 	mov	arg01, fp
1daf4     28 FB BE FD | 	call	#_push
1daf8     A7 F0 03 F6 | 	mov	ptra, fp
1dafc     B2 00 A0 FD | 	call	#popregs_
1db00                 | _do_div_ret
1db00     2D 00 64 FD | 	ret
1db04                 | 
1db04                 | ' 
1db04                 | ' '--------------------------------- equal (=)
1db04                 | ' 
1db04                 | ' sub do_eq
1db04                 | _do_eq
1db04     05 4A 05 F6 | 	mov	COUNT_, #5
1db08     A8 00 A0 FD | 	call	#pushregs_
1db0c     18 F0 07 F1 | 	add	ptra, #24
1db10     74 FA BE FD | 	call	#_pop
1db14     FD 26 02 F6 | 	mov	local01, result1
1db18     FE 28 02 F6 | 	mov	local02, result2
1db1c     FF 2A 02 F6 | 	mov	local03, result3
1db20     0C 4E 05 F1 | 	add	fp, #12
1db24     A7 26 62 FC | 	wrlong	local01, fp
1db28     04 4E 05 F1 | 	add	fp, #4
1db2c     A7 28 62 FC | 	wrlong	local02, fp
1db30     04 4E 05 F1 | 	add	fp, #4
1db34     A7 2A 62 FC | 	wrlong	local03, fp
1db38     14 4E 85 F1 | 	sub	fp, #20
1db3c     48 FA BE FD | 	call	#_pop
1db40     FF 2A 02 F6 | 	mov	local03, result3
1db44     A7 FA 61 FC | 	wrlong	result1, fp
1db48     04 4E 05 F1 | 	add	fp, #4
1db4c     A7 FC 61 FC | 	wrlong	result2, fp
1db50     04 4E 05 F1 | 	add	fp, #4
1db54     A7 2A 62 FC | 	wrlong	local03, fp
1db58                 | ' 
1db58                 | ' t2=pop()
1db58                 | ' t1=pop()
1db58                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
1db58     08 4E 85 F1 | 	sub	fp, #8
1db5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1db60     14 4E 05 A1 |  if_e	add	fp, #20
1db64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1db68     14 4E 85 A1 |  if_e	sub	fp, #20
1db6c     16 2B 02 A6 |  if_e	mov	local03, local04
1db70     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1db74     28 00 90 5D |  if_ne	jmp	#LR__2360
1db78     00 26 06 F6 | 	mov	local01, #0
1db7c     A7 12 02 FB | 	rdlong	arg01, fp
1db80     0C 4E 05 F1 | 	add	fp, #12
1db84     A7 14 02 FB | 	rdlong	arg02, fp
1db88     0C 4E 85 F1 | 	sub	fp, #12
1db8c     B0 8D B0 FD | 	call	#__system___string_cmp
1db90     00 FA 0D F2 | 	cmp	result1, #0 wz
1db94     00 26 26 A6 |  if_e	not	local01, #0
1db98     A7 26 62 FC | 	wrlong	local01, fp
1db9c     20 04 90 FD | 	jmp	#LR__2373
1dba0                 | LR__2360
1dba0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
1dba0     08 4E 05 F1 | 	add	fp, #8
1dba4     A7 26 02 FB | 	rdlong	local01, fp
1dba8     08 4E 85 F1 | 	sub	fp, #8
1dbac     1E 26 0E F2 | 	cmp	local01, #30 wz
1dbb0     14 4E 05 A1 |  if_e	add	fp, #20
1dbb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dbb8     14 4E 85 A1 |  if_e	sub	fp, #20
1dbbc     16 2B 02 A6 |  if_e	mov	local03, local04
1dbc0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dbc4     2C 00 90 5D |  if_ne	jmp	#LR__2361
1dbc8     00 26 06 F6 | 	mov	local01, #0
1dbcc     A7 12 02 FB | 	rdlong	arg01, fp
1dbd0     0C 4E 05 F1 | 	add	fp, #12
1dbd4     A7 14 02 FB | 	rdlong	arg02, fp
1dbd8     0C 4E 85 F1 | 	sub	fp, #12
1dbdc     01 16 06 F6 | 	mov	arg03, #1
1dbe0     E4 BF B0 FD | 	call	#__system___float_cmp
1dbe4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dbe8     00 26 26 A6 |  if_e	not	local01, #0
1dbec     A7 26 62 FC | 	wrlong	local01, fp
1dbf0     CC 03 90 FD | 	jmp	#LR__2373
1dbf4                 | LR__2361
1dbf4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
1dbf4     08 4E 05 F1 | 	add	fp, #8
1dbf8     A7 26 02 FB | 	rdlong	local01, fp
1dbfc     08 4E 85 F1 | 	sub	fp, #8
1dc00     1E 26 0E F2 | 	cmp	local01, #30 wz
1dc04     14 4E 05 A1 |  if_e	add	fp, #20
1dc08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc0c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc10     16 2B 02 A6 |  if_e	mov	local03, local04
1dc14     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dc18     48 00 90 5D |  if_ne	jmp	#LR__2362
1dc1c     00 26 06 F6 | 	mov	local01, #0
1dc20     A7 28 02 FB | 	rdlong	local02, fp
1dc24     0C 4E 05 F1 | 	add	fp, #12
1dc28     A7 12 02 FB | 	rdlong	arg01, fp
1dc2c     0C 4E 85 F1 | 	sub	fp, #12
1dc30     09 13 52 F6 | 	abs	arg01, arg01 wc
1dc34     1F 2E C6 C9 |  if_b	decod	local05, #31
1dc38     00 2E 06 36 |  if_ae	mov	local05, #0
1dc3c     50 B7 B0 FD | 	call	#__system___float_fromuns
1dc40     17 FB 61 F5 | 	xor	result1, local05
1dc44     FD 14 02 F6 | 	mov	arg02, result1
1dc48     14 13 02 F6 | 	mov	arg01, local02
1dc4c     01 16 06 F6 | 	mov	arg03, #1
1dc50     74 BF B0 FD | 	call	#__system___float_cmp
1dc54     00 FA 0D F2 | 	cmp	result1, #0 wz
1dc58     00 26 26 A6 |  if_e	not	local01, #0
1dc5c     A7 26 62 FC | 	wrlong	local01, fp
1dc60     5C 03 90 FD | 	jmp	#LR__2373
1dc64                 | LR__2362
1dc64                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
1dc64     08 4E 05 F1 | 	add	fp, #8
1dc68     A7 26 02 FB | 	rdlong	local01, fp
1dc6c     08 4E 85 F1 | 	sub	fp, #8
1dc70     1E 26 0E F2 | 	cmp	local01, #30 wz
1dc74     14 4E 05 A1 |  if_e	add	fp, #20
1dc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1dc80     16 2B 02 A6 |  if_e	mov	local03, local04
1dc84     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dc88     38 00 90 5D |  if_ne	jmp	#LR__2363
1dc8c     00 26 06 F6 | 	mov	local01, #0
1dc90     A7 28 02 FB | 	rdlong	local02, fp
1dc94     0C 4E 05 F1 | 	add	fp, #12
1dc98     A7 12 02 FB | 	rdlong	arg01, fp
1dc9c     0C 4E 85 F1 | 	sub	fp, #12
1dca0     EC B6 B0 FD | 	call	#__system___float_fromuns
1dca4     FD 14 02 F6 | 	mov	arg02, result1
1dca8     14 13 02 F6 | 	mov	arg01, local02
1dcac     01 16 06 F6 | 	mov	arg03, #1
1dcb0     14 BF B0 FD | 	call	#__system___float_cmp
1dcb4     00 FA 0D F2 | 	cmp	result1, #0 wz
1dcb8     00 26 26 A6 |  if_e	not	local01, #0
1dcbc     A7 26 62 FC | 	wrlong	local01, fp
1dcc0     FC 02 90 FD | 	jmp	#LR__2373
1dcc4                 | LR__2363
1dcc4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
1dcc4     08 4E 05 F1 | 	add	fp, #8
1dcc8     A7 26 02 FB | 	rdlong	local01, fp
1dccc     08 4E 85 F1 | 	sub	fp, #8
1dcd0     1C 26 0E F2 | 	cmp	local01, #28 wz
1dcd4     14 4E 05 A1 |  if_e	add	fp, #20
1dcd8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dcdc     14 4E 85 A1 |  if_e	sub	fp, #20
1dce0     16 2B 02 A6 |  if_e	mov	local03, local04
1dce4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1dce8     44 00 90 5D |  if_ne	jmp	#LR__2364
1dcec     00 26 06 F6 | 	mov	local01, #0
1dcf0     A7 12 02 FB | 	rdlong	arg01, fp
1dcf4     09 13 52 F6 | 	abs	arg01, arg01 wc
1dcf8     1F 2E C6 C9 |  if_b	decod	local05, #31
1dcfc     00 2E 06 36 |  if_ae	mov	local05, #0
1dd00     8C B6 B0 FD | 	call	#__system___float_fromuns
1dd04     17 FB 61 F5 | 	xor	result1, local05
1dd08     FD 12 02 F6 | 	mov	arg01, result1
1dd0c     0C 4E 05 F1 | 	add	fp, #12
1dd10     A7 14 02 FB | 	rdlong	arg02, fp
1dd14     0C 4E 85 F1 | 	sub	fp, #12
1dd18     01 16 06 F6 | 	mov	arg03, #1
1dd1c     A8 BE B0 FD | 	call	#__system___float_cmp
1dd20     00 FA 0D F2 | 	cmp	result1, #0 wz
1dd24     00 26 26 A6 |  if_e	not	local01, #0
1dd28     A7 26 62 FC | 	wrlong	local01, fp
1dd2c     90 02 90 FD | 	jmp	#LR__2373
1dd30                 | LR__2364
1dd30                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1dd30     08 4E 05 F1 | 	add	fp, #8
1dd34     A7 26 02 FB | 	rdlong	local01, fp
1dd38     08 4E 85 F1 | 	sub	fp, #8
1dd3c     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd40     14 4E 05 A1 |  if_e	add	fp, #20
1dd44     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd48     14 4E 85 A1 |  if_e	sub	fp, #20
1dd4c     16 2B 02 A6 |  if_e	mov	local03, local04
1dd50     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1dd54     24 00 90 5D |  if_ne	jmp	#LR__2365
1dd58     00 26 06 F6 | 	mov	local01, #0
1dd5c     A7 28 02 FB | 	rdlong	local02, fp
1dd60     0C 4E 05 F1 | 	add	fp, #12
1dd64     A7 2A 02 FB | 	rdlong	local03, fp
1dd68     0C 4E 85 F1 | 	sub	fp, #12
1dd6c     15 29 0A F2 | 	cmp	local02, local03 wz
1dd70     01 26 66 A6 |  if_e	neg	local01, #1
1dd74     A7 26 62 FC | 	wrlong	local01, fp
1dd78     44 02 90 FD | 	jmp	#LR__2373
1dd7c                 | LR__2365
1dd7c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
1dd7c     08 4E 05 F1 | 	add	fp, #8
1dd80     A7 26 02 FB | 	rdlong	local01, fp
1dd84     08 4E 85 F1 | 	sub	fp, #8
1dd88     1C 26 0E F2 | 	cmp	local01, #28 wz
1dd8c     14 4E 05 A1 |  if_e	add	fp, #20
1dd90     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dd94     14 4E 85 A1 |  if_e	sub	fp, #20
1dd98     16 2B 02 A6 |  if_e	mov	local03, local04
1dd9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1dda0     24 00 90 5D |  if_ne	jmp	#LR__2366
1dda4     00 26 06 F6 | 	mov	local01, #0
1dda8     A7 28 02 FB | 	rdlong	local02, fp
1ddac     0C 4E 05 F1 | 	add	fp, #12
1ddb0     A7 2A 02 FB | 	rdlong	local03, fp
1ddb4     0C 4E 85 F1 | 	sub	fp, #12
1ddb8     15 29 0A F2 | 	cmp	local02, local03 wz
1ddbc     01 26 66 A6 |  if_e	neg	local01, #1
1ddc0     A7 26 62 FC | 	wrlong	local01, fp
1ddc4     F8 01 90 FD | 	jmp	#LR__2373
1ddc8                 | LR__2366
1ddc8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
1ddc8     08 4E 05 F1 | 	add	fp, #8
1ddcc     A7 26 02 FB | 	rdlong	local01, fp
1ddd0     08 4E 85 F1 | 	sub	fp, #8
1ddd4     1D 26 0E F2 | 	cmp	local01, #29 wz
1ddd8     14 4E 05 A1 |  if_e	add	fp, #20
1dddc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1dde0     14 4E 85 A1 |  if_e	sub	fp, #20
1dde4     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1dde8     34 00 90 5D |  if_ne	jmp	#LR__2367
1ddec     00 26 06 F6 | 	mov	local01, #0
1ddf0     A7 12 02 FB | 	rdlong	arg01, fp
1ddf4     98 B5 B0 FD | 	call	#__system___float_fromuns
1ddf8     FD 12 02 F6 | 	mov	arg01, result1
1ddfc     0C 4E 05 F1 | 	add	fp, #12
1de00     A7 14 02 FB | 	rdlong	arg02, fp
1de04     0C 4E 85 F1 | 	sub	fp, #12
1de08     01 16 06 F6 | 	mov	arg03, #1
1de0c     B8 BD B0 FD | 	call	#__system___float_cmp
1de10     00 FA 0D F2 | 	cmp	result1, #0 wz
1de14     00 26 26 A6 |  if_e	not	local01, #0
1de18     A7 26 62 FC | 	wrlong	local01, fp
1de1c     A0 01 90 FD | 	jmp	#LR__2373
1de20                 | LR__2367
1de20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
1de20     08 4E 05 F1 | 	add	fp, #8
1de24     A7 26 02 FB | 	rdlong	local01, fp
1de28     08 4E 85 F1 | 	sub	fp, #8
1de2c     1D 26 0E F2 | 	cmp	local01, #29 wz
1de30     14 4E 05 A1 |  if_e	add	fp, #20
1de34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de38     14 4E 85 A1 |  if_e	sub	fp, #20
1de3c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1de40     24 00 90 5D |  if_ne	jmp	#LR__2368
1de44     00 26 06 F6 | 	mov	local01, #0
1de48     A7 28 02 FB | 	rdlong	local02, fp
1de4c     0C 4E 05 F1 | 	add	fp, #12
1de50     A7 2A 02 FB | 	rdlong	local03, fp
1de54     0C 4E 85 F1 | 	sub	fp, #12
1de58     15 29 0A F2 | 	cmp	local02, local03 wz
1de5c     01 26 66 A6 |  if_e	neg	local01, #1
1de60     A7 26 62 FC | 	wrlong	local01, fp
1de64     58 01 90 FD | 	jmp	#LR__2373
1de68                 | LR__2368
1de68                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
1de68     08 4E 05 F1 | 	add	fp, #8
1de6c     A7 26 02 FB | 	rdlong	local01, fp
1de70     08 4E 85 F1 | 	sub	fp, #8
1de74     1D 26 0E F2 | 	cmp	local01, #29 wz
1de78     14 4E 05 A1 |  if_e	add	fp, #20
1de7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1de80     14 4E 85 A1 |  if_e	sub	fp, #20
1de84     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1de88     24 00 90 5D |  if_ne	jmp	#LR__2369
1de8c     00 26 06 F6 | 	mov	local01, #0
1de90     A7 28 02 FB | 	rdlong	local02, fp
1de94     0C 4E 05 F1 | 	add	fp, #12
1de98     A7 2A 02 FB | 	rdlong	local03, fp
1de9c     0C 4E 85 F1 | 	sub	fp, #12
1dea0     15 29 0A F2 | 	cmp	local02, local03 wz
1dea4     01 26 66 A6 |  if_e	neg	local01, #1
1dea8     A7 26 62 FC | 	wrlong	local01, fp
1deac     10 01 90 FD | 	jmp	#LR__2373
1deb0                 | LR__2369
1deb0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
1deb0     08 4E 05 F1 | 	add	fp, #8
1deb4     A7 26 02 FB | 	rdlong	local01, fp
1deb8     08 4E 85 F1 | 	sub	fp, #8
1debc     2B 26 0E F2 | 	cmp	local01, #43 wz
1dec0     14 4E 05 A1 |  if_e	add	fp, #20
1dec4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1dec8     14 4E 85 A1 |  if_e	sub	fp, #20
1decc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ded0     30 00 90 5D |  if_ne	jmp	#LR__2370
1ded4     00 26 06 F6 | 	mov	local01, #0
1ded8     A7 12 02 FB | 	rdlong	arg01, fp
1dedc     20 F8 BE FD | 	call	#_convertstring
1dee0     FD 12 02 F6 | 	mov	arg01, result1
1dee4     0C 4E 05 F1 | 	add	fp, #12
1dee8     A7 14 02 FB | 	rdlong	arg02, fp
1deec     0C 4E 85 F1 | 	sub	fp, #12
1def0     4C 8A B0 FD | 	call	#__system___string_cmp
1def4     00 FA 0D F2 | 	cmp	result1, #0 wz
1def8     00 26 26 A6 |  if_e	not	local01, #0
1defc     A7 26 62 FC | 	wrlong	local01, fp
1df00     BC 00 90 FD | 	jmp	#LR__2373
1df04                 | LR__2370
1df04                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1df04     08 4E 05 F1 | 	add	fp, #8
1df08     A7 26 02 FB | 	rdlong	local01, fp
1df0c     08 4E 85 F1 | 	sub	fp, #8
1df10     1F 26 0E F2 | 	cmp	local01, #31 wz
1df14     14 4E 05 A1 |  if_e	add	fp, #20
1df18     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df1c     14 4E 85 A1 |  if_e	sub	fp, #20
1df20     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df24     34 00 90 5D |  if_ne	jmp	#LR__2371
1df28     00 26 06 F6 | 	mov	local01, #0
1df2c     A7 28 02 FB | 	rdlong	local02, fp
1df30     0C 4E 05 F1 | 	add	fp, #12
1df34     A7 12 02 FB | 	rdlong	arg01, fp
1df38     0C 4E 85 F1 | 	sub	fp, #12
1df3c     C0 F7 BE FD | 	call	#_convertstring
1df40     FD 14 02 F6 | 	mov	arg02, result1
1df44     14 13 02 F6 | 	mov	arg01, local02
1df48     F4 89 B0 FD | 	call	#__system___string_cmp
1df4c     00 FA 0D F2 | 	cmp	result1, #0 wz
1df50     00 26 26 A6 |  if_e	not	local01, #0
1df54     A7 26 62 FC | 	wrlong	local01, fp
1df58     64 00 90 FD | 	jmp	#LR__2373
1df5c                 | LR__2371
1df5c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
1df5c     08 4E 05 F1 | 	add	fp, #8
1df60     A7 26 02 FB | 	rdlong	local01, fp
1df64     08 4E 85 F1 | 	sub	fp, #8
1df68     2B 26 0E F2 | 	cmp	local01, #43 wz
1df6c     14 4E 05 A1 |  if_e	add	fp, #20
1df70     A7 2A 02 AB |  if_e	rdlong	local03, fp
1df74     14 4E 85 A1 |  if_e	sub	fp, #20
1df78     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1df7c     3C 00 90 5D |  if_ne	jmp	#LR__2372
1df80     00 26 06 F6 | 	mov	local01, #0
1df84     A7 12 02 FB | 	rdlong	arg01, fp
1df88     74 F7 BE FD | 	call	#_convertstring
1df8c     FD 28 02 F6 | 	mov	local02, result1
1df90     0C 4E 05 F1 | 	add	fp, #12
1df94     A7 12 02 FB | 	rdlong	arg01, fp
1df98     0C 4E 85 F1 | 	sub	fp, #12
1df9c     60 F7 BE FD | 	call	#_convertstring
1dfa0     FD 14 02 F6 | 	mov	arg02, result1
1dfa4     14 13 02 F6 | 	mov	arg01, local02
1dfa8     94 89 B0 FD | 	call	#__system___string_cmp
1dfac     00 FA 0D F2 | 	cmp	result1, #0 wz
1dfb0     00 26 26 A6 |  if_e	not	local01, #0
1dfb4     A7 26 62 FC | 	wrlong	local01, fp
1dfb8     04 00 90 FD | 	jmp	#LR__2373
1dfbc                 | LR__2372
1dfbc     A7 00 68 FC | 	wrlong	#0, fp
1dfc0                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1dfc0                 | LR__2373
1dfc0     08 4E 05 F1 | 	add	fp, #8
1dfc4     A7 38 68 FC | 	wrlong	#28, fp
1dfc8     08 4E 85 F1 | 	sub	fp, #8
1dfcc     A7 12 02 F6 | 	mov	arg01, fp
1dfd0     4C F6 BE FD | 	call	#_push
1dfd4     A7 F0 03 F6 | 	mov	ptra, fp
1dfd8     B2 00 A0 FD | 	call	#popregs_
1dfdc                 | _do_eq_ret
1dfdc     2D 00 64 FD | 	ret
1dfe0                 | 
1dfe0                 | ' 
1dfe0                 | ' '--------------------------------- fdiv (/) - float divide
1dfe0                 | ' 
1dfe0                 | ' sub do_fdiv 
1dfe0                 | _do_fdiv
1dfe0     02 4A 05 F6 | 	mov	COUNT_, #2
1dfe4     A8 00 A0 FD | 	call	#pushregs_
1dfe8     18 F0 07 F1 | 	add	ptra, #24
1dfec     98 F5 BE FD | 	call	#_pop
1dff0     FD 14 02 F6 | 	mov	arg02, result1
1dff4     FE 12 02 F6 | 	mov	arg01, result2
1dff8     FF 26 02 F6 | 	mov	local01, result3
1dffc     0C 4E 05 F1 | 	add	fp, #12
1e000     A7 14 62 FC | 	wrlong	arg02, fp
1e004     04 4E 05 F1 | 	add	fp, #4
1e008     A7 12 62 FC | 	wrlong	arg01, fp
1e00c     04 4E 05 F1 | 	add	fp, #4
1e010     A7 26 62 FC | 	wrlong	local01, fp
1e014     14 4E 85 F1 | 	sub	fp, #20
1e018     6C F5 BE FD | 	call	#_pop
1e01c     A7 FA 61 FC | 	wrlong	result1, fp
1e020     04 4E 05 F1 | 	add	fp, #4
1e024     A7 FC 61 FC | 	wrlong	result2, fp
1e028     04 4E 05 F1 | 	add	fp, #4
1e02c     A7 FE 61 FC | 	wrlong	result3, fp
1e030                 | ' 
1e030                 | ' t2=pop()
1e030                 | ' t1=pop()
1e030                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
1e030     08 4E 85 F1 | 	sub	fp, #8
1e034     1F FE 0D F2 | 	cmp	result3, #31 wz
1e038     14 4E 05 51 |  if_ne	add	fp, #20
1e03c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1e040     14 4E 85 51 |  if_ne	sub	fp, #20
1e044     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1e048     A7 14 68 AC |  if_e	wrlong	#10, fp
1e04c     08 4E 05 A1 |  if_e	add	fp, #8
1e050     A7 FE 69 AC |  if_e	wrlong	#255, fp
1e054     08 4E 85 A1 |  if_e	sub	fp, #8
1e058     38 01 90 AD |  if_e	jmp	#LR__2385
1e05c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1e05c     08 4E 05 F1 | 	add	fp, #8
1e060     A7 14 02 FB | 	rdlong	arg02, fp
1e064     08 4E 85 F1 | 	sub	fp, #8
1e068     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e06c     28 00 90 5D |  if_ne	jmp	#LR__2380
1e070     08 4E 05 F1 | 	add	fp, #8
1e074     A7 3C 68 FC | 	wrlong	#30, fp
1e078     08 4E 85 F1 | 	sub	fp, #8
1e07c     A7 12 02 FB | 	rdlong	arg01, fp
1e080     09 13 52 F6 | 	abs	arg01, arg01 wc
1e084     1F 28 C6 C9 |  if_b	decod	local02, #31
1e088     00 28 06 36 |  if_ae	mov	local02, #0
1e08c     00 B3 B0 FD | 	call	#__system___float_fromuns
1e090     14 FB 61 F5 | 	xor	result1, local02
1e094     A7 FA 61 FC | 	wrlong	result1, fp
1e098                 | LR__2380
1e098                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
1e098     08 4E 05 F1 | 	add	fp, #8
1e09c     A7 14 02 FB | 	rdlong	arg02, fp
1e0a0     08 4E 85 F1 | 	sub	fp, #8
1e0a4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e0a8     18 00 90 5D |  if_ne	jmp	#LR__2381
1e0ac     08 4E 05 F1 | 	add	fp, #8
1e0b0     A7 3C 68 FC | 	wrlong	#30, fp
1e0b4     08 4E 85 F1 | 	sub	fp, #8
1e0b8     A7 12 02 FB | 	rdlong	arg01, fp
1e0bc     D0 B2 B0 FD | 	call	#__system___float_fromuns
1e0c0     A7 FA 61 FC | 	wrlong	result1, fp
1e0c4                 | LR__2381
1e0c4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1e0c4     14 4E 05 F1 | 	add	fp, #20
1e0c8     A7 14 02 FB | 	rdlong	arg02, fp
1e0cc     14 4E 85 F1 | 	sub	fp, #20
1e0d0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1e0d4     34 00 90 5D |  if_ne	jmp	#LR__2382
1e0d8     14 4E 05 F1 | 	add	fp, #20
1e0dc     A7 3C 68 FC | 	wrlong	#30, fp
1e0e0     08 4E 85 F1 | 	sub	fp, #8
1e0e4     A7 12 02 FB | 	rdlong	arg01, fp
1e0e8     0C 4E 85 F1 | 	sub	fp, #12
1e0ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1e0f0     1F 28 C6 C9 |  if_b	decod	local02, #31
1e0f4     00 28 06 36 |  if_ae	mov	local02, #0
1e0f8     94 B2 B0 FD | 	call	#__system___float_fromuns
1e0fc     14 FB 61 F5 | 	xor	result1, local02
1e100     0C 4E 05 F1 | 	add	fp, #12
1e104     A7 FA 61 FC | 	wrlong	result1, fp
1e108     0C 4E 85 F1 | 	sub	fp, #12
1e10c                 | LR__2382
1e10c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1e10c     14 4E 05 F1 | 	add	fp, #20
1e110     A7 14 02 FB | 	rdlong	arg02, fp
1e114     14 4E 85 F1 | 	sub	fp, #20
1e118     1D 14 0E F2 | 	cmp	arg02, #29 wz
1e11c     24 00 90 5D |  if_ne	jmp	#LR__2383
1e120     14 4E 05 F1 | 	add	fp, #20
1e124     A7 3C 68 FC | 	wrlong	#30, fp
1e128     08 4E 85 F1 | 	sub	fp, #8
1e12c     A7 12 02 FB | 	rdlong	arg01, fp
1e130     0C 4E 85 F1 | 	sub	fp, #12
1e134     58 B2 B0 FD | 	call	#__system___float_fromuns
1e138     0C 4E 05 F1 | 	add	fp, #12
1e13c     A7 FA 61 FC | 	wrlong	result1, fp
1e140     0C 4E 85 F1 | 	sub	fp, #12
1e144                 | LR__2383
1e144                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1e144     08 4E 05 F1 | 	add	fp, #8
1e148     A7 14 02 FB | 	rdlong	arg02, fp
1e14c     08 4E 85 F1 | 	sub	fp, #8
1e150     1E 14 0E F2 | 	cmp	arg02, #30 wz
1e154     14 4E 05 A1 |  if_e	add	fp, #20
1e158     A7 26 02 AB |  if_e	rdlong	local01, fp
1e15c     14 4E 85 A1 |  if_e	sub	fp, #20
1e160     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1e164     1C 00 90 5D |  if_ne	jmp	#LR__2384
1e168     A7 12 02 FB | 	rdlong	arg01, fp
1e16c     0C 4E 05 F1 | 	add	fp, #12
1e170     A7 14 02 FB | 	rdlong	arg02, fp
1e174     0C 4E 85 F1 | 	sub	fp, #12
1e178     1C B8 B0 FD | 	call	#__system___float_div
1e17c     A7 FA 61 FC | 	wrlong	result1, fp
1e180     10 00 90 FD | 	jmp	#LR__2385
1e184                 | LR__2384
1e184     A7 16 68 FC | 	wrlong	#11, fp
1e188     08 4E 05 F1 | 	add	fp, #8
1e18c     A7 FE 69 FC | 	wrlong	#255, fp
1e190     08 4E 85 F1 | 	sub	fp, #8
1e194                 | LR__2385
1e194     A7 12 02 F6 | 	mov	arg01, fp
1e198     84 F4 BE FD | 	call	#_push
1e19c     A7 F0 03 F6 | 	mov	ptra, fp
1e1a0     B2 00 A0 FD | 	call	#popregs_
1e1a4                 | _do_fdiv_ret
1e1a4     2D 00 64 FD | 	ret
1e1a8                 | 
1e1a8                 | ' 
1e1a8                 | ' '--------------------------------- greater or equal (>=)
1e1a8                 | ' 
1e1a8                 | ' sub do_ge
1e1a8                 | _do_ge
1e1a8     05 4A 05 F6 | 	mov	COUNT_, #5
1e1ac     A8 00 A0 FD | 	call	#pushregs_
1e1b0     18 F0 07 F1 | 	add	ptra, #24
1e1b4     D0 F3 BE FD | 	call	#_pop
1e1b8     FD 26 02 F6 | 	mov	local01, result1
1e1bc     FE 28 02 F6 | 	mov	local02, result2
1e1c0     FF 2A 02 F6 | 	mov	local03, result3
1e1c4     0C 4E 05 F1 | 	add	fp, #12
1e1c8     A7 26 62 FC | 	wrlong	local01, fp
1e1cc     04 4E 05 F1 | 	add	fp, #4
1e1d0     A7 28 62 FC | 	wrlong	local02, fp
1e1d4     04 4E 05 F1 | 	add	fp, #4
1e1d8     A7 2A 62 FC | 	wrlong	local03, fp
1e1dc     14 4E 85 F1 | 	sub	fp, #20
1e1e0     A4 F3 BE FD | 	call	#_pop
1e1e4     FF 2A 02 F6 | 	mov	local03, result3
1e1e8     A7 FA 61 FC | 	wrlong	result1, fp
1e1ec     04 4E 05 F1 | 	add	fp, #4
1e1f0     A7 FC 61 FC | 	wrlong	result2, fp
1e1f4     04 4E 05 F1 | 	add	fp, #4
1e1f8     A7 2A 62 FC | 	wrlong	local03, fp
1e1fc                 | ' 
1e1fc                 | ' t2=pop()
1e1fc                 | ' t1=pop()
1e1fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1e1fc     08 4E 85 F1 | 	sub	fp, #8
1e200     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e204     14 4E 05 A1 |  if_e	add	fp, #20
1e208     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e20c     14 4E 85 A1 |  if_e	sub	fp, #20
1e210     16 2B 02 A6 |  if_e	mov	local03, local04
1e214     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e218     28 00 90 5D |  if_ne	jmp	#LR__2390
1e21c     00 26 06 F6 | 	mov	local01, #0
1e220     A7 12 02 FB | 	rdlong	arg01, fp
1e224     0C 4E 05 F1 | 	add	fp, #12
1e228     A7 14 02 FB | 	rdlong	arg02, fp
1e22c     0C 4E 85 F1 | 	sub	fp, #12
1e230     0C 87 B0 FD | 	call	#__system___string_cmp
1e234     00 FA 55 F2 | 	cmps	result1, #0 wc
1e238     00 26 26 36 |  if_ae	not	local01, #0
1e23c     A7 26 62 FC | 	wrlong	local01, fp
1e240     24 04 90 FD | 	jmp	#LR__2403
1e244                 | LR__2390
1e244                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1e244     08 4E 05 F1 | 	add	fp, #8
1e248     A7 26 02 FB | 	rdlong	local01, fp
1e24c     08 4E 85 F1 | 	sub	fp, #8
1e250     1E 26 0E F2 | 	cmp	local01, #30 wz
1e254     14 4E 05 A1 |  if_e	add	fp, #20
1e258     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e25c     14 4E 85 A1 |  if_e	sub	fp, #20
1e260     16 2B 02 A6 |  if_e	mov	local03, local04
1e264     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e268     2C 00 90 5D |  if_ne	jmp	#LR__2391
1e26c     00 26 06 F6 | 	mov	local01, #0
1e270     A7 12 02 FB | 	rdlong	arg01, fp
1e274     0C 4E 05 F1 | 	add	fp, #12
1e278     A7 14 02 FB | 	rdlong	arg02, fp
1e27c     0C 4E 85 F1 | 	sub	fp, #12
1e280     01 16 66 F6 | 	neg	arg03, #1
1e284     40 B9 B0 FD | 	call	#__system___float_cmp
1e288     00 FA 55 F2 | 	cmps	result1, #0 wc
1e28c     00 26 26 36 |  if_ae	not	local01, #0
1e290     A7 26 62 FC | 	wrlong	local01, fp
1e294     D0 03 90 FD | 	jmp	#LR__2403
1e298                 | LR__2391
1e298                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1e298     08 4E 05 F1 | 	add	fp, #8
1e29c     A7 26 02 FB | 	rdlong	local01, fp
1e2a0     08 4E 85 F1 | 	sub	fp, #8
1e2a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1e2a8     14 4E 05 A1 |  if_e	add	fp, #20
1e2ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e2b0     14 4E 85 A1 |  if_e	sub	fp, #20
1e2b4     16 2B 02 A6 |  if_e	mov	local03, local04
1e2b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e2bc     48 00 90 5D |  if_ne	jmp	#LR__2392
1e2c0     00 26 06 F6 | 	mov	local01, #0
1e2c4     A7 28 02 FB | 	rdlong	local02, fp
1e2c8     0C 4E 05 F1 | 	add	fp, #12
1e2cc     A7 12 02 FB | 	rdlong	arg01, fp
1e2d0     0C 4E 85 F1 | 	sub	fp, #12
1e2d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1e2d8     1F 2E C6 C9 |  if_b	decod	local05, #31
1e2dc     00 2E 06 36 |  if_ae	mov	local05, #0
1e2e0     AC B0 B0 FD | 	call	#__system___float_fromuns
1e2e4     17 FB 61 F5 | 	xor	result1, local05
1e2e8     FD 14 02 F6 | 	mov	arg02, result1
1e2ec     14 13 02 F6 | 	mov	arg01, local02
1e2f0     01 16 66 F6 | 	neg	arg03, #1
1e2f4     D0 B8 B0 FD | 	call	#__system___float_cmp
1e2f8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e2fc     00 26 26 36 |  if_ae	not	local01, #0
1e300     A7 26 62 FC | 	wrlong	local01, fp
1e304     60 03 90 FD | 	jmp	#LR__2403
1e308                 | LR__2392
1e308                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1e308     08 4E 05 F1 | 	add	fp, #8
1e30c     A7 26 02 FB | 	rdlong	local01, fp
1e310     08 4E 85 F1 | 	sub	fp, #8
1e314     1E 26 0E F2 | 	cmp	local01, #30 wz
1e318     14 4E 05 A1 |  if_e	add	fp, #20
1e31c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e320     14 4E 85 A1 |  if_e	sub	fp, #20
1e324     16 2B 02 A6 |  if_e	mov	local03, local04
1e328     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e32c     38 00 90 5D |  if_ne	jmp	#LR__2393
1e330     00 26 06 F6 | 	mov	local01, #0
1e334     A7 28 02 FB | 	rdlong	local02, fp
1e338     0C 4E 05 F1 | 	add	fp, #12
1e33c     A7 12 02 FB | 	rdlong	arg01, fp
1e340     0C 4E 85 F1 | 	sub	fp, #12
1e344     48 B0 B0 FD | 	call	#__system___float_fromuns
1e348     FD 14 02 F6 | 	mov	arg02, result1
1e34c     14 13 02 F6 | 	mov	arg01, local02
1e350     01 16 66 F6 | 	neg	arg03, #1
1e354     70 B8 B0 FD | 	call	#__system___float_cmp
1e358     00 FA 55 F2 | 	cmps	result1, #0 wc
1e35c     00 26 26 36 |  if_ae	not	local01, #0
1e360     A7 26 62 FC | 	wrlong	local01, fp
1e364     00 03 90 FD | 	jmp	#LR__2403
1e368                 | LR__2393
1e368                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1e368     08 4E 05 F1 | 	add	fp, #8
1e36c     A7 26 02 FB | 	rdlong	local01, fp
1e370     08 4E 85 F1 | 	sub	fp, #8
1e374     1C 26 0E F2 | 	cmp	local01, #28 wz
1e378     14 4E 05 A1 |  if_e	add	fp, #20
1e37c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e380     14 4E 85 A1 |  if_e	sub	fp, #20
1e384     16 2B 02 A6 |  if_e	mov	local03, local04
1e388     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e38c     44 00 90 5D |  if_ne	jmp	#LR__2394
1e390     00 26 06 F6 | 	mov	local01, #0
1e394     A7 12 02 FB | 	rdlong	arg01, fp
1e398     09 13 52 F6 | 	abs	arg01, arg01 wc
1e39c     1F 2E C6 C9 |  if_b	decod	local05, #31
1e3a0     00 2E 06 36 |  if_ae	mov	local05, #0
1e3a4     E8 AF B0 FD | 	call	#__system___float_fromuns
1e3a8     17 FB 61 F5 | 	xor	result1, local05
1e3ac     FD 12 02 F6 | 	mov	arg01, result1
1e3b0     0C 4E 05 F1 | 	add	fp, #12
1e3b4     A7 14 02 FB | 	rdlong	arg02, fp
1e3b8     0C 4E 85 F1 | 	sub	fp, #12
1e3bc     01 16 66 F6 | 	neg	arg03, #1
1e3c0     04 B8 B0 FD | 	call	#__system___float_cmp
1e3c4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e3c8     00 26 26 36 |  if_ae	not	local01, #0
1e3cc     A7 26 62 FC | 	wrlong	local01, fp
1e3d0     94 02 90 FD | 	jmp	#LR__2403
1e3d4                 | LR__2394
1e3d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1e3d4     08 4E 05 F1 | 	add	fp, #8
1e3d8     A7 26 02 FB | 	rdlong	local01, fp
1e3dc     08 4E 85 F1 | 	sub	fp, #8
1e3e0     1C 26 0E F2 | 	cmp	local01, #28 wz
1e3e4     14 4E 05 A1 |  if_e	add	fp, #20
1e3e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e3ec     14 4E 85 A1 |  if_e	sub	fp, #20
1e3f0     16 2B 02 A6 |  if_e	mov	local03, local04
1e3f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e3f8     24 00 90 5D |  if_ne	jmp	#LR__2395
1e3fc     00 26 06 F6 | 	mov	local01, #0
1e400     A7 28 02 FB | 	rdlong	local02, fp
1e404     0C 4E 05 F1 | 	add	fp, #12
1e408     A7 2A 02 FB | 	rdlong	local03, fp
1e40c     0C 4E 85 F1 | 	sub	fp, #12
1e410     15 29 52 F2 | 	cmps	local02, local03 wc
1e414     01 26 66 36 |  if_ae	neg	local01, #1
1e418     A7 26 62 FC | 	wrlong	local01, fp
1e41c     48 02 90 FD | 	jmp	#LR__2403
1e420                 | LR__2395
1e420                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1e420     08 4E 05 F1 | 	add	fp, #8
1e424     A7 26 02 FB | 	rdlong	local01, fp
1e428     08 4E 85 F1 | 	sub	fp, #8
1e42c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e430     14 4E 05 A1 |  if_e	add	fp, #20
1e434     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e438     14 4E 85 A1 |  if_e	sub	fp, #20
1e43c     16 2B 02 A6 |  if_e	mov	local03, local04
1e440     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e444     24 00 90 5D |  if_ne	jmp	#LR__2396
1e448     00 26 06 F6 | 	mov	local01, #0
1e44c     A7 28 02 FB | 	rdlong	local02, fp
1e450     0C 4E 05 F1 | 	add	fp, #12
1e454     A7 2A 02 FB | 	rdlong	local03, fp
1e458     0C 4E 85 F1 | 	sub	fp, #12
1e45c     15 29 52 F2 | 	cmps	local02, local03 wc
1e460     01 26 66 36 |  if_ae	neg	local01, #1
1e464     A7 26 62 FC | 	wrlong	local01, fp
1e468     FC 01 90 FD | 	jmp	#LR__2403
1e46c                 | LR__2396
1e46c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1e46c     08 4E 05 F1 | 	add	fp, #8
1e470     A7 26 02 FB | 	rdlong	local01, fp
1e474     08 4E 85 F1 | 	sub	fp, #8
1e478     1D 26 0E F2 | 	cmp	local01, #29 wz
1e47c     14 4E 05 A1 |  if_e	add	fp, #20
1e480     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e484     14 4E 85 A1 |  if_e	sub	fp, #20
1e488     16 2B 02 A6 |  if_e	mov	local03, local04
1e48c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e490     34 00 90 5D |  if_ne	jmp	#LR__2397
1e494     00 26 06 F6 | 	mov	local01, #0
1e498     A7 12 02 FB | 	rdlong	arg01, fp
1e49c     F0 AE B0 FD | 	call	#__system___float_fromuns
1e4a0     FD 12 02 F6 | 	mov	arg01, result1
1e4a4     0C 4E 05 F1 | 	add	fp, #12
1e4a8     A7 14 02 FB | 	rdlong	arg02, fp
1e4ac     0C 4E 85 F1 | 	sub	fp, #12
1e4b0     01 16 66 F6 | 	neg	arg03, #1
1e4b4     10 B7 B0 FD | 	call	#__system___float_cmp
1e4b8     00 FA 55 F2 | 	cmps	result1, #0 wc
1e4bc     00 26 26 36 |  if_ae	not	local01, #0
1e4c0     A7 26 62 FC | 	wrlong	local01, fp
1e4c4     A0 01 90 FD | 	jmp	#LR__2403
1e4c8                 | LR__2397
1e4c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1e4c8     08 4E 05 F1 | 	add	fp, #8
1e4cc     A7 26 02 FB | 	rdlong	local01, fp
1e4d0     08 4E 85 F1 | 	sub	fp, #8
1e4d4     1D 26 0E F2 | 	cmp	local01, #29 wz
1e4d8     14 4E 05 A1 |  if_e	add	fp, #20
1e4dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e4e0     14 4E 85 A1 |  if_e	sub	fp, #20
1e4e4     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1e4e8     24 00 90 5D |  if_ne	jmp	#LR__2398
1e4ec     00 26 06 F6 | 	mov	local01, #0
1e4f0     A7 28 02 FB | 	rdlong	local02, fp
1e4f4     0C 4E 05 F1 | 	add	fp, #12
1e4f8     A7 2A 02 FB | 	rdlong	local03, fp
1e4fc     0C 4E 85 F1 | 	sub	fp, #12
1e500     15 29 52 F2 | 	cmps	local02, local03 wc
1e504     01 26 66 36 |  if_ae	neg	local01, #1
1e508     A7 26 62 FC | 	wrlong	local01, fp
1e50c     58 01 90 FD | 	jmp	#LR__2403
1e510                 | LR__2398
1e510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1e510     08 4E 05 F1 | 	add	fp, #8
1e514     A7 26 02 FB | 	rdlong	local01, fp
1e518     08 4E 85 F1 | 	sub	fp, #8
1e51c     1D 26 0E F2 | 	cmp	local01, #29 wz
1e520     14 4E 05 A1 |  if_e	add	fp, #20
1e524     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e528     14 4E 85 A1 |  if_e	sub	fp, #20
1e52c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e530     24 00 90 5D |  if_ne	jmp	#LR__2399
1e534     00 26 06 F6 | 	mov	local01, #0
1e538     A7 28 02 FB | 	rdlong	local02, fp
1e53c     0C 4E 05 F1 | 	add	fp, #12
1e540     A7 2A 02 FB | 	rdlong	local03, fp
1e544     0C 4E 85 F1 | 	sub	fp, #12
1e548     15 29 12 F2 | 	cmp	local02, local03 wc
1e54c     01 26 66 36 |  if_ae	neg	local01, #1
1e550     A7 26 62 FC | 	wrlong	local01, fp
1e554     10 01 90 FD | 	jmp	#LR__2403
1e558                 | LR__2399
1e558                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1e558     08 4E 05 F1 | 	add	fp, #8
1e55c     A7 26 02 FB | 	rdlong	local01, fp
1e560     08 4E 85 F1 | 	sub	fp, #8
1e564     2B 26 0E F2 | 	cmp	local01, #43 wz
1e568     14 4E 05 A1 |  if_e	add	fp, #20
1e56c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e570     14 4E 85 A1 |  if_e	sub	fp, #20
1e574     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e578     30 00 90 5D |  if_ne	jmp	#LR__2400
1e57c     00 26 06 F6 | 	mov	local01, #0
1e580     A7 12 02 FB | 	rdlong	arg01, fp
1e584     78 F1 BE FD | 	call	#_convertstring
1e588     FD 12 02 F6 | 	mov	arg01, result1
1e58c     0C 4E 05 F1 | 	add	fp, #12
1e590     A7 14 02 FB | 	rdlong	arg02, fp
1e594     0C 4E 85 F1 | 	sub	fp, #12
1e598     A4 83 B0 FD | 	call	#__system___string_cmp
1e59c     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5a0     00 26 26 36 |  if_ae	not	local01, #0
1e5a4     A7 26 62 FC | 	wrlong	local01, fp
1e5a8     BC 00 90 FD | 	jmp	#LR__2403
1e5ac                 | LR__2400
1e5ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1e5ac     08 4E 05 F1 | 	add	fp, #8
1e5b0     A7 26 02 FB | 	rdlong	local01, fp
1e5b4     08 4E 85 F1 | 	sub	fp, #8
1e5b8     1F 26 0E F2 | 	cmp	local01, #31 wz
1e5bc     14 4E 05 A1 |  if_e	add	fp, #20
1e5c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e5c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e5c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e5cc     34 00 90 5D |  if_ne	jmp	#LR__2401
1e5d0     00 26 06 F6 | 	mov	local01, #0
1e5d4     A7 28 02 FB | 	rdlong	local02, fp
1e5d8     0C 4E 05 F1 | 	add	fp, #12
1e5dc     A7 12 02 FB | 	rdlong	arg01, fp
1e5e0     0C 4E 85 F1 | 	sub	fp, #12
1e5e4     18 F1 BE FD | 	call	#_convertstring
1e5e8     FD 14 02 F6 | 	mov	arg02, result1
1e5ec     14 13 02 F6 | 	mov	arg01, local02
1e5f0     4C 83 B0 FD | 	call	#__system___string_cmp
1e5f4     00 FA 55 F2 | 	cmps	result1, #0 wc
1e5f8     00 26 26 36 |  if_ae	not	local01, #0
1e5fc     A7 26 62 FC | 	wrlong	local01, fp
1e600     64 00 90 FD | 	jmp	#LR__2403
1e604                 | LR__2401
1e604                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1e604     08 4E 05 F1 | 	add	fp, #8
1e608     A7 26 02 FB | 	rdlong	local01, fp
1e60c     08 4E 85 F1 | 	sub	fp, #8
1e610     2B 26 0E F2 | 	cmp	local01, #43 wz
1e614     14 4E 05 A1 |  if_e	add	fp, #20
1e618     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e61c     14 4E 85 A1 |  if_e	sub	fp, #20
1e620     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1e624     3C 00 90 5D |  if_ne	jmp	#LR__2402
1e628     00 26 06 F6 | 	mov	local01, #0
1e62c     A7 12 02 FB | 	rdlong	arg01, fp
1e630     CC F0 BE FD | 	call	#_convertstring
1e634     FD 28 02 F6 | 	mov	local02, result1
1e638     0C 4E 05 F1 | 	add	fp, #12
1e63c     A7 12 02 FB | 	rdlong	arg01, fp
1e640     0C 4E 85 F1 | 	sub	fp, #12
1e644     B8 F0 BE FD | 	call	#_convertstring
1e648     FD 14 02 F6 | 	mov	arg02, result1
1e64c     14 13 02 F6 | 	mov	arg01, local02
1e650     EC 82 B0 FD | 	call	#__system___string_cmp
1e654     00 FA 55 F2 | 	cmps	result1, #0 wc
1e658     00 26 26 36 |  if_ae	not	local01, #0
1e65c     A7 26 62 FC | 	wrlong	local01, fp
1e660     04 00 90 FD | 	jmp	#LR__2403
1e664                 | LR__2402
1e664     A7 00 68 FC | 	wrlong	#0, fp
1e668                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e668                 | LR__2403
1e668     08 4E 05 F1 | 	add	fp, #8
1e66c     A7 38 68 FC | 	wrlong	#28, fp
1e670     08 4E 85 F1 | 	sub	fp, #8
1e674                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1e674     A7 26 0A FB | 	rdlong	local01, fp wz
1e678     A7 02 68 5C |  if_ne	wrlong	#1, fp
1e67c     A7 12 02 F6 | 	mov	arg01, fp
1e680     9C EF BE FD | 	call	#_push
1e684     A7 F0 03 F6 | 	mov	ptra, fp
1e688     B2 00 A0 FD | 	call	#popregs_
1e68c                 | _do_ge_ret
1e68c     2D 00 64 FD | 	ret
1e690                 | 
1e690                 | ' 
1e690                 | ' '--------------------------------- greater than (>)
1e690                 | ' 
1e690                 | ' sub do_gt
1e690                 | _do_gt
1e690     05 4A 05 F6 | 	mov	COUNT_, #5
1e694     A8 00 A0 FD | 	call	#pushregs_
1e698     18 F0 07 F1 | 	add	ptra, #24
1e69c     E8 EE BE FD | 	call	#_pop
1e6a0     FD 26 02 F6 | 	mov	local01, result1
1e6a4     FE 28 02 F6 | 	mov	local02, result2
1e6a8     FF 2A 02 F6 | 	mov	local03, result3
1e6ac     0C 4E 05 F1 | 	add	fp, #12
1e6b0     A7 26 62 FC | 	wrlong	local01, fp
1e6b4     04 4E 05 F1 | 	add	fp, #4
1e6b8     A7 28 62 FC | 	wrlong	local02, fp
1e6bc     04 4E 05 F1 | 	add	fp, #4
1e6c0     A7 2A 62 FC | 	wrlong	local03, fp
1e6c4     14 4E 85 F1 | 	sub	fp, #20
1e6c8     BC EE BE FD | 	call	#_pop
1e6cc     FF 2A 02 F6 | 	mov	local03, result3
1e6d0     A7 FA 61 FC | 	wrlong	result1, fp
1e6d4     04 4E 05 F1 | 	add	fp, #4
1e6d8     A7 FC 61 FC | 	wrlong	result2, fp
1e6dc     04 4E 05 F1 | 	add	fp, #4
1e6e0     A7 2A 62 FC | 	wrlong	local03, fp
1e6e4                 | ' 
1e6e4                 | ' t2=pop()
1e6e4                 | ' t1=pop()
1e6e4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1e6e4     08 4E 85 F1 | 	sub	fp, #8
1e6e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1e6ec     14 4E 05 A1 |  if_e	add	fp, #20
1e6f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e6f4     14 4E 85 A1 |  if_e	sub	fp, #20
1e6f8     16 2B 02 A6 |  if_e	mov	local03, local04
1e6fc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1e700     28 00 90 5D |  if_ne	jmp	#LR__2410
1e704     00 26 06 F6 | 	mov	local01, #0
1e708     A7 12 02 FB | 	rdlong	arg01, fp
1e70c     0C 4E 05 F1 | 	add	fp, #12
1e710     A7 14 02 FB | 	rdlong	arg02, fp
1e714     0C 4E 85 F1 | 	sub	fp, #12
1e718     24 82 B0 FD | 	call	#__system___string_cmp
1e71c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e720     00 26 26 36 |  if_ae	not	local01, #0
1e724     A7 26 62 FC | 	wrlong	local01, fp
1e728     20 04 90 FD | 	jmp	#LR__2423
1e72c                 | LR__2410
1e72c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1e72c     08 4E 05 F1 | 	add	fp, #8
1e730     A7 26 02 FB | 	rdlong	local01, fp
1e734     08 4E 85 F1 | 	sub	fp, #8
1e738     1E 26 0E F2 | 	cmp	local01, #30 wz
1e73c     14 4E 05 A1 |  if_e	add	fp, #20
1e740     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e744     14 4E 85 A1 |  if_e	sub	fp, #20
1e748     16 2B 02 A6 |  if_e	mov	local03, local04
1e74c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e750     2C 00 90 5D |  if_ne	jmp	#LR__2411
1e754     00 26 06 F6 | 	mov	local01, #0
1e758     A7 12 02 FB | 	rdlong	arg01, fp
1e75c     0C 4E 05 F1 | 	add	fp, #12
1e760     A7 14 02 FB | 	rdlong	arg02, fp
1e764     0C 4E 85 F1 | 	sub	fp, #12
1e768     01 16 66 F6 | 	neg	arg03, #1
1e76c     58 B4 B0 FD | 	call	#__system___float_cmp
1e770     01 FA 55 F2 | 	cmps	result1, #1 wc
1e774     00 26 26 36 |  if_ae	not	local01, #0
1e778     A7 26 62 FC | 	wrlong	local01, fp
1e77c     CC 03 90 FD | 	jmp	#LR__2423
1e780                 | LR__2411
1e780                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1e780     08 4E 05 F1 | 	add	fp, #8
1e784     A7 26 02 FB | 	rdlong	local01, fp
1e788     08 4E 85 F1 | 	sub	fp, #8
1e78c     1E 26 0E F2 | 	cmp	local01, #30 wz
1e790     14 4E 05 A1 |  if_e	add	fp, #20
1e794     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e798     14 4E 85 A1 |  if_e	sub	fp, #20
1e79c     16 2B 02 A6 |  if_e	mov	local03, local04
1e7a0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e7a4     48 00 90 5D |  if_ne	jmp	#LR__2412
1e7a8     00 26 06 F6 | 	mov	local01, #0
1e7ac     A7 28 02 FB | 	rdlong	local02, fp
1e7b0     0C 4E 05 F1 | 	add	fp, #12
1e7b4     A7 12 02 FB | 	rdlong	arg01, fp
1e7b8     0C 4E 85 F1 | 	sub	fp, #12
1e7bc     09 13 52 F6 | 	abs	arg01, arg01 wc
1e7c0     1F 2E C6 C9 |  if_b	decod	local05, #31
1e7c4     00 2E 06 36 |  if_ae	mov	local05, #0
1e7c8     C4 AB B0 FD | 	call	#__system___float_fromuns
1e7cc     17 FB 61 F5 | 	xor	result1, local05
1e7d0     FD 14 02 F6 | 	mov	arg02, result1
1e7d4     14 13 02 F6 | 	mov	arg01, local02
1e7d8     01 16 66 F6 | 	neg	arg03, #1
1e7dc     E8 B3 B0 FD | 	call	#__system___float_cmp
1e7e0     01 FA 55 F2 | 	cmps	result1, #1 wc
1e7e4     00 26 26 36 |  if_ae	not	local01, #0
1e7e8     A7 26 62 FC | 	wrlong	local01, fp
1e7ec     5C 03 90 FD | 	jmp	#LR__2423
1e7f0                 | LR__2412
1e7f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1e7f0     08 4E 05 F1 | 	add	fp, #8
1e7f4     A7 26 02 FB | 	rdlong	local01, fp
1e7f8     08 4E 85 F1 | 	sub	fp, #8
1e7fc     1E 26 0E F2 | 	cmp	local01, #30 wz
1e800     14 4E 05 A1 |  if_e	add	fp, #20
1e804     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e808     14 4E 85 A1 |  if_e	sub	fp, #20
1e80c     16 2B 02 A6 |  if_e	mov	local03, local04
1e810     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e814     38 00 90 5D |  if_ne	jmp	#LR__2413
1e818     00 26 06 F6 | 	mov	local01, #0
1e81c     A7 28 02 FB | 	rdlong	local02, fp
1e820     0C 4E 05 F1 | 	add	fp, #12
1e824     A7 12 02 FB | 	rdlong	arg01, fp
1e828     0C 4E 85 F1 | 	sub	fp, #12
1e82c     60 AB B0 FD | 	call	#__system___float_fromuns
1e830     FD 14 02 F6 | 	mov	arg02, result1
1e834     14 13 02 F6 | 	mov	arg01, local02
1e838     01 16 66 F6 | 	neg	arg03, #1
1e83c     88 B3 B0 FD | 	call	#__system___float_cmp
1e840     01 FA 55 F2 | 	cmps	result1, #1 wc
1e844     00 26 26 36 |  if_ae	not	local01, #0
1e848     A7 26 62 FC | 	wrlong	local01, fp
1e84c     FC 02 90 FD | 	jmp	#LR__2423
1e850                 | LR__2413
1e850                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1e850     08 4E 05 F1 | 	add	fp, #8
1e854     A7 26 02 FB | 	rdlong	local01, fp
1e858     08 4E 85 F1 | 	sub	fp, #8
1e85c     1C 26 0E F2 | 	cmp	local01, #28 wz
1e860     14 4E 05 A1 |  if_e	add	fp, #20
1e864     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e868     14 4E 85 A1 |  if_e	sub	fp, #20
1e86c     16 2B 02 A6 |  if_e	mov	local03, local04
1e870     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1e874     44 00 90 5D |  if_ne	jmp	#LR__2414
1e878     00 26 06 F6 | 	mov	local01, #0
1e87c     A7 12 02 FB | 	rdlong	arg01, fp
1e880     09 13 52 F6 | 	abs	arg01, arg01 wc
1e884     1F 2E C6 C9 |  if_b	decod	local05, #31
1e888     00 2E 06 36 |  if_ae	mov	local05, #0
1e88c     00 AB B0 FD | 	call	#__system___float_fromuns
1e890     17 FB 61 F5 | 	xor	result1, local05
1e894     FD 12 02 F6 | 	mov	arg01, result1
1e898     0C 4E 05 F1 | 	add	fp, #12
1e89c     A7 14 02 FB | 	rdlong	arg02, fp
1e8a0     0C 4E 85 F1 | 	sub	fp, #12
1e8a4     01 16 66 F6 | 	neg	arg03, #1
1e8a8     1C B3 B0 FD | 	call	#__system___float_cmp
1e8ac     01 FA 55 F2 | 	cmps	result1, #1 wc
1e8b0     00 26 26 36 |  if_ae	not	local01, #0
1e8b4     A7 26 62 FC | 	wrlong	local01, fp
1e8b8     90 02 90 FD | 	jmp	#LR__2423
1e8bc                 | LR__2414
1e8bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1e8bc     08 4E 05 F1 | 	add	fp, #8
1e8c0     A7 26 02 FB | 	rdlong	local01, fp
1e8c4     08 4E 85 F1 | 	sub	fp, #8
1e8c8     1C 26 0E F2 | 	cmp	local01, #28 wz
1e8cc     14 4E 05 A1 |  if_e	add	fp, #20
1e8d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e8d4     14 4E 85 A1 |  if_e	sub	fp, #20
1e8d8     16 2B 02 A6 |  if_e	mov	local03, local04
1e8dc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e8e0     24 00 90 5D |  if_ne	jmp	#LR__2415
1e8e4     00 26 06 F6 | 	mov	local01, #0
1e8e8     A7 28 02 FB | 	rdlong	local02, fp
1e8ec     0C 4E 05 F1 | 	add	fp, #12
1e8f0     A7 2A 02 FB | 	rdlong	local03, fp
1e8f4     0C 4E 85 F1 | 	sub	fp, #12
1e8f8     15 29 5A F2 | 	cmps	local02, local03 wcz
1e8fc     01 26 66 16 |  if_a	neg	local01, #1
1e900     A7 26 62 FC | 	wrlong	local01, fp
1e904     44 02 90 FD | 	jmp	#LR__2423
1e908                 | LR__2415
1e908                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1e908     08 4E 05 F1 | 	add	fp, #8
1e90c     A7 26 02 FB | 	rdlong	local01, fp
1e910     08 4E 85 F1 | 	sub	fp, #8
1e914     1C 26 0E F2 | 	cmp	local01, #28 wz
1e918     14 4E 05 A1 |  if_e	add	fp, #20
1e91c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e920     14 4E 85 A1 |  if_e	sub	fp, #20
1e924     16 2B 02 A6 |  if_e	mov	local03, local04
1e928     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1e92c     24 00 90 5D |  if_ne	jmp	#LR__2416
1e930     00 26 06 F6 | 	mov	local01, #0
1e934     A7 28 02 FB | 	rdlong	local02, fp
1e938     0C 4E 05 F1 | 	add	fp, #12
1e93c     A7 2A 02 FB | 	rdlong	local03, fp
1e940     0C 4E 85 F1 | 	sub	fp, #12
1e944     15 29 5A F2 | 	cmps	local02, local03 wcz
1e948     01 26 66 16 |  if_a	neg	local01, #1
1e94c     A7 26 62 FC | 	wrlong	local01, fp
1e950     F8 01 90 FD | 	jmp	#LR__2423
1e954                 | LR__2416
1e954                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1e954     08 4E 05 F1 | 	add	fp, #8
1e958     A7 26 02 FB | 	rdlong	local01, fp
1e95c     08 4E 85 F1 | 	sub	fp, #8
1e960     1D 26 0E F2 | 	cmp	local01, #29 wz
1e964     14 4E 05 A1 |  if_e	add	fp, #20
1e968     A7 2C 02 AB |  if_e	rdlong	local04, fp
1e96c     14 4E 85 A1 |  if_e	sub	fp, #20
1e970     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1e974     34 00 90 5D |  if_ne	jmp	#LR__2417
1e978     00 26 06 F6 | 	mov	local01, #0
1e97c     A7 12 02 FB | 	rdlong	arg01, fp
1e980     0C AA B0 FD | 	call	#__system___float_fromuns
1e984     FD 12 02 F6 | 	mov	arg01, result1
1e988     0C 4E 05 F1 | 	add	fp, #12
1e98c     A7 14 02 FB | 	rdlong	arg02, fp
1e990     0C 4E 85 F1 | 	sub	fp, #12
1e994     01 16 66 F6 | 	neg	arg03, #1
1e998     2C B2 B0 FD | 	call	#__system___float_cmp
1e99c     01 FA 55 F2 | 	cmps	result1, #1 wc
1e9a0     00 26 26 36 |  if_ae	not	local01, #0
1e9a4     A7 26 62 FC | 	wrlong	local01, fp
1e9a8     A0 01 90 FD | 	jmp	#LR__2423
1e9ac                 | LR__2417
1e9ac                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1e9ac     08 4E 05 F1 | 	add	fp, #8
1e9b0     A7 26 02 FB | 	rdlong	local01, fp
1e9b4     08 4E 85 F1 | 	sub	fp, #8
1e9b8     1D 26 0E F2 | 	cmp	local01, #29 wz
1e9bc     14 4E 05 A1 |  if_e	add	fp, #20
1e9c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1e9c4     14 4E 85 A1 |  if_e	sub	fp, #20
1e9c8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1e9cc     24 00 90 5D |  if_ne	jmp	#LR__2418
1e9d0     00 26 06 F6 | 	mov	local01, #0
1e9d4     A7 28 02 FB | 	rdlong	local02, fp
1e9d8     0C 4E 05 F1 | 	add	fp, #12
1e9dc     A7 2A 02 FB | 	rdlong	local03, fp
1e9e0     0C 4E 85 F1 | 	sub	fp, #12
1e9e4     15 29 5A F2 | 	cmps	local02, local03 wcz
1e9e8     01 26 66 16 |  if_a	neg	local01, #1
1e9ec     A7 26 62 FC | 	wrlong	local01, fp
1e9f0     58 01 90 FD | 	jmp	#LR__2423
1e9f4                 | LR__2418
1e9f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1e9f4     08 4E 05 F1 | 	add	fp, #8
1e9f8     A7 26 02 FB | 	rdlong	local01, fp
1e9fc     08 4E 85 F1 | 	sub	fp, #8
1ea00     1D 26 0E F2 | 	cmp	local01, #29 wz
1ea04     14 4E 05 A1 |  if_e	add	fp, #20
1ea08     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea0c     14 4E 85 A1 |  if_e	sub	fp, #20
1ea10     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ea14     24 00 90 5D |  if_ne	jmp	#LR__2419
1ea18     00 26 06 F6 | 	mov	local01, #0
1ea1c     A7 28 02 FB | 	rdlong	local02, fp
1ea20     0C 4E 05 F1 | 	add	fp, #12
1ea24     A7 2A 02 FB | 	rdlong	local03, fp
1ea28     0C 4E 85 F1 | 	sub	fp, #12
1ea2c     15 29 1A F2 | 	cmp	local02, local03 wcz
1ea30     01 26 66 16 |  if_a	neg	local01, #1
1ea34     A7 26 62 FC | 	wrlong	local01, fp
1ea38     10 01 90 FD | 	jmp	#LR__2423
1ea3c                 | LR__2419
1ea3c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1ea3c     08 4E 05 F1 | 	add	fp, #8
1ea40     A7 26 02 FB | 	rdlong	local01, fp
1ea44     08 4E 85 F1 | 	sub	fp, #8
1ea48     2B 26 0E F2 | 	cmp	local01, #43 wz
1ea4c     14 4E 05 A1 |  if_e	add	fp, #20
1ea50     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ea54     14 4E 85 A1 |  if_e	sub	fp, #20
1ea58     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ea5c     30 00 90 5D |  if_ne	jmp	#LR__2420
1ea60     00 26 06 F6 | 	mov	local01, #0
1ea64     A7 12 02 FB | 	rdlong	arg01, fp
1ea68     94 EC BE FD | 	call	#_convertstring
1ea6c     FD 12 02 F6 | 	mov	arg01, result1
1ea70     0C 4E 05 F1 | 	add	fp, #12
1ea74     A7 14 02 FB | 	rdlong	arg02, fp
1ea78     0C 4E 85 F1 | 	sub	fp, #12
1ea7c     C0 7E B0 FD | 	call	#__system___string_cmp
1ea80     01 FA 55 F2 | 	cmps	result1, #1 wc
1ea84     00 26 26 36 |  if_ae	not	local01, #0
1ea88     A7 26 62 FC | 	wrlong	local01, fp
1ea8c     BC 00 90 FD | 	jmp	#LR__2423
1ea90                 | LR__2420
1ea90                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1ea90     08 4E 05 F1 | 	add	fp, #8
1ea94     A7 26 02 FB | 	rdlong	local01, fp
1ea98     08 4E 85 F1 | 	sub	fp, #8
1ea9c     1F 26 0E F2 | 	cmp	local01, #31 wz
1eaa0     14 4E 05 A1 |  if_e	add	fp, #20
1eaa4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eaa8     14 4E 85 A1 |  if_e	sub	fp, #20
1eaac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eab0     34 00 90 5D |  if_ne	jmp	#LR__2421
1eab4     00 26 06 F6 | 	mov	local01, #0
1eab8     A7 28 02 FB | 	rdlong	local02, fp
1eabc     0C 4E 05 F1 | 	add	fp, #12
1eac0     A7 12 02 FB | 	rdlong	arg01, fp
1eac4     0C 4E 85 F1 | 	sub	fp, #12
1eac8     34 EC BE FD | 	call	#_convertstring
1eacc     FD 14 02 F6 | 	mov	arg02, result1
1ead0     14 13 02 F6 | 	mov	arg01, local02
1ead4     68 7E B0 FD | 	call	#__system___string_cmp
1ead8     01 FA 55 F2 | 	cmps	result1, #1 wc
1eadc     00 26 26 36 |  if_ae	not	local01, #0
1eae0     A7 26 62 FC | 	wrlong	local01, fp
1eae4     64 00 90 FD | 	jmp	#LR__2423
1eae8                 | LR__2421
1eae8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1eae8     08 4E 05 F1 | 	add	fp, #8
1eaec     A7 26 02 FB | 	rdlong	local01, fp
1eaf0     08 4E 85 F1 | 	sub	fp, #8
1eaf4     2B 26 0E F2 | 	cmp	local01, #43 wz
1eaf8     14 4E 05 A1 |  if_e	add	fp, #20
1eafc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eb00     14 4E 85 A1 |  if_e	sub	fp, #20
1eb04     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1eb08     3C 00 90 5D |  if_ne	jmp	#LR__2422
1eb0c     00 26 06 F6 | 	mov	local01, #0
1eb10     A7 12 02 FB | 	rdlong	arg01, fp
1eb14     E8 EB BE FD | 	call	#_convertstring
1eb18     FD 28 02 F6 | 	mov	local02, result1
1eb1c     0C 4E 05 F1 | 	add	fp, #12
1eb20     A7 12 02 FB | 	rdlong	arg01, fp
1eb24     0C 4E 85 F1 | 	sub	fp, #12
1eb28     D4 EB BE FD | 	call	#_convertstring
1eb2c     FD 14 02 F6 | 	mov	arg02, result1
1eb30     14 13 02 F6 | 	mov	arg01, local02
1eb34     08 7E B0 FD | 	call	#__system___string_cmp
1eb38     01 FA 55 F2 | 	cmps	result1, #1 wc
1eb3c     00 26 26 36 |  if_ae	not	local01, #0
1eb40     A7 26 62 FC | 	wrlong	local01, fp
1eb44     04 00 90 FD | 	jmp	#LR__2423
1eb48                 | LR__2422
1eb48     A7 00 68 FC | 	wrlong	#0, fp
1eb4c                 | LR__2423
1eb4c     08 4E 05 F1 | 	add	fp, #8
1eb50     A7 38 68 FC | 	wrlong	#28, fp
1eb54     08 4E 85 F1 | 	sub	fp, #8
1eb58                 | ' t1.result.uresult=0
1eb58                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1eb58     A7 26 0A FB | 	rdlong	local01, fp wz
1eb5c     A7 02 68 5C |  if_ne	wrlong	#1, fp
1eb60     A7 12 02 F6 | 	mov	arg01, fp
1eb64     B8 EA BE FD | 	call	#_push
1eb68     A7 F0 03 F6 | 	mov	ptra, fp
1eb6c     B2 00 A0 FD | 	call	#popregs_
1eb70                 | _do_gt_ret
1eb70     2D 00 64 FD | 	ret
1eb74                 | 
1eb74                 | ' 
1eb74                 | ' '--------------------------------- less or equal (<=)
1eb74                 | ' 
1eb74                 | ' sub do_le
1eb74                 | _do_le
1eb74     05 4A 05 F6 | 	mov	COUNT_, #5
1eb78     A8 00 A0 FD | 	call	#pushregs_
1eb7c     18 F0 07 F1 | 	add	ptra, #24
1eb80     04 EA BE FD | 	call	#_pop
1eb84     FD 26 02 F6 | 	mov	local01, result1
1eb88     FE 28 02 F6 | 	mov	local02, result2
1eb8c     FF 2A 02 F6 | 	mov	local03, result3
1eb90     0C 4E 05 F1 | 	add	fp, #12
1eb94     A7 26 62 FC | 	wrlong	local01, fp
1eb98     04 4E 05 F1 | 	add	fp, #4
1eb9c     A7 28 62 FC | 	wrlong	local02, fp
1eba0     04 4E 05 F1 | 	add	fp, #4
1eba4     A7 2A 62 FC | 	wrlong	local03, fp
1eba8     14 4E 85 F1 | 	sub	fp, #20
1ebac     D8 E9 BE FD | 	call	#_pop
1ebb0     FF 2A 02 F6 | 	mov	local03, result3
1ebb4     A7 FA 61 FC | 	wrlong	result1, fp
1ebb8     04 4E 05 F1 | 	add	fp, #4
1ebbc     A7 FC 61 FC | 	wrlong	result2, fp
1ebc0     04 4E 05 F1 | 	add	fp, #4
1ebc4     A7 2A 62 FC | 	wrlong	local03, fp
1ebc8                 | ' 
1ebc8                 | ' t2=pop()
1ebc8                 | ' t1=pop()
1ebc8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1ebc8     08 4E 85 F1 | 	sub	fp, #8
1ebcc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ebd0     14 4E 05 A1 |  if_e	add	fp, #20
1ebd4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ebd8     14 4E 85 A1 |  if_e	sub	fp, #20
1ebdc     16 2B 02 A6 |  if_e	mov	local03, local04
1ebe0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ebe4     28 00 90 5D |  if_ne	jmp	#LR__2430
1ebe8     00 26 06 F6 | 	mov	local01, #0
1ebec     A7 12 02 FB | 	rdlong	arg01, fp
1ebf0     0C 4E 05 F1 | 	add	fp, #12
1ebf4     A7 14 02 FB | 	rdlong	arg02, fp
1ebf8     0C 4E 85 F1 | 	sub	fp, #12
1ebfc     40 7D B0 FD | 	call	#__system___string_cmp
1ec00     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec04     00 26 26 C6 |  if_b	not	local01, #0
1ec08     A7 26 62 FC | 	wrlong	local01, fp
1ec0c     20 04 90 FD | 	jmp	#LR__2443
1ec10                 | LR__2430
1ec10                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1ec10     08 4E 05 F1 | 	add	fp, #8
1ec14     A7 26 02 FB | 	rdlong	local01, fp
1ec18     08 4E 85 F1 | 	sub	fp, #8
1ec1c     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec20     14 4E 05 A1 |  if_e	add	fp, #20
1ec24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec28     14 4E 85 A1 |  if_e	sub	fp, #20
1ec2c     16 2B 02 A6 |  if_e	mov	local03, local04
1ec30     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ec34     2C 00 90 5D |  if_ne	jmp	#LR__2431
1ec38     00 26 06 F6 | 	mov	local01, #0
1ec3c     A7 12 02 FB | 	rdlong	arg01, fp
1ec40     0C 4E 05 F1 | 	add	fp, #12
1ec44     A7 14 02 FB | 	rdlong	arg02, fp
1ec48     0C 4E 85 F1 | 	sub	fp, #12
1ec4c     01 16 06 F6 | 	mov	arg03, #1
1ec50     74 AF B0 FD | 	call	#__system___float_cmp
1ec54     01 FA 55 F2 | 	cmps	result1, #1 wc
1ec58     00 26 26 C6 |  if_b	not	local01, #0
1ec5c     A7 26 62 FC | 	wrlong	local01, fp
1ec60     CC 03 90 FD | 	jmp	#LR__2443
1ec64                 | LR__2431
1ec64                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1ec64     08 4E 05 F1 | 	add	fp, #8
1ec68     A7 26 02 FB | 	rdlong	local01, fp
1ec6c     08 4E 85 F1 | 	sub	fp, #8
1ec70     1E 26 0E F2 | 	cmp	local01, #30 wz
1ec74     14 4E 05 A1 |  if_e	add	fp, #20
1ec78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ec7c     14 4E 85 A1 |  if_e	sub	fp, #20
1ec80     16 2B 02 A6 |  if_e	mov	local03, local04
1ec84     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ec88     48 00 90 5D |  if_ne	jmp	#LR__2432
1ec8c     00 26 06 F6 | 	mov	local01, #0
1ec90     A7 28 02 FB | 	rdlong	local02, fp
1ec94     0C 4E 05 F1 | 	add	fp, #12
1ec98     A7 12 02 FB | 	rdlong	arg01, fp
1ec9c     0C 4E 85 F1 | 	sub	fp, #12
1eca0     09 13 52 F6 | 	abs	arg01, arg01 wc
1eca4     1F 2E C6 C9 |  if_b	decod	local05, #31
1eca8     00 2E 06 36 |  if_ae	mov	local05, #0
1ecac     E0 A6 B0 FD | 	call	#__system___float_fromuns
1ecb0     17 FB 61 F5 | 	xor	result1, local05
1ecb4     FD 14 02 F6 | 	mov	arg02, result1
1ecb8     14 13 02 F6 | 	mov	arg01, local02
1ecbc     01 16 06 F6 | 	mov	arg03, #1
1ecc0     04 AF B0 FD | 	call	#__system___float_cmp
1ecc4     01 FA 55 F2 | 	cmps	result1, #1 wc
1ecc8     00 26 26 C6 |  if_b	not	local01, #0
1eccc     A7 26 62 FC | 	wrlong	local01, fp
1ecd0     5C 03 90 FD | 	jmp	#LR__2443
1ecd4                 | LR__2432
1ecd4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1ecd4     08 4E 05 F1 | 	add	fp, #8
1ecd8     A7 26 02 FB | 	rdlong	local01, fp
1ecdc     08 4E 85 F1 | 	sub	fp, #8
1ece0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ece4     14 4E 05 A1 |  if_e	add	fp, #20
1ece8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ecec     14 4E 85 A1 |  if_e	sub	fp, #20
1ecf0     16 2B 02 A6 |  if_e	mov	local03, local04
1ecf4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ecf8     38 00 90 5D |  if_ne	jmp	#LR__2433
1ecfc     00 26 06 F6 | 	mov	local01, #0
1ed00     A7 28 02 FB | 	rdlong	local02, fp
1ed04     0C 4E 05 F1 | 	add	fp, #12
1ed08     A7 12 02 FB | 	rdlong	arg01, fp
1ed0c     0C 4E 85 F1 | 	sub	fp, #12
1ed10     7C A6 B0 FD | 	call	#__system___float_fromuns
1ed14     FD 14 02 F6 | 	mov	arg02, result1
1ed18     14 13 02 F6 | 	mov	arg01, local02
1ed1c     01 16 06 F6 | 	mov	arg03, #1
1ed20     A4 AE B0 FD | 	call	#__system___float_cmp
1ed24     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed28     00 26 26 C6 |  if_b	not	local01, #0
1ed2c     A7 26 62 FC | 	wrlong	local01, fp
1ed30     FC 02 90 FD | 	jmp	#LR__2443
1ed34                 | LR__2433
1ed34                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1ed34     08 4E 05 F1 | 	add	fp, #8
1ed38     A7 26 02 FB | 	rdlong	local01, fp
1ed3c     08 4E 85 F1 | 	sub	fp, #8
1ed40     1C 26 0E F2 | 	cmp	local01, #28 wz
1ed44     14 4E 05 A1 |  if_e	add	fp, #20
1ed48     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ed4c     14 4E 85 A1 |  if_e	sub	fp, #20
1ed50     16 2B 02 A6 |  if_e	mov	local03, local04
1ed54     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ed58     44 00 90 5D |  if_ne	jmp	#LR__2434
1ed5c     00 26 06 F6 | 	mov	local01, #0
1ed60     A7 12 02 FB | 	rdlong	arg01, fp
1ed64     09 13 52 F6 | 	abs	arg01, arg01 wc
1ed68     1F 2E C6 C9 |  if_b	decod	local05, #31
1ed6c     00 2E 06 36 |  if_ae	mov	local05, #0
1ed70     1C A6 B0 FD | 	call	#__system___float_fromuns
1ed74     17 FB 61 F5 | 	xor	result1, local05
1ed78     FD 12 02 F6 | 	mov	arg01, result1
1ed7c     0C 4E 05 F1 | 	add	fp, #12
1ed80     A7 14 02 FB | 	rdlong	arg02, fp
1ed84     0C 4E 85 F1 | 	sub	fp, #12
1ed88     01 16 06 F6 | 	mov	arg03, #1
1ed8c     38 AE B0 FD | 	call	#__system___float_cmp
1ed90     01 FA 55 F2 | 	cmps	result1, #1 wc
1ed94     00 26 26 C6 |  if_b	not	local01, #0
1ed98     A7 26 62 FC | 	wrlong	local01, fp
1ed9c     90 02 90 FD | 	jmp	#LR__2443
1eda0                 | LR__2434
1eda0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1eda0     08 4E 05 F1 | 	add	fp, #8
1eda4     A7 26 02 FB | 	rdlong	local01, fp
1eda8     08 4E 85 F1 | 	sub	fp, #8
1edac     1C 26 0E F2 | 	cmp	local01, #28 wz
1edb0     14 4E 05 A1 |  if_e	add	fp, #20
1edb4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1edb8     14 4E 85 A1 |  if_e	sub	fp, #20
1edbc     16 2B 02 A6 |  if_e	mov	local03, local04
1edc0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1edc4     24 00 90 5D |  if_ne	jmp	#LR__2435
1edc8     00 26 06 F6 | 	mov	local01, #0
1edcc     A7 28 02 FB | 	rdlong	local02, fp
1edd0     0C 4E 05 F1 | 	add	fp, #12
1edd4     A7 2A 02 FB | 	rdlong	local03, fp
1edd8     0C 4E 85 F1 | 	sub	fp, #12
1eddc     15 29 5A F2 | 	cmps	local02, local03 wcz
1ede0     01 26 66 E6 |  if_be	neg	local01, #1
1ede4     A7 26 62 FC | 	wrlong	local01, fp
1ede8     44 02 90 FD | 	jmp	#LR__2443
1edec                 | LR__2435
1edec                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1edec     08 4E 05 F1 | 	add	fp, #8
1edf0     A7 26 02 FB | 	rdlong	local01, fp
1edf4     08 4E 85 F1 | 	sub	fp, #8
1edf8     1C 26 0E F2 | 	cmp	local01, #28 wz
1edfc     14 4E 05 A1 |  if_e	add	fp, #20
1ee00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee04     14 4E 85 A1 |  if_e	sub	fp, #20
1ee08     16 2B 02 A6 |  if_e	mov	local03, local04
1ee0c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ee10     24 00 90 5D |  if_ne	jmp	#LR__2436
1ee14     00 26 06 F6 | 	mov	local01, #0
1ee18     A7 28 02 FB | 	rdlong	local02, fp
1ee1c     0C 4E 05 F1 | 	add	fp, #12
1ee20     A7 2A 02 FB | 	rdlong	local03, fp
1ee24     0C 4E 85 F1 | 	sub	fp, #12
1ee28     15 29 5A F2 | 	cmps	local02, local03 wcz
1ee2c     01 26 66 E6 |  if_be	neg	local01, #1
1ee30     A7 26 62 FC | 	wrlong	local01, fp
1ee34     F8 01 90 FD | 	jmp	#LR__2443
1ee38                 | LR__2436
1ee38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1ee38     08 4E 05 F1 | 	add	fp, #8
1ee3c     A7 26 02 FB | 	rdlong	local01, fp
1ee40     08 4E 85 F1 | 	sub	fp, #8
1ee44     1D 26 0E F2 | 	cmp	local01, #29 wz
1ee48     14 4E 05 A1 |  if_e	add	fp, #20
1ee4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ee50     14 4E 85 A1 |  if_e	sub	fp, #20
1ee54     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ee58     34 00 90 5D |  if_ne	jmp	#LR__2437
1ee5c     00 26 06 F6 | 	mov	local01, #0
1ee60     A7 12 02 FB | 	rdlong	arg01, fp
1ee64     28 A5 B0 FD | 	call	#__system___float_fromuns
1ee68     FD 12 02 F6 | 	mov	arg01, result1
1ee6c     0C 4E 05 F1 | 	add	fp, #12
1ee70     A7 14 02 FB | 	rdlong	arg02, fp
1ee74     0C 4E 85 F1 | 	sub	fp, #12
1ee78     01 16 06 F6 | 	mov	arg03, #1
1ee7c     48 AD B0 FD | 	call	#__system___float_cmp
1ee80     01 FA 55 F2 | 	cmps	result1, #1 wc
1ee84     00 26 26 C6 |  if_b	not	local01, #0
1ee88     A7 26 62 FC | 	wrlong	local01, fp
1ee8c     A0 01 90 FD | 	jmp	#LR__2443
1ee90                 | LR__2437
1ee90                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1ee90     08 4E 05 F1 | 	add	fp, #8
1ee94     A7 26 02 FB | 	rdlong	local01, fp
1ee98     08 4E 85 F1 | 	sub	fp, #8
1ee9c     1D 26 0E F2 | 	cmp	local01, #29 wz
1eea0     14 4E 05 A1 |  if_e	add	fp, #20
1eea4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eea8     14 4E 85 A1 |  if_e	sub	fp, #20
1eeac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1eeb0     24 00 90 5D |  if_ne	jmp	#LR__2438
1eeb4     00 26 06 F6 | 	mov	local01, #0
1eeb8     A7 28 02 FB | 	rdlong	local02, fp
1eebc     0C 4E 05 F1 | 	add	fp, #12
1eec0     A7 2A 02 FB | 	rdlong	local03, fp
1eec4     0C 4E 85 F1 | 	sub	fp, #12
1eec8     15 29 5A F2 | 	cmps	local02, local03 wcz
1eecc     01 26 66 E6 |  if_be	neg	local01, #1
1eed0     A7 26 62 FC | 	wrlong	local01, fp
1eed4     58 01 90 FD | 	jmp	#LR__2443
1eed8                 | LR__2438
1eed8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1eed8     08 4E 05 F1 | 	add	fp, #8
1eedc     A7 26 02 FB | 	rdlong	local01, fp
1eee0     08 4E 85 F1 | 	sub	fp, #8
1eee4     1D 26 0E F2 | 	cmp	local01, #29 wz
1eee8     14 4E 05 A1 |  if_e	add	fp, #20
1eeec     A7 2A 02 AB |  if_e	rdlong	local03, fp
1eef0     14 4E 85 A1 |  if_e	sub	fp, #20
1eef4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1eef8     24 00 90 5D |  if_ne	jmp	#LR__2439
1eefc     00 26 06 F6 | 	mov	local01, #0
1ef00     A7 28 02 FB | 	rdlong	local02, fp
1ef04     0C 4E 05 F1 | 	add	fp, #12
1ef08     A7 2A 02 FB | 	rdlong	local03, fp
1ef0c     0C 4E 85 F1 | 	sub	fp, #12
1ef10     15 29 1A F2 | 	cmp	local02, local03 wcz
1ef14     01 26 66 E6 |  if_be	neg	local01, #1
1ef18     A7 26 62 FC | 	wrlong	local01, fp
1ef1c     10 01 90 FD | 	jmp	#LR__2443
1ef20                 | LR__2439
1ef20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ef20     08 4E 05 F1 | 	add	fp, #8
1ef24     A7 26 02 FB | 	rdlong	local01, fp
1ef28     08 4E 85 F1 | 	sub	fp, #8
1ef2c     2B 26 0E F2 | 	cmp	local01, #43 wz
1ef30     14 4E 05 A1 |  if_e	add	fp, #20
1ef34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef38     14 4E 85 A1 |  if_e	sub	fp, #20
1ef3c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ef40     30 00 90 5D |  if_ne	jmp	#LR__2440
1ef44     00 26 06 F6 | 	mov	local01, #0
1ef48     A7 12 02 FB | 	rdlong	arg01, fp
1ef4c     B0 E7 BE FD | 	call	#_convertstring
1ef50     FD 12 02 F6 | 	mov	arg01, result1
1ef54     0C 4E 05 F1 | 	add	fp, #12
1ef58     A7 14 02 FB | 	rdlong	arg02, fp
1ef5c     0C 4E 85 F1 | 	sub	fp, #12
1ef60     DC 79 B0 FD | 	call	#__system___string_cmp
1ef64     01 FA 55 F2 | 	cmps	result1, #1 wc
1ef68     00 26 26 C6 |  if_b	not	local01, #0
1ef6c     A7 26 62 FC | 	wrlong	local01, fp
1ef70     BC 00 90 FD | 	jmp	#LR__2443
1ef74                 | LR__2440
1ef74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1ef74     08 4E 05 F1 | 	add	fp, #8
1ef78     A7 26 02 FB | 	rdlong	local01, fp
1ef7c     08 4E 85 F1 | 	sub	fp, #8
1ef80     1F 26 0E F2 | 	cmp	local01, #31 wz
1ef84     14 4E 05 A1 |  if_e	add	fp, #20
1ef88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ef8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ef90     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ef94     34 00 90 5D |  if_ne	jmp	#LR__2441
1ef98     00 26 06 F6 | 	mov	local01, #0
1ef9c     A7 28 02 FB | 	rdlong	local02, fp
1efa0     0C 4E 05 F1 | 	add	fp, #12
1efa4     A7 12 02 FB | 	rdlong	arg01, fp
1efa8     0C 4E 85 F1 | 	sub	fp, #12
1efac     50 E7 BE FD | 	call	#_convertstring
1efb0     FD 14 02 F6 | 	mov	arg02, result1
1efb4     14 13 02 F6 | 	mov	arg01, local02
1efb8     84 79 B0 FD | 	call	#__system___string_cmp
1efbc     01 FA 55 F2 | 	cmps	result1, #1 wc
1efc0     00 26 26 C6 |  if_b	not	local01, #0
1efc4     A7 26 62 FC | 	wrlong	local01, fp
1efc8     64 00 90 FD | 	jmp	#LR__2443
1efcc                 | LR__2441
1efcc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1efcc     08 4E 05 F1 | 	add	fp, #8
1efd0     A7 26 02 FB | 	rdlong	local01, fp
1efd4     08 4E 85 F1 | 	sub	fp, #8
1efd8     2B 26 0E F2 | 	cmp	local01, #43 wz
1efdc     14 4E 05 A1 |  if_e	add	fp, #20
1efe0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1efe4     14 4E 85 A1 |  if_e	sub	fp, #20
1efe8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1efec     3C 00 90 5D |  if_ne	jmp	#LR__2442
1eff0     00 26 06 F6 | 	mov	local01, #0
1eff4     A7 12 02 FB | 	rdlong	arg01, fp
1eff8     04 E7 BE FD | 	call	#_convertstring
1effc     FD 28 02 F6 | 	mov	local02, result1
1f000     0C 4E 05 F1 | 	add	fp, #12
1f004     A7 12 02 FB | 	rdlong	arg01, fp
1f008     0C 4E 85 F1 | 	sub	fp, #12
1f00c     F0 E6 BE FD | 	call	#_convertstring
1f010     FD 14 02 F6 | 	mov	arg02, result1
1f014     14 13 02 F6 | 	mov	arg01, local02
1f018     24 79 B0 FD | 	call	#__system___string_cmp
1f01c     01 FA 55 F2 | 	cmps	result1, #1 wc
1f020     00 26 26 C6 |  if_b	not	local01, #0
1f024     A7 26 62 FC | 	wrlong	local01, fp
1f028     04 00 90 FD | 	jmp	#LR__2443
1f02c                 | LR__2442
1f02c     A7 00 68 FC | 	wrlong	#0, fp
1f030                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f030                 | LR__2443
1f030     08 4E 05 F1 | 	add	fp, #8
1f034     A7 38 68 FC | 	wrlong	#28, fp
1f038     08 4E 85 F1 | 	sub	fp, #8
1f03c     A7 12 02 F6 | 	mov	arg01, fp
1f040     DC E5 BE FD | 	call	#_push
1f044     A7 F0 03 F6 | 	mov	ptra, fp
1f048     B2 00 A0 FD | 	call	#popregs_
1f04c                 | _do_le_ret
1f04c     2D 00 64 FD | 	ret
1f050                 | 
1f050                 | ' 
1f050                 | ' '--------------------------------- less than (<)
1f050                 | ' 
1f050                 | ' sub do_lt
1f050                 | _do_lt
1f050     05 4A 05 F6 | 	mov	COUNT_, #5
1f054     A8 00 A0 FD | 	call	#pushregs_
1f058     18 F0 07 F1 | 	add	ptra, #24
1f05c     28 E5 BE FD | 	call	#_pop
1f060     FD 26 02 F6 | 	mov	local01, result1
1f064     FE 28 02 F6 | 	mov	local02, result2
1f068     FF 2A 02 F6 | 	mov	local03, result3
1f06c     0C 4E 05 F1 | 	add	fp, #12
1f070     A7 26 62 FC | 	wrlong	local01, fp
1f074     04 4E 05 F1 | 	add	fp, #4
1f078     A7 28 62 FC | 	wrlong	local02, fp
1f07c     04 4E 05 F1 | 	add	fp, #4
1f080     A7 2A 62 FC | 	wrlong	local03, fp
1f084     14 4E 85 F1 | 	sub	fp, #20
1f088     FC E4 BE FD | 	call	#_pop
1f08c     FF 2A 02 F6 | 	mov	local03, result3
1f090     A7 FA 61 FC | 	wrlong	result1, fp
1f094     04 4E 05 F1 | 	add	fp, #4
1f098     A7 FC 61 FC | 	wrlong	result2, fp
1f09c     04 4E 05 F1 | 	add	fp, #4
1f0a0     A7 2A 62 FC | 	wrlong	local03, fp
1f0a4                 | ' 
1f0a4                 | ' t2=pop()
1f0a4                 | ' t1=pop()
1f0a4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1f0a4     08 4E 85 F1 | 	sub	fp, #8
1f0a8     1F 2A 0E F2 | 	cmp	local03, #31 wz
1f0ac     14 4E 05 A1 |  if_e	add	fp, #20
1f0b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f0b4     14 4E 85 A1 |  if_e	sub	fp, #20
1f0b8     16 2B 02 A6 |  if_e	mov	local03, local04
1f0bc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f0c0     28 00 90 5D |  if_ne	jmp	#LR__2450
1f0c4     00 26 06 F6 | 	mov	local01, #0
1f0c8     A7 12 02 FB | 	rdlong	arg01, fp
1f0cc     0C 4E 05 F1 | 	add	fp, #12
1f0d0     A7 14 02 FB | 	rdlong	arg02, fp
1f0d4     0C 4E 85 F1 | 	sub	fp, #12
1f0d8     64 78 B0 FD | 	call	#__system___string_cmp
1f0dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1f0e0     00 26 26 C6 |  if_b	not	local01, #0
1f0e4     A7 26 62 FC | 	wrlong	local01, fp
1f0e8     10 04 90 FD | 	jmp	#LR__2463
1f0ec                 | LR__2450
1f0ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1f0ec     08 4E 05 F1 | 	add	fp, #8
1f0f0     A7 26 02 FB | 	rdlong	local01, fp
1f0f4     08 4E 85 F1 | 	sub	fp, #8
1f0f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1f0fc     14 4E 05 A1 |  if_e	add	fp, #20
1f100     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f104     14 4E 85 A1 |  if_e	sub	fp, #20
1f108     16 2B 02 A6 |  if_e	mov	local03, local04
1f10c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f110     2C 00 90 5D |  if_ne	jmp	#LR__2451
1f114     00 26 06 F6 | 	mov	local01, #0
1f118     A7 12 02 FB | 	rdlong	arg01, fp
1f11c     0C 4E 05 F1 | 	add	fp, #12
1f120     A7 14 02 FB | 	rdlong	arg02, fp
1f124     0C 4E 85 F1 | 	sub	fp, #12
1f128     01 16 06 F6 | 	mov	arg03, #1
1f12c     98 AA B0 FD | 	call	#__system___float_cmp
1f130     00 FA 55 F2 | 	cmps	result1, #0 wc
1f134     00 26 26 C6 |  if_b	not	local01, #0
1f138     A7 26 62 FC | 	wrlong	local01, fp
1f13c     BC 03 90 FD | 	jmp	#LR__2463
1f140                 | LR__2451
1f140                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1f140     08 4E 05 F1 | 	add	fp, #8
1f144     A7 26 02 FB | 	rdlong	local01, fp
1f148     08 4E 85 F1 | 	sub	fp, #8
1f14c     1E 26 0E F2 | 	cmp	local01, #30 wz
1f150     14 4E 05 A1 |  if_e	add	fp, #20
1f154     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f158     14 4E 85 A1 |  if_e	sub	fp, #20
1f15c     16 2B 02 A6 |  if_e	mov	local03, local04
1f160     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f164     48 00 90 5D |  if_ne	jmp	#LR__2452
1f168     00 26 06 F6 | 	mov	local01, #0
1f16c     A7 28 02 FB | 	rdlong	local02, fp
1f170     0C 4E 05 F1 | 	add	fp, #12
1f174     A7 12 02 FB | 	rdlong	arg01, fp
1f178     0C 4E 85 F1 | 	sub	fp, #12
1f17c     09 13 52 F6 | 	abs	arg01, arg01 wc
1f180     1F 2E C6 C9 |  if_b	decod	local05, #31
1f184     00 2E 06 36 |  if_ae	mov	local05, #0
1f188     04 A2 B0 FD | 	call	#__system___float_fromuns
1f18c     17 FB 61 F5 | 	xor	result1, local05
1f190     FD 14 02 F6 | 	mov	arg02, result1
1f194     14 13 02 F6 | 	mov	arg01, local02
1f198     01 16 06 F6 | 	mov	arg03, #1
1f19c     28 AA B0 FD | 	call	#__system___float_cmp
1f1a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1f1a4     00 26 26 C6 |  if_b	not	local01, #0
1f1a8     A7 26 62 FC | 	wrlong	local01, fp
1f1ac     4C 03 90 FD | 	jmp	#LR__2463
1f1b0                 | LR__2452
1f1b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1f1b0     08 4E 05 F1 | 	add	fp, #8
1f1b4     A7 26 02 FB | 	rdlong	local01, fp
1f1b8     08 4E 85 F1 | 	sub	fp, #8
1f1bc     1E 26 0E F2 | 	cmp	local01, #30 wz
1f1c0     14 4E 05 A1 |  if_e	add	fp, #20
1f1c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f1c8     14 4E 85 A1 |  if_e	sub	fp, #20
1f1cc     16 2B 02 A6 |  if_e	mov	local03, local04
1f1d0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f1d4     38 00 90 5D |  if_ne	jmp	#LR__2453
1f1d8     00 26 06 F6 | 	mov	local01, #0
1f1dc     A7 28 02 FB | 	rdlong	local02, fp
1f1e0     0C 4E 05 F1 | 	add	fp, #12
1f1e4     A7 12 02 FB | 	rdlong	arg01, fp
1f1e8     0C 4E 85 F1 | 	sub	fp, #12
1f1ec     A0 A1 B0 FD | 	call	#__system___float_fromuns
1f1f0     FD 14 02 F6 | 	mov	arg02, result1
1f1f4     14 13 02 F6 | 	mov	arg01, local02
1f1f8     01 16 06 F6 | 	mov	arg03, #1
1f1fc     C8 A9 B0 FD | 	call	#__system___float_cmp
1f200     00 FA 55 F2 | 	cmps	result1, #0 wc
1f204     00 26 26 C6 |  if_b	not	local01, #0
1f208     A7 26 62 FC | 	wrlong	local01, fp
1f20c     EC 02 90 FD | 	jmp	#LR__2463
1f210                 | LR__2453
1f210                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1f210     08 4E 05 F1 | 	add	fp, #8
1f214     A7 26 02 FB | 	rdlong	local01, fp
1f218     08 4E 85 F1 | 	sub	fp, #8
1f21c     1C 26 0E F2 | 	cmp	local01, #28 wz
1f220     14 4E 05 A1 |  if_e	add	fp, #20
1f224     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f228     14 4E 85 A1 |  if_e	sub	fp, #20
1f22c     16 2B 02 A6 |  if_e	mov	local03, local04
1f230     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f234     44 00 90 5D |  if_ne	jmp	#LR__2454
1f238     00 26 06 F6 | 	mov	local01, #0
1f23c     A7 12 02 FB | 	rdlong	arg01, fp
1f240     09 13 52 F6 | 	abs	arg01, arg01 wc
1f244     1F 2E C6 C9 |  if_b	decod	local05, #31
1f248     00 2E 06 36 |  if_ae	mov	local05, #0
1f24c     40 A1 B0 FD | 	call	#__system___float_fromuns
1f250     17 FB 61 F5 | 	xor	result1, local05
1f254     FD 12 02 F6 | 	mov	arg01, result1
1f258     0C 4E 05 F1 | 	add	fp, #12
1f25c     A7 14 02 FB | 	rdlong	arg02, fp
1f260     0C 4E 85 F1 | 	sub	fp, #12
1f264     01 16 06 F6 | 	mov	arg03, #1
1f268     5C A9 B0 FD | 	call	#__system___float_cmp
1f26c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f270     00 26 26 C6 |  if_b	not	local01, #0
1f274     A7 26 62 FC | 	wrlong	local01, fp
1f278     80 02 90 FD | 	jmp	#LR__2463
1f27c                 | LR__2454
1f27c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1f27c     08 4E 05 F1 | 	add	fp, #8
1f280     A7 26 02 FB | 	rdlong	local01, fp
1f284     08 4E 85 F1 | 	sub	fp, #8
1f288     1C 26 0E F2 | 	cmp	local01, #28 wz
1f28c     14 4E 05 A1 |  if_e	add	fp, #20
1f290     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f294     14 4E 85 A1 |  if_e	sub	fp, #20
1f298     16 2B 02 A6 |  if_e	mov	local03, local04
1f29c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f2a0     20 00 90 5D |  if_ne	jmp	#LR__2455
1f2a4     A7 28 02 FB | 	rdlong	local02, fp
1f2a8     0C 4E 05 F1 | 	add	fp, #12
1f2ac     A7 2A 02 FB | 	rdlong	local03, fp
1f2b0     0C 4E 85 F1 | 	sub	fp, #12
1f2b4     15 29 52 F2 | 	cmps	local02, local03 wc
1f2b8     13 27 A2 F1 | 	subx	local01, local01
1f2bc     A7 26 62 FC | 	wrlong	local01, fp
1f2c0     38 02 90 FD | 	jmp	#LR__2463
1f2c4                 | LR__2455
1f2c4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1f2c4     08 4E 05 F1 | 	add	fp, #8
1f2c8     A7 26 02 FB | 	rdlong	local01, fp
1f2cc     08 4E 85 F1 | 	sub	fp, #8
1f2d0     1C 26 0E F2 | 	cmp	local01, #28 wz
1f2d4     14 4E 05 A1 |  if_e	add	fp, #20
1f2d8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f2dc     14 4E 85 A1 |  if_e	sub	fp, #20
1f2e0     16 2B 02 A6 |  if_e	mov	local03, local04
1f2e4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f2e8     20 00 90 5D |  if_ne	jmp	#LR__2456
1f2ec     A7 28 02 FB | 	rdlong	local02, fp
1f2f0     0C 4E 05 F1 | 	add	fp, #12
1f2f4     A7 2A 02 FB | 	rdlong	local03, fp
1f2f8     0C 4E 85 F1 | 	sub	fp, #12
1f2fc     15 29 52 F2 | 	cmps	local02, local03 wc
1f300     13 27 A2 F1 | 	subx	local01, local01
1f304     A7 26 62 FC | 	wrlong	local01, fp
1f308     F0 01 90 FD | 	jmp	#LR__2463
1f30c                 | LR__2456
1f30c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1f30c     08 4E 05 F1 | 	add	fp, #8
1f310     A7 26 02 FB | 	rdlong	local01, fp
1f314     08 4E 85 F1 | 	sub	fp, #8
1f318     1D 26 0E F2 | 	cmp	local01, #29 wz
1f31c     14 4E 05 A1 |  if_e	add	fp, #20
1f320     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f324     14 4E 85 A1 |  if_e	sub	fp, #20
1f328     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1f32c     34 00 90 5D |  if_ne	jmp	#LR__2457
1f330     00 26 06 F6 | 	mov	local01, #0
1f334     A7 12 02 FB | 	rdlong	arg01, fp
1f338     54 A0 B0 FD | 	call	#__system___float_fromuns
1f33c     FD 12 02 F6 | 	mov	arg01, result1
1f340     0C 4E 05 F1 | 	add	fp, #12
1f344     A7 14 02 FB | 	rdlong	arg02, fp
1f348     0C 4E 85 F1 | 	sub	fp, #12
1f34c     01 16 06 F6 | 	mov	arg03, #1
1f350     74 A8 B0 FD | 	call	#__system___float_cmp
1f354     00 FA 55 F2 | 	cmps	result1, #0 wc
1f358     00 26 26 C6 |  if_b	not	local01, #0
1f35c     A7 26 62 FC | 	wrlong	local01, fp
1f360     98 01 90 FD | 	jmp	#LR__2463
1f364                 | LR__2457
1f364                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1f364     08 4E 05 F1 | 	add	fp, #8
1f368     A7 26 02 FB | 	rdlong	local01, fp
1f36c     08 4E 85 F1 | 	sub	fp, #8
1f370     1D 26 0E F2 | 	cmp	local01, #29 wz
1f374     14 4E 05 A1 |  if_e	add	fp, #20
1f378     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f37c     14 4E 85 A1 |  if_e	sub	fp, #20
1f380     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f384     20 00 90 5D |  if_ne	jmp	#LR__2458
1f388     A7 28 02 FB | 	rdlong	local02, fp
1f38c     0C 4E 05 F1 | 	add	fp, #12
1f390     A7 2A 02 FB | 	rdlong	local03, fp
1f394     0C 4E 85 F1 | 	sub	fp, #12
1f398     15 29 52 F2 | 	cmps	local02, local03 wc
1f39c     13 27 A2 F1 | 	subx	local01, local01
1f3a0     A7 26 62 FC | 	wrlong	local01, fp
1f3a4     54 01 90 FD | 	jmp	#LR__2463
1f3a8                 | LR__2458
1f3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1f3a8     08 4E 05 F1 | 	add	fp, #8
1f3ac     A7 26 02 FB | 	rdlong	local01, fp
1f3b0     08 4E 85 F1 | 	sub	fp, #8
1f3b4     1D 26 0E F2 | 	cmp	local01, #29 wz
1f3b8     14 4E 05 A1 |  if_e	add	fp, #20
1f3bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1f3c4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f3c8     20 00 90 5D |  if_ne	jmp	#LR__2459
1f3cc     A7 28 02 FB | 	rdlong	local02, fp
1f3d0     0C 4E 05 F1 | 	add	fp, #12
1f3d4     A7 2A 02 FB | 	rdlong	local03, fp
1f3d8     0C 4E 85 F1 | 	sub	fp, #12
1f3dc     15 29 12 F2 | 	cmp	local02, local03 wc
1f3e0     13 27 A2 F1 | 	subx	local01, local01
1f3e4     A7 26 62 FC | 	wrlong	local01, fp
1f3e8     10 01 90 FD | 	jmp	#LR__2463
1f3ec                 | LR__2459
1f3ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1f3ec     08 4E 05 F1 | 	add	fp, #8
1f3f0     A7 26 02 FB | 	rdlong	local01, fp
1f3f4     08 4E 85 F1 | 	sub	fp, #8
1f3f8     2B 26 0E F2 | 	cmp	local01, #43 wz
1f3fc     14 4E 05 A1 |  if_e	add	fp, #20
1f400     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f404     14 4E 85 A1 |  if_e	sub	fp, #20
1f408     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1f40c     30 00 90 5D |  if_ne	jmp	#LR__2460
1f410     00 26 06 F6 | 	mov	local01, #0
1f414     A7 12 02 FB | 	rdlong	arg01, fp
1f418     E4 E2 BE FD | 	call	#_convertstring
1f41c     FD 12 02 F6 | 	mov	arg01, result1
1f420     0C 4E 05 F1 | 	add	fp, #12
1f424     A7 14 02 FB | 	rdlong	arg02, fp
1f428     0C 4E 85 F1 | 	sub	fp, #12
1f42c     10 75 B0 FD | 	call	#__system___string_cmp
1f430     00 FA 55 F2 | 	cmps	result1, #0 wc
1f434     00 26 26 C6 |  if_b	not	local01, #0
1f438     A7 26 62 FC | 	wrlong	local01, fp
1f43c     BC 00 90 FD | 	jmp	#LR__2463
1f440                 | LR__2460
1f440                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1f440     08 4E 05 F1 | 	add	fp, #8
1f444     A7 26 02 FB | 	rdlong	local01, fp
1f448     08 4E 85 F1 | 	sub	fp, #8
1f44c     1F 26 0E F2 | 	cmp	local01, #31 wz
1f450     14 4E 05 A1 |  if_e	add	fp, #20
1f454     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f458     14 4E 85 A1 |  if_e	sub	fp, #20
1f45c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f460     34 00 90 5D |  if_ne	jmp	#LR__2461
1f464     00 26 06 F6 | 	mov	local01, #0
1f468     A7 28 02 FB | 	rdlong	local02, fp
1f46c     0C 4E 05 F1 | 	add	fp, #12
1f470     A7 12 02 FB | 	rdlong	arg01, fp
1f474     0C 4E 85 F1 | 	sub	fp, #12
1f478     84 E2 BE FD | 	call	#_convertstring
1f47c     FD 14 02 F6 | 	mov	arg02, result1
1f480     14 13 02 F6 | 	mov	arg01, local02
1f484     B8 74 B0 FD | 	call	#__system___string_cmp
1f488     00 FA 55 F2 | 	cmps	result1, #0 wc
1f48c     00 26 26 C6 |  if_b	not	local01, #0
1f490     A7 26 62 FC | 	wrlong	local01, fp
1f494     64 00 90 FD | 	jmp	#LR__2463
1f498                 | LR__2461
1f498                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1f498     08 4E 05 F1 | 	add	fp, #8
1f49c     A7 26 02 FB | 	rdlong	local01, fp
1f4a0     08 4E 85 F1 | 	sub	fp, #8
1f4a4     2B 26 0E F2 | 	cmp	local01, #43 wz
1f4a8     14 4E 05 A1 |  if_e	add	fp, #20
1f4ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f4b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f4b4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1f4b8     3C 00 90 5D |  if_ne	jmp	#LR__2462
1f4bc     00 26 06 F6 | 	mov	local01, #0
1f4c0     A7 12 02 FB | 	rdlong	arg01, fp
1f4c4     38 E2 BE FD | 	call	#_convertstring
1f4c8     FD 28 02 F6 | 	mov	local02, result1
1f4cc     0C 4E 05 F1 | 	add	fp, #12
1f4d0     A7 12 02 FB | 	rdlong	arg01, fp
1f4d4     0C 4E 85 F1 | 	sub	fp, #12
1f4d8     24 E2 BE FD | 	call	#_convertstring
1f4dc     FD 14 02 F6 | 	mov	arg02, result1
1f4e0     14 13 02 F6 | 	mov	arg01, local02
1f4e4     58 74 B0 FD | 	call	#__system___string_cmp
1f4e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1f4ec     00 26 26 C6 |  if_b	not	local01, #0
1f4f0     A7 26 62 FC | 	wrlong	local01, fp
1f4f4     04 00 90 FD | 	jmp	#LR__2463
1f4f8                 | LR__2462
1f4f8     A7 00 68 FC | 	wrlong	#0, fp
1f4fc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1f4fc                 | LR__2463
1f4fc     08 4E 05 F1 | 	add	fp, #8
1f500     A7 38 68 FC | 	wrlong	#28, fp
1f504     08 4E 85 F1 | 	sub	fp, #8
1f508     A7 12 02 F6 | 	mov	arg01, fp
1f50c     10 E1 BE FD | 	call	#_push
1f510     A7 F0 03 F6 | 	mov	ptra, fp
1f514     B2 00 A0 FD | 	call	#popregs_
1f518                 | _do_lt_ret
1f518     2D 00 64 FD | 	ret
1f51c                 | 
1f51c                 | ' 
1f51c                 | ' '--------------------------------- minus (-)
1f51c                 | ' 
1f51c                 | ' sub do_minus
1f51c                 | _do_minus
1f51c     05 4A 05 F6 | 	mov	COUNT_, #5
1f520     A8 00 A0 FD | 	call	#pushregs_
1f524     18 F0 07 F1 | 	add	ptra, #24
1f528     5C E0 BE FD | 	call	#_pop
1f52c     FD 26 02 F6 | 	mov	local01, result1
1f530     FE 28 02 F6 | 	mov	local02, result2
1f534     FF 2A 02 F6 | 	mov	local03, result3
1f538     0C 4E 05 F1 | 	add	fp, #12
1f53c     A7 26 62 FC | 	wrlong	local01, fp
1f540     04 4E 05 F1 | 	add	fp, #4
1f544     A7 28 62 FC | 	wrlong	local02, fp
1f548     04 4E 05 F1 | 	add	fp, #4
1f54c     A7 2A 62 FC | 	wrlong	local03, fp
1f550     14 4E 85 F1 | 	sub	fp, #20
1f554     30 E0 BE FD | 	call	#_pop
1f558     FF 2A 02 F6 | 	mov	local03, result3
1f55c     A7 FA 61 FC | 	wrlong	result1, fp
1f560     04 4E 05 F1 | 	add	fp, #4
1f564     A7 FC 61 FC | 	wrlong	result2, fp
1f568     04 4E 05 F1 | 	add	fp, #4
1f56c     A7 2A 62 FC | 	wrlong	local03, fp
1f570                 | ' 
1f570                 | ' t2=pop()
1f570                 | ' t1=pop()
1f570                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1f570     08 4E 85 F1 | 	sub	fp, #8
1f574     1D 2A 0E F2 | 	cmp	local03, #29 wz
1f578     14 4E 05 A1 |  if_e	add	fp, #20
1f57c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f580     14 4E 85 A1 |  if_e	sub	fp, #20
1f584     16 2B 02 A6 |  if_e	mov	local03, local04
1f588     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f58c     5C 00 90 5D |  if_ne	jmp	#LR__2471
1f590                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1f590     0C 4E 05 F1 | 	add	fp, #12
1f594     A7 26 02 FB | 	rdlong	local01, fp
1f598     0C 4E 85 F1 | 	sub	fp, #12
1f59c     A7 2A 02 FB | 	rdlong	local03, fp
1f5a0     15 27 12 F2 | 	cmp	local01, local03 wc
1f5a4     1C 00 90 3D |  if_ae	jmp	#LR__2470
1f5a8     A7 26 02 FB | 	rdlong	local01, fp
1f5ac     0C 4E 05 F1 | 	add	fp, #12
1f5b0     A7 28 02 FB | 	rdlong	local02, fp
1f5b4     0C 4E 85 F1 | 	sub	fp, #12
1f5b8     14 27 82 F1 | 	sub	local01, local02
1f5bc     A7 26 62 FC | 	wrlong	local01, fp
1f5c0     F4 02 90 FD | 	jmp	#LR__2480
1f5c4                 | LR__2470
1f5c4     A7 26 02 FB | 	rdlong	local01, fp
1f5c8     0C 4E 05 F1 | 	add	fp, #12
1f5cc     A7 28 02 FB | 	rdlong	local02, fp
1f5d0     0C 4E 85 F1 | 	sub	fp, #12
1f5d4     14 27 82 F1 | 	sub	local01, local02
1f5d8     A7 26 62 FC | 	wrlong	local01, fp
1f5dc     08 4E 05 F1 | 	add	fp, #8
1f5e0     A7 38 68 FC | 	wrlong	#28, fp
1f5e4     08 4E 85 F1 | 	sub	fp, #8
1f5e8     CC 02 90 FD | 	jmp	#LR__2480
1f5ec                 | LR__2471
1f5ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1f5ec     08 4E 05 F1 | 	add	fp, #8
1f5f0     A7 26 02 FB | 	rdlong	local01, fp
1f5f4     08 4E 85 F1 | 	sub	fp, #8
1f5f8     1D 26 0E F2 | 	cmp	local01, #29 wz
1f5fc     14 4E 05 A1 |  if_e	add	fp, #20
1f600     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f604     14 4E 85 A1 |  if_e	sub	fp, #20
1f608     16 2B 02 A6 |  if_e	mov	local03, local04
1f60c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f610     28 00 90 5D |  if_ne	jmp	#LR__2472
1f614     A7 26 02 FB | 	rdlong	local01, fp
1f618     0C 4E 05 F1 | 	add	fp, #12
1f61c     A7 28 02 FB | 	rdlong	local02, fp
1f620     0C 4E 85 F1 | 	sub	fp, #12
1f624     14 27 82 F1 | 	sub	local01, local02
1f628     A7 26 62 FC | 	wrlong	local01, fp
1f62c     08 4E 05 F1 | 	add	fp, #8
1f630     A7 38 68 FC | 	wrlong	#28, fp
1f634     08 4E 85 F1 | 	sub	fp, #8
1f638     7C 02 90 FD | 	jmp	#LR__2480
1f63c                 | LR__2472
1f63c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f63c     08 4E 05 F1 | 	add	fp, #8
1f640     A7 26 02 FB | 	rdlong	local01, fp
1f644     08 4E 85 F1 | 	sub	fp, #8
1f648     1D 26 0E F2 | 	cmp	local01, #29 wz
1f64c     14 4E 05 A1 |  if_e	add	fp, #20
1f650     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f654     14 4E 85 A1 |  if_e	sub	fp, #20
1f658     16 2B 02 A6 |  if_e	mov	local03, local04
1f65c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f660     34 00 90 5D |  if_ne	jmp	#LR__2473
1f664     A7 12 02 FB | 	rdlong	arg01, fp
1f668     24 9D B0 FD | 	call	#__system___float_fromuns
1f66c     FD 12 02 F6 | 	mov	arg01, result1
1f670     0C 4E 05 F1 | 	add	fp, #12
1f674     A7 14 02 FB | 	rdlong	arg02, fp
1f678     0C 4E 85 F1 | 	sub	fp, #12
1f67c     1F 14 E6 F4 | 	bitnot	arg02, #31
1f680     40 9D B0 FD | 	call	#__system___float_add
1f684     A7 FA 61 FC | 	wrlong	result1, fp
1f688     08 4E 05 F1 | 	add	fp, #8
1f68c     A7 3C 68 FC | 	wrlong	#30, fp
1f690     08 4E 85 F1 | 	sub	fp, #8
1f694     20 02 90 FD | 	jmp	#LR__2480
1f698                 | LR__2473
1f698                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1f698     08 4E 05 F1 | 	add	fp, #8
1f69c     A7 26 02 FB | 	rdlong	local01, fp
1f6a0     08 4E 85 F1 | 	sub	fp, #8
1f6a4     1C 26 0E F2 | 	cmp	local01, #28 wz
1f6a8     14 4E 05 A1 |  if_e	add	fp, #20
1f6ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1f6b4     16 2B 02 A6 |  if_e	mov	local03, local04
1f6b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f6bc     1C 00 90 5D |  if_ne	jmp	#LR__2474
1f6c0     A7 26 02 FB | 	rdlong	local01, fp
1f6c4     0C 4E 05 F1 | 	add	fp, #12
1f6c8     A7 28 02 FB | 	rdlong	local02, fp
1f6cc     0C 4E 85 F1 | 	sub	fp, #12
1f6d0     14 27 82 F1 | 	sub	local01, local02
1f6d4     A7 26 62 FC | 	wrlong	local01, fp
1f6d8     DC 01 90 FD | 	jmp	#LR__2480
1f6dc                 | LR__2474
1f6dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1f6dc     08 4E 05 F1 | 	add	fp, #8
1f6e0     A7 26 02 FB | 	rdlong	local01, fp
1f6e4     08 4E 85 F1 | 	sub	fp, #8
1f6e8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f6ec     14 4E 05 A1 |  if_e	add	fp, #20
1f6f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1f6f4     14 4E 85 A1 |  if_e	sub	fp, #20
1f6f8     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1f6fc     1C 00 90 5D |  if_ne	jmp	#LR__2475
1f700     A7 26 02 FB | 	rdlong	local01, fp
1f704     0C 4E 05 F1 | 	add	fp, #12
1f708     A7 28 02 FB | 	rdlong	local02, fp
1f70c     0C 4E 85 F1 | 	sub	fp, #12
1f710     14 27 82 F1 | 	sub	local01, local02
1f714     A7 26 62 FC | 	wrlong	local01, fp
1f718     9C 01 90 FD | 	jmp	#LR__2480
1f71c                 | LR__2475
1f71c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1f71c     08 4E 05 F1 | 	add	fp, #8
1f720     A7 26 02 FB | 	rdlong	local01, fp
1f724     08 4E 85 F1 | 	sub	fp, #8
1f728     1C 26 0E F2 | 	cmp	local01, #28 wz
1f72c     14 4E 05 A1 |  if_e	add	fp, #20
1f730     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f734     14 4E 85 A1 |  if_e	sub	fp, #20
1f738     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f73c     44 00 90 5D |  if_ne	jmp	#LR__2476
1f740     A7 12 02 FB | 	rdlong	arg01, fp
1f744     09 13 52 F6 | 	abs	arg01, arg01 wc
1f748     1F 2E C6 C9 |  if_b	decod	local05, #31
1f74c     00 2E 06 36 |  if_ae	mov	local05, #0
1f750     3C 9C B0 FD | 	call	#__system___float_fromuns
1f754     17 FB 61 F5 | 	xor	result1, local05
1f758     FD 12 02 F6 | 	mov	arg01, result1
1f75c     0C 4E 05 F1 | 	add	fp, #12
1f760     A7 14 02 FB | 	rdlong	arg02, fp
1f764     0C 4E 85 F1 | 	sub	fp, #12
1f768     1F 14 E6 F4 | 	bitnot	arg02, #31
1f76c     54 9C B0 FD | 	call	#__system___float_add
1f770     A7 FA 61 FC | 	wrlong	result1, fp
1f774     08 4E 05 F1 | 	add	fp, #8
1f778     A7 3C 68 FC | 	wrlong	#30, fp
1f77c     08 4E 85 F1 | 	sub	fp, #8
1f780     34 01 90 FD | 	jmp	#LR__2480
1f784                 | LR__2476
1f784                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1f784     08 4E 05 F1 | 	add	fp, #8
1f788     A7 26 02 FB | 	rdlong	local01, fp
1f78c     08 4E 85 F1 | 	sub	fp, #8
1f790     1E 26 0E F2 | 	cmp	local01, #30 wz
1f794     14 4E 05 A1 |  if_e	add	fp, #20
1f798     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f79c     14 4E 85 A1 |  if_e	sub	fp, #20
1f7a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1f7a4     2C 00 90 5D |  if_ne	jmp	#LR__2477
1f7a8     A7 26 02 FB | 	rdlong	local01, fp
1f7ac     0C 4E 05 F1 | 	add	fp, #12
1f7b0     A7 12 02 FB | 	rdlong	arg01, fp
1f7b4     0C 4E 85 F1 | 	sub	fp, #12
1f7b8     D4 9B B0 FD | 	call	#__system___float_fromuns
1f7bc     FD 14 02 F6 | 	mov	arg02, result1
1f7c0     13 13 02 F6 | 	mov	arg01, local01
1f7c4     1F 14 E6 F4 | 	bitnot	arg02, #31
1f7c8     F8 9B B0 FD | 	call	#__system___float_add
1f7cc     A7 FA 61 FC | 	wrlong	result1, fp
1f7d0     E4 00 90 FD | 	jmp	#LR__2480
1f7d4                 | LR__2477
1f7d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1f7d4     08 4E 05 F1 | 	add	fp, #8
1f7d8     A7 26 02 FB | 	rdlong	local01, fp
1f7dc     08 4E 85 F1 | 	sub	fp, #8
1f7e0     1E 26 0E F2 | 	cmp	local01, #30 wz
1f7e4     14 4E 05 A1 |  if_e	add	fp, #20
1f7e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f7ec     14 4E 85 A1 |  if_e	sub	fp, #20
1f7f0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1f7f4     3C 00 90 5D |  if_ne	jmp	#LR__2478
1f7f8     A7 26 02 FB | 	rdlong	local01, fp
1f7fc     0C 4E 05 F1 | 	add	fp, #12
1f800     A7 12 02 FB | 	rdlong	arg01, fp
1f804     0C 4E 85 F1 | 	sub	fp, #12
1f808     09 13 52 F6 | 	abs	arg01, arg01 wc
1f80c     1F 2E C6 C9 |  if_b	decod	local05, #31
1f810     00 2E 06 36 |  if_ae	mov	local05, #0
1f814     78 9B B0 FD | 	call	#__system___float_fromuns
1f818     17 FB 61 F5 | 	xor	result1, local05
1f81c     FD 14 02 F6 | 	mov	arg02, result1
1f820     13 13 02 F6 | 	mov	arg01, local01
1f824     1F 14 E6 F4 | 	bitnot	arg02, #31
1f828     98 9B B0 FD | 	call	#__system___float_add
1f82c     A7 FA 61 FC | 	wrlong	result1, fp
1f830     84 00 90 FD | 	jmp	#LR__2480
1f834                 | LR__2478
1f834                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1f834     08 4E 05 F1 | 	add	fp, #8
1f838     A7 26 02 FB | 	rdlong	local01, fp
1f83c     08 4E 85 F1 | 	sub	fp, #8
1f840     1E 26 0E F2 | 	cmp	local01, #30 wz
1f844     14 4E 05 A1 |  if_e	add	fp, #20
1f848     A7 2A 02 AB |  if_e	rdlong	local03, fp
1f84c     14 4E 85 A1 |  if_e	sub	fp, #20
1f850     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1f854     20 00 90 5D |  if_ne	jmp	#LR__2479
1f858     A7 12 02 FB | 	rdlong	arg01, fp
1f85c     0C 4E 05 F1 | 	add	fp, #12
1f860     A7 14 02 FB | 	rdlong	arg02, fp
1f864     0C 4E 85 F1 | 	sub	fp, #12
1f868     1F 14 E6 F4 | 	bitnot	arg02, #31
1f86c     54 9B B0 FD | 	call	#__system___float_add
1f870     A7 FA 61 FC | 	wrlong	result1, fp
1f874     40 00 90 FD | 	jmp	#LR__2480
1f878                 | LR__2479
1f878                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1f878     08 4E 05 F1 | 	add	fp, #8
1f87c     A7 26 02 FB | 	rdlong	local01, fp
1f880     08 4E 85 F1 | 	sub	fp, #8
1f884     1F 26 0E F2 | 	cmp	local01, #31 wz
1f888     14 4E 05 51 |  if_ne	add	fp, #20
1f88c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1f890     14 4E 85 51 |  if_ne	sub	fp, #20
1f894     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1f898     A7 06 68 AC |  if_e	wrlong	#3, fp
1f89c     08 4E 05 A1 |  if_e	add	fp, #8
1f8a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f8a4     08 4E 85 A1 |  if_e	sub	fp, #8
1f8a8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1f8ac     08 4E 05 51 |  if_ne	add	fp, #8
1f8b0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f8b4     08 4E 85 51 |  if_ne	sub	fp, #8
1f8b8                 | LR__2480
1f8b8     A7 12 02 F6 | 	mov	arg01, fp
1f8bc     60 DD BE FD | 	call	#_push
1f8c0     A7 F0 03 F6 | 	mov	ptra, fp
1f8c4     B2 00 A0 FD | 	call	#popregs_
1f8c8                 | _do_minus_ret
1f8c8     2D 00 64 FD | 	ret
1f8cc                 | 
1f8cc                 | ' 
1f8cc                 | ' '--------------------------------- negative (-), one argument negative
1f8cc                 | ' 
1f8cc                 | ' sub do_negative
1f8cc                 | _do_negative
1f8cc     02 4A 05 F6 | 	mov	COUNT_, #2
1f8d0     A8 00 A0 FD | 	call	#pushregs_
1f8d4     0C F0 07 F1 | 	add	ptra, #12
1f8d8     AC DC BE FD | 	call	#_pop
1f8dc     FF 26 02 F6 | 	mov	local01, result3
1f8e0     A7 FA 61 FC | 	wrlong	result1, fp
1f8e4     04 4E 05 F1 | 	add	fp, #4
1f8e8     A7 FC 61 FC | 	wrlong	result2, fp
1f8ec     04 4E 05 F1 | 	add	fp, #4
1f8f0     A7 26 62 FC | 	wrlong	local01, fp
1f8f4                 | ' 
1f8f4                 | ' t1=pop()
1f8f4                 | ' if t1.result_type=result_int then 
1f8f4     08 4E 85 F1 | 	sub	fp, #8
1f8f8     1C 26 0E F2 | 	cmp	local01, #28 wz
1f8fc     A7 28 02 AB |  if_e	rdlong	local02, fp
1f900     14 27 62 A6 |  if_e	neg	local01, local02
1f904     A7 26 62 AC |  if_e	wrlong	local01, fp
1f908     5C 00 90 AD |  if_e	jmp	#LR__2492
1f90c     08 4E 05 F1 | 	add	fp, #8
1f910     A7 26 02 FB | 	rdlong	local01, fp
1f914     08 4E 85 F1 | 	sub	fp, #8
1f918     1D 26 0E F2 | 	cmp	local01, #29 wz
1f91c     1C 00 90 5D |  if_ne	jmp	#LR__2490
1f920     A7 28 02 FB | 	rdlong	local02, fp
1f924     14 27 62 F6 | 	neg	local01, local02
1f928     A7 26 62 FC | 	wrlong	local01, fp
1f92c     08 4E 05 F1 | 	add	fp, #8
1f930     A7 38 68 FC | 	wrlong	#28, fp
1f934     08 4E 85 F1 | 	sub	fp, #8
1f938     2C 00 90 FD | 	jmp	#LR__2491
1f93c                 | LR__2490
1f93c     08 4E 05 F1 | 	add	fp, #8
1f940     A7 26 02 FB | 	rdlong	local01, fp
1f944     08 4E 85 F1 | 	sub	fp, #8
1f948     1E 26 0E F2 | 	cmp	local01, #30 wz
1f94c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1f950     1F FA E5 A4 |  if_e	bitnot	result1, #31
1f954     A7 FA 61 AC |  if_e	wrlong	result1, fp
1f958     08 4E 05 51 |  if_ne	add	fp, #8
1f95c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1f960     08 4E 85 51 |  if_ne	sub	fp, #8
1f964     A7 50 68 5C |  if_ne	wrlong	#40, fp
1f968                 | LR__2491
1f968                 | LR__2492
1f968     A7 12 02 F6 | 	mov	arg01, fp
1f96c     B0 DC BE FD | 	call	#_push
1f970     A7 F0 03 F6 | 	mov	ptra, fp
1f974     B2 00 A0 FD | 	call	#popregs_
1f978                 | _do_negative_ret
1f978     2D 00 64 FD | 	ret
1f97c                 | 
1f97c                 | ' 
1f97c                 | ' '--------------------------------- MOD (modulo)
1f97c                 | ' 
1f97c                 | ' sub do_mod 
1f97c                 | _do_mod
1f97c     01 4A 05 F6 | 	mov	COUNT_, #1
1f980     A8 00 A0 FD | 	call	#pushregs_
1f984     18 F0 07 F1 | 	add	ptra, #24
1f988     FC DB BE FD | 	call	#_pop
1f98c     FD 92 02 F6 | 	mov	muldivb_, result1
1f990     FE 90 02 F6 | 	mov	muldiva_, result2
1f994     FF 26 02 F6 | 	mov	local01, result3
1f998     0C 4E 05 F1 | 	add	fp, #12
1f99c     A7 92 62 FC | 	wrlong	muldivb_, fp
1f9a0     04 4E 05 F1 | 	add	fp, #4
1f9a4     A7 90 62 FC | 	wrlong	muldiva_, fp
1f9a8     04 4E 05 F1 | 	add	fp, #4
1f9ac     A7 26 62 FC | 	wrlong	local01, fp
1f9b0     14 4E 85 F1 | 	sub	fp, #20
1f9b4     D0 DB BE FD | 	call	#_pop
1f9b8     A7 FA 61 FC | 	wrlong	result1, fp
1f9bc     04 4E 05 F1 | 	add	fp, #4
1f9c0     A7 FC 61 FC | 	wrlong	result2, fp
1f9c4     04 4E 05 F1 | 	add	fp, #4
1f9c8     A7 FE 61 FC | 	wrlong	result3, fp
1f9cc                 | ' 
1f9cc                 | ' t2=pop()
1f9cc                 | ' t1=pop()
1f9cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1f9cc     08 4E 85 F1 | 	sub	fp, #8
1f9d0     1F FE 0D F2 | 	cmp	result3, #31 wz
1f9d4     14 4E 05 51 |  if_ne	add	fp, #20
1f9d8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1f9dc     14 4E 85 51 |  if_ne	sub	fp, #20
1f9e0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1f9e4     A7 14 68 AC |  if_e	wrlong	#10, fp
1f9e8     08 4E 05 A1 |  if_e	add	fp, #8
1f9ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
1f9f0     08 4E 85 A1 |  if_e	sub	fp, #8
1f9f4     90 01 90 AD |  if_e	jmp	#LR__2506
1f9f8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1f9f8     08 4E 05 F1 | 	add	fp, #8
1f9fc     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa00     08 4E 85 F1 | 	sub	fp, #8
1fa04     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fa08     1C 00 90 5D |  if_ne	jmp	#LR__2500
1fa0c     08 4E 05 F1 | 	add	fp, #8
1fa10     A7 38 68 FC | 	wrlong	#28, fp
1fa14     08 4E 85 F1 | 	sub	fp, #8
1fa18     A7 12 02 FB | 	rdlong	arg01, fp
1fa1c     00 14 06 F6 | 	mov	arg02, #0
1fa20     38 A2 B0 FD | 	call	#__system___float_tointeger
1fa24     A7 FA 61 FC | 	wrlong	result1, fp
1fa28                 | LR__2500
1fa28                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1fa28     14 4E 05 F1 | 	add	fp, #20
1fa2c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa30     14 4E 85 F1 | 	sub	fp, #20
1fa34     1E 92 0E F2 | 	cmp	muldivb_, #30 wz
1fa38     28 00 90 5D |  if_ne	jmp	#LR__2501
1fa3c     14 4E 05 F1 | 	add	fp, #20
1fa40     A7 38 68 FC | 	wrlong	#28, fp
1fa44     08 4E 85 F1 | 	sub	fp, #8
1fa48     A7 12 02 FB | 	rdlong	arg01, fp
1fa4c     0C 4E 85 F1 | 	sub	fp, #12
1fa50     00 14 06 F6 | 	mov	arg02, #0
1fa54     04 A2 B0 FD | 	call	#__system___float_tointeger
1fa58     0C 4E 05 F1 | 	add	fp, #12
1fa5c     A7 FA 61 FC | 	wrlong	result1, fp
1fa60     0C 4E 85 F1 | 	sub	fp, #12
1fa64                 | LR__2501
1fa64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1fa64     08 4E 05 F1 | 	add	fp, #8
1fa68     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa6c     08 4E 85 F1 | 	sub	fp, #8
1fa70     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fa74     14 4E 05 A1 |  if_e	add	fp, #20
1fa78     A7 26 02 AB |  if_e	rdlong	local01, fp
1fa7c     14 4E 85 A1 |  if_e	sub	fp, #20
1fa80     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1fa84     20 00 90 5D |  if_ne	jmp	#LR__2502
1fa88     0C 4E 05 F1 | 	add	fp, #12
1fa8c     A7 26 02 FB | 	rdlong	local01, fp
1fa90     0C 4E 85 F1 | 	sub	fp, #12
1fa94     A7 92 02 FB | 	rdlong	muldivb_, fp
1fa98     13 93 12 FD | 	qdiv	muldivb_, local01
1fa9c     19 26 62 FD | 	getqy	local01
1faa0     A7 26 62 FC | 	wrlong	local01, fp
1faa4     E0 00 90 FD | 	jmp	#LR__2506
1faa8                 | LR__2502
1faa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1faa8     08 4E 05 F1 | 	add	fp, #8
1faac     A7 92 02 FB | 	rdlong	muldivb_, fp
1fab0     08 4E 85 F1 | 	sub	fp, #8
1fab4     1D 92 0E F2 | 	cmp	muldivb_, #29 wz
1fab8     14 4E 05 A1 |  if_e	add	fp, #20
1fabc     A7 26 02 AB |  if_e	rdlong	local01, fp
1fac0     14 4E 85 A1 |  if_e	sub	fp, #20
1fac4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1fac8     2C 00 90 5D |  if_ne	jmp	#LR__2503
1facc     0C 4E 05 F1 | 	add	fp, #12
1fad0     A7 26 02 FB | 	rdlong	local01, fp
1fad4     0C 4E 85 F1 | 	sub	fp, #12
1fad8     A7 92 02 FB | 	rdlong	muldivb_, fp
1fadc     13 93 12 FD | 	qdiv	muldivb_, local01
1fae0     19 26 62 FD | 	getqy	local01
1fae4     A7 26 62 FC | 	wrlong	local01, fp
1fae8     08 4E 05 F1 | 	add	fp, #8
1faec     A7 38 68 FC | 	wrlong	#28, fp
1faf0     08 4E 85 F1 | 	sub	fp, #8
1faf4     90 00 90 FD | 	jmp	#LR__2506
1faf8                 | LR__2503
1faf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1faf8     08 4E 05 F1 | 	add	fp, #8
1fafc     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb00     08 4E 85 F1 | 	sub	fp, #8
1fb04     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fb08     14 4E 05 A1 |  if_e	add	fp, #20
1fb0c     A7 26 02 AB |  if_e	rdlong	local01, fp
1fb10     14 4E 85 A1 |  if_e	sub	fp, #20
1fb14     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1fb18     1C 00 90 5D |  if_ne	jmp	#LR__2504
1fb1c     A7 90 02 FB | 	rdlong	muldiva_, fp
1fb20     0C 4E 05 F1 | 	add	fp, #12
1fb24     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb28     0C 4E 85 F1 | 	sub	fp, #12
1fb2c     BA 00 A0 FD | 	call	#divide_
1fb30     A7 90 62 FC | 	wrlong	muldiva_, fp
1fb34     50 00 90 FD | 	jmp	#LR__2506
1fb38                 | LR__2504
1fb38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1fb38     08 4E 05 F1 | 	add	fp, #8
1fb3c     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb40     08 4E 85 F1 | 	sub	fp, #8
1fb44     1C 92 0E F2 | 	cmp	muldivb_, #28 wz
1fb48     14 4E 05 A1 |  if_e	add	fp, #20
1fb4c     A7 26 02 AB |  if_e	rdlong	local01, fp
1fb50     14 4E 85 A1 |  if_e	sub	fp, #20
1fb54     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1fb58     1C 00 90 5D |  if_ne	jmp	#LR__2505
1fb5c     A7 90 02 FB | 	rdlong	muldiva_, fp
1fb60     0C 4E 05 F1 | 	add	fp, #12
1fb64     A7 92 02 FB | 	rdlong	muldivb_, fp
1fb68     0C 4E 85 F1 | 	sub	fp, #12
1fb6c     BA 00 A0 FD | 	call	#divide_
1fb70     A7 90 62 FC | 	wrlong	muldiva_, fp
1fb74     10 00 90 FD | 	jmp	#LR__2506
1fb78                 | LR__2505
1fb78     A7 16 68 FC | 	wrlong	#11, fp
1fb7c     08 4E 05 F1 | 	add	fp, #8
1fb80     A7 FE 69 FC | 	wrlong	#255, fp
1fb84     08 4E 85 F1 | 	sub	fp, #8
1fb88                 | LR__2506
1fb88     A7 12 02 F6 | 	mov	arg01, fp
1fb8c     90 DA BE FD | 	call	#_push
1fb90     A7 F0 03 F6 | 	mov	ptra, fp
1fb94     B2 00 A0 FD | 	call	#popregs_
1fb98                 | _do_mod_ret
1fb98     2D 00 64 FD | 	ret
1fb9c                 | 
1fb9c                 | ' 
1fb9c                 | ' '--------------------------------- mul (*)
1fb9c                 | ' 
1fb9c                 | ' sub do_mul
1fb9c                 | _do_mul
1fb9c     05 4A 05 F6 | 	mov	COUNT_, #5
1fba0     A8 00 A0 FD | 	call	#pushregs_
1fba4     18 F0 07 F1 | 	add	ptra, #24
1fba8     DC D9 BE FD | 	call	#_pop
1fbac     FD 26 02 F6 | 	mov	local01, result1
1fbb0     FE 28 02 F6 | 	mov	local02, result2
1fbb4     FF 2A 02 F6 | 	mov	local03, result3
1fbb8     0C 4E 05 F1 | 	add	fp, #12
1fbbc     A7 26 62 FC | 	wrlong	local01, fp
1fbc0     04 4E 05 F1 | 	add	fp, #4
1fbc4     A7 28 62 FC | 	wrlong	local02, fp
1fbc8     04 4E 05 F1 | 	add	fp, #4
1fbcc     A7 2A 62 FC | 	wrlong	local03, fp
1fbd0     14 4E 85 F1 | 	sub	fp, #20
1fbd4     B0 D9 BE FD | 	call	#_pop
1fbd8     FF 2A 02 F6 | 	mov	local03, result3
1fbdc     A7 FA 61 FC | 	wrlong	result1, fp
1fbe0     04 4E 05 F1 | 	add	fp, #4
1fbe4     A7 FC 61 FC | 	wrlong	result2, fp
1fbe8     04 4E 05 F1 | 	add	fp, #4
1fbec     A7 2A 62 FC | 	wrlong	local03, fp
1fbf0                 | ' 
1fbf0                 | ' t2=pop()
1fbf0                 | ' t1=pop()
1fbf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1fbf0     08 4E 85 F1 | 	sub	fp, #8
1fbf4     1D 2A 0E F2 | 	cmp	local03, #29 wz
1fbf8     14 4E 05 A1 |  if_e	add	fp, #20
1fbfc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc00     14 4E 85 A1 |  if_e	sub	fp, #20
1fc04     16 2B 02 A6 |  if_e	mov	local03, local04
1fc08     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fc0c     20 00 90 5D |  if_ne	jmp	#LR__2510
1fc10     A7 28 02 FB | 	rdlong	local02, fp
1fc14     0C 4E 05 F1 | 	add	fp, #12
1fc18     A7 2A 02 FB | 	rdlong	local03, fp
1fc1c     15 29 02 FD | 	qmul	local02, local03
1fc20     0C 4E 85 F1 | 	sub	fp, #12
1fc24     18 26 62 FD | 	getqx	local01
1fc28     A7 26 62 FC | 	wrlong	local01, fp
1fc2c     C4 02 90 FD | 	jmp	#LR__2519
1fc30                 | LR__2510
1fc30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1fc30     08 4E 05 F1 | 	add	fp, #8
1fc34     A7 26 02 FB | 	rdlong	local01, fp
1fc38     08 4E 85 F1 | 	sub	fp, #8
1fc3c     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc40     14 4E 05 A1 |  if_e	add	fp, #20
1fc44     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc48     14 4E 85 A1 |  if_e	sub	fp, #20
1fc4c     16 2B 02 A6 |  if_e	mov	local03, local04
1fc50     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fc54     2C 00 90 5D |  if_ne	jmp	#LR__2511
1fc58     A7 28 02 FB | 	rdlong	local02, fp
1fc5c     0C 4E 05 F1 | 	add	fp, #12
1fc60     A7 2A 02 FB | 	rdlong	local03, fp
1fc64     15 29 02 FD | 	qmul	local02, local03
1fc68     0C 4E 85 F1 | 	sub	fp, #12
1fc6c     18 26 62 FD | 	getqx	local01
1fc70     A7 26 62 FC | 	wrlong	local01, fp
1fc74     08 4E 05 F1 | 	add	fp, #8
1fc78     A7 38 68 FC | 	wrlong	#28, fp
1fc7c     08 4E 85 F1 | 	sub	fp, #8
1fc80     70 02 90 FD | 	jmp	#LR__2519
1fc84                 | LR__2511
1fc84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fc84     08 4E 05 F1 | 	add	fp, #8
1fc88     A7 26 02 FB | 	rdlong	local01, fp
1fc8c     08 4E 85 F1 | 	sub	fp, #8
1fc90     1D 26 0E F2 | 	cmp	local01, #29 wz
1fc94     14 4E 05 A1 |  if_e	add	fp, #20
1fc98     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fc9c     14 4E 85 A1 |  if_e	sub	fp, #20
1fca0     16 2B 02 A6 |  if_e	mov	local03, local04
1fca4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fca8     30 00 90 5D |  if_ne	jmp	#LR__2512
1fcac     A7 12 02 FB | 	rdlong	arg01, fp
1fcb0     DC 96 B0 FD | 	call	#__system___float_fromuns
1fcb4     FD 12 02 F6 | 	mov	arg01, result1
1fcb8     0C 4E 05 F1 | 	add	fp, #12
1fcbc     A7 14 02 FB | 	rdlong	arg02, fp
1fcc0     0C 4E 85 F1 | 	sub	fp, #12
1fcc4     CC 9A B0 FD | 	call	#__system___float_mul
1fcc8     A7 FA 61 FC | 	wrlong	result1, fp
1fccc     08 4E 05 F1 | 	add	fp, #8
1fcd0     A7 3C 68 FC | 	wrlong	#30, fp
1fcd4     08 4E 85 F1 | 	sub	fp, #8
1fcd8     18 02 90 FD | 	jmp	#LR__2519
1fcdc                 | LR__2512
1fcdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1fcdc     08 4E 05 F1 | 	add	fp, #8
1fce0     A7 26 02 FB | 	rdlong	local01, fp
1fce4     08 4E 85 F1 | 	sub	fp, #8
1fce8     1C 26 0E F2 | 	cmp	local01, #28 wz
1fcec     14 4E 05 A1 |  if_e	add	fp, #20
1fcf0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fcf4     14 4E 85 A1 |  if_e	sub	fp, #20
1fcf8     16 2B 02 A6 |  if_e	mov	local03, local04
1fcfc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fd00     20 00 90 5D |  if_ne	jmp	#LR__2513
1fd04     A7 28 02 FB | 	rdlong	local02, fp
1fd08     0C 4E 05 F1 | 	add	fp, #12
1fd0c     A7 2A 02 FB | 	rdlong	local03, fp
1fd10     15 29 02 FD | 	qmul	local02, local03
1fd14     0C 4E 85 F1 | 	sub	fp, #12
1fd18     18 26 62 FD | 	getqx	local01
1fd1c     A7 26 62 FC | 	wrlong	local01, fp
1fd20     D0 01 90 FD | 	jmp	#LR__2519
1fd24                 | LR__2513
1fd24                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1fd24     08 4E 05 F1 | 	add	fp, #8
1fd28     A7 26 02 FB | 	rdlong	local01, fp
1fd2c     08 4E 85 F1 | 	sub	fp, #8
1fd30     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd34     14 4E 05 A1 |  if_e	add	fp, #20
1fd38     A7 2C 02 AB |  if_e	rdlong	local04, fp
1fd3c     14 4E 85 A1 |  if_e	sub	fp, #20
1fd40     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1fd44     20 00 90 5D |  if_ne	jmp	#LR__2514
1fd48     A7 28 02 FB | 	rdlong	local02, fp
1fd4c     0C 4E 05 F1 | 	add	fp, #12
1fd50     A7 2A 02 FB | 	rdlong	local03, fp
1fd54     15 29 02 FD | 	qmul	local02, local03
1fd58     0C 4E 85 F1 | 	sub	fp, #12
1fd5c     18 26 62 FD | 	getqx	local01
1fd60     A7 26 62 FC | 	wrlong	local01, fp
1fd64     8C 01 90 FD | 	jmp	#LR__2519
1fd68                 | LR__2514
1fd68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1fd68     08 4E 05 F1 | 	add	fp, #8
1fd6c     A7 26 02 FB | 	rdlong	local01, fp
1fd70     08 4E 85 F1 | 	sub	fp, #8
1fd74     1C 26 0E F2 | 	cmp	local01, #28 wz
1fd78     14 4E 05 A1 |  if_e	add	fp, #20
1fd7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fd80     14 4E 85 A1 |  if_e	sub	fp, #20
1fd84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fd88     40 00 90 5D |  if_ne	jmp	#LR__2515
1fd8c     A7 12 02 FB | 	rdlong	arg01, fp
1fd90     09 13 52 F6 | 	abs	arg01, arg01 wc
1fd94     1F 2E C6 C9 |  if_b	decod	local05, #31
1fd98     00 2E 06 36 |  if_ae	mov	local05, #0
1fd9c     F0 95 B0 FD | 	call	#__system___float_fromuns
1fda0     17 FB 61 F5 | 	xor	result1, local05
1fda4     FD 12 02 F6 | 	mov	arg01, result1
1fda8     0C 4E 05 F1 | 	add	fp, #12
1fdac     A7 14 02 FB | 	rdlong	arg02, fp
1fdb0     0C 4E 85 F1 | 	sub	fp, #12
1fdb4     DC 99 B0 FD | 	call	#__system___float_mul
1fdb8     A7 FA 61 FC | 	wrlong	result1, fp
1fdbc     08 4E 05 F1 | 	add	fp, #8
1fdc0     A7 3C 68 FC | 	wrlong	#30, fp
1fdc4     08 4E 85 F1 | 	sub	fp, #8
1fdc8     28 01 90 FD | 	jmp	#LR__2519
1fdcc                 | LR__2515
1fdcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1fdcc     08 4E 05 F1 | 	add	fp, #8
1fdd0     A7 26 02 FB | 	rdlong	local01, fp
1fdd4     08 4E 85 F1 | 	sub	fp, #8
1fdd8     1E 26 0E F2 | 	cmp	local01, #30 wz
1fddc     14 4E 05 A1 |  if_e	add	fp, #20
1fde0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fde4     14 4E 85 A1 |  if_e	sub	fp, #20
1fde8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1fdec     28 00 90 5D |  if_ne	jmp	#LR__2516
1fdf0     A7 26 02 FB | 	rdlong	local01, fp
1fdf4     0C 4E 05 F1 | 	add	fp, #12
1fdf8     A7 12 02 FB | 	rdlong	arg01, fp
1fdfc     0C 4E 85 F1 | 	sub	fp, #12
1fe00     8C 95 B0 FD | 	call	#__system___float_fromuns
1fe04     FD 14 02 F6 | 	mov	arg02, result1
1fe08     13 13 02 F6 | 	mov	arg01, local01
1fe0c     84 99 B0 FD | 	call	#__system___float_mul
1fe10     A7 FA 61 FC | 	wrlong	result1, fp
1fe14     DC 00 90 FD | 	jmp	#LR__2519
1fe18                 | LR__2516
1fe18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1fe18     08 4E 05 F1 | 	add	fp, #8
1fe1c     A7 26 02 FB | 	rdlong	local01, fp
1fe20     08 4E 85 F1 | 	sub	fp, #8
1fe24     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe28     14 4E 05 A1 |  if_e	add	fp, #20
1fe2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe30     14 4E 85 A1 |  if_e	sub	fp, #20
1fe34     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1fe38     38 00 90 5D |  if_ne	jmp	#LR__2517
1fe3c     A7 26 02 FB | 	rdlong	local01, fp
1fe40     0C 4E 05 F1 | 	add	fp, #12
1fe44     A7 12 02 FB | 	rdlong	arg01, fp
1fe48     0C 4E 85 F1 | 	sub	fp, #12
1fe4c     09 13 52 F6 | 	abs	arg01, arg01 wc
1fe50     1F 2E C6 C9 |  if_b	decod	local05, #31
1fe54     00 2E 06 36 |  if_ae	mov	local05, #0
1fe58     34 95 B0 FD | 	call	#__system___float_fromuns
1fe5c     17 FB 61 F5 | 	xor	result1, local05
1fe60     FD 14 02 F6 | 	mov	arg02, result1
1fe64     13 13 02 F6 | 	mov	arg01, local01
1fe68     28 99 B0 FD | 	call	#__system___float_mul
1fe6c     A7 FA 61 FC | 	wrlong	result1, fp
1fe70     80 00 90 FD | 	jmp	#LR__2519
1fe74                 | LR__2517
1fe74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1fe74     08 4E 05 F1 | 	add	fp, #8
1fe78     A7 26 02 FB | 	rdlong	local01, fp
1fe7c     08 4E 85 F1 | 	sub	fp, #8
1fe80     1E 26 0E F2 | 	cmp	local01, #30 wz
1fe84     14 4E 05 A1 |  if_e	add	fp, #20
1fe88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1fe8c     14 4E 85 A1 |  if_e	sub	fp, #20
1fe90     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1fe94     1C 00 90 5D |  if_ne	jmp	#LR__2518
1fe98     A7 12 02 FB | 	rdlong	arg01, fp
1fe9c     0C 4E 05 F1 | 	add	fp, #12
1fea0     A7 14 02 FB | 	rdlong	arg02, fp
1fea4     0C 4E 85 F1 | 	sub	fp, #12
1fea8     E8 98 B0 FD | 	call	#__system___float_mul
1feac     A7 FA 61 FC | 	wrlong	result1, fp
1feb0     40 00 90 FD | 	jmp	#LR__2519
1feb4                 | LR__2518
1feb4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1feb4     08 4E 05 F1 | 	add	fp, #8
1feb8     A7 26 02 FB | 	rdlong	local01, fp
1febc     08 4E 85 F1 | 	sub	fp, #8
1fec0     1F 26 0E F2 | 	cmp	local01, #31 wz
1fec4     14 4E 05 51 |  if_ne	add	fp, #20
1fec8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1fecc     14 4E 85 51 |  if_ne	sub	fp, #20
1fed0     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1fed4     A7 10 68 AC |  if_e	wrlong	#8, fp
1fed8     08 4E 05 A1 |  if_e	add	fp, #8
1fedc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1fee0     08 4E 85 A1 |  if_e	sub	fp, #8
1fee4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1fee8     08 4E 05 51 |  if_ne	add	fp, #8
1feec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1fef0     08 4E 85 51 |  if_ne	sub	fp, #8
1fef4                 | LR__2519
1fef4     A7 12 02 F6 | 	mov	arg01, fp
1fef8     24 D7 BE FD | 	call	#_push
1fefc     A7 F0 03 F6 | 	mov	ptra, fp
1ff00     B2 00 A0 FD | 	call	#popregs_
1ff04                 | _do_mul_ret
1ff04     2D 00 64 FD | 	ret
1ff08                 | 
1ff08                 | ' 
1ff08                 | ' '--------------------------------- not equal (<>)
1ff08                 | ' 
1ff08                 | ' sub do_ne
1ff08                 | _do_ne
1ff08     05 4A 05 F6 | 	mov	COUNT_, #5
1ff0c     A8 00 A0 FD | 	call	#pushregs_
1ff10     18 F0 07 F1 | 	add	ptra, #24
1ff14     70 D6 BE FD | 	call	#_pop
1ff18     FD 26 02 F6 | 	mov	local01, result1
1ff1c     FE 28 02 F6 | 	mov	local02, result2
1ff20     FF 2A 02 F6 | 	mov	local03, result3
1ff24     0C 4E 05 F1 | 	add	fp, #12
1ff28     A7 26 62 FC | 	wrlong	local01, fp
1ff2c     04 4E 05 F1 | 	add	fp, #4
1ff30     A7 28 62 FC | 	wrlong	local02, fp
1ff34     04 4E 05 F1 | 	add	fp, #4
1ff38     A7 2A 62 FC | 	wrlong	local03, fp
1ff3c     14 4E 85 F1 | 	sub	fp, #20
1ff40     44 D6 BE FD | 	call	#_pop
1ff44     FF 2A 02 F6 | 	mov	local03, result3
1ff48     A7 FA 61 FC | 	wrlong	result1, fp
1ff4c     04 4E 05 F1 | 	add	fp, #4
1ff50     A7 FC 61 FC | 	wrlong	result2, fp
1ff54     04 4E 05 F1 | 	add	fp, #4
1ff58     A7 2A 62 FC | 	wrlong	local03, fp
1ff5c                 | ' 
1ff5c                 | ' t2=pop()
1ff5c                 | ' t1=pop()
1ff5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1ff5c     08 4E 85 F1 | 	sub	fp, #8
1ff60     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ff64     14 4E 05 A1 |  if_e	add	fp, #20
1ff68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ff6c     14 4E 85 A1 |  if_e	sub	fp, #20
1ff70     16 2B 02 A6 |  if_e	mov	local03, local04
1ff74     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ff78     28 00 90 5D |  if_ne	jmp	#LR__2520
1ff7c     00 26 06 F6 | 	mov	local01, #0
1ff80     A7 12 02 FB | 	rdlong	arg01, fp
1ff84     0C 4E 05 F1 | 	add	fp, #12
1ff88     A7 14 02 FB | 	rdlong	arg02, fp
1ff8c     0C 4E 85 F1 | 	sub	fp, #12
1ff90     AC 69 B0 FD | 	call	#__system___string_cmp
1ff94     00 FA 0D F2 | 	cmp	result1, #0 wz
1ff98     00 26 26 56 |  if_ne	not	local01, #0
1ff9c     A7 26 62 FC | 	wrlong	local01, fp
1ffa0     20 04 90 FD | 	jmp	#LR__2533
1ffa4                 | LR__2520
1ffa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1ffa4     08 4E 05 F1 | 	add	fp, #8
1ffa8     A7 26 02 FB | 	rdlong	local01, fp
1ffac     08 4E 85 F1 | 	sub	fp, #8
1ffb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1ffb4     14 4E 05 A1 |  if_e	add	fp, #20
1ffb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ffbc     14 4E 85 A1 |  if_e	sub	fp, #20
1ffc0     16 2B 02 A6 |  if_e	mov	local03, local04
1ffc4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ffc8     2C 00 90 5D |  if_ne	jmp	#LR__2521
1ffcc     00 26 06 F6 | 	mov	local01, #0
1ffd0     A7 12 02 FB | 	rdlong	arg01, fp
1ffd4     0C 4E 05 F1 | 	add	fp, #12
1ffd8     A7 14 02 FB | 	rdlong	arg02, fp
1ffdc     0C 4E 85 F1 | 	sub	fp, #12
1ffe0     01 16 06 F6 | 	mov	arg03, #1
1ffe4     E0 9B B0 FD | 	call	#__system___float_cmp
1ffe8     00 FA 0D F2 | 	cmp	result1, #0 wz
1ffec     00 26 26 56 |  if_ne	not	local01, #0
1fff0     A7 26 62 FC | 	wrlong	local01, fp
1fff4     CC 03 90 FD | 	jmp	#LR__2533
1fff8                 | LR__2521
1fff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1fff8     08 4E 05 F1 | 	add	fp, #8
1fffc     A7 26 02 FB | 	rdlong	local01, fp
20000     08 4E 85 F1 | 	sub	fp, #8
20004     1E 26 0E F2 | 	cmp	local01, #30 wz
20008     14 4E 05 A1 |  if_e	add	fp, #20
2000c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20010     14 4E 85 A1 |  if_e	sub	fp, #20
20014     16 2B 02 A6 |  if_e	mov	local03, local04
20018     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2001c     48 00 90 5D |  if_ne	jmp	#LR__2522
20020     00 26 06 F6 | 	mov	local01, #0
20024     A7 28 02 FB | 	rdlong	local02, fp
20028     0C 4E 05 F1 | 	add	fp, #12
2002c     A7 12 02 FB | 	rdlong	arg01, fp
20030     0C 4E 85 F1 | 	sub	fp, #12
20034     09 13 52 F6 | 	abs	arg01, arg01 wc
20038     1F 2E C6 C9 |  if_b	decod	local05, #31
2003c     00 2E 06 36 |  if_ae	mov	local05, #0
20040     4C 93 B0 FD | 	call	#__system___float_fromuns
20044     17 FB 61 F5 | 	xor	result1, local05
20048     FD 14 02 F6 | 	mov	arg02, result1
2004c     14 13 02 F6 | 	mov	arg01, local02
20050     01 16 06 F6 | 	mov	arg03, #1
20054     70 9B B0 FD | 	call	#__system___float_cmp
20058     00 FA 0D F2 | 	cmp	result1, #0 wz
2005c     00 26 26 56 |  if_ne	not	local01, #0
20060     A7 26 62 FC | 	wrlong	local01, fp
20064     5C 03 90 FD | 	jmp	#LR__2533
20068                 | LR__2522
20068                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
20068     08 4E 05 F1 | 	add	fp, #8
2006c     A7 26 02 FB | 	rdlong	local01, fp
20070     08 4E 85 F1 | 	sub	fp, #8
20074     1E 26 0E F2 | 	cmp	local01, #30 wz
20078     14 4E 05 A1 |  if_e	add	fp, #20
2007c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20080     14 4E 85 A1 |  if_e	sub	fp, #20
20084     16 2B 02 A6 |  if_e	mov	local03, local04
20088     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2008c     38 00 90 5D |  if_ne	jmp	#LR__2523
20090     00 26 06 F6 | 	mov	local01, #0
20094     A7 28 02 FB | 	rdlong	local02, fp
20098     0C 4E 05 F1 | 	add	fp, #12
2009c     A7 12 02 FB | 	rdlong	arg01, fp
200a0     0C 4E 85 F1 | 	sub	fp, #12
200a4     E8 92 B0 FD | 	call	#__system___float_fromuns
200a8     FD 14 02 F6 | 	mov	arg02, result1
200ac     14 13 02 F6 | 	mov	arg01, local02
200b0     01 16 06 F6 | 	mov	arg03, #1
200b4     10 9B B0 FD | 	call	#__system___float_cmp
200b8     00 FA 0D F2 | 	cmp	result1, #0 wz
200bc     00 26 26 56 |  if_ne	not	local01, #0
200c0     A7 26 62 FC | 	wrlong	local01, fp
200c4     FC 02 90 FD | 	jmp	#LR__2533
200c8                 | LR__2523
200c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
200c8     08 4E 05 F1 | 	add	fp, #8
200cc     A7 26 02 FB | 	rdlong	local01, fp
200d0     08 4E 85 F1 | 	sub	fp, #8
200d4     1C 26 0E F2 | 	cmp	local01, #28 wz
200d8     14 4E 05 A1 |  if_e	add	fp, #20
200dc     A7 2C 02 AB |  if_e	rdlong	local04, fp
200e0     14 4E 85 A1 |  if_e	sub	fp, #20
200e4     16 2B 02 A6 |  if_e	mov	local03, local04
200e8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
200ec     44 00 90 5D |  if_ne	jmp	#LR__2524
200f0     00 26 06 F6 | 	mov	local01, #0
200f4     A7 12 02 FB | 	rdlong	arg01, fp
200f8     09 13 52 F6 | 	abs	arg01, arg01 wc
200fc     1F 2E C6 C9 |  if_b	decod	local05, #31
20100     00 2E 06 36 |  if_ae	mov	local05, #0
20104     88 92 B0 FD | 	call	#__system___float_fromuns
20108     17 FB 61 F5 | 	xor	result1, local05
2010c     FD 12 02 F6 | 	mov	arg01, result1
20110     0C 4E 05 F1 | 	add	fp, #12
20114     A7 14 02 FB | 	rdlong	arg02, fp
20118     0C 4E 85 F1 | 	sub	fp, #12
2011c     01 16 06 F6 | 	mov	arg03, #1
20120     A4 9A B0 FD | 	call	#__system___float_cmp
20124     00 FA 0D F2 | 	cmp	result1, #0 wz
20128     00 26 26 56 |  if_ne	not	local01, #0
2012c     A7 26 62 FC | 	wrlong	local01, fp
20130     90 02 90 FD | 	jmp	#LR__2533
20134                 | LR__2524
20134                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
20134     08 4E 05 F1 | 	add	fp, #8
20138     A7 26 02 FB | 	rdlong	local01, fp
2013c     08 4E 85 F1 | 	sub	fp, #8
20140     1C 26 0E F2 | 	cmp	local01, #28 wz
20144     14 4E 05 A1 |  if_e	add	fp, #20
20148     A7 2C 02 AB |  if_e	rdlong	local04, fp
2014c     14 4E 85 A1 |  if_e	sub	fp, #20
20150     16 2B 02 A6 |  if_e	mov	local03, local04
20154     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20158     24 00 90 5D |  if_ne	jmp	#LR__2525
2015c     00 26 06 F6 | 	mov	local01, #0
20160     A7 28 02 FB | 	rdlong	local02, fp
20164     0C 4E 05 F1 | 	add	fp, #12
20168     A7 2A 02 FB | 	rdlong	local03, fp
2016c     0C 4E 85 F1 | 	sub	fp, #12
20170     15 29 0A F2 | 	cmp	local02, local03 wz
20174     01 26 66 56 |  if_ne	neg	local01, #1
20178     A7 26 62 FC | 	wrlong	local01, fp
2017c     44 02 90 FD | 	jmp	#LR__2533
20180                 | LR__2525
20180                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
20180     08 4E 05 F1 | 	add	fp, #8
20184     A7 26 02 FB | 	rdlong	local01, fp
20188     08 4E 85 F1 | 	sub	fp, #8
2018c     1C 26 0E F2 | 	cmp	local01, #28 wz
20190     14 4E 05 A1 |  if_e	add	fp, #20
20194     A7 2C 02 AB |  if_e	rdlong	local04, fp
20198     14 4E 85 A1 |  if_e	sub	fp, #20
2019c     16 2B 02 A6 |  if_e	mov	local03, local04
201a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
201a4     24 00 90 5D |  if_ne	jmp	#LR__2526
201a8     00 26 06 F6 | 	mov	local01, #0
201ac     A7 28 02 FB | 	rdlong	local02, fp
201b0     0C 4E 05 F1 | 	add	fp, #12
201b4     A7 2A 02 FB | 	rdlong	local03, fp
201b8     0C 4E 85 F1 | 	sub	fp, #12
201bc     15 29 0A F2 | 	cmp	local02, local03 wz
201c0     01 26 66 56 |  if_ne	neg	local01, #1
201c4     A7 26 62 FC | 	wrlong	local01, fp
201c8     F8 01 90 FD | 	jmp	#LR__2533
201cc                 | LR__2526
201cc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
201cc     08 4E 05 F1 | 	add	fp, #8
201d0     A7 26 02 FB | 	rdlong	local01, fp
201d4     08 4E 85 F1 | 	sub	fp, #8
201d8     1D 26 0E F2 | 	cmp	local01, #29 wz
201dc     14 4E 05 A1 |  if_e	add	fp, #20
201e0     A7 2C 02 AB |  if_e	rdlong	local04, fp
201e4     14 4E 85 A1 |  if_e	sub	fp, #20
201e8     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
201ec     34 00 90 5D |  if_ne	jmp	#LR__2527
201f0     00 26 06 F6 | 	mov	local01, #0
201f4     A7 12 02 FB | 	rdlong	arg01, fp
201f8     94 91 B0 FD | 	call	#__system___float_fromuns
201fc     FD 12 02 F6 | 	mov	arg01, result1
20200     0C 4E 05 F1 | 	add	fp, #12
20204     A7 14 02 FB | 	rdlong	arg02, fp
20208     0C 4E 85 F1 | 	sub	fp, #12
2020c     01 16 06 F6 | 	mov	arg03, #1
20210     B4 99 B0 FD | 	call	#__system___float_cmp
20214     00 FA 0D F2 | 	cmp	result1, #0 wz
20218     00 26 26 56 |  if_ne	not	local01, #0
2021c     A7 26 62 FC | 	wrlong	local01, fp
20220     A0 01 90 FD | 	jmp	#LR__2533
20224                 | LR__2527
20224                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
20224     08 4E 05 F1 | 	add	fp, #8
20228     A7 26 02 FB | 	rdlong	local01, fp
2022c     08 4E 85 F1 | 	sub	fp, #8
20230     1D 26 0E F2 | 	cmp	local01, #29 wz
20234     14 4E 05 A1 |  if_e	add	fp, #20
20238     A7 2A 02 AB |  if_e	rdlong	local03, fp
2023c     14 4E 85 A1 |  if_e	sub	fp, #20
20240     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20244     24 00 90 5D |  if_ne	jmp	#LR__2528
20248     00 26 06 F6 | 	mov	local01, #0
2024c     A7 28 02 FB | 	rdlong	local02, fp
20250     0C 4E 05 F1 | 	add	fp, #12
20254     A7 2A 02 FB | 	rdlong	local03, fp
20258     0C 4E 85 F1 | 	sub	fp, #12
2025c     15 29 0A F2 | 	cmp	local02, local03 wz
20260     01 26 66 56 |  if_ne	neg	local01, #1
20264     A7 26 62 FC | 	wrlong	local01, fp
20268     58 01 90 FD | 	jmp	#LR__2533
2026c                 | LR__2528
2026c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
2026c     08 4E 05 F1 | 	add	fp, #8
20270     A7 26 02 FB | 	rdlong	local01, fp
20274     08 4E 85 F1 | 	sub	fp, #8
20278     1D 26 0E F2 | 	cmp	local01, #29 wz
2027c     14 4E 05 A1 |  if_e	add	fp, #20
20280     A7 2A 02 AB |  if_e	rdlong	local03, fp
20284     14 4E 85 A1 |  if_e	sub	fp, #20
20288     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2028c     24 00 90 5D |  if_ne	jmp	#LR__2529
20290     00 26 06 F6 | 	mov	local01, #0
20294     A7 28 02 FB | 	rdlong	local02, fp
20298     0C 4E 05 F1 | 	add	fp, #12
2029c     A7 2A 02 FB | 	rdlong	local03, fp
202a0     0C 4E 85 F1 | 	sub	fp, #12
202a4     15 29 0A F2 | 	cmp	local02, local03 wz
202a8     01 26 66 56 |  if_ne	neg	local01, #1
202ac     A7 26 62 FC | 	wrlong	local01, fp
202b0     10 01 90 FD | 	jmp	#LR__2533
202b4                 | LR__2529
202b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
202b4     08 4E 05 F1 | 	add	fp, #8
202b8     A7 26 02 FB | 	rdlong	local01, fp
202bc     08 4E 85 F1 | 	sub	fp, #8
202c0     2B 26 0E F2 | 	cmp	local01, #43 wz
202c4     14 4E 05 A1 |  if_e	add	fp, #20
202c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
202cc     14 4E 85 A1 |  if_e	sub	fp, #20
202d0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
202d4     30 00 90 5D |  if_ne	jmp	#LR__2530
202d8     00 26 06 F6 | 	mov	local01, #0
202dc     A7 12 02 FB | 	rdlong	arg01, fp
202e0     1C D4 BE FD | 	call	#_convertstring
202e4     FD 12 02 F6 | 	mov	arg01, result1
202e8     0C 4E 05 F1 | 	add	fp, #12
202ec     A7 14 02 FB | 	rdlong	arg02, fp
202f0     0C 4E 85 F1 | 	sub	fp, #12
202f4     48 66 B0 FD | 	call	#__system___string_cmp
202f8     00 FA 0D F2 | 	cmp	result1, #0 wz
202fc     00 26 26 56 |  if_ne	not	local01, #0
20300     A7 26 62 FC | 	wrlong	local01, fp
20304     BC 00 90 FD | 	jmp	#LR__2533
20308                 | LR__2530
20308                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
20308     08 4E 05 F1 | 	add	fp, #8
2030c     A7 26 02 FB | 	rdlong	local01, fp
20310     08 4E 85 F1 | 	sub	fp, #8
20314     1F 26 0E F2 | 	cmp	local01, #31 wz
20318     14 4E 05 A1 |  if_e	add	fp, #20
2031c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20320     14 4E 85 A1 |  if_e	sub	fp, #20
20324     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20328     34 00 90 5D |  if_ne	jmp	#LR__2531
2032c     00 26 06 F6 | 	mov	local01, #0
20330     A7 28 02 FB | 	rdlong	local02, fp
20334     0C 4E 05 F1 | 	add	fp, #12
20338     A7 12 02 FB | 	rdlong	arg01, fp
2033c     0C 4E 85 F1 | 	sub	fp, #12
20340     BC D3 BE FD | 	call	#_convertstring
20344     FD 14 02 F6 | 	mov	arg02, result1
20348     14 13 02 F6 | 	mov	arg01, local02
2034c     F0 65 B0 FD | 	call	#__system___string_cmp
20350     00 FA 0D F2 | 	cmp	result1, #0 wz
20354     00 26 26 56 |  if_ne	not	local01, #0
20358     A7 26 62 FC | 	wrlong	local01, fp
2035c     64 00 90 FD | 	jmp	#LR__2533
20360                 | LR__2531
20360                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
20360     08 4E 05 F1 | 	add	fp, #8
20364     A7 26 02 FB | 	rdlong	local01, fp
20368     08 4E 85 F1 | 	sub	fp, #8
2036c     2B 26 0E F2 | 	cmp	local01, #43 wz
20370     14 4E 05 A1 |  if_e	add	fp, #20
20374     A7 2A 02 AB |  if_e	rdlong	local03, fp
20378     14 4E 85 A1 |  if_e	sub	fp, #20
2037c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20380     3C 00 90 5D |  if_ne	jmp	#LR__2532
20384     00 26 06 F6 | 	mov	local01, #0
20388     A7 12 02 FB | 	rdlong	arg01, fp
2038c     70 D3 BE FD | 	call	#_convertstring
20390     FD 28 02 F6 | 	mov	local02, result1
20394     0C 4E 05 F1 | 	add	fp, #12
20398     A7 12 02 FB | 	rdlong	arg01, fp
2039c     0C 4E 85 F1 | 	sub	fp, #12
203a0     5C D3 BE FD | 	call	#_convertstring
203a4     FD 14 02 F6 | 	mov	arg02, result1
203a8     14 13 02 F6 | 	mov	arg01, local02
203ac     90 65 B0 FD | 	call	#__system___string_cmp
203b0     00 FA 0D F2 | 	cmp	result1, #0 wz
203b4     00 26 26 56 |  if_ne	not	local01, #0
203b8     A7 26 62 FC | 	wrlong	local01, fp
203bc     04 00 90 FD | 	jmp	#LR__2533
203c0                 | LR__2532
203c0     A7 00 68 FC | 	wrlong	#0, fp
203c4                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
203c4                 | LR__2533
203c4     08 4E 05 F1 | 	add	fp, #8
203c8     A7 38 68 FC | 	wrlong	#28, fp
203cc     08 4E 85 F1 | 	sub	fp, #8
203d0     A7 12 02 F6 | 	mov	arg01, fp
203d4     48 D2 BE FD | 	call	#_push
203d8     A7 F0 03 F6 | 	mov	ptra, fp
203dc     B2 00 A0 FD | 	call	#popregs_
203e0                 | _do_ne_ret
203e0     2D 00 64 FD | 	ret
203e4                 | 
203e4                 | ' 
203e4                 | ' '--------------------------------- OR
203e4                 | ' 
203e4                 | ' sub do_or 
203e4                 | _do_or
203e4     03 4A 05 F6 | 	mov	COUNT_, #3
203e8     A8 00 A0 FD | 	call	#pushregs_
203ec     18 F0 07 F1 | 	add	ptra, #24
203f0     94 D1 BE FD | 	call	#_pop
203f4     FD 12 02 F6 | 	mov	arg01, result1
203f8     FE 26 02 F6 | 	mov	local01, result2
203fc     FF 28 02 F6 | 	mov	local02, result3
20400     0C 4E 05 F1 | 	add	fp, #12
20404     A7 12 62 FC | 	wrlong	arg01, fp
20408     04 4E 05 F1 | 	add	fp, #4
2040c     A7 26 62 FC | 	wrlong	local01, fp
20410     04 4E 05 F1 | 	add	fp, #4
20414     A7 28 62 FC | 	wrlong	local02, fp
20418     14 4E 85 F1 | 	sub	fp, #20
2041c     68 D1 BE FD | 	call	#_pop
20420     FF 2A 02 F6 | 	mov	local03, result3
20424     A7 FA 61 FC | 	wrlong	result1, fp
20428     04 4E 05 F1 | 	add	fp, #4
2042c     A7 FC 61 FC | 	wrlong	result2, fp
20430     04 4E 05 F1 | 	add	fp, #4
20434     A7 2A 62 FC | 	wrlong	local03, fp
20438                 | ' 
20438                 | ' t2=pop()
20438                 | ' t1=pop()
20438                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20438     08 4E 85 F1 | 	sub	fp, #8
2043c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20440     A7 2A 02 AB |  if_e	rdlong	local03, fp
20444     A7 2A 62 AC |  if_e	wrlong	local03, fp
20448     08 4E 05 A1 |  if_e	add	fp, #8
2044c     A7 3A 68 AC |  if_e	wrlong	#29, fp
20450     08 4E 85 A1 |  if_e	sub	fp, #8
20454                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20454     14 4E 05 F1 | 	add	fp, #20
20458     A7 2A 02 FB | 	rdlong	local03, fp
2045c     14 4E 85 F1 | 	sub	fp, #20
20460     1C 2A 0E F2 | 	cmp	local03, #28 wz
20464     18 00 90 5D |  if_ne	jmp	#LR__2540
20468     0C 4E 05 F1 | 	add	fp, #12
2046c     A7 2A 02 FB | 	rdlong	local03, fp
20470     A7 2A 62 FC | 	wrlong	local03, fp
20474     08 4E 05 F1 | 	add	fp, #8
20478     A7 3A 68 FC | 	wrlong	#29, fp
2047c     14 4E 85 F1 | 	sub	fp, #20
20480                 | LR__2540
20480                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
20480     08 4E 05 F1 | 	add	fp, #8
20484     A7 2A 02 FB | 	rdlong	local03, fp
20488     08 4E 85 F1 | 	sub	fp, #8
2048c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20490     14 4E 05 51 |  if_ne	add	fp, #20
20494     A7 28 02 5B |  if_ne	rdlong	local02, fp
20498     14 4E 85 51 |  if_ne	sub	fp, #20
2049c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
204a0     08 4E 05 51 |  if_ne	add	fp, #8
204a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
204a8     08 4E 85 51 |  if_ne	sub	fp, #8
204ac     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
204b0     14 4E 05 51 |  if_ne	add	fp, #20
204b4     14 4E 85 51 |  if_ne	sub	fp, #20
204b8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
204bc     A7 0C 68 AC |  if_e	wrlong	#6, fp
204c0     08 4E 05 A1 |  if_e	add	fp, #8
204c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
204c8     08 4E 85 A1 |  if_e	sub	fp, #8
204cc     18 00 90 AD |  if_e	jmp	#LR__2541
204d0     A7 2A 02 FB | 	rdlong	local03, fp
204d4     0C 4E 05 F1 | 	add	fp, #12
204d8     A7 26 02 FB | 	rdlong	local01, fp
204dc     0C 4E 85 F1 | 	sub	fp, #12
204e0     13 2B 42 F5 | 	or	local03, local01
204e4     A7 2A 62 FC | 	wrlong	local03, fp
204e8                 | LR__2541
204e8     A7 12 02 F6 | 	mov	arg01, fp
204ec     30 D1 BE FD | 	call	#_push
204f0     A7 F0 03 F6 | 	mov	ptra, fp
204f4     B2 00 A0 FD | 	call	#popregs_
204f8                 | _do_or_ret
204f8     2D 00 64 FD | 	ret
204fc                 | 
204fc                 | ' 
204fc                 | ' '--------------------------------- plus (+)
204fc                 | ' 
204fc                 | ' sub do_plus 
204fc                 | _do_plus
204fc     05 4A 05 F6 | 	mov	COUNT_, #5
20500     A8 00 A0 FD | 	call	#pushregs_
20504     18 F0 07 F1 | 	add	ptra, #24
20508     7C D0 BE FD | 	call	#_pop
2050c     FD 26 02 F6 | 	mov	local01, result1
20510     FE 28 02 F6 | 	mov	local02, result2
20514     FF 2A 02 F6 | 	mov	local03, result3
20518     0C 4E 05 F1 | 	add	fp, #12
2051c     A7 26 62 FC | 	wrlong	local01, fp
20520     04 4E 05 F1 | 	add	fp, #4
20524     A7 28 62 FC | 	wrlong	local02, fp
20528     04 4E 05 F1 | 	add	fp, #4
2052c     A7 2A 62 FC | 	wrlong	local03, fp
20530     14 4E 85 F1 | 	sub	fp, #20
20534     50 D0 BE FD | 	call	#_pop
20538     FF 2A 02 F6 | 	mov	local03, result3
2053c     A7 FA 61 FC | 	wrlong	result1, fp
20540     04 4E 05 F1 | 	add	fp, #4
20544     A7 FC 61 FC | 	wrlong	result2, fp
20548     04 4E 05 F1 | 	add	fp, #4
2054c     A7 2A 62 FC | 	wrlong	local03, fp
20550                 | ' 
20550                 | ' t2=pop()
20550                 | ' t1=pop()
20550                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
20550     08 4E 85 F1 | 	sub	fp, #8
20554     1D 2A 0E F2 | 	cmp	local03, #29 wz
20558     14 4E 05 A1 |  if_e	add	fp, #20
2055c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20560     14 4E 85 A1 |  if_e	sub	fp, #20
20564     16 2B 02 A6 |  if_e	mov	local03, local04
20568     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
2056c     1C 00 90 5D |  if_ne	jmp	#LR__2550
20570     A7 26 02 FB | 	rdlong	local01, fp
20574     0C 4E 05 F1 | 	add	fp, #12
20578     A7 28 02 FB | 	rdlong	local02, fp
2057c     0C 4E 85 F1 | 	sub	fp, #12
20580     14 27 02 F1 | 	add	local01, local02
20584     A7 26 62 FC | 	wrlong	local01, fp
20588     48 04 90 FD | 	jmp	#LR__2565
2058c                 | LR__2550
2058c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
2058c     08 4E 05 F1 | 	add	fp, #8
20590     A7 26 02 FB | 	rdlong	local01, fp
20594     08 4E 85 F1 | 	sub	fp, #8
20598     1D 26 0E F2 | 	cmp	local01, #29 wz
2059c     14 4E 05 A1 |  if_e	add	fp, #20
205a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205a4     14 4E 85 A1 |  if_e	sub	fp, #20
205a8     16 2B 02 A6 |  if_e	mov	local03, local04
205ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
205b0     28 00 90 5D |  if_ne	jmp	#LR__2551
205b4     A7 26 02 FB | 	rdlong	local01, fp
205b8     0C 4E 05 F1 | 	add	fp, #12
205bc     A7 28 02 FB | 	rdlong	local02, fp
205c0     0C 4E 85 F1 | 	sub	fp, #12
205c4     14 27 02 F1 | 	add	local01, local02
205c8     A7 26 62 FC | 	wrlong	local01, fp
205cc     08 4E 05 F1 | 	add	fp, #8
205d0     A7 38 68 FC | 	wrlong	#28, fp
205d4     08 4E 85 F1 | 	sub	fp, #8
205d8     F8 03 90 FD | 	jmp	#LR__2565
205dc                 | LR__2551
205dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
205dc     08 4E 05 F1 | 	add	fp, #8
205e0     A7 26 02 FB | 	rdlong	local01, fp
205e4     08 4E 85 F1 | 	sub	fp, #8
205e8     1D 26 0E F2 | 	cmp	local01, #29 wz
205ec     14 4E 05 A1 |  if_e	add	fp, #20
205f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
205f4     14 4E 85 A1 |  if_e	sub	fp, #20
205f8     16 2B 02 A6 |  if_e	mov	local03, local04
205fc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
20600     30 00 90 5D |  if_ne	jmp	#LR__2552
20604     A7 12 02 FB | 	rdlong	arg01, fp
20608     84 8D B0 FD | 	call	#__system___float_fromuns
2060c     FD 12 02 F6 | 	mov	arg01, result1
20610     0C 4E 05 F1 | 	add	fp, #12
20614     A7 14 02 FB | 	rdlong	arg02, fp
20618     0C 4E 85 F1 | 	sub	fp, #12
2061c     A4 8D B0 FD | 	call	#__system___float_add
20620     A7 FA 61 FC | 	wrlong	result1, fp
20624     08 4E 05 F1 | 	add	fp, #8
20628     A7 3C 68 FC | 	wrlong	#30, fp
2062c     08 4E 85 F1 | 	sub	fp, #8
20630     A0 03 90 FD | 	jmp	#LR__2565
20634                 | LR__2552
20634                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
20634     08 4E 05 F1 | 	add	fp, #8
20638     A7 26 02 FB | 	rdlong	local01, fp
2063c     08 4E 85 F1 | 	sub	fp, #8
20640     1C 26 0E F2 | 	cmp	local01, #28 wz
20644     14 4E 05 A1 |  if_e	add	fp, #20
20648     A7 2C 02 AB |  if_e	rdlong	local04, fp
2064c     14 4E 85 A1 |  if_e	sub	fp, #20
20650     16 2B 02 A6 |  if_e	mov	local03, local04
20654     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20658     1C 00 90 5D |  if_ne	jmp	#LR__2553
2065c     A7 26 02 FB | 	rdlong	local01, fp
20660     0C 4E 05 F1 | 	add	fp, #12
20664     A7 28 02 FB | 	rdlong	local02, fp
20668     0C 4E 85 F1 | 	sub	fp, #12
2066c     14 27 02 F1 | 	add	local01, local02
20670     A7 26 62 FC | 	wrlong	local01, fp
20674     5C 03 90 FD | 	jmp	#LR__2565
20678                 | LR__2553
20678                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
20678     08 4E 05 F1 | 	add	fp, #8
2067c     A7 26 02 FB | 	rdlong	local01, fp
20680     08 4E 85 F1 | 	sub	fp, #8
20684     1C 26 0E F2 | 	cmp	local01, #28 wz
20688     14 4E 05 A1 |  if_e	add	fp, #20
2068c     A7 2C 02 AB |  if_e	rdlong	local04, fp
20690     14 4E 85 A1 |  if_e	sub	fp, #20
20694     16 2B 02 A6 |  if_e	mov	local03, local04
20698     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
2069c     1C 00 90 5D |  if_ne	jmp	#LR__2554
206a0     A7 26 02 FB | 	rdlong	local01, fp
206a4     0C 4E 05 F1 | 	add	fp, #12
206a8     A7 28 02 FB | 	rdlong	local02, fp
206ac     0C 4E 85 F1 | 	sub	fp, #12
206b0     14 27 02 F1 | 	add	local01, local02
206b4     A7 26 62 FC | 	wrlong	local01, fp
206b8     18 03 90 FD | 	jmp	#LR__2565
206bc                 | LR__2554
206bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
206bc     08 4E 05 F1 | 	add	fp, #8
206c0     A7 26 02 FB | 	rdlong	local01, fp
206c4     08 4E 85 F1 | 	sub	fp, #8
206c8     1C 26 0E F2 | 	cmp	local01, #28 wz
206cc     14 4E 05 A1 |  if_e	add	fp, #20
206d0     A7 2C 02 AB |  if_e	rdlong	local04, fp
206d4     14 4E 85 A1 |  if_e	sub	fp, #20
206d8     16 2B 02 A6 |  if_e	mov	local03, local04
206dc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
206e0     40 00 90 5D |  if_ne	jmp	#LR__2555
206e4     A7 12 02 FB | 	rdlong	arg01, fp
206e8     09 13 52 F6 | 	abs	arg01, arg01 wc
206ec     1F 2E C6 C9 |  if_b	decod	local05, #31
206f0     00 2E 06 36 |  if_ae	mov	local05, #0
206f4     98 8C B0 FD | 	call	#__system___float_fromuns
206f8     17 FB 61 F5 | 	xor	result1, local05
206fc     FD 12 02 F6 | 	mov	arg01, result1
20700     0C 4E 05 F1 | 	add	fp, #12
20704     A7 14 02 FB | 	rdlong	arg02, fp
20708     0C 4E 85 F1 | 	sub	fp, #12
2070c     B4 8C B0 FD | 	call	#__system___float_add
20710     A7 FA 61 FC | 	wrlong	result1, fp
20714     08 4E 05 F1 | 	add	fp, #8
20718     A7 3C 68 FC | 	wrlong	#30, fp
2071c     08 4E 85 F1 | 	sub	fp, #8
20720     B0 02 90 FD | 	jmp	#LR__2565
20724                 | LR__2555
20724                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
20724     08 4E 05 F1 | 	add	fp, #8
20728     A7 26 02 FB | 	rdlong	local01, fp
2072c     08 4E 85 F1 | 	sub	fp, #8
20730     1E 26 0E F2 | 	cmp	local01, #30 wz
20734     14 4E 05 A1 |  if_e	add	fp, #20
20738     A7 2C 02 AB |  if_e	rdlong	local04, fp
2073c     14 4E 85 A1 |  if_e	sub	fp, #20
20740     16 2B 02 A6 |  if_e	mov	local03, local04
20744     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
20748     28 00 90 5D |  if_ne	jmp	#LR__2556
2074c     A7 26 02 FB | 	rdlong	local01, fp
20750     0C 4E 05 F1 | 	add	fp, #12
20754     A7 12 02 FB | 	rdlong	arg01, fp
20758     0C 4E 85 F1 | 	sub	fp, #12
2075c     30 8C B0 FD | 	call	#__system___float_fromuns
20760     FD 14 02 F6 | 	mov	arg02, result1
20764     13 13 02 F6 | 	mov	arg01, local01
20768     58 8C B0 FD | 	call	#__system___float_add
2076c     A7 FA 61 FC | 	wrlong	result1, fp
20770     60 02 90 FD | 	jmp	#LR__2565
20774                 | LR__2556
20774                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
20774     08 4E 05 F1 | 	add	fp, #8
20778     A7 26 02 FB | 	rdlong	local01, fp
2077c     08 4E 85 F1 | 	sub	fp, #8
20780     1E 26 0E F2 | 	cmp	local01, #30 wz
20784     14 4E 05 A1 |  if_e	add	fp, #20
20788     A7 2C 02 AB |  if_e	rdlong	local04, fp
2078c     14 4E 85 A1 |  if_e	sub	fp, #20
20790     16 2B 02 A6 |  if_e	mov	local03, local04
20794     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
20798     38 00 90 5D |  if_ne	jmp	#LR__2557
2079c     A7 26 02 FB | 	rdlong	local01, fp
207a0     0C 4E 05 F1 | 	add	fp, #12
207a4     A7 12 02 FB | 	rdlong	arg01, fp
207a8     0C 4E 85 F1 | 	sub	fp, #12
207ac     09 13 52 F6 | 	abs	arg01, arg01 wc
207b0     1F 2E C6 C9 |  if_b	decod	local05, #31
207b4     00 2E 06 36 |  if_ae	mov	local05, #0
207b8     D4 8B B0 FD | 	call	#__system___float_fromuns
207bc     17 FB 61 F5 | 	xor	result1, local05
207c0     FD 14 02 F6 | 	mov	arg02, result1
207c4     13 13 02 F6 | 	mov	arg01, local01
207c8     F8 8B B0 FD | 	call	#__system___float_add
207cc     A7 FA 61 FC | 	wrlong	result1, fp
207d0     00 02 90 FD | 	jmp	#LR__2565
207d4                 | LR__2557
207d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
207d4     08 4E 05 F1 | 	add	fp, #8
207d8     A7 26 02 FB | 	rdlong	local01, fp
207dc     08 4E 85 F1 | 	sub	fp, #8
207e0     1E 26 0E F2 | 	cmp	local01, #30 wz
207e4     14 4E 05 A1 |  if_e	add	fp, #20
207e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
207ec     14 4E 85 A1 |  if_e	sub	fp, #20
207f0     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
207f4     1C 00 90 5D |  if_ne	jmp	#LR__2558
207f8     A7 12 02 FB | 	rdlong	arg01, fp
207fc     0C 4E 05 F1 | 	add	fp, #12
20800     A7 14 02 FB | 	rdlong	arg02, fp
20804     0C 4E 85 F1 | 	sub	fp, #12
20808     B8 8B B0 FD | 	call	#__system___float_add
2080c     A7 FA 61 FC | 	wrlong	result1, fp
20810     C0 01 90 FD | 	jmp	#LR__2565
20814                 | LR__2558
20814                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
20814     08 4E 05 F1 | 	add	fp, #8
20818     A7 26 02 FB | 	rdlong	local01, fp
2081c     08 4E 85 F1 | 	sub	fp, #8
20820     1F 26 0E F2 | 	cmp	local01, #31 wz
20824     24 00 90 5D |  if_ne	jmp	#LR__2559
20828     14 4E 05 F1 | 	add	fp, #20
2082c     A7 2A 02 FB | 	rdlong	local03, fp
20830     14 4E 85 F1 | 	sub	fp, #20
20834     1F 2A 0E F2 | 	cmp	local03, #31 wz
20838     A7 04 68 5C |  if_ne	wrlong	#2, fp
2083c     08 4E 05 51 |  if_ne	add	fp, #8
20840     A7 FE 69 5C |  if_ne	wrlong	#255, fp
20844     08 4E 85 51 |  if_ne	sub	fp, #8
20848     88 01 90 5D |  if_ne	jmp	#LR__2565
2084c                 | LR__2559
2084c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
2084c     14 4E 05 F1 | 	add	fp, #20
20850     A7 26 02 FB | 	rdlong	local01, fp
20854     14 4E 85 F1 | 	sub	fp, #20
20858     1F 26 0E F2 | 	cmp	local01, #31 wz
2085c     24 00 90 5D |  if_ne	jmp	#LR__2560
20860     08 4E 05 F1 | 	add	fp, #8
20864     A7 2A 02 FB | 	rdlong	local03, fp
20868     08 4E 85 F1 | 	sub	fp, #8
2086c     1F 2A 0E F2 | 	cmp	local03, #31 wz
20870     A7 04 68 5C |  if_ne	wrlong	#2, fp
20874     08 4E 05 51 |  if_ne	add	fp, #8
20878     A7 FE 69 5C |  if_ne	wrlong	#255, fp
2087c     08 4E 85 51 |  if_ne	sub	fp, #8
20880     50 01 90 5D |  if_ne	jmp	#LR__2565
20884                 | LR__2560
20884                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
20884     08 4E 05 F1 | 	add	fp, #8
20888     A7 26 02 FB | 	rdlong	local01, fp
2088c     08 4E 85 F1 | 	sub	fp, #8
20890     1F 26 0E F2 | 	cmp	local01, #31 wz
20894     14 4E 05 A1 |  if_e	add	fp, #20
20898     A7 2A 02 AB |  if_e	rdlong	local03, fp
2089c     14 4E 85 A1 |  if_e	sub	fp, #20
208a0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208a4     1C 00 90 5D |  if_ne	jmp	#LR__2561
208a8     A7 12 02 FB | 	rdlong	arg01, fp
208ac     0C 4E 05 F1 | 	add	fp, #12
208b0     A7 14 02 FB | 	rdlong	arg02, fp
208b4     0C 4E 85 F1 | 	sub	fp, #12
208b8     B8 60 B0 FD | 	call	#__system___string_concat
208bc     A7 FA 61 FC | 	wrlong	result1, fp
208c0     10 01 90 FD | 	jmp	#LR__2565
208c4                 | LR__2561
208c4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
208c4     08 4E 05 F1 | 	add	fp, #8
208c8     A7 26 02 FB | 	rdlong	local01, fp
208cc     08 4E 85 F1 | 	sub	fp, #8
208d0     2B 26 0E F2 | 	cmp	local01, #43 wz
208d4     14 4E 05 A1 |  if_e	add	fp, #20
208d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
208dc     14 4E 85 A1 |  if_e	sub	fp, #20
208e0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
208e4     30 00 90 5D |  if_ne	jmp	#LR__2562
208e8     A7 12 02 FB | 	rdlong	arg01, fp
208ec     10 CE BE FD | 	call	#_convertstring
208f0     FD 12 02 F6 | 	mov	arg01, result1
208f4     0C 4E 05 F1 | 	add	fp, #12
208f8     A7 14 02 FB | 	rdlong	arg02, fp
208fc     0C 4E 85 F1 | 	sub	fp, #12
20900     70 60 B0 FD | 	call	#__system___string_concat
20904     A7 FA 61 FC | 	wrlong	result1, fp
20908     08 4E 05 F1 | 	add	fp, #8
2090c     A7 3E 68 FC | 	wrlong	#31, fp
20910     08 4E 85 F1 | 	sub	fp, #8
20914     BC 00 90 FD | 	jmp	#LR__2565
20918                 | LR__2562
20918                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
20918     08 4E 05 F1 | 	add	fp, #8
2091c     A7 26 02 FB | 	rdlong	local01, fp
20920     08 4E 85 F1 | 	sub	fp, #8
20924     1F 26 0E F2 | 	cmp	local01, #31 wz
20928     14 4E 05 A1 |  if_e	add	fp, #20
2092c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20930     14 4E 85 A1 |  if_e	sub	fp, #20
20934     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20938     28 00 90 5D |  if_ne	jmp	#LR__2563
2093c     A7 26 02 FB | 	rdlong	local01, fp
20940     0C 4E 05 F1 | 	add	fp, #12
20944     A7 12 02 FB | 	rdlong	arg01, fp
20948     0C 4E 85 F1 | 	sub	fp, #12
2094c     B0 CD BE FD | 	call	#_convertstring
20950     FD 14 02 F6 | 	mov	arg02, result1
20954     13 13 02 F6 | 	mov	arg01, local01
20958     18 60 B0 FD | 	call	#__system___string_concat
2095c     A7 FA 61 FC | 	wrlong	result1, fp
20960     70 00 90 FD | 	jmp	#LR__2565
20964                 | LR__2563
20964                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
20964     08 4E 05 F1 | 	add	fp, #8
20968     A7 26 02 FB | 	rdlong	local01, fp
2096c     08 4E 85 F1 | 	sub	fp, #8
20970     2B 26 0E F2 | 	cmp	local01, #43 wz
20974     14 4E 05 A1 |  if_e	add	fp, #20
20978     A7 2A 02 AB |  if_e	rdlong	local03, fp
2097c     14 4E 85 A1 |  if_e	sub	fp, #20
20980     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
20984     3C 00 90 5D |  if_ne	jmp	#LR__2564
20988     A7 12 02 FB | 	rdlong	arg01, fp
2098c     70 CD BE FD | 	call	#_convertstring
20990     FD 26 02 F6 | 	mov	local01, result1
20994     0C 4E 05 F1 | 	add	fp, #12
20998     A7 12 02 FB | 	rdlong	arg01, fp
2099c     0C 4E 85 F1 | 	sub	fp, #12
209a0     5C CD BE FD | 	call	#_convertstring
209a4     FD 14 02 F6 | 	mov	arg02, result1
209a8     13 13 02 F6 | 	mov	arg01, local01
209ac     C4 5F B0 FD | 	call	#__system___string_concat
209b0     A7 FA 61 FC | 	wrlong	result1, fp
209b4     08 4E 05 F1 | 	add	fp, #8
209b8     A7 3E 68 FC | 	wrlong	#31, fp
209bc     08 4E 85 F1 | 	sub	fp, #8
209c0     10 00 90 FD | 	jmp	#LR__2565
209c4                 | LR__2564
209c4     A7 08 68 FC | 	wrlong	#4, fp
209c8     08 4E 05 F1 | 	add	fp, #8
209cc     A7 FE 69 FC | 	wrlong	#255, fp
209d0     08 4E 85 F1 | 	sub	fp, #8
209d4                 | LR__2565
209d4     A7 12 02 F6 | 	mov	arg01, fp
209d8     44 CC BE FD | 	call	#_push
209dc     A7 F0 03 F6 | 	mov	ptra, fp
209e0     B2 00 A0 FD | 	call	#popregs_
209e4                 | _do_plus_ret
209e4     2D 00 64 FD | 	ret
209e8                 | 
209e8                 | ' 
209e8                 | ' '--------------------------------- power (^)
209e8                 | ' 
209e8                 | ' sub do_power 
209e8                 | _do_power
209e8     02 4A 05 F6 | 	mov	COUNT_, #2
209ec     A8 00 A0 FD | 	call	#pushregs_
209f0     18 F0 07 F1 | 	add	ptra, #24
209f4     90 CB BE FD | 	call	#_pop
209f8     FD 14 02 F6 | 	mov	arg02, result1
209fc     FE 12 02 F6 | 	mov	arg01, result2
20a00     FF 26 02 F6 | 	mov	local01, result3
20a04     0C 4E 05 F1 | 	add	fp, #12
20a08     A7 14 62 FC | 	wrlong	arg02, fp
20a0c     04 4E 05 F1 | 	add	fp, #4
20a10     A7 12 62 FC | 	wrlong	arg01, fp
20a14     04 4E 05 F1 | 	add	fp, #4
20a18     A7 26 62 FC | 	wrlong	local01, fp
20a1c     14 4E 85 F1 | 	sub	fp, #20
20a20     64 CB BE FD | 	call	#_pop
20a24     A7 FA 61 FC | 	wrlong	result1, fp
20a28     04 4E 05 F1 | 	add	fp, #4
20a2c     A7 FC 61 FC | 	wrlong	result2, fp
20a30     04 4E 05 F1 | 	add	fp, #4
20a34     A7 FE 61 FC | 	wrlong	result3, fp
20a38                 | ' 
20a38                 | ' t2=pop()
20a38                 | ' t1=pop()
20a38                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
20a38     08 4E 85 F1 | 	sub	fp, #8
20a3c     1F FE 0D F2 | 	cmp	result3, #31 wz
20a40     14 4E 05 51 |  if_ne	add	fp, #20
20a44     A7 26 02 5B |  if_ne	rdlong	local01, fp
20a48     14 4E 85 51 |  if_ne	sub	fp, #20
20a4c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
20a50     A7 18 68 AC |  if_e	wrlong	#12, fp
20a54     08 4E 05 A1 |  if_e	add	fp, #8
20a58     A7 FE 69 AC |  if_e	wrlong	#255, fp
20a5c     08 4E 85 A1 |  if_e	sub	fp, #8
20a60     38 01 90 AD |  if_e	jmp	#LR__2575
20a64                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
20a64     08 4E 05 F1 | 	add	fp, #8
20a68     A7 14 02 FB | 	rdlong	arg02, fp
20a6c     08 4E 85 F1 | 	sub	fp, #8
20a70     1C 14 0E F2 | 	cmp	arg02, #28 wz
20a74     28 00 90 5D |  if_ne	jmp	#LR__2570
20a78     08 4E 05 F1 | 	add	fp, #8
20a7c     A7 3C 68 FC | 	wrlong	#30, fp
20a80     08 4E 85 F1 | 	sub	fp, #8
20a84     A7 12 02 FB | 	rdlong	arg01, fp
20a88     09 13 52 F6 | 	abs	arg01, arg01 wc
20a8c     1F 28 C6 C9 |  if_b	decod	local02, #31
20a90     00 28 06 36 |  if_ae	mov	local02, #0
20a94     F8 88 B0 FD | 	call	#__system___float_fromuns
20a98     14 FB 61 F5 | 	xor	result1, local02
20a9c     A7 FA 61 FC | 	wrlong	result1, fp
20aa0                 | LR__2570
20aa0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
20aa0     08 4E 05 F1 | 	add	fp, #8
20aa4     A7 14 02 FB | 	rdlong	arg02, fp
20aa8     08 4E 85 F1 | 	sub	fp, #8
20aac     1D 14 0E F2 | 	cmp	arg02, #29 wz
20ab0     18 00 90 5D |  if_ne	jmp	#LR__2571
20ab4     08 4E 05 F1 | 	add	fp, #8
20ab8     A7 3C 68 FC | 	wrlong	#30, fp
20abc     08 4E 85 F1 | 	sub	fp, #8
20ac0     A7 12 02 FB | 	rdlong	arg01, fp
20ac4     C8 88 B0 FD | 	call	#__system___float_fromuns
20ac8     A7 FA 61 FC | 	wrlong	result1, fp
20acc                 | LR__2571
20acc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
20acc     14 4E 05 F1 | 	add	fp, #20
20ad0     A7 14 02 FB | 	rdlong	arg02, fp
20ad4     14 4E 85 F1 | 	sub	fp, #20
20ad8     1C 14 0E F2 | 	cmp	arg02, #28 wz
20adc     34 00 90 5D |  if_ne	jmp	#LR__2572
20ae0     14 4E 05 F1 | 	add	fp, #20
20ae4     A7 3C 68 FC | 	wrlong	#30, fp
20ae8     08 4E 85 F1 | 	sub	fp, #8
20aec     A7 12 02 FB | 	rdlong	arg01, fp
20af0     0C 4E 85 F1 | 	sub	fp, #12
20af4     09 13 52 F6 | 	abs	arg01, arg01 wc
20af8     1F 28 C6 C9 |  if_b	decod	local02, #31
20afc     00 28 06 36 |  if_ae	mov	local02, #0
20b00     8C 88 B0 FD | 	call	#__system___float_fromuns
20b04     14 FB 61 F5 | 	xor	result1, local02
20b08     0C 4E 05 F1 | 	add	fp, #12
20b0c     A7 FA 61 FC | 	wrlong	result1, fp
20b10     0C 4E 85 F1 | 	sub	fp, #12
20b14                 | LR__2572
20b14                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
20b14     14 4E 05 F1 | 	add	fp, #20
20b18     A7 14 02 FB | 	rdlong	arg02, fp
20b1c     14 4E 85 F1 | 	sub	fp, #20
20b20     1D 14 0E F2 | 	cmp	arg02, #29 wz
20b24     24 00 90 5D |  if_ne	jmp	#LR__2573
20b28     14 4E 05 F1 | 	add	fp, #20
20b2c     A7 3C 68 FC | 	wrlong	#30, fp
20b30     08 4E 85 F1 | 	sub	fp, #8
20b34     A7 12 02 FB | 	rdlong	arg01, fp
20b38     0C 4E 85 F1 | 	sub	fp, #12
20b3c     50 88 B0 FD | 	call	#__system___float_fromuns
20b40     0C 4E 05 F1 | 	add	fp, #12
20b44     A7 FA 61 FC | 	wrlong	result1, fp
20b48     0C 4E 85 F1 | 	sub	fp, #12
20b4c                 | LR__2573
20b4c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
20b4c     08 4E 05 F1 | 	add	fp, #8
20b50     A7 14 02 FB | 	rdlong	arg02, fp
20b54     08 4E 85 F1 | 	sub	fp, #8
20b58     1E 14 0E F2 | 	cmp	arg02, #30 wz
20b5c     14 4E 05 A1 |  if_e	add	fp, #20
20b60     A7 26 02 AB |  if_e	rdlong	local01, fp
20b64     14 4E 85 A1 |  if_e	sub	fp, #20
20b68     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
20b6c     1C 00 90 5D |  if_ne	jmp	#LR__2574
20b70     A7 12 02 FB | 	rdlong	arg01, fp
20b74     0C 4E 05 F1 | 	add	fp, #12
20b78     A7 14 02 FB | 	rdlong	arg02, fp
20b7c     0C 4E 85 F1 | 	sub	fp, #12
20b80     18 9B B0 FD | 	call	#__system____builtin_powf
20b84     A7 FA 61 FC | 	wrlong	result1, fp
20b88     10 00 90 FD | 	jmp	#LR__2575
20b8c                 | LR__2574
20b8c     A7 1A 68 FC | 	wrlong	#13, fp
20b90     08 4E 05 F1 | 	add	fp, #8
20b94     A7 FE 69 FC | 	wrlong	#255, fp
20b98     08 4E 85 F1 | 	sub	fp, #8
20b9c                 | LR__2575
20b9c     A7 12 02 F6 | 	mov	arg01, fp
20ba0     7C CA BE FD | 	call	#_push
20ba4     A7 F0 03 F6 | 	mov	ptra, fp
20ba8     B2 00 A0 FD | 	call	#popregs_
20bac                 | _do_power_ret
20bac     2D 00 64 FD | 	ret
20bb0                 | 
20bb0                 | ' 
20bb0                 | ' '--------------------------------- SHL
20bb0                 | ' 
20bb0                 | ' sub do_shl 
20bb0                 | _do_shl
20bb0     03 4A 05 F6 | 	mov	COUNT_, #3
20bb4     A8 00 A0 FD | 	call	#pushregs_
20bb8     18 F0 07 F1 | 	add	ptra, #24
20bbc     C8 C9 BE FD | 	call	#_pop
20bc0     FD 12 02 F6 | 	mov	arg01, result1
20bc4     FE 26 02 F6 | 	mov	local01, result2
20bc8     FF 28 02 F6 | 	mov	local02, result3
20bcc     0C 4E 05 F1 | 	add	fp, #12
20bd0     A7 12 62 FC | 	wrlong	arg01, fp
20bd4     04 4E 05 F1 | 	add	fp, #4
20bd8     A7 26 62 FC | 	wrlong	local01, fp
20bdc     04 4E 05 F1 | 	add	fp, #4
20be0     A7 28 62 FC | 	wrlong	local02, fp
20be4     14 4E 85 F1 | 	sub	fp, #20
20be8     9C C9 BE FD | 	call	#_pop
20bec     FF 2A 02 F6 | 	mov	local03, result3
20bf0     A7 FA 61 FC | 	wrlong	result1, fp
20bf4     04 4E 05 F1 | 	add	fp, #4
20bf8     A7 FC 61 FC | 	wrlong	result2, fp
20bfc     04 4E 05 F1 | 	add	fp, #4
20c00     A7 2A 62 FC | 	wrlong	local03, fp
20c04                 | ' 
20c04                 | ' t2=pop()
20c04                 | ' t1=pop()
20c04                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20c04     08 4E 85 F1 | 	sub	fp, #8
20c08     1C 2A 0E F2 | 	cmp	local03, #28 wz
20c0c     A7 2A 02 AB |  if_e	rdlong	local03, fp
20c10     A7 2A 62 AC |  if_e	wrlong	local03, fp
20c14     08 4E 05 A1 |  if_e	add	fp, #8
20c18     A7 3A 68 AC |  if_e	wrlong	#29, fp
20c1c     08 4E 85 A1 |  if_e	sub	fp, #8
20c20                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20c20     14 4E 05 F1 | 	add	fp, #20
20c24     A7 2A 02 FB | 	rdlong	local03, fp
20c28     14 4E 85 F1 | 	sub	fp, #20
20c2c     1C 2A 0E F2 | 	cmp	local03, #28 wz
20c30     18 00 90 5D |  if_ne	jmp	#LR__2580
20c34     0C 4E 05 F1 | 	add	fp, #12
20c38     A7 2A 02 FB | 	rdlong	local03, fp
20c3c     A7 2A 62 FC | 	wrlong	local03, fp
20c40     08 4E 05 F1 | 	add	fp, #8
20c44     A7 3A 68 FC | 	wrlong	#29, fp
20c48     14 4E 85 F1 | 	sub	fp, #20
20c4c                 | LR__2580
20c4c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
20c4c     08 4E 05 F1 | 	add	fp, #8
20c50     A7 2A 02 FB | 	rdlong	local03, fp
20c54     08 4E 85 F1 | 	sub	fp, #8
20c58     1F 2A 0E F2 | 	cmp	local03, #31 wz
20c5c     14 4E 05 51 |  if_ne	add	fp, #20
20c60     A7 28 02 5B |  if_ne	rdlong	local02, fp
20c64     14 4E 85 51 |  if_ne	sub	fp, #20
20c68     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20c6c     08 4E 05 51 |  if_ne	add	fp, #8
20c70     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20c74     08 4E 85 51 |  if_ne	sub	fp, #8
20c78     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20c7c     14 4E 05 51 |  if_ne	add	fp, #20
20c80     14 4E 85 51 |  if_ne	sub	fp, #20
20c84     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20c88     A7 0C 68 AC |  if_e	wrlong	#6, fp
20c8c     08 4E 05 A1 |  if_e	add	fp, #8
20c90     A7 FE 69 AC |  if_e	wrlong	#255, fp
20c94     08 4E 85 A1 |  if_e	sub	fp, #8
20c98     18 00 90 AD |  if_e	jmp	#LR__2581
20c9c     A7 2A 02 FB | 	rdlong	local03, fp
20ca0     0C 4E 05 F1 | 	add	fp, #12
20ca4     A7 26 02 FB | 	rdlong	local01, fp
20ca8     0C 4E 85 F1 | 	sub	fp, #12
20cac     13 2B 62 F0 | 	shl	local03, local01
20cb0     A7 2A 62 FC | 	wrlong	local03, fp
20cb4                 | LR__2581
20cb4     A7 12 02 F6 | 	mov	arg01, fp
20cb8     64 C9 BE FD | 	call	#_push
20cbc     A7 F0 03 F6 | 	mov	ptra, fp
20cc0     B2 00 A0 FD | 	call	#popregs_
20cc4                 | _do_shl_ret
20cc4     2D 00 64 FD | 	ret
20cc8                 | 
20cc8                 | ' 
20cc8                 | ' '--------------------------------- SHR
20cc8                 | ' 
20cc8                 | ' sub do_shr 
20cc8                 | _do_shr
20cc8     03 4A 05 F6 | 	mov	COUNT_, #3
20ccc     A8 00 A0 FD | 	call	#pushregs_
20cd0     18 F0 07 F1 | 	add	ptra, #24
20cd4     B0 C8 BE FD | 	call	#_pop
20cd8     FD 12 02 F6 | 	mov	arg01, result1
20cdc     FE 26 02 F6 | 	mov	local01, result2
20ce0     FF 28 02 F6 | 	mov	local02, result3
20ce4     0C 4E 05 F1 | 	add	fp, #12
20ce8     A7 12 62 FC | 	wrlong	arg01, fp
20cec     04 4E 05 F1 | 	add	fp, #4
20cf0     A7 26 62 FC | 	wrlong	local01, fp
20cf4     04 4E 05 F1 | 	add	fp, #4
20cf8     A7 28 62 FC | 	wrlong	local02, fp
20cfc     14 4E 85 F1 | 	sub	fp, #20
20d00     84 C8 BE FD | 	call	#_pop
20d04     FF 2A 02 F6 | 	mov	local03, result3
20d08     A7 FA 61 FC | 	wrlong	result1, fp
20d0c     04 4E 05 F1 | 	add	fp, #4
20d10     A7 FC 61 FC | 	wrlong	result2, fp
20d14     04 4E 05 F1 | 	add	fp, #4
20d18     A7 2A 62 FC | 	wrlong	local03, fp
20d1c                 | ' 
20d1c                 | ' t2=pop()
20d1c                 | ' t1=pop()
20d1c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
20d1c     08 4E 85 F1 | 	sub	fp, #8
20d20     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d24     A7 2A 02 AB |  if_e	rdlong	local03, fp
20d28     A7 2A 62 AC |  if_e	wrlong	local03, fp
20d2c     08 4E 05 A1 |  if_e	add	fp, #8
20d30     A7 3A 68 AC |  if_e	wrlong	#29, fp
20d34     08 4E 85 A1 |  if_e	sub	fp, #8
20d38                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
20d38     14 4E 05 F1 | 	add	fp, #20
20d3c     A7 2A 02 FB | 	rdlong	local03, fp
20d40     14 4E 85 F1 | 	sub	fp, #20
20d44     1C 2A 0E F2 | 	cmp	local03, #28 wz
20d48     18 00 90 5D |  if_ne	jmp	#LR__2590
20d4c     0C 4E 05 F1 | 	add	fp, #12
20d50     A7 2A 02 FB | 	rdlong	local03, fp
20d54     A7 2A 62 FC | 	wrlong	local03, fp
20d58     08 4E 05 F1 | 	add	fp, #8
20d5c     A7 3A 68 FC | 	wrlong	#29, fp
20d60     14 4E 85 F1 | 	sub	fp, #20
20d64                 | LR__2590
20d64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
20d64     08 4E 05 F1 | 	add	fp, #8
20d68     A7 2A 02 FB | 	rdlong	local03, fp
20d6c     08 4E 85 F1 | 	sub	fp, #8
20d70     1F 2A 0E F2 | 	cmp	local03, #31 wz
20d74     14 4E 05 51 |  if_ne	add	fp, #20
20d78     A7 28 02 5B |  if_ne	rdlong	local02, fp
20d7c     14 4E 85 51 |  if_ne	sub	fp, #20
20d80     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
20d84     08 4E 05 51 |  if_ne	add	fp, #8
20d88     A7 2A 02 5B |  if_ne	rdlong	local03, fp
20d8c     08 4E 85 51 |  if_ne	sub	fp, #8
20d90     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
20d94     14 4E 05 51 |  if_ne	add	fp, #20
20d98     14 4E 85 51 |  if_ne	sub	fp, #20
20d9c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
20da0     A7 0C 68 AC |  if_e	wrlong	#6, fp
20da4     08 4E 05 A1 |  if_e	add	fp, #8
20da8     A7 FE 69 AC |  if_e	wrlong	#255, fp
20dac     08 4E 85 A1 |  if_e	sub	fp, #8
20db0     18 00 90 AD |  if_e	jmp	#LR__2591
20db4     A7 2A 02 FB | 	rdlong	local03, fp
20db8     0C 4E 05 F1 | 	add	fp, #12
20dbc     A7 26 02 FB | 	rdlong	local01, fp
20dc0     0C 4E 85 F1 | 	sub	fp, #12
20dc4     13 2B 42 F0 | 	shr	local03, local01
20dc8     A7 2A 62 FC | 	wrlong	local03, fp
20dcc                 | LR__2591
20dcc     A7 12 02 F6 | 	mov	arg01, fp
20dd0     4C C8 BE FD | 	call	#_push
20dd4     A7 F0 03 F6 | 	mov	ptra, fp
20dd8     B2 00 A0 FD | 	call	#popregs_
20ddc                 | _do_shr_ret
20ddc     2D 00 64 FD | 	ret
20de0                 | 
20de0                 | ' 
20de0                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
20de0                 | ' 
20de0                 | ' ''----------------------------------------------------------------------------------------------------
20de0                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
20de0                 | ' ''----------------------------------------------------------------------------------------------------
20de0                 | ' 
20de0                 | ' ''--------------------------- Command function pointers
20de0                 | ' 
20de0                 | ' sub init_commands
20de0                 | _init_commands
20de0                 | ' 
20de0                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
20de0     00 00 06 F6 | 	mov	_var01, #0
20de4     97 16 48 FB | 	callpa	#(@LR__2601-@LR__2600)>>2,fcache_load_ptr_
20de8                 | LR__2600
20de8     00 FB 01 F6 | 	mov	result1, _var01
20dec     02 FA 65 F0 | 	shl	result1, #2
20df0     43 00 00 FF 
20df4     60 E4 05 F1 | 	add	objptr, ##34400
20df8     F2 FA 01 F1 | 	add	result1, objptr
20dfc     43 00 00 FF 
20e00     60 E4 85 F1 | 	sub	objptr, ##34400
20e04     FD E4 61 FC | 	wrlong	objptr, result1
20e08     01 00 06 F1 | 	add	_var01, #1
20e0c     00 01 56 F2 | 	cmps	_var01, #256 wc
20e10     D4 FF 9F CD |  if_b	jmp	#LR__2600
20e14                 | LR__2601
20e14     F2 FA 01 F6 | 	mov	result1, objptr
20e18     14 FA 25 F4 | 	bith	result1, #20
20e1c     43 00 00 FF 
20e20     64 E4 05 F1 | 	add	objptr, ##34404
20e24     F2 FA 61 FC | 	wrlong	result1, objptr
20e28     43 00 00 FF 
20e2c     64 E4 85 F1 | 	sub	objptr, ##34404
20e30     F2 FA 01 F6 | 	mov	result1, objptr
20e34     15 FA 25 F4 | 	bith	result1, #21
20e38     43 00 00 FF 
20e3c     68 E4 05 F1 | 	add	objptr, ##34408
20e40     F2 FA 61 FC | 	wrlong	result1, objptr
20e44     43 00 00 FF 
20e48     68 E4 85 F1 | 	sub	objptr, ##34408
20e4c     F2 FA 01 F6 | 	mov	result1, objptr
20e50     34 FA 25 F4 | 	bith	result1, #52
20e54     43 00 00 FF 
20e58     6C E4 05 F1 | 	add	objptr, ##34412
20e5c     F2 FA 61 FC | 	wrlong	result1, objptr
20e60     43 00 00 FF 
20e64     6C E4 85 F1 | 	sub	objptr, ##34412
20e68     F2 FA 01 F6 | 	mov	result1, objptr
20e6c     16 FA 25 F4 | 	bith	result1, #22
20e70     43 00 00 FF 
20e74     74 E4 05 F1 | 	add	objptr, ##34420
20e78     F2 FA 61 FC | 	wrlong	result1, objptr
20e7c     43 00 00 FF 
20e80     74 E4 85 F1 | 	sub	objptr, ##34420
20e84     F2 FA 01 F6 | 	mov	result1, objptr
20e88     00 28 00 FF 
20e8c     00 FA 45 F5 | 	or	result1, ##5242880
20e90     43 00 00 FF 
20e94     78 E4 05 F1 | 	add	objptr, ##34424
20e98     F2 FA 61 FC | 	wrlong	result1, objptr
20e9c     43 00 00 FF 
20ea0     78 E4 85 F1 | 	sub	objptr, ##34424
20ea4     F2 FA 01 F6 | 	mov	result1, objptr
20ea8     35 FA 25 F4 | 	bith	result1, #53
20eac     43 00 00 FF 
20eb0     7C E4 05 F1 | 	add	objptr, ##34428
20eb4     F2 FA 61 FC | 	wrlong	result1, objptr
20eb8     43 00 00 FF 
20ebc     7C E4 85 F1 | 	sub	objptr, ##34428
20ec0     F2 FA 01 F6 | 	mov	result1, objptr
20ec4     54 FA 25 F4 | 	bith	result1, #84
20ec8     43 00 00 FF 
20ecc     80 E4 05 F1 | 	add	objptr, ##34432
20ed0     F2 FA 61 FC | 	wrlong	result1, objptr
20ed4     43 00 00 FF 
20ed8     80 E4 85 F1 | 	sub	objptr, ##34432
20edc     F2 FA 01 F6 | 	mov	result1, objptr
20ee0     17 FA 25 F4 | 	bith	result1, #23
20ee4     43 00 00 FF 
20ee8     84 E4 05 F1 | 	add	objptr, ##34436
20eec     F2 FA 61 FC | 	wrlong	result1, objptr
20ef0     43 00 00 FF 
20ef4     84 E4 85 F1 | 	sub	objptr, ##34436
20ef8     F2 FA 01 F6 | 	mov	result1, objptr
20efc     00 48 00 FF 
20f00     00 FA 45 F5 | 	or	result1, ##9437184
20f04     43 00 00 FF 
20f08     88 E4 05 F1 | 	add	objptr, ##34440
20f0c     F2 FA 61 FC | 	wrlong	result1, objptr
20f10     43 00 00 FF 
20f14     88 E4 85 F1 | 	sub	objptr, ##34440
20f18     F2 FA 01 F6 | 	mov	result1, objptr
20f1c     00 50 00 FF 
20f20     00 FA 45 F5 | 	or	result1, ##10485760
20f24     43 00 00 FF 
20f28     8C E4 05 F1 | 	add	objptr, ##34444
20f2c     F2 FA 61 FC | 	wrlong	result1, objptr
20f30     43 00 00 FF 
20f34     8C E4 85 F1 | 	sub	objptr, ##34444
20f38     F2 FA 01 F6 | 	mov	result1, objptr
20f3c     00 58 00 FF 
20f40     00 FA 45 F5 | 	or	result1, ##11534336
20f44     43 00 00 FF 
20f48     90 E4 05 F1 | 	add	objptr, ##34448
20f4c     F2 FA 61 FC | 	wrlong	result1, objptr
20f50     43 00 00 FF 
20f54     90 E4 85 F1 | 	sub	objptr, ##34448
20f58     F2 FA 01 F6 | 	mov	result1, objptr
20f5c     36 FA 25 F4 | 	bith	result1, #54
20f60     43 00 00 FF 
20f64     A4 E4 05 F1 | 	add	objptr, ##34468
20f68     F2 FA 61 FC | 	wrlong	result1, objptr
20f6c     43 00 00 FF 
20f70     A4 E4 85 F1 | 	sub	objptr, ##34468
20f74     F2 FA 01 F6 | 	mov	result1, objptr
20f78     00 68 00 FF 
20f7c     00 FA 45 F5 | 	or	result1, ##13631488
20f80     43 00 00 FF 
20f84     D4 E4 05 F1 | 	add	objptr, ##34516
20f88     F2 FA 61 FC | 	wrlong	result1, objptr
20f8c     43 00 00 FF 
20f90     D4 E4 85 F1 | 	sub	objptr, ##34516
20f94     F2 FA 01 F6 | 	mov	result1, objptr
20f98     00 68 00 FF 
20f9c     00 FA 45 F5 | 	or	result1, ##13631488
20fa0     43 00 00 FF 
20fa4     D0 E4 05 F1 | 	add	objptr, ##34512
20fa8     F2 FA 61 FC | 	wrlong	result1, objptr
20fac     43 00 00 FF 
20fb0     D0 E4 85 F1 | 	sub	objptr, ##34512
20fb4     F2 FA 01 F6 | 	mov	result1, objptr
20fb8     00 68 00 FF 
20fbc     00 FA 45 F5 | 	or	result1, ##13631488
20fc0     43 00 00 FF 
20fc4     D8 E4 05 F1 | 	add	objptr, ##34520
20fc8     F2 FA 61 FC | 	wrlong	result1, objptr
20fcc     43 00 00 FF 
20fd0     D8 E4 85 F1 | 	sub	objptr, ##34520
20fd4     F2 FA 01 F6 | 	mov	result1, objptr
20fd8     00 68 00 FF 
20fdc     00 FA 45 F5 | 	or	result1, ##13631488
20fe0     43 00 00 FF 
20fe4     DC E4 05 F1 | 	add	objptr, ##34524
20fe8     F2 FA 61 FC | 	wrlong	result1, objptr
20fec     43 00 00 FF 
20ff0     DC E4 85 F1 | 	sub	objptr, ##34524
20ff4     F2 FA 01 F6 | 	mov	result1, objptr
20ff8     00 68 00 FF 
20ffc     00 FA 45 F5 | 	or	result1, ##13631488
21000     43 00 00 FF 
21004     0C E5 05 F1 | 	add	objptr, ##34572
21008     F2 FA 61 FC | 	wrlong	result1, objptr
2100c     43 00 00 FF 
21010     0C E5 85 F1 | 	sub	objptr, ##34572
21014     F2 FA 01 F6 | 	mov	result1, objptr
21018     55 FA 25 F4 | 	bith	result1, #85
2101c     43 00 00 FF 
21020     BC E4 05 F1 | 	add	objptr, ##34492
21024     F2 FA 61 FC | 	wrlong	result1, objptr
21028     43 00 00 FF 
2102c     BC E4 85 F1 | 	sub	objptr, ##34492
21030     F2 FA 01 F6 | 	mov	result1, objptr
21034     00 68 00 FF 
21038     00 FA 45 F5 | 	or	result1, ##13631488
2103c     43 00 00 FF 
21040     10 E5 05 F1 | 	add	objptr, ##34576
21044     F2 FA 61 FC | 	wrlong	result1, objptr
21048     43 00 00 FF 
2104c     10 E5 85 F1 | 	sub	objptr, ##34576
21050     F2 FA 01 F6 | 	mov	result1, objptr
21054     00 68 00 FF 
21058     00 FA 45 F5 | 	or	result1, ##13631488
2105c     43 00 00 FF 
21060     E0 E4 05 F1 | 	add	objptr, ##34528
21064     F2 FA 61 FC | 	wrlong	result1, objptr
21068     43 00 00 FF 
2106c     E0 E4 85 F1 | 	sub	objptr, ##34528
21070     F2 FA 01 F6 | 	mov	result1, objptr
21074     00 68 00 FF 
21078     00 FA 45 F5 | 	or	result1, ##13631488
2107c     43 00 00 FF 
21080     E4 E4 05 F1 | 	add	objptr, ##34532
21084     F2 FA 61 FC | 	wrlong	result1, objptr
21088     43 00 00 FF 
2108c     E4 E4 85 F1 | 	sub	objptr, ##34532
21090     F2 FA 01 F6 | 	mov	result1, objptr
21094     00 68 00 FF 
21098     00 FA 45 F5 | 	or	result1, ##13631488
2109c     43 00 00 FF 
210a0     E8 E4 05 F1 | 	add	objptr, ##34536
210a4     F2 FA 61 FC | 	wrlong	result1, objptr
210a8     43 00 00 FF 
210ac     E8 E4 85 F1 | 	sub	objptr, ##34536
210b0     F2 FA 01 F6 | 	mov	result1, objptr
210b4     74 FA 25 F4 | 	bith	result1, #116
210b8     43 00 00 FF 
210bc     60 E5 05 F1 | 	add	objptr, ##34656
210c0     F2 FA 61 FC | 	wrlong	result1, objptr
210c4     43 00 00 FF 
210c8     60 E5 85 F1 | 	sub	objptr, ##34656
210cc     F2 FA 01 F6 | 	mov	result1, objptr
210d0     18 FA 25 F4 | 	bith	result1, #24
210d4     43 00 00 FF 
210d8     64 E5 05 F1 | 	add	objptr, ##34660
210dc     F2 FA 61 FC | 	wrlong	result1, objptr
210e0     43 00 00 FF 
210e4     64 E5 85 F1 | 	sub	objptr, ##34660
210e8     F2 FA 01 F6 | 	mov	result1, objptr
210ec     00 88 00 FF 
210f0     00 FA 45 F5 | 	or	result1, ##17825792
210f4     43 00 00 FF 
210f8     68 E5 05 F1 | 	add	objptr, ##34664
210fc     F2 FA 61 FC | 	wrlong	result1, objptr
21100     43 00 00 FF 
21104     68 E5 85 F1 | 	sub	objptr, ##34664
21108     F2 FA 01 F6 | 	mov	result1, objptr
2110c     00 90 00 FF 
21110     00 FA 45 F5 | 	or	result1, ##18874368
21114     43 00 00 FF 
21118     6C E5 05 F1 | 	add	objptr, ##34668
2111c     F2 FA 61 FC | 	wrlong	result1, objptr
21120     43 00 00 FF 
21124     6C E5 85 F1 | 	sub	objptr, ##34668
21128     F2 FA 01 F6 | 	mov	result1, objptr
2112c     00 98 00 FF 
21130     00 FA 45 F5 | 	or	result1, ##19922944
21134     43 00 00 FF 
21138     70 E5 05 F1 | 	add	objptr, ##34672
2113c     F2 FA 61 FC | 	wrlong	result1, objptr
21140     43 00 00 FF 
21144     70 E5 85 F1 | 	sub	objptr, ##34672
21148     F2 FA 01 F6 | 	mov	result1, objptr
2114c     00 A0 00 FF 
21150     00 FA 45 F5 | 	or	result1, ##20971520
21154     43 00 00 FF 
21158     74 E5 05 F1 | 	add	objptr, ##34676
2115c     F2 FA 61 FC | 	wrlong	result1, objptr
21160     43 00 00 FF 
21164     74 E5 85 F1 | 	sub	objptr, ##34676
21168     F2 FA 01 F6 | 	mov	result1, objptr
2116c     00 A8 00 FF 
21170     00 FA 45 F5 | 	or	result1, ##22020096
21174     43 00 00 FF 
21178     78 E5 05 F1 | 	add	objptr, ##34680
2117c     F2 FA 61 FC | 	wrlong	result1, objptr
21180     43 00 00 FF 
21184     78 E5 85 F1 | 	sub	objptr, ##34680
21188     F2 FA 01 F6 | 	mov	result1, objptr
2118c     00 B0 00 FF 
21190     00 FA 45 F5 | 	or	result1, ##23068672
21194     43 00 00 FF 
21198     7C E5 05 F1 | 	add	objptr, ##34684
2119c     F2 FA 61 FC | 	wrlong	result1, objptr
211a0     43 00 00 FF 
211a4     7C E5 85 F1 | 	sub	objptr, ##34684
211a8     F2 FA 01 F6 | 	mov	result1, objptr
211ac     00 B8 00 FF 
211b0     00 FA 45 F5 | 	or	result1, ##24117248
211b4     43 00 00 FF 
211b8     80 E5 05 F1 | 	add	objptr, ##34688
211bc     F2 FA 61 FC | 	wrlong	result1, objptr
211c0     43 00 00 FF 
211c4     80 E5 85 F1 | 	sub	objptr, ##34688
211c8     F2 FA 01 F6 | 	mov	result1, objptr
211cc     37 FA 25 F4 | 	bith	result1, #55
211d0     43 00 00 FF 
211d4     84 E5 05 F1 | 	add	objptr, ##34692
211d8     F2 FA 61 FC | 	wrlong	result1, objptr
211dc     43 00 00 FF 
211e0     84 E5 85 F1 | 	sub	objptr, ##34692
211e4     F2 FA 01 F6 | 	mov	result1, objptr
211e8     00 C8 00 FF 
211ec     00 FA 45 F5 | 	or	result1, ##26214400
211f0     43 00 00 FF 
211f4     88 E5 05 F1 | 	add	objptr, ##34696
211f8     F2 FA 61 FC | 	wrlong	result1, objptr
211fc     43 00 00 FF 
21200     88 E5 85 F1 | 	sub	objptr, ##34696
21204     F2 FA 01 F6 | 	mov	result1, objptr
21208     00 D0 00 FF 
2120c     00 FA 45 F5 | 	or	result1, ##27262976
21210     43 00 00 FF 
21214     8C E5 05 F1 | 	add	objptr, ##34700
21218     F2 FA 61 FC | 	wrlong	result1, objptr
2121c     43 00 00 FF 
21220     8C E5 85 F1 | 	sub	objptr, ##34700
21224     F2 FA 01 F6 | 	mov	result1, objptr
21228     00 D8 00 FF 
2122c     00 FA 45 F5 | 	or	result1, ##28311552
21230     43 00 00 FF 
21234     90 E5 05 F1 | 	add	objptr, ##34704
21238     F2 FA 61 FC | 	wrlong	result1, objptr
2123c     43 00 00 FF 
21240     90 E5 85 F1 | 	sub	objptr, ##34704
21244     F2 FA 01 F6 | 	mov	result1, objptr
21248     56 FA 25 F4 | 	bith	result1, #86
2124c     43 00 00 FF 
21250     94 E5 05 F1 | 	add	objptr, ##34708
21254     F2 FA 61 FC | 	wrlong	result1, objptr
21258     43 00 00 FF 
2125c     94 E5 85 F1 | 	sub	objptr, ##34708
21260     F2 FA 01 F6 | 	mov	result1, objptr
21264     00 E8 00 FF 
21268     00 FA 45 F5 | 	or	result1, ##30408704
2126c     45 00 00 FF 
21270     5C E4 05 F1 | 	add	objptr, ##35420
21274     F2 FA 61 FC | 	wrlong	result1, objptr
21278     45 00 00 FF 
2127c     5C E4 85 F1 | 	sub	objptr, ##35420
21280     F2 FA 01 F6 | 	mov	result1, objptr
21284     75 FA 25 F4 | 	bith	result1, #117
21288     43 00 00 FF 
2128c     98 E5 05 F1 | 	add	objptr, ##34712
21290     F2 FA 61 FC | 	wrlong	result1, objptr
21294     43 00 00 FF 
21298     98 E5 85 F1 | 	sub	objptr, ##34712
2129c     F2 FA 01 F6 | 	mov	result1, objptr
212a0     94 FA 25 F4 | 	bith	result1, #148
212a4     43 00 00 FF 
212a8     AC E5 05 F1 | 	add	objptr, ##34732
212ac     F2 FA 61 FC | 	wrlong	result1, objptr
212b0     43 00 00 FF 
212b4     AC E5 85 F1 | 	sub	objptr, ##34732
212b8     F2 FA 01 F6 | 	mov	result1, objptr
212bc     19 FA 25 F4 | 	bith	result1, #25
212c0     43 00 00 FF 
212c4     9C E5 05 F1 | 	add	objptr, ##34716
212c8     F2 FA 61 FC | 	wrlong	result1, objptr
212cc     43 00 00 FF 
212d0     9C E5 85 F1 | 	sub	objptr, ##34716
212d4     F2 FA 01 F6 | 	mov	result1, objptr
212d8     00 08 01 FF 
212dc     00 FA 45 F5 | 	or	result1, ##34603008
212e0     43 00 00 FF 
212e4     B8 E4 05 F1 | 	add	objptr, ##34488
212e8     F2 FA 61 FC | 	wrlong	result1, objptr
212ec     43 00 00 FF 
212f0     B8 E4 85 F1 | 	sub	objptr, ##34488
212f4     F2 FA 01 F6 | 	mov	result1, objptr
212f8     00 10 01 FF 
212fc     00 FA 45 F5 | 	or	result1, ##35651584
21300     43 00 00 FF 
21304     A4 E5 05 F1 | 	add	objptr, ##34724
21308     F2 FA 61 FC | 	wrlong	result1, objptr
2130c     43 00 00 FF 
21310     A4 E5 85 F1 | 	sub	objptr, ##34724
21314     F2 FA 01 F6 | 	mov	result1, objptr
21318     00 18 01 FF 
2131c     00 FA 45 F5 | 	or	result1, ##36700160
21320     43 00 00 FF 
21324     A8 E5 05 F1 | 	add	objptr, ##34728
21328     F2 FA 61 FC | 	wrlong	result1, objptr
2132c     43 00 00 FF 
21330     A8 E5 85 F1 | 	sub	objptr, ##34728
21334     F2 FA 01 F6 | 	mov	result1, objptr
21338     00 20 01 FF 
2133c     00 FA 45 F5 | 	or	result1, ##37748736
21340     43 00 00 FF 
21344     B4 E5 05 F1 | 	add	objptr, ##34740
21348     F2 FA 61 FC | 	wrlong	result1, objptr
2134c     43 00 00 FF 
21350     B4 E5 85 F1 | 	sub	objptr, ##34740
21354     F2 FA 01 F6 | 	mov	result1, objptr
21358     00 28 01 FF 
2135c     00 FA 45 F5 | 	or	result1, ##38797312
21360     43 00 00 FF 
21364     B8 E5 05 F1 | 	add	objptr, ##34744
21368     F2 FA 61 FC | 	wrlong	result1, objptr
2136c     43 00 00 FF 
21370     B8 E5 85 F1 | 	sub	objptr, ##34744
21374     F2 FA 01 F6 | 	mov	result1, objptr
21378     00 30 01 FF 
2137c     00 FA 45 F5 | 	or	result1, ##39845888
21380     43 00 00 FF 
21384     BC E5 05 F1 | 	add	objptr, ##34748
21388     F2 FA 61 FC | 	wrlong	result1, objptr
2138c     43 00 00 FF 
21390     BC E5 85 F1 | 	sub	objptr, ##34748
21394     F2 FA 01 F6 | 	mov	result1, objptr
21398     00 38 01 FF 
2139c     00 FA 45 F5 | 	or	result1, ##40894464
213a0     43 00 00 FF 
213a4     C0 E5 05 F1 | 	add	objptr, ##34752
213a8     F2 FA 61 FC | 	wrlong	result1, objptr
213ac     43 00 00 FF 
213b0     C0 E5 85 F1 | 	sub	objptr, ##34752
213b4     F2 FA 01 F6 | 	mov	result1, objptr
213b8     00 40 01 FF 
213bc     00 FA 45 F5 | 	or	result1, ##41943040
213c0     43 00 00 FF 
213c4     C8 E5 05 F1 | 	add	objptr, ##34760
213c8     F2 FA 61 FC | 	wrlong	result1, objptr
213cc     43 00 00 FF 
213d0     C8 E5 85 F1 | 	sub	objptr, ##34760
213d4     F2 FA 01 F6 | 	mov	result1, objptr
213d8     00 08 01 FF 
213dc     00 FA 45 F5 | 	or	result1, ##34603008
213e0     43 00 00 FF 
213e4     CC E5 05 F1 | 	add	objptr, ##34764
213e8     F2 FA 61 FC | 	wrlong	result1, objptr
213ec     43 00 00 FF 
213f0     CC E5 85 F1 | 	sub	objptr, ##34764
213f4     F2 FA 01 F6 | 	mov	result1, objptr
213f8     00 48 01 FF 
213fc     00 FA 45 F5 | 	or	result1, ##42991616
21400     43 00 00 FF 
21404     CC E4 05 F1 | 	add	objptr, ##34508
21408     F2 FA 61 FC | 	wrlong	result1, objptr
2140c     43 00 00 FF 
21410     CC E4 85 F1 | 	sub	objptr, ##34508
21414     F2 FA 01 F6 | 	mov	result1, objptr
21418     00 50 01 FF 
2141c     00 FA 45 F5 | 	or	result1, ##44040192
21420     43 00 00 FF 
21424     FC E4 05 F1 | 	add	objptr, ##34556
21428     F2 FA 61 FC | 	wrlong	result1, objptr
2142c     43 00 00 FF 
21430     FC E4 85 F1 | 	sub	objptr, ##34556
21434     F2 FA 01 F6 | 	mov	result1, objptr
21438     00 58 01 FF 
2143c     00 FA 45 F5 | 	or	result1, ##45088768
21440     43 00 00 FF 
21444     F8 E4 05 F1 | 	add	objptr, ##34552
21448     F2 FA 61 FC | 	wrlong	result1, objptr
2144c     43 00 00 FF 
21450     F8 E4 85 F1 | 	sub	objptr, ##34552
21454     F2 FA 01 F6 | 	mov	result1, objptr
21458     00 60 01 FF 
2145c     00 FA 45 F5 | 	or	result1, ##46137344
21460     43 00 00 FF 
21464     9C E4 05 F1 | 	add	objptr, ##34460
21468     F2 FA 61 FC | 	wrlong	result1, objptr
2146c     43 00 00 FF 
21470     9C E4 85 F1 | 	sub	objptr, ##34460
21474     F2 FA 01 F6 | 	mov	result1, objptr
21478     00 68 01 FF 
2147c     00 FA 45 F5 | 	or	result1, ##47185920
21480     43 00 00 FF 
21484     A0 E4 05 F1 | 	add	objptr, ##34464
21488     F2 FA 61 FC | 	wrlong	result1, objptr
2148c     43 00 00 FF 
21490     A0 E4 85 F1 | 	sub	objptr, ##34464
21494     F2 FA 01 F6 | 	mov	result1, objptr
21498     00 70 01 FF 
2149c     00 FA 45 F5 | 	or	result1, ##48234496
214a0     43 00 00 FF 
214a4     08 E5 05 F1 | 	add	objptr, ##34568
214a8     F2 FA 61 FC | 	wrlong	result1, objptr
214ac     43 00 00 FF 
214b0     08 E5 85 F1 | 	sub	objptr, ##34568
214b4     F2 FA 01 F6 | 	mov	result1, objptr
214b8     00 78 01 FF 
214bc     00 FA 45 F5 | 	or	result1, ##49283072
214c0     43 00 00 FF 
214c4     B0 E5 05 F1 | 	add	objptr, ##34736
214c8     F2 FA 61 FC | 	wrlong	result1, objptr
214cc     43 00 00 FF 
214d0     B0 E5 85 F1 | 	sub	objptr, ##34736
214d4     F2 FA 01 F6 | 	mov	result1, objptr
214d8     38 FA 25 F4 | 	bith	result1, #56
214dc     43 00 00 FF 
214e0     C4 E5 05 F1 | 	add	objptr, ##34756
214e4     F2 FA 61 FC | 	wrlong	result1, objptr
214e8     43 00 00 FF 
214ec     C4 E5 85 F1 | 	sub	objptr, ##34756
214f0     F2 FA 01 F6 | 	mov	result1, objptr
214f4     00 88 01 FF 
214f8     00 FA 45 F5 | 	or	result1, ##51380224
214fc     43 00 00 FF 
21500     D0 E5 05 F1 | 	add	objptr, ##34768
21504     F2 FA 61 FC | 	wrlong	result1, objptr
21508     43 00 00 FF 
2150c     D0 E5 85 F1 | 	sub	objptr, ##34768
21510     F2 FA 01 F6 | 	mov	result1, objptr
21514     00 90 01 FF 
21518     00 FA 45 F5 | 	or	result1, ##52428800
2151c     43 00 00 FF 
21520     D4 E5 05 F1 | 	add	objptr, ##34772
21524     F2 FA 61 FC | 	wrlong	result1, objptr
21528     43 00 00 FF 
2152c     D4 E5 85 F1 | 	sub	objptr, ##34772
21530     F2 FA 01 F6 | 	mov	result1, objptr
21534     00 98 01 FF 
21538     00 FA 45 F5 | 	or	result1, ##53477376
2153c     43 00 00 FF 
21540     D8 E5 05 F1 | 	add	objptr, ##34776
21544     F2 FA 61 FC | 	wrlong	result1, objptr
21548     43 00 00 FF 
2154c     D8 E5 85 F1 | 	sub	objptr, ##34776
21550     F2 FA 01 F6 | 	mov	result1, objptr
21554     00 A0 01 FF 
21558     00 FA 45 F5 | 	or	result1, ##54525952
2155c     43 00 00 FF 
21560     DC E5 05 F1 | 	add	objptr, ##34780
21564     F2 FA 61 FC | 	wrlong	result1, objptr
21568     43 00 00 FF 
2156c     DC E5 85 F1 | 	sub	objptr, ##34780
21570     F2 FA 01 F6 | 	mov	result1, objptr
21574     00 A8 01 FF 
21578     00 FA 45 F5 | 	or	result1, ##55574528
2157c     43 00 00 FF 
21580     E0 E5 05 F1 | 	add	objptr, ##34784
21584     F2 FA 61 FC | 	wrlong	result1, objptr
21588     43 00 00 FF 
2158c     E0 E5 85 F1 | 	sub	objptr, ##34784
21590     F2 FA 01 F6 | 	mov	result1, objptr
21594     00 B0 01 FF 
21598     00 FA 45 F5 | 	or	result1, ##56623104
2159c     43 00 00 FF 
215a0     E4 E5 05 F1 | 	add	objptr, ##34788
215a4     F2 FA 61 FC | 	wrlong	result1, objptr
215a8     43 00 00 FF 
215ac     E4 E5 85 F1 | 	sub	objptr, ##34788
215b0     F2 FA 01 F6 | 	mov	result1, objptr
215b4     94 FA 25 F4 | 	bith	result1, #148
215b8     43 00 00 FF 
215bc     AC E5 05 F1 | 	add	objptr, ##34732
215c0     F2 FA 61 FC | 	wrlong	result1, objptr
215c4     43 00 00 FF 
215c8     AC E5 85 F1 | 	sub	objptr, ##34732
215cc     F2 FA 01 F6 | 	mov	result1, objptr
215d0     00 B8 01 FF 
215d4     00 FA 45 F5 | 	or	result1, ##57671680
215d8     43 00 00 FF 
215dc     EC E5 05 F1 | 	add	objptr, ##34796
215e0     F2 FA 61 FC | 	wrlong	result1, objptr
215e4     43 00 00 FF 
215e8     EC E5 85 F1 | 	sub	objptr, ##34796
215ec     F2 FA 01 F6 | 	mov	result1, objptr
215f0     57 FA 25 F4 | 	bith	result1, #87
215f4     43 00 00 FF 
215f8     E8 E5 05 F1 | 	add	objptr, ##34792
215fc     F2 FA 61 FC | 	wrlong	result1, objptr
21600     43 00 00 FF 
21604     E8 E5 85 F1 | 	sub	objptr, ##34792
21608     F2 FA 01 F6 | 	mov	result1, objptr
2160c     00 C8 01 FF 
21610     00 FA 45 F5 | 	or	result1, ##59768832
21614     44 00 00 FF 
21618     00 E4 05 F1 | 	add	objptr, ##34816
2161c     F2 FA 61 FC | 	wrlong	result1, objptr
21620     44 00 00 FF 
21624     00 E4 85 F1 | 	sub	objptr, ##34816
21628     F2 FA 01 F6 | 	mov	result1, objptr
2162c     00 D0 01 FF 
21630     00 FA 45 F5 | 	or	result1, ##60817408
21634     44 00 00 FF 
21638     04 E4 05 F1 | 	add	objptr, ##34820
2163c     F2 FA 61 FC | 	wrlong	result1, objptr
21640     44 00 00 FF 
21644     04 E4 85 F1 | 	sub	objptr, ##34820
21648     F2 FA 01 F6 | 	mov	result1, objptr
2164c     00 D8 01 FF 
21650     00 FA 45 F5 | 	or	result1, ##61865984
21654     43 00 00 FF 
21658     F0 E5 05 F1 | 	add	objptr, ##34800
2165c     F2 FA 61 FC | 	wrlong	result1, objptr
21660     43 00 00 FF 
21664     F0 E5 85 F1 | 	sub	objptr, ##34800
21668     F2 FA 01 F6 | 	mov	result1, objptr
2166c     76 FA 25 F4 | 	bith	result1, #118
21670     43 00 00 FF 
21674     F4 E5 05 F1 | 	add	objptr, ##34804
21678     F2 FA 61 FC | 	wrlong	result1, objptr
2167c     43 00 00 FF 
21680     F4 E5 85 F1 | 	sub	objptr, ##34804
21684     F2 FA 01 F6 | 	mov	result1, objptr
21688     00 E8 01 FF 
2168c     00 FA 45 F5 | 	or	result1, ##63963136
21690     43 00 00 FF 
21694     F8 E5 05 F1 | 	add	objptr, ##34808
21698     F2 FA 61 FC | 	wrlong	result1, objptr
2169c     43 00 00 FF 
216a0     F8 E5 85 F1 | 	sub	objptr, ##34808
216a4     F2 FA 01 F6 | 	mov	result1, objptr
216a8     95 FA 25 F4 | 	bith	result1, #149
216ac     43 00 00 FF 
216b0     FC E5 05 F1 | 	add	objptr, ##34812
216b4     F2 FA 61 FC | 	wrlong	result1, objptr
216b8     43 00 00 FF 
216bc     FC E5 85 F1 | 	sub	objptr, ##34812
216c0     F2 FA 01 F6 | 	mov	result1, objptr
216c4     B4 FA 25 F4 | 	bith	result1, #180
216c8     44 00 00 FF 
216cc     0C E4 05 F1 | 	add	objptr, ##34828
216d0     F2 FA 61 FC | 	wrlong	result1, objptr
216d4     44 00 00 FF 
216d8     0C E4 85 F1 | 	sub	objptr, ##34828
216dc     F2 FA 01 F6 | 	mov	result1, objptr
216e0     1A FA 25 F4 | 	bith	result1, #26
216e4     44 00 00 FF 
216e8     08 E4 05 F1 | 	add	objptr, ##34824
216ec     F2 FA 61 FC | 	wrlong	result1, objptr
216f0     44 00 00 FF 
216f4     08 E4 85 F1 | 	sub	objptr, ##34824
216f8     F2 FA 01 F6 | 	mov	result1, objptr
216fc     00 08 02 FF 
21700     00 FA 45 F5 | 	or	result1, ##68157440
21704     44 00 00 FF 
21708     18 E4 05 F1 | 	add	objptr, ##34840
2170c     F2 FA 61 FC | 	wrlong	result1, objptr
21710     44 00 00 FF 
21714     18 E4 85 F1 | 	sub	objptr, ##34840
21718     F2 FA 01 F6 | 	mov	result1, objptr
2171c     00 10 02 FF 
21720     00 FA 45 F5 | 	or	result1, ##69206016
21724     44 00 00 FF 
21728     14 E4 05 F1 | 	add	objptr, ##34836
2172c     F2 FA 61 FC | 	wrlong	result1, objptr
21730     44 00 00 FF 
21734     14 E4 85 F1 | 	sub	objptr, ##34836
21738     F2 FA 01 F6 | 	mov	result1, objptr
2173c     00 18 02 FF 
21740     00 FA 45 F5 | 	or	result1, ##70254592
21744     44 00 00 FF 
21748     10 E4 05 F1 | 	add	objptr, ##34832
2174c     F2 FA 61 FC | 	wrlong	result1, objptr
21750     44 00 00 FF 
21754     10 E4 85 F1 | 	sub	objptr, ##34832
21758     F2 FA 01 F6 | 	mov	result1, objptr
2175c     00 20 02 FF 
21760     00 FA 45 F5 | 	or	result1, ##71303168
21764     44 00 00 FF 
21768     1C E4 05 F1 | 	add	objptr, ##34844
2176c     F2 FA 61 FC | 	wrlong	result1, objptr
21770     44 00 00 FF 
21774     1C E4 85 F1 | 	sub	objptr, ##34844
21778     F2 FA 01 F6 | 	mov	result1, objptr
2177c     00 28 02 FF 
21780     00 FA 45 F5 | 	or	result1, ##72351744
21784     44 00 00 FF 
21788     20 E4 05 F1 | 	add	objptr, ##34848
2178c     F2 FA 61 FC | 	wrlong	result1, objptr
21790     44 00 00 FF 
21794     20 E4 85 F1 | 	sub	objptr, ##34848
21798     F2 FA 01 F6 | 	mov	result1, objptr
2179c     00 30 02 FF 
217a0     00 FA 45 F5 | 	or	result1, ##73400320
217a4     43 00 00 FF 
217a8     B4 E4 05 F1 | 	add	objptr, ##34484
217ac     F2 FA 61 FC | 	wrlong	result1, objptr
217b0     43 00 00 FF 
217b4     B4 E4 85 F1 | 	sub	objptr, ##34484
217b8     F2 FA 01 F6 | 	mov	result1, objptr
217bc     00 38 02 FF 
217c0     00 FA 45 F5 | 	or	result1, ##74448896
217c4     44 00 00 FF 
217c8     38 E4 05 F1 | 	add	objptr, ##34872
217cc     F2 FA 61 FC | 	wrlong	result1, objptr
217d0     44 00 00 FF 
217d4     38 E4 85 F1 | 	sub	objptr, ##34872
217d8     F2 FA 01 F6 | 	mov	result1, objptr
217dc     00 40 02 FF 
217e0     00 FA 45 F5 | 	or	result1, ##75497472
217e4     44 00 00 FF 
217e8     48 E4 05 F1 | 	add	objptr, ##34888
217ec     F2 FA 61 FC | 	wrlong	result1, objptr
217f0     44 00 00 FF 
217f4     48 E4 85 F1 | 	sub	objptr, ##34888
217f8     F2 FA 01 F6 | 	mov	result1, objptr
217fc     00 48 02 FF 
21800     00 FA 45 F5 | 	or	result1, ##76546048
21804     44 00 00 FF 
21808     4C E4 05 F1 | 	add	objptr, ##34892
2180c     F2 FA 61 FC | 	wrlong	result1, objptr
21810     44 00 00 FF 
21814     4C E4 85 F1 | 	sub	objptr, ##34892
21818     F2 FA 01 F6 | 	mov	result1, objptr
2181c     00 50 02 FF 
21820     00 FA 45 F5 | 	or	result1, ##77594624
21824     44 00 00 FF 
21828     44 E4 05 F1 | 	add	objptr, ##34884
2182c     F2 FA 61 FC | 	wrlong	result1, objptr
21830     44 00 00 FF 
21834     44 E4 85 F1 | 	sub	objptr, ##34884
21838     F2 FA 01 F6 | 	mov	result1, objptr
2183c     00 58 02 FF 
21840     00 FA 45 F5 | 	or	result1, ##78643200
21844     44 00 00 FF 
21848     3C E4 05 F1 | 	add	objptr, ##34876
2184c     F2 FA 61 FC | 	wrlong	result1, objptr
21850     44 00 00 FF 
21854     3C E4 85 F1 | 	sub	objptr, ##34876
21858     F2 FA 01 F6 | 	mov	result1, objptr
2185c     00 60 02 FF 
21860     00 FA 45 F5 | 	or	result1, ##79691776
21864     44 00 00 FF 
21868     40 E4 05 F1 | 	add	objptr, ##34880
2186c     F2 FA 61 FC | 	wrlong	result1, objptr
21870     44 00 00 FF 
21874     40 E4 85 F1 | 	sub	objptr, ##34880
21878     F2 FA 01 F6 | 	mov	result1, objptr
2187c     00 68 02 FF 
21880     00 FA 45 F5 | 	or	result1, ##80740352
21884     44 00 00 FF 
21888     50 E4 05 F1 | 	add	objptr, ##34896
2188c     F2 FA 61 FC | 	wrlong	result1, objptr
21890     44 00 00 FF 
21894     50 E4 85 F1 | 	sub	objptr, ##34896
21898     F2 FA 01 F6 | 	mov	result1, objptr
2189c     00 70 02 FF 
218a0     00 FA 45 F5 | 	or	result1, ##81788928
218a4     44 00 00 FF 
218a8     54 E4 05 F1 | 	add	objptr, ##34900
218ac     F2 FA 61 FC | 	wrlong	result1, objptr
218b0     44 00 00 FF 
218b4     54 E4 85 F1 | 	sub	objptr, ##34900
218b8     F2 FA 01 F6 | 	mov	result1, objptr
218bc     00 78 02 FF 
218c0     00 FA 45 F5 | 	or	result1, ##82837504
218c4     44 00 00 FF 
218c8     58 E4 05 F1 | 	add	objptr, ##34904
218cc     F2 FA 61 FC | 	wrlong	result1, objptr
218d0     44 00 00 FF 
218d4     58 E4 85 F1 | 	sub	objptr, ##34904
218d8     F2 FA 01 F6 | 	mov	result1, objptr
218dc     00 80 02 FF 
218e0     00 FA 45 F5 | 	or	result1, ##83886080
218e4     44 00 00 FF 
218e8     5C E4 05 F1 | 	add	objptr, ##34908
218ec     F2 FA 61 FC | 	wrlong	result1, objptr
218f0     44 00 00 FF 
218f4     5C E4 85 F1 | 	sub	objptr, ##34908
218f8     F2 FA 01 F6 | 	mov	result1, objptr
218fc     00 88 02 FF 
21900     00 FA 45 F5 | 	or	result1, ##84934656
21904     44 00 00 FF 
21908     60 E4 05 F1 | 	add	objptr, ##34912
2190c     F2 FA 61 FC | 	wrlong	result1, objptr
21910     44 00 00 FF 
21914     60 E4 85 F1 | 	sub	objptr, ##34912
21918     F2 FA 01 F6 | 	mov	result1, objptr
2191c     00 90 02 FF 
21920     00 FA 45 F5 | 	or	result1, ##85983232
21924     44 00 00 FF 
21928     64 E4 05 F1 | 	add	objptr, ##34916
2192c     F2 FA 61 FC | 	wrlong	result1, objptr
21930     44 00 00 FF 
21934     64 E4 85 F1 | 	sub	objptr, ##34916
21938     F2 FA 01 F6 | 	mov	result1, objptr
2193c     00 98 02 FF 
21940     00 FA 45 F5 | 	or	result1, ##87031808
21944     44 00 00 FF 
21948     68 E4 05 F1 | 	add	objptr, ##34920
2194c     F2 FA 61 FC | 	wrlong	result1, objptr
21950     44 00 00 FF 
21954     68 E4 85 F1 | 	sub	objptr, ##34920
21958     F2 FA 01 F6 | 	mov	result1, objptr
2195c     00 A0 02 FF 
21960     00 FA 45 F5 | 	or	result1, ##88080384
21964     44 00 00 FF 
21968     6C E4 05 F1 | 	add	objptr, ##34924
2196c     F2 FA 61 FC | 	wrlong	result1, objptr
21970     44 00 00 FF 
21974     6C E4 85 F1 | 	sub	objptr, ##34924
21978     F2 FA 01 F6 | 	mov	result1, objptr
2197c     00 A8 02 FF 
21980     00 FA 45 F5 | 	or	result1, ##89128960
21984     44 00 00 FF 
21988     78 E4 05 F1 | 	add	objptr, ##34936
2198c     F2 FA 61 FC | 	wrlong	result1, objptr
21990     44 00 00 FF 
21994     78 E4 85 F1 | 	sub	objptr, ##34936
21998     F2 FA 01 F6 | 	mov	result1, objptr
2199c     00 B0 02 FF 
219a0     00 FA 45 F5 | 	or	result1, ##90177536
219a4     44 00 00 FF 
219a8     70 E4 05 F1 | 	add	objptr, ##34928
219ac     F2 FA 61 FC | 	wrlong	result1, objptr
219b0     44 00 00 FF 
219b4     70 E4 85 F1 | 	sub	objptr, ##34928
219b8     F2 FA 01 F6 | 	mov	result1, objptr
219bc     00 B8 02 FF 
219c0     00 FA 45 F5 | 	or	result1, ##91226112
219c4     44 00 00 FF 
219c8     74 E4 05 F1 | 	add	objptr, ##34932
219cc     F2 FA 61 FC | 	wrlong	result1, objptr
219d0     44 00 00 FF 
219d4     74 E4 85 F1 | 	sub	objptr, ##34932
219d8     F2 FA 01 F6 | 	mov	result1, objptr
219dc     00 C0 02 FF 
219e0     00 FA 45 F5 | 	or	result1, ##92274688
219e4     44 00 00 FF 
219e8     7C E4 05 F1 | 	add	objptr, ##34940
219ec     F2 FA 61 FC | 	wrlong	result1, objptr
219f0     44 00 00 FF 
219f4     7C E4 85 F1 | 	sub	objptr, ##34940
219f8     F2 FA 01 F6 | 	mov	result1, objptr
219fc     00 C8 02 FF 
21a00     00 FA 45 F5 | 	or	result1, ##93323264
21a04     44 00 00 FF 
21a08     24 E4 05 F1 | 	add	objptr, ##34852
21a0c     F2 FA 61 FC | 	wrlong	result1, objptr
21a10     44 00 00 FF 
21a14     24 E4 85 F1 | 	sub	objptr, ##34852
21a18     F2 FA 01 F6 | 	mov	result1, objptr
21a1c     00 D0 02 FF 
21a20     00 FA 45 F5 | 	or	result1, ##94371840
21a24     44 00 00 FF 
21a28     2C E4 05 F1 | 	add	objptr, ##34860
21a2c     F2 FA 61 FC | 	wrlong	result1, objptr
21a30     44 00 00 FF 
21a34     2C E4 85 F1 | 	sub	objptr, ##34860
21a38     F2 FA 01 F6 | 	mov	result1, objptr
21a3c     00 D8 02 FF 
21a40     00 FA 45 F5 | 	or	result1, ##95420416
21a44     44 00 00 FF 
21a48     30 E4 05 F1 | 	add	objptr, ##34864
21a4c     F2 FA 61 FC | 	wrlong	result1, objptr
21a50     44 00 00 FF 
21a54     30 E4 85 F1 | 	sub	objptr, ##34864
21a58     F2 FA 01 F6 | 	mov	result1, objptr
21a5c     00 E0 02 FF 
21a60     00 FA 45 F5 | 	or	result1, ##96468992
21a64     44 00 00 FF 
21a68     80 E4 05 F1 | 	add	objptr, ##34944
21a6c     F2 FA 61 FC | 	wrlong	result1, objptr
21a70     44 00 00 FF 
21a74     80 E4 85 F1 | 	sub	objptr, ##34944
21a78     F2 FA 01 F6 | 	mov	result1, objptr
21a7c     00 E8 02 FF 
21a80     00 FA 45 F5 | 	or	result1, ##97517568
21a84     44 00 00 FF 
21a88     84 E4 05 F1 | 	add	objptr, ##34948
21a8c     F2 FA 61 FC | 	wrlong	result1, objptr
21a90     44 00 00 FF 
21a94     84 E4 85 F1 | 	sub	objptr, ##34948
21a98     F2 FA 01 F6 | 	mov	result1, objptr
21a9c     00 F0 02 FF 
21aa0     00 FA 45 F5 | 	or	result1, ##98566144
21aa4     44 00 00 FF 
21aa8     88 E4 05 F1 | 	add	objptr, ##34952
21aac     F2 FA 61 FC | 	wrlong	result1, objptr
21ab0     44 00 00 FF 
21ab4     88 E4 85 F1 | 	sub	objptr, ##34952
21ab8     F2 FA 01 F6 | 	mov	result1, objptr
21abc     00 F8 02 FF 
21ac0     00 FA 45 F5 | 	or	result1, ##99614720
21ac4     44 00 00 FF 
21ac8     34 E4 05 F1 | 	add	objptr, ##34868
21acc     F2 FA 61 FC | 	wrlong	result1, objptr
21ad0     44 00 00 FF 
21ad4     34 E4 85 F1 | 	sub	objptr, ##34868
21ad8     F2 FA 01 F6 | 	mov	result1, objptr
21adc     39 FA 25 F4 | 	bith	result1, #57
21ae0     44 00 00 FF 
21ae4     98 E4 05 F1 | 	add	objptr, ##34968
21ae8     F2 FA 61 FC | 	wrlong	result1, objptr
21aec     44 00 00 FF 
21af0     98 E4 85 F1 | 	sub	objptr, ##34968
21af4     F2 FA 01 F6 | 	mov	result1, objptr
21af8     00 08 03 FF 
21afc     00 FA 45 F5 | 	or	result1, ##101711872
21b00     44 00 00 FF 
21b04     A0 E4 05 F1 | 	add	objptr, ##34976
21b08     F2 FA 61 FC | 	wrlong	result1, objptr
21b0c     44 00 00 FF 
21b10     A0 E4 85 F1 | 	sub	objptr, ##34976
21b14     F2 FA 01 F6 | 	mov	result1, objptr
21b18     00 10 03 FF 
21b1c     00 FA 45 F5 | 	or	result1, ##102760448
21b20     44 00 00 FF 
21b24     94 E4 05 F1 | 	add	objptr, ##34964
21b28     F2 FA 61 FC | 	wrlong	result1, objptr
21b2c     44 00 00 FF 
21b30     94 E4 85 F1 | 	sub	objptr, ##34964
21b34     F2 FA 01 F6 | 	mov	result1, objptr
21b38     00 18 03 FF 
21b3c     00 FA 45 F5 | 	or	result1, ##103809024
21b40     44 00 00 FF 
21b44     90 E4 05 F1 | 	add	objptr, ##34960
21b48     F2 FA 61 FC | 	wrlong	result1, objptr
21b4c     44 00 00 FF 
21b50     90 E4 85 F1 | 	sub	objptr, ##34960
21b54     F2 FA 01 F6 | 	mov	result1, objptr
21b58     00 20 03 FF 
21b5c     00 FA 45 F5 | 	or	result1, ##104857600
21b60     44 00 00 FF 
21b64     8C E4 05 F1 | 	add	objptr, ##34956
21b68     F2 FA 61 FC | 	wrlong	result1, objptr
21b6c     44 00 00 FF 
21b70     8C E4 85 F1 | 	sub	objptr, ##34956
21b74     F2 FA 01 F6 | 	mov	result1, objptr
21b78     00 28 03 FF 
21b7c     00 FA 45 F5 | 	or	result1, ##105906176
21b80     44 00 00 FF 
21b84     9C E4 05 F1 | 	add	objptr, ##34972
21b88     F2 FA 61 FC | 	wrlong	result1, objptr
21b8c     44 00 00 FF 
21b90     9C E4 85 F1 | 	sub	objptr, ##34972
21b94     F2 FA 01 F6 | 	mov	result1, objptr
21b98     00 30 03 FF 
21b9c     00 FA 45 F5 | 	or	result1, ##106954752
21ba0     44 00 00 FF 
21ba4     A4 E4 05 F1 | 	add	objptr, ##34980
21ba8     F2 FA 61 FC | 	wrlong	result1, objptr
21bac     44 00 00 FF 
21bb0     A4 E4 85 F1 | 	sub	objptr, ##34980
21bb4     F2 FA 01 F6 | 	mov	result1, objptr
21bb8     00 38 03 FF 
21bbc     00 FA 45 F5 | 	or	result1, ##108003328
21bc0     44 00 00 FF 
21bc4     A8 E4 05 F1 | 	add	objptr, ##34984
21bc8     F2 FA 61 FC | 	wrlong	result1, objptr
21bcc     44 00 00 FF 
21bd0     A8 E4 85 F1 | 	sub	objptr, ##34984
21bd4     F2 FA 01 F6 | 	mov	result1, objptr
21bd8     00 40 03 FF 
21bdc     00 FA 45 F5 | 	or	result1, ##109051904
21be0     44 00 00 FF 
21be4     AC E4 05 F1 | 	add	objptr, ##34988
21be8     F2 FA 61 FC | 	wrlong	result1, objptr
21bec     44 00 00 FF 
21bf0     AC E4 85 F1 | 	sub	objptr, ##34988
21bf4     F2 FA 01 F6 | 	mov	result1, objptr
21bf8     00 48 03 FF 
21bfc     00 FA 45 F5 | 	or	result1, ##110100480
21c00     44 00 00 FF 
21c04     B4 E4 05 F1 | 	add	objptr, ##34996
21c08     F2 FA 61 FC | 	wrlong	result1, objptr
21c0c     44 00 00 FF 
21c10     B4 E4 85 F1 | 	sub	objptr, ##34996
21c14     F2 FA 01 F6 | 	mov	result1, objptr
21c18     00 50 03 FF 
21c1c     00 FA 45 F5 | 	or	result1, ##111149056
21c20     44 00 00 FF 
21c24     B8 E4 05 F1 | 	add	objptr, ##35000
21c28     F2 FA 61 FC | 	wrlong	result1, objptr
21c2c     44 00 00 FF 
21c30     B8 E4 85 F1 | 	sub	objptr, ##35000
21c34     F2 FA 01 F6 | 	mov	result1, objptr
21c38     00 58 03 FF 
21c3c     00 FA 45 F5 | 	or	result1, ##112197632
21c40     44 00 00 FF 
21c44     BC E4 05 F1 | 	add	objptr, ##35004
21c48     F2 FA 61 FC | 	wrlong	result1, objptr
21c4c     44 00 00 FF 
21c50     BC E4 85 F1 | 	sub	objptr, ##35004
21c54     F2 FA 01 F6 | 	mov	result1, objptr
21c58     00 60 03 FF 
21c5c     00 FA 45 F5 | 	or	result1, ##113246208
21c60     44 00 00 FF 
21c64     C0 E4 05 F1 | 	add	objptr, ##35008
21c68     F2 FA 61 FC | 	wrlong	result1, objptr
21c6c     44 00 00 FF 
21c70     C0 E4 85 F1 | 	sub	objptr, ##35008
21c74     F2 FA 01 F6 | 	mov	result1, objptr
21c78     00 68 03 FF 
21c7c     00 FA 45 F5 | 	or	result1, ##114294784
21c80     44 00 00 FF 
21c84     C4 E4 05 F1 | 	add	objptr, ##35012
21c88     F2 FA 61 FC | 	wrlong	result1, objptr
21c8c     44 00 00 FF 
21c90     C4 E4 85 F1 | 	sub	objptr, ##35012
21c94     F2 FA 01 F6 | 	mov	result1, objptr
21c98     00 70 03 FF 
21c9c     00 FA 45 F5 | 	or	result1, ##115343360
21ca0     44 00 00 FF 
21ca4     C8 E4 05 F1 | 	add	objptr, ##35016
21ca8     F2 FA 61 FC | 	wrlong	result1, objptr
21cac     44 00 00 FF 
21cb0     C8 E4 85 F1 | 	sub	objptr, ##35016
21cb4     F2 FA 01 F6 | 	mov	result1, objptr
21cb8     00 08 01 FF 
21cbc     00 FA 45 F5 | 	or	result1, ##34603008
21cc0     44 00 00 FF 
21cc4     CC E4 05 F1 | 	add	objptr, ##35020
21cc8     F2 FA 61 FC | 	wrlong	result1, objptr
21ccc     44 00 00 FF 
21cd0     CC E4 85 F1 | 	sub	objptr, ##35020
21cd4     F2 FA 01 F6 | 	mov	result1, objptr
21cd8     00 78 03 FF 
21cdc     00 FA 45 F5 | 	or	result1, ##116391936
21ce0     44 00 00 FF 
21ce4     D0 E4 05 F1 | 	add	objptr, ##35024
21ce8     F2 FA 61 FC | 	wrlong	result1, objptr
21cec     44 00 00 FF 
21cf0     D0 E4 85 F1 | 	sub	objptr, ##35024
21cf4     F2 FA 01 F6 | 	mov	result1, objptr
21cf8     58 FA 25 F4 | 	bith	result1, #88
21cfc     44 00 00 FF 
21d00     B0 E4 05 F1 | 	add	objptr, ##34992
21d04     F2 FA 61 FC | 	wrlong	result1, objptr
21d08     44 00 00 FF 
21d0c     B0 E4 85 F1 | 	sub	objptr, ##34992
21d10     F2 FA 01 F6 | 	mov	result1, objptr
21d14     00 88 03 FF 
21d18     00 FA 45 F5 | 	or	result1, ##118489088
21d1c     43 00 00 FF 
21d20     A8 E4 05 F1 | 	add	objptr, ##34472
21d24     F2 FA 61 FC | 	wrlong	result1, objptr
21d28     43 00 00 FF 
21d2c     A8 E4 85 F1 | 	sub	objptr, ##34472
21d30     F2 FA 01 F6 | 	mov	result1, objptr
21d34     00 90 03 FF 
21d38     00 FA 45 F5 | 	or	result1, ##119537664
21d3c     44 00 00 FF 
21d40     D4 E4 05 F1 | 	add	objptr, ##35028
21d44     F2 FA 61 FC | 	wrlong	result1, objptr
21d48     44 00 00 FF 
21d4c     D4 E4 85 F1 | 	sub	objptr, ##35028
21d50     F2 FA 01 F6 | 	mov	result1, objptr
21d54     00 98 03 FF 
21d58     00 FA 45 F5 | 	or	result1, ##120586240
21d5c     44 00 00 FF 
21d60     D8 E4 05 F1 | 	add	objptr, ##35032
21d64     F2 FA 61 FC | 	wrlong	result1, objptr
21d68     44 00 00 FF 
21d6c     D8 E4 85 F1 | 	sub	objptr, ##35032
21d70     F2 FA 01 F6 | 	mov	result1, objptr
21d74     00 A0 03 FF 
21d78     00 FA 45 F5 | 	or	result1, ##121634816
21d7c     44 00 00 FF 
21d80     EC E4 05 F1 | 	add	objptr, ##35052
21d84     F2 FA 61 FC | 	wrlong	result1, objptr
21d88     44 00 00 FF 
21d8c     EC E4 85 F1 | 	sub	objptr, ##35052
21d90     F2 FA 01 F6 | 	mov	result1, objptr
21d94     00 A8 03 FF 
21d98     00 FA 45 F5 | 	or	result1, ##122683392
21d9c     44 00 00 FF 
21da0     E8 E4 05 F1 | 	add	objptr, ##35048
21da4     F2 FA 61 FC | 	wrlong	result1, objptr
21da8     44 00 00 FF 
21dac     E8 E4 85 F1 | 	sub	objptr, ##35048
21db0     F2 FA 01 F6 | 	mov	result1, objptr
21db4     00 B0 03 FF 
21db8     00 FA 45 F5 | 	or	result1, ##123731968
21dbc     44 00 00 FF 
21dc0     E0 E4 05 F1 | 	add	objptr, ##35040
21dc4     F2 FA 61 FC | 	wrlong	result1, objptr
21dc8     44 00 00 FF 
21dcc     E0 E4 85 F1 | 	sub	objptr, ##35040
21dd0     F2 FA 01 F6 | 	mov	result1, objptr
21dd4     00 B8 03 FF 
21dd8     00 FA 45 F5 | 	or	result1, ##124780544
21ddc     44 00 00 FF 
21de0     DC E4 05 F1 | 	add	objptr, ##35036
21de4     F2 FA 61 FC | 	wrlong	result1, objptr
21de8     44 00 00 FF 
21dec     DC E4 85 F1 | 	sub	objptr, ##35036
21df0     F2 FA 01 F6 | 	mov	result1, objptr
21df4     77 FA 25 F4 | 	bith	result1, #119
21df8     44 00 00 FF 
21dfc     FC E4 05 F1 | 	add	objptr, ##35068
21e00     F2 FA 61 FC | 	wrlong	result1, objptr
21e04     44 00 00 FF 
21e08     FC E4 85 F1 | 	sub	objptr, ##35068
21e0c     F2 FA 01 F6 | 	mov	result1, objptr
21e10     00 C8 03 FF 
21e14     00 FA 45 F5 | 	or	result1, ##126877696
21e18     44 00 00 FF 
21e1c     F0 E4 05 F1 | 	add	objptr, ##35056
21e20     F2 FA 61 FC | 	wrlong	result1, objptr
21e24     44 00 00 FF 
21e28     F0 E4 85 F1 | 	sub	objptr, ##35056
21e2c     F2 FA 01 F6 | 	mov	result1, objptr
21e30     00 D0 03 FF 
21e34     00 FA 45 F5 | 	or	result1, ##127926272
21e38     44 00 00 FF 
21e3c     F4 E4 05 F1 | 	add	objptr, ##35060
21e40     F2 FA 61 FC | 	wrlong	result1, objptr
21e44     44 00 00 FF 
21e48     F4 E4 85 F1 | 	sub	objptr, ##35060
21e4c     F2 FA 01 F6 | 	mov	result1, objptr
21e50     00 D8 03 FF 
21e54     00 FA 45 F5 | 	or	result1, ##128974848
21e58     44 00 00 FF 
21e5c     F8 E4 05 F1 | 	add	objptr, ##35064
21e60     F2 FA 61 FC | 	wrlong	result1, objptr
21e64     44 00 00 FF 
21e68     F8 E4 85 F1 | 	sub	objptr, ##35064
21e6c     F2 FA 01 F6 | 	mov	result1, objptr
21e70     96 FA 25 F4 | 	bith	result1, #150
21e74     44 00 00 FF 
21e78     00 E5 05 F1 | 	add	objptr, ##35072
21e7c     F2 FA 61 FC | 	wrlong	result1, objptr
21e80     44 00 00 FF 
21e84     00 E5 85 F1 | 	sub	objptr, ##35072
21e88     F2 FA 01 F6 | 	mov	result1, objptr
21e8c     00 E8 03 FF 
21e90     00 FA 45 F5 | 	or	result1, ##131072000
21e94     44 00 00 FF 
21e98     04 E5 05 F1 | 	add	objptr, ##35076
21e9c     F2 FA 61 FC | 	wrlong	result1, objptr
21ea0     44 00 00 FF 
21ea4     04 E5 85 F1 | 	sub	objptr, ##35076
21ea8     F2 FA 01 F6 | 	mov	result1, objptr
21eac     B5 FA 25 F4 | 	bith	result1, #181
21eb0     44 00 00 FF 
21eb4     08 E5 05 F1 | 	add	objptr, ##35080
21eb8     F2 FA 61 FC | 	wrlong	result1, objptr
21ebc     44 00 00 FF 
21ec0     08 E5 85 F1 | 	sub	objptr, ##35080
21ec4     F2 FA 01 F6 | 	mov	result1, objptr
21ec8     D4 FA 25 F4 | 	bith	result1, #212
21ecc     44 00 00 FF 
21ed0     0C E5 05 F1 | 	add	objptr, ##35084
21ed4     F2 FA 61 FC | 	wrlong	result1, objptr
21ed8     44 00 00 FF 
21edc     0C E5 85 F1 | 	sub	objptr, ##35084
21ee0     F2 FA 01 F6 | 	mov	result1, objptr
21ee4     1B FA 25 F4 | 	bith	result1, #27
21ee8     44 00 00 FF 
21eec     10 E5 05 F1 | 	add	objptr, ##35088
21ef0     F2 FA 61 FC | 	wrlong	result1, objptr
21ef4     44 00 00 FF 
21ef8     10 E5 85 F1 | 	sub	objptr, ##35088
21efc     F2 FA 01 F6 | 	mov	result1, objptr
21f00     00 08 04 FF 
21f04     00 FA 45 F5 | 	or	result1, ##135266304
21f08     44 00 00 FF 
21f0c     14 E5 05 F1 | 	add	objptr, ##35092
21f10     F2 FA 61 FC | 	wrlong	result1, objptr
21f14     44 00 00 FF 
21f18     14 E5 85 F1 | 	sub	objptr, ##35092
21f1c     F2 FA 01 F6 | 	mov	result1, objptr
21f20     00 10 04 FF 
21f24     00 FA 45 F5 | 	or	result1, ##136314880
21f28     44 00 00 FF 
21f2c     1C E5 05 F1 | 	add	objptr, ##35100
21f30     F2 FA 61 FC | 	wrlong	result1, objptr
21f34     44 00 00 FF 
21f38     1C E5 85 F1 | 	sub	objptr, ##35100
21f3c     F2 FA 01 F6 | 	mov	result1, objptr
21f40     00 18 04 FF 
21f44     00 FA 45 F5 | 	or	result1, ##137363456
21f48     44 00 00 FF 
21f4c     20 E5 05 F1 | 	add	objptr, ##35104
21f50     F2 FA 61 FC | 	wrlong	result1, objptr
21f54     44 00 00 FF 
21f58     20 E5 85 F1 | 	sub	objptr, ##35104
21f5c     F2 FA 01 F6 | 	mov	result1, objptr
21f60     00 20 04 FF 
21f64     00 FA 45 F5 | 	or	result1, ##138412032
21f68     44 00 00 FF 
21f6c     24 E5 05 F1 | 	add	objptr, ##35108
21f70     F2 FA 61 FC | 	wrlong	result1, objptr
21f74     44 00 00 FF 
21f78     24 E5 85 F1 | 	sub	objptr, ##35108
21f7c     F2 FA 01 F6 | 	mov	result1, objptr
21f80     00 28 04 FF 
21f84     00 FA 45 F5 | 	or	result1, ##139460608
21f88     44 00 00 FF 
21f8c     18 E5 05 F1 | 	add	objptr, ##35096
21f90     F2 FA 61 FC | 	wrlong	result1, objptr
21f94     44 00 00 FF 
21f98     18 E5 85 F1 | 	sub	objptr, ##35096
21f9c     F2 FA 01 F6 | 	mov	result1, objptr
21fa0     00 30 04 FF 
21fa4     00 FA 45 F5 | 	or	result1, ##140509184
21fa8     44 00 00 FF 
21fac     28 E5 05 F1 | 	add	objptr, ##35112
21fb0     F2 FA 61 FC | 	wrlong	result1, objptr
21fb4     44 00 00 FF 
21fb8     28 E5 85 F1 | 	sub	objptr, ##35112
21fbc     F2 FA 01 F6 | 	mov	result1, objptr
21fc0     00 38 04 FF 
21fc4     00 FA 45 F5 | 	or	result1, ##141557760
21fc8     44 00 00 FF 
21fcc     5C E5 05 F1 | 	add	objptr, ##35164
21fd0     F2 FA 61 FC | 	wrlong	result1, objptr
21fd4     44 00 00 FF 
21fd8     5C E5 85 F1 | 	sub	objptr, ##35164
21fdc     F2 FA 01 F6 | 	mov	result1, objptr
21fe0     00 40 04 FF 
21fe4     00 FA 45 F5 | 	or	result1, ##142606336
21fe8     44 00 00 FF 
21fec     54 E5 05 F1 | 	add	objptr, ##35156
21ff0     F2 FA 61 FC | 	wrlong	result1, objptr
21ff4     44 00 00 FF 
21ff8     54 E5 85 F1 | 	sub	objptr, ##35156
21ffc     F2 FA 01 F6 | 	mov	result1, objptr
22000     00 48 04 FF 
22004     00 FA 45 F5 | 	or	result1, ##143654912
22008     44 00 00 FF 
2200c     2C E5 05 F1 | 	add	objptr, ##35116
22010     F2 FA 61 FC | 	wrlong	result1, objptr
22014     44 00 00 FF 
22018     2C E5 85 F1 | 	sub	objptr, ##35116
2201c     F2 FA 01 F6 | 	mov	result1, objptr
22020     00 50 04 FF 
22024     00 FA 45 F5 | 	or	result1, ##144703488
22028     44 00 00 FF 
2202c     30 E5 05 F1 | 	add	objptr, ##35120
22030     F2 FA 61 FC | 	wrlong	result1, objptr
22034     44 00 00 FF 
22038     30 E5 85 F1 | 	sub	objptr, ##35120
2203c     F2 FA 01 F6 | 	mov	result1, objptr
22040     00 58 04 FF 
22044     00 FA 45 F5 | 	or	result1, ##145752064
22048     44 00 00 FF 
2204c     4C E5 05 F1 | 	add	objptr, ##35148
22050     F2 FA 61 FC | 	wrlong	result1, objptr
22054     44 00 00 FF 
22058     4C E5 85 F1 | 	sub	objptr, ##35148
2205c     F2 FA 01 F6 | 	mov	result1, objptr
22060     00 60 04 FF 
22064     00 FA 45 F5 | 	or	result1, ##146800640
22068     44 00 00 FF 
2206c     50 E5 05 F1 | 	add	objptr, ##35152
22070     F2 FA 61 FC | 	wrlong	result1, objptr
22074     44 00 00 FF 
22078     50 E5 85 F1 | 	sub	objptr, ##35152
2207c     F2 FA 01 F6 | 	mov	result1, objptr
22080     00 68 04 FF 
22084     00 FA 45 F5 | 	or	result1, ##147849216
22088     44 00 00 FF 
2208c     6C E5 05 F1 | 	add	objptr, ##35180
22090     F2 FA 61 FC | 	wrlong	result1, objptr
22094     44 00 00 FF 
22098     6C E5 85 F1 | 	sub	objptr, ##35180
2209c     F2 FA 01 F6 | 	mov	result1, objptr
220a0     00 70 04 FF 
220a4     00 FA 45 F5 | 	or	result1, ##148897792
220a8     44 00 00 FF 
220ac     68 E5 05 F1 | 	add	objptr, ##35176
220b0     F2 FA 61 FC | 	wrlong	result1, objptr
220b4     44 00 00 FF 
220b8     68 E5 85 F1 | 	sub	objptr, ##35176
220bc     F2 FA 01 F6 | 	mov	result1, objptr
220c0     00 78 04 FF 
220c4     00 FA 45 F5 | 	or	result1, ##149946368
220c8     44 00 00 FF 
220cc     78 E5 05 F1 | 	add	objptr, ##35192
220d0     F2 FA 61 FC | 	wrlong	result1, objptr
220d4     44 00 00 FF 
220d8     78 E5 85 F1 | 	sub	objptr, ##35192
220dc     F2 FA 01 F6 | 	mov	result1, objptr
220e0     00 80 04 FF 
220e4     00 FA 45 F5 | 	or	result1, ##150994944
220e8     44 00 00 FF 
220ec     44 E5 05 F1 | 	add	objptr, ##35140
220f0     F2 FA 61 FC | 	wrlong	result1, objptr
220f4     44 00 00 FF 
220f8     44 E5 85 F1 | 	sub	objptr, ##35140
220fc     F2 FA 01 F6 | 	mov	result1, objptr
22100     00 88 04 FF 
22104     00 FA 45 F5 | 	or	result1, ##152043520
22108     44 00 00 FF 
2210c     74 E5 05 F1 | 	add	objptr, ##35188
22110     F2 FA 61 FC | 	wrlong	result1, objptr
22114     44 00 00 FF 
22118     74 E5 85 F1 | 	sub	objptr, ##35188
2211c     F2 FA 01 F6 | 	mov	result1, objptr
22120     00 90 04 FF 
22124     00 FA 45 F5 | 	or	result1, ##153092096
22128     44 00 00 FF 
2212c     64 E5 05 F1 | 	add	objptr, ##35172
22130     F2 FA 61 FC | 	wrlong	result1, objptr
22134     44 00 00 FF 
22138     64 E5 85 F1 | 	sub	objptr, ##35172
2213c     F2 FA 01 F6 | 	mov	result1, objptr
22140     00 98 04 FF 
22144     00 FA 45 F5 | 	or	result1, ##154140672
22148     43 00 00 FF 
2214c     14 E5 05 F1 | 	add	objptr, ##34580
22150     F2 FA 61 FC | 	wrlong	result1, objptr
22154     43 00 00 FF 
22158     14 E5 85 F1 | 	sub	objptr, ##34580
2215c     F2 FA 01 F6 | 	mov	result1, objptr
22160     00 A0 04 FF 
22164     00 FA 45 F5 | 	or	result1, ##155189248
22168     44 00 00 FF 
2216c     34 E5 05 F1 | 	add	objptr, ##35124
22170     F2 FA 61 FC | 	wrlong	result1, objptr
22174     44 00 00 FF 
22178     34 E5 85 F1 | 	sub	objptr, ##35124
2217c     F2 FA 01 F6 | 	mov	result1, objptr
22180     00 08 01 FF 
22184     00 FA 45 F5 | 	or	result1, ##34603008
22188     44 00 00 FF 
2218c     3C E5 05 F1 | 	add	objptr, ##35132
22190     F2 FA 61 FC | 	wrlong	result1, objptr
22194     44 00 00 FF 
22198     3C E5 85 F1 | 	sub	objptr, ##35132
2219c     F2 FA 01 F6 | 	mov	result1, objptr
221a0     00 A8 04 FF 
221a4     00 FA 45 F5 | 	or	result1, ##156237824
221a8     44 00 00 FF 
221ac     38 E5 05 F1 | 	add	objptr, ##35128
221b0     F2 FA 61 FC | 	wrlong	result1, objptr
221b4     44 00 00 FF 
221b8     38 E5 85 F1 | 	sub	objptr, ##35128
221bc     F2 FA 01 F6 | 	mov	result1, objptr
221c0     00 B0 04 FF 
221c4     00 FA 45 F5 | 	or	result1, ##157286400
221c8     44 00 00 FF 
221cc     7C E5 05 F1 | 	add	objptr, ##35196
221d0     F2 FA 61 FC | 	wrlong	result1, objptr
221d4     44 00 00 FF 
221d8     7C E5 85 F1 | 	sub	objptr, ##35196
221dc     F2 FA 01 F6 | 	mov	result1, objptr
221e0     00 B8 04 FF 
221e4     00 FA 45 F5 | 	or	result1, ##158334976
221e8     44 00 00 FF 
221ec     80 E5 05 F1 | 	add	objptr, ##35200
221f0     F2 FA 61 FC | 	wrlong	result1, objptr
221f4     44 00 00 FF 
221f8     80 E5 85 F1 | 	sub	objptr, ##35200
221fc     F2 FA 01 F6 | 	mov	result1, objptr
22200     00 C0 04 FF 
22204     00 FA 45 F5 | 	or	result1, ##159383552
22208     44 00 00 FF 
2220c     84 E5 05 F1 | 	add	objptr, ##35204
22210     F2 FA 61 FC | 	wrlong	result1, objptr
22214     44 00 00 FF 
22218     84 E5 85 F1 | 	sub	objptr, ##35204
2221c     F2 FA 01 F6 | 	mov	result1, objptr
22220     00 C8 04 FF 
22224     00 FA 45 F5 | 	or	result1, ##160432128
22228     44 00 00 FF 
2222c     88 E5 05 F1 | 	add	objptr, ##35208
22230     F2 FA 61 FC | 	wrlong	result1, objptr
22234     44 00 00 FF 
22238     88 E5 85 F1 | 	sub	objptr, ##35208
2223c     F2 FA 01 F6 | 	mov	result1, objptr
22240     00 D0 04 FF 
22244     00 FA 45 F5 | 	or	result1, ##161480704
22248     44 00 00 FF 
2224c     90 E5 05 F1 | 	add	objptr, ##35216
22250     F2 FA 61 FC | 	wrlong	result1, objptr
22254     44 00 00 FF 
22258     90 E5 85 F1 | 	sub	objptr, ##35216
2225c     F2 FA 01 F6 | 	mov	result1, objptr
22260     00 D8 04 FF 
22264     00 FA 45 F5 | 	or	result1, ##162529280
22268     44 00 00 FF 
2226c     94 E5 05 F1 | 	add	objptr, ##35220
22270     F2 FA 61 FC | 	wrlong	result1, objptr
22274     44 00 00 FF 
22278     94 E5 85 F1 | 	sub	objptr, ##35220
2227c     F2 FA 01 F6 | 	mov	result1, objptr
22280     00 E0 04 FF 
22284     00 FA 45 F5 | 	or	result1, ##163577856
22288     44 00 00 FF 
2228c     98 E5 05 F1 | 	add	objptr, ##35224
22290     F2 FA 61 FC | 	wrlong	result1, objptr
22294     44 00 00 FF 
22298     98 E5 85 F1 | 	sub	objptr, ##35224
2229c     F2 FA 01 F6 | 	mov	result1, objptr
222a0     00 E8 04 FF 
222a4     00 FA 45 F5 | 	or	result1, ##164626432
222a8     44 00 00 FF 
222ac     8C E5 05 F1 | 	add	objptr, ##35212
222b0     F2 FA 61 FC | 	wrlong	result1, objptr
222b4     44 00 00 FF 
222b8     8C E5 85 F1 | 	sub	objptr, ##35212
222bc     F2 FA 01 F6 | 	mov	result1, objptr
222c0     00 F0 04 FF 
222c4     00 FA 45 F5 | 	or	result1, ##165675008
222c8     44 00 00 FF 
222cc     70 E5 05 F1 | 	add	objptr, ##35184
222d0     F2 FA 61 FC | 	wrlong	result1, objptr
222d4     44 00 00 FF 
222d8     70 E5 85 F1 | 	sub	objptr, ##35184
222dc     F2 FA 01 F6 | 	mov	result1, objptr
222e0     00 F8 04 FF 
222e4     00 FA 45 F5 | 	or	result1, ##166723584
222e8     44 00 00 FF 
222ec     60 E5 05 F1 | 	add	objptr, ##35168
222f0     F2 FA 61 FC | 	wrlong	result1, objptr
222f4     44 00 00 FF 
222f8     60 E5 85 F1 | 	sub	objptr, ##35168
222fc     F2 FA 01 F6 | 	mov	result1, objptr
22300     00 00 05 FF 
22304     00 FA 45 F5 | 	or	result1, ##167772160
22308     44 00 00 FF 
2230c     9C E5 05 F1 | 	add	objptr, ##35228
22310     F2 FA 61 FC | 	wrlong	result1, objptr
22314     44 00 00 FF 
22318     9C E5 85 F1 | 	sub	objptr, ##35228
2231c                 | _init_commands_ret
2231c     2D 00 64 FD | 	ret
22320                 | 
22320                 | ' 
22320                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
22320                 | ' 
22320                 | ' sub init_audio
22320                 | _init_audio
22320     06 4A 05 F6 | 	mov	COUNT_, #6
22324     A8 00 A0 FD | 	call	#pushregs_
22328     00 C0 1F FF 
2232c     00 26 06 F6 | 	mov	local01, ##1065353216
22330                 | ' 
22330                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
22330     00 28 06 F6 | 	mov	local02, #0
22334                 | LR__2610
22334     14 2B 02 F6 | 	mov	local03, local02
22338     01 2A 66 F0 | 	shl	local03, #1
2233c     58 7F 23 FF 
22340     00 2C 06 F6 | 	mov	local04, ##1191096320
22344     14 13 52 F6 | 	abs	arg01, local02 wc
22348     1F 2E C6 C9 |  if_b	decod	local05, #31
2234c     00 2E 06 36 |  if_ae	mov	local05, #0
22350     3C 70 B0 FD | 	call	#__system___float_fromuns
22354     17 FB 61 F5 | 	xor	result1, local05
22358     FD 12 02 F6 | 	mov	arg01, result1
2235c     87 24 20 FF 
22360     DB 15 06 F6 | 	mov	arg02, ##1078530011
22364     2C 74 B0 FD | 	call	#__system___float_mul
22368     FD 12 02 F6 | 	mov	arg01, result1
2236c     00 00 22 FF 
22370     00 14 06 F6 | 	mov	arg02, ##1140850688
22374     20 76 B0 FD | 	call	#__system___float_div
22378     FD 12 02 F6 | 	mov	arg01, result1
2237c     74 7D B0 FD | 	call	#__system____builtin_sinf
22380     FD 14 02 F6 | 	mov	arg02, result1
22384     16 13 02 F6 | 	mov	arg01, local04
22388     08 74 B0 FD | 	call	#__system___float_mul
2238c     FD 12 02 F6 | 	mov	arg01, result1
22390     01 14 06 F6 | 	mov	arg02, #1
22394     C4 78 B0 FD | 	call	#__system___float_tointeger
22398     FD 14 02 F6 | 	mov	arg02, result1
2239c     15 13 02 F6 | 	mov	arg01, local03
223a0     6C 0D B0 FD | 	call	#_psdpoke
223a4     01 28 06 F1 | 	add	local02, #1
223a8     02 00 00 FF 
223ac     00 28 56 F2 | 	cmps	local02, ##1024 wc
223b0     80 FF 9F CD |  if_b	jmp	#LR__2610
223b4                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
223b4     00 28 06 F6 | 	mov	local02, #0
223b8                 | LR__2611
223b8     14 15 02 F6 | 	mov	arg02, local02
223bc     01 14 66 F0 | 	shl	arg02, #1
223c0     0B 12 C6 F9 | 	decod	arg01, #11
223c4     0A 13 02 F1 | 	add	arg01, arg02
223c8     14 2D 02 F6 | 	mov	local04, local02
223cc     07 2C 66 F0 | 	shl	local04, #7
223d0     14 2D 82 F1 | 	sub	local04, local02
223d4     C0 FF 7F FF 
223d8     00 15 06 F6 | 	mov	arg02, ##-32512
223dc     16 15 02 F1 | 	add	arg02, local04
223e0     2C 0D B0 FD | 	call	#_psdpoke
223e4     09 2C C6 F9 | 	decod	local04, #9
223e8     14 2D 02 F1 | 	add	local04, local02
223ec     01 2C 66 F0 | 	shl	local04, #1
223f0     0B 12 C6 F9 | 	decod	arg01, #11
223f4     16 13 02 F1 | 	add	arg01, local04
223f8     14 2F 02 F6 | 	mov	local05, local02
223fc     07 2E 66 F0 | 	shl	local05, #7
22400     14 2F 82 F1 | 	sub	local05, local02
22404     3F 00 00 FF 
22408     00 15 06 F6 | 	mov	arg02, ##32512
2240c     17 15 82 F1 | 	sub	arg02, local05
22410     FC 0C B0 FD | 	call	#_psdpoke
22414     01 28 06 F1 | 	add	local02, #1
22418     01 00 00 FF 
2241c     00 28 56 F2 | 	cmps	local02, ##512 wc
22420     94 FF 9F CD |  if_b	jmp	#LR__2611
22424                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
22424     00 28 06 F6 | 	mov	local02, #0
22428                 | LR__2612
22428     14 2F 02 F6 | 	mov	local05, local02
2242c     01 2E 66 F0 | 	shl	local05, #1
22430     0C 12 C6 F9 | 	decod	arg01, #12
22434     17 13 02 F1 | 	add	arg01, local05
22438     14 2F 02 F6 | 	mov	local05, local02
2243c     06 2E 66 F0 | 	shl	local05, #6
22440     14 2F 82 F1 | 	sub	local05, local02
22444     C1 FF 7F FF 
22448     00 14 06 F6 | 	mov	arg02, ##-32256
2244c     17 15 02 F1 | 	add	arg02, local05
22450     BC 0C B0 FD | 	call	#_psdpoke
22454     01 28 06 F1 | 	add	local02, #1
22458     02 00 00 FF 
2245c     00 28 56 F2 | 	cmps	local02, ##1024 wc
22460     C4 FF 9F CD |  if_b	jmp	#LR__2612
22464                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
22464     00 28 06 F6 | 	mov	local02, #0
22468                 | LR__2613
22468     14 2F 02 F6 | 	mov	local05, local02
2246c     01 2E 66 F0 | 	shl	local05, #1
22470     0C 00 00 FF 
22474     00 12 06 F6 | 	mov	arg01, ##6144
22478     17 13 02 F1 | 	add	arg01, local05
2247c     C0 FF 7F FF 
22480     A8 14 06 F6 | 	mov	arg02, ##-32600
22484     88 0C B0 FD | 	call	#_psdpoke
22488     01 28 06 F1 | 	add	local02, #1
2248c     80 28 56 F2 | 	cmps	local02, #128 wc
22490     D4 FF 9F CD |  if_b	jmp	#LR__2613
22494     80 28 06 F6 | 	mov	local02, #128
22498                 | LR__2614
22498     14 2F 02 F6 | 	mov	local05, local02
2249c     01 2E 66 F0 | 	shl	local05, #1
224a0     0C 00 00 FF 
224a4     00 12 06 F6 | 	mov	arg01, ##6144
224a8     17 13 02 F1 | 	add	arg01, local05
224ac     3F 00 00 FF 
224b0     58 15 06 F6 | 	mov	arg02, ##32600
224b4     58 0C B0 FD | 	call	#_psdpoke
224b8     01 28 06 F1 | 	add	local02, #1
224bc     02 00 00 FF 
224c0     00 28 16 F2 | 	cmp	local02, ##1024 wc
224c4     D0 FF 9F CD |  if_b	jmp	#LR__2614
224c8                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
224c8     00 28 06 F6 | 	mov	local02, #0
224cc                 | LR__2615
224cc     14 2F 02 F6 | 	mov	local05, local02
224d0     01 2E 66 F0 | 	shl	local05, #1
224d4     0D 12 C6 F9 | 	decod	arg01, #13
224d8     17 13 02 F1 | 	add	arg01, local05
224dc     C0 FF 7F FF 
224e0     A8 14 06 F6 | 	mov	arg02, ##-32600
224e4     28 0C B0 FD | 	call	#_psdpoke
224e8     01 28 06 F1 | 	add	local02, #1
224ec     01 00 00 FF 
224f0     00 28 56 F2 | 	cmps	local02, ##512 wc
224f4     D4 FF 9F CD |  if_b	jmp	#LR__2615
224f8     09 28 C6 F9 | 	decod	local02, #9
224fc                 | LR__2616
224fc     14 2F 02 F6 | 	mov	local05, local02
22500     01 2E 66 F0 | 	shl	local05, #1
22504     0D 12 C6 F9 | 	decod	arg01, #13
22508     17 13 02 F1 | 	add	arg01, local05
2250c     3F 00 00 FF 
22510     58 15 06 F6 | 	mov	arg02, ##32600
22514     F8 0B B0 FD | 	call	#_psdpoke
22518     01 28 06 F1 | 	add	local02, #1
2251c     02 00 00 FF 
22520     00 28 16 F2 | 	cmp	local02, ##1024 wc
22524     D4 FF 9F CD |  if_b	jmp	#LR__2616
22528                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
22528     00 28 06 F6 | 	mov	local02, #0
2252c                 | LR__2617
2252c     14 2F 02 F6 | 	mov	local05, local02
22530     01 2E 66 F0 | 	shl	local05, #1
22534     14 00 00 FF 
22538     00 12 06 F6 | 	mov	arg01, ##10240
2253c     17 13 02 F1 | 	add	arg01, local05
22540     C0 FF 7F FF 
22544     A8 14 06 F6 | 	mov	arg02, ##-32600
22548     C4 0B B0 FD | 	call	#_psdpoke
2254c     01 28 06 F1 | 	add	local02, #1
22550     00 29 56 F2 | 	cmps	local02, #256 wc
22554     D4 FF 9F CD |  if_b	jmp	#LR__2617
22558     00 29 06 F6 | 	mov	local02, #256
2255c                 | LR__2618
2255c     14 2F 02 F6 | 	mov	local05, local02
22560     01 2E 66 F0 | 	shl	local05, #1
22564     14 00 00 FF 
22568     00 12 06 F6 | 	mov	arg01, ##10240
2256c     17 13 02 F1 | 	add	arg01, local05
22570     3F 00 00 FF 
22574     58 15 06 F6 | 	mov	arg02, ##32600
22578     94 0B B0 FD | 	call	#_psdpoke
2257c     01 28 06 F1 | 	add	local02, #1
22580     02 00 00 FF 
22584     00 28 16 F2 | 	cmp	local02, ##1024 wc
22588     D0 FF 9F CD |  if_b	jmp	#LR__2618
2258c                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
2258c     18 00 00 FF 
22590     00 28 06 F6 | 	mov	local02, ##12288
22594                 | LR__2619
22594     14 13 02 F6 | 	mov	arg01, local02
22598     00 14 06 F6 | 	mov	arg02, #0
2259c     28 0B B0 FD | 	call	#_pslpoke
225a0     04 28 06 F1 | 	add	local02, #4
225a4     77 00 00 FF 
225a8     FD 29 56 F2 | 	cmps	local02, ##61437 wc
225ac     E4 FF 9F CD |  if_b	jmp	#LR__2619
225b0                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
225b0     00 28 06 F6 | 	mov	local02, #0
225b4                 | LR__2620
225b4     14 2F 02 F6 | 	mov	local05, local02
225b8     01 2E 66 F0 | 	shl	local05, #1
225bc     78 00 00 FF 
225c0     00 2A 06 F6 | 	mov	local03, ##61440
225c4     17 2B 02 F1 | 	add	local03, local05
225c8     12 00 00 FF 
225cc     BA EA 05 F1 | 	add	ptr__dat__, ##9402
225d0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
225d4     12 00 00 FF 
225d8     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
225dc     10 12 06 F1 | 	add	arg01, #16
225e0     14 15 02 F6 | 	mov	arg02, local02
225e4     01 14 66 F0 | 	shl	arg02, #1
225e8     0A 13 02 F1 | 	add	arg01, arg02
225ec     09 15 E2 FA | 	rdword	arg02, arg01
225f0     15 13 02 F6 | 	mov	arg01, local03
225f4     18 0B B0 FD | 	call	#_psdpoke
225f8     01 28 06 F1 | 	add	local02, #1
225fc     02 00 00 FF 
22600     00 28 56 F2 | 	cmps	local02, ##1024 wc
22604     AC FF 9F CD |  if_b	jmp	#LR__2620
22608                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
22608     00 28 06 F6 | 	mov	local02, #0
2260c                 | LR__2621
2260c     14 2F 02 F6 | 	mov	local05, local02
22610     01 2E 66 F0 | 	shl	local05, #1
22614     7C 00 00 FF 
22618     00 2A 06 F6 | 	mov	local03, ##63488
2261c     17 2B 02 F1 | 	add	local03, local05
22620     0E 00 00 FF 
22624     AA EA 05 F1 | 	add	ptr__dat__, ##7338
22628     F5 12 02 F6 | 	mov	arg01, ptr__dat__
2262c     0E 00 00 FF 
22630     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
22634     10 12 06 F1 | 	add	arg01, #16
22638     14 15 02 F6 | 	mov	arg02, local02
2263c     01 14 66 F0 | 	shl	arg02, #1
22640     0A 13 02 F1 | 	add	arg01, arg02
22644     09 15 E2 FA | 	rdword	arg02, arg01
22648     15 13 02 F6 | 	mov	arg01, local03
2264c     C0 0A B0 FD | 	call	#_psdpoke
22650     01 28 06 F1 | 	add	local02, #1
22654     02 00 00 FF 
22658     00 28 56 F2 | 	cmps	local02, ##1024 wc
2265c     AC FF 9F CD |  if_b	jmp	#LR__2621
22660                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
22660     00 28 06 F6 | 	mov	local02, #0
22664     0C 00 00 FF 
22668     D8 E4 05 F1 | 	add	objptr, ##6360
2266c     97 18 48 FB | 	callpa	#(@LR__2623-@LR__2622)>>2,fcache_load_ptr_
22670                 | LR__2622
22670     14 2F 02 F6 | 	mov	local05, local02
22674     01 2E 66 F0 | 	shl	local05, #1
22678     F2 2E 02 F1 | 	add	local05, objptr
2267c     14 2B 02 F6 | 	mov	local03, local02
22680     08 2A 66 F0 | 	shl	local03, #8
22684     7F 00 00 FF 
22688     00 31 06 F6 | 	mov	local06, ##65280
2268c     15 31 82 F1 | 	sub	local06, local03
22690     17 31 52 FC | 	wrword	local06, local05
22694     01 28 06 F1 | 	add	local02, #1
22698     00 29 56 F2 | 	cmps	local02, #256 wc
2269c     D0 FF 9F CD |  if_b	jmp	#LR__2622
226a0                 | LR__2623
226a0     0C 00 00 FF 
226a4     D8 E4 85 F1 | 	sub	objptr, ##6360
226a8                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
226a8     00 28 06 F6 | 	mov	local02, #0
226ac                 | LR__2624
226ac     14 2F 02 F6 | 	mov	local05, local02
226b0     01 2E 66 F0 | 	shl	local05, #1
226b4     0D 00 00 FF 
226b8     D8 E4 05 F1 | 	add	objptr, ##6872
226bc     F2 2E 02 F1 | 	add	local05, objptr
226c0     80 BF 23 FF 
226c4     00 12 06 F6 | 	mov	arg01, ##1199505408
226c8     13 15 02 F6 | 	mov	arg02, local01
226cc     0D 00 00 FF 
226d0     D8 E4 85 F1 | 	sub	objptr, ##6872
226d4     BC 70 B0 FD | 	call	#__system___float_mul
226d8     FD 12 02 F6 | 	mov	arg01, result1
226dc     01 14 06 F6 | 	mov	arg02, #1
226e0     78 75 B0 FD | 	call	#__system___float_tointeger
226e4     17 FB 51 FC | 	wrword	result1, local05
226e8     13 13 02 F6 | 	mov	arg01, local01
226ec     CC BC 1F FF 
226f0     9A 15 06 F6 | 	mov	arg02, ##1064933786
226f4     9C 70 B0 FD | 	call	#__system___float_mul
226f8     FD 26 02 F6 | 	mov	local01, result1
226fc     01 28 06 F1 | 	add	local02, #1
22700     00 29 56 F2 | 	cmps	local02, #256 wc
22704     A4 FF 9F CD |  if_b	jmp	#LR__2624
22708     0E 00 00 FF 
2270c     D6 E4 05 F1 | 	add	objptr, ##7382
22710     F2 00 58 FC | 	wrword	#0, objptr
22714                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
22714     00 28 06 F6 | 	mov	local02, #0
22718     02 E4 05 F1 | 	add	objptr, #2
2271c     97 10 48 FB | 	callpa	#(@LR__2626-@LR__2625)>>2,fcache_load_ptr_
22720                 | LR__2625
22720     14 2F 02 F6 | 	mov	local05, local02
22724     01 2E 66 F0 | 	shl	local05, #1
22728     F2 2E 02 F1 | 	add	local05, objptr
2272c     7F 00 80 FF 
22730     17 01 5A FC | 	wrword	##65280, local05
22734     01 28 06 F1 | 	add	local02, #1
22738     FF 28 56 F2 | 	cmps	local02, #255 wc
2273c     E0 FF 9F CD |  if_b	jmp	#LR__2625
22740                 | LR__2626
22740     FE E5 05 F1 | 	add	objptr, #510
22744     F2 00 58 FC | 	wrword	#0, objptr
22748                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
22748     00 28 06 F6 | 	mov	local02, #0
2274c     02 E4 05 F1 | 	add	objptr, #2
22750     97 52 48 FB | 	callpa	#(@LR__2631-@LR__2627)>>2,fcache_load_ptr_
22754                 | LR__2627
22754     14 2F 02 F6 | 	mov	local05, local02
22758     01 2E 66 F0 | 	shl	local05, #1
2275c     F2 2E 02 F1 | 	add	local05, objptr
22760     14 31 02 F6 | 	mov	local06, local02
22764     0C 30 66 F0 | 	shl	local06, #12
22768     17 31 52 FC | 	wrword	local06, local05
2276c     01 28 06 F1 | 	add	local02, #1
22770     10 28 56 F2 | 	cmps	local02, #16 wc
22774     DC FF 9F CD |  if_b	jmp	#LR__2627
22778                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
22778     10 28 06 F6 | 	mov	local02, #16
2277c                 | LR__2628
2277c     14 2F 02 F6 | 	mov	local05, local02
22780     01 2E 66 F0 | 	shl	local05, #1
22784     F2 2E 02 F1 | 	add	local05, objptr
22788     7F 00 80 FF 
2278c     17 01 5A FC | 	wrword	##65280, local05
22790     01 28 06 F1 | 	add	local02, #1
22794     F0 28 16 F2 | 	cmp	local02, #240 wc
22798     E0 FF 9F CD |  if_b	jmp	#LR__2628
2279c                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
2279c     F0 28 06 F6 | 	mov	local02, #240
227a0                 | LR__2629
227a0     14 2F 02 F6 | 	mov	local05, local02
227a4     01 2E 66 F0 | 	shl	local05, #1
227a8     F2 2E 02 F1 | 	add	local05, objptr
227ac     FF 2A 06 F6 | 	mov	local03, #255
227b0     14 2B 82 F1 | 	sub	local03, local02
227b4     0C 2A 66 F0 | 	shl	local03, #12
227b8     17 2B 52 FC | 	wrword	local03, local05
227bc     01 28 06 F1 | 	add	local02, #1
227c0     00 29 16 F2 | 	cmp	local02, #256 wc
227c4     D8 FF 9F CD |  if_b	jmp	#LR__2629
227c8                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
227c8     00 28 06 F6 | 	mov	local02, #0
227cc     01 00 00 FF 
227d0     00 E4 05 F1 | 	add	objptr, ##512
227d4                 | LR__2630
227d4     14 2F 02 F6 | 	mov	local05, local02
227d8     01 2E 66 F0 | 	shl	local05, #1
227dc     F2 2E 02 F1 | 	add	local05, objptr
227e0     14 31 02 F6 | 	mov	local06, local02
227e4     08 30 66 F0 | 	shl	local06, #8
227e8     17 31 52 FC | 	wrword	local06, local05
227ec     01 28 06 F1 | 	add	local02, #1
227f0     00 29 56 F2 | 	cmps	local02, #256 wc
227f4     DC FF 9F CD |  if_b	jmp	#LR__2630
227f8                 | LR__2631
227f8     FE E5 05 F1 | 	add	objptr, #510
227fc     F2 00 58 FC | 	wrword	#0, objptr
22800                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
22800     00 28 06 F6 | 	mov	local02, #0
22804     02 E4 05 F1 | 	add	objptr, #2
22808     97 6A 48 FB | 	callpa	#(@LR__2636-@LR__2632)>>2,fcache_load_ptr_
2280c                 | LR__2632
2280c     14 2F 02 F6 | 	mov	local05, local02
22810     01 2E 66 F0 | 	shl	local05, #1
22814     F2 2E 02 F1 | 	add	local05, objptr
22818     14 31 02 F6 | 	mov	local06, local02
2281c     04 30 66 F0 | 	shl	local06, #4
22820     14 31 02 F1 | 	add	local06, local02
22824     04 30 66 F0 | 	shl	local06, #4
22828     17 31 52 FC | 	wrword	local06, local05
2282c     01 28 06 F1 | 	add	local02, #1
22830     F0 28 56 F2 | 	cmps	local02, #240 wc
22834     D4 FF 9F CD |  if_b	jmp	#LR__2632
22838     F0 28 06 F6 | 	mov	local02, #240
2283c                 | LR__2633
2283c     14 2F 02 F6 | 	mov	local05, local02
22840     01 2E 66 F0 | 	shl	local05, #1
22844     F2 2E 02 F1 | 	add	local05, objptr
22848     FF 2A 06 F6 | 	mov	local03, #255
2284c     14 2B 82 F1 | 	sub	local03, local02
22850     0C 2A 66 F0 | 	shl	local03, #12
22854     17 2B 52 FC | 	wrword	local03, local05
22858     01 28 06 F1 | 	add	local02, #1
2285c     00 29 16 F2 | 	cmp	local02, #256 wc
22860     D8 FF 9F CD |  if_b	jmp	#LR__2633
22864                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
22864     00 28 06 F6 | 	mov	local02, #0
22868     01 00 00 FF 
2286c     00 E4 05 F1 | 	add	objptr, ##512
22870                 | LR__2634
22870     14 2F 02 F6 | 	mov	local05, local02
22874     01 2E 66 F0 | 	shl	local05, #1
22878     F2 2E 02 F1 | 	add	local05, objptr
2287c     14 31 02 F6 | 	mov	local06, local02
22880     09 30 66 F0 | 	shl	local06, #9
22884     17 31 52 FC | 	wrword	local06, local05
22888     FF 2E 06 F6 | 	mov	local05, #255
2288c     14 2F 82 F1 | 	sub	local05, local02
22890     01 2E 66 F0 | 	shl	local05, #1
22894     F2 2E 02 F1 | 	add	local05, objptr
22898     14 31 02 F6 | 	mov	local06, local02
2289c     09 30 66 F0 | 	shl	local06, #9
228a0     17 31 52 FC | 	wrword	local06, local05
228a4     01 28 06 F1 | 	add	local02, #1
228a8     80 28 56 F2 | 	cmps	local02, #128 wc
228ac     C0 FF 9F CD |  if_b	jmp	#LR__2634
228b0                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
228b0     00 28 06 F6 | 	mov	local02, #0
228b4     01 00 00 FF 
228b8     00 E4 05 F1 | 	add	objptr, ##512
228bc                 | LR__2635
228bc     14 2F 02 F6 | 	mov	local05, local02
228c0     01 2E 66 F0 | 	shl	local05, #1
228c4     F2 2E 02 F1 | 	add	local05, objptr
228c8     14 31 02 F6 | 	mov	local06, local02
228cc     0D 30 66 F0 | 	shl	local06, #13
228d0     17 31 52 FC | 	wrword	local06, local05
228d4     01 28 06 F1 | 	add	local02, #1
228d8     08 28 56 F2 | 	cmps	local02, #8 wc
228dc     DC FF 9F CD |  if_b	jmp	#LR__2635
228e0                 | LR__2636
228e0                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
228e0     08 28 06 F6 | 	mov	local02, #8
228e4     97 42 48 FB | 	callpa	#(@LR__2640-@LR__2637)>>2,fcache_load_ptr_
228e8                 | LR__2637
228e8     14 2F 02 F6 | 	mov	local05, local02
228ec     01 2E 66 F0 | 	shl	local05, #1
228f0     F2 2E 02 F1 | 	add	local05, objptr
228f4     14 27 02 F6 | 	mov	local01, local02
228f8     08 26 86 F1 | 	sub	local01, #8
228fc     0B 26 66 F0 | 	shl	local01, #11
22900     7F 00 00 FF 
22904     00 31 06 F6 | 	mov	local06, ##65280
22908     13 31 82 F1 | 	sub	local06, local01
2290c     17 31 52 FC | 	wrword	local06, local05
22910     01 28 06 F1 | 	add	local02, #1
22914     18 28 16 F2 | 	cmp	local02, #24 wc
22918     CC FF 9F CD |  if_b	jmp	#LR__2637
2291c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
2291c     18 28 06 F6 | 	mov	local02, #24
22920                 | LR__2638
22920     14 2F 02 F6 | 	mov	local05, local02
22924     01 2E 66 F0 | 	shl	local05, #1
22928     F2 2E 02 F1 | 	add	local05, objptr
2292c     40 00 80 FF 
22930     17 01 58 FC | 	wrword	##32768, local05
22934     01 28 06 F1 | 	add	local02, #1
22938     81 28 16 F2 | 	cmp	local02, #129 wc
2293c     E0 FF 9F CD |  if_b	jmp	#LR__2638
22940                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
22940     81 28 06 F6 | 	mov	local02, #129
22944                 | LR__2639
22944     14 2F 02 F6 | 	mov	local05, local02
22948     01 2E 66 F0 | 	shl	local05, #1
2294c     F2 2E 02 F1 | 	add	local05, objptr
22950     FF 2A 06 F6 | 	mov	local03, #255
22954     14 2B 82 F1 | 	sub	local03, local02
22958     08 2A 66 F0 | 	shl	local03, #8
2295c     17 2B 52 FC | 	wrword	local03, local05
22960     01 28 06 F1 | 	add	local02, #1
22964     00 29 16 F2 | 	cmp	local02, #256 wc
22968     D8 FF 9F CD |  if_b	jmp	#LR__2639
2296c                 | LR__2640
2296c     3E 00 00 FF 
22970     EA E5 05 F1 | 	add	objptr, ##32234
22974     F2 00 59 FC | 	wrword	#128, objptr
22978     52 00 00 FF 
2297c     C2 E4 85 F1 | 	sub	objptr, ##42178
22980                 | ' for i=0 to 7
22980     00 28 06 F6 | 	mov	local02, #0
22984     97 8E 48 FB | 	callpa	#(@LR__2642-@LR__2641)>>2,fcache_load_ptr_
22988                 | LR__2641
22988     14 2F 02 F6 | 	mov	local05, local02
2298c     01 2E 66 F0 | 	shl	local05, #1
22990     14 2F 02 F1 | 	add	local05, local02
22994     03 2E 66 F0 | 	shl	local05, #3
22998     14 00 00 FF 
2299c     38 E5 05 F1 | 	add	objptr, ##10552
229a0     F2 2E 02 F1 | 	add	local05, objptr
229a4     00 EE A1 FF 
229a8     17 01 68 FC | 	wrlong	##1138491392, local05
229ac     14 2F 02 F6 | 	mov	local05, local02
229b0     01 2E 66 F0 | 	shl	local05, #1
229b4     14 2F 02 F1 | 	add	local05, local02
229b8     03 2E 66 F0 | 	shl	local05, #3
229bc     F2 2E 02 F1 | 	add	local05, objptr
229c0     04 2E 06 F1 | 	add	local05, #4
229c4     17 29 42 FC | 	wrbyte	local02, local05
229c8     14 2F 02 F6 | 	mov	local05, local02
229cc     01 2E 66 F0 | 	shl	local05, #1
229d0     14 2F 02 F1 | 	add	local05, local02
229d4     03 2E 66 F0 | 	shl	local05, #3
229d8     F2 2E 02 F1 | 	add	local05, objptr
229dc     05 2E 06 F1 | 	add	local05, #5
229e0     17 29 42 FC | 	wrbyte	local02, local05
229e4     14 2F 02 F6 | 	mov	local05, local02
229e8     01 2E 66 F0 | 	shl	local05, #1
229ec     14 2F 02 F1 | 	add	local05, local02
229f0     03 2E 66 F0 | 	shl	local05, #3
229f4     F2 2E 02 F1 | 	add	local05, objptr
229f8     06 2E 06 F1 | 	add	local05, #6
229fc     17 01 58 FC | 	wrword	#0, local05
22a00     14 2F 02 F6 | 	mov	local05, local02
22a04     01 2E 66 F0 | 	shl	local05, #1
22a08     14 2F 02 F1 | 	add	local05, local02
22a0c     03 2E 66 F0 | 	shl	local05, #3
22a10     F2 2E 02 F1 | 	add	local05, objptr
22a14     08 2E 06 F1 | 	add	local05, #8
22a18     00 C0 9F FF 
22a1c     17 01 68 FC | 	wrlong	##1065353216, local05
22a20     14 2F 02 F6 | 	mov	local05, local02
22a24     01 2E 66 F0 | 	shl	local05, #1
22a28     14 2F 02 F1 | 	add	local05, local02
22a2c     03 2E 66 F0 | 	shl	local05, #3
22a30     F2 2E 02 F1 | 	add	local05, objptr
22a34     0C 2E 06 F1 | 	add	local05, #12
22a38     00 40 A0 FF 
22a3c     17 01 68 FC | 	wrlong	##1082130432, local05
22a40     14 2F 02 F6 | 	mov	local05, local02
22a44     01 2E 66 F0 | 	shl	local05, #1
22a48     14 2F 02 F1 | 	add	local05, local02
22a4c     03 2E 66 F0 | 	shl	local05, #3
22a50     F2 2E 02 F1 | 	add	local05, objptr
22a54     10 2E 06 F1 | 	add	local05, #16
22a58     17 01 68 FC | 	wrlong	#0, local05
22a5c     14 2F 02 F6 | 	mov	local05, local02
22a60     01 2E 66 F0 | 	shl	local05, #1
22a64     14 2F 02 F1 | 	add	local05, local02
22a68     03 2E 66 F0 | 	shl	local05, #3
22a6c     F2 2E 02 F1 | 	add	local05, objptr
22a70     14 2E 06 F1 | 	add	local05, #20
22a74     17 FF 59 FC | 	wrword	#255, local05
22a78     14 2F 02 F6 | 	mov	local05, local02
22a7c     01 2E 66 F0 | 	shl	local05, #1
22a80     3D 00 00 FF 
22a84     7C E5 05 F1 | 	add	objptr, ##31612
22a88     F2 2E 02 F1 | 	add	local05, objptr
22a8c     17 FF 59 FC | 	wrword	#255, local05
22a90     01 28 06 F1 | 	add	local02, #1
22a94     08 28 56 F2 | 	cmps	local02, #8 wc
22a98     52 00 00 FF 
22a9c     B4 E4 85 F1 | 	sub	objptr, ##42164
22aa0     E4 FE 9F CD |  if_b	jmp	#LR__2641
22aa4                 | LR__2642
22aa4     00 6E 20 FF 
22aa8     00 30 06 F6 | 	mov	local06, ##1088159744
22aac                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
22aac     03 2E 06 F6 | 	mov	local05, #3
22ab0                 | LR__2643
22ab0     18 13 02 F6 | 	mov	arg01, local06
22ab4     CE C3 1F FF 
22ab8     7D 14 06 F6 | 	mov	arg02, ##1065852029
22abc     D4 6C B0 FD | 	call	#__system___float_mul
22ac0     FD 30 02 F6 | 	mov	local06, result1
22ac4     FA 2F 6E FB | 	djnz	local05, #LR__2643
22ac8     00 28 06 F6 | 	mov	local02, #0
22acc                 | LR__2644
22acc     14 2D 02 F6 | 	mov	local04, local02
22ad0     02 2C 66 F0 | 	shl	local04, #2
22ad4     14 00 00 FF 
22ad8     D8 E4 05 F1 | 	add	objptr, ##10456
22adc     F2 2C 02 F1 | 	add	local04, objptr
22ae0     16 31 62 FC | 	wrlong	local06, local04
22ae4     18 13 02 F6 | 	mov	arg01, local06
22ae8     CE C3 1F FF 
22aec     7D 14 06 F6 | 	mov	arg02, ##1065852029
22af0     14 00 00 FF 
22af4     D8 E4 85 F1 | 	sub	objptr, ##10456
22af8     98 6C B0 FD | 	call	#__system___float_mul
22afc     FD 30 02 F6 | 	mov	local06, result1
22b00     01 28 06 F1 | 	add	local02, #1
22b04     0C 28 56 F2 | 	cmps	local02, #12 wc
22b08     C0 FF 9F CD |  if_b	jmp	#LR__2644
22b0c     14 00 00 FF 
22b10     08 E5 05 F1 | 	add	objptr, ##10504
22b14     F2 50 6B FC | 	wrlong	#424, objptr
22b18     04 E4 05 F1 | 	add	objptr, #4
22b1c     F2 20 6B FC | 	wrlong	#400, objptr
22b20     04 E4 05 F1 | 	add	objptr, #4
22b24     F2 F2 6A FC | 	wrlong	#377, objptr
22b28     04 E4 05 F1 | 	add	objptr, #4
22b2c     F2 C8 6A FC | 	wrlong	#356, objptr
22b30     04 E4 05 F1 | 	add	objptr, #4
22b34     F2 A0 6A FC | 	wrlong	#336, objptr
22b38     04 E4 05 F1 | 	add	objptr, #4
22b3c     F2 7A 6A FC | 	wrlong	#317, objptr
22b40     04 E4 05 F1 | 	add	objptr, #4
22b44     F2 58 6A FC | 	wrlong	#300, objptr
22b48     04 E4 05 F1 | 	add	objptr, #4
22b4c     F2 36 6A FC | 	wrlong	#283, objptr
22b50     04 E4 05 F1 | 	add	objptr, #4
22b54     F2 16 6A FC | 	wrlong	#267, objptr
22b58     04 E4 05 F1 | 	add	objptr, #4
22b5c     F2 F8 69 FC | 	wrlong	#252, objptr
22b60     04 E4 05 F1 | 	add	objptr, #4
22b64     F2 DC 69 FC | 	wrlong	#238, objptr
22b68     04 E4 05 F1 | 	add	objptr, #4
22b6c     F2 C0 69 FC | 	wrlong	#224, objptr
22b70     3D 00 00 FF 
22b74     8E E5 05 F1 | 	add	objptr, ##31630
22b78     F2 00 59 FC | 	wrword	#128, objptr
22b7c     02 E4 85 F1 | 	sub	objptr, #2
22b80     F2 00 59 FC | 	wrword	#128, objptr
22b84     52 00 00 FF 
22b88     C0 E4 85 F1 | 	sub	objptr, ##42176
22b8c     A7 F0 03 F6 | 	mov	ptra, fp
22b90     B2 00 A0 FD | 	call	#popregs_
22b94                 | _init_audio_ret
22b94     2D 00 64 FD | 	ret
22b98                 | 
22b98                 | ' 
22b98                 | ' '------------------- Error messages
22b98                 | ' 
22b98                 | ' sub init_error_strings
22b98                 | _init_error_strings
22b98     B8 01 00 FF 
22b9c     0F 00 06 F6 | 	mov	_var01, ##@LR__5980
22ba0     45 00 00 FF 
22ba4     7C E4 05 F1 | 	add	objptr, ##35452
22ba8     F2 00 62 FC | 	wrlong	_var01, objptr
22bac     B8 01 00 FF 
22bb0     10 00 06 F6 | 	mov	_var01, ##@LR__5981
22bb4     04 E4 05 F1 | 	add	objptr, #4
22bb8     F2 00 62 FC | 	wrlong	_var01, objptr
22bbc     B8 01 00 FF 
22bc0     34 00 06 F6 | 	mov	_var01, ##@LR__5982
22bc4     04 E4 05 F1 | 	add	objptr, #4
22bc8     F2 00 62 FC | 	wrlong	_var01, objptr
22bcc     B8 01 00 FF 
22bd0     54 00 06 F6 | 	mov	_var01, ##@LR__5983
22bd4     04 E4 05 F1 | 	add	objptr, #4
22bd8     F2 00 62 FC | 	wrlong	_var01, objptr
22bdc     B8 01 00 FF 
22be0     6D 00 06 F6 | 	mov	_var01, ##@LR__5984
22be4     04 E4 05 F1 | 	add	objptr, #4
22be8     F2 00 62 FC | 	wrlong	_var01, objptr
22bec     B8 01 00 FF 
22bf0     88 00 06 F6 | 	mov	_var01, ##@LR__5985
22bf4     04 E4 05 F1 | 	add	objptr, #4
22bf8     F2 00 62 FC | 	wrlong	_var01, objptr
22bfc     B8 01 00 FF 
22c00     A9 00 06 F6 | 	mov	_var01, ##@LR__5986
22c04     04 E4 05 F1 | 	add	objptr, #4
22c08     F2 00 62 FC | 	wrlong	_var01, objptr
22c0c     B8 01 00 FF 
22c10     D6 00 06 F6 | 	mov	_var01, ##@LR__5987
22c14     04 E4 05 F1 | 	add	objptr, #4
22c18     F2 00 62 FC | 	wrlong	_var01, objptr
22c1c     B8 01 00 FF 
22c20     00 01 06 F6 | 	mov	_var01, ##@LR__5988
22c24     04 E4 05 F1 | 	add	objptr, #4
22c28     F2 00 62 FC | 	wrlong	_var01, objptr
22c2c     B8 01 00 FF 
22c30     18 01 06 F6 | 	mov	_var01, ##@LR__5989
22c34     04 E4 05 F1 | 	add	objptr, #4
22c38     F2 00 62 FC | 	wrlong	_var01, objptr
22c3c     B8 01 00 FF 
22c40     38 01 06 F6 | 	mov	_var01, ##@LR__5990
22c44     04 E4 05 F1 | 	add	objptr, #4
22c48     F2 00 62 FC | 	wrlong	_var01, objptr
22c4c     B8 01 00 FF 
22c50     4E 01 06 F6 | 	mov	_var01, ##@LR__5991
22c54     04 E4 05 F1 | 	add	objptr, #4
22c58     F2 00 62 FC | 	wrlong	_var01, objptr
22c5c     B8 01 00 FF 
22c60     6B 01 06 F6 | 	mov	_var01, ##@LR__5992
22c64     04 E4 05 F1 | 	add	objptr, #4
22c68     F2 00 62 FC | 	wrlong	_var01, objptr
22c6c     B8 01 00 FF 
22c70     8E 01 06 F6 | 	mov	_var01, ##@LR__5993
22c74     04 E4 05 F1 | 	add	objptr, #4
22c78     F2 00 62 FC | 	wrlong	_var01, objptr
22c7c     B8 01 00 FF 
22c80     B4 01 06 F6 | 	mov	_var01, ##@LR__5994
22c84     04 E4 05 F1 | 	add	objptr, #4
22c88     F2 00 62 FC | 	wrlong	_var01, objptr
22c8c     B8 01 00 FF 
22c90     CF 01 06 F6 | 	mov	_var01, ##@LR__5995
22c94     04 E4 05 F1 | 	add	objptr, #4
22c98     F2 00 62 FC | 	wrlong	_var01, objptr
22c9c     B8 01 00 FF 
22ca0     DF 01 06 F6 | 	mov	_var01, ##@LR__5996
22ca4     04 E4 05 F1 | 	add	objptr, #4
22ca8     F2 00 62 FC | 	wrlong	_var01, objptr
22cac     B8 01 00 FF 
22cb0     EE 01 06 F6 | 	mov	_var01, ##@LR__5997
22cb4     04 E4 05 F1 | 	add	objptr, #4
22cb8     F2 00 62 FC | 	wrlong	_var01, objptr
22cbc     B9 01 00 FF 
22cc0     08 00 06 F6 | 	mov	_var01, ##@LR__5998
22cc4     04 E4 05 F1 | 	add	objptr, #4
22cc8     F2 00 62 FC | 	wrlong	_var01, objptr
22ccc     B9 01 00 FF 
22cd0     19 00 06 F6 | 	mov	_var01, ##@LR__5999
22cd4     04 E4 05 F1 | 	add	objptr, #4
22cd8     F2 00 62 FC | 	wrlong	_var01, objptr
22cdc     B9 01 00 FF 
22ce0     30 00 06 F6 | 	mov	_var01, ##@LR__6000
22ce4     04 E4 05 F1 | 	add	objptr, #4
22ce8     F2 00 62 FC | 	wrlong	_var01, objptr
22cec     B9 01 00 FF 
22cf0     43 00 06 F6 | 	mov	_var01, ##@LR__6001
22cf4     04 E4 05 F1 | 	add	objptr, #4
22cf8     F2 00 62 FC | 	wrlong	_var01, objptr
22cfc     B9 01 00 FF 
22d00     52 00 06 F6 | 	mov	_var01, ##@LR__6002
22d04     04 E4 05 F1 | 	add	objptr, #4
22d08     F2 00 62 FC | 	wrlong	_var01, objptr
22d0c     B9 01 00 FF 
22d10     6E 00 06 F6 | 	mov	_var01, ##@LR__6003
22d14     04 E4 05 F1 | 	add	objptr, #4
22d18     F2 00 62 FC | 	wrlong	_var01, objptr
22d1c     B9 01 00 FF 
22d20     7E 00 06 F6 | 	mov	_var01, ##@LR__6004
22d24     04 E4 05 F1 | 	add	objptr, #4
22d28     F2 00 62 FC | 	wrlong	_var01, objptr
22d2c     B9 01 00 FF 
22d30     8E 00 06 F6 | 	mov	_var01, ##@LR__6005
22d34     04 E4 05 F1 | 	add	objptr, #4
22d38     F2 00 62 FC | 	wrlong	_var01, objptr
22d3c     B9 01 00 FF 
22d40     C1 00 06 F6 | 	mov	_var01, ##@LR__6006
22d44     04 E4 05 F1 | 	add	objptr, #4
22d48     F2 00 62 FC | 	wrlong	_var01, objptr
22d4c     B9 01 00 FF 
22d50     DC 00 06 F6 | 	mov	_var01, ##@LR__6007
22d54     04 E4 05 F1 | 	add	objptr, #4
22d58     F2 00 62 FC | 	wrlong	_var01, objptr
22d5c     B9 01 00 FF 
22d60     F1 00 06 F6 | 	mov	_var01, ##@LR__6008
22d64     04 E4 05 F1 | 	add	objptr, #4
22d68     F2 00 62 FC | 	wrlong	_var01, objptr
22d6c     B9 01 00 FF 
22d70     FD 00 06 F6 | 	mov	_var01, ##@LR__6009
22d74     04 E4 05 F1 | 	add	objptr, #4
22d78     F2 00 62 FC | 	wrlong	_var01, objptr
22d7c     B9 01 00 FF 
22d80     0E 01 06 F6 | 	mov	_var01, ##@LR__6010
22d84     04 E4 05 F1 | 	add	objptr, #4
22d88     F2 00 62 FC | 	wrlong	_var01, objptr
22d8c     B9 01 00 FF 
22d90     1E 01 06 F6 | 	mov	_var01, ##@LR__6011
22d94     04 E4 05 F1 | 	add	objptr, #4
22d98     F2 00 62 FC | 	wrlong	_var01, objptr
22d9c     B9 01 00 FF 
22da0     39 01 06 F6 | 	mov	_var01, ##@LR__6012
22da4     04 E4 05 F1 | 	add	objptr, #4
22da8     F2 00 62 FC | 	wrlong	_var01, objptr
22dac     B9 01 00 FF 
22db0     49 01 06 F6 | 	mov	_var01, ##@LR__6013
22db4     04 E4 05 F1 | 	add	objptr, #4
22db8     F2 00 62 FC | 	wrlong	_var01, objptr
22dbc     B9 01 00 FF 
22dc0     57 01 06 F6 | 	mov	_var01, ##@LR__6014
22dc4     04 E4 05 F1 | 	add	objptr, #4
22dc8     F2 00 62 FC | 	wrlong	_var01, objptr
22dcc     B9 01 00 FF 
22dd0     71 01 06 F6 | 	mov	_var01, ##@LR__6015
22dd4     04 E4 05 F1 | 	add	objptr, #4
22dd8     F2 00 62 FC | 	wrlong	_var01, objptr
22ddc     B9 01 00 FF 
22de0     A4 01 06 F6 | 	mov	_var01, ##@LR__6016
22de4     04 E4 05 F1 | 	add	objptr, #4
22de8     F2 00 62 FC | 	wrlong	_var01, objptr
22dec     B9 01 00 FF 
22df0     BC 01 06 F6 | 	mov	_var01, ##@LR__6017
22df4     04 E4 05 F1 | 	add	objptr, #4
22df8     F2 00 62 FC | 	wrlong	_var01, objptr
22dfc     B9 01 00 FF 
22e00     D7 01 06 F6 | 	mov	_var01, ##@LR__6018
22e04     04 E4 05 F1 | 	add	objptr, #4
22e08     F2 00 62 FC | 	wrlong	_var01, objptr
22e0c     B9 01 00 FF 
22e10     F4 01 06 F6 | 	mov	_var01, ##@LR__6019
22e14     04 E4 05 F1 | 	add	objptr, #4
22e18     F2 00 62 FC | 	wrlong	_var01, objptr
22e1c     BA 01 00 FF 
22e20     0D 00 06 F6 | 	mov	_var01, ##@LR__6020
22e24     04 E4 05 F1 | 	add	objptr, #4
22e28     F2 00 62 FC | 	wrlong	_var01, objptr
22e2c     BA 01 00 FF 
22e30     2C 00 06 F6 | 	mov	_var01, ##@LR__6021
22e34     04 E4 05 F1 | 	add	objptr, #4
22e38     F2 00 62 FC | 	wrlong	_var01, objptr
22e3c     BA 01 00 FF 
22e40     3A 00 06 F6 | 	mov	_var01, ##@LR__6022
22e44     04 E4 05 F1 | 	add	objptr, #4
22e48     F2 00 62 FC | 	wrlong	_var01, objptr
22e4c     BA 01 00 FF 
22e50     67 00 06 F6 | 	mov	_var01, ##@LR__6023
22e54     04 E4 05 F1 | 	add	objptr, #4
22e58     F2 00 62 FC | 	wrlong	_var01, objptr
22e5c     BA 01 00 FF 
22e60     74 00 06 F6 | 	mov	_var01, ##@LR__6024
22e64     04 E4 05 F1 | 	add	objptr, #4
22e68     F2 00 62 FC | 	wrlong	_var01, objptr
22e6c     BA 01 00 FF 
22e70     88 00 06 F6 | 	mov	_var01, ##@LR__6025
22e74     04 E4 05 F1 | 	add	objptr, #4
22e78     F2 00 62 FC | 	wrlong	_var01, objptr
22e7c     BA 01 00 FF 
22e80     AC 00 06 F6 | 	mov	_var01, ##@LR__6026
22e84     04 E4 05 F1 | 	add	objptr, #4
22e88     F2 00 62 FC | 	wrlong	_var01, objptr
22e8c     BA 01 00 FF 
22e90     C3 00 06 F6 | 	mov	_var01, ##@LR__6027
22e94     04 E4 05 F1 | 	add	objptr, #4
22e98     F2 00 62 FC | 	wrlong	_var01, objptr
22e9c     BA 01 00 FF 
22ea0     D6 00 06 F6 | 	mov	_var01, ##@LR__6028
22ea4     04 E4 05 F1 | 	add	objptr, #4
22ea8     F2 00 62 FC | 	wrlong	_var01, objptr
22eac     BA 01 00 FF 
22eb0     ED 00 06 F6 | 	mov	_var01, ##@LR__6029
22eb4     04 E4 05 F1 | 	add	objptr, #4
22eb8     F2 00 62 FC | 	wrlong	_var01, objptr
22ebc     BA 01 00 FF 
22ec0     06 01 06 F6 | 	mov	_var01, ##@LR__6030
22ec4     04 E4 05 F1 | 	add	objptr, #4
22ec8     F2 00 62 FC | 	wrlong	_var01, objptr
22ecc     BA 01 00 FF 
22ed0     28 01 06 F6 | 	mov	_var01, ##@LR__6031
22ed4     04 E4 05 F1 | 	add	objptr, #4
22ed8     F2 00 62 FC | 	wrlong	_var01, objptr
22edc     BA 01 00 FF 
22ee0     3B 01 06 F6 | 	mov	_var01, ##@LR__6032
22ee4     04 E4 05 F1 | 	add	objptr, #4
22ee8     F2 00 62 FC | 	wrlong	_var01, objptr
22eec     BA 01 00 FF 
22ef0     4B 01 06 F6 | 	mov	_var01, ##@LR__6033
22ef4     04 E4 05 F1 | 	add	objptr, #4
22ef8     F2 00 62 FC | 	wrlong	_var01, objptr
22efc     BA 01 00 FF 
22f00     63 01 06 F6 | 	mov	_var01, ##@LR__6034
22f04     04 E4 05 F1 | 	add	objptr, #4
22f08     F2 00 62 FC | 	wrlong	_var01, objptr
22f0c     BA 01 00 FF 
22f10     7A 01 06 F6 | 	mov	_var01, ##@LR__6035
22f14     04 E4 05 F1 | 	add	objptr, #4
22f18     F2 00 62 FC | 	wrlong	_var01, objptr
22f1c     45 00 00 FF 
22f20     58 E5 85 F1 | 	sub	objptr, ##35672
22f24                 | _init_error_strings_ret
22f24     2D 00 64 FD | 	ret
22f28                 | 
22f28                 | '         
22f28                 | ' sub printerror(err as integer, linenum=0 as integer)
22f28                 | _printerror
22f28     02 4A 05 F6 | 	mov	COUNT_, #2
22f2c     A8 00 A0 FD | 	call	#pushregs_
22f30     09 27 02 F6 | 	mov	local01, arg01
22f34     0A 29 02 F6 | 	mov	local02, arg02
22f38     BA 01 00 FF 
22f3c     87 13 06 F6 | 	mov	arg01, ##@LR__6036
22f40     10 21 B0 FD | 	call	#_hg010b_spin2_write
22f44     13 13 02 F6 | 	mov	arg01, local01
22f48     AC 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22f4c     FD 12 02 F6 | 	mov	arg01, result1
22f50     00 21 B0 FD | 	call	#_hg010b_spin2_write
22f54     BA 01 00 FF 
22f58     8E 13 06 F6 | 	mov	arg01, ##@LR__6037
22f5c     F4 20 B0 FD | 	call	#_hg010b_spin2_write
22f60     02 26 66 F0 | 	shl	local01, #2
22f64     45 00 00 FF 
22f68     7C E4 05 F1 | 	add	objptr, ##35452
22f6c     F2 26 02 F1 | 	add	local01, objptr
22f70     13 13 02 FB | 	rdlong	arg01, local01
22f74     45 00 00 FF 
22f78     7C E4 85 F1 | 	sub	objptr, ##35452
22f7c     D4 20 B0 FD | 	call	#_hg010b_spin2_write
22f80                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
22f80                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum)) else v.writeln("")
22f80     01 28 56 F2 | 	cmps	local02, #1 wc
22f84     24 00 90 CD |  if_b	jmp	#LR__2650
22f88     BA 01 00 FF 
22f8c     92 13 06 F6 | 	mov	arg01, ##@LR__6038
22f90     C0 20 B0 FD | 	call	#_hg010b_spin2_write
22f94     14 13 02 F6 | 	mov	arg01, local02
22f98     5C 26 B0 FD | 	call	#_hg010b_spin2_inttostr
22f9c     FD 12 02 F6 | 	mov	arg01, result1
22fa0                 | ' 
22fa0                 | ' write(text)
22fa0     B0 20 B0 FD | 	call	#_hg010b_spin2_write
22fa4                 | ' crlf
22fa4     AC 25 B0 FD | 	call	#_hg010b_spin2_crlf
22fa8     10 00 90 FD | 	jmp	#LR__2651
22fac                 | LR__2650
22fac     BA 01 00 FF 
22fb0     9C 13 06 F6 | 	mov	arg01, ##@LR__6039
22fb4                 | ' 
22fb4                 | ' write(text)
22fb4     9C 20 B0 FD | 	call	#_hg010b_spin2_write
22fb8                 | ' crlf
22fb8     98 25 B0 FD | 	call	#_hg010b_spin2_crlf
22fbc                 | LR__2651
22fbc     A7 F0 03 F6 | 	mov	ptra, fp
22fc0     B2 00 A0 FD | 	call	#popregs_
22fc4                 | _printerror_ret
22fc4     2D 00 64 FD | 	ret
22fc8                 | 
22fc8                 | ' 
22fc8                 | ' '' ------------------------------- Hardware start/stop/initialization 
22fc8                 | ' 
22fc8                 | ' sub startpsram
22fc8                 | _startpsram
22fc8     00 12 06 F6 | 	mov	arg01, #0
22fcc     0A 14 C6 F9 | 	decod	arg02, #10
22fd0     0B 16 06 F6 | 	mov	arg03, #11
22fd4     07 18 06 F6 | 	mov	arg04, #7
22fd8     0B 00 00 FF 
22fdc     CC E4 05 F1 | 	add	objptr, ##5836
22fe0     80 2A B0 FD | 	call	#_psram_spin2_startx
22fe4     2B 00 00 FF 
22fe8     3C E5 05 F1 | 	add	objptr, ##22332
22fec     F2 FA 61 FC | 	wrlong	result1, objptr
22ff0                 | '     return $7FF00 + cog*12
22ff0     0C E4 05 F1 | 	add	objptr, #12
22ff4     FF 03 80 FF 
22ff8     F2 00 6A FC | 	wrlong	##524032, objptr
22ffc     37 00 00 FF 
23000     14 E4 85 F1 | 	sub	objptr, ##28180
23004                 | _startpsram_ret
23004     2D 00 64 FD | 	ret
23008                 | 
23008                 | ' 
23008                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
23008                 | _startvideo
23008     01 4A 05 F6 | 	mov	COUNT_, #1
2300c     A8 00 A0 FD | 	call	#pushregs_
23010     37 00 00 FF 
23014     14 E4 05 F1 | 	add	objptr, ##28180
23018     F2 18 02 FB | 	rdlong	arg04, objptr
2301c     37 00 00 FF 
23020     14 E4 85 F1 | 	sub	objptr, ##28180
23024     0A 13 02 F6 | 	mov	arg01, arg02
23028     0C 15 02 F6 | 	mov	arg02, arg04
2302c     1C 08 B0 FD | 	call	#_hg010b_spin2_start
23030     37 00 00 FF 
23034     00 E4 05 F1 | 	add	objptr, ##28160
23038     F2 FA 61 FC | 	wrlong	result1, objptr
2303c                 | ' 
2303c                 | ' videocog=v.start(pin,mbox)
2303c                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
2303c     00 26 06 F6 | 	mov	local01, #0
23040     2B 00 00 FF 
23044     34 E5 85 F1 | 	sub	objptr, ##22324
23048                 | LR__2660
23048     13 13 02 F6 | 	mov	arg01, local01
2304c     00 28 00 FF 
23050     00 14 06 F6 | 	mov	arg02, ##5242880
23054     64 2E B0 FD | 	call	#_psram_spin2_setQos
23058     01 26 06 F1 | 	add	local01, #1
2305c     08 26 56 F2 | 	cmps	local01, #8 wc
23060     E4 FF 9F CD |  if_b	jmp	#LR__2660
23064     2B 00 00 FF 
23068     34 E5 05 F1 | 	add	objptr, ##22324
2306c     F2 12 02 FB | 	rdlong	arg01, objptr
23070     7A 00 02 FF 
23074     00 14 06 F6 | 	mov	arg02, ##67171328
23078     2B 00 00 FF 
2307c     34 E5 85 F1 | 	sub	objptr, ##22324
23080     38 2E B0 FD | 	call	#_psram_spin2_setQos
23084     0B 00 00 FF 
23088     CC E4 85 F1 | 	sub	objptr, ##5836
2308c                 | ' psram.setQoS(videocog, $0400f400) 
2308c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
2308c     F2 14 02 F6 | 	mov	arg02, objptr
23090     00 08 05 FF 
23094     00 14 46 F5 | 	or	arg02, ##168820736
23098     00 16 06 F6 | 	mov	arg03, #0
2309c     00 18 06 F6 | 	mov	arg04, #0
230a0     00 12 06 F6 | 	mov	arg01, #0
230a4     18 43 B0 FD | 	call	#__system___basic_open
230a8                 | ' return videocog
230a8     37 00 00 FF 
230ac     00 E4 05 F1 | 	add	objptr, ##28160
230b0     F2 FA 01 FB | 	rdlong	result1, objptr
230b4     37 00 00 FF 
230b8     00 E4 85 F1 | 	sub	objptr, ##28160
230bc     A7 F0 03 F6 | 	mov	ptra, fp
230c0     B2 00 A0 FD | 	call	#popregs_
230c4                 | _startvideo_ret
230c4     2D 00 64 FD | 	ret
230c8                 | 
230c8                 | ' 
230c8                 | ' 
230c8                 | ' 
230c8                 | ' '' ------------------------------- Convenient psram peek/poke
230c8                 | ' 
230c8                 | ' sub pslpoke(addr as ulong,value as ulong)
230c8                 | _pslpoke
230c8     00 4A 05 F6 | 	mov	COUNT_, #0
230cc     A8 00 A0 FD | 	call	#pushregs_
230d0     08 F0 07 F1 | 	add	ptra, #8
230d4     A7 12 62 FC | 	wrlong	arg01, fp
230d8     04 4E 05 F1 | 	add	fp, #4
230dc     A7 14 62 FC | 	wrlong	arg02, fp
230e0     A7 12 02 F6 | 	mov	arg01, fp
230e4     04 4E 85 F1 | 	sub	fp, #4
230e8     A7 14 02 FB | 	rdlong	arg02, fp
230ec     04 16 06 F6 | 	mov	arg03, #4
230f0     0B 00 00 FF 
230f4     CC E4 05 F1 | 	add	objptr, ##5836
230f8     30 2C B0 FD | 	call	#_psram_spin2_write
230fc     0B 00 00 FF 
23100     CC E4 85 F1 | 	sub	objptr, ##5836
23104     A7 F0 03 F6 | 	mov	ptra, fp
23108     B2 00 A0 FD | 	call	#popregs_
2310c                 | _pslpoke_ret
2310c     2D 00 64 FD | 	ret
23110                 | 
23110                 | ' 
23110                 | ' sub psdpoke(addr as ulong,value as ulong)
23110                 | _psdpoke
23110     00 4A 05 F6 | 	mov	COUNT_, #0
23114     A8 00 A0 FD | 	call	#pushregs_
23118     08 F0 07 F1 | 	add	ptra, #8
2311c     A7 12 62 FC | 	wrlong	arg01, fp
23120     04 4E 05 F1 | 	add	fp, #4
23124     A7 14 62 FC | 	wrlong	arg02, fp
23128     A7 12 02 F6 | 	mov	arg01, fp
2312c     04 4E 85 F1 | 	sub	fp, #4
23130     A7 14 02 FB | 	rdlong	arg02, fp
23134     02 16 06 F6 | 	mov	arg03, #2
23138     0B 00 00 FF 
2313c     CC E4 05 F1 | 	add	objptr, ##5836
23140     E8 2B B0 FD | 	call	#_psram_spin2_write
23144     0B 00 00 FF 
23148     CC E4 85 F1 | 	sub	objptr, ##5836
2314c     A7 F0 03 F6 | 	mov	ptra, fp
23150     B2 00 A0 FD | 	call	#popregs_
23154                 | _psdpoke_ret
23154     2D 00 64 FD | 	ret
23158                 | 
23158                 | ' 
23158                 | ' sub pspoke(addr as ulong,value as ulong)
23158                 | _pspoke
23158     00 4A 05 F6 | 	mov	COUNT_, #0
2315c     A8 00 A0 FD | 	call	#pushregs_
23160     08 F0 07 F1 | 	add	ptra, #8
23164     A7 12 62 FC | 	wrlong	arg01, fp
23168     04 4E 05 F1 | 	add	fp, #4
2316c     A7 14 62 FC | 	wrlong	arg02, fp
23170     A7 12 02 F6 | 	mov	arg01, fp
23174     04 4E 85 F1 | 	sub	fp, #4
23178     A7 14 02 FB | 	rdlong	arg02, fp
2317c     01 16 06 F6 | 	mov	arg03, #1
23180     0B 00 00 FF 
23184     CC E4 05 F1 | 	add	objptr, ##5836
23188     A0 2B B0 FD | 	call	#_psram_spin2_write
2318c     0B 00 00 FF 
23190     CC E4 85 F1 | 	sub	objptr, ##5836
23194     A7 F0 03 F6 | 	mov	ptra, fp
23198     B2 00 A0 FD | 	call	#popregs_
2319c                 | _pspoke_ret
2319c     2D 00 64 FD | 	ret
231a0                 | 
231a0                 | ' 
231a0                 | ' function pspeek(adr as ulong) as ubyte
231a0                 | _pspeek
231a0     00 4A 05 F6 | 	mov	COUNT_, #0
231a4     A8 00 A0 FD | 	call	#pushregs_
231a8     0C F0 07 F1 | 	add	ptra, #12
231ac     04 4E 05 F1 | 	add	fp, #4
231b0     A7 12 62 FC | 	wrlong	arg01, fp
231b4     04 4E 05 F1 | 	add	fp, #4
231b8     A7 12 02 F6 | 	mov	arg01, fp
231bc     04 4E 85 F1 | 	sub	fp, #4
231c0     A7 14 02 FB | 	rdlong	arg02, fp
231c4     04 4E 85 F1 | 	sub	fp, #4
231c8     01 16 06 F6 | 	mov	arg03, #1
231cc     0B 00 00 FF 
231d0     CC E4 05 F1 | 	add	objptr, ##5836
231d4     B8 2A B0 FD | 	call	#_psram_spin2_read1
231d8     0B 00 00 FF 
231dc     CC E4 85 F1 | 	sub	objptr, ##5836
231e0                 | ' psram.read1(varptr(res),adr,1)
231e0                 | ' return res
231e0     08 4E 05 F1 | 	add	fp, #8
231e4     A7 FA C1 FA | 	rdbyte	result1, fp
231e8     08 4E 85 F1 | 	sub	fp, #8
231ec     A7 F0 03 F6 | 	mov	ptra, fp
231f0     B2 00 A0 FD | 	call	#popregs_
231f4                 | _pspeek_ret
231f4     2D 00 64 FD | 	ret
231f8                 | 
231f8                 | ' 
231f8                 | ' function pslpeek(adr as ulong) as ulong
231f8                 | _pslpeek
231f8     00 4A 05 F6 | 	mov	COUNT_, #0
231fc     A8 00 A0 FD | 	call	#pushregs_
23200     0C F0 07 F1 | 	add	ptra, #12
23204     04 4E 05 F1 | 	add	fp, #4
23208     A7 12 62 FC | 	wrlong	arg01, fp
2320c     04 4E 05 F1 | 	add	fp, #4
23210     A7 12 02 F6 | 	mov	arg01, fp
23214     04 4E 85 F1 | 	sub	fp, #4
23218     A7 14 02 FB | 	rdlong	arg02, fp
2321c     04 4E 85 F1 | 	sub	fp, #4
23220     04 16 06 F6 | 	mov	arg03, #4
23224     0B 00 00 FF 
23228     CC E4 05 F1 | 	add	objptr, ##5836
2322c     60 2A B0 FD | 	call	#_psram_spin2_read1
23230     0B 00 00 FF 
23234     CC E4 85 F1 | 	sub	objptr, ##5836
23238                 | ' psram.read1(varptr(res),adr,4)
23238                 | ' return res
23238     08 4E 05 F1 | 	add	fp, #8
2323c     A7 FA 01 FB | 	rdlong	result1, fp
23240     08 4E 85 F1 | 	sub	fp, #8
23244     A7 F0 03 F6 | 	mov	ptra, fp
23248     B2 00 A0 FD | 	call	#popregs_
2324c                 | _pslpeek_ret
2324c     2D 00 64 FD | 	ret
23250                 | 
23250                 | ' 
23250                 | ' function psdpeek(adr as ulong) as ulong
23250                 | _psdpeek
23250     00 4A 05 F6 | 	mov	COUNT_, #0
23254     A8 00 A0 FD | 	call	#pushregs_
23258     0C F0 07 F1 | 	add	ptra, #12
2325c     04 4E 05 F1 | 	add	fp, #4
23260     A7 12 62 FC | 	wrlong	arg01, fp
23264     04 4E 05 F1 | 	add	fp, #4
23268     A7 12 02 F6 | 	mov	arg01, fp
2326c     04 4E 85 F1 | 	sub	fp, #4
23270     A7 14 02 FB | 	rdlong	arg02, fp
23274     04 4E 85 F1 | 	sub	fp, #4
23278     02 16 06 F6 | 	mov	arg03, #2
2327c     0B 00 00 FF 
23280     CC E4 05 F1 | 	add	objptr, ##5836
23284     08 2A B0 FD | 	call	#_psram_spin2_read1
23288     0B 00 00 FF 
2328c     CC E4 85 F1 | 	sub	objptr, ##5836
23290                 | ' psram.read1(varptr(res),adr,2)
23290                 | ' return res
23290     08 4E 05 F1 | 	add	fp, #8
23294     A7 FA E1 FA | 	rdword	result1, fp
23298     08 4E 85 F1 | 	sub	fp, #8
2329c     A7 F0 03 F6 | 	mov	ptra, fp
232a0     B2 00 A0 FD | 	call	#popregs_
232a4                 | _psdpeek_ret
232a4     2D 00 64 FD | 	ret
232a8                 | 
232a8                 | ' 
232a8                 | ' '' ------------------------------- USB keyboard scan to char translator
232a8                 | ' 
232a8                 | ' function scantochar(key)
232a8                 | _scantochar
232a8                 | ' 
232a8                 | ' select case (key shr 8) and 255
232a8     09 01 02 F6 | 	mov	_var01, arg01
232ac     08 00 C6 F0 | 	sar	_var01, #8
232b0     FF 00 0E F5 | 	and	_var01, #255 wz
232b4     24 00 90 AD |  if_e	jmp	#LR__2670
232b8     02 00 0E F2 | 	cmp	_var01, #2 wz
232bc     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
232c0     30 00 90 AD |  if_e	jmp	#LR__2671
232c4     40 00 0E F2 | 	cmp	_var01, #64 wz
232c8     44 00 90 AD |  if_e	jmp	#LR__2672
232cc     42 00 0E F2 | 	cmp	_var01, #66 wz
232d0     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
232d4     70 00 90 5D |  if_ne	jmp	#LR__2674
232d8     50 00 90 FD | 	jmp	#LR__2673
232dc                 | LR__2670
232dc     09 FB 01 F6 | 	mov	result1, arg01
232e0     7F FA 05 F5 | 	and	result1, #127
232e4     02 FA 65 F0 | 	shl	result1, #2
232e8     F5 FA 01 F1 | 	add	result1, ptr__dat__
232ec     FD FA C1 FA | 	rdbyte	result1, result1
232f0     54 00 90 FD | 	jmp	#_scantochar_ret
232f4                 | LR__2671
232f4     09 FB 01 F6 | 	mov	result1, arg01
232f8     7F FA 05 F5 | 	and	result1, #127
232fc     02 FA 65 F0 | 	shl	result1, #2
23300     01 FA 05 F1 | 	add	result1, #1
23304     F5 FA 01 F1 | 	add	result1, ptr__dat__
23308     FD FA C1 FA | 	rdbyte	result1, result1
2330c     38 00 90 FD | 	jmp	#_scantochar_ret
23310                 | LR__2672
23310     09 FB 01 F6 | 	mov	result1, arg01
23314     7F FA 05 F5 | 	and	result1, #127
23318     02 FA 65 F0 | 	shl	result1, #2
2331c     02 FA 05 F1 | 	add	result1, #2
23320     F5 FA 01 F1 | 	add	result1, ptr__dat__
23324     FD FA C1 FA | 	rdbyte	result1, result1
23328     1C 00 90 FD | 	jmp	#_scantochar_ret
2332c                 | LR__2673
2332c     09 FB 01 F6 | 	mov	result1, arg01
23330     7F FA 05 F5 | 	and	result1, #127
23334     02 FA 65 F0 | 	shl	result1, #2
23338     03 FA 05 F1 | 	add	result1, #3
2333c     F5 FA 01 F1 | 	add	result1, ptr__dat__
23340     FD FA C1 FA | 	rdbyte	result1, result1
23344     00 00 90 FD | 	jmp	#_scantochar_ret
23348                 | LR__2674
23348                 | _scantochar_ret
23348     2D 00 64 FD | 	ret
2334c                 | 
2334c                 | _program
2334c     01 4A 05 F6 | 	mov	COUNT_, #1
23350     A8 00 A0 FD | 	call	#pushregs_
23354     70 FC BF FD | 	call	#_startpsram
23358     40 12 06 F6 | 	mov	arg01, #64
2335c     00 14 06 F6 | 	mov	arg02, #0
23360     00 16 06 F6 | 	mov	arg03, #0
23364     A0 FC BF FD | 	call	#_startvideo
23368     37 00 00 FF 
2336c     14 E4 05 F1 | 	add	objptr, ##28180
23370     F2 12 02 FB | 	rdlong	arg01, objptr
23374     00 14 06 F6 | 	mov	arg02, #0
23378     FB 03 00 FF 
2337c     00 17 06 F6 | 	mov	arg03, ##521984
23380     2B 00 00 FF 
23384     48 E5 85 F1 | 	sub	objptr, ##22344
23388     28 2F B0 FD | 	call	#_audio096_spin2_start
2338c     FE 16 02 F6 | 	mov	arg03, result2
23390     2B 00 00 FF 
23394     30 E5 05 F1 | 	add	objptr, ##22320
23398     F2 FA 61 FC | 	wrlong	result1, objptr
2339c     14 E4 05 F1 | 	add	objptr, #20
233a0     F2 16 62 FC | 	wrlong	arg03, objptr
233a4     37 00 00 FF 
233a8     10 E4 85 F1 | 	sub	objptr, ##28176
233ac     32 12 06 F6 | 	mov	arg01, #50
233b0     58 38 B0 FD | 	call	#__system___waitms
233b4     37 00 00 FF 
233b8     10 E4 05 F1 | 	add	objptr, ##28176
233bc     F2 12 02 FB | 	rdlong	arg01, objptr
233c0     37 00 00 FF 
233c4     10 E4 85 F1 | 	sub	objptr, ##28176
233c8     14 12 06 F1 | 	add	arg01, #20
233cc     20 00 80 FF 
233d0     09 01 58 FC | 	wrword	##16384, arg01
233d4     EC 2B B0 FD | 	call	#_usbnew_spin2_start
233d8     37 00 00 FF 
233dc     04 E4 05 F1 | 	add	objptr, ##28164
233e0     F2 FA 61 FC | 	wrlong	result1, objptr
233e4                 | '   mouse_limits[0] := xlim
233e4     0F 00 00 FF 
233e8     B8 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7864
233ec     01 00 80 FF 
233f0     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
233f4                 | '   mouse_limits[1] := ylim
233f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
233f8     01 00 80 FF 
233fc     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
23400     36 00 00 FF 
23404     F3 E4 85 F1 | 	sub	objptr, ##27891
23408     F2 12 02 F6 | 	mov	arg01, objptr
2340c     11 E5 85 F1 | 	sub	objptr, #273
23410     C4 12 06 F1 | 	add	arg01, #196
23414                 | '   mouse_outptr := ptr
23414     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
23418     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
2341c     0F 00 00 FF 
23420     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
23424     16 00 00 FF 
23428     CA EA 05 F1 | 	add	ptr__dat__, ##11466
2342c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
23430     16 00 00 FF 
23434     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
23438     10 12 06 F6 | 	mov	arg01, #16
2343c     A4 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
23440     10 12 06 F6 | 	mov	arg01, #16
23444     20 14 06 F6 | 	mov	arg02, #32
23448     20 16 06 F6 | 	mov	arg03, #32
2344c     24 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
23450     09 12 C6 F9 | 	decod	arg01, #9
23454     2C 15 06 F6 | 	mov	arg02, #300
23458     C0 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
2345c     F2 16 02 F6 | 	mov	arg03, objptr
23460     50 00 00 FF 
23464     44 E5 05 F1 | 	add	objptr, ##41284
23468     F2 14 02 F6 | 	mov	arg02, objptr
2346c     0A 17 62 FC | 	wrlong	arg03, arg02
23470     04 14 06 F1 | 	add	arg02, #4
23474     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
23478     EF 14 02 F6 | 	mov	arg02, entryptr__
2347c     1E FA 05 F6 | 	mov	result1, #30
23480     28 E4 61 FD | 	setq	objptr
23484     0A FB F1 FC | 	coginit	result1, arg02 wc
23488     01 FA 65 C6 |  if_b	neg	result1, #1
2348c     04 E4 85 F1 | 	sub	objptr, #4
23490     F2 FA 61 FC | 	wrlong	result1, objptr
23494     01 00 00 FF 
23498     54 E5 05 F1 | 	add	objptr, ##852
2349c     F2 00 68 FC | 	wrlong	#0, objptr
234a0     1B 00 00 FF 
234a4     60 E4 85 F1 | 	sub	objptr, ##13920
234a8     F2 04 68 FC | 	wrlong	#2, objptr
234ac     04 E4 05 F1 | 	add	objptr, #4
234b0     F2 26 69 FC | 	wrlong	#147, objptr
234b4     04 E4 05 F1 | 	add	objptr, #4
234b8     F2 34 69 FC | 	wrlong	#154, objptr
234bc     04 E4 05 F1 | 	add	objptr, #4
234c0     F2 08 68 FC | 	wrlong	#4, objptr
234c4     04 E4 85 F1 | 	sub	objptr, #4
234c8     F2 16 02 FB | 	rdlong	arg03, objptr
234cc     14 E4 85 F1 | 	sub	objptr, #20
234d0     F2 16 62 FC | 	wrlong	arg03, objptr
234d4     04 E4 05 F1 | 	add	objptr, #4
234d8     F2 00 68 FC | 	wrlong	#0, objptr
234dc     04 E4 05 F1 | 	add	objptr, #4
234e0     F2 00 68 FC | 	wrlong	#0, objptr
234e4     19 00 00 FF 
234e8     0C E5 05 F1 | 	add	objptr, ##13068
234ec     F2 02 68 FC | 	wrlong	#1, objptr
234f0     01 00 00 FF 
234f4     60 E5 05 F1 | 	add	objptr, ##864
234f8     F2 00 68 FC | 	wrlong	#0, objptr
234fc     01 00 00 FF 
23500     00 EA 05 F1 | 	add	ptr__dat__, ##512
23504     08 E4 05 F1 | 	add	objptr, #8
23508     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
2350c     04 E4 85 F1 | 	sub	objptr, #4
23510     03 00 80 FF 
23514     F2 3C 69 FC | 	wrlong	##1694, objptr
23518     0D 00 00 FF 
2351c     3C E4 85 F1 | 	sub	objptr, ##6716
23520     F2 18 68 FC | 	wrlong	#12, objptr
23524     45 00 00 FF 
23528     64 E4 85 F1 | 	sub	objptr, ##35428
2352c     01 00 00 FF 
23530     00 EA 85 F1 | 	sub	ptr__dat__, ##512
23534     A8 D8 BF FD | 	call	#_init_commands
23538     5C F6 BF FD | 	call	#_init_error_strings
2353c     E0 ED BF FD | 	call	#_init_audio
23540     EC 27 BF FD | 	call	#_do_new
23544     37 00 00 FF 
23548     3C E4 05 F1 | 	add	objptr, ##28220
2354c     F2 12 02 FB | 	rdlong	arg01, objptr
23550     04 E4 85 F1 | 	sub	objptr, #4
23554     F2 14 02 FB | 	rdlong	arg02, objptr
23558     37 00 00 FF 
2355c     38 E4 85 F1 | 	sub	objptr, ##28216
23560     30 17 B0 FD | 	call	#_hg010b_spin2_cls
23564     37 00 00 FF 
23568     40 E4 05 F1 | 	add	objptr, ##28224
2356c     F2 12 02 FB | 	rdlong	arg01, objptr
23570     37 00 00 FF 
23574     40 E4 85 F1 | 	sub	objptr, ##28224
23578     C8 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
2357c                 | ' 
2357c                 | ' leading_spaces:=amount
2357c     01 00 00 FF 
23580     B6 E4 05 F1 | 	add	objptr, ##694
23584     F2 04 68 FC | 	wrlong	#2, objptr
23588     01 00 00 FF 
2358c     B6 E4 85 F1 | 	sub	objptr, ##694
23590     BA 01 00 FF 
23594     9D 27 06 F6 | 	mov	local01, ##@LR__6040
23598     3D 12 06 F6 | 	mov	arg01, #61
2359c     3C 14 06 F6 | 	mov	arg02, #60
235a0     3B 16 06 F6 | 	mov	arg03, #59
235a4     3A 18 06 F6 | 	mov	arg04, #58
235a8     F4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
235ac     FD 14 02 F6 | 	mov	arg02, result1
235b0     13 13 02 F6 | 	mov	arg01, local01
235b4     2C 37 B0 FD | 	call	#__system___mount
235b8     BA 01 00 FF 
235bc     A1 13 06 F6 | 	mov	arg01, ##@LR__6041
235c0     E0 39 B0 FD | 	call	#__system___chdir
235c4     BA 01 00 FF 
235c8     A9 27 06 F6 | 	mov	local01, ##@LR__6042
235cc     4A 00 00 FF 
235d0     94 E4 05 F1 | 	add	objptr, ##38036
235d4     F2 26 62 FC | 	wrlong	local01, objptr
235d8     13 00 00 FF 
235dc     60 E4 85 F1 | 	sub	objptr, ##9824
235e0     F2 12 02 FB | 	rdlong	arg01, objptr
235e4     37 00 00 FF 
235e8     34 E4 85 F1 | 	sub	objptr, ##28212
235ec     01 12 66 F0 | 	shl	arg01, #1
235f0     01 14 06 F6 | 	mov	arg02, #1
235f4     8C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
235f8                 | ' init_commands
235f8                 | ' init_error_strings
235f8                 | ' init_audio
235f8                 | ' do_new
235f8                 | ' cls(ink, paper)
235f8                 | ' v.setfontfamily(font) 				' use ST Mono font
235f8                 | ' v.setleadingspaces(2)
235f8                 | ' mount "/sd", _vfs_open_sdcard()
235f8                 | ' chdir "/sd/bas"
235f8                 | ' currentdir$="/sd/bas"
235f8                 | ' position 2*editor_spaces,1 : print ver$
235f8     00 12 06 F6 | 	mov	arg01, #0
235fc     BC 8F B0 FD | 	call	#__system___getiolock_0603
23600     FD 12 02 F6 | 	mov	arg01, result1
23604     10 33 B0 FD | 	call	#__system___lockmem
23608     18 00 00 FF 
2360c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
23610     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
23614     18 00 00 FF 
23618     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
2361c     00 12 06 F6 | 	mov	arg01, #0
23620     00 16 06 F6 | 	mov	arg03, #0
23624     E8 3F B0 FD | 	call	#__system___basic_print_string
23628     00 12 06 F6 | 	mov	arg01, #0
2362c     0A 14 06 F6 | 	mov	arg02, #10
23630     00 16 06 F6 | 	mov	arg03, #0
23634     80 3F B0 FD | 	call	#__system___basic_print_char
23638     00 12 06 F6 | 	mov	arg01, #0
2363c     7C 8F B0 FD | 	call	#__system___getiolock_0603
23640     FD 00 68 FC | 	wrlong	#0, result1
23644     52 00 00 FF 
23648     98 E4 05 F1 | 	add	objptr, ##42136
2364c     F2 12 02 FB | 	rdlong	arg01, objptr
23650     0F 00 00 FF 
23654     3C E4 85 F1 | 	sub	objptr, ##7740
23658     F2 26 02 FB | 	rdlong	local01, objptr
2365c     43 00 00 FF 
23660     5C E4 85 F1 | 	sub	objptr, ##34396
23664     13 13 82 F1 | 	sub	arg01, local01
23668     00 14 06 F6 | 	mov	arg02, #0
2366c     0A 16 06 F6 | 	mov	arg03, #10
23670     78 55 B0 FD | 	call	#__system__Number_S
23674     FD 12 02 F6 | 	mov	arg01, result1
23678     BA 01 00 FF 
2367c     B1 15 06 F6 | 	mov	arg02, ##@LR__6043
23680     F0 32 B0 FD | 	call	#__system___string_concat
23684     FD 26 02 F6 | 	mov	local01, result1
23688     50 00 00 FF 
2368c     38 E5 05 F1 | 	add	objptr, ##41272
23690     F2 26 62 FC | 	wrlong	local01, objptr
23694     50 00 00 FF 
23698     38 E5 85 F1 | 	sub	objptr, ##41272
2369c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
2369c     00 12 06 F6 | 	mov	arg01, #0
236a0     18 8F B0 FD | 	call	#__system___getiolock_0603
236a4     FD 12 02 F6 | 	mov	arg01, result1
236a8     6C 32 B0 FD | 	call	#__system___lockmem
236ac     50 00 00 FF 
236b0     38 E5 05 F1 | 	add	objptr, ##41272
236b4     F2 14 02 FB | 	rdlong	arg02, objptr
236b8     50 00 00 FF 
236bc     38 E5 85 F1 | 	sub	objptr, ##41272
236c0     00 12 06 F6 | 	mov	arg01, #0
236c4     00 16 06 F6 | 	mov	arg03, #0
236c8     44 3F B0 FD | 	call	#__system___basic_print_string
236cc     00 12 06 F6 | 	mov	arg01, #0
236d0     0A 14 06 F6 | 	mov	arg02, #10
236d4     00 16 06 F6 | 	mov	arg03, #0
236d8     DC 3E B0 FD | 	call	#__system___basic_print_char
236dc     00 12 06 F6 | 	mov	arg01, #0
236e0     D8 8E B0 FD | 	call	#__system___getiolock_0603
236e4     FD 00 68 FC | 	wrlong	#0, result1
236e8     37 00 00 FF 
236ec     34 E4 05 F1 | 	add	objptr, ##28212
236f0     F2 12 02 FB | 	rdlong	arg01, objptr
236f4     37 00 00 FF 
236f8     34 E4 85 F1 | 	sub	objptr, ##28212
236fc     01 12 66 F0 | 	shl	arg01, #1
23700     04 14 06 F6 | 	mov	arg02, #4
23704     7C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
23708                 | ' position 2*editor_spaces,4 : print "Ready"
23708     00 12 06 F6 | 	mov	arg01, #0
2370c     AC 8E B0 FD | 	call	#__system___getiolock_0603
23710     FD 12 02 F6 | 	mov	arg01, result1
23714     00 32 B0 FD | 	call	#__system___lockmem
23718     BA 01 00 FF 
2371c     C3 15 06 F6 | 	mov	arg02, ##@LR__6044
23720     00 12 06 F6 | 	mov	arg01, #0
23724     00 16 06 F6 | 	mov	arg03, #0
23728     E4 3E B0 FD | 	call	#__system___basic_print_string
2372c     00 12 06 F6 | 	mov	arg01, #0
23730     0A 14 06 F6 | 	mov	arg02, #10
23734     00 16 06 F6 | 	mov	arg03, #0
23738     7C 3E B0 FD | 	call	#__system___basic_print_char
2373c     00 12 06 F6 | 	mov	arg01, #0
23740     78 8E B0 FD | 	call	#__system___getiolock_0603
23744     FD 00 68 FC | 	wrlong	#0, result1
23748     00 14 06 F6 | 	mov	arg02, #0
2374c     01 14 D6 F7 | 	test	arg02, #1 wc
23750     5A 4C 64 FD | 	drvc	#38
23754     01 14 D6 F7 | 	test	arg02, #1 wc
23758     5A 4E 64 FD | 	drvc	#39
2375c     BA 01 00 FF 
23760     C9 27 06 F6 | 	mov	local01, ##@LR__6045
23764     52 00 00 FF 
23768     C4 E4 05 F1 | 	add	objptr, ##42180
2376c     F2 26 62 FC | 	wrlong	local01, objptr
23770     04 E4 05 F1 | 	add	objptr, #4
23774     FF FF FF FF 
23778     F2 FE 6B FC | 	wrlong	##-1, objptr
2377c     0C E4 05 F1 | 	add	objptr, #12
23780     F2 00 68 FC | 	wrlong	#0, objptr
23784     52 00 00 FF 
23788     D4 E4 85 F1 | 	sub	objptr, ##42196
2378c                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
2378c                 | ' loadname="noname.bas"
2378c                 | ' do_insert=-1
2378c                 | ' inload=0
2378c                 | ' 
2378c                 | ' open "/sd/bas/autorun.bas" for input as #9
2378c     BA 01 00 FF 
23790     D4 15 06 F6 | 	mov	arg02, ##@LR__6046
23794     09 12 06 F6 | 	mov	arg01, #9
23798     00 16 06 F6 | 	mov	arg03, #0
2379c     7C 3D B0 FD | 	call	#__system___basic_open_string
237a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
237a4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
237a8     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
237ac     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
237b0     52 00 00 FF 
237b4     D8 E4 05 F1 | 	add	objptr, ##42200
237b8     F2 FA 61 FC | 	wrlong	result1, objptr
237bc     52 00 00 FF 
237c0     D8 E4 85 F1 | 	sub	objptr, ##42200
237c4                 | ' err=geterr()
237c4                 | ' close #9
237c4     09 12 06 F6 | 	mov	arg01, #9
237c8     A8 84 B0 FD | 	call	#__system__close
237cc                 | ' if err=0 then line$="run autorun.bas" : interpret
237cc     52 00 00 FF 
237d0     D8 E4 05 F1 | 	add	objptr, ##42200
237d4     F2 26 0A FB | 	rdlong	local01, objptr wz
237d8     52 00 00 FF 
237dc     D8 E4 85 F1 | 	sub	objptr, ##42200
237e0     BA 01 00 AF 
237e4     E8 27 06 A6 |  if_e	mov	local01, ##@LR__6047
237e8     37 00 00 AF 
237ec     1C E4 05 A1 |  if_e	add	objptr, ##28188
237f0     F2 26 62 AC |  if_e	wrlong	local01, objptr
237f4     37 00 00 AF 
237f8     1C E4 85 A1 |  if_e	sub	objptr, ##28188
237fc     28 E0 BD AD |  if_e	call	#_interpret
23800                 | ' 
23800                 | ' 
23800                 | ' '-------------------------------------------------------------------------------------------------------- 
23800                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
23800                 | ' '--------------------------------------------------------------------------------------------------------
23800                 | ' 
23800                 | ' do
23800                 | LR__2680
23800     00 D0 BD FD | 	call	#_edit
23804     FD 26 02 F6 | 	mov	local01, result1
23808     37 00 00 FF 
2380c     1C E4 05 F1 | 	add	objptr, ##28188
23810     F2 26 62 FC | 	wrlong	local01, objptr
23814     37 00 00 FF 
23818     1C E4 85 F1 | 	sub	objptr, ##28188
2381c     08 E0 BD FD | 	call	#_interpret
23820     BA 01 00 FF 
23824     F8 27 06 F6 | 	mov	local01, ##@LR__6048
23828     37 00 00 FF 
2382c     1C E4 05 F1 | 	add	objptr, ##28188
23830     F2 26 62 FC | 	wrlong	local01, objptr
23834     37 00 00 FF 
23838     1C E4 85 F1 | 	sub	objptr, ##28188
2383c     C0 FF 9F FD | 	jmp	#LR__2680
23840     A7 F0 03 F6 | 	mov	ptra, fp
23844     B2 00 A0 FD | 	call	#popregs_
23848                 | _program_ret
23848     2D 00 64 FD | 	ret
2384c                 | 
2384c                 | ' '' this is not a main program.
2384c                 | ' 
2384c                 | ' '****************************************************************************************************************
2384c                 | ' '                                                                                                             	*
2384c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
2384c                 | ' '                                                                                                            	*
2384c                 | ' ' base - HDMI base pin												*
2384c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
2384c                 | ' '														*
2384c                 | ' '														*
2384c                 | ' '****************************************************************************************************************
2384c                 | ' 
2384c                 | ' pub start(base,mb):result |i
2384c                 | _hg010b_spin2_start
2384c                 | ' 
2384c                 | ' '--------------------------- initialize pointers and variables
2384c                 | ' 
2384c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
2384c     34 E4 05 F1 | 	add	objptr, #52
23850     F2 FA 01 F6 | 	mov	result1, objptr
23854     28 E4 85 F1 | 	sub	objptr, #40
23858     F2 FA 61 FC | 	wrlong	result1, objptr
2385c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
2385c                 | ' hdmibase:=base							' HDMI base pin, 8*n
2385c     18 E4 05 F1 | 	add	objptr, #24
23860     F2 12 62 FC | 	wrlong	arg01, objptr
23864                 | ' mailbox_ptr:=mb		
23864     04 E4 05 F1 | 	add	objptr, #4
23868     F2 14 62 FC | 	wrlong	arg02, objptr
2386c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
2386c     C1 E5 05 F1 | 	add	objptr, #449
23870     F2 14 62 FC | 	wrlong	arg02, objptr
23874                 | ' sprite_ptr:=@spr1ptr
23874     D8 E4 85 F1 | 	sub	objptr, #216
23878     F2 FA 01 F6 | 	mov	result1, objptr
2387c     E5 E4 85 F1 | 	sub	objptr, #229
23880     F2 FA 61 FC | 	wrlong	result1, objptr
23884                 | ' 
23884                 | ' 		'
23884                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
23884     E5 E4 05 F1 | 	add	objptr, #229
23888     F2 FA 01 FB | 	rdlong	result1, objptr
2388c     D0 FA 05 F1 | 	add	result1, #208
23890     FD 10 58 FC | 	wrword	#8, result1
23894                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
23894     F2 16 02 FB | 	rdlong	arg03, objptr
23898     D2 16 06 F1 | 	add	arg03, #210
2389c     0B 21 58 FC | 	wrword	#16, arg03
238a0                 | ' leading_spaces:=0				'
238a0     A5 E5 05 F1 | 	add	objptr, #421
238a4     F2 00 68 FC | 	wrlong	#0, objptr
238a8                 | ' 
238a8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
238a8     99 E4 85 F1 | 	sub	objptr, #153
238ac     00 00 A0 FF 
238b0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
238b4                 | ' emptydl[1]:=0
238b4     04 E4 05 F1 | 	add	objptr, #4
238b8     F2 00 68 FC | 	wrlong	#0, objptr
238bc                 | ' 
238bc                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
238bc                 | ' 
238bc                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
238bc     28 E5 85 F1 | 	sub	objptr, #296
238c0     F2 02 68 FC | 	wrlong	#1, objptr
238c4                 | ' if s_debug<>0
238c4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
238c4     20 00 80 FF 
238c8     F2 00 68 FC | 	wrlong	##16384, objptr
238cc     F9 E4 85 F1 | 	sub	objptr, #249
238d0                 | ' setmode()							' set the mode, see below
238d0     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
238d4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
238d4     49 E4 05 F1 | 	add	objptr, #73
238d8     F2 FA 01 F6 | 	mov	result1, objptr
238dc     35 E4 85 F1 | 	sub	objptr, #53
238e0     F2 FA 61 FC | 	wrlong	result1, objptr
238e4                 | ' cursor_ptr:=@cursor_x						
238e4     28 E4 05 F1 | 	add	objptr, #40
238e8     F2 16 02 F6 | 	mov	arg03, objptr
238ec     2C E4 85 F1 | 	sub	objptr, #44
238f0     F2 16 62 FC | 	wrlong	arg03, objptr
238f4                 | ' fontnum:=0  							' start with a PC type font 
238f4     55 E4 05 F1 | 	add	objptr, #85
238f8     F2 00 68 FC | 	wrlong	#0, objptr
238fc                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
238fc     1C E4 05 F1 | 	add	objptr, #28
23900     F2 12 02 F6 | 	mov	arg01, objptr
23904     81 E4 85 F1 | 	sub	objptr, #129
23908     10 00 00 FF 
2390c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
23910     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
23914     10 00 00 FF 
23918     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
2391c     10 16 06 F6 | 	mov	arg03, #16
23920     14 2F B0 FD | 	call	#__system____builtin_memmove
23924                 | ' leading_spaces:=0
23924     01 00 00 FF 
23928     B6 E4 05 F1 | 	add	objptr, ##694
2392c     F2 00 68 FC | 	wrlong	#0, objptr
23930     01 00 00 FF 
23934     B6 E4 85 F1 | 	sub	objptr, ##694
23938                 | ' '---------------------------- initialize a cursor (MSDOS type)
23938                 | ' 
23938                 | ' initcursor(154)
23938     9A 12 06 F6 | 	mov	arg01, #154
2393c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
23940                 | ' 
23940                 | ' '---------------------------- start the cog
23940                 | ' 
23940                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
23940     10 00 00 FF 
23944     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
23948     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
2394c     10 00 00 FF 
23950     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
23954     14 E4 05 F1 | 	add	objptr, #20
23958     10 FA 05 F6 | 	mov	result1, #16
2395c     28 E4 61 FD | 	setq	objptr
23960     0A FB F1 FC | 	coginit	result1, arg02 wc
23964     01 FA 65 C6 |  if_b	neg	result1, #1
23968     1C E4 05 F1 | 	add	objptr, #28
2396c     F2 FA 61 FC | 	wrlong	result1, objptr
23970     30 E4 85 F1 | 	sub	objptr, #48
23974                 | ' waitms(40)							' wait for stabilize
23974     28 12 06 F6 | 	mov	arg01, #40
23978     90 32 B0 FD | 	call	#__system___waitms
2397c                 | ' return cog							' return the driver's cog #
2397c     30 E4 05 F1 | 	add	objptr, #48
23980     F2 FA 01 FB | 	rdlong	result1, objptr
23984     30 E4 85 F1 | 	sub	objptr, #48
23988                 | _hg010b_spin2_start_ret
23988     2D 00 64 FD | 	ret
2398c                 | 
2398c                 | ' 
2398c                 | ' 
2398c                 | ' '**************************************************************************************************************** 
2398c                 | ' '                                                                                                             	*
2398c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
2398c                 | ' '  Mode number - see start() above or bits below								*
2398c                 | ' '                                                                                                             	*
2398c                 | ' '****************************************************************************************************************
2398c                 | ' 
2398c                 | ' '---------------------------- initialize a cursor (MSDOS type)
2398c                 | ' pub initcursor(color) |i
2398c                 | _hg010b_spin2_initcursor
2398c     03 4A 05 F6 | 	mov	COUNT_, #3
23990     A8 00 A0 FD | 	call	#pushregs_
23994     09 27 02 F6 | 	mov	local01, arg01
23998                 | ' 
23998                 | ' cursor_x:=0							' place the cursor at 0:0
23998     3C E4 05 F1 | 	add	objptr, #60
2399c     F2 00 58 FC | 	wrword	#0, objptr
239a0                 | ' cursor_y:=0
239a0     02 E4 05 F1 | 	add	objptr, #2
239a4     F2 00 48 FC | 	wrbyte	#0, objptr
239a8                 | ' repeat i from 0 to 111
239a8     00 28 06 F6 | 	mov	local02, #0
239ac     F8 E5 05 F1 | 	add	objptr, #504
239b0     97 1A 48 FB | 	callpa	#(@LR__2692-@LR__2690)>>2,fcache_load_ptr_
239b4                 | LR__2690
239b4                 | '   cursor[i]:=0
239b4     14 2B 02 F6 | 	mov	local03, local02
239b8     F2 2A 02 F1 | 	add	local03, objptr
239bc     15 01 48 FC | 	wrbyte	#0, local03
239c0     01 28 06 F1 | 	add	local02, #1
239c4     70 28 56 F2 | 	cmps	local02, #112 wc
239c8     E8 FF 9F CD |  if_b	jmp	#LR__2690
239cc                 | ' repeat i from 112 to 127
239cc     70 28 06 F6 | 	mov	local02, #112
239d0                 | LR__2691
239d0                 | '   cursor[i]:=color  
239d0     14 2B 02 F6 | 	mov	local03, local02
239d4     F2 2A 02 F1 | 	add	local03, objptr
239d8     15 27 42 FC | 	wrbyte	local01, local03
239dc     01 28 06 F1 | 	add	local02, #1
239e0     80 28 16 F2 | 	cmp	local02, #128 wc
239e4     E8 FF 9F CD |  if_b	jmp	#LR__2691
239e8                 | LR__2692
239e8                 | ' 'repeat i from 0 to 127
239e8                 | ' '  if ((i/8)//2)
239e8                 | ' '    cursor[i]:=15
239e8                 | ' '  else
239e8                 | ' '    cursor[i]:=0
239e8                 | ' '  if i>=120    
239e8                 | ' '    cursor[i]:=40
239e8                 | ' setspriteptr(17,@cursor)
239e8     F2 14 02 F6 | 	mov	arg02, objptr
239ec     01 00 00 FF 
239f0     36 E4 85 F1 | 	sub	objptr, ##566
239f4     11 12 06 F6 | 	mov	arg01, #17
239f8     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
239fc                 | ' setspritesize(17,8,16)
239fc     11 12 06 F6 | 	mov	arg01, #17
23a00     08 14 06 F6 | 	mov	arg02, #8
23a04     10 16 06 F6 | 	mov	arg03, #16
23a08     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
23a0c                 | ' setspritepos(17,0,0)
23a0c     11 12 06 F6 | 	mov	arg01, #17
23a10     00 14 06 F6 | 	mov	arg02, #0
23a14     00 16 06 F6 | 	mov	arg03, #0
23a18     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
23a1c                 | ' cursorshape:=14
23a1c     0B 00 00 FF 
23a20     C6 E4 05 F1 | 	add	objptr, ##5830
23a24     F2 1C 68 FC | 	wrlong	#14, objptr
23a28                 | ' cursorcolor:=color
23a28     04 E4 85 F1 | 	sub	objptr, #4
23a2c     F2 26 62 FC | 	wrlong	local01, objptr
23a30     0B 00 00 FF 
23a34     C2 E4 85 F1 | 	sub	objptr, ##5826
23a38     A7 F0 03 F6 | 	mov	ptra, fp
23a3c     B2 00 A0 FD | 	call	#popregs_
23a40                 | _hg010b_spin2_initcursor_ret
23a40     2D 00 64 FD | 	ret
23a44                 | 
23a44                 | ' 
23a44                 | ' pub setcursorshape(shape) | i
23a44                 | _hg010b_spin2_setcursorshape
23a44                 | ' 
23a44                 | ' cursorshape:=shape
23a44     0B 00 00 FF 
23a48     C6 E4 05 F1 | 	add	objptr, ##5830
23a4c     F2 12 62 FC | 	wrlong	arg01, objptr
23a50                 | ' repeat i from 0 to (8*cursorshape)-1
23a50     00 00 06 F6 | 	mov	_var01, #0
23a54     09 03 02 F6 | 	mov	_var02, arg01
23a58     03 02 66 F0 | 	shl	_var02, #3
23a5c     01 02 86 F1 | 	sub	_var02, #1
23a60     00 02 56 F2 | 	cmps	_var02, #0 wc
23a64     01 04 86 F6 | 	negc	_var03, #1
23a68     02 07 02 F6 | 	mov	_var04, _var03
23a6c     02 03 02 F1 | 	add	_var02, _var03
23a70     0A 00 00 FF 
23a74     90 E4 85 F1 | 	sub	objptr, ##5264
23a78     97 0C 48 FB | 	callpa	#(@LR__2701-@LR__2700)>>2,fcache_load_ptr_
23a7c                 | LR__2700
23a7c                 | '   cursor[i]:=0
23a7c     00 05 02 F6 | 	mov	_var03, _var01
23a80     F2 04 02 F1 | 	add	_var03, objptr
23a84     02 01 48 FC | 	wrbyte	#0, _var03
23a88     03 01 02 F1 | 	add	_var01, _var04
23a8c     01 01 0A F2 | 	cmp	_var01, _var02 wz
23a90     E8 FF 9F 5D |  if_ne	jmp	#LR__2700
23a94                 | LR__2701
23a94                 | ' repeat i from 8*cursorshape to 127
23a94     0A 00 00 FF 
23a98     90 E4 05 F1 | 	add	objptr, ##5264
23a9c     F2 06 02 FB | 	rdlong	_var04, objptr
23aa0     03 01 02 F6 | 	mov	_var01, _var04
23aa4     03 00 66 F0 | 	shl	_var01, #3
23aa8     0B 00 00 FF 
23aac     C6 E4 85 F1 | 	sub	objptr, ##5830
23ab0     03 06 66 F0 | 	shl	_var04, #3
23ab4     80 06 56 F2 | 	cmps	_var04, #128 wc
23ab8     01 04 A6 F6 | 	negnc	_var03, #1
23abc     7F 02 06 F6 | 	mov	_var02, #127
23ac0     02 03 02 F1 | 	add	_var02, _var03
23ac4     97 1A 48 FB | 	callpa	#(@LR__2703-@LR__2702)>>2,fcache_load_ptr_
23ac8                 | LR__2702
23ac8                 | '   cursor[i]:=cursorcolor
23ac8     00 07 02 F6 | 	mov	_var04, _var01
23acc     01 00 00 FF 
23ad0     36 E4 05 F1 | 	add	objptr, ##566
23ad4     F2 06 02 F1 | 	add	_var04, objptr
23ad8     0A 00 00 FF 
23adc     8C E4 05 F1 | 	add	objptr, ##5260
23ae0     F2 12 02 FB | 	rdlong	arg01, objptr
23ae4     0B 00 00 FF 
23ae8     C2 E4 85 F1 | 	sub	objptr, ##5826
23aec     03 13 42 FC | 	wrbyte	arg01, _var04
23af0     02 01 02 F1 | 	add	_var01, _var03
23af4     01 01 0A F2 | 	cmp	_var01, _var02 wz
23af8     CC FF 9F 5D |  if_ne	jmp	#LR__2702
23afc                 | LR__2703
23afc                 | _hg010b_spin2_setcursorshape_ret
23afc     2D 00 64 FD | 	ret
23b00                 | 
23b00                 | ' 
23b00                 | ' pub setcursorcolor(color) | i
23b00                 | _hg010b_spin2_setcursorcolor
23b00                 | ' 
23b00                 | ' cursorcolor:=color
23b00     0B 00 00 FF 
23b04     C2 E4 05 F1 | 	add	objptr, ##5826
23b08     F2 12 62 FC | 	wrlong	arg01, objptr
23b0c                 | ' repeat i from 0 to (8*cursorshape)-1
23b0c     00 12 06 F6 | 	mov	arg01, #0
23b10     04 E4 05 F1 | 	add	objptr, #4
23b14     F2 00 02 FB | 	rdlong	_var01, objptr
23b18     03 00 66 F0 | 	shl	_var01, #3
23b1c     01 00 86 F1 | 	sub	_var01, #1
23b20     00 00 56 F2 | 	cmps	_var01, #0 wc
23b24     01 02 86 F6 | 	negc	_var02, #1
23b28     01 05 02 F6 | 	mov	_var03, _var02
23b2c     01 01 02 F1 | 	add	_var01, _var02
23b30     0A 00 00 FF 
23b34     90 E4 85 F1 | 	sub	objptr, ##5264
23b38     97 0C 48 FB | 	callpa	#(@LR__2711-@LR__2710)>>2,fcache_load_ptr_
23b3c                 | LR__2710
23b3c                 | '   cursor[i]:=0
23b3c     09 03 02 F6 | 	mov	_var02, arg01
23b40     F2 02 02 F1 | 	add	_var02, objptr
23b44     01 01 48 FC | 	wrbyte	#0, _var02
23b48     02 13 02 F1 | 	add	arg01, _var03
23b4c     00 13 0A F2 | 	cmp	arg01, _var01 wz
23b50     E8 FF 9F 5D |  if_ne	jmp	#LR__2710
23b54                 | LR__2711
23b54                 | ' repeat i from 8*cursorshape to 127
23b54     0A 00 00 FF 
23b58     90 E4 05 F1 | 	add	objptr, ##5264
23b5c     F2 04 02 FB | 	rdlong	_var03, objptr
23b60     02 13 02 F6 | 	mov	arg01, _var03
23b64     03 12 66 F0 | 	shl	arg01, #3
23b68     0B 00 00 FF 
23b6c     C6 E4 85 F1 | 	sub	objptr, ##5830
23b70     03 04 66 F0 | 	shl	_var03, #3
23b74     80 04 56 F2 | 	cmps	_var03, #128 wc
23b78     01 02 A6 F6 | 	negnc	_var02, #1
23b7c     7F 00 06 F6 | 	mov	_var01, #127
23b80     01 01 02 F1 | 	add	_var01, _var02
23b84     97 1A 48 FB | 	callpa	#(@LR__2713-@LR__2712)>>2,fcache_load_ptr_
23b88                 | LR__2712
23b88                 | '   cursor[i]:=cursorcolor
23b88     09 05 02 F6 | 	mov	_var03, arg01
23b8c     01 00 00 FF 
23b90     36 E4 05 F1 | 	add	objptr, ##566
23b94     F2 04 02 F1 | 	add	_var03, objptr
23b98     0A 00 00 FF 
23b9c     8C E4 05 F1 | 	add	objptr, ##5260
23ba0     F2 06 02 FB | 	rdlong	_var04, objptr
23ba4     0B 00 00 FF 
23ba8     C2 E4 85 F1 | 	sub	objptr, ##5826
23bac     02 07 42 FC | 	wrbyte	_var04, _var03
23bb0     01 13 02 F1 | 	add	arg01, _var02
23bb4     00 13 0A F2 | 	cmp	arg01, _var01 wz
23bb8     CC FF 9F 5D |  if_ne	jmp	#LR__2712
23bbc                 | LR__2713
23bbc                 | _hg010b_spin2_setcursorcolor_ret
23bbc     2D 00 64 FD | 	ret
23bc0                 | 
23bc0                 | '   
23bc0                 | '   
23bc0                 | '   
23bc0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
23bc0                 | _hg010b_spin2_setmode
23bc0     02 4A 05 F6 | 	mov	COUNT_, #2
23bc4     A8 00 A0 FD | 	call	#pushregs_
23bc8                 | ' 
23bc8                 | ' 
23bc8                 | ' dl_ptr:=@emptydl[0]
23bc8     01 00 00 FF 
23bcc     1D E4 05 F1 | 	add	objptr, ##541
23bd0     F2 1A 02 F6 | 	mov	arg05, objptr
23bd4     FD E5 85 F1 | 	sub	objptr, #509
23bd8     F2 1A 62 FC | 	wrlong	arg05, objptr
23bdc                 | ' 
23bdc                 | ' if cog>0 
23bdc     10 E4 05 F1 | 	add	objptr, #16
23be0     F2 1A 02 FB | 	rdlong	arg05, objptr
23be4     30 E4 85 F1 | 	sub	objptr, #48
23be8     01 1A 56 F2 | 	cmps	arg05, #1 wc
23bec                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
23bec     01 12 06 36 |  if_ae	mov	arg01, #1
23bf0     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
23bf4                 | ' xres:=1024
23bf4     01 00 00 FF 
23bf8     26 E4 05 F1 | 	add	objptr, ##550
23bfc     02 00 80 FF 
23c00     F2 00 68 FC | 	wrlong	##1024, objptr
23c04                 | ' yres:=600
23c04     04 E4 05 F1 | 	add	objptr, #4
23c08     01 00 80 FF 
23c0c     F2 B0 68 FC | 	wrlong	##600, objptr
23c10                 | ' ppl:=(timings[3])
23c10     10 00 00 FF 
23c14     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
23c18     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23c1c     51 E5 85 F1 | 	sub	objptr, #337
23c20     F2 1A 62 FC | 	wrlong	arg05, objptr
23c24                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
23c24     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
23c28     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23c2c     01 26 66 F0 | 	shl	local01, #1
23c30     80 E4 85 F1 | 	sub	objptr, #128
23c34     F2 26 62 FC | 	wrlong	local01, objptr
23c38                 | ' cpl1:=cpl '' todo remove
23c38     04 E4 05 F1 | 	add	objptr, #4
23c3c     F2 26 62 FC | 	wrlong	local01, objptr
23c40                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
23c40     02 00 00 FF 
23c44     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
23c48     41 E4 85 F1 | 	sub	objptr, #65
23c4c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23c50                 | ' repeat i from 0 to 3
23c50     00 28 06 F6 | 	mov	local02, #0
23c54     02 00 00 FF 
23c58     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
23c5c     08 E4 05 F1 | 	add	objptr, #8
23c60     97 20 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
23c64                 | LR__2720
23c64                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
23c64     14 27 02 F6 | 	mov	local01, local02
23c68     02 26 66 F0 | 	shl	local01, #2
23c6c     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
23c70     F2 1A 02 FB | 	rdlong	arg05, objptr
23c74     11 1A 66 F0 | 	shl	arg05, #17
23c78     13 27 02 FB | 	rdlong	local01, local01
23c7c     0D 27 02 F1 | 	add	local01, arg05
23c80     80 40 38 FF 
23c84     00 26 06 F1 | 	add	local01, ##1887502336
23c88     14 1B 02 F6 | 	mov	arg05, local02
23c8c     02 1A 66 F0 | 	shl	arg05, #2
23c90     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
23c94     0D 27 62 FC | 	wrlong	local01, arg05
23c98     01 28 06 F1 | 	add	local02, #1
23c9c     04 28 56 F2 | 	cmps	local02, #4 wc
23ca0     C0 FF 9F CD |  if_b	jmp	#LR__2720
23ca4                 | LR__2721
23ca4     24 E4 85 F1 | 	sub	objptr, #36
23ca8                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
23ca8     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
23cac     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
23cb0     14 26 66 FC | 	wrlong	local01, #20
23cb4                 | ' hubset(timings[10])
23cb4     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
23cb8     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
23cbc     10 00 00 FF 
23cc0     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
23cc4     00 12 62 FD | 	hubset	arg01
23cc8                 | ' waitms(1)                                                   	' wait for stabilization
23cc8     01 12 06 F6 | 	mov	arg01, #1
23ccc     3C 2F B0 FD | 	call	#__system___waitms
23cd0     10 00 00 FF 
23cd4     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
23cd8     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
23cdc     61 E4 05 F1 | 	add	objptr, #97
23ce0     F2 28 62 FC | 	wrlong	local02, objptr
23ce4     14 27 52 F6 | 	abs	local01, local02 wc
23ce8     04 26 46 F0 | 	shr	local01, #4
23cec     13 27 82 F6 | 	negc	local01, local01
23cf0     9C E4 05 F1 | 	add	objptr, #156
23cf4     F2 26 62 FC | 	wrlong	local01, objptr
23cf8     A4 E4 85 F1 | 	sub	objptr, #164
23cfc     F2 28 02 FB | 	rdlong	local02, objptr
23d00     08 E4 05 F1 | 	add	objptr, #8
23d04     F2 26 02 FB | 	rdlong	local01, objptr
23d08     13 29 02 FD | 	qmul	local02, local01
23d0c                 | ' lines:=timings[11]
23d0c                 | ' t_lines:=lines/16
23d0c                 | ' buflen:=cpl*lines						' framebuffer length in longs
23d0c     29 E4 85 F1 | 	sub	objptr, #41
23d10     19 26 C6 F9 | 	decod	local01, #25
23d14     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
23d18     18 28 62 FD | 	getqx	local02
23d1c     F2 28 62 FC | 	wrlong	local02, objptr
23d20     38 E4 85 F1 | 	sub	objptr, #56
23d24     02 28 66 F0 | 	shl	local02, #2
23d28     14 27 82 F1 | 	sub	local01, local02
23d2c     F2 26 62 FC | 	wrlong	local01, objptr
23d30     FD E4 05 F1 | 	add	objptr, #253
23d34     F2 28 02 FB | 	rdlong	local02, objptr
23d38     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
23d3c     0D 29 02 FD | 	qmul	local02, arg05
23d40                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
23d40                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
23d40     F9 E4 85 F1 | 	sub	objptr, #249
23d44                 | ' mode_ptr:=@timings						' set pointers to timings
23d44     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
23d48                 | ' graphmode:=1024+512+192+48							' det global variable
23d48                 | ' makedl(graphmode)							' make a DL for the mode
23d48     03 00 00 FF 
23d4c     F0 12 06 F6 | 	mov	arg01, ##1776
23d50     18 28 62 FD | 	getqx	local02
23d54     14 27 82 F1 | 	sub	local01, local02
23d58     F2 26 62 FC | 	wrlong	local01, objptr
23d5c     14 E4 05 F1 | 	add	objptr, #20
23d60     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
23d64     79 E4 05 F1 | 	add	objptr, #121
23d68     03 00 80 FF 
23d6c     F2 E0 69 FC | 	wrlong	##1776, objptr
23d70     91 E4 85 F1 | 	sub	objptr, #145
23d74     10 00 00 FF 
23d78     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
23d7c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
23d80                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
23d80     F2 26 02 FB | 	rdlong	local01, objptr
23d84     DD E4 05 F1 | 	add	objptr, #221
23d88     F2 26 62 FC | 	wrlong	local01, objptr
23d8c                 | ' s_font_ptr:=font_ptr
23d8c     D5 E4 85 F1 | 	sub	objptr, #213
23d90     F2 26 02 FB | 	rdlong	local01, objptr
23d94     D9 E4 05 F1 | 	add	objptr, #217
23d98     F2 26 62 FC | 	wrlong	local01, objptr
23d9c                 | ' s_lines:=lines
23d9c     80 E4 85 F1 | 	sub	objptr, #128
23da0     F2 26 02 FB | 	rdlong	local01, objptr
23da4     84 E4 05 F1 | 	add	objptr, #132
23da8     F2 26 62 FC | 	wrlong	local01, objptr
23dac                 | ' s_buflen:=buflen
23dac     AD E4 85 F1 | 	sub	objptr, #173
23db0     F2 26 02 FB | 	rdlong	local01, objptr
23db4     B5 E4 05 F1 | 	add	objptr, #181
23db8     F2 26 62 FC | 	wrlong	local01, objptr
23dbc                 | ' s_cpl:=cpl
23dbc     94 E4 85 F1 | 	sub	objptr, #148
23dc0     F2 26 02 FB | 	rdlong	local01, objptr
23dc4     90 E4 05 F1 | 	add	objptr, #144
23dc8     F2 26 62 FC | 	wrlong	local01, objptr
23dcc                 | ' s_cpl1:=cpl
23dcc     90 E4 85 F1 | 	sub	objptr, #144
23dd0     F2 26 02 FB | 	rdlong	local01, objptr
23dd4     98 E4 05 F1 | 	add	objptr, #152
23dd8     F2 26 62 FC | 	wrlong	local01, objptr
23ddc                 | ' st_lines:=t_lines
23ddc     0C E4 05 F1 | 	add	objptr, #12
23de0     F2 26 02 FB | 	rdlong	local01, objptr
23de4     04 E4 05 F1 | 	add	objptr, #4
23de8     F2 26 62 FC | 	wrlong	local01, objptr
23dec                 | ' ppl:=ppl/xzoom  
23dec     28 E4 85 F1 | 	sub	objptr, #40
23df0     F2 90 02 FB | 	rdlong	muldiva_, objptr
23df4     2C E4 05 F1 | 	add	objptr, #44
23df8     F2 92 02 FB | 	rdlong	muldivb_, objptr
23dfc     05 E5 85 F1 | 	sub	objptr, #261
23e00     BA 00 A0 FD | 	call	#divide_
23e04     D9 E4 05 F1 | 	add	objptr, #217
23e08     F2 92 62 FC | 	wrlong	muldivb_, objptr
23e0c                 | ' s_ppl:=ppl
23e0c     1C E4 05 F1 | 	add	objptr, #28
23e10     F2 92 62 FC | 	wrlong	muldivb_, objptr
23e14     F5 E4 85 F1 | 	sub	objptr, #245
23e18                 | ' waitms(20)							' wait 
23e18     14 12 06 F6 | 	mov	arg01, #20
23e1c     EC 2D B0 FD | 	call	#__system___waitms
23e20                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
23e20     04 E4 05 F1 | 	add	objptr, #4
23e24     F2 12 02 FB | 	rdlong	arg01, objptr
23e28     04 E4 85 F1 | 	sub	objptr, #4
23e2c     F2 16 02 FB | 	rdlong	arg03, objptr
23e30     09 17 82 F1 | 	sub	arg03, arg01
23e34     20 14 06 F6 | 	mov	arg02, #32
23e38     00 18 06 F6 | 	mov	arg04, #0
23e3c     01 1A 06 F6 | 	mov	arg05, #1
23e40     0B 00 00 FF 
23e44     CC E4 05 F1 | 	add	objptr, ##5836
23e48     7C 1F B0 FD | 	call	#_psram_spin2_fill
23e4c     0B 00 00 FF 
23e50     CC E4 85 F1 | 	sub	objptr, ##5836
23e54     A7 F0 03 F6 | 	mov	ptra, fp
23e58     B2 00 A0 FD | 	call	#popregs_
23e5c                 | _hg010b_spin2_setmode_ret
23e5c     2D 00 64 FD | 	ret
23e60                 | 
23e60                 | ' 
23e60                 | ' '****************************************************************************************************************
23e60                 | ' '                                                                                                             	*
23e60                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
23e60                 | ' '                                                                                                             	*
23e60                 | ' '****************************************************************************************************************
23e60                 | ' 
23e60                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
23e60                 | _hg010b_spin2_makedl
23e60                 | ' 
23e60                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
23e60                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
23e60                 | ' repeat i from 0 to 11                                                           ' clear DL
23e60     00 00 06 F6 | 	mov	_var01, #0
23e64     ED E5 05 F1 | 	add	objptr, #493
23e68     97 0E 48 FB | 	callpa	#(@LR__2731-@LR__2730)>>2,fcache_load_ptr_
23e6c                 | LR__2730
23e6c                 | '   displaylist[i]:=0 
23e6c     00 03 02 F6 | 	mov	_var02, _var01
23e70     02 02 66 F0 | 	shl	_var02, #2
23e74     F2 02 02 F1 | 	add	_var02, objptr
23e78     01 01 68 FC | 	wrlong	#0, _var02
23e7c     01 00 06 F1 | 	add	_var01, #1
23e80     0C 00 56 F2 | 	cmps	_var01, #12 wc
23e84     E4 FF 9F CD |  if_b	jmp	#LR__2730
23e88                 | LR__2731
23e88                 | '                         ' 
23e88                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
23e88     8C E5 85 F1 | 	sub	objptr, #396
23e8c     F2 02 02 FB | 	rdlong	_var02, objptr
23e90     14 02 66 F0 | 	shl	_var02, #20
23e94     01 02 06 F1 | 	add	_var02, #1
23e98     04 E4 85 F1 | 	sub	objptr, #4
23e9c     F2 00 02 FB | 	rdlong	_var01, objptr
23ea0     02 00 66 F0 | 	shl	_var01, #2
23ea4     04 00 66 F0 | 	shl	_var01, #4
23ea8     00 03 02 F1 | 	add	_var02, _var01
23eac     90 E5 05 F1 | 	add	objptr, #400
23eb0     F2 02 62 FC | 	wrlong	_var02, objptr
23eb4     ED E5 85 F1 | 	sub	objptr, #493
23eb8                 | ' displaylist[1]:=buf_ptr<<4+%10  
23eb8     F2 02 02 FB | 	rdlong	_var02, objptr
23ebc     04 02 66 F0 | 	shl	_var02, #4
23ec0     02 02 06 F1 | 	add	_var02, #2
23ec4     F1 E5 05 F1 | 	add	objptr, #497
23ec8     F2 02 62 FC | 	wrlong	_var02, objptr
23ecc                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
23ecc     04 E4 85 F1 | 	sub	objptr, #4
23ed0     F2 02 02 F6 | 	mov	_var02, objptr
23ed4     CD E5 85 F1 | 	sub	objptr, #461
23ed8     F2 02 62 FC | 	wrlong	_var02, objptr
23edc     20 E4 85 F1 | 	sub	objptr, #32
23ee0                 | _hg010b_spin2_makedl_ret
23ee0     2D 00 64 FD | 	ret
23ee4                 | 
23ee4                 | ' 
23ee4                 | ' 
23ee4                 | ' '****************************************************************************************************************
23ee4                 | ' '                                                                        					*
23ee4                 | ' '  Graphic primitives                                                    					*
23ee4                 | ' '                                                                        					*
23ee4                 | ' '****************************************************************************************************************
23ee4                 | ' 
23ee4                 | ' pub setspriteptr(num,ptr)
23ee4                 | _hg010b_spin2_setspriteptr
23ee4                 | ' long[@spr1ptr+12*num]:=ptr
23ee4     11 E5 05 F1 | 	add	objptr, #273
23ee8     F2 00 02 F6 | 	mov	_var01, objptr
23eec     09 03 02 F6 | 	mov	_var02, arg01
23ef0     01 02 66 F0 | 	shl	_var02, #1
23ef4     09 03 02 F1 | 	add	_var02, arg01
23ef8     02 02 66 F0 | 	shl	_var02, #2
23efc     01 01 02 F1 | 	add	_var01, _var02
23f00     00 15 62 FC | 	wrlong	arg02, _var01
23f04     11 E5 85 F1 | 	sub	objptr, #273
23f08                 | _hg010b_spin2_setspriteptr_ret
23f08     2D 00 64 FD | 	ret
23f0c                 | 
23f0c                 | ' 
23f0c                 | ' pub setspritepos(num,x,y)
23f0c                 | _hg010b_spin2_setspritepos
23f0c                 | ' if y>601
23f0c     01 00 00 FF 
23f10     5A 16 56 F2 | 	cmps	arg03, ##602 wc
23f14                 | '   y:=601
23f14     01 00 00 3F 
23f18     59 16 06 36 |  if_ae	mov	arg03, ##601
23f1c                 | ' if x>1024
23f1c     02 00 00 FF 
23f20     01 14 56 F2 | 	cmps	arg02, ##1025 wc
23f24                 | '   x:=1024
23f24     0A 14 C6 39 |  if_ae	decod	arg02, #10
23f28                 | ' word[@spr1ptr+12*num+4]:=x
23f28     11 E5 05 F1 | 	add	objptr, #273
23f2c     F2 00 02 F6 | 	mov	_var01, objptr
23f30     09 03 02 F6 | 	mov	_var02, arg01
23f34     01 02 66 F0 | 	shl	_var02, #1
23f38     09 03 02 F1 | 	add	_var02, arg01
23f3c     02 02 66 F0 | 	shl	_var02, #2
23f40     01 01 02 F1 | 	add	_var01, _var02
23f44     04 00 06 F1 | 	add	_var01, #4
23f48     00 15 52 FC | 	wrword	arg02, _var01
23f4c                 | ' word[@spr1ptr+12*num+6]:=y
23f4c     F2 00 02 F6 | 	mov	_var01, objptr
23f50     09 03 02 F6 | 	mov	_var02, arg01
23f54     01 02 66 F0 | 	shl	_var02, #1
23f58     09 03 02 F1 | 	add	_var02, arg01
23f5c     02 02 66 F0 | 	shl	_var02, #2
23f60     01 01 02 F1 | 	add	_var01, _var02
23f64     06 00 06 F1 | 	add	_var01, #6
23f68     00 17 52 FC | 	wrword	arg03, _var01
23f6c     11 E5 85 F1 | 	sub	objptr, #273
23f70                 | _hg010b_spin2_setspritepos_ret
23f70     2D 00 64 FD | 	ret
23f74                 | 
23f74                 | ' 
23f74                 | ' pub setspritesize(num,w,h)
23f74                 | _hg010b_spin2_setspritesize
23f74                 | ' word[@spr1ptr+12*num+8]:=w
23f74     11 E5 05 F1 | 	add	objptr, #273
23f78     F2 00 02 F6 | 	mov	_var01, objptr
23f7c     09 03 02 F6 | 	mov	_var02, arg01
23f80     01 02 66 F0 | 	shl	_var02, #1
23f84     09 03 02 F1 | 	add	_var02, arg01
23f88     02 02 66 F0 | 	shl	_var02, #2
23f8c     01 01 02 F1 | 	add	_var01, _var02
23f90     08 00 06 F1 | 	add	_var01, #8
23f94     00 15 52 FC | 	wrword	arg02, _var01
23f98                 | ' word[@spr1ptr+12*num+10]:=h
23f98     F2 00 02 F6 | 	mov	_var01, objptr
23f9c     09 03 02 F6 | 	mov	_var02, arg01
23fa0     01 02 66 F0 | 	shl	_var02, #1
23fa4     09 03 02 F1 | 	add	_var02, arg01
23fa8     02 02 66 F0 | 	shl	_var02, #2
23fac     01 01 02 F1 | 	add	_var01, _var02
23fb0     0A 00 06 F1 | 	add	_var01, #10
23fb4     00 17 52 FC | 	wrword	arg03, _var01
23fb8     11 E5 85 F1 | 	sub	objptr, #273
23fbc                 | _hg010b_spin2_setspritesize_ret
23fbc     2D 00 64 FD | 	ret
23fc0                 | 
23fc0                 | ' 
23fc0                 | ' 
23fc0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
23fc0                 | ' 
23fc0                 | ' 
23fc0                 | ' pub putpixel(x,y,c)
23fc0                 | _hg010b_spin2_putpixel
23fc0     04 4A 05 F6 | 	mov	COUNT_, #4
23fc4     A8 00 A0 FD | 	call	#pushregs_
23fc8     09 27 02 F6 | 	mov	local01, arg01
23fcc                 | ' 
23fcc                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
23fcc     00 28 06 F6 | 	mov	local02, #0
23fd0     00 26 56 F2 | 	cmps	local01, #0 wc
23fd4     01 28 66 36 |  if_ae	neg	local02, #1
23fd8     E9 E4 05 F1 | 	add	objptr, #233
23fdc     F2 1A 02 FB | 	rdlong	arg05, objptr
23fe0     02 1A 66 F0 | 	shl	arg05, #2
23fe4     0D 27 52 F2 | 	cmps	local01, arg05 wc
23fe8     15 2B A2 F1 | 	subx	local03, local03
23fec     15 29 02 F5 | 	and	local02, local03
23ff0     00 2A 06 F6 | 	mov	local03, #0
23ff4     00 14 56 F2 | 	cmps	arg02, #0 wc
23ff8     01 2A 66 36 |  if_ae	neg	local03, #1
23ffc     15 29 02 F5 | 	and	local02, local03
24000     04 E4 85 F1 | 	sub	objptr, #4
24004     F2 2A 02 FB | 	rdlong	local03, objptr
24008     E5 E4 85 F1 | 	sub	objptr, #229
2400c     15 15 52 F2 | 	cmps	arg02, local03 wc
24010     16 2D A2 F1 | 	subx	local04, local04
24014     16 29 CA F7 | 	test	local02, local04 wz
24018     48 00 90 AD |  if_e	jmp	#LR__2740
2401c     DD E4 05 F1 | 	add	objptr, #221
24020     F2 12 02 FB | 	rdlong	arg01, objptr
24024     14 E4 05 F1 | 	add	objptr, #20
24028     F2 2C 02 FB | 	rdlong	local04, objptr
2402c     02 2C 66 F0 | 	shl	local04, #2
24030     0A 2D 02 FD | 	qmul	local04, arg02
24034                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24034     0B 15 02 F6 | 	mov	arg02, arg03
24038     01 16 06 F6 | 	mov	arg03, #1
2403c     00 18 06 F6 | 	mov	arg04, #0
24040     01 1A 06 F6 | 	mov	arg05, #1
24044     0A 00 00 FF 
24048     DB E5 05 F1 | 	add	objptr, ##5595
2404c     18 2C 62 FD | 	getqx	local04
24050     13 2D 02 F1 | 	add	local04, local01
24054     16 13 02 F1 | 	add	arg01, local04
24058     6C 1D B0 FD | 	call	#_psram_spin2_fill
2405c     0B 00 00 FF 
24060     CC E4 85 F1 | 	sub	objptr, ##5836
24064                 | LR__2740
24064     A7 F0 03 F6 | 	mov	ptra, fp
24068     B2 00 A0 FD | 	call	#popregs_
2406c                 | _hg010b_spin2_putpixel_ret
2406c     2D 00 64 FD | 	ret
24070                 | 
24070                 | ' 
24070                 | ' pub putpixel2(x,y,c)
24070                 | _hg010b_spin2_putpixel2
24070     02 4A 05 F6 | 	mov	COUNT_, #2
24074     A8 00 A0 FD | 	call	#pushregs_
24078     DD E4 05 F1 | 	add	objptr, #221
2407c     F2 26 02 FB | 	rdlong	local01, objptr
24080     14 E4 05 F1 | 	add	objptr, #20
24084     F2 1A 02 FB | 	rdlong	arg05, objptr
24088     02 1A 66 F0 | 	shl	arg05, #2
2408c     0A 1B 02 FD | 	qmul	arg05, arg02
24090                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
24090     0B 15 02 F6 | 	mov	arg02, arg03
24094     01 16 06 F6 | 	mov	arg03, #1
24098     00 18 06 F6 | 	mov	arg04, #0
2409c     01 1A 06 F6 | 	mov	arg05, #1
240a0     0A 00 00 FF 
240a4     DB E5 05 F1 | 	add	objptr, ##5595
240a8     18 28 62 FD | 	getqx	local02
240ac     09 29 02 F1 | 	add	local02, arg01
240b0     14 27 02 F1 | 	add	local01, local02
240b4     13 13 02 F6 | 	mov	arg01, local01
240b8     0C 1D B0 FD | 	call	#_psram_spin2_fill
240bc     0B 00 00 FF 
240c0     CC E4 85 F1 | 	sub	objptr, ##5836
240c4     A7 F0 03 F6 | 	mov	ptra, fp
240c8     B2 00 A0 FD | 	call	#popregs_
240cc                 | _hg010b_spin2_putpixel2_ret
240cc     2D 00 64 FD | 	ret
240d0                 | 
240d0                 | ' 
240d0                 | ' pub getpixel2(x,y): c 
240d0                 | _hg010b_spin2_getpixel2
240d0     02 4A 05 F6 | 	mov	COUNT_, #2
240d4     A8 00 A0 FD | 	call	#pushregs_
240d8     0C F0 07 F1 | 	add	ptra, #12
240dc     04 4E 05 F1 | 	add	fp, #4
240e0     A7 12 62 FC | 	wrlong	arg01, fp
240e4     04 4E 05 F1 | 	add	fp, #4
240e8     A7 14 62 FC | 	wrlong	arg02, fp
240ec     08 4E 85 F1 | 	sub	fp, #8
240f0     A7 00 68 FC | 	wrlong	#0, fp
240f4     A7 12 02 F6 | 	mov	arg01, fp
240f8     DD E4 05 F1 | 	add	objptr, #221
240fc     F2 14 02 FB | 	rdlong	arg02, objptr
24100     14 E4 05 F1 | 	add	objptr, #20
24104     F2 16 02 FB | 	rdlong	arg03, objptr
24108     02 16 66 F0 | 	shl	arg03, #2
2410c     08 4E 05 F1 | 	add	fp, #8
24110     A7 FA 01 FB | 	rdlong	result1, fp
24114     FD 16 02 FD | 	qmul	arg03, result1
24118                 | ' 
24118                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
24118     04 4E 85 F1 | 	sub	fp, #4
2411c     A7 26 02 FB | 	rdlong	local01, fp
24120     04 4E 85 F1 | 	sub	fp, #4
24124     01 16 06 F6 | 	mov	arg03, #1
24128     0A 00 00 FF 
2412c     DB E5 05 F1 | 	add	objptr, ##5595
24130     18 28 62 FD | 	getqx	local02
24134     13 29 02 F1 | 	add	local02, local01
24138     14 15 02 F1 | 	add	arg02, local02
2413c     50 1B B0 FD | 	call	#_psram_spin2_read1
24140     0B 00 00 FF 
24144     CC E4 85 F1 | 	sub	objptr, ##5836
24148                 | ' return c
24148     A7 FA 01 FB | 	rdlong	result1, fp
2414c     A7 F0 03 F6 | 	mov	ptra, fp
24150     B2 00 A0 FD | 	call	#popregs_
24154                 | _hg010b_spin2_getpixel2_ret
24154     2D 00 64 FD | 	ret
24158                 | 
24158                 | '   
24158                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
24158                 | ' 
24158                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
24158                 | _hg010b_spin2_fastline
24158     02 4A 05 F6 | 	mov	COUNT_, #2
2415c     A8 00 A0 FD | 	call	#pushregs_
24160     09 27 02 F6 | 	mov	local01, arg01
24164     0A 29 02 F6 | 	mov	local02, arg02
24168                 | ' 
24168                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
24168     00 16 56 F2 | 	cmps	arg03, #0 wc
2416c     F4 00 90 CD |  if_b	jmp	#LR__2750
24170     01 00 00 FF 
24174     2A E4 05 F1 | 	add	objptr, ##554
24178     F2 1A 02 FB | 	rdlong	arg05, objptr
2417c     01 00 00 FF 
24180     2A E4 85 F1 | 	sub	objptr, ##554
24184     0D 17 52 F2 | 	cmps	arg03, arg05 wc
24188     D8 00 90 3D |  if_ae	jmp	#LR__2750
2418c     00 26 56 F2 | 	cmps	local01, #0 wc
24190     00 28 56 C2 |  if_b	cmps	local02, #0 wc
24194     CC 00 90 CD |  if_b	jmp	#LR__2750
24198     01 00 00 FF 
2419c     26 E4 05 F1 | 	add	objptr, ##550
241a0     F2 1A 02 FB | 	rdlong	arg05, objptr
241a4     01 00 00 FF 
241a8     26 E4 85 F1 | 	sub	objptr, ##550
241ac     0D 27 5A F2 | 	cmps	local01, arg05 wcz
241b0     01 00 00 1F 
241b4     26 E4 05 11 |  if_a	add	objptr, ##550
241b8     F2 12 02 1B |  if_a	rdlong	arg01, objptr
241bc     01 00 00 1F 
241c0     26 E4 85 11 |  if_a	sub	objptr, ##550
241c4     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
241c8                 | '   return
241c8     98 00 90 1D |  if_a	jmp	#LR__2750
241cc     14 27 5A F2 | 	cmps	local01, local02 wcz
241d0     13 1B 02 16 |  if_a	mov	arg05, local01
241d4     14 27 02 16 |  if_a	mov	local01, local02
241d8     0D 29 02 16 |  if_a	mov	local02, arg05
241dc     00 26 56 F2 | 	cmps	local01, #0 wc
241e0     00 26 06 C6 |  if_b	mov	local01, #0
241e4     01 00 00 FF 
241e8     26 E4 05 F1 | 	add	objptr, ##550
241ec     F2 1A 02 FB | 	rdlong	arg05, objptr
241f0     01 00 00 FF 
241f4     26 E4 85 F1 | 	sub	objptr, ##550
241f8     0D 29 52 F2 | 	cmps	local02, arg05 wc
241fc     01 00 00 3F 
24200     26 E4 05 31 |  if_ae	add	objptr, ##550
24204     F2 28 02 3B |  if_ae	rdlong	local02, objptr
24208     01 00 00 3F 
2420c     26 E4 85 31 |  if_ae	sub	objptr, ##550
24210     DD E4 05 F1 | 	add	objptr, #221
24214     F2 12 02 FB | 	rdlong	arg01, objptr
24218     14 E4 05 F1 | 	add	objptr, #20
2421c     F2 1A 02 FB | 	rdlong	arg05, objptr
24220     02 1A 66 F0 | 	shl	arg05, #2
24224     0B 1B 02 FD | 	qmul	arg05, arg03
24228                 | ' if x1>x2
24228                 | '   x1,x2:=x2,x1
24228                 | ' if x1<0 
24228                 | '   x1:=0
24228                 | ' if x2>=xres
24228                 | '   x2:=xres-1  
24228     01 28 86 31 |  if_ae	sub	local02, #1
2422c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
2422c     01 16 06 F6 | 	mov	arg03, #1
24230     14 17 02 F1 | 	add	arg03, local02
24234     13 17 82 F1 | 	sub	arg03, local01
24238     0C 15 02 F6 | 	mov	arg02, arg04
2423c     00 18 06 F6 | 	mov	arg04, #0
24240     01 1A 06 F6 | 	mov	arg05, #1
24244     0A 00 00 FF 
24248     DB E5 05 F1 | 	add	objptr, ##5595
2424c     18 28 62 FD | 	getqx	local02
24250     13 29 02 F1 | 	add	local02, local01
24254     14 13 02 F1 | 	add	arg01, local02
24258     6C 1B B0 FD | 	call	#_psram_spin2_fill
2425c     0B 00 00 FF 
24260     CC E4 85 F1 | 	sub	objptr, ##5836
24264                 | LR__2750
24264     A7 F0 03 F6 | 	mov	ptra, fp
24268     B2 00 A0 FD | 	call	#popregs_
2426c                 | _hg010b_spin2_fastline_ret
2426c     2D 00 64 FD | 	ret
24270                 | 
24270                 | ' 
24270                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
24270                 | _hg010b_spin2_draw
24270     0E 4A 05 F6 | 	mov	COUNT_, #14
24274     A8 00 A0 FD | 	call	#pushregs_
24278     09 27 02 F6 | 	mov	local01, arg01
2427c     0A 29 02 F6 | 	mov	local02, arg02
24280     0B 2B 02 F6 | 	mov	local03, arg03
24284     0C 2D 02 F6 | 	mov	local04, arg04
24288     0D 2F 02 F6 | 	mov	local05, arg05
2428c                 | ' 
2428c                 | ' if (y1==y2)
2428c     16 29 0A F2 | 	cmp	local02, local04 wz
24290     18 00 90 5D |  if_ne	jmp	#LR__2760
24294                 | '   fastline(x1,x2,y1,c)
24294     13 13 02 F6 | 	mov	arg01, local01
24298     15 15 02 F6 | 	mov	arg02, local03
2429c     14 17 02 F6 | 	mov	arg03, local02
242a0     17 19 02 F6 | 	mov	arg04, local05
242a4     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
242a8     F8 00 90 FD | 	jmp	#LR__2766
242ac                 | LR__2760
242ac                 | ' else  
242ac                 | '   x:=x1
242ac     13 31 02 F6 | 	mov	local06, local01
242b0                 | '   y:=y1
242b0     14 33 02 F6 | 	mov	local07, local02
242b4                 | ' 
242b4                 | '   if (x1<x2) 
242b4     15 27 52 F2 | 	cmps	local01, local03 wc
242b8                 | '     xi:=1
242b8     01 34 06 C6 |  if_b	mov	local08, #1
242bc                 | '     dx:=x2-x1
242bc     15 37 02 C6 |  if_b	mov	local09, local03
242c0     13 37 82 C1 |  if_b	sub	local09, local01
242c4                 | '   else
242c4                 | '     xi:=-1
242c4     01 34 66 36 |  if_ae	neg	local08, #1
242c8                 | '     dx:=x1-x2
242c8     15 27 82 31 |  if_ae	sub	local01, local03
242cc     13 37 02 36 |  if_ae	mov	local09, local01
242d0                 | '   
242d0                 | '   if (y1<y2) 
242d0     16 29 52 F2 | 	cmps	local02, local04 wc
242d4                 | '     yi:=1
242d4     01 38 06 C6 |  if_b	mov	local10, #1
242d8                 | '     dy:=y2-y1
242d8     16 3B 02 C6 |  if_b	mov	local11, local04
242dc     14 3B 82 C1 |  if_b	sub	local11, local02
242e0                 | '   else
242e0                 | '     yi:=-1
242e0     01 38 66 36 |  if_ae	neg	local10, #1
242e4                 | '     dy:=y1-y2
242e4     16 29 82 31 |  if_ae	sub	local02, local04
242e8     14 3B 02 36 |  if_ae	mov	local11, local02
242ec                 | ' 
242ec                 | '   putpixel(x,y,c)
242ec     17 17 02 F6 | 	mov	arg03, local05
242f0     18 13 02 F6 | 	mov	arg01, local06
242f4     19 15 02 F6 | 	mov	arg02, local07
242f8     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
242fc                 | ' 
242fc                 | '   if (dx>dy)
242fc     1D 37 5A F2 | 	cmps	local09, local11 wcz
24300     50 00 90 ED |  if_be	jmp	#LR__2762
24304                 | '     ai:=(dy-dx)*2
24304     1D 3D 02 F6 | 	mov	local12, local11
24308     1B 3D 82 F1 | 	sub	local12, local09
2430c     01 3C 66 F0 | 	shl	local12, #1
24310                 | '     bi:=dy*2
24310     01 3A 66 F0 | 	shl	local11, #1
24314     1D 3F 02 F6 | 	mov	local13, local11
24318                 | '     d:= bi-dx
24318     1F 41 02 F6 | 	mov	local14, local13
2431c     1B 41 82 F1 | 	sub	local14, local09
24320                 | '     repeat while (x<>x2) 
24320                 | LR__2761
24320     15 31 0A F2 | 	cmp	local06, local03 wz
24324     7C 00 90 AD |  if_e	jmp	#LR__2765
24328                 | '       if (d>=0) 
24328     00 40 56 F2 | 	cmps	local14, #0 wc
2432c                 | '         x+=xi
2432c     1A 31 02 31 |  if_ae	add	local06, local08
24330                 | '         y+=yi
24330     1C 33 02 31 |  if_ae	add	local07, local10
24334                 | '         d+=ai
24334     1E 41 02 31 |  if_ae	add	local14, local12
24338                 | '       else
24338                 | '         d+=bi
24338     1F 41 02 C1 |  if_b	add	local14, local13
2433c                 | '         x+=xi
2433c     1A 31 02 C1 |  if_b	add	local06, local08
24340                 | '       putpixel(x,y,c)
24340     18 13 02 F6 | 	mov	arg01, local06
24344     19 15 02 F6 | 	mov	arg02, local07
24348     17 17 02 F6 | 	mov	arg03, local05
2434c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
24350     CC FF 9F FD | 	jmp	#LR__2761
24354                 | LR__2762
24354                 | '   else
24354                 | '     ai:=(dx-dy)*2
24354     1B 3D 02 F6 | 	mov	local12, local09
24358     1D 3D 82 F1 | 	sub	local12, local11
2435c     01 3C 66 F0 | 	shl	local12, #1
24360                 | '     bi:=dx*2
24360     01 36 66 F0 | 	shl	local09, #1
24364     1B 3F 02 F6 | 	mov	local13, local09
24368                 | '     d:=bi-dy
24368     1F 41 02 F6 | 	mov	local14, local13
2436c     1D 41 82 F1 | 	sub	local14, local11
24370                 | '     repeat while (y<>y2)
24370                 | LR__2763
24370     16 33 0A F2 | 	cmp	local07, local04 wz
24374     2C 00 90 AD |  if_e	jmp	#LR__2764
24378                 | '       if (d>=0)
24378     00 40 56 F2 | 	cmps	local14, #0 wc
2437c                 | '         x+=xi
2437c     1A 31 02 31 |  if_ae	add	local06, local08
24380                 | '         y+=yi
24380     1C 33 02 31 |  if_ae	add	local07, local10
24384                 | '         d+=ai
24384     1E 41 02 31 |  if_ae	add	local14, local12
24388                 | '       else
24388                 | '         d+=bi
24388     1F 41 02 C1 |  if_b	add	local14, local13
2438c                 | '         y+=yi
2438c     1C 33 02 C1 |  if_b	add	local07, local10
24390                 | '       putpixel(x, y,c)
24390     18 13 02 F6 | 	mov	arg01, local06
24394     19 15 02 F6 | 	mov	arg02, local07
24398     17 17 02 F6 | 	mov	arg03, local05
2439c     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
243a0     CC FF 9F FD | 	jmp	#LR__2763
243a4                 | LR__2764
243a4                 | LR__2765
243a4                 | LR__2766
243a4     A7 F0 03 F6 | 	mov	ptra, fp
243a8     B2 00 A0 FD | 	call	#popregs_
243ac                 | _hg010b_spin2_draw_ret
243ac     2D 00 64 FD | 	ret
243b0                 | 
243b0                 | '  
243b0                 | ' pub fillpush(val) 
243b0                 | _hg010b_spin2_fillpush
243b0                 | ' fillstack[fillptr]:=val
243b0     0B 00 00 FF 
243b4     BA E4 05 F1 | 	add	objptr, ##5818
243b8     F2 00 02 FB | 	rdlong	_var01, objptr
243bc     02 00 66 F0 | 	shl	_var01, #2
243c0     0A 00 00 FF 
243c4     00 E4 85 F1 | 	sub	objptr, ##5120
243c8     F2 00 02 F1 | 	add	_var01, objptr
243cc     00 13 62 FC | 	wrlong	arg01, _var01
243d0                 | ' fillptr+=1   
243d0     0A 00 00 FF 
243d4     00 E4 05 F1 | 	add	objptr, ##5120
243d8     F2 00 02 FB | 	rdlong	_var01, objptr
243dc     01 00 06 F1 | 	add	_var01, #1
243e0     F2 00 62 FC | 	wrlong	_var01, objptr
243e4     0B 00 00 FF 
243e8     BA E4 85 F1 | 	sub	objptr, ##5818
243ec                 | _hg010b_spin2_fillpush_ret
243ec     2D 00 64 FD | 	ret
243f0                 | 
243f0                 | ' 
243f0                 | '     
243f0                 | ' pub fillpop() : val
243f0                 | _hg010b_spin2_fillpop
243f0                 | ' 
243f0                 | ' fillptr-=1
243f0     0B 00 00 FF 
243f4     BA E4 05 F1 | 	add	objptr, ##5818
243f8     F2 FA 01 FB | 	rdlong	result1, objptr
243fc     01 FA 85 F1 | 	sub	result1, #1
24400     F2 FA 61 FC | 	wrlong	result1, objptr
24404                 | ' if fillptr<0
24404     0B 00 00 FF 
24408     BA E4 85 F1 | 	sub	objptr, ##5818
2440c     00 FA 55 F2 | 	cmps	result1, #0 wc
24410                 | '   fillptr:=0
24410     0B 00 00 CF 
24414     BA E4 05 C1 |  if_b	add	objptr, ##5818
24418     F2 00 68 CC |  if_b	wrlong	#0, objptr
2441c     0B 00 00 CF 
24420     BA E4 85 C1 |  if_b	sub	objptr, ##5818
24424                 | '   val:=-12345
24424     E7 FF 7F CF 
24428     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
2442c     28 00 90 CD |  if_b	jmp	#LR__2770
24430                 | ' else 
24430                 | '   val:=fillstack[fillptr]
24430     0B 00 00 FF 
24434     BA E4 05 F1 | 	add	objptr, ##5818
24438     F2 00 02 FB | 	rdlong	_var01, objptr
2443c     02 00 66 F0 | 	shl	_var01, #2
24440     0A 00 00 FF 
24444     00 E4 85 F1 | 	sub	objptr, ##5120
24448     F2 00 02 F1 | 	add	_var01, objptr
2444c     00 01 02 FB | 	rdlong	_var01, _var01
24450     01 00 00 FF 
24454     BA E4 85 F1 | 	sub	objptr, ##698
24458                 | LR__2770
24458                 | ' return val
24458     00 FB 01 F6 | 	mov	result1, _var01
2445c                 | _hg010b_spin2_fillpop_ret
2445c     2D 00 64 FD | 	ret
24460                 | 
24460                 | ' 
24460                 | '       
24460                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
24460                 | _hg010b_spin2_fill
24460     0B 4A 05 F6 | 	mov	COUNT_, #11
24464     A8 00 A0 FD | 	call	#pushregs_
24468                 | ' 
24468                 | ' newcolor:=newcolor & 255
24468     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
2446c                 | ' oldcolor:=oldcolor & 255
2446c     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
24470                 | ' 
24470                 | ' if (oldcolor == newcolor) 
24470     13 29 0A F2 | 	cmp	local02, local01 wz
24474                 | '   return
24474     70 02 90 AD |  if_e	jmp	#LR__2789
24478                 | ' 
24478                 | ' fillptr:=0
24478     0B 00 00 FF 
2447c     BA E4 05 F1 | 	add	objptr, ##5818
24480     F2 00 68 FC | 	wrlong	#0, objptr
24484                 | ' fillmax:=0
24484     04 E4 05 F1 | 	add	objptr, #4
24488     F2 00 68 FC | 	wrlong	#0, objptr
2448c     0B 00 00 FF 
24490     BE E4 85 F1 | 	sub	objptr, ##5822
24494                 | ' fillpush(x)
24494     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
24498                 | ' fillpush(y)
24498     0A 13 02 F6 | 	mov	arg01, arg02
2449c     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
244a0                 | ' y:=fillpop()
244a0     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
244a4     FD 2A 02 F6 | 	mov	local03, result1
244a8                 | ' x:=fillpop()
244a8     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
244ac     FD 2C 02 F6 | 	mov	local04, result1
244b0                 | ' 'pinhigh(38)
244b0                 | ' repeat while (x>-1)       
244b0                 | LR__2780
244b0     00 2C 56 F2 | 	cmps	local04, #0 wc
244b4     30 02 90 CD |  if_b	jmp	#LR__2788
244b8                 | '  ' pintoggle(39)
244b8                 | '   x1 := x
244b8     16 2F 02 F6 | 	mov	local05, local04
244bc                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
244bc                 | LR__2781
244bc     00 30 06 F6 | 	mov	local06, #0
244c0     00 32 06 F6 | 	mov	local07, #0
244c4     00 2E 56 F2 | 	cmps	local05, #0 wc
244c8     01 32 66 36 |  if_ae	neg	local07, #1
244cc     00 32 0E F2 | 	cmp	local07, #0 wz
244d0     00 30 26 56 |  if_ne	not	local06, #0
244d4     00 34 06 F6 | 	mov	local08, #0
244d8     00 36 06 F6 | 	mov	local09, #0
244dc     15 15 02 F6 | 	mov	arg02, local03
244e0     17 13 02 F6 | 	mov	arg01, local05
244e4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
244e8     14 FB 09 F2 | 	cmp	result1, local02 wz
244ec     00 36 26 A6 |  if_e	not	local09, #0
244f0     00 36 0E F2 | 	cmp	local09, #0 wz
244f4     00 34 26 56 |  if_ne	not	local08, #0
244f8     1A 31 CA F7 | 	test	local06, local08 wz
244fc                 | '     x1--
244fc     01 2E 86 51 |  if_ne	sub	local05, #1
24500     B8 FF 9F 5D |  if_ne	jmp	#LR__2781
24504                 | '   x1++
24504     01 2E 06 F1 | 	add	local05, #1
24508                 | '   spanabove := 0
24508     00 38 06 F6 | 	mov	local10, #0
2450c                 | '   spanbelow := 0
2450c     00 3A 06 F6 | 	mov	local11, #0
24510                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
24510                 | LR__2782
24510     00 30 06 F6 | 	mov	local06, #0
24514     02 00 00 FF 
24518     00 2E 56 F2 | 	cmps	local05, ##1024 wc
2451c     00 30 26 C6 |  if_b	not	local06, #0
24520     00 34 06 F6 | 	mov	local08, #0
24524     00 36 06 F6 | 	mov	local09, #0
24528     15 15 02 F6 | 	mov	arg02, local03
2452c     17 13 02 F6 | 	mov	arg01, local05
24530     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
24534     14 FB 09 F2 | 	cmp	result1, local02 wz
24538     00 36 26 A6 |  if_e	not	local09, #0
2453c     00 36 0E F2 | 	cmp	local09, #0 wz
24540     00 34 26 56 |  if_ne	not	local08, #0
24544     1A 31 CA F7 | 	test	local06, local08 wz
24548     88 01 90 AD |  if_e	jmp	#LR__2787
2454c                 | '     putpixel2 (x1,y, newcolor & 255)
2454c     13 17 E2 F8 | 	getbyte	arg03, local01, #0
24550     17 13 02 F6 | 	mov	arg01, local05
24554     15 15 02 F6 | 	mov	arg02, local03
24558     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
2455c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
2455c     00 30 06 F6 | 	mov	local06, #0
24560     00 32 06 F6 | 	mov	local07, #0
24564     00 38 0E F2 | 	cmp	local10, #0 wz
24568     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
2456c     01 32 66 26 |  if_nc_and_z	neg	local07, #1
24570     00 32 0E F2 | 	cmp	local07, #0 wz
24574     00 30 26 56 |  if_ne	not	local06, #0
24578     00 34 06 F6 | 	mov	local08, #0
2457c     00 36 06 F6 | 	mov	local09, #0
24580     15 15 02 F6 | 	mov	arg02, local03
24584     01 14 86 F1 | 	sub	arg02, #1
24588     17 13 02 F6 | 	mov	arg01, local05
2458c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
24590     14 FB 09 F2 | 	cmp	result1, local02 wz
24594     00 36 26 A6 |  if_e	not	local09, #0
24598     00 36 0E F2 | 	cmp	local09, #0 wz
2459c     00 34 26 56 |  if_ne	not	local08, #0
245a0     1A 31 CA F7 | 	test	local06, local08 wz
245a4     1C 00 90 AD |  if_e	jmp	#LR__2783
245a8                 | '       fillpush(x1)
245a8     17 13 02 F6 | 	mov	arg01, local05
245ac     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
245b0                 | '       fillpush(y-1)
245b0     15 13 02 F6 | 	mov	arg01, local03
245b4     01 12 86 F1 | 	sub	arg01, #1
245b8     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
245bc                 | '       spanabove := 1 
245bc     01 38 06 F6 | 	mov	local10, #1
245c0     4C 00 90 FD | 	jmp	#LR__2784
245c4                 | LR__2783
245c4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
245c4     00 30 06 F6 | 	mov	local06, #0
245c8     00 32 06 F6 | 	mov	local07, #0
245cc     00 38 0E F2 | 	cmp	local10, #0 wz
245d0     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
245d4     01 32 66 16 |  if_a	neg	local07, #1
245d8     00 32 0E F2 | 	cmp	local07, #0 wz
245dc     00 30 26 56 |  if_ne	not	local06, #0
245e0     00 34 06 F6 | 	mov	local08, #0
245e4     00 36 06 F6 | 	mov	local09, #0
245e8     15 15 02 F6 | 	mov	arg02, local03
245ec     01 14 86 F1 | 	sub	arg02, #1
245f0     17 13 02 F6 | 	mov	arg01, local05
245f4     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
245f8     14 FB 09 F2 | 	cmp	result1, local02 wz
245fc     00 36 26 56 |  if_ne	not	local09, #0
24600     00 36 0E F2 | 	cmp	local09, #0 wz
24604     00 34 26 56 |  if_ne	not	local08, #0
24608     1A 31 CA F7 | 	test	local06, local08 wz
2460c                 | '       spanabove := 0 
2460c     00 38 06 56 |  if_ne	mov	local10, #0
24610                 | LR__2784
24610                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
24610     00 30 06 F6 | 	mov	local06, #0
24614     00 32 06 F6 | 	mov	local07, #0
24618     00 3A 0E F2 | 	cmp	local11, #0 wz
2461c     01 00 00 AF 
24620     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
24624     01 32 66 86 |  if_c_and_z	neg	local07, #1
24628     00 32 0E F2 | 	cmp	local07, #0 wz
2462c     00 30 26 56 |  if_ne	not	local06, #0
24630     00 34 06 F6 | 	mov	local08, #0
24634     00 36 06 F6 | 	mov	local09, #0
24638     15 15 02 F6 | 	mov	arg02, local03
2463c     01 14 06 F1 | 	add	arg02, #1
24640     17 13 02 F6 | 	mov	arg01, local05
24644     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
24648     14 FB 09 F2 | 	cmp	result1, local02 wz
2464c     00 36 26 A6 |  if_e	not	local09, #0
24650     00 36 0E F2 | 	cmp	local09, #0 wz
24654     00 34 26 56 |  if_ne	not	local08, #0
24658     1A 31 CA F7 | 	test	local06, local08 wz
2465c     1C 00 90 AD |  if_e	jmp	#LR__2785
24660                 | '       fillpush(x1)
24660     17 13 02 F6 | 	mov	arg01, local05
24664     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
24668                 | '       fillpush(y + 1)
24668     15 13 02 F6 | 	mov	arg01, local03
2466c     01 12 06 F1 | 	add	arg01, #1
24670     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
24674                 | '       spanBelow := 1
24674     01 3A 06 F6 | 	mov	local11, #1
24678     50 00 90 FD | 	jmp	#LR__2786
2467c                 | LR__2785
2467c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
2467c     00 30 06 F6 | 	mov	local06, #0
24680     00 32 06 F6 | 	mov	local07, #0
24684     00 3A 0E F2 | 	cmp	local11, #0 wz
24688     01 00 00 5F 
2468c     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
24690     01 32 66 46 |  if_c_and_nz	neg	local07, #1
24694     00 32 0E F2 | 	cmp	local07, #0 wz
24698     00 30 26 56 |  if_ne	not	local06, #0
2469c     00 34 06 F6 | 	mov	local08, #0
246a0     00 36 06 F6 | 	mov	local09, #0
246a4     15 15 02 F6 | 	mov	arg02, local03
246a8     01 14 06 F1 | 	add	arg02, #1
246ac     17 13 02 F6 | 	mov	arg01, local05
246b0     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
246b4     14 FB 09 F2 | 	cmp	result1, local02 wz
246b8     00 36 26 56 |  if_ne	not	local09, #0
246bc     00 36 0E F2 | 	cmp	local09, #0 wz
246c0     00 34 26 56 |  if_ne	not	local08, #0
246c4     1A 31 CA F7 | 	test	local06, local08 wz
246c8                 | '       spanbelow := 0
246c8     00 3A 06 56 |  if_ne	mov	local11, #0
246cc                 | LR__2786
246cc                 | '     x1++
246cc     01 2E 06 F1 | 	add	local05, #1
246d0     3C FE 9F FD | 	jmp	#LR__2782
246d4                 | LR__2787
246d4                 | '   y:=fillpop()
246d4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
246d8     FD 2A 02 F6 | 	mov	local03, result1
246dc                 | '   x:=fillpop()
246dc     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
246e0     FD 2C 02 F6 | 	mov	local04, result1
246e4     C8 FD 9F FD | 	jmp	#LR__2780
246e8                 | LR__2788
246e8                 | LR__2789
246e8     A7 F0 03 F6 | 	mov	ptra, fp
246ec     B2 00 A0 FD | 	call	#popregs_
246f0                 | _hg010b_spin2_fill_ret
246f0     2D 00 64 FD | 	ret
246f4                 | 
246f4                 | ' 'pinlow(38)    
246f4                 | ' 
246f4                 | ' '-- A filled circle -----------------------------------------------------
246f4                 | ' 
246f4                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
246f4                 | _hg010b_spin2_fcircle
246f4     08 4A 05 F6 | 	mov	COUNT_, #8
246f8     A8 00 A0 FD | 	call	#pushregs_
246fc     0B 27 02 F6 | 	mov	local01, arg03
24700     FF FF 7F FF 
24704     FE 27 06 FD | 	qmul	local01, ##-2
24708     09 29 02 F6 | 	mov	local02, arg01
2470c     0A 2B 02 F6 | 	mov	local03, arg02
24710     0C 2D 02 F6 | 	mov	local04, arg04
24714                 | ' 
24714                 | ' d:=5-4*r
24714     13 19 02 F6 | 	mov	arg04, local01
24718     02 18 66 F0 | 	shl	arg04, #2
2471c     05 2E 06 F6 | 	mov	local05, #5
24720     0C 2F 82 F1 | 	sub	local05, arg04
24724                 | ' x:=0
24724     00 30 06 F6 | 	mov	local06, #0
24728                 | ' y:=r
24728                 | ' da:=(-2*r+5)*4
24728                 | ' db:=3*4
24728     0C 32 06 F6 | 	mov	local07, #12
2472c                 | ' repeat while (x<=y) 
2472c     18 34 62 FD | 	getqx	local08
24730     05 34 06 F1 | 	add	local08, #5
24734     02 34 66 F0 | 	shl	local08, #2
24738                 | LR__2790
24738     13 31 5A F2 | 	cmps	local06, local01 wcz
2473c     B4 00 90 1D |  if_a	jmp	#LR__2792
24740                 | '   fastline(x0-x,x0+x,y0-y,c)
24740     14 13 02 F6 | 	mov	arg01, local02
24744     18 13 82 F1 | 	sub	arg01, local06
24748     14 15 02 F6 | 	mov	arg02, local02
2474c     18 15 02 F1 | 	add	arg02, local06
24750     15 17 02 F6 | 	mov	arg03, local03
24754     13 17 82 F1 | 	sub	arg03, local01
24758     16 19 02 F6 | 	mov	arg04, local04
2475c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24760                 | '   fastline(x0-x,x0+x,y0+y,c)
24760     14 13 02 F6 | 	mov	arg01, local02
24764     18 13 82 F1 | 	sub	arg01, local06
24768     14 15 02 F6 | 	mov	arg02, local02
2476c     18 15 02 F1 | 	add	arg02, local06
24770     15 17 02 F6 | 	mov	arg03, local03
24774     13 17 02 F1 | 	add	arg03, local01
24778     16 19 02 F6 | 	mov	arg04, local04
2477c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
24780                 | '   fastline(x0-y,x0+y,y0-x,c)
24780     14 13 02 F6 | 	mov	arg01, local02
24784     13 13 82 F1 | 	sub	arg01, local01
24788     14 15 02 F6 | 	mov	arg02, local02
2478c     13 15 02 F1 | 	add	arg02, local01
24790     15 17 02 F6 | 	mov	arg03, local03
24794     18 17 82 F1 | 	sub	arg03, local06
24798     16 19 02 F6 | 	mov	arg04, local04
2479c     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
247a0                 | '   fastline(x0-y,x0+y,y0+x,c)
247a0     14 13 02 F6 | 	mov	arg01, local02
247a4     13 13 82 F1 | 	sub	arg01, local01
247a8     14 15 02 F6 | 	mov	arg02, local02
247ac     13 15 02 F1 | 	add	arg02, local01
247b0     15 17 02 F6 | 	mov	arg03, local03
247b4     18 17 02 F1 | 	add	arg03, local06
247b8     16 19 02 F6 | 	mov	arg04, local04
247bc     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
247c0                 | '   if d>0 
247c0     01 2E 56 F2 | 	cmps	local05, #1 wc
247c4     18 00 90 CD |  if_b	jmp	#LR__2791
247c8                 | '     d+=da
247c8     1A 2F 02 F1 | 	add	local05, local08
247cc                 | '     y-=1
247cc     01 26 86 F1 | 	sub	local01, #1
247d0                 | '     x+=1
247d0     01 30 06 F1 | 	add	local06, #1
247d4                 | '     da+=4*4
247d4     10 34 06 F1 | 	add	local08, #16
247d8                 | '     db+=2*4
247d8     08 32 06 F1 | 	add	local07, #8
247dc     58 FF 9F FD | 	jmp	#LR__2790
247e0                 | LR__2791
247e0                 | '   else
247e0                 | '     d+=db
247e0     19 2F 02 F1 | 	add	local05, local07
247e4                 | '     x+=1
247e4     01 30 06 F1 | 	add	local06, #1
247e8                 | '     da+=2*4
247e8     08 34 06 F1 | 	add	local08, #8
247ec                 | '     db+=2*4
247ec     08 32 06 F1 | 	add	local07, #8
247f0     44 FF 9F FD | 	jmp	#LR__2790
247f4                 | LR__2792
247f4     A7 F0 03 F6 | 	mov	ptra, fp
247f8     B2 00 A0 FD | 	call	#popregs_
247fc                 | _hg010b_spin2_fcircle_ret
247fc     2D 00 64 FD | 	ret
24800                 | 
24800                 | '  
24800                 | ' '-- A circle ------------------------------------------------------------ 
24800                 | '  
24800                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
24800                 | _hg010b_spin2_circle
24800     08 4A 05 F6 | 	mov	COUNT_, #8
24804     A8 00 A0 FD | 	call	#pushregs_
24808     0B 27 02 F6 | 	mov	local01, arg03
2480c     FF FF 7F FF 
24810     FE 27 06 FD | 	qmul	local01, ##-2
24814     09 29 02 F6 | 	mov	local02, arg01
24818     0A 2B 02 F6 | 	mov	local03, arg02
2481c     0C 2D 02 F6 | 	mov	local04, arg04
24820                 | ' 
24820                 | '  
24820                 | ' d:=5-4*r
24820     13 19 02 F6 | 	mov	arg04, local01
24824     02 18 66 F0 | 	shl	arg04, #2
24828     05 2E 06 F6 | 	mov	local05, #5
2482c     0C 2F 82 F1 | 	sub	local05, arg04
24830                 | ' x:=0
24830     00 30 06 F6 | 	mov	local06, #0
24834                 | ' y:=r
24834                 | ' da:=(-2*r+5)*4
24834                 | ' db:=3*4
24834     0C 32 06 F6 | 	mov	local07, #12
24838                 | ' repeat while (x<=y) 
24838     18 34 62 FD | 	getqx	local08
2483c     05 34 06 F1 | 	add	local08, #5
24840     02 34 66 F0 | 	shl	local08, #2
24844                 | LR__2800
24844     13 31 5A F2 | 	cmps	local06, local01 wcz
24848     F4 00 90 1D |  if_a	jmp	#LR__2802
2484c                 | '   putpixel(x0-x,y0-y,c)
2484c     14 13 02 F6 | 	mov	arg01, local02
24850     18 13 82 F1 | 	sub	arg01, local06
24854     15 15 02 F6 | 	mov	arg02, local03
24858     13 15 82 F1 | 	sub	arg02, local01
2485c     16 17 02 F6 | 	mov	arg03, local04
24860     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24864                 | '   putpixel(x0-x,y0+y,c)
24864     14 13 02 F6 | 	mov	arg01, local02
24868     18 13 82 F1 | 	sub	arg01, local06
2486c     15 15 02 F6 | 	mov	arg02, local03
24870     13 15 02 F1 | 	add	arg02, local01
24874     16 17 02 F6 | 	mov	arg03, local04
24878     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
2487c                 | '   putpixel(x0+x,y0-y,c)
2487c     14 13 02 F6 | 	mov	arg01, local02
24880     18 13 02 F1 | 	add	arg01, local06
24884     15 15 02 F6 | 	mov	arg02, local03
24888     13 15 82 F1 | 	sub	arg02, local01
2488c     16 17 02 F6 | 	mov	arg03, local04
24890     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
24894                 | '   putpixel(x0+x,y0+y,c)
24894     14 13 02 F6 | 	mov	arg01, local02
24898     18 13 02 F1 | 	add	arg01, local06
2489c     15 15 02 F6 | 	mov	arg02, local03
248a0     13 15 02 F1 | 	add	arg02, local01
248a4     16 17 02 F6 | 	mov	arg03, local04
248a8     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
248ac                 | '   putpixel(x0-y,y0-x,c)
248ac     14 13 02 F6 | 	mov	arg01, local02
248b0     13 13 82 F1 | 	sub	arg01, local01
248b4     15 15 02 F6 | 	mov	arg02, local03
248b8     18 15 82 F1 | 	sub	arg02, local06
248bc     16 17 02 F6 | 	mov	arg03, local04
248c0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
248c4                 | '   putpixel(x0-y,y0+x,c)
248c4     14 13 02 F6 | 	mov	arg01, local02
248c8     13 13 82 F1 | 	sub	arg01, local01
248cc     15 15 02 F6 | 	mov	arg02, local03
248d0     18 15 02 F1 | 	add	arg02, local06
248d4     16 17 02 F6 | 	mov	arg03, local04
248d8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
248dc                 | '   putpixel(x0+y,y0-x,c)
248dc     14 13 02 F6 | 	mov	arg01, local02
248e0     13 13 02 F1 | 	add	arg01, local01
248e4     15 15 02 F6 | 	mov	arg02, local03
248e8     18 15 82 F1 | 	sub	arg02, local06
248ec     16 17 02 F6 | 	mov	arg03, local04
248f0     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
248f4                 | '   putpixel(x0+y,y0+x,c)
248f4     14 13 02 F6 | 	mov	arg01, local02
248f8     13 13 02 F1 | 	add	arg01, local01
248fc     15 15 02 F6 | 	mov	arg02, local03
24900     18 15 02 F1 | 	add	arg02, local06
24904     16 17 02 F6 | 	mov	arg03, local04
24908     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2490c                 | '   if d>0 
2490c     01 2E 56 F2 | 	cmps	local05, #1 wc
24910     18 00 90 CD |  if_b	jmp	#LR__2801
24914                 | '     d+=da
24914     1A 2F 02 F1 | 	add	local05, local08
24918                 | '     y-=1
24918     01 26 86 F1 | 	sub	local01, #1
2491c                 | '     x+=1
2491c     01 30 06 F1 | 	add	local06, #1
24920                 | '     da+=4*4
24920     10 34 06 F1 | 	add	local08, #16
24924                 | '     db+=2*4
24924     08 32 06 F1 | 	add	local07, #8
24928     18 FF 9F FD | 	jmp	#LR__2800
2492c                 | LR__2801
2492c                 | '   else
2492c                 | '     d+=db
2492c     19 2F 02 F1 | 	add	local05, local07
24930                 | '     x+=1
24930     01 30 06 F1 | 	add	local06, #1
24934                 | '     da+=2*4
24934     08 34 06 F1 | 	add	local08, #8
24938                 | '     db+=2*4
24938     08 32 06 F1 | 	add	local07, #8
2493c     04 FF 9F FD | 	jmp	#LR__2800
24940                 | LR__2802
24940     A7 F0 03 F6 | 	mov	ptra, fp
24944     B2 00 A0 FD | 	call	#popregs_
24948                 | _hg010b_spin2_circle_ret
24948     2D 00 64 FD | 	ret
2494c                 | 
2494c                 | '     
2494c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
2494c                 | ' 
2494c                 | ' pub frame(x1,y1,x2,y2,c)
2494c                 | _hg010b_spin2_frame
2494c     05 4A 05 F6 | 	mov	COUNT_, #5
24950     A8 00 A0 FD | 	call	#pushregs_
24954     09 27 02 F6 | 	mov	local01, arg01
24958     0A 29 02 F6 | 	mov	local02, arg02
2495c     0B 2B 02 F6 | 	mov	local03, arg03
24960     0C 2D 02 F6 | 	mov	local04, arg04
24964     0D 2F 02 F6 | 	mov	local05, arg05
24968                 | ' 
24968                 | ' fastline(x1,x2,y1,c)
24968     13 13 02 F6 | 	mov	arg01, local01
2496c     15 15 02 F6 | 	mov	arg02, local03
24970     14 17 02 F6 | 	mov	arg03, local02
24974     17 19 02 F6 | 	mov	arg04, local05
24978     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
2497c                 | ' fastline(x1,x2,y2,c)
2497c     13 13 02 F6 | 	mov	arg01, local01
24980     15 15 02 F6 | 	mov	arg02, local03
24984     16 17 02 F6 | 	mov	arg03, local04
24988     17 19 02 F6 | 	mov	arg04, local05
2498c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
24990                 | ' line(x1,y1,x1,y2,c)
24990     13 13 02 F6 | 	mov	arg01, local01
24994     14 15 02 F6 | 	mov	arg02, local02
24998     13 17 02 F6 | 	mov	arg03, local01
2499c     16 19 02 F6 | 	mov	arg04, local04
249a0     17 1B 02 F6 | 	mov	arg05, local05
249a4                 | ' draw(x1,y1,x2,y2,c)
249a4     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
249a8                 | ' line(x2,y1,x2,y2,c)
249a8     15 13 02 F6 | 	mov	arg01, local03
249ac     14 15 02 F6 | 	mov	arg02, local02
249b0     15 17 02 F6 | 	mov	arg03, local03
249b4     16 19 02 F6 | 	mov	arg04, local04
249b8     17 1B 02 F6 | 	mov	arg05, local05
249bc                 | ' draw(x1,y1,x2,y2,c)
249bc     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
249c0     A7 F0 03 F6 | 	mov	ptra, fp
249c4     B2 00 A0 FD | 	call	#popregs_
249c8                 | _hg010b_spin2_frame_ret
249c8     2D 00 64 FD | 	ret
249cc                 | 
249cc                 | ' 
249cc                 | ' '-- A box (a filled rectangle) ----------------------------------------
249cc                 | ' 
249cc                 | ' pub box(x1,y1,x2,y2,c) |yy
249cc                 | _hg010b_spin2_box
249cc     06 4A 05 F6 | 	mov	COUNT_, #6
249d0     A8 00 A0 FD | 	call	#pushregs_
249d4     09 27 02 F6 | 	mov	local01, arg01
249d8     0A 29 02 F6 | 	mov	local02, arg02
249dc     0B 2B 02 F6 | 	mov	local03, arg03
249e0     0C 2D 02 F6 | 	mov	local04, arg04
249e4     0D 2F 02 F6 | 	mov	local05, arg05
249e8                 | ' 
249e8                 | ' repeat yy from y1 to y2
249e8     14 2D 52 F2 | 	cmps	local04, local02 wc
249ec     01 30 86 F6 | 	negc	local06, #1
249f0     18 2D 02 F1 | 	add	local04, local06
249f4                 | LR__2810
249f4                 | '   fastline(x1,x2,yy,c)
249f4     13 13 02 F6 | 	mov	arg01, local01
249f8     15 15 02 F6 | 	mov	arg02, local03
249fc     17 19 02 F6 | 	mov	arg04, local05
24a00     14 17 02 F6 | 	mov	arg03, local02
24a04     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
24a08     18 29 02 F1 | 	add	local02, local06
24a0c     16 29 0A F2 | 	cmp	local02, local04 wz
24a10     E0 FF 9F 5D |  if_ne	jmp	#LR__2810
24a14     A7 F0 03 F6 | 	mov	ptra, fp
24a18     B2 00 A0 FD | 	call	#popregs_
24a1c                 | _hg010b_spin2_box_ret
24a1c     2D 00 64 FD | 	ret
24a20                 | 
24a20                 | '       
24a20                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
24a20                 | _hg010b_spin2_putcharxycgf
24a20                 | ' 
24a20                 | '  
24a20                 | ' repeat yy from 0 to 15
24a20     00 00 06 F6 | 	mov	_var01, #0
24a24     97 8C 48 FB | 	callpa	#(@LR__2822-@LR__2820)>>2,fcache_load_ptr_
24a28                 | LR__2820
24a28                 | ' 
24a28                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
24a28     95 E4 05 F1 | 	add	objptr, #149
24a2c     F2 02 02 FB | 	rdlong	_var02, objptr
24a30     0A 02 66 F0 | 	shl	_var02, #10
24a34     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
24a38     01 05 02 F1 | 	add	_var03, _var02
24a3c     0B 03 02 F6 | 	mov	_var02, arg03
24a40     04 02 66 F0 | 	shl	_var02, #4
24a44     01 05 02 F1 | 	add	_var03, _var02
24a48     00 05 02 F1 | 	add	_var03, _var01
24a4c     02 05 C2 FA | 	rdbyte	_var03, _var03
24a50                 | '   asm
24a50     00 04 0E F4 | 	testb	_var03, #0 wz
24a54     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
24a58     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
24a5c     01 04 0E F4 | 	testb	_var03, #1 wz
24a60     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
24a64     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
24a68     02 04 0E F4 | 	testb	_var03, #2 wz
24a6c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
24a70     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
24a74     03 04 0E F4 | 	testb	_var03, #3 wz
24a78     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
24a7c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
24a80     04 04 0E F4 | 	testb	_var03, #4 wz
24a84     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
24a88     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
24a8c     05 04 0E F4 | 	testb	_var03, #5 wz
24a90     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
24a94     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
24a98     06 04 0E F4 | 	testb	_var03, #6 wz
24a9c     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
24aa0     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
24aa4     07 04 0E F4 | 	testb	_var03, #7 wz
24aa8     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
24aac     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
24ab0                 | '   
24ab0                 | '   ccc[0]:=c1
24ab0     99 E5 05 F1 | 	add	objptr, #409
24ab4     F2 06 62 FC | 	wrlong	_var04, objptr
24ab8                 | '   ccc[1]:=c2 
24ab8     04 E4 05 F1 | 	add	objptr, #4
24abc     F2 08 62 FC | 	wrlong	_var05, objptr
24ac0                 | '   long[mailbox0][2]:=8
24ac0     49 E4 85 F1 | 	sub	objptr, #73
24ac4     F2 04 02 FB | 	rdlong	_var03, objptr
24ac8     08 04 06 F1 | 	add	_var03, #8
24acc     02 11 68 FC | 	wrlong	#8, _var03
24ad0                 | '   long[mailbox0][1]:=@ccc
24ad0     45 E4 05 F1 | 	add	objptr, #69
24ad4     F2 04 02 F6 | 	mov	_var03, objptr
24ad8     45 E4 85 F1 | 	sub	objptr, #69
24adc     F2 02 02 FB | 	rdlong	_var02, objptr
24ae0     04 02 06 F1 | 	add	_var02, #4
24ae4     01 05 62 FC | 	wrlong	_var03, _var02
24ae8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
24ae8     0C E5 85 F1 | 	sub	objptr, #268
24aec     F2 04 02 FB | 	rdlong	_var03, objptr
24af0     0A 03 02 F6 | 	mov	_var02, arg02
24af4     00 03 02 F1 | 	add	_var02, _var01
24af8     0A 02 66 F0 | 	shl	_var02, #10
24afc     09 0B 02 F6 | 	mov	_var06, arg01
24b00     02 0A 66 F0 | 	shl	_var06, #2
24b04     05 03 02 F1 | 	add	_var02, _var06
24b08     01 05 02 F1 | 	add	_var03, _var02
24b0c     00 00 78 FF 
24b10     00 04 06 F1 | 	add	_var03, ##-268435456
24b14     0C E5 05 F1 | 	add	objptr, #268
24b18     F2 0A 02 FB | 	rdlong	_var06, objptr
24b1c     05 05 62 FC | 	wrlong	_var03, _var06
24b20                 | '   repeat
24b20                 | LR__2821
24b20     F2 04 02 FB | 	rdlong	_var03, objptr
24b24     02 03 02 FB | 	rdlong	_var02, _var03
24b28     00 02 56 F2 | 	cmps	_var02, #0 wc
24b2c     F0 FF 9F CD |  if_b	jmp	#LR__2821
24b30     E9 E5 85 F1 | 	sub	objptr, #489
24b34     01 00 06 F1 | 	add	_var01, #1
24b38     10 00 56 F2 | 	cmps	_var01, #16 wc
24b3c     E8 FE 9F CD |  if_b	jmp	#LR__2820
24b40                 | LR__2822
24b40                 | _hg010b_spin2_putcharxycgf_ret
24b40     2D 00 64 FD | 	ret
24b44                 | 
24b44                 | ' 
24b44                 | ' 
24b44                 | ' '**********************************************************************r***
24b44                 | ' '                                                                        *
24b44                 | ' ' Font related functions                                                 *
24b44                 | ' '                                                                        *
24b44                 | ' '*************************************************************************
24b44                 | ' 
24b44                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
24b44                 | ' 
24b44                 | ' pub setfontfamily(afontnum)
24b44                 | _hg010b_spin2_setfontfamily
24b44                 | ' 
24b44                 | ' font_family:=afontnum
24b44     95 E4 05 F1 | 	add	objptr, #149
24b48     F2 12 62 FC | 	wrlong	arg01, objptr
24b4c     95 E4 85 F1 | 	sub	objptr, #149
24b50                 | ' 'if afontnum==8
24b50                 | ' '  font_ptr:=@amiga_font
24b50                 | ' 
24b50                 | ' if afontnum==4
24b50     04 12 0E F2 | 	cmp	arg01, #4 wz
24b54                 | '   font_ptr:=@st_font
24b54     08 00 00 AF 
24b58     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
24b5c     08 E4 05 A1 |  if_e	add	objptr, #8
24b60     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24b64     08 E4 85 A1 |  if_e	sub	objptr, #8
24b68     08 00 00 AF 
24b6c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
24b70                 | ' if afontnum==0
24b70     00 12 0E F2 | 	cmp	arg01, #0 wz
24b74                 | '   font_ptr:=@vga_font
24b74     08 E4 05 A1 |  if_e	add	objptr, #8
24b78     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
24b7c     08 E4 85 A1 |  if_e	sub	objptr, #8
24b80                 | _hg010b_spin2_setfontfamily_ret
24b80     2D 00 64 FD | 	ret
24b84                 | 
24b84                 | ' 
24b84                 | ' '*************************************************************************
24b84                 | ' '                                                                        *
24b84                 | ' '  Cursor functions                                                      *
24b84                 | ' '                                                                        *
24b84                 | ' '*************************************************************************
24b84                 | ' 
24b84                 | ' 
24b84                 | ' pub setcursorpos(x,y)
24b84                 | _hg010b_spin2_setcursorpos
24b84                 | ' 
24b84                 | ' ''---------- Set the (x,y) position of cursor
24b84                 | ' 
24b84                 | ' cursor_x:=x
24b84     3C E4 05 F1 | 	add	objptr, #60
24b88     F2 12 52 FC | 	wrword	arg01, objptr
24b8c                 | ' cursor_y:=y
24b8c     02 E4 05 F1 | 	add	objptr, #2
24b90     F2 14 42 FC | 	wrbyte	arg02, objptr
24b94                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24b94     02 E4 85 F1 | 	sub	objptr, #2
24b98     F2 14 E2 FA | 	rdword	arg02, objptr
24b9c     02 14 66 F0 | 	shl	arg02, #2
24ba0     02 E4 05 F1 | 	add	objptr, #2
24ba4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24ba8     3E E4 85 F1 | 	sub	objptr, #62
24bac     04 16 66 F0 | 	shl	arg03, #4
24bb0     04 16 06 F1 | 	add	arg03, #4
24bb4     11 12 06 F6 | 	mov	arg01, #17
24bb8     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24bbc                 | _hg010b_spin2_setcursorpos_ret
24bbc     2D 00 64 FD | 	ret
24bc0                 | 
24bc0                 | ' 
24bc0                 | ' pub setcursorx(x)
24bc0                 | _hg010b_spin2_setcursorx
24bc0                 | ' cursor_x:=x
24bc0     3C E4 05 F1 | 	add	objptr, #60
24bc4     F2 12 52 FC | 	wrword	arg01, objptr
24bc8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24bc8     F2 14 E2 FA | 	rdword	arg02, objptr
24bcc     02 14 66 F0 | 	shl	arg02, #2
24bd0     02 E4 05 F1 | 	add	objptr, #2
24bd4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24bd8     3E E4 85 F1 | 	sub	objptr, #62
24bdc     04 16 66 F0 | 	shl	arg03, #4
24be0     04 16 06 F1 | 	add	arg03, #4
24be4     11 12 06 F6 | 	mov	arg01, #17
24be8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
24bec                 | _hg010b_spin2_setcursorx_ret
24bec     2D 00 64 FD | 	ret
24bf0                 | 
24bf0                 | ' 
24bf0                 | ' pub setcursory(y) 
24bf0                 | _hg010b_spin2_setcursory
24bf0                 | ' cursor_y:=y
24bf0     3E E4 05 F1 | 	add	objptr, #62
24bf4     F2 12 42 FC | 	wrbyte	arg01, objptr
24bf8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
24bf8     02 E4 85 F1 | 	sub	objptr, #2
24bfc     F2 14 E2 FA | 	rdword	arg02, objptr
24c00     02 14 66 F0 | 	shl	arg02, #2
24c04     02 E4 05 F1 | 	add	objptr, #2
24c08     F2 16 C2 FA | 	rdbyte	arg03, objptr
24c0c     3E E4 85 F1 | 	sub	objptr, #62
24c10     04 16 66 F0 | 	shl	arg03, #4
24c14     04 16 06 F1 | 	add	arg03, #4
24c18     11 12 06 F6 | 	mov	arg01, #17
24c1c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
24c20                 | _hg010b_spin2_setcursory_ret
24c20     2D 00 64 FD | 	ret
24c24                 | 
24c24                 | ' 
24c24                 | ' '*************************************************************************
24c24                 | ' '                                                                        *
24c24                 | ' '  VBlank functions                                                      *
24c24                 | ' '                                                                        *
24c24                 | ' '*************************************************************************
24c24                 | ' 
24c24                 | ' pub waitvbl(amount) | i
24c24                 | _hg010b_spin2_waitvbl
24c24     03 4A 05 F6 | 	mov	COUNT_, #3
24c28     A8 00 A0 FD | 	call	#pushregs_
24c2c     09 27 02 F6 | 	mov	local01, arg01
24c30                 | ' 
24c30                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
24c30                 | ' 
24c30                 | ' repeat i from 1 to amount
24c30     01 28 06 F6 | 	mov	local02, #1
24c34     01 26 56 F2 | 	cmps	local01, #1 wc
24c38     01 2A 86 F6 | 	negc	local03, #1
24c3c     15 27 02 F1 | 	add	local01, local03
24c40                 | LR__2830
24c40                 | '   repeat until vblank==0
24c40                 | LR__2831
24c40     49 E4 05 F1 | 	add	objptr, #73
24c44     F2 12 0A FB | 	rdlong	arg01, objptr wz
24c48     49 E4 85 F1 | 	sub	objptr, #73
24c4c     0C 00 90 AD |  if_e	jmp	#LR__2832
24c50                 | '     waitus(100)
24c50     64 12 06 F6 | 	mov	arg01, #100
24c54     20 20 B0 FD | 	call	#__system___waitus
24c58     E4 FF 9F FD | 	jmp	#LR__2831
24c5c                 | LR__2832
24c5c                 | '   repeat until vblank==1
24c5c                 | LR__2833
24c5c     49 E4 05 F1 | 	add	objptr, #73
24c60     F2 12 02 FB | 	rdlong	arg01, objptr
24c64     49 E4 85 F1 | 	sub	objptr, #73
24c68     01 12 0E F2 | 	cmp	arg01, #1 wz
24c6c     0C 00 90 AD |  if_e	jmp	#LR__2834
24c70                 | '     waitus(100)
24c70     64 12 06 F6 | 	mov	arg01, #100
24c74     00 20 B0 FD | 	call	#__system___waitus
24c78     E0 FF 9F FD | 	jmp	#LR__2833
24c7c                 | LR__2834
24c7c     15 29 02 F1 | 	add	local02, local03
24c80     13 29 0A F2 | 	cmp	local02, local01 wz
24c84     B8 FF 9F 5D |  if_ne	jmp	#LR__2830
24c88     A7 F0 03 F6 | 	mov	ptra, fp
24c8c     B2 00 A0 FD | 	call	#popregs_
24c90                 | _hg010b_spin2_waitvbl_ret
24c90     2D 00 64 FD | 	ret
24c94                 | 
24c94                 | ' 
24c94                 | ' 
24c94                 | ' pub cls(fc,bc)   :c,i
24c94                 | _hg010b_spin2_cls
24c94     02 4A 05 F6 | 	mov	COUNT_, #2
24c98     A8 00 A0 FD | 	call	#pushregs_
24c9c     09 27 02 F6 | 	mov	local01, arg01
24ca0     0A 29 02 F6 | 	mov	local02, arg02
24ca4                 | ' 
24ca4                 | ' c:=bc
24ca4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
24ca4     DD E4 05 F1 | 	add	objptr, #221
24ca8     F2 12 02 FB | 	rdlong	arg01, objptr
24cac     A5 E4 85 F1 | 	sub	objptr, #165
24cb0     F2 16 02 FB | 	rdlong	arg03, objptr
24cb4     02 16 66 F0 | 	shl	arg03, #2
24cb8     14 15 02 F6 | 	mov	arg02, local02
24cbc     00 18 06 F6 | 	mov	arg04, #0
24cc0     01 1A 06 F6 | 	mov	arg05, #1
24cc4     0B 00 00 FF 
24cc8     94 E4 05 F1 | 	add	objptr, ##5780
24ccc     F8 10 B0 FD | 	call	#_psram_spin2_fill
24cd0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
24cd0     0B 00 00 FF 
24cd4     C8 E4 85 F1 | 	sub	objptr, ##5832
24cd8     F2 12 02 FB | 	rdlong	arg01, objptr
24cdc     04 E4 85 F1 | 	sub	objptr, #4
24ce0     F2 16 02 FB | 	rdlong	arg03, objptr
24ce4     09 17 82 F1 | 	sub	arg03, arg01
24ce8     20 14 06 F6 | 	mov	arg02, #32
24cec     00 18 06 F6 | 	mov	arg04, #0
24cf0     01 1A 06 F6 | 	mov	arg05, #1
24cf4     0B 00 00 FF 
24cf8     CC E4 05 F1 | 	add	objptr, ##5836
24cfc     C8 10 B0 FD | 	call	#_psram_spin2_fill
24d00                 | ' setwritecolors(fc,bc)
24d00                 | ' 
24d00                 | ' write_color:=ff
24d00     0B 00 00 FF 
24d04     8B E4 85 F1 | 	sub	objptr, ##5771
24d08     F2 26 62 FC | 	wrlong	local01, objptr
24d0c                 | ' write_background:=bb
24d0c     04 E4 05 F1 | 	add	objptr, #4
24d10     F2 28 62 FC | 	wrlong	local02, objptr
24d14                 | ' cursor_x:=0
24d14     09 E4 85 F1 | 	sub	objptr, #9
24d18     F2 00 58 FC | 	wrword	#0, objptr
24d1c                 | ' cursor_y:=0
24d1c     02 E4 05 F1 | 	add	objptr, #2
24d20     F2 00 48 FC | 	wrbyte	#0, objptr
24d24                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24d24     02 E4 85 F1 | 	sub	objptr, #2
24d28     F2 14 E2 FA | 	rdword	arg02, objptr
24d2c     02 14 66 F0 | 	shl	arg02, #2
24d30     02 E4 05 F1 | 	add	objptr, #2
24d34     F2 16 C2 FA | 	rdbyte	arg03, objptr
24d38     3E E4 85 F1 | 	sub	objptr, #62
24d3c     04 16 66 F0 | 	shl	arg03, #4
24d40     04 16 06 F1 | 	add	arg03, #4
24d44     11 12 06 F6 | 	mov	arg01, #17
24d48     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
24d4c                 | ' setcursorcolor(fc)
24d4c     13 13 02 F6 | 	mov	arg01, local01
24d50     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
24d54     14 FB 01 F6 | 	mov	result1, local02
24d58     00 FC 05 F6 | 	mov	result2, #0
24d5c     A7 F0 03 F6 | 	mov	ptra, fp
24d60     B2 00 A0 FD | 	call	#popregs_
24d64                 | _hg010b_spin2_cls_ret
24d64     2D 00 64 FD | 	ret
24d68                 | 
24d68                 | ' 
24d68                 | ' ''---------- Output a char at the cursor position, move the cursor 
24d68                 | ' 
24d68                 | ' pub putchar(achar) | c,x,y,l,newcpl
24d68                 | _hg010b_spin2_putchar
24d68     02 4A 05 F6 | 	mov	COUNT_, #2
24d6c     A8 00 A0 FD | 	call	#pushregs_
24d70     09 27 02 F6 | 	mov	local01, arg01
24d74                 | ' 
24d74                 | ' if achar==10
24d74     0A 26 0E F2 | 	cmp	local01, #10 wz
24d78                 | '   crlf()
24d78     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
24d7c                 | ' if achar==9
24d7c     09 26 0E F2 | 	cmp	local01, #9 wz
24d80     18 00 90 5D |  if_ne	jmp	#LR__2840
24d84                 | '   cursor_x:=(cursor_x& %11110000)+16
24d84     3C E4 05 F1 | 	add	objptr, #60
24d88     F2 16 E2 FA | 	rdword	arg03, objptr
24d8c     F0 16 06 F5 | 	and	arg03, #240
24d90     10 16 06 F1 | 	add	arg03, #16
24d94     F2 16 52 FC | 	wrword	arg03, objptr
24d98     3C E4 85 F1 | 	sub	objptr, #60
24d9c                 | LR__2840
24d9c                 | '   
24d9c                 | ' if (achar<>9) && (achar<>10) 
24d9c     09 26 0E F2 | 	cmp	local01, #9 wz
24da0     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
24da4     A8 00 90 AD |  if_e	jmp	#LR__2841
24da8                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24da8     3C E4 05 F1 | 	add	objptr, #60
24dac     F2 12 E2 FA | 	rdword	arg01, objptr
24db0     02 E4 05 F1 | 	add	objptr, #2
24db4     F2 14 C2 FA | 	rdbyte	arg02, objptr
24db8     04 14 66 F0 | 	shl	arg02, #4
24dbc     04 14 06 F1 | 	add	arg02, #4
24dc0     03 E4 05 F1 | 	add	objptr, #3
24dc4     F2 18 02 FB | 	rdlong	arg04, objptr
24dc8     04 E4 05 F1 | 	add	objptr, #4
24dcc     F2 1A 02 FB | 	rdlong	arg05, objptr
24dd0     45 E4 85 F1 | 	sub	objptr, #69
24dd4     13 17 02 F6 | 	mov	arg03, local01
24dd8     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
24ddc     04 E4 05 F1 | 	add	objptr, #4
24de0     F2 12 02 FB | 	rdlong	arg01, objptr
24de4     10 00 00 FF 
24de8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24dec     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24df0     3A E4 05 F1 | 	add	objptr, #58
24df4     F2 1A C2 FA | 	rdbyte	arg05, objptr
24df8     0D 17 02 FD | 	qmul	arg03, arg05
24dfc                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24dfc     10 00 00 FF 
24e00     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24e04     02 E4 85 F1 | 	sub	objptr, #2
24e08     F2 28 E2 FA | 	rdword	local02, objptr
24e0c     01 28 46 F0 | 	shr	local02, #1
24e10     13 15 02 F6 | 	mov	arg02, local01
24e14     01 16 06 F6 | 	mov	arg03, #1
24e18     00 18 06 F6 | 	mov	arg04, #0
24e1c     01 1A 06 F6 | 	mov	arg05, #1
24e20     0B 00 00 FF 
24e24     90 E4 05 F1 | 	add	objptr, ##5776
24e28     18 26 62 FD | 	getqx	local01
24e2c     14 27 02 F1 | 	add	local01, local02
24e30     13 13 02 F1 | 	add	arg01, local01
24e34     90 0F B0 FD | 	call	#_psram_spin2_fill
24e38                 | '   cursor_x+=2
24e38     0B 00 00 FF 
24e3c     90 E4 85 F1 | 	sub	objptr, ##5776
24e40     F2 28 E2 FA | 	rdword	local02, objptr
24e44     02 28 06 F1 | 	add	local02, #2
24e48     F2 28 52 FC | 	wrword	local02, objptr
24e4c     3C E4 85 F1 | 	sub	objptr, #60
24e50                 | LR__2841
24e50                 | ' 
24e50                 | ' if cursor_x>=256
24e50     3C E4 05 F1 | 	add	objptr, #60
24e54     F2 28 E2 FA | 	rdword	local02, objptr
24e58     3C E4 85 F1 | 	sub	objptr, #60
24e5c     00 29 56 F2 | 	cmps	local02, #256 wc
24e60     64 00 90 CD |  if_b	jmp	#LR__2843
24e64                 | '   cursor_x:=0
24e64     3C E4 05 F1 | 	add	objptr, #60
24e68     F2 00 58 FC | 	wrword	#0, objptr
24e6c                 | '   cursor_y+=1
24e6c     02 E4 05 F1 | 	add	objptr, #2
24e70     F2 28 C2 FA | 	rdbyte	local02, objptr
24e74     01 28 06 F1 | 	add	local02, #1
24e78     F2 28 42 FC | 	wrbyte	local02, objptr
24e7c                 | '   if cursor_y>st_lines-1
24e7c     C3 E4 05 F1 | 	add	objptr, #195
24e80     F2 28 02 FB | 	rdlong	local02, objptr
24e84     01 28 86 F1 | 	sub	local02, #1
24e88     C3 E4 85 F1 | 	sub	objptr, #195
24e8c     F2 16 C2 FA | 	rdbyte	arg03, objptr
24e90     3E E4 85 F1 | 	sub	objptr, #62
24e94     14 17 5A F2 | 	cmps	arg03, local02 wcz
24e98     2C 00 90 ED |  if_be	jmp	#LR__2842
24e9c                 | '     scrollup2()
24e9c     00 12 06 F6 | 	mov	arg01, #0
24ea0     01 00 00 FF 
24ea4     58 14 06 F6 | 	mov	arg02, ##600
24ea8     10 16 06 F6 | 	mov	arg03, #16
24eac     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
24eb0                 | '     cursor_y:=st_lines-1
24eb0     01 E5 05 F1 | 	add	objptr, #257
24eb4     F2 28 02 FB | 	rdlong	local02, objptr
24eb8     01 28 86 F1 | 	sub	local02, #1
24ebc     C3 E4 85 F1 | 	sub	objptr, #195
24ec0     F2 28 42 FC | 	wrbyte	local02, objptr
24ec4     3E E4 85 F1 | 	sub	objptr, #62
24ec8                 | LR__2842
24ec8                 | LR__2843
24ec8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
24ec8     3C E4 05 F1 | 	add	objptr, #60
24ecc     F2 14 E2 FA | 	rdword	arg02, objptr
24ed0     02 14 66 F0 | 	shl	arg02, #2
24ed4     02 E4 05 F1 | 	add	objptr, #2
24ed8     F2 16 C2 FA | 	rdbyte	arg03, objptr
24edc     3E E4 85 F1 | 	sub	objptr, #62
24ee0     04 16 66 F0 | 	shl	arg03, #4
24ee4     04 16 06 F1 | 	add	arg03, #4
24ee8     11 12 06 F6 | 	mov	arg01, #17
24eec     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
24ef0     A7 F0 03 F6 | 	mov	ptra, fp
24ef4     B2 00 A0 FD | 	call	#popregs_
24ef8                 | _hg010b_spin2_putchar_ret
24ef8     2D 00 64 FD | 	ret
24efc                 | 
24efc                 | '     
24efc                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
24efc                 | ' 
24efc                 | ' pub putchar2(achar) | c,x,y,l,newcpl
24efc                 | _hg010b_spin2_putchar2
24efc     02 4A 05 F6 | 	mov	COUNT_, #2
24f00     A8 00 A0 FD | 	call	#pushregs_
24f04     09 27 02 F6 | 	mov	local01, arg01
24f08                 | ' 
24f08                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
24f08     3C E4 05 F1 | 	add	objptr, #60
24f0c     F2 12 E2 FA | 	rdword	arg01, objptr
24f10     02 E4 05 F1 | 	add	objptr, #2
24f14     F2 14 C2 FA | 	rdbyte	arg02, objptr
24f18     04 14 66 F0 | 	shl	arg02, #4
24f1c     04 14 06 F1 | 	add	arg02, #4
24f20     03 E4 05 F1 | 	add	objptr, #3
24f24     F2 18 02 FB | 	rdlong	arg04, objptr
24f28     04 E4 05 F1 | 	add	objptr, #4
24f2c     F2 1A 02 FB | 	rdlong	arg05, objptr
24f30     45 E4 85 F1 | 	sub	objptr, #69
24f34     13 17 02 F6 | 	mov	arg03, local01
24f38     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
24f3c     04 E4 05 F1 | 	add	objptr, #4
24f40     F2 12 02 FB | 	rdlong	arg01, objptr
24f44     10 00 00 FF 
24f48     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
24f4c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
24f50     3A E4 05 F1 | 	add	objptr, #58
24f54     F2 1A C2 FA | 	rdbyte	arg05, objptr
24f58     0D 17 02 FD | 	qmul	arg03, arg05
24f5c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
24f5c     10 00 00 FF 
24f60     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
24f64     02 E4 85 F1 | 	sub	objptr, #2
24f68     F2 28 E2 FA | 	rdword	local02, objptr
24f6c     01 28 46 F0 | 	shr	local02, #1
24f70     13 15 02 F6 | 	mov	arg02, local01
24f74     01 16 06 F6 | 	mov	arg03, #1
24f78     00 18 06 F6 | 	mov	arg04, #0
24f7c     01 1A 06 F6 | 	mov	arg05, #1
24f80     0B 00 00 FF 
24f84     90 E4 05 F1 | 	add	objptr, ##5776
24f88     18 26 62 FD | 	getqx	local01
24f8c     14 27 02 F1 | 	add	local01, local02
24f90     13 13 02 F1 | 	add	arg01, local01
24f94     30 0E B0 FD | 	call	#_psram_spin2_fill
24f98                 | ' 
24f98                 | ' cursor_x+=2
24f98     0B 00 00 FF 
24f9c     90 E4 85 F1 | 	sub	objptr, ##5776
24fa0     F2 28 E2 FA | 	rdword	local02, objptr
24fa4     02 28 06 F1 | 	add	local02, #2
24fa8     F2 28 52 FC | 	wrword	local02, objptr
24fac                 | ' if cursor_x>=256
24fac     F2 28 E2 FA | 	rdword	local02, objptr
24fb0     3C E4 85 F1 | 	sub	objptr, #60
24fb4     00 29 56 F2 | 	cmps	local02, #256 wc
24fb8     64 00 90 CD |  if_b	jmp	#LR__2851
24fbc                 | '   cursor_x:=0
24fbc     3C E4 05 F1 | 	add	objptr, #60
24fc0     F2 00 58 FC | 	wrword	#0, objptr
24fc4                 | '   cursor_y+=1
24fc4     02 E4 05 F1 | 	add	objptr, #2
24fc8     F2 28 C2 FA | 	rdbyte	local02, objptr
24fcc     01 28 06 F1 | 	add	local02, #1
24fd0     F2 28 42 FC | 	wrbyte	local02, objptr
24fd4                 | '   if cursor_y>st_lines-1
24fd4     C3 E4 05 F1 | 	add	objptr, #195
24fd8     F2 28 02 FB | 	rdlong	local02, objptr
24fdc     01 28 86 F1 | 	sub	local02, #1
24fe0     C3 E4 85 F1 | 	sub	objptr, #195
24fe4     F2 16 C2 FA | 	rdbyte	arg03, objptr
24fe8     3E E4 85 F1 | 	sub	objptr, #62
24fec     14 17 5A F2 | 	cmps	arg03, local02 wcz
24ff0     2C 00 90 ED |  if_be	jmp	#LR__2850
24ff4                 | '     scrollup2()
24ff4     00 12 06 F6 | 	mov	arg01, #0
24ff8     01 00 00 FF 
24ffc     58 14 06 F6 | 	mov	arg02, ##600
25000     10 16 06 F6 | 	mov	arg03, #16
25004     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
25008                 | '     cursor_y:=st_lines-1
25008     01 E5 05 F1 | 	add	objptr, #257
2500c     F2 28 02 FB | 	rdlong	local02, objptr
25010     01 28 86 F1 | 	sub	local02, #1
25014     C3 E4 85 F1 | 	sub	objptr, #195
25018     F2 28 42 FC | 	wrbyte	local02, objptr
2501c     3E E4 85 F1 | 	sub	objptr, #62
25020                 | LR__2850
25020                 | LR__2851
25020                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
25020     3C E4 05 F1 | 	add	objptr, #60
25024     F2 14 E2 FA | 	rdword	arg02, objptr
25028     02 14 66 F0 | 	shl	arg02, #2
2502c     02 E4 05 F1 | 	add	objptr, #2
25030     F2 16 C2 FA | 	rdbyte	arg03, objptr
25034     3E E4 85 F1 | 	sub	objptr, #62
25038     04 16 66 F0 | 	shl	arg03, #4
2503c     04 16 06 F1 | 	add	arg03, #4
25040     11 12 06 F6 | 	mov	arg01, #17
25044     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
25048     A7 F0 03 F6 | 	mov	ptra, fp
2504c     B2 00 A0 FD | 	call	#popregs_
25050                 | _hg010b_spin2_putchar2_ret
25050     2D 00 64 FD | 	ret
25054                 | 
25054                 | ' ''--------- Output a string at the cursor position, move the cursor  
25054                 | ' 
25054                 | ' pub write(text) | iii,c,ncx,ncy
25054                 | _hg010b_spin2_write
25054     04 4A 05 F6 | 	mov	COUNT_, #4
25058     A8 00 A0 FD | 	call	#pushregs_
2505c     09 27 02 F6 | 	mov	local01, arg01
25060                 | ' 
25060                 | ' repeat iii from 0 to strsize(text)-1
25060     00 28 06 F6 | 	mov	local02, #0
25064     13 13 02 F6 | 	mov	arg01, local01
25068     09 2B 02 F6 | 	mov	local03, arg01
2506c     97 06 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
25070                 | LR__2860
25070     15 FB C9 FA | 	rdbyte	result1, local03 wz
25074     01 2A 06 51 |  if_ne	add	local03, #1
25078     F4 FF 9F 5D |  if_ne	jmp	#LR__2860
2507c                 | LR__2861
2507c     09 2B 82 F1 | 	sub	local03, arg01
25080     01 2A 86 F1 | 	sub	local03, #1
25084     00 2A 56 F2 | 	cmps	local03, #0 wc
25088     01 2C 86 F6 | 	negc	local04, #1
2508c     16 2B 02 F1 | 	add	local03, local04
25090                 | LR__2862
25090                 | '   putchar2(byte[text+iii])
25090     13 13 02 F6 | 	mov	arg01, local01
25094     14 13 02 F1 | 	add	arg01, local02
25098     09 13 C2 FA | 	rdbyte	arg01, arg01
2509c     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
250a0     16 29 02 F1 | 	add	local02, local04
250a4     15 29 0A F2 | 	cmp	local02, local03 wz
250a8     E4 FF 9F 5D |  if_ne	jmp	#LR__2862
250ac     A7 F0 03 F6 | 	mov	ptra, fp
250b0     B2 00 A0 FD | 	call	#popregs_
250b4                 | _hg010b_spin2_write_ret
250b4     2D 00 64 FD | 	ret
250b8                 | 
250b8                 | '    
250b8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
250b8                 | ' 
250b8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
250b8                 | _hg010b_spin2_scrollup2
250b8     03 4A 05 F6 | 	mov	COUNT_, #3
250bc     A8 00 A0 FD | 	call	#pushregs_
250c0                 | ' 	
250c0                 | ' repeat i from 4 to 579 
250c0     04 26 06 F6 | 	mov	local01, #4
250c4                 | LR__2870
250c4     F9 E4 05 F1 | 	add	objptr, #249
250c8     F2 1A 02 FB | 	rdlong	arg05, objptr
250cc     1C E4 85 F1 | 	sub	objptr, #28
250d0     F2 14 02 FB | 	rdlong	arg02, objptr
250d4     13 19 02 F6 | 	mov	arg04, local01
250d8     10 18 06 F1 | 	add	arg04, #16
250dc     02 18 66 F0 | 	shl	arg04, #2
250e0     14 E4 05 F1 | 	add	objptr, #20
250e4     F2 16 02 FB | 	rdlong	arg03, objptr
250e8     0B 19 02 FD | 	qmul	arg04, arg03
250ec                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
250ec     F6 03 00 FF 
250f0     00 12 06 F6 | 	mov	arg01, ##519168
250f4     0D 13 82 F1 | 	sub	arg01, arg05
250f8     02 16 66 F0 | 	shl	arg03, #2
250fc     0A 00 00 FF 
25100     DB E5 05 F1 | 	add	objptr, ##5595
25104     18 1A 62 FD | 	getqx	arg05
25108     0D 15 02 F1 | 	add	arg02, arg05
2510c     80 0B B0 FD | 	call	#_psram_spin2_read1
25110     0A 00 00 FF 
25114     D3 E5 85 F1 | 	sub	objptr, ##5587
25118     F2 1A 02 FB | 	rdlong	arg05, objptr
2511c     1C E4 85 F1 | 	sub	objptr, #28
25120     F2 14 02 FB | 	rdlong	arg02, objptr
25124     13 19 02 F6 | 	mov	arg04, local01
25128     02 18 66 F0 | 	shl	arg04, #2
2512c     14 E4 05 F1 | 	add	objptr, #20
25130     F2 16 02 FB | 	rdlong	arg03, objptr
25134     0B 19 02 FD | 	qmul	arg04, arg03
25138                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25138     F6 03 00 FF 
2513c     00 12 06 F6 | 	mov	arg01, ##519168
25140     0D 13 82 F1 | 	sub	arg01, arg05
25144     02 16 66 F0 | 	shl	arg03, #2
25148     0A 00 00 FF 
2514c     DB E5 05 F1 | 	add	objptr, ##5595
25150     18 1A 62 FD | 	getqx	arg05
25154     0D 15 02 F1 | 	add	arg02, arg05
25158     D0 0B B0 FD | 	call	#_psram_spin2_write
2515c     0B 00 00 FF 
25160     CC E4 85 F1 | 	sub	objptr, ##5836
25164     01 26 06 F1 | 	add	local01, #1
25168     01 00 00 FF 
2516c     44 26 16 F2 | 	cmp	local01, ##580 wc
25170     50 FF 9F CD |  if_b	jmp	#LR__2870
25174                 | ' 
25174                 | ' repeat i from 580 to 599
25174     01 00 00 FF 
25178     44 26 06 F6 | 	mov	local01, ##580
2517c                 | LR__2871
2517c                 | '    fastline(0,1023,i,write_background)   
2517c     45 E4 05 F1 | 	add	objptr, #69
25180     F2 18 02 FB | 	rdlong	arg04, objptr
25184     45 E4 85 F1 | 	sub	objptr, #69
25188     00 12 06 F6 | 	mov	arg01, #0
2518c     09 14 CE F9 | 	bmask	arg02, #9
25190     13 17 02 F6 | 	mov	arg03, local01
25194     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
25198     01 26 06 F1 | 	add	local01, #1
2519c     01 00 00 FF 
251a0     58 26 16 F2 | 	cmp	local01, ##600 wc
251a4     D4 FF 9F CD |  if_b	jmp	#LR__2871
251a8                 | ' repeat i from 0 to 3
251a8     00 26 06 F6 | 	mov	local01, #0
251ac                 | LR__2872
251ac                 | '    fastline(0,1023,i,write_background)      
251ac     45 E4 05 F1 | 	add	objptr, #69
251b0     F2 18 02 FB | 	rdlong	arg04, objptr
251b4     45 E4 85 F1 | 	sub	objptr, #69
251b8     00 12 06 F6 | 	mov	arg01, #0
251bc     09 14 CE F9 | 	bmask	arg02, #9
251c0     13 17 02 F6 | 	mov	arg03, local01
251c4     90 EF BF FD | 	call	#_hg010b_spin2_fastline
251c8     01 26 06 F1 | 	add	local01, #1
251cc     04 26 56 F2 | 	cmps	local01, #4 wc
251d0     D8 FF 9F CD |  if_b	jmp	#LR__2872
251d4                 | ' 
251d4                 | ' repeat i from 0 to 35
251d4     00 26 06 F6 | 	mov	local01, #0
251d8                 | LR__2873
251d8     13 1B 02 F6 | 	mov	arg05, local01
251dc     01 1A 06 F1 | 	add	arg05, #1
251e0     10 00 00 FF 
251e4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
251e8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
251ec     0B 1B 02 FD | 	qmul	arg05, arg03
251f0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
251f0     F6 03 00 FF 
251f4     00 12 06 F6 | 	mov	arg01, ##519168
251f8     F9 E4 05 F1 | 	add	objptr, #249
251fc     F2 1A 02 FB | 	rdlong	arg05, objptr
25200     0D 13 82 F1 | 	sub	arg01, arg05
25204     F5 E4 85 F1 | 	sub	objptr, #245
25208     F2 14 02 FB | 	rdlong	arg02, objptr
2520c     10 00 00 FF 
25210     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25214     0B 00 00 FF 
25218     C8 E4 05 F1 | 	add	objptr, ##5832
2521c     18 1A 62 FD | 	getqx	arg05
25220     0D 15 02 F1 | 	add	arg02, arg05
25224     68 0A B0 FD | 	call	#_psram_spin2_read1
25228     10 00 00 FF 
2522c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25230     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
25234     0B 27 02 FD | 	qmul	local01, arg03
25238                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
25238     F6 03 00 FF 
2523c     00 12 06 F6 | 	mov	arg01, ##519168
25240     0A 00 00 FF 
25244     D3 E5 85 F1 | 	sub	objptr, ##5587
25248     F2 1A 02 FB | 	rdlong	arg05, objptr
2524c     0D 13 82 F1 | 	sub	arg01, arg05
25250     F5 E4 85 F1 | 	sub	objptr, #245
25254     F2 14 02 FB | 	rdlong	arg02, objptr
25258     10 00 00 FF 
2525c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
25260     0B 00 00 FF 
25264     C8 E4 05 F1 | 	add	objptr, ##5832
25268     18 1A 62 FD | 	getqx	arg05
2526c     0D 15 02 F1 | 	add	arg02, arg05
25270     B8 0A B0 FD | 	call	#_psram_spin2_write
25274     0B 00 00 FF 
25278     CC E4 85 F1 | 	sub	objptr, ##5836
2527c     01 26 06 F1 | 	add	local01, #1
25280     24 26 56 F2 | 	cmps	local01, #36 wc
25284     50 FF 9F CD |  if_b	jmp	#LR__2873
25288                 | ' repeat i from 0 to timings[7]-1
25288     00 26 06 F6 | 	mov	local01, #0
2528c     10 00 00 FF 
25290     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
25294     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
25298     10 00 00 FF 
2529c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
252a0     01 28 86 F1 | 	sub	local02, #1
252a4     00 28 56 F2 | 	cmps	local02, #0 wc
252a8     01 2A 86 F6 | 	negc	local03, #1
252ac     15 29 02 F1 | 	add	local02, local03
252b0                 | LR__2874
252b0                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
252b0     04 E4 05 F1 | 	add	objptr, #4
252b4     F2 12 02 FB | 	rdlong	arg01, objptr
252b8     10 00 00 FF 
252bc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
252c0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
252c4     10 00 00 FF 
252c8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
252cc     0D 19 02 F6 | 	mov	arg04, arg05
252d0     03 18 66 F0 | 	shl	arg04, #3
252d4     0D 19 02 F1 | 	add	arg04, arg05
252d8     02 18 66 F0 | 	shl	arg04, #2
252dc     13 19 02 F1 | 	add	arg04, local01
252e0     0C 13 02 F1 | 	add	arg01, arg04
252e4     20 14 06 F6 | 	mov	arg02, #32
252e8     01 16 06 F6 | 	mov	arg03, #1
252ec     00 18 06 F6 | 	mov	arg04, #0
252f0     01 1A 06 F6 | 	mov	arg05, #1
252f4     0B 00 00 FF 
252f8     C8 E4 05 F1 | 	add	objptr, ##5832
252fc     C8 0A B0 FD | 	call	#_psram_spin2_fill
25300     0B 00 00 FF 
25304     CC E4 85 F1 | 	sub	objptr, ##5836
25308     15 27 02 F1 | 	add	local01, local03
2530c     14 27 0A F2 | 	cmp	local01, local02 wz
25310     9C FF 9F 5D |  if_ne	jmp	#LR__2874
25314     A7 F0 03 F6 | 	mov	ptra, fp
25318     B2 00 A0 FD | 	call	#popregs_
2531c                 | _hg010b_spin2_scrollup2_ret
2531c     2D 00 64 FD | 	ret
25320                 | 
25320                 | '  
25320                 | ' ''----------- Scroll the screen one line down 
25320                 | ' 
25320                 | ' pub scrolldown(start=0) | i
25320                 | _hg010b_spin2_scrolldown
25320     05 4A 05 F6 | 	mov	COUNT_, #5
25324     A8 00 A0 FD | 	call	#pushregs_
25328     09 27 02 F6 | 	mov	local01, arg01
2532c                 | ' 
2532c                 | ' repeat i from 579 to (start*16)+4
2532c     01 00 00 FF 
25330     43 28 06 F6 | 	mov	local02, ##579
25334     13 2B 02 F6 | 	mov	local03, local01
25338     04 2A 66 F0 | 	shl	local03, #4
2533c     04 2A 06 F1 | 	add	local03, #4
25340     01 00 00 FF 
25344     43 2A 56 F2 | 	cmps	local03, ##579 wc
25348     01 2C 86 F6 | 	negc	local04, #1
2534c     16 2F 02 F6 | 	mov	local05, local04
25350     16 2B 02 F1 | 	add	local03, local04
25354                 | LR__2880
25354     F9 E4 05 F1 | 	add	objptr, #249
25358     F2 2C 02 FB | 	rdlong	local04, objptr
2535c     1C E4 85 F1 | 	sub	objptr, #28
25360     F2 14 02 FB | 	rdlong	arg02, objptr
25364     14 1B 02 F6 | 	mov	arg05, local02
25368     02 1A 66 F0 | 	shl	arg05, #2
2536c     14 E4 05 F1 | 	add	objptr, #20
25370     F2 16 02 FB | 	rdlong	arg03, objptr
25374     0B 1B 02 FD | 	qmul	arg05, arg03
25378                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
25378     F6 03 00 FF 
2537c     00 12 06 F6 | 	mov	arg01, ##519168
25380     16 13 82 F1 | 	sub	arg01, local04
25384     02 16 66 F0 | 	shl	arg03, #2
25388     0A 00 00 FF 
2538c     DB E5 05 F1 | 	add	objptr, ##5595
25390     18 2C 62 FD | 	getqx	local04
25394     16 15 02 F1 | 	add	arg02, local04
25398     F4 08 B0 FD | 	call	#_psram_spin2_read1
2539c     0A 00 00 FF 
253a0     D3 E5 85 F1 | 	sub	objptr, ##5587
253a4     F2 2C 02 FB | 	rdlong	local04, objptr
253a8     1C E4 85 F1 | 	sub	objptr, #28
253ac     F2 14 02 FB | 	rdlong	arg02, objptr
253b0     14 1B 02 F6 | 	mov	arg05, local02
253b4     10 1A 06 F1 | 	add	arg05, #16
253b8     02 1A 66 F0 | 	shl	arg05, #2
253bc     14 E4 05 F1 | 	add	objptr, #20
253c0     F2 16 02 FB | 	rdlong	arg03, objptr
253c4     0B 1B 02 FD | 	qmul	arg05, arg03
253c8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
253c8     F6 03 00 FF 
253cc     00 12 06 F6 | 	mov	arg01, ##519168
253d0     16 13 82 F1 | 	sub	arg01, local04
253d4     02 16 66 F0 | 	shl	arg03, #2
253d8     0A 00 00 FF 
253dc     DB E5 05 F1 | 	add	objptr, ##5595
253e0     18 2C 62 FD | 	getqx	local04
253e4     16 15 02 F1 | 	add	arg02, local04
253e8     40 09 B0 FD | 	call	#_psram_spin2_write
253ec     0B 00 00 FF 
253f0     CC E4 85 F1 | 	sub	objptr, ##5836
253f4     17 29 02 F1 | 	add	local02, local05
253f8     15 29 0A F2 | 	cmp	local02, local03 wz
253fc     54 FF 9F 5D |  if_ne	jmp	#LR__2880
25400                 | ' 
25400                 | ' repeat i from (start*16)+4 to (start*16)+19
25400     13 29 02 F6 | 	mov	local02, local01
25404     04 28 66 F0 | 	shl	local02, #4
25408     04 28 06 F1 | 	add	local02, #4
2540c     13 2F 02 F6 | 	mov	local05, local01
25410     04 2E 66 F0 | 	shl	local05, #4
25414     13 2E 06 F1 | 	add	local05, #19
25418     13 2D 02 F6 | 	mov	local04, local01
2541c     04 2C 66 F0 | 	shl	local04, #4
25420     04 2C 06 F1 | 	add	local04, #4
25424     16 2F 52 F2 | 	cmps	local05, local04 wc
25428     01 2C 86 F6 | 	negc	local04, #1
2542c     16 2B 02 F6 | 	mov	local03, local04
25430     16 2F 02 F1 | 	add	local05, local04
25434                 | LR__2881
25434                 | '    fastline(0,1023,i,write_background)    
25434     45 E4 05 F1 | 	add	objptr, #69
25438     F2 18 02 FB | 	rdlong	arg04, objptr
2543c     45 E4 85 F1 | 	sub	objptr, #69
25440     00 12 06 F6 | 	mov	arg01, #0
25444     09 14 CE F9 | 	bmask	arg02, #9
25448     14 17 02 F6 | 	mov	arg03, local02
2544c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
25450     15 29 02 F1 | 	add	local02, local03
25454     17 29 0A F2 | 	cmp	local02, local05 wz
25458     D8 FF 9F 5D |  if_ne	jmp	#LR__2881
2545c                 | '    
2545c                 | ' repeat i from 35 to start
2545c     23 28 06 F6 | 	mov	local02, #35
25460     23 26 56 F2 | 	cmps	local01, #35 wc
25464     01 2C 86 F6 | 	negc	local04, #1
25468     13 2F 02 F6 | 	mov	local05, local01
2546c     16 2F 02 F1 | 	add	local05, local04
25470                 | LR__2882
25470                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
25470     F6 03 00 FF 
25474     00 12 06 F6 | 	mov	arg01, ##519168
25478     F9 E4 05 F1 | 	add	objptr, #249
2547c     F2 2A 02 FB | 	rdlong	local03, objptr
25480     15 13 82 F1 | 	sub	arg01, local03
25484     F5 E4 85 F1 | 	sub	objptr, #245
25488     F2 14 02 FB | 	rdlong	arg02, objptr
2548c     14 2B 02 F6 | 	mov	local03, local02
25490     07 2A 66 F0 | 	shl	local03, #7
25494     15 15 02 F1 | 	add	arg02, local03
25498     80 16 06 F6 | 	mov	arg03, #128
2549c     0B 00 00 FF 
254a0     C8 E4 05 F1 | 	add	objptr, ##5832
254a4     E8 07 B0 FD | 	call	#_psram_spin2_read1
254a8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
254a8     F6 03 00 FF 
254ac     00 12 06 F6 | 	mov	arg01, ##519168
254b0     0A 00 00 FF 
254b4     D3 E5 85 F1 | 	sub	objptr, ##5587
254b8     F2 2A 02 FB | 	rdlong	local03, objptr
254bc     15 13 82 F1 | 	sub	arg01, local03
254c0     F5 E4 85 F1 | 	sub	objptr, #245
254c4     F2 14 02 FB | 	rdlong	arg02, objptr
254c8     14 2B 02 F6 | 	mov	local03, local02
254cc     01 2A 06 F1 | 	add	local03, #1
254d0     07 2A 66 F0 | 	shl	local03, #7
254d4     15 15 02 F1 | 	add	arg02, local03
254d8     80 16 06 F6 | 	mov	arg03, #128
254dc     0B 00 00 FF 
254e0     C8 E4 05 F1 | 	add	objptr, ##5832
254e4     44 08 B0 FD | 	call	#_psram_spin2_write
254e8     0B 00 00 FF 
254ec     CC E4 85 F1 | 	sub	objptr, ##5836
254f0     16 29 02 F1 | 	add	local02, local04
254f4     17 29 0A F2 | 	cmp	local02, local05 wz
254f8     74 FF 9F 5D |  if_ne	jmp	#LR__2882
254fc                 | ' repeat i from 0 to 127
254fc     00 28 06 F6 | 	mov	local02, #0
25500                 | LR__2883
25500                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
25500     04 E4 05 F1 | 	add	objptr, #4
25504     F2 12 02 FB | 	rdlong	arg01, objptr
25508     13 2F 02 F6 | 	mov	local05, local01
2550c     07 2E 66 F0 | 	shl	local05, #7
25510     17 13 02 F1 | 	add	arg01, local05
25514     14 13 02 F1 | 	add	arg01, local02
25518     20 14 06 F6 | 	mov	arg02, #32
2551c     01 16 06 F6 | 	mov	arg03, #1
25520     00 18 06 F6 | 	mov	arg04, #0
25524     01 1A 06 F6 | 	mov	arg05, #1
25528     0B 00 00 FF 
2552c     C8 E4 05 F1 | 	add	objptr, ##5832
25530     94 08 B0 FD | 	call	#_psram_spin2_fill
25534     0B 00 00 FF 
25538     CC E4 85 F1 | 	sub	objptr, ##5836
2553c     01 28 06 F1 | 	add	local02, #1
25540     80 28 56 F2 | 	cmps	local02, #128 wc
25544     B8 FF 9F CD |  if_b	jmp	#LR__2883
25548     A7 F0 03 F6 | 	mov	ptra, fp
2554c     B2 00 A0 FD | 	call	#popregs_
25550                 | _hg010b_spin2_scrolldown_ret
25550     2D 00 64 FD | 	ret
25554                 | 
25554                 | ' 
25554                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
25554                 | ' 
25554                 | ' pub crlf()
25554                 | _hg010b_spin2_crlf
25554                 | ' 
25554                 | ' cursor_x:=leading_spaces*2
25554     01 00 00 FF 
25558     B6 E4 05 F1 | 	add	objptr, ##694
2555c     F2 16 02 FB | 	rdlong	arg03, objptr
25560     01 16 66 F0 | 	shl	arg03, #1
25564     01 00 00 FF 
25568     7A E4 85 F1 | 	sub	objptr, ##634
2556c     F2 16 52 FC | 	wrword	arg03, objptr
25570                 | ' cursor_y+=1
25570     02 E4 05 F1 | 	add	objptr, #2
25574     F2 16 C2 FA | 	rdbyte	arg03, objptr
25578     01 16 06 F1 | 	add	arg03, #1
2557c     F2 16 42 FC | 	wrbyte	arg03, objptr
25580                 | ' if cursor_y>st_lines-1
25580     C3 E4 05 F1 | 	add	objptr, #195
25584     F2 16 02 FB | 	rdlong	arg03, objptr
25588     01 16 86 F1 | 	sub	arg03, #1
2558c     C3 E4 85 F1 | 	sub	objptr, #195
25590     F2 14 C2 FA | 	rdbyte	arg02, objptr
25594     3E E4 85 F1 | 	sub	objptr, #62
25598     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
2559c     2C 00 90 ED |  if_be	jmp	#LR__2890
255a0                 | '   scrollup2()
255a0     00 12 06 F6 | 	mov	arg01, #0
255a4     01 00 00 FF 
255a8     58 14 06 F6 | 	mov	arg02, ##600
255ac     10 16 06 F6 | 	mov	arg03, #16
255b0     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
255b4                 | '   cursor_y:=st_lines-1
255b4     01 E5 05 F1 | 	add	objptr, #257
255b8     F2 16 02 FB | 	rdlong	arg03, objptr
255bc     01 16 86 F1 | 	sub	arg03, #1
255c0     C3 E4 85 F1 | 	sub	objptr, #195
255c4     F2 16 42 FC | 	wrbyte	arg03, objptr
255c8     3E E4 85 F1 | 	sub	objptr, #62
255cc                 | LR__2890
255cc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
255cc     3C E4 05 F1 | 	add	objptr, #60
255d0     F2 14 E2 FA | 	rdword	arg02, objptr
255d4     02 14 66 F0 | 	shl	arg02, #2
255d8     02 E4 05 F1 | 	add	objptr, #2
255dc     F2 16 C2 FA | 	rdbyte	arg03, objptr
255e0     3E E4 85 F1 | 	sub	objptr, #62
255e4     04 16 66 F0 | 	shl	arg03, #4
255e8     04 16 06 F1 | 	add	arg03, #4
255ec     11 12 06 F6 | 	mov	arg01, #17
255f0     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
255f4                 | _hg010b_spin2_crlf_ret
255f4     2D 00 64 FD | 	ret
255f8                 | 
255f8                 | ' 
255f8                 | ' 
255f8                 | ' '*************************************************************************
255f8                 | ' '                                                                        *
255f8                 | ' '  Conversions                                                           *
255f8                 | ' '                                                                        *
255f8                 | ' '*************************************************************************
255f8                 | ' 
255f8                 | ' ''---------- Convert a integer to dec string, return a pointer
255f8                 | ' 
255f8                 | ' pub inttostr(i):result |q,pos,k,j
255f8                 | _hg010b_spin2_inttostr
255f8     03 4A 05 F6 | 	mov	COUNT_, #3
255fc     A8 00 A0 FD | 	call	#pushregs_
25600     09 27 0A F6 | 	mov	local01, arg01 wz
25604                 | ' 
25604                 | ' j:=i
25604                 | ' pos:=10
25604     0A 28 06 F6 | 	mov	local02, #10
25608                 | ' k:=0
25608     00 2A 06 F6 | 	mov	local03, #0
2560c                 | ' 
2560c                 | ' if (j==0)
2560c     18 00 90 5D |  if_ne	jmp	#LR__2900
25610                 | '   n_string[0]:=48
25610     4D E4 05 F1 | 	add	objptr, #77
25614     F2 60 48 FC | 	wrbyte	#48, objptr
25618                 | '   n_string[1]:=0
25618     01 E4 05 F1 | 	add	objptr, #1
2561c     F2 00 48 FC | 	wrbyte	#0, objptr
25620     4E E4 85 F1 | 	sub	objptr, #78
25624     C4 00 90 FD | 	jmp	#LR__2907
25628                 | LR__2900
25628                 | ' 
25628                 | ' else
25628                 | '   if (j<0)
25628     13 27 52 F6 | 	abs	local01, local01 wc
2562c                 | '     j:=0-j
2562c                 | '     k:=45
2562c     2D 2A 06 C6 |  if_b	mov	local03, #45
25630                 | ' 
25630                 | '   n_string[11]:=0
25630     58 E4 05 F1 | 	add	objptr, #88
25634     F2 00 48 FC | 	wrbyte	#0, objptr
25638     58 E4 85 F1 | 	sub	objptr, #88
2563c     97 24 48 FB | 	callpa	#(@LR__2902-@LR__2901)>>2,fcache_load_ptr_
25640                 | '   repeat while (pos>-1)
25640                 | LR__2901
25640     00 28 56 F2 | 	cmps	local02, #0 wc
25644     40 00 90 CD |  if_b	jmp	#LR__2903
25648     13 FB 51 F6 | 	abs	result1, local01 wc
2564c     0A FA 15 FD | 	qdiv	result1, #10
25650                 | '     q:=j//10
25650     19 FA 61 FD | 	getqy	result1
25654     FD FA 81 F6 | 	negc	result1, result1
25658     13 27 52 F6 | 	abs	local01, local01 wc
2565c     0A 26 16 FD | 	qdiv	local01, #10
25660                 | '     q:=48+q
25660     30 FA 05 F1 | 	add	result1, #48
25664                 | '     n_string[pos]:=q
25664     14 27 02 F6 | 	mov	local01, local02
25668     4D E4 05 F1 | 	add	objptr, #77
2566c     F2 26 02 F1 | 	add	local01, objptr
25670     13 FB 41 FC | 	wrbyte	result1, local01
25674                 | '     j:=j/10
25674     4D E4 85 F1 | 	sub	objptr, #77
25678                 | '     pos-=1
25678     01 28 86 F1 | 	sub	local02, #1
2567c     18 26 62 FD | 	getqx	local01
25680     13 27 82 F6 | 	negc	local01, local01
25684     B8 FF 9F FD | 	jmp	#LR__2901
25688                 | LR__2902
25688                 | LR__2903
25688                 | '   repeat while n_string[0]==48
25688                 | LR__2904
25688     4D E4 05 F1 | 	add	objptr, #77
2568c     F2 16 C2 FA | 	rdbyte	arg03, objptr
25690     4D E4 85 F1 | 	sub	objptr, #77
25694     30 16 0E F2 | 	cmp	arg03, #48 wz
25698     20 00 90 5D |  if_ne	jmp	#LR__2905
2569c                 | '     bytemove(@n_string,@n_string+1,12)
2569c     4D E4 05 F1 | 	add	objptr, #77
256a0     F2 12 02 F6 | 	mov	arg01, objptr
256a4     F2 14 02 F6 | 	mov	arg02, objptr
256a8     4D E4 85 F1 | 	sub	objptr, #77
256ac     01 14 06 F1 | 	add	arg02, #1
256b0     0C 16 06 F6 | 	mov	arg03, #12
256b4     80 11 B0 FD | 	call	#__system____builtin_memmove
256b8     CC FF 9F FD | 	jmp	#LR__2904
256bc                 | LR__2905
256bc                 | ' 
256bc                 | '   if k==45
256bc     2D 2A 0E F2 | 	cmp	local03, #45 wz
256c0     28 00 90 5D |  if_ne	jmp	#LR__2906
256c4                 | '      bytemove(@n_string+1,@n_string,12)
256c4     4D E4 05 F1 | 	add	objptr, #77
256c8     F2 12 02 F6 | 	mov	arg01, objptr
256cc     01 12 06 F1 | 	add	arg01, #1
256d0     F2 14 02 F6 | 	mov	arg02, objptr
256d4     4D E4 85 F1 | 	sub	objptr, #77
256d8     0C 16 06 F6 | 	mov	arg03, #12
256dc     58 11 B0 FD | 	call	#__system____builtin_memmove
256e0                 | '      n_string[0]:=k
256e0     4D E4 05 F1 | 	add	objptr, #77
256e4     F2 2A 42 FC | 	wrbyte	local03, objptr
256e8     4D E4 85 F1 | 	sub	objptr, #77
256ec                 | LR__2906
256ec                 | LR__2907
256ec                 | ' 
256ec                 | ' q:=@n_string
256ec     4D E4 05 F1 | 	add	objptr, #77
256f0     F2 FA 01 F6 | 	mov	result1, objptr
256f4     4D E4 85 F1 | 	sub	objptr, #77
256f8                 | ' return q
256f8     A7 F0 03 F6 | 	mov	ptra, fp
256fc     B2 00 A0 FD | 	call	#popregs_
25700                 | _hg010b_spin2_inttostr_ret
25700     2D 00 64 FD | 	ret
25704                 | 
25704                 | ' 
25704                 | ' '**********************************************************************************
25704                 | ' '
25704                 | ' '        Blitting
25704                 | ' '
25704                 | ' '**********************************************************************************
25704                 | ' 
25704                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
25704                 | _hg010b_spin2_blit
25704     18 4A 05 F6 | 	mov	COUNT_, #24
25708     A8 00 A0 FD | 	call	#pushregs_
2570c     09 27 02 F6 | 	mov	local01, arg01
25710     0A 29 02 F6 | 	mov	local02, arg02
25714     0B 2B 02 F6 | 	mov	local03, arg03
25718     0C 2D 02 F6 | 	mov	local04, arg04
2571c     0D 2F 02 F6 | 	mov	local05, arg05
25720     0E 31 02 F6 | 	mov	local06, arg06
25724     0F 33 02 F6 | 	mov	local07, arg07
25728     10 35 02 F6 | 	mov	local08, arg08
2572c     11 37 02 F6 | 	mov	local09, arg09
25730     12 39 02 F6 | 	mov	local10, arg10
25734                 | ' 
25734                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
25734     00 04 00 FF 
25738     00 26 56 F2 | 	cmps	local01, ##524288 wc
2573c     00 04 00 3F 
25740     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
25744     7C 01 90 CD |  if_b	jmp	#LR__2914
25748     16 29 5A F2 | 	cmps	local02, local04 wcz
2574c     14 3B 02 16 |  if_a	mov	local11, local02
25750     16 29 02 16 |  if_a	mov	local02, local04
25754     1D 2D 02 16 |  if_a	mov	local04, local11
25758     17 2B 5A F2 | 	cmps	local03, local05 wcz
2575c     15 3B 02 16 |  if_a	mov	local11, local03
25760     17 2B 02 16 |  if_a	mov	local03, local05
25764     18 2B 02 FD | 	qmul	local03, local06
25768                 | '   if x1a>x2a
25768                 | '     x1a,x2a:=x2a,x1a
25768                 | '   if y1a>y2a
25768                 | '     y1a,y2a:=y2a,y1a  
25768     1D 2F 02 16 |  if_a	mov	local05, local11
2576c                 | ' 
2576c                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
2576c     19 3D 02 F6 | 	mov	local12, local07
25770     14 3D 02 F1 | 	add	local12, local02
25774     18 3A 62 FD | 	getqx	local11
25778     1C 37 02 FD | 	qmul	local09, local10
2577c     1D 3D 02 F1 | 	add	local12, local11
25780     13 3F 02 F6 | 	mov	local13, local01
25784     1A 3F 02 F1 | 	add	local13, local08
25788     18 3A 62 FD | 	getqx	local11
2578c     1D 3F 02 F1 | 	add	local13, local11
25790     1F 3D 5A F2 | 	cmps	local12, local13 wcz
25794     98 00 90 ED |  if_be	jmp	#LR__2911
25798                 | '     repeat y from y1a to y2a
25798     15 41 02 F6 | 	mov	local14, local03
2579c     15 2F 52 F2 | 	cmps	local05, local03 wc
257a0     01 42 86 F6 | 	negc	local15, #1
257a4     17 45 02 F6 | 	mov	local16, local05
257a8     21 45 02 F1 | 	add	local16, local15
257ac     0B 00 00 FF 
257b0     CC E4 05 F1 | 	add	objptr, ##5836
257b4                 | LR__2910
257b4     18 41 02 FD | 	qmul	local14, local06
257b8                 | '   '    writeln(string("I am here"))
257b8                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
257b8     13 15 02 F6 | 	mov	arg02, local01
257bc     16 17 02 F6 | 	mov	arg03, local04
257c0     14 17 82 F1 | 	sub	arg03, local02
257c4     01 16 06 F1 | 	add	arg03, #1
257c8     F6 03 00 FF 
257cc     00 12 06 F6 | 	mov	arg01, ##519168
257d0     18 3E 62 FD | 	getqx	local13
257d4     1F 15 02 F1 | 	add	arg02, local13
257d8     14 15 02 F1 | 	add	arg02, local02
257dc     B0 04 B0 FD | 	call	#_psram_spin2_read1
257e0     1B 3F 02 F6 | 	mov	local13, local09
257e4     15 3F 82 F1 | 	sub	local13, local03
257e8     20 3F 02 F1 | 	add	local13, local14
257ec     1C 3F 02 FD | 	qmul	local13, local10
257f0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
257f0     19 15 02 F6 | 	mov	arg02, local07
257f4     16 17 02 F6 | 	mov	arg03, local04
257f8     14 17 82 F1 | 	sub	arg03, local02
257fc     01 16 06 F1 | 	add	arg03, #1
25800     F6 03 00 FF 
25804     00 12 06 F6 | 	mov	arg01, ##519168
25808     18 3E 62 FD | 	getqx	local13
2580c     1F 15 02 F1 | 	add	arg02, local13
25810     1A 15 02 F1 | 	add	arg02, local08
25814     14 05 B0 FD | 	call	#_psram_spin2_write
25818     21 41 02 F1 | 	add	local14, local15
2581c     22 41 0A F2 | 	cmp	local14, local16 wz
25820     90 FF 9F 5D |  if_ne	jmp	#LR__2910
25824     0B 00 00 FF 
25828     CC E4 85 F1 | 	sub	objptr, ##5836
2582c     94 00 90 FD | 	jmp	#LR__2913
25830                 | LR__2911
25830                 | '   else
25830                 | '     repeat y from y2a to y1a
25830     17 41 02 F6 | 	mov	local14, local05
25834     17 2B 52 F2 | 	cmps	local03, local05 wc
25838     01 46 86 F6 | 	negc	local17, #1
2583c     15 49 02 F6 | 	mov	local18, local03
25840     23 49 02 F1 | 	add	local18, local17
25844     0B 00 00 FF 
25848     CC E4 05 F1 | 	add	objptr, ##5836
2584c                 | LR__2912
2584c     18 41 02 FD | 	qmul	local14, local06
25850                 | '  '     writeln(string("I am there"))
25850                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
25850     13 15 02 F6 | 	mov	arg02, local01
25854     16 17 02 F6 | 	mov	arg03, local04
25858     14 17 82 F1 | 	sub	arg03, local02
2585c     01 16 06 F1 | 	add	arg03, #1
25860     F6 03 00 FF 
25864     00 12 06 F6 | 	mov	arg01, ##519168
25868     18 44 62 FD | 	getqx	local16
2586c     22 15 02 F1 | 	add	arg02, local16
25870     14 15 02 F1 | 	add	arg02, local02
25874     18 04 B0 FD | 	call	#_psram_spin2_read1
25878     1B 45 02 F6 | 	mov	local16, local09
2587c     15 45 82 F1 | 	sub	local16, local03
25880     20 45 02 F1 | 	add	local16, local14
25884     1C 45 02 FD | 	qmul	local16, local10
25888                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
25888     19 15 02 F6 | 	mov	arg02, local07
2588c     16 17 02 F6 | 	mov	arg03, local04
25890     14 17 82 F1 | 	sub	arg03, local02
25894     01 16 06 F1 | 	add	arg03, #1
25898     F6 03 00 FF 
2589c     00 12 06 F6 | 	mov	arg01, ##519168
258a0     18 44 62 FD | 	getqx	local16
258a4     22 15 02 F1 | 	add	arg02, local16
258a8     1A 15 02 F1 | 	add	arg02, local08
258ac     7C 04 B0 FD | 	call	#_psram_spin2_write
258b0     23 41 02 F1 | 	add	local14, local17
258b4     24 41 0A F2 | 	cmp	local14, local18 wz
258b8     90 FF 9F 5D |  if_ne	jmp	#LR__2912
258bc     0B 00 00 FF 
258c0     CC E4 85 F1 | 	sub	objptr, ##5836
258c4                 | LR__2913
258c4                 | LR__2914
258c4                 | '     
258c4                 | ' if ((f>=$80000) && (t<$80000)) 
258c4     00 04 00 FF 
258c8     00 26 56 F2 | 	cmps	local01, ##524288 wc
258cc     80 00 90 CD |  if_b	jmp	#LR__2916
258d0     00 04 00 FF 
258d4     00 32 56 F2 | 	cmps	local07, ##524288 wc
258d8     74 00 90 3D |  if_ae	jmp	#LR__2916
258dc                 | '   repeat y from y1a to y2a
258dc     15 41 02 F6 | 	mov	local14, local03
258e0     15 2F 52 F2 | 	cmps	local05, local03 wc
258e4     01 4A 86 F6 | 	negc	local19, #1
258e8     17 4D 02 F6 | 	mov	local20, local05
258ec     25 4D 02 F1 | 	add	local20, local19
258f0     0B 00 00 FF 
258f4     CC E4 05 F1 | 	add	objptr, ##5836
258f8                 | LR__2915
258f8     1B 49 02 F6 | 	mov	local18, local09
258fc     15 49 82 F1 | 	sub	local18, local03
25900     20 49 02 F1 | 	add	local18, local14
25904     1C 49 02 FD | 	qmul	local18, local10
25908                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
25908     19 13 02 F6 | 	mov	arg01, local07
2590c     18 48 62 FD | 	getqx	local18
25910     18 41 02 FD | 	qmul	local14, local06
25914     24 13 02 F1 | 	add	arg01, local18
25918     1A 13 02 F1 | 	add	arg01, local08
2591c     13 15 02 F6 | 	mov	arg02, local01
25920     16 17 02 F6 | 	mov	arg03, local04
25924     14 17 82 F1 | 	sub	arg03, local02
25928     01 16 06 F1 | 	add	arg03, #1
2592c     18 48 62 FD | 	getqx	local18
25930     24 15 02 F1 | 	add	arg02, local18
25934     14 15 02 F1 | 	add	arg02, local02
25938     54 03 B0 FD | 	call	#_psram_spin2_read1
2593c     25 41 02 F1 | 	add	local14, local19
25940     26 41 0A F2 | 	cmp	local14, local20 wz
25944     B0 FF 9F 5D |  if_ne	jmp	#LR__2915
25948     0B 00 00 FF 
2594c     CC E4 85 F1 | 	sub	objptr, ##5836
25950                 | LR__2916
25950                 | '     
25950                 | ' if ((f<$80000) && (t>=$80000)) 
25950     00 04 00 FF 
25954     00 26 56 F2 | 	cmps	local01, ##524288 wc
25958     84 00 90 3D |  if_ae	jmp	#LR__2918
2595c     00 04 00 FF 
25960     00 32 56 F2 | 	cmps	local07, ##524288 wc
25964     78 00 90 CD |  if_b	jmp	#LR__2918
25968                 | '   t:=t & $FFFFFFF
25968     7C 32 06 F4 | 	bitl	local07, #124
2596c                 | '   repeat y from y1a to y2a
2596c     15 41 02 F6 | 	mov	local14, local03
25970     15 2F 52 F2 | 	cmps	local05, local03 wc
25974     01 4E 86 F6 | 	negc	local21, #1
25978     17 51 02 F6 | 	mov	local22, local05
2597c     27 51 02 F1 | 	add	local22, local21
25980     0B 00 00 FF 
25984     CC E4 05 F1 | 	add	objptr, ##5836
25988                 | LR__2917
25988     18 41 02 FD | 	qmul	local14, local06
2598c                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2598c     13 13 02 F6 | 	mov	arg01, local01
25990     1B 4D 02 F6 | 	mov	local20, local09
25994     15 4D 82 F1 | 	sub	local20, local03
25998     20 4D 02 F1 | 	add	local20, local14
2599c     18 4A 62 FD | 	getqx	local19
259a0     1C 4D 02 FD | 	qmul	local20, local10
259a4     25 13 02 F1 | 	add	arg01, local19
259a8     14 13 02 F1 | 	add	arg01, local02
259ac     19 15 02 F6 | 	mov	arg02, local07
259b0     16 17 02 F6 | 	mov	arg03, local04
259b4     14 17 82 F1 | 	sub	arg03, local02
259b8     01 16 06 F1 | 	add	arg03, #1
259bc     18 4C 62 FD | 	getqx	local20
259c0     26 15 02 F1 | 	add	arg02, local20
259c4     1A 15 02 F1 | 	add	arg02, local08
259c8     60 03 B0 FD | 	call	#_psram_spin2_write
259cc     27 41 02 F1 | 	add	local14, local21
259d0     28 41 0A F2 | 	cmp	local14, local22 wz
259d4     B0 FF 9F 5D |  if_ne	jmp	#LR__2917
259d8     0B 00 00 FF 
259dc     CC E4 85 F1 | 	sub	objptr, ##5836
259e0                 | LR__2918
259e0                 | '     
259e0                 | ' if ((f<$80000) && (t<$80000)) 
259e0     00 04 00 FF 
259e4     00 26 56 F2 | 	cmps	local01, ##524288 wc
259e8     00 04 00 CF 
259ec     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
259f0     64 00 90 3D |  if_ae	jmp	#LR__2920
259f4                 | '   repeat y from y1a to y2a
259f4     15 41 02 F6 | 	mov	local14, local03
259f8     15 2F 52 F2 | 	cmps	local05, local03 wc
259fc     01 52 86 F6 | 	negc	local23, #1
25a00     17 55 02 F6 | 	mov	local24, local05
25a04     29 55 02 F1 | 	add	local24, local23
25a08                 | LR__2919
25a08     18 41 02 FD | 	qmul	local14, local06
25a0c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
25a0c     13 13 02 F6 | 	mov	arg01, local01
25a10     1B 51 02 F6 | 	mov	local22, local09
25a14     15 51 82 F1 | 	sub	local22, local03
25a18     20 51 02 F1 | 	add	local22, local14
25a1c     18 4E 62 FD | 	getqx	local21
25a20     1C 51 02 FD | 	qmul	local22, local10
25a24     27 13 02 F1 | 	add	arg01, local21
25a28     14 13 02 F1 | 	add	arg01, local02
25a2c     19 15 02 F6 | 	mov	arg02, local07
25a30     16 17 02 F6 | 	mov	arg03, local04
25a34     14 17 82 F1 | 	sub	arg03, local02
25a38     01 16 06 F1 | 	add	arg03, #1
25a3c     18 50 62 FD | 	getqx	local22
25a40     28 15 02 F1 | 	add	arg02, local22
25a44     1A 15 02 F1 | 	add	arg02, local08
25a48     EC 0D B0 FD | 	call	#__system____builtin_memmove
25a4c     29 41 02 F1 | 	add	local14, local23
25a50     2A 41 0A F2 | 	cmp	local14, local24 wz
25a54     B0 FF 9F 5D |  if_ne	jmp	#LR__2919
25a58                 | LR__2920
25a58     A7 F0 03 F6 | 	mov	ptra, fp
25a5c     B2 00 A0 FD | 	call	#popregs_
25a60                 | _hg010b_spin2_blit_ret
25a60     2D 00 64 FD | 	ret
25a64                 | 
25a64                 | ' 
25a64                 | ' '..............................................................................
25a64                 | ' 
25a64                 | ' {{
25a64                 | ' }}
25a64                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
25a64                 | _psram_spin2_startx
25a64     04 4A 05 F6 | 	mov	COUNT_, #4
25a68     A8 00 A0 FD | 	call	#pushregs_
25a6c     09 27 02 F6 | 	mov	local01, arg01
25a70     0B 29 02 F6 | 	mov	local02, arg03
25a74     0C 2B 02 F6 | 	mov	local03, arg04
25a78                 | '     stop() ' restart driver if required
25a78     54 01 B0 FD | 	call	#_psram_spin2_stop
25a7c     00 26 0E F2 | 	cmp	local01, #0 wz
25a80     14 26 06 AB |  if_e	rdlong	local01, #20
25a84     13 15 52 F6 | 	abs	arg02, local01 wc
25a88     A1 07 00 FF 
25a8c     40 14 16 FD | 	qdiv	arg02, ##1000000
25a90                 | ' 
25a90                 | '     ' use current frequency if none specified
25a90                 | ' 
25a90                 | '     if freq == 0 
25a90                 | '         freq := clkfreq 
25a90                 | ' 
25a90                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
25a90                 | ' 
25a90                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
25a90                 | '     if burst < 0
25a90                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
25a90     18 14 62 FD | 	getqx	arg02
25a94     0A 19 82 F6 | 	negc	arg04, arg02
25a98     03 18 66 F0 | 	shl	arg04, #3
25a9c     84 18 86 F1 | 	sub	arg04, #132
25aa0     04 18 46 F0 | 	shr	arg04, #4
25aa4     04 18 66 F0 | 	shl	arg04, #4
25aa8     00 18 56 F2 | 	cmps	arg04, #0 wc
25aac     0E FA 65 C6 |  if_b	neg	result1, #14
25ab0     10 01 90 CD |  if_b	jmp	#LR__2933
25ab4                 | ' 
25ab4                 | '     ' compute the input delay
25ab4                 | ' 
25ab4                 | '     if delay <= 0
25ab4     01 28 56 F2 | 	cmps	local02, #1 wc
25ab8     10 00 90 3D |  if_ae	jmp	#LR__2930
25abc                 | '         delay := lookupDelay(freq)
25abc     13 13 02 F6 | 	mov	arg01, local01
25ac0     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
25ac4     FD 28 02 F6 | 	mov	local02, result1
25ac8     04 00 90 FD | 	jmp	#LR__2931
25acc                 | LR__2930
25acc                 | '     else
25acc                 | '         delay <#= $f ' limit to 15
25acc     0F 28 66 F3 | 	fles	local02, #15
25ad0                 | LR__2931
25ad0                 | ' 
25ad0                 | '     ' create our lock
25ad0                 | ' 
25ad0                 | '     driverlock := LOCKNEW()  
25ad0     00 FA 05 F6 | 	mov	result1, #0
25ad4     04 FA 61 FD | 	locknew	result1
25ad8     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25adc     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
25ae0                 | '     if driverlock == -1
25ae0     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25ae4     FF FF 7F FF 
25ae8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
25aec                 | '         return ERR_NO_LOCK
25aec     1A FA 65 A6 |  if_e	neg	result1, #26
25af0     D0 00 90 AD |  if_e	jmp	#LR__2933
25af4                 | ' 
25af4                 | '     ' patch in the proper data and HUB addresses to the startup structure
25af4                 | ' 
25af4                 | '     long[@startupData][0]:=clkfreq
25af4     14 26 06 FB | 	rdlong	local01, #20
25af8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
25afc     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
25b00                 | ' '    long[@startupData][1]:=$1000_0000
25b00                 | '     long[@startupData][5]:=@deviceData
25b00     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25b04     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b08     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
25b0c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25b10     14 14 06 F1 | 	add	arg02, #20
25b14     0A 27 62 FC | 	wrlong	local01, arg02
25b18                 | '     long[@startupData][6]:=@qosData
25b18     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
25b1c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b20     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25b24     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
25b28     18 14 06 F1 | 	add	arg02, #24
25b2c     0A 27 62 FC | 	wrlong	local01, arg02
25b30                 | '     long[@startupData][7]:=$7FF00
25b30     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
25b34     1C 26 06 F1 | 	add	local01, #28
25b38     FF 03 80 FF 
25b3c     13 01 6A FC | 	wrlong	##524032, local01
25b40                 | ' 
25b40                 | '     ' setup some default bank and QoS parameter values
25b40                 | ' 
25b40                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
25b40     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
25b44     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
25b48     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
25b4c     10 18 66 F0 | 	shl	arg04, #16
25b50     0C 28 66 F0 | 	shl	local02, #12
25b54     14 19 42 F5 | 	or	arg04, local02
25b58     18 18 46 F5 | 	or	arg04, #24
25b5c     0C 15 02 F6 | 	mov	arg02, arg04
25b60     02 16 06 F6 | 	mov	arg03, #2
25b64     A0 00 A0 FD | 	call	#\builtin_longfill_
25b68                 | '     longfill(@qosData, $FFFF0000, 8)
25b68     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25b6c     07 16 06 F6 | 	mov	arg03, #7
25b70     28 16 62 FD | 	setq	arg03
25b74     80 FF FF FF 
25b78     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
25b7c                 | ' 
25b7c                 | '     ' get the address of the PSRAM memory driver so we can start it
25b7c                 | ' 
25b7c                 | '     driverAddr:= driver.getDriverAddr()
25b7c                 | '     return @driver_start
25b7c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
25b80     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
25b84     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
25b88                 | ' 
25b88                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
25b88                 | ' 
25b88                 | '     if desiredcog < 0
25b88     00 2A 56 F2 | 	cmps	local03, #0 wc
25b8c                 | '         desiredcog := NEWCOG
25b8c     10 2A 06 C6 |  if_b	mov	local03, #16
25b90                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
25b90     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
25b94     15 2D 02 F6 | 	mov	local04, local03
25b98     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
25b9c     0A 2D F2 FC | 	coginit	local04, arg02 wc
25ba0     01 2C 66 C6 |  if_b	neg	local04, #1
25ba4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25ba8     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
25bac                 | '     repeat until long[@startupData] == 0 
25bac     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
25bb0                 | LR__2932
25bb0     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
25bb4     F8 FF 9F 5D |  if_ne	jmp	#LR__2932
25bb8                 | ' 
25bb8                 | '     return drivercog
25bb8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
25bbc     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
25bc0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25bc4                 | LR__2933
25bc4     A7 F0 03 F6 | 	mov	ptra, fp
25bc8     B2 00 A0 FD | 	call	#popregs_
25bcc                 | _psram_spin2_startx_ret
25bcc     2D 00 64 FD | 	ret
25bd0                 | 
25bd0                 | ' 
25bd0                 | ' '..............................................................................
25bd0                 | ' 
25bd0                 | ' {{
25bd0                 | ' }}
25bd0                 | ' PUB stop() : i
25bd0                 | _psram_spin2_stop
25bd0     00 00 06 F6 | 	mov	_var01, #0
25bd4                 | '     if drivercog <> -1
25bd4     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25bd8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25bdc     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25be0     FF FF 7F FF 
25be4     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
25be8     70 00 90 AD |  if_e	jmp	#LR__2943
25bec                 | '         cogstop(drivercog) ' a rather brutal stop
25bec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25bf0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25bf4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25bf8     03 12 62 FD | 	cogstop	arg01
25bfc     97 26 48 FB | 	callpa	#(@LR__2942-@LR__2940)>>2,fcache_load_ptr_
25c00                 | '         repeat i from 0 to 7
25c00                 | LR__2940
25c00                 | '             if long[$7FF00][i*3] < 0
25c00     00 FB 01 F6 | 	mov	result1, _var01
25c04     01 FA 65 F0 | 	shl	result1, #1
25c08     00 FB 01 F1 | 	add	result1, _var01
25c0c     02 FA 65 F0 | 	shl	result1, #2
25c10     FF 03 00 FF 
25c14     00 FB 05 F1 | 	add	result1, ##524032
25c18     FD FA 01 FB | 	rdlong	result1, result1
25c1c     00 FA 55 F2 | 	cmps	result1, #0 wc
25c20     1C 00 90 3D |  if_ae	jmp	#LR__2941
25c24                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
25c24     00 FB 01 F6 | 	mov	result1, _var01
25c28     01 FA 65 F0 | 	shl	result1, #1
25c2c     00 FB 01 F1 | 	add	result1, _var01
25c30     02 FA 65 F0 | 	shl	result1, #2
25c34     FF 03 00 FF 
25c38     00 FB 05 F1 | 	add	result1, ##524032
25c3c     FD 20 68 FC | 	wrlong	#16, result1
25c40                 | LR__2941
25c40     01 00 06 F1 | 	add	_var01, #1
25c44     08 00 56 F2 | 	cmps	_var01, #8 wc
25c48     B4 FF 9F CD |  if_b	jmp	#LR__2940
25c4c                 | LR__2942
25c4c                 | '         drivercog := -1
25c4c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c50     FF FF FF FF 
25c54     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
25c58     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c5c                 | LR__2943
25c5c                 | '     if driverlock <> -1
25c5c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25c60     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25c64     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25c68     FF FF 7F FF 
25c6c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25c70                 | '         LOCKRET(driverlock)
25c70     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
25c74     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
25c78     05 12 62 5D |  if_ne	lockret	arg01
25c7c                 | '         driverlock := -1
25c7c     FF FF FF 5F 
25c80     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
25c84     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
25c88     00 FB 01 F6 | 	mov	result1, _var01
25c8c                 | _psram_spin2_stop_ret
25c8c     2D 00 64 FD | 	ret
25c90                 | 
25c90                 | ' 
25c90                 | ' '..............................................................................
25c90                 | ' 
25c90                 | ' {{
25c90                 | ' }}
25c90                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
25c90                 | _psram_spin2_read1
25c90                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25c90                 | '     if drivercog == -1 ' driver must be running
25c90     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25c94     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25c98     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25c9c     FF FF 7F FF 
25ca0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25ca4                 | '         return ERR_INACTIVE
25ca4     0F FA 65 A6 |  if_e	neg	result1, #15
25ca8     7C 00 90 AD |  if_e	jmp	#LR__2951
25cac                 | '     if count == 0 ' don't even bother reading
25cac     00 16 0E F2 | 	cmp	arg03, #0 wz
25cb0                 | '         return 0
25cb0     00 FA 05 A6 |  if_e	mov	result1, #0
25cb4     70 00 90 AD |  if_e	jmp	#LR__2951
25cb8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25cb8     00 FA 05 F6 | 	mov	result1, #0
25cbc     01 FA 61 FD | 	cogid	result1
25cc0     FD 00 02 F6 | 	mov	_var01, result1
25cc4     01 00 66 F0 | 	shl	_var01, #1
25cc8     FD 00 02 F1 | 	add	_var01, result1
25ccc     02 00 66 F0 | 	shl	_var01, #2
25cd0     FF 03 00 FF 
25cd4     00 03 06 F6 | 	mov	_var02, ##524032
25cd8     00 03 02 F1 | 	add	_var02, _var01
25cdc                 | '     if long[mailbox] < 0
25cdc     01 01 02 FB | 	rdlong	_var01, _var02
25ce0     00 00 56 F2 | 	cmps	_var01, #0 wc
25ce4                 | '         return ERR_MAILBOX_BUSY
25ce4     1C FA 65 C6 |  if_b	neg	result1, #28
25ce8     3C 00 90 CD |  if_b	jmp	#LR__2951
25cec                 | '     long[mailbox][2] := count
25cec     08 02 06 F1 | 	add	_var02, #8
25cf0     01 17 62 FC | 	wrlong	arg03, _var02
25cf4                 | '     long[mailbox][1] := dstHubAddr
25cf4     04 02 86 F1 | 	sub	_var02, #4
25cf8     01 13 62 FC | 	wrlong	arg01, _var02
25cfc     04 02 86 F1 | 	sub	_var02, #4
25d00                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
25d00     0A 05 02 F6 | 	mov	_var03, arg02
25d04     D9 04 06 F4 | 	bitl	_var03, #217
25d08     00 00 58 FF 
25d0c     00 00 06 F6 | 	mov	_var01, ##-1342177280
25d10     02 01 02 F1 | 	add	_var01, _var03
25d14     01 01 62 FC | 	wrlong	_var01, _var02
25d18                 | '     repeat
25d18                 | LR__2950
25d18                 | '         result := long[mailbox]    
25d18     01 05 02 FB | 	rdlong	_var03, _var02
25d1c     00 04 56 F2 | 	cmps	_var03, #0 wc
25d20     F4 FF 9F CD |  if_b	jmp	#LR__2950
25d24                 | '     while result < 0   
25d24                 | '     return -result                       'return success or error
25d24     02 FB 61 F6 | 	neg	result1, _var03
25d28                 | LR__2951
25d28                 | _psram_spin2_read1_ret
25d28     2D 00 64 FD | 	ret
25d2c                 | 
25d2c                 | ' 
25d2c                 | ' '..............................................................................
25d2c                 | ' 
25d2c                 | ' {{
25d2c                 | ' }}
25d2c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
25d2c                 | _psram_spin2_write
25d2c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
25d2c                 | '     if drivercog == -1 ' driver must be running
25d2c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25d30     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
25d34     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25d38     FF FF 7F FF 
25d3c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
25d40                 | '         return ERR_INACTIVE
25d40     0F FA 65 A6 |  if_e	neg	result1, #15
25d44     7C 00 90 AD |  if_e	jmp	#LR__2961
25d48                 | '     if count == 0 ' don't even bother writing
25d48     00 16 0E F2 | 	cmp	arg03, #0 wz
25d4c                 | '         return 0
25d4c     00 FA 05 A6 |  if_e	mov	result1, #0
25d50     70 00 90 AD |  if_e	jmp	#LR__2961
25d54                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
25d54     00 FA 05 F6 | 	mov	result1, #0
25d58     01 FA 61 FD | 	cogid	result1
25d5c     FD 00 02 F6 | 	mov	_var01, result1
25d60     01 00 66 F0 | 	shl	_var01, #1
25d64     FD 00 02 F1 | 	add	_var01, result1
25d68     02 00 66 F0 | 	shl	_var01, #2
25d6c     FF 03 00 FF 
25d70     00 03 06 F6 | 	mov	_var02, ##524032
25d74     00 03 02 F1 | 	add	_var02, _var01
25d78                 | '     if long[mailbox] < 0
25d78     01 01 02 FB | 	rdlong	_var01, _var02
25d7c     00 00 56 F2 | 	cmps	_var01, #0 wc
25d80                 | '         return ERR_MAILBOX_BUSY
25d80     1C FA 65 C6 |  if_b	neg	result1, #28
25d84     3C 00 90 CD |  if_b	jmp	#LR__2961
25d88                 | '     long[mailbox][2] := count
25d88     08 02 06 F1 | 	add	_var02, #8
25d8c     01 17 62 FC | 	wrlong	arg03, _var02
25d90                 | '     long[mailbox][1] := srcHubAddr
25d90     04 02 86 F1 | 	sub	_var02, #4
25d94     01 13 62 FC | 	wrlong	arg01, _var02
25d98     04 02 86 F1 | 	sub	_var02, #4
25d9c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
25d9c     0A 05 02 F6 | 	mov	_var03, arg02
25da0     D9 04 06 F4 | 	bitl	_var03, #217
25da4     00 00 78 FF 
25da8     00 00 06 F6 | 	mov	_var01, ##-268435456
25dac     02 01 02 F1 | 	add	_var01, _var03
25db0     01 01 62 FC | 	wrlong	_var01, _var02
25db4                 | '     repeat
25db4                 | LR__2960
25db4                 | '         result := long[mailbox]    
25db4     01 05 02 FB | 	rdlong	_var03, _var02
25db8     00 04 56 F2 | 	cmps	_var03, #0 wc
25dbc     F4 FF 9F CD |  if_b	jmp	#LR__2960
25dc0                 | '     while result < 0   
25dc0                 | '     return -result                       'return success or error
25dc0     02 FB 61 F6 | 	neg	result1, _var03
25dc4                 | LR__2961
25dc4                 | _psram_spin2_write_ret
25dc4     2D 00 64 FD | 	ret
25dc8                 | 
25dc8                 | ' 
25dc8                 | ' ' generalized fill
25dc8                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
25dc8                 | _psram_spin2_fill
25dc8     09 01 02 F6 | 	mov	_var01, arg01
25dcc     0A 03 02 F6 | 	mov	_var02, arg02
25dd0     0B 05 02 F6 | 	mov	_var03, arg03
25dd4     0D 07 02 F6 | 	mov	_var04, arg05
25dd8                 | '     case datasize 
25dd8     01 06 86 F1 | 	sub	_var04, #1
25ddc     04 06 26 F3 | 	fle	_var04, #4
25de0     30 06 62 FD | 	jmprel	_var04
25de4                 | LR__2970
25de4     10 00 90 FD | 	jmp	#LR__2971
25de8     18 00 90 FD | 	jmp	#LR__2972
25dec     2C 00 90 FD | 	jmp	#LR__2974
25df0     1C 00 90 FD | 	jmp	#LR__2973
25df4     24 00 90 FD | 	jmp	#LR__2974
25df8                 | LR__2971
25df8                 | '         1: req := driver.R_WRITEBYTE
25df8     00 00 60 FF 
25dfc     00 08 06 F6 | 	mov	_var05, ##-1073741824
25e00     20 00 90 FD | 	jmp	#LR__2975
25e04                 | LR__2972
25e04                 | '         2: req := driver.R_WRITEWORD
25e04     00 00 68 FF 
25e08     00 08 06 F6 | 	mov	_var05, ##-805306368
25e0c     14 00 90 FD | 	jmp	#LR__2975
25e10                 | LR__2973
25e10                 | '         4: req := driver.R_WRITELONG
25e10     00 00 70 FF 
25e14     00 08 06 F6 | 	mov	_var05, ##-536870912
25e18     08 00 90 FD | 	jmp	#LR__2975
25e1c                 | LR__2974
25e1c                 | '         other : return ERR_INVALID
25e1c     06 FA 65 F6 | 	neg	result1, #6
25e20     94 00 90 FD | 	jmp	#LR__2977
25e24                 | LR__2975
25e24                 | '     if count == 0   ' nothing to do
25e24     00 04 0E F2 | 	cmp	_var03, #0 wz
25e28                 | '         return 0
25e28     00 FA 05 A6 |  if_e	mov	result1, #0
25e2c     88 00 90 AD |  if_e	jmp	#LR__2977
25e30                 | '     if drivercog == -1
25e30     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25e34     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
25e38     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25e3c     FF FF 7F FF 
25e40     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
25e44                 | '         return ERR_INACTIVE
25e44     0F FA 65 A6 |  if_e	neg	result1, #15
25e48     6C 00 90 AD |  if_e	jmp	#LR__2977
25e4c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
25e4c     00 FA 05 F6 | 	mov	result1, #0
25e50     01 FA 61 FD | 	cogid	result1
25e54     FD 06 02 F6 | 	mov	_var04, result1
25e58     01 06 66 F0 | 	shl	_var04, #1
25e5c     FD 06 02 F1 | 	add	_var04, result1
25e60     02 06 66 F0 | 	shl	_var04, #2
25e64     FF 03 00 FF 
25e68     00 0B 06 F6 | 	mov	_var06, ##524032
25e6c     03 0B 02 F1 | 	add	_var06, _var04
25e70                 | '     if long[mailbox] < 0
25e70     05 07 02 FB | 	rdlong	_var04, _var06
25e74     00 06 56 F2 | 	cmps	_var04, #0 wc
25e78                 | '         return ERR_MAILBOX_BUSY
25e78     1C FA 65 C6 |  if_b	neg	result1, #28
25e7c     38 00 90 CD |  if_b	jmp	#LR__2977
25e80                 | '     long[mailbox][2] := count
25e80     08 0A 06 F1 | 	add	_var06, #8
25e84     05 05 62 FC | 	wrlong	_var03, _var06
25e88                 | '     long[mailbox][1] := pattern
25e88     04 0A 86 F1 | 	sub	_var06, #4
25e8c     05 03 62 FC | 	wrlong	_var02, _var06
25e90     04 0A 86 F1 | 	sub	_var06, #4
25e94                 | '     long[mailbox] := req + (addr & $1ffffff)
25e94     04 0D 02 F6 | 	mov	_var07, _var05
25e98     00 0F 02 F6 | 	mov	_var08, _var01
25e9c     D9 0E 06 F4 | 	bitl	_var08, #217
25ea0     07 0D 02 F1 | 	add	_var07, _var08
25ea4     05 0D 62 FC | 	wrlong	_var07, _var06
25ea8                 | '     repeat
25ea8                 | LR__2976
25ea8                 | '         r := long[mailbox]
25ea8     05 0F 02 FB | 	rdlong	_var08, _var06
25eac     00 0E 56 F2 | 	cmps	_var08, #0 wc
25eb0     F4 FF 9F CD |  if_b	jmp	#LR__2976
25eb4                 | '     while r < 0
25eb4                 | '     return -r                  ' return 0 for success or negated error code
25eb4     07 FB 61 F6 | 	neg	result1, _var08
25eb8                 | LR__2977
25eb8                 | _psram_spin2_fill_ret
25eb8     2D 00 64 FD | 	ret
25ebc                 | 
25ebc                 | ' 
25ebc                 | ' '..............................................................................
25ebc                 | ' 
25ebc                 | ' {{
25ebc                 | ' }}
25ebc                 | ' PUB setQos(cog, qos) : result | mailbox
25ebc                 | _psram_spin2_setQos
25ebc     09 01 02 F6 | 	mov	_var01, arg01
25ec0                 | '     if drivercog == -1 ' driver must be running
25ec0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
25ec4     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
25ec8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
25ecc     FF FF 7F FF 
25ed0     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
25ed4                 | '         return ERR_INACTIVE
25ed4     0F FA 65 A6 |  if_e	neg	result1, #15
25ed8     9C 00 90 AD |  if_e	jmp	#LR__2984
25edc                 | '     if cog < 0 or cog > 7 ' enforce cog id range
25edc     00 00 56 F2 | 	cmps	_var01, #0 wc
25ee0     08 00 90 CD |  if_b	jmp	#LR__2980
25ee4     08 00 56 F2 | 	cmps	_var01, #8 wc
25ee8     08 00 90 CD |  if_b	jmp	#LR__2981
25eec                 | LR__2980
25eec                 | '         return ERR_INVALID
25eec     06 FA 65 F6 | 	neg	result1, #6
25ef0     84 00 90 FD | 	jmp	#LR__2984
25ef4                 | LR__2981
25ef4                 | '     long[@qosData][cog] := qos & !$1ff
25ef4     FF 15 26 F5 | 	andn	arg02, #511
25ef8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
25efc     02 00 66 F0 | 	shl	_var01, #2
25f00     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
25f04     00 15 62 FC | 	wrlong	arg02, _var01
25f08                 | '     mailbox := $7FF00 + drivercog*12
25f08     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
25f0c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
25f10     02 07 02 F6 | 	mov	_var04, _var03
25f14     01 06 66 F0 | 	shl	_var04, #1
25f18     02 07 02 F1 | 	add	_var04, _var03
25f1c     02 06 66 F0 | 	shl	_var04, #2
25f20     FF 03 00 FF 
25f24     00 09 06 F6 | 	mov	_var05, ##524032
25f28     03 09 02 F1 | 	add	_var05, _var04
25f2c                 | '     repeat until LOCKTRY(driverlock)
25f2c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
25f30                 | LR__2982
25f30     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25f34     06 12 72 FD | 	locktry	arg01 wc
25f38     F4 FF 9F 3D |  if_ae	jmp	#LR__2982
25f3c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25f40                 | '     long[mailbox] := driver.R_CONFIG + cogid()
25f40     00 06 06 F6 | 	mov	_var04, #0
25f44     01 06 62 FD | 	cogid	_var04
25f48     00 00 78 FF 
25f4c     00 02 06 F6 | 	mov	_var02, ##-268435456
25f50     03 03 02 F1 | 	add	_var02, _var04
25f54     04 03 62 FC | 	wrlong	_var02, _var05
25f58                 | '     repeat while long[mailbox] < 0
25f58                 | LR__2983
25f58     04 03 02 FB | 	rdlong	_var02, _var05
25f5c     00 02 56 F2 | 	cmps	_var02, #0 wc
25f60     F4 FF 9F CD |  if_b	jmp	#LR__2983
25f64                 | '     LOCKREL(driverlock)
25f64     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
25f68     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
25f6c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
25f70     07 12 72 FD | 	lockrel	arg01 wc
25f74     00 FA 05 F6 | 	mov	result1, #0
25f78                 | LR__2984
25f78                 | _psram_spin2_setQos_ret
25f78     2D 00 64 FD | 	ret
25f7c                 | 
25f7c                 | ' 
25f7c                 | ' '..............................................................................
25f7c                 | ' 
25f7c                 | ' {{
25f7c                 | ' }}
25f7c                 | ' PRI lookupDelay(freq) : delay | profile
25f7c                 | _psram_spin2_lookupDelay
25f7c                 | '     profile := @delayTable
25f7c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
25f80     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
25f84                 | '     delay := long[profile][0]
25f84     00 03 02 FB | 	rdlong	_var02, _var01
25f88                 | '     repeat while long[profile][1] 
25f88     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
25f8c     97 16 48 FB | 	callpa	#(@LR__2991-@LR__2990)>>2,fcache_load_ptr_
25f90                 | LR__2990
25f90     04 00 06 F1 | 	add	_var01, #4
25f94     00 FB 09 FB | 	rdlong	result1, _var01 wz
25f98     04 00 86 F1 | 	sub	_var01, #4
25f9c     1C 00 90 AD |  if_e	jmp	#LR__2992
25fa0                 | '         if freq +< long[profile][1] 
25fa0     04 00 06 F1 | 	add	_var01, #4
25fa4     00 FB 01 FB | 	rdlong	result1, _var01
25fa8     04 00 86 F1 | 	sub	_var01, #4
25fac     FD 12 12 F2 | 	cmp	arg01, result1 wc
25fb0                 | '             quit
25fb0                 | '         profile += 4
25fb0     04 00 06 31 |  if_ae	add	_var01, #4
25fb4                 | '         delay++
25fb4     01 02 06 31 |  if_ae	add	_var02, #1
25fb8     D4 FF 9F 3D |  if_ae	jmp	#LR__2990
25fbc                 | LR__2991
25fbc                 | LR__2992
25fbc     01 FB 01 F6 | 	mov	result1, _var02
25fc0                 | _psram_spin2_lookupDelay_ret
25fc0     2D 00 64 FD | 	ret
25fc4                 | 
25fc4                 | ' 
25fc4                 | ' PUB start() : r
25fc4                 | _usbnew_spin2_start
25fc4     00 00 06 F6 | 	mov	_var01, #0
25fc8                 | '   ifnot driver_cog
25fc8     15 00 00 FF 
25fcc     47 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10823
25fd0     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
25fd4     15 00 00 FF 
25fd8     47 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10823
25fdc     38 00 90 5D |  if_ne	jmp	#LR__3000
25fe0                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
25fe0     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
25fe4     10 00 06 F6 | 	mov	_var01, #16
25fe8     00 16 06 F6 | 	mov	arg03, #0
25fec     28 16 62 FD | 	setq	arg03
25ff0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
25ff4     01 00 66 C6 |  if_b	neg	_var01, #1
25ff8                 | '     if r >= 0
25ff8     00 00 56 F2 | 	cmps	_var01, #0 wc
25ffc                 | '       driver_cog := r+1
25ffc     00 03 02 36 |  if_ae	mov	_var02, _var01
26000     01 02 06 31 |  if_ae	add	_var02, #1
26004     15 00 00 3F 
26008     47 F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10823
2600c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
26010     15 00 00 3F 
26014     47 F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10823
26018                 | LR__3000
26018     00 FB 01 F6 | 	mov	result1, _var01
2601c                 | _usbnew_spin2_start_ret
2601c     2D 00 64 FD | 	ret
26020                 | 
26020                 | '     '' (Always enabled)
26020                 | ' 
26020                 | ' '' Get current pressed state of a keyboard key
26020                 | ' PUB keystate(key) : r | buf[2],tmp
26020                 | _usbnew_spin2_keystate
26020     00 04 06 F6 | 	mov	_var03, #0
26024                 | '   if key >= $E0 && key < $E8
26024     E0 12 56 F2 | 	cmps	arg01, #224 wc
26028     34 00 90 CD |  if_b	jmp	#LR__3010
2602c     E8 12 56 F2 | 	cmps	arg01, #232 wc
26030     2C 00 90 3D |  if_ae	jmp	#LR__3010
26034                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
26034     00 FA 05 F6 | 	mov	result1, #0
26038     13 00 00 FF 
2603c     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26040     09 07 02 F6 | 	mov	_var04, arg01
26044     E0 06 86 F1 | 	sub	_var04, #224
26048     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
2604c     03 09 4A F0 | 	shr	_var05, _var04 wz
26050     13 00 00 FF 
26054     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26058     01 FA 65 56 |  if_ne	neg	result1, #1
2605c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
26060                 | LR__3010
26060                 | '   else
26060                 | '     '' Do this in inline ASM to ensure atomicity
26060                 | '     tmp := @hkbd_report
26060     13 00 00 FF 
26064     C8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10184
26068     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
2606c                 | '     org
2606c     13 00 00 FF 
26070     C8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10184
26074     97 1E 48 FB | 	callpa	#(@LR__3012-@LR__3011)>>2,fcache_load_ptr_
26078                 | LR__3011
26078 000             | 	org	0
26078 000 28 02 64 FD | 	setq	#1
2607c 001 04 01 02 FB | 	rdlong	_var01, _var05
26080 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
26084 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
26088 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
2608c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26090 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
26094 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
26098 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
2609c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260a0 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
260a4 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260a8 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
260ac 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
260b0 00e 01 04 66 A6 |  if_e	neg	_var03, #1
260b4 00f             | LR__3012
260b4                 | 	orgh
260b4     02 FB 01 F6 | 	mov	result1, _var03
260b8                 | _usbnew_spin2_keystate_ret
260b8     2D 00 64 FD | 	ret
260bc                 | 
260bc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
260bc                 | ' 
260bc                 | ' '' Return key event from buffer if there is one
260bc                 | ' PUB get_key() : r | tail
260bc                 | _usbnew_spin2_get_key
260bc                 | '   tail := keyq_tail
260bc     0F 00 00 FF 
260c0     C5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7877
260c4     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
260c8                 | '   if keyq_head == tail
260c8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
260cc     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
260d0     0F 00 00 FF 
260d4     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
260d8     00 03 0A F2 | 	cmp	_var02, _var01 wz
260dc                 | '     return 0 ' No event
260dc     00 FA 05 A6 |  if_e	mov	result1, #0
260e0     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
260e4                 | '   r := keyq_data[tail]
260e4     00 03 02 F6 | 	mov	_var02, _var01
260e8     02 02 66 F0 | 	shl	_var02, #2
260ec     0F 00 00 FF 
260f0     C6 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7878
260f4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
260f8     01 FB 01 FB | 	rdlong	result1, _var02
260fc                 | '   if ++tail == KEYQUEUE_SIZE
260fc     01 00 06 F1 | 	add	_var01, #1
26100     80 00 0E F2 | 	cmp	_var01, #128 wz
26104                 | '     tail := 0
26104     00 00 06 A6 |  if_e	mov	_var01, #0
26108                 | '   keyq_tail := tail
26108     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
2610c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
26110     0F 00 00 FF 
26114     C5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7877
26118                 | _usbnew_spin2_get_key_ret
26118     2D 00 64 FD | 	ret
2611c                 | 
2611c                 | ' 
2611c                 | ' '' Emulate mouse movement
2611c                 | ' PUB mouse_move(x,y)
2611c                 | _usbnew_spin2_mouse_move
2611c     02 4A 05 F6 | 	mov	COUNT_, #2
26120     A8 00 A0 FD | 	call	#pushregs_
26124     09 27 02 F6 | 	mov	local01, arg01
26128     0A 29 02 F6 | 	mov	local02, arg02
2612c                 | '   mouse_lock := 1
2612c     14 00 00 FF 
26130     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
26134     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
26138     14 00 00 FF 
2613c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
26140                 | '   waitus(2) ' hope driver is now done
26140     02 12 06 F6 | 	mov	arg01, #2
26144     30 0B B0 FD | 	call	#__system___waitus
26148                 | '   mouse_xacc := x
26148     14 00 00 FF 
2614c     A1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10401
26150     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
26154                 | '   mouse_yacc := y
26154     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
26158     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
2615c                 | '   if mouse_outptr
2615c     04 00 00 FF 
26160     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
26164     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
26168     0F 00 00 FF 
2616c     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26170     24 00 90 AD |  if_e	jmp	#LR__3020
26174                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
26174     10 28 66 F0 | 	shl	local02, #16
26178     13 27 32 F9 | 	getword	local01, local01, #0
2617c     13 29 42 F5 | 	or	local02, local01
26180     0F 00 00 FF 
26184     C0 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7872
26188     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
2618c     0F 00 00 FF 
26190     C0 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7872
26194     13 29 62 FC | 	wrlong	local02, local01
26198                 | LR__3020
26198                 | '   mouse_lock := 0
26198     14 00 00 FF 
2619c     B1 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10417
261a0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
261a4     14 00 00 FF 
261a8     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
261ac     A7 F0 03 F6 | 	mov	ptra, fp
261b0     B2 00 A0 FD | 	call	#popregs_
261b4                 | _usbnew_spin2_mouse_move_ret
261b4     2D 00 64 FD | 	ret
261b8                 | 
261b8                 | '     '' Set HAVE_HIDPAD to enable.
261b8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
261b8                 | ' 
261b8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
261b8                 | ' PUB hidpad_id(dev) : r
261b8                 | _usbnew_spin2_hidpad_id
261b8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
261b8     13 00 00 FF 
261bc     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
261c0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
261c4     09 01 02 F6 | 	mov	_var01, arg01
261c8     03 00 66 F0 | 	shl	_var01, #3
261cc     09 01 82 F1 | 	sub	_var01, arg01
261d0     02 00 66 F0 | 	shl	_var01, #2
261d4     00 FB 01 F1 | 	add	result1, _var01
261d8     FD FA 01 FB | 	rdlong	result1, result1
261dc     13 00 00 FF 
261e0     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
261e4                 | _usbnew_spin2_hidpad_id_ret
261e4     2D 00 64 FD | 	ret
261e8                 | 
261e8                 | ' 
261e8                 | ' '' Get all button states for a device
261e8                 | ' PUB hidpad_buttons(dev) : r 
261e8                 | _usbnew_spin2_hidpad_buttons
261e8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
261e8     13 00 00 FF 
261ec     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
261f0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
261f4     09 01 02 F6 | 	mov	_var01, arg01
261f8     03 00 66 F0 | 	shl	_var01, #3
261fc     09 01 82 F1 | 	sub	_var01, arg01
26200     02 00 66 F0 | 	shl	_var01, #2
26204     00 FB 01 F1 | 	add	result1, _var01
26208     14 FA 05 F1 | 	add	result1, #20
2620c     FD FA 01 FB | 	rdlong	result1, result1
26210     13 00 00 FF 
26214     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26218                 | _usbnew_spin2_hidpad_buttons_ret
26218     2D 00 64 FD | 	ret
2621c                 | 
2621c                 | ' 
2621c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
2621c                 | ' PUB hidpad_axis(dev,axnum) : r
2621c                 | _usbnew_spin2_hidpad_axis
2621c                 | '   if axnum +>= 6
2621c     06 14 16 F2 | 	cmp	arg02, #6 wc
26220                 | '     return 0
26220     00 FA 05 36 |  if_ae	mov	result1, #0
26224     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
26228                 | '   else 
26228                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
26228     13 00 00 FF 
2622c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26230     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26234     09 01 02 F6 | 	mov	_var01, arg01
26238     03 00 66 F0 | 	shl	_var01, #3
2623c     09 01 82 F1 | 	sub	_var01, arg01
26240     02 00 66 F0 | 	shl	_var01, #2
26244     00 FB 01 F1 | 	add	result1, _var01
26248     04 00 06 F6 | 	mov	_var01, #4
2624c     0A 01 02 F1 | 	add	_var01, arg02
26250     01 00 66 F0 | 	shl	_var01, #1
26254     FD 00 02 F1 | 	add	_var01, result1
26258     00 FB E1 FA | 	rdword	result1, _var01
2625c     0F FA 65 F7 | 	signx	result1, #15
26260     13 00 00 FF 
26264     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
26268                 | _usbnew_spin2_hidpad_axis_ret
26268     2D 00 64 FD | 	ret
2626c                 | 
2626c                 | ' 
2626c                 | ' '' Get state of a hat
2626c                 | ' PUB hidpad_hat(dev,hatnum) : r
2626c                 | _usbnew_spin2_hidpad_hat
2626c                 | '   if hatnum +>= 4
2626c     04 14 16 F2 | 	cmp	arg02, #4 wc
26270                 | '     return 0
26270     00 FA 05 36 |  if_ae	mov	result1, #0
26274     38 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_hat_ret
26278                 | '   else 
26278                 | '     return byte[@hidpad_report+dev*HIDPAD_REPORT_SIZE][6*4+hatnum]
26278     13 00 00 FF 
2627c     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
26280     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
26284     09 01 02 F6 | 	mov	_var01, arg01
26288     03 00 66 F0 | 	shl	_var01, #3
2628c     09 01 82 F1 | 	sub	_var01, arg01
26290     02 00 66 F0 | 	shl	_var01, #2
26294     00 FB 01 F1 | 	add	result1, _var01
26298     18 00 06 F6 | 	mov	_var01, #24
2629c     0A 01 02 F1 | 	add	_var01, arg02
262a0     FD 00 02 F1 | 	add	_var01, result1
262a4     00 FB C1 FA | 	rdbyte	result1, _var01
262a8     13 00 00 FF 
262ac     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
262b0                 | _usbnew_spin2_hidpad_hat_ret
262b0     2D 00 64 FD | 	ret
262b4                 | 
262b4                 | ' 
262b4                 | ' 
262b4                 | ' '--------------------------------------------------------------
262b4                 | ' '---------- Init the variables, start the cog. ----------------
262b4                 | ' '--------------------------------------------------------------
262b4                 | ' 
262b4                 | ' pub start(mbox,scope,cache) :cog,base | iii
262b4                 | _audio096_spin2_start
262b4     04 4A 05 F6 | 	mov	COUNT_, #4
262b8     A8 00 A0 FD | 	call	#pushregs_
262bc     09 27 02 F6 | 	mov	local01, arg01
262c0                 | ' 
262c0                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
262c0                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
262c0                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
262c0                 | ' 
262c0                 | ' mailboxaddr:=mbox 
262c0     F2 26 62 FC | 	wrlong	local01, objptr
262c4                 | ' scope_ptr:=scope
262c4     04 E4 05 F1 | 	add	objptr, #4
262c8     F2 14 62 FC | 	wrlong	arg02, objptr
262cc                 | ' cache_ptr:=cache
262cc     04 E4 05 F1 | 	add	objptr, #4
262d0     F2 16 62 FC | 	wrlong	arg03, objptr
262d4                 | ' base:=@channel1[0]
262d4     04 E4 05 F1 | 	add	objptr, #4
262d8     F2 28 02 F6 | 	mov	local02, objptr
262dc                 | ' long[$40]:=mbox
262dc     40 26 66 FC | 	wrlong	local01, #64
262e0                 | ' repeat iii from 0 to 7
262e0     00 2A 06 F6 | 	mov	local03, #0
262e4     02 00 00 FF 
262e8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
262ec     0C E4 85 F1 | 	sub	objptr, #12
262f0     97 BC 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
262f4                 | LR__3030
262f4                 | '   long[base+64*iii]:=0
262f4     14 27 02 F6 | 	mov	local01, local02
262f8     15 FD 01 F6 | 	mov	result2, local03
262fc     06 FC 65 F0 | 	shl	result2, #6
26300     FE 26 02 F1 | 	add	local01, result2
26304     13 01 68 FC | 	wrlong	#0, local01
26308                 | '   long[base+64*iii+4]:=0
26308     14 27 02 F6 | 	mov	local01, local02
2630c     15 FD 01 F6 | 	mov	result2, local03
26310     06 FC 65 F0 | 	shl	result2, #6
26314     FE 26 02 F1 | 	add	local01, result2
26318     04 26 06 F1 | 	add	local01, #4
2631c     13 01 68 FC | 	wrlong	#0, local01
26320                 | '   long[base+64*iii+12]:=0
26320     14 2D 02 F6 | 	mov	local04, local02
26324     15 27 02 F6 | 	mov	local01, local03
26328     06 26 66 F0 | 	shl	local01, #6
2632c     13 2D 02 F1 | 	add	local04, local01
26330     0C 2C 06 F1 | 	add	local04, #12
26334     16 01 68 FC | 	wrlong	#0, local04
26338                 | '   long[base+64*iii+16]:=2 
26338     14 2D 02 F6 | 	mov	local04, local02
2633c     15 27 02 F6 | 	mov	local01, local03
26340     06 26 66 F0 | 	shl	local01, #6
26344     13 2D 02 F1 | 	add	local04, local01
26348     10 2C 06 F1 | 	add	local04, #16
2634c     16 05 68 FC | 	wrlong	#2, local04
26350                 | '   word[base+64*iii+20]:=0
26350     14 2D 02 F6 | 	mov	local04, local02
26354     15 27 02 F6 | 	mov	local01, local03
26358     06 26 66 F0 | 	shl	local01, #6
2635c     13 2D 02 F1 | 	add	local04, local01
26360     14 2C 06 F1 | 	add	local04, #20
26364     16 01 58 FC | 	wrword	#0, local04
26368                 | '   word[base+64*iii+22]:=8192
26368     14 2D 02 F6 | 	mov	local04, local02
2636c     15 27 02 F6 | 	mov	local01, local03
26370     06 26 66 F0 | 	shl	local01, #6
26374     13 2D 02 F1 | 	add	local04, local01
26378     16 2C 06 F1 | 	add	local04, #22
2637c     10 00 80 FF 
26380     16 01 58 FC | 	wrword	##8192, local04
26384                 | '   word[base+64*iii+24]:=4000+2*iii
26384     15 2D 02 F6 | 	mov	local04, local03
26388     01 2C 66 F0 | 	shl	local04, #1
2638c     07 00 00 FF 
26390     A0 27 06 F6 | 	mov	local01, ##4000
26394     16 27 02 F1 | 	add	local01, local04
26398     14 2D 02 F6 | 	mov	local04, local02
2639c     15 FD 01 F6 | 	mov	result2, local03
263a0     06 FC 65 F0 | 	shl	result2, #6
263a4     FE 2C 02 F1 | 	add	local04, result2
263a8     18 2C 06 F1 | 	add	local04, #24
263ac     16 27 52 FC | 	wrword	local01, local04
263b0                 | '   word[base+64*iii+26]:=2
263b0     14 2D 02 F6 | 	mov	local04, local02
263b4     15 27 02 F6 | 	mov	local01, local03
263b8     06 26 66 F0 | 	shl	local01, #6
263bc     13 2D 02 F1 | 	add	local04, local01
263c0     1A 2C 06 F1 | 	add	local04, #26
263c4     16 05 58 FC | 	wrword	#2, local04
263c8                 | '   long [base+64*iii+8]:=@null | $C0000000
263c8     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
263cc     3E 26 26 F4 | 	bith	local01, #62
263d0     14 2D 02 F6 | 	mov	local04, local02
263d4     15 17 02 F6 | 	mov	arg03, local03
263d8     06 16 66 F0 | 	shl	arg03, #6
263dc     0B 2D 02 F1 | 	add	local04, arg03
263e0     08 2C 06 F1 | 	add	local04, #8
263e4     16 27 62 FC | 	wrlong	local01, local04
263e8                 | '   long[base+64*iii+32]:=0
263e8     14 2D 02 F6 | 	mov	local04, local02
263ec     15 27 02 F6 | 	mov	local01, local03
263f0     06 26 66 F0 | 	shl	local01, #6
263f4     13 2D 02 F1 | 	add	local04, local01
263f8     20 2C 06 F1 | 	add	local04, #32
263fc     16 01 68 FC | 	wrlong	#0, local04
26400                 | '   long[base+64*iii+36]:=0
26400     14 2D 02 F6 | 	mov	local04, local02
26404     15 27 02 F6 | 	mov	local01, local03
26408     06 26 66 F0 | 	shl	local01, #6
2640c     13 2D 02 F1 | 	add	local04, local01
26410     24 2C 06 F1 | 	add	local04, #36
26414     16 01 68 FC | 	wrlong	#0, local04
26418                 | '   long[base+64*iii+40]:=0
26418     14 2D 02 F6 | 	mov	local04, local02
2641c     15 27 02 F6 | 	mov	local01, local03
26420     06 26 66 F0 | 	shl	local01, #6
26424     13 2D 02 F1 | 	add	local04, local01
26428     28 2C 06 F1 | 	add	local04, #40
2642c     16 01 68 FC | 	wrlong	#0, local04
26430                 | '   long[base+64*iii+44]:=0
26430     14 2D 02 F6 | 	mov	local04, local02
26434     15 27 02 F6 | 	mov	local01, local03
26438     06 26 66 F0 | 	shl	local01, #6
2643c     13 2D 02 F1 | 	add	local04, local01
26440     2C 2C 06 F1 | 	add	local04, #44
26444     16 01 68 FC | 	wrlong	#0, local04
26448                 | '   long[base+64*iii+28]:=0
26448     14 2D 02 F6 | 	mov	local04, local02
2644c     15 27 02 F6 | 	mov	local01, local03
26450     06 26 66 F0 | 	shl	local01, #6
26454     13 2D 02 F1 | 	add	local04, local01
26458     1C 2C 06 F1 | 	add	local04, #28
2645c     16 01 68 FC | 	wrlong	#0, local04
26460     01 2A 06 F1 | 	add	local03, #1
26464     08 2A 56 F2 | 	cmps	local03, #8 wc
26468     88 FE 9F CD |  if_b	jmp	#LR__3030
2646c                 | LR__3031
2646c     02 00 00 FF 
26470     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
26474                 | '   
26474                 | ' cog:=coginit(16,@audio,@mailboxaddr)
26474     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
26478     F2 16 02 F6 | 	mov	arg03, objptr
2647c     10 2C 06 F6 | 	mov	local04, #16
26480     28 16 62 FD | 	setq	arg03
26484     0A 2D F2 FC | 	coginit	local04, arg02 wc
26488     01 2C 66 C6 |  if_b	neg	local04, #1
2648c                 | ' waitms(100)
2648c     64 12 06 F6 | 	mov	arg01, #100
26490     78 07 B0 FD | 	call	#__system___waitms
26494                 | ' return cog,base
26494     14 FD 01 F6 | 	mov	result2, local02
26498     16 FB 01 F6 | 	mov	result1, local04
2649c     A7 F0 03 F6 | 	mov	ptra, fp
264a0     B2 00 A0 FD | 	call	#popregs_
264a4                 | _audio096_spin2_start_ret
264a4     2D 00 64 FD | 	ret
264a8                 | 
264a8                 | ' 
264a8                 | ' ' a simple play procedure to not poke everything. 
264a8                 | ' 
264a8                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
264a8                 | _audio096_spin2_play
264a8     0C E4 05 F1 | 	add	objptr, #12
264ac     F2 00 02 F6 | 	mov	_var01, objptr
264b0     06 12 66 F0 | 	shl	arg01, #6
264b4     09 01 02 F1 | 	add	_var01, arg01
264b8     00 13 02 F6 | 	mov	arg01, _var01
264bc     0C 12 06 F1 | 	add	arg01, #12
264c0     09 1B 62 FC | 	wrlong	arg05, arg01
264c4     00 1C 56 F2 | 	cmps	arg06, #0 wc
264c8     00 13 02 36 |  if_ae	mov	arg01, _var01
264cc     10 12 06 31 |  if_ae	add	arg01, #16
264d0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
264d4     02 1A 06 C1 |  if_b	add	arg05, #2
264d8     00 13 02 C6 |  if_b	mov	arg01, _var01
264dc     10 12 06 C1 |  if_b	add	arg01, #16
264e0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
264e4     0B 13 52 F6 | 	abs	arg01, arg03 wc
264e8     0F 1B 80 FF 
264ec     09 1F 1A FD | 	qdiv	##3546895, arg01
264f0                 | ' 
264f0                 | ' base2:=@channel1[0]+64*channel
264f0                 | ' 
264f0                 | ' 
264f0                 | ' long[base2+12]:= len
264f0                 | ' if loop >=0 
264f0                 | '   long[base2+16]:= loop
264f0     0C E4 85 F1 | 	sub	objptr, #12
264f4                 | ' else
264f4                 | '   long[base2+16]:= len+2
264f4                 | ' word[base2+20]:=vol
264f4     00 13 02 F6 | 	mov	arg01, _var01
264f8     14 12 06 F1 | 	add	arg01, #20
264fc     09 19 52 FC | 	wrword	arg04, arg01
26500                 | ' word[base2+24]:= 3546895/splfreq 
26500     00 19 02 F6 | 	mov	arg04, _var01
26504     18 18 06 F1 | 	add	arg04, #24
26508                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26508                 | ' long[base2+28]:=$40000000    
26508                 | ' long[base2+32]:=0    
26508                 | ' long[base2+36]:=0    
26508                 | ' long[base2+40]:=0    
26508                 | ' long[base2+44]:=0    
26508                 | ' long[base2+8]:=sample+$C0000000     
26508     00 00 60 FF 
2650c     00 14 06 F1 | 	add	arg02, ##-1073741824
26510     18 12 62 FD | 	getqx	arg01
26514     09 13 82 F6 | 	negc	arg01, arg01
26518     0C 13 52 FC | 	wrword	arg01, arg04
2651c     00 13 02 F6 | 	mov	arg01, _var01
26520     1A 12 06 F1 | 	add	arg01, #26
26524     09 01 5A FC | 	wrword	#256, arg01
26528     00 13 02 F6 | 	mov	arg01, _var01
2652c     1C 12 06 F1 | 	add	arg01, #28
26530     00 00 A0 FF 
26534     09 01 68 FC | 	wrlong	##1073741824, arg01
26538     00 13 02 F6 | 	mov	arg01, _var01
2653c     20 12 06 F1 | 	add	arg01, #32
26540     09 01 68 FC | 	wrlong	#0, arg01
26544     00 13 02 F6 | 	mov	arg01, _var01
26548     24 12 06 F1 | 	add	arg01, #36
2654c     09 01 68 FC | 	wrlong	#0, arg01
26550     00 13 02 F6 | 	mov	arg01, _var01
26554     28 12 06 F1 | 	add	arg01, #40
26558     09 01 68 FC | 	wrlong	#0, arg01
2655c     00 13 02 F6 | 	mov	arg01, _var01
26560     2C 12 06 F1 | 	add	arg01, #44
26564     09 01 68 FC | 	wrlong	#0, arg01
26568     08 00 06 F1 | 	add	_var01, #8
2656c     00 15 62 FC | 	wrlong	arg02, _var01
26570                 | _audio096_spin2_play_ret
26570     2D 00 64 FD | 	ret
26574                 | 
26574                 | ' 
26574                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
26574                 | _audio096_spin2_play8
26574                 | ' 
26574                 | ' base2:=@channel1[0]+64*channel
26574     0C E4 05 F1 | 	add	objptr, #12
26578     F2 00 02 F6 | 	mov	_var01, objptr
2657c     06 12 66 F0 | 	shl	arg01, #6
26580     09 01 02 F1 | 	add	_var01, arg01
26584                 | ' long[base2]:=0
26584     00 01 68 FC | 	wrlong	#0, _var01
26588                 | ' long[base2+8]:=sample+$40000000 
26588     00 00 20 FF 
2658c     00 14 06 F1 | 	add	arg02, ##1073741824
26590     00 13 02 F6 | 	mov	arg01, _var01
26594     08 12 06 F1 | 	add	arg01, #8
26598     09 15 62 FC | 	wrlong	arg02, arg01
2659c                 | ' if loop>=0
2659c     00 1C 56 F2 | 	cmps	arg06, #0 wc
265a0     0C E4 85 F1 | 	sub	objptr, #12
265a4     1C 00 90 CD |  if_b	jmp	#LR__3040
265a8                 | '   long[base2+12]:=loop
265a8     00 15 02 F6 | 	mov	arg02, _var01
265ac     0C 14 06 F1 | 	add	arg02, #12
265b0     0A 1D 62 FC | 	wrlong	arg06, arg02
265b4                 | '   long[base2+16]:= len
265b4     00 1D 02 F6 | 	mov	arg06, _var01
265b8     10 1C 06 F1 | 	add	arg06, #16
265bc     0E 1B 62 FC | 	wrlong	arg05, arg06
265c0     1C 00 90 FD | 	jmp	#LR__3041
265c4                 | LR__3040
265c4                 | ' else
265c4                 | '   long[base2+12]:= len
265c4     00 1D 02 F6 | 	mov	arg06, _var01
265c8     0C 1C 06 F1 | 	add	arg06, #12
265cc     0E 1B 62 FC | 	wrlong	arg05, arg06
265d0                 | '   long[base2+16]:= len+1
265d0     01 1A 06 F1 | 	add	arg05, #1
265d4     00 13 02 F6 | 	mov	arg01, _var01
265d8     10 12 06 F1 | 	add	arg01, #16
265dc     09 1B 62 FC | 	wrlong	arg05, arg01
265e0                 | LR__3041
265e0     0B 17 52 F6 | 	abs	arg03, arg03 wc
265e4     0F 1B 80 FF 
265e8     0B 1F 1A FD | 	qdiv	##3546895, arg03
265ec                 | ' word[base2+20]:=vol
265ec     00 17 02 F6 | 	mov	arg03, _var01
265f0     14 16 06 F1 | 	add	arg03, #20
265f4     0B 19 52 FC | 	wrword	arg04, arg03
265f8                 | ' word[base2+24]:= 3546895 /splfreq 
265f8     00 13 02 F6 | 	mov	arg01, _var01
265fc     18 12 06 F1 | 	add	arg01, #24
26600                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
26600     1A 00 06 F1 | 	add	_var01, #26
26604     18 18 62 FD | 	getqx	arg04
26608     0C 19 82 F6 | 	negc	arg04, arg04
2660c     09 19 52 FC | 	wrword	arg04, arg01
26610     00 01 5A FC | 	wrword	#256, _var01
26614                 | _audio096_spin2_play8_ret
26614     2D 00 64 FD | 	ret
26618                 | 
26618                 | ' 'long[base2+28]:=$40000000
26618                 | ' 
26618                 | '     
26618                 | ' pub stop(channel) 'silence it
26618                 | _audio096_spin2_stop
26618                 | ' 
26618                 | ' word[@channel1[0]+64*channel+20]:=0
26618     0C E4 05 F1 | 	add	objptr, #12
2661c     F2 00 02 F6 | 	mov	_var01, objptr
26620     09 03 02 F6 | 	mov	_var02, arg01
26624     06 02 66 F0 | 	shl	_var02, #6
26628     01 01 02 F1 | 	add	_var01, _var02
2662c     14 00 06 F1 | 	add	_var01, #20
26630     00 01 58 FC | 	wrword	#0, _var01
26634                 | ' word[@channel1[0]+64*channel+20]:=0
26634     F2 00 02 F6 | 	mov	_var01, objptr
26638     06 12 66 F0 | 	shl	arg01, #6
2663c     09 01 02 F1 | 	add	_var01, arg01
26640     14 00 06 F1 | 	add	_var01, #20
26644     00 01 58 FC | 	wrword	#0, _var01
26648     0C E4 85 F1 | 	sub	objptr, #12
2664c                 | _audio096_spin2_stop_ret
2664c     2D 00 64 FD | 	ret
26650                 | hubexit
26650     81 00 80 FD | 	jmp	#cogexit
26654                 | 
26654                 | __system___setbaud
26654     14 90 06 FB | 	rdlong	muldiva_, #20
26658     09 93 02 F6 | 	mov	muldivb_, arg01
2665c     BA 00 A0 FD | 	call	#divide_
26660     97 06 48 FB | 	callpa	#(@LR__3051-@LR__3050)>>2,fcache_load_ptr_
26664                 | LR__3050
26664     3E FA 9D FA | 	rdpin	result1, #62 wc
26668     FE FC A1 F1 | 	subx	result2, result2
2666c     F4 FF 9F CD |  if_b	jmp	#LR__3050
26670                 | LR__3051
26670     40 7C 64 FD | 	dirl	#62
26674     40 7E 64 FD | 	dirl	#63
26678     F3 92 62 FC | 	wrlong	muldivb_, ptr___system__dat__
2667c     10 92 66 F0 | 	shl	muldivb_, #16
26680     07 14 06 F6 | 	mov	arg02, #7
26684     49 15 02 F1 | 	add	arg02, muldivb_
26688     3E F8 0C FC | 	wrpin	#124, #62
2668c     3E 14 16 FC | 	wxpin	arg02, #62
26690     3F 7C 0C FC | 	wrpin	#62, #63
26694     14 14 06 F1 | 	add	arg02, #20
26698     3F 14 16 FC | 	wxpin	arg02, #63
2669c     41 7C 64 FD | 	dirh	#62
266a0     41 7E 64 FD | 	dirh	#63
266a4                 | __system___setbaud_ret
266a4     2D 00 64 FD | 	ret
266a8                 | 
266a8                 | __system___txraw
266a8     01 4A 05 F6 | 	mov	COUNT_, #1
266ac     A8 00 A0 FD | 	call	#pushregs_
266b0     09 27 02 F6 | 	mov	local01, arg01
266b4     97 06 48 FB | 	callpa	#(@LR__3061-@LR__3060)>>2,fcache_load_ptr_
266b8                 | LR__3060
266b8     3E FA 9D FA | 	rdpin	result1, #62 wc
266bc     FE FC A1 F1 | 	subx	result2, result2
266c0     F4 FF 9F CD |  if_b	jmp	#LR__3060
266c4                 | LR__3061
266c4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
266c8     C2 01 00 AF 
266cc     00 12 06 A6 |  if_e	mov	arg01, ##230400
266d0     80 FF BF AD |  if_e	call	#__system___setbaud
266d4     58 7C 64 FD | 	drvl	#62
266d8     3E 26 26 FC | 	wypin	local01, #62
266dc     01 FA 05 F6 | 	mov	result1, #1
266e0     A7 F0 03 F6 | 	mov	ptra, fp
266e4     B2 00 A0 FD | 	call	#popregs_
266e8                 | __system___txraw_ret
266e8     2D 00 64 FD | 	ret
266ec                 | 
266ec                 | __system___rxraw
266ec     0D 4A 05 F6 | 	mov	COUNT_, #13
266f0     A8 00 A0 FD | 	call	#pushregs_
266f4     09 27 02 F6 | 	mov	local01, arg01
266f8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
266fc     C2 01 00 AF 
26700     00 12 06 A6 |  if_e	mov	arg01, ##230400
26704     4C FF BF AD |  if_e	call	#__system___setbaud
26708     00 26 0E F2 | 	cmp	local01, #0 wz
2670c     20 00 90 AD |  if_e	jmp	#LR__3070
26710     14 2A 06 FB | 	rdlong	local03, #20
26714     0A 2A 46 F0 | 	shr	local03, #10
26718     15 27 02 FD | 	qmul	local01, local03
2671c     1A FA 61 FD | 	getct	result1
26720     18 2C 62 FD | 	getqx	local04
26724     16 FB 01 F1 | 	add	result1, local04
26728     FD 2E 02 F6 | 	mov	local05, result1
2672c     04 00 90 FD | 	jmp	#LR__3071
26730                 | LR__3070
26730     00 2E 06 F6 | 	mov	local05, #0
26734                 | LR__3071
26734     01 30 66 F6 | 	neg	local06, #1
26738     3F 32 06 F6 | 	mov	local07, #63
2673c     00 34 06 F6 | 	mov	local08, #0
26740     04 E6 05 F1 | 	add	ptr___system__dat__, #4
26744     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
26748     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
2674c                 | LR__3072
2674c     08 36 16 F4 | 	testb	local09, #8 wc
26750     09 36 76 F4 | 	testbn	local09, #9 andc
26754     0A 36 46 F0 | 	shr	local09, #10
26758     01 34 06 C6 |  if_b	mov	local08, #1
2675c     40 7E 6C 3D |  if_ae	testp	#63 wz
26760     01 34 06 26 |  if_nc_and_z	mov	local08, #1
26764     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
26768     04 36 46 20 |  if_nc_and_z	shr	local09, #4
2676c                 | LR__3073
2676c     00 28 06 F6 | 	mov	local02, #0
26770     00 34 0E F2 | 	cmp	local08, #0 wz
26774     01 28 66 56 |  if_ne	neg	local02, #1
26778     00 38 06 F6 | 	mov	local10, #0
2677c     00 2A 06 F6 | 	mov	local03, #0
26780     00 26 0E F2 | 	cmp	local01, #0 wz
26784     01 2A 66 56 |  if_ne	neg	local03, #1
26788     00 2C 06 F6 | 	mov	local04, #0
2678c     00 3A 06 F6 | 	mov	local11, #0
26790     17 3D 02 F6 | 	mov	local12, local05
26794     1A FA 61 FD | 	getct	result1
26798     FD 3E 02 F6 | 	mov	local13, result1
2679c     1F 3D 82 F1 | 	sub	local12, local13
267a0     00 3C 56 F2 | 	cmps	local12, #0 wc
267a4     00 3A 26 C6 |  if_b	not	local11, #0
267a8     00 3A 0E F2 | 	cmp	local11, #0 wz
267ac     00 2C 26 56 |  if_ne	not	local04, #0
267b0     16 2B CA F7 | 	test	local03, local04 wz
267b4     00 38 26 56 |  if_ne	not	local10, #0
267b8     1C 29 4A F5 | 	or	local02, local10 wz
267bc     8C FF 9F AD |  if_e	jmp	#LR__3072
267c0     00 34 0E F2 | 	cmp	local08, #0 wz
267c4     1B 31 02 56 |  if_ne	mov	local06, local09
267c8     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
267cc     04 E6 05 F1 | 	add	ptr___system__dat__, #4
267d0     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
267d4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
267d8     18 FB 01 F6 | 	mov	result1, local06
267dc     A7 F0 03 F6 | 	mov	ptra, fp
267e0     B2 00 A0 FD | 	call	#popregs_
267e4                 | __system___rxraw_ret
267e4     2D 00 64 FD | 	ret
267e8                 | 
267e8                 | __system___getus
267e8     1A FC 71 FD | 	getct	result2 wc
267ec     1A 00 62 FD | 	getct	_var01
267f0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
267f4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
267f8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
267fc     20 00 90 5D |  if_ne	jmp	#LR__3080
26800     14 02 06 FB | 	rdlong	_var02, #20
26804     A1 07 00 FF 
26808     40 02 16 FD | 	qdiv	_var02, ##1000000
2680c     10 E6 05 F1 | 	add	ptr___system__dat__, #16
26810     18 FA 61 FD | 	getqx	result1
26814     FD 02 02 F6 | 	mov	_var02, result1
26818     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2681c     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26820                 | LR__3080
26820     01 FD 11 FD | 	qdiv	result2, _var02
26824     19 FC 61 FD | 	getqy	result2
26828     28 FC 61 FD | 	setq	result2
2682c     01 01 12 FD | 	qdiv	_var01, _var02
26830     18 FA 61 FD | 	getqx	result1
26834                 | __system___getus_ret
26834     2D 00 64 FD | 	ret
26838                 | 
26838                 | __system____builtin_memmove
26838     09 01 02 F6 | 	mov	_var01, arg01
2683c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
26840     10 00 90 CD |  if_b	jmp	#LR__3090
26844     0A 03 02 F6 | 	mov	_var02, arg02
26848     0B 03 02 F1 | 	add	_var02, arg03
2684c     01 13 52 F2 | 	cmps	arg01, _var02 wc
26850     48 00 90 CD |  if_b	jmp	#LR__3096
26854                 | LR__3090
26854     0B 05 02 F6 | 	mov	_var03, arg03
26858     02 04 4E F0 | 	shr	_var03, #2 wz
2685c     18 00 90 AD |  if_e	jmp	#LR__3095
26860     97 0A 48 FB | 	callpa	#(@LR__3093-@LR__3091)>>2,fcache_load_ptr_
26864                 | LR__3091
26864     02 09 D8 FC | 	rep	@LR__3094, _var03
26868                 | LR__3092
26868     0A 05 02 FB | 	rdlong	_var03, arg02
2686c     09 05 62 FC | 	wrlong	_var03, arg01
26870     04 12 06 F1 | 	add	arg01, #4
26874     04 14 06 F1 | 	add	arg02, #4
26878                 | LR__3093
26878                 | LR__3094
26878                 | LR__3095
26878     02 16 CE F7 | 	test	arg03, #2 wz
2687c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
26880     09 03 52 5C |  if_ne	wrword	_var02, arg01
26884     02 12 06 51 |  if_ne	add	arg01, #2
26888     02 14 06 51 |  if_ne	add	arg02, #2
2688c     01 16 CE F7 | 	test	arg03, #1 wz
26890     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
26894     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
26898     28 00 90 FD | 	jmp	#LR__3102
2689c                 | LR__3096
2689c     0B 13 02 F1 | 	add	arg01, arg03
268a0     0B 15 02 F1 | 	add	arg02, arg03
268a4     0B 07 0A F6 | 	mov	_var04, arg03 wz
268a8     18 00 90 AD |  if_e	jmp	#LR__3101
268ac     97 0A 48 FB | 	callpa	#(@LR__3099-@LR__3097)>>2,fcache_load_ptr_
268b0                 | LR__3097
268b0     03 09 D8 FC | 	rep	@LR__3100, _var04
268b4                 | LR__3098
268b4     01 12 86 F1 | 	sub	arg01, #1
268b8     01 14 86 F1 | 	sub	arg02, #1
268bc     0A 03 C2 FA | 	rdbyte	_var02, arg02
268c0     09 03 42 FC | 	wrbyte	_var02, arg01
268c4                 | LR__3099
268c4                 | LR__3100
268c4                 | LR__3101
268c4                 | LR__3102
268c4     00 FB 01 F6 | 	mov	result1, _var01
268c8                 | __system____builtin_memmove_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | __system____builtin_strcpy
268cc     09 01 02 F6 | 	mov	_var01, arg01
268d0     97 0A 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
268d4                 | LR__3110
268d4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
268d8     09 FB 41 FC | 	wrbyte	result1, arg01
268dc     01 14 06 F1 | 	add	arg02, #1
268e0     01 12 06 F1 | 	add	arg01, #1
268e4     EC FF 9F 5D |  if_ne	jmp	#LR__3110
268e8                 | LR__3111
268e8     00 FB 01 F6 | 	mov	result1, _var01
268ec                 | __system____builtin_strcpy_ret
268ec     2D 00 64 FD | 	ret
268f0                 | 
268f0                 | __system____topofstack
268f0     00 4A 05 F6 | 	mov	COUNT_, #0
268f4     A8 00 A0 FD | 	call	#pushregs_
268f8     08 F0 07 F1 | 	add	ptra, #8
268fc     04 4E 05 F1 | 	add	fp, #4
26900     A7 12 62 FC | 	wrlong	arg01, fp
26904     A7 FA 01 F6 | 	mov	result1, fp
26908     04 4E 85 F1 | 	sub	fp, #4
2690c     A7 F0 03 F6 | 	mov	ptra, fp
26910     B2 00 A0 FD | 	call	#popregs_
26914                 | __system____topofstack_ret
26914     2D 00 64 FD | 	ret
26918                 | 
26918                 | __system___lockmem
26918     00 FA 05 F6 | 	mov	result1, #0
2691c     01 FA 61 FD | 	cogid	result1
26920     00 FB 05 F1 | 	add	result1, #256
26924                 | LR__3120
26924     09 01 0A FB | 	rdlong	_var01, arg01 wz
26928     09 FB 61 AC |  if_e	wrlong	result1, arg01
2692c     09 01 02 AB |  if_e	rdlong	_var01, arg01
26930     09 01 02 AB |  if_e	rdlong	_var01, arg01
26934     FD 00 0A F2 | 	cmp	_var01, result1 wz
26938     E8 FF 9F 5D |  if_ne	jmp	#LR__3120
2693c                 | __system___lockmem_ret
2693c     2D 00 64 FD | 	ret
26940                 | 
26940                 | __system___string_cmp
26940     97 14 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
26944                 | LR__3130
26944     09 01 C2 FA | 	rdbyte	_var01, arg01
26948     0A 03 C2 FA | 	rdbyte	_var02, arg02
2694c     00 05 02 F6 | 	mov	_var03, _var01
26950     01 05 8A F1 | 	sub	_var03, _var02 wz
26954     01 12 06 F1 | 	add	arg01, #1
26958     01 14 06 F1 | 	add	arg02, #1
2695c     0C 00 90 5D |  if_ne	jmp	#LR__3132
26960     00 00 0E F2 | 	cmp	_var01, #0 wz
26964     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
26968     D8 FF 9F 5D |  if_ne	jmp	#LR__3130
2696c                 | LR__3131
2696c                 | LR__3132
2696c     02 FB 01 F6 | 	mov	result1, _var03
26970                 | __system___string_cmp_ret
26970     2D 00 64 FD | 	ret
26974                 | 
26974                 | __system___string_concat
26974     05 4A 05 F6 | 	mov	COUNT_, #5
26978     A8 00 A0 FD | 	call	#pushregs_
2697c     09 27 02 F6 | 	mov	local01, arg01
26980     0A 29 02 F6 | 	mov	local02, arg02
26984     13 13 02 F6 | 	mov	arg01, local01
26988     09 2B 02 F6 | 	mov	local03, arg01
2698c     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
26990                 | LR__3140
26990     15 FB C9 FA | 	rdbyte	result1, local03 wz
26994     01 2A 06 51 |  if_ne	add	local03, #1
26998     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
2699c                 | LR__3141
2699c     09 2B 82 F1 | 	sub	local03, arg01
269a0     15 2D 02 F6 | 	mov	local04, local03
269a4     14 13 02 F6 | 	mov	arg01, local02
269a8     09 2B 02 F6 | 	mov	local03, arg01
269ac     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
269b0                 | LR__3142
269b0     15 FB C9 FA | 	rdbyte	result1, local03 wz
269b4     01 2A 06 51 |  if_ne	add	local03, #1
269b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
269bc                 | LR__3143
269bc     09 2B 82 F1 | 	sub	local03, arg01
269c0     16 13 02 F6 | 	mov	arg01, local04
269c4     15 13 02 F1 | 	add	arg01, local03
269c8     01 12 06 F1 | 	add	arg01, #1
269cc     EC 40 B0 FD | 	call	#__system___gc_alloc_managed
269d0     FD 2E 0A F6 | 	mov	local05, result1 wz
269d4     28 00 90 AD |  if_e	jmp	#LR__3144
269d8     17 13 02 F6 | 	mov	arg01, local05
269dc     13 15 02 F6 | 	mov	arg02, local01
269e0     16 17 02 F6 | 	mov	arg03, local04
269e4     50 FE BF FD | 	call	#__system____builtin_memmove
269e8     17 13 02 F6 | 	mov	arg01, local05
269ec     16 13 02 F1 | 	add	arg01, local04
269f0     01 2A 06 F1 | 	add	local03, #1
269f4     14 15 02 F6 | 	mov	arg02, local02
269f8     15 17 02 F6 | 	mov	arg03, local03
269fc     38 FE BF FD | 	call	#__system____builtin_memmove
26a00                 | LR__3144
26a00     17 FB 01 F6 | 	mov	result1, local05
26a04     A7 F0 03 F6 | 	mov	ptra, fp
26a08     B2 00 A0 FD | 	call	#popregs_
26a0c                 | __system___string_concat_ret
26a0c     2D 00 64 FD | 	ret
26a10                 | 
26a10                 | __system___tx
26a10     02 4A 05 F6 | 	mov	COUNT_, #2
26a14     A8 00 A0 FD | 	call	#pushregs_
26a18     09 27 02 F6 | 	mov	local01, arg01
26a1c     0A 26 0E F2 | 	cmp	local01, #10 wz
26a20     18 00 90 5D |  if_ne	jmp	#LR__3150
26a24     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a28     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
26a2c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a30     02 28 CE F7 | 	test	local02, #2 wz
26a34     0D 12 06 56 |  if_ne	mov	arg01, #13
26a38     6C FC BF 5D |  if_ne	call	#__system___txraw
26a3c                 | LR__3150
26a3c     13 13 02 F6 | 	mov	arg01, local01
26a40     64 FC BF FD | 	call	#__system___txraw
26a44     A7 F0 03 F6 | 	mov	ptra, fp
26a48     B2 00 A0 FD | 	call	#popregs_
26a4c                 | __system___tx_ret
26a4c     2D 00 64 FD | 	ret
26a50                 | 
26a50                 | __system___rx
26a50     01 4A 05 F6 | 	mov	COUNT_, #1
26a54     A8 00 A0 FD | 	call	#pushregs_
26a58                 | LR__3160
26a58     00 12 06 F6 | 	mov	arg01, #0
26a5c     8C FC BF FD | 	call	#__system___rxraw
26a60     FD 26 02 F6 | 	mov	local01, result1
26a64     FF FF 7F FF 
26a68     FF 27 0E F2 | 	cmp	local01, ##-1 wz
26a6c     E8 FF 9F AD |  if_e	jmp	#LR__3160
26a70     0D 26 0E F2 | 	cmp	local01, #13 wz
26a74     14 00 90 5D |  if_ne	jmp	#LR__3161
26a78     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a7c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
26a80     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a84     02 FA CD F7 | 	test	result1, #2 wz
26a88     0A 26 06 56 |  if_ne	mov	local01, #10
26a8c                 | LR__3161
26a8c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
26a90     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
26a94     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
26a98     01 12 CE F7 | 	test	arg01, #1 wz
26a9c     1C 00 90 AD |  if_e	jmp	#LR__3164
26aa0     7F 26 0E F2 | 	cmp	local01, #127 wz
26aa4     0C 00 90 5D |  if_ne	jmp	#LR__3162
26aa8     08 12 06 F6 | 	mov	arg01, #8
26aac     60 FF BF FD | 	call	#__system___tx
26ab0     08 00 90 FD | 	jmp	#LR__3163
26ab4                 | LR__3162
26ab4     13 13 02 F6 | 	mov	arg01, local01
26ab8     54 FF BF FD | 	call	#__system___tx
26abc                 | LR__3163
26abc                 | LR__3164
26abc     13 FB 01 F6 | 	mov	result1, local01
26ac0     A7 F0 03 F6 | 	mov	ptra, fp
26ac4     B2 00 A0 FD | 	call	#popregs_
26ac8                 | __system___rx_ret
26ac8     2D 00 64 FD | 	ret
26acc                 | 
26acc                 | __system___pinwrite
26acc     09 01 02 F6 | 	mov	_var01, arg01
26ad0     1F 00 06 F5 | 	and	_var01, #31
26ad4     20 12 CE F7 | 	test	arg01, #32 wz
26ad8     06 12 46 F0 | 	shr	arg01, #6
26adc     09 13 CA F9 | 	bmask	arg01, arg01
26ae0     00 13 62 F0 | 	shl	arg01, _var01
26ae4     00 15 62 F0 | 	shl	arg02, _var01
26ae8     1C 00 90 AD |  if_e	jmp	#LR__3170
26aec     09 F7 43 F5 | 	or	dirb, arg01
26af0     FD 01 02 F6 | 	mov	_var01, outb
26af4     09 01 22 F5 | 	andn	_var01, arg01
26af8     09 15 02 F5 | 	and	arg02, arg01
26afc     0A 01 42 F5 | 	or	_var01, arg02
26b00     00 FB 03 F6 | 	mov	outb, _var01
26b04     18 00 90 FD | 	jmp	#LR__3171
26b08                 | LR__3170
26b08     09 F5 43 F5 | 	or	dira, arg01
26b0c     FC 01 02 F6 | 	mov	_var01, outa
26b10     09 01 22 F5 | 	andn	_var01, arg01
26b14     09 15 02 F5 | 	and	arg02, arg01
26b18     0A 01 42 F5 | 	or	_var01, arg02
26b1c     00 F9 03 F6 | 	mov	outa, _var01
26b20                 | LR__3171
26b20                 | __system___pinwrite_ret
26b20     2D 00 64 FD | 	ret
26b24                 | 
26b24                 | __system___basic_read_line
26b24     06 4A 05 F6 | 	mov	COUNT_, #6
26b28     A8 00 A0 FD | 	call	#pushregs_
26b2c     09 27 02 F6 | 	mov	local01, arg01
26b30     00 28 06 F6 | 	mov	local02, #0
26b34     18 2A 06 F6 | 	mov	local03, #24
26b38     00 2C 06 F6 | 	mov	local04, #0
26b3c     18 12 06 F6 | 	mov	arg01, #24
26b40     78 3F B0 FD | 	call	#__system___gc_alloc_managed
26b44     FD 2E 0A F6 | 	mov	local05, result1 wz
26b48     17 FB 01 A6 |  if_e	mov	result1, local05
26b4c     B0 00 90 AD |  if_e	jmp	#LR__3183
26b50                 | LR__3180
26b50     13 13 02 F6 | 	mov	arg01, local01
26b54     7C 0B B0 FD | 	call	#__system___basic_get_char
26b58     FD 30 02 F6 | 	mov	local06, result1
26b5c     01 30 56 F2 | 	cmps	local06, #1 wc
26b60     8C 00 90 CD |  if_b	jmp	#LR__3182
26b64     0A 30 0E F2 | 	cmp	local06, #10 wz
26b68     10 00 90 5D |  if_ne	jmp	#LR__3181
26b6c     00 2C 0E F2 | 	cmp	local04, #0 wz
26b70     01 28 56 52 |  if_ne	cmps	local02, #1 wc
26b74     01 28 86 11 |  if_a	sub	local02, #1
26b78     74 00 90 FD | 	jmp	#LR__3182
26b7c                 | LR__3181
26b7c     0D 30 0E F2 | 	cmp	local06, #13 wz
26b80     01 2C 06 A6 |  if_e	mov	local04, #1
26b84     00 2C 06 56 |  if_ne	mov	local04, #0
26b88     08 30 0E F2 | 	cmp	local06, #8 wz
26b8c     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
26b90     01 28 56 A2 |  if_e	cmps	local02, #1 wc
26b94     01 28 86 21 |  if_nc_and_z	sub	local02, #1
26b98     B4 FF 9F AD |  if_e	jmp	#LR__3180
26b9c     17 17 02 F6 | 	mov	arg03, local05
26ba0     14 17 02 F1 | 	add	arg03, local02
26ba4     0B 31 42 FC | 	wrbyte	local06, arg03
26ba8     01 28 06 F1 | 	add	local02, #1
26bac     15 29 0A F2 | 	cmp	local02, local03 wz
26bb0     9C FF 9F 5D |  if_ne	jmp	#LR__3180
26bb4     15 13 02 F6 | 	mov	arg01, local03
26bb8     20 12 06 F1 | 	add	arg01, #32
26bbc     FC 3E B0 FD | 	call	#__system___gc_alloc_managed
26bc0     FD 30 0A F6 | 	mov	local06, result1 wz
26bc4     18 FB 01 A6 |  if_e	mov	result1, local06
26bc8     34 00 90 AD |  if_e	jmp	#LR__3183
26bcc     18 13 02 F6 | 	mov	arg01, local06
26bd0     17 15 02 F6 | 	mov	arg02, local05
26bd4     15 17 02 F6 | 	mov	arg03, local03
26bd8     5C FC BF FD | 	call	#__system____builtin_memmove
26bdc     20 2A 06 F1 | 	add	local03, #32
26be0     17 13 02 F6 | 	mov	arg01, local05
26be4     10 40 B0 FD | 	call	#__system___gc_free
26be8     18 2F 02 F6 | 	mov	local05, local06
26bec     60 FF 9F FD | 	jmp	#LR__3180
26bf0                 | LR__3182
26bf0     17 31 02 F6 | 	mov	local06, local05
26bf4     14 31 02 F1 | 	add	local06, local02
26bf8     18 01 48 FC | 	wrbyte	#0, local06
26bfc     17 FB 01 F6 | 	mov	result1, local05
26c00                 | LR__3183
26c00     A7 F0 03 F6 | 	mov	ptra, fp
26c04     B2 00 A0 FD | 	call	#popregs_
26c08                 | __system___basic_read_line_ret
26c08     2D 00 64 FD | 	ret
26c0c                 | 
26c0c                 | __system___waitms
26c0c     09 01 02 F6 | 	mov	_var01, arg01
26c10     1A 02 62 FD | 	getct	_var02
26c14     14 04 06 FB | 	rdlong	_var03, #20
26c18     97 14 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
26c1c                 | LR__3190
26c1c     01 00 00 FF 
26c20     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
26c24     1C 00 90 CD |  if_b	jmp	#LR__3192
26c28     02 03 02 F1 | 	add	_var02, _var03
26c2c     01 13 02 F6 | 	mov	arg01, _var02
26c30     00 12 66 FA | 	addct1	arg01, #0
26c34     24 22 60 FD | 	waitct1
26c38     01 00 00 FF 
26c3c     E8 01 86 F1 | 	sub	_var01, ##1000
26c40     D8 FF 9F FD | 	jmp	#LR__3190
26c44                 | LR__3191
26c44                 | LR__3192
26c44     01 00 56 F2 | 	cmps	_var01, #1 wc
26c48     28 00 90 CD |  if_b	jmp	#LR__3193
26c4c     02 01 02 FD | 	qmul	_var01, _var03
26c50     01 00 00 FF 
26c54     E8 17 06 F6 | 	mov	arg03, ##1000
26c58     19 FA 61 FD | 	getqy	result1
26c5c     18 12 62 FD | 	getqx	arg01
26c60     28 FA 61 FD | 	setq	result1
26c64     0B 13 12 FD | 	qdiv	arg01, arg03
26c68     18 12 62 FD | 	getqx	arg01
26c6c     01 13 62 FA | 	addct1	arg01, _var02
26c70     24 22 60 FD | 	waitct1
26c74                 | LR__3193
26c74                 | __system___waitms_ret
26c74     2D 00 64 FD | 	ret
26c78                 | 
26c78                 | __system___waitus
26c78     09 01 02 F6 | 	mov	_var01, arg01
26c7c     1A 02 62 FD | 	getct	_var02
26c80     14 04 06 FB | 	rdlong	_var03, #20
26c84     97 14 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
26c88                 | LR__3200
26c88     A1 07 00 FF 
26c8c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
26c90     1C 00 90 CD |  if_b	jmp	#LR__3202
26c94     02 03 02 F1 | 	add	_var02, _var03
26c98     01 13 02 F6 | 	mov	arg01, _var02
26c9c     00 12 66 FA | 	addct1	arg01, #0
26ca0     24 22 60 FD | 	waitct1
26ca4     A1 07 00 FF 
26ca8     40 00 86 F1 | 	sub	_var01, ##1000000
26cac     D8 FF 9F FD | 	jmp	#LR__3200
26cb0                 | LR__3201
26cb0                 | LR__3202
26cb0     01 00 56 F2 | 	cmps	_var01, #1 wc
26cb4     28 00 90 CD |  if_b	jmp	#LR__3203
26cb8     02 01 02 FD | 	qmul	_var01, _var03
26cbc     A1 07 00 FF 
26cc0     40 16 06 F6 | 	mov	arg03, ##1000000
26cc4     19 FA 61 FD | 	getqy	result1
26cc8     18 12 62 FD | 	getqx	arg01
26ccc     28 FA 61 FD | 	setq	result1
26cd0     0B 13 12 FD | 	qdiv	arg01, arg03
26cd4     18 FA 61 FD | 	getqx	result1
26cd8     FD 02 62 FA | 	addct1	_var02, result1
26cdc     24 22 60 FD | 	waitct1
26ce0                 | LR__3203
26ce0                 | __system___waitus_ret
26ce0     2D 00 64 FD | 	ret
26ce4                 | 
26ce4                 | __system___mount
26ce4     0B 4A 05 F6 | 	mov	COUNT_, #11
26ce8     A8 00 A0 FD | 	call	#pushregs_
26cec     09 27 02 F6 | 	mov	local01, arg01
26cf0     0A 29 0A F6 | 	mov	local02, arg02 wz
26cf4     01 2A 66 F6 | 	neg	local03, #1
26cf8     01 FA 65 A6 |  if_e	neg	result1, #1
26cfc     98 02 90 AD |  if_e	jmp	#LR__3225
26d00     13 FB C1 FA | 	rdbyte	result1, local01
26d04     2F FA 0D F2 | 	cmp	result1, #47 wz
26d08     28 00 90 5D |  if_ne	jmp	#LR__3212
26d0c     13 13 02 F6 | 	mov	arg01, local01
26d10     09 2D 02 F6 | 	mov	local04, arg01
26d14     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
26d18                 | LR__3210
26d18     16 FB C9 FA | 	rdbyte	result1, local04 wz
26d1c     01 2C 06 51 |  if_ne	add	local04, #1
26d20     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
26d24                 | LR__3211
26d24     09 2D 82 F1 | 	sub	local04, arg01
26d28     16 FB 01 F6 | 	mov	result1, local04
26d2c     10 FA 55 F2 | 	cmps	result1, #16 wc
26d30     14 00 90 CD |  if_b	jmp	#LR__3213
26d34                 | LR__3212
26d34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d38     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
26d3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d40     01 FA 65 F6 | 	neg	result1, #1
26d44     50 02 90 FD | 	jmp	#LR__3225
26d48                 | LR__3213
26d48     00 2E 06 F6 | 	mov	local05, #0
26d4c                 | LR__3214
26d4c     04 2E 56 F2 | 	cmps	local05, #4 wc
26d50     B0 00 90 3D |  if_ae	jmp	#LR__3219
26d54     17 13 02 F6 | 	mov	arg01, local05
26d58     02 12 66 F0 | 	shl	arg01, #2
26d5c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26d60     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26d64     09 FB 09 FB | 	rdlong	result1, arg01 wz
26d68     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26d6c     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
26d70     17 2B 02 86 |  if_c_and_z	mov	local03, local05
26d74     84 00 90 8D |  if_c_and_z	jmp	#LR__3218
26d78     17 13 02 F6 | 	mov	arg01, local05
26d7c     02 12 66 F0 | 	shl	arg01, #2
26d80     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26d84     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26d88     09 13 02 FB | 	rdlong	arg01, arg01
26d8c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26d90     09 2D 02 F6 | 	mov	local04, arg01
26d94     97 06 48 FB | 	callpa	#(@LR__3216-@LR__3215)>>2,fcache_load_ptr_
26d98                 | LR__3215
26d98     16 FB C9 FA | 	rdbyte	result1, local04 wz
26d9c     01 2C 06 51 |  if_ne	add	local04, #1
26da0     F4 FF 9F 5D |  if_ne	jmp	#LR__3215
26da4                 | LR__3216
26da4     09 2D 82 F1 | 	sub	local04, arg01
26da8     16 31 02 F6 | 	mov	local06, local04
26dac     18 13 02 F6 | 	mov	arg01, local06
26db0     13 13 02 F1 | 	add	arg01, local01
26db4     09 FB C1 FA | 	rdbyte	result1, arg01
26db8     2F FA 0D F2 | 	cmp	result1, #47 wz
26dbc     18 33 02 56 |  if_ne	mov	local07, local06
26dc0     13 33 02 51 |  if_ne	add	local07, local01
26dc4     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
26dc8     30 00 90 5D |  if_ne	jmp	#LR__3217
26dcc     17 17 02 F6 | 	mov	arg03, local05
26dd0     02 16 66 F0 | 	shl	arg03, #2
26dd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26dd8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
26ddc     0B 15 02 FB | 	rdlong	arg02, arg03
26de0     13 13 02 F6 | 	mov	arg01, local01
26de4     18 17 02 F6 | 	mov	arg03, local06
26de8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26dec     4C 51 B0 FD | 	call	#__system__strncmp
26df0     00 FA 0D F2 | 	cmp	result1, #0 wz
26df4     17 2B 02 A6 |  if_e	mov	local03, local05
26df8     08 00 90 AD |  if_e	jmp	#LR__3219
26dfc                 | LR__3217
26dfc                 | LR__3218
26dfc     01 2E 06 F1 | 	add	local05, #1
26e00     48 FF 9F FD | 	jmp	#LR__3214
26e04                 | LR__3219
26e04     FF FF 7F FF 
26e08     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
26e0c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26e10     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
26e14     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26e18     01 FA 65 A6 |  if_e	neg	result1, #1
26e1c     78 01 90 AD |  if_e	jmp	#LR__3225
26e20     15 2F 02 F6 | 	mov	local05, local03
26e24     17 33 02 F6 | 	mov	local07, local05
26e28     02 32 66 F0 | 	shl	local07, #2
26e2c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26e30     F3 32 02 F1 | 	add	local07, ptr___system__dat__
26e34     19 31 0A FB | 	rdlong	local06, local07 wz
26e38     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26e3c     58 00 90 AD |  if_e	jmp	#LR__3220
26e40     4C 30 06 F1 | 	add	local06, #76
26e44     18 33 0A FB | 	rdlong	local07, local06 wz
26e48     4C 30 86 F1 | 	sub	local06, #76
26e4c     48 00 90 AD |  if_e	jmp	#LR__3220
26e50     4C 30 06 F1 | 	add	local06, #76
26e54     18 33 02 FB | 	rdlong	local07, local06
26e58     19 2B 02 F6 | 	mov	local03, local07
26e5c     13 32 46 F7 | 	zerox	local07, #19
26e60     14 2A 46 F0 | 	shr	local03, #20
26e64     02 2A 66 F0 | 	shl	local03, #2
26e68     ED 2A 02 F1 | 	add	local03, __methods__
26e6c     15 2B 02 FB | 	rdlong	local03, local03
26e70     17 31 02 F6 | 	mov	local06, local05
26e74     02 30 66 F0 | 	shl	local06, #2
26e78     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26e7c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
26e80     18 13 02 FB | 	rdlong	arg01, local06
26e84     F2 30 02 F6 | 	mov	local06, objptr
26e88     19 E5 01 F6 | 	mov	objptr, local07
26e8c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26e90     2D 2A 62 FD | 	call	local03
26e94     18 E5 01 F6 | 	mov	objptr, local06
26e98                 | LR__3220
26e98     17 35 02 F6 | 	mov	local08, local05
26e9c     02 34 66 F0 | 	shl	local08, #2
26ea0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26ea4     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26ea8     1A 29 62 FC | 	wrlong	local02, local08
26eac     00 28 0E F2 | 	cmp	local02, #0 wz
26eb0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26eb4     18 00 90 5D |  if_ne	jmp	#LR__3221
26eb8     02 2E 66 F0 | 	shl	local05, #2
26ebc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26ec0     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26ec4     17 01 68 FC | 	wrlong	#0, local05
26ec8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26ecc     C4 00 90 FD | 	jmp	#LR__3224
26ed0                 | LR__3221
26ed0     17 37 02 F6 | 	mov	local09, local05
26ed4     04 36 66 F0 | 	shl	local09, #4
26ed8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
26edc     F3 36 02 F1 | 	add	local09, ptr___system__dat__
26ee0     1B 13 02 F6 | 	mov	arg01, local09
26ee4     13 15 02 F6 | 	mov	arg02, local01
26ee8     10 16 06 F6 | 	mov	arg03, #16
26eec     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
26ef0     9C 4F B0 FD | 	call	#__system__strncpy
26ef4     48 28 06 F1 | 	add	local02, #72
26ef8     14 35 0A FB | 	rdlong	local08, local02 wz
26efc     48 28 86 F1 | 	sub	local02, #72
26f00     7C 00 90 AD |  if_e	jmp	#LR__3223
26f04     48 28 06 F1 | 	add	local02, #72
26f08     14 35 02 FB | 	rdlong	local08, local02
26f0c     1A 39 02 F6 | 	mov	local10, local08
26f10     13 34 46 F7 | 	zerox	local08, #19
26f14     14 38 46 F0 | 	shr	local10, #20
26f18     02 38 66 F0 | 	shl	local10, #2
26f1c     ED 38 02 F1 | 	add	local10, __methods__
26f20     1C 39 02 FB | 	rdlong	local10, local10
26f24     1B 13 02 F6 | 	mov	arg01, local09
26f28     F2 3A 02 F6 | 	mov	local11, objptr
26f2c     1A E5 01 F6 | 	mov	objptr, local08
26f30     2D 38 62 FD | 	call	local10
26f34     1D E5 01 F6 | 	mov	objptr, local11
26f38     FD 12 0A F6 | 	mov	arg01, result1 wz
26f3c     40 00 90 AD |  if_e	jmp	#LR__3222
26f40     17 35 02 F6 | 	mov	local08, local05
26f44     02 34 66 F0 | 	shl	local08, #2
26f48     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26f4c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
26f50     1A 01 68 FC | 	wrlong	#0, local08
26f54     02 2E 66 F0 | 	shl	local05, #2
26f58     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
26f5c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26f60     17 01 68 FC | 	wrlong	#0, local05
26f64     09 13 6A F6 | 	neg	arg01, arg01 wz
26f68     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
26f6c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26f70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26f74     01 FA 65 56 |  if_ne	neg	result1, #1
26f78     00 FA 05 A6 |  if_e	mov	result1, #0
26f7c     18 00 90 FD | 	jmp	#LR__3225
26f80                 | LR__3222
26f80                 | LR__3223
26f80     02 2E 66 F0 | 	shl	local05, #2
26f84     64 E6 05 F1 | 	add	ptr___system__dat__, #100
26f88     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
26f8c     17 37 62 FC | 	wrlong	local09, local05
26f90     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
26f94                 | LR__3224
26f94     00 FA 05 F6 | 	mov	result1, #0
26f98                 | LR__3225
26f98     A7 F0 03 F6 | 	mov	ptra, fp
26f9c     B2 00 A0 FD | 	call	#popregs_
26fa0                 | __system___mount_ret
26fa0     2D 00 64 FD | 	ret
26fa4                 | 
26fa4                 | __system___chdir
26fa4     00 4A 05 F6 | 	mov	COUNT_, #0
26fa8     A8 00 A0 FD | 	call	#pushregs_
26fac     40 F0 07 F1 | 	add	ptra, #64
26fb0     04 4E 05 F1 | 	add	fp, #4
26fb4     A7 12 62 FC | 	wrlong	arg01, fp
26fb8     04 4E 05 F1 | 	add	fp, #4
26fbc     A7 14 02 F6 | 	mov	arg02, fp
26fc0     08 4E 85 F1 | 	sub	fp, #8
26fc4     6C 4B B0 FD | 	call	#__system__stat
26fc8     3C 4E 05 F1 | 	add	fp, #60
26fcc     A7 FA 61 FC | 	wrlong	result1, fp
26fd0     3C 4E 85 F1 | 	sub	fp, #60
26fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
26fd8     3C 4E 05 51 |  if_ne	add	fp, #60
26fdc     A7 FA 01 5B |  if_ne	rdlong	result1, fp
26fe0     3C 4E 85 51 |  if_ne	sub	fp, #60
26fe4     BC 00 90 5D |  if_ne	jmp	#LR__3232
26fe8     10 4E 05 F1 | 	add	fp, #16
26fec     A7 12 02 FB | 	rdlong	arg01, fp
26ff0     10 4E 85 F1 | 	sub	fp, #16
26ff4     78 00 00 FF 
26ff8     00 12 06 F5 | 	and	arg01, ##61440
26ffc     08 00 00 FF 
27000     00 12 0E F2 | 	cmp	arg01, ##4096 wz
27004     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
27008     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
2700c     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
27010     01 FA 65 56 |  if_ne	neg	result1, #1
27014     8C 00 90 5D |  if_ne	jmp	#LR__3232
27018     04 4E 05 F1 | 	add	fp, #4
2701c     A7 16 02 FB | 	rdlong	arg03, fp
27020     04 4E 85 F1 | 	sub	fp, #4
27024     0B 17 C2 FA | 	rdbyte	arg03, arg03
27028     2F 16 0E F2 | 	cmp	arg03, #47 wz
2702c     24 00 90 5D |  if_ne	jmp	#LR__3230
27030     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27034     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
27038     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2703c     04 4E 05 F1 | 	add	fp, #4
27040     A7 14 02 FB | 	rdlong	arg02, fp
27044     04 4E 85 F1 | 	sub	fp, #4
27048     00 17 06 F6 | 	mov	arg03, #256
2704c     40 4E B0 FD | 	call	#__system__strncpy
27050     4C 00 90 FD | 	jmp	#LR__3231
27054                 | LR__3230
27054     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27058     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2705c     38 4E 05 F1 | 	add	fp, #56
27060     A7 12 62 FC | 	wrlong	arg01, fp
27064     38 4E 85 F1 | 	sub	fp, #56
27068     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2706c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27070     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27074     00 17 06 F6 | 	mov	arg03, #256
27078     14 4E B0 FD | 	call	#__system__strncpy
2707c     38 4E 05 F1 | 	add	fp, #56
27080     A7 12 02 FB | 	rdlong	arg01, fp
27084     34 4E 85 F1 | 	sub	fp, #52
27088     A7 14 02 FB | 	rdlong	arg02, fp
2708c     04 4E 85 F1 | 	sub	fp, #4
27090     84 E6 05 F1 | 	add	ptr___system__dat__, #132
27094     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
27098     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2709c     10 00 B0 FD | 	call	#__system____getvfsforfile
270a0                 | LR__3231
270a0     00 FA 05 F6 | 	mov	result1, #0
270a4                 | LR__3232
270a4     A7 F0 03 F6 | 	mov	ptra, fp
270a8     B2 00 A0 FD | 	call	#popregs_
270ac                 | __system___chdir_ret
270ac     2D 00 64 FD | 	ret
270b0                 | 
270b0                 | __system____getvfsforfile
270b0     0E 4A 05 F6 | 	mov	COUNT_, #14
270b4     A8 00 A0 FD | 	call	#pushregs_
270b8     09 27 02 F6 | 	mov	local01, arg01
270bc     0A 29 02 F6 | 	mov	local02, arg02
270c0     0B 2B 02 F6 | 	mov	local03, arg03
270c4     97 10 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
270c8                 | LR__3240
270c8     14 FB C1 FA | 	rdbyte	result1, local02
270cc     2F FA 0D F2 | 	cmp	result1, #47 wz
270d0     01 28 06 A1 |  if_e	add	local02, #1
270d4     14 2D C2 AA |  if_e	rdbyte	local04, local02
270d8     01 28 86 A1 |  if_e	sub	local02, #1
270dc     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
270e0     01 28 06 A1 |  if_e	add	local02, #1
270e4     E0 FF 9F AD |  if_e	jmp	#LR__3240
270e8                 | LR__3241
270e8     14 2D C2 FA | 	rdbyte	local04, local02
270ec     2F 2C 0E F2 | 	cmp	local04, #47 wz
270f0     14 00 90 5D |  if_ne	jmp	#LR__3242
270f4     13 13 02 F6 | 	mov	arg01, local01
270f8     14 15 02 F6 | 	mov	arg02, local02
270fc     00 17 06 F6 | 	mov	arg03, #256
27100     8C 4D B0 FD | 	call	#__system__strncpy
27104     7C 00 90 FD | 	jmp	#LR__3244
27108                 | LR__3242
27108     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2710c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
27110     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
27114     13 13 02 F6 | 	mov	arg01, local01
27118     00 17 06 F6 | 	mov	arg03, #256
2711c     70 4D B0 FD | 	call	#__system__strncpy
27120     14 2D CA FA | 	rdbyte	local04, local02 wz
27124     5C 00 90 AD |  if_e	jmp	#LR__3243
27128     14 2D C2 FA | 	rdbyte	local04, local02
2712c     2E 2C 0E F2 | 	cmp	local04, #46 wz
27130     01 28 06 A1 |  if_e	add	local02, #1
27134     14 2F C2 AA |  if_e	rdbyte	local05, local02
27138     01 28 86 A1 |  if_e	sub	local02, #1
2713c     17 31 02 A6 |  if_e	mov	local06, local05
27140     07 30 4E A7 |  if_e	zerox	local06, #7 wz
27144     3C 00 90 AD |  if_e	jmp	#LR__3243
27148     13 2F C2 FA | 	rdbyte	local05, local01
2714c     2F 2E 0E F2 | 	cmp	local05, #47 wz
27150     01 26 06 A1 |  if_e	add	local01, #1
27154     13 2D C2 AA |  if_e	rdbyte	local04, local01
27158     01 26 86 A1 |  if_e	sub	local01, #1
2715c     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
27160     B2 01 00 5F 
27164     28 14 06 56 |  if_ne	mov	arg02, ##@LR__5370
27168     13 13 02 56 |  if_ne	mov	arg01, local01
2716c     00 17 06 56 |  if_ne	mov	arg03, #256
27170     68 4D B0 5D |  if_ne	call	#__system__strncat
27174     13 13 02 F6 | 	mov	arg01, local01
27178     14 15 02 F6 | 	mov	arg02, local02
2717c     00 17 06 F6 | 	mov	arg03, #256
27180     58 4D B0 FD | 	call	#__system__strncat
27184                 | LR__3243
27184                 | LR__3244
27184     13 13 02 F6 | 	mov	arg01, local01
27188     10 4F B0 FD | 	call	#__system___normalizeName
2718c     13 2D CA FA | 	rdbyte	local04, local01 wz
27190     1C 00 90 AD |  if_e	jmp	#LR__3245
27194     13 2D C2 FA | 	rdbyte	local04, local01
27198     2F 2C 0E F2 | 	cmp	local04, #47 wz
2719c     01 26 06 A1 |  if_e	add	local01, #1
271a0     13 31 C2 AA |  if_e	rdbyte	local06, local01
271a4     01 26 86 A1 |  if_e	sub	local01, #1
271a8     00 30 4E A2 |  if_e	cmps	local06, #0 wz
271ac     18 00 90 5D |  if_ne	jmp	#LR__3246
271b0                 | LR__3245
271b0     01 00 00 FF 
271b4     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
271b8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
271bc     01 00 00 FF 
271c0     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
271c4     EC 01 90 FD | 	jmp	#LR__3260
271c8                 | LR__3246
271c8     00 32 06 F6 | 	mov	local07, #0
271cc                 | LR__3247
271cc     04 32 56 F2 | 	cmps	local07, #4 wc
271d0     CC 01 90 3D |  if_ae	jmp	#LR__3259
271d4     19 31 02 F6 | 	mov	local06, local07
271d8     02 30 66 F0 | 	shl	local06, #2
271dc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
271e0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
271e4     18 31 0A FB | 	rdlong	local06, local06 wz
271e8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
271ec     A8 01 90 AD |  if_e	jmp	#LR__3258
271f0     19 2D 02 F6 | 	mov	local04, local07
271f4     02 2C 66 F0 | 	shl	local04, #2
271f8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
271fc     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
27200     16 13 02 FB | 	rdlong	arg01, local04
27204     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27208     09 35 02 F6 | 	mov	local08, arg01
2720c     97 06 48 FB | 	callpa	#(@LR__3249-@LR__3248)>>2,fcache_load_ptr_
27210                 | LR__3248
27210     1A FB C9 FA | 	rdbyte	result1, local08 wz
27214     01 34 06 51 |  if_ne	add	local08, #1
27218     F4 FF 9F 5D |  if_ne	jmp	#LR__3248
2721c                 | LR__3249
2721c     09 35 82 F1 | 	sub	local08, arg01
27220     1A 37 02 F6 | 	mov	local09, local08
27224     1B 2D 02 F6 | 	mov	local04, local09
27228     13 2D 02 F1 | 	add	local04, local01
2722c     16 31 C2 FA | 	rdbyte	local06, local04
27230     2F 30 0E F2 | 	cmp	local06, #47 wz
27234     1B 39 02 56 |  if_ne	mov	local10, local09
27238     13 39 02 51 |  if_ne	add	local10, local01
2723c     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
27240     54 01 90 5D |  if_ne	jmp	#LR__3257
27244     19 17 02 F6 | 	mov	arg03, local07
27248     02 16 66 F0 | 	shl	arg03, #2
2724c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27250     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
27254     0B 15 02 FB | 	rdlong	arg02, arg03
27258     1B 17 02 F6 | 	mov	arg03, local09
2725c     13 13 02 F6 | 	mov	arg01, local01
27260     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27264     D4 4C B0 FD | 	call	#__system__strncmp
27268     00 FA 4D F2 | 	cmps	result1, #0 wz
2726c     28 01 90 5D |  if_ne	jmp	#LR__3257
27270     19 3B 02 F6 | 	mov	local11, local07
27274     02 3A 66 F0 | 	shl	local11, #2
27278     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2727c     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
27280     1D 3D 02 FB | 	rdlong	local12, local11
27284     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27288     97 22 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
2728c                 | LR__3250
2728c     1B 31 02 F6 | 	mov	local06, local09
27290     01 30 06 F1 | 	add	local06, #1
27294     13 31 02 F1 | 	add	local06, local01
27298     18 3B C2 FA | 	rdbyte	local11, local06
2729c     2E 3A 0E F2 | 	cmp	local11, #46 wz
272a0     2C 00 90 5D |  if_ne	jmp	#LR__3252
272a4     1B 3B 02 F6 | 	mov	local11, local09
272a8     02 3A 06 F1 | 	add	local11, #2
272ac     13 3B 02 F1 | 	add	local11, local01
272b0     1D 39 C2 FA | 	rdbyte	local10, local11
272b4     2F 38 0E F2 | 	cmp	local10, #47 wz
272b8     1B 3F 02 56 |  if_ne	mov	local13, local09
272bc     02 3E 06 51 |  if_ne	add	local13, #2
272c0     13 3F 02 51 |  if_ne	add	local13, local01
272c4     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
272c8     01 36 06 A1 |  if_e	add	local09, #1
272cc     BC FF 9F AD |  if_e	jmp	#LR__3250
272d0                 | LR__3251
272d0                 | LR__3252
272d0     00 2A 0E F2 | 	cmp	local03, #0 wz
272d4     15 13 02 56 |  if_ne	mov	arg01, local03
272d8     13 15 02 56 |  if_ne	mov	arg02, local01
272dc     00 17 06 56 |  if_ne	mov	arg03, #256
272e0     AC 4B B0 5D |  if_ne	call	#__system__strncpy
272e4     13 15 02 F6 | 	mov	arg02, local01
272e8     1B 15 02 F1 | 	add	arg02, local09
272ec     01 14 06 F1 | 	add	arg02, #1
272f0     13 13 02 F6 | 	mov	arg01, local01
272f4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
272f8     13 13 02 F6 | 	mov	arg01, local01
272fc     09 35 02 F6 | 	mov	local08, arg01
27300     97 06 48 FB | 	callpa	#(@LR__3254-@LR__3253)>>2,fcache_load_ptr_
27304                 | LR__3253
27304     1A FB C9 FA | 	rdbyte	result1, local08 wz
27308     01 34 06 51 |  if_ne	add	local08, #1
2730c     F4 FF 9F 5D |  if_ne	jmp	#LR__3253
27310                 | LR__3254
27310     09 35 82 F1 | 	sub	local08, arg01
27314     1A 37 02 F6 | 	mov	local09, local08
27318                 | LR__3255
27318     01 36 56 F2 | 	cmps	local09, #1 wc
2731c     70 00 90 CD |  if_b	jmp	#LR__3256
27320     1B 2D 02 F6 | 	mov	local04, local09
27324     13 2D 02 F1 | 	add	local04, local01
27328     16 3B C2 FA | 	rdbyte	local11, local04
2732c     2F 3A 0E F2 | 	cmp	local11, #47 wz
27330     1B 3B 02 A6 |  if_e	mov	local11, local09
27334     13 3B 02 A1 |  if_e	add	local11, local01
27338     1D 01 48 AC |  if_e	wrbyte	#0, local11
2733c     01 36 86 A1 |  if_e	sub	local09, #1
27340     D4 FF 9F AD |  if_e	jmp	#LR__3255
27344     1B 2D 02 F6 | 	mov	local04, local09
27348     13 2D 02 F1 | 	add	local04, local01
2734c     16 3B C2 FA | 	rdbyte	local11, local04
27350     2E 3A 0E F2 | 	cmp	local11, #46 wz
27354     38 00 90 5D |  if_ne	jmp	#LR__3256
27358     02 36 56 F2 | 	cmps	local09, #2 wc
2735c     30 00 90 CD |  if_b	jmp	#LR__3256
27360     1B 41 02 F6 | 	mov	local14, local09
27364     01 40 86 F1 | 	sub	local14, #1
27368     13 41 02 F1 | 	add	local14, local01
2736c     20 2F C2 FA | 	rdbyte	local05, local14
27370     2F 2E 0E F2 | 	cmp	local05, #47 wz
27374     18 00 90 5D |  if_ne	jmp	#LR__3256
27378     1B 2D 02 F6 | 	mov	local04, local09
2737c     01 2C 86 F1 | 	sub	local04, #1
27380     13 2D 02 F1 | 	add	local04, local01
27384     16 01 48 FC | 	wrbyte	#0, local04
27388     02 36 86 F1 | 	sub	local09, #2
2738c     88 FF 9F FD | 	jmp	#LR__3255
27390                 | LR__3256
27390     1E FB 01 F6 | 	mov	result1, local12
27394     1C 00 90 FD | 	jmp	#LR__3260
27398                 | LR__3257
27398                 | LR__3258
27398     01 32 06 F1 | 	add	local07, #1
2739c     2C FE 9F FD | 	jmp	#LR__3247
273a0                 | LR__3259
273a0     02 00 00 FF 
273a4     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
273a8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
273ac     02 00 00 FF 
273b0     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
273b4                 | LR__3260
273b4     A7 F0 03 F6 | 	mov	ptra, fp
273b8     B2 00 A0 FD | 	call	#popregs_
273bc                 | __system____getvfsforfile_ret
273bc     2D 00 64 FD | 	ret
273c0                 | 
273c0                 | __system___basic_open
273c0     05 4A 05 F6 | 	mov	COUNT_, #5
273c4     A8 00 A0 FD | 	call	#pushregs_
273c8     0A 27 02 F6 | 	mov	local01, arg02
273cc     0B 29 02 F6 | 	mov	local02, arg03
273d0     0C 2B 02 F6 | 	mov	local03, arg04
273d4     00 2C 06 F6 | 	mov	local04, #0
273d8     8C 4A B0 FD | 	call	#__system____getftab
273dc     FD 2E 0A F6 | 	mov	local05, result1 wz
273e0     18 00 90 5D |  if_ne	jmp	#LR__3270
273e4     EE 12 02 F6 | 	mov	arg01, abortchain
273e8     0C 14 06 F6 | 	mov	arg02, #12
273ec     01 16 06 F6 | 	mov	arg03, #1
273f0     DA 00 A0 FD | 	call	#__longjmp
273f4     01 FA 65 F6 | 	neg	result1, #1
273f8     14 01 90 FD | 	jmp	#LR__3279
273fc                 | LR__3270
273fc     08 2E 06 F1 | 	add	local05, #8
27400     17 FB 09 FB | 	rdlong	result1, local05 wz
27404     08 2E 86 F1 | 	sub	local05, #8
27408     17 13 02 56 |  if_ne	mov	arg01, local05
2740c     AC 41 B0 5D |  if_ne	call	#__system___closeraw
27410     00 26 0E F2 | 	cmp	local01, #0 wz
27414     00 28 0E A2 |  if_e	cmp	local02, #0 wz
27418     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
2741c     3C 00 90 AD |  if_e	jmp	#LR__3272
27420     0C 12 06 F6 | 	mov	arg01, #12
27424     94 36 B0 FD | 	call	#__system___gc_alloc_managed
27428     FD 2C 0A F6 | 	mov	local04, result1 wz
2742c     18 00 90 5D |  if_ne	jmp	#LR__3271
27430     EE 12 02 F6 | 	mov	arg01, abortchain
27434     07 14 06 F6 | 	mov	arg02, #7
27438     01 16 06 F6 | 	mov	arg03, #1
2743c     DA 00 A0 FD | 	call	#__longjmp
27440     01 FA 65 F6 | 	neg	result1, #1
27444     C8 00 90 FD | 	jmp	#LR__3279
27448                 | LR__3271
27448     16 01 68 FC | 	wrlong	#0, local04
2744c     04 2C 06 F1 | 	add	local04, #4
27450     16 01 68 FC | 	wrlong	#0, local04
27454     04 2C 86 F1 | 	sub	local04, #4
27458     17 2D 62 FC | 	wrlong	local04, local05
2745c                 | LR__3272
2745c     00 26 0E F2 | 	cmp	local01, #0 wz
27460     20 00 90 AD |  if_e	jmp	#LR__3273
27464     16 27 62 FC | 	wrlong	local01, local04
27468     16 FB 01 F6 | 	mov	result1, local04
2746c     00 10 05 FF 
27470     00 FA 45 F5 | 	or	result1, ##169869312
27474     1C 2E 06 F1 | 	add	local05, #28
27478     17 FB 61 FC | 	wrlong	result1, local05
2747c     1C 2E 86 F1 | 	sub	local05, #28
27480     0C 00 90 FD | 	jmp	#LR__3274
27484                 | LR__3273
27484     1C 2E 06 F1 | 	add	local05, #28
27488     17 01 68 FC | 	wrlong	#0, local05
2748c     1C 2E 86 F1 | 	sub	local05, #28
27490                 | LR__3274
27490     00 28 0E F2 | 	cmp	local02, #0 wz
27494     28 00 90 AD |  if_e	jmp	#LR__3275
27498     04 2C 06 F1 | 	add	local04, #4
2749c     16 29 62 FC | 	wrlong	local02, local04
274a0     04 2C 86 F1 | 	sub	local04, #4
274a4     16 FB 01 F6 | 	mov	result1, local04
274a8     00 18 05 FF 
274ac     00 FA 45 F5 | 	or	result1, ##170917888
274b0     20 2E 06 F1 | 	add	local05, #32
274b4     17 FB 61 FC | 	wrlong	result1, local05
274b8     20 2E 86 F1 | 	sub	local05, #32
274bc     0C 00 90 FD | 	jmp	#LR__3276
274c0                 | LR__3275
274c0     20 2E 06 F1 | 	add	local05, #32
274c4     17 01 68 FC | 	wrlong	#0, local05
274c8     20 2E 86 F1 | 	sub	local05, #32
274cc                 | LR__3276
274cc     00 2A 0E F2 | 	cmp	local03, #0 wz
274d0     24 00 90 AD |  if_e	jmp	#LR__3277
274d4     08 2C 06 F1 | 	add	local04, #8
274d8     16 2B 62 FC | 	wrlong	local03, local04
274dc     08 2C 86 F1 | 	sub	local04, #8
274e0     00 20 05 FF 
274e4     00 2C 46 F5 | 	or	local04, ##171966464
274e8     24 2E 06 F1 | 	add	local05, #36
274ec     17 2D 62 FC | 	wrlong	local04, local05
274f0     24 2E 86 F1 | 	sub	local05, #36
274f4     0C 00 90 FD | 	jmp	#LR__3278
274f8                 | LR__3277
274f8     24 2E 06 F1 | 	add	local05, #36
274fc     17 01 68 FC | 	wrlong	#0, local05
27500     24 2E 86 F1 | 	sub	local05, #36
27504                 | LR__3278
27504     08 2E 06 F1 | 	add	local05, #8
27508     17 0F 68 FC | 	wrlong	#7, local05
2750c     00 FA 05 F6 | 	mov	result1, #0
27510                 | LR__3279
27510     A7 F0 03 F6 | 	mov	ptra, fp
27514     B2 00 A0 FD | 	call	#popregs_
27518                 | __system___basic_open_ret
27518     2D 00 64 FD | 	ret
2751c                 | 
2751c                 | __system___basic_open_string
2751c     04 4A 05 F6 | 	mov	COUNT_, #4
27520     A8 00 A0 FD | 	call	#pushregs_
27524     0A 27 02 F6 | 	mov	local01, arg02
27528     0B 29 02 F6 | 	mov	local02, arg03
2752c     38 49 B0 FD | 	call	#__system____getftab
27530     FD 2A 0A F6 | 	mov	local03, result1 wz
27534     18 00 90 5D |  if_ne	jmp	#LR__3280
27538     EE 12 02 F6 | 	mov	arg01, abortchain
2753c     0C 14 06 F6 | 	mov	arg02, #12
27540     01 16 06 F6 | 	mov	arg03, #1
27544     DA 00 A0 FD | 	call	#__longjmp
27548     01 FA 65 F6 | 	neg	result1, #1
2754c     5C 00 90 FD | 	jmp	#LR__3282
27550                 | LR__3280
27550     08 2A 06 F1 | 	add	local03, #8
27554     15 19 0A FB | 	rdlong	arg04, local03 wz
27558     08 2A 86 F1 | 	sub	local03, #8
2755c     15 13 02 56 |  if_ne	mov	arg01, local03
27560     58 40 B0 5D |  if_ne	call	#__system___closeraw
27564     13 15 02 F6 | 	mov	arg02, local01
27568     14 17 02 F6 | 	mov	arg03, local02
2756c     15 13 02 F6 | 	mov	arg01, local03
27570     B6 19 06 F6 | 	mov	arg04, #438
27574     40 3D B0 FD | 	call	#__system___openraw
27578     FD 2C 02 F6 | 	mov	local04, result1
2757c     00 2C 56 F2 | 	cmps	local04, #0 wc
27580     24 00 90 3D |  if_ae	jmp	#LR__3281
27584     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27588     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2758c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27590     EE 12 02 F6 | 	mov	arg01, abortchain
27594     FD 14 02 FB | 	rdlong	arg02, result1
27598     01 16 06 F6 | 	mov	arg03, #1
2759c     DA 00 A0 FD | 	call	#__longjmp
275a0     01 FA 65 F6 | 	neg	result1, #1
275a4     04 00 90 FD | 	jmp	#LR__3282
275a8                 | LR__3281
275a8     16 FB 01 F6 | 	mov	result1, local04
275ac                 | LR__3282
275ac     A7 F0 03 F6 | 	mov	ptra, fp
275b0     B2 00 A0 FD | 	call	#popregs_
275b4                 | __system___basic_open_string_ret
275b4     2D 00 64 FD | 	ret
275b8                 | 
275b8                 | __system___basic_print_char
275b8     03 4A 05 F6 | 	mov	COUNT_, #3
275bc     A8 00 A0 FD | 	call	#pushregs_
275c0     0A 27 02 F6 | 	mov	local01, arg02
275c4     44 50 B0 FD | 	call	#__system___gettxfunc
275c8     FD 28 0A F6 | 	mov	local02, result1 wz
275cc     00 FA 05 A6 |  if_e	mov	result1, #0
275d0     30 00 90 AD |  if_e	jmp	#LR__3290
275d4     14 2B 02 F6 | 	mov	local03, local02
275d8     13 28 46 F7 | 	zerox	local02, #19
275dc     14 2A 46 F0 | 	shr	local03, #20
275e0     02 2A 66 F0 | 	shl	local03, #2
275e4     ED 2A 02 F1 | 	add	local03, __methods__
275e8     15 2B 02 FB | 	rdlong	local03, local03
275ec     13 13 02 F6 | 	mov	arg01, local01
275f0     F2 26 02 F6 | 	mov	local01, objptr
275f4     14 E5 01 F6 | 	mov	objptr, local02
275f8     2D 2A 62 FD | 	call	local03
275fc     13 E5 01 F6 | 	mov	objptr, local01
27600     01 FA 05 F6 | 	mov	result1, #1
27604                 | LR__3290
27604     A7 F0 03 F6 | 	mov	ptra, fp
27608     B2 00 A0 FD | 	call	#popregs_
2760c                 | __system___basic_print_char_ret
2760c     2D 00 64 FD | 	ret
27610                 | 
27610                 | __system___basic_print_string
27610     03 4A 05 F6 | 	mov	COUNT_, #3
27614     A8 00 A0 FD | 	call	#pushregs_
27618     0A 27 02 F6 | 	mov	local01, arg02
2761c     0B 29 02 F6 | 	mov	local02, arg03
27620     E8 4F B0 FD | 	call	#__system___gettxfunc
27624     FD 2A 0A F6 | 	mov	local03, result1 wz
27628     00 FA 05 A6 |  if_e	mov	result1, #0
2762c     18 00 90 AD |  if_e	jmp	#LR__3300
27630     00 26 0E F2 | 	cmp	local01, #0 wz
27634     00 FA 05 A6 |  if_e	mov	result1, #0
27638     15 13 02 56 |  if_ne	mov	arg01, local03
2763c     14 15 02 56 |  if_ne	mov	arg02, local02
27640     13 17 02 56 |  if_ne	mov	arg03, local01
27644     08 02 B0 5D |  if_ne	call	#__system___fmtstr
27648                 | LR__3300
27648     A7 F0 03 F6 | 	mov	ptra, fp
2764c     B2 00 A0 FD | 	call	#popregs_
27650                 | __system___basic_print_string_ret
27650     2D 00 64 FD | 	ret
27654                 | 
27654                 | __system___basic_print_integer
27654     04 4A 05 F6 | 	mov	COUNT_, #4
27658     A8 00 A0 FD | 	call	#pushregs_
2765c     0A 27 02 F6 | 	mov	local01, arg02
27660     0B 29 02 F6 | 	mov	local02, arg03
27664     0C 2B 02 F6 | 	mov	local03, arg04
27668     A0 4F B0 FD | 	call	#__system___gettxfunc
2766c     FD 2C 0A F6 | 	mov	local04, result1 wz
27670     00 FA 05 A6 |  if_e	mov	result1, #0
27674     16 13 02 56 |  if_ne	mov	arg01, local04
27678     14 15 02 56 |  if_ne	mov	arg02, local02
2767c     13 17 02 56 |  if_ne	mov	arg03, local01
27680     15 19 02 56 |  if_ne	mov	arg04, local03
27684     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
27688     A7 F0 03 F6 | 	mov	ptra, fp
2768c     B2 00 A0 FD | 	call	#popregs_
27690                 | __system___basic_print_integer_ret
27690     2D 00 64 FD | 	ret
27694                 | 
27694                 | __system___basic_print_unsigned
27694     03 4A 05 F6 | 	mov	COUNT_, #3
27698     A8 00 A0 FD | 	call	#pushregs_
2769c     0A 27 02 F6 | 	mov	local01, arg02
276a0     0B 29 02 F6 | 	mov	local02, arg03
276a4     0C 2B 02 F6 | 	mov	local03, arg04
276a8     60 4F B0 FD | 	call	#__system___gettxfunc
276ac     FD 12 0A F6 | 	mov	arg01, result1 wz
276b0     00 FA 05 A6 |  if_e	mov	result1, #0
276b4     3A 28 26 54 |  if_ne	bith	local02, #58
276b8     14 15 02 56 |  if_ne	mov	arg02, local02
276bc     13 17 02 56 |  if_ne	mov	arg03, local01
276c0     15 19 02 56 |  if_ne	mov	arg04, local03
276c4     74 02 B0 5D |  if_ne	call	#__system___fmtnum
276c8     A7 F0 03 F6 | 	mov	ptra, fp
276cc     B2 00 A0 FD | 	call	#popregs_
276d0                 | __system___basic_print_unsigned_ret
276d0     2D 00 64 FD | 	ret
276d4                 | 
276d4                 | __system___basic_get_char
276d4     03 4A 05 F6 | 	mov	COUNT_, #3
276d8     A8 00 A0 FD | 	call	#pushregs_
276dc     70 4F B0 FD | 	call	#__system___getrxfunc
276e0     FD 26 0A F6 | 	mov	local01, result1 wz
276e4     01 FA 65 A6 |  if_e	neg	result1, #1
276e8     28 00 90 AD |  if_e	jmp	#LR__3310
276ec     13 29 02 F6 | 	mov	local02, local01
276f0     13 26 46 F7 | 	zerox	local01, #19
276f4     14 28 46 F0 | 	shr	local02, #20
276f8     02 28 66 F0 | 	shl	local02, #2
276fc     ED 28 02 F1 | 	add	local02, __methods__
27700     14 29 02 FB | 	rdlong	local02, local02
27704     F2 2A 02 F6 | 	mov	local03, objptr
27708     13 E5 01 F6 | 	mov	objptr, local01
2770c     2D 28 62 FD | 	call	local02
27710     15 E5 01 F6 | 	mov	objptr, local03
27714                 | LR__3310
27714     A7 F0 03 F6 | 	mov	ptra, fp
27718     B2 00 A0 FD | 	call	#popregs_
2771c                 | __system___basic_get_char_ret
2771c     2D 00 64 FD | 	ret
27720                 | 
27720                 | __system___basic_put
27720     04 4A 05 F6 | 	mov	COUNT_, #4
27724     A8 00 A0 FD | 	call	#pushregs_
27728     0D 27 02 F6 | 	mov	local01, arg05
2772c     13 19 02 FD | 	qmul	arg04, local01
27730     09 29 02 F6 | 	mov	local02, arg01
27734     0B 2B 02 F6 | 	mov	local03, arg03
27738     00 14 0E F2 | 	cmp	arg02, #0 wz
2773c     01 14 86 51 |  if_ne	sub	arg02, #1
27740     14 13 02 56 |  if_ne	mov	arg01, local02
27744     00 16 06 56 |  if_ne	mov	arg03, #0
27748     18 2C 62 FD | 	getqx	local04
2774c     60 45 B0 5D |  if_ne	call	#__system__lseek
27750     15 15 02 F6 | 	mov	arg02, local03
27754     16 17 02 F6 | 	mov	arg03, local04
27758     14 13 02 F6 | 	mov	arg01, local02
2775c     9C 44 B0 FD | 	call	#__system__write
27760     FD 2C 02 F6 | 	mov	local04, result1
27764     01 2C 56 F2 | 	cmps	local04, #1 wc
27768     10 00 90 CD |  if_b	jmp	#LR__3320
2776c     16 91 02 F6 | 	mov	muldiva_, local04
27770     13 93 02 F6 | 	mov	muldivb_, local01
27774     BA 00 A0 FD | 	call	#divide_
27778     49 2D 02 F6 | 	mov	local04, muldivb_
2777c                 | LR__3320
2777c     16 FB 01 F6 | 	mov	result1, local04
27780     A7 F0 03 F6 | 	mov	ptra, fp
27784     B2 00 A0 FD | 	call	#popregs_
27788                 | __system___basic_put_ret
27788     2D 00 64 FD | 	ret
2778c                 | 
2778c                 | __system___basic_get
2778c     04 4A 05 F6 | 	mov	COUNT_, #4
27790     A8 00 A0 FD | 	call	#pushregs_
27794     0D 27 02 F6 | 	mov	local01, arg05
27798     13 19 02 FD | 	qmul	arg04, local01
2779c     09 29 02 F6 | 	mov	local02, arg01
277a0     0B 2B 02 F6 | 	mov	local03, arg03
277a4     00 14 0E F2 | 	cmp	arg02, #0 wz
277a8     01 14 86 51 |  if_ne	sub	arg02, #1
277ac     14 13 02 56 |  if_ne	mov	arg01, local02
277b0     00 16 06 56 |  if_ne	mov	arg03, #0
277b4     18 2C 62 FD | 	getqx	local04
277b8     F4 44 B0 5D |  if_ne	call	#__system__lseek
277bc     15 15 02 F6 | 	mov	arg02, local03
277c0     16 17 02 F6 | 	mov	arg03, local04
277c4     14 13 02 F6 | 	mov	arg01, local02
277c8     6C 44 B0 FD | 	call	#__system__read
277cc     FD 2C 02 F6 | 	mov	local04, result1
277d0     01 2C 56 F2 | 	cmps	local04, #1 wc
277d4     10 00 90 CD |  if_b	jmp	#LR__3330
277d8     16 91 02 F6 | 	mov	muldiva_, local04
277dc     13 93 02 F6 | 	mov	muldivb_, local01
277e0     BA 00 A0 FD | 	call	#divide_
277e4     49 2D 02 F6 | 	mov	local04, muldivb_
277e8                 | LR__3330
277e8     16 FB 01 F6 | 	mov	result1, local04
277ec     A7 F0 03 F6 | 	mov	ptra, fp
277f0     B2 00 A0 FD | 	call	#popregs_
277f4                 | __system___basic_get_ret
277f4     2D 00 64 FD | 	ret
277f8                 | 
277f8                 | __system___fmtchar
277f8     00 4A 05 F6 | 	mov	COUNT_, #0
277fc     A8 00 A0 FD | 	call	#pushregs_
27800     10 F0 07 F1 | 	add	ptra, #16
27804     04 4E 05 F1 | 	add	fp, #4
27808     A7 12 62 FC | 	wrlong	arg01, fp
2780c     04 4E 05 F1 | 	add	fp, #4
27810     A7 14 62 FC | 	wrlong	arg02, fp
27814     04 4E 05 F1 | 	add	fp, #4
27818     A7 16 62 FC | 	wrlong	arg03, fp
2781c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
27820     A7 16 62 FC | 	wrlong	arg03, fp
27824     08 4E 85 F1 | 	sub	fp, #8
27828     A7 12 02 FB | 	rdlong	arg01, fp
2782c     04 4E 05 F1 | 	add	fp, #4
27830     A7 14 02 FB | 	rdlong	arg02, fp
27834     04 4E 05 F1 | 	add	fp, #4
27838     A7 16 02 F6 | 	mov	arg03, fp
2783c     0C 4E 85 F1 | 	sub	fp, #12
27840     0C 00 B0 FD | 	call	#__system___fmtstr
27844     A7 F0 03 F6 | 	mov	ptra, fp
27848     B2 00 A0 FD | 	call	#popregs_
2784c                 | __system___fmtchar_ret
2784c     2D 00 64 FD | 	ret
27850                 | 
27850                 | __system___fmtstr
27850     09 4A 05 F6 | 	mov	COUNT_, #9
27854     A8 00 A0 FD | 	call	#pushregs_
27858     09 27 02 F6 | 	mov	local01, arg01
2785c     0A 29 02 F6 | 	mov	local02, arg02
27860     0B 2B 02 F6 | 	mov	local03, arg03
27864     14 19 E2 F8 | 	getbyte	arg04, local02, #0
27868     15 13 02 F6 | 	mov	arg01, local03
2786c     09 2D 02 F6 | 	mov	local04, arg01
27870     97 06 48 FB | 	callpa	#(@LR__3341-@LR__3340)>>2,fcache_load_ptr_
27874                 | LR__3340
27874     16 FB C9 FA | 	rdbyte	result1, local04 wz
27878     01 2C 06 51 |  if_ne	add	local04, #1
2787c     F4 FF 9F 5D |  if_ne	jmp	#LR__3340
27880                 | LR__3341
27880     09 2D 82 F1 | 	sub	local04, arg01
27884     00 18 0E F2 | 	cmp	arg04, #0 wz
27888     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
2788c     14 15 02 F6 | 	mov	arg02, local02
27890     16 17 02 F6 | 	mov	arg03, local04
27894     13 13 02 F6 | 	mov	arg01, local01
27898     02 18 06 F6 | 	mov	arg04, #2
2789c     BC 49 B0 FD | 	call	#__system___fmtpad
278a0     FD 2E 02 F6 | 	mov	local05, result1
278a4     00 2E 56 F2 | 	cmps	local05, #0 wc
278a8     17 FB 01 C6 |  if_b	mov	result1, local05
278ac     80 00 90 CD |  if_b	jmp	#LR__3344
278b0     01 2C 56 F2 | 	cmps	local04, #1 wc
278b4     50 00 90 CD |  if_b	jmp	#LR__3343
278b8     16 31 02 F6 | 	mov	local06, local04
278bc                 | LR__3342
278bc     13 33 02 F6 | 	mov	local07, local01
278c0     13 35 02 F6 | 	mov	local08, local01
278c4     13 32 46 F7 | 	zerox	local07, #19
278c8     14 34 46 F0 | 	shr	local08, #20
278cc     02 34 66 F0 | 	shl	local08, #2
278d0     ED 34 02 F1 | 	add	local08, __methods__
278d4     1A 35 02 FB | 	rdlong	local08, local08
278d8     15 13 C2 FA | 	rdbyte	arg01, local03
278dc     F2 36 02 F6 | 	mov	local09, objptr
278e0     19 E5 01 F6 | 	mov	objptr, local07
278e4     01 2A 06 F1 | 	add	local03, #1
278e8     2D 34 62 FD | 	call	local08
278ec     1B E5 01 F6 | 	mov	objptr, local09
278f0     FD 36 02 F6 | 	mov	local09, result1
278f4     00 36 56 F2 | 	cmps	local09, #0 wc
278f8     1B FB 01 C6 |  if_b	mov	result1, local09
278fc     30 00 90 CD |  if_b	jmp	#LR__3344
27900     1B 2F 02 F1 | 	add	local05, local09
27904     ED 31 6E FB | 	djnz	local06, #LR__3342
27908                 | LR__3343
27908     14 15 02 F6 | 	mov	arg02, local02
2790c     16 17 02 F6 | 	mov	arg03, local04
27910     13 13 02 F6 | 	mov	arg01, local01
27914     01 18 06 F6 | 	mov	arg04, #1
27918     40 49 B0 FD | 	call	#__system___fmtpad
2791c     FD 36 02 F6 | 	mov	local09, result1
27920     00 36 56 F2 | 	cmps	local09, #0 wc
27924     1B FB 01 C6 |  if_b	mov	result1, local09
27928     1B 2F 02 31 |  if_ae	add	local05, local09
2792c     17 FB 01 36 |  if_ae	mov	result1, local05
27930                 | LR__3344
27930     A7 F0 03 F6 | 	mov	ptra, fp
27934     B2 00 A0 FD | 	call	#popregs_
27938                 | __system___fmtstr_ret
27938     2D 00 64 FD | 	ret
2793c                 | 
2793c                 | __system___fmtnum
2793c     0B 4A 05 F6 | 	mov	COUNT_, #11
27940     A8 00 A0 FD | 	call	#pushregs_
27944     09 27 02 F6 | 	mov	local01, arg01
27948     0A 29 02 F6 | 	mov	local02, arg02
2794c     0B 2B 02 F6 | 	mov	local03, arg03
27950     0C 2D 02 F6 | 	mov	local04, arg04
27954     F8 2F 02 F6 | 	mov	local05, ptra
27958     17 31 02 F6 | 	mov	local06, local05
2795c     00 32 06 F6 | 	mov	local07, #0
27960     14 35 02 F6 | 	mov	local08, local02
27964     10 34 46 F0 | 	shr	local08, #16
27968     3F 34 06 F5 | 	and	local08, #63
2796c     14 37 E2 F8 | 	getbyte	local09, local02, #0
27970     14 39 02 F6 | 	mov	local10, local02
27974     1A 38 46 F0 | 	shr	local10, #26
27978     03 38 06 F5 | 	and	local10, #3
2797c     1C 3B 02 F6 | 	mov	local11, local10
27980     01 34 56 F2 | 	cmps	local08, #1 wc
27984     44 F0 07 F1 | 	add	ptra, #68
27988     01 34 86 31 |  if_ae	sub	local08, #1
2798c     41 36 56 F2 | 	cmps	local09, #65 wc
27990     00 36 0E C2 |  if_b	cmp	local09, #0 wz
27994     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
27998     03 3A 0E F2 | 	cmp	local11, #3 wz
2799c     00 3A 06 A6 |  if_e	mov	local11, #0
279a0     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
279a4     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
279a8     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
279ac     00 3A 0E F2 | 	cmp	local11, #0 wz
279b0     4C 00 90 AD |  if_e	jmp	#LR__3353
279b4     01 32 06 F6 | 	mov	local07, #1
279b8     1B 35 0A F2 | 	cmp	local08, local09 wz
279bc     18 00 90 5D |  if_ne	jmp	#LR__3351
279c0     05 34 6E FB | 	djnz	local08, #LR__3350
279c4     13 13 02 F6 | 	mov	arg01, local01
279c8     14 15 02 F6 | 	mov	arg02, local02
279cc     23 16 06 F6 | 	mov	arg03, #35
279d0     24 FE BF FD | 	call	#__system___fmtchar
279d4     88 00 90 FD | 	jmp	#LR__3357
279d8                 | LR__3350
279d8                 | LR__3351
279d8     02 3A 0E F2 | 	cmp	local11, #2 wz
279dc     18 39 02 A6 |  if_e	mov	local10, local06
279e0     01 30 06 A1 |  if_e	add	local06, #1
279e4     1C 41 48 AC |  if_e	wrbyte	#32, local10
279e8     14 00 90 AD |  if_e	jmp	#LR__3352
279ec     04 3A 0E F2 | 	cmp	local11, #4 wz
279f0     18 5B 48 AC |  if_e	wrbyte	#45, local06
279f4     01 30 06 A1 |  if_e	add	local06, #1
279f8     18 57 48 5C |  if_ne	wrbyte	#43, local06
279fc     01 30 06 51 |  if_ne	add	local06, #1
27a00                 | LR__3352
27a00                 | LR__3353
27a00     18 13 02 F6 | 	mov	arg01, local06
27a04     15 15 02 F6 | 	mov	arg02, local03
27a08     16 17 02 F6 | 	mov	arg03, local04
27a0c     1A 19 02 F6 | 	mov	arg04, local08
27a10     00 1A 06 F6 | 	mov	arg05, #0
27a14     1D 28 2E F4 | 	testbn	local02, #29 wz
27a18     01 1A 06 56 |  if_ne	mov	arg05, #1
27a1c     04 49 B0 FD | 	call	#__system___uitoa
27a20     FD 32 02 F1 | 	add	local07, result1
27a24     1B 33 5A F2 | 	cmps	local07, local09 wcz
27a28     24 00 90 ED |  if_be	jmp	#LR__3356
27a2c     97 0E 48 FB | 	callpa	#(@LR__3355-@LR__3354)>>2,fcache_load_ptr_
27a30                 | LR__3354
27a30     1B 39 02 F6 | 	mov	local10, local09
27a34     01 38 56 F2 | 	cmps	local10, #1 wc
27a38     01 36 86 F1 | 	sub	local09, #1
27a3c     18 39 02 36 |  if_ae	mov	local10, local06
27a40     01 30 06 31 |  if_ae	add	local06, #1
27a44     1C 47 48 3C |  if_ae	wrbyte	#35, local10
27a48     E4 FF 9F 3D |  if_ae	jmp	#LR__3354
27a4c                 | LR__3355
27a4c     18 01 48 FC | 	wrbyte	#0, local06
27a50                 | LR__3356
27a50     13 13 02 F6 | 	mov	arg01, local01
27a54     14 15 02 F6 | 	mov	arg02, local02
27a58     17 17 02 F6 | 	mov	arg03, local05
27a5c     F0 FD BF FD | 	call	#__system___fmtstr
27a60                 | LR__3357
27a60     A7 F0 03 F6 | 	mov	ptra, fp
27a64     B2 00 A0 FD | 	call	#popregs_
27a68                 | __system___fmtnum_ret
27a68     2D 00 64 FD | 	ret
27a6c                 | 
27a6c                 | __system___fmtfloat
27a6c     10 4A 05 F6 | 	mov	COUNT_, #16
27a70     A8 00 A0 FD | 	call	#pushregs_
27a74     24 F1 07 F1 | 	add	ptra, #292
27a78     04 4E 05 F1 | 	add	fp, #4
27a7c     A7 12 62 FC | 	wrlong	arg01, fp
27a80     04 4E 05 F1 | 	add	fp, #4
27a84     A7 14 62 FC | 	wrlong	arg02, fp
27a88     04 4E 05 F1 | 	add	fp, #4
27a8c     A7 16 62 FC | 	wrlong	arg03, fp
27a90     04 4E 05 F1 | 	add	fp, #4
27a94     A7 18 62 FC | 	wrlong	arg04, fp
27a98     0C 4E 05 F1 | 	add	fp, #12
27a9c     A7 14 68 FC | 	wrlong	#10, fp
27aa0     08 4E 05 F1 | 	add	fp, #8
27aa4     A7 00 68 FC | 	wrlong	#0, fp
27aa8     08 4E 05 F1 | 	add	fp, #8
27aac     A7 00 68 FC | 	wrlong	#0, fp
27ab0     08 4E 05 F1 | 	add	fp, #8
27ab4     A7 00 68 FC | 	wrlong	#0, fp
27ab8     04 4E 05 F1 | 	add	fp, #4
27abc     A7 04 68 FC | 	wrlong	#2, fp
27ac0     04 4E 05 F1 | 	add	fp, #4
27ac4     A7 00 68 FC | 	wrlong	#0, fp
27ac8     04 4E 05 F1 | 	add	fp, #4
27acc     A7 00 68 FC | 	wrlong	#0, fp
27ad0     04 4E 05 F1 | 	add	fp, #4
27ad4     A7 00 68 FC | 	wrlong	#0, fp
27ad8     04 4E 05 F1 | 	add	fp, #4
27adc     A7 00 68 FC | 	wrlong	#0, fp
27ae0     18 4E 05 F1 | 	add	fp, #24
27ae4     A7 00 68 FC | 	wrlong	#0, fp
27ae8     68 4E 05 F1 | 	add	fp, #104
27aec     A7 26 02 F6 | 	mov	local01, fp
27af0     08 4E 85 F1 | 	sub	fp, #8
27af4     A7 26 62 FC | 	wrlong	local01, fp
27af8     04 4E 05 F1 | 	add	fp, #4
27afc     A7 26 62 FC | 	wrlong	local01, fp
27b00     BC 4E 85 F1 | 	sub	fp, #188
27b04     A7 26 02 FB | 	rdlong	local01, fp
27b08     10 26 46 F0 | 	shr	local01, #16
27b0c     3F 26 06 F5 | 	and	local01, #63
27b10     B0 4E 05 F1 | 	add	fp, #176
27b14     A7 26 62 FC | 	wrlong	local01, fp
27b18     B0 4E 85 F1 | 	sub	fp, #176
27b1c     A7 26 02 FB | 	rdlong	local01, fp
27b20     1C 26 46 F0 | 	shr	local01, #28
27b24     01 26 06 F5 | 	and	local01, #1
27b28     08 4F 05 F1 | 	add	fp, #264
27b2c     A7 26 62 FC | 	wrlong	local01, fp
27b30     58 4E 85 F1 | 	sub	fp, #88
27b34     A7 26 0A FB | 	rdlong	local01, fp wz
27b38     B8 4E 85 F1 | 	sub	fp, #184
27b3c     3C 00 90 5D |  if_ne	jmp	#LR__3361
27b40     10 4E 05 F1 | 	add	fp, #16
27b44     A7 26 02 FB | 	rdlong	local01, fp
27b48     10 4E 85 F1 | 	sub	fp, #16
27b4c     61 26 0E F2 | 	cmp	local01, #97 wz
27b50     18 00 90 5D |  if_ne	jmp	#LR__3360
27b54     B8 4E 05 F1 | 	add	fp, #184
27b58     A7 1A 68 FC | 	wrlong	#13, fp
27b5c     84 4E 85 F1 | 	sub	fp, #132
27b60     A7 02 68 FC | 	wrlong	#1, fp
27b64     34 4E 85 F1 | 	sub	fp, #52
27b68     24 00 90 FD | 	jmp	#LR__3362
27b6c                 | LR__3360
27b6c     B8 4E 05 F1 | 	add	fp, #184
27b70     A7 0C 68 FC | 	wrlong	#6, fp
27b74     B8 4E 85 F1 | 	sub	fp, #184
27b78     14 00 90 FD | 	jmp	#LR__3362
27b7c                 | LR__3361
27b7c     B8 4E 05 F1 | 	add	fp, #184
27b80     A7 26 02 FB | 	rdlong	local01, fp
27b84     01 26 86 F1 | 	sub	local01, #1
27b88     A7 26 62 FC | 	wrlong	local01, fp
27b8c     B8 4E 85 F1 | 	sub	fp, #184
27b90                 | LR__3362
27b90     08 4E 05 F1 | 	add	fp, #8
27b94     A7 26 02 FB | 	rdlong	local01, fp
27b98     16 26 46 F0 | 	shr	local01, #22
27b9c     03 26 06 F5 | 	and	local01, #3
27ba0     04 4F 05 F1 | 	add	fp, #260
27ba4     A7 26 62 FC | 	wrlong	local01, fp
27ba8     04 4F 85 F1 | 	sub	fp, #260
27bac     A7 26 02 FB | 	rdlong	local01, fp
27bb0     1D 26 46 F0 | 	shr	local01, #29
27bb4     01 26 06 F5 | 	and	local01, #1
27bb8     B4 4E 05 F1 | 	add	fp, #180
27bbc     A7 26 62 FC | 	wrlong	local01, fp
27bc0     B4 4E 85 F1 | 	sub	fp, #180
27bc4     A7 26 02 FB | 	rdlong	local01, fp
27bc8     13 27 EA F8 | 	getbyte	local01, local01, #1
27bcc     60 4E 05 F1 | 	add	fp, #96
27bd0     A7 26 62 FC | 	wrlong	local01, fp
27bd4     60 4E 85 F1 | 	sub	fp, #96
27bd8     A7 26 02 FB | 	rdlong	local01, fp
27bdc     13 27 E2 F8 | 	getbyte	local01, local01, #0
27be0     64 4E 05 F1 | 	add	fp, #100
27be4     A7 26 62 FC | 	wrlong	local01, fp
27be8     00 26 06 F6 | 	mov	local01, #0
27bec     5C 4E 85 F1 | 	sub	fp, #92
27bf0     A7 1A 02 FB | 	rdlong	arg05, fp
27bf4     65 1A 0E F2 | 	cmp	arg05, #101 wz
27bf8     01 26 06 A6 |  if_e	mov	local01, #1
27bfc     14 4E 05 F1 | 	add	fp, #20
27c00     A7 26 62 FC | 	wrlong	local01, fp
27c04     98 4E 05 F1 | 	add	fp, #152
27c08     A7 28 0A FB | 	rdlong	local02, fp wz
27c0c     45 26 06 56 |  if_ne	mov	local01, #69
27c10     65 26 06 A6 |  if_e	mov	local01, #101
27c14     8C 4E 85 F1 | 	sub	fp, #140
27c18     A7 26 62 FC | 	wrlong	local01, fp
27c1c     20 4E 85 F1 | 	sub	fp, #32
27c20     A7 26 02 FB | 	rdlong	local01, fp
27c24     10 4E 85 F1 | 	sub	fp, #16
27c28     61 26 0E F2 | 	cmp	local01, #97 wz
27c2c     4C 00 90 5D |  if_ne	jmp	#LR__3363
27c30     24 4E 05 F1 | 	add	fp, #36
27c34     A7 02 68 FC | 	wrlong	#1, fp
27c38     98 4E 05 F1 | 	add	fp, #152
27c3c     A7 28 0A FB | 	rdlong	local02, fp wz
27c40     50 26 06 56 |  if_ne	mov	local01, #80
27c44     70 26 06 A6 |  if_e	mov	local01, #112
27c48     8C 4E 85 F1 | 	sub	fp, #140
27c4c     A7 26 62 FC | 	wrlong	local01, fp
27c50     14 4E 85 F1 | 	sub	fp, #20
27c54     A7 04 68 FC | 	wrlong	#2, fp
27c58     1C 4E 05 F1 | 	add	fp, #28
27c5c     A7 02 68 FC | 	wrlong	#1, fp
27c60     84 4E 05 F1 | 	add	fp, #132
27c64     A7 28 0A FB | 	rdlong	local02, fp wz
27c68     58 26 06 56 |  if_ne	mov	local01, #88
27c6c     78 26 06 A6 |  if_e	mov	local01, #120
27c70     7C 4E 85 F1 | 	sub	fp, #124
27c74     A7 26 62 FC | 	wrlong	local01, fp
27c78     40 4E 85 F1 | 	sub	fp, #64
27c7c                 | LR__3363
27c7c     10 4E 05 F1 | 	add	fp, #16
27c80     A7 26 02 FB | 	rdlong	local01, fp
27c84     10 4E 85 F1 | 	sub	fp, #16
27c88     23 26 0E F2 | 	cmp	local01, #35 wz
27c8c     3C 00 90 5D |  if_ne	jmp	#LR__3366
27c90     48 4E 05 F1 | 	add	fp, #72
27c94     A7 02 68 FC | 	wrlong	#1, fp
27c98     C8 4E 05 F1 | 	add	fp, #200
27c9c     A7 26 0A FB | 	rdlong	local01, fp wz
27ca0     10 4F 85 F1 | 	sub	fp, #272
27ca4     18 00 90 AD |  if_e	jmp	#LR__3364
27ca8     10 4E 05 F1 | 	add	fp, #16
27cac     A7 CC 68 FC | 	wrlong	#102, fp
27cb0     00 4F 05 F1 | 	add	fp, #256
27cb4     A7 00 68 FC | 	wrlong	#0, fp
27cb8     10 4F 85 F1 | 	sub	fp, #272
27cbc     0C 00 90 FD | 	jmp	#LR__3365
27cc0                 | LR__3364
27cc0     10 4F 05 F1 | 	add	fp, #272
27cc4     A7 02 68 FC | 	wrlong	#1, fp
27cc8     10 4F 85 F1 | 	sub	fp, #272
27ccc                 | LR__3365
27ccc                 | LR__3366
27ccc     08 4E 05 F1 | 	add	fp, #8
27cd0     A7 26 02 FB | 	rdlong	local01, fp
27cd4     1A 26 46 F0 | 	shr	local01, #26
27cd8     03 26 06 F5 | 	and	local01, #3
27cdc     5C 4E 05 F1 | 	add	fp, #92
27ce0     A7 26 62 FC | 	wrlong	local01, fp
27ce4     58 4E 85 F1 | 	sub	fp, #88
27ce8     A7 FA 01 FB | 	rdlong	result1, fp
27cec     0C 4E 85 F1 | 	sub	fp, #12
27cf0     1F FA 4D F0 | 	shr	result1, #31 wz
27cf4     20 00 90 AD |  if_e	jmp	#LR__3367
27cf8     2C 4E 05 F1 | 	add	fp, #44
27cfc     A7 5A 68 FC | 	wrlong	#45, fp
27d00     20 4E 85 F1 | 	sub	fp, #32
27d04     A7 FA 01 FB | 	rdlong	result1, fp
27d08     1F FA E5 F4 | 	bitnot	result1, #31
27d0c     A7 FA 61 FC | 	wrlong	result1, fp
27d10     0C 4E 85 F1 | 	sub	fp, #12
27d14     3C 00 90 FD | 	jmp	#LR__3369
27d18                 | LR__3367
27d18     64 4E 05 F1 | 	add	fp, #100
27d1c     A7 26 02 FB | 	rdlong	local01, fp
27d20     64 4E 85 F1 | 	sub	fp, #100
27d24     01 26 0E F2 | 	cmp	local01, #1 wz
27d28     2C 4E 05 A1 |  if_e	add	fp, #44
27d2c     A7 56 68 AC |  if_e	wrlong	#43, fp
27d30     2C 4E 85 A1 |  if_e	sub	fp, #44
27d34     1C 00 90 AD |  if_e	jmp	#LR__3368
27d38     64 4E 05 F1 | 	add	fp, #100
27d3c     A7 26 02 FB | 	rdlong	local01, fp
27d40     64 4E 85 F1 | 	sub	fp, #100
27d44     02 26 0E F2 | 	cmp	local01, #2 wz
27d48     2C 4E 05 A1 |  if_e	add	fp, #44
27d4c     A7 40 68 AC |  if_e	wrlong	#32, fp
27d50     2C 4E 85 A1 |  if_e	sub	fp, #44
27d54                 | LR__3368
27d54                 | LR__3369
27d54     08 4E 05 F1 | 	add	fp, #8
27d58     A7 26 02 FB | 	rdlong	local01, fp
27d5c     18 26 46 F0 | 	shr	local01, #24
27d60     03 26 06 F5 | 	and	local01, #3
27d64     3C 4E 05 F1 | 	add	fp, #60
27d68     A7 26 62 FC | 	wrlong	local01, fp
27d6c     00 26 06 F6 | 	mov	local01, #0
27d70     18 4E 85 F1 | 	sub	fp, #24
27d74     A7 2A 0A FB | 	rdlong	local03, fp wz
27d78     2C 4E 85 F1 | 	sub	fp, #44
27d7c     18 00 90 5D |  if_ne	jmp	#LR__3370
27d80     1C 4E 05 F1 | 	add	fp, #28
27d84     A7 2C 02 FB | 	rdlong	local04, fp
27d88     1C 4E 85 F1 | 	sub	fp, #28
27d8c     16 2F 02 F6 | 	mov	local05, local04
27d90     0A 2E 0E F2 | 	cmp	local05, #10 wz
27d94     04 00 90 AD |  if_e	jmp	#LR__3371
27d98                 | LR__3370
27d98     01 26 66 F5 | 	xor	local01, #1
27d9c                 | LR__3371
27d9c     3C 4E 05 F1 | 	add	fp, #60
27da0     A7 26 62 FC | 	wrlong	local01, fp
27da4     3C 4E 85 F1 | 	sub	fp, #60
27da8     00 26 0E F2 | 	cmp	local01, #0 wz
27dac     0C 01 90 AD |  if_e	jmp	#LR__3373
27db0     44 4E 05 F1 | 	add	fp, #68
27db4     A7 2E 02 FB | 	rdlong	local05, fp
27db8     44 4E 85 F1 | 	sub	fp, #68
27dbc     17 2B 02 F6 | 	mov	local03, local05
27dc0     02 2A 0E F2 | 	cmp	local03, #2 wz
27dc4     F4 00 90 5D |  if_ne	jmp	#LR__3373
27dc8     0C 4F 05 F1 | 	add	fp, #268
27dcc     A7 30 02 FB | 	rdlong	local06, fp
27dd0     0C 4F 85 F1 | 	sub	fp, #268
27dd4     18 2D 02 F6 | 	mov	local04, local06
27dd8     02 2C 0E F2 | 	cmp	local04, #2 wz
27ddc     DC 00 90 AD |  if_e	jmp	#LR__3373
27de0     C0 4E 05 F1 | 	add	fp, #192
27de4     A7 12 02 FB | 	rdlong	arg01, fp
27de8     94 4E 85 F1 | 	sub	fp, #148
27dec     A7 14 02 FB | 	rdlong	arg02, fp
27df0     14 4E 05 F1 | 	add	fp, #20
27df4     A7 16 02 FB | 	rdlong	arg03, fp
27df8     40 4E 85 F1 | 	sub	fp, #64
27dfc     8C 47 B0 FD | 	call	#__system__emitsign_0565
27e00     14 4F 05 F1 | 	add	fp, #276
27e04     A7 FA 61 FC | 	wrlong	result1, fp
27e08     14 4F 85 F1 | 	sub	fp, #276
27e0c     00 FA 55 F2 | 	cmps	result1, #0 wc
27e10     14 4F 05 C1 |  if_b	add	fp, #276
27e14     A7 FA 01 CB |  if_b	rdlong	result1, fp
27e18     14 4F 85 C1 |  if_b	sub	fp, #276
27e1c     6C 0B 90 CD |  if_b	jmp	#LR__3423
27e20     C0 4E 05 F1 | 	add	fp, #192
27e24     A7 26 02 FB | 	rdlong	local01, fp
27e28     54 4E 05 F1 | 	add	fp, #84
27e2c     A7 2E 02 FB | 	rdlong	local05, fp
27e30     17 2B 02 F6 | 	mov	local03, local05
27e34     17 27 02 F1 | 	add	local01, local05
27e38     54 4E 85 F1 | 	sub	fp, #84
27e3c     A7 26 62 FC | 	wrlong	local01, fp
27e40     58 4E 85 F1 | 	sub	fp, #88
27e44     A7 26 0A FB | 	rdlong	local01, fp wz
27e48     68 4E 85 F1 | 	sub	fp, #104
27e4c     60 00 90 AD |  if_e	jmp	#LR__3372
27e50     68 4E 05 F1 | 	add	fp, #104
27e54     A7 26 02 FB | 	rdlong	local01, fp
27e58     AC 4E 05 F1 | 	add	fp, #172
27e5c     A7 2A 02 FB | 	rdlong	local03, fp
27e60     15 27 82 F1 | 	sub	local01, local03
27e64     AC 4E 85 F1 | 	sub	fp, #172
27e68     A7 26 62 FC | 	wrlong	local01, fp
27e6c     68 4E 85 F1 | 	sub	fp, #104
27e70     00 26 56 F2 | 	cmps	local01, #0 wc
27e74     68 4E 05 C1 |  if_b	add	fp, #104
27e78     A7 00 68 CC |  if_b	wrlong	#0, fp
27e7c     68 4E 85 C1 |  if_b	sub	fp, #104
27e80     08 4E 05 F1 | 	add	fp, #8
27e84     A7 26 02 FB | 	rdlong	local01, fp
27e88     E8 26 06 F4 | 	bitl	local01, #232
27e8c     A7 26 62 FC | 	wrlong	local01, fp
27e90     60 4E 05 F1 | 	add	fp, #96
27e94     A7 2E 02 FB | 	rdlong	local05, fp
27e98     17 2B 02 F6 | 	mov	local03, local05
27e9c     08 2A 66 F0 | 	shl	local03, #8
27ea0     15 27 42 F5 | 	or	local01, local03
27ea4     60 4E 85 F1 | 	sub	fp, #96
27ea8     A7 26 62 FC | 	wrlong	local01, fp
27eac     08 4E 85 F1 | 	sub	fp, #8
27eb0                 | LR__3372
27eb0     3C 4E 05 F1 | 	add	fp, #60
27eb4     A7 00 68 FC | 	wrlong	#0, fp
27eb8     3C 4E 85 F1 | 	sub	fp, #60
27ebc                 | LR__3373
27ebc     0C 4E 05 F1 | 	add	fp, #12
27ec0     A7 12 02 FB | 	rdlong	arg01, fp
27ec4     0C 4E 85 F1 | 	sub	fp, #12
27ec8     EC 21 B0 FD | 	call	#__system____builtin_ilogb
27ecc     FF FF 3F FF 
27ed0     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
27ed4     50 00 90 5D |  if_ne	jmp	#LR__3375
27ed8     2C 4E 05 F1 | 	add	fp, #44
27edc     A7 26 0A FB | 	rdlong	local01, fp wz
27ee0     2C 4E 85 F1 | 	sub	fp, #44
27ee4     24 00 90 AD |  if_e	jmp	#LR__3374
27ee8     C0 4E 05 F1 | 	add	fp, #192
27eec     A7 28 02 FB | 	rdlong	local02, fp
27ef0     14 2B 02 F6 | 	mov	local03, local02
27ef4     01 2A 06 F1 | 	add	local03, #1
27ef8     A7 2A 62 FC | 	wrlong	local03, fp
27efc     94 4E 85 F1 | 	sub	fp, #148
27f00     A7 2C 02 FB | 	rdlong	local04, fp
27f04     2C 4E 85 F1 | 	sub	fp, #44
27f08     14 2D 42 FC | 	wrbyte	local04, local02
27f0c                 | LR__3374
27f0c     C0 4E 05 F1 | 	add	fp, #192
27f10     A7 12 02 FB | 	rdlong	arg01, fp
27f14     C0 4E 85 F1 | 	sub	fp, #192
27f18     B2 01 00 FF 
27f1c     2A 14 06 F6 | 	mov	arg02, ##@LR__5371
27f20     A8 E9 BF FD | 	call	#__system____builtin_strcpy
27f24     A4 08 90 FD | 	jmp	#LR__3411
27f28                 | LR__3375
27f28     0C 4E 05 F1 | 	add	fp, #12
27f2c     A7 28 02 FB | 	rdlong	local02, fp
27f30     0C 4E 85 F1 | 	sub	fp, #12
27f34     14 13 02 F6 | 	mov	arg01, local02
27f38     7C 21 B0 FD | 	call	#__system____builtin_ilogb
27f3c     00 00 40 FF 
27f40     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
27f44     50 00 90 5D |  if_ne	jmp	#LR__3377
27f48     2C 4E 05 F1 | 	add	fp, #44
27f4c     A7 26 0A FB | 	rdlong	local01, fp wz
27f50     2C 4E 85 F1 | 	sub	fp, #44
27f54     24 00 90 AD |  if_e	jmp	#LR__3376
27f58     C0 4E 05 F1 | 	add	fp, #192
27f5c     A7 28 02 FB | 	rdlong	local02, fp
27f60     14 2B 02 F6 | 	mov	local03, local02
27f64     01 2A 06 F1 | 	add	local03, #1
27f68     A7 2A 62 FC | 	wrlong	local03, fp
27f6c     94 4E 85 F1 | 	sub	fp, #148
27f70     A7 2C 02 FB | 	rdlong	local04, fp
27f74     2C 4E 85 F1 | 	sub	fp, #44
27f78     14 2D 42 FC | 	wrbyte	local04, local02
27f7c                 | LR__3376
27f7c     C0 4E 05 F1 | 	add	fp, #192
27f80     A7 12 02 FB | 	rdlong	arg01, fp
27f84     C0 4E 85 F1 | 	sub	fp, #192
27f88     B2 01 00 FF 
27f8c     2E 14 06 F6 | 	mov	arg02, ##@LR__5372
27f90     38 E9 BF FD | 	call	#__system____builtin_strcpy
27f94     34 08 90 FD | 	jmp	#LR__3411
27f98                 | LR__3377
27f98     10 4E 05 F1 | 	add	fp, #16
27f9c     A7 26 02 FB | 	rdlong	local01, fp
27fa0     10 4E 85 F1 | 	sub	fp, #16
27fa4     67 26 0E F2 | 	cmp	local01, #103 wz
27fa8     10 4E 05 51 |  if_ne	add	fp, #16
27fac     A7 2A 02 5B |  if_ne	rdlong	local03, fp
27fb0     10 4E 85 51 |  if_ne	sub	fp, #16
27fb4     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
27fb8     94 01 90 5D |  if_ne	jmp	#LR__3382
27fbc     0C 4E 05 F1 | 	add	fp, #12
27fc0     A7 12 02 FB | 	rdlong	arg01, fp
27fc4     08 4E 05 F1 | 	add	fp, #8
27fc8     A7 14 02 F6 | 	mov	arg02, fp
27fcc     0C 4E 05 F1 | 	add	fp, #12
27fd0     A7 16 02 F6 | 	mov	arg03, fp
27fd4     98 4E 05 F1 | 	add	fp, #152
27fd8     A7 18 02 FB | 	rdlong	arg04, fp
27fdc     9C 4E 85 F1 | 	sub	fp, #156
27fe0     A7 1A 02 FB | 	rdlong	arg05, fp
27fe4     1C 4E 85 F1 | 	sub	fp, #28
27fe8     AC 43 B0 FD | 	call	#__system__disassemble_0563
27fec     10 4E 05 F1 | 	add	fp, #16
27ff0     A7 26 02 FB | 	rdlong	local01, fp
27ff4     10 4E 85 F1 | 	sub	fp, #16
27ff8     23 26 0E F2 | 	cmp	local01, #35 wz
27ffc     A0 00 90 5D |  if_ne	jmp	#LR__3379
28000     20 4E 05 F1 | 	add	fp, #32
28004     A7 26 02 FB | 	rdlong	local01, fp
28008     98 4E 05 F1 | 	add	fp, #152
2800c     A7 2A 02 FB | 	rdlong	local03, fp
28010     B8 4E 85 F1 | 	sub	fp, #184
28014     15 27 5A F2 | 	cmps	local01, local03 wcz
28018     24 4E 05 11 |  if_a	add	fp, #36
2801c     A7 02 68 1C |  if_a	wrlong	#1, fp
28020     24 4E 85 11 |  if_a	sub	fp, #36
28024     A4 01 90 1D |  if_a	jmp	#LR__3385
28028     20 4E 05 F1 | 	add	fp, #32
2802c     A7 26 02 FB | 	rdlong	local01, fp
28030     20 4E 85 F1 | 	sub	fp, #32
28034     00 26 56 F2 | 	cmps	local01, #0 wc
28038     2C 00 90 3D |  if_ae	jmp	#LR__3378
2803c     B8 4E 05 F1 | 	add	fp, #184
28040     A7 26 02 FB | 	rdlong	local01, fp
28044     13 27 62 F6 | 	neg	local01, local01
28048     98 4E 85 F1 | 	sub	fp, #152
2804c     A7 2A 02 FB | 	rdlong	local03, fp
28050     20 4E 85 F1 | 	sub	fp, #32
28054     13 2B 5A F2 | 	cmps	local03, local01 wcz
28058     24 4E 05 E1 |  if_be	add	fp, #36
2805c     A7 02 68 EC |  if_be	wrlong	#1, fp
28060     24 4E 85 E1 |  if_be	sub	fp, #36
28064     64 01 90 FD | 	jmp	#LR__3385
28068                 | LR__3378
28068     20 4E 05 F1 | 	add	fp, #32
2806c     A7 26 02 FB | 	rdlong	local01, fp
28070     20 4E 85 F1 | 	sub	fp, #32
28074     01 26 56 F2 | 	cmps	local01, #1 wc
28078     50 01 90 CD |  if_b	jmp	#LR__3385
2807c     B8 4E 05 F1 | 	add	fp, #184
28080     A7 26 02 FB | 	rdlong	local01, fp
28084     98 4E 85 F1 | 	sub	fp, #152
28088     A7 2A 02 FB | 	rdlong	local03, fp
2808c     15 27 82 F1 | 	sub	local01, local03
28090     98 4E 05 F1 | 	add	fp, #152
28094     A7 26 62 FC | 	wrlong	local01, fp
28098     B8 4E 85 F1 | 	sub	fp, #184
2809c     2C 01 90 FD | 	jmp	#LR__3385
280a0                 | LR__3379
280a0     00 26 06 F6 | 	mov	local01, #0
280a4     08 4E 05 F1 | 	add	fp, #8
280a8     A7 28 02 FB | 	rdlong	local02, fp
280ac     1C 28 46 F0 | 	shr	local02, #28
280b0     01 28 0E F5 | 	and	local02, #1 wz
280b4     01 26 06 A6 |  if_e	mov	local01, #1
280b8     2C 4E 05 F1 | 	add	fp, #44
280bc     A7 26 62 FC | 	wrlong	local01, fp
280c0     14 4E 85 F1 | 	sub	fp, #20
280c4     A7 26 02 FB | 	rdlong	local01, fp
280c8     98 4E 05 F1 | 	add	fp, #152
280cc     A7 2A 02 FB | 	rdlong	local03, fp
280d0     B8 4E 85 F1 | 	sub	fp, #184
280d4     15 27 52 F2 | 	cmps	local01, local03 wc
280d8     18 00 90 3D |  if_ae	jmp	#LR__3380
280dc     20 4E 05 F1 | 	add	fp, #32
280e0     A7 2C 02 FB | 	rdlong	local04, fp
280e4     20 4E 85 F1 | 	sub	fp, #32
280e8     FF FF 7F FF 
280ec     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
280f0     10 00 90 3D |  if_ae	jmp	#LR__3381
280f4                 | LR__3380
280f4     24 4E 05 F1 | 	add	fp, #36
280f8     A7 02 68 FC | 	wrlong	#1, fp
280fc     24 4E 85 F1 | 	sub	fp, #36
28100     C8 00 90 FD | 	jmp	#LR__3385
28104                 | LR__3381
28104     B8 4E 05 F1 | 	add	fp, #184
28108     A7 2C 02 FB | 	rdlong	local04, fp
2810c     98 4E 85 F1 | 	sub	fp, #152
28110     A7 2A 02 FB | 	rdlong	local03, fp
28114     15 2D 82 F1 | 	sub	local04, local03
28118     98 4E 05 F1 | 	add	fp, #152
2811c     A7 2C 62 FC | 	wrlong	local04, fp
28120     AC 4E 85 F1 | 	sub	fp, #172
28124     A7 12 02 FB | 	rdlong	arg01, fp
28128     08 4E 05 F1 | 	add	fp, #8
2812c     A7 14 02 F6 | 	mov	arg02, fp
28130     0C 4E 05 F1 | 	add	fp, #12
28134     A7 16 02 F6 | 	mov	arg03, fp
28138     16 19 62 F6 | 	neg	arg04, local04
2813c     04 4E 85 F1 | 	sub	fp, #4
28140     A7 1A 02 FB | 	rdlong	arg05, fp
28144     1C 4E 85 F1 | 	sub	fp, #28
28148     4C 42 B0 FD | 	call	#__system__disassemble_0563
2814c     7C 00 90 FD | 	jmp	#LR__3385
28150                 | LR__3382
28150     24 4E 05 F1 | 	add	fp, #36
28154     A7 26 0A FB | 	rdlong	local01, fp wz
28158     24 4E 85 F1 | 	sub	fp, #36
2815c     34 00 90 AD |  if_e	jmp	#LR__3383
28160     0C 4E 05 F1 | 	add	fp, #12
28164     A7 12 02 FB | 	rdlong	arg01, fp
28168     08 4E 05 F1 | 	add	fp, #8
2816c     A7 14 02 F6 | 	mov	arg02, fp
28170     0C 4E 05 F1 | 	add	fp, #12
28174     A7 16 02 F6 | 	mov	arg03, fp
28178     98 4E 05 F1 | 	add	fp, #152
2817c     A7 18 02 FB | 	rdlong	arg04, fp
28180     9C 4E 85 F1 | 	sub	fp, #156
28184     A7 1A 02 FB | 	rdlong	arg05, fp
28188     1C 4E 85 F1 | 	sub	fp, #28
2818c     08 42 B0 FD | 	call	#__system__disassemble_0563
28190     38 00 90 FD | 	jmp	#LR__3384
28194                 | LR__3383
28194     0C 4E 05 F1 | 	add	fp, #12
28198     A7 12 02 FB | 	rdlong	arg01, fp
2819c     08 4E 05 F1 | 	add	fp, #8
281a0     A7 14 02 F6 | 	mov	arg02, fp
281a4     0C 4E 05 F1 | 	add	fp, #12
281a8     A7 16 02 F6 | 	mov	arg03, fp
281ac     98 4E 05 F1 | 	add	fp, #152
281b0     A7 2C 02 FB | 	rdlong	local04, fp
281b4     01 2C 06 F1 | 	add	local04, #1
281b8     16 19 62 F6 | 	neg	arg04, local04
281bc     9C 4E 85 F1 | 	sub	fp, #156
281c0     A7 1A 02 FB | 	rdlong	arg05, fp
281c4     1C 4E 85 F1 | 	sub	fp, #28
281c8     CC 41 B0 FD | 	call	#__system__disassemble_0563
281cc                 | LR__3384
281cc                 | LR__3385
281cc     1C 4E 05 F1 | 	add	fp, #28
281d0     A7 26 02 FB | 	rdlong	local01, fp
281d4     1C 4E 85 F1 | 	sub	fp, #28
281d8     02 26 0E F2 | 	cmp	local01, #2 wz
281dc     4C 00 90 5D |  if_ne	jmp	#LR__3388
281e0     1C 4E 05 F1 | 	add	fp, #28
281e4     A7 20 68 FC | 	wrlong	#16, fp
281e8     1C 4E 85 F1 | 	sub	fp, #28
281ec                 | LR__3386
281ec     14 4E 05 F1 | 	add	fp, #20
281f0     A7 26 0A FB | 	rdlong	local01, fp wz
281f4     14 4E 85 F1 | 	sub	fp, #20
281f8     30 00 90 AD |  if_e	jmp	#LR__3387
281fc     14 4E 05 F1 | 	add	fp, #20
28200     A7 2A 02 FB | 	rdlong	local03, fp
28204     14 4E 85 F1 | 	sub	fp, #20
28208     00 80 00 FF 
2820c     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
28210     18 00 90 3D |  if_ae	jmp	#LR__3387
28214     14 4E 05 F1 | 	add	fp, #20
28218     A7 26 02 FB | 	rdlong	local01, fp
2821c     01 26 66 F0 | 	shl	local01, #1
28220     A7 26 62 FC | 	wrlong	local01, fp
28224     14 4E 85 F1 | 	sub	fp, #20
28228     C0 FF 9F FD | 	jmp	#LR__3386
2822c                 | LR__3387
2822c                 | LR__3388
2822c     70 4E 05 F1 | 	add	fp, #112
28230     A7 12 02 F6 | 	mov	arg01, fp
28234     5C 4E 85 F1 | 	sub	fp, #92
28238     A7 14 02 FB | 	rdlong	arg02, fp
2823c     08 4E 05 F1 | 	add	fp, #8
28240     A7 16 02 FB | 	rdlong	arg03, fp
28244     A0 4E 05 F1 | 	add	fp, #160
28248     A7 1A 02 FB | 	rdlong	arg05, fp
2824c     BC 4E 85 F1 | 	sub	fp, #188
28250     01 18 06 F6 | 	mov	arg04, #1
28254     CC 40 B0 FD | 	call	#__system___uitoa
28258     58 4E 05 F1 | 	add	fp, #88
2825c     A7 FA 61 FC | 	wrlong	result1, fp
28260     38 4E 85 F1 | 	sub	fp, #56
28264     A7 26 02 FB | 	rdlong	local01, fp
28268     20 4E 85 F1 | 	sub	fp, #32
2826c     00 26 56 F2 | 	cmps	local01, #0 wc
28270     50 00 90 3D |  if_ae	jmp	#LR__3389
28274     60 4E 05 F1 | 	add	fp, #96
28278     A7 5A 68 FC | 	wrlong	#45, fp
2827c     50 4E 05 F1 | 	add	fp, #80
28280     A7 12 02 F6 | 	mov	arg01, fp
28284     90 4E 85 F1 | 	sub	fp, #144
28288     A7 2A 02 FB | 	rdlong	local03, fp
2828c     15 15 62 F6 | 	neg	arg02, local03
28290     18 4E 05 F1 | 	add	fp, #24
28294     A7 18 02 FB | 	rdlong	arg04, fp
28298     84 4E 05 F1 | 	add	fp, #132
2829c     A7 30 02 FB | 	rdlong	local06, fp
282a0     BC 4E 85 F1 | 	sub	fp, #188
282a4     18 2D 02 F6 | 	mov	local04, local06
282a8     0A 16 06 F6 | 	mov	arg03, #10
282ac     16 1B 02 F6 | 	mov	arg05, local04
282b0     70 40 B0 FD | 	call	#__system___uitoa
282b4     5C 4E 05 F1 | 	add	fp, #92
282b8     A7 FA 61 FC | 	wrlong	result1, fp
282bc     5C 4E 85 F1 | 	sub	fp, #92
282c0     48 00 90 FD | 	jmp	#LR__3390
282c4                 | LR__3389
282c4     60 4E 05 F1 | 	add	fp, #96
282c8     A7 56 68 FC | 	wrlong	#43, fp
282cc     50 4E 05 F1 | 	add	fp, #80
282d0     A7 12 02 F6 | 	mov	arg01, fp
282d4     90 4E 85 F1 | 	sub	fp, #144
282d8     A7 14 02 FB | 	rdlong	arg02, fp
282dc     18 4E 05 F1 | 	add	fp, #24
282e0     A7 18 02 FB | 	rdlong	arg04, fp
282e4     84 4E 05 F1 | 	add	fp, #132
282e8     A7 30 02 FB | 	rdlong	local06, fp
282ec     BC 4E 85 F1 | 	sub	fp, #188
282f0     18 2D 02 F6 | 	mov	local04, local06
282f4     0A 16 06 F6 | 	mov	arg03, #10
282f8     16 1B 02 F6 | 	mov	arg05, local04
282fc     24 40 B0 FD | 	call	#__system___uitoa
28300     5C 4E 05 F1 | 	add	fp, #92
28304     A7 FA 61 FC | 	wrlong	result1, fp
28308     5C 4E 85 F1 | 	sub	fp, #92
2830c                 | LR__3390
2830c     24 4E 05 F1 | 	add	fp, #36
28310     A7 26 0A FB | 	rdlong	local01, fp wz
28314     24 4E 85 F1 | 	sub	fp, #36
28318     2C 00 90 AD |  if_e	jmp	#LR__3391
2831c     50 4E 05 F1 | 	add	fp, #80
28320     A7 00 68 FC | 	wrlong	#0, fp
28324     04 4E 85 F1 | 	sub	fp, #4
28328     A7 00 68 FC | 	wrlong	#0, fp
2832c     6C 4E 05 F1 | 	add	fp, #108
28330     A7 26 02 FB | 	rdlong	local01, fp
28334     01 26 06 F1 | 	add	local01, #1
28338     64 4E 85 F1 | 	sub	fp, #100
2833c     A7 26 62 FC | 	wrlong	local01, fp
28340     54 4E 85 F1 | 	sub	fp, #84
28344     88 00 90 FD | 	jmp	#LR__3394
28348                 | LR__3391
28348     20 4E 05 F1 | 	add	fp, #32
2834c     A7 26 02 FB | 	rdlong	local01, fp
28350     20 4E 85 F1 | 	sub	fp, #32
28354     00 26 56 F2 | 	cmps	local01, #0 wc
28358     40 00 90 3D |  if_ae	jmp	#LR__3392
2835c     20 4E 05 F1 | 	add	fp, #32
28360     A7 28 02 FB | 	rdlong	local02, fp
28364     30 4E 05 F1 | 	add	fp, #48
28368     A7 28 62 FC | 	wrlong	local02, fp
2836c     04 4E 85 F1 | 	sub	fp, #4
28370     A7 28 62 FC | 	wrlong	local02, fp
28374     2C 4E 85 F1 | 	sub	fp, #44
28378     A7 26 02 FB | 	rdlong	local01, fp
2837c     98 4E 05 F1 | 	add	fp, #152
28380     A7 2A 02 FB | 	rdlong	local03, fp
28384     15 27 02 F1 | 	add	local01, local03
28388     01 26 06 F1 | 	add	local01, #1
2838c     64 4E 85 F1 | 	sub	fp, #100
28390     A7 26 62 FC | 	wrlong	local01, fp
28394     54 4E 85 F1 | 	sub	fp, #84
28398     34 00 90 FD | 	jmp	#LR__3393
2839c                 | LR__3392
2839c     4C 4E 05 F1 | 	add	fp, #76
283a0     A7 00 68 FC | 	wrlong	#0, fp
283a4     2C 4E 85 F1 | 	sub	fp, #44
283a8     A7 26 02 FB | 	rdlong	local01, fp
283ac     30 4E 05 F1 | 	add	fp, #48
283b0     A7 26 62 FC | 	wrlong	local01, fp
283b4     68 4E 05 F1 | 	add	fp, #104
283b8     A7 2A 02 FB | 	rdlong	local03, fp
283bc     15 27 02 F1 | 	add	local01, local03
283c0     01 26 06 F1 | 	add	local01, #1
283c4     64 4E 85 F1 | 	sub	fp, #100
283c8     A7 26 62 FC | 	wrlong	local01, fp
283cc     54 4E 85 F1 | 	sub	fp, #84
283d0                 | LR__3393
283d0                 | LR__3394
283d0     54 4E 05 F1 | 	add	fp, #84
283d4     A7 26 02 FB | 	rdlong	local01, fp
283d8     08 4E 85 F1 | 	sub	fp, #8
283dc     A7 2A 02 FB | 	rdlong	local03, fp
283e0     15 27 82 F1 | 	sub	local01, local03
283e4     01 26 06 F1 | 	add	local01, #1
283e8     24 4E 85 F1 | 	sub	fp, #36
283ec     A7 26 62 FC | 	wrlong	local01, fp
283f0     04 4E 05 F1 | 	add	fp, #4
283f4     A7 26 0A FB | 	rdlong	local01, fp wz
283f8     2C 4E 85 F1 | 	sub	fp, #44
283fc     28 4E 05 51 |  if_ne	add	fp, #40
28400     A7 2A 02 5B |  if_ne	rdlong	local03, fp
28404     01 2A 06 51 |  if_ne	add	local03, #1
28408     A7 2A 62 5C |  if_ne	wrlong	local03, fp
2840c     28 4E 85 51 |  if_ne	sub	fp, #40
28410     1C 4E 05 F1 | 	add	fp, #28
28414     A7 26 02 FB | 	rdlong	local01, fp
28418     1C 4E 85 F1 | 	sub	fp, #28
2841c     10 26 0E F2 | 	cmp	local01, #16 wz
28420     28 4E 05 A1 |  if_e	add	fp, #40
28424     A7 26 02 AB |  if_e	rdlong	local01, fp
28428     02 26 06 A1 |  if_e	add	local01, #2
2842c     A7 26 62 AC |  if_e	wrlong	local01, fp
28430     28 4E 85 A1 |  if_e	sub	fp, #40
28434     24 4E 05 F1 | 	add	fp, #36
28438     A7 26 0A FB | 	rdlong	local01, fp wz
2843c     24 4E 85 F1 | 	sub	fp, #36
28440     28 00 90 AD |  if_e	jmp	#LR__3395
28444     28 4E 05 F1 | 	add	fp, #40
28448     A7 26 02 FB | 	rdlong	local01, fp
2844c     02 2A 06 F6 | 	mov	local03, #2
28450     34 4E 05 F1 | 	add	fp, #52
28454     A7 2E 02 FB | 	rdlong	local05, fp
28458     17 2B 02 F1 | 	add	local03, local05
2845c     15 27 02 F1 | 	add	local01, local03
28460     34 4E 85 F1 | 	sub	fp, #52
28464     A7 26 62 FC | 	wrlong	local01, fp
28468     28 4E 85 F1 | 	sub	fp, #40
2846c                 | LR__3395
2846c     28 4E 05 F1 | 	add	fp, #40
28470     A7 26 02 FB | 	rdlong	local01, fp
28474     28 4E 85 F1 | 	sub	fp, #40
28478     41 26 56 F2 | 	cmps	local01, #65 wc
2847c     01 FA 65 36 |  if_ae	neg	result1, #1
28480     08 05 90 3D |  if_ae	jmp	#LR__3423
28484     3C 4E 05 F1 | 	add	fp, #60
28488     A7 26 0A FB | 	rdlong	local01, fp wz
2848c     3C 4E 85 F1 | 	sub	fp, #60
28490     60 00 90 AD |  if_e	jmp	#LR__3396
28494     C0 4E 05 F1 | 	add	fp, #192
28498     A7 12 02 FB | 	rdlong	arg01, fp
2849c     94 4E 85 F1 | 	sub	fp, #148
284a0     A7 14 02 FB | 	rdlong	arg02, fp
284a4     14 4E 05 F1 | 	add	fp, #20
284a8     A7 16 02 FB | 	rdlong	arg03, fp
284ac     40 4E 85 F1 | 	sub	fp, #64
284b0     D8 40 B0 FD | 	call	#__system__emitsign_0565
284b4     18 4F 05 F1 | 	add	fp, #280
284b8     A7 FA 61 FC | 	wrlong	result1, fp
284bc     18 4F 85 F1 | 	sub	fp, #280
284c0     00 FA 55 F2 | 	cmps	result1, #0 wc
284c4     18 4F 05 C1 |  if_b	add	fp, #280
284c8     A7 FA 01 CB |  if_b	rdlong	result1, fp
284cc     18 4F 85 C1 |  if_b	sub	fp, #280
284d0     B8 04 90 CD |  if_b	jmp	#LR__3423
284d4     C0 4E 05 F1 | 	add	fp, #192
284d8     A7 26 02 FB | 	rdlong	local01, fp
284dc     58 4E 05 F1 | 	add	fp, #88
284e0     A7 2A 02 FB | 	rdlong	local03, fp
284e4     15 27 02 F1 | 	add	local01, local03
284e8     58 4E 85 F1 | 	sub	fp, #88
284ec     A7 26 62 FC | 	wrlong	local01, fp
284f0     C0 4E 85 F1 | 	sub	fp, #192
284f4                 | LR__3396
284f4     4C 4E 05 F1 | 	add	fp, #76
284f8     A7 26 02 FB | 	rdlong	local01, fp
284fc     34 4E 85 F1 | 	sub	fp, #52
28500     A7 26 62 FC | 	wrlong	local01, fp
28504     18 4E 85 F1 | 	sub	fp, #24
28508     97 9E 48 FB | 	callpa	#(@LR__3402-@LR__3397)>>2,fcache_load_ptr_
2850c                 | LR__3397
2850c     18 4E 05 F1 | 	add	fp, #24
28510     A7 28 02 FB | 	rdlong	local02, fp
28514     3C 4E 05 F1 | 	add	fp, #60
28518     A7 2E 02 FB | 	rdlong	local05, fp
2851c     54 4E 85 F1 | 	sub	fp, #84
28520     17 29 52 F2 | 	cmps	local02, local05 wc
28524     20 01 90 3D |  if_ae	jmp	#LR__3403
28528     18 4E 05 F1 | 	add	fp, #24
2852c     A7 30 02 FB | 	rdlong	local06, fp
28530     18 4E 85 F1 | 	sub	fp, #24
28534     00 30 56 F2 | 	cmps	local06, #0 wc
28538     58 00 90 CD |  if_b	jmp	#LR__3398
2853c     18 4E 05 F1 | 	add	fp, #24
28540     A7 30 02 FB | 	rdlong	local06, fp
28544     40 4E 05 F1 | 	add	fp, #64
28548     A7 32 02 FB | 	rdlong	local07, fp
2854c     58 4E 85 F1 | 	sub	fp, #88
28550     19 31 52 F2 | 	cmps	local06, local07 wc
28554     3C 00 90 3D |  if_ae	jmp	#LR__3398
28558     C0 4E 05 F1 | 	add	fp, #192
2855c     A7 34 02 FB | 	rdlong	local08, fp
28560     1A 33 02 F6 | 	mov	local07, local08
28564     01 32 06 F1 | 	add	local07, #1
28568     A7 32 62 FC | 	wrlong	local07, fp
2856c     A8 4E 85 F1 | 	sub	fp, #168
28570     A7 32 02 FB | 	rdlong	local07, fp
28574     19 37 02 F6 | 	mov	local09, local07
28578     58 4E 05 F1 | 	add	fp, #88
2857c     A7 38 02 F6 | 	mov	local10, fp
28580     A7 36 02 F1 | 	add	local09, fp
28584     1B 3B C2 FA | 	rdbyte	local11, local09
28588     1A 3B 42 FC | 	wrbyte	local11, local08
2858c     70 4E 85 F1 | 	sub	fp, #112
28590     20 00 90 FD | 	jmp	#LR__3399
28594                 | LR__3398
28594     C0 4E 05 F1 | 	add	fp, #192
28598     A7 34 02 FB | 	rdlong	local08, fp
2859c     1A 37 02 F6 | 	mov	local09, local08
285a0     01 36 06 F1 | 	add	local09, #1
285a4     A7 36 62 FC | 	wrlong	local09, fp
285a8     C0 4E 85 F1 | 	sub	fp, #192
285ac     30 36 06 F6 | 	mov	local09, #48
285b0     1A 61 48 FC | 	wrbyte	#48, local08
285b4                 | LR__3399
285b4     18 4E 05 F1 | 	add	fp, #24
285b8     A7 30 02 FB | 	rdlong	local06, fp
285bc     38 4E 05 F1 | 	add	fp, #56
285c0     A7 3C 02 FB | 	rdlong	local12, fp
285c4     50 4E 85 F1 | 	sub	fp, #80
285c8     1E 31 0A F2 | 	cmp	local06, local12 wz
285cc     5C 00 90 5D |  if_ne	jmp	#LR__3401
285d0     10 4F 05 F1 | 	add	fp, #272
285d4     A7 32 02 FB | 	rdlong	local07, fp
285d8     10 4F 85 F1 | 	sub	fp, #272
285dc     19 37 0A F6 | 	mov	local09, local07 wz
285e0     28 00 90 5D |  if_ne	jmp	#LR__3400
285e4     54 4E 05 F1 | 	add	fp, #84
285e8     A7 3A 02 FB | 	rdlong	local11, fp
285ec     1D 39 02 F6 | 	mov	local10, local11
285f0     01 38 86 F1 | 	sub	local10, #1
285f4     3C 4E 85 F1 | 	sub	fp, #60
285f8     A7 3E 02 FB | 	rdlong	local13, fp
285fc     18 4E 85 F1 | 	sub	fp, #24
28600     1F 41 02 F6 | 	mov	local14, local13
28604     1C 41 52 F2 | 	cmps	local14, local10 wc
28608     20 00 90 3D |  if_ae	jmp	#LR__3401
2860c                 | LR__3400
2860c     C0 4E 05 F1 | 	add	fp, #192
28610     A7 34 02 FB | 	rdlong	local08, fp
28614     1A 3D 02 F6 | 	mov	local12, local08
28618     01 3C 06 F1 | 	add	local12, #1
2861c     A7 3C 62 FC | 	wrlong	local12, fp
28620     C0 4E 85 F1 | 	sub	fp, #192
28624     2E 36 06 F6 | 	mov	local09, #46
28628     1A 5D 48 FC | 	wrbyte	#46, local08
2862c                 | LR__3401
2862c     18 4E 05 F1 | 	add	fp, #24
28630     A7 42 02 FB | 	rdlong	local15, fp
28634     21 3D 02 F6 | 	mov	local12, local15
28638     01 3C 06 F1 | 	add	local12, #1
2863c     A7 3C 62 FC | 	wrlong	local12, fp
28640     18 4E 85 F1 | 	sub	fp, #24
28644     C4 FE 9F FD | 	jmp	#LR__3397
28648                 | LR__3402
28648                 | LR__3403
28648     34 4E 05 F1 | 	add	fp, #52
2864c     A7 26 0A FB | 	rdlong	local01, fp wz
28650     34 4E 85 F1 | 	sub	fp, #52
28654     A0 00 90 AD |  if_e	jmp	#LR__3407
28658     C0 4E 05 F1 | 	add	fp, #192
2865c     A7 26 02 FB | 	rdlong	local01, fp
28660     01 26 86 F1 | 	sub	local01, #1
28664     A7 26 62 FC | 	wrlong	local01, fp
28668     C0 4E 85 F1 | 	sub	fp, #192
2866c     97 26 48 FB | 	callpa	#(@LR__3405-@LR__3404)>>2,fcache_load_ptr_
28670                 | LR__3404
28670     C0 4E 05 F1 | 	add	fp, #192
28674     A7 26 02 FB | 	rdlong	local01, fp
28678     04 4E 05 F1 | 	add	fp, #4
2867c     A7 2A 02 FB | 	rdlong	local03, fp
28680     C4 4E 85 F1 | 	sub	fp, #196
28684     15 27 5A F2 | 	cmps	local01, local03 wcz
28688     30 00 90 ED |  if_be	jmp	#LR__3406
2868c     C0 4E 05 F1 | 	add	fp, #192
28690     A7 30 02 FB | 	rdlong	local06, fp
28694     C0 4E 85 F1 | 	sub	fp, #192
28698     18 2D C2 FA | 	rdbyte	local04, local06
2869c     30 2C 0E F2 | 	cmp	local04, #48 wz
286a0     18 00 90 5D |  if_ne	jmp	#LR__3406
286a4     C0 4E 05 F1 | 	add	fp, #192
286a8     A7 26 02 FB | 	rdlong	local01, fp
286ac     01 26 86 F1 | 	sub	local01, #1
286b0     A7 26 62 FC | 	wrlong	local01, fp
286b4     C0 4E 85 F1 | 	sub	fp, #192
286b8     B4 FF 9F FD | 	jmp	#LR__3404
286bc                 | LR__3405
286bc                 | LR__3406
286bc     C0 4E 05 F1 | 	add	fp, #192
286c0     A7 28 02 FB | 	rdlong	local02, fp
286c4     C0 4E 85 F1 | 	sub	fp, #192
286c8     14 27 C2 FA | 	rdbyte	local01, local02
286cc     2E 26 0E F2 | 	cmp	local01, #46 wz
286d0     C0 4E 05 A1 |  if_e	add	fp, #192
286d4     A7 26 02 AB |  if_e	rdlong	local01, fp
286d8     01 26 86 A1 |  if_e	sub	local01, #1
286dc     A7 26 62 AC |  if_e	wrlong	local01, fp
286e0     C0 4E 85 A1 |  if_e	sub	fp, #192
286e4     C0 4E 05 F1 | 	add	fp, #192
286e8     A7 2A 02 FB | 	rdlong	local03, fp
286ec     01 2A 06 F1 | 	add	local03, #1
286f0     A7 2A 62 FC | 	wrlong	local03, fp
286f4     C0 4E 85 F1 | 	sub	fp, #192
286f8                 | LR__3407
286f8     24 4E 05 F1 | 	add	fp, #36
286fc     A7 26 0A FB | 	rdlong	local01, fp wz
28700     24 4E 85 F1 | 	sub	fp, #36
28704     B4 00 90 AD |  if_e	jmp	#LR__3410
28708     C0 4E 05 F1 | 	add	fp, #192
2870c     A7 28 02 FB | 	rdlong	local02, fp
28710     14 2B 02 F6 | 	mov	local03, local02
28714     01 2A 06 F1 | 	add	local03, #1
28718     A7 2A 62 FC | 	wrlong	local03, fp
2871c     90 4E 85 F1 | 	sub	fp, #144
28720     A7 2C 02 FB | 	rdlong	local04, fp
28724     14 2D 42 FC | 	wrbyte	local04, local02
28728     90 4E 05 F1 | 	add	fp, #144
2872c     A7 28 02 FB | 	rdlong	local02, fp
28730     14 2B 02 F6 | 	mov	local03, local02
28734     01 2A 06 F1 | 	add	local03, #1
28738     A7 2A 62 FC | 	wrlong	local03, fp
2873c     60 4E 85 F1 | 	sub	fp, #96
28740     A7 2C 02 FB | 	rdlong	local04, fp
28744     14 2D 42 FC | 	wrbyte	local04, local02
28748     48 4E 85 F1 | 	sub	fp, #72
2874c     A7 00 68 FC | 	wrlong	#0, fp
28750     18 4E 85 F1 | 	sub	fp, #24
28754                 | LR__3408
28754     18 4E 05 F1 | 	add	fp, #24
28758     A7 28 02 FB | 	rdlong	local02, fp
2875c     44 4E 05 F1 | 	add	fp, #68
28760     A7 2E 02 FB | 	rdlong	local05, fp
28764     5C 4E 85 F1 | 	sub	fp, #92
28768     17 29 52 F2 | 	cmps	local02, local05 wc
2876c     4C 00 90 3D |  if_ae	jmp	#LR__3409
28770     C0 4E 05 F1 | 	add	fp, #192
28774     A7 34 02 FB | 	rdlong	local08, fp
28778     1A 3D 02 F6 | 	mov	local12, local08
2877c     01 3C 06 F1 | 	add	local12, #1
28780     A7 3C 62 FC | 	wrlong	local12, fp
28784     A8 4E 85 F1 | 	sub	fp, #168
28788     A7 32 02 FB | 	rdlong	local07, fp
2878c     19 37 02 F6 | 	mov	local09, local07
28790     98 4E 05 F1 | 	add	fp, #152
28794     A7 38 02 F6 | 	mov	local10, fp
28798     A7 36 02 F1 | 	add	local09, fp
2879c     1B 3B C2 FA | 	rdbyte	local11, local09
287a0     1A 3B 42 FC | 	wrbyte	local11, local08
287a4     98 4E 85 F1 | 	sub	fp, #152
287a8     A7 3C 02 FB | 	rdlong	local12, fp
287ac     01 3C 06 F1 | 	add	local12, #1
287b0     A7 3C 62 FC | 	wrlong	local12, fp
287b4     18 4E 85 F1 | 	sub	fp, #24
287b8     98 FF 9F FD | 	jmp	#LR__3408
287bc                 | LR__3409
287bc                 | LR__3410
287bc     C0 4E 05 F1 | 	add	fp, #192
287c0     A7 26 02 FB | 	rdlong	local01, fp
287c4     C0 4E 85 F1 | 	sub	fp, #192
287c8     13 01 48 FC | 	wrbyte	#0, local01
287cc                 | LR__3411
287cc     6C 4E 05 F1 | 	add	fp, #108
287d0     A7 26 0A FB | 	rdlong	local01, fp wz
287d4     6C 4E 85 F1 | 	sub	fp, #108
287d8     90 01 90 AD |  if_e	jmp	#LR__3422
287dc     48 4E 05 F1 | 	add	fp, #72
287e0     A7 2A 0A FB | 	rdlong	local03, fp wz
287e4     48 4E 85 F1 | 	sub	fp, #72
287e8     80 01 90 AD |  if_e	jmp	#LR__3422
287ec     C4 4E 05 F1 | 	add	fp, #196
287f0     A7 12 02 FB | 	rdlong	arg01, fp
287f4     C4 4E 85 F1 | 	sub	fp, #196
287f8     09 45 02 F6 | 	mov	local16, arg01
287fc     97 06 48 FB | 	callpa	#(@LR__3413-@LR__3412)>>2,fcache_load_ptr_
28800                 | LR__3412
28800     22 FB C9 FA | 	rdbyte	result1, local16 wz
28804     01 44 06 51 |  if_ne	add	local16, #1
28808     F4 FF 9F 5D |  if_ne	jmp	#LR__3412
2880c                 | LR__3413
2880c     09 45 82 F1 | 	sub	local16, arg01
28810     22 2D 02 F6 | 	mov	local04, local16
28814     6C 4E 05 F1 | 	add	fp, #108
28818     A7 30 02 FB | 	rdlong	local06, fp
2881c     6C 4E 85 F1 | 	sub	fp, #108
28820     18 2D 5A F2 | 	cmps	local04, local06 wcz
28824     44 01 90 ED |  if_be	jmp	#LR__3422
28828     C4 4E 05 F1 | 	add	fp, #196
2882c     A7 26 02 FB | 	rdlong	local01, fp
28830     5C 4E 05 F1 | 	add	fp, #92
28834     A7 26 62 FC | 	wrlong	local01, fp
28838     FC 4E 85 F1 | 	sub	fp, #252
2883c     A7 26 0A FB | 	rdlong	local01, fp wz
28840     24 4E 85 F1 | 	sub	fp, #36
28844     20 00 90 AD |  if_e	jmp	#LR__3414
28848     B8 4E 05 F1 | 	add	fp, #184
2884c     A7 00 68 FC | 	wrlong	#0, fp
28850     4C 4E 85 F1 | 	sub	fp, #76
28854     A7 26 02 FB | 	rdlong	local01, fp
28858     B0 4E 05 F1 | 	add	fp, #176
2885c     A7 26 62 FC | 	wrlong	local01, fp
28860     1C 4F 85 F1 | 	sub	fp, #284
28864     24 00 90 FD | 	jmp	#LR__3415
28868                 | LR__3414
28868     6C 4E 05 F1 | 	add	fp, #108
2886c     A7 26 02 FB | 	rdlong	local01, fp
28870     01 26 86 F1 | 	sub	local01, #1
28874     4C 4E 05 F1 | 	add	fp, #76
28878     A7 2A 02 FB | 	rdlong	local03, fp
2887c     15 27 82 F1 | 	sub	local01, local03
28880     64 4E 05 F1 | 	add	fp, #100
28884     A7 26 62 FC | 	wrlong	local01, fp
28888     1C 4F 85 F1 | 	sub	fp, #284
2888c                 | LR__3415
2888c     97 20 48 FB | 	callpa	#(@LR__3417-@LR__3416)>>2,fcache_load_ptr_
28890                 | LR__3416
28890     1C 4F 05 F1 | 	add	fp, #284
28894     A7 26 0A FB | 	rdlong	local01, fp wz
28898     1C 4F 85 F1 | 	sub	fp, #284
2889c     30 00 90 AD |  if_e	jmp	#LR__3418
288a0     20 4F 05 F1 | 	add	fp, #288
288a4     A7 28 02 FB | 	rdlong	local02, fp
288a8     14 2B 02 F6 | 	mov	local03, local02
288ac     01 2A 06 F1 | 	add	local03, #1
288b0     A7 2A 62 FC | 	wrlong	local03, fp
288b4     14 55 48 FC | 	wrbyte	#42, local02
288b8     04 4E 85 F1 | 	sub	fp, #4
288bc     A7 26 02 FB | 	rdlong	local01, fp
288c0     01 26 86 F1 | 	sub	local01, #1
288c4     A7 26 62 FC | 	wrlong	local01, fp
288c8     1C 4F 85 F1 | 	sub	fp, #284
288cc     C0 FF 9F FD | 	jmp	#LR__3416
288d0                 | LR__3417
288d0                 | LR__3418
288d0     B8 4E 05 F1 | 	add	fp, #184
288d4     A7 26 0A FB | 	rdlong	local01, fp wz
288d8     B8 4E 85 F1 | 	sub	fp, #184
288dc     70 00 90 AD |  if_e	jmp	#LR__3421
288e0     20 4F 05 F1 | 	add	fp, #288
288e4     A7 28 02 FB | 	rdlong	local02, fp
288e8     14 2B 02 F6 | 	mov	local03, local02
288ec     01 2A 06 F1 | 	add	local03, #1
288f0     A7 2A 62 FC | 	wrlong	local03, fp
288f4     14 5D 48 FC | 	wrbyte	#46, local02
288f8     04 4E 85 F1 | 	sub	fp, #4
288fc     A7 00 68 FC | 	wrlong	#0, fp
28900     1C 4F 85 F1 | 	sub	fp, #284
28904                 | LR__3419
28904     1C 4F 05 F1 | 	add	fp, #284
28908     A7 28 02 FB | 	rdlong	local02, fp
2890c     64 4E 85 F1 | 	sub	fp, #100
28910     A7 2E 02 FB | 	rdlong	local05, fp
28914     B8 4E 85 F1 | 	sub	fp, #184
28918     17 29 52 F2 | 	cmps	local02, local05 wc
2891c     30 00 90 3D |  if_ae	jmp	#LR__3420
28920     20 4F 05 F1 | 	add	fp, #288
28924     A7 34 02 FB | 	rdlong	local08, fp
28928     1A 3D 02 F6 | 	mov	local12, local08
2892c     01 3C 06 F1 | 	add	local12, #1
28930     A7 3C 62 FC | 	wrlong	local12, fp
28934     1A 55 48 FC | 	wrbyte	#42, local08
28938     04 4E 85 F1 | 	sub	fp, #4
2893c     A7 3C 02 FB | 	rdlong	local12, fp
28940     01 3C 06 F1 | 	add	local12, #1
28944     A7 3C 62 FC | 	wrlong	local12, fp
28948     1C 4F 85 F1 | 	sub	fp, #284
2894c     B4 FF 9F FD | 	jmp	#LR__3419
28950                 | LR__3420
28950                 | LR__3421
28950     20 4F 05 F1 | 	add	fp, #288
28954     A7 28 02 FB | 	rdlong	local02, fp
28958     14 2B 02 F6 | 	mov	local03, local02
2895c     01 2A 06 F1 | 	add	local03, #1
28960     A7 2A 62 FC | 	wrlong	local03, fp
28964     20 4F 85 F1 | 	sub	fp, #288
28968     14 01 48 FC | 	wrbyte	#0, local02
2896c                 | LR__3422
2896c     04 4E 05 F1 | 	add	fp, #4
28970     A7 12 02 FB | 	rdlong	arg01, fp
28974     04 4E 05 F1 | 	add	fp, #4
28978     A7 14 02 FB | 	rdlong	arg02, fp
2897c     BC 4E 05 F1 | 	add	fp, #188
28980     A7 16 02 FB | 	rdlong	arg03, fp
28984     C4 4E 85 F1 | 	sub	fp, #196
28988     C4 EE BF FD | 	call	#__system___fmtstr
2898c                 | LR__3423
2898c     A7 F0 03 F6 | 	mov	ptra, fp
28990     B2 00 A0 FD | 	call	#popregs_
28994                 | __system___fmtfloat_ret
28994     2D 00 64 FD | 	ret
28998                 | 
28998                 | __system__Left_S
28998     04 4A 05 F6 | 	mov	COUNT_, #4
2899c     A8 00 A0 FD | 	call	#pushregs_
289a0     09 27 02 F6 | 	mov	local01, arg01
289a4     0A 29 02 F6 | 	mov	local02, arg02
289a8     01 28 56 F2 | 	cmps	local02, #1 wc
289ac     B2 01 00 CF 
289b0     32 FA 05 C6 |  if_b	mov	result1, ##@LR__5373
289b4     5C 00 90 CD |  if_b	jmp	#LR__3433
289b8     13 13 02 F6 | 	mov	arg01, local01
289bc     09 2B 02 F6 | 	mov	local03, arg01
289c0     97 06 48 FB | 	callpa	#(@LR__3431-@LR__3430)>>2,fcache_load_ptr_
289c4                 | LR__3430
289c4     15 FB C9 FA | 	rdbyte	result1, local03 wz
289c8     01 2A 06 51 |  if_ne	add	local03, #1
289cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3430
289d0                 | LR__3431
289d0     09 2B 82 F1 | 	sub	local03, arg01
289d4     15 FB 01 F6 | 	mov	result1, local03
289d8     14 FB 59 F2 | 	cmps	result1, local02 wcz
289dc     13 FB 01 E6 |  if_be	mov	result1, local01
289e0     30 00 90 ED |  if_be	jmp	#LR__3433
289e4     14 13 02 F6 | 	mov	arg01, local02
289e8     02 12 06 F1 | 	add	arg01, #2
289ec     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
289f0     FD 2C 0A F6 | 	mov	local04, result1 wz
289f4     18 00 90 AD |  if_e	jmp	#LR__3432
289f8     16 13 02 F6 | 	mov	arg01, local04
289fc     13 15 02 F6 | 	mov	arg02, local01
28a00     14 17 02 F6 | 	mov	arg03, local02
28a04     30 DE BF FD | 	call	#__system____builtin_memmove
28a08     16 29 02 F1 | 	add	local02, local04
28a0c     14 01 48 FC | 	wrbyte	#0, local02
28a10                 | LR__3432
28a10     16 FB 01 F6 | 	mov	result1, local04
28a14                 | LR__3433
28a14     A7 F0 03 F6 | 	mov	ptra, fp
28a18     B2 00 A0 FD | 	call	#popregs_
28a1c                 | __system__Left_S_ret
28a1c     2D 00 64 FD | 	ret
28a20                 | 
28a20                 | __system__Right_S
28a20     05 4A 05 F6 | 	mov	COUNT_, #5
28a24     A8 00 A0 FD | 	call	#pushregs_
28a28     09 27 02 F6 | 	mov	local01, arg01
28a2c     0A 29 02 F6 | 	mov	local02, arg02
28a30     01 28 56 F2 | 	cmps	local02, #1 wc
28a34     B2 01 00 CF 
28a38     33 FA 05 C6 |  if_b	mov	result1, ##@LR__5374
28a3c     64 00 90 CD |  if_b	jmp	#LR__3443
28a40     13 13 02 F6 | 	mov	arg01, local01
28a44     09 2B 02 F6 | 	mov	local03, arg01
28a48     97 06 48 FB | 	callpa	#(@LR__3441-@LR__3440)>>2,fcache_load_ptr_
28a4c                 | LR__3440
28a4c     15 FB C9 FA | 	rdbyte	result1, local03 wz
28a50     01 2A 06 51 |  if_ne	add	local03, #1
28a54     F4 FF 9F 5D |  if_ne	jmp	#LR__3440
28a58                 | LR__3441
28a58     09 2B 82 F1 | 	sub	local03, arg01
28a5c     15 FB 01 F6 | 	mov	result1, local03
28a60     FD 2C 02 F6 | 	mov	local04, result1
28a64     14 2D 5A F2 | 	cmps	local04, local02 wcz
28a68     13 FB 01 E6 |  if_be	mov	result1, local01
28a6c     34 00 90 ED |  if_be	jmp	#LR__3443
28a70     14 13 02 F6 | 	mov	arg01, local02
28a74     02 12 06 F1 | 	add	arg01, #2
28a78     40 20 B0 FD | 	call	#__system___gc_alloc_managed
28a7c     FD 2E 0A F6 | 	mov	local05, result1 wz
28a80     1C 00 90 AD |  if_e	jmp	#LR__3442
28a84     14 2D 82 F1 | 	sub	local04, local02
28a88     13 2D 02 F1 | 	add	local04, local01
28a8c     01 28 06 F1 | 	add	local02, #1
28a90     17 13 02 F6 | 	mov	arg01, local05
28a94     16 15 02 F6 | 	mov	arg02, local04
28a98     14 17 02 F6 | 	mov	arg03, local02
28a9c     98 DD BF FD | 	call	#__system____builtin_memmove
28aa0                 | LR__3442
28aa0     17 FB 01 F6 | 	mov	result1, local05
28aa4                 | LR__3443
28aa4     A7 F0 03 F6 | 	mov	ptra, fp
28aa8     B2 00 A0 FD | 	call	#popregs_
28aac                 | __system__Right_S_ret
28aac     2D 00 64 FD | 	ret
28ab0                 | 
28ab0                 | __system__Mid_S
28ab0     05 4A 05 F6 | 	mov	COUNT_, #5
28ab4     A8 00 A0 FD | 	call	#pushregs_
28ab8     09 27 02 F6 | 	mov	local01, arg01
28abc     0A 29 02 F6 | 	mov	local02, arg02
28ac0     01 16 56 F2 | 	cmps	arg03, #1 wc
28ac4     B2 01 00 CF 
28ac8     34 FA 05 C6 |  if_b	mov	result1, ##@LR__5375
28acc     80 00 90 CD |  if_b	jmp	#LR__3453
28ad0     01 28 86 F1 | 	sub	local02, #1
28ad4     00 28 56 F3 | 	fges	local02, #0 wc
28ad8     13 13 02 F6 | 	mov	arg01, local01
28adc     09 2B 02 F6 | 	mov	local03, arg01
28ae0     97 06 48 FB | 	callpa	#(@LR__3451-@LR__3450)>>2,fcache_load_ptr_
28ae4                 | LR__3450
28ae4     15 FB C9 FA | 	rdbyte	result1, local03 wz
28ae8     01 2A 06 51 |  if_ne	add	local03, #1
28aec     F4 FF 9F 5D |  if_ne	jmp	#LR__3450
28af0                 | LR__3451
28af0     09 2B 82 F1 | 	sub	local03, arg01
28af4     15 FB 01 F6 | 	mov	result1, local03
28af8     FD 14 02 F6 | 	mov	arg02, result1
28afc     14 15 52 F2 | 	cmps	arg02, local02 wc
28b00     B2 01 00 CF 
28b04     35 FA 05 C6 |  if_b	mov	result1, ##@LR__5376
28b08     44 00 90 CD |  if_b	jmp	#LR__3453
28b0c     0A 2D 02 F6 | 	mov	local04, arg02
28b10     14 2D 82 F1 | 	sub	local04, local02
28b14     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
28b18     0B 2D 02 16 |  if_a	mov	local04, arg03
28b1c     16 13 02 F6 | 	mov	arg01, local04
28b20     02 12 06 F1 | 	add	arg01, #2
28b24     94 1F B0 FD | 	call	#__system___gc_alloc_managed
28b28     FD 2E 0A F6 | 	mov	local05, result1 wz
28b2c     1C 00 90 AD |  if_e	jmp	#LR__3452
28b30     13 29 02 F1 | 	add	local02, local01
28b34     17 13 02 F6 | 	mov	arg01, local05
28b38     14 15 02 F6 | 	mov	arg02, local02
28b3c     16 17 02 F6 | 	mov	arg03, local04
28b40     F4 DC BF FD | 	call	#__system____builtin_memmove
28b44     17 2D 02 F1 | 	add	local04, local05
28b48     16 01 48 FC | 	wrbyte	#0, local04
28b4c                 | LR__3452
28b4c     17 FB 01 F6 | 	mov	result1, local05
28b50                 | LR__3453
28b50     A7 F0 03 F6 | 	mov	ptra, fp
28b54     B2 00 A0 FD | 	call	#popregs_
28b58                 | __system__Mid_S_ret
28b58     2D 00 64 FD | 	ret
28b5c                 | 
28b5c                 | __system__Chr_S
28b5c     01 4A 05 F6 | 	mov	COUNT_, #1
28b60     A8 00 A0 FD | 	call	#pushregs_
28b64     09 27 02 F6 | 	mov	local01, arg01
28b68     03 12 06 F6 | 	mov	arg01, #3
28b6c     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
28b70     00 FA 4D F2 | 	cmps	result1, #0 wz
28b74     FD 26 42 5C |  if_ne	wrbyte	local01, result1
28b78     01 FA 05 51 |  if_ne	add	result1, #1
28b7c     FD 00 48 5C |  if_ne	wrbyte	#0, result1
28b80     01 FA 85 51 |  if_ne	sub	result1, #1
28b84     A7 F0 03 F6 | 	mov	ptra, fp
28b88     B2 00 A0 FD | 	call	#popregs_
28b8c                 | __system__Chr_S_ret
28b8c     2D 00 64 FD | 	ret
28b90                 | 
28b90                 | __system__str_S
28b90     02 4A 05 F6 | 	mov	COUNT_, #2
28b94     A8 00 A0 FD | 	call	#pushregs_
28b98     09 27 02 F6 | 	mov	local01, arg01
28b9c     10 12 06 F6 | 	mov	arg01, #16
28ba0     18 1F B0 FD | 	call	#__system___gc_alloc_managed
28ba4     FD 28 0A F6 | 	mov	local02, result1 wz
28ba8     30 00 90 AD |  if_e	jmp	#LR__3460
28bac     F8 13 02 F6 | 	mov	arg01, ptra
28bb0     08 F0 07 F1 | 	add	ptra, #8
28bb4     09 29 62 FC | 	wrlong	local02, arg01
28bb8     04 12 06 F1 | 	add	arg01, #4
28bbc     09 01 68 FC | 	wrlong	#0, arg01
28bc0     04 12 86 F1 | 	sub	arg01, #4
28bc4     00 38 05 FF 
28bc8     00 12 46 F5 | 	or	arg01, ##175112192
28bcc     00 14 06 F6 | 	mov	arg02, #0
28bd0     13 17 02 F6 | 	mov	arg03, local01
28bd4     67 18 06 F6 | 	mov	arg04, #103
28bd8     90 EE BF FD | 	call	#__system___fmtfloat
28bdc                 | LR__3460
28bdc     14 FB 01 F6 | 	mov	result1, local02
28be0     A7 F0 03 F6 | 	mov	ptra, fp
28be4     B2 00 A0 FD | 	call	#popregs_
28be8                 | __system__str_S_ret
28be8     2D 00 64 FD | 	ret
28bec                 | 
28bec                 | __system__Number_S
28bec     08 4A 05 F6 | 	mov	COUNT_, #8
28bf0     A8 00 A0 FD | 	call	#pushregs_
28bf4     09 27 02 F6 | 	mov	local01, arg01
28bf8     0A 29 0A F6 | 	mov	local02, arg02 wz
28bfc     0B 2B 02 F6 | 	mov	local03, arg03
28c00     3C 00 90 5D |  if_ne	jmp	#LR__3472
28c04     01 28 06 F6 | 	mov	local02, #1
28c08     15 2D 02 F6 | 	mov	local04, local03
28c0c     01 2E 06 F6 | 	mov	local05, #1
28c10     97 16 48 FB | 	callpa	#(@LR__3471-@LR__3470)>>2,fcache_load_ptr_
28c14                 | LR__3470
28c14     00 30 06 F6 | 	mov	local06, #0
28c18     13 2D 1A F2 | 	cmp	local04, local01 wcz
28c1c     01 30 66 E6 |  if_be	neg	local06, #1
28c20     16 2F 12 F2 | 	cmp	local05, local04 wc
28c24     19 33 A2 F1 | 	subx	local07, local07
28c28     19 31 CA F7 | 	test	local06, local07 wz
28c2c     15 2D 02 5D |  if_ne	qmul	local04, local03
28c30     16 2F 02 56 |  if_ne	mov	local05, local04
28c34     01 28 06 51 |  if_ne	add	local02, #1
28c38     18 2C 62 5D |  if_ne	getqx	local04
28c3c     D4 FF 9F 5D |  if_ne	jmp	#LR__3470
28c40                 | LR__3471
28c40                 | LR__3472
28c40     20 28 36 F3 | 	fle	local02, #32 wc
28c44     14 13 02 F6 | 	mov	arg01, local02
28c48     02 12 06 F1 | 	add	arg01, #2
28c4c     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
28c50     FD 30 02 F6 | 	mov	local06, result1
28c54     14 33 02 F6 | 	mov	local07, local02
28c58     18 33 02 F1 | 	add	local07, local06
28c5c     19 01 48 FC | 	wrbyte	#0, local07
28c60     97 1A 48 FB | 	callpa	#(@LR__3474-@LR__3473)>>2,fcache_load_ptr_
28c64                 | LR__3473
28c64     01 28 16 F2 | 	cmp	local02, #1 wc
28c68     2C 00 90 CD |  if_b	jmp	#LR__3475
28c6c     15 27 12 FD | 	qdiv	local01, local03
28c70     01 28 86 F1 | 	sub	local02, #1
28c74     14 33 02 F6 | 	mov	local07, local02
28c78     18 33 02 F1 | 	add	local07, local06
28c7c     19 34 62 FD | 	getqy	local08
28c80     0A 34 16 F2 | 	cmp	local08, #10 wc
28c84     30 34 06 C1 |  if_b	add	local08, #48
28c88     37 34 06 31 |  if_ae	add	local08, #55
28c8c     19 35 42 FC | 	wrbyte	local08, local07
28c90     18 26 62 FD | 	getqx	local01
28c94     CC FF 9F FD | 	jmp	#LR__3473
28c98                 | LR__3474
28c98                 | LR__3475
28c98     18 FB 01 F6 | 	mov	result1, local06
28c9c     A7 F0 03 F6 | 	mov	ptra, fp
28ca0     B2 00 A0 FD | 	call	#popregs_
28ca4                 | __system__Number_S_ret
28ca4     2D 00 64 FD | 	ret
28ca8                 | 
28ca8                 | __system__LCase_S
28ca8     07 4A 05 F6 | 	mov	COUNT_, #7
28cac     A8 00 A0 FD | 	call	#pushregs_
28cb0     09 27 02 F6 | 	mov	local01, arg01
28cb4     09 29 02 F6 | 	mov	local02, arg01
28cb8     97 06 48 FB | 	callpa	#(@LR__3481-@LR__3480)>>2,fcache_load_ptr_
28cbc                 | LR__3480
28cbc     14 FB C9 FA | 	rdbyte	result1, local02 wz
28cc0     01 28 06 51 |  if_ne	add	local02, #1
28cc4     F4 FF 9F 5D |  if_ne	jmp	#LR__3480
28cc8                 | LR__3481
28cc8     09 29 82 F1 | 	sub	local02, arg01
28ccc     14 FB 01 F6 | 	mov	result1, local02
28cd0     FD 28 0A F6 | 	mov	local02, result1 wz
28cd4     B2 01 00 AF 
28cd8     36 FA 05 A6 |  if_e	mov	result1, ##@LR__5377
28cdc     7C 00 90 AD |  if_e	jmp	#LR__3487
28ce0     14 13 02 F6 | 	mov	arg01, local02
28ce4     02 12 06 F1 | 	add	arg01, #2
28ce8     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
28cec     FD 2A 0A F6 | 	mov	local03, result1 wz
28cf0     64 00 90 AD |  if_e	jmp	#LR__3486
28cf4     01 2C 66 F6 | 	neg	local04, #1
28cf8     97 26 48 FB | 	callpa	#(@LR__3485-@LR__3482)>>2,fcache_load_ptr_
28cfc                 | LR__3482
28cfc     01 2C 06 F1 | 	add	local04, #1
28d00     16 2F 02 F6 | 	mov	local05, local04
28d04     13 2F 02 F1 | 	add	local05, local01
28d08     17 31 C2 FA | 	rdbyte	local06, local05
28d0c     41 30 56 F2 | 	cmps	local06, #65 wc
28d10     18 00 90 CD |  if_b	jmp	#LR__3483
28d14     5B 30 56 F2 | 	cmps	local06, #91 wc
28d18     16 33 02 C6 |  if_b	mov	local07, local04
28d1c     15 33 02 C1 |  if_b	add	local07, local03
28d20     20 30 06 C1 |  if_b	add	local06, #32
28d24     19 31 42 CC |  if_b	wrbyte	local06, local07
28d28     0C 00 90 CD |  if_b	jmp	#LR__3484
28d2c                 | LR__3483
28d2c     16 33 02 F6 | 	mov	local07, local04
28d30     15 33 02 F1 | 	add	local07, local03
28d34     19 31 42 FC | 	wrbyte	local06, local07
28d38                 | LR__3484
28d38     14 31 02 F6 | 	mov	local06, local02
28d3c     01 30 86 F1 | 	sub	local06, #1
28d40     18 2D 0A F2 | 	cmp	local04, local06 wz
28d44     B4 FF 9F 5D |  if_ne	jmp	#LR__3482
28d48                 | LR__3485
28d48     15 29 02 F1 | 	add	local02, local03
28d4c     14 01 48 FC | 	wrbyte	#0, local02
28d50     15 FB 01 F6 | 	mov	result1, local03
28d54     04 00 90 FD | 	jmp	#LR__3487
28d58                 | LR__3486
28d58     15 FB 01 F6 | 	mov	result1, local03
28d5c                 | LR__3487
28d5c     A7 F0 03 F6 | 	mov	ptra, fp
28d60     B2 00 A0 FD | 	call	#popregs_
28d64                 | __system__LCase_S_ret
28d64     2D 00 64 FD | 	ret
28d68                 | 
28d68                 | __system__LTrim_S
28d68     05 4A 05 F6 | 	mov	COUNT_, #5
28d6c     A8 00 A0 FD | 	call	#pushregs_
28d70     09 27 02 F6 | 	mov	local01, arg01
28d74     09 29 02 F6 | 	mov	local02, arg01
28d78     97 06 48 FB | 	callpa	#(@LR__3491-@LR__3490)>>2,fcache_load_ptr_
28d7c                 | LR__3490
28d7c     14 FB C9 FA | 	rdbyte	result1, local02 wz
28d80     01 28 06 51 |  if_ne	add	local02, #1
28d84     F4 FF 9F 5D |  if_ne	jmp	#LR__3490
28d88                 | LR__3491
28d88     09 29 82 F1 | 	sub	local02, arg01
28d8c     14 FB 01 F6 | 	mov	result1, local02
28d90     FD 28 0A F6 | 	mov	local02, result1 wz
28d94     B2 01 00 AF 
28d98     37 FA 05 A6 |  if_e	mov	result1, ##@LR__5378
28d9c     7C 00 90 AD |  if_e	jmp	#LR__3496
28da0     00 2A 06 F6 | 	mov	local03, #0
28da4     14 2D 02 F6 | 	mov	local04, local02
28da8                 | LR__3492
28da8     16 2B 52 F2 | 	cmps	local03, local04 wc
28dac     68 00 90 3D |  if_ae	jmp	#LR__3495
28db0     15 17 02 F6 | 	mov	arg03, local03
28db4     13 17 02 F1 | 	add	arg03, local01
28db8     0B 17 C2 FA | 	rdbyte	arg03, arg03
28dbc     20 16 0E F2 | 	cmp	arg03, #32 wz
28dc0     4C 00 90 AD |  if_e	jmp	#LR__3494
28dc4     14 13 02 F6 | 	mov	arg01, local02
28dc8     15 13 82 F1 | 	sub	arg01, local03
28dcc     02 12 06 F1 | 	add	arg01, #2
28dd0     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
28dd4     FD 2E 0A F6 | 	mov	local05, result1 wz
28dd8     2C 00 90 AD |  if_e	jmp	#LR__3493
28ddc     15 15 02 F6 | 	mov	arg02, local03
28de0     13 15 02 F1 | 	add	arg02, local01
28de4     14 17 02 F6 | 	mov	arg03, local02
28de8     15 17 82 F1 | 	sub	arg03, local03
28dec     17 13 02 F6 | 	mov	arg01, local05
28df0     44 DA BF FD | 	call	#__system____builtin_memmove
28df4     15 29 82 F1 | 	sub	local02, local03
28df8     17 29 02 F1 | 	add	local02, local05
28dfc     14 01 48 FC | 	wrbyte	#0, local02
28e00     17 FB 01 F6 | 	mov	result1, local05
28e04     14 00 90 FD | 	jmp	#LR__3496
28e08                 | LR__3493
28e08     17 FB 01 F6 | 	mov	result1, local05
28e0c     0C 00 90 FD | 	jmp	#LR__3496
28e10                 | LR__3494
28e10     01 2A 06 F1 | 	add	local03, #1
28e14     90 FF 9F FD | 	jmp	#LR__3492
28e18                 | LR__3495
28e18     13 FB 01 F6 | 	mov	result1, local01
28e1c                 | LR__3496
28e1c     A7 F0 03 F6 | 	mov	ptra, fp
28e20     B2 00 A0 FD | 	call	#popregs_
28e24                 | __system__LTrim_S_ret
28e24     2D 00 64 FD | 	ret
28e28                 | 
28e28                 | __system__RTrim_S
28e28     04 4A 05 F6 | 	mov	COUNT_, #4
28e2c     A8 00 A0 FD | 	call	#pushregs_
28e30     09 27 02 F6 | 	mov	local01, arg01
28e34     09 29 02 F6 | 	mov	local02, arg01
28e38     97 06 48 FB | 	callpa	#(@LR__3501-@LR__3500)>>2,fcache_load_ptr_
28e3c                 | LR__3500
28e3c     14 FB C9 FA | 	rdbyte	result1, local02 wz
28e40     01 28 06 51 |  if_ne	add	local02, #1
28e44     F4 FF 9F 5D |  if_ne	jmp	#LR__3500
28e48                 | LR__3501
28e48     09 29 82 F1 | 	sub	local02, arg01
28e4c     14 FB 01 F6 | 	mov	result1, local02
28e50     FD 28 0A F6 | 	mov	local02, result1 wz
28e54     B2 01 00 AF 
28e58     38 FA 05 A6 |  if_e	mov	result1, ##@LR__5379
28e5c     74 00 90 AD |  if_e	jmp	#LR__3505
28e60     14 2B 02 F6 | 	mov	local03, local02
28e64     01 2A 86 F1 | 	sub	local03, #1
28e68                 | LR__3502
28e68     15 15 02 F6 | 	mov	arg02, local03
28e6c     13 15 02 F1 | 	add	arg02, local01
28e70     0A 29 C2 FA | 	rdbyte	local02, arg02
28e74     20 28 0E F2 | 	cmp	local02, #32 wz
28e78     44 00 90 AD |  if_e	jmp	#LR__3504
28e7c     15 13 02 F6 | 	mov	arg01, local03
28e80     02 12 06 F1 | 	add	arg01, #2
28e84     34 1C B0 FD | 	call	#__system___gc_alloc_managed
28e88     FD 2C 0A F6 | 	mov	local04, result1 wz
28e8c     28 00 90 AD |  if_e	jmp	#LR__3503
28e90     15 17 02 F6 | 	mov	arg03, local03
28e94     01 16 06 F1 | 	add	arg03, #1
28e98     16 13 02 F6 | 	mov	arg01, local04
28e9c     13 15 02 F6 | 	mov	arg02, local01
28ea0     94 D9 BF FD | 	call	#__system____builtin_memmove
28ea4     01 2A 06 F1 | 	add	local03, #1
28ea8     16 2B 02 F1 | 	add	local03, local04
28eac     15 01 48 FC | 	wrbyte	#0, local03
28eb0     16 FB 01 F6 | 	mov	result1, local04
28eb4     1C 00 90 FD | 	jmp	#LR__3505
28eb8                 | LR__3503
28eb8     16 FB 01 F6 | 	mov	result1, local04
28ebc     14 00 90 FD | 	jmp	#LR__3505
28ec0                 | LR__3504
28ec0     01 2A 86 F1 | 	sub	local03, #1
28ec4     00 2A 56 F2 | 	cmps	local03, #0 wc
28ec8     9C FF 9F 3D |  if_ae	jmp	#LR__3502
28ecc     B2 01 00 FF 
28ed0     39 FA 05 F6 | 	mov	result1, ##@LR__5380
28ed4                 | LR__3505
28ed4     A7 F0 03 F6 | 	mov	ptra, fp
28ed8     B2 00 A0 FD | 	call	#popregs_
28edc                 | __system__RTrim_S_ret
28edc     2D 00 64 FD | 	ret
28ee0                 | 
28ee0                 | __system__Instr
28ee0     07 4A 05 F6 | 	mov	COUNT_, #7
28ee4     A8 00 A0 FD | 	call	#pushregs_
28ee8     09 27 02 F6 | 	mov	local01, arg01
28eec     0A 29 02 F6 | 	mov	local02, arg02
28ef0     0B 2B 02 F6 | 	mov	local03, arg03
28ef4     15 13 02 F6 | 	mov	arg01, local03
28ef8     09 2D 02 F6 | 	mov	local04, arg01
28efc     97 06 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
28f00                 | LR__3510
28f00     16 FB C9 FA | 	rdbyte	result1, local04 wz
28f04     01 2C 06 51 |  if_ne	add	local04, #1
28f08     F4 FF 9F 5D |  if_ne	jmp	#LR__3510
28f0c                 | LR__3511
28f0c     09 2D 82 F1 | 	sub	local04, arg01
28f10     16 2F 02 F6 | 	mov	local05, local04
28f14     14 13 02 F6 | 	mov	arg01, local02
28f18     09 2D 02 F6 | 	mov	local04, arg01
28f1c     97 06 48 FB | 	callpa	#(@LR__3513-@LR__3512)>>2,fcache_load_ptr_
28f20                 | LR__3512
28f20     16 FB C9 FA | 	rdbyte	result1, local04 wz
28f24     01 2C 06 51 |  if_ne	add	local04, #1
28f28     F4 FF 9F 5D |  if_ne	jmp	#LR__3512
28f2c                 | LR__3513
28f2c     09 2D 82 F1 | 	sub	local04, arg01
28f30     16 FB 01 F6 | 	mov	result1, local04
28f34     FD 18 0A F6 | 	mov	arg04, result1 wz
28f38     00 FA 05 A6 |  if_e	mov	result1, #0
28f3c     98 00 90 AD |  if_e	jmp	#LR__3517
28f40     00 2E 0E F2 | 	cmp	local05, #0 wz
28f44     00 FA 05 A6 |  if_e	mov	result1, #0
28f48     8C 00 90 AD |  if_e	jmp	#LR__3517
28f4c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
28f50     00 FA 05 16 |  if_a	mov	result1, #0
28f54     80 00 90 1D |  if_a	jmp	#LR__3517
28f58     01 26 56 F2 | 	cmps	local01, #1 wc
28f5c     01 26 06 C6 |  if_b	mov	local01, #1
28f60     15 31 C2 FA | 	rdbyte	local06, local03
28f64     01 2E 0E F2 | 	cmp	local05, #1 wz
28f68     18 00 90 5D |  if_ne	jmp	#LR__3514
28f6c     14 13 02 F6 | 	mov	arg01, local02
28f70     18 15 02 F6 | 	mov	arg02, local06
28f74     13 17 02 F6 | 	mov	arg03, local01
28f78     00 18 06 F6 | 	mov	arg04, #0
28f7c     14 37 B0 FD | 	call	#__system____ScanForChar
28f80     54 00 90 FD | 	jmp	#LR__3517
28f84                 | LR__3514
28f84     13 33 02 F6 | 	mov	local07, local01
28f88                 | LR__3515
28f88     14 13 02 F6 | 	mov	arg01, local02
28f8c     18 15 02 F6 | 	mov	arg02, local06
28f90     19 17 02 F6 | 	mov	arg03, local07
28f94     00 18 06 F6 | 	mov	arg04, #0
28f98     F8 36 B0 FD | 	call	#__system____ScanForChar
28f9c     FD 32 0A F6 | 	mov	local07, result1 wz
28fa0     30 00 90 AD |  if_e	jmp	#LR__3516
28fa4     17 17 02 F6 | 	mov	arg03, local05
28fa8     14 13 02 F6 | 	mov	arg01, local02
28fac     19 15 02 F6 | 	mov	arg02, local07
28fb0     FC FA BF FD | 	call	#__system__Mid_S
28fb4     FD 12 02 F6 | 	mov	arg01, result1
28fb8     15 15 02 F6 | 	mov	arg02, local03
28fbc     80 D9 BF FD | 	call	#__system___string_cmp
28fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
28fc4     19 FB 01 A6 |  if_e	mov	result1, local07
28fc8     0C 00 90 AD |  if_e	jmp	#LR__3517
28fcc     17 33 02 F1 | 	add	local07, local05
28fd0     B4 FF 9F FD | 	jmp	#LR__3515
28fd4                 | LR__3516
28fd4     00 FA 05 F6 | 	mov	result1, #0
28fd8                 | LR__3517
28fd8     A7 F0 03 F6 | 	mov	ptra, fp
28fdc     B2 00 A0 FD | 	call	#popregs_
28fe0                 | __system__Instr_ret
28fe0     2D 00 64 FD | 	ret
28fe4                 | 
28fe4                 | __system__InstrRev
28fe4     07 4A 05 F6 | 	mov	COUNT_, #7
28fe8     A8 00 A0 FD | 	call	#pushregs_
28fec     09 27 02 F6 | 	mov	local01, arg01
28ff0     0A 29 02 F6 | 	mov	local02, arg02
28ff4     0B 2B 02 F6 | 	mov	local03, arg03
28ff8     15 13 02 F6 | 	mov	arg01, local03
28ffc     09 2D 02 F6 | 	mov	local04, arg01
29000     97 06 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
29004                 | LR__3520
29004     16 FB C9 FA | 	rdbyte	result1, local04 wz
29008     01 2C 06 51 |  if_ne	add	local04, #1
2900c     F4 FF 9F 5D |  if_ne	jmp	#LR__3520
29010                 | LR__3521
29010     09 2D 82 F1 | 	sub	local04, arg01
29014     16 2F 02 F6 | 	mov	local05, local04
29018     14 13 02 F6 | 	mov	arg01, local02
2901c     09 2D 02 F6 | 	mov	local04, arg01
29020     97 06 48 FB | 	callpa	#(@LR__3523-@LR__3522)>>2,fcache_load_ptr_
29024                 | LR__3522
29024     16 FB C9 FA | 	rdbyte	result1, local04 wz
29028     01 2C 06 51 |  if_ne	add	local04, #1
2902c     F4 FF 9F 5D |  if_ne	jmp	#LR__3522
29030                 | LR__3523
29030     09 2D 82 F1 | 	sub	local04, arg01
29034     16 FB 01 F6 | 	mov	result1, local04
29038     FD 18 0A F6 | 	mov	arg04, result1 wz
2903c     00 FA 05 A6 |  if_e	mov	result1, #0
29040     98 00 90 AD |  if_e	jmp	#LR__3527
29044     00 2E 0E F2 | 	cmp	local05, #0 wz
29048     00 FA 05 A6 |  if_e	mov	result1, #0
2904c     8C 00 90 AD |  if_e	jmp	#LR__3527
29050     0C 27 5A F2 | 	cmps	local01, arg04 wcz
29054     0C 27 02 16 |  if_a	mov	local01, arg04
29058     01 26 56 F2 | 	cmps	local01, #1 wc
2905c     01 26 06 C6 |  if_b	mov	local01, #1
29060     15 31 C2 FA | 	rdbyte	local06, local03
29064     01 2E 0E F2 | 	cmp	local05, #1 wz
29068     18 00 90 5D |  if_ne	jmp	#LR__3524
2906c     14 13 02 F6 | 	mov	arg01, local02
29070     18 15 02 F6 | 	mov	arg02, local06
29074     13 17 02 F6 | 	mov	arg03, local01
29078     01 18 06 F6 | 	mov	arg04, #1
2907c     14 36 B0 FD | 	call	#__system____ScanForChar
29080     58 00 90 FD | 	jmp	#LR__3527
29084                 | LR__3524
29084     17 33 02 F6 | 	mov	local07, local05
29088     01 32 86 F1 | 	sub	local07, #1
2908c                 | LR__3525
2908c     14 13 02 F6 | 	mov	arg01, local02
29090     18 15 02 F6 | 	mov	arg02, local06
29094     19 17 02 F6 | 	mov	arg03, local07
29098     01 18 06 F6 | 	mov	arg04, #1
2909c     F4 35 B0 FD | 	call	#__system____ScanForChar
290a0     FD 32 0A F6 | 	mov	local07, result1 wz
290a4     30 00 90 AD |  if_e	jmp	#LR__3526
290a8     17 17 02 F6 | 	mov	arg03, local05
290ac     14 13 02 F6 | 	mov	arg01, local02
290b0     19 15 02 F6 | 	mov	arg02, local07
290b4     F8 F9 BF FD | 	call	#__system__Mid_S
290b8     FD 12 02 F6 | 	mov	arg01, result1
290bc     15 15 02 F6 | 	mov	arg02, local03
290c0     7C D8 BF FD | 	call	#__system___string_cmp
290c4     00 FA 0D F2 | 	cmp	result1, #0 wz
290c8     19 FB 01 A6 |  if_e	mov	result1, local07
290cc     0C 00 90 AD |  if_e	jmp	#LR__3527
290d0     17 33 82 F1 | 	sub	local07, local05
290d4     B4 FF 9F FD | 	jmp	#LR__3525
290d8                 | LR__3526
290d8     00 FA 05 F6 | 	mov	result1, #0
290dc                 | LR__3527
290dc     A7 F0 03 F6 | 	mov	ptra, fp
290e0     B2 00 A0 FD | 	call	#popregs_
290e4                 | __system__InstrRev_ret
290e4     2D 00 64 FD | 	ret
290e8                 | 
290e8                 | __system___remove
290e8     06 4A 05 F6 | 	mov	COUNT_, #6
290ec     A8 00 A0 FD | 	call	#pushregs_
290f0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
290f4     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
290f8     09 15 02 F6 | 	mov	arg02, arg01
290fc     13 13 02 F6 | 	mov	arg01, local01
29100     00 16 06 F6 | 	mov	arg03, #0
29104     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
29108     A4 DF BF FD | 	call	#__system____getvfsforfile
2910c     FD 28 0A F6 | 	mov	local02, result1 wz
29110     10 00 90 AD |  if_e	jmp	#LR__3530
29114     20 28 06 F1 | 	add	local02, #32
29118     14 13 0A FB | 	rdlong	arg01, local02 wz
2911c     20 28 86 F1 | 	sub	local02, #32
29120     14 00 90 5D |  if_ne	jmp	#LR__3531
29124                 | LR__3530
29124     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29128     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2912c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29130     01 FA 65 F6 | 	neg	result1, #1
29134     A8 00 90 FD | 	jmp	#LR__3534
29138                 | LR__3531
29138     40 28 06 F1 | 	add	local02, #64
2913c     14 2B 02 FB | 	rdlong	local03, local02
29140     15 2D 02 F6 | 	mov	local04, local03
29144     40 28 86 F1 | 	sub	local02, #64
29148     13 2C 46 F7 | 	zerox	local04, #19
2914c     14 2A 46 F0 | 	shr	local03, #20
29150     02 2A 66 F0 | 	shl	local03, #2
29154     ED 2A 02 F1 | 	add	local03, __methods__
29158     15 2B 02 FB | 	rdlong	local03, local03
2915c     13 13 02 F6 | 	mov	arg01, local01
29160     F2 2E 02 F6 | 	mov	local05, objptr
29164     16 E5 01 F6 | 	mov	objptr, local04
29168     2D 2A 62 FD | 	call	local03
2916c     17 E5 01 F6 | 	mov	objptr, local05
29170     FD 30 02 F6 | 	mov	local06, result1
29174     FF FF 7F FF 
29178     F2 31 0E F2 | 	cmp	local06, ##-14 wz
2917c     38 00 90 5D |  if_ne	jmp	#LR__3532
29180     3C 28 06 F1 | 	add	local02, #60
29184     14 31 02 FB | 	rdlong	local06, local02
29188     18 2B 02 F6 | 	mov	local03, local06
2918c     13 30 46 F7 | 	zerox	local06, #19
29190     14 2A 46 F0 | 	shr	local03, #20
29194     02 2A 66 F0 | 	shl	local03, #2
29198     ED 2A 02 F1 | 	add	local03, __methods__
2919c     15 2B 02 FB | 	rdlong	local03, local03
291a0     13 13 02 F6 | 	mov	arg01, local01
291a4     F2 2E 02 F6 | 	mov	local05, objptr
291a8     18 E5 01 F6 | 	mov	objptr, local06
291ac     2D 2A 62 FD | 	call	local03
291b0     17 E5 01 F6 | 	mov	objptr, local05
291b4     FD 30 02 F6 | 	mov	local06, result1
291b8                 | LR__3532
291b8     00 30 0E F2 | 	cmp	local06, #0 wz
291bc     1C 00 90 AD |  if_e	jmp	#LR__3533
291c0     18 13 6A F6 | 	neg	arg01, local06 wz
291c4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
291c8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
291cc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
291d0     01 FA 65 56 |  if_ne	neg	result1, #1
291d4     00 FA 05 A6 |  if_e	mov	result1, #0
291d8     04 00 90 FD | 	jmp	#LR__3534
291dc                 | LR__3533
291dc     00 FA 05 F6 | 	mov	result1, #0
291e0                 | LR__3534
291e0     A7 F0 03 F6 | 	mov	ptra, fp
291e4     B2 00 A0 FD | 	call	#popregs_
291e8                 | __system___remove_ret
291e8     2D 00 64 FD | 	ret
291ec                 | 
291ec                 | __system___mkdir
291ec     05 4A 05 F6 | 	mov	COUNT_, #5
291f0     A8 00 A0 FD | 	call	#pushregs_
291f4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
291f8     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
291fc     09 15 02 F6 | 	mov	arg02, arg01
29200     13 13 02 F6 | 	mov	arg01, local01
29204     00 16 06 F6 | 	mov	arg03, #0
29208     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2920c     A0 DE BF FD | 	call	#__system____getvfsforfile
29210     FD 28 0A F6 | 	mov	local02, result1 wz
29214     10 00 90 AD |  if_e	jmp	#LR__3540
29218     20 28 06 F1 | 	add	local02, #32
2921c     14 15 0A FB | 	rdlong	arg02, local02 wz
29220     20 28 86 F1 | 	sub	local02, #32
29224     14 00 90 5D |  if_ne	jmp	#LR__3541
29228                 | LR__3540
29228     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2922c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
29230     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
29234     01 FA 65 F6 | 	neg	result1, #1
29238     60 00 90 FD | 	jmp	#LR__3543
2923c                 | LR__3541
2923c     38 28 06 F1 | 	add	local02, #56
29240     14 2B 02 FB | 	rdlong	local03, local02
29244     15 2D 02 F6 | 	mov	local04, local03
29248     13 2A 46 F7 | 	zerox	local03, #19
2924c     14 2C 46 F0 | 	shr	local04, #20
29250     02 2C 66 F0 | 	shl	local04, #2
29254     ED 2C 02 F1 | 	add	local04, __methods__
29258     16 2D 02 FB | 	rdlong	local04, local04
2925c     13 13 02 F6 | 	mov	arg01, local01
29260     FF 15 06 F6 | 	mov	arg02, #511
29264     F2 2E 02 F6 | 	mov	local05, objptr
29268     15 E5 01 F6 | 	mov	objptr, local03
2926c     2D 2C 62 FD | 	call	local04
29270     17 E5 01 F6 | 	mov	objptr, local05
29274     FD 12 0A F6 | 	mov	arg01, result1 wz
29278     1C 00 90 AD |  if_e	jmp	#LR__3542
2927c     09 13 6A F6 | 	neg	arg01, arg01 wz
29280     20 E6 05 F1 | 	add	ptr___system__dat__, #32
29284     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
29288     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2928c     01 FA 65 56 |  if_ne	neg	result1, #1
29290     00 FA 05 A6 |  if_e	mov	result1, #0
29294     04 00 90 FD | 	jmp	#LR__3543
29298                 | LR__3542
29298     00 FA 05 F6 | 	mov	result1, #0
2929c                 | LR__3543
2929c     A7 F0 03 F6 | 	mov	ptra, fp
292a0     B2 00 A0 FD | 	call	#popregs_
292a4                 | __system___mkdir_ret
292a4     2D 00 64 FD | 	ret
292a8                 | 
292a8                 | __system___strerror
292a8     00 12 56 F2 | 	cmps	arg01, #0 wc
292ac     08 00 90 CD |  if_b	jmp	#LR__3550
292b0     1A 12 56 F2 | 	cmps	arg01, #26 wc
292b4     04 00 90 CD |  if_b	jmp	#LR__3551
292b8                 | LR__3550
292b8     19 12 06 F6 | 	mov	arg01, #25
292bc                 | LR__3551
292bc     02 12 66 F0 | 	shl	arg01, #2
292c0     01 00 00 FF 
292c4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
292c8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
292cc     09 FB 01 FB | 	rdlong	result1, arg01
292d0     01 00 00 FF 
292d4     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
292d8                 | __system___strerror_ret
292d8     2D 00 64 FD | 	ret
292dc                 | 
292dc                 | __system___int64_shl
292dc     20 16 CE F7 | 	test	arg03, #32 wz
292e0     09 15 02 56 |  if_ne	mov	arg02, arg01
292e4     00 12 06 56 |  if_ne	mov	arg01, #0
292e8     1F 16 CE F7 | 	test	arg03, #31 wz
292ec     18 00 90 AD |  if_e	jmp	#LR__3560
292f0     0B 15 62 F0 | 	shl	arg02, arg03
292f4     09 FB 01 F6 | 	mov	result1, arg01
292f8     0B FD 61 F6 | 	neg	result2, arg03
292fc     FE FA 41 F0 | 	shr	result1, result2
29300     FD 14 42 F5 | 	or	arg02, result1
29304     0B 13 62 F0 | 	shl	arg01, arg03
29308                 | LR__3560
29308     0A FD 01 F6 | 	mov	result2, arg02
2930c     09 FB 01 F6 | 	mov	result1, arg01
29310                 | __system___int64_shl_ret
29310     2D 00 64 FD | 	ret
29314                 | 
29314                 | __system___usepins
29314     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29318     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2931c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
29320     00 13 CA F7 | 	test	arg01, _var01 wz
29324     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
29328     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2932c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
29330     01 15 CA A7 |  if_e	test	arg02, _var02 wz
29334     00 FA 05 56 |  if_ne	mov	result1, #0
29338     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2933c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
29340     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29344     09 03 42 F5 | 	or	_var02, arg01
29348     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2934c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
29350     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
29354     0A 03 42 F5 | 	or	_var02, arg02
29358     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2935c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
29360     01 FA 65 F6 | 	neg	result1, #1
29364                 | __system___usepins_ret
29364     2D 00 64 FD | 	ret
29368                 | 
29368                 | __system___freepins
29368     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2936c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29370     09 01 22 F5 | 	andn	_var01, arg01
29374     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29378     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2937c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
29380     0A 01 22 F5 | 	andn	_var01, arg02
29384     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
29388     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2938c                 | __system___freepins_ret
2938c     2D 00 64 FD | 	ret
29390                 | 
29390                 | __system___float_fromuns
29390     09 17 0A F6 | 	mov	arg03, arg01 wz
29394     0B FB 01 A6 |  if_e	mov	result1, arg03
29398     24 00 90 AD |  if_e	jmp	#LR__3570
2939c     0B 15 92 F7 | 	encod	arg02, arg03 wc
293a0     01 14 06 C1 |  if_b	add	arg02, #1
293a4     01 14 86 F1 | 	sub	arg02, #1
293a8     1F 12 06 F6 | 	mov	arg01, #31
293ac     0A 13 82 F1 | 	sub	arg01, arg02
293b0     09 17 62 F0 | 	shl	arg03, arg01
293b4     02 16 46 F0 | 	shr	arg03, #2
293b8     00 12 06 F6 | 	mov	arg01, #0
293bc     4C 09 B0 FD | 	call	#__system___float_Pack
293c0                 | LR__3570
293c0                 | __system___float_fromuns_ret
293c0     2D 00 64 FD | 	ret
293c4                 | 
293c4                 | __system___float_add
293c4     0F 4A 05 F6 | 	mov	COUNT_, #15
293c8     A8 00 A0 FD | 	call	#pushregs_
293cc     09 27 02 F6 | 	mov	local01, arg01
293d0     0A 29 02 F6 | 	mov	local02, arg02
293d4     00 2A 06 F6 | 	mov	local03, #0
293d8     13 2D 02 F6 | 	mov	local04, local01
293dc     16 2F 02 F6 | 	mov	local05, local04
293e0     16 2E 46 F7 | 	zerox	local05, #22
293e4     16 31 02 F6 | 	mov	local06, local04
293e8     01 30 66 F0 | 	shl	local06, #1
293ec     18 30 46 F0 | 	shr	local06, #24
293f0     1F 2C 46 F0 | 	shr	local04, #31
293f4     14 13 02 F6 | 	mov	arg01, local02
293f8     09 FB 01 F6 | 	mov	result1, arg01
293fc     FD 32 02 F6 | 	mov	local07, result1
29400     19 35 02 F6 | 	mov	local08, local07
29404     16 34 46 F7 | 	zerox	local08, #22
29408     19 37 02 F6 | 	mov	local09, local07
2940c     01 36 66 F0 | 	shl	local09, #1
29410     18 36 46 F0 | 	shr	local09, #24
29414     1B 39 02 F6 | 	mov	local10, local09
29418     1F 32 46 F0 | 	shr	local07, #31
2941c     00 3A 06 F6 | 	mov	local11, #0
29420     00 3C 06 F6 | 	mov	local12, #0
29424     1C 31 12 F2 | 	cmp	local06, local10 wc
29428     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2942c     2C 00 90 1D |  if_a	jmp	#LR__3580
29430     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
29434     24 00 90 3D |  if_ae	jmp	#LR__3580
29438     17 3F 02 F6 | 	mov	local13, local05
2943c     1A 2F 02 F6 | 	mov	local05, local08
29440     1F 35 02 F6 | 	mov	local08, local13
29444     18 3F 02 F6 | 	mov	local13, local06
29448     1C 31 02 F6 | 	mov	local06, local10
2944c     1F 39 02 F6 | 	mov	local10, local13
29450     16 3F 02 F6 | 	mov	local13, local04
29454     19 2D 02 F6 | 	mov	local04, local07
29458     1F 33 02 F6 | 	mov	local07, local13
2945c                 | LR__3580
2945c     FF 30 0E F2 | 	cmp	local06, #255 wz
29460     70 01 90 AD |  if_e	jmp	#LR__3595
29464     00 30 0E F2 | 	cmp	local06, #0 wz
29468     AC 01 90 AD |  if_e	jmp	#LR__3597
2946c     17 2E 26 F4 | 	bith	local05, #23
29470                 | LR__3581
29470     00 38 0E F2 | 	cmp	local10, #0 wz
29474     F0 01 90 AD |  if_e	jmp	#LR__3601
29478     17 34 26 F4 | 	bith	local08, #23
2947c                 | LR__3582
2947c     7F 30 86 F1 | 	sub	local06, #127
29480     7F 38 86 F1 | 	sub	local10, #127
29484     18 41 02 F6 | 	mov	local14, local06
29488     1C 41 82 F1 | 	sub	local14, local10
2948c     97 14 48 FB | 	callpa	#(@LR__3584-@LR__3583)>>2,fcache_load_ptr_
29490                 | LR__3583
29490     20 40 56 F2 | 	cmps	local14, #32 wc
29494     20 00 90 CD |  if_b	jmp	#LR__3585
29498     1A 37 02 F6 | 	mov	local09, local08
2949c     00 3A 0E F2 | 	cmp	local11, #0 wz
294a0     6F 3A 62 FD | 	wrnz	local11
294a4     1D 37 42 F5 | 	or	local09, local11
294a8     1B 3B 02 F6 | 	mov	local11, local09
294ac     00 34 06 F6 | 	mov	local08, #0
294b0     20 40 86 F1 | 	sub	local14, #32
294b4     D8 FF 9F FD | 	jmp	#LR__3583
294b8                 | LR__3584
294b8                 | LR__3585
294b8     00 40 0E F2 | 	cmp	local14, #0 wz
294bc     38 00 90 AD |  if_e	jmp	#LR__3586
294c0     1A 3F 02 F6 | 	mov	local13, local08
294c4     20 38 06 F6 | 	mov	local10, #32
294c8     20 39 82 F1 | 	sub	local10, local14
294cc     1C 3F 62 F0 | 	shl	local13, local10
294d0     1D 39 02 F6 | 	mov	local10, local11
294d4     20 36 06 F6 | 	mov	local09, #32
294d8     20 37 82 F1 | 	sub	local09, local14
294dc     1B 39 6A F0 | 	shl	local10, local09 wz
294e0     20 3B 42 F0 | 	shr	local11, local14
294e4     20 35 42 F0 | 	shr	local08, local14
294e8     1F 3B 42 F5 | 	or	local11, local13
294ec     00 42 06 F6 | 	mov	local15, #0
294f0     01 42 06 56 |  if_ne	mov	local15, #1
294f4     21 3B 42 F5 | 	or	local11, local15
294f8                 | LR__3586
294f8     16 43 02 F6 | 	mov	local15, local04
294fc     19 43 62 F5 | 	xor	local15, local07
29500     01 42 CE F7 | 	test	local15, #1 wz
29504     18 00 90 AD |  if_e	jmp	#LR__3587
29508     1A 35 22 F6 | 	not	local08, local08
2950c     1D 3B 22 F6 | 	not	local11, local11
29510     01 3A 0E F1 | 	add	local11, #1 wz
29514     00 42 06 F6 | 	mov	local15, #0
29518     01 42 06 A6 |  if_e	mov	local15, #1
2951c     21 35 02 F1 | 	add	local08, local15
29520                 | LR__3587
29520     1D 3D 12 F1 | 	add	local12, local11 wc
29524     1A 2F 22 F1 | 	addx	local05, local08
29528     00 2E 56 F2 | 	cmps	local05, #0 wc
2952c     1C 00 90 3D |  if_ae	jmp	#LR__3588
29530     01 2C 66 F5 | 	xor	local04, #1
29534     17 2F 22 F6 | 	not	local05, local05
29538     1E 3D 22 F6 | 	not	local12, local12
2953c     01 3C 0E F1 | 	add	local12, #1 wz
29540     00 42 06 F6 | 	mov	local15, #0
29544     01 42 06 A6 |  if_e	mov	local15, #1
29548     21 2F 02 F1 | 	add	local05, local15
2954c                 | LR__3588
2954c     00 80 00 FF 
29550     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
29554     28 00 90 CD |  if_b	jmp	#LR__3589
29558     01 30 06 F1 | 	add	local06, #1
2955c     1E 41 02 F6 | 	mov	local14, local12
29560     01 40 06 F5 | 	and	local14, #1
29564     01 3C 46 F0 | 	shr	local12, #1
29568     17 43 02 F6 | 	mov	local15, local05
2956c     1F 42 66 F0 | 	shl	local15, #31
29570     21 3D 42 F5 | 	or	local12, local15
29574     20 3D 42 F5 | 	or	local12, local14
29578     01 2E 46 F0 | 	shr	local05, #1
2957c     3C 00 90 FD | 	jmp	#LR__3594
29580                 | LR__3589
29580     00 40 00 FF 
29584     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29588     30 00 90 3D |  if_ae	jmp	#LR__3593
2958c     00 2E 0E F2 | 	cmp	local05, #0 wz
29590     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
29594     08 2C 46 A5 |  if_e	or	local04, #8
29598     01 2C 26 A5 |  if_e	andn	local04, #1
2959c     1C 00 90 AD |  if_e	jmp	#LR__3592
295a0                 | LR__3590
295a0     00 40 00 FF 
295a4     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
295a8     10 00 90 3D |  if_ae	jmp	#LR__3591
295ac     1E 3D 12 F1 | 	add	local12, local12 wc
295b0     17 2F 22 F1 | 	addx	local05, local05
295b4     01 30 86 F1 | 	sub	local06, #1
295b8     E4 FF 9F FD | 	jmp	#LR__3590
295bc                 | LR__3591
295bc                 | LR__3592
295bc                 | LR__3593
295bc                 | LR__3594
295bc     17 13 02 F6 | 	mov	arg01, local05
295c0     1E 15 02 F6 | 	mov	arg02, local12
295c4     18 17 02 F6 | 	mov	arg03, local06
295c8     16 19 02 F6 | 	mov	arg04, local04
295cc     08 35 B0 FD | 	call	#__system__pack_0678
295d0     DC 00 90 FD | 	jmp	#LR__3605
295d4                 | LR__3595
295d4     FF 38 0E F2 | 	cmp	local10, #255 wz
295d8     10 00 90 5D |  if_ne	jmp	#LR__3596
295dc     16 33 0A F2 | 	cmp	local07, local04 wz
295e0     00 F8 3F 5F 
295e4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
295e8     C4 00 90 5D |  if_ne	jmp	#LR__3605
295ec                 | LR__3596
295ec     00 2E 0E F2 | 	cmp	local05, #0 wz
295f0     00 F8 3F 5F 
295f4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
295f8     B4 00 90 5D |  if_ne	jmp	#LR__3605
295fc     1E 15 02 F6 | 	mov	arg02, local12
29600     18 17 02 F6 | 	mov	arg03, local06
29604     16 19 02 F6 | 	mov	arg04, local04
29608     02 18 46 F5 | 	or	arg04, #2
2960c     17 13 02 F6 | 	mov	arg01, local05
29610     C4 34 B0 FD | 	call	#__system__pack_0678
29614     98 00 90 FD | 	jmp	#LR__3605
29618                 | LR__3597
29618     00 2E 0E F2 | 	cmp	local05, #0 wz
2961c     28 00 90 AD |  if_e	jmp	#LR__3600
29620     01 2E 66 F0 | 	shl	local05, #1
29624     97 0E 48 FB | 	callpa	#(@LR__3599-@LR__3598)>>2,fcache_load_ptr_
29628                 | LR__3598
29628     00 40 00 FF 
2962c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
29630     18 43 02 C6 |  if_b	mov	local15, local06
29634     01 42 86 C1 |  if_b	sub	local15, #1
29638     21 31 02 C6 |  if_b	mov	local06, local15
2963c     01 2E 66 C0 |  if_b	shl	local05, #1
29640     E4 FF 9F CD |  if_b	jmp	#LR__3598
29644                 | LR__3599
29644     28 FE 9F FD | 	jmp	#LR__3581
29648                 | LR__3600
29648     19 2D 02 F5 | 	and	local04, local07
2964c     16 19 02 F6 | 	mov	arg04, local04
29650     08 18 46 F5 | 	or	arg04, #8
29654     00 12 06 F6 | 	mov	arg01, #0
29658     00 14 06 F6 | 	mov	arg02, #0
2965c     00 16 06 F6 | 	mov	arg03, #0
29660     74 34 B0 FD | 	call	#__system__pack_0678
29664     48 00 90 FD | 	jmp	#LR__3605
29668                 | LR__3601
29668     00 34 0E F2 | 	cmp	local08, #0 wz
2966c     28 00 90 AD |  if_e	jmp	#LR__3604
29670     01 34 66 F0 | 	shl	local08, #1
29674     97 0E 48 FB | 	callpa	#(@LR__3603-@LR__3602)>>2,fcache_load_ptr_
29678                 | LR__3602
29678     00 40 00 FF 
2967c     00 34 16 F2 | 	cmp	local08, ##8388608 wc
29680     1C 43 02 C6 |  if_b	mov	local15, local10
29684     01 42 86 C1 |  if_b	sub	local15, #1
29688     21 39 02 C6 |  if_b	mov	local10, local15
2968c     01 34 66 C0 |  if_b	shl	local08, #1
29690     E4 FF 9F CD |  if_b	jmp	#LR__3602
29694                 | LR__3603
29694     E4 FD 9F FD | 	jmp	#LR__3582
29698                 | LR__3604
29698     7F 30 86 F1 | 	sub	local06, #127
2969c     17 13 02 F6 | 	mov	arg01, local05
296a0     1E 15 02 F6 | 	mov	arg02, local12
296a4     18 17 02 F6 | 	mov	arg03, local06
296a8     16 19 02 F6 | 	mov	arg04, local04
296ac     28 34 B0 FD | 	call	#__system__pack_0678
296b0                 | LR__3605
296b0     A7 F0 03 F6 | 	mov	ptra, fp
296b4     B2 00 A0 FD | 	call	#popregs_
296b8                 | __system___float_add_ret
296b8     2D 00 64 FD | 	ret
296bc                 | 
296bc                 | __system___float_sqrt
296bc     04 4A 05 F6 | 	mov	COUNT_, #4
296c0     A8 00 A0 FD | 	call	#pushregs_
296c4     09 27 02 F6 | 	mov	local01, arg01
296c8     09 FB 01 F6 | 	mov	result1, arg01
296cc     FD 28 02 F6 | 	mov	local02, result1
296d0     14 2B 02 F6 | 	mov	local03, local02
296d4     16 2A 46 F7 | 	zerox	local03, #22
296d8     14 2D 02 F6 | 	mov	local04, local02
296dc     01 2C 66 F0 | 	shl	local04, #1
296e0     18 2C 4E F0 | 	shr	local04, #24 wz
296e4     1F 28 46 F0 | 	shr	local02, #31
296e8     70 00 90 AD |  if_e	jmp	#LR__3611
296ec     17 2A 26 F4 | 	bith	local03, #23
296f0                 | LR__3610
296f0     00 28 0E F2 | 	cmp	local02, #0 wz
296f4     00 F8 3F 5F 
296f8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
296fc     88 00 90 5D |  if_ne	jmp	#LR__3614
29700     FF 2C 0E F2 | 	cmp	local04, #255 wz
29704     13 FB 01 A6 |  if_e	mov	result1, local01
29708     7C 00 90 AD |  if_e	jmp	#LR__3614
2970c     7F 2C 86 F1 | 	sub	local04, #127
29710     01 2C CE F7 | 	test	local04, #1 wz
29714     01 2A 66 50 |  if_ne	shl	local03, #1
29718     05 2A 66 F0 | 	shl	local03, #5
2971c     15 01 38 FD | 	qsqrt	#0, local03
29720     01 2C 86 51 |  if_ne	sub	local04, #1
29724     16 2D 52 F6 | 	abs	local04, local04 wc
29728     01 2C 46 F0 | 	shr	local04, #1
2972c     16 17 82 F6 | 	negc	arg03, local04
29730     14 19 02 F6 | 	mov	arg04, local02
29734     18 12 62 FD | 	getqx	arg01
29738     09 15 02 F6 | 	mov	arg02, arg01
2973c     19 14 66 F0 | 	shl	arg02, #25
29740     07 12 46 F0 | 	shr	arg01, #7
29744     00 80 00 FF 
29748     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
2974c     01 16 06 31 |  if_ae	add	arg03, #1
29750     01 12 46 30 |  if_ae	shr	arg01, #1
29754     80 33 B0 FD | 	call	#__system__pack_0678
29758     2C 00 90 FD | 	jmp	#LR__3614
2975c                 | LR__3611
2975c     00 2A 0E F2 | 	cmp	local03, #0 wz
29760     13 FB 01 A6 |  if_e	mov	result1, local01
29764     20 00 90 AD |  if_e	jmp	#LR__3614
29768     01 2A 66 F0 | 	shl	local03, #1
2976c     97 0A 48 FB | 	callpa	#(@LR__3613-@LR__3612)>>2,fcache_load_ptr_
29770                 | LR__3612
29770     00 40 00 FF 
29774     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
29778     01 2C 86 C1 |  if_b	sub	local04, #1
2977c     01 2A 66 C0 |  if_b	shl	local03, #1
29780     EC FF 9F CD |  if_b	jmp	#LR__3612
29784                 | LR__3613
29784     68 FF 9F FD | 	jmp	#LR__3610
29788                 | LR__3614
29788     A7 F0 03 F6 | 	mov	ptra, fp
2978c     B2 00 A0 FD | 	call	#popregs_
29790                 | __system___float_sqrt_ret
29790     2D 00 64 FD | 	ret
29794                 | 
29794                 | __system___float_mul
29794     0B 4A 05 F6 | 	mov	COUNT_, #11
29798     A8 00 A0 FD | 	call	#pushregs_
2979c     09 27 02 F6 | 	mov	local01, arg01
297a0     0A 29 02 F6 | 	mov	local02, arg02
297a4     13 2B 02 F6 | 	mov	local03, local01
297a8     15 2D 02 F6 | 	mov	local04, local03
297ac     16 2C 46 F7 | 	zerox	local04, #22
297b0     15 2F 02 F6 | 	mov	local05, local03
297b4     01 2E 66 F0 | 	shl	local05, #1
297b8     18 2E 46 F0 | 	shr	local05, #24
297bc     1F 2A 46 F0 | 	shr	local03, #31
297c0     14 FB 01 F6 | 	mov	result1, local02
297c4     FD 30 02 F6 | 	mov	local06, result1
297c8     18 33 02 F6 | 	mov	local07, local06
297cc     16 32 46 F7 | 	zerox	local07, #22
297d0     18 35 02 F6 | 	mov	local08, local06
297d4     01 34 66 F0 | 	shl	local08, #1
297d8     18 34 46 F0 | 	shr	local08, #24
297dc     1F 30 46 F0 | 	shr	local06, #31
297e0     18 2B 62 F5 | 	xor	local03, local06
297e4     FF 2E 0E F2 | 	cmp	local05, #255 wz
297e8     90 00 90 AD |  if_e	jmp	#LR__3623
297ec     FF 34 0E F2 | 	cmp	local08, #255 wz
297f0     D8 00 90 AD |  if_e	jmp	#LR__3625
297f4     00 2E 0E F2 | 	cmp	local05, #0 wz
297f8     0C 01 90 AD |  if_e	jmp	#LR__3626
297fc     17 2C 26 F4 | 	bith	local04, #23
29800                 | LR__3620
29800     00 34 0E F2 | 	cmp	local08, #0 wz
29804     44 01 90 AD |  if_e	jmp	#LR__3630
29808     17 32 26 F4 | 	bith	local07, #23
2980c                 | LR__3621
2980c     16 29 02 F6 | 	mov	local02, local04
29810     04 28 66 F0 | 	shl	local02, #4
29814     19 31 02 F6 | 	mov	local06, local07
29818     05 30 66 F0 | 	shl	local06, #5
2981c     18 29 02 FD | 	qmul	local02, local06
29820     1A 2F 02 F1 | 	add	local05, local08
29824     FE 2E 86 F1 | 	sub	local05, #254
29828     17 37 02 F6 | 	mov	local09, local05
2982c     04 2C 66 F0 | 	shl	local04, #4
29830     05 32 66 F0 | 	shl	local07, #5
29834     18 38 62 FD | 	getqx	local10
29838     19 2D 02 FD | 	qmul	local04, local07
2983c     19 3A 62 FD | 	getqy	local11
29840     00 80 00 FF 
29844     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
29848     18 00 90 CD |  if_b	jmp	#LR__3622
2984c     01 36 06 F1 | 	add	local09, #1
29850     01 38 46 F0 | 	shr	local10, #1
29854     1D 35 02 F6 | 	mov	local08, local11
29858     1F 34 66 F0 | 	shl	local08, #31
2985c     1A 39 42 F5 | 	or	local10, local08
29860     01 3A 46 F0 | 	shr	local11, #1
29864                 | LR__3622
29864     1D 13 02 F6 | 	mov	arg01, local11
29868     1C 15 02 F6 | 	mov	arg02, local10
2986c     1B 17 02 F6 | 	mov	arg03, local09
29870     15 19 02 F6 | 	mov	arg04, local03
29874     60 32 B0 FD | 	call	#__system__pack_0678
29878     10 01 90 FD | 	jmp	#LR__3634
2987c                 | LR__3623
2987c     00 2C 0E F2 | 	cmp	local04, #0 wz
29880     13 FB 01 56 |  if_ne	mov	result1, local01
29884     04 01 90 5D |  if_ne	jmp	#LR__3634
29888     FF 34 56 F2 | 	cmps	local08, #255 wc
2988c     00 34 0E C2 |  if_b	cmp	local08, #0 wz
29890     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
29894     18 00 90 4D |  if_c_and_nz	jmp	#LR__3624
29898     00 F8 3F CF 
2989c     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
298a0     E8 00 90 CD |  if_b	jmp	#LR__3634
298a4     00 32 0E F2 | 	cmp	local07, #0 wz
298a8     14 FB 01 56 |  if_ne	mov	result1, local02
298ac     DC 00 90 5D |  if_ne	jmp	#LR__3634
298b0                 | LR__3624
298b0     02 2A 46 F5 | 	or	local03, #2
298b4     00 12 06 F6 | 	mov	arg01, #0
298b8     00 14 06 F6 | 	mov	arg02, #0
298bc     17 17 02 F6 | 	mov	arg03, local05
298c0     15 19 02 F6 | 	mov	arg04, local03
298c4     10 32 B0 FD | 	call	#__system__pack_0678
298c8     C0 00 90 FD | 	jmp	#LR__3634
298cc                 | LR__3625
298cc     00 2E 0E F2 | 	cmp	local05, #0 wz
298d0     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
298d4     00 F8 3F AF 
298d8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
298dc     AC 00 90 AD |  if_e	jmp	#LR__3634
298e0     00 32 0E F2 | 	cmp	local07, #0 wz
298e4     14 FB 01 56 |  if_ne	mov	result1, local02
298e8     A0 00 90 5D |  if_ne	jmp	#LR__3634
298ec     1A 17 02 F6 | 	mov	arg03, local08
298f0     15 19 02 F6 | 	mov	arg04, local03
298f4     02 18 46 F5 | 	or	arg04, #2
298f8     00 12 06 F6 | 	mov	arg01, #0
298fc     00 14 06 F6 | 	mov	arg02, #0
29900     D4 31 B0 FD | 	call	#__system__pack_0678
29904     84 00 90 FD | 	jmp	#LR__3634
29908                 | LR__3626
29908     00 2C 0E F2 | 	cmp	local04, #0 wz
2990c     20 00 90 AD |  if_e	jmp	#LR__3629
29910     01 2C 66 F0 | 	shl	local04, #1
29914     97 0A 48 FB | 	callpa	#(@LR__3628-@LR__3627)>>2,fcache_load_ptr_
29918                 | LR__3627
29918     00 40 00 FF 
2991c     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
29920     01 2E 86 C1 |  if_b	sub	local05, #1
29924     01 2C 66 C0 |  if_b	shl	local04, #1
29928     EC FF 9F CD |  if_b	jmp	#LR__3627
2992c                 | LR__3628
2992c     D0 FE 9F FD | 	jmp	#LR__3620
29930                 | LR__3629
29930     08 2A 46 F5 | 	or	local03, #8
29934     00 12 06 F6 | 	mov	arg01, #0
29938     00 14 06 F6 | 	mov	arg02, #0
2993c     00 16 06 F6 | 	mov	arg03, #0
29940     15 19 02 F6 | 	mov	arg04, local03
29944     90 31 B0 FD | 	call	#__system__pack_0678
29948     40 00 90 FD | 	jmp	#LR__3634
2994c                 | LR__3630
2994c     00 32 0E F2 | 	cmp	local07, #0 wz
29950     20 00 90 AD |  if_e	jmp	#LR__3633
29954     01 32 66 F0 | 	shl	local07, #1
29958     97 0A 48 FB | 	callpa	#(@LR__3632-@LR__3631)>>2,fcache_load_ptr_
2995c                 | LR__3631
2995c     00 40 00 FF 
29960     00 32 16 F2 | 	cmp	local07, ##8388608 wc
29964     01 34 86 C1 |  if_b	sub	local08, #1
29968     01 32 66 C0 |  if_b	shl	local07, #1
2996c     EC FF 9F CD |  if_b	jmp	#LR__3631
29970                 | LR__3632
29970     98 FE 9F FD | 	jmp	#LR__3621
29974                 | LR__3633
29974     08 2A 46 F5 | 	or	local03, #8
29978     00 12 06 F6 | 	mov	arg01, #0
2997c     00 14 06 F6 | 	mov	arg02, #0
29980     00 16 06 F6 | 	mov	arg03, #0
29984     15 19 02 F6 | 	mov	arg04, local03
29988     4C 31 B0 FD | 	call	#__system__pack_0678
2998c                 | LR__3634
2998c     A7 F0 03 F6 | 	mov	ptra, fp
29990     B2 00 A0 FD | 	call	#popregs_
29994                 | __system___float_mul_ret
29994     2D 00 64 FD | 	ret
29998                 | 
29998                 | __system___float_div
29998     0E 4A 05 F6 | 	mov	COUNT_, #14
2999c     A8 00 A0 FD | 	call	#pushregs_
299a0     09 2B 02 F6 | 	mov	local03, arg01
299a4     0A 2D 02 F6 | 	mov	local04, arg02
299a8     15 2F 02 F6 | 	mov	local05, local03
299ac     17 31 02 F6 | 	mov	local06, local05
299b0     16 30 46 F7 | 	zerox	local06, #22
299b4     17 33 02 F6 | 	mov	local07, local05
299b8     01 32 66 F0 | 	shl	local07, #1
299bc     18 32 46 F0 | 	shr	local07, #24
299c0     1F 2E 46 F0 | 	shr	local05, #31
299c4     16 FB 01 F6 | 	mov	result1, local04
299c8     FD 34 02 F6 | 	mov	local08, result1
299cc     1A 37 02 F6 | 	mov	local09, local08
299d0     16 36 46 F7 | 	zerox	local09, #22
299d4     1A 39 02 F6 | 	mov	local10, local08
299d8     01 38 66 F0 | 	shl	local10, #1
299dc     18 38 46 F0 | 	shr	local10, #24
299e0     1F 34 46 F0 | 	shr	local08, #31
299e4     1A 2F 62 F5 | 	xor	local05, local08
299e8     FF 32 0E F2 | 	cmp	local07, #255 wz
299ec     D4 00 90 AD |  if_e	jmp	#LR__3645
299f0     FF 38 0E F2 | 	cmp	local10, #255 wz
299f4     04 01 90 AD |  if_e	jmp	#LR__3646
299f8     00 32 0E F2 | 	cmp	local07, #0 wz
299fc     24 01 90 AD |  if_e	jmp	#LR__3647
29a00     17 30 26 F4 | 	bith	local06, #23
29a04                 | LR__3640
29a04     00 38 0E F2 | 	cmp	local10, #0 wz
29a08     70 01 90 AD |  if_e	jmp	#LR__3651
29a0c     17 36 26 F4 | 	bith	local09, #23
29a10                 | LR__3641
29a10     1C 33 82 F1 | 	sub	local07, local10
29a14     19 3B 02 F6 | 	mov	local11, local07
29a18     18 13 02 F6 | 	mov	arg01, local06
29a1c     02 12 46 F0 | 	shr	arg01, #2
29a20     1E 30 66 F0 | 	shl	local06, #30
29a24     18 15 02 F6 | 	mov	arg02, local06
29a28     1B 17 02 F6 | 	mov	arg03, local09
29a2c     28 12 62 FD | 	setq	arg01
29a30     0B 15 12 FD | 	qdiv	arg02, arg03
29a34     00 3C 06 F6 | 	mov	local12, #0
29a38     18 26 62 FD | 	getqx	local01
29a3c     19 FC 61 FD | 	getqy	result2
29a40     FE 28 02 F6 | 	mov	local02, result2
29a44     13 3F 02 F6 | 	mov	local13, local01
29a48     00 28 4E F2 | 	cmps	local02, #0 wz
29a4c     1F 41 02 F6 | 	mov	local14, local13
29a50     19 40 66 F0 | 	shl	local14, #25
29a54     01 3C 06 56 |  if_ne	mov	local12, #1
29a58     1E 41 42 F5 | 	or	local14, local12
29a5c     07 3E 46 F0 | 	shr	local13, #7
29a60     00 80 00 FF 
29a64     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
29a68     1C 00 90 CD |  if_b	jmp	#LR__3642
29a6c     01 3A 06 F1 | 	add	local11, #1
29a70     01 40 46 F0 | 	shr	local14, #1
29a74     1F 3D 02 F6 | 	mov	local12, local13
29a78     1F 3C 66 F0 | 	shl	local12, #31
29a7c     1E 41 42 F5 | 	or	local14, local12
29a80     01 3E 46 F0 | 	shr	local13, #1
29a84     24 00 90 FD | 	jmp	#LR__3644
29a88                 | LR__3642
29a88     00 40 00 FF 
29a8c     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
29a90     18 00 90 3D |  if_ae	jmp	#LR__3643
29a94     01 3A 86 F1 | 	sub	local11, #1
29a98     01 3E 66 F0 | 	shl	local13, #1
29a9c     20 3D 02 F6 | 	mov	local12, local14
29aa0     1F 3C 46 F0 | 	shr	local12, #31
29aa4     1E 3F 42 F5 | 	or	local13, local12
29aa8     01 40 66 F0 | 	shl	local14, #1
29aac                 | LR__3643
29aac                 | LR__3644
29aac     1F 13 02 F6 | 	mov	arg01, local13
29ab0     20 15 02 F6 | 	mov	arg02, local14
29ab4     1D 17 02 F6 | 	mov	arg03, local11
29ab8     17 19 02 F6 | 	mov	arg04, local05
29abc     18 30 B0 FD | 	call	#__system__pack_0678
29ac0     F8 00 90 FD | 	jmp	#LR__3655
29ac4                 | LR__3645
29ac4     00 30 0E F2 | 	cmp	local06, #0 wz
29ac8     15 FB 01 56 |  if_ne	mov	result1, local03
29acc     EC 00 90 5D |  if_ne	jmp	#LR__3655
29ad0     FF 38 0E F2 | 	cmp	local10, #255 wz
29ad4     00 F8 3F AF 
29ad8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29adc     DC 00 90 AD |  if_e	jmp	#LR__3655
29ae0     02 2E 46 F5 | 	or	local05, #2
29ae4     00 12 06 F6 | 	mov	arg01, #0
29ae8     00 14 06 F6 | 	mov	arg02, #0
29aec     19 17 02 F6 | 	mov	arg03, local07
29af0     17 19 02 F6 | 	mov	arg04, local05
29af4     E0 2F B0 FD | 	call	#__system__pack_0678
29af8     C0 00 90 FD | 	jmp	#LR__3655
29afc                 | LR__3646
29afc     00 36 0E F2 | 	cmp	local09, #0 wz
29b00     16 FB 01 56 |  if_ne	mov	result1, local04
29b04     B4 00 90 5D |  if_ne	jmp	#LR__3655
29b08     17 19 02 F6 | 	mov	arg04, local05
29b0c     08 18 46 F5 | 	or	arg04, #8
29b10     00 12 06 F6 | 	mov	arg01, #0
29b14     00 14 06 F6 | 	mov	arg02, #0
29b18     00 16 06 F6 | 	mov	arg03, #0
29b1c     B8 2F B0 FD | 	call	#__system__pack_0678
29b20     98 00 90 FD | 	jmp	#LR__3655
29b24                 | LR__3647
29b24     00 30 0E F2 | 	cmp	local06, #0 wz
29b28     20 00 90 AD |  if_e	jmp	#LR__3650
29b2c     01 30 66 F0 | 	shl	local06, #1
29b30     97 0A 48 FB | 	callpa	#(@LR__3649-@LR__3648)>>2,fcache_load_ptr_
29b34                 | LR__3648
29b34     00 40 00 FF 
29b38     00 30 16 F2 | 	cmp	local06, ##8388608 wc
29b3c     01 32 86 C1 |  if_b	sub	local07, #1
29b40     01 30 66 C0 |  if_b	shl	local06, #1
29b44     EC FF 9F CD |  if_b	jmp	#LR__3648
29b48                 | LR__3649
29b48     B8 FE 9F FD | 	jmp	#LR__3640
29b4c                 | LR__3650
29b4c     00 38 0E F2 | 	cmp	local10, #0 wz
29b50     00 36 0E A2 |  if_e	cmp	local09, #0 wz
29b54     00 F8 3F AF 
29b58     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
29b5c     5C 00 90 AD |  if_e	jmp	#LR__3655
29b60     17 19 02 F6 | 	mov	arg04, local05
29b64     08 18 46 F5 | 	or	arg04, #8
29b68     00 12 06 F6 | 	mov	arg01, #0
29b6c     00 14 06 F6 | 	mov	arg02, #0
29b70     00 16 06 F6 | 	mov	arg03, #0
29b74     60 2F B0 FD | 	call	#__system__pack_0678
29b78     40 00 90 FD | 	jmp	#LR__3655
29b7c                 | LR__3651
29b7c     00 36 0E F2 | 	cmp	local09, #0 wz
29b80     20 00 90 AD |  if_e	jmp	#LR__3654
29b84     01 36 66 F0 | 	shl	local09, #1
29b88     97 0A 48 FB | 	callpa	#(@LR__3653-@LR__3652)>>2,fcache_load_ptr_
29b8c                 | LR__3652
29b8c     00 40 00 FF 
29b90     00 36 16 F2 | 	cmp	local09, ##8388608 wc
29b94     01 38 86 C1 |  if_b	sub	local10, #1
29b98     01 36 66 C0 |  if_b	shl	local09, #1
29b9c     EC FF 9F CD |  if_b	jmp	#LR__3652
29ba0                 | LR__3653
29ba0     6C FE 9F FD | 	jmp	#LR__3641
29ba4                 | LR__3654
29ba4     02 2E 46 F5 | 	or	local05, #2
29ba8     00 12 06 F6 | 	mov	arg01, #0
29bac     00 14 06 F6 | 	mov	arg02, #0
29bb0     00 16 06 F6 | 	mov	arg03, #0
29bb4     17 19 02 F6 | 	mov	arg04, local05
29bb8     1C 2F B0 FD | 	call	#__system__pack_0678
29bbc                 | LR__3655
29bbc     A7 F0 03 F6 | 	mov	ptra, fp
29bc0     B2 00 A0 FD | 	call	#popregs_
29bc4                 | __system___float_div_ret
29bc4     2D 00 64 FD | 	ret
29bc8                 | 
29bc8                 | __system___float_cmp
29bc8     00 C0 3F FF 
29bcc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
29bd0     00 C0 3F CF 
29bd4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
29bd8     0B FB 01 36 |  if_ae	mov	result1, arg03
29bdc     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29be0     00 C0 7F FF 
29be4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
29be8     00 C0 7F CF 
29bec     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
29bf0     0B FB 01 36 |  if_ae	mov	result1, arg03
29bf4     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
29bf8     00 12 56 F2 | 	cmps	arg01, #0 wc
29bfc     2C 00 90 3D |  if_ae	jmp	#LR__3660
29c00     00 14 56 F2 | 	cmps	arg02, #0 wc
29c04     0A FB 01 C6 |  if_b	mov	result1, arg02
29c08     09 FB 81 C1 |  if_b	sub	result1, arg01
29c0c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
29c10     00 14 0E F2 | 	cmp	arg02, #0 wz
29c14     00 00 40 AF 
29c18     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
29c1c     00 FA 05 A6 |  if_e	mov	result1, #0
29c20     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c24     01 FA 65 F6 | 	neg	result1, #1
29c28     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
29c2c                 | LR__3660
29c2c     00 14 56 F2 | 	cmps	arg02, #0 wc
29c30     1C 00 90 3D |  if_ae	jmp	#LR__3661
29c34     00 12 0E F2 | 	cmp	arg01, #0 wz
29c38     00 00 40 AF 
29c3c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
29c40     00 FA 05 A6 |  if_e	mov	result1, #0
29c44     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
29c48     01 FA 05 F6 | 	mov	result1, #1
29c4c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
29c50                 | LR__3661
29c50     0A 13 82 F1 | 	sub	arg01, arg02
29c54     09 FB 01 F6 | 	mov	result1, arg01
29c58                 | __system___float_cmp_ret
29c58     2D 00 64 FD | 	ret
29c5c                 | 
29c5c                 | __system___float_tointeger
29c5c     02 4A 05 F6 | 	mov	COUNT_, #2
29c60     A8 00 A0 FD | 	call	#pushregs_
29c64     50 00 B0 FD | 	call	#__system___float_Unpack
29c68     FF FF 7F FF 
29c6c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
29c70     34 00 90 CD |  if_b	jmp	#LR__3670
29c74     1F FC 55 F2 | 	cmps	result2, #31 wc
29c78     2C 00 90 3D |  if_ae	jmp	#LR__3670
29c7c     02 FE 65 F0 | 	shl	result3, #2
29c80     1E 26 06 F6 | 	mov	local01, #30
29c84     FE 26 82 F1 | 	sub	local01, result2
29c88     13 FF 41 F0 | 	shr	result3, local01
29c8c     FF 28 02 F6 | 	mov	local02, result3
29c90     0A 29 02 F1 | 	add	local02, arg02
29c94     01 28 46 F0 | 	shr	local02, #1
29c98     00 FA 0D F2 | 	cmp	result1, #0 wz
29c9c     14 29 62 56 |  if_ne	neg	local02, local02
29ca0     14 FB 01 F6 | 	mov	result1, local02
29ca4     04 00 90 FD | 	jmp	#LR__3671
29ca8                 | LR__3670
29ca8     00 FA 05 F6 | 	mov	result1, #0
29cac                 | LR__3671
29cac     A7 F0 03 F6 | 	mov	ptra, fp
29cb0     B2 00 A0 FD | 	call	#popregs_
29cb4                 | __system___float_tointeger_ret
29cb4     2D 00 64 FD | 	ret
29cb8                 | 
29cb8                 | __system___float_Unpack
29cb8     09 01 02 F6 | 	mov	_var01, arg01
29cbc     1F 00 46 F0 | 	shr	_var01, #31
29cc0     09 03 02 F6 | 	mov	_var02, arg01
29cc4     01 02 66 F0 | 	shl	_var02, #1
29cc8     18 02 4E F0 | 	shr	_var02, #24 wz
29ccc     17 13 06 F4 | 	bitl	arg01, #279
29cd0     06 12 66 50 |  if_ne	shl	arg01, #6
29cd4     1D 12 26 54 |  if_ne	bith	arg01, #29
29cd8     1C 00 90 5D |  if_ne	jmp	#LR__3680
29cdc     09 05 92 F7 | 	encod	_var03, arg01 wc
29ce0     01 04 06 C1 |  if_b	add	_var03, #1
29ce4     17 04 86 F1 | 	sub	_var03, #23
29ce8     02 03 02 F6 | 	mov	_var02, _var03
29cec     07 FC 05 F6 | 	mov	result2, #7
29cf0     02 FD 81 F1 | 	sub	result2, _var03
29cf4     FE 12 62 F0 | 	shl	arg01, result2
29cf8                 | LR__3680
29cf8     7F 02 86 F1 | 	sub	_var02, #127
29cfc     09 FF 01 F6 | 	mov	result3, arg01
29d00     00 FB 01 F6 | 	mov	result1, _var01
29d04     01 FD 01 F6 | 	mov	result2, _var02
29d08                 | __system___float_Unpack_ret
29d08     2D 00 64 FD | 	ret
29d0c                 | 
29d0c                 | __system___float_Pack
29d0c     00 00 06 F6 | 	mov	_var01, #0
29d10     00 16 0E F2 | 	cmp	arg03, #0 wz
29d14     8C 00 90 AD |  if_e	jmp	#LR__3691
29d18     0B 03 92 F7 | 	encod	_var02, arg03 wc
29d1c     01 02 06 C1 |  if_b	add	_var02, #1
29d20     21 00 06 F6 | 	mov	_var01, #33
29d24     01 01 82 F1 | 	sub	_var01, _var02
29d28     00 17 62 F0 | 	shl	arg03, _var01
29d2c     03 02 06 F6 | 	mov	_var02, #3
29d30     00 03 82 F1 | 	sub	_var02, _var01
29d34     01 15 02 F1 | 	add	arg02, _var02
29d38     0A 05 02 F6 | 	mov	_var03, arg02
29d3c     00 17 06 F1 | 	add	arg03, #256
29d40     0B 03 02 F6 | 	mov	_var02, arg03
29d44     FF 02 2E F5 | 	andn	_var02, #255 wz
29d48     01 04 06 A1 |  if_e	add	_var03, #1
29d4c     7F 04 06 F1 | 	add	_var03, #127
29d50     FF FF 7F FF 
29d54     E9 05 46 F3 | 	fges	_var03, ##-23
29d58     FF 04 66 F3 | 	fles	_var03, #255
29d5c     01 04 56 F2 | 	cmps	_var03, #1 wc
29d60     1C 00 90 3D |  if_ae	jmp	#LR__3690
29d64     01 16 46 F0 | 	shr	arg03, #1
29d68     1F 02 C6 F9 | 	decod	_var02, #31
29d6c     0B 03 02 F1 | 	add	_var02, arg03
29d70     02 05 62 F6 | 	neg	_var03, _var03
29d74     02 03 42 F0 | 	shr	_var02, _var03
29d78     01 17 02 F6 | 	mov	arg03, _var02
29d7c     00 04 06 F6 | 	mov	_var03, #0
29d80                 | LR__3690
29d80     09 FB 01 F6 | 	mov	result1, arg01
29d84     1F FA 65 F0 | 	shl	result1, #31
29d88     02 03 02 F6 | 	mov	_var02, _var03
29d8c     17 02 66 F0 | 	shl	_var02, #23
29d90     01 FB 41 F5 | 	or	result1, _var02
29d94     0B 07 02 F6 | 	mov	_var04, arg03
29d98     09 06 46 F0 | 	shr	_var04, #9
29d9c     03 FB 41 F5 | 	or	result1, _var04
29da0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
29da4                 | LR__3691
29da4     00 FB 01 F6 | 	mov	result1, _var01
29da8                 | __system___float_Pack_ret
29da8     2D 00 64 FD | 	ret
29dac                 | 
29dac                 | __system___basic_print_float
29dac     05 4A 05 F6 | 	mov	COUNT_, #5
29db0     A8 00 A0 FD | 	call	#pushregs_
29db4     09 27 02 F6 | 	mov	local01, arg01
29db8     0A 29 02 F6 | 	mov	local02, arg02
29dbc     0B 2B 0A F6 | 	mov	local03, arg03 wz
29dc0     0C 2D 02 F6 | 	mov	local04, arg04
29dc4     14 00 90 5D |  if_ne	jmp	#LR__3700
29dc8     23 2C 0E F2 | 	cmp	local04, #35 wz
29dcc     80 02 10 AF 
29dd0     00 2E 06 A6 |  if_e	mov	local05, ##537198592
29dd4     1D 2E C6 59 |  if_ne	decod	local05, #29
29dd8     17 2B 02 F6 | 	mov	local03, local05
29ddc                 | LR__3700
29ddc     13 13 02 F6 | 	mov	arg01, local01
29de0     28 28 B0 FD | 	call	#__system___gettxfunc
29de4     FD 2E 0A F6 | 	mov	local05, result1 wz
29de8     00 FA 05 A6 |  if_e	mov	result1, #0
29dec     17 13 02 56 |  if_ne	mov	arg01, local05
29df0     15 15 02 56 |  if_ne	mov	arg02, local03
29df4     14 17 02 56 |  if_ne	mov	arg03, local02
29df8     16 19 02 56 |  if_ne	mov	arg04, local04
29dfc     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
29e00     A7 F0 03 F6 | 	mov	ptra, fp
29e04     B2 00 A0 FD | 	call	#popregs_
29e08                 | __system___basic_print_float_ret
29e08     2D 00 64 FD | 	ret
29e0c                 | 
29e0c                 | __system____builtin_atoi
29e0c     07 4A 05 F6 | 	mov	COUNT_, #7
29e10     A8 00 A0 FD | 	call	#pushregs_
29e14                 | __system____builtin_atoi_enter
29e14     09 27 02 F6 | 	mov	local01, arg01
29e18     0A 29 02 F6 | 	mov	local02, arg02
29e1c     00 2A 06 F6 | 	mov	local03, #0
29e20     00 2C 06 F6 | 	mov	local04, #0
29e24     00 2E 06 F6 | 	mov	local05, #0
29e28     97 1C 48 FB | 	callpa	#(@LR__3712-@LR__3710)>>2,fcache_load_ptr_
29e2c                 | LR__3710
29e2c     13 31 C2 FA | 	rdbyte	local06, local01
29e30     20 30 0E F2 | 	cmp	local06, #32 wz
29e34     01 26 06 A1 |  if_e	add	local01, #1
29e38     F0 FF 9F AD |  if_e	jmp	#LR__3710
29e3c     13 33 C2 FA | 	rdbyte	local07, local01
29e40                 | LR__3711
29e40     2D 32 0E F2 | 	cmp	local07, #45 wz
29e44     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
29e48     18 00 90 5D |  if_ne	jmp	#LR__3713
29e4c     01 26 06 F1 | 	add	local01, #1
29e50     2D 32 0E F2 | 	cmp	local07, #45 wz
29e54     01 30 06 A6 |  if_e	mov	local06, #1
29e58     18 2F C2 A2 |  if_e	subr	local05, local06
29e5c     13 33 C2 FA | 	rdbyte	local07, local01
29e60     DC FF 9F FD | 	jmp	#LR__3711
29e64                 | LR__3712
29e64                 | LR__3713
29e64     00 28 0E F2 | 	cmp	local02, #0 wz
29e68     1C 00 90 5D |  if_ne	jmp	#LR__3715
29e6c     24 32 0E F2 | 	cmp	local07, #36 wz
29e70     10 28 06 A6 |  if_e	mov	local02, #16
29e74     01 26 06 A1 |  if_e	add	local01, #1
29e78     0C 00 90 AD |  if_e	jmp	#LR__3714
29e7c     25 32 0E F2 | 	cmp	local07, #37 wz
29e80     02 28 06 A6 |  if_e	mov	local02, #2
29e84     01 26 06 A1 |  if_e	add	local01, #1
29e88                 | LR__3714
29e88                 | LR__3715
29e88     97 48 48 FB | 	callpa	#(@LR__3723-@LR__3716)>>2,fcache_load_ptr_
29e8c                 | LR__3716
29e8c                 | LR__3717
29e8c     13 33 C2 FA | 	rdbyte	local07, local01
29e90     5F 32 0E F2 | 	cmp	local07, #95 wz
29e94     01 26 06 F1 | 	add	local01, #1
29e98     F0 FF 9F AD |  if_e	jmp	#LR__3717
29e9c     30 32 0E F2 | 	cmp	local07, #48 wz
29ea0     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
29ea4     00 2C 06 A6 |  if_e	mov	local04, #0
29ea8     60 00 90 AD |  if_e	jmp	#LR__3722
29eac     31 32 56 F2 | 	cmps	local07, #49 wc
29eb0     18 00 90 CD |  if_b	jmp	#LR__3718
29eb4     3A 32 56 F2 | 	cmps	local07, #58 wc
29eb8     19 2D 02 C6 |  if_b	mov	local04, local07
29ebc     30 2C 86 C1 |  if_b	sub	local04, #48
29ec0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
29ec4     0A 28 06 86 |  if_c_and_z	mov	local02, #10
29ec8     40 00 90 CD |  if_b	jmp	#LR__3721
29ecc                 | LR__3718
29ecc     0B 28 56 F2 | 	cmps	local02, #11 wc
29ed0     61 32 56 32 |  if_ae	cmps	local07, #97 wc
29ed4     14 00 90 CD |  if_b	jmp	#LR__3719
29ed8     67 32 56 F2 | 	cmps	local07, #103 wc
29edc     61 32 86 C1 |  if_b	sub	local07, #97
29ee0     0A 2C 06 C6 |  if_b	mov	local04, #10
29ee4     19 2D 02 C1 |  if_b	add	local04, local07
29ee8     20 00 90 CD |  if_b	jmp	#LR__3720
29eec                 | LR__3719
29eec     0B 28 56 F2 | 	cmps	local02, #11 wc
29ef0     41 32 56 32 |  if_ae	cmps	local07, #65 wc
29ef4     24 00 90 CD |  if_b	jmp	#LR__3724
29ef8     47 32 56 F2 | 	cmps	local07, #71 wc
29efc     41 32 86 C1 |  if_b	sub	local07, #65
29f00     0A 2C 06 C6 |  if_b	mov	local04, #10
29f04     19 2D 02 C1 |  if_b	add	local04, local07
29f08     10 00 90 3D |  if_ae	jmp	#LR__3724
29f0c                 | LR__3720
29f0c                 | LR__3721
29f0c                 | LR__3722
29f0c     15 29 02 FD | 	qmul	local02, local03
29f10     18 2A 62 FD | 	getqx	local03
29f14     16 2B 02 F1 | 	add	local03, local04
29f18     70 FF 9F FD | 	jmp	#LR__3716
29f1c                 | LR__3723
29f1c                 | LR__3724
29f1c     00 28 0E F2 | 	cmp	local02, #0 wz
29f20     64 00 90 5D |  if_ne	jmp	#LR__3730
29f24     78 32 0E F2 | 	cmp	local07, #120 wz
29f28     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
29f2c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
29f30     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
29f34     14 00 90 5D |  if_ne	jmp	#LR__3725
29f38     13 13 02 F6 | 	mov	arg01, local01
29f3c     10 14 06 F6 | 	mov	arg02, #16
29f40     C8 FE BF FD | 	call	#__system____builtin_atoi
29f44     FD 2A 02 F6 | 	mov	local03, result1
29f48     3C 00 90 FD | 	jmp	#LR__3729
29f4c                 | LR__3725
29f4c     62 32 0E F2 | 	cmp	local07, #98 wz
29f50     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
29f54     14 00 90 5D |  if_ne	jmp	#LR__3726
29f58     13 13 02 F6 | 	mov	arg01, local01
29f5c     02 14 06 F6 | 	mov	arg02, #2
29f60     A8 FE BF FD | 	call	#__system____builtin_atoi
29f64     FD 2A 02 F6 | 	mov	local03, result1
29f68     1C 00 90 FD | 	jmp	#LR__3728
29f6c                 | LR__3726
29f6c     6F 32 0E F2 | 	cmp	local07, #111 wz
29f70     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
29f74     10 00 90 5D |  if_ne	jmp	#LR__3727
29f78     13 13 02 F6 | 	mov	arg01, local01
29f7c     08 14 06 F6 | 	mov	arg02, #8
29f80     88 FE BF FD | 	call	#__system____builtin_atoi
29f84     FD 2A 02 F6 | 	mov	local03, result1
29f88                 | LR__3727
29f88                 | LR__3728
29f88                 | LR__3729
29f88                 | LR__3730
29f88     00 2E 0E F2 | 	cmp	local05, #0 wz
29f8c     15 2B 62 56 |  if_ne	neg	local03, local03
29f90     15 FB 01 F6 | 	mov	result1, local03
29f94     A7 F0 03 F6 | 	mov	ptra, fp
29f98     B2 00 A0 FD | 	call	#popregs_
29f9c                 | __system____builtin_atoi_ret
29f9c     2D 00 64 FD | 	ret
29fa0                 | 
29fa0                 | __system____builtin_atof
29fa0     07 4A 05 F6 | 	mov	COUNT_, #7
29fa4     A8 00 A0 FD | 	call	#pushregs_
29fa8     09 27 02 F6 | 	mov	local01, arg01
29fac     00 28 06 F6 | 	mov	local02, #0
29fb0     00 2A 06 F6 | 	mov	local03, #0
29fb4     00 2C 06 F6 | 	mov	local04, #0
29fb8     00 2E 06 F6 | 	mov	local05, #0
29fbc     97 08 48 FB | 	callpa	#(@LR__3741-@LR__3740)>>2,fcache_load_ptr_
29fc0                 | LR__3740
29fc0     13 17 C2 FA | 	rdbyte	arg03, local01
29fc4     20 16 0E F2 | 	cmp	arg03, #32 wz
29fc8     01 26 06 A1 |  if_e	add	local01, #1
29fcc     F0 FF 9F AD |  if_e	jmp	#LR__3740
29fd0                 | LR__3741
29fd0     13 31 C2 FA | 	rdbyte	local06, local01
29fd4                 | LR__3742
29fd4     2B 30 0E F2 | 	cmp	local06, #43 wz
29fd8     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
29fdc     14 00 90 5D |  if_ne	jmp	#LR__3743
29fe0     2D 30 0E F2 | 	cmp	local06, #45 wz
29fe4     1F 2C E6 A4 |  if_e	bitnot	local04, #31
29fe8     01 26 06 F1 | 	add	local01, #1
29fec     13 31 C2 FA | 	rdbyte	local06, local01
29ff0     E0 FF 9F FD | 	jmp	#LR__3742
29ff4                 | LR__3743
29ff4                 | LR__3744
29ff4     97 08 48 FB | 	callpa	#(@LR__3746-@LR__3745)>>2,fcache_load_ptr_
29ff8                 | LR__3745
29ff8     13 31 C2 FA | 	rdbyte	local06, local01
29ffc     5F 30 0E F2 | 	cmp	local06, #95 wz
2a000     01 26 06 F1 | 	add	local01, #1
2a004     F0 FF 9F AD |  if_e	jmp	#LR__3745
2a008                 | LR__3746
2a008     00 30 0E F2 | 	cmp	local06, #0 wz
2a00c     5C 00 90 AD |  if_e	jmp	#LR__3748
2a010     30 30 56 F2 | 	cmps	local06, #48 wc
2a014     44 00 90 CD |  if_b	jmp	#LR__3747
2a018     3A 30 56 F2 | 	cmps	local06, #58 wc
2a01c     3C 00 90 3D |  if_ae	jmp	#LR__3747
2a020     14 13 02 F6 | 	mov	arg01, local02
2a024     00 90 20 FF 
2a028     00 14 06 F6 | 	mov	arg02, ##1092616192
2a02c     64 F7 BF FD | 	call	#__system___float_mul
2a030     FD 28 02 F6 | 	mov	local02, result1
2a034     30 30 86 F1 | 	sub	local06, #48
2a038     18 13 02 F6 | 	mov	arg01, local06
2a03c     50 F3 BF FD | 	call	#__system___float_fromuns
2a040     FD 14 02 F6 | 	mov	arg02, result1
2a044     14 13 02 F6 | 	mov	arg01, local02
2a048     78 F3 BF FD | 	call	#__system___float_add
2a04c     FD 28 02 F6 | 	mov	local02, result1
2a050     00 2E 0E F2 | 	cmp	local05, #0 wz
2a054     01 2A 86 51 |  if_ne	sub	local03, #1
2a058     98 FF 9F FD | 	jmp	#LR__3744
2a05c                 | LR__3747
2a05c     2E 30 0E F2 | 	cmp	local06, #46 wz
2a060     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
2a064     01 2E 06 A6 |  if_e	mov	local05, #1
2a068     88 FF 9F AD |  if_e	jmp	#LR__3744
2a06c                 | LR__3748
2a06c     45 30 0E F2 | 	cmp	local06, #69 wz
2a070     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
2a074     18 00 90 5D |  if_ne	jmp	#LR__3749
2a078     13 13 02 F6 | 	mov	arg01, local01
2a07c     00 14 06 F6 | 	mov	arg02, #0
2a080     88 FD BF FD | 	call	#__system____builtin_atoi
2a084     15 FB 01 F1 | 	add	result1, local03
2a088     FD 32 02 F6 | 	mov	local07, result1
2a08c     04 00 90 FD | 	jmp	#LR__3750
2a090                 | LR__3749
2a090     15 33 02 F6 | 	mov	local07, local03
2a094                 | LR__3750
2a094     19 17 02 F6 | 	mov	arg03, local07
2a098     14 13 02 F6 | 	mov	arg01, local02
2a09c     00 90 20 FF 
2a0a0     00 14 06 F6 | 	mov	arg02, ##1092616192
2a0a4     F4 06 B0 FD | 	call	#__system___float_pow_n
2a0a8     16 FB 61 F5 | 	xor	result1, local04
2a0ac     A7 F0 03 F6 | 	mov	ptra, fp
2a0b0     B2 00 A0 FD | 	call	#popregs_
2a0b4                 | __system____builtin_atof_ret
2a0b4     2D 00 64 FD | 	ret
2a0b8                 | 
2a0b8                 | __system____builtin_ilogb
2a0b8     FC FB BF FD | 	call	#__system___float_Unpack
2a0bc     00 FE 0D F2 | 	cmp	result3, #0 wz
2a0c0     00 00 40 AF 
2a0c4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
2a0c8     24 00 90 AD |  if_e	jmp	#LR__3761
2a0cc     80 FC 0D F2 | 	cmp	result2, #128 wz
2a0d0     18 00 90 5D |  if_ne	jmp	#LR__3760
2a0d4     00 00 10 FF 
2a0d8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
2a0dc     1E FA CD A9 |  if_e	bmask	result1, #30
2a0e0     0C 00 90 AD |  if_e	jmp	#LR__3761
2a0e4     1F FA C5 F9 | 	decod	result1, #31
2a0e8     04 00 90 FD | 	jmp	#LR__3761
2a0ec                 | LR__3760
2a0ec     FE FA 01 F6 | 	mov	result1, result2
2a0f0                 | LR__3761
2a0f0                 | __system____builtin_ilogb_ret
2a0f0     2D 00 64 FD | 	ret
2a0f4                 | 
2a0f4                 | __system____builtin_sinf
2a0f4     03 4A 05 F6 | 	mov	COUNT_, #3
2a0f8     A8 00 A0 FD | 	call	#pushregs_
2a0fc     09 27 02 F6 | 	mov	local01, arg01
2a100     87 64 20 FF 
2a104     DB 15 06 F6 | 	mov	arg02, ##1086918619
2a108     8C F8 BF FD | 	call	#__system___float_div
2a10c     FD 12 02 F6 | 	mov	arg01, result1
2a110     00 14 06 F6 | 	mov	arg02, #0
2a114     44 FB BF FD | 	call	#__system___float_tointeger
2a118     FD 16 0A F6 | 	mov	arg03, result1 wz
2a11c     44 00 90 AD |  if_e	jmp	#LR__3770
2a120     0B 13 52 F6 | 	abs	arg01, arg03 wc
2a124     1F 28 C6 C9 |  if_b	decod	local02, #31
2a128     00 28 06 36 |  if_ae	mov	local02, #0
2a12c     60 F2 BF FD | 	call	#__system___float_fromuns
2a130     14 FB 61 F5 | 	xor	result1, local02
2a134     FD 12 02 F6 | 	mov	arg01, result1
2a138     1E 14 C6 F9 | 	decod	arg02, #30
2a13c     54 F6 BF FD | 	call	#__system___float_mul
2a140     FD 12 02 F6 | 	mov	arg01, result1
2a144     87 24 20 FF 
2a148     DB 15 06 F6 | 	mov	arg02, ##1078530011
2a14c     44 F6 BF FD | 	call	#__system___float_mul
2a150     FD 14 02 F6 | 	mov	arg02, result1
2a154     13 13 02 F6 | 	mov	arg01, local01
2a158     1F 14 E6 F4 | 	bitnot	arg02, #31
2a15c     64 F2 BF FD | 	call	#__system___float_add
2a160     FD 26 02 F6 | 	mov	local01, result1
2a164                 | LR__3770
2a164     13 13 02 F6 | 	mov	arg01, local01
2a168     66 E6 1E FF 
2a16c     CD 14 06 F6 | 	mov	arg02, ##1036831949
2a170     01 16 06 F6 | 	mov	arg03, #1
2a174     50 FA BF FD | 	call	#__system___float_cmp
2a178     00 FA 55 F2 | 	cmps	result1, #0 wc
2a17c     5C 00 90 3D |  if_ae	jmp	#LR__3771
2a180     13 13 02 F6 | 	mov	arg01, local01
2a184     66 E6 5E FF 
2a188     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2a18c     01 16 66 F6 | 	neg	arg03, #1
2a190     34 FA BF FD | 	call	#__system___float_cmp
2a194     01 FA 55 F2 | 	cmps	result1, #1 wc
2a198     40 00 90 CD |  if_b	jmp	#LR__3771
2a19c     13 13 02 F6 | 	mov	arg01, local01
2a1a0     13 15 02 F6 | 	mov	arg02, local01
2a1a4     EC F5 BF FD | 	call	#__system___float_mul
2a1a8     FD 12 02 F6 | 	mov	arg01, result1
2a1ac     13 15 02 F6 | 	mov	arg02, local01
2a1b0     E0 F5 BF FD | 	call	#__system___float_mul
2a1b4     FD 12 02 F6 | 	mov	arg01, result1
2a1b8     00 60 20 FF 
2a1bc     00 14 06 F6 | 	mov	arg02, ##1086324736
2a1c0     D4 F7 BF FD | 	call	#__system___float_div
2a1c4     FD 14 02 F6 | 	mov	arg02, result1
2a1c8     13 13 02 F6 | 	mov	arg01, local01
2a1cc     1F 14 E6 F4 | 	bitnot	arg02, #31
2a1d0     F0 F1 BF FD | 	call	#__system___float_add
2a1d4     FD 2A 02 F6 | 	mov	local03, result1
2a1d8     54 00 90 FD | 	jmp	#LR__3772
2a1dc                 | LR__3771
2a1dc     13 13 02 F6 | 	mov	arg01, local01
2a1e0     7C 91 26 FF 
2a1e4     83 15 06 F6 | 	mov	arg02, ##1294137731
2a1e8     A8 F5 BF FD | 	call	#__system___float_mul
2a1ec     FD 12 02 F6 | 	mov	arg01, result1
2a1f0     00 14 06 F6 | 	mov	arg02, #0
2a1f4     64 FA BF FD | 	call	#__system___float_tointeger
2a1f8     02 FA 65 F0 | 	shl	result1, #2
2a1fc     00 00 A0 FF 
2a200     FD 00 48 FD | 	qrotate	##1073741824, result1
2a204     19 12 62 FD | 	getqy	arg01
2a208     09 13 52 F6 | 	abs	arg01, arg01 wc
2a20c     1F 28 C6 C9 |  if_b	decod	local02, #31
2a210     00 28 06 36 |  if_ae	mov	local02, #0
2a214     78 F1 BF FD | 	call	#__system___float_fromuns
2a218     14 FB 61 F5 | 	xor	result1, local02
2a21c     FD 12 02 F6 | 	mov	arg01, result1
2a220     00 40 27 FF 
2a224     00 14 06 F6 | 	mov	arg02, ##1317011456
2a228     6C F7 BF FD | 	call	#__system___float_div
2a22c     FD 2A 02 F6 | 	mov	local03, result1
2a230                 | LR__3772
2a230     15 FB 01 F6 | 	mov	result1, local03
2a234     A7 F0 03 F6 | 	mov	ptra, fp
2a238     B2 00 A0 FD | 	call	#popregs_
2a23c                 | __system____builtin_sinf_ret
2a23c     2D 00 64 FD | 	ret
2a240                 | 
2a240                 | __system____builtin_tanf
2a240     02 4A 05 F6 | 	mov	COUNT_, #2
2a244     A8 00 A0 FD | 	call	#pushregs_
2a248     09 27 02 F6 | 	mov	local01, arg01
2a24c     A4 FE BF FD | 	call	#__system____builtin_sinf
2a250     FD 28 02 F6 | 	mov	local02, result1
2a254     13 15 02 F6 | 	mov	arg02, local01
2a258     87 E4 1F FF 
2a25c     DB 13 06 F6 | 	mov	arg01, ##1070141403
2a260     1F 14 E6 F4 | 	bitnot	arg02, #31
2a264     5C F1 BF FD | 	call	#__system___float_add
2a268     FD 12 02 F6 | 	mov	arg01, result1
2a26c     84 FE BF FD | 	call	#__system____builtin_sinf
2a270     FD 14 02 F6 | 	mov	arg02, result1
2a274     14 13 02 F6 | 	mov	arg01, local02
2a278     1C F7 BF FD | 	call	#__system___float_div
2a27c     A7 F0 03 F6 | 	mov	ptra, fp
2a280     B2 00 A0 FD | 	call	#popregs_
2a284                 | __system____builtin_tanf_ret
2a284     2D 00 64 FD | 	ret
2a288                 | 
2a288                 | __system____builtin_asinf
2a288     01 4A 05 F6 | 	mov	COUNT_, #1
2a28c     A8 00 A0 FD | 	call	#pushregs_
2a290     09 27 02 F6 | 	mov	local01, arg01
2a294     13 15 02 F6 | 	mov	arg02, local01
2a298     13 13 02 F6 | 	mov	arg01, local01
2a29c     F4 F4 BF FD | 	call	#__system___float_mul
2a2a0     FD 14 02 F6 | 	mov	arg02, result1
2a2a4     00 C0 1F FF 
2a2a8     00 12 06 F6 | 	mov	arg01, ##1065353216
2a2ac     1F 14 E6 F4 | 	bitnot	arg02, #31
2a2b0     10 F1 BF FD | 	call	#__system___float_add
2a2b4     FD 12 02 F6 | 	mov	arg01, result1
2a2b8     00 F4 BF FD | 	call	#__system___float_sqrt
2a2bc     FD 14 02 F6 | 	mov	arg02, result1
2a2c0     13 13 02 F6 | 	mov	arg01, local01
2a2c4     58 00 B0 FD | 	call	#__system____builtin_atan2f
2a2c8     A7 F0 03 F6 | 	mov	ptra, fp
2a2cc     B2 00 A0 FD | 	call	#popregs_
2a2d0                 | __system____builtin_asinf_ret
2a2d0     2D 00 64 FD | 	ret
2a2d4                 | 
2a2d4                 | __system____builtin_acosf
2a2d4     01 4A 05 F6 | 	mov	COUNT_, #1
2a2d8     A8 00 A0 FD | 	call	#pushregs_
2a2dc     09 27 02 F6 | 	mov	local01, arg01
2a2e0     13 15 02 F6 | 	mov	arg02, local01
2a2e4     13 13 02 F6 | 	mov	arg01, local01
2a2e8     A8 F4 BF FD | 	call	#__system___float_mul
2a2ec     FD 14 02 F6 | 	mov	arg02, result1
2a2f0     00 C0 1F FF 
2a2f4     00 12 06 F6 | 	mov	arg01, ##1065353216
2a2f8     1F 14 E6 F4 | 	bitnot	arg02, #31
2a2fc     C4 F0 BF FD | 	call	#__system___float_add
2a300     FD 12 02 F6 | 	mov	arg01, result1
2a304     B4 F3 BF FD | 	call	#__system___float_sqrt
2a308     FD 12 02 F6 | 	mov	arg01, result1
2a30c     13 15 02 F6 | 	mov	arg02, local01
2a310     0C 00 B0 FD | 	call	#__system____builtin_atan2f
2a314     A7 F0 03 F6 | 	mov	ptra, fp
2a318     B2 00 A0 FD | 	call	#popregs_
2a31c                 | __system____builtin_acosf_ret
2a31c     2D 00 64 FD | 	ret
2a320                 | 
2a320                 | __system____builtin_atan2f
2a320     04 4A 05 F6 | 	mov	COUNT_, #4
2a324     A8 00 A0 FD | 	call	#pushregs_
2a328     09 27 02 F6 | 	mov	local01, arg01
2a32c     0A 29 02 F6 | 	mov	local02, arg02
2a330     13 13 02 F6 | 	mov	arg01, local01
2a334     00 14 06 F6 | 	mov	arg02, #0
2a338     01 16 06 F6 | 	mov	arg03, #1
2a33c     88 F8 BF FD | 	call	#__system___float_cmp
2a340     00 FA 0D F2 | 	cmp	result1, #0 wz
2a344     28 00 90 5D |  if_ne	jmp	#LR__3780
2a348     14 13 02 F6 | 	mov	arg01, local02
2a34c     00 14 06 F6 | 	mov	arg02, #0
2a350     01 16 06 F6 | 	mov	arg03, #1
2a354     70 F8 BF FD | 	call	#__system___float_cmp
2a358     00 FA 55 F2 | 	cmps	result1, #0 wc
2a35c     87 24 60 CF 
2a360     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
2a364     DC 00 90 CD |  if_b	jmp	#LR__3781
2a368     00 FA 05 F6 | 	mov	result1, #0
2a36c     D4 00 90 FD | 	jmp	#LR__3781
2a370                 | LR__3780
2a370     14 13 02 F6 | 	mov	arg01, local02
2a374     14 15 02 F6 | 	mov	arg02, local02
2a378     18 F4 BF FD | 	call	#__system___float_mul
2a37c     FD 2A 02 F6 | 	mov	local03, result1
2a380     13 13 02 F6 | 	mov	arg01, local01
2a384     13 15 02 F6 | 	mov	arg02, local01
2a388     08 F4 BF FD | 	call	#__system___float_mul
2a38c     FD 14 02 F6 | 	mov	arg02, result1
2a390     15 13 02 F6 | 	mov	arg01, local03
2a394     2C F0 BF FD | 	call	#__system___float_add
2a398     FD 12 02 F6 | 	mov	arg01, result1
2a39c     1C F3 BF FD | 	call	#__system___float_sqrt
2a3a0     FD 2A 02 F6 | 	mov	local03, result1
2a3a4     14 13 02 F6 | 	mov	arg01, local02
2a3a8     15 15 02 F6 | 	mov	arg02, local03
2a3ac     E8 F5 BF FD | 	call	#__system___float_div
2a3b0     FD 28 02 F6 | 	mov	local02, result1
2a3b4     13 13 02 F6 | 	mov	arg01, local01
2a3b8     15 15 02 F6 | 	mov	arg02, local03
2a3bc     D8 F5 BF FD | 	call	#__system___float_div
2a3c0     FD 26 02 F6 | 	mov	local01, result1
2a3c4     00 40 27 FF 
2a3c8     00 12 06 F6 | 	mov	arg01, ##1317011456
2a3cc     14 15 02 F6 | 	mov	arg02, local02
2a3d0     C0 F3 BF FD | 	call	#__system___float_mul
2a3d4     FD 12 02 F6 | 	mov	arg01, result1
2a3d8     00 14 06 F6 | 	mov	arg02, #0
2a3dc     7C F8 BF FD | 	call	#__system___float_tointeger
2a3e0     FD 2A 02 F6 | 	mov	local03, result1
2a3e4     00 40 27 FF 
2a3e8     00 12 06 F6 | 	mov	arg01, ##1317011456
2a3ec     13 15 02 F6 | 	mov	arg02, local01
2a3f0     A0 F3 BF FD | 	call	#__system___float_mul
2a3f4     FD 12 02 F6 | 	mov	arg01, result1
2a3f8     00 14 06 F6 | 	mov	arg02, #0
2a3fc     5C F8 BF FD | 	call	#__system___float_tointeger
2a400     FD 2A 52 FD | 	qvector	local03, result1
2a404     87 24 20 FF 
2a408     DB 2B 06 F6 | 	mov	local03, ##1078530011
2a40c     19 12 62 FD | 	getqy	arg01
2a410     01 12 C6 F0 | 	sar	arg01, #1
2a414     09 13 52 F6 | 	abs	arg01, arg01 wc
2a418     1F 2C C6 C9 |  if_b	decod	local04, #31
2a41c     00 2C 06 36 |  if_ae	mov	local04, #0
2a420     6C EF BF FD | 	call	#__system___float_fromuns
2a424     16 FB 61 F5 | 	xor	result1, local04
2a428     FD 12 02 F6 | 	mov	arg01, result1
2a42c     00 40 27 FF 
2a430     00 14 06 F6 | 	mov	arg02, ##1317011456
2a434     60 F5 BF FD | 	call	#__system___float_div
2a438     FD 14 02 F6 | 	mov	arg02, result1
2a43c     15 13 02 F6 | 	mov	arg01, local03
2a440     50 F3 BF FD | 	call	#__system___float_mul
2a444                 | LR__3781
2a444     A7 F0 03 F6 | 	mov	ptra, fp
2a448     B2 00 A0 FD | 	call	#popregs_
2a44c                 | __system____builtin_atan2f_ret
2a44c     2D 00 64 FD | 	ret
2a450                 | 
2a450                 | __system____builtin_exp2f
2a450     04 4A 05 F6 | 	mov	COUNT_, #4
2a454     A8 00 A0 FD | 	call	#pushregs_
2a458     09 27 02 F6 | 	mov	local01, arg01
2a45c     00 7F 21 FF 
2a460     00 14 06 F6 | 	mov	arg02, ##1123942400
2a464     01 16 66 F6 | 	neg	arg03, #1
2a468     5C F7 BF FD | 	call	#__system___float_cmp
2a46c     00 FA 55 F2 | 	cmps	result1, #0 wc
2a470     00 C0 3F 3F 
2a474     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2a478     DC 00 90 3D |  if_ae	jmp	#LR__3791
2a47c     13 13 02 F6 | 	mov	arg01, local01
2a480     00 7F 61 FF 
2a484     00 14 06 F6 | 	mov	arg02, ##-1023541248
2a488     01 16 06 F6 | 	mov	arg03, #1
2a48c     38 F7 BF FD | 	call	#__system___float_cmp
2a490     00 FA 55 F2 | 	cmps	result1, #0 wc
2a494     00 FA 05 C6 |  if_b	mov	result1, #0
2a498     BC 00 90 CD |  if_b	jmp	#LR__3791
2a49c     13 13 02 F6 | 	mov	arg01, local01
2a4a0     00 14 06 F6 | 	mov	arg02, #0
2a4a4     B4 F7 BF FD | 	call	#__system___float_tointeger
2a4a8     FD 28 02 F6 | 	mov	local02, result1
2a4ac     14 13 52 F6 | 	abs	arg01, local02 wc
2a4b0     1F 2A C6 C9 |  if_b	decod	local03, #31
2a4b4     00 2A 06 36 |  if_ae	mov	local03, #0
2a4b8     D4 EE BF FD | 	call	#__system___float_fromuns
2a4bc     15 FB 61 F5 | 	xor	result1, local03
2a4c0     FD 14 02 F6 | 	mov	arg02, result1
2a4c4     13 13 02 F6 | 	mov	arg01, local01
2a4c8     1F 14 E6 F4 | 	bitnot	arg02, #31
2a4cc     F4 EE BF FD | 	call	#__system___float_add
2a4d0     FD 2C 02 F6 | 	mov	local04, result1
2a4d4     16 13 02 F6 | 	mov	arg01, local04
2a4d8     00 14 06 F6 | 	mov	arg02, #0
2a4dc     01 16 06 F6 | 	mov	arg03, #1
2a4e0     E4 F6 BF FD | 	call	#__system___float_cmp
2a4e4     00 FA 55 F2 | 	cmps	result1, #0 wc
2a4e8     18 00 90 3D |  if_ae	jmp	#LR__3790
2a4ec     16 13 02 F6 | 	mov	arg01, local04
2a4f0     00 C0 1F FF 
2a4f4     00 14 06 F6 | 	mov	arg02, ##1065353216
2a4f8     C8 EE BF FD | 	call	#__system___float_add
2a4fc     FD 2C 02 F6 | 	mov	local04, result1
2a500     01 28 86 F1 | 	sub	local02, #1
2a504                 | LR__3790
2a504     7F 28 06 F1 | 	add	local02, #127
2a508     17 28 66 F0 | 	shl	local02, #23
2a50c     16 13 02 F6 | 	mov	arg01, local04
2a510     00 80 26 FF 
2a514     00 14 06 F6 | 	mov	arg02, ##1291845632
2a518     78 F2 BF FD | 	call	#__system___float_mul
2a51c     FD 12 02 F6 | 	mov	arg01, result1
2a520     00 14 06 F6 | 	mov	arg02, #0
2a524     34 F7 BF FD | 	call	#__system___float_tointeger
2a528     FD 2C 0A F6 | 	mov	local04, result1 wz
2a52c     14 FB 01 A6 |  if_e	mov	result1, local02
2a530     24 00 90 AD |  if_e	jmp	#LR__3791
2a534     3E 2C 26 F4 | 	bith	local04, #62
2a538     0F 2C 62 FD | 	qexp	local04
2a53c     14 13 02 F6 | 	mov	arg01, local02
2a540     18 14 62 FD | 	getqx	arg02
2a544     01 14 06 F1 | 	add	arg02, #1
2a548     01 14 46 F0 | 	shr	arg02, #1
2a54c     00 80 1F FF 
2a550     00 14 06 F1 | 	add	arg02, ##1056964608
2a554     3C F2 BF FD | 	call	#__system___float_mul
2a558                 | LR__3791
2a558     A7 F0 03 F6 | 	mov	ptra, fp
2a55c     B2 00 A0 FD | 	call	#popregs_
2a560                 | __system____builtin_exp2f_ret
2a560     2D 00 64 FD | 	ret
2a564                 | 
2a564                 | __system____builtin_log2f
2a564     06 4A 05 F6 | 	mov	COUNT_, #6
2a568     A8 00 A0 FD | 	call	#pushregs_
2a56c     09 27 02 F6 | 	mov	local01, arg01
2a570     09 29 0A F6 | 	mov	local02, arg01 wz
2a574     00 00 40 5F 
2a578     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2a57c     00 40 00 AF 
2a580     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a584     08 01 90 AD |  if_e	jmp	#LR__3804
2a588     00 28 56 F2 | 	cmps	local02, #0 wc
2a58c     00 E0 3F CF 
2a590     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a594     F8 00 90 CD |  if_b	jmp	#LR__3804
2a598     13 13 02 F6 | 	mov	arg01, local01
2a59c     00 90 20 FF 
2a5a0     00 14 06 F6 | 	mov	arg02, ##1092616192
2a5a4     01 16 06 F6 | 	mov	arg03, #1
2a5a8     1C F6 BF FD | 	call	#__system___float_cmp
2a5ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5b0     4D 2A 20 AF 
2a5b4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
2a5b8     D4 00 90 AD |  if_e	jmp	#LR__3804
2a5bc     13 13 02 F6 | 	mov	arg01, local01
2a5c0     FC 16 20 FF 
2a5c4     54 14 06 F6 | 	mov	arg02, ##1076754516
2a5c8     01 16 06 F6 | 	mov	arg03, #1
2a5cc     F8 F5 BF FD | 	call	#__system___float_cmp
2a5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a5d4     55 DC 1F AF 
2a5d8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
2a5dc     B0 00 90 AD |  if_e	jmp	#LR__3804
2a5e0     14 2B 02 F6 | 	mov	local03, local02
2a5e4     17 2A 46 F0 | 	shr	local03, #23
2a5e8     15 2B E2 F8 | 	getbyte	local03, local03, #0
2a5ec     17 29 06 F4 | 	bitl	local02, #279
2a5f0     14 2D 02 F6 | 	mov	local04, local02
2a5f4     FF 2A 0E F2 | 	cmp	local03, #255 wz
2a5f8     1C 00 90 5D |  if_ne	jmp	#LR__3800
2a5fc     00 2C 0E F2 | 	cmp	local04, #0 wz
2a600     00 C0 3F 5F 
2a604     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
2a608     00 E0 3F AF 
2a60c     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
2a610     17 FB 01 F6 | 	mov	result1, local05
2a614     78 00 90 FD | 	jmp	#LR__3804
2a618                 | LR__3800
2a618     00 2A 0E F2 | 	cmp	local03, #0 wz
2a61c     17 2C 26 54 |  if_ne	bith	local04, #23
2a620     7F 2A 86 51 |  if_ne	sub	local03, #127
2a624     28 00 90 5D |  if_ne	jmp	#LR__3803
2a628     00 2C 0E F2 | 	cmp	local04, #0 wz
2a62c     00 40 00 AF 
2a630     00 FA 65 A6 |  if_e	neg	result1, ##8388608
2a634     58 00 90 AD |  if_e	jmp	#LR__3804
2a638     7E 2A 66 F6 | 	neg	local03, #126
2a63c     97 08 48 FB | 	callpa	#(@LR__3802-@LR__3801)>>2,fcache_load_ptr_
2a640                 | LR__3801
2a640     17 2C 2E F4 | 	testbn	local04, #23 wz
2a644     01 2C 66 A0 |  if_e	shl	local04, #1
2a648     01 2A 06 A1 |  if_e	add	local03, #1
2a64c     F0 FF 9F AD |  if_e	jmp	#LR__3801
2a650                 | LR__3802
2a650                 | LR__3803
2a650     0E 2C 62 FD | 	qlog	local04
2a654     01 2A 86 F1 | 	sub	local03, #1
2a658     15 13 52 F6 | 	abs	arg01, local03 wc
2a65c     1F 30 C6 C9 |  if_b	decod	local06, #31
2a660     00 30 06 36 |  if_ae	mov	local06, #0
2a664     18 2E 62 FD | 	getqx	local05
2a668     9B 2E 06 F4 | 	bitl	local05, #155
2a66c     08 2E 06 F1 | 	add	local05, #8
2a670     04 2E 46 F0 | 	shr	local05, #4
2a674     00 C0 1F FF 
2a678     00 2E 06 F1 | 	add	local05, ##1065353216
2a67c     10 ED BF FD | 	call	#__system___float_fromuns
2a680     18 FB 61 F5 | 	xor	result1, local06
2a684     FD 14 02 F6 | 	mov	arg02, result1
2a688     17 13 02 F6 | 	mov	arg01, local05
2a68c     34 ED BF FD | 	call	#__system___float_add
2a690                 | LR__3804
2a690     A7 F0 03 F6 | 	mov	ptra, fp
2a694     B2 00 A0 FD | 	call	#popregs_
2a698                 | __system____builtin_log2f_ret
2a698     2D 00 64 FD | 	ret
2a69c                 | 
2a69c                 | __system____builtin_powf
2a69c     04 4A 05 F6 | 	mov	COUNT_, #4
2a6a0     A8 00 A0 FD | 	call	#pushregs_
2a6a4     09 27 02 F6 | 	mov	local01, arg01
2a6a8     0A 29 02 F6 | 	mov	local02, arg02
2a6ac     14 13 02 F6 | 	mov	arg01, local02
2a6b0     00 14 06 F6 | 	mov	arg02, #0
2a6b4     A4 F5 BF FD | 	call	#__system___float_tointeger
2a6b8     FD 2A 02 F6 | 	mov	local03, result1
2a6bc     15 13 52 F6 | 	abs	arg01, local03 wc
2a6c0     1F 2C C6 C9 |  if_b	decod	local04, #31
2a6c4     00 2C 06 36 |  if_ae	mov	local04, #0
2a6c8     C4 EC BF FD | 	call	#__system___float_fromuns
2a6cc     16 FB 61 F5 | 	xor	result1, local04
2a6d0     FD 12 02 F6 | 	mov	arg01, result1
2a6d4     14 15 02 F6 | 	mov	arg02, local02
2a6d8     01 16 06 F6 | 	mov	arg03, #1
2a6dc     E8 F4 BF FD | 	call	#__system___float_cmp
2a6e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6e4     18 00 90 5D |  if_ne	jmp	#LR__3810
2a6e8     00 C0 1F FF 
2a6ec     00 12 06 F6 | 	mov	arg01, ##1065353216
2a6f0     13 15 02 F6 | 	mov	arg02, local01
2a6f4     15 17 02 F6 | 	mov	arg03, local03
2a6f8     A0 00 B0 FD | 	call	#__system___float_pow_n
2a6fc     58 00 90 FD | 	jmp	#LR__3811
2a700                 | LR__3810
2a700     13 13 02 F6 | 	mov	arg01, local01
2a704     00 14 06 F6 | 	mov	arg02, #0
2a708     01 16 06 F6 | 	mov	arg03, #1
2a70c     B8 F4 BF FD | 	call	#__system___float_cmp
2a710     00 FA 55 F2 | 	cmps	result1, #0 wc
2a714     00 E0 3F CF 
2a718     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
2a71c     38 00 90 CD |  if_b	jmp	#LR__3811
2a720     13 13 02 F6 | 	mov	arg01, local01
2a724     00 14 06 F6 | 	mov	arg02, #0
2a728     01 16 06 F6 | 	mov	arg03, #1
2a72c     98 F4 BF FD | 	call	#__system___float_cmp
2a730     00 FA 0D F2 | 	cmp	result1, #0 wz
2a734     00 FA 05 A6 |  if_e	mov	result1, #0
2a738     1C 00 90 AD |  if_e	jmp	#LR__3811
2a73c     13 13 02 F6 | 	mov	arg01, local01
2a740     20 FE BF FD | 	call	#__system____builtin_log2f
2a744     FD 12 02 F6 | 	mov	arg01, result1
2a748     14 15 02 F6 | 	mov	arg02, local02
2a74c     44 F0 BF FD | 	call	#__system___float_mul
2a750     FD 12 02 F6 | 	mov	arg01, result1
2a754     F8 FC BF FD | 	call	#__system____builtin_exp2f
2a758                 | LR__3811
2a758     A7 F0 03 F6 | 	mov	ptra, fp
2a75c     B2 00 A0 FD | 	call	#popregs_
2a760                 | __system____builtin_powf_ret
2a760     2D 00 64 FD | 	ret
2a764                 | 
2a764                 | __system____builtin_logbase
2a764     02 4A 05 F6 | 	mov	COUNT_, #2
2a768     A8 00 A0 FD | 	call	#pushregs_
2a76c     09 27 02 F6 | 	mov	local01, arg01
2a770     0A 13 02 F6 | 	mov	arg01, arg02
2a774     EC FD BF FD | 	call	#__system____builtin_log2f
2a778     FD 28 02 F6 | 	mov	local02, result1
2a77c     13 13 02 F6 | 	mov	arg01, local01
2a780     E0 FD BF FD | 	call	#__system____builtin_log2f
2a784     FD 14 02 F6 | 	mov	arg02, result1
2a788     14 13 02 F6 | 	mov	arg01, local02
2a78c     08 F2 BF FD | 	call	#__system___float_div
2a790     A7 F0 03 F6 | 	mov	ptra, fp
2a794     B2 00 A0 FD | 	call	#popregs_
2a798                 | __system____builtin_logbase_ret
2a798     2D 00 64 FD | 	ret
2a79c                 | 
2a79c                 | __system___float_pow_n
2a79c     05 4A 05 F6 | 	mov	COUNT_, #5
2a7a0     A8 00 A0 FD | 	call	#pushregs_
2a7a4     09 27 02 F6 | 	mov	local01, arg01
2a7a8     0A 29 02 F6 | 	mov	local02, arg02
2a7ac     0B 2B 02 F6 | 	mov	local03, arg03
2a7b0     00 2A 56 F2 | 	cmps	local03, #0 wc
2a7b4     18 00 90 3D |  if_ae	jmp	#LR__3820
2a7b8     01 2C 06 F6 | 	mov	local04, #1
2a7bc     15 2B 62 F6 | 	neg	local03, local03
2a7c0     00 2A 56 F2 | 	cmps	local03, #0 wc
2a7c4     00 FA 05 C6 |  if_b	mov	result1, #0
2a7c8     94 00 90 CD |  if_b	jmp	#LR__3828
2a7cc     04 00 90 FD | 	jmp	#LR__3821
2a7d0                 | LR__3820
2a7d0     00 2C 06 F6 | 	mov	local04, #0
2a7d4                 | LR__3821
2a7d4     00 C0 1F FF 
2a7d8     00 2E 06 F6 | 	mov	local05, ##1065353216
2a7dc                 | LR__3822
2a7dc     01 2A 56 F2 | 	cmps	local03, #1 wc
2a7e0     30 00 90 CD |  if_b	jmp	#LR__3824
2a7e4     01 2A CE F7 | 	test	local03, #1 wz
2a7e8     10 00 90 AD |  if_e	jmp	#LR__3823
2a7ec     17 13 02 F6 | 	mov	arg01, local05
2a7f0     14 15 02 F6 | 	mov	arg02, local02
2a7f4     9C EF BF FD | 	call	#__system___float_mul
2a7f8     FD 2E 02 F6 | 	mov	local05, result1
2a7fc                 | LR__3823
2a7fc     01 2A C6 F0 | 	sar	local03, #1
2a800     14 13 02 F6 | 	mov	arg01, local02
2a804     14 15 02 F6 | 	mov	arg02, local02
2a808     88 EF BF FD | 	call	#__system___float_mul
2a80c     FD 28 02 F6 | 	mov	local02, result1
2a810     C8 FF 9F FD | 	jmp	#LR__3822
2a814                 | LR__3824
2a814     00 2C 0E F2 | 	cmp	local04, #0 wz
2a818     14 00 90 AD |  if_e	jmp	#LR__3825
2a81c     13 13 02 F6 | 	mov	arg01, local01
2a820     17 15 02 F6 | 	mov	arg02, local05
2a824     70 F1 BF FD | 	call	#__system___float_div
2a828     FD 2E 02 F6 | 	mov	local05, result1
2a82c     2C 00 90 FD | 	jmp	#LR__3827
2a830                 | LR__3825
2a830     13 13 02 F6 | 	mov	arg01, local01
2a834     00 C0 1F FF 
2a838     00 14 06 F6 | 	mov	arg02, ##1065353216
2a83c     01 16 06 F6 | 	mov	arg03, #1
2a840     84 F3 BF FD | 	call	#__system___float_cmp
2a844     00 FA 0D F2 | 	cmp	result1, #0 wz
2a848     10 00 90 AD |  if_e	jmp	#LR__3826
2a84c     13 13 02 F6 | 	mov	arg01, local01
2a850     17 15 02 F6 | 	mov	arg02, local05
2a854     3C EF BF FD | 	call	#__system___float_mul
2a858     FD 2E 02 F6 | 	mov	local05, result1
2a85c                 | LR__3826
2a85c                 | LR__3827
2a85c     17 FB 01 F6 | 	mov	result1, local05
2a860                 | LR__3828
2a860     A7 F0 03 F6 | 	mov	ptra, fp
2a864     B2 00 A0 FD | 	call	#popregs_
2a868                 | __system___float_pow_n_ret
2a868     2D 00 64 FD | 	ret
2a86c                 | 
2a86c                 | __system___gc_ptrs
2a86c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
2a870     00 03 02 F6 | 	mov	_var02, _var01
2a874     BB 00 00 FF 
2a878     F8 02 06 F1 | 	add	_var02, ##95992
2a87c     00 FD 09 FB | 	rdlong	result2, _var01 wz
2a880     74 00 90 5D |  if_ne	jmp	#LR__3830
2a884     01 FD 01 F6 | 	mov	result2, _var02
2a888     00 FD 81 F1 | 	sub	result2, _var01
2a88c     00 03 58 FC | 	wrword	#1, _var01
2a890     00 FB 01 F6 | 	mov	result1, _var01
2a894     02 FA 05 F1 | 	add	result1, #2
2a898     36 00 80 FF 
2a89c     FD 20 59 FC | 	wrword	##27792, result1
2a8a0     00 FB 01 F6 | 	mov	result1, _var01
2a8a4     04 FA 05 F1 | 	add	result1, #4
2a8a8     FD 00 58 FC | 	wrword	#0, result1
2a8ac     00 FB 01 F6 | 	mov	result1, _var01
2a8b0     06 FA 05 F1 | 	add	result1, #6
2a8b4     FD 02 58 FC | 	wrword	#1, result1
2a8b8     10 00 06 F1 | 	add	_var01, #16
2a8bc     FE FC 51 F6 | 	abs	result2, result2 wc
2a8c0     04 FC 45 F0 | 	shr	result2, #4
2a8c4     FE FC 81 F6 | 	negc	result2, result2
2a8c8     00 FD 51 FC | 	wrword	result2, _var01
2a8cc     00 FD 01 F6 | 	mov	result2, _var01
2a8d0     02 FC 05 F1 | 	add	result2, #2
2a8d4     36 00 80 FF 
2a8d8     FE 1E 59 FC | 	wrword	##27791, result2
2a8dc     00 FD 01 F6 | 	mov	result2, _var01
2a8e0     04 FC 05 F1 | 	add	result2, #4
2a8e4     FE 00 58 FC | 	wrword	#0, result2
2a8e8     00 FD 01 F6 | 	mov	result2, _var01
2a8ec     06 FC 05 F1 | 	add	result2, #6
2a8f0     FE 00 58 FC | 	wrword	#0, result2
2a8f4     10 00 86 F1 | 	sub	_var01, #16
2a8f8                 | LR__3830
2a8f8     00 FB 01 F6 | 	mov	result1, _var01
2a8fc     01 FD 01 F6 | 	mov	result2, _var02
2a900                 | __system___gc_ptrs_ret
2a900     2D 00 64 FD | 	ret
2a904                 | 
2a904                 | __system___gc_tryalloc
2a904     0B 4A 05 F6 | 	mov	COUNT_, #11
2a908     A8 00 A0 FD | 	call	#pushregs_
2a90c     09 27 02 F6 | 	mov	local01, arg01
2a910     0A 29 02 F6 | 	mov	local02, arg02
2a914     54 FF BF FD | 	call	#__system___gc_ptrs
2a918     FD 2A 02 F6 | 	mov	local03, result1
2a91c     FE 2C 02 F6 | 	mov	local04, result2
2a920     15 2F 02 F6 | 	mov	local05, local03
2a924     00 30 06 F6 | 	mov	local06, #0
2a928     97 1E 48 FB | 	callpa	#(@LR__3841-@LR__3840)>>2,fcache_load_ptr_
2a92c                 | LR__3840
2a92c     17 33 02 F6 | 	mov	local07, local05
2a930     06 2E 06 F1 | 	add	local05, #6
2a934     17 15 EA FA | 	rdword	arg02, local05 wz
2a938     15 13 02 F6 | 	mov	arg01, local03
2a93c     00 FA 05 A6 |  if_e	mov	result1, #0
2a940     04 14 66 50 |  if_ne	shl	arg02, #4
2a944     0A 13 02 51 |  if_ne	add	arg01, arg02
2a948     09 FB 01 56 |  if_ne	mov	result1, arg01
2a94c     FD 2E 0A F6 | 	mov	local05, result1 wz
2a950     17 31 E2 5A |  if_ne	rdword	local06, local05
2a954     00 2E 0E F2 | 	cmp	local05, #0 wz
2a958     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
2a95c     08 00 90 1D |  if_a	jmp	#LR__3842
2a960     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
2a964     C4 FF 9F 1D |  if_a	jmp	#LR__3840
2a968                 | LR__3841
2a968                 | LR__3842
2a968     00 2E 0E F2 | 	cmp	local05, #0 wz
2a96c     17 FB 01 A6 |  if_e	mov	result1, local05
2a970     3C 01 90 AD |  if_e	jmp	#LR__3845
2a974     17 FD 01 F6 | 	mov	result2, local05
2a978     06 FC 05 F1 | 	add	result2, #6
2a97c     FE 34 E2 FA | 	rdword	local08, result2
2a980     18 27 52 F2 | 	cmps	local01, local06 wc
2a984     C0 00 90 3D |  if_ae	jmp	#LR__3844
2a988     17 27 52 FC | 	wrword	local01, local05
2a98c     17 13 02 F6 | 	mov	arg01, local05
2a990     13 35 02 F6 | 	mov	local08, local01
2a994     04 34 66 F0 | 	shl	local08, #4
2a998     1A 13 02 F1 | 	add	arg01, local08
2a99c     13 31 82 F1 | 	sub	local06, local01
2a9a0     09 31 52 FC | 	wrword	local06, arg01
2a9a4     09 35 02 F6 | 	mov	local08, arg01
2a9a8     02 34 06 F1 | 	add	local08, #2
2a9ac     36 00 80 FF 
2a9b0     1A 1F 59 FC | 	wrword	##27791, local08
2a9b4     17 15 0A F6 | 	mov	arg02, local05 wz
2a9b8     00 FA 05 A6 |  if_e	mov	result1, #0
2a9bc     15 15 82 51 |  if_ne	sub	arg02, local03
2a9c0     04 14 46 50 |  if_ne	shr	arg02, #4
2a9c4     0A FB 01 56 |  if_ne	mov	result1, arg02
2a9c8     09 35 02 F6 | 	mov	local08, arg01
2a9cc     04 34 06 F1 | 	add	local08, #4
2a9d0     1A FB 51 FC | 	wrword	result1, local08
2a9d4     17 35 02 F6 | 	mov	local08, local05
2a9d8     06 34 06 F1 | 	add	local08, #6
2a9dc     09 15 02 F6 | 	mov	arg02, arg01
2a9e0     1A 35 E2 FA | 	rdword	local08, local08
2a9e4     06 14 06 F1 | 	add	arg02, #6
2a9e8     0A 35 52 FC | 	wrword	local08, arg02
2a9ec     09 37 02 F6 | 	mov	local09, arg01
2a9f0     1B 15 0A F6 | 	mov	arg02, local09 wz
2a9f4     00 FA 05 A6 |  if_e	mov	result1, #0
2a9f8     15 15 82 51 |  if_ne	sub	arg02, local03
2a9fc     04 14 46 50 |  if_ne	shr	arg02, #4
2aa00     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa04     FD 34 02 F6 | 	mov	local08, result1
2aa08     09 39 EA FA | 	rdword	local10, arg01 wz
2aa0c     00 FA 05 A6 |  if_e	mov	result1, #0
2aa10     04 38 66 50 |  if_ne	shl	local10, #4
2aa14     1C 13 02 51 |  if_ne	add	arg01, local10
2aa18     09 FB 01 56 |  if_ne	mov	result1, arg01
2aa1c     FD 3A 0A F6 | 	mov	local11, result1 wz
2aa20     24 00 90 AD |  if_e	jmp	#LR__3843
2aa24     16 3B 52 F2 | 	cmps	local11, local04 wc
2aa28     1C 00 90 3D |  if_ae	jmp	#LR__3843
2aa2c     1B 15 0A F6 | 	mov	arg02, local09 wz
2aa30     00 FA 05 A6 |  if_e	mov	result1, #0
2aa34     15 15 82 51 |  if_ne	sub	arg02, local03
2aa38     04 14 46 50 |  if_ne	shr	arg02, #4
2aa3c     0A FB 01 56 |  if_ne	mov	result1, arg02
2aa40     04 3A 06 F1 | 	add	local11, #4
2aa44     1D FB 51 FC | 	wrword	result1, local11
2aa48                 | LR__3843
2aa48                 | LR__3844
2aa48     06 32 06 F1 | 	add	local07, #6
2aa4c     19 35 52 FC | 	wrword	local08, local07
2aa50     36 00 00 FF 
2aa54     80 36 06 F6 | 	mov	local09, ##27776
2aa58     14 37 42 F5 | 	or	local09, local02
2aa5c     00 FA 05 F6 | 	mov	result1, #0
2aa60     01 FA 61 FD | 	cogid	result1
2aa64     FD 36 42 F5 | 	or	local09, result1
2aa68     17 3B 02 F6 | 	mov	local11, local05
2aa6c     02 3A 06 F1 | 	add	local11, #2
2aa70     1D 37 52 FC | 	wrword	local09, local11
2aa74     15 37 02 F6 | 	mov	local09, local03
2aa78     08 36 06 F1 | 	add	local09, #8
2aa7c     17 3B 02 F6 | 	mov	local11, local05
2aa80     1B 37 E2 FA | 	rdword	local09, local09
2aa84     06 3A 06 F1 | 	add	local11, #6
2aa88     1D 37 52 FC | 	wrword	local09, local11
2aa8c     17 15 0A F6 | 	mov	arg02, local05 wz
2aa90     00 FA 05 A6 |  if_e	mov	result1, #0
2aa94     15 15 82 51 |  if_ne	sub	arg02, local03
2aa98     04 14 46 50 |  if_ne	shr	arg02, #4
2aa9c     0A FB 01 56 |  if_ne	mov	result1, arg02
2aaa0     08 2A 06 F1 | 	add	local03, #8
2aaa4     15 FB 51 FC | 	wrword	result1, local03
2aaa8     08 2E 06 F1 | 	add	local05, #8
2aaac     17 FB 01 F6 | 	mov	result1, local05
2aab0                 | LR__3845
2aab0     A7 F0 03 F6 | 	mov	ptra, fp
2aab4     B2 00 A0 FD | 	call	#popregs_
2aab8                 | __system___gc_tryalloc_ret
2aab8     2D 00 64 FD | 	ret
2aabc                 | 
2aabc                 | __system___gc_alloc_managed
2aabc     01 4A 05 F6 | 	mov	COUNT_, #1
2aac0     A8 00 A0 FD | 	call	#pushregs_
2aac4     09 27 02 F6 | 	mov	local01, arg01
2aac8     00 14 06 F6 | 	mov	arg02, #0
2aacc     1C 00 B0 FD | 	call	#__system___gc_doalloc
2aad0     FD 14 0A F6 | 	mov	arg02, result1 wz
2aad4     01 26 56 A2 |  if_e	cmps	local01, #1 wc
2aad8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
2aadc     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
2aae0     A7 F0 03 F6 | 	mov	ptra, fp
2aae4     B2 00 A0 FD | 	call	#popregs_
2aae8                 | __system___gc_alloc_managed_ret
2aae8     2D 00 64 FD | 	ret
2aaec                 | 
2aaec                 | __system___gc_doalloc
2aaec     06 4A 05 F6 | 	mov	COUNT_, #6
2aaf0     A8 00 A0 FD | 	call	#pushregs_
2aaf4     09 27 0A F6 | 	mov	local01, arg01 wz
2aaf8     0A 29 02 F6 | 	mov	local02, arg02
2aafc     00 FA 05 A6 |  if_e	mov	result1, #0
2ab00     8C 00 90 AD |  if_e	jmp	#LR__3857
2ab04     17 26 06 F1 | 	add	local01, #23
2ab08     0F 26 26 F5 | 	andn	local01, #15
2ab0c     04 26 46 F0 | 	shr	local01, #4
2ab10     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ab14     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ab18     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ab1c     F8 BD BF FD | 	call	#__system___lockmem
2ab20     13 13 02 F6 | 	mov	arg01, local01
2ab24     14 15 02 F6 | 	mov	arg02, local02
2ab28     D8 FD BF FD | 	call	#__system___gc_tryalloc
2ab2c     FD 2A 0A F6 | 	mov	local03, result1 wz
2ab30     14 00 90 5D |  if_ne	jmp	#LR__3850
2ab34     70 03 B0 FD | 	call	#__system___gc_docollect
2ab38     13 13 02 F6 | 	mov	arg01, local01
2ab3c     14 15 02 F6 | 	mov	arg02, local02
2ab40     C0 FD BF FD | 	call	#__system___gc_tryalloc
2ab44     FD 2A 02 F6 | 	mov	local03, result1
2ab48                 | LR__3850
2ab48     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ab4c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ab50     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ab54     09 01 68 FC | 	wrlong	#0, arg01
2ab58     00 2A 0E F2 | 	cmp	local03, #0 wz
2ab5c     2C 00 90 AD |  if_e	jmp	#LR__3856
2ab60     04 26 66 F0 | 	shl	local01, #4
2ab64     08 26 86 F1 | 	sub	local01, #8
2ab68     13 2D 52 F6 | 	abs	local04, local01 wc
2ab6c     02 2C 46 F0 | 	shr	local04, #2
2ab70     16 2F 8A F6 | 	negc	local05, local04 wz
2ab74     15 31 02 F6 | 	mov	local06, local03
2ab78     10 00 90 AD |  if_e	jmp	#LR__3855
2ab7c     97 06 48 FB | 	callpa	#(@LR__3853-@LR__3851)>>2,fcache_load_ptr_
2ab80                 | LR__3851
2ab80     17 05 D8 FC | 	rep	@LR__3854, local05
2ab84                 | LR__3852
2ab84     18 01 68 FC | 	wrlong	#0, local06
2ab88     04 30 06 F1 | 	add	local06, #4
2ab8c                 | LR__3853
2ab8c                 | LR__3854
2ab8c                 | LR__3855
2ab8c                 | LR__3856
2ab8c     15 FB 01 F6 | 	mov	result1, local03
2ab90                 | LR__3857
2ab90     A7 F0 03 F6 | 	mov	ptra, fp
2ab94     B2 00 A0 FD | 	call	#popregs_
2ab98                 | __system___gc_doalloc_ret
2ab98     2D 00 64 FD | 	ret
2ab9c                 | 
2ab9c                 | __system___gc_isvalidptr
2ab9c     F8 16 06 F4 | 	bitl	arg03, #248
2aba0     08 16 86 F1 | 	sub	arg03, #8
2aba4     09 17 52 F2 | 	cmps	arg03, arg01 wc
2aba8     08 00 90 CD |  if_b	jmp	#LR__3860
2abac     0A 17 52 F2 | 	cmps	arg03, arg02 wc
2abb0     08 00 90 CD |  if_b	jmp	#LR__3861
2abb4                 | LR__3860
2abb4     00 FA 05 F6 | 	mov	result1, #0
2abb8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
2abbc                 | LR__3861
2abbc     0B 01 02 F6 | 	mov	_var01, arg03
2abc0     09 01 62 F5 | 	xor	_var01, arg01
2abc4     0F 00 CE F7 | 	test	_var01, #15 wz
2abc8     00 FA 05 56 |  if_ne	mov	result1, #0
2abcc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
2abd0     0B 01 02 F6 | 	mov	_var01, arg03
2abd4     02 00 06 F1 | 	add	_var01, #2
2abd8     00 01 E2 FA | 	rdword	_var01, _var01
2abdc     7F 00 00 FF 
2abe0     C0 01 06 F5 | 	and	_var01, ##65472
2abe4     36 00 00 FF 
2abe8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
2abec     00 FA 05 56 |  if_ne	mov	result1, #0
2abf0     0B FB 01 A6 |  if_e	mov	result1, arg03
2abf4                 | __system___gc_isvalidptr_ret
2abf4     2D 00 64 FD | 	ret
2abf8                 | 
2abf8                 | __system___gc_free
2abf8     09 17 02 F6 | 	mov	arg03, arg01
2abfc     6C FC BF FD | 	call	#__system___gc_ptrs
2ac00     FD 12 02 F6 | 	mov	arg01, result1
2ac04     FE 14 02 F6 | 	mov	arg02, result2
2ac08     90 FF BF FD | 	call	#__system___gc_isvalidptr
2ac0c     FD 14 0A F6 | 	mov	arg02, result1 wz
2ac10     28 00 90 AD |  if_e	jmp	#LR__3870
2ac14     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ac18     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ac1c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac20     F4 BC BF FD | 	call	#__system___lockmem
2ac24     0A 13 02 F6 | 	mov	arg01, arg02
2ac28     14 00 B0 FD | 	call	#__system___gc_dofree
2ac2c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2ac30     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2ac34     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2ac38     09 01 68 FC | 	wrlong	#0, arg01
2ac3c                 | LR__3870
2ac3c                 | __system___gc_free_ret
2ac3c     2D 00 64 FD | 	ret
2ac40                 | 
2ac40                 | __system___gc_dofree
2ac40     06 4A 05 F6 | 	mov	COUNT_, #6
2ac44     A8 00 A0 FD | 	call	#pushregs_
2ac48     09 27 02 F6 | 	mov	local01, arg01
2ac4c     1C FC BF FD | 	call	#__system___gc_ptrs
2ac50     FD 28 02 F6 | 	mov	local02, result1
2ac54     FE 2A 02 F6 | 	mov	local03, result2
2ac58     13 15 02 F6 | 	mov	arg02, local01
2ac5c     02 14 06 F1 | 	add	arg02, #2
2ac60     36 00 80 FF 
2ac64     0A 1F 59 FC | 	wrword	##27791, arg02
2ac68     13 2D 02 F6 | 	mov	local04, local01
2ac6c     13 13 02 F6 | 	mov	arg01, local01
2ac70     09 2F EA FA | 	rdword	local05, arg01 wz
2ac74     00 FA 05 A6 |  if_e	mov	result1, #0
2ac78     04 2E 66 50 |  if_ne	shl	local05, #4
2ac7c     17 13 02 51 |  if_ne	add	arg01, local05
2ac80     09 FB 01 56 |  if_ne	mov	result1, arg01
2ac84     FD 30 02 F6 | 	mov	local06, result1
2ac88     97 24 48 FB | 	callpa	#(@LR__3881-@LR__3880)>>2,fcache_load_ptr_
2ac8c                 | LR__3880
2ac8c     04 2C 06 F1 | 	add	local04, #4
2ac90     16 15 EA FA | 	rdword	arg02, local04 wz
2ac94     14 13 02 F6 | 	mov	arg01, local02
2ac98     00 FA 05 A6 |  if_e	mov	result1, #0
2ac9c     04 14 66 50 |  if_ne	shl	arg02, #4
2aca0     0A 13 02 51 |  if_ne	add	arg01, arg02
2aca4     09 FB 01 56 |  if_ne	mov	result1, arg01
2aca8     FD 2C 0A F6 | 	mov	local04, result1 wz
2acac     24 00 90 AD |  if_e	jmp	#LR__3882
2acb0     16 13 02 F6 | 	mov	arg01, local04
2acb4     00 FA 05 F6 | 	mov	result1, #0
2acb8     02 12 06 F1 | 	add	arg01, #2
2acbc     09 13 E2 FA | 	rdword	arg01, arg01
2acc0     36 00 00 FF 
2acc4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2acc8     01 FA 65 A6 |  if_e	neg	result1, #1
2accc     00 FA 0D F2 | 	cmp	result1, #0 wz
2acd0     B8 FF 9F AD |  if_e	jmp	#LR__3880
2acd4                 | LR__3881
2acd4                 | LR__3882
2acd4     00 2C 0E F2 | 	cmp	local04, #0 wz
2acd8     14 2D 02 A6 |  if_e	mov	local04, local02
2acdc     16 15 02 F6 | 	mov	arg02, local04
2ace0     06 14 06 F1 | 	add	arg02, #6
2ace4     13 13 02 F6 | 	mov	arg01, local01
2ace8     0A 15 E2 FA | 	rdword	arg02, arg02
2acec     06 12 06 F1 | 	add	arg01, #6
2acf0     09 15 52 FC | 	wrword	arg02, arg01
2acf4     13 15 0A F6 | 	mov	arg02, local01 wz
2acf8     00 FA 05 A6 |  if_e	mov	result1, #0
2acfc     14 15 82 51 |  if_ne	sub	arg02, local02
2ad00     04 14 46 50 |  if_ne	shr	arg02, #4
2ad04     0A FB 01 56 |  if_ne	mov	result1, arg02
2ad08     16 15 02 F6 | 	mov	arg02, local04
2ad0c     06 14 06 F1 | 	add	arg02, #6
2ad10     0A FB 51 FC | 	wrword	result1, arg02
2ad14     14 2D 0A F2 | 	cmp	local04, local02 wz
2ad18     A4 00 90 AD |  if_e	jmp	#LR__3885
2ad1c     16 13 02 F6 | 	mov	arg01, local04
2ad20     09 2F EA FA | 	rdword	local05, arg01 wz
2ad24     00 FA 05 A6 |  if_e	mov	result1, #0
2ad28     04 2E 66 50 |  if_ne	shl	local05, #4
2ad2c     17 13 02 51 |  if_ne	add	arg01, local05
2ad30     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad34     13 FB 09 F2 | 	cmp	result1, local01 wz
2ad38     84 00 90 5D |  if_ne	jmp	#LR__3884
2ad3c     16 31 E2 FA | 	rdword	local06, local04
2ad40     13 15 E2 FA | 	rdword	arg02, local01
2ad44     0A 31 02 F1 | 	add	local06, arg02
2ad48     16 31 52 FC | 	wrword	local06, local04
2ad4c     13 31 02 F6 | 	mov	local06, local01
2ad50     02 30 06 F1 | 	add	local06, #2
2ad54     18 01 58 FC | 	wrword	#0, local06
2ad58     13 13 02 F6 | 	mov	arg01, local01
2ad5c     09 2F EA FA | 	rdword	local05, arg01 wz
2ad60     00 FA 05 A6 |  if_e	mov	result1, #0
2ad64     04 2E 66 50 |  if_ne	shl	local05, #4
2ad68     17 13 02 51 |  if_ne	add	arg01, local05
2ad6c     09 FB 01 56 |  if_ne	mov	result1, arg01
2ad70     FD 30 02 F6 | 	mov	local06, result1
2ad74     15 31 52 F2 | 	cmps	local06, local03 wc
2ad78     20 00 90 3D |  if_ae	jmp	#LR__3883
2ad7c     16 15 0A F6 | 	mov	arg02, local04 wz
2ad80     00 FA 05 A6 |  if_e	mov	result1, #0
2ad84     14 15 82 51 |  if_ne	sub	arg02, local02
2ad88     04 14 46 50 |  if_ne	shr	arg02, #4
2ad8c     0A FB 01 56 |  if_ne	mov	result1, arg02
2ad90     18 15 02 F6 | 	mov	arg02, local06
2ad94     04 14 06 F1 | 	add	arg02, #4
2ad98     0A FB 51 FC | 	wrword	result1, arg02
2ad9c                 | LR__3883
2ad9c     13 15 02 F6 | 	mov	arg02, local01
2ada0     06 14 06 F1 | 	add	arg02, #6
2ada4     16 FD 01 F6 | 	mov	result2, local04
2ada8     0A 15 E2 FA | 	rdword	arg02, arg02
2adac     06 FC 05 F1 | 	add	result2, #6
2adb0     FE 14 52 FC | 	wrword	arg02, result2
2adb4     06 26 06 F1 | 	add	local01, #6
2adb8     13 01 58 FC | 	wrword	#0, local01
2adbc     16 27 02 F6 | 	mov	local01, local04
2adc0                 | LR__3884
2adc0                 | LR__3885
2adc0     13 13 02 F6 | 	mov	arg01, local01
2adc4     09 2F EA FA | 	rdword	local05, arg01 wz
2adc8     00 FA 05 A6 |  if_e	mov	result1, #0
2adcc     04 2E 66 50 |  if_ne	shl	local05, #4
2add0     17 13 02 51 |  if_ne	add	arg01, local05
2add4     09 FB 01 56 |  if_ne	mov	result1, arg01
2add8     FD 14 0A F6 | 	mov	arg02, result1 wz
2addc     B8 00 90 AD |  if_e	jmp	#LR__3887
2ade0     15 15 52 F2 | 	cmps	arg02, local03 wc
2ade4     B0 00 90 3D |  if_ae	jmp	#LR__3887
2ade8     0A 13 02 F6 | 	mov	arg01, arg02
2adec     00 FA 05 F6 | 	mov	result1, #0
2adf0     02 12 06 F1 | 	add	arg01, #2
2adf4     09 13 E2 FA | 	rdword	arg01, arg01
2adf8     36 00 00 FF 
2adfc     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2ae00     01 FA 65 A6 |  if_e	neg	result1, #1
2ae04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ae08     8C 00 90 AD |  if_e	jmp	#LR__3887
2ae0c     13 2D 02 F6 | 	mov	local04, local01
2ae10     16 31 E2 FA | 	rdword	local06, local04
2ae14     0A 13 02 F6 | 	mov	arg01, arg02
2ae18     09 27 E2 FA | 	rdword	local01, arg01
2ae1c     13 31 02 F1 | 	add	local06, local01
2ae20     16 31 52 FC | 	wrword	local06, local04
2ae24     09 31 02 F6 | 	mov	local06, arg01
2ae28     06 30 06 F1 | 	add	local06, #6
2ae2c     16 27 02 F6 | 	mov	local01, local04
2ae30     18 31 E2 FA | 	rdword	local06, local06
2ae34     06 26 06 F1 | 	add	local01, #6
2ae38     13 31 52 FC | 	wrword	local06, local01
2ae3c     09 31 02 F6 | 	mov	local06, arg01
2ae40     02 30 06 F1 | 	add	local06, #2
2ae44     18 55 59 FC | 	wrword	#170, local06
2ae48     09 31 02 F6 | 	mov	local06, arg01
2ae4c     06 30 06 F1 | 	add	local06, #6
2ae50     18 01 58 FC | 	wrword	#0, local06
2ae54     09 2F EA FA | 	rdword	local05, arg01 wz
2ae58     00 FA 05 A6 |  if_e	mov	result1, #0
2ae5c     04 2E 66 50 |  if_ne	shl	local05, #4
2ae60     17 13 02 51 |  if_ne	add	arg01, local05
2ae64     09 FB 01 56 |  if_ne	mov	result1, arg01
2ae68     FD 30 0A F6 | 	mov	local06, result1 wz
2ae6c     28 00 90 AD |  if_e	jmp	#LR__3886
2ae70     15 31 52 F2 | 	cmps	local06, local03 wc
2ae74     20 00 90 3D |  if_ae	jmp	#LR__3886
2ae78     16 15 0A F6 | 	mov	arg02, local04 wz
2ae7c     00 FA 05 A6 |  if_e	mov	result1, #0
2ae80     14 15 82 51 |  if_ne	sub	arg02, local02
2ae84     04 14 46 50 |  if_ne	shr	arg02, #4
2ae88     0A FB 01 56 |  if_ne	mov	result1, arg02
2ae8c     18 2D 02 F6 | 	mov	local04, local06
2ae90     04 2C 06 F1 | 	add	local04, #4
2ae94     16 FB 51 FC | 	wrword	result1, local04
2ae98                 | LR__3886
2ae98                 | LR__3887
2ae98     18 FB 01 F6 | 	mov	result1, local06
2ae9c     A7 F0 03 F6 | 	mov	ptra, fp
2aea0     B2 00 A0 FD | 	call	#popregs_
2aea4                 | __system___gc_dofree_ret
2aea4     2D 00 64 FD | 	ret
2aea8                 | 
2aea8                 | __system___gc_docollect
2aea8     05 4A 05 F6 | 	mov	COUNT_, #5
2aeac     A8 00 A0 FD | 	call	#pushregs_
2aeb0     B8 F9 BF FD | 	call	#__system___gc_ptrs
2aeb4     FE 26 02 F6 | 	mov	local01, result2
2aeb8     FD 28 02 F6 | 	mov	local02, result1
2aebc     14 13 02 F6 | 	mov	arg01, local02
2aec0     09 2B EA FA | 	rdword	local03, arg01 wz
2aec4     00 FA 05 A6 |  if_e	mov	result1, #0
2aec8     04 2A 66 50 |  if_ne	shl	local03, #4
2aecc     15 13 02 51 |  if_ne	add	arg01, local03
2aed0     09 FB 01 56 |  if_ne	mov	result1, arg01
2aed4     FD 2C 0A F6 | 	mov	local04, result1 wz
2aed8     00 FA 05 F6 | 	mov	result1, #0
2aedc     01 FA 61 FD | 	cogid	result1
2aee0     FD 2E 02 F6 | 	mov	local05, result1
2aee4     48 00 90 AD |  if_e	jmp	#LR__3892
2aee8     97 22 48 FB | 	callpa	#(@LR__3891-@LR__3890)>>2,fcache_load_ptr_
2aeec                 | LR__3890
2aeec     13 2D 52 F2 | 	cmps	local04, local01 wc
2aef0     3C 00 90 3D |  if_ae	jmp	#LR__3892
2aef4     16 15 02 F6 | 	mov	arg02, local04
2aef8     02 14 06 F1 | 	add	arg02, #2
2aefc     0A 15 E2 FA | 	rdword	arg02, arg02
2af00     20 14 26 F5 | 	andn	arg02, #32
2af04     16 13 02 F6 | 	mov	arg01, local04
2af08     02 12 06 F1 | 	add	arg01, #2
2af0c     09 15 52 FC | 	wrword	arg02, arg01
2af10     16 13 02 F6 | 	mov	arg01, local04
2af14     09 2B EA FA | 	rdword	local03, arg01 wz
2af18     00 FA 05 A6 |  if_e	mov	result1, #0
2af1c     04 2A 66 50 |  if_ne	shl	local03, #4
2af20     15 13 02 51 |  if_ne	add	arg01, local03
2af24     09 FB 01 56 |  if_ne	mov	result1, arg01
2af28     FD 2C 0A F6 | 	mov	local04, result1 wz
2af2c     BC FF 9F 5D |  if_ne	jmp	#LR__3890
2af30                 | LR__3891
2af30                 | LR__3892
2af30     00 2A 06 F6 | 	mov	local03, #0
2af34     00 12 06 F6 | 	mov	arg01, #0
2af38     B4 B9 BF FD | 	call	#__system____topofstack
2af3c     FD 14 02 F6 | 	mov	arg02, result1
2af40     15 13 02 F6 | 	mov	arg01, local03
2af44     90 00 B0 FD | 	call	#__system___gc_markhub
2af48     1C 01 B0 FD | 	call	#__system___gc_markcog
2af4c     14 13 02 F6 | 	mov	arg01, local02
2af50     09 2B EA FA | 	rdword	local03, arg01 wz
2af54     00 FA 05 A6 |  if_e	mov	result1, #0
2af58     04 2A 66 50 |  if_ne	shl	local03, #4
2af5c     15 13 02 51 |  if_ne	add	arg01, local03
2af60     09 FB 01 56 |  if_ne	mov	result1, arg01
2af64     FD 28 0A F6 | 	mov	local02, result1 wz
2af68     60 00 90 AD |  if_e	jmp	#LR__3896
2af6c                 | LR__3893
2af6c     14 2D 02 F6 | 	mov	local04, local02
2af70     16 13 02 F6 | 	mov	arg01, local04
2af74     09 2B EA FA | 	rdword	local03, arg01 wz
2af78     00 FA 05 A6 |  if_e	mov	result1, #0
2af7c     04 2A 66 50 |  if_ne	shl	local03, #4
2af80     15 13 02 51 |  if_ne	add	arg01, local03
2af84     09 FB 01 56 |  if_ne	mov	result1, arg01
2af88     FD 28 02 F6 | 	mov	local02, result1
2af8c     16 15 02 F6 | 	mov	arg02, local04
2af90     02 14 06 F1 | 	add	arg02, #2
2af94     0A 15 E2 FA | 	rdword	arg02, arg02
2af98     20 14 CE F7 | 	test	arg02, #32 wz
2af9c     10 14 CE A7 |  if_e	test	arg02, #16 wz
2afa0     1C 00 90 5D |  if_ne	jmp	#LR__3895
2afa4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
2afa8     17 15 0A F2 | 	cmp	arg02, local05 wz
2afac     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
2afb0     0C 00 90 5D |  if_ne	jmp	#LR__3894
2afb4     16 13 02 F6 | 	mov	arg01, local04
2afb8     84 FC BF FD | 	call	#__system___gc_dofree
2afbc     FD 28 02 F6 | 	mov	local02, result1
2afc0                 | LR__3894
2afc0                 | LR__3895
2afc0     00 28 0E F2 | 	cmp	local02, #0 wz
2afc4     13 29 52 52 |  if_ne	cmps	local02, local01 wc
2afc8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3893
2afcc                 | LR__3896
2afcc     A7 F0 03 F6 | 	mov	ptra, fp
2afd0     B2 00 A0 FD | 	call	#popregs_
2afd4                 | __system___gc_docollect_ret
2afd4     2D 00 64 FD | 	ret
2afd8                 | 
2afd8                 | __system___gc_markhub
2afd8     04 4A 05 F6 | 	mov	COUNT_, #4
2afdc     A8 00 A0 FD | 	call	#pushregs_
2afe0     09 27 02 F6 | 	mov	local01, arg01
2afe4     0A 29 02 F6 | 	mov	local02, arg02
2afe8     80 F8 BF FD | 	call	#__system___gc_ptrs
2afec     FD 2A 02 F6 | 	mov	local03, result1
2aff0     FE 2C 02 F6 | 	mov	local04, result2
2aff4                 | LR__3900
2aff4     14 27 52 F2 | 	cmps	local01, local02 wc
2aff8     60 00 90 3D |  if_ae	jmp	#LR__3901
2affc     13 17 02 FB | 	rdlong	arg03, local01
2b000     04 26 06 F1 | 	add	local01, #4
2b004     16 15 02 F6 | 	mov	arg02, local04
2b008     15 13 02 F6 | 	mov	arg01, local03
2b00c     8C FB BF FD | 	call	#__system___gc_isvalidptr
2b010     FD 16 0A F6 | 	mov	arg03, result1 wz
2b014     DC FF 9F AD |  if_e	jmp	#LR__3900
2b018     0B 13 02 F6 | 	mov	arg01, arg03
2b01c     00 FA 05 F6 | 	mov	result1, #0
2b020     02 12 06 F1 | 	add	arg01, #2
2b024     09 13 E2 FA | 	rdword	arg01, arg01
2b028     36 00 00 FF 
2b02c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
2b030     01 FA 65 A6 |  if_e	neg	result1, #1
2b034     00 FA 0D F2 | 	cmp	result1, #0 wz
2b038     B8 FF 9F 5D |  if_ne	jmp	#LR__3900
2b03c     0B FD 01 F6 | 	mov	result2, arg03
2b040     02 FC 05 F1 | 	add	result2, #2
2b044     FE FC E1 FA | 	rdword	result2, result2
2b048     0F FC 25 F5 | 	andn	result2, #15
2b04c     2E FC 45 F5 | 	or	result2, #46
2b050     02 16 06 F1 | 	add	arg03, #2
2b054     0B FD 51 FC | 	wrword	result2, arg03
2b058     98 FF 9F FD | 	jmp	#LR__3900
2b05c                 | LR__3901
2b05c     A7 F0 03 F6 | 	mov	ptra, fp
2b060     B2 00 A0 FD | 	call	#popregs_
2b064                 | __system___gc_markhub_ret
2b064     2D 00 64 FD | 	ret
2b068                 | 
2b068                 | __system___gc_markcog
2b068     04 4A 05 F6 | 	mov	COUNT_, #4
2b06c     A8 00 A0 FD | 	call	#pushregs_
2b070     F8 F7 BF FD | 	call	#__system___gc_ptrs
2b074     FD 26 02 F6 | 	mov	local01, result1
2b078     FE 28 02 F6 | 	mov	local02, result2
2b07c     EF 2B 06 F6 | 	mov	local03, #495
2b080                 | LR__3910
2b080                 | 	'.live	local03
2b080     00 2A 96 F9 | 	alts	local03, #0
2b084     15 2D 02 F6 | 	mov	local04, local03
2b088     13 13 02 F6 | 	mov	arg01, local01
2b08c     14 15 02 F6 | 	mov	arg02, local02
2b090     16 17 02 F6 | 	mov	arg03, local04
2b094     04 FB BF FD | 	call	#__system___gc_isvalidptr
2b098     00 FA 0D F2 | 	cmp	result1, #0 wz
2b09c     18 00 90 AD |  if_e	jmp	#LR__3911
2b0a0     FD 2C 02 F6 | 	mov	local04, result1
2b0a4     02 2C 06 F1 | 	add	local04, #2
2b0a8     16 2D E2 FA | 	rdword	local04, local04
2b0ac     20 2C 46 F5 | 	or	local04, #32
2b0b0     02 FA 05 F1 | 	add	result1, #2
2b0b4     FD 2C 52 FC | 	wrword	local04, result1
2b0b8                 | LR__3911
2b0b8     01 2A 86 F1 | 	sub	local03, #1
2b0bc     00 2A 56 F2 | 	cmps	local03, #0 wc
2b0c0     BC FF 9F 3D |  if_ae	jmp	#LR__3910
2b0c4     A7 F0 03 F6 | 	mov	ptra, fp
2b0c8     B2 00 A0 FD | 	call	#popregs_
2b0cc                 | __system___gc_markcog_ret
2b0cc     2D 00 64 FD | 	ret
2b0d0                 | 
2b0d0                 | __system__opendir
2b0d0     06 4A 05 F6 | 	mov	COUNT_, #6
2b0d4     A8 00 A0 FD | 	call	#pushregs_
2b0d8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b0dc     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
2b0e0     09 15 02 F6 | 	mov	arg02, arg01
2b0e4     13 13 02 F6 | 	mov	arg01, local01
2b0e8     00 16 06 F6 | 	mov	arg03, #0
2b0ec     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b0f0     BC BF BF FD | 	call	#__system____getvfsforfile
2b0f4     FD 28 0A F6 | 	mov	local02, result1 wz
2b0f8     10 00 90 AD |  if_e	jmp	#LR__3920
2b0fc     28 28 06 F1 | 	add	local02, #40
2b100     14 17 0A FB | 	rdlong	arg03, local02 wz
2b104     28 28 86 F1 | 	sub	local02, #40
2b108     14 00 90 5D |  if_ne	jmp	#LR__3921
2b10c                 | LR__3920
2b10c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b110     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b114     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b118     00 FA 05 F6 | 	mov	result1, #0
2b11c     90 00 90 FD | 	jmp	#LR__3923
2b120                 | LR__3921
2b120     5C 12 06 F6 | 	mov	arg01, #92
2b124     10 14 06 F6 | 	mov	arg02, #16
2b128     C0 F9 BF FD | 	call	#__system___gc_doalloc
2b12c     FD 2A 0A F6 | 	mov	local03, result1 wz
2b130     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b134     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2b138     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b13c     00 FA 05 A6 |  if_e	mov	result1, #0
2b140     6C 00 90 AD |  if_e	jmp	#LR__3923
2b144     28 28 06 F1 | 	add	local02, #40
2b148     14 2D 02 FB | 	rdlong	local04, local02
2b14c     16 2F 02 F6 | 	mov	local05, local04
2b150     28 28 86 F1 | 	sub	local02, #40
2b154     13 2E 46 F7 | 	zerox	local05, #19
2b158     14 2C 46 F0 | 	shr	local04, #20
2b15c     02 2C 66 F0 | 	shl	local04, #2
2b160     ED 2C 02 F1 | 	add	local04, __methods__
2b164     16 2D 02 FB | 	rdlong	local04, local04
2b168     15 13 02 F6 | 	mov	arg01, local03
2b16c     13 15 02 F6 | 	mov	arg02, local01
2b170     F2 30 02 F6 | 	mov	local06, objptr
2b174     17 E5 01 F6 | 	mov	objptr, local05
2b178     2D 2C 62 FD | 	call	local04
2b17c     18 E5 01 F6 | 	mov	objptr, local06
2b180     FD 16 0A F6 | 	mov	arg03, result1 wz
2b184     20 00 90 AD |  if_e	jmp	#LR__3922
2b188     00 16 4E F2 | 	cmps	arg03, #0 wz
2b18c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b190     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
2b194     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b198     15 13 02 F6 | 	mov	arg01, local03
2b19c     58 FA BF FD | 	call	#__system___gc_free
2b1a0     00 FA 05 F6 | 	mov	result1, #0
2b1a4     08 00 90 FD | 	jmp	#LR__3923
2b1a8                 | LR__3922
2b1a8     15 29 62 FC | 	wrlong	local02, local03
2b1ac     15 FB 01 F6 | 	mov	result1, local03
2b1b0                 | LR__3923
2b1b0     A7 F0 03 F6 | 	mov	ptra, fp
2b1b4     B2 00 A0 FD | 	call	#popregs_
2b1b8                 | __system__opendir_ret
2b1b8     2D 00 64 FD | 	ret
2b1bc                 | 
2b1bc                 | __system__closedir
2b1bc     04 4A 05 F6 | 	mov	COUNT_, #4
2b1c0     A8 00 A0 FD | 	call	#pushregs_
2b1c4     09 27 02 F6 | 	mov	local01, arg01
2b1c8     13 13 02 FB | 	rdlong	arg01, local01
2b1cc     2C 12 06 F1 | 	add	arg01, #44
2b1d0     09 29 02 FB | 	rdlong	local02, arg01
2b1d4     14 2B 02 F6 | 	mov	local03, local02
2b1d8     13 2A 46 F7 | 	zerox	local03, #19
2b1dc     14 28 46 F0 | 	shr	local02, #20
2b1e0     02 28 66 F0 | 	shl	local02, #2
2b1e4     ED 28 02 F1 | 	add	local02, __methods__
2b1e8     14 29 02 FB | 	rdlong	local02, local02
2b1ec     13 13 02 F6 | 	mov	arg01, local01
2b1f0     F2 2C 02 F6 | 	mov	local04, objptr
2b1f4     15 E5 01 F6 | 	mov	objptr, local03
2b1f8     2D 28 62 FD | 	call	local02
2b1fc     16 E5 01 F6 | 	mov	objptr, local04
2b200     FD 2C 02 F6 | 	mov	local04, result1
2b204     13 13 02 F6 | 	mov	arg01, local01
2b208     EC F9 BF FD | 	call	#__system___gc_free
2b20c     00 2C 4E F2 | 	cmps	local04, #0 wz
2b210     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b214     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
2b218     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b21c     01 FA 65 56 |  if_ne	neg	result1, #1
2b220     00 FA 05 A6 |  if_e	mov	result1, #0
2b224     A7 F0 03 F6 | 	mov	ptra, fp
2b228     B2 00 A0 FD | 	call	#popregs_
2b22c                 | __system__closedir_ret
2b22c     2D 00 64 FD | 	ret
2b230                 | 
2b230                 | __system__readdir
2b230     04 4A 05 F6 | 	mov	COUNT_, #4
2b234     A8 00 A0 FD | 	call	#pushregs_
2b238     09 15 0A FB | 	rdlong	arg02, arg01 wz
2b23c     08 12 06 F1 | 	add	arg01, #8
2b240     09 27 02 F6 | 	mov	local01, arg01
2b244     08 12 86 F1 | 	sub	arg01, #8
2b248     00 FA 05 A6 |  if_e	mov	result1, #0
2b24c     5C 00 90 AD |  if_e	jmp	#LR__3931
2b250     30 14 06 F1 | 	add	arg02, #48
2b254     0A 29 02 FB | 	rdlong	local02, arg02
2b258     14 2B 02 F6 | 	mov	local03, local02
2b25c     13 2A 46 F7 | 	zerox	local03, #19
2b260     14 28 46 F0 | 	shr	local02, #20
2b264     02 28 66 F0 | 	shl	local02, #2
2b268     ED 28 02 F1 | 	add	local02, __methods__
2b26c     14 29 02 FB | 	rdlong	local02, local02
2b270     13 15 02 F6 | 	mov	arg02, local01
2b274     F2 2C 02 F6 | 	mov	local04, objptr
2b278     15 E5 01 F6 | 	mov	objptr, local03
2b27c     2D 28 62 FD | 	call	local02
2b280     16 E5 01 F6 | 	mov	objptr, local04
2b284     00 FA 4D F2 | 	cmps	result1, #0 wz
2b288     1C 00 90 AD |  if_e	jmp	#LR__3930
2b28c     01 FA 55 F2 | 	cmps	result1, #1 wc
2b290     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
2b294     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2b298     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
2b29c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2b2a0     00 FA 05 F6 | 	mov	result1, #0
2b2a4     04 00 90 FD | 	jmp	#LR__3931
2b2a8                 | LR__3930
2b2a8     13 FB 01 F6 | 	mov	result1, local01
2b2ac                 | LR__3931
2b2ac     A7 F0 03 F6 | 	mov	ptra, fp
2b2b0     B2 00 A0 FD | 	call	#popregs_
2b2b4                 | __system__readdir_ret
2b2b4     2D 00 64 FD | 	ret
2b2b8                 | 
2b2b8                 | __system___openraw
2b2b8     15 4A 05 F6 | 	mov	COUNT_, #21
2b2bc     A8 00 A0 FD | 	call	#pushregs_
2b2c0     09 27 02 F6 | 	mov	local01, arg01
2b2c4     0A 29 02 F6 | 	mov	local02, arg02
2b2c8     0B 2B 02 F6 | 	mov	local03, arg03
2b2cc     0C 2D 02 F6 | 	mov	local04, arg04
2b2d0     04 2E 06 F6 | 	mov	local05, #4
2b2d4     13 31 02 F6 | 	mov	local06, local01
2b2d8     00 32 06 F6 | 	mov	local07, #0
2b2dc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2b2e0     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
2b2e4     1A 13 02 F6 | 	mov	arg01, local08
2b2e8     14 15 02 F6 | 	mov	arg02, local02
2b2ec     00 16 06 F6 | 	mov	arg03, #0
2b2f0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2b2f4     B8 BD BF FD | 	call	#__system____getvfsforfile
2b2f8     FD 36 0A F6 | 	mov	local09, result1 wz
2b2fc     10 00 90 AD |  if_e	jmp	#LR__3940
2b300     20 36 06 F1 | 	add	local09, #32
2b304     1B FB 09 FB | 	rdlong	result1, local09 wz
2b308     20 36 86 F1 | 	sub	local09, #32
2b30c     14 00 90 5D |  if_ne	jmp	#LR__3941
2b310                 | LR__3940
2b310     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b314     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2b318     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b31c     01 FA 65 F6 | 	neg	result1, #1
2b320     8C 02 90 FD | 	jmp	#LR__3954
2b324                 | LR__3941
2b324     18 13 02 F6 | 	mov	arg01, local06
2b328     00 14 06 F6 | 	mov	arg02, #0
2b32c     34 16 06 F6 | 	mov	arg03, #52
2b330     09 39 02 F6 | 	mov	local10, arg01
2b334     98 00 A0 FD | 	call	#\builtin_bytefill_
2b338     20 36 06 F1 | 	add	local09, #32
2b33c     1B 3B 02 FB | 	rdlong	local11, local09
2b340     1D 3D 02 F6 | 	mov	local12, local11
2b344     1D 3F 02 F6 | 	mov	local13, local11
2b348     20 36 86 F1 | 	sub	local09, #32
2b34c     1F 41 02 F6 | 	mov	local14, local13
2b350     13 3C 46 F7 | 	zerox	local12, #19
2b354     14 40 46 F0 | 	shr	local14, #20
2b358     02 40 66 F0 | 	shl	local14, #2
2b35c     ED 40 02 F1 | 	add	local14, __methods__
2b360     20 41 02 FB | 	rdlong	local14, local14
2b364     18 43 02 F6 | 	mov	local15, local06
2b368     1A 45 02 F6 | 	mov	local16, local08
2b36c     15 47 02 F6 | 	mov	local17, local03
2b370     21 13 02 F6 | 	mov	arg01, local15
2b374     22 15 02 F6 | 	mov	arg02, local16
2b378     23 17 02 F6 | 	mov	arg03, local17
2b37c     F2 48 02 F6 | 	mov	local18, objptr
2b380     1E E5 01 F6 | 	mov	objptr, local12
2b384     2D 40 62 FD | 	call	local14
2b388     24 E5 01 F6 | 	mov	objptr, local18
2b38c     FD 4A 0A F6 | 	mov	local19, result1 wz
2b390     04 2A CE 57 |  if_ne	test	local03, #4 wz
2b394     58 00 90 AD |  if_e	jmp	#LR__3942
2b398     24 36 06 F1 | 	add	local09, #36
2b39c     1B 3B 02 FB | 	rdlong	local11, local09
2b3a0     1D 3D 02 F6 | 	mov	local12, local11
2b3a4     1D 3F 02 F6 | 	mov	local13, local11
2b3a8     24 36 86 F1 | 	sub	local09, #36
2b3ac     1F 41 02 F6 | 	mov	local14, local13
2b3b0     13 3C 46 F7 | 	zerox	local12, #19
2b3b4     14 40 46 F0 | 	shr	local14, #20
2b3b8     02 40 66 F0 | 	shl	local14, #2
2b3bc     ED 40 02 F1 | 	add	local14, __methods__
2b3c0     20 41 02 FB | 	rdlong	local14, local14
2b3c4     18 43 02 F6 | 	mov	local15, local06
2b3c8     1A 45 02 F6 | 	mov	local16, local08
2b3cc     16 47 02 F6 | 	mov	local17, local04
2b3d0     21 13 02 F6 | 	mov	arg01, local15
2b3d4     22 15 02 F6 | 	mov	arg02, local16
2b3d8     23 17 02 F6 | 	mov	arg03, local17
2b3dc     F2 48 02 F6 | 	mov	local18, objptr
2b3e0     1E E5 01 F6 | 	mov	objptr, local12
2b3e4     2D 40 62 FD | 	call	local14
2b3e8     24 E5 01 F6 | 	mov	objptr, local18
2b3ec     FD 4A 02 F6 | 	mov	local19, result1
2b3f0                 | LR__3942
2b3f0     00 4A 0E F2 | 	cmp	local19, #0 wz
2b3f4     8C 01 90 5D |  if_ne	jmp	#LR__3952
2b3f8     15 4D 02 F6 | 	mov	local20, local03
2b3fc     03 4C 0E F5 | 	and	local20, #3 wz
2b400     02 2E 46 55 |  if_ne	or	local05, #2
2b404     01 4C 0E F2 | 	cmp	local20, #1 wz
2b408     01 2E 46 55 |  if_ne	or	local05, #1
2b40c     20 2A CE F7 | 	test	local03, #32 wz
2b410     C0 2E 46 55 |  if_ne	or	local05, #192
2b414     08 30 06 F1 | 	add	local06, #8
2b418     18 2F 62 FC | 	wrlong	local05, local06
2b41c     0C 30 06 F1 | 	add	local06, #12
2b420     18 4F 0A FB | 	rdlong	local21, local06 wz
2b424     14 30 86 F1 | 	sub	local06, #20
2b428     18 00 90 5D |  if_ne	jmp	#LR__3943
2b42c     04 36 06 F1 | 	add	local09, #4
2b430     1B 4F 02 FB | 	rdlong	local21, local09
2b434     04 36 86 F1 | 	sub	local09, #4
2b438     14 30 06 F1 | 	add	local06, #20
2b43c     18 4F 62 FC | 	wrlong	local21, local06
2b440     14 30 86 F1 | 	sub	local06, #20
2b444                 | LR__3943
2b444     18 30 06 F1 | 	add	local06, #24
2b448     18 4F 0A FB | 	rdlong	local21, local06 wz
2b44c     18 30 86 F1 | 	sub	local06, #24
2b450     18 00 90 5D |  if_ne	jmp	#LR__3944
2b454     08 36 06 F1 | 	add	local09, #8
2b458     1B 4F 02 FB | 	rdlong	local21, local09
2b45c     08 36 86 F1 | 	sub	local09, #8
2b460     18 30 06 F1 | 	add	local06, #24
2b464     18 4F 62 FC | 	wrlong	local21, local06
2b468     18 30 86 F1 | 	sub	local06, #24
2b46c                 | LR__3944
2b46c     24 30 06 F1 | 	add	local06, #36
2b470     18 4F 0A FB | 	rdlong	local21, local06 wz
2b474     24 30 86 F1 | 	sub	local06, #36
2b478     1B 4F 02 AB |  if_e	rdlong	local21, local09
2b47c     24 30 06 A1 |  if_e	add	local06, #36
2b480     18 4F 62 AC |  if_e	wrlong	local21, local06
2b484     24 30 86 A1 |  if_e	sub	local06, #36
2b488     28 30 06 F1 | 	add	local06, #40
2b48c     18 4F 0A FB | 	rdlong	local21, local06 wz
2b490     28 30 86 F1 | 	sub	local06, #40
2b494     18 00 90 5D |  if_ne	jmp	#LR__3945
2b498     10 36 06 F1 | 	add	local09, #16
2b49c     1B 4F 02 FB | 	rdlong	local21, local09
2b4a0     10 36 86 F1 | 	sub	local09, #16
2b4a4     28 30 06 F1 | 	add	local06, #40
2b4a8     18 4F 62 FC | 	wrlong	local21, local06
2b4ac     28 30 86 F1 | 	sub	local06, #40
2b4b0                 | LR__3945
2b4b0     30 30 06 F1 | 	add	local06, #48
2b4b4     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4b8     30 30 86 F1 | 	sub	local06, #48
2b4bc     18 00 90 5D |  if_ne	jmp	#LR__3946
2b4c0     0C 36 06 F1 | 	add	local09, #12
2b4c4     1B 4F 02 FB | 	rdlong	local21, local09
2b4c8     0C 36 86 F1 | 	sub	local09, #12
2b4cc     30 30 06 F1 | 	add	local06, #48
2b4d0     18 4F 62 FC | 	wrlong	local21, local06
2b4d4     30 30 86 F1 | 	sub	local06, #48
2b4d8                 | LR__3946
2b4d8     1C 30 06 F1 | 	add	local06, #28
2b4dc     18 4F 0A FB | 	rdlong	local21, local06 wz
2b4e0     1C 30 86 F1 | 	sub	local06, #28
2b4e4     1C 00 90 5D |  if_ne	jmp	#LR__3947
2b4e8     01 32 06 F6 | 	mov	local07, #1
2b4ec     F2 12 02 F6 | 	mov	arg01, objptr
2b4f0     00 60 05 FF 
2b4f4     00 12 46 F5 | 	or	arg01, ##180355072
2b4f8     1C 30 06 F1 | 	add	local06, #28
2b4fc     18 13 62 FC | 	wrlong	arg01, local06
2b500     1C 30 86 F1 | 	sub	local06, #28
2b504                 | LR__3947
2b504     20 30 06 F1 | 	add	local06, #32
2b508     18 4F 0A FB | 	rdlong	local21, local06 wz
2b50c     20 30 86 F1 | 	sub	local06, #32
2b510     1C 00 90 5D |  if_ne	jmp	#LR__3948
2b514     01 32 06 F6 | 	mov	local07, #1
2b518     F2 12 02 F6 | 	mov	arg01, objptr
2b51c     00 68 05 FF 
2b520     00 12 46 F5 | 	or	arg01, ##181403648
2b524     20 30 06 F1 | 	add	local06, #32
2b528     18 13 62 FC | 	wrlong	arg01, local06
2b52c     20 30 86 F1 | 	sub	local06, #32
2b530                 | LR__3948
2b530     2C 30 06 F1 | 	add	local06, #44
2b534     18 4F 0A FB | 	rdlong	local21, local06 wz
2b538     2C 30 86 F1 | 	sub	local06, #44
2b53c     44 00 90 5D |  if_ne	jmp	#LR__3951
2b540     14 36 06 F1 | 	add	local09, #20
2b544     1B 4F 0A FB | 	rdlong	local21, local09 wz
2b548     14 36 86 F1 | 	sub	local09, #20
2b54c     18 00 90 AD |  if_e	jmp	#LR__3949
2b550     14 36 06 F1 | 	add	local09, #20
2b554     1B 4F 02 FB | 	rdlong	local21, local09
2b558     2C 30 06 F1 | 	add	local06, #44
2b55c     18 4F 62 FC | 	wrlong	local21, local06
2b560     2C 30 86 F1 | 	sub	local06, #44
2b564     1C 00 90 FD | 	jmp	#LR__3950
2b568                 | LR__3949
2b568     01 32 06 F6 | 	mov	local07, #1
2b56c     F2 12 02 F6 | 	mov	arg01, objptr
2b570     00 70 05 FF 
2b574     00 12 46 F5 | 	or	arg01, ##182452224
2b578     2C 30 06 F1 | 	add	local06, #44
2b57c     18 13 62 FC | 	wrlong	arg01, local06
2b580     2C 30 86 F1 | 	sub	local06, #44
2b584                 | LR__3950
2b584                 | LR__3951
2b584                 | LR__3952
2b584     00 32 0E F2 | 	cmp	local07, #0 wz
2b588     18 13 02 56 |  if_ne	mov	arg01, local06
2b58c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
2b590     00 4A 0E F2 | 	cmp	local19, #0 wz
2b594     00 12 06 A6 |  if_e	mov	arg01, #0
2b598     10 00 90 5D |  if_ne	jmp	#LR__3953
2b59c     00 12 4E F2 | 	cmps	arg01, #0 wz
2b5a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b5a4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b5a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b5ac                 | LR__3953
2b5ac     25 FB 01 F6 | 	mov	result1, local19
2b5b0                 | LR__3954
2b5b0     A7 F0 03 F6 | 	mov	ptra, fp
2b5b4     B2 00 A0 FD | 	call	#popregs_
2b5b8                 | __system___openraw_ret
2b5b8     2D 00 64 FD | 	ret
2b5bc                 | 
2b5bc                 | __system___closeraw
2b5bc     05 4A 05 F6 | 	mov	COUNT_, #5
2b5c0     A8 00 A0 FD | 	call	#pushregs_
2b5c4     09 27 02 F6 | 	mov	local01, arg01
2b5c8     00 28 06 F6 | 	mov	local02, #0
2b5cc     08 26 06 F1 | 	add	local01, #8
2b5d0     13 FB 09 FB | 	rdlong	result1, local01 wz
2b5d4     08 26 86 F1 | 	sub	local01, #8
2b5d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b5dc     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2b5e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b5e4     01 FA 65 A6 |  if_e	neg	result1, #1
2b5e8     A8 00 90 AD |  if_e	jmp	#LR__3962
2b5ec     2C 26 06 F1 | 	add	local01, #44
2b5f0     13 FB 09 FB | 	rdlong	result1, local01 wz
2b5f4     2C 26 86 F1 | 	sub	local01, #44
2b5f8     38 00 90 AD |  if_e	jmp	#LR__3960
2b5fc     2C 26 06 F1 | 	add	local01, #44
2b600     13 2B 02 FB | 	rdlong	local03, local01
2b604     15 2D 02 F6 | 	mov	local04, local03
2b608     2C 26 86 F1 | 	sub	local01, #44
2b60c     13 2C 46 F7 | 	zerox	local04, #19
2b610     14 2A 46 F0 | 	shr	local03, #20
2b614     02 2A 66 F0 | 	shl	local03, #2
2b618     ED 2A 02 F1 | 	add	local03, __methods__
2b61c     15 2B 02 FB | 	rdlong	local03, local03
2b620     13 13 02 F6 | 	mov	arg01, local01
2b624     F2 2E 02 F6 | 	mov	local05, objptr
2b628     16 E5 01 F6 | 	mov	objptr, local04
2b62c     2D 2A 62 FD | 	call	local03
2b630     17 E5 01 F6 | 	mov	objptr, local05
2b634                 | LR__3960
2b634     24 26 06 F1 | 	add	local01, #36
2b638     13 2F 0A FB | 	rdlong	local05, local01 wz
2b63c     24 26 86 F1 | 	sub	local01, #36
2b640     3C 00 90 AD |  if_e	jmp	#LR__3961
2b644     24 26 06 F1 | 	add	local01, #36
2b648     13 2B 02 FB | 	rdlong	local03, local01
2b64c     15 2D 02 F6 | 	mov	local04, local03
2b650     24 26 86 F1 | 	sub	local01, #36
2b654     13 2C 46 F7 | 	zerox	local04, #19
2b658     14 2A 46 F0 | 	shr	local03, #20
2b65c     02 2A 66 F0 | 	shl	local03, #2
2b660     ED 2A 02 F1 | 	add	local03, __methods__
2b664     15 2B 02 FB | 	rdlong	local03, local03
2b668     13 13 02 F6 | 	mov	arg01, local01
2b66c     F2 2E 02 F6 | 	mov	local05, objptr
2b670     16 E5 01 F6 | 	mov	objptr, local04
2b674     2D 2A 62 FD | 	call	local03
2b678     17 E5 01 F6 | 	mov	objptr, local05
2b67c     FD 28 02 F6 | 	mov	local02, result1
2b680                 | LR__3961
2b680     13 13 02 F6 | 	mov	arg01, local01
2b684     00 14 06 F6 | 	mov	arg02, #0
2b688     34 16 06 F6 | 	mov	arg03, #52
2b68c     98 00 A0 FD | 	call	#\builtin_bytefill_
2b690     14 FB 01 F6 | 	mov	result1, local02
2b694                 | LR__3962
2b694     A7 F0 03 F6 | 	mov	ptra, fp
2b698     B2 00 A0 FD | 	call	#popregs_
2b69c                 | __system___closeraw_ret
2b69c     2D 00 64 FD | 	ret
2b6a0                 | 
2b6a0                 | __system___vfs_open_sdcardx
2b6a0     0B 4A 05 F6 | 	mov	COUNT_, #11
2b6a4     A8 00 A0 FD | 	call	#pushregs_
2b6a8     09 2B 02 F6 | 	mov	local03, arg01
2b6ac     0A 2D 02 F6 | 	mov	local04, arg02
2b6b0     0B 2F 02 F6 | 	mov	local05, arg03
2b6b4     0C 31 02 F6 | 	mov	local06, arg04
2b6b8     01 00 00 FF 
2b6bc     24 12 06 F6 | 	mov	arg01, ##548
2b6c0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b6c4     FD 32 02 F6 | 	mov	local07, result1
2b6c8     01 00 00 FF 
2b6cc     34 12 06 F6 | 	mov	arg01, ##564
2b6d0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
2b6d4     FD 34 02 F6 | 	mov	local08, result1
2b6d8     15 19 02 F6 | 	mov	arg04, local03
2b6dc     1F 18 C6 F0 | 	sar	arg04, #31
2b6e0     15 17 02 F6 | 	mov	arg03, local03
2b6e4     01 12 06 F6 | 	mov	arg01, #1
2b6e8     00 14 06 F6 | 	mov	arg02, #0
2b6ec     EC DB BF FD | 	call	#__system___int64_shl
2b6f0     FD 26 02 F6 | 	mov	local01, result1
2b6f4     FE 36 02 F6 | 	mov	local09, result2
2b6f8     16 19 02 F6 | 	mov	arg04, local04
2b6fc     1F 18 C6 F0 | 	sar	arg04, #31
2b700     16 17 02 F6 | 	mov	arg03, local04
2b704     01 12 06 F6 | 	mov	arg01, #1
2b708     00 14 06 F6 | 	mov	arg02, #0
2b70c     CC DB BF FD | 	call	#__system___int64_shl
2b710     FD 26 42 F5 | 	or	local01, result1
2b714     FE 36 42 F5 | 	or	local09, result2
2b718     17 19 02 F6 | 	mov	arg04, local05
2b71c     1F 18 C6 F0 | 	sar	arg04, #31
2b720     17 17 02 F6 | 	mov	arg03, local05
2b724     01 12 06 F6 | 	mov	arg01, #1
2b728     00 14 06 F6 | 	mov	arg02, #0
2b72c     AC DB BF FD | 	call	#__system___int64_shl
2b730     FD 26 42 F5 | 	or	local01, result1
2b734     FE 36 42 F5 | 	or	local09, result2
2b738     18 19 02 F6 | 	mov	arg04, local06
2b73c     1F 18 C6 F0 | 	sar	arg04, #31
2b740     18 17 02 F6 | 	mov	arg03, local06
2b744     01 12 06 F6 | 	mov	arg01, #1
2b748     00 14 06 F6 | 	mov	arg02, #0
2b74c     8C DB BF FD | 	call	#__system___int64_shl
2b750     1B 15 02 F6 | 	mov	arg02, local09
2b754     FD 26 42 F5 | 	or	local01, result1
2b758     0A FD 41 F5 | 	or	result2, arg02
2b75c     FE 28 02 F6 | 	mov	local02, result2
2b760     13 13 02 F6 | 	mov	arg01, local01
2b764     14 15 02 F6 | 	mov	arg02, local02
2b768     A8 DB BF FD | 	call	#__system___usepins
2b76c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b770     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2b774     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2b778     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2b77c     00 FA 05 A6 |  if_e	mov	result1, #0
2b780     B4 00 90 AD |  if_e	jmp	#LR__3972
2b784     13 39 02 F6 | 	mov	local10, local01
2b788     14 37 02 F6 | 	mov	local09, local02
2b78c     01 00 00 FF 
2b790     08 32 06 F1 | 	add	local07, ##520
2b794     19 39 62 FC | 	wrlong	local10, local07
2b798     04 32 06 F1 | 	add	local07, #4
2b79c     19 37 62 FC | 	wrlong	local09, local07
2b7a0     01 00 00 FF 
2b7a4     0C 32 86 F1 | 	sub	local07, ##524
2b7a8     18 1B 02 F6 | 	mov	arg05, local06
2b7ac     00 12 06 F6 | 	mov	arg01, #0
2b7b0     15 15 02 F6 | 	mov	arg02, local03
2b7b4     16 17 02 F6 | 	mov	arg03, local04
2b7b8     17 19 02 F6 | 	mov	arg04, local05
2b7bc     F2 38 02 F6 | 	mov	local10, objptr
2b7c0     19 E5 01 F6 | 	mov	objptr, local07
2b7c4     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
2b7c8     1C E5 01 F6 | 	mov	objptr, local10
2b7cc     FD 3A 0A F6 | 	mov	local11, result1 wz
2b7d0     24 00 90 5D |  if_ne	jmp	#LR__3970
2b7d4     B2 01 00 FF 
2b7d8     92 14 06 F6 | 	mov	arg02, ##@LR__5387
2b7dc     1A 13 02 F6 | 	mov	arg01, local08
2b7e0     00 16 06 F6 | 	mov	arg03, #0
2b7e4     F2 3A 02 F6 | 	mov	local11, objptr
2b7e8     19 E5 01 F6 | 	mov	objptr, local07
2b7ec     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
2b7f0     1D E5 01 F6 | 	mov	objptr, local11
2b7f4     FD 3A 02 F6 | 	mov	local11, result1
2b7f8                 | LR__3970
2b7f8     00 3A 0E F2 | 	cmp	local11, #0 wz
2b7fc     24 00 90 AD |  if_e	jmp	#LR__3971
2b800     13 13 02 F6 | 	mov	arg01, local01
2b804     14 15 02 F6 | 	mov	arg02, local02
2b808     5C DB BF FD | 	call	#__system___freepins
2b80c     1D 13 6A F6 | 	neg	arg01, local11 wz
2b810     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2b814     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2b818     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2b81c     00 FA 05 F6 | 	mov	result1, #0
2b820     14 00 90 FD | 	jmp	#LR__3972
2b824                 | LR__3971
2b824     19 13 02 F6 | 	mov	arg01, local07
2b828     F2 3A 02 F6 | 	mov	local11, objptr
2b82c     19 E5 01 F6 | 	mov	objptr, local07
2b830     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
2b834     1D E5 01 F6 | 	mov	objptr, local11
2b838                 | LR__3972
2b838     A7 F0 03 F6 | 	mov	ptra, fp
2b83c     B2 00 A0 FD | 	call	#popregs_
2b840                 | __system___vfs_open_sdcardx_ret
2b840     2D 00 64 FD | 	ret
2b844                 | 
2b844                 | __system____default_getc
2b844     03 4A 05 F6 | 	mov	COUNT_, #3
2b848     A8 00 A0 FD | 	call	#pushregs_
2b84c     09 27 02 F6 | 	mov	local01, arg01
2b850     13 29 02 FB | 	rdlong	local02, local01
2b854     08 28 06 F1 | 	add	local02, #8
2b858     14 2B 02 FB | 	rdlong	local03, local02
2b85c     02 2A CE F7 | 	test	local03, #2 wz
2b860     13 13 02 56 |  if_ne	mov	arg01, local01
2b864     00 01 B0 5D |  if_ne	call	#__system____default_flush
2b868     14 2B 02 FB | 	rdlong	local03, local02
2b86c     01 2A 46 F5 | 	or	local03, #1
2b870     14 2B 62 FC | 	wrlong	local03, local02
2b874     08 28 86 F1 | 	sub	local02, #8
2b878     14 2B 0A FB | 	rdlong	local03, local02 wz
2b87c     0C 00 90 5D |  if_ne	jmp	#LR__3980
2b880     13 13 02 F6 | 	mov	arg01, local01
2b884     68 18 B0 FD | 	call	#__system____default_filbuf
2b888     FD 2A 02 F6 | 	mov	local03, result1
2b88c                 | LR__3980
2b88c     01 2A 56 F2 | 	cmps	local03, #1 wc
2b890     01 FA 65 C6 |  if_b	neg	result1, #1
2b894     1C 00 90 CD |  if_b	jmp	#LR__3981
2b898     01 2A 86 F1 | 	sub	local03, #1
2b89c     14 2B 62 FC | 	wrlong	local03, local02
2b8a0     04 28 06 F1 | 	add	local02, #4
2b8a4     14 2B 02 FB | 	rdlong	local03, local02
2b8a8     15 FB C1 FA | 	rdbyte	result1, local03
2b8ac     01 2A 06 F1 | 	add	local03, #1
2b8b0     14 2B 62 FC | 	wrlong	local03, local02
2b8b4                 | LR__3981
2b8b4     A7 F0 03 F6 | 	mov	ptra, fp
2b8b8     B2 00 A0 FD | 	call	#popregs_
2b8bc                 | __system____default_getc_ret
2b8bc     2D 00 64 FD | 	ret
2b8c0                 | 
2b8c0                 | __system____default_putc
2b8c0     06 4A 05 F6 | 	mov	COUNT_, #6
2b8c4     A8 00 A0 FD | 	call	#pushregs_
2b8c8     09 27 02 F6 | 	mov	local01, arg01
2b8cc     0A 29 02 F6 | 	mov	local02, arg02
2b8d0     14 2B 02 FB | 	rdlong	local03, local02
2b8d4     08 2A 06 F1 | 	add	local03, #8
2b8d8     15 FB 01 FB | 	rdlong	result1, local03
2b8dc     01 FA CD F7 | 	test	result1, #1 wz
2b8e0     14 13 02 56 |  if_ne	mov	arg01, local02
2b8e4     80 00 B0 5D |  if_ne	call	#__system____default_flush
2b8e8     15 2D 02 FB | 	rdlong	local04, local03
2b8ec     02 2C 46 F5 | 	or	local04, #2
2b8f0     15 2D 62 FC | 	wrlong	local04, local03
2b8f4     08 2A 86 F1 | 	sub	local03, #8
2b8f8     15 2F 02 FB | 	rdlong	local05, local03
2b8fc     10 2A 06 F1 | 	add	local03, #16
2b900     15 15 02 FB | 	rdlong	arg02, local03
2b904     10 2A 86 F1 | 	sub	local03, #16
2b908     17 FB 01 F6 | 	mov	result1, local05
2b90c     0A FB 01 F1 | 	add	result1, arg02
2b910     FD 26 42 FC | 	wrbyte	local01, result1
2b914     13 27 E2 F8 | 	getbyte	local01, local01, #0
2b918     01 2E 06 F1 | 	add	local05, #1
2b91c     15 2F 62 FC | 	wrlong	local05, local03
2b920     06 28 06 F1 | 	add	local02, #6
2b924     14 31 EA FA | 	rdword	local06, local02 wz
2b928     06 28 86 F1 | 	sub	local02, #6
2b92c     0C 2A 06 51 |  if_ne	add	local03, #12
2b930     15 2D 02 5B |  if_ne	rdlong	local04, local03
2b934     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2b938     0C 00 90 AD |  if_e	jmp	#LR__3990
2b93c     0A 26 0E F2 | 	cmp	local01, #10 wz
2b940     01 30 0E A2 |  if_e	cmp	local06, #1 wz
2b944     10 00 90 5D |  if_ne	jmp	#LR__3991
2b948                 | LR__3990
2b948     14 13 02 F6 | 	mov	arg01, local02
2b94c     18 00 B0 FD | 	call	#__system____default_flush
2b950     00 FA 0D F2 | 	cmp	result1, #0 wz
2b954     01 26 66 56 |  if_ne	neg	local01, #1
2b958                 | LR__3991
2b958     13 FB 01 F6 | 	mov	result1, local01
2b95c     A7 F0 03 F6 | 	mov	ptra, fp
2b960     B2 00 A0 FD | 	call	#popregs_
2b964                 | __system____default_putc_ret
2b964     2D 00 64 FD | 	ret
2b968                 | 
2b968                 | __system____default_flush
2b968     06 4A 05 F6 | 	mov	COUNT_, #6
2b96c     A8 00 A0 FD | 	call	#pushregs_
2b970     09 27 02 F6 | 	mov	local01, arg01
2b974     13 29 02 FB | 	rdlong	local02, local01
2b978     14 2B 02 FB | 	rdlong	local03, local02
2b97c     08 28 06 F1 | 	add	local02, #8
2b980     14 FB 01 FB | 	rdlong	result1, local02
2b984     08 28 86 F1 | 	sub	local02, #8
2b988     02 FA CD F7 | 	test	result1, #2 wz
2b98c     D0 00 90 AD |  if_e	jmp	#LR__4002
2b990     01 2A 56 F2 | 	cmps	local03, #1 wc
2b994     20 01 90 CD |  if_b	jmp	#LR__4004
2b998     08 26 06 F1 | 	add	local01, #8
2b99c     13 FB 01 FB | 	rdlong	result1, local01
2b9a0     08 26 86 F1 | 	sub	local01, #8
2b9a4     40 FA CD F7 | 	test	result1, #64 wz
2b9a8     68 00 90 AD |  if_e	jmp	#LR__4001
2b9ac     08 26 06 F1 | 	add	local01, #8
2b9b0     13 17 02 FB | 	rdlong	arg03, local01
2b9b4     08 26 86 F1 | 	sub	local01, #8
2b9b8     80 16 CE F7 | 	test	arg03, #128 wz
2b9bc     54 00 90 AD |  if_e	jmp	#LR__4000
2b9c0     30 26 06 F1 | 	add	local01, #48
2b9c4     13 2D 02 FB | 	rdlong	local04, local01
2b9c8     16 2F 02 F6 | 	mov	local05, local04
2b9cc     30 26 86 F1 | 	sub	local01, #48
2b9d0     13 2E 46 F7 | 	zerox	local05, #19
2b9d4     14 2C 46 F0 | 	shr	local04, #20
2b9d8     02 2C 66 F0 | 	shl	local04, #2
2b9dc     ED 2C 02 F1 | 	add	local04, __methods__
2b9e0     16 2D 02 FB | 	rdlong	local04, local04
2b9e4     13 13 02 F6 | 	mov	arg01, local01
2b9e8     00 14 06 F6 | 	mov	arg02, #0
2b9ec     02 16 06 F6 | 	mov	arg03, #2
2b9f0     F2 30 02 F6 | 	mov	local06, objptr
2b9f4     17 E5 01 F6 | 	mov	objptr, local05
2b9f8     2D 2C 62 FD | 	call	local04
2b9fc     18 E5 01 F6 | 	mov	objptr, local06
2ba00     08 26 06 F1 | 	add	local01, #8
2ba04     13 31 02 FB | 	rdlong	local06, local01
2ba08     80 30 26 F5 | 	andn	local06, #128
2ba0c     13 31 62 FC | 	wrlong	local06, local01
2ba10     08 26 86 F1 | 	sub	local01, #8
2ba14                 | LR__4000
2ba14                 | LR__4001
2ba14     18 26 06 F1 | 	add	local01, #24
2ba18     13 2D 02 FB | 	rdlong	local04, local01
2ba1c     16 2F 02 F6 | 	mov	local05, local04
2ba20     18 26 86 F1 | 	sub	local01, #24
2ba24     13 2E 46 F7 | 	zerox	local05, #19
2ba28     14 2C 46 F0 | 	shr	local04, #20
2ba2c     02 2C 66 F0 | 	shl	local04, #2
2ba30     ED 2C 02 F1 | 	add	local04, __methods__
2ba34     16 2D 02 FB | 	rdlong	local04, local04
2ba38     10 28 06 F1 | 	add	local02, #16
2ba3c     14 15 02 FB | 	rdlong	arg02, local02
2ba40     10 28 86 F1 | 	sub	local02, #16
2ba44     13 13 02 F6 | 	mov	arg01, local01
2ba48     15 17 02 F6 | 	mov	arg03, local03
2ba4c     F2 30 02 F6 | 	mov	local06, objptr
2ba50     17 E5 01 F6 | 	mov	objptr, local05
2ba54     2D 2C 62 FD | 	call	local04
2ba58     18 E5 01 F6 | 	mov	objptr, local06
2ba5c     58 00 90 FD | 	jmp	#LR__4004
2ba60                 | LR__4002
2ba60     08 28 06 F1 | 	add	local02, #8
2ba64     14 31 02 FB | 	rdlong	local06, local02
2ba68     08 28 86 F1 | 	sub	local02, #8
2ba6c     01 30 CE F7 | 	test	local06, #1 wz
2ba70     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2ba74     40 00 90 AD |  if_e	jmp	#LR__4003
2ba78     30 26 06 F1 | 	add	local01, #48
2ba7c     13 2D 02 FB | 	rdlong	local04, local01
2ba80     16 2F 02 F6 | 	mov	local05, local04
2ba84     30 26 86 F1 | 	sub	local01, #48
2ba88     13 2E 46 F7 | 	zerox	local05, #19
2ba8c     14 2C 46 F0 | 	shr	local04, #20
2ba90     02 2C 66 F0 | 	shl	local04, #2
2ba94     ED 2C 02 F1 | 	add	local04, __methods__
2ba98     16 2D 02 FB | 	rdlong	local04, local04
2ba9c     13 13 02 F6 | 	mov	arg01, local01
2baa0     15 15 62 F6 | 	neg	arg02, local03
2baa4     01 16 06 F6 | 	mov	arg03, #1
2baa8     F2 30 02 F6 | 	mov	local06, objptr
2baac     17 E5 01 F6 | 	mov	objptr, local05
2bab0     2D 2C 62 FD | 	call	local04
2bab4     18 E5 01 F6 | 	mov	objptr, local06
2bab8                 | LR__4003
2bab8                 | LR__4004
2bab8     14 01 68 FC | 	wrlong	#0, local02
2babc     04 28 06 F1 | 	add	local02, #4
2bac0     14 01 68 FC | 	wrlong	#0, local02
2bac4     04 28 06 F1 | 	add	local02, #4
2bac8     14 01 68 FC | 	wrlong	#0, local02
2bacc     00 FA 05 F6 | 	mov	result1, #0
2bad0     A7 F0 03 F6 | 	mov	ptra, fp
2bad4     B2 00 A0 FD | 	call	#popregs_
2bad8                 | __system____default_flush_ret
2bad8     2D 00 64 FD | 	ret
2badc                 | 
2badc                 | __system____default_buffer_init
2badc     02 4A 05 F6 | 	mov	COUNT_, #2
2bae0     A8 00 A0 FD | 	call	#pushregs_
2bae4     09 27 02 F6 | 	mov	local01, arg01
2bae8     13 29 02 FB | 	rdlong	local02, local01
2baec     13 13 02 F6 | 	mov	arg01, local01
2baf0     34 03 B0 FD | 	call	#__system___isatty
2baf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2baf8     06 26 06 51 |  if_ne	add	local01, #6
2bafc     13 0B 58 5C |  if_ne	wrword	#5, local01
2bb00     06 26 06 A1 |  if_e	add	local01, #6
2bb04     13 0D 58 AC |  if_e	wrword	#6, local01
2bb08     14 28 06 F1 | 	add	local02, #20
2bb0c     14 27 02 F6 | 	mov	local01, local02
2bb10     04 28 86 F1 | 	sub	local02, #4
2bb14     14 27 62 FC | 	wrlong	local01, local02
2bb18     04 28 86 F1 | 	sub	local02, #4
2bb1c     02 00 80 FF 
2bb20     14 01 68 FC | 	wrlong	##1024, local02
2bb24     00 FA 05 F6 | 	mov	result1, #0
2bb28     A7 F0 03 F6 | 	mov	ptra, fp
2bb2c     B2 00 A0 FD | 	call	#popregs_
2bb30                 | __system____default_buffer_init_ret
2bb30     2D 00 64 FD | 	ret
2bb34                 | 
2bb34                 | __system__stat
2bb34     04 4A 05 F6 | 	mov	COUNT_, #4
2bb38     A8 00 A0 FD | 	call	#pushregs_
2bb3c     0A 27 02 F6 | 	mov	local01, arg02
2bb40     84 E7 05 F1 | 	add	ptr___system__dat__, #388
2bb44     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2bb48     09 15 02 F6 | 	mov	arg02, arg01
2bb4c     14 13 02 F6 | 	mov	arg01, local02
2bb50     00 16 06 F6 | 	mov	arg03, #0
2bb54     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2bb58     54 B5 BF FD | 	call	#__system____getvfsforfile
2bb5c     FD 2A 0A F6 | 	mov	local03, result1 wz
2bb60     10 00 90 AD |  if_e	jmp	#LR__4010
2bb64     34 2A 06 F1 | 	add	local03, #52
2bb68     15 17 0A FB | 	rdlong	arg03, local03 wz
2bb6c     34 2A 86 F1 | 	sub	local03, #52
2bb70     14 00 90 5D |  if_ne	jmp	#LR__4011
2bb74                 | LR__4010
2bb74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bb78     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
2bb7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bb80     01 FA 65 F6 | 	neg	result1, #1
2bb84     68 00 90 FD | 	jmp	#LR__4012
2bb88                 | LR__4011
2bb88     13 13 02 F6 | 	mov	arg01, local01
2bb8c     00 14 06 F6 | 	mov	arg02, #0
2bb90     30 16 06 F6 | 	mov	arg03, #48
2bb94     09 2D 02 F6 | 	mov	local04, arg01
2bb98     98 00 A0 FD | 	call	#\builtin_bytefill_
2bb9c     16 FB 01 F6 | 	mov	result1, local04
2bba0     14 13 CA FA | 	rdbyte	arg01, local02 wz
2bba4     08 26 06 A1 |  if_e	add	local01, #8
2bba8     08 00 80 AF 
2bbac     13 FF 6B AC |  if_e	wrlong	##4607, local01
2bbb0     00 FA 05 A6 |  if_e	mov	result1, #0
2bbb4     38 00 90 AD |  if_e	jmp	#LR__4012
2bbb8     34 2A 06 F1 | 	add	local03, #52
2bbbc     15 2B 02 FB | 	rdlong	local03, local03
2bbc0     15 2D 02 F6 | 	mov	local04, local03
2bbc4     13 2A 46 F7 | 	zerox	local03, #19
2bbc8     14 2C 46 F0 | 	shr	local04, #20
2bbcc     02 2C 66 F0 | 	shl	local04, #2
2bbd0     ED 2C 02 F1 | 	add	local04, __methods__
2bbd4     16 2D 02 FB | 	rdlong	local04, local04
2bbd8     14 13 02 F6 | 	mov	arg01, local02
2bbdc     13 15 02 F6 | 	mov	arg02, local01
2bbe0     F2 28 02 F6 | 	mov	local02, objptr
2bbe4     15 E5 01 F6 | 	mov	objptr, local03
2bbe8     2D 2C 62 FD | 	call	local04
2bbec     14 E5 01 F6 | 	mov	objptr, local02
2bbf0                 | LR__4012
2bbf0     A7 F0 03 F6 | 	mov	ptra, fp
2bbf4     B2 00 A0 FD | 	call	#popregs_
2bbf8                 | __system__stat_ret
2bbf8     2D 00 64 FD | 	ret
2bbfc                 | 
2bbfc                 | __system__write
2bbfc     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc00     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc04     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc08     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc0c     01 FA 65 36 |  if_ae	neg	result1, #1
2bc10     20 00 90 3D |  if_ae	jmp	#LR__4020
2bc14     34 12 06 FD | 	qmul	arg01, #52
2bc18     02 00 00 FF 
2bc1c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc20     18 12 62 FD | 	getqx	arg01
2bc24     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc28     02 00 00 FF 
2bc2c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc30     0C 10 B0 FD | 	call	#__system___vfswrite
2bc34                 | LR__4020
2bc34                 | __system__write_ret
2bc34     2D 00 64 FD | 	ret
2bc38                 | 
2bc38                 | __system__read
2bc38     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc3c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc40     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc44     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc48     01 FA 65 36 |  if_ae	neg	result1, #1
2bc4c     20 00 90 3D |  if_ae	jmp	#LR__4030
2bc50     34 12 06 FD | 	qmul	arg01, #52
2bc54     02 00 00 FF 
2bc58     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc5c     18 12 62 FD | 	getqx	arg01
2bc60     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bc64     02 00 00 FF 
2bc68     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bc6c     98 11 B0 FD | 	call	#__system___vfsread
2bc70                 | LR__4030
2bc70                 | __system__read_ret
2bc70     2D 00 64 FD | 	ret
2bc74                 | 
2bc74                 | __system__close
2bc74     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bc78     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bc7c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bc80     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bc84     01 FA 65 36 |  if_ae	neg	result1, #1
2bc88     20 00 90 3D |  if_ae	jmp	#LR__4040
2bc8c     34 12 06 FD | 	qmul	arg01, #52
2bc90     02 00 00 FF 
2bc94     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bc98     18 12 62 FD | 	getqx	arg01
2bc9c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2bca0     02 00 00 FF 
2bca4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bca8     10 F9 BF FD | 	call	#__system___closeraw
2bcac                 | LR__4040
2bcac                 | __system__close_ret
2bcac     2D 00 64 FD | 	ret
2bcb0                 | 
2bcb0                 | __system__lseek
2bcb0     06 4A 05 F6 | 	mov	COUNT_, #6
2bcb4     A8 00 A0 FD | 	call	#pushregs_
2bcb8     0A 12 16 F2 | 	cmp	arg01, #10 wc
2bcbc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
2bcc0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2bcc4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2bcc8     01 FA 65 36 |  if_ae	neg	result1, #1
2bccc     C4 00 90 3D |  if_ae	jmp	#LR__4051
2bcd0     34 12 06 FD | 	qmul	arg01, #52
2bcd4     02 00 00 FF 
2bcd8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2bcdc     18 26 62 FD | 	getqx	local01
2bce0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
2bce4     30 26 06 F1 | 	add	local01, #48
2bce8     13 13 0A FB | 	rdlong	arg01, local01 wz
2bcec     30 26 86 F1 | 	sub	local01, #48
2bcf0     02 00 00 FF 
2bcf4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2bcf8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bcfc     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
2bd00     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bd04     01 FA 65 A6 |  if_e	neg	result1, #1
2bd08     88 00 90 AD |  if_e	jmp	#LR__4051
2bd0c     08 26 06 F1 | 	add	local01, #8
2bd10     13 29 02 FB | 	rdlong	local02, local01
2bd14     08 26 86 F1 | 	sub	local01, #8
2bd18     40 28 CE F7 | 	test	local02, #64 wz
2bd1c     08 26 06 51 |  if_ne	add	local01, #8
2bd20     13 29 02 5B |  if_ne	rdlong	local02, local01
2bd24     80 28 46 55 |  if_ne	or	local02, #128
2bd28     13 29 62 5C |  if_ne	wrlong	local02, local01
2bd2c     08 26 86 51 |  if_ne	sub	local01, #8
2bd30     30 26 06 F1 | 	add	local01, #48
2bd34     13 2B 02 FB | 	rdlong	local03, local01
2bd38     15 2D 02 F6 | 	mov	local04, local03
2bd3c     30 26 86 F1 | 	sub	local01, #48
2bd40     13 2C 46 F7 | 	zerox	local04, #19
2bd44     14 2A 46 F0 | 	shr	local03, #20
2bd48     02 2A 66 F0 | 	shl	local03, #2
2bd4c     ED 2A 02 F1 | 	add	local03, __methods__
2bd50     15 2B 02 FB | 	rdlong	local03, local03
2bd54     13 13 02 F6 | 	mov	arg01, local01
2bd58     F2 2E 02 F6 | 	mov	local05, objptr
2bd5c     16 E5 01 F6 | 	mov	objptr, local04
2bd60     2D 2A 62 FD | 	call	local03
2bd64     17 E5 01 F6 | 	mov	objptr, local05
2bd68     FD 30 02 F6 | 	mov	local06, result1
2bd6c     00 30 56 F2 | 	cmps	local06, #0 wc
2bd70     1C 00 90 3D |  if_ae	jmp	#LR__4050
2bd74     18 13 6A F6 | 	neg	arg01, local06 wz
2bd78     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2bd7c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2bd80     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2bd84     01 FA 65 56 |  if_ne	neg	result1, #1
2bd88     00 FA 05 A6 |  if_e	mov	result1, #0
2bd8c     04 00 90 FD | 	jmp	#LR__4051
2bd90                 | LR__4050
2bd90     18 FB 01 F6 | 	mov	result1, local06
2bd94                 | LR__4051
2bd94     A7 F0 03 F6 | 	mov	ptra, fp
2bd98     B2 00 A0 FD | 	call	#popregs_
2bd9c                 | __system__lseek_ret
2bd9c     2D 00 64 FD | 	ret
2bda0                 | 
2bda0                 | __system___ioctl
2bda0     03 4A 05 F6 | 	mov	COUNT_, #3
2bda4     A8 00 A0 FD | 	call	#pushregs_
2bda8     00 12 4E F2 | 	cmps	arg01, #0 wz
2bdac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2bdb0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2bdb4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2bdb8     01 FA 65 A6 |  if_e	neg	result1, #1
2bdbc     5C 00 90 AD |  if_e	jmp	#LR__4061
2bdc0     28 12 06 F1 | 	add	arg01, #40
2bdc4     09 27 02 FB | 	rdlong	local01, arg01
2bdc8     13 29 02 F6 | 	mov	local02, local01
2bdcc     28 12 86 F1 | 	sub	arg01, #40
2bdd0     13 28 46 F7 | 	zerox	local02, #19
2bdd4     14 26 46 F0 | 	shr	local01, #20
2bdd8     02 26 66 F0 | 	shl	local01, #2
2bddc     ED 26 02 F1 | 	add	local01, __methods__
2bde0     13 27 02 FB | 	rdlong	local01, local01
2bde4     F2 2A 02 F6 | 	mov	local03, objptr
2bde8     14 E5 01 F6 | 	mov	objptr, local02
2bdec     2D 26 62 FD | 	call	local01
2bdf0     15 E5 01 F6 | 	mov	objptr, local03
2bdf4     FD 12 0A F6 | 	mov	arg01, result1 wz
2bdf8     1C 00 90 AD |  if_e	jmp	#LR__4060
2bdfc     00 12 4E F2 | 	cmps	arg01, #0 wz
2be00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2be04     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2be08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2be0c     01 FA 65 56 |  if_ne	neg	result1, #1
2be10     00 FA 05 A6 |  if_e	mov	result1, #0
2be14     04 00 90 FD | 	jmp	#LR__4061
2be18                 | LR__4060
2be18     00 FA 05 F6 | 	mov	result1, #0
2be1c                 | LR__4061
2be1c     A7 F0 03 F6 | 	mov	ptra, fp
2be20     B2 00 A0 FD | 	call	#popregs_
2be24                 | __system___ioctl_ret
2be24     2D 00 64 FD | 	ret
2be28                 | 
2be28                 | __system___isatty
2be28     00 4A 05 F6 | 	mov	COUNT_, #0
2be2c     A8 00 A0 FD | 	call	#pushregs_
2be30     0C F0 07 F1 | 	add	ptra, #12
2be34     04 4E 05 F1 | 	add	fp, #4
2be38     A7 12 62 FC | 	wrlong	arg01, fp
2be3c     04 4E 05 F1 | 	add	fp, #4
2be40     A7 16 02 F6 | 	mov	arg03, fp
2be44     08 4E 85 F1 | 	sub	fp, #8
2be48     00 15 06 F6 | 	mov	arg02, #256
2be4c     50 FF BF FD | 	call	#__system___ioctl
2be50     00 FA 0D F2 | 	cmp	result1, #0 wz
2be54     01 FA 05 A6 |  if_e	mov	result1, #1
2be58     00 FA 05 56 |  if_ne	mov	result1, #0
2be5c     A7 F0 03 F6 | 	mov	ptra, fp
2be60     B2 00 A0 FD | 	call	#popregs_
2be64                 | __system___isatty_ret
2be64     2D 00 64 FD | 	ret
2be68                 | 
2be68                 | __system____getftab
2be68     0A 12 16 F2 | 	cmp	arg01, #10 wc
2be6c     34 12 06 CD |  if_b	qmul	arg01, #52
2be70     00 FA 05 36 |  if_ae	mov	result1, #0
2be74     02 00 00 CF 
2be78     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2be7c     18 FA 61 CD |  if_b	getqx	result1
2be80     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
2be84     02 00 00 CF 
2be88     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2be8c                 | __system____getftab_ret
2be8c     2D 00 64 FD | 	ret
2be90                 | 
2be90                 | __system__strncpy
2be90     09 01 02 F6 | 	mov	_var01, arg01
2be94                 | LR__4070
2be94     01 16 86 F1 | 	sub	arg03, #1
2be98     00 16 56 F2 | 	cmps	arg03, #0 wc
2be9c     18 00 90 CD |  if_b	jmp	#LR__4071
2bea0     0A FB C1 FA | 	rdbyte	result1, arg02
2bea4     00 FB 41 FC | 	wrbyte	result1, _var01
2bea8     01 14 06 F1 | 	add	arg02, #1
2beac     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2beb0     01 00 06 F1 | 	add	_var01, #1
2beb4     DC FF 9F 5D |  if_ne	jmp	#LR__4070
2beb8                 | LR__4071
2beb8     97 0C 48 FB | 	callpa	#(@LR__4073-@LR__4072)>>2,fcache_load_ptr_
2bebc                 | LR__4072
2bebc     01 16 86 F1 | 	sub	arg03, #1
2bec0     00 16 56 F2 | 	cmps	arg03, #0 wc
2bec4     00 03 02 36 |  if_ae	mov	_var02, _var01
2bec8     01 00 06 31 |  if_ae	add	_var01, #1
2becc     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2bed0     E8 FF 9F 3D |  if_ae	jmp	#LR__4072
2bed4                 | LR__4073
2bed4     09 FB 01 F6 | 	mov	result1, arg01
2bed8                 | __system__strncpy_ret
2bed8     2D 00 64 FD | 	ret
2bedc                 | 
2bedc                 | __system__strncat
2bedc     00 14 4E F2 | 	cmps	arg02, #0 wz
2bee0     50 00 90 AD |  if_e	jmp	#LR__4084
2bee4     01 16 16 F2 | 	cmp	arg03, #1 wc
2bee8     48 00 90 CD |  if_b	jmp	#LR__4084
2beec     09 01 02 F6 | 	mov	_var01, arg01
2bef0     97 1E 48 FB | 	callpa	#(@LR__4082-@LR__4080)>>2,fcache_load_ptr_
2bef4                 | LR__4080
2bef4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2bef8     01 00 06 51 |  if_ne	add	_var01, #1
2befc     F4 FF 9F 5D |  if_ne	jmp	#LR__4080
2bf00     0B 03 02 F6 | 	mov	_var02, arg03
2bf04                 | LR__4081
2bf04     0A 05 C2 FA | 	rdbyte	_var03, arg02
2bf08     02 07 02 F6 | 	mov	_var04, _var03
2bf0c     07 06 4E F7 | 	zerox	_var04, #7 wz
2bf10     01 14 06 F1 | 	add	arg02, #1
2bf14     18 00 90 AD |  if_e	jmp	#LR__4083
2bf18     01 02 86 F1 | 	sub	_var02, #1
2bf1c     00 02 56 F2 | 	cmps	_var02, #0 wc
2bf20     00 07 02 36 |  if_ae	mov	_var04, _var01
2bf24     01 00 06 31 |  if_ae	add	_var01, #1
2bf28     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
2bf2c     D4 FF 9F 3D |  if_ae	jmp	#LR__4081
2bf30                 | LR__4082
2bf30                 | LR__4083
2bf30     00 01 48 FC | 	wrbyte	#0, _var01
2bf34                 | LR__4084
2bf34     09 FB 01 F6 | 	mov	result1, arg01
2bf38                 | __system__strncat_ret
2bf38     2D 00 64 FD | 	ret
2bf3c                 | 
2bf3c                 | __system__strncmp
2bf3c     09 01 0A F6 | 	mov	_var01, arg01 wz
2bf40     14 00 90 5D |  if_ne	jmp	#LR__4090
2bf44     00 14 0E F2 | 	cmp	arg02, #0 wz
2bf48     01 02 66 56 |  if_ne	neg	_var02, #1
2bf4c     00 02 06 A6 |  if_e	mov	_var02, #0
2bf50     01 FB 01 F6 | 	mov	result1, _var02
2bf54     74 00 90 FD | 	jmp	#__system__strncmp_ret
2bf58                 | LR__4090
2bf58     00 14 0E F2 | 	cmp	arg02, #0 wz
2bf5c     01 FA 05 A6 |  if_e	mov	result1, #1
2bf60     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bf64     0B 05 02 F6 | 	mov	_var03, arg03
2bf68     97 16 48 FB | 	callpa	#(@LR__4092-@LR__4091)>>2,fcache_load_ptr_
2bf6c                 | LR__4091
2bf6c     00 07 C2 FA | 	rdbyte	_var04, _var01
2bf70     0A 09 02 F6 | 	mov	_var05, arg02
2bf74     04 0B C2 FA | 	rdbyte	_var06, _var05
2bf78     01 04 86 F1 | 	sub	_var03, #1
2bf7c     00 04 56 F2 | 	cmps	_var03, #0 wc
2bf80     01 00 06 F1 | 	add	_var01, #1
2bf84     01 14 06 F1 | 	add	arg02, #1
2bf88     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2bf8c     08 00 90 2D |  if_nc_and_z	jmp	#LR__4093
2bf90     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2bf94     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4091
2bf98                 | LR__4092
2bf98                 | LR__4093
2bf98     00 04 56 F2 | 	cmps	_var03, #0 wc
2bf9c     00 FA 05 C6 |  if_b	mov	result1, #0
2bfa0     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2bfa4     05 07 0A F2 | 	cmp	_var04, _var06 wz
2bfa8     00 FA 05 A6 |  if_e	mov	result1, #0
2bfac     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bfb0     00 06 0E F2 | 	cmp	_var04, #0 wz
2bfb4     01 FA 65 A6 |  if_e	neg	result1, #1
2bfb8     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2bfbc     00 0A 0E F2 | 	cmp	_var06, #0 wz
2bfc0     01 FA 05 A6 |  if_e	mov	result1, #1
2bfc4     03 FB 01 56 |  if_ne	mov	result1, _var04
2bfc8     05 FB 81 51 |  if_ne	sub	result1, _var06
2bfcc                 | __system__strncmp_ret
2bfcc     2D 00 64 FD | 	ret
2bfd0                 | 
2bfd0                 | __system____root_opendir
2bfd0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2bfd4     04 12 06 F1 | 	add	arg01, #4
2bfd8     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
2bfdc     00 FA 05 F6 | 	mov	result1, #0
2bfe0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2bfe4                 | __system____root_opendir_ret
2bfe4     2D 00 64 FD | 	ret
2bfe8                 | 
2bfe8                 | __system____root_readdir
2bfe8     03 4A 05 F6 | 	mov	COUNT_, #3
2bfec     A8 00 A0 FD | 	call	#pushregs_
2bff0     09 27 02 F6 | 	mov	local01, arg01
2bff4     0A 29 02 F6 | 	mov	local02, arg02
2bff8     04 26 06 F1 | 	add	local01, #4
2bffc     13 2B 02 FB | 	rdlong	local03, local01
2c000     04 26 86 F1 | 	sub	local01, #4
2c004                 | LR__4100
2c004     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2c008     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
2c00c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2c010     01 FA 65 A6 |  if_e	neg	result1, #1
2c014     48 00 90 AD |  if_e	jmp	#LR__4101
2c018     15 17 0A FB | 	rdlong	arg03, local03 wz
2c01c     04 2A 06 A1 |  if_e	add	local03, #4
2c020     E0 FF 9F AD |  if_e	jmp	#LR__4100
2c024     15 15 02 FB | 	rdlong	arg02, local03
2c028     01 14 06 F1 | 	add	arg02, #1
2c02c     14 13 02 F6 | 	mov	arg01, local02
2c030     40 16 06 F6 | 	mov	arg03, #64
2c034     58 FE BF FD | 	call	#__system__strncpy
2c038     50 28 06 F1 | 	add	local02, #80
2c03c     14 03 48 FC | 	wrbyte	#1, local02
2c040     08 28 86 F1 | 	sub	local02, #8
2c044     14 01 68 FC | 	wrlong	#0, local02
2c048     04 28 06 F1 | 	add	local02, #4
2c04c     14 01 68 FC | 	wrlong	#0, local02
2c050     04 2A 06 F1 | 	add	local03, #4
2c054     04 26 06 F1 | 	add	local01, #4
2c058     13 2B 62 FC | 	wrlong	local03, local01
2c05c     00 FA 05 F6 | 	mov	result1, #0
2c060                 | LR__4101
2c060     A7 F0 03 F6 | 	mov	ptra, fp
2c064     B2 00 A0 FD | 	call	#popregs_
2c068                 | __system____root_readdir_ret
2c068     2D 00 64 FD | 	ret
2c06c                 | 
2c06c                 | __system____root_closedir
2c06c     00 FA 05 F6 | 	mov	result1, #0
2c070                 | __system____root_closedir_ret
2c070     2D 00 64 FD | 	ret
2c074                 | 
2c074                 | __system____root_stat
2c074     0A 01 02 F6 | 	mov	_var01, arg02
2c078     00 13 02 F6 | 	mov	arg01, _var01
2c07c     00 14 06 F6 | 	mov	arg02, #0
2c080     30 16 06 F6 | 	mov	arg03, #48
2c084     98 00 A0 FD | 	call	#\builtin_bytefill_
2c088     08 00 06 F1 | 	add	_var01, #8
2c08c     08 00 80 FF 
2c090     00 FF 6B FC | 	wrlong	##4607, _var01
2c094     00 FA 05 F6 | 	mov	result1, #0
2c098                 | __system____root_stat_ret
2c098     2D 00 64 FD | 	ret
2c09c                 | 
2c09c                 | __system___normalizeName
2c09c     00 00 06 F6 | 	mov	_var01, #0
2c0a0     09 03 02 F6 | 	mov	_var02, arg01
2c0a4     01 05 02 F6 | 	mov	_var03, _var02
2c0a8                 | LR__4110
2c0a8     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c0ac     5C 01 90 AD |  if_e	jmp	#LR__4129
2c0b0     00 00 0E F2 | 	cmp	_var01, #0 wz
2c0b4     02 07 02 56 |  if_ne	mov	_var04, _var03
2c0b8     01 04 06 51 |  if_ne	add	_var03, #1
2c0bc     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
2c0c0     00 00 06 56 |  if_ne	mov	_var01, #0
2c0c4     01 07 C2 FA | 	rdbyte	_var04, _var02
2c0c8     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c0cc     D8 00 90 5D |  if_ne	jmp	#LR__4122
2c0d0     01 02 06 F1 | 	add	_var02, #1
2c0d4     01 07 C2 FA | 	rdbyte	_var04, _var02
2c0d8     01 02 86 F1 | 	sub	_var02, #1
2c0dc     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c0e0     18 00 90 AD |  if_e	jmp	#LR__4111
2c0e4     01 02 06 F1 | 	add	_var02, #1
2c0e8     01 09 C2 FA | 	rdbyte	_var05, _var02
2c0ec     01 02 86 F1 | 	sub	_var02, #1
2c0f0     04 0B 02 F6 | 	mov	_var06, _var05
2c0f4     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c0f8     10 00 90 5D |  if_ne	jmp	#LR__4112
2c0fc                 | LR__4111
2c0fc     01 0D 02 F6 | 	mov	_var07, _var02
2c100     01 0C 06 F1 | 	add	_var07, #1
2c104     06 03 02 F6 | 	mov	_var02, _var07
2c108     E0 00 90 FD | 	jmp	#LR__4126
2c10c                 | LR__4112
2c10c     01 02 06 F1 | 	add	_var02, #1
2c110     01 0D C2 FA | 	rdbyte	_var07, _var02
2c114     01 02 86 F1 | 	sub	_var02, #1
2c118     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c11c     2E 06 0E F2 | 	cmp	_var04, #46 wz
2c120     84 00 90 5D |  if_ne	jmp	#LR__4121
2c124     02 02 06 F1 | 	add	_var02, #2
2c128     01 0D C2 FA | 	rdbyte	_var07, _var02
2c12c     02 02 86 F1 | 	sub	_var02, #2
2c130     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
2c134     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c138     18 00 90 AD |  if_e	jmp	#LR__4113
2c13c     02 02 06 F1 | 	add	_var02, #2
2c140     01 09 C2 FA | 	rdbyte	_var05, _var02
2c144     02 02 86 F1 | 	sub	_var02, #2
2c148     04 0B 02 F6 | 	mov	_var06, _var05
2c14c     07 0A 4E F7 | 	zerox	_var06, #7 wz
2c150     54 00 90 5D |  if_ne	jmp	#LR__4120
2c154                 | LR__4113
2c154     02 02 06 F1 | 	add	_var02, #2
2c158     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2c15c     40 00 90 ED |  if_be	jmp	#LR__4119
2c160     02 0F 02 F6 | 	mov	_var08, _var03
2c164     01 0E 86 F1 | 	sub	_var08, #1
2c168                 | LR__4114
2c168     07 07 C2 FA | 	rdbyte	_var04, _var08
2c16c     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c170     0C 00 90 5D |  if_ne	jmp	#LR__4115
2c174     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c178     01 0E 86 11 |  if_a	sub	_var08, #1
2c17c     E8 FF 9F 1D |  if_a	jmp	#LR__4114
2c180                 | LR__4115
2c180     97 0C 48 FB | 	callpa	#(@LR__4117-@LR__4116)>>2,fcache_load_ptr_
2c184                 | LR__4116
2c184     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
2c188     10 00 90 ED |  if_be	jmp	#LR__4118
2c18c     07 07 C2 FA | 	rdbyte	_var04, _var08
2c190     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c194     01 0E 86 51 |  if_ne	sub	_var08, #1
2c198     E8 FF 9F 5D |  if_ne	jmp	#LR__4116
2c19c                 | LR__4117
2c19c                 | LR__4118
2c19c     07 05 02 F6 | 	mov	_var03, _var08
2c1a0                 | LR__4119
2c1a0     01 00 06 F6 | 	mov	_var01, #1
2c1a4     44 00 90 FD | 	jmp	#LR__4126
2c1a8                 | LR__4120
2c1a8                 | LR__4121
2c1a8                 | LR__4122
2c1a8     97 18 48 FB | 	callpa	#(@LR__4124-@LR__4123)>>2,fcache_load_ptr_
2c1ac                 | LR__4123
2c1ac     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2c1b0     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
2c1b4     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
2c1b8     20 00 90 AD |  if_e	jmp	#LR__4125
2c1bc     01 0B 02 F6 | 	mov	_var06, _var02
2c1c0     01 09 02 F6 | 	mov	_var05, _var02
2c1c4     01 08 06 F1 | 	add	_var05, #1
2c1c8     05 11 C2 FA | 	rdbyte	_var09, _var06
2c1cc     04 03 02 F6 | 	mov	_var02, _var05
2c1d0     02 11 42 FC | 	wrbyte	_var09, _var03
2c1d4     01 04 06 F1 | 	add	_var03, #1
2c1d8     D0 FF 9F FD | 	jmp	#LR__4123
2c1dc                 | LR__4124
2c1dc                 | LR__4125
2c1dc     01 07 C2 FA | 	rdbyte	_var04, _var02
2c1e0     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1e4     C0 FE 9F 5D |  if_ne	jmp	#LR__4110
2c1e8     01 00 06 F6 | 	mov	_var01, #1
2c1ec                 | LR__4126
2c1ec     97 0C 48 FB | 	callpa	#(@LR__4128-@LR__4127)>>2,fcache_load_ptr_
2c1f0                 | LR__4127
2c1f0     01 07 C2 FA | 	rdbyte	_var04, _var02
2c1f4     2F 06 0E F2 | 	cmp	_var04, #47 wz
2c1f8     01 0D 02 A6 |  if_e	mov	_var07, _var02
2c1fc     01 0C 06 A1 |  if_e	add	_var07, #1
2c200     06 03 02 A6 |  if_e	mov	_var02, _var07
2c204     E8 FF 9F AD |  if_e	jmp	#LR__4127
2c208                 | LR__4128
2c208     9C FE 9F FD | 	jmp	#LR__4110
2c20c                 | LR__4129
2c20c     02 01 48 FC | 	wrbyte	#0, _var03
2c210                 | __system___normalizeName_ret
2c210     2D 00 64 FD | 	ret
2c214                 | 
2c214                 | __system___strrev
2c214     09 01 CA FA | 	rdbyte	_var01, arg01 wz
2c218     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
2c21c     09 03 02 F6 | 	mov	_var02, arg01
2c220     97 1A 48 FB | 	callpa	#(@LR__4132-@LR__4130)>>2,fcache_load_ptr_
2c224                 | LR__4130
2c224     01 01 CA FA | 	rdbyte	_var01, _var02 wz
2c228     01 02 06 51 |  if_ne	add	_var02, #1
2c22c     F4 FF 9F 5D |  if_ne	jmp	#LR__4130
2c230     01 02 86 F1 | 	sub	_var02, #1
2c234                 | LR__4131
2c234     09 03 5A F2 | 	cmps	_var02, arg01 wcz
2c238     1C 00 90 ED |  if_be	jmp	#LR__4133
2c23c     09 01 C2 FA | 	rdbyte	_var01, arg01
2c240     01 05 C2 FA | 	rdbyte	_var03, _var02
2c244     09 05 42 FC | 	wrbyte	_var03, arg01
2c248     01 01 42 FC | 	wrbyte	_var01, _var02
2c24c     01 12 06 F1 | 	add	arg01, #1
2c250     01 02 86 F1 | 	sub	_var02, #1
2c254     DC FF 9F FD | 	jmp	#LR__4131
2c258                 | LR__4132
2c258                 | LR__4133
2c258                 | __system___strrev_ret
2c258     2D 00 64 FD | 	ret
2c25c                 | 
2c25c                 | __system___fmtpad
2c25c     06 4A 05 F6 | 	mov	COUNT_, #6
2c260     A8 00 A0 FD | 	call	#pushregs_
2c264     09 27 02 F6 | 	mov	local01, arg01
2c268     0A 29 02 F6 | 	mov	local02, arg02
2c26c     0B 2B 02 F6 | 	mov	local03, arg03
2c270     14 13 EA F8 | 	getbyte	arg01, local02, #1
2c274     16 28 46 F0 | 	shr	local02, #22
2c278     03 28 0E F5 | 	and	local02, #3 wz
2c27c     00 2C 06 F6 | 	mov	local04, #0
2c280     01 28 06 A6 |  if_e	mov	local02, #1
2c284     0C 29 CA F7 | 	test	local02, arg04 wz
2c288     00 FA 05 A6 |  if_e	mov	result1, #0
2c28c     88 00 90 AD |  if_e	jmp	#LR__4143
2c290     09 2B C2 F2 | 	subr	local03, arg01
2c294     01 2A 56 F2 | 	cmps	local03, #1 wc
2c298     00 FA 05 C6 |  if_b	mov	result1, #0
2c29c     78 00 90 CD |  if_b	jmp	#LR__4143
2c2a0     03 28 0E F2 | 	cmp	local02, #3 wz
2c2a4     18 00 90 5D |  if_ne	jmp	#LR__4140
2c2a8     01 18 0E F2 | 	cmp	arg04, #1 wz
2c2ac     6E 28 62 FD | 	wrz	local02
2c2b0     14 2B 02 F1 | 	add	local03, local02
2c2b4     15 2B 52 F6 | 	abs	local03, local03 wc
2c2b8     01 2A 46 F0 | 	shr	local03, #1
2c2bc     15 2B 82 F6 | 	negc	local03, local03
2c2c0                 | LR__4140
2c2c0     01 2A 56 F2 | 	cmps	local03, #1 wc
2c2c4     4C 00 90 CD |  if_b	jmp	#LR__4142
2c2c8     15 2F 02 F6 | 	mov	local05, local03
2c2cc                 | LR__4141
2c2cc     13 29 02 F6 | 	mov	local02, local01
2c2d0     13 31 02 F6 | 	mov	local06, local01
2c2d4     13 28 46 F7 | 	zerox	local02, #19
2c2d8     14 30 46 F0 | 	shr	local06, #20
2c2dc     02 30 66 F0 | 	shl	local06, #2
2c2e0     ED 30 02 F1 | 	add	local06, __methods__
2c2e4     18 31 02 FB | 	rdlong	local06, local06
2c2e8     20 12 06 F6 | 	mov	arg01, #32
2c2ec     F2 2A 02 F6 | 	mov	local03, objptr
2c2f0     14 E5 01 F6 | 	mov	objptr, local02
2c2f4     2D 30 62 FD | 	call	local06
2c2f8     15 E5 01 F6 | 	mov	objptr, local03
2c2fc     FD 30 02 F6 | 	mov	local06, result1
2c300     00 30 56 F2 | 	cmps	local06, #0 wc
2c304     18 FB 01 C6 |  if_b	mov	result1, local06
2c308     0C 00 90 CD |  if_b	jmp	#LR__4143
2c30c     18 2D 02 F1 | 	add	local04, local06
2c310     EE 2F 6E FB | 	djnz	local05, #LR__4141
2c314                 | LR__4142
2c314     16 FB 01 F6 | 	mov	result1, local04
2c318                 | LR__4143
2c318     A7 F0 03 F6 | 	mov	ptra, fp
2c31c     B2 00 A0 FD | 	call	#popregs_
2c320                 | __system___fmtpad_ret
2c320     2D 00 64 FD | 	ret
2c324                 | 
2c324                 | __system___uitoa
2c324     04 4A 05 F6 | 	mov	COUNT_, #4
2c328     A8 00 A0 FD | 	call	#pushregs_
2c32c     09 27 02 F6 | 	mov	local01, arg01
2c330     00 1A 4E F2 | 	cmps	arg05, #0 wz
2c334     13 1B 02 F6 | 	mov	arg05, local01
2c338     00 28 06 F6 | 	mov	local02, #0
2c33c     37 2A 06 56 |  if_ne	mov	local03, #55
2c340     57 2A 06 A6 |  if_e	mov	local03, #87
2c344                 | LR__4150
2c344     0B 15 12 FD | 	qdiv	arg02, arg03
2c348     19 2C 62 FD | 	getqy	local04
2c34c     0B 15 12 FD | 	qdiv	arg02, arg03
2c350     0A 2C 16 F2 | 	cmp	local04, #10 wc
2c354     30 2C 06 C1 |  if_b	add	local04, #48
2c358     15 2D 02 31 |  if_ae	add	local04, local03
2c35c     0D 2D 42 FC | 	wrbyte	local04, arg05
2c360     01 1A 06 F1 | 	add	arg05, #1
2c364     01 28 06 F1 | 	add	local02, #1
2c368     18 14 62 FD | 	getqx	arg02
2c36c     00 14 0E F2 | 	cmp	arg02, #0 wz
2c370     D0 FF 9F 5D |  if_ne	jmp	#LR__4150
2c374     0C 29 12 F2 | 	cmp	local02, arg04 wc
2c378     C8 FF 9F CD |  if_b	jmp	#LR__4150
2c37c     0D 01 48 FC | 	wrbyte	#0, arg05
2c380     13 13 02 F6 | 	mov	arg01, local01
2c384     8C FE BF FD | 	call	#__system___strrev
2c388     14 FB 01 F6 | 	mov	result1, local02
2c38c     A7 F0 03 F6 | 	mov	ptra, fp
2c390     B2 00 A0 FD | 	call	#popregs_
2c394                 | __system___uitoa_ret
2c394     2D 00 64 FD | 	ret
2c398                 | 
2c398                 | __system__disassemble_0563
2c398     10 4A 05 F6 | 	mov	COUNT_, #16
2c39c     A8 00 A0 FD | 	call	#pushregs_
2c3a0     09 27 02 F6 | 	mov	local01, arg01
2c3a4     0A 29 02 F6 | 	mov	local02, arg02
2c3a8     0B 2B 02 F6 | 	mov	local03, arg03
2c3ac     0C 2D 02 F6 | 	mov	local04, arg04
2c3b0     0D 2F 02 F6 | 	mov	local05, arg05
2c3b4     17 13 52 F6 | 	abs	arg01, local05 wc
2c3b8     1F 30 C6 C9 |  if_b	decod	local06, #31
2c3bc     00 30 06 36 |  if_ae	mov	local06, #0
2c3c0     CC CF BF FD | 	call	#__system___float_fromuns
2c3c4     18 FB 61 F5 | 	xor	result1, local06
2c3c8     FD 32 02 F6 | 	mov	local07, result1
2c3cc     00 34 06 F6 | 	mov	local08, #0
2c3d0     13 13 02 F6 | 	mov	arg01, local01
2c3d4     00 14 06 F6 | 	mov	arg02, #0
2c3d8     01 16 06 F6 | 	mov	arg03, #1
2c3dc     E8 D7 BF FD | 	call	#__system___float_cmp
2c3e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3e4     00 36 06 A6 |  if_e	mov	local09, #0
2c3e8     14 01 68 AC |  if_e	wrlong	#0, local02
2c3ec     15 37 62 AC |  if_e	wrlong	local09, local03
2c3f0     8C 01 90 AD |  if_e	jmp	#LR__4172
2c3f4     13 13 02 F6 | 	mov	arg01, local01
2c3f8     BC DC BF FD | 	call	#__system____builtin_ilogb
2c3fc     FD 38 02 F6 | 	mov	local10, result1
2c400     0A 2E 0E F2 | 	cmp	local05, #10 wz
2c404     24 00 90 5D |  if_ne	jmp	#LR__4160
2c408     1C 37 02 F6 | 	mov	local09, local10
2c40c     01 36 66 F0 | 	shl	local09, #1
2c410     1C 37 02 F1 | 	add	local09, local10
2c414     1B 39 52 F6 | 	abs	local10, local09 wc
2c418     0A 38 16 FD | 	qdiv	local10, #10
2c41c     09 3A 06 F6 | 	mov	local11, #9
2c420     18 38 62 FD | 	getqx	local10
2c424     1C 39 82 F6 | 	negc	local10, local10
2c428     04 00 90 FD | 	jmp	#LR__4161
2c42c                 | LR__4160
2c42c     18 3A 06 F6 | 	mov	local11, #24
2c430                 | LR__4161
2c430                 | LR__4162
2c430     08 34 56 F2 | 	cmps	local08, #8 wc
2c434     01 34 06 F1 | 	add	local08, #1
2c438     60 00 90 3D |  if_ae	jmp	#LR__4163
2c43c     00 C0 1F FF 
2c440     00 12 06 F6 | 	mov	arg01, ##1065353216
2c444     19 15 02 F6 | 	mov	arg02, local07
2c448     1C 17 02 F6 | 	mov	arg03, local10
2c44c     4C E3 BF FD | 	call	#__system___float_pow_n
2c450     FD 14 02 F6 | 	mov	arg02, result1
2c454     13 13 02 F6 | 	mov	arg01, local01
2c458     3C D5 BF FD | 	call	#__system___float_div
2c45c     FD 3C 02 F6 | 	mov	local12, result1
2c460     1E 13 02 F6 | 	mov	arg01, local12
2c464     00 C0 1F FF 
2c468     00 14 06 F6 | 	mov	arg02, ##1065353216
2c46c     01 16 06 F6 | 	mov	arg03, #1
2c470     54 D7 BF FD | 	call	#__system___float_cmp
2c474     00 FA 55 F2 | 	cmps	result1, #0 wc
2c478     01 38 86 C1 |  if_b	sub	local10, #1
2c47c     B0 FF 9F CD |  if_b	jmp	#LR__4162
2c480     19 15 02 F6 | 	mov	arg02, local07
2c484     1E 13 02 F6 | 	mov	arg01, local12
2c488     01 16 66 F6 | 	neg	arg03, #1
2c48c     38 D7 BF FD | 	call	#__system___float_cmp
2c490     00 FA 55 F2 | 	cmps	result1, #0 wc
2c494     01 38 06 31 |  if_ae	add	local10, #1
2c498     94 FF 9F 3D |  if_ae	jmp	#LR__4162
2c49c                 | LR__4163
2c49c     1E 13 02 F6 | 	mov	arg01, local12
2c4a0     14 DC BF FD | 	call	#__system____builtin_ilogb
2c4a4     FD 3E 02 F6 | 	mov	local13, result1
2c4a8     1E 41 02 F6 | 	mov	local14, local12
2c4ac     17 41 06 F4 | 	bitl	local14, #279
2c4b0     17 40 26 F4 | 	bith	local14, #23
2c4b4     1F 41 62 F0 | 	shl	local14, local13
2c4b8     02 2E 0E F2 | 	cmp	local05, #2 wz
2c4bc     02 2C 66 A0 |  if_e	shl	local04, #2
2c4c0     00 42 06 F6 | 	mov	local15, #0
2c4c4     00 2C 56 F2 | 	cmps	local04, #0 wc
2c4c8     10 00 90 3D |  if_ae	jmp	#LR__4164
2c4cc     1C 2D C2 F2 | 	subr	local04, local10
2c4d0     00 2C 56 F2 | 	cmps	local04, #0 wc
2c4d4     A0 00 90 CD |  if_b	jmp	#LR__4171
2c4d8     04 00 90 FD | 	jmp	#LR__4165
2c4dc                 | LR__4164
2c4dc     01 2C 06 F1 | 	add	local04, #1
2c4e0                 | LR__4165
2c4e0     1D 2D 7A F3 | 	fles	local04, local11 wcz
2c4e4     01 44 06 F6 | 	mov	local16, #1
2c4e8     97 22 48 FB | 	callpa	#(@LR__4167-@LR__4166)>>2,fcache_load_ptr_
2c4ec                 | LR__4166
2c4ec     00 40 00 FF 
2c4f0     00 42 16 F2 | 	cmp	local15, ##8388608 wc
2c4f4     38 00 90 3D |  if_ae	jmp	#LR__4168
2c4f8     01 2C 56 F2 | 	cmps	local04, #1 wc
2c4fc     01 2C 86 F1 | 	sub	local04, #1
2c500     2C 00 90 CD |  if_b	jmp	#LR__4168
2c504     17 43 02 FD | 	qmul	local15, local05
2c508     20 3F 02 F6 | 	mov	local13, local14
2c50c     17 3E 46 F0 | 	shr	local13, #23
2c510     17 41 06 F4 | 	bitl	local14, #279
2c514     18 42 62 FD | 	getqx	local15
2c518     17 45 02 FD | 	qmul	local16, local05
2c51c     18 44 62 FD | 	getqx	local16
2c520     17 41 02 FD | 	qmul	local14, local05
2c524     1F 43 02 F1 | 	add	local15, local13
2c528     18 40 62 FD | 	getqx	local14
2c52c     BC FF 9F FD | 	jmp	#LR__4166
2c530                 | LR__4167
2c530                 | LR__4168
2c530     17 37 02 F6 | 	mov	local09, local05
2c534     17 36 66 F0 | 	shl	local09, #23
2c538     1B 3F 52 F6 | 	abs	local13, local09 wc
2c53c     01 3E 46 F0 | 	shr	local13, #1
2c540     1F 3F 82 F6 | 	negc	local13, local13
2c544     1F 41 1A F2 | 	cmp	local14, local13 wcz
2c548     20 00 90 1D |  if_a	jmp	#LR__4169
2c54c     17 2E 66 F0 | 	shl	local05, #23
2c550     17 3F 52 F6 | 	abs	local13, local05 wc
2c554     01 3E 46 F0 | 	shr	local13, #1
2c558     1F 3F 82 F6 | 	negc	local13, local13
2c55c     1F 41 0A F2 | 	cmp	local14, local13 wz
2c560     14 00 90 5D |  if_ne	jmp	#LR__4170
2c564     01 42 CE F7 | 	test	local15, #1 wz
2c568     0C 00 90 AD |  if_e	jmp	#LR__4170
2c56c                 | LR__4169
2c56c     01 42 06 F1 | 	add	local15, #1
2c570     22 43 0A F2 | 	cmp	local15, local16 wz
2c574     01 38 06 A1 |  if_e	add	local10, #1
2c578                 | LR__4170
2c578                 | LR__4171
2c578     14 43 62 FC | 	wrlong	local15, local02
2c57c     15 39 62 FC | 	wrlong	local10, local03
2c580                 | LR__4172
2c580     A7 F0 03 F6 | 	mov	ptra, fp
2c584     B2 00 A0 FD | 	call	#popregs_
2c588                 | __system__disassemble_0563_ret
2c588     2D 00 64 FD | 	ret
2c58c                 | 
2c58c                 | __system__emitsign_0565
2c58c     00 FA 05 F6 | 	mov	result1, #0
2c590     00 14 0E F2 | 	cmp	arg02, #0 wz
2c594     09 01 02 56 |  if_ne	mov	_var01, arg01
2c598     01 12 06 51 |  if_ne	add	arg01, #1
2c59c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
2c5a0     01 FA 05 56 |  if_ne	mov	result1, #1
2c5a4     00 16 0E F2 | 	cmp	arg03, #0 wz
2c5a8     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2c5ac     01 12 06 51 |  if_ne	add	arg01, #1
2c5b0     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
2c5b4     02 FA 05 51 |  if_ne	add	result1, #2
2c5b8                 | __system__emitsign_0565_ret
2c5b8     2D 00 64 FD | 	ret
2c5bc                 | 
2c5bc                 | __system___getiolock_0603
2c5bc     01 4A 05 F6 | 	mov	COUNT_, #1
2c5c0     A8 00 A0 FD | 	call	#pushregs_
2c5c4     A0 F8 BF FD | 	call	#__system____getftab
2c5c8     FD 26 0A F6 | 	mov	local01, result1 wz
2c5cc     10 00 90 AD |  if_e	jmp	#LR__4180
2c5d0     08 26 06 F1 | 	add	local01, #8
2c5d4     13 FB 09 FB | 	rdlong	result1, local01 wz
2c5d8     08 26 86 F1 | 	sub	local01, #8
2c5dc     18 00 90 5D |  if_ne	jmp	#LR__4181
2c5e0                 | LR__4180
2c5e0     01 00 00 FF 
2c5e4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
2c5e8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2c5ec     01 00 00 FF 
2c5f0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
2c5f4     08 00 90 FD | 	jmp	#LR__4182
2c5f8                 | LR__4181
2c5f8     0C 26 06 F1 | 	add	local01, #12
2c5fc     13 FB 01 F6 | 	mov	result1, local01
2c600                 | LR__4182
2c600     A7 F0 03 F6 | 	mov	ptra, fp
2c604     B2 00 A0 FD | 	call	#popregs_
2c608                 | __system___getiolock_0603_ret
2c608     2D 00 64 FD | 	ret
2c60c                 | 
2c60c                 | __system___gettxfunc
2c60c     01 4A 05 F6 | 	mov	COUNT_, #1
2c610     A8 00 A0 FD | 	call	#pushregs_
2c614     50 F8 BF FD | 	call	#__system____getftab
2c618     FD 26 0A F6 | 	mov	local01, result1 wz
2c61c     10 00 90 AD |  if_e	jmp	#LR__4190
2c620     08 26 06 F1 | 	add	local01, #8
2c624     13 15 0A FB | 	rdlong	arg02, local01 wz
2c628     08 26 86 F1 | 	sub	local01, #8
2c62c     08 00 90 5D |  if_ne	jmp	#LR__4191
2c630                 | LR__4190
2c630     00 FA 05 F6 | 	mov	result1, #0
2c634     0C 00 90 FD | 	jmp	#LR__4192
2c638                 | LR__4191
2c638     00 28 05 FF 
2c63c     00 26 46 F5 | 	or	local01, ##173015040
2c640     13 FB 01 F6 | 	mov	result1, local01
2c644                 | LR__4192
2c644     A7 F0 03 F6 | 	mov	ptra, fp
2c648     B2 00 A0 FD | 	call	#popregs_
2c64c                 | __system___gettxfunc_ret
2c64c     2D 00 64 FD | 	ret
2c650                 | 
2c650                 | __system___getrxfunc
2c650     01 4A 05 F6 | 	mov	COUNT_, #1
2c654     A8 00 A0 FD | 	call	#pushregs_
2c658     0C F8 BF FD | 	call	#__system____getftab
2c65c     FD 26 0A F6 | 	mov	local01, result1 wz
2c660     10 00 90 AD |  if_e	jmp	#LR__4200
2c664     08 26 06 F1 | 	add	local01, #8
2c668     13 15 0A FB | 	rdlong	arg02, local01 wz
2c66c     08 26 86 F1 | 	sub	local01, #8
2c670     08 00 90 5D |  if_ne	jmp	#LR__4201
2c674                 | LR__4200
2c674     00 FA 05 F6 | 	mov	result1, #0
2c678     0C 00 90 FD | 	jmp	#LR__4202
2c67c                 | LR__4201
2c67c     00 30 05 FF 
2c680     00 26 46 F5 | 	or	local01, ##174063616
2c684     13 FB 01 F6 | 	mov	result1, local01
2c688                 | LR__4202
2c688     A7 F0 03 F6 | 	mov	ptra, fp
2c68c     B2 00 A0 FD | 	call	#popregs_
2c690                 | __system___getrxfunc_ret
2c690     2D 00 64 FD | 	ret
2c694                 | 
2c694                 | __system____ScanForChar
2c694     09 01 02 F6 | 	mov	_var01, arg01
2c698     09 03 02 F6 | 	mov	_var02, arg01
2c69c     97 06 48 FB | 	callpa	#(@LR__4211-@LR__4210)>>2,fcache_load_ptr_
2c6a0                 | LR__4210
2c6a0     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2c6a4     01 02 06 51 |  if_ne	add	_var02, #1
2c6a8     F4 FF 9F 5D |  if_ne	jmp	#LR__4210
2c6ac                 | LR__4211
2c6ac     09 03 82 F1 | 	sub	_var02, arg01
2c6b0     01 FB 01 F6 | 	mov	result1, _var02
2c6b4     FD 12 0A F6 | 	mov	arg01, result1 wz
2c6b8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6bc     B8 00 90 AD |  if_e	jmp	#LR__4218
2c6c0     0A 05 02 F6 | 	mov	_var03, arg02
2c6c4     07 04 4E F7 | 	zerox	_var03, #7 wz
2c6c8     00 FA 05 A6 |  if_e	mov	result1, #0
2c6cc     A8 00 90 AD |  if_e	jmp	#LR__4218
2c6d0     01 16 16 F2 | 	cmp	arg03, #1 wc
2c6d4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
2c6d8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
2c6dc     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
2c6e0     94 00 90 4D |  if_c_and_nz	jmp	#LR__4218
2c6e4     09 17 1A F2 | 	cmp	arg03, arg01 wcz
2c6e8     10 00 90 ED |  if_be	jmp	#LR__4212
2c6ec     00 18 0E F2 | 	cmp	arg04, #0 wz
2c6f0     00 FA 05 A6 |  if_e	mov	result1, #0
2c6f4     80 00 90 AD |  if_e	jmp	#LR__4218
2c6f8     09 17 02 F6 | 	mov	arg03, arg01
2c6fc                 | LR__4212
2c6fc     01 16 86 F1 | 	sub	arg03, #1
2c700     00 18 0E F2 | 	cmp	arg04, #0 wz
2c704     38 00 90 5D |  if_ne	jmp	#LR__4214
2c708     0B 07 02 F6 | 	mov	_var04, arg03
2c70c     09 09 02 F6 | 	mov	_var05, arg01
2c710                 | LR__4213
2c710     04 07 12 F2 | 	cmp	_var04, _var05 wc
2c714     5C 00 90 3D |  if_ae	jmp	#LR__4217
2c718     03 05 02 F6 | 	mov	_var03, _var04
2c71c     00 05 02 F1 | 	add	_var03, _var01
2c720     02 05 C2 FA | 	rdbyte	_var03, _var03
2c724     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2c728     0C 05 0A F2 | 	cmp	_var03, arg04 wz
2c72c     01 06 06 A1 |  if_e	add	_var04, #1
2c730     03 FB 01 A6 |  if_e	mov	result1, _var04
2c734     40 00 90 AD |  if_e	jmp	#LR__4218
2c738     01 06 06 F1 | 	add	_var04, #1
2c73c     D0 FF 9F FD | 	jmp	#LR__4213
2c740                 | LR__4214
2c740     0B 07 02 F6 | 	mov	_var04, arg03
2c744                 | LR__4215
2c744     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2c748     28 00 90 1D |  if_a	jmp	#LR__4216
2c74c     03 09 02 F6 | 	mov	_var05, _var04
2c750     00 09 02 F1 | 	add	_var05, _var01
2c754     04 05 C2 FA | 	rdbyte	_var03, _var05
2c758     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
2c75c     04 05 0A F2 | 	cmp	_var03, _var05 wz
2c760     01 06 06 A1 |  if_e	add	_var04, #1
2c764     03 FB 01 A6 |  if_e	mov	result1, _var04
2c768     0C 00 90 AD |  if_e	jmp	#LR__4218
2c76c     01 06 86 F1 | 	sub	_var04, #1
2c770     D0 FF 9F FD | 	jmp	#LR__4215
2c774                 | LR__4216
2c774                 | LR__4217
2c774     00 FA 05 F6 | 	mov	result1, #0
2c778                 | LR__4218
2c778                 | __system____ScanForChar_ret
2c778     2D 00 64 FD | 	ret
2c77c                 | 
2c77c                 | __system___basic_dir
2c77c     05 4A 05 F6 | 	mov	COUNT_, #5
2c780     A8 00 A0 FD | 	call	#pushregs_
2c784     4C F0 07 F1 | 	add	ptra, #76
2c788     04 4E 05 F1 | 	add	fp, #4
2c78c     A7 12 62 FC | 	wrlong	arg01, fp
2c790     04 4E 05 F1 | 	add	fp, #4
2c794     A7 14 62 FC | 	wrlong	arg02, fp
2c798     04 4E 85 F1 | 	sub	fp, #4
2c79c     A7 14 0A FB | 	rdlong	arg02, fp wz
2c7a0     04 4E 85 F1 | 	sub	fp, #4
2c7a4     04 4E 05 51 |  if_ne	add	fp, #4
2c7a8     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c7ac     04 4E 85 51 |  if_ne	sub	fp, #4
2c7b0     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
2c7b4     70 00 90 AD |  if_e	jmp	#LR__4220
2c7b8     03 00 00 FF 
2c7bc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c7c0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c7c4     03 00 00 FF 
2c7c8     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c7cc     03 00 00 5F 
2c7d0     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2c7d4     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
2c7d8     03 00 00 5F 
2c7dc     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
2c7e0     D8 E9 BF 5D |  if_ne	call	#__system__closedir
2c7e4     B2 01 00 FF 
2c7e8     94 12 06 F6 | 	mov	arg01, ##@LR__5388
2c7ec     E0 E8 BF FD | 	call	#__system__opendir
2c7f0     03 00 00 FF 
2c7f4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c7f8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
2c7fc     08 4E 05 F1 | 	add	fp, #8
2c800     A7 28 02 FB | 	rdlong	local02, fp
2c804     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c808     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c80c     04 4E 85 F1 | 	sub	fp, #4
2c810     A7 28 02 FB | 	rdlong	local02, fp
2c814     04 4E 85 F1 | 	sub	fp, #4
2c818     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2c81c     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
2c820     03 00 00 FF 
2c824     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c828                 | LR__4220
2c828     03 00 00 FF 
2c82c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c830     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c834     03 00 00 FF 
2c838     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c83c     B2 01 00 AF 
2c840     96 FA 05 A6 |  if_e	mov	result1, ##@LR__5389
2c844     84 02 90 AD |  if_e	jmp	#LR__4233
2c848                 | LR__4221
2c848     03 00 00 FF 
2c84c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c850     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c854     03 00 00 FF 
2c858     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c85c     D0 E9 BF FD | 	call	#__system__readdir
2c860     0C 4E 05 F1 | 	add	fp, #12
2c864     A7 FA 61 FC | 	wrlong	result1, fp
2c868     0C 4E 85 F1 | 	sub	fp, #12
2c86c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c870     38 00 90 5D |  if_ne	jmp	#LR__4222
2c874     03 00 00 FF 
2c878     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c87c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2c880     03 00 00 FF 
2c884     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c888     30 E9 BF FD | 	call	#__system__closedir
2c88c     03 00 00 FF 
2c890     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
2c894     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2c898     03 00 00 FF 
2c89c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2c8a0     B2 01 00 FF 
2c8a4     98 FA 05 F6 | 	mov	result1, ##@LR__5390
2c8a8     20 02 90 FD | 	jmp	#LR__4233
2c8ac                 | LR__4222
2c8ac     0C 4E 05 F1 | 	add	fp, #12
2c8b0     A7 12 02 FB | 	rdlong	arg01, fp
2c8b4     0C 4E 85 F1 | 	sub	fp, #12
2c8b8     03 00 00 FF 
2c8bc     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
2c8c0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2c8c4     03 00 00 FF 
2c8c8     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2c8cc     10 09 B0 FD | 	call	#__system___pat_match
2c8d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c8d4     70 FF 9F AD |  if_e	jmp	#LR__4221
2c8d8     03 00 00 FF 
2c8dc     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2c8e0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2c8e4     03 00 00 FF 
2c8e8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2c8ec     78 01 90 AD |  if_e	jmp	#LR__4229
2c8f0     0C 4E 05 F1 | 	add	fp, #12
2c8f4     A7 12 02 FB | 	rdlong	arg01, fp
2c8f8     04 4E 05 F1 | 	add	fp, #4
2c8fc     A7 14 02 F6 | 	mov	arg02, fp
2c900     10 4E 85 F1 | 	sub	fp, #16
2c904     2C F2 BF FD | 	call	#__system__stat
2c908     40 4E 05 F1 | 	add	fp, #64
2c90c     A7 FA 61 FC | 	wrlong	result1, fp
2c910     40 4E 85 F1 | 	sub	fp, #64
2c914     00 FA 0D F2 | 	cmp	result1, #0 wz
2c918     B2 01 00 5F 
2c91c     9A FA 05 56 |  if_ne	mov	result1, ##@LR__5391
2c920     A8 01 90 5D |  if_ne	jmp	#LR__4233
2c924     18 4E 05 F1 | 	add	fp, #24
2c928     A7 28 02 FB | 	rdlong	local02, fp
2c92c     78 00 00 FF 
2c930     00 28 06 F5 | 	and	local02, ##61440
2c934     2C 4E 05 F1 | 	add	fp, #44
2c938     A7 28 62 FC | 	wrlong	local02, fp
2c93c     38 4E 85 F1 | 	sub	fp, #56
2c940     A7 28 02 FB | 	rdlong	local02, fp
2c944     0C 4E 85 F1 | 	sub	fp, #12
2c948     14 29 C2 FA | 	rdbyte	local02, local02
2c94c     2E 28 0E F2 | 	cmp	local02, #46 wz
2c950     08 4E 05 A1 |  if_e	add	fp, #8
2c954     A7 04 68 AC |  if_e	wrlong	#2, fp
2c958     08 4E C5 F3 | 	sumz	fp, #8
2c95c     A7 00 68 5C |  if_ne	wrlong	#0, fp
2c960     08 4E 85 51 |  if_ne	sub	fp, #8
2c964     44 4E 05 F1 | 	add	fp, #68
2c968     A7 28 02 FB | 	rdlong	local02, fp
2c96c     44 4E 85 F1 | 	sub	fp, #68
2c970     08 00 00 FF 
2c974     00 28 0E F2 | 	cmp	local02, ##4096 wz
2c978     18 00 90 5D |  if_ne	jmp	#LR__4223
2c97c     08 4E 05 F1 | 	add	fp, #8
2c980     A7 28 02 FB | 	rdlong	local02, fp
2c984     10 28 46 F5 | 	or	local02, #16
2c988     A7 28 62 FC | 	wrlong	local02, fp
2c98c     08 4E 85 F1 | 	sub	fp, #8
2c990     AC 00 90 FD | 	jmp	#LR__4228
2c994                 | LR__4223
2c994     44 4E 05 F1 | 	add	fp, #68
2c998     A7 28 02 FB | 	rdlong	local02, fp
2c99c     44 4E 85 F1 | 	sub	fp, #68
2c9a0     10 00 00 FF 
2c9a4     00 28 0E F2 | 	cmp	local02, ##8192 wz
2c9a8     44 4E 05 51 |  if_ne	add	fp, #68
2c9ac     A7 26 02 5B |  if_ne	rdlong	local01, fp
2c9b0     44 4E 85 51 |  if_ne	sub	fp, #68
2c9b4     18 00 00 5F 
2c9b8     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
2c9bc     44 4E 05 51 |  if_ne	add	fp, #68
2c9c0     13 2B 02 56 |  if_ne	mov	local03, local01
2c9c4     44 4E 85 51 |  if_ne	sub	fp, #68
2c9c8     20 00 00 5F 
2c9cc     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
2c9d0     18 00 90 5D |  if_ne	jmp	#LR__4224
2c9d4     08 4E 05 F1 | 	add	fp, #8
2c9d8     A7 28 02 FB | 	rdlong	local02, fp
2c9dc     04 28 46 F5 | 	or	local02, #4
2c9e0     A7 28 62 FC | 	wrlong	local02, fp
2c9e4     08 4E 85 F1 | 	sub	fp, #8
2c9e8     54 00 90 FD | 	jmp	#LR__4227
2c9ec                 | LR__4224
2c9ec     18 4E 05 F1 | 	add	fp, #24
2c9f0     A7 28 02 FB | 	rdlong	local02, fp
2c9f4     18 4E 85 F1 | 	sub	fp, #24
2c9f8     92 28 CE F7 | 	test	local02, #146 wz
2c9fc     18 00 90 5D |  if_ne	jmp	#LR__4225
2ca00     08 4E 05 F1 | 	add	fp, #8
2ca04     A7 28 02 FB | 	rdlong	local02, fp
2ca08     01 28 46 F5 | 	or	local02, #1
2ca0c     A7 28 62 FC | 	wrlong	local02, fp
2ca10     08 4E 85 F1 | 	sub	fp, #8
2ca14     28 00 90 FD | 	jmp	#LR__4226
2ca18                 | LR__4225
2ca18     44 4E 05 F1 | 	add	fp, #68
2ca1c     A7 2C 02 FB | 	rdlong	local04, fp
2ca20     44 4E 85 F1 | 	sub	fp, #68
2ca24     08 00 00 FF 
2ca28     00 2C 0E F2 | 	cmp	local04, ##4096 wz
2ca2c     08 4E 05 51 |  if_ne	add	fp, #8
2ca30     A7 2C 02 5B |  if_ne	rdlong	local04, fp
2ca34     20 2C 46 55 |  if_ne	or	local04, #32
2ca38     A7 2C 62 5C |  if_ne	wrlong	local04, fp
2ca3c     08 4E 85 51 |  if_ne	sub	fp, #8
2ca40                 | LR__4226
2ca40                 | LR__4227
2ca40                 | LR__4228
2ca40     08 4E 05 F1 | 	add	fp, #8
2ca44     A7 2C 02 FB | 	rdlong	local04, fp
2ca48     08 4E 85 F1 | 	sub	fp, #8
2ca4c     03 00 00 FF 
2ca50     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
2ca54     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2ca58     03 00 00 FF 
2ca5c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
2ca60     13 2D CA F7 | 	test	local04, local01 wz
2ca64     E0 FD 9F AD |  if_e	jmp	#LR__4221
2ca68                 | LR__4229
2ca68     0C 4E 05 F1 | 	add	fp, #12
2ca6c     A7 12 02 FB | 	rdlong	arg01, fp
2ca70     0C 4E 85 F1 | 	sub	fp, #12
2ca74     09 2F 02 F6 | 	mov	local05, arg01
2ca78     97 06 48 FB | 	callpa	#(@LR__4231-@LR__4230)>>2,fcache_load_ptr_
2ca7c                 | LR__4230
2ca7c     17 FB C9 FA | 	rdbyte	result1, local05 wz
2ca80     01 2E 06 51 |  if_ne	add	local05, #1
2ca84     F4 FF 9F 5D |  if_ne	jmp	#LR__4230
2ca88                 | LR__4231
2ca88     17 13 C2 F2 | 	subr	arg01, local05
2ca8c     01 12 06 F1 | 	add	arg01, #1
2ca90     28 E0 BF FD | 	call	#__system___gc_alloc_managed
2ca94     48 4E 05 F1 | 	add	fp, #72
2ca98     A7 FA 61 FC | 	wrlong	result1, fp
2ca9c     48 4E 85 F1 | 	sub	fp, #72
2caa0     00 FA 0D F2 | 	cmp	result1, #0 wz
2caa4     18 00 90 AD |  if_e	jmp	#LR__4232
2caa8     48 4E 05 F1 | 	add	fp, #72
2caac     A7 12 02 FB | 	rdlong	arg01, fp
2cab0     3C 4E 85 F1 | 	sub	fp, #60
2cab4     A7 14 02 FB | 	rdlong	arg02, fp
2cab8     0C 4E 85 F1 | 	sub	fp, #12
2cabc     0C 9E BF FD | 	call	#__system____builtin_strcpy
2cac0                 | LR__4232
2cac0     48 4E 05 F1 | 	add	fp, #72
2cac4     A7 FA 01 FB | 	rdlong	result1, fp
2cac8     48 4E 85 F1 | 	sub	fp, #72
2cacc                 | LR__4233
2cacc     A7 F0 03 F6 | 	mov	ptra, fp
2cad0     B2 00 A0 FD | 	call	#popregs_
2cad4                 | __system___basic_dir_ret
2cad4     2D 00 64 FD | 	ret
2cad8                 | 
2cad8                 | __system__pack_0678
2cad8     09 01 02 F6 | 	mov	_var01, arg01
2cadc     7F 16 06 F1 | 	add	arg03, #127
2cae0     04 18 CE F7 | 	test	arg04, #4 wz
2cae4     10 00 90 AD |  if_e	jmp	#LR__4240
2cae8     00 00 0E F2 | 	cmp	_var01, #0 wz
2caec     16 00 C6 A9 |  if_e	decod	_var01, #22
2caf0     F7 00 26 F4 | 	bith	_var01, #247
2caf4     B4 00 90 FD | 	jmp	#LR__4249
2caf8                 | LR__4240
2caf8     02 18 CE F7 | 	test	arg04, #2 wz
2cafc     00 C0 3F 5F 
2cb00     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2cb04     00 14 06 56 |  if_ne	mov	arg02, #0
2cb08     A0 00 90 5D |  if_ne	jmp	#LR__4248
2cb0c     08 18 CE F7 | 	test	arg04, #8 wz
2cb10     00 00 06 56 |  if_ne	mov	_var01, #0
2cb14     94 00 90 5D |  if_ne	jmp	#LR__4247
2cb18     FF 16 56 F2 | 	cmps	arg03, #255 wc
2cb1c     00 C0 3F 3F 
2cb20     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2cb24     00 14 06 36 |  if_ae	mov	arg02, #0
2cb28     80 00 90 3D |  if_ae	jmp	#LR__4246
2cb2c     01 16 56 F2 | 	cmps	arg03, #1 wc
2cb30     6C 00 90 3D |  if_ae	jmp	#LR__4244
2cb34     01 14 46 F0 | 	shr	arg02, #1
2cb38     00 03 02 F6 | 	mov	_var02, _var01
2cb3c     01 02 06 F5 | 	and	_var02, #1
2cb40     1F 02 66 F0 | 	shl	_var02, #31
2cb44     01 15 42 F5 | 	or	arg02, _var02
2cb48     01 00 46 F0 | 	shr	_var01, #1
2cb4c     97 1E 48 FB | 	callpa	#(@LR__4242-@LR__4241)>>2,fcache_load_ptr_
2cb50                 | LR__4241
2cb50     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb54     34 00 90 3D |  if_ae	jmp	#LR__4243
2cb58     00 00 0E F2 | 	cmp	_var01, #0 wz
2cb5c     2C 00 90 AD |  if_e	jmp	#LR__4243
2cb60     0A 13 02 F6 | 	mov	arg01, arg02
2cb64     01 12 06 F5 | 	and	arg01, #1
2cb68     01 16 06 F1 | 	add	arg03, #1
2cb6c     01 14 46 F0 | 	shr	arg02, #1
2cb70     00 03 02 F6 | 	mov	_var02, _var01
2cb74     01 02 06 F5 | 	and	_var02, #1
2cb78     1F 02 66 F0 | 	shl	_var02, #31
2cb7c     01 15 42 F5 | 	or	arg02, _var02
2cb80     09 15 42 F5 | 	or	arg02, arg01
2cb84     01 00 46 F0 | 	shr	_var01, #1
2cb88     C4 FF 9F FD | 	jmp	#LR__4241
2cb8c                 | LR__4242
2cb8c                 | LR__4243
2cb8c     00 16 56 F2 | 	cmps	arg03, #0 wc
2cb90     18 00 90 3D |  if_ae	jmp	#LR__4245
2cb94     00 14 0E F2 | 	cmp	arg02, #0 wz
2cb98     6F 14 62 FD | 	wrnz	arg02
2cb9c     0C 00 90 FD | 	jmp	#LR__4245
2cba0                 | LR__4244
2cba0     17 01 06 F4 | 	bitl	_var01, #279
2cba4     17 16 66 F0 | 	shl	arg03, #23
2cba8     0B 01 42 F5 | 	or	_var01, arg03
2cbac                 | LR__4245
2cbac                 | LR__4246
2cbac                 | LR__4247
2cbac                 | LR__4248
2cbac                 | LR__4249
2cbac     01 00 CE F7 | 	test	_var01, #1 wz
2cbb0     01 14 46 55 |  if_ne	or	arg02, #1
2cbb4     0A 17 02 F6 | 	mov	arg03, arg02
2cbb8     00 02 06 F6 | 	mov	_var02, #0
2cbbc     FF FF 3F FF 
2cbc0     FF 15 06 F1 | 	add	arg02, ##2147483647
2cbc4     0B 15 12 F2 | 	cmp	arg02, arg03 wc
2cbc8     01 02 06 C6 |  if_b	mov	_var02, #1
2cbcc     01 01 02 F1 | 	add	_var01, _var02
2cbd0     01 18 CE F7 | 	test	arg04, #1 wz
2cbd4     1F 00 26 54 |  if_ne	bith	_var01, #31
2cbd8     00 FB 01 F6 | 	mov	result1, _var01
2cbdc                 | __system__pack_0678_ret
2cbdc     2D 00 64 FD | 	ret
2cbe0                 | 
2cbe0                 | __system___rxtxioctl_0768
2cbe0     00 15 0E F2 | 	cmp	arg02, #256 wz
2cbe4     0C 00 90 AD |  if_e	jmp	#LR__4250
2cbe8     01 15 0E F2 | 	cmp	arg02, #257 wz
2cbec     1C 00 90 AD |  if_e	jmp	#LR__4251
2cbf0     30 00 90 FD | 	jmp	#LR__4252
2cbf4                 | LR__4250
2cbf4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cbf8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2cbfc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cc00     0B FB 61 FC | 	wrlong	result1, arg03
2cc04     00 FA 05 F6 | 	mov	result1, #0
2cc08     28 00 90 FD | 	jmp	#LR__4253
2cc0c                 | LR__4251
2cc0c     0B 13 02 FB | 	rdlong	arg01, arg03
2cc10     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2cc14     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cc18     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2cc1c     00 FA 05 F6 | 	mov	result1, #0
2cc20     10 00 90 FD | 	jmp	#LR__4253
2cc24                 | LR__4252
2cc24     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cc28     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2cc2c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cc30     01 FA 65 F6 | 	neg	result1, #1
2cc34                 | LR__4253
2cc34                 | __system___rxtxioctl_0768_ret
2cc34     2D 00 64 FD | 	ret
2cc38                 | 
2cc38                 | __system____dummy_flush_0769
2cc38     00 FA 05 F6 | 	mov	result1, #0
2cc3c                 | __system____dummy_flush_0769_ret
2cc3c     2D 00 64 FD | 	ret
2cc40                 | 
2cc40                 | __system___vfswrite
2cc40     09 4A 05 F6 | 	mov	COUNT_, #9
2cc44     A8 00 A0 FD | 	call	#pushregs_
2cc48     09 27 02 F6 | 	mov	local01, arg01
2cc4c     0A 29 02 F6 | 	mov	local02, arg02
2cc50     0B 2B 02 F6 | 	mov	local03, arg03
2cc54     14 2D 02 F6 | 	mov	local04, local02
2cc58     08 26 06 F1 | 	add	local01, #8
2cc5c     13 13 02 FB | 	rdlong	arg01, local01
2cc60     08 26 86 F1 | 	sub	local01, #8
2cc64     02 12 CE F7 | 	test	arg01, #2 wz
2cc68     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cc6c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cc70     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cc74     01 FA 65 A6 |  if_e	neg	result1, #1
2cc78     80 01 90 AD |  if_e	jmp	#LR__4266
2cc7c     08 26 06 F1 | 	add	local01, #8
2cc80     13 FB 01 FB | 	rdlong	result1, local01
2cc84     08 26 86 F1 | 	sub	local01, #8
2cc88     40 FA CD F7 | 	test	result1, #64 wz
2cc8c     68 00 90 AD |  if_e	jmp	#LR__4261
2cc90     08 26 06 F1 | 	add	local01, #8
2cc94     13 15 02 FB | 	rdlong	arg02, local01
2cc98     08 26 86 F1 | 	sub	local01, #8
2cc9c     80 14 CE F7 | 	test	arg02, #128 wz
2cca0     54 00 90 AD |  if_e	jmp	#LR__4260
2cca4     30 26 06 F1 | 	add	local01, #48
2cca8     13 2F 02 FB | 	rdlong	local05, local01
2ccac     17 31 02 F6 | 	mov	local06, local05
2ccb0     30 26 86 F1 | 	sub	local01, #48
2ccb4     13 30 46 F7 | 	zerox	local06, #19
2ccb8     14 2E 46 F0 | 	shr	local05, #20
2ccbc     02 2E 66 F0 | 	shl	local05, #2
2ccc0     ED 2E 02 F1 | 	add	local05, __methods__
2ccc4     17 2F 02 FB | 	rdlong	local05, local05
2ccc8     13 13 02 F6 | 	mov	arg01, local01
2cccc     00 14 06 F6 | 	mov	arg02, #0
2ccd0     02 16 06 F6 | 	mov	arg03, #2
2ccd4     F2 32 02 F6 | 	mov	local07, objptr
2ccd8     18 E5 01 F6 | 	mov	objptr, local06
2ccdc     2D 2E 62 FD | 	call	local05
2cce0     19 E5 01 F6 | 	mov	objptr, local07
2cce4     08 26 06 F1 | 	add	local01, #8
2cce8     13 33 02 FB | 	rdlong	local07, local01
2ccec     80 32 26 F5 | 	andn	local07, #128
2ccf0     13 33 62 FC | 	wrlong	local07, local01
2ccf4     08 26 86 F1 | 	sub	local01, #8
2ccf8                 | LR__4260
2ccf8                 | LR__4261
2ccf8     18 26 06 F1 | 	add	local01, #24
2ccfc     13 33 0A FB | 	rdlong	local07, local01 wz
2cd00     18 26 86 F1 | 	sub	local01, #24
2cd04     80 00 90 AD |  if_e	jmp	#LR__4263
2cd08     18 26 06 F1 | 	add	local01, #24
2cd0c     13 2F 02 FB | 	rdlong	local05, local01
2cd10     17 31 02 F6 | 	mov	local06, local05
2cd14     18 26 86 F1 | 	sub	local01, #24
2cd18     13 30 46 F7 | 	zerox	local06, #19
2cd1c     14 2E 46 F0 | 	shr	local05, #20
2cd20     02 2E 66 F0 | 	shl	local05, #2
2cd24     ED 2E 02 F1 | 	add	local05, __methods__
2cd28     17 2F 02 FB | 	rdlong	local05, local05
2cd2c     14 15 02 F6 | 	mov	arg02, local02
2cd30     15 17 02 F6 | 	mov	arg03, local03
2cd34     13 13 02 F6 | 	mov	arg01, local01
2cd38     F2 32 02 F6 | 	mov	local07, objptr
2cd3c     18 E5 01 F6 | 	mov	objptr, local06
2cd40     2D 2E 62 FD | 	call	local05
2cd44     19 E5 01 F6 | 	mov	objptr, local07
2cd48     FD 34 02 F6 | 	mov	local08, result1
2cd4c     00 34 56 F2 | 	cmps	local08, #0 wc
2cd50     2C 00 90 3D |  if_ae	jmp	#LR__4262
2cd54     08 26 06 F1 | 	add	local01, #8
2cd58     13 33 02 FB | 	rdlong	local07, local01
2cd5c     20 32 46 F5 | 	or	local07, #32
2cd60     13 33 62 FC | 	wrlong	local07, local01
2cd64     00 34 4E F2 | 	cmps	local08, #0 wz
2cd68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cd6c     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
2cd70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cd74     01 FA 65 56 |  if_ne	neg	result1, #1
2cd78     00 FA 05 A6 |  if_e	mov	result1, #0
2cd7c     7C 00 90 FD | 	jmp	#LR__4266
2cd80                 | LR__4262
2cd80     1A FB 01 F6 | 	mov	result1, local08
2cd84     74 00 90 FD | 	jmp	#LR__4266
2cd88                 | LR__4263
2cd88     1C 26 06 F1 | 	add	local01, #28
2cd8c     13 37 0A FB | 	rdlong	local09, local01 wz
2cd90     1C 26 86 F1 | 	sub	local01, #28
2cd94     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cd98     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cd9c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cda0     01 FA 65 A6 |  if_e	neg	result1, #1
2cda4     54 00 90 AD |  if_e	jmp	#LR__4266
2cda8     00 34 06 F6 | 	mov	local08, #0
2cdac                 | LR__4264
2cdac     01 2A 16 F2 | 	cmp	local03, #1 wc
2cdb0     44 00 90 CD |  if_b	jmp	#LR__4265
2cdb4     1B 31 02 F6 | 	mov	local06, local09
2cdb8     1B 2F 02 F6 | 	mov	local05, local09
2cdbc     13 30 46 F7 | 	zerox	local06, #19
2cdc0     14 2E 46 F0 | 	shr	local05, #20
2cdc4     02 2E 66 F0 | 	shl	local05, #2
2cdc8     ED 2E 02 F1 | 	add	local05, __methods__
2cdcc     17 2F 02 FB | 	rdlong	local05, local05
2cdd0     16 13 C2 FA | 	rdbyte	arg01, local04
2cdd4     13 15 02 F6 | 	mov	arg02, local01
2cdd8     F2 32 02 F6 | 	mov	local07, objptr
2cddc     18 E5 01 F6 | 	mov	objptr, local06
2cde0     01 2C 06 F1 | 	add	local04, #1
2cde4     2D 2E 62 FD | 	call	local05
2cde8     19 E5 01 F6 | 	mov	objptr, local07
2cdec     FD 34 02 F1 | 	add	local08, result1
2cdf0     01 2A 86 F1 | 	sub	local03, #1
2cdf4     B4 FF 9F FD | 	jmp	#LR__4264
2cdf8                 | LR__4265
2cdf8     1A FB 01 F6 | 	mov	result1, local08
2cdfc                 | LR__4266
2cdfc     A7 F0 03 F6 | 	mov	ptra, fp
2ce00     B2 00 A0 FD | 	call	#popregs_
2ce04                 | __system___vfswrite_ret
2ce04     2D 00 64 FD | 	ret
2ce08                 | 
2ce08                 | __system___vfsread
2ce08     03 4A 05 F6 | 	mov	COUNT_, #3
2ce0c     A8 00 A0 FD | 	call	#pushregs_
2ce10     28 F0 07 F1 | 	add	ptra, #40
2ce14     04 4E 05 F1 | 	add	fp, #4
2ce18     A7 12 62 FC | 	wrlong	arg01, fp
2ce1c     04 4E 05 F1 | 	add	fp, #4
2ce20     A7 14 62 FC | 	wrlong	arg02, fp
2ce24     04 4E 05 F1 | 	add	fp, #4
2ce28     A7 16 62 FC | 	wrlong	arg03, fp
2ce2c     04 4E 85 F1 | 	sub	fp, #4
2ce30     A7 FA 01 FB | 	rdlong	result1, fp
2ce34     14 4E 05 F1 | 	add	fp, #20
2ce38     A7 FA 61 FC | 	wrlong	result1, fp
2ce3c     04 4E 05 F1 | 	add	fp, #4
2ce40     A7 00 68 FC | 	wrlong	#0, fp
2ce44     1C 4E 85 F1 | 	sub	fp, #28
2ce48     A7 12 02 FB | 	rdlong	arg01, fp
2ce4c     04 4E 85 F1 | 	sub	fp, #4
2ce50     08 12 06 F1 | 	add	arg01, #8
2ce54     09 FB 01 FB | 	rdlong	result1, arg01
2ce58     01 FA CD F7 | 	test	result1, #1 wz
2ce5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2ce60     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2ce64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2ce68     01 FA 65 A6 |  if_e	neg	result1, #1
2ce6c     74 02 90 AD |  if_e	jmp	#LR__4276
2ce70     04 4E 05 F1 | 	add	fp, #4
2ce74     A7 12 02 FB | 	rdlong	arg01, fp
2ce78     04 4E 85 F1 | 	sub	fp, #4
2ce7c     14 12 06 F1 | 	add	arg01, #20
2ce80     09 FB 09 FB | 	rdlong	result1, arg01 wz
2ce84     B8 00 90 AD |  if_e	jmp	#LR__4271
2ce88     04 4E 05 F1 | 	add	fp, #4
2ce8c     A7 12 02 FB | 	rdlong	arg01, fp
2ce90     09 17 02 F6 | 	mov	arg03, arg01
2ce94     14 16 06 F1 | 	add	arg03, #20
2ce98     0B 27 02 FB | 	rdlong	local01, arg03
2ce9c     13 29 02 F6 | 	mov	local02, local01
2cea0     13 26 46 F7 | 	zerox	local01, #19
2cea4     14 28 46 F0 | 	shr	local02, #20
2cea8     02 28 66 F0 | 	shl	local02, #2
2ceac     ED 28 02 F1 | 	add	local02, __methods__
2ceb0     14 29 02 FB | 	rdlong	local02, local02
2ceb4     04 4E 05 F1 | 	add	fp, #4
2ceb8     A7 14 02 FB | 	rdlong	arg02, fp
2cebc     04 4E 05 F1 | 	add	fp, #4
2cec0     A7 16 02 FB | 	rdlong	arg03, fp
2cec4     0C 4E 85 F1 | 	sub	fp, #12
2cec8     F2 2A 02 F6 | 	mov	local03, objptr
2cecc     13 E5 01 F6 | 	mov	objptr, local01
2ced0     2D 28 62 FD | 	call	local02
2ced4     15 E5 01 F6 | 	mov	objptr, local03
2ced8     10 4E 05 F1 | 	add	fp, #16
2cedc     A7 FA 61 FC | 	wrlong	result1, fp
2cee0     10 4E 85 F1 | 	sub	fp, #16
2cee4     00 FA 55 F2 | 	cmps	result1, #0 wc
2cee8     44 00 90 3D |  if_ae	jmp	#LR__4270
2ceec     04 4E 05 F1 | 	add	fp, #4
2cef0     A7 2A 02 FB | 	rdlong	local03, fp
2cef4     15 27 02 F6 | 	mov	local01, local03
2cef8     08 2A 06 F1 | 	add	local03, #8
2cefc     15 29 02 FB | 	rdlong	local02, local03
2cf00     20 28 46 F5 | 	or	local02, #32
2cf04     08 26 06 F1 | 	add	local01, #8
2cf08     13 29 62 FC | 	wrlong	local02, local01
2cf0c     0C 4E 05 F1 | 	add	fp, #12
2cf10     A7 12 0A FB | 	rdlong	arg01, fp wz
2cf14     10 4E 85 F1 | 	sub	fp, #16
2cf18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2cf1c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2cf20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2cf24     01 FA 65 56 |  if_ne	neg	result1, #1
2cf28     00 FA 05 A6 |  if_e	mov	result1, #0
2cf2c     B4 01 90 FD | 	jmp	#LR__4276
2cf30                 | LR__4270
2cf30     10 4E 05 F1 | 	add	fp, #16
2cf34     A7 FA 01 FB | 	rdlong	result1, fp
2cf38     10 4E 85 F1 | 	sub	fp, #16
2cf3c     A4 01 90 FD | 	jmp	#LR__4276
2cf40                 | LR__4271
2cf40     04 4E 05 F1 | 	add	fp, #4
2cf44     A7 12 02 FB | 	rdlong	arg01, fp
2cf48     20 12 06 F1 | 	add	arg01, #32
2cf4c     09 13 0A FB | 	rdlong	arg01, arg01 wz
2cf50     14 4E 05 F1 | 	add	fp, #20
2cf54     A7 12 62 FC | 	wrlong	arg01, fp
2cf58     18 4E 85 F1 | 	sub	fp, #24
2cf5c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2cf60     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2cf64     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2cf68     01 FA 65 A6 |  if_e	neg	result1, #1
2cf6c     74 01 90 AD |  if_e	jmp	#LR__4276
2cf70     04 4E 05 F1 | 	add	fp, #4
2cf74     A7 2A 02 FB | 	rdlong	local03, fp
2cf78     04 4E 85 F1 | 	sub	fp, #4
2cf7c     28 2A 06 F1 | 	add	local03, #40
2cf80     15 29 0A FB | 	rdlong	local02, local03 wz
2cf84     7C 00 90 AD |  if_e	jmp	#LR__4273
2cf88     04 4E 05 F1 | 	add	fp, #4
2cf8c     A7 12 02 FB | 	rdlong	arg01, fp
2cf90     09 2B 02 F6 | 	mov	local03, arg01
2cf94     28 2A 06 F1 | 	add	local03, #40
2cf98     15 27 02 FB | 	rdlong	local01, local03
2cf9c     13 29 02 F6 | 	mov	local02, local01
2cfa0     13 26 46 F7 | 	zerox	local01, #19
2cfa4     14 28 46 F0 | 	shr	local02, #20
2cfa8     02 28 66 F0 | 	shl	local02, #2
2cfac     ED 28 02 F1 | 	add	local02, __methods__
2cfb0     14 29 02 FB | 	rdlong	local02, local02
2cfb4     20 4E 05 F1 | 	add	fp, #32
2cfb8     A7 16 02 F6 | 	mov	arg03, fp
2cfbc     24 4E 85 F1 | 	sub	fp, #36
2cfc0     00 15 06 F6 | 	mov	arg02, #256
2cfc4     F2 2A 02 F6 | 	mov	local03, objptr
2cfc8     13 E5 01 F6 | 	mov	objptr, local01
2cfcc     2D 28 62 FD | 	call	local02
2cfd0     15 E5 01 F6 | 	mov	objptr, local03
2cfd4     10 4E 05 F1 | 	add	fp, #16
2cfd8     A7 FA 61 FC | 	wrlong	result1, fp
2cfdc     00 FA 4D F2 | 	cmps	result1, #0 wz
2cfe0     10 4E 85 F1 | 	sub	fp, #16
2cfe4     1C 00 90 5D |  if_ne	jmp	#LR__4272
2cfe8     24 4E 05 F1 | 	add	fp, #36
2cfec     A7 28 02 FB | 	rdlong	local02, fp
2cff0     24 4E 85 F1 | 	sub	fp, #36
2cff4     02 28 CE F7 | 	test	local02, #2 wz
2cff8     20 4E 05 51 |  if_ne	add	fp, #32
2cffc     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d000     20 4E 85 51 |  if_ne	sub	fp, #32
2d004                 | LR__4272
2d004                 | LR__4273
2d004     10 4E 05 F1 | 	add	fp, #16
2d008     A7 00 68 FC | 	wrlong	#0, fp
2d00c     10 4E 85 F1 | 	sub	fp, #16
2d010                 | LR__4274
2d010     0C 4E 05 F1 | 	add	fp, #12
2d014     A7 2A 02 FB | 	rdlong	local03, fp
2d018     0C 4E 85 F1 | 	sub	fp, #12
2d01c     01 2A 16 F2 | 	cmp	local03, #1 wc
2d020     B4 00 90 CD |  if_b	jmp	#LR__4275
2d024     18 4E 05 F1 | 	add	fp, #24
2d028     A7 28 02 FB | 	rdlong	local02, fp
2d02c     14 2B 02 F6 | 	mov	local03, local02
2d030     13 2A 46 F7 | 	zerox	local03, #19
2d034     14 28 46 F0 | 	shr	local02, #20
2d038     02 28 66 F0 | 	shl	local02, #2
2d03c     ED 28 02 F1 | 	add	local02, __methods__
2d040     14 29 02 FB | 	rdlong	local02, local02
2d044     14 4E 85 F1 | 	sub	fp, #20
2d048     A7 12 02 FB | 	rdlong	arg01, fp
2d04c     04 4E 85 F1 | 	sub	fp, #4
2d050     F2 26 02 F6 | 	mov	local01, objptr
2d054     15 E5 01 F6 | 	mov	objptr, local03
2d058     2D 28 62 FD | 	call	local02
2d05c     13 E5 01 F6 | 	mov	objptr, local01
2d060     14 4E 05 F1 | 	add	fp, #20
2d064     A7 FA 61 FC | 	wrlong	result1, fp
2d068     14 4E 85 F1 | 	sub	fp, #20
2d06c     00 FA 55 F2 | 	cmps	result1, #0 wc
2d070     64 00 90 CD |  if_b	jmp	#LR__4275
2d074     1C 4E 05 F1 | 	add	fp, #28
2d078     A7 2A 02 FB | 	rdlong	local03, fp
2d07c     15 29 02 F6 | 	mov	local02, local03
2d080     01 28 06 F1 | 	add	local02, #1
2d084     A7 28 62 FC | 	wrlong	local02, fp
2d088     08 4E 85 F1 | 	sub	fp, #8
2d08c     A7 28 02 FB | 	rdlong	local02, fp
2d090     15 29 42 FC | 	wrbyte	local02, local03
2d094     04 4E 85 F1 | 	sub	fp, #4
2d098     A7 2A 02 FB | 	rdlong	local03, fp
2d09c     01 2A 06 F1 | 	add	local03, #1
2d0a0     A7 2A 62 FC | 	wrlong	local03, fp
2d0a4     04 4E 85 F1 | 	sub	fp, #4
2d0a8     A7 2A 02 FB | 	rdlong	local03, fp
2d0ac     01 2A 86 F1 | 	sub	local03, #1
2d0b0     A7 2A 62 FC | 	wrlong	local03, fp
2d0b4     14 4E 05 F1 | 	add	fp, #20
2d0b8     A7 2A 0A FB | 	rdlong	local03, fp wz
2d0bc     20 4E 85 F1 | 	sub	fp, #32
2d0c0     4C FF 9F AD |  if_e	jmp	#LR__4274
2d0c4     14 4E 05 F1 | 	add	fp, #20
2d0c8     A7 28 02 FB | 	rdlong	local02, fp
2d0cc     14 4E 85 F1 | 	sub	fp, #20
2d0d0     0A 28 0E F2 | 	cmp	local02, #10 wz
2d0d4     38 FF 9F 5D |  if_ne	jmp	#LR__4274
2d0d8                 | LR__4275
2d0d8     10 4E 05 F1 | 	add	fp, #16
2d0dc     A7 FA 01 FB | 	rdlong	result1, fp
2d0e0     10 4E 85 F1 | 	sub	fp, #16
2d0e4                 | LR__4276
2d0e4     A7 F0 03 F6 | 	mov	ptra, fp
2d0e8     B2 00 A0 FD | 	call	#popregs_
2d0ec                 | __system___vfsread_ret
2d0ec     2D 00 64 FD | 	ret
2d0f0                 | 
2d0f0                 | __system____default_filbuf
2d0f0     04 4A 05 F6 | 	mov	COUNT_, #4
2d0f4     A8 00 A0 FD | 	call	#pushregs_
2d0f8     09 27 02 F6 | 	mov	local01, arg01
2d0fc     13 29 02 FB | 	rdlong	local02, local01
2d100     0C 28 06 F1 | 	add	local02, #12
2d104     14 FB 09 FB | 	rdlong	result1, local02 wz
2d108     0C 28 86 F1 | 	sub	local02, #12
2d10c     20 00 90 5D |  if_ne	jmp	#LR__4280
2d110     14 28 06 F1 | 	add	local02, #20
2d114     14 FB 01 F6 | 	mov	result1, local02
2d118     04 28 86 F1 | 	sub	local02, #4
2d11c     14 FB 61 FC | 	wrlong	result1, local02
2d120     04 28 86 F1 | 	sub	local02, #4
2d124     02 00 80 FF 
2d128     14 01 68 FC | 	wrlong	##1024, local02
2d12c     0C 28 86 F1 | 	sub	local02, #12
2d130                 | LR__4280
2d130     14 26 06 F1 | 	add	local01, #20
2d134     13 2B 02 FB | 	rdlong	local03, local01
2d138     15 2D 02 F6 | 	mov	local04, local03
2d13c     14 26 86 F1 | 	sub	local01, #20
2d140     13 2C 46 F7 | 	zerox	local04, #19
2d144     14 2A 46 F0 | 	shr	local03, #20
2d148     02 2A 66 F0 | 	shl	local03, #2
2d14c     ED 2A 02 F1 | 	add	local03, __methods__
2d150     15 2B 02 FB | 	rdlong	local03, local03
2d154     10 28 06 F1 | 	add	local02, #16
2d158     14 15 02 FB | 	rdlong	arg02, local02
2d15c     04 28 86 F1 | 	sub	local02, #4
2d160     14 17 02 FB | 	rdlong	arg03, local02
2d164     0C 28 86 F1 | 	sub	local02, #12
2d168     13 13 02 F6 | 	mov	arg01, local01
2d16c     F2 26 02 F6 | 	mov	local01, objptr
2d170     16 E5 01 F6 | 	mov	objptr, local04
2d174     2D 2A 62 FD | 	call	local03
2d178     13 E5 01 F6 | 	mov	objptr, local01
2d17c     FD 2C 02 F6 | 	mov	local04, result1
2d180     00 2C 56 F2 | 	cmps	local04, #0 wc
2d184     01 FA 65 C6 |  if_b	neg	result1, #1
2d188     28 00 90 CD |  if_b	jmp	#LR__4281
2d18c     14 2D 62 FC | 	wrlong	local04, local02
2d190     10 28 06 F1 | 	add	local02, #16
2d194     14 2B 02 FB | 	rdlong	local03, local02
2d198     0C 28 86 F1 | 	sub	local02, #12
2d19c     14 2B 62 FC | 	wrlong	local03, local02
2d1a0     04 28 06 F1 | 	add	local02, #4
2d1a4     14 2B 02 FB | 	rdlong	local03, local02
2d1a8     01 2A 46 F5 | 	or	local03, #1
2d1ac     14 2B 62 FC | 	wrlong	local03, local02
2d1b0     16 FB 01 F6 | 	mov	result1, local04
2d1b4                 | LR__4281
2d1b4     A7 F0 03 F6 | 	mov	ptra, fp
2d1b8     B2 00 A0 FD | 	call	#popregs_
2d1bc                 | __system____default_filbuf_ret
2d1bc     2D 00 64 FD | 	ret
2d1c0                 | 
2d1c0                 | __system__getlower_1158
2d1c0     41 12 56 F2 | 	cmps	arg01, #65 wc
2d1c4     10 00 90 CD |  if_b	jmp	#LR__4290
2d1c8     5B 12 56 F2 | 	cmps	arg01, #91 wc
2d1cc     09 FB 01 C6 |  if_b	mov	result1, arg01
2d1d0     20 FA 05 C1 |  if_b	add	result1, #32
2d1d4     04 00 90 CD |  if_b	jmp	#__system__getlower_1158_ret
2d1d8                 | LR__4290
2d1d8     09 FB 01 F6 | 	mov	result1, arg01
2d1dc                 | __system__getlower_1158_ret
2d1dc     2D 00 64 FD | 	ret
2d1e0                 | 
2d1e0                 | __system___pat_match
2d1e0     08 4A 05 F6 | 	mov	COUNT_, #8
2d1e4     A8 00 A0 FD | 	call	#pushregs_
2d1e8     09 27 02 F6 | 	mov	local01, arg01
2d1ec                 | LR__4300
2d1ec     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
2d1f0     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
2d1f4     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
2d1f8     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
2d1fc     2C 00 90 AD |  if_e	jmp	#LR__4301
2d200     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d204     B8 FF BF FD | 	call	#__system__getlower_1158
2d208     FD 2A 02 F6 | 	mov	local03, result1
2d20c     13 13 C2 FA | 	rdbyte	arg01, local01
2d210     AC FF BF FD | 	call	#__system__getlower_1158
2d214     15 FB 09 F2 | 	cmp	result1, local03 wz
2d218     00 FA 05 56 |  if_ne	mov	result1, #0
2d21c     FC 00 90 5D |  if_ne	jmp	#LR__4309
2d220     01 26 06 F1 | 	add	local01, #1
2d224     01 14 06 F1 | 	add	arg02, #1
2d228     C0 FF 9F FD | 	jmp	#LR__4300
2d22c                 | LR__4301
2d22c     0A 2B C2 FA | 	rdbyte	local03, arg02
2d230     2A 2A 0E F2 | 	cmp	local03, #42 wz
2d234     D4 00 90 5D |  if_ne	jmp	#LR__4308
2d238     01 14 06 F1 | 	add	arg02, #1
2d23c     0A 29 C2 FA | 	rdbyte	local02, arg02
2d240     01 14 86 F1 | 	sub	arg02, #1
2d244     2E 28 0E F2 | 	cmp	local02, #46 wz
2d248     28 00 90 5D |  if_ne	jmp	#LR__4302
2d24c     02 14 06 F1 | 	add	arg02, #2
2d250     0A 29 C2 FA | 	rdbyte	local02, arg02
2d254     02 14 86 F1 | 	sub	arg02, #2
2d258     2A 28 0E F2 | 	cmp	local02, #42 wz
2d25c     03 14 06 A1 |  if_e	add	arg02, #3
2d260     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
2d264     03 14 86 A1 |  if_e	sub	arg02, #3
2d268     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2d26c     01 FA 05 A6 |  if_e	mov	result1, #1
2d270     A8 00 90 AD |  if_e	jmp	#LR__4309
2d274                 | LR__4302
2d274     01 14 06 F1 | 	add	arg02, #1
2d278     00 30 06 F6 | 	mov	local06, #0
2d27c     97 1E 48 FB | 	callpa	#(@LR__4305-@LR__4303)>>2,fcache_load_ptr_
2d280                 | LR__4303
2d280     18 33 02 F6 | 	mov	local07, local06
2d284     0A 33 02 F1 | 	add	local07, arg02
2d288     19 33 CA FA | 	rdbyte	local07, local07 wz
2d28c     18 2F 02 56 |  if_ne	mov	local05, local06
2d290     01 2E 06 51 |  if_ne	add	local05, #1
2d294     17 31 02 56 |  if_ne	mov	local06, local05
2d298     E4 FF 9F 5D |  if_ne	jmp	#LR__4303
2d29c     00 34 06 F6 | 	mov	local08, #0
2d2a0                 | LR__4304
2d2a0     1A 33 02 F6 | 	mov	local07, local08
2d2a4     13 33 02 F1 | 	add	local07, local01
2d2a8     19 33 CA FA | 	rdbyte	local07, local07 wz
2d2ac     1A 2F 02 56 |  if_ne	mov	local05, local08
2d2b0     01 2E 06 51 |  if_ne	add	local05, #1
2d2b4     17 35 02 56 |  if_ne	mov	local08, local05
2d2b8     E4 FF 9F 5D |  if_ne	jmp	#LR__4304
2d2bc                 | LR__4305
2d2bc     18 35 52 F2 | 	cmps	local08, local06 wc
2d2c0     00 FA 05 C6 |  if_b	mov	result1, #0
2d2c4     54 00 90 CD |  if_b	jmp	#LR__4309
2d2c8     1A 29 02 F6 | 	mov	local02, local08
2d2cc     18 29 82 F1 | 	sub	local02, local06
2d2d0     14 27 02 F1 | 	add	local01, local02
2d2d4                 | LR__4306
2d2d4     01 30 56 F2 | 	cmps	local06, #1 wc
2d2d8     30 00 90 CD |  if_b	jmp	#LR__4307
2d2dc     13 13 C2 FA | 	rdbyte	arg01, local01
2d2e0     DC FE BF FD | 	call	#__system__getlower_1158
2d2e4     FD 34 02 F6 | 	mov	local08, result1
2d2e8     0A 13 C2 FA | 	rdbyte	arg01, arg02
2d2ec     D0 FE BF FD | 	call	#__system__getlower_1158
2d2f0     FD 34 0A F2 | 	cmp	local08, result1 wz
2d2f4     00 FA 05 56 |  if_ne	mov	result1, #0
2d2f8     20 00 90 5D |  if_ne	jmp	#LR__4309
2d2fc     01 26 06 F1 | 	add	local01, #1
2d300     01 14 06 F1 | 	add	arg02, #1
2d304     01 30 86 F1 | 	sub	local06, #1
2d308     C8 FF 9F FD | 	jmp	#LR__4306
2d30c                 | LR__4307
2d30c                 | LR__4308
2d30c     0A 35 CA FA | 	rdbyte	local08, arg02 wz
2d310     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
2d314     01 FA 05 A6 |  if_e	mov	result1, #1
2d318     00 FA 05 56 |  if_ne	mov	result1, #0
2d31c                 | LR__4309
2d31c     A7 F0 03 F6 | 	mov	ptra, fp
2d320     B2 00 A0 FD | 	call	#popregs_
2d324                 | __system___pat_match_ret
2d324     2D 00 64 FD | 	ret
2d328                 | 
2d328                 | _fatfs_cc_ff_uni2oem
2d328     00 00 06 F6 | 	mov	_var01, #0
2d32c     80 12 16 F2 | 	cmp	arg01, #128 wc
2d330     09 01 02 C6 |  if_b	mov	_var01, arg01
2d334     58 00 90 CD |  if_b	jmp	#LR__4314
2d338     80 00 00 FF 
2d33c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2d340     4C 00 90 3D |  if_ae	jmp	#LR__4313
2d344     0A FB 31 F9 | 	getword	result1, arg02, #0
2d348     01 00 00 FF 
2d34c     52 FB 0D F2 | 	cmp	result1, ##850 wz
2d350     3C 00 90 5D |  if_ne	jmp	#LR__4313
2d354                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
2d354     00 00 06 F6 | 	mov	_var01, #0
2d358     97 14 48 FB | 	callpa	#(@LR__4311-@LR__4310)>>2,fcache_load_ptr_
2d35c                 | LR__4310
2d35c     00 FB 31 F9 | 	getword	result1, _var01, #0
2d360     80 FA 15 F2 | 	cmp	result1, #128 wc
2d364     1C 00 90 3D |  if_ae	jmp	#LR__4312
2d368     00 FB 31 F9 | 	getword	result1, _var01, #0
2d36c     01 FA 65 F0 | 	shl	result1, #1
2d370     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
2d374     FD FA E1 FA | 	rdword	result1, result1
2d378     FD 12 0A F2 | 	cmp	arg01, result1 wz
2d37c     01 00 06 51 |  if_ne	add	_var01, #1
2d380     D8 FF 9F 5D |  if_ne	jmp	#LR__4310
2d384                 | LR__4311
2d384                 | LR__4312
2d384     00 01 32 F9 | 	getword	_var01, _var01, #0
2d388     80 00 06 F1 | 	add	_var01, #128
2d38c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2d390                 | LR__4313
2d390                 | LR__4314
2d390                 | ' 			c = (c + 0x80) & 0xFF;
2d390                 | ' 		}
2d390                 | ' 	}
2d390                 | ' 
2d390                 | ' 	return c;
2d390     00 FB 01 F6 | 	mov	result1, _var01
2d394                 | _fatfs_cc_ff_uni2oem_ret
2d394     2D 00 64 FD | 	ret
2d398                 | 
2d398                 | _fatfs_cc_ff_oem2uni
2d398     00 00 06 F6 | 	mov	_var01, #0
2d39c     09 FB 31 F9 | 	getword	result1, arg01, #0
2d3a0     80 FA 15 F2 | 	cmp	result1, #128 wc
2d3a4     09 01 02 C6 |  if_b	mov	_var01, arg01
2d3a8     2C 00 90 CD |  if_b	jmp	#LR__4321
2d3ac     0A 15 32 F9 | 	getword	arg02, arg02, #0
2d3b0     01 00 00 FF 
2d3b4     52 15 0E F2 | 	cmp	arg02, ##850 wz
2d3b8     1C 00 90 5D |  if_ne	jmp	#LR__4320
2d3bc     09 FB 31 F9 | 	getword	result1, arg01, #0
2d3c0     00 FB 15 F2 | 	cmp	result1, #256 wc
2d3c4     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
2d3c8     80 12 86 C1 |  if_b	sub	arg01, #128
2d3cc     01 12 66 C0 |  if_b	shl	arg01, #1
2d3d0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
2d3d4     09 01 E2 CA |  if_b	rdword	_var01, arg01
2d3d8                 | LR__4320
2d3d8                 | LR__4321
2d3d8                 | ' 		}
2d3d8                 | ' 	}
2d3d8                 | ' 
2d3d8                 | ' 	return c;
2d3d8     00 FB 01 F6 | 	mov	result1, _var01
2d3dc                 | _fatfs_cc_ff_oem2uni_ret
2d3dc     2D 00 64 FD | 	ret
2d3e0                 | 
2d3e0                 | _fatfs_cc_ff_wtoupper
2d3e0     09 01 02 F6 | 	mov	_var01, arg01
2d3e4     80 00 00 FF 
2d3e8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
2d3ec     60 01 90 3D |  if_ae	jmp	#LR__4343
2d3f0     00 03 02 F6 | 	mov	_var02, _var01
2d3f4     01 01 32 F9 | 	getword	_var01, _var02, #0
2d3f8     08 00 00 FF 
2d3fc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
2d400     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
2d404     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
2d408     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
2d40c     01 00 00 3F 
2d410     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
2d414     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2d418     01 00 00 3F 
2d41c     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
2d420     02 07 02 F6 | 	mov	_var04, _var03
2d424                 | ' 		uc = (WORD)uni;
2d424                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
2d424                 | ' 		for (;;) {
2d424                 | LR__4330
2d424     03 09 E2 FA | 	rdword	_var05, _var04
2d428     04 05 02 F6 | 	mov	_var03, _var05
2d42c     0F 04 4E F7 | 	zerox	_var03, #15 wz
2d430     02 06 06 F1 | 	add	_var04, #2
2d434     14 01 90 AD |  if_e	jmp	#LR__4342
2d438     01 05 32 F9 | 	getword	_var03, _var02, #0
2d43c     04 01 32 F9 | 	getword	_var01, _var05, #0
2d440     00 05 12 F2 | 	cmp	_var03, _var01 wc
2d444     04 01 90 CD |  if_b	jmp	#LR__4342
2d448     03 0B E2 FA | 	rdword	_var06, _var04
2d44c     05 0D 32 F9 | 	getword	_var07, _var06, #0
2d450     08 0C 46 F0 | 	shr	_var07, #8
2d454     05 0B 32 F9 | 	getword	_var06, _var06, #0
2d458     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2d45c     01 05 32 F9 | 	getword	_var03, _var02, #0
2d460     04 0F 32 F9 | 	getword	_var08, _var05, #0
2d464     05 01 32 F9 | 	getword	_var01, _var06, #0
2d468     00 0F 02 F1 | 	add	_var08, _var01
2d46c     07 05 52 F2 | 	cmps	_var03, _var08 wc
2d470     02 06 06 F1 | 	add	_var04, #2
2d474     C4 00 90 3D |  if_ae	jmp	#LR__4341
2d478                 | ' 				switch (cmd) {
2d478     06 11 32 F9 | 	getword	_var09, _var07, #0
2d47c     09 10 26 F3 | 	fle	_var09, #9
2d480     30 10 62 FD | 	jmprel	_var09
2d484                 | LR__4331
2d484     24 00 90 FD | 	jmp	#LR__4332
2d488     3C 00 90 FD | 	jmp	#LR__4333
2d48c     54 00 90 FD | 	jmp	#LR__4334
2d490     5C 00 90 FD | 	jmp	#LR__4335
2d494     64 00 90 FD | 	jmp	#LR__4336
2d498     6C 00 90 FD | 	jmp	#LR__4337
2d49c     74 00 90 FD | 	jmp	#LR__4338
2d4a0     7C 00 90 FD | 	jmp	#LR__4339
2d4a4     84 00 90 FD | 	jmp	#LR__4340
2d4a8     A0 00 90 FD | 	jmp	#LR__4342
2d4ac                 | LR__4332
2d4ac     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4b0     04 09 32 F9 | 	getword	_var05, _var05, #0
2d4b4     04 03 82 F1 | 	sub	_var02, _var05
2d4b8     01 02 66 F0 | 	shl	_var02, #1
2d4bc     03 03 02 F1 | 	add	_var02, _var04
2d4c0     01 03 E2 FA | 	rdword	_var02, _var02
2d4c4     84 00 90 FD | 	jmp	#LR__4342
2d4c8                 | LR__4333
2d4c8     01 05 32 F9 | 	getword	_var03, _var02, #0
2d4cc     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4d0     04 09 32 F9 | 	getword	_var05, _var05, #0
2d4d4     04 03 82 F1 | 	sub	_var02, _var05
2d4d8     01 02 06 F5 | 	and	_var02, #1
2d4dc     02 03 C2 F2 | 	subr	_var02, _var03
2d4e0     68 00 90 FD | 	jmp	#LR__4342
2d4e4                 | LR__4334
2d4e4     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4e8     10 02 86 F1 | 	sub	_var02, #16
2d4ec     5C 00 90 FD | 	jmp	#LR__4342
2d4f0                 | LR__4335
2d4f0     01 03 32 F9 | 	getword	_var02, _var02, #0
2d4f4     20 02 86 F1 | 	sub	_var02, #32
2d4f8     50 00 90 FD | 	jmp	#LR__4342
2d4fc                 | LR__4336
2d4fc     01 03 32 F9 | 	getword	_var02, _var02, #0
2d500     30 02 86 F1 | 	sub	_var02, #48
2d504     44 00 90 FD | 	jmp	#LR__4342
2d508                 | LR__4337
2d508     01 03 32 F9 | 	getword	_var02, _var02, #0
2d50c     1A 02 86 F1 | 	sub	_var02, #26
2d510     38 00 90 FD | 	jmp	#LR__4342
2d514                 | LR__4338
2d514     01 03 32 F9 | 	getword	_var02, _var02, #0
2d518     08 02 06 F1 | 	add	_var02, #8
2d51c     2C 00 90 FD | 	jmp	#LR__4342
2d520                 | LR__4339
2d520     01 03 32 F9 | 	getword	_var02, _var02, #0
2d524     50 02 86 F1 | 	sub	_var02, #80
2d528     20 00 90 FD | 	jmp	#LR__4342
2d52c                 | LR__4340
2d52c     01 03 32 F9 | 	getword	_var02, _var02, #0
2d530     0E 00 00 FF 
2d534     60 02 86 F1 | 	sub	_var02, ##7264
2d538                 | ' 				}
2d538                 | ' 				break;
2d538     10 00 90 FD | 	jmp	#LR__4342
2d53c                 | LR__4341
2d53c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
2d540     02 0A 06 AA |  if_e	mul	_var06, #2
2d544     05 07 02 A1 |  if_e	add	_var04, _var06
2d548     D8 FE 9F FD | 	jmp	#LR__4330
2d54c                 | LR__4342
2d54c     01 01 32 F9 | 	getword	_var01, _var02, #0
2d550                 | LR__4343
2d550                 | ' 		}
2d550                 | ' 		uni = uc;
2d550                 | ' 	}
2d550                 | ' 
2d550                 | ' 	return uni;
2d550     00 FB 01 F6 | 	mov	result1, _var01
2d554                 | _fatfs_cc_ff_wtoupper_ret
2d554     2D 00 64 FD | 	ret
2d558                 | 
2d558                 | _fatfs_cc_strncpy
2d558     09 01 02 F6 | 	mov	_var01, arg01
2d55c     97 12 48 FB | 	callpa	#(@LR__4351-@LR__4350)>>2,fcache_load_ptr_
2d560                 | ' 
2d560                 | ' 	dscan = dst;
2d560                 | ' 	sscan = src;
2d560                 | ' 	count = n;
2d560                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
2d560                 | LR__4350
2d560     01 16 86 F1 | 	sub	arg03, #1
2d564     00 16 56 F2 | 	cmps	arg03, #0 wc
2d568     18 00 90 CD |  if_b	jmp	#LR__4352
2d56c     0A FB C1 FA | 	rdbyte	result1, arg02
2d570     00 FB 41 FC | 	wrbyte	result1, _var01
2d574     01 14 06 F1 | 	add	arg02, #1
2d578     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2d57c                 | ' 		continue;
2d57c     01 00 06 F1 | 	add	_var01, #1
2d580     DC FF 9F 5D |  if_ne	jmp	#LR__4350
2d584                 | LR__4351
2d584                 | LR__4352
2d584     97 0C 48 FB | 	callpa	#(@LR__4354-@LR__4353)>>2,fcache_load_ptr_
2d588                 | ' 	while (--count >= 0)
2d588                 | LR__4353
2d588     01 16 86 F1 | 	sub	arg03, #1
2d58c     00 16 56 F2 | 	cmps	arg03, #0 wc
2d590     00 03 02 36 |  if_ae	mov	_var02, _var01
2d594     01 00 06 31 |  if_ae	add	_var01, #1
2d598     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2d59c     E8 FF 9F 3D |  if_ae	jmp	#LR__4353
2d5a0                 | LR__4354
2d5a0                 | ' 		*dscan++ = '\0';
2d5a0                 | ' 	return(dst);
2d5a0     09 FB 01 F6 | 	mov	result1, arg01
2d5a4                 | _fatfs_cc_strncpy_ret
2d5a4     2D 00 64 FD | 	ret
2d5a8                 | 
2d5a8                 | _fatfs_cc_memcmp
2d5a8                 | ' 	for (n = size; n > 0; n--)
2d5a8     00 16 0E F2 | 	cmp	arg03, #0 wz
2d5ac     28 00 90 AD |  if_e	jmp	#LR__4361
2d5b0                 | LR__4360
2d5b0     09 01 C2 FA | 	rdbyte	_var01, arg01
2d5b4     0A 03 C2 FA | 	rdbyte	_var02, arg02
2d5b8     01 01 0A F2 | 	cmp	_var01, _var02 wz
2d5bc     01 12 06 A1 |  if_e	add	arg01, #1
2d5c0     01 14 06 A1 |  if_e	add	arg02, #1
2d5c4                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
2d5c4     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
2d5c8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2d5cc     01 FB 81 51 |  if_ne	sub	result1, _var02
2d5d0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
2d5d4     F6 17 6E FB | 	djnz	arg03, #LR__4360
2d5d8                 | LR__4361
2d5d8                 | ' 
2d5d8                 | ' 	return(0);
2d5d8     00 FA 05 F6 | 	mov	result1, #0
2d5dc                 | _fatfs_cc_memcmp_ret
2d5dc     2D 00 64 FD | 	ret
2d5e0                 | 
2d5e0                 | _fatfs_cc_strncmp
2d5e0     09 01 0A F6 | 	mov	_var01, arg01 wz
2d5e4     14 00 90 5D |  if_ne	jmp	#LR__4370
2d5e8                 | ' 		return scan2 ? -1 : 0;
2d5e8     00 14 0E F2 | 	cmp	arg02, #0 wz
2d5ec     01 02 66 56 |  if_ne	neg	_var02, #1
2d5f0     00 02 06 A6 |  if_e	mov	_var02, #0
2d5f4     01 FB 01 F6 | 	mov	result1, _var02
2d5f8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
2d5fc                 | LR__4370
2d5fc     00 14 0E F2 | 	cmp	arg02, #0 wz
2d600     01 FA 05 A6 |  if_e	mov	result1, #1
2d604     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d608     0B 05 02 F6 | 	mov	_var03, arg03
2d60c     97 16 48 FB | 	callpa	#(@LR__4372-@LR__4371)>>2,fcache_load_ptr_
2d610                 | ' 	count = n;
2d610                 | ' 	do {
2d610                 | LR__4371
2d610     00 07 C2 FA | 	rdbyte	_var04, _var01
2d614     0A 09 02 F6 | 	mov	_var05, arg02
2d618     04 0B C2 FA | 	rdbyte	_var06, _var05
2d61c     01 04 86 F1 | 	sub	_var03, #1
2d620     00 04 56 F2 | 	cmps	_var03, #0 wc
2d624     01 00 06 F1 | 	add	_var01, #1
2d628     01 14 06 F1 | 	add	arg02, #1
2d62c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2d630     08 00 90 2D |  if_nc_and_z	jmp	#LR__4373
2d634     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2d638     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4371
2d63c                 | LR__4372
2d63c                 | LR__4373
2d63c     00 04 56 F2 | 	cmps	_var03, #0 wc
2d640                 | ' 		return(0);
2d640     00 FA 05 C6 |  if_b	mov	result1, #0
2d644     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2d648     05 07 0A F2 | 	cmp	_var04, _var06 wz
2d64c                 | ' 		return(0);
2d64c     00 FA 05 A6 |  if_e	mov	result1, #0
2d650     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d654     00 06 0E F2 | 	cmp	_var04, #0 wz
2d658                 | ' 		return(-1);
2d658     01 FA 65 A6 |  if_e	neg	result1, #1
2d65c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
2d660     00 0A 0E F2 | 	cmp	_var06, #0 wz
2d664                 | ' 		return(1);
2d664     01 FA 05 A6 |  if_e	mov	result1, #1
2d668                 | ' 		return(c1 - c2);
2d668     03 FB 01 56 |  if_ne	mov	result1, _var04
2d66c     05 FB 81 51 |  if_ne	sub	result1, _var06
2d670                 | _fatfs_cc_strncmp_ret
2d670     2D 00 64 FD | 	ret
2d674                 | 
2d674                 | _fatfs_cc_strchr
2d674                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
2d674                 | ' 	while ((c = *s++) != (char) charwanted)
2d674                 | LR__4380
2d674     09 01 02 F6 | 	mov	_var01, arg01
2d678     00 03 C2 FA | 	rdbyte	_var02, _var01
2d67c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
2d680     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
2d684     03 05 0A F2 | 	cmp	_var03, _var04 wz
2d688     01 12 06 F1 | 	add	arg01, #1
2d68c     14 00 90 AD |  if_e	jmp	#LR__4381
2d690     01 05 02 F6 | 	mov	_var03, _var02
2d694     07 04 4E F7 | 	zerox	_var03, #7 wz
2d698     00 FA 05 A6 |  if_e	mov	result1, #0
2d69c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
2d6a0     D0 FF 9F FD | 	jmp	#LR__4380
2d6a4                 | LR__4381
2d6a4                 | ' 	return((char *)--s);
2d6a4     01 12 86 F1 | 	sub	arg01, #1
2d6a8     09 FB 01 F6 | 	mov	result1, arg01
2d6ac                 | _fatfs_cc_strchr_ret
2d6ac     2D 00 64 FD | 	ret
2d6b0                 | 
2d6b0                 | _fatfs_cc_disk_initialize
2d6b0     04 4A 05 F6 | 	mov	COUNT_, #4
2d6b4     A8 00 A0 FD | 	call	#pushregs_
2d6b8     40 F0 07 F1 | 	add	ptra, #64
2d6bc     04 4E 05 F1 | 	add	fp, #4
2d6c0     A7 12 42 FC | 	wrbyte	arg01, fp
2d6c4     01 00 00 FF 
2d6c8     14 E4 05 F1 | 	add	objptr, ##532
2d6cc     F2 18 02 FB | 	rdlong	arg04, objptr
2d6d0     2C 4E 05 F1 | 	add	fp, #44
2d6d4     A7 18 62 FC | 	wrlong	arg04, fp
2d6d8     04 E4 85 F1 | 	sub	objptr, #4
2d6dc     F2 18 02 FB | 	rdlong	arg04, objptr
2d6e0     04 4E 05 F1 | 	add	fp, #4
2d6e4     A7 18 62 FC | 	wrlong	arg04, fp
2d6e8     08 E4 05 F1 | 	add	objptr, #8
2d6ec     F2 18 02 FB | 	rdlong	arg04, objptr
2d6f0     04 4E 05 F1 | 	add	fp, #4
2d6f4     A7 18 62 FC | 	wrlong	arg04, fp
2d6f8     04 E4 05 F1 | 	add	objptr, #4
2d6fc     F2 18 02 FB | 	rdlong	arg04, objptr
2d700     04 4E 05 F1 | 	add	fp, #4
2d704     A7 18 62 FC | 	wrlong	arg04, fp
2d708     04 E4 05 F1 | 	add	objptr, #4
2d70c     F2 02 48 FC | 	wrbyte	#1, objptr
2d710     01 00 00 FF 
2d714     20 E4 85 F1 | 	sub	objptr, ##544
2d718     38 4E 85 F1 | 	sub	fp, #56
2d71c     A7 18 CA FA | 	rdbyte	arg04, fp wz
2d720     04 4E 85 F1 | 	sub	fp, #4
2d724                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2d724                 | '             return RES_NOTRDY;
2d724     03 FA 05 56 |  if_ne	mov	result1, #3
2d728     D8 05 90 5D |  if_ne	jmp	#LR__4408
2d72c     13 00 00 FF 
2d730     10 13 06 F6 | 	mov	arg01, ##10000
2d734     40 95 BF FD | 	call	#__system___waitus
2d738     30 4E 05 F1 | 	add	fp, #48
2d73c     A7 12 02 FB | 	rdlong	arg01, fp
2d740     09 01 08 FC | 	wrpin	#0, arg01
2d744     04 4E 05 F1 | 	add	fp, #4
2d748     A7 12 02 FB | 	rdlong	arg01, fp
2d74c     09 01 08 FC | 	wrpin	#0, arg01
2d750     04 4E 05 F1 | 	add	fp, #4
2d754     A7 12 02 FB | 	rdlong	arg01, fp
2d758     09 01 08 FC | 	wrpin	#0, arg01
2d75c     04 4E 05 F1 | 	add	fp, #4
2d760     A7 12 02 FB | 	rdlong	arg01, fp
2d764     09 00 80 FF 
2d768     09 01 08 FC | 	wrpin	##4608, arg01
2d76c     0C 4E 85 F1 | 	sub	fp, #12
2d770     A7 12 02 FB | 	rdlong	arg01, fp
2d774     59 12 62 FD | 	drvh	arg01
2d778     04 4E 05 F1 | 	add	fp, #4
2d77c     A7 12 02 FB | 	rdlong	arg01, fp
2d780     59 12 62 FD | 	drvh	arg01
2d784     04 4E 05 F1 | 	add	fp, #4
2d788     A7 12 02 FB | 	rdlong	arg01, fp
2d78c     59 12 62 FD | 	drvh	arg01
2d790     04 4E 05 F1 | 	add	fp, #4
2d794     A7 12 02 FB | 	rdlong	arg01, fp
2d798     59 12 62 FD | 	drvh	arg01
2d79c     20 4E 85 F1 | 	sub	fp, #32
2d7a0     00 04 80 FF 
2d7a4     A7 20 68 FC | 	wrlong	##524304, fp
2d7a8     04 4E 05 F1 | 	add	fp, #4
2d7ac     20 03 80 FF 
2d7b0     A7 90 68 FC | 	wrlong	##409672, fp
2d7b4     14 4E 05 F1 | 	add	fp, #20
2d7b8     A7 26 02 FB | 	rdlong	local01, fp
2d7bc     18 4E 85 F1 | 	sub	fp, #24
2d7c0     A7 16 02 FB | 	rdlong	arg03, fp
2d7c4     40 26 62 FD | 	dirl	local01
2d7c8     A0 03 80 FF 
2d7cc     13 91 08 FC | 	wrpin	##475208, local01
2d7d0     13 17 12 FC | 	wxpin	arg03, local01
2d7d4     13 01 28 FC | 	wypin	#0, local01
2d7d8     41 26 62 FD | 	dirh	local01
2d7dc     1C 4E 05 F1 | 	add	fp, #28
2d7e0     A7 28 02 FB | 	rdlong	local02, fp
2d7e4     14 27 82 F1 | 	sub	local01, local02
2d7e8     07 26 06 F5 | 	and	local01, #7
2d7ec     18 26 66 F0 | 	shl	local01, #24
2d7f0     78 14 06 F6 | 	mov	arg02, #120
2d7f4     13 15 42 F5 | 	or	arg02, local01
2d7f8     14 4E 85 F1 | 	sub	fp, #20
2d7fc     A7 14 62 FC | 	wrlong	arg02, fp
2d800     14 4E 05 F1 | 	add	fp, #20
2d804     A7 12 02 FB | 	rdlong	arg01, fp
2d808     10 14 26 F4 | 	bith	arg02, #16
2d80c     40 12 62 FD | 	dirl	arg01
2d810     09 15 02 FC | 	wrpin	arg02, arg01
2d814     09 3F 18 FC | 	wxpin	#31, arg01
2d818     FF FF FF FF 
2d81c     09 FF 2B FC | 	wypin	##-1, arg01
2d820     41 12 62 FD | 	dirh	arg01
2d824     04 4E 85 F1 | 	sub	fp, #4
2d828     A7 14 02 FB | 	rdlong	arg02, fp
2d82c     08 4E 05 F1 | 	add	fp, #8
2d830     A7 2A 02 FB | 	rdlong	local03, fp
2d834     15 15 82 F1 | 	sub	arg02, local03
2d838     07 14 06 F5 | 	and	arg02, #7
2d83c     18 14 66 F0 | 	shl	arg02, #24
2d840     14 4E 85 F1 | 	sub	fp, #20
2d844     A7 14 62 FC | 	wrlong	arg02, fp
2d848     29 00 00 FF 
2d84c     7A 14 46 F5 | 	or	arg02, ##21114
2d850     A7 14 62 FC | 	wrlong	arg02, fp
2d854     14 4E 05 F1 | 	add	fp, #20
2d858     A7 12 02 FB | 	rdlong	arg01, fp
2d85c     40 12 62 FD | 	dirl	arg01
2d860     09 15 02 FC | 	wrpin	arg02, arg01
2d864     09 4F 18 FC | 	wxpin	#39, arg01
2d868     09 01 28 FC | 	wypin	#0, arg01
2d86c     41 12 62 FD | 	dirh	arg01
2d870     28 4E 85 F1 | 	sub	fp, #40
2d874     A7 12 02 F6 | 	mov	arg01, fp
2d878     14 4E 85 F1 | 	sub	fp, #20
2d87c     0A 14 06 F6 | 	mov	arg02, #10
2d880     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1192
2d884     00 12 06 F6 | 	mov	arg01, #0
2d888     00 14 06 F6 | 	mov	arg02, #0
2d88c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2d890     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1202
2d894     64 12 06 F6 | 	mov	arg01, #100
2d898     DC 93 BF FD | 	call	#__system___waitus
2d89c     14 4E 05 F1 | 	add	fp, #20
2d8a0     A7 12 02 F6 | 	mov	arg01, fp
2d8a4     14 4E 85 F1 | 	sub	fp, #20
2d8a8     0A 14 06 F6 | 	mov	arg02, #10
2d8ac     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1192
2d8b0     0C 4E 05 F1 | 	add	fp, #12
2d8b4     A7 00 48 FC | 	wrbyte	#0, fp
2d8b8     0C 4E 85 F1 | 	sub	fp, #12
2d8bc     00 12 06 F6 | 	mov	arg01, #0
2d8c0     00 14 06 F6 | 	mov	arg02, #0
2d8c4     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2d8c8     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
2d8cc     01 18 0E F2 | 	cmp	arg04, #1 wz
2d8d0     B8 03 90 5D |  if_ne	jmp	#LR__4407
2d8d4     08 12 06 F6 | 	mov	arg01, #8
2d8d8     AA 15 06 F6 | 	mov	arg02, #426
2d8dc     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2d8e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
2d8e4     01 FA 0D F2 | 	cmp	result1, #1 wz
2d8e8     98 01 90 5D |  if_ne	jmp	#LR__4393
2d8ec     14 4E 05 F1 | 	add	fp, #20
2d8f0     A7 12 02 F6 | 	mov	arg01, fp
2d8f4     14 4E 85 F1 | 	sub	fp, #20
2d8f8     04 14 06 F6 | 	mov	arg02, #4
2d8fc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1192
2d900     16 4E 05 F1 | 	add	fp, #22
2d904     A7 2C C2 FA | 	rdbyte	local04, fp
2d908     16 4E 85 F1 | 	sub	fp, #22
2d90c     01 2C 0E F2 | 	cmp	local04, #1 wz
2d910     17 4E 05 A1 |  if_e	add	fp, #23
2d914     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2d918     17 4E 85 A1 |  if_e	sub	fp, #23
2d91c     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
2d920     68 03 90 5D |  if_ne	jmp	#LR__4406
2d924                 | ' 				for (tmr = 1000; tmr; tmr--) {
2d924     18 4E 05 F1 | 	add	fp, #24
2d928     01 00 80 FF 
2d92c     A7 D0 6B FC | 	wrlong	##1000, fp
2d930     18 4E 85 F1 | 	sub	fp, #24
2d934                 | LR__4390
2d934     18 4E 05 F1 | 	add	fp, #24
2d938     A7 26 0A FB | 	rdlong	local01, fp wz
2d93c     18 4E 85 F1 | 	sub	fp, #24
2d940     3C 00 90 AD |  if_e	jmp	#LR__4391
2d944     A9 12 06 F6 | 	mov	arg01, #169
2d948     1E 14 C6 F9 | 	decod	arg02, #30
2d94c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2d950     FD 2C 02 F6 | 	mov	local04, result1
2d954     07 2C 4E F7 | 	zerox	local04, #7 wz
2d958     24 00 90 AD |  if_e	jmp	#LR__4391
2d95c     01 00 00 FF 
2d960     E8 13 06 F6 | 	mov	arg01, ##1000
2d964     10 93 BF FD | 	call	#__system___waitus
2d968     18 4E 05 F1 | 	add	fp, #24
2d96c     A7 2C 02 FB | 	rdlong	local04, fp
2d970     01 2C 86 F1 | 	sub	local04, #1
2d974     A7 2C 62 FC | 	wrlong	local04, fp
2d978     18 4E 85 F1 | 	sub	fp, #24
2d97c     B4 FF 9F FD | 	jmp	#LR__4390
2d980                 | LR__4391
2d980     18 4E 05 F1 | 	add	fp, #24
2d984     A7 2C 0A FB | 	rdlong	local04, fp wz
2d988     18 4E 85 F1 | 	sub	fp, #24
2d98c     4C 00 90 AD |  if_e	jmp	#LR__4392
2d990     3A 12 06 F6 | 	mov	arg01, #58
2d994     00 14 06 F6 | 	mov	arg02, #0
2d998     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2d99c     FD 2A 02 F6 | 	mov	local03, result1
2d9a0     07 2A 4E F7 | 	zerox	local03, #7 wz
2d9a4     34 00 90 5D |  if_ne	jmp	#LR__4392
2d9a8     14 4E 05 F1 | 	add	fp, #20
2d9ac     A7 12 02 F6 | 	mov	arg01, fp
2d9b0     14 4E 85 F1 | 	sub	fp, #20
2d9b4     04 14 06 F6 | 	mov	arg02, #4
2d9b8     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1192
2d9bc     14 4E 05 F1 | 	add	fp, #20
2d9c0     A7 26 C2 FA | 	rdbyte	local01, fp
2d9c4     40 26 CE F7 | 	test	local01, #64 wz
2d9c8     0C 2C 06 56 |  if_ne	mov	local04, #12
2d9cc     04 2C 06 A6 |  if_e	mov	local04, #4
2d9d0     08 4E 85 F1 | 	sub	fp, #8
2d9d4     A7 2C 42 FC | 	wrbyte	local04, fp
2d9d8     0C 4E 85 F1 | 	sub	fp, #12
2d9dc                 | LR__4392
2d9dc     14 2C 06 FB | 	rdlong	local04, #20
2d9e0     18 4E 05 F1 | 	add	fp, #24
2d9e4     A7 2C 62 FC | 	wrlong	local04, fp
2d9e8     0C 4E 05 F1 | 	add	fp, #12
2d9ec     A7 2C 02 FB | 	rdlong	local04, fp
2d9f0     1B 2C 26 F4 | 	bith	local04, #27
2d9f4     A7 2C 62 FC | 	wrlong	local04, fp
2d9f8     0C 4E 85 F1 | 	sub	fp, #12
2d9fc     A7 2C 02 FB | 	rdlong	local04, fp
2da00     18 4E 85 F1 | 	sub	fp, #24
2da04     68 78 04 FF 
2da08     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2da0c     1C 4E 05 C1 |  if_b	add	fp, #28
2da10     00 01 80 CF 
2da14     A7 08 68 CC |  if_b	wrlong	##131076, fp
2da18     1C 4E 85 C1 |  if_b	sub	fp, #28
2da1c     6C 02 90 CD |  if_b	jmp	#LR__4406
2da20     18 4E 05 F1 | 	add	fp, #24
2da24     A7 2C 02 FB | 	rdlong	local04, fp
2da28     18 4E 85 F1 | 	sub	fp, #24
2da2c     E1 F5 05 FF 
2da30     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2da34     1C 4E 05 C1 |  if_b	add	fp, #28
2da38     00 01 80 CF 
2da3c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
2da40     1C 4E 85 C1 |  if_b	sub	fp, #28
2da44     44 02 90 CD |  if_b	jmp	#LR__4406
2da48     18 4E 05 F1 | 	add	fp, #24
2da4c     A7 2C 02 FB | 	rdlong	local04, fp
2da50     18 4E 85 F1 | 	sub	fp, #24
2da54     3B 58 08 FF 
2da58     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
2da5c     1C 4E 05 C1 |  if_b	add	fp, #28
2da60     00 01 80 CF 
2da64     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2da68     1C 4E 85 C1 |  if_b	sub	fp, #28
2da6c     1C 02 90 CD |  if_b	jmp	#LR__4406
2da70     1C 4E 05 F1 | 	add	fp, #28
2da74     80 01 80 FF 
2da78     A7 10 68 FC | 	wrlong	##196616, fp
2da7c     1C 4E 85 F1 | 	sub	fp, #28
2da80     08 02 90 FD | 	jmp	#LR__4406
2da84                 | LR__4393
2da84     A9 12 06 F6 | 	mov	arg01, #169
2da88     00 14 06 F6 | 	mov	arg02, #0
2da8c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2da90     FD 2C E2 F8 | 	getbyte	local04, result1, #0
2da94     02 2C 16 F2 | 	cmp	local04, #2 wc
2da98     18 00 90 3D |  if_ae	jmp	#LR__4394
2da9c     0C 4E 05 F1 | 	add	fp, #12
2daa0     A7 04 48 FC | 	wrbyte	#2, fp
2daa4     04 4E 05 F1 | 	add	fp, #4
2daa8     A7 52 49 FC | 	wrbyte	#169, fp
2daac     10 4E 85 F1 | 	sub	fp, #16
2dab0     14 00 90 FD | 	jmp	#LR__4395
2dab4                 | LR__4394
2dab4     0C 4E 05 F1 | 	add	fp, #12
2dab8     A7 02 48 FC | 	wrbyte	#1, fp
2dabc     04 4E 05 F1 | 	add	fp, #4
2dac0     A7 02 48 FC | 	wrbyte	#1, fp
2dac4     10 4E 85 F1 | 	sub	fp, #16
2dac8                 | LR__4395
2dac8                 | ' 				ty =  0x01 ; cmd =  (1) ;
2dac8                 | ' 			}
2dac8                 | ' 			for (tmr = 1000; tmr; tmr--) {
2dac8     18 4E 05 F1 | 	add	fp, #24
2dacc     01 00 80 FF 
2dad0     A7 D0 6B FC | 	wrlong	##1000, fp
2dad4     18 4E 85 F1 | 	sub	fp, #24
2dad8                 | LR__4396
2dad8     18 4E 05 F1 | 	add	fp, #24
2dadc     A7 2A 0A FB | 	rdlong	local03, fp wz
2dae0     18 4E 85 F1 | 	sub	fp, #24
2dae4     44 00 90 AD |  if_e	jmp	#LR__4397
2dae8     10 4E 05 F1 | 	add	fp, #16
2daec     A7 12 C2 FA | 	rdbyte	arg01, fp
2daf0     10 4E 85 F1 | 	sub	fp, #16
2daf4     00 14 06 F6 | 	mov	arg02, #0
2daf8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2dafc     FD 2C 02 F6 | 	mov	local04, result1
2db00     07 2C 4E F7 | 	zerox	local04, #7 wz
2db04     24 00 90 AD |  if_e	jmp	#LR__4397
2db08     01 00 00 FF 
2db0c     E8 13 06 F6 | 	mov	arg01, ##1000
2db10     64 91 BF FD | 	call	#__system___waitus
2db14     18 4E 05 F1 | 	add	fp, #24
2db18     A7 2C 02 FB | 	rdlong	local04, fp
2db1c     01 2C 86 F1 | 	sub	local04, #1
2db20     A7 2C 62 FC | 	wrlong	local04, fp
2db24     18 4E 85 F1 | 	sub	fp, #24
2db28     AC FF 9F FD | 	jmp	#LR__4396
2db2c                 | LR__4397
2db2c     18 4E 05 F1 | 	add	fp, #24
2db30     A7 2C 0A FB | 	rdlong	local04, fp wz
2db34     18 4E 85 F1 | 	sub	fp, #24
2db38     14 00 90 AD |  if_e	jmp	#LR__4398
2db3c     10 12 06 F6 | 	mov	arg01, #16
2db40     09 14 C6 F9 | 	decod	arg02, #9
2db44     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2db48     07 FA 4D F7 | 	zerox	result1, #7 wz
2db4c     0C 00 90 AD |  if_e	jmp	#LR__4399
2db50                 | LR__4398
2db50     0C 4E 05 F1 | 	add	fp, #12
2db54     A7 00 48 FC | 	wrbyte	#0, fp
2db58     0C 4E 85 F1 | 	sub	fp, #12
2db5c                 | LR__4399
2db5c     14 2C 06 FB | 	rdlong	local04, #20
2db60     18 4E 05 F1 | 	add	fp, #24
2db64     A7 2C 62 FC | 	wrlong	local04, fp
2db68     18 4E 85 F1 | 	sub	fp, #24
2db6c     F0 FA 02 FF 
2db70     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2db74     18 00 90 3D |  if_ae	jmp	#LR__4400
2db78     24 4E 05 F1 | 	add	fp, #36
2db7c     A7 2C 02 FB | 	rdlong	local04, fp
2db80     1B 2C 26 F4 | 	bith	local04, #27
2db84     A7 2C 62 FC | 	wrlong	local04, fp
2db88     24 4E 85 F1 | 	sub	fp, #36
2db8c     2C 00 90 FD | 	jmp	#LR__4401
2db90                 | LR__4400
2db90     18 4E 05 F1 | 	add	fp, #24
2db94     A7 2C 02 FB | 	rdlong	local04, fp
2db98     18 4E 85 F1 | 	sub	fp, #24
2db9c     E1 F5 05 FF 
2dba0     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2dba4     24 4E 05 C1 |  if_b	add	fp, #36
2dba8     A7 2C 02 CB |  if_b	rdlong	local04, fp
2dbac     80 00 04 CF 
2dbb0     00 2C 46 C5 |  if_b	or	local04, ##134283264
2dbb4     A7 2C 62 CC |  if_b	wrlong	local04, fp
2dbb8     24 4E 85 C1 |  if_b	sub	fp, #36
2dbbc                 | LR__4401
2dbbc     18 4E 05 F1 | 	add	fp, #24
2dbc0     A7 2C 02 FB | 	rdlong	local04, fp
2dbc4     18 4E 85 F1 | 	sub	fp, #24
2dbc8     F0 FA 02 FF 
2dbcc     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
2dbd0     1C 4E 05 C1 |  if_b	add	fp, #28
2dbd4     00 01 80 CF 
2dbd8     A7 08 68 CC |  if_b	wrlong	##131076, fp
2dbdc     1C 4E 85 C1 |  if_b	sub	fp, #28
2dbe0     A8 00 90 CD |  if_b	jmp	#LR__4405
2dbe4     18 4E 05 F1 | 	add	fp, #24
2dbe8     A7 2C 02 FB | 	rdlong	local04, fp
2dbec     18 4E 85 F1 | 	sub	fp, #24
2dbf0     68 78 04 FF 
2dbf4     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
2dbf8     1C 4E 05 C1 |  if_b	add	fp, #28
2dbfc     80 01 80 CF 
2dc00     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2dc04     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc08     80 00 90 CD |  if_b	jmp	#LR__4404
2dc0c     18 4E 05 F1 | 	add	fp, #24
2dc10     A7 2C 02 FB | 	rdlong	local04, fp
2dc14     18 4E 85 F1 | 	sub	fp, #24
2dc18     E1 F5 05 FF 
2dc1c     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
2dc20     1C 4E 05 C1 |  if_b	add	fp, #28
2dc24     00 02 80 CF 
2dc28     A7 10 68 CC |  if_b	wrlong	##262152, fp
2dc2c     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc30     58 00 90 CD |  if_b	jmp	#LR__4403
2dc34     18 4E 05 F1 | 	add	fp, #24
2dc38     A7 2C 02 FB | 	rdlong	local04, fp
2dc3c     18 4E 85 F1 | 	sub	fp, #24
2dc40     59 73 07 FF 
2dc44     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2dc48     1C 4E 05 C1 |  if_b	add	fp, #28
2dc4c     80 02 80 CF 
2dc50     A7 14 68 CC |  if_b	wrlong	##327690, fp
2dc54     1C 4E 85 C1 |  if_b	sub	fp, #28
2dc58     30 00 90 CD |  if_b	jmp	#LR__4402
2dc5c     18 4E 05 F1 | 	add	fp, #24
2dc60     A7 2C 02 FB | 	rdlong	local04, fp
2dc64     18 4E 85 F1 | 	sub	fp, #24
2dc68     D1 F0 08 FF 
2dc6c     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
2dc70     1C 4E 05 C1 |  if_b	add	fp, #28
2dc74     00 03 80 CF 
2dc78     A7 18 68 CC |  if_b	wrlong	##393228, fp
2dc7c     1C 4E 85 F3 | 	sumc	fp, #28
2dc80     80 03 80 3F 
2dc84     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2dc88     1C 4E 85 31 |  if_ae	sub	fp, #28
2dc8c                 | LR__4402
2dc8c                 | LR__4403
2dc8c                 | LR__4404
2dc8c                 | LR__4405
2dc8c                 | LR__4406
2dc8c                 | LR__4407
2dc8c     0C 4E 05 F1 | 	add	fp, #12
2dc90     A7 2C C2 FA | 	rdbyte	local04, fp
2dc94     01 00 00 FF 
2dc98     21 E4 05 F1 | 	add	objptr, ##545
2dc9c     F2 2C 42 FC | 	wrbyte	local04, objptr
2dca0     A7 26 CA FA | 	rdbyte	local01, fp wz
2dca4     00 2C 06 56 |  if_ne	mov	local04, #0
2dca8     01 2C 06 A6 |  if_e	mov	local04, #1
2dcac     20 4E 05 F1 | 	add	fp, #32
2dcb0     A7 2C 42 FC | 	wrbyte	local04, fp
2dcb4     A7 2C C2 FA | 	rdbyte	local04, fp
2dcb8     2C 4E 85 F1 | 	sub	fp, #44
2dcbc     01 E4 85 F1 | 	sub	objptr, #1
2dcc0     F2 2C 42 FC | 	wrbyte	local04, objptr
2dcc4     01 00 00 FF 
2dcc8     20 E4 85 F1 | 	sub	objptr, ##544
2dccc     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1202
2dcd0     34 4E 05 F1 | 	add	fp, #52
2dcd4     A7 12 02 FB | 	rdlong	arg01, fp
2dcd8     18 4E 85 F1 | 	sub	fp, #24
2dcdc     A7 14 02 FB | 	rdlong	arg02, fp
2dce0     09 15 12 FC | 	wxpin	arg02, arg01
2dce4     1C 4E 05 F1 | 	add	fp, #28
2dce8     A7 12 02 FB | 	rdlong	arg01, fp
2dcec     14 4E 85 F1 | 	sub	fp, #20
2dcf0     A7 14 02 FB | 	rdlong	arg02, fp
2dcf4     09 15 02 FC | 	wrpin	arg02, arg01
2dcf8                 | ' 
2dcf8                 | ' 		}
2dcf8                 | ' 	}
2dcf8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dcf8                 | ' 	CardType = ty;
2dcf8                 | ' 	s = ty ? 0 :  0x01 ;
2dcf8                 | ' 	Stat = s;
2dcf8                 | ' 
2dcf8                 | ' 	deselect();
2dcf8                 | ' 
2dcf8                 | ' 
2dcf8                 | ' 	_wxpin( PIN_CLK, ck_div );
2dcf8                 | ' 	_wrpin( PIN_DI, spm_tx );
2dcf8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2dcf8                 | ' 	return s;
2dcf8     08 4E 05 F1 | 	add	fp, #8
2dcfc     A7 FA C1 FA | 	rdbyte	result1, fp
2dd00     2C 4E 85 F1 | 	sub	fp, #44
2dd04                 | LR__4408
2dd04     A7 F0 03 F6 | 	mov	ptra, fp
2dd08     B2 00 A0 FD | 	call	#popregs_
2dd0c                 | _fatfs_cc_disk_initialize_ret
2dd0c     2D 00 64 FD | 	ret
2dd10                 | 
2dd10                 | _fatfs_cc_disk_read
2dd10     05 4A 05 F6 | 	mov	COUNT_, #5
2dd14     A8 00 A0 FD | 	call	#pushregs_
2dd18     0A 27 02 F6 | 	mov	local01, arg02
2dd1c     0B 29 02 F6 | 	mov	local02, arg03
2dd20     0C 2B 02 F6 | 	mov	local03, arg04
2dd24     00 12 0E F2 | 	cmp	arg01, #0 wz
2dd28     01 FA 05 56 |  if_ne	mov	result1, #1
2dd2c                 | ' 
2dd2c                 | ' 	return Stat;
2dd2c     01 00 00 AF 
2dd30     20 E4 05 A1 |  if_e	add	objptr, ##544
2dd34     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2dd38     01 00 00 AF 
2dd3c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2dd40     FD FA E1 F8 | 	getbyte	result1, result1, #0
2dd44     01 FA CD F7 | 	test	result1, #1 wz
2dd48     03 FA 05 56 |  if_ne	mov	result1, #3
2dd4c     84 00 90 5D |  if_ne	jmp	#LR__4412
2dd50     01 00 00 FF 
2dd54     21 E4 05 F1 | 	add	objptr, ##545
2dd58     F2 2C C2 FA | 	rdbyte	local04, objptr
2dd5c     01 00 00 FF 
2dd60     21 E4 85 F1 | 	sub	objptr, ##545
2dd64     08 2C CE F7 | 	test	local04, #8 wz
2dd68     09 28 66 A0 |  if_e	shl	local02, #9
2dd6c     02 2A 16 F2 | 	cmp	local03, #2 wc
2dd70     12 2C 06 36 |  if_ae	mov	local04, #18
2dd74     11 2C 06 C6 |  if_b	mov	local04, #17
2dd78     14 15 02 F6 | 	mov	arg02, local02
2dd7c     16 13 02 F6 | 	mov	arg01, local04
2dd80     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2dd84     FD 2E 02 F6 | 	mov	local05, result1
2dd88     07 2E 4E F7 | 	zerox	local05, #7 wz
2dd8c     30 00 90 5D |  if_ne	jmp	#LR__4411
2dd90                 | ' 		do {
2dd90                 | LR__4410
2dd90     13 13 02 F6 | 	mov	arg01, local01
2dd94     09 14 C6 F9 | 	decod	arg02, #9
2dd98     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1210
2dd9c     00 FA 0D F2 | 	cmp	result1, #0 wz
2dda0     01 00 00 5F 
2dda4     00 26 06 51 |  if_ne	add	local01, ##512
2dda8     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4410
2ddac     16 2D E2 F8 | 	getbyte	local04, local04, #0
2ddb0     12 2C 0E F2 | 	cmp	local04, #18 wz
2ddb4     0C 12 06 A6 |  if_e	mov	arg01, #12
2ddb8     00 14 06 A6 |  if_e	mov	arg02, #0
2ddbc     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1216
2ddc0                 | LR__4411
2ddc0     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1202
2ddc4                 | ' 	}
2ddc4                 | ' 	deselect();
2ddc4                 | ' 
2ddc4                 | ' 	return count ? RES_ERROR : RES_OK;
2ddc4     00 2A 0E F2 | 	cmp	local03, #0 wz
2ddc8     01 2E 06 56 |  if_ne	mov	local05, #1
2ddcc     00 2E 06 A6 |  if_e	mov	local05, #0
2ddd0     17 FB 01 F6 | 	mov	result1, local05
2ddd4                 | LR__4412
2ddd4     A7 F0 03 F6 | 	mov	ptra, fp
2ddd8     B2 00 A0 FD | 	call	#popregs_
2dddc                 | _fatfs_cc_disk_read_ret
2dddc     2D 00 64 FD | 	ret
2dde0                 | 
2dde0                 | _fatfs_cc_disk_write
2dde0     04 4A 05 F6 | 	mov	COUNT_, #4
2dde4     A8 00 A0 FD | 	call	#pushregs_
2dde8     0A 27 02 F6 | 	mov	local01, arg02
2ddec     0C 29 02 F6 | 	mov	local02, arg04
2ddf0     0B 2B 02 F6 | 	mov	local03, arg03
2ddf4     00 12 0E F2 | 	cmp	arg01, #0 wz
2ddf8     01 FA 05 56 |  if_ne	mov	result1, #1
2ddfc                 | ' 
2ddfc                 | ' 	return Stat;
2ddfc     01 00 00 AF 
2de00     20 E4 05 A1 |  if_e	add	objptr, ##544
2de04     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2de08     01 00 00 AF 
2de0c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2de10     FD FA E1 F8 | 	getbyte	result1, result1, #0
2de14     01 FA CD F7 | 	test	result1, #1 wz
2de18     03 FA 05 56 |  if_ne	mov	result1, #3
2de1c     D4 00 90 5D |  if_ne	jmp	#LR__4424
2de20     01 00 00 FF 
2de24     21 E4 05 F1 | 	add	objptr, ##545
2de28     F2 16 C2 FA | 	rdbyte	arg03, objptr
2de2c     01 00 00 FF 
2de30     21 E4 85 F1 | 	sub	objptr, ##545
2de34     08 16 CE F7 | 	test	arg03, #8 wz
2de38     09 2A 66 A0 |  if_e	shl	local03, #9
2de3c     01 28 0E F2 | 	cmp	local02, #1 wz
2de40     30 00 90 5D |  if_ne	jmp	#LR__4420
2de44     18 12 06 F6 | 	mov	arg01, #24
2de48     15 15 02 F6 | 	mov	arg02, local03
2de4c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2de50     FD 2C 02 F6 | 	mov	local04, result1
2de54     07 2C 4E F7 | 	zerox	local04, #7 wz
2de58     84 00 90 5D |  if_ne	jmp	#LR__4423
2de5c     13 13 02 F6 | 	mov	arg01, local01
2de60     FE 14 06 F6 | 	mov	arg02, #254
2de64     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1212
2de68     00 FA 0D F2 | 	cmp	result1, #0 wz
2de6c     00 28 06 56 |  if_ne	mov	local02, #0
2de70     6C 00 90 FD | 	jmp	#LR__4423
2de74                 | LR__4420
2de74     01 00 00 FF 
2de78     21 E4 05 F1 | 	add	objptr, ##545
2de7c     F2 2C C2 FA | 	rdbyte	local04, objptr
2de80     01 00 00 FF 
2de84     21 E4 85 F1 | 	sub	objptr, ##545
2de88     06 2C CE F7 | 	test	local04, #6 wz
2de8c     97 12 06 56 |  if_ne	mov	arg01, #151
2de90     14 15 02 56 |  if_ne	mov	arg02, local02
2de94     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1216
2de98     15 15 02 F6 | 	mov	arg02, local03
2de9c     19 12 06 F6 | 	mov	arg01, #25
2dea0     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2dea4     FD 2C 02 F6 | 	mov	local04, result1
2dea8     07 2C 4E F7 | 	zerox	local04, #7 wz
2deac     30 00 90 5D |  if_ne	jmp	#LR__4422
2deb0                 | ' 			do {
2deb0                 | LR__4421
2deb0     13 13 02 F6 | 	mov	arg01, local01
2deb4     FC 14 06 F6 | 	mov	arg02, #252
2deb8     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1212
2debc     00 FA 0D F2 | 	cmp	result1, #0 wz
2dec0     01 00 00 5F 
2dec4     00 26 06 51 |  if_ne	add	local01, ##512
2dec8     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4421
2decc     00 12 06 F6 | 	mov	arg01, #0
2ded0     FD 14 06 F6 | 	mov	arg02, #253
2ded4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1212
2ded8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dedc     01 28 06 A6 |  if_e	mov	local02, #1
2dee0                 | LR__4422
2dee0                 | LR__4423
2dee0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1202
2dee4                 | ' 				count = 1;
2dee4                 | ' 		}
2dee4                 | ' 	}
2dee4                 | ' 	deselect();
2dee4                 | ' 
2dee4                 | ' 	return count ? RES_ERROR : RES_OK;
2dee4     00 28 0E F2 | 	cmp	local02, #0 wz
2dee8     01 2C 06 56 |  if_ne	mov	local04, #1
2deec     00 2C 06 A6 |  if_e	mov	local04, #0
2def0     16 FB 01 F6 | 	mov	result1, local04
2def4                 | LR__4424
2def4     A7 F0 03 F6 | 	mov	ptra, fp
2def8     B2 00 A0 FD | 	call	#popregs_
2defc                 | _fatfs_cc_disk_write_ret
2defc     2D 00 64 FD | 	ret
2df00                 | 
2df00                 | _fatfs_cc_disk_ioctl
2df00     01 4A 05 F6 | 	mov	COUNT_, #1
2df04     A8 00 A0 FD | 	call	#pushregs_
2df08     30 F0 07 F1 | 	add	ptra, #48
2df0c     04 4E 05 F1 | 	add	fp, #4
2df10     A7 12 42 FC | 	wrbyte	arg01, fp
2df14     04 4E 05 F1 | 	add	fp, #4
2df18     A7 14 42 FC | 	wrbyte	arg02, fp
2df1c     04 4E 05 F1 | 	add	fp, #4
2df20     A7 16 62 FC | 	wrlong	arg03, fp
2df24     08 4E 85 F1 | 	sub	fp, #8
2df28     A7 12 CA FA | 	rdbyte	arg01, fp wz
2df2c     04 4E 85 F1 | 	sub	fp, #4
2df30     01 FA 05 56 |  if_ne	mov	result1, #1
2df34                 | ' 
2df34                 | ' 	return Stat;
2df34     01 00 00 AF 
2df38     20 E4 05 A1 |  if_e	add	objptr, ##544
2df3c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2df40     01 00 00 AF 
2df44     20 E4 85 A1 |  if_e	sub	objptr, ##544
2df48     FD FA E1 F8 | 	getbyte	result1, result1, #0
2df4c     01 FA CD F7 | 	test	result1, #1 wz
2df50     03 FA 05 56 |  if_ne	mov	result1, #3
2df54     E4 01 90 5D |  if_ne	jmp	#LR__4438
2df58     10 4E 05 F1 | 	add	fp, #16
2df5c     A7 02 68 FC | 	wrlong	#1, fp
2df60                 | ' 
2df60                 | ' 	res = RES_ERROR;
2df60                 | ' 	switch (ctrl) {
2df60     08 4E 85 F1 | 	sub	fp, #8
2df64     A7 26 C2 FA | 	rdbyte	local01, fp
2df68     08 4E 85 F1 | 	sub	fp, #8
2df6c     04 26 26 F3 | 	fle	local01, #4
2df70     30 26 62 FD | 	jmprel	local01
2df74                 | LR__4430
2df74     10 00 90 FD | 	jmp	#LR__4431
2df78     24 00 90 FD | 	jmp	#LR__4432
2df7c     A0 01 90 FD | 	jmp	#LR__4436
2df80     80 01 90 FD | 	jmp	#LR__4435
2df84     98 01 90 FD | 	jmp	#LR__4436
2df88                 | LR__4431
2df88     B4 79 B0 FD | 	call	#_fatfs_cc_select_1206
2df8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2df90     10 4E 05 51 |  if_ne	add	fp, #16
2df94     A7 00 68 5C |  if_ne	wrlong	#0, fp
2df98     10 4E 85 51 |  if_ne	sub	fp, #16
2df9c                 | ' 			break;
2df9c     8C 01 90 FD | 	jmp	#LR__4437
2dfa0                 | LR__4432
2dfa0     09 12 06 F6 | 	mov	arg01, #9
2dfa4     00 14 06 F6 | 	mov	arg02, #0
2dfa8     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1216
2dfac     FD 26 02 F6 | 	mov	local01, result1
2dfb0     07 26 4E F7 | 	zerox	local01, #7 wz
2dfb4     74 01 90 5D |  if_ne	jmp	#LR__4437
2dfb8     18 4E 05 F1 | 	add	fp, #24
2dfbc     A7 12 02 F6 | 	mov	arg01, fp
2dfc0     18 4E 85 F1 | 	sub	fp, #24
2dfc4     10 14 06 F6 | 	mov	arg02, #16
2dfc8     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1210
2dfcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfd0     58 01 90 AD |  if_e	jmp	#LR__4437
2dfd4     18 4E 05 F1 | 	add	fp, #24
2dfd8     A7 26 C2 FA | 	rdbyte	local01, fp
2dfdc     18 4E 85 F1 | 	sub	fp, #24
2dfe0     06 26 46 F0 | 	shr	local01, #6
2dfe4     01 26 0E F2 | 	cmp	local01, #1 wz
2dfe8     5C 00 90 5D |  if_ne	jmp	#LR__4433
2dfec     21 4E 05 F1 | 	add	fp, #33
2dff0     A7 26 C2 FA | 	rdbyte	local01, fp
2dff4     01 4E 85 F1 | 	sub	fp, #1
2dff8     A7 FA C1 FA | 	rdbyte	result1, fp
2dffc     FD FA 31 F9 | 	getword	result1, result1, #0
2e000     08 FA 65 F0 | 	shl	result1, #8
2e004     FD 26 02 F1 | 	add	local01, result1
2e008     01 4E 85 F1 | 	sub	fp, #1
2e00c     A7 FA C1 FA | 	rdbyte	result1, fp
2e010     3F FA 05 F5 | 	and	result1, #63
2e014     10 FA 65 F0 | 	shl	result1, #16
2e018     FD 26 02 F1 | 	add	local01, result1
2e01c     01 26 06 F1 | 	add	local01, #1
2e020     09 4E 05 F1 | 	add	fp, #9
2e024     A7 26 62 FC | 	wrlong	local01, fp
2e028     1C 4E 85 F1 | 	sub	fp, #28
2e02c     A7 26 02 FB | 	rdlong	local01, fp
2e030     1C 4E 05 F1 | 	add	fp, #28
2e034     A7 FA 01 FB | 	rdlong	result1, fp
2e038     28 4E 85 F1 | 	sub	fp, #40
2e03c     0A FA 65 F0 | 	shl	result1, #10
2e040     13 FB 61 FC | 	wrlong	result1, local01
2e044     AC 00 90 FD | 	jmp	#LR__4434
2e048                 | LR__4433
2e048     1D 4E 05 F1 | 	add	fp, #29
2e04c     A7 26 C2 FA | 	rdbyte	local01, fp
2e050     13 27 42 F8 | 	getnib	local01, local01, #0
2e054     05 4E 05 F1 | 	add	fp, #5
2e058     A7 FA C1 FA | 	rdbyte	result1, fp
2e05c     80 FA 05 F5 | 	and	result1, #128
2e060     07 FA C5 F0 | 	sar	result1, #7
2e064     FD 26 02 F1 | 	add	local01, result1
2e068     01 4E 85 F1 | 	sub	fp, #1
2e06c     A7 FA C1 FA | 	rdbyte	result1, fp
2e070     03 FA 05 F5 | 	and	result1, #3
2e074     01 FA 65 F0 | 	shl	result1, #1
2e078     FD 26 02 F1 | 	add	local01, result1
2e07c     02 26 06 F1 | 	add	local01, #2
2e080     0D 4E 85 F1 | 	sub	fp, #13
2e084     A7 26 42 FC | 	wrbyte	local01, fp
2e088     0C 4E 05 F1 | 	add	fp, #12
2e08c     A7 26 C2 FA | 	rdbyte	local01, fp
2e090     06 26 46 F0 | 	shr	local01, #6
2e094     01 4E 85 F1 | 	sub	fp, #1
2e098     A7 FA C1 FA | 	rdbyte	result1, fp
2e09c     FD FA 31 F9 | 	getword	result1, result1, #0
2e0a0     02 FA 65 F0 | 	shl	result1, #2
2e0a4     FD 26 02 F1 | 	add	local01, result1
2e0a8     01 4E 85 F1 | 	sub	fp, #1
2e0ac     A7 FA C1 FA | 	rdbyte	result1, fp
2e0b0     03 FA 05 F5 | 	and	result1, #3
2e0b4     FD FA 31 F9 | 	getword	result1, result1, #0
2e0b8     0A FA 65 F0 | 	shl	result1, #10
2e0bc     FD 26 02 F1 | 	add	local01, result1
2e0c0     01 26 06 F1 | 	add	local01, #1
2e0c4     0A 4E 05 F1 | 	add	fp, #10
2e0c8     A7 26 62 FC | 	wrlong	local01, fp
2e0cc     1C 4E 85 F1 | 	sub	fp, #28
2e0d0     A7 26 02 FB | 	rdlong	local01, fp
2e0d4     1C 4E 05 F1 | 	add	fp, #28
2e0d8     A7 FA 01 FB | 	rdlong	result1, fp
2e0dc     14 4E 85 F1 | 	sub	fp, #20
2e0e0     A7 16 C2 FA | 	rdbyte	arg03, fp
2e0e4     14 4E 85 F1 | 	sub	fp, #20
2e0e8     09 16 86 F1 | 	sub	arg03, #9
2e0ec     0B FB 61 F0 | 	shl	result1, arg03
2e0f0     13 FB 61 FC | 	wrlong	result1, local01
2e0f4                 | LR__4434
2e0f4     10 4E 05 F1 | 	add	fp, #16
2e0f8     A7 00 68 FC | 	wrlong	#0, fp
2e0fc     10 4E 85 F1 | 	sub	fp, #16
2e100                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
2e100                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
2e100                 | ' 					*(LBA_t*)buff = cs << (n - 9);
2e100                 | ' 				}
2e100                 | ' 				res = RES_OK;
2e100                 | ' 			}
2e100                 | ' 			break;
2e100     28 00 90 FD | 	jmp	#LR__4437
2e104                 | LR__4435
2e104     0C 4E 05 F1 | 	add	fp, #12
2e108     A7 26 02 FB | 	rdlong	local01, fp
2e10c     13 01 69 FC | 	wrlong	#128, local01
2e110     04 4E 05 F1 | 	add	fp, #4
2e114     A7 00 68 FC | 	wrlong	#0, fp
2e118     10 4E 85 F1 | 	sub	fp, #16
2e11c                 | ' 			*(DWORD*)buff = 128;
2e11c                 | ' 			res = RES_OK;
2e11c                 | ' 			break;
2e11c     0C 00 90 FD | 	jmp	#LR__4437
2e120                 | LR__4436
2e120     10 4E 05 F1 | 	add	fp, #16
2e124     A7 08 68 FC | 	wrlong	#4, fp
2e128     10 4E 85 F1 | 	sub	fp, #16
2e12c                 | LR__4437
2e12c     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1202
2e130                 | ' 			res = RES_PARERR;
2e130                 | ' 	}
2e130                 | ' 
2e130                 | ' 	deselect();
2e130                 | ' 
2e130                 | ' 	return res;
2e130     10 4E 05 F1 | 	add	fp, #16
2e134     A7 FA 01 FB | 	rdlong	result1, fp
2e138     10 4E 85 F1 | 	sub	fp, #16
2e13c                 | LR__4438
2e13c     A7 F0 03 F6 | 	mov	ptra, fp
2e140     B2 00 A0 FD | 	call	#popregs_
2e144                 | _fatfs_cc_disk_ioctl_ret
2e144     2D 00 64 FD | 	ret
2e148                 | 
2e148                 | _fatfs_cc_disk_setpins
2e148     00 12 0E F2 | 	cmp	arg01, #0 wz
2e14c     01 FA 65 56 |  if_ne	neg	result1, #1
2e150     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
2e154     01 00 00 FF 
2e158     10 E4 05 F1 | 	add	objptr, ##528
2e15c     F2 14 62 FC | 	wrlong	arg02, objptr
2e160     04 E4 05 F1 | 	add	objptr, #4
2e164     F2 16 62 FC | 	wrlong	arg03, objptr
2e168     04 E4 05 F1 | 	add	objptr, #4
2e16c     F2 18 62 FC | 	wrlong	arg04, objptr
2e170     04 E4 05 F1 | 	add	objptr, #4
2e174     F2 1A 62 FC | 	wrlong	arg05, objptr
2e178     01 00 00 FF 
2e17c     1C E4 85 F1 | 	sub	objptr, ##540
2e180     00 FA 05 F6 | 	mov	result1, #0
2e184                 | _fatfs_cc_disk_setpins_ret
2e184     2D 00 64 FD | 	ret
2e188                 | 
2e188                 | _fatfs_cc_tchar2uni
2e188     09 01 02 FB | 	rdlong	_var01, arg01
2e18c     00 03 02 F6 | 	mov	_var02, _var01
2e190     01 00 06 F1 | 	add	_var01, #1
2e194     00 05 02 F6 | 	mov	_var03, _var01
2e198     01 07 C2 FA | 	rdbyte	_var04, _var02
2e19c     80 06 CE F7 | 	test	_var04, #128 wz
2e1a0     E8 00 90 AD |  if_e	jmp	#LR__4447
2e1a4     03 09 02 F6 | 	mov	_var05, _var04
2e1a8     E0 08 06 F5 | 	and	_var05, #224
2e1ac     C0 08 0E F2 | 	cmp	_var05, #192 wz
2e1b0     1F 06 06 A5 |  if_e	and	_var04, #31
2e1b4     01 0A 06 A6 |  if_e	mov	_var06, #1
2e1b8     34 00 90 AD |  if_e	jmp	#LR__4441
2e1bc     03 09 02 F6 | 	mov	_var05, _var04
2e1c0     F0 08 06 F5 | 	and	_var05, #240
2e1c4     E0 08 0E F2 | 	cmp	_var05, #224 wz
2e1c8     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2e1cc     02 0A 06 A6 |  if_e	mov	_var06, #2
2e1d0     1C 00 90 AD |  if_e	jmp	#LR__4440
2e1d4     03 09 02 F6 | 	mov	_var05, _var04
2e1d8     F8 08 06 F5 | 	and	_var05, #248
2e1dc     F0 08 0E F2 | 	cmp	_var05, #240 wz
2e1e0     07 06 06 A5 |  if_e	and	_var04, #7
2e1e4     03 0A 06 A6 |  if_e	mov	_var06, #3
2e1e8                 | ' 			return 0xFFFFFFFF;
2e1e8     01 FA 65 56 |  if_ne	neg	result1, #1
2e1ec     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e1f0                 | LR__4440
2e1f0                 | LR__4441
2e1f0                 | ' 		}
2e1f0                 | ' 		do {
2e1f0                 | LR__4442
2e1f0     02 0D C2 FA | 	rdbyte	_var07, _var03
2e1f4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
2e1f8     C0 08 06 F5 | 	and	_var05, #192
2e1fc     80 08 0E F2 | 	cmp	_var05, #128 wz
2e200     01 04 06 F1 | 	add	_var03, #1
2e204     01 FA 65 56 |  if_ne	neg	result1, #1
2e208     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
2e20c     06 06 66 F0 | 	shl	_var04, #6
2e210     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
2e214     3F 02 06 F5 | 	and	_var02, #63
2e218     01 07 42 F5 | 	or	_var04, _var02
2e21c     F4 0B 6E FB | 	djnz	_var06, #LR__4442
2e220     80 06 16 F2 | 	cmp	_var04, #128 wc
2e224     24 00 90 CD |  if_b	jmp	#LR__4444
2e228     6C 00 00 FF 
2e22c     00 06 16 F2 | 	cmp	_var04, ##55296 wc
2e230     0C 00 90 CD |  if_b	jmp	#LR__4443
2e234     70 00 00 FF 
2e238     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2e23c     0C 00 90 CD |  if_b	jmp	#LR__4444
2e240                 | LR__4443
2e240     80 08 00 FF 
2e244     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
2e248     08 00 90 CD |  if_b	jmp	#LR__4445
2e24c                 | LR__4444
2e24c     01 FA 65 F6 | 	neg	result1, #1
2e250     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
2e254                 | LR__4445
2e254     80 00 00 FF 
2e258     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2e25c     2C 00 90 CD |  if_b	jmp	#LR__4446
2e260     03 03 02 F6 | 	mov	_var02, _var04
2e264     80 00 00 FF 
2e268     00 02 86 F1 | 	sub	_var02, ##65536
2e26c     06 02 66 F0 | 	shl	_var02, #6
2e270     80 FF 01 FF 
2e274     00 02 06 F5 | 	and	_var02, ##67043328
2e278     6E 00 6C FF 
2e27c     00 08 06 F6 | 	mov	_var05, ##-671032320
2e280     01 09 42 F5 | 	or	_var05, _var02
2e284     09 06 46 F7 | 	zerox	_var04, #9
2e288     04 07 42 F5 | 	or	_var04, _var05
2e28c                 | LR__4446
2e28c                 | LR__4447
2e28c     09 05 62 FC | 	wrlong	_var03, arg01
2e290                 | ' 	}
2e290                 | ' #line 811 "ff.c"
2e290                 | ' 	*str = p;
2e290                 | ' 	return uc;
2e290     03 FB 01 F6 | 	mov	result1, _var04
2e294                 | _fatfs_cc_tchar2uni_ret
2e294     2D 00 64 FD | 	ret
2e298                 | 
2e298                 | _fatfs_cc_put_utf
2e298     80 12 16 F2 | 	cmp	arg01, #128 wc
2e29c     18 00 90 3D |  if_ae	jmp	#LR__4450
2e2a0     01 16 16 F2 | 	cmp	arg03, #1 wc
2e2a4     00 FA 05 C6 |  if_b	mov	result1, #0
2e2a8     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e2ac     0A 13 42 FC | 	wrbyte	arg01, arg02
2e2b0                 | ' 		*buf = (TCHAR)chr;
2e2b0                 | ' 		return 1;
2e2b0     01 FA 05 F6 | 	mov	result1, #1
2e2b4     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e2b8                 | LR__4450
2e2b8     04 00 00 FF 
2e2bc     00 12 16 F2 | 	cmp	arg01, ##2048 wc
2e2c0     40 00 90 3D |  if_ae	jmp	#LR__4451
2e2c4     02 16 16 F2 | 	cmp	arg03, #2 wc
2e2c8     00 FA 05 C6 |  if_b	mov	result1, #0
2e2cc     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e2d0     09 FB 01 F6 | 	mov	result1, arg01
2e2d4     06 FA 45 F0 | 	shr	result1, #6
2e2d8     1F FA 05 F5 | 	and	result1, #31
2e2dc     C0 16 06 F6 | 	mov	arg03, #192
2e2e0     FD 16 42 F5 | 	or	arg03, result1
2e2e4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e2e8     01 14 06 F1 | 	add	arg02, #1
2e2ec     3F 12 06 F5 | 	and	arg01, #63
2e2f0     80 FA 05 F6 | 	mov	result1, #128
2e2f4     09 FB 41 F5 | 	or	result1, arg01
2e2f8     0A FB 41 FC | 	wrbyte	result1, arg02
2e2fc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
2e2fc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e2fc                 | ' 		return 2;
2e2fc     02 FA 05 F6 | 	mov	result1, #2
2e300     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e304                 | LR__4451
2e304     80 00 00 FF 
2e308     00 12 16 F2 | 	cmp	arg01, ##65536 wc
2e30c     70 00 90 3D |  if_ae	jmp	#LR__4454
2e310     03 16 16 F2 | 	cmp	arg03, #3 wc
2e314     18 00 90 CD |  if_b	jmp	#LR__4452
2e318     6C 00 00 FF 
2e31c     00 12 16 F2 | 	cmp	arg01, ##55296 wc
2e320     14 00 90 CD |  if_b	jmp	#LR__4453
2e324     70 00 00 FF 
2e328     00 12 16 F2 | 	cmp	arg01, ##57344 wc
2e32c     08 00 90 3D |  if_ae	jmp	#LR__4453
2e330                 | LR__4452
2e330     00 FA 05 F6 | 	mov	result1, #0
2e334     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e338                 | LR__4453
2e338     09 FB 59 F8 | 	getnib	result1, arg01, #3
2e33c     E0 16 06 F6 | 	mov	arg03, #224
2e340     FD 16 42 F5 | 	or	arg03, result1
2e344     0A 17 42 FC | 	wrbyte	arg03, arg02
2e348     01 14 06 F1 | 	add	arg02, #1
2e34c     09 FB 01 F6 | 	mov	result1, arg01
2e350     06 FA 45 F0 | 	shr	result1, #6
2e354     3F FA 05 F5 | 	and	result1, #63
2e358     80 16 06 F6 | 	mov	arg03, #128
2e35c     FD 16 42 F5 | 	or	arg03, result1
2e360     0A 17 42 FC | 	wrbyte	arg03, arg02
2e364     01 14 06 F1 | 	add	arg02, #1
2e368     3F 12 06 F5 | 	and	arg01, #63
2e36c     80 FA 05 F6 | 	mov	result1, #128
2e370     09 FB 41 F5 | 	or	result1, arg01
2e374     0A FB 41 FC | 	wrbyte	result1, arg02
2e378                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
2e378                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e378                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e378                 | ' 		return 3;
2e378     03 FA 05 F6 | 	mov	result1, #3
2e37c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
2e380                 | LR__4454
2e380     04 16 16 F2 | 	cmp	arg03, #4 wc
2e384     00 FA 05 C6 |  if_b	mov	result1, #0
2e388     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2e38c     09 01 02 F6 | 	mov	_var01, arg01
2e390     E0 01 06 F4 | 	bitl	_var01, #480
2e394     00 00 6C FF 
2e398     00 00 86 F1 | 	sub	_var01, ##-671088640
2e39c     06 00 46 F0 | 	shr	_var01, #6
2e3a0     09 13 32 F9 | 	getword	arg01, arg01, #0
2e3a4     6E 00 00 FF 
2e3a8     00 12 86 F1 | 	sub	arg01, ##56320
2e3ac     00 08 00 FF 
2e3b0     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
2e3b4     02 00 00 CF 
2e3b8     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2e3bc     00 FA 05 36 |  if_ae	mov	result1, #0
2e3c0     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
2e3c4     09 01 42 F5 | 	or	_var01, arg01
2e3c8     80 00 00 FF 
2e3cc     00 00 06 F1 | 	add	_var01, ##65536
2e3d0     00 FB 01 F6 | 	mov	result1, _var01
2e3d4     12 FA 45 F0 | 	shr	result1, #18
2e3d8     07 FA 05 F5 | 	and	result1, #7
2e3dc     F0 16 06 F6 | 	mov	arg03, #240
2e3e0     FD 16 42 F5 | 	or	arg03, result1
2e3e4     0A 17 42 FC | 	wrbyte	arg03, arg02
2e3e8     01 14 06 F1 | 	add	arg02, #1
2e3ec     00 FB 01 F6 | 	mov	result1, _var01
2e3f0     0C FA 45 F0 | 	shr	result1, #12
2e3f4     3F FA 05 F5 | 	and	result1, #63
2e3f8     80 16 06 F6 | 	mov	arg03, #128
2e3fc     FD 16 42 F5 | 	or	arg03, result1
2e400     0A 17 42 FC | 	wrbyte	arg03, arg02
2e404     01 14 06 F1 | 	add	arg02, #1
2e408     00 FB 01 F6 | 	mov	result1, _var01
2e40c     06 FA 45 F0 | 	shr	result1, #6
2e410     3F FA 05 F5 | 	and	result1, #63
2e414     80 16 06 F6 | 	mov	arg03, #128
2e418     FD 16 42 F5 | 	or	arg03, result1
2e41c     0A 17 42 FC | 	wrbyte	arg03, arg02
2e420     01 14 06 F1 | 	add	arg02, #1
2e424     3F 00 06 F5 | 	and	_var01, #63
2e428     80 FA 05 F6 | 	mov	result1, #128
2e42c     00 FB 41 F5 | 	or	result1, _var01
2e430     0A FB 41 FC | 	wrbyte	result1, arg02
2e434                 | ' 	chr = (hc | chr) + 0x10000;
2e434                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2e434                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2e434                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2e434                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2e434                 | ' 	return 4;
2e434     04 FA 05 F6 | 	mov	result1, #4
2e438                 | _fatfs_cc_put_utf_ret
2e438     2D 00 64 FD | 	ret
2e43c                 | 
2e43c                 | _fatfs_cc_sync_window
2e43c     02 4A 05 F6 | 	mov	COUNT_, #2
2e440     A8 00 A0 FD | 	call	#pushregs_
2e444     09 27 02 F6 | 	mov	local01, arg01
2e448     00 28 06 F6 | 	mov	local02, #0
2e44c     03 26 06 F1 | 	add	local01, #3
2e450     13 FB C9 FA | 	rdbyte	result1, local01 wz
2e454     03 26 86 F1 | 	sub	local01, #3
2e458     A4 00 90 AD |  if_e	jmp	#LR__4462
2e45c     01 26 06 F1 | 	add	local01, #1
2e460     13 13 C2 FA | 	rdbyte	arg01, local01
2e464     33 26 06 F1 | 	add	local01, #51
2e468     13 15 02 F6 | 	mov	arg02, local01
2e46c     04 26 86 F1 | 	sub	local01, #4
2e470     13 17 02 FB | 	rdlong	arg03, local01
2e474     30 26 86 F1 | 	sub	local01, #48
2e478     01 18 06 F6 | 	mov	arg04, #1
2e47c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2e480     00 FA 0D F2 | 	cmp	result1, #0 wz
2e484     74 00 90 5D |  if_ne	jmp	#LR__4460
2e488     03 26 06 F1 | 	add	local01, #3
2e48c     13 01 48 FC | 	wrbyte	#0, local01
2e490     2D 26 06 F1 | 	add	local01, #45
2e494     13 FB 01 FB | 	rdlong	result1, local01
2e498     0C 26 86 F1 | 	sub	local01, #12
2e49c     13 19 02 FB | 	rdlong	arg04, local01
2e4a0     0C FB 81 F1 | 	sub	result1, arg04
2e4a4     08 26 86 F1 | 	sub	local01, #8
2e4a8     13 19 02 FB | 	rdlong	arg04, local01
2e4ac     1C 26 86 F1 | 	sub	local01, #28
2e4b0     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e4b4     48 00 90 3D |  if_ae	jmp	#LR__4461
2e4b8     02 26 06 F1 | 	add	local01, #2
2e4bc     13 19 C2 FA | 	rdbyte	arg04, local01
2e4c0     02 26 86 F1 | 	sub	local01, #2
2e4c4     02 18 0E F2 | 	cmp	arg04, #2 wz
2e4c8     34 00 90 5D |  if_ne	jmp	#LR__4461
2e4cc     01 26 06 F1 | 	add	local01, #1
2e4d0     13 13 C2 FA | 	rdbyte	arg01, local01
2e4d4     33 26 06 F1 | 	add	local01, #51
2e4d8     13 15 02 F6 | 	mov	arg02, local01
2e4dc     04 26 86 F1 | 	sub	local01, #4
2e4e0     13 17 02 FB | 	rdlong	arg03, local01
2e4e4     14 26 86 F1 | 	sub	local01, #20
2e4e8     13 27 02 FB | 	rdlong	local01, local01
2e4ec     13 17 02 F1 | 	add	arg03, local01
2e4f0     01 18 06 F6 | 	mov	arg04, #1
2e4f4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2e4f8     04 00 90 FD | 	jmp	#LR__4461
2e4fc                 | LR__4460
2e4fc     01 28 06 F6 | 	mov	local02, #1
2e500                 | LR__4461
2e500                 | LR__4462
2e500                 | ' 			res = FR_DISK_ERR;
2e500                 | ' 		}
2e500                 | ' 	}
2e500                 | ' 	return res;
2e500     14 FB 01 F6 | 	mov	result1, local02
2e504     A7 F0 03 F6 | 	mov	ptra, fp
2e508     B2 00 A0 FD | 	call	#popregs_
2e50c                 | _fatfs_cc_sync_window_ret
2e50c     2D 00 64 FD | 	ret
2e510                 | 
2e510                 | _fatfs_cc_move_window
2e510     03 4A 05 F6 | 	mov	COUNT_, #3
2e514     A8 00 A0 FD | 	call	#pushregs_
2e518     09 27 02 F6 | 	mov	local01, arg01
2e51c     0A 29 02 F6 | 	mov	local02, arg02
2e520     00 2A 06 F6 | 	mov	local03, #0
2e524     30 26 06 F1 | 	add	local01, #48
2e528     13 19 02 FB | 	rdlong	arg04, local01
2e52c     30 26 86 F1 | 	sub	local01, #48
2e530     0C 29 0A F2 | 	cmp	local02, arg04 wz
2e534     40 00 90 AD |  if_e	jmp	#LR__4471
2e538     13 13 02 F6 | 	mov	arg01, local01
2e53c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2e540     FD 2A 0A F6 | 	mov	local03, result1 wz
2e544     30 00 90 5D |  if_ne	jmp	#LR__4470
2e548     01 26 06 F1 | 	add	local01, #1
2e54c     13 13 C2 FA | 	rdbyte	arg01, local01
2e550     33 26 06 F1 | 	add	local01, #51
2e554     13 15 02 F6 | 	mov	arg02, local01
2e558     14 17 02 F6 | 	mov	arg03, local02
2e55c     01 18 06 F6 | 	mov	arg04, #1
2e560     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2e564     00 FA 0D F2 | 	cmp	result1, #0 wz
2e568     01 28 66 56 |  if_ne	neg	local02, #1
2e56c     01 2A 06 56 |  if_ne	mov	local03, #1
2e570     04 26 86 F1 | 	sub	local01, #4
2e574     13 29 62 FC | 	wrlong	local02, local01
2e578                 | LR__4470
2e578                 | LR__4471
2e578                 | ' 				sect = (LBA_t)0 - 1;
2e578                 | ' 				res = FR_DISK_ERR;
2e578                 | ' 			}
2e578                 | ' 			fs->winsect = sect;
2e578                 | ' 		}
2e578                 | ' 	}
2e578                 | ' 	return res;
2e578     15 FB 01 F6 | 	mov	result1, local03
2e57c     A7 F0 03 F6 | 	mov	ptra, fp
2e580     B2 00 A0 FD | 	call	#popregs_
2e584                 | _fatfs_cc_move_window_ret
2e584     2D 00 64 FD | 	ret
2e588                 | 
2e588                 | _fatfs_cc_sync_fs
2e588     02 4A 05 F6 | 	mov	COUNT_, #2
2e58c     A8 00 A0 FD | 	call	#pushregs_
2e590     09 27 02 F6 | 	mov	local01, arg01
2e594     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2e598     FD 28 0A F6 | 	mov	local02, result1 wz
2e59c     D8 00 90 5D |  if_ne	jmp	#LR__4481
2e5a0     13 19 C2 FA | 	rdbyte	arg04, local01
2e5a4     03 18 0E F2 | 	cmp	arg04, #3 wz
2e5a8     04 26 06 A1 |  if_e	add	local01, #4
2e5ac     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2e5b0     04 26 86 A1 |  if_e	sub	local01, #4
2e5b4     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2e5b8     A0 00 90 5D |  if_ne	jmp	#LR__4480
2e5bc     34 26 06 F1 | 	add	local01, #52
2e5c0     13 13 02 F6 | 	mov	arg01, local01
2e5c4     00 14 06 F6 | 	mov	arg02, #0
2e5c8     09 16 C6 F9 | 	decod	arg03, #9
2e5cc     98 00 A0 FD | 	call	#\builtin_bytefill_
2e5d0     13 13 02 F6 | 	mov	arg01, local01
2e5d4     FE 13 06 F1 | 	add	arg01, #510
2e5d8     55 00 80 FF 
2e5dc     09 AB 58 FC | 	wrword	##43605, arg01
2e5e0     A9 B0 A0 FF 
2e5e4     13 A5 68 FC | 	wrlong	##1096897106, local01
2e5e8     13 13 02 F6 | 	mov	arg01, local01
2e5ec     E4 13 06 F1 | 	add	arg01, #484
2e5f0     B9 A0 B0 FF 
2e5f4     09 E5 68 FC | 	wrlong	##1631679090, arg01
2e5f8     13 13 02 F6 | 	mov	arg01, local01
2e5fc     E8 13 06 F1 | 	add	arg01, #488
2e600     20 26 86 F1 | 	sub	local01, #32
2e604     13 15 02 FB | 	rdlong	arg02, local01
2e608     09 15 62 FC | 	wrlong	arg02, arg01
2e60c     20 26 06 F1 | 	add	local01, #32
2e610     13 13 02 F6 | 	mov	arg01, local01
2e614     EC 13 06 F1 | 	add	arg01, #492
2e618     24 26 86 F1 | 	sub	local01, #36
2e61c     13 15 02 FB | 	rdlong	arg02, local01
2e620     09 15 62 FC | 	wrlong	arg02, arg01
2e624     10 26 06 F1 | 	add	local01, #16
2e628     13 17 02 FB | 	rdlong	arg03, local01
2e62c     01 16 06 F1 | 	add	arg03, #1
2e630     10 26 06 F1 | 	add	local01, #16
2e634     13 17 62 FC | 	wrlong	arg03, local01
2e638     2F 26 86 F1 | 	sub	local01, #47
2e63c     13 13 C2 FA | 	rdbyte	arg01, local01
2e640     33 26 06 F1 | 	add	local01, #51
2e644     13 15 02 F6 | 	mov	arg02, local01
2e648     01 18 06 F6 | 	mov	arg04, #1
2e64c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2e650     30 26 86 F1 | 	sub	local01, #48
2e654     13 01 48 FC | 	wrbyte	#0, local01
2e658     04 26 86 F1 | 	sub	local01, #4
2e65c                 | LR__4480
2e65c     01 26 06 F1 | 	add	local01, #1
2e660     13 13 C2 FA | 	rdbyte	arg01, local01
2e664     00 14 06 F6 | 	mov	arg02, #0
2e668     00 16 06 F6 | 	mov	arg03, #0
2e66c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2e670     00 FA 0D F2 | 	cmp	result1, #0 wz
2e674     01 28 06 56 |  if_ne	mov	local02, #1
2e678                 | LR__4481
2e678                 | ' 	}
2e678                 | ' 
2e678                 | ' 	return res;
2e678     14 FB 01 F6 | 	mov	result1, local02
2e67c     A7 F0 03 F6 | 	mov	ptra, fp
2e680     B2 00 A0 FD | 	call	#popregs_
2e684                 | _fatfs_cc_sync_fs_ret
2e684     2D 00 64 FD | 	ret
2e688                 | 
2e688                 | _fatfs_cc_clst2sect
2e688     02 14 86 F1 | 	sub	arg02, #2
2e68c     18 12 06 F1 | 	add	arg01, #24
2e690     09 01 02 FB | 	rdlong	_var01, arg01
2e694     18 12 86 F1 | 	sub	arg01, #24
2e698     02 00 86 F1 | 	sub	_var01, #2
2e69c     00 15 12 F2 | 	cmp	arg02, _var01 wc
2e6a0     00 FA 05 36 |  if_ae	mov	result1, #0
2e6a4     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2e6a8     0A 12 06 F1 | 	add	arg01, #10
2e6ac     09 01 E2 FA | 	rdword	_var01, arg01
2e6b0     0A 01 02 FD | 	qmul	_var01, arg02
2e6b4                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2e6b4     22 12 06 F1 | 	add	arg01, #34
2e6b8     09 FB 01 FB | 	rdlong	result1, arg01
2e6bc     18 00 62 FD | 	getqx	_var01
2e6c0     00 FB 01 F1 | 	add	result1, _var01
2e6c4                 | _fatfs_cc_clst2sect_ret
2e6c4     2D 00 64 FD | 	ret
2e6c8                 | 
2e6c8                 | _fatfs_cc_get_fat
2e6c8     07 4A 05 F6 | 	mov	COUNT_, #7
2e6cc     A8 00 A0 FD | 	call	#pushregs_
2e6d0     0A 27 02 F6 | 	mov	local01, arg02
2e6d4     09 29 02 FB | 	rdlong	local02, arg01
2e6d8     02 26 16 F2 | 	cmp	local01, #2 wc
2e6dc     14 00 90 CD |  if_b	jmp	#LR__4490
2e6e0     18 28 06 F1 | 	add	local02, #24
2e6e4     14 2B 02 FB | 	rdlong	local03, local02
2e6e8     18 28 86 F1 | 	sub	local02, #24
2e6ec     15 27 12 F2 | 	cmp	local01, local03 wc
2e6f0     08 00 90 CD |  if_b	jmp	#LR__4491
2e6f4                 | LR__4490
2e6f4     01 2C 06 F6 | 	mov	local04, #1
2e6f8     60 01 90 FD | 	jmp	#LR__4498
2e6fc                 | LR__4491
2e6fc     01 2C 66 F6 | 	neg	local04, #1
2e700                 | ' 		val = 0xFFFFFFFF;
2e700                 | ' 
2e700                 | ' 		switch (fs->fs_type) {
2e700     14 2F C2 FA | 	rdbyte	local05, local02
2e704     01 2E 86 F1 | 	sub	local05, #1
2e708     03 2E 26 F3 | 	fle	local05, #3
2e70c     30 2E 62 FD | 	jmprel	local05
2e710                 | LR__4492
2e710     0C 00 90 FD | 	jmp	#LR__4493
2e714     B8 00 90 FD | 	jmp	#LR__4494
2e718     F8 00 90 FD | 	jmp	#LR__4495
2e71c     38 01 90 FD | 	jmp	#LR__4496
2e720                 | LR__4493
2e720     13 2F 02 F6 | 	mov	local05, local01
2e724     13 13 02 F6 | 	mov	arg01, local01
2e728     01 12 46 F0 | 	shr	arg01, #1
2e72c     09 2F 02 F1 | 	add	local05, arg01
2e730     14 13 02 F6 | 	mov	arg01, local02
2e734     17 31 02 F6 | 	mov	local06, local05
2e738     09 30 46 F0 | 	shr	local06, #9
2e73c     24 28 06 F1 | 	add	local02, #36
2e740     14 15 02 FB | 	rdlong	arg02, local02
2e744     24 28 86 F1 | 	sub	local02, #36
2e748     18 15 02 F1 | 	add	arg02, local06
2e74c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2e750     00 FA 0D F2 | 	cmp	result1, #0 wz
2e754     04 01 90 5D |  if_ne	jmp	#LR__4497
2e758     17 31 02 F6 | 	mov	local06, local05
2e75c     FF 31 06 F5 | 	and	local06, #511
2e760     34 28 06 F1 | 	add	local02, #52
2e764     14 31 02 F1 | 	add	local06, local02
2e768     18 33 C2 FA | 	rdbyte	local07, local06
2e76c     34 28 86 F1 | 	sub	local02, #52
2e770     14 13 02 F6 | 	mov	arg01, local02
2e774     01 2E 06 F1 | 	add	local05, #1
2e778     17 31 02 F6 | 	mov	local06, local05
2e77c     09 30 46 F0 | 	shr	local06, #9
2e780     24 28 06 F1 | 	add	local02, #36
2e784     14 15 02 FB | 	rdlong	arg02, local02
2e788     24 28 86 F1 | 	sub	local02, #36
2e78c     18 15 02 F1 | 	add	arg02, local06
2e790     7C FD BF FD | 	call	#_fatfs_cc_move_window
2e794     00 FA 0D F2 | 	cmp	result1, #0 wz
2e798     C0 00 90 5D |  if_ne	jmp	#LR__4497
2e79c     FF 2F 06 F5 | 	and	local05, #511
2e7a0     34 28 06 F1 | 	add	local02, #52
2e7a4     14 2F 02 F1 | 	add	local05, local02
2e7a8     17 31 C2 FA | 	rdbyte	local06, local05
2e7ac     08 30 66 F0 | 	shl	local06, #8
2e7b0     18 33 42 F5 | 	or	local07, local06
2e7b4     01 26 CE F7 | 	test	local01, #1 wz
2e7b8     04 32 46 50 |  if_ne	shr	local07, #4
2e7bc     19 2B 02 56 |  if_ne	mov	local03, local07
2e7c0     0B 32 46 A7 |  if_e	zerox	local07, #11
2e7c4     19 2B 02 A6 |  if_e	mov	local03, local07
2e7c8     15 2D 02 F6 | 	mov	local04, local03
2e7cc                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2e7cc                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2e7cc                 | ' 			break;
2e7cc     8C 00 90 FD | 	jmp	#LR__4497
2e7d0                 | LR__4494
2e7d0     14 13 02 F6 | 	mov	arg01, local02
2e7d4     13 31 02 F6 | 	mov	local06, local01
2e7d8     08 30 46 F0 | 	shr	local06, #8
2e7dc     24 28 06 F1 | 	add	local02, #36
2e7e0     14 15 02 FB | 	rdlong	arg02, local02
2e7e4     24 28 86 F1 | 	sub	local02, #36
2e7e8     18 15 02 F1 | 	add	arg02, local06
2e7ec     20 FD BF FD | 	call	#_fatfs_cc_move_window
2e7f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7f4     64 00 90 5D |  if_ne	jmp	#LR__4497
2e7f8     34 28 06 F1 | 	add	local02, #52
2e7fc     01 26 66 F0 | 	shl	local01, #1
2e800     FF 27 06 F5 | 	and	local01, #511
2e804     13 29 02 F1 | 	add	local02, local01
2e808                 | ' {
2e808                 | ' 
2e808                 | ' 	return *((WORD*)ptr);
2e808     14 FB E1 FA | 	rdword	result1, local02
2e80c     FD 2C 32 F9 | 	getword	local04, result1, #0
2e810                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2e810                 | ' 			break;
2e810     48 00 90 FD | 	jmp	#LR__4497
2e814                 | LR__4495
2e814     14 13 02 F6 | 	mov	arg01, local02
2e818     13 31 02 F6 | 	mov	local06, local01
2e81c     07 30 46 F0 | 	shr	local06, #7
2e820     24 28 06 F1 | 	add	local02, #36
2e824     14 15 02 FB | 	rdlong	arg02, local02
2e828     24 28 86 F1 | 	sub	local02, #36
2e82c     18 15 02 F1 | 	add	arg02, local06
2e830     DC FC BF FD | 	call	#_fatfs_cc_move_window
2e834     00 FA 0D F2 | 	cmp	result1, #0 wz
2e838     20 00 90 5D |  if_ne	jmp	#LR__4497
2e83c     34 28 06 F1 | 	add	local02, #52
2e840     02 26 66 F0 | 	shl	local01, #2
2e844     FF 27 06 F5 | 	and	local01, #511
2e848     13 29 02 F1 | 	add	local02, local01
2e84c                 | ' {
2e84c                 | ' 
2e84c                 | ' 	return *((DWORD*)ptr);
2e84c     14 2D 02 FB | 	rdlong	local04, local02
2e850     7C 2C 06 F4 | 	bitl	local04, #124
2e854                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2e854                 | ' 			break;
2e854     04 00 90 FD | 	jmp	#LR__4497
2e858                 | LR__4496
2e858     01 2C 06 F6 | 	mov	local04, #1
2e85c                 | LR__4497
2e85c                 | LR__4498
2e85c                 | ' 			val = 1;
2e85c                 | ' 		}
2e85c                 | ' 	}
2e85c                 | ' 
2e85c                 | ' 	return val;
2e85c     16 FB 01 F6 | 	mov	result1, local04
2e860     A7 F0 03 F6 | 	mov	ptra, fp
2e864     B2 00 A0 FD | 	call	#popregs_
2e868                 | _fatfs_cc_get_fat_ret
2e868     2D 00 64 FD | 	ret
2e86c                 | 
2e86c                 | _fatfs_cc_put_fat
2e86c     08 4A 05 F6 | 	mov	COUNT_, #8
2e870     A8 00 A0 FD | 	call	#pushregs_
2e874     09 27 02 F6 | 	mov	local01, arg01
2e878     0A 29 02 F6 | 	mov	local02, arg02
2e87c     0B 2B 02 F6 | 	mov	local03, arg03
2e880     02 2C 06 F6 | 	mov	local04, #2
2e884     02 28 16 F2 | 	cmp	local02, #2 wc
2e888     E0 01 90 CD |  if_b	jmp	#LR__4507
2e88c     18 26 06 F1 | 	add	local01, #24
2e890     13 2F 02 FB | 	rdlong	local05, local01
2e894     18 26 86 F1 | 	sub	local01, #24
2e898     17 29 12 F2 | 	cmp	local02, local05 wc
2e89c     CC 01 90 3D |  if_ae	jmp	#LR__4507
2e8a0                 | ' 		switch (fs->fs_type) {
2e8a0     13 31 C2 FA | 	rdbyte	local06, local01
2e8a4     01 30 86 F1 | 	sub	local06, #1
2e8a8     03 30 26 F3 | 	fle	local06, #3
2e8ac     30 30 62 FD | 	jmprel	local06
2e8b0                 | LR__4500
2e8b0     0C 00 90 FD | 	jmp	#LR__4501
2e8b4     F8 00 90 FD | 	jmp	#LR__4504
2e8b8     40 01 90 FD | 	jmp	#LR__4505
2e8bc     AC 01 90 FD | 	jmp	#LR__4506
2e8c0                 | LR__4501
2e8c0     14 33 02 F6 | 	mov	local07, local02
2e8c4     14 2F 02 F6 | 	mov	local05, local02
2e8c8     01 2E 46 F0 | 	shr	local05, #1
2e8cc     17 33 02 F1 | 	add	local07, local05
2e8d0     13 13 02 F6 | 	mov	arg01, local01
2e8d4     19 31 02 F6 | 	mov	local06, local07
2e8d8     09 30 46 F0 | 	shr	local06, #9
2e8dc     24 26 06 F1 | 	add	local01, #36
2e8e0     13 15 02 FB | 	rdlong	arg02, local01
2e8e4     24 26 86 F1 | 	sub	local01, #36
2e8e8     18 15 02 F1 | 	add	arg02, local06
2e8ec     20 FC BF FD | 	call	#_fatfs_cc_move_window
2e8f0     FD 2C 0A F6 | 	mov	local04, result1 wz
2e8f4     74 01 90 5D |  if_ne	jmp	#LR__4506
2e8f8     34 26 06 F1 | 	add	local01, #52
2e8fc     13 35 02 F6 | 	mov	local08, local01
2e900     19 2F 02 F6 | 	mov	local05, local07
2e904     FF 2F 06 F5 | 	and	local05, #511
2e908     17 35 02 F1 | 	add	local08, local05
2e90c     01 28 CE F7 | 	test	local02, #1 wz
2e910     34 26 86 F1 | 	sub	local01, #52
2e914     01 32 06 F1 | 	add	local07, #1
2e918     18 00 90 AD |  if_e	jmp	#LR__4502
2e91c     1A 2F C2 FA | 	rdbyte	local05, local08
2e920     17 2F 42 F8 | 	getnib	local05, local05, #0
2e924     15 31 E2 F8 | 	getbyte	local06, local03, #0
2e928     04 30 66 F0 | 	shl	local06, #4
2e92c     18 2F 42 F5 | 	or	local05, local06
2e930     04 00 90 FD | 	jmp	#LR__4503
2e934                 | LR__4502
2e934     15 2F 02 F6 | 	mov	local05, local03
2e938                 | LR__4503
2e938     1A 2F 42 FC | 	wrbyte	local05, local08
2e93c     03 26 06 F1 | 	add	local01, #3
2e940     13 03 48 FC | 	wrbyte	#1, local01
2e944     03 26 86 F1 | 	sub	local01, #3
2e948     13 13 02 F6 | 	mov	arg01, local01
2e94c     19 35 02 F6 | 	mov	local08, local07
2e950     09 34 46 F0 | 	shr	local08, #9
2e954     24 26 06 F1 | 	add	local01, #36
2e958     13 15 02 FB | 	rdlong	arg02, local01
2e95c     24 26 86 F1 | 	sub	local01, #36
2e960     1A 15 02 F1 | 	add	arg02, local08
2e964     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2e968     FD 2C 0A F6 | 	mov	local04, result1 wz
2e96c     FC 00 90 5D |  if_ne	jmp	#LR__4506
2e970     34 26 06 F1 | 	add	local01, #52
2e974     13 35 02 F6 | 	mov	local08, local01
2e978     FF 33 06 F5 | 	and	local07, #511
2e97c     19 35 02 F1 | 	add	local08, local07
2e980     01 28 CE F7 | 	test	local02, #1 wz
2e984     04 2A 46 50 |  if_ne	shr	local03, #4
2e988     15 2F 02 56 |  if_ne	mov	local05, local03
2e98c     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2e990     F0 2E 06 A5 |  if_e	and	local05, #240
2e994     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2e998     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2e99c     15 2F 42 A5 |  if_e	or	local05, local03
2e9a0     1A 2F 42 FC | 	wrbyte	local05, local08
2e9a4     31 26 86 F1 | 	sub	local01, #49
2e9a8     13 03 48 FC | 	wrbyte	#1, local01
2e9ac                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2e9ac                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2e9ac                 | ' 			fs->wflag = 1;
2e9ac                 | ' 			break;
2e9ac     BC 00 90 FD | 	jmp	#LR__4506
2e9b0                 | LR__4504
2e9b0     13 13 02 F6 | 	mov	arg01, local01
2e9b4     14 35 02 F6 | 	mov	local08, local02
2e9b8     08 34 46 F0 | 	shr	local08, #8
2e9bc     24 26 06 F1 | 	add	local01, #36
2e9c0     13 15 02 FB | 	rdlong	arg02, local01
2e9c4     24 26 86 F1 | 	sub	local01, #36
2e9c8     1A 15 02 F1 | 	add	arg02, local08
2e9cc     40 FB BF FD | 	call	#_fatfs_cc_move_window
2e9d0     FD 2C 0A F6 | 	mov	local04, result1 wz
2e9d4     94 00 90 5D |  if_ne	jmp	#LR__4506
2e9d8     34 26 06 F1 | 	add	local01, #52
2e9dc     13 13 02 F6 | 	mov	arg01, local01
2e9e0     01 28 66 F0 | 	shl	local02, #1
2e9e4     FF 29 06 F5 | 	and	local02, #511
2e9e8     14 13 02 F1 | 	add	arg01, local02
2e9ec     09 2B 52 FC | 	wrword	local03, arg01
2e9f0     31 26 86 F1 | 	sub	local01, #49
2e9f4     13 03 48 FC | 	wrbyte	#1, local01
2e9f8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2e9f8                 | ' 			fs->wflag = 1;
2e9f8                 | ' 			break;
2e9f8     70 00 90 FD | 	jmp	#LR__4506
2e9fc                 | LR__4505
2e9fc     13 13 02 F6 | 	mov	arg01, local01
2ea00     14 35 02 F6 | 	mov	local08, local02
2ea04     07 34 46 F0 | 	shr	local08, #7
2ea08     24 26 06 F1 | 	add	local01, #36
2ea0c     13 15 02 FB | 	rdlong	arg02, local01
2ea10     24 26 86 F1 | 	sub	local01, #36
2ea14     1A 15 02 F1 | 	add	arg02, local08
2ea18     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2ea1c     FD 2C 0A F6 | 	mov	local04, result1 wz
2ea20     48 00 90 5D |  if_ne	jmp	#LR__4506
2ea24     7C 2A 06 F4 | 	bitl	local03, #124
2ea28     34 26 06 F1 | 	add	local01, #52
2ea2c     14 35 02 F6 | 	mov	local08, local02
2ea30     02 34 66 F0 | 	shl	local08, #2
2ea34     FF 35 06 F5 | 	and	local08, #511
2ea38     13 13 02 F6 | 	mov	arg01, local01
2ea3c     1A 13 02 F1 | 	add	arg01, local08
2ea40                 | ' {
2ea40                 | ' 
2ea40                 | ' 	return *((DWORD*)ptr);
2ea40     09 35 02 FB | 	rdlong	local08, arg01
2ea44     00 00 78 FF 
2ea48     00 34 06 F5 | 	and	local08, ##-268435456
2ea4c     1A 2B 42 F5 | 	or	local03, local08
2ea50     13 13 02 F6 | 	mov	arg01, local01
2ea54     02 28 66 F0 | 	shl	local02, #2
2ea58     FF 29 06 F5 | 	and	local02, #511
2ea5c     14 13 02 F1 | 	add	arg01, local02
2ea60     09 2B 62 FC | 	wrlong	local03, arg01
2ea64     31 26 86 F1 | 	sub	local01, #49
2ea68     13 03 48 FC | 	wrbyte	#1, local01
2ea6c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2ea6c                 | ' 			}
2ea6c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2ea6c                 | ' 			fs->wflag = 1;
2ea6c                 | ' 			break;
2ea6c                 | LR__4506
2ea6c                 | LR__4507
2ea6c                 | ' 		}
2ea6c                 | ' 	}
2ea6c                 | ' 	return res;
2ea6c     16 FB 01 F6 | 	mov	result1, local04
2ea70     A7 F0 03 F6 | 	mov	ptra, fp
2ea74     B2 00 A0 FD | 	call	#popregs_
2ea78                 | _fatfs_cc_put_fat_ret
2ea78     2D 00 64 FD | 	ret
2ea7c                 | 
2ea7c                 | _fatfs_cc_remove_chain
2ea7c     05 4A 05 F6 | 	mov	COUNT_, #5
2ea80     A8 00 A0 FD | 	call	#pushregs_
2ea84     09 27 02 F6 | 	mov	local01, arg01
2ea88     0A 29 02 F6 | 	mov	local02, arg02
2ea8c     0B 2B 02 F6 | 	mov	local03, arg03
2ea90     13 2D 02 FB | 	rdlong	local04, local01
2ea94     02 28 16 F2 | 	cmp	local02, #2 wc
2ea98     14 00 90 CD |  if_b	jmp	#LR__4510
2ea9c     18 2C 06 F1 | 	add	local04, #24
2eaa0     16 FB 01 FB | 	rdlong	result1, local04
2eaa4     18 2C 86 F1 | 	sub	local04, #24
2eaa8     FD 28 12 F2 | 	cmp	local02, result1 wc
2eaac     08 00 90 CD |  if_b	jmp	#LR__4511
2eab0                 | LR__4510
2eab0     02 FA 05 F6 | 	mov	result1, #2
2eab4     CC 00 90 FD | 	jmp	#LR__4516
2eab8                 | LR__4511
2eab8     00 2A 0E F2 | 	cmp	local03, #0 wz
2eabc     18 00 90 AD |  if_e	jmp	#LR__4512
2eac0     15 15 02 F6 | 	mov	arg02, local03
2eac4     16 13 02 F6 | 	mov	arg01, local04
2eac8     01 16 66 F6 | 	neg	arg03, #1
2eacc     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2ead0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ead4     AC 00 90 5D |  if_ne	jmp	#LR__4516
2ead8                 | LR__4512
2ead8                 | ' 	}
2ead8                 | ' 
2ead8                 | ' 
2ead8                 | ' 	do {
2ead8                 | LR__4513
2ead8     14 15 02 F6 | 	mov	arg02, local02
2eadc     13 13 02 F6 | 	mov	arg01, local01
2eae0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2eae4     FD 2E 0A F6 | 	mov	local05, result1 wz
2eae8     94 00 90 AD |  if_e	jmp	#LR__4515
2eaec     01 2E 0E F2 | 	cmp	local05, #1 wz
2eaf0     02 FA 05 A6 |  if_e	mov	result1, #2
2eaf4     8C 00 90 AD |  if_e	jmp	#LR__4516
2eaf8     FF FF 7F FF 
2eafc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2eb00     01 FA 05 A6 |  if_e	mov	result1, #1
2eb04     7C 00 90 AD |  if_e	jmp	#LR__4516
2eb08     14 15 02 F6 | 	mov	arg02, local02
2eb0c     16 13 02 F6 | 	mov	arg01, local04
2eb10     00 16 06 F6 | 	mov	arg03, #0
2eb14     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2eb18     FD 2A 0A F6 | 	mov	local03, result1 wz
2eb1c     15 FB 01 56 |  if_ne	mov	result1, local03
2eb20     60 00 90 5D |  if_ne	jmp	#LR__4516
2eb24     18 2C 06 F1 | 	add	local04, #24
2eb28     16 2B 02 FB | 	rdlong	local03, local04
2eb2c     02 2A 86 F1 | 	sub	local03, #2
2eb30     04 2C 86 F1 | 	sub	local04, #4
2eb34     16 29 02 FB | 	rdlong	local02, local04
2eb38     14 2C 86 F1 | 	sub	local04, #20
2eb3c     15 29 12 F2 | 	cmp	local02, local03 wc
2eb40     24 00 90 3D |  if_ae	jmp	#LR__4514
2eb44     14 2C 06 F1 | 	add	local04, #20
2eb48     16 2B 02 FB | 	rdlong	local03, local04
2eb4c     01 2A 06 F1 | 	add	local03, #1
2eb50     16 2B 62 FC | 	wrlong	local03, local04
2eb54     10 2C 86 F1 | 	sub	local04, #16
2eb58     16 2B C2 FA | 	rdbyte	local03, local04
2eb5c     01 2A 46 F5 | 	or	local03, #1
2eb60     16 2B 42 FC | 	wrbyte	local03, local04
2eb64     04 2C 86 F1 | 	sub	local04, #4
2eb68                 | LR__4514
2eb68     17 29 02 F6 | 	mov	local02, local05
2eb6c     18 2C 06 F1 | 	add	local04, #24
2eb70     16 2F 02 FB | 	rdlong	local05, local04
2eb74     18 2C 86 F1 | 	sub	local04, #24
2eb78     17 29 12 F2 | 	cmp	local02, local05 wc
2eb7c     58 FF 9F CD |  if_b	jmp	#LR__4513
2eb80                 | LR__4515
2eb80                 | ' #line 1500 "ff.c"
2eb80                 | ' 	return FR_OK;
2eb80     00 FA 05 F6 | 	mov	result1, #0
2eb84                 | LR__4516
2eb84     A7 F0 03 F6 | 	mov	ptra, fp
2eb88     B2 00 A0 FD | 	call	#popregs_
2eb8c                 | _fatfs_cc_remove_chain_ret
2eb8c     2D 00 64 FD | 	ret
2eb90                 | 
2eb90                 | _fatfs_cc_create_chain
2eb90     09 4A 05 F6 | 	mov	COUNT_, #9
2eb94     A8 00 A0 FD | 	call	#pushregs_
2eb98     09 27 02 F6 | 	mov	local01, arg01
2eb9c     0A 29 0A F6 | 	mov	local02, arg02 wz
2eba0     13 2B 02 FB | 	rdlong	local03, local01
2eba4     28 00 90 5D |  if_ne	jmp	#LR__4520
2eba8     10 2A 06 F1 | 	add	local03, #16
2ebac     15 2D 0A FB | 	rdlong	local04, local03 wz
2ebb0     10 2A 86 F1 | 	sub	local03, #16
2ebb4     18 2A 06 51 |  if_ne	add	local03, #24
2ebb8     15 2F 02 5B |  if_ne	rdlong	local05, local03
2ebbc     18 2A 86 51 |  if_ne	sub	local03, #24
2ebc0     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2ebc4     50 00 90 4D |  if_c_and_nz	jmp	#LR__4521
2ebc8     01 2C 06 F6 | 	mov	local04, #1
2ebcc     48 00 90 FD | 	jmp	#LR__4521
2ebd0                 | LR__4520
2ebd0     14 15 02 F6 | 	mov	arg02, local02
2ebd4     13 13 02 F6 | 	mov	arg01, local01
2ebd8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2ebdc     FD 2C 02 F6 | 	mov	local04, result1
2ebe0     02 2C 16 F2 | 	cmp	local04, #2 wc
2ebe4     01 FA 05 C6 |  if_b	mov	result1, #1
2ebe8     BC 01 90 CD |  if_b	jmp	#LR__4531
2ebec     FF FF 7F FF 
2ebf0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ebf4     16 FB 01 A6 |  if_e	mov	result1, local04
2ebf8     AC 01 90 AD |  if_e	jmp	#LR__4531
2ebfc     18 2A 06 F1 | 	add	local03, #24
2ec00     15 2F 02 FB | 	rdlong	local05, local03
2ec04     18 2A 86 F1 | 	sub	local03, #24
2ec08     17 2D 12 F2 | 	cmp	local04, local05 wc
2ec0c     16 FB 01 C6 |  if_b	mov	result1, local04
2ec10     94 01 90 CD |  if_b	jmp	#LR__4531
2ec14     14 2D 02 F6 | 	mov	local04, local02
2ec18                 | LR__4521
2ec18     14 2A 06 F1 | 	add	local03, #20
2ec1c     15 2F 0A FB | 	rdlong	local05, local03 wz
2ec20     14 2A 86 F1 | 	sub	local03, #20
2ec24     00 FA 05 A6 |  if_e	mov	result1, #0
2ec28     7C 01 90 AD |  if_e	jmp	#LR__4531
2ec2c     00 30 06 F6 | 	mov	local06, #0
2ec30     14 2D 0A F2 | 	cmp	local04, local02 wz
2ec34     74 00 90 5D |  if_ne	jmp	#LR__4524
2ec38     16 31 02 F6 | 	mov	local06, local04
2ec3c     01 30 06 F1 | 	add	local06, #1
2ec40     18 2A 06 F1 | 	add	local03, #24
2ec44     15 2F 02 FB | 	rdlong	local05, local03
2ec48     18 2A 86 F1 | 	sub	local03, #24
2ec4c     17 31 12 F2 | 	cmp	local06, local05 wc
2ec50     02 30 06 36 |  if_ae	mov	local06, #2
2ec54     18 15 02 F6 | 	mov	arg02, local06
2ec58     13 13 02 F6 | 	mov	arg01, local01
2ec5c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2ec60     FD 2E 02 F6 | 	mov	local05, result1
2ec64     01 2E 0E F2 | 	cmp	local05, #1 wz
2ec68     FF FF 7F 5F 
2ec6c     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2ec70     17 FB 01 A6 |  if_e	mov	result1, local05
2ec74     30 01 90 AD |  if_e	jmp	#LR__4531
2ec78     00 2E 0E F2 | 	cmp	local05, #0 wz
2ec7c     2C 00 90 AD |  if_e	jmp	#LR__4523
2ec80     10 2A 06 F1 | 	add	local03, #16
2ec84     15 33 02 FB | 	rdlong	local07, local03
2ec88     10 2A 86 F1 | 	sub	local03, #16
2ec8c     02 32 16 F2 | 	cmp	local07, #2 wc
2ec90     14 00 90 CD |  if_b	jmp	#LR__4522
2ec94     18 2A 06 F1 | 	add	local03, #24
2ec98     15 2F 02 FB | 	rdlong	local05, local03
2ec9c     18 2A 86 F1 | 	sub	local03, #24
2eca0     17 33 12 F2 | 	cmp	local07, local05 wc
2eca4     19 2D 02 C6 |  if_b	mov	local04, local07
2eca8                 | LR__4522
2eca8     00 30 06 F6 | 	mov	local06, #0
2ecac                 | LR__4523
2ecac                 | LR__4524
2ecac     00 30 0E F2 | 	cmp	local06, #0 wz
2ecb0     60 00 90 5D |  if_ne	jmp	#LR__4527
2ecb4     16 31 02 F6 | 	mov	local06, local04
2ecb8                 | ' 			ncl = scl;
2ecb8                 | ' 			for (;;) {
2ecb8                 | LR__4525
2ecb8     01 30 06 F1 | 	add	local06, #1
2ecbc     18 2A 06 F1 | 	add	local03, #24
2ecc0     15 2F 02 FB | 	rdlong	local05, local03
2ecc4     18 2A 86 F1 | 	sub	local03, #24
2ecc8     17 31 12 F2 | 	cmp	local06, local05 wc
2eccc     02 30 06 36 |  if_ae	mov	local06, #2
2ecd0     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2ecd4     00 FA 05 16 |  if_a	mov	result1, #0
2ecd8     CC 00 90 1D |  if_a	jmp	#LR__4531
2ecdc     18 15 02 F6 | 	mov	arg02, local06
2ece0     13 13 02 F6 | 	mov	arg01, local01
2ece4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2ece8     FD 32 0A F6 | 	mov	local07, result1 wz
2ecec     24 00 90 AD |  if_e	jmp	#LR__4526
2ecf0     01 32 0E F2 | 	cmp	local07, #1 wz
2ecf4     FF FF 7F 5F 
2ecf8     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2ecfc     19 FB 01 A6 |  if_e	mov	result1, local07
2ed00     A4 00 90 AD |  if_e	jmp	#LR__4531
2ed04     16 31 0A F2 | 	cmp	local06, local04 wz
2ed08     00 FA 05 A6 |  if_e	mov	result1, #0
2ed0c     98 00 90 AD |  if_e	jmp	#LR__4531
2ed10     A4 FF 9F FD | 	jmp	#LR__4525
2ed14                 | LR__4526
2ed14                 | LR__4527
2ed14     15 13 02 F6 | 	mov	arg01, local03
2ed18     18 15 02 F6 | 	mov	arg02, local06
2ed1c     01 16 66 F6 | 	neg	arg03, #1
2ed20     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed24     FD 34 0A F6 | 	mov	local08, result1 wz
2ed28     1C 00 90 5D |  if_ne	jmp	#LR__4528
2ed2c     00 28 0E F2 | 	cmp	local02, #0 wz
2ed30     14 00 90 AD |  if_e	jmp	#LR__4528
2ed34     15 13 02 F6 | 	mov	arg01, local03
2ed38     14 15 02 F6 | 	mov	arg02, local02
2ed3c     18 17 02 F6 | 	mov	arg03, local06
2ed40     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2ed44     FD 34 02 F6 | 	mov	local08, result1
2ed48                 | LR__4528
2ed48     00 34 0E F2 | 	cmp	local08, #0 wz
2ed4c     4C 00 90 5D |  if_ne	jmp	#LR__4529
2ed50     10 2A 06 F1 | 	add	local03, #16
2ed54     15 31 62 FC | 	wrlong	local06, local03
2ed58     08 2A 06 F1 | 	add	local03, #8
2ed5c     15 2F 02 FB | 	rdlong	local05, local03
2ed60     02 2E 86 F1 | 	sub	local05, #2
2ed64     04 2A 86 F1 | 	sub	local03, #4
2ed68     15 37 02 FB | 	rdlong	local09, local03
2ed6c     14 2A 86 F1 | 	sub	local03, #20
2ed70     17 37 1A F2 | 	cmp	local09, local05 wcz
2ed74     14 2A 06 E1 |  if_be	add	local03, #20
2ed78     15 37 02 EB |  if_be	rdlong	local09, local03
2ed7c     01 36 86 E1 |  if_be	sub	local09, #1
2ed80     15 37 62 EC |  if_be	wrlong	local09, local03
2ed84     14 2A 86 E1 |  if_be	sub	local03, #20
2ed88     04 2A 06 F1 | 	add	local03, #4
2ed8c     15 2F C2 FA | 	rdbyte	local05, local03
2ed90     01 2E 46 F5 | 	or	local05, #1
2ed94     15 2F 42 FC | 	wrbyte	local05, local03
2ed98     08 00 90 FD | 	jmp	#LR__4530
2ed9c                 | LR__4529
2ed9c     01 34 0E F2 | 	cmp	local08, #1 wz
2eda0     01 30 C6 F6 | 	negz	local06, #1
2eda4                 | LR__4530
2eda4                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2eda4                 | ' 	}
2eda4                 | ' 
2eda4                 | ' 	return ncl;
2eda4     18 FB 01 F6 | 	mov	result1, local06
2eda8                 | LR__4531
2eda8     A7 F0 03 F6 | 	mov	ptra, fp
2edac     B2 00 A0 FD | 	call	#popregs_
2edb0                 | _fatfs_cc_create_chain_ret
2edb0     2D 00 64 FD | 	ret
2edb4                 | 
2edb4                 | _fatfs_cc_dir_clear
2edb4     06 4A 05 F6 | 	mov	COUNT_, #6
2edb8     A8 00 A0 FD | 	call	#pushregs_
2edbc     09 27 02 F6 | 	mov	local01, arg01
2edc0     0A 29 02 F6 | 	mov	local02, arg02
2edc4     13 13 02 F6 | 	mov	arg01, local01
2edc8     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2edcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2edd0     01 FA 05 56 |  if_ne	mov	result1, #1
2edd4     90 00 90 5D |  if_ne	jmp	#LR__4542
2edd8     13 13 02 F6 | 	mov	arg01, local01
2eddc     14 15 02 F6 | 	mov	arg02, local02
2ede0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2ede4     FD 2A 02 F6 | 	mov	local03, result1
2ede8     30 26 06 F1 | 	add	local01, #48
2edec     13 2B 62 FC | 	wrlong	local03, local01
2edf0     04 26 06 F1 | 	add	local01, #4
2edf4     13 13 02 F6 | 	mov	arg01, local01
2edf8     00 14 06 F6 | 	mov	arg02, #0
2edfc     09 16 C6 F9 | 	decod	arg03, #9
2ee00     98 00 A0 FD | 	call	#\builtin_bytefill_
2ee04     13 2D 02 F6 | 	mov	local04, local01
2ee08                 | ' #line 1667 "ff.c"
2ee08                 | ' 	{
2ee08                 | ' 		ibuf = fs->win; szb = 1;
2ee08                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2ee08     00 2E 06 F6 | 	mov	local05, #0
2ee0c     34 26 86 F1 | 	sub	local01, #52
2ee10                 | LR__4540
2ee10     0A 26 06 F1 | 	add	local01, #10
2ee14     13 31 E2 FA | 	rdword	local06, local01
2ee18     0A 26 86 F1 | 	sub	local01, #10
2ee1c     18 2F 12 F2 | 	cmp	local05, local06 wc
2ee20     2C 00 90 3D |  if_ae	jmp	#LR__4541
2ee24     01 26 06 F1 | 	add	local01, #1
2ee28     13 13 C2 FA | 	rdbyte	arg01, local01
2ee2c     01 26 86 F1 | 	sub	local01, #1
2ee30     16 15 02 F6 | 	mov	arg02, local04
2ee34     15 17 02 F6 | 	mov	arg03, local03
2ee38     17 17 02 F1 | 	add	arg03, local05
2ee3c     01 18 06 F6 | 	mov	arg04, #1
2ee40     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2ee44     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee48     01 2E 06 A1 |  if_e	add	local05, #1
2ee4c     C0 FF 9F AD |  if_e	jmp	#LR__4540
2ee50                 | LR__4541
2ee50                 | ' 	}
2ee50                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2ee50     0A 26 06 F1 | 	add	local01, #10
2ee54     13 2D E2 FA | 	rdword	local04, local01
2ee58     16 2F 0A F2 | 	cmp	local05, local04 wz
2ee5c     00 30 06 A6 |  if_e	mov	local06, #0
2ee60     01 30 06 56 |  if_ne	mov	local06, #1
2ee64     18 FB 01 F6 | 	mov	result1, local06
2ee68                 | LR__4542
2ee68     A7 F0 03 F6 | 	mov	ptra, fp
2ee6c     B2 00 A0 FD | 	call	#popregs_
2ee70                 | _fatfs_cc_dir_clear_ret
2ee70     2D 00 64 FD | 	ret
2ee74                 | 
2ee74                 | _fatfs_cc_dir_sdi
2ee74     06 4A 05 F6 | 	mov	COUNT_, #6
2ee78     A8 00 A0 FD | 	call	#pushregs_
2ee7c     09 27 02 F6 | 	mov	local01, arg01
2ee80     0A 29 02 F6 | 	mov	local02, arg02
2ee84     13 2B 02 FB | 	rdlong	local03, local01
2ee88     00 10 00 FF 
2ee8c     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2ee90     1F 28 CE C7 |  if_b	test	local02, #31 wz
2ee94                 | ' 		return FR_INT_ERR;
2ee94     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2ee98     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4556
2ee9c     10 26 06 F1 | 	add	local01, #16
2eea0     13 29 62 FC | 	wrlong	local02, local01
2eea4     08 26 86 F1 | 	sub	local01, #8
2eea8     13 2D 0A FB | 	rdlong	local04, local01 wz
2eeac     08 26 86 F1 | 	sub	local01, #8
2eeb0     15 2F C2 AA |  if_e	rdbyte	local05, local03
2eeb4     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2eeb8     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2eebc     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2eec0     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2eec4     00 2C 0E F2 | 	cmp	local04, #0 wz
2eec8     3C 00 90 5D |  if_ne	jmp	#LR__4550
2eecc     14 2F 02 F6 | 	mov	local05, local02
2eed0     05 2E 46 F0 | 	shr	local05, #5
2eed4     08 2A 06 F1 | 	add	local03, #8
2eed8     15 15 E2 FA | 	rdword	arg02, local03
2eedc     08 2A 86 F1 | 	sub	local03, #8
2eee0     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2eee4     02 FA 05 36 |  if_ae	mov	result1, #2
2eee8     E4 00 90 3D |  if_ae	jmp	#LR__4556
2eeec     28 2A 06 F1 | 	add	local03, #40
2eef0     15 2F 02 FB | 	rdlong	local05, local03
2eef4     28 2A 86 F1 | 	sub	local03, #40
2eef8     18 26 06 F1 | 	add	local01, #24
2eefc     13 2F 62 FC | 	wrlong	local05, local01
2ef00     18 26 86 F1 | 	sub	local01, #24
2ef04     7C 00 90 FD | 	jmp	#LR__4555
2ef08                 | LR__4550
2ef08     0A 2A 06 F1 | 	add	local03, #10
2ef0c     15 31 E2 FA | 	rdword	local06, local03
2ef10     0A 2A 86 F1 | 	sub	local03, #10
2ef14     09 30 66 F0 | 	shl	local06, #9
2ef18                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2ef18                 | ' 		while (ofs >= csz) {
2ef18                 | LR__4551
2ef18     18 29 12 F2 | 	cmp	local02, local06 wc
2ef1c     4C 00 90 CD |  if_b	jmp	#LR__4554
2ef20     13 13 02 F6 | 	mov	arg01, local01
2ef24     16 15 02 F6 | 	mov	arg02, local04
2ef28     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2ef2c     FD 2C 02 F6 | 	mov	local04, result1
2ef30     FF FF 7F FF 
2ef34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ef38     01 FA 05 A6 |  if_e	mov	result1, #1
2ef3c     90 00 90 AD |  if_e	jmp	#LR__4556
2ef40     02 2C 16 F2 | 	cmp	local04, #2 wc
2ef44     14 00 90 CD |  if_b	jmp	#LR__4552
2ef48     18 2A 06 F1 | 	add	local03, #24
2ef4c     15 2F 02 FB | 	rdlong	local05, local03
2ef50     18 2A 86 F1 | 	sub	local03, #24
2ef54     17 2D 12 F2 | 	cmp	local04, local05 wc
2ef58     08 00 90 CD |  if_b	jmp	#LR__4553
2ef5c                 | LR__4552
2ef5c     02 FA 05 F6 | 	mov	result1, #2
2ef60     6C 00 90 FD | 	jmp	#LR__4556
2ef64                 | LR__4553
2ef64     18 29 82 F1 | 	sub	local02, local06
2ef68     AC FF 9F FD | 	jmp	#LR__4551
2ef6c                 | LR__4554
2ef6c     15 13 02 F6 | 	mov	arg01, local03
2ef70     16 15 02 F6 | 	mov	arg02, local04
2ef74     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2ef78     18 26 06 F1 | 	add	local01, #24
2ef7c     13 FB 61 FC | 	wrlong	result1, local01
2ef80     18 26 86 F1 | 	sub	local01, #24
2ef84                 | LR__4555
2ef84     14 26 06 F1 | 	add	local01, #20
2ef88     13 2D 62 FC | 	wrlong	local04, local01
2ef8c     04 26 06 F1 | 	add	local01, #4
2ef90     13 2F 0A FB | 	rdlong	local05, local01 wz
2ef94     18 26 86 F1 | 	sub	local01, #24
2ef98     02 FA 05 A6 |  if_e	mov	result1, #2
2ef9c     30 00 90 AD |  if_e	jmp	#LR__4556
2efa0     14 31 02 F6 | 	mov	local06, local02
2efa4     09 30 46 F0 | 	shr	local06, #9
2efa8     18 26 06 F1 | 	add	local01, #24
2efac     13 2F 02 FB | 	rdlong	local05, local01
2efb0     18 2F 02 F1 | 	add	local05, local06
2efb4     13 2F 62 FC | 	wrlong	local05, local01
2efb8     34 2A 06 F1 | 	add	local03, #52
2efbc     FF 29 06 F5 | 	and	local02, #511
2efc0     14 2B 02 F1 | 	add	local03, local02
2efc4     04 26 06 F1 | 	add	local01, #4
2efc8     13 2B 62 FC | 	wrlong	local03, local01
2efcc                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2efcc                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2efcc                 | ' 
2efcc                 | ' 	return FR_OK;
2efcc     00 FA 05 F6 | 	mov	result1, #0
2efd0                 | LR__4556
2efd0     A7 F0 03 F6 | 	mov	ptra, fp
2efd4     B2 00 A0 FD | 	call	#popregs_
2efd8                 | _fatfs_cc_dir_sdi_ret
2efd8     2D 00 64 FD | 	ret
2efdc                 | 
2efdc                 | _fatfs_cc_dir_next
2efdc     05 4A 05 F6 | 	mov	COUNT_, #5
2efe0     A8 00 A0 FD | 	call	#pushregs_
2efe4     09 27 02 F6 | 	mov	local01, arg01
2efe8     0A 29 02 F6 | 	mov	local02, arg02
2efec     13 2B 02 FB | 	rdlong	local03, local01
2eff0     10 26 06 F1 | 	add	local01, #16
2eff4     13 2D 02 FB | 	rdlong	local04, local01
2eff8     10 26 86 F1 | 	sub	local01, #16
2effc     20 2C 06 F1 | 	add	local04, #32
2f000     00 10 00 FF 
2f004     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2f008     18 26 06 31 |  if_ae	add	local01, #24
2f00c     13 01 68 3C |  if_ae	wrlong	#0, local01
2f010     18 26 86 31 |  if_ae	sub	local01, #24
2f014     18 26 06 F1 | 	add	local01, #24
2f018     13 15 0A FB | 	rdlong	arg02, local01 wz
2f01c     18 26 86 F1 | 	sub	local01, #24
2f020     04 FA 05 A6 |  if_e	mov	result1, #4
2f024     64 01 90 AD |  if_e	jmp	#LR__4565
2f028     FF 2D CE F7 | 	test	local04, #511 wz
2f02c     3C 01 90 5D |  if_ne	jmp	#LR__4564
2f030     18 26 06 F1 | 	add	local01, #24
2f034     13 15 02 FB | 	rdlong	arg02, local01
2f038     01 14 06 F1 | 	add	arg02, #1
2f03c     13 15 62 FC | 	wrlong	arg02, local01
2f040     04 26 86 F1 | 	sub	local01, #4
2f044     13 15 0A FB | 	rdlong	arg02, local01 wz
2f048     14 26 86 F1 | 	sub	local01, #20
2f04c     2C 00 90 5D |  if_ne	jmp	#LR__4560
2f050     16 15 02 F6 | 	mov	arg02, local04
2f054     05 14 46 F0 | 	shr	arg02, #5
2f058     08 2A 06 F1 | 	add	local03, #8
2f05c     15 29 E2 FA | 	rdword	local02, local03
2f060     08 2A 86 F1 | 	sub	local03, #8
2f064     14 15 12 F2 | 	cmp	arg02, local02 wc
2f068     18 26 06 31 |  if_ae	add	local01, #24
2f06c     13 01 68 3C |  if_ae	wrlong	#0, local01
2f070                 | ' 				dp->sect = 0; return FR_NO_FILE;
2f070     04 FA 05 36 |  if_ae	mov	result1, #4
2f074     14 01 90 3D |  if_ae	jmp	#LR__4565
2f078     F0 00 90 FD | 	jmp	#LR__4563
2f07c                 | LR__4560
2f07c     16 13 02 F6 | 	mov	arg01, local04
2f080     09 12 46 F0 | 	shr	arg01, #9
2f084     0A 2A 06 F1 | 	add	local03, #10
2f088     15 15 E2 FA | 	rdword	arg02, local03
2f08c     0A 2A 86 F1 | 	sub	local03, #10
2f090     01 14 86 F1 | 	sub	arg02, #1
2f094     0A 13 CA F7 | 	test	arg01, arg02 wz
2f098     D0 00 90 5D |  if_ne	jmp	#LR__4562
2f09c     13 13 02 F6 | 	mov	arg01, local01
2f0a0     14 26 06 F1 | 	add	local01, #20
2f0a4     13 15 02 FB | 	rdlong	arg02, local01
2f0a8     14 26 86 F1 | 	sub	local01, #20
2f0ac     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2f0b0     FD 2E 02 F6 | 	mov	local05, result1
2f0b4     02 2E 16 F2 | 	cmp	local05, #2 wc
2f0b8     02 FA 05 C6 |  if_b	mov	result1, #2
2f0bc     CC 00 90 CD |  if_b	jmp	#LR__4565
2f0c0     FF FF 7F FF 
2f0c4     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f0c8     01 FA 05 A6 |  if_e	mov	result1, #1
2f0cc     BC 00 90 AD |  if_e	jmp	#LR__4565
2f0d0     18 2A 06 F1 | 	add	local03, #24
2f0d4     15 15 02 FB | 	rdlong	arg02, local03
2f0d8     18 2A 86 F1 | 	sub	local03, #24
2f0dc     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2f0e0     68 00 90 CD |  if_b	jmp	#LR__4561
2f0e4     00 28 0E F2 | 	cmp	local02, #0 wz
2f0e8     18 26 06 A1 |  if_e	add	local01, #24
2f0ec     13 01 68 AC |  if_e	wrlong	#0, local01
2f0f0                 | ' 						dp->sect = 0; return FR_NO_FILE;
2f0f0     04 FA 05 A6 |  if_e	mov	result1, #4
2f0f4     94 00 90 AD |  if_e	jmp	#LR__4565
2f0f8     13 13 02 F6 | 	mov	arg01, local01
2f0fc     14 26 06 F1 | 	add	local01, #20
2f100     13 15 02 FB | 	rdlong	arg02, local01
2f104     14 26 86 F1 | 	sub	local01, #20
2f108     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2f10c     FD 2E 0A F6 | 	mov	local05, result1 wz
2f110     07 FA 05 A6 |  if_e	mov	result1, #7
2f114     74 00 90 AD |  if_e	jmp	#LR__4565
2f118     01 2E 0E F2 | 	cmp	local05, #1 wz
2f11c     02 FA 05 A6 |  if_e	mov	result1, #2
2f120     68 00 90 AD |  if_e	jmp	#LR__4565
2f124     FF FF 7F FF 
2f128     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2f12c     01 FA 05 A6 |  if_e	mov	result1, #1
2f130     58 00 90 AD |  if_e	jmp	#LR__4565
2f134     17 15 02 F6 | 	mov	arg02, local05
2f138     15 13 02 F6 | 	mov	arg01, local03
2f13c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2f140     00 FA 0D F2 | 	cmp	result1, #0 wz
2f144     01 FA 05 56 |  if_ne	mov	result1, #1
2f148     40 00 90 5D |  if_ne	jmp	#LR__4565
2f14c                 | LR__4561
2f14c     14 26 06 F1 | 	add	local01, #20
2f150     13 2F 62 FC | 	wrlong	local05, local01
2f154     15 13 02 F6 | 	mov	arg01, local03
2f158     17 15 02 F6 | 	mov	arg02, local05
2f15c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2f160     04 26 06 F1 | 	add	local01, #4
2f164     13 FB 61 FC | 	wrlong	result1, local01
2f168     18 26 86 F1 | 	sub	local01, #24
2f16c                 | LR__4562
2f16c                 | LR__4563
2f16c                 | LR__4564
2f16c     10 26 06 F1 | 	add	local01, #16
2f170     13 2D 62 FC | 	wrlong	local04, local01
2f174     34 2A 06 F1 | 	add	local03, #52
2f178     FF 2D 06 F5 | 	and	local04, #511
2f17c     16 2B 02 F1 | 	add	local03, local04
2f180     0C 26 06 F1 | 	add	local01, #12
2f184     13 2B 62 FC | 	wrlong	local03, local01
2f188                 | ' #line 1771 "ff.c"
2f188                 | ' 				}
2f188                 | ' 				dp->clust = clst;
2f188                 | ' 				dp->sect = clst2sect(fs, clst);
2f188                 | ' 			}
2f188                 | ' 		}
2f188                 | ' 	}
2f188                 | ' 	dp->dptr = ofs;
2f188                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2f188                 | ' 
2f188                 | ' 	return FR_OK;
2f188     00 FA 05 F6 | 	mov	result1, #0
2f18c                 | LR__4565
2f18c     A7 F0 03 F6 | 	mov	ptra, fp
2f190     B2 00 A0 FD | 	call	#popregs_
2f194                 | _fatfs_cc_dir_next_ret
2f194     2D 00 64 FD | 	ret
2f198                 | 
2f198                 | _fatfs_cc_dir_alloc
2f198     08 4A 05 F6 | 	mov	COUNT_, #8
2f19c     A8 00 A0 FD | 	call	#pushregs_
2f1a0     09 27 02 F6 | 	mov	local01, arg01
2f1a4     0A 29 02 F6 | 	mov	local02, arg02
2f1a8     13 2B 02 FB | 	rdlong	local03, local01
2f1ac     13 13 02 F6 | 	mov	arg01, local01
2f1b0     00 14 06 F6 | 	mov	arg02, #0
2f1b4     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2f1b8     FD 2C 0A F6 | 	mov	local04, result1 wz
2f1bc     70 00 90 5D |  if_ne	jmp	#LR__4574
2f1c0     00 2E 06 F6 | 	mov	local05, #0
2f1c4                 | ' 		n = 0;
2f1c4                 | ' 		do {
2f1c4                 | LR__4570
2f1c4     18 26 06 F1 | 	add	local01, #24
2f1c8     13 15 02 FB | 	rdlong	arg02, local01
2f1cc     18 26 86 F1 | 	sub	local01, #24
2f1d0     15 13 02 F6 | 	mov	arg01, local03
2f1d4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2f1d8     FD 2C 0A F6 | 	mov	local04, result1 wz
2f1dc     50 00 90 5D |  if_ne	jmp	#LR__4573
2f1e0     1C 26 06 F1 | 	add	local01, #28
2f1e4     13 31 02 FB | 	rdlong	local06, local01
2f1e8     1C 26 86 F1 | 	sub	local01, #28
2f1ec     18 31 C2 FA | 	rdbyte	local06, local06
2f1f0     E5 30 0E F2 | 	cmp	local06, #229 wz
2f1f4     1C 26 06 51 |  if_ne	add	local01, #28
2f1f8     13 33 02 5B |  if_ne	rdlong	local07, local01
2f1fc     1C 26 86 51 |  if_ne	sub	local01, #28
2f200     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2f204     10 00 90 5D |  if_ne	jmp	#LR__4571
2f208     01 2E 06 F1 | 	add	local05, #1
2f20c     14 2F 0A F2 | 	cmp	local05, local02 wz
2f210     1C 00 90 AD |  if_e	jmp	#LR__4573
2f214     04 00 90 FD | 	jmp	#LR__4572
2f218                 | LR__4571
2f218     00 2E 06 F6 | 	mov	local05, #0
2f21c                 | LR__4572
2f21c     13 13 02 F6 | 	mov	arg01, local01
2f220     01 14 06 F6 | 	mov	arg02, #1
2f224     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2f228     FD 2C 0A F6 | 	mov	local04, result1 wz
2f22c     94 FF 9F AD |  if_e	jmp	#LR__4570
2f230                 | LR__4573
2f230                 | LR__4574
2f230     04 2C 0E F2 | 	cmp	local04, #4 wz
2f234     07 2C 06 A6 |  if_e	mov	local04, #7
2f238                 | ' 	return res;
2f238     16 FB 01 F6 | 	mov	result1, local04
2f23c     A7 F0 03 F6 | 	mov	ptra, fp
2f240     B2 00 A0 FD | 	call	#popregs_
2f244                 | _fatfs_cc_dir_alloc_ret
2f244     2D 00 64 FD | 	ret
2f248                 | 
2f248                 | _fatfs_cc_ld_clust
2f248     09 01 02 F6 | 	mov	_var01, arg01
2f24c     0A 13 02 F6 | 	mov	arg01, arg02
2f250     1A 12 06 F1 | 	add	arg01, #26
2f254                 | ' {
2f254                 | ' 
2f254                 | ' 	return *((WORD*)ptr);
2f254     09 FB E1 FA | 	rdword	result1, arg01
2f258     FD 12 32 F9 | 	getword	arg01, result1, #0
2f25c     00 01 C2 FA | 	rdbyte	_var01, _var01
2f260     03 00 0E F2 | 	cmp	_var01, #3 wz
2f264     14 14 06 A1 |  if_e	add	arg02, #20
2f268                 | ' {
2f268                 | ' 
2f268                 | ' 	return *((WORD*)ptr);
2f268     0A FB E1 AA |  if_e	rdword	result1, arg02
2f26c     10 FA 65 A0 |  if_e	shl	result1, #16
2f270     FD 12 42 A5 |  if_e	or	arg01, result1
2f274                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2f274                 | ' 	}
2f274                 | ' 
2f274                 | ' 	return cl;
2f274     09 FB 01 F6 | 	mov	result1, arg01
2f278                 | _fatfs_cc_ld_clust_ret
2f278     2D 00 64 FD | 	ret
2f27c                 | 
2f27c                 | _fatfs_cc_st_clust
2f27c     09 01 02 F6 | 	mov	_var01, arg01
2f280     0A 13 02 F6 | 	mov	arg01, arg02
2f284     1A 12 06 F1 | 	add	arg01, #26
2f288     09 17 52 FC | 	wrword	arg03, arg01
2f28c     00 01 C2 FA | 	rdbyte	_var01, _var01
2f290     03 00 0E F2 | 	cmp	_var01, #3 wz
2f294     14 14 06 A1 |  if_e	add	arg02, #20
2f298     10 16 46 A0 |  if_e	shr	arg03, #16
2f29c     0A 17 52 AC |  if_e	wrword	arg03, arg02
2f2a0                 | _fatfs_cc_st_clust_ret
2f2a0     2D 00 64 FD | 	ret
2f2a4                 | 
2f2a4                 | _fatfs_cc_cmp_lfn
2f2a4     07 4A 05 F6 | 	mov	COUNT_, #7
2f2a8     A8 00 A0 FD | 	call	#pushregs_
2f2ac     09 27 02 F6 | 	mov	local01, arg01
2f2b0     0A 13 02 F6 | 	mov	arg01, arg02
2f2b4     1A 12 06 F1 | 	add	arg01, #26
2f2b8                 | ' {
2f2b8                 | ' 
2f2b8                 | ' 	return *((WORD*)ptr);
2f2b8     09 FB E9 FA | 	rdword	result1, arg01 wz
2f2bc     00 FA 05 56 |  if_ne	mov	result1, #0
2f2c0     E0 00 90 5D |  if_ne	jmp	#LR__4586
2f2c4     0A 29 C2 FA | 	rdbyte	local02, arg02
2f2c8     3F 28 06 F5 | 	and	local02, #63
2f2cc     01 28 86 F1 | 	sub	local02, #1
2f2d0     0D 28 06 FD | 	qmul	local02, #13
2f2d4                 | ' 
2f2d4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2f2d4                 | ' 
2f2d4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f2d4     01 2A 06 F6 | 	mov	local03, #1
2f2d8     00 2C 06 F6 | 	mov	local04, #0
2f2dc     18 2E 62 FD | 	getqx	local05
2f2e0                 | LR__4580
2f2e0     0D 2C 16 F2 | 	cmp	local04, #13 wc
2f2e4     9C 00 90 3D |  if_ae	jmp	#LR__4585
2f2e8     0A 13 02 F6 | 	mov	arg01, arg02
2f2ec     16 29 02 F6 | 	mov	local02, local04
2f2f0     01 00 00 FF 
2f2f4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f2f8     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2f2fc     14 29 C2 FA | 	rdbyte	local02, local02
2f300     01 28 06 FA | 	mul	local02, #1
2f304     14 13 02 F1 | 	add	arg01, local02
2f308     01 00 00 FF 
2f30c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f310                 | ' {
2f310                 | ' 
2f310                 | ' 	return *((WORD*)ptr);
2f310     09 FB E1 FA | 	rdword	result1, arg01
2f314     FD 30 02 F6 | 	mov	local06, result1
2f318     15 29 02 F6 | 	mov	local02, local03
2f31c     0F 28 4E F7 | 	zerox	local02, #15 wz
2f320     44 00 90 AD |  if_e	jmp	#LR__4583
2f324     00 2F 16 F2 | 	cmp	local05, #256 wc
2f328     2C 00 90 3D |  if_ae	jmp	#LR__4581
2f32c     18 13 32 F9 | 	getword	arg01, local06, #0
2f330     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f334     FD 28 02 F6 | 	mov	local02, result1
2f338     17 2B 02 F6 | 	mov	local03, local05
2f33c     01 2A 66 F0 | 	shl	local03, #1
2f340     13 2B 02 F1 | 	add	local03, local01
2f344     15 13 E2 FA | 	rdword	arg01, local03
2f348     01 2E 06 F1 | 	add	local05, #1
2f34c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2f350     FD 28 0A F2 | 	cmp	local02, result1 wz
2f354     08 00 90 AD |  if_e	jmp	#LR__4582
2f358                 | LR__4581
2f358                 | ' 				return 0;
2f358     00 FA 05 F6 | 	mov	result1, #0
2f35c     44 00 90 FD | 	jmp	#LR__4586
2f360                 | LR__4582
2f360     18 2B 02 F6 | 	mov	local03, local06
2f364     14 00 90 FD | 	jmp	#LR__4584
2f368                 | LR__4583
2f368     18 31 32 F9 | 	getword	local06, local06, #0
2f36c     7F 00 00 FF 
2f370     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2f374     00 FA 05 56 |  if_ne	mov	result1, #0
2f378     28 00 90 5D |  if_ne	jmp	#LR__4586
2f37c                 | LR__4584
2f37c     01 2C 06 F1 | 	add	local04, #1
2f380     5C FF 9F FD | 	jmp	#LR__4580
2f384                 | LR__4585
2f384     0A 29 C2 FA | 	rdbyte	local02, arg02
2f388     40 28 CE F7 | 	test	local02, #64 wz
2f38c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2f390     01 2E 66 50 |  if_ne	shl	local05, #1
2f394     13 2F 02 51 |  if_ne	add	local05, local01
2f398     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2f39c     00 FA 05 56 |  if_ne	mov	result1, #0
2f3a0                 | ' 
2f3a0                 | ' 	return 1;
2f3a0     01 FA 05 A6 |  if_e	mov	result1, #1
2f3a4                 | LR__4586
2f3a4     A7 F0 03 F6 | 	mov	ptra, fp
2f3a8     B2 00 A0 FD | 	call	#popregs_
2f3ac                 | _fatfs_cc_cmp_lfn_ret
2f3ac     2D 00 64 FD | 	ret
2f3b0                 | 
2f3b0                 | _fatfs_cc_pick_lfn
2f3b0     09 01 02 F6 | 	mov	_var01, arg01
2f3b4     0A 13 02 F6 | 	mov	arg01, arg02
2f3b8     1A 12 06 F1 | 	add	arg01, #26
2f3bc                 | ' {
2f3bc                 | ' 
2f3bc                 | ' 	return *((WORD*)ptr);
2f3bc     09 FB E9 FA | 	rdword	result1, arg01 wz
2f3c0     00 FA 05 56 |  if_ne	mov	result1, #0
2f3c4     D4 00 90 5D |  if_ne	jmp	#LR__4595
2f3c8     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f3cc     40 02 26 F5 | 	andn	_var02, #64
2f3d0     01 02 86 F1 | 	sub	_var02, #1
2f3d4     0D 02 06 FD | 	qmul	_var02, #13
2f3d8                 | ' 
2f3d8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2f3d8                 | ' 
2f3d8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2f3d8     01 04 06 F6 | 	mov	_var03, #1
2f3dc     00 06 06 F6 | 	mov	_var04, #0
2f3e0     18 08 62 FD | 	getqx	_var05
2f3e4                 | LR__4590
2f3e4     0D 06 16 F2 | 	cmp	_var04, #13 wc
2f3e8     80 00 90 3D |  if_ae	jmp	#LR__4593
2f3ec     0A 13 02 F6 | 	mov	arg01, arg02
2f3f0     03 03 02 F6 | 	mov	_var02, _var04
2f3f4     01 00 00 FF 
2f3f8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f3fc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2f400     01 03 C2 FA | 	rdbyte	_var02, _var02
2f404     01 02 06 FA | 	mul	_var02, #1
2f408     01 13 02 F1 | 	add	arg01, _var02
2f40c     01 00 00 FF 
2f410     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f414                 | ' {
2f414                 | ' 
2f414                 | ' 	return *((WORD*)ptr);
2f414     09 FB E1 FA | 	rdword	result1, arg01
2f418     FD 0A 02 F6 | 	mov	_var06, result1
2f41c     02 03 02 F6 | 	mov	_var02, _var03
2f420     0F 02 4E F7 | 	zerox	_var02, #15 wz
2f424     28 00 90 AD |  if_e	jmp	#LR__4591
2f428     00 09 16 F2 | 	cmp	_var05, #256 wc
2f42c     00 FA 05 36 |  if_ae	mov	result1, #0
2f430     68 00 90 3D |  if_ae	jmp	#LR__4595
2f434     04 03 02 F6 | 	mov	_var02, _var05
2f438     01 02 66 F0 | 	shl	_var02, #1
2f43c     00 03 02 F1 | 	add	_var02, _var01
2f440     05 05 02 F6 | 	mov	_var03, _var06
2f444     01 05 52 FC | 	wrword	_var03, _var02
2f448     01 08 06 F1 | 	add	_var05, #1
2f44c     14 00 90 FD | 	jmp	#LR__4592
2f450                 | LR__4591
2f450     05 0B 32 F9 | 	getword	_var06, _var06, #0
2f454     7F 00 00 FF 
2f458     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2f45c     00 FA 05 56 |  if_ne	mov	result1, #0
2f460     38 00 90 5D |  if_ne	jmp	#LR__4595
2f464                 | LR__4592
2f464     01 06 06 F1 | 	add	_var04, #1
2f468     78 FF 9F FD | 	jmp	#LR__4590
2f46c                 | LR__4593
2f46c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2f470     40 02 CE F7 | 	test	_var02, #64 wz
2f474     02 0D 02 56 |  if_ne	mov	_var07, _var03
2f478     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2f47c     18 00 90 AD |  if_e	jmp	#LR__4594
2f480     00 09 16 F2 | 	cmp	_var05, #256 wc
2f484     00 FA 05 36 |  if_ae	mov	result1, #0
2f488     10 00 90 3D |  if_ae	jmp	#LR__4595
2f48c     01 08 66 F0 | 	shl	_var05, #1
2f490     00 09 02 F1 | 	add	_var05, _var01
2f494     04 01 58 FC | 	wrword	#0, _var05
2f498                 | LR__4594
2f498                 | ' 		lfnbuf[i] = 0;
2f498                 | ' 	}
2f498                 | ' 
2f498                 | ' 	return 1;
2f498     01 FA 05 F6 | 	mov	result1, #1
2f49c                 | LR__4595
2f49c                 | _fatfs_cc_pick_lfn_ret
2f49c     2D 00 64 FD | 	ret
2f4a0                 | 
2f4a0                 | _fatfs_cc_put_lfn
2f4a0     0D 14 06 F1 | 	add	arg02, #13
2f4a4     0A 19 42 FC | 	wrbyte	arg04, arg02
2f4a8     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2f4ac     01 18 86 F1 | 	sub	arg04, #1
2f4b0     0D 18 06 FD | 	qmul	arg04, #13
2f4b4     09 01 02 F6 | 	mov	_var01, arg01
2f4b8     02 14 86 F1 | 	sub	arg02, #2
2f4bc     0A 1F 48 FC | 	wrbyte	#15, arg02
2f4c0     01 14 06 F1 | 	add	arg02, #1
2f4c4     0A 01 48 FC | 	wrbyte	#0, arg02
2f4c8     0C 14 86 F1 | 	sub	arg02, #12
2f4cc     0A 13 02 F6 | 	mov	arg01, arg02
2f4d0     1A 12 06 F1 | 	add	arg01, #26
2f4d4     09 01 58 FC | 	wrword	#0, arg01
2f4d8     00 02 06 F6 | 	mov	_var02, #0
2f4dc     00 04 06 F6 | 	mov	_var03, #0
2f4e0                 | ' 	BYTE* dir,
2f4e0                 | ' 	BYTE ord,
2f4e0                 | ' 	BYTE sum
2f4e0                 | ' )
2f4e0                 | ' {
2f4e0                 | ' 	UINT i, s;
2f4e0                 | ' 	WCHAR wc;
2f4e0                 | ' 
2f4e0                 | ' 
2f4e0                 | ' 	dir[ 13 ] = sum;
2f4e0                 | ' 	dir[ 11 ] =  0x0F ;
2f4e0                 | ' 	dir[ 12 ] = 0;
2f4e0                 | ' 	st_word(dir +  26 , 0);
2f4e0                 | ' 
2f4e0                 | ' 	i = (ord - 1) * 13;
2f4e0                 | ' 	s = wc = 0;
2f4e0                 | ' 	do {
2f4e0     01 00 00 FF 
2f4e4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2f4e8     18 06 62 FD | 	getqx	_var04
2f4ec     97 2A 48 FB | 	callpa	#(@LR__4601-@LR__4600)>>2,fcache_load_ptr_
2f4f0                 | LR__4600
2f4f0     01 19 32 F9 | 	getword	arg04, _var02, #0
2f4f4     7F 00 00 FF 
2f4f8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2f4fc     03 13 02 56 |  if_ne	mov	arg01, _var04
2f500     01 06 06 51 |  if_ne	add	_var04, #1
2f504     01 12 66 50 |  if_ne	shl	arg01, #1
2f508     00 13 02 51 |  if_ne	add	arg01, _var01
2f50c     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2f510     0A 13 02 F6 | 	mov	arg01, arg02
2f514     02 19 02 F6 | 	mov	arg04, _var03
2f518     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2f51c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f520     01 18 06 FA | 	mul	arg04, #1
2f524     0C 13 02 F1 | 	add	arg01, arg04
2f528     09 03 52 FC | 	wrword	_var02, arg01
2f52c     01 19 02 F6 | 	mov	arg04, _var02
2f530     0F 18 4E F7 | 	zerox	arg04, #15 wz
2f534     0F 02 CE A9 |  if_e	bmask	_var02, #15
2f538     01 04 06 F1 | 	add	_var03, #1
2f53c     0D 04 16 F2 | 	cmp	_var03, #13 wc
2f540     AC FF 9F CD |  if_b	jmp	#LR__4600
2f544                 | LR__4601
2f544     01 00 00 FF 
2f548     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2f54c     01 03 32 F9 | 	getword	_var02, _var02, #0
2f550     7F 00 00 FF 
2f554     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2f558     01 06 66 50 |  if_ne	shl	_var04, #1
2f55c     00 07 02 51 |  if_ne	add	_var04, _var01
2f560     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2f564     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2f568     40 16 46 A5 |  if_e	or	arg03, #64
2f56c     0A 17 42 FC | 	wrbyte	arg03, arg02
2f570                 | _fatfs_cc_put_lfn_ret
2f570     2D 00 64 FD | 	ret
2f574                 | 
2f574                 | _fatfs_cc_gen_numname
2f574     08 4A 05 F6 | 	mov	COUNT_, #8
2f578     A8 00 A0 FD | 	call	#pushregs_
2f57c     2C F0 07 F1 | 	add	ptra, #44
2f580     09 27 02 F6 | 	mov	local01, arg01
2f584     0A 29 02 F6 | 	mov	local02, arg02
2f588     0B 2B 02 F6 | 	mov	local03, arg03
2f58c     0C 2D 02 F6 | 	mov	local04, arg04
2f590     13 13 02 F6 | 	mov	arg01, local01
2f594     14 15 02 F6 | 	mov	arg02, local02
2f598     0B 16 06 F6 | 	mov	arg03, #11
2f59c     98 72 BF FD | 	call	#__system____builtin_memmove
2f5a0     06 2C 16 F2 | 	cmp	local04, #6 wc
2f5a4     48 00 90 CD |  if_b	jmp	#LR__4615
2f5a8     16 2F 02 F6 | 	mov	local05, local04
2f5ac     97 1E 48 FB | 	callpa	#(@LR__4613-@LR__4610)>>2,fcache_load_ptr_
2f5b0                 | ' 		sreg = seq;
2f5b0                 | ' 		while (*lfn) {
2f5b0                 | LR__4610
2f5b0     15 31 EA FA | 	rdword	local06, local03 wz
2f5b4     34 00 90 AD |  if_e	jmp	#LR__4614
2f5b8     15 33 E2 FA | 	rdword	local07, local03
2f5bc                 | ' 			wc = *lfn++;
2f5bc                 | ' 			for (i = 0; i < 16; i++) {
2f5bc     02 2A 06 F1 | 	add	local03, #2
2f5c0     10 12 DC FC | 	rep	@LR__4612, #16
2f5c4                 | LR__4611
2f5c4     01 2E 66 F0 | 	shl	local05, #1
2f5c8     19 31 32 F9 | 	getword	local06, local07, #0
2f5cc     01 30 06 F5 | 	and	local06, #1
2f5d0     18 2F 02 F1 | 	add	local05, local06
2f5d4     19 33 32 F9 | 	getword	local07, local07, #0
2f5d8     01 32 46 F0 | 	shr	local07, #1
2f5dc     10 2E 2E F4 | 	testbn	local05, #16 wz
2f5e0     88 00 00 5F 
2f5e4     21 2E 66 55 |  if_ne	xor	local05, ##69665
2f5e8                 | LR__4612
2f5e8     C4 FF 9F FD | 	jmp	#LR__4610
2f5ec                 | LR__4613
2f5ec                 | LR__4614
2f5ec     17 2D 02 F6 | 	mov	local04, local05
2f5f0                 | LR__4615
2f5f0     07 32 06 F6 | 	mov	local07, #7
2f5f4                 | ' 			}
2f5f4                 | ' 		}
2f5f4                 | ' 		seq = (UINT)sreg;
2f5f4                 | ' 	}
2f5f4                 | ' 
2f5f4                 | ' 
2f5f4                 | ' 	i = 7;
2f5f4                 | ' 	do {
2f5f4     10 4E 05 F1 | 	add	fp, #16
2f5f8     97 1A 48 FB | 	callpa	#(@LR__4617-@LR__4616)>>2,fcache_load_ptr_
2f5fc                 | LR__4616
2f5fc     16 2F 42 F8 | 	getnib	local05, local04, #0
2f600     30 2E 06 F1 | 	add	local05, #48
2f604     04 2C 46 F0 | 	shr	local04, #4
2f608     17 31 E2 F8 | 	getbyte	local06, local05, #0
2f60c     3A 30 16 F2 | 	cmp	local06, #58 wc
2f610     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2f614     07 2E 06 31 |  if_ae	add	local05, #7
2f618     19 31 02 F6 | 	mov	local06, local07
2f61c     01 32 8E F1 | 	sub	local07, #1 wz
2f620     A7 30 02 F1 | 	add	local06, fp
2f624     18 2F 42 FC | 	wrbyte	local05, local06
2f628     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2f62c     CC FF 9F 5D |  if_ne	jmp	#LR__4616
2f630                 | LR__4617
2f630     19 31 02 F6 | 	mov	local06, local07
2f634     A7 30 02 F1 | 	add	local06, fp
2f638     18 FD 48 FC | 	wrbyte	#126, local06
2f63c                 | ' 	ns[i] = '~';
2f63c                 | ' 
2f63c                 | ' 
2f63c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2f63c     00 2E 06 F6 | 	mov	local05, #0
2f640     10 4E 85 F1 | 	sub	fp, #16
2f644     97 2A 48 FB | 	callpa	#(@LR__4620-@LR__4618)>>2,fcache_load_ptr_
2f648                 | LR__4618
2f648     19 2F 12 F2 | 	cmp	local05, local07 wc
2f64c     4C 00 90 3D |  if_ae	jmp	#LR__4621
2f650     17 31 02 F6 | 	mov	local06, local05
2f654     13 31 02 F1 | 	add	local06, local01
2f658     18 31 C2 FA | 	rdbyte	local06, local06
2f65c     20 30 0E F2 | 	cmp	local06, #32 wz
2f660     38 00 90 AD |  if_e	jmp	#LR__4621
2f664     17 13 02 F6 | 	mov	arg01, local05
2f668     13 13 02 F1 | 	add	arg01, local01
2f66c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2f670     00 FA 05 56 |  if_ne	mov	result1, #0
2f674                 | ' 
2f674                 | ' 	return 0;
2f674     00 FA 05 A6 |  if_e	mov	result1, #0
2f678     00 FA 0D F2 | 	cmp	result1, #0 wz
2f67c     14 00 90 AD |  if_e	jmp	#LR__4619
2f680     19 31 02 F6 | 	mov	local06, local07
2f684     01 30 86 F1 | 	sub	local06, #1
2f688     18 2F 0A F2 | 	cmp	local05, local06 wz
2f68c     0C 00 90 AD |  if_e	jmp	#LR__4621
2f690     01 2E 06 F1 | 	add	local05, #1
2f694                 | LR__4619
2f694     01 2E 06 F1 | 	add	local05, #1
2f698     AC FF 9F FD | 	jmp	#LR__4618
2f69c                 | LR__4620
2f69c                 | LR__4621
2f69c     97 20 48 FB | 	callpa	#(@LR__4625-@LR__4622)>>2,fcache_load_ptr_
2f6a0                 | ' 			j++;
2f6a0                 | ' 		}
2f6a0                 | ' 	}
2f6a0                 | ' 	do {
2f6a0                 | LR__4622
2f6a0     17 31 02 F6 | 	mov	local06, local05
2f6a4     13 31 02 F1 | 	add	local06, local01
2f6a8     08 32 16 F2 | 	cmp	local07, #8 wc
2f6ac     01 2E 06 F1 | 	add	local05, #1
2f6b0     1C 00 90 3D |  if_ae	jmp	#LR__4623
2f6b4     19 2D 02 F6 | 	mov	local04, local07
2f6b8     10 4E 05 F1 | 	add	fp, #16
2f6bc     A7 2C 02 F1 | 	add	local04, fp
2f6c0     16 35 C2 FA | 	rdbyte	local08, local04
2f6c4     01 32 06 F1 | 	add	local07, #1
2f6c8     10 4E 85 F1 | 	sub	fp, #16
2f6cc     04 00 90 FD | 	jmp	#LR__4624
2f6d0                 | LR__4623
2f6d0     20 34 06 F6 | 	mov	local08, #32
2f6d4                 | LR__4624
2f6d4     18 35 42 FC | 	wrbyte	local08, local06
2f6d8     08 2E 16 F2 | 	cmp	local05, #8 wc
2f6dc     C0 FF 9F CD |  if_b	jmp	#LR__4622
2f6e0                 | LR__4625
2f6e0     A7 F0 03 F6 | 	mov	ptra, fp
2f6e4     B2 00 A0 FD | 	call	#popregs_
2f6e8                 | _fatfs_cc_gen_numname_ret
2f6e8     2D 00 64 FD | 	ret
2f6ec                 | 
2f6ec                 | _fatfs_cc_sum_sfn
2f6ec     00 00 06 F6 | 	mov	_var01, #0
2f6f0                 | ' )
2f6f0                 | ' {
2f6f0                 | ' 	BYTE sum = 0;
2f6f0                 | ' 	UINT n = 11;
2f6f0                 | ' 
2f6f0                 | ' 	do {
2f6f0     97 12 48 FB | 	callpa	#(@LR__4632-@LR__4630)>>2,fcache_load_ptr_
2f6f4                 | LR__4630
2f6f4     0B 10 DC FC | 	rep	@LR__4633, #11
2f6f8                 | LR__4631
2f6f8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2f6fc     01 FA 45 F0 | 	shr	result1, #1
2f700     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2f704     07 00 66 F0 | 	shl	_var01, #7
2f708     00 FB 01 F1 | 	add	result1, _var01
2f70c     09 01 C2 FA | 	rdbyte	_var01, arg01
2f710     FD 00 02 F1 | 	add	_var01, result1
2f714     01 12 06 F1 | 	add	arg01, #1
2f718                 | LR__4632
2f718                 | LR__4633
2f718                 | ' 	return sum;
2f718     00 FB 01 F6 | 	mov	result1, _var01
2f71c                 | _fatfs_cc_sum_sfn_ret
2f71c     2D 00 64 FD | 	ret
2f720                 | 
2f720                 | _fatfs_cc_dir_read
2f720     0C 4A 05 F6 | 	mov	COUNT_, #12
2f724     A8 00 A0 FD | 	call	#pushregs_
2f728     09 27 02 F6 | 	mov	local01, arg01
2f72c     0A 29 02 F6 | 	mov	local02, arg02
2f730     04 2A 06 F6 | 	mov	local03, #4
2f734     13 2D 02 FB | 	rdlong	local04, local01
2f738     FF 2E 06 F6 | 	mov	local05, #255
2f73c     FF 30 06 F6 | 	mov	local06, #255
2f740                 | ' )
2f740                 | ' {
2f740                 | ' 	FRESULT res = FR_NO_FILE;
2f740                 | ' 	FATFS *fs = dp->obj.fs;
2f740                 | ' 	BYTE attr, b;
2f740                 | ' 
2f740                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2f740                 | ' 
2f740                 | ' 
2f740                 | ' 	while (dp->sect) {
2f740                 | LR__4640
2f740     18 26 06 F1 | 	add	local01, #24
2f744     13 FB 09 FB | 	rdlong	result1, local01 wz
2f748     18 26 86 F1 | 	sub	local01, #24
2f74c     AC 01 90 AD |  if_e	jmp	#LR__4650
2f750     18 26 06 F1 | 	add	local01, #24
2f754     13 15 02 FB | 	rdlong	arg02, local01
2f758     18 26 86 F1 | 	sub	local01, #24
2f75c     16 13 02 F6 | 	mov	arg01, local04
2f760     AC ED BF FD | 	call	#_fatfs_cc_move_window
2f764     FD 2A 0A F6 | 	mov	local03, result1 wz
2f768     90 01 90 5D |  if_ne	jmp	#LR__4650
2f76c     1C 26 06 F1 | 	add	local01, #28
2f770     13 FB 01 FB | 	rdlong	result1, local01
2f774     1C 26 86 F1 | 	sub	local01, #28
2f778     FD 32 C2 FA | 	rdbyte	local07, result1
2f77c     19 FB 01 F6 | 	mov	result1, local07
2f780     07 FA 4D F7 | 	zerox	result1, #7 wz
2f784     04 2A 06 A6 |  if_e	mov	local03, #4
2f788                 | ' 			res = FR_NO_FILE; break;
2f788     70 01 90 AD |  if_e	jmp	#LR__4650
2f78c     1C 26 06 F1 | 	add	local01, #28
2f790     13 35 02 FB | 	rdlong	local08, local01
2f794     0B 34 06 F1 | 	add	local08, #11
2f798     1A 37 C2 FA | 	rdbyte	local09, local08
2f79c     3F 36 06 F5 | 	and	local09, #63
2f7a0     16 26 86 F1 | 	sub	local01, #22
2f7a4     13 37 42 FC | 	wrbyte	local09, local01
2f7a8     06 26 86 F1 | 	sub	local01, #6
2f7ac     19 FB E1 F8 | 	getbyte	result1, local07, #0
2f7b0     E5 FA 0D F2 | 	cmp	result1, #229 wz
2f7b4     19 35 02 56 |  if_ne	mov	local08, local07
2f7b8     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2f7bc     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2f7c0     1C 00 90 AD |  if_e	jmp	#LR__4641
2f7c4     00 38 06 F6 | 	mov	local10, #0
2f7c8     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2f7cc     20 34 26 F5 | 	andn	local08, #32
2f7d0     08 34 0E F2 | 	cmp	local08, #8 wz
2f7d4     01 38 06 A6 |  if_e	mov	local10, #1
2f7d8     14 39 0A F2 | 	cmp	local10, local02 wz
2f7dc     08 00 90 AD |  if_e	jmp	#LR__4642
2f7e0                 | LR__4641
2f7e0     FF 2E 06 F6 | 	mov	local05, #255
2f7e4     00 01 90 FD | 	jmp	#LR__4649
2f7e8                 | LR__4642
2f7e8     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2f7ec     0F 36 0E F2 | 	cmp	local09, #15 wz
2f7f0     B4 00 90 5D |  if_ne	jmp	#LR__4646
2f7f4     19 3B E2 F8 | 	getbyte	local11, local07, #0
2f7f8     40 3A CE F7 | 	test	local11, #64 wz
2f7fc     30 00 90 AD |  if_e	jmp	#LR__4643
2f800     1C 26 06 F1 | 	add	local01, #28
2f804     13 3B 02 FB | 	rdlong	local11, local01
2f808     0D 3A 06 F1 | 	add	local11, #13
2f80c     1D 31 C2 FA | 	rdbyte	local06, local11
2f810     19 33 E2 F8 | 	getbyte	local07, local07, #0
2f814     BF 32 06 F5 | 	and	local07, #191
2f818     19 2F 02 F6 | 	mov	local05, local07
2f81c     0C 26 86 F1 | 	sub	local01, #12
2f820     13 3B 02 FB | 	rdlong	local11, local01
2f824     1C 26 06 F1 | 	add	local01, #28
2f828     13 3B 62 FC | 	wrlong	local11, local01
2f82c     2C 26 86 F1 | 	sub	local01, #44
2f830                 | LR__4643
2f830     19 35 E2 F8 | 	getbyte	local08, local07, #0
2f834     17 39 E2 F8 | 	getbyte	local10, local05, #0
2f838     1C 35 0A F2 | 	cmp	local08, local10 wz
2f83c     5C 00 90 5D |  if_ne	jmp	#LR__4644
2f840     18 39 E2 F8 | 	getbyte	local10, local06, #0
2f844     1C 26 06 F1 | 	add	local01, #28
2f848     13 37 02 FB | 	rdlong	local09, local01
2f84c     1C 26 86 F1 | 	sub	local01, #28
2f850     0D 36 06 F1 | 	add	local09, #13
2f854     1B 35 C2 FA | 	rdbyte	local08, local09
2f858     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2f85c     1B 39 0A F2 | 	cmp	local10, local09 wz
2f860     38 00 90 5D |  if_ne	jmp	#LR__4644
2f864     0C 2C 06 F1 | 	add	local04, #12
2f868     16 13 02 FB | 	rdlong	arg01, local04
2f86c     0C 2C 86 F1 | 	sub	local04, #12
2f870     1C 26 06 F1 | 	add	local01, #28
2f874     13 3D 02 FB | 	rdlong	local12, local01
2f878     1C 26 86 F1 | 	sub	local01, #28
2f87c     1E 15 02 F6 | 	mov	arg02, local12
2f880     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2f884     00 FA 4D F2 | 	cmps	result1, #0 wz
2f888     17 3D 02 56 |  if_ne	mov	local12, local05
2f88c     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2f890     01 3C 86 51 |  if_ne	sub	local12, #1
2f894     1E 3B 02 56 |  if_ne	mov	local11, local12
2f898     04 00 90 5D |  if_ne	jmp	#LR__4645
2f89c                 | LR__4644
2f89c     FF 3A 06 F6 | 	mov	local11, #255
2f8a0                 | LR__4645
2f8a0     1D 2F 02 F6 | 	mov	local05, local11
2f8a4     40 00 90 FD | 	jmp	#LR__4648
2f8a8                 | LR__4646
2f8a8     17 3B 02 F6 | 	mov	local11, local05
2f8ac     07 3A 4E F7 | 	zerox	local11, #7 wz
2f8b0     20 00 90 5D |  if_ne	jmp	#LR__4647
2f8b4     18 31 E2 F8 | 	getbyte	local06, local06, #0
2f8b8     1C 26 06 F1 | 	add	local01, #28
2f8bc     13 13 02 FB | 	rdlong	arg01, local01
2f8c0     1C 26 86 F1 | 	sub	local01, #28
2f8c4     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2f8c8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2f8cc     FD 30 0A F2 | 	cmp	local06, result1 wz
2f8d0     28 00 90 AD |  if_e	jmp	#LR__4650
2f8d4                 | LR__4647
2f8d4     2C 26 06 F1 | 	add	local01, #44
2f8d8     FF FF FF FF 
2f8dc     13 FF 6B FC | 	wrlong	##-1, local01
2f8e0     2C 26 86 F1 | 	sub	local01, #44
2f8e4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2f8e4                 | ' 					}
2f8e4                 | ' 					break;
2f8e4     14 00 90 FD | 	jmp	#LR__4650
2f8e8                 | LR__4648
2f8e8                 | LR__4649
2f8e8     13 13 02 F6 | 	mov	arg01, local01
2f8ec     00 14 06 F6 | 	mov	arg02, #0
2f8f0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2f8f4     FD 2A 0A F6 | 	mov	local03, result1 wz
2f8f8     44 FE 9F AD |  if_e	jmp	#LR__4640
2f8fc                 | LR__4650
2f8fc     00 2A 0E F2 | 	cmp	local03, #0 wz
2f900     18 26 06 51 |  if_ne	add	local01, #24
2f904     13 01 68 5C |  if_ne	wrlong	#0, local01
2f908                 | ' 	return res;
2f908     15 FB 01 F6 | 	mov	result1, local03
2f90c     A7 F0 03 F6 | 	mov	ptra, fp
2f910     B2 00 A0 FD | 	call	#popregs_
2f914                 | _fatfs_cc_dir_read_ret
2f914     2D 00 64 FD | 	ret
2f918                 | 
2f918                 | _fatfs_cc_dir_find
2f918     0B 4A 05 F6 | 	mov	COUNT_, #11
2f91c     A8 00 A0 FD | 	call	#pushregs_
2f920     09 27 02 F6 | 	mov	local01, arg01
2f924     13 29 02 FB | 	rdlong	local02, local01
2f928     13 13 02 F6 | 	mov	arg01, local01
2f92c     00 14 06 F6 | 	mov	arg02, #0
2f930     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2f934     00 FA 0D F2 | 	cmp	result1, #0 wz
2f938     18 02 90 5D |  if_ne	jmp	#LR__4672
2f93c     FF 2A 06 F6 | 	mov	local03, #255
2f940     FF 2C 06 F6 | 	mov	local04, #255
2f944     2C 26 06 F1 | 	add	local01, #44
2f948     FF FF FF FF 
2f94c     13 FF 6B FC | 	wrlong	##-1, local01
2f950     2C 26 86 F1 | 	sub	local01, #44
2f954                 | ' #line 2404 "ff.c"
2f954                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2f954                 | ' 
2f954                 | ' 	do {
2f954                 | LR__4660
2f954     18 26 06 F1 | 	add	local01, #24
2f958     13 15 02 FB | 	rdlong	arg02, local01
2f95c     18 26 86 F1 | 	sub	local01, #24
2f960     14 13 02 F6 | 	mov	arg01, local02
2f964     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2f968     FD 2E 0A F6 | 	mov	local05, result1 wz
2f96c     E0 01 90 5D |  if_ne	jmp	#LR__4671
2f970     1C 26 06 F1 | 	add	local01, #28
2f974     13 17 02 FB | 	rdlong	arg03, local01
2f978     1C 26 86 F1 | 	sub	local01, #28
2f97c     0B 31 C2 FA | 	rdbyte	local06, arg03
2f980     18 17 02 F6 | 	mov	arg03, local06
2f984     07 16 4E F7 | 	zerox	arg03, #7 wz
2f988     04 2E 06 A6 |  if_e	mov	local05, #4
2f98c     C0 01 90 AD |  if_e	jmp	#LR__4671
2f990     1C 26 06 F1 | 	add	local01, #28
2f994     13 33 02 FB | 	rdlong	local07, local01
2f998     19 17 02 F6 | 	mov	arg03, local07
2f99c     0B 16 06 F1 | 	add	arg03, #11
2f9a0     0B 35 C2 FA | 	rdbyte	local08, arg03
2f9a4     3F 34 06 F5 | 	and	local08, #63
2f9a8     16 26 86 F1 | 	sub	local01, #22
2f9ac     13 35 42 FC | 	wrbyte	local08, local01
2f9b0     06 26 86 F1 | 	sub	local01, #6
2f9b4     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2f9b8     E5 16 0E F2 | 	cmp	arg03, #229 wz
2f9bc     18 00 90 AD |  if_e	jmp	#LR__4661
2f9c0     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2f9c4     08 16 CE F7 | 	test	arg03, #8 wz
2f9c8     1A 33 02 56 |  if_ne	mov	local07, local08
2f9cc     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2f9d0     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2f9d4     18 00 90 AD |  if_e	jmp	#LR__4662
2f9d8                 | LR__4661
2f9d8     FF 2C 06 F6 | 	mov	local04, #255
2f9dc     2C 26 06 F1 | 	add	local01, #44
2f9e0     FF FF FF FF 
2f9e4     13 FF 6B FC | 	wrlong	##-1, local01
2f9e8     2C 26 86 F1 | 	sub	local01, #44
2f9ec     4C 01 90 FD | 	jmp	#LR__4670
2f9f0                 | LR__4662
2f9f0     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2f9f4     0F 34 0E F2 | 	cmp	local08, #15 wz
2f9f8     C8 00 90 5D |  if_ne	jmp	#LR__4666
2f9fc     2B 26 06 F1 | 	add	local01, #43
2fa00     13 35 C2 FA | 	rdbyte	local08, local01
2fa04     2B 26 86 F1 | 	sub	local01, #43
2fa08     40 34 CE F7 | 	test	local08, #64 wz
2fa0c     2C 01 90 5D |  if_ne	jmp	#LR__4669
2fa10     18 37 E2 F8 | 	getbyte	local09, local06, #0
2fa14     40 36 CE F7 | 	test	local09, #64 wz
2fa18     30 00 90 AD |  if_e	jmp	#LR__4663
2fa1c     1C 26 06 F1 | 	add	local01, #28
2fa20     13 37 02 FB | 	rdlong	local09, local01
2fa24     0D 36 06 F1 | 	add	local09, #13
2fa28     1B 2B C2 FA | 	rdbyte	local03, local09
2fa2c     18 31 E2 F8 | 	getbyte	local06, local06, #0
2fa30     BF 30 06 F5 | 	and	local06, #191
2fa34     18 2D 02 F6 | 	mov	local04, local06
2fa38     0C 26 86 F1 | 	sub	local01, #12
2fa3c     13 37 02 FB | 	rdlong	local09, local01
2fa40     1C 26 06 F1 | 	add	local01, #28
2fa44     13 37 62 FC | 	wrlong	local09, local01
2fa48     2C 26 86 F1 | 	sub	local01, #44
2fa4c                 | LR__4663
2fa4c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2fa50     16 33 E2 F8 | 	getbyte	local07, local04, #0
2fa54     19 39 0A F2 | 	cmp	local10, local07 wz
2fa58     5C 00 90 5D |  if_ne	jmp	#LR__4664
2fa5c     15 35 E2 F8 | 	getbyte	local08, local03, #0
2fa60     1C 26 06 F1 | 	add	local01, #28
2fa64     13 33 02 FB | 	rdlong	local07, local01
2fa68     1C 26 86 F1 | 	sub	local01, #28
2fa6c     0D 32 06 F1 | 	add	local07, #13
2fa70     19 31 C2 FA | 	rdbyte	local06, local07
2fa74     18 33 E2 F8 | 	getbyte	local07, local06, #0
2fa78     19 35 0A F2 | 	cmp	local08, local07 wz
2fa7c     38 00 90 5D |  if_ne	jmp	#LR__4664
2fa80     0C 28 06 F1 | 	add	local02, #12
2fa84     14 13 02 FB | 	rdlong	arg01, local02
2fa88     0C 28 86 F1 | 	sub	local02, #12
2fa8c     1C 26 06 F1 | 	add	local01, #28
2fa90     13 3B 02 FB | 	rdlong	local11, local01
2fa94     1C 26 86 F1 | 	sub	local01, #28
2fa98     1D 15 02 F6 | 	mov	arg02, local11
2fa9c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2faa0     00 FA 4D F2 | 	cmps	result1, #0 wz
2faa4     16 3B 02 56 |  if_ne	mov	local11, local04
2faa8     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2faac     01 3A 86 51 |  if_ne	sub	local11, #1
2fab0     1D 37 02 56 |  if_ne	mov	local09, local11
2fab4     04 00 90 5D |  if_ne	jmp	#LR__4665
2fab8                 | LR__4664
2fab8     FF 36 06 F6 | 	mov	local09, #255
2fabc                 | LR__4665
2fabc     1B 2D 02 F6 | 	mov	local04, local09
2fac0     78 00 90 FD | 	jmp	#LR__4669
2fac4                 | LR__4666
2fac4     16 37 02 F6 | 	mov	local09, local04
2fac8     07 36 4E F7 | 	zerox	local09, #7 wz
2facc     20 00 90 5D |  if_ne	jmp	#LR__4667
2fad0     15 39 E2 F8 | 	getbyte	local10, local03, #0
2fad4     1C 26 06 F1 | 	add	local01, #28
2fad8     13 13 02 FB | 	rdlong	arg01, local01
2fadc     1C 26 86 F1 | 	sub	local01, #28
2fae0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2fae4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2fae8     FD 38 0A F2 | 	cmp	local10, result1 wz
2faec     60 00 90 AD |  if_e	jmp	#LR__4671
2faf0                 | LR__4667
2faf0     2B 26 06 F1 | 	add	local01, #43
2faf4     13 37 C2 FA | 	rdbyte	local09, local01
2faf8     2B 26 86 F1 | 	sub	local01, #43
2fafc     01 36 CE F7 | 	test	local09, #1 wz
2fb00     24 00 90 5D |  if_ne	jmp	#LR__4668
2fb04     1C 26 06 F1 | 	add	local01, #28
2fb08     13 13 02 FB | 	rdlong	arg01, local01
2fb0c     04 26 06 F1 | 	add	local01, #4
2fb10     13 15 02 F6 | 	mov	arg02, local01
2fb14     20 26 86 F1 | 	sub	local01, #32
2fb18     0B 16 06 F6 | 	mov	arg03, #11
2fb1c     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2fb20     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb24     28 00 90 AD |  if_e	jmp	#LR__4671
2fb28                 | LR__4668
2fb28     FF 2C 06 F6 | 	mov	local04, #255
2fb2c     2C 26 06 F1 | 	add	local01, #44
2fb30     FF FF FF FF 
2fb34     13 FF 6B FC | 	wrlong	##-1, local01
2fb38     2C 26 86 F1 | 	sub	local01, #44
2fb3c                 | LR__4669
2fb3c                 | LR__4670
2fb3c     13 13 02 F6 | 	mov	arg01, local01
2fb40     00 14 06 F6 | 	mov	arg02, #0
2fb44     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2fb48     FD 2E 0A F6 | 	mov	local05, result1 wz
2fb4c     04 FE 9F AD |  if_e	jmp	#LR__4660
2fb50                 | LR__4671
2fb50                 | ' 
2fb50                 | ' 	return res;
2fb50     17 FB 01 F6 | 	mov	result1, local05
2fb54                 | LR__4672
2fb54     A7 F0 03 F6 | 	mov	ptra, fp
2fb58     B2 00 A0 FD | 	call	#popregs_
2fb5c                 | _fatfs_cc_dir_find_ret
2fb5c     2D 00 64 FD | 	ret
2fb60                 | 
2fb60                 | _fatfs_cc_dir_register
2fb60     0A 4A 05 F6 | 	mov	COUNT_, #10
2fb64     A8 00 A0 FD | 	call	#pushregs_
2fb68     2C F0 07 F1 | 	add	ptra, #44
2fb6c     04 4E 05 F1 | 	add	fp, #4
2fb70     A7 12 62 FC | 	wrlong	arg01, fp
2fb74     09 27 02 FB | 	rdlong	local01, arg01
2fb78     08 4E 05 F1 | 	add	fp, #8
2fb7c     A7 26 62 FC | 	wrlong	local01, fp
2fb80     08 4E 85 F1 | 	sub	fp, #8
2fb84     A7 28 02 FB | 	rdlong	local02, fp
2fb88     04 4E 85 F1 | 	sub	fp, #4
2fb8c     2B 28 06 F1 | 	add	local02, #43
2fb90     14 29 C2 FA | 	rdbyte	local02, local02
2fb94     A0 28 CE F7 | 	test	local02, #160 wz
2fb98     06 FA 05 56 |  if_ne	mov	result1, #6
2fb9c     F8 03 90 5D |  if_ne	jmp	#LR__4695
2fba0                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2fba0     14 4E 05 F1 | 	add	fp, #20
2fba4     A7 00 68 FC | 	wrlong	#0, fp
2fba8     14 4E 85 F1 | 	sub	fp, #20
2fbac     97 28 48 FB | 	callpa	#(@LR__4681-@LR__4680)>>2,fcache_load_ptr_
2fbb0                 | LR__4680
2fbb0     0C 4E 05 F1 | 	add	fp, #12
2fbb4     A7 28 02 FB | 	rdlong	local02, fp
2fbb8     0C 28 06 F1 | 	add	local02, #12
2fbbc     14 2B 02 FB | 	rdlong	local03, local02
2fbc0     08 4E 05 F1 | 	add	fp, #8
2fbc4     A7 2C 02 FB | 	rdlong	local04, fp
2fbc8     14 4E 85 F1 | 	sub	fp, #20
2fbcc     01 2C 66 F0 | 	shl	local04, #1
2fbd0     15 2D 02 F1 | 	add	local04, local03
2fbd4     16 29 EA FA | 	rdword	local02, local04 wz
2fbd8     24 00 90 AD |  if_e	jmp	#LR__4682
2fbdc     14 4E 05 F1 | 	add	fp, #20
2fbe0     A7 2E 02 FB | 	rdlong	local05, fp
2fbe4     17 31 02 F6 | 	mov	local06, local05
2fbe8     17 33 02 F6 | 	mov	local07, local05
2fbec     19 35 02 F6 | 	mov	local08, local07
2fbf0     01 34 06 F1 | 	add	local08, #1
2fbf4     A7 34 62 FC | 	wrlong	local08, fp
2fbf8     14 4E 85 F1 | 	sub	fp, #20
2fbfc     B0 FF 9F FD | 	jmp	#LR__4680
2fc00                 | LR__4681
2fc00                 | LR__4682
2fc00     1C 4E 05 F1 | 	add	fp, #28
2fc04     A7 12 02 F6 | 	mov	arg01, fp
2fc08     18 4E 85 F1 | 	sub	fp, #24
2fc0c     A7 14 02 FB | 	rdlong	arg02, fp
2fc10     04 4E 85 F1 | 	sub	fp, #4
2fc14     20 14 06 F1 | 	add	arg02, #32
2fc18     0C 16 06 F6 | 	mov	arg03, #12
2fc1c     18 6C BF FD | 	call	#__system____builtin_memmove
2fc20     27 4E 05 F1 | 	add	fp, #39
2fc24     A7 36 C2 FA | 	rdbyte	local09, fp
2fc28     27 4E 85 F1 | 	sub	fp, #39
2fc2c     01 36 CE F7 | 	test	local09, #1 wz
2fc30     F4 00 90 AD |  if_e	jmp	#LR__4685
2fc34     04 4E 05 F1 | 	add	fp, #4
2fc38     A7 38 02 FB | 	rdlong	local10, fp
2fc3c     2B 38 06 F1 | 	add	local10, #43
2fc40     1C 81 48 FC | 	wrbyte	#64, local10
2fc44                 | ' 		dp->fn[ 11 ] =  0x40 ;
2fc44                 | ' 		for (n = 1; n < 100; n++) {
2fc44     0C 4E 05 F1 | 	add	fp, #12
2fc48     A7 02 68 FC | 	wrlong	#1, fp
2fc4c     10 4E 85 F1 | 	sub	fp, #16
2fc50                 | LR__4683
2fc50     10 4E 05 F1 | 	add	fp, #16
2fc54     A7 28 02 FB | 	rdlong	local02, fp
2fc58     10 4E 85 F1 | 	sub	fp, #16
2fc5c     64 28 16 F2 | 	cmp	local02, #100 wc
2fc60     70 00 90 3D |  if_ae	jmp	#LR__4684
2fc64     04 4E 05 F1 | 	add	fp, #4
2fc68     A7 12 02 FB | 	rdlong	arg01, fp
2fc6c     20 12 06 F1 | 	add	arg01, #32
2fc70     18 4E 05 F1 | 	add	fp, #24
2fc74     A7 14 02 F6 | 	mov	arg02, fp
2fc78     10 4E 85 F1 | 	sub	fp, #16
2fc7c     A7 38 02 FB | 	rdlong	local10, fp
2fc80     0C 38 06 F1 | 	add	local10, #12
2fc84     1C 17 02 FB | 	rdlong	arg03, local10
2fc88     04 4E 05 F1 | 	add	fp, #4
2fc8c     A7 18 02 FB | 	rdlong	arg04, fp
2fc90     10 4E 85 F1 | 	sub	fp, #16
2fc94     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2fc98     04 4E 05 F1 | 	add	fp, #4
2fc9c     A7 12 02 FB | 	rdlong	arg01, fp
2fca0     04 4E 85 F1 | 	sub	fp, #4
2fca4     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2fca8     08 4E 05 F1 | 	add	fp, #8
2fcac     A7 FA 61 FC | 	wrlong	result1, fp
2fcb0     00 FA 4D F2 | 	cmps	result1, #0 wz
2fcb4     08 4E 85 F1 | 	sub	fp, #8
2fcb8     18 00 90 5D |  if_ne	jmp	#LR__4684
2fcbc     10 4E 05 F1 | 	add	fp, #16
2fcc0     A7 38 02 FB | 	rdlong	local10, fp
2fcc4     01 38 06 F1 | 	add	local10, #1
2fcc8     A7 38 62 FC | 	wrlong	local10, fp
2fccc     10 4E 85 F1 | 	sub	fp, #16
2fcd0     7C FF 9F FD | 	jmp	#LR__4683
2fcd4                 | LR__4684
2fcd4     10 4E 05 F1 | 	add	fp, #16
2fcd8     A7 38 02 FB | 	rdlong	local10, fp
2fcdc     10 4E 85 F1 | 	sub	fp, #16
2fce0     64 38 0E F2 | 	cmp	local10, #100 wz
2fce4     07 FA 05 A6 |  if_e	mov	result1, #7
2fce8     AC 02 90 AD |  if_e	jmp	#LR__4695
2fcec     08 4E 05 F1 | 	add	fp, #8
2fcf0     A7 38 02 FB | 	rdlong	local10, fp
2fcf4     08 4E 85 F1 | 	sub	fp, #8
2fcf8     04 38 0E F2 | 	cmp	local10, #4 wz
2fcfc     08 4E 05 51 |  if_ne	add	fp, #8
2fd00     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2fd04     08 4E 85 51 |  if_ne	sub	fp, #8
2fd08     8C 02 90 5D |  if_ne	jmp	#LR__4695
2fd0c     04 4E 05 F1 | 	add	fp, #4
2fd10     A7 38 02 FB | 	rdlong	local10, fp
2fd14     23 4E 05 F1 | 	add	fp, #35
2fd18     A7 26 C2 FA | 	rdbyte	local01, fp
2fd1c     27 4E 85 F1 | 	sub	fp, #39
2fd20     2B 38 06 F1 | 	add	local10, #43
2fd24     1C 27 42 FC | 	wrbyte	local01, local10
2fd28                 | LR__4685
2fd28     27 4E 05 F1 | 	add	fp, #39
2fd2c     A7 28 C2 FA | 	rdbyte	local02, fp
2fd30     27 4E 85 F1 | 	sub	fp, #39
2fd34     02 28 CE F7 | 	test	local02, #2 wz
2fd38     20 00 90 AD |  if_e	jmp	#LR__4686
2fd3c     14 4E 05 F1 | 	add	fp, #20
2fd40     A7 38 02 FB | 	rdlong	local10, fp
2fd44     0C 38 06 F1 | 	add	local10, #12
2fd48     0D 38 16 FD | 	qdiv	local10, #13
2fd4c     14 4E 85 F1 | 	sub	fp, #20
2fd50     18 38 62 FD | 	getqx	local10
2fd54     01 38 06 F1 | 	add	local10, #1
2fd58     04 00 90 FD | 	jmp	#LR__4687
2fd5c                 | LR__4686
2fd5c     01 38 06 F6 | 	mov	local10, #1
2fd60                 | LR__4687
2fd60     18 4E 05 F1 | 	add	fp, #24
2fd64     A7 38 62 FC | 	wrlong	local10, fp
2fd68     14 4E 85 F1 | 	sub	fp, #20
2fd6c     A7 12 02 FB | 	rdlong	arg01, fp
2fd70     1C 15 02 F6 | 	mov	arg02, local10
2fd74     04 4E 85 F1 | 	sub	fp, #4
2fd78     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2fd7c     08 4E 05 F1 | 	add	fp, #8
2fd80     A7 FA 61 FC | 	wrlong	result1, fp
2fd84     08 4E 85 F1 | 	sub	fp, #8
2fd88     00 FA 0D F2 | 	cmp	result1, #0 wz
2fd8c     38 01 90 5D |  if_ne	jmp	#LR__4692
2fd90     18 4E 05 F1 | 	add	fp, #24
2fd94     A7 38 02 FB | 	rdlong	local10, fp
2fd98     01 38 8E F1 | 	sub	local10, #1 wz
2fd9c     A7 38 62 FC | 	wrlong	local10, fp
2fda0     18 4E 85 F1 | 	sub	fp, #24
2fda4     20 01 90 AD |  if_e	jmp	#LR__4692
2fda8     04 4E 05 F1 | 	add	fp, #4
2fdac     A7 38 02 FB | 	rdlong	local10, fp
2fdb0     1C 13 02 F6 | 	mov	arg01, local10
2fdb4     14 4E 05 F1 | 	add	fp, #20
2fdb8     A7 18 02 FB | 	rdlong	arg04, fp
2fdbc     18 4E 85 F1 | 	sub	fp, #24
2fdc0     05 18 66 F0 | 	shl	arg04, #5
2fdc4     10 38 06 F1 | 	add	local10, #16
2fdc8     1C 15 02 FB | 	rdlong	arg02, local10
2fdcc     0C 15 82 F1 | 	sub	arg02, arg04
2fdd0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2fdd4     08 4E 05 F1 | 	add	fp, #8
2fdd8     A7 FA 61 FC | 	wrlong	result1, fp
2fddc     08 4E 85 F1 | 	sub	fp, #8
2fde0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fde4     E0 00 90 5D |  if_ne	jmp	#LR__4691
2fde8     04 4E 05 F1 | 	add	fp, #4
2fdec     A7 12 02 FB | 	rdlong	arg01, fp
2fdf0     04 4E 85 F1 | 	sub	fp, #4
2fdf4     20 12 06 F1 | 	add	arg01, #32
2fdf8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2fdfc     FD 38 02 F6 | 	mov	local10, result1
2fe00     28 4E 05 F1 | 	add	fp, #40
2fe04     A7 38 42 FC | 	wrbyte	local10, fp
2fe08     28 4E 85 F1 | 	sub	fp, #40
2fe0c                 | ' 			sum = sum_sfn(dp->fn);
2fe0c                 | ' 			do {
2fe0c                 | LR__4688
2fe0c     0C 4E 05 F1 | 	add	fp, #12
2fe10     A7 12 02 FB | 	rdlong	arg01, fp
2fe14     08 4E 85 F1 | 	sub	fp, #8
2fe18     A7 26 02 FB | 	rdlong	local01, fp
2fe1c     04 4E 85 F1 | 	sub	fp, #4
2fe20     18 26 06 F1 | 	add	local01, #24
2fe24     13 15 02 FB | 	rdlong	arg02, local01
2fe28     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2fe2c     08 4E 05 F1 | 	add	fp, #8
2fe30     A7 FA 61 FC | 	wrlong	result1, fp
2fe34     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe38     08 4E 85 F1 | 	sub	fp, #8
2fe3c     88 00 90 5D |  if_ne	jmp	#LR__4690
2fe40     0C 4E 05 F1 | 	add	fp, #12
2fe44     A7 28 02 FB | 	rdlong	local02, fp
2fe48     0C 28 06 F1 | 	add	local02, #12
2fe4c     14 13 02 FB | 	rdlong	arg01, local02
2fe50     08 4E 85 F1 | 	sub	fp, #8
2fe54     A7 26 02 FB | 	rdlong	local01, fp
2fe58     1C 26 06 F1 | 	add	local01, #28
2fe5c     13 15 02 FB | 	rdlong	arg02, local01
2fe60     14 4E 05 F1 | 	add	fp, #20
2fe64     A7 16 02 FB | 	rdlong	arg03, fp
2fe68     10 4E 05 F1 | 	add	fp, #16
2fe6c     A7 18 C2 FA | 	rdbyte	arg04, fp
2fe70     28 4E 85 F1 | 	sub	fp, #40
2fe74     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2fe78     0C 4E 05 F1 | 	add	fp, #12
2fe7c     A7 38 02 FB | 	rdlong	local10, fp
2fe80     03 38 06 F1 | 	add	local10, #3
2fe84     1C 03 48 FC | 	wrbyte	#1, local10
2fe88     08 4E 85 F1 | 	sub	fp, #8
2fe8c     A7 12 02 FB | 	rdlong	arg01, fp
2fe90     04 4E 85 F1 | 	sub	fp, #4
2fe94     00 14 06 F6 | 	mov	arg02, #0
2fe98     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2fe9c     08 4E 05 F1 | 	add	fp, #8
2fea0     A7 FA 61 FC | 	wrlong	result1, fp
2fea4     00 FA 4D F2 | 	cmps	result1, #0 wz
2fea8     08 4E 85 F1 | 	sub	fp, #8
2feac     18 00 90 5D |  if_ne	jmp	#LR__4689
2feb0     18 4E 05 F1 | 	add	fp, #24
2feb4     A7 38 02 FB | 	rdlong	local10, fp
2feb8     01 38 8E F1 | 	sub	local10, #1 wz
2febc     A7 38 62 FC | 	wrlong	local10, fp
2fec0     18 4E 85 F1 | 	sub	fp, #24
2fec4     44 FF 9F 5D |  if_ne	jmp	#LR__4688
2fec8                 | LR__4689
2fec8                 | LR__4690
2fec8                 | LR__4691
2fec8                 | LR__4692
2fec8     08 4E 05 F1 | 	add	fp, #8
2fecc     A7 38 0A FB | 	rdlong	local10, fp wz
2fed0     08 4E 85 F1 | 	sub	fp, #8
2fed4     B4 00 90 5D |  if_ne	jmp	#LR__4694
2fed8     0C 4E 05 F1 | 	add	fp, #12
2fedc     A7 12 02 FB | 	rdlong	arg01, fp
2fee0     08 4E 85 F1 | 	sub	fp, #8
2fee4     A7 26 02 FB | 	rdlong	local01, fp
2fee8     04 4E 85 F1 | 	sub	fp, #4
2feec     18 26 06 F1 | 	add	local01, #24
2fef0     13 15 02 FB | 	rdlong	arg02, local01
2fef4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2fef8     08 4E 05 F1 | 	add	fp, #8
2fefc     A7 FA 61 FC | 	wrlong	result1, fp
2ff00     08 4E 85 F1 | 	sub	fp, #8
2ff04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff08     80 00 90 5D |  if_ne	jmp	#LR__4693
2ff0c     04 4E 05 F1 | 	add	fp, #4
2ff10     A7 28 02 FB | 	rdlong	local02, fp
2ff14     04 4E 85 F1 | 	sub	fp, #4
2ff18     1C 28 06 F1 | 	add	local02, #28
2ff1c     14 13 02 FB | 	rdlong	arg01, local02
2ff20     00 14 06 F6 | 	mov	arg02, #0
2ff24     20 16 06 F6 | 	mov	arg03, #32
2ff28     98 00 A0 FD | 	call	#\builtin_bytefill_
2ff2c     04 4E 05 F1 | 	add	fp, #4
2ff30     A7 14 02 FB | 	rdlong	arg02, fp
2ff34     0A 27 02 F6 | 	mov	local01, arg02
2ff38     1C 26 06 F1 | 	add	local01, #28
2ff3c     13 13 02 FB | 	rdlong	arg01, local01
2ff40     04 4E 85 F1 | 	sub	fp, #4
2ff44     20 14 06 F1 | 	add	arg02, #32
2ff48     0B 16 06 F6 | 	mov	arg03, #11
2ff4c     E8 68 BF FD | 	call	#__system____builtin_memmove
2ff50     04 4E 05 F1 | 	add	fp, #4
2ff54     A7 36 02 FB | 	rdlong	local09, fp
2ff58     1B 39 02 F6 | 	mov	local10, local09
2ff5c     1C 38 06 F1 | 	add	local10, #28
2ff60     1C 27 02 FB | 	rdlong	local01, local10
2ff64     2B 36 06 F1 | 	add	local09, #43
2ff68     1B 39 C2 FA | 	rdbyte	local10, local09
2ff6c     18 38 06 F5 | 	and	local10, #24
2ff70     0C 26 06 F1 | 	add	local01, #12
2ff74     13 39 42 FC | 	wrbyte	local10, local01
2ff78     08 4E 05 F1 | 	add	fp, #8
2ff7c     A7 38 02 FB | 	rdlong	local10, fp
2ff80     0C 4E 85 F1 | 	sub	fp, #12
2ff84     03 38 06 F1 | 	add	local10, #3
2ff88     1C 03 48 FC | 	wrbyte	#1, local10
2ff8c                 | LR__4693
2ff8c                 | LR__4694
2ff8c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2ff8c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2ff8c                 | ' 
2ff8c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2ff8c                 | ' 
2ff8c                 | ' 			fs->wflag = 1;
2ff8c                 | ' 		}
2ff8c                 | ' 	}
2ff8c                 | ' 
2ff8c                 | ' 	return res;
2ff8c     08 4E 05 F1 | 	add	fp, #8
2ff90     A7 FA 01 FB | 	rdlong	result1, fp
2ff94     08 4E 85 F1 | 	sub	fp, #8
2ff98                 | LR__4695
2ff98     A7 F0 03 F6 | 	mov	ptra, fp
2ff9c     B2 00 A0 FD | 	call	#popregs_
2ffa0                 | _fatfs_cc_dir_register_ret
2ffa0     2D 00 64 FD | 	ret
2ffa4                 | 
2ffa4                 | _fatfs_cc_dir_remove
2ffa4     05 4A 05 F6 | 	mov	COUNT_, #5
2ffa8     A8 00 A0 FD | 	call	#pushregs_
2ffac     09 27 02 F6 | 	mov	local01, arg01
2ffb0     13 29 02 FB | 	rdlong	local02, local01
2ffb4     10 26 06 F1 | 	add	local01, #16
2ffb8     13 2B 02 FB | 	rdlong	local03, local01
2ffbc     1C 26 06 F1 | 	add	local01, #28
2ffc0     13 15 02 FB | 	rdlong	arg02, local01
2ffc4     2C 26 86 F1 | 	sub	local01, #44
2ffc8     FF FF 7F FF 
2ffcc     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2ffd0     00 2C 06 A6 |  if_e	mov	local04, #0
2ffd4     18 00 90 AD |  if_e	jmp	#LR__4700
2ffd8     13 13 02 F6 | 	mov	arg01, local01
2ffdc     2C 26 06 F1 | 	add	local01, #44
2ffe0     13 15 02 FB | 	rdlong	arg02, local01
2ffe4     2C 26 86 F1 | 	sub	local01, #44
2ffe8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2ffec     FD 2C 02 F6 | 	mov	local04, result1
2fff0                 | LR__4700
2fff0     16 2F 0A F6 | 	mov	local05, local04 wz
2fff4     64 00 90 5D |  if_ne	jmp	#LR__4703
2fff8                 | ' 		do {
2fff8                 | LR__4701
2fff8     18 26 06 F1 | 	add	local01, #24
2fffc     13 15 02 FB | 	rdlong	arg02, local01
30000     18 26 86 F1 | 	sub	local01, #24
30004     14 13 02 F6 | 	mov	arg01, local02
30008     04 E5 BF FD | 	call	#_fatfs_cc_move_window
3000c     FD 2E 0A F6 | 	mov	local05, result1 wz
30010     40 00 90 5D |  if_ne	jmp	#LR__4702
30014     1C 26 06 F1 | 	add	local01, #28
30018     13 2D 02 FB | 	rdlong	local04, local01
3001c     16 CB 49 FC | 	wrbyte	#229, local04
30020     03 28 06 F1 | 	add	local02, #3
30024     14 03 48 FC | 	wrbyte	#1, local02
30028     03 28 86 F1 | 	sub	local02, #3
3002c     0C 26 86 F1 | 	sub	local01, #12
30030     13 2D 02 FB | 	rdlong	local04, local01
30034     10 26 86 F1 | 	sub	local01, #16
30038     15 2D 12 F2 | 	cmp	local04, local03 wc
3003c     14 00 90 3D |  if_ae	jmp	#LR__4702
30040     13 13 02 F6 | 	mov	arg01, local01
30044     00 14 06 F6 | 	mov	arg02, #0
30048     90 EF BF FD | 	call	#_fatfs_cc_dir_next
3004c     FD 2E 0A F6 | 	mov	local05, result1 wz
30050     A4 FF 9F AD |  if_e	jmp	#LR__4701
30054                 | LR__4702
30054     04 2E 0E F2 | 	cmp	local05, #4 wz
30058     02 2E 06 A6 |  if_e	mov	local05, #2
3005c                 | LR__4703
3005c                 | ' 	}
3005c                 | ' #line 2590 "ff.c"
3005c                 | ' 	return res;
3005c     17 FB 01 F6 | 	mov	result1, local05
30060     A7 F0 03 F6 | 	mov	ptra, fp
30064     B2 00 A0 FD | 	call	#popregs_
30068                 | _fatfs_cc_dir_remove_ret
30068     2D 00 64 FD | 	ret
3006c                 | 
3006c                 | _fatfs_cc_get_fileinfo
3006c     0F 4A 05 F6 | 	mov	COUNT_, #15
30070     A8 00 A0 FD | 	call	#pushregs_
30074     09 27 02 F6 | 	mov	local01, arg01
30078     0A 29 02 F6 | 	mov	local02, arg02
3007c     13 2B 02 FB | 	rdlong	local03, local01
30080     1C 28 06 F1 | 	add	local02, #28
30084     14 01 48 FC | 	wrbyte	#0, local02
30088     1C 28 86 F1 | 	sub	local02, #28
3008c     18 26 06 F1 | 	add	local01, #24
30090     13 2D 0A FB | 	rdlong	local04, local01 wz
30094     18 26 86 F1 | 	sub	local01, #24
30098     90 03 90 AD |  if_e	jmp	#LR__4724
3009c     2C 26 06 F1 | 	add	local01, #44
300a0     13 2D 02 FB | 	rdlong	local04, local01
300a4     2C 26 86 F1 | 	sub	local01, #44
300a8     FF FF 7F FF 
300ac     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
300b0     D8 00 90 AD |  if_e	jmp	#LR__4713
300b4     00 2E 06 F6 | 	mov	local05, #0
300b8     00 30 06 F6 | 	mov	local06, #0
300bc     00 32 06 F6 | 	mov	local07, #0
300c0                 | ' 			si = di = 0;
300c0                 | ' 			hs = 0;
300c0                 | ' 			while (fs->lfnbuf[si] != 0) {
300c0                 | LR__4710
300c0     0C 2A 06 F1 | 	add	local03, #12
300c4     15 2D 02 FB | 	rdlong	local04, local03
300c8     0C 2A 86 F1 | 	sub	local03, #12
300cc     18 35 02 F6 | 	mov	local08, local06
300d0     01 34 66 F0 | 	shl	local08, #1
300d4     16 35 02 F1 | 	add	local08, local04
300d8     1A 2D EA FA | 	rdword	local04, local08 wz
300dc     90 00 90 AD |  if_e	jmp	#LR__4712
300e0     0C 2A 06 F1 | 	add	local03, #12
300e4     15 37 02 FB | 	rdlong	local09, local03
300e8     0C 2A 86 F1 | 	sub	local03, #12
300ec     18 39 02 F6 | 	mov	local10, local06
300f0     01 38 66 F0 | 	shl	local10, #1
300f4     1B 39 02 F1 | 	add	local10, local09
300f8     1C 3B E2 FA | 	rdword	local11, local10
300fc     19 2D 02 F6 | 	mov	local04, local07
30100     0F 2C 4E F7 | 	zerox	local04, #15 wz
30104     01 30 06 F1 | 	add	local06, #1
30108     24 00 90 5D |  if_ne	jmp	#LR__4711
3010c     1D 3D 32 F9 | 	getword	local12, local11, #0
30110     6C 00 00 FF 
30114     00 3C 16 F2 | 	cmp	local12, ##55296 wc
30118     14 00 90 CD |  if_b	jmp	#LR__4711
3011c     1D 3F 32 F9 | 	getword	local13, local11, #0
30120     70 00 00 FF 
30124     00 3E 16 F2 | 	cmp	local13, ##57344 wc
30128     1D 33 02 C6 |  if_b	mov	local07, local11
3012c                 | ' 					hs = wc; continue;
3012c     90 FF 9F CD |  if_b	jmp	#LR__4710
30130                 | LR__4711
30130     19 13 32 F9 | 	getword	arg01, local07, #0
30134     10 12 66 F0 | 	shl	arg01, #16
30138     1D 3B 32 F9 | 	getword	local11, local11, #0
3013c     1D 13 42 F5 | 	or	arg01, local11
30140     17 15 02 F6 | 	mov	arg02, local05
30144     1C 28 06 F1 | 	add	local02, #28
30148     14 15 02 F1 | 	add	arg02, local02
3014c     FF 16 06 F6 | 	mov	arg03, #255
30150     17 17 82 F1 | 	sub	arg03, local05
30154     1C 28 86 F1 | 	sub	local02, #28
30158     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
3015c     FD 40 0A F6 | 	mov	local14, result1 wz
30160     00 2E 06 A6 |  if_e	mov	local05, #0
30164     20 2F 02 51 |  if_ne	add	local05, local14
30168     00 32 06 56 |  if_ne	mov	local07, #0
3016c     50 FF 9F 5D |  if_ne	jmp	#LR__4710
30170                 | LR__4712
30170     19 2D 02 F6 | 	mov	local04, local07
30174     0F 2C 4E F7 | 	zerox	local04, #15 wz
30178     00 2E 06 56 |  if_ne	mov	local05, #0
3017c     1C 28 06 F1 | 	add	local02, #28
30180     14 2F 02 F1 | 	add	local05, local02
30184     17 01 48 FC | 	wrbyte	#0, local05
30188     1C 28 86 F1 | 	sub	local02, #28
3018c                 | LR__4713
3018c     00 2E 06 F6 | 	mov	local05, #0
30190     00 30 06 F6 | 	mov	local06, #0
30194                 | ' 			fno->fname[di] = 0;
30194                 | ' 		}
30194                 | ' 	}
30194                 | ' 
30194                 | ' 	si = di = 0;
30194                 | ' 	while (si < 11) {
30194                 | LR__4714
30194     0B 30 16 F2 | 	cmp	local06, #11 wc
30198     20 01 90 3D |  if_ae	jmp	#LR__4717
3019c     1C 26 06 F1 | 	add	local01, #28
301a0     13 37 02 FB | 	rdlong	local09, local01
301a4     1C 26 86 F1 | 	sub	local01, #28
301a8     18 39 02 F6 | 	mov	local10, local06
301ac     1B 39 02 F1 | 	add	local10, local09
301b0     1C 3B C2 FA | 	rdbyte	local11, local10
301b4     1D 2D 32 F9 | 	getword	local04, local11, #0
301b8     20 2C 0E F2 | 	cmp	local04, #32 wz
301bc     01 30 06 F1 | 	add	local06, #1
301c0     D0 FF 9F AD |  if_e	jmp	#LR__4714
301c4     1D 2D 32 F9 | 	getword	local04, local11, #0
301c8     05 2C 0E F2 | 	cmp	local04, #5 wz
301cc     E5 3A 06 A6 |  if_e	mov	local11, #229
301d0     09 30 0E F2 | 	cmp	local06, #9 wz
301d4     20 00 90 5D |  if_ne	jmp	#LR__4715
301d8     0C 2E 16 F2 | 	cmp	local05, #12 wc
301dc     18 00 90 3D |  if_ae	jmp	#LR__4715
301e0     17 3F 02 F6 | 	mov	local13, local05
301e4     0C 28 06 F1 | 	add	local02, #12
301e8     14 3F 02 F1 | 	add	local13, local02
301ec     1F 5D 48 FC | 	wrbyte	#46, local13
301f0     01 2E 06 F1 | 	add	local05, #1
301f4     0C 28 86 F1 | 	sub	local02, #12
301f8                 | LR__4715
301f8     1D 13 32 F9 | 	getword	arg01, local11, #0
301fc     07 12 4E F7 | 	zerox	arg01, #7 wz
30200     00 FA 05 56 |  if_ne	mov	result1, #0
30204                 | ' 
30204                 | ' 	return 0;
30204     00 FA 05 A6 |  if_e	mov	result1, #0
30208     00 FA 0D F2 | 	cmp	result1, #0 wz
3020c     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
30210     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
30214     50 00 90 AD |  if_e	jmp	#LR__4716
30218     1C 26 06 F1 | 	add	local01, #28
3021c     13 39 02 FB | 	rdlong	local10, local01
30220     1C 26 86 F1 | 	sub	local01, #28
30224     18 35 02 F6 | 	mov	local08, local06
30228     1C 35 02 F1 | 	add	local08, local10
3022c     1A 13 CA FA | 	rdbyte	arg01, local08 wz
30230     00 FA 05 56 |  if_ne	mov	result1, #0
30234                 | ' 
30234                 | ' 	return 0;
30234     00 FA 05 A6 |  if_e	mov	result1, #0
30238     00 FA 0D F2 | 	cmp	result1, #0 wz
3023c     28 00 90 AD |  if_e	jmp	#LR__4716
30240     1D 3B 32 F9 | 	getword	local11, local11, #0
30244     08 3A 66 F0 | 	shl	local11, #8
30248     1C 26 06 F1 | 	add	local01, #28
3024c     13 41 02 FB | 	rdlong	local14, local01
30250     1C 26 86 F1 | 	sub	local01, #28
30254     18 37 02 F6 | 	mov	local09, local06
30258     20 37 02 F1 | 	add	local09, local14
3025c     1B 3D C2 FA | 	rdbyte	local12, local09
30260     1E 3B 42 F5 | 	or	local11, local12
30264     01 30 06 F1 | 	add	local06, #1
30268                 | LR__4716
30268     1D 13 02 F6 | 	mov	arg01, local11
3026c     01 00 00 FF 
30270     52 15 06 F6 | 	mov	arg02, ##850
30274     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
30278     FD 3A 02 F6 | 	mov	local11, result1
3027c     1D 2D 02 F6 | 	mov	local04, local11
30280     0F 2C 4E F7 | 	zerox	local04, #15 wz
30284     00 2E 06 A6 |  if_e	mov	local05, #0
30288     30 00 90 AD |  if_e	jmp	#LR__4717
3028c     1D 13 32 F9 | 	getword	arg01, local11, #0
30290     17 15 02 F6 | 	mov	arg02, local05
30294     0C 28 06 F1 | 	add	local02, #12
30298     14 15 02 F1 | 	add	arg02, local02
3029c     0C 16 06 F6 | 	mov	arg03, #12
302a0     17 17 82 F1 | 	sub	arg03, local05
302a4     0C 28 86 F1 | 	sub	local02, #12
302a8     EC DF BF FD | 	call	#_fatfs_cc_put_utf
302ac     FD 40 0A F6 | 	mov	local14, result1 wz
302b0     00 2E 06 A6 |  if_e	mov	local05, #0
302b4     20 2F 02 51 |  if_ne	add	local05, local14
302b8     D8 FE 9F 5D |  if_ne	jmp	#LR__4714
302bc                 | LR__4717
302bc     17 2D 02 F6 | 	mov	local04, local05
302c0     0C 28 06 F1 | 	add	local02, #12
302c4     14 2D 02 F1 | 	add	local04, local02
302c8     16 01 48 FC | 	wrbyte	#0, local04
302cc     10 28 06 F1 | 	add	local02, #16
302d0     14 2D CA FA | 	rdbyte	local04, local02 wz
302d4     1C 28 86 F1 | 	sub	local02, #28
302d8     F8 00 90 5D |  if_ne	jmp	#LR__4723
302dc     00 2E 0E F2 | 	cmp	local05, #0 wz
302e0     1C 00 90 5D |  if_ne	jmp	#LR__4718
302e4     17 3F 02 F6 | 	mov	local13, local05
302e8     1C 28 06 F1 | 	add	local02, #28
302ec     14 3F 02 F1 | 	add	local13, local02
302f0     1F 7F 48 FC | 	wrbyte	#63, local13
302f4     01 2E 06 F1 | 	add	local05, #1
302f8     1C 28 86 F1 | 	sub	local02, #28
302fc     A4 00 90 FD | 	jmp	#LR__4722
30300                 | LR__4718
30300                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
30300     00 2E 06 F6 | 	mov	local05, #0
30304     00 30 06 F6 | 	mov	local06, #0
30308     08 42 06 F6 | 	mov	local15, #8
3030c                 | LR__4719
3030c     18 2D 02 F6 | 	mov	local04, local06
30310     0C 28 06 F1 | 	add	local02, #12
30314     14 2D 02 F1 | 	add	local04, local02
30318     16 3F CA FA | 	rdbyte	local13, local04 wz
3031c     0C 28 86 F1 | 	sub	local02, #12
30320     80 00 90 AD |  if_e	jmp	#LR__4721
30324     18 35 02 F6 | 	mov	local08, local06
30328     0C 28 06 F1 | 	add	local02, #12
3032c     14 35 02 F1 | 	add	local08, local02
30330     1A 3B C2 FA | 	rdbyte	local11, local08
30334     1D 41 32 F9 | 	getword	local14, local11, #0
30338     2E 40 0E F2 | 	cmp	local14, #46 wz
3033c     0C 28 86 F1 | 	sub	local02, #12
30340     10 42 06 A6 |  if_e	mov	local15, #16
30344     1D 41 32 F9 | 	getword	local14, local11, #0
30348     41 40 16 F2 | 	cmp	local14, #65 wc
3034c     30 00 90 CD |  if_b	jmp	#LR__4720
30350     1D 35 32 F9 | 	getword	local08, local11, #0
30354     5B 34 16 F2 | 	cmp	local08, #91 wc
30358     24 00 90 3D |  if_ae	jmp	#LR__4720
3035c     1C 26 06 F1 | 	add	local01, #28
30360     13 37 02 FB | 	rdlong	local09, local01
30364     1C 26 86 F1 | 	sub	local01, #28
30368     0C 36 06 F1 | 	add	local09, #12
3036c     1B 39 C2 FA | 	rdbyte	local10, local09
30370     21 41 E2 F8 | 	getbyte	local14, local15, #0
30374     20 39 CA F7 | 	test	local10, local14 wz
30378     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
3037c     20 3A 06 51 |  if_ne	add	local11, #32
30380                 | LR__4720
30380     17 41 02 F6 | 	mov	local14, local05
30384     1C 28 06 F1 | 	add	local02, #28
30388     14 41 02 F1 | 	add	local14, local02
3038c     1D 3B 32 F9 | 	getword	local11, local11, #0
30390     20 3B 42 FC | 	wrbyte	local11, local14
30394     01 30 06 F1 | 	add	local06, #1
30398     01 2E 06 F1 | 	add	local05, #1
3039c     1C 28 86 F1 | 	sub	local02, #28
303a0     68 FF 9F FD | 	jmp	#LR__4719
303a4                 | LR__4721
303a4                 | LR__4722
303a4     1C 28 06 F1 | 	add	local02, #28
303a8     14 2F 02 F1 | 	add	local05, local02
303ac     17 01 48 FC | 	wrbyte	#0, local05
303b0     1C 26 06 F1 | 	add	local01, #28
303b4     13 2D 02 FB | 	rdlong	local04, local01
303b8     1C 26 86 F1 | 	sub	local01, #28
303bc     0C 2C 06 F1 | 	add	local04, #12
303c0     16 3F CA FA | 	rdbyte	local13, local04 wz
303c4     1C 28 86 F1 | 	sub	local02, #28
303c8     0C 28 06 A1 |  if_e	add	local02, #12
303cc     14 01 48 AC |  if_e	wrbyte	#0, local02
303d0     0C 28 86 A1 |  if_e	sub	local02, #12
303d4                 | LR__4723
303d4     1C 26 06 F1 | 	add	local01, #28
303d8     13 3D 02 FB | 	rdlong	local12, local01
303dc     0B 3C 06 F1 | 	add	local12, #11
303e0     1E 2D C2 FA | 	rdbyte	local04, local12
303e4     3F 2C 06 F5 | 	and	local04, #63
303e8     08 28 06 F1 | 	add	local02, #8
303ec     14 2D 42 FC | 	wrbyte	local04, local02
303f0     08 28 86 F1 | 	sub	local02, #8
303f4     13 13 02 FB | 	rdlong	arg01, local01
303f8     1C 12 06 F1 | 	add	arg01, #28
303fc                 | ' {
303fc                 | ' 
303fc                 | ' 	return *((DWORD*)ptr);
303fc     09 FB 01 FB | 	rdlong	result1, arg01
30400     14 FB 61 FC | 	wrlong	result1, local02
30404     13 13 02 FB | 	rdlong	arg01, local01
30408     16 12 06 F1 | 	add	arg01, #22
3040c                 | ' {
3040c                 | ' 
3040c                 | ' 	return *((WORD*)ptr);
3040c     09 FB E1 FA | 	rdword	result1, arg01
30410     06 28 06 F1 | 	add	local02, #6
30414     14 FB 51 FC | 	wrword	result1, local02
30418     13 13 02 FB | 	rdlong	arg01, local01
3041c     18 12 06 F1 | 	add	arg01, #24
30420                 | ' {
30420                 | ' 
30420                 | ' 	return *((WORD*)ptr);
30420     09 FB E1 FA | 	rdword	result1, arg01
30424     02 28 86 F1 | 	sub	local02, #2
30428     14 FB 51 FC | 	wrword	result1, local02
3042c                 | LR__4724
3042c     A7 F0 03 F6 | 	mov	ptra, fp
30430     B2 00 A0 FD | 	call	#popregs_
30434                 | _fatfs_cc_get_fileinfo_ret
30434     2D 00 64 FD | 	ret
30438                 | 
30438                 | _fatfs_cc_create_name
30438     0D 4A 05 F6 | 	mov	COUNT_, #13
3043c     A8 00 A0 FD | 	call	#pushregs_
30440     34 F0 07 F1 | 	add	ptra, #52
30444     04 4E 05 F1 | 	add	fp, #4
30448     A7 12 62 FC | 	wrlong	arg01, fp
3044c     04 4E 05 F1 | 	add	fp, #4
30450     A7 14 62 FC | 	wrlong	arg02, fp
30454     0A FB 01 FB | 	rdlong	result1, arg02
30458     28 4E 05 F1 | 	add	fp, #40
3045c     A7 FA 61 FC | 	wrlong	result1, fp
30460     2C 4E 85 F1 | 	sub	fp, #44
30464     A7 FA 01 FB | 	rdlong	result1, fp
30468     FD 26 02 FB | 	rdlong	local01, result1
3046c     0C 26 06 F1 | 	add	local01, #12
30470     13 29 02 FB | 	rdlong	local02, local01
30474     14 4E 05 F1 | 	add	fp, #20
30478     A7 28 62 FC | 	wrlong	local02, fp
3047c     14 4E 05 F1 | 	add	fp, #20
30480     A7 00 68 FC | 	wrlong	#0, fp
30484     2C 4E 85 F1 | 	sub	fp, #44
30488                 | ' 
30488                 | ' 
30488                 | ' 
30488                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
30488                 | ' 	for (;;) {
30488                 | LR__4730
30488     30 4E 05 F1 | 	add	fp, #48
3048c     A7 12 02 F6 | 	mov	arg01, fp
30490     30 4E 85 F1 | 	sub	fp, #48
30494     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
30498     1C 4E 05 F1 | 	add	fp, #28
3049c     A7 FA 61 FC | 	wrlong	result1, fp
304a0     1C 4E 85 F1 | 	sub	fp, #28
304a4     FF FF 7F FF 
304a8     FF FB 0D F2 | 	cmp	result1, ##-1 wz
304ac     06 FA 05 A6 |  if_e	mov	result1, #6
304b0     74 08 90 AD |  if_e	jmp	#LR__4770
304b4     1C 4E 05 F1 | 	add	fp, #28
304b8     A7 26 02 FB | 	rdlong	local01, fp
304bc     1C 4E 85 F1 | 	sub	fp, #28
304c0     80 00 00 FF 
304c4     00 26 16 F2 | 	cmp	local01, ##65536 wc
304c8     3C 00 90 CD |  if_b	jmp	#LR__4731
304cc     18 4E 05 F1 | 	add	fp, #24
304d0     A7 2A 02 FB | 	rdlong	local03, fp
304d4     14 4E 05 F1 | 	add	fp, #20
304d8     A7 26 02 FB | 	rdlong	local01, fp
304dc     13 2D 02 F6 | 	mov	local04, local01
304e0     01 2C 06 F1 | 	add	local04, #1
304e4     A7 2C 62 FC | 	wrlong	local04, fp
304e8     01 26 66 F0 | 	shl	local01, #1
304ec     15 27 02 F1 | 	add	local01, local03
304f0     10 4E 85 F1 | 	sub	fp, #16
304f4     A7 2E 02 FB | 	rdlong	local05, fp
304f8     1C 4E 85 F1 | 	sub	fp, #28
304fc     17 31 02 F6 | 	mov	local06, local05
30500     10 30 46 F0 | 	shr	local06, #16
30504     13 31 52 FC | 	wrword	local06, local01
30508                 | LR__4731
30508     1C 4E 05 F1 | 	add	fp, #28
3050c     A7 26 02 FB | 	rdlong	local01, fp
30510     08 4E 85 F1 | 	sub	fp, #8
30514     A7 26 52 FC | 	wrword	local01, fp
30518     A7 26 E2 FA | 	rdword	local01, fp
3051c     14 4E 85 F1 | 	sub	fp, #20
30520     20 26 16 F2 | 	cmp	local01, #32 wc
30524     B0 00 90 CD |  if_b	jmp	#LR__4733
30528     14 4E 05 F1 | 	add	fp, #20
3052c     A7 26 E2 FA | 	rdword	local01, fp
30530     14 4E 85 F1 | 	sub	fp, #20
30534     2F 26 0E F2 | 	cmp	local01, #47 wz
30538     14 4E 05 51 |  if_ne	add	fp, #20
3053c     A7 2C E2 5A |  if_ne	rdword	local04, fp
30540     14 4E 85 51 |  if_ne	sub	fp, #20
30544     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
30548     8C 00 90 AD |  if_e	jmp	#LR__4733
3054c     14 4E 05 F1 | 	add	fp, #20
30550     A7 12 E2 FA | 	rdword	arg01, fp
30554     14 4E 85 F1 | 	sub	fp, #20
30558     80 12 16 F2 | 	cmp	arg01, #128 wc
3055c     24 00 90 3D |  if_ae	jmp	#LR__4732
30560     B2 01 00 FF 
30564     9C 12 06 F6 | 	mov	arg01, ##@LR__5392
30568     14 4E 05 F1 | 	add	fp, #20
3056c     A7 14 E2 FA | 	rdword	arg02, fp
30570     14 4E 85 F1 | 	sub	fp, #20
30574     FC D0 BF FD | 	call	#_fatfs_cc_strchr
30578     00 FA 0D F2 | 	cmp	result1, #0 wz
3057c     06 FA 05 56 |  if_ne	mov	result1, #6
30580     A4 07 90 5D |  if_ne	jmp	#LR__4770
30584                 | LR__4732
30584     2C 4E 05 F1 | 	add	fp, #44
30588     A7 30 02 FB | 	rdlong	local06, fp
3058c     2C 4E 85 F1 | 	sub	fp, #44
30590     FF 30 16 F2 | 	cmp	local06, #255 wc
30594     06 FA 05 36 |  if_ae	mov	result1, #6
30598     8C 07 90 3D |  if_ae	jmp	#LR__4770
3059c     18 4E 05 F1 | 	add	fp, #24
305a0     A7 2A 02 FB | 	rdlong	local03, fp
305a4     14 4E 05 F1 | 	add	fp, #20
305a8     A7 28 02 FB | 	rdlong	local02, fp
305ac     14 2D 02 F6 | 	mov	local04, local02
305b0     01 2C 06 F1 | 	add	local04, #1
305b4     A7 2C 62 FC | 	wrlong	local04, fp
305b8     14 27 02 F6 | 	mov	local01, local02
305bc     01 26 66 F0 | 	shl	local01, #1
305c0     15 27 02 F1 | 	add	local01, local03
305c4     18 4E 85 F1 | 	sub	fp, #24
305c8     A7 30 E2 FA | 	rdword	local06, fp
305cc     14 4E 85 F1 | 	sub	fp, #20
305d0     13 31 52 FC | 	wrword	local06, local01
305d4     B0 FE 9F FD | 	jmp	#LR__4730
305d8                 | LR__4733
305d8     14 4E 05 F1 | 	add	fp, #20
305dc     A7 32 E2 FA | 	rdword	local07, fp
305e0     14 4E 85 F1 | 	sub	fp, #20
305e4     20 32 16 F2 | 	cmp	local07, #32 wc
305e8     10 4E 05 C1 |  if_b	add	fp, #16
305ec     A7 08 48 CC |  if_b	wrbyte	#4, fp
305f0     10 4E 85 C1 |  if_b	sub	fp, #16
305f4     74 00 90 CD |  if_b	jmp	#LR__4738
305f8     97 24 48 FB | 	callpa	#(@LR__4736-@LR__4734)>>2,fcache_load_ptr_
305fc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
305fc                 | LR__4734
305fc     30 4E 05 F1 | 	add	fp, #48
30600     A7 2C 02 FB | 	rdlong	local04, fp
30604     30 4E 85 F1 | 	sub	fp, #48
30608     16 33 C2 FA | 	rdbyte	local07, local04
3060c     2F 32 0E F2 | 	cmp	local07, #47 wz
30610     18 00 90 AD |  if_e	jmp	#LR__4735
30614     30 4E 05 F1 | 	add	fp, #48
30618     A7 2C 02 FB | 	rdlong	local04, fp
3061c     30 4E 85 F1 | 	sub	fp, #48
30620     16 29 C2 FA | 	rdbyte	local02, local04
30624     5C 28 0E F2 | 	cmp	local02, #92 wz
30628     18 00 90 5D |  if_ne	jmp	#LR__4737
3062c                 | LR__4735
3062c     30 4E 05 F1 | 	add	fp, #48
30630     A7 26 02 FB | 	rdlong	local01, fp
30634     01 26 06 F1 | 	add	local01, #1
30638     A7 26 62 FC | 	wrlong	local01, fp
3063c     30 4E 85 F1 | 	sub	fp, #48
30640     B8 FF 9F FD | 	jmp	#LR__4734
30644                 | LR__4736
30644                 | LR__4737
30644     10 4E 05 F1 | 	add	fp, #16
30648     A7 00 48 FC | 	wrbyte	#0, fp
3064c     20 4E 05 F1 | 	add	fp, #32
30650     A7 30 02 FB | 	rdlong	local06, fp
30654     30 4E 85 F1 | 	sub	fp, #48
30658     18 33 C2 FA | 	rdbyte	local07, local06
3065c     20 32 16 F2 | 	cmp	local07, #32 wc
30660     10 4E 05 C1 |  if_b	add	fp, #16
30664     A7 08 48 CC |  if_b	wrbyte	#4, fp
30668     10 4E 85 C1 |  if_b	sub	fp, #16
3066c                 | LR__4738
3066c     08 4E 05 F1 | 	add	fp, #8
30670     A7 32 02 FB | 	rdlong	local07, fp
30674     28 4E 05 F1 | 	add	fp, #40
30678     A7 26 02 FB | 	rdlong	local01, fp
3067c     30 4E 85 F1 | 	sub	fp, #48
30680     19 27 62 FC | 	wrlong	local01, local07
30684     97 38 48 FB | 	callpa	#(@LR__4740-@LR__4739)>>2,fcache_load_ptr_
30688                 | ' 	}
30688                 | ' 	*path = p;
30688                 | ' #line 2862 "ff.c"
30688                 | ' 	while (di) {
30688                 | LR__4739
30688     2C 4E 05 F1 | 	add	fp, #44
3068c     A7 32 0A FB | 	rdlong	local07, fp wz
30690     2C 4E 85 F1 | 	sub	fp, #44
30694     60 00 90 AD |  if_e	jmp	#LR__4741
30698     18 4E 05 F1 | 	add	fp, #24
3069c     A7 30 02 FB | 	rdlong	local06, fp
306a0     14 4E 05 F1 | 	add	fp, #20
306a4     A7 2C 02 FB | 	rdlong	local04, fp
306a8     01 2C 86 F1 | 	sub	local04, #1
306ac     01 2C 66 F0 | 	shl	local04, #1
306b0     18 2D 02 F1 | 	add	local04, local06
306b4     16 31 E2 FA | 	rdword	local06, local04
306b8     18 4E 85 F1 | 	sub	fp, #24
306bc     A7 30 52 FC | 	wrword	local06, fp
306c0     A7 32 E2 FA | 	rdword	local07, fp
306c4     14 4E 85 F1 | 	sub	fp, #20
306c8     20 32 0E F2 | 	cmp	local07, #32 wz
306cc     14 4E 05 51 |  if_ne	add	fp, #20
306d0     A7 26 E2 5A |  if_ne	rdword	local01, fp
306d4     14 4E 85 51 |  if_ne	sub	fp, #20
306d8     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
306dc     18 00 90 5D |  if_ne	jmp	#LR__4741
306e0     2C 4E 05 F1 | 	add	fp, #44
306e4     A7 26 02 FB | 	rdlong	local01, fp
306e8     01 26 86 F1 | 	sub	local01, #1
306ec     A7 26 62 FC | 	wrlong	local01, fp
306f0     2C 4E 85 F1 | 	sub	fp, #44
306f4     90 FF 9F FD | 	jmp	#LR__4739
306f8                 | LR__4740
306f8                 | LR__4741
306f8     18 4E 05 F1 | 	add	fp, #24
306fc     A7 34 02 FB | 	rdlong	local08, fp
30700     14 4E 05 F1 | 	add	fp, #20
30704     A7 2C 02 FB | 	rdlong	local04, fp
30708     01 2C 66 F0 | 	shl	local04, #1
3070c     1A 2D 02 F1 | 	add	local04, local08
30710     16 01 58 FC | 	wrword	#0, local04
30714     A7 32 0A FB | 	rdlong	local07, fp wz
30718     2C 4E 85 F1 | 	sub	fp, #44
3071c     06 FA 05 A6 |  if_e	mov	result1, #6
30720     04 06 90 AD |  if_e	jmp	#LR__4770
30724                 | ' 
30724                 | ' 
30724                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
30724     28 4E 05 F1 | 	add	fp, #40
30728     A7 00 68 FC | 	wrlong	#0, fp
3072c     28 4E 85 F1 | 	sub	fp, #40
30730     97 22 48 FB | 	callpa	#(@LR__4743-@LR__4742)>>2,fcache_load_ptr_
30734                 | LR__4742
30734     18 4E 05 F1 | 	add	fp, #24
30738     A7 36 02 FB | 	rdlong	local09, fp
3073c     10 4E 05 F1 | 	add	fp, #16
30740     A7 38 02 FB | 	rdlong	local10, fp
30744     28 4E 85 F1 | 	sub	fp, #40
30748     01 38 66 F0 | 	shl	local10, #1
3074c     1B 39 02 F1 | 	add	local10, local09
30750     1C 3B E2 FA | 	rdword	local11, local10
30754     20 3A 0E F2 | 	cmp	local11, #32 wz
30758     1C 00 90 5D |  if_ne	jmp	#LR__4744
3075c     28 4E 05 F1 | 	add	fp, #40
30760     A7 3C 02 FB | 	rdlong	local12, fp
30764     1E 2F 02 F6 | 	mov	local05, local12
30768     01 2E 06 F1 | 	add	local05, #1
3076c     A7 2E 62 FC | 	wrlong	local05, fp
30770     28 4E 85 F1 | 	sub	fp, #40
30774     BC FF 9F FD | 	jmp	#LR__4742
30778                 | LR__4743
30778                 | LR__4744
30778     28 4E 05 F1 | 	add	fp, #40
3077c     A7 32 02 FB | 	rdlong	local07, fp
30780     28 4E 85 F1 | 	sub	fp, #40
30784     01 32 16 F2 | 	cmp	local07, #1 wc
30788     28 00 90 3D |  if_ae	jmp	#LR__4745
3078c     18 4E 05 F1 | 	add	fp, #24
30790     A7 2A 02 FB | 	rdlong	local03, fp
30794     10 4E 05 F1 | 	add	fp, #16
30798     A7 36 02 FB | 	rdlong	local09, fp
3079c     28 4E 85 F1 | 	sub	fp, #40
307a0     01 36 66 F0 | 	shl	local09, #1
307a4     15 37 02 F1 | 	add	local09, local03
307a8     1B 27 E2 FA | 	rdword	local01, local09
307ac     2E 26 0E F2 | 	cmp	local01, #46 wz
307b0     14 00 90 5D |  if_ne	jmp	#LR__4746
307b4                 | LR__4745
307b4     10 4E 05 F1 | 	add	fp, #16
307b8     A7 32 C2 FA | 	rdbyte	local07, fp
307bc     03 32 46 F5 | 	or	local07, #3
307c0     A7 32 42 FC | 	wrbyte	local07, fp
307c4     10 4E 85 F1 | 	sub	fp, #16
307c8                 | LR__4746
307c8     97 2C 48 FB | 	callpa	#(@LR__4748-@LR__4747)>>2,fcache_load_ptr_
307cc                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
307cc                 | LR__4747
307cc     2C 4E 05 F1 | 	add	fp, #44
307d0     A7 32 02 FB | 	rdlong	local07, fp
307d4     2C 4E 85 F1 | 	sub	fp, #44
307d8     01 32 16 F2 | 	cmp	local07, #1 wc
307dc     44 00 90 CD |  if_b	jmp	#LR__4749
307e0     18 4E 05 F1 | 	add	fp, #24
307e4     A7 30 02 FB | 	rdlong	local06, fp
307e8     14 4E 05 F1 | 	add	fp, #20
307ec     A7 2A 02 FB | 	rdlong	local03, fp
307f0     2C 4E 85 F1 | 	sub	fp, #44
307f4     01 2A 86 F1 | 	sub	local03, #1
307f8     01 2A 66 F0 | 	shl	local03, #1
307fc     18 2B 02 F1 | 	add	local03, local06
30800     15 27 E2 FA | 	rdword	local01, local03
30804     2E 26 0E F2 | 	cmp	local01, #46 wz
30808     18 00 90 AD |  if_e	jmp	#LR__4749
3080c     2C 4E 05 F1 | 	add	fp, #44
30810     A7 26 02 FB | 	rdlong	local01, fp
30814     01 26 86 F1 | 	sub	local01, #1
30818     A7 26 62 FC | 	wrlong	local01, fp
3081c     2C 4E 85 F1 | 	sub	fp, #44
30820     A8 FF 9F FD | 	jmp	#LR__4747
30824                 | LR__4748
30824                 | LR__4749
30824     04 4E 05 F1 | 	add	fp, #4
30828     A7 12 02 FB | 	rdlong	arg01, fp
3082c     04 4E 85 F1 | 	sub	fp, #4
30830     20 12 06 F1 | 	add	arg01, #32
30834     20 14 06 F6 | 	mov	arg02, #32
30838     0B 16 06 F6 | 	mov	arg03, #11
3083c     09 3F 02 F6 | 	mov	local13, arg01
30840     98 00 A0 FD | 	call	#\builtin_bytefill_
30844     1F FB 01 F6 | 	mov	result1, local13
30848     0C 4E 05 F1 | 	add	fp, #12
3084c     A7 00 48 FC | 	wrbyte	#0, fp
30850     A7 32 C2 FA | 	rdbyte	local07, fp
30854     14 4E 05 F1 | 	add	fp, #20
30858     A7 32 62 FC | 	wrlong	local07, fp
3085c     04 4E 05 F1 | 	add	fp, #4
30860     A7 10 68 FC | 	wrlong	#8, fp
30864     24 4E 85 F1 | 	sub	fp, #36
30868                 | ' 
30868                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
30868                 | ' 	i = b = 0; ni = 8;
30868                 | ' 	for (;;) {
30868                 | LR__4750
30868     18 4E 05 F1 | 	add	fp, #24
3086c     A7 2A 02 FB | 	rdlong	local03, fp
30870     10 4E 05 F1 | 	add	fp, #16
30874     A7 36 02 FB | 	rdlong	local09, fp
30878     1B 2D 02 F6 | 	mov	local04, local09
3087c     01 2C 06 F1 | 	add	local04, #1
30880     A7 2C 62 FC | 	wrlong	local04, fp
30884     01 36 66 F0 | 	shl	local09, #1
30888     15 37 02 F1 | 	add	local09, local03
3088c     1B 31 E2 FA | 	rdword	local06, local09
30890     14 4E 85 F1 | 	sub	fp, #20
30894     A7 30 52 FC | 	wrword	local06, fp
30898     A7 32 EA FA | 	rdword	local07, fp wz
3089c     14 4E 85 F1 | 	sub	fp, #20
308a0     74 03 90 AD |  if_e	jmp	#LR__4766
308a4     14 4E 05 F1 | 	add	fp, #20
308a8     A7 32 E2 FA | 	rdword	local07, fp
308ac     14 4E 85 F1 | 	sub	fp, #20
308b0     20 32 0E F2 | 	cmp	local07, #32 wz
308b4     30 00 90 AD |  if_e	jmp	#LR__4751
308b8     14 4E 05 F1 | 	add	fp, #20
308bc     A7 26 E2 FA | 	rdword	local01, fp
308c0     14 4E 85 F1 | 	sub	fp, #20
308c4     2E 26 0E F2 | 	cmp	local01, #46 wz
308c8     34 00 90 5D |  if_ne	jmp	#LR__4752
308cc     28 4E 05 F1 | 	add	fp, #40
308d0     A7 2C 02 FB | 	rdlong	local04, fp
308d4     04 4E 05 F1 | 	add	fp, #4
308d8     A7 38 02 FB | 	rdlong	local10, fp
308dc     2C 4E 85 F1 | 	sub	fp, #44
308e0     1C 2D 0A F2 | 	cmp	local04, local10 wz
308e4     18 00 90 AD |  if_e	jmp	#LR__4752
308e8                 | LR__4751
308e8     10 4E 05 F1 | 	add	fp, #16
308ec     A7 32 C2 FA | 	rdbyte	local07, fp
308f0     03 32 46 F5 | 	or	local07, #3
308f4     A7 32 42 FC | 	wrbyte	local07, fp
308f8     10 4E 85 F1 | 	sub	fp, #16
308fc                 | ' 			cf |=  0x01  |  0x02 ;
308fc                 | ' 			continue;
308fc     68 FF 9F FD | 	jmp	#LR__4750
30900                 | LR__4752
30900     20 4E 05 F1 | 	add	fp, #32
30904     A7 32 02 FB | 	rdlong	local07, fp
30908     04 4E 05 F1 | 	add	fp, #4
3090c     A7 26 02 FB | 	rdlong	local01, fp
30910     24 4E 85 F1 | 	sub	fp, #36
30914     13 33 12 F2 | 	cmp	local07, local01 wc
30918     1C 00 90 3D |  if_ae	jmp	#LR__4753
3091c     28 4E 05 F1 | 	add	fp, #40
30920     A7 34 02 FB | 	rdlong	local08, fp
30924     04 4E 05 F1 | 	add	fp, #4
30928     A7 38 02 FB | 	rdlong	local10, fp
3092c     2C 4E 85 F1 | 	sub	fp, #44
30930     1C 35 0A F2 | 	cmp	local08, local10 wz
30934     B0 00 90 5D |  if_ne	jmp	#LR__4755
30938                 | LR__4753
30938     24 4E 05 F1 | 	add	fp, #36
3093c     A7 32 02 FB | 	rdlong	local07, fp
30940     24 4E 85 F1 | 	sub	fp, #36
30944     0B 32 0E F2 | 	cmp	local07, #11 wz
30948     18 00 90 5D |  if_ne	jmp	#LR__4754
3094c     10 4E 05 F1 | 	add	fp, #16
30950     A7 32 C2 FA | 	rdbyte	local07, fp
30954     03 32 46 F5 | 	or	local07, #3
30958     A7 32 42 FC | 	wrbyte	local07, fp
3095c     10 4E 85 F1 | 	sub	fp, #16
30960                 | ' 				cf |=  0x01  |  0x02 ;
30960                 | ' 				break;
30960     B4 02 90 FD | 	jmp	#LR__4766
30964                 | LR__4754
30964     28 4E 05 F1 | 	add	fp, #40
30968     A7 32 02 FB | 	rdlong	local07, fp
3096c     04 4E 05 F1 | 	add	fp, #4
30970     A7 26 02 FB | 	rdlong	local01, fp
30974     2C 4E 85 F1 | 	sub	fp, #44
30978     13 33 0A F2 | 	cmp	local07, local01 wz
3097c     10 4E 05 51 |  if_ne	add	fp, #16
30980     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30984     03 32 46 55 |  if_ne	or	local07, #3
30988     A7 32 42 5C |  if_ne	wrbyte	local07, fp
3098c     10 4E 85 51 |  if_ne	sub	fp, #16
30990     28 4E 05 F1 | 	add	fp, #40
30994     A7 32 02 FB | 	rdlong	local07, fp
30998     04 4E 05 F1 | 	add	fp, #4
3099c     A7 28 02 FB | 	rdlong	local02, fp
309a0     2C 4E 85 F1 | 	sub	fp, #44
309a4     14 33 1A F2 | 	cmp	local07, local02 wcz
309a8     6C 02 90 1D |  if_a	jmp	#LR__4766
309ac     2C 4E 05 F1 | 	add	fp, #44
309b0     A7 32 02 FB | 	rdlong	local07, fp
309b4     04 4E 85 F1 | 	sub	fp, #4
309b8     A7 32 62 FC | 	wrlong	local07, fp
309bc     08 4E 85 F1 | 	sub	fp, #8
309c0     A7 10 68 FC | 	wrlong	#8, fp
309c4     04 4E 05 F1 | 	add	fp, #4
309c8     A7 16 68 FC | 	wrlong	#11, fp
309cc     18 4E 85 F1 | 	sub	fp, #24
309d0     A7 3A C2 FA | 	rdbyte	local11, fp
309d4     1D 33 E2 F8 | 	getbyte	local07, local11, #0
309d8     02 32 66 F0 | 	shl	local07, #2
309dc     A7 32 42 FC | 	wrbyte	local07, fp
309e0     0C 4E 85 F1 | 	sub	fp, #12
309e4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
309e4                 | ' 			continue;
309e4     80 FE 9F FD | 	jmp	#LR__4750
309e8                 | LR__4755
309e8     14 4E 05 F1 | 	add	fp, #20
309ec     A7 32 E2 FA | 	rdword	local07, fp
309f0     14 4E 85 F1 | 	sub	fp, #20
309f4     80 32 16 F2 | 	cmp	local07, #128 wc
309f8     6C 00 90 CD |  if_b	jmp	#LR__4757
309fc     10 4E 05 F1 | 	add	fp, #16
30a00     A7 32 C2 FA | 	rdbyte	local07, fp
30a04     02 32 46 F5 | 	or	local07, #2
30a08     A7 32 42 FC | 	wrbyte	local07, fp
30a0c     04 4E 05 F1 | 	add	fp, #4
30a10     A7 12 E2 FA | 	rdword	arg01, fp
30a14     14 4E 85 F1 | 	sub	fp, #20
30a18     01 00 00 FF 
30a1c     52 15 06 F6 | 	mov	arg02, ##850
30a20     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
30a24     14 4E 05 F1 | 	add	fp, #20
30a28     A7 FA 51 FC | 	wrword	result1, fp
30a2c     A7 32 E2 FA | 	rdword	local07, fp
30a30     14 4E 85 F1 | 	sub	fp, #20
30a34     80 32 CE F7 | 	test	local07, #128 wz
30a38     2C 00 90 AD |  if_e	jmp	#LR__4756
30a3c     14 4E 05 F1 | 	add	fp, #20
30a40     A7 28 E2 FA | 	rdword	local02, fp
30a44     7F 28 06 F5 | 	and	local02, #127
30a48     01 00 00 FF 
30a4c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
30a50     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
30a54     14 33 C2 FA | 	rdbyte	local07, local02
30a58     A7 32 52 FC | 	wrword	local07, fp
30a5c     14 4E 85 F1 | 	sub	fp, #20
30a60     01 00 00 FF 
30a64     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
30a68                 | LR__4756
30a68                 | LR__4757
30a68     14 4E 05 F1 | 	add	fp, #20
30a6c     A7 32 E2 FA | 	rdword	local07, fp
30a70     14 4E 85 F1 | 	sub	fp, #20
30a74     00 33 16 F2 | 	cmp	local07, #256 wc
30a78     88 00 90 CD |  if_b	jmp	#LR__4759
30a7c     24 4E 05 F1 | 	add	fp, #36
30a80     A7 32 02 FB | 	rdlong	local07, fp
30a84     01 32 86 F1 | 	sub	local07, #1
30a88     04 4E 85 F1 | 	sub	fp, #4
30a8c     A7 28 02 FB | 	rdlong	local02, fp
30a90     20 4E 85 F1 | 	sub	fp, #32
30a94     19 29 12 F2 | 	cmp	local02, local07 wc
30a98     2C 00 90 CD |  if_b	jmp	#LR__4758
30a9c     10 4E 05 F1 | 	add	fp, #16
30aa0     A7 3A C2 FA | 	rdbyte	local11, fp
30aa4     1D 33 E2 F8 | 	getbyte	local07, local11, #0
30aa8     03 32 46 F5 | 	or	local07, #3
30aac     A7 32 42 FC | 	wrbyte	local07, fp
30ab0     14 4E 05 F1 | 	add	fp, #20
30ab4     A7 32 02 FB | 	rdlong	local07, fp
30ab8     04 4E 85 F1 | 	sub	fp, #4
30abc     A7 32 62 FC | 	wrlong	local07, fp
30ac0     20 4E 85 F1 | 	sub	fp, #32
30ac4                 | ' 				cf |=  0x01  |  0x02 ;
30ac4                 | ' 				i = ni; continue;
30ac4     A0 FD 9F FD | 	jmp	#LR__4750
30ac8                 | LR__4758
30ac8     04 4E 05 F1 | 	add	fp, #4
30acc     A7 36 02 FB | 	rdlong	local09, fp
30ad0     1C 4E 05 F1 | 	add	fp, #28
30ad4     A7 38 02 FB | 	rdlong	local10, fp
30ad8     1C 2D 02 F6 | 	mov	local04, local10
30adc     01 2C 06 F1 | 	add	local04, #1
30ae0     A7 2C 62 FC | 	wrlong	local04, fp
30ae4     20 36 06 F1 | 	add	local09, #32
30ae8     1B 39 02 F1 | 	add	local10, local09
30aec     0C 4E 85 F1 | 	sub	fp, #12
30af0     A7 2A E2 FA | 	rdword	local03, fp
30af4     14 4E 85 F1 | 	sub	fp, #20
30af8     08 2A 46 F0 | 	shr	local03, #8
30afc     1C 2B 42 FC | 	wrbyte	local03, local10
30b00     D4 00 90 FD | 	jmp	#LR__4765
30b04                 | LR__4759
30b04     14 4E 05 F1 | 	add	fp, #20
30b08     A7 32 EA FA | 	rdword	local07, fp wz
30b0c     14 4E 85 F1 | 	sub	fp, #20
30b10     20 00 90 AD |  if_e	jmp	#LR__4760
30b14     B2 01 00 FF 
30b18     A5 12 06 F6 | 	mov	arg01, ##@LR__5393
30b1c     14 4E 05 F1 | 	add	fp, #20
30b20     A7 14 E2 FA | 	rdword	arg02, fp
30b24     14 4E 85 F1 | 	sub	fp, #20
30b28     48 CB BF FD | 	call	#_fatfs_cc_strchr
30b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
30b30     20 00 90 AD |  if_e	jmp	#LR__4761
30b34                 | LR__4760
30b34     14 4E 05 F1 | 	add	fp, #20
30b38     A7 BE 58 FC | 	wrword	#95, fp
30b3c     04 4E 85 F1 | 	sub	fp, #4
30b40     A7 32 C2 FA | 	rdbyte	local07, fp
30b44     03 32 46 F5 | 	or	local07, #3
30b48     A7 32 42 FC | 	wrbyte	local07, fp
30b4c     10 4E 85 F1 | 	sub	fp, #16
30b50     84 00 90 FD | 	jmp	#LR__4764
30b54                 | LR__4761
30b54     14 4E 05 F1 | 	add	fp, #20
30b58     A7 32 E2 FA | 	rdword	local07, fp
30b5c     14 4E 85 F1 | 	sub	fp, #20
30b60     41 32 16 F2 | 	cmp	local07, #65 wc
30b64     24 00 90 CD |  if_b	jmp	#LR__4762
30b68     14 4E 05 F1 | 	add	fp, #20
30b6c     A7 26 E2 FA | 	rdword	local01, fp
30b70     14 4E 85 F1 | 	sub	fp, #20
30b74     5B 26 16 F2 | 	cmp	local01, #91 wc
30b78     0C 4E 05 C1 |  if_b	add	fp, #12
30b7c     A7 32 C2 CA |  if_b	rdbyte	local07, fp
30b80     02 32 46 C5 |  if_b	or	local07, #2
30b84     A7 32 42 CC |  if_b	wrbyte	local07, fp
30b88     0C 4E 85 C1 |  if_b	sub	fp, #12
30b8c                 | LR__4762
30b8c     14 4E 05 F1 | 	add	fp, #20
30b90     A7 32 E2 FA | 	rdword	local07, fp
30b94     14 4E 85 F1 | 	sub	fp, #20
30b98     61 32 16 F2 | 	cmp	local07, #97 wc
30b9c     38 00 90 CD |  if_b	jmp	#LR__4763
30ba0     14 4E 05 F1 | 	add	fp, #20
30ba4     A7 26 E2 FA | 	rdword	local01, fp
30ba8     14 4E 85 F1 | 	sub	fp, #20
30bac     7B 26 16 F2 | 	cmp	local01, #123 wc
30bb0     24 00 90 3D |  if_ae	jmp	#LR__4763
30bb4     0C 4E 05 F1 | 	add	fp, #12
30bb8     A7 32 C2 FA | 	rdbyte	local07, fp
30bbc     01 32 46 F5 | 	or	local07, #1
30bc0     A7 32 42 FC | 	wrbyte	local07, fp
30bc4     08 4E 05 F1 | 	add	fp, #8
30bc8     A7 32 E2 FA | 	rdword	local07, fp
30bcc     20 32 86 F1 | 	sub	local07, #32
30bd0     A7 32 52 FC | 	wrword	local07, fp
30bd4     14 4E 85 F1 | 	sub	fp, #20
30bd8                 | LR__4763
30bd8                 | LR__4764
30bd8                 | LR__4765
30bd8     04 4E 05 F1 | 	add	fp, #4
30bdc     A7 3A 02 FB | 	rdlong	local11, fp
30be0     1D 37 02 F6 | 	mov	local09, local11
30be4     1C 4E 05 F1 | 	add	fp, #28
30be8     A7 28 02 FB | 	rdlong	local02, fp
30bec     14 2D 02 F6 | 	mov	local04, local02
30bf0     01 2C 06 F1 | 	add	local04, #1
30bf4     A7 2C 62 FC | 	wrlong	local04, fp
30bf8     14 39 02 F6 | 	mov	local10, local02
30bfc     20 36 06 F1 | 	add	local09, #32
30c00     1B 39 02 F1 | 	add	local10, local09
30c04     0C 4E 85 F1 | 	sub	fp, #12
30c08     A7 2A E2 FA | 	rdword	local03, fp
30c0c     14 4E 85 F1 | 	sub	fp, #20
30c10     1C 2B 42 FC | 	wrbyte	local03, local10
30c14     50 FC 9F FD | 	jmp	#LR__4750
30c18                 | LR__4766
30c18     04 4E 05 F1 | 	add	fp, #4
30c1c     A7 3A 02 FB | 	rdlong	local11, fp
30c20     04 4E 85 F1 | 	sub	fp, #4
30c24     20 3A 06 F1 | 	add	local11, #32
30c28     1D 33 C2 FA | 	rdbyte	local07, local11
30c2c     E5 32 0E F2 | 	cmp	local07, #229 wz
30c30     04 4E 05 A1 |  if_e	add	fp, #4
30c34     A7 32 02 AB |  if_e	rdlong	local07, fp
30c38     04 4E 85 A1 |  if_e	sub	fp, #4
30c3c     20 32 06 A1 |  if_e	add	local07, #32
30c40     19 0B 48 AC |  if_e	wrbyte	#5, local07
30c44     24 4E 05 F1 | 	add	fp, #36
30c48     A7 32 02 FB | 	rdlong	local07, fp
30c4c     24 4E 85 F1 | 	sub	fp, #36
30c50     08 32 0E F2 | 	cmp	local07, #8 wz
30c54     0C 4E 05 A1 |  if_e	add	fp, #12
30c58     A7 32 C2 AA |  if_e	rdbyte	local07, fp
30c5c     02 32 66 A0 |  if_e	shl	local07, #2
30c60     A7 32 42 AC |  if_e	wrbyte	local07, fp
30c64     0C 4E 85 A1 |  if_e	sub	fp, #12
30c68     0C 4E 05 F1 | 	add	fp, #12
30c6c     A7 32 C2 FA | 	rdbyte	local07, fp
30c70     0C 4E 85 F1 | 	sub	fp, #12
30c74     0C 32 06 F5 | 	and	local07, #12
30c78     0C 32 0E F2 | 	cmp	local07, #12 wz
30c7c     18 00 90 AD |  if_e	jmp	#LR__4767
30c80     0C 4E 05 F1 | 	add	fp, #12
30c84     A7 26 C2 FA | 	rdbyte	local01, fp
30c88     0C 4E 85 F1 | 	sub	fp, #12
30c8c     03 26 06 F5 | 	and	local01, #3
30c90     03 26 0E F2 | 	cmp	local01, #3 wz
30c94     14 00 90 5D |  if_ne	jmp	#LR__4768
30c98                 | LR__4767
30c98     10 4E 05 F1 | 	add	fp, #16
30c9c     A7 32 C2 FA | 	rdbyte	local07, fp
30ca0     02 32 46 F5 | 	or	local07, #2
30ca4     A7 32 42 FC | 	wrbyte	local07, fp
30ca8     10 4E 85 F1 | 	sub	fp, #16
30cac                 | LR__4768
30cac     10 4E 05 F1 | 	add	fp, #16
30cb0     A7 32 C2 FA | 	rdbyte	local07, fp
30cb4     10 4E 85 F1 | 	sub	fp, #16
30cb8     02 32 CE F7 | 	test	local07, #2 wz
30cbc     48 00 90 5D |  if_ne	jmp	#LR__4769
30cc0     0C 4E 05 F1 | 	add	fp, #12
30cc4     A7 32 C2 FA | 	rdbyte	local07, fp
30cc8     0C 4E 85 F1 | 	sub	fp, #12
30ccc     01 32 CE F7 | 	test	local07, #1 wz
30cd0     10 4E 05 51 |  if_ne	add	fp, #16
30cd4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30cd8     10 32 46 55 |  if_ne	or	local07, #16
30cdc     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30ce0     10 4E 85 51 |  if_ne	sub	fp, #16
30ce4     0C 4E 05 F1 | 	add	fp, #12
30ce8     A7 32 C2 FA | 	rdbyte	local07, fp
30cec     0C 4E 85 F1 | 	sub	fp, #12
30cf0     04 32 CE F7 | 	test	local07, #4 wz
30cf4     10 4E 05 51 |  if_ne	add	fp, #16
30cf8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
30cfc     08 32 46 55 |  if_ne	or	local07, #8
30d00     A7 32 42 5C |  if_ne	wrbyte	local07, fp
30d04     10 4E 85 51 |  if_ne	sub	fp, #16
30d08                 | LR__4769
30d08     04 4E 05 F1 | 	add	fp, #4
30d0c     A7 32 02 FB | 	rdlong	local07, fp
30d10     0C 4E 05 F1 | 	add	fp, #12
30d14     A7 26 C2 FA | 	rdbyte	local01, fp
30d18     10 4E 85 F1 | 	sub	fp, #16
30d1c     2B 32 06 F1 | 	add	local07, #43
30d20     19 27 42 FC | 	wrbyte	local01, local07
30d24                 | ' 	}
30d24                 | ' 
30d24                 | ' 	dp->fn[ 11 ] = cf;
30d24                 | ' 
30d24                 | ' 	return FR_OK;
30d24     00 FA 05 F6 | 	mov	result1, #0
30d28                 | LR__4770
30d28     A7 F0 03 F6 | 	mov	ptra, fp
30d2c     B2 00 A0 FD | 	call	#popregs_
30d30                 | _fatfs_cc_create_name_ret
30d30     2D 00 64 FD | 	ret
30d34                 | 
30d34                 | _fatfs_cc_follow_path
30d34     02 4A 05 F6 | 	mov	COUNT_, #2
30d38     A8 00 A0 FD | 	call	#pushregs_
30d3c     18 F0 07 F1 | 	add	ptra, #24
30d40     04 4E 05 F1 | 	add	fp, #4
30d44     A7 12 62 FC | 	wrlong	arg01, fp
30d48     04 4E 05 F1 | 	add	fp, #4
30d4c     A7 14 62 FC | 	wrlong	arg02, fp
30d50     04 4E 85 F1 | 	sub	fp, #4
30d54     A7 FA 01 FB | 	rdlong	result1, fp
30d58     FD 26 02 FB | 	rdlong	local01, result1
30d5c     10 4E 05 F1 | 	add	fp, #16
30d60     A7 26 62 FC | 	wrlong	local01, fp
30d64     14 4E 85 F1 | 	sub	fp, #20
30d68     97 24 48 FB | 	callpa	#(@LR__4782-@LR__4780)>>2,fcache_load_ptr_
30d6c                 | ' )
30d6c                 | ' {
30d6c                 | ' 	FRESULT res;
30d6c                 | ' 	BYTE ns;
30d6c                 | ' 	FATFS *fs = dp->obj.fs;
30d6c                 | ' #line 3034 "ff.c"
30d6c                 | ' 	{
30d6c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
30d6c                 | LR__4780
30d6c     08 4E 05 F1 | 	add	fp, #8
30d70     A7 26 02 FB | 	rdlong	local01, fp
30d74     08 4E 85 F1 | 	sub	fp, #8
30d78     13 27 C2 FA | 	rdbyte	local01, local01
30d7c     2F 26 0E F2 | 	cmp	local01, #47 wz
30d80     18 00 90 AD |  if_e	jmp	#LR__4781
30d84     08 4E 05 F1 | 	add	fp, #8
30d88     A7 26 02 FB | 	rdlong	local01, fp
30d8c     08 4E 85 F1 | 	sub	fp, #8
30d90     13 27 C2 FA | 	rdbyte	local01, local01
30d94     5C 26 0E F2 | 	cmp	local01, #92 wz
30d98     18 00 90 5D |  if_ne	jmp	#LR__4783
30d9c                 | LR__4781
30d9c     08 4E 05 F1 | 	add	fp, #8
30da0     A7 26 02 FB | 	rdlong	local01, fp
30da4     01 26 06 F1 | 	add	local01, #1
30da8     A7 26 62 FC | 	wrlong	local01, fp
30dac     08 4E 85 F1 | 	sub	fp, #8
30db0     B8 FF 9F FD | 	jmp	#LR__4780
30db4                 | LR__4782
30db4                 | LR__4783
30db4     04 4E 05 F1 | 	add	fp, #4
30db8     A7 26 02 FB | 	rdlong	local01, fp
30dbc     08 26 06 F1 | 	add	local01, #8
30dc0     13 01 68 FC | 	wrlong	#0, local01
30dc4     04 4E 05 F1 | 	add	fp, #4
30dc8     A7 26 02 FB | 	rdlong	local01, fp
30dcc     08 4E 85 F1 | 	sub	fp, #8
30dd0     13 27 C2 FA | 	rdbyte	local01, local01
30dd4     20 26 16 F2 | 	cmp	local01, #32 wc
30dd8     30 00 90 3D |  if_ae	jmp	#LR__4784
30ddc     04 4E 05 F1 | 	add	fp, #4
30de0     A7 26 02 FB | 	rdlong	local01, fp
30de4     2B 26 06 F1 | 	add	local01, #43
30de8     13 01 49 FC | 	wrbyte	#128, local01
30dec     A7 12 02 FB | 	rdlong	arg01, fp
30df0     04 4E 85 F1 | 	sub	fp, #4
30df4     00 14 06 F6 | 	mov	arg02, #0
30df8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
30dfc     0C 4E 05 F1 | 	add	fp, #12
30e00     A7 FA 61 FC | 	wrlong	result1, fp
30e04     0C 4E 85 F1 | 	sub	fp, #12
30e08     1C 01 90 FD | 	jmp	#LR__4788
30e0c                 | LR__4784
30e0c                 | ' 		for (;;) {
30e0c                 | LR__4785
30e0c     04 4E 05 F1 | 	add	fp, #4
30e10     A7 12 02 FB | 	rdlong	arg01, fp
30e14     04 4E 05 F1 | 	add	fp, #4
30e18     A7 14 02 F6 | 	mov	arg02, fp
30e1c     08 4E 85 F1 | 	sub	fp, #8
30e20     14 F6 BF FD | 	call	#_fatfs_cc_create_name
30e24     0C 4E 05 F1 | 	add	fp, #12
30e28     A7 FA 61 FC | 	wrlong	result1, fp
30e2c     00 FA 4D F2 | 	cmps	result1, #0 wz
30e30     0C 4E 85 F1 | 	sub	fp, #12
30e34     F0 00 90 5D |  if_ne	jmp	#LR__4787
30e38     04 4E 05 F1 | 	add	fp, #4
30e3c     A7 12 02 FB | 	rdlong	arg01, fp
30e40     04 4E 85 F1 | 	sub	fp, #4
30e44     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
30e48     0C 4E 05 F1 | 	add	fp, #12
30e4c     A7 FA 61 FC | 	wrlong	result1, fp
30e50     08 4E 85 F1 | 	sub	fp, #8
30e54     A7 26 02 FB | 	rdlong	local01, fp
30e58     2B 26 06 F1 | 	add	local01, #43
30e5c     13 27 C2 FA | 	rdbyte	local01, local01
30e60     0C 4E 05 F1 | 	add	fp, #12
30e64     A7 26 42 FC | 	wrbyte	local01, fp
30e68     04 4E 85 F1 | 	sub	fp, #4
30e6c     A7 26 0A FB | 	rdlong	local01, fp wz
30e70     0C 4E 85 F1 | 	sub	fp, #12
30e74     34 00 90 AD |  if_e	jmp	#LR__4786
30e78     0C 4E 05 F1 | 	add	fp, #12
30e7c     A7 26 02 FB | 	rdlong	local01, fp
30e80     0C 4E 85 F1 | 	sub	fp, #12
30e84     04 26 0E F2 | 	cmp	local01, #4 wz
30e88     9C 00 90 5D |  if_ne	jmp	#LR__4787
30e8c     10 4E 05 F1 | 	add	fp, #16
30e90     A7 26 C2 FA | 	rdbyte	local01, fp
30e94     10 4E 85 F1 | 	sub	fp, #16
30e98     04 26 CE F7 | 	test	local01, #4 wz
30e9c     0C 4E 05 A1 |  if_e	add	fp, #12
30ea0     A7 0A 68 AC |  if_e	wrlong	#5, fp
30ea4     0C 4E 85 A1 |  if_e	sub	fp, #12
30ea8                 | ' 					}
30ea8                 | ' 				}
30ea8                 | ' 				break;
30ea8     7C 00 90 FD | 	jmp	#LR__4787
30eac                 | LR__4786
30eac     10 4E 05 F1 | 	add	fp, #16
30eb0     A7 26 C2 FA | 	rdbyte	local01, fp
30eb4     10 4E 85 F1 | 	sub	fp, #16
30eb8     04 26 CE F7 | 	test	local01, #4 wz
30ebc     68 00 90 5D |  if_ne	jmp	#LR__4787
30ec0     04 4E 05 F1 | 	add	fp, #4
30ec4     A7 26 02 FB | 	rdlong	local01, fp
30ec8     04 4E 85 F1 | 	sub	fp, #4
30ecc     06 26 06 F1 | 	add	local01, #6
30ed0     13 27 C2 FA | 	rdbyte	local01, local01
30ed4     10 26 CE F7 | 	test	local01, #16 wz
30ed8     0C 4E 05 A1 |  if_e	add	fp, #12
30edc     A7 0A 68 AC |  if_e	wrlong	#5, fp
30ee0     0C 4E 85 A1 |  if_e	sub	fp, #12
30ee4                 | ' 				res = FR_NO_PATH; break;
30ee4     40 00 90 AD |  if_e	jmp	#LR__4787
30ee8     04 4E 05 F1 | 	add	fp, #4
30eec     A7 28 02 FB | 	rdlong	local02, fp
30ef0     14 27 02 F6 | 	mov	local01, local02
30ef4     10 4E 05 F1 | 	add	fp, #16
30ef8     A7 14 02 FB | 	rdlong	arg02, fp
30efc     0A 13 02 F6 | 	mov	arg01, arg02
30f00     34 14 06 F1 | 	add	arg02, #52
30f04     14 4E 85 F1 | 	sub	fp, #20
30f08     10 28 06 F1 | 	add	local02, #16
30f0c     14 29 02 FB | 	rdlong	local02, local02
30f10     FF 29 06 F5 | 	and	local02, #511
30f14     14 15 02 F1 | 	add	arg02, local02
30f18     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
30f1c     08 26 06 F1 | 	add	local01, #8
30f20     13 FB 61 FC | 	wrlong	result1, local01
30f24     E4 FE 9F FD | 	jmp	#LR__4785
30f28                 | LR__4787
30f28                 | LR__4788
30f28                 | ' 			}
30f28                 | ' #line 3090 "ff.c"
30f28                 | ' 			{
30f28                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
30f28                 | ' 			}
30f28                 | ' 		}
30f28                 | ' 	}
30f28                 | ' 
30f28                 | ' 	return res;
30f28     0C 4E 05 F1 | 	add	fp, #12
30f2c     A7 FA 01 FB | 	rdlong	result1, fp
30f30     0C 4E 85 F1 | 	sub	fp, #12
30f34     A7 F0 03 F6 | 	mov	ptra, fp
30f38     B2 00 A0 FD | 	call	#popregs_
30f3c                 | _fatfs_cc_follow_path_ret
30f3c     2D 00 64 FD | 	ret
30f40                 | 
30f40                 | _fatfs_cc_get_ldnumber
30f40     01 00 66 F6 | 	neg	_var01, #1
30f44     09 03 0A FB | 	rdlong	_var02, arg01 wz
30f48     01 05 02 F6 | 	mov	_var03, _var02
30f4c     01 FA 65 A6 |  if_e	neg	result1, #1
30f50     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
30f54     97 10 48 FB | 	callpa	#(@LR__4791-@LR__4790)>>2,fcache_load_ptr_
30f58                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
30f58                 | LR__4790
30f58     02 07 C2 FA | 	rdbyte	_var04, _var03
30f5c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
30f60     20 FA 15 F2 | 	cmp	result1, #32 wc
30f64     01 04 06 F1 | 	add	_var03, #1
30f68     03 09 02 36 |  if_ae	mov	_var05, _var04
30f6c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
30f70     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
30f74     E0 FF 9F 1D |  if_a	jmp	#LR__4790
30f78                 | LR__4791
30f78     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
30f7c     3A 06 0E F2 | 	cmp	_var04, #58 wz
30f80     40 00 90 5D |  if_ne	jmp	#LR__4793
30f84     01 0A 06 F6 | 	mov	_var06, #1
30f88     01 09 C2 FA | 	rdbyte	_var05, _var02
30f8c     30 08 16 F2 | 	cmp	_var05, #48 wc
30f90     1C 00 90 CD |  if_b	jmp	#LR__4792
30f94     01 09 C2 FA | 	rdbyte	_var05, _var02
30f98     3A 08 16 F2 | 	cmp	_var05, #58 wc
30f9c     01 0D 02 C6 |  if_b	mov	_var07, _var02
30fa0     02 0C 06 C1 |  if_b	add	_var07, #2
30fa4     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
30fa8     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
30fac     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
30fb0                 | LR__4792
30fb0     01 0A 56 F2 | 	cmps	_var06, #1 wc
30fb4     05 01 02 C6 |  if_b	mov	_var01, _var06
30fb8     09 05 62 CC |  if_b	wrlong	_var03, arg01
30fbc                 | ' 			vol = i;
30fbc                 | ' 			*path = tt;
30fbc                 | ' 		}
30fbc                 | ' 		return vol;
30fbc     00 FB 01 F6 | 	mov	result1, _var01
30fc0     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
30fc4                 | LR__4793
30fc4                 | ' 	}
30fc4                 | ' #line 3170 "ff.c"
30fc4                 | ' 	vol = 0;
30fc4                 | ' 
30fc4                 | ' 	return vol;
30fc4     00 FA 05 F6 | 	mov	result1, #0
30fc8                 | _fatfs_cc_get_ldnumber_ret
30fc8     2D 00 64 FD | 	ret
30fcc                 | 
30fcc                 | _fatfs_cc_check_fs
30fcc     04 4A 05 F6 | 	mov	COUNT_, #4
30fd0     A8 00 A0 FD | 	call	#pushregs_
30fd4     09 27 02 F6 | 	mov	local01, arg01
30fd8     03 26 06 F1 | 	add	local01, #3
30fdc     13 01 48 FC | 	wrbyte	#0, local01
30fe0     2D 26 06 F1 | 	add	local01, #45
30fe4     FF FF FF FF 
30fe8     13 FF 6B FC | 	wrlong	##-1, local01
30fec     30 26 86 F1 | 	sub	local01, #48
30ff0     13 13 02 F6 | 	mov	arg01, local01
30ff4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
30ff8     00 FA 0D F2 | 	cmp	result1, #0 wz
30ffc     04 FA 05 56 |  if_ne	mov	result1, #4
31000     94 01 90 5D |  if_ne	jmp	#LR__4804
31004     34 26 06 F1 | 	add	local01, #52
31008     13 13 02 F6 | 	mov	arg01, local01
3100c     FE 13 06 F1 | 	add	arg01, #510
31010                 | ' {
31010                 | ' 
31010                 | ' 	return *((WORD*)ptr);
31010     09 29 E2 FA | 	rdword	local02, arg01
31014     13 2B C2 FA | 	rdbyte	local03, local01
31018     34 26 86 F1 | 	sub	local01, #52
3101c     15 2D E2 F8 | 	getbyte	local04, local03, #0
31020     EB 2C 0E F2 | 	cmp	local04, #235 wz
31024     15 17 02 56 |  if_ne	mov	arg03, local03
31028     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
3102c     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
31030     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
31034     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
31038     44 01 90 5D |  if_ne	jmp	#LR__4803
3103c     14 2D 32 F9 | 	getword	local04, local02, #0
31040     55 00 00 FF 
31044     55 2C 0E F2 | 	cmp	local04, ##43605 wz
31048     2C 00 90 5D |  if_ne	jmp	#LR__4800
3104c     34 26 06 F1 | 	add	local01, #52
31050     13 13 02 F6 | 	mov	arg01, local01
31054     34 26 86 F1 | 	sub	local01, #52
31058     52 12 06 F1 | 	add	arg01, #82
3105c     B2 01 00 FF 
31060     AC 14 06 F6 | 	mov	arg02, ##@LR__5394
31064     08 16 06 F6 | 	mov	arg03, #8
31068     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
3106c     00 FA 0D F2 | 	cmp	result1, #0 wz
31070                 | ' 			return 0;
31070     00 FA 05 A6 |  if_e	mov	result1, #0
31074     20 01 90 AD |  if_e	jmp	#LR__4804
31078                 | LR__4800
31078     34 26 06 F1 | 	add	local01, #52
3107c     13 13 02 F6 | 	mov	arg01, local01
31080     0B 12 06 F1 | 	add	arg01, #11
31084                 | ' {
31084                 | ' 
31084                 | ' 	return *((WORD*)ptr);
31084     09 FB E1 FA | 	rdword	result1, arg01
31088     0D 26 06 F1 | 	add	local01, #13
3108c     13 2B C2 FA | 	rdbyte	local03, local01
31090     41 26 86 F1 | 	sub	local01, #65
31094     FD 2C 32 F9 | 	getword	local04, result1, #0
31098     FD 14 32 F9 | 	getword	arg02, result1, #0
3109c     01 14 86 F1 | 	sub	arg02, #1
310a0     0A 2D CA F7 | 	test	local04, arg02 wz
310a4     D8 00 90 5D |  if_ne	jmp	#LR__4802
310a8     FD 14 32 F9 | 	getword	arg02, result1, #0
310ac     01 00 00 FF 
310b0     00 14 16 F2 | 	cmp	arg02, ##512 wc
310b4     C8 00 90 CD |  if_b	jmp	#LR__4802
310b8     FD 14 32 F9 | 	getword	arg02, result1, #0
310bc     01 00 00 FF 
310c0     01 14 16 F2 | 	cmp	arg02, ##513 wc
310c4     B8 00 90 3D |  if_ae	jmp	#LR__4802
310c8     15 13 02 F6 | 	mov	arg01, local03
310cc     07 12 4E F7 | 	zerox	arg01, #7 wz
310d0     AC 00 90 AD |  if_e	jmp	#LR__4802
310d4     15 13 E2 F8 | 	getbyte	arg01, local03, #0
310d8     15 2B E2 F8 | 	getbyte	local03, local03, #0
310dc     01 2A 86 F1 | 	sub	local03, #1
310e0     15 13 CA F7 | 	test	arg01, local03 wz
310e4     98 00 90 5D |  if_ne	jmp	#LR__4802
310e8     34 26 06 F1 | 	add	local01, #52
310ec     13 13 02 F6 | 	mov	arg01, local01
310f0     34 26 86 F1 | 	sub	local01, #52
310f4     0E 12 06 F1 | 	add	arg01, #14
310f8                 | ' {
310f8                 | ' 
310f8                 | ' 	return *((WORD*)ptr);
310f8     09 FB E9 FA | 	rdword	result1, arg01 wz
310fc     80 00 90 AD |  if_e	jmp	#LR__4802
31100     44 26 06 F1 | 	add	local01, #68
31104     13 13 C2 FA | 	rdbyte	arg01, local01
31108     44 26 86 F1 | 	sub	local01, #68
3110c     01 12 86 F1 | 	sub	arg01, #1
31110     02 12 16 F2 | 	cmp	arg01, #2 wc
31114     68 00 90 3D |  if_ae	jmp	#LR__4802
31118     34 26 06 F1 | 	add	local01, #52
3111c     13 13 02 F6 | 	mov	arg01, local01
31120     34 26 86 F1 | 	sub	local01, #52
31124     11 12 06 F1 | 	add	arg01, #17
31128                 | ' {
31128                 | ' 
31128                 | ' 	return *((WORD*)ptr);
31128     09 FB E9 FA | 	rdword	result1, arg01 wz
3112c     50 00 90 AD |  if_e	jmp	#LR__4802
31130     34 26 06 F1 | 	add	local01, #52
31134     13 13 02 F6 | 	mov	arg01, local01
31138     34 26 86 F1 | 	sub	local01, #52
3113c     13 12 06 F1 | 	add	arg01, #19
31140                 | ' {
31140                 | ' 
31140                 | ' 	return *((WORD*)ptr);
31140     09 FB E1 FA | 	rdword	result1, arg01
31144     FD 2A 32 F9 | 	getword	local03, result1, #0
31148     80 2A 16 F2 | 	cmp	local03, #128 wc
3114c     20 00 90 3D |  if_ae	jmp	#LR__4801
31150     34 26 06 F1 | 	add	local01, #52
31154     13 13 02 F6 | 	mov	arg01, local01
31158     34 26 86 F1 | 	sub	local01, #52
3115c     20 12 06 F1 | 	add	arg01, #32
31160                 | ' {
31160                 | ' 
31160                 | ' 	return *((DWORD*)ptr);
31160     09 FB 01 FB | 	rdlong	result1, arg01
31164     80 00 00 FF 
31168     00 FA 15 F2 | 	cmp	result1, ##65536 wc
3116c     10 00 90 CD |  if_b	jmp	#LR__4802
31170                 | LR__4801
31170     4A 26 06 F1 | 	add	local01, #74
31174                 | ' {
31174                 | ' 
31174                 | ' 	return *((WORD*)ptr);
31174     13 FB E9 FA | 	rdword	result1, local01 wz
31178                 | ' 			&& b != 0 && (b & (b - 1)) == 0
31178                 | ' 			&& ld_word(fs->win +  14 ) != 0
31178                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
31178                 | ' 			&& ld_word(fs->win +  17 ) != 0
31178                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
31178                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
31178                 | ' 				return 0;
31178     00 FA 05 56 |  if_ne	mov	result1, #0
3117c     18 00 90 5D |  if_ne	jmp	#LR__4804
31180                 | LR__4802
31180                 | LR__4803
31180                 | ' 		}
31180                 | ' 	}
31180                 | ' 	return sign == 0xAA55 ? 2 : 3;
31180     14 2B 32 F9 | 	getword	local03, local02, #0
31184     55 00 00 FF 
31188     55 2A 0E F2 | 	cmp	local03, ##43605 wz
3118c     02 2C 06 A6 |  if_e	mov	local04, #2
31190     03 2C 06 56 |  if_ne	mov	local04, #3
31194     16 FB 01 F6 | 	mov	result1, local04
31198                 | LR__4804
31198     A7 F0 03 F6 | 	mov	ptra, fp
3119c     B2 00 A0 FD | 	call	#popregs_
311a0                 | _fatfs_cc_check_fs_ret
311a0     2D 00 64 FD | 	ret
311a4                 | 
311a4                 | _fatfs_cc_find_volume
311a4     05 4A 05 F6 | 	mov	COUNT_, #5
311a8     A8 00 A0 FD | 	call	#pushregs_
311ac     24 F0 07 F1 | 	add	ptra, #36
311b0     09 27 02 F6 | 	mov	local01, arg01
311b4     0A 29 02 F6 | 	mov	local02, arg02
311b8     13 13 02 F6 | 	mov	arg01, local01
311bc     00 14 06 F6 | 	mov	arg02, #0
311c0     08 FE BF FD | 	call	#_fatfs_cc_check_fs
311c4     02 FA 0D F2 | 	cmp	result1, #2 wz
311c8     0C 00 90 AD |  if_e	jmp	#LR__4810
311cc     03 FA 15 F2 | 	cmp	result1, #3 wc
311d0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
311d4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4818
311d8                 | LR__4810
311d8                 | ' 	for (i = 0; i < 4; i++) {
311d8     00 2A 06 F6 | 	mov	local03, #0
311dc     97 26 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
311e0                 | LR__4811
311e0     04 2A 16 F2 | 	cmp	local03, #4 wc
311e4     44 00 90 3D |  if_ae	jmp	#LR__4813
311e8     15 2D 02 F6 | 	mov	local04, local03
311ec     02 2C 66 F0 | 	shl	local04, #2
311f0     14 4E 05 F1 | 	add	fp, #20
311f4     A7 2C 02 F1 | 	add	local04, fp
311f8     34 26 06 F1 | 	add	local01, #52
311fc     13 13 02 F6 | 	mov	arg01, local01
31200     34 26 86 F1 | 	sub	local01, #52
31204     BE 13 06 F1 | 	add	arg01, #446
31208     15 15 02 F6 | 	mov	arg02, local03
3120c     04 14 66 F0 | 	shl	arg02, #4
31210     0A 13 02 F1 | 	add	arg01, arg02
31214     08 12 06 F1 | 	add	arg01, #8
31218                 | ' {
31218                 | ' 
31218                 | ' 	return *((DWORD*)ptr);
31218     09 FB 01 FB | 	rdlong	result1, arg01
3121c     14 4E 85 F1 | 	sub	fp, #20
31220     16 FB 61 FC | 	wrlong	result1, local04
31224     01 2A 06 F1 | 	add	local03, #1
31228     B4 FF 9F FD | 	jmp	#LR__4811
3122c                 | LR__4812
3122c                 | LR__4813
3122c     00 28 0E F2 | 	cmp	local02, #0 wz
31230     14 2D 02 56 |  if_ne	mov	local04, local02
31234     01 2C 86 51 |  if_ne	sub	local04, #1
31238     00 2C 06 A6 |  if_e	mov	local04, #0
3123c     16 2B 02 F6 | 	mov	local03, local04
31240                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
31240                 | ' 	}
31240                 | ' 	i = part ? part - 1 : 0;
31240                 | ' 	do {
31240                 | LR__4814
31240     15 2D 02 F6 | 	mov	local04, local03
31244     02 2C 66 F0 | 	shl	local04, #2
31248     14 4E 05 F1 | 	add	fp, #20
3124c     A7 2C 02 F1 | 	add	local04, fp
31250     16 2D 0A FB | 	rdlong	local04, local04 wz
31254     14 4E 85 F1 | 	sub	fp, #20
31258     28 00 90 AD |  if_e	jmp	#LR__4815
3125c     15 2D 02 F6 | 	mov	local04, local03
31260     02 2C 66 F0 | 	shl	local04, #2
31264     14 4E 05 F1 | 	add	fp, #20
31268     A7 2C 02 F1 | 	add	local04, fp
3126c     16 15 02 FB | 	rdlong	arg02, local04
31270     13 13 02 F6 | 	mov	arg01, local01
31274     14 4E 85 F1 | 	sub	fp, #20
31278     50 FD BF FD | 	call	#_fatfs_cc_check_fs
3127c     FD 2C 02 F6 | 	mov	local04, result1
31280     04 00 90 FD | 	jmp	#LR__4816
31284                 | LR__4815
31284     03 2C 06 F6 | 	mov	local04, #3
31288                 | LR__4816
31288     16 2F 02 F6 | 	mov	local05, local04
3128c     00 28 0E F2 | 	cmp	local02, #0 wz
31290     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
31294     0C 00 90 8D |  if_c_and_z	jmp	#LR__4817
31298     01 2A 06 A1 |  if_e	add	local03, #1
3129c     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
312a0     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4814
312a4                 | LR__4817
312a4                 | ' 	return fmt;
312a4     17 FB 01 F6 | 	mov	result1, local05
312a8                 | LR__4818
312a8     A7 F0 03 F6 | 	mov	ptra, fp
312ac     B2 00 A0 FD | 	call	#popregs_
312b0                 | _fatfs_cc_find_volume_ret
312b0     2D 00 64 FD | 	ret
312b4                 | 
312b4                 | _fatfs_cc_mount_volume
312b4     0B 4A 05 F6 | 	mov	COUNT_, #11
312b8     A8 00 A0 FD | 	call	#pushregs_
312bc     0A 27 02 F6 | 	mov	local01, arg02
312c0     0B 29 02 F6 | 	mov	local02, arg03
312c4     13 01 68 FC | 	wrlong	#0, local01
312c8     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
312cc     FD 2A 02 F6 | 	mov	local03, result1
312d0     00 2A 56 F2 | 	cmps	local03, #0 wc
312d4     0B FA 05 C6 |  if_b	mov	result1, #11
312d8     3C 05 90 CD |  if_b	jmp	#LR__4830
312dc     15 17 02 F6 | 	mov	arg03, local03
312e0     02 16 66 F0 | 	shl	arg03, #2
312e4     F2 16 02 F1 | 	add	arg03, objptr
312e8     0B 2D 0A FB | 	rdlong	local04, arg03 wz
312ec     0C FA 05 A6 |  if_e	mov	result1, #12
312f0     24 05 90 AD |  if_e	jmp	#LR__4830
312f4     13 2D 62 FC | 	wrlong	local04, local01
312f8     14 29 E2 F8 | 	getbyte	local02, local02, #0
312fc     FE 28 06 F5 | 	and	local02, #254
31300     16 17 CA FA | 	rdbyte	arg03, local04 wz
31304     4C 00 90 AD |  if_e	jmp	#LR__4821
31308     01 2C 06 F1 | 	add	local04, #1
3130c     16 13 CA FA | 	rdbyte	arg01, local04 wz
31310     01 2C 86 F1 | 	sub	local04, #1
31314     01 FA 05 56 |  if_ne	mov	result1, #1
31318                 | ' 
31318                 | ' 	return Stat;
31318     01 00 00 AF 
3131c     20 E4 05 A1 |  if_e	add	objptr, ##544
31320     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31324     01 00 00 AF 
31328     20 E4 85 A1 |  if_e	sub	objptr, ##544
3132c     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
31330     01 16 CE F7 | 	test	arg03, #1 wz
31334     1C 00 90 5D |  if_ne	jmp	#LR__4820
31338     00 28 0E F2 | 	cmp	local02, #0 wz
3133c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
31340     04 FA CD 57 |  if_ne	test	result1, #4 wz
31344                 | ' 				return FR_WRITE_PROTECTED;
31344     0A FA 05 56 |  if_ne	mov	result1, #10
31348     CC 04 90 5D |  if_ne	jmp	#LR__4830
3134c                 | ' 			}
3134c                 | ' 			return FR_OK;
3134c     00 FA 05 F6 | 	mov	result1, #0
31350     C4 04 90 FD | 	jmp	#LR__4830
31354                 | LR__4820
31354                 | LR__4821
31354     16 01 48 FC | 	wrbyte	#0, local04
31358     01 2C 06 F1 | 	add	local04, #1
3135c     16 2B 42 FC | 	wrbyte	local03, local04
31360     16 13 C2 FA | 	rdbyte	arg01, local04
31364     01 2C 86 F1 | 	sub	local04, #1
31368     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
3136c     FD 16 02 F6 | 	mov	arg03, result1
31370     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
31374     01 2E CE F7 | 	test	local05, #1 wz
31378                 | ' 		return FR_NOT_READY;
31378     03 FA 05 56 |  if_ne	mov	result1, #3
3137c     98 04 90 5D |  if_ne	jmp	#LR__4830
31380     00 28 0E F2 | 	cmp	local02, #0 wz
31384     0B 2F 02 56 |  if_ne	mov	local05, arg03
31388     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
3138c     04 2E CE 57 |  if_ne	test	local05, #4 wz
31390                 | ' 		return FR_WRITE_PROTECTED;
31390     0A FA 05 56 |  if_ne	mov	result1, #10
31394     80 04 90 5D |  if_ne	jmp	#LR__4830
31398     16 13 02 F6 | 	mov	arg01, local04
3139c     00 14 06 F6 | 	mov	arg02, #0
313a0     00 FE BF FD | 	call	#_fatfs_cc_find_volume
313a4     FD 12 02 F6 | 	mov	arg01, result1
313a8     04 12 0E F2 | 	cmp	arg01, #4 wz
313ac     01 FA 05 A6 |  if_e	mov	result1, #1
313b0     64 04 90 AD |  if_e	jmp	#LR__4830
313b4     02 12 16 F2 | 	cmp	arg01, #2 wc
313b8     0D FA 05 36 |  if_ae	mov	result1, #13
313bc     58 04 90 3D |  if_ae	jmp	#LR__4830
313c0     30 2C 06 F1 | 	add	local04, #48
313c4     16 31 02 FB | 	rdlong	local06, local04
313c8     04 2C 06 F1 | 	add	local04, #4
313cc     16 13 02 F6 | 	mov	arg01, local04
313d0     34 2C 86 F1 | 	sub	local04, #52
313d4     0B 12 06 F1 | 	add	arg01, #11
313d8                 | ' {
313d8                 | ' 
313d8                 | ' 	return *((WORD*)ptr);
313d8     09 FB E1 FA | 	rdword	result1, arg01
313dc     01 00 00 FF 
313e0     00 FA 0D F2 | 	cmp	result1, ##512 wz
313e4     0D FA 05 56 |  if_ne	mov	result1, #13
313e8     2C 04 90 5D |  if_ne	jmp	#LR__4830
313ec     34 2C 06 F1 | 	add	local04, #52
313f0     16 13 02 F6 | 	mov	arg01, local04
313f4     34 2C 86 F1 | 	sub	local04, #52
313f8     16 12 06 F1 | 	add	arg01, #22
313fc                 | ' {
313fc                 | ' 
313fc                 | ' 	return *((WORD*)ptr);
313fc     09 FB E1 FA | 	rdword	result1, arg01
31400     FD 32 0A F6 | 	mov	local07, result1 wz
31404     18 00 90 5D |  if_ne	jmp	#LR__4822
31408     34 2C 06 F1 | 	add	local04, #52
3140c     16 13 02 F6 | 	mov	arg01, local04
31410     34 2C 86 F1 | 	sub	local04, #52
31414     24 12 06 F1 | 	add	arg01, #36
31418                 | ' {
31418                 | ' 
31418                 | ' 	return *((DWORD*)ptr);
31418     09 FB 01 FB | 	rdlong	result1, arg01
3141c     FD 32 02 F6 | 	mov	local07, result1
31420                 | LR__4822
31420     1C 2C 06 F1 | 	add	local04, #28
31424     16 33 62 FC | 	wrlong	local07, local04
31428     28 2C 06 F1 | 	add	local04, #40
3142c     16 2F C2 FA | 	rdbyte	local05, local04
31430     42 2C 86 F1 | 	sub	local04, #66
31434     16 2F 42 FC | 	wrbyte	local05, local04
31438     16 2F C2 FA | 	rdbyte	local05, local04
3143c     02 2C 86 F1 | 	sub	local04, #2
31440     01 2E 0E F2 | 	cmp	local05, #1 wz
31444     02 2C 06 51 |  if_ne	add	local04, #2
31448     16 2F C2 5A |  if_ne	rdbyte	local05, local04
3144c     02 2C 86 51 |  if_ne	sub	local04, #2
31450     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
31454     0D FA 05 56 |  if_ne	mov	result1, #13
31458     BC 03 90 5D |  if_ne	jmp	#LR__4830
3145c     02 2C 06 F1 | 	add	local04, #2
31460     16 2F C2 FA | 	rdbyte	local05, local04
31464     17 33 02 FD | 	qmul	local07, local05
31468     3F 2C 06 F1 | 	add	local04, #63
3146c     16 2F C2 FA | 	rdbyte	local05, local04
31470     37 2C 86 F1 | 	sub	local04, #55
31474     16 2F 52 FC | 	wrword	local05, local04
31478     16 2F EA FA | 	rdword	local05, local04 wz
3147c     0A 2C 86 F1 | 	sub	local04, #10
31480     18 32 62 FD | 	getqx	local07
31484     20 00 90 AD |  if_e	jmp	#LR__4823
31488     0A 2C 06 F1 | 	add	local04, #10
3148c     16 2F E2 FA | 	rdword	local05, local04
31490     17 2B 32 F9 | 	getword	local03, local05, #0
31494     0A 2C 86 F1 | 	sub	local04, #10
31498     17 2F 32 F9 | 	getword	local05, local05, #0
3149c     01 2E 86 F1 | 	sub	local05, #1
314a0     17 2B CA F7 | 	test	local03, local05 wz
314a4     08 00 90 AD |  if_e	jmp	#LR__4824
314a8                 | LR__4823
314a8     0D FA 05 F6 | 	mov	result1, #13
314ac     68 03 90 FD | 	jmp	#LR__4830
314b0                 | LR__4824
314b0     34 2C 06 F1 | 	add	local04, #52
314b4     16 13 02 F6 | 	mov	arg01, local04
314b8     11 12 06 F1 | 	add	arg01, #17
314bc                 | ' {
314bc                 | ' 
314bc                 | ' 	return *((WORD*)ptr);
314bc     09 FB E1 FA | 	rdword	result1, arg01
314c0     2C 2C 86 F1 | 	sub	local04, #44
314c4     16 FB 51 FC | 	wrword	result1, local04
314c8     16 2F E2 FA | 	rdword	local05, local04
314cc     08 2C 86 F1 | 	sub	local04, #8
314d0     17 13 52 F6 | 	abs	arg01, local05 wc
314d4     09 13 42 F8 | 	getnib	arg01, arg01, #0
314d8     09 13 8A F6 | 	negc	arg01, arg01 wz
314dc     0D FA 05 56 |  if_ne	mov	result1, #13
314e0     34 03 90 5D |  if_ne	jmp	#LR__4830
314e4     34 2C 06 F1 | 	add	local04, #52
314e8     16 13 02 F6 | 	mov	arg01, local04
314ec     34 2C 86 F1 | 	sub	local04, #52
314f0     13 12 06 F1 | 	add	arg01, #19
314f4                 | ' {
314f4                 | ' 
314f4                 | ' 	return *((WORD*)ptr);
314f4     09 FB E1 FA | 	rdword	result1, arg01
314f8     FD 34 0A F6 | 	mov	local08, result1 wz
314fc     34 2C 06 A1 |  if_e	add	local04, #52
31500     16 13 02 A6 |  if_e	mov	arg01, local04
31504     34 2C 86 A1 |  if_e	sub	local04, #52
31508     20 12 06 A1 |  if_e	add	arg01, #32
3150c                 | ' {
3150c                 | ' 
3150c                 | ' 	return *((DWORD*)ptr);
3150c     09 35 02 AB |  if_e	rdlong	local08, arg01
31510     34 2C 06 F1 | 	add	local04, #52
31514     16 13 02 F6 | 	mov	arg01, local04
31518     34 2C 86 F1 | 	sub	local04, #52
3151c     0E 12 06 F1 | 	add	arg01, #14
31520                 | ' {
31520                 | ' 
31520                 | ' 	return *((WORD*)ptr);
31520     09 FB E1 FA | 	rdword	result1, arg01
31524     FD 12 02 F6 | 	mov	arg01, result1
31528     09 2F 02 F6 | 	mov	local05, arg01
3152c     0F 2E 4E F7 | 	zerox	local05, #15 wz
31530     0D FA 05 A6 |  if_e	mov	result1, #13
31534     E0 02 90 AD |  if_e	jmp	#LR__4830
31538     09 37 32 F9 | 	getword	local09, arg01, #0
3153c     19 37 02 F1 | 	add	local09, local07
31540     08 2C 06 F1 | 	add	local04, #8
31544     16 2F E2 FA | 	rdword	local05, local04
31548     08 2C 86 F1 | 	sub	local04, #8
3154c     17 2F 52 F6 | 	abs	local05, local05 wc
31550     04 2E 46 F0 | 	shr	local05, #4
31554     17 37 82 F3 | 	sumc	local09, local05
31558     1B 35 12 F2 | 	cmp	local08, local09 wc
3155c     0D FA 05 C6 |  if_b	mov	result1, #13
31560     B4 02 90 CD |  if_b	jmp	#LR__4830
31564     1B 35 82 F1 | 	sub	local08, local09
31568     0A 2C 06 F1 | 	add	local04, #10
3156c     16 2F E2 FA | 	rdword	local05, local04
31570     17 35 12 FD | 	qdiv	local08, local05
31574     0A 2C 86 F1 | 	sub	local04, #10
31578     18 2E 62 FD | 	getqx	local05
3157c     00 2E 0E F2 | 	cmp	local05, #0 wz
31580     0D FA 05 A6 |  if_e	mov	result1, #13
31584     90 02 90 AD |  if_e	jmp	#LR__4830
31588     00 38 06 F6 | 	mov	local10, #0
3158c     FF FF 07 FF 
31590     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
31594     03 38 06 C6 |  if_b	mov	local10, #3
31598     7F 00 00 FF 
3159c     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
315a0     02 38 06 C6 |  if_b	mov	local10, #2
315a4     07 00 00 FF 
315a8     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
315ac     01 38 06 C6 |  if_b	mov	local10, #1
315b0     00 38 0E F2 | 	cmp	local10, #0 wz
315b4     0D FA 05 A6 |  if_e	mov	result1, #13
315b8     5C 02 90 AD |  if_e	jmp	#LR__4830
315bc     02 2E 06 F1 | 	add	local05, #2
315c0     18 2C 06 F1 | 	add	local04, #24
315c4     16 2F 62 FC | 	wrlong	local05, local04
315c8     08 2C 06 F1 | 	add	local04, #8
315cc     16 31 62 FC | 	wrlong	local06, local04
315d0     18 2F 02 F6 | 	mov	local05, local06
315d4     09 13 32 F9 | 	getword	arg01, arg01, #0
315d8     09 2F 02 F1 | 	add	local05, arg01
315dc     04 2C 06 F1 | 	add	local04, #4
315e0     16 2F 62 FC | 	wrlong	local05, local04
315e4     18 2F 02 F6 | 	mov	local05, local06
315e8     1B 2F 02 F1 | 	add	local05, local09
315ec     08 2C 06 F1 | 	add	local04, #8
315f0     16 2F 62 FC | 	wrlong	local05, local04
315f4     2C 2C 86 F1 | 	sub	local04, #44
315f8     03 38 0E F2 | 	cmp	local10, #3 wz
315fc     5C 00 90 5D |  if_ne	jmp	#LR__4825
31600     34 2C 06 F1 | 	add	local04, #52
31604     16 13 02 F6 | 	mov	arg01, local04
31608     34 2C 86 F1 | 	sub	local04, #52
3160c     2A 12 06 F1 | 	add	arg01, #42
31610                 | ' {
31610                 | ' 
31610                 | ' 	return *((WORD*)ptr);
31610     09 FB E9 FA | 	rdword	result1, arg01 wz
31614     0D FA 05 56 |  if_ne	mov	result1, #13
31618     FC 01 90 5D |  if_ne	jmp	#LR__4830
3161c     08 2C 06 F1 | 	add	local04, #8
31620     16 2F EA FA | 	rdword	local05, local04 wz
31624     08 2C 86 F1 | 	sub	local04, #8
31628     0D FA 05 56 |  if_ne	mov	result1, #13
3162c     E8 01 90 5D |  if_ne	jmp	#LR__4830
31630     34 2C 06 F1 | 	add	local04, #52
31634     16 13 02 F6 | 	mov	arg01, local04
31638     2C 12 06 F1 | 	add	arg01, #44
3163c                 | ' {
3163c                 | ' 
3163c                 | ' 	return *((DWORD*)ptr);
3163c     09 FB 01 FB | 	rdlong	result1, arg01
31640     0C 2C 86 F1 | 	sub	local04, #12
31644     16 FB 61 FC | 	wrlong	result1, local04
31648     10 2C 86 F1 | 	sub	local04, #16
3164c     16 3B 02 FB | 	rdlong	local11, local04
31650     18 2C 86 F1 | 	sub	local04, #24
31654     02 3A 66 F0 | 	shl	local11, #2
31658     6C 00 90 FD | 	jmp	#LR__4827
3165c                 | LR__4825
3165c     08 2C 06 F1 | 	add	local04, #8
31660     16 2F EA FA | 	rdword	local05, local04 wz
31664     08 2C 86 F1 | 	sub	local04, #8
31668     0D FA 05 A6 |  if_e	mov	result1, #13
3166c     A8 01 90 AD |  if_e	jmp	#LR__4830
31670     24 2C 06 F1 | 	add	local04, #36
31674     16 2F 02 FB | 	rdlong	local05, local04
31678     19 2F 02 F1 | 	add	local05, local07
3167c     04 2C 06 F1 | 	add	local04, #4
31680     16 2F 62 FC | 	wrlong	local05, local04
31684     28 2C 86 F1 | 	sub	local04, #40
31688     02 38 0E F2 | 	cmp	local10, #2 wz
3168c     18 2C 06 A1 |  if_e	add	local04, #24
31690     16 2F 02 AB |  if_e	rdlong	local05, local04
31694     18 2C 86 A1 |  if_e	sub	local04, #24
31698     01 2E 66 A0 |  if_e	shl	local05, #1
3169c     24 00 90 AD |  if_e	jmp	#LR__4826
316a0     18 2C 06 F1 | 	add	local04, #24
316a4     16 3B 02 FB | 	rdlong	local11, local04
316a8     1D 2F 02 F6 | 	mov	local05, local11
316ac     01 2E 66 F0 | 	shl	local05, #1
316b0     1D 2F 02 F1 | 	add	local05, local11
316b4     01 2E 46 F0 | 	shr	local05, #1
316b8     18 2C 86 F1 | 	sub	local04, #24
316bc     01 3A 06 F5 | 	and	local11, #1
316c0     1D 2F 02 F1 | 	add	local05, local11
316c4                 | LR__4826
316c4     17 3B 02 F6 | 	mov	local11, local05
316c8                 | LR__4827
316c8     FF 3B 06 F1 | 	add	local11, #511
316cc     09 3A 46 F0 | 	shr	local11, #9
316d0     1C 2C 06 F1 | 	add	local04, #28
316d4     16 17 02 FB | 	rdlong	arg03, local04
316d8     1C 2C 86 F1 | 	sub	local04, #28
316dc     1D 17 12 F2 | 	cmp	arg03, local11 wc
316e0     0D FA 05 C6 |  if_b	mov	result1, #13
316e4     30 01 90 CD |  if_b	jmp	#LR__4830
316e8     14 2C 06 F1 | 	add	local04, #20
316ec     FF FF FF FF 
316f0     16 FF 6B FC | 	wrlong	##-1, local04
316f4     04 2C 86 F1 | 	sub	local04, #4
316f8     FF FF FF FF 
316fc     16 FF 6B FC | 	wrlong	##-1, local04
31700     0C 2C 86 F1 | 	sub	local04, #12
31704     16 01 49 FC | 	wrbyte	#128, local04
31708     04 2C 86 F1 | 	sub	local04, #4
3170c     03 38 0E F2 | 	cmp	local10, #3 wz
31710     D0 00 90 5D |  if_ne	jmp	#LR__4829
31714     34 2C 06 F1 | 	add	local04, #52
31718     16 13 02 F6 | 	mov	arg01, local04
3171c     34 2C 86 F1 | 	sub	local04, #52
31720     30 12 06 F1 | 	add	arg01, #48
31724                 | ' {
31724                 | ' 
31724                 | ' 	return *((WORD*)ptr);
31724     09 FB E1 FA | 	rdword	result1, arg01
31728     FD 2E 32 F9 | 	getword	local05, result1, #0
3172c     01 2E 0E F2 | 	cmp	local05, #1 wz
31730     B0 00 90 5D |  if_ne	jmp	#LR__4829
31734     01 30 06 F1 | 	add	local06, #1
31738     16 13 02 F6 | 	mov	arg01, local04
3173c     18 15 02 F6 | 	mov	arg02, local06
31740     CC CD BF FD | 	call	#_fatfs_cc_move_window
31744     00 FA 0D F2 | 	cmp	result1, #0 wz
31748     98 00 90 5D |  if_ne	jmp	#LR__4829
3174c     04 2C 06 F1 | 	add	local04, #4
31750     16 01 48 FC | 	wrbyte	#0, local04
31754     30 2C 06 F1 | 	add	local04, #48
31758     16 13 02 F6 | 	mov	arg01, local04
3175c     34 2C 86 F1 | 	sub	local04, #52
31760     FE 13 06 F1 | 	add	arg01, #510
31764                 | ' {
31764                 | ' 
31764                 | ' 	return *((WORD*)ptr);
31764     09 FB E1 FA | 	rdword	result1, arg01
31768     FD 2E 32 F9 | 	getword	local05, result1, #0
3176c     55 00 00 FF 
31770     55 2E 0E F2 | 	cmp	local05, ##43605 wz
31774     34 2C 06 A1 |  if_e	add	local04, #52
31778     16 13 02 A6 |  if_e	mov	arg01, local04
3177c     34 2C 86 A1 |  if_e	sub	local04, #52
31780                 | ' {
31780                 | ' 
31780                 | ' 	return *((DWORD*)ptr);
31780     09 FB 01 AB |  if_e	rdlong	result1, arg01
31784     A9 B0 20 AF 
31788     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
3178c     54 00 90 5D |  if_ne	jmp	#LR__4828
31790     34 2C 06 F1 | 	add	local04, #52
31794     16 13 02 F6 | 	mov	arg01, local04
31798     34 2C 86 F1 | 	sub	local04, #52
3179c     E4 13 06 F1 | 	add	arg01, #484
317a0                 | ' {
317a0                 | ' 
317a0                 | ' 	return *((DWORD*)ptr);
317a0     09 FB 01 FB | 	rdlong	result1, arg01
317a4     B9 A0 30 FF 
317a8     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
317ac     34 00 90 5D |  if_ne	jmp	#LR__4828
317b0     34 2C 06 F1 | 	add	local04, #52
317b4     16 13 02 F6 | 	mov	arg01, local04
317b8     E8 13 06 F1 | 	add	arg01, #488
317bc                 | ' {
317bc                 | ' 
317bc                 | ' 	return *((DWORD*)ptr);
317bc     09 FB 01 FB | 	rdlong	result1, arg01
317c0     20 2C 86 F1 | 	sub	local04, #32
317c4     16 FB 61 FC | 	wrlong	result1, local04
317c8     20 2C 06 F1 | 	add	local04, #32
317cc     16 13 02 F6 | 	mov	arg01, local04
317d0     EC 13 06 F1 | 	add	arg01, #492
317d4                 | ' {
317d4                 | ' 
317d4                 | ' 	return *((DWORD*)ptr);
317d4     09 FB 01 FB | 	rdlong	result1, arg01
317d8     24 2C 86 F1 | 	sub	local04, #36
317dc     16 FB 61 FC | 	wrlong	result1, local04
317e0     10 2C 86 F1 | 	sub	local04, #16
317e4                 | LR__4828
317e4                 | LR__4829
317e4     16 39 42 FC | 	wrbyte	local10, local04
317e8     04 E4 05 F1 | 	add	objptr, #4
317ec     F2 2E E2 FA | 	rdword	local05, objptr
317f0     01 2E 06 F1 | 	add	local05, #1
317f4     F2 2E 52 FC | 	wrword	local05, objptr
317f8     F2 3A E2 FA | 	rdword	local11, objptr
317fc     06 2C 06 F1 | 	add	local04, #6
31800     16 3B 52 FC | 	wrword	local11, local04
31804     04 E4 05 F1 | 	add	objptr, #4
31808     06 2C 06 F1 | 	add	local04, #6
3180c     16 E5 61 FC | 	wrlong	objptr, local04
31810                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
31810                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
31810                 | ' 			{
31810                 | ' 
31810                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
31810                 | ' 
31810                 | ' 
31810                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
31810                 | ' 
31810                 | ' 			}
31810                 | ' 		}
31810                 | ' 
31810                 | ' 
31810                 | ' 	}
31810                 | ' 
31810                 | ' 	fs->fs_type = (BYTE)fmt;
31810                 | ' 	fs->id = ++Fsid;
31810                 | ' 
31810                 | ' 	fs->lfnbuf = LfnBuf;
31810                 | ' #line 3567 "ff.c"
31810                 | ' 	return FR_OK;
31810     00 FA 05 F6 | 	mov	result1, #0
31814     08 E4 85 F1 | 	sub	objptr, #8
31818                 | LR__4830
31818     A7 F0 03 F6 | 	mov	ptra, fp
3181c     B2 00 A0 FD | 	call	#popregs_
31820                 | _fatfs_cc_mount_volume_ret
31820     2D 00 64 FD | 	ret
31824                 | 
31824                 | _fatfs_cc_validate
31824     09 01 0A F6 | 	mov	_var01, arg01 wz
31828     09 02 06 F6 | 	mov	_var02, #9
3182c     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
31830     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
31834     50 00 90 AD |  if_e	jmp	#LR__4840
31838     04 00 06 F1 | 	add	_var01, #4
3183c     00 07 E2 FA | 	rdword	_var04, _var01
31840     04 00 86 F1 | 	sub	_var01, #4
31844     00 13 02 FB | 	rdlong	arg01, _var01
31848     06 12 06 F1 | 	add	arg01, #6
3184c     09 FB E1 FA | 	rdword	result1, arg01
31850     FD 06 0A F2 | 	cmp	_var04, result1 wz
31854     30 00 90 5D |  if_ne	jmp	#LR__4840
31858     00 07 02 FB | 	rdlong	_var04, _var01
3185c     01 06 06 F1 | 	add	_var04, #1
31860     03 13 CA FA | 	rdbyte	arg01, _var04 wz
31864     01 FA 05 56 |  if_ne	mov	result1, #1
31868                 | ' 
31868                 | ' 	return Stat;
31868     01 00 00 AF 
3186c     20 E4 05 A1 |  if_e	add	objptr, ##544
31870     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
31874     01 00 00 AF 
31878     20 E4 85 A1 |  if_e	sub	objptr, ##544
3187c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
31880     01 04 CE F7 | 	test	_var03, #1 wz
31884     00 02 06 A6 |  if_e	mov	_var02, #0
31888                 | LR__4840
31888     00 02 0E F2 | 	cmp	_var02, #0 wz
3188c     00 05 02 AB |  if_e	rdlong	_var03, _var01
31890     00 04 06 56 |  if_ne	mov	_var03, #0
31894     0A 05 62 FC | 	wrlong	_var03, arg02
31898                 | ' 			res = FR_OK;
31898                 | ' 		}
31898                 | ' 
31898                 | ' 	}
31898                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
31898                 | ' 	return res;
31898     01 FB 01 F6 | 	mov	result1, _var02
3189c                 | _fatfs_cc_validate_ret
3189c     2D 00 64 FD | 	ret
318a0                 | 
318a0                 | _fatfs_cc_f_mount
318a0     01 4A 05 F6 | 	mov	COUNT_, #1
318a4     A8 00 A0 FD | 	call	#pushregs_
318a8     20 F0 07 F1 | 	add	ptra, #32
318ac     04 4E 05 F1 | 	add	fp, #4
318b0     A7 12 62 FC | 	wrlong	arg01, fp
318b4     04 4E 05 F1 | 	add	fp, #4
318b8     A7 14 62 FC | 	wrlong	arg02, fp
318bc     04 4E 05 F1 | 	add	fp, #4
318c0     A7 16 42 FC | 	wrbyte	arg03, fp
318c4     04 4E 85 F1 | 	sub	fp, #4
318c8     A7 16 02 FB | 	rdlong	arg03, fp
318cc     14 4E 05 F1 | 	add	fp, #20
318d0     A7 16 62 FC | 	wrlong	arg03, fp
318d4     A7 12 02 F6 | 	mov	arg01, fp
318d8     1C 4E 85 F1 | 	sub	fp, #28
318dc     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
318e0     14 4E 05 F1 | 	add	fp, #20
318e4     A7 FA 61 FC | 	wrlong	result1, fp
318e8     14 4E 85 F1 | 	sub	fp, #20
318ec     00 FA 55 F2 | 	cmps	result1, #0 wc
318f0     0B FA 05 C6 |  if_b	mov	result1, #11
318f4     C0 00 90 CD |  if_b	jmp	#LR__4851
318f8     14 4E 05 F1 | 	add	fp, #20
318fc     A7 16 02 FB | 	rdlong	arg03, fp
31900     02 16 66 F0 | 	shl	arg03, #2
31904     F2 16 02 F1 | 	add	arg03, objptr
31908     0B 17 0A FB | 	rdlong	arg03, arg03 wz
3190c     04 4E 85 F1 | 	sub	fp, #4
31910     A7 16 62 FC | 	wrlong	arg03, fp
31914     10 4E 85 F1 | 	sub	fp, #16
31918     28 00 90 AD |  if_e	jmp	#LR__4850
3191c     10 4E 05 F1 | 	add	fp, #16
31920     A7 16 02 FB | 	rdlong	arg03, fp
31924     10 4E 85 F1 | 	sub	fp, #16
31928     01 16 06 F1 | 	add	arg03, #1
3192c     0B 13 C2 FA | 	rdbyte	arg01, arg03
31930     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
31934     10 4E 05 F1 | 	add	fp, #16
31938     A7 16 02 FB | 	rdlong	arg03, fp
3193c     10 4E 85 F1 | 	sub	fp, #16
31940     0B 01 48 FC | 	wrbyte	#0, arg03
31944                 | LR__4850
31944     04 4E 05 F1 | 	add	fp, #4
31948     A7 26 0A FB | 	rdlong	local01, fp wz
3194c     04 4E 85 F1 | 	sub	fp, #4
31950     04 4E 05 51 |  if_ne	add	fp, #4
31954     A7 26 02 5B |  if_ne	rdlong	local01, fp
31958     04 4E 85 51 |  if_ne	sub	fp, #4
3195c     13 01 48 5C |  if_ne	wrbyte	#0, local01
31960     14 4E 05 F1 | 	add	fp, #20
31964     A7 26 02 FB | 	rdlong	local01, fp
31968     02 26 66 F0 | 	shl	local01, #2
3196c     F2 26 02 F1 | 	add	local01, objptr
31970     10 4E 85 F1 | 	sub	fp, #16
31974     A7 16 02 FB | 	rdlong	arg03, fp
31978     13 17 62 FC | 	wrlong	arg03, local01
3197c     08 4E 05 F1 | 	add	fp, #8
31980     A7 26 CA FA | 	rdbyte	local01, fp wz
31984     0C 4E 85 F1 | 	sub	fp, #12
31988     00 FA 05 A6 |  if_e	mov	result1, #0
3198c     28 00 90 AD |  if_e	jmp	#LR__4851
31990     08 4E 05 F1 | 	add	fp, #8
31994     A7 12 02 F6 | 	mov	arg01, fp
31998     04 4E 85 F1 | 	sub	fp, #4
3199c     A7 14 02 F6 | 	mov	arg02, fp
319a0     04 4E 85 F1 | 	sub	fp, #4
319a4     00 16 06 F6 | 	mov	arg03, #0
319a8     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
319ac     18 4E 05 F1 | 	add	fp, #24
319b0     A7 FA 61 FC | 	wrlong	result1, fp
319b4                 | ' 
319b4                 | ' 	res = mount_volume(&path, &fs, 0);
319b4                 | ' 	return res ;
319b4     18 4E 85 F1 | 	sub	fp, #24
319b8                 | LR__4851
319b8     A7 F0 03 F6 | 	mov	ptra, fp
319bc     B2 00 A0 FD | 	call	#popregs_
319c0                 | _fatfs_cc_f_mount_ret
319c0     2D 00 64 FD | 	ret
319c4                 | 
319c4                 | _fatfs_cc_f_open
319c4     02 4A 05 F6 | 	mov	COUNT_, #2
319c8     A8 00 A0 FD | 	call	#pushregs_
319cc     60 F0 07 F1 | 	add	ptra, #96
319d0     04 4E 05 F1 | 	add	fp, #4
319d4     A7 12 62 FC | 	wrlong	arg01, fp
319d8     04 4E 05 F1 | 	add	fp, #4
319dc     A7 14 62 FC | 	wrlong	arg02, fp
319e0     04 4E 05 F1 | 	add	fp, #4
319e4     A7 16 42 FC | 	wrbyte	arg03, fp
319e8     08 4E 85 F1 | 	sub	fp, #8
319ec     A7 18 0A FB | 	rdlong	arg04, fp wz
319f0     04 4E 85 F1 | 	sub	fp, #4
319f4     09 FA 05 A6 |  if_e	mov	result1, #9
319f8     98 06 90 AD |  if_e	jmp	#LR__4877
319fc     0C 4E 05 F1 | 	add	fp, #12
31a00     A7 18 C2 FA | 	rdbyte	arg04, fp
31a04     3F 18 06 F5 | 	and	arg04, #63
31a08     A7 18 42 FC | 	wrbyte	arg04, fp
31a0c     04 4E 85 F1 | 	sub	fp, #4
31a10     A7 12 02 F6 | 	mov	arg01, fp
31a14     3C 4E 05 F1 | 	add	fp, #60
31a18     A7 14 02 F6 | 	mov	arg02, fp
31a1c     38 4E 85 F1 | 	sub	fp, #56
31a20     A7 16 C2 FA | 	rdbyte	arg03, fp
31a24     0C 4E 85 F1 | 	sub	fp, #12
31a28     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
31a2c     10 4E 05 F1 | 	add	fp, #16
31a30     A7 FA 61 FC | 	wrlong	result1, fp
31a34     10 4E 85 F1 | 	sub	fp, #16
31a38     00 FA 0D F2 | 	cmp	result1, #0 wz
31a3c     2C 06 90 5D |  if_ne	jmp	#LR__4876
31a40     44 4E 05 F1 | 	add	fp, #68
31a44     A7 18 02 FB | 	rdlong	arg04, fp
31a48     30 4E 85 F1 | 	sub	fp, #48
31a4c     A7 18 62 FC | 	wrlong	arg04, fp
31a50     A7 12 02 F6 | 	mov	arg01, fp
31a54     0C 4E 85 F1 | 	sub	fp, #12
31a58     A7 26 02 FB | 	rdlong	local01, fp
31a5c     08 4E 85 F1 | 	sub	fp, #8
31a60     13 15 02 F6 | 	mov	arg02, local01
31a64     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
31a68     10 4E 05 F1 | 	add	fp, #16
31a6c     A7 FA 61 FC | 	wrlong	result1, fp
31a70     10 4E 85 F1 | 	sub	fp, #16
31a74     00 FA 0D F2 | 	cmp	result1, #0 wz
31a78     1C 00 90 5D |  if_ne	jmp	#LR__4860
31a7c     3F 4E 05 F1 | 	add	fp, #63
31a80     A7 18 C2 FA | 	rdbyte	arg04, fp
31a84     3F 4E 85 F1 | 	sub	fp, #63
31a88     80 18 CE F7 | 	test	arg04, #128 wz
31a8c     10 4E 05 51 |  if_ne	add	fp, #16
31a90     A7 0C 68 5C |  if_ne	wrlong	#6, fp
31a94     10 4E 85 51 |  if_ne	sub	fp, #16
31a98                 | LR__4860
31a98     0C 4E 05 F1 | 	add	fp, #12
31a9c     A7 18 C2 FA | 	rdbyte	arg04, fp
31aa0     0C 4E 85 F1 | 	sub	fp, #12
31aa4     1C 18 CE F7 | 	test	arg04, #28 wz
31aa8     F0 01 90 AD |  if_e	jmp	#LR__4865
31aac     10 4E 05 F1 | 	add	fp, #16
31ab0     A7 26 0A FB | 	rdlong	local01, fp wz
31ab4     10 4E 85 F1 | 	sub	fp, #16
31ab8     48 00 90 AD |  if_e	jmp	#LR__4862
31abc     10 4E 05 F1 | 	add	fp, #16
31ac0     A7 18 02 FB | 	rdlong	arg04, fp
31ac4     10 4E 85 F1 | 	sub	fp, #16
31ac8     04 18 0E F2 | 	cmp	arg04, #4 wz
31acc     1C 00 90 5D |  if_ne	jmp	#LR__4861
31ad0     14 4E 05 F1 | 	add	fp, #20
31ad4     A7 12 02 F6 | 	mov	arg01, fp
31ad8     14 4E 85 F1 | 	sub	fp, #20
31adc     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
31ae0     10 4E 05 F1 | 	add	fp, #16
31ae4     A7 FA 61 FC | 	wrlong	result1, fp
31ae8     10 4E 85 F1 | 	sub	fp, #16
31aec                 | LR__4861
31aec     0C 4E 05 F1 | 	add	fp, #12
31af0     A7 26 C2 FA | 	rdbyte	local01, fp
31af4     08 26 46 F5 | 	or	local01, #8
31af8     A7 26 42 FC | 	wrbyte	local01, fp
31afc     0C 4E 85 F1 | 	sub	fp, #12
31b00     3C 00 90 FD | 	jmp	#LR__4864
31b04                 | LR__4862
31b04     1A 4E 05 F1 | 	add	fp, #26
31b08     A7 26 C2 FA | 	rdbyte	local01, fp
31b0c     1A 4E 85 F1 | 	sub	fp, #26
31b10     11 26 CE F7 | 	test	local01, #17 wz
31b14     10 4E 05 51 |  if_ne	add	fp, #16
31b18     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31b1c     10 4E 85 51 |  if_ne	sub	fp, #16
31b20     1C 00 90 5D |  if_ne	jmp	#LR__4863
31b24     0C 4E 05 F1 | 	add	fp, #12
31b28     A7 26 C2 FA | 	rdbyte	local01, fp
31b2c     0C 4E 85 F1 | 	sub	fp, #12
31b30     04 26 CE F7 | 	test	local01, #4 wz
31b34     10 4E 05 51 |  if_ne	add	fp, #16
31b38     A7 10 68 5C |  if_ne	wrlong	#8, fp
31b3c     10 4E 85 51 |  if_ne	sub	fp, #16
31b40                 | LR__4863
31b40                 | LR__4864
31b40     10 4E 05 F1 | 	add	fp, #16
31b44     A7 26 0A FB | 	rdlong	local01, fp wz
31b48     10 4E 85 F1 | 	sub	fp, #16
31b4c     A8 01 90 5D |  if_ne	jmp	#LR__4868
31b50     0C 4E 05 F1 | 	add	fp, #12
31b54     A7 26 C2 FA | 	rdbyte	local01, fp
31b58     0C 4E 85 F1 | 	sub	fp, #12
31b5c     08 26 CE F7 | 	test	local01, #8 wz
31b60     94 01 90 AD |  if_e	jmp	#LR__4868
31b64     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
31b68     54 4E 05 F1 | 	add	fp, #84
31b6c     A7 FA 61 FC | 	wrlong	result1, fp
31b70     24 4E 85 F1 | 	sub	fp, #36
31b74     A7 12 02 FB | 	rdlong	arg01, fp
31b78     0E 12 06 F1 | 	add	arg01, #14
31b7c     09 FB 61 FC | 	wrlong	result1, arg01
31b80     A7 12 02 FB | 	rdlong	arg01, fp
31b84     16 12 06 F1 | 	add	arg01, #22
31b88     24 4E 05 F1 | 	add	fp, #36
31b8c     A7 14 02 FB | 	rdlong	arg02, fp
31b90     09 15 62 FC | 	wrlong	arg02, arg01
31b94     10 4E 85 F1 | 	sub	fp, #16
31b98     A7 12 02 FB | 	rdlong	arg01, fp
31b9c     14 4E 85 F1 | 	sub	fp, #20
31ba0     A7 14 02 FB | 	rdlong	arg02, fp
31ba4     30 4E 85 F1 | 	sub	fp, #48
31ba8     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
31bac     48 4E 05 F1 | 	add	fp, #72
31bb0     A7 FA 61 FC | 	wrlong	result1, fp
31bb4     18 4E 85 F1 | 	sub	fp, #24
31bb8     A7 26 02 FB | 	rdlong	local01, fp
31bbc     0B 26 06 F1 | 	add	local01, #11
31bc0     13 41 48 FC | 	wrbyte	#32, local01
31bc4     14 4E 05 F1 | 	add	fp, #20
31bc8     A7 12 02 FB | 	rdlong	arg01, fp
31bcc     14 4E 85 F1 | 	sub	fp, #20
31bd0     A7 14 02 FB | 	rdlong	arg02, fp
31bd4     30 4E 85 F1 | 	sub	fp, #48
31bd8     00 16 06 F6 | 	mov	arg03, #0
31bdc     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
31be0     30 4E 05 F1 | 	add	fp, #48
31be4     A7 12 02 FB | 	rdlong	arg01, fp
31be8     1C 12 06 F1 | 	add	arg01, #28
31bec     09 01 68 FC | 	wrlong	#0, arg01
31bf0     14 4E 05 F1 | 	add	fp, #20
31bf4     A7 26 02 FB | 	rdlong	local01, fp
31bf8     03 26 06 F1 | 	add	local01, #3
31bfc     13 03 48 FC | 	wrbyte	#1, local01
31c00     04 4E 05 F1 | 	add	fp, #4
31c04     A7 26 0A FB | 	rdlong	local01, fp wz
31c08     48 4E 85 F1 | 	sub	fp, #72
31c0c     E8 00 90 AD |  if_e	jmp	#LR__4868
31c10     44 4E 05 F1 | 	add	fp, #68
31c14     A7 26 02 FB | 	rdlong	local01, fp
31c18     30 26 06 F1 | 	add	local01, #48
31c1c     13 27 02 FB | 	rdlong	local01, local01
31c20     14 4E 05 F1 | 	add	fp, #20
31c24     A7 26 62 FC | 	wrlong	local01, fp
31c28     44 4E 85 F1 | 	sub	fp, #68
31c2c     A7 12 02 F6 | 	mov	arg01, fp
31c30     34 4E 05 F1 | 	add	fp, #52
31c34     A7 14 02 FB | 	rdlong	arg02, fp
31c38     48 4E 85 F1 | 	sub	fp, #72
31c3c     00 16 06 F6 | 	mov	arg03, #0
31c40     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
31c44     10 4E 05 F1 | 	add	fp, #16
31c48     A7 FA 61 FC | 	wrlong	result1, fp
31c4c     10 4E 85 F1 | 	sub	fp, #16
31c50     00 FA 0D F2 | 	cmp	result1, #0 wz
31c54     A0 00 90 5D |  if_ne	jmp	#LR__4868
31c58     44 4E 05 F1 | 	add	fp, #68
31c5c     A7 12 02 FB | 	rdlong	arg01, fp
31c60     14 4E 05 F1 | 	add	fp, #20
31c64     A7 14 02 FB | 	rdlong	arg02, fp
31c68     58 4E 85 F1 | 	sub	fp, #88
31c6c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
31c70     10 4E 05 F1 | 	add	fp, #16
31c74     A7 FA 61 FC | 	wrlong	result1, fp
31c78     34 4E 05 F1 | 	add	fp, #52
31c7c     A7 18 02 FB | 	rdlong	arg04, fp
31c80     04 4E 05 F1 | 	add	fp, #4
31c84     A7 26 02 FB | 	rdlong	local01, fp
31c88     48 4E 85 F1 | 	sub	fp, #72
31c8c     01 26 86 F1 | 	sub	local01, #1
31c90     10 18 06 F1 | 	add	arg04, #16
31c94     0C 27 62 FC | 	wrlong	local01, arg04
31c98     5C 00 90 FD | 	jmp	#LR__4868
31c9c                 | LR__4865
31c9c     10 4E 05 F1 | 	add	fp, #16
31ca0     A7 18 0A FB | 	rdlong	arg04, fp wz
31ca4     10 4E 85 F1 | 	sub	fp, #16
31ca8     4C 00 90 5D |  if_ne	jmp	#LR__4867
31cac     1A 4E 05 F1 | 	add	fp, #26
31cb0     A7 18 C2 FA | 	rdbyte	arg04, fp
31cb4     1A 4E 85 F1 | 	sub	fp, #26
31cb8     10 18 CE F7 | 	test	arg04, #16 wz
31cbc     10 4E 05 51 |  if_ne	add	fp, #16
31cc0     A7 08 68 5C |  if_ne	wrlong	#4, fp
31cc4     10 4E 85 51 |  if_ne	sub	fp, #16
31cc8     2C 00 90 5D |  if_ne	jmp	#LR__4866
31ccc     0C 4E 05 F1 | 	add	fp, #12
31cd0     A7 18 C2 FA | 	rdbyte	arg04, fp
31cd4     0C 4E 85 F1 | 	sub	fp, #12
31cd8     02 18 CE F7 | 	test	arg04, #2 wz
31cdc     1A 4E 05 51 |  if_ne	add	fp, #26
31ce0     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
31ce4     1A 4E 85 51 |  if_ne	sub	fp, #26
31ce8     01 26 CE 57 |  if_ne	test	local01, #1 wz
31cec     10 4E 05 51 |  if_ne	add	fp, #16
31cf0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
31cf4     10 4E 85 51 |  if_ne	sub	fp, #16
31cf8                 | LR__4866
31cf8                 | LR__4867
31cf8                 | LR__4868
31cf8     10 4E 05 F1 | 	add	fp, #16
31cfc     A7 26 0A FB | 	rdlong	local01, fp wz
31d00     10 4E 85 F1 | 	sub	fp, #16
31d04     60 00 90 5D |  if_ne	jmp	#LR__4869
31d08     0C 4E 05 F1 | 	add	fp, #12
31d0c     A7 28 C2 FA | 	rdbyte	local02, fp
31d10     0C 4E 85 F1 | 	sub	fp, #12
31d14     08 28 CE F7 | 	test	local02, #8 wz
31d18     0C 4E 05 51 |  if_ne	add	fp, #12
31d1c     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
31d20     40 28 46 55 |  if_ne	or	local02, #64
31d24     A7 28 42 5C |  if_ne	wrbyte	local02, fp
31d28     0C 4E 85 51 |  if_ne	sub	fp, #12
31d2c     04 4E 05 F1 | 	add	fp, #4
31d30     A7 28 02 FB | 	rdlong	local02, fp
31d34     40 4E 05 F1 | 	add	fp, #64
31d38     A7 26 02 FB | 	rdlong	local01, fp
31d3c     30 26 06 F1 | 	add	local01, #48
31d40     13 27 02 FB | 	rdlong	local01, local01
31d44     20 28 06 F1 | 	add	local02, #32
31d48     14 27 62 FC | 	wrlong	local01, local02
31d4c     40 4E 85 F1 | 	sub	fp, #64
31d50     A7 28 02 FB | 	rdlong	local02, fp
31d54     2C 4E 05 F1 | 	add	fp, #44
31d58     A7 26 02 FB | 	rdlong	local01, fp
31d5c     30 4E 85 F1 | 	sub	fp, #48
31d60     24 28 06 F1 | 	add	local02, #36
31d64     14 27 62 FC | 	wrlong	local01, local02
31d68                 | LR__4869
31d68     10 4E 05 F1 | 	add	fp, #16
31d6c     A7 28 0A FB | 	rdlong	local02, fp wz
31d70     10 4E 85 F1 | 	sub	fp, #16
31d74     F4 02 90 5D |  if_ne	jmp	#LR__4875
31d78     04 4E 05 F1 | 	add	fp, #4
31d7c     A7 28 02 FB | 	rdlong	local02, fp
31d80     40 4E 05 F1 | 	add	fp, #64
31d84     A7 12 02 FB | 	rdlong	arg01, fp
31d88     14 4E 85 F1 | 	sub	fp, #20
31d8c     A7 14 02 FB | 	rdlong	arg02, fp
31d90     30 4E 85 F1 | 	sub	fp, #48
31d94     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
31d98     08 28 06 F1 | 	add	local02, #8
31d9c     14 FB 61 FC | 	wrlong	result1, local02
31da0     04 4E 05 F1 | 	add	fp, #4
31da4     A7 28 02 FB | 	rdlong	local02, fp
31da8     2C 4E 05 F1 | 	add	fp, #44
31dac     A7 12 02 FB | 	rdlong	arg01, fp
31db0     1C 12 06 F1 | 	add	arg01, #28
31db4                 | ' {
31db4                 | ' 
31db4                 | ' 	return *((DWORD*)ptr);
31db4     09 FB 01 FB | 	rdlong	result1, arg01
31db8     0C 28 06 F1 | 	add	local02, #12
31dbc     14 FB 61 FC | 	wrlong	result1, local02
31dc0     2C 4E 85 F1 | 	sub	fp, #44
31dc4     A7 28 02 FB | 	rdlong	local02, fp
31dc8     40 4E 05 F1 | 	add	fp, #64
31dcc     A7 26 02 FB | 	rdlong	local01, fp
31dd0     14 27 62 FC | 	wrlong	local01, local02
31dd4     40 4E 85 F1 | 	sub	fp, #64
31dd8     A7 28 02 FB | 	rdlong	local02, fp
31ddc     40 4E 05 F1 | 	add	fp, #64
31de0     A7 26 02 FB | 	rdlong	local01, fp
31de4     06 26 06 F1 | 	add	local01, #6
31de8     13 27 E2 FA | 	rdword	local01, local01
31dec     04 28 06 F1 | 	add	local02, #4
31df0     14 27 52 FC | 	wrword	local01, local02
31df4     40 4E 85 F1 | 	sub	fp, #64
31df8     A7 28 02 FB | 	rdlong	local02, fp
31dfc     08 4E 05 F1 | 	add	fp, #8
31e00     A7 26 C2 FA | 	rdbyte	local01, fp
31e04     10 28 06 F1 | 	add	local02, #16
31e08     14 27 42 FC | 	wrbyte	local01, local02
31e0c     08 4E 85 F1 | 	sub	fp, #8
31e10     A7 28 02 FB | 	rdlong	local02, fp
31e14     11 28 06 F1 | 	add	local02, #17
31e18     14 01 48 FC | 	wrbyte	#0, local02
31e1c     A7 28 02 FB | 	rdlong	local02, fp
31e20     1C 28 06 F1 | 	add	local02, #28
31e24     14 01 68 FC | 	wrlong	#0, local02
31e28     A7 28 02 FB | 	rdlong	local02, fp
31e2c     14 28 06 F1 | 	add	local02, #20
31e30     14 01 68 FC | 	wrlong	#0, local02
31e34     A7 12 02 FB | 	rdlong	arg01, fp
31e38     04 4E 85 F1 | 	sub	fp, #4
31e3c     28 12 06 F1 | 	add	arg01, #40
31e40     00 14 06 F6 | 	mov	arg02, #0
31e44     09 16 C6 F9 | 	decod	arg03, #9
31e48     98 00 A0 FD | 	call	#\builtin_bytefill_
31e4c     0C 4E 05 F1 | 	add	fp, #12
31e50     A7 28 C2 FA | 	rdbyte	local02, fp
31e54     0C 4E 85 F1 | 	sub	fp, #12
31e58     20 28 CE F7 | 	test	local02, #32 wz
31e5c     0C 02 90 AD |  if_e	jmp	#LR__4874
31e60     04 4E 05 F1 | 	add	fp, #4
31e64     A7 26 02 FB | 	rdlong	local01, fp
31e68     04 4E 85 F1 | 	sub	fp, #4
31e6c     0C 26 06 F1 | 	add	local01, #12
31e70     13 29 02 FB | 	rdlong	local02, local01
31e74     01 28 16 F2 | 	cmp	local02, #1 wc
31e78     F0 01 90 CD |  if_b	jmp	#LR__4874
31e7c     04 4E 05 F1 | 	add	fp, #4
31e80     A7 26 02 FB | 	rdlong	local01, fp
31e84     13 29 02 F6 | 	mov	local02, local01
31e88     0C 26 06 F1 | 	add	local01, #12
31e8c     13 27 02 FB | 	rdlong	local01, local01
31e90     14 28 06 F1 | 	add	local02, #20
31e94     14 27 62 FC | 	wrlong	local01, local02
31e98     40 4E 05 F1 | 	add	fp, #64
31e9c     A7 28 02 FB | 	rdlong	local02, fp
31ea0     0A 28 06 F1 | 	add	local02, #10
31ea4     14 29 E2 FA | 	rdword	local02, local02
31ea8     09 28 66 F0 | 	shl	local02, #9
31eac     08 4E 05 F1 | 	add	fp, #8
31eb0     A7 28 62 FC | 	wrlong	local02, fp
31eb4     48 4E 85 F1 | 	sub	fp, #72
31eb8     A7 28 02 FB | 	rdlong	local02, fp
31ebc     08 28 06 F1 | 	add	local02, #8
31ec0     14 27 02 FB | 	rdlong	local01, local02
31ec4     4C 4E 05 F1 | 	add	fp, #76
31ec8     A7 26 62 FC | 	wrlong	local01, fp
31ecc                 | ' 				fp->fptr = fp->obj.objsize;
31ecc                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
31ecc                 | ' 				clst = fp->obj.sclust;
31ecc                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
31ecc     4C 4E 85 F1 | 	sub	fp, #76
31ed0     A7 28 02 FB | 	rdlong	local02, fp
31ed4     0C 28 06 F1 | 	add	local02, #12
31ed8     14 27 02 FB | 	rdlong	local01, local02
31edc     58 4E 05 F1 | 	add	fp, #88
31ee0     A7 26 62 FC | 	wrlong	local01, fp
31ee4     5C 4E 85 F1 | 	sub	fp, #92
31ee8                 | LR__4870
31ee8     10 4E 05 F1 | 	add	fp, #16
31eec     A7 28 0A FB | 	rdlong	local02, fp wz
31ef0     10 4E 85 F1 | 	sub	fp, #16
31ef4     94 00 90 5D |  if_ne	jmp	#LR__4871
31ef8     5C 4E 05 F1 | 	add	fp, #92
31efc     A7 28 02 FB | 	rdlong	local02, fp
31f00     10 4E 85 F1 | 	sub	fp, #16
31f04     A7 26 02 FB | 	rdlong	local01, fp
31f08     4C 4E 85 F1 | 	sub	fp, #76
31f0c     13 29 1A F2 | 	cmp	local02, local01 wcz
31f10     78 00 90 ED |  if_be	jmp	#LR__4871
31f14     04 4E 05 F1 | 	add	fp, #4
31f18     A7 12 02 FB | 	rdlong	arg01, fp
31f1c     4C 4E 05 F1 | 	add	fp, #76
31f20     A7 14 02 FB | 	rdlong	arg02, fp
31f24     50 4E 85 F1 | 	sub	fp, #80
31f28     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
31f2c     50 4E 05 F1 | 	add	fp, #80
31f30     A7 FA 61 FC | 	wrlong	result1, fp
31f34     50 4E 85 F1 | 	sub	fp, #80
31f38     02 FA 15 F2 | 	cmp	result1, #2 wc
31f3c     10 4E 05 C1 |  if_b	add	fp, #16
31f40     A7 04 68 CC |  if_b	wrlong	#2, fp
31f44     10 4E 85 C1 |  if_b	sub	fp, #16
31f48     50 4E 05 F1 | 	add	fp, #80
31f4c     A7 28 02 FB | 	rdlong	local02, fp
31f50     50 4E 85 F1 | 	sub	fp, #80
31f54     FF FF 7F FF 
31f58     FF 29 0E F2 | 	cmp	local02, ##-1 wz
31f5c     10 4E 05 A1 |  if_e	add	fp, #16
31f60     A7 02 68 AC |  if_e	wrlong	#1, fp
31f64     10 4E 85 A1 |  if_e	sub	fp, #16
31f68     5C 4E 05 F1 | 	add	fp, #92
31f6c     A7 28 02 FB | 	rdlong	local02, fp
31f70     10 4E 85 F1 | 	sub	fp, #16
31f74     A7 26 02 FB | 	rdlong	local01, fp
31f78     13 29 82 F1 | 	sub	local02, local01
31f7c     10 4E 05 F1 | 	add	fp, #16
31f80     A7 28 62 FC | 	wrlong	local02, fp
31f84     5C 4E 85 F1 | 	sub	fp, #92
31f88     5C FF 9F FD | 	jmp	#LR__4870
31f8c                 | LR__4871
31f8c     04 4E 05 F1 | 	add	fp, #4
31f90     A7 28 02 FB | 	rdlong	local02, fp
31f94     4C 4E 05 F1 | 	add	fp, #76
31f98     A7 26 02 FB | 	rdlong	local01, fp
31f9c     18 28 06 F1 | 	add	local02, #24
31fa0     14 27 62 FC | 	wrlong	local01, local02
31fa4     40 4E 85 F1 | 	sub	fp, #64
31fa8     A7 28 0A FB | 	rdlong	local02, fp wz
31fac     10 4E 85 F1 | 	sub	fp, #16
31fb0     B8 00 90 5D |  if_ne	jmp	#LR__4873
31fb4     5C 4E 05 F1 | 	add	fp, #92
31fb8     A7 26 02 FB | 	rdlong	local01, fp
31fbc     5C 4E 85 F1 | 	sub	fp, #92
31fc0     FF 27 CE F7 | 	test	local01, #511 wz
31fc4     A4 00 90 AD |  if_e	jmp	#LR__4873
31fc8     44 4E 05 F1 | 	add	fp, #68
31fcc     A7 12 02 FB | 	rdlong	arg01, fp
31fd0     0C 4E 05 F1 | 	add	fp, #12
31fd4     A7 14 02 FB | 	rdlong	arg02, fp
31fd8     50 4E 85 F1 | 	sub	fp, #80
31fdc     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
31fe0     58 4E 05 F1 | 	add	fp, #88
31fe4     A7 FA 61 FC | 	wrlong	result1, fp
31fe8     00 FA 4D F2 | 	cmps	result1, #0 wz
31fec     58 4E 85 F1 | 	sub	fp, #88
31ff0     10 4E 05 A1 |  if_e	add	fp, #16
31ff4     A7 04 68 AC |  if_e	wrlong	#2, fp
31ff8     10 4E 85 A1 |  if_e	sub	fp, #16
31ffc     6C 00 90 AD |  if_e	jmp	#LR__4872
32000     04 4E 05 F1 | 	add	fp, #4
32004     A7 28 02 FB | 	rdlong	local02, fp
32008     54 4E 05 F1 | 	add	fp, #84
3200c     A7 26 02 FB | 	rdlong	local01, fp
32010     04 4E 05 F1 | 	add	fp, #4
32014     A7 18 02 FB | 	rdlong	arg04, fp
32018     09 18 46 F0 | 	shr	arg04, #9
3201c     0C 27 02 F1 | 	add	local01, arg04
32020     1C 28 06 F1 | 	add	local02, #28
32024     14 27 62 FC | 	wrlong	local01, local02
32028     18 4E 85 F1 | 	sub	fp, #24
3202c     A7 28 02 FB | 	rdlong	local02, fp
32030     01 28 06 F1 | 	add	local02, #1
32034     14 13 C2 FA | 	rdbyte	arg01, local02
32038     40 4E 85 F1 | 	sub	fp, #64
3203c     A7 28 02 FB | 	rdlong	local02, fp
32040     14 15 02 F6 | 	mov	arg02, local02
32044     28 14 06 F1 | 	add	arg02, #40
32048     04 4E 85 F1 | 	sub	fp, #4
3204c     1C 28 06 F1 | 	add	local02, #28
32050     14 17 02 FB | 	rdlong	arg03, local02
32054     01 18 06 F6 | 	mov	arg04, #1
32058     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
3205c     00 FA 0D F2 | 	cmp	result1, #0 wz
32060     10 4E 05 51 |  if_ne	add	fp, #16
32064     A7 02 68 5C |  if_ne	wrlong	#1, fp
32068     10 4E 85 51 |  if_ne	sub	fp, #16
3206c                 | LR__4872
3206c                 | LR__4873
3206c                 | LR__4874
3206c                 | LR__4875
3206c                 | LR__4876
3206c     10 4E 05 F1 | 	add	fp, #16
32070     A7 28 0A FB | 	rdlong	local02, fp wz
32074     10 4E 85 F1 | 	sub	fp, #16
32078     04 4E 05 51 |  if_ne	add	fp, #4
3207c     A7 28 02 5B |  if_ne	rdlong	local02, fp
32080     04 4E 85 51 |  if_ne	sub	fp, #4
32084     14 01 68 5C |  if_ne	wrlong	#0, local02
32088                 | ' 
32088                 | ' 	return res ;
32088     10 4E 05 F1 | 	add	fp, #16
3208c     A7 FA 01 FB | 	rdlong	result1, fp
32090     10 4E 85 F1 | 	sub	fp, #16
32094                 | LR__4877
32094     A7 F0 03 F6 | 	mov	ptra, fp
32098     B2 00 A0 FD | 	call	#popregs_
3209c                 | _fatfs_cc_f_open_ret
3209c     2D 00 64 FD | 	ret
320a0                 | 
320a0                 | _fatfs_cc_f_read
320a0     0E 4A 05 F6 | 	mov	COUNT_, #14
320a4     A8 00 A0 FD | 	call	#pushregs_
320a8     38 F0 07 F1 | 	add	ptra, #56
320ac     04 4E 05 F1 | 	add	fp, #4
320b0     A7 12 62 FC | 	wrlong	arg01, fp
320b4     04 4E 05 F1 | 	add	fp, #4
320b8     A7 14 62 FC | 	wrlong	arg02, fp
320bc     04 4E 05 F1 | 	add	fp, #4
320c0     A7 16 62 FC | 	wrlong	arg03, fp
320c4     04 4E 05 F1 | 	add	fp, #4
320c8     A7 18 62 FC | 	wrlong	arg04, fp
320cc     08 4E 85 F1 | 	sub	fp, #8
320d0     A7 FA 01 FB | 	rdlong	result1, fp
320d4     2C 4E 05 F1 | 	add	fp, #44
320d8     A7 FA 61 FC | 	wrlong	result1, fp
320dc     24 4E 85 F1 | 	sub	fp, #36
320e0     A7 FA 01 FB | 	rdlong	result1, fp
320e4     FD 00 68 FC | 	wrlong	#0, result1
320e8     0C 4E 85 F1 | 	sub	fp, #12
320ec     A7 12 02 FB | 	rdlong	arg01, fp
320f0     14 4E 05 F1 | 	add	fp, #20
320f4     A7 14 02 F6 | 	mov	arg02, fp
320f8     18 4E 85 F1 | 	sub	fp, #24
320fc     24 F7 BF FD | 	call	#_fatfs_cc_validate
32100     14 4E 05 F1 | 	add	fp, #20
32104     A7 FA 61 FC | 	wrlong	result1, fp
32108     00 FA 4D F2 | 	cmps	result1, #0 wz
3210c     14 4E 85 F1 | 	sub	fp, #20
32110     20 00 90 5D |  if_ne	jmp	#LR__4880
32114     04 4E 05 F1 | 	add	fp, #4
32118     A7 14 02 FB | 	rdlong	arg02, fp
3211c     11 14 06 F1 | 	add	arg02, #17
32120     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
32124     10 4E 05 F1 | 	add	fp, #16
32128     A7 14 62 FC | 	wrlong	arg02, fp
3212c     14 4E 85 F1 | 	sub	fp, #20
32130     10 00 90 AD |  if_e	jmp	#LR__4881
32134                 | LR__4880
32134     14 4E 05 F1 | 	add	fp, #20
32138     A7 FA 01 FB | 	rdlong	result1, fp
3213c     14 4E 85 F1 | 	sub	fp, #20
32140     EC 05 90 FD | 	jmp	#LR__4900
32144                 | LR__4881
32144     04 4E 05 F1 | 	add	fp, #4
32148     A7 18 02 FB | 	rdlong	arg04, fp
3214c     04 4E 85 F1 | 	sub	fp, #4
32150     10 18 06 F1 | 	add	arg04, #16
32154     0C 19 C2 FA | 	rdbyte	arg04, arg04
32158     01 18 CE F7 | 	test	arg04, #1 wz
3215c     07 FA 05 A6 |  if_e	mov	result1, #7
32160     CC 05 90 AD |  if_e	jmp	#LR__4900
32164     04 4E 05 F1 | 	add	fp, #4
32168     A7 26 02 FB | 	rdlong	local01, fp
3216c     13 29 02 F6 | 	mov	local02, local01
32170     0C 28 06 F1 | 	add	local02, #12
32174     14 2B 02 FB | 	rdlong	local03, local02
32178     14 26 06 F1 | 	add	local01, #20
3217c     13 27 02 FB | 	rdlong	local01, local01
32180     13 2B 82 F1 | 	sub	local03, local01
32184     20 4E 05 F1 | 	add	fp, #32
32188     A7 2A 62 FC | 	wrlong	local03, fp
3218c     18 4E 85 F1 | 	sub	fp, #24
32190     A7 2C 02 FB | 	rdlong	local04, fp
32194     0C 4E 85 F1 | 	sub	fp, #12
32198     15 2D 1A F2 | 	cmp	local04, local03 wcz
3219c     24 4E 05 11 |  if_a	add	fp, #36
321a0     A7 2C 02 1B |  if_a	rdlong	local04, fp
321a4     18 4E 85 11 |  if_a	sub	fp, #24
321a8     A7 2C 62 1C |  if_a	wrlong	local04, fp
321ac     0C 4E 85 11 |  if_a	sub	fp, #12
321b0                 | ' 
321b0                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
321b0                 | LR__4882
321b0     0C 4E 05 F1 | 	add	fp, #12
321b4     A7 28 02 FB | 	rdlong	local02, fp
321b8     0C 4E 85 F1 | 	sub	fp, #12
321bc     14 2D 02 F6 | 	mov	local04, local02
321c0     01 2C 16 F2 | 	cmp	local04, #1 wc
321c4     64 05 90 CD |  if_b	jmp	#LR__4899
321c8     04 4E 05 F1 | 	add	fp, #4
321cc     A7 2A 02 FB | 	rdlong	local03, fp
321d0     04 4E 85 F1 | 	sub	fp, #4
321d4     14 2A 06 F1 | 	add	local03, #20
321d8     15 2B 02 FB | 	rdlong	local03, local03
321dc     FF 2B CE F7 | 	test	local03, #511 wz
321e0     3C 04 90 5D |  if_ne	jmp	#LR__4897
321e4     04 4E 05 F1 | 	add	fp, #4
321e8     A7 26 02 FB | 	rdlong	local01, fp
321ec     14 26 06 F1 | 	add	local01, #20
321f0     13 2B 02 FB | 	rdlong	local03, local01
321f4     09 2A 46 F0 | 	shr	local03, #9
321f8     14 4E 05 F1 | 	add	fp, #20
321fc     A7 2E 02 FB | 	rdlong	local05, fp
32200     17 31 02 F6 | 	mov	local06, local05
32204     0A 30 06 F1 | 	add	local06, #10
32208     18 33 E2 FA | 	rdword	local07, local06
3220c     0A 30 86 F1 | 	sub	local06, #10
32210     19 35 32 F9 | 	getword	local08, local07, #0
32214     01 34 86 F1 | 	sub	local08, #1
32218     1A 2B 0A F5 | 	and	local03, local08 wz
3221c     18 4E 05 F1 | 	add	fp, #24
32220     A7 2A 62 FC | 	wrlong	local03, fp
32224     30 4E 85 F1 | 	sub	fp, #48
32228     E0 00 90 5D |  if_ne	jmp	#LR__4887
3222c     04 4E 05 F1 | 	add	fp, #4
32230     A7 2A 02 FB | 	rdlong	local03, fp
32234     04 4E 85 F1 | 	sub	fp, #4
32238     14 2A 06 F1 | 	add	local03, #20
3223c     15 2B 0A FB | 	rdlong	local03, local03 wz
32240     20 00 90 5D |  if_ne	jmp	#LR__4883
32244     04 4E 05 F1 | 	add	fp, #4
32248     A7 2A 02 FB | 	rdlong	local03, fp
3224c     08 2A 06 F1 | 	add	local03, #8
32250     15 2B 02 FB | 	rdlong	local03, local03
32254     18 4E 05 F1 | 	add	fp, #24
32258     A7 2A 62 FC | 	wrlong	local03, fp
3225c     1C 4E 85 F1 | 	sub	fp, #28
32260     28 00 90 FD | 	jmp	#LR__4884
32264                 | LR__4883
32264     04 4E 05 F1 | 	add	fp, #4
32268     A7 34 02 FB | 	rdlong	local08, fp
3226c     1A 13 02 F6 | 	mov	arg01, local08
32270     04 4E 85 F1 | 	sub	fp, #4
32274     18 34 06 F1 | 	add	local08, #24
32278     1A 15 02 FB | 	rdlong	arg02, local08
3227c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
32280     1C 4E 05 F1 | 	add	fp, #28
32284     A7 FA 61 FC | 	wrlong	result1, fp
32288     1C 4E 85 F1 | 	sub	fp, #28
3228c                 | LR__4884
3228c     1C 4E 05 F1 | 	add	fp, #28
32290     A7 2A 02 FB | 	rdlong	local03, fp
32294     1C 4E 85 F1 | 	sub	fp, #28
32298     02 2A 16 F2 | 	cmp	local03, #2 wc
3229c     1C 00 90 3D |  if_ae	jmp	#LR__4885
322a0     04 4E 05 F1 | 	add	fp, #4
322a4     A7 2A 02 FB | 	rdlong	local03, fp
322a8     04 4E 85 F1 | 	sub	fp, #4
322ac     11 2A 06 F1 | 	add	local03, #17
322b0     15 05 48 FC | 	wrbyte	#2, local03
322b4     02 FA 05 F6 | 	mov	result1, #2
322b8     74 04 90 FD | 	jmp	#LR__4900
322bc                 | LR__4885
322bc     1C 4E 05 F1 | 	add	fp, #28
322c0     A7 2A 02 FB | 	rdlong	local03, fp
322c4     1C 4E 85 F1 | 	sub	fp, #28
322c8     FF FF 7F FF 
322cc     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
322d0     1C 00 90 5D |  if_ne	jmp	#LR__4886
322d4     04 4E 05 F1 | 	add	fp, #4
322d8     A7 2A 02 FB | 	rdlong	local03, fp
322dc     04 4E 85 F1 | 	sub	fp, #4
322e0     11 2A 06 F1 | 	add	local03, #17
322e4     15 03 48 FC | 	wrbyte	#1, local03
322e8     01 FA 05 F6 | 	mov	result1, #1
322ec     40 04 90 FD | 	jmp	#LR__4900
322f0                 | LR__4886
322f0     04 4E 05 F1 | 	add	fp, #4
322f4     A7 2A 02 FB | 	rdlong	local03, fp
322f8     18 4E 05 F1 | 	add	fp, #24
322fc     A7 34 02 FB | 	rdlong	local08, fp
32300     1C 4E 85 F1 | 	sub	fp, #28
32304     18 2A 06 F1 | 	add	local03, #24
32308     15 35 62 FC | 	wrlong	local08, local03
3230c                 | LR__4887
3230c     18 4E 05 F1 | 	add	fp, #24
32310     A7 12 02 FB | 	rdlong	arg01, fp
32314     14 4E 85 F1 | 	sub	fp, #20
32318     A7 2A 02 FB | 	rdlong	local03, fp
3231c     04 4E 85 F1 | 	sub	fp, #4
32320     18 2A 06 F1 | 	add	local03, #24
32324     15 15 02 FB | 	rdlong	arg02, local03
32328     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
3232c     20 4E 05 F1 | 	add	fp, #32
32330     A7 FA 61 FC | 	wrlong	result1, fp
32334     20 4E 85 F1 | 	sub	fp, #32
32338     00 FA 0D F2 | 	cmp	result1, #0 wz
3233c     1C 00 90 5D |  if_ne	jmp	#LR__4888
32340     04 4E 05 F1 | 	add	fp, #4
32344     A7 2A 02 FB | 	rdlong	local03, fp
32348     04 4E 85 F1 | 	sub	fp, #4
3234c     11 2A 06 F1 | 	add	local03, #17
32350     15 05 48 FC | 	wrbyte	#2, local03
32354     02 FA 05 F6 | 	mov	result1, #2
32358     D4 03 90 FD | 	jmp	#LR__4900
3235c                 | LR__4888
3235c     20 4E 05 F1 | 	add	fp, #32
32360     A7 2A 02 FB | 	rdlong	local03, fp
32364     10 4E 05 F1 | 	add	fp, #16
32368     A7 34 02 FB | 	rdlong	local08, fp
3236c     1A 2B 02 F1 | 	add	local03, local08
32370     10 4E 85 F1 | 	sub	fp, #16
32374     A7 2A 62 FC | 	wrlong	local03, fp
32378     14 4E 85 F1 | 	sub	fp, #20
3237c     A7 2A 02 FB | 	rdlong	local03, fp
32380     09 2A 46 F0 | 	shr	local03, #9
32384     20 4E 05 F1 | 	add	fp, #32
32388     A7 2A 62 FC | 	wrlong	local03, fp
3238c     2C 4E 85 F1 | 	sub	fp, #44
32390     01 2A 16 F2 | 	cmp	local03, #1 wc
32394     5C 01 90 CD |  if_b	jmp	#LR__4892
32398     30 4E 05 F1 | 	add	fp, #48
3239c     A7 2A 02 FB | 	rdlong	local03, fp
323a0     04 4E 85 F1 | 	sub	fp, #4
323a4     A7 34 02 FB | 	rdlong	local08, fp
323a8     1A 2B 02 F1 | 	add	local03, local08
323ac     14 4E 85 F1 | 	sub	fp, #20
323b0     A7 34 02 FB | 	rdlong	local08, fp
323b4     18 4E 85 F1 | 	sub	fp, #24
323b8     0A 34 06 F1 | 	add	local08, #10
323bc     1A 35 E2 FA | 	rdword	local08, local08
323c0     1A 2B 1A F2 | 	cmp	local03, local08 wcz
323c4     28 00 90 ED |  if_be	jmp	#LR__4889
323c8     18 4E 05 F1 | 	add	fp, #24
323cc     A7 26 02 FB | 	rdlong	local01, fp
323d0     0A 26 06 F1 | 	add	local01, #10
323d4     13 2B E2 FA | 	rdword	local03, local01
323d8     18 4E 05 F1 | 	add	fp, #24
323dc     A7 34 02 FB | 	rdlong	local08, fp
323e0     1A 2B 82 F1 | 	sub	local03, local08
323e4     04 4E 85 F1 | 	sub	fp, #4
323e8     A7 2A 62 FC | 	wrlong	local03, fp
323ec     2C 4E 85 F1 | 	sub	fp, #44
323f0                 | LR__4889
323f0     18 4E 05 F1 | 	add	fp, #24
323f4     A7 26 02 FB | 	rdlong	local01, fp
323f8     01 26 06 F1 | 	add	local01, #1
323fc     13 13 C2 FA | 	rdbyte	arg01, local01
32400     1C 4E 05 F1 | 	add	fp, #28
32404     A7 14 02 FB | 	rdlong	arg02, fp
32408     14 4E 85 F1 | 	sub	fp, #20
3240c     A7 16 02 FB | 	rdlong	arg03, fp
32410     0C 4E 05 F1 | 	add	fp, #12
32414     A7 18 02 FB | 	rdlong	arg04, fp
32418     2C 4E 85 F1 | 	sub	fp, #44
3241c     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
32420     00 FA 0D F2 | 	cmp	result1, #0 wz
32424     1C 00 90 AD |  if_e	jmp	#LR__4890
32428     04 4E 05 F1 | 	add	fp, #4
3242c     A7 2A 02 FB | 	rdlong	local03, fp
32430     04 4E 85 F1 | 	sub	fp, #4
32434     11 2A 06 F1 | 	add	local03, #17
32438     15 03 48 FC | 	wrbyte	#1, local03
3243c     01 FA 05 F6 | 	mov	result1, #1
32440     EC 02 90 FD | 	jmp	#LR__4900
32444                 | LR__4890
32444     04 4E 05 F1 | 	add	fp, #4
32448     A7 26 02 FB | 	rdlong	local01, fp
3244c     04 4E 85 F1 | 	sub	fp, #4
32450     10 26 06 F1 | 	add	local01, #16
32454     13 2B C2 FA | 	rdbyte	local03, local01
32458     80 2A CE F7 | 	test	local03, #128 wz
3245c     78 00 90 AD |  if_e	jmp	#LR__4891
32460     04 4E 05 F1 | 	add	fp, #4
32464     A7 34 02 FB | 	rdlong	local08, fp
32468     1C 34 06 F1 | 	add	local08, #28
3246c     1A 35 02 FB | 	rdlong	local08, local08
32470     1C 4E 05 F1 | 	add	fp, #28
32474     A7 36 02 FB | 	rdlong	local09, fp
32478     1B 35 82 F1 | 	sub	local08, local09
3247c     0C 4E 05 F1 | 	add	fp, #12
32480     A7 38 02 FB | 	rdlong	local10, fp
32484     2C 4E 85 F1 | 	sub	fp, #44
32488     1C 3B 02 F6 | 	mov	local11, local10
3248c     1D 35 12 F2 | 	cmp	local08, local11 wc
32490     44 00 90 3D |  if_ae	jmp	#LR__4891
32494     34 4E 05 F1 | 	add	fp, #52
32498     A7 12 02 FB | 	rdlong	arg01, fp
3249c     30 4E 85 F1 | 	sub	fp, #48
324a0     A7 14 02 FB | 	rdlong	arg02, fp
324a4     0A 3B 02 F6 | 	mov	local11, arg02
324a8     1C 3A 06 F1 | 	add	local11, #28
324ac     1D 37 02 FB | 	rdlong	local09, local11
324b0     1C 4E 05 F1 | 	add	fp, #28
324b4     A7 2E 02 FB | 	rdlong	local05, fp
324b8     17 37 82 F1 | 	sub	local09, local05
324bc     09 36 66 F0 | 	shl	local09, #9
324c0     1B 3B 02 F6 | 	mov	local11, local09
324c4     1B 13 02 F1 | 	add	arg01, local09
324c8     20 4E 85 F1 | 	sub	fp, #32
324cc     28 14 06 F1 | 	add	arg02, #40
324d0     09 16 C6 F9 | 	decod	arg03, #9
324d4     60 43 BF FD | 	call	#__system____builtin_memmove
324d8                 | LR__4891
324d8     2C 4E 05 F1 | 	add	fp, #44
324dc     A7 2A 02 FB | 	rdlong	local03, fp
324e0     09 2A 66 F0 | 	shl	local03, #9
324e4     04 4E 85 F1 | 	sub	fp, #4
324e8     A7 2A 62 FC | 	wrlong	local03, fp
324ec     28 4E 85 F1 | 	sub	fp, #40
324f0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
324f0                 | ' 				}
324f0                 | ' 
324f0                 | ' 
324f0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
324f0                 | ' 				continue;
324f0     B4 01 90 FD | 	jmp	#LR__4898
324f4                 | LR__4892
324f4     04 4E 05 F1 | 	add	fp, #4
324f8     A7 2A 02 FB | 	rdlong	local03, fp
324fc     1C 2A 06 F1 | 	add	local03, #28
32500     15 2B 02 FB | 	rdlong	local03, local03
32504     1C 4E 05 F1 | 	add	fp, #28
32508     A7 26 02 FB | 	rdlong	local01, fp
3250c     20 4E 85 F1 | 	sub	fp, #32
32510     13 2B 0A F2 | 	cmp	local03, local01 wz
32514     EC 00 90 AD |  if_e	jmp	#LR__4896
32518     04 4E 05 F1 | 	add	fp, #4
3251c     A7 26 02 FB | 	rdlong	local01, fp
32520     04 4E 85 F1 | 	sub	fp, #4
32524     10 26 06 F1 | 	add	local01, #16
32528     13 2B C2 FA | 	rdbyte	local03, local01
3252c     80 2A CE F7 | 	test	local03, #128 wz
32530     7C 00 90 AD |  if_e	jmp	#LR__4894
32534     18 4E 05 F1 | 	add	fp, #24
32538     A7 26 02 FB | 	rdlong	local01, fp
3253c     01 26 06 F1 | 	add	local01, #1
32540     13 13 C2 FA | 	rdbyte	arg01, local01
32544     14 4E 85 F1 | 	sub	fp, #20
32548     A7 2A 02 FB | 	rdlong	local03, fp
3254c     15 15 02 F6 | 	mov	arg02, local03
32550     28 14 06 F1 | 	add	arg02, #40
32554     04 4E 85 F1 | 	sub	fp, #4
32558     1C 2A 06 F1 | 	add	local03, #28
3255c     15 17 02 FB | 	rdlong	arg03, local03
32560     01 18 06 F6 | 	mov	arg04, #1
32564     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
32568     00 FA 0D F2 | 	cmp	result1, #0 wz
3256c     1C 00 90 AD |  if_e	jmp	#LR__4893
32570     04 4E 05 F1 | 	add	fp, #4
32574     A7 2A 02 FB | 	rdlong	local03, fp
32578     04 4E 85 F1 | 	sub	fp, #4
3257c     11 2A 06 F1 | 	add	local03, #17
32580     15 03 48 FC | 	wrbyte	#1, local03
32584     01 FA 05 F6 | 	mov	result1, #1
32588     A4 01 90 FD | 	jmp	#LR__4900
3258c                 | LR__4893
3258c     04 4E 05 F1 | 	add	fp, #4
32590     A7 3A 02 FB | 	rdlong	local11, fp
32594     1D 2B 02 F6 | 	mov	local03, local11
32598     04 4E 85 F1 | 	sub	fp, #4
3259c     10 3A 06 F1 | 	add	local11, #16
325a0     1D 3B C2 FA | 	rdbyte	local11, local11
325a4     7F 3A 06 F5 | 	and	local11, #127
325a8     10 2A 06 F1 | 	add	local03, #16
325ac     15 3B 42 FC | 	wrbyte	local11, local03
325b0                 | LR__4894
325b0     18 4E 05 F1 | 	add	fp, #24
325b4     A7 26 02 FB | 	rdlong	local01, fp
325b8     01 26 06 F1 | 	add	local01, #1
325bc     13 13 C2 FA | 	rdbyte	arg01, local01
325c0     14 4E 85 F1 | 	sub	fp, #20
325c4     A7 14 02 FB | 	rdlong	arg02, fp
325c8     28 14 06 F1 | 	add	arg02, #40
325cc     1C 4E 05 F1 | 	add	fp, #28
325d0     A7 16 02 FB | 	rdlong	arg03, fp
325d4     20 4E 85 F1 | 	sub	fp, #32
325d8     01 18 06 F6 | 	mov	arg04, #1
325dc     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
325e0     00 FA 0D F2 | 	cmp	result1, #0 wz
325e4     1C 00 90 AD |  if_e	jmp	#LR__4895
325e8     04 4E 05 F1 | 	add	fp, #4
325ec     A7 2A 02 FB | 	rdlong	local03, fp
325f0     04 4E 85 F1 | 	sub	fp, #4
325f4     11 2A 06 F1 | 	add	local03, #17
325f8     15 03 48 FC | 	wrbyte	#1, local03
325fc     01 FA 05 F6 | 	mov	result1, #1
32600     2C 01 90 FD | 	jmp	#LR__4900
32604                 | LR__4895
32604                 | LR__4896
32604     04 4E 05 F1 | 	add	fp, #4
32608     A7 2A 02 FB | 	rdlong	local03, fp
3260c     1C 4E 05 F1 | 	add	fp, #28
32610     A7 3A 02 FB | 	rdlong	local11, fp
32614     20 4E 85 F1 | 	sub	fp, #32
32618     1C 2A 06 F1 | 	add	local03, #28
3261c     15 3B 62 FC | 	wrlong	local11, local03
32620                 | LR__4897
32620     04 4E 05 F1 | 	add	fp, #4
32624     A7 26 02 FB | 	rdlong	local01, fp
32628     14 26 06 F1 | 	add	local01, #20
3262c     13 3B 02 FB | 	rdlong	local11, local01
32630     FF 3B 06 F5 | 	and	local11, #511
32634     09 2A C6 F9 | 	decod	local03, #9
32638     1D 2B 82 F1 | 	sub	local03, local11
3263c     24 4E 05 F1 | 	add	fp, #36
32640     A7 2A 62 FC | 	wrlong	local03, fp
32644     1C 4E 85 F1 | 	sub	fp, #28
32648     A7 3A 02 FB | 	rdlong	local11, fp
3264c     0C 4E 85 F1 | 	sub	fp, #12
32650     1D 2B 1A F2 | 	cmp	local03, local11 wcz
32654     0C 4E 05 11 |  if_a	add	fp, #12
32658     A7 2A 02 1B |  if_a	rdlong	local03, fp
3265c     1C 4E 05 11 |  if_a	add	fp, #28
32660     A7 2A 62 1C |  if_a	wrlong	local03, fp
32664     28 4E 85 11 |  if_a	sub	fp, #40
32668     34 4E 05 F1 | 	add	fp, #52
3266c     A7 12 02 FB | 	rdlong	arg01, fp
32670     30 4E 85 F1 | 	sub	fp, #48
32674     A7 30 02 FB | 	rdlong	local06, fp
32678     18 15 02 F6 | 	mov	arg02, local06
3267c     28 14 06 F1 | 	add	arg02, #40
32680     14 30 06 F1 | 	add	local06, #20
32684     18 3B 02 FB | 	rdlong	local11, local06
32688     1D 37 02 F6 | 	mov	local09, local11
3268c     1B 39 02 F6 | 	mov	local10, local09
32690     FF 39 06 F5 | 	and	local10, #511
32694     1C 15 02 F1 | 	add	arg02, local10
32698     24 4E 05 F1 | 	add	fp, #36
3269c     A7 16 02 FB | 	rdlong	arg03, fp
326a0     28 4E 85 F1 | 	sub	fp, #40
326a4     90 41 BF FD | 	call	#__system____builtin_memmove
326a8                 | LR__4898
326a8     0C 4E 05 F1 | 	add	fp, #12
326ac     A7 2A 02 FB | 	rdlong	local03, fp
326b0     1C 4E 05 F1 | 	add	fp, #28
326b4     A7 34 02 FB | 	rdlong	local08, fp
326b8     1A 2B 82 F1 | 	sub	local03, local08
326bc     1C 4E 85 F1 | 	sub	fp, #28
326c0     A7 2A 62 FC | 	wrlong	local03, fp
326c4     04 4E 05 F1 | 	add	fp, #4
326c8     A7 26 02 FB | 	rdlong	local01, fp
326cc     13 33 02 FB | 	rdlong	local07, local01
326d0     18 4E 05 F1 | 	add	fp, #24
326d4     A7 34 02 FB | 	rdlong	local08, fp
326d8     1A 33 02 F1 | 	add	local07, local08
326dc     13 33 62 FC | 	wrlong	local07, local01
326e0     0C 4E 05 F1 | 	add	fp, #12
326e4     A7 2A 02 FB | 	rdlong	local03, fp
326e8     0C 4E 85 F1 | 	sub	fp, #12
326ec     A7 3C 02 FB | 	rdlong	local12, fp
326f0     1E 2B 02 F1 | 	add	local03, local12
326f4     0C 4E 05 F1 | 	add	fp, #12
326f8     A7 2A 62 FC | 	wrlong	local03, fp
326fc     30 4E 85 F1 | 	sub	fp, #48
32700     A7 3E 02 FB | 	rdlong	local13, fp
32704     1F 2B 02 F6 | 	mov	local03, local13
32708     14 3E 06 F1 | 	add	local13, #20
3270c     1F 41 02 FB | 	rdlong	local14, local13
32710     24 4E 05 F1 | 	add	fp, #36
32714     A7 30 02 FB | 	rdlong	local06, fp
32718     28 4E 85 F1 | 	sub	fp, #40
3271c     18 41 02 F1 | 	add	local14, local06
32720     14 2A 06 F1 | 	add	local03, #20
32724     15 41 62 FC | 	wrlong	local14, local03
32728     84 FA 9F FD | 	jmp	#LR__4882
3272c                 | LR__4899
3272c                 | ' 
3272c                 | ' 
3272c                 | ' 
3272c                 | ' 
3272c                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
3272c                 | ' 
3272c                 | ' 	}
3272c                 | ' 
3272c                 | ' 	return FR_OK ;
3272c     00 FA 05 F6 | 	mov	result1, #0
32730                 | LR__4900
32730     A7 F0 03 F6 | 	mov	ptra, fp
32734     B2 00 A0 FD | 	call	#popregs_
32738                 | _fatfs_cc_f_read_ret
32738     2D 00 64 FD | 	ret
3273c                 | 
3273c                 | _fatfs_cc_f_write
3273c     15 4A 05 F6 | 	mov	COUNT_, #21
32740     A8 00 A0 FD | 	call	#pushregs_
32744     34 F0 07 F1 | 	add	ptra, #52
32748     04 4E 05 F1 | 	add	fp, #4
3274c     A7 12 62 FC | 	wrlong	arg01, fp
32750     04 4E 05 F1 | 	add	fp, #4
32754     A7 14 62 FC | 	wrlong	arg02, fp
32758     04 4E 05 F1 | 	add	fp, #4
3275c     A7 16 62 FC | 	wrlong	arg03, fp
32760     04 4E 05 F1 | 	add	fp, #4
32764     A7 18 62 FC | 	wrlong	arg04, fp
32768     08 4E 85 F1 | 	sub	fp, #8
3276c     A7 FA 01 FB | 	rdlong	result1, fp
32770     28 4E 05 F1 | 	add	fp, #40
32774     A7 FA 61 FC | 	wrlong	result1, fp
32778     20 4E 85 F1 | 	sub	fp, #32
3277c     A7 FA 01 FB | 	rdlong	result1, fp
32780     FD 00 68 FC | 	wrlong	#0, result1
32784     0C 4E 85 F1 | 	sub	fp, #12
32788     A7 12 02 FB | 	rdlong	arg01, fp
3278c     14 4E 05 F1 | 	add	fp, #20
32790     A7 14 02 F6 | 	mov	arg02, fp
32794     18 4E 85 F1 | 	sub	fp, #24
32798     88 F0 BF FD | 	call	#_fatfs_cc_validate
3279c     14 4E 05 F1 | 	add	fp, #20
327a0     A7 FA 61 FC | 	wrlong	result1, fp
327a4     00 FA 4D F2 | 	cmps	result1, #0 wz
327a8     14 4E 85 F1 | 	sub	fp, #20
327ac     20 00 90 5D |  if_ne	jmp	#LR__4910
327b0     04 4E 05 F1 | 	add	fp, #4
327b4     A7 14 02 FB | 	rdlong	arg02, fp
327b8     11 14 06 F1 | 	add	arg02, #17
327bc     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
327c0     10 4E 05 F1 | 	add	fp, #16
327c4     A7 14 62 FC | 	wrlong	arg02, fp
327c8     14 4E 85 F1 | 	sub	fp, #20
327cc     10 00 90 AD |  if_e	jmp	#LR__4911
327d0                 | LR__4910
327d0     14 4E 05 F1 | 	add	fp, #20
327d4     A7 FA 01 FB | 	rdlong	result1, fp
327d8     14 4E 85 F1 | 	sub	fp, #20
327dc     44 07 90 FD | 	jmp	#LR__4933
327e0                 | LR__4911
327e0     04 4E 05 F1 | 	add	fp, #4
327e4     A7 14 02 FB | 	rdlong	arg02, fp
327e8     04 4E 85 F1 | 	sub	fp, #4
327ec     10 14 06 F1 | 	add	arg02, #16
327f0     0A 15 C2 FA | 	rdbyte	arg02, arg02
327f4     02 14 CE F7 | 	test	arg02, #2 wz
327f8     07 FA 05 A6 |  if_e	mov	result1, #7
327fc     24 07 90 AD |  if_e	jmp	#LR__4933
32800     04 4E 05 F1 | 	add	fp, #4
32804     A7 14 02 FB | 	rdlong	arg02, fp
32808     0A 13 02 F6 | 	mov	arg01, arg02
3280c     14 12 06 F1 | 	add	arg01, #20
32810     09 13 02 FB | 	rdlong	arg01, arg01
32814     08 4E 05 F1 | 	add	fp, #8
32818     A7 FA 01 FB | 	rdlong	result1, fp
3281c     FD 12 02 F1 | 	add	arg01, result1
32820     0C 4E 85 F1 | 	sub	fp, #12
32824     14 14 06 F1 | 	add	arg02, #20
32828     0A FB 01 FB | 	rdlong	result1, arg02
3282c     FD 12 12 F2 | 	cmp	arg01, result1 wc
32830     24 00 90 3D |  if_ae	jmp	#LR__4912
32834     04 4E 05 F1 | 	add	fp, #4
32838     A7 14 02 FB | 	rdlong	arg02, fp
3283c     01 FA 65 F6 | 	neg	result1, #1
32840     14 14 06 F1 | 	add	arg02, #20
32844     0A 15 02 FB | 	rdlong	arg02, arg02
32848     0A FB 81 F1 | 	sub	result1, arg02
3284c     08 4E 05 F1 | 	add	fp, #8
32850     A7 FA 61 FC | 	wrlong	result1, fp
32854     0C 4E 85 F1 | 	sub	fp, #12
32858                 | LR__4912
32858                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
32858                 | ' 	}
32858                 | ' 
32858                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
32858                 | LR__4913
32858     0C 4E 05 F1 | 	add	fp, #12
3285c     A7 FA 01 FB | 	rdlong	result1, fp
32860     0C 4E 85 F1 | 	sub	fp, #12
32864     01 FA 15 F2 | 	cmp	result1, #1 wc
32868     90 06 90 CD |  if_b	jmp	#LR__4932
3286c     04 4E 05 F1 | 	add	fp, #4
32870     A7 FA 01 FB | 	rdlong	result1, fp
32874     04 4E 85 F1 | 	sub	fp, #4
32878     14 FA 05 F1 | 	add	result1, #20
3287c     FD FA 01 FB | 	rdlong	result1, result1
32880     FF FB CD F7 | 	test	result1, #511 wz
32884     D8 04 90 5D |  if_ne	jmp	#LR__4928
32888     04 4E 05 F1 | 	add	fp, #4
3288c     A7 FA 01 FB | 	rdlong	result1, fp
32890     14 FA 05 F1 | 	add	result1, #20
32894     FD FA 01 FB | 	rdlong	result1, result1
32898     09 FA 45 F0 | 	shr	result1, #9
3289c     14 4E 05 F1 | 	add	fp, #20
328a0     A7 14 02 FB | 	rdlong	arg02, fp
328a4     0A 14 06 F1 | 	add	arg02, #10
328a8     0A 19 E2 FA | 	rdword	arg04, arg02
328ac     0C 15 32 F9 | 	getword	arg02, arg04, #0
328b0     01 14 86 F1 | 	sub	arg02, #1
328b4     0A FB 09 F5 | 	and	result1, arg02 wz
328b8     14 4E 05 F1 | 	add	fp, #20
328bc     A7 FA 61 FC | 	wrlong	result1, fp
328c0     2C 4E 85 F1 | 	sub	fp, #44
328c4     44 01 90 5D |  if_ne	jmp	#LR__4919
328c8     04 4E 05 F1 | 	add	fp, #4
328cc     A7 FA 01 FB | 	rdlong	result1, fp
328d0     04 4E 85 F1 | 	sub	fp, #4
328d4     14 FA 05 F1 | 	add	result1, #20
328d8     FD 14 0A FB | 	rdlong	arg02, result1 wz
328dc     44 00 90 5D |  if_ne	jmp	#LR__4914
328e0     04 4E 05 F1 | 	add	fp, #4
328e4     A7 14 02 FB | 	rdlong	arg02, fp
328e8     08 14 06 F1 | 	add	arg02, #8
328ec     0A 15 0A FB | 	rdlong	arg02, arg02 wz
328f0     18 4E 05 F1 | 	add	fp, #24
328f4     A7 14 62 FC | 	wrlong	arg02, fp
328f8     1C 4E 85 F1 | 	sub	fp, #28
328fc     4C 00 90 5D |  if_ne	jmp	#LR__4915
32900     04 4E 05 F1 | 	add	fp, #4
32904     A7 12 02 FB | 	rdlong	arg01, fp
32908     04 4E 85 F1 | 	sub	fp, #4
3290c     00 14 06 F6 | 	mov	arg02, #0
32910     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
32914     1C 4E 05 F1 | 	add	fp, #28
32918     A7 FA 61 FC | 	wrlong	result1, fp
3291c     1C 4E 85 F1 | 	sub	fp, #28
32920     28 00 90 FD | 	jmp	#LR__4915
32924                 | LR__4914
32924     04 4E 05 F1 | 	add	fp, #4
32928     A7 18 02 FB | 	rdlong	arg04, fp
3292c     0C 13 02 F6 | 	mov	arg01, arg04
32930     04 4E 85 F1 | 	sub	fp, #4
32934     18 18 06 F1 | 	add	arg04, #24
32938     0C 15 02 FB | 	rdlong	arg02, arg04
3293c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
32940     1C 4E 05 F1 | 	add	fp, #28
32944     A7 FA 61 FC | 	wrlong	result1, fp
32948     1C 4E 85 F1 | 	sub	fp, #28
3294c                 | LR__4915
3294c     1C 4E 05 F1 | 	add	fp, #28
32950     A7 FA 09 FB | 	rdlong	result1, fp wz
32954     1C 4E 85 F1 | 	sub	fp, #28
32958     A0 05 90 AD |  if_e	jmp	#LR__4932
3295c     1C 4E 05 F1 | 	add	fp, #28
32960     A7 FA 01 FB | 	rdlong	result1, fp
32964     1C 4E 85 F1 | 	sub	fp, #28
32968     01 FA 0D F2 | 	cmp	result1, #1 wz
3296c     1C 00 90 5D |  if_ne	jmp	#LR__4916
32970     04 4E 05 F1 | 	add	fp, #4
32974     A7 FA 01 FB | 	rdlong	result1, fp
32978     04 4E 85 F1 | 	sub	fp, #4
3297c     11 FA 05 F1 | 	add	result1, #17
32980     FD 04 48 FC | 	wrbyte	#2, result1
32984     02 FA 05 F6 | 	mov	result1, #2
32988     98 05 90 FD | 	jmp	#LR__4933
3298c                 | LR__4916
3298c     1C 4E 05 F1 | 	add	fp, #28
32990     A7 FA 01 FB | 	rdlong	result1, fp
32994     1C 4E 85 F1 | 	sub	fp, #28
32998     FF FF 7F FF 
3299c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
329a0     1C 00 90 5D |  if_ne	jmp	#LR__4917
329a4     04 4E 05 F1 | 	add	fp, #4
329a8     A7 FA 01 FB | 	rdlong	result1, fp
329ac     04 4E 85 F1 | 	sub	fp, #4
329b0     11 FA 05 F1 | 	add	result1, #17
329b4     FD 02 48 FC | 	wrbyte	#1, result1
329b8     01 FA 05 F6 | 	mov	result1, #1
329bc     64 05 90 FD | 	jmp	#LR__4933
329c0                 | LR__4917
329c0     04 4E 05 F1 | 	add	fp, #4
329c4     A7 FA 01 FB | 	rdlong	result1, fp
329c8     18 4E 05 F1 | 	add	fp, #24
329cc     A7 18 02 FB | 	rdlong	arg04, fp
329d0     18 FA 05 F1 | 	add	result1, #24
329d4     FD 18 62 FC | 	wrlong	arg04, result1
329d8     18 4E 85 F1 | 	sub	fp, #24
329dc     A7 FA 01 FB | 	rdlong	result1, fp
329e0     04 4E 85 F1 | 	sub	fp, #4
329e4     08 FA 05 F1 | 	add	result1, #8
329e8     FD FA 09 FB | 	rdlong	result1, result1 wz
329ec     1C 00 90 5D |  if_ne	jmp	#LR__4918
329f0     04 4E 05 F1 | 	add	fp, #4
329f4     A7 18 02 FB | 	rdlong	arg04, fp
329f8     18 4E 05 F1 | 	add	fp, #24
329fc     A7 FA 01 FB | 	rdlong	result1, fp
32a00     1C 4E 85 F1 | 	sub	fp, #28
32a04     08 18 06 F1 | 	add	arg04, #8
32a08     0C FB 61 FC | 	wrlong	result1, arg04
32a0c                 | LR__4918
32a0c                 | LR__4919
32a0c     04 4E 05 F1 | 	add	fp, #4
32a10     A7 18 02 FB | 	rdlong	arg04, fp
32a14     04 4E 85 F1 | 	sub	fp, #4
32a18     10 18 06 F1 | 	add	arg04, #16
32a1c     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a20     80 18 CE F7 | 	test	arg04, #128 wz
32a24     7C 00 90 AD |  if_e	jmp	#LR__4921
32a28     18 4E 05 F1 | 	add	fp, #24
32a2c     A7 18 02 FB | 	rdlong	arg04, fp
32a30     01 18 06 F1 | 	add	arg04, #1
32a34     0C 13 C2 FA | 	rdbyte	arg01, arg04
32a38     14 4E 85 F1 | 	sub	fp, #20
32a3c     A7 18 02 FB | 	rdlong	arg04, fp
32a40     0C 15 02 F6 | 	mov	arg02, arg04
32a44     28 14 06 F1 | 	add	arg02, #40
32a48     04 4E 85 F1 | 	sub	fp, #4
32a4c     1C 18 06 F1 | 	add	arg04, #28
32a50     0C 17 02 FB | 	rdlong	arg03, arg04
32a54     01 18 06 F6 | 	mov	arg04, #1
32a58     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
32a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
32a60     1C 00 90 AD |  if_e	jmp	#LR__4920
32a64     04 4E 05 F1 | 	add	fp, #4
32a68     A7 FA 01 FB | 	rdlong	result1, fp
32a6c     04 4E 85 F1 | 	sub	fp, #4
32a70     11 FA 05 F1 | 	add	result1, #17
32a74     FD 02 48 FC | 	wrbyte	#1, result1
32a78     01 FA 05 F6 | 	mov	result1, #1
32a7c     A4 04 90 FD | 	jmp	#LR__4933
32a80                 | LR__4920
32a80     04 4E 05 F1 | 	add	fp, #4
32a84     A7 18 02 FB | 	rdlong	arg04, fp
32a88     0C FB 01 F6 | 	mov	result1, arg04
32a8c     04 4E 85 F1 | 	sub	fp, #4
32a90     10 18 06 F1 | 	add	arg04, #16
32a94     0C 19 C2 FA | 	rdbyte	arg04, arg04
32a98     7F 18 06 F5 | 	and	arg04, #127
32a9c     10 FA 05 F1 | 	add	result1, #16
32aa0     FD 18 42 FC | 	wrbyte	arg04, result1
32aa4                 | LR__4921
32aa4     18 4E 05 F1 | 	add	fp, #24
32aa8     A7 12 02 FB | 	rdlong	arg01, fp
32aac     14 4E 85 F1 | 	sub	fp, #20
32ab0     A7 14 02 FB | 	rdlong	arg02, fp
32ab4     04 4E 85 F1 | 	sub	fp, #4
32ab8     18 14 06 F1 | 	add	arg02, #24
32abc     0A 15 02 FB | 	rdlong	arg02, arg02
32ac0     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
32ac4     20 4E 05 F1 | 	add	fp, #32
32ac8     A7 FA 61 FC | 	wrlong	result1, fp
32acc     20 4E 85 F1 | 	sub	fp, #32
32ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
32ad4     1C 00 90 5D |  if_ne	jmp	#LR__4922
32ad8     04 4E 05 F1 | 	add	fp, #4
32adc     A7 FA 01 FB | 	rdlong	result1, fp
32ae0     04 4E 85 F1 | 	sub	fp, #4
32ae4     11 FA 05 F1 | 	add	result1, #17
32ae8     FD 04 48 FC | 	wrbyte	#2, result1
32aec     02 FA 05 F6 | 	mov	result1, #2
32af0     30 04 90 FD | 	jmp	#LR__4933
32af4                 | LR__4922
32af4     20 4E 05 F1 | 	add	fp, #32
32af8     A7 FA 01 FB | 	rdlong	result1, fp
32afc     0C 4E 05 F1 | 	add	fp, #12
32b00     A7 26 02 FB | 	rdlong	local01, fp
32b04     13 FB 01 F1 | 	add	result1, local01
32b08     0C 4E 85 F1 | 	sub	fp, #12
32b0c     A7 FA 61 FC | 	wrlong	result1, fp
32b10     14 4E 85 F1 | 	sub	fp, #20
32b14     A7 FA 01 FB | 	rdlong	result1, fp
32b18     09 FA 45 F0 | 	shr	result1, #9
32b1c     1C 4E 05 F1 | 	add	fp, #28
32b20     A7 FA 61 FC | 	wrlong	result1, fp
32b24     28 4E 85 F1 | 	sub	fp, #40
32b28     01 FA 15 F2 | 	cmp	result1, #1 wc
32b2c     60 01 90 CD |  if_b	jmp	#LR__4926
32b30     2C 4E 05 F1 | 	add	fp, #44
32b34     A7 FA 01 FB | 	rdlong	result1, fp
32b38     04 4E 85 F1 | 	sub	fp, #4
32b3c     A7 18 02 FB | 	rdlong	arg04, fp
32b40     0C FB 01 F1 | 	add	result1, arg04
32b44     10 4E 85 F1 | 	sub	fp, #16
32b48     A7 18 02 FB | 	rdlong	arg04, fp
32b4c     18 4E 85 F1 | 	sub	fp, #24
32b50     0A 18 06 F1 | 	add	arg04, #10
32b54     0C 19 E2 FA | 	rdword	arg04, arg04
32b58     0C FB 19 F2 | 	cmp	result1, arg04 wcz
32b5c     28 00 90 ED |  if_be	jmp	#LR__4923
32b60     18 4E 05 F1 | 	add	fp, #24
32b64     A7 FA 01 FB | 	rdlong	result1, fp
32b68     0A FA 05 F1 | 	add	result1, #10
32b6c     FD FA E1 FA | 	rdword	result1, result1
32b70     14 4E 05 F1 | 	add	fp, #20
32b74     A7 18 02 FB | 	rdlong	arg04, fp
32b78     0C FB 81 F1 | 	sub	result1, arg04
32b7c     04 4E 85 F1 | 	sub	fp, #4
32b80     A7 FA 61 FC | 	wrlong	result1, fp
32b84     28 4E 85 F1 | 	sub	fp, #40
32b88                 | LR__4923
32b88     18 4E 05 F1 | 	add	fp, #24
32b8c     A7 18 02 FB | 	rdlong	arg04, fp
32b90     01 18 06 F1 | 	add	arg04, #1
32b94     0C 13 C2 FA | 	rdbyte	arg01, arg04
32b98     18 4E 05 F1 | 	add	fp, #24
32b9c     A7 14 02 FB | 	rdlong	arg02, fp
32ba0     10 4E 85 F1 | 	sub	fp, #16
32ba4     A7 16 02 FB | 	rdlong	arg03, fp
32ba8     08 4E 05 F1 | 	add	fp, #8
32bac     A7 18 02 FB | 	rdlong	arg04, fp
32bb0     28 4E 85 F1 | 	sub	fp, #40
32bb4     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
32bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
32bbc     1C 00 90 AD |  if_e	jmp	#LR__4924
32bc0     04 4E 05 F1 | 	add	fp, #4
32bc4     A7 26 02 FB | 	rdlong	local01, fp
32bc8     04 4E 85 F1 | 	sub	fp, #4
32bcc     11 26 06 F1 | 	add	local01, #17
32bd0     13 03 48 FC | 	wrbyte	#1, local01
32bd4     01 FA 05 F6 | 	mov	result1, #1
32bd8     48 03 90 FD | 	jmp	#LR__4933
32bdc                 | LR__4924
32bdc     04 4E 05 F1 | 	add	fp, #4
32be0     A7 FA 01 FB | 	rdlong	result1, fp
32be4     1C FA 05 F1 | 	add	result1, #28
32be8     FD FA 01 FB | 	rdlong	result1, result1
32bec     1C 4E 05 F1 | 	add	fp, #28
32bf0     A7 28 02 FB | 	rdlong	local02, fp
32bf4     14 FB 81 F1 | 	sub	result1, local02
32bf8     08 4E 05 F1 | 	add	fp, #8
32bfc     A7 18 02 FB | 	rdlong	arg04, fp
32c00     28 4E 85 F1 | 	sub	fp, #40
32c04     0C FB 11 F2 | 	cmp	result1, arg04 wc
32c08     68 00 90 3D |  if_ae	jmp	#LR__4925
32c0c     04 4E 05 F1 | 	add	fp, #4
32c10     A7 12 02 FB | 	rdlong	arg01, fp
32c14     28 12 06 F1 | 	add	arg01, #40
32c18     2C 4E 05 F1 | 	add	fp, #44
32c1c     A7 14 02 FB | 	rdlong	arg02, fp
32c20     2C 4E 85 F1 | 	sub	fp, #44
32c24     A7 FA 01 FB | 	rdlong	result1, fp
32c28     1C FA 05 F1 | 	add	result1, #28
32c2c     FD 2A 02 FB | 	rdlong	local03, result1
32c30     1C 4E 05 F1 | 	add	fp, #28
32c34     A7 18 02 FB | 	rdlong	arg04, fp
32c38     20 4E 85 F1 | 	sub	fp, #32
32c3c     0C 2B 82 F1 | 	sub	local03, arg04
32c40     09 2A 66 F0 | 	shl	local03, #9
32c44     15 15 02 F1 | 	add	arg02, local03
32c48     09 16 C6 F9 | 	decod	arg03, #9
32c4c     E8 3B BF FD | 	call	#__system____builtin_memmove
32c50     04 4E 05 F1 | 	add	fp, #4
32c54     A7 18 02 FB | 	rdlong	arg04, fp
32c58     0C FB 01 F6 | 	mov	result1, arg04
32c5c     04 4E 85 F1 | 	sub	fp, #4
32c60     10 18 06 F1 | 	add	arg04, #16
32c64     0C 19 C2 FA | 	rdbyte	arg04, arg04
32c68     7F 18 06 F5 | 	and	arg04, #127
32c6c     10 FA 05 F1 | 	add	result1, #16
32c70     FD 18 42 FC | 	wrbyte	arg04, result1
32c74                 | LR__4925
32c74     28 4E 05 F1 | 	add	fp, #40
32c78     A7 FA 01 FB | 	rdlong	result1, fp
32c7c     09 FA 65 F0 | 	shl	result1, #9
32c80     04 4E 85 F1 | 	sub	fp, #4
32c84     A7 FA 61 FC | 	wrlong	result1, fp
32c88     24 4E 85 F1 | 	sub	fp, #36
32c8c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
32c8c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
32c8c                 | ' 				}
32c8c                 | ' 
32c8c                 | ' 
32c8c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
32c8c                 | ' 				continue;
32c8c     74 01 90 FD | 	jmp	#LR__4929
32c90                 | LR__4926
32c90     04 4E 05 F1 | 	add	fp, #4
32c94     A7 28 02 FB | 	rdlong	local02, fp
32c98     1C 28 06 F1 | 	add	local02, #28
32c9c     14 FB 01 FB | 	rdlong	result1, local02
32ca0     1C 4E 05 F1 | 	add	fp, #28
32ca4     A7 28 02 FB | 	rdlong	local02, fp
32ca8     20 4E 85 F1 | 	sub	fp, #32
32cac     14 FB 09 F2 | 	cmp	result1, local02 wz
32cb0     90 00 90 AD |  if_e	jmp	#LR__4927
32cb4     04 4E 05 F1 | 	add	fp, #4
32cb8     A7 FA 01 FB | 	rdlong	result1, fp
32cbc     FD 2A 02 F6 | 	mov	local03, result1
32cc0     04 4E 85 F1 | 	sub	fp, #4
32cc4     14 2A 06 F1 | 	add	local03, #20
32cc8     15 2B 02 FB | 	rdlong	local03, local03
32ccc     0C FA 05 F1 | 	add	result1, #12
32cd0     FD 2C 02 FB | 	rdlong	local04, result1
32cd4     16 2F 02 F6 | 	mov	local05, local04
32cd8     17 2B 12 F2 | 	cmp	local03, local05 wc
32cdc     64 00 90 3D |  if_ae	jmp	#LR__4927
32ce0     18 4E 05 F1 | 	add	fp, #24
32ce4     A7 18 02 FB | 	rdlong	arg04, fp
32ce8     01 18 06 F1 | 	add	arg04, #1
32cec     0C 13 C2 FA | 	rdbyte	arg01, arg04
32cf0     14 4E 85 F1 | 	sub	fp, #20
32cf4     A7 30 02 FB | 	rdlong	local06, fp
32cf8     28 30 06 F1 | 	add	local06, #40
32cfc     18 33 02 F6 | 	mov	local07, local06
32d00     1C 4E 05 F1 | 	add	fp, #28
32d04     A7 34 02 FB | 	rdlong	local08, fp
32d08     20 4E 85 F1 | 	sub	fp, #32
32d0c     01 36 06 F6 | 	mov	local09, #1
32d10     19 15 02 F6 | 	mov	arg02, local07
32d14     1A 17 02 F6 | 	mov	arg03, local08
32d18     01 18 06 F6 | 	mov	arg04, #1
32d1c     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
32d20     FD 38 0A F6 | 	mov	local10, result1 wz
32d24     1C 00 90 AD |  if_e	jmp	#LR__4927
32d28     04 4E 05 F1 | 	add	fp, #4
32d2c     A7 38 02 FB | 	rdlong	local10, fp
32d30     04 4E 85 F1 | 	sub	fp, #4
32d34     11 38 06 F1 | 	add	local10, #17
32d38     1C 03 48 FC | 	wrbyte	#1, local10
32d3c                 | ' 				fp->fptr < fp->obj.objsize &&
32d3c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
32d3c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
32d3c     01 FA 05 F6 | 	mov	result1, #1
32d40     E0 01 90 FD | 	jmp	#LR__4933
32d44                 | LR__4927
32d44     04 4E 05 F1 | 	add	fp, #4
32d48     A7 18 02 FB | 	rdlong	arg04, fp
32d4c     1C 4E 05 F1 | 	add	fp, #28
32d50     A7 FA 01 FB | 	rdlong	result1, fp
32d54     20 4E 85 F1 | 	sub	fp, #32
32d58     1C 18 06 F1 | 	add	arg04, #28
32d5c     0C FB 61 FC | 	wrlong	result1, arg04
32d60                 | LR__4928
32d60     04 4E 05 F1 | 	add	fp, #4
32d64     A7 FA 01 FB | 	rdlong	result1, fp
32d68     14 FA 05 F1 | 	add	result1, #20
32d6c     FD FA 01 FB | 	rdlong	result1, result1
32d70     FF FB 05 F5 | 	and	result1, #511
32d74     09 3A C6 F9 | 	decod	local11, #9
32d78     FD 3A 82 F1 | 	sub	local11, result1
32d7c     20 4E 05 F1 | 	add	fp, #32
32d80     A7 3A 62 FC | 	wrlong	local11, fp
32d84     18 4E 85 F1 | 	sub	fp, #24
32d88     A7 FA 01 FB | 	rdlong	result1, fp
32d8c     0C 4E 85 F1 | 	sub	fp, #12
32d90     FD 3A 1A F2 | 	cmp	local11, result1 wcz
32d94     0C 4E 05 11 |  if_a	add	fp, #12
32d98     A7 3A 02 1B |  if_a	rdlong	local11, fp
32d9c     18 4E 05 11 |  if_a	add	fp, #24
32da0     A7 3A 62 1C |  if_a	wrlong	local11, fp
32da4     24 4E 85 11 |  if_a	sub	fp, #36
32da8     04 4E 05 F1 | 	add	fp, #4
32dac     A7 3A 02 FB | 	rdlong	local11, fp
32db0     1D 13 02 F6 | 	mov	arg01, local11
32db4     28 12 06 F1 | 	add	arg01, #40
32db8     14 3A 06 F1 | 	add	local11, #20
32dbc     1D 3B 02 FB | 	rdlong	local11, local11
32dc0     FF 3B 06 F5 | 	and	local11, #511
32dc4     1D 13 02 F1 | 	add	arg01, local11
32dc8     2C 4E 05 F1 | 	add	fp, #44
32dcc     A7 14 02 FB | 	rdlong	arg02, fp
32dd0     0C 4E 85 F1 | 	sub	fp, #12
32dd4     A7 16 02 FB | 	rdlong	arg03, fp
32dd8     24 4E 85 F1 | 	sub	fp, #36
32ddc     58 3A BF FD | 	call	#__system____builtin_memmove
32de0     04 4E 05 F1 | 	add	fp, #4
32de4     A7 FA 01 FB | 	rdlong	result1, fp
32de8     FD 3A 02 F6 | 	mov	local11, result1
32dec     04 4E 85 F1 | 	sub	fp, #4
32df0     10 FA 05 F1 | 	add	result1, #16
32df4     FD FA C1 FA | 	rdbyte	result1, result1
32df8     80 FA 45 F5 | 	or	result1, #128
32dfc     10 3A 06 F1 | 	add	local11, #16
32e00     1D FB 41 FC | 	wrbyte	result1, local11
32e04                 | LR__4929
32e04     0C 4E 05 F1 | 	add	fp, #12
32e08     A7 3A 02 FB | 	rdlong	local11, fp
32e0c     18 4E 05 F1 | 	add	fp, #24
32e10     A7 FA 01 FB | 	rdlong	result1, fp
32e14     FD 3A 82 F1 | 	sub	local11, result1
32e18     18 4E 85 F1 | 	sub	fp, #24
32e1c     A7 3A 62 FC | 	wrlong	local11, fp
32e20     04 4E 05 F1 | 	add	fp, #4
32e24     A7 3C 02 FB | 	rdlong	local12, fp
32e28     1E 3B 02 FB | 	rdlong	local11, local12
32e2c     14 4E 05 F1 | 	add	fp, #20
32e30     A7 3E 02 FB | 	rdlong	local13, fp
32e34     1F 3B 02 F1 | 	add	local11, local13
32e38     1E 3B 62 FC | 	wrlong	local11, local12
32e3c     0C 4E 05 F1 | 	add	fp, #12
32e40     A7 3A 02 FB | 	rdlong	local11, fp
32e44     0C 4E 85 F1 | 	sub	fp, #12
32e48     A7 40 02 FB | 	rdlong	local14, fp
32e4c     20 3B 02 F1 | 	add	local11, local14
32e50     0C 4E 05 F1 | 	add	fp, #12
32e54     A7 3A 62 FC | 	wrlong	local11, fp
32e58     2C 4E 85 F1 | 	sub	fp, #44
32e5c     A7 42 02 FB | 	rdlong	local15, fp
32e60     21 3B 02 F6 | 	mov	local11, local15
32e64     14 42 06 F1 | 	add	local15, #20
32e68     21 43 02 FB | 	rdlong	local15, local15
32e6c     20 4E 05 F1 | 	add	fp, #32
32e70     A7 44 02 FB | 	rdlong	local16, fp
32e74     22 43 02 F1 | 	add	local15, local16
32e78     14 3A 06 F1 | 	add	local11, #20
32e7c     1D 43 62 FC | 	wrlong	local15, local11
32e80     20 4E 85 F1 | 	sub	fp, #32
32e84     A7 46 02 FB | 	rdlong	local17, fp
32e88     23 3B 02 F6 | 	mov	local11, local17
32e8c     23 49 02 F6 | 	mov	local18, local17
32e90     04 4E 85 F1 | 	sub	fp, #4
32e94     14 46 06 F1 | 	add	local17, #20
32e98     23 4B 02 FB | 	rdlong	local19, local17
32e9c     0C 48 06 F1 | 	add	local18, #12
32ea0     24 4D 02 FB | 	rdlong	local20, local18
32ea4     26 4B 1A F2 | 	cmp	local19, local20 wcz
32ea8     24 00 90 ED |  if_be	jmp	#LR__4930
32eac     04 4E 05 F1 | 	add	fp, #4
32eb0     A7 2E 02 FB | 	rdlong	local05, fp
32eb4     04 4E 85 F1 | 	sub	fp, #4
32eb8     17 2B 02 F6 | 	mov	local03, local05
32ebc     14 2A 06 F1 | 	add	local03, #20
32ec0     15 2D 02 FB | 	rdlong	local04, local03
32ec4     14 2A 86 F1 | 	sub	local03, #20
32ec8     16 4F 02 F6 | 	mov	local21, local04
32ecc     20 00 90 FD | 	jmp	#LR__4931
32ed0                 | LR__4930
32ed0     04 4E 05 F1 | 	add	fp, #4
32ed4     A7 32 02 FB | 	rdlong	local07, fp
32ed8     04 4E 85 F1 | 	sub	fp, #4
32edc     19 39 02 F6 | 	mov	local10, local07
32ee0     0C 38 06 F1 | 	add	local10, #12
32ee4     1C 35 02 FB | 	rdlong	local08, local10
32ee8     0C 38 86 F1 | 	sub	local10, #12
32eec     1A 4F 02 F6 | 	mov	local21, local08
32ef0                 | LR__4931
32ef0     0C 3A 06 F1 | 	add	local11, #12
32ef4     1D 4F 62 FC | 	wrlong	local21, local11
32ef8     5C F9 9F FD | 	jmp	#LR__4913
32efc                 | LR__4932
32efc     04 4E 05 F1 | 	add	fp, #4
32f00     A7 3C 02 FB | 	rdlong	local12, fp
32f04     1E 27 02 F6 | 	mov	local01, local12
32f08     04 4E 85 F1 | 	sub	fp, #4
32f0c     10 3C 06 F1 | 	add	local12, #16
32f10     1E 3B C2 FA | 	rdbyte	local11, local12
32f14     40 3A 46 F5 | 	or	local11, #64
32f18     10 26 06 F1 | 	add	local01, #16
32f1c     13 3B 42 FC | 	wrbyte	local11, local01
32f20                 | ' 
32f20                 | ' 
32f20                 | ' 
32f20                 | ' 
32f20                 | ' 
32f20                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
32f20                 | ' 		fp->flag |=  0x80 ;
32f20                 | ' 
32f20                 | ' 	}
32f20                 | ' 
32f20                 | ' 	fp->flag |=  0x40 ;
32f20                 | ' 
32f20                 | ' 	return FR_OK ;
32f20     00 FA 05 F6 | 	mov	result1, #0
32f24                 | LR__4933
32f24     A7 F0 03 F6 | 	mov	ptra, fp
32f28     B2 00 A0 FD | 	call	#popregs_
32f2c                 | _fatfs_cc_f_write_ret
32f2c     2D 00 64 FD | 	ret
32f30                 | 
32f30                 | _fatfs_cc_f_sync
32f30     00 4A 05 F6 | 	mov	COUNT_, #0
32f34     A8 00 A0 FD | 	call	#pushregs_
32f38     18 F0 07 F1 | 	add	ptra, #24
32f3c     04 4E 05 F1 | 	add	fp, #4
32f40     A7 12 62 FC | 	wrlong	arg01, fp
32f44     08 4E 05 F1 | 	add	fp, #8
32f48     A7 14 02 F6 | 	mov	arg02, fp
32f4c     0C 4E 85 F1 | 	sub	fp, #12
32f50     D0 E8 BF FD | 	call	#_fatfs_cc_validate
32f54     08 4E 05 F1 | 	add	fp, #8
32f58     A7 FA 61 FC | 	wrlong	result1, fp
32f5c     08 4E 85 F1 | 	sub	fp, #8
32f60     00 FA 0D F2 | 	cmp	result1, #0 wz
32f64     C0 01 90 5D |  if_ne	jmp	#LR__4943
32f68     04 4E 05 F1 | 	add	fp, #4
32f6c     A7 18 02 FB | 	rdlong	arg04, fp
32f70     04 4E 85 F1 | 	sub	fp, #4
32f74     10 18 06 F1 | 	add	arg04, #16
32f78     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f7c     40 18 CE F7 | 	test	arg04, #64 wz
32f80     A4 01 90 AD |  if_e	jmp	#LR__4942
32f84     04 4E 05 F1 | 	add	fp, #4
32f88     A7 18 02 FB | 	rdlong	arg04, fp
32f8c     04 4E 85 F1 | 	sub	fp, #4
32f90     10 18 06 F1 | 	add	arg04, #16
32f94     0C 19 C2 FA | 	rdbyte	arg04, arg04
32f98     80 18 CE F7 | 	test	arg04, #128 wz
32f9c     64 00 90 AD |  if_e	jmp	#LR__4940
32fa0     0C 4E 05 F1 | 	add	fp, #12
32fa4     A7 18 02 FB | 	rdlong	arg04, fp
32fa8     01 18 06 F1 | 	add	arg04, #1
32fac     0C 13 C2 FA | 	rdbyte	arg01, arg04
32fb0     08 4E 85 F1 | 	sub	fp, #8
32fb4     A7 18 02 FB | 	rdlong	arg04, fp
32fb8     0C 15 02 F6 | 	mov	arg02, arg04
32fbc     28 14 06 F1 | 	add	arg02, #40
32fc0     04 4E 85 F1 | 	sub	fp, #4
32fc4     1C 18 06 F1 | 	add	arg04, #28
32fc8     0C 17 02 FB | 	rdlong	arg03, arg04
32fcc     01 18 06 F6 | 	mov	arg04, #1
32fd0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
32fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
32fd8     01 FA 05 56 |  if_ne	mov	result1, #1
32fdc     54 01 90 5D |  if_ne	jmp	#LR__4944
32fe0     04 4E 05 F1 | 	add	fp, #4
32fe4     A7 18 02 FB | 	rdlong	arg04, fp
32fe8     0C 17 02 F6 | 	mov	arg03, arg04
32fec     04 4E 85 F1 | 	sub	fp, #4
32ff0     10 18 06 F1 | 	add	arg04, #16
32ff4     0C 19 C2 FA | 	rdbyte	arg04, arg04
32ff8     7F 18 06 F5 | 	and	arg04, #127
32ffc     10 16 06 F1 | 	add	arg03, #16
33000     0B 19 42 FC | 	wrbyte	arg04, arg03
33004                 | LR__4940
33004     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
33008     10 4E 05 F1 | 	add	fp, #16
3300c     A7 FA 61 FC | 	wrlong	result1, fp
33010     04 4E 85 F1 | 	sub	fp, #4
33014     A7 12 02 FB | 	rdlong	arg01, fp
33018     08 4E 85 F1 | 	sub	fp, #8
3301c     A7 18 02 FB | 	rdlong	arg04, fp
33020     04 4E 85 F1 | 	sub	fp, #4
33024     20 18 06 F1 | 	add	arg04, #32
33028     0C 15 02 FB | 	rdlong	arg02, arg04
3302c     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
33030     08 4E 05 F1 | 	add	fp, #8
33034     A7 FA 61 FC | 	wrlong	result1, fp
33038     08 4E 85 F1 | 	sub	fp, #8
3303c     00 FA 0D F2 | 	cmp	result1, #0 wz
33040     E4 00 90 5D |  if_ne	jmp	#LR__4941
33044     04 4E 05 F1 | 	add	fp, #4
33048     A7 18 02 FB | 	rdlong	arg04, fp
3304c     24 18 06 F1 | 	add	arg04, #36
33050     0C 19 02 FB | 	rdlong	arg04, arg04
33054     10 4E 05 F1 | 	add	fp, #16
33058     A7 18 62 FC | 	wrlong	arg04, fp
3305c     0C 17 02 F6 | 	mov	arg03, arg04
33060     0B 16 06 F1 | 	add	arg03, #11
33064     0B 17 C2 FA | 	rdbyte	arg03, arg03
33068     20 16 46 F5 | 	or	arg03, #32
3306c     0B 18 06 F1 | 	add	arg04, #11
33070     0C 17 42 FC | 	wrbyte	arg03, arg04
33074     10 4E 85 F1 | 	sub	fp, #16
33078     A7 18 02 FB | 	rdlong	arg04, fp
3307c     0C 13 02 FB | 	rdlong	arg01, arg04
33080     10 4E 05 F1 | 	add	fp, #16
33084     A7 14 02 FB | 	rdlong	arg02, fp
33088     14 4E 85 F1 | 	sub	fp, #20
3308c     08 18 06 F1 | 	add	arg04, #8
33090     0C 17 02 FB | 	rdlong	arg03, arg04
33094     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
33098     14 4E 05 F1 | 	add	fp, #20
3309c     A7 12 02 FB | 	rdlong	arg01, fp
330a0     1C 12 06 F1 | 	add	arg01, #28
330a4     10 4E 85 F1 | 	sub	fp, #16
330a8     A7 18 02 FB | 	rdlong	arg04, fp
330ac     0C 18 06 F1 | 	add	arg04, #12
330b0     0C 15 02 FB | 	rdlong	arg02, arg04
330b4     09 15 62 FC | 	wrlong	arg02, arg01
330b8     10 4E 05 F1 | 	add	fp, #16
330bc     A7 12 02 FB | 	rdlong	arg01, fp
330c0     16 12 06 F1 | 	add	arg01, #22
330c4     04 4E 85 F1 | 	sub	fp, #4
330c8     A7 14 02 FB | 	rdlong	arg02, fp
330cc     09 15 62 FC | 	wrlong	arg02, arg01
330d0     04 4E 05 F1 | 	add	fp, #4
330d4     A7 12 02 FB | 	rdlong	arg01, fp
330d8     12 12 06 F1 | 	add	arg01, #18
330dc     09 01 58 FC | 	wrword	#0, arg01
330e0     08 4E 85 F1 | 	sub	fp, #8
330e4     A7 18 02 FB | 	rdlong	arg04, fp
330e8     03 18 06 F1 | 	add	arg04, #3
330ec     0C 03 48 FC | 	wrbyte	#1, arg04
330f0     A7 12 02 FB | 	rdlong	arg01, fp
330f4     0C 4E 85 F1 | 	sub	fp, #12
330f8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
330fc     08 4E 05 F1 | 	add	fp, #8
33100     A7 FA 61 FC | 	wrlong	result1, fp
33104     04 4E 85 F1 | 	sub	fp, #4
33108     A7 18 02 FB | 	rdlong	arg04, fp
3310c     0C 17 02 F6 | 	mov	arg03, arg04
33110     04 4E 85 F1 | 	sub	fp, #4
33114     10 18 06 F1 | 	add	arg04, #16
33118     0C 19 C2 FA | 	rdbyte	arg04, arg04
3311c     BF 18 06 F5 | 	and	arg04, #191
33120     10 16 06 F1 | 	add	arg03, #16
33124     0B 19 42 FC | 	wrbyte	arg04, arg03
33128                 | LR__4941
33128                 | LR__4942
33128                 | LR__4943
33128                 | ' 					dir = fp->dir_ptr;
33128                 | ' 					dir[ 11 ] |=  0x20 ;
33128                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
33128                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
33128                 | ' 					st_dword(dir +  22 , tm);
33128                 | ' 					st_word(dir +  18 , 0);
33128                 | ' 					fs->wflag = 1;
33128                 | ' 					res = sync_fs(fs);
33128                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
33128                 | ' 				}
33128                 | ' 			}
33128                 | ' 		}
33128                 | ' 	}
33128                 | ' 
33128                 | ' 	return res ;
33128     08 4E 05 F1 | 	add	fp, #8
3312c     A7 FA 01 FB | 	rdlong	result1, fp
33130     08 4E 85 F1 | 	sub	fp, #8
33134                 | LR__4944
33134     A7 F0 03 F6 | 	mov	ptra, fp
33138     B2 00 A0 FD | 	call	#popregs_
3313c                 | _fatfs_cc_f_sync_ret
3313c     2D 00 64 FD | 	ret
33140                 | 
33140                 | _fatfs_cc_f_close
33140     01 4A 05 F6 | 	mov	COUNT_, #1
33144     A8 00 A0 FD | 	call	#pushregs_
33148     10 F0 07 F1 | 	add	ptra, #16
3314c     04 4E 05 F1 | 	add	fp, #4
33150     A7 12 62 FC | 	wrlong	arg01, fp
33154     04 4E 85 F1 | 	sub	fp, #4
33158     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
3315c     08 4E 05 F1 | 	add	fp, #8
33160     A7 FA 61 FC | 	wrlong	result1, fp
33164     08 4E 85 F1 | 	sub	fp, #8
33168     00 FA 0D F2 | 	cmp	result1, #0 wz
3316c     38 00 90 5D |  if_ne	jmp	#LR__4950
33170     04 4E 05 F1 | 	add	fp, #4
33174     A7 12 02 FB | 	rdlong	arg01, fp
33178     08 4E 05 F1 | 	add	fp, #8
3317c     A7 14 02 F6 | 	mov	arg02, fp
33180     0C 4E 85 F1 | 	sub	fp, #12
33184     9C E6 BF FD | 	call	#_fatfs_cc_validate
33188     08 4E 05 F1 | 	add	fp, #8
3318c     A7 FA 61 FC | 	wrlong	result1, fp
33190     08 4E 85 F1 | 	sub	fp, #8
33194     00 FA 0D F2 | 	cmp	result1, #0 wz
33198     04 4E 05 A1 |  if_e	add	fp, #4
3319c     A7 26 02 AB |  if_e	rdlong	local01, fp
331a0     04 4E 85 A1 |  if_e	sub	fp, #4
331a4     13 01 68 AC |  if_e	wrlong	#0, local01
331a8                 | LR__4950
331a8                 | ' 
331a8                 | ' 
331a8                 | ' 
331a8                 | ' 
331a8                 | ' 			fp->obj.fs = 0;
331a8                 | ' #line 4192 "ff.c"
331a8                 | ' 		}
331a8                 | ' 	}
331a8                 | ' 	return res;
331a8     08 4E 05 F1 | 	add	fp, #8
331ac     A7 FA 01 FB | 	rdlong	result1, fp
331b0     08 4E 85 F1 | 	sub	fp, #8
331b4     A7 F0 03 F6 | 	mov	ptra, fp
331b8     B2 00 A0 FD | 	call	#popregs_
331bc                 | _fatfs_cc_f_close_ret
331bc     2D 00 64 FD | 	ret
331c0                 | 
331c0                 | _fatfs_cc_f_lseek
331c0     00 4A 05 F6 | 	mov	COUNT_, #0
331c4     A8 00 A0 FD | 	call	#pushregs_
331c8     24 F0 07 F1 | 	add	ptra, #36
331cc     04 4E 05 F1 | 	add	fp, #4
331d0     A7 12 62 FC | 	wrlong	arg01, fp
331d4     04 4E 05 F1 | 	add	fp, #4
331d8     A7 14 62 FC | 	wrlong	arg02, fp
331dc     04 4E 85 F1 | 	sub	fp, #4
331e0     A7 12 02 FB | 	rdlong	arg01, fp
331e4     0C 4E 05 F1 | 	add	fp, #12
331e8     A7 14 02 F6 | 	mov	arg02, fp
331ec     10 4E 85 F1 | 	sub	fp, #16
331f0     30 E6 BF FD | 	call	#_fatfs_cc_validate
331f4     0C 4E 05 F1 | 	add	fp, #12
331f8     A7 FA 61 FC | 	wrlong	result1, fp
331fc     0C 4E 85 F1 | 	sub	fp, #12
33200     00 FA 0D F2 | 	cmp	result1, #0 wz
33204     1C 00 90 5D |  if_ne	jmp	#LR__4960
33208     04 4E 05 F1 | 	add	fp, #4
3320c     A7 18 02 FB | 	rdlong	arg04, fp
33210     11 18 06 F1 | 	add	arg04, #17
33214     0C 19 C2 FA | 	rdbyte	arg04, arg04
33218     08 4E 05 F1 | 	add	fp, #8
3321c     A7 18 62 FC | 	wrlong	arg04, fp
33220     0C 4E 85 F1 | 	sub	fp, #12
33224                 | LR__4960
33224     0C 4E 05 F1 | 	add	fp, #12
33228     A7 18 0A FB | 	rdlong	arg04, fp wz
3322c     0C 4E 85 F1 | 	sub	fp, #12
33230     0C 4E 05 51 |  if_ne	add	fp, #12
33234     A7 FA 01 5B |  if_ne	rdlong	result1, fp
33238     0C 4E 85 51 |  if_ne	sub	fp, #12
3323c     40 06 90 5D |  if_ne	jmp	#LR__4983
33240     04 4E 05 F1 | 	add	fp, #4
33244     A7 18 02 FB | 	rdlong	arg04, fp
33248     04 4E 05 F1 | 	add	fp, #4
3324c     A7 16 02 FB | 	rdlong	arg03, fp
33250     08 4E 85 F1 | 	sub	fp, #8
33254     0C 18 06 F1 | 	add	arg04, #12
33258     0C 19 02 FB | 	rdlong	arg04, arg04
3325c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
33260     3C 00 90 ED |  if_be	jmp	#LR__4961
33264     04 4E 05 F1 | 	add	fp, #4
33268     A7 16 02 FB | 	rdlong	arg03, fp
3326c     04 4E 85 F1 | 	sub	fp, #4
33270     10 16 06 F1 | 	add	arg03, #16
33274     0B 17 C2 FA | 	rdbyte	arg03, arg03
33278     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
3327c     02 16 CE F7 | 	test	arg03, #2 wz
33280     1C 00 90 5D |  if_ne	jmp	#LR__4961
33284     04 4E 05 F1 | 	add	fp, #4
33288     A7 16 02 FB | 	rdlong	arg03, fp
3328c     0C 16 06 F1 | 	add	arg03, #12
33290     0B 17 02 FB | 	rdlong	arg03, arg03
33294     04 4E 05 F1 | 	add	fp, #4
33298     A7 16 62 FC | 	wrlong	arg03, fp
3329c     08 4E 85 F1 | 	sub	fp, #8
332a0                 | LR__4961
332a0     04 4E 05 F1 | 	add	fp, #4
332a4     A7 16 02 FB | 	rdlong	arg03, fp
332a8     14 16 06 F1 | 	add	arg03, #20
332ac     0B 17 02 FB | 	rdlong	arg03, arg03
332b0     1C 4E 05 F1 | 	add	fp, #28
332b4     A7 16 62 FC | 	wrlong	arg03, fp
332b8     1C 4E 85 F1 | 	sub	fp, #28
332bc     A7 16 02 FB | 	rdlong	arg03, fp
332c0     18 4E 05 F1 | 	add	fp, #24
332c4     A7 00 68 FC | 	wrlong	#0, fp
332c8     14 16 06 F1 | 	add	arg03, #20
332cc     0B 01 68 FC | 	wrlong	#0, arg03
332d0     14 4E 85 F1 | 	sub	fp, #20
332d4     A7 16 02 FB | 	rdlong	arg03, fp
332d8     08 4E 85 F1 | 	sub	fp, #8
332dc     01 16 16 F2 | 	cmp	arg03, #1 wc
332e0     E4 03 90 CD |  if_b	jmp	#LR__4977
332e4     10 4E 05 F1 | 	add	fp, #16
332e8     A7 16 02 FB | 	rdlong	arg03, fp
332ec     0A 16 06 F1 | 	add	arg03, #10
332f0     0B 19 E2 FA | 	rdword	arg04, arg03
332f4     09 18 66 F0 | 	shl	arg04, #9
332f8     08 4E 05 F1 | 	add	fp, #8
332fc     A7 18 62 FC | 	wrlong	arg04, fp
33300     08 4E 05 F1 | 	add	fp, #8
33304     A7 18 02 FB | 	rdlong	arg04, fp
33308     20 4E 85 F1 | 	sub	fp, #32
3330c     01 18 16 F2 | 	cmp	arg04, #1 wc
33310     AC 00 90 CD |  if_b	jmp	#LR__4962
33314     08 4E 05 F1 | 	add	fp, #8
33318     A7 18 02 FB | 	rdlong	arg04, fp
3331c     01 18 86 F1 | 	sub	arg04, #1
33320     10 4E 05 F1 | 	add	fp, #16
33324     A7 16 02 FB | 	rdlong	arg03, fp
33328     0B 19 12 FD | 	qdiv	arg04, arg03
3332c     08 4E 05 F1 | 	add	fp, #8
33330     A7 FA 01 FB | 	rdlong	result1, fp
33334     01 FA 85 F1 | 	sub	result1, #1
33338     18 18 62 FD | 	getqx	arg04
3333c     0B FB 11 FD | 	qdiv	result1, arg03
33340     20 4E 85 F1 | 	sub	fp, #32
33344     18 16 62 FD | 	getqx	arg03
33348     0B 19 12 F2 | 	cmp	arg04, arg03 wc
3334c     70 00 90 CD |  if_b	jmp	#LR__4962
33350     04 4E 05 F1 | 	add	fp, #4
33354     A7 16 02 FB | 	rdlong	arg03, fp
33358     1C 4E 05 F1 | 	add	fp, #28
3335c     A7 FA 01 FB | 	rdlong	result1, fp
33360     01 FA 85 F1 | 	sub	result1, #1
33364     08 4E 85 F1 | 	sub	fp, #8
33368     A7 18 02 FB | 	rdlong	arg04, fp
3336c     01 18 86 F1 | 	sub	arg04, #1
33370     0C FB 21 F5 | 	andn	result1, arg04
33374     14 16 06 F1 | 	add	arg03, #20
33378     0B FB 61 FC | 	wrlong	result1, arg03
3337c     10 4E 85 F1 | 	sub	fp, #16
33380     A7 16 02 FB | 	rdlong	arg03, fp
33384     04 4E 85 F1 | 	sub	fp, #4
33388     A7 18 02 FB | 	rdlong	arg04, fp
3338c     14 18 06 F1 | 	add	arg04, #20
33390     0C 19 02 FB | 	rdlong	arg04, arg04
33394     0C 17 82 F1 | 	sub	arg03, arg04
33398     04 4E 05 F1 | 	add	fp, #4
3339c     A7 16 62 FC | 	wrlong	arg03, fp
333a0     04 4E 85 F1 | 	sub	fp, #4
333a4     A7 16 02 FB | 	rdlong	arg03, fp
333a8     18 16 06 F1 | 	add	arg03, #24
333ac     0B 17 02 FB | 	rdlong	arg03, arg03
333b0     10 4E 05 F1 | 	add	fp, #16
333b4     A7 16 62 FC | 	wrlong	arg03, fp
333b8     14 4E 85 F1 | 	sub	fp, #20
333bc     D0 00 90 FD | 	jmp	#LR__4966
333c0                 | LR__4962
333c0     04 4E 05 F1 | 	add	fp, #4
333c4     A7 16 02 FB | 	rdlong	arg03, fp
333c8     08 16 06 F1 | 	add	arg03, #8
333cc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
333d0     10 4E 05 F1 | 	add	fp, #16
333d4     A7 16 62 FC | 	wrlong	arg03, fp
333d8     14 4E 85 F1 | 	sub	fp, #20
333dc     94 00 90 5D |  if_ne	jmp	#LR__4965
333e0     04 4E 05 F1 | 	add	fp, #4
333e4     A7 12 02 FB | 	rdlong	arg01, fp
333e8     04 4E 85 F1 | 	sub	fp, #4
333ec     00 14 06 F6 | 	mov	arg02, #0
333f0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
333f4     14 4E 05 F1 | 	add	fp, #20
333f8     A7 FA 61 FC | 	wrlong	result1, fp
333fc     14 4E 85 F1 | 	sub	fp, #20
33400     01 FA 0D F2 | 	cmp	result1, #1 wz
33404     1C 00 90 5D |  if_ne	jmp	#LR__4963
33408     04 4E 05 F1 | 	add	fp, #4
3340c     A7 16 02 FB | 	rdlong	arg03, fp
33410     04 4E 85 F1 | 	sub	fp, #4
33414     11 16 06 F1 | 	add	arg03, #17
33418     0B 05 48 FC | 	wrbyte	#2, arg03
3341c     02 FA 05 F6 | 	mov	result1, #2
33420     5C 04 90 FD | 	jmp	#LR__4983
33424                 | LR__4963
33424     14 4E 05 F1 | 	add	fp, #20
33428     A7 FA 01 FB | 	rdlong	result1, fp
3342c     14 4E 85 F1 | 	sub	fp, #20
33430     FF FF 7F FF 
33434     FF FB 0D F2 | 	cmp	result1, ##-1 wz
33438     1C 00 90 5D |  if_ne	jmp	#LR__4964
3343c     04 4E 05 F1 | 	add	fp, #4
33440     A7 16 02 FB | 	rdlong	arg03, fp
33444     04 4E 85 F1 | 	sub	fp, #4
33448     11 16 06 F1 | 	add	arg03, #17
3344c     0B 03 48 FC | 	wrbyte	#1, arg03
33450     01 FA 05 F6 | 	mov	result1, #1
33454     28 04 90 FD | 	jmp	#LR__4983
33458                 | LR__4964
33458     04 4E 05 F1 | 	add	fp, #4
3345c     A7 16 02 FB | 	rdlong	arg03, fp
33460     10 4E 05 F1 | 	add	fp, #16
33464     A7 18 02 FB | 	rdlong	arg04, fp
33468     14 4E 85 F1 | 	sub	fp, #20
3346c     08 16 06 F1 | 	add	arg03, #8
33470     0B 19 62 FC | 	wrlong	arg04, arg03
33474                 | LR__4965
33474     04 4E 05 F1 | 	add	fp, #4
33478     A7 16 02 FB | 	rdlong	arg03, fp
3347c     10 4E 05 F1 | 	add	fp, #16
33480     A7 18 02 FB | 	rdlong	arg04, fp
33484     14 4E 85 F1 | 	sub	fp, #20
33488     18 16 06 F1 | 	add	arg03, #24
3348c     0B 19 62 FC | 	wrlong	arg04, arg03
33490                 | LR__4966
33490     14 4E 05 F1 | 	add	fp, #20
33494     A7 16 0A FB | 	rdlong	arg03, fp wz
33498     14 4E 85 F1 | 	sub	fp, #20
3349c     28 02 90 AD |  if_e	jmp	#LR__4976
334a0                 | ' 				while (ofs > bcs) {
334a0                 | LR__4967
334a0     08 4E 05 F1 | 	add	fp, #8
334a4     A7 18 02 FB | 	rdlong	arg04, fp
334a8     10 4E 05 F1 | 	add	fp, #16
334ac     A7 16 02 FB | 	rdlong	arg03, fp
334b0     18 4E 85 F1 | 	sub	fp, #24
334b4     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
334b8     68 01 90 ED |  if_be	jmp	#LR__4973
334bc     08 4E 05 F1 | 	add	fp, #8
334c0     A7 18 02 FB | 	rdlong	arg04, fp
334c4     10 4E 05 F1 | 	add	fp, #16
334c8     A7 16 02 FB | 	rdlong	arg03, fp
334cc     0B 19 82 F1 | 	sub	arg04, arg03
334d0     10 4E 85 F1 | 	sub	fp, #16
334d4     A7 18 62 FC | 	wrlong	arg04, fp
334d8     04 4E 85 F1 | 	sub	fp, #4
334dc     A7 18 02 FB | 	rdlong	arg04, fp
334e0     0C FB 01 F6 | 	mov	result1, arg04
334e4     14 18 06 F1 | 	add	arg04, #20
334e8     0C 19 02 FB | 	rdlong	arg04, arg04
334ec     14 4E 05 F1 | 	add	fp, #20
334f0     A7 16 02 FB | 	rdlong	arg03, fp
334f4     0B 19 02 F1 | 	add	arg04, arg03
334f8     14 FA 05 F1 | 	add	result1, #20
334fc     FD 18 62 FC | 	wrlong	arg04, result1
33500     14 4E 85 F1 | 	sub	fp, #20
33504     A7 16 02 FB | 	rdlong	arg03, fp
33508     04 4E 85 F1 | 	sub	fp, #4
3350c     10 16 06 F1 | 	add	arg03, #16
33510     0B 17 C2 FA | 	rdbyte	arg03, arg03
33514     02 16 CE F7 | 	test	arg03, #2 wz
33518     3C 00 90 AD |  if_e	jmp	#LR__4968
3351c     04 4E 05 F1 | 	add	fp, #4
33520     A7 12 02 FB | 	rdlong	arg01, fp
33524     10 4E 05 F1 | 	add	fp, #16
33528     A7 14 02 FB | 	rdlong	arg02, fp
3352c     14 4E 85 F1 | 	sub	fp, #20
33530     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
33534     14 4E 05 F1 | 	add	fp, #20
33538     A7 FA 61 FC | 	wrlong	result1, fp
3353c     00 FA 4D F2 | 	cmps	result1, #0 wz
33540     14 4E 85 F1 | 	sub	fp, #20
33544     08 4E 05 A1 |  if_e	add	fp, #8
33548     A7 00 68 AC |  if_e	wrlong	#0, fp
3354c     08 4E 85 A1 |  if_e	sub	fp, #8
33550                 | ' 							ofs = 0; break;
33550     D0 00 90 AD |  if_e	jmp	#LR__4973
33554     24 00 90 FD | 	jmp	#LR__4969
33558                 | LR__4968
33558     04 4E 05 F1 | 	add	fp, #4
3355c     A7 12 02 FB | 	rdlong	arg01, fp
33560     10 4E 05 F1 | 	add	fp, #16
33564     A7 14 02 FB | 	rdlong	arg02, fp
33568     14 4E 85 F1 | 	sub	fp, #20
3356c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
33570     14 4E 05 F1 | 	add	fp, #20
33574     A7 FA 61 FC | 	wrlong	result1, fp
33578     14 4E 85 F1 | 	sub	fp, #20
3357c                 | LR__4969
3357c     14 4E 05 F1 | 	add	fp, #20
33580     A7 16 02 FB | 	rdlong	arg03, fp
33584     14 4E 85 F1 | 	sub	fp, #20
33588     FF FF 7F FF 
3358c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33590     1C 00 90 5D |  if_ne	jmp	#LR__4970
33594     04 4E 05 F1 | 	add	fp, #4
33598     A7 16 02 FB | 	rdlong	arg03, fp
3359c     04 4E 85 F1 | 	sub	fp, #4
335a0     11 16 06 F1 | 	add	arg03, #17
335a4     0B 03 48 FC | 	wrbyte	#1, arg03
335a8     01 FA 05 F6 | 	mov	result1, #1
335ac     D0 02 90 FD | 	jmp	#LR__4983
335b0                 | LR__4970
335b0     14 4E 05 F1 | 	add	fp, #20
335b4     A7 16 02 FB | 	rdlong	arg03, fp
335b8     14 4E 85 F1 | 	sub	fp, #20
335bc     02 16 16 F2 | 	cmp	arg03, #2 wc
335c0     24 00 90 CD |  if_b	jmp	#LR__4971
335c4     10 4E 05 F1 | 	add	fp, #16
335c8     A7 18 02 FB | 	rdlong	arg04, fp
335cc     04 4E 05 F1 | 	add	fp, #4
335d0     A7 16 02 FB | 	rdlong	arg03, fp
335d4     14 4E 85 F1 | 	sub	fp, #20
335d8     18 18 06 F1 | 	add	arg04, #24
335dc     0C 19 02 FB | 	rdlong	arg04, arg04
335e0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
335e4     1C 00 90 CD |  if_b	jmp	#LR__4972
335e8                 | LR__4971
335e8     04 4E 05 F1 | 	add	fp, #4
335ec     A7 16 02 FB | 	rdlong	arg03, fp
335f0     04 4E 85 F1 | 	sub	fp, #4
335f4     11 16 06 F1 | 	add	arg03, #17
335f8     0B 05 48 FC | 	wrbyte	#2, arg03
335fc     02 FA 05 F6 | 	mov	result1, #2
33600     7C 02 90 FD | 	jmp	#LR__4983
33604                 | LR__4972
33604     04 4E 05 F1 | 	add	fp, #4
33608     A7 18 02 FB | 	rdlong	arg04, fp
3360c     10 4E 05 F1 | 	add	fp, #16
33610     A7 16 02 FB | 	rdlong	arg03, fp
33614     14 4E 85 F1 | 	sub	fp, #20
33618     18 18 06 F1 | 	add	arg04, #24
3361c     0C 17 62 FC | 	wrlong	arg03, arg04
33620     7C FE 9F FD | 	jmp	#LR__4967
33624                 | LR__4973
33624     04 4E 05 F1 | 	add	fp, #4
33628     A7 16 02 FB | 	rdlong	arg03, fp
3362c     0B 13 02 F6 | 	mov	arg01, arg03
33630     14 16 06 F1 | 	add	arg03, #20
33634     0B 15 02 FB | 	rdlong	arg02, arg03
33638     04 4E 05 F1 | 	add	fp, #4
3363c     A7 16 02 FB | 	rdlong	arg03, fp
33640     0B 15 02 F1 | 	add	arg02, arg03
33644     14 12 06 F1 | 	add	arg01, #20
33648     09 15 62 FC | 	wrlong	arg02, arg01
3364c     A7 16 02 FB | 	rdlong	arg03, fp
33650     08 4E 85 F1 | 	sub	fp, #8
33654     FF 17 CE F7 | 	test	arg03, #511 wz
33658     6C 00 90 AD |  if_e	jmp	#LR__4975
3365c     10 4E 05 F1 | 	add	fp, #16
33660     A7 12 02 FB | 	rdlong	arg01, fp
33664     04 4E 05 F1 | 	add	fp, #4
33668     A7 14 02 FB | 	rdlong	arg02, fp
3366c     14 4E 85 F1 | 	sub	fp, #20
33670     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
33674     1C 4E 05 F1 | 	add	fp, #28
33678     A7 FA 61 FC | 	wrlong	result1, fp
3367c     1C 4E 85 F1 | 	sub	fp, #28
33680     00 FA 0D F2 | 	cmp	result1, #0 wz
33684     1C 00 90 5D |  if_ne	jmp	#LR__4974
33688     04 4E 05 F1 | 	add	fp, #4
3368c     A7 16 02 FB | 	rdlong	arg03, fp
33690     04 4E 85 F1 | 	sub	fp, #4
33694     11 16 06 F1 | 	add	arg03, #17
33698     0B 05 48 FC | 	wrbyte	#2, arg03
3369c     02 FA 05 F6 | 	mov	result1, #2
336a0     DC 01 90 FD | 	jmp	#LR__4983
336a4                 | LR__4974
336a4     1C 4E 05 F1 | 	add	fp, #28
336a8     A7 18 02 FB | 	rdlong	arg04, fp
336ac     14 4E 85 F1 | 	sub	fp, #20
336b0     A7 16 02 FB | 	rdlong	arg03, fp
336b4     09 16 46 F0 | 	shr	arg03, #9
336b8     0B 19 02 F1 | 	add	arg04, arg03
336bc     14 4E 05 F1 | 	add	fp, #20
336c0     A7 18 62 FC | 	wrlong	arg04, fp
336c4     1C 4E 85 F1 | 	sub	fp, #28
336c8                 | LR__4975
336c8                 | LR__4976
336c8                 | LR__4977
336c8     04 4E 05 F1 | 	add	fp, #4
336cc     A7 18 02 FB | 	rdlong	arg04, fp
336d0     0C 17 02 F6 | 	mov	arg03, arg04
336d4     04 4E 85 F1 | 	sub	fp, #4
336d8     14 16 06 F1 | 	add	arg03, #20
336dc     0B 17 02 FB | 	rdlong	arg03, arg03
336e0     0C 18 06 F1 | 	add	arg04, #12
336e4     0C 19 02 FB | 	rdlong	arg04, arg04
336e8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
336ec     3C 00 90 ED |  if_be	jmp	#LR__4978
336f0     04 4E 05 F1 | 	add	fp, #4
336f4     A7 18 02 FB | 	rdlong	arg04, fp
336f8     0C 17 02 F6 | 	mov	arg03, arg04
336fc     14 18 06 F1 | 	add	arg04, #20
33700     0C 19 02 FB | 	rdlong	arg04, arg04
33704     0C 16 06 F1 | 	add	arg03, #12
33708     0B 19 62 FC | 	wrlong	arg04, arg03
3370c     A7 18 02 FB | 	rdlong	arg04, fp
33710     0C 17 02 F6 | 	mov	arg03, arg04
33714     04 4E 85 F1 | 	sub	fp, #4
33718     10 18 06 F1 | 	add	arg04, #16
3371c     0C 19 C2 FA | 	rdbyte	arg04, arg04
33720     40 18 46 F5 | 	or	arg04, #64
33724     10 16 06 F1 | 	add	arg03, #16
33728     0B 19 42 FC | 	wrbyte	arg04, arg03
3372c                 | LR__4978
3372c     04 4E 05 F1 | 	add	fp, #4
33730     A7 16 02 FB | 	rdlong	arg03, fp
33734     04 4E 85 F1 | 	sub	fp, #4
33738     14 16 06 F1 | 	add	arg03, #20
3373c     0B 17 02 FB | 	rdlong	arg03, arg03
33740     FF 17 CE F7 | 	test	arg03, #511 wz
33744     2C 01 90 AD |  if_e	jmp	#LR__4982
33748     04 4E 05 F1 | 	add	fp, #4
3374c     A7 18 02 FB | 	rdlong	arg04, fp
33750     18 4E 05 F1 | 	add	fp, #24
33754     A7 16 02 FB | 	rdlong	arg03, fp
33758     1C 4E 85 F1 | 	sub	fp, #28
3375c     1C 18 06 F1 | 	add	arg04, #28
33760     0C 19 02 FB | 	rdlong	arg04, arg04
33764     0C 17 0A F2 | 	cmp	arg03, arg04 wz
33768     08 01 90 AD |  if_e	jmp	#LR__4982
3376c     04 4E 05 F1 | 	add	fp, #4
33770     A7 16 02 FB | 	rdlong	arg03, fp
33774     04 4E 85 F1 | 	sub	fp, #4
33778     10 16 06 F1 | 	add	arg03, #16
3377c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33780     80 16 CE F7 | 	test	arg03, #128 wz
33784     7C 00 90 AD |  if_e	jmp	#LR__4980
33788     10 4E 05 F1 | 	add	fp, #16
3378c     A7 16 02 FB | 	rdlong	arg03, fp
33790     01 16 06 F1 | 	add	arg03, #1
33794     0B 13 C2 FA | 	rdbyte	arg01, arg03
33798     0C 4E 85 F1 | 	sub	fp, #12
3379c     A7 16 02 FB | 	rdlong	arg03, fp
337a0     0B 15 02 F6 | 	mov	arg02, arg03
337a4     28 14 06 F1 | 	add	arg02, #40
337a8     04 4E 85 F1 | 	sub	fp, #4
337ac     1C 16 06 F1 | 	add	arg03, #28
337b0     0B 17 02 FB | 	rdlong	arg03, arg03
337b4     01 18 06 F6 | 	mov	arg04, #1
337b8     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
337bc     00 FA 0D F2 | 	cmp	result1, #0 wz
337c0     1C 00 90 AD |  if_e	jmp	#LR__4979
337c4     04 4E 05 F1 | 	add	fp, #4
337c8     A7 16 02 FB | 	rdlong	arg03, fp
337cc     04 4E 85 F1 | 	sub	fp, #4
337d0     11 16 06 F1 | 	add	arg03, #17
337d4     0B 03 48 FC | 	wrbyte	#1, arg03
337d8     01 FA 05 F6 | 	mov	result1, #1
337dc     A0 00 90 FD | 	jmp	#LR__4983
337e0                 | LR__4979
337e0     04 4E 05 F1 | 	add	fp, #4
337e4     A7 18 02 FB | 	rdlong	arg04, fp
337e8     0C 17 02 F6 | 	mov	arg03, arg04
337ec     04 4E 85 F1 | 	sub	fp, #4
337f0     10 18 06 F1 | 	add	arg04, #16
337f4     0C 19 C2 FA | 	rdbyte	arg04, arg04
337f8     7F 18 06 F5 | 	and	arg04, #127
337fc     10 16 06 F1 | 	add	arg03, #16
33800     0B 19 42 FC | 	wrbyte	arg04, arg03
33804                 | LR__4980
33804     10 4E 05 F1 | 	add	fp, #16
33808     A7 16 02 FB | 	rdlong	arg03, fp
3380c     01 16 06 F1 | 	add	arg03, #1
33810     0B 13 C2 FA | 	rdbyte	arg01, arg03
33814     0C 4E 85 F1 | 	sub	fp, #12
33818     A7 14 02 FB | 	rdlong	arg02, fp
3381c     28 14 06 F1 | 	add	arg02, #40
33820     18 4E 05 F1 | 	add	fp, #24
33824     A7 16 02 FB | 	rdlong	arg03, fp
33828     1C 4E 85 F1 | 	sub	fp, #28
3382c     01 18 06 F6 | 	mov	arg04, #1
33830     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
33834     00 FA 0D F2 | 	cmp	result1, #0 wz
33838     1C 00 90 AD |  if_e	jmp	#LR__4981
3383c     04 4E 05 F1 | 	add	fp, #4
33840     A7 16 02 FB | 	rdlong	arg03, fp
33844     04 4E 85 F1 | 	sub	fp, #4
33848     11 16 06 F1 | 	add	arg03, #17
3384c     0B 03 48 FC | 	wrbyte	#1, arg03
33850     01 FA 05 F6 | 	mov	result1, #1
33854     28 00 90 FD | 	jmp	#LR__4983
33858                 | LR__4981
33858     04 4E 05 F1 | 	add	fp, #4
3385c     A7 18 02 FB | 	rdlong	arg04, fp
33860     18 4E 05 F1 | 	add	fp, #24
33864     A7 16 02 FB | 	rdlong	arg03, fp
33868     1C 4E 85 F1 | 	sub	fp, #28
3386c     1C 18 06 F1 | 	add	arg04, #28
33870     0C 17 62 FC | 	wrlong	arg03, arg04
33874                 | LR__4982
33874                 | ' 
33874                 | ' 			fp->sect = nsect;
33874                 | ' 		}
33874                 | ' 	}
33874                 | ' 
33874                 | ' 	return res ;
33874     0C 4E 05 F1 | 	add	fp, #12
33878     A7 FA 01 FB | 	rdlong	result1, fp
3387c     0C 4E 85 F1 | 	sub	fp, #12
33880                 | LR__4983
33880     A7 F0 03 F6 | 	mov	ptra, fp
33884     B2 00 A0 FD | 	call	#popregs_
33888                 | _fatfs_cc_f_lseek_ret
33888     2D 00 64 FD | 	ret
3388c                 | 
3388c                 | _fatfs_cc_f_opendir
3388c     01 4A 05 F6 | 	mov	COUNT_, #1
33890     A8 00 A0 FD | 	call	#pushregs_
33894     14 F0 07 F1 | 	add	ptra, #20
33898     04 4E 05 F1 | 	add	fp, #4
3389c     A7 12 62 FC | 	wrlong	arg01, fp
338a0     04 4E 05 F1 | 	add	fp, #4
338a4     A7 14 62 FC | 	wrlong	arg02, fp
338a8     04 4E 85 F1 | 	sub	fp, #4
338ac     A7 16 0A FB | 	rdlong	arg03, fp wz
338b0     04 4E 85 F1 | 	sub	fp, #4
338b4     09 FA 05 A6 |  if_e	mov	result1, #9
338b8     78 01 90 AD |  if_e	jmp	#LR__4996
338bc     08 4E 05 F1 | 	add	fp, #8
338c0     A7 12 02 F6 | 	mov	arg01, fp
338c4     08 4E 05 F1 | 	add	fp, #8
338c8     A7 14 02 F6 | 	mov	arg02, fp
338cc     10 4E 85 F1 | 	sub	fp, #16
338d0     00 16 06 F6 | 	mov	arg03, #0
338d4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
338d8     0C 4E 05 F1 | 	add	fp, #12
338dc     A7 FA 61 FC | 	wrlong	result1, fp
338e0     0C 4E 85 F1 | 	sub	fp, #12
338e4     00 FA 0D F2 | 	cmp	result1, #0 wz
338e8     20 01 90 5D |  if_ne	jmp	#LR__4995
338ec     04 4E 05 F1 | 	add	fp, #4
338f0     A7 16 02 FB | 	rdlong	arg03, fp
338f4     0C 4E 05 F1 | 	add	fp, #12
338f8     A7 FA 01 FB | 	rdlong	result1, fp
338fc     0B FB 61 FC | 	wrlong	result1, arg03
33900     0C 4E 85 F1 | 	sub	fp, #12
33904     A7 12 02 FB | 	rdlong	arg01, fp
33908     04 4E 05 F1 | 	add	fp, #4
3390c     A7 14 02 FB | 	rdlong	arg02, fp
33910     08 4E 85 F1 | 	sub	fp, #8
33914     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
33918     0C 4E 05 F1 | 	add	fp, #12
3391c     A7 FA 61 FC | 	wrlong	result1, fp
33920     0C 4E 85 F1 | 	sub	fp, #12
33924     00 FA 0D F2 | 	cmp	result1, #0 wz
33928     C4 00 90 5D |  if_ne	jmp	#LR__4994
3392c     04 4E 05 F1 | 	add	fp, #4
33930     A7 16 02 FB | 	rdlong	arg03, fp
33934     04 4E 85 F1 | 	sub	fp, #4
33938     2B 16 06 F1 | 	add	arg03, #43
3393c     0B 17 C2 FA | 	rdbyte	arg03, arg03
33940     80 16 CE F7 | 	test	arg03, #128 wz
33944     58 00 90 5D |  if_ne	jmp	#LR__4992
33948     04 4E 05 F1 | 	add	fp, #4
3394c     A7 16 02 FB | 	rdlong	arg03, fp
33950     04 4E 85 F1 | 	sub	fp, #4
33954     06 16 06 F1 | 	add	arg03, #6
33958     0B 17 C2 FA | 	rdbyte	arg03, arg03
3395c     10 16 CE F7 | 	test	arg03, #16 wz
33960     30 00 90 AD |  if_e	jmp	#LR__4990
33964     04 4E 05 F1 | 	add	fp, #4
33968     A7 16 02 FB | 	rdlong	arg03, fp
3396c     0B 27 02 F6 | 	mov	local01, arg03
33970     0C 4E 05 F1 | 	add	fp, #12
33974     A7 12 02 FB | 	rdlong	arg01, fp
33978     10 4E 85 F1 | 	sub	fp, #16
3397c     1C 16 06 F1 | 	add	arg03, #28
33980     0B 15 02 FB | 	rdlong	arg02, arg03
33984     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
33988     08 26 06 F1 | 	add	local01, #8
3398c     13 FB 61 FC | 	wrlong	result1, local01
33990     0C 00 90 FD | 	jmp	#LR__4991
33994                 | LR__4990
33994     0C 4E 05 F1 | 	add	fp, #12
33998     A7 0A 68 FC | 	wrlong	#5, fp
3399c     0C 4E 85 F1 | 	sub	fp, #12
339a0                 | LR__4991
339a0                 | LR__4992
339a0     0C 4E 05 F1 | 	add	fp, #12
339a4     A7 26 0A FB | 	rdlong	local01, fp wz
339a8     0C 4E 85 F1 | 	sub	fp, #12
339ac     40 00 90 5D |  if_ne	jmp	#LR__4993
339b0     04 4E 05 F1 | 	add	fp, #4
339b4     A7 26 02 FB | 	rdlong	local01, fp
339b8     0C 4E 05 F1 | 	add	fp, #12
339bc     A7 16 02 FB | 	rdlong	arg03, fp
339c0     06 16 06 F1 | 	add	arg03, #6
339c4     0B 17 E2 FA | 	rdword	arg03, arg03
339c8     04 26 06 F1 | 	add	local01, #4
339cc     13 17 52 FC | 	wrword	arg03, local01
339d0     0C 4E 85 F1 | 	sub	fp, #12
339d4     A7 12 02 FB | 	rdlong	arg01, fp
339d8     04 4E 85 F1 | 	sub	fp, #4
339dc     00 14 06 F6 | 	mov	arg02, #0
339e0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
339e4     0C 4E 05 F1 | 	add	fp, #12
339e8     A7 FA 61 FC | 	wrlong	result1, fp
339ec     0C 4E 85 F1 | 	sub	fp, #12
339f0                 | LR__4993
339f0                 | LR__4994
339f0     0C 4E 05 F1 | 	add	fp, #12
339f4     A7 26 02 FB | 	rdlong	local01, fp
339f8     0C 4E 85 F1 | 	sub	fp, #12
339fc     04 26 0E F2 | 	cmp	local01, #4 wz
33a00     0C 4E 05 A1 |  if_e	add	fp, #12
33a04     A7 0A 68 AC |  if_e	wrlong	#5, fp
33a08     0C 4E 85 A1 |  if_e	sub	fp, #12
33a0c                 | LR__4995
33a0c     0C 4E 05 F1 | 	add	fp, #12
33a10     A7 26 0A FB | 	rdlong	local01, fp wz
33a14     0C 4E 85 F1 | 	sub	fp, #12
33a18     04 4E 05 51 |  if_ne	add	fp, #4
33a1c     A7 26 02 5B |  if_ne	rdlong	local01, fp
33a20     04 4E 85 51 |  if_ne	sub	fp, #4
33a24     13 01 68 5C |  if_ne	wrlong	#0, local01
33a28                 | ' 
33a28                 | ' 	return res ;
33a28     0C 4E 05 F1 | 	add	fp, #12
33a2c     A7 FA 01 FB | 	rdlong	result1, fp
33a30     0C 4E 85 F1 | 	sub	fp, #12
33a34                 | LR__4996
33a34     A7 F0 03 F6 | 	mov	ptra, fp
33a38     B2 00 A0 FD | 	call	#popregs_
33a3c                 | _fatfs_cc_f_opendir_ret
33a3c     2D 00 64 FD | 	ret
33a40                 | 
33a40                 | _fatfs_cc_f_closedir
33a40     00 4A 05 F6 | 	mov	COUNT_, #0
33a44     A8 00 A0 FD | 	call	#pushregs_
33a48     10 F0 07 F1 | 	add	ptra, #16
33a4c     04 4E 05 F1 | 	add	fp, #4
33a50     A7 12 62 FC | 	wrlong	arg01, fp
33a54     08 4E 05 F1 | 	add	fp, #8
33a58     A7 14 02 F6 | 	mov	arg02, fp
33a5c     0C 4E 85 F1 | 	sub	fp, #12
33a60     C0 DD BF FD | 	call	#_fatfs_cc_validate
33a64     08 4E 05 F1 | 	add	fp, #8
33a68     A7 FA 61 FC | 	wrlong	result1, fp
33a6c     08 4E 85 F1 | 	sub	fp, #8
33a70     00 FA 0D F2 | 	cmp	result1, #0 wz
33a74     04 4E 05 A1 |  if_e	add	fp, #4
33a78     A7 FA 01 AB |  if_e	rdlong	result1, fp
33a7c     04 4E 85 A1 |  if_e	sub	fp, #4
33a80     FD 00 68 AC |  if_e	wrlong	#0, result1
33a84                 | ' 
33a84                 | ' 
33a84                 | ' 
33a84                 | ' 
33a84                 | ' 		dp->obj.fs = 0;
33a84                 | ' #line 4633 "ff.c"
33a84                 | ' 	}
33a84                 | ' 	return res;
33a84     08 4E 05 F1 | 	add	fp, #8
33a88     A7 FA 01 FB | 	rdlong	result1, fp
33a8c     08 4E 85 F1 | 	sub	fp, #8
33a90     A7 F0 03 F6 | 	mov	ptra, fp
33a94     B2 00 A0 FD | 	call	#popregs_
33a98                 | _fatfs_cc_f_closedir_ret
33a98     2D 00 64 FD | 	ret
33a9c                 | 
33a9c                 | _fatfs_cc_f_readdir
33a9c     00 4A 05 F6 | 	mov	COUNT_, #0
33aa0     A8 00 A0 FD | 	call	#pushregs_
33aa4     14 F0 07 F1 | 	add	ptra, #20
33aa8     04 4E 05 F1 | 	add	fp, #4
33aac     A7 12 62 FC | 	wrlong	arg01, fp
33ab0     04 4E 05 F1 | 	add	fp, #4
33ab4     A7 14 62 FC | 	wrlong	arg02, fp
33ab8     04 4E 85 F1 | 	sub	fp, #4
33abc     A7 12 02 FB | 	rdlong	arg01, fp
33ac0     0C 4E 05 F1 | 	add	fp, #12
33ac4     A7 14 02 F6 | 	mov	arg02, fp
33ac8     10 4E 85 F1 | 	sub	fp, #16
33acc     54 DD BF FD | 	call	#_fatfs_cc_validate
33ad0     0C 4E 05 F1 | 	add	fp, #12
33ad4     A7 FA 61 FC | 	wrlong	result1, fp
33ad8     0C 4E 85 F1 | 	sub	fp, #12
33adc     00 FA 0D F2 | 	cmp	result1, #0 wz
33ae0     BC 00 90 5D |  if_ne	jmp	#LR__5003
33ae4     08 4E 05 F1 | 	add	fp, #8
33ae8     A7 FA 09 FB | 	rdlong	result1, fp wz
33aec     08 4E 85 F1 | 	sub	fp, #8
33af0     24 00 90 5D |  if_ne	jmp	#LR__5000
33af4     04 4E 05 F1 | 	add	fp, #4
33af8     A7 12 02 FB | 	rdlong	arg01, fp
33afc     04 4E 85 F1 | 	sub	fp, #4
33b00     00 14 06 F6 | 	mov	arg02, #0
33b04     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
33b08     0C 4E 05 F1 | 	add	fp, #12
33b0c     A7 FA 61 FC | 	wrlong	result1, fp
33b10     0C 4E 85 F1 | 	sub	fp, #12
33b14     88 00 90 FD | 	jmp	#LR__5002
33b18                 | LR__5000
33b18     04 4E 05 F1 | 	add	fp, #4
33b1c     A7 12 02 FB | 	rdlong	arg01, fp
33b20     04 4E 85 F1 | 	sub	fp, #4
33b24     00 14 06 F6 | 	mov	arg02, #0
33b28     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
33b2c     0C 4E 05 F1 | 	add	fp, #12
33b30     A7 FA 61 FC | 	wrlong	result1, fp
33b34     0C 4E 85 F1 | 	sub	fp, #12
33b38     04 FA 0D F2 | 	cmp	result1, #4 wz
33b3c     0C 4E 05 A1 |  if_e	add	fp, #12
33b40     A7 00 68 AC |  if_e	wrlong	#0, fp
33b44     0C 4E 85 A1 |  if_e	sub	fp, #12
33b48     0C 4E 05 F1 | 	add	fp, #12
33b4c     A7 FA 09 FB | 	rdlong	result1, fp wz
33b50     0C 4E 85 F1 | 	sub	fp, #12
33b54     48 00 90 5D |  if_ne	jmp	#LR__5001
33b58     04 4E 05 F1 | 	add	fp, #4
33b5c     A7 12 02 FB | 	rdlong	arg01, fp
33b60     04 4E 05 F1 | 	add	fp, #4
33b64     A7 14 02 FB | 	rdlong	arg02, fp
33b68     08 4E 85 F1 | 	sub	fp, #8
33b6c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
33b70     04 4E 05 F1 | 	add	fp, #4
33b74     A7 12 02 FB | 	rdlong	arg01, fp
33b78     04 4E 85 F1 | 	sub	fp, #4
33b7c     00 14 06 F6 | 	mov	arg02, #0
33b80     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
33b84     0C 4E 05 F1 | 	add	fp, #12
33b88     A7 FA 61 FC | 	wrlong	result1, fp
33b8c     0C 4E 85 F1 | 	sub	fp, #12
33b90     04 FA 0D F2 | 	cmp	result1, #4 wz
33b94     0C 4E 05 A1 |  if_e	add	fp, #12
33b98     A7 00 68 AC |  if_e	wrlong	#0, fp
33b9c     0C 4E 85 A1 |  if_e	sub	fp, #12
33ba0                 | LR__5001
33ba0                 | LR__5002
33ba0                 | LR__5003
33ba0                 | ' 			}
33ba0                 | ' 			;
33ba0                 | ' 		}
33ba0                 | ' 	}
33ba0                 | ' 	return res ;
33ba0     0C 4E 05 F1 | 	add	fp, #12
33ba4     A7 FA 01 FB | 	rdlong	result1, fp
33ba8     0C 4E 85 F1 | 	sub	fp, #12
33bac     A7 F0 03 F6 | 	mov	ptra, fp
33bb0     B2 00 A0 FD | 	call	#popregs_
33bb4                 | _fatfs_cc_f_readdir_ret
33bb4     2D 00 64 FD | 	ret
33bb8                 | 
33bb8                 | _fatfs_cc_f_stat
33bb8     00 4A 05 F6 | 	mov	COUNT_, #0
33bbc     A8 00 A0 FD | 	call	#pushregs_
33bc0     40 F0 07 F1 | 	add	ptra, #64
33bc4     04 4E 05 F1 | 	add	fp, #4
33bc8     A7 12 62 FC | 	wrlong	arg01, fp
33bcc     04 4E 05 F1 | 	add	fp, #4
33bd0     A7 14 62 FC | 	wrlong	arg02, fp
33bd4     04 4E 85 F1 | 	sub	fp, #4
33bd8     A7 12 02 F6 | 	mov	arg01, fp
33bdc     0C 4E 05 F1 | 	add	fp, #12
33be0     A7 14 02 F6 | 	mov	arg02, fp
33be4     10 4E 85 F1 | 	sub	fp, #16
33be8     00 16 06 F6 | 	mov	arg03, #0
33bec     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
33bf0     0C 4E 05 F1 | 	add	fp, #12
33bf4     A7 FA 61 FC | 	wrlong	result1, fp
33bf8     0C 4E 85 F1 | 	sub	fp, #12
33bfc     00 FA 0D F2 | 	cmp	result1, #0 wz
33c00     74 00 90 5D |  if_ne	jmp	#LR__5013
33c04     10 4E 05 F1 | 	add	fp, #16
33c08     A7 12 02 F6 | 	mov	arg01, fp
33c0c     0C 4E 85 F1 | 	sub	fp, #12
33c10     A7 14 02 FB | 	rdlong	arg02, fp
33c14     04 4E 85 F1 | 	sub	fp, #4
33c18     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
33c1c     0C 4E 05 F1 | 	add	fp, #12
33c20     A7 FA 61 FC | 	wrlong	result1, fp
33c24     0C 4E 85 F1 | 	sub	fp, #12
33c28     00 FA 0D F2 | 	cmp	result1, #0 wz
33c2c     48 00 90 5D |  if_ne	jmp	#LR__5012
33c30     3B 4E 05 F1 | 	add	fp, #59
33c34     A7 FA C1 FA | 	rdbyte	result1, fp
33c38     3B 4E 85 F1 | 	sub	fp, #59
33c3c     80 FA CD F7 | 	test	result1, #128 wz
33c40     0C 4E 05 51 |  if_ne	add	fp, #12
33c44     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33c48     0C 4E 85 51 |  if_ne	sub	fp, #12
33c4c     28 00 90 5D |  if_ne	jmp	#LR__5011
33c50     08 4E 05 F1 | 	add	fp, #8
33c54     A7 FA 09 FB | 	rdlong	result1, fp wz
33c58     08 4E 85 F1 | 	sub	fp, #8
33c5c     18 00 90 AD |  if_e	jmp	#LR__5010
33c60     10 4E 05 F1 | 	add	fp, #16
33c64     A7 12 02 F6 | 	mov	arg01, fp
33c68     08 4E 85 F1 | 	sub	fp, #8
33c6c     A7 14 02 FB | 	rdlong	arg02, fp
33c70     08 4E 85 F1 | 	sub	fp, #8
33c74     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
33c78                 | LR__5010
33c78                 | LR__5011
33c78                 | LR__5012
33c78                 | LR__5013
33c78                 | ' 			}
33c78                 | ' 		}
33c78                 | ' 		;
33c78                 | ' 	}
33c78                 | ' 
33c78                 | ' 	return res ;
33c78     0C 4E 05 F1 | 	add	fp, #12
33c7c     A7 FA 01 FB | 	rdlong	result1, fp
33c80     0C 4E 85 F1 | 	sub	fp, #12
33c84     A7 F0 03 F6 | 	mov	ptra, fp
33c88     B2 00 A0 FD | 	call	#popregs_
33c8c                 | _fatfs_cc_f_stat_ret
33c8c     2D 00 64 FD | 	ret
33c90                 | 
33c90                 | _fatfs_cc_f_unlink
33c90     00 4A 05 F6 | 	mov	COUNT_, #0
33c94     A8 00 A0 FD | 	call	#pushregs_
33c98     74 F0 07 F1 | 	add	ptra, #116
33c9c     04 4E 05 F1 | 	add	fp, #4
33ca0     A7 12 62 FC | 	wrlong	arg01, fp
33ca4     68 4E 05 F1 | 	add	fp, #104
33ca8     A7 00 68 FC | 	wrlong	#0, fp
33cac     68 4E 85 F1 | 	sub	fp, #104
33cb0     A7 12 02 F6 | 	mov	arg01, fp
33cb4     6C 4E 05 F1 | 	add	fp, #108
33cb8     A7 14 02 F6 | 	mov	arg02, fp
33cbc     70 4E 85 F1 | 	sub	fp, #112
33cc0     02 16 06 F6 | 	mov	arg03, #2
33cc4     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
33cc8     08 4E 05 F1 | 	add	fp, #8
33ccc     A7 FA 61 FC | 	wrlong	result1, fp
33cd0     08 4E 85 F1 | 	sub	fp, #8
33cd4     00 FA 0D F2 | 	cmp	result1, #0 wz
33cd8     E4 01 90 5D |  if_ne	jmp	#LR__5028
33cdc     70 4E 05 F1 | 	add	fp, #112
33ce0     A7 16 02 FB | 	rdlong	arg03, fp
33ce4     64 4E 85 F1 | 	sub	fp, #100
33ce8     A7 16 62 FC | 	wrlong	arg03, fp
33cec     A7 12 02 F6 | 	mov	arg01, fp
33cf0     08 4E 85 F1 | 	sub	fp, #8
33cf4     A7 14 02 FB | 	rdlong	arg02, fp
33cf8     04 4E 85 F1 | 	sub	fp, #4
33cfc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
33d00     08 4E 05 F1 | 	add	fp, #8
33d04     A7 FA 61 FC | 	wrlong	result1, fp
33d08     00 FA 4D F2 | 	cmps	result1, #0 wz
33d0c     08 4E 85 F1 | 	sub	fp, #8
33d10     AC 01 90 5D |  if_ne	jmp	#LR__5027
33d14     37 4E 05 F1 | 	add	fp, #55
33d18     A7 FA C1 FA | 	rdbyte	result1, fp
33d1c     37 4E 85 F1 | 	sub	fp, #55
33d20     80 FA CD F7 | 	test	result1, #128 wz
33d24     08 4E 05 51 |  if_ne	add	fp, #8
33d28     A7 0C 68 5C |  if_ne	wrlong	#6, fp
33d2c     08 4E 85 51 |  if_ne	sub	fp, #8
33d30     1C 00 90 5D |  if_ne	jmp	#LR__5020
33d34     12 4E 05 F1 | 	add	fp, #18
33d38     A7 FA C1 FA | 	rdbyte	result1, fp
33d3c     12 4E 85 F1 | 	sub	fp, #18
33d40     01 FA CD F7 | 	test	result1, #1 wz
33d44     08 4E 05 51 |  if_ne	add	fp, #8
33d48     A7 0E 68 5C |  if_ne	wrlong	#7, fp
33d4c     08 4E 85 51 |  if_ne	sub	fp, #8
33d50                 | LR__5020
33d50     08 4E 05 F1 | 	add	fp, #8
33d54     A7 FA 09 FB | 	rdlong	result1, fp wz
33d58     08 4E 85 F1 | 	sub	fp, #8
33d5c     C8 00 90 5D |  if_ne	jmp	#LR__5023
33d60     70 4E 05 F1 | 	add	fp, #112
33d64     A7 12 02 FB | 	rdlong	arg01, fp
33d68     48 4E 85 F1 | 	sub	fp, #72
33d6c     A7 14 02 FB | 	rdlong	arg02, fp
33d70     28 4E 85 F1 | 	sub	fp, #40
33d74     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
33d78     6C 4E 05 F1 | 	add	fp, #108
33d7c     A7 FA 61 FC | 	wrlong	result1, fp
33d80     5A 4E 85 F1 | 	sub	fp, #90
33d84     A7 FA C1 FA | 	rdbyte	result1, fp
33d88     12 4E 85 F1 | 	sub	fp, #18
33d8c     10 FA CD F7 | 	test	result1, #16 wz
33d90     94 00 90 AD |  if_e	jmp	#LR__5022
33d94     70 4E 05 F1 | 	add	fp, #112
33d98     A7 FA 01 FB | 	rdlong	result1, fp
33d9c     34 4E 85 F1 | 	sub	fp, #52
33da0     A7 FA 61 FC | 	wrlong	result1, fp
33da4     30 4E 05 F1 | 	add	fp, #48
33da8     A7 16 02 FB | 	rdlong	arg03, fp
33dac     28 4E 85 F1 | 	sub	fp, #40
33db0     A7 16 62 FC | 	wrlong	arg03, fp
33db4     08 4E 85 F1 | 	sub	fp, #8
33db8     A7 12 02 F6 | 	mov	arg01, fp
33dbc     3C 4E 85 F1 | 	sub	fp, #60
33dc0     00 14 06 F6 | 	mov	arg02, #0
33dc4     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
33dc8     08 4E 05 F1 | 	add	fp, #8
33dcc     A7 FA 61 FC | 	wrlong	result1, fp
33dd0     08 4E 85 F1 | 	sub	fp, #8
33dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
33dd8     4C 00 90 5D |  if_ne	jmp	#LR__5021
33ddc     3C 4E 05 F1 | 	add	fp, #60
33de0     A7 12 02 F6 | 	mov	arg01, fp
33de4     3C 4E 85 F1 | 	sub	fp, #60
33de8     00 14 06 F6 | 	mov	arg02, #0
33dec     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
33df0     08 4E 05 F1 | 	add	fp, #8
33df4     A7 FA 61 FC | 	wrlong	result1, fp
33df8     00 FA 4D F2 | 	cmps	result1, #0 wz
33dfc     08 4E 85 F1 | 	sub	fp, #8
33e00     08 4E 05 A1 |  if_e	add	fp, #8
33e04     A7 0E 68 AC |  if_e	wrlong	#7, fp
33e08     08 4E 85 A1 |  if_e	sub	fp, #8
33e0c     08 4E 05 F1 | 	add	fp, #8
33e10     A7 FA 01 FB | 	rdlong	result1, fp
33e14     08 4E 85 F1 | 	sub	fp, #8
33e18     04 FA 0D F2 | 	cmp	result1, #4 wz
33e1c     08 4E 05 A1 |  if_e	add	fp, #8
33e20     A7 00 68 AC |  if_e	wrlong	#0, fp
33e24     08 4E 85 A1 |  if_e	sub	fp, #8
33e28                 | LR__5021
33e28                 | LR__5022
33e28                 | LR__5023
33e28     08 4E 05 F1 | 	add	fp, #8
33e2c     A7 FA 09 FB | 	rdlong	result1, fp wz
33e30     08 4E 85 F1 | 	sub	fp, #8
33e34     88 00 90 5D |  if_ne	jmp	#LR__5026
33e38     0C 4E 05 F1 | 	add	fp, #12
33e3c     A7 12 02 F6 | 	mov	arg01, fp
33e40     0C 4E 85 F1 | 	sub	fp, #12
33e44     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
33e48     08 4E 05 F1 | 	add	fp, #8
33e4c     A7 FA 61 FC | 	wrlong	result1, fp
33e50     08 4E 85 F1 | 	sub	fp, #8
33e54     00 FA 0D F2 | 	cmp	result1, #0 wz
33e58     38 00 90 5D |  if_ne	jmp	#LR__5024
33e5c     6C 4E 05 F1 | 	add	fp, #108
33e60     A7 FA 09 FB | 	rdlong	result1, fp wz
33e64     6C 4E 85 F1 | 	sub	fp, #108
33e68     28 00 90 AD |  if_e	jmp	#LR__5024
33e6c     0C 4E 05 F1 | 	add	fp, #12
33e70     A7 12 02 F6 | 	mov	arg01, fp
33e74     60 4E 05 F1 | 	add	fp, #96
33e78     A7 14 02 FB | 	rdlong	arg02, fp
33e7c     6C 4E 85 F1 | 	sub	fp, #108
33e80     00 16 06 F6 | 	mov	arg03, #0
33e84     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
33e88     08 4E 05 F1 | 	add	fp, #8
33e8c     A7 FA 61 FC | 	wrlong	result1, fp
33e90     08 4E 85 F1 | 	sub	fp, #8
33e94                 | LR__5024
33e94     08 4E 05 F1 | 	add	fp, #8
33e98     A7 FA 09 FB | 	rdlong	result1, fp wz
33e9c     08 4E 85 F1 | 	sub	fp, #8
33ea0     1C 00 90 5D |  if_ne	jmp	#LR__5025
33ea4     70 4E 05 F1 | 	add	fp, #112
33ea8     A7 12 02 FB | 	rdlong	arg01, fp
33eac     70 4E 85 F1 | 	sub	fp, #112
33eb0     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
33eb4     08 4E 05 F1 | 	add	fp, #8
33eb8     A7 FA 61 FC | 	wrlong	result1, fp
33ebc     08 4E 85 F1 | 	sub	fp, #8
33ec0                 | LR__5025
33ec0                 | LR__5026
33ec0                 | LR__5027
33ec0                 | LR__5028
33ec0                 | ' 			}
33ec0                 | ' 		}
33ec0                 | ' 		;
33ec0                 | ' 	}
33ec0                 | ' 
33ec0                 | ' 	return res ;
33ec0     08 4E 05 F1 | 	add	fp, #8
33ec4     A7 FA 01 FB | 	rdlong	result1, fp
33ec8     08 4E 85 F1 | 	sub	fp, #8
33ecc     A7 F0 03 F6 | 	mov	ptra, fp
33ed0     B2 00 A0 FD | 	call	#popregs_
33ed4                 | _fatfs_cc_f_unlink_ret
33ed4     2D 00 64 FD | 	ret
33ed8                 | 
33ed8                 | _fatfs_cc_f_mkdir
33ed8     00 4A 05 F6 | 	mov	COUNT_, #0
33edc     A8 00 A0 FD | 	call	#pushregs_
33ee0     5C F0 07 F1 | 	add	ptra, #92
33ee4     04 4E 05 F1 | 	add	fp, #4
33ee8     A7 12 62 FC | 	wrlong	arg01, fp
33eec     A7 12 02 F6 | 	mov	arg01, fp
33ef0     48 4E 05 F1 | 	add	fp, #72
33ef4     A7 14 02 F6 | 	mov	arg02, fp
33ef8     4C 4E 85 F1 | 	sub	fp, #76
33efc     02 16 06 F6 | 	mov	arg03, #2
33f00     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
33f04     08 4E 05 F1 | 	add	fp, #8
33f08     A7 FA 61 FC | 	wrlong	result1, fp
33f0c     08 4E 85 F1 | 	sub	fp, #8
33f10     00 FA 0D F2 | 	cmp	result1, #0 wz
33f14     C4 02 90 5D |  if_ne	jmp	#LR__5035
33f18     4C 4E 05 F1 | 	add	fp, #76
33f1c     A7 16 02 FB | 	rdlong	arg03, fp
33f20     40 4E 85 F1 | 	sub	fp, #64
33f24     A7 16 62 FC | 	wrlong	arg03, fp
33f28     A7 12 02 F6 | 	mov	arg01, fp
33f2c     08 4E 85 F1 | 	sub	fp, #8
33f30     A7 14 02 FB | 	rdlong	arg02, fp
33f34     04 4E 85 F1 | 	sub	fp, #4
33f38     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
33f3c     08 4E 05 F1 | 	add	fp, #8
33f40     A7 FA 61 FC | 	wrlong	result1, fp
33f44     00 FA 4D F2 | 	cmps	result1, #0 wz
33f48     08 4E 85 F1 | 	sub	fp, #8
33f4c     08 4E 05 A1 |  if_e	add	fp, #8
33f50     A7 10 68 AC |  if_e	wrlong	#8, fp
33f54     08 4E 85 A1 |  if_e	sub	fp, #8
33f58     08 4E 05 F1 | 	add	fp, #8
33f5c     A7 FA 01 FB | 	rdlong	result1, fp
33f60     08 4E 85 F1 | 	sub	fp, #8
33f64     04 FA 0D F2 | 	cmp	result1, #4 wz
33f68     70 02 90 5D |  if_ne	jmp	#LR__5034
33f6c     4C 4E 05 F1 | 	add	fp, #76
33f70     A7 16 02 FB | 	rdlong	arg03, fp
33f74     10 4E 85 F1 | 	sub	fp, #16
33f78     A7 16 62 FC | 	wrlong	arg03, fp
33f7c     A7 12 02 F6 | 	mov	arg01, fp
33f80     3C 4E 85 F1 | 	sub	fp, #60
33f84     00 14 06 F6 | 	mov	arg02, #0
33f88     04 AC BF FD | 	call	#_fatfs_cc_create_chain
33f8c     50 4E 05 F1 | 	add	fp, #80
33f90     A7 FA 61 FC | 	wrlong	result1, fp
33f94     48 4E 85 F1 | 	sub	fp, #72
33f98     A7 00 68 FC | 	wrlong	#0, fp
33f9c     48 4E 05 F1 | 	add	fp, #72
33fa0     A7 FA 09 FB | 	rdlong	result1, fp wz
33fa4     50 4E 85 F1 | 	sub	fp, #80
33fa8     08 4E 05 A1 |  if_e	add	fp, #8
33fac     A7 0E 68 AC |  if_e	wrlong	#7, fp
33fb0     08 4E 85 A1 |  if_e	sub	fp, #8
33fb4     50 4E 05 F1 | 	add	fp, #80
33fb8     A7 FA 01 FB | 	rdlong	result1, fp
33fbc     50 4E 85 F1 | 	sub	fp, #80
33fc0     01 FA 0D F2 | 	cmp	result1, #1 wz
33fc4     08 4E 05 A1 |  if_e	add	fp, #8
33fc8     A7 04 68 AC |  if_e	wrlong	#2, fp
33fcc     08 4E 85 A1 |  if_e	sub	fp, #8
33fd0     50 4E 05 F1 | 	add	fp, #80
33fd4     A7 16 02 FB | 	rdlong	arg03, fp
33fd8     50 4E 85 F1 | 	sub	fp, #80
33fdc     FF FF 7F FF 
33fe0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
33fe4     08 4E 05 A1 |  if_e	add	fp, #8
33fe8     A7 02 68 AC |  if_e	wrlong	#1, fp
33fec     08 4E 85 A1 |  if_e	sub	fp, #8
33ff0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
33ff4     58 4E 05 F1 | 	add	fp, #88
33ff8     A7 FA 61 FC | 	wrlong	result1, fp
33ffc     50 4E 85 F1 | 	sub	fp, #80
34000     A7 FA 09 FB | 	rdlong	result1, fp wz
34004     08 4E 85 F1 | 	sub	fp, #8
34008     1C 01 90 5D |  if_ne	jmp	#LR__5031
3400c     4C 4E 05 F1 | 	add	fp, #76
34010     A7 12 02 FB | 	rdlong	arg01, fp
34014     04 4E 05 F1 | 	add	fp, #4
34018     A7 14 02 FB | 	rdlong	arg02, fp
3401c     50 4E 85 F1 | 	sub	fp, #80
34020     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
34024     08 4E 05 F1 | 	add	fp, #8
34028     A7 FA 61 FC | 	wrlong	result1, fp
3402c     00 FA 4D F2 | 	cmps	result1, #0 wz
34030     08 4E 85 F1 | 	sub	fp, #8
34034     F0 00 90 5D |  if_ne	jmp	#LR__5030
34038     4C 4E 05 F1 | 	add	fp, #76
3403c     A7 12 02 FB | 	rdlong	arg01, fp
34040     4C 4E 85 F1 | 	sub	fp, #76
34044     34 12 06 F1 | 	add	arg01, #52
34048     20 14 06 F6 | 	mov	arg02, #32
3404c     0B 16 06 F6 | 	mov	arg03, #11
34050     98 00 A0 FD | 	call	#\builtin_bytefill_
34054     4C 4E 05 F1 | 	add	fp, #76
34058     A7 FA 01 FB | 	rdlong	result1, fp
3405c     34 FA 05 F1 | 	add	result1, #52
34060     FD 5C 48 FC | 	wrbyte	#46, result1
34064     A7 16 02 FB | 	rdlong	arg03, fp
34068     3F 16 06 F1 | 	add	arg03, #63
3406c     0B 21 48 FC | 	wrbyte	#16, arg03
34070     A7 12 02 FB | 	rdlong	arg01, fp
34074     4A 12 06 F1 | 	add	arg01, #74
34078     0C 4E 05 F1 | 	add	fp, #12
3407c     A7 14 02 FB | 	rdlong	arg02, fp
34080     09 15 62 FC | 	wrlong	arg02, arg01
34084     0C 4E 85 F1 | 	sub	fp, #12
34088     A7 14 02 FB | 	rdlong	arg02, fp
3408c     0A 13 02 F6 | 	mov	arg01, arg02
34090     34 14 06 F1 | 	add	arg02, #52
34094     04 4E 05 F1 | 	add	fp, #4
34098     A7 16 02 FB | 	rdlong	arg03, fp
3409c     50 4E 85 F1 | 	sub	fp, #80
340a0     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
340a4     4C 4E 05 F1 | 	add	fp, #76
340a8     A7 14 02 FB | 	rdlong	arg02, fp
340ac     0A 13 02 F6 | 	mov	arg01, arg02
340b0     54 12 06 F1 | 	add	arg01, #84
340b4     4C 4E 85 F1 | 	sub	fp, #76
340b8     34 14 06 F1 | 	add	arg02, #52
340bc     20 16 06 F6 | 	mov	arg03, #32
340c0     74 27 BF FD | 	call	#__system____builtin_memmove
340c4     4C 4E 05 F1 | 	add	fp, #76
340c8     A7 16 02 FB | 	rdlong	arg03, fp
340cc     55 16 06 F1 | 	add	arg03, #85
340d0     0B 5D 48 FC | 	wrbyte	#46, arg03
340d4     38 4E 85 F1 | 	sub	fp, #56
340d8     A7 16 02 FB | 	rdlong	arg03, fp
340dc     40 4E 05 F1 | 	add	fp, #64
340e0     A7 16 62 FC | 	wrlong	arg03, fp
340e4     08 4E 85 F1 | 	sub	fp, #8
340e8     A7 14 02 FB | 	rdlong	arg02, fp
340ec     0A 13 02 F6 | 	mov	arg01, arg02
340f0     54 14 06 F1 | 	add	arg02, #84
340f4     4C 4E 85 F1 | 	sub	fp, #76
340f8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
340fc     4C 4E 05 F1 | 	add	fp, #76
34100     A7 16 02 FB | 	rdlong	arg03, fp
34104     03 16 06 F1 | 	add	arg03, #3
34108     0B 03 48 FC | 	wrbyte	#1, arg03
3410c     40 4E 85 F1 | 	sub	fp, #64
34110     A7 12 02 F6 | 	mov	arg01, fp
34114     0C 4E 85 F1 | 	sub	fp, #12
34118     44 BA BF FD | 	call	#_fatfs_cc_dir_register
3411c     08 4E 05 F1 | 	add	fp, #8
34120     A7 FA 61 FC | 	wrlong	result1, fp
34124     08 4E 85 F1 | 	sub	fp, #8
34128                 | LR__5030
34128                 | LR__5031
34128     08 4E 05 F1 | 	add	fp, #8
3412c     A7 FA 09 FB | 	rdlong	result1, fp wz
34130     08 4E 85 F1 | 	sub	fp, #8
34134     88 00 90 5D |  if_ne	jmp	#LR__5032
34138     28 4E 05 F1 | 	add	fp, #40
3413c     A7 12 02 FB | 	rdlong	arg01, fp
34140     16 12 06 F1 | 	add	arg01, #22
34144     30 4E 05 F1 | 	add	fp, #48
34148     A7 14 02 FB | 	rdlong	arg02, fp
3414c     09 15 62 FC | 	wrlong	arg02, arg01
34150     0C 4E 85 F1 | 	sub	fp, #12
34154     A7 12 02 FB | 	rdlong	arg01, fp
34158     24 4E 85 F1 | 	sub	fp, #36
3415c     A7 14 02 FB | 	rdlong	arg02, fp
34160     28 4E 05 F1 | 	add	fp, #40
34164     A7 16 02 FB | 	rdlong	arg03, fp
34168     50 4E 85 F1 | 	sub	fp, #80
3416c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
34170     28 4E 05 F1 | 	add	fp, #40
34174     A7 FA 01 FB | 	rdlong	result1, fp
34178     0B FA 05 F1 | 	add	result1, #11
3417c     FD 20 48 FC | 	wrbyte	#16, result1
34180     24 4E 05 F1 | 	add	fp, #36
34184     A7 FA 01 FB | 	rdlong	result1, fp
34188     03 FA 05 F1 | 	add	result1, #3
3418c     FD 02 48 FC | 	wrbyte	#1, result1
34190     44 4E 85 F1 | 	sub	fp, #68
34194     A7 FA 09 FB | 	rdlong	result1, fp wz
34198     08 4E 85 F1 | 	sub	fp, #8
3419c     3C 00 90 5D |  if_ne	jmp	#LR__5033
341a0     4C 4E 05 F1 | 	add	fp, #76
341a4     A7 12 02 FB | 	rdlong	arg01, fp
341a8     4C 4E 85 F1 | 	sub	fp, #76
341ac     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
341b0     08 4E 05 F1 | 	add	fp, #8
341b4     A7 FA 61 FC | 	wrlong	result1, fp
341b8     08 4E 85 F1 | 	sub	fp, #8
341bc     1C 00 90 FD | 	jmp	#LR__5033
341c0                 | LR__5032
341c0     3C 4E 05 F1 | 	add	fp, #60
341c4     A7 12 02 F6 | 	mov	arg01, fp
341c8     14 4E 05 F1 | 	add	fp, #20
341cc     A7 14 02 FB | 	rdlong	arg02, fp
341d0     50 4E 85 F1 | 	sub	fp, #80
341d4     00 16 06 F6 | 	mov	arg03, #0
341d8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
341dc                 | LR__5033
341dc                 | LR__5034
341dc                 | LR__5035
341dc                 | ' 				remove_chain(&sobj, dcl, 0);
341dc                 | ' 			}
341dc                 | ' 		}
341dc                 | ' 		;
341dc                 | ' 	}
341dc                 | ' 
341dc                 | ' 	return res ;
341dc     08 4E 05 F1 | 	add	fp, #8
341e0     A7 FA 01 FB | 	rdlong	result1, fp
341e4     08 4E 85 F1 | 	sub	fp, #8
341e8     A7 F0 03 F6 | 	mov	ptra, fp
341ec     B2 00 A0 FD | 	call	#popregs_
341f0                 | _fatfs_cc_f_mkdir_ret
341f0     2D 00 64 FD | 	ret
341f4                 | 
341f4                 | _fatfs_cc_f_rename
341f4     01 4A 05 F6 | 	mov	COUNT_, #1
341f8     A8 00 A0 FD | 	call	#pushregs_
341fc     9C F0 07 F1 | 	add	ptra, #156
34200     04 4E 05 F1 | 	add	fp, #4
34204     A7 12 62 FC | 	wrlong	arg01, fp
34208     04 4E 05 F1 | 	add	fp, #4
3420c     A7 14 62 FC | 	wrlong	arg02, fp
34210     A7 12 02 F6 | 	mov	arg01, fp
34214     08 4E 85 F1 | 	sub	fp, #8
34218     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
3421c     04 4E 05 F1 | 	add	fp, #4
34220     A7 12 02 F6 | 	mov	arg01, fp
34224     6C 4E 05 F1 | 	add	fp, #108
34228     A7 14 02 F6 | 	mov	arg02, fp
3422c     70 4E 85 F1 | 	sub	fp, #112
34230     02 16 06 F6 | 	mov	arg03, #2
34234     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
34238     0C 4E 05 F1 | 	add	fp, #12
3423c     A7 FA 61 FC | 	wrlong	result1, fp
34240     0C 4E 85 F1 | 	sub	fp, #12
34244     00 FA 0D F2 | 	cmp	result1, #0 wz
34248     44 03 90 5D |  if_ne	jmp	#LR__5053
3424c     70 4E 05 F1 | 	add	fp, #112
34250     A7 16 02 FB | 	rdlong	arg03, fp
34254     60 4E 85 F1 | 	sub	fp, #96
34258     A7 16 62 FC | 	wrlong	arg03, fp
3425c     A7 12 02 F6 | 	mov	arg01, fp
34260     0C 4E 85 F1 | 	sub	fp, #12
34264     A7 14 02 FB | 	rdlong	arg02, fp
34268     04 4E 85 F1 | 	sub	fp, #4
3426c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
34270     0C 4E 05 F1 | 	add	fp, #12
34274     A7 FA 61 FC | 	wrlong	result1, fp
34278     00 FA 4D F2 | 	cmps	result1, #0 wz
3427c     0C 4E 85 F1 | 	sub	fp, #12
34280     1C 00 90 5D |  if_ne	jmp	#LR__5040
34284     3B 4E 05 F1 | 	add	fp, #59
34288     A7 FA C1 FA | 	rdbyte	result1, fp
3428c     3B 4E 85 F1 | 	sub	fp, #59
34290     A0 FA CD F7 | 	test	result1, #160 wz
34294     0C 4E 05 51 |  if_ne	add	fp, #12
34298     A7 0C 68 5C |  if_ne	wrlong	#6, fp
3429c     0C 4E 85 51 |  if_ne	sub	fp, #12
342a0                 | LR__5040
342a0     0C 4E 05 F1 | 	add	fp, #12
342a4     A7 26 0A FB | 	rdlong	local01, fp wz
342a8     0C 4E 85 F1 | 	sub	fp, #12
342ac     E0 02 90 5D |  if_ne	jmp	#LR__5052
342b0     74 4E 05 F1 | 	add	fp, #116
342b4     A7 12 02 F6 | 	mov	arg01, fp
342b8     48 4E 85 F1 | 	sub	fp, #72
342bc     A7 14 02 FB | 	rdlong	arg02, fp
342c0     2C 4E 85 F1 | 	sub	fp, #44
342c4     20 16 06 F6 | 	mov	arg03, #32
342c8     6C 25 BF FD | 	call	#__system____builtin_memmove
342cc     40 4E 05 F1 | 	add	fp, #64
342d0     A7 12 02 F6 | 	mov	arg01, fp
342d4     30 4E 85 F1 | 	sub	fp, #48
342d8     A7 14 02 F6 | 	mov	arg02, fp
342dc     10 4E 85 F1 | 	sub	fp, #16
342e0     30 16 06 F6 | 	mov	arg03, #48
342e4     50 25 BF FD | 	call	#__system____builtin_memmove
342e8     40 4E 05 F1 | 	add	fp, #64
342ec     A7 12 02 F6 | 	mov	arg01, fp
342f0     38 4E 85 F1 | 	sub	fp, #56
342f4     A7 14 02 FB | 	rdlong	arg02, fp
342f8     08 4E 85 F1 | 	sub	fp, #8
342fc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
34300     0C 4E 05 F1 | 	add	fp, #12
34304     A7 FA 61 FC | 	wrlong	result1, fp
34308     0C 4E 85 F1 | 	sub	fp, #12
3430c     00 FA 0D F2 | 	cmp	result1, #0 wz
34310     4C 00 90 5D |  if_ne	jmp	#LR__5043
34314     48 4E 05 F1 | 	add	fp, #72
34318     A7 FA 01 FB | 	rdlong	result1, fp
3431c     30 4E 85 F1 | 	sub	fp, #48
34320     A7 16 02 FB | 	rdlong	arg03, fp
34324     18 4E 85 F1 | 	sub	fp, #24
34328     0B FB 09 F2 | 	cmp	result1, arg03 wz
3432c     20 00 90 5D |  if_ne	jmp	#LR__5041
34330     50 4E 05 F1 | 	add	fp, #80
34334     A7 FA 01 FB | 	rdlong	result1, fp
34338     30 4E 85 F1 | 	sub	fp, #48
3433c     A7 16 02 FB | 	rdlong	arg03, fp
34340     20 4E 85 F1 | 	sub	fp, #32
34344     0B FB 09 F2 | 	cmp	result1, arg03 wz
34348     04 26 06 A6 |  if_e	mov	local01, #4
3434c     04 00 90 AD |  if_e	jmp	#LR__5042
34350                 | LR__5041
34350     08 26 06 F6 | 	mov	local01, #8
34354                 | LR__5042
34354     0C 4E 05 F1 | 	add	fp, #12
34358     A7 26 62 FC | 	wrlong	local01, fp
3435c     0C 4E 85 F1 | 	sub	fp, #12
34360                 | LR__5043
34360     0C 4E 05 F1 | 	add	fp, #12
34364     A7 26 02 FB | 	rdlong	local01, fp
34368     0C 4E 85 F1 | 	sub	fp, #12
3436c     04 26 0E F2 | 	cmp	local01, #4 wz
34370     CC 01 90 5D |  if_ne	jmp	#LR__5049
34374     40 4E 05 F1 | 	add	fp, #64
34378     A7 12 02 F6 | 	mov	arg01, fp
3437c     40 4E 85 F1 | 	sub	fp, #64
34380     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
34384     0C 4E 05 F1 | 	add	fp, #12
34388     A7 FA 61 FC | 	wrlong	result1, fp
3438c     0C 4E 85 F1 | 	sub	fp, #12
34390     00 FA 0D F2 | 	cmp	result1, #0 wz
34394     A8 01 90 5D |  if_ne	jmp	#LR__5048
34398     5C 4E 05 F1 | 	add	fp, #92
3439c     A7 12 02 FB | 	rdlong	arg01, fp
343a0     38 4E 05 F1 | 	add	fp, #56
343a4     A7 12 62 FC | 	wrlong	arg01, fp
343a8     0D 12 06 F1 | 	add	arg01, #13
343ac     20 4E 85 F1 | 	sub	fp, #32
343b0     A7 14 02 F6 | 	mov	arg02, fp
343b4     74 4E 85 F1 | 	sub	fp, #116
343b8     0D 14 06 F1 | 	add	arg02, #13
343bc     13 16 06 F6 | 	mov	arg03, #19
343c0     74 24 BF FD | 	call	#__system____builtin_memmove
343c4     94 4E 05 F1 | 	add	fp, #148
343c8     A7 26 02 FB | 	rdlong	local01, fp
343cc     15 4E 85 F1 | 	sub	fp, #21
343d0     A7 FA C1 FA | 	rdbyte	result1, fp
343d4     0B 26 06 F1 | 	add	local01, #11
343d8     13 FB 41 FC | 	wrbyte	result1, local01
343dc     15 4E 05 F1 | 	add	fp, #21
343e0     A7 26 02 FB | 	rdlong	local01, fp
343e4     94 4E 85 F1 | 	sub	fp, #148
343e8     0B 26 06 F1 | 	add	local01, #11
343ec     13 27 C2 FA | 	rdbyte	local01, local01
343f0     10 26 CE F7 | 	test	local01, #16 wz
343f4     24 00 90 5D |  if_ne	jmp	#LR__5044
343f8     94 4E 05 F1 | 	add	fp, #148
343fc     A7 FA 01 FB | 	rdlong	result1, fp
34400     FD 26 02 F6 | 	mov	local01, result1
34404     94 4E 85 F1 | 	sub	fp, #148
34408     0B FA 05 F1 | 	add	result1, #11
3440c     FD FA C1 FA | 	rdbyte	result1, result1
34410     20 FA 45 F5 | 	or	result1, #32
34414     0B 26 06 F1 | 	add	local01, #11
34418     13 FB 41 FC | 	wrbyte	result1, local01
3441c                 | LR__5044
3441c     70 4E 05 F1 | 	add	fp, #112
34420     A7 26 02 FB | 	rdlong	local01, fp
34424     03 26 06 F1 | 	add	local01, #3
34428     13 03 48 FC | 	wrbyte	#1, local01
3442c     24 4E 05 F1 | 	add	fp, #36
34430     A7 26 02 FB | 	rdlong	local01, fp
34434     94 4E 85 F1 | 	sub	fp, #148
34438     0B 26 06 F1 | 	add	local01, #11
3443c     13 27 C2 FA | 	rdbyte	local01, local01
34440     10 26 CE F7 | 	test	local01, #16 wz
34444     F8 00 90 AD |  if_e	jmp	#LR__5047
34448     18 4E 05 F1 | 	add	fp, #24
3444c     A7 16 02 FB | 	rdlong	arg03, fp
34450     30 4E 05 F1 | 	add	fp, #48
34454     A7 26 02 FB | 	rdlong	local01, fp
34458     48 4E 85 F1 | 	sub	fp, #72
3445c     13 17 0A F2 | 	cmp	arg03, local01 wz
34460     DC 00 90 AD |  if_e	jmp	#LR__5047
34464     70 4E 05 F1 | 	add	fp, #112
34468     A7 12 02 FB | 	rdlong	arg01, fp
3446c     09 27 02 F6 | 	mov	local01, arg01
34470     24 4E 05 F1 | 	add	fp, #36
34474     A7 14 02 FB | 	rdlong	arg02, fp
34478     94 4E 85 F1 | 	sub	fp, #148
3447c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
34480     FD 14 02 F6 | 	mov	arg02, result1
34484     13 13 02 F6 | 	mov	arg01, local01
34488     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
3448c     98 4E 05 F1 | 	add	fp, #152
34490     A7 FA 61 FC | 	wrlong	result1, fp
34494     00 FA 4D F2 | 	cmps	result1, #0 wz
34498     98 4E 85 F1 | 	sub	fp, #152
3449c     0C 4E 05 A1 |  if_e	add	fp, #12
344a0     A7 04 68 AC |  if_e	wrlong	#2, fp
344a4     0C 4E 85 A1 |  if_e	sub	fp, #12
344a8     94 00 90 AD |  if_e	jmp	#LR__5046
344ac     70 4E 05 F1 | 	add	fp, #112
344b0     A7 12 02 FB | 	rdlong	arg01, fp
344b4     28 4E 05 F1 | 	add	fp, #40
344b8     A7 14 02 FB | 	rdlong	arg02, fp
344bc     98 4E 85 F1 | 	sub	fp, #152
344c0     4C A0 BF FD | 	call	#_fatfs_cc_move_window
344c4     0C 4E 05 F1 | 	add	fp, #12
344c8     A7 FA 61 FC | 	wrlong	result1, fp
344cc     64 4E 05 F1 | 	add	fp, #100
344d0     A7 26 02 FB | 	rdlong	local01, fp
344d4     54 26 06 F1 | 	add	local01, #84
344d8     24 4E 05 F1 | 	add	fp, #36
344dc     A7 26 62 FC | 	wrlong	local01, fp
344e0     88 4E 85 F1 | 	sub	fp, #136
344e4     A7 26 0A FB | 	rdlong	local01, fp wz
344e8     0C 4E 85 F1 | 	sub	fp, #12
344ec     50 00 90 5D |  if_ne	jmp	#LR__5045
344f0     94 4E 05 F1 | 	add	fp, #148
344f4     A7 26 02 FB | 	rdlong	local01, fp
344f8     94 4E 85 F1 | 	sub	fp, #148
344fc     01 26 06 F1 | 	add	local01, #1
34500     13 27 C2 FA | 	rdbyte	local01, local01
34504     2E 26 0E F2 | 	cmp	local01, #46 wz
34508     34 00 90 5D |  if_ne	jmp	#LR__5045
3450c     70 4E 05 F1 | 	add	fp, #112
34510     A7 12 02 FB | 	rdlong	arg01, fp
34514     24 4E 05 F1 | 	add	fp, #36
34518     A7 14 02 FB | 	rdlong	arg02, fp
3451c     4C 4E 85 F1 | 	sub	fp, #76
34520     A7 16 02 FB | 	rdlong	arg03, fp
34524     48 4E 85 F1 | 	sub	fp, #72
34528     50 AD BF FD | 	call	#_fatfs_cc_st_clust
3452c     70 4E 05 F1 | 	add	fp, #112
34530     A7 26 02 FB | 	rdlong	local01, fp
34534     70 4E 85 F1 | 	sub	fp, #112
34538     03 26 06 F1 | 	add	local01, #3
3453c     13 03 48 FC | 	wrbyte	#1, local01
34540                 | LR__5045
34540                 | LR__5046
34540                 | LR__5047
34540                 | LR__5048
34540                 | LR__5049
34540     0C 4E 05 F1 | 	add	fp, #12
34544     A7 26 0A FB | 	rdlong	local01, fp wz
34548     0C 4E 85 F1 | 	sub	fp, #12
3454c     40 00 90 5D |  if_ne	jmp	#LR__5051
34550     10 4E 05 F1 | 	add	fp, #16
34554     A7 12 02 F6 | 	mov	arg01, fp
34558     10 4E 85 F1 | 	sub	fp, #16
3455c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
34560     0C 4E 05 F1 | 	add	fp, #12
34564     A7 FA 61 FC | 	wrlong	result1, fp
34568     0C 4E 85 F1 | 	sub	fp, #12
3456c     00 FA 0D F2 | 	cmp	result1, #0 wz
34570     1C 00 90 5D |  if_ne	jmp	#LR__5050
34574     70 4E 05 F1 | 	add	fp, #112
34578     A7 12 02 FB | 	rdlong	arg01, fp
3457c     70 4E 85 F1 | 	sub	fp, #112
34580     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
34584     0C 4E 05 F1 | 	add	fp, #12
34588     A7 FA 61 FC | 	wrlong	result1, fp
3458c     0C 4E 85 F1 | 	sub	fp, #12
34590                 | LR__5050
34590                 | LR__5051
34590                 | LR__5052
34590                 | LR__5053
34590                 | ' 					res = sync_fs(fs);
34590                 | ' 				}
34590                 | ' 			}
34590                 | ' 
34590                 | ' 		}
34590                 | ' 		;
34590                 | ' 	}
34590                 | ' 
34590                 | ' 	return res ;
34590     0C 4E 05 F1 | 	add	fp, #12
34594     A7 FA 01 FB | 	rdlong	result1, fp
34598     0C 4E 85 F1 | 	sub	fp, #12
3459c     A7 F0 03 F6 | 	mov	ptra, fp
345a0     B2 00 A0 FD | 	call	#popregs_
345a4                 | _fatfs_cc_f_rename_ret
345a4     2D 00 64 FD | 	ret
345a8                 | 
345a8                 | _fatfs_cc_time
345a8     00 4A 05 F6 | 	mov	COUNT_, #0
345ac     A8 00 A0 FD | 	call	#pushregs_
345b0     14 F0 07 F1 | 	add	ptra, #20
345b4     04 4E 05 F1 | 	add	fp, #4
345b8     A7 12 62 FC | 	wrlong	arg01, fp
345bc     04 4E 05 F1 | 	add	fp, #4
345c0     A7 12 02 F6 | 	mov	arg01, fp
345c4     08 4E 85 F1 | 	sub	fp, #8
345c8     00 14 06 F6 | 	mov	arg02, #0
345cc     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
345d0     08 4E 05 F1 | 	add	fp, #8
345d4     A7 FA 01 FB | 	rdlong	result1, fp
345d8     08 4E 05 F1 | 	add	fp, #8
345dc     A7 FA 61 FC | 	wrlong	result1, fp
345e0     0C 4E 85 F1 | 	sub	fp, #12
345e4     A7 FA 09 FB | 	rdlong	result1, fp wz
345e8     04 4E 85 F1 | 	sub	fp, #4
345ec     18 00 90 AD |  if_e	jmp	#LR__5060
345f0     04 4E 05 F1 | 	add	fp, #4
345f4     A7 FA 01 FB | 	rdlong	result1, fp
345f8     0C 4E 05 F1 | 	add	fp, #12
345fc     A7 14 02 FB | 	rdlong	arg02, fp
34600     10 4E 85 F1 | 	sub	fp, #16
34604     FD 14 62 FC | 	wrlong	arg02, result1
34608                 | LR__5060
34608                 | '         *tp = now;
34608                 | '     return now;
34608     10 4E 05 F1 | 	add	fp, #16
3460c     A7 FA 01 FB | 	rdlong	result1, fp
34610     10 4E 85 F1 | 	sub	fp, #16
34614     A7 F0 03 F6 | 	mov	ptra, fp
34618     B2 00 A0 FD | 	call	#popregs_
3461c                 | _fatfs_cc_time_ret
3461c     2D 00 64 FD | 	ret
34620                 | 
34620                 | _fatfs_cc_mktime
34620     06 4A 05 F6 | 	mov	COUNT_, #6
34624     A8 00 A0 FD | 	call	#pushregs_
34628     09 27 02 F6 | 	mov	local01, arg01
3462c     14 26 06 F1 | 	add	local01, #20
34630     13 13 02 FB | 	rdlong	arg01, local01
34634     14 26 86 F1 | 	sub	local01, #20
34638     46 12 56 F2 | 	cmps	arg01, #70 wc
3463c                 | '                 return (time_t) -1;
3463c     01 FA 65 C6 |  if_b	neg	result1, #1
34640     7C 01 90 CD |  if_b	jmp	#LR__5074
34644     03 00 00 FF 
34648     6C 29 06 F6 | 	mov	local02, ##1900
3464c     14 26 06 F1 | 	add	local01, #20
34650     13 FB 01 FB | 	rdlong	result1, local01
34654     FD 28 02 F1 | 	add	local02, result1
34658     08 26 86 F1 | 	sub	local01, #8
3465c     13 2B 02 FB | 	rdlong	local03, local01
34660     01 2A 86 F1 | 	sub	local03, #1
34664     04 26 06 F1 | 	add	local01, #4
34668     13 13 02 FB | 	rdlong	arg01, local01
3466c     10 26 86 F1 | 	sub	local01, #16
34670     02 12 66 F0 | 	shl	arg01, #2
34674     02 00 00 FF 
34678     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
3467c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
34680     09 FB 01 FB | 	rdlong	result1, arg01
34684     FD 2A 02 F1 | 	add	local03, result1
34688     14 13 02 F6 | 	mov	arg01, local02
3468c     02 00 00 FF 
34690     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
34694     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
34698     00 FA 0D F2 | 	cmp	result1, #0 wz
3469c     1C 00 90 AD |  if_e	jmp	#LR__5070
346a0     00 2C 06 F6 | 	mov	local04, #0
346a4     10 26 06 F1 | 	add	local01, #16
346a8     13 FB 01 FB | 	rdlong	result1, local01
346ac     10 26 86 F1 | 	sub	local01, #16
346b0     02 FA 55 F2 | 	cmps	result1, #2 wc
346b4     01 2C 06 36 |  if_ae	mov	local04, #1
346b8     04 00 90 FD | 	jmp	#LR__5071
346bc                 | LR__5070
346bc     00 2C 06 F6 | 	mov	local04, #0
346c0                 | LR__5071
346c0     04 26 06 F1 | 	add	local01, #4
346c4     13 FB 01 FB | 	rdlong	result1, local01
346c8     04 26 86 F1 | 	sub	local01, #4
346cc     13 2F 02 FB | 	rdlong	local05, local01
346d0     08 26 06 F1 | 	add	local01, #8
346d4     13 13 02 FB | 	rdlong	arg01, local01
346d8     07 00 00 FF 
346dc     10 12 06 FD | 	qmul	arg01, ##3600
346e0     16 2B 02 F1 | 	add	local03, local04
346e4     FD 2C 02 F6 | 	mov	local04, result1
346e8     04 2C 66 F0 | 	shl	local04, #4
346ec     FD 2C 82 F1 | 	sub	local04, result1
346f0     02 2C 66 F0 | 	shl	local04, #2
346f4     16 2F 02 F1 | 	add	local05, local04
346f8     08 26 86 F1 | 	sub	local01, #8
346fc     18 2C 62 FD | 	getqx	local04
34700     A8 00 00 FF 
34704     80 2B 06 FD | 	qmul	local03, ##86400
34708     16 2F 02 F1 | 	add	local05, local04
3470c     14 2B 02 F6 | 	mov	local03, local02
34710     03 00 00 FF 
34714     B2 2B 86 F1 | 	sub	local03, ##1970
34718     18 2C 62 FD | 	getqx	local04
3471c     99 F0 00 FF 
34720     80 2B 06 FD | 	qmul	local03, ##31536000
34724     16 2F 02 F1 | 	add	local05, local04
34728     14 2B 02 F6 | 	mov	local03, local02
3472c     03 00 00 FF 
34730     B1 2B 86 F1 | 	sub	local03, ##1969
34734     15 31 52 F6 | 	abs	local06, local03 wc
34738     02 30 46 F0 | 	shr	local06, #2
3473c     18 31 82 F6 | 	negc	local06, local06
34740     03 00 00 FF 
34744     D1 29 56 F2 | 	cmps	local02, ##2001 wc
34748     18 2C 62 FD | 	getqx	local04
3474c     16 2F 02 F1 | 	add	local05, local04
34750     18 00 90 CD |  if_b	jmp	#LR__5072
34754     03 00 00 FF 
34758     D0 29 86 F1 | 	sub	local02, ##2000
3475c     14 2D 52 F6 | 	abs	local04, local02 wc
34760     64 2C 16 FD | 	qdiv	local04, #100
34764     18 2C 62 FD | 	getqx	local04
34768     16 31 A2 F3 | 	sumnc	local06, local04
3476c                 | LR__5072
3476c     A8 00 00 FF 
34770     80 31 06 FD | 	qmul	local06, ##86400
34774     18 30 62 FD | 	getqx	local06
34778     18 2F 02 F1 | 	add	local05, local06
3477c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
34780     02 00 00 FF 
34784     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
34788     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
3478c     18 2F 02 F1 | 	add	local05, local06
34790     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
34794     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34798     02 00 00 FF 
3479c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
347a0     01 2A 0E F2 | 	cmp	local03, #1 wz
347a4     14 00 90 5D |  if_ne	jmp	#LR__5073
347a8     13 13 02 F6 | 	mov	arg01, local01
347ac     DC 19 B0 FD | 	call	#_fatfs_cc___indst
347b0     00 FA 0D F2 | 	cmp	result1, #0 wz
347b4     07 00 00 5F 
347b8     10 2E 86 51 |  if_ne	sub	local05, ##3600
347bc                 | LR__5073
347bc                 | '                 s -=  (3600L) ;
347bc                 | ' 
347bc                 | '         return s;
347bc     17 FB 01 F6 | 	mov	result1, local05
347c0                 | LR__5074
347c0     A7 F0 03 F6 | 	mov	ptra, fp
347c4     B2 00 A0 FD | 	call	#popregs_
347c8                 | _fatfs_cc_mktime_ret
347c8     2D 00 64 FD | 	ret
347cc                 | 
347cc                 | _fatfs_cc__gmtime_r
347cc     03 4A 05 F6 | 	mov	COUNT_, #3
347d0     A8 00 A0 FD | 	call	#pushregs_
347d4     09 27 02 FB | 	rdlong	local01, arg01
347d8     A8 00 00 FF 
347dc     80 27 16 FD | 	qdiv	local01, ##86400
347e0     18 FA 61 FD | 	getqx	result1
347e4     04 FA 05 F1 | 	add	result1, #4
347e8     07 FA 15 FD | 	qdiv	result1, #7
347ec     18 14 06 F1 | 	add	arg02, #24
347f0     D1 7F 27 FF 
347f4     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
347f8     D1 7F 27 3F 
347fc     00 26 86 31 |  if_ae	sub	local01, ##1325376000
34800     03 00 00 3F 
34804     DC 29 06 36 |  if_ae	mov	local02, ##2012
34808     03 00 00 CF 
3480c     B2 29 06 C6 |  if_b	mov	local02, ##1970
34810                 | ' 	  year = 1970;
34810                 | ' 	}
34810                 | ' 
34810                 | ' 	for(;;) {
34810     19 FA 61 FD | 	getqy	result1
34814     0A FB 61 FC | 	wrlong	result1, arg02
34818     18 14 86 F1 | 	sub	arg02, #24
3481c                 | LR__5080
3481c     14 13 02 F6 | 	mov	arg01, local02
34820     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
34824     00 FA 0D F2 | 	cmp	result1, #0 wz
34828     42 F1 00 5F 
3482c     00 2B 06 56 |  if_ne	mov	local03, ##31622400
34830     99 F0 00 AF 
34834     80 2B 06 A6 |  if_e	mov	local03, ##31536000
34838     15 27 12 F2 | 	cmp	local01, local03 wc
3483c                 | ' 	    break;
3483c     01 28 06 31 |  if_ae	add	local02, #1
34840     15 27 82 31 |  if_ae	sub	local01, local03
34844     D4 FF 9F 3D |  if_ae	jmp	#LR__5080
34848     A8 00 00 FF 
3484c     80 27 16 FD | 	qdiv	local01, ##86400
34850     14 2B 02 F6 | 	mov	local03, local02
34854     03 00 00 FF 
34858     6C 2B 86 F1 | 	sub	local03, ##1900
3485c     14 14 06 F1 | 	add	arg02, #20
34860     0A 2B 62 FC | 	wrlong	local03, arg02
34864     08 14 06 F1 | 	add	arg02, #8
34868     14 13 02 F6 | 	mov	arg01, local02
3486c     18 28 62 FD | 	getqx	local02
34870     0A 29 62 FC | 	wrlong	local02, arg02
34874     1C 14 86 F1 | 	sub	arg02, #28
34878     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
3487c     00 FA 0D F2 | 	cmp	result1, #0 wz
34880     1D 2A 06 56 |  if_ne	mov	local03, #29
34884     1C 2A 06 A6 |  if_e	mov	local03, #28
34888     02 00 00 FF 
3488c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
34890     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
34894     02 00 00 FF 
34898     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
3489c                 | ' 
3489c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
3489c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
3489c     00 12 06 F6 | 	mov	arg01, #0
348a0     97 2A 48 FB | 	callpa	#(@LR__5082-@LR__5081)>>2,fcache_load_ptr_
348a4                 | LR__5081
348a4     09 2B 02 F6 | 	mov	local03, arg01
348a8     02 2A 66 F0 | 	shl	local03, #2
348ac     02 00 00 FF 
348b0     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
348b4     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
348b8     15 2B 02 FB | 	rdlong	local03, local03
348bc     15 29 52 F2 | 	cmps	local02, local03 wc
348c0     02 00 00 FF 
348c4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
348c8     2C 00 90 CD |  if_b	jmp	#LR__5083
348cc     09 2B 02 F6 | 	mov	local03, arg01
348d0     02 2A 66 F0 | 	shl	local03, #2
348d4     02 00 00 FF 
348d8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
348dc     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
348e0     15 2B 02 FB | 	rdlong	local03, local03
348e4     15 29 82 F1 | 	sub	local02, local03
348e8     01 12 06 F1 | 	add	arg01, #1
348ec     02 00 00 FF 
348f0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
348f4     AC FF 9F FD | 	jmp	#LR__5081
348f8                 | LR__5082
348f8                 | LR__5083
348f8     A8 00 00 FF 
348fc     80 27 16 FD | 	qdiv	local01, ##86400
34900     10 14 06 F1 | 	add	arg02, #16
34904     0A 13 62 FC | 	wrlong	arg01, arg02
34908     01 28 06 F1 | 	add	local02, #1
3490c     04 14 86 F1 | 	sub	arg02, #4
34910     0A 29 62 FC | 	wrlong	local02, arg02
34914     19 26 62 FD | 	getqy	local01
34918     07 00 00 FF 
3491c     10 26 16 FD | 	qdiv	local01, ##3600
34920     18 2A 62 FD | 	getqx	local03
34924     07 00 00 FF 
34928     10 26 16 FD | 	qdiv	local01, ##3600
3492c     04 14 86 F1 | 	sub	arg02, #4
34930     0A 2B 62 FC | 	wrlong	local03, arg02
34934     19 26 62 FD | 	getqy	local01
34938     3C 26 16 FD | 	qdiv	local01, #60
3493c     18 2A 62 FD | 	getqx	local03
34940     3C 26 16 FD | 	qdiv	local01, #60
34944     04 14 86 F1 | 	sub	arg02, #4
34948     0A 2B 62 FC | 	wrlong	local03, arg02
3494c     04 14 86 F1 | 	sub	arg02, #4
34950                 | '         stm->tm_isdst = 0;
34950                 | ' 
34950                 | ' ;
34950                 | '         return stm;
34950     0A FB 01 F6 | 	mov	result1, arg02
34954     19 2A 62 FD | 	getqy	local03
34958     0A 2B 62 FC | 	wrlong	local03, arg02
3495c     20 14 06 F1 | 	add	arg02, #32
34960     0A 01 68 FC | 	wrlong	#0, arg02
34964     A7 F0 03 F6 | 	mov	ptra, fp
34968     B2 00 A0 FD | 	call	#popregs_
3496c                 | _fatfs_cc__gmtime_r_ret
3496c     2D 00 64 FD | 	ret
34970                 | 
34970                 | _fatfs_cc__tzset
34970     B2 01 00 FF 
34974     B5 12 06 F6 | 	mov	arg01, ##@LR__5395
34978     34 00 B0 FD | 	call	#_fatfs_cc_getenv
3497c     FD 12 02 F6 | 	mov	arg01, result1
34980     02 00 00 FF 
34984     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
34988     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
3498c     02 00 00 FF 
34990     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
34994     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
34998     02 00 00 FF 
3499c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
349a0     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
349a4     02 00 00 FF 
349a8     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
349ac                 | _fatfs_cc__tzset_ret
349ac     2D 00 64 FD | 	ret
349b0                 | 
349b0                 | _fatfs_cc_getenv
349b0     06 4A 05 F6 | 	mov	COUNT_, #6
349b4     A8 00 A0 FD | 	call	#pushregs_
349b8     09 27 02 F6 | 	mov	local01, arg01
349bc     09 29 02 F6 | 	mov	local02, arg01
349c0     97 06 48 FB | 	callpa	#(@LR__5091-@LR__5090)>>2,fcache_load_ptr_
349c4                 | LR__5090
349c4     14 FB C9 FA | 	rdbyte	result1, local02 wz
349c8     01 28 06 51 |  if_ne	add	local02, #1
349cc     F4 FF 9F 5D |  if_ne	jmp	#LR__5090
349d0                 | LR__5091
349d0     09 29 82 F1 | 	sub	local02, arg01
349d4     14 FB 01 F6 | 	mov	result1, local02
349d8     02 00 00 FF 
349dc     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
349e0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
349e4     02 00 00 FF 
349e8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
349ec                 | '             return 0;
349ec     00 FA 05 A6 |  if_e	mov	result1, #0
349f0     5C 00 90 AD |  if_e	jmp	#LR__5094
349f4                 | ' 
349f4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
349f4     02 00 00 FF 
349f8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
349fc     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
34a00     02 00 00 FF 
34a04     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
34a08                 | LR__5092
34a08     15 2D 0A FB | 	rdlong	local04, local03 wz
34a0c     3C 00 90 AD |  if_e	jmp	#LR__5093
34a10     16 13 02 F6 | 	mov	arg01, local04
34a14     13 15 02 F6 | 	mov	arg02, local01
34a18     14 17 02 F6 | 	mov	arg03, local02
34a1c     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
34a20     00 FA 0D F2 | 	cmp	result1, #0 wz
34a24     14 2F 02 A6 |  if_e	mov	local05, local02
34a28     16 2F 02 A1 |  if_e	add	local05, local04
34a2c     17 31 C2 AA |  if_e	rdbyte	local06, local05
34a30     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
34a34                 | ' 			return name+len+1;
34a34     14 2D 02 A1 |  if_e	add	local04, local02
34a38     01 2C 06 A1 |  if_e	add	local04, #1
34a3c     16 FB 01 A6 |  if_e	mov	result1, local04
34a40     0C 00 90 AD |  if_e	jmp	#LR__5094
34a44     04 2A 06 F1 | 	add	local03, #4
34a48     BC FF 9F FD | 	jmp	#LR__5092
34a4c                 | LR__5093
34a4c                 | ' 	}
34a4c                 | ' 	return 0;
34a4c     00 FA 05 F6 | 	mov	result1, #0
34a50                 | LR__5094
34a50     A7 F0 03 F6 | 	mov	ptra, fp
34a54     B2 00 A0 FD | 	call	#popregs_
34a58                 | _fatfs_cc_getenv_ret
34a58     2D 00 64 FD | 	ret
34a5c                 | 
34a5c                 | _fatfs_cc__get_fattime
34a5c     00 4A 05 F6 | 	mov	COUNT_, #0
34a60     A8 00 A0 FD | 	call	#pushregs_
34a64     34 F0 07 F1 | 	add	ptra, #52
34a68     00 12 06 F6 | 	mov	arg01, #0
34a6c     38 FB BF FD | 	call	#_fatfs_cc_time
34a70     04 4E 05 F1 | 	add	fp, #4
34a74     A7 FA 61 FC | 	wrlong	result1, fp
34a78     A7 12 02 F6 | 	mov	arg01, fp
34a7c     0C 4E 05 F1 | 	add	fp, #12
34a80     A7 14 02 F6 | 	mov	arg02, fp
34a84     10 4E 85 F1 | 	sub	fp, #16
34a88     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
34a8c     24 4E 05 F1 | 	add	fp, #36
34a90     A7 14 02 FB | 	rdlong	arg02, fp
34a94     50 14 86 F1 | 	sub	arg02, #80
34a98     09 14 66 F0 | 	shl	arg02, #9
34a9c     04 4E 85 F1 | 	sub	fp, #4
34aa0     A7 FA 01 FB | 	rdlong	result1, fp
34aa4     01 FA 05 F1 | 	add	result1, #1
34aa8     05 FA 65 F0 | 	shl	result1, #5
34aac     FD 14 42 F5 | 	or	arg02, result1
34ab0     04 4E 85 F1 | 	sub	fp, #4
34ab4     A7 FA 01 FB | 	rdlong	result1, fp
34ab8     FD 14 42 F5 | 	or	arg02, result1
34abc     14 4E 85 F1 | 	sub	fp, #20
34ac0     A7 14 62 FC | 	wrlong	arg02, fp
34ac4     10 4E 05 F1 | 	add	fp, #16
34ac8     A7 14 02 FB | 	rdlong	arg02, fp
34acc     0B 14 66 F0 | 	shl	arg02, #11
34ad0     04 4E 85 F1 | 	sub	fp, #4
34ad4     A7 FA 01 FB | 	rdlong	result1, fp
34ad8     05 FA 65 F0 | 	shl	result1, #5
34adc     FD 14 42 F5 | 	or	arg02, result1
34ae0     04 4E 85 F1 | 	sub	fp, #4
34ae4     A7 FA 01 FB | 	rdlong	result1, fp
34ae8     FD 14 42 F5 | 	or	arg02, result1
34aec     04 4E 85 F1 | 	sub	fp, #4
34af0     A7 14 62 FC | 	wrlong	arg02, fp
34af4                 | ' 
34af4                 | '     now = time(0);
34af4                 | '     _gmtime_r (&now, &date);
34af4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
34af4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
34af4                 | '     return (ffdate << 16) | fftime;
34af4     04 4E 85 F1 | 	sub	fp, #4
34af8     A7 FA 01 FB | 	rdlong	result1, fp
34afc     10 FA 65 F0 | 	shl	result1, #16
34b00     08 4E 85 F1 | 	sub	fp, #8
34b04     0A FB 41 F5 | 	or	result1, arg02
34b08     A7 F0 03 F6 | 	mov	ptra, fp
34b0c     B2 00 A0 FD | 	call	#popregs_
34b10                 | _fatfs_cc__get_fattime_ret
34b10     2D 00 64 FD | 	ret
34b14                 | 
34b14                 | _fatfs_cc_unixtime_1032
34b14     00 4A 05 F6 | 	mov	COUNT_, #0
34b18     A8 00 A0 FD | 	call	#pushregs_
34b1c     34 F0 07 F1 | 	add	ptra, #52
34b20     04 4E 05 F1 | 	add	fp, #4
34b24     A7 12 62 FC | 	wrlong	arg01, fp
34b28     04 4E 05 F1 | 	add	fp, #4
34b2c     A7 14 62 FC | 	wrlong	arg02, fp
34b30     04 4E 85 F1 | 	sub	fp, #4
34b34     A7 14 02 FB | 	rdlong	arg02, fp
34b38     09 14 46 F0 | 	shr	arg02, #9
34b3c     7F 14 06 F5 | 	and	arg02, #127
34b40     50 FA 05 F6 | 	mov	result1, #80
34b44     0A FB 01 F1 | 	add	result1, arg02
34b48     20 4E 05 F1 | 	add	fp, #32
34b4c     A7 FA 61 FC | 	wrlong	result1, fp
34b50     20 4E 85 F1 | 	sub	fp, #32
34b54     A7 FA 01 FB | 	rdlong	result1, fp
34b58     05 FA 45 F0 | 	shr	result1, #5
34b5c     FD FA 41 F8 | 	getnib	result1, result1, #0
34b60     01 FA 85 F1 | 	sub	result1, #1
34b64     1C 4E 05 F1 | 	add	fp, #28
34b68     A7 FA 61 FC | 	wrlong	result1, fp
34b6c     1C 4E 85 F1 | 	sub	fp, #28
34b70     A7 FA 01 FB | 	rdlong	result1, fp
34b74     1F FA 05 F5 | 	and	result1, #31
34b78     18 4E 05 F1 | 	add	fp, #24
34b7c     A7 FA 61 FC | 	wrlong	result1, fp
34b80     14 4E 85 F1 | 	sub	fp, #20
34b84     A7 FA 01 FB | 	rdlong	result1, fp
34b88     0B FA 45 F0 | 	shr	result1, #11
34b8c     1F FA 05 F5 | 	and	result1, #31
34b90     10 4E 05 F1 | 	add	fp, #16
34b94     A7 FA 61 FC | 	wrlong	result1, fp
34b98     10 4E 85 F1 | 	sub	fp, #16
34b9c     A7 FA 01 FB | 	rdlong	result1, fp
34ba0     05 FA 45 F0 | 	shr	result1, #5
34ba4     3F FA 05 F5 | 	and	result1, #63
34ba8     0C 4E 05 F1 | 	add	fp, #12
34bac     A7 FA 61 FC | 	wrlong	result1, fp
34bb0     0C 4E 85 F1 | 	sub	fp, #12
34bb4     A7 14 02 FB | 	rdlong	arg02, fp
34bb8     1F 14 06 F5 | 	and	arg02, #31
34bbc     01 14 66 F0 | 	shl	arg02, #1
34bc0     08 4E 05 F1 | 	add	fp, #8
34bc4     A7 14 62 FC | 	wrlong	arg02, fp
34bc8     A7 12 02 F6 | 	mov	arg01, fp
34bcc     10 4E 85 F1 | 	sub	fp, #16
34bd0     4C FA BF FD | 	call	#_fatfs_cc_mktime
34bd4     0C 4E 05 F1 | 	add	fp, #12
34bd8     A7 FA 61 FC | 	wrlong	result1, fp
34bdc                 | ' 
34bdc                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
34bdc                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
34bdc                 | '     date.tm_mday = (dosdate & 0x1f);
34bdc                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
34bdc                 | '     date.tm_min = (dostime >> 5) & 0x3f;
34bdc                 | '     date.tm_sec = (dostime & 0x1f) << 1;
34bdc                 | ' 
34bdc                 | '     t = mktime(&date);
34bdc                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34bdc                 | '     return t;
34bdc     0C 4E 85 F1 | 	sub	fp, #12
34be0     A7 F0 03 F6 | 	mov	ptra, fp
34be4     B2 00 A0 FD | 	call	#popregs_
34be8                 | _fatfs_cc_unixtime_1032_ret
34be8     2D 00 64 FD | 	ret
34bec                 | 
34bec                 | _fatfs_cc__set_dos_error_1034
34bec     09 01 02 F6 | 	mov	_var01, arg01
34bf0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34bf0                 | '     switch (derr) {
34bf0     14 00 26 F3 | 	fle	_var01, #20
34bf4     30 00 62 FD | 	jmprel	_var01
34bf8                 | LR__5100
34bf8     50 00 90 FD | 	jmp	#LR__5101
34bfc     84 00 90 FD | 	jmp	#LR__5115
34c00     80 00 90 FD | 	jmp	#LR__5116
34c04     7C 00 90 FD | 	jmp	#LR__5117
34c08     48 00 90 FD | 	jmp	#LR__5102
34c0c     44 00 90 FD | 	jmp	#LR__5103
34c10     40 00 90 FD | 	jmp	#LR__5104
34c14     44 00 90 FD | 	jmp	#LR__5105
34c18     48 00 90 FD | 	jmp	#LR__5107
34c1c     54 00 90 FD | 	jmp	#LR__5110
34c20     38 00 90 FD | 	jmp	#LR__5106
34c24     4C 00 90 FD | 	jmp	#LR__5111
34c28     48 00 90 FD | 	jmp	#LR__5112
34c2c     44 00 90 FD | 	jmp	#LR__5113
34c30     50 00 90 FD | 	jmp	#LR__5118
34c34     4C 00 90 FD | 	jmp	#LR__5118
34c38     48 00 90 FD | 	jmp	#LR__5118
34c3c     2C 00 90 FD | 	jmp	#LR__5108
34c40     38 00 90 FD | 	jmp	#LR__5114
34c44     2C 00 90 FD | 	jmp	#LR__5109
34c48     38 00 90 FD | 	jmp	#LR__5118
34c4c                 | LR__5101
34c4c     00 02 06 F6 | 	mov	_var02, #0
34c50                 | '         r = 0;
34c50                 | '         break;
34c50     34 00 90 FD | 	jmp	#LR__5119
34c54                 | LR__5102
34c54                 | LR__5103
34c54                 | LR__5104
34c54     04 02 06 F6 | 	mov	_var02, #4
34c58                 | '         r =  4 ;
34c58                 | '         break;
34c58     2C 00 90 FD | 	jmp	#LR__5119
34c5c                 | LR__5105
34c5c                 | LR__5106
34c5c     06 02 06 F6 | 	mov	_var02, #6
34c60                 | '         r =  6 ;
34c60                 | '         break;
34c60     24 00 90 FD | 	jmp	#LR__5119
34c64                 | LR__5107
34c64     09 02 06 F6 | 	mov	_var02, #9
34c68                 | '         r =  9 ;
34c68                 | '         break;
34c68     1C 00 90 FD | 	jmp	#LR__5119
34c6c                 | LR__5108
34c6c     07 02 06 F6 | 	mov	_var02, #7
34c70                 | '         r =  7 ;
34c70                 | '         break;
34c70     14 00 90 FD | 	jmp	#LR__5119
34c74                 | LR__5109
34c74                 | LR__5110
34c74                 | LR__5111
34c74                 | LR__5112
34c74                 | LR__5113
34c74     0A 02 06 F6 | 	mov	_var02, #10
34c78                 | '         r =  10 ;
34c78                 | '         break;
34c78     0C 00 90 FD | 	jmp	#LR__5119
34c7c                 | LR__5114
34c7c     0B 02 06 F6 | 	mov	_var02, #11
34c80                 | '         r =  11 ;
34c80                 | '         break;
34c80     04 00 90 FD | 	jmp	#LR__5119
34c84                 | LR__5115
34c84                 | LR__5116
34c84                 | LR__5117
34c84                 | LR__5118
34c84     0C 02 06 F6 | 	mov	_var02, #12
34c88                 | '         r =  12 ;
34c88                 | '         break;
34c88                 | LR__5119
34c88                 | '     }
34c88                 | '     return _seterror(r);
34c88     00 02 4E F2 | 	cmps	_var02, #0 wz
34c8c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
34c90     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
34c94     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
34c98     01 FA 65 56 |  if_ne	neg	result1, #1
34c9c     00 FA 05 A6 |  if_e	mov	result1, #0
34ca0                 | _fatfs_cc__set_dos_error_1034_ret
34ca0     2D 00 64 FD | 	ret
34ca4                 | 
34ca4                 | _fatfs_cc_v_creat
34ca4     04 4A 05 F6 | 	mov	COUNT_, #4
34ca8     A8 00 A0 FD | 	call	#pushregs_
34cac     09 27 02 F6 | 	mov	local01, arg01
34cb0     0A 29 02 F6 | 	mov	local02, arg02
34cb4     03 00 00 FF 
34cb8     3C 12 06 F6 | 	mov	arg01, ##1596
34cbc                 | '     return _gc_alloc(size);
34cbc     10 14 06 F6 | 	mov	arg02, #16
34cc0     28 5E BF FD | 	call	#__system___gc_doalloc
34cc4     FD 2A 0A F6 | 	mov	local03, result1 wz
34cc8                 | '       return _seterror( 7 );
34cc8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34ccc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34cd0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34cd4     01 FA 65 A6 |  if_e	neg	result1, #1
34cd8     58 00 90 AD |  if_e	jmp	#LR__5121
34cdc     15 13 02 F6 | 	mov	arg01, local03
34ce0     00 14 06 F6 | 	mov	arg02, #0
34ce4     03 00 00 FF 
34ce8     3C 16 06 F6 | 	mov	arg03, ##1596
34cec     98 00 A0 FD | 	call	#\builtin_bytefill_
34cf0     02 00 00 FF 
34cf4     14 2A 06 F1 | 	add	local03, ##1044
34cf8     15 13 02 F6 | 	mov	arg01, local03
34cfc     02 00 00 FF 
34d00     14 2A 86 F1 | 	sub	local03, ##1044
34d04     14 15 02 F6 | 	mov	arg02, local02
34d08     07 16 06 F6 | 	mov	arg03, #7
34d0c     B4 CC BF FD | 	call	#_fatfs_cc_f_open
34d10     FD 2C 0A F6 | 	mov	local04, result1 wz
34d14     14 00 90 AD |  if_e	jmp	#LR__5120
34d18     15 13 02 F6 | 	mov	arg01, local03
34d1c                 | '     return _gc_free(ptr);
34d1c     D8 5E BF FD | 	call	#__system___gc_free
34d20                 | '     free(f);
34d20                 | '     return _set_dos_error(r);
34d20     16 13 02 F6 | 	mov	arg01, local04
34d24     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1034
34d28     08 00 90 FD | 	jmp	#LR__5121
34d2c                 | LR__5120
34d2c     13 2B 62 FC | 	wrlong	local03, local01
34d30                 | '   }
34d30                 | '   fil->vfsdata = f;
34d30                 | '   return 0;
34d30     00 FA 05 F6 | 	mov	result1, #0
34d34                 | LR__5121
34d34     A7 F0 03 F6 | 	mov	ptra, fp
34d38     B2 00 A0 FD | 	call	#popregs_
34d3c                 | _fatfs_cc_v_creat_ret
34d3c     2D 00 64 FD | 	ret
34d40                 | 
34d40                 | _fatfs_cc_v_close
34d40     02 4A 05 F6 | 	mov	COUNT_, #2
34d44     A8 00 A0 FD | 	call	#pushregs_
34d48     09 27 02 FB | 	rdlong	local01, arg01
34d4c     02 00 00 FF 
34d50     14 26 06 F1 | 	add	local01, ##1044
34d54     13 13 02 F6 | 	mov	arg01, local01
34d58     02 00 00 FF 
34d5c     14 26 86 F1 | 	sub	local01, ##1044
34d60     DC E3 BF FD | 	call	#_fatfs_cc_f_close
34d64     FD 28 02 F6 | 	mov	local02, result1
34d68     13 13 02 F6 | 	mov	arg01, local01
34d6c                 | '     return _gc_free(ptr);
34d6c     88 5E BF FD | 	call	#__system___gc_free
34d70                 | '     FAT_FIL *f = fil->vfsdata;
34d70                 | '     r=f_close(&f->fil);
34d70                 | '     free(f);
34d70                 | '     return _set_dos_error(r);
34d70     14 13 02 F6 | 	mov	arg01, local02
34d74     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1034
34d78     A7 F0 03 F6 | 	mov	ptra, fp
34d7c     B2 00 A0 FD | 	call	#popregs_
34d80                 | _fatfs_cc_v_close_ret
34d80     2D 00 64 FD | 	ret
34d84                 | 
34d84                 | _fatfs_cc_v_opendir
34d84     04 4A 05 F6 | 	mov	COUNT_, #4
34d88     A8 00 A0 FD | 	call	#pushregs_
34d8c     09 27 02 F6 | 	mov	local01, arg01
34d90     0A 29 02 F6 | 	mov	local02, arg02
34d94     30 12 06 F6 | 	mov	arg01, #48
34d98                 | '     return _gc_alloc(size);
34d98     10 14 06 F6 | 	mov	arg02, #16
34d9c     4C 5D BF FD | 	call	#__system___gc_doalloc
34da0     FD 2A 0A F6 | 	mov	local03, result1 wz
34da4                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
34da4                 | '       return _seterror( 7 );
34da4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
34da8     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
34dac     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
34db0     01 FA 65 A6 |  if_e	neg	result1, #1
34db4     34 00 90 AD |  if_e	jmp	#LR__5131
34db8     14 15 02 F6 | 	mov	arg02, local02
34dbc     15 13 02 F6 | 	mov	arg01, local03
34dc0     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
34dc4     FD 2C 0A F6 | 	mov	local04, result1 wz
34dc8     14 00 90 AD |  if_e	jmp	#LR__5130
34dcc     15 13 02 F6 | 	mov	arg01, local03
34dd0                 | '     return _gc_free(ptr);
34dd0     24 5E BF FD | 	call	#__system___gc_free
34dd4                 | '         free(f);
34dd4                 | '         return _set_dos_error(r);
34dd4     16 13 02 F6 | 	mov	arg01, local04
34dd8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_1034
34ddc     0C 00 90 FD | 	jmp	#LR__5131
34de0                 | LR__5130
34de0     04 26 06 F1 | 	add	local01, #4
34de4     13 2B 62 FC | 	wrlong	local03, local01
34de8                 | '     }
34de8                 | '     dir->vfsdata = f;
34de8                 | '     return 0;
34de8     00 FA 05 F6 | 	mov	result1, #0
34dec                 | LR__5131
34dec     A7 F0 03 F6 | 	mov	ptra, fp
34df0     B2 00 A0 FD | 	call	#popregs_
34df4                 | _fatfs_cc_v_opendir_ret
34df4     2D 00 64 FD | 	ret
34df8                 | 
34df8                 | _fatfs_cc_v_closedir
34df8     02 4A 05 F6 | 	mov	COUNT_, #2
34dfc     A8 00 A0 FD | 	call	#pushregs_
34e00     04 12 06 F1 | 	add	arg01, #4
34e04     09 27 02 FB | 	rdlong	local01, arg01
34e08     13 13 02 F6 | 	mov	arg01, local01
34e0c     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
34e10     FD 28 02 F6 | 	mov	local02, result1
34e14     13 13 02 F6 | 	mov	arg01, local01
34e18                 | '     return _gc_free(ptr);
34e18     DC 5D BF FD | 	call	#__system___gc_free
34e1c     00 28 0E F2 | 	cmp	local02, #0 wz
34e20     14 13 02 56 |  if_ne	mov	arg01, local02
34e24     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_1034
34e28                 | '     return r;
34e28     14 FB 01 F6 | 	mov	result1, local02
34e2c     A7 F0 03 F6 | 	mov	ptra, fp
34e30     B2 00 A0 FD | 	call	#popregs_
34e34                 | _fatfs_cc_v_closedir_ret
34e34     2D 00 64 FD | 	ret
34e38                 | 
34e38                 | _fatfs_cc_v_readdir
34e38     01 4A 05 F6 | 	mov	COUNT_, #1
34e3c     A8 00 A0 FD | 	call	#pushregs_
34e40     2C F1 07 F1 | 	add	ptra, #300
34e44     04 4E 05 F1 | 	add	fp, #4
34e48     A7 12 62 FC | 	wrlong	arg01, fp
34e4c     04 4E 05 F1 | 	add	fp, #4
34e50     A7 14 62 FC | 	wrlong	arg02, fp
34e54     04 4E 85 F1 | 	sub	fp, #4
34e58     A7 16 02 FB | 	rdlong	arg03, fp
34e5c     04 16 06 F1 | 	add	arg03, #4
34e60     0B 13 02 FB | 	rdlong	arg01, arg03
34e64     08 4E 05 F1 | 	add	fp, #8
34e68     A7 14 02 F6 | 	mov	arg02, fp
34e6c     0C 4E 85 F1 | 	sub	fp, #12
34e70     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
34e74     28 4F 05 F1 | 	add	fp, #296
34e78     A7 FA 61 FC | 	wrlong	result1, fp
34e7c     28 4F 85 F1 | 	sub	fp, #296
34e80     00 FA 0D F2 | 	cmp	result1, #0 wz
34e84     14 00 90 AD |  if_e	jmp	#LR__5140
34e88                 | '         return _set_dos_error(r);
34e88     28 4F 05 F1 | 	add	fp, #296
34e8c     A7 12 02 FB | 	rdlong	arg01, fp
34e90     28 4F 85 F1 | 	sub	fp, #296
34e94     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_1034
34e98     C4 00 90 FD | 	jmp	#LR__5143
34e9c                 | LR__5140
34e9c     28 4E 05 F1 | 	add	fp, #40
34ea0     A7 16 CA FA | 	rdbyte	arg03, fp wz
34ea4     28 4E 85 F1 | 	sub	fp, #40
34ea8                 | '         return -1;
34ea8     01 FA 65 A6 |  if_e	neg	result1, #1
34eac     B0 00 90 AD |  if_e	jmp	#LR__5143
34eb0     08 4E 05 F1 | 	add	fp, #8
34eb4     A7 12 02 FB | 	rdlong	arg01, fp
34eb8     20 4E 05 F1 | 	add	fp, #32
34ebc     A7 14 02 F6 | 	mov	arg02, fp
34ec0     28 4E 85 F1 | 	sub	fp, #40
34ec4     3F 16 06 F6 | 	mov	arg03, #63
34ec8     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
34ecc     08 4E 05 F1 | 	add	fp, #8
34ed0     A7 16 02 FB | 	rdlong	arg03, fp
34ed4     3F 16 06 F1 | 	add	arg03, #63
34ed8     0B 01 48 FC | 	wrbyte	#0, arg03
34edc     0C 4E 05 F1 | 	add	fp, #12
34ee0     A7 16 C2 FA | 	rdbyte	arg03, fp
34ee4     14 4E 85 F1 | 	sub	fp, #20
34ee8     10 16 CE F7 | 	test	arg03, #16 wz
34eec     18 00 90 AD |  if_e	jmp	#LR__5141
34ef0     08 4E 05 F1 | 	add	fp, #8
34ef4     A7 16 02 FB | 	rdlong	arg03, fp
34ef8     08 4E 85 F1 | 	sub	fp, #8
34efc     50 16 06 F1 | 	add	arg03, #80
34f00     0B 03 48 FC | 	wrbyte	#1, arg03
34f04     14 00 90 FD | 	jmp	#LR__5142
34f08                 | LR__5141
34f08     08 4E 05 F1 | 	add	fp, #8
34f0c     A7 16 02 FB | 	rdlong	arg03, fp
34f10     08 4E 85 F1 | 	sub	fp, #8
34f14     50 16 06 F1 | 	add	arg03, #80
34f18     0B 01 48 FC | 	wrbyte	#0, arg03
34f1c                 | LR__5142
34f1c     08 4E 05 F1 | 	add	fp, #8
34f20     A7 16 02 FB | 	rdlong	arg03, fp
34f24     04 4E 05 F1 | 	add	fp, #4
34f28     A7 14 02 FB | 	rdlong	arg02, fp
34f2c     48 16 06 F1 | 	add	arg03, #72
34f30     0B 15 62 FC | 	wrlong	arg02, arg03
34f34     04 4E 85 F1 | 	sub	fp, #4
34f38     A7 26 02 FB | 	rdlong	local01, fp
34f3c     08 4E 05 F1 | 	add	fp, #8
34f40     A7 12 E2 FA | 	rdword	arg01, fp
34f44     02 4E 05 F1 | 	add	fp, #2
34f48     A7 14 E2 FA | 	rdword	arg02, fp
34f4c     12 4E 85 F1 | 	sub	fp, #18
34f50     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_1032
34f54     4C 26 06 F1 | 	add	local01, #76
34f58     13 FB 61 FC | 	wrlong	result1, local01
34f5c                 | '         ent->d_type =  (0) ;
34f5c                 | '     }
34f5c                 | '     ent->d_size = finfo.fsize;
34f5c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
34f5c                 | '     return 0;
34f5c     00 FA 05 F6 | 	mov	result1, #0
34f60                 | LR__5143
34f60     A7 F0 03 F6 | 	mov	ptra, fp
34f64     B2 00 A0 FD | 	call	#popregs_
34f68                 | _fatfs_cc_v_readdir_ret
34f68     2D 00 64 FD | 	ret
34f6c                 | 
34f6c                 | _fatfs_cc_v_stat
34f6c     03 4A 05 F6 | 	mov	COUNT_, #3
34f70     A8 00 A0 FD | 	call	#pushregs_
34f74     30 F1 07 F1 | 	add	ptra, #304
34f78     04 4E 05 F1 | 	add	fp, #4
34f7c     A7 12 62 FC | 	wrlong	arg01, fp
34f80     04 4E 05 F1 | 	add	fp, #4
34f84     A7 14 62 FC | 	wrlong	arg02, fp
34f88     08 4E 85 F1 | 	sub	fp, #8
34f8c     0A 13 02 F6 | 	mov	arg01, arg02
34f90     00 14 06 F6 | 	mov	arg02, #0
34f94     30 16 06 F6 | 	mov	arg03, #48
34f98     98 00 A0 FD | 	call	#\builtin_bytefill_
34f9c     04 4E 05 F1 | 	add	fp, #4
34fa0     A7 FA 01 FB | 	rdlong	result1, fp
34fa4     04 4E 85 F1 | 	sub	fp, #4
34fa8     FD FA C9 FA | 	rdbyte	result1, result1 wz
34fac     2C 00 90 AD |  if_e	jmp	#LR__5150
34fb0     04 4E 05 F1 | 	add	fp, #4
34fb4     A7 FA 01 FB | 	rdlong	result1, fp
34fb8     04 4E 85 F1 | 	sub	fp, #4
34fbc     FD FA C1 FA | 	rdbyte	result1, result1
34fc0     2E FA 0D F2 | 	cmp	result1, #46 wz
34fc4     04 4E 05 A1 |  if_e	add	fp, #4
34fc8     A7 26 02 AB |  if_e	rdlong	local01, fp
34fcc     04 4E 85 A1 |  if_e	sub	fp, #4
34fd0     01 26 06 A1 |  if_e	add	local01, #1
34fd4     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
34fd8     18 00 90 5D |  if_ne	jmp	#LR__5151
34fdc                 | LR__5150
34fdc     18 4E 05 F1 | 	add	fp, #24
34fe0     A7 20 48 FC | 	wrbyte	#16, fp
34fe4     0C 4E 85 F1 | 	sub	fp, #12
34fe8     A7 00 68 FC | 	wrlong	#0, fp
34fec     0C 4E 85 F1 | 	sub	fp, #12
34ff0     24 00 90 FD | 	jmp	#LR__5152
34ff4                 | LR__5151
34ff4     04 4E 05 F1 | 	add	fp, #4
34ff8     A7 12 02 FB | 	rdlong	arg01, fp
34ffc     0C 4E 05 F1 | 	add	fp, #12
35000     A7 14 02 F6 | 	mov	arg02, fp
35004     10 4E 85 F1 | 	sub	fp, #16
35008     AC EB BF FD | 	call	#_fatfs_cc_f_stat
3500c     0C 4E 05 F1 | 	add	fp, #12
35010     A7 FA 61 FC | 	wrlong	result1, fp
35014     0C 4E 85 F1 | 	sub	fp, #12
35018                 | LR__5152
35018     0C 4E 05 F1 | 	add	fp, #12
3501c     A7 28 0A FB | 	rdlong	local02, fp wz
35020     0C 4E 85 F1 | 	sub	fp, #12
35024     14 00 90 AD |  if_e	jmp	#LR__5153
35028                 | '         return _set_dos_error(r);
35028     0C 4E 05 F1 | 	add	fp, #12
3502c     A7 12 02 FB | 	rdlong	arg01, fp
35030     0C 4E 85 F1 | 	sub	fp, #12
35034     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35038     14 01 90 FD | 	jmp	#LR__5154
3503c                 | LR__5153
3503c     2C 4F 05 F1 | 	add	fp, #300
35040     A7 48 6A FC | 	wrlong	#292, fp
35044     14 4F 85 F1 | 	sub	fp, #276
35048     A7 2A C2 FA | 	rdbyte	local03, fp
3504c     18 4E 85 F1 | 	sub	fp, #24
35050     01 2A CE F7 | 	test	local03, #1 wz
35054     2C 4F 05 A1 |  if_e	add	fp, #300
35058     A7 2A 02 AB |  if_e	rdlong	local03, fp
3505c     92 2A 46 A5 |  if_e	or	local03, #146
35060     A7 2A 62 AC |  if_e	wrlong	local03, fp
35064     2C 4F 85 A1 |  if_e	sub	fp, #300
35068     18 4E 05 F1 | 	add	fp, #24
3506c     A7 2A C2 FA | 	rdbyte	local03, fp
35070     18 4E 85 F1 | 	sub	fp, #24
35074     10 2A CE F7 | 	test	local03, #16 wz
35078     2C 4F 05 51 |  if_ne	add	fp, #300
3507c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
35080     08 00 00 5F 
35084     49 2A 46 55 |  if_ne	or	local03, ##4169
35088     A7 2A 62 5C |  if_ne	wrlong	local03, fp
3508c     2C 4F 85 51 |  if_ne	sub	fp, #300
35090     08 4E 05 F1 | 	add	fp, #8
35094     A7 2A 02 FB | 	rdlong	local03, fp
35098     24 4F 05 F1 | 	add	fp, #292
3509c     A7 28 02 FB | 	rdlong	local02, fp
350a0     08 2A 06 F1 | 	add	local03, #8
350a4     15 29 62 FC | 	wrlong	local02, local03
350a8     24 4F 85 F1 | 	sub	fp, #292
350ac     A7 2A 02 FB | 	rdlong	local03, fp
350b0     0C 2A 06 F1 | 	add	local03, #12
350b4     15 03 68 FC | 	wrlong	#1, local03
350b8     A7 2A 02 FB | 	rdlong	local03, fp
350bc     08 4E 05 F1 | 	add	fp, #8
350c0     A7 28 02 FB | 	rdlong	local02, fp
350c4     18 2A 06 F1 | 	add	local03, #24
350c8     15 29 62 FC | 	wrlong	local02, local03
350cc     08 4E 85 F1 | 	sub	fp, #8
350d0     A7 2A 02 FB | 	rdlong	local03, fp
350d4     1C 2A 06 F1 | 	add	local03, #28
350d8     01 00 80 FF 
350dc     15 01 68 FC | 	wrlong	##512, local03
350e0     A7 28 02 FB | 	rdlong	local02, fp
350e4     14 2B 02 F6 | 	mov	local03, local02
350e8     18 28 06 F1 | 	add	local02, #24
350ec     14 29 02 FB | 	rdlong	local02, local02
350f0     FF 29 06 F1 | 	add	local02, #511
350f4     14 29 52 F6 | 	abs	local02, local02 wc
350f8     09 28 46 F0 | 	shr	local02, #9
350fc     14 29 82 F6 | 	negc	local02, local02
35100     20 2A 06 F1 | 	add	local03, #32
35104     15 29 62 FC | 	wrlong	local02, local03
35108     A7 28 02 FB | 	rdlong	local02, fp
3510c     14 2B 02 F6 | 	mov	local03, local02
35110     14 27 02 F6 | 	mov	local01, local02
35114     0C 4E 05 F1 | 	add	fp, #12
35118     A7 12 E2 FA | 	rdword	arg01, fp
3511c     02 4E 05 F1 | 	add	fp, #2
35120     A7 14 E2 FA | 	rdword	arg02, fp
35124     16 4E 85 F1 | 	sub	fp, #22
35128     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_1032
3512c     2C 26 06 F1 | 	add	local01, #44
35130     13 FB 61 FC | 	wrlong	result1, local01
35134     28 28 06 F1 | 	add	local02, #40
35138     14 FB 61 FC | 	wrlong	result1, local02
3513c     24 2A 06 F1 | 	add	local03, #36
35140     15 FB 61 FC | 	wrlong	result1, local03
35144                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
35144                 | '     }
35144                 | '     buf->st_mode = mode;
35144                 | '     buf->st_nlink = 1;
35144                 | '     buf->st_size = finfo.fsize;
35144                 | '     buf->st_blksize = 512;
35144                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
35144                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
35144                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35144                 | '     return r;
35144     0C 4E 05 F1 | 	add	fp, #12
35148     A7 FA 01 FB | 	rdlong	result1, fp
3514c     0C 4E 85 F1 | 	sub	fp, #12
35150                 | LR__5154
35150     A7 F0 03 F6 | 	mov	ptra, fp
35154     B2 00 A0 FD | 	call	#popregs_
35158                 | _fatfs_cc_v_stat_ret
35158     2D 00 64 FD | 	ret
3515c                 | 
3515c                 | _fatfs_cc_v_read
3515c     00 4A 05 F6 | 	mov	COUNT_, #0
35160     A8 00 A0 FD | 	call	#pushregs_
35164     1C F0 07 F1 | 	add	ptra, #28
35168     04 4E 05 F1 | 	add	fp, #4
3516c     A7 12 62 FC | 	wrlong	arg01, fp
35170     04 4E 05 F1 | 	add	fp, #4
35174     A7 14 62 FC | 	wrlong	arg02, fp
35178     04 4E 05 F1 | 	add	fp, #4
3517c     A7 16 62 FC | 	wrlong	arg03, fp
35180     08 4E 85 F1 | 	sub	fp, #8
35184     A7 12 02 FB | 	rdlong	arg01, fp
35188     09 13 0A FB | 	rdlong	arg01, arg01 wz
3518c     0C 4E 05 F1 | 	add	fp, #12
35190     A7 12 62 FC | 	wrlong	arg01, fp
35194     10 4E 85 F1 | 	sub	fp, #16
35198                 | '         return _seterror( 5 );
35198     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3519c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
351a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
351a4     01 FA 65 A6 |  if_e	neg	result1, #1
351a8     B8 00 90 AD |  if_e	jmp	#LR__5162
351ac     10 4E 05 F1 | 	add	fp, #16
351b0     A7 12 02 FB | 	rdlong	arg01, fp
351b4     02 00 00 FF 
351b8     14 12 06 F1 | 	add	arg01, ##1044
351bc     08 4E 85 F1 | 	sub	fp, #8
351c0     A7 14 02 FB | 	rdlong	arg02, fp
351c4     04 4E 05 F1 | 	add	fp, #4
351c8     A7 16 02 FB | 	rdlong	arg03, fp
351cc     0C 4E 05 F1 | 	add	fp, #12
351d0     A7 18 02 F6 | 	mov	arg04, fp
351d4     18 4E 85 F1 | 	sub	fp, #24
351d8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
351dc     14 4E 05 F1 | 	add	fp, #20
351e0     A7 FA 61 FC | 	wrlong	result1, fp
351e4     14 4E 85 F1 | 	sub	fp, #20
351e8     00 FA 0D F2 | 	cmp	result1, #0 wz
351ec     34 00 90 AD |  if_e	jmp	#LR__5160
351f0     04 4E 05 F1 | 	add	fp, #4
351f4     A7 18 02 FB | 	rdlong	arg04, fp
351f8     0C 17 02 F6 | 	mov	arg03, arg04
351fc     08 18 06 F1 | 	add	arg04, #8
35200     0C 19 02 FB | 	rdlong	arg04, arg04
35204     20 18 46 F5 | 	or	arg04, #32
35208     08 16 06 F1 | 	add	arg03, #8
3520c     0B 19 62 FC | 	wrlong	arg04, arg03
35210                 | '         fil->state |=  (0x20) ;
35210                 | '         return _set_dos_error(r);
35210     10 4E 05 F1 | 	add	fp, #16
35214     A7 12 02 FB | 	rdlong	arg01, fp
35218     14 4E 85 F1 | 	sub	fp, #20
3521c     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35220     40 00 90 FD | 	jmp	#LR__5162
35224                 | LR__5160
35224     18 4E 05 F1 | 	add	fp, #24
35228     A7 FA 09 FB | 	rdlong	result1, fp wz
3522c     18 4E 85 F1 | 	sub	fp, #24
35230     24 00 90 5D |  if_ne	jmp	#LR__5161
35234     04 4E 05 F1 | 	add	fp, #4
35238     A7 FA 01 FB | 	rdlong	result1, fp
3523c     FD 18 02 F6 | 	mov	arg04, result1
35240     04 4E 85 F1 | 	sub	fp, #4
35244     08 FA 05 F1 | 	add	result1, #8
35248     FD FA 01 FB | 	rdlong	result1, result1
3524c     10 FA 45 F5 | 	or	result1, #16
35250     08 18 06 F1 | 	add	arg04, #8
35254     0C FB 61 FC | 	wrlong	result1, arg04
35258                 | LR__5161
35258                 | '         fil->state |=  (0x10) ;
35258                 | '     }
35258                 | '     return x;
35258     18 4E 05 F1 | 	add	fp, #24
3525c     A7 FA 01 FB | 	rdlong	result1, fp
35260     18 4E 85 F1 | 	sub	fp, #24
35264                 | LR__5162
35264     A7 F0 03 F6 | 	mov	ptra, fp
35268     B2 00 A0 FD | 	call	#popregs_
3526c                 | _fatfs_cc_v_read_ret
3526c     2D 00 64 FD | 	ret
35270                 | 
35270                 | _fatfs_cc_v_write
35270     00 4A 05 F6 | 	mov	COUNT_, #0
35274     A8 00 A0 FD | 	call	#pushregs_
35278     1C F0 07 F1 | 	add	ptra, #28
3527c     04 4E 05 F1 | 	add	fp, #4
35280     A7 12 62 FC | 	wrlong	arg01, fp
35284     04 4E 05 F1 | 	add	fp, #4
35288     A7 14 62 FC | 	wrlong	arg02, fp
3528c     04 4E 05 F1 | 	add	fp, #4
35290     A7 16 62 FC | 	wrlong	arg03, fp
35294     08 4E 85 F1 | 	sub	fp, #8
35298     A7 12 02 FB | 	rdlong	arg01, fp
3529c     09 13 0A FB | 	rdlong	arg01, arg01 wz
352a0     0C 4E 05 F1 | 	add	fp, #12
352a4     A7 12 62 FC | 	wrlong	arg01, fp
352a8     10 4E 85 F1 | 	sub	fp, #16
352ac                 | '         return _seterror( 5 );
352ac     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
352b0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
352b4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
352b8     01 FA 65 A6 |  if_e	neg	result1, #1
352bc     84 00 90 AD |  if_e	jmp	#LR__5171
352c0     10 4E 05 F1 | 	add	fp, #16
352c4     A7 12 02 FB | 	rdlong	arg01, fp
352c8     02 00 00 FF 
352cc     14 12 06 F1 | 	add	arg01, ##1044
352d0     08 4E 85 F1 | 	sub	fp, #8
352d4     A7 14 02 FB | 	rdlong	arg02, fp
352d8     04 4E 05 F1 | 	add	fp, #4
352dc     A7 16 02 FB | 	rdlong	arg03, fp
352e0     0C 4E 05 F1 | 	add	fp, #12
352e4     A7 18 02 F6 | 	mov	arg04, fp
352e8     18 4E 85 F1 | 	sub	fp, #24
352ec     4C D4 BF FD | 	call	#_fatfs_cc_f_write
352f0     14 4E 05 F1 | 	add	fp, #20
352f4     A7 FA 61 FC | 	wrlong	result1, fp
352f8     14 4E 85 F1 | 	sub	fp, #20
352fc     00 FA 0D F2 | 	cmp	result1, #0 wz
35300     34 00 90 AD |  if_e	jmp	#LR__5170
35304     04 4E 05 F1 | 	add	fp, #4
35308     A7 18 02 FB | 	rdlong	arg04, fp
3530c     0C 17 02 F6 | 	mov	arg03, arg04
35310     08 18 06 F1 | 	add	arg04, #8
35314     0C 19 02 FB | 	rdlong	arg04, arg04
35318     20 18 46 F5 | 	or	arg04, #32
3531c     08 16 06 F1 | 	add	arg03, #8
35320     0B 19 62 FC | 	wrlong	arg04, arg03
35324                 | '         fil->state |=  (0x20) ;
35324                 | '         return _set_dos_error(r);
35324     10 4E 05 F1 | 	add	fp, #16
35328     A7 12 02 FB | 	rdlong	arg01, fp
3532c     14 4E 85 F1 | 	sub	fp, #20
35330     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35334     0C 00 90 FD | 	jmp	#LR__5171
35338                 | LR__5170
35338                 | '     }
35338                 | '     return x;
35338     18 4E 05 F1 | 	add	fp, #24
3533c     A7 FA 01 FB | 	rdlong	result1, fp
35340     18 4E 85 F1 | 	sub	fp, #24
35344                 | LR__5171
35344     A7 F0 03 F6 | 	mov	ptra, fp
35348     B2 00 A0 FD | 	call	#popregs_
3534c                 | _fatfs_cc_v_write_ret
3534c     2D 00 64 FD | 	ret
35350                 | 
35350                 | _fatfs_cc_v_lseek
35350     04 4A 05 F6 | 	mov	COUNT_, #4
35354     A8 00 A0 FD | 	call	#pushregs_
35358     0A 27 02 F6 | 	mov	local01, arg02
3535c     0B 29 02 F6 | 	mov	local02, arg03
35360     09 2B 02 FB | 	rdlong	local03, arg01
35364     02 00 00 FF 
35368     14 2A 0E F1 | 	add	local03, ##1044 wz
3536c                 | '         return _seterror( 5 );
3536c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35370     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35374     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35378     01 FA 65 A6 |  if_e	neg	result1, #1
3537c     4C 00 90 AD |  if_e	jmp	#LR__5182
35380     00 28 0E F2 | 	cmp	local02, #0 wz
35384     24 00 90 AD |  if_e	jmp	#LR__5180
35388     01 28 0E F2 | 	cmp	local02, #1 wz
3538c     14 2A 06 A1 |  if_e	add	local03, #20
35390     15 2D 02 AB |  if_e	rdlong	local04, local03
35394     14 2A 86 A1 |  if_e	sub	local03, #20
35398     16 27 02 A1 |  if_e	add	local01, local04
3539c     0C 2A 06 51 |  if_ne	add	local03, #12
353a0     15 2D 02 5B |  if_ne	rdlong	local04, local03
353a4     0C 2A 86 51 |  if_ne	sub	local03, #12
353a8     16 27 02 51 |  if_ne	add	local01, local04
353ac                 | LR__5180
353ac     13 15 02 F6 | 	mov	arg02, local01
353b0     15 13 02 F6 | 	mov	arg01, local03
353b4     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
353b8     FD 12 0A F6 | 	mov	arg01, result1 wz
353bc     08 00 90 AD |  if_e	jmp	#LR__5181
353c0                 | '         return _set_dos_error(result);
353c0     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
353c4     04 00 90 FD | 	jmp	#LR__5182
353c8                 | LR__5181
353c8                 | '     }
353c8                 | '     return offset;
353c8     13 FB 01 F6 | 	mov	result1, local01
353cc                 | LR__5182
353cc     A7 F0 03 F6 | 	mov	ptra, fp
353d0     B2 00 A0 FD | 	call	#popregs_
353d4                 | _fatfs_cc_v_lseek_ret
353d4     2D 00 64 FD | 	ret
353d8                 | 
353d8                 | _fatfs_cc_v_ioctl
353d8                 | ' {
353d8                 | '     return _seterror( 10 );
353d8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
353dc     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
353e0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
353e4     01 FA 65 F6 | 	neg	result1, #1
353e8                 | _fatfs_cc_v_ioctl_ret
353e8     2D 00 64 FD | 	ret
353ec                 | 
353ec                 | _fatfs_cc_v_mkdir
353ec     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
353f0     FD 12 02 F6 | 	mov	arg01, result1
353f4                 | ' 
353f4                 | '     r = f_mkdir(name);
353f4                 | '     return _set_dos_error(r);
353f4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
353f8                 | _fatfs_cc_v_mkdir_ret
353f8     2D 00 64 FD | 	ret
353fc                 | 
353fc                 | _fatfs_cc_v_remove
353fc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35400     FD 12 02 F6 | 	mov	arg01, result1
35404                 | ' 
35404                 | '     r = f_unlink(name);
35404                 | '     return _set_dos_error(r);
35404     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35408                 | _fatfs_cc_v_remove_ret
35408     2D 00 64 FD | 	ret
3540c                 | 
3540c                 | _fatfs_cc_v_rmdir
3540c     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
35410     FD 12 02 F6 | 	mov	arg01, result1
35414                 | ' 
35414                 | '     r = f_unlink(name);
35414                 | '     return _set_dos_error(r);
35414     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35418                 | _fatfs_cc_v_rmdir_ret
35418     2D 00 64 FD | 	ret
3541c                 | 
3541c                 | _fatfs_cc_v_rename
3541c     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
35420     FD 12 02 F6 | 	mov	arg01, result1
35424                 | '     return _set_dos_error(r);
35424     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35428                 | _fatfs_cc_v_rename_ret
35428     2D 00 64 FD | 	ret
3542c                 | 
3542c                 | _fatfs_cc_v_open
3542c     07 4A 05 F6 | 	mov	COUNT_, #7
35430     A8 00 A0 FD | 	call	#pushregs_
35434     09 27 02 F6 | 	mov	local01, arg01
35438     0A 29 02 F6 | 	mov	local02, arg02
3543c     0B 2B 02 F6 | 	mov	local03, arg03
35440     03 00 00 FF 
35444     3C 12 06 F6 | 	mov	arg01, ##1596
35448                 | '     return _gc_alloc(size);
35448     10 14 06 F6 | 	mov	arg02, #16
3544c     9C 56 BF FD | 	call	#__system___gc_doalloc
35450     FD 2C 0A F6 | 	mov	local04, result1 wz
35454                 | '       return _seterror( 7 );
35454     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
35458     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3545c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35460     01 FA 65 A6 |  if_e	neg	result1, #1
35464     98 00 90 AD |  if_e	jmp	#LR__5196
35468     16 13 02 F6 | 	mov	arg01, local04
3546c     00 14 06 F6 | 	mov	arg02, #0
35470     03 00 00 FF 
35474     3C 16 06 F6 | 	mov	arg03, ##1596
35478     98 00 A0 FD | 	call	#\builtin_bytefill_
3547c                 | '   switch (flags & 3) {
3547c     15 2F 02 F6 | 	mov	local05, local03
35480     03 2E 0E F5 | 	and	local05, #3 wz
35484     0C 00 90 AD |  if_e	jmp	#LR__5190
35488     01 2E 0E F2 | 	cmp	local05, #1 wz
3548c     0C 00 90 AD |  if_e	jmp	#LR__5191
35490     10 00 90 FD | 	jmp	#LR__5192
35494                 | LR__5190
35494     01 30 06 F6 | 	mov	local06, #1
35498                 | '       fs_flags =  0x01 ;
35498                 | '       break;
35498     0C 00 90 FD | 	jmp	#LR__5193
3549c                 | LR__5191
3549c     02 30 06 F6 | 	mov	local06, #2
354a0                 | '       fs_flags =  0x02 ;
354a0                 | '       break;
354a0     04 00 90 FD | 	jmp	#LR__5193
354a4                 | LR__5192
354a4     03 30 06 F6 | 	mov	local06, #3
354a8                 | '       fs_flags =  0x01  |  0x02 ;
354a8                 | '       break;
354a8                 | LR__5193
354a8     08 2A CE F7 | 	test	local03, #8 wz
354ac     18 30 46 55 |  if_ne	or	local06, #24
354b0     08 00 90 5D |  if_ne	jmp	#LR__5194
354b4     20 2A CE F7 | 	test	local03, #32 wz
354b8     30 30 46 55 |  if_ne	or	local06, #48
354bc                 | LR__5194
354bc     02 00 00 FF 
354c0     14 2C 06 F1 | 	add	local04, ##1044
354c4     16 13 02 F6 | 	mov	arg01, local04
354c8     02 00 00 FF 
354cc     14 2C 86 F1 | 	sub	local04, ##1044
354d0     14 15 02 F6 | 	mov	arg02, local02
354d4     18 17 02 F6 | 	mov	arg03, local06
354d8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
354dc     FD 32 0A F6 | 	mov	local07, result1 wz
354e0     14 00 90 AD |  if_e	jmp	#LR__5195
354e4     16 13 02 F6 | 	mov	arg01, local04
354e8                 | '     return _gc_free(ptr);
354e8     0C 57 BF FD | 	call	#__system___gc_free
354ec                 | '     free(f);
354ec                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
354ec                 | '     return _set_dos_error(r);
354ec     19 13 02 F6 | 	mov	arg01, local07
354f0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
354f4     08 00 90 FD | 	jmp	#LR__5196
354f8                 | LR__5195
354f8     13 2D 62 FC | 	wrlong	local04, local01
354fc                 | '   }
354fc                 | '   fil->vfsdata = f;
354fc                 | '   return 0;
354fc     00 FA 05 F6 | 	mov	result1, #0
35500                 | LR__5196
35500     A7 F0 03 F6 | 	mov	ptra, fp
35504     B2 00 A0 FD | 	call	#popregs_
35508                 | _fatfs_cc_v_open_ret
35508     2D 00 64 FD | 	ret
3550c                 | 
3550c                 | _fatfs_cc_v_flush
3550c     09 13 02 FB | 	rdlong	arg01, arg01
35510     02 00 00 FF 
35514     14 12 0E F1 | 	add	arg01, ##1044 wz
35518                 | '         return _seterror( 5 );
35518     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3551c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
35520     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
35524     01 FA 65 A6 |  if_e	neg	result1, #1
35528     0C 00 90 AD |  if_e	jmp	#LR__5200
3552c     00 DA BF FD | 	call	#_fatfs_cc_f_sync
35530     FD 12 02 F6 | 	mov	arg01, result1
35534                 | '     }
35534                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35534                 | '     result = f_sync(f);
35534                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35534                 | '     return _set_dos_error(result);
35534     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_1034
35538                 | LR__5200
35538                 | _fatfs_cc_v_flush_ret
35538     2D 00 64 FD | 	ret
3553c                 | 
3553c                 | _fatfs_cc_v_init
3553c                 | ' {
3553c                 | '     return 0;
3553c     00 FA 05 F6 | 	mov	result1, #0
35540                 | _fatfs_cc_v_init_ret
35540     2D 00 64 FD | 	ret
35544                 | 
35544                 | _fatfs_cc_v_deinit
35544     B2 01 00 FF 
35548     B8 14 06 F6 | 	mov	arg02, ##@LR__5396
3554c     00 12 06 F6 | 	mov	arg01, #0
35550     00 16 06 F6 | 	mov	arg03, #0
35554     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
35558     01 00 00 FF 
3555c     08 E4 05 F1 | 	add	objptr, ##520
35560     F2 12 02 FB | 	rdlong	arg01, objptr
35564     04 E4 05 F1 | 	add	objptr, #4
35568     F2 14 02 FB | 	rdlong	arg02, objptr
3556c     01 00 00 FF 
35570     0C E4 85 F1 | 	sub	objptr, ##524
35574     F0 3D BF FD | 	call	#__system___freepins
35578                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
35578                 | '     _freepins(f_pinmask);
35578                 | '     return 0;
35578     00 FA 05 F6 | 	mov	result1, #0
3557c                 | _fatfs_cc_v_deinit_ret
3557c     2D 00 64 FD | 	ret
35580                 | 
35580                 | _fatfs_cc_get_vfs
35580     01 4A 05 F6 | 	mov	COUNT_, #1
35584     A8 00 A0 FD | 	call	#pushregs_
35588     09 27 02 F6 | 	mov	local01, arg01
3558c     50 12 06 F6 | 	mov	arg01, #80
35590     28 55 BF FD | 	call	#__system___gc_alloc_managed
35594     FD 12 02 F6 | 	mov	arg01, result1
35598     F2 FA 01 F6 | 	mov	result1, objptr
3559c     00 78 05 FF 
355a0     00 FA 45 F5 | 	or	result1, ##183500800
355a4     09 FB 61 FC | 	wrlong	result1, arg01
355a8     F2 FA 01 F6 | 	mov	result1, objptr
355ac     00 80 05 FF 
355b0     00 FA 45 F5 | 	or	result1, ##184549376
355b4     04 12 06 F1 | 	add	arg01, #4
355b8     09 FB 61 FC | 	wrlong	result1, arg01
355bc     F2 FA 01 F6 | 	mov	result1, objptr
355c0     00 88 05 FF 
355c4     00 FA 45 F5 | 	or	result1, ##185597952
355c8     04 12 06 F1 | 	add	arg01, #4
355cc     09 FB 61 FC | 	wrlong	result1, arg01
355d0     F2 FA 01 F6 | 	mov	result1, objptr
355d4     00 90 05 FF 
355d8     00 FA 45 F5 | 	or	result1, ##186646528
355dc     04 12 06 F1 | 	add	arg01, #4
355e0     09 FB 61 FC | 	wrlong	result1, arg01
355e4     F2 FA 01 F6 | 	mov	result1, objptr
355e8     00 98 05 FF 
355ec     00 FA 45 F5 | 	or	result1, ##187695104
355f0     04 12 06 F1 | 	add	arg01, #4
355f4     09 FB 61 FC | 	wrlong	result1, arg01
355f8     04 12 06 F1 | 	add	arg01, #4
355fc     09 01 68 FC | 	wrlong	#0, arg01
35600     04 12 06 F1 | 	add	arg01, #4
35604     09 27 62 FC | 	wrlong	local01, arg01
35608     04 12 06 F1 | 	add	arg01, #4
3560c     09 01 68 FC | 	wrlong	#0, arg01
35610     F2 FA 01 F6 | 	mov	result1, objptr
35614     00 A0 05 FF 
35618     00 FA 45 F5 | 	or	result1, ##188743680
3561c     04 12 06 F1 | 	add	arg01, #4
35620     09 FB 61 FC | 	wrlong	result1, arg01
35624     F2 FA 01 F6 | 	mov	result1, objptr
35628     00 A8 05 FF 
3562c     00 FA 45 F5 | 	or	result1, ##189792256
35630     04 12 06 F1 | 	add	arg01, #4
35634     09 FB 61 FC | 	wrlong	result1, arg01
35638     F2 FA 01 F6 | 	mov	result1, objptr
3563c     00 B0 05 FF 
35640     00 FA 45 F5 | 	or	result1, ##190840832
35644     04 12 06 F1 | 	add	arg01, #4
35648     09 FB 61 FC | 	wrlong	result1, arg01
3564c     F2 FA 01 F6 | 	mov	result1, objptr
35650     00 B8 05 FF 
35654     00 FA 45 F5 | 	or	result1, ##191889408
35658     04 12 06 F1 | 	add	arg01, #4
3565c     09 FB 61 FC | 	wrlong	result1, arg01
35660     F2 FA 01 F6 | 	mov	result1, objptr
35664     00 C0 05 FF 
35668     00 FA 45 F5 | 	or	result1, ##192937984
3566c     04 12 06 F1 | 	add	arg01, #4
35670     09 FB 61 FC | 	wrlong	result1, arg01
35674     F2 FA 01 F6 | 	mov	result1, objptr
35678     00 C8 05 FF 
3567c     00 FA 45 F5 | 	or	result1, ##193986560
35680     04 12 06 F1 | 	add	arg01, #4
35684     09 FB 61 FC | 	wrlong	result1, arg01
35688     F2 FA 01 F6 | 	mov	result1, objptr
3568c     00 D0 05 FF 
35690     00 FA 45 F5 | 	or	result1, ##195035136
35694     04 12 06 F1 | 	add	arg01, #4
35698     09 FB 61 FC | 	wrlong	result1, arg01
3569c     F2 FA 01 F6 | 	mov	result1, objptr
356a0     00 D8 05 FF 
356a4     00 FA 45 F5 | 	or	result1, ##196083712
356a8     04 12 06 F1 | 	add	arg01, #4
356ac     09 FB 61 FC | 	wrlong	result1, arg01
356b0     F2 FA 01 F6 | 	mov	result1, objptr
356b4     00 E0 05 FF 
356b8     00 FA 45 F5 | 	or	result1, ##197132288
356bc     04 12 06 F1 | 	add	arg01, #4
356c0     09 FB 61 FC | 	wrlong	result1, arg01
356c4     F2 FA 01 F6 | 	mov	result1, objptr
356c8     00 E8 05 FF 
356cc     00 FA 45 F5 | 	or	result1, ##198180864
356d0     04 12 06 F1 | 	add	arg01, #4
356d4     09 FB 61 FC | 	wrlong	result1, arg01
356d8     F2 FA 01 F6 | 	mov	result1, objptr
356dc     00 F0 05 FF 
356e0     00 FA 45 F5 | 	or	result1, ##199229440
356e4     04 12 06 F1 | 	add	arg01, #4
356e8     09 FB 61 FC | 	wrlong	result1, arg01
356ec     F2 FA 01 F6 | 	mov	result1, objptr
356f0     00 F8 05 FF 
356f4     00 FA 45 F5 | 	or	result1, ##200278016
356f8     04 12 06 F1 | 	add	arg01, #4
356fc     09 FB 61 FC | 	wrlong	result1, arg01
35700     4C 12 86 F1 | 	sub	arg01, #76
35704                 | ' 
35704                 | '     v->close = &v_close;
35704                 | '     v->read = &v_read;
35704                 | '     v->write = &v_write;
35704                 | '     v->lseek = &v_lseek;
35704                 | '     v->ioctl = &v_ioctl;
35704                 | '     v->flush = 0;
35704                 | '     v->vfs_data = ptr;
35704                 | '     v->reserved = 0;
35704                 | ' 
35704                 | '     v->open = &v_open;
35704                 | '     v->creat = &v_creat;
35704                 | '     v->opendir = &v_opendir;
35704                 | '     v->closedir = &v_closedir;
35704                 | '     v->readdir = &v_readdir;
35704                 | '     v->stat = &v_stat;
35704                 | ' 
35704                 | '     v->mkdir = &v_mkdir;
35704                 | '     v->rmdir = &v_rmdir;
35704                 | ' 
35704                 | '     v->remove = &v_remove;
35704                 | '     v->rename = &v_rename;
35704                 | ' 
35704                 | '     v->init = &v_init;
35704                 | '     v->deinit = &v_deinit;
35704                 | ' 
35704                 | '     return v;
35704     09 FB 01 F6 | 	mov	result1, arg01
35708     A7 F0 03 F6 | 	mov	ptra, fp
3570c     B2 00 A0 FD | 	call	#popregs_
35710                 | _fatfs_cc_get_vfs_ret
35710     2D 00 64 FD | 	ret
35714                 | 
35714                 | _fatfs_cc_xmit_mmc_1185
35714     01 00 00 FF 
35718     10 E4 05 F1 | 	add	objptr, ##528
3571c     F2 00 02 FB | 	rdlong	_var01, objptr
35720     08 E4 05 F1 | 	add	objptr, #8
35724     F2 02 02 FB | 	rdlong	_var02, objptr
35728     01 00 00 FF 
3572c     18 E4 85 F1 | 	sub	objptr, ##536
35730     40 02 62 FD | 	dirl	_var02
35734     28 02 64 FD | 	setq	#1
35738     09 05 02 FB | 	rdlong	_var03, arg01
3573c     69 04 62 FD | 	rev	_var03
35740     1B 04 FE F9 | 	movbyts	_var03, #27
35744     01 05 22 FC | 	wypin	_var03, _var02
35748     0A 05 02 F6 | 	mov	_var03, arg02
3574c     02 14 4E F0 | 	shr	arg02, #2 wz
35750     03 04 66 F0 | 	shl	_var03, #3
35754     00 05 22 FC | 	wypin	_var03, _var01
35758     41 02 62 FD | 	dirh	_var02
3575c     08 12 06 F1 | 	add	arg01, #8
35760     69 06 62 FD | 	rev	_var04
35764     1B 06 FE F9 | 	movbyts	_var04, #27
35768                 | LR__5210
35768     01 07 22 5C |  if_ne	wypin	_var04, _var02
3576c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
35770     04 12 06 51 |  if_ne	add	arg01, #4
35774     69 06 62 5D |  if_ne	rev	_var04
35778     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
3577c                 | LR__5211
3577c     40 02 72 5D |  if_ne	testp	_var02 wc
35780     F8 FF 9F 1D |  if_a	jmp	#LR__5211
35784     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__5210
35788                 | LR__5212
35788     40 00 72 FD | 	testp	_var01 wc
3578c     F8 FF 9F 3D |  if_ae	jmp	#LR__5212
35790     40 02 62 FD | 	dirl	_var02
35794     FF FF FF FF 
35798     01 FF 2B FC | 	wypin	##-1, _var02
3579c     41 02 62 FD | 	dirh	_var02
357a0                 | _fatfs_cc_xmit_mmc_1185_ret
357a0     2D 00 64 FD | 	ret
357a4                 | 
357a4                 | _fatfs_cc_rcvr_mmc_1192
357a4     01 00 00 FF 
357a8     10 E4 05 F1 | 	add	objptr, ##528
357ac     F2 00 02 FB | 	rdlong	_var01, objptr
357b0     0C E4 05 F1 | 	add	objptr, #12
357b4     F2 02 02 FB | 	rdlong	_var02, objptr
357b8     01 00 00 FF 
357bc     1C E4 85 F1 | 	sub	objptr, ##540
357c0     01 03 08 FC | 	akpin	_var02
357c4     0A 05 0A F6 | 	mov	_var03, arg02 wz
357c8     02 04 4E F0 | 	shr	_var03, #2 wz
357cc     30 00 90 AD |  if_e	jmp	#LR__5222
357d0     02 07 02 F6 | 	mov	_var04, _var03
357d4     05 06 66 F0 | 	shl	_var04, #5
357d8     00 07 22 FC | 	wypin	_var04, _var01
357dc     01 7F 18 FC | 	wxpin	#63, _var02
357e0                 | LR__5220
357e0                 | LR__5221
357e0     40 02 72 FD | 	testp	_var02 wc
357e4     F8 FF 9F 3D |  if_ae	jmp	#LR__5221
357e8     01 07 8A FA | 	rdpin	_var04, _var02
357ec     69 06 62 FD | 	rev	_var04
357f0     1B 06 FE F9 | 	movbyts	_var04, #27
357f4     09 07 62 FC | 	wrlong	_var04, arg01
357f8     04 12 06 F1 | 	add	arg01, #4
357fc     F8 05 6E FB | 	djnz	_var03, #LR__5220
35800                 | LR__5222
35800     03 14 0E F5 | 	and	arg02, #3 wz
35804     24 00 90 AD |  if_e	jmp	#LR__5225
35808     01 4F 18 FC | 	wxpin	#39, _var02
3580c                 | LR__5223
3580c     00 11 28 FC | 	wypin	#8, _var01
35810                 | LR__5224
35810     40 02 72 FD | 	testp	_var02 wc
35814     F8 FF 9F 3D |  if_ae	jmp	#LR__5224
35818     01 07 8A FA | 	rdpin	_var04, _var02
3581c     69 06 62 FD | 	rev	_var04
35820     09 07 42 FC | 	wrbyte	_var04, arg01
35824     01 12 06 F1 | 	add	arg01, #1
35828     F8 15 6E FB | 	djnz	arg02, #LR__5223
3582c                 | LR__5225
3582c                 | _fatfs_cc_rcvr_mmc_1192_ret
3582c     2D 00 64 FD | 	ret
35830                 | 
35830                 | _fatfs_cc_wait_ready_1196
35830     01 4A 05 F6 | 	mov	COUNT_, #1
35834     A8 00 A0 FD | 	call	#pushregs_
35838     10 F0 07 F1 | 	add	ptra, #16
3583c     1A FA 61 FD | 	getct	result1
35840     08 4E 05 F1 | 	add	fp, #8
35844     A7 FA 61 FC | 	wrlong	result1, fp
35848     14 26 06 FB | 	rdlong	local01, #20
3584c     01 26 46 F0 | 	shr	local01, #1
35850     04 4E 05 F1 | 	add	fp, #4
35854     A7 26 62 FC | 	wrlong	local01, fp
35858     0C 4E 85 F1 | 	sub	fp, #12
3585c                 | ' {
3585c                 | ' 	BYTE d;
3585c                 | ' 	UINT tmr, tmout;
3585c                 | ' 
3585c                 | ' 	tmr = _cnt();
3585c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
3585c                 | ' 	for(;;) {
3585c                 | LR__5230
3585c     04 4E 05 F1 | 	add	fp, #4
35860     A7 12 02 F6 | 	mov	arg01, fp
35864     04 4E 85 F1 | 	sub	fp, #4
35868     01 14 06 F6 | 	mov	arg02, #1
3586c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35870     04 4E 05 F1 | 	add	fp, #4
35874     A7 26 C2 FA | 	rdbyte	local01, fp
35878     04 4E 85 F1 | 	sub	fp, #4
3587c     FF 26 0E F2 | 	cmp	local01, #255 wz
35880     01 FA 05 A6 |  if_e	mov	result1, #1
35884     28 00 90 AD |  if_e	jmp	#LR__5231
35888     1A FA 61 FD | 	getct	result1
3588c     08 4E 05 F1 | 	add	fp, #8
35890     A7 26 02 FB | 	rdlong	local01, fp
35894     13 FB 81 F1 | 	sub	result1, local01
35898     04 4E 05 F1 | 	add	fp, #4
3589c     A7 26 02 FB | 	rdlong	local01, fp
358a0     0C 4E 85 F1 | 	sub	fp, #12
358a4     13 FB 11 F2 | 	cmp	result1, local01 wc
358a8     00 FA 05 36 |  if_ae	mov	result1, #0
358ac     AC FF 9F CD |  if_b	jmp	#LR__5230
358b0                 | LR__5231
358b0     A7 F0 03 F6 | 	mov	ptra, fp
358b4     B2 00 A0 FD | 	call	#popregs_
358b8                 | _fatfs_cc_wait_ready_1196_ret
358b8     2D 00 64 FD | 	ret
358bc                 | 
358bc                 | _fatfs_cc_deselect_1202
358bc     00 4A 05 F6 | 	mov	COUNT_, #0
358c0     A8 00 A0 FD | 	call	#pushregs_
358c4     14 F0 07 F1 | 	add	ptra, #20
358c8     01 00 00 FF 
358cc     14 E4 05 F1 | 	add	objptr, ##532
358d0     F2 14 02 FB | 	rdlong	arg02, objptr
358d4     04 4E 05 F1 | 	add	fp, #4
358d8     A7 14 62 FC | 	wrlong	arg02, fp
358dc     04 E4 85 F1 | 	sub	objptr, #4
358e0     F2 14 02 FB | 	rdlong	arg02, objptr
358e4     04 4E 05 F1 | 	add	fp, #4
358e8     A7 14 62 FC | 	wrlong	arg02, fp
358ec     08 E4 05 F1 | 	add	objptr, #8
358f0     F2 14 02 FB | 	rdlong	arg02, objptr
358f4     04 4E 05 F1 | 	add	fp, #4
358f8     A7 14 62 FC | 	wrlong	arg02, fp
358fc     04 E4 05 F1 | 	add	objptr, #4
35900     F2 14 02 FB | 	rdlong	arg02, objptr
35904     01 00 00 FF 
35908     1C E4 85 F1 | 	sub	objptr, ##540
3590c     04 4E 05 F1 | 	add	fp, #4
35910     A7 14 62 FC | 	wrlong	arg02, fp
35914     0C 4E 85 F1 | 	sub	fp, #12
35918     A7 12 02 FB | 	rdlong	arg01, fp
3591c     04 4E 85 F1 | 	sub	fp, #4
35920     59 12 62 FD | 	drvh	arg01
35924     1F 20 64 FD | 	waitx	#16
35928     A7 12 02 F6 | 	mov	arg01, fp
3592c     01 14 06 F6 | 	mov	arg02, #1
35930     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35934     A7 F0 03 F6 | 	mov	ptra, fp
35938     B2 00 A0 FD | 	call	#popregs_
3593c                 | _fatfs_cc_deselect_1202_ret
3593c     2D 00 64 FD | 	ret
35940                 | 
35940                 | _fatfs_cc_select_1206
35940     00 4A 05 F6 | 	mov	COUNT_, #0
35944     A8 00 A0 FD | 	call	#pushregs_
35948     10 F0 07 F1 | 	add	ptra, #16
3594c     01 00 00 FF 
35950     14 E4 05 F1 | 	add	objptr, ##532
35954     F2 14 02 FB | 	rdlong	arg02, objptr
35958     08 4E 05 F1 | 	add	fp, #8
3595c     A7 14 62 FC | 	wrlong	arg02, fp
35960     08 E4 05 F1 | 	add	objptr, #8
35964     F2 12 02 FB | 	rdlong	arg01, objptr
35968     01 00 00 FF 
3596c     1C E4 85 F1 | 	sub	objptr, ##540
35970     04 4E 05 F1 | 	add	fp, #4
35974     A7 12 62 FC | 	wrlong	arg01, fp
35978     50 12 62 FD | 	fltl	arg01
3597c     04 4E 85 F1 | 	sub	fp, #4
35980     A7 12 02 FB | 	rdlong	arg01, fp
35984     58 12 62 FD | 	drvl	arg01
35988     1F 20 64 FD | 	waitx	#16
3598c     04 4E 05 F1 | 	add	fp, #4
35990     A7 12 02 FB | 	rdlong	arg01, fp
35994     41 12 62 FD | 	dirh	arg01
35998     08 4E 85 F1 | 	sub	fp, #8
3599c     A7 12 02 F6 | 	mov	arg01, fp
359a0     04 4E 85 F1 | 	sub	fp, #4
359a4     01 14 06 F6 | 	mov	arg02, #1
359a8     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
359ac     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1196
359b0     00 FA 0D F2 | 	cmp	result1, #0 wz
359b4     01 FA 05 56 |  if_ne	mov	result1, #1
359b8     08 00 90 5D |  if_ne	jmp	#LR__5240
359bc     FC FE BF FD | 	call	#_fatfs_cc_deselect_1202
359c0                 | ' 
359c0                 | ' 	deselect();
359c0                 | ' 	return 0;
359c0     00 FA 05 F6 | 	mov	result1, #0
359c4                 | LR__5240
359c4     A7 F0 03 F6 | 	mov	ptra, fp
359c8     B2 00 A0 FD | 	call	#popregs_
359cc                 | _fatfs_cc_select_1206_ret
359cc     2D 00 64 FD | 	ret
359d0                 | 
359d0                 | _fatfs_cc_rcvr_datablock_1210
359d0     01 4A 05 F6 | 	mov	COUNT_, #1
359d4     A8 00 A0 FD | 	call	#pushregs_
359d8     18 F0 07 F1 | 	add	ptra, #24
359dc     04 4E 05 F1 | 	add	fp, #4
359e0     A7 12 62 FC | 	wrlong	arg01, fp
359e4     04 4E 05 F1 | 	add	fp, #4
359e8     A7 14 62 FC | 	wrlong	arg02, fp
359ec     1A FA 61 FD | 	getct	result1
359f0     08 4E 05 F1 | 	add	fp, #8
359f4     A7 FA 61 FC | 	wrlong	result1, fp
359f8     14 26 06 FB | 	rdlong	local01, #20
359fc     03 26 46 F0 | 	shr	local01, #3
35a00     04 4E 05 F1 | 	add	fp, #4
35a04     A7 26 62 FC | 	wrlong	local01, fp
35a08     14 4E 85 F1 | 	sub	fp, #20
35a0c                 | ' 	BYTE *buff,
35a0c                 | ' 	UINT btr
35a0c                 | ' )
35a0c                 | ' {
35a0c                 | ' 	BYTE d[2];
35a0c                 | ' 	UINT tmr, tmout;
35a0c                 | ' 
35a0c                 | ' 	tmr = _cnt();
35a0c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
35a0c                 | ' 	for(;;) {
35a0c                 | LR__5250
35a0c     0C 4E 05 F1 | 	add	fp, #12
35a10     A7 12 02 F6 | 	mov	arg01, fp
35a14     0C 4E 85 F1 | 	sub	fp, #12
35a18     01 14 06 F6 | 	mov	arg02, #1
35a1c     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35a20     0C 4E 05 F1 | 	add	fp, #12
35a24     A7 26 C2 FA | 	rdbyte	local01, fp
35a28     0C 4E 85 F1 | 	sub	fp, #12
35a2c     FF 26 0E F2 | 	cmp	local01, #255 wz
35a30     28 00 90 5D |  if_ne	jmp	#LR__5251
35a34     1A FA 61 FD | 	getct	result1
35a38     FD 26 02 F6 | 	mov	local01, result1
35a3c     10 4E 05 F1 | 	add	fp, #16
35a40     A7 14 02 FB | 	rdlong	arg02, fp
35a44     0A 27 82 F1 | 	sub	local01, arg02
35a48     04 4E 05 F1 | 	add	fp, #4
35a4c     A7 14 02 FB | 	rdlong	arg02, fp
35a50     14 4E 85 F1 | 	sub	fp, #20
35a54     0A 27 12 F2 | 	cmp	local01, arg02 wc
35a58     B0 FF 9F CD |  if_b	jmp	#LR__5250
35a5c                 | LR__5251
35a5c     0C 4E 05 F1 | 	add	fp, #12
35a60     A7 26 C2 FA | 	rdbyte	local01, fp
35a64     0C 4E 85 F1 | 	sub	fp, #12
35a68     FE 26 0E F2 | 	cmp	local01, #254 wz
35a6c     00 FA 05 56 |  if_ne	mov	result1, #0
35a70     30 00 90 5D |  if_ne	jmp	#LR__5252
35a74     04 4E 05 F1 | 	add	fp, #4
35a78     A7 12 02 FB | 	rdlong	arg01, fp
35a7c     04 4E 05 F1 | 	add	fp, #4
35a80     A7 14 02 FB | 	rdlong	arg02, fp
35a84     08 4E 85 F1 | 	sub	fp, #8
35a88     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35a8c     0C 4E 05 F1 | 	add	fp, #12
35a90     A7 12 02 F6 | 	mov	arg01, fp
35a94     0C 4E 85 F1 | 	sub	fp, #12
35a98     02 14 06 F6 | 	mov	arg02, #2
35a9c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35aa0                 | ' 
35aa0                 | ' 	rcvr_mmc(buff, btr);
35aa0                 | ' 	rcvr_mmc(d, 2);
35aa0                 | ' 
35aa0                 | ' 	return 1;
35aa0     01 FA 05 F6 | 	mov	result1, #1
35aa4                 | LR__5252
35aa4     A7 F0 03 F6 | 	mov	ptra, fp
35aa8     B2 00 A0 FD | 	call	#popregs_
35aac                 | _fatfs_cc_rcvr_datablock_1210_ret
35aac     2D 00 64 FD | 	ret
35ab0                 | 
35ab0                 | _fatfs_cc_xmit_datablock_1212
35ab0     00 4A 05 F6 | 	mov	COUNT_, #0
35ab4     A8 00 A0 FD | 	call	#pushregs_
35ab8     10 F0 07 F1 | 	add	ptra, #16
35abc     04 4E 05 F1 | 	add	fp, #4
35ac0     A7 12 62 FC | 	wrlong	arg01, fp
35ac4     04 4E 05 F1 | 	add	fp, #4
35ac8     A7 14 42 FC | 	wrbyte	arg02, fp
35acc     08 4E 85 F1 | 	sub	fp, #8
35ad0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1196
35ad4     00 FA 0D F2 | 	cmp	result1, #0 wz
35ad8     00 FA 05 A6 |  if_e	mov	result1, #0
35adc     90 00 90 AD |  if_e	jmp	#LR__5261
35ae0     08 4E 05 F1 | 	add	fp, #8
35ae4     A7 14 C2 FA | 	rdbyte	arg02, fp
35ae8     04 4E 05 F1 | 	add	fp, #4
35aec     A7 14 42 FC | 	wrbyte	arg02, fp
35af0     A7 12 02 F6 | 	mov	arg01, fp
35af4     0C 4E 85 F1 | 	sub	fp, #12
35af8     01 14 06 F6 | 	mov	arg02, #1
35afc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1185
35b00     08 4E 05 F1 | 	add	fp, #8
35b04     A7 14 C2 FA | 	rdbyte	arg02, fp
35b08     08 4E 85 F1 | 	sub	fp, #8
35b0c     FD 14 0E F2 | 	cmp	arg02, #253 wz
35b10     58 00 90 AD |  if_e	jmp	#LR__5260
35b14     04 4E 05 F1 | 	add	fp, #4
35b18     A7 12 02 FB | 	rdlong	arg01, fp
35b1c     04 4E 85 F1 | 	sub	fp, #4
35b20     09 14 C6 F9 | 	decod	arg02, #9
35b24     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1185
35b28     0C 4E 05 F1 | 	add	fp, #12
35b2c     A7 12 02 F6 | 	mov	arg01, fp
35b30     0C 4E 85 F1 | 	sub	fp, #12
35b34     02 14 06 F6 | 	mov	arg02, #2
35b38     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35b3c     0C 4E 05 F1 | 	add	fp, #12
35b40     A7 12 02 F6 | 	mov	arg01, fp
35b44     0C 4E 85 F1 | 	sub	fp, #12
35b48     01 14 06 F6 | 	mov	arg02, #1
35b4c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35b50     0C 4E 05 F1 | 	add	fp, #12
35b54     A7 14 C2 FA | 	rdbyte	arg02, fp
35b58     0C 4E 85 F1 | 	sub	fp, #12
35b5c     1F 14 06 F5 | 	and	arg02, #31
35b60     05 14 0E F2 | 	cmp	arg02, #5 wz
35b64                 | ' 			return 0;
35b64     00 FA 05 56 |  if_ne	mov	result1, #0
35b68     04 00 90 5D |  if_ne	jmp	#LR__5261
35b6c                 | LR__5260
35b6c                 | ' 	}
35b6c                 | ' 
35b6c                 | ' 	return 1;
35b6c     01 FA 05 F6 | 	mov	result1, #1
35b70                 | LR__5261
35b70     A7 F0 03 F6 | 	mov	ptra, fp
35b74     B2 00 A0 FD | 	call	#popregs_
35b78                 | _fatfs_cc_xmit_datablock_1212_ret
35b78     2D 00 64 FD | 	ret
35b7c                 | 
35b7c                 | _fatfs_cc_send_cmd_1216
35b7c     01 4A 05 F6 | 	mov	COUNT_, #1
35b80     A8 00 A0 FD | 	call	#pushregs_
35b84     1C F0 07 F1 | 	add	ptra, #28
35b88                 | _fatfs_cc_send_cmd_1216_enter
35b88     04 4E 05 F1 | 	add	fp, #4
35b8c     A7 12 42 FC | 	wrbyte	arg01, fp
35b90     04 4E 05 F1 | 	add	fp, #4
35b94     A7 14 62 FC | 	wrlong	arg02, fp
35b98     04 4E 85 F1 | 	sub	fp, #4
35b9c     A7 FA C1 FA | 	rdbyte	result1, fp
35ba0     04 4E 85 F1 | 	sub	fp, #4
35ba4     80 FA CD F7 | 	test	result1, #128 wz
35ba8     44 00 90 AD |  if_e	jmp	#LR__5270
35bac     04 4E 05 F1 | 	add	fp, #4
35bb0     A7 14 C2 FA | 	rdbyte	arg02, fp
35bb4     7F 14 06 F5 | 	and	arg02, #127
35bb8     A7 14 42 FC | 	wrbyte	arg02, fp
35bbc     04 4E 85 F1 | 	sub	fp, #4
35bc0     37 12 06 F6 | 	mov	arg01, #55
35bc4     00 14 06 F6 | 	mov	arg02, #0
35bc8     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1216
35bcc     0C 4E 05 F1 | 	add	fp, #12
35bd0     A7 FA 41 FC | 	wrbyte	result1, fp
35bd4     A7 14 C2 FA | 	rdbyte	arg02, fp
35bd8     0C 4E 85 F1 | 	sub	fp, #12
35bdc     02 14 16 F2 | 	cmp	arg02, #2 wc
35be0     0C 4E 05 31 |  if_ae	add	fp, #12
35be4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
35be8     0C 4E 85 31 |  if_ae	sub	fp, #12
35bec     6C 01 90 3D |  if_ae	jmp	#LR__5274
35bf0                 | LR__5270
35bf0     04 4E 05 F1 | 	add	fp, #4
35bf4     A7 14 C2 FA | 	rdbyte	arg02, fp
35bf8     04 4E 85 F1 | 	sub	fp, #4
35bfc     0C 14 0E F2 | 	cmp	arg02, #12 wz
35c00     14 00 90 AD |  if_e	jmp	#LR__5271
35c04     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1202
35c08     34 FD BF FD | 	call	#_fatfs_cc_select_1206
35c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
35c10     FF FA 05 A6 |  if_e	mov	result1, #255
35c14     44 01 90 AD |  if_e	jmp	#LR__5274
35c18                 | LR__5271
35c18     04 4E 05 F1 | 	add	fp, #4
35c1c     A7 14 C2 FA | 	rdbyte	arg02, fp
35c20     40 FA 05 F6 | 	mov	result1, #64
35c24     0A FB 41 F5 | 	or	result1, arg02
35c28     10 4E 05 F1 | 	add	fp, #16
35c2c     A7 FA 41 FC | 	wrbyte	result1, fp
35c30     0C 4E 85 F1 | 	sub	fp, #12
35c34     A7 FA 01 FB | 	rdlong	result1, fp
35c38     18 FA 45 F0 | 	shr	result1, #24
35c3c     0D 4E 05 F1 | 	add	fp, #13
35c40     A7 FA 41 FC | 	wrbyte	result1, fp
35c44     0D 4E 85 F1 | 	sub	fp, #13
35c48     A7 FA 01 FB | 	rdlong	result1, fp
35c4c     10 FA 45 F0 | 	shr	result1, #16
35c50     0E 4E 05 F1 | 	add	fp, #14
35c54     A7 FA 41 FC | 	wrbyte	result1, fp
35c58     0E 4E 85 F1 | 	sub	fp, #14
35c5c     A7 FA 01 FB | 	rdlong	result1, fp
35c60     08 FA 45 F0 | 	shr	result1, #8
35c64     0F 4E 05 F1 | 	add	fp, #15
35c68     A7 FA 41 FC | 	wrbyte	result1, fp
35c6c     0F 4E 85 F1 | 	sub	fp, #15
35c70     A7 FA 01 FB | 	rdlong	result1, fp
35c74     10 4E 05 F1 | 	add	fp, #16
35c78     A7 FA 41 FC | 	wrbyte	result1, fp
35c7c     0C 4E 85 F1 | 	sub	fp, #12
35c80     A7 02 48 FC | 	wrbyte	#1, fp
35c84     08 4E 85 F1 | 	sub	fp, #8
35c88     A7 FA C9 FA | 	rdbyte	result1, fp wz
35c8c     04 4E 85 F1 | 	sub	fp, #4
35c90     0C 4E 05 A1 |  if_e	add	fp, #12
35c94     A7 2A 49 AC |  if_e	wrbyte	#149, fp
35c98     0C 4E 85 A1 |  if_e	sub	fp, #12
35c9c     04 4E 05 F1 | 	add	fp, #4
35ca0     A7 FA C1 FA | 	rdbyte	result1, fp
35ca4     04 4E 85 F1 | 	sub	fp, #4
35ca8     08 FA 0D F2 | 	cmp	result1, #8 wz
35cac     0C 4E 05 A1 |  if_e	add	fp, #12
35cb0     A7 0E 49 AC |  if_e	wrbyte	#135, fp
35cb4     0C 4E 85 A1 |  if_e	sub	fp, #12
35cb8     0C 4E 05 F1 | 	add	fp, #12
35cbc     A7 14 C2 FA | 	rdbyte	arg02, fp
35cc0     0D 4E 05 F1 | 	add	fp, #13
35cc4     A7 14 42 FC | 	wrbyte	arg02, fp
35cc8     05 4E 85 F1 | 	sub	fp, #5
35ccc     A7 12 02 F6 | 	mov	arg01, fp
35cd0     14 4E 85 F1 | 	sub	fp, #20
35cd4     06 14 06 F6 | 	mov	arg02, #6
35cd8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1185
35cdc     04 4E 05 F1 | 	add	fp, #4
35ce0     A7 26 C2 FA | 	rdbyte	local01, fp
35ce4     04 4E 85 F1 | 	sub	fp, #4
35ce8     0C 26 0E F2 | 	cmp	local01, #12 wz
35cec     10 4E 05 A1 |  if_e	add	fp, #16
35cf0     A7 12 02 A6 |  if_e	mov	arg01, fp
35cf4     10 4E 85 A1 |  if_e	sub	fp, #16
35cf8     01 14 06 A6 |  if_e	mov	arg02, #1
35cfc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1192
35d00     0C 4E 05 F1 | 	add	fp, #12
35d04     A7 14 48 FC | 	wrbyte	#10, fp
35d08     0C 4E 85 F1 | 	sub	fp, #12
35d0c                 | ' 	n = 10;
35d0c                 | ' 	do
35d0c                 | LR__5272
35d0c     10 4E 05 F1 | 	add	fp, #16
35d10     A7 12 02 F6 | 	mov	arg01, fp
35d14     10 4E 85 F1 | 	sub	fp, #16
35d18     01 14 06 F6 | 	mov	arg02, #1
35d1c     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1192
35d20     10 4E 05 F1 | 	add	fp, #16
35d24     A7 26 C2 FA | 	rdbyte	local01, fp
35d28     10 4E 85 F1 | 	sub	fp, #16
35d2c     80 26 CE F7 | 	test	local01, #128 wz
35d30     1C 00 90 AD |  if_e	jmp	#LR__5273
35d34     0C 4E 05 F1 | 	add	fp, #12
35d38     A7 26 C2 FA | 	rdbyte	local01, fp
35d3c     01 26 86 F1 | 	sub	local01, #1
35d40     A7 26 42 FC | 	wrbyte	local01, fp
35d44     A7 26 CA FA | 	rdbyte	local01, fp wz
35d48     0C 4E 85 F1 | 	sub	fp, #12
35d4c     BC FF 9F 5D |  if_ne	jmp	#LR__5272
35d50                 | LR__5273
35d50                 | ' 
35d50                 | ' 	return d;
35d50     10 4E 05 F1 | 	add	fp, #16
35d54     A7 FA C1 FA | 	rdbyte	result1, fp
35d58     10 4E 85 F1 | 	sub	fp, #16
35d5c                 | LR__5274
35d5c     A7 F0 03 F6 | 	mov	ptra, fp
35d60     B2 00 A0 FD | 	call	#popregs_
35d64                 | _fatfs_cc_send_cmd_1216_ret
35d64     2D 00 64 FD | 	ret
35d68                 | 
35d68                 | _fatfs_cc_disk_deinitialize
35d68     03 4A 05 F6 | 	mov	COUNT_, #3
35d6c     A8 00 A0 FD | 	call	#pushregs_
35d70     00 12 4E F2 | 	cmps	arg01, #0 wz
35d74     01 00 00 FF 
35d78     14 E4 05 F1 | 	add	objptr, ##532
35d7c     F2 12 02 FB | 	rdlong	arg01, objptr
35d80     04 E4 85 F1 | 	sub	objptr, #4
35d84     F2 26 02 FB | 	rdlong	local01, objptr
35d88     08 E4 05 F1 | 	add	objptr, #8
35d8c     F2 28 02 FB | 	rdlong	local02, objptr
35d90     04 E4 05 F1 | 	add	objptr, #4
35d94     F2 2A 02 FB | 	rdlong	local03, objptr
35d98     01 00 00 FF 
35d9c     1C E4 85 F1 | 	sub	objptr, ##540
35da0                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35da0                 | '         return RES_NOTRDY;
35da0     03 FA 05 56 |  if_ne	mov	result1, #3
35da4     2C 00 90 5D |  if_ne	jmp	#LR__5280
35da8     50 12 62 FD | 	fltl	arg01
35dac     09 01 08 FC | 	wrpin	#0, arg01
35db0     50 26 62 FD | 	fltl	local01
35db4     13 01 08 FC | 	wrpin	#0, local01
35db8     50 28 62 FD | 	fltl	local02
35dbc     14 01 08 FC | 	wrpin	#0, local02
35dc0     50 2A 62 FD | 	fltl	local03
35dc4     15 01 08 FC | 	wrpin	#0, local03
35dc8     0A 12 06 F6 | 	mov	arg01, #10
35dcc     3C 0E BF FD | 	call	#__system___waitms
35dd0                 | '     }
35dd0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
35dd0                 | '     _pinclear(PIN_SS);
35dd0                 | '     _pinclear(PIN_CLK);
35dd0                 | '     _pinclear(PIN_DI);
35dd0                 | '     _pinclear(PIN_DO);
35dd0                 | ' 
35dd0                 | '     _waitms(10);
35dd0                 | ' 
35dd0                 | '     return 0;
35dd0     00 FA 05 F6 | 	mov	result1, #0
35dd4                 | LR__5280
35dd4     A7 F0 03 F6 | 	mov	ptra, fp
35dd8     B2 00 A0 FD | 	call	#popregs_
35ddc                 | _fatfs_cc_disk_deinitialize_ret
35ddc     2D 00 64 FD | 	ret
35de0                 | 
35de0                 | _fatfs_cc_gettimeofday
35de0     04 4A 05 F6 | 	mov	COUNT_, #4
35de4     A8 00 A0 FD | 	call	#pushregs_
35de8     09 27 02 F6 | 	mov	local01, arg01
35dec     F8 09 BF FD | 	call	#__system___getus
35df0     FD 12 02 F6 | 	mov	arg01, result1
35df4     02 00 00 FF 
35df8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
35dfc     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
35e00     09 FB 01 F6 | 	mov	result1, arg01
35e04     14 FB 81 F1 | 	sub	result1, local02
35e08     A1 07 00 FF 
35e0c     40 FA 15 FD | 	qdiv	result1, ##1000000
35e10     02 00 00 FF 
35e14     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35e18     18 28 62 FD | 	getqx	local02
35e1c     A1 07 00 FF 
35e20     40 FA 15 FD | 	qdiv	result1, ##1000000
35e24     00 28 0E F2 | 	cmp	local02, #0 wz
35e28     19 2A 62 FD | 	getqy	local03
35e2c     28 00 90 AD |  if_e	jmp	#LR__5290
35e30     02 00 00 FF 
35e34     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35e38     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35e3c     14 2D 02 F1 | 	add	local04, local02
35e40     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
35e44     15 13 82 F1 | 	sub	arg01, local03
35e48     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
35e4c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
35e50     02 00 00 FF 
35e54     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
35e58                 | LR__5290
35e58     02 00 00 FF 
35e5c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
35e60     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
35e64     02 00 00 FF 
35e68     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
35e6c     13 2D 62 FC | 	wrlong	local04, local01
35e70     04 26 06 F1 | 	add	local01, #4
35e74     13 2B 62 FC | 	wrlong	local03, local01
35e78                 | '         lastsec += secs;
35e78                 | '         lastus = now - leftover;
35e78                 | '     }
35e78                 | '     tv->tv_sec = lastsec;
35e78                 | '     tv->tv_usec = leftover;
35e78                 | '     return 0;
35e78     00 FA 05 F6 | 	mov	result1, #0
35e7c     A7 F0 03 F6 | 	mov	ptra, fp
35e80     B2 00 A0 FD | 	call	#popregs_
35e84                 | _fatfs_cc_gettimeofday_ret
35e84     2D 00 64 FD | 	ret
35e88                 | 
35e88                 | _fatfs_cc__is_leap_year
35e88     09 FB 51 F6 | 	abs	result1, arg01 wc
35e8c     03 FA 05 F5 | 	and	result1, #3
35e90     FD FA 89 F6 | 	negc	result1, result1 wz
35e94     38 00 90 5D |  if_ne	jmp	#LR__5301
35e98     09 FB 51 F6 | 	abs	result1, arg01 wc
35e9c     64 FA 15 FD | 	qdiv	result1, #100
35ea0     19 FA 61 FD | 	getqy	result1
35ea4     FD FA 89 F6 | 	negc	result1, result1 wz
35ea8     1C 00 90 5D |  if_ne	jmp	#LR__5300
35eac     09 FB 51 F6 | 	abs	result1, arg01 wc
35eb0     90 FB 15 FD | 	qdiv	result1, #400
35eb4                 | '       return (0 == y % 400);
35eb4     00 FA 05 F6 | 	mov	result1, #0
35eb8     19 00 62 FD | 	getqy	_var01
35ebc     00 01 8A F6 | 	negc	_var01, _var01 wz
35ec0     01 FA 05 A6 |  if_e	mov	result1, #1
35ec4     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35ec8                 | LR__5300
35ec8                 | '     return 1;
35ec8     01 FA 05 F6 | 	mov	result1, #1
35ecc     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
35ed0                 | LR__5301
35ed0                 | '   }
35ed0                 | '   return 0;
35ed0     00 FA 05 F6 | 	mov	result1, #0
35ed4                 | _fatfs_cc__is_leap_year_ret
35ed4     2D 00 64 FD | 	ret
35ed8                 | 
35ed8                 | _fatfs_cc___tzoffset
35ed8     09 01 0A F6 | 	mov	_var01, arg01 wz
35edc     FF FF FF FF 
35ee0     0A FF 6B FC | 	wrlong	##-1, arg02
35ee4     01 02 06 F6 | 	mov	_var02, #1
35ee8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
35eec                 | '                 return 0;
35eec     00 FA 05 A6 |  if_e	mov	result1, #0
35ef0     94 02 90 AD |  if_e	jmp	#LR__5327
35ef4     0A 01 68 FC | 	wrlong	#0, arg02
35ef8     02 00 00 FF 
35efc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
35f00     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
35f04                 | ' 
35f04                 | '        *hasdst = 0;
35f04                 | ' 
35f04                 | ' 	n = stdname;
35f04                 | '         while (*s && isalpha(*s)) {
35f04     02 00 00 FF 
35f08     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
35f0c     97 28 48 FB | 	callpa	#(@LR__5311-@LR__5310)>>2,fcache_load_ptr_
35f10                 | LR__5310
35f10     00 05 CA FA | 	rdbyte	_var03, _var01 wz
35f14     48 00 90 AD |  if_e	jmp	#LR__5312
35f18     00 13 C2 FA | 	rdbyte	arg01, _var01
35f1c                 | ' {
35f1c                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
35f1c     80 12 36 F3 | 	fle	arg01, #128 wc
35f20                 | '     return __ctype[c];
35f20     02 00 00 FF 
35f24     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35f28     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35f2c     09 FB C1 FA | 	rdbyte	result1, arg01
35f30     02 00 00 FF 
35f34     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35f38     0C FA CD F7 | 	test	result1, #12 wz
35f3c     20 00 90 AD |  if_e	jmp	#LR__5312
35f40     00 09 02 F6 | 	mov	_var05, _var01
35f44     00 0B 02 F6 | 	mov	_var06, _var01
35f48     01 0A 06 F1 | 	add	_var06, #1
35f4c     04 0D C2 FA | 	rdbyte	_var07, _var05
35f50     05 01 02 F6 | 	mov	_var01, _var06
35f54     03 0D 42 FC | 	wrbyte	_var07, _var04
35f58     01 06 06 F1 | 	add	_var04, #1
35f5c     B0 FF 9F FD | 	jmp	#LR__5310
35f60                 | LR__5311
35f60                 | LR__5312
35f60     03 01 48 FC | 	wrbyte	#0, _var04
35f64     00 0E 06 F6 | 	mov	_var08, #0
35f68     00 05 C2 FA | 	rdbyte	_var03, _var01
35f6c     2D 04 0E F2 | 	cmp	_var03, #45 wz
35f70     01 02 66 A6 |  if_e	neg	_var02, #1
35f74     01 00 06 A1 |  if_e	add	_var01, #1
35f78     97 28 48 FB | 	callpa	#(@LR__5314-@LR__5313)>>2,fcache_load_ptr_
35f7c                 | '                 sgn = -1;
35f7c                 | '                 s++;
35f7c                 | '         }
35f7c                 | '         while (isdigit(*s)) {
35f7c                 | LR__5313
35f7c     00 13 C2 FA | 	rdbyte	arg01, _var01
35f80                 | ' {
35f80                 | '   return  (__ctype_get(c) & 0x02 ) ;
35f80     80 12 36 F3 | 	fle	arg01, #128 wc
35f84                 | '     return __ctype[c];
35f84     02 00 00 FF 
35f88     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
35f8c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
35f90     09 FB C1 FA | 	rdbyte	result1, arg01
35f94     02 00 00 FF 
35f98     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
35f9c     02 FA CD F7 | 	test	result1, #2 wz
35fa0     28 00 90 AD |  if_e	jmp	#LR__5315
35fa4     07 05 02 F6 | 	mov	_var03, _var08
35fa8     02 04 66 F0 | 	shl	_var03, #2
35fac     07 05 02 F1 | 	add	_var03, _var08
35fb0     01 04 66 F0 | 	shl	_var03, #1
35fb4     00 09 C2 FA | 	rdbyte	_var05, _var01
35fb8     30 08 86 F1 | 	sub	_var05, #48
35fbc     04 05 02 F1 | 	add	_var03, _var05
35fc0     02 0F 02 F6 | 	mov	_var08, _var03
35fc4     01 00 06 F1 | 	add	_var01, #1
35fc8     B0 FF 9F FD | 	jmp	#LR__5313
35fcc                 | LR__5314
35fcc                 | LR__5315
35fcc     07 00 00 FF 
35fd0     10 0E 06 FD | 	qmul	_var08, ##3600
35fd4     00 05 C2 FA | 	rdbyte	_var03, _var01
35fd8     3A 04 0E F2 | 	cmp	_var03, #58 wz
35fdc     18 10 62 FD | 	getqx	_var09
35fe0     70 00 90 5D |  if_ne	jmp	#LR__5319
35fe4     00 0E 06 F6 | 	mov	_var08, #0
35fe8     01 00 06 F1 | 	add	_var01, #1
35fec     97 28 48 FB | 	callpa	#(@LR__5317-@LR__5316)>>2,fcache_load_ptr_
35ff0                 | '                 x = 0;
35ff0                 | '                 s++;
35ff0                 | '                 while (isdigit(*s)) {
35ff0                 | LR__5316
35ff0     00 13 C2 FA | 	rdbyte	arg01, _var01
35ff4                 | ' {
35ff4                 | '   return  (__ctype_get(c) & 0x02 ) ;
35ff4     80 12 36 F3 | 	fle	arg01, #128 wc
35ff8                 | '     return __ctype[c];
35ff8     02 00 00 FF 
35ffc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
36000     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36004     09 FB C1 FA | 	rdbyte	result1, arg01
36008     02 00 00 FF 
3600c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
36010     02 FA CD F7 | 	test	result1, #2 wz
36014     28 00 90 AD |  if_e	jmp	#LR__5318
36018     07 05 02 F6 | 	mov	_var03, _var08
3601c     02 04 66 F0 | 	shl	_var03, #2
36020     07 05 02 F1 | 	add	_var03, _var08
36024     01 04 66 F0 | 	shl	_var03, #1
36028     00 09 C2 FA | 	rdbyte	_var05, _var01
3602c     30 08 86 F1 | 	sub	_var05, #48
36030     04 05 02 F1 | 	add	_var03, _var05
36034     02 0F 02 F6 | 	mov	_var08, _var03
36038     01 00 06 F1 | 	add	_var01, #1
3603c     B0 FF 9F FD | 	jmp	#LR__5316
36040                 | LR__5317
36040                 | LR__5318
36040     07 0D 02 F6 | 	mov	_var07, _var08
36044     04 0C 66 F0 | 	shl	_var07, #4
36048     07 0D 82 F1 | 	sub	_var07, _var08
3604c     02 0C 66 F0 | 	shl	_var07, #2
36050     06 11 02 F1 | 	add	_var09, _var07
36054                 | LR__5319
36054     02 00 00 FF 
36058     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3605c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
36060     00 13 C2 FA | 	rdbyte	arg01, _var01
36064                 | ' {
36064                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36064     80 12 36 F3 | 	fle	arg01, #128 wc
36068                 | '     return __ctype[c];
36068     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
3606c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
36070     09 FB C1 FA | 	rdbyte	result1, arg01
36074     02 00 00 FF 
36078     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3607c     0C FA CD F7 | 	test	result1, #12 wz
36080     50 00 90 AD |  if_e	jmp	#LR__5322
36084     0A 03 68 FC | 	wrlong	#1, arg02
36088                 | '                 *hasdst = 1;
36088                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
36088                 | LR__5320
36088     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3608c     44 00 90 AD |  if_e	jmp	#LR__5321
36090     00 13 C2 FA | 	rdbyte	arg01, _var01
36094                 | ' {
36094                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
36094     80 12 36 F3 | 	fle	arg01, #128 wc
36098                 | '     return __ctype[c];
36098     02 00 00 FF 
3609c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
360a0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
360a4     09 FB C1 FA | 	rdbyte	result1, arg01
360a8     02 00 00 FF 
360ac     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
360b0     0C FA CD F7 | 	test	result1, #12 wz
360b4     1C 00 90 AD |  if_e	jmp	#LR__5321
360b8     00 0B 02 F6 | 	mov	_var06, _var01
360bc     01 0A 06 F1 | 	add	_var06, #1
360c0     00 0D C2 FA | 	rdbyte	_var07, _var01
360c4     05 01 02 F6 | 	mov	_var01, _var06
360c8     03 0D 42 FC | 	wrbyte	_var07, _var04
360cc     01 06 06 F1 | 	add	_var04, #1
360d0     B4 FF 9F FD | 	jmp	#LR__5320
360d4                 | LR__5321
360d4                 | LR__5322
360d4     03 01 48 FC | 	wrbyte	#0, _var04
360d8     02 00 00 FF 
360dc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
360e0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
360e4     02 00 00 FF 
360e8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
360ec     20 00 90 AD |  if_e	jmp	#LR__5323
360f0     02 00 00 FF 
360f4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
360f8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
360fc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
36100     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36104     02 00 00 FF 
36108     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3610c     1C 00 90 FD | 	jmp	#LR__5324
36110                 | LR__5323
36110     02 00 00 FF 
36114     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
36118     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
3611c     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
36120     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36124     02 00 00 FF 
36128     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
3612c                 | LR__5324
3612c     02 00 00 FF 
36130     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
36134     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
36138     02 00 00 FF 
3613c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
36140     20 00 90 AD |  if_e	jmp	#LR__5325
36144     02 00 00 FF 
36148     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3614c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36150     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
36154     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36158     02 00 00 FF 
3615c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36160     1C 00 90 FD | 	jmp	#LR__5326
36164                 | LR__5325
36164     02 00 00 FF 
36168     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3616c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
36170     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
36174     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
36178     02 00 00 FF 
3617c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
36180                 | LR__5326
36180     08 03 02 FD | 	qmul	_var02, _var09
36184                 | ' 		_tzname[1] = stdname;
36184                 | ' 
36184                 | '         return sgn * off;
36184     18 FA 61 FD | 	getqx	result1
36188                 | LR__5327
36188                 | _fatfs_cc___tzoffset_ret
36188     2D 00 64 FD | 	ret
3618c                 | 
3618c                 | _fatfs_cc___indst
3618c     10 12 06 F1 | 	add	arg01, #16
36190     09 01 02 FB | 	rdlong	_var01, arg01
36194     10 12 86 F1 | 	sub	arg01, #16
36198     02 00 0E F2 | 	cmp	_var01, #2 wz
3619c     30 00 90 5D |  if_ne	jmp	#LR__5330
361a0     07 00 06 F6 | 	mov	_var01, #7
361a4     18 12 06 F1 | 	add	arg01, #24
361a8     09 03 02 FB | 	rdlong	_var02, arg01
361ac     01 01 02 F1 | 	add	_var01, _var02
361b0     0C 12 86 F1 | 	sub	arg01, #12
361b4     09 05 02 FB | 	rdlong	_var03, arg01
361b8     02 01 82 F1 | 	sub	_var01, _var03
361bc     00 00 56 F2 | 	cmps	_var01, #0 wc
361c0                 | '                         return 1;
361c0     01 FA 05 C6 |  if_b	mov	result1, #1
361c4     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
361c8                 | '                 return 0;
361c8     00 FA 05 F6 | 	mov	result1, #0
361cc     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
361d0                 | LR__5330
361d0     10 12 06 F1 | 	add	arg01, #16
361d4     09 01 02 FB | 	rdlong	_var01, arg01
361d8     10 12 86 F1 | 	sub	arg01, #16
361dc     0A 00 0E F2 | 	cmp	_var01, #10 wz
361e0     28 00 90 5D |  if_ne	jmp	#LR__5331
361e4     18 12 06 F1 | 	add	arg01, #24
361e8     09 01 02 FB | 	rdlong	_var01, arg01
361ec     0C 12 86 F1 | 	sub	arg01, #12
361f0     09 07 02 FB | 	rdlong	_var04, arg01
361f4     03 01 82 F1 | 	sub	_var01, _var04
361f8     00 00 56 F2 | 	cmps	_var01, #0 wc
361fc                 | '                         return 0;
361fc     00 FA 05 C6 |  if_b	mov	result1, #0
36200     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
36204                 | '                 return 1;
36204     01 FA 05 F6 | 	mov	result1, #1
36208     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
3620c                 | LR__5331
3620c                 | '         }
3620c                 | ' 
3620c                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
3620c     00 00 06 F6 | 	mov	_var01, #0
36210     10 12 06 F1 | 	add	arg01, #16
36214     09 03 02 FB | 	rdlong	_var02, arg01
36218     10 12 86 F1 | 	sub	arg01, #16
3621c     03 02 56 F2 | 	cmps	_var02, #3 wc
36220     10 00 90 CD |  if_b	jmp	#LR__5332
36224     10 12 06 F1 | 	add	arg01, #16
36228     09 05 02 FB | 	rdlong	_var03, arg01
3622c     0A 04 56 F2 | 	cmps	_var03, #10 wc
36230     01 00 06 C6 |  if_b	mov	_var01, #1
36234                 | LR__5332
36234     00 FB 01 F6 | 	mov	result1, _var01
36238                 | _fatfs_cc___indst_ret
36238     2D 00 64 FD | 	ret
3623c                 | 
3623c                 | ' 	
3623c                 | ' 	FUNCTION pfunc(c as integer) as integer
3623c                 | ___strs_cl_pfunc
3623c                 | ' 		if (i < 16) then
3623c     04 E4 05 F1 | 	add	objptr, #4
36240     F2 FA 01 FB | 	rdlong	result1, objptr
36244     04 E4 85 F1 | 	sub	objptr, #4
36248     10 FA 55 F2 | 	cmps	result1, #16 wc
3624c     2C 00 90 3D |  if_ae	jmp	#LR__5340
36250     F2 FA 01 FB | 	rdlong	result1, objptr
36254     04 E4 05 F1 | 	add	objptr, #4
36258     F2 00 02 FB | 	rdlong	_var01, objptr
3625c     FD 00 02 F1 | 	add	_var01, result1
36260     00 13 42 FC | 	wrbyte	arg01, _var01
36264     F2 FA 01 FB | 	rdlong	result1, objptr
36268     01 FA 05 F1 | 	add	result1, #1
3626c     F2 FA 61 FC | 	wrlong	result1, objptr
36270     04 E4 85 F1 | 	sub	objptr, #4
36274                 | ' 			p(i) = c
36274                 | ' 			i = i+1
36274                 | ' 			return 1
36274     01 FA 05 F6 | 	mov	result1, #1
36278     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
3627c                 | LR__5340
3627c                 | ' 			return -1
3627c     01 FA 65 F6 | 	neg	result1, #1
36280                 | ___strs_cl_pfunc_ret
36280     2D 00 64 FD | 	ret
36284                 | 
36284                 | __struct__s_vfs_file_t_putchar
36284     04 4A 05 F6 | 	mov	COUNT_, #4
36288     A8 00 A0 FD | 	call	#pushregs_
3628c     1C E4 05 F1 | 	add	objptr, #28
36290     F2 26 0A FB | 	rdlong	local01, objptr wz
36294     1C E4 85 F1 | 	sub	objptr, #28
36298     00 FA 05 A6 |  if_e	mov	result1, #0
3629c     48 00 90 AD |  if_e	jmp	#LR__5350
362a0     1C E4 05 F1 | 	add	objptr, #28
362a4     F2 28 02 FB | 	rdlong	local02, objptr
362a8     14 2B 02 F6 | 	mov	local03, local02
362ac     1C E4 85 F1 | 	sub	objptr, #28
362b0     13 2A 46 F7 | 	zerox	local03, #19
362b4     14 28 46 F0 | 	shr	local02, #20
362b8     02 28 66 F0 | 	shl	local02, #2
362bc     ED 28 02 F1 | 	add	local02, __methods__
362c0     14 29 02 FB | 	rdlong	local02, local02
362c4     F2 14 02 F6 | 	mov	arg02, objptr
362c8     F2 2C 02 F6 | 	mov	local04, objptr
362cc     15 E5 01 F6 | 	mov	objptr, local03
362d0     2D 28 62 FD | 	call	local02
362d4     16 E5 01 F6 | 	mov	objptr, local04
362d8                 | '     return (i < 0) ? 0 : 1;
362d8     00 FA 55 F2 | 	cmps	result1, #0 wc
362dc     00 26 06 C6 |  if_b	mov	local01, #0
362e0     01 26 06 36 |  if_ae	mov	local01, #1
362e4     13 FB 01 F6 | 	mov	result1, local01
362e8                 | LR__5350
362e8     A7 F0 03 F6 | 	mov	ptra, fp
362ec     B2 00 A0 FD | 	call	#popregs_
362f0                 | __struct__s_vfs_file_t_putchar_ret
362f0     2D 00 64 FD | 	ret
362f4                 | 
362f4                 | __struct__s_vfs_file_t_getchar
362f4     03 4A 05 F6 | 	mov	COUNT_, #3
362f8     A8 00 A0 FD | 	call	#pushregs_
362fc     20 E4 05 F1 | 	add	objptr, #32
36300     F2 12 0A FB | 	rdlong	arg01, objptr wz
36304     20 E4 85 F1 | 	sub	objptr, #32
36308     01 FA 65 A6 |  if_e	neg	result1, #1
3630c     38 00 90 AD |  if_e	jmp	#LR__5360
36310                 | '     return getcf(__this);
36310     20 E4 05 F1 | 	add	objptr, #32
36314     F2 26 02 FB | 	rdlong	local01, objptr
36318     13 29 02 F6 | 	mov	local02, local01
3631c     20 E4 85 F1 | 	sub	objptr, #32
36320     13 28 46 F7 | 	zerox	local02, #19
36324     14 26 46 F0 | 	shr	local01, #20
36328     02 26 66 F0 | 	shl	local01, #2
3632c     ED 26 02 F1 | 	add	local01, __methods__
36330     13 27 02 FB | 	rdlong	local01, local01
36334     F2 12 02 F6 | 	mov	arg01, objptr
36338     F2 2A 02 F6 | 	mov	local03, objptr
3633c     14 E5 01 F6 | 	mov	objptr, local02
36340     2D 26 62 FD | 	call	local01
36344     15 E5 01 F6 | 	mov	objptr, local03
36348                 | LR__5360
36348     A7 F0 03 F6 | 	mov	ptra, fp
3634c     B2 00 A0 FD | 	call	#popregs_
36350                 | __struct__s_vfs_file_t_getchar_ret
36350     2D 00 64 FD | 	ret
36354                 | 
36354                 | __struct___bas_wrap_sender_tx
36354     03 4A 05 F6 | 	mov	COUNT_, #3
36358     A8 00 A0 FD | 	call	#pushregs_
3635c     F2 26 02 FB | 	rdlong	local01, objptr
36360     13 29 02 F6 | 	mov	local02, local01
36364     13 26 46 F7 | 	zerox	local01, #19
36368     14 28 46 F0 | 	shr	local02, #20
3636c     02 28 66 F0 | 	shl	local02, #2
36370     ED 28 02 F1 | 	add	local02, __methods__
36374     14 29 02 FB | 	rdlong	local02, local02
36378     F2 2A 02 F6 | 	mov	local03, objptr
3637c     13 E5 01 F6 | 	mov	objptr, local01
36380     2D 28 62 FD | 	call	local02
36384     15 E5 01 F6 | 	mov	objptr, local03
36388     01 FA 05 F6 | 	mov	result1, #1
3638c     A7 F0 03 F6 | 	mov	ptra, fp
36390     B2 00 A0 FD | 	call	#popregs_
36394                 | __struct___bas_wrap_sender_tx_ret
36394     2D 00 64 FD | 	ret
36398                 | 
36398                 | __struct___bas_wrap_sender_rx
36398     03 4A 05 F6 | 	mov	COUNT_, #3
3639c     A8 00 A0 FD | 	call	#pushregs_
363a0     04 E4 05 F1 | 	add	objptr, #4
363a4     F2 26 02 FB | 	rdlong	local01, objptr
363a8     13 29 02 F6 | 	mov	local02, local01
363ac     04 E4 85 F1 | 	sub	objptr, #4
363b0     13 28 46 F7 | 	zerox	local02, #19
363b4     14 26 46 F0 | 	shr	local01, #20
363b8     02 26 66 F0 | 	shl	local01, #2
363bc     ED 26 02 F1 | 	add	local01, __methods__
363c0     13 27 02 FB | 	rdlong	local01, local01
363c4     F2 2A 02 F6 | 	mov	local03, objptr
363c8     14 E5 01 F6 | 	mov	objptr, local02
363cc     2D 26 62 FD | 	call	local01
363d0     15 E5 01 F6 | 	mov	objptr, local03
363d4     A7 F0 03 F6 | 	mov	ptra, fp
363d8     B2 00 A0 FD | 	call	#popregs_
363dc                 | __struct___bas_wrap_sender_rx_ret
363dc     2D 00 64 FD | 	ret
363e0                 | 
363e0                 | __struct___bas_wrap_sender_close
363e0     03 4A 05 F6 | 	mov	COUNT_, #3
363e4     A8 00 A0 FD | 	call	#pushregs_
363e8     08 E4 05 F1 | 	add	objptr, #8
363ec     F2 26 02 FB | 	rdlong	local01, objptr
363f0     13 29 02 F6 | 	mov	local02, local01
363f4     08 E4 85 F1 | 	sub	objptr, #8
363f8     13 28 46 F7 | 	zerox	local02, #19
363fc     14 26 46 F0 | 	shr	local01, #20
36400     02 26 66 F0 | 	shl	local01, #2
36404     ED 26 02 F1 | 	add	local01, __methods__
36408     13 27 02 FB | 	rdlong	local01, local01
3640c     F2 2A 02 F6 | 	mov	local03, objptr
36410     14 E5 01 F6 | 	mov	objptr, local02
36414     2D 26 62 FD | 	call	local01
36418     15 E5 01 F6 | 	mov	objptr, local03
3641c     A7 F0 03 F6 | 	mov	ptra, fp
36420     B2 00 A0 FD | 	call	#popregs_
36424                 | __struct___bas_wrap_sender_close_ret
36424     2D 00 64 FD | 	ret
36428                 | 
36428                 | LR__5370
36428     2F          | 	byte	"/"
36429     00          | 	byte	0
3642a                 | LR__5371
3642a     69 6E 66    | 	byte	"inf"
3642d     00          | 	byte	0
3642e                 | LR__5372
3642e     6E 61 6E    | 	byte	"nan"
36431     00          | 	byte	0
36432                 | LR__5373
36432                 | 	byte	
36432     00          | 	byte	0
36433                 | LR__5374
36433                 | 	byte	
36433     00          | 	byte	0
36434                 | LR__5375
36434                 | 	byte	
36434     00          | 	byte	0
36435                 | LR__5376
36435                 | 	byte	
36435     00          | 	byte	0
36436                 | LR__5377
36436                 | 	byte	
36436     00          | 	byte	0
36437                 | LR__5378
36437                 | 	byte	
36437     00          | 	byte	0
36438                 | LR__5379
36438                 | 	byte	
36438     00          | 	byte	0
36439                 | LR__5380
36439                 | 	byte	
36439     00          | 	byte	0
3643a                 | LR__5381
3643a     00          | 	byte	0
3643b     00          | 	byte	0
3643c                 | LR__5382
3643c     00          | 	byte	0
3643d     00          | 	byte	0
3643e                 | LR__5383
3643e     00          | 	byte	0
3643f     00          | 	byte	0
36440                 | LR__5384
36440     20 21 21 21 
36444     20 63 6F 72 
36448     72 75 70 74 
3644c     65 64 20 68 
36450     65 61 70 3F 
36454     3F 3F 20 21 
36458     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3645b     00          | 	byte	0
3645c                 | LR__5385
3645c     20 21 21 21 
36460     20 6F 75 74 
36464     20 6F 66 20 
36468     68 65 61 70 
3646c     20 6D 65 6D 
36470     6F 72 79 20 
36474     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
36478     00          | 	byte	0
36479                 | LR__5386
36479     20 21 21 21 
3647d     20 63 6F 72 
36481     72 75 70 74 
36485     65 64 20 68 
36489     65 61 70 20 
3648d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
36491     00          | 	byte	0
36492                 | LR__5387
36492     00          | 	byte	0
36493     00          | 	byte	0
36494                 | LR__5388
36494     2E          | 	byte	"."
36495     00          | 	byte	0
36496                 | LR__5389
36496     00          | 	byte	0
36497     00          | 	byte	0
36498                 | LR__5390
36498     00          | 	byte	0
36499     00          | 	byte	0
3649a                 | LR__5391
3649a     00          | 	byte	0
3649b     00          | 	byte	0
3649c                 | LR__5392
3649c     2A 3A 3C 3E 
364a0     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
364a4     00          | 	byte	0
364a5                 | LR__5393
364a5     2B 2C 3B 3D 
364a9     5B 5D       | 	byte	"+,;=[]"
364ab     00          | 	byte	0
364ac                 | LR__5394
364ac     46 41 54 33 
364b0     32 20 20 20 | 	byte	"FAT32   "
364b4     00          | 	byte	0
364b5                 | LR__5395
364b5     54 5A       | 	byte	"TZ"
364b7     00          | 	byte	0
364b8                 | LR__5396
364b8     00          | 	byte	0
364b9     00          | 	byte	0
364ba                 | LR__5397
364ba                 | 	byte	
364ba     00          | 	byte	0
364bb                 | LR__5398
364bb                 | 	byte	
364bb     00          | 	byte	0
364bc                 | LR__5399
364bc                 | 	byte	
364bc     00          | 	byte	0
364bd                 | LR__5400
364bd                 | 	byte	
364bd     00          | 	byte	0
364be                 | LR__5401
364be     22          | 	byte	34
364bf     00          | 	byte	0
364c0                 | LR__5402
364c0     22          | 	byte	34
364c1     00          | 	byte	0
364c2                 | LR__5403
364c2     3A          | 	byte	":"
364c3     00          | 	byte	0
364c4                 | LR__5404
364c4                 | 	byte	
364c4     00          | 	byte	0
364c5                 | LR__5405
364c5                 | 	byte	
364c5     00          | 	byte	0
364c6                 | LR__5406
364c6                 | 	byte	
364c6     00          | 	byte	0
364c7                 | LR__5407
364c7                 | 	byte	
364c7     00          | 	byte	0
364c8                 | LR__5408
364c8                 | 	byte	
364c8     00          | 	byte	0
364c9                 | LR__5409
364c9                 | 	byte	
364c9     00          | 	byte	0
364ca                 | LR__5410
364ca                 | 	byte	
364ca     00          | 	byte	0
364cb                 | LR__5411
364cb     30          | 	byte	"0"
364cc     00          | 	byte	0
364cd                 | LR__5412
364cd     22          | 	byte	34
364ce     00          | 	byte	0
364cf                 | LR__5413
364cf     22          | 	byte	34
364d0     00          | 	byte	0
364d1                 | LR__5414
364d1     22          | 	byte	34
364d2     00          | 	byte	0
364d3                 | LR__5415
364d3     22          | 	byte	34
364d4     00          | 	byte	0
364d5                 | LR__5416
364d5     22          | 	byte	34
364d6     00          | 	byte	0
364d7                 | LR__5417
364d7     3E          | 	byte	">"
364d8     00          | 	byte	0
364d9                 | LR__5418
364d9     3C          | 	byte	"<"
364da     00          | 	byte	0
364db                 | LR__5419
364db     2B          | 	byte	"+"
364dc     00          | 	byte	0
364dd                 | LR__5420
364dd     2D          | 	byte	"-"
364de     00          | 	byte	0
364df                 | LR__5421
364df     2A          | 	byte	"*"
364e0     00          | 	byte	0
364e1                 | LR__5422
364e1     2F          | 	byte	"/"
364e2     00          | 	byte	0
364e3                 | LR__5423
364e3     5E          | 	byte	"^"
364e4     00          | 	byte	0
364e5                 | LR__5424
364e5     3D          | 	byte	"="
364e6     00          | 	byte	0
364e7                 | LR__5425
364e7     2B          | 	byte	"+"
364e8     00          | 	byte	0
364e9                 | LR__5426
364e9     2B          | 	byte	"+"
364ea     00          | 	byte	0
364eb                 | LR__5427
364eb     2D          | 	byte	"-"
364ec     00          | 	byte	0
364ed                 | LR__5428
364ed     2D          | 	byte	"-"
364ee     00          | 	byte	0
364ef                 | LR__5429
364ef     3C          | 	byte	"<"
364f0     00          | 	byte	0
364f1                 | LR__5430
364f1     3E          | 	byte	">"
364f2     00          | 	byte	0
364f3                 | LR__5431
364f3     22          | 	byte	34
364f4     00          | 	byte	0
364f5                 | LR__5432
364f5     22          | 	byte	34
364f6     00          | 	byte	0
364f7                 | LR__5433
364f7     65 6C 73 65 | 	byte	"else"
364fb     00          | 	byte	0
364fc                 | LR__5434
364fc     74 68 65 6E | 	byte	"then"
36500     00          | 	byte	0
36501                 | LR__5435
36501     3F          | 	byte	"?"
36502     00          | 	byte	0
36503                 | LR__5436
36503     3F          | 	byte	"?"
36504     00          | 	byte	0
36505                 | LR__5437
36505     2E          | 	byte	"."
36506     00          | 	byte	0
36507                 | LR__5438
36507     6D 6F 75 73 
3650b     65          | 	byte	"mouse"
3650c     00          | 	byte	0
3650d                 | LR__5439
3650d     63 75 72 73 
36511     6F 72       | 	byte	"cursor"
36513     00          | 	byte	0
36514                 | LR__5440
36514     63 6C 69 63 
36518     6B          | 	byte	"click"
36519     00          | 	byte	0
3651a                 | LR__5441
3651a     6F 6E       | 	byte	"on"
3651c     00          | 	byte	0
3651d                 | LR__5442
3651d     31          | 	byte	"1"
3651e     00          | 	byte	0
3651f                 | LR__5443
3651f     6F 66 66    | 	byte	"off"
36522     00          | 	byte	0
36523                 | LR__5444
36523     30          | 	byte	"0"
36524     00          | 	byte	0
36525                 | LR__5445
36525     6D 6F 64 65 | 	byte	"mode"
36529     00          | 	byte	0
3652a                 | LR__5446
3652a     6D 2E       | 	byte	"m."
3652c     00          | 	byte	0
3652d                 | LR__5447
3652d     61 74 61 72 
36531     69          | 	byte	"atari"
36532     00          | 	byte	0
36533                 | LR__5448
36533     30          | 	byte	"0"
36534     00          | 	byte	0
36535                 | LR__5449
36535     70 63 5F 61 
36539     6D 62 65 72 | 	byte	"pc_amber"
3653d     00          | 	byte	0
3653e                 | LR__5450
3653e     31          | 	byte	"1"
3653f     00          | 	byte	0
36540                 | LR__5451
36540     70 63 5F 67 
36544     72 65 65 6E | 	byte	"pc_green"
36548     00          | 	byte	0
36549                 | LR__5452
36549     32          | 	byte	"2"
3654a     00          | 	byte	0
3654b                 | LR__5453
3654b     70 63 5F 77 
3654f     68 69 74 65 | 	byte	"pc_white"
36553     00          | 	byte	0
36554                 | LR__5454
36554     33          | 	byte	"3"
36555     00          | 	byte	0
36556                 | LR__5455
36556     73 74       | 	byte	"st"
36558     00          | 	byte	0
36559                 | LR__5456
36559     34          | 	byte	"4"
3655a     00          | 	byte	0
3655b                 | LR__5457
3655b                 | 	byte	
3655b     00          | 	byte	0
3655c                 | LR__5458
3655c     6C 6F 61 64 | 	byte	"load"
36560     00          | 	byte	0
36561                 | LR__5459
36561     73 61 76 65 | 	byte	"save"
36565     00          | 	byte	0
36566                 | LR__5460
36566     62 72 75 6E | 	byte	"brun"
3656a     00          | 	byte	0
3656b                 | LR__5461
3656b     72 75 6E    | 	byte	"run"
3656e     00          | 	byte	0
3656f                 | LR__5462
3656f     6C 6F 2E    | 	byte	"lo."
36572     00          | 	byte	0
36573                 | LR__5463
36573     73 2E       | 	byte	"s."
36575     00          | 	byte	0
36576                 | LR__5464
36576     62 72 2E    | 	byte	"br."
36579     00          | 	byte	0
3657a                 | LR__5465
3657a     65 6E 74 65 
3657e     72          | 	byte	"enter"
3657f     00          | 	byte	0
36580                 | LR__5466
36580     65 2E       | 	byte	"e."
36582     00          | 	byte	0
36583                 | LR__5467
36583     24          | 	byte	"$"
36584     00          | 	byte	0
36585                 | LR__5468
36585     64 65 6C 65 
36589     74 65       | 	byte	"delete"
3658b     00          | 	byte	0
3658c                 | LR__5469
3658c     6D 6B 64 69 
36590     72          | 	byte	"mkdir"
36591     00          | 	byte	0
36592                 | LR__5470
36592     24          | 	byte	"$"
36593     00          | 	byte	0
36594                 | LR__5471
36594     63 6F 70 79 | 	byte	"copy"
36598     00          | 	byte	0
36599                 | LR__5472
36599     24          | 	byte	"$"
3659a     00          | 	byte	0
3659b                 | LR__5473
3659b     63 6F 70 79 | 	byte	"copy"
3659f     00          | 	byte	0
365a0                 | LR__5474
365a0     24          | 	byte	"$"
365a1     00          | 	byte	0
365a2                 | LR__5475
365a2     63 64       | 	byte	"cd"
365a4     00          | 	byte	0
365a5                 | LR__5476
365a5     63 64 2E    | 	byte	"cd."
365a8     00          | 	byte	0
365a9                 | LR__5477
365a9     2E          | 	byte	"."
365aa     00          | 	byte	0
365ab                 | LR__5478
365ab     2E 2E       | 	byte	".."
365ad     00          | 	byte	0
365ae                 | LR__5479
365ae     63 64       | 	byte	"cd"
365b0     00          | 	byte	0
365b1                 | LR__5480
365b1     2F          | 	byte	"/"
365b2     00          | 	byte	0
365b3                 | LR__5481
365b3                 | 	byte	
365b3     00          | 	byte	0
365b4                 | LR__5482
365b4                 | 	byte	
365b4     00          | 	byte	0
365b5                 | LR__5483
365b5                 | 	byte	
365b5     00          | 	byte	0
365b6                 | LR__5484
365b6                 | 	byte	
365b6     00          | 	byte	0
365b7                 | LR__5485
365b7                 | 	byte	
365b7     00          | 	byte	0
365b8                 | LR__5486
365b8     52 65 61 64 
365bc     79          | 	byte	"Ready"
365bd     00          | 	byte	0
365be                 | LR__5487
365be     2B          | 	byte	"+"
365bf     00          | 	byte	0
365c0                 | LR__5488
365c0     2D          | 	byte	"-"
365c1     00          | 	byte	0
365c2                 | LR__5489
365c2     6F 72       | 	byte	"or"
365c4     00          | 	byte	0
365c5                 | LR__5490
365c5     78 6F 72    | 	byte	"xor"
365c8     00          | 	byte	0
365c9                 | LR__5491
365c9     2A          | 	byte	"*"
365ca     00          | 	byte	0
365cb                 | LR__5492
365cb     2F          | 	byte	"/"
365cc     00          | 	byte	0
365cd                 | LR__5493
365cd     61 6E 64    | 	byte	"and"
365d0     00          | 	byte	0
365d1                 | LR__5494
365d1     64 69 76    | 	byte	"div"
365d4     00          | 	byte	0
365d5                 | LR__5495
365d5     6D 6F 64    | 	byte	"mod"
365d8     00          | 	byte	0
365d9                 | LR__5496
365d9     73 68 6C    | 	byte	"shl"
365dc     00          | 	byte	0
365dd                 | LR__5497
365dd     73 68 72    | 	byte	"shr"
365e0     00          | 	byte	0
365e1                 | LR__5498
365e1     5E          | 	byte	"^"
365e2     00          | 	byte	0
365e3                 | LR__5499
365e3     6E 6F 74    | 	byte	"not"
365e6     00          | 	byte	0
365e7                 | LR__5500
365e7     40          | 	byte	"@"
365e8     00          | 	byte	0
365e9                 | LR__5501
365e9     3D          | 	byte	"="
365ea     00          | 	byte	0
365eb                 | LR__5502
365eb     3E 3D       | 	byte	">="
365ed     00          | 	byte	0
365ee                 | LR__5503
365ee     3C 3D       | 	byte	"<="
365f0     00          | 	byte	0
365f1                 | LR__5504
365f1     3C          | 	byte	"<"
365f2     00          | 	byte	0
365f3                 | LR__5505
365f3     3E          | 	byte	">"
365f4     00          | 	byte	0
365f5                 | LR__5506
365f5     3C 3E       | 	byte	"<>"
365f7     00          | 	byte	0
365f8                 | LR__5507
365f8     2B 2B       | 	byte	"++"
365fa     00          | 	byte	0
365fb                 | LR__5508
365fb     2D 2D       | 	byte	"--"
365fd     00          | 	byte	0
365fe                 | LR__5509
365fe     23          | 	byte	"#"
365ff     00          | 	byte	0
36600                 | LR__5510
36600     30          | 	byte	"0"
36601     00          | 	byte	0
36602                 | LR__5511
36602     39          | 	byte	"9"
36603     00          | 	byte	0
36604                 | LR__5512
36604     23 72 65 61 
36608     64          | 	byte	"#read"
36609     00          | 	byte	0
3660a                 | LR__5513
3660a     23 77 72 69 
3660e     74 65       | 	byte	"#write"
36610     00          | 	byte	0
36611                 | LR__5514
36611     23 61 70 70 
36615     65 6E 64    | 	byte	"#append"
36618     00          | 	byte	0
36619                 | LR__5515
36619     23          | 	byte	"#"
3661a     00          | 	byte	0
3661b                 | LR__5516
3661b     23          | 	byte	"#"
3661c     00          | 	byte	0
3661d                 | LR__5517
3661d     2D          | 	byte	"-"
3661e     00          | 	byte	0
3661f                 | LR__5518
3661f     30          | 	byte	"0"
36620     00          | 	byte	0
36621                 | LR__5519
36621     63          | 	byte	"c"
36622     00          | 	byte	0
36623                 | LR__5520
36623     63 23       | 	byte	"c#"
36625     00          | 	byte	0
36626                 | LR__5521
36626     64          | 	byte	"d"
36627     00          | 	byte	0
36628                 | LR__5522
36628     64 23       | 	byte	"d#"
3662a     00          | 	byte	0
3662b                 | LR__5523
3662b     65          | 	byte	"e"
3662c     00          | 	byte	0
3662d                 | LR__5524
3662d     66          | 	byte	"f"
3662e     00          | 	byte	0
3662f                 | LR__5525
3662f     66 23       | 	byte	"f#"
36631     00          | 	byte	0
36632                 | LR__5526
36632     67          | 	byte	"g"
36633     00          | 	byte	0
36634                 | LR__5527
36634     67 23       | 	byte	"g#"
36636     00          | 	byte	0
36637                 | LR__5528
36637     61          | 	byte	"a"
36638     00          | 	byte	0
36639                 | LR__5529
36639     61 23       | 	byte	"a#"
3663b     00          | 	byte	0
3663c                 | LR__5530
3663c     68          | 	byte	"h"
3663d     00          | 	byte	0
3663e                 | LR__5531
3663e     62          | 	byte	"b"
3663f     00          | 	byte	0
36640                 | LR__5532
36640     2B          | 	byte	"+"
36641     00          | 	byte	0
36642                 | LR__5533
36642     2D          | 	byte	"-"
36643     00          | 	byte	0
36644                 | LR__5534
36644     3D          | 	byte	"="
36645     00          | 	byte	0
36646                 | LR__5535
36646     2C          | 	byte	","
36647     00          | 	byte	0
36648                 | LR__5536
36648     2A          | 	byte	"*"
36649     00          | 	byte	0
3664a                 | LR__5537
3664a     2F          | 	byte	"/"
3664b     00          | 	byte	0
3664c                 | LR__5538
3664c     3B          | 	byte	";"
3664d     00          | 	byte	0
3664e                 | LR__5539
3664e     22          | 	byte	34
3664f     00          | 	byte	0
36650                 | LR__5540
36650     5E          | 	byte	"^"
36651     00          | 	byte	0
36652                 | LR__5541
36652     29          | 	byte	")"
36653     00          | 	byte	0
36654                 | LR__5542
36654     28          | 	byte	"("
36655     00          | 	byte	0
36656                 | LR__5543
36656     3A          | 	byte	":"
36657     00          | 	byte	0
36658                 | LR__5544
36658     20          | 	byte	" "
36659     00          | 	byte	0
3665a                 | LR__5545
3665a     3E          | 	byte	">"
3665b     00          | 	byte	0
3665c                 | LR__5546
3665c     3C          | 	byte	"<"
3665d     00          | 	byte	0
3665e                 | LR__5547
3665e     3D          | 	byte	"="
3665f     00          | 	byte	0
36660                 | LR__5548
36660     62 65 65 70 | 	byte	"beep"
36664     00          | 	byte	0
36665                 | LR__5549
36665     62 2E       | 	byte	"b."
36667     00          | 	byte	0
36668                 | LR__5550
36668     62 6C 69 74 | 	byte	"blit"
3666c     00          | 	byte	0
3666d                 | LR__5551
3666d     62 6F 78    | 	byte	"box"
36670     00          | 	byte	0
36671                 | LR__5552
36671     62 72 75 6E | 	byte	"brun"
36675     00          | 	byte	0
36676                 | LR__5553
36676     62 72 2E    | 	byte	"br."
36679     00          | 	byte	0
3667a                 | LR__5554
3667a     63 64       | 	byte	"cd"
3667c     00          | 	byte	0
3667d                 | LR__5555
3667d     63 68 61 6E 
36681     67 65 66 72 
36685     65 71       | 	byte	"changefreq"
36687     00          | 	byte	0
36688                 | LR__5556
36688     63 66 2E    | 	byte	"cf."
3668b     00          | 	byte	0
3668c                 | LR__5557
3668c     63 68 61 6E 
36690     67 65 70 61 
36694     6E          | 	byte	"changepan"
36695     00          | 	byte	0
36696                 | LR__5558
36696     63 70 2E    | 	byte	"cp."
36699     00          | 	byte	0
3669a                 | LR__5559
3669a     63 68 61 6E 
3669e     67 65 76 6F 
366a2     6C          | 	byte	"changevol"
366a3     00          | 	byte	0
366a4                 | LR__5560
366a4     63 76 2E    | 	byte	"cv."
366a7     00          | 	byte	0
366a8                 | LR__5561
366a8     63 68 61 6E 
366ac     67 65 77 61 
366b0     76 65       | 	byte	"changewave"
366b2     00          | 	byte	0
366b3                 | LR__5562
366b3     63 77 2E    | 	byte	"cw."
366b6     00          | 	byte	0
366b7                 | LR__5563
366b7     63 69 72 63 
366bb     6C 65       | 	byte	"circle"
366bd     00          | 	byte	0
366be                 | LR__5564
366be     63 69 2E    | 	byte	"ci."
366c1     00          | 	byte	0
366c2                 | LR__5565
366c2     63 6C 69 63 
366c6     6B          | 	byte	"click"
366c7     00          | 	byte	0
366c8                 | LR__5566
366c8     63 6C 6F 73 
366cc     65          | 	byte	"close"
366cd     00          | 	byte	0
366ce                 | LR__5567
366ce     63 6C 73    | 	byte	"cls"
366d1     00          | 	byte	0
366d2                 | LR__5568
366d2     63 6F 67 73 
366d6     74 6F 70    | 	byte	"cogstop"
366d9     00          | 	byte	0
366da                 | LR__5569
366da     63 6F 6C 6F 
366de     72          | 	byte	"color"
366df     00          | 	byte	0
366e0                 | LR__5570
366e0     63 2E       | 	byte	"c."
366e2     00          | 	byte	0
366e3                 | LR__5571
366e3     63 6F 70 79 | 	byte	"copy"
366e7     00          | 	byte	0
366e8                 | LR__5572
366e8     63 75 72 73 
366ec     6F 72       | 	byte	"cursor"
366ee     00          | 	byte	0
366ef                 | LR__5573
366ef     64 61 74 61 | 	byte	"data"
366f3     00          | 	byte	0
366f4                 | LR__5574
366f4     64 65 66 73 
366f8     6E 64       | 	byte	"defsnd"
366fa     00          | 	byte	0
366fb                 | LR__5575
366fb     64 65 66 65 
366ff     6E 76       | 	byte	"defenv"
36701     00          | 	byte	0
36702                 | LR__5576
36702     64 65 66 73 
36706     70 72 69 74 
3670a     65          | 	byte	"defsprite"
3670b     00          | 	byte	0
3670c                 | LR__5577
3670c     64 73 2E    | 	byte	"ds."
3670f     00          | 	byte	0
36710                 | LR__5578
36710     64 65 67    | 	byte	"deg"
36713     00          | 	byte	0
36714                 | LR__5579
36714     64 65 6C 65 
36718     74 65       | 	byte	"delete"
3671a     00          | 	byte	0
3671b                 | LR__5580
3671b     64 69 6D    | 	byte	"dim"
3671e     00          | 	byte	0
3671f                 | LR__5581
3671f     64 69 72    | 	byte	"dir"
36722     00          | 	byte	0
36723                 | LR__5582
36723     64 70 6F 6B 
36727     65          | 	byte	"dpoke"
36728     00          | 	byte	0
36729                 | LR__5583
36729     64 72 61 77 | 	byte	"draw"
3672d     00          | 	byte	0
3672e                 | LR__5584
3672e     64 72 61 77 
36732     74 6F       | 	byte	"drawto"
36734     00          | 	byte	0
36735                 | LR__5585
36735     64 72 2E    | 	byte	"dr."
36738     00          | 	byte	0
36739                 | LR__5586
36739     65 6C 73 65 | 	byte	"else"
3673d     00          | 	byte	0
3673e                 | LR__5587
3673e     65 6E 64    | 	byte	"end"
36741     00          | 	byte	0
36742                 | LR__5588
36742     65 6E 74 65 
36746     72          | 	byte	"enter"
36747     00          | 	byte	0
36748                 | LR__5589
36748     65 2E       | 	byte	"e."
3674a     00          | 	byte	0
3674b                 | LR__5590
3674b     66 63 69 72 
3674f     63 6C 65    | 	byte	"fcircle"
36752     00          | 	byte	0
36753                 | LR__5591
36753     66 63 2E    | 	byte	"fc."
36756     00          | 	byte	0
36757                 | LR__5592
36757     66 69 6C 6C | 	byte	"fill"
3675b     00          | 	byte	0
3675c                 | LR__5593
3675c     66 69 2E    | 	byte	"fi."
3675f     00          | 	byte	0
36760                 | LR__5594
36760     66 6F 6E 74 | 	byte	"font"
36764     00          | 	byte	0
36765                 | LR__5595
36765     66 6F 72    | 	byte	"for"
36768     00          | 	byte	0
36769                 | LR__5596
36769     66 2E       | 	byte	"f."
3676b     00          | 	byte	0
3676c                 | LR__5597
3676c     66 72 61 6D 
36770     65          | 	byte	"frame"
36771     00          | 	byte	0
36772                 | LR__5598
36772     66 72 2E    | 	byte	"fr."
36775     00          | 	byte	0
36776                 | LR__5599
36776     67 65 74    | 	byte	"get"
36779     00          | 	byte	0
3677a                 | LR__5600
3677a     67 6F 73 75 
3677e     62          | 	byte	"gosub"
3677f     00          | 	byte	0
36780                 | LR__5601
36780     67 6F 74 6F | 	byte	"goto"
36784     00          | 	byte	0
36785                 | LR__5602
36785     67 2E       | 	byte	"g."
36787     00          | 	byte	0
36788                 | LR__5603
36788     69 66       | 	byte	"if"
3678a     00          | 	byte	0
3678b                 | LR__5604
3678b     69 6E 6B    | 	byte	"ink"
3678e     00          | 	byte	0
3678f                 | LR__5605
3678f     69 2E       | 	byte	"i."
36791     00          | 	byte	0
36792                 | LR__5606
36792     69 6E 70 75 
36796     74          | 	byte	"input"
36797     00          | 	byte	0
36798                 | LR__5607
36798     6C 69 73 74 | 	byte	"list"
3679c     00          | 	byte	0
3679d                 | LR__5608
3679d     6C 2E       | 	byte	"l."
3679f     00          | 	byte	0
367a0                 | LR__5609
367a0     6C 6F 61 64 | 	byte	"load"
367a4     00          | 	byte	0
367a5                 | LR__5610
367a5     6C 6F 2E    | 	byte	"lo."
367a8     00          | 	byte	0
367a9                 | LR__5611
367a9     6C 70 6F 6B 
367ad     65          | 	byte	"lpoke"
367ae     00          | 	byte	0
367af                 | LR__5612
367af     6D 6B 64 69 
367b3     72          | 	byte	"mkdir"
367b4     00          | 	byte	0
367b5                 | LR__5613
367b5     6D 6F 64 65 | 	byte	"mode"
367b9     00          | 	byte	0
367ba                 | LR__5614
367ba     6D 2E       | 	byte	"m."
367bc     00          | 	byte	0
367bd                 | LR__5615
367bd     6D 6F 75 73 
367c1     65          | 	byte	"mouse"
367c2     00          | 	byte	0
367c3                 | LR__5616
367c3     6E 65 77    | 	byte	"new"
367c6     00          | 	byte	0
367c7                 | LR__5617
367c7     6E 65 78 74 | 	byte	"next"
367cb     00          | 	byte	0
367cc                 | LR__5618
367cc     6E 2E       | 	byte	"n."
367ce     00          | 	byte	0
367cf                 | LR__5619
367cf     6F 6E       | 	byte	"on"
367d1     00          | 	byte	0
367d2                 | LR__5620
367d2     6F 70 65 6E | 	byte	"open"
367d6     00          | 	byte	0
367d7                 | LR__5621
367d7     70 61 70 65 
367db     72          | 	byte	"paper"
367dc     00          | 	byte	0
367dd                 | LR__5622
367dd     70 61 2E    | 	byte	"pa."
367e0     00          | 	byte	0
367e1                 | LR__5623
367e1     70 69 6E 66 
367e5     6C 6F 61 74 | 	byte	"pinfloat"
367e9     00          | 	byte	0
367ea                 | LR__5624
367ea     70 69 6E 68 
367ee     69          | 	byte	"pinhi"
367ef     00          | 	byte	0
367f0                 | LR__5625
367f0     70 69 6E 6C 
367f4     6F          | 	byte	"pinlo"
367f5     00          | 	byte	0
367f6                 | LR__5626
367f6     70 69 6E 73 
367fa     74 61 72 74 | 	byte	"pinstart"
367fe     00          | 	byte	0
367ff                 | LR__5627
367ff     70 69 6E 74 
36803     6F 67 67 6C 
36807     65          | 	byte	"pintoggle"
36808     00          | 	byte	0
36809                 | LR__5628
36809     70 69 6E 77 
3680d     72 69 74 65 | 	byte	"pinwrite"
36811     00          | 	byte	0
36812                 | LR__5629
36812     70 6C 61 79 | 	byte	"play"
36816     00          | 	byte	0
36817                 | LR__5630
36817     70 2E       | 	byte	"p."
36819     00          | 	byte	0
3681a                 | LR__5631
3681a     70 6C 61 79 
3681e     73 61 6D 70 
36822     6C 65       | 	byte	"playsample"
36824     00          | 	byte	0
36825                 | LR__5632
36825     70 6C 6F 74 | 	byte	"plot"
36829     00          | 	byte	0
3682a                 | LR__5633
3682a     70 6C 2E    | 	byte	"pl."
3682d     00          | 	byte	0
3682e                 | LR__5634
3682e     70 6F 6B 65 | 	byte	"poke"
36832     00          | 	byte	0
36833                 | LR__5635
36833     70 6F 70    | 	byte	"pop"
36836     00          | 	byte	0
36837                 | LR__5636
36837     70 6F 73 69 
3683b     74 69 6F 6E | 	byte	"position"
3683f     00          | 	byte	0
36840                 | LR__5637
36840     70 6F 73 2E | 	byte	"pos."
36844     00          | 	byte	0
36845                 | LR__5638
36845     70 72 69 6E 
36849     74          | 	byte	"print"
3684a     00          | 	byte	0
3684b                 | LR__5639
3684b     3F          | 	byte	"?"
3684c     00          | 	byte	0
3684d                 | LR__5640
3684d     70 75 74    | 	byte	"put"
36850     00          | 	byte	0
36851                 | LR__5641
36851     72 61 64    | 	byte	"rad"
36854     00          | 	byte	0
36855                 | LR__5642
36855     72 65 61 64 | 	byte	"read"
36859     00          | 	byte	0
3685a                 | LR__5643
3685a     72 65 6C 65 
3685e     61 73 65    | 	byte	"release"
36861     00          | 	byte	0
36862                 | LR__5644
36862     72 65 6D    | 	byte	"rem"
36865     00          | 	byte	0
36866                 | LR__5645
36866     27          | 	byte	"'"
36867     00          | 	byte	0
36868                 | LR__5646
36868     72 65 73 74 
3686c     6F 72 65    | 	byte	"restore"
3686f     00          | 	byte	0
36870                 | LR__5647
36870     72 65 74 75 
36874     72 6E       | 	byte	"return"
36876     00          | 	byte	0
36877                 | LR__5648
36877     72 75 6E    | 	byte	"run"
3687a     00          | 	byte	0
3687b                 | LR__5649
3687b     73 61 76 65 | 	byte	"save"
3687f     00          | 	byte	0
36880                 | LR__5650
36880     73 2E       | 	byte	"s."
36882     00          | 	byte	0
36883                 | LR__5651
36883     73 65 74 64 
36887     65 6C 61 79 | 	byte	"setdelay"
3688b     00          | 	byte	0
3688c                 | LR__5652
3688c     73 64 2E    | 	byte	"sd."
3688f     00          | 	byte	0
36890                 | LR__5653
36890     73 65 74 65 
36894     6E 76       | 	byte	"setenv"
36896     00          | 	byte	0
36897                 | LR__5654
36897     73 65 2E    | 	byte	"se."
3689a     00          | 	byte	0
3689b                 | LR__5655
3689b     73 65 74 6C 
3689f     65 6E       | 	byte	"setlen"
368a1     00          | 	byte	0
368a2                 | LR__5656
368a2     73 6C 2E    | 	byte	"sl."
368a5     00          | 	byte	0
368a6                 | LR__5657
368a6     73 65 74 70 
368aa     61 6E       | 	byte	"setpan"
368ac     00          | 	byte	0
368ad                 | LR__5658
368ad     73 70 2E    | 	byte	"sp."
368b0     00          | 	byte	0
368b1                 | LR__5659
368b1     73 65 74 73 
368b5     75 73 74 61 
368b9     69 6E       | 	byte	"setsustain"
368bb     00          | 	byte	0
368bc                 | LR__5660
368bc     73 73 2E    | 	byte	"ss."
368bf     00          | 	byte	0
368c0                 | LR__5661
368c0     73 65 74 76 
368c4     6F 6C       | 	byte	"setvol"
368c6     00          | 	byte	0
368c7                 | LR__5662
368c7     73 76 2E    | 	byte	"sv."
368ca     00          | 	byte	0
368cb                 | LR__5663
368cb     73 65 74 77 
368cf     61 76 65    | 	byte	"setwave"
368d2     00          | 	byte	0
368d3                 | LR__5664
368d3     73 77 2E    | 	byte	"sw."
368d6     00          | 	byte	0
368d7                 | LR__5665
368d7     73 65 74 77 
368db     61 76       | 	byte	"setwav"
368dd     00          | 	byte	0
368de                 | LR__5666
368de     73 68 75 74 
368e2     75 70       | 	byte	"shutup"
368e4     00          | 	byte	0
368e5                 | LR__5667
368e5     73 68 2E    | 	byte	"sh."
368e8     00          | 	byte	0
368e9                 | LR__5668
368e9     73 6F 75 6E 
368ed     64          | 	byte	"sound"
368ee     00          | 	byte	0
368ef                 | LR__5669
368ef     73 6F 2E    | 	byte	"so."
368f2     00          | 	byte	0
368f3                 | LR__5670
368f3     73 70 72 69 
368f7     74 65       | 	byte	"sprite"
368f9     00          | 	byte	0
368fa                 | LR__5671
368fa     73 70 72 2E | 	byte	"spr."
368fe     00          | 	byte	0
368ff                 | LR__5672
368ff     74 68 65 6E | 	byte	"then"
36903     00          | 	byte	0
36904                 | LR__5673
36904     77 61 69 74 
36908     6D 73       | 	byte	"waitms"
3690a     00          | 	byte	0
3690b                 | LR__5674
3690b     77 2E       | 	byte	"w."
3690d     00          | 	byte	0
3690e                 | LR__5675
3690e     77 61 69 74 
36912     63 6C 6F 63 
36916     6B          | 	byte	"waitclock"
36917     00          | 	byte	0
36918                 | LR__5676
36918     77 63 2E    | 	byte	"wc."
3691b     00          | 	byte	0
3691c                 | LR__5677
3691c     77 61 69 74 
36920     76 62 6C    | 	byte	"waitvbl"
36923     00          | 	byte	0
36924                 | LR__5678
36924     77 76 2E    | 	byte	"wv."
36927     00          | 	byte	0
36928                 | LR__5679
36928     77 72 70 69 
3692c     6E          | 	byte	"wrpin"
3692d     00          | 	byte	0
3692e                 | LR__5680
3692e     77 78 70 69 
36932     6E          | 	byte	"wxpin"
36933     00          | 	byte	0
36934                 | LR__5681
36934     77 79 70 69 
36938     6E          | 	byte	"wypin"
36939     00          | 	byte	0
3693a                 | LR__5682
3693a     61 62 73    | 	byte	"abs"
3693d     00          | 	byte	0
3693e                 | LR__5683
3693e     61 63 6F 73 | 	byte	"acos"
36942     00          | 	byte	0
36943                 | LR__5684
36943     61 64 72    | 	byte	"adr"
36946     00          | 	byte	0
36947                 | LR__5685
36947     61 64 64 72 | 	byte	"addr"
3694b     00          | 	byte	0
3694c                 | LR__5686
3694c     61 73 63    | 	byte	"asc"
3694f     00          | 	byte	0
36950                 | LR__5687
36950     61 73 69 6E | 	byte	"asin"
36954     00          | 	byte	0
36955                 | LR__5688
36955     61 74 6E    | 	byte	"atn"
36958     00          | 	byte	0
36959                 | LR__5689
36959     62 69 6E 24 | 	byte	"bin$"
3695d     00          | 	byte	0
3695e                 | LR__5690
3695e     63 68 72 24 | 	byte	"chr$"
36962     00          | 	byte	0
36963                 | LR__5691
36963     63 6F 67 69 
36967     6E 69 74    | 	byte	"coginit"
3696a     00          | 	byte	0
3696b                 | LR__5692
3696b     63 6F 73    | 	byte	"cos"
3696e     00          | 	byte	0
3696f                 | LR__5693
3696f     64 70 65 65 
36973     6B          | 	byte	"dpeek"
36974     00          | 	byte	0
36975                 | LR__5694
36975     66 72 61 6D 
36979     65 62 75 66 | 	byte	"framebuf"
3697d     00          | 	byte	0
3697e                 | LR__5695
3697e     66 62 2E    | 	byte	"fb."
36981     00          | 	byte	0
36982                 | LR__5696
36982     66 72 65    | 	byte	"fre"
36985     00          | 	byte	0
36986                 | LR__5697
36986     67 65 74 70 
3698a     69 78 65 6C | 	byte	"getpixel"
3698e     00          | 	byte	0
3698f                 | LR__5698
3698f     67 65 2E    | 	byte	"ge."
36992     00          | 	byte	0
36993                 | LR__5699
36993     67 65 74 65 
36997     6E 76 73 75 
3699b     73 74 61 69 
3699f     6E          | 	byte	"getenvsustain"
369a0     00          | 	byte	0
369a1                 | LR__5700
369a1     67 65 74 6E 
369a5     6F 74 65 76 
369a9     61 6C 75 65 | 	byte	"getnotevalue"
369ad     00          | 	byte	0
369ae                 | LR__5701
369ae     67 65 74 74 
369b2     69 6D 65    | 	byte	"gettime"
369b5     00          | 	byte	0
369b6                 | LR__5702
369b6     68 65 78 24 | 	byte	"hex$"
369ba     00          | 	byte	0
369bb                 | LR__5703
369bb     69 6E 6B 65 
369bf     79 24       | 	byte	"inkey$"
369c1     00          | 	byte	0
369c2                 | LR__5704
369c2     69 6E 74    | 	byte	"int"
369c5     00          | 	byte	0
369c6                 | LR__5705
369c6     6C 65 66 74 
369ca     24          | 	byte	"left$"
369cb     00          | 	byte	0
369cc                 | LR__5706
369cc     6C 65 6E    | 	byte	"len"
369cf     00          | 	byte	0
369d0                 | LR__5707
369d0     6C 6F 67    | 	byte	"log"
369d3     00          | 	byte	0
369d4                 | LR__5708
369d4     6C 70 65 65 
369d8     6B          | 	byte	"lpeek"
369d9     00          | 	byte	0
369da                 | LR__5709
369da     6D 69 64 24 | 	byte	"mid$"
369de     00          | 	byte	0
369df                 | LR__5710
369df     6D 6F 75 73 
369e3     65 6B       | 	byte	"mousek"
369e5     00          | 	byte	0
369e6                 | LR__5711
369e6     6D 6F 75 73 
369ea     65 77       | 	byte	"mousew"
369ec     00          | 	byte	0
369ed                 | LR__5712
369ed     6D 6F 75 73 
369f1     65 78       | 	byte	"mousex"
369f3     00          | 	byte	0
369f4                 | LR__5713
369f4     6D 6F 75 73 
369f8     65 79       | 	byte	"mousey"
369fa     00          | 	byte	0
369fb                 | LR__5714
369fb     70 61 64 78 | 	byte	"padx"
369ff     00          | 	byte	0
36a00                 | LR__5715
36a00     70 61 64 79 | 	byte	"pady"
36a04     00          | 	byte	0
36a05                 | LR__5716
36a05     70 61 64 7A | 	byte	"padz"
36a09     00          | 	byte	0
36a0a                 | LR__5717
36a0a     70 61 64 72 
36a0e     78          | 	byte	"padrx"
36a0f     00          | 	byte	0
36a10                 | LR__5718
36a10     70 61 64 72 
36a14     79          | 	byte	"padry"
36a15     00          | 	byte	0
36a16                 | LR__5719
36a16     70 61 64 72 
36a1a     7A          | 	byte	"padrz"
36a1b     00          | 	byte	0
36a1c                 | LR__5720
36a1c     70 61 64 68 | 	byte	"padh"
36a20     00          | 	byte	0
36a21                 | LR__5721
36a21     70 65 65 6B | 	byte	"peek"
36a25     00          | 	byte	0
36a26                 | LR__5722
36a26     70 69 6E 72 
36a2a     65 61 64    | 	byte	"pinread"
36a2d     00          | 	byte	0
36a2e                 | LR__5723
36a2e     72 64 70 69 
36a32     6E          | 	byte	"rdpin"
36a33     00          | 	byte	0
36a34                 | LR__5724
36a34     72 69 67 68 
36a38     74 24       | 	byte	"right$"
36a3a     00          | 	byte	0
36a3b                 | LR__5725
36a3b     72 71 70 69 
36a3f     6E          | 	byte	"rqpin"
36a40     00          | 	byte	0
36a41                 | LR__5726
36a41     72 6F 75 6E 
36a45     64          | 	byte	"round"
36a46     00          | 	byte	0
36a47                 | LR__5727
36a47     72 6E 64    | 	byte	"rnd"
36a4a     00          | 	byte	0
36a4b                 | LR__5728
36a4b     73 69 6E    | 	byte	"sin"
36a4e     00          | 	byte	0
36a4f                 | LR__5729
36a4f     73 71 72    | 	byte	"sqr"
36a52     00          | 	byte	0
36a53                 | LR__5730
36a53     73 74 69 63 
36a57     6B          | 	byte	"stick"
36a58     00          | 	byte	0
36a59                 | LR__5731
36a59     73 74 72 69 
36a5d     67          | 	byte	"strig"
36a5e     00          | 	byte	0
36a5f                 | LR__5732
36a5f     73 74 72 24 | 	byte	"str$"
36a63     00          | 	byte	0
36a64                 | LR__5733
36a64     74 61 6E    | 	byte	"tan"
36a67     00          | 	byte	0
36a68                 | LR__5734
36a68     76 61 6C    | 	byte	"val"
36a6b     00          | 	byte	0
36a6c                 | LR__5735
36a6c     76 61 72 70 
36a70     74 72       | 	byte	"varptr"
36a72     00          | 	byte	0
36a73                 | LR__5736
36a73     61          | 	byte	"a"
36a74     00          | 	byte	0
36a75                 | LR__5737
36a75     7A          | 	byte	"z"
36a76     00          | 	byte	0
36a77                 | LR__5738
36a77     5F          | 	byte	"_"
36a78     00          | 	byte	0
36a79                 | LR__5739
36a79     61          | 	byte	"a"
36a7a     00          | 	byte	0
36a7b                 | LR__5740
36a7b     7A          | 	byte	"z"
36a7c     00          | 	byte	0
36a7d                 | LR__5741
36a7d     30          | 	byte	"0"
36a7e     00          | 	byte	0
36a7f                 | LR__5742
36a7f     39          | 	byte	"9"
36a80     00          | 	byte	0
36a81                 | LR__5743
36a81     5F          | 	byte	"_"
36a82     00          | 	byte	0
36a83                 | LR__5744
36a83     2E          | 	byte	"."
36a84     00          | 	byte	0
36a85                 | LR__5745
36a85     61          | 	byte	"a"
36a86     00          | 	byte	0
36a87                 | LR__5746
36a87     7A          | 	byte	"z"
36a88     00          | 	byte	0
36a89                 | LR__5747
36a89     30          | 	byte	"0"
36a8a     00          | 	byte	0
36a8b                 | LR__5748
36a8b     39          | 	byte	"9"
36a8c     00          | 	byte	0
36a8d                 | LR__5749
36a8d     5F          | 	byte	"_"
36a8e     00          | 	byte	0
36a8f                 | LR__5750
36a8f     24          | 	byte	"$"
36a90     00          | 	byte	0
36a91                 | LR__5751
36a91     25          | 	byte	"%"
36a92     00          | 	byte	0
36a93                 | LR__5752
36a93     21          | 	byte	"!"
36a94     00          | 	byte	0
36a95                 | LR__5753
36a95     30          | 	byte	"0"
36a96     00          | 	byte	0
36a97                 | LR__5754
36a97     39          | 	byte	"9"
36a98     00          | 	byte	0
36a99                 | LR__5755
36a99     2E          | 	byte	"."
36a9a     00          | 	byte	0
36a9b                 | LR__5756
36a9b     24          | 	byte	"$"
36a9c     00          | 	byte	0
36a9d                 | LR__5757
36a9d     25          | 	byte	"%"
36a9e     00          | 	byte	0
36a9f                 | LR__5758
36a9f     2D          | 	byte	"-"
36aa0     00          | 	byte	0
36aa1                 | LR__5759
36aa1     2E          | 	byte	"."
36aa2     00          | 	byte	0
36aa3                 | LR__5760
36aa3     24          | 	byte	"$"
36aa4     00          | 	byte	0
36aa5                 | LR__5761
36aa5     25          | 	byte	"%"
36aa6     00          | 	byte	0
36aa7                 | LR__5762
36aa7     30          | 	byte	"0"
36aa8     00          | 	byte	0
36aa9                 | LR__5763
36aa9     39          | 	byte	"9"
36aaa     00          | 	byte	0
36aab                 | LR__5764
36aab     5F          | 	byte	"_"
36aac     00          | 	byte	0
36aad                 | LR__5765
36aad     2E          | 	byte	"."
36aae     00          | 	byte	0
36aaf                 | LR__5766
36aaf     45          | 	byte	"E"
36ab0     00          | 	byte	0
36ab1                 | LR__5767
36ab1     65          | 	byte	"e"
36ab2     00          | 	byte	0
36ab3                 | LR__5768
36ab3     2D          | 	byte	"-"
36ab4     00          | 	byte	0
36ab5                 | LR__5769
36ab5     61          | 	byte	"a"
36ab6     00          | 	byte	0
36ab7                 | LR__5770
36ab7     66          | 	byte	"f"
36ab8     00          | 	byte	0
36ab9                 | LR__5771
36ab9     30          | 	byte	"0"
36aba     00          | 	byte	0
36abb                 | LR__5772
36abb     31          | 	byte	"1"
36abc     00          | 	byte	0
36abd                 | LR__5773
36abd     5F          | 	byte	"_"
36abe     00          | 	byte	0
36abf                 | LR__5774
36abf     2D          | 	byte	"-"
36ac0     00          | 	byte	0
36ac1                 | LR__5775
36ac1     65          | 	byte	"e"
36ac2     00          | 	byte	0
36ac3                 | LR__5776
36ac3     2E          | 	byte	"."
36ac4     00          | 	byte	0
36ac5                 | LR__5777
36ac5     45          | 	byte	"E"
36ac6     00          | 	byte	0
36ac7                 | LR__5778
36ac7     65          | 	byte	"e"
36ac8     00          | 	byte	0
36ac9                 | LR__5779
36ac9     30          | 	byte	"0"
36aca     00          | 	byte	0
36acb                 | LR__5780
36acb     39          | 	byte	"9"
36acc     00          | 	byte	0
36acd                 | LR__5781
36acd     24          | 	byte	"$"
36ace     00          | 	byte	0
36acf                 | LR__5782
36acf     25          | 	byte	"%"
36ad0     00          | 	byte	0
36ad1                 | LR__5783
36ad1     2D          | 	byte	"-"
36ad2     00          | 	byte	0
36ad3                 | LR__5784
36ad3     24          | 	byte	"$"
36ad4     00          | 	byte	0
36ad5                 | LR__5785
36ad5     25          | 	byte	"%"
36ad6     00          | 	byte	0
36ad7                 | LR__5786
36ad7     30          | 	byte	"0"
36ad8     00          | 	byte	0
36ad9                 | LR__5787
36ad9     39          | 	byte	"9"
36ada     00          | 	byte	0
36adb                 | LR__5788
36adb     5F          | 	byte	"_"
36adc     00          | 	byte	0
36add                 | LR__5789
36add     30          | 	byte	"0"
36ade     00          | 	byte	0
36adf                 | LR__5790
36adf     39          | 	byte	"9"
36ae0     00          | 	byte	0
36ae1                 | LR__5791
36ae1     61          | 	byte	"a"
36ae2     00          | 	byte	0
36ae3                 | LR__5792
36ae3     66          | 	byte	"f"
36ae4     00          | 	byte	0
36ae5                 | LR__5793
36ae5     5F          | 	byte	"_"
36ae6     00          | 	byte	0
36ae7                 | LR__5794
36ae7     30          | 	byte	"0"
36ae8     00          | 	byte	0
36ae9                 | LR__5795
36ae9     31          | 	byte	"1"
36aea     00          | 	byte	0
36aeb                 | LR__5796
36aeb     5F          | 	byte	"_"
36aec     00          | 	byte	0
36aed                 | LR__5797
36aed     30          | 	byte	"0"
36aee     00          | 	byte	0
36aef                 | LR__5798
36aef     39          | 	byte	"9"
36af0     00          | 	byte	0
36af1                 | LR__5799
36af1     5F          | 	byte	"_"
36af2     00          | 	byte	0
36af3                 | LR__5800
36af3     22          | 	byte	34
36af4     00          | 	byte	0
36af5                 | LR__5801
36af5     22          | 	byte	34
36af6     00          | 	byte	0
36af7                 | LR__5802
36af7     44 69 6D 3A 
36afb     20 61 74 20 
36aff     6C 69 6E 65 
36b03     20          | 	byte	"Dim: at line "
36b04     00          | 	byte	0
36b05                 | LR__5803
36b05     3A 20 77 61 
36b09     72 6E 69 6E 
36b0d     67 3A 20 74 
36b11     68 65 20 76 
36b15     61 72 69 61 
36b19     62 6C 65 20 
36b1d     65 78 69 73 
36b21     74 65 64 2E | 	byte	": warning: the variable existed."
36b25     00          | 	byte	0
36b26                 | LR__5804
36b26     28          | 	byte	"("
36b27     00          | 	byte	0
36b28                 | LR__5805
36b28     61 73       | 	byte	"as"
36b2a     00          | 	byte	0
36b2b                 | LR__5806
36b2b     61 73       | 	byte	"as"
36b2d     00          | 	byte	0
36b2e                 | LR__5807
36b2e     2C          | 	byte	","
36b2f     00          | 	byte	0
36b30                 | LR__5808
36b30     29          | 	byte	")"
36b31     00          | 	byte	0
36b32                 | LR__5809
36b32     29          | 	byte	")"
36b33     00          | 	byte	0
36b34                 | LR__5810
36b34     61 73       | 	byte	"as"
36b36     00          | 	byte	0
36b37                 | LR__5811
36b37     62 79 74 65 | 	byte	"byte"
36b3b     00          | 	byte	0
36b3c                 | LR__5812
36b3c     75 62 79 74 
36b40     65          | 	byte	"ubyte"
36b41     00          | 	byte	0
36b42                 | LR__5813
36b42     73 68 6F 72 
36b46     74          | 	byte	"short"
36b47     00          | 	byte	0
36b48                 | LR__5814
36b48     75 73 68 6F 
36b4c     72 74       | 	byte	"ushort"
36b4e     00          | 	byte	0
36b4f                 | LR__5815
36b4f     6C 6F 6E 67 | 	byte	"long"
36b53     00          | 	byte	0
36b54                 | LR__5816
36b54     69 6E 74 65 
36b58     67 65 72    | 	byte	"integer"
36b5b     00          | 	byte	0
36b5c                 | LR__5817
36b5c     75 6C 6F 6E 
36b60     67          | 	byte	"ulong"
36b61     00          | 	byte	0
36b62                 | LR__5818
36b62     69 6E 74 36 
36b66     34          | 	byte	"int64"
36b67     00          | 	byte	0
36b68                 | LR__5819
36b68     75 69 6E 74 
36b6c     36 34       | 	byte	"uint64"
36b6e     00          | 	byte	0
36b6f                 | LR__5820
36b6f     73 69 6E 67 
36b73     6C 65       | 	byte	"single"
36b75     00          | 	byte	0
36b76                 | LR__5821
36b76     64 6F 75 62 
36b7a     6C 65       | 	byte	"double"
36b7c     00          | 	byte	0
36b7d                 | LR__5822
36b7d     73 74 72 69 
36b81     6E 67       | 	byte	"string"
36b83     00          | 	byte	0
36b84                 | LR__5823
36b84     74 6F       | 	byte	"to"
36b86     00          | 	byte	0
36b87                 | LR__5824
36b87     73 74 65 70 | 	byte	"step"
36b8b     00          | 	byte	0
36b8c                 | LR__5825
36b8c     73 2E       | 	byte	"s."
36b8e     00          | 	byte	0
36b8f                 | LR__5826
36b8f     73 2E       | 	byte	"s."
36b91     00          | 	byte	0
36b92                 | LR__5827
36b92     67 6F 74 6F | 	byte	"goto"
36b96     00          | 	byte	0
36b97                 | LR__5828
36b97     67 6F 73 75 
36b9b     62          | 	byte	"gosub"
36b9c     00          | 	byte	0
36b9d                 | LR__5829
36b9d     24          | 	byte	"$"
36b9e     00          | 	byte	0
36b9f                 | LR__5830
36b9f     26 68       | 	byte	"&h"
36ba1     00          | 	byte	0
36ba2                 | LR__5831
36ba2     25          | 	byte	"%"
36ba3     00          | 	byte	0
36ba4                 | LR__5832
36ba4     26 62       | 	byte	"&b"
36ba6     00          | 	byte	0
36ba7                 | LR__5833
36ba7                 | 	byte	
36ba7     00          | 	byte	0
36ba8                 | LR__5834
36ba8     61 63 6F 73 
36bac     3A 20       | 	byte	"acos: "
36bae     00          | 	byte	0
36baf                 | LR__5835
36baf     61 73 63 3A 
36bb3     20          | 	byte	"asc: "
36bb4     00          | 	byte	0
36bb5                 | LR__5836
36bb5     61 73 63 3A 
36bb9     20          | 	byte	"asc: "
36bba     00          | 	byte	0
36bbb                 | LR__5837
36bbb     61 73 69 6E 
36bbf     3A 20       | 	byte	"asin: "
36bc1     00          | 	byte	0
36bc2                 | LR__5838
36bc2     61 74 6E 3A 
36bc6     20          | 	byte	"atn: "
36bc7     00          | 	byte	0
36bc8                 | LR__5839
36bc8     62 6C 69 74 
36bcc     3A 20       | 	byte	"blit: "
36bce     00          | 	byte	0
36bcf                 | LR__5840
36bcf     62 69 6E 24 
36bd3     3A 20       | 	byte	"bin$: "
36bd5     00          | 	byte	0
36bd6                 | LR__5841
36bd6     2F          | 	byte	"/"
36bd7     00          | 	byte	0
36bd8                 | LR__5842
36bd8     2F 73 64 2F 
36bdc     62 69 6E 2F | 	byte	"/sd/bin/"
36be0     00          | 	byte	0
36be1                 | LR__5843
36be1     53 79 73 74 
36be5     65 6D 20 65 
36be9     72 72 6F 72 
36bed     20          | 	byte	"System error "
36bee     00          | 	byte	0
36bef                 | LR__5844
36bef     3A 20       | 	byte	": "
36bf1     00          | 	byte	0
36bf2                 | LR__5845
36bf2     2A          | 	byte	"*"
36bf3     00          | 	byte	0
36bf4                 | LR__5846
36bf4     2E 2E       | 	byte	".."
36bf6     00          | 	byte	0
36bf7                 | LR__5847
36bf7     2F          | 	byte	"/"
36bf8     00          | 	byte	0
36bf9                 | LR__5848
36bf9     2F          | 	byte	"/"
36bfa     00          | 	byte	0
36bfb                 | LR__5849
36bfb     53 79 73 74 
36bff     65 6D 20 65 
36c03     72 72 6F 72 
36c07     20          | 	byte	"System error "
36c08     00          | 	byte	0
36c09                 | LR__5850
36c09     3A 20       | 	byte	": "
36c0b     00          | 	byte	0
36c0c                 | LR__5851
36c0c     43 75 72 72 
36c10     65 6E 74 20 
36c14     64 69 72 65 
36c18     63 74 6F 72 
36c1c     79 3A 20    | 	byte	"Current directory: "
36c1f     00          | 	byte	0
36c20                 | LR__5852
36c20     2F          | 	byte	"/"
36c21     00          | 	byte	0
36c22                 | LR__5853
36c22     53 79 73 74 
36c26     65 6D 20 65 
36c2a     72 72 6F 72 
36c2e     20          | 	byte	"System error "
36c2f     00          | 	byte	0
36c30                 | LR__5854
36c30     3A 20       | 	byte	": "
36c32     00          | 	byte	0
36c33                 | LR__5855
36c33     43 75 72 72 
36c37     65 6E 74 20 
36c3b     64 69 72 65 
36c3f     63 74 6F 72 
36c43     79 3A 20    | 	byte	"Current directory: "
36c46     00          | 	byte	0
36c47                 | LR__5856
36c47     2F          | 	byte	"/"
36c48     00          | 	byte	0
36c49                 | LR__5857
36c49     2F          | 	byte	"/"
36c4a     00          | 	byte	0
36c4b                 | LR__5858
36c4b     2F          | 	byte	"/"
36c4c     00          | 	byte	0
36c4d                 | LR__5859
36c4d     53 79 73 74 
36c51     65 6D 20 65 
36c55     72 72 6F 72 
36c59     20          | 	byte	"System error "
36c5a     00          | 	byte	0
36c5b                 | LR__5860
36c5b     3A 20       | 	byte	": "
36c5d     00          | 	byte	0
36c5e                 | LR__5861
36c5e     43 75 72 72 
36c62     65 6E 74 20 
36c66     64 69 72 65 
36c6a     63 74 6F 72 
36c6e     79 3A 20    | 	byte	"Current directory: "
36c71     00          | 	byte	0
36c72                 | LR__5862
36c72     63 68 72 24 
36c76     3A 20       | 	byte	"chr$: "
36c78     00          | 	byte	0
36c79                 | LR__5863
36c79     63 68 61 6E 
36c7d     6E 65 6C 23 
36c81     20 65 78 70 
36c85     65 63 74 65 
36c89     64          | 	byte	"channel# expected"
36c8a     00          | 	byte	0
36c8b                 | LR__5864
36c8b     63 6F 67 69 
36c8f     6E 69 74 3A 
36c93     20          | 	byte	"coginit: "
36c94     00          | 	byte	0
36c95                 | LR__5865
36c95     53 79 73 74 
36c99     65 6D 20 65 
36c9d     72 72 6F 72 
36ca1     20 2D 20    | 	byte	"System error - "
36ca4     00          | 	byte	0
36ca5                 | LR__5866
36ca5     20 69 6E 20 
36ca9     6C 69 6E 65 
36cad     20          | 	byte	" in line "
36cae     00          | 	byte	0
36caf                 | LR__5867
36caf     3A 20       | 	byte	": "
36cb1     00          | 	byte	0
36cb2                 | LR__5868
36cb2     2C 20 66 69 
36cb6     6C 65 20 6E 
36cba     61 6D 65 3A 
36cbe     20          | 	byte	", file name: "
36cbf     00          | 	byte	0
36cc0                 | LR__5869
36cc0     53 79 73 74 
36cc4     65 6D 20 65 
36cc8     72 72 6F 72 
36ccc     20 2D 20    | 	byte	"System error - "
36ccf     00          | 	byte	0
36cd0                 | LR__5870
36cd0     20 69 6E 20 
36cd4     6C 69 6E 65 
36cd8     20          | 	byte	" in line "
36cd9     00          | 	byte	0
36cda                 | LR__5871
36cda     3A 20       | 	byte	": "
36cdc     00          | 	byte	0
36cdd                 | LR__5872
36cdd     2C 20 66 69 
36ce1     6C 65 20 6E 
36ce5     61 6D 65 3A 
36ce9     20          | 	byte	", file name: "
36cea     00          | 	byte	0
36ceb                 | LR__5873
36ceb     63 6F 73 3A 
36cef     20          | 	byte	"cos: "
36cf0     00          | 	byte	0
36cf1                 | LR__5874
36cf1                 | 	byte	
36cf1     00          | 	byte	0
36cf2                 | LR__5875
36cf2                 | 	byte	
36cf2     00          | 	byte	0
36cf3                 | LR__5876
36cf3     2F 73 64 2F 
36cf7     6D 65 64 69 
36cfb     61 2F 68 2F | 	byte	"/sd/media/h/"
36cff     00          | 	byte	0
36d00                 | LR__5877
36d00     53 79 73 74 
36d04     65 6D 20 65 
36d08     72 72 6F 72 
36d0c     20          | 	byte	"System error "
36d0d     00          | 	byte	0
36d0e                 | LR__5878
36d0e     3A 20       | 	byte	": "
36d10     00          | 	byte	0
36d11                 | LR__5879
36d11                 | 	byte	
36d11     00          | 	byte	0
36d12                 | LR__5880
36d12                 | 	byte	
36d12     00          | 	byte	0
36d13                 | LR__5881
36d13     2F 73 64 2F 
36d17     6D 65 64 69 
36d1b     61 2F 73 2F | 	byte	"/sd/media/s/"
36d1f     00          | 	byte	0
36d20                 | LR__5882
36d20     53 79 73 74 
36d24     65 6D 20 65 
36d28     72 72 6F 72 
36d2c     20          | 	byte	"System error "
36d2d     00          | 	byte	0
36d2e                 | LR__5883
36d2e     3A 20       | 	byte	": "
36d30     00          | 	byte	0
36d31                 | LR__5884
36d31     2F          | 	byte	"/"
36d32     00          | 	byte	0
36d33                 | LR__5885
36d33     2F          | 	byte	"/"
36d34     00          | 	byte	0
36d35                 | LR__5886
36d35     2F          | 	byte	"/"
36d36     00          | 	byte	0
36d37                 | LR__5887
36d37     43 61 6E 6E 
36d3b     6F 74 20 64 
36d3f     65 6C 65 74 
36d43     65 20 66 69 
36d47     6C 65 20 6F 
36d4b     72 20 66 69 
36d4f     6C 65 20 64 
36d53     6F 65 73 6E 
36d57     27 74 20 65 
36d5b     78 69 73 74 
36d5f     3A 20 73 79 
36d63     73 74 65 6D 
36d67     20 65 72 72 
36d6b     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
36d6e     00          | 	byte	0
36d6f                 | LR__5888
36d6f     43 75 72 72 
36d73     65 6E 74 20 
36d77     64 69 72 65 
36d7b     63 74 6F 72 
36d7f     79 3A 20    | 	byte	"Current directory: "
36d82     00          | 	byte	0
36d83                 | LR__5889
36d83                 | 	byte	
36d83     00          | 	byte	0
36d84                 | LR__5890
36d84     2A          | 	byte	"*"
36d85     00          | 	byte	0
36d86                 | LR__5891
36d86                 | 	byte	
36d86     00          | 	byte	0
36d87                 | LR__5892
36d87     5B 64 69 72 
36d8b     5D 20       | 	byte	"[dir] "
36d8d     00          | 	byte	0
36d8e                 | LR__5893
36d8e     4D 6F 72 65 
36d92     20 74 68 61 
36d96     6E 20 31 32 
36d9a     38 20 65 6E 
36d9e     74 72 69 65 
36da2     73 20 66 6F 
36da6     75 6E 64 3A 
36daa     20 63 6C 65 
36dae     61 6E 20 79 
36db2     6F 75 72 20 
36db6     64 69 72 65 
36dba     63 74 6F 72 
36dbe     79          | 	byte	"More than 128 entries found: clean your directory"
36dbf     00          | 	byte	0
36dc0                 | LR__5894
36dc0     2A          | 	byte	"*"
36dc1     00          | 	byte	0
36dc2                 | LR__5895
36dc2                 | 	byte	
36dc2     00          | 	byte	0
36dc3                 | LR__5896
36dc3     4D 6F 72 65 
36dc7     20 74 68 61 
36dcb     6E 20 31 32 
36dcf     38 20 65 6E 
36dd3     74 72 69 65 
36dd7     73 20 66 6F 
36ddb     75 6E 64 3A 
36ddf     20 63 6C 65 
36de3     61 6E 20 79 
36de7     6F 75 72 20 
36deb     64 69 72 65 
36def     63 74 6F 72 
36df3     79          | 	byte	"More than 128 entries found: clean your directory"
36df4     00          | 	byte	0
36df5                 | LR__5897
36df5     45 72 72 6F 
36df9     72 20       | 	byte	"Error "
36dfb     00          | 	byte	0
36dfc                 | LR__5898
36dfc     3A 20       | 	byte	": "
36dfe     00          | 	byte	0
36dff                 | LR__5899
36dff     67 65 74 65 
36e03     6E 76 73 75 
36e07     73 74 61 69 
36e0b     6E 3A 20    | 	byte	"getenvsustain: "
36e0e     00          | 	byte	0
36e0f                 | LR__5900
36e0f     67 65 74 70 
36e13     69 78 65 6C 
36e17     3A 20       | 	byte	"getpixel: "
36e19     00          | 	byte	0
36e1a                 | LR__5901
36e1a     68 65 78 24 
36e1e     3A 20       | 	byte	"hex$: "
36e20     00          | 	byte	0
36e21                 | LR__5902
36e21                 | 	byte	
36e21     00          | 	byte	0
36e22                 | LR__5903
36e22     49 6E 20 69 
36e26     6E 70 75 74 
36e2a     3A 20       | 	byte	"In input: "
36e2c     00          | 	byte	0
36e2d                 | LR__5904
36e2d     2C          | 	byte	","
36e2e     00          | 	byte	0
36e2f                 | LR__5905
36e2f                 | 	byte	
36e2f     00          | 	byte	0
36e30                 | LR__5906
36e30                 | 	byte	
36e30     00          | 	byte	0
36e31                 | LR__5907
36e31     6C 65 66 74 
36e35     24 3A 20    | 	byte	"left$: "
36e38     00          | 	byte	0
36e39                 | LR__5908
36e39     6C 65 66 74 
36e3d     24 3A 20    | 	byte	"left$: "
36e40     00          | 	byte	0
36e41                 | LR__5909
36e41     6C 65 6E 3A 
36e45     20          | 	byte	"len: "
36e46     00          | 	byte	0
36e47                 | LR__5910
36e47     6C 65 6E 3A 
36e4b     20          | 	byte	"len: "
36e4c     00          | 	byte	0
36e4d                 | LR__5911
36e4d                 | 	byte	
36e4d     00          | 	byte	0
36e4e                 | LR__5912
36e4e     2F          | 	byte	"/"
36e4f     00          | 	byte	0
36e50                 | LR__5913
36e50     2F          | 	byte	"/"
36e51     00          | 	byte	0
36e52                 | LR__5914
36e52     2E 62 61 73 | 	byte	".bas"
36e56     00          | 	byte	0
36e57                 | LR__5915
36e57     53 79 73 74 
36e5b     65 6D 20 65 
36e5f     72 72 6F 72 
36e63     20          | 	byte	"System error "
36e64     00          | 	byte	0
36e65                 | LR__5916
36e65     3A 20       | 	byte	": "
36e67     00          | 	byte	0
36e68                 | LR__5917
36e68     2E 62 61 73 | 	byte	".bas"
36e6c     00          | 	byte	0
36e6d                 | LR__5918
36e6d     2F          | 	byte	"/"
36e6e     00          | 	byte	0
36e6f                 | LR__5919
36e6f                 | 	byte	
36e6f     00          | 	byte	0
36e70                 | LR__5920
36e70     4C 6F 61 64 
36e74     65 64 20    | 	byte	"Loaded "
36e77     00          | 	byte	0
36e78                 | LR__5921
36e78     2F          | 	byte	"/"
36e79     00          | 	byte	0
36e7a                 | LR__5922
36e7a     6C 6F 67 3A 
36e7e     20          | 	byte	"log: "
36e7f     00          | 	byte	0
36e80                 | LR__5923
36e80     6D 69 64 24 
36e84     3A 20       | 	byte	"mid$: "
36e86     00          | 	byte	0
36e87                 | LR__5924
36e87     6D 69 64 24 
36e8b     3A 20       | 	byte	"mid$: "
36e8d     00          | 	byte	0
36e8e                 | LR__5925
36e8e     43 61 6E 6E 
36e92     6F 74 20 63 
36e96     72 65 61 74 
36e9a     65 20 61 20 
36e9e     64 69 72 65 
36ea2     63 74 6F 72 
36ea6     79 3A 20 73 
36eaa     79 73 74 65 
36eae     6D 20 65 72 
36eb2     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
36eb6     00          | 	byte	0
36eb7                 | LR__5926
36eb7     20 42 41 53 
36ebb     49 43 20 62 
36ebf     79 74 65 73 
36ec3     20 66 72 65 
36ec7     65          | 	byte	" BASIC bytes free"
36ec8     00          | 	byte	0
36ec9                 | LR__5927
36ec9                 | 	byte	
36ec9     00          | 	byte	0
36eca                 | LR__5928
36eca                 | 	byte	
36eca     00          | 	byte	0
36ecb                 | LR__5929
36ecb                 | 	byte	
36ecb     00          | 	byte	0
36ecc                 | LR__5930
36ecc     6E 6F 6E 61 
36ed0     6D 65 2E 62 
36ed4     61 73       | 	byte	"noname.bas"
36ed6     00          | 	byte	0
36ed7                 | LR__5931
36ed7     66 69 6C 65 
36edb     6E 61 6D 65 
36edf     20 65 78 70 
36ee3     65 63 74 65 
36ee7     64          | 	byte	"filename expected"
36ee8     00          | 	byte	0
36ee9                 | LR__5932
36ee9     72 65 61 64 | 	byte	"read"
36eed     00          | 	byte	0
36eee                 | LR__5933
36eee     77 72 69 74 
36ef2     65          | 	byte	"write"
36ef3     00          | 	byte	0
36ef4                 | LR__5934
36ef4     61 70 70 65 
36ef8     6E 64       | 	byte	"append"
36efa     00          | 	byte	0
36efb                 | LR__5935
36efb     63 68 61 6E 
36eff     6E 65 6C 23 
36f03     20 65 78 70 
36f07     65 63 74 65 
36f0b     64          | 	byte	"channel# expected"
36f0c     00          | 	byte	0
36f0d                 | LR__5936
36f0d     4F 70 65 6E 
36f11     3A 20 69 6E 
36f15     76 61 6C 69 
36f19     64 20 6D 6F 
36f1d     64 65       | 	byte	"Open: invalid mode"
36f1f     00          | 	byte	0
36f20                 | LR__5937
36f20     70 61 64 68 
36f24     3A 20       | 	byte	"padh: "
36f26     00          | 	byte	0
36f27                 | LR__5938
36f27     70 61 64 72 
36f2b     78 3A 20    | 	byte	"padrx: "
36f2e     00          | 	byte	0
36f2f                 | LR__5939
36f2f     70 61 64 72 
36f33     79 3A 20    | 	byte	"padry: "
36f36     00          | 	byte	0
36f37                 | LR__5940
36f37     70 61 64 72 
36f3b     7A 3A 20    | 	byte	"padrz: "
36f3e     00          | 	byte	0
36f3f                 | LR__5941
36f3f     70 61 64 78 
36f43     3A 20       | 	byte	"padx: "
36f45     00          | 	byte	0
36f46                 | LR__5942
36f46     70 61 64 79 
36f4a     3A 20       | 	byte	"pady: "
36f4c     00          | 	byte	0
36f4d                 | LR__5943
36f4d     70 61 64 7A 
36f51     3A 20       | 	byte	"padz: "
36f53     00          | 	byte	0
36f54                 | LR__5944
36f54     50 72 69 6E 
36f58     74 20 74 6F 
36f5c     20 63 68 61 
36f60     6E 6E 65 6C 
36f64     20 28 6E 6F 
36f68     74 20 79 65 
36f6c     74 20 69 6D 
36f70     70 6C 65 6D 
36f74     65 6E 74 65 
36f78     64 29       | 	byte	"Print to channel (not yet implemented)"
36f7a     00          | 	byte	0
36f7b                 | LR__5945
36f7b                 | 	byte	
36f7b     00          | 	byte	0
36f7c                 | LR__5946
36f7c     64 61 74 61 | 	byte	"data"
36f80     00          | 	byte	0
36f81                 | LR__5947
36f81                 | 	byte	
36f81     00          | 	byte	0
36f82                 | LR__5948
36f82     49 6E 20 72 
36f86     65 61 64 3A 
36f8a     20          | 	byte	"In read: "
36f8b     00          | 	byte	0
36f8c                 | LR__5949
36f8c                 | 	byte	
36f8c     00          | 	byte	0
36f8d                 | LR__5950
36f8d                 | 	byte	
36f8d     00          | 	byte	0
36f8e                 | LR__5951
36f8e     27          | 	byte	"'"
36f8f     00          | 	byte	0
36f90                 | LR__5952
36f90     2C          | 	byte	","
36f91     00          | 	byte	0
36f92                 | LR__5953
36f92                 | 	byte	
36f92     00          | 	byte	0
36f93                 | LR__5954
36f93                 | 	byte	
36f93     00          | 	byte	0
36f94                 | LR__5955
36f94                 | 	byte	
36f94     00          | 	byte	0
36f95                 | LR__5956
36f95                 | 	byte	
36f95     00          | 	byte	0
36f96                 | LR__5957
36f96                 | 	byte	
36f96     00          | 	byte	0
36f97                 | LR__5958
36f97     72 69 67 68 
36f9b     74 24 3A 20 | 	byte	"right$: "
36f9f     00          | 	byte	0
36fa0                 | LR__5959
36fa0     72 69 67 68 
36fa4     74 24 3A 20 | 	byte	"right$: "
36fa8     00          | 	byte	0
36fa9                 | LR__5960
36fa9     72 6E 64 3A 
36fad     20          | 	byte	"rnd: "
36fae     00          | 	byte	0
36faf                 | LR__5961
36faf     72 6E 64 3A 
36fb3     20          | 	byte	"rnd: "
36fb4     00          | 	byte	0
36fb5                 | LR__5962
36fb5                 | 	byte	
36fb5     00          | 	byte	0
36fb6                 | LR__5963
36fb6     53 74 6F 70 
36fba     70 65 64 20 
36fbe     61 74 20 6C 
36fc2     69 6E 65 20 | 	byte	"Stopped at line "
36fc6     00          | 	byte	0
36fc7                 | LR__5964
36fc7                 | 	byte	
36fc7     00          | 	byte	0
36fc8                 | LR__5965
36fc8     2F          | 	byte	"/"
36fc9     00          | 	byte	0
36fca                 | LR__5966
36fca                 | 	byte	
36fca     00          | 	byte	0
36fcb                 | LR__5967
36fcb     53 61 76 65 
36fcf     64 20 61 73 
36fd3     20          | 	byte	"Saved as "
36fd4     00          | 	byte	0
36fd5                 | LR__5968
36fd5     2F          | 	byte	"/"
36fd6     00          | 	byte	0
36fd7                 | LR__5969
36fd7     73 69 6E 3A 
36fdb     20          | 	byte	"sin: "
36fdc     00          | 	byte	0
36fdd                 | LR__5970
36fdd     73 71 72 3A 
36fe1     20          | 	byte	"sqr: "
36fe2     00          | 	byte	0
36fe3                 | LR__5971
36fe3     73 74 69 63 
36fe7     6B 3A 20    | 	byte	"stick: "
36fea     00          | 	byte	0
36feb                 | LR__5972
36feb     73 74 72 69 
36fef     67 3A 20    | 	byte	"strig: "
36ff2     00          | 	byte	0
36ff3                 | LR__5973
36ff3     74 61 6E 3A 
36ff7     20          | 	byte	"tan: "
36ff8     00          | 	byte	0
36ff9                 | LR__5974
36ff9     76 61 6C 3A 
36ffd     20          | 	byte	"val: "
36ffe     00          | 	byte	0
36fff                 | LR__5975
36fff     76 61 6C 3A 
37003     20          | 	byte	"val: "
37004     00          | 	byte	0
37005                 | LR__5976
37005     24          | 	byte	"$"
37006     00          | 	byte	0
37007                 | LR__5977
37007     26 68       | 	byte	"&h"
37009     00          | 	byte	0
3700a                 | LR__5978
3700a     25          | 	byte	"%"
3700b     00          | 	byte	0
3700c                 | LR__5979
3700c     26 62       | 	byte	"&b"
3700e     00          | 	byte	0
3700f                 | LR__5980
3700f                 | 	byte	
3700f     00          | 	byte	0
37010                 | LR__5981
37010     45 78 70 65 
37014     63 74 65 64 
37018     20 6E 75 6D 
3701c     62 65 72 2C 
37020     20 67 6F 74 
37024     20 73 6F 6D 
37028     65 74 68 69 
3702c     6E 67 20 65 
37030     6C 73 65    | 	byte	"Expected number, got something else"
37033     00          | 	byte	0
37034                 | LR__5982
37034     43 61 6E 6E 
37038     6F 74 20 61 
3703c     64 64 20 61 
37040     20 6E 75 6D 
37044     62 65 72 20 
37048     74 6F 20 61 
3704c     20 73 74 72 
37050     69 6E 67    | 	byte	"Cannot add a number to a string"
37053     00          | 	byte	0
37054                 | LR__5983
37054     43 61 6E 6E 
37058     6F 74 20 73 
3705c     75 62 73 74 
37060     72 61 63 74 
37064     20 73 74 72 
37068     69 6E 67 73 | 	byte	"Cannot substract strings"
3706c     00          | 	byte	0
3706d                 | LR__5984
3706d     55 6E 6B 6E 
37071     6F 77 6E 20 
37075     65 72 72 6F 
37079     72 20 77 68 
3707d     69 6C 65 20 
37081     61 64 64 69 
37085     6E 67       | 	byte	"Unknown error while adding"
37087     00          | 	byte	0
37088                 | LR__5985
37088     55 6E 6B 6E 
3708c     6F 77 6E 20 
37090     65 72 72 6F 
37094     72 20 77 68 
37098     69 6C 65 20 
3709c     73 75 62 73 
370a0     74 72 61 63 
370a4     74 69 6E 67 | 	byte	"Unknown error while substracting"
370a8     00          | 	byte	0
370a9                 | LR__5986
370a9     43 61 6E 6E 
370ad     6F 74 20 64 
370b1     6F 20 6C 6F 
370b5     67 69 63 20 
370b9     6F 70 65 72 
370bd     61 74 69 6F 
370c1     6E 20 6F 6E 
370c5     20 73 74 72 
370c9     69 6E 67 20 
370cd     6F 72 20 66 
370d1     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
370d5     00          | 	byte	0
370d6                 | LR__5987
370d6     55 6E 6B 6E 
370da     6F 77 6E 20 
370de     65 72 72 6F 
370e2     72 20 77 68 
370e6     69 6C 65 20 
370ea     64 6F 69 6E 
370ee     67 20 6C 6F 
370f2     67 69 63 20 
370f6     6F 70 65 72 
370fa     61 74 69 6F 
370fe     6E          | 	byte	"Unknown error while doing logic operation"
370ff     00          | 	byte	0
37100                 | LR__5988
37100     43 61 6E 6E 
37104     6F 74 20 6D 
37108     75 6C 74 69 
3710c     70 6C 79 20 
37110     73 74 72 69 
37114     6E 67 73    | 	byte	"Cannot multiply strings"
37117     00          | 	byte	0
37118                 | LR__5989
37118     55 6E 6B 6E 
3711c     6F 77 6E 20 
37120     65 72 72 6F 
37124     72 20 77 68 
37128     69 6C 65 20 
3712c     6D 75 6C 74 
37130     69 70 6C 79 
37134     69 6E 67    | 	byte	"Unknown error while multiplying"
37137     00          | 	byte	0
37138                 | LR__5990
37138     43 61 6E 6E 
3713c     6F 74 20 64 
37140     69 76 69 64 
37144     65 20 73 74 
37148     72 69 6E 67 
3714c     73          | 	byte	"Cannot divide strings"
3714d     00          | 	byte	0
3714e                 | LR__5991
3714e     55 6E 6B 6E 
37152     6F 77 6E 20 
37156     65 72 72 6F 
3715a     72 20 77 68 
3715e     69 6C 65 20 
37162     64 69 76 69 
37166     64 69 6E 67 | 	byte	"Unknown error while dividing"
3716a     00          | 	byte	0
3716b                 | LR__5992
3716b     43 61 6E 6E 
3716f     6F 74 20 63 
37173     6F 6D 70 75 
37177     74 65 20 61 
3717b     20 70 6F 77 
3717f     65 72 20 6F 
37183     66 20 61 20 
37187     73 74 72 69 
3718b     6E 67       | 	byte	"Cannot compute a power of a string"
3718d     00          | 	byte	0
3718e                 | LR__5993
3718e     55 6E 6B 6E 
37192     6F 77 6E 20 
37196     65 72 72 6F 
3719a     72 20 77 68 
3719e     69 6C 65 20 
371a2     63 6F 6D 70 
371a6     75 74 69 6E 
371aa     67 20 61 20 
371ae     70 6F 77 65 
371b2     72          | 	byte	"Unknown error while computing a power"
371b3     00          | 	byte	0
371b4                 | LR__5994
371b4     52 69 67 68 
371b8     74 20 70 61 
371bc     72 65 6E 74 
371c0     68 65 73 69 
371c4     73 20 65 78 
371c8     70 65 63 74 
371cc     65 64       | 	byte	"Right parenthesis expected"
371ce     00          | 	byte	0
371cf                 | LR__5995
371cf     45 78 70 65 
371d3     63 74 65 64 
371d7     20 73 74 72 
371db     69 6E 67    | 	byte	"Expected string"
371de     00          | 	byte	0
371df                 | LR__5996
371df     45 78 70 65 
371e3     63 74 65 64 
371e7     20 66 6C 6F 
371eb     61 74       | 	byte	"Expected float"
371ed     00          | 	byte	0
371ee                 | LR__5997
371ee     45 78 70 65 
371f2     63 74 65 64 
371f6     20 75 6E 73 
371fa     69 67 6E 65 
371fe     64 20 69 6E 
37202     74 65 67 65 
37206     72          | 	byte	"Expected unsigned integer"
37207     00          | 	byte	0
37208                 | LR__5998
37208     45 78 70 65 
3720c     63 74 65 64 
37210     20 69 6E 74 
37214     65 67 65 72 | 	byte	"Expected integer"
37218     00          | 	byte	0
37219                 | LR__5999
37219     4E 6F 20 6D 
3721d     6F 72 65 20 
37221     76 61 72 69 
37225     61 62 6C 65 
37229     20 73 6C 6F 
3722d     74 73       | 	byte	"No more variable slots"
3722f     00          | 	byte	0
37230                 | LR__6000
37230     56 61 72 69 
37234     61 62 6C 65 
37238     20 6E 6F 74 
3723c     20 66 6F 75 
37240     6E 64       | 	byte	"Variable not found"
37242     00          | 	byte	0
37243                 | LR__6001
37243     43 6F 6D 6D 
37247     61 20 65 78 
3724b     70 65 63 74 
3724f     65 64       | 	byte	"Comma expected"
37251     00          | 	byte	0
37252                 | LR__6002
37252     43 6F 6D 6D 
37256     61 20 6F 72 
3725a     20 73 65 6D 
3725e     69 63 6F 6C 
37262     6F 6E 20 65 
37266     78 70 65 63 
3726a     74 65 64    | 	byte	"Comma or semicolon expected"
3726d     00          | 	byte	0
3726e                 | LR__6003
3726e     55 6E 6B 6E 
37272     6F 77 6E 20 
37276     63 6F 6D 6D 
3727a     61 6E 64    | 	byte	"Unknown command"
3727d     00          | 	byte	0
3727e                 | LR__6004
3727e     53 74 61 63 
37282     6B 20 75 6E 
37286     64 65 72 66 
3728a     6C 6F 77    | 	byte	"Stack underflow"
3728d     00          | 	byte	0
3728e                 | LR__6005
3728e     43 61 6E 6E 
37292     6F 74 20 65 
37296     78 65 63 75 
3729a     74 65 20 67 
3729e     6F 74 6F 20 
372a2     6F 72 20 67 
372a6     6F 73 75 62 
372aa     20 69 6E 20 
372ae     74 68 65 20 
372b2     69 6D 6D 65 
372b6     64 69 61 74 
372ba     65 20 6D 6F 
372be     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
372c0     00          | 	byte	0
372c1                 | LR__6006
372c1     43 61 6E 6E 
372c5     6F 74 20 6C 
372c9     6F 61 64 20 
372cd     66 72 6F 6D 
372d1     20 74 68 69 
372d5     73 20 66 69 
372d9     6C 65       | 	byte	"Cannot load from this file"
372db     00          | 	byte	0
372dc                 | LR__6007
372dc     54 68 65 20 
372e0     70 72 6F 67 
372e4     72 61 6D 20 
372e8     69 73 20 65 
372ec     6D 70 74 79 | 	byte	"The program is empty"
372f0     00          | 	byte	0
372f1                 | LR__6008
372f1     49 66 20 61 
372f5     66 74 65 72 
372f9     20 69 66    | 	byte	"If after if"
372fc     00          | 	byte	0
372fd                 | LR__6009
372fd     45 6D 70 74 
37301     79 20 65 78 
37305     70 72 65 73 
37309     73 69 6F 6E | 	byte	"Empty expression"
3730d     00          | 	byte	0
3730e                 | LR__6010
3730e     53 74 72 69 
37312     6E 67 20 65 
37316     78 70 65 63 
3731a     74 65 64    | 	byte	"String expected"
3731d     00          | 	byte	0
3731e                 | LR__6011
3731e     49 6E 74 65 
37322     72 70 72 65 
37326     74 65 72 20 
3732a     69 6E 74 65 
3732e     72 6E 61 6C 
37332     20 65 72 72 
37336     6F 72       | 	byte	"Interpreter internal error"
37338     00          | 	byte	0
37339                 | LR__6012
37339     45 78 70 65 
3733d     63 74 65 64 
37341     20 61 73 73 
37345     69 67 6E    | 	byte	"Expected assign"
37348     00          | 	byte	0
37349                 | LR__6013
37349     45 78 70 65 
3734d     63 74 65 64 
37351     20 27 74 6F 
37355     27          | 	byte	"Expected 'to'"
37356     00          | 	byte	0
37357                 | LR__6014
37357     45 78 70 65 
3735b     63 74 65 64 
3735f     20 69 6E 74 
37363     65 67 65 72 
37367     20 76 61 72 
3736b     69 61 62 6C 
3736f     65          | 	byte	"Expected integer variable"
37370     00          | 	byte	0
37371                 | LR__6015
37371     55 6E 69 6E 
37375     69 74 69 61 
37379     6C 69 7A 65 
3737d     64 20 76 61 
37381     72 69 61 62 
37385     6C 65 20 69 
37389     6E 20 27 6E 
3738d     65 78 74 27 
37391     2C 20 75 73 
37395     65 20 27 66 
37399     6F 72 27 20 
3739d     62 65 66 6F 
373a1     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
373a3     00          | 	byte	0
373a4                 | LR__6016
373a4     4E 6F 20 6D 
373a8     6F 72 65 20 
373ac     73 6C 6F 74 
373b0     73 20 66 6F 
373b4     72 20 27 66 
373b8     6F 72 27    | 	byte	"No more slots for 'for'"
373bb     00          | 	byte	0
373bc                 | LR__6017
373bc     27 4E 65 78 
373c0     74 27 20 64 
373c4     6F 65 73 6E 
373c8     27 74 20 6D 
373cc     61 74 63 68 
373d0     20 27 66 6F 
373d4     72 27       | 	byte	"'Next' doesn't match 'for'"
373d6     00          | 	byte	0
373d7                 | LR__6018
373d7     27 47 6F 74 
373db     6F 27 20 74 
373df     61 72 67 65 
373e3     74 20 6C 69 
373e7     6E 65 20 6E 
373eb     6F 74 20 66 
373ef     6F 75 6E 64 | 	byte	"'Goto' target line not found"
373f3     00          | 	byte	0
373f4                 | LR__6019
373f4     42 61 64 20 
373f8     6E 75 6D 62 
373fc     65 72 20 6F 
37400     66 20 70 61 
37404     72 61 6D 65 
37408     74 65 72 73 | 	byte	"Bad number of parameters"
3740c     00          | 	byte	0
3740d                 | LR__6020
3740d     46 75 6E 63 
37411     74 69 6F 6E 
37415     20 75 6E 64 
37419     65 66 69 6E 
3741d     65 64 20 66 
37421     6F 72 20 73 
37425     74 72 69 6E 
37429     67 73       | 	byte	"Function undefined for strings"
3742b     00          | 	byte	0
3742c                 | LR__6021
3742c     42 61 64 20 
37430     70 61 72 61 
37434     6D 65 74 65 
37438     72          | 	byte	"Bad parameter"
37439     00          | 	byte	0
3743a                 | LR__6022
3743a     43 61 6E 6E 
3743e     6F 74 20 64 
37442     65 63 6C 61 
37446     72 65 20 61 
3744a     6E 20 61 72 
3744e     72 61 79 3A 
37452     20 74 68 65 
37456     20 76 61 72 
3745a     69 61 62 6C 
3745e     65 20 65 78 
37462     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
37466     00          | 	byte	0
37467                 | LR__6023
37467     45 78 70 65 
3746b     63 74 65 64 
3746f     20 27 28 27 | 	byte	"Expected '('"
37473     00          | 	byte	0
37474                 | LR__6024
37474     45 78 70 65 
37478     63 74 65 64 
3747c     20 27 29 27 
37480     20 6F 72 20 
37484     27 2C 27    | 	byte	"Expected ')' or ','"
37487     00          | 	byte	0
37488                 | LR__6025
37488     4E 6F 20 6D 
3748c     6F 72 65 20 
37490     74 68 61 6E 
37494     20 33 20 64 
37498     69 6D 65 6E 
3749c     73 69 6F 6E 
374a0     73 20 73 75 
374a4     70 70 6F 72 
374a8     74 65 64    | 	byte	"No more than 3 dimensions supported"
374ab     00          | 	byte	0
374ac                 | LR__6026
374ac     56 61 72 69 
374b0     61 62 6C 65 
374b4     20 6E 61 6D 
374b8     65 20 65 78 
374bc     70 65 63 74 
374c0     65 64       | 	byte	"Variable name expected"
374c2     00          | 	byte	0
374c3                 | LR__6027
374c3     54 79 70 65 
374c7     20 6E 61 6D 
374cb     65 20 65 78 
374cf     70 65 63 74 
374d3     65 64       | 	byte	"Type name expected"
374d5     00          | 	byte	0
374d6                 | LR__6028
374d6     54 79 70 65 
374da     20 6E 6F 74 
374de     20 73 75 70 
374e2     70 6F 72 74 
374e6     65 64 20 79 
374ea     65 74       | 	byte	"Type not supported yet"
374ec     00          | 	byte	0
374ed                 | LR__6029
374ed     41 72 72 61 
374f1     79 20 69 6E 
374f5     64 65 78 20 
374f9     6F 75 74 20 
374fd     6F 66 20 72 
37501     61 6E 67 65 | 	byte	"Array index out of range"
37505     00          | 	byte	0
37506                 | LR__6030
37506     42 61 64 20 
3750a     74 79 70 65 
3750e     20 77 68 69 
37512     6C 65 20 61 
37516     73 73 69 67 
3751a     6E 69 6E 67 
3751e     20 74 6F 20 
37522     61 72 72 61 
37526     79          | 	byte	"Bad type while assigning to array"
37527     00          | 	byte	0
37528                 | LR__6031
37528     54 6F 6F 20 
3752c     6D 61 6E 79 
37530     20 76 61 72 
37534     69 61 62 6C 
37538     65 73       | 	byte	"Too many variables"
3753a     00          | 	byte	0
3753b                 | LR__6032
3753b     27 54 68 65 
3753f     6E 27 20 65 
37543     78 70 65 63 
37547     74 65 64    | 	byte	"'Then' expected"
3754a     00          | 	byte	0
3754b                 | LR__6033
3754b     44 69 72 65 
3754f     63 74 6F 72 
37553     79 20 64 6F 
37557     65 73 6E 27 
3755b     74 20 65 78 
3755f     69 73 74    | 	byte	"Directory doesn't exist"
37562     00          | 	byte	0
37563                 | LR__6034
37563     55 6E 65 78 
37567     70 65 63 74 
3756b     65 64 20 65 
3756f     6E 64 20 6F 
37573     66 20 6C 69 
37577     6E 65       | 	byte	"Unexpected end of line"
37579     00          | 	byte	0
3757a                 | LR__6035
3757a     4E 6F 20 6D 
3757e     6F 72 65 20 
37582     64 61 74 61 | 	byte	"No more data"
37586     00          | 	byte	0
37587                 | LR__6036
37587     45 72 72 6F 
3758b     72 20       | 	byte	"Error "
3758d     00          | 	byte	0
3758e                 | LR__6037
3758e     20 2D 20    | 	byte	" - "
37591     00          | 	byte	0
37592                 | LR__6038
37592     20 69 6E 20 
37596     6C 69 6E 65 
3759a     20          | 	byte	" in line "
3759b     00          | 	byte	0
3759c                 | LR__6039
3759c                 | 	byte	
3759c     00          | 	byte	0
3759d                 | LR__6040
3759d     2F 73 64    | 	byte	"/sd"
375a0     00          | 	byte	0
375a1                 | LR__6041
375a1     2F 73 64 2F 
375a5     62 61 73    | 	byte	"/sd/bas"
375a8     00          | 	byte	0
375a9                 | LR__6042
375a9     2F 73 64 2F 
375ad     62 61 73    | 	byte	"/sd/bas"
375b0     00          | 	byte	0
375b1                 | LR__6043
375b1     20 42 41 53 
375b5     49 43 20 62 
375b9     79 74 65 73 
375bd     20 66 72 65 
375c1     65          | 	byte	" BASIC bytes free"
375c2     00          | 	byte	0
375c3                 | LR__6044
375c3     52 65 61 64 
375c7     79          | 	byte	"Ready"
375c8     00          | 	byte	0
375c9                 | LR__6045
375c9     6E 6F 6E 61 
375cd     6D 65 2E 62 
375d1     61 73       | 	byte	"noname.bas"
375d3     00          | 	byte	0
375d4                 | LR__6046
375d4     2F 73 64 2F 
375d8     62 61 73 2F 
375dc     61 75 74 6F 
375e0     72 75 6E 2E 
375e4     62 61 73    | 	byte	"/sd/bas/autorun.bas"
375e7     00          | 	byte	0
375e8                 | LR__6047
375e8     72 75 6E 20 
375ec     61 75 74 6F 
375f0     72 75 6E 2E 
375f4     62 61 73    | 	byte	"run autorun.bas"
375f7     00          | 	byte	0
375f8                 | LR__6048
375f8                 | 	byte	
375f8     00          | 	byte	0
375f9     00 00 00    | 	alignl
375fc                 | _dat_
375fc     00 00 00 00 
37600     00 00 00 00 
37604     00 00 00 00 
37608     00 00 00 00 | 	byte	$00[16]
3760c     61 41 17 0E 
37610     62 42 00 00 
37614     63 43 19 10 
37618     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3761c     65 45 18 0F 
37620     66 46 00 00 
37624     67 47 00 00 
37628     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3762c     69 49 00 00 
37630     6A 4A 00 00 
37634     6B 4B 00 00 
37638     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
3763c     6D 4D 00 00 
37640     6E 4E 1A 11 
37644     6F 4F 1E 15 
37648     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
3764c     71 51 00 00 
37650     72 52 00 00 
37654     73 53 1B 12 
37658     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
3765c     75 55 00 00 
37660     76 56 00 00 
37664     77 57 00 00 
37668     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
3766c     79 59 00 00 
37670     7A 5A 1D 14 
37674     31 21 04 00 
37678     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
3767c     33 23 06 00 
37680     34 24 07 00 
37684     35 25 08 00 
37688     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
3768c     37 26 0A 00 
37690     38 2A 0B 00 
37694     39 28 0C 00 
37698     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3769c     8D 8D 00 00 
376a0     9B 9B 00 00 
376a4     88 88 00 00 
376a8     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
376ac     20 20 00 00 
376b0     2D 5F 00 00 
376b4     3D 2B 00 00 
376b8     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
376bc     5D 7D 00 00 
376c0     5C 7C 00 00 
376c4     23 7E 00 00 
376c8     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
376cc     27 22 00 00 
376d0     60 7E 03 00 
376d4     2C 3C 00 00 
376d8     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
376dc     2F 3F 00 00 
376e0     B9 B9 00 00 
376e4     BA 00 00 00 
376e8     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
376ec     BC 00 00 00 
376f0     BD 00 00 00 
376f4     BE 00 00 00 
376f8     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
376fc     C0 00 00 00 
37700     C1 00 00 00 
37704     C2 00 00 00 
37708     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
3770c     C4 00 00 00 
37710     C5 00 00 00 
37714     C6 00 00 00 
37718     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
3771c     C8 00 00 00 
37720     C9 00 00 00 
37724     CA 00 00 00 
37728     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
3772c     7F 7F 00 00 
37730     CC 00 00 00 
37734     CD 00 00 00 
37738     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
3773c     CF 00 00 00 
37740     D0 00 00 00 
37744     D1 00 00 00 
37748     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
3774c     2F 2F 00 00 
37750     2A 2A 00 00 
37754     2D 2D 00 00 
37758     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
3775c     8D 8D 00 00 
37760     31 31 00 00 
37764     32 32 00 00 
37768     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
3776c     34 34 00 00 
37770     35 35 00 00 
37774     36 36 00 00 
37778     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
3777c     38 38 00 00 
37780     39 39 00 00 
37784     30 30 00 00 
37788     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
3778c     5C 7C 00 00 
37790     00 00 00 00 
37794     00 00 00 00 
37798     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
3779c     00 00 00 00 
      ...             
377f4     00 00 00 00 
377f8     00 00 00 00 | 	byte	$00[96]
377fc     2B 00 A6 F2 
37800     24 A7 09 80 
37804     5B 88 4D 89 
37808     80 88 A5 88 | atari_spl file "atari.spl"
3780c     6D 88 B8 88 
37810     80 88 CB 88 
37814     92 88 A5 88 
37818     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
3781c     A5 88 CA 88 
37820     A6 88 DD 88 
37824     B8 88 AB 89 
37828     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
3782c     C8 AD C6 F1 
37830     91 06 B6 FF 
37834     13 00 4A 00 
37838     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
3783c     5D 00 5E 00 
37840     5D 00 5E 00 
37844     5E 00 5D 00 
37848     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
3784c     38 00 83 00 
37850     25 00 83 00 
37854     C3 FE D1 04 
37858     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
3785c     48 88 38 85 
37860     41 8A CB 88 
37864     28 89 B8 88 
37868     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
3786c     15 89 03 89 
37870     02 89 15 89 
37874     16 89 15 89 
37878     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
3787c     15 89 3A 89 
37880     72 89 E3 89 
37884     52 83 AD 97 
37888     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
3788c     0C 02 B6 FF 
37890     E1 00 A8 00 
37894     F3 00 A8 00 
37898     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
3789c     CE 00 CD 00 
378a0     CD 00 BA 00 
378a4     E1 00 BB 00 
378a8     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
378ac     DF 00 C9 FF 
378b0     E6 01 B6 06 
378b4     EE DD 8D 98 
378b8     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
378bc     97 89 73 89 
378c0     3B 89 60 89 
378c4     60 89 60 89 
378c8     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
378cc     73 89 72 89 
378d0     85 89 73 89 
378d4     AA 89 60 89 
378d8     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
378dc     E8 8A 18 86 
378e0     92 88 A5 C2 
378e4     E0 00 C3 05 
378e8     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
378ec     F2 00 64 01 
378f0     06 01 3E 01 
378f4     2B 01 2B 01 
378f8     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
378fc     2B 01 2A 01 
37900     2B 01 2B 01 
37904     2B 01 18 01 
37908     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
3790c     39 07 61 F3 
37910     C0 AF 37 85 
37914     0F 88 8B 8A 
37918     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
3791c     AB 89 D0 89 
37920     AB 89 D0 89 
37924     D0 89 CF 89 
37928     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
3792c     D0 89 F5 89 
37930     BD 89 08 8A 
37934     CF 89 E8 8A 
37938     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
3793c     53 B3 0D F8 
37940     F4 07 38 00 
37944     63 01 63 01 
37948     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
3794c     88 01 88 01 
37950     76 01 88 01 
37954     88 01 89 01 
37958     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
3795c     75 01 AE 01 
37960     76 01 88 01 
37964     4A 00 46 06 
37968     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
3796c     08 8A 9A 86 
37970     33 8B 08 8A 
37974     2D 8A F5 89 
37978     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
3797c     2D 8A 2D 8A 
37980     2E 8A 1B 8A 
37984     40 8A 2D 8A 
37988     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
3798c     2E 8A 79 8A 
37990     66 8A C8 8B 
37994     72 82 2B 97 
37998     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
3799c     1D 02 05 01 
379a0     F8 01 C0 01 
379a4     0B 02 C0 01 
379a8     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
379ac     F9 01 D3 01 
379b0     F8 01 D3 01 
379b4     F8 01 D2 01 
379b8     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
379bc     E6 01 2B 01 
379c0     8E 02 5F 07 
379c4     F7 E2 ED 9C 
379c8     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
379cc     E8 8A 78 8A 
379d0     78 8A 65 8A 
379d4     8B 8A 78 8A 
379d8     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
379dc     8B 8A 9D 8A 
379e0     9D 8A 8B 8A 
379e4     C2 8A 78 8A 
379e8     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
379ec     70 8C 18 86 
379f0     8B 8A 23 C9 
379f4     CB 03 C4 05 
379f8     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
379fc     0B 02 7B 02 
37a00     1E 02 55 02 
37a04     30 02 43 02 
37a08     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
37a0c     43 02 44 02 
37a10     43 02 30 02 
37a14     68 02 31 02 
37a18     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
37a1c     07 08 3F F7 
37a20     73 B2 13 85 
37a24     15 89 ED 8B 
37a28     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
37a2c     B0 8A FB 8A 
37a30     D5 8A FA 8A 
37a34     E8 8A FB 8A 
37a38     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
37a3c     E8 8A 21 8B 
37a40     E7 8A 33 8B 
37a44     E8 8A 26 8C 
37a48     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
37a4c     8D B0 27 F6 
37a50     9C 08 AD 01 
37a54     7B 02 8D 02 
37a58     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
37a5c     A1 02 A0 02 
37a60     A1 02 A0 02 
37a64     A0 02 A0 02 
37a68     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
37a6c     7B 02 D8 02 
37a70     7B 02 C6 02 
37a74     3E 01 C3 05 
37a78     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
37a7c     00 8C 2A 86 
37a80     E0 8C FA 8A 
37a84     6A 8B FB 8A 
37a88     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
37a8c     45 8B 45 8B 
37a90     45 8B 6B 8B 
37a94     46 8B 59 8B 
37a98     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
37a9c     6B 8B 6B 8B 
37aa0     6B 8B 6B 8B 
37aa4     7D 8B 7D 8B 
37aa8     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
37aac     90 8B 91 8B 
37ab0     90 8B 90 8B 
37ab4     A3 8B A3 8B 
37ab8     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
37abc     B5 8B B6 8B 
37ac0     B5 8B B5 8B 
37ac4     B6 8B C8 8B 
37ac8     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
37acc     C8 8B DA 8B 
37ad0     DB 8B DB 8B 
37ad4     DB 8B DC 8B 
37ad8     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
37adc     EE 8B EE 8B 
37ae0     00 8C 01 8C 
37ae4     00 8C 01 8C 
37ae8     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
37aec     12 8C 13 8C 
37af0     13 8C 26 8C 
37af4     26 8C 26 8C 
37af8     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
37afc     38 8C 38 8C 
37b00     38 8C 38 8C 
37b04     4B 8C 4B 8C 
37b08     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
37b0c     5E 8C 5E 8C 
37b10     5E 8C 5E 8C 
37b14     70 8C 70 8C 
37b18     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
37b1c     70 8C 83 8C 
37b20     83 8C 83 8C 
37b24     83 8C 96 8C 
37b28     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
37b2c     95 8C A9 8C 
37b30     A9 8C A8 8C 
37b34     A8 8C A8 8C 
37b38     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
37b3c     BB 8C BB 8C 
37b40     BB 8C CE 8C 
37b44     CE 8C CE 8C 
37b48     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
37b4c     E0 8C E1 8C 
37b50     E1 8C E0 8C 
37b54     F4 8C F2 8C 
37b58     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
37b5c     05 8D 05 8D 
37b60     06 8D 06 8D 
37b64     19 8D 19 8D 
37b68     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
37b6c     18 8D 2B 8D 
37b70     2B 8D 2B 8D 
37b74     2A 8D 3E 8D 
37b78     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
37b7c     3E 8D 51 8D 
37b80     50 8D 50 8D 
37b84     50 8D 51 8D 
37b88     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
37b8c     63 8D 64 8D 
37b90     76 8D 75 8D 
37b94     75 8D 76 8D 
37b98     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
37b9c     88 8D 88 8D 
37ba0     89 8D 9B 8D 
37ba4     9A 8D 9B 8D 
37ba8     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
37bac     AD 8D AE 8D 
37bb0     AD 8D AE 8D 
37bb4     C1 8D C1 8D 
37bb8     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
37bbc     D3 8D D3 8D 
37bc0     D3 8D D3 8D 
37bc4     D3 8D E6 8D 
37bc8     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
37bcc     E6 8D E6 8D 
37bd0     F9 8D F9 8D 
37bd4     F9 8D F8 8D 
37bd8     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
37bdc     0B 8E 0B 8E 
37be0     1D 8E 1D 8E 
37be4     1E 8E 1E 8E 
37be8     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
37bec     31 8E 31 8E 
37bf0     31 8E 42 8E 
37bf4     43 8E 43 8E 
37bf8     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
37bfc     56 8E 56 8E 
37c00     55 8E 56 8E 
37c04     68 8E 69 8E 
37c08     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
37c0c     69 8E 7B 8E 
37c10     7C 8E 7B 8E 
37c14     7B 8E 8D 8E 
37c18     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
37c1c     8D 8E A1 8E 
37c20     A0 8E A1 8E 
37c24     A1 8E A0 8E 
37c28     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
37c2c     B3 8E B3 8E 
37c30     C6 8E C5 8E 
37c34     C6 8E C6 8E 
37c38     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
37c3c     D8 8E D9 8E 
37c40     D8 8E EC 8E 
37c44     EB 8E EC 8E 
37c48     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
37c4c     FE 8E FE 8E 
37c50     FE 8E FE 8E 
37c54     10 8F 10 8F 
37c58     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
37c5c     11 8F 23 8F 
37c60     24 8F 23 8F 
37c64     24 8F 37 8F 
37c68     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
37c6c     36 8F 36 8F 
37c70     48 8F 49 8F 
37c74     49 8F 49 8F 
37c78     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
37c7c     5B 8F 5C 8F 
37c80     5B 8F 6E 8F 
37c84     6E 8F 6E 8F 
37c88     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
37c8c     81 8F 81 8F 
37c90     81 8F 81 8F 
37c94     93 8F 93 8F 
37c98     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
37c9c     93 8F A6 8F 
37ca0     A6 8F A6 8F 
37ca4     A6 8F B9 8F 
37ca8     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
37cac     B9 8F B9 8F 
37cb0     CC 8F CB 8F 
37cb4     CB 8F CC 8F 
37cb8     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
37cbc     DF 8F DE 8F 
37cc0     DE 8F F1 8F 
37cc4     F1 8F F1 8F 
37cc8     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
37ccc     03 90 04 90 
37cd0     04 90 04 90 
37cd4     16 90 17 90 
37cd8     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
37cdc     29 90 28 90 
37ce0     29 90 28 90 
37ce4     29 90 3C 90 
37ce8     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
37cec     3C 90 4F 90 
37cf0     4E 90 4E 90 
37cf4     4E 90 4E 90 
37cf8     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
37cfc     61 90 61 90 
37d00     73 90 74 90 
37d04     74 90 74 90 
37d08     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
37d0c     87 90 86 90 
37d10     87 90 86 90 
37d14     99 90 99 90 
37d18     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
37d1c     AB 90 AB 90 
37d20     AC 90 AB 90 
37d24     AB 90 BF 90 
37d28     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
37d2c     BE 90 D1 90 
37d30     D0 90 D1 90 
37d34     D1 90 D1 90 
37d38     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
37d3c     E3 90 E4 90 
37d40     F6 90 F6 90 
37d44     F6 90 F6 90 
37d48     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
37d4c     09 91 0A 91 
37d50     0A 91 1C 91 
37d54     1C 91 1C 91 
37d58     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
37d5c     2F 91 2E 91 
37d60     2F 91 2F 91 
37d64     2E 91 41 91 
37d68     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
37d6c     41 91 53 91 
37d70     54 91 54 91 
37d74     53 91 54 91 
37d78     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
37d7c     67 91 67 91 
37d80     79 91 7A 91 
37d84     79 91 78 91 
37d88     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
37d8c     8C 91 8B 91 
37d90     8C 91 8C 91 
37d94     9E 91 9E 91 
37d98     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
37d9c     B1 91 B1 91 
37da0     B2 91 B1 91 
37da4     B1 91 C4 91 
37da8     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
37dac     C4 91 D6 91 
37db0     D7 91 D7 91 
37db4     D7 91 D6 91 
37db8     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
37dbc     EA 91 EA 91 
37dc0     EA 91 FC 91 
37dc4     FC 91 FB 91 
37dc8     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
37dcc     0E 92 0F 92 
37dd0     0F 92 0E 92 
37dd4     21 92 21 92 
37dd8     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
37ddc     21 92 34 92 
37de0     33 92 34 92 
37de4     34 92 47 92 
37de8     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
37dec     46 92 47 92 
37df0     59 92 59 92 
37df4     59 92 59 92 
37df8     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
37dfc     6C 92 6C 92 
37e00     6B 92 7E 92 
37e04     7E 92 7E 92 
37e08     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
37e0c     92 92 91 92 
37e10     91 92 90 92 
37e14     91 92 A4 92 
37e18     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
37e1c     A3 92 B6 92 
37e20     B6 92 B7 92 
37e24     B7 92 B6 92 
37e28     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
37e2c     CA 92 C9 92 
37e30     CA 92 DC 92 
37e34     DC 92 DC 92 
37e38     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
37e3c     EF 92 EF 92 
37e40     EF 92 EF 92 
37e44     01 93 01 93 
37e48     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
37e4c     15 93 14 93 
37e50     14 93 14 93 
37e54     14 93 27 93 
37e58     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
37e5c     27 93 39 93 
37e60     3A 93 39 93 
37e64     39 93 39 93 
37e68     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
37e6c     4B 93 4C 93 
37e70     5F 93 5F 93 
37e74     5F 93 5E 93 
37e78     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
37e7c     5F 93 84 93 
37e80     4C 93 96 93 
37e84     5F 93 AE 94 
37e88     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
37e8c     7B C1 00 00 
37e90     00 00 00 00 
37e94     00 00 00 00 
37e98     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37e9c     00 00 00 00 | 	byte	$00, $00, $00, $00
37ea0     7A D7 00 80 
37ea4     87 8A 48 8F 
37ea8     EC 8C 76 8D 
37eac     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
37eb0     3C 8D 82 8D 
37eb4     42 8D 88 8D 
37eb8     8C 8D 8E 8D 
37ebc     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
37ec0     97 8D DE 8D 
37ec4     E1 8D F1 8E 
37ec8     D8 8C A3 83 
37ecc     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
37ed0     65 71 C9 65 
37ed4     FC 64 C4 65 
37ed8     C1 65 BF 65 
37edc     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
37ee0     B6 65 B4 65 
37ee4     B2 65 AE 65 
37ee8     AC 65 ED 65 
37eec     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
37ef0     5E 65 25 66 
37ef4     FA 62 23 6B 
37ef8     B5 6C 61 0A 
37efc     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
37f00     5D 90 BE 8D 
37f04     47 8E C3 8D 
37f08     09 8E C9 8D 
37f0c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
37f10     15 8E 19 8E 
37f14     1B 8E 62 8E 
37f18     64 8E 68 8E 
37f1c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
37f20     B5 8E 4C 90 
37f24     FA 84 3C 9D 
37f28     98 13 79 6D 
37f2c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
37f30     D9 66 50 66 
37f34     D4 66 4B 66 
37f38     8C 66 46 66 
37f3c     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
37f40     81 66 3A 66 
37f44     7C 66 36 66 
37f48     76 66 30 66 
37f4c     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
37f50     6B 66 88 72 
37f54     BF 37 E7 B7 
37f58     75 83 8B 8E 
37f5c     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
37f60     94 8E 96 8E 
37f64     DD 8E 9C 8E 
37f68     E2 8E A2 8E 
37f6c     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
37f70     EE 8E AE 8E 
37f74     38 8F B5 8E 
37f78     3F 8F FD 8E 
37f7c     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
37f80     A5 87 1E E3 
37f84     6D 5D FA 71 
37f88     41 64 25 67 
37f8c     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
37f90     D9 66 1A 67 
37f94     18 67 15 67 
37f98     12 67 0F 67 
37f9c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
37fa0     07 67 C0 66 
37fa4     01 67 BC 66 
37fa8     B8 66 DE 64 
37fac     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
37fb0     43 E5 1F 8B 
37fb4     14 8A F1 90 
37fb8     1C 8F 63 8F 
37fbc     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
37fc0     29 8F 6E 8F 
37fc4     72 8F 75 8F 
37fc8     34 8F BE 8F 
37fcc     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
37fd0     84 8F 87 8F 
37fd4     CC 8F 56 90 
37fd8     67 91 49 80 
37fdc     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
37fe0     46 77 A6 66 
37fe4     E8 66 B0 67 
37fe8     AD 67 ED 67 
37fec     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
37ff0     A2 67 E3 67 
37ff4     9D 67 9A 67 
37ff8     98 67 94 67 
37ffc     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
38000     49 67 CD 67 
38004     28 65 5F 6E 
38008     82 67 3A 01 
3800c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
38010     C2 91 A9 8F 
38014     EF 8F AE 8F 
38018     F4 8F B5 8F 
3801c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
38020     01 90 03 90 
38024     07 90 09 90 
38028     0C 90 53 90 
3802c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
38030     18 90 44 93 
38034     85 84 D6 9D 
38038     87 1F 2F 75 
3803c     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
38040     C4 68 F6 67 
38044     BE 68 F1 67 
38048     76 68 2E 68 
3804c     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
38050     27 68 24 68 
38054     64 68 1E 68 
38058     5F 68 19 68 
3805c     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
38060     DC 68 56 72 
38064     7E 36 C2 B8 
38068     D7 84 73 90 
3806c     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
38070     7B 90 7F 90 
38074     82 90 84 90 
38078     CB 90 8B 90 
3807c     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
38080     D7 90 96 90 
38084     20 91 59 90 
38088     25 91 A2 90 
3808c     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
38090     D0 89 40 EE 
38094     12 64 C4 71 
38098     29 66 0C 69 
3809c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
380a0     C0 68 02 69 
380a4     FE 68 FB 68 
380a8     F9 68 F6 68 
380ac     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
380b0     EE 68 A8 68 
380b4     2C 69 5F 68 
380b8     E2 68 81 66 
380bc     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
380c0     1E EB A6 8A 
380c4     73 8B 5E 93 
380c8     7B 90 48 91 
380cc     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
380d0     0D 91 11 91 
380d4     14 91 16 91 
380d8     5C 91 1C 91 
380dc     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
380e0     68 91 AF 91 
380e4     2A 91 B5 91 
380e8     75 91 1A 94 
380ec     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
380f0     70 0E CB 6C 
380f4     5D 6E C4 67 
380f8     99 69 54 69 
380fc     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
38100     D2 69 49 69 
38104     89 69 86 69 
38108     40 69 C4 69 
3810c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
38110     35 69 76 69 
38114     58 67 EB 6D 
38118     E9 6D 89 0F 
3811c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
38120     33 94 94 91 
38124     D9 91 56 91 
38128     E0 91 9F 91 
3812c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
38130     EC 91 EE 91 
38134     F1 91 F4 91 
38138     F7 91 3D 92 
3813c     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
38140     46 92 21 94 
38144     11 89 A4 9D 
38148     FD 0E 8F 6C 
3814c     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
38150     28 6A E1 69 
38154     65 6A 1F 6A 
38158     5F 6A 1A 6A 
3815c     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
38160     54 6A 0F 6A 
38164     4F 6A 09 6A 
38168     06 6A 03 6A 
3816c     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
38170     23 68 69 77 
38174     3A 4D 38 CA 
38178     38 86 4E 91 
3817c     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
38180     64 92 24 92 
38184     6A 92 2A 92 
38188     70 92 30 92 
3818c     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
38190     7B 92 7E 92 
38194     C5 92 84 92 
38198     CB 92 8A 92 
3819c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
381a0     4D 8D F9 E2 
381a4     97 59 FE 74 
381a8     DB 68 6D 6A 
381ac     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
381b0     A8 6A A5 6A 
381b4     A3 6A 9F 6A 
381b8     9D 6A 9B 6A 
381bc     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
381c0     D6 6A 8F 6A 
381c4     CF 6A 46 6A 
381c8     CA 6A E1 67 
381cc     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
381d0     D3 F7 15 92 
381d4     90 8C BF 94 
381d8     A6 92 EB 92 
381dc     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
381e0     B1 92 F7 92 
381e4     FA 92 FD 92 
381e8     00 93 02 93 
381ec     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
381f0     4F 93 52 93 
381f4     54 93 22 94 
381f8     5A 93 8F 88 
381fc     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
38200     1C 77 07 6C 
38204     E8 69 7A 6B 
38208     34 6B 75 6B 
3820c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
38210     29 6B 26 6B 
38214     24 6B 21 6B 
38218     1D 6B 5E 6B 
3821c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
38220     12 6B 52 6B 
38224     34 69 34 6E 
38228     BA 73 A4 24 
3822c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
38230     7A 94 B3 93 
38234     72 93 31 93 
38238     78 93 7A 93 
3823c     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
38240     83 93 86 93 
38244     89 93 D0 93 
38248     D2 93 D5 93 
3824c     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
38250     DD 93 40 96 
38254     30 8B 99 9C 
38258     52 10 94 71 
3825c     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
38260     46 6C 79 6B 
38264     40 6C B7 6B 
38268     F7 6B B1 6B 
3826c     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
38270     EC 6B A5 6B 
38274     A2 6B 9F 6B 
38278     9D 6B 9A 6B 
3827c     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
38280     C8 6A E4 76 
38284     20 4B F9 CE 
38288     2E 8A 1A 92 
3828c     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
38290     FB 93 BA 93 
38294     01 94 03 94 
38298     4A 94 09 94 
3829c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
382a0     55 94 14 94 
382a4     9E 94 1A 94 
382a8     61 94 20 94 
382ac     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
382b0     3E 87 E5 CD 
382b4     5F 50 6C 78 
382b8     B5 6A 04 6C 
382bc     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
382c0     83 6C 7F 6C 
382c4     7C 6C 36 6C 
382c8     76 6C 74 6C 
382cc     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
382d0     6B 6C 25 6C 
382d4     66 6C 1F 6C 
382d8     1D 6C 41 6A 
382dc     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
382e0     BA FA FC 94 
382e4     5B 8D 97 96 
382e8     3B 94 C5 94 
382ec     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
382f0     89 94 8C 94 
382f4     8F 94 92 94 
382f8     94 94 DB 94 
382fc     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
38300     E4 94 E7 94 
38304     2D 95 74 95 
38308     C8 96 15 89 
3830c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
38310     CB 75 31 6F 
38314     7E 6B 10 6D 
38318     C9 6C 0A 6D 
3831c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
38320     BD 6C FF 6C 
38324     FB 6C F9 6C 
38328     B2 6C F3 6C 
3832c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
38330     A7 6C E8 6C 
38334     0D 6B 85 6F 
38338     C7 74 10 28 
3833c     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
38340     96 96 47 95 
38344     06 95 0A 95 
38348     0C 95 0F 95 
3834c     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
38350     17 95 5E 95 
38354     61 95 63 95 
38358     22 95 AC 95 
3835c     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
38360     72 95 17 98 
38364     59 8E 01 96 
38368     CF FC 5A 68 
3836c     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
38370     96 6D 50 6D 
38374     D5 6D 4A 6D 
38378     8C 6D 89 6D 
3837c     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
38380     80 6D 3A 6D 
38384     7A 6D 77 6D 
38388     75 6D 71 6D 
3838c     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
38390     18 6C BC 78 
38394     9A 4F 7E CF 
38398     1F 89 F1 93 
3839c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
383a0     D2 95 4E 95 
383a4     D7 95 53 95 
383a8     DD 95 E0 95 
383ac     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
383b0     A5 95 EB 95 
383b4     EE 95 F0 95 
383b8     37 96 B3 95 
383bc     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
383c0     1A 98 D5 8D 
383c4     C5 9F CD 0F 
383c8     0F 71 F3 73 
383cc     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
383d0     D9 6D 5E 6E 
383d4     D3 6D 58 6E 
383d8     12 6E 0F 6E 
383dc     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
383e0     49 6E BF 6D 
383e4     87 6E 76 6D 
383e8     81 6E 11 6B 
383ec     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
383f0     3F 09 44 95 
383f4     E5 8D 3F 99 
383f8     D4 95 A2 96 
383fc     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
38400     23 96 69 96 
38404     6B 96 6E 96 
38408     71 96 74 96 
3840c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
38410     BF 96 3C 96 
38414     C6 96 C8 96 
38418     A3 98 51 8D 
3841c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
38420     CF 75 29 73 
38424     90 6C EC 6E 
38428     62 6E E7 6E 
3842c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
38430     9A 6E 98 6E 
38434     95 6E 91 6E 
38438     8E 6E CF 6E 
3843c     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
38440     40 6E C3 6E 
38444     E8 6C 45 6F 
38448     A5 7B C9 35 
3844c     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
38450     2D 98 23 97 
38454     E1 96 A0 96 
38458     A4 96 EA 96 
3845c     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
38460     AF 96 F4 96 
38464     F8 96 3E 97 
38468     FD 96 43 97 
3846c     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
38470     08 97 6B 99 
38474     D6 92 88 91 
38478     D8 EE 84 66 
3847c     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
38480     2E 6F E7 6E 
38484     6C 6F 24 6F 
38488     21 6F 1F 6F 
3848c     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
38490     17 6F 13 6F 
38494     54 6F 0E 6F 
38498     0B 6F 4B 6F 
3849c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
384a0     27 6D 1C 7B 
384a4     19 59 9F DB 
384a8     66 8E BC 94 
384ac     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
384b0     67 97 26 97 
384b4     6D 97 2B 97 
384b8     72 97 32 97 
384bc     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
384c0     C1 97 7F 97 
384c4     C6 97 85 97 
384c8     CB 97 CE 97 
384cc     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
384d0     EC 8A C4 C6 
384d4     68 4C F4 7D 
384d8     63 6E E8 6E 
384dc     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
384e0     ED 6F A7 6F 
384e4     E7 6F A0 6F 
384e8     E1 6F 9B 6F 
384ec     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
384f0     D5 6F 8F 6F 
384f4     CE 6F 45 6F 
384f8     86 6F 68 6D 
384fc     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
38500     C0 13 AD A2 
38504     A7 8E 79 99 
38508     E6 97 E8 97 
3850c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
38510     F1 97 F3 97 
38514     F6 97 F9 97 
38518     FB 97 FE 97 
3851c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
38520     4A 98 0A 98 
38524     93 98 0F 98 
38528     7F 9B BF 8C 
3852c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
38530     91 7B 62 73 
38534     1A 6E B9 70 
38538     EB 6F B3 70 
3853c     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
38540     25 70 20 70 
38544     1E 70 1B 70 
38548     18 70 15 70 
3854c     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
38550     0D 70 09 70 
38554     07 70 03 70 
38558     01 70 FD 6F 
3855c     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
38560     F6 6F F2 6F 
38564     EF 6F EC 6F 
38568     2C 70 E6 6F 
3856c     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
38570     DD 6F 97 6F 
38574     D7 6F 84 6E 
38578     8F 6F 3F 7D 
3857c     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
3857e     FF FF FF FF 
38582     FF FF       | atarist_spl file "atarist.spl" '512
38584     00 00 00 00 
38588     00 00 00 00 
3858c     00 00       | 	byte	$00[10]
3858e     17 7F F2 7F 
38592     B2 7F 72 7F 
38596     33 7F F4 7E 
3859a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3859e     36 7E F5 7D 
385a2     E9 51 F2 0D 
385a6     8E 00 F3 FD 
385aa     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
385ae     57 FD 58 FD 
385b2     5B FD 5C FD 
385b6     5C FD 60 7D 
385ba     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
385be     D6 7C 98 7C 
385c2     59 7C 1A 7C 
385c6     DC 7B 9E 7B 
385ca     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
385ce     F3 05 00 FD 
385d2     41 FB EA FA 
385d6     D9 FA DB FA 
385da     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
385de     E4 FA 9B 36 
385e2     F8 7A C0 7A 
385e6     84 7A 45 7A 
385ea     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
385ee     8E 79 51 79 
385f2     15 79 D7 78 
385f6     3C 1F EB FF 
385fa     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
385fe     6D F8 65 F8 
38602     68 F8 6D F8 
38606     70 F8 74 F8 
3860a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3860e     AB 60 79 60 
38612     4B 60 1A 60 
38616     E9 5F B9 5F 
3861a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3861e     FB 59 B2 0B 
38622     92 FA 3A F7 
38626     96 F6 79 F6 
3862a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3862e     82 F6 86 F6 
38632     8C F6 DB 5D 
38636     F1 5E C1 5E 
3863a     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
3863e     34 5E 04 5E 
38642     D6 5D A6 5D 
38646     78 5D D4 3E 
3864a     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
3864e     27 F5 BA F4 
38652     AB F4 AD F4 
38656     B2 F4 B8 F4 
3865a     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
3865e     26 5D 2B 5D 
38662     FC 5C CD 5C 
38666     9F 5C 70 5C 
3866a     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
3866e     E5 5B B8 5B 
38672     DB 24 A7 FC 
38676     D1 F4 4D F3 
3867a     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
3867e     04 F3 0B F3 
38682     11 F3 16 F3 
38686     DE 18 98 5B 
3868a     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
3868e     4E 4A 29 48 
38692     A0 47 6A 47 
38696     43 47 20 47 
3869a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3869e     E2 F6 98 F2 
386a2     C5 F1 A3 F1 
386a6     A3 F1 A8 F1 
386aa     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
386ae     BF F1 00 3D 
386b2     EF 46 CD 46 
386b6     AA 46 86 46 
386ba     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
386be     1C 46 F9 45 
386c2     D7 45 EE 43 
386c6     DE 02 E8 F3 
386ca     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
386ce     61 F0 65 F0 
386d2     6D F0 74 F0 
386d6     7C F0 84 F0 
386da     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
386de     8E 45 6D 45 
386e2     49 45 27 45 
386e6     05 45 E1 44 
386ea     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
386ee     F1 2F A9 FB 
386f2     8B F1 9B EF 
386f6     40 EF 36 EF 
386fa     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
386fe     4D EF 56 EF 
38702     5E EF 7B 44 
38706     8C 44 69 44 
3870a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3870e     03 44 E1 43 
38712     C0 43 F5 37 
38716     69 33 0F 11 
3871a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3871e     66 EE 37 EE 
38722     38 EE 40 EE 
38726     48 EE 51 EE 
3872a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3872e     7D 32 6A 32 
38732     51 32 37 32 
38736     1F 32 05 32 
3873a     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
3873e     B9 31 A1 31 
38742     F1 04 F4 F1 
38746     50 EE A0 ED 
3874a     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
3874e     93 ED 9A ED 
38752     A4 ED AD ED 
38756     F4 27 C1 31 
3875a     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
3875e     78 31 5F 31 
38762     46 31 2E 31 
38766     15 31 FC 30 
3876a     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
3876e     C4 EF 4A ED 
38772     DC EC CB EC 
38776     D2 EC DA EC 
3877a     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
3877e     F9 EC 64 2F 
38782     0A 31 F1 30 
38786     D9 30 C0 30 
3878a     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
3878e     78 30 5F 30 
38792     46 30 38 23 
38796     A6 F6 19 EE 
3879a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
3879e     20 EC 28 EC 
387a2     32 EC 3C EC 
387a6     47 EC 51 EC 
387aa     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
387ae     A3 22 93 22 
387b2     7F 22 6E 22 
387b6     5D 22 4C 22 
387ba     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
387be     77 09 76 F1 
387c2     CC EC F0 EB 
387c6     CD EB CE EB 
387ca     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
387ce     ED EB F5 EB 
387d2     3E F6 6B 22 
387d6     5F 22 4E 22 
387da     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
387de     1B 22 0B 22 
387e2     FA 21 E9 21 
387e6     D8 21 4D FF 
387ea     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
387ee     92 EB 7B EB 
387f2     82 EB 8C EB 
387f6     97 EB A1 EB 
387fa     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
387fe     15 22 04 22 
38802     F3 21 E3 21 
38806     D2 21 C0 21 
3880a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
3880e     8E 21 7D 21 
38812     9A F8 A4 ED 
38816     8E EB 2F EB 
3881a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
3881e     37 EB 42 EB 
38822     4C EB 57 EB 
38826     B2 17 22 19 
3882a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
3882e     FD 18 EF 18 
38832     E3 18 D6 18 
38836     CA 18 BD 18 
3883a     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
3883e     60 EC 35 EB 
38842     01 EB 01 EB 
38846     0C EB 16 EB 
3884a     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
3884e     34 EB D0 18 
38852     00 19 F4 18 
38856     E8 18 DA 18 
3885a     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
3885e     B6 18 A9 18 
38862     9D 18 91 05 
38866     F0 EF CA EB 
3886a     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
3886e     E8 EA F2 EA 
38872     FE EA 07 EB 
38876     12 EB C2 EF 
3887a     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
3887e     D9 18 CD 18 
38882     C0 18 B3 18 
38886     A7 18 9B 18 
3888a     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
3888e     B8 FC 30 EE 
38892     61 EB DC EA 
38896     CD EA D2 EA 
3889a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
3889e     F3 EA FE EA 
388a2     D2 09 D1 18 
388a6     C3 18 17 18 
388aa     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
388ae     66 11 52 11 
388b2     49 11 41 11 
388b6     38 11 E0 F4 
388ba     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
388be     C9 EA C5 EA 
388c2     CF EA DB EA 
388c6     E6 EA EF EA 
388ca     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
388ce     89 11 80 11 
388d2     78 11 6E 11 
388d6     67 11 5D 11 
388da     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
388de     43 11 32 0D 
388e2     9C F1 07 EC 
388e6     F8 EA CD EA 
388ea     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
388ee     E4 EA ED EA 
388f2     F8 EA 02 EB 
388f6     55 11 91 11 
388fa     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
388fe     75 11 6E 11 
38902     64 11 5E 11 
38906     54 11 4A 11 
3890a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
3890e     A8 EB F1 EA 
38912     D9 EA DC EA 
38916     E8 EA F1 EA 
3891a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
3891e     A6 EB 9E 11 
38922     A0 11 96 11 
38926     8D 11 85 11 
3892a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
3892e     6A 11 CA 0D 
38932     36 0B 57 F8 
38936     6C ED 57 EB 
3893a     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
3893e     F4 EA FF EA 
38942     09 EB 15 EB 
38946     1E EB 1A FD 
3894a     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
3894e     ED 0A E8 0A 
38952     E2 0A DC 0A 
38956     D6 0A D1 0A 
3895a     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
3895e     F8 F3 BC EC 
38962     57 EB 1E EB 
38966     18 EB 24 EB 
3896a     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
3896e     42 EB 4D EB 
38972     08 09 20 0B 
38976     1A 0B 14 0B 
3897a     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
3897e     04 0B FE 0A 
38982     F9 0A F2 0A 
38986     84 08 3A F1 
3898a     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
3898e     42 EB 42 EB 
38992     4E EB 57 EB 
38996     62 EB 6B EB 
3899a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
3899e     48 0B 43 0B 
389a2     3C 0B 36 0B 
389a6     31 0B 2C 0B 
389aa     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
389ae     1B 0B 5C 00 
389b2     6A EF 1B EC 
389b6     81 EB 6A EB 
389ba     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
389be     85 EB 8E EB 
389c2     99 EB A3 EB 
389c6     DD 05 E5 05 
389ca     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
389ce     DB 05 D8 05 
389d2     D5 05 D1 05 
389d6     D0 05 CB 05 
389da     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
389de     0C EC BB EB 
389e2     B3 EB BB EB 
389e6     C5 EB D0 EB 
389ea     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
389ee     E4 F7 2C 06 
389f2     28 06 24 06 
389f6     22 06 1F 06 
389fa     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
389fe     16 06 14 06 
38a02     0F 06 D0 F3 
38a06     65 ED 2D EC 
38a0a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
38a0e     01 EC 0A EC 
38a12     14 EC 1E EC 
38a16     29 EC FB 03 
38a1a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
38a1e     63 06 60 06 
38a22     5E 06 59 06 
38a26     58 06 54 06 
38a2a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
38a2e     69 F1 21 ED 
38a32     55 EC 33 EC 
38a36     36 EC 40 EC 
38a3a     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
38a3e     5C EC 68 EC 
38a42     92 02 D9 02 
38a46     D7 02 D7 02 
38a4a     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
38a4e     D1 02 D1 02 
38a52     CE 02 CD 02 
38a56     5D FC 80 EF 
38a5a     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
38a5e     83 EC 8A EC 
38a62     93 EC 9C EC 
38a66     A5 EC B1 EC 
38a6a     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
38a6e     2B 03 2A 03 
38a72     29 03 26 03 
38a76     25 03 24 03 
38a7a     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
38a7e     1F 03 70 F7 
38a82     D0 EE 27 ED 
38a86     DB EC D4 EC 
38a8a     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
38a8e     F0 EC FA EC 
38a92     02 ED F9 F4 
38a96     7B 03 7C 03 
38a9a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
38a9e     75 03 73 03 
38aa2     72 03 70 03 
38aa6     6D 03 6C 03 
38aaa     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
38aae     54 ED 22 ED 
38ab2     22 ED 2C ED 
38ab6     35 ED 3F ED 
38aba     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
38abe     14 01 C3 03 
38ac2     C1 03 C0 03 
38ac6     5F 01 A5 00 
38aca     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
38ace     7B 00 7C 00 
38ad2     20 00 85 F1 
38ad6     2A EE 89 ED 
38ada     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
38ade     80 ED 87 ED 
38ae2     90 ED 9A ED 
38ae6     A3 ED 73 00 
38aea     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
38aee     D0 00 D0 00 
38af2     D0 00 D0 00 
38af6     D0 00 CF 00 
38afa     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
38afe     80 F0 3D EE 
38b02     D5 ED C7 ED 
38b06     CD ED D6 ED 
38b0a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
38b0e     F2 ED FA ED 
38b12     1D 01 29 01 
38b16     27 01 27 01 
38b1a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
38b1e     25 01 26 01 
38b22     26 01 23 01 
38b26     D0 F7 EC EF 
38b2a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
38b2e     1C EE 24 EE 
38b32     2D EE 37 EE 
38b36     40 EE 47 EE 
38b3a     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
38b3e     7D 01 7B 01 
38b42     7A 01 7A 01 
38b46     79 01 78 01 
38b4a     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
38b4e     84 FE DE F3 
38b52     6C EF 93 EE 
38b56     72 EE 72 EE 
38b5a     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
38b5e     8B EE 95 EE 
38b62     9E EE 15 FC 
38b66     67 FE 67 FE 
38b6a     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
38b6e     6B FE 6B FE 
38b72     6D FE 6D FE 
38b76     6D FE 6F FE 
38b7a     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
38b7e     DF EE CC EE 
38b82     CF EE D9 EE 
38b86     E1 EE EA EE 
38b8a     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
38b8e     5A FE C4 FE 
38b92     C3 FE C5 FE 
38b96     C6 FE C6 FE 
38b9a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
38b9e     C8 FE C7 FE 
38ba2     DA FB 85 F1 
38ba6     8D EF 31 EF 
38baa     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
38bae     34 EF 3E EF 
38bb2     46 EF 4F EF 
38bb6     57 EF 0D FF 
38bba     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
38bbe     1F FF 1F FF 
38bc2     21 FF 21 FF 
38bc6     21 FF 21 FF 
38bca     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
38bce     15 F1 BE EF 
38bd2     84 EF 7E EF 
38bd6     88 EF 8F EF 
38bda     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
38bde     A9 EF 06 F2 
38be2     A6 FC AB FC 
38be6     AD FC AE FC 
38bea     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
38bee     B2 FC B4 FC 
38bf2     B6 FC B7 FC 
38bf6     8B F4 BD F0 
38bfa     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
38bfe     E4 EF EE EF 
38c02     F6 EF FD EF 
38c06     04 F0 0E F0 
38c0a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
38c0e     0B FD 0D FD 
38c12     0F FD 11 FD 
38c16     11 FD 13 FD 
38c1a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
38c1e     17 FD 64 F3 
38c22     CD F0 52 F0 
38c26     41 F0 45 F0 
38c2a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
38c2e     5B F0 64 F0 
38c32     6D F0 FB FC 
38c36     65 FD 68 FD 
38c3a     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
38c3e     6C FD 6D FD 
38c42     6F FD 70 FD 
38c46     72 FD B3 FB 
38c4a     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
38c4e     A4 F0 99 F0 
38c52     A0 F0 A8 F0 
38c56     AE F0 B9 F0 
38c5a     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
38c5e     CB FB DD FB 
38c62     DE FB E0 FB 
38c66     E3 FB E3 FB 
38c6a     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
38c6e     E9 FB EC FB 
38c72     62 F7 27 F2 
38c76     2A F1 FF F0 
38c7a     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
38c7e     0C F1 13 F1 
38c82     1B F1 23 F1 
38c86     33 F2 3C FC 
38c8a     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
38c8e     42 FC 45 FC 
38c92     47 FC 48 FC 
38c96     4A FC 4C FC 
38c9a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
38c9e     20 F2 77 F1 
38ca2     5C F1 5F F1 
38ca6     64 F1 6C F1 
38caa     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
38cae     83 F1 DC F8 
38cb2     9A FC 9A FC 
38cb6     9B FC 9E FC 
38cba     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
38cbe     A3 FC A4 FC 
38cc2     A6 FC A9 FC 
38cc6     90 F4 33 F2 
38cca     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
38cce     BA F1 BF F1 
38cd2     C7 F1 CE F1 
38cd6     D6 F1 DC F1 
38cda     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
38cde     F3 FC F5 FC 
38ce2     FE FB 79 FB 
38ce6     62 FB 5F FB 
38cea     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
38cee     6F FA AF F3 
38cf2     53 F2 12 F2 
38cf6     0F F2 15 F2 
38cfa     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
38cfe     2A F2 32 F2 
38d02     38 F2 9A FB 
38d06     AF FB B1 FB 
38d0a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
38d0e     B7 FB B8 FB 
38d12     BA FB BC FB 
38d16     C1 FB 3B F8 
38d1a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
38d1e     6E F2 6C F2 
38d22     74 F2 7A F2 
38d26     81 F2 87 F2 
38d2a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
38d2e     06 FC 09 FC 
38d32     0C FC 0E FC 
38d36     0F FC 12 FC 
38d3a     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
38d3e     17 FC 1A FC 
38d42     B2 F6 7B F3 
38d46     DD F2 C5 F2 
38d4a     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
38d4e     D4 F2 DB F2 
38d52     E0 F2 E8 F2 
38d56     28 F8 60 FC 
38d5a     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
38d5e     64 FC 66 FC 
38d62     68 FC 6A FC 
38d66     6D FC 52 FC 
38d6a     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
38d6e     78 F3 24 F3 
38d72     1A F3 1E F3 
38d76     24 F3 2A F3 
38d7a     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
38d7e     3D F3 80 FA 
38d82     0C FB 0F FB 
38d86     10 FB 14 FB 
38d8a     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
38d8e     1B FB 1D FB 
38d92     1F FB 92 FA 
38d96     DE F4 AE F3 
38d9a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
38d9e     79 F3 7E F3 
38da2     84 F3 8C F3 
38da6     92 F3 97 F3 
38daa     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
38dae     67 FB 69 FB 
38db2     6B FB 6F FB 
38db6     71 FB 72 FB 
38dba     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
38dbe     E3 F8 BA F4 
38dc2     EE F3 CC F3 
38dc6     CA F3 CF F3 
38dca     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
38dce     E2 F3 E8 F3 
38dd2     ED F3 B7 FB 
38dd6     BC FB BE FB 
38dda     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
38dde     C4 FB C6 FB 
38de2     C8 FB C9 FB 
38de6     CC FB 8F F7 
38dea     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
38dee     1E F4 1E F4 
38df2     24 F4 2A F4 
38df6     30 F4 38 F4 
38dfa     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
38dfe     AD FA B1 FA 
38e02     B4 FA B6 FA 
38e06     BA FA BB FA 
38e0a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
38e0e     C2 FA C6 FA 
38e12     55 F6 C6 F4 
38e16     7D F4 72 F4 
38e1a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
38e1e     83 F4 89 F4 
38e22     8F F4 94 F4 
38e26     66 FA 03 FB 
38e2a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
38e2e     0A FB 0E FB 
38e32     10 FB 11 FB 
38e36     16 FB 18 FB 
38e3a     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
38e3e     F9 F4 CA F4 
38e42     C5 F4 CB F4 
38e46     D1 F4 D7 F4 
38e4a     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
38e4e     E8 F4 3F FB 
38e52     56 FB 58 FB 
38e56     5A FB 5E FB 
38e5a     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
38e5e     64 FB 64 FB 
38e62     69 FB 99 F9 
38e66     E9 F5 33 F5 
38e6a     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
38e6e     1D F5 22 F5 
38e72     27 F5 2E F5 
38e76     32 F5 37 F5 
38e7a     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
38e7e     BC FA BC FA 
38e82     C1 FA C2 FA 
38e86     C4 FA C8 FA 
38e8a     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
38e8e     F9 F7 DB F5 
38e92     78 F5 69 F5 
38e96     6A F5 70 F5 
38e9a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
38e9e     7F F5 85 F5 
38ea2     6E F7 06 FB 
38ea6     0A FB 0B FB 
38eaa     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
38eae     14 FB 15 FB 
38eb2     18 FB 1B FB 
38eb6     1D FB 70 F7 
38eba     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
38ebe     B6 F5 BB F5 
38ec2     C0 F5 C6 F5 
38ec6     CA F5 CF F5 
38eca     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
38ece     54 FB 56 FB 
38ed2     5A FB 5B FB 
38ed6     5E FB 5F FB 
38eda     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
38ede     67 FB 52 FB 
38ee2     29 F7 33 F6 
38ee6     06 F6 02 F6 
38eea     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
38eee     10 F6 16 F6 
38ef2     1A F6 1F F6 
38ef6     81 FB 9F FB 
38efa     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
38efe     51 FB F2 FA 
38f02     E3 FA E3 FA 
38f06     E5 FA E9 FA 
38f0a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
38f0e     64 F6 4D F6 
38f12     4D F6 53 F6 
38f16     57 F6 5C F6 
38f1a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
38f1e     6A F6 19 FB 
38f22     1E FB 22 FB 
38f26     23 FB 24 FB 
38f2a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
38f2e     2C FB 2E FB 
38f32     32 FB F0 F8 
38f36     01 F7 A5 F6 
38f3a     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
38f3e     9F F6 A3 F6 
38f42     A6 F6 AC F6 
38f46     B0 F6 EB F7 
38f4a     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
38f4e     68 FB 6C FB 
38f52     6E FB 71 FB 
38f56     72 FB 74 FB 
38f5a     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
38f5e     71 F8 21 F7 
38f62     E5 F6 DD F6 
38f66     E1 F6 E6 F6 
38f6a     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
38f6e     F5 F6 F7 F6 
38f72     F7 FA AB FB 
38f76     AD FB AF FB 
38f7a     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
38f7e     B6 FB B9 FB 
38f82     BB FB BC FB 
38f86     21 FB 07 F8 
38f8a     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
38f8e     22 F7 26 F7 
38f92     2B F7 2E F7 
38f96     34 F7 38 F7 
38f9a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
38f9e     13 FB 16 FB 
38fa2     17 FB 1B FB 
38fa6     1E FB 20 FB 
38faa     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
38fae     26 FB 77 FA 
38fb2     F3 F7 7C F7 
38fb6     67 F7 6A F7 
38fba     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
38fbe     74 F7 7A F7 
38fc2     7E F7 82 F7 
38fc6     53 FB 5A FB 
38fca     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
38fce     5F FB 63 FB 
38fd2     65 FB 67 FB 
38fd6     69 FB 6A FB 
38fda     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
38fde     B5 F7 A9 F7 
38fe2     AD F7 B0 F7 
38fe6     B5 F7 B8 F7 
38fea     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
38fee     6E F8 99 FB 
38ff2     9C FB 9D FB 
38ff6     9F FB A4 FB 
38ffa     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
38ffe     A9 FB AB FB 
39002     AD FB 46 F9 
39006     26 F8 F0 F7 
3900a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3900e     F4 F7 F8 F7 
39012     FB F7 FF F7 
39016     03 F8 65 FA 
3901a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3901e     2B FB 2F FB 
39022     30 FB 32 FB 
39026     34 FB 38 FB 
3902a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3902e     E9 F8 4A F8 
39032     2E F8 2C F8 
39036     2F F8 36 F8 
3903a     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
3903e     41 F8 44 F8 
39042     4A FB 67 FB 
39046     68 FB 6B FB 
3904a     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
3904e     73 FB 74 FB 
39052     78 FB 7A FB 
39056     14 FB E7 F8 
3905a     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
3905e     6D F8 70 F8 
39062     73 F8 78 F8 
39066     7C F8 80 F8 
3906a     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
3906e     A6 FB A7 FB 
39072     A9 FB AC FB 
39076     AF FB B1 FB 
3907a     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
3907e     B7 FB 73 FA 
39082     F8 F8 B4 F8 
39086     A9 F8 AB F8 
3908a     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
3908e     B4 F8 B8 F8 
39092     BB F8 FA F8 
39096     64 FB 65 FB 
3909a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3909e     6D FB 6F FB 
390a2     70 FB 74 FB 
390a6     77 FB 77 FB 
390aa     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
390ae     E9 F8 E4 F8 
390b2     E8 F8 EB F8 
390b6     EE F8 F2 F8 
390ba     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
390be     B5 FA 9F FB 
390c2     A1 FB A4 FB 
390c6     A5 FB A9 FB 
390ca     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
390ce     AE FB B1 FB 
390d2     B2 FB C7 F9 
390d6     39 F9 22 F9 
390da     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
390de     26 F9 2A F9 
390e2     2E F9 32 F9 
390e6     33 F9 BA FB 
390ea     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
390ee     DE FB E1 FB 
390f2     E2 FB E4 FB 
390f6     E5 FB E7 FB 
390fa     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
390fe     C5 F9 67 F9 
39102     57 F9 56 F9 
39106     5B F9 5F F9 
3910a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3910e     68 F9 6C F9 
39112     0B FC 11 FC 
39116     14 FC 15 FC 
3911a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3911e     B5 FB B5 FB 
39122     B6 FB B8 FB 
39126     E9 FA C8 F9 
3912a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3912e     90 F9 94 F9 
39132     95 F9 99 F9 
39136     9D F9 9F F9 
3913a     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
3913e     DE FB DF FB 
39142     E2 FB E4 FB 
39146     E6 FB E8 FB 
3914a     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
3914e     EF FB AC FA 
39152     E9 F9 C7 F9 
39156     C3 F9 C8 F9 
3915a     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
3915e     D0 F9 D4 F9 
39162     D6 F9 0E FB 
39166     11 FC 13 FC 
3916a     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
3916e     19 FC 1B FC 
39172     1D FC 1E FC 
39176     21 FC 22 FC 
3917a     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
3917e     F7 F9 F7 F9 
39182     FB F9 FE F9 
39186     00 FA 03 FA 
3918a     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
3918e     1B FC 45 FC 
39192     46 FC 48 FC 
39196     4A FC 4B FC 
3919a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3919e     52 FC 54 FC 
391a2     F3 FB 82 FA 
391a6     35 FA 28 FA 
391aa     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
391ae     31 FA 32 FA 
391b2     37 FA 37 FA 
391b6     3C FA 00 FC 
391ba     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
391be     09 FC 0B FC 
391c2     0F FC 12 FC 
391c6     12 FC 15 FC 
391ca     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
391ce     8D FA 60 FA 
391d2     5B FA 5C FA 
391d6     60 FA 61 FA 
391da     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
391de     6C FA 6D FA 
391e2     37 FC 3A FC 
391e6     3B FC 3D FC 
391ea     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
391ee     43 FC 44 FC 
391f2     45 FC 47 FC 
391f6     51 FB AB FA 
391fa     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
391fe     8E FA 91 FA 
39202     93 FA 95 FA 
39206     98 FA 9B FA 
3920a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3920e     68 FC 6A FC 
39212     6C FC 6E FC 
39216     70 FC 72 FC 
3921a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3921e     76 FC 3B FB 
39222     D0 FA BB FA 
39226     B9 FA BD FA 
3922a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3922e     C4 FA C6 FA 
39232     CA FA 13 FC 
39236     3A FC 3A FC 
3923a     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
3923e     41 FC 43 FC 
39242     44 FC 47 FC 
39246     48 FC 3C FC 
3924a     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
3924e     E6 FA E8 FA 
39252     EB FA EE FA 
39256     F0 FA F2 FA 
3925a     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
3925e     61 FC 66 FC 
39262     68 FC 6B FC 
39266     6C FC 6E FC 
3926a     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
3926e     73 FC 75 FC 
39272     13 FC 3F FB 
39276     17 FB 12 FB 
3927a     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
3927e     1A FB 1D FB 
39282     1F FB 20 FB 
39286     23 FB 92 FC 
3928a     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
3928e     96 FC 97 FC 
39292     9A FC 9C FC 
39296     9E FC 9F FC 
3929a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3929e     5A FB 41 FB 
392a2     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
392a6     73 32 00 04 
392aa     00 00 10 00 
392ae     00 00 00 00 
392b2     00 00 00 00 | atari2 file "atari2.s2"
392b6     43 87 43 87 
392ba     43 87 44 87 
392be     43 87 44 87 
392c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
392c6     43 87 43 87 
392ca     43 87 44 87 
392ce     43 87 43 87 
392d2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
392d6     44 87 43 87 
392da     44 87 43 87 
392de     43 87 43 87 
392e2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
392e6     43 87 43 87 
392ea     44 87 43 87 
392ee     44 87 44 87 
392f2     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
392f6     43 87 43 87 
392fa     44 87 43 87 
392fe     43 87 42 87 
39302     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
39306     43 87 43 87 
3930a     43 87 43 87 
3930e     44 87 43 87 
39312     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39316     44 87 44 87 
3931a     43 87 44 87 
3931e     43 87 44 87 
39322     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
39326     44 87 43 87 
3932a     44 87 44 87 
3932e     43 87 43 87 
39332     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
39336     43 87 44 87 
3933a     44 87 43 87 
3933e     43 87 44 87 
39342     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39346     43 87 43 87 
3934a     43 87 43 87 
3934e     43 87 43 87 
39352     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
39356     42 87 43 87 
3935a     44 87 42 87 
3935e     43 87 43 87 
39362     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
39366     43 87 44 87 
3936a     44 87 43 87 
3936e     43 87 43 87 
39372     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39376     43 87 5C 87 
3937a     EE 86 AC 87 
3937e     4C 7C A3 78 
39382     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
39386     BC 78 BB 78 
3938a     BD 78 BC 78 
3938e     BB 78 BD 78 
39392     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
39396     BB 78 BB 78 
3939a     BC 78 BC 78 
3939e     BC 78 BB 78 
393a2     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
393a6     BC 78 BC 78 
393aa     BC 78 BC 78 
393ae     BC 78 BC 78 
393b2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
393b6     BB 78 BC 78 
393ba     A0 78 4C 7C 
393be     11 7A 29 89 
393c2     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
393c6     44 87 43 87 
393ca     44 87 43 87 
393ce     43 87 42 87 
393d2     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
393d6     43 87 43 87 
393da     44 87 ED 85 
393de     71 85 52 79 
393e2     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
393e6     BC 78 BC 78 
393ea     BC 78 BC 78 
393ee     BC 78 BC 78 
393f2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
393f6     BC 78 BC 78 
393fa     BC 78 A0 78 
393fe     CF 7A B9 81 
39402     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
39406     44 87 43 87 
3940a     43 87 44 87 
3940e     43 87 44 87 
39412     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39416     43 87 43 87 
3941a     43 87 43 87 
3941e     44 87 43 87 
39422     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
39426     43 87 43 87 
3942a     44 87 43 87 
3942e     44 87 43 87 
39432     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39436     44 87 43 87 
3943a     43 87 43 87 
3943e     5A 87 39 81 
39442     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
39446     A5 78 BC 78 
3944a     BB 78 BC 78 
3944e     BB 78 BC 78 
39452     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
39456     BC 78 BC 78 
3945a     BC 78 BC 78 
3945e     BC 78 8F 79 
39462     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
39466     09 85 47 87 
3946a     43 87 43 87 
3946e     42 87 42 87 
39472     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
39476     43 87 43 87 
3947a     43 87 43 87 
3947e     43 87 44 87 
39482     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39486     43 87 43 87 
3948a     44 87 43 87 
3948e     42 87 43 87 
39492     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
39496     44 87 43 87 
3949a     43 87 43 87 
3949e     44 87 44 87 
394a2     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
394a6     94 78 55 7A 
394aa     B9 78 BC 78 
394ae     BC 78 BC 78 
394b2     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
394b6     BC 78 BB 78 
394ba     BC 78 BC 78 
394be     BC 78 BC 78 
394c2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
394c6     BB 78 BC 78 
394ca     BC 78 BC 78 
394ce     BB 78 BC 78 
394d2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
394d6     BC 78 BC 78 
394da     BD 78 BC 78 
394de     BC 78 BB 78 
394e2     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
394e6     94 78 B3 84 
394ea     36 84 4A 87 
394ee     43 87 43 87 
394f2     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
394f6     43 87 44 87 
394fa     43 87 43 87 
394fe     43 87 43 87 
39502     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39506     43 87 44 87 
3950a     43 87 44 87 
3950e     43 87 43 87 
39512     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39516     43 87 43 87 
3951a     43 87 45 87 
3951e     43 87 43 87 
39522     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
39526     43 87 44 87 
3952a     44 87 44 87 
3952e     43 87 43 87 
39532     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
39536     43 87 42 87 
3953a     43 87 43 87 
3953e     44 87 43 87 
39542     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
39546     54 87 3C 82 
3954a     36 83 52 79 
3954e     C6 78 BC 78 
39552     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
39556     BB 78 BB 78 
3955a     BC 78 BC 78 
3955e     BC 78 BC 78 
39562     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39566     BD 78 ED 78 
3956a     1B 79 F4 83 
3956e     4D 83 4E 87 
39572     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
39576     44 87 43 87 
3957a     42 87 44 87 
3957e     43 87 42 87 
39582     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
39586     43 87 54 87 
3958a     26 82 B3 84 
3958e     D6 77 BB 78 
39592     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
39596     BC 78 BB 78 
3959a     BB 78 BB 78 
3959e     BB 78 BB 78 
395a2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
395a6     BC 78 BC 78 
395aa     26 79 18 75 
395ae     36 83 1F 84 
395b2     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
395b6     43 87 43 87 
395ba     43 87 43 87 
395be     43 87 44 87 
395c2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
395c6     43 87 44 87 
395ca     44 87 43 87 
395ce     43 87 43 87 
395d2     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
395d6     43 87 43 87 
395da     43 87 43 87 
395de     44 87 44 87 
395e2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
395e6     44 87 43 87 
395ea     43 87 43 87 
395ee     43 87 44 87 
395f2     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
395f6     44 87 44 87 
395fa     44 87 43 87 
395fe     44 87 43 87 
39602     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39606     43 87 43 87 
3960a     43 87 44 87 
3960e     44 87 43 87 
39612     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39616     43 87 43 87 
3961a     43 87 43 87 
3961e     43 87 44 87 
39622     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
39626     43 87 44 87 
3962a     43 87 44 87 
3962e     19 87 7D 86 
39632     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
39636     B1 78 BC 78 
3963a     BC 78 BC 78 
3963e     BC 78 BC 78 
39642     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
39646     BC 78 BC 78 
3964a     BD 78 BC 78 
3964e     B7 78 3B 7B 
39652     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
39656     96 86 44 87 
3965a     43 87 43 87 
3965e     43 87 43 87 
39662     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
39666     44 87 44 87 
3966a     43 87 44 87 
3966e     43 87 44 87 
39672     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
39676     43 87 44 87 
3967a     43 87 44 87 
3967e     43 87 44 87 
39682     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
39686     43 87 44 87 
3968a     43 87 43 87 
3968e     44 87 43 87 
39692     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
39696     44 87 44 87 
3969a     43 87 43 87 
3969e     43 87 44 87 
396a2     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
396a6     43 87 43 87 
396aa     43 87 43 87 
396ae     44 87 44 87 
396b2     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
396b6     36 83 CF 7A 
396ba     AB 78 BB 78 
396be     BC 78 BC 78 
396c2     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
396c6     BB 78 BC 78 
396ca     BC 78 BC 78 
396ce     BC 78 BC 78 
396d2     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
396d6     BC 78 BC 78 
396da     BC 78 BB 78 
396de     BC 78 BC 78 
396e2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
396e6     BB 78 BC 78 
396ea     BB 78 BC 78 
396ee     BC 78 BD 78 
396f2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
396f6     BC 78 BC 78 
396fa     BC 78 BC 78 
396fe     BC 78 BD 78 
39702     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
39706     BC 78 BB 78 
3970a     BC 78 BB 78 
3970e     BB 78 BC 78 
39712     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
39716     BC 78 BC 78 
3971a     BC 78 BC 78 
3971e     BC 78 BB 78 
39722     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
39726     BC 78 BC 78 
3972a     BC 78 BD 78 
3972e     BB 78 BC 78 
39732     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39736     BC 78 BC 78 
3973a     BC 78 BB 78 
3973e     BC 78 BB 78 
39742     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39746     BB 78 BC 78 
3974a     BC 78 BC 78 
3974e     BC 78 BB 78 
39752     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39756     BC 78 BC 78 
3975a     BC 78 BB 78 
3975e     BC 78 BB 78 
39762     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39766     BC 78 BC 78 
3976a     BC 78 BC 78 
3976e     BB 78 BC 78 
39772     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39776     BC 78 9F 78 
3977a     52 79 B3 84 
3977e     2F 86 60 87 
39782     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
39786     44 87 43 87 
3978a     43 87 43 87 
3978e     43 87 43 87 
39792     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
39796     43 87 43 87 
3979a     43 87 44 87 
3979e     43 87 43 87 
397a2     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
397a6     43 87 43 87 
397aa     43 87 43 87 
397ae     43 87 44 87 
397b2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
397b6     44 87 44 87 
397ba     5E 87 BC 80 
397be     FB 80 94 78 
397c2     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
397c6     BD 78 BC 78 
397ca     BB 78 BC 78 
397ce     BB 78 BB 78 
397d2     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
397d6     BC 78 BB 78 
397da     BB 78 6B 79 
397de     D6 77 AC 87 
397e2     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
397e6     43 87 44 87 
397ea     43 87 43 87 
397ee     44 87 43 87 
397f2     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
397f6     43 87 44 87 
397fa     43 87 5C 87 
397fe     E7 80 00 80 
39802     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
39806     BC 78 BD 78 
3980a     BC 78 BC 78 
3980e     BC 78 BB 78 
39812     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39816     BC 78 BC 78 
3981a     BB 78 BC 78 
3981e     BB 78 BC 78 
39822     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39826     BB 78 BC 78 
3982a     BC 78 BC 78 
3982e     BC 78 BC 78 
39832     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39836     BC 78 BC 78 
3983a     BC 78 BC 78 
3983e     A0 78 8D 7B 
39842     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
39846     60 87 43 87 
3984a     44 87 44 87 
3984e     43 87 43 87 
39852     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
39856     44 87 43 87 
3985a     43 87 43 87 
3985e     44 87 73 86 
39862     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
39866     51 7B B6 78 
3986a     BC 78 BD 78 
3986e     BC 78 BC 78 
39872     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
39876     BB 78 BC 78 
3987a     BD 78 BB 78 
3987e     BC 78 BB 78 
39882     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
39886     BC 78 BC 78 
3988a     BC 78 BC 78 
3988e     BB 78 BC 78 
39892     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39896     BC 78 BB 78 
3989a     BB 78 BC 78 
3989e     BC 78 BB 78 
398a2     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
398a6     22 8C AF 84 
398aa     48 87 43 87 
398ae     44 87 43 87 
398b2     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
398b6     43 87 42 87 
398ba     43 87 43 87 
398be     44 87 43 87 
398c2     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
398c6     43 87 43 87 
398ca     44 87 44 87 
398ce     43 87 43 87 
398d2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
398d6     43 87 43 87 
398da     43 87 43 87 
398de     44 87 43 87 
398e2     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
398e6     9F 8B D6 77 
398ea     16 7C B3 78 
398ee     BC 78 BB 78 
398f2     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
398f6     BB 78 BC 78 
398fa     BB 78 BC 78 
398fe     BC 78 BC 78 
39902     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39906     BC 78 BB 78 
3990a     BB 78 BC 78 
3990e     BB 78 BC 78 
39912     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
39916     BB 78 BB 78 
3991a     BC 78 BC 78 
3991e     BC 78 BB 78 
39922     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
39926     BC 78 BC 78 
3992a     BC 78 BD 78 
3992e     BB 78 BC 78 
39932     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
39936     BC 78 BC 78 
3993a     BC 78 BB 78 
3993e     BC 78 BC 78 
39942     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
39946     A8 78 54 7E 
3994a     F4 83 17 82 
3994e     50 87 43 87 
39952     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
39956     44 87 43 87 
3995a     44 87 43 87 
3995e     43 87 44 87 
39962     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
39966     43 87 28 87 
3996a     20 85 CF 7A 
3996e     70 7D AD 78 
39972     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
39976     BB 78 BC 78 
3997a     BC 78 BC 78 
3997e     BB 78 BB 78 
39982     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
39986     BB 78 B2 78 
3998a     9A 7C CF 7A 
3998e     4A 87 0D 87 
39992     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
39996     43 87 44 87 
3999a     43 87 44 87 
3999e     43 87 43 87 
399a2     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
399a6     44 87 43 87 
399aa     28 87 51 85 
399ae     11 7A 1E 7D 
399b2     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
399b6     BC 78 BB 78 
399ba     BC 78 BC 78 
399be     BC 78 BC 78 
399c2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
399c6     BB 78 BC 78 
399ca     BB 78 BC 78 
399ce     BC 78 BC 78 
399d2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
399d6     BB 78 BC 78 
399da     BC 78 BC 78 
399de     BD 78 BB 78 
399e2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
399e6     BC 78 BB 78 
399ea     BC 78 BC 78 
399ee     BC 78 BB 78 
399f2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
399f6     BC 78 BC 78 
399fa     BC 78 BC 78 
399fe     BB 78 BC 78 
39a02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39a06     BC 78 BD 78 
39a0a     BC 78 BC 78 
39a0e     BC 78 BB 78 
39a12     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a16     BC 78 BB 78 
39a1a     BB 78 BC 78 
39a1e     BC 78 BB 78 
39a22     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a26     BB 78 BB 78 
39a2a     BB 78 BC 78 
39a2e     B6 78 48 7D 
39a32     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
39a36     56 87 43 87 
39a3a     42 87 44 87 
39a3e     44 87 43 87 
39a42     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
39a46     43 87 44 87 
39a4a     43 87 44 87 
39a4e     4C 87 7E 83 
39a52     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
39a56     F7 78 BC 78 
39a5a     BC 78 BB 78 
39a5e     BB 78 BC 78 
39a62     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
39a66     BC 78 BB 78 
39a6a     BC 78 BC 78 
39a6e     BB 78 BC 78 
39a72     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
39a76     BB 78 BC 78 
39a7a     BC 78 BC 78 
39a7e     BC 78 BB 78 
39a82     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a86     BC 78 BC 78 
39a8a     BC 78 BC 78 
39a8e     BC 78 BB 78 
39a92     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39a96     BC 78 BB 78 
39a9a     BB 78 BC 78 
39a9e     BC 78 BB 78 
39aa2     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
39aa6     BC 78 BC 78 
39aaa     BB 78 BC 78 
39aae     BC 78 BC 78 
39ab2     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
39ab6     73 32 00 04 
39aba     00 00 10 00 
39abe     00 00 00 00 
39ac2     00 00 00 00 | atari12 file "atari12.s2"
39ac6     00 6D 00 6D 
39aca     00 6D 00 6D 
39ace     00 6D 00 6D 
39ad2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ad6     00 6D 00 6D 
39ada     00 6D 00 6D 
39ade     00 6D 00 6D 
39ae2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ae6     00 6D 00 6D 
39aea     00 6D 00 6D 
39aee     00 6D 00 6D 
39af2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39af6     00 6D 00 6D 
39afa     00 6D 00 6D 
39afe     00 6D 00 6D 
39b02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39b06     00 6D 00 6D 
39b0a     00 6D 00 6D 
39b0e     00 6D 00 6D 
39b12     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
39b16     00 6C 00 6C 
39b1a     00 6C 00 6C 
39b1e     00 6C 00 6C 
39b22     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b26     00 6C 00 6C 
39b2a     00 6C 00 6C 
39b2e     00 6C 00 6C 
39b32     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b36     00 6C 00 6C 
39b3a     00 6C 00 6C 
39b3e     00 6C 00 6C 
39b42     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b46     00 6C 00 6C 
39b4a     00 6C 00 6C 
39b4e     00 6C 00 6C 
39b52     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b56     00 6C 00 6C 
39b5a     00 6C 00 6C 
39b5e     00 6C 00 6C 
39b62     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b66     00 6C 00 6C 
39b6a     00 6C 00 6C 
39b6e     00 6C 00 6C 
39b72     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b76     00 6C 00 6C 
39b7a     00 6C 00 6C 
39b7e     00 6C 00 6C 
39b82     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b86     00 6C 00 6C 
39b8a     00 6C 00 6C 
39b8e     00 6C 00 6C 
39b92     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39b96     00 6C 00 6C 
39b9a     00 6C 00 6C 
39b9e     00 6C 00 6C 
39ba2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39ba6     00 6C 00 6C 
39baa     00 6C 00 6C 
39bae     00 6C 00 6C 
39bb2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bb6     00 6C 00 6C 
39bba     00 6C 00 6C 
39bbe     00 6C 00 6C 
39bc2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
39bc6     00 6C 00 6B 
39bca     00 6B 00 6B 
39bce     00 6B 00 6B 
39bd2     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bd6     00 6B 00 6B 
39bda     00 6B 00 6B 
39bde     00 6B 00 6B 
39be2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39be6     00 6B 00 6B 
39bea     00 6B 00 6B 
39bee     00 6B 00 6B 
39bf2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39bf6     00 6B 00 6B 
39bfa     00 6B 00 6B 
39bfe     00 6B 00 6B 
39c02     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c06     00 6B 00 6B 
39c0a     00 6B 00 6B 
39c0e     00 6B 00 6B 
39c12     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c16     00 6B 00 6B 
39c1a     00 6B 00 6B 
39c1e     00 6B 00 6B 
39c22     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c26     00 6B 00 6B 
39c2a     00 6B 00 6B 
39c2e     00 6B 00 6B 
39c32     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c36     00 6B 00 6B 
39c3a     00 6B 00 6B 
39c3e     00 6B 00 6B 
39c42     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c46     00 6B 00 6B 
39c4a     00 6B 00 6B 
39c4e     00 6B 00 6B 
39c52     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
39c56     00 6B 00 6B 
39c5a     00 6B 00 6B 
39c5e     00 6A 00 9D 
39c62     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
39c66     00 9E 00 9E 
39c6a     00 9E 00 9E 
39c6e     00 9E 00 9E 
39c72     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c76     00 9E 00 9E 
39c7a     00 9E 00 9E 
39c7e     00 9E 00 9E 
39c82     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c86     00 9E 00 9E 
39c8a     00 9E 00 9E 
39c8e     00 9E 00 9E 
39c92     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39c96     00 9E 00 9E 
39c9a     00 9E 00 9E 
39c9e     00 9E 00 9E 
39ca2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ca6     00 9E 00 9E 
39caa     00 9E 00 9E 
39cae     00 9E 00 9E 
39cb2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cb6     00 9E 00 9E 
39cba     00 9E 00 9E 
39cbe     00 9E 00 9E 
39cc2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cc6     00 9E 00 9E 
39cca     00 9E 00 9E 
39cce     00 9E 00 9E 
39cd2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39cd6     00 9E 00 9E 
39cda     00 9E 00 9E 
39cde     00 9E 00 9E 
39ce2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
39ce6     00 9E 00 9E 
39cea     00 9E 00 9E 
39cee     00 9E 00 9E 
39cf2     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
39cf6     00 9F 00 9F 
39cfa     00 9F 00 9F 
39cfe     00 9F 00 9F 
39d02     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d06     00 9F 00 9F 
39d0a     00 9F 00 9F 
39d0e     00 9F 00 9F 
39d12     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d16     00 9F 00 9F 
39d1a     00 9F 00 9F 
39d1e     00 9F 00 9F 
39d22     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d26     00 9F 00 9F 
39d2a     00 9F 00 9F 
39d2e     00 9F 00 9F 
39d32     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d36     00 9F 00 9F 
39d3a     00 9F 00 9F 
39d3e     00 9F 00 9F 
39d42     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d46     00 9F 00 9F 
39d4a     00 9F 00 9F 
39d4e     00 9F 00 9F 
39d52     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d56     00 9F 00 9F 
39d5a     00 9F 00 9F 
39d5e     00 9F 00 9F 
39d62     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d66     00 9F 00 9F 
39d6a     00 9F 00 9F 
39d6e     00 9F 00 9F 
39d72     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d76     00 9F 00 9F 
39d7a     00 9F 00 9F 
39d7e     00 9F 00 9F 
39d82     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d86     00 9F 00 9F 
39d8a     00 9F 00 9F 
39d8e     00 9F 00 9F 
39d92     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39d96     00 9F 00 9F 
39d9a     00 9F 00 9F 
39d9e     00 9F 00 9F 
39da2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39da6     00 9F 00 9F 
39daa     00 9F 00 9F 
39dae     00 9F 00 9F 
39db2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
39db6     00 9F 00 9F 
39dba     00 9F 00 A0 
39dbe     00 A0 00 A0 
39dc2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dc6     00 A0 00 A0 
39dca     00 A0 00 A0 
39dce     00 A0 00 A0 
39dd2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39dd6     00 A0 00 A0 
39dda     00 A0 00 A0 
39dde     00 A0 00 A0 
39de2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39de6     00 A0 00 A0 
39dea     00 A0 00 A0 
39dee     00 A0 00 A0 
39df2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39df6     00 A0 00 A0 
39dfa     00 A0 00 A0 
39dfe     00 A0 00 A0 
39e02     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e06     00 A0 00 A0 
39e0a     00 A0 00 A0 
39e0e     00 A0 00 A0 
39e12     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e16     00 A0 00 A0 
39e1a     00 A0 00 A0 
39e1e     00 A0 00 A0 
39e22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e26     00 A0 00 A0 
39e2a     00 A0 00 A0 
39e2e     00 A0 00 A0 
39e32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e36     00 A0 00 A0 
39e3a     00 A0 00 A0 
39e3e     00 A0 00 A0 
39e42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e46     00 A0 00 A0 
39e4a     00 A0 00 A0 
39e4e     00 A0 00 A0 
39e52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e56     00 A0 00 A0 
39e5a     00 A0 00 A0 
39e5e     00 A0 00 A0 
39e62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e66     00 A0 00 A0 
39e6a     00 A0 00 A0 
39e6e     00 A0 00 A0 
39e72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39e76     00 A0 00 A0 
39e7a     00 A0 00 A0 
39e7e     00 A0 00 A0 
39e82     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
39e86     00 6D 00 6D 
39e8a     00 6D 00 6D 
39e8e     00 6D 00 6D 
39e92     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39e96     00 6D 00 6D 
39e9a     00 6D 00 6D 
39e9e     00 6D 00 6D 
39ea2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ea6     00 6D 00 6D 
39eaa     00 6D 00 6D 
39eae     00 6D 00 6D 
39eb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39eb6     00 6D 00 6D 
39eba     00 6D 00 6D 
39ebe     00 6D 00 6D 
39ec2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ec6     00 6D 00 6D 
39eca     00 6D 00 6D 
39ece     00 6D 00 6D 
39ed2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ed6     00 6D 00 6D 
39eda     00 6D 00 6D 
39ede     00 6D 00 6D 
39ee2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ee6     00 6D 00 6D 
39eea     00 6D 00 6D 
39eee     00 6D 00 6D 
39ef2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ef6     00 6D 00 6D 
39efa     00 6D 00 6D 
39efe     00 6D 00 6D 
39f02     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39f06     00 6D 00 6D 
39f0a     00 A0 00 A0 
39f0e     00 A0 00 A0 
39f12     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f16     00 A0 00 A0 
39f1a     00 A0 00 A0 
39f1e     00 A0 00 A0 
39f22     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f26     00 A0 00 A0 
39f2a     00 A0 00 A0 
39f2e     00 A0 00 A0 
39f32     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f36     00 A0 00 A0 
39f3a     00 A0 00 A0 
39f3e     00 A0 00 A0 
39f42     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f46     00 A0 00 A0 
39f4a     00 A0 00 A0 
39f4e     00 A0 00 A0 
39f52     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f56     00 A0 00 A0 
39f5a     00 A0 00 A0 
39f5e     00 A0 00 A0 
39f62     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f66     00 A0 00 A0 
39f6a     00 A0 00 A0 
39f6e     00 A0 00 A0 
39f72     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f76     00 A0 00 A0 
39f7a     00 A0 00 A0 
39f7e     00 A0 00 A0 
39f82     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
39f86     00 A0 00 A0 
39f8a     00 A0 00 A0 
39f8e     00 A0 00 A0 
39f92     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
39f96     00 6D 00 6D 
39f9a     00 6D 00 6D 
39f9e     00 6D 00 6D 
39fa2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fa6     00 6D 00 6D 
39faa     00 6D 00 6D 
39fae     00 6D 00 6D 
39fb2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fb6     00 6D 00 6D 
39fba     00 6D 00 6D 
39fbe     00 6D 00 6D 
39fc2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fc6     00 6D 00 6D 
39fca     00 6D 00 6D 
39fce     00 6D 00 6D 
39fd2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fd6     00 6D 00 6D 
39fda     00 6D 00 6D 
39fde     00 6D 00 6D 
39fe2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39fe6     00 6D 00 6D 
39fea     00 6D 00 6D 
39fee     00 6D 00 6D 
39ff2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
39ff6     00 6D 00 6D 
39ffa     00 6D 00 6D 
39ffe     00 6D 00 6D 
3a002     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a006     00 6D 00 6D 
3a00a     00 6D 00 6D 
3a00e     00 6D 00 6D 
3a012     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a016     00 6D 00 6D 
3a01a     00 6C 00 A0 
3a01e     00 9F 00 A0 
3a022     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
3a026     00 A0 00 A0 
3a02a     00 A0 00 A0 
3a02e     00 A0 00 A0 
3a032     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a036     00 A0 00 A0 
3a03a     00 A0 00 A0 
3a03e     00 A0 00 A0 
3a042     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a046     00 A0 00 A0 
3a04a     00 A0 00 A0 
3a04e     00 A0 00 A0 
3a052     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a056     00 A0 00 A0 
3a05a     00 A0 00 A0 
3a05e     00 A0 00 A0 
3a062     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a066     00 A0 00 A0 
3a06a     00 A0 00 A0 
3a06e     00 A0 00 A0 
3a072     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a076     00 A0 00 A0 
3a07a     00 A0 00 A0 
3a07e     00 A0 00 A0 
3a082     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a086     00 A0 00 A0 
3a08a     00 A0 00 A0 
3a08e     00 A0 00 A0 
3a092     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a096     00 A0 00 A0 
3a09a     00 A0 00 A0 
3a09e     00 A0 00 A0 
3a0a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0a6     00 A0 00 A0 
3a0aa     00 A0 00 A0 
3a0ae     00 A0 00 A0 
3a0b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0b6     00 A0 00 A0 
3a0ba     00 A0 00 A0 
3a0be     00 A0 00 A0 
3a0c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a0c6     00 A0 00 A0 
3a0ca     00 A0 00 A0 
3a0ce     00 A0 00 A0 
3a0d2     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3a0d6     00 A1 00 A1 
3a0da     00 A1 00 A1 
3a0de     00 A1 00 A1 
3a0e2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0e6     00 A1 00 A1 
3a0ea     00 A1 00 A1 
3a0ee     00 A1 00 A1 
3a0f2     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a0f6     00 A1 00 A1 
3a0fa     00 A1 00 A1 
3a0fe     00 A1 00 A1 
3a102     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a106     00 A1 00 A1 
3a10a     00 A1 00 A1 
3a10e     00 A1 00 A1 
3a112     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a116     00 A1 00 A1 
3a11a     00 A1 00 A1 
3a11e     00 A1 00 A1 
3a122     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3a126     00 A1 00 A1 
3a12a     00 A1 00 A1 
3a12e     00 6E 00 6E 
3a132     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a136     00 6E 00 6E 
3a13a     00 6E 00 6E 
3a13e     00 6E 00 6E 
3a142     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a146     00 6E 00 6E 
3a14a     00 6E 00 6E 
3a14e     00 6E 00 6E 
3a152     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a156     00 6E 00 6E 
3a15a     00 6E 00 6E 
3a15e     00 6E 00 6E 
3a162     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3a166     00 6E 00 6D 
3a16a     00 6D 00 6D 
3a16e     00 6D 00 6D 
3a172     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a176     00 6D 00 6D 
3a17a     00 6D 00 6D 
3a17e     00 6D 00 6D 
3a182     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a186     00 6D 00 6D 
3a18a     00 6D 00 6D 
3a18e     00 6D 00 6D 
3a192     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a196     00 6D 00 6D 
3a19a     00 6D 00 6D 
3a19e     00 6D 00 6D 
3a1a2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1a6     00 6D 00 6D 
3a1aa     00 6D 00 6D 
3a1ae     00 6D 00 6D 
3a1b2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1b6     00 6D 00 6D 
3a1ba     00 6D 00 6D 
3a1be     00 6D 00 6D 
3a1c2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1c6     00 6D 00 6D 
3a1ca     00 6D 00 6D 
3a1ce     00 6D 00 6D 
3a1d2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1d6     00 6D 00 6D 
3a1da     00 6D 00 6D 
3a1de     00 6D 00 6D 
3a1e2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1e6     00 6D 00 6D 
3a1ea     00 6D 00 6D 
3a1ee     00 6D 00 6D 
3a1f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a1f6     00 6D 00 6D 
3a1fa     00 6D 00 6D 
3a1fe     00 6D 00 6D 
3a202     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a206     00 6D 00 6D 
3a20a     00 6D 00 6D 
3a20e     00 6D 00 6D 
3a212     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3a216     00 6D 00 6D 
3a21a     00 6C 00 6C 
3a21e     00 6C 00 6C 
3a222     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a226     00 6C 00 6C 
3a22a     00 6C 00 6C 
3a22e     00 6C 00 6C 
3a232     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3a236     00 6C 00 6C 
3a23a     00 6C 00 6C 
3a23e     00 9D 00 9F 
3a242     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
3a246     00 9F 00 9F 
3a24a     00 9F 00 9F 
3a24e     00 A0 00 A0 
3a252     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a256     00 A0 00 A0 
3a25a     00 A0 00 A0 
3a25e     00 A0 00 A0 
3a262     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a266     00 A0 00 A0 
3a26a     00 A0 00 A0 
3a26e     00 A0 00 A0 
3a272     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a276     00 A0 00 A0 
3a27a     00 A0 00 A0 
3a27e     00 A0 00 A0 
3a282     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a286     00 A0 00 A0 
3a28a     00 A0 00 A0 
3a28e     00 A0 00 A0 
3a292     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a296     00 A0 00 A0 
3a29a     00 A0 00 A0 
3a29e     00 A0 00 A0 
3a2a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2a6     00 A0 00 A0 
3a2aa     00 A0 00 A0 
3a2ae     00 A0 00 A0 
3a2b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2b6     00 A0 00 A0 
3a2ba     00 A0 00 A0 
3a2be     00 A0 00 A0 
3a2c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3a2c6     01 00 00 00 
3a2ca     00 00 00 00 
3a2ce     00 00 00 00 
3a2d2     00 00 00 00 | mouse  file "mouse2.def"
3a2d6     00 00 00 00 
3a2da     00 00 00 00 
3a2de     00 00 00 00 
3a2e2     00 00 00 00 | 	byte	$00[16]
3a2e6     01 01 00 00 
3a2ea     00 00 00 00 
3a2ee     00 00 00 00 
3a2f2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a2f6     00 00 00 00 
3a2fa     00 00 00 00 
3a2fe     00 00 00 00 
3a302     00 00 00 00 | 	byte	$00[16]
3a306     01 0D 01 00 
3a30a     00 00 00 00 
3a30e     00 00 00 00 
3a312     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a316     00 00 00 00 
3a31a     00 00 00 00 
3a31e     00 00 00 00 
3a322     00 00 00 00 | 	byte	$00[16]
3a326     01 0D 0D 01 
3a32a     00 00 00 00 
3a32e     00 00 00 00 
3a332     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a336     00 00 00 00 
3a33a     00 00 00 00 
3a33e     00 00 00 00 
3a342     00 00 00 00 | 	byte	$00[16]
3a346     01 0D 0D 0D 
3a34a     01 00 00 00 
3a34e     00 00 00 00 
3a352     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a356     00 00 00 00 
3a35a     00 00 00 00 
3a35e     00 00 00 00 
3a362     00 00 00 00 | 	byte	$00[16]
3a366     01 0D 0D 0D 
3a36a     0D 01 00 00 
3a36e     00 00 00 00 
3a372     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a376     00 00 00 00 
3a37a     00 00 00 00 
3a37e     00 00 00 00 
3a382     00 00 00 00 | 	byte	$00[16]
3a386     01 0D 0D 0D 
3a38a     0D 0D 01 00 
3a38e     00 00 00 00 
3a392     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a396     00 00 00 00 
3a39a     00 00 00 00 
3a39e     00 00 00 00 
3a3a2     00 00 00 00 | 	byte	$00[16]
3a3a6     01 0D 0D 0D 
3a3aa     0D 0D 0D 01 
3a3ae     00 00 00 00 
3a3b2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
3a3b6     00 00 00 00 
3a3ba     00 00 00 00 
3a3be     00 00 00 00 
3a3c2     00 00 00 00 | 	byte	$00[16]
3a3c6     01 0D 0D 0D 
3a3ca     0D 0D 0D 0C 
3a3ce     01 00 00 00 
3a3d2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
3a3d6     00 00 00 00 
3a3da     00 00 00 00 
3a3de     00 00 00 00 
3a3e2     00 00 00 00 | 	byte	$00[16]
3a3e6     01 0D 0D 0D 
3a3ea     0D 0D 0D 0D 
3a3ee     0C 01 00 00 
3a3f2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
3a3f6     00 00 00 00 
3a3fa     00 00 00 00 
3a3fe     00 00 00 00 
3a402     00 00 00 00 | 	byte	$00[16]
3a406     01 0D 0D 0D 
3a40a     0D 0D 0D 0D 
3a40e     0D 0C 01 00 
3a412     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
3a416     00 00 00 00 
3a41a     00 00 00 00 
3a41e     00 00 00 00 
3a422     00 00 00 00 | 	byte	$00[16]
3a426     01 0D 0D 0D 
3a42a     0D 0D 0D 0D 
3a42e     0D 0D 0B 01 
3a432     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
3a436     00 00 00 00 
3a43a     00 00 00 00 
3a43e     00 00 00 00 
3a442     00 00 00 00 | 	byte	$00[16]
3a446     01 0D 0D 0D 
3a44a     0C 0D 0D 03 
3a44e     01 01 01 01 
3a452     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
3a456     00 00 00 00 
3a45a     00 00 00 00 
3a45e     00 00 00 00 
3a462     00 00 00 00 | 	byte	$00[16]
3a466     01 0D 0D 0C 
3a46a     01 09 0D 03 
3a46e     00 00 00 00 
3a472     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
3a476     00 00 00 00 
3a47a     00 00 00 00 
3a47e     00 00 00 00 
3a482     00 00 00 00 | 	byte	$00[16]
3a486     01 0D 0C 01 
3a48a     00 01 0D 0B 
3a48e     01 00 00 00 
3a492     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
3a496     00 00 00 00 
3a49a     00 00 00 00 
3a49e     00 00 00 00 
3a4a2     00 00 00 00 | 	byte	$00[16]
3a4a6     01 0C 01 00 
3a4aa     00 01 0A 0D 
3a4ae     01 00 00 00 
3a4b2     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
3a4b6     00 00 00 00 
3a4ba     00 00 00 00 
3a4be     00 00 00 00 
3a4c2     00 00 00 00 | 	byte	$00[16]
3a4c6     01 01 00 00 
3a4ca     00 00 01 0D 
3a4ce     0B 01 00 00 
3a4d2     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
3a4d6     00 00 00 00 
3a4da     00 00 00 00 
3a4de     00 00 00 00 
3a4e2     00 00 00 00 
3a4e6     00 00 00 00 
3a4ea     00 00       | 	byte	$00[22]
3a4ec     01 0B 0D 01 
3a4f0     00 00 00 00 
3a4f4     00 00 00 00 
3a4f8     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a4fc     00 00 00 00 
3a500     00 00 00 00 
3a504     00 00 00 00 
3a508     00 00 00 00 
3a50c     00          | 	byte	$00[17]
3a50d     01 01 00 00 
3a511     00 00 00 00 
3a515     00 00 00 00 
3a519     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a51d     00 00 00 00 
      ...             
3a6c1     00 00 00 00 
3a6c5     00          | 	byte	$00[425]
3a6c6                 | 
3a6c6     00 00       |              	org
3a6c8 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3a6cc 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
3a6d0 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
3a6d4 003             | 
3a6d4 003 00 30 04 F6 |                 mov     psramaddr,#0
3a6d8 004             | 
3a6d8 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3a6dc 005 20 00 00 FF 
3a6e0 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
3a6e4 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3a6e8 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3a6ec 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
3a6f0 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
3a6f4 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3a6f8 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3a6fc 00d             | 
3a6fc 00d 20 00 00 FF 
3a700 00e 00 30 04 F1 |                 add 	psramaddr,##16384
3a704 00f E0 03 00 FF 
3a708 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3a70c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
3a710 012             | 
3a710 012             |                 
3a710 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
3a714 013             |     
3a714 013 01 2C 60 FD |                 cogid 	t11				' get id
3a718 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3a71c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
3a720 016             | 
3a720 016 00 00 00 00 | t11 		long 	0
3a724 017 00 FF 07 00 | mailbox 	long 	$7FF00
3a728 018 00 00 00 00 | psramaddr 	long 	0
3a72c 019 00 00 00 00 | pslockval	long 	0
3a730 01a 00 00 00 00 | cmd             long    0
3a734 01b 00 00 00 00 | buf1            long    0
3a738 01c 00 40 00 00 | buf2            long    16384
3a73c 01d 40 A7 03 00 | 	long	@@@_dat_ + 12612
3a740 01e 50 32 20 52 
3a744 01f 65 74 72 6F 
3a748 020 6D 61 63 68 
3a74c 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
3a750 022 42 41 53 49 
3a754 023 43 20 76 65 
3a758 024 72 73 69 6F 
3a75c 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
3a760 026 33 33 00 00 | 	byte	$33, $33, $00, $00
3a764 027             | 	alignl
3a764 027             | _hg010b_spin2_dat_
3a764 027             | 
3a764 027 00 00 00 00 
3a768 028 00 00 00 00 
3a76c 029 00 00 00 00 
3a770 02a 00 00 00 00 
3a774 02b 00 00 00    | vga_font       file "vgafont.def"
3a777 02b 7E 81 A5 81 
3a77b 02c 81 BD 99 81 
3a77f 02d 81 7E 00 00 
3a783 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3a787 02f 7E FF DB FF 
3a78b 030 FF C3 E7 FF 
3a78f 031 FF 7E 00 00 
3a793 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3a797 033 00 36 7F 7F 
3a79b 034 7F 7F 3E 1C 
3a79f 035 08 00 00 00 
3a7a3 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3a7a7 037 00 08 1C 3E 
3a7ab 038 7F 3E 1C 08 
3a7af 039 00 00 00 00 
3a7b3 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3a7b7 03b 18 3C 3C E7 
3a7bb 03c E7 E7 18 18 
3a7bf 03d 3C 00 00 00 
3a7c3 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a7c7 03f 18 3C 7E FF 
3a7cb 040 FF 7E 18 18 
3a7cf 041 3C 00 00 00 
3a7d3 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3a7d7 043 00 00 00 18 
3a7db 044 3C 3C 18 00 
3a7df 045 00 00 00 00 
3a7e3 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a7e7 047 FF FF FF E7 
3a7eb 048 C3 C3 E7 FF 
3a7ef 049 FF FF FF FF 
3a7f3 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a7f7 04b 00 00 3C 66 
3a7fb 04c 42 42 66 3C 
3a7ff 04d 00 00 00 00 
3a803 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
3a807 04f FF FF C3 99 
3a80b 050 BD BD 99 C3 
3a80f 051 FF FF FF FF 
3a813 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3a817 053 78 70 58 4C 
3a81b 054 1E 33 33 33 
3a81f 055 33 1E 00 00 
3a823 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
3a827 057 3C 66 66 66 
3a82b 058 66 3C 18 7E 
3a82f 059 18 18 00 00 
3a833 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
3a837 05b FC CC FC 0C 
3a83b 05c 0C 0C 0C 0E 
3a83f 05d 0F 07 00 00 
3a843 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
3a847 05f FE C6 FE C6 
3a84b 060 C6 C6 C6 E6 
3a84f 061 E7 67 03 00 
3a853 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3a857 063 18 18 DB 3C 
3a85b 064 E7 3C DB 18 
3a85f 065 18 00 00 00 
3a863 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3a867 067 03 07 0F 1F 
3a86b 068 7F 1F 0F 07 
3a86f 069 03 01 00 00 
3a873 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3a877 06b 60 70 78 7C 
3a87b 06c 7F 7C 78 70 
3a87f 06d 60 40 00 00 
3a883 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3a887 06f 18 3C 7E 18 
3a88b 070 18 18 7E 3C 
3a88f 071 18 00 00 00 
3a893 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3a897 073 66 66 66 66 
3a89b 074 66 66 66    | 	byte	$66[7]
3a89e 075 00 66 66 00 
3a8a2 076 00 00 00 00 
3a8a6 077 00 FE DB DB 
3a8aa 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
3a8ae 079 D8 D8 D8 00 
3a8b2 07a 00 00 00 3E 
3a8b6 07b 63 06 1C 36 
3a8ba 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
3a8be 07d 30 63 3E 00 
3a8c2 07e 00 00 00 00 
3a8c6 07f 00 00 00 00 
3a8ca 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a8ce 081 7F 7F 7F 00 
3a8d2 082 00 00 00 00 
3a8d6 083 00 18 3C 7E 
3a8da 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
3a8de 085 3C 18 7E 00 
3a8e2 086 00 00 00 00 
3a8e6 087 00 18 3C 7E 
3a8ea 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
3a8ee 089 18 18 18 00 
3a8f2 08a 00 00 00 00 
3a8f6 08b 00 18 18 18 
3a8fa 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3a8fe 08d 7E 3C 18 00 
3a902 08e 00 00 00 00 
3a906 08f 00 00 00 18 
3a90a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
3a90e 091 00 00 00 00 
3a912 092 00 00 00 00 
3a916 093 00 00 00    | 	byte	$00[11]
3a919 094 0C 06 7F 06 
3a91d 095 0C 00 00 00 
3a921 096 00 00 00 00 
3a925 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a929 098 00 03 03 03 
3a92d 099 7F 00 00 00 
3a931 09a 00 00 00 00 
3a935 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a939 09c 14 36 7F 36 
3a93d 09d 14 00 00 00 
3a941 09e 00 00 00 00 
3a945 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
3a949 0a0 1C 1C 3E 3E 
3a94d 0a1 7F 7F 00 00 
3a951 0a2 00 00 00 00 
3a955 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3a959 0a4 7F 3E 3E 1C 
3a95d 0a5 1C 08 00 00 
3a961 0a6 00 00 00 00 
3a965 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a969 0a8 00 00 00 00 
3a96d 0a9 00 00 00 00 
3a971 0aa 00 00 00 00 
3a975 0ab 00 00       | 	byte	$00[14]
3a977 0ab 18 3C 3C 3C 
3a97b 0ac 18 18 18 00 
3a97f 0ad 18 18 00 00 
3a983 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3a987 0af 66 24 00 00 
3a98b 0b0 00 00 00 00 
3a98f 0b1 00 00 00 00 
3a993 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a997 0b3 00 36 36 7F 
3a99b 0b4 36 36 36 7F 
3a99f 0b5 36 36 00 00 
3a9a3 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3a9a7 0b7 3E 63 43 03 
3a9ab 0b8 3E 60 60 61 
3a9af 0b9 63 3E 18 18 
3a9b3 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3a9b7 0bb 00 00 43 63 
3a9bb 0bc 30 18 0C 06 
3a9bf 0bd 63 61 00 00 
3a9c3 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3a9c7 0bf 1C 36 36 1C 
3a9cb 0c0 6E 3B 33 33 
3a9cf 0c1 33 6E 00 00 
3a9d3 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3a9d7 0c3 0C 0C 0C 06 
3a9db 0c4 00 00 00 00 
3a9df 0c5 00 00 00 00 
3a9e3 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3a9e7 0c7 30 18 0C 0C 
3a9eb 0c8 0C 0C 0C 0C 
3a9ef 0c9 18 30 00 00 
3a9f3 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3a9f7 0cb 0C 18 30 30 
3a9fb 0cc 30 30 30 30 
3a9ff 0cd 18 0C 00 00 
3aa03 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
3aa07 0cf 00 00 00 66 
3aa0b 0d0 3C FF 3C 66 
3aa0f 0d1 00 00 00 00 
3aa13 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
3aa17 0d3 00 00 00 18 
3aa1b 0d4 18 7E 18 18 
3aa1f 0d5 00 00 00 00 
3aa23 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
3aa27 0d7 00 00 00 00 
3aa2b 0d8 00 00 00 00 | 	byte	$00[8]
3aa2f 0d9 18 18 18 0C 
3aa33 0da 00 00 00 00 
3aa37 0db 00 00 00 00 
3aa3b 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
3aa3f 0dd 00 00 00 00 
3aa43 0de 00 00 00 00 
3aa47 0df 00 00 00 00 
3aa4b 0e0 00 00 00 00 | 	byte	$00[16]
3aa4f 0e1 18 18 00 00 
3aa53 0e2 00 00 00 00 
3aa57 0e3 00 00 40 60 
3aa5b 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
3aa5f 0e5 03 01 00 00 
3aa63 0e6 00 00 00 00 
3aa67 0e7 1C 36 63 63 
3aa6b 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
3aa6f 0e9 36 1C 00 00 
3aa73 0ea 00 00 00 00 
3aa77 0eb 18 1C 1E 18 
3aa7b 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
3aa7f 0ed 18 7E 00 00 
3aa83 0ee 00 00 00 00 
3aa87 0ef 3E 63 60 30 
3aa8b 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
3aa8f 0f1 63 7F 00 00 
3aa93 0f2 00 00 00 00 
3aa97 0f3 3E 63 60 60 
3aa9b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
3aa9f 0f5 63 3E 00 00 
3aaa3 0f6 00 00 00 00 
3aaa7 0f7 30 38 3C 36 
3aaab 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
3aaaf 0f9 30 78 00 00 
3aab3 0fa 00 00 00 00 
3aab7 0fb 7F 03 03 03 
3aabb 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
3aabf 0fd 63 3E 00 00 
3aac3 0fe 00 00 00 00 
3aac7 0ff 1C 06 03 03 
3aacb 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
3aacf 101 63 3E 00 00 
3aad3 102 00 00 00 00 
3aad7 103 7F 63 60 60 
3aadb 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
3aadf 105 0C 0C 00 00 
3aae3 106 00 00 00 00 
3aae7 107 3E 63 63 63 
3aaeb 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
3aaef 109 63 3E 00 00 
3aaf3 10a 00 00 00 00 
3aaf7 10b 3E 63 63 63 
3aafb 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
3aaff 10d 30 1E 00 00 
3ab03 10e 00 00 00 00 
3ab07 10f 00 00 00 18 
3ab0b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3ab0f 111 18 18 00 00 
3ab13 112 00 00 00 00 
3ab17 113 00 00 00 18 
3ab1b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
3ab1f 115 18 18 0C 00 
3ab23 116 00 00 00 00 
3ab27 117 00 60 30 18 
3ab2b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
3ab2f 119 30 60 00 00 
3ab33 11a 00 00 00 00 
3ab37 11b 00 00 00 7E 
3ab3b 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
3ab3f 11d 00 00 00 00 
3ab43 11e 00 00 00 00 
3ab47 11f 00          | 	byte	$00[9]
3ab48 120 06 0C 18 30 
3ab4c 121 60 30 18 0C 
3ab50 122 06 00 00 00 
3ab54 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3ab58 124 63 63 30 18 
3ab5c 125 18 18 00 18 
3ab60 126 18 00 00 00 
3ab64 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ab68 128 3E 63 63 7B 
3ab6c 129 7B 7B 3B 03 
3ab70 12a 3E 00 00 00 
3ab74 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3ab78 12c 1C 36 63 63 
3ab7c 12d 7F 63 63 63 
3ab80 12e 63 00 00 00 
3ab84 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3ab88 130 66 66 66 3E 
3ab8c 131 66 66 66 66 
3ab90 132 3F 00 00 00 
3ab94 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3ab98 134 66 43 03 03 
3ab9c 135 03 03 43 66 
3aba0 136 3C 00 00 00 
3aba4 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3aba8 138 36 66 66 66 
3abac 139 66 66 66 36 
3abb0 13a 1F 00 00 00 
3abb4 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3abb8 13c 66 46 16 1E 
3abbc 13d 16 06 46 66 
3abc0 13e 7F 00 00 00 
3abc4 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3abc8 140 66 46 16 1E 
3abcc 141 16 06 06 06 
3abd0 142 0F 00 00 00 
3abd4 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3abd8 144 66 43 03 03 
3abdc 145 7B 63 63 66 
3abe0 146 5C 00 00 00 
3abe4 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3abe8 148 63 63 63 7F 
3abec 149 63 63 63 63 
3abf0 14a 63 00 00 00 
3abf4 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3abf8 14c 18 18 18 18 
3abfc 14d 18 18 18 18 | 	byte	$18[8]
3ac00 14e 3C 00 00 00 
3ac04 14f 00 00 00 78 
3ac08 150 30 30 30 30 
3ac0c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
3ac10 152 1E 00 00 00 
3ac14 153 00 00 00 67 
3ac18 154 66 66 36 1E 
3ac1c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
3ac20 156 67 00 00 00 
3ac24 157 00 00 00 0F 
3ac28 158 06 06 06 06 
3ac2c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3ac30 15a 7F 00 00 00 
3ac34 15b 00 00 00 63 
3ac38 15c 77 7F 7F 6B 
3ac3c 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
3ac40 15e 63 00 00 00 
3ac44 15f 00 00 00 63 
3ac48 160 67 6F 7F 7B 
3ac4c 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
3ac50 162 63 00 00 00 
3ac54 163 00 00 00 3E 
3ac58 164 63 63 63 63 
3ac5c 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3ac60 166 3E 00 00 00 
3ac64 167 00 00 00 3F 
3ac68 168 66 66 66 3E 
3ac6c 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
3ac70 16a 0F 00 00 00 
3ac74 16b 00 00 00 3E 
3ac78 16c 63 63 63 63 
3ac7c 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
3ac80 16e 3E 30 70 00 
3ac84 16f 00 00 00 3F 
3ac88 170 66 66 66 3E 
3ac8c 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
3ac90 172 67 00 00 00 
3ac94 173 00 00 00 3E 
3ac98 174 63 63 06 1C 
3ac9c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3aca0 176 3E 00 00 00 
3aca4 177 00 00 00 7E 
3aca8 178 7E 5A 18 18 
3acac 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3acb0 17a 3C 00 00 00 
3acb4 17b 00 00 00 63 
3acb8 17c 63 63 63 63 
3acbc 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3acc0 17e 3E 00 00 00 
3acc4 17f 00 00 00 63 
3acc8 180 63 63 63 63 
3accc 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
3acd0 182 08 00 00 00 
3acd4 183 00 00 00 63 
3acd8 184 63 63 63 6B 
3acdc 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
3ace0 186 36 00 00 00 
3ace4 187 00 00 00 63 
3ace8 188 63 36 3E 1C 
3acec 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
3acf0 18a 63 00 00 00 
3acf4 18b 00 00 00 66 
3acf8 18c 66 66 66 3C 
3acfc 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
3ad00 18e 3C 00 00 00 
3ad04 18f 00 00 00 7F 
3ad08 190 63 61 30 18 
3ad0c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3ad10 192 7F 00 00 00 
3ad14 193 00 00 00 3C 
3ad18 194 0C 0C 0C 0C 
3ad1c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
3ad20 196 3C 00 00 00 
3ad24 197 00 00 00 00 
3ad28 198 01 03 07 0E 
3ad2c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
3ad30 19a 40 00 00 00 
3ad34 19b 00 00 00 3C 
3ad38 19c 30 30 30 30 
3ad3c 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
3ad40 19e 3C 00 00 00 
3ad44 19f 1C 36 00 00 
3ad48 1a0 00 00 00 00 
3ad4c 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad50 1a2 00 00 00 00 
3ad54 1a3 00 00 00 00 
3ad58 1a4 00 00 00 00 
3ad5c 1a5 00 00 00 00 
3ad60 1a6 00          | 	byte	$00[17]
3ad61 1a6 FF 00 00 0C 
3ad65 1a7 18 00 00 00 
3ad69 1a8 00 00 00 00 
3ad6d 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad71 1aa 00 00 00 00 
3ad75 1ab 00 00 00 00 
3ad79 1ac 00          | 	byte	$00[9]
3ad7a 1ac 1E 30 3E 33 
3ad7e 1ad 33 33 6E 00 
3ad82 1ae 00 00 00 00 
3ad86 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3ad8a 1b0 1E 36 66 66 
3ad8e 1b1 66 66 3E 00 
3ad92 1b2 00 00 00 00 
3ad96 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ad9a 1b4 3E 63 03 03 
3ad9e 1b5 03 63 3E 00 
3ada2 1b6 00 00 00 00 
3ada6 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3adaa 1b8 3C 36 33 33 
3adae 1b9 33 33 6E 00 
3adb2 1ba 00 00 00 00 
3adb6 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adba 1bc 3E 63 7F 03 
3adbe 1bd 03 63 3E 00 
3adc2 1be 00 00 00 00 
3adc6 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3adca 1c0 0C 1E 0C 0C 
3adce 1c1 0C 0C 1E 00 
3add2 1c2 00 00 00 00 
3add6 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3adda 1c4 6E 33 33 33 
3adde 1c5 33 33 3E 30 
3ade2 1c6 33 1E 00 00 
3ade6 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3adea 1c8 36 6E 66 66 
3adee 1c9 66 66 67 00 
3adf2 1ca 00 00 00 00 
3adf6 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3adfa 1cc 1C 18 18 18 
3adfe 1cd 18 18 3C 00 
3ae02 1ce 00 00 00 00 
3ae06 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3ae0a 1d0 70 60 60 60 
3ae0e 1d1 60 60 60 66 
3ae12 1d2 66 3C 00 00 
3ae16 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3ae1a 1d4 66 36 1E 1E 
3ae1e 1d5 36 66 67 00 
3ae22 1d6 00 00 00 00 
3ae26 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3ae2a 1d8 18 18 18 18 
3ae2e 1d9 18 18       | 	byte	$18[6]
3ae30 1da 3C 00 00 00 
3ae34 1db 00 00 00 00 
3ae38 1dc 00 00 37 7F 
3ae3c 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
3ae40 1de 63 00 00 00 
3ae44 1df 00 00 00 00 
3ae48 1e0 00 00 3B 66 
3ae4c 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ae50 1e2 66 00 00 00 
3ae54 1e3 00 00 00 00 
3ae58 1e4 00 00 3E 63 
3ae5c 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
3ae60 1e6 3E 00 00 00 
3ae64 1e7 00 00 00 00 
3ae68 1e8 00 00 3B 66 
3ae6c 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
3ae70 1ea 3E 06 06 0F 
3ae74 1eb 00 00 00 00 
3ae78 1ec 00 00 6E 33 
3ae7c 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
3ae80 1ee 3E 30 30 78 
3ae84 1ef 00 00 00 00 
3ae88 1f0 00 00 3B 6E 
3ae8c 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
3ae90 1f2 0F 00 00 00 
3ae94 1f3 00 00 00 00 
3ae98 1f4 00 00 3E 63 
3ae9c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
3aea0 1f6 3E 00 00 00 
3aea4 1f7 00 00 00 08 
3aea8 1f8 0C 0C 3F 0C 
3aeac 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3aeb0 1fa 38 00 00 00 
3aeb4 1fb 00 00 00 00 
3aeb8 1fc 00 00 33 33 
3aebc 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
3aec0 1fe 6E 00 00 00 
3aec4 1ff 00 00 00 00 
3aec8 200 00 00 63 63 
3aecc 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
3aed0 202 1C 00 00 00 
3aed4 203 00 00 00 00 
3aed8 204 00 00 63 63 
3aedc 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
3aee0 206 36 00 00 00 
3aee4 207 00 00 00 00 
3aee8 208 00 00 63 36 
3aeec 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
3aef0 20a 63 00 00 00 
3aef4 20b 00 00 00 00 
3aef8 20c 00 00 63 63 
3aefc 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
3af00 20e 7E 60 30 1F 
3af04 20f 00 00 00 00 
3af08 210 00 00 7F 33 
3af0c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
3af10 212 7F 00 00 00 
3af14 213 00 00 00 70 
3af18 214 18 18 18 0E 
3af1c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
3af20 216 70 00 00 00 
3af24 217 00 00 00 18 
3af28 218 18 18 18 18 
3af2c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
3af30 21a 18 00 00 00 
3af34 21b 00 00 00 0E 
3af38 21c 18 18 18 70 
3af3c 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
3af40 21e 0E 00 00 00 
3af44 21f 6E 3B 00 00 
3af48 220 00 00 00 00 
3af4c 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3af50 222 00 00 00 00 
3af54 223 00 00 00 00 
3af58 224 00 00       | 	byte	$00[10]
3af5a 224 08 1C 36 63 
3af5e 225 63 63 7F 00 
3af62 226 00 00 00 00 
3af66 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3af6a 228 03 03 03 03 
3af6e 229 43 66 3C 18 
3af72 22a 30 1E 00 00 
3af76 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3af7a 22c 33 33 33 33 
3af7e 22d 33 33       | 	byte	$33[6]
3af80 22e 6E 00 00 00 
3af84 22f 00 00 60 30 
3af88 230 18 00 3E 63 
3af8c 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
3af90 232 3E 00 00 00 
3af94 233 00 00 08 1C 
3af98 234 36 00 1E 30 
3af9c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
3afa0 236 6E 00 00 00 
3afa4 237 00 00 00 00 
3afa8 238 33 00 1E 30 
3afac 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
3afb0 23a 6E 00 00 00 
3afb4 23b 00 00 1C 36 
3afb8 23c 1C 00 33 33 
3afbc 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
3afc0 23e 6E 00 00 00 
3afc4 23f 00 00 60 30 
3afc8 240 18 00 3E 63 
3afcc 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
3afd0 242 3E 00 00 00 
3afd4 243 00 00 00 00 
3afd8 244 00 00 3E 63 
3afdc 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
3afe0 246 3E 18 30 1E 
3afe4 247 00 00 00 1C 
3afe8 248 58 78 38 18 
3afec 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
3aff0 24a 3C 00 00 00 
3aff4 24b 00 00 00 00 
3aff8 24c 63 00 3E 63 
3affc 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
3b000 24e 3E 00 00 00 
3b004 24f 66 33 00 3E 
3b008 250 63 63 63 63 
3b00c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b010 252 3E 00 00 00 
3b014 253 00 00 CC 66 
3b018 254 33 00 3E 63 
3b01c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
3b020 256 3E 00 00 00 
3b024 257 00 00 18 3C 
3b028 258 66 00 1C 18 
3b02c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
3b030 25a 3C 00 00 00 
3b034 25b 30 18 00 7F 
3b038 25c 63 61 30 18 
3b03c 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
3b040 25e 7F 00 00 00 
3b044 25f 00 63 00 08 
3b048 260 1C 36 63 63 
3b04c 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
3b050 262 63 00 00 00 
3b054 263 30 18 00 3C 
3b058 264 66 43 03 03 
3b05c 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
3b060 266 3C 00 00 00 
3b064 267 30 18 00 7F 
3b068 268 66 46 16 1E 
3b06c 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
3b070 26a 7F 00 00 00 
3b074 26b 0C 06 00 0F 
3b078 26c 06 06 06 06 
3b07c 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
3b080 26e 7F 00 00 00 
3b084 26f 30 18 00 1C 
3b088 270 18 18 18 18 
3b08c 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
3b090 272 3C 00 00 00 
3b094 273 00 00 08 1C 
3b098 274 36 00 3E 63 
3b09c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
3b0a0 276 3E 00 00 00 
3b0a4 277 00 00 00 00 
3b0a8 278 63 00 3E 63 
3b0ac 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
3b0b0 27a 3E 00 00 00 
3b0b4 27b 00 00 00 6F 
3b0b8 27c 46 26 06 06 
3b0bc 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
3b0c0 27e 7F 00 00 00 
3b0c4 27f 00 00 00 6E 
3b0c8 280 4C 2C 0C 0C 
3b0cc 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
3b0d0 282 1E 00 00 00 
3b0d4 283 30 18 00 3E 
3b0d8 284 63 63 06 1C 
3b0dc 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
3b0e0 286 3E 00 00 00 
3b0e4 287 00 00 60 30 
3b0e8 288 18 00 3E 63 
3b0ec 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
3b0f0 28a 3E 00 00 00 
3b0f4 28b 00 63 00 3E 
3b0f8 28c 63 63 63 63 
3b0fc 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
3b100 28e 3E 00 00 00 
3b104 28f 00 63 00 63 
3b108 290 63 63 63 63 
3b10c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
3b110 292 3E 00 00 00 
3b114 293 6C 38 00 7E 
3b118 294 7E 5A 18 18 
3b11c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
3b120 296 3C 00 00 00 
3b124 297 00 00 60 48 
3b128 298 2C 0C 3F 0C 
3b12c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
3b130 29a 38 00 00 00 
3b134 29b 00 00 00 0F 
3b138 29c 26 36 1E 0E 
3b13c 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
3b140 29e 7F 00 00 00 
3b144 29f 00 00 00 00 
3b148 2a0 00 63 36 1C 
3b14c 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
3b150 2a2 00 00 00 00 
3b154 2a3 00 00       | 	byte	$00[6]
3b156 2a3 36 1C 08 00 
3b15a 2a4 3E 63 03 03 
3b15e 2a5 03 63 3E 00 
3b162 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3b166 2a7 30 18 0C 00 
3b16a 2a8 1E 30 3E 33 
3b16e 2a9 33 33 6E 00 
3b172 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b176 2ab 60 30 18 00 
3b17a 2ac 1C 18 18 18 
3b17e 2ad 18 18 3C 00 
3b182 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3b186 2af 60 30 18 00 
3b18a 2b0 3E 63 63 63 
3b18e 2b1 63 63 3E 00 
3b192 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3b196 2b3 30 18 0C 00 
3b19a 2b4 33 33 33 33 
3b19e 2b5 33 33 6E 00 
3b1a2 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3b1a6 2b7 00 08 1C 36 
3b1aa 2b8 63 63 7F 63 
3b1ae 2b9 63 63 63 18 
3b1b2 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3b1b6 2bb 00 00 00 00 
3b1ba 2bc 1E 30 3E 33 
3b1be 2bd 33 33 6E 18 
3b1c2 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3b1c6 2bf 00 7F 63 61 
3b1ca 2c0 30 18 0C 06 
3b1ce 2c1 43 63 7F 00 
3b1d2 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3b1d6 2c3 36 1C 08 00 
3b1da 2c4 7F 33 18 0C 
3b1de 2c5 06 63 7F 00 
3b1e2 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3b1e6 2c7 00 7F 66 46 
3b1ea 2c8 16 1E 16 06 
3b1ee 2c9 46 66 7F 18 
3b1f2 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
3b1f6 2cb 00 00 00 00 
3b1fa 2cc 3E 63 7F 03 
3b1fe 2cd 03 63 3E 18 
3b202 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
3b206 2cf 00 3C 66 03 
3b20a 2d0 1F 03 0F 03 
3b20e 2d1 03 66 3C 00 
3b212 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
3b216 2d3 60 30 18 00 
3b21a 2d4 7F 33 18 0C 
3b21e 2d5 06 63 7F 00 
3b222 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
3b226 2d7 00 3C 66 43 
3b22a 2d8 03 03 03 03 
3b22e 2d9 43 66 3C 00 
3b232 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
3b236 2db 00 00 00 00 
3b23a 2dc 3E 63 06 1C 
3b23e 2dd 30 63 3E 18 
3b242 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
3b246 2df 00 00 00 00 
3b24a 2e0 00 00       | 	byte	$00[6]
3b24c 2e1 6C 36 1B 36 
3b250 2e2 6C 00 00 00 
3b254 2e3 00 00 00 00 
3b258 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b25c 2e5 1B 36 6C 36 
3b260 2e6 1B 00 00 00 
3b264 2e7 88 22 88 22 
3b268 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
3b26c 2e9 88 22 88 22 
3b270 2ea 88 22 88 22 
3b274 2eb AA 55 AA 55 
3b278 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
3b27c 2ed AA 55 AA 55 
3b280 2ee AA 55 AA 55 
3b284 2ef BB EE BB EE 
3b288 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
3b28c 2f1 BB EE BB EE 
3b290 2f2 BB EE BB EE 
3b294 2f3 18 18 18 18 
3b298 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3b29c 2f5 18 18 18 18 
3b2a0 2f6 18 18 18 18 
3b2a4 2f7 18 18 18 18 
3b2a8 2f8 18 18 18    | 	byte	$18[15]
3b2ab 2f8 1F 18 18 18 
3b2af 2f9 18 18 18 18 
3b2b3 2fa 18 30 18 00 
3b2b7 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3b2bb 2fc 63 7F 63 63 
3b2bf 2fd 63 63 00 00 
3b2c3 2fe 00 1C 36 00 
3b2c7 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3b2cb 300 63 7F 63 63 
3b2cf 301 63 63 00 00 
3b2d3 302 00 36 1C 00 
3b2d7 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3b2db 304 1E 16 06 46 
3b2df 305 66 7F 00 00 
3b2e3 306 00 00 00 00 
3b2e7 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3b2eb 308 1C 30 60 63 
3b2ef 309 63 3E 18 30 
3b2f3 30a 1E 6C 6C 6C 
3b2f7 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3b2fb 30c 6F 6C 6C 6C 
3b2ff 30d 6C 6C 6C 6C 
3b303 30e 6C 6C 6C 6C 
3b307 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b30b 310 6C 6C 6C 6C 
3b30f 311 6C 6C 6C 6C 
3b313 312 6C          | 	byte	$6c[9]
3b314 313 00 00 00 00 
3b318 314 00          | 	byte	$00[5]
3b319 314 7F 60 6F 6C 
3b31d 315 6C 6C 6C 6C 
3b321 316 6C 6C 6C 6C 
3b325 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b329 318 6F 60 7F 00 
3b32d 319 00 00 00 00 
3b331 31a 00 00 00 18 
3b335 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
3b339 31c 61 30 18 0C 
3b33d 31d 06 43 63 7F 
3b341 31e 00 00 00 00 
3b345 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
3b349 320 00 7F 33 18 
3b34d 321 0C 06 63 7F 
3b351 322 00 00 00 00 
3b355 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
3b359 324 00 00 1F 18 
3b35d 325 18 18 18 18 
3b361 326 18 18 18 18 
3b365 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b369 328 18 18 F8 00 
3b36d 329 00 00 00 00 
3b371 32a 00 00 00 18 
3b375 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b379 32c 18 18 FF 00 
3b37d 32d 00 00 00 00 
3b381 32e 00 00 00 00 
3b385 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b389 330 00 00 FF 18 
3b38d 331 18 18 18 18 
3b391 332 18 18 18 18 
3b395 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b399 334 18 18 F8 18 
3b39d 335 18 18 18 18 
3b3a1 336 18 18 18 00 
3b3a5 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3b3a9 338 00 00 FF 00 
3b3ad 339 00 00 00 00 
3b3b1 33a 00 00 00 18 
3b3b5 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
3b3b9 33c 18 18 FF 18 
3b3bd 33d 18 18 18 18 
3b3c1 33e 18 18 18 63 
3b3c5 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
3b3c9 340 36 63 63 7F 
3b3cd 341 63 63 63 63 
3b3d1 342 00 00 00 00 
3b3d5 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
3b3d9 344 00 1E 30 3E 
3b3dd 345 33 33 33 6E 
3b3e1 346 00 00 00 6C 
3b3e5 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b3e9 348 EC 0C FC 00 
3b3ed 349 00 00 00 00 
3b3f1 34a 00 00 00 00 
3b3f5 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b3f9 34c FC 0C EC 6C 
3b3fd 34d 6C 6C 6C 6C 
3b401 34e 6C 6C 6C 6C 
3b405 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b409 350 EF 00 FF 00 
3b40d 351 00 00 00 00 
3b411 352 00 00 00 00 
3b415 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b419 354 FF 00 EF 6C 
3b41d 355 6C 6C 6C 6C 
3b421 356 6C 6C 6C 6C 
3b425 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3b429 358 EC 0C EC 6C 
3b42d 359 6C 6C 6C 6C 
3b431 35a 6C 6C 6C 00 
3b435 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b439 35c FF 00 FF 00 
3b43d 35d 00 00 00 00 
3b441 35e 00 00 00 6C 
3b445 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
3b449 360 EF 00 EF 6C 
3b44d 361 6C 6C 6C 6C 
3b451 362 6C 6C 6C 00 
3b455 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
3b459 364 63 3E 63 63 
3b45d 365 63 63 3E 63 
3b461 366 00 00 00 00 
3b465 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
3b469 368 30 3C 36 33 
3b46d 369 33 33 33 6E 
3b471 36a 00 00 00 00 
3b475 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
3b479 36c 66 66 6F 66 
3b47d 36d 66 66 36 1F 
3b481 36e 00 00 00 36 
3b485 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
3b489 370 66 66 66 66 
3b48d 371 66 66       | 	byte	$66[6]
3b48f 371 36 1F 00 00 
3b493 372 00 00 63 00 
3b497 373 7F 66 46 16 
3b49b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3b49f 375 66 7F 00 00 
3b4a3 376 00 6C 38 00 
3b4a7 377 38 30 30 3C 
3b4ab 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3b4af 379 33 6E 00 00 
3b4b3 37a 00 36 1C 00 
3b4b7 37b 63 67 6F 7F 
3b4bb 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3b4bf 37d 63 63 00 00 
3b4c3 37e 00 30 18 00 
3b4c7 37f 3C 18 18 18 
3b4cb 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b4cf 381 18 3C 00 00 
3b4d3 382 00 3C 66 00 
3b4d7 383 3C 18 18 18 
3b4db 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3b4df 385 18 3C 00 00 
3b4e3 386 00 00 00 36 
3b4e7 387 1C 08 00 3E 
3b4eb 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3b4ef 389 63 3E 00 00 
3b4f3 38a 00 18 18 18 
3b4f7 38b 18 18 18 18 
3b4fb 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3b4ff 38d 00 00 00 00 
3b503 38e 00 00 00 00 
3b507 38f 00 00 00 00 | 	byte	$00[12]
3b50b 390 F8 18 18 18 
3b50f 391 18 18 18 18 
3b513 392 18 FF FF FF 
3b517 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3b51b 394 FF FF FF FF 
3b51f 395 FF FF FF FF 
3b523 396 FF          | 	byte	$ff[9]
3b524 397 00 00 00 00 
3b528 398 00 00 00    | 	byte	$00[7]
3b52b 398 FF FF FF FF 
3b52f 399 FF FF FF FF 
3b533 39a FF          | 	byte	$ff[9]
3b534 39b 00 00 00 7E 
3b538 39c 7E 5A 18 18 
3b53c 39d 18 18 18 18 
3b540 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
3b544 39f 1C 36 1C 63 
3b548 3a0 63 63 63 63 
3b54c 3a1 63 63 63 63 
3b550 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b554 3a3 FF FF FF FF 
3b558 3a4 FF FF FF    | 	byte	$ff[7]
3b55b 3a4 00 00 00 00 
3b55f 3a5 00 00 00 00 
3b563 3a6 00          | 	byte	$00[9]
3b564 3a7 30 18 00 3E 
3b568 3a8 63 63 63 63 
3b56c 3a9 63 63 63 63 
3b570 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b574 3ab 00 00 00 1E 
3b578 3ac 33 33 33 1B 
3b57c 3ad 33 63 63 63 
3b580 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
3b584 3af 1C 36 00 3E 
3b588 3b0 63 63 63 63 
3b58c 3b1 63 63 63 63 
3b590 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b594 3b3 30 18 00 63 
3b598 3b4 67 6F 7F 7B 
3b59c 3b5 73 63 63 63 
3b5a0 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
3b5a4 3b7 00 00 60 30 
3b5a8 3b8 18 00 3B 66 
3b5ac 3b9 66 66 66 66 
3b5b0 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b5b4 3bb 00 00 36 1C 
3b5b8 3bc 08 00 3B 66 
3b5bc 3bd 66 66 66 66 
3b5c0 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
3b5c4 3bf 36 1C 00 3E 
3b5c8 3c0 63 63 06 1C 
3b5cc 3c1 30 60 63 63 
3b5d0 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
3b5d4 3c3 00 00 36 1C 
3b5d8 3c4 08 00 3E 63 
3b5dc 3c5 06 1C 30 63 
3b5e0 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
3b5e4 3c7 30 18 00 3F 
3b5e8 3c8 66 66 66 3E 
3b5ec 3c9 36 66 66 66 
3b5f0 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
3b5f4 3cb 30 18 00 63 
3b5f8 3cc 63 63 63 63 
3b5fc 3cd 63 63 63 63 
3b600 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b604 3cf 00 00 60 30 
3b608 3d0 18 00 3B 6E 
3b60c 3d1 66 06 06 06 
3b610 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
3b614 3d3 66 33 00 63 
3b618 3d4 63 63 63 63 
3b61c 3d5 63 63 63 63 
3b620 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
3b624 3d7 00 00 60 30 
3b628 3d8 18 00 63 63 
3b62c 3d9 63 63 63 63 
3b630 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
3b634 3db 30 18 00 66 
3b638 3dc 66 66 66 3C 
3b63c 3dd 18 18 18 18 
3b640 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
3b644 3df 00 00 00 08 
3b648 3e0 0C 0C 3F 0C 
3b64c 3e1 0C 0C 0C 6C 
3b650 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
3b654 3e3 30 18 00 00 
3b658 3e4 00 00 00 00 
3b65c 3e5 00 00 00 00 
3b660 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b664 3e7 00 00 00 00 
3b668 3e8 00 00 00 00 | 	byte	$00[8]
3b66c 3e9 7F 00 00 00 
3b670 3ea 00 00 00 00 
3b674 3eb 66 33 00 00 
3b678 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
3b67c 3ed 00 00 00 00 
3b680 3ee 00 00 00 00 
3b684 3ef 00 00 00 00 
3b688 3f0 00 00 00 00 
3b68c 3f1 00 00 00 00 
3b690 3f2 00          | 	byte	$00[21]
3b691 3f2 0C 06 3C 36 
3b695 3f3 1C 00 00 00 
3b699 3f4 00 00 00 00 
3b69d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6a1 3f6 00 00 00 63 
3b6a5 3f7 3E 00 00 00 
3b6a9 3f8 00 00 00 00 
3b6ad 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6b1 3fa 00 00 00 00 
3b6b5 3fb 3E 63 06 1C 
3b6b9 3fc 36 63 63 36 
3b6bd 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
3b6c1 3fe 00 00 00 00 
3b6c5 3ff 00 00 00 00 | 	byte	$00[8]
3b6c9 400 18 00 7E 00 
3b6cd 401 18 00 00 00 
3b6d1 402 00 00 00 00 
3b6d5 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b6d9 404 00 00 00 00 
3b6dd 405 00 00 00 00 | 	byte	$00[8]
3b6e1 406 18 30 1E 00 
3b6e5 407 00 00 1C 36 
3b6e9 408 36 1C 00 00 
3b6ed 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
3b6f1 40a 00 00 00 00 
3b6f5 40b 63 00 00 00 
3b6f9 40c 00 00 00 00 
3b6fd 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b701 40e 00 00 00 18 
3b705 40f 18 00 00 00 
3b709 410 00 00 00 00 
3b70d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b711 412 00 00 00 00 
3b715 413 00          | 	byte	$00[5]
3b716 413 CC 66 33 00 
3b71a 414 33 33 33 33 
3b71e 415 33 33 6E 00 
3b722 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
3b726 417 00 3F 66 66 
3b72a 418 66 3E 36 66 
3b72e 419 66 66 6F 00 
3b732 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
3b736 41b 36 1C 08 00 
3b73a 41c 3B 6E 66 06 
3b73e 41d 06 06 0F 00 
3b742 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
3b746 41f 00 00 00 7E 
3b74a 420 7E 7E 7E 7E 
3b74e 421 7E 7E 00 00 
3b752 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
3b756 423 00 00 00 00 
3b75a 424 00 00 00 00 
3b75e 425 00 00 00 00 
3b762 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b764 427             | 'vga_font       file "vgafont.def"
3b764 427 00 00 00 00 
      ...             
3b794 433 00 00 00 00 
3b798 434 00 00 00    | st_font        file "st4font.def"
3b79b 434 FF FF 00 00 
3b79f 435 00 00 00 00 
3b7a3 436 00 18 18 18 
3b7a7 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b7ab 438 18 18 18 18 
3b7af 439 18 18 18 18 
3b7b3 43a 18          | 	byte	$18[9]
3b7b4 43b 00 00 00 00 
3b7b8 43c 00 00 00    | 	byte	$00[7]
3b7bb 43c FF FF 18 18 
3b7bf 43d 18 18 18 18 
3b7c3 43e 18 18 18 18 
3b7c7 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b7cb 440 FF FF 00 00 
3b7cf 441 00 00 00 00 
3b7d3 442 00 18 18 18 
3b7d7 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b7db 444 1F 1F 18 18 
3b7df 445 18 18 18 18 
3b7e3 446 18 18 18 18 
3b7e7 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b7eb 448 F8 F8 18 18 
3b7ef 449 18 18 18 18 
3b7f3 44a 18 00 00 00 
3b7f7 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b7fb 44c 1F 1F 18 18 
3b7ff 44d 18 18 18 18 
3b803 44e 18 00 00 00 
3b807 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3b80b 450 F8 F8 18 18 
3b80f 451 18 18 18 18 
3b813 452 18 18 18 18 
3b817 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3b81b 454 1F 1F 00 00 
3b81f 455 00 00 00 00 
3b823 456 00 18 18 18 
3b827 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b82b 458 F8 F8 00 00 
3b82f 459 00 00 00 00 
3b833 45a 00 18 18 18 
3b837 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3b83b 45c FF FF 18 18 
3b83f 45d 18 18 18 18 
3b843 45e 18 00 00 18 
3b847 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
3b84b 460 66 7E 7E 66 
3b84f 461 66 66 66 30 
3b853 462 18 00 00 7E 
3b857 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3b85b 464 3E 06 06 06 
3b85f 465 06 7E 7E 18 
3b863 466 0C 30 18 3C 
3b867 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3b86b 468 06 06 06 66 
3b86f 469 66 7E 3C 00 
3b873 46a 00 30 18 66 
3b877 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3b87b 46c 7E 7E 76 76 
3b87f 46d 66 66 66 00 
3b883 46e 00 30 18 7C 
3b887 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3b88b 470 1C 38 70 60 
3b88f 471 60 7E 3E 00 
3b893 472 00 30 18 7E 
3b897 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3b89b 474 18 0C 0C 06 
3b89f 475 06 7E 7E 00 
3b8a3 476 00 18 18 00 
3b8a7 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3b8ab 478 18 18 0C 0C 
3b8af 479 06 7E 7E 00 
3b8b3 47a 00 30 18 3C 
3b8b7 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3b8bb 47c 66 66 66 66 
3b8bf 47d 66          | 	byte	$66[5]
3b8c0 47e 7E 3C 00 00 
3b8c4 47f 00 00 06 06 
3b8c8 480 06 06 16 1E 
3b8cc 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
3b8d0 482 7E 7E 00 00 
3b8d4 483 00 00 00 00 
3b8d8 484 00 3C 7C 60 
3b8dc 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
3b8e0 486 7E 7C 30 18 
3b8e4 487 00 00 00 00 
3b8e8 488 00 3C 7E 66 
3b8ec 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
3b8f0 48a 7E 7C 18 0C 
3b8f4 48b 00 00 30 18 
3b8f8 48c 00 3C 3E 06 
3b8fc 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
3b900 48e 7E 7C 00 00 
3b904 48f 00 00 30 18 
3b908 490 00 3E 7E 66 
3b90c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
3b910 492 66 66 00 00 
3b914 493 00 00 30 18 
3b918 494 00 7C 7E 06 
3b91c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
3b920 496 7E 3E 00 00 
3b924 497 00 00 30 18 
3b928 498 00 7E 7E 30 
3b92c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b930 49a 7E 7E 00 00 
3b934 49b 00 00 18 18 
3b938 49c 00 7E 7E 30 
3b93c 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3b940 49e 7E 7E 00 00 
3b944 49f 00 00 30 18 
3b948 4a0 00 3C 7E 66 
3b94c 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
3b950 4a2 7E 3C 00 00 
3b954 4a3 00 00 1C 1C 
3b958 4a4 18 18 38 3C 
3b95c 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
3b960 4a6 3C 3C 00 00 
3b964 4a7 00 00 00 00 
3b968 4a8 00 00 00 00 
3b96c 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b970 4aa 00 00 00 00 
3b974 4ab 00 00       | 	byte	$00[6]
3b976 4ab 18 18 18 18 
3b97a 4ac 18 18 18 18 | 	byte	$18[8]
3b97e 4ad 00 00 18 18 
3b982 4ae 00 00 00 00 
3b986 4af 66 66 66 66 
3b98a 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
3b98e 4b1 00 00 00 00 
3b992 4b2 00 00 00 00 
3b996 4b3 00          | 	byte	$00[9]
3b997 4b3 66 66 FF FF 
3b99b 4b4 66 66 FF FF 
3b99f 4b5 66 66 00 00 
3b9a3 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3b9a7 4b7 7C 7E 06 06 
3b9ab 4b8 3E 7C 60 60 
3b9af 4b9 7E 3E 18 18 
3b9b3 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3b9b7 4bb 66 30 30 18 
3b9bb 4bc 18 0C 0C 66 
3b9bf 4bd 66 00 00 00 
3b9c3 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3b9c7 4bf 66 66 3C 1C 
3b9cb 4c0 1C FC FE 66 
3b9cf 4c1 66 FE FC 00 
3b9d3 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3b9d7 4c3 18 18 18 18 
3b9db 4c4 00 00 00 00 
3b9df 4c5 00 00 00 00 
3b9e3 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3b9e7 4c7 18 1C 0C 0C 
3b9eb 4c8 0C 0C 0C 0C 
3b9ef 4c9 1C 18 30 00 
3b9f3 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3b9f7 4cb 18 38 30 30 
3b9fb 4cc 30 30 30 30 
3b9ff 4cd 38 18 0C 00 
3ba03 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
3ba07 4cf 66 66 3C 3C 
3ba0b 4d0 FF FF 3C 3C 
3ba0f 4d1 66 66 00 00 
3ba13 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
3ba17 4d3 00 18 18 18 
3ba1b 4d4 7E 7E 18 18 
3ba1f 4d5 18 00 00 00 
3ba23 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3ba27 4d7 00 00 00 00 
3ba2b 4d8 00 00       | 	byte	$00[6]
3ba2d 4d9 18 18 18 18 
3ba31 4da 18          | 	byte	$18[5]
3ba32 4da 0C 04 00 00 
3ba36 4db 00 00 00 00 
3ba3a 4dc 7E 7E 00 00 
3ba3e 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
3ba42 4de 00 00 00 00 
3ba46 4df 00 00 00 00 
3ba4a 4e0 00 00 00 00 
3ba4e 4e1 00          | 	byte	$00[13]
3ba4f 4e1 18 18 18 00 
3ba53 4e2 00 00 00 60 
3ba57 4e3 60 60 30 30 
3ba5b 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
3ba5f 4e5 06 06 06 00 
3ba63 4e6 00 00 00 3C 
3ba67 4e7 7E 66 66 66 
3ba6b 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
3ba6f 4e9 66 7E 3C 00 
3ba73 4ea 00 00 00 18 
3ba77 4eb 18 1C 1C 18 
3ba7b 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
3ba7f 4ed 18 7E 7E 00 
3ba83 4ee 00 00 00 3C 
3ba87 4ef 7E 66 66 30 
3ba8b 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
3ba8f 4f1 0C 7E 7E 00 
3ba93 4f2 00 00 00 7E 
3ba97 4f3 7E 30 30 18 
3ba9b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
3ba9f 4f5 66 7E 3C 00 
3baa3 4f6 00 00 00 30 
3baa7 4f7 30 38 38 3C 
3baab 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
3baaf 4f9 7E 30 30 00 
3bab3 4fa 00 00 00 7E 
3bab7 4fb 7E 06 06 3E 
3babb 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
3babf 4fd 66 7E 3C 00 
3bac3 4fe 00 00 00 38 
3bac7 4ff 3C 0E 06 06 
3bacb 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
3bacf 501 66 7E 3C 00 
3bad3 502 00 00 00 7E 
3bad7 503 7E 60 60 30 
3badb 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
3badf 505 0C 0C 0C 00 
3bae3 506 00 00 00 3C 
3bae7 507 7E 66 66 3C 
3baeb 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
3baef 509 66 7E 3C 00 
3baf3 50a 00 00 00 3C 
3baf7 50b 7E 66 66 7E 
3bafb 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
3baff 50d 70 3C 1C 00 
3bb03 50e 00 00 00 00 
3bb07 50f 00 00 18 18 
3bb0b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
3bb0f 511 18 18 18 00 
3bb13 512 00 00 00 00 
3bb17 513 00 00 18 18 
3bb1b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
3bb1f 515 18 18 18 0C 
3bb23 516 04 00 00 00 
3bb27 517 70 38 1C 0E 
3bb2b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
3bb2f 519 70 00 00 00 
3bb33 51a 00 00 00 00 
3bb37 51b 00 00 7E 7E 
3bb3b 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
3bb3f 51d 00 00 00 00 
3bb43 51e 00 00 00 00 | 	byte	$00[8]
3bb47 51f 0E 1C 38 70 
3bb4b 520 E0 70 38 1C 
3bb4f 521 0E 00 00 00 
3bb53 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3bb57 523 7E 66 66 30 
3bb5b 524 30 18 18 18 
3bb5f 525 00 18 18 00 
3bb63 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3bb67 527 7E 66 66 66 
3bb6b 528 66 36 06 66 
3bb6f 529 66 7E 3C 00 
3bb73 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3bb77 52b 3C 7E 66 66 
3bb7b 52c 66 7E 7E 66 
3bb7f 52d 66 66 66 00 
3bb83 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3bb87 52f 7E 66 66 7E 
3bb8b 530 3E 66 66 66 
3bb8f 531 66 7E 3E 00 
3bb93 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3bb97 533 7E 66 66 06 
3bb9b 534 06 06 06 66 
3bb9f 535 66 7E 3C 00 
3bba3 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3bba7 537 7E 66 66 66 
3bbab 538 66 66 66 66 
3bbaf 539 66 7E 3E 00 
3bbb3 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3bbb7 53b 7E 06 06 3E 
3bbbb 53c 3E 06 06 06 
3bbbf 53d 06 7E 7E 00 
3bbc3 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3bbc7 53f 7E 06 06 3E 
3bbcb 540 3E 06 06 06 
3bbcf 541 06 06 06 00 
3bbd3 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3bbd7 543 7E 06 06 76 
3bbdb 544 76 66 66 66 
3bbdf 545 66 7E 3C 00 
3bbe3 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3bbe7 547 66 66 66 7E 
3bbeb 548 7E 66 66 66 
3bbef 549 66 66 66 00 
3bbf3 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3bbf7 54b 7E 18 18 18 
3bbfb 54c 18 18 18 18 
3bbff 54d 18 7E 7E 00 
3bc03 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
3bc07 54f 60 60 60 60 
3bc0b 550 60 60 60    | 	byte	$60[7]
3bc0e 551 66 66 7E 3C 
3bc12 552 00 00 00 00 
3bc16 553 66 66 36 36 
3bc1a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
3bc1e 555 66 66 C6 C6 
3bc22 556 00 00 00 00 
3bc26 557 06 06 06 06 
3bc2a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
3bc2e 559 06 06 7E 7E 
3bc32 55a 00 00 00 00 
3bc36 55b C6 C6 EE EE 
3bc3a 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
3bc3e 55d C6 C6 C6 C6 
3bc42 55e 00 00 00 00 
3bc46 55f 66 66 66 6E 
3bc4a 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
3bc4e 561 76 66 66 66 
3bc52 562 00 00 00 00 
3bc56 563 3C 7E 66 66 
3bc5a 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bc5e 565 66 66 7E 3C 
3bc62 566 00 00 00 00 
3bc66 567 3E 7E 66 66 
3bc6a 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
3bc6e 569 06 06 06 06 
3bc72 56a 00 00 00 00 
3bc76 56b 3C 7E 66 66 
3bc7a 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
3bc7e 56d 66 56 3E 6C 
3bc82 56e 00 00 00 00 
3bc86 56f 3E 7E 66 66 
3bc8a 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
3bc8e 571 66 66 C6 C6 
3bc92 572 00 00 00 00 
3bc96 573 7C 7E 06 06 
3bc9a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
3bc9e 575 60 60 7E 3E 
3bca2 576 00 00 00 00 
3bca6 577 7E 7E 18 18 
3bcaa 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
3bcae 579 18 18 18 18 
3bcb2 57a 00 00 00 00 
3bcb6 57b 66 66 66 66 
3bcba 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bcbe 57d 66 66 7E 3C 
3bcc2 57e 00 00 00 00 
3bcc6 57f 66 66 66 66 
3bcca 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
3bcce 581 3C 3C 18 18 
3bcd2 582 00 00 00 00 
3bcd6 583 C6 C6 C6 C6 
3bcda 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
3bcde 585 FE EE C6 82 
3bce2 586 00 00 00 00 
3bce6 587 66 66 66 3C 
3bcea 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
3bcee 589 3C 66 66 66 
3bcf2 58a 00 00 00 00 
3bcf6 58b 66 66 66 66 
3bcfa 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
3bcfe 58d 18 18 18 18 
3bd02 58e 00 00 00 00 
3bd06 58f 7E 7E 30 30 
3bd0a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
3bd0e 591 06 06 7E 7E 
3bd12 592 00 00 00 00 
3bd16 593 3C 3C 0C 0C 
3bd1a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
3bd1e 595 0C 0C 3C 3C 
3bd22 596 00 00 00 00 
3bd26 597 06 06 0C 0C 
3bd2a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
3bd2e 599 60 60 C0 C0 
3bd32 59a 00 00 00 00 
3bd36 59b 3C 3C 30 30 
3bd3a 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
3bd3e 59d 30 30 3C 3C 
3bd42 59e 00 00 00 00 
3bd46 59f 18 18 3C 3C 
3bd4a 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
3bd4e 5a1 00 00 00 00 
3bd52 5a2 00 00 00 00 
3bd56 5a3 00 00 00 00 
3bd5a 5a4 00 00 00 00 
3bd5e 5a5 00 00       | 	byte	$00[18]
3bd60 5a6 FE FE 00 00 
3bd64 5a7 00 00 0C 0C 
3bd68 5a8 18 18 00 00 
3bd6c 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
3bd70 5aa 00 00 00 00 
3bd74 5ab 00 00 00 00 
3bd78 5ac 00          | 	byte	$00[9]
3bd79 5ac 3C 7C 60 7C 
3bd7d 5ad 7E 66 66 7E 
3bd81 5ae 7C 00 00 00 
3bd85 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3bd89 5b0 3E 7E 66 66 
3bd8d 5b1 66 66 66 7E 
3bd91 5b2 3E 00 00 00 
3bd95 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3bd99 5b4 3C 3E 06 06 
3bd9d 5b5 06 06 06 7E 
3bda1 5b6 7C 00 00 00 
3bda5 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3bda9 5b8 7C 7E 66 66 
3bdad 5b9 66 66 66 7E 
3bdb1 5ba 7C 00 00 00 
3bdb5 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3bdb9 5bc 3C 7E 66 66 
3bdbd 5bd 7E 06 06 7E 
3bdc1 5be 7C 00 00 00 
3bdc5 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3bdc9 5c0 18 7E 7E 18 
3bdcd 5c1 18 18 18 18 
3bdd1 5c2 18 00 00 00 
3bdd5 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3bdd9 5c4 7C 7E 66 66 
3bddd 5c5 66 66 7E 7C 
3bde1 5c6 60 7E 3E 00 
3bde5 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3bde9 5c8 3E 7E 66 66 
3bded 5c9 66 66 66 66 
3bdf1 5ca 66 00 00 00 
3bdf5 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3bdf9 5cc 1C 1C 18 18 
3bdfd 5cd 18 18 18 3C 
3be01 5ce 3C 00 00 00 
3be05 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
3be09 5d0 30 30 30 30 
3be0d 5d1 30 30 30 30 
3be11 5d2 30          | 	byte	$30[9]
3be12 5d2 3E 1E 00 00 
3be16 5d3 06 06 06 36 
3be1a 5d4 36 1E 1E 1E 
3be1e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
3be22 5d6 00 00 00 00 
3be26 5d7 1C 1C 18 18 
3be2a 5d8 18 18 18 18 
3be2e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
3be32 5da 00 00 00 00 
3be36 5db 00 00 00    | 	byte	$00[7]
3be39 5dc 6C FE FE D6 
3be3d 5dd D6 C6 C6 C6 
3be41 5de C6 00 00 00 
3be45 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
3be49 5e0 3E 7E 66 66 
3be4d 5e1 66 66 66 66 
3be51 5e2 66 00 00 00 
3be55 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3be59 5e4 3C 7E 66 66 
3be5d 5e5 66 66 66 7E 
3be61 5e6 3C 00 00 00 
3be65 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3be69 5e8 3E 7E 66 66 
3be6d 5e9 66 66 66 7E 
3be71 5ea 3E 06 06 00 
3be75 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3be79 5ec 7C 7E 66 66 
3be7d 5ed 66 66 66 7E 
3be81 5ee 7C 60 60 00 
3be85 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3be89 5f0 3E 7E 66 06 
3be8d 5f1 06 06 06 06 
3be91 5f2 06 00 00 00 
3be95 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3be99 5f4 7C 7E 06 0E 
3be9d 5f5 3C 70 60 7E 
3bea1 5f6 3E 00 00 00 
3bea5 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3bea9 5f8 7E 7E 18 18 
3bead 5f9 18 18 18 78 
3beb1 5fa 70 00 00 00 
3beb5 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3beb9 5fc 66 66 66 66 
3bebd 5fd 66 66 66    | 	byte	$66[7]
3bec0 5fe 7E 7C 00 00 
3bec4 5ff 00 00 00 00 
3bec8 600 00 66 66 66 
3becc 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
3bed0 602 18 18 00 00 
3bed4 603 00 00 00 00 
3bed8 604 00 C6 C6 D6 
3bedc 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
3bee0 606 C6 82 00 00 
3bee4 607 00 00 00 00 
3bee8 608 00 66 66 3C 
3beec 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
3bef0 60a 66 66 00 00 
3bef4 60b 00 00 00 00 
3bef8 60c 00 66 66 66 
3befc 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
3bf00 60e 7C 60 7E 3E 
3bf04 60f 00 00 00 00 
3bf08 610 00 7E 7E 30 
3bf0c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
3bf10 612 7E 7E 00 00 
3bf14 613 00 00 30 18 
3bf18 614 18 18 18 0C 
3bf1c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
3bf20 616 18 30 00 00 
3bf24 617 00 00 18 18 
3bf28 618 18 18 18 18 
3bf2c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3bf30 61a 18 18 00 00 
3bf34 61b 00 00 0C 18 
3bf38 61c 18 18 18 30 
3bf3c 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
3bf40 61e 18 0C 00 00 
3bf44 61f 00 00 6C 7E 
3bf48 620 36 00 00 00 
3bf4c 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
3bf50 622 00 00 00 00 
3bf54 623 00 00 00 00 
3bf58 624 00          | 	byte	$00[9]
3bf59 624 18 18 18 18 
3bf5d 625 18 18 00 00 
3bf61 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
3bf64 627             | 'amiga_font     file "amigafont.def"
3bf64 627 00 6C FE FE 
3bf68 628 7C 38 10 00 
3bf6c 629 18 18 18 F8 
3bf70 62a F8 18 18 18 | a8_font        file "atari8.fnt"
3bf74 62b C0 C0 C0 C0 
3bf78 62c C0 C0 C0 C0 | 	byte	$c0[8]
3bf7c 62d 18 18 18 1F 
3bf80 62e 1F 00 00 00 
3bf84 62f 18 18 18 1F 
3bf88 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
3bf8c 631 00 00 00 1F 
3bf90 632 1F 18 18 18 
3bf94 633 C0 E0 70 38 
3bf98 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3bf9c 635 03 07 0E 1C 
3bfa0 636 38 70 E0 C0 
3bfa4 637 80 C0 E0 F0 
3bfa8 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3bfac 639 00 00 00 00 
3bfb0 63a F0 F0 F0 F0 
3bfb4 63b 01 03 07 0F 
3bfb8 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3bfbc 63d F0 F0 F0 F0 
3bfc0 63e 00 00 00 00 
3bfc4 63f 0F 0F 0F 0F 
3bfc8 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3bfcc 641 FF FF 00 00 
3bfd0 642 00 00 00 00 
3bfd4 643 00 00 00 00 
3bfd8 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3bfdc 645 00 00 00 00 
3bfe0 646 0F 0F 0F 0F 
3bfe4 647 00 38 38 EE 
3bfe8 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3bfec 649 00 00 00 F8 
3bff0 64a F8 18 18 18 
3bff4 64b 00 00 00 FF 
3bff8 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3bffc 64d 18 18 18 FF 
3c000 64e FF 18 18 18 
3c004 64f 00 00 3C 7E 
3c008 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3c00c 651 00 00 00 00 
3c010 652 FF FF FF FF 
3c014 653 03 03 03 03 
3c018 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3c01c 655 00 00 00 FF 
3c020 656 FF 18 18 18 
3c024 657 18 18 18 FF 
3c028 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3c02c 659 0F 0F 0F 0F 
3c030 65a 0F 0F 0F 0F | 	byte	$0f[8]
3c034 65b 18 18 18 F8 
3c038 65c F8 00 00 00 
3c03c 65d 1E 06 1E 06 
3c040 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
3c044 65f 00 18 3C 7E 
3c048 660 18 18 18 00 
3c04c 661 00 18 18 18 
3c050 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
3c054 663 00 18 0C 7E 
3c058 664 0C 18 00 00 
3c05c 665 00 18 30 7E 
3c060 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
3c064 667 00 00 00 00 
3c068 668 00 00 00 00 
3c06c 669 00          | 	byte	$00[9]
3c06d 669 18 18 18 18 
3c071 66a 00 18 00 00 
3c075 66b 66 66 66 00 
3c079 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
3c07d 66d 66 FF 66 66 
3c081 66e FF 66 00 18 
3c085 66f 7C 06 3C 60 
3c089 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
3c08d 671 66 36 18 0C 
3c091 672 66 62 00 38 
3c095 673 6C 38 1C F6 
3c099 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3c09d 675 18 18 18 00 
3c0a1 676 00 00 00 00 
3c0a5 677 70 38 18 18 
3c0a9 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3c0ad 679 0E 1C 18 18 
3c0b1 67a 1C 0E 00 00 
3c0b5 67b 66 3C FF 3C 
3c0b9 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3c0bd 67d 18 18 7E 18 
3c0c1 67e 18 00 00 00 
3c0c5 67f 00 00 00 00 
3c0c9 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3c0cd 681 00 00 7E 00 
3c0d1 682 00 00 00 00 
3c0d5 683 00 00 00 00 
3c0d9 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3c0dd 685 60 30 18 0C 
3c0e1 686 06 02 00 00 
3c0e5 687 3C 66 76 6E 
3c0e9 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3c0ed 689 18 1C 18 18 
3c0f1 68a 18 7E 00 00 
3c0f5 68b 3C 66 30 18 
3c0f9 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3c0fd 68d 7E 30 18 30 
3c101 68e 66 3C 00 00 
3c105 68f 30 38 3C 36 
3c109 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3c10d 691 7E 06 3E 60 
3c111 692 66 3C 00 00 
3c115 693 3C 06 3E 66 
3c119 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3c11d 695 7E 60 30 18 
3c121 696 0C 0C 00 00 
3c125 697 3C 66 3C 66 
3c129 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3c12d 699 3C 66 7C 60 
3c131 69a 30 1C 00 00 
3c135 69b 00 18 18 00 
3c139 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
3c13d 69d 00 18 18 00 
3c141 69e 18 18 0C 60 
3c145 69f 30 18 0C 18 
3c149 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
3c14d 6a1 00 7E 00 00 
3c151 6a2 7E 00 00 06 
3c155 6a3 0C 18 30 18 
3c159 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
3c15d 6a5 3C 66 30 18 
3c161 6a6 00 18 00 00 
3c165 6a7 3C 66 76 76 
3c169 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
3c16d 6a9 18 3C 66 66 
3c171 6aa 7E 66 00 00 
3c175 6ab 3E 66 3E 66 
3c179 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
3c17d 6ad 3C 66 06 06 
3c181 6ae 66 3C 00 00 
3c185 6af 1E 36 66 66 
3c189 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
3c18d 6b1 7E 06 3E 06 
3c191 6b2 06 7E 00 00 
3c195 6b3 7E 06 3E 06 
3c199 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3c19d 6b5 7C 06 06 76 
3c1a1 6b6 66 7C 00 00 
3c1a5 6b7 66 66 7E 66 
3c1a9 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3c1ad 6b9 7E 18 18 18 
3c1b1 6ba 18 7E 00 00 
3c1b5 6bb 60 60 60 60 
3c1b9 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3c1bd 6bd 66 36 1E 1E 
3c1c1 6be 36 66 00 00 
3c1c5 6bf 06 06 06 06 
3c1c9 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3c1cd 6c1 C6 EE FE D6 
3c1d1 6c2 C6 C6 00 00 
3c1d5 6c3 66 6E 7E 7E 
3c1d9 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3c1dd 6c5 3C 66 66 66 
3c1e1 6c6 66 3C 00 00 
3c1e5 6c7 3E 66 66 3E 
3c1e9 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3c1ed 6c9 3C 66 66 66 
3c1f1 6ca 36 6C 00 00 
3c1f5 6cb 3E 66 66 3E 
3c1f9 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3c1fd 6cd 3C 06 3C 60 
3c201 6ce 60 3C 00 00 
3c205 6cf 7E 18 18 18 
3c209 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3c20d 6d1 66 66 66 66 
3c211 6d2 66          | 	byte	$66[5]
3c212 6d2 7E 00 00 66 
3c216 6d3 66 66 66 3C 
3c21a 6d4 18 00 00 C6 
3c21e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
3c222 6d6 C6 00 00 66 
3c226 6d7 66 3C 3C 66 
3c22a 6d8 66 00 00 66 
3c22e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
3c232 6da 18 00 00 7E 
3c236 6db 30 18 0C 06 
3c23a 6dc 7E 00 00 78 
3c23e 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
3c242 6de 78 00 00 02 
3c246 6df 06 0C 18 30 
3c24a 6e0 60 00 00 1E 
3c24e 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
3c252 6e2 1E 00 00 10 
3c256 6e3 38 6C C6 00 
3c25a 6e4 00 00 00 00 
3c25e 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c262 6e6 FF 00 00 18 
3c266 6e7 3C 7E 7E 3C 
3c26a 6e8 18 00 00 00 
3c26e 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
3c272 6ea 7C 00 00 06 
3c276 6eb 06 3E 66 66 
3c27a 6ec 3E 00 00 00 
3c27e 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
3c282 6ee 3C 00 00 60 
3c286 6ef 60 7C 66 66 
3c28a 6f0 7C 00 00 00 
3c28e 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
3c292 6f2 3C 00 00 70 
3c296 6f3 18 7C 18 18 
3c29a 6f4 18 00 00 00 
3c29e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
3c2a2 6f6 60 3E 00 06 
3c2a6 6f7 06 3E 66 66 
3c2aa 6f8 66 00 00 18 
3c2ae 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
3c2b2 6fa 3C 00 00 60 
3c2b6 6fb 00 60 60 60 
3c2ba 6fc 60 3C 00 06 
3c2be 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
3c2c2 6fe 66 00 00 1C 
3c2c6 6ff 18 18 18 18 
3c2ca 700 3C 00 00 00 
3c2ce 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
3c2d2 702 C6 00 00 00 
3c2d6 703 3E 66 66 66 
3c2da 704 66 00 00 00 
3c2de 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
3c2e2 706 3C 00 00 00 
3c2e6 707 3E 66 66 3E 
3c2ea 708 06 06 00 00 
3c2ee 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
3c2f2 70a 60 60 00 00 
3c2f6 70b 3E 66 06 06 
3c2fa 70c 06 00 00 00 
3c2fe 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
3c302 70e 3E 00 00 18 
3c306 70f 7E 18 18 18 
3c30a 710 70 00 00 00 
3c30e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
3c312 712 7C 00 00 00 
3c316 713 66 66 66 3C 
3c31a 714 18 00 00 00 
3c31e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
3c322 716 6C 00 00 00 
3c326 717 66 3C 18 3C 
3c32a 718 66 00 00 00 
3c32e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
3c332 71a 30 1E 00 00 
3c336 71b 7E 30 18 0C 
3c33a 71c 7E 00 00 18 
3c33e 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
3c342 71e 3C 00 18 18 
3c346 71f 18 18 18 18 
3c34a 720 18 18 00 7E 
3c34e 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
3c352 722 60 00 10 18 
3c356 723 1C 1E 1C 18 
3c35a 724 10 00 08 18 
3c35e 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
3c362 726 08 00       | 	byte	$08, $00
3c364 727 00 00 00 00 
3c368 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
3c369 728 80 00 00 00 
3c36d 729 00 80 00 00 
3c371 72a 80 80 00 00 
3c375 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
3c379 72c 80 00 80 00 
3c37d 72d 00 40 80 00 
3c381 72e AA AA AA 00 
3c385 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
3c389 730 FF 00 00 00 
3c38d 731 00 FF 00 00 
3c391 732 FF FF 00 00 
3c395 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
3c399 734 FF 00 FF 00 
3c39d 735 00 FF FF 00 
3c3a1 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
3c3a4 737 00 00 00 00 
3c3a8 738 00          | ataripalette   file "ataripalettep2.def"
3c3a9 738 11 11 11 00 
3c3ad 739 22 22 22 00 
3c3b1 73a 33 33 33 00 
3c3b5 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
3c3b9 73c 55 55 55 00 
3c3bd 73d 66 66 66 00 
3c3c1 73e 77 77 77 00 
3c3c5 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
3c3c9 740 99 99 99 00 
3c3cd 741 AA AA AA 00 
3c3d1 742 BB BB BB 00 
3c3d5 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
3c3d9 744 DD DD DD 00 
3c3dd 745 EE EE EE 00 
3c3e1 746 FF FF FF 00 
3c3e5 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
3c3e9 748 00 14 40 00 
3c3ed 749 00 1E 60 00 
3c3f1 74a 00 28 80 00 
3c3f5 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
3c3f9 74c 00 3C BF 00 
3c3fd 74d 00 46 DF 00 
3c401 74e 00 50 FF 00 
3c405 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
3c409 750 39 77 FF 00 
3c40d 751 55 8A FF 00 
3c411 752 71 9E FF 00 
3c415 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
3c419 754 AA C5 FF 00 
3c41d 755 C6 D8 FF 00 
3c421 756 E3 EC FF 00 
3c425 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
3c429 758 00 00 40 00 
3c42d 759 00 00 60 00 
3c431 75a 00 00 80 00 
3c435 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
3c439 75c 00 00 BF 00 
3c43d 75d 00 00 DF 00 
3c441 75e 00 00 FF 00 
3c445 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
3c449 760 39 39 FF 00 
3c44d 761 55 55 FF 00 
3c451 762 71 71 FF 00 
3c455 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
3c459 764 AA AA FF 00 
3c45d 765 C6 C6 FF 00 
3c461 766 E3 E3 FF 00 
3c465 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
3c469 768 20 00 40 00 
3c46d 769 30 00 60 00 
3c471 76a 40 00 80 00 
3c475 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
3c479 76c 60 00 BF 00 
3c47d 76d 70 00 DF 00 
3c481 76e 80 00 FF 00 
3c485 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
3c489 770 9C 39 FF 00 
3c48d 771 AA 55 FF 00 
3c491 772 B8 71 FF 00 
3c495 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
3c499 774 D5 AA FF 00 
3c49d 775 E3 C6 FF 00 
3c4a1 776 F1 E3 FF 00 
3c4a5 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
3c4a9 778 40 00 40 00 
3c4ad 779 60 00 60 00 
3c4b1 77a 80 00 80 00 
3c4b5 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
3c4b9 77c BF 00 BF 00 
3c4bd 77d DF 00 DF 00 
3c4c1 77e FF 00 FF 00 
3c4c5 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
3c4c9 780 FF 39 FF 00 
3c4cd 781 FF 55 FF 00 
3c4d1 782 FF 71 FF 00 
3c4d5 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
3c4d9 784 FF AA FF 00 
3c4dd 785 FF C6 FF 00 
3c4e1 786 FF E3 FF 00 
3c4e5 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
3c4e9 788 40 00 20 00 
3c4ed 789 60 00 30 00 
3c4f1 78a 80 00 40 00 
3c4f5 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
3c4f9 78c BF 00 60 00 
3c4fd 78d DF 00 70 00 
3c501 78e FF 00 80 00 
3c505 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
3c509 790 FF 39 9C 00 
3c50d 791 FF 55 AA 00 
3c511 792 FF 71 B8 00 
3c515 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
3c519 794 FF AA D5 00 
3c51d 795 FF C6 E3 00 
3c521 796 FF E3 F1 00 
3c525 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
3c529 798 40 00 00 00 
3c52d 799 60 00 00 00 
3c531 79a 80 00 00 00 
3c535 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
3c539 79c BF 00 00 00 
3c53d 79d DF 00 00 00 
3c541 79e FF 00 00 00 
3c545 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
3c549 7a0 FF 39 39 00 
3c54d 7a1 FF 55 55 00 
3c551 7a2 FF 71 71 00 
3c555 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
3c559 7a4 FF AA AA 00 
3c55d 7a5 FF C6 C6 00 
3c561 7a6 FF E3 E3 00 
3c565 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3c569 7a8 40 10 00 00 
3c56d 7a9 60 18 00 00 
3c571 7aa 80 20 00 00 
3c575 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3c579 7ac BF 30 00 00 
3c57d 7ad DF 38 00 00 
3c581 7ae FF 40 00 00 
3c585 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3c589 7b0 FF 6A 39 00 
3c58d 7b1 FF 80 55 00 
3c591 7b2 FF 95 71 00 
3c595 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3c599 7b4 FF BF AA 00 
3c59d 7b5 FF D5 C6 00 
3c5a1 7b6 FF EA E3 00 
3c5a5 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3c5a9 7b8 40 20 00 00 
3c5ad 7b9 60 30 00 00 
3c5b1 7ba 80 40 00 00 
3c5b5 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3c5b9 7bc BF 60 00 00 
3c5bd 7bd DF 70 00 00 
3c5c1 7be FF 80 00 00 
3c5c5 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3c5c9 7c0 FF 9C 39 00 
3c5cd 7c1 FF AA 55 00 
3c5d1 7c2 FF B8 71 00 
3c5d5 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3c5d9 7c4 FF D5 AA 00 
3c5dd 7c5 FF E3 C6 00 
3c5e1 7c6 FF F1 E3 00 
3c5e5 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3c5e9 7c8 40 30 00 00 
3c5ed 7c9 60 48 00 00 
3c5f1 7ca 80 60 00 00 
3c5f5 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3c5f9 7cc BF 90 00 00 
3c5fd 7cd DF A8 00 00 
3c601 7ce FF C0 00 00 
3c605 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
3c609 7d0 FF CE 39 00 
3c60d 7d1 FF D5 55 00 
3c611 7d2 FF DC 71 00 
3c615 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
3c619 7d4 FF EA AA 00 
3c61d 7d5 FF F1 C6 00 
3c621 7d6 FF F8 E3 00 
3c625 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
3c629 7d8 30 40 00 00 
3c62d 7d9 48 60 00 00 
3c631 7da 60 80 00 00 
3c635 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
3c639 7dc 90 BF 00 00 
3c63d 7dd A8 DF 00 00 
3c641 7de C0 FF 00 00 
3c645 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
3c649 7e0 CE FF 39 00 
3c64d 7e1 D5 FF 55 00 
3c651 7e2 DC FF 71 00 
3c655 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
3c659 7e4 EA FF AA 00 
3c65d 7e5 F1 FF C6 00 
3c661 7e6 F8 FF E3 00 
3c665 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3c669 7e8 00 40 00 00 
3c66d 7e9 00 60 00 00 
3c671 7ea 00 80 00 00 
3c675 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3c679 7ec 00 BF 00 00 
3c67d 7ed 00 DF 00 00 
3c681 7ee 00 FF 00 00 
3c685 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3c689 7f0 39 FF 39 00 
3c68d 7f1 55 FF 55 00 
3c691 7f2 71 FF 71 00 
3c695 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3c699 7f4 AA FF AA 00 
3c69d 7f5 C6 FF C6 00 
3c6a1 7f6 E3 FF E3 00 
3c6a5 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3c6a9 7f8 00 40 14 00 
3c6ad 7f9 00 60 1E 00 
3c6b1 7fa 00 80 28 00 
3c6b5 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3c6b9 7fc 00 BF 3C 00 
3c6bd 7fd 00 DF 46 00 
3c6c1 7fe 00 FF 50 00 
3c6c5 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3c6c9 800 39 FF 77 00 
3c6cd 801 55 FF 8A 00 
3c6d1 802 71 FF 9E 00 
3c6d5 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3c6d9 804 AA FF C5 00 
3c6dd 805 C6 FF D8 00 
3c6e1 806 E3 FF EC 00 
3c6e5 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3c6e9 808 00 40 28 00 
3c6ed 809 00 60 3C 00 
3c6f1 80a 00 80 50 00 
3c6f5 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3c6f9 80c 00 BF 78 00 
3c6fd 80d 00 DF 8C 00 
3c701 80e 00 FF A0 00 
3c705 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
3c709 810 39 FF B5 00 
3c70d 811 55 FF C0 00 
3c711 812 71 FF CA 00 
3c715 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
3c719 814 AA FF DF 00 
3c71d 815 C6 FF EA 00 
3c721 816 E3 FF F4 00 
3c725 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
3c729 818 00 40 40 00 
3c72d 819 00 60 60 00 
3c731 81a 00 80 80 00 
3c735 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
3c739 81c 00 BF BF 00 
3c73d 81d 00 DF DF 00 
3c741 81e 00 FF FF 00 
3c745 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
3c749 820 39 FF FF 00 
3c74d 821 55 FF FF 00 
3c751 822 71 FF FF 00 
3c755 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
3c759 824 AA FF FF 00 
3c75d 825 C6 FF FF 00 
3c761 826 E3 FF FF 00 
3c765 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3c769 828 00 28 40 00 
3c76d 829 00 3C 60 00 
3c771 82a 00 50 80 00 
3c775 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3c779 82c 00 78 BF 00 
3c77d 82d 00 8C DF 00 
3c781 82e 00 A0 FF 00 
3c785 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3c789 830 39 B5 FF 00 
3c78d 831 55 C0 FF 00 
3c791 832 71 CA FF 00 
3c795 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3c799 834 AA DF FF 00 
3c79d 835 C6 EA FF 00 
3c7a1 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
3c7a4 837             | 
3c7a4 837             | '**********************************************************************************
3c7a4 837             | '
3c7a4 837             | '        Timings and colors definitions
3c7a4 837             | '
3c7a4 837             | '**********************************************************************************
3c7a4 837             | 
3c7a4 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
3c7a4 837 08 00 00 00 
3c7a8 838 3C 00 00 00 
3c7ac 839 08 00 00 00 
3c7b0 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
3c7b4 83b 07 00 00 00 
3c7b8 83c 04 00 00 00 
3c7bc 83d 01 00 00 00 
3c7c0 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
3c7c4 83f 58 02 00 00 
3c7c8 840 20 9E 4B 14 
3c7cc 841 FB A8 9E 01 
3c7d0 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
3c7d4 843 00 00 00 00 
3c7d8 844 C0 00 00 00 
3c7dc 845 00 00 00 00 
3c7e0 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c7e4 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
3c7e4 847 00 75 C7 97 
3c7e8 848 27 47 F6 0A 
3c7ec 849 05 79 CB 9B 
3c7f0 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
3c7f4 84b             | 
3c7f4 84b             | ''--------  Initialization  ----------------------------------------------------------------
3c7f4 84b             | 
3c7f4 84b 28 0C 64 FD | hdmi            setq    #6
3c7f8 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
3c7fc 84d 28 10 64 FD |                 setq    #8
3c800 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
3c804 84f             | 
3c804 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
3c808 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
3c80c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
3c810 852 D6 C6 01 F1 |                 add     t1,hbase
3c814 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
3c818 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
3c81c 855 7B 0B 80 5F 
3c820 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
3c824 857 66 66 86 FF 
3c828 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
3c82c 859             | '
3c82c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
3c830 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
3c834 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
3c838 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
3c83c 85d             | 
3c83c 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
3c840 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
3c844 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
3c848 860             | 
3c848 860             | ''--------  frame rendering main loop  ---------------------------------------------------
3c848 860             | 
3c848 860 28 06 64 FD | p101            setq 	#3
3c84c 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
3c850 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
3c854 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3c858 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
3c85c 865 00 A0 05 F6 |                 mov     dlinum, #0
3c860 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
3c864 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3c868 868             | 
3c868 868             | 
3c868 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
3c86c 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
3c870 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
3c874 86b             |                 
3c874 86b             | 
3c874 86b             | 
3c874 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
3c874 86b             |   
3c874 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3c878 86c 29 FE 65 3D |          if_nc  setq2   #255
3c87c 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
3c880 86e             | 
3c880 86e             | '' -----   up porch (before the picture)
3c880 86e             | 
3c880 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
3c884 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3c888 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
3c88c 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
3c890 872             |  
3c890 872             |    
3c890 872             |  
3c890 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c894 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c898 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
3c89c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c8a0 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c8a4 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3c8a8 878             | 
3c8a8 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
3c8ac 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c8b0 87a 48 00 B0 FD | 		call    #dli
3c8b4 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c8b8 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
3c8bc 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
3c8c0 87e             |                 	
3c8c0 87e             |                 
3c8c0 87e             | 
3c8c0 87e             |  
3c8c0 87e             | '' ------- the main screen drawing starts here
3c8c0 87e             | 
3c8c0 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
3c8c4 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3c8c8 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
3c8cc 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
3c8d0 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
3c8d4 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3c8d8 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
3c8dc 885             |               
3c8dc 885             | 
3c8dc 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
3c8e0 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
3c8e4 887             | 
3c8e4 887             | ' ---------------- All visible lines displayed now, start vblank  
3c8e4 887             | 
3c8e4 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3c8e8 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
3c8ec 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
3c8f0 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
3c8f4 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3c8f8 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
3c8fc 88d             | 
3c8fc 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
3c8fc 88d             | 
3c8fc 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
3c8fc 88d             | 
3c8fc 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
3c900 88e             | 
3c900 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
3c904 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
3c908 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
3c90c 891             | 
3c90c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
3c910 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
3c914 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
3c918 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
3c91c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
3c920 896             | 
3c920 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
3c924 897 DD C6 41 F8 |                 getnib  t1,dl,#0
3c928 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
3c92c 899 70 00 90 AD |     if_z        jmp     #preload
3c930 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
3c934 89b 94 00 90 AD |     if_z        jmp     #preload2
3c938 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
3c93c 89d 0C 00 90 AD |     if_z        jmp     #p390
3c940 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
3c944 89f 28 00 90 AD |     if_z        jmp     #p391  
3c948 8a0             | 
3c948 8a0 2D 00 64 FD | p308            ret
3c94c 8a1             |    
3c94c 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
3c950 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
3c954 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3c958 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
3c95c 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
3c960 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
3c964 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3c968 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
3c96c 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
3c970 8aa             |  
3c970 8aa             | '' --------  Reload palette. To do 
3c970 8aa             | 
3c970 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
3c974 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3c978 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
3c97c 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
3c980 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
3c984 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3c988 8b0 70 FF 9F FD |         	jmp     #dli                
3c98c 8b1             |       
3c98c 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
3c98c 8b1             | 
3c98c 8b1             | 
3c98c 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
3c98c 8b1             | 
3c98c 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
3c990 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
3c994 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3c998 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
3c99c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
3c9a0 8b6             |         
3c9a0 8b6             | '' -------------- Preload a line from PSRAM        
3c9a0 8b6             |         
3c9a0 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
3c9a4 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3c9a8 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
3c9ac 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
3c9b0 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
3c9b4 8bb             | 
3c9b4 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3c9b8 8bc 32 B7 01 F6 |                 mov     buf2,a1024
3c9bc 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
3c9c0 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
3c9c4 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3c9c8 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
3c9cc 8c1             |  
3c9cc 8c1             |  
3c9cc 8c1             | preload2      '  incmod  dlinum,#3
3c9cc 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
3c9d0 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
3c9d4 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3c9d8 8c4 28 02 64 FD |                 setq	#1
3c9dc 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
3c9e0 8c6             |                 
3c9e0 8c6             | 
3c9e0 8c6             | '' -------------- Draw sprites
3c9e0 8c6             | 
3c9e0 8c6 CF 5C 02 F6 | sprite          mov t8,frames
3c9e4 8c7 10 5C 0E F5 | 		and t8,#16 wz
3c9e8 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
3c9ec 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
3c9f0 8ca             | 		
3c9f0 8ca             | 
3c9f0 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
3c9f4 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3c9f8 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
3c9fc 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
3ca00 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
3ca04 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
3ca08 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
3ca0c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
3ca10 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ca14 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
3ca18 8d4 01 52 86 F1 |                 sub     sprite_h,#1
3ca1c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
3ca20 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
3ca24 8d7             | 
3ca24 8d7             | 
3ca24 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
3ca28 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
3ca2c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
3ca30 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
3ca34 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
3ca38 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
3ca3c 8dd 00 5E 06 F6 |                 mov 	t9,#0
3ca40 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
3ca44 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
3ca48 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
3ca4c 8e1             |      
3ca4c 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
3ca50 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
3ca54 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3ca58 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
3ca5c 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
3ca60 8e6             |                 
3ca60 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
3ca64 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3ca68 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
3ca6c 8e9             |   		
3ca6c 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
3ca70 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
3ca74 8eb             | 
3ca74 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3ca78 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
3ca7c 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
3ca80 8ee             |  
3ca80 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
3ca84 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3ca88 8f0 10 00 90 CD |      if_c 	jmp     #p899		
3ca8c 8f1             | 	
3ca8c 8f1             | 	
3ca8c 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
3ca90 8f2 28 CD 01 F1 | 		add	t4,sprite_w
3ca94 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3ca98 8f4             | 
3ca98 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
3ca9c 8f5             | 
3ca9c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
3caa0 8f6 01 58 86 F1 | 	 	sub     t6,#1
3caa4 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3caa8 8f8             | 
3caa8 8f8 28 58 62 FD |                 setq   	t6
3caac 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
3cab0 8fa 28 5D 02 F6 |                 mov t8,sprite_w
3cab4 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3cab8 8fc 24 00 90 AD |         if_z    jmp #p898
3cabc 8fd             |          
3cabc 8fd             |         
3cabc 8fd 70 5F 06 F6 |                 mov  t9,#368
3cac0 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
3cac4 8ff             | 
3cac4 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3cac8 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
3cacc 901 FF FF 7F FF 
3cad0 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
3cad4 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3cad8 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
3cadc 905 2D 01 00 F5 |                 and 0-0, t7
3cae0 906             |                
3cae0 906             | 
3cae0 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
3cae4 907 E5 E0 7A FA |                 wmlong 368,t3				
3cae8 908             |                 
3cae8 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
3caec 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
3caf0 90a 2D 00 64 FD |                 ret
3caf4 90b             | 	
3caf4 90b             | 	
3caf4 90b             |                
3caf4 90b             |  
3caf4 90b             | '' -------------- Graphics line ------------------------------------------------------------
3caf4 90b             |  
3caf4 90b             | 
3caf4 90b             | '' consts and vars
3caf4 90b             | 
3caf4 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3caf8 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
3cafc 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
3cb00 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
3cb04 90f             | 
3cb04 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
3cb08 910             | 
3cb08 910             | '------ these longs will be set by setmode function
3cb08 910             | 
3cb08 910 00 00 00 00 | m_bs            long    0        'blanks before sync
3cb0c 911 00 00 00 00 | m_sn            long    0        'sync
3cb10 912 00 00 00 00 | m_bv            long    0        'blanks before visible
3cb14 913 00 00 00 00 | m_vi            long    0        'visible pixels #
3cb18 914             | 'm_border        long    0        'left/right borders
3cb18 914 00 00 00 00 | i_upporch       long    0        'up porch lines
3cb1c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
3cb20 916 00 00 00 00 | i_downporch     long    0        'down porch lines
3cb24 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
3cb28 918 00 00 00 00 | i_totalvis      long    0
3cb2c 919             | 
3cb2c 919             | '-------------------------------------
3cb2c 919             |  
3cb2c 919 00 00 00 00 | linenum         long    0
3cb30 91a 00 00 00 00 | frames          long    0
3cb34 91b 00 00 00 00 | dlinum long 0
3cb38 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
3cb3c 91d             | 
3cb3c 91d 00 00 00 00 | vblankptr       long    0
3cb40 91e 00 00 00 00 | modeptr         long    0
3cb44 91f 00 00 00 00 | paletteptr      long    0
3cb48 920 00 00 00 00 | dlptr           long    0
3cb4c 921 01 00 00 00 | hbase           long    1
3cb50 922 00 00 00 00 | mailbox         long    0
3cb54 923 00 00 00 00 | spriteptr          long 0
3cb58 924             | 
3cb58 924 00 00 00 00 | cmd             long    0
3cb5c 925 00 B0 07 00 | buf1            long    $80000-16384-4096
3cb60 926 00 04 00 00 | buf2            long    1024
3cb64 927 01 00 00 00 | dlptr2          long    1
3cb68 928 01 00 00 00 | dl              long    1
3cb6c 929             | 
3cb6c 929 00 00 00 00 | buf1c long 0
3cb70 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
3cb74 92b 01 00 00 00 | framebuf2       long    1
3cb78 92c 01 00 00 00 | hsync0          long    1
3cb7c 92d 01 00 00 00 | hsync1          long    1
3cb80 92e             | 
3cb80 92e 01 00 00 00 | t1              long    1
3cb84 92f 00 00 00 00 | t2 long 0
3cb88 930 00 00 00 00 | t3 long 0
3cb8c 931 00 00 00 00 | t4 long 0
3cb90 932             | 
3cb90 932 00 00 00 00 | rcnt            long    0  'dl repeat count
3cb94 933 00 00 00 00 | rcnt2           long    0
3cb98 934 00 00 00 00 | rcnt2a          long    0
3cb9c 935 00 00 00 00 | roffset         long    0
3cba0 936 00 00 00 00 | rdl             long    0  'dl repeat line
3cba4 937 00 00 00 00 | dlc             long    0  'dl command
3cba8 938             | 
3cba8 938 FF FF FF FF | affffffff       long    $ffffffff
3cbac 939 00 00 00 00 | sprite1pointer long 0
3cbb0 93a 00 00 00 00 | sprite1xy      long 0
3cbb4 93b 00 00 00 00 | sprite1wh      long 0
3cbb8 93c 00 00 00 00 | sprite2pointer long 0
3cbbc 93d 00 00 00 00 | sprite2xy      long 0
3cbc0 93e 00 00 00 00 | sprite2wh      long 0
3cbc4 93f 00 00 00 00 | sprite3pointer long 0
3cbc8 940 00 00 00 00 | sprite3xy      long 0
3cbcc 941 00 00 00 00 | sprite3wh      long 0
3cbd0 942 00 00 00 00 | sprite4pointer long 0
3cbd4 943 00 00 00 00 | sprite4xy      long 0
3cbd8 944 00 00 00 00 | sprite4wh      long 0
3cbdc 945 00 00 00 00 | sprite5pointer long 0
3cbe0 946 00 00 00 00 | sprite5xy      long 0
3cbe4 947 00 00 00 00 | sprite5wh      long 0
3cbe8 948 00 00 00 00 | sprite6pointer long 0
3cbec 949 00 00 00 00 | sprite6xy      long 0
3cbf0 94a 00 00 00 00 | sprite6wh      long 0
3cbf4 94b 00 00 00 00 | sprite7pointer long 0
3cbf8 94c 00 00 00 00 | sprite7xy      long 0
3cbfc 94d 00 00 00 00 | sprite7wh      long 0
3cc00 94e 00 00 00 00 | sprite8pointer long 0
3cc04 94f 00 00 00 00 | sprite8xy      long 0
3cc08 950 00 00 00 00 | sprite8wh      long 0
3cc0c 951 00 00 00 00 | sprite9pointer long 0
3cc10 952 00 00 00 00 | sprite9xy      long 0
3cc14 953 00 00 00 00 | sprite9wh      long 0
3cc18 954 00 00 00 00 | sprite10pointer long 0
3cc1c 955 00 00 00 00 | sprite10xy      long 0
3cc20 956 00 00 00 00 | sprite10wh      long 0
3cc24 957 00 00 00 00 | sprite11pointer long 0
3cc28 958 00 00 00 00 | sprite11xy      long 0
3cc2c 959 00 00 00 00 | sprite11wh      long 0
3cc30 95a 00 00 00 00 | sprite12pointer long 0
3cc34 95b 00 00 00 00 | sprite12xy      long 0
3cc38 95c 00 00 00 00 | sprite12wh      long 0
3cc3c 95d 00 00 00 00 | sprite13pointer long 0
3cc40 95e 00 00 00 00 | sprite13xy      long 0
3cc44 95f 00 00 00 00 | sprite13wh      long 0
3cc48 960 00 00 00 00 | sprite14pointer long 0
3cc4c 961 00 00 00 00 | sprite14xy      long 0
3cc50 962 00 00 00 00 | sprite14wh      long 0
3cc54 963 00 00 00 00 | sprite15pointer long 0
3cc58 964 00 00 00 00 | sprite15xy      long 0
3cc5c 965 00 00 00 00 | sprite15wh      long 0
3cc60 966 00 00 00 00 | sprite16pointer long 0
3cc64 967 00 00 00 00 | sprite16xy      long 0
3cc68 968 00 00 00 00 | sprite16wh      long 0
3cc6c 969 00 00 00 00 | sprite17pointer long 0
3cc70 96a 00 00 00 00 | sprite17xy      long 0
3cc74 96b 00 00 00 00 | sprite17wh      long 0
3cc78 96c 00 00 00 00 | sprite18pointer long 0
3cc7c 96d 00 00 00 00 | sprite18xy      long 0
3cc80 96e 00 00 00 00 | sprite18wh      long 0
3cc84 96f 00 00 00 00 | spritenum long 0
3cc88 970             | 
3cc88 970 00 00 00 00 | spriteline long 0
3cc8c 971 84 03 00 00 | sprite_x long 900
3cc90 972 00 00 00 00 | sprite_y long 0
3cc94 973 10 00 00 00 | sprite_w long 16
3cc98 974 40 00 00 00 | sprite_h long 64
3cc9c 975 00 00 00 00 | l2 long 0
3cca0 976 00 00 00 00 | t5 long 0
3cca4 977 00 00 00 00 | t6 long 0
3cca8 978 00 00 00 00 | t7 long 0
3ccac 979 00 00 00 00 | t8 long 0
3ccb0 97a 00 00 00 00 | t9 long 0
3ccb4 97b 00 00 00 00 | preloadaddr long 0
3ccb8 97c 00 00 00 00 | preloadlineaddr long 0
3ccbc 97d 00 04 00 00 | a1024 long 1024
3ccc0 97e             | 
3ccc0 97e E0 03 00 00 | aa long 992
3ccc4 97f FF 03 00 00 | a1023 long 1023
3ccc8 980 00 10 00 00 | a4096 long 4096
3cccc 981             |  fit 368
3cccc 981             | _psram_spin2_dat_
3cccc 981 00 00 00 00 
      ...             
3cdc4 9bf 00 00 00 00 
3cdc8 9c0 00 00 00 00 |     listdata long 0[8*8]
3cdcc 9c1             |             orgh
3cdcc                 | 
3cdcc                 | ' driver state
3cdcc     FF FF FF FF | drivercog   long    -1  ' COG id of driver
3cdd0     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
3cdd4                 | 
3cdd4                 | ' delay profile
3cdd4     07 00 00 00 
3cdd8     00 CF 7B 05 
3cddc     80 D1 F0 08 
3cde0     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
3cde4     80 C4 60 0F 
3cde8     80 39 7A 12 
3cdec     40 2D D9 13 
3cdf0     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
3cdf4                 | 
3cdf4                 | ' data to be passed to driver when starting it
3cdf4                 | startupData
3cdf4     00 00 00 00 |     long    0           ' current frequency
3cdf8     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3cdfc     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
3ce00     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
3ce04     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
3ce08     14 CE 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3ce0c     94 CE 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
3ce10     B4 CE 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
3ce14                 | 
3ce14                 | ' data for memory
3ce14                 | deviceData
3ce14                 |     ' 16 bank parameters follow (16MB per bank)
3ce14     00 00 00 00 
      ...             
3ce4c     00 00 00 00 
3ce50     00 00 00 00 |     long    0[16]                               ' banks 0-15
3ce54                 |     ' 16 banks of pin parameters follow
3ce54     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3ce58     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
3ce5c     FF FF FF FF 
      ...             
3ce8c     FF FF FF FF 
3ce90     FF FF FF FF |     long    -1[14]                              ' banks 2-15
3ce94                 | 
3ce94                 | ' data for COG polling
3ce94                 | qosData 
3ce94     00 00 FF FF 
3ce98     00 00 FF FF 
3ce9c     00 00 FF FF 
3cea0     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
3cea4     00 00 FF FF 
3cea8     00 00 FF FF 
3ceac     00 00 FF FF 
3ceb0     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
3ceb4                 |     
3ceb4                 | ' mailbox storage
3ceb4                 | 
3ceb4                 | mailboxes
3ceb4     00 00 00 00 
      ...             
3cf0c     00 00 00 00 
3cf10     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
3cf14                 | 	alignl
3cf14                 | _psram16drv_spin2_dat_
3cf14                 |                             orgh
3cf14     00 00 00 00 
      ...             
3cf2c     00 00 00 00 
3cf30     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
3cf34                 | 
3cf34                 | driver_start
3cf34                 |                             org
3cf34 000             | '..................................................................................................
3cf34 000             | ' Memory layout for COG RAM once operational:
3cf34 000             | '
3cf34 000             | '  COG RAM address      Usage
3cf34 000             | '  ---------------      ----
3cf34 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
3cf34 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
3cf34 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
3cf34 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
3cf34 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
3cf34 000             | '  ~$198-$1F3           State and register variables
3cf34 000             | '
3cf34 000             | ' Also during driver COG startup:
3cf34 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
3cf34 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
3cf34 000             | '..................................................................................................
3cf34 000             |                             
3cf34 000             | ' Mailbox storage after vector initialization
3cf34 000             | 
3cf34 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
3cf38 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
3cf3c 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
3cf40 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
3cf44 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
3cf48 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
3cf4c 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
3cf50 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
3cf54 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3cf58 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
3cf5c 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
3cf60 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
3cf64 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3cf68 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
3cf6c 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
3cf70 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
3cf74 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3cf78 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
3cf7c 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
3cf80 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
3cf84 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3cf88 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
3cf8c 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
3cf90 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
3cf94 018             | 
3cf94 018             | ' Mailbox parameter addresses per COG once patched
3cf94 018             |                             
3cf94 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3cf98 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3cf9c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
3cfa0 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
3cfa4 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3cfa8 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3cfac 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
3cfb0 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
3cfb4 020             | 
3cfb4 020             | '..................................................................................................
3cfb4 020             | ' Per COG request and state setup and service branching
3cfb4 020             |         
3cfb4 020             | cog0                 
3cfb4 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3cfb8 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3cfbc 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
3cfc0 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
3cfc4 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cfc8 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cfcc 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
3cfd0 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
3cfd4 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3cfd8 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3cfdc 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3cfe0 02b 33 CA 63 FD |                             execf   request-0               'jump to service
3cfe4 02c             | cog1                        
3cfe4 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3cfe8 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3cfec 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
3cff0 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
3cff4 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3cff8 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3cffc 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
3d000 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
3d004 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
3d008 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d00c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d010 037 33 CA 63 FD |                             execf   request-0               'jump to service
3d014 038             | cog2                         
3d014 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
3d018 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3d01c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
3d020 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
3d024 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d028 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d02c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
3d030 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
3d034 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
3d038 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d03c 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d040 043 33 CA 63 FD |                             execf   request-0               'jump to service
3d044 044             | cog3                        
3d044 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
3d048 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
3d04c 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
3d050 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
3d054 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d058 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d05c 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
3d060 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
3d064 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3d068 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d06c 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d070 04f 33 CA 63 FD |                             execf   request-0               'jump to service
3d074 050             | cog4                        
3d074 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3d078 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
3d07c 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
3d080 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
3d084 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d088 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d08c 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
3d090 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
3d094 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3d098 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d09c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0a0 05b 33 CA 63 FD |                             execf   request-0               'jump to service
3d0a4 05c             | cog5                        
3d0a4 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3d0a8 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3d0ac 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
3d0b0 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
3d0b4 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0b8 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0bc 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
3d0c0 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
3d0c4 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3d0c8 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0cc 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d0d0 067 33 CA 63 FD |                             execf   request-0               'jump to service
3d0d4 068             | cog6                        
3d0d4 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3d0d8 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3d0dc 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
3d0e0 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
3d0e4 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d0e8 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d0ec 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
3d0f0 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
3d0f4 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
3d0f8 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d0fc 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d100 073 33 CA 63 FD |                             execf   request-0               'jump to service
3d104 074             | cog7                        
3d104 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
3d108 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3d10c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
3d110 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
3d114 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3d118 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3d11c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
3d120 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
3d124 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
3d128 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3d12c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
3d130 07f 33 CA 63 FD |                             execf   request-0               'jump to service
3d134 080             |                             fit     128
3d134 080             | 
3d134 080             |                             fit     128
3d134 080             | pad                         long    0[128-$]                'align init code to $80
3d134 080             | 
3d134 080             | '..................................................................................................
3d134 080             | 
3d134 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
3d134 080             | 
3d134 080             | init                        
3d134 080             |                             ' get driver scratch long address in hub
3d134 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
3d138 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
3d13c 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
3d140 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
3d144 084             |                     
3d144 084             |                             ' read in the additional LUT RAM code
3d144 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
3d148 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
3d14c 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
3d150 087             | 
3d150 087             |                             ' read the startup parameters
3d150 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
3d154 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3d158 089             | 
3d158 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3d158 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
3d15c 08a             | 
3d15c 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
3d160 08b 01 00 00 5F 
3d164 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3d168 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
3d16c 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
3d170 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
3d174 090             | 
3d174 090             |                             ' setup data pin modes and data bus pin group in streamer commands
3d174 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3d178 091 01 00 00 FF 
3d17c 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
3d180 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
3d184 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3d188 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
3d18c 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
3d190 097 08 DE 47 F5 |                             or      a, #8
3d194 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3d198 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3d19c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
3d1a0 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
3d1a4 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3d1a8 09d 01 DE 07 F1 |                             add     a, #1
3d1ac 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
3d1b0 09f             |  
3d1b0 09f             |                             ' setup device control pin states
3d1b0 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
3d1b4 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3d1b8 0a1 01 00 00 FF 
3d1bc 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
3d1c0 0a3             | 
3d1c0 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
3d1c4 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3d1c8 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3d1cc 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
3d1d0 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
3d1d4 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3d1d8 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3d1dc 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
3d1e0 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
3d1e4 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3d1e8 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3d1ec 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
3d1f0 0af             | pinloop
3d1f0 0af             |                             ' generate minimum CE high time before access
3d1f0 0af A1 07 00 FF 
3d1f4 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
3d1f8 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3d1fc 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
3d200 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
3d204 0b4 1F DE 63 FD |                             waitx   a                       'delay
3d208 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3d20c 0b6             | 
3d20c 0b6             |                             ' setup the COG mailboxes and addresses 
3d20c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
3d210 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
3d214 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
3d218 0b9             | 
3d218 0b9 28 2E 64 FD |                             setq    #24-1
3d21c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
3d220 0bb             | 
3d220 0bb             |                             ' setup the polling loop for active COGs 
3d220 0bb 01 C2 63 FD |                             cogid   id
3d224 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
3d228 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3d22c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
3d230 0bf 0A F0 07 F6 |                             mov     ptra, #10
3d234 0c0 E1 F1 03 FA |                             mul     ptra, id
3d238 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
3d23c 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
3d240 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
3d244 0c4 03 C2 07 FA |                             mul     id, #3
3d248 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
3d24c 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
3d250 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
3d254 0c8 D8 01 B0 FD |                             call    #reloadcogs
3d258 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
3d25c 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
3d260 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
3d260 0cb D8 E5 B7 F9 |                             setd    d, #addr1
3d264 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
3d268 0cd 08 04 DC FC |                             rep     #2, #8
3d26c 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
3d270 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
3d274 0d0             | 
3d274 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
3d274 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
3d274 0d0 01 C2 63 FD |                             cogid   id
3d278 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
3d27c 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
3d280 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
3d284 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
3d288 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
3d28c 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
3d290 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
3d294 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
3d298 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3d29c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d2a0 0db 3F E4 A7 F9 |                             alti    d, #%111_111
3d2a4 0dc 00 00 00 F6 |                             mov     0-0, 0-0
3d2a8 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3d2ac 0de A5 E5 03 F1 |                             add     d, const512
3d2b0 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
3d2b4 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
3d2b8 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3d2bc 0e2             |                             
3d2bc 0e2             |                             ' setup register values for control vector loop setup after we return
3d2bc 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
3d2c0 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
3d2c4 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
3d2c8 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3d2cc 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
3d2d0 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
3d2d4 0e8 D0 C3 8F F9 |                             altd    id, #id0
3d2d8 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3d2dc 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
3d2e0 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
3d2e4 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
3d2e8 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3d2ec 0ee             |  
3d2ec 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
3d2f0 0ef 07 CA 07 F5 |                             and     request, #7
3d2f4 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
3d2f8 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3d2fc 0f2             |                             fit     $100                    'ensure all init code fits this space
3d2fc 0f2             | 
3d2fc 0f2             |                             fit     $100                    'ensure all init code fits this space
3d2fc 0f2             | 
3d2fc 0f2 00 00 00 00 
      ...             
3d32c 0fe 00 00 00 00 
3d330 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
3d334 100             | 
3d334 100             | '..................................................................................................
3d334 100             | ' Error result handling and COG notification of request completion
3d334 100             | 
3d334 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
3d338 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
3d33c 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
3d340 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
3d344 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
3d348 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
3d34c 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
3d350 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
3d354 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
3d358 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
3d35c 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
3d360 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
3d364 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
3d368 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
3d36c 10e             | ' Poller re-starts here after a COG is serviced
3d36c 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
3d370 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
3d374 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
3d378 111             | ' Main dynamic polling loop repeats until a request arrives
3d378 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
3d37c 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
3d380 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
3d384 114             | 
3d384 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
3d388 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
3d38c 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
3d390 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
3d394 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
3d398 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3d39c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
3d3a0 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
3d3a4 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
3d3a8 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3d3ac 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
3d3b0 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
3d3b4 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
3d3b8 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3d3bc 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
3d3c0 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
3d3c4 124             | 
3d3c4 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
3d3c8 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3d3cc 126             |  
3d3cc 126             | '..................................................................................................
3d3cc 126             | ' List handler                               
3d3cc 126             | 
3d3cc 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
3d3d0 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
3d3d4 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
3d3d8 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3d3dc 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
3d3e0 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
3d3e4 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
3d3e8 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3d3ec 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
3d3f0 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
3d3f4 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
3d3f8 131 33 00 60 FD |                             execf   0-0                     'process the request 
3d3fc 132             | 
3d3fc 132             | '..................................................................................................
3d3fc 132             | ' Restoring per COG state and resuming where we left off
3d3fc 132             | 
3d3fc 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
3d400 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
3d404 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
3d408 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3d40c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
3d410 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
3d414 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
3d418 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3d41c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
3d420 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
3d424 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
3d428 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3d42c 13e             |                    
3d42c 13e             | '..................................................................................................
3d42c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3d42c 13e             | 
3d42c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
3d430 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
3d434 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
3d438 141 D0 DF B7 F9 |                             setd    a, #id0
3d43c 142 D8 DF BF F9 |                             sets    a, #addr1
3d440 143 FE FF FF FF 
3d444 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
3d448 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
3d44c 146 3F DE A7 F9 |                             alti    a, #%111_111 
3d450 147 00 00 F0 F9 |                             muxq    0-0, 0-0
3d454 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
3d458 149 01 E2 63 FD |                             cogid   c
3d45c 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
3d460 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
3d464 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
3d468 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
3d46c 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
3d470 14f 00 E0 03 F6 |                             mov     b, 0-0
3d474 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
3d478 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
3d47c 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
3d480 153 0C 00 90 AD |             if_z            jmp     #excluded               
3d484 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
3d488 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
3d48c 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
3d490 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
3d494 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
3d498 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3d49c 15a             | 
3d49c 15a             | 'determine priority cogs and build instructions for the polling sequence
3d49c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
3d4a0 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
3d4a4 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
3d4a8 15d             | 
3d4a8 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3d4ac 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
3d4b0 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
3d4b4 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
3d4b8 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3d4bc 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
3d4c0 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
3d4c4 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
3d4c8 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3d4cc 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
3d4d0 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
3d4d4 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
3d4d8 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3d4dc 16a             | endprioloop
3d4dc 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
3d4e0 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
3d4e4 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
3d4e8 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3d4ec 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
3d4f0 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
3d4f4 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
3d4f8 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3d4fc 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
3d500 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
3d504 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
3d508 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3d50c 176             | 
3d50c 176             | ' populate the round robin COG polling instructions
3d50c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
3d510 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
3d514 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
3d518 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3d51c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
3d520 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
3d524 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
3d528 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3d52c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
3d530 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
3d534 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
3d538 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
3d53c 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
3d540 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
3d544 184             | '..................................................................................................
3d544 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
3d544 184             | 
3d544 184             | set_latency                                                 '            (a) set latency
3d544 184             | get_latency                                                 '            (b) get latency
3d544 184             | set_burst                                                   '            (c) set burst size of bank
3d544 184             | get_burst                                                   '            (d) get burst size of bank
3d544 184             |                                                             '            (e) dump state
3d544 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
3d548 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
3d54c 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
3d550 187             |                                                             ' | | | | e  account for following AUGS
3d550 187 04 00 00 FF 
3d554 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
3d558 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
3d55c 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
3d560 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
3d564 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3d568 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
3d56c 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
3d570 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
3d574 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3d578 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
3d57c 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
3d580 193             | 
3d580 193             | '..................................................................................................
3d580 193             | ' Misc EXECF code
3d580 193             | 
3d580 193 33 72 63 FD | start_read_exec             execf   newburstr
3d584 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3d588 195 33 78 63 FD | continue_read_exec          execf   lockedreads
3d58c 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
3d590 197             | 
3d590 197             | '..................................................................................................
3d590 197             | ' Variables
3d590 197             | 
3d590 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
3d594 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3d598 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3d59c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
3d5a0 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
3d5a4 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3d5a8 19d             | 
3d5a8 19d 00 00 00 80 | xfreq1          long    $80000000
3d5ac 19e 00 00 00 40 | xfreq2          long    $40000000
3d5b0 19f 03 00 00 00 | delay           long    3
3d5b4 1a0             | 
3d5b4 1a0             | lutcodeaddr                 
3d5b4 1a0             | startupparams
3d5b4 1a0             | excludedcogs                                    'careful: shared register use!
3d5b4 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3d5b8 1a1 00 00 00 00 | flags           long    0
3d5bc 1a2             | mask                                            'careful: shared register use!
3d5bc 1a2 00 00 00 00 | resetmaskA      long    0
3d5c0 1a3             | limit                                           'careful: shared register use!
3d5c0 1a3 00 00 00 00 | resetmaskB      long    0
3d5c4 1a4 00 00 00 00 | datapins        long    0
3d5c8 1a5             | const512                                        'careful: shared register use!
3d5c8 1a5 00 00 00 00 | devicelist      long    0
3d5cc 1a6 00 00 00 00 | coglist         long    0
3d5d0 1a7 00 00 00 00 | mbox            long    0 
3d5d4 1a8             | 
3d5d4 1a8             | clkpin                                          'shared with code patched during init
3d5d4 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3d5d8 1a9             | cspin                                           'shared with code patched during init
3d5d8 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3d5dc 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
3d5e0 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
3d5e4 1ac 01 00 00 00 | clkdelay        long    1
3d5e8 1ad 00 00 00 00 | regdatabus      long    0
3d5ec 1ae             | 
3d5ec 1ae 10 00 00 00 | deviceaddr      long    $10
3d5f0 1af             | rrcounter
3d5f0 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
3d5f4 1b0             | 
3d5f4 1b0             | ' jump addresses for the per COG handlers
3d5f4 1b0 20 00 00 00 | cog0_handler    long    cog0
3d5f8 1b1 2C 00 00 00 | cog1_handler    long    cog1
3d5fc 1b2 38 00 00 00 | cog2_handler    long    cog2
3d600 1b3 44 00 00 00 | cog3_handler    long    cog3
3d604 1b4 50 00 00 00 | cog4_handler    long    cog4
3d608 1b5 5C 00 00 00 | cog5_handler    long    cog5
3d60c 1b6 68 00 00 00 | cog6_handler    long    cog6
3d610 1b7 74 00 00 00 | cog7_handler    long    cog7
3d614 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
3d618 1b9             | 
3d618 1b9             | ' EXECF sequences
3d618 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3d61c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
3d620 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
3d624 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
3d628 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3d62c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
3d630 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
3d634 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
3d634 1c0             | 
3d634 1c0             | 
3d634 1c0             | ' SKIPF sequences
3d634 1c0             | skiptable
3d634 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
3d638 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
3d63c 1c2 00 00 00 00 |                 long    0                      ' read modify write long
3d640 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
3d644 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
3d648 1c5 00 00 00 00 | pattern2        long    0
3d64c 1c6 00 00 00 00 | pattern3        long    0
3d650 1c7 77 02 00 00 | singlelong      long    %1001110111  
3d654 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
3d658 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
3d65c 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
3d660 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
3d664 1cc             | 
3d664 1cc             | ' LUT RAM address values
3d664 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3d668 1cd DD 02 00 00 | continue_read   long    continue_read_lut
3d66c 1ce DB 02 00 00 | continue_write  long    continue_write_lut
3d670 1cf F6 02 00 00 | noread          long    noread_lut
3d674 1d0             | 
3d674 1d0 00 00 00 00 | id0             long    0
3d678 1d1 01 00 00 00 | id1             long    1
3d67c 1d2 02 00 00 00 | id2             long    2
3d680 1d3 03 00 00 00 | id3             long    3
3d684 1d4 04 00 00 00 | id4             long    4
3d688 1d5 05 00 00 00 | id5             long    5
3d68c 1d6 06 00 00 00 | id6             long    6
3d690 1d7 07 00 00 00 | id7             long    7
3d694 1d8             | 
3d694 1d8             | 'These next 10 request registers below are also temporarily reused during init 
3d694 1d8             | 'and COG updates and need to follow immediately after id0-id7
3d694 1d8 00 00 00 00 | addr1           long    0
3d698 1d9 00 00 00 00 | hubdata         long    0
3d69c 1da 00 00 00 00 | count           long    0
3d6a0 1db 00 00 00 00 | addr2           long    0
3d6a4 1dc 00 00 00 00 | total           long    0
3d6a8 1dd 00 00 00 00 | offset1         long    0
3d6ac 1de 00 00 00 00 | offset2         long    0
3d6b0 1df 00 00 00 00 | link            long    0
3d6b4 1e0             | 
3d6b4 1e0             | burstwrite                                      'note shared register use during init
3d6b4 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3d6b8 1e1 00 00 00 00 | id              long    0
3d6bc 1e2             | 
3d6bc 1e2 00 00 00 00 | header          long    0
3d6c0 1e3 00 00 00 00 | trailer         long    0
3d6c4 1e4 00 00 00 00 | cmdaddr         long    0
3d6c8 1e5 00 00 00 00 | request         long    0
3d6cc 1e6 00 00 00 00 | rrlimit         long    0
3d6d0 1e7 00 00 00 00 | pinconfig       long    0
3d6d4 1e8 00 00 00 00 | clks            long    0
3d6d8 1e9 00 00 00 00 | resume          long    0
3d6dc 1ea 00 00 00 00 | orighubsize     long    0
3d6e0 1eb 00 00 00 00 | wrclks          long    0
3d6e4 1ec             | 
3d6e4 1ec 00 00 00 00 | pattern         long    0
3d6e8 1ed 00 00 00 00 | hubscratch      long    0
3d6ec 1ee 00 10 00 00 | val4k           long    4096
3d6f0 1ef             | 
3d6f0 1ef             | ' temporary general purpose regs
3d6f0 1ef 00 00 00 00 | a               long    0
3d6f4 1f0 00 00 00 00 | b               long    0
3d6f8 1f1 00 00 00 00 | c               long    0
3d6fc 1f2 00 00 00 00 | d               long    0
3d700 1f3             |                 fit     502
3d700 1f3             | 
3d700 1f3             |                 fit     502
3d700 1f3             | 
3d700 1f3             | '..................................................................................................
3d700 1f3             | 
3d700 1f3             |             orgh
3d700                 | 
3d700                 | lut_code
3d700                 | 'HW init code up to 80 longs
3d700                 | 
3d700                 | '..................................................................................................
3d700                 | ' Memory layout for LUT RAM once operational:
3d700                 | '
3d700                 | '  LUT RAM address      Usage
3d700                 | '  ---------------      ----
3d700                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
3d700                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
3d700                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
3d700                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
3d700                 | '
3d700                 | ' Also during driver COG startup:
3d700                 | ' $230-$24F is used for HW init setup
3d700                 | ' $250-$26F is used as temporary vector storage 
3d700                 | '..................................................................................................
3d700                 | 
3d700                 |                 org $230    
3d700 230             | 
3d700 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
3d700 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
3d704 231 24 16 60 FD |                             pollxfi
3d708 232 FF AA 2A FF 
3d70c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
3d710 234 28 00 B0 FD |                             call    #sendqspi
3d714 235 07 F8 07 FF 
3d718 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3d71c 237 28 00 B0 FD |                             call    #sendspi
3d720 238 F8 07 78 FF 
3d724 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
3d728 23a 1C 00 B0 FD |                             call    #sendspi
3d72c 23b 7F 78 78 FF 
3d730 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
3d734 23d 10 00 B0 FD |                             call    #sendspi 
3d738 23e 2D 00 64 FD |                             ret
3d73c 23f             | 
3d73c 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
3d740 240 32 0C 64 FD |                             skipf   #%110
3d744 241 9C EF 03 F6 |                             mov     pb, xsendimm
3d748 242             | 
3d748 242 10 D0 07 F6 | sendspi                     mov     clks, #16
3d74c 243 97 EF 03 F6 |                             mov     pb, ximm8lut
3d750 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
3d754 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3d758 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
3d75c 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
3d760 248 24 36 60 FD |                             waitxfi                         'wait for the completion
3d764 249 50 48 63 FD |                             fltl    datapins                'float data bus
3d768 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
3d76c 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
3d770 24c             | 
3d770 24c 00 00 00 00 
3d774 24d 00 00 00 00 
3d778 24e 00 00 00 00 
3d77c 24f 00 00 00 00 |                 long    0[$270-32-$]
3d780 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d780 250             |     
3d780 250             |                 fit     $270-32  ' keep room for 32 vector longs
3d780 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
3d780 250             | rw_vect ' PSRAM jump vectors
3d780 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d784 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d788 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d78c 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d790 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
3d794 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3d798 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
3d79c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
3d7a0 258             | ro_vect ' R/O PSRAM jump vectors
3d7a0 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d7a4 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3d7a8 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
3d7ac 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
3d7b0 25c 00 01 00 00 |                 long    unsupported
3d7b4 25d 00 01 00 00 |                 long    unsupported
3d7b8 25e 00 01 00 00 |                 long    unsupported
3d7bc 25f 00 01 00 00 |                 long    unsupported
3d7c0 260             | ctrl_vect ' Control jump vectors
3d7c0 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
3d7c4 261 00 01 00 00 |                 long    unsupported
3d7c8 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
3d7cc 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
3d7d0 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
3d7d4 265 00 01 00 00 |                 long    unsupported
3d7d8 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
3d7dc 267 3E 01 00 00 |                 long    reconfig 
3d7e0 268             | no_vect ' Invalid bank jump vectors
3d7e0 268 01 01 00 00 |                 long    invalidbank
3d7e4 269 01 01 00 00 |                 long    invalidbank
3d7e8 26a 01 01 00 00 |                 long    invalidbank
3d7ec 26b 01 01 00 00 |                 long    invalidbank
3d7f0 26c 01 01 00 00 |                 long    invalidbank
3d7f4 26d 01 01 00 00 |                 long    invalidbank
3d7f8 26e 01 01 00 00 |                 long    invalidbank
3d7fc 26f 01 01 00 00 |                 long    invalidbank
3d800 270             |                 fit     $270
3d800 270             | 
3d800 270             |                 fit     $270
3d800 270             | '..................................................................................................
3d800 270             | ' PSRAM READS
3d800 270             |                                                             ' a b c d e f
3d800 270             |                                                             ' B W L B R L  (a) byte read
3d800 270             |                                                             ' Y O O U E O  (b) word read
3d800 270             |                                                             ' T R N R S C  (c) long read
3d800 270             |                                                             ' E D G S U K  (d) new burst read
3d800 270             |                                                             '       T M E  (e) resumed sub-burst
3d800 270             |                                                             '         E D  (f) locked sub-burst
3d800 270             | 
3d800 270             | 
3d800 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
3d804 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
3d808 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
3d80c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
3d810 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
3d814 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
3d818 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
3d81c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
3d820 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
3d824 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
3d828 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
3d82c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
3d830 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
3d834 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
3d838 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
3d83c 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
3d840 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
3d844 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
3d848 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
3d84c 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
3d850 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
3d854 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3d858 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
3d85c 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
3d860 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
3d864 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3d868 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
3d86c 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
3d870 28c             | 
3d870 28c             |                             ' fall through to read bursts
3d870 28c             |                         
3d870 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
3d870 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
3d874 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3d878 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3d87c 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3d880 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
3d884 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3d888 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
3d88c 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
3d890 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
3d894 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3d898 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
3d89c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
3d8a0 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
3d8a4 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3d8a8 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
3d8ac 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
3d8b0 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
3d8b4 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3d8b8 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
3d8bc 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
3d8c0 2a0 E8 D1 03 F1 |                             add     clks, clks
3d8c4 2a1             | readcommon
3d8c4 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3d8c8 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3d8cc 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
3d8d0 2a4             | 
3d8d0 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3d8d4 2a5 69 C8 63 FD |                             rev     cmdaddr
3d8d8 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3d8dc 2a7 61 C8 63 FD |                             mergeb  cmdaddr
3d8e0 2a8             | 
3d8e0 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
3d8e4 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3d8e8 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3d8e8 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
3d8ec 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
3d8f0 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
3d8f4 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3d8f8 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3d8f8 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
3d8fc 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
3d900 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
3d904 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
3d908 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
3d90c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
3d910 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
3d910 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
3d914 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
3d918 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
3d91c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
3d920 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
3d924 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
3d928 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
3d92c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
3d930 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
3d934 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
3d938 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
3d93c 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
3d940 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
3d944 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
3d948 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
3d948 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
3d94c 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
3d950 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
3d954 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3d958 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
3d95c 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
3d960 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
3d964 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3d968 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
3d96c 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
3d970 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
3d974 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3d978 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
3d97c 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
3d980 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
3d984 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3d988 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
3d98c 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
3d990 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
3d994 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3d998 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
3d99c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
3d9a0 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
3d9a4 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3d9a8 2da 10 03 90 FD |                             jmp     #writecommon
3d9ac 2db             | 
3d9ac 2db             | '..................................................................................................
3d9ac 2db             | ' Burst continuation testing
3d9ac 2db             | 
3d9ac 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
3d9b0 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
3d9b4 2dd             | continue_read_lut          
3d9b4 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3d9b8 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
3d9bc 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
3d9c0 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
3d9c4 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3d9c8 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
3d9cc 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
3d9d0 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
3d9d4 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3d9d8 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
3d9dc 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
3d9e0 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
3d9e4 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3d9e8 2ea             | 
3d9e8 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
3d9ec 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
3d9f0 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
3d9f4 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3d9f8 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
3d9fc 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
3da00 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
3da04 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
3da08 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
3da0c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
3da10 2f4 2A 1C 66 0D |             _ret_           push    #poller
3da14 2f5             | 
3da14 2f5             | 
3da14 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
3da18 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
3da18 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
3da1c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
3da20 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
3da24 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
3da28 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
3da2c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
3da30 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
3da34 2fd 2D 00 64 FD |                             ret                             ' | continue processing
3da38 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
3da3c 2ff             | '..................................................................................................
3da3c 2ff             | ' Completion of requests
3da3c 2ff             | 
3da3c 2ff             | complete_rw_lut             
3da3c 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
3da40 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
3da44 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
3da48 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
3da4c 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
3da50 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
3da54 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3da58 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
3da5c 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
3da60 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
3da64 309 32 62 64 AD |             if_z            skipf   #%110001
3da68 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
3da6c 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
3da70 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
3da74 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3da78 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
3da7c 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
3da80 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
3da84 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3da88 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
3da8c 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
3da90 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
3da94 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3da98 316             |                                                             ' skipcase (a) gfx copy to/from hub
3da98 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3da98 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3da98 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
3da9c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
3daa0 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
3daa4 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3daa8 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
3daac 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
3dab0 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
3dab4 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3dab8 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
3dabc 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
3dac0 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
3dac4 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3dac8 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
3dacc 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
3dad0 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
3dad4 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3dad8 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
3dadc 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
3dae0 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
3dae4 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3dae8 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
3daec 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
3daf0 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
3daf4 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3daf8 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
3dafc 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
3db00 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
3db04 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
3db08 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
3db0c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
3db10 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
3db14 335 DF B7 03 A6 |             if_z            mov     addr2, link
3db18 336 34 FF 9F AD |             if_z            jmp     #checknext
3db1c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
3db20 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3db24 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
3db28 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
3db2c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
3db30 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
3db34 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
3db38 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
3db3c 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
3db40 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
3db44 341             | 
3db44 341             | '..................................................................................................
3db44 341             | ' PSRAM WRITES
3db44 341             |                                                             '  a b c d e f g h
3db44 341             | 
3db44 341             |                                                             '  B W L F B R L L (a) byte write(s)
3db44 341             |                                                             '  Y O O I U E O O (b) word write(s)
3db44 341             |                                                             '  T R N L R S C C (c) long write(s)
3db44 341             |                                                             '  E D G L S U K K (d) resumed fill
3db44 341             |                                                             '          T M E E (e) new burst write
3db44 341             |                                                             '            E D D (f) resumed burst
3db44 341             |                                                             '              F B (g) locked fill
3db44 341             |                                                             '              I U (h) locked burst write
3db44 341             |                                                             '              L R 
3db44 341             |                                                             '              L S 
3db44 341             |                                                             '                T 
3db44 341             | 
3db44 341             | w_single                   
3db44 341             | w_fill_cont           
3db44 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
3db48 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
3db4c 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
3db50 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
3db54 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3db58 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
3db5c 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
3db60 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
3db64 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3db68 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
3db6c 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
3db70 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
3db74 34d             |                ' disable call to r_resume_burst for single longs when z=0
3db74 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3db78 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
3db7c 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
3db80 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
3db84 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3db88 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
3db8c 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
3db90 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
3db94 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3db98 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
3db9c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
3dba0 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
3dba4 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3dba8 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
3dbac 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
3dbb0 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
3dbb4 35d             |         
3dbb4 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
3dbb4 35d             |             '
3dbb4 35d             |             '  At least one of these 3 optional components will be sent
3dbb4 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
3dbb4 35d             |             '     body - N x full longs of data
3dbb4 35d             |             '     trailer - last partial long of data
3dbb4 35d             |             '
3dbb4 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
3dbb4 35d             |             '
3dbb4 35d             |             'Case    Type                           Sends
3dbb4 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
3dbb4 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
3dbb4 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
3dbb4 35d             |             ' 4)     Multiple long fill             body only
3dbb4 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
3dbb4 35d             | 
3dbb4 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
3dbb4 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3dbb8 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3dbbc 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
3dbc0 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
3dbc4 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3dbc8 362 13 8C 07 F6 |                             mov     pattern3, #%10011
3dbcc 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
3dbd0 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
3dbd4 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3dbd8 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
3dbdc 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
3dbe0 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
3dbe4 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3dbe8 36a             |                             
3dbe8 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dbec 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
3dbf0 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
3dbf4 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3dbf8 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
3dbfc 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
3dc00 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
3dc04 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
3dc08 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
3dc0c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
3dc10 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
3dc14 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
3dc18 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
3dc1c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
3dc20 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
3dc24 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
3dc28 37a             | 
3dc28 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
3dc2c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
3dc30 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
3dc34 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
3dc38 37e             |                  
3dc38 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
3dc3c 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
3dc40 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
3dc44 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
3dc48 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
3dc4c 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
3dc50 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
3dc54 385             | 
3dc54 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3dc58 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
3dc5c 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
3dc60 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
3dc64 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3dc68 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
3dc6c 38b             | 
3dc6c 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
3dc6c 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
3dc70 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
3dc74 38d 2A B0 63 FD |                             push    addr1                   'save address
3dc78 38e             | 
3dc78 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3dc78 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
3dc7c 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
3dc80 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
3dc84 391             |             
3dc84 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3dc88 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
3dc8c 393 2B B0 63 FD |                             pop     addr1                   'restore address
3dc90 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
3dc94 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3dc98 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
3dc9c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
3dca0 398             | 
3dca0 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
3dca4 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3dca8 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
3dcac 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
3dcb0 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
3dcb4 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3dcb8 39e             | 
3dcb8 39e             |                             'trailer is done
3dcb8 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
3dcbc 39f             | 
3dcbc 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
3dcc0 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
3dcc4 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3dcc8 3a2             | 
3dcc8 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
3dccc 3a3 69 C8 63 FD |                             rev     cmdaddr                 
3dcd0 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
3dcd4 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3dcd8 3a6             |                             
3dcd8 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
3dcdc 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
3dce0 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
3dce4 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3dce8 3aa             |                                                          
3dce8 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
3dcec 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
3dcf0 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
3dcf4 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3dcf8 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
3dcfc 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
3dd00 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
3dd04 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
3dd08 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
3dd0c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
3dd10 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
3dd14 3b5             |  
3dd14 3b5 59 52 63 FD |                             drvh    cspin
3dd18 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
3dd1c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
3dd20 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
3dd24 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
3dd28 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
3dd2c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
3dd30 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
3dd34 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
3dd38 3be EA E5 03 F6 |                             mov     d, orighubsize
3dd3c 3bf EF E5 63 F0 |                             shl     d, a
3dd40 3c0 F2 E3 83 F1 |                             sub     c, d
3dd44 3c1 DD E3 03 F1 |                             add     c, offset1
3dd48 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
3dd4c 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
3dd50 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
3dd54 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3dd58 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
3dd5c 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
3dd60 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
3dd64 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3dd68 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
3dd6c 3cb BB D3 03 F6 |                             mov     resume, restorefill
3dd70 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
3dd74 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3dd78 3ce 6C FC BF CD |             if_c            call    #yield
3dd7c 3cf 2D 00 64 FD |                             ret
3dd80 3d0             |                            
3dd80 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
3dd80 3d0             |                       '     rczl    pa                      'rotate left into address offset
3dd80 3d0             |                       '     rczl    c wcz                   'restore count and flags
3dd80 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
3dd84 3d1 02 EC 67 F0 |                             shl     pa, #2
3dd88 3d2 28 06 64 AD |             if_z            setq    #3
3dd8c 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
3dd90 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
3dd94 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3dd98 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3dd9c 3d7             | 
3dd9c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
3dda0 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
3dda4 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3dda8 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3ddac 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
3ddb0 3dc             |                 fit 1024-32
3ddb0 3dc             |         
3ddb0 3dc             | 
3ddb0 3dc             | '..................................................................................................
3ddb0 3dc             | 
3ddb0 3dc             |                 fit 1024-32
3ddb0 3dc 00 00 00 00 
3ddb4 3dd 00 00 00 00 
3ddb8 3de 00 00 00 00 
3ddbc 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
3ddc0 3e0             |                 org 1024-32
3ddc0 000             | 
3ddc0 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
3ddc0 000 00 00 00 00 |                 long $0000
3ddc4 001 11 11 00 00 |                 long $1111
3ddc8 002 22 22 00 00 |                 long $2222
3ddcc 003 33 33 00 00 |                 long $3333
3ddd0 004 44 44 00 00 |                 long $4444
3ddd4 005 55 55 00 00 |                 long $5555
3ddd8 006 66 66 00 00 |                 long $6666
3dddc 007 77 77 00 00 |                 long $7777
3dde0 008 88 88 00 00 |                 long $8888
3dde4 009 99 99 00 00 |                 long $9999
3dde8 00a AA AA 00 00 |                 long $aaaa
3ddec 00b BB BB 00 00 |                 long $bbbb
3ddf0 00c CC CC 00 00 |                 long $cccc
3ddf4 00d DD DD 00 00 |                 long $dddd
3ddf8 00e EE EE 00 00 |                 long $eeee
3ddfc 00f FF FF 00 00 |                 long $ffff
3de00 010             | 
3de00 010             | 'masks
3de00 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
3de04 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
3de08 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3de0c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
3de10 014             | 
3de10 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
3de14 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
3de18 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3de1c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
3de20 018             | 
3de20 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
3de24 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
3de28 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3de2c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
3de30 01c             | 
3de30 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
3de34 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
3de38 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
3de3c 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
3de40 020             |         fit 1024
3de40 020             | 
3de40 020             |         fit 1024
3de40 020             | 
3de40 020             | '--------------------------------------------------------------------------------------------------
3de40 020             |         orgh
3de40                 | 
3de40                 | gfxexpansion
3de40                 |                             'simple line drawing graphics expansion of memory driver
3de40                 |                             'jmp     #donerepeats                'just return for now
3de40                 | 
3de40     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
3de44     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
3de48     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
3de4c     DD E1 03 F6 |                             mov     b, offset1              'get error term
3de50     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
3de54     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3de58     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
3de5c     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
3de60     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
3de64     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3de68     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
3de6c     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
3de70     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
3de74     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3de78     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
3de7c     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
3de80     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
3de84     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3de88     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
3de8c     DC E5 33 F9 |                             getword d, total, #0            'get line width
3de90     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
3de94     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3de98     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3de9c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
3dea0     C3 03 80 FD |                             jmp     #readmask               'continue filling
3dea4                 | 	alignl
3dea4                 | _usbnew_spin2_dat_
3dea4                 |                 org     $000
3dea4 000             | 
3dea4 000             | usb_host_start
3dea4 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3dea8 001             | 
3dea8 001 03 00 00 FF 
3deac 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
3deb0 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
3deb4 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3deb8 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3debc 006 29 70 63 FD |                 setq2   htmp
3dec0 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
3dec4 008             | 
3dec4 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3dec8 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3decc 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
3ded0 00b             | 
3ded0 00b             | '------------------------------------------------------------------------------
3ded0 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
3ded0 00b             | ' special because the receiving function must not respond with either STALL or
3ded0 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
3ded0 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
3ded0 00b             | ' corrupt packet, it must ignore the transaction
3ded0 00b             | '------------------------------------------------------------------------------
3ded0 00b             | ' On entry:
3ded0 00b             | '   PTRA - start address of the SETUP data struct.
3ded0 00b             | ' On exit:
3ded0 00b             | '   retval - PID_ACK on success, otherwise error code.
3ded0 00b             | '------------------------------------------------------------------------------
3ded0 00b             | txn_setup
3ded0 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
3ded4 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3ded8 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3dedc 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
3dee0 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
3dee4 010             | .setup
3dee4 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3dee8 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3deec 012 2D 00 64 AD |         if_z    ret
3def0 013 7C 0B B0 FD |                 call    #retry_wait
3def4 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3def8 015 2D 00 64 AD |         if_z    ret
3defc 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
3df00 017 E0 FF 9F FD |                 jmp     #.setup
3df04 018             | 
3df04 018             | '------------------------------------------------------------------------------
3df04 018             | ' IN/INTERRUPT transaction.
3df04 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
3df04 018             | '------------------------------------------------------------------------------
3df04 018             | ' On entry:
3df04 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
3df04 018             | '     CRC(b19..23).
3df04 018             | ' On exit:
3df04 018             | '------------------------------------------------------------------------------
3df04 018             | txn_in
3df04 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3df08 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3df0c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
3df10 01b             | 
3df10 01b             |                 ' Fall through to urx_packet
3df10 01b             | 
3df10 01b             | '------------------------------------------------------------------------------
3df10 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
3df10 01b             | ' received are handshakes and IN DATAx.
3df10 01b             | '------------------------------------------------------------------------------
3df10 01b             | ' On entry:
3df10 01b             | ' On exit:
3df10 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
3df10 01b             | '     returned.
3df10 01b             | '------------------------------------------------------------------------------
3df10 01b             | urx_packet
3df10 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
3df14 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df18 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3df1c 01e 1A 92 63 FD |                 getct   hct2
3df20 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
3df24 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
3df28 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3df2c 022             | .wait_sop
3df2c 022 22 A7 8A FA |                 rdpin   urx, dm
3df30 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3df34 024 08 00 90 CD |         if_c    jmp     #.get_pid
3df38 025 FC 25 CC FB |                 jnct2   #.wait_sop
3df3c 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
3df40 027             | .get_pid
3df40 027 28 02 B0 FD |                 call    #urx_next
3df44 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
3df48 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
3df4c 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
3df50 02b             | .chk_pid
3df50 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3df54 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3df58 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
3df5c 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
3df60 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
3df64 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3df68 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
3df6c 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
3df70 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
3df74 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3df78 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
3df7c 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
3df80 037             | .ack_resend
3df80 037 22 A7 82 FA |                 rqpin   urx, dm
3df84 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3df88 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
3df8c 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
3df90 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
3df94 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3df98 03d             | .chk_eop
3df98 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3df9c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
3dfa0 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
3dfa4 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3dfa8 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3dfac 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3dfb0 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
3dfb4 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3dfb8 045 2D 00 64 FD |                 ret
3dfbc 046             | .idle
3dfbc 046 22 A7 82 FA |                 rqpin   urx, dm
3dfc0 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3dfc4 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3dfc8 049 2D 00 64 FD |                 ret
3dfcc 04a             | 
3dfcc 04a             | '------------------------------------------------------------------------------
3dfcc 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3dfcc 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3dfcc 04a             | ' if one is required.
3dfcc 04a             | '------------------------------------------------------------------------------
3dfcc 04a             | ' On entry:
3dfcc 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3dfcc 04a             | ' On exit:
3dfcc 04a             | '------------------------------------------------------------------------------
3dfcc 04a             | utx_token
3dfcc 04a 22 A7 82 FA |                 rqpin   urx, dm
3dfd0 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3dfd4 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3dfd8 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3dfdc 04e 34 0D B0 CD |         if_c    call    #utx_pre
3dfe0 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3dfe4 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3dfe8 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3dfec 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
3dff0 053             | .next_byte
3dff0 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
3dff4 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
3dff8 055             | .wait
3dff8 055 40 46 72 FD |                 testp   dp                      wc
3dffc 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e000 057 23 03 08 FC |                 akpin   dp
3e004 058 22 A5 22 FC |                 wypin   utx, dm
3e008 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3e00c 05a             | 
3e00c 05a             | '------------------------------------------------------------------------------
3e00c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3e00c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3e00c 05a             | '------------------------------------------------------------------------------
3e00c 05a             | ' On entry:
3e00c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3e00c 05a             | '     CRC(b19..23).
3e00c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3e00c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3e00c 05a             | ' On exit:
3e00c 05a             | '------------------------------------------------------------------------------
3e00c 05a             | txn_out
3e00c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
3e010 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
3e014 05c 00 00 C0 FF 
3e018 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3e01c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
3e020 05f             | 
3e020 05f             |                 ' Fall through to utx_data
3e020 05f             | 
3e020 05f             | '------------------------------------------------------------------------------
3e020 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
3e020 05f             | ' calculated while the data byte is being shifted out. Since data stage
3e020 05f             | ' success/fail is not determined until the status stage of the transaction,
3e020 05f             | ' this routine is only concerned about the current DATAx packet.
3e020 05f             | '------------------------------------------------------------------------------
3e020 05f             | ' On entry:
3e020 05f             | '   PTRA - hub start address of the data to read.
3e020 05f             | '   pkt_cnt - data payload size.
3e020 05f             | ' On exit:
3e020 05f             | '------------------------------------------------------------------------------
3e020 05f             | utx_data
3e020 05f 22 A7 82 FA |                 rqpin   urx, dm
3e024 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e028 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3e02c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e030 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
3e034 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e038 065 D8 0C B0 CD |         if_c    call    #utx_pre
3e03c 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e040 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
3e044 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e048 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
3e04c 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
3e050 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
3e054 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3e058 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
3e05c 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
3e060 06f             | .read_byte
3e060 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
3e064 070 F0 00 B0 FD |                 call    #utx_byte
3e068 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
3e06c 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
3e070 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e074 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e078 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
3e07c 076             | .send_crc
3e07c 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
3e080 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
3e084 078 D0 00 B0 FD |                 call    #utx_byte
3e088 079 5D A5 EA F8 |                 getbyte utx, crc, #1
3e08c 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
3e090 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
3e094 07c             | 
3e094 07c             | '------------------------------------------------------------------------------
3e094 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
3e094 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
3e094 07c             | ' expects that the packet includes at least the CRC word.
3e094 07c             | '
3e094 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
3e094 07c             | ' was requested, which makes it difficult to determine where the data stops
3e094 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
3e094 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
3e094 07c             | ' USB-16 expected residual value of 0xB001.
3e094 07c             | '
3e094 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
3e094 07c             | ' so the caller can verify IN success before writing the data to its final
3e094 07c             | ' destination.
3e094 07c             | '------------------------------------------------------------------------------
3e094 07c             | ' On entry:
3e094 07c             | '   pkt_data - max byte count expected to be in the packet.
3e094 07c             | '   newb_flg - signals new byte ready when toggled.
3e094 07c             | ' On exit:
3e094 07c             | '   pkt_cnt - actual number of bytes read.
3e094 07c             | '------------------------------------------------------------------------------
3e094 07c             | urx_data
3e094 07c F7 75 03 F6 |                 mov     htmp2, pb
3e098 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3e09c 07e 00 00 C0 FF 
3e0a0 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
3e0a4 080 BA EF 03 F6 |                 mov     pb, htmp2
3e0a8 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3e0ac 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
3e0b0 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
3e0b4 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3e0b8 085             | .wait_byte
3e0b8 085             | ' In-line rx for max speed
3e0b8 085 22 A7 82 FA |                 rqpin   urx, dm
3e0bc 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e0c0 087 53 A5 02 F5 |                 and     utx, urx
3e0c4 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e0c8 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e0cc 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
3e0d0 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3e0d4 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3e0d8 08d DC FF 9F FD |                 jmp     #.wait_byte
3e0dc 08e             | .get_byte
3e0dc 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
3e0e0 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
3e0e4 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3e0e8 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3e0ec 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
3e0f0 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3e0f4 094             | .end_crc
3e0f4 094 01 B8 06 F1 |                 add     pkt_cnt, #1
3e0f8 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3e0fc 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
3e100 097 2D 00 64 1D |         if_a    ret
3e104 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
3e104 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
3e104 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
3e104 098             | ' to miss it, so cheat a bit and look for SOP clear here.
3e104 098 22 A7 82 FA |                 rqpin   urx, dm
3e108 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3e10c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
3e110 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
3e110 09b             | .chk_crc
3e110 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
3e114 09c 58 00 00 FF 
3e118 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3e11c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
3e120 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
3e124 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
3e128 0a1 34 09 B0 FD |                 call    #poll_waitx
3e12c 0a2             | 
3e12c 0a2             |                 ' Fall through to utx_handshake
3e12c 0a2             | 
3e12c 0a2             | '------------------------------------------------------------------------------
3e12c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3e12c 0a2             | ' the appropriate IP delay has been inserted.
3e12c 0a2             | '------------------------------------------------------------------------------
3e12c 0a2             | ' On entry:
3e12c 0a2             | '   retval - handshake PID to send.
3e12c 0a2             | ' On exit:
3e12c 0a2             | '   retval unchanged.
3e12c 0a2             | '------------------------------------------------------------------------------
3e12c 0a2             | utx_handshake
3e12c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3e130 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
3e134 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
3e138 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
3e13c 0a6 5F A5 02 F6 |                 mov     utx, retval
3e140 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
3e144 0a8             | .idle
3e144 0a8 22 A7 82 FA |                 rqpin   urx, dm
3e148 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
3e14c 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
3e150 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
3e154 0ac 08 09 90 FD |                 jmp     #poll_waitx
3e158 0ad             | 
3e158 0ad             | '------------------------------------------------------------------------------
3e158 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3e158 0ad             | '------------------------------------------------------------------------------
3e158 0ad             | ' On entry:
3e158 0ad             | '   utx - byte to transmit.
3e158 0ad             | ' On exit:
3e158 0ad             | '------------------------------------------------------------------------------
3e158 0ad             | utx_byte
3e158 0ad 40 46 72 FD |                 testp   dp                      wc
3e15c 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
3e160 0af 23 03 08 FC |                 akpin   dp
3e164 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3e168 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
3e16c 0b2             | 
3e16c 0b2             | '------------------------------------------------------------------------------
3e16c 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
3e16c 0b2             | '------------------------------------------------------------------------------
3e16c 0b2             | ' On entry:
3e16c 0b2             | ' On exit:
3e16c 0b2             | '   retval - the byte read.
3e16c 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
3e16c 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
3e16c 0b2             | '     received.
3e16c 0b2             | '------------------------------------------------------------------------------
3e16c 0b2             | urx_next
3e16c 0b2 22 A7 8A FA |                 rdpin   urx, dm
3e170 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
3e174 0b4 53 A5 02 F5 |                 and     utx, urx
3e178 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3e17c 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3e180 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
3e184 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3e188 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
3e18c 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
3e190 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
3e194 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3e198 0bd 2D 00 64 FD |                 ret
3e19c 0be             | 
3e19c 0be             | '------------------------------------------------------------------------------
3e19c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3e19c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3e19c 0be             | ' length, and the PID is not included in the CRC calculation:
3e19c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3e19c 0be             | '  CRC5  ENDP ADDRESS PID
3e19c 0be             | ' %00000_1111_1111111_xxxxxxxx
3e19c 0be             | '------------------------------------------------------------------------------
3e19c 0be             | ' On entry:
3e19c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3e19c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3e19c 0be             | ' On exit:
3e19c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3e19c 0be             | '------------------------------------------------------------------------------
3e19c 0be             | calc_crc5
3e19c 0be FF 03 00 FF 
3e1a0 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
3e1a4 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3e1a8 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3e1ac 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
3e1b0 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
3e1b4 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3e1b8 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3e1bc 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
3e1c0 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
3e1c4 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3e1c8 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3e1cc 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e1d0 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
3e1d4 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3e1d8 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3e1dc 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
3e1e0 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
3e1e4 0d0             | 
3e1e4 0d0             | '------------------------------------------------------------------------------
3e1e4 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
3e1e4 0d0             | '------------------------------------------------------------------------------
3e1e4 0d0             | isr1_fsframe
3e1e4 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3e1e8 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e1ec 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e1f0 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e1f4 0d4             | .wait
3e1f4 0d4 40 46 72 FD |                 testp   dp                      wc
3e1f8 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e1fc 0d6 23 03 08 FC |                 akpin   dp
3e200 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
3e204 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
3e208 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3e20c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
3e210 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
3e214 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
3e218 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3e21c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
3e220 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
3e224 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
3e228 0e1 2C FF BF FD |                 call    #utx_byte
3e22c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
3e230 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
3e234 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
3e238 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
3e23c 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
3e240 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
3e244 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
3e248 0e9 5B A5 42 F5 |                 or      utx, icrc
3e24c 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
3e250 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
3e254 0ec 20 00 90 FD |                 jmp     #isr1_wait
3e258 0ed             | isr1_lsframe
3e258 0ed 1A 92 62 FD |                 getct   iframe_ct_base
3e25c 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e260 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e264 0f0             | .wait
3e264 0f0 40 46 72 FD |                 testp   dp                      wc
3e268 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
3e26c 0f2 23 03 08 FC |                 akpin   dp
3e270 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
3e274 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
3e278 0f5             | isr1_wait
3e278 0f5 22 A5 82 FA |                 rqpin   utx, dm
3e27c 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
3e280 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
3e284 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
3e288 0f9 03 00 00 FF 
3e28c 0fa FF B3 06 F5 |                 and     frame, ##$7ff
3e290 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
3e294 0fc F5 FF 3B FB |                 reti1
3e298 0fd             | 
3e298 0fd             | '------------------------------------------------------------------------------
3e298 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
3e298 0fd             | ' transaction will complete before the next frame is triggered.
3e298 0fd             | '------------------------------------------------------------------------------
3e298 0fd             | ' On entry:
3e298 0fd             | ' On exit:
3e298 0fd             | '------------------------------------------------------------------------------
3e298 0fd             | wait_txn_ok
3e298 0fd 1A 74 63 FD |                 getct   htmp2
3e29c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
3e2a0 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e2a4 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
3e2a8 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3e2ac 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
3e2b0 103 2D 00 64 FD |                 ret
3e2b4 104             | 
3e2b4 104             | '------------------------------------------------------------------------------
3e2b4 104             | ' A device connection was detected, or a bus reset was requested by the USB
3e2b4 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
3e2b4 104             | ' and perform a reset sequence prior to device enumeration.
3e2b4 104             | '------------------------------------------------------------------------------
3e2b4 104             | dev_reset
3e2b4 104 22 A7 82 FA |                 rqpin   urx, dm
3e2b8 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3e2bc 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
3e2c0 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
3e2c4 108             | reset
3e2c4 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
3e2c8 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3e2cc 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
3e2d0 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e2d4 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
3e2d8 10d 1A 92 62 FD |                 getct   iframe_ct_base
3e2dc 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e2e0 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e2e4 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
3e2e8 111 24 70 07 F1 |                 add     htmp, #36
3e2ec 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
3e2f0 113             | .framewait
3e2f0 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
3e2f4 114 F8 FF 9F CD |         if_b    jmp     #.framewait
3e2f8 115 2D 00 64 FD |                 ret
3e2fc 116             | 
3e2fc 116             | '------------------------------------------------------------------------------
3e2fc 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3e2fc 116             | '------------------------------------------------------------------------------
3e2fc 116             | ' On entry:
3e2fc 116             | '   PTRA - source address.
3e2fc 116             | '   PB - destination address.
3e2fc 116             | '   hr0 - length of copy, in bytes.
3e2fc 116             | ' On exit:
3e2fc 116             | '------------------------------------------------------------------------------
3e2fc 116             | hmemcpy
3e2fc 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
3e300 117 F7 71 43 FC |                 wrbyte  htmp, pb
3e304 118 01 EE 07 F1 |                 add     pb, #1
3e308 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3e30c 11a             | 
3e30c 11a             | '------------------------------------------------------------------------------
3e30c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3e30c 11a             | ' loop until the errant device is disconnected.
3e30c 11a             | '------------------------------------------------------------------------------
3e30c 11a             | ' On entry:
3e30c 11a             | ' On exit:
3e30c 11a             | '------------------------------------------------------------------------------
3e30c 11a             | host_error
3e30c 11a             |           if ERROR_LED >= 0
3e30c 11a             |           end
3e30c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
3e310 11b             | 
3e310 11b             | '------------------------------------------------------------------------------
3e310 11b             | ' Get HID descriptor buffer for current port
3e310 11b             | '------------------------------------------------------------------------------
3e310 11b             | ' On entry:
3e310 11b             | ' On exit:
3e310 11b             | '   PB - HID descriptor buffer pointer
3e310 11b             | '------------------------------------------------------------------------------
3e310 11b             | get_hid_descr_buffer
3e310 11b 2D EF 03 F6 |                 mov     pb, hdev_port
3e314 11c 01 EE E7 F2 |                 cmpsub  pb, #1
3e318 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3e31c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
3e320 11f             | 
3e320 11f             | 
3e320 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
3e324 120             | 
3e324 120             | ' USB commands and error codes
3e324 120 00 00 00 00 | cmd_data        long    0
3e328 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3e32c 122             | 
3e32c 122             | ' Parameters block assigned at cog startup
3e32c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
3e330 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
3e334 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
3e338 125             | if ACTIVITY_LED >= 0
3e338 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
3e338 125             | end
3e338 125             | if ERROR_LED >= 0
3e338 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
3e338 125             | end
3e338 125 00 00 00 00 | hid_descr_p     long    0
3e33c 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
3e33c 126             | 'hkbd_report_p   long    0
3e33c 126 00 00 00 00 | hub_descr_p     long    0
3e340 127 00 00 00 00 | urx_buff_p      long    0
3e344 128 00 00 00 00 | dev_desc_buff_p long    0
3e348 129 00 00 00 00 | con_desc_buff_p long    0
3e34c 12a 00 00 00 00 | cache_start_p   long    0
3e350 12b 00 00 00 00 | cache_end_p     long    0
3e354 12c             | if EMUPAD_MAX_PLAYER > 0
3e354 12c             | emupad_out_ptr  long    0
3e354 12c             | end
3e354 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
3e358 12d             | 
3e358 12d             | hdev_init_start
3e358 12d             | hdev_port       res     1
3e358 12d             | hdev_port       res     1
3e358 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e358 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
3e358 12d             | kbm_next_datax  res     1
3e358 12d             | kbm_next_datax  res     1
3e358 12d             | hub_intf_num    res     1
3e358 12d             | hub_intf_num    res     1
3e358 12d             | hub_next_datax  res     1
3e358 12d             | hub_next_datax  res     1
3e358 12d             | hub_status_chg  res     1
3e358 12d             | hub_status_chg  res     1
3e358 12d             | hub_port_status res     1
3e358 12d             | hub_port_status res     1
3e358 12d             | if HAVE_MOUSE
3e358 12d             | ms_intf_num     res     1
3e358 12d             | ms_intf_num     res     1
3e358 12d             | ms_in_max_pkt   res     1
3e358 12d             | ms_in_max_pkt   res     1
3e358 12d             | end
3e358 12d             | kb_intf_num     res     1
3e358 12d             | kb_intf_num     res     1
3e358 12d             | kb_interval     res     1
3e358 12d             | kb_interval     res     1
3e358 12d             | kb_in_max_pkt   res     1
3e358 12d             | kb_in_max_pkt   res     1
3e358 12d             | kb_max_index    res     1
3e358 12d             | kb_max_index    res     1
3e358 12d             | kb_led_states   res     1
3e358 12d             | kb_led_states   res     1
3e358 12d             | gp_intf_num     res     1
3e358 12d             | gp_intf_num     res     1
3e358 12d             | gp_interval     res     1
3e358 12d             | gp_interval     res     1
3e358 12d             | gp_max_index    res     1
3e358 12d             | gp_max_index    res     1
3e358 12d             | gp_descr_len    res     1+MAX_DEVICES
3e358 12d             | gp_descr_len    res     1+MAX_DEVICES
3e358 12d             | hdev_init_end
3e358 12d             | 
3e358 12d             | ' Initialized at cog startup:
3e358 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e358 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
3e358 12d             | iframe_ct_new   res     1
3e358 12d             | iframe_ct_new   res     1
3e358 12d             | iframe_ct_base  res     1
3e358 12d             | iframe_ct_base  res     1
3e358 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e358 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
3e358 12d             | 
3e358 12d             | ' This register block is reset to zero when a USB device connects
3e358 12d             | hreg_init_start
3e358 12d             | hstatus         res     1         ' Host status flags
3e358 12d             | hstatus         res     1         ' Host status flags
3e358 12d             | hctwait         res     1         ' Poll-based wait clocks
3e358 12d             | hctwait         res     1         ' Poll-based wait clocks
3e358 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e358 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
3e358 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e358 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
3e358 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e358 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
3e358 12d             | xfer_retry      res     1         ' Control transfer retry count
3e358 12d             | xfer_retry      res     1         ' Control transfer retry count
3e358 12d             | retry           res     1         ' Transaction retry count
3e358 12d             | retry           res     1         ' Transaction retry count
3e358 12d             | utx             res     1         ' Byte to transmit on USB
3e358 12d             | utx             res     1         ' Byte to transmit on USB
3e358 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e358 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
3e358 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e358 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
3e358 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e358 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
3e358 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e358 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
3e358 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e358 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
3e358 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e358 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
3e358 12d             | frame           res     1         ' USB 1ms frame counter value
3e358 12d             | frame           res     1         ' USB 1ms frame counter value
3e358 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e358 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
3e358 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e358 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
3e358 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e358 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
3e358 12d             | crc             res     1         ' Used for CRC16 calculation
3e358 12d             | crc             res     1         ' Used for CRC16 calculation
3e358 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e358 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
3e358 12d             | retval          res     1         ' Global success/fail return parameter
3e358 12d             | retval          res     1         ' Global success/fail return parameter
3e358 12d             | context_retval  res     1         ' Operation contextual return parameter
3e358 12d             | context_retval  res     1         ' Operation contextual return parameter
3e358 12d             | ' Device stuff
3e358 12d             | hdev_id         res     1+MAX_DEVICES
3e358 12d             | hdev_id         res     1+MAX_DEVICES
3e358 12d             | hdev_bcd        res     1
3e358 12d             | hdev_bcd        res     1
3e358 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e358 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
3e358 12d             | ' Keyboard/mouse stuff
3e358 12d             | hctrl_ep_addr   res     1
3e358 12d             | hctrl_ep_addr   res     1
3e358 12d             | hctrl_max_pkt   res     1
3e358 12d             | hctrl_max_pkt   res     1
3e358 12d             | hconfig_base    res     1
3e358 12d             | hconfig_base    res     1
3e358 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e358 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
3e358 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e358 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
3e358 12d             | hdev_class      res     1
3e358 12d             | hdev_class      res     1
3e358 12d             | hdev_subclass   res     1
3e358 12d             | hdev_subclass   res     1
3e358 12d             | hdev_protocol   res     1
3e358 12d             | hdev_protocol   res     1
3e358 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e358 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
3e358 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e358 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
3e358 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e358 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
3e358 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e358 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
3e358 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e358 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
3e358 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e358 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
3e358 12d             | if HAVE_MOUSE
3e358 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e358 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
3e358 12d             | end
3e358 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e358 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
3e358 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e358 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
3e358 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e358 12d             | hdev_ep_addr    res     1+MAX_DEVICES
3e358 12d             | hdev_out_addr   res     1
3e358 12d             | hdev_out_addr   res     1
3e358 12d             | 
3e358 12d             | if EMUPAD_MAX_PLAYER > 0
3e358 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
3e358 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
3e358 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
3e358 12d             | end
3e358 12d             | 
3e358 12d             | hreg_init_end
3e358 12d             | 
3e358 12d             | hidr_start
3e358 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e358 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
3e358 12d             | hidr_flags      res     1
3e358 12d             | hidr_flags      res     1
3e358 12d             | hidr_axis       res     3
3e358 12d             | hidr_axis       res     3
3e358 12d             | hidr_buttons    res     1
3e358 12d             | hidr_buttons    res     1
3e358 12d             | hidr_hats       res     1
3e358 12d             | hidr_hats       res     1
3e358 12d             | '' Above are actually useful values, 6 longs
3e358 12d             | hidr_id         res     1
3e358 12d             | hidr_id         res     1
3e358 12d             | hidr_state      res     1
3e358 12d             | hidr_state      res     1
3e358 12d             | hidr_size       res     1
3e358 12d             | hidr_size       res     1
3e358 12d             | hidr_count      res     1
3e358 12d             | hidr_count      res     1
3e358 12d             | hidr_offset     res     1
3e358 12d             | hidr_offset     res     1
3e358 12d             | hidr_usage_idx  res     1
3e358 12d             | hidr_usage_idx  res     1
3e358 12d             | hidr_lminmax    res     1
3e358 12d             | hidr_lminmax    res     1
3e358 12d             | hidr_pminmax    res     1
3e358 12d             | hidr_pminmax    res     1
3e358 12d             | hidr_type       res     1
3e358 12d             | hidr_type       res     1
3e358 12d             | hidr_end
3e358 12d             | 
3e358 12d             | ' Variables dependent on the system freqency
3e358 12d             | _var_64_lower_  res     1
3e358 12d             | _var_64_lower_  res     1
3e358 12d             | _var_64_upper_  res     1
3e358 12d             | _var_64_upper_  res     1
3e358 12d             | _12Mbps_        res     1
3e358 12d             | _12Mbps_        res     1
3e358 12d             | _1_5Mbps_       res     1
3e358 12d             | _1_5Mbps_       res     1
3e358 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e358 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
3e358 12d             | _1us_           res     1         ' 1us
3e358 12d             | _1us_           res     1         ' 1us
3e358 12d             | _10us_          res     1         ' 10us
3e358 12d             | _10us_          res     1         ' 10us
3e358 12d             | _33us_          res     1         ' 33us
3e358 12d             | _33us_          res     1         ' 33us
3e358 12d             | _txn_err_       res     1         ' 250us
3e358 12d             | _txn_err_       res     1         ' 250us
3e358 12d             | _500us_         res     1         ' 500us
3e358 12d             | _500us_         res     1         ' 500us
3e358 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e358 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
3e358 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e358 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
3e358 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e358 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
3e358 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e358 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
3e358 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e358 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
3e358 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e358 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
3e358 12d             | _preamble_wait_ res     1
3e358 12d             | _preamble_wait_ res     1
3e358 12d             | _1ms_           res     1         ' 1ms
3e358 12d             | _1ms_           res     1         ' 1ms
3e358 12d             | _2ms_           res     1         ' 2ms
3e358 12d             | _2ms_           res     1         ' 2ms
3e358 12d             | _suspend_wait_  res     1         ' 3ms
3e358 12d             | _suspend_wait_  res     1         ' 3ms
3e358 12d             | _4ms_           res     1         ' 4ms
3e358 12d             | _4ms_           res     1         ' 4ms
3e358 12d             | _xfer_wait_     res     1         ' 5ms
3e358 12d             | _xfer_wait_     res     1         ' 5ms
3e358 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e358 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
3e358 12d             | _reset_hold_    res     1         ' 15ms
3e358 12d             | _reset_hold_    res     1         ' 15ms
3e358 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e358 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
3e358 12d             | _21ms_          res     1         ' 21ms
3e358 12d             | _21ms_          res     1         ' 21ms
3e358 12d             | _100ms_         res     1         ' 100ms
3e358 12d             | _100ms_         res     1         ' 100ms
3e358 12d             | _500ms_         res     1         ' 500ms
3e358 12d             | _500ms_         res     1         ' 500ms
3e358 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e358 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
3e358 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e358 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
3e358 12d             | '------------------------------------------------------------------------------
3e358 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e358 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
3e358 12d             | _usb_d_ls_nco_  res     1
3e358 12d             | _usb_d_ls_nco_  res     1
3e358 12d             | _usb_h_fs_nco_  res     1
3e358 12d             | _usb_h_fs_nco_  res     1
3e358 12d             | _usb_d_fs_nco_  res     1
3e358 12d             | _usb_d_fs_nco_  res     1
3e358 12d             | '------------------------------------------------------------------------------
3e358 12d             | ' Scratch registers
3e358 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e358 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
3e358 12d             | htmp1           res     1
3e358 12d             | htmp1           res     1
3e358 12d             | htmp2           res     1
3e358 12d             | htmp2           res     1
3e358 12d             | htmp3           res     1
3e358 12d             | htmp3           res     1
3e358 12d             | hrep            res     1         ' Repeat count
3e358 12d             | hrep            res     1         ' Repeat count
3e358 12d             | hsave0          res     1         ' Subroutine parameter saves
3e358 12d             | hsave0          res     1         ' Subroutine parameter saves
3e358 12d             | hsave1          res     1
3e358 12d             | hsave1          res     1
3e358 12d             | hsave2          res     1
3e358 12d             | hsave2          res     1
3e358 12d             | isrtmp1         res     1
3e358 12d             | isrtmp1         res     1
3e358 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e358 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
3e358 12d             | hr0             res     1         ' Multi-purpose registers
3e358 12d             | hr0             res     1         ' Multi-purpose registers
3e358 12d             | hr1             res     1
3e358 12d             | hr1             res     1
3e358 12d             | hr2             res     1
3e358 12d             | hr2             res     1
3e358 12d             | hr3             res     1
3e358 12d             | hr3             res     1
3e358 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e358 12d             | hpar1           res     1         ' Routine entry/exit parameters
3e358 12d             | hpar2           res     1
3e358 12d             | hpar2           res     1
3e358 12d             | hpar3           res     1
3e358 12d             | hpar3           res     1
3e358 12d             | hct2            res     1         ' Function response bus turn-around timer
3e358 12d             | hct2            res     1         ' Function response bus turn-around timer
3e358 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e358 12d             | hct3            res     1         ' Keyboard/mouse poll timer
3e358 12d             | mod_cnt         res     1         ' Used in idle loops
3e358 12d             | mod_cnt         res     1         ' Used in idle loops
3e358 12d             |                 fit     $1F0
3e358 12d             |                 org     $200
3e358 200             | hlut_start
3e358 200             | 
3e358 200             | '------------------------------------------------------------------------------
3e358 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
3e358 200             | ' settings to startup defaults.
3e358 200             | '------------------------------------------------------------------------------
3e358 200             | ' On entry:
3e358 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
3e358 200             | '------------------------------------------------------------------------------
3e358 200             | set_speed_full
3e358 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
3e35c 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e360 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
3e364 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
3e368 204             | '                ret                             wcz     ' Restore caller flags on exit
3e368 204             | 
3e368 204             | '------------------------------------------------------------------------------
3e368 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
3e368 204             | ' is a downstream hub connected (not yet implemented), the baud generator
3e368 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
3e368 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
3e368 204             | ' putting the smart pins into reset.
3e368 204             | '------------------------------------------------------------------------------
3e368 204             | ' On entry:
3e368 204             | ' On exit: CZ flags restored to caller states
3e368 204             | '------------------------------------------------------------------------------
3e368 204             | set_speed_low
3e368 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
3e36c 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
3e370 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
3e374 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3e378 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3e37c 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3e380 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
3e384 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
3e388 20c             | 
3e388 20c             | '------------------------------------------------------------------------------
3e388 20c             | ' Perform configuration stuff required when a device intitially connects.
3e388 20c             | '------------------------------------------------------------------------------
3e388 20c             | ' On entry:
3e388 20c             | ' On exit:
3e388 20c             | '------------------------------------------------------------------------------
3e388 20c             | on_connect
3e388 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
3e38c 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
3e390 20e             | .retry
3e390 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e394 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
3e398 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3e39c 211 00 08 00 FF 
3e3a0 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3e3a4 213 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
3e3a8 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e3ac 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3e3b0 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3e3b4 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3e3b8 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e3bc 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
3e3c0 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
3e3c4 21b 4C 03 B0 FD |                 call    #poll_waitx
3e3c8 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3e3cc 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
3e3d0 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
3e3d4 21f B8 FF 9F FD |                 jmp     #.retry
3e3d8 220             | .get_dev_desc
3e3d8 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3e3dc 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3e3e0 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3e3e4 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
3e3e8 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3e3ec 225 88 FB BF FD |                 call    #reset
3e3f0 226 30 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
3e3f4 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e3f8 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3e3fc 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
3e400 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e404 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e408 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3e40c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3e410 22e 04 00 00 FF 
3e414 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
3e418 230 34 FA BF FD |                 call    #calc_crc5
3e41c 231 18 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
3e420 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e424 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3e428 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3e42c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3e430 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3e434 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e438 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
3e43c 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3e440 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3e444 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3e448 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
3e44c 23d C4 02 B0 FD |                 call    #poll_waitx
3e450 23e 20 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
3e454 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3e458 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3e45c 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3e460 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3e464 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e468 244 2D 00 64 5D |         if_nz   ret
3e46c 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3e470 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3e474 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3e478 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3e47c 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3e480 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3e484 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3e488 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3e48c 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3e490 24e 2C FB 9F CD |         if_b    jmp     #host_error
3e494 24f 10 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
3e498 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e49c 251 2D EC 63 FD |                 call    pa
3e4a0 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
3e4a4 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e4a8 254 2C EC 63 FD |                 jmp     pa
3e4ac 255             | 
3e4ac 255             | '------------------------------------------------------------------------------
3e4ac 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3e4ac 255             | ' Status reporting is always in the function-to-host direction.
3e4ac 255             | '------------------------------------------------------------------------------
3e4ac 255             | ' On entry:
3e4ac 255             | '   PTRA - start address of the SETUP data in hub.
3e4ac 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3e4ac 255             | '     stage.
3e4ac 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3e4ac 255             | ' On exit:
3e4ac 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3e4ac 255             | '     contains the count of data stage bytes actually received, which must
3e4ac 255             | '     always be <= the count requested.
3e4ac 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e4ac 255             | '     more specific USB operation error code.
3e4ac 255             | '------------------------------------------------------------------------------
3e4ac 255             | control_read
3e4ac 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e4b0 256 F8 8F 03 F6 |                 mov     hpar2, ptra
3e4b4 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
3e4b8 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e4bc 259             | .xfer_start
3e4bc 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e4c0 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e4c4 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e4c8 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3e4cc 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e4d0 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e4d4 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e4d8 260 61 00 00 FF 
3e4dc 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
3e4e0 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e4e4 263             | .data
3e4e4 263 56 B1 02 F6 |                 mov     pkt_data, total_data
3e4e8 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e4ec 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e4f0 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
3e4f4 267             | .nak_retry
3e4f4 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
3e4f8 268             | .in_retry
3e4f8 268 BC F6 BF FD |                 call    #txn_in
3e4fc 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
3e500 26a 28 00 90 AD |         if_z    jmp     #.commit
3e504 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e508 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e50c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e510 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e514 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
3e518 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e51c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e520 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e524 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
3e528 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3e52c 275             | .commit
3e52c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
3e530 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
3e534 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
3e538 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
3e53c 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
3e540 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e544 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
3e548 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
3e54c 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
3e550 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
3e554 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
3e558 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3e55c 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3e560 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3e564 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e568 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3e56c 285             | .pre_status
3e56c 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3e570 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3e574 287 00 B0 06 F6 |                 mov     pkt_data, #0
3e578 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3e57c 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e580 28a 61 00 00 FF 
3e584 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3e588 28c             | .out_retry
3e588 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3e58c 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e590 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3e594 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e598 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3e59c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e5a0 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3e5a4 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3e5a8 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e5ac 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3e5b0 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3e5b4 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3e5b4 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3e5b4 297             | ' ControlRead() transfer gets things unstuck most of the time...
3e5b4 297             | .xfer_retry
3e5b4 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3e5b8 298 58 01 B0 FD |                 call    #poll_waitx
3e5bc 299 8C F9 BF FD |                 call    #wait_txn_ok
3e5c0 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3e5c4 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3e5c8 29c C8 EF 03 F6 |                 mov     pb, hpar3
3e5cc 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3e5d0 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3e5d4 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3e5d8 2a0             | 
3e5d8 2a0             | '------------------------------------------------------------------------------
3e5d8 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3e5d8 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3e5d8 2a0             | ' the SETUP data struct is filled with the required values.
3e5d8 2a0             | '------------------------------------------------------------------------------
3e5d8 2a0             | ' On entry:
3e5d8 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3e5d8 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3e5d8 2a0             | '     stage.
3e5d8 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3e5d8 2a0             | ' On exit:
3e5d8 2a0             | '   retval - used to convey the success/failure of each stage.
3e5d8 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3e5d8 2a0             | '     more specific USB operation error code.
3e5d8 2a0             | '------------------------------------------------------------------------------
3e5d8 2a0             | control_write
3e5d8 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e5dc 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e5e0 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e5e4 2a3             | 
3e5e4 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3e5e8 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3e5ec 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3e5f0 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3e5f4 2a7             | .xfer_start
3e5f4 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3e5f8 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3e5fc 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3e600 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e604 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3e608 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3e60c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3e610 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3e614 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3e618 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3e61c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e620 2b2             | .data
3e620 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3e624 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3e628 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3e62c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3e630 2b6             | .out_retry
3e630 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3e634 2b7 88 F6 BF FD |                 call    #txn_out
3e638 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3e63c 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3e640 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3e644 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3e648 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3e64c 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3e650 2be             | .commit
3e650 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3e654 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3e658 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3e65c 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3e660 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3e664 2c3             | pre_status_in
3e664 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3e668 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3e66c 2c5             | .status_retry
3e66c 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3e670 2c6 44 F5 BF FD |                 call    #txn_in
3e674 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3e678 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3e67c 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3e680 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3e684 2cb 2D 00 64 AD |         if_z    ret
3e688 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3e68c 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e690 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3e694 2cf             | '               ret                                     ' Caller must handle transfer retirement
3e694 2cf             | 
3e694 2cf             | '------------------------------------------------------------------------------
3e694 2cf             | ' Execute an IN interrupt transaction.
3e694 2cf             | '------------------------------------------------------------------------------
3e694 2cf             | ' On entry:
3e694 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3e694 2cf             | '   hpar2 - Address of the IN data buffer
3e694 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3e694 2cf             | ' On exit:
3e694 2cf             | '   retval - the result of the operation.
3e694 2cf             | '   hpar3 - the count of IN data bytes actually received.
3e694 2cf             | '------------------------------------------------------------------------------
3e694 2cf             | do_int_in
3e694 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e698 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3e69c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3e6a0 2d2             | 
3e6a0 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3e6a4 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3e6a8 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3e6ac 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3e6b0 2d6             | .retry
3e6b0 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3e6b4 2d7 00 F5 BF FD |                 call    #txn_in
3e6b8 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3e6bc 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3e6c0 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3e6c4 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3e6c8 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3e6cc 2dd 54 00 B0 FD |                 call    #retry_wait
3e6d0 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3e6d4 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3e6d8 2e0 D4 FF 9F FD |                 jmp     #.retry
3e6dc 2e1             | .commit
3e6dc 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3e6e0 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3e6e4 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3e6e8 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3e6ec 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3e6f0 2e6             | .post_ret
3e6f0 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3e6f4 2e7             | 
3e6f4 2e7             | 
3e6f4 2e7             | '------------------------------------------------------------------------------
3e6f4 2e7             | ' Resets the downstream hub port to FS
3e6f4 2e7             | '------------------------------------------------------------------------------
3e6f4 2e7             | dwnstream_reset
3e6f4 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3e6f8 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3e6fc 2e9             | 
3e6fc 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3e700 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3e704 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3e708 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3e70c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3e710 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3e714 2ef             | 
3e714 2ef             | '------------------------------------------------------------------------------
3e714 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3e714 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3e714 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3e714 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3e714 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3e714 2ef             | '------------------------------------------------------------------------------
3e714 2ef             | ' On entry:
3e714 2ef             | '   hctwait - wait interval in sysclocks.
3e714 2ef             | ' On exit:
3e714 2ef             | '------------------------------------------------------------------------------
3e714 2ef             | poll_waitx
3e714 2ef 1A 92 63 FD |                 getct   hct2
3e718 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3e71c 2f1             | .wait
3e71c 2f1 FF 25 CC FB |                 jnct2   #.wait
3e720 2f2 2D 00 64 FD |                 ret
3e724 2f3             | 
3e724 2f3             | '------------------------------------------------------------------------------
3e724 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3e724 2f3             | '------------------------------------------------------------------------------
3e724 2f3             | ' On entry:
3e724 2f3             | '   retval - transaction response PID or error code.
3e724 2f3             | ' On exit:
3e724 2f3             | '------------------------------------------------------------------------------
3e724 2f3             | retry_wait
3e724 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3e728 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3e72c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3e730 2f6 14 00 90 AD |         if_z    jmp     #.nak
3e734 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3e738 2f8 D8 FF BF FD |                 call    #poll_waitx
3e73c 2f9             | .dec
3e73c 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3e740 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3e744 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3e748 2fc             | .nak
3e748 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3e74c 2fd C4 FF BF FD |                 call    #poll_waitx
3e750 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3e754 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3e758 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3e75c 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3e760 302 2D 00 64 FD |                 ret
3e764 303             | 
3e764 303             | host_reset
3e764 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3e768 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3e76c 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3e76c 305 BD 01 05 FF 
3e770 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3e774 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3e778 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3e77c 309             | ' Check to see if the system clock has been changed.
3e77c 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e780 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3e784 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3e788 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3e78c 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e790 30e 40 46 62 FD |                 dirl    dp
3e794 30f             | 
3e794 30f 28 02 64 FD |                 setq    #1
3e798 310 80 00 80 FF 
3e79c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3e7a0 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3e7a4 313             | .enable
3e7a4 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3e7a8 314 41 46 62 FD |                 dirh    dp
3e7ac 315 1F 36 63 FD |                 waitx   _1us_
3e7b0 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e7b4 317             | 
3e7b4 317             |                 ' Handle Port protection enable and startup delay
3e7b4 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3e7b8 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3e7bc 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3e7c0 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3e7c4 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3e7c8 31c             | 
3e7c8 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3e7cc 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3e7d0 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3e7d4 31f 00 00 04 F6 |                 mov     0-0, #0
3e7d8 320             | .regloop
3e7d8 320             | 
3e7d8 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3e7d8 320             | 
3e7d8 320             | discon_entry
3e7d8 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3e7dc 321             | 
3e7dc 321             |               
3e7dc 321             |         if HAVE_HIDPAD
3e7dc 321 D4 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3e7e0 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e7e4 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3e7e8 324 F7 01 68 FC |                 wrlong  #0,pb
3e7ec 325             |         end
3e7ec 325             |         if EMUPAD_MAX_PLAYER > 0
3e7ec 325             |         end
3e7ec 325             | 
3e7ec 325             |                 ' Fall through to disconnected loop
3e7ec 325             | 
3e7ec 325             | '-----------------------------------------------------------------------------------------------------------------
3e7ec 325             | ' Device connect handling (Section 7.1.7.3).
3e7ec 325             | '-----------------------------------------------------------------------------------------------------------------
3e7ec 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3e7ec 325             | ' device to connect (Section 7.1.7.3).
3e7ec 325             | '-----------------------------------------------------------------------------------------------------------------
3e7ec 325             | disconnected
3e7ec 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3e7f0 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3e7f4 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3e7f8 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3e7fc 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3e800 32a             |         if ACTIVITY_LED >= 0
3e800 32a             |         end
3e800 32a 22 A7 82 FA |                 rqpin   urx, dm
3e804 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3e808 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3e80c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3e810 32e             | .se1_test
3e810 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3e814 32f FC FE BF FD |                 call    #poll_waitx
3e818 330 22 A7 82 FA |                 rqpin   urx, dm
3e81c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e820 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3e824 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3e828 334             | .se1            'SE1 is a fatal error condition
3e828 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3e82c 335 E4 FE BF FD |                 call    #poll_waitx
3e830 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3e834 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3e838 338             | .connect_test                                           ' Test lines until stable J/K state seen
3e838 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3e83c 339 22 A7 82 FA |                 rqpin   urx, dm
3e840 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3e844 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3e848 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3e84c 33d             | connected
3e84c 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3e850 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3e854 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3e858 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3e85c 341             | .set_pulse
3e85c 341 1A 64 63 FD |                 getct   _pulse_time_
3e860 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3e864 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3e864 343             | ' of 1ms and make a correction, if necessary.
3e864 343             | '                mov     htmp, _1ms_
3e864 343             | '                subs    htmp, iframe_delta
3e864 343             | '                adds    _frame1ms_clks_, htmp
3e864 343             | '                debug(udec(_frame1ms_clks_))
3e864 343             | 
3e864 343             |                 ' Fall through to idle/processing loop
3e864 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3e868 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3e86c 345             | 
3e86c 345             | hidle
3e86c 345 22 A7 82 FA |                 rqpin   urx, dm
3e870 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e874 347 98 00 90 CD |         if_c    jmp     #.se0_test
3e878 348 24 06 70 FD |                 pollct3                         wc
3e87c 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3e880 34a 1A 94 63 FD |                 getct   hct3
3e884 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3e888 34c             | 
3e888 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3e88c 34d 00 70 E3 F8 |                 getbyte htmp
3e890 34e             | 
3e890 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3e894 34f 84 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3e898 350 40 00 90 AD |         if_z    jmp     #.poll
3e89c 351             | 
3e89c 351             |         if _HAVE_GAMEPAD
3e89c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3e8a0 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3e8a4 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3e8a8 354 0C 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3e8ac 355 2C 00 90 AD |         if_z    jmp     #.poll
3e8b0 356             |         end
3e8b0 356             | 
3e8b0 356             |         if HAVE_MOUSE
3e8b0 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3e8b4 357 30 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e8b8 358 20 00 90 AD |         if_z    jmp     #.poll
3e8bc 359             |         end
3e8bc 359             | 
3e8bc 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3e8c0 35a 98 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3e8c4 35b 14 00 90 AD |         if_z    jmp     #.poll
3e8c8 35c             | 
3e8c8 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3e8cc 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3e8d0 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3e8d4 35f 98 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3e8d8 360             |         if HAVE_MOUSE
3e8d8 360 30 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3e8dc 361             |         else
3e8dc 361             |         end
3e8dc 361             | 
3e8dc 361             | .poll
3e8dc 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3e8e0 362 2D EC 63 FD |                 call    pa
3e8e4 363             | .skip_poll
3e8e4 363             | 
3e8e4 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3e8e8 364             | 
3e8e8 364             | .nopoll
3e8e8 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3e8ec 365 44 00 90 AD |         if_z    jmp     #hsuspend
3e8f0 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3e8f4 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3e8f8 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3e8fc 369 1A 84 63 FD |                 getct   hr0
3e900 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3e904 36b             |         if ACTIVITY_LED >= 0
3e904 36b             |         end
3e904 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3e908 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3e90c 36d 5C FF 9F FD |                 jmp     #hidle
3e910 36e             | ' Check for extended SE0 state on the bus
3e910 36e             | .se0_test
3e910 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3e914 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3e918 370 22 A7 82 FA |                 rqpin   urx, dm
3e91c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3e920 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3e924 373 24 F6 BF FD |                 call    #wait_txn_ok
3e928 374 00 00 80 FF 
3e92c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3e930 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3e930 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3e934 377             | 
3e934 377             | hsuspend
3e934 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3e938 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3e93c 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3e940 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3e944 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3e948 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3e94c 37d             | 
3e94c 37d             |                 ' Fall through to resume wait loop
3e94c 37d             | 
3e94c 37d             | hwait_resume
3e94c 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3e950 37e 02 86 47 F0 |                 shr     hr1, #2
3e954 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3e958 380             |         if ACTIVITY_LED >= 0
3e958 380             |         end
3e958 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3e95c 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3e960 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3e964 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3e968 384 18 00 90 AD |         if_z    jmp     #.resume
3e96c 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3e970 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3e974 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3e978 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3e97c 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3e980 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3e984 38b             | .resume
3e984 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3e988 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3e98c 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3e990 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3e994 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3e998 390 1F 70 63 FD |                 waitx   htmp
3e99c 391 22 07 28 FC |                 wypin   #OUT_J, dm
3e9a0 392 01 70 47 F0 |                 shr     htmp, #1
3e9a4 393 1F 70 63 FD |                 waitx   htmp
3e9a8 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3e9ac 395 1A 92 62 FD |                 getct   iframe_ct_base
3e9b0 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3e9b4 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3e9b8 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3e9bc 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3e9c0 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3e9c4 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3e9c8 39c             | 
3e9c8 39c             | '------------------------------------------------------------------------------
3e9c8 39c             | ' Send preamble to enable low-speed HUB ports
3e9c8 39c             | '------------------------------------------------------------------------------
3e9c8 39c             | ' On entry:
3e9c8 39c             | ' On exit:
3e9c8 39c             | '   USB baud rate set to low-speed
3e9c8 39c             | '------------------------------------------------------------------------------
3e9c8 39c             | utx_pre
3e9c8 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3e9cc 39d 40 46 62 FD |                 dirl    dp
3e9d0 39e 28 02 64 FD |                 setq    #1
3e9d4 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3e9d8 3a0 58 44 62 FD |                 drvl    dm
3e9dc 3a1 59 46 62 FD |                 drvh    dp
3e9e0 3a2             | 
3e9e0 3a2 1E 00 00 FF 
3e9e4 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3e9e8 3a4             | 
3e9e8 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3e9ec 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3e9f0 3a6 28 02 64 3D |         if_nc   setq    #1
3e9f4 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3e9f8 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3e9fc 3a9             | .l1
3e9fc 3a9             | 
3e9fc 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3ea00 3aa 40 46 62 FD |                 dirl    dp
3ea04 3ab 28 02 64 FD |                 setq    #1
3ea08 3ac 80 00 80 FF 
3ea0c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3ea10 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3ea14 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3ea18 3b0 41 46 62 FD |                 dirh    dp
3ea1c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3ea20 3b2             | 
3ea20 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3ea24 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3ea28 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3ea2c 3b5             | 
3ea2c 3b5             | hlut_end
3ea2c 3b5             |                 fit     $400
3ea2c 3b5             |                 orgh
3ea2c                 | if OVERLAP_MEMORY
3ea2c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3ea2c                 | end
3ea2c                 | '------------------------------------------------------------------------------
3ea2c                 | ' Routines called from cog space.
3ea2c                 | '------------------------------------------------------------------------------
3ea2c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3ea2c                 | '------------------------------------------------------------------------------
3ea2c                 | 
3ea2c                 | '------------------------------------------------------------------------------
3ea2c                 | ' USB host cog initialization.
3ea2c                 | '------------------------------------------------------------------------------
3ea2c                 | usb_host_init
3ea2c                 |                 ' Initialize buffer pointers
3ea2c                 |         if OVERLAP_MEMORY
3ea2c                 |         else
3ea2c     3C 15 B0 FE |                 loc     pb, #hid_descr
3ea30                 |         end
3ea30     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3ea34                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3ea34                 |                 {
3ea34                 |                 }
3ea34                 |         
3ea34                 |                 {
3ea34                 |                 }
3ea34                 |                 'loc     pb,#hkbd_report
3ea34                 |                 'mov     hkbd_report_p,pb
3ea34                 | 
3ea34     04 1D B0 FE |                 loc     pb, #hub_descr
3ea38     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3ea3c     19 1D B0 FE |                 loc     pb, #urx_buff
3ea40     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3ea44     91 1D B0 FE |                 loc     pb, #dev_desc_buff
3ea48     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3ea4c     9B 1D B0 FE |                 loc     pb, #con_desc_buff
3ea50     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3ea54     14 15 B0 FE |                 loc     pb, #usb_cache_start
3ea58     F7 55 02 F6 |                 mov     cache_start_p, pb
3ea5c     E5 1C B0 FE |                 loc     pb, #usb_cache_end
3ea60     F7 57 02 F6 |                 mov     cache_end_p, pb
3ea64                 | 
3ea64                 |         if ERROR_LED >= 0
3ea64                 |         end
3ea64                 | 
3ea64                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3ea64                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3ea64                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3ea64                 | ' Configure and enable the Serial Host USB port.
3ea64     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3ea68                 | 
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | ' Timing calculations happen before any interrupt(s) are enabled.
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | ' On entry:
3ea68                 | '   htmp - current CLKFREQ value.
3ea68                 | '------------------------------------------------------------------------------
3ea68                 | hinit_usb_timings
3ea68                 | '                getct   htmp2
3ea68     B8 59 02 F6 |                 mov     save_sysclk, htmp
3ea6c     8D 5B 80 FF 
3ea70     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3ea74     18 30 63 FD |                 getqx   _12Mbps_
3ea78     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3ea7c     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3ea80     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3ea84     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3ea88     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3ea8c     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3ea90     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3ea94     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3ea98     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3ea9c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3eaa0     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3eaa4     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3eaa8     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3eaac     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3eab0     80 00 00 FF 
3eab4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3eab8     18 2C 63 FD |                 getqx   _var_64_lower_
3eabc     19 2E 63 FD |                 getqy   _var_64_upper_
3eac0     28 2C 63 FD |                 setq    _var_64_lower_
3eac4     65 CD 1D FF 
3eac8     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3eacc     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3ead0     01 00 00 FF 
3ead4     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3ead8     18 2C 63 FD |                 getqx   _var_64_lower_
3eadc     19 2E 63 FD |                 getqy   _var_64_upper_
3eae0     28 2C 63 FD |                 setq    _var_64_lower_
3eae4     A1 07 00 FF 
3eae8     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3eaec     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3eaf0     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3eaf4     09 36 57 F0 |                 shr     _1us_, #9               wc
3eaf8     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3eafc     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3eb00     18 38 63 FD |                 getqx   _10us_
3eb04     09 38 57 F0 |                 shr     _10us_, #9              wc
3eb08     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3eb0c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3eb10     18 3A 63 FD |                 getqx   _33us_
3eb14     09 3A 57 F0 |                 shr     _33us_, #9              wc
3eb18     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3eb1c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3eb20     18 3C 63 FD |                 getqx   _txn_err_
3eb24     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3eb28     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3eb2c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3eb30     18 3E 63 FD |                 getqx   _500us_
3eb34     09 3E 57 F0 |                 shr     _500us_, #9             wc
3eb38     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3eb3c     01 00 00 FF 
3eb40     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3eb44     18 40 63 FD |                 getqx   _txn_ok_ls_
3eb48     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3eb4c     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3eb50     01 00 00 FF 
3eb54     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3eb58     18 42 63 FD |                 getqx   _txn_ok_fs_
3eb5c     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3eb60     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3eb64     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3eb68     05 00 00 FF 
3eb6c     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3eb70     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3eb74     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3eb78     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3eb7c     1C 00 00 FF 
3eb80     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3eb84     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3eb88     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3eb8c     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3eb90     00 00 00 FF 
3eb94     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3eb98     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3eb9c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3eba0     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3eba4     04 00 00 FF 
3eba8     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3ebac     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3ebb0     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3ebb4     8D 5B 00 FF 
3ebb8     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3ebbc     18 4C 63 FD |                 getqx   _preamble_wait_
3ebc0     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3ebc4     01 00 00 FF 
3ebc8     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3ebcc     18 2C 63 FD |                 getqx   _var_64_lower_
3ebd0     19 2E 63 FD |                 getqy   _var_64_upper_
3ebd4     28 2C 63 FD |                 setq    _var_64_lower_
3ebd8     01 00 00 FF 
3ebdc     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3ebe0     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3ebe4     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3ebe8     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3ebec     FF FF 7F FF 
3ebf0     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3ebf4     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3ebf8     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3ebfc     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3ec00     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3ec04     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3ec08     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3ec0c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3ec10     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3ec14     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3ec18     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3ec1c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3ec20     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3ec24     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3ec28     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3ec2c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3ec30     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3ec34     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3ec38     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3ec3c     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3ec40     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3ec44     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3ec48     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3ec4c     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3ec50     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3ec54     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3ec58     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3ec5c                 | '        _ret_   mov     _1sec_, save_sysclk
3ec5c                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3ec5c                 | '                ret
3ec5c                 | {
3ec5c                 | }
3ec5c                 | 
3ec5c                 | '------------------------------------------------------------------------------
3ec5c                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3ec5c                 | ' one. If it is, start the task progression that will configure the device for
3ec5c                 | ' use.
3ec5c                 | '------------------------------------------------------------------------------
3ec5c                 | ' On entry:
3ec5c                 | '   hconfig_base - start address of the cached config descriptor chain.
3ec5c                 | ' On exit:
3ec5c                 | '------------------------------------------------------------------------------
3ec5c                 | hparse_con_desc
3ec5c     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3ec60     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3ec64     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3ec68     4E 70 FF F9 |                 movbyts htmp,#%%1032
3ec6c     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3ec70                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3ec70                 | 
3ec70     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3ec74     6E ED 03 F1 |                 add     pa, hconfig_base
3ec78     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3ec7c                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3ec7c                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3ec7c                 | ' that defines a keyboard and/or mouse.
3ec7c     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3ec80                 | .next_intf
3ec80     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3ec84     B8 01 90 3D |         if_ae   jmp     #hset_config
3ec88     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ec8c     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ec90     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ec94     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ec98     0C 00 90 AD |         if_z    jmp     #.intf
3ec9c     80 71 C7 FA |                 rdbyte  htmp, ptrb
3eca0     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3eca4     D8 FF 9F FD |                 jmp     #.next_intf
3eca8                 | .intf
3eca8     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3ecac     00 90 07 F6 |                 mov     hpar3, #0
3ecb0     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3ecb4     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3ecb8     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3ecbc     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3ecc0                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3ecc0                 | 
3ecc0                 | .endp
3ecc0     80 71 C7 FA |                 rdbyte  htmp, ptrb
3ecc4     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3ecc8     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3eccc     78 00 90 3D |         if_ae   jmp     #.get_device
3ecd0     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3ecd4     75 F3 03 F1 |                 add     ptrb, hnext_desc
3ecd8     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3ecdc     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3ece0     64 00 90 AD |         if_z    jmp     #.get_device
3ece4     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3ece8     04 00 90 AD |         if_z    jmp     #.get_ep
3ecec     D0 FF 9F FD |                 jmp     #.endp
3ecf0                 | .get_ep
3ecf0     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3ecf4     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3ecf8     0F 86 67 F0 |                 shl     hr1, #8 + 7
3ecfc     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3ed00     3F 00 00 FF 
3ed04     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3ed08     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3ed0c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3ed10     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3ed14     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ed18     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3ed1c     A0 FF 9F FD |                 jmp     #.endp
3ed20                 | .in_ep
3ed20     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3ed24     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3ed28                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3ed28     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3ed2c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3ed30     8C FF 9F FD |                 jmp     #.endp
3ed34                 | .out_ep
3ed34     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3ed38     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3ed3c                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3ed3c     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3ed40     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3ed44     78 FF 9F FD |                 jmp     #.endp
3ed48                 | 
3ed48                 | .get_device
3ed48     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3ed4c     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3ed50     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3ed54     64 00 90 AD |         if_z    jmp     #.gamepad
3ed58     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3ed5c     A8 00 90 AD |         if_z    jmp     #.hub
3ed60     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3ed64     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3ed68                 |  '               cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ed68     00 E6 0E F2 |            cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ed6c     4C 00 90 AD |         if_z    jmp     #.gamepad
3ed70     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3ed74     08 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3ed78                 | .keyboard
3ed78     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3ed7c                 |         if HAVE_MOUSE
3ed7c     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3ed80                 |         else
3ed80                 |         end
3ed80     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3ed84     F8 FE 9F 5D |         if_nz   jmp     #.next_intf
3ed88     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3ed8c     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3ed90     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3ed94     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3ed98                 |                 'debug(udec(kb_intf_num))
3ed98                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3ed98     E4 FE 9F FD |                 jmp     #.next_intf
3ed9c                 | if HAVE_MOUSE
3ed9c                 | .mouse
3ed9c     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3eda0     DC FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3eda4     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3eda8     D4 FE 9F 5D |         if_nz   jmp     #.next_intf
3edac     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3edb0                 |                 'getbyte ms_interval, hr2, #3
3edb0     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3edb4     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3edb8                 |                 'debug(udec(kb_intf_num))
3edb8                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3edb8     C4 FE 9F FD |                 jmp     #.next_intf
3edbc                 | end
3edbc                 | .gamepad
3edbc     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3edc0     C7 71 63 F5 |                 xor     htmp, hpar2
3edc4     3F 00 00 FF 
3edc8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3edcc     B0 FE 9F AD |         if_z    jmp     #.next_intf
3edd0                 |         if HAVE_MOUSE
3edd0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3edd4     C7 71 63 F5 |                 xor     htmp, hpar2
3edd8     3F 00 00 FF 
3eddc     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ede0     9C FE 9F AD |         if_z    jmp     #.next_intf
3ede4                 |         end
3ede4     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3ede8     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3edec     90 FE 9F 5D |         if_nz   jmp     #.next_intf
3edf0                 | 
3edf0     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3edf4     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3edf8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3edfc     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3ee00     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3ee04                 |                 'debug(udec(gp_intf_num))
3ee04                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3ee04     78 FE 9F FD |                 jmp     #.next_intf
3ee08                 | .hub
3ee08     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3ee0c     70 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee10     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3ee14     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3ee18     64 FE 9F 5D |         if_nz   jmp     #.next_intf
3ee1c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3ee20     5C FE 9F 5D |         if_nz   jmp     #.next_intf
3ee24     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3ee28     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ee2c     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3ee30     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ee34     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3ee38     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3ee3c                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3ee3c     40 FE 9F FD |                 jmp     #.next_intf
3ee40                 | 
3ee40                 | '------------------------------------------------------------------------------
3ee40                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3ee40                 | ' it according to its function, or functions. In the case of this boot protocol
3ee40                 | ' keyboard/mouse class driver:
3ee40                 | ' - SetConfiguration(config_num)
3ee40                 | ' - SetProtocol(boot)
3ee40                 | ' - SetIdle(indefinite)
3ee40                 | ' - Enter the device interrupt IN polling task stage.
3ee40                 | '------------------------------------------------------------------------------
3ee40                 | ' On entry:
3ee40                 | ' On exit:
3ee40                 | '------------------------------------------------------------------------------
3ee40                 | hset_config
3ee40                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3ee40                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3ee40     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3ee44     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3ee48     00 00 0C F2 |                 cmp     0-0, #0                 wz
3ee4c     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3ee50                 |         if HAVE_MOUSE
3ee50     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3ee54                 |         end
3ee54     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3ee58     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3ee5c                 | .set_config
3ee5c     6C 0E D0 FE |                 loc     ptra, #set_config
3ee60     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3ee64     6E ED 03 F1 |                 add     pa, hconfig_base
3ee68     F6 8D C3 FA |                 rdbyte  hpar1, pa
3ee6c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3ee70     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3ee74     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3ee78     A0 02 A0 FD |                 call    #control_write
3ee7c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ee80     2D 00 64 5D |         if_nz   ret
3ee84                 | .kbd_config
3ee84     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3ee88     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3ee8c                 | 
3ee8c     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3ee90     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ee94     3F 00 00 FF 
3ee98     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ee9c     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3eea0                 | 
3eea0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3eea4     34 0E D0 FE |                 loc     ptra, #set_protocol
3eea8     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3eeac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3eeb0     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3eeb4     A0 02 A0 FD |                 call    #control_write
3eeb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eebc     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3eec0     E4 02 90 5D |         if_nz   jmp     #.notify_client
3eec4     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3eec8     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3eecc     30 03 B0 FD |                 call    #hset_idle
3eed0                 |                 'cmp     retval, #PID_ACK        wz
3eed0                 |         'if_nz   mov     hkbd_ep_addr, #0
3eed0                 |         'if_nz   jmp     #.notify_client
3eed0     A8 99 02 F6 |                 mov     hctwait, _2ms_
3eed4     EF 02 A0 FD |                 call    #poll_waitx
3eed8     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3eedc     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3eee0     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3eee4     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3eee8     2C 03 B0 FD |                 call    #hset_kbdled_report
3eeec     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3eef0     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3eef4     B0 02 90 5D |         if_nz   jmp     #.notify_client
3eef8     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3eefc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3ef00     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ef04     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3ef08     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3ef0c     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3ef10     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3ef14     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3ef18     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3ef1c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3ef20     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3ef24                 |         if !!HAVE_MOUSE
3ef24                 |         end
3ef24                 | 
3ef24                 | .mouse_config
3ef24                 | if HAVE_MOUSE
3ef24     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3ef28     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ef2c     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3ef30     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3ef34     3F 00 00 FF 
3ef38     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3ef3c     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3ef40                 | 
3ef40                 |                 debug("mouse passed addr check")
3ef40                 | 
3ef40     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3ef44     00 00 80 FF 
3ef48     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3ef4c     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3ef50     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ef54     55 02 A0 FD |                 call    #control_read
3ef58     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef5c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ef60     44 02 90 5D |         if_nz   jmp     #.notify_client
3ef64     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ef68     56 01 00 F6 |                 mov     0-0, total_data
3ef6c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ef70                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3ef70                 | 
3ef70     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3ef74     64 0D D0 FE |                 loc     ptra, #set_protocol
3ef78     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3ef7c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3ef80     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3ef84     A0 02 A0 FD |                 call    #control_write
3ef88     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ef8c     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3ef90     14 02 90 5D |         if_nz   jmp     #.notify_client
3ef94                 |                 debug("mouse passed SetProtocol")
3ef94     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3ef98     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3ef9c     60 02 B0 FD |                 call    #hset_idle
3efa0                 |                 'cmp     retval, #PID_ACK        wz
3efa0                 |         'if_nz   mov     hmouse_ep_addr, #0
3efa0                 |         'if_nz   jmp     #.notify_client
3efa0                 |                 debug("mouse passed SetIdle")
3efa0     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3efa4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3efa8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3efac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3efb0     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3efb4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3efb8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3efbc     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3efc0     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3efc4     3F 00 00 FF 
3efc8     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3efcc     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3efd0     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3efd4     D0 01 90 FD |                 jmp     #.notify_client
3efd8                 | end
3efd8                 | .gamepad_config
3efd8                 | if _HAVE_GAMEPAD
3efd8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3efdc     00 00 0C F2 |                 cmp     0-0, #0                 wz
3efe0     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3efe4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3efe8     00 70 03 F6 |                 mov     htmp, 0-0
3efec     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3eff0     3F 00 00 FF 
3eff4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3eff8     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3effc                 | 
3effc     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f000     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f004     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f008     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f00c     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3f010     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3f014     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3f018     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3f01c     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3f020     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3f024     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3f028     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3f02c     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3f030     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3f034                 | 
3f034                 |                 if EMUPAD_MAX_PLAYER > 0
3f034                 |                 
3f034                 | .rule_loop           
3f034                 |                 end
3f034                 | 
3f034     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3f038     5C 00 90 AD |         if_e    jmp     #.xinput
3f03c     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3f040     00 70 03 F6 |                 mov     htmp,0-0
3f044     01 A6 02 FF 
3f048     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3f04c     7C 00 90 AD |         if_e    jmp     #.ps3
3f050                 | 
3f050     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3f054     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3f058     00 00 80 5F 
3f05c     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3f060     03 00 80 AF 
3f064     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3f068     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3f06c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f070     55 02 A0 FD |                 call    #control_read
3f074     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f078     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f07c     00 00 04 56 |         if_nz   mov     0-0, #0
3f080     24 01 90 5D |         if_nz   jmp     #.notify_client
3f084     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3f088     56 01 00 F6 |                 mov     0-0, total_data
3f08c     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f090                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3f090                 | 
3f090     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3f094     10 01 90 FD |                 jmp     #.notify_client
3f098                 | .xinput
3f098     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3f09c     2D EF 03 F6 |                 mov     pb,hdev_port
3f0a0     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3f0a4     03 EE 27 F3 |                 fle     pb,#3
3f0a8     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3f0ac     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3f0b0                 | 
3f0b0     03 B0 06 F6 |                 mov     pkt_data, #3
3f0b4     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3f0b8     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3f0bc     5A 00 A0 FD |                 call    #txn_out
3f0c0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3f0c4                 | 
3f0c4     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3f0c8     DC 00 90 FD |                 jmp     #.notify_client
3f0cc                 | .ps3
3f0cc     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3f0d0     2D EF 03 F6 |                 mov     pb,hdev_port
3f0d4     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3f0d8     04 EE 27 F3 |                 fle     pb,#4
3f0dc     F7 EF C3 F9 |                 decod   pb
3f0e0     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3f0e4                 | 
3f0e4     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f0e8     00 0C D0 FE |                 loc     ptra, #set_report
3f0ec     01 00 80 FF 
3f0f0     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3f0f4     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f0f8     03 61 5C FC |                 wrword  #48, ptra[wLength]
3f0fc     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3f100     A0 02 A0 FD |                 call    #control_write
3f104                 | 
3f104     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3f108     E0 0B D0 FE |                 loc     ptra, #set_report
3f10c     01 00 80 FF 
3f110     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3f114     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f118     03 09 5C FC |                 wrword  #4, ptra[wLength]
3f11c     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3f120     A0 02 A0 FD |                 call    #control_write
3f124     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3f128     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3f12c     00 00 04 56 |         if_nz   mov     0-0, #0
3f130     74 00 90 5D |         if_nz   jmp     #.notify_client
3f134                 | 
3f134     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3f138     6C 00 90 FD |                 jmp     #.notify_client
3f13c                 | end
3f13c                 | 
3f13c                 | .hub_config
3f13c     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3f140     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3f144     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3f148     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3f14c     3F 00 00 FF 
3f150     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3f154     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3f158                 | 
3f158     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3f15c     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3f160     26 EF 03 F6 |                 mov     pb, hub_descr_p
3f164     55 02 A0 FD |                 call    #control_read
3f168     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f16c     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3f170     34 00 90 5D |         if_nz   jmp     #.notify_client
3f174                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3f174                 | 
3f174     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3f178     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3f17c     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3f180                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3f180                 | .pwr_loop
3f180     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3f184     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3f188     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3f18c     A0 02 A0 FD |                 call    #control_write
3f190     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3f194                 | 
3f194     B1 99 02 F6 |                 mov     hctwait, _500ms_
3f198     B0 99 02 F1 |                 add     hctwait, _100ms_
3f19c     EF 02 A0 FD |                 call    #poll_waitx
3f1a0                 | 
3f1a0     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3f1a4     00 00 90 FD |                 jmp     #.notify_client
3f1a8                 | 
3f1a8                 | .notify_client
3f1a8     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3f1ac     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3f1b0                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3f1b0                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3f1b0     2D 00 64 FD |                 ret
3f1b4                 | 
3f1b4                 | '------------------------------------------------------------------------------
3f1b4                 | ' Initialize the keyboard/mouse data area to start-up values.
3f1b4                 | '------------------------------------------------------------------------------
3f1b4                 | ' On entry:
3f1b4                 | ' On exit:
3f1b4                 | '------------------------------------------------------------------------------
3f1b4                 | init_kbdm_data
3f1b4     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3f1b8     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3f1bc                 | 
3f1bc     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3f1c0     2B ED 03 F6 |                 mov     pa, cache_end_p
3f1c4                 | .loop
3f1c4     61 01 4C FC |                 wrbyte  #0, ptra++
3f1c8     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3f1cc     F4 FF 9F CD |         if_b    jmp     #.loop
3f1d0                 |         
3f1d0                 |         if EMUPAD_MAX_PLAYER > 0
3f1d0                 |         end
3f1d0                 | 
3f1d0                 | 
3f1d0     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3f1d4                 | .regloop
3f1d4     00 EC 8F F9 |                 altd    pa
3f1d8     00 00 04 F6 |                 mov     0-0, #0
3f1dc     01 EC 07 F1 |                 add     pa, #1
3f1e0     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3f1e4     EC FF 9F 5D |         if_nz   jmp     #.regloop
3f1e8                 | 
3f1e8     E1 E1 61 FF 
3f1ec     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3f1f0     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3f1f4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3f1f8     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3f1fc                 | 
3f1fc     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3f200                 | 
3f200                 | '------------------------------------------------------------------------------
3f200                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3f200                 | ' function.
3f200                 | '------------------------------------------------------------------------------
3f200                 | ' On entry:
3f200                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3f200                 | '   hpar2 - index number of the target interface.
3f200                 | ' On exit:
3f200                 | '------------------------------------------------------------------------------
3f200                 | hset_idle
3f200     A8 99 02 F6 |                 mov     hctwait, _2ms_
3f204     EF 02 A0 FD |                 call    #poll_waitx
3f208     D8 0A D0 FE |                 loc     ptra, #set_idle
3f20c     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3f210     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3f214     A0 02 80 FD |                 jmp     #control_write
3f218                 | 
3f218                 | '------------------------------------------------------------------------------
3f218                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3f218                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3f218                 | '------------------------------------------------------------------------------
3f218                 | ' On entry:
3f218                 | '   ep_addr_pid - device address and enpoint for the request.
3f218                 | ' On exit:
3f218                 | '   retval - transaction result.
3f218                 | '------------------------------------------------------------------------------
3f218                 | hset_kbdled_report
3f218     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3f21c     CC 0A D0 FE |                 loc     ptra, #set_report
3f220     01 00 80 FF 
3f224     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3f228     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3f22c     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3f230     27 EF 03 F6 |                 mov     pb, urx_buff_p
3f234     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3f238     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3f23c                 | 
3f23c                 | '------------------------------------------------------------------------------
3f23c                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3f23c                 | '------------------------------------------------------------------------------
3f23c                 | ' On entry:
3f23c                 | ' On exit:
3f23c                 | '------------------------------------------------------------------------------
3f23c                 | hget_kbd_in_report
3f23c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3f240     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f244     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3f248     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3f24c     CF 02 A0 FD |                 call    #do_int_in
3f250     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f254     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f258                 | 
3f258     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f25c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f260                 | 
3f260     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3f264     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f268     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3f26c     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3f270                 | 
3f270     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3f274     18 00 B0 FD |                 call    #hkbd_compare
3f278                 |         if EMUPAD_MAX_PLAYER > 0
3f278                 |         end
3f278                 | 
3f278                 | .led_check
3f278     3B 71 03 F6 |                 mov     htmp, kb_led_states
3f27c     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3f280     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3f284     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3f288     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3f28c     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3f290                 | 
3f290                 | '------------------------------------------------------------------------------
3f290                 | ' Compare current and previous keyboard data buffers for keypress changes.
3f290                 | '------------------------------------------------------------------------------
3f290                 | hkbd_compare
3f290     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f294     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3f298     61 73 07 FB |                 rdlong  htmp1, ptra++
3f29c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f2a0     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3f2a4     61 73 07 FB |                 rdlong  htmp1, ptra++
3f2a8     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3f2ac     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3f2b0     2D 00 64 AD |         if_z    ret
3f2b4                 | 
3f2b4     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3f2b8                 | 
3f2b8                 |                 ' Handle modifiers
3f2b8     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3f2bc     00 87 C7 FA |                 rdbyte  hr1, ptra
3f2c0     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3f2c4     63 86 63 FD |                 mergew  hr1
3f2c8     08 EC 07 F6 |                 mov     pa,#8
3f2cc                 | .modloop
3f2cc     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3f2d0     E8 8C 07 F6 |                 mov     hpar1,#$E8
3f2d4     F6 8D 83 F1 |                 sub     hpar1,pa
3f2d8     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3f2dc     FB ED 6F FB |                 djnz    pa,#.modloop
3f2e0                 | 
3f2e0     6F E0 75 FD | .release        modc    _set    wc
3f2e4                 |                 'alts    hdev_port, #hid_report_p
3f2e4                 |                 'mov     ptra, hid_report_p
3f2e4     02 F0 07 F1 |                 add     ptra, #2
3f2e8     06 EC 07 F6 |                 mov     pa, #6
3f2ec     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3f2f0     20 00 90 AD |         if_z    jmp     #.rl3
3f2f4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f2f8     02 F2 07 F1 |                 add     ptrb, #2
3f2fc     06 EE 07 F6 |                 mov     pb, #6
3f300     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3f304     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f308     08 00 90 AD |         if_z    jmp     #.rl3
3f30c     FC EF 6F FB |                 djnz    pb, #.rl2
3f310     68 00 B0 FD |                 call    #hkbd_translate
3f314     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3f318                 | 
3f318     00 90 07 F6 |                 mov     hpar3, #0
3f31c     1F 90 27 F4 |                 bith    hpar3, #31
3f320                 | 
3f320     6F 00 74 FD | .press          modc    _clr    wc
3f324     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f328     02 F0 07 F1 |                 add     ptra, #2
3f32c     06 EC 07 F6 |                 mov     pa, #6
3f330     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3f334     20 00 90 AD |         if_z    jmp     #.pl3
3f338     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3f33c     02 F2 07 F1 |                 add     ptrb, #2
3f340     06 EE 07 F6 |                 mov     pb, #6
3f344     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3f348     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3f34c     08 00 90 AD |         if_z    jmp     #.pl3
3f350     FC EF 6F FB |                 djnz    pb, #.pl2
3f354     24 00 B0 FD |                 call    #hkbd_translate
3f358     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3f35c                 | 
3f35c     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3f360     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3f364     28 02 64 FD |                 setq #1
3f368     61 73 07 FB |                 rdlong  htmp1, ptra++
3f36c     28 02 64 FD |                 setq #1
3f370     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3f374     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3f378                 | 
3f378     2D 00 64 FD |                 ret
3f37c                 | 
3f37c                 | '------------------------------------------------------------------------------
3f37c                 | ' Translate keyboard scancode to ASCII
3f37c                 | '------------------------------------------------------------------------------
3f37c                 | ' On entry:
3f37c                 | '   hpar1 - scancode
3f37c                 | '   hpar2 - key modifiers state
3f37c                 | '       c - pressed (0) or released (1) flag
3f37c                 | ' On exit:
3f37c                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3f37c                 | '               30..17 = unused
3f37c                 | '                   18 = scroll-lock state 
3f37c                 | '                   17 = caps-lock state
3f37c                 | '                   16 = num-lock state 
3f37c                 | '                15..8 = key modifiers state
3f37c                 | '                 7..0 = scancode
3f37c                 | '------------------------------------------------------------------------------
3f37c                 | hkbd_translate
3f37c     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3f380     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3f384     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3f388     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3f38c     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3f390     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3f394                 | 
3f394                 |         if EMUPAD_MAX_PLAYER > 0
3f394                 | 
3f394                 |         if EMUPAD_BT0_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT1_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT2_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT3_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT4_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT5_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT6_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT7_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT8_BIT >= 0
3f394                 |         end
3f394                 |         if EMUPAD_BT9_BIT >= 0
3f394                 |         end
3f394                 | 
3f394                 |         end
3f394     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3f398     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3f39c     1F 8C 47 F4 |                 bitc    hpar1, #31
3f3a0                 |         if KEYQUEUE_SIZE > 0
3f3a0     C4 09 B0 FE |                 loc pb,#keyq_head
3f3a4     F7 71 E3 FA |                 rdword htmp,pb
3f3a8     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3f3ac     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3f3b0     B8 75 03 F6 |                 mov htmp2,htmp
3f3b4     04 74 07 FA |                 mul htmp2,#4
3f3b8     F7 75 03 F1 |                 add htmp2,pb
3f3bc     02 74 07 F1 |                 add htmp2,#2
3f3c0     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3f3c4     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3f3c8     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3f3cc     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3f3d0                 |         end
3f3d0     2D 00 7C FD |                 ret wcz
3f3d4                 | 
3f3d4                 | if HAVE_MOUSE
3f3d4                 | '------------------------------------------------------------------------------
3f3d4                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3f3d4                 | '------------------------------------------------------------------------------
3f3d4                 | ' On entry:
3f3d4                 | ' On exit:
3f3d4                 | '------------------------------------------------------------------------------
3f3d4                 | hget_mouse_in_report
3f3d4     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3f3d8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f3dc     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3f3e0     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3f3e4     CF 02 A0 FD |                 call    #do_int_in
3f3e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f3ec     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f3f0                 | 
3f3f0     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f3f4     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f3f8                 | 
3f3f8     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3f3fc     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f400     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3f404     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3f408                 | 
3f408     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3f40c     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3f410     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3f414     01 90 87 31 |         if_ae   sub     hpar3, #1
3f418                 | 
3f418     40 09 90 FE |                 loc     pa, #mouse_limits
3f41c     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3f420                 | 
3f420                 |                 ' load xacc,yacc,zacc
3f420     28 04 64 FD |                 setq    #3-1
3f424     80 87 07 FB |                 rdlong  hr1,ptrb
3f428                 |                 ' load limits and outptr
3f428     28 04 64 FD |                 setq    #3-1
3f42c     F6 73 03 FB |                 rdlong  htmp1,pa
3f430                 | 
3f430     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3f434     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3f438     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3f43c     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3f440     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3f444     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3f448     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3f44c     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3f450                 |               
3f450                 | 
3f450     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3f454     07 70 67 F7 |                 signx   htmp, #7
3f458     B8 87 03 F1 |                 add     hr1,htmp
3f45c     00 72 0F F2 |                 cmp     htmp1,#0 wz
3f460     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3f464     00 86 47 53 |         if_ne   fges    hr1,#0
3f468                 | 
3f468     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3f46c     07 70 67 F7 |                 signx   htmp, #7
3f470     B8 89 03 F1 |                 add     hr2,htmp
3f474     00 74 0F F2 |                 cmp     htmp2,#0 wz
3f478     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3f47c     00 88 47 53 |         if_ne   fges    hr2,#0
3f480                 |                 
3f480                 | 
3f480     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3f484     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3f488     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3f48c     B8 8B 03 A1 |         if_z    add     hr3,htmp
3f490                 | 
3f490     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3f494     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3f498                 | 
3f498                 |                 ' write back accumulators
3f498     28 04 64 FD |                 setq    #3-1
3f49c     80 87 67 FC |                 wrlong  hr1,ptrb
3f4a0                 |                 ' if outptr set, write X/Y words
3f4a0     00 76 0F F2 |                 cmp htmp3,#0                    wz
3f4a4     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3f4a8     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3f4ac     2D 00 64 FD |                 ret
3f4b0                 | end
3f4b0                 | 
3f4b0                 | '------------------------------------------------------------------------------
3f4b0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3f4b0                 | '------------------------------------------------------------------------------
3f4b0                 | ' On entry:
3f4b0                 | ' On exit:
3f4b0                 | '------------------------------------------------------------------------------
3f4b0                 | if _HAVE_GAMEPAD
3f4b0                 | hget_gp_in_report
3f4b0     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3f4b4     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3f4b8                 | 
3f4b8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3f4bc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3f4c0     00 90 E3 F8 |                 getbyte hpar3
3f4c4     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3f4c8     CF 02 A0 FD |                 call    #do_int_in
3f4cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3f4d0     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3f4d4                 | 
3f4d4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3f4d8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3f4dc                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3f4dc                 | 
3f4dc     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3f4e0     00 70 E3 F8 |                 getbyte htmp                            ' |
3f4e4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3f4e8     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3f4ec     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3f4f0     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3f4f4     B8 01 C0 F8 |                 setbyte htmp                            ' |
3f4f8                 | 
3f4f8                 | ' Note: the following code compares the current and previous reports
3f4f8                 | ' and process the data if there are changes to ease the debug output.
3f4f8                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3f4f8                 | ' gpPreReport buffer.
3f4f8                 | 
3f4f8                 |                 ' ----- start of block to remove
3f4f8                 |                 {
3f4f8                 |                 }
3f4f8                 |                 ' ----- end of block to remove
3f4f8     F4 04 90 FE |                 loc pa,#hpad_translate
3f4fc     2A EC 63 FD |                 push pa
3f500                 | 
3f500                 |                 ' FALL THROUGH !!!!
3f500                 | 
3f500                 | '------------------------------------------------------------------------------
3f500                 | ' Decode controller report
3f500                 | '------------------------------------------------------------------------------
3f500                 | hid_decode
3f500                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3f500     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3f504     00 04 00 FF 
3f508     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3f50c                 | 
3f50c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3f510                 | 
3f510     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3f514     00 2A E3 F8 |                 getbyte hidr_type
3f518     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3f51c     34 02 90 AD |         if_z    jmp     #hpad_xinput
3f520     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3f524     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3f528     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3f52c     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3f530     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3f534                 |                 
3f534                 | 
3f534                 | '------------------------------------------------------------------------------
3f534                 | ' Handle HID controller (or mouse now
3f534                 | ' On entry:
3f534                 | '   ptrb - controller report
3f534                 | '------------------------------------------------------------------------------
3f534                 | hpad_hid
3f534     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3f538     F7 F1 03 F6 |                 mov     ptra, pb
3f53c     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3f540     00 EC 03 F6 |                 mov     pa, 0-0
3f544                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3f544     19 2A 3B FF 
3f548     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3f54c                 | 
3f54c                 | .next
3f54c     00 EC 5F F2 |                 cmps    pa, #0      wcz
3f550     2D 00 7C ED |         if_be   ret     wcz
3f554                 | 
3f554     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3f558     01 EC 87 F1 |                 sub     pa, #1
3f55c     00 8E 07 F6 |                 mov     hpar2, #0
3f560                 | 
3f560     C6 71 03 F6 |                 mov     htmp, hpar1
3f564     03 70 07 F5 |                 and     htmp, #$03
3f568     01 70 0F F2 |                 cmp     htmp, #1    wz
3f56c     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3f570     07 8E 67 A7 |         if_z    signx   hpar2,#7
3f574     01 EC 87 A1 |         if_z    sub     pa, #1
3f578     02 70 0F F2 |                 cmp     htmp, #2    wz
3f57c     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3f580     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3f584     02 EC 87 A1 |         if_z    sub     pa, #2
3f588     03 70 0F F2 |                 cmp     htmp, #3    wz
3f58c     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3f590     04 EC 87 A1 |         if_z    sub     pa, #4
3f594                 | 
3f594     FC 8C 07 F5 |                 and     hpar1, #$FC
3f598                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3f598                 | 
3f598     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3f59c     0C 01 90 AD |         if_z    jmp     #.report_id
3f5a0     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3f5a4     24 01 90 AD |         if_z    jmp     #.usage_page
3f5a8     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3f5ac     2C 01 90 AD |         if_z    jmp     #.usage
3f5b0     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3f5b4     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3f5b8     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3f5bc     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3f5c0     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3f5c4     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3f5c8     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3f5cc     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3f5d0     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3f5d4     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3f5d8     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3f5dc     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3f5e0     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3f5e4     64 FF 9F 5D |         if_nz   jmp     #.next
3f5e8                 | 
3f5e8     D8 1D A7 FB |                 tjf     hidr_state,#.next
3f5ec                 | 
3f5ec     03 8E 07 F5 |                 and     hpar2, #$03
3f5f0     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3f5f4     18 00 90 5D |         if_nz   jmp     #.skip
3f5f8                 | 
3f5f8     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3f5fc     20 00 90 AD |         if_z    jmp     #.axes
3f600     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3f604     5C 00 90 AD |         if_z    jmp     #.hats
3f608     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3f60c     70 00 90 AD |         if_z    jmp     #.buttons
3f610                 | .skip
3f610     8F 71 03 F6 |                 mov     htmp, hidr_size
3f614     90 71 03 FA |                 mul     htmp, hidr_count
3f618     B8 23 03 F1 |                 add     hidr_offset, htmp
3f61c     2C FF 9F FD |                 jmp     #.next
3f620                 | .axes
3f620                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3f620     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3f624     90 87 03 F6 |                 mov     hr1, hidr_count
3f628                 | .l1
3f628     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f62c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f630     04 03 B0 FD |                 call    #hpad_getbits
3f634     64 03 B0 FD |                 call    #hpad_normalize
3f638     06 84 1F F2 |                 cmp     hr0, #6         wcz
3f63c     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3f640     00 88 43 C8 |         if_b    getnib  hr2
3f644     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3f648     5F 01 20 C9 |         if_b    setword retval
3f64c     01 84 07 C1 |         if_b    add     hr0, #1
3f650     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3f654     F4 87 6F FB |                 djnz    hr1, #.l1
3f658                 | 
3f658     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3f65c     01 1C 07 F6 |                 mov     hidr_state, #1
3f660     E8 FE 9F FD |                 jmp     #.next
3f664                 | .hats
3f664                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3f664     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f668     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f66c     C8 02 B0 FD |                 call    #hpad_getbits
3f670     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3f674     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f678     01 1C 07 F6 |                 mov     hidr_state, #1
3f67c     90 FF 9F FD |                 jmp     #.skip
3f680                 | .buttons
3f680                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3f680     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3f684     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3f688     90 8F 03 FA |                 mul     hpar2, hidr_count
3f68c     A8 02 B0 FD |                 call    #hpad_getbits
3f690     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3f694     B8 BF 62 F0 |                 shl     retval, htmp
3f698     5F 17 43 F5 |                 or      hidr_buttons, retval
3f69c     90 71 03 F1 |                 add     htmp, hidr_count
3f6a0     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3f6a4     01 1C 07 F6 |                 mov     hidr_state, #1
3f6a8     64 FF 9F FD |                 jmp     #.skip
3f6ac                 | .report_id
3f6ac     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3f6b0     2D 00 7C 5D |         if_nz   ret     wcz
3f6b4     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f6b8     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3f6bc     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3f6c0     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3f6c4     01 F2 87 51 |         if_nz   sub     ptrb,#1
3f6c8     80 FE 9F FD |                 jmp     #.next
3f6cc                 | .usage_page
3f6cc     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3f6d0     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3f6d4     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3f6d8     70 FE 9F FD |                 jmp     #.next
3f6dc                 | .usage
3f6dc     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3f6e0     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3f6e4     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3f6e8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f6ec     5C FE 9F AD |         if_z    jmp     #.next
3f6f0     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3f6f4     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3f6f8     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3f6fc     4C FE 9F AD |         if_z    jmp     #.next
3f700     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3f704     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3f708     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3f70c     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3f710     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3f714     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3f718     10 00 90 AD |         if_z    jmp     #.usage_axis
3f71c     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3f720     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3f724     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3f728     20 FE 9F FD |                 jmp     #.next
3f72c                 | .usage_axis
3f72c     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3f730     18 FE 9F CD |         if_b    jmp     #.next
3f734     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3f738     C7 01 00 F8 |                 setnib  hpar2
3f73c                 | 
3f73c     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3f740     C7 8F C3 F9 |                 decod   hpar2
3f744     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3f748                 | 
3f748     01 24 07 F1 |                 add     hidr_usage_idx, #1
3f74c     02 1C 07 F6 |                 mov     hidr_state, #2
3f750     F8 FD 9F FD |                 jmp     #.next
3f754                 | 
3f754                 | '------------------------------------------------------------------------------
3f754                 | ' Handle XInput controller
3f754                 | ' On entry:
3f754                 | '   ptrb - controller report
3f754                 | '------------------------------------------------------------------------------
3f754                 | '   Default implementation translates the report to a pseudo-defacto hid
3f754                 | '   standard and jumps to hpad_translate for actions.
3f754                 | '   Implementors may take specific actions for this kind of controller.
3f754                 | '------------------------------------------------------------------------------
3f754                 | hpad_xinput
3f754     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3f758     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3f75c     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3f760     14 70 0F F2 |                 cmp     htmp, #$14      wz
3f764     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3f768                 | 
3f768                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f768                 | 
3f768     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3f76c     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3f770                 | 
3f770     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3f774     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3f778     5F BF 22 F6 |                 not     retval
3f77c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f780     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3f784     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3f788     5F BF 22 F6 |                 not     retval
3f78c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f790                 | 
3f790     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f794     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3f798     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f79c     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3f7a0     F8 01 B0 FD |                 call    #hpad_normalize
3f7a4     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3f7a8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3f7ac     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3f7b0     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3f7b4     E4 01 B0 FD |                 call    #hpad_normalize
3f7b8     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3f7bc                 | 
3f7bc     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f7c0     81 BF E6 FA |                 rdword  retval, ptrb[1]
3f7c4     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f7c8     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f7cc     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f7d0     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f7d4     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f7d8     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f7dc     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f7e0     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f7e4     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3f7e8     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f7ec     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3f7f0     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f7f4     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3f7f8     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f7fc     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3f800     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f804     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3f808     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f80c     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3f810     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f814     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3f818     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f81c                 | 
3f81c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f820     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3f824     7A BB 7A FF 
3f828     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3f82c     F9 FF 7F FF 
3f830     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3f834     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f838     00 70 43 F8 |                 getnib  htmp
3f83c     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f840                 | 
3f840     AC 01 90 FD |                 jmp     #hpad_translate
3f844                 | 
3f844                 | '------------------------------------------------------------------------------
3f844                 | ' Handle PS3 controller
3f844                 | ' On entry:
3f844                 | '   ptrb - controller report
3f844                 | '------------------------------------------------------------------------------
3f844                 | '   Default implementation translates the report to a pseudo-defacto hid
3f844                 | '   standard and jumps to hpad_translate for actions.
3f844                 | '   Implementors may take specific actions for this kind of controller.
3f844                 | '------------------------------------------------------------------------------
3f844                 | hpad_ps3
3f844     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3f848     01 70 0F F2 |                 cmp     htmp, #$01      wz
3f84c     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3f850                 | 
3f850                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3f850                 | 
3f850     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3f854     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3f858     40 01 B0 FD |                 call    #hpad_normalize
3f85c     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3f860     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3f864     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3f868     30 01 B0 FD |                 call    #hpad_normalize
3f86c     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3f870     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3f874     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3f878     20 01 B0 FD |                 call    #hpad_normalize
3f87c     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3f880     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3f884     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3f888     10 01 B0 FD |                 call    #hpad_normalize
3f88c     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3f890     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3f894     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3f898                 | 
3f898     08 8C 07 F6 |                 mov     hpar1, #8
3f89c     13 8E 07 F6 |                 mov     hpar2, #19
3f8a0     94 00 B0 FD |                 call    #hpad_getbits
3f8a4                 | 
3f8a4     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3f8a8     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3f8ac     00 16 47 F4 |                 bitc    hidr_buttons, #0
3f8b0     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3f8b4     01 16 47 F4 |                 bitc    hidr_buttons, #1
3f8b8     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3f8bc     02 16 47 F4 |                 bitc    hidr_buttons, #2
3f8c0     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3f8c4     03 16 47 F4 |                 bitc    hidr_buttons, #3
3f8c8     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3f8cc     04 16 47 F4 |                 bitc    hidr_buttons, #4
3f8d0     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3f8d4     05 16 47 F4 |                 bitc    hidr_buttons, #5
3f8d8     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3f8dc     06 16 47 F4 |                 bitc    hidr_buttons, #6
3f8e0     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3f8e4     07 16 47 F4 |                 bitc    hidr_buttons, #7
3f8e8     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3f8ec     08 16 47 F4 |                 bitc    hidr_buttons, #8
3f8f0     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3f8f4     09 16 47 F4 |                 bitc    hidr_buttons, #9
3f8f8     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3f8fc     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3f900     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3f904     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3f908     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3f90c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3f910                 | 
3f910     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3f914     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3f918     09 FA 79 FF 
3f91c     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3f920     FF FA 7F FF 
3f924     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3f928     B9 71 5F F9 |                 altgn   htmp, #htmp1
3f92c     00 70 43 F8 |                 getnib  htmp
3f930     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3f934                 | 
3f934     B8 00 90 FD |                 jmp     #hpad_translate
3f938                 | 
3f938                 | '------------------------------------------------------------------------------
3f938                 | ' Read bits from report data buffer
3f938                 | '------------------------------------------------------------------------------
3f938                 | ' On entry:
3f938                 | '   PTRB - report buffer
3f938                 | '   hpar1 - start bit
3f938                 | '   hpar2 - number of bits
3f938                 | ' On exit:
3f938                 | '   retval - bits
3f938                 | '------------------------------------------------------------------------------
3f938                 | hpad_getbits
3f938     C6 71 03 F6 |                 mov     htmp, hpar1
3f93c     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3f940     F9 71 03 F1 |                 add     htmp, ptrb
3f944     B8 BF 02 FB |                 rdlong  retval, htmp
3f948                 | 
3f948     C6 73 03 F6 |                 mov     htmp1, hpar1
3f94c     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3f950     B9 BF 42 F0 |                 shr     retval, htmp1
3f954                 | 
3f954     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3f958     10 00 90 1D |         if_a    jmp     #.l1
3f95c                 | 
3f95c     C7 8F C3 F9 |                 decod   hpar2
3f960     01 8E 87 F1 |                 sub     hpar2, #1
3f964     C7 BF 02 F5 |                 and     retval, hpar2
3f968     2D 00 64 FD |                 ret
3f96c                 | .l1
3f96c     FF 7F 00 FF 
3f970     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3f974     03 70 07 F1 |                 add     htmp, #3
3f978     B8 75 03 FB |                 rdlong  htmp2, htmp
3f97c     18 8E 87 F1 |                 sub     hpar2, #24
3f980     C7 8F C3 F9 |                 decod   hpar2
3f984     01 8E 87 F1 |                 sub     hpar2, #1
3f988     B9 75 43 F0 |                 shr     htmp2, htmp1
3f98c     C7 75 03 F5 |                 and     htmp2, hpar2
3f990     18 74 67 F0 |                 shl     htmp2, #24
3f994     BA BF 42 F5 |                 or      retval, htmp2
3f998     2D 00 64 FD |                 ret
3f99c                 | 
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | ' Normalize value to signed word (-32768 / 32767)
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | ' On entry:
3f99c                 | '   retval - value to normalize
3f99c                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3f99c                 | '   - or -
3f99c                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3f99c                 | '   hidr_size - value bits length
3f99c                 | ' On exit:
3f99c                 | '   retval - normalized value
3f99c                 | '------------------------------------------------------------------------------
3f99c                 | hpad_normalize
3f99c     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3f9a0     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3f9a4     2D 00 64 AD |         if_z    ret
3f9a8     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3f9ac     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3f9b0     0F 72 77 F7 |                 signx   htmp1, #15      wc
3f9b4     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3f9b8     00 BE 66 C7 |         if_c    signx   retval, #0-0
3f9bc     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3f9c0     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3f9c4     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3f9c8     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3f9cc     B8 71 53 F6 |                 abs     htmp            wc
3f9d0     1F BE 0E F4 |                 testb   retval, #31     wz
3f9d4     5F BF 42 F6 |                 abs     retval
3f9d8     B8 BF 12 FD |                 qdiv    retval, htmp
3f9dc     18 BE 62 FD |                 getqx   retval
3f9e0     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3f9e4     C0 FF 7F FF 
3f9e8     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3f9ec     2D 00 64 FD |                 ret
3f9f0                 | 
3f9f0                 | '------------------------------------------------------------------------------
3f9f0                 | ' Perform controller actions
3f9f0                 | ' On entry:
3f9f0                 | '    hidr_id        report id
3f9f0                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3f9f0                 | '                      X = hidr_axis+0, #0
3f9f0                 | '                      Y = hidr_axis+0, #1
3f9f0                 | '                      Z = hidr_axis+1, #0
3f9f0                 | '                     RX = hidr_axis+1, #1
3f9f0                 | '                     RY = hidr_axis+2, #0
3f9f0                 | '                     RZ = hidr_axis+2, #1
3f9f0                 | '    hidr_buttons   buttons state (bits 0 to 31)
3f9f0                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3f9f0                 | '
3f9f0                 | '                     -------3 -------2 -------1 -------0 byte
3f9f0                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3f9f0                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3f9f0                 | '                                zyx||| |||||||| ++++++++ n. buttons
3f9f0                 | '                                |||||| ||||++++--------- n. axes
3f9f0                 | '                                |||||| ++++------------- n. hats
3f9f0                 | '                                ++++++------------------ valid axes
3f9f0                 | '------------------------------------------------------------------------------
3f9f0                 | hpad_translate
3f9f0                 | 
3f9f0                 | 
3f9f0                 |         if HAVE_HIDPAD
3f9f0     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3f9f4     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3f9f8     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3f9fc     01 70 E7 F2 |                 cmpsub  htmp,#1
3fa00     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3fa04     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3fa08     2D 00 7C 3D |         if_ae   ret     wcz
3fa0c     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3fa10     B8 F3 03 F1 |                 add     ptrb,htmp
3fa14     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3fa18     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3fa1c     28 0C 64 FD |                 setq    #7-1
3fa20     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3fa24                 |         end
3fa24                 | 
3fa24                 | 
3fa24                 |         if EMUPAD_MAX_PLAYER > 0
3fa24                 | .emupad_no_hat
3fa24                 |         if EMUPAD_BT0_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT1_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT2_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT3_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT4_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT5_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT6_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT7_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT8_BIT >= 0
3fa24                 |         end
3fa24                 |         if EMUPAD_BT9_BIT >= 0
3fa24                 |         end
3fa24                 | .emupad_slot_over
3fa24                 |         end
3fa24                 | 
3fa24                 |         if 0
3fa24                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3fa24                 | 
3fa24                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3fa24                 | 
3fa24                 |         end
3fa24     2D 00 64 FD |                 ret
3fa28                 | end
3fa28                 | 
3fa28                 | if EMUPAD_MAX_PLAYER > 0
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' Clear EmuPad state
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | emupad_reset
3fa28                 | 
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' Get EmuPad Player number for current device (into retval)
3fa28                 | ' Z flag is also set if current device is valid
3fa28                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | emupad_getnum
3fa28                 | .loop
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | emupad_discon
3fa28                 | .loop         
3fa28                 |         
3fa28                 |         ' FALL THROUGH!!!
3fa28                 | 
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' Update EmuPad reports (all of them...)
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | emupad_write_reports
3fa28                 | .devloop
3fa28                 | 
3fa28                 | end
3fa28                 | 
3fa28                 | 
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | ' On entry:
3fa28                 | ' On exit:
3fa28                 | '------------------------------------------------------------------------------
3fa28                 | hget_hub_status
3fa28     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3fa2c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3fa30     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3fa34     01 90 2F F9 |                 setword hpar3, #1, #1
3fa38     CF 02 A0 FD |                 call    #do_int_in
3fa3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fa40     0C 00 90 AD |         if_z    jmp     #.data
3fa44     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3fa48     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3fa4c     2D 00 64 FD |                 ret
3fa50                 | .data
3fa50     00 90 0F F2 |                 cmp     hpar3, #0               wz
3fa54     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3fa58                 | 
3fa58     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3fa5c     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3fa60     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3fa64     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3fa68                 |                 debug(ubin_long(hub_status_chg))
3fa68                 | 
3fa68     01 5A 06 F6 |                 mov     hdev_port, #1
3fa6c                 | .loop
3fa6c     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3fa70     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3fa74     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3fa78     F0 FF 9F 3D |         if_nc   jmp     #.loop
3fa7c     2D 00 64 FD |                 ret
3fa80                 | 
3fa80                 | hub_port_handler
3fa80     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3fa84     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fa88     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fa8c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fa90     55 02 A0 FD |                 call    #control_read
3fa94     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3fa98                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fa98                 | 
3fa98     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3fa9c     50 01 90 5D |         if_x0   jmp     #.other
3faa0     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3faa4     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3faa8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3faac     A0 02 A0 FD |                 call    #control_write
3fab0     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3fab4     7C 01 90 5D |         if_x0   jmp     #.disconnect
3fab8     B0 99 02 F6 |                 mov     hctwait, _100ms_
3fabc     EF 02 A0 FD |                 call    #poll_waitx
3fac0                 | 
3fac0     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3fac4     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3fac8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3facc     A0 02 A0 FD |                 call    #control_write
3fad0                 | 
3fad0     02 76 07 F6 |                 mov     htmp3, #2
3fad4                 | .wait_reset
3fad4     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fad8     EF 02 A0 FD |                 call    #poll_waitx
3fadc     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fae0     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fae4     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fae8     55 02 A0 FD |                 call    #control_read
3faec     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3faf0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3faf4     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3faf8                 | 
3faf8     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3fafc     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fb00     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fb04     A0 02 A0 FD |                 call    #control_write
3fb08                 | 
3fb08     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3fb0c                 | .wait_recover
3fb0c     A7 99 02 F6 |                 mov     hctwait, _1ms_
3fb10     EF 02 A0 FD |                 call    #poll_waitx
3fb14     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3fb18                 | 
3fb18     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3fb1c     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3fb20     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3fb24                 | 
3fb24     00 08 00 FF 
3fb28     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3fb2c     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3fb30     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3fb34     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3fb38     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3fb3c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb40     48 01 90 5D |         if_nz   jmp     #.done
3fb44                 | .get_dev_desc
3fb44     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3fb48     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3fb4c     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3fb50     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3fb54     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3fb58     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3fb5c     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3fb60     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb64     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fb68     AC 99 02 F6 |                 mov     hctwait, _8ms_
3fb6c     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3fb70     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3fb74     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3fb78     BE 00 A0 FD |                 call    #calc_crc5
3fb7c     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3fb80     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3fb84     F7 AD C2 FA |                 rdbyte  total_data, pb
3fb88     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3fb8c     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3fb90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fb94     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3fb98     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3fb9c     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3fba0                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3fba0     9F 99 02 F6 |                 mov     hctwait, _500us_
3fba4     EF 02 A0 FD |                 call    #poll_waitx
3fba8     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3fbac     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3fbb0     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3fbb4     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3fbb8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3fbbc     CC 00 90 5D |         if_nz   jmp     #.done
3fbc0     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3fbc4     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3fbc8     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3fbcc     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3fbd0     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3fbd4     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3fbd8     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3fbdc     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3fbe0     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3fbe4     A4 00 90 CD |         if_b    jmp     #.done
3fbe8     70 F0 BF FD |                 call    #hparse_con_desc
3fbec     9C 00 90 FD |                 jmp     #.done
3fbf0                 | 
3fbf0                 | .other
3fbf0     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3fbf4     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3fbf8     28 00 90 AD |         if_x1   jmp     #.reset_feature
3fbfc     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3fc00     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3fc04     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3fc08     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3fc0c     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3fc10     10 00 90 AD |         if_x1   jmp     #.reset_feature
3fc14     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3fc18     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3fc1c     04 00 90 AD |         if_x1   jmp     #.reset_feature
3fc20     68 00 90 FD |                 jmp     #.done
3fc24                 | .reset_feature
3fc24     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3fc28     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fc2c     A0 02 A0 FD |                 call    #control_write
3fc30     58 00 90 FD |                 jmp     #.done
3fc34                 | .disconnect
3fc34                 | 
3fc34     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3fc38     00 70 E3 F8 |                 getbyte htmp
3fc3c     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3fc40     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3fc44     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3fc48     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3fc4c     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3fc50     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3fc54                 |         if EMUPAD_MAX_PLAYER > 0
3fc54                 |         end
3fc54                 |         if HAVE_MOUSE
3fc54     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3fc58     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3fc5c     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3fc60                 |         end
3fc60                 |         if HAVE_HIDPAD
3fc60     14 0A F0 FE |                 loc ptrb,#hidpad_report
3fc64     2D 71 03 F6 |                 mov htmp,hdev_port
3fc68     01 70 E7 F2 |                 cmpsub htmp,#1
3fc6c     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3fc70     B8 F3 03 F1 |                 add ptrb,htmp
3fc74     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3fc78     80 01 6C FC |                 wrlong #0,ptrb
3fc7c                 |         end
3fc7c                 | 
3fc7c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3fc80     00 00 C4 F8 |                 setbyte #0
3fc84     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3fc88     00 00 04 F6 |                 mov     0-0, #0
3fc8c                 | 
3fc8c                 | .done
3fc8c     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3fc90     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3fc94     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3fc98     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3fc9c     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3fca0     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3fca4                 | 
3fca4     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3fca8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3fcac     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3fcb0     55 02 A0 FD |                 call    #control_read
3fcb4     00 69 06 FB |                 rdlong  hub_port_status, ptra
3fcb8                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3fcb8     2D 00 64 FD |                 ret
3fcbc                 | 
3fcbc                 | '------------------------------------------------------------------------------
3fcbc                 | ' Partially populated SETUP packets
3fcbc                 | '------------------------------------------------------------------------------
3fcbc     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fcbd     06          |                 byte    REQ_GET_DESC
3fcbe     00 01       |                 word    TYPE_DEVICE << 8
3fcc0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fcc2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcc4     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3fcc5     06          |                 byte    REQ_GET_DESC
3fcc6     00 02       |                 word    TYPE_CONFIG << 8
3fcc8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fcca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fccc     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fccd     09          |                 byte    REQ_SET_CONFIG
3fcce     00 00       |                 word    0       ' Configuration value
3fcd0     00 00       |                 word    0       ' Zero
3fcd2     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3fcd4     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3fcd5     05          |                 byte    REQ_SET_ADDR
3fcd6     00 00       |                 word    0       ' Zero
3fcd8     00 00       |                 word    0       ' Zero
3fcda     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3fcdc                 | '------------------------------------------------------------------------------
3fcdc                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3fcdc                 | ' wValue field dictates which protocol should be used.
3fcdc                 | '
3fcdc                 | ' When initialized, all devices default to report protocol. However the host
3fcdc                 | ' should not make any assumptions about the device state and should set the
3fcdc                 | ' desired protocol whenever initializing a device.
3fcdc                 | '------------------------------------------------------------------------------
3fcdc     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fcdd     0B          |                 byte    HID_SET_PROTO
3fcde     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3fce0                 |                                                 ' (HID 1.11 Section 7.2.6).
3fce0     00 00       |                 word    0               ' Interface index number.
3fce2     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3fce4                 | '------------------------------------------------------------------------------
3fce4     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fce5     0A          |                 byte    HID_SET_IDLE
3fce6     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3fce8                 |                                         ' reporting until a change is detected in the report data
3fce8                 | 
3fce8                 |                                         ' (HID 1.11 Section 7.2.4).
3fce8     00 00       |                 word    0       ' Interface index number.
3fcea     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3fcec     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3fced     09          |                 byte    HID_SET_REPORT
3fcee     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3fcf0                 |                                         ' (HID 1.11 Section 7.2.2).
3fcf0     00 00       |                 word    0       ' Interface index number.
3fcf2     00 00       |                 word    0       ' Size of the report, in bytes.
3fcf4     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3fcf5     06          |                 byte    REQ_GET_DESC
3fcf6     00 22       |                 word    TYPE_REPORT << 8
3fcf8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fcfa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fcfc                 | '------------------------------------------------------------------------------
3fcfc     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3fcfd     06          |                 byte    REQ_GET_DESC
3fcfe     00 29       |                 word    TYPE_HUB << 8
3fd00     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3fd02     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd04     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fd05     03          |                 byte    REQ_SET_FEATURE
3fd06     00 00       |                 word    0       ' port power
3fd08     01 00       |                 word    1       ' Port index number (1+)
3fd0a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd0c     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3fd0d     01          |                 byte    REQ_CLEAR_FEATURE
3fd0e     00 00       |                 word    0       ' port power
3fd10     01 00       |                 word    1       ' Port index number (1+)
3fd12     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3fd14     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3fd15     00          |                 byte    REQ_GET_STATUS
3fd16     00 00       |                 word    0
3fd18     01 00       |                 word    1       ' Port index number (1+)
3fd1a     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3fd1c                 | '------------------------------------------------------------------------------
3fd1c                 | if _HAVE_GAMEPAD
3fd1c     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3fd20                 | ps3_command_buff
3fd20     00 00 00 00 
3fd24     00          |                 byte    $00, $00, $00, $00, $00
3fd25     00 00 00 00 
3fd29     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3fd2a     FF 27 10 00 
3fd2e     32          |                 byte    $FF, $27, $10, $00, $32
3fd2f     FF 27 10 00 
3fd33     32          |                 byte    $FF, $27, $10, $00, $32
3fd34     FF 27 10 00 
3fd38     32          |                 byte    $FF, $27, $10, $00, $32
3fd39     FF 27 10 00 
3fd3d     32          |                 byte    $FF, $27, $10, $00, $32
3fd3e     00 00 00 00 
3fd42     00          |                 byte    $00, $00, $00, $00, $00
3fd43     00 00 00 00 
3fd47     00          |                 byte    $00, $00, $00, $00, $00
3fd48     00 00 00 00 
3fd4c     00          |                 byte    $00, $00, $00, $00, $00
3fd4d     00 00 00    |                 byte    $00, $00, $00
3fd50                 | '------------------------------------------------------------------------------
3fd50     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3fd53                 |                                         ' 0x01 All blinking
3fd53                 |                                         ' 0x02 1 flashes, then on
3fd53                 |                                         ' 0x03 2 flashes, then on
3fd53                 |                                         ' 0x04 3 flashes, then on
3fd53                 |                                         ' 0x05 4 flashes, then on
3fd53                 |                                         ' 0x06 1 on
3fd53                 |                                         ' 0x07 2 on
3fd53                 |                                         ' 0x08 3 on
3fd53                 |                                         ' 0x09 4 on
3fd53                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3fd53                 |                                         ' 0x0B Blinking*
3fd53                 |                                         ' 0x0C Slow blinking*
3fd53                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3fd53     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3fd56     00          |                 byte    $00             ' Left rumble
3fd57     00          |                 byte    $00             ' Right rumble
3fd58     00 00 00    |                 byte    $00, $00, $00
3fd5b     00          | end
3fd5c                 | alignl
3fd5c                 | 
3fd5c                 | if HAVE_MOUSE
3fd5c     00 00 00 00 
3fd60     00 00 00 00 | mouse_limits long 0[2]
3fd64     00 00 00 00 | mouse_outptr long 0
3fd68                 | end
3fd68                 | 
3fd68                 | if KEYQUEUE_SIZE > 0
3fd68     00          | keyq_head byte 0
3fd69     00          | keyq_tail byte 0
3fd6a     00 00 00 00 
      ...             
3ff66     00 00 00 00 
3ff6a     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ff6c                 | alignl
3ff6c                 | end
3ff6c                 | 
3ff6c                 | if EMUPAD_MAX_PLAYER > 0
3ff6c                 | emupad_rule_buffer
3ff6c                 | if EMUPAD_BUILTIN_RULES
3ff6c                 | file "padmap_builtin.dat"
3ff6c                 | end
3ff6c                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ff6c                 | '' Default rule directly follows!
3ff6c                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ff6c                 | end
3ff6c                 | 
3ff6c                 | '------------------------------------------------------------------------------
3ff6c                 | ' The USB data cache area gets zero-filled at every device disconnect
3ff6c                 | '------------------------------------------------------------------------------
3ff6c                 | usb_cache_start
3ff6c                 | 
3ff6c                 | ' HID descriptor and report buffers
3ff6c                 | if !!OVERLAP_MEMORY
3ff6c     00 00 00 00 
      ...             
40664     00 00 00 00 
40668     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
4066c                 | end
4066c     00 00 00 00 
40670     00 00 00 00 | hkbd_report     byte    0[8]
40674     00 00 00 00 | hkbd_led_rep    byte    0
40678                 | alignl
40678                 | 
40678                 | if HAVE_HIDPAD
40678     00 00 00 00 
      ...             
40734     00 00 00 00 
40738     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
4073c                 | end
4073c                 | 
4073c                 | ' HUB descriptor
4073c     00          | hub_descr       byte    0   ' bDescLength
4073d     00          |                 byte    0   ' bDescriptorType
4073e     00          |                 byte    0   ' bNbrPorts
4073f     00 00       |                 word    0   ' wHubCharacteristics
40741     00          |                 byte    0   ' bPwrOn2PwrGood
40742     00          |                 byte    0   ' bHubContrCurrent
40743     00          |                 byte    0   ' DeviceRemoveable
40744     00          |                 byte    0   ' PortPwrCtrlMask
40745                 | 
40745                 | usb_cache_end
40745                 | 
40745                 | if HAVE_MOUSE
40745     00 00 00 00 | mouse_xacc      long 0
40749     00 00 00 00 | mouse_yacc      long 0
4074d     00 00 00 00 | mouse_zacc      long 0
40751     00          | mouse_bstate    byte 0
40752     00          | mouse_lpending  byte 0
40753     00          | mouse_rpending  byte 0
40754     00          | mouse_mpending  byte 0
40755     00          | mouse_lock      byte 0
40756     00 00 00    |                 byte 0[3] ' padding
40759                 | end
40759                 | 
40759     00 00 00 00 
      ...             
407d1     00 00 00 00 
407d5     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
407d9     00 00 00 00 
407dd     00 00 00 00 
407e1     00 00 00 00 
407e5     00 00 00 00 
407e9     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
407eb     00 00 00 00 
      ...             
408e3     00 00 00 00 
408e7     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
408eb                 | 
408eb     00          | driver_cog      byte    0                       ' Current driver cog + 1
408ec                 | 	alignl
408ec                 | _audio096_spin2_dat_
408ec                 | 
408ec                 | audio       org     0
408ec                 | 
408ec     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
408f0     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
408f4     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
408f8                 |  
408f8     01 EC 63 FD |             cogid   pa                   ' compute cogid
408fc     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
40900     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
40904     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
40908                 | 
40908     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
4090c     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
40910     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
40914     0F 24 06 FC |             wrpin   dac2,#right
40918     0F 00 1E FC |             wxpin   #256,#right    
4091c     41 9C 64 FD |             dirh    #left addpins 1
40920     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
40924     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
40928     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
4092c                 |             
4092c                 | '---------------------------------------------------------------------------------        
4092c                 | '----------------- The main loop -------------------------------------------------
4092c                 | '---------------------------------------------------------------------------------
4092c                 | 
4092c     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
40930     10 00 90 CD |       if_c  jmp     #loop1
40934                 |   
40934     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
40938     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
4093c     D5 00 80 F1 |             sub     0-0,a40000000
40940     FD 01 6E FB |             djnz    cn,#p402
40944                 |     
40944     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
40948     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
4094c     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
40950     01 00 06 C6 |     if_c    mov     cn,#1
40954     DA 02 3A F3 |             fle     ct,time3 wcz
40958     02 00 06 C6 |     if_c    mov     cn,#2     
4095c     DB 02 3A F3 |             fle     ct,time4 wcz
40960     03 00 06 C6 |     if_c    mov     cn,#3
40964     DC 02 3A F3 |             fle     ct,time5 wcz
40968     04 00 06 C6 |     if_c    mov     cn,#4
4096c     DD 02 3A F3 |             fle     ct,time6 wcz
40970     05 00 06 C6 |     if_c    mov     cn,#5
40974     DE 02 3A F3 |             fle     ct,time7 wcz
40978     06 00 06 C6 |     if_c    mov     cn,#6
4097c     DF 02 3A F3 |             fle     ct,time8 wcz
40980     07 00 06 C6 |     if_c    mov     cn,#7
40984                 | 
40984                 | 
40984                 | '----------------------------------------------------------------------------------
40984                 | '------------- Compute channel samples --------------------------------------------
40984                 | '----------------------------------------------------------------------------------
40984                 | 
40984                 | 
40984     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
40988     06 C0 65 F0 |             shl     channeladd,#6
4098c     E0 F0 03 F1 |             add     ptra,channeladd
40990                 | 
40990     28 16 64 FD |             setq    #11                        	' read parameters
40994     00 D7 05 FB |             rdlong  pointer0,ptra
40998                 |     	    
40998     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
4099c     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
409a0     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
409a4     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
409a8     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
409ac     00 C4 0D F2 |             cmp     qq,#0 wz                         
409b0     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
409b4     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
409b8                 |             
409b8     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
409bc     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
409c0     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
409c4                 | 
409c4     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
409c8     EC 08 3A F9 |             getword oldrs,sample0,#1
409cc     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
409d0     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
409d4     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
409d8     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
409dc                 | 
409dc     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
409e0     00 04 02 F6 |             mov     dt0,0-0    
409e4     D7 04 82 F1 |             sub     dt0,time0
409e8                 |             
409e8     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
409ec     FB 00 00 F1 |             add     0-0,afreq0  	
409f0                 |             
409f0                 | '---- envelopes
409f0                 |             
409f0     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
409f4     20 00 00 AF 
409f8     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
409fc     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
40a00                 | 
40a00     FB 48 02 F6 |             mov     envs1,afreq0
40a04     F5 48 02 FA |             mul     envs1,envspd0
40a08     24 E7 01 F1 |             add     envph0,envs1 
40a0c                 | 
40a0c     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
40a10     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
40a14     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
40a18     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
40a1c     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
40a20     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
40a24     00 46 06 36 |     if_ge   mov     envlo,#0
40a28     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
40a2c     16 E6 65 30 |     if_ge   shl     envph0,#22
40a30                 | 
40a30     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
40a34     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
40a38     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
40a3c     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
40a40     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
40a44     24 49 32 F9 |             getword envs1,envs1,#0		' current value
40a48     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
40a4c     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
40a50     23 49 02 FA |             mul     envs1,envlo
40a54     25 49 02 F1 |             add     envs1,envs2
40a58     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
40a5c                 |             
40a5c     1B DA 0D F4 | p410        testb   sstart0, #27 wz
40a60     1B C6 61 AD |     if_z    getrnd  spl
40a64     58 00 90 AD |     if_z    jmp     #p406
40a68                 |  
40a68     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
40a6c     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
40a70     08 D6 45 F0 |             shr     pointer0,#8
40a74                 |          
40a74     1F DA 0D F4 |             testb   sstart0,#31 wz            
40a78     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40a7c     1C DA 0D F4 |             testb   sstart0,#28 wz            
40a80     01 D6 65 A0 |     if_z    shl     pointer0,#1        
40a84                 |         
40a84     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
40a88     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
40a8c     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
40a90                 |             
40a90     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
40a94     ED C4 01 F1 |             add     qq,sstart0            
40a98                 | 
40a98     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
40a9c     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
40aa0     1C 01 B0 1D |     if_gt   call    #cache_read
40aa4                 |          
40aa4     1F DA 0D F4 |             testb   sstart0,#31 wz 
40aa8     08 C6 65 50 |     if_nz   shl     spl,#8
40aac     08 D6 65 50 |     if_nz   shl     pointer0,#8
40ab0     07 D6 65 A0 |     if_z    shl     pointer0,#7
40ab4     1C DA 0D F4 |             testb   sstart0,#28 wz            
40ab8     01 D6 45 A0 |     if_z    shr     pointer0,#1    
40abc     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
40ac0                 | 
40ac0                 | 
40ac0     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
40ac4     00 C6 01 F6 |             mov     spl,0-0
40ac8     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
40acc     00 C6 01 F6 |             mov     spl,0-0
40ad0                 | 
40ad0     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
40ad4     00 0A 02 F6 |             mov     ls0,0-0
40ad8     20 00 00 FF 
40adc     00 C4 05 F6 |             mov     qq,##16384
40ae0     FE C4 81 F1 |             sub     qq,apan0
40ae4     E2 C6 31 FA |             scas    spl,qq
40ae8     00 0C 02 F6 |             mov     rs0, 0-0
40aec                 | 
40aec     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
40af0     06 11 02 F1 |             add     rs,rs0
40af4     03 0F 82 F1 |             sub     ls,oldls
40af8     05 0F 02 F1 |             add     ls,ls0
40afc                 |    
40afc     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
40b00     05 D9 21 F9 |             setword sample0,ls0,#0
40b04                 |             
40b04     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
40b08     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
40b0c     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
40b10                 |   '  if_z    mov     sample0,#0
40b10     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
40b14     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
40b18     04 00 00 AF 
40b1c     00 B0 05 A1 |     if_z    add     time1,##2048
40b20     D8 B2 01 A6 |     if_z    mov     time2,time1
40b24     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
40b28                 | 
40b28     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
40b2c     00 D7 65 FC |             wrlong  pointer0,ptra
40b30     08 E7 65 FC |             wrlong  envph0,ptra[8]
40b34     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
40b38                 |                       
40b38     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
40b3c     FF C3 25 A7 |     if_z    decmod  front, #511          
40b40                 |          
40b40     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
40b44     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
40b48     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
40b4c     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
40b50                 | 	    
40b50                 | 		    
40b50     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
40b54     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
40b58     04 15 02 F6 |             mov     newsample, oldrs       
40b5c                 | 
40b5c     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
40b60     02 AF 01 F1 |             add     time0,dt0    
40b64                 |                                      
40b64     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
40b68     D8 FD 9F AD |     if_z    jmp     #loop1
40b6c     02 C5 01 F6 |             mov     qq,dt0
40b70                 | 
40b70                 |     
40b70                 |             
40b70     01 4E 36 F0 | p301        rol     dropper,#1 wc
40b74     40 00 90 3D |     if_nc   jmp     #p399
40b78     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
40b7c     00 C2 9D F2 |             cmpr    front, #0-0 wcz
40b80     F4 FF 9F AD |     if_e    jmp     #p398   
40b84                 | 		
40b84     00 1A 0E F2 | 	    cmp     scbase,#0 wz
40b88     20 00 90 AD |     if_z    jmp     #p302	   
40b8c                 |   
40b8c     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
40b90     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
40b94     02 1E 66 C0 |     if_c    shl     scptr2,#2
40b98     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
40b9c     60 1E 66 FC |             wrlong  scptr2,#$60
40ba0     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
40ba4     01 00 00 CF 
40ba8     7F 1C 06 C7 |     if_c    incmod  scptr,##639
40bac                 | 			    
40bac     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
40bb0     00 00 00 FF 
40bb4     FF C3 05 F7 |             incmod  front, ##511
40bb8     ED C5 6D FB | p399        djnz    qq,#p301
40bbc                 |             
40bbc     6C FD 9F FD |             jmp     #loop            'loop
40bc0                 | 
40bc0                 | '----------------------------------------------------------------------------------
40bc0                 | '------------- This is the end of the main loop -----------------------------------
40bc0                 | '----------------------------------------------------------------------------------
40bc0                 | 
40bc0                 | '----------------------------------------------------------------------------------
40bc0                 | '------------- PSRAM cache ----------- --------------------------------------------
40bc0                 | '----------------------------------------------------------------------------------
40bc0                 | 
40bc0                 | ' There are 8 cache pointers for 8 channels
40bc0                 | ' if 24 higher bits of address=cache, then get a word from the cache
40bc0                 | ' else load the cache from PSRAM, update the pointer, then read a sample
40bc0                 | 
40bc0                 | 
40bc0     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
40bc4                 |             
40bc4     E2 40 02 F6 | 	    mov     addrhi,qq		
40bc8     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
40bcc     14 01 96 F9 | 	    alts    cn,#cache1            
40bd0     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
40bd4     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
40bd8                 | 	
40bd8     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
40bdc     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
40be0     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
40be4     08 38 66 F0 | 	    shl     cmd,#8
40be8     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
40bec     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
40bf0     08 3A 66 F0 |             shl     hubaddr,#8                  '
40bf4     13 3B 02 F1 |             add     hubaddr,hubptr 
40bf8     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
40bfc     28 04 64 FD |             setq    #2                          ' write 3 longs
40c00     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
40c04     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
40c08     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
40c0c                 |             
40c0c                 | 	
40c0c     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
40c10     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
40c14     13 C5 01 F1 | 	    add     qq,hubptr
40c18     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
40c1c     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
40c20                 |           
40c20                 | 
40c20                 | '--------------------------------------------------------------------------
40c20                 | '------ Interrupt service -------------------------------------------------
40c20                 | '------ Output the sample, get the next one if exists ---------------------
40c20                 | '--------------------------------------------------------------------------
40c20                 | 
40c20     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
40c24     0F D0 25 FC |             wypin   rsample,#right       '4
40c28     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
40c2c     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
40c30     FF F3 07 57 |     if_ne   incmod  ptrb,#511
40c34     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
40c38     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
40c3c                 |     
40c3c     F5 FF 3B FB |             reti1                        '17/19 
40c40                 |           
40c40                 | '---------------------------------------------------------------------------
40c40                 | '-------- End of interrupt -------------------------------------------------
40c40                 | '---------------------------------------------------------------------------    
40c40                 | 
40c40                 | 
40c40                 | '---------------------------------------------------------------------------
40c40                 | '------- Variables ---------------------------------------------------------
40c40                 | '---------------------------------------------------------------------------
40c40                 | 
40c40                 | ' constants
40c40                 | 
40c40     00 00 00 40 | a40000000   long $40000000
40c44     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
40c48                 | 
40c48                 | ' Time variables
40c48                 | 
40c48     00 00 00 00 | time0       long 0    ' Global sample computing time
40c4c     01 00 00 00 | time1       long 1    ' Local channels time
40c50     02 00 00 00 | time2       long 2
40c54     03 00 00 00 | time3       long 3
40c58     04 00 00 00 | time4       long 4
40c5c     05 00 00 00 | time5       long 5
40c60     06 00 00 00 | time6       long 6
40c64     07 00 00 00 | time7       long 7
40c68     08 00 00 00 | time8       long 8
40c6c                 | 
40c6c     00 00 00 00 | channeladd long 0
40c70                 | 
40c70     00 00 00 00 | front       long 0
40c74                 | 
40c74                 | ' temporary variables 
40c74     00 00 00 00 | qq          long 0
40c78     00 00 00 00 | spl         long 0
40c7c     00 00 00 00 | zero        long 0
40c80     00 00 00 00 | mailbox     long 0
40c84     00 00 00 00 | mailbox2 long 0
40c88                 | 
40c88                 | ' Interrupt ISR variables
40c88                 | 
40c88     00 00 00 00 | lsample     long 0
40c8c     00 00 00 00 | rsample     long 0
40c90     00 00 00 00 | lsnext      long 0
40c94     00 00 00 00 | rsnext      long 0 
40c98                 | 
40c98                 | ' channel parameter block
40c98                 | 
40c98     00 00 00 00 | pointer0    long 0     
40c9c     00 00 00 00 | sample0     long 0
40ca0     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
40ca4     00 00 00 00 | lstart0     long 0
40ca8     00 00 00 00 | lend0       long 0
40cac     00 00 00 00 | volpan0     long 0
40cb0     00 00 00 00 | freqskip0   long 0
40cb4     00 00 00 00 | command0    long 0
40cb8     00 00 00 00 | envph0	    long 0
40cbc     00 00 00 00 | envptr0	    long 0
40cc0     00 00 00 00 | envspd0	    long 0
40cc4     00 00 00 00 | envlen0	    long 0
40cc8     00 00 00 00 | res5	    long 0
40ccc     00 00 00 00 | res6	    long 0
40cd0     00 00 00 00 | res7	    long 0
40cd4     00 00 00 00 | res8	    long 0
40cd8                 | 
40cd8     00 00 00 00 | afreq0      long 0
40cdc     00 00 00 00 | askip0      long 0
40ce0     00 00 00 00 | avol0       long 0
40ce4     00 00 00 00 | apan0       long 0
40ce8                 | 
40ce8     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
40cec     00 00 00 00 | cn          long 0
40cf0     00 00 00 00 | ct          long 0
40cf4     00 00 00 00 | dt0         long 0
40cf8                 | 
40cf8                 | ' Samples
40cf8     00 00 00 00 | oldls       long 0
40cfc     00 00 00 00 | oldrs       long 0
40d00                 | 
40d00     00 00 00 00 | ls0         long 0
40d04     00 00 00 00 | rs0         long 0
40d08                 | 
40d08     00 00 00 00 | ls          long 0    
40d0c     00 00 00 00 | rs          long 0
40d10                 | 
40d10     00 00 00 00 | oldsample   long 0
40d14     00 00 00 00 | newsample   long 0
40d18                 | 
40d18     00 00 00 00 | nrsample    long 0
40d1c     00 00 00 00 | nlsample    long 0
40d20                 | 
40d20     00 00 00 00 | scbase long 0
40d24     00 00 00 00 | scptr long 0
40d28     00 00 00 00 | scptr2 long 0
40d2c     00 00 00 00 | scope long 0
40d30                 | 
40d30     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
40d34     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
40d38                 | 
40d38     00 18 07 00 | hubptr      long $71800
40d3c     00 00 00 00 | cache1      long 0
40d40     00 00 00 00 | cache2      long 0
40d44     00 00 00 00 | cache3      long 0
40d48     00 00 00 00 | cache4      long 0
40d4c     00 00 00 00 | cache5      long 0
40d50     00 00 00 00 | cache6      long 0
40d54     00 00 00 00 | cache7      long 0
40d58     00 00 00 00 | cache8      long 0
40d5c                 | 
40d5c                 | 
40d5c     00 00 00 00 | cmd         long 0
40d60     00 00 00 00 | hubaddr     long 0
40d64     00 01 00 00 | count       long 256
40d68     00 00 00 00 | addrlo long 0
40d6c     00 00 00 00 | addrhi long 0
40d70     00 00 00 00 | pointer00 long 0
40d74     00 00 00 00 | envhi long 0
40d78     00 00 00 00 | envlo long 0
40d7c     00 00 00 00 | envs1 long 0
40d80     00 00 00 00 | envs2 long 0
40d84     00 00 00 00 | noise0 long 0
40d88     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
40d8c     00 00 00 00 
40d90     00 00 00 00 | null  			long 	0,0           ' for channel reset
40d94                 | 	alignl
40d94                 | __system__dat_
40d94     00 00 00 00 
40d98     00 00 00 00 | 	byte	$00[8]
40d9c     03 00 00 00 
40da0     00 00 00 00 
40da4     00 00 00 00 
40da8     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
40dac     00 00 00 00 
      ...             
41038     00 00 00 00 
4103c     00 00 00 00 | 	byte	$00[660]
41040     00 00 80 0A | 	long	(168 {__system____root_opendir})<<20
41044     00 00 90 0A | 	long	(169 {__system____root_closedir})<<20
41048     00 00 A0 0A | 	long	(170 {__system____root_readdir})<<20
4104c     00 00 B0 0A | 	long	(171 {__system____root_stat})<<20
41050     00 00 00 00 
41054     00 00 00 00 
41058     00 00 00 00 
4105c     00 00 00 00 
41060     00 00 00 00 
41064     00 00 00 00 
41068     00 00 00 00 | 	byte	$00[28]
4106c     D4 10 04 00 | 	long	@@@__system__dat_ + 832
41070     D7 10 04 00 | 	long	@@@__system__dat_ + 835
41074     F8 10 04 00 | 	long	@@@__system__dat_ + 868
41078     11 11 04 00 | 	long	@@@__system__dat_ + 893
4107c     2C 11 04 00 | 	long	@@@__system__dat_ + 920
41080     46 11 04 00 | 	long	@@@__system__dat_ + 946
41084     56 11 04 00 | 	long	@@@__system__dat_ + 962
41088     68 11 04 00 | 	long	@@@__system__dat_ + 980
4108c     7A 11 04 00 | 	long	@@@__system__dat_ + 998
41090     8C 11 04 00 | 	long	@@@__system__dat_ + 1016
41094     98 11 04 00 | 	long	@@@__system__dat_ + 1028
41098     A9 11 04 00 | 	long	@@@__system__dat_ + 1045
4109c     BD 11 04 00 | 	long	@@@__system__dat_ + 1065
410a0     C7 11 04 00 | 	long	@@@__system__dat_ + 1075
410a4     D7 11 04 00 | 	long	@@@__system__dat_ + 1091
410a8     E6 11 04 00 | 	long	@@@__system__dat_ + 1106
410ac     FC 11 04 00 | 	long	@@@__system__dat_ + 1128
410b0     15 12 04 00 | 	long	@@@__system__dat_ + 1153
410b4     29 12 04 00 | 	long	@@@__system__dat_ + 1173
410b8     37 12 04 00 | 	long	@@@__system__dat_ + 1187
410bc     4B 12 04 00 | 	long	@@@__system__dat_ + 1207
410c0     57 12 04 00 | 	long	@@@__system__dat_ + 1219
410c4     69 12 04 00 | 	long	@@@__system__dat_ + 1237
410c8     81 12 04 00 | 	long	@@@__system__dat_ + 1261
410cc     93 12 04 00 | 	long	@@@__system__dat_ + 1279
410d0     A6 12 04 00 | 	long	@@@__system__dat_ + 1298
410d4     4F 4B 00 4E 
410d8     75 6D 65 72 
410dc     69 63 61 6C 
410e0     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
410e4     75 6D 65 6E 
410e8     74 20 6F 75 
410ec     74 20 6F 66 
410f0     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
410f4     61 69 6E 00 
410f8     52 65 73 75 
410fc     6C 74 20 6E 
41100     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
41104     65 70 72 65 
41108     73 65 6E 74 
4110c     61 62 6C 65 
41110     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
41114     65 67 61 6C 
41118     20 6D 75 6C 
4111c     74 69 62 79 
41120     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
41124     65 71 75 65 
41128     6E 63 65 00 
4112c     4E 6F 20 73 
41130     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
41134     66 69 6C 65 
41138     20 6F 72 20 
4113c     64 69 72 65 
41140     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
41144     79 00 42 61 
41148     64 20 66 69 
4114c     6C 65 20 6E 
41150     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
41154     72 00 50 65 
41158     72 6D 69 73 
4115c     73 69 6F 6E 
41160     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
41164     69 65 64 00 
41168     4E 6F 74 20 
4116c     65 6E 6F 75 
41170     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
41174     65 6D 6F 72 
41178     79 00 54 65 
4117c     6D 70 6F 72 
41180     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
41184     66 61 69 6C 
41188     75 72 65 00 
4118c     46 69 6C 65 
41190     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
41194     73 74 73 00 
41198     49 6E 76 61 
4119c     6C 69 64 20 
411a0     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
411a4     6D 65 6E 74 
411a8     00 54 6F 6F 
411ac     20 6D 61 6E 
411b0     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
411b4     65 6E 20 66 
411b8     69 6C 65 73 
411bc     00 49 2F 4F 
411c0     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
411c4     6F 72 00 4E 
411c8     6F 74 20 61 
411cc     20 64 69 72 
411d0     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
411d4     72 79 00 49 
411d8     73 20 61 20 
411dc     64 69 72 65 
411e0     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
411e4     79 00 52 65 
411e8     61 64 20 6F 
411ec     6E 6C 79 20 
411f0     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
411f4     20 73 79 73 
411f8     74 65 6D 00 
411fc     46 75 6E 63 
41200     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
41204     20 6E 6F 74 
41208     20 69 6D 70 
4120c     6C 65 6D 65 
41210     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
41214     00 44 69 72 
41218     65 63 74 6F 
4121c     72 79 20 6E 
41220     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
41224     6D 70 74 79 
41228     00 4E 61 6D 
4122c     65 20 74 6F 
41230     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
41234     6E 67 00 44 
41238     65 76 69 63 
4123c     65 20 6E 6F 
41240     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
41244     65 6B 61 62 
41248     6C 65 00 42 
4124c     61 64 20 61 
41250     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
41254     73 73 00 42 
41258     72 6F 6B 65 
4125c     6E 20 63 6F 
41260     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
41264     74 69 6F 6E 
41268     00 44 65 76 
4126c     69 63 65 20 
41270     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
41274     65 73 6F 75 
41278     72 63 65 20 
4127c     62 75 73 79 
41280     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
41284     73 73 20 64 
41288     65 76 69 63 
4128c     65 20 6C 69 
41290     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
41294     6F 20 73 70 
41298     61 63 65 20 
4129c     6F 6E 20 64 
412a0     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
412a4     65 00 55 6E 
412a8     6B 6E 6F 77 
412ac     6E 20 65 72 
412b0     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
412b4     00 00 00 00 
412b8     00 00 00 00 
412bc     00 00 00 00 | 	byte	$00[12]
412c0     05 00 00 00 
412c4     00 00 00 00 
412c8     00 00 00 00 
412cc     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
412d0     00 00 00 00 | 	byte	$00, $00, $00, $00
412d4     00 00 00 0C | 	long	(192 {__system___tx})<<20
412d8     00 00 10 0C | 	long	(193 {__system___rx})<<20
412dc     00 00 00 00 | 	byte	$00, $00, $00, $00
412e0     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0768})<<20
412e4     00 00 30 0C | 	long	(195 {__system____dummy_flush_0769})<<20
412e8     00 00 00 00 
412ec     00 00 00 00 | 	byte	$00[8]
412f0     01 00 00 00 
412f4     06 00 00 00 
412f8     00 00 00 00 
412fc     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41300     00 00 00 00 
41304     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41308     00 00 00 0C | 	long	(192 {__system___tx})<<20
4130c     00 00 10 0C | 	long	(193 {__system___rx})<<20
41310     00 00 00 00 | 	byte	$00, $00, $00, $00
41314     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0768})<<20
41318     00 00 30 0C | 	long	(195 {__system____dummy_flush_0769})<<20
4131c     00 00 00 00 
41320     00 00 00 00 | 	byte	$00[8]
41324     01 00 00 00 
41328     06 00 00 00 
4132c     00 00 00 00 
41330     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
41334     00 00 00 00 
41338     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
4133c     00 00 00 0C | 	long	(192 {__system___tx})<<20
41340     00 00 10 0C | 	long	(193 {__system___rx})<<20
41344     00 00 00 00 | 	byte	$00, $00, $00, $00
41348     00 00 20 0C | 	long	(194 {__system___rxtxioctl_0768})<<20
4134c     00 00 30 0C | 	long	(195 {__system____dummy_flush_0769})<<20
41350     00 00 00 00 
      ...             
414c0     00 00 00 00 
414c4     00 00 00 00 | 	byte	$00[376]
414c8     CC 14 04 00 | 	long	@@@__system__dat_ + 1848
414cc     00 00 00 00 
414d0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
414d4                 | 	alignl
414d4                 | _fatfs_cc_dat_
414d4     C7 00 FC 00 
414d8     E9 00 E2 00 
414dc     E4 00 E0 00 
414e0     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
414e4     EA 00 EB 00 
414e8     E8 00 EF 00 
414ec     EE 00 EC 00 
414f0     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
414f4     C9 00 E6 00 
414f8     C6 00 F4 00 
414fc     F6 00 F2 00 
41500     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
41504     FF 00 D6 00 
41508     DC 00 F8 00 
4150c     A3 00 D8 00 
41510     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
41514     E1 00 ED 00 
41518     F3 00 FA 00 
4151c     F1 00 D1 00 
41520     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
41524     BF 00 AE 00 
41528     AC 00 BD 00 
4152c     BC 00 A1 00 
41530     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
41534     91 25 92 25 
41538     93 25 02 25 
4153c     24 25 C1 00 
41540     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
41544     A9 00 63 25 
41548     51 25 57 25 
4154c     5D 25 A2 00 
41550     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
41554     14 25 34 25 
41558     2C 25 1C 25 
4155c     00 25 3C 25 
41560     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
41564     5A 25 54 25 
41568     69 25 66 25 
4156c     60 25 50 25 
41570     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
41574     F0 00 D0 00 
41578     CA 00 CB 00 
4157c     C8 00 31 01 
41580     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
41584     CF 00 18 25 
41588     0C 25 88 25 
4158c     84 25 A6 00 
41590     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
41594     D3 00 DF 00 
41598     D4 00 D2 00 
4159c     F5 00 D5 00 
415a0     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
415a4     DE 00 DA 00 
415a8     DB 00 D9 00 
415ac     FD 00 DD 00 
415b0     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
415b4     AD 00 B1 00 
415b8     17 20 BE 00 
415bc     B6 00 A7 00 
415c0     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
415c4     B0 00 A8 00 
415c8     B7 00 B9 00 
415cc     B3 00 B2 00 
415d0     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
415d4     61 00 1A 03 
415d8     E0 00 17 03 
415dc     F8 00 07 03 
415e0     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
415e4     78 01 00 01 
415e8     30 01 32 01 
415ec     06 01 39 01 
415f0     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
415f4     2E 01 79 01 
415f8     06 01 80 01 
415fc     4D 00 43 02 
41600     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
41604     82 01 84 01 
41608     84 01 86 01 
4160c     87 01 87 01 
41610     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
41614     8B 01 8B 01 
41618     8D 01 8E 01 
4161c     8F 01 90 01 
41620     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
41624     93 01 94 01 
41628     F6 01 96 01 
4162c     97 01 98 01 
41630     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
41634     9B 01 9C 01 
41638     9D 01 20 02 
4163c     9F 01 A0 01 
41640     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
41644     A2 01 A4 01 
41648     A4 01 A6 01 
4164c     A7 01 A7 01 
41650     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
41654     AB 01 AC 01 
41658     AC 01 AE 01 
4165c     AF 01 AF 01 
41660     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
41664     B3 01 B3 01 
41668     B5 01 B5 01 
4166c     B7 01 B8 01 
41670     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
41674     BB 01 BC 01 
41678     BC 01 BE 01 
4167c     F7 01 C0 01 
41680     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
41684     C3 01 C4 01 
41688     C5 01 C4 01 
4168c     C7 01 C8 01 
41690     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
41694     CB 01 CA 01 
41698     CD 01 10 01 
4169c     DD 01 01 00 
416a0     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
416a4     12 01 F3 01 
416a8     03 00 F1 01 
416ac     F4 01 F4 01 
416b0     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
416b4     22 02 12 01 
416b8     3A 02 09 00 
416bc     65 2C 3B 02 
416c0     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
416c4     66 2C 3F 02 
416c8     40 02 41 02 
416cc     41 02 46 02 
416d0     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
416d4     40 00 81 01 
416d8     86 01 55 02 
416dc     89 01 8A 01 
416e0     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
416e4     5A 02 90 01 
416e8     5C 02 5D 02 
416ec     5E 02 5F 02 
416f0     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
416f4     62 02 94 01 
416f8     64 02 65 02 
416fc     66 02 67 02 
41700     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
41704     6A 02 62 2C 
41708     6C 02 6D 02 
4170c     6E 02 9C 01 
41710     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
41714     9D 01 73 02 
41718     74 02 9F 01 
4171c     76 02 77 02 
41720     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
41724     7A 02 7B 02 
41728     7C 02 64 2C 
4172c     7E 02 7F 02 
41730     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
41734     82 02 A9 01 
41738     84 02 85 02 
4173c     86 02 87 02 
41740     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
41744     B1 01 B2 01 
41748     45 02 8D 02 
4174c     8E 02 8F 02 
41750     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
41754     B7 01 7B 03 
41758     03 00 FD 03 
4175c     FE 03 FF 03 
41760     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
41764     86 03 88 03 
41768     89 03 8A 03 
4176c     B1 03 11 03 
41770     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
41774     A3 03 A3 03 
41778     C4 03 08 03 
4177c     CC 03 03 00 
41780     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
41784     8F 03 D8 03 
41788     18 01 F2 03 
4178c     0A 00 F9 03 
41790     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
41794     F5 03 F6 03 
41798     F7 03 F7 03 
4179c     F9 03 FA 03 
417a0     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
417a4     20 03 50 04 
417a8     10 07 60 04 
417ac     22 01 8A 04 
417b0     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
417b4     0E 01 CF 04 
417b8     01 00 C0 04 
417bc     D0 04 44 01 
417c0     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
417c4     00 00 7D 1D 
417c8     01 00 63 2C 
417cc     00 1E 96 01 
417d0     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
417d4     00 1F 08 06 
417d8     10 1F 06 06 
417dc     20 1F 08 06 
417e0     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
417e4     40 1F 06 06 
417e8     51 1F 07 00 
417ec     59 1F 52 1F 
417f0     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
417f4     5D 1F 56 1F 
417f8     5F 1F 60 1F 
417fc     08 06 70 1F 
41800     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
41804     BB 1F C8 1F 
41808     C9 1F CA 1F 
4180c     CB 1F DA 1F 
41810     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
41814     F9 1F EA 1F 
41818     EB 1F FA 1F 
4181c     FB 1F 80 1F 
41820     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
41824     08 06 A0 1F 
41828     08 06 B0 1F 
4182c     04 00 B8 1F 
41830     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
41834     BC 1F CC 1F 
41838     01 00 C3 1F 
4183c     D0 1F 02 06 
41840     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
41844     E5 1F 01 00 
41848     EC 1F F3 1F 
4184c     01 00 FC 1F 
41850     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
41854     32 21 70 21 
41858     10 02 84 21 
4185c     01 00 83 21 
41860     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
41864     30 2C 2F 04 
41868     60 2C 02 01 
4186c     67 2C 06 01 
41870     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
41874     80 2C 64 01 
41878     00 2D 26 08 
4187c     41 FF 1A 03 
41880     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
41884     05 07 09 0E 
41888     10 12 14 16 
4188c     18 1C 1E 43 
41890     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
41894     41 41 43 45 
41898     45 45 49 49 
4189c     49 41 41 45 
418a0     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
418a4     4F 55 55 59 
418a8     4F 55 4F 9C 
418ac     4F 9E 9F 41 
418b0     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
418b4     A5 A6 A7 A8 
418b8     A9 AA AB AC 
418bc     AD AE AF B0 
418c0     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
418c4     41 41 41 B8 
418c8     B9 BA BB BC 
418cc     BD BE BF C0 
418d0     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
418d4     C5 41 41 C8 
418d8     C9 CA CB CC 
418dc     CD CE CF D1 
418e0     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
418e4     49 49 49 49 
418e8     D9 DA DB DC 
418ec     DD 49 DF 4F 
418f0     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
418f4     4F E6 E8 E8 
418f8     55 55 55 59 
418fc     59 EE EF F0 
41900     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
41904     F5 F6 F7 F8 
41908     F9 FA FB FC 
4190c     FD FE FF 00 
41910     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
41914     00 00 00 00 | 	byte	$00, $00, $00, $00
41918     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_close})<<20
4191c     00 00 00 0B | 	long	(176 {_fatfs_cc_v_read})<<20
41920     00 00 10 0B | 	long	(177 {_fatfs_cc_v_write})<<20
41924     00 00 20 0B | 	long	(178 {_fatfs_cc_v_lseek})<<20
41928     00 00 30 0B | 	long	(179 {_fatfs_cc_v_ioctl})<<20
4192c     00 00 40 0C | 	long	(196 {_fatfs_cc_v_flush})<<20
41930     00 00 00 00 
41934     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
41938     00 00 40 0B | 	long	(180 {_fatfs_cc_v_open})<<20
4193c     00 00 50 0B | 	long	(181 {_fatfs_cc_v_creat})<<20
41940     00 00 60 0B | 	long	(182 {_fatfs_cc_v_opendir})<<20
41944     00 00 70 0B | 	long	(183 {_fatfs_cc_v_closedir})<<20
41948     00 00 80 0B | 	long	(184 {_fatfs_cc_v_readdir})<<20
4194c     00 00 90 0B | 	long	(185 {_fatfs_cc_v_stat})<<20
41950     00 00 A0 0B | 	long	(186 {_fatfs_cc_v_mkdir})<<20
41954     00 00 B0 0B | 	long	(187 {_fatfs_cc_v_rmdir})<<20
41958     00 00 C0 0B | 	long	(188 {_fatfs_cc_v_remove})<<20
4195c     00 00 D0 0B | 	long	(189 {_fatfs_cc_v_rename})<<20
41960     00 00 E0 0B | 	long	(190 {_fatfs_cc_v_init})<<20
41964     00 00 F0 0B | 	long	(191 {_fatfs_cc_v_deinit})<<20
41968     FF FF FF FF 
4196c     1F 00 00 00 
41970     1C 00 00 00 
41974     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
41978     1E 00 00 00 
4197c     1F 00 00 00 
41980     1E 00 00 00 
41984     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
41988     1F 00 00 00 
4198c     1E 00 00 00 
41990     1F 00 00 00 
41994     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
41998     1F 00 00 00 
4199c     00 00 00 00 
419a0     1F 00 00 00 
419a4     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
419a8     5A 00 00 00 
419ac     78 00 00 00 
419b0     97 00 00 00 
419b4     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
419b8     D4 00 00 00 
419bc     F3 00 00 00 
419c0     11 01 00 00 
419c4     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
419c8     4E 01 00 00 
419cc     6D 01 00 00 
419d0     FF FF FF FF 
419d4     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
419d8     00 00 00 00 
      ...             
419f0     00 00 00 00 
419f4     00 00 00 00 | 	byte	$00[32]
419f8     16 1A 04 00 | 	long	@@@_fatfs_cc_dat_ + 1346
419fc     1A 1A 04 00 | 	long	@@@_fatfs_cc_dat_ + 1350
41a00     00 00 00 00 
41a04     00 00 00 00 
41a08     00 00 00 00 
41a0c     00 00 00 00 
41a10     00 00       | 	byte	$00[18]
41a12     3F 3F 3F 00 
41a16     55 43 54 00 
41a1a     55 43 54 00 
41a1e     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
41a22     00 00 00 00 
41a26     00 00 00    | 	byte	$00[7]
41a29     CA 9A 3B 00 
41a2d     00 00 00 01 
41a31     01 01 01 01 
41a35     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
41a39     91 11 11 11 
41a3d     11 01 01 01 
41a41     01 01 01 01 
41a45     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
41a49     01 01 01 01 
41a4d     01 01 01    | 	byte	$01[7]
41a50     90 20 20 20 
41a54     20 20 20 20 
41a58     20 20 20 20 
41a5c     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
41a60     42 42 42 42 
41a64     42 42 42 42 
41a68     42 42       | 	byte	$42[10]
41a6a     20 20 20 20 
41a6e     20 20 20    | 	byte	$20[7]
41a71     44 44 44 44 
41a75     44 44       | 	byte	$44[6]
41a77     04 04 04 04 
41a7b     04 04 04 04 
41a7f     04 04 04 04 
41a83     04 04 04 04 
41a87     04 04 04 04 | 	byte	$04[20]
41a8b     20 20 20 20 
41a8f     20 20       | 	byte	$20[6]
41a91     48 48 48 48 
41a95     48 48       | 	byte	$48[6]
41a97     08 08 08 08 
41a9b     08 08 08 08 
41a9f     08 08 08 08 
41aa3     08 08 08 08 
41aa7     08 08 08 08 | 	byte	$08[20]
41aab     20 20 20 20 
41aaf     01 00 00 00 
41ab3     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
41ab4                 | __methodtable__
41ab4     64 63 01 00 | 	long	@_do_no_command
41ab8     FC 04 02 00 | 	long	@_do_plus
41abc     1C F5 01 00 | 	long	@_do_minus
41ac0     E4 03 02 00 | 	long	@_do_or
41ac4     9C FB 01 00 | 	long	@_do_mul
41ac8     E0 DF 01 00 | 	long	@_do_fdiv
41acc     CC D7 01 00 | 	long	@_do_and
41ad0     E4 D8 01 00 | 	long	@_do_div
41ad4     7C F9 01 00 | 	long	@_do_mod
41ad8     B0 0B 02 00 | 	long	@_do_shl
41adc     C8 0C 02 00 | 	long	@_do_shr
41ae0     E8 09 02 00 | 	long	@_do_power
41ae4     84 CD 01 00 | 	long	@_do_getvar
41ae8     A0 90 01 00 | 	long	@_do_push
41aec     7C C7 01 00 | 	long	@_do_assign
41af0     9C F5 00 00 | 	long	@_do_cls
41af4     30 5D 01 00 | 	long	@_do_new
41af8     E4 88 01 00 | 	long	@_do_plot
41afc     04 1E 01 00 | 	long	@_do_draw
41b00     4C 8B 01 00 | 	long	@_do_print
41b04     7C F3 00 00 | 	long	@_do_circle
41b08     38 20 01 00 | 	long	@_do_fcircle
41b0c     60 E2 00 00 | 	long	@_do_box
41b10     1C 25 01 00 | 	long	@_do_frame
41b14     58 F8 00 00 | 	long	@_do_color
41b18     AC 22 01 00 | 	long	@_do_for
41b1c     9C 5F 01 00 | 	long	@_do_next
41b20     60 4B 01 00 | 	long	@_do_list
41b24     BC AC 01 00 | 	long	@_do_run
41b28     60 1F 01 00 | 	long	@_do_error
41b2c     68 31 01 00 | 	long	@_do_fast_goto
41b30     58 32 01 00 | 	long	@_do_find_goto
41b34     6C 34 01 00 | 	long	@_do_slow_goto
41b38     84 63 01 00 | 	long	@_do_nothing
41b3c     D8 B0 01 00 | 	long	@_do_save
41b40     FC 4D 01 00 | 	long	@_do_load
41b44     20 7C 01 00 | 	long	@_do_pinwrite
41b48     BC C4 01 00 | 	long	@_do_waitms
41b4c     F0 C5 01 00 | 	long	@_do_waitvbl
41b50     60 37 01 00 | 	long	@_do_if
41b54     F8 1E 01 00 | 	long	@_do_else
41b58     04 DB 01 00 | 	long	@_do_eq
41b5c     A8 E1 01 00 | 	long	@_do_ge
41b60     74 EB 01 00 | 	long	@_do_le
41b64     90 E6 01 00 | 	long	@_do_gt
41b68     50 F0 01 00 | 	long	@_do_lt
41b6c     08 FF 01 00 | 	long	@_do_ne
41b70     24 AA 01 00 | 	long	@_do_rnd
41b74     48 E4 00 00 | 	long	@_do_brun
41b78     E4 DD 00 00 | 	long	@_do_beep
41b7c     94 16 01 00 | 	long	@_do_dir
41b80     54 78 01 00 | 	long	@_do_paper
41b84     1C 3B 01 00 | 	long	@_do_ink
41b88     30 22 01 00 | 	long	@_do_font
41b8c     40 58 01 00 | 	long	@_do_mode
41b90     EC 5B 01 00 | 	long	@_do_mouse
41b94     E8 2F 01 00 | 	long	@_do_gettime
41b98     94 FD 00 00 | 	long	@_do_cursor
41b9c     F4 F4 00 00 | 	long	@_do_click
41ba0     A8 5C 01 00 | 	long	@_do_mousex
41ba4     EC 5C 01 00 | 	long	@_do_mousey
41ba8     20 5C 01 00 | 	long	@_do_mousek
41bac     64 5C 01 00 | 	long	@_do_mousew
41bb0     24 BA 01 00 | 	long	@_do_sin
41bb4     5C BD 01 00 | 	long	@_do_stick
41bb8     EC BE 01 00 | 	long	@_do_strig
41bbc     7C BB 01 00 | 	long	@_do_sprite
41bc0     B8 11 01 00 | 	long	@_do_defsprite
41bc4     94 2E 01 00 | 	long	@_do_getpixel
41bc8     98 C4 01 00 | 	long	@_do_waitclock
41bcc     CC F8 01 00 | 	long	@_do_negative
41bd0     24 97 01 00 | 	long	@_do_rdpin
41bd4     48 AC 01 00 | 	long	@_do_rqpin
41bd8     4C 7A 01 00 | 	long	@_do_pinread
41bdc     FC C5 01 00 | 	long	@_do_wrpin
41be0     7C C6 01 00 | 	long	@_do_wxpin
41be4     FC C6 01 00 | 	long	@_do_wypin
41be8     8C 79 01 00 | 	long	@_do_pinfloat
41bec     0C 7A 01 00 | 	long	@_do_pinlo
41bf0     CC 79 01 00 | 	long	@_do_pinhi
41bf4     D0 7A 01 00 | 	long	@_do_pinstart
41bf8     E0 7B 01 00 | 	long	@_do_pintoggle
41bfc     C4 8A 01 00 | 	long	@_do_position
41c00     70 FC 00 00 | 	long	@_do_cos
41c04     7C C0 01 00 | 	long	@_do_tan
41c08     CC DC 00 00 | 	long	@_do_atn
41c0c     BC DB 00 00 | 	long	@_do_asin
41c10     4C D9 00 00 | 	long	@_do_acos
41c14     68 BC 01 00 | 	long	@_do_sqr
41c18     1C 21 01 00 | 	long	@_do_fill
41c1c     C8 08 01 00 | 	long	@_do_defsnd
41c20     C8 FD 00 00 | 	long	@_do_defenv
41c24     FC 96 01 00 | 	long	@_do_rad
41c28     2C 15 01 00 | 	long	@_do_deg
41c2c     9C 3B 01 00 | 	long	@_do_int
41c30     A8 7C 01 00 | 	long	@_do_play
41c34     7C B4 01 00 | 	long	@_do_setdelay
41c38     24 B5 01 00 | 	long	@_do_setenv
41c3c     CC B5 01 00 | 	long	@_do_setlen
41c40     74 B6 01 00 | 	long	@_do_setpan
41c44     C4 B7 01 00 | 	long	@_do_setvol
41c48     6C B8 01 00 | 	long	@_do_setwave
41c4c     1C B7 01 00 | 	long	@_do_setsustain
41c50     1C A7 01 00 | 	long	@_do_release
41c54     80 2C 01 00 | 	long	@_do_getenvsustain
41c58     B4 89 01 00 | 	long	@_do_poke
41c5c     2C 1D 01 00 | 	long	@_do_dpoke
41c60     DC 54 01 00 | 	long	@_do_lpoke
41c64     DC 78 01 00 | 	long	@_do_peek
41c68     80 1C 01 00 | 	long	@_do_dpeek
41c6c     30 54 01 00 | 	long	@_do_lpeek
41c70     78 26 01 00 | 	long	@_do_fre
41c74     90 2D 01 00 | 	long	@_do_getnotevalue
41c78     3C D3 01 00 | 	long	@_do_getaddr
41c7c     44 38 01 00 | 	long	@_do_inkey
41c80     CC D8 00 00 | 	long	@_do_abs
41c84     FC 35 01 00 | 	long	@_do_hex
41c88     FC E0 00 00 | 	long	@_do_bin
41c8c     8C C1 01 00 | 	long	@_do_val
41c90     7C F2 00 00 | 	long	@_do_chr
41c94     5C DA 00 00 | 	long	@_do_asc
41c98     60 48 01 00 | 	long	@_do_left
41c9c     98 A8 01 00 | 	long	@_do_right
41ca0     B4 55 01 00 | 	long	@_do_mid
41ca4     EC 49 01 00 | 	long	@_do_len
41ca8     50 30 01 00 | 	long	@_do_gosub
41cac     EC A7 01 00 | 	long	@_do_return
41cb0     1C 1F 01 00 | 	long	@_do_end
41cb4     8C 8A 01 00 | 	long	@_do_pop
41cb8     B4 52 01 00 | 	long	@_do_log
41cbc     70 F0 00 00 | 	long	@_do_changevol
41cc0     50 F1 00 00 | 	long	@_do_changewav
41cc4     60 EF 00 00 | 	long	@_do_changepan
41cc8     44 EC 00 00 | 	long	@_do_changefreq
41ccc     14 B9 01 00 | 	long	@_do_shutup
41cd0     F4 AB 01 00 | 	long	@_do_round
41cd4     50 1F 01 00 | 	long	@_do_enter
41cd8     AC 64 01 00 | 	long	@_do_open
41cdc     20 F5 00 00 | 	long	@_do_close
41ce0     DC 26 01 00 | 	long	@_do_get
41ce4     BC 91 01 00 | 	long	@_do_put
41ce8     84 E6 00 00 | 	long	@_do_cd
41cec     54 15 01 00 | 	long	@_do_delete
41cf0     80 57 01 00 | 	long	@_do_mkdir
41cf4     F8 DE 00 00 | 	long	@_do_blit
41cf8     44 26 01 00 | 	long	@_do_framebuf
41cfc     88 63 01 00 | 	long	@_do_on
41d00     34 BB 01 00 | 	long	@_do_skip
41d04     58 3C 01 00 | 	long	@_do_input
41d08     88 99 01 00 | 	long	@_do_read
41d0c     B4 A7 01 00 | 	long	@_do_restore
41d10     D4 70 01 00 | 	long	@_do_padx
41d14     54 73 01 00 | 	long	@_do_pady
41d18     D4 75 01 00 | 	long	@_do_padz
41d1c     54 69 01 00 | 	long	@_do_padrx
41d20     D4 6B 01 00 | 	long	@_do_padry
41d24     54 6E 01 00 | 	long	@_do_padrz
41d28     C4 67 01 00 | 	long	@_do_padh
41d2c     90 F8 00 00 | 	long	@_do_copy
41d30     DC F5 00 00 | 	long	@_do_coginit
41d34     18 F8 00 00 | 	long	@_do_cogstop
41d38     68 4D 02 00 | 	long	@_hg010b_spin2_putchar
41d3c     54 63 03 00 | 	long	@__struct___bas_wrap_sender_tx
41d40     98 63 03 00 | 	long	@__struct___bas_wrap_sender_rx
41d44     E0 63 03 00 | 	long	@__struct___bas_wrap_sender_close
41d48     84 62 03 00 | 	long	@__struct__s_vfs_file_t_putchar
41d4c     F4 62 03 00 | 	long	@__struct__s_vfs_file_t_getchar
41d50     3C 62 03 00 | 	long	@___strs_cl_pfunc
41d54     D0 BF 02 00 | 	long	@__system____root_opendir
41d58     6C C0 02 00 | 	long	@__system____root_closedir
41d5c     E8 BF 02 00 | 	long	@__system____root_readdir
41d60     74 C0 02 00 | 	long	@__system____root_stat
41d64     C0 B8 02 00 | 	long	@__system____default_putc
41d68     44 B8 02 00 | 	long	@__system____default_getc
41d6c     68 B9 02 00 | 	long	@__system____default_flush
41d70     40 4D 03 00 | 	long	@_fatfs_cc_v_close
41d74     5C 51 03 00 | 	long	@_fatfs_cc_v_read
41d78     70 52 03 00 | 	long	@_fatfs_cc_v_write
41d7c     50 53 03 00 | 	long	@_fatfs_cc_v_lseek
41d80     D8 53 03 00 | 	long	@_fatfs_cc_v_ioctl
41d84     2C 54 03 00 | 	long	@_fatfs_cc_v_open
41d88     A4 4C 03 00 | 	long	@_fatfs_cc_v_creat
41d8c     84 4D 03 00 | 	long	@_fatfs_cc_v_opendir
41d90     F8 4D 03 00 | 	long	@_fatfs_cc_v_closedir
41d94     38 4E 03 00 | 	long	@_fatfs_cc_v_readdir
41d98     6C 4F 03 00 | 	long	@_fatfs_cc_v_stat
41d9c     EC 53 03 00 | 	long	@_fatfs_cc_v_mkdir
41da0     0C 54 03 00 | 	long	@_fatfs_cc_v_rmdir
41da4     FC 53 03 00 | 	long	@_fatfs_cc_v_remove
41da8     1C 54 03 00 | 	long	@_fatfs_cc_v_rename
41dac     3C 55 03 00 | 	long	@_fatfs_cc_v_init
41db0     44 55 03 00 | 	long	@_fatfs_cc_v_deinit
41db4     10 6A 02 00 | 	long	@__system___tx
41db8     50 6A 02 00 | 	long	@__system___rx
41dbc     E0 CB 02 00 | 	long	@__system___rxtxioctl_0768
41dc0     38 CC 02 00 | 	long	@__system____dummy_flush_0769
41dc4     0C 55 03 00 | 	long	@_fatfs_cc_v_flush
41dc8                 | __heap_base
41dc8     00 00 00 00 
      ...             
594c8     00 00 00 00 
594cc     00 00 00 00 | 	long	0[24002]
594d0                 | objmem
594d0     00 00 00 00 
      ...             
639e8     00 00 00 00 
639ec     00 00 00 00 | 	long	0[10568]
639f0                 | stackspace
639f0     00 00 00 00 | 	long	0[1]
639f4 100             | 	org	COG_BSS_START
639f4 100             | _var01
639f4 100             | 	res	1
639f4 101             | _var02
639f4 101             | 	res	1
639f4 102             | _var03
639f4 102             | 	res	1
639f4 103             | _var04
639f4 103             | 	res	1
639f4 104             | _var05
639f4 104             | 	res	1
639f4 105             | _var06
639f4 105             | 	res	1
639f4 106             | _var07
639f4 106             | 	res	1
639f4 107             | _var08
639f4 107             | 	res	1
639f4 108             | _var09
639f4 108             | 	res	1
639f4 109             | arg01
639f4 109             | 	res	1
639f4 10a             | arg02
639f4 10a             | 	res	1
639f4 10b             | arg03
639f4 10b             | 	res	1
639f4 10c             | arg04
639f4 10c             | 	res	1
639f4 10d             | arg05
639f4 10d             | 	res	1
639f4 10e             | arg06
639f4 10e             | 	res	1
639f4 10f             | arg07
639f4 10f             | 	res	1
639f4 110             | arg08
639f4 110             | 	res	1
639f4 111             | arg09
639f4 111             | 	res	1
639f4 112             | arg10
639f4 112             | 	res	1
639f4 113             | local01
639f4 113             | 	res	1
639f4 114             | local02
639f4 114             | 	res	1
639f4 115             | local03
639f4 115             | 	res	1
639f4 116             | local04
639f4 116             | 	res	1
639f4 117             | local05
639f4 117             | 	res	1
639f4 118             | local06
639f4 118             | 	res	1
639f4 119             | local07
639f4 119             | 	res	1
639f4 11a             | local08
639f4 11a             | 	res	1
639f4 11b             | local09
639f4 11b             | 	res	1
639f4 11c             | local10
639f4 11c             | 	res	1
639f4 11d             | local11
639f4 11d             | 	res	1
639f4 11e             | local12
639f4 11e             | 	res	1
639f4 11f             | local13
639f4 11f             | 	res	1
639f4 120             | local14
639f4 120             | 	res	1
639f4 121             | local15
639f4 121             | 	res	1
639f4 122             | local16
639f4 122             | 	res	1
639f4 123             | local17
639f4 123             | 	res	1
639f4 124             | local18
639f4 124             | 	res	1
639f4 125             | local19
639f4 125             | 	res	1
639f4 126             | local20
639f4 126             | 	res	1
639f4 127             | local21
639f4 127             | 	res	1
639f4 128             | local22
639f4 128             | 	res	1
639f4 129             | local23
639f4 129             | 	res	1
639f4 12a             | local24
639f4 12a             | 	res	1
639f4 12b             | local25
639f4 12b             | 	res	1
639f4 12c             | local26
639f4 12c             | 	res	1
639f4 12d             | local27
639f4 12d             | 	res	1
639f4 12e             | local28
639f4 12e             | 	res	1
639f4 12f             | local29
639f4 12f             | 	res	1
639f4 130             | local30
639f4 130             | 	res	1
639f4 131             | local31
639f4 131             | 	res	1
639f4 132             | local32
639f4 132             | 	res	1
639f4 133             | local33
639f4 133             | 	res	1
639f4 134             | local34
639f4 134             | 	res	1
639f4 135             | local35
639f4 135             | 	res	1
639f4 136             | local36
639f4 136             | 	res	1
639f4 137             | local37
639f4 137             | 	res	1
639f4 138             | local38
639f4 138             | 	res	1
639f4 139             | local39
639f4 139             | 	res	1
639f4 13a             | local40
639f4 13a             | 	res	1
639f4 13b             | local41
639f4 13b             | 	res	1
639f4 13c             | local42
639f4 13c             | 	res	1
639f4 13d             | local43
639f4 13d             | 	res	1
639f4 13e             | local44
639f4 13e             | 	res	1
639f4 13f             | local45
639f4 13f             | 	res	1
639f4 140             | local46
639f4 140             | 	res	1
639f4 141             | local47
639f4 141             | 	res	1
639f4 142             | local48
639f4 142             | 	res	1
639f4 143             | local49
639f4 143             | 	res	1
639f4 144             | local50
639f4 144             | 	res	1
639f4 145             | local51
639f4 145             | 	res	1
639f4 146             | local52
639f4 146             | 	res	1
639f4 147             | local53
639f4 147             | 	res	1
639f4 148             | muldiva_
639f4 148             | 	res	1
639f4 149             | muldivb_
639f4 149             | 	res	1
639f4 14a             | 	fit	480
639f4 14a             | 
