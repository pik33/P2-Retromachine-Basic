con
	_clkfreq = 160000000
	_clkmode = 16779259
	fbReadOnly = 1
	fbHidden = 2
	fbSystem = 4
	fbDirectory = 16
	fbArchive = 32
	fbNormal = 33
dat
	nop
	cogid	pa
	coginit	pa,##$404
	orgh	$10
	long	0	'reserved
	long	0 ' clock frequency: will default to 160000000
	long	0 ' clock mode: will default to $10007fb
	orgh	$400
 _ret_	mov	result1, #0
	org	0
entry
	cmp	ptra, #0 wz
 if_ne	jmp	#spininit
	mov	ptra, ptr_stackspace_
	rdlong	pa, #20 wz
 if_ne	jmp	#skip_clock_set_
	hubset	#0
	hubset	##16779256
	waitx	##200000
	mov	pa, ##16779259
	hubset	pa
	wrlong	pa, #24
	wrlong	##160000000, #20
	jmp	#skip_clock_set_
	orgf	128
skip_clock_set_
	call	#_program
cogexit
	waitx	##160000
	cogid	arg01
	cogstop	arg01
spininit
	rdlong	objptr, ptra++
	rdlong	result1, ptra++
	setq	#3
	rdlong	arg01, ptra
	sub	ptra, #4
	call	result1
	jmp	#cogexit
FCACHE_LOAD_
    mov	fcache_tmpb_,ptrb
    pop	ptrb
    altd	pa,ret_instr_
    mov	 0-0, ret_instr_
    setq	pa
    rdlong	$0, ptrb++
    push	ptrb
    mov ptrb,fcache_tmpb_
    jmp	#\$0 ' jmp to cache
ret_instr_
    _ret_ cmp inb,#0
fcache_tmpb_
    long 0
fcache_load_ptr_
    long FCACHE_LOAD_
builtin_bytefill_
        shr	arg03, #1 wc
 if_c   wrbyte	arg02, arg01
 if_c   add	arg01, #1
        movbyts	arg02, #0
builtin_wordfill_
        shr	arg03, #1 wc
 if_c   wrword	arg02, arg01
 if_c   add	arg01, #2
        setword	arg02, arg02, #1
builtin_longfill_
        wrfast	#0,arg01
        cmp	arg03, #0 wz
 if_nz  rep	#1, arg03
 if_nz  wflong	arg02
        ret
COUNT_
    long 0
RETADDR_
    long 0
fp
    long 0
pushregs_
    pop  pa
    pop  RETADDR_
    tjz  COUNT_, #pushregs_done_
    altd  COUNT_, #511
    setq #0-0
    wrlong local01, ptra++
pushregs_done_
    setq #2 ' push 3 registers starting at COUNT_
    wrlong COUNT_, ptra++
    mov    fp, ptra
    jmp  pa
 popregs_
    pop    pa
    setq   #2
    rdlong COUNT_, --ptra
    djf    COUNT_, #popregs__ret
    setq   COUNT_
    rdlong local01, --ptra
popregs__ret
    push   RETADDR_
    jmp    pa

divide_
       abs     muldivb_,muldivb_     wcz      'abs(y)
       wrc     itmp2_                         'store sign of y
       abs     muldiva_,muldiva_     wc       'abs(x)
       qdiv    muldiva_, muldivb_             'queue divide
 if_c  xor     itmp2_,#1                      'store sign of x
       getqx   muldivb_                       'get quotient
       getqy   muldiva_                       'get remainder
       negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
       testb   itmp2_,#0             wc       'restore sign, division result
 _ret_ negc    muldivb_,muldivb_     
__pc long 0
__setjmp
    pop __pc
    mov result1, #0
    mov result2, #0
    mov abortchain, arg01
    wrlong fp, arg01
    add arg01, #4
    wrlong ptra, arg01
    add arg01, #4
    wrlong objptr, arg01
    add arg01, #4
    wrlong __pc, arg01
    jmp __pc
__unwind_pc long 0
__unwind_stack
   pop  __unwind_pc
__unwind_loop
   cmp  arg01, arg02 wz
  if_z jmp #__unwind_stack_ret
   mov   ptra, arg01
   call  #popregs_
   mov   arg01, fp
   jmp   #__unwind_loop
__unwind_stack_ret
   jmp  __unwind_pc
__longjmp
    pop __pc
    cmp    arg01, #0 wz
 if_z jmp #nocatch
    mov result1, arg02
    mov result2, #1
    rdlong arg02, arg01
    add arg01, #4
    rdlong ptra, arg01
    add arg01, #4
    rdlong objptr, arg01
    add arg01, #4
    rdlong __pc, arg01
    mov arg01, fp
    call #__unwind_stack
__longjmp_ret
    jmp  __pc
nocatch
    cmp arg03, #0 wz
 if_z jmp #cogexit
    jmp #__longjmp_ret

__heap_ptr
	long	@__heap_base
__methods__
	long	@__methodtable__
abortchain
	long	0
itmp1_
	long	0
itmp2_
	long	0
objptr
	long	@objmem
ptr___system__dat__
	long	@__system__dat_
ptr__fatfs_cc_dat__
	long	@_fatfs_cc_dat_
ptr_stackspace_
	long	@stackspace
result1
	long	0
result2
	long	1
COG_BSS_START
	fit	480
	orgh
hubentry

_program
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, ##@LR__1630
	mov	arg01, #61
	mov	arg02, #60
	mov	arg03, #59
	mov	arg04, #58
	call	#__system___vfs_open_sdcardx
	mov	arg02, result1
	mov	arg01, local01
	call	#__system___mount
	mov	arg01, ##@LR__1631
	call	#__system___chdir
	mov	local01, ##@LR__1632
	wrlong	local01, objptr
' 
' close #9: open "nonexistingfile" for input as #9
	mov	arg01, #9
	call	#__system__close
	mov	arg02, ##@LR__1633
	mov	arg01, #9
	mov	arg03, #0
	call	#__system___basic_open_string
	add	ptr___system__dat__, #32
	rdlong	local01, ptr___system__dat__
	sub	ptr___system__dat__, #32
	add	objptr, #4
	wrlong	local01, objptr
	sub	objptr, #4
	mov	arg01, #0
	call	#__system___getiolock_0121
	mov	arg01, result1
	call	#__system___lockmem
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #4
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #9
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local01, #0
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #4
	call	#__system___strerror
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0121
	wrlong	#0, result1
	mov	arg01, #9
	call	#__system__close
	mov	arg01, ##@LR__1634
	call	#__system___chdir
	add	ptr___system__dat__, #32
	rdlong	local01, ptr___system__dat__
	sub	ptr___system__dat__, #32
	add	objptr, #4
	wrlong	local01, objptr
	sub	objptr, #4
	mov	arg01, #0
	call	#__system___getiolock_0121
	mov	arg01, result1
	call	#__system___lockmem
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #4
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #9
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local01, #0
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #4
	call	#__system___strerror
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0121
	wrlong	#0, result1
	mov	arg01, ##@LR__1635
	call	#__system___chdir
' chdir "/sd/bas"
' 
' close #9: open "mousetheremin.bas" for input as #9
	mov	arg01, #9
	call	#__system__close
	mov	arg02, ##@LR__1636
	mov	arg01, #9
	mov	arg03, #0
	call	#__system___basic_open_string
	add	ptr___system__dat__, #32
	rdlong	local01, ptr___system__dat__
	sub	ptr___system__dat__, #32
	add	objptr, #4
	wrlong	local01, objptr
	sub	objptr, #4
	mov	arg01, #0
	call	#__system___getiolock_0121
	mov	arg01, result1
	call	#__system___lockmem
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #4
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #9
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local01, #0
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #4
	call	#__system___strerror
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0121
	wrlong	#0, result1
	mov	arg01, #9
	call	#__system__close
	mov	arg01, ##@LR__1637
	call	#__system___chdir
	add	ptr___system__dat__, #32
	rdlong	local01, ptr___system__dat__
	sub	ptr___system__dat__, #32
	add	objptr, #4
	wrlong	local01, objptr
	sub	objptr, #4
	mov	arg01, #0
	call	#__system___getiolock_0121
	mov	arg01, result1
	call	#__system___lockmem
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, #4
	mov	arg01, #0
	mov	arg03, #0
	mov	arg04, #10
	call	#__system___basic_print_integer
	mov	arg01, #0
	mov	arg02, #9
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	local01, #0
	add	objptr, #4
	rdlong	arg01, objptr
	sub	objptr, #4
	call	#__system___strerror
	mov	arg02, result1
	mov	arg01, local01
	mov	arg03, #0
	call	#__system___basic_print_string
	mov	arg01, #0
	mov	arg02, #10
	mov	arg03, #0
	call	#__system___basic_print_char
	mov	arg01, #0
	call	#__system___getiolock_0121
	wrlong	#0, result1
	mov	ptra, fp
	call	#popregs_
_program_ret
	ret
hubexit
	jmp	#cogexit

__system___setbaud
	rdlong	muldiva_, #20
	mov	muldivb_, arg01
	call	#divide_
	callpa	#(@LR__0002-@LR__0001)>>2,fcache_load_ptr_
LR__0001
	rdpin	result1, #62 wc
	subx	result2, result2
 if_b	jmp	#LR__0001
LR__0002
	dirl	#62
	dirl	#63
	wrlong	muldivb_, ptr___system__dat__
	shl	muldivb_, #16
	mov	arg02, #7
	add	arg02, muldivb_
	wrpin	#124, #62
	wxpin	arg02, #62
	wrpin	#62, #63
	add	arg02, #20
	wxpin	arg02, #63
	dirh	#62
	dirh	#63
__system___setbaud_ret
	ret

__system___txraw
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	callpa	#(@LR__0011-@LR__0010)>>2,fcache_load_ptr_
LR__0010
	rdpin	result1, #62 wc
	subx	result2, result2
 if_b	jmp	#LR__0010
LR__0011
	rdlong	result1, ptr___system__dat__ wz
 if_e	mov	arg01, ##230400
 if_e	call	#__system___setbaud
	drvl	#62
	wypin	local01, #62
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__system___txraw_ret
	ret

__system___rxraw
	mov	COUNT_, #13
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, ptr___system__dat__ wz
 if_e	mov	arg01, ##230400
 if_e	call	#__system___setbaud
	cmp	local01, #0 wz
 if_e	jmp	#LR__0020
	rdlong	local03, #20
	shr	local03, #10
	qmul	local01, local03
	getct	result1
	getqx	local04
	add	result1, local04
	mov	local05, result1
	jmp	#LR__0021
LR__0020
	mov	local05, #0
LR__0021
	neg	local06, #1
	mov	local07, #63
	mov	local08, #0
	add	ptr___system__dat__, #4
	rdlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, #4
LR__0022
	testb	local09, #8 wc
	testbn	local09, #9 andc
	shr	local09, #10
 if_b	mov	local08, #1
 if_ae	testp	#63 wz
 if_nc_and_z	mov	local08, #1
 if_nc_and_z	rdpin	local09, #63
 if_nc_and_z	shr	local09, #4
LR__0023
	mov	local02, #0
	cmp	local08, #0 wz
 if_ne	neg	local02, #1
	mov	local10, #0
	mov	local03, #0
	cmp	local01, #0 wz
 if_ne	neg	local03, #1
	mov	local04, #0
	mov	local11, #0
	mov	local12, local05
	getct	result1
	mov	local13, result1
	sub	local12, local13
	cmps	local12, #0 wc
 if_b	not	local11, #0
	cmp	local11, #0 wz
 if_ne	not	local04, #0
	test	local03, local04 wz
 if_ne	not	local10, #0
	or	local02, local10 wz
 if_e	jmp	#LR__0022
	cmp	local08, #0 wz
 if_ne	mov	local06, local09
 if_ne	getbyte	local06, local06, #0
	add	ptr___system__dat__, #4
	wrlong	local09, ptr___system__dat__
	sub	ptr___system__dat__, #4
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___rxraw_ret
	ret

__system___getus
	getct	result2 wc
	getct	_var01
	add	ptr___system__dat__, #16
	rdlong	_var02, ptr___system__dat__ wz
	sub	ptr___system__dat__, #16
 if_ne	jmp	#LR__0030
	rdlong	_var02, #20
	qdiv	_var02, ##1000000
	add	ptr___system__dat__, #16
	getqx	result1
	mov	_var02, result1
	wrlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #16
LR__0030
	qdiv	result2, _var02
	getqy	result2
	setq	result2
	qdiv	_var01, _var02
	getqx	result1
__system___getus_ret
	ret

__system____builtin_memmove
	mov	_var01, arg01
	cmps	arg01, arg02 wc
 if_b	jmp	#LR__0040
	mov	_var02, arg02
	add	_var02, arg03
	cmps	arg01, _var02 wc
 if_b	jmp	#LR__0046
LR__0040
	mov	_var03, arg03
	shr	_var03, #2 wz
 if_e	jmp	#LR__0045
	callpa	#(@LR__0043-@LR__0041)>>2,fcache_load_ptr_
LR__0041
	rep	@LR__0044, _var03
LR__0042
	rdlong	_var03, arg02
	wrlong	_var03, arg01
	add	arg01, #4
	add	arg02, #4
LR__0043
LR__0044
LR__0045
	test	arg03, #2 wz
 if_ne	rdword	_var02, arg02
 if_ne	wrword	_var02, arg01
 if_ne	add	arg01, #2
 if_ne	add	arg02, #2
	test	arg03, #1 wz
 if_ne	rdbyte	_var02, arg02
 if_ne	wrbyte	_var02, arg01
	jmp	#LR__0052
LR__0046
	add	arg01, arg03
	add	arg02, arg03
	mov	_var04, arg03 wz
 if_e	jmp	#LR__0051
	callpa	#(@LR__0049-@LR__0047)>>2,fcache_load_ptr_
LR__0047
	rep	@LR__0050, _var04
LR__0048
	sub	arg01, #1
	sub	arg02, #1
	rdbyte	_var02, arg02
	wrbyte	_var02, arg01
LR__0049
LR__0050
LR__0051
LR__0052
	mov	result1, _var01
__system____builtin_memmove_ret
	ret

__system____builtin_strcpy
	mov	_var01, arg01
	callpa	#(@LR__0061-@LR__0060)>>2,fcache_load_ptr_
LR__0060
	rdbyte	result1, arg02 wz
	wrbyte	result1, arg01
	add	arg02, #1
	add	arg01, #1
 if_ne	jmp	#LR__0060
LR__0061
	mov	result1, _var01
__system____builtin_strcpy_ret
	ret

__system____topofstack
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #8
	add	fp, #4
	wrlong	arg01, fp
	mov	result1, fp
	sub	fp, #4
	mov	ptra, fp
	call	#popregs_
__system____topofstack_ret
	ret

__system___lockmem
	mov	result1, #0
	cogid	result1
	add	result1, #256
LR__0070
	rdlong	_var01, arg01 wz
 if_e	wrlong	result1, arg01
 if_e	rdlong	_var01, arg01
 if_e	rdlong	_var01, arg01
	cmp	_var01, result1 wz
 if_ne	jmp	#LR__0070
__system___lockmem_ret
	ret

__system___tx
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	cmp	local01, #10 wz
 if_ne	jmp	#LR__0080
	add	ptr___system__dat__, #8
	rdlong	local02, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	local02, #2 wz
 if_ne	mov	arg01, #13
 if_ne	call	#__system___txraw
LR__0080
	mov	arg01, local01
	call	#__system___txraw
	mov	ptra, fp
	call	#popregs_
__system___tx_ret
	ret

__system___rx
	mov	COUNT_, #1
	call	#pushregs_
LR__0090
	mov	arg01, #0
	call	#__system___rxraw
	mov	local01, result1
	cmp	local01, ##-1 wz
 if_e	jmp	#LR__0090
	cmp	local01, #13 wz
 if_ne	jmp	#LR__0091
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	result1, #2 wz
 if_ne	mov	local01, #10
LR__0091
	add	ptr___system__dat__, #8
	rdlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	test	arg01, #1 wz
 if_e	jmp	#LR__0094
	cmp	local01, #127 wz
 if_ne	jmp	#LR__0092
	mov	arg01, #8
	call	#__system___tx
	jmp	#LR__0093
LR__0092
	mov	arg01, local01
	call	#__system___tx
LR__0093
LR__0094
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system___rx_ret
	ret

__system___waitms
	mov	_var01, arg01
	getct	_var02
	rdlong	_var03, #20
	callpa	#(@LR__0101-@LR__0100)>>2,fcache_load_ptr_
LR__0100
	cmps	_var01, ##1000 wc
 if_b	jmp	#LR__0102
	add	_var02, _var03
	mov	arg01, _var02
	addct1	arg01, #0
	waitct1
	sub	_var01, ##1000
	jmp	#LR__0100
LR__0101
LR__0102
	cmps	_var01, #1 wc
 if_b	jmp	#LR__0103
	qmul	_var01, _var03
	mov	arg03, ##1000
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
	getqx	arg01
	addct1	arg01, _var02
	waitct1
LR__0103
__system___waitms_ret
	ret

__system___waitus
	mov	_var01, arg01
	getct	_var02
	rdlong	_var03, #20
	callpa	#(@LR__0111-@LR__0110)>>2,fcache_load_ptr_
LR__0110
	cmps	_var01, ##1000000 wc
 if_b	jmp	#LR__0112
	add	_var02, _var03
	mov	arg01, _var02
	addct1	arg01, #0
	waitct1
	sub	_var01, ##1000000
	jmp	#LR__0110
LR__0111
LR__0112
	cmps	_var01, #1 wc
 if_b	jmp	#LR__0113
	qmul	_var01, _var03
	mov	arg03, ##1000000
	getqy	result1
	getqx	arg01
	setq	result1
	qdiv	arg01, arg03
	getqx	result1
	addct1	_var02, result1
	waitct1
LR__0113
__system___waitus_ret
	ret

__system___mount
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	neg	local03, #1
 if_e	neg	result1, #1
 if_e	jmp	#LR__0135
	rdbyte	result1, local01
	cmp	result1, #47 wz
 if_ne	jmp	#LR__0122
	mov	arg01, local01
	mov	local04, arg01
	callpa	#(@LR__0121-@LR__0120)>>2,fcache_load_ptr_
LR__0120
	rdbyte	result1, local04 wz
 if_ne	add	local04, #1
 if_ne	jmp	#LR__0120
LR__0121
	sub	local04, arg01
	mov	result1, local04
	cmps	result1, #16 wc
 if_b	jmp	#LR__0123
LR__0122
	add	ptr___system__dat__, #32
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #32
	neg	result1, #1
	jmp	#LR__0135
LR__0123
	mov	local05, #0
LR__0124
	cmps	local05, #4 wc
 if_ae	jmp	#LR__0129
	mov	arg01, local05
	shl	arg01, #2
	add	ptr___system__dat__, #100
	add	arg01, ptr___system__dat__
	rdlong	result1, arg01 wz
	sub	ptr___system__dat__, #100
 if_e	cmps	local03, #0 wc
 if_c_and_z	mov	local03, local05
 if_c_and_z	jmp	#LR__0128
	mov	arg01, local05
	shl	arg01, #2
	add	ptr___system__dat__, #100
	add	arg01, ptr___system__dat__
	rdlong	arg01, arg01
	sub	ptr___system__dat__, #100
	mov	local04, arg01
	callpa	#(@LR__0126-@LR__0125)>>2,fcache_load_ptr_
LR__0125
	rdbyte	result1, local04 wz
 if_ne	add	local04, #1
 if_ne	jmp	#LR__0125
LR__0126
	sub	local04, arg01
	mov	local06, local04
	mov	arg01, local06
	add	arg01, local01
	rdbyte	result1, arg01
	cmp	result1, #47 wz
 if_ne	mov	local07, local06
 if_ne	add	local07, local01
 if_ne	rdbyte	arg01, local07 wz
 if_ne	jmp	#LR__0127
	mov	arg03, local05
	shl	arg03, #2
	add	ptr___system__dat__, #100
	add	arg03, ptr___system__dat__
	rdlong	arg02, arg03
	mov	arg01, local01
	mov	arg03, local06
	sub	ptr___system__dat__, #100
	call	#__system__strncmp
	cmp	result1, #0 wz
 if_e	mov	local03, local05
 if_e	jmp	#LR__0129
LR__0127
LR__0128
	add	local05, #1
	jmp	#LR__0124
LR__0129
	cmp	local03, ##-1 wz
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#11, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__0135
	mov	local05, local03
	mov	local07, local05
	shl	local07, #2
	add	ptr___system__dat__, #116
	add	local07, ptr___system__dat__
	rdlong	local06, local07 wz
	sub	ptr___system__dat__, #116
 if_e	jmp	#LR__0130
	add	local06, #76
	rdlong	local07, local06 wz
	sub	local06, #76
 if_e	jmp	#LR__0130
	add	local06, #76
	rdlong	local07, local06
	mov	local03, local07
	zerox	local07, #19
	shr	local03, #20
	shl	local03, #2
	add	local03, __methods__
	rdlong	local03, local03
	mov	local06, local05
	shl	local06, #2
	add	ptr___system__dat__, #100
	add	local06, ptr___system__dat__
	rdlong	arg01, local06
	mov	local06, objptr
	mov	objptr, local07
	sub	ptr___system__dat__, #100
	call	local03
	mov	objptr, local06
LR__0130
	mov	local08, local05
	shl	local08, #2
	add	ptr___system__dat__, #116
	add	local08, ptr___system__dat__
	wrlong	local02, local08
	cmp	local02, #0 wz
	sub	ptr___system__dat__, #116
 if_ne	jmp	#LR__0131
	shl	local05, #2
	add	ptr___system__dat__, #100
	add	local05, ptr___system__dat__
	wrlong	#0, local05
	sub	ptr___system__dat__, #100
	jmp	#LR__0134
LR__0131
	mov	local09, local05
	shl	local09, #4
	add	ptr___system__dat__, #36
	add	local09, ptr___system__dat__
	mov	arg01, local09
	mov	arg02, local01
	mov	arg03, #16
	sub	ptr___system__dat__, #36
	call	#__system__strncpy
	add	local02, #72
	rdlong	local08, local02 wz
	sub	local02, #72
 if_e	jmp	#LR__0133
	add	local02, #72
	rdlong	local08, local02
	mov	local10, local08
	zerox	local08, #19
	shr	local10, #20
	shl	local10, #2
	add	local10, __methods__
	rdlong	local10, local10
	mov	arg01, local09
	mov	local11, objptr
	mov	objptr, local08
	call	local10
	mov	objptr, local11
	mov	arg01, result1 wz
 if_e	jmp	#LR__0132
	mov	local08, local05
	shl	local08, #2
	add	ptr___system__dat__, #116
	add	local08, ptr___system__dat__
	wrlong	#0, local08
	shl	local05, #2
	sub	ptr___system__dat__, #16
	add	local05, ptr___system__dat__
	wrlong	#0, local05
	neg	arg01, arg01 wz
	sub	ptr___system__dat__, #68
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #32
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0135
LR__0132
LR__0133
	shl	local05, #2
	add	ptr___system__dat__, #100
	add	local05, ptr___system__dat__
	wrlong	local09, local05
	sub	ptr___system__dat__, #100
LR__0134
	mov	result1, #0
LR__0135
	mov	ptra, fp
	call	#popregs_
__system___mount_ret
	ret

__system___chdir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #8
	call	#__system__stat
	add	fp, #60
	wrlong	result1, fp
	sub	fp, #60
	cmp	result1, #0 wz
 if_ne	add	fp, #60
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #60
 if_ne	jmp	#LR__0142
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #16
	and	arg01, ##61440
	cmp	arg01, ##4096 wz
 if_ne	add	ptr___system__dat__, #32
 if_ne	wrlong	#13, ptr___system__dat__
 if_ne	sub	ptr___system__dat__, #32
 if_ne	neg	result1, #1
 if_ne	jmp	#LR__0142
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	rdbyte	arg03, arg03
	cmp	arg03, #47 wz
 if_ne	jmp	#LR__0140
	add	ptr___system__dat__, #132
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #132
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	mov	arg03, #256
	call	#__system__strncpy
	jmp	#LR__0141
LR__0140
	add	ptr___system__dat__, #388
	mov	arg01, ptr___system__dat__
	add	fp, #56
	wrlong	arg01, fp
	sub	fp, #56
	sub	ptr___system__dat__, #256
	mov	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #132
	mov	arg03, #256
	call	#__system__strncpy
	add	fp, #56
	rdlong	arg01, fp
	sub	fp, #52
	rdlong	arg02, fp
	sub	fp, #4
	add	ptr___system__dat__, #132
	mov	arg03, ptr___system__dat__
	sub	ptr___system__dat__, #132
	call	#__system____getvfsforfile
LR__0141
	mov	result1, #0
LR__0142
	mov	ptra, fp
	call	#popregs_
__system___chdir_ret
	ret

__system____getvfsforfile
	mov	COUNT_, #14
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
LR__0150
	rdbyte	result1, local02
	cmp	result1, #47 wz
 if_e	add	local02, #1
 if_e	rdbyte	local04, local02
 if_e	sub	local02, #1
 if_e	cmp	local04, #47 wz
 if_e	add	local02, #1
 if_e	jmp	#LR__0150
LR__0151
	rdbyte	local04, local02
	cmp	local04, #47 wz
 if_ne	jmp	#LR__0152
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncpy
	jmp	#LR__0154
LR__0152
	add	ptr___system__dat__, #132
	mov	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #132
	mov	arg01, local01
	mov	arg03, #256
	call	#__system__strncpy
	rdbyte	local04, local02 wz
 if_e	jmp	#LR__0153
	rdbyte	local04, local02
	cmp	local04, #46 wz
 if_e	add	local02, #1
 if_e	rdbyte	local05, local02
 if_e	sub	local02, #1
 if_e	mov	local06, local05
 if_e	zerox	local06, #7 wz
 if_e	jmp	#LR__0153
	rdbyte	local05, local01
	cmp	local05, #47 wz
 if_e	add	local01, #1
 if_e	rdbyte	local04, local01
 if_e	sub	local01, #1
 if_e	cmps	local04, #0 wz
 if_ne	mov	arg02, ##@LR__1620
 if_ne	mov	arg01, local01
 if_ne	mov	arg03, #256
 if_ne	call	#__system__strncat
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #256
	call	#__system__strncat
LR__0153
LR__0154
	mov	arg01, local01
	call	#__system___normalizeName
	rdbyte	local04, local01 wz
 if_e	jmp	#LR__0155
	rdbyte	local04, local01
	cmp	local04, #47 wz
 if_e	add	local01, #1
 if_e	rdbyte	local06, local01
 if_e	sub	local01, #1
 if_e	cmps	local06, #0 wz
 if_ne	jmp	#LR__0156
LR__0155
	add	ptr___system__dat__, ##644
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##644
	jmp	#LR__0170
LR__0156
	mov	local07, #0
LR__0157
	cmps	local07, #4 wc
 if_ae	jmp	#LR__0169
	mov	local06, local07
	shl	local06, #2
	add	ptr___system__dat__, #100
	add	local06, ptr___system__dat__
	rdlong	local06, local06 wz
	sub	ptr___system__dat__, #100
 if_e	jmp	#LR__0168
	mov	local04, local07
	shl	local04, #2
	add	ptr___system__dat__, #100
	add	local04, ptr___system__dat__
	rdlong	arg01, local04
	sub	ptr___system__dat__, #100
	mov	local08, arg01
	callpa	#(@LR__0159-@LR__0158)>>2,fcache_load_ptr_
LR__0158
	rdbyte	result1, local08 wz
 if_ne	add	local08, #1
 if_ne	jmp	#LR__0158
LR__0159
	sub	local08, arg01
	mov	local09, local08
	mov	local04, local09
	add	local04, local01
	rdbyte	local06, local04
	cmp	local06, #47 wz
 if_ne	mov	local10, local09
 if_ne	add	local10, local01
 if_ne	rdbyte	local05, local10 wz
 if_ne	jmp	#LR__0167
	mov	arg03, local07
	shl	arg03, #2
	add	ptr___system__dat__, #100
	add	arg03, ptr___system__dat__
	rdlong	arg02, arg03
	mov	arg03, local09
	mov	arg01, local01
	sub	ptr___system__dat__, #100
	call	#__system__strncmp
	cmps	result1, #0 wz
 if_ne	jmp	#LR__0167
	mov	local11, local07
	shl	local11, #2
	add	ptr___system__dat__, #116
	add	local11, ptr___system__dat__
	rdlong	local12, local11
	sub	ptr___system__dat__, #116
	callpa	#(@LR__0161-@LR__0160)>>2,fcache_load_ptr_
LR__0160
	mov	local06, local09
	add	local06, #1
	add	local06, local01
	rdbyte	local11, local06
	cmp	local11, #46 wz
 if_ne	jmp	#LR__0162
	mov	local11, local09
	add	local11, #2
	add	local11, local01
	rdbyte	local10, local11
	cmp	local10, #47 wz
 if_ne	mov	local13, local09
 if_ne	add	local13, #2
 if_ne	add	local13, local01
 if_ne	rdbyte	local14, local13 wz
 if_e	add	local09, #1
 if_e	jmp	#LR__0160
LR__0161
LR__0162
	cmp	local03, #0 wz
 if_ne	mov	arg01, local03
 if_ne	mov	arg02, local01
 if_ne	mov	arg03, #256
 if_ne	call	#__system__strncpy
	mov	arg02, local01
	add	arg02, local09
	add	arg02, #1
	mov	arg01, local01
	call	#__system____builtin_strcpy
	mov	arg01, local01
	mov	local08, arg01
	callpa	#(@LR__0164-@LR__0163)>>2,fcache_load_ptr_
LR__0163
	rdbyte	result1, local08 wz
 if_ne	add	local08, #1
 if_ne	jmp	#LR__0163
LR__0164
	sub	local08, arg01
	mov	local09, local08
LR__0165
	cmps	local09, #1 wc
 if_b	jmp	#LR__0166
	mov	local04, local09
	add	local04, local01
	rdbyte	local11, local04
	cmp	local11, #47 wz
 if_e	mov	local11, local09
 if_e	add	local11, local01
 if_e	wrbyte	#0, local11
 if_e	sub	local09, #1
 if_e	jmp	#LR__0165
	mov	local04, local09
	add	local04, local01
	rdbyte	local11, local04
	cmp	local11, #46 wz
 if_ne	jmp	#LR__0166
	cmps	local09, #2 wc
 if_b	jmp	#LR__0166
	mov	local14, local09
	sub	local14, #1
	add	local14, local01
	rdbyte	local05, local14
	cmp	local05, #47 wz
 if_ne	jmp	#LR__0166
	mov	local04, local09
	sub	local04, #1
	add	local04, local01
	wrbyte	#0, local04
	sub	local09, #2
	jmp	#LR__0165
LR__0166
	mov	result1, local12
	jmp	#LR__0170
LR__0167
LR__0168
	add	local07, #1
	jmp	#LR__0157
LR__0169
	add	ptr___system__dat__, ##1832
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##1832
LR__0170
	mov	ptra, fp
	call	#popregs_
__system____getvfsforfile_ret
	ret

__system___basic_open_string
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system____getftab
	mov	local03, result1 wz
 if_ne	jmp	#LR__0180
	mov	arg01, abortchain
	mov	arg02, #12
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0182
LR__0180
	add	local03, #8
	rdlong	arg04, local03 wz
	sub	local03, #8
 if_ne	mov	arg01, local03
 if_ne	call	#__system___closeraw
	mov	arg02, local01
	mov	arg03, local02
	mov	arg01, local03
	mov	arg04, #438
	call	#__system___openraw
	mov	local04, result1
	cmps	local04, #0 wc
 if_ae	jmp	#LR__0181
	add	ptr___system__dat__, #32
	rdlong	arg02, ptr___system__dat__
	sub	ptr___system__dat__, #32
	mov	arg01, abortchain
	mov	arg03, #1
	call	#__longjmp
	neg	result1, #1
	jmp	#LR__0182
LR__0181
	mov	result1, local04
LR__0182
	mov	ptra, fp
	call	#popregs_
__system___basic_open_string_ret
	ret

__system___basic_print_char
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	call	#__system___gettxfunc
	mov	local02, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0190
	mov	local03, local02
	zerox	local02, #19
	shr	local03, #20
	shl	local03, #2
	add	local03, __methods__
	rdlong	local03, local03
	mov	arg01, local01
	mov	local01, objptr
	mov	objptr, local02
	call	local03
	mov	objptr, local01
	mov	result1, #1
LR__0190
	mov	ptra, fp
	call	#popregs_
__system___basic_print_char_ret
	ret

__system___basic_print_string
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	call	#__system___gettxfunc
	mov	local03, result1 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0200
	cmp	local01, #0 wz
 if_e	mov	result1, #0
 if_ne	mov	arg01, local03
 if_ne	mov	arg02, local02
 if_ne	mov	arg03, local01
 if_ne	call	#__system___fmtstr
LR__0200
	mov	ptra, fp
	call	#popregs_
__system___basic_print_string_ret
	ret

__system___basic_print_integer
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	call	#__system___gettxfunc
	mov	local04, result1 wz
 if_e	mov	result1, #0
 if_ne	mov	arg01, local04
 if_ne	mov	arg02, local02
 if_ne	mov	arg03, local01
 if_ne	mov	arg04, local03
 if_ne	call	#__system___fmtnum
	mov	ptra, fp
	call	#popregs_
__system___basic_print_integer_ret
	ret

__system___fmtchar
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	getbyte	arg03, arg03, #0
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #12
	call	#__system___fmtstr
	mov	ptra, fp
	call	#popregs_
__system___fmtchar_ret
	ret

__system___fmtstr
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	getbyte	arg04, local02, #0
	mov	arg01, local03
	mov	local04, arg01
	callpa	#(@LR__0211-@LR__0210)>>2,fcache_load_ptr_
LR__0210
	rdbyte	result1, local04 wz
 if_ne	add	local04, #1
 if_ne	jmp	#LR__0210
LR__0211
	sub	local04, arg01
	cmp	arg04, #0 wz
 if_ne	fles	local04, arg04 wcz
	mov	arg02, local02
	mov	arg03, local04
	mov	arg01, local01
	mov	arg04, #2
	call	#__system___fmtpad
	mov	local05, result1
	cmps	local05, #0 wc
 if_b	mov	result1, local05
 if_b	jmp	#LR__0214
	cmps	local04, #1 wc
 if_b	jmp	#LR__0213
	mov	local06, local04
LR__0212
	mov	local07, local01
	mov	local08, local01
	zerox	local07, #19
	shr	local08, #20
	shl	local08, #2
	add	local08, __methods__
	rdlong	local08, local08
	rdbyte	arg01, local03
	mov	local09, objptr
	mov	objptr, local07
	add	local03, #1
	call	local08
	mov	objptr, local09
	mov	local09, result1
	cmps	local09, #0 wc
 if_b	mov	result1, local09
 if_b	jmp	#LR__0214
	add	local05, local09
	djnz	local06, #LR__0212
LR__0213
	mov	arg02, local02
	mov	arg03, local04
	mov	arg01, local01
	mov	arg04, #1
	call	#__system___fmtpad
	mov	local09, result1
	cmps	local09, #0 wc
 if_b	mov	result1, local09
 if_ae	add	local05, local09
 if_ae	mov	result1, local05
LR__0214
	mov	ptra, fp
	call	#popregs_
__system___fmtstr_ret
	ret

__system___fmtnum
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, ptra
	mov	local06, local05
	mov	local07, #0
	mov	local08, local02
	shr	local08, #16
	and	local08, #63
	getbyte	local09, local02, #0
	mov	local10, local02
	shr	local10, #26
	and	local10, #3
	mov	local11, local10
	cmps	local08, #1 wc
	add	ptra, #68
 if_ae	sub	local08, #1
	cmps	local09, #65 wc
 if_b	cmp	local09, #0 wz
 if_nc_or_z	mov	local09, #64
	cmp	local11, #3 wz
 if_e	mov	local11, #0
 if_ne	cmps	local03, #0 wc
 if_c_and_nz	mov	local11, #4
 if_c_and_nz	neg	local03, local03
	cmp	local11, #0 wz
 if_e	jmp	#LR__0223
	mov	local07, #1
	cmp	local08, local09 wz
 if_ne	jmp	#LR__0221
	djnz	local08, #LR__0220
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #35
	call	#__system___fmtchar
	jmp	#LR__0227
LR__0220
LR__0221
	cmp	local11, #2 wz
 if_e	mov	local10, local06
 if_e	add	local06, #1
 if_e	wrbyte	#32, local10
 if_e	jmp	#LR__0222
	cmp	local11, #4 wz
 if_e	wrbyte	#45, local06
 if_e	add	local06, #1
 if_ne	wrbyte	#43, local06
 if_ne	add	local06, #1
LR__0222
LR__0223
	mov	arg01, local06
	mov	arg02, local03
	mov	arg03, local04
	mov	arg04, local08
	mov	arg05, #0
	testbn	local02, #29 wz
 if_ne	mov	arg05, #1
	call	#__system___uitoa
	add	local07, result1
	cmps	local07, local09 wcz
 if_be	jmp	#LR__0226
	callpa	#(@LR__0225-@LR__0224)>>2,fcache_load_ptr_
LR__0224
	mov	local10, local09
	cmps	local10, #1 wc
	sub	local09, #1
 if_ae	mov	local10, local06
 if_ae	add	local06, #1
 if_ae	wrbyte	#35, local10
 if_ae	jmp	#LR__0224
LR__0225
	wrbyte	#0, local06
LR__0226
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local05
	call	#__system___fmtstr
LR__0227
	mov	ptra, fp
	call	#popregs_
__system___fmtnum_ret
	ret

__system___strerror
	cmps	arg01, #0 wc
 if_b	jmp	#LR__0230
	cmps	arg01, #26 wc
 if_b	jmp	#LR__0231
LR__0230
	mov	arg01, #25
LR__0231
	shl	arg01, #2
	add	ptr___system__dat__, ##728
	add	arg01, ptr___system__dat__
	rdlong	result1, arg01
	sub	ptr___system__dat__, ##728
__system___strerror_ret
	ret

__system___int64_shl
	test	arg03, #32 wz
 if_ne	mov	arg02, arg01
 if_ne	mov	arg01, #0
	test	arg03, #31 wz
 if_e	jmp	#LR__0240
	shl	arg02, arg03
	mov	result1, arg01
	neg	result2, arg03
	shr	result1, result2
	or	arg02, result1
	shl	arg01, arg03
LR__0240
	mov	result2, arg02
	mov	result1, arg01
__system___int64_shl_ret
	ret

__system___usepins
	add	ptr___system__dat__, #20
	rdlong	_var01, ptr___system__dat__
	sub	ptr___system__dat__, #20
	test	arg01, _var01 wz
 if_e	add	ptr___system__dat__, #24
 if_e	rdlong	_var02, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #24
 if_e	test	arg02, _var02 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___usepins_ret
	add	ptr___system__dat__, #20
	rdlong	_var02, ptr___system__dat__
	or	_var02, arg01
	wrlong	_var02, ptr___system__dat__
	add	ptr___system__dat__, #4
	rdlong	_var02, ptr___system__dat__
	or	_var02, arg02
	wrlong	_var02, ptr___system__dat__
	sub	ptr___system__dat__, #24
	neg	result1, #1
__system___usepins_ret
	ret

__system___freepins
	add	ptr___system__dat__, #20
	rdlong	_var01, ptr___system__dat__
	andn	_var01, arg01
	wrlong	_var01, ptr___system__dat__
	add	ptr___system__dat__, #4
	rdlong	_var01, ptr___system__dat__
	andn	_var01, arg02
	wrlong	_var01, ptr___system__dat__
	sub	ptr___system__dat__, #24
__system___freepins_ret
	ret

__system___gc_ptrs
	mov	_var01, __heap_ptr
	mov	_var02, _var01
	add	_var02, ##5992
	rdlong	result2, _var01 wz
 if_ne	jmp	#LR__0250
	mov	result2, _var02
	sub	result2, _var01
	wrword	#1, _var01
	mov	result1, _var01
	add	result1, #2
	wrword	##27792, result1
	mov	result1, _var01
	add	result1, #4
	wrword	#0, result1
	mov	result1, _var01
	add	result1, #6
	wrword	#1, result1
	add	_var01, #16
	abs	result2, result2 wc
	shr	result2, #4
	negc	result2, result2
	wrword	result2, _var01
	mov	result2, _var01
	add	result2, #2
	wrword	##27791, result2
	mov	result2, _var01
	add	result2, #4
	wrword	#0, result2
	mov	result2, _var01
	add	result2, #6
	wrword	#0, result2
	sub	_var01, #16
LR__0250
	mov	result1, _var01
	mov	result2, _var02
__system___gc_ptrs_ret
	ret

__system___gc_tryalloc
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
	mov	local05, local03
	mov	local06, #0
	callpa	#(@LR__0261-@LR__0260)>>2,fcache_load_ptr_
LR__0260
	mov	local07, local05
	add	local05, #6
	rdword	arg02, local05 wz
	mov	arg01, local03
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local05, result1 wz
 if_ne	rdword	local06, local05
	cmp	local05, #0 wz
 if_ne	cmps	local05, local04 wc
 if_a	jmp	#LR__0262
 if_ne	cmps	local01, local06 wcz
 if_a	jmp	#LR__0260
LR__0261
LR__0262
	cmp	local05, #0 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0265
	mov	result2, local05
	add	result2, #6
	rdword	local08, result2
	cmps	local01, local06 wc
 if_ae	jmp	#LR__0264
	wrword	local01, local05
	mov	arg01, local05
	mov	local08, local01
	shl	local08, #4
	add	arg01, local08
	sub	local06, local01
	wrword	local06, arg01
	mov	local08, arg01
	add	local08, #2
	wrword	##27791, local08
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local08, arg01
	add	local08, #4
	wrword	result1, local08
	mov	local08, local05
	add	local08, #6
	mov	arg02, arg01
	rdword	local08, local08
	add	arg02, #6
	wrword	local08, arg02
	mov	local09, arg01
	mov	arg02, local09 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local08, result1
	rdword	local10, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local10, #4
 if_ne	add	arg01, local10
 if_ne	mov	result1, arg01
	mov	local11, result1 wz
 if_e	jmp	#LR__0263
	cmps	local11, local04 wc
 if_ae	jmp	#LR__0263
	mov	arg02, local09 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	add	local11, #4
	wrword	result1, local11
LR__0263
LR__0264
	add	local07, #6
	wrword	local08, local07
	mov	local09, ##27776
	or	local09, local02
	mov	result1, #0
	cogid	result1
	or	local09, result1
	mov	local11, local05
	add	local11, #2
	wrword	local09, local11
	mov	local09, local03
	add	local09, #8
	mov	local11, local05
	rdword	local09, local09
	add	local11, #6
	wrword	local09, local11
	mov	arg02, local05 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local03
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	add	local03, #8
	wrword	result1, local03
	add	local05, #8
	mov	result1, local05
LR__0265
	mov	ptra, fp
	call	#popregs_
__system___gc_tryalloc_ret
	ret

__system___gc_alloc_managed
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg02, #0
	call	#__system___gc_doalloc
	mov	arg02, result1 wz
 if_e	cmps	local01, #1 wc
 if_nc_and_z	mov	result1, #0
 if_c_or_nz	mov	result1, arg02
	mov	ptra, fp
	call	#popregs_
__system___gc_alloc_managed_ret
	ret

__system___gc_doalloc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01 wz
	mov	local02, arg02
 if_e	mov	result1, #0
 if_e	jmp	#LR__0277
	add	local01, #23
	andn	local01, #15
	shr	local01, #4
	add	ptr___system__dat__, #28
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	call	#__system___lockmem
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1 wz
 if_ne	jmp	#LR__0270
	call	#__system___gc_docollect
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___gc_tryalloc
	mov	local03, result1
LR__0270
	add	ptr___system__dat__, #28
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	wrlong	#0, arg01
	cmp	local03, #0 wz
 if_e	jmp	#LR__0276
	shl	local01, #4
	sub	local01, #8
	abs	local04, local01 wc
	shr	local04, #2
	negc	local05, local04 wz
	mov	local06, local03
 if_e	jmp	#LR__0275
	callpa	#(@LR__0273-@LR__0271)>>2,fcache_load_ptr_
LR__0271
	rep	@LR__0274, local05
LR__0272
	wrlong	#0, local06
	add	local06, #4
LR__0273
LR__0274
LR__0275
LR__0276
	mov	result1, local03
LR__0277
	mov	ptra, fp
	call	#popregs_
__system___gc_doalloc_ret
	ret

__system___gc_isvalidptr
	bitl	arg03, #248
	sub	arg03, #8
	cmps	arg03, arg01 wc
 if_b	jmp	#LR__0280
	cmps	arg03, arg02 wc
 if_b	jmp	#LR__0281
LR__0280
	mov	result1, #0
	jmp	#__system___gc_isvalidptr_ret
LR__0281
	mov	_var01, arg03
	xor	_var01, arg01
	test	_var01, #15 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#__system___gc_isvalidptr_ret
	mov	_var01, arg03
	add	_var01, #2
	rdword	_var01, _var01
	and	_var01, ##65472
	cmp	_var01, ##27776 wz
 if_ne	mov	result1, #0
 if_e	mov	result1, arg03
__system___gc_isvalidptr_ret
	ret

__system___gc_free
	mov	arg03, arg01
	call	#__system___gc_ptrs
	mov	arg01, result1
	mov	arg02, result2
	call	#__system___gc_isvalidptr
	mov	arg02, result1 wz
 if_e	jmp	#LR__0290
	add	ptr___system__dat__, #28
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	call	#__system___lockmem
	mov	arg01, arg02
	call	#__system___gc_dofree
	add	ptr___system__dat__, #28
	mov	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #28
	wrlong	#0, arg01
LR__0290
__system___gc_free_ret
	ret

__system___gc_dofree
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	call	#__system___gc_ptrs
	mov	local02, result1
	mov	local03, result2
	mov	arg02, local01
	add	arg02, #2
	wrword	##27791, arg02
	mov	local04, local01
	mov	arg01, local01
	rdword	local05, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local05, #4
 if_ne	add	arg01, local05
 if_ne	mov	result1, arg01
	mov	local06, result1
	callpa	#(@LR__0301-@LR__0300)>>2,fcache_load_ptr_
LR__0300
	add	local04, #4
	rdword	arg02, local04 wz
	mov	arg01, local02
 if_e	mov	result1, #0
 if_ne	shl	arg02, #4
 if_ne	add	arg01, arg02
 if_ne	mov	result1, arg01
	mov	local04, result1 wz
 if_e	jmp	#LR__0302
	mov	arg01, local04
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmp	result1, #0 wz
 if_e	jmp	#LR__0300
LR__0301
LR__0302
	cmp	local04, #0 wz
 if_e	mov	local04, local02
	mov	arg02, local04
	add	arg02, #6
	mov	arg01, local01
	rdword	arg02, arg02
	add	arg01, #6
	wrword	arg02, arg01
	mov	arg02, local01 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	arg02, local04
	add	arg02, #6
	wrword	result1, arg02
	cmp	local04, local02 wz
 if_e	jmp	#LR__0305
	mov	arg01, local04
	rdword	local05, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local05, #4
 if_ne	add	arg01, local05
 if_ne	mov	result1, arg01
	cmp	result1, local01 wz
 if_ne	jmp	#LR__0304
	rdword	local06, local04
	rdword	arg02, local01
	add	local06, arg02
	wrword	local06, local04
	mov	local06, local01
	add	local06, #2
	wrword	#0, local06
	mov	arg01, local01
	rdword	local05, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local05, #4
 if_ne	add	arg01, local05
 if_ne	mov	result1, arg01
	mov	local06, result1
	cmps	local06, local03 wc
 if_ae	jmp	#LR__0303
	mov	arg02, local04 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	arg02, local06
	add	arg02, #4
	wrword	result1, arg02
LR__0303
	mov	arg02, local01
	add	arg02, #6
	mov	result2, local04
	rdword	arg02, arg02
	add	result2, #6
	wrword	arg02, result2
	add	local01, #6
	wrword	#0, local01
	mov	local01, local04
LR__0304
LR__0305
	mov	arg01, local01
	rdword	local05, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local05, #4
 if_ne	add	arg01, local05
 if_ne	mov	result1, arg01
	mov	arg02, result1 wz
 if_e	jmp	#LR__0307
	cmps	arg02, local03 wc
 if_ae	jmp	#LR__0307
	mov	arg01, arg02
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmp	result1, #0 wz
 if_e	jmp	#LR__0307
	mov	local04, local01
	rdword	local06, local04
	mov	arg01, arg02
	rdword	local01, arg01
	add	local06, local01
	wrword	local06, local04
	mov	local06, arg01
	add	local06, #6
	mov	local01, local04
	rdword	local06, local06
	add	local01, #6
	wrword	local06, local01
	mov	local06, arg01
	add	local06, #2
	wrword	#170, local06
	mov	local06, arg01
	add	local06, #6
	wrword	#0, local06
	rdword	local05, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local05, #4
 if_ne	add	arg01, local05
 if_ne	mov	result1, arg01
	mov	local06, result1 wz
 if_e	jmp	#LR__0306
	cmps	local06, local03 wc
 if_ae	jmp	#LR__0306
	mov	arg02, local04 wz
 if_e	mov	result1, #0
 if_ne	sub	arg02, local02
 if_ne	shr	arg02, #4
 if_ne	mov	result1, arg02
	mov	local04, local06
	add	local04, #4
	wrword	result1, local04
LR__0306
LR__0307
	mov	result1, local06
	mov	ptra, fp
	call	#popregs_
__system___gc_dofree_ret
	ret

__system___gc_docollect
	mov	COUNT_, #5
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result2
	mov	local02, result1
	mov	arg01, local02
	rdword	local03, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local03, #4
 if_ne	add	arg01, local03
 if_ne	mov	result1, arg01
	mov	local04, result1 wz
	mov	result1, #0
	cogid	result1
	mov	local05, result1
 if_e	jmp	#LR__0312
	callpa	#(@LR__0311-@LR__0310)>>2,fcache_load_ptr_
LR__0310
	cmps	local04, local01 wc
 if_ae	jmp	#LR__0312
	mov	arg02, local04
	add	arg02, #2
	rdword	arg02, arg02
	andn	arg02, #32
	mov	arg01, local04
	add	arg01, #2
	wrword	arg02, arg01
	mov	arg01, local04
	rdword	local03, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local03, #4
 if_ne	add	arg01, local03
 if_ne	mov	result1, arg01
	mov	local04, result1 wz
 if_ne	jmp	#LR__0310
LR__0311
LR__0312
	mov	local03, #0
	mov	arg01, #0
	call	#__system____topofstack
	mov	arg02, result1
	mov	arg01, local03
	call	#__system___gc_markhub
	call	#__system___gc_markcog
	mov	arg01, local02
	rdword	local03, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local03, #4
 if_ne	add	arg01, local03
 if_ne	mov	result1, arg01
	mov	local02, result1 wz
 if_e	jmp	#LR__0316
LR__0313
	mov	local04, local02
	mov	arg01, local04
	rdword	local03, arg01 wz
 if_e	mov	result1, #0
 if_ne	shl	local03, #4
 if_ne	add	arg01, local03
 if_ne	mov	result1, arg01
	mov	local02, result1
	mov	arg02, local04
	add	arg02, #2
	rdword	arg02, arg02
	test	arg02, #32 wz
 if_e	test	arg02, #16 wz
 if_ne	jmp	#LR__0315
	getnib	arg02, arg02, #0
	cmp	arg02, local05 wz
 if_ne	cmp	arg02, #14 wz
 if_ne	jmp	#LR__0314
	mov	arg01, local04
	call	#__system___gc_dofree
	mov	local02, result1
LR__0314
LR__0315
	cmp	local02, #0 wz
 if_ne	cmps	local02, local01 wc
 if_c_and_nz	jmp	#LR__0313
LR__0316
	mov	ptra, fp
	call	#popregs_
__system___gc_docollect_ret
	ret

__system___gc_markhub
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	call	#__system___gc_ptrs
	mov	local03, result1
	mov	local04, result2
LR__0320
	cmps	local01, local02 wc
 if_ae	jmp	#LR__0321
	rdlong	arg03, local01
	add	local01, #4
	mov	arg02, local04
	mov	arg01, local03
	call	#__system___gc_isvalidptr
	mov	arg03, result1 wz
 if_e	jmp	#LR__0320
	mov	arg01, arg03
	mov	result1, #0
	add	arg01, #2
	rdword	arg01, arg01
	cmp	arg01, ##27791 wz
 if_e	neg	result1, #1
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0320
	mov	result2, arg03
	add	result2, #2
	rdword	result2, result2
	andn	result2, #15
	or	result2, #46
	add	arg03, #2
	wrword	result2, arg03
	jmp	#LR__0320
LR__0321
	mov	ptra, fp
	call	#popregs_
__system___gc_markhub_ret
	ret

__system___gc_markcog
	mov	COUNT_, #4
	call	#pushregs_
	call	#__system___gc_ptrs
	mov	local01, result1
	mov	local02, result2
	mov	local03, #495
LR__0330
	'.live	local03
	alts	local03, #0
	mov	local04, local03
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, local04
	call	#__system___gc_isvalidptr
	cmp	result1, #0 wz
 if_e	jmp	#LR__0331
	mov	local04, result1
	add	local04, #2
	rdword	local04, local04
	or	local04, #32
	add	result1, #2
	wrword	local04, result1
LR__0331
	sub	local03, #1
	cmps	local03, #0 wc
 if_ae	jmp	#LR__0330
	mov	ptra, fp
	call	#popregs_
__system___gc_markcog_ret
	ret

__system___openraw
	mov	COUNT_, #21
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	local05, #4
	mov	local06, local01
	mov	local07, #0
	add	ptr___system__dat__, #388
	mov	local08, ptr___system__dat__
	mov	arg01, local08
	mov	arg02, local02
	mov	arg03, #0
	sub	ptr___system__dat__, #388
	call	#__system____getvfsforfile
	mov	local09, result1 wz
 if_e	jmp	#LR__0340
	add	local09, #32
	rdlong	result1, local09 wz
	sub	local09, #32
 if_ne	jmp	#LR__0341
LR__0340
	add	ptr___system__dat__, #32
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #32
	neg	result1, #1
	jmp	#LR__0354
LR__0341
	mov	arg01, local06
	mov	arg02, #0
	mov	arg03, #52
	mov	local10, arg01
	call	#\builtin_bytefill_
	add	local09, #32
	rdlong	local11, local09
	mov	local12, local11
	mov	local13, local11
	sub	local09, #32
	mov	local14, local13
	zerox	local12, #19
	shr	local14, #20
	shl	local14, #2
	add	local14, __methods__
	rdlong	local14, local14
	mov	local15, local06
	mov	local16, local08
	mov	local17, local03
	mov	arg01, local15
	mov	arg02, local16
	mov	arg03, local17
	mov	local18, objptr
	mov	objptr, local12
	call	local14
	mov	objptr, local18
	mov	local19, result1 wz
 if_ne	test	local03, #4 wz
 if_e	jmp	#LR__0342
	add	local09, #36
	rdlong	local11, local09
	mov	local12, local11
	mov	local13, local11
	sub	local09, #36
	mov	local14, local13
	zerox	local12, #19
	shr	local14, #20
	shl	local14, #2
	add	local14, __methods__
	rdlong	local14, local14
	mov	local15, local06
	mov	local16, local08
	mov	local17, local04
	mov	arg01, local15
	mov	arg02, local16
	mov	arg03, local17
	mov	local18, objptr
	mov	objptr, local12
	call	local14
	mov	objptr, local18
	mov	local19, result1
LR__0342
	cmp	local19, #0 wz
 if_ne	jmp	#LR__0352
	mov	local20, local03
	and	local20, #3 wz
 if_ne	or	local05, #2
	cmp	local20, #1 wz
 if_ne	or	local05, #1
	test	local03, #32 wz
 if_ne	or	local05, #192
	add	local06, #8
	wrlong	local05, local06
	add	local06, #12
	rdlong	local21, local06 wz
	sub	local06, #20
 if_ne	jmp	#LR__0343
	add	local09, #4
	rdlong	local21, local09
	sub	local09, #4
	add	local06, #20
	wrlong	local21, local06
	sub	local06, #20
LR__0343
	add	local06, #24
	rdlong	local21, local06 wz
	sub	local06, #24
 if_ne	jmp	#LR__0344
	add	local09, #8
	rdlong	local21, local09
	sub	local09, #8
	add	local06, #24
	wrlong	local21, local06
	sub	local06, #24
LR__0344
	add	local06, #36
	rdlong	local21, local06 wz
	sub	local06, #36
 if_e	rdlong	local21, local09
 if_e	add	local06, #36
 if_e	wrlong	local21, local06
 if_e	sub	local06, #36
	add	local06, #40
	rdlong	local21, local06 wz
	sub	local06, #40
 if_ne	jmp	#LR__0345
	add	local09, #16
	rdlong	local21, local09
	sub	local09, #16
	add	local06, #40
	wrlong	local21, local06
	sub	local06, #40
LR__0345
	add	local06, #48
	rdlong	local21, local06 wz
	sub	local06, #48
 if_ne	jmp	#LR__0346
	add	local09, #12
	rdlong	local21, local09
	sub	local09, #12
	add	local06, #48
	wrlong	local21, local06
	sub	local06, #48
LR__0346
	add	local06, #28
	rdlong	local21, local06 wz
	sub	local06, #28
 if_ne	jmp	#LR__0347
	mov	local07, #1
	mov	arg01, objptr
	or	arg01, ##9437184
	add	local06, #28
	wrlong	arg01, local06
	sub	local06, #28
LR__0347
	add	local06, #32
	rdlong	local21, local06 wz
	sub	local06, #32
 if_ne	jmp	#LR__0348
	mov	local07, #1
	mov	arg01, objptr
	or	arg01, ##10485760
	add	local06, #32
	wrlong	arg01, local06
	sub	local06, #32
LR__0348
	add	local06, #44
	rdlong	local21, local06 wz
	sub	local06, #44
 if_ne	jmp	#LR__0351
	add	local09, #20
	rdlong	local21, local09 wz
	sub	local09, #20
 if_e	jmp	#LR__0349
	add	local09, #20
	rdlong	local21, local09
	add	local06, #44
	wrlong	local21, local06
	sub	local06, #44
	jmp	#LR__0350
LR__0349
	mov	local07, #1
	mov	arg01, objptr
	or	arg01, ##11534336
	add	local06, #44
	wrlong	arg01, local06
	sub	local06, #44
LR__0350
LR__0351
LR__0352
	cmp	local07, #0 wz
 if_ne	mov	arg01, local06
 if_ne	call	#__system____default_buffer_init
	cmp	local19, #0 wz
 if_e	mov	arg01, #0
 if_ne	jmp	#LR__0353
	cmps	arg01, #0 wz
	add	ptr___system__dat__, #32
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #32
LR__0353
	mov	result1, local19
LR__0354
	mov	ptra, fp
	call	#popregs_
__system___openraw_ret
	ret

__system___closeraw
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #8
	rdlong	result1, local01 wz
	sub	local01, #8
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__0362
	add	local01, #44
	rdlong	result1, local01 wz
	sub	local01, #44
 if_e	jmp	#LR__0360
	add	local01, #44
	rdlong	local03, local01
	mov	local04, local03
	sub	local01, #44
	zerox	local04, #19
	shr	local03, #20
	shl	local03, #2
	add	local03, __methods__
	rdlong	local03, local03
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local04
	call	local03
	mov	objptr, local05
LR__0360
	add	local01, #36
	rdlong	local05, local01 wz
	sub	local01, #36
 if_e	jmp	#LR__0361
	add	local01, #36
	rdlong	local03, local01
	mov	local04, local03
	sub	local01, #36
	zerox	local04, #19
	shr	local03, #20
	shl	local03, #2
	add	local03, __methods__
	rdlong	local03, local03
	mov	arg01, local01
	mov	local05, objptr
	mov	objptr, local04
	call	local03
	mov	objptr, local05
	mov	local02, result1
LR__0361
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #52
	call	#\builtin_bytefill_
	mov	result1, local02
LR__0362
	mov	ptra, fp
	call	#popregs_
__system___closeraw_ret
	ret

__system___vfs_open_sdcardx
	mov	COUNT_, #11
	call	#pushregs_
	mov	local03, arg01
	mov	local04, arg02
	mov	local05, arg03
	mov	local06, arg04
	mov	arg01, ##548
	call	#__system___gc_alloc_managed
	mov	local07, result1
	mov	arg01, ##564
	call	#__system___gc_alloc_managed
	mov	local08, result1
	mov	arg04, local03
	sar	arg04, #31
	mov	arg03, local03
	mov	arg01, #1
	mov	arg02, #0
	call	#__system___int64_shl
	mov	local01, result1
	mov	local09, result2
	mov	arg04, local04
	sar	arg04, #31
	mov	arg03, local04
	mov	arg01, #1
	mov	arg02, #0
	call	#__system___int64_shl
	or	local01, result1
	or	local09, result2
	mov	arg04, local05
	sar	arg04, #31
	mov	arg03, local05
	mov	arg01, #1
	mov	arg02, #0
	call	#__system___int64_shl
	or	local01, result1
	or	local09, result2
	mov	arg04, local06
	sar	arg04, #31
	mov	arg03, local06
	mov	arg01, #1
	mov	arg02, #0
	call	#__system___int64_shl
	mov	arg02, local09
	or	local01, result1
	or	result2, arg02
	mov	local02, result2
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___usepins
	cmp	result1, #0 wz
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#22, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	mov	result1, #0
 if_e	jmp	#LR__0372
	mov	local10, local01
	mov	local09, local02
	add	local07, ##520
	wrlong	local10, local07
	add	local07, #4
	wrlong	local09, local07
	sub	local07, ##524
	mov	arg05, local06
	mov	arg01, #0
	mov	arg02, local03
	mov	arg03, local04
	mov	arg04, local05
	mov	local10, objptr
	mov	objptr, local07
	call	#_fatfs_cc_disk_setpins
	mov	objptr, local10
	mov	local11, result1 wz
 if_ne	jmp	#LR__0370
	mov	arg02, ##@LR__1624
	mov	arg01, local08
	mov	arg03, #0
	mov	local11, objptr
	mov	objptr, local07
	call	#_fatfs_cc_f_mount
	mov	objptr, local11
	mov	local11, result1
LR__0370
	cmp	local11, #0 wz
 if_e	jmp	#LR__0371
	mov	arg01, local01
	mov	arg02, local02
	call	#__system___freepins
	neg	arg01, local11 wz
	add	ptr___system__dat__, #32
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #32
	mov	result1, #0
	jmp	#LR__0372
LR__0371
	mov	arg01, local07
	mov	local11, objptr
	mov	objptr, local07
	call	#_fatfs_cc_get_vfs
	mov	objptr, local11
LR__0372
	mov	ptra, fp
	call	#popregs_
__system___vfs_open_sdcardx_ret
	ret

__system____default_getc
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #8
	rdlong	local03, local02
	test	local03, #2 wz
 if_ne	mov	arg01, local01
 if_ne	call	#__system____default_flush
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	sub	local02, #8
	rdlong	local03, local02 wz
 if_ne	jmp	#LR__0380
	mov	arg01, local01
	call	#__system____default_filbuf
	mov	local03, result1
LR__0380
	cmps	local03, #1 wc
 if_b	neg	result1, #1
 if_b	jmp	#LR__0381
	sub	local03, #1
	wrlong	local03, local02
	add	local02, #4
	rdlong	local03, local02
	rdbyte	result1, local03
	add	local03, #1
	wrlong	local03, local02
LR__0381
	mov	ptra, fp
	call	#popregs_
__system____default_getc_ret
	ret

__system____default_putc
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local02
	add	local03, #8
	rdlong	result1, local03
	test	result1, #1 wz
 if_ne	mov	arg01, local02
 if_ne	call	#__system____default_flush
	rdlong	local04, local03
	or	local04, #2
	wrlong	local04, local03
	sub	local03, #8
	rdlong	local05, local03
	add	local03, #16
	rdlong	arg02, local03
	sub	local03, #16
	mov	result1, local05
	add	result1, arg02
	wrbyte	local01, result1
	getbyte	local01, local01, #0
	add	local05, #1
	wrlong	local05, local03
	add	local02, #6
	rdword	local06, local02 wz
	sub	local02, #6
 if_ne	add	local03, #12
 if_ne	rdlong	local04, local03
 if_ne	cmp	local05, local04 wz
 if_e	jmp	#LR__0390
	cmp	local01, #10 wz
 if_e	cmp	local06, #1 wz
 if_ne	jmp	#LR__0391
LR__0390
	mov	arg01, local02
	call	#__system____default_flush
	cmp	result1, #0 wz
 if_ne	neg	local01, #1
LR__0391
	mov	result1, local01
	mov	ptra, fp
	call	#popregs_
__system____default_putc_ret
	ret

__system____default_flush
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	rdlong	local03, local02
	add	local02, #8
	rdlong	result1, local02
	sub	local02, #8
	test	result1, #2 wz
 if_e	jmp	#LR__0402
	cmps	local03, #1 wc
 if_b	jmp	#LR__0404
	add	local01, #8
	rdlong	result1, local01
	sub	local01, #8
	test	result1, #64 wz
 if_e	jmp	#LR__0401
	add	local01, #8
	rdlong	arg03, local01
	sub	local01, #8
	test	arg03, #128 wz
 if_e	jmp	#LR__0400
	add	local01, #48
	rdlong	local04, local01
	mov	local05, local04
	sub	local01, #48
	zerox	local05, #19
	shr	local04, #20
	shl	local04, #2
	add	local04, __methods__
	rdlong	local04, local04
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #2
	mov	local06, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local06
	add	local01, #8
	rdlong	local06, local01
	andn	local06, #128
	wrlong	local06, local01
	sub	local01, #8
LR__0400
LR__0401
	add	local01, #24
	rdlong	local04, local01
	mov	local05, local04
	sub	local01, #24
	zerox	local05, #19
	shr	local04, #20
	shl	local04, #2
	add	local04, __methods__
	rdlong	local04, local04
	add	local02, #16
	rdlong	arg02, local02
	sub	local02, #16
	mov	arg01, local01
	mov	arg03, local03
	mov	local06, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local06
	jmp	#LR__0404
LR__0402
	add	local02, #8
	rdlong	local06, local02
	sub	local02, #8
	test	local06, #1 wz
 if_ne	cmp	local03, #0 wz
 if_e	jmp	#LR__0403
	add	local01, #48
	rdlong	local04, local01
	mov	local05, local04
	sub	local01, #48
	zerox	local05, #19
	shr	local04, #20
	shl	local04, #2
	add	local04, __methods__
	rdlong	local04, local04
	mov	arg01, local01
	neg	arg02, local03
	mov	arg03, #1
	mov	local06, objptr
	mov	objptr, local05
	call	local04
	mov	objptr, local06
LR__0403
LR__0404
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_flush_ret
	ret

__system____default_buffer_init
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	call	#__system___isatty
	cmp	result1, #0 wz
 if_ne	add	local01, #6
 if_ne	wrword	#5, local01
 if_e	add	local01, #6
 if_e	wrword	#6, local01
	add	local02, #20
	mov	local01, local02
	sub	local02, #4
	wrlong	local01, local02
	sub	local02, #4
	wrlong	##1024, local02
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system____default_buffer_init_ret
	ret

__system__stat
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	add	ptr___system__dat__, #388
	mov	local02, ptr___system__dat__
	mov	arg02, arg01
	mov	arg01, local02
	mov	arg03, #0
	sub	ptr___system__dat__, #388
	call	#__system____getvfsforfile
	mov	local03, result1 wz
 if_e	jmp	#LR__0410
	add	local03, #52
	rdlong	arg03, local03 wz
	sub	local03, #52
 if_ne	jmp	#LR__0411
LR__0410
	add	ptr___system__dat__, #32
	wrlong	#16, ptr___system__dat__
	sub	ptr___system__dat__, #32
	neg	result1, #1
	jmp	#LR__0412
LR__0411
	mov	arg01, local01
	mov	arg02, #0
	mov	arg03, #48
	mov	local04, arg01
	call	#\builtin_bytefill_
	mov	result1, local04
	rdbyte	arg01, local02 wz
 if_e	add	local01, #8
 if_e	wrlong	##4607, local01
 if_e	mov	result1, #0
 if_e	jmp	#LR__0412
	add	local03, #52
	rdlong	local03, local03
	mov	local04, local03
	zerox	local03, #19
	shr	local04, #20
	shl	local04, #2
	add	local04, __methods__
	rdlong	local04, local04
	mov	arg01, local02
	mov	arg02, local01
	mov	local02, objptr
	mov	objptr, local03
	call	local04
	mov	objptr, local02
LR__0412
	mov	ptra, fp
	call	#popregs_
__system__stat_ret
	ret

__system__close
	cmp	arg01, #10 wc
 if_ae	add	ptr___system__dat__, #32
 if_ae	wrlong	#5, ptr___system__dat__
 if_ae	sub	ptr___system__dat__, #32
 if_ae	neg	result1, #1
 if_ae	jmp	#LR__0420
	qmul	arg01, #52
	add	ptr___system__dat__, ##1312
	getqx	arg01
	add	arg01, ptr___system__dat__
	sub	ptr___system__dat__, ##1312
	call	#__system___closeraw
LR__0420
__system__close_ret
	ret

__system___ioctl
	mov	COUNT_, #3
	call	#pushregs_
	cmps	arg01, #0 wz
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__0431
	add	arg01, #40
	rdlong	local01, arg01
	mov	local02, local01
	sub	arg01, #40
	zerox	local02, #19
	shr	local01, #20
	shl	local01, #2
	add	local01, __methods__
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	arg01, result1 wz
 if_e	jmp	#LR__0430
	cmps	arg01, #0 wz
	add	ptr___system__dat__, #32
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #32
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
	jmp	#LR__0431
LR__0430
	mov	result1, #0
LR__0431
	mov	ptra, fp
	call	#popregs_
__system___ioctl_ret
	ret

__system___isatty
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #12
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg03, fp
	sub	fp, #8
	mov	arg02, #256
	call	#__system___ioctl
	cmp	result1, #0 wz
 if_e	mov	result1, #1
 if_ne	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
__system___isatty_ret
	ret

__system____getftab
	cmp	arg01, #10 wc
 if_b	qmul	arg01, #52
 if_ae	mov	result1, #0
 if_b	add	ptr___system__dat__, ##1312
 if_b	getqx	result1
 if_b	add	result1, ptr___system__dat__
 if_b	sub	ptr___system__dat__, ##1312
__system____getftab_ret
	ret

__system__strncpy
	mov	_var01, arg01
LR__0440
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_b	jmp	#LR__0441
	rdbyte	result1, arg02
	wrbyte	result1, _var01
	add	arg02, #1
	rdbyte	result1, _var01 wz
	add	_var01, #1
 if_ne	jmp	#LR__0440
LR__0441
	callpa	#(@LR__0443-@LR__0442)>>2,fcache_load_ptr_
LR__0442
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_ae	mov	_var02, _var01
 if_ae	add	_var01, #1
 if_ae	wrbyte	#0, _var02
 if_ae	jmp	#LR__0442
LR__0443
	mov	result1, arg01
__system__strncpy_ret
	ret

__system__strncat
	cmps	arg02, #0 wz
 if_e	jmp	#LR__0454
	cmp	arg03, #1 wc
 if_b	jmp	#LR__0454
	mov	_var01, arg01
	callpa	#(@LR__0452-@LR__0450)>>2,fcache_load_ptr_
LR__0450
	rdbyte	result1, _var01 wz
 if_ne	add	_var01, #1
 if_ne	jmp	#LR__0450
	mov	_var02, arg03
LR__0451
	rdbyte	_var03, arg02
	mov	_var04, _var03
	zerox	_var04, #7 wz
	add	arg02, #1
 if_e	jmp	#LR__0453
	sub	_var02, #1
	cmps	_var02, #0 wc
 if_ae	mov	_var04, _var01
 if_ae	add	_var01, #1
 if_ae	wrbyte	_var03, _var04
 if_ae	jmp	#LR__0451
LR__0452
LR__0453
	wrbyte	#0, _var01
LR__0454
	mov	result1, arg01
__system__strncat_ret
	ret

__system__strncmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__0460
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#__system__strncmp_ret
LR__0460
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#__system__strncmp_ret
	mov	_var03, arg03
	callpa	#(@LR__0462-@LR__0461)>>2,fcache_load_ptr_
LR__0461
	rdbyte	_var04, _var01
	mov	_var05, arg02
	rdbyte	_var06, _var05
	sub	_var03, #1
	cmps	_var03, #0 wc
	add	_var01, #1
	add	arg02, #1
 if_ae	cmp	_var04, #0 wz
 if_nc_and_z	jmp	#LR__0463
 if_ae	cmp	_var04, _var06 wz
 if_nc_and_z	jmp	#LR__0461
LR__0462
LR__0463
	cmps	_var03, #0 wc
 if_b	mov	result1, #0
 if_b	jmp	#__system__strncmp_ret
	cmp	_var04, _var06 wz
 if_e	mov	result1, #0
 if_e	jmp	#__system__strncmp_ret
	cmp	_var04, #0 wz
 if_e	neg	result1, #1
 if_e	jmp	#__system__strncmp_ret
	cmp	_var06, #0 wz
 if_e	mov	result1, #1
 if_ne	mov	result1, _var04
 if_ne	sub	result1, _var06
__system__strncmp_ret
	ret

__system____root_opendir
	add	ptr___system__dat__, #100
	add	arg01, #4
	wrlong	ptr___system__dat__, arg01
	mov	result1, #0
	sub	ptr___system__dat__, #100
__system____root_opendir_ret
	ret

__system____root_readdir
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	add	local01, #4
	rdlong	local03, local01
	sub	local01, #4
LR__0470
	add	ptr___system__dat__, #116
	cmp	local03, ptr___system__dat__ wz
	sub	ptr___system__dat__, #116
 if_e	neg	result1, #1
 if_e	jmp	#LR__0471
	rdlong	arg03, local03 wz
 if_e	add	local03, #4
 if_e	jmp	#LR__0470
	rdlong	arg02, local03
	add	arg02, #1
	mov	arg01, local02
	mov	arg03, #64
	call	#__system__strncpy
	add	local02, #80
	wrbyte	#1, local02
	sub	local02, #8
	wrlong	#0, local02
	add	local02, #4
	wrlong	#0, local02
	add	local03, #4
	add	local01, #4
	wrlong	local03, local01
	mov	result1, #0
LR__0471
	mov	ptra, fp
	call	#popregs_
__system____root_readdir_ret
	ret

__system____root_closedir
	mov	result1, #0
__system____root_closedir_ret
	ret

__system____root_stat
	mov	_var01, arg02
	mov	arg01, _var01
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	add	_var01, #8
	wrlong	##4607, _var01
	mov	result1, #0
__system____root_stat_ret
	ret

__system___normalizeName
	mov	_var01, #0
	mov	_var02, arg01
	mov	_var03, _var02
LR__0480
	rdbyte	_var04, _var02 wz
 if_e	jmp	#LR__0499
	cmp	_var01, #0 wz
 if_ne	mov	_var04, _var03
 if_ne	add	_var03, #1
 if_ne	wrbyte	#47, _var04
 if_ne	mov	_var01, #0
	rdbyte	_var04, _var02
	cmp	_var04, #46 wz
 if_ne	jmp	#LR__0492
	add	_var02, #1
	rdbyte	_var04, _var02
	sub	_var02, #1
	cmp	_var04, #47 wz
 if_e	jmp	#LR__0481
	add	_var02, #1
	rdbyte	_var05, _var02
	sub	_var02, #1
	mov	_var06, _var05
	zerox	_var06, #7 wz
 if_ne	jmp	#LR__0482
LR__0481
	mov	_var07, _var02
	add	_var07, #1
	mov	_var02, _var07
	jmp	#LR__0496
LR__0482
	add	_var02, #1
	rdbyte	_var07, _var02
	sub	_var02, #1
	getbyte	_var04, _var07, #0
	cmp	_var04, #46 wz
 if_ne	jmp	#LR__0491
	add	_var02, #2
	rdbyte	_var07, _var02
	sub	_var02, #2
	getbyte	_var04, _var07, #0
	cmp	_var04, #47 wz
 if_e	jmp	#LR__0483
	add	_var02, #2
	rdbyte	_var05, _var02
	sub	_var02, #2
	mov	_var06, _var05
	zerox	_var06, #7 wz
 if_ne	jmp	#LR__0490
LR__0483
	add	_var02, #2
	cmps	_var03, arg01 wcz
 if_be	jmp	#LR__0489
	mov	_var08, _var03
	sub	_var08, #1
LR__0484
	rdbyte	_var04, _var08
	cmp	_var04, #47 wz
 if_ne	jmp	#LR__0485
	cmps	_var08, arg01 wcz
 if_a	sub	_var08, #1
 if_a	jmp	#LR__0484
LR__0485
	callpa	#(@LR__0487-@LR__0486)>>2,fcache_load_ptr_
LR__0486
	cmps	_var08, arg01 wcz
 if_be	jmp	#LR__0488
	rdbyte	_var04, _var08
	cmp	_var04, #47 wz
 if_ne	sub	_var08, #1
 if_ne	jmp	#LR__0486
LR__0487
LR__0488
	mov	_var03, _var08
LR__0489
	mov	_var01, #1
	jmp	#LR__0496
LR__0490
LR__0491
LR__0492
	callpa	#(@LR__0494-@LR__0493)>>2,fcache_load_ptr_
LR__0493
	rdbyte	_var04, _var02 wz
 if_ne	rdbyte	_var07, _var02
 if_ne	cmp	_var07, #47 wz
 if_e	jmp	#LR__0495
	mov	_var06, _var02
	mov	_var05, _var02
	add	_var05, #1
	rdbyte	_var09, _var06
	mov	_var02, _var05
	wrbyte	_var09, _var03
	add	_var03, #1
	jmp	#LR__0493
LR__0494
LR__0495
	rdbyte	_var04, _var02
	cmp	_var04, #47 wz
 if_ne	jmp	#LR__0480
	mov	_var01, #1
LR__0496
	callpa	#(@LR__0498-@LR__0497)>>2,fcache_load_ptr_
LR__0497
	rdbyte	_var04, _var02
	cmp	_var04, #47 wz
 if_e	mov	_var07, _var02
 if_e	add	_var07, #1
 if_e	mov	_var02, _var07
 if_e	jmp	#LR__0497
LR__0498
	jmp	#LR__0480
LR__0499
	wrbyte	#0, _var03
__system___normalizeName_ret
	ret

__system___strrev
	rdbyte	_var01, arg01 wz
 if_e	jmp	#__system___strrev_ret
	mov	_var02, arg01
	callpa	#(@LR__0502-@LR__0500)>>2,fcache_load_ptr_
LR__0500
	rdbyte	_var01, _var02 wz
 if_ne	add	_var02, #1
 if_ne	jmp	#LR__0500
	sub	_var02, #1
LR__0501
	cmps	_var02, arg01 wcz
 if_be	jmp	#LR__0503
	rdbyte	_var01, arg01
	rdbyte	_var03, _var02
	wrbyte	_var03, arg01
	wrbyte	_var01, _var02
	add	arg01, #1
	sub	_var02, #1
	jmp	#LR__0501
LR__0502
LR__0503
__system___strrev_ret
	ret

__system___fmtpad
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	getbyte	arg01, local02, #1
	shr	local02, #22
	and	local02, #3 wz
	mov	local04, #0
 if_e	mov	local02, #1
	test	local02, arg04 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0513
	subr	local03, arg01
	cmps	local03, #1 wc
 if_b	mov	result1, #0
 if_b	jmp	#LR__0513
	cmp	local02, #3 wz
 if_ne	jmp	#LR__0510
	cmp	arg04, #1 wz
	wrz	local02
	add	local03, local02
	abs	local03, local03 wc
	shr	local03, #1
	negc	local03, local03
LR__0510
	cmps	local03, #1 wc
 if_b	jmp	#LR__0512
	mov	local05, local03
LR__0511
	mov	local02, local01
	mov	local06, local01
	zerox	local02, #19
	shr	local06, #20
	shl	local06, #2
	add	local06, __methods__
	rdlong	local06, local06
	mov	arg01, #32
	mov	local03, objptr
	mov	objptr, local02
	call	local06
	mov	objptr, local03
	mov	local06, result1
	cmps	local06, #0 wc
 if_b	mov	result1, local06
 if_b	jmp	#LR__0513
	add	local04, local06
	djnz	local05, #LR__0511
LR__0512
	mov	result1, local04
LR__0513
	mov	ptra, fp
	call	#popregs_
__system___fmtpad_ret
	ret

__system___uitoa
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	cmps	arg05, #0 wz
	mov	arg05, local01
	mov	local02, #0
 if_ne	mov	local03, #55
 if_e	mov	local03, #87
LR__0520
	qdiv	arg02, arg03
	getqy	local04
	qdiv	arg02, arg03
	cmp	local04, #10 wc
 if_b	add	local04, #48
 if_ae	add	local04, local03
	wrbyte	local04, arg05
	add	arg05, #1
	add	local02, #1
	getqx	arg02
	cmp	arg02, #0 wz
 if_ne	jmp	#LR__0520
	cmp	local02, arg04 wc
 if_b	jmp	#LR__0520
	wrbyte	#0, arg05
	mov	arg01, local01
	call	#__system___strrev
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
__system___uitoa_ret
	ret

__system___gettxfunc
	mov	COUNT_, #1
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0530
	add	local01, #8
	rdlong	arg02, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0531
LR__0530
	mov	result1, #0
	jmp	#LR__0532
LR__0531
	bith	local01, #52
	mov	result1, local01
LR__0532
	mov	ptra, fp
	call	#popregs_
__system___gettxfunc_ret
	ret

__system___getiolock_0121
	mov	COUNT_, #1
	call	#pushregs_
	call	#__system____getftab
	mov	local01, result1 wz
 if_e	jmp	#LR__0540
	add	local01, #8
	rdlong	result1, local01 wz
	sub	local01, #8
 if_ne	jmp	#LR__0541
LR__0540
	add	ptr___system__dat__, ##724
	mov	result1, ptr___system__dat__
	sub	ptr___system__dat__, ##724
	jmp	#LR__0542
LR__0541
	add	local01, #12
	mov	result1, local01
LR__0542
	mov	ptra, fp
	call	#popregs_
__system___getiolock_0121_ret
	ret

__system___rxtxioctl_0188
	cmp	arg02, #256 wz
 if_e	jmp	#LR__0550
	cmp	arg02, #257 wz
 if_e	jmp	#LR__0551
	jmp	#LR__0552
LR__0550
	add	ptr___system__dat__, #8
	rdlong	result1, ptr___system__dat__
	sub	ptr___system__dat__, #8
	wrlong	result1, arg03
	mov	result1, #0
	jmp	#LR__0553
LR__0551
	rdlong	arg01, arg03
	add	ptr___system__dat__, #8
	wrlong	arg01, ptr___system__dat__
	sub	ptr___system__dat__, #8
	mov	result1, #0
	jmp	#LR__0553
LR__0552
	add	ptr___system__dat__, #32
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #32
	neg	result1, #1
LR__0553
__system___rxtxioctl_0188_ret
	ret

__system____dummy_flush_0189
	mov	result1, #0
__system____dummy_flush_0189_ret
	ret

__system____default_filbuf
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local02, #12
	rdlong	result1, local02 wz
	sub	local02, #12
 if_ne	jmp	#LR__0560
	add	local02, #20
	mov	result1, local02
	sub	local02, #4
	wrlong	result1, local02
	sub	local02, #4
	wrlong	##1024, local02
	sub	local02, #12
LR__0560
	add	local01, #20
	rdlong	local03, local01
	mov	local04, local03
	sub	local01, #20
	zerox	local04, #19
	shr	local03, #20
	shl	local03, #2
	add	local03, __methods__
	rdlong	local03, local03
	add	local02, #16
	rdlong	arg02, local02
	sub	local02, #4
	rdlong	arg03, local02
	sub	local02, #12
	mov	arg01, local01
	mov	local01, objptr
	mov	objptr, local04
	call	local03
	mov	objptr, local01
	mov	local04, result1
	cmps	local04, #0 wc
 if_b	neg	result1, #1
 if_b	jmp	#LR__0561
	wrlong	local04, local02
	add	local02, #16
	rdlong	local03, local02
	sub	local02, #12
	wrlong	local03, local02
	add	local02, #4
	rdlong	local03, local02
	or	local03, #1
	wrlong	local03, local02
	mov	result1, local04
LR__0561
	mov	ptra, fp
	call	#popregs_
__system____default_filbuf_ret
	ret

_fatfs_cc_ff_uni2oem
	mov	_var01, #0
	cmp	arg01, #128 wc
 if_b	mov	_var01, arg01
 if_b	jmp	#LR__0574
	cmp	arg01, ##65536 wc
 if_ae	jmp	#LR__0573
	getword	result1, arg02, #0
	cmp	result1, ##850 wz
 if_ne	jmp	#LR__0573
' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
	mov	_var01, #0
	callpa	#(@LR__0571-@LR__0570)>>2,fcache_load_ptr_
LR__0570
	getword	result1, _var01, #0
	cmp	result1, #128 wc
 if_ae	jmp	#LR__0572
	getword	result1, _var01, #0
	shl	result1, #1
	add	result1, ptr__fatfs_cc_dat__
	rdword	result1, result1
	cmp	arg01, result1 wz
 if_ne	add	_var01, #1
 if_ne	jmp	#LR__0570
LR__0571
LR__0572
	getword	_var01, _var01, #0
	add	_var01, #128
	getbyte	_var01, _var01, #0
LR__0573
LR__0574
' 			c = (c + 0x80) & 0xFF;
' 		}
' 	}
' 
' 	return c;
	mov	result1, _var01
_fatfs_cc_ff_uni2oem_ret
	ret

_fatfs_cc_ff_oem2uni
	mov	_var01, #0
	getword	result1, arg01, #0
	cmp	result1, #128 wc
 if_b	mov	_var01, arg01
 if_b	jmp	#LR__0581
	getword	arg02, arg02, #0
	cmp	arg02, ##850 wz
 if_ne	jmp	#LR__0580
	getword	result1, arg01, #0
	cmp	result1, #256 wc
 if_b	getword	arg01, arg01, #0
 if_b	sub	arg01, #128
 if_b	shl	arg01, #1
 if_b	add	arg01, ptr__fatfs_cc_dat__
 if_b	rdword	_var01, arg01
LR__0580
LR__0581
' 		}
' 	}
' 
' 	return c;
	mov	result1, _var01
_fatfs_cc_ff_oem2uni_ret
	ret

_fatfs_cc_ff_wtoupper
	mov	_var01, arg01
	cmp	_var01, ##65536 wc
 if_ae	jmp	#LR__0603
	mov	_var02, _var01
	getword	_var01, _var02, #0
	cmp	_var01, ##4096 wc
 if_b	add	ptr__fatfs_cc_dat__, #256
 if_b	mov	_var03, ptr__fatfs_cc_dat__
 if_b	sub	ptr__fatfs_cc_dat__, #256
 if_ae	add	ptr__fatfs_cc_dat__, ##754
 if_ae	mov	_var03, ptr__fatfs_cc_dat__
 if_ae	sub	ptr__fatfs_cc_dat__, ##754
	mov	_var04, _var03
' 		uc = (WORD)uni;
' 		p = uc < 0x1000 ? cvt1 : cvt2;
' 		for (;;) {
LR__0590
	rdword	_var05, _var04
	mov	_var03, _var05
	zerox	_var03, #15 wz
	add	_var04, #2
 if_e	jmp	#LR__0602
	getword	_var03, _var02, #0
	getword	_var01, _var05, #0
	cmp	_var03, _var01 wc
 if_b	jmp	#LR__0602
	rdword	_var06, _var04
	getword	_var07, _var06, #0
	shr	_var07, #8
	getword	_var06, _var06, #0
	getbyte	_var06, _var06, #0
	getword	_var03, _var02, #0
	getword	_var08, _var05, #0
	getword	_var01, _var06, #0
	add	_var08, _var01
	cmps	_var03, _var08 wc
	add	_var04, #2
 if_ae	jmp	#LR__0601
' 				switch (cmd) {
	getword	_var09, _var07, #0
	fle	_var09, #9
	jmprel	_var09
LR__0591
	jmp	#LR__0592
	jmp	#LR__0593
	jmp	#LR__0594
	jmp	#LR__0595
	jmp	#LR__0596
	jmp	#LR__0597
	jmp	#LR__0598
	jmp	#LR__0599
	jmp	#LR__0600
	jmp	#LR__0602
LR__0592
	getword	_var02, _var02, #0
	getword	_var05, _var05, #0
	sub	_var02, _var05
	shl	_var02, #1
	add	_var02, _var04
	rdword	_var02, _var02
	jmp	#LR__0602
LR__0593
	getword	_var03, _var02, #0
	getword	_var02, _var02, #0
	getword	_var05, _var05, #0
	sub	_var02, _var05
	and	_var02, #1
	subr	_var02, _var03
	jmp	#LR__0602
LR__0594
	getword	_var02, _var02, #0
	sub	_var02, #16
	jmp	#LR__0602
LR__0595
	getword	_var02, _var02, #0
	sub	_var02, #32
	jmp	#LR__0602
LR__0596
	getword	_var02, _var02, #0
	sub	_var02, #48
	jmp	#LR__0602
LR__0597
	getword	_var02, _var02, #0
	sub	_var02, #26
	jmp	#LR__0602
LR__0598
	getword	_var02, _var02, #0
	add	_var02, #8
	jmp	#LR__0602
LR__0599
	getword	_var02, _var02, #0
	sub	_var02, #80
	jmp	#LR__0602
LR__0600
	getword	_var02, _var02, #0
	sub	_var02, ##7264
' 				}
' 				break;
	jmp	#LR__0602
LR__0601
	zerox	_var07, #15 wz
 if_e	mul	_var06, #2
 if_e	add	_var04, _var06
	jmp	#LR__0590
LR__0602
	getword	_var01, _var02, #0
LR__0603
' 		}
' 		uni = uc;
' 	}
' 
' 	return uni;
	mov	result1, _var01
_fatfs_cc_ff_wtoupper_ret
	ret

_fatfs_cc_strncpy
	mov	_var01, arg01
	callpa	#(@LR__0611-@LR__0610)>>2,fcache_load_ptr_
' 
' 	dscan = dst;
' 	sscan = src;
' 	count = n;
' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
LR__0610
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_b	jmp	#LR__0612
	rdbyte	result1, arg02
	wrbyte	result1, _var01
	add	arg02, #1
	rdbyte	result1, _var01 wz
' 		continue;
	add	_var01, #1
 if_ne	jmp	#LR__0610
LR__0611
LR__0612
	callpa	#(@LR__0614-@LR__0613)>>2,fcache_load_ptr_
' 	while (--count >= 0)
LR__0613
	sub	arg03, #1
	cmps	arg03, #0 wc
 if_ae	mov	_var02, _var01
 if_ae	add	_var01, #1
 if_ae	wrbyte	#0, _var02
 if_ae	jmp	#LR__0613
LR__0614
' 		*dscan++ = '\0';
' 	return(dst);
	mov	result1, arg01
_fatfs_cc_strncpy_ret
	ret

_fatfs_cc_memcmp
' 	for (n = size; n > 0; n--)
	cmp	arg03, #0 wz
 if_e	jmp	#LR__0621
LR__0620
	rdbyte	_var01, arg01
	rdbyte	_var02, arg02
	cmp	_var01, _var02 wz
 if_e	add	arg01, #1
 if_e	add	arg02, #1
' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
 if_ne	rdbyte	result1, arg01
 if_ne	rdbyte	_var02, arg02
 if_ne	sub	result1, _var02
 if_ne	jmp	#_fatfs_cc_memcmp_ret
	djnz	arg03, #LR__0620
LR__0621
' 
' 	return(0);
	mov	result1, #0
_fatfs_cc_memcmp_ret
	ret

_fatfs_cc_strncmp
	mov	_var01, arg01 wz
 if_ne	jmp	#LR__0630
' 		return scan2 ? -1 : 0;
	cmp	arg02, #0 wz
 if_ne	neg	_var02, #1
 if_e	mov	_var02, #0
	mov	result1, _var02
	jmp	#_fatfs_cc_strncmp_ret
LR__0630
	cmp	arg02, #0 wz
 if_e	mov	result1, #1
 if_e	jmp	#_fatfs_cc_strncmp_ret
	mov	_var03, arg03
	callpa	#(@LR__0632-@LR__0631)>>2,fcache_load_ptr_
' 	count = n;
' 	do {
LR__0631
	rdbyte	_var04, _var01
	mov	_var05, arg02
	rdbyte	_var06, _var05
	sub	_var03, #1
	cmps	_var03, #0 wc
	add	_var01, #1
	add	arg02, #1
 if_ae	cmp	_var04, #0 wz
 if_nc_and_z	jmp	#LR__0633
 if_ae	cmp	_var04, _var06 wz
 if_nc_and_z	jmp	#LR__0631
LR__0632
LR__0633
	cmps	_var03, #0 wc
' 		return(0);
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var04, _var06 wz
' 		return(0);
 if_e	mov	result1, #0
 if_e	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var04, #0 wz
' 		return(-1);
 if_e	neg	result1, #1
 if_e	jmp	#_fatfs_cc_strncmp_ret
	cmp	_var06, #0 wz
' 		return(1);
 if_e	mov	result1, #1
' 		return(c1 - c2);
 if_ne	mov	result1, _var04
 if_ne	sub	result1, _var06
_fatfs_cc_strncmp_ret
	ret

_fatfs_cc_strchr
' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
' 	while ((c = *s++) != (char) charwanted)
LR__0640
	mov	_var01, arg01
	rdbyte	_var02, _var01
	getbyte	_var03, _var02, #0
	getbyte	_var04, arg02, #0
	cmp	_var03, _var04 wz
	add	arg01, #1
 if_e	jmp	#LR__0641
	mov	_var03, _var02
	zerox	_var03, #7 wz
 if_e	mov	result1, #0
 if_e	jmp	#_fatfs_cc_strchr_ret
	jmp	#LR__0640
LR__0641
' 	return((char *)--s);
	sub	arg01, #1
	mov	result1, arg01
_fatfs_cc_strchr_ret
	ret

_fatfs_cc_disk_initialize
	mov	COUNT_, #4
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrbyte	arg01, fp
	add	objptr, ##532
	rdlong	arg04, objptr
	add	fp, #44
	wrlong	arg04, fp
	sub	objptr, #4
	rdlong	arg04, objptr
	add	fp, #4
	wrlong	arg04, fp
	add	objptr, #8
	rdlong	arg04, objptr
	add	fp, #4
	wrlong	arg04, fp
	add	objptr, #4
	rdlong	arg04, objptr
	add	fp, #4
	wrlong	arg04, fp
	add	objptr, #4
	wrbyte	#1, objptr
	sub	objptr, ##544
	sub	fp, #56
	rdbyte	arg04, fp wz
	sub	fp, #4
' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
'             return RES_NOTRDY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0668
	mov	arg01, ##10000
	call	#__system___waitus
	add	fp, #48
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	#0, arg01
	add	fp, #4
	rdlong	arg01, fp
	wrpin	##4608, arg01
	sub	fp, #12
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	add	fp, #4
	rdlong	arg01, fp
	drvh	arg01
	sub	fp, #32
	wrlong	##524304, fp
	add	fp, #4
	wrlong	##409672, fp
	add	fp, #20
	rdlong	local01, fp
	sub	fp, #24
	rdlong	arg03, fp
	dirl	local01
	wrpin	##475208, local01
	wxpin	arg03, local01
	wypin	#0, local01
	dirh	local01
	add	fp, #28
	rdlong	local02, fp
	sub	local01, local02
	and	local01, #7
	shl	local01, #24
	mov	arg02, #120
	or	arg02, local01
	sub	fp, #20
	wrlong	arg02, fp
	add	fp, #20
	rdlong	arg01, fp
	bith	arg02, #16
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#31, arg01
	wypin	##-1, arg01
	dirh	arg01
	sub	fp, #4
	rdlong	arg02, fp
	add	fp, #8
	rdlong	local03, fp
	sub	arg02, local03
	and	arg02, #7
	shl	arg02, #24
	sub	fp, #20
	wrlong	arg02, fp
	or	arg02, ##21114
	wrlong	arg02, fp
	add	fp, #20
	rdlong	arg01, fp
	dirl	arg01
	wrpin	arg02, arg01
	wxpin	#39, arg01
	wypin	#0, arg01
	dirh	arg01
	sub	fp, #40
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #10
	call	#_fatfs_cc_rcvr_mmc_0595
	mov	arg01, #0
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	call	#_fatfs_cc_deselect_0605
	mov	arg01, #100
	call	#__system___waitus
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #10
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
	mov	arg01, #0
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	getbyte	arg04, result1, #0
	cmp	arg04, #1 wz
 if_ne	jmp	#LR__0667
	mov	arg01, #8
	mov	arg02, #426
	call	#_fatfs_cc_send_cmd_0619
	getbyte	result1, result1, #0
	cmp	result1, #1 wz
 if_ne	jmp	#LR__0653
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #4
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #22
	rdbyte	local04, fp
	sub	fp, #22
	cmp	local04, #1 wz
 if_e	add	fp, #23
 if_e	rdbyte	local03, fp
 if_e	sub	fp, #23
 if_e	cmp	local03, #170 wz
 if_ne	jmp	#LR__0666
' 				for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0650
	add	fp, #24
	rdlong	local01, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0651
	mov	arg01, #169
	decod	arg02, #30
	call	#_fatfs_cc_send_cmd_0619
	mov	local04, result1
	zerox	local04, #7 wz
 if_e	jmp	#LR__0651
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local04, fp
	sub	local04, #1
	wrlong	local04, fp
	sub	fp, #24
	jmp	#LR__0650
LR__0651
	add	fp, #24
	rdlong	local04, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0652
	mov	arg01, #58
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	mov	local03, result1
	zerox	local03, #7 wz
 if_ne	jmp	#LR__0652
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #4
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #20
	rdbyte	local01, fp
	test	local01, #64 wz
 if_ne	mov	local04, #12
 if_e	mov	local04, #4
	sub	fp, #8
	wrbyte	local04, fp
	sub	fp, #12
LR__0652
	rdlong	local04, #20
	add	fp, #24
	wrlong	local04, fp
	add	fp, #12
	rdlong	local04, fp
	bith	local04, #27
	wrlong	local04, fp
	sub	fp, #12
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##150000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131076, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0666
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##200000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131077, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0666
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##280000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131078, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0666
	add	fp, #28
	wrlong	##196616, fp
	sub	fp, #28
	jmp	#LR__0666
LR__0653
	mov	arg01, #169
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	getbyte	local04, result1, #0
	cmp	local04, #2 wc
 if_ae	jmp	#LR__0654
	add	fp, #12
	wrbyte	#2, fp
	add	fp, #4
	wrbyte	#169, fp
	sub	fp, #16
	jmp	#LR__0655
LR__0654
	add	fp, #12
	wrbyte	#1, fp
	add	fp, #4
	wrbyte	#1, fp
	sub	fp, #16
LR__0655
' 				ty =  0x01 ; cmd =  (1) ;
' 			}
' 			for (tmr = 1000; tmr; tmr--) {
	add	fp, #24
	wrlong	##1000, fp
	sub	fp, #24
LR__0656
	add	fp, #24
	rdlong	local03, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0657
	add	fp, #16
	rdbyte	arg01, fp
	sub	fp, #16
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	mov	local04, result1
	zerox	local04, #7 wz
 if_e	jmp	#LR__0657
	mov	arg01, ##1000
	call	#__system___waitus
	add	fp, #24
	rdlong	local04, fp
	sub	local04, #1
	wrlong	local04, fp
	sub	fp, #24
	jmp	#LR__0656
LR__0657
	add	fp, #24
	rdlong	local04, fp wz
	sub	fp, #24
 if_e	jmp	#LR__0658
	mov	arg01, #16
	decod	arg02, #9
	call	#_fatfs_cc_send_cmd_0619
	zerox	result1, #7 wz
 if_e	jmp	#LR__0659
LR__0658
	add	fp, #12
	wrbyte	#0, fp
	sub	fp, #12
LR__0659
	rdlong	local04, #20
	add	fp, #24
	wrlong	local04, fp
	sub	fp, #24
	cmp	local04, ##100000001 wc
 if_ae	jmp	#LR__0660
	add	fp, #36
	rdlong	local04, fp
	bith	local04, #27
	wrlong	local04, fp
	sub	fp, #36
	jmp	#LR__0661
LR__0660
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##200000001 wc
 if_b	add	fp, #36
 if_b	rdlong	local04, fp
 if_b	or	local04, ##134283264
 if_b	wrlong	local04, fp
 if_b	sub	fp, #36
LR__0661
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##100000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##131076, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0665
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##150000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##196614, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0664
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##200000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##262152, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0663
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##250000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##327690, fp
 if_b	sub	fp, #28
 if_b	jmp	#LR__0662
	add	fp, #24
	rdlong	local04, fp
	sub	fp, #24
	cmp	local04, ##300000001 wc
 if_b	add	fp, #28
 if_b	wrlong	##393228, fp
	sumc	fp, #28
 if_ae	wrlong	##458766, fp
 if_ae	sub	fp, #28
LR__0662
LR__0663
LR__0664
LR__0665
LR__0666
LR__0667
	add	fp, #12
	rdbyte	local04, fp
	add	objptr, ##545
	wrbyte	local04, objptr
	rdbyte	local01, fp wz
 if_ne	mov	local04, #0
 if_e	mov	local04, #1
	add	fp, #32
	wrbyte	local04, fp
	rdbyte	local04, fp
	sub	fp, #44
	sub	objptr, #1
	wrbyte	local04, objptr
	sub	objptr, ##544
	call	#_fatfs_cc_deselect_0605
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #24
	rdlong	arg02, fp
	wxpin	arg02, arg01
	add	fp, #28
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	wrpin	arg02, arg01
' 
' 		}
' 	}
' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
' 	CardType = ty;
' 	s = ty ? 0 :  0x01 ;
' 	Stat = s;
' 
' 	deselect();
' 
' 
' 	_wxpin( PIN_CLK, ck_div );
' 	_wrpin( PIN_DI, spm_tx );
' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
' 	return s;
	add	fp, #8
	rdbyte	result1, fp
	sub	fp, #44
LR__0668
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_initialize_ret
	ret

_fatfs_cc_disk_read
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	mov	local03, arg04
	cmp	arg01, #0 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, ##544
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, ##544
	getbyte	result1, result1, #0
	test	result1, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0672
	add	objptr, ##545
	rdbyte	local04, objptr
	sub	objptr, ##545
	test	local04, #8 wz
 if_e	shl	local02, #9
	cmp	local03, #2 wc
 if_ae	mov	local04, #18
 if_b	mov	local04, #17
	mov	arg02, local02
	mov	arg01, local04
	call	#_fatfs_cc_send_cmd_0619
	mov	local05, result1
	zerox	local05, #7 wz
 if_ne	jmp	#LR__0671
' 		do {
LR__0670
	mov	arg01, local01
	decod	arg02, #9
	call	#_fatfs_cc_rcvr_datablock_0613
	cmp	result1, #0 wz
 if_ne	add	local01, ##512
 if_ne	djnz	local03, #LR__0670
	getbyte	local04, local04, #0
	cmp	local04, #18 wz
 if_e	mov	arg01, #12
 if_e	mov	arg02, #0
 if_e	call	#_fatfs_cc_send_cmd_0619
LR__0671
	call	#_fatfs_cc_deselect_0605
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local03, #0 wz
 if_ne	mov	local05, #1
 if_e	mov	local05, #0
	mov	result1, local05
LR__0672
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_read_ret
	ret

_fatfs_cc_disk_write
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg04
	mov	local03, arg03
	cmp	arg01, #0 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, ##544
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, ##544
	getbyte	result1, result1, #0
	test	result1, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0684
	add	objptr, ##545
	rdbyte	arg03, objptr
	sub	objptr, ##545
	test	arg03, #8 wz
 if_e	shl	local03, #9
	cmp	local02, #1 wz
 if_ne	jmp	#LR__0680
	mov	arg01, #24
	mov	arg02, local03
	call	#_fatfs_cc_send_cmd_0619
	mov	local04, result1
	zerox	local04, #7 wz
 if_ne	jmp	#LR__0683
	mov	arg01, local01
	mov	arg02, #254
	call	#_fatfs_cc_xmit_datablock_0615
	cmp	result1, #0 wz
 if_ne	mov	local02, #0
	jmp	#LR__0683
LR__0680
	add	objptr, ##545
	rdbyte	local04, objptr
	sub	objptr, ##545
	test	local04, #6 wz
 if_ne	mov	arg01, #151
 if_ne	mov	arg02, local02
 if_ne	call	#_fatfs_cc_send_cmd_0619
	mov	arg02, local03
	mov	arg01, #25
	call	#_fatfs_cc_send_cmd_0619
	mov	local04, result1
	zerox	local04, #7 wz
 if_ne	jmp	#LR__0682
' 			do {
LR__0681
	mov	arg01, local01
	mov	arg02, #252
	call	#_fatfs_cc_xmit_datablock_0615
	cmp	result1, #0 wz
 if_ne	add	local01, ##512
 if_ne	djnz	local02, #LR__0681
	mov	arg01, #0
	mov	arg02, #253
	call	#_fatfs_cc_xmit_datablock_0615
	cmp	result1, #0 wz
 if_e	mov	local02, #1
LR__0682
LR__0683
	call	#_fatfs_cc_deselect_0605
' 				count = 1;
' 		}
' 	}
' 	deselect();
' 
' 	return count ? RES_ERROR : RES_OK;
	cmp	local02, #0 wz
 if_ne	mov	local04, #1
 if_e	mov	local04, #0
	mov	result1, local04
LR__0684
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_write_ret
	ret

_fatfs_cc_disk_ioctl
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #48
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdbyte	arg01, fp wz
	sub	fp, #4
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, ##544
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, ##544
	getbyte	result1, result1, #0
	test	result1, #1 wz
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__0698
	add	fp, #16
	wrlong	#1, fp
' 
' 	res = RES_ERROR;
' 	switch (ctrl) {
	sub	fp, #8
	rdbyte	local01, fp
	sub	fp, #8
	fle	local01, #4
	jmprel	local01
LR__0690
	jmp	#LR__0691
	jmp	#LR__0692
	jmp	#LR__0696
	jmp	#LR__0695
	jmp	#LR__0696
LR__0691
	call	#_fatfs_cc_select_0609
	cmp	result1, #0 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#0, fp
 if_ne	sub	fp, #16
' 			break;
	jmp	#LR__0697
LR__0692
	mov	arg01, #9
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	mov	local01, result1
	zerox	local01, #7 wz
 if_ne	jmp	#LR__0697
	add	fp, #24
	mov	arg01, fp
	sub	fp, #24
	mov	arg02, #16
	call	#_fatfs_cc_rcvr_datablock_0613
	cmp	result1, #0 wz
 if_e	jmp	#LR__0697
	add	fp, #24
	rdbyte	local01, fp
	sub	fp, #24
	shr	local01, #6
	cmp	local01, #1 wz
 if_ne	jmp	#LR__0693
	add	fp, #33
	rdbyte	local01, fp
	sub	fp, #1
	rdbyte	result1, fp
	getword	result1, result1, #0
	shl	result1, #8
	add	local01, result1
	sub	fp, #1
	rdbyte	result1, fp
	and	result1, #63
	shl	result1, #16
	add	local01, result1
	add	local01, #1
	add	fp, #9
	wrlong	local01, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #40
	shl	result1, #10
	wrlong	result1, local01
	jmp	#LR__0694
LR__0693
	add	fp, #29
	rdbyte	local01, fp
	getnib	local01, local01, #0
	add	fp, #5
	rdbyte	result1, fp
	and	result1, #128
	sar	result1, #7
	add	local01, result1
	sub	fp, #1
	rdbyte	result1, fp
	and	result1, #3
	shl	result1, #1
	add	local01, result1
	add	local01, #2
	sub	fp, #13
	wrbyte	local01, fp
	add	fp, #12
	rdbyte	local01, fp
	shr	local01, #6
	sub	fp, #1
	rdbyte	result1, fp
	getword	result1, result1, #0
	shl	result1, #2
	add	local01, result1
	sub	fp, #1
	rdbyte	result1, fp
	and	result1, #3
	getword	result1, result1, #0
	shl	result1, #10
	add	local01, result1
	add	local01, #1
	add	fp, #10
	wrlong	local01, fp
	sub	fp, #28
	rdlong	local01, fp
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #20
	rdbyte	arg03, fp
	sub	fp, #20
	sub	arg03, #9
	shl	result1, arg03
	wrlong	result1, local01
LR__0694
	add	fp, #16
	wrlong	#0, fp
	sub	fp, #16
' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
' 					*(LBA_t*)buff = cs << (n - 9);
' 				}
' 				res = RES_OK;
' 			}
' 			break;
	jmp	#LR__0697
LR__0695
	add	fp, #12
	rdlong	local01, fp
	wrlong	#128, local01
	add	fp, #4
	wrlong	#0, fp
	sub	fp, #16
' 			*(DWORD*)buff = 128;
' 			res = RES_OK;
' 			break;
	jmp	#LR__0697
LR__0696
	add	fp, #16
	wrlong	#4, fp
	sub	fp, #16
LR__0697
	call	#_fatfs_cc_deselect_0605
' 			res = RES_PARERR;
' 	}
' 
' 	deselect();
' 
' 	return res;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__0698
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_ioctl_ret
	ret

_fatfs_cc_disk_setpins
	cmp	arg01, #0 wz
 if_ne	neg	result1, #1
 if_ne	jmp	#_fatfs_cc_disk_setpins_ret
	add	objptr, ##528
	wrlong	arg02, objptr
	add	objptr, #4
	wrlong	arg03, objptr
	add	objptr, #4
	wrlong	arg04, objptr
	add	objptr, #4
	wrlong	arg05, objptr
	sub	objptr, ##540
	mov	result1, #0
_fatfs_cc_disk_setpins_ret
	ret

_fatfs_cc_tchar2uni
	rdlong	_var01, arg01
	mov	_var02, _var01
	add	_var01, #1
	mov	_var03, _var01
	rdbyte	_var04, _var02
	test	_var04, #128 wz
 if_e	jmp	#LR__0707
	mov	_var05, _var04
	and	_var05, #224
	cmp	_var05, #192 wz
 if_e	and	_var04, #31
 if_e	mov	_var06, #1
 if_e	jmp	#LR__0701
	mov	_var05, _var04
	and	_var05, #240
	cmp	_var05, #224 wz
 if_e	getnib	_var04, _var04, #0
 if_e	mov	_var06, #2
 if_e	jmp	#LR__0700
	mov	_var05, _var04
	and	_var05, #248
	cmp	_var05, #240 wz
 if_e	and	_var04, #7
 if_e	mov	_var06, #3
' 			return 0xFFFFFFFF;
 if_ne	neg	result1, #1
 if_ne	jmp	#_fatfs_cc_tchar2uni_ret
LR__0700
LR__0701
' 		}
' 		do {
LR__0702
	rdbyte	_var07, _var03
	getbyte	_var05, _var07, #0
	and	_var05, #192
	cmp	_var05, #128 wz
	add	_var03, #1
 if_ne	neg	result1, #1
 if_ne	jmp	#_fatfs_cc_tchar2uni_ret
	shl	_var04, #6
	getbyte	_var02, _var07, #0
	and	_var02, #63
	or	_var04, _var02
	djnz	_var06, #LR__0702
	cmp	_var04, #128 wc
 if_b	jmp	#LR__0704
	cmp	_var04, ##55296 wc
 if_b	jmp	#LR__0703
	cmp	_var04, ##57344 wc
 if_b	jmp	#LR__0704
LR__0703
	cmp	_var04, ##1114112 wc
 if_b	jmp	#LR__0705
LR__0704
	neg	result1, #1
	jmp	#_fatfs_cc_tchar2uni_ret
LR__0705
	cmp	_var04, ##65536 wc
 if_b	jmp	#LR__0706
	mov	_var02, _var04
	sub	_var02, ##65536
	shl	_var02, #6
	and	_var02, ##67043328
	mov	_var05, ##-671032320
	or	_var05, _var02
	zerox	_var04, #9
	or	_var04, _var05
LR__0706
LR__0707
	wrlong	_var03, arg01
' 	}
' #line 811 "ff.c"
' 	*str = p;
' 	return uc;
	mov	result1, _var04
_fatfs_cc_tchar2uni_ret
	ret

_fatfs_cc_put_utf
	cmp	arg01, #128 wc
 if_ae	jmp	#LR__0710
	cmp	arg03, #1 wc
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc_put_utf_ret
	wrbyte	arg01, arg02
' 		*buf = (TCHAR)chr;
' 		return 1;
	mov	result1, #1
	jmp	#_fatfs_cc_put_utf_ret
LR__0710
	cmp	arg01, ##2048 wc
 if_ae	jmp	#LR__0711
	cmp	arg03, #2 wc
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc_put_utf_ret
	mov	result1, arg01
	shr	result1, #6
	and	result1, #31
	mov	arg03, #192
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	and	arg01, #63
	mov	result1, #128
	or	result1, arg01
	wrbyte	result1, arg02
' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
' 		return 2;
	mov	result1, #2
	jmp	#_fatfs_cc_put_utf_ret
LR__0711
	cmp	arg01, ##65536 wc
 if_ae	jmp	#LR__0714
	cmp	arg03, #3 wc
 if_b	jmp	#LR__0712
	cmp	arg01, ##55296 wc
 if_b	jmp	#LR__0713
	cmp	arg01, ##57344 wc
 if_ae	jmp	#LR__0713
LR__0712
	mov	result1, #0
	jmp	#_fatfs_cc_put_utf_ret
LR__0713
	getnib	result1, arg01, #3
	mov	arg03, #224
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	mov	result1, arg01
	shr	result1, #6
	and	result1, #63
	mov	arg03, #128
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	and	arg01, #63
	mov	result1, #128
	or	result1, arg01
	wrbyte	result1, arg02
' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
' 		return 3;
	mov	result1, #3
	jmp	#_fatfs_cc_put_utf_ret
LR__0714
	cmp	arg03, #4 wc
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc_put_utf_ret
	mov	_var01, arg01
	bitl	_var01, #480
	sub	_var01, ##-671088640
	shr	_var01, #6
	getword	arg01, arg01, #0
	sub	arg01, ##56320
	cmp	_var01, ##1048576 wc
 if_b	cmp	arg01, ##1024 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#_fatfs_cc_put_utf_ret
	or	_var01, arg01
	add	_var01, ##65536
	mov	result1, _var01
	shr	result1, #18
	and	result1, #7
	mov	arg03, #240
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	mov	result1, _var01
	shr	result1, #12
	and	result1, #63
	mov	arg03, #128
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	mov	result1, _var01
	shr	result1, #6
	and	result1, #63
	mov	arg03, #128
	or	arg03, result1
	wrbyte	arg03, arg02
	add	arg02, #1
	and	_var01, #63
	mov	result1, #128
	or	result1, _var01
	wrbyte	result1, arg02
' 	chr = (hc | chr) + 0x10000;
' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
' 	return 4;
	mov	result1, #4
_fatfs_cc_put_utf_ret
	ret

_fatfs_cc_sync_window
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	mov	local02, #0
	add	local01, #3
	rdbyte	result1, local01 wz
	sub	local01, #3
 if_e	jmp	#LR__0722
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #51
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	local01, #48
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0720
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #45
	rdlong	result1, local01
	sub	local01, #12
	rdlong	arg04, local01
	sub	result1, arg04
	sub	local01, #8
	rdlong	arg04, local01
	sub	local01, #28
	cmp	result1, arg04 wc
 if_ae	jmp	#LR__0721
	add	local01, #2
	rdbyte	arg04, local01
	sub	local01, #2
	cmp	arg04, #2 wz
 if_ne	jmp	#LR__0721
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #51
	mov	arg02, local01
	sub	local01, #4
	rdlong	arg03, local01
	sub	local01, #20
	rdlong	local01, local01
	add	arg03, local01
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	jmp	#LR__0721
LR__0720
	mov	local02, #1
LR__0721
LR__0722
' 			res = FR_DISK_ERR;
' 		}
' 	}
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_sync_window_ret
	ret

_fatfs_cc_move_window
	mov	COUNT_, #3
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #0
	add	local01, #48
	rdlong	arg04, local01
	sub	local01, #48
	cmp	local02, arg04 wz
 if_e	jmp	#LR__0731
	mov	arg01, local01
	call	#_fatfs_cc_sync_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__0730
	add	local01, #1
	rdbyte	arg01, local01
	add	local01, #51
	mov	arg02, local01
	mov	arg03, local02
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_ne	neg	local02, #1
 if_ne	mov	local03, #1
	sub	local01, #4
	wrlong	local02, local01
LR__0730
LR__0731
' 				sect = (LBA_t)0 - 1;
' 				res = FR_DISK_ERR;
' 			}
' 			fs->winsect = sect;
' 		}
' 	}
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_move_window_ret
	ret

_fatfs_cc_sync_fs
	mov	COUNT_, #2
	call	#pushregs_
	mov	local01, arg01
	call	#_fatfs_cc_sync_window
	mov	local02, result1 wz
 if_ne	jmp	#LR__0741
	rdbyte	arg04, local01
	cmp	arg04, #3 wz
 if_e	add	local01, #4
 if_e	rdbyte	arg04, local01
 if_e	sub	local01, #4
 if_e	cmp	arg04, #1 wz
 if_ne	jmp	#LR__0740
	add	local01, #52
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #9
	call	#\builtin_bytefill_
	mov	arg01, local01
	add	arg01, #510
	wrword	##43605, arg01
	wrlong	##1096897106, local01
	mov	arg01, local01
	add	arg01, #484
	wrlong	##1631679090, arg01
	mov	arg01, local01
	add	arg01, #488
	sub	local01, #32
	rdlong	arg02, local01
	wrlong	arg02, arg01
	add	local01, #32
	mov	arg01, local01
	add	arg01, #492
	sub	local01, #36
	rdlong	arg02, local01
	wrlong	arg02, arg01
	add	local01, #16
	rdlong	arg03, local01
	add	arg03, #1
	add	local01, #16
	wrlong	arg03, local01
	sub	local01, #47
	rdbyte	arg01, local01
	add	local01, #51
	mov	arg02, local01
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	sub	local01, #48
	wrbyte	#0, local01
	sub	local01, #4
LR__0740
	add	local01, #1
	rdbyte	arg01, local01
	mov	arg02, #0
	mov	arg03, #0
	call	#_fatfs_cc_disk_ioctl
	cmp	result1, #0 wz
 if_ne	mov	local02, #1
LR__0741
' 	}
' 
' 	return res;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_sync_fs_ret
	ret

_fatfs_cc_clst2sect
	sub	arg02, #2
	add	arg01, #24
	rdlong	_var01, arg01
	sub	arg01, #24
	sub	_var01, #2
	cmp	arg02, _var01 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#_fatfs_cc_clst2sect_ret
	add	arg01, #10
	rdword	_var01, arg01
	qmul	_var01, arg02
' 	return fs->database + (LBA_t)fs->csize * clst;
	add	arg01, #34
	rdlong	result1, arg01
	getqx	_var01
	add	result1, _var01
_fatfs_cc_clst2sect_ret
	ret

_fatfs_cc_get_fat
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg02
	rdlong	local02, arg01
	cmp	local01, #2 wc
 if_b	jmp	#LR__0750
	add	local02, #24
	rdlong	local03, local02
	sub	local02, #24
	cmp	local01, local03 wc
 if_b	jmp	#LR__0751
LR__0750
	mov	local04, #1
	jmp	#LR__0758
LR__0751
	neg	local04, #1
' 		val = 0xFFFFFFFF;
' 
' 		switch (fs->fs_type) {
	rdbyte	local05, local02
	sub	local05, #1
	fle	local05, #3
	jmprel	local05
LR__0752
	jmp	#LR__0753
	jmp	#LR__0754
	jmp	#LR__0755
	jmp	#LR__0756
LR__0753
	mov	local05, local01
	mov	arg01, local01
	shr	arg01, #1
	add	local05, arg01
	mov	arg01, local02
	mov	local06, local05
	shr	local06, #9
	add	local02, #36
	rdlong	arg02, local02
	sub	local02, #36
	add	arg02, local06
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0757
	mov	local06, local05
	and	local06, #511
	add	local02, #52
	add	local06, local02
	rdbyte	local07, local06
	sub	local02, #52
	mov	arg01, local02
	add	local05, #1
	mov	local06, local05
	shr	local06, #9
	add	local02, #36
	rdlong	arg02, local02
	sub	local02, #36
	add	arg02, local06
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0757
	and	local05, #511
	add	local02, #52
	add	local05, local02
	rdbyte	local06, local05
	shl	local06, #8
	or	local07, local06
	test	local01, #1 wz
 if_ne	shr	local07, #4
 if_ne	mov	local03, local07
 if_e	zerox	local07, #11
 if_e	mov	local03, local07
	mov	local04, local03
' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
' 			break;
	jmp	#LR__0757
LR__0754
	mov	arg01, local02
	mov	local06, local01
	shr	local06, #8
	add	local02, #36
	rdlong	arg02, local02
	sub	local02, #36
	add	arg02, local06
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0757
	add	local02, #52
	shl	local01, #1
	and	local01, #511
	add	local02, local01
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, local02
	getword	local04, result1, #0
' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
' 			break;
	jmp	#LR__0757
LR__0755
	mov	arg01, local02
	mov	local06, local01
	shr	local06, #7
	add	local02, #36
	rdlong	arg02, local02
	sub	local02, #36
	add	arg02, local06
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0757
	add	local02, #52
	shl	local01, #2
	and	local01, #511
	add	local02, local01
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	local04, local02
	bitl	local04, #124
' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
' 			break;
	jmp	#LR__0757
LR__0756
	mov	local04, #1
LR__0757
LR__0758
' 			val = 1;
' 		}
' 	}
' 
' 	return val;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_fat_ret
	ret

_fatfs_cc_put_fat
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, #2
	cmp	local02, #2 wc
 if_b	jmp	#LR__0767
	add	local01, #24
	rdlong	local05, local01
	sub	local01, #24
	cmp	local02, local05 wc
 if_ae	jmp	#LR__0767
' 		switch (fs->fs_type) {
	rdbyte	local06, local01
	sub	local06, #1
	fle	local06, #3
	jmprel	local06
LR__0760
	jmp	#LR__0761
	jmp	#LR__0764
	jmp	#LR__0765
	jmp	#LR__0766
LR__0761
	mov	local07, local02
	mov	local05, local02
	shr	local05, #1
	add	local07, local05
	mov	arg01, local01
	mov	local06, local07
	shr	local06, #9
	add	local01, #36
	rdlong	arg02, local01
	sub	local01, #36
	add	arg02, local06
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__0766
	add	local01, #52
	mov	local08, local01
	mov	local05, local07
	and	local05, #511
	add	local08, local05
	test	local02, #1 wz
	sub	local01, #52
	add	local07, #1
 if_e	jmp	#LR__0762
	rdbyte	local05, local08
	getnib	local05, local05, #0
	getbyte	local06, local03, #0
	shl	local06, #4
	or	local05, local06
	jmp	#LR__0763
LR__0762
	mov	local05, local03
LR__0763
	wrbyte	local05, local08
	add	local01, #3
	wrbyte	#1, local01
	sub	local01, #3
	mov	arg01, local01
	mov	local08, local07
	shr	local08, #9
	add	local01, #36
	rdlong	arg02, local01
	sub	local01, #36
	add	arg02, local08
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__0766
	add	local01, #52
	mov	local08, local01
	and	local07, #511
	add	local08, local07
	test	local02, #1 wz
 if_ne	shr	local03, #4
 if_ne	mov	local05, local03
 if_e	rdbyte	local05, local08
 if_e	and	local05, #240
 if_e	getbyte	local03, local03, #1
 if_e	getnib	local03, local03, #0
 if_e	or	local05, local03
	wrbyte	local05, local08
	sub	local01, #49
	wrbyte	#1, local01
' 			p = fs->win + bc %  ((UINT) 512 ) ;
' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__0766
LR__0764
	mov	arg01, local01
	mov	local08, local02
	shr	local08, #8
	add	local01, #36
	rdlong	arg02, local01
	sub	local01, #36
	add	arg02, local08
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__0766
	add	local01, #52
	mov	arg01, local01
	shl	local02, #1
	and	local02, #511
	add	arg01, local02
	wrword	local03, arg01
	sub	local01, #49
	wrbyte	#1, local01
' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
' 			fs->wflag = 1;
' 			break;
	jmp	#LR__0766
LR__0765
	mov	arg01, local01
	mov	local08, local02
	shr	local08, #7
	add	local01, #36
	rdlong	arg02, local01
	sub	local01, #36
	add	arg02, local08
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__0766
	bitl	local03, #124
	add	local01, #52
	mov	local08, local02
	shl	local08, #2
	and	local08, #511
	mov	arg01, local01
	add	arg01, local08
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	local08, arg01
	and	local08, ##-268435456
	or	local03, local08
	mov	arg01, local01
	shl	local02, #2
	and	local02, #511
	add	arg01, local02
	wrlong	local03, arg01
	sub	local01, #49
	wrbyte	#1, local01
' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
' 			}
' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
' 			fs->wflag = 1;
' 			break;
LR__0766
LR__0767
' 		}
' 	}
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_put_fat_ret
	ret

_fatfs_cc_remove_chain
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	rdlong	local04, local01
	cmp	local02, #2 wc
 if_b	jmp	#LR__0770
	add	local04, #24
	rdlong	result1, local04
	sub	local04, #24
	cmp	local02, result1 wc
 if_b	jmp	#LR__0771
LR__0770
	mov	result1, #2
	jmp	#LR__0776
LR__0771
	cmp	local03, #0 wz
 if_e	jmp	#LR__0772
	mov	arg02, local03
	mov	arg01, local04
	neg	arg03, #1
	call	#_fatfs_cc_put_fat
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0776
LR__0772
' 	}
' 
' 
' 	do {
LR__0773
	mov	arg02, local02
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local05, result1 wz
 if_e	jmp	#LR__0775
	cmp	local05, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__0776
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0776
	mov	arg02, local02
	mov	arg01, local04
	mov	arg03, #0
	call	#_fatfs_cc_put_fat
	mov	local03, result1 wz
 if_ne	mov	result1, local03
 if_ne	jmp	#LR__0776
	add	local04, #24
	rdlong	local03, local04
	sub	local03, #2
	sub	local04, #4
	rdlong	local02, local04
	sub	local04, #20
	cmp	local02, local03 wc
 if_ae	jmp	#LR__0774
	add	local04, #20
	rdlong	local03, local04
	add	local03, #1
	wrlong	local03, local04
	sub	local04, #16
	rdbyte	local03, local04
	or	local03, #1
	wrbyte	local03, local04
	sub	local04, #4
LR__0774
	mov	local02, local05
	add	local04, #24
	rdlong	local05, local04
	sub	local04, #24
	cmp	local02, local05 wc
 if_b	jmp	#LR__0773
LR__0775
' #line 1500 "ff.c"
' 	return FR_OK;
	mov	result1, #0
LR__0776
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_remove_chain_ret
	ret

_fatfs_cc_create_chain
	mov	COUNT_, #9
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02 wz
	rdlong	local03, local01
 if_ne	jmp	#LR__0780
	add	local03, #16
	rdlong	local04, local03 wz
	sub	local03, #16
 if_ne	add	local03, #24
 if_ne	rdlong	local05, local03
 if_ne	sub	local03, #24
 if_ne	cmp	local04, local05 wc
 if_c_and_nz	jmp	#LR__0781
	mov	local04, #1
	jmp	#LR__0781
LR__0780
	mov	arg02, local02
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local04, result1
	cmp	local04, #2 wc
 if_b	mov	result1, #1
 if_b	jmp	#LR__0791
	cmp	local04, ##-1 wz
 if_e	mov	result1, local04
 if_e	jmp	#LR__0791
	add	local03, #24
	rdlong	local05, local03
	sub	local03, #24
	cmp	local04, local05 wc
 if_b	mov	result1, local04
 if_b	jmp	#LR__0791
	mov	local04, local02
LR__0781
	add	local03, #20
	rdlong	local05, local03 wz
	sub	local03, #20
 if_e	mov	result1, #0
 if_e	jmp	#LR__0791
	mov	local06, #0
	cmp	local04, local02 wz
 if_ne	jmp	#LR__0784
	mov	local06, local04
	add	local06, #1
	add	local03, #24
	rdlong	local05, local03
	sub	local03, #24
	cmp	local06, local05 wc
 if_ae	mov	local06, #2
	mov	arg02, local06
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local05, result1
	cmp	local05, #1 wz
 if_ne	cmp	local05, ##-1 wz
 if_e	mov	result1, local05
 if_e	jmp	#LR__0791
	cmp	local05, #0 wz
 if_e	jmp	#LR__0783
	add	local03, #16
	rdlong	local07, local03
	sub	local03, #16
	cmp	local07, #2 wc
 if_b	jmp	#LR__0782
	add	local03, #24
	rdlong	local05, local03
	sub	local03, #24
	cmp	local07, local05 wc
 if_b	mov	local04, local07
LR__0782
	mov	local06, #0
LR__0783
LR__0784
	cmp	local06, #0 wz
 if_ne	jmp	#LR__0787
	mov	local06, local04
' 			ncl = scl;
' 			for (;;) {
LR__0785
	add	local06, #1
	add	local03, #24
	rdlong	local05, local03
	sub	local03, #24
	cmp	local06, local05 wc
 if_ae	mov	local06, #2
 if_ae	cmp	local06, local04 wcz
 if_a	mov	result1, #0
 if_a	jmp	#LR__0791
	mov	arg02, local06
	mov	arg01, local01
	call	#_fatfs_cc_get_fat
	mov	local07, result1 wz
 if_e	jmp	#LR__0786
	cmp	local07, #1 wz
 if_ne	cmp	local07, ##-1 wz
 if_e	mov	result1, local07
 if_e	jmp	#LR__0791
	cmp	local06, local04 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__0791
	jmp	#LR__0785
LR__0786
LR__0787
	mov	arg01, local03
	mov	arg02, local06
	neg	arg03, #1
	call	#_fatfs_cc_put_fat
	mov	local08, result1 wz
 if_ne	jmp	#LR__0788
	cmp	local02, #0 wz
 if_e	jmp	#LR__0788
	mov	arg01, local03
	mov	arg02, local02
	mov	arg03, local06
	call	#_fatfs_cc_put_fat
	mov	local08, result1
LR__0788
	cmp	local08, #0 wz
 if_ne	jmp	#LR__0789
	add	local03, #16
	wrlong	local06, local03
	add	local03, #8
	rdlong	local05, local03
	sub	local05, #2
	sub	local03, #4
	rdlong	local09, local03
	sub	local03, #20
	cmp	local09, local05 wcz
 if_be	add	local03, #20
 if_be	rdlong	local09, local03
 if_be	sub	local09, #1
 if_be	wrlong	local09, local03
 if_be	sub	local03, #20
	add	local03, #4
	rdbyte	local05, local03
	or	local05, #1
	wrbyte	local05, local03
	jmp	#LR__0790
LR__0789
	cmp	local08, #1 wz
	negz	local06, #1
LR__0790
' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
' 	}
' 
' 	return ncl;
	mov	result1, local06
LR__0791
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_create_chain_ret
	ret

_fatfs_cc_dir_clear
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	call	#_fatfs_cc_sync_window
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__0802
	mov	arg01, local01
	mov	arg02, local02
	call	#_fatfs_cc_clst2sect
	mov	local03, result1
	add	local01, #48
	wrlong	local03, local01
	add	local01, #4
	mov	arg01, local01
	mov	arg02, #0
	decod	arg03, #9
	call	#\builtin_bytefill_
	mov	local04, local01
' #line 1667 "ff.c"
' 	{
' 		ibuf = fs->win; szb = 1;
' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
	mov	local05, #0
	sub	local01, #52
LR__0800
	add	local01, #10
	rdword	local06, local01
	sub	local01, #10
	cmp	local05, local06 wc
 if_ae	jmp	#LR__0801
	add	local01, #1
	rdbyte	arg01, local01
	sub	local01, #1
	mov	arg02, local04
	mov	arg03, local03
	add	arg03, local05
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	add	local05, #1
 if_e	jmp	#LR__0800
LR__0801
' 	}
' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
	add	local01, #10
	rdword	local04, local01
	cmp	local05, local04 wz
 if_e	mov	local06, #0
 if_ne	mov	local06, #1
	mov	result1, local06
LR__0802
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_clear_ret
	ret

_fatfs_cc_dir_sdi
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	cmp	local02, ##2097152 wc
 if_b	test	local02, #31 wz
' 		return FR_INT_ERR;
 if_nc_or_nz	mov	result1, #2
 if_nc_or_nz	jmp	#LR__0816
	add	local01, #16
	wrlong	local02, local01
	sub	local01, #8
	rdlong	local04, local01 wz
	sub	local01, #8
 if_e	rdbyte	local05, local03
 if_e	cmp	local05, #3 wc
 if_nc_and_z	add	local03, #40
 if_nc_and_z	rdlong	local04, local03
 if_nc_and_z	sub	local03, #40
	cmp	local04, #0 wz
 if_ne	jmp	#LR__0810
	mov	local05, local02
	shr	local05, #5
	add	local03, #8
	rdword	arg02, local03
	sub	local03, #8
	cmp	local05, arg02 wc
 if_ae	mov	result1, #2
 if_ae	jmp	#LR__0816
	add	local03, #40
	rdlong	local05, local03
	sub	local03, #40
	add	local01, #24
	wrlong	local05, local01
	sub	local01, #24
	jmp	#LR__0815
LR__0810
	add	local03, #10
	rdword	local06, local03
	sub	local03, #10
	shl	local06, #9
' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 		while (ofs >= csz) {
LR__0811
	cmp	local02, local06 wc
 if_b	jmp	#LR__0814
	mov	arg01, local01
	mov	arg02, local04
	call	#_fatfs_cc_get_fat
	mov	local04, result1
	cmp	local04, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0816
	cmp	local04, #2 wc
 if_b	jmp	#LR__0812
	add	local03, #24
	rdlong	local05, local03
	sub	local03, #24
	cmp	local04, local05 wc
 if_b	jmp	#LR__0813
LR__0812
	mov	result1, #2
	jmp	#LR__0816
LR__0813
	sub	local02, local06
	jmp	#LR__0811
LR__0814
	mov	arg01, local03
	mov	arg02, local04
	call	#_fatfs_cc_clst2sect
	add	local01, #24
	wrlong	result1, local01
	sub	local01, #24
LR__0815
	add	local01, #20
	wrlong	local04, local01
	add	local01, #4
	rdlong	local05, local01 wz
	sub	local01, #24
 if_e	mov	result1, #2
 if_e	jmp	#LR__0816
	mov	local06, local02
	shr	local06, #9
	add	local01, #24
	rdlong	local05, local01
	add	local05, local06
	wrlong	local05, local01
	add	local03, #52
	and	local02, #511
	add	local03, local02
	add	local01, #4
	wrlong	local03, local01
' 	dp->sect += ofs /  ((UINT) 512 ) ;
' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
' 
' 	return FR_OK;
	mov	result1, #0
LR__0816
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_sdi_ret
	ret

_fatfs_cc_dir_next
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	add	local01, #16
	rdlong	local04, local01
	sub	local01, #16
	add	local04, #32
	cmp	local04, ##2097152 wc
 if_ae	add	local01, #24
 if_ae	wrlong	#0, local01
 if_ae	sub	local01, #24
	add	local01, #24
	rdlong	arg02, local01 wz
	sub	local01, #24
 if_e	mov	result1, #4
 if_e	jmp	#LR__0825
	test	local04, #511 wz
 if_ne	jmp	#LR__0824
	add	local01, #24
	rdlong	arg02, local01
	add	arg02, #1
	wrlong	arg02, local01
	sub	local01, #4
	rdlong	arg02, local01 wz
	sub	local01, #20
 if_ne	jmp	#LR__0820
	mov	arg02, local04
	shr	arg02, #5
	add	local03, #8
	rdword	local02, local03
	sub	local03, #8
	cmp	arg02, local02 wc
 if_ae	add	local01, #24
 if_ae	wrlong	#0, local01
' 				dp->sect = 0; return FR_NO_FILE;
 if_ae	mov	result1, #4
 if_ae	jmp	#LR__0825
	jmp	#LR__0823
LR__0820
	mov	arg01, local04
	shr	arg01, #9
	add	local03, #10
	rdword	arg02, local03
	sub	local03, #10
	sub	arg02, #1
	test	arg01, arg02 wz
 if_ne	jmp	#LR__0822
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_fatfs_cc_get_fat
	mov	local05, result1
	cmp	local05, #2 wc
 if_b	mov	result1, #2
 if_b	jmp	#LR__0825
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0825
	add	local03, #24
	rdlong	arg02, local03
	sub	local03, #24
	cmp	local05, arg02 wc
 if_b	jmp	#LR__0821
	cmp	local02, #0 wz
 if_e	add	local01, #24
 if_e	wrlong	#0, local01
' 						dp->sect = 0; return FR_NO_FILE;
 if_e	mov	result1, #4
 if_e	jmp	#LR__0825
	mov	arg01, local01
	add	local01, #20
	rdlong	arg02, local01
	sub	local01, #20
	call	#_fatfs_cc_create_chain
	mov	local05, result1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__0825
	cmp	local05, #1 wz
 if_e	mov	result1, #2
 if_e	jmp	#LR__0825
	cmp	local05, ##-1 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__0825
	mov	arg02, local05
	mov	arg01, local03
	call	#_fatfs_cc_dir_clear
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__0825
LR__0821
	add	local01, #20
	wrlong	local05, local01
	mov	arg01, local03
	mov	arg02, local05
	call	#_fatfs_cc_clst2sect
	add	local01, #4
	wrlong	result1, local01
	sub	local01, #24
LR__0822
LR__0823
LR__0824
	add	local01, #16
	wrlong	local04, local01
	add	local03, #52
	and	local04, #511
	add	local03, local04
	add	local01, #12
	wrlong	local03, local01
' #line 1771 "ff.c"
' 				}
' 				dp->clust = clst;
' 				dp->sect = clst2sect(fs, clst);
' 			}
' 		}
' 	}
' 	dp->dptr = ofs;
' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
' 
' 	return FR_OK;
	mov	result1, #0
LR__0825
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_next_ret
	ret

_fatfs_cc_dir_alloc
	mov	COUNT_, #8
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	mov	local04, result1 wz
 if_ne	jmp	#LR__0834
	mov	local05, #0
' 		n = 0;
' 		do {
LR__0830
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local03
	call	#_fatfs_cc_move_window
	mov	local04, result1 wz
 if_ne	jmp	#LR__0833
	add	local01, #28
	rdlong	local06, local01
	sub	local01, #28
	rdbyte	local06, local06
	cmp	local06, #229 wz
 if_ne	add	local01, #28
 if_ne	rdlong	local07, local01
 if_ne	sub	local01, #28
 if_ne	rdbyte	local08, local07 wz
 if_ne	jmp	#LR__0831
	add	local05, #1
	cmp	local05, local02 wz
 if_e	jmp	#LR__0833
	jmp	#LR__0832
LR__0831
	mov	local05, #0
LR__0832
	mov	arg01, local01
	mov	arg02, #1
	call	#_fatfs_cc_dir_next
	mov	local04, result1 wz
 if_e	jmp	#LR__0830
LR__0833
LR__0834
	cmp	local04, #4 wz
 if_e	mov	local04, #7
' 	return res;
	mov	result1, local04
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_alloc_ret
	ret

_fatfs_cc_ld_clust
	mov	_var01, arg01
	mov	arg01, arg02
	add	arg01, #26
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	arg01, result1, #0
	rdbyte	_var01, _var01
	cmp	_var01, #3 wz
 if_e	add	arg02, #20
' {
' 
' 	return *((WORD*)ptr);
 if_e	rdword	result1, arg02
 if_e	shl	result1, #16
 if_e	or	arg01, result1
' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
' 	}
' 
' 	return cl;
	mov	result1, arg01
_fatfs_cc_ld_clust_ret
	ret

_fatfs_cc_st_clust
	mov	_var01, arg01
	mov	arg01, arg02
	add	arg01, #26
	wrword	arg03, arg01
	rdbyte	_var01, _var01
	cmp	_var01, #3 wz
 if_e	add	arg02, #20
 if_e	shr	arg03, #16
 if_e	wrword	arg03, arg02
_fatfs_cc_st_clust_ret
	ret

_fatfs_cc_cmp_lfn
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, arg02
	add	arg01, #26
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0846
	rdbyte	local02, arg02
	and	local02, #63
	sub	local02, #1
	qmul	local02, #13
' 
' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
' 
' 	for (wc = 1, s = 0; s < 13; s++) {
	mov	local03, #1
	mov	local04, #0
	getqx	local05
LR__0840
	cmp	local04, #13 wc
 if_ae	jmp	#LR__0845
	mov	arg01, arg02
	mov	local02, local04
	add	ptr__fatfs_cc_dat__, ##942
	add	local02, ptr__fatfs_cc_dat__
	rdbyte	local02, local02
	mul	local02, #1
	add	arg01, local02
	sub	ptr__fatfs_cc_dat__, ##942
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local06, result1
	mov	local02, local03
	zerox	local02, #15 wz
 if_e	jmp	#LR__0843
	cmp	local05, #256 wc
 if_ae	jmp	#LR__0841
	getword	arg01, local06, #0
	call	#_fatfs_cc_ff_wtoupper
	mov	local02, result1
	mov	local03, local05
	shl	local03, #1
	add	local03, local01
	rdword	arg01, local03
	add	local05, #1
	call	#_fatfs_cc_ff_wtoupper
	cmp	local02, result1 wz
 if_e	jmp	#LR__0842
LR__0841
' 				return 0;
	mov	result1, #0
	jmp	#LR__0846
LR__0842
	mov	local03, local06
	jmp	#LR__0844
LR__0843
	getword	local06, local06, #0
	cmp	local06, ##65535 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0846
LR__0844
	add	local04, #1
	jmp	#LR__0840
LR__0845
	rdbyte	local02, arg02
	test	local02, #64 wz
 if_ne	cmp	local03, #0 wz
 if_ne	shl	local05, #1
 if_ne	add	local05, local01
 if_ne	rdword	local07, local05 wz
 if_ne	mov	result1, #0
' 
' 	return 1;
 if_e	mov	result1, #1
LR__0846
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_cmp_lfn_ret
	ret

_fatfs_cc_pick_lfn
	mov	_var01, arg01
	mov	arg01, arg02
	add	arg01, #26
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0855
	rdbyte	_var02, arg02
	andn	_var02, #64
	sub	_var02, #1
	qmul	_var02, #13
' 
' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
' 
' 	for (wc = 1, s = 0; s < 13; s++) {
	mov	_var03, #1
	mov	_var04, #0
	getqx	_var05
LR__0850
	cmp	_var04, #13 wc
 if_ae	jmp	#LR__0853
	mov	arg01, arg02
	mov	_var02, _var04
	add	ptr__fatfs_cc_dat__, ##942
	add	_var02, ptr__fatfs_cc_dat__
	rdbyte	_var02, _var02
	mul	_var02, #1
	add	arg01, _var02
	sub	ptr__fatfs_cc_dat__, ##942
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	_var06, result1
	mov	_var02, _var03
	zerox	_var02, #15 wz
 if_e	jmp	#LR__0851
	cmp	_var05, #256 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#LR__0855
	mov	_var02, _var05
	shl	_var02, #1
	add	_var02, _var01
	mov	_var03, _var06
	wrword	_var03, _var02
	add	_var05, #1
	jmp	#LR__0852
LR__0851
	getword	_var06, _var06, #0
	cmp	_var06, ##65535 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__0855
LR__0852
	add	_var04, #1
	jmp	#LR__0850
LR__0853
	rdbyte	_var02, arg02
	test	_var02, #64 wz
 if_ne	mov	_var07, _var03
 if_ne	zerox	_var07, #15 wz
 if_e	jmp	#LR__0854
	cmp	_var05, #256 wc
 if_ae	mov	result1, #0
 if_ae	jmp	#LR__0855
	shl	_var05, #1
	add	_var05, _var01
	wrword	#0, _var05
LR__0854
' 		lfnbuf[i] = 0;
' 	}
' 
' 	return 1;
	mov	result1, #1
LR__0855
_fatfs_cc_pick_lfn_ret
	ret

_fatfs_cc_put_lfn
	add	arg02, #13
	wrbyte	arg04, arg02
	getbyte	arg04, arg03, #0
	sub	arg04, #1
	qmul	arg04, #13
	mov	_var01, arg01
	sub	arg02, #2
	wrbyte	#15, arg02
	add	arg02, #1
	wrbyte	#0, arg02
	sub	arg02, #12
	mov	arg01, arg02
	add	arg01, #26
	wrword	#0, arg01
	mov	_var02, #0
	mov	_var03, #0
' 	BYTE* dir,
' 	BYTE ord,
' 	BYTE sum
' )
' {
' 	UINT i, s;
' 	WCHAR wc;
' 
' 
' 	dir[ 13 ] = sum;
' 	dir[ 11 ] =  0x0F ;
' 	dir[ 12 ] = 0;
' 	st_word(dir +  26 , 0);
' 
' 	i = (ord - 1) * 13;
' 	s = wc = 0;
' 	do {
	add	ptr__fatfs_cc_dat__, ##942
	getqx	_var04
	callpa	#(@LR__0861-@LR__0860)>>2,fcache_load_ptr_
LR__0860
	getword	arg04, _var02, #0
	cmp	arg04, ##65535 wz
 if_ne	mov	arg01, _var04
 if_ne	add	_var04, #1
 if_ne	shl	arg01, #1
 if_ne	add	arg01, _var01
 if_ne	rdword	_var02, arg01
	mov	arg01, arg02
	mov	arg04, _var03
	add	arg04, ptr__fatfs_cc_dat__
	rdbyte	arg04, arg04
	mul	arg04, #1
	add	arg01, arg04
	wrword	_var02, arg01
	mov	arg04, _var02
	zerox	arg04, #15 wz
 if_e	bmask	_var02, #15
	add	_var03, #1
	cmp	_var03, #13 wc
 if_b	jmp	#LR__0860
LR__0861
	sub	ptr__fatfs_cc_dat__, ##942
	getword	_var02, _var02, #0
	cmp	_var02, ##65535 wz
 if_ne	shl	_var04, #1
 if_ne	add	_var04, _var01
 if_ne	rdword	_var04, _var04 wz
 if_e	getbyte	arg03, arg03, #0
 if_e	or	arg03, #64
	wrbyte	arg03, arg02
_fatfs_cc_put_lfn_ret
	ret

_fatfs_cc_gen_numname
	mov	COUNT_, #8
	call	#pushregs_
	add	ptra, #44
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	local04, arg04
	mov	arg01, local01
	mov	arg02, local02
	mov	arg03, #11
	call	#__system____builtin_memmove
	cmp	local04, #6 wc
 if_b	jmp	#LR__0875
	mov	local05, local04
	callpa	#(@LR__0873-@LR__0870)>>2,fcache_load_ptr_
' 		sreg = seq;
' 		while (*lfn) {
LR__0870
	rdword	local06, local03 wz
 if_e	jmp	#LR__0874
	rdword	local07, local03
' 			wc = *lfn++;
' 			for (i = 0; i < 16; i++) {
	add	local03, #2
	rep	@LR__0872, #16
LR__0871
	shl	local05, #1
	getword	local06, local07, #0
	and	local06, #1
	add	local05, local06
	getword	local07, local07, #0
	shr	local07, #1
	testbn	local05, #16 wz
 if_ne	xor	local05, ##69665
LR__0872
	jmp	#LR__0870
LR__0873
LR__0874
	mov	local04, local05
LR__0875
	mov	local07, #7
' 			}
' 		}
' 		seq = (UINT)sreg;
' 	}
' 
' 
' 	i = 7;
' 	do {
	add	fp, #16
	callpa	#(@LR__0877-@LR__0876)>>2,fcache_load_ptr_
LR__0876
	getnib	local05, local04, #0
	add	local05, #48
	shr	local04, #4
	getbyte	local06, local05, #0
	cmp	local06, #58 wc
 if_ae	getbyte	local05, local05, #0
 if_ae	add	local05, #7
	mov	local06, local07
	sub	local07, #1 wz
	add	local06, fp
	wrbyte	local05, local06
 if_ne	cmp	local04, #0 wz
 if_ne	jmp	#LR__0876
LR__0877
	mov	local06, local07
	add	local06, fp
	wrbyte	#126, local06
' 	ns[i] = '~';
' 
' 
' 	for (j = 0; j < i && dst[j] != ' '; j++) {
	mov	local05, #0
	sub	fp, #16
	callpa	#(@LR__0880-@LR__0878)>>2,fcache_load_ptr_
LR__0878
	cmp	local05, local07 wc
 if_ae	jmp	#LR__0881
	mov	local06, local05
	add	local06, local01
	rdbyte	local06, local06
	cmp	local06, #32 wz
 if_e	jmp	#LR__0881
	mov	arg01, local05
	add	arg01, local01
	rdbyte	arg01, arg01 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmp	result1, #0 wz
 if_e	jmp	#LR__0879
	mov	local06, local07
	sub	local06, #1
	cmp	local05, local06 wz
 if_e	jmp	#LR__0881
	add	local05, #1
LR__0879
	add	local05, #1
	jmp	#LR__0878
LR__0880
LR__0881
	callpa	#(@LR__0885-@LR__0882)>>2,fcache_load_ptr_
' 			j++;
' 		}
' 	}
' 	do {
LR__0882
	mov	local06, local05
	add	local06, local01
	cmp	local07, #8 wc
	add	local05, #1
 if_ae	jmp	#LR__0883
	mov	local04, local07
	add	fp, #16
	add	local04, fp
	rdbyte	local08, local04
	add	local07, #1
	sub	fp, #16
	jmp	#LR__0884
LR__0883
	mov	local08, #32
LR__0884
	wrbyte	local08, local06
	cmp	local05, #8 wc
 if_b	jmp	#LR__0882
LR__0885
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_gen_numname_ret
	ret

_fatfs_cc_sum_sfn
	mov	_var01, #0
' )
' {
' 	BYTE sum = 0;
' 	UINT n = 11;
' 
' 	do {
	callpa	#(@LR__0892-@LR__0890)>>2,fcache_load_ptr_
LR__0890
	rep	@LR__0893, #11
LR__0891
	getbyte	result1, _var01, #0
	shr	result1, #1
	getbyte	_var01, _var01, #0
	shl	_var01, #7
	add	result1, _var01
	rdbyte	_var01, arg01
	add	_var01, result1
	add	arg01, #1
LR__0892
LR__0893
' 	return sum;
	mov	result1, _var01
_fatfs_cc_sum_sfn_ret
	ret

_fatfs_cc_dir_read
	mov	COUNT_, #12
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, #4
	rdlong	local04, local01
	mov	local05, #255
	mov	local06, #255
' )
' {
' 	FRESULT res = FR_NO_FILE;
' 	FATFS *fs = dp->obj.fs;
' 	BYTE attr, b;
' 
' 	BYTE ord = 0xFF, sum = 0xFF;
' 
' 
' 	while (dp->sect) {
LR__0900
	add	local01, #24
	rdlong	result1, local01 wz
	sub	local01, #24
 if_e	jmp	#LR__0910
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local04
	call	#_fatfs_cc_move_window
	mov	local03, result1 wz
 if_ne	jmp	#LR__0910
	add	local01, #28
	rdlong	result1, local01
	sub	local01, #28
	rdbyte	local07, result1
	mov	result1, local07
	zerox	result1, #7 wz
 if_e	mov	local03, #4
' 			res = FR_NO_FILE; break;
 if_e	jmp	#LR__0910
	add	local01, #28
	rdlong	local08, local01
	add	local08, #11
	rdbyte	local09, local08
	and	local09, #63
	sub	local01, #22
	wrbyte	local09, local01
	sub	local01, #6
	getbyte	result1, local07, #0
	cmp	result1, #229 wz
 if_ne	mov	local08, local07
 if_ne	getbyte	local08, local08, #0
 if_ne	cmp	local08, #46 wz
 if_e	jmp	#LR__0901
	mov	local10, #0
	getbyte	local08, local09, #0
	andn	local08, #32
	cmp	local08, #8 wz
 if_e	mov	local10, #1
	cmp	local10, local02 wz
 if_e	jmp	#LR__0902
LR__0901
	mov	local05, #255
	jmp	#LR__0909
LR__0902
	getbyte	local09, local09, #0
	cmp	local09, #15 wz
 if_ne	jmp	#LR__0906
	getbyte	local11, local07, #0
	test	local11, #64 wz
 if_e	jmp	#LR__0903
	add	local01, #28
	rdlong	local11, local01
	add	local11, #13
	rdbyte	local06, local11
	getbyte	local07, local07, #0
	and	local07, #191
	mov	local05, local07
	sub	local01, #12
	rdlong	local11, local01
	add	local01, #28
	wrlong	local11, local01
	sub	local01, #44
LR__0903
	getbyte	local08, local07, #0
	getbyte	local10, local05, #0
	cmp	local08, local10 wz
 if_ne	jmp	#LR__0904
	getbyte	local10, local06, #0
	add	local01, #28
	rdlong	local09, local01
	sub	local01, #28
	add	local09, #13
	rdbyte	local08, local09
	getbyte	local09, local08, #0
	cmp	local10, local09 wz
 if_ne	jmp	#LR__0904
	add	local04, #12
	rdlong	arg01, local04
	sub	local04, #12
	add	local01, #28
	rdlong	local12, local01
	sub	local01, #28
	mov	arg02, local12
	call	#_fatfs_cc_pick_lfn
	cmps	result1, #0 wz
 if_ne	mov	local12, local05
 if_ne	getbyte	local12, local12, #0
 if_ne	sub	local12, #1
 if_ne	mov	local11, local12
 if_ne	jmp	#LR__0905
LR__0904
	mov	local11, #255
LR__0905
	mov	local05, local11
	jmp	#LR__0908
LR__0906
	mov	local11, local05
	zerox	local11, #7 wz
 if_ne	jmp	#LR__0907
	getbyte	local06, local06, #0
	add	local01, #28
	rdlong	arg01, local01
	sub	local01, #28
	call	#_fatfs_cc_sum_sfn
	getbyte	result1, result1, #0
	cmp	local06, result1 wz
 if_e	jmp	#LR__0910
LR__0907
	add	local01, #44
	wrlong	##-1, local01
	sub	local01, #44
' 						dp->blk_ofs = 0xFFFFFFFF;
' 					}
' 					break;
	jmp	#LR__0910
LR__0908
LR__0909
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	mov	local03, result1 wz
 if_e	jmp	#LR__0900
LR__0910
	cmp	local03, #0 wz
 if_ne	add	local01, #24
 if_ne	wrlong	#0, local01
' 	return res;
	mov	result1, local03
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_read_ret
	ret

_fatfs_cc_dir_find
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0932
	mov	local03, #255
	mov	local04, #255
	add	local01, #44
	wrlong	##-1, local01
	sub	local01, #44
' #line 2404 "ff.c"
' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
' 
' 	do {
LR__0920
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_fatfs_cc_move_window
	mov	local05, result1 wz
 if_ne	jmp	#LR__0931
	add	local01, #28
	rdlong	arg03, local01
	sub	local01, #28
	rdbyte	local06, arg03
	mov	arg03, local06
	zerox	arg03, #7 wz
 if_e	mov	local05, #4
 if_e	jmp	#LR__0931
	add	local01, #28
	rdlong	local07, local01
	mov	arg03, local07
	add	arg03, #11
	rdbyte	local08, arg03
	and	local08, #63
	sub	local01, #22
	wrbyte	local08, local01
	sub	local01, #6
	getbyte	arg03, local06, #0
	cmp	arg03, #229 wz
 if_e	jmp	#LR__0921
	getbyte	arg03, local08, #0
	test	arg03, #8 wz
 if_ne	mov	local07, local08
 if_ne	getbyte	local07, local07, #0
 if_ne	cmp	local07, #15 wz
 if_e	jmp	#LR__0922
LR__0921
	mov	local04, #255
	add	local01, #44
	wrlong	##-1, local01
	sub	local01, #44
	jmp	#LR__0930
LR__0922
	getbyte	local08, local08, #0
	cmp	local08, #15 wz
 if_ne	jmp	#LR__0926
	add	local01, #43
	rdbyte	local08, local01
	sub	local01, #43
	test	local08, #64 wz
 if_ne	jmp	#LR__0929
	getbyte	local09, local06, #0
	test	local09, #64 wz
 if_e	jmp	#LR__0923
	add	local01, #28
	rdlong	local09, local01
	add	local09, #13
	rdbyte	local03, local09
	getbyte	local06, local06, #0
	and	local06, #191
	mov	local04, local06
	sub	local01, #12
	rdlong	local09, local01
	add	local01, #28
	wrlong	local09, local01
	sub	local01, #44
LR__0923
	getbyte	local10, local06, #0
	getbyte	local07, local04, #0
	cmp	local10, local07 wz
 if_ne	jmp	#LR__0924
	getbyte	local08, local03, #0
	add	local01, #28
	rdlong	local07, local01
	sub	local01, #28
	add	local07, #13
	rdbyte	local06, local07
	getbyte	local07, local06, #0
	cmp	local08, local07 wz
 if_ne	jmp	#LR__0924
	add	local02, #12
	rdlong	arg01, local02
	sub	local02, #12
	add	local01, #28
	rdlong	local11, local01
	sub	local01, #28
	mov	arg02, local11
	call	#_fatfs_cc_cmp_lfn
	cmps	result1, #0 wz
 if_ne	mov	local11, local04
 if_ne	getbyte	local11, local11, #0
 if_ne	sub	local11, #1
 if_ne	mov	local09, local11
 if_ne	jmp	#LR__0925
LR__0924
	mov	local09, #255
LR__0925
	mov	local04, local09
	jmp	#LR__0929
LR__0926
	mov	local09, local04
	zerox	local09, #7 wz
 if_ne	jmp	#LR__0927
	getbyte	local10, local03, #0
	add	local01, #28
	rdlong	arg01, local01
	sub	local01, #28
	call	#_fatfs_cc_sum_sfn
	getbyte	result1, result1, #0
	cmp	local10, result1 wz
 if_e	jmp	#LR__0931
LR__0927
	add	local01, #43
	rdbyte	local09, local01
	sub	local01, #43
	test	local09, #1 wz
 if_ne	jmp	#LR__0928
	add	local01, #28
	rdlong	arg01, local01
	add	local01, #4
	mov	arg02, local01
	sub	local01, #32
	mov	arg03, #11
	call	#_fatfs_cc_memcmp
	cmp	result1, #0 wz
 if_e	jmp	#LR__0931
LR__0928
	mov	local04, #255
	add	local01, #44
	wrlong	##-1, local01
	sub	local01, #44
LR__0929
LR__0930
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	mov	local05, result1 wz
 if_e	jmp	#LR__0920
LR__0931
' 
' 	return res;
	mov	result1, local05
LR__0932
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_find_ret
	ret

_fatfs_cc_dir_register
	mov	COUNT_, #10
	call	#pushregs_
	add	ptra, #44
	add	fp, #4
	wrlong	arg01, fp
	rdlong	local01, arg01
	add	fp, #8
	wrlong	local01, fp
	sub	fp, #8
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #43
	rdbyte	local02, local02
	test	local02, #160 wz
 if_ne	mov	result1, #6
 if_ne	jmp	#LR__0955
' 	for (len = 0; fs->lfnbuf[len]; len++) ;
	add	fp, #20
	wrlong	#0, fp
	sub	fp, #20
	callpa	#(@LR__0941-@LR__0940)>>2,fcache_load_ptr_
LR__0940
	add	fp, #12
	rdlong	local02, fp
	add	local02, #12
	rdlong	local03, local02
	add	fp, #8
	rdlong	local04, fp
	sub	fp, #20
	shl	local04, #1
	add	local04, local03
	rdword	local02, local04 wz
 if_e	jmp	#LR__0942
	add	fp, #20
	rdlong	local05, fp
	mov	local06, local05
	mov	local07, local05
	mov	local08, local07
	add	local08, #1
	wrlong	local08, fp
	sub	fp, #20
	jmp	#LR__0940
LR__0941
LR__0942
	add	fp, #28
	mov	arg01, fp
	sub	fp, #24
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #32
	mov	arg03, #12
	call	#__system____builtin_memmove
	add	fp, #39
	rdbyte	local09, fp
	sub	fp, #39
	test	local09, #1 wz
 if_e	jmp	#LR__0945
	add	fp, #4
	rdlong	local10, fp
	add	local10, #43
	wrbyte	#64, local10
' 		dp->fn[ 11 ] =  0x40 ;
' 		for (n = 1; n < 100; n++) {
	add	fp, #12
	wrlong	#1, fp
	sub	fp, #16
LR__0943
	add	fp, #16
	rdlong	local02, fp
	sub	fp, #16
	cmp	local02, #100 wc
 if_ae	jmp	#LR__0944
	add	fp, #4
	rdlong	arg01, fp
	add	arg01, #32
	add	fp, #24
	mov	arg02, fp
	sub	fp, #16
	rdlong	local10, fp
	add	local10, #12
	rdlong	arg03, local10
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #16
	call	#_fatfs_cc_gen_numname
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	call	#_fatfs_cc_dir_find
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__0944
	add	fp, #16
	rdlong	local10, fp
	add	local10, #1
	wrlong	local10, fp
	sub	fp, #16
	jmp	#LR__0943
LR__0944
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #16
	cmp	local10, #100 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__0955
	add	fp, #8
	rdlong	local10, fp
	sub	fp, #8
	cmp	local10, #4 wz
 if_ne	add	fp, #8
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #8
 if_ne	jmp	#LR__0955
	add	fp, #4
	rdlong	local10, fp
	add	fp, #35
	rdbyte	local01, fp
	sub	fp, #39
	add	local10, #43
	wrbyte	local01, local10
LR__0945
	add	fp, #39
	rdbyte	local02, fp
	sub	fp, #39
	test	local02, #2 wz
 if_e	jmp	#LR__0946
	add	fp, #20
	rdlong	local10, fp
	add	local10, #12
	qdiv	local10, #13
	sub	fp, #20
	getqx	local10
	add	local10, #1
	jmp	#LR__0947
LR__0946
	mov	local10, #1
LR__0947
	add	fp, #24
	wrlong	local10, fp
	sub	fp, #20
	rdlong	arg01, fp
	mov	arg02, local10
	sub	fp, #4
	call	#_fatfs_cc_dir_alloc
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0952
	add	fp, #24
	rdlong	local10, fp
	sub	local10, #1 wz
	wrlong	local10, fp
	sub	fp, #24
 if_e	jmp	#LR__0952
	add	fp, #4
	rdlong	local10, fp
	mov	arg01, local10
	add	fp, #20
	rdlong	arg04, fp
	sub	fp, #24
	shl	arg04, #5
	add	local10, #16
	rdlong	arg02, local10
	sub	arg02, arg04
	call	#_fatfs_cc_dir_sdi
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0951
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	add	arg01, #32
	call	#_fatfs_cc_sum_sfn
	mov	local10, result1
	add	fp, #40
	wrbyte	local10, fp
	sub	fp, #40
' 			sum = sum_sfn(dp->fn);
' 			do {
LR__0948
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #24
	rdlong	arg02, local01
	call	#_fatfs_cc_move_window
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__0950
	add	fp, #12
	rdlong	local02, fp
	add	local02, #12
	rdlong	arg01, local02
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #28
	rdlong	arg02, local01
	add	fp, #20
	rdlong	arg03, fp
	add	fp, #16
	rdbyte	arg04, fp
	sub	fp, #40
	call	#_fatfs_cc_put_lfn
	add	fp, #12
	rdlong	local10, fp
	add	local10, #3
	wrbyte	#1, local10
	sub	fp, #8
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__0949
	add	fp, #24
	rdlong	local10, fp
	sub	local10, #1 wz
	wrlong	local10, fp
	sub	fp, #24
 if_ne	jmp	#LR__0948
LR__0949
LR__0950
LR__0951
LR__0952
	add	fp, #8
	rdlong	local10, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__0954
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #8
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #24
	rdlong	arg02, local01
	call	#_fatfs_cc_move_window
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__0953
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #4
	add	local02, #28
	rdlong	arg01, local02
	mov	arg02, #0
	mov	arg03, #32
	call	#\builtin_bytefill_
	add	fp, #4
	rdlong	arg02, fp
	mov	local01, arg02
	add	local01, #28
	rdlong	arg01, local01
	sub	fp, #4
	add	arg02, #32
	mov	arg03, #11
	call	#__system____builtin_memmove
	add	fp, #4
	rdlong	local09, fp
	mov	local10, local09
	add	local10, #28
	rdlong	local01, local10
	add	local09, #43
	rdbyte	local10, local09
	and	local10, #24
	add	local01, #12
	wrbyte	local10, local01
	add	fp, #8
	rdlong	local10, fp
	sub	fp, #12
	add	local10, #3
	wrbyte	#1, local10
LR__0953
LR__0954
' 			__builtin_memset(dp->dir, 0, 32 ) ;
' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
' 
' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
' 
' 			fs->wflag = 1;
' 		}
' 	}
' 
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
LR__0955
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_register_ret
	ret

_fatfs_cc_dir_remove
	mov	COUNT_, #5
	call	#pushregs_
	mov	local01, arg01
	rdlong	local02, local01
	add	local01, #16
	rdlong	local03, local01
	add	local01, #28
	rdlong	arg02, local01
	sub	local01, #44
	cmp	arg02, ##-1 wz
 if_e	mov	local04, #0
 if_e	jmp	#LR__0960
	mov	arg01, local01
	add	local01, #44
	rdlong	arg02, local01
	sub	local01, #44
	call	#_fatfs_cc_dir_sdi
	mov	local04, result1
LR__0960
	mov	local05, local04 wz
 if_ne	jmp	#LR__0963
' 		do {
LR__0961
	add	local01, #24
	rdlong	arg02, local01
	sub	local01, #24
	mov	arg01, local02
	call	#_fatfs_cc_move_window
	mov	local05, result1 wz
 if_ne	jmp	#LR__0962
	add	local01, #28
	rdlong	local04, local01
	wrbyte	#229, local04
	add	local02, #3
	wrbyte	#1, local02
	sub	local02, #3
	sub	local01, #12
	rdlong	local04, local01
	sub	local01, #16
	cmp	local04, local03 wc
 if_ae	jmp	#LR__0962
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	mov	local05, result1 wz
 if_e	jmp	#LR__0961
LR__0962
	cmp	local05, #4 wz
 if_e	mov	local05, #2
LR__0963
' 	}
' #line 2590 "ff.c"
' 	return res;
	mov	result1, local05
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_dir_remove_ret
	ret

_fatfs_cc_get_fileinfo
	mov	COUNT_, #15
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	rdlong	local03, local01
	add	local02, #28
	wrbyte	#0, local02
	sub	local02, #28
	add	local01, #24
	rdlong	local04, local01 wz
	sub	local01, #24
 if_e	jmp	#LR__0984
	add	local01, #44
	rdlong	local04, local01
	sub	local01, #44
	cmp	local04, ##-1 wz
 if_e	jmp	#LR__0973
	mov	local05, #0
	mov	local06, #0
	mov	local07, #0
' 			si = di = 0;
' 			hs = 0;
' 			while (fs->lfnbuf[si] != 0) {
LR__0970
	add	local03, #12
	rdlong	local04, local03
	sub	local03, #12
	mov	local08, local06
	shl	local08, #1
	add	local08, local04
	rdword	local04, local08 wz
 if_e	jmp	#LR__0972
	add	local03, #12
	rdlong	local09, local03
	sub	local03, #12
	mov	local10, local06
	shl	local10, #1
	add	local10, local09
	rdword	local11, local10
	mov	local04, local07
	zerox	local04, #15 wz
	add	local06, #1
 if_ne	jmp	#LR__0971
	getword	local12, local11, #0
	cmp	local12, ##55296 wc
 if_b	jmp	#LR__0971
	getword	local13, local11, #0
	cmp	local13, ##57344 wc
 if_b	mov	local07, local11
' 					hs = wc; continue;
 if_b	jmp	#LR__0970
LR__0971
	getword	arg01, local07, #0
	shl	arg01, #16
	getword	local11, local11, #0
	or	arg01, local11
	mov	arg02, local05
	add	local02, #28
	add	arg02, local02
	mov	arg03, #255
	sub	arg03, local05
	sub	local02, #28
	call	#_fatfs_cc_put_utf
	mov	local14, result1 wz
 if_e	mov	local05, #0
 if_ne	add	local05, local14
 if_ne	mov	local07, #0
 if_ne	jmp	#LR__0970
LR__0972
	mov	local04, local07
	zerox	local04, #15 wz
 if_ne	mov	local05, #0
	add	local02, #28
	add	local05, local02
	wrbyte	#0, local05
	sub	local02, #28
LR__0973
	mov	local05, #0
	mov	local06, #0
' 			fno->fname[di] = 0;
' 		}
' 	}
' 
' 	si = di = 0;
' 	while (si < 11) {
LR__0974
	cmp	local06, #11 wc
 if_ae	jmp	#LR__0977
	add	local01, #28
	rdlong	local09, local01
	sub	local01, #28
	mov	local10, local06
	add	local10, local09
	rdbyte	local11, local10
	getword	local04, local11, #0
	cmp	local04, #32 wz
	add	local06, #1
 if_e	jmp	#LR__0974
	getword	local04, local11, #0
	cmp	local04, #5 wz
 if_e	mov	local11, #229
	cmp	local06, #9 wz
 if_ne	jmp	#LR__0975
	cmp	local05, #12 wc
 if_ae	jmp	#LR__0975
	mov	local13, local05
	add	local02, #12
	add	local13, local02
	wrbyte	#46, local13
	add	local05, #1
	sub	local02, #12
LR__0975
	getword	arg01, local11, #0
	zerox	arg01, #7 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmp	result1, #0 wz
 if_ne	cmp	local06, #8 wz
 if_ne	cmp	local06, #11 wz
 if_e	jmp	#LR__0976
	add	local01, #28
	rdlong	local10, local01
	sub	local01, #28
	mov	local08, local06
	add	local08, local10
	rdbyte	arg01, local08 wz
 if_ne	mov	result1, #0
' 
' 	return 0;
 if_e	mov	result1, #0
	cmp	result1, #0 wz
 if_e	jmp	#LR__0976
	getword	local11, local11, #0
	shl	local11, #8
	add	local01, #28
	rdlong	local14, local01
	sub	local01, #28
	mov	local09, local06
	add	local09, local14
	rdbyte	local12, local09
	or	local11, local12
	add	local06, #1
LR__0976
	mov	arg01, local11
	mov	arg02, ##850
	call	#_fatfs_cc_ff_oem2uni
	mov	local11, result1
	mov	local04, local11
	zerox	local04, #15 wz
 if_e	mov	local05, #0
 if_e	jmp	#LR__0977
	getword	arg01, local11, #0
	mov	arg02, local05
	add	local02, #12
	add	arg02, local02
	mov	arg03, #12
	sub	arg03, local05
	sub	local02, #12
	call	#_fatfs_cc_put_utf
	mov	local14, result1 wz
 if_e	mov	local05, #0
 if_ne	add	local05, local14
 if_ne	jmp	#LR__0974
LR__0977
	mov	local04, local05
	add	local02, #12
	add	local04, local02
	wrbyte	#0, local04
	add	local02, #16
	rdbyte	local04, local02 wz
	sub	local02, #28
 if_ne	jmp	#LR__0983
	cmp	local05, #0 wz
 if_ne	jmp	#LR__0978
	mov	local13, local05
	add	local02, #28
	add	local13, local02
	wrbyte	#63, local13
	add	local05, #1
	sub	local02, #28
	jmp	#LR__0982
LR__0978
' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
	mov	local05, #0
	mov	local06, #0
	mov	local15, #8
LR__0979
	mov	local04, local06
	add	local02, #12
	add	local04, local02
	rdbyte	local13, local04 wz
	sub	local02, #12
 if_e	jmp	#LR__0981
	mov	local08, local06
	add	local02, #12
	add	local08, local02
	rdbyte	local11, local08
	getword	local14, local11, #0
	cmp	local14, #46 wz
	sub	local02, #12
 if_e	mov	local15, #16
	getword	local14, local11, #0
	cmp	local14, #65 wc
 if_b	jmp	#LR__0980
	getword	local08, local11, #0
	cmp	local08, #91 wc
 if_ae	jmp	#LR__0980
	add	local01, #28
	rdlong	local09, local01
	sub	local01, #28
	add	local09, #12
	rdbyte	local10, local09
	getbyte	local14, local15, #0
	test	local10, local14 wz
 if_ne	getword	local11, local11, #0
 if_ne	add	local11, #32
LR__0980
	mov	local14, local05
	add	local02, #28
	add	local14, local02
	getword	local11, local11, #0
	wrbyte	local11, local14
	add	local06, #1
	add	local05, #1
	sub	local02, #28
	jmp	#LR__0979
LR__0981
LR__0982
	add	local02, #28
	add	local05, local02
	wrbyte	#0, local05
	add	local01, #28
	rdlong	local04, local01
	sub	local01, #28
	add	local04, #12
	rdbyte	local13, local04 wz
	sub	local02, #28
 if_e	add	local02, #12
 if_e	wrbyte	#0, local02
 if_e	sub	local02, #12
LR__0983
	add	local01, #28
	rdlong	local12, local01
	add	local12, #11
	rdbyte	local04, local12
	and	local04, #63
	add	local02, #8
	wrbyte	local04, local02
	sub	local02, #8
	rdlong	arg01, local01
	add	arg01, #28
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	wrlong	result1, local02
	rdlong	arg01, local01
	add	arg01, #22
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	add	local02, #6
	wrword	result1, local02
	rdlong	arg01, local01
	add	arg01, #24
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	sub	local02, #2
	wrword	result1, local02
LR__0984
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_fileinfo_ret
	ret

_fatfs_cc_create_name
	mov	COUNT_, #13
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	rdlong	result1, arg02
	add	fp, #40
	wrlong	result1, fp
	sub	fp, #44
	rdlong	result1, fp
	rdlong	local01, result1
	add	local01, #12
	rdlong	local02, local01
	add	fp, #20
	wrlong	local02, fp
	add	fp, #20
	wrlong	#0, fp
	sub	fp, #44
' 
' 
' 
' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
' 	for (;;) {
LR__0990
	add	fp, #48
	mov	arg01, fp
	sub	fp, #48
	call	#_fatfs_cc_tchar2uni
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	cmp	result1, ##-1 wz
 if_e	mov	result1, #6
 if_e	jmp	#LR__1030
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #28
	cmp	local01, ##65536 wc
 if_b	jmp	#LR__0991
	add	fp, #24
	rdlong	local03, fp
	add	fp, #20
	rdlong	local01, fp
	mov	local04, local01
	add	local04, #1
	wrlong	local04, fp
	shl	local01, #1
	add	local01, local03
	sub	fp, #16
	rdlong	local05, fp
	sub	fp, #28
	mov	local06, local05
	shr	local06, #16
	wrword	local06, local01
LR__0991
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #8
	wrword	local01, fp
	rdword	local01, fp
	sub	fp, #20
	cmp	local01, #32 wc
 if_b	jmp	#LR__0993
	add	fp, #20
	rdword	local01, fp
	sub	fp, #20
	cmp	local01, #47 wz
 if_ne	add	fp, #20
 if_ne	rdword	local04, fp
 if_ne	sub	fp, #20
 if_ne	cmp	local04, #92 wz
 if_e	jmp	#LR__0993
	add	fp, #20
	rdword	arg01, fp
	sub	fp, #20
	cmp	arg01, #128 wc
 if_ae	jmp	#LR__0992
	mov	arg01, ##@LR__1625
	add	fp, #20
	rdword	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_strchr
	cmp	result1, #0 wz
 if_ne	mov	result1, #6
 if_ne	jmp	#LR__1030
LR__0992
	add	fp, #44
	rdlong	local06, fp
	sub	fp, #44
	cmp	local06, #255 wc
 if_ae	mov	result1, #6
 if_ae	jmp	#LR__1030
	add	fp, #24
	rdlong	local03, fp
	add	fp, #20
	rdlong	local02, fp
	mov	local04, local02
	add	local04, #1
	wrlong	local04, fp
	mov	local01, local02
	shl	local01, #1
	add	local01, local03
	sub	fp, #24
	rdword	local06, fp
	sub	fp, #20
	wrword	local06, local01
	jmp	#LR__0990
LR__0993
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #32 wc
 if_b	add	fp, #16
 if_b	wrbyte	#4, fp
 if_b	sub	fp, #16
 if_b	jmp	#LR__0998
	callpa	#(@LR__0996-@LR__0994)>>2,fcache_load_ptr_
' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
LR__0994
	add	fp, #48
	rdlong	local04, fp
	sub	fp, #48
	rdbyte	local07, local04
	cmp	local07, #47 wz
 if_e	jmp	#LR__0995
	add	fp, #48
	rdlong	local04, fp
	sub	fp, #48
	rdbyte	local02, local04
	cmp	local02, #92 wz
 if_ne	jmp	#LR__0997
LR__0995
	add	fp, #48
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #48
	jmp	#LR__0994
LR__0996
LR__0997
	add	fp, #16
	wrbyte	#0, fp
	add	fp, #32
	rdlong	local06, fp
	sub	fp, #48
	rdbyte	local07, local06
	cmp	local07, #32 wc
 if_b	add	fp, #16
 if_b	wrbyte	#4, fp
 if_b	sub	fp, #16
LR__0998
	add	fp, #8
	rdlong	local07, fp
	add	fp, #40
	rdlong	local01, fp
	sub	fp, #48
	wrlong	local01, local07
	callpa	#(@LR__1000-@LR__0999)>>2,fcache_load_ptr_
' 	}
' 	*path = p;
' #line 2862 "ff.c"
' 	while (di) {
LR__0999
	add	fp, #44
	rdlong	local07, fp wz
	sub	fp, #44
 if_e	jmp	#LR__1001
	add	fp, #24
	rdlong	local06, fp
	add	fp, #20
	rdlong	local04, fp
	sub	local04, #1
	shl	local04, #1
	add	local04, local06
	rdword	local06, local04
	sub	fp, #24
	wrword	local06, fp
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #32 wz
 if_ne	add	fp, #20
 if_ne	rdword	local01, fp
 if_ne	sub	fp, #20
 if_ne	cmp	local01, #46 wz
 if_ne	jmp	#LR__1001
	add	fp, #44
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #44
	jmp	#LR__0999
LR__1000
LR__1001
	add	fp, #24
	rdlong	local08, fp
	add	fp, #20
	rdlong	local04, fp
	shl	local04, #1
	add	local04, local08
	wrword	#0, local04
	rdlong	local07, fp wz
	sub	fp, #44
 if_e	mov	result1, #6
 if_e	jmp	#LR__1030
' 
' 
' 	for (si = 0; lfn[si] == ' '; si++) ;
	add	fp, #40
	wrlong	#0, fp
	sub	fp, #40
	callpa	#(@LR__1003-@LR__1002)>>2,fcache_load_ptr_
LR__1002
	add	fp, #24
	rdlong	local09, fp
	add	fp, #16
	rdlong	local10, fp
	sub	fp, #40
	shl	local10, #1
	add	local10, local09
	rdword	local11, local10
	cmp	local11, #32 wz
 if_ne	jmp	#LR__1004
	add	fp, #40
	rdlong	local12, fp
	mov	local05, local12
	add	local05, #1
	wrlong	local05, fp
	sub	fp, #40
	jmp	#LR__1002
LR__1003
LR__1004
	add	fp, #40
	rdlong	local07, fp
	sub	fp, #40
	cmp	local07, #1 wc
 if_ae	jmp	#LR__1005
	add	fp, #24
	rdlong	local03, fp
	add	fp, #16
	rdlong	local09, fp
	sub	fp, #40
	shl	local09, #1
	add	local09, local03
	rdword	local01, local09
	cmp	local01, #46 wz
 if_ne	jmp	#LR__1006
LR__1005
	add	fp, #16
	rdbyte	local07, fp
	or	local07, #3
	wrbyte	local07, fp
	sub	fp, #16
LR__1006
	callpa	#(@LR__1008-@LR__1007)>>2,fcache_load_ptr_
' 	while (di > 0 && lfn[di - 1] != '.') di--;
LR__1007
	add	fp, #44
	rdlong	local07, fp
	sub	fp, #44
	cmp	local07, #1 wc
 if_b	jmp	#LR__1009
	add	fp, #24
	rdlong	local06, fp
	add	fp, #20
	rdlong	local03, fp
	sub	fp, #44
	sub	local03, #1
	shl	local03, #1
	add	local03, local06
	rdword	local01, local03
	cmp	local01, #46 wz
 if_e	jmp	#LR__1009
	add	fp, #44
	rdlong	local01, fp
	sub	local01, #1
	wrlong	local01, fp
	sub	fp, #44
	jmp	#LR__1007
LR__1008
LR__1009
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	add	arg01, #32
	mov	arg02, #32
	mov	arg03, #11
	mov	local13, arg01
	call	#\builtin_bytefill_
	mov	result1, local13
	add	fp, #12
	wrbyte	#0, fp
	rdbyte	local07, fp
	add	fp, #20
	wrlong	local07, fp
	add	fp, #4
	wrlong	#8, fp
	sub	fp, #36
' 
' 	__builtin_memset(dp->fn, ' ', 11) ;
' 	i = b = 0; ni = 8;
' 	for (;;) {
LR__1010
	add	fp, #24
	rdlong	local03, fp
	add	fp, #16
	rdlong	local09, fp
	mov	local04, local09
	add	local04, #1
	wrlong	local04, fp
	shl	local09, #1
	add	local09, local03
	rdword	local06, local09
	sub	fp, #20
	wrword	local06, fp
	rdword	local07, fp wz
	sub	fp, #20
 if_e	jmp	#LR__1026
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #32 wz
 if_e	jmp	#LR__1011
	add	fp, #20
	rdword	local01, fp
	sub	fp, #20
	cmp	local01, #46 wz
 if_ne	jmp	#LR__1012
	add	fp, #40
	rdlong	local04, fp
	add	fp, #4
	rdlong	local10, fp
	sub	fp, #44
	cmp	local04, local10 wz
 if_e	jmp	#LR__1012
LR__1011
	add	fp, #16
	rdbyte	local07, fp
	or	local07, #3
	wrbyte	local07, fp
	sub	fp, #16
' 			cf |=  0x01  |  0x02 ;
' 			continue;
	jmp	#LR__1010
LR__1012
	add	fp, #32
	rdlong	local07, fp
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #36
	cmp	local07, local01 wc
 if_ae	jmp	#LR__1013
	add	fp, #40
	rdlong	local08, fp
	add	fp, #4
	rdlong	local10, fp
	sub	fp, #44
	cmp	local08, local10 wz
 if_ne	jmp	#LR__1015
LR__1013
	add	fp, #36
	rdlong	local07, fp
	sub	fp, #36
	cmp	local07, #11 wz
 if_ne	jmp	#LR__1014
	add	fp, #16
	rdbyte	local07, fp
	or	local07, #3
	wrbyte	local07, fp
	sub	fp, #16
' 				cf |=  0x01  |  0x02 ;
' 				break;
	jmp	#LR__1026
LR__1014
	add	fp, #40
	rdlong	local07, fp
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #44
	cmp	local07, local01 wz
 if_ne	add	fp, #16
 if_ne	rdbyte	local07, fp
 if_ne	or	local07, #3
 if_ne	wrbyte	local07, fp
 if_ne	sub	fp, #16
	add	fp, #40
	rdlong	local07, fp
	add	fp, #4
	rdlong	local02, fp
	sub	fp, #44
	cmp	local07, local02 wcz
 if_a	jmp	#LR__1026
	add	fp, #44
	rdlong	local07, fp
	sub	fp, #4
	wrlong	local07, fp
	sub	fp, #8
	wrlong	#8, fp
	add	fp, #4
	wrlong	#11, fp
	sub	fp, #24
	rdbyte	local11, fp
	getbyte	local07, local11, #0
	shl	local07, #2
	wrbyte	local07, fp
	sub	fp, #12
' 			si = di; i = 8; ni = 11; b <<= 2;
' 			continue;
	jmp	#LR__1010
LR__1015
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #128 wc
 if_b	jmp	#LR__1017
	add	fp, #16
	rdbyte	local07, fp
	or	local07, #2
	wrbyte	local07, fp
	add	fp, #4
	rdword	arg01, fp
	sub	fp, #20
	mov	arg02, ##850
	call	#_fatfs_cc_ff_uni2oem
	add	fp, #20
	wrword	result1, fp
	rdword	local07, fp
	sub	fp, #20
	test	local07, #128 wz
 if_e	jmp	#LR__1016
	add	fp, #20
	rdword	local02, fp
	and	local02, #127
	add	ptr__fatfs_cc_dat__, ##955
	add	local02, ptr__fatfs_cc_dat__
	rdbyte	local07, local02
	wrword	local07, fp
	sub	fp, #20
	sub	ptr__fatfs_cc_dat__, ##955
LR__1016
LR__1017
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #256 wc
 if_b	jmp	#LR__1019
	add	fp, #36
	rdlong	local07, fp
	sub	local07, #1
	sub	fp, #4
	rdlong	local02, fp
	sub	fp, #32
	cmp	local02, local07 wc
 if_b	jmp	#LR__1018
	add	fp, #16
	rdbyte	local11, fp
	getbyte	local07, local11, #0
	or	local07, #3
	wrbyte	local07, fp
	add	fp, #20
	rdlong	local07, fp
	sub	fp, #4
	wrlong	local07, fp
	sub	fp, #32
' 				cf |=  0x01  |  0x02 ;
' 				i = ni; continue;
	jmp	#LR__1010
LR__1018
	add	fp, #4
	rdlong	local09, fp
	add	fp, #28
	rdlong	local10, fp
	mov	local04, local10
	add	local04, #1
	wrlong	local04, fp
	add	local09, #32
	add	local10, local09
	sub	fp, #12
	rdword	local03, fp
	sub	fp, #20
	shr	local03, #8
	wrbyte	local03, local10
	jmp	#LR__1025
LR__1019
	add	fp, #20
	rdword	local07, fp wz
	sub	fp, #20
 if_e	jmp	#LR__1020
	mov	arg01, ##@LR__1626
	add	fp, #20
	rdword	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_strchr
	cmp	result1, #0 wz
 if_e	jmp	#LR__1021
LR__1020
	add	fp, #20
	wrword	#95, fp
	sub	fp, #4
	rdbyte	local07, fp
	or	local07, #3
	wrbyte	local07, fp
	sub	fp, #16
	jmp	#LR__1024
LR__1021
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #65 wc
 if_b	jmp	#LR__1022
	add	fp, #20
	rdword	local01, fp
	sub	fp, #20
	cmp	local01, #91 wc
 if_b	add	fp, #12
 if_b	rdbyte	local07, fp
 if_b	or	local07, #2
 if_b	wrbyte	local07, fp
 if_b	sub	fp, #12
LR__1022
	add	fp, #20
	rdword	local07, fp
	sub	fp, #20
	cmp	local07, #97 wc
 if_b	jmp	#LR__1023
	add	fp, #20
	rdword	local01, fp
	sub	fp, #20
	cmp	local01, #123 wc
 if_ae	jmp	#LR__1023
	add	fp, #12
	rdbyte	local07, fp
	or	local07, #1
	wrbyte	local07, fp
	add	fp, #8
	rdword	local07, fp
	sub	local07, #32
	wrword	local07, fp
	sub	fp, #20
LR__1023
LR__1024
LR__1025
	add	fp, #4
	rdlong	local11, fp
	mov	local09, local11
	add	fp, #28
	rdlong	local02, fp
	mov	local04, local02
	add	local04, #1
	wrlong	local04, fp
	mov	local10, local02
	add	local09, #32
	add	local10, local09
	sub	fp, #12
	rdword	local03, fp
	sub	fp, #20
	wrbyte	local03, local10
	jmp	#LR__1010
LR__1026
	add	fp, #4
	rdlong	local11, fp
	sub	fp, #4
	add	local11, #32
	rdbyte	local07, local11
	cmp	local07, #229 wz
 if_e	add	fp, #4
 if_e	rdlong	local07, fp
 if_e	sub	fp, #4
 if_e	add	local07, #32
 if_e	wrbyte	#5, local07
	add	fp, #36
	rdlong	local07, fp
	sub	fp, #36
	cmp	local07, #8 wz
 if_e	add	fp, #12
 if_e	rdbyte	local07, fp
 if_e	shl	local07, #2
 if_e	wrbyte	local07, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdbyte	local07, fp
	sub	fp, #12
	and	local07, #12
	cmp	local07, #12 wz
 if_e	jmp	#LR__1027
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	and	local01, #3
	cmp	local01, #3 wz
 if_ne	jmp	#LR__1028
LR__1027
	add	fp, #16
	rdbyte	local07, fp
	or	local07, #2
	wrbyte	local07, fp
	sub	fp, #16
LR__1028
	add	fp, #16
	rdbyte	local07, fp
	sub	fp, #16
	test	local07, #2 wz
 if_ne	jmp	#LR__1029
	add	fp, #12
	rdbyte	local07, fp
	sub	fp, #12
	test	local07, #1 wz
 if_ne	add	fp, #16
 if_ne	rdbyte	local07, fp
 if_ne	or	local07, #16
 if_ne	wrbyte	local07, fp
 if_ne	sub	fp, #16
	add	fp, #12
	rdbyte	local07, fp
	sub	fp, #12
	test	local07, #4 wz
 if_ne	add	fp, #16
 if_ne	rdbyte	local07, fp
 if_ne	or	local07, #8
 if_ne	wrbyte	local07, fp
 if_ne	sub	fp, #16
LR__1029
	add	fp, #4
	rdlong	local07, fp
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #16
	add	local07, #43
	wrbyte	local01, local07
' 	}
' 
' 	dp->fn[ 11 ] = cf;
' 
' 	return FR_OK;
	mov	result1, #0
LR__1030
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_create_name_ret
	ret

_fatfs_cc_follow_path
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	result1, fp
	rdlong	local01, result1
	add	fp, #16
	wrlong	local01, fp
	sub	fp, #20
	callpa	#(@LR__1042-@LR__1040)>>2,fcache_load_ptr_
' )
' {
' 	FRESULT res;
' 	BYTE ns;
' 	FATFS *fs = dp->obj.fs;
' #line 3034 "ff.c"
' 	{
' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
LR__1040
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #47 wz
 if_e	jmp	#LR__1041
	add	fp, #8
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #92 wz
 if_ne	jmp	#LR__1043
LR__1041
	add	fp, #8
	rdlong	local01, fp
	add	local01, #1
	wrlong	local01, fp
	sub	fp, #8
	jmp	#LR__1040
LR__1042
LR__1043
	add	fp, #4
	rdlong	local01, fp
	add	local01, #8
	wrlong	#0, local01
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #8
	rdbyte	local01, local01
	cmp	local01, #32 wc
 if_ae	jmp	#LR__1044
	add	fp, #4
	rdlong	local01, fp
	add	local01, #43
	wrbyte	#128, local01
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__1048
LR__1044
' 		for (;;) {
LR__1045
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	mov	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_create_name
	add	fp, #12
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #12
 if_ne	jmp	#LR__1047
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	call	#_fatfs_cc_dir_find
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #8
	rdlong	local01, fp
	add	local01, #43
	rdbyte	local01, local01
	add	fp, #12
	wrbyte	local01, fp
	sub	fp, #4
	rdlong	local01, fp wz
	sub	fp, #12
 if_e	jmp	#LR__1046
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_ne	jmp	#LR__1047
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
' 					}
' 				}
' 				break;
	jmp	#LR__1047
LR__1046
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #4 wz
 if_ne	jmp	#LR__1047
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #6
	rdbyte	local01, local01
	test	local01, #16 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
' 				res = FR_NO_PATH; break;
 if_e	jmp	#LR__1047
	add	fp, #4
	rdlong	local02, fp
	mov	local01, local02
	add	fp, #16
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #52
	sub	fp, #20
	add	local02, #16
	rdlong	local02, local02
	and	local02, #511
	add	arg02, local02
	call	#_fatfs_cc_ld_clust
	add	local01, #8
	wrlong	result1, local01
	jmp	#LR__1045
LR__1047
LR__1048
' 			}
' #line 3090 "ff.c"
' 			{
' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
' 			}
' 		}
' 	}
' 
' 	return res;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_follow_path_ret
	ret

_fatfs_cc_get_ldnumber
	neg	_var01, #1
	rdlong	_var02, arg01 wz
	mov	_var03, _var02
 if_e	neg	result1, #1
 if_e	jmp	#_fatfs_cc_get_ldnumber_ret
	callpa	#(@LR__1051-@LR__1050)>>2,fcache_load_ptr_
' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
LR__1050
	rdbyte	_var04, _var03
	getbyte	result1, _var04, #0
	cmp	result1, #32 wc
	add	_var03, #1
 if_ae	mov	_var05, _var04
 if_ae	getbyte	_var05, _var05, #0
 if_ae	cmp	_var05, #58 wz
 if_a	jmp	#LR__1050
LR__1051
	getbyte	_var04, _var04, #0
	cmp	_var04, #58 wz
 if_ne	jmp	#LR__1053
	mov	_var06, #1
	rdbyte	_var05, _var02
	cmp	_var05, #48 wc
 if_b	jmp	#LR__1052
	rdbyte	_var05, _var02
	cmp	_var05, #58 wc
 if_b	mov	_var07, _var02
 if_b	add	_var07, #2
 if_b	cmp	_var07, _var03 wz
 if_c_and_z	rdbyte	_var06, _var02
 if_c_and_z	sub	_var06, #48
LR__1052
	cmps	_var06, #1 wc
 if_b	mov	_var01, _var06
 if_b	wrlong	_var03, arg01
' 			vol = i;
' 			*path = tt;
' 		}
' 		return vol;
	mov	result1, _var01
	jmp	#_fatfs_cc_get_ldnumber_ret
LR__1053
' 	}
' #line 3170 "ff.c"
' 	vol = 0;
' 
' 	return vol;
	mov	result1, #0
_fatfs_cc_get_ldnumber_ret
	ret

_fatfs_cc_check_fs
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	add	local01, #3
	wrbyte	#0, local01
	add	local01, #45
	wrlong	##-1, local01
	sub	local01, #48
	mov	arg01, local01
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	mov	result1, #4
 if_ne	jmp	#LR__1064
	add	local01, #52
	mov	arg01, local01
	add	arg01, #510
' {
' 
' 	return *((WORD*)ptr);
	rdword	local02, arg01
	rdbyte	local03, local01
	sub	local01, #52
	getbyte	local04, local03, #0
	cmp	local04, #235 wz
 if_ne	mov	arg03, local03
 if_ne	getbyte	arg03, arg03, #0
 if_ne	cmp	arg03, #233 wz
 if_ne	getbyte	local03, local03, #0
 if_ne	cmp	local03, #232 wz
 if_ne	jmp	#LR__1063
	getword	local04, local02, #0
	cmp	local04, ##43605 wz
 if_ne	jmp	#LR__1060
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #82
	mov	arg02, ##@LR__1627
	mov	arg03, #8
	call	#_fatfs_cc_memcmp
	cmp	result1, #0 wz
' 			return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1064
LR__1060
	add	local01, #52
	mov	arg01, local01
	add	arg01, #11
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	add	local01, #13
	rdbyte	local03, local01
	sub	local01, #65
	getword	local04, result1, #0
	getword	arg02, result1, #0
	sub	arg02, #1
	test	local04, arg02 wz
 if_ne	jmp	#LR__1062
	getword	arg02, result1, #0
	cmp	arg02, ##512 wc
 if_b	jmp	#LR__1062
	getword	arg02, result1, #0
	cmp	arg02, ##513 wc
 if_ae	jmp	#LR__1062
	mov	arg01, local03
	zerox	arg01, #7 wz
 if_e	jmp	#LR__1062
	getbyte	arg01, local03, #0
	getbyte	local03, local03, #0
	sub	local03, #1
	test	arg01, local03 wz
 if_ne	jmp	#LR__1062
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #14
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_e	jmp	#LR__1062
	add	local01, #68
	rdbyte	arg01, local01
	sub	local01, #68
	sub	arg01, #1
	cmp	arg01, #2 wc
 if_ae	jmp	#LR__1062
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #17
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_e	jmp	#LR__1062
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #19
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	local03, result1, #0
	cmp	local03, #128 wc
 if_ae	jmp	#LR__1061
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #32
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	cmp	result1, ##65536 wc
 if_b	jmp	#LR__1062
LR__1061
	add	local01, #74
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, local01 wz
' 			&& b != 0 && (b & (b - 1)) == 0
' 			&& ld_word(fs->win +  14 ) != 0
' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
' 			&& ld_word(fs->win +  17 ) != 0
' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
' 			&& ld_word(fs->win +  22 ) != 0) {
' 				return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1064
LR__1062
LR__1063
' 		}
' 	}
' 	return sign == 0xAA55 ? 2 : 3;
	getword	local03, local02, #0
	cmp	local03, ##43605 wz
 if_e	mov	local04, #2
 if_ne	mov	local04, #3
	mov	result1, local04
LR__1064
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_check_fs_ret
	ret

_fatfs_cc_find_volume
	mov	COUNT_, #5
	call	#pushregs_
	add	ptra, #36
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, local01
	mov	arg02, #0
	call	#_fatfs_cc_check_fs
	cmp	result1, #2 wz
 if_e	jmp	#LR__1070
	cmp	result1, #3 wc
 if_b	cmp	local02, #0 wz
 if_nc_or_z	jmp	#LR__1078
LR__1070
' 	for (i = 0; i < 4; i++) {
	mov	local03, #0
	callpa	#(@LR__1072-@LR__1071)>>2,fcache_load_ptr_
LR__1071
	cmp	local03, #4 wc
 if_ae	jmp	#LR__1073
	mov	local04, local03
	shl	local04, #2
	add	fp, #20
	add	local04, fp
	add	local01, #52
	mov	arg01, local01
	sub	local01, #52
	add	arg01, #446
	mov	arg02, local03
	shl	arg02, #4
	add	arg01, arg02
	add	arg01, #8
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	fp, #20
	wrlong	result1, local04
	add	local03, #1
	jmp	#LR__1071
LR__1072
LR__1073
	cmp	local02, #0 wz
 if_ne	mov	local04, local02
 if_ne	sub	local04, #1
 if_e	mov	local04, #0
	mov	local03, local04
' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
' 	}
' 	i = part ? part - 1 : 0;
' 	do {
LR__1074
	mov	local04, local03
	shl	local04, #2
	add	fp, #20
	add	local04, fp
	rdlong	local04, local04 wz
	sub	fp, #20
 if_e	jmp	#LR__1075
	mov	local04, local03
	shl	local04, #2
	add	fp, #20
	add	local04, fp
	rdlong	arg02, local04
	mov	arg01, local01
	sub	fp, #20
	call	#_fatfs_cc_check_fs
	mov	local04, result1
	jmp	#LR__1076
LR__1075
	mov	local04, #3
LR__1076
	mov	local05, local04
	cmp	local02, #0 wz
 if_e	cmp	local05, #2 wc
 if_c_and_z	jmp	#LR__1077
 if_e	add	local03, #1
 if_e	cmp	local03, #4 wc
 if_c_and_z	jmp	#LR__1074
LR__1077
' 	return fmt;
	mov	result1, local05
LR__1078
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_find_volume_ret
	ret

_fatfs_cc_mount_volume
	mov	COUNT_, #11
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	wrlong	#0, local01
	call	#_fatfs_cc_get_ldnumber
	mov	local03, result1
	cmps	local03, #0 wc
 if_b	mov	result1, #11
 if_b	jmp	#LR__1090
	mov	arg03, local03
	shl	arg03, #2
	add	arg03, objptr
	rdlong	local04, arg03 wz
 if_e	mov	result1, #12
 if_e	jmp	#LR__1090
	wrlong	local04, local01
	getbyte	local02, local02, #0
	and	local02, #254
	rdbyte	arg03, local04 wz
 if_e	jmp	#LR__1081
	add	local04, #1
	rdbyte	arg01, local04 wz
	sub	local04, #1
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, ##544
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, ##544
	getbyte	arg03, result1, #0
	test	arg03, #1 wz
 if_ne	jmp	#LR__1080
	cmp	local02, #0 wz
 if_ne	getbyte	result1, result1, #0
 if_ne	test	result1, #4 wz
' 				return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__1090
' 			}
' 			return FR_OK;
	mov	result1, #0
	jmp	#LR__1090
LR__1080
LR__1081
	wrbyte	#0, local04
	add	local04, #1
	wrbyte	local03, local04
	rdbyte	arg01, local04
	sub	local04, #1
	call	#_fatfs_cc_disk_initialize
	mov	arg03, result1
	getbyte	local05, arg03, #0
	test	local05, #1 wz
' 		return FR_NOT_READY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1090
	cmp	local02, #0 wz
 if_ne	mov	local05, arg03
 if_ne	getbyte	local05, local05, #0
 if_ne	test	local05, #4 wz
' 		return FR_WRITE_PROTECTED;
 if_ne	mov	result1, #10
 if_ne	jmp	#LR__1090
	mov	arg01, local04
	mov	arg02, #0
	call	#_fatfs_cc_find_volume
	mov	arg01, result1
	cmp	arg01, #4 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1090
	cmp	arg01, #2 wc
 if_ae	mov	result1, #13
 if_ae	jmp	#LR__1090
	add	local04, #48
	rdlong	local06, local04
	add	local04, #4
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #11
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	cmp	result1, ##512 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1090
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #22
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local07, result1 wz
 if_ne	jmp	#LR__1082
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #36
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	mov	local07, result1
LR__1082
	add	local04, #28
	wrlong	local07, local04
	add	local04, #40
	rdbyte	local05, local04
	sub	local04, #66
	wrbyte	local05, local04
	rdbyte	local05, local04
	sub	local04, #2
	cmp	local05, #1 wz
 if_ne	add	local04, #2
 if_ne	rdbyte	local05, local04
 if_ne	sub	local04, #2
 if_ne	cmp	local05, #2 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1090
	add	local04, #2
	rdbyte	local05, local04
	qmul	local07, local05
	add	local04, #63
	rdbyte	local05, local04
	sub	local04, #55
	wrword	local05, local04
	rdword	local05, local04 wz
	sub	local04, #10
	getqx	local07
 if_e	jmp	#LR__1083
	add	local04, #10
	rdword	local05, local04
	getword	local03, local05, #0
	sub	local04, #10
	getword	local05, local05, #0
	sub	local05, #1
	test	local03, local05 wz
 if_e	jmp	#LR__1084
LR__1083
	mov	result1, #13
	jmp	#LR__1090
LR__1084
	add	local04, #52
	mov	arg01, local04
	add	arg01, #17
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	sub	local04, #44
	wrword	result1, local04
	rdword	local05, local04
	sub	local04, #8
	abs	arg01, local05 wc
	getnib	arg01, arg01, #0
	negc	arg01, arg01 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1090
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #19
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	local08, result1 wz
 if_e	add	local04, #52
 if_e	mov	arg01, local04
 if_e	sub	local04, #52
 if_e	add	arg01, #32
' {
' 
' 	return *((DWORD*)ptr);
 if_e	rdlong	local08, arg01
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #14
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	mov	arg01, result1
	mov	local05, arg01
	zerox	local05, #15 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1090
	getword	local09, arg01, #0
	add	local09, local07
	add	local04, #8
	rdword	local05, local04
	sub	local04, #8
	abs	local05, local05 wc
	shr	local05, #4
	sumc	local09, local05
	cmp	local08, local09 wc
 if_b	mov	result1, #13
 if_b	jmp	#LR__1090
	sub	local08, local09
	add	local04, #10
	rdword	local05, local04
	qdiv	local08, local05
	sub	local04, #10
	getqx	local05
	cmp	local05, #0 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1090
	mov	local10, #0
	cmp	local05, ##268435446 wc
 if_b	mov	local10, #3
	cmp	local05, ##65526 wc
 if_b	mov	local10, #2
	cmp	local05, ##4086 wc
 if_b	mov	local10, #1
	cmp	local10, #0 wz
 if_e	mov	result1, #13
 if_e	jmp	#LR__1090
	add	local05, #2
	add	local04, #24
	wrlong	local05, local04
	add	local04, #8
	wrlong	local06, local04
	mov	local05, local06
	getword	arg01, arg01, #0
	add	local05, arg01
	add	local04, #4
	wrlong	local05, local04
	mov	local05, local06
	add	local05, local09
	add	local04, #8
	wrlong	local05, local04
	sub	local04, #44
	cmp	local10, #3 wz
 if_ne	jmp	#LR__1085
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #42
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01 wz
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1090
	add	local04, #8
	rdword	local05, local04 wz
	sub	local04, #8
 if_ne	mov	result1, #13
 if_ne	jmp	#LR__1090
	add	local04, #52
	mov	arg01, local04
	add	arg01, #44
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	local04, #12
	wrlong	result1, local04
	sub	local04, #16
	rdlong	local11, local04
	sub	local04, #24
	shl	local11, #2
	jmp	#LR__1087
LR__1085
	add	local04, #8
	rdword	local05, local04 wz
	sub	local04, #8
 if_e	mov	result1, #13
 if_e	jmp	#LR__1090
	add	local04, #36
	rdlong	local05, local04
	add	local05, local07
	add	local04, #4
	wrlong	local05, local04
	sub	local04, #40
	cmp	local10, #2 wz
 if_e	add	local04, #24
 if_e	rdlong	local05, local04
 if_e	sub	local04, #24
 if_e	shl	local05, #1
 if_e	jmp	#LR__1086
	add	local04, #24
	rdlong	local11, local04
	mov	local05, local11
	shl	local05, #1
	add	local05, local11
	shr	local05, #1
	sub	local04, #24
	and	local11, #1
	add	local05, local11
LR__1086
	mov	local11, local05
LR__1087
	add	local11, #511
	shr	local11, #9
	add	local04, #28
	rdlong	arg03, local04
	sub	local04, #28
	cmp	arg03, local11 wc
 if_b	mov	result1, #13
 if_b	jmp	#LR__1090
	add	local04, #20
	wrlong	##-1, local04
	sub	local04, #4
	wrlong	##-1, local04
	sub	local04, #12
	wrbyte	#128, local04
	sub	local04, #4
	cmp	local10, #3 wz
 if_ne	jmp	#LR__1089
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #48
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	local05, result1, #0
	cmp	local05, #1 wz
 if_ne	jmp	#LR__1089
	add	local06, #1
	mov	arg01, local04
	mov	arg02, local06
	call	#_fatfs_cc_move_window
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1089
	add	local04, #4
	wrbyte	#0, local04
	add	local04, #48
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #510
' {
' 
' 	return *((WORD*)ptr);
	rdword	result1, arg01
	getword	local05, result1, #0
	cmp	local05, ##43605 wz
 if_e	add	local04, #52
 if_e	mov	arg01, local04
 if_e	sub	local04, #52
' {
' 
' 	return *((DWORD*)ptr);
 if_e	rdlong	result1, arg01
 if_e	cmp	result1, ##1096897106 wz
 if_ne	jmp	#LR__1088
	add	local04, #52
	mov	arg01, local04
	sub	local04, #52
	add	arg01, #484
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	cmp	result1, ##1631679090 wz
 if_ne	jmp	#LR__1088
	add	local04, #52
	mov	arg01, local04
	add	arg01, #488
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	local04, #32
	wrlong	result1, local04
	add	local04, #32
	mov	arg01, local04
	add	arg01, #492
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	sub	local04, #36
	wrlong	result1, local04
	sub	local04, #16
LR__1088
LR__1089
	wrbyte	local10, local04
	add	objptr, #4
	rdword	local05, objptr
	add	local05, #1
	wrword	local05, objptr
	rdword	local11, objptr
	add	local04, #6
	wrword	local11, local04
	add	objptr, #4
	add	local04, #6
	wrlong	objptr, local04
' 				&& ld_dword(fs->win +  0 ) == 0x41615252
' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
' 			{
' 
' 				fs->free_clst = ld_dword(fs->win +  488 );
' 
' 
' 				fs->last_clst = ld_dword(fs->win +  492 );
' 
' 			}
' 		}
' 
' 
' 	}
' 
' 	fs->fs_type = (BYTE)fmt;
' 	fs->id = ++Fsid;
' 
' 	fs->lfnbuf = LfnBuf;
' #line 3567 "ff.c"
' 	return FR_OK;
	mov	result1, #0
	sub	objptr, #8
LR__1090
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_mount_volume_ret
	ret

_fatfs_cc_validate
	mov	_var01, arg01 wz
	mov	_var02, #9
 if_ne	rdlong	_var03, _var01 wz
 if_ne	rdbyte	_var04, _var03 wz
 if_e	jmp	#LR__1100
	add	_var01, #4
	rdword	_var04, _var01
	sub	_var01, #4
	rdlong	arg01, _var01
	add	arg01, #6
	rdword	result1, arg01
	cmp	_var04, result1 wz
 if_ne	jmp	#LR__1100
	rdlong	_var04, _var01
	add	_var04, #1
	rdbyte	arg01, _var04 wz
 if_ne	mov	result1, #1
' 
' 	return Stat;
 if_e	add	objptr, ##544
 if_e	rdbyte	result1, objptr
 if_e	sub	objptr, ##544
	getbyte	_var03, result1, #0
	test	_var03, #1 wz
 if_e	mov	_var02, #0
LR__1100
	cmp	_var02, #0 wz
 if_e	rdlong	_var03, _var01
 if_ne	mov	_var03, #0
	wrlong	_var03, arg02
' 			res = FR_OK;
' 		}
' 
' 	}
' 	*rfs = (res == FR_OK) ? obj->fs : 0;
' 	return res;
	mov	result1, _var02
_fatfs_cc_validate_ret
	ret

_fatfs_cc_f_mount
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #32
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	fp, #20
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #28
	call	#_fatfs_cc_get_ldnumber
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmps	result1, #0 wc
 if_b	mov	result1, #11
 if_b	jmp	#LR__1111
	add	fp, #20
	rdlong	arg03, fp
	shl	arg03, #2
	add	arg03, objptr
	rdlong	arg03, arg03 wz
	sub	fp, #4
	wrlong	arg03, fp
	sub	fp, #16
 if_e	jmp	#LR__1110
	add	fp, #16
	rdlong	arg03, fp
	sub	fp, #16
	add	arg03, #1
	rdbyte	arg01, arg03
	call	#_fatfs_cc_disk_deinitialize
	add	fp, #16
	rdlong	arg03, fp
	sub	fp, #16
	wrbyte	#0, arg03
LR__1110
	add	fp, #4
	rdlong	local01, fp wz
	sub	fp, #4
 if_ne	add	fp, #4
 if_ne	rdlong	local01, fp
 if_ne	sub	fp, #4
 if_ne	wrbyte	#0, local01
	add	fp, #20
	rdlong	local01, fp
	shl	local01, #2
	add	local01, objptr
	sub	fp, #16
	rdlong	arg03, fp
	wrlong	arg03, local01
	add	fp, #8
	rdbyte	local01, fp wz
	sub	fp, #12
 if_e	mov	result1, #0
 if_e	jmp	#LR__1111
	add	fp, #8
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, fp
	sub	fp, #4
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #24
	wrlong	result1, fp
' 
' 	res = mount_volume(&path, &fs, 0);
' 	return res ;
	sub	fp, #24
LR__1111
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_mount_ret
	ret

_fatfs_cc_f_open
	mov	COUNT_, #2
	call	#pushregs_
	add	ptra, #96
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrbyte	arg03, fp
	sub	fp, #8
	rdlong	arg04, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__1137
	add	fp, #12
	rdbyte	arg04, fp
	and	arg04, #63
	wrbyte	arg04, fp
	sub	fp, #4
	mov	arg01, fp
	add	fp, #60
	mov	arg02, fp
	sub	fp, #56
	rdbyte	arg03, fp
	sub	fp, #12
	call	#_fatfs_cc_mount_volume
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1136
	add	fp, #68
	rdlong	arg04, fp
	sub	fp, #48
	wrlong	arg04, fp
	mov	arg01, fp
	sub	fp, #12
	rdlong	local01, fp
	sub	fp, #8
	mov	arg02, local01
	call	#_fatfs_cc_follow_path
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1120
	add	fp, #63
	rdbyte	arg04, fp
	sub	fp, #63
	test	arg04, #128 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #16
LR__1120
	add	fp, #12
	rdbyte	arg04, fp
	sub	fp, #12
	test	arg04, #28 wz
 if_e	jmp	#LR__1125
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_e	jmp	#LR__1122
	add	fp, #16
	rdlong	arg04, fp
	sub	fp, #16
	cmp	arg04, #4 wz
 if_ne	jmp	#LR__1121
	add	fp, #20
	mov	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc_dir_register
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
LR__1121
	add	fp, #12
	rdbyte	local01, fp
	or	local01, #8
	wrbyte	local01, fp
	sub	fp, #12
	jmp	#LR__1124
LR__1122
	add	fp, #26
	rdbyte	local01, fp
	sub	fp, #26
	test	local01, #17 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #16
 if_ne	jmp	#LR__1123
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	test	local01, #4 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#8, fp
 if_ne	sub	fp, #16
LR__1123
LR__1124
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1128
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	test	local01, #8 wz
 if_e	jmp	#LR__1128
	call	#_fatfs_cc__get_fattime
	add	fp, #84
	wrlong	result1, fp
	sub	fp, #36
	rdlong	arg01, fp
	add	arg01, #14
	wrlong	result1, arg01
	rdlong	arg01, fp
	add	arg01, #22
	add	fp, #36
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #48
	call	#_fatfs_cc_ld_clust
	add	fp, #72
	wrlong	result1, fp
	sub	fp, #24
	rdlong	local01, fp
	add	local01, #11
	wrbyte	#32, local01
	add	fp, #20
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #48
	mov	arg03, #0
	call	#_fatfs_cc_st_clust
	add	fp, #48
	rdlong	arg01, fp
	add	arg01, #28
	wrlong	#0, arg01
	add	fp, #20
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	add	fp, #4
	rdlong	local01, fp wz
	sub	fp, #72
 if_e	jmp	#LR__1128
	add	fp, #68
	rdlong	local01, fp
	add	local01, #48
	rdlong	local01, local01
	add	fp, #20
	wrlong	local01, fp
	sub	fp, #68
	mov	arg01, fp
	add	fp, #52
	rdlong	arg02, fp
	sub	fp, #72
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1128
	add	fp, #68
	rdlong	arg01, fp
	add	fp, #20
	rdlong	arg02, fp
	sub	fp, #88
	call	#_fatfs_cc_move_window
	add	fp, #16
	wrlong	result1, fp
	add	fp, #52
	rdlong	arg04, fp
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #72
	sub	local01, #1
	add	arg04, #16
	wrlong	local01, arg04
	jmp	#LR__1128
LR__1125
	add	fp, #16
	rdlong	arg04, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1127
	add	fp, #26
	rdbyte	arg04, fp
	sub	fp, #26
	test	arg04, #16 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#4, fp
 if_ne	sub	fp, #16
 if_ne	jmp	#LR__1126
	add	fp, #12
	rdbyte	arg04, fp
	sub	fp, #12
	test	arg04, #2 wz
 if_ne	add	fp, #26
 if_ne	rdbyte	local01, fp
 if_ne	sub	fp, #26
 if_ne	test	local01, #1 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #16
LR__1126
LR__1127
LR__1128
	add	fp, #16
	rdlong	local01, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1129
	add	fp, #12
	rdbyte	local02, fp
	sub	fp, #12
	test	local02, #8 wz
 if_ne	add	fp, #12
 if_ne	rdbyte	local02, fp
 if_ne	or	local02, #64
 if_ne	wrbyte	local02, fp
 if_ne	sub	fp, #12
	add	fp, #4
	rdlong	local02, fp
	add	fp, #64
	rdlong	local01, fp
	add	local01, #48
	rdlong	local01, local01
	add	local02, #32
	wrlong	local01, local02
	sub	fp, #64
	rdlong	local02, fp
	add	fp, #44
	rdlong	local01, fp
	sub	fp, #48
	add	local02, #36
	wrlong	local01, local02
LR__1129
	add	fp, #16
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1135
	add	fp, #4
	rdlong	local02, fp
	add	fp, #64
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #48
	call	#_fatfs_cc_ld_clust
	add	local02, #8
	wrlong	result1, local02
	add	fp, #4
	rdlong	local02, fp
	add	fp, #44
	rdlong	arg01, fp
	add	arg01, #28
' {
' 
' 	return *((DWORD*)ptr);
	rdlong	result1, arg01
	add	local02, #12
	wrlong	result1, local02
	sub	fp, #44
	rdlong	local02, fp
	add	fp, #64
	rdlong	local01, fp
	wrlong	local01, local02
	sub	fp, #64
	rdlong	local02, fp
	add	fp, #64
	rdlong	local01, fp
	add	local01, #6
	rdword	local01, local01
	add	local02, #4
	wrword	local01, local02
	sub	fp, #64
	rdlong	local02, fp
	add	fp, #8
	rdbyte	local01, fp
	add	local02, #16
	wrbyte	local01, local02
	sub	fp, #8
	rdlong	local02, fp
	add	local02, #17
	wrbyte	#0, local02
	rdlong	local02, fp
	add	local02, #28
	wrlong	#0, local02
	rdlong	local02, fp
	add	local02, #20
	wrlong	#0, local02
	rdlong	arg01, fp
	sub	fp, #4
	add	arg01, #40
	mov	arg02, #0
	decod	arg03, #9
	call	#\builtin_bytefill_
	add	fp, #12
	rdbyte	local02, fp
	sub	fp, #12
	test	local02, #32 wz
 if_e	jmp	#LR__1134
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #12
	rdlong	local02, local01
	cmp	local02, #1 wc
 if_b	jmp	#LR__1134
	add	fp, #4
	rdlong	local01, fp
	mov	local02, local01
	add	local01, #12
	rdlong	local01, local01
	add	local02, #20
	wrlong	local01, local02
	add	fp, #64
	rdlong	local02, fp
	add	local02, #10
	rdword	local02, local02
	shl	local02, #9
	add	fp, #8
	wrlong	local02, fp
	sub	fp, #72
	rdlong	local02, fp
	add	local02, #8
	rdlong	local01, local02
	add	fp, #76
	wrlong	local01, fp
' 				fp->fptr = fp->obj.objsize;
' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
' 				clst = fp->obj.sclust;
' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
	sub	fp, #76
	rdlong	local02, fp
	add	local02, #12
	rdlong	local01, local02
	add	fp, #88
	wrlong	local01, fp
	sub	fp, #92
LR__1130
	add	fp, #16
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1131
	add	fp, #92
	rdlong	local02, fp
	sub	fp, #16
	rdlong	local01, fp
	sub	fp, #76
	cmp	local02, local01 wcz
 if_be	jmp	#LR__1131
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #76
	rdlong	arg02, fp
	sub	fp, #80
	call	#_fatfs_cc_get_fat
	add	fp, #80
	wrlong	result1, fp
	sub	fp, #80
	cmp	result1, #2 wc
 if_b	add	fp, #16
 if_b	wrlong	#2, fp
 if_b	sub	fp, #16
	add	fp, #80
	rdlong	local02, fp
	sub	fp, #80
	cmp	local02, ##-1 wz
 if_e	add	fp, #16
 if_e	wrlong	#1, fp
 if_e	sub	fp, #16
	add	fp, #92
	rdlong	local02, fp
	sub	fp, #16
	rdlong	local01, fp
	sub	local02, local01
	add	fp, #16
	wrlong	local02, fp
	sub	fp, #92
	jmp	#LR__1130
LR__1131
	add	fp, #4
	rdlong	local02, fp
	add	fp, #76
	rdlong	local01, fp
	add	local02, #24
	wrlong	local01, local02
	sub	fp, #64
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	jmp	#LR__1133
	add	fp, #92
	rdlong	local01, fp
	sub	fp, #92
	test	local01, #511 wz
 if_e	jmp	#LR__1133
	add	fp, #68
	rdlong	arg01, fp
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #80
	call	#_fatfs_cc_clst2sect
	add	fp, #88
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #88
 if_e	add	fp, #16
 if_e	wrlong	#2, fp
 if_e	sub	fp, #16
 if_e	jmp	#LR__1132
	add	fp, #4
	rdlong	local02, fp
	add	fp, #84
	rdlong	local01, fp
	add	fp, #4
	rdlong	arg04, fp
	shr	arg04, #9
	add	local01, arg04
	add	local02, #28
	wrlong	local01, local02
	sub	fp, #24
	rdlong	local02, fp
	add	local02, #1
	rdbyte	arg01, local02
	sub	fp, #64
	rdlong	local02, fp
	mov	arg02, local02
	add	arg02, #40
	sub	fp, #4
	add	local02, #28
	rdlong	arg03, local02
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_ne	add	fp, #16
 if_ne	wrlong	#1, fp
 if_ne	sub	fp, #16
LR__1132
LR__1133
LR__1134
LR__1135
LR__1136
	add	fp, #16
	rdlong	local02, fp wz
	sub	fp, #16
 if_ne	add	fp, #4
 if_ne	rdlong	local02, fp
 if_ne	sub	fp, #4
 if_ne	wrlong	#0, local02
' 
' 	return res ;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
LR__1137
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_open_ret
	ret

_fatfs_cc_f_read
	mov	COUNT_, #14
	call	#pushregs_
	add	ptra, #56
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #44
	wrlong	result1, fp
	sub	fp, #36
	rdlong	result1, fp
	wrlong	#0, result1
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #20
	mov	arg02, fp
	sub	fp, #24
	call	#_fatfs_cc_validate
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_ne	jmp	#LR__1140
	add	fp, #4
	rdlong	arg02, fp
	add	arg02, #17
	rdbyte	arg02, arg02 wz
	add	fp, #16
	wrlong	arg02, fp
	sub	fp, #20
 if_e	jmp	#LR__1141
LR__1140
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__1160
LR__1141
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	test	arg04, #1 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__1160
	add	fp, #4
	rdlong	local01, fp
	mov	local02, local01
	add	local02, #12
	rdlong	local03, local02
	add	local01, #20
	rdlong	local01, local01
	sub	local03, local01
	add	fp, #32
	wrlong	local03, fp
	sub	fp, #24
	rdlong	local04, fp
	sub	fp, #12
	cmp	local04, local03 wcz
 if_a	add	fp, #36
 if_a	rdlong	local04, fp
 if_a	sub	fp, #24
 if_a	wrlong	local04, fp
 if_a	sub	fp, #12
' 
' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
LR__1142
	add	fp, #12
	rdlong	local02, fp
	sub	fp, #12
	mov	local04, local02
	cmp	local04, #1 wc
 if_b	jmp	#LR__1159
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #20
	rdlong	local03, local03
	test	local03, #511 wz
 if_ne	jmp	#LR__1157
	add	fp, #4
	rdlong	local01, fp
	add	local01, #20
	rdlong	local03, local01
	shr	local03, #9
	add	fp, #20
	rdlong	local05, fp
	mov	local06, local05
	add	local06, #10
	rdword	local07, local06
	sub	local06, #10
	getword	local08, local07, #0
	sub	local08, #1
	and	local03, local08 wz
	add	fp, #24
	wrlong	local03, fp
	sub	fp, #48
 if_ne	jmp	#LR__1147
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #20
	rdlong	local03, local03 wz
 if_ne	jmp	#LR__1143
	add	fp, #4
	rdlong	local03, fp
	add	local03, #8
	rdlong	local03, local03
	add	fp, #24
	wrlong	local03, fp
	sub	fp, #28
	jmp	#LR__1144
LR__1143
	add	fp, #4
	rdlong	local08, fp
	mov	arg01, local08
	sub	fp, #4
	add	local08, #24
	rdlong	arg02, local08
	call	#_fatfs_cc_get_fat
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__1144
	add	fp, #28
	rdlong	local03, fp
	sub	fp, #28
	cmp	local03, #2 wc
 if_ae	jmp	#LR__1145
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#2, local03
	mov	result1, #2
	jmp	#LR__1160
LR__1145
	add	fp, #28
	rdlong	local03, fp
	sub	fp, #28
	cmp	local03, ##-1 wz
 if_ne	jmp	#LR__1146
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__1160
LR__1146
	add	fp, #4
	rdlong	local03, fp
	add	fp, #24
	rdlong	local08, fp
	sub	fp, #28
	add	local03, #24
	wrlong	local08, local03
LR__1147
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #24
	rdlong	arg02, local03
	call	#_fatfs_cc_clst2sect
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1148
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#2, local03
	mov	result1, #2
	jmp	#LR__1160
LR__1148
	add	fp, #32
	rdlong	local03, fp
	add	fp, #16
	rdlong	local08, fp
	add	local03, local08
	sub	fp, #16
	wrlong	local03, fp
	sub	fp, #20
	rdlong	local03, fp
	shr	local03, #9
	add	fp, #32
	wrlong	local03, fp
	sub	fp, #44
	cmp	local03, #1 wc
 if_b	jmp	#LR__1152
	add	fp, #48
	rdlong	local03, fp
	sub	fp, #4
	rdlong	local08, fp
	add	local03, local08
	sub	fp, #20
	rdlong	local08, fp
	sub	fp, #24
	add	local08, #10
	rdword	local08, local08
	cmp	local03, local08 wcz
 if_be	jmp	#LR__1149
	add	fp, #24
	rdlong	local01, fp
	add	local01, #10
	rdword	local03, local01
	add	fp, #24
	rdlong	local08, fp
	sub	local03, local08
	sub	fp, #4
	wrlong	local03, fp
	sub	fp, #44
LR__1149
	add	fp, #24
	rdlong	local01, fp
	add	local01, #1
	rdbyte	arg01, local01
	add	fp, #28
	rdlong	arg02, fp
	sub	fp, #20
	rdlong	arg03, fp
	add	fp, #12
	rdlong	arg04, fp
	sub	fp, #44
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1150
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__1160
LR__1150
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdbyte	local03, local01
	test	local03, #128 wz
 if_e	jmp	#LR__1151
	add	fp, #4
	rdlong	local08, fp
	add	local08, #28
	rdlong	local08, local08
	add	fp, #28
	rdlong	local09, fp
	sub	local08, local09
	add	fp, #12
	rdlong	local10, fp
	sub	fp, #44
	mov	local11, local10
	cmp	local08, local11 wc
 if_ae	jmp	#LR__1151
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #48
	rdlong	arg02, fp
	mov	local11, arg02
	add	local11, #28
	rdlong	local09, local11
	add	fp, #28
	rdlong	local05, fp
	sub	local09, local05
	shl	local09, #9
	mov	local11, local09
	add	arg01, local09
	sub	fp, #32
	add	arg02, #40
	decod	arg03, #9
	call	#__system____builtin_memmove
LR__1151
	add	fp, #44
	rdlong	local03, fp
	shl	local03, #9
	sub	fp, #4
	wrlong	local03, fp
	sub	fp, #40
' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
' 				}
' 
' 
' 				rcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__1158
LR__1152
	add	fp, #4
	rdlong	local03, fp
	add	local03, #28
	rdlong	local03, local03
	add	fp, #28
	rdlong	local01, fp
	sub	fp, #32
	cmp	local03, local01 wz
 if_e	jmp	#LR__1156
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #16
	rdbyte	local03, local01
	test	local03, #128 wz
 if_e	jmp	#LR__1154
	add	fp, #24
	rdlong	local01, fp
	add	local01, #1
	rdbyte	arg01, local01
	sub	fp, #20
	rdlong	local03, fp
	mov	arg02, local03
	add	arg02, #40
	sub	fp, #4
	add	local03, #28
	rdlong	arg03, local03
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1153
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__1160
LR__1153
	add	fp, #4
	rdlong	local11, fp
	mov	local03, local11
	sub	fp, #4
	add	local11, #16
	rdbyte	local11, local11
	and	local11, #127
	add	local03, #16
	wrbyte	local11, local03
LR__1154
	add	fp, #24
	rdlong	local01, fp
	add	local01, #1
	rdbyte	arg01, local01
	sub	fp, #20
	rdlong	arg02, fp
	add	arg02, #40
	add	fp, #28
	rdlong	arg03, fp
	sub	fp, #32
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1155
	add	fp, #4
	rdlong	local03, fp
	sub	fp, #4
	add	local03, #17
	wrbyte	#1, local03
	mov	result1, #1
	jmp	#LR__1160
LR__1155
LR__1156
	add	fp, #4
	rdlong	local03, fp
	add	fp, #28
	rdlong	local11, fp
	sub	fp, #32
	add	local03, #28
	wrlong	local11, local03
LR__1157
	add	fp, #4
	rdlong	local01, fp
	add	local01, #20
	rdlong	local11, local01
	and	local11, #511
	decod	local03, #9
	sub	local03, local11
	add	fp, #36
	wrlong	local03, fp
	sub	fp, #28
	rdlong	local11, fp
	sub	fp, #12
	cmp	local03, local11 wcz
 if_a	add	fp, #12
 if_a	rdlong	local03, fp
 if_a	add	fp, #28
 if_a	wrlong	local03, fp
 if_a	sub	fp, #40
	add	fp, #52
	rdlong	arg01, fp
	sub	fp, #48
	rdlong	local06, fp
	mov	arg02, local06
	add	arg02, #40
	add	local06, #20
	rdlong	local11, local06
	mov	local09, local11
	mov	local10, local09
	and	local10, #511
	add	arg02, local10
	add	fp, #36
	rdlong	arg03, fp
	sub	fp, #40
	call	#__system____builtin_memmove
LR__1158
	add	fp, #12
	rdlong	local03, fp
	add	fp, #28
	rdlong	local08, fp
	sub	local03, local08
	sub	fp, #28
	wrlong	local03, fp
	add	fp, #4
	rdlong	local01, fp
	rdlong	local07, local01
	add	fp, #24
	rdlong	local08, fp
	add	local07, local08
	wrlong	local07, local01
	add	fp, #12
	rdlong	local03, fp
	sub	fp, #12
	rdlong	local12, fp
	add	local03, local12
	add	fp, #12
	wrlong	local03, fp
	sub	fp, #48
	rdlong	local13, fp
	mov	local03, local13
	add	local13, #20
	rdlong	local14, local13
	add	fp, #36
	rdlong	local06, fp
	sub	fp, #40
	add	local14, local06
	add	local03, #20
	wrlong	local14, local03
	jmp	#LR__1142
LR__1159
' 
' 
' 
' 
' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
' 
' 	}
' 
' 	return FR_OK ;
	mov	result1, #0
LR__1160
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_read_ret
	ret

_fatfs_cc_f_write
	mov	COUNT_, #21
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	add	fp, #4
	wrlong	arg04, fp
	sub	fp, #8
	rdlong	result1, fp
	add	fp, #40
	wrlong	result1, fp
	sub	fp, #32
	rdlong	result1, fp
	wrlong	#0, result1
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #20
	mov	arg02, fp
	sub	fp, #24
	call	#_fatfs_cc_validate
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_ne	jmp	#LR__1170
	add	fp, #4
	rdlong	arg02, fp
	add	arg02, #17
	rdbyte	arg02, arg02 wz
	add	fp, #16
	wrlong	arg02, fp
	sub	fp, #20
 if_e	jmp	#LR__1171
LR__1170
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	jmp	#LR__1193
LR__1171
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #16
	rdbyte	arg02, arg02
	test	arg02, #2 wz
 if_e	mov	result1, #7
 if_e	jmp	#LR__1193
	add	fp, #4
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg01, #20
	rdlong	arg01, arg01
	add	fp, #8
	rdlong	result1, fp
	add	arg01, result1
	sub	fp, #12
	add	arg02, #20
	rdlong	result1, arg02
	cmp	arg01, result1 wc
 if_ae	jmp	#LR__1172
	add	fp, #4
	rdlong	arg02, fp
	neg	result1, #1
	add	arg02, #20
	rdlong	arg02, arg02
	sub	result1, arg02
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #12
LR__1172
' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
' 	}
' 
' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
LR__1173
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	cmp	result1, #1 wc
 if_b	jmp	#LR__1192
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #20
	rdlong	result1, result1
	test	result1, #511 wz
 if_ne	jmp	#LR__1188
	add	fp, #4
	rdlong	result1, fp
	add	result1, #20
	rdlong	result1, result1
	shr	result1, #9
	add	fp, #20
	rdlong	arg02, fp
	add	arg02, #10
	rdword	arg04, arg02
	getword	arg02, arg04, #0
	sub	arg02, #1
	and	result1, arg02 wz
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #44
 if_ne	jmp	#LR__1179
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #20
	rdlong	arg02, result1 wz
 if_ne	jmp	#LR__1174
	add	fp, #4
	rdlong	arg02, fp
	add	arg02, #8
	rdlong	arg02, arg02 wz
	add	fp, #24
	wrlong	arg02, fp
	sub	fp, #28
 if_ne	jmp	#LR__1175
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	jmp	#LR__1175
LR__1174
	add	fp, #4
	rdlong	arg04, fp
	mov	arg01, arg04
	sub	fp, #4
	add	arg04, #24
	rdlong	arg02, arg04
	call	#_fatfs_cc_create_chain
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
LR__1175
	add	fp, #28
	rdlong	result1, fp wz
	sub	fp, #28
 if_e	jmp	#LR__1192
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #28
	cmp	result1, #1 wz
 if_ne	jmp	#LR__1176
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #17
	wrbyte	#2, result1
	mov	result1, #2
	jmp	#LR__1193
LR__1176
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #28
	cmp	result1, ##-1 wz
 if_ne	jmp	#LR__1177
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #17
	wrbyte	#1, result1
	mov	result1, #1
	jmp	#LR__1193
LR__1177
	add	fp, #4
	rdlong	result1, fp
	add	fp, #24
	rdlong	arg04, fp
	add	result1, #24
	wrlong	arg04, result1
	sub	fp, #24
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #8
	rdlong	result1, result1 wz
 if_ne	jmp	#LR__1178
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #28
	add	arg04, #8
	wrlong	result1, arg04
LR__1178
LR__1179
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	test	arg04, #128 wz
 if_e	jmp	#LR__1181
	add	fp, #24
	rdlong	arg04, fp
	add	arg04, #1
	rdbyte	arg01, arg04
	sub	fp, #20
	rdlong	arg04, fp
	mov	arg02, arg04
	add	arg02, #40
	sub	fp, #4
	add	arg04, #28
	rdlong	arg03, arg04
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1180
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #17
	wrbyte	#1, result1
	mov	result1, #1
	jmp	#LR__1193
LR__1180
	add	fp, #4
	rdlong	arg04, fp
	mov	result1, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #127
	add	result1, #16
	wrbyte	arg04, result1
LR__1181
	add	fp, #24
	rdlong	arg01, fp
	sub	fp, #20
	rdlong	arg02, fp
	sub	fp, #4
	add	arg02, #24
	rdlong	arg02, arg02
	call	#_fatfs_cc_clst2sect
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1182
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	add	result1, #17
	wrbyte	#2, result1
	mov	result1, #2
	jmp	#LR__1193
LR__1182
	add	fp, #32
	rdlong	result1, fp
	add	fp, #12
	rdlong	local01, fp
	add	result1, local01
	sub	fp, #12
	wrlong	result1, fp
	sub	fp, #20
	rdlong	result1, fp
	shr	result1, #9
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #40
	cmp	result1, #1 wc
 if_b	jmp	#LR__1186
	add	fp, #44
	rdlong	result1, fp
	sub	fp, #4
	rdlong	arg04, fp
	add	result1, arg04
	sub	fp, #16
	rdlong	arg04, fp
	sub	fp, #24
	add	arg04, #10
	rdword	arg04, arg04
	cmp	result1, arg04 wcz
 if_be	jmp	#LR__1183
	add	fp, #24
	rdlong	result1, fp
	add	result1, #10
	rdword	result1, result1
	add	fp, #20
	rdlong	arg04, fp
	sub	result1, arg04
	sub	fp, #4
	wrlong	result1, fp
	sub	fp, #40
LR__1183
	add	fp, #24
	rdlong	arg04, fp
	add	arg04, #1
	rdbyte	arg01, arg04
	add	fp, #24
	rdlong	arg02, fp
	sub	fp, #16
	rdlong	arg03, fp
	add	fp, #8
	rdlong	arg04, fp
	sub	fp, #40
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1184
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #4
	add	local01, #17
	wrbyte	#1, local01
	mov	result1, #1
	jmp	#LR__1193
LR__1184
	add	fp, #4
	rdlong	result1, fp
	add	result1, #28
	rdlong	result1, result1
	add	fp, #28
	rdlong	local02, fp
	sub	result1, local02
	add	fp, #8
	rdlong	arg04, fp
	sub	fp, #40
	cmp	result1, arg04 wc
 if_ae	jmp	#LR__1185
	add	fp, #4
	rdlong	arg01, fp
	add	arg01, #40
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #44
	rdlong	result1, fp
	add	result1, #28
	rdlong	local03, result1
	add	fp, #28
	rdlong	arg04, fp
	sub	fp, #32
	sub	local03, arg04
	shl	local03, #9
	add	arg02, local03
	decod	arg03, #9
	call	#__system____builtin_memmove
	add	fp, #4
	rdlong	arg04, fp
	mov	result1, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #127
	add	result1, #16
	wrbyte	arg04, result1
LR__1185
	add	fp, #40
	rdlong	result1, fp
	shl	result1, #9
	sub	fp, #4
	wrlong	result1, fp
	sub	fp, #36
' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
' 					fp->flag &= (BYTE)~ 0x80 ;
' 				}
' 
' 
' 				wcnt =  ((UINT) 512 )  * cc;
' 				continue;
	jmp	#LR__1189
LR__1186
	add	fp, #4
	rdlong	local02, fp
	add	local02, #28
	rdlong	result1, local02
	add	fp, #28
	rdlong	local02, fp
	sub	fp, #32
	cmp	result1, local02 wz
 if_e	jmp	#LR__1187
	add	fp, #4
	rdlong	result1, fp
	mov	local03, result1
	sub	fp, #4
	add	local03, #20
	rdlong	local03, local03
	add	result1, #12
	rdlong	local04, result1
	mov	local05, local04
	cmp	local03, local05 wc
 if_ae	jmp	#LR__1187
	add	fp, #24
	rdlong	arg04, fp
	add	arg04, #1
	rdbyte	arg01, arg04
	sub	fp, #20
	rdlong	local06, fp
	add	local06, #40
	mov	local07, local06
	add	fp, #28
	rdlong	local08, fp
	sub	fp, #32
	mov	local09, #1
	mov	arg02, local07
	mov	arg03, local08
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	mov	local10, result1 wz
 if_e	jmp	#LR__1187
	add	fp, #4
	rdlong	local10, fp
	sub	fp, #4
	add	local10, #17
	wrbyte	#1, local10
' 				fp->fptr < fp->obj.objsize &&
' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
	mov	result1, #1
	jmp	#LR__1193
LR__1187
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #28
	rdlong	result1, fp
	sub	fp, #32
	add	arg04, #28
	wrlong	result1, arg04
LR__1188
	add	fp, #4
	rdlong	result1, fp
	add	result1, #20
	rdlong	result1, result1
	and	result1, #511
	decod	local11, #9
	sub	local11, result1
	add	fp, #32
	wrlong	local11, fp
	sub	fp, #24
	rdlong	result1, fp
	sub	fp, #12
	cmp	local11, result1 wcz
 if_a	add	fp, #12
 if_a	rdlong	local11, fp
 if_a	add	fp, #24
 if_a	wrlong	local11, fp
 if_a	sub	fp, #36
	add	fp, #4
	rdlong	local11, fp
	mov	arg01, local11
	add	arg01, #40
	add	local11, #20
	rdlong	local11, local11
	and	local11, #511
	add	arg01, local11
	add	fp, #44
	rdlong	arg02, fp
	sub	fp, #12
	rdlong	arg03, fp
	sub	fp, #36
	call	#__system____builtin_memmove
	add	fp, #4
	rdlong	result1, fp
	mov	local11, result1
	sub	fp, #4
	add	result1, #16
	rdbyte	result1, result1
	or	result1, #128
	add	local11, #16
	wrbyte	result1, local11
LR__1189
	add	fp, #12
	rdlong	local11, fp
	add	fp, #24
	rdlong	result1, fp
	sub	local11, result1
	sub	fp, #24
	wrlong	local11, fp
	add	fp, #4
	rdlong	local12, fp
	rdlong	local11, local12
	add	fp, #20
	rdlong	local13, fp
	add	local11, local13
	wrlong	local11, local12
	add	fp, #12
	rdlong	local11, fp
	sub	fp, #12
	rdlong	local14, fp
	add	local11, local14
	add	fp, #12
	wrlong	local11, fp
	sub	fp, #44
	rdlong	local15, fp
	mov	local11, local15
	add	local15, #20
	rdlong	local15, local15
	add	fp, #32
	rdlong	local16, fp
	add	local15, local16
	add	local11, #20
	wrlong	local15, local11
	sub	fp, #32
	rdlong	local17, fp
	mov	local11, local17
	mov	local18, local17
	sub	fp, #4
	add	local17, #20
	rdlong	local19, local17
	add	local18, #12
	rdlong	local20, local18
	cmp	local19, local20 wcz
 if_be	jmp	#LR__1190
	add	fp, #4
	rdlong	local05, fp
	sub	fp, #4
	mov	local03, local05
	add	local03, #20
	rdlong	local04, local03
	sub	local03, #20
	mov	local21, local04
	jmp	#LR__1191
LR__1190
	add	fp, #4
	rdlong	local07, fp
	sub	fp, #4
	mov	local10, local07
	add	local10, #12
	rdlong	local08, local10
	sub	local10, #12
	mov	local21, local08
LR__1191
	add	local11, #12
	wrlong	local21, local11
	jmp	#LR__1173
LR__1192
	add	fp, #4
	rdlong	local12, fp
	mov	local01, local12
	sub	fp, #4
	add	local12, #16
	rdbyte	local11, local12
	or	local11, #64
	add	local01, #16
	wrbyte	local11, local01
' 
' 
' 
' 
' 
' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
' 		fp->flag |=  0x80 ;
' 
' 	}
' 
' 	fp->flag |=  0x40 ;
' 
' 	return FR_OK ;
	mov	result1, #0
LR__1193
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_write_ret
	ret

_fatfs_cc_f_sync
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1203
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	test	arg04, #64 wz
 if_e	jmp	#LR__1202
	add	fp, #4
	rdlong	arg04, fp
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	test	arg04, #128 wz
 if_e	jmp	#LR__1200
	add	fp, #12
	rdlong	arg04, fp
	add	arg04, #1
	rdbyte	arg01, arg04
	sub	fp, #8
	rdlong	arg04, fp
	mov	arg02, arg04
	add	arg02, #40
	sub	fp, #4
	add	arg04, #28
	rdlong	arg03, arg04
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1204
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #127
	add	arg03, #16
	wrbyte	arg04, arg03
LR__1200
	call	#_fatfs_cc__get_fattime
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg01, fp
	sub	fp, #8
	rdlong	arg04, fp
	sub	fp, #4
	add	arg04, #32
	rdlong	arg02, arg04
	call	#_fatfs_cc_move_window
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1201
	add	fp, #4
	rdlong	arg04, fp
	add	arg04, #36
	rdlong	arg04, arg04
	add	fp, #16
	wrlong	arg04, fp
	mov	arg03, arg04
	add	arg03, #11
	rdbyte	arg03, arg03
	or	arg03, #32
	add	arg04, #11
	wrbyte	arg03, arg04
	sub	fp, #16
	rdlong	arg04, fp
	rdlong	arg01, arg04
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	add	arg04, #8
	rdlong	arg03, arg04
	call	#_fatfs_cc_st_clust
	add	fp, #20
	rdlong	arg01, fp
	add	arg01, #28
	sub	fp, #16
	rdlong	arg04, fp
	add	arg04, #12
	rdlong	arg02, arg04
	wrlong	arg02, arg01
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, #22
	sub	fp, #4
	rdlong	arg02, fp
	wrlong	arg02, arg01
	add	fp, #4
	rdlong	arg01, fp
	add	arg01, #18
	wrword	#0, arg01
	sub	fp, #8
	rdlong	arg04, fp
	add	arg04, #3
	wrbyte	#1, arg04
	rdlong	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #191
	add	arg03, #16
	wrbyte	arg04, arg03
LR__1201
LR__1202
LR__1203
' 					dir = fp->dir_ptr;
' 					dir[ 11 ] |=  0x20 ;
' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
' 					st_dword(dir +  22 , tm);
' 					st_word(dir +  18 , 0);
' 					fs->wflag = 1;
' 					res = sync_fs(fs);
' 					fp->flag &= (BYTE)~ 0x40 ;
' 				}
' 			}
' 		}
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
LR__1204
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_sync_ret
	ret

_fatfs_cc_f_close
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	sub	fp, #4
	call	#_fatfs_cc_f_sync
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1210
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_e	add	fp, #4
 if_e	rdlong	local01, fp
 if_e	sub	fp, #4
 if_e	wrlong	#0, local01
LR__1210
' 
' 
' 
' 
' 			fp->obj.fs = 0;
' #line 4192 "ff.c"
' 		}
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_close_ret
	ret

_fatfs_cc_f_lseek
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #36
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_validate
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1220
	add	fp, #4
	rdlong	arg04, fp
	add	arg04, #17
	rdbyte	arg04, arg04
	add	fp, #8
	wrlong	arg04, fp
	sub	fp, #12
LR__1220
	add	fp, #12
	rdlong	arg04, fp wz
	sub	fp, #12
 if_ne	add	fp, #12
 if_ne	rdlong	result1, fp
 if_ne	sub	fp, #12
 if_ne	jmp	#LR__1243
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #8
	add	arg04, #12
	rdlong	arg04, arg04
	cmp	arg03, arg04 wcz
 if_be	jmp	#LR__1221
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #16
	rdbyte	arg03, arg03
	getbyte	arg03, arg03, #0
	test	arg03, #2 wz
 if_ne	jmp	#LR__1221
	add	fp, #4
	rdlong	arg03, fp
	add	arg03, #12
	rdlong	arg03, arg03
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
LR__1221
	add	fp, #4
	rdlong	arg03, fp
	add	arg03, #20
	rdlong	arg03, arg03
	add	fp, #28
	wrlong	arg03, fp
	sub	fp, #28
	rdlong	arg03, fp
	add	fp, #24
	wrlong	#0, fp
	add	arg03, #20
	wrlong	#0, arg03
	sub	fp, #20
	rdlong	arg03, fp
	sub	fp, #8
	cmp	arg03, #1 wc
 if_b	jmp	#LR__1237
	add	fp, #16
	rdlong	arg03, fp
	add	arg03, #10
	rdword	arg04, arg03
	shl	arg04, #9
	add	fp, #8
	wrlong	arg04, fp
	add	fp, #8
	rdlong	arg04, fp
	sub	fp, #32
	cmp	arg04, #1 wc
 if_b	jmp	#LR__1222
	add	fp, #8
	rdlong	arg04, fp
	sub	arg04, #1
	add	fp, #16
	rdlong	arg03, fp
	qdiv	arg04, arg03
	add	fp, #8
	rdlong	result1, fp
	sub	result1, #1
	getqx	arg04
	qdiv	result1, arg03
	sub	fp, #32
	getqx	arg03
	cmp	arg04, arg03 wc
 if_b	jmp	#LR__1222
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #28
	rdlong	result1, fp
	sub	result1, #1
	sub	fp, #8
	rdlong	arg04, fp
	sub	arg04, #1
	andn	result1, arg04
	add	arg03, #20
	wrlong	result1, arg03
	sub	fp, #16
	rdlong	arg03, fp
	sub	fp, #4
	rdlong	arg04, fp
	add	arg04, #20
	rdlong	arg04, arg04
	sub	arg03, arg04
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	arg03, #24
	rdlong	arg03, arg03
	add	fp, #16
	wrlong	arg03, fp
	sub	fp, #20
	jmp	#LR__1226
LR__1222
	add	fp, #4
	rdlong	arg03, fp
	add	arg03, #8
	rdlong	arg03, arg03 wz
	add	fp, #16
	wrlong	arg03, fp
	sub	fp, #20
 if_ne	jmp	#LR__1225
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #1 wz
 if_ne	jmp	#LR__1223
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#2, arg03
	mov	result1, #2
	jmp	#LR__1243
LR__1223
	add	fp, #20
	rdlong	result1, fp
	sub	fp, #20
	cmp	result1, ##-1 wz
 if_ne	jmp	#LR__1224
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#1, arg03
	mov	result1, #1
	jmp	#LR__1243
LR__1224
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #16
	rdlong	arg04, fp
	sub	fp, #20
	add	arg03, #8
	wrlong	arg04, arg03
LR__1225
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #16
	rdlong	arg04, fp
	sub	fp, #20
	add	arg03, #24
	wrlong	arg04, arg03
LR__1226
	add	fp, #20
	rdlong	arg03, fp wz
	sub	fp, #20
 if_e	jmp	#LR__1236
' 				while (ofs > bcs) {
LR__1227
	add	fp, #8
	rdlong	arg04, fp
	add	fp, #16
	rdlong	arg03, fp
	sub	fp, #24
	cmp	arg04, arg03 wcz
 if_be	jmp	#LR__1233
	add	fp, #8
	rdlong	arg04, fp
	add	fp, #16
	rdlong	arg03, fp
	sub	arg04, arg03
	sub	fp, #16
	wrlong	arg04, fp
	sub	fp, #4
	rdlong	arg04, fp
	mov	result1, arg04
	add	arg04, #20
	rdlong	arg04, arg04
	add	fp, #20
	rdlong	arg03, fp
	add	arg04, arg03
	add	result1, #20
	wrlong	arg04, result1
	sub	fp, #20
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #16
	rdbyte	arg03, arg03
	test	arg03, #2 wz
 if_e	jmp	#LR__1228
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_create_chain
	add	fp, #20
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #20
 if_e	add	fp, #8
 if_e	wrlong	#0, fp
 if_e	sub	fp, #8
' 							ofs = 0; break;
 if_e	jmp	#LR__1233
	jmp	#LR__1229
LR__1228
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #16
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_get_fat
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
LR__1229
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #20
	cmp	arg03, ##-1 wz
 if_ne	jmp	#LR__1230
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#1, arg03
	mov	result1, #1
	jmp	#LR__1243
LR__1230
	add	fp, #20
	rdlong	arg03, fp
	sub	fp, #20
	cmp	arg03, #2 wc
 if_b	jmp	#LR__1231
	add	fp, #16
	rdlong	arg04, fp
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #20
	add	arg04, #24
	rdlong	arg04, arg04
	cmp	arg03, arg04 wc
 if_b	jmp	#LR__1232
LR__1231
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#2, arg03
	mov	result1, #2
	jmp	#LR__1243
LR__1232
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #16
	rdlong	arg03, fp
	sub	fp, #20
	add	arg04, #24
	wrlong	arg03, arg04
	jmp	#LR__1227
LR__1233
	add	fp, #4
	rdlong	arg03, fp
	mov	arg01, arg03
	add	arg03, #20
	rdlong	arg02, arg03
	add	fp, #4
	rdlong	arg03, fp
	add	arg02, arg03
	add	arg01, #20
	wrlong	arg02, arg01
	rdlong	arg03, fp
	sub	fp, #8
	test	arg03, #511 wz
 if_e	jmp	#LR__1235
	add	fp, #16
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #20
	call	#_fatfs_cc_clst2sect
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1234
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#2, arg03
	mov	result1, #2
	jmp	#LR__1243
LR__1234
	add	fp, #28
	rdlong	arg04, fp
	sub	fp, #20
	rdlong	arg03, fp
	shr	arg03, #9
	add	arg04, arg03
	add	fp, #20
	wrlong	arg04, fp
	sub	fp, #28
LR__1235
LR__1236
LR__1237
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	sub	fp, #4
	add	arg03, #20
	rdlong	arg03, arg03
	add	arg04, #12
	rdlong	arg04, arg04
	cmp	arg03, arg04 wcz
 if_be	jmp	#LR__1238
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	add	arg04, #20
	rdlong	arg04, arg04
	add	arg03, #12
	wrlong	arg04, arg03
	rdlong	arg04, fp
	mov	arg03, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	or	arg04, #64
	add	arg03, #16
	wrbyte	arg04, arg03
LR__1238
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #20
	rdlong	arg03, arg03
	test	arg03, #511 wz
 if_e	jmp	#LR__1242
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #24
	rdlong	arg03, fp
	sub	fp, #28
	add	arg04, #28
	rdlong	arg04, arg04
	cmp	arg03, arg04 wz
 if_e	jmp	#LR__1242
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #16
	rdbyte	arg03, arg03
	test	arg03, #128 wz
 if_e	jmp	#LR__1240
	add	fp, #16
	rdlong	arg03, fp
	add	arg03, #1
	rdbyte	arg01, arg03
	sub	fp, #12
	rdlong	arg03, fp
	mov	arg02, arg03
	add	arg02, #40
	sub	fp, #4
	add	arg03, #28
	rdlong	arg03, arg03
	mov	arg04, #1
	call	#_fatfs_cc_disk_write
	cmp	result1, #0 wz
 if_e	jmp	#LR__1239
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#1, arg03
	mov	result1, #1
	jmp	#LR__1243
LR__1239
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	sub	fp, #4
	add	arg04, #16
	rdbyte	arg04, arg04
	and	arg04, #127
	add	arg03, #16
	wrbyte	arg04, arg03
LR__1240
	add	fp, #16
	rdlong	arg03, fp
	add	arg03, #1
	rdbyte	arg01, arg03
	sub	fp, #12
	rdlong	arg02, fp
	add	arg02, #40
	add	fp, #24
	rdlong	arg03, fp
	sub	fp, #28
	mov	arg04, #1
	call	#_fatfs_cc_disk_read
	cmp	result1, #0 wz
 if_e	jmp	#LR__1241
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #17
	wrbyte	#1, arg03
	mov	result1, #1
	jmp	#LR__1243
LR__1241
	add	fp, #4
	rdlong	arg04, fp
	add	fp, #24
	rdlong	arg03, fp
	sub	fp, #28
	add	arg04, #28
	wrlong	arg03, arg04
LR__1242
' 
' 			fp->sect = nsect;
' 		}
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1243
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_lseek_ret
	ret

_fatfs_cc_f_opendir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg03, fp wz
	sub	fp, #4
 if_e	mov	result1, #9
 if_e	jmp	#LR__1256
	add	fp, #8
	mov	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1255
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #12
	rdlong	result1, fp
	wrlong	result1, arg03
	sub	fp, #12
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1254
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #43
	rdbyte	arg03, arg03
	test	arg03, #128 wz
 if_ne	jmp	#LR__1252
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #4
	add	arg03, #6
	rdbyte	arg03, arg03
	test	arg03, #16 wz
 if_e	jmp	#LR__1250
	add	fp, #4
	rdlong	arg03, fp
	mov	local01, arg03
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #16
	add	arg03, #28
	rdlong	arg02, arg03
	call	#_fatfs_cc_ld_clust
	add	local01, #8
	wrlong	result1, local01
	jmp	#LR__1251
LR__1250
	add	fp, #12
	wrlong	#5, fp
	sub	fp, #12
LR__1251
LR__1252
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1253
	add	fp, #4
	rdlong	local01, fp
	add	fp, #12
	rdlong	arg03, fp
	add	arg03, #6
	rdword	arg03, arg03
	add	local01, #4
	wrword	arg03, local01
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1253
LR__1254
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#5, fp
 if_e	sub	fp, #12
LR__1255
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	add	fp, #4
 if_ne	rdlong	local01, fp
 if_ne	sub	fp, #4
 if_ne	wrlong	#0, local01
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1256
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_opendir_ret
	ret

_fatfs_cc_f_closedir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_validate
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_e	add	fp, #4
 if_e	rdlong	result1, fp
 if_e	sub	fp, #4
 if_e	wrlong	#0, result1
' 
' 
' 
' 
' 		dp->obj.fs = 0;
' #line 4633 "ff.c"
' 	}
' 	return res;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_closedir_ret
	ret

_fatfs_cc_f_readdir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_validate
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1263
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1260
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	jmp	#LR__1262
LR__1260
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_read
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdlong	result1, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1261
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_get_fileinfo
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	mov	arg02, #0
	call	#_fatfs_cc_dir_next
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #4 wz
 if_e	add	fp, #12
 if_e	wrlong	#0, fp
 if_e	sub	fp, #12
LR__1261
LR__1262
LR__1263
' 			}
' 			;
' 		}
' 	}
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_readdir_ret
	ret

_fatfs_cc_f_stat
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #64
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	mov	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #0
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1273
	add	fp, #16
	mov	arg01, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1272
	add	fp, #59
	rdbyte	result1, fp
	sub	fp, #59
	test	result1, #128 wz
 if_ne	add	fp, #12
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #12
 if_ne	jmp	#LR__1271
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_e	jmp	#LR__1270
	add	fp, #16
	mov	arg01, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_get_fileinfo
LR__1270
LR__1271
LR__1272
LR__1273
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_stat_ret
	ret

_fatfs_cc_f_unlink
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #116
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #104
	wrlong	#0, fp
	sub	fp, #104
	mov	arg01, fp
	add	fp, #108
	mov	arg02, fp
	sub	fp, #112
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1288
	add	fp, #112
	rdlong	arg03, fp
	sub	fp, #100
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__1287
	add	fp, #55
	rdbyte	result1, fp
	sub	fp, #55
	test	result1, #128 wz
 if_ne	add	fp, #8
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #8
 if_ne	jmp	#LR__1280
	add	fp, #18
	rdbyte	result1, fp
	sub	fp, #18
	test	result1, #1 wz
 if_ne	add	fp, #8
 if_ne	wrlong	#7, fp
 if_ne	sub	fp, #8
LR__1280
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1283
	add	fp, #112
	rdlong	arg01, fp
	sub	fp, #72
	rdlong	arg02, fp
	sub	fp, #40
	call	#_fatfs_cc_ld_clust
	add	fp, #108
	wrlong	result1, fp
	sub	fp, #90
	rdbyte	result1, fp
	sub	fp, #18
	test	result1, #16 wz
 if_e	jmp	#LR__1282
	add	fp, #112
	rdlong	result1, fp
	sub	fp, #52
	wrlong	result1, fp
	add	fp, #48
	rdlong	arg03, fp
	sub	fp, #40
	wrlong	arg03, fp
	sub	fp, #8
	mov	arg01, fp
	sub	fp, #60
	mov	arg02, #0
	call	#_fatfs_cc_dir_sdi
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1281
	add	fp, #60
	mov	arg01, fp
	sub	fp, #60
	mov	arg02, #0
	call	#_fatfs_cc_dir_read
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	cmp	result1, #4 wz
 if_e	add	fp, #8
 if_e	wrlong	#0, fp
 if_e	sub	fp, #8
LR__1281
LR__1282
LR__1283
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1286
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_dir_remove
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1284
	add	fp, #108
	rdlong	result1, fp wz
	sub	fp, #108
 if_e	jmp	#LR__1284
	add	fp, #12
	mov	arg01, fp
	add	fp, #96
	rdlong	arg02, fp
	sub	fp, #108
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__1284
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1285
	add	fp, #112
	rdlong	arg01, fp
	sub	fp, #112
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__1285
LR__1286
LR__1287
LR__1288
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_unlink_ret
	ret

_fatfs_cc_f_mkdir
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #92
	add	fp, #4
	wrlong	arg01, fp
	mov	arg01, fp
	add	fp, #72
	mov	arg02, fp
	sub	fp, #76
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1295
	add	fp, #76
	rdlong	arg03, fp
	sub	fp, #64
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #8
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_e	add	fp, #8
 if_e	wrlong	#8, fp
 if_e	sub	fp, #8
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	cmp	result1, #4 wz
 if_ne	jmp	#LR__1294
	add	fp, #76
	rdlong	arg03, fp
	sub	fp, #16
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #60
	mov	arg02, #0
	call	#_fatfs_cc_create_chain
	add	fp, #80
	wrlong	result1, fp
	sub	fp, #72
	wrlong	#0, fp
	add	fp, #72
	rdlong	result1, fp wz
	sub	fp, #80
 if_e	add	fp, #8
 if_e	wrlong	#7, fp
 if_e	sub	fp, #8
	add	fp, #80
	rdlong	result1, fp
	sub	fp, #80
	cmp	result1, #1 wz
 if_e	add	fp, #8
 if_e	wrlong	#2, fp
 if_e	sub	fp, #8
	add	fp, #80
	rdlong	arg03, fp
	sub	fp, #80
	cmp	arg03, ##-1 wz
 if_e	add	fp, #8
 if_e	wrlong	#1, fp
 if_e	sub	fp, #8
	call	#_fatfs_cc__get_fattime
	add	fp, #88
	wrlong	result1, fp
	sub	fp, #80
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1291
	add	fp, #76
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #80
	call	#_fatfs_cc_dir_clear
	add	fp, #8
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #8
 if_ne	jmp	#LR__1290
	add	fp, #76
	rdlong	arg01, fp
	sub	fp, #76
	add	arg01, #52
	mov	arg02, #32
	mov	arg03, #11
	call	#\builtin_bytefill_
	add	fp, #76
	rdlong	result1, fp
	add	result1, #52
	wrbyte	#46, result1
	rdlong	arg03, fp
	add	arg03, #63
	wrbyte	#16, arg03
	rdlong	arg01, fp
	add	arg01, #74
	add	fp, #12
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #12
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #52
	add	fp, #4
	rdlong	arg03, fp
	sub	fp, #80
	call	#_fatfs_cc_st_clust
	add	fp, #76
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg01, #84
	sub	fp, #76
	add	arg02, #52
	mov	arg03, #32
	call	#__system____builtin_memmove
	add	fp, #76
	rdlong	arg03, fp
	add	arg03, #85
	wrbyte	#46, arg03
	sub	fp, #56
	rdlong	arg03, fp
	add	fp, #64
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg02, fp
	mov	arg01, arg02
	add	arg02, #84
	sub	fp, #76
	call	#_fatfs_cc_st_clust
	add	fp, #76
	rdlong	arg03, fp
	add	arg03, #3
	wrbyte	#1, arg03
	sub	fp, #64
	mov	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc_dir_register
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
LR__1290
LR__1291
	add	fp, #8
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1292
	add	fp, #40
	rdlong	arg01, fp
	add	arg01, #22
	add	fp, #48
	rdlong	arg02, fp
	wrlong	arg02, arg01
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #36
	rdlong	arg02, fp
	add	fp, #40
	rdlong	arg03, fp
	sub	fp, #80
	call	#_fatfs_cc_st_clust
	add	fp, #40
	rdlong	result1, fp
	add	result1, #11
	wrbyte	#16, result1
	add	fp, #36
	rdlong	result1, fp
	add	result1, #3
	wrbyte	#1, result1
	sub	fp, #68
	rdlong	result1, fp wz
	sub	fp, #8
 if_ne	jmp	#LR__1293
	add	fp, #76
	rdlong	arg01, fp
	sub	fp, #76
	call	#_fatfs_cc_sync_fs
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #8
	jmp	#LR__1293
LR__1292
	add	fp, #60
	mov	arg01, fp
	add	fp, #20
	rdlong	arg02, fp
	sub	fp, #80
	mov	arg03, #0
	call	#_fatfs_cc_remove_chain
LR__1293
LR__1294
LR__1295
' 				remove_chain(&sobj, dcl, 0);
' 			}
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #8
	rdlong	result1, fp
	sub	fp, #8
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_mkdir_ret
	ret

_fatfs_cc_f_rename
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #156
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #8
	call	#_fatfs_cc_get_ldnumber
	add	fp, #4
	mov	arg01, fp
	add	fp, #108
	mov	arg02, fp
	sub	fp, #112
	mov	arg03, #2
	call	#_fatfs_cc_mount_volume
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1313
	add	fp, #112
	rdlong	arg03, fp
	sub	fp, #96
	wrlong	arg03, fp
	mov	arg01, fp
	sub	fp, #12
	rdlong	arg02, fp
	sub	fp, #4
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #12
 if_ne	jmp	#LR__1300
	add	fp, #59
	rdbyte	result1, fp
	sub	fp, #59
	test	result1, #160 wz
 if_ne	add	fp, #12
 if_ne	wrlong	#6, fp
 if_ne	sub	fp, #12
LR__1300
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1312
	add	fp, #116
	mov	arg01, fp
	sub	fp, #72
	rdlong	arg02, fp
	sub	fp, #44
	mov	arg03, #32
	call	#__system____builtin_memmove
	add	fp, #64
	mov	arg01, fp
	sub	fp, #48
	mov	arg02, fp
	sub	fp, #16
	mov	arg03, #48
	call	#__system____builtin_memmove
	add	fp, #64
	mov	arg01, fp
	sub	fp, #56
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_follow_path
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1303
	add	fp, #72
	rdlong	result1, fp
	sub	fp, #48
	rdlong	arg03, fp
	sub	fp, #24
	cmp	result1, arg03 wz
 if_ne	jmp	#LR__1301
	add	fp, #80
	rdlong	result1, fp
	sub	fp, #48
	rdlong	arg03, fp
	sub	fp, #32
	cmp	result1, arg03 wz
 if_e	mov	local01, #4
 if_e	jmp	#LR__1302
LR__1301
	mov	local01, #8
LR__1302
	add	fp, #12
	wrlong	local01, fp
	sub	fp, #12
LR__1303
	add	fp, #12
	rdlong	local01, fp
	sub	fp, #12
	cmp	local01, #4 wz
 if_ne	jmp	#LR__1309
	add	fp, #64
	mov	arg01, fp
	sub	fp, #64
	call	#_fatfs_cc_dir_register
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1308
	add	fp, #92
	rdlong	arg01, fp
	add	fp, #56
	wrlong	arg01, fp
	add	arg01, #13
	sub	fp, #32
	mov	arg02, fp
	sub	fp, #116
	add	arg02, #13
	mov	arg03, #19
	call	#__system____builtin_memmove
	add	fp, #148
	rdlong	local01, fp
	sub	fp, #21
	rdbyte	result1, fp
	add	local01, #11
	wrbyte	result1, local01
	add	fp, #21
	rdlong	local01, fp
	sub	fp, #148
	add	local01, #11
	rdbyte	local01, local01
	test	local01, #16 wz
 if_ne	jmp	#LR__1304
	add	fp, #148
	rdlong	result1, fp
	mov	local01, result1
	sub	fp, #148
	add	result1, #11
	rdbyte	result1, result1
	or	result1, #32
	add	local01, #11
	wrbyte	result1, local01
LR__1304
	add	fp, #112
	rdlong	local01, fp
	add	local01, #3
	wrbyte	#1, local01
	add	fp, #36
	rdlong	local01, fp
	sub	fp, #148
	add	local01, #11
	rdbyte	local01, local01
	test	local01, #16 wz
 if_e	jmp	#LR__1307
	add	fp, #24
	rdlong	arg03, fp
	add	fp, #48
	rdlong	local01, fp
	sub	fp, #72
	cmp	arg03, local01 wz
 if_e	jmp	#LR__1307
	add	fp, #112
	rdlong	arg01, fp
	mov	local01, arg01
	add	fp, #36
	rdlong	arg02, fp
	sub	fp, #148
	call	#_fatfs_cc_ld_clust
	mov	arg02, result1
	mov	arg01, local01
	call	#_fatfs_cc_clst2sect
	add	fp, #152
	wrlong	result1, fp
	cmps	result1, #0 wz
	sub	fp, #152
 if_e	add	fp, #12
 if_e	wrlong	#2, fp
 if_e	sub	fp, #12
 if_e	jmp	#LR__1306
	add	fp, #112
	rdlong	arg01, fp
	add	fp, #40
	rdlong	arg02, fp
	sub	fp, #152
	call	#_fatfs_cc_move_window
	add	fp, #12
	wrlong	result1, fp
	add	fp, #100
	rdlong	local01, fp
	add	local01, #84
	add	fp, #36
	wrlong	local01, fp
	sub	fp, #136
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1305
	add	fp, #148
	rdlong	local01, fp
	sub	fp, #148
	add	local01, #1
	rdbyte	local01, local01
	cmp	local01, #46 wz
 if_ne	jmp	#LR__1305
	add	fp, #112
	rdlong	arg01, fp
	add	fp, #36
	rdlong	arg02, fp
	sub	fp, #76
	rdlong	arg03, fp
	sub	fp, #72
	call	#_fatfs_cc_st_clust
	add	fp, #112
	rdlong	local01, fp
	sub	fp, #112
	add	local01, #3
	wrbyte	#1, local01
LR__1305
LR__1306
LR__1307
LR__1308
LR__1309
	add	fp, #12
	rdlong	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1311
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	call	#_fatfs_cc_dir_remove
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	cmp	result1, #0 wz
 if_ne	jmp	#LR__1310
	add	fp, #112
	rdlong	arg01, fp
	sub	fp, #112
	call	#_fatfs_cc_sync_fs
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1310
LR__1311
LR__1312
LR__1313
' 					res = sync_fs(fs);
' 				}
' 			}
' 
' 		}
' 		;
' 	}
' 
' 	return res ;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_f_rename_ret
	ret

_fatfs_cc_time
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	mov	arg01, fp
	sub	fp, #8
	mov	arg02, #0
	call	#_fatfs_cc_gettimeofday
	add	fp, #8
	rdlong	result1, fp
	add	fp, #8
	wrlong	result1, fp
	sub	fp, #12
	rdlong	result1, fp wz
	sub	fp, #4
 if_e	jmp	#LR__1320
	add	fp, #4
	rdlong	result1, fp
	add	fp, #12
	rdlong	arg02, fp
	sub	fp, #16
	wrlong	arg02, result1
LR__1320
'         *tp = now;
'     return now;
	add	fp, #16
	rdlong	result1, fp
	sub	fp, #16
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_time_ret
	ret

_fatfs_cc_mktime
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	add	local01, #20
	rdlong	arg01, local01
	sub	local01, #20
	cmps	arg01, #70 wc
'                 return (time_t) -1;
 if_b	neg	result1, #1
 if_b	jmp	#LR__1334
	mov	local02, ##1900
	add	local01, #20
	rdlong	result1, local01
	add	local02, result1
	sub	local01, #8
	rdlong	local03, local01
	sub	local03, #1
	add	local01, #4
	rdlong	arg01, local01
	sub	local01, #16
	shl	arg01, #2
	add	ptr__fatfs_cc_dat__, ##1224
	add	arg01, ptr__fatfs_cc_dat__
	rdlong	result1, arg01
	add	local03, result1
	mov	arg01, local02
	sub	ptr__fatfs_cc_dat__, ##1224
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_e	jmp	#LR__1330
	mov	local04, #0
	add	local01, #16
	rdlong	result1, local01
	sub	local01, #16
	cmps	result1, #2 wc
 if_ae	mov	local04, #1
	jmp	#LR__1331
LR__1330
	mov	local04, #0
LR__1331
	add	local01, #4
	rdlong	result1, local01
	sub	local01, #4
	rdlong	local05, local01
	add	local01, #8
	rdlong	arg01, local01
	qmul	arg01, ##3600
	add	local03, local04
	mov	local04, result1
	shl	local04, #4
	sub	local04, result1
	shl	local04, #2
	add	local05, local04
	sub	local01, #8
	getqx	local04
	qmul	local03, ##86400
	add	local05, local04
	mov	local03, local02
	sub	local03, ##1970
	getqx	local04
	qmul	local03, ##31536000
	add	local05, local04
	mov	local03, local02
	sub	local03, ##1969
	abs	local06, local03 wc
	shr	local06, #2
	negc	local06, local06
	cmps	local02, ##2001 wc
	getqx	local04
	add	local05, local04
 if_b	jmp	#LR__1332
	sub	local02, ##2000
	abs	local04, local02 wc
	qdiv	local04, #100
	getqx	local04
	sumnc	local06, local04
LR__1332
	qmul	local06, ##86400
	getqx	local06
	add	local05, local06
	call	#_fatfs_cc__tzset
	add	ptr__fatfs_cc_dat__, ##1172
	rdlong	local06, ptr__fatfs_cc_dat__
	add	local05, local06
	add	ptr__fatfs_cc_dat__, #104
	rdlong	local03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1276
	cmp	local03, #1 wz
 if_ne	jmp	#LR__1333
	mov	arg01, local01
	call	#_fatfs_cc___indst
	cmp	result1, #0 wz
 if_ne	sub	local05, ##3600
LR__1333
'                 s -=  (3600L) ;
' 
'         return s;
	mov	result1, local05
LR__1334
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_mktime_ret
	ret

_fatfs_cc__gmtime_r
	mov	COUNT_, #3
	call	#pushregs_
	rdlong	local01, arg01
	qdiv	local01, ##86400
	getqx	result1
	add	result1, #4
	qdiv	result1, #7
	add	arg02, #24
	cmp	local01, ##1325376000 wc
 if_ae	sub	local01, ##1325376000
 if_ae	mov	local02, ##2012
 if_b	mov	local02, ##1970
' 	  year = 1970;
' 	}
' 
' 	for(;;) {
	getqy	result1
	wrlong	result1, arg02
	sub	arg02, #24
LR__1340
	mov	arg01, local02
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_ne	mov	local03, ##31622400
 if_e	mov	local03, ##31536000
	cmp	local01, local03 wc
' 	    break;
 if_ae	add	local02, #1
 if_ae	sub	local01, local03
 if_ae	jmp	#LR__1340
	qdiv	local01, ##86400
	mov	local03, local02
	sub	local03, ##1900
	add	arg02, #20
	wrlong	local03, arg02
	add	arg02, #8
	mov	arg01, local02
	getqx	local02
	wrlong	local02, arg02
	sub	arg02, #28
	call	#_fatfs_cc__is_leap_year
	cmp	result1, #0 wz
 if_ne	mov	local03, #29
 if_e	mov	local03, #28
	add	ptr__fatfs_cc_dat__, ##1180
	wrlong	local03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1180
' 
'         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
'         for (i = 0; mday >= days_per_mth[i]; i++)
	mov	arg01, #0
	callpa	#(@LR__1342-@LR__1341)>>2,fcache_load_ptr_
LR__1341
	mov	local03, arg01
	shl	local03, #2
	add	ptr__fatfs_cc_dat__, ##1176
	add	local03, ptr__fatfs_cc_dat__
	rdlong	local03, local03
	cmps	local02, local03 wc
	sub	ptr__fatfs_cc_dat__, ##1176
 if_b	jmp	#LR__1343
	mov	local03, arg01
	shl	local03, #2
	add	ptr__fatfs_cc_dat__, ##1176
	add	local03, ptr__fatfs_cc_dat__
	rdlong	local03, local03
	sub	local02, local03
	add	arg01, #1
	sub	ptr__fatfs_cc_dat__, ##1176
	jmp	#LR__1341
LR__1342
LR__1343
	qdiv	local01, ##86400
	add	arg02, #16
	wrlong	arg01, arg02
	add	local02, #1
	sub	arg02, #4
	wrlong	local02, arg02
	getqy	local01
	qdiv	local01, ##3600
	getqx	local03
	qdiv	local01, ##3600
	sub	arg02, #4
	wrlong	local03, arg02
	getqy	local01
	qdiv	local01, #60
	getqx	local03
	qdiv	local01, #60
	sub	arg02, #4
	wrlong	local03, arg02
	sub	arg02, #4
'         stm->tm_isdst = 0;
' 
' ;
'         return stm;
	mov	result1, arg02
	getqy	local03
	wrlong	local03, arg02
	add	arg02, #32
	wrlong	#0, arg02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__gmtime_r_ret
	ret

_fatfs_cc__tzset
	mov	arg01, ##@LR__1628
	call	#_fatfs_cc_getenv
	mov	arg01, result1
	add	ptr__fatfs_cc_dat__, ##1276
	mov	arg02, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1276
	call	#_fatfs_cc___tzoffset
	add	ptr__fatfs_cc_dat__, ##1172
	wrlong	result1, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1172
_fatfs_cc__tzset_ret
	ret

_fatfs_cc_getenv
	mov	COUNT_, #6
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg01
	callpa	#(@LR__1351-@LR__1350)>>2,fcache_load_ptr_
LR__1350
	rdbyte	result1, local02 wz
 if_ne	add	local02, #1
 if_ne	jmp	#LR__1350
LR__1351
	sub	local02, arg01
	mov	result1, local02
	add	ptr__fatfs_cc_dat__, ##1356
	rdlong	arg03, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, ##1356
'             return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1354
' 
' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
	add	ptr__fatfs_cc_dat__, ##1356
	rdlong	local03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1356
LR__1352
	rdlong	local04, local03 wz
 if_e	jmp	#LR__1353
	mov	arg01, local04
	mov	arg02, local01
	mov	arg03, local02
	call	#_fatfs_cc_strncmp
	cmp	result1, #0 wz
 if_e	mov	local05, local02
 if_e	add	local05, local04
 if_e	rdbyte	local06, local05
 if_e	cmp	local06, #61 wz
' 			return name+len+1;
 if_e	add	local04, local02
 if_e	add	local04, #1
 if_e	mov	result1, local04
 if_e	jmp	#LR__1354
	add	local03, #4
	jmp	#LR__1352
LR__1353
' 	}
' 	return 0;
	mov	result1, #0
LR__1354
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_getenv_ret
	ret

_fatfs_cc__get_fattime
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #52
	mov	arg01, #0
	call	#_fatfs_cc_time
	add	fp, #4
	wrlong	result1, fp
	mov	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc__gmtime_r
	add	fp, #36
	rdlong	arg02, fp
	sub	arg02, #80
	shl	arg02, #9
	sub	fp, #4
	rdlong	result1, fp
	add	result1, #1
	shl	result1, #5
	or	arg02, result1
	sub	fp, #4
	rdlong	result1, fp
	or	arg02, result1
	sub	fp, #20
	wrlong	arg02, fp
	add	fp, #16
	rdlong	arg02, fp
	shl	arg02, #11
	sub	fp, #4
	rdlong	result1, fp
	shl	result1, #5
	or	arg02, result1
	sub	fp, #4
	rdlong	result1, fp
	or	arg02, result1
	sub	fp, #4
	wrlong	arg02, fp
' 
'     now = time(0);
'     _gmtime_r (&now, &date);
'     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
'     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
'     return (ffdate << 16) | fftime;
	sub	fp, #4
	rdlong	result1, fp
	shl	result1, #16
	sub	fp, #8
	or	result1, arg02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc__get_fattime_ret
	ret

_fatfs_cc_unixtime_0452
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #52
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg02, fp
	shr	arg02, #9
	and	arg02, #127
	mov	result1, #80
	add	result1, arg02
	add	fp, #32
	wrlong	result1, fp
	sub	fp, #32
	rdlong	result1, fp
	shr	result1, #5
	getnib	result1, result1, #0
	sub	result1, #1
	add	fp, #28
	wrlong	result1, fp
	sub	fp, #28
	rdlong	result1, fp
	and	result1, #31
	add	fp, #24
	wrlong	result1, fp
	sub	fp, #20
	rdlong	result1, fp
	shr	result1, #11
	and	result1, #31
	add	fp, #16
	wrlong	result1, fp
	sub	fp, #16
	rdlong	result1, fp
	shr	result1, #5
	and	result1, #63
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
	rdlong	arg02, fp
	and	arg02, #31
	shl	arg02, #1
	add	fp, #8
	wrlong	arg02, fp
	mov	arg01, fp
	sub	fp, #16
	call	#_fatfs_cc_mktime
	add	fp, #12
	wrlong	result1, fp
' 
'     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
'     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
'     date.tm_mday = (dosdate & 0x1f);
'     date.tm_hour = (dostime >> 11) & 0x1f;
'     date.tm_min = (dostime >> 5) & 0x3f;
'     date.tm_sec = (dostime & 0x1f) << 1;
' 
'     t = mktime(&date);
' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     return t;
	sub	fp, #12
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_unixtime_0452_ret
	ret

_fatfs_cc__set_dos_error_0454
	mov	_var01, arg01
' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     switch (derr) {
	fle	_var01, #20
	jmprel	_var01
LR__1360
	jmp	#LR__1361
	jmp	#LR__1375
	jmp	#LR__1376
	jmp	#LR__1377
	jmp	#LR__1362
	jmp	#LR__1363
	jmp	#LR__1364
	jmp	#LR__1365
	jmp	#LR__1367
	jmp	#LR__1370
	jmp	#LR__1366
	jmp	#LR__1371
	jmp	#LR__1372
	jmp	#LR__1373
	jmp	#LR__1378
	jmp	#LR__1378
	jmp	#LR__1378
	jmp	#LR__1368
	jmp	#LR__1374
	jmp	#LR__1369
	jmp	#LR__1378
LR__1361
	mov	_var02, #0
'         r = 0;
'         break;
	jmp	#LR__1379
LR__1362
LR__1363
LR__1364
	mov	_var02, #4
'         r =  4 ;
'         break;
	jmp	#LR__1379
LR__1365
LR__1366
	mov	_var02, #6
'         r =  6 ;
'         break;
	jmp	#LR__1379
LR__1367
	mov	_var02, #9
'         r =  9 ;
'         break;
	jmp	#LR__1379
LR__1368
	mov	_var02, #7
'         r =  7 ;
'         break;
	jmp	#LR__1379
LR__1369
LR__1370
LR__1371
LR__1372
LR__1373
	mov	_var02, #10
'         r =  10 ;
'         break;
	jmp	#LR__1379
LR__1374
	mov	_var02, #11
'         r =  11 ;
'         break;
	jmp	#LR__1379
LR__1375
LR__1376
LR__1377
LR__1378
	mov	_var02, #12
'         r =  12 ;
'         break;
LR__1379
'     }
'     return _seterror(r);
	cmps	_var02, #0 wz
	add	ptr___system__dat__, #32
	wrlong	_var02, ptr___system__dat__
	sub	ptr___system__dat__, #32
 if_ne	neg	result1, #1
 if_e	mov	result1, #0
_fatfs_cc__set_dos_error_0454_ret
	ret

_fatfs_cc_v_creat
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, ##1596
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1381
	mov	arg01, local03
	mov	arg02, #0
	mov	arg03, ##1596
	call	#\builtin_bytefill_
	add	local03, ##1044
	mov	arg01, local03
	sub	local03, ##1044
	mov	arg02, local02
	mov	arg03, #7
	call	#_fatfs_cc_f_open
	mov	local04, result1 wz
 if_e	jmp	#LR__1380
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local04
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1381
LR__1380
	wrlong	local03, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__1381
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_creat_ret
	ret

_fatfs_cc_v_close
	mov	COUNT_, #2
	call	#pushregs_
	rdlong	local01, arg01
	add	local01, ##1044
	mov	arg01, local01
	sub	local01, ##1044
	call	#_fatfs_cc_f_close
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
'     FAT_FIL *f = fil->vfsdata;
'     r=f_close(&f->fil);
'     free(f);
'     return _set_dos_error(r);
	mov	arg01, local02
	call	#_fatfs_cc__set_dos_error_0454
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_close_ret
	ret

_fatfs_cc_v_opendir
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	arg01, #48
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local03, result1 wz
' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1391
	mov	arg02, local02
	mov	arg01, local03
	call	#_fatfs_cc_f_opendir
	mov	local04, result1 wz
 if_e	jmp	#LR__1390
	mov	arg01, local03
'     return _gc_free(ptr);
	call	#__system___gc_free
'         free(f);
'         return _set_dos_error(r);
	mov	arg01, local04
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1391
LR__1390
	add	local01, #4
	wrlong	local03, local01
'     }
'     dir->vfsdata = f;
'     return 0;
	mov	result1, #0
LR__1391
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_opendir_ret
	ret

_fatfs_cc_v_closedir
	mov	COUNT_, #2
	call	#pushregs_
	add	arg01, #4
	rdlong	local01, arg01
	mov	arg01, local01
	call	#_fatfs_cc_f_closedir
	mov	local02, result1
	mov	arg01, local01
'     return _gc_free(ptr);
	call	#__system___gc_free
	cmp	local02, #0 wz
 if_ne	mov	arg01, local02
 if_ne	call	#_fatfs_cc__set_dos_error_0454
'     return r;
	mov	result1, local02
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_closedir_ret
	ret

_fatfs_cc_v_readdir
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #300
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdlong	arg03, fp
	add	arg03, #4
	rdlong	arg01, arg03
	add	fp, #8
	mov	arg02, fp
	sub	fp, #12
	call	#_fatfs_cc_f_readdir
	add	fp, #296
	wrlong	result1, fp
	sub	fp, #296
	cmp	result1, #0 wz
 if_e	jmp	#LR__1400
'         return _set_dos_error(r);
	add	fp, #296
	rdlong	arg01, fp
	sub	fp, #296
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1403
LR__1400
	add	fp, #40
	rdbyte	arg03, fp wz
	sub	fp, #40
'         return -1;
 if_e	neg	result1, #1
 if_e	jmp	#LR__1403
	add	fp, #8
	rdlong	arg01, fp
	add	fp, #32
	mov	arg02, fp
	sub	fp, #40
	mov	arg03, #63
	call	#_fatfs_cc_strncpy
	add	fp, #8
	rdlong	arg03, fp
	add	arg03, #63
	wrbyte	#0, arg03
	add	fp, #12
	rdbyte	arg03, fp
	sub	fp, #20
	test	arg03, #16 wz
 if_e	jmp	#LR__1401
	add	fp, #8
	rdlong	arg03, fp
	sub	fp, #8
	add	arg03, #80
	wrbyte	#1, arg03
	jmp	#LR__1402
LR__1401
	add	fp, #8
	rdlong	arg03, fp
	sub	fp, #8
	add	arg03, #80
	wrbyte	#0, arg03
LR__1402
	add	fp, #8
	rdlong	arg03, fp
	add	fp, #4
	rdlong	arg02, fp
	add	arg03, #72
	wrlong	arg02, arg03
	sub	fp, #4
	rdlong	local01, fp
	add	fp, #8
	rdword	arg01, fp
	add	fp, #2
	rdword	arg02, fp
	sub	fp, #18
	call	#_fatfs_cc_unixtime_0452
	add	local01, #76
	wrlong	result1, local01
'         ent->d_type =  (0) ;
'     }
'     ent->d_size = finfo.fsize;
'     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
'     return 0;
	mov	result1, #0
LR__1403
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_readdir_ret
	ret

_fatfs_cc_v_stat
	mov	COUNT_, #3
	call	#pushregs_
	add	ptra, #304
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #8
	mov	arg01, arg02
	mov	arg02, #0
	mov	arg03, #48
	call	#\builtin_bytefill_
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	rdbyte	result1, result1 wz
 if_e	jmp	#LR__1410
	add	fp, #4
	rdlong	result1, fp
	sub	fp, #4
	rdbyte	result1, result1
	cmp	result1, #46 wz
 if_e	add	fp, #4
 if_e	rdlong	local01, fp
 if_e	sub	fp, #4
 if_e	add	local01, #1
 if_e	rdbyte	local02, local01 wz
 if_ne	jmp	#LR__1411
LR__1410
	add	fp, #24
	wrbyte	#16, fp
	sub	fp, #12
	wrlong	#0, fp
	sub	fp, #12
	jmp	#LR__1412
LR__1411
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #12
	mov	arg02, fp
	sub	fp, #16
	call	#_fatfs_cc_f_stat
	add	fp, #12
	wrlong	result1, fp
	sub	fp, #12
LR__1412
	add	fp, #12
	rdlong	local02, fp wz
	sub	fp, #12
 if_e	jmp	#LR__1413
'         return _set_dos_error(r);
	add	fp, #12
	rdlong	arg01, fp
	sub	fp, #12
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1414
LR__1413
	add	fp, #300
	wrlong	#292, fp
	sub	fp, #276
	rdbyte	local03, fp
	sub	fp, #24
	test	local03, #1 wz
 if_e	add	fp, #300
 if_e	rdlong	local03, fp
 if_e	or	local03, #146
 if_e	wrlong	local03, fp
 if_e	sub	fp, #300
	add	fp, #24
	rdbyte	local03, fp
	sub	fp, #24
	test	local03, #16 wz
 if_ne	add	fp, #300
 if_ne	rdlong	local03, fp
 if_ne	or	local03, ##4169
 if_ne	wrlong	local03, fp
 if_ne	sub	fp, #300
	add	fp, #8
	rdlong	local03, fp
	add	fp, #292
	rdlong	local02, fp
	add	local03, #8
	wrlong	local02, local03
	sub	fp, #292
	rdlong	local03, fp
	add	local03, #12
	wrlong	#1, local03
	rdlong	local03, fp
	add	fp, #8
	rdlong	local02, fp
	add	local03, #24
	wrlong	local02, local03
	sub	fp, #8
	rdlong	local03, fp
	add	local03, #28
	wrlong	##512, local03
	rdlong	local02, fp
	mov	local03, local02
	add	local02, #24
	rdlong	local02, local02
	add	local02, #511
	abs	local02, local02 wc
	shr	local02, #9
	negc	local02, local02
	add	local03, #32
	wrlong	local02, local03
	rdlong	local02, fp
	mov	local03, local02
	mov	local01, local02
	add	fp, #12
	rdword	arg01, fp
	add	fp, #2
	rdword	arg02, fp
	sub	fp, #22
	call	#_fatfs_cc_unixtime_0452
	add	local01, #44
	wrlong	result1, local01
	add	local02, #40
	wrlong	result1, local02
	add	local03, #36
	wrlong	result1, local03
'         mode |=  0010000  |  0100  |  0010  |  0001 ;
'     }
'     buf->st_mode = mode;
'     buf->st_nlink = 1;
'     buf->st_size = finfo.fsize;
'     buf->st_blksize = 512;
'     buf->st_blocks = (buf->st_size + 511) / 512;
'     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     return r;
	add	fp, #12
	rdlong	result1, fp
	sub	fp, #12
LR__1414
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_stat_ret
	ret

_fatfs_cc_v_read
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg01, fp
	rdlong	arg01, arg01 wz
	add	fp, #12
	wrlong	arg01, fp
	sub	fp, #16
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1422
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1044
	sub	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #12
	mov	arg04, fp
	sub	fp, #24
	call	#_fatfs_cc_f_read
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__1420
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	add	arg04, #8
	rdlong	arg04, arg04
	or	arg04, #32
	add	arg03, #8
	wrlong	arg04, arg03
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1422
LR__1420
	add	fp, #24
	rdlong	result1, fp wz
	sub	fp, #24
 if_ne	jmp	#LR__1421
	add	fp, #4
	rdlong	result1, fp
	mov	arg04, result1
	sub	fp, #4
	add	result1, #8
	rdlong	result1, result1
	or	result1, #16
	add	arg04, #8
	wrlong	result1, arg04
LR__1421
'         fil->state |=  (0x10) ;
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__1422
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_read_ret
	ret

_fatfs_cc_v_write
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #28
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	add	fp, #4
	wrlong	arg03, fp
	sub	fp, #8
	rdlong	arg01, fp
	rdlong	arg01, arg01 wz
	add	fp, #12
	wrlong	arg01, fp
	sub	fp, #16
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1431
	add	fp, #16
	rdlong	arg01, fp
	add	arg01, ##1044
	sub	fp, #8
	rdlong	arg02, fp
	add	fp, #4
	rdlong	arg03, fp
	add	fp, #12
	mov	arg04, fp
	sub	fp, #24
	call	#_fatfs_cc_f_write
	add	fp, #20
	wrlong	result1, fp
	sub	fp, #20
	cmp	result1, #0 wz
 if_e	jmp	#LR__1430
	add	fp, #4
	rdlong	arg04, fp
	mov	arg03, arg04
	add	arg04, #8
	rdlong	arg04, arg04
	or	arg04, #32
	add	arg03, #8
	wrlong	arg04, arg03
'         fil->state |=  (0x20) ;
'         return _set_dos_error(r);
	add	fp, #16
	rdlong	arg01, fp
	sub	fp, #20
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1431
LR__1430
'     }
'     return x;
	add	fp, #24
	rdlong	result1, fp
	sub	fp, #24
LR__1431
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_write_ret
	ret

_fatfs_cc_v_lseek
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg02
	mov	local02, arg03
	rdlong	local03, arg01
	add	local03, ##1044 wz
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1442
	cmp	local02, #0 wz
 if_e	jmp	#LR__1440
	cmp	local02, #1 wz
 if_e	add	local03, #20
 if_e	rdlong	local04, local03
 if_e	sub	local03, #20
 if_e	add	local01, local04
 if_ne	add	local03, #12
 if_ne	rdlong	local04, local03
 if_ne	sub	local03, #12
 if_ne	add	local01, local04
LR__1440
	mov	arg02, local01
	mov	arg01, local03
	call	#_fatfs_cc_f_lseek
	mov	arg01, result1 wz
 if_e	jmp	#LR__1441
'         return _set_dos_error(result);
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1442
LR__1441
'     }
'     return offset;
	mov	result1, local01
LR__1442
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_lseek_ret
	ret

_fatfs_cc_v_ioctl
' {
'     return _seterror( 10 );
	add	ptr___system__dat__, #32
	wrlong	#10, ptr___system__dat__
	sub	ptr___system__dat__, #32
	neg	result1, #1
_fatfs_cc_v_ioctl_ret
	ret

_fatfs_cc_v_mkdir
	call	#_fatfs_cc_f_mkdir
	mov	arg01, result1
' 
'     r = f_mkdir(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0454
_fatfs_cc_v_mkdir_ret
	ret

_fatfs_cc_v_remove
	call	#_fatfs_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0454
_fatfs_cc_v_remove_ret
	ret

_fatfs_cc_v_rmdir
	call	#_fatfs_cc_f_unlink
	mov	arg01, result1
' 
'     r = f_unlink(name);
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0454
_fatfs_cc_v_rmdir_ret
	ret

_fatfs_cc_v_rename
	call	#_fatfs_cc_f_rename
	mov	arg01, result1
'     return _set_dos_error(r);
	call	#_fatfs_cc__set_dos_error_0454
_fatfs_cc_v_rename_ret
	ret

_fatfs_cc_v_open
	mov	COUNT_, #7
	call	#pushregs_
	mov	local01, arg01
	mov	local02, arg02
	mov	local03, arg03
	mov	arg01, ##1596
'     return _gc_alloc(size);
	mov	arg02, #16
	call	#__system___gc_doalloc
	mov	local04, result1 wz
'       return _seterror( 7 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#7, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1456
	mov	arg01, local04
	mov	arg02, #0
	mov	arg03, ##1596
	call	#\builtin_bytefill_
'   switch (flags & 3) {
	mov	local05, local03
	and	local05, #3 wz
 if_e	jmp	#LR__1450
	cmp	local05, #1 wz
 if_e	jmp	#LR__1451
	jmp	#LR__1452
LR__1450
	mov	local06, #1
'       fs_flags =  0x01 ;
'       break;
	jmp	#LR__1453
LR__1451
	mov	local06, #2
'       fs_flags =  0x02 ;
'       break;
	jmp	#LR__1453
LR__1452
	mov	local06, #3
'       fs_flags =  0x01  |  0x02 ;
'       break;
LR__1453
	test	local03, #8 wz
 if_ne	or	local06, #24
 if_ne	jmp	#LR__1454
	test	local03, #32 wz
 if_ne	or	local06, #48
LR__1454
	add	local04, ##1044
	mov	arg01, local04
	sub	local04, ##1044
	mov	arg02, local02
	mov	arg03, local06
	call	#_fatfs_cc_f_open
	mov	local07, result1 wz
 if_e	jmp	#LR__1455
	mov	arg01, local04
'     return _gc_free(ptr);
	call	#__system___gc_free
'     free(f);
' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     return _set_dos_error(r);
	mov	arg01, local07
	call	#_fatfs_cc__set_dos_error_0454
	jmp	#LR__1456
LR__1455
	wrlong	local04, local01
'   }
'   fil->vfsdata = f;
'   return 0;
	mov	result1, #0
LR__1456
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_v_open_ret
	ret

_fatfs_cc_v_flush
	rdlong	arg01, arg01
	add	arg01, ##1044 wz
'         return _seterror( 5 );
 if_e	add	ptr___system__dat__, #32
 if_e	wrlong	#5, ptr___system__dat__
 if_e	sub	ptr___system__dat__, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1460
	call	#_fatfs_cc_f_sync
	mov	arg01, result1
'     }
' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     result = f_sync(f);
' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     return _set_dos_error(result);
	call	#_fatfs_cc__set_dos_error_0454
LR__1460
_fatfs_cc_v_flush_ret
	ret

_fatfs_cc_v_init
' {
'     return 0;
	mov	result1, #0
_fatfs_cc_v_init_ret
	ret

_fatfs_cc_v_deinit
	mov	arg02, ##@LR__1629
	mov	arg01, #0
	mov	arg03, #0
	call	#_fatfs_cc_f_mount
	add	objptr, ##520
	rdlong	arg01, objptr
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, ##524
	call	#__system___freepins
' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
'     _freepins(f_pinmask);
'     return 0;
	mov	result1, #0
_fatfs_cc_v_deinit_ret
	ret

_fatfs_cc_get_vfs
	mov	COUNT_, #1
	call	#pushregs_
	mov	local01, arg01
	mov	arg01, #80
	call	#__system___gc_alloc_managed
	mov	arg01, result1
	mov	result1, objptr
	bith	result1, #54
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##13631488
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	bith	result1, #85
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	bith	result1, #116
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	bith	result1, #24
	add	arg01, #4
	wrlong	result1, arg01
	add	arg01, #4
	wrlong	#0, arg01
	add	arg01, #4
	wrlong	local01, arg01
	add	arg01, #4
	wrlong	#0, arg01
	mov	result1, objptr
	or	result1, ##17825792
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##18874368
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##19922944
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##20971520
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##22020096
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##23068672
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##24117248
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	bith	result1, #55
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##26214400
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##27262976
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	or	result1, ##28311552
	add	arg01, #4
	wrlong	result1, arg01
	mov	result1, objptr
	bith	result1, #86
	add	arg01, #4
	wrlong	result1, arg01
	sub	arg01, #76
' 
'     v->close = &v_close;
'     v->read = &v_read;
'     v->write = &v_write;
'     v->lseek = &v_lseek;
'     v->ioctl = &v_ioctl;
'     v->flush = 0;
'     v->vfs_data = ptr;
'     v->reserved = 0;
' 
'     v->open = &v_open;
'     v->creat = &v_creat;
'     v->opendir = &v_opendir;
'     v->closedir = &v_closedir;
'     v->readdir = &v_readdir;
'     v->stat = &v_stat;
' 
'     v->mkdir = &v_mkdir;
'     v->rmdir = &v_rmdir;
' 
'     v->remove = &v_remove;
'     v->rename = &v_rename;
' 
'     v->init = &v_init;
'     v->deinit = &v_deinit;
' 
'     return v;
	mov	result1, arg01
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_get_vfs_ret
	ret

_fatfs_cc_xmit_mmc_0588
	add	objptr, ##528
	rdlong	_var01, objptr
	add	objptr, #8
	rdlong	_var02, objptr
	sub	objptr, ##536
	dirl	_var02
	setq	#1
	rdlong	_var03, arg01
	rev	_var03
	movbyts	_var03, #27
	wypin	_var03, _var02
	mov	_var03, arg02
	shr	arg02, #2 wz
	shl	_var03, #3
	wypin	_var03, _var01
	dirh	_var02
	add	arg01, #8
	rev	_var04
	movbyts	_var04, #27
LR__1470
 if_ne	wypin	_var04, _var02
 if_ne	rdlong	_var04, arg01
 if_ne	add	arg01, #4
 if_ne	rev	_var04
 if_ne	movbyts	_var04, #27
LR__1471
 if_ne	testp	_var02 wc
 if_a	jmp	#LR__1471
 if_ne	djnz	arg02, #LR__1470
LR__1472
	testp	_var01 wc
 if_ae	jmp	#LR__1472
	dirl	_var02
	wypin	##-1, _var02
	dirh	_var02
_fatfs_cc_xmit_mmc_0588_ret
	ret

_fatfs_cc_rcvr_mmc_0595
	add	objptr, ##528
	rdlong	_var01, objptr
	add	objptr, #12
	rdlong	_var02, objptr
	sub	objptr, ##540
	akpin	_var02
	mov	_var03, arg02 wz
	shr	_var03, #2 wz
 if_e	jmp	#LR__1482
	mov	_var04, _var03
	shl	_var04, #5
	wypin	_var04, _var01
	wxpin	#63, _var02
LR__1480
LR__1481
	testp	_var02 wc
 if_ae	jmp	#LR__1481
	rdpin	_var04, _var02
	rev	_var04
	movbyts	_var04, #27
	wrlong	_var04, arg01
	add	arg01, #4
	djnz	_var03, #LR__1480
LR__1482
	and	arg02, #3 wz
 if_e	jmp	#LR__1485
	wxpin	#39, _var02
LR__1483
	wypin	#8, _var01
LR__1484
	testp	_var02 wc
 if_ae	jmp	#LR__1484
	rdpin	_var04, _var02
	rev	_var04
	wrbyte	_var04, arg01
	add	arg01, #1
	djnz	arg02, #LR__1483
LR__1485
_fatfs_cc_rcvr_mmc_0595_ret
	ret

_fatfs_cc_wait_ready_0599
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #16
	getct	result1
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, #20
	shr	local01, #1
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #12
' {
' 	BYTE d;
' 	UINT tmr, tmout;
' 
' 	tmr = _cnt();
' 	tmout =  (*(uint32_t *)0x14)  >> 1;
' 	for(;;) {
LR__1490
	add	fp, #4
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #255 wz
 if_e	mov	result1, #1
 if_e	jmp	#LR__1491
	getct	result1
	add	fp, #8
	rdlong	local01, fp
	sub	result1, local01
	add	fp, #4
	rdlong	local01, fp
	sub	fp, #12
	cmp	result1, local01 wc
 if_ae	mov	result1, #0
 if_b	jmp	#LR__1490
LR__1491
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_wait_ready_0599_ret
	ret

_fatfs_cc_deselect_0605
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #20
	add	objptr, ##532
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	sub	objptr, #4
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	add	objptr, #8
	rdlong	arg02, objptr
	add	fp, #4
	wrlong	arg02, fp
	add	objptr, #4
	rdlong	arg02, objptr
	sub	objptr, ##540
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #12
	rdlong	arg01, fp
	sub	fp, #4
	drvh	arg01
	waitx	#16
	mov	arg01, fp
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_deselect_0605_ret
	ret

_fatfs_cc_select_0609
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	objptr, ##532
	rdlong	arg02, objptr
	add	fp, #8
	wrlong	arg02, fp
	add	objptr, #8
	rdlong	arg01, objptr
	sub	objptr, ##540
	add	fp, #4
	wrlong	arg01, fp
	fltl	arg01
	sub	fp, #4
	rdlong	arg01, fp
	drvl	arg01
	waitx	#16
	add	fp, #4
	rdlong	arg01, fp
	dirh	arg01
	sub	fp, #8
	mov	arg01, fp
	sub	fp, #4
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	call	#_fatfs_cc_wait_ready_0599
	cmp	result1, #0 wz
 if_ne	mov	result1, #1
 if_ne	jmp	#LR__1500
	call	#_fatfs_cc_deselect_0605
' 
' 	deselect();
' 	return 0;
	mov	result1, #0
LR__1500
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_select_0609_ret
	ret

_fatfs_cc_rcvr_datablock_0613
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #24
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	getct	result1
	add	fp, #8
	wrlong	result1, fp
	rdlong	local01, #20
	shr	local01, #3
	add	fp, #4
	wrlong	local01, fp
	sub	fp, #20
' 	BYTE *buff,
' 	UINT btr
' )
' {
' 	BYTE d[2];
' 	UINT tmr, tmout;
' 
' 	tmr = _cnt();
' 	tmout =  (*(uint32_t *)0x14)  >> 3;
' 	for(;;) {
LR__1510
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	cmp	local01, #255 wz
 if_ne	jmp	#LR__1511
	getct	result1
	mov	local01, result1
	add	fp, #16
	rdlong	arg02, fp
	sub	local01, arg02
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #20
	cmp	local01, arg02 wc
 if_b	jmp	#LR__1510
LR__1511
	add	fp, #12
	rdbyte	local01, fp
	sub	fp, #12
	cmp	local01, #254 wz
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1512
	add	fp, #4
	rdlong	arg01, fp
	add	fp, #4
	rdlong	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #2
	call	#_fatfs_cc_rcvr_mmc_0595
' 
' 	rcvr_mmc(buff, btr);
' 	rcvr_mmc(d, 2);
' 
' 	return 1;
	mov	result1, #1
LR__1512
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_rcvr_datablock_0613_ret
	ret

_fatfs_cc_xmit_datablock_0615
	mov	COUNT_, #0
	call	#pushregs_
	add	ptra, #16
	add	fp, #4
	wrlong	arg01, fp
	add	fp, #4
	wrbyte	arg02, fp
	sub	fp, #8
	call	#_fatfs_cc_wait_ready_0599
	cmp	result1, #0 wz
 if_e	mov	result1, #0
 if_e	jmp	#LR__1521
	add	fp, #8
	rdbyte	arg02, fp
	add	fp, #4
	wrbyte	arg02, fp
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_xmit_mmc_0588
	add	fp, #8
	rdbyte	arg02, fp
	sub	fp, #8
	cmp	arg02, #253 wz
 if_e	jmp	#LR__1520
	add	fp, #4
	rdlong	arg01, fp
	sub	fp, #4
	decod	arg02, #9
	call	#_fatfs_cc_xmit_mmc_0588
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #2
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	mov	arg01, fp
	sub	fp, #12
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	rdbyte	arg02, fp
	sub	fp, #12
	and	arg02, #31
	cmp	arg02, #5 wz
' 			return 0;
 if_ne	mov	result1, #0
 if_ne	jmp	#LR__1521
LR__1520
' 	}
' 
' 	return 1;
	mov	result1, #1
LR__1521
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_xmit_datablock_0615_ret
	ret

_fatfs_cc_send_cmd_0619
	mov	COUNT_, #1
	call	#pushregs_
	add	ptra, #28
_fatfs_cc_send_cmd_0619_enter
	add	fp, #4
	wrbyte	arg01, fp
	add	fp, #4
	wrlong	arg02, fp
	sub	fp, #4
	rdbyte	result1, fp
	sub	fp, #4
	test	result1, #128 wz
 if_e	jmp	#LR__1530
	add	fp, #4
	rdbyte	arg02, fp
	and	arg02, #127
	wrbyte	arg02, fp
	sub	fp, #4
	mov	arg01, #55
	mov	arg02, #0
	call	#_fatfs_cc_send_cmd_0619
	add	fp, #12
	wrbyte	result1, fp
	rdbyte	arg02, fp
	sub	fp, #12
	cmp	arg02, #2 wc
 if_ae	add	fp, #12
 if_ae	rdbyte	result1, fp
 if_ae	sub	fp, #12
 if_ae	jmp	#LR__1534
LR__1530
	add	fp, #4
	rdbyte	arg02, fp
	sub	fp, #4
	cmp	arg02, #12 wz
 if_e	jmp	#LR__1531
	call	#_fatfs_cc_deselect_0605
	call	#_fatfs_cc_select_0609
	cmp	result1, #0 wz
 if_e	mov	result1, #255
 if_e	jmp	#LR__1534
LR__1531
	add	fp, #4
	rdbyte	arg02, fp
	mov	result1, #64
	or	result1, arg02
	add	fp, #16
	wrbyte	result1, fp
	sub	fp, #12
	rdlong	result1, fp
	shr	result1, #24
	add	fp, #13
	wrbyte	result1, fp
	sub	fp, #13
	rdlong	result1, fp
	shr	result1, #16
	add	fp, #14
	wrbyte	result1, fp
	sub	fp, #14
	rdlong	result1, fp
	shr	result1, #8
	add	fp, #15
	wrbyte	result1, fp
	sub	fp, #15
	rdlong	result1, fp
	add	fp, #16
	wrbyte	result1, fp
	sub	fp, #12
	wrbyte	#1, fp
	sub	fp, #8
	rdbyte	result1, fp wz
	sub	fp, #4
 if_e	add	fp, #12
 if_e	wrbyte	#149, fp
 if_e	sub	fp, #12
	add	fp, #4
	rdbyte	result1, fp
	sub	fp, #4
	cmp	result1, #8 wz
 if_e	add	fp, #12
 if_e	wrbyte	#135, fp
 if_e	sub	fp, #12
	add	fp, #12
	rdbyte	arg02, fp
	add	fp, #13
	wrbyte	arg02, fp
	sub	fp, #5
	mov	arg01, fp
	sub	fp, #20
	mov	arg02, #6
	call	#_fatfs_cc_xmit_mmc_0588
	add	fp, #4
	rdbyte	local01, fp
	sub	fp, #4
	cmp	local01, #12 wz
 if_e	add	fp, #16
 if_e	mov	arg01, fp
 if_e	sub	fp, #16
 if_e	mov	arg02, #1
 if_e	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #12
	wrbyte	#10, fp
	sub	fp, #12
' 	n = 10;
' 	do
LR__1532
	add	fp, #16
	mov	arg01, fp
	sub	fp, #16
	mov	arg02, #1
	call	#_fatfs_cc_rcvr_mmc_0595
	add	fp, #16
	rdbyte	local01, fp
	sub	fp, #16
	test	local01, #128 wz
 if_e	jmp	#LR__1533
	add	fp, #12
	rdbyte	local01, fp
	sub	local01, #1
	wrbyte	local01, fp
	rdbyte	local01, fp wz
	sub	fp, #12
 if_ne	jmp	#LR__1532
LR__1533
' 
' 	return d;
	add	fp, #16
	rdbyte	result1, fp
	sub	fp, #16
LR__1534
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_send_cmd_0619_ret
	ret

_fatfs_cc_disk_deinitialize
	mov	COUNT_, #3
	call	#pushregs_
	cmps	arg01, #0 wz
	add	objptr, ##532
	rdlong	arg01, objptr
	sub	objptr, #4
	rdlong	local01, objptr
	add	objptr, #8
	rdlong	local02, objptr
	add	objptr, #4
	rdlong	local03, objptr
	sub	objptr, ##540
' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
'         return RES_NOTRDY;
 if_ne	mov	result1, #3
 if_ne	jmp	#LR__1540
	fltl	arg01
	wrpin	#0, arg01
	fltl	local01
	wrpin	#0, local01
	fltl	local02
	wrpin	#0, local02
	fltl	local03
	wrpin	#0, local03
	mov	arg01, #10
	call	#__system___waitms
'     }
' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
'     _pinclear(PIN_SS);
'     _pinclear(PIN_CLK);
'     _pinclear(PIN_DI);
'     _pinclear(PIN_DO);
' 
'     _waitms(10);
' 
'     return 0;
	mov	result1, #0
LR__1540
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_disk_deinitialize_ret
	ret

_fatfs_cc_gettimeofday
	mov	COUNT_, #4
	call	#pushregs_
	mov	local01, arg01
	call	#__system___getus
	mov	arg01, result1
	add	ptr__fatfs_cc_dat__, ##1368
	rdlong	local02, ptr__fatfs_cc_dat__
	mov	result1, arg01
	sub	result1, local02
	qdiv	result1, ##1000000
	sub	ptr__fatfs_cc_dat__, ##1368
	getqx	local02
	qdiv	result1, ##1000000
	cmp	local02, #0 wz
	getqy	local03
 if_e	jmp	#LR__1550
	add	ptr__fatfs_cc_dat__, ##1364
	rdlong	local04, ptr__fatfs_cc_dat__
	add	local04, local02
	wrlong	local04, ptr__fatfs_cc_dat__
	sub	arg01, local03
	add	ptr__fatfs_cc_dat__, #4
	wrlong	arg01, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1368
LR__1550
	add	ptr__fatfs_cc_dat__, ##1364
	rdlong	local04, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1364
	wrlong	local04, local01
	add	local01, #4
	wrlong	local03, local01
'         lastsec += secs;
'         lastus = now - leftover;
'     }
'     tv->tv_sec = lastsec;
'     tv->tv_usec = leftover;
'     return 0;
	mov	result1, #0
	mov	ptra, fp
	call	#popregs_
_fatfs_cc_gettimeofday_ret
	ret

_fatfs_cc__is_leap_year
	abs	result1, arg01 wc
	and	result1, #3
	negc	result1, result1 wz
 if_ne	jmp	#LR__1561
	abs	result1, arg01 wc
	qdiv	result1, #100
	getqy	result1
	negc	result1, result1 wz
 if_ne	jmp	#LR__1560
	abs	result1, arg01 wc
	qdiv	result1, #400
'       return (0 == y % 400);
	mov	result1, #0
	getqy	_var01
	negc	_var01, _var01 wz
 if_e	mov	result1, #1
	jmp	#_fatfs_cc__is_leap_year_ret
LR__1560
'     return 1;
	mov	result1, #1
	jmp	#_fatfs_cc__is_leap_year_ret
LR__1561
'   }
'   return 0;
	mov	result1, #0
_fatfs_cc__is_leap_year_ret
	ret

_fatfs_cc___tzoffset
	mov	_var01, arg01 wz
	wrlong	##-1, arg02
	mov	_var02, #1
 if_ne	rdbyte	_var03, _var01 wz
'                 return 0;
 if_e	mov	result1, #0
 if_e	jmp	#LR__1587
	wrlong	#0, arg02
	add	ptr__fatfs_cc_dat__, ##1324
	mov	_var04, ptr__fatfs_cc_dat__
' 
'        *hasdst = 0;
' 
' 	n = stdname;
'         while (*s && isalpha(*s)) {
	sub	ptr__fatfs_cc_dat__, ##1324
	callpa	#(@LR__1571-@LR__1570)>>2,fcache_load_ptr_
LR__1570
	rdbyte	_var03, _var01 wz
 if_e	jmp	#LR__1572
	rdbyte	arg01, _var01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1372
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1372
	test	result1, #12 wz
 if_e	jmp	#LR__1572
	mov	_var05, _var01
	mov	_var06, _var01
	add	_var06, #1
	rdbyte	_var07, _var05
	mov	_var01, _var06
	wrbyte	_var07, _var04
	add	_var04, #1
	jmp	#LR__1570
LR__1571
LR__1572
	wrbyte	#0, _var04
	mov	_var08, #0
	rdbyte	_var03, _var01
	cmp	_var03, #45 wz
 if_e	neg	_var02, #1
 if_e	add	_var01, #1
	callpa	#(@LR__1574-@LR__1573)>>2,fcache_load_ptr_
'                 sgn = -1;
'                 s++;
'         }
'         while (isdigit(*s)) {
LR__1573
	rdbyte	arg01, _var01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1372
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1372
	test	result1, #2 wz
 if_e	jmp	#LR__1575
	mov	_var03, _var08
	shl	_var03, #2
	add	_var03, _var08
	shl	_var03, #1
	rdbyte	_var05, _var01
	sub	_var05, #48
	add	_var03, _var05
	mov	_var08, _var03
	add	_var01, #1
	jmp	#LR__1573
LR__1574
LR__1575
	qmul	_var08, ##3600
	rdbyte	_var03, _var01
	cmp	_var03, #58 wz
	getqx	_var09
 if_ne	jmp	#LR__1579
	mov	_var08, #0
	add	_var01, #1
	callpa	#(@LR__1577-@LR__1576)>>2,fcache_load_ptr_
'                 x = 0;
'                 s++;
'                 while (isdigit(*s)) {
LR__1576
	rdbyte	arg01, _var01
' {
'   return  (__ctype_get(c) & 0x02 ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1372
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1372
	test	result1, #2 wz
 if_e	jmp	#LR__1578
	mov	_var03, _var08
	shl	_var03, #2
	add	_var03, _var08
	shl	_var03, #1
	rdbyte	_var05, _var01
	sub	_var05, #48
	add	_var03, _var05
	mov	_var08, _var03
	add	_var01, #1
	jmp	#LR__1576
LR__1577
LR__1578
	mov	_var07, _var08
	shl	_var07, #4
	sub	_var07, _var08
	shl	_var07, #2
	add	_var09, _var07
LR__1579
	add	ptr__fatfs_cc_dat__, ##1333
	mov	_var04, ptr__fatfs_cc_dat__
	rdbyte	arg01, _var01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, #39
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1372
	test	result1, #12 wz
 if_e	jmp	#LR__1582
	wrlong	#1, arg02
'                 *hasdst = 1;
' 		while (*s && isalpha(*s)) *n++ = *s++;
LR__1580
	rdbyte	_var03, _var01 wz
 if_e	jmp	#LR__1581
	rdbyte	arg01, _var01
' {
'   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
	fle	arg01, #128 wc
'     return __ctype[c];
	add	ptr__fatfs_cc_dat__, ##1372
	add	arg01, ptr__fatfs_cc_dat__
	rdbyte	result1, arg01
	sub	ptr__fatfs_cc_dat__, ##1372
	test	result1, #12 wz
 if_e	jmp	#LR__1581
	mov	_var06, _var01
	add	_var06, #1
	rdbyte	_var07, _var01
	mov	_var01, _var06
	wrbyte	_var07, _var04
	add	_var04, #1
	jmp	#LR__1580
LR__1581
LR__1582
	wrbyte	#0, _var04
	add	ptr__fatfs_cc_dat__, ##1324
	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, ##1324
 if_e	jmp	#LR__1583
	add	ptr__fatfs_cc_dat__, ##1324
	mov	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #8
	wrlong	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1316
	jmp	#LR__1584
LR__1583
	add	ptr__fatfs_cc_dat__, ##1342
	mov	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #26
	wrlong	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1316
LR__1584
	add	ptr__fatfs_cc_dat__, ##1333
	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
	sub	ptr__fatfs_cc_dat__, ##1333
 if_e	jmp	#LR__1585
	add	ptr__fatfs_cc_dat__, ##1333
	mov	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #13
	wrlong	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1320
	jmp	#LR__1586
LR__1585
	add	ptr__fatfs_cc_dat__, ##1324
	mov	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, #4
	wrlong	_var03, ptr__fatfs_cc_dat__
	sub	ptr__fatfs_cc_dat__, ##1320
LR__1586
	qmul	_var02, _var09
' 		_tzname[1] = stdname;
' 
'         return sgn * off;
	getqx	result1
LR__1587
_fatfs_cc___tzoffset_ret
	ret

_fatfs_cc___indst
	add	arg01, #16
	rdlong	_var01, arg01
	sub	arg01, #16
	cmp	_var01, #2 wz
 if_ne	jmp	#LR__1590
	mov	_var01, #7
	add	arg01, #24
	rdlong	_var02, arg01
	add	_var01, _var02
	sub	arg01, #12
	rdlong	_var03, arg01
	sub	_var01, _var03
	cmps	_var01, #0 wc
'                         return 1;
 if_b	mov	result1, #1
 if_b	jmp	#_fatfs_cc___indst_ret
'                 return 0;
	mov	result1, #0
	jmp	#_fatfs_cc___indst_ret
LR__1590
	add	arg01, #16
	rdlong	_var01, arg01
	sub	arg01, #16
	cmp	_var01, #10 wz
 if_ne	jmp	#LR__1591
	add	arg01, #24
	rdlong	_var01, arg01
	sub	arg01, #12
	rdlong	_var04, arg01
	sub	_var01, _var04
	cmps	_var01, #0 wc
'                         return 0;
 if_b	mov	result1, #0
 if_b	jmp	#_fatfs_cc___indst_ret
'                 return 1;
	mov	result1, #1
	jmp	#_fatfs_cc___indst_ret
LR__1591
'         }
' 
'         return (t->tm_mon > 2 && t->tm_mon < 10);
	mov	_var01, #0
	add	arg01, #16
	rdlong	_var02, arg01
	sub	arg01, #16
	cmps	_var02, #3 wc
 if_b	jmp	#LR__1592
	add	arg01, #16
	rdlong	_var03, arg01
	cmps	_var03, #10 wc
 if_b	mov	_var01, #1
LR__1592
	mov	result1, _var01
_fatfs_cc___indst_ret
	ret

__struct__s_vfs_file_t_putchar
	mov	COUNT_, #4
	call	#pushregs_
	add	objptr, #28
	rdlong	local01, objptr wz
	sub	objptr, #28
 if_e	mov	result1, #0
 if_e	jmp	#LR__1600
	add	objptr, #28
	rdlong	local02, objptr
	mov	local03, local02
	sub	objptr, #28
	zerox	local03, #19
	shr	local02, #20
	shl	local02, #2
	add	local02, __methods__
	rdlong	local02, local02
	mov	arg02, objptr
	mov	local04, objptr
	mov	objptr, local03
	call	local02
	mov	objptr, local04
'     return (i < 0) ? 0 : 1;
	cmps	result1, #0 wc
 if_b	mov	local01, #0
 if_ae	mov	local01, #1
	mov	result1, local01
LR__1600
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_putchar_ret
	ret

__struct__s_vfs_file_t_getchar
	mov	COUNT_, #3
	call	#pushregs_
	add	objptr, #32
	rdlong	arg01, objptr wz
	sub	objptr, #32
 if_e	neg	result1, #1
 if_e	jmp	#LR__1610
'     return getcf(__this);
	add	objptr, #32
	rdlong	local01, objptr
	mov	local02, local01
	sub	objptr, #32
	zerox	local02, #19
	shr	local01, #20
	shl	local01, #2
	add	local01, __methods__
	rdlong	local01, local01
	mov	arg01, objptr
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
LR__1610
	mov	ptra, fp
	call	#popregs_
__struct__s_vfs_file_t_getchar_ret
	ret

__struct___bas_wrap_sender_tx
	mov	COUNT_, #3
	call	#pushregs_
	rdlong	local01, objptr
	mov	local02, local01
	zerox	local01, #19
	shr	local02, #20
	shl	local02, #2
	add	local02, __methods__
	rdlong	local02, local02
	mov	local03, objptr
	mov	objptr, local01
	call	local02
	mov	objptr, local03
	mov	result1, #1
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_tx_ret
	ret

__struct___bas_wrap_sender_rx
	mov	COUNT_, #3
	call	#pushregs_
	add	objptr, #4
	rdlong	local01, objptr
	mov	local02, local01
	sub	objptr, #4
	zerox	local02, #19
	shr	local01, #20
	shl	local01, #2
	add	local01, __methods__
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_rx_ret
	ret

__struct___bas_wrap_sender_close
	mov	COUNT_, #3
	call	#pushregs_
	add	objptr, #8
	rdlong	local01, objptr
	mov	local02, local01
	sub	objptr, #8
	zerox	local02, #19
	shr	local01, #20
	shl	local01, #2
	add	local01, __methods__
	rdlong	local01, local01
	mov	local03, objptr
	mov	objptr, local02
	call	local01
	mov	objptr, local03
	mov	ptra, fp
	call	#popregs_
__struct___bas_wrap_sender_close_ret
	ret

LR__1620
	byte	"/"
	byte	0
LR__1621
	byte	" !!! corrupted heap??? !!! "
	byte	0
LR__1622
	byte	" !!! out of heap memory !!! "
	byte	0
LR__1623
	byte	" !!! corrupted heap !!! "
	byte	0
LR__1624
	byte	0
	byte	0
LR__1625
	byte	"*:<>|",34,"?",127
	byte	0
LR__1626
	byte	"+,;=[]"
	byte	0
LR__1627
	byte	"FAT32   "
	byte	0
LR__1628
	byte	"TZ"
	byte	0
LR__1629
	byte	0
	byte	0
LR__1630
	byte	"/sd"
	byte	0
LR__1631
	byte	"/sd/bas"
	byte	0
LR__1632
	byte	"/sd/bas"
	byte	0
LR__1633
	byte	"nonexistingfile"
	byte	0
LR__1634
	byte	"/kwass"
	byte	0
LR__1635
	byte	"/sd/bas"
	byte	0
LR__1636
	byte	"mousetheremin.bas"
	byte	0
LR__1637
	byte	"/sd"
	byte	0
	alignl
__system__dat_
	byte	$00[8]
	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00[660]
	long	(5 {__system____root_opendir})<<20
	long	(6 {__system____root_closedir})<<20
	long	(7 {__system____root_readdir})<<20
	long	(8 {__system____root_stat})<<20
	byte	$00[28]
	long	@@@__system__dat_ + 832
	long	@@@__system__dat_ + 835
	long	@@@__system__dat_ + 868
	long	@@@__system__dat_ + 893
	long	@@@__system__dat_ + 920
	long	@@@__system__dat_ + 946
	long	@@@__system__dat_ + 962
	long	@@@__system__dat_ + 980
	long	@@@__system__dat_ + 998
	long	@@@__system__dat_ + 1016
	long	@@@__system__dat_ + 1028
	long	@@@__system__dat_ + 1045
	long	@@@__system__dat_ + 1065
	long	@@@__system__dat_ + 1075
	long	@@@__system__dat_ + 1091
	long	@@@__system__dat_ + 1106
	long	@@@__system__dat_ + 1128
	long	@@@__system__dat_ + 1153
	long	@@@__system__dat_ + 1173
	long	@@@__system__dat_ + 1187
	long	@@@__system__dat_ + 1207
	long	@@@__system__dat_ + 1219
	long	@@@__system__dat_ + 1237
	long	@@@__system__dat_ + 1261
	long	@@@__system__dat_ + 1279
	long	@@@__system__dat_ + 1298
	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
	byte	$00[8]
	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	(29 {__system___tx})<<20
	long	(30 {__system___rx})<<20
	byte	$00, $00, $00, $00
	long	(31 {__system___rxtxioctl_0188})<<20
	long	(32 {__system____dummy_flush_0189})<<20
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00
	long	(29 {__system___tx})<<20
	long	(30 {__system___rx})<<20
	byte	$00, $00, $00, $00
	long	(31 {__system___rxtxioctl_0188})<<20
	long	(32 {__system____dummy_flush_0189})<<20
	byte	$00[8]
	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00, $00, $00, $00, $00
	long	(29 {__system___tx})<<20
	long	(30 {__system___rx})<<20
	byte	$00, $00, $00, $00
	long	(31 {__system___rxtxioctl_0188})<<20
	long	(32 {__system____dummy_flush_0189})<<20
	byte	$00[372]
	alignl
_fatfs_cc_dat_
	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
	byte	$00, $00, $00, $00
	long	(12 {_fatfs_cc_v_close})<<20
	long	(13 {_fatfs_cc_v_read})<<20
	long	(14 {_fatfs_cc_v_write})<<20
	long	(15 {_fatfs_cc_v_lseek})<<20
	long	(16 {_fatfs_cc_v_ioctl})<<20
	long	(33 {_fatfs_cc_v_flush})<<20
	byte	$00, $00, $00, $00, $00, $00, $00, $00
	long	(17 {_fatfs_cc_v_open})<<20
	long	(18 {_fatfs_cc_v_creat})<<20
	long	(19 {_fatfs_cc_v_opendir})<<20
	long	(20 {_fatfs_cc_v_closedir})<<20
	long	(21 {_fatfs_cc_v_readdir})<<20
	long	(22 {_fatfs_cc_v_stat})<<20
	long	(23 {_fatfs_cc_v_mkdir})<<20
	long	(24 {_fatfs_cc_v_rmdir})<<20
	long	(25 {_fatfs_cc_v_remove})<<20
	long	(26 {_fatfs_cc_v_rename})<<20
	long	(27 {_fatfs_cc_v_init})<<20
	long	(28 {_fatfs_cc_v_deinit})<<20
	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
	byte	$00[32]
	long	@@@_fatfs_cc_dat_ + 1346
	long	@@@_fatfs_cc_dat_ + 1350
	byte	$00[18]
	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
	byte	$00[7]
	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
	byte	$01[7]
	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
	byte	$42[10]
	byte	$20[7]
	byte	$44[6]
	byte	$04[20]
	byte	$20[6]
	byte	$48[6]
	byte	$08[20]
	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
__methodtable__
	long	@__struct___bas_wrap_sender_tx
	long	@__struct___bas_wrap_sender_rx
	long	@__struct___bas_wrap_sender_close
	long	@__struct__s_vfs_file_t_putchar
	long	@__struct__s_vfs_file_t_getchar
	long	@__system____root_opendir
	long	@__system____root_closedir
	long	@__system____root_readdir
	long	@__system____root_stat
	long	@__system____default_putc
	long	@__system____default_getc
	long	@__system____default_flush
	long	@_fatfs_cc_v_close
	long	@_fatfs_cc_v_read
	long	@_fatfs_cc_v_write
	long	@_fatfs_cc_v_lseek
	long	@_fatfs_cc_v_ioctl
	long	@_fatfs_cc_v_open
	long	@_fatfs_cc_v_creat
	long	@_fatfs_cc_v_opendir
	long	@_fatfs_cc_v_closedir
	long	@_fatfs_cc_v_readdir
	long	@_fatfs_cc_v_stat
	long	@_fatfs_cc_v_mkdir
	long	@_fatfs_cc_v_rmdir
	long	@_fatfs_cc_v_remove
	long	@_fatfs_cc_v_rename
	long	@_fatfs_cc_v_init
	long	@_fatfs_cc_v_deinit
	long	@__system___tx
	long	@__system___rx
	long	@__system___rxtxioctl_0188
	long	@__system____dummy_flush_0189
	long	@_fatfs_cc_v_flush
__heap_base
	long	0[1502]
objmem
	long	0[2]
stackspace
	long	0[1]
	org	COG_BSS_START
_var01
	res	1
_var02
	res	1
_var03
	res	1
_var04
	res	1
_var05
	res	1
_var06
	res	1
_var07
	res	1
_var08
	res	1
_var09
	res	1
arg01
	res	1
arg02
	res	1
arg03
	res	1
arg04
	res	1
arg05
	res	1
local01
	res	1
local02
	res	1
local03
	res	1
local04
	res	1
local05
	res	1
local06
	res	1
local07
	res	1
local08
	res	1
local09
	res	1
local10
	res	1
local11
	res	1
local12
	res	1
local13
	res	1
local14
	res	1
local15
	res	1
local16
	res	1
local17
	res	1
local18
	res	1
local19
	res	1
local20
	res	1
local21
	res	1
muldiva_
	res	1
muldivb_
	res	1
	fit	480
